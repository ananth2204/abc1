./ ADD NAME=$$LIB    0101-19004-19004-0951-00001-00001-00000-APLKS   12
     USERID().ASUTIL.ASM
./ ADD NAME=$DIRSTR  0155-17193-19325-1711-00087-00038-00000-APLKS   49
*   CBT#... FILE...      Aritecture Services                  LKS

 LOADMEM   ASMJCL    EXECJCL
 --------  --------  --------
           ASMBCL              compile/link individual pgm/sub-pgm(s)
           ASMPKG              compile/link String package
                               ..results are one single executable
           ASMSTR              compile/link String pgms
                               ..results are separate executables

 ASTNTSPD  ASMBCL              TRT table for verifying internal decimal
 ASTNTSZD  ASMBCL              TRT table for verifying external decimal
 ASTNTUCH  ASMBCL              TRT table for verifying unsigned decimal

 ASUSSVCB  ASMSTR              compile String sub-pgm package

                               >>> compile in any order <<<
 ASUDAPND  ASMBCL              append source to result
 ASUDBPOS  ASMBCL              return first/next substring position
                               ..Boyer-Moore string matching algorithm
                               ..optional case-insensitive
 ASUDCNTR  ASMBCL              return source centered
 ASUDDEDT  ASMBCL              return de-edited source string
 ASUDFPOS  ASMBCL              return first/next substring position
 ASUDHHEX  ASMBCL              return character/hex results
 ASUDLEFT  ASMBCL              return source left justified
 ASUDLPOS  ASMBCL              return last/previous substring position
 ASUDRGHT  ASMBCL              return source right justified
 ASUDSCNT  ASMBCL              return character and word count
 ASUDSINS  ASMBCL              return source plus/insert substring
 ASUDSSUB  ASMBCL              return substring
 ASUDSTRP  ASMBCL              return source stripped
 ASUDVHEX  ASMBCL              return character/zone/number results

                               >>> compile ASUDSCNT before others <<<
 ASUDJSTF  ASMBCL              return source justified
 ASUDSPCE  ASMBCL              return source spaced
 ASUDWDEL  ASMBCL              return string minus/delete word
 ASUDWPOS  ASMBCL              return position and text of nth word in
                               ..source

                               >>> compile ASUDBPOS before others <<<
 ASUDSDEL  ASMBCL              return source minus/delete substring
 ASUDSREP  ASMBCL              return source with substring replacing
 ASUDSVAR  ASMBCL              return lexemes from source via patterns

 *** generate misc routines ***
 ASTBIT1B  ASMBCL              test generation of bit flags (Dr. John)
 ASTCCB1B  ASMBCL    ASTIVP09  test chase ctl blk(s), pgm mgr
 ASTDOPEB  ASMBCL    ASTIVP08  test array dope vector creation
 ASTMISCB  ASMBCL    ASTIVP01  test various AS macro(s)
 ASTQFA1B  ASMBCL    ASTIVP05  test query file attributes
 ASTSRH1B  ASMBCL    ASTIVP07  test linear/binary search & heap sort
 ASUBSRHB  ASMBCL    ASTIVP07  vector binary search routine
 ASUBSZAB  ASMBCL    ASTIVP04  create file stats for QSAM/VSAM file(s)
 ASUBSZAB            FILEANAL  in USERID().BATCH.REXXLIB

 ASUFSRHB  ASMBCL    ASTIVP07  vector fibonaccian search routine
 ASUHSRTB  ASMBCL    ASTIVP07  vector heap sort routine
 ASU3I01B  ASMBCL              build ASU run-time control blocks
 ASU3PM1B  ASMBCL    ASTIVP09  program management svc mod
 ASU3QFAB  ASMBCL    ASTIVP04  query file attributes
 ASU3QEIB  ASMBCL    ASTIVP01  query environment information
                               ..coded for zos 2.2, must change
                               ..for newer releases
 ASU3QOIB  ASMBCL    ASTIVP09  query program object information
 ASU3T01B  ASMBCL    ASTIVP09  dump ASCA, ASAB, ASABX
 ASU3T02B  ASMBCL    ASTIVP09  print CDE chain (loaded modules)
 SSLEANAL  ASMBCL    SSLEANAL  LanguageEnvironment loadlib analysis
                               ..inventory loadlib
                               ..not as comprehensive as COBANAL
                               ..but still very useful

 *** generate ASU LE message table ***
 ASULEMSG  CEEBLDTX            follow instructions in member to
                               create ASU LE message table
 ASUENU01  ASMBCL              assembler ASU LE message table
 ASUBALCT                      assembler copybook ASU LE message table
 ASUIGZCT                      cobol copybook ASU LE message table
 UASUMSGT  ASMBCL              create ASU LE message table

 *** depreciated ***
 ZSUDHHEX  ASMBCL              return character/hex results
 *** old versions calling ASUDFPOS instead of ASUDBPOS ***
 ZSUDSDEL  ASMBCL              return source minus/delete substring
 ZSUDSREP  ASMBCL              return source with substring replacing
 ZSUDSVAR  ASMBCL              return lexemes from source via patterns
./ ADD NAME=@ASU     0112-16243-19294-1054-00038-00001-00000-APLKS   37
ASM   data_area MACRO    name_pattern - ASu  where u=1 - Assembler
ASM   code_area MACRO    name_pattern - ASu  where u=2 - Assembler
ASM   data_area COPYBOOK name_pattern - ASu  where u=3 - Assembler
ASM   code_area COPYBOOK name_pattern - ASu  where u=4 - Assembler
COBOL data_area COPYBOOK name_pattern - ASu  where u=5 - COBOL
COBOL code_area COPYBOOK name_pattern - ASu  where u=6 - COBOL
REXX  code_area EXEC     name_pattern - anything

                PROGRAM  name_pattern - ASu  where u=L - Lookup table|list
                                                   u=U - Utility
                                                   u=R - Report
                                                   u=C - Common Service
                                                   u=T - Asm Table
                PROGRAM  name_pattern - ASuv where v=3 - VM|z/OS
                                                   v=5 - VSE
                                                   v=  - anything
                PROGRAM  name_pattern - ASuvwxyz
                                             where wxyz= anything

                MAIN_PGM name_pattern - ASu  where u=?   sub-appl
                                                   u=T - Test
                                                   u=U - Utility
                MAIN_PGM name_pattern - ASuvwxy
                                             where vwxy= anything
                MAIN_PGM name_pattern - ASuvwxyz
                                             where z=A - batch/CICS
                                                   z=B - batch|n/a
                                                   z=C - CICS
                                                   z=T - TSO/batch
                                                   z=R - REXX
                MAIN_PGM name_pattern - ASuvwxyz
                                             when  z=C - CICS
                                             where x=B - business driver
                                                   x=M - menu driver
                                                   x=P - prompt driver
                                                   x=S - screen driver
                                                   x=R - relationship driver
                                                   y=0:9
./ ADD NAME=@ASUMSG  0103-18304-19154-0919-00035-00001-00000-APLKS   37
*******  **** 01234 **************************************************
ASU035_  0101  WESC var1:var2 var3 Action var4 is invalid
ASU036_  0102 I     var1:var2 var3 Valid actions are: var7
ASU037_  0103  WE   var1:var2 var3 Action var4 is not supported
ASU038_  0104 I     var1:var2 var3 Supported actions are: var7
ASU039_  0105  WESC var1:var2 var3 Argument (var5) is invalid
ASU03A_  0106 I     var1:var2 var3 Valid argument values are: var7
ASU03B_  0107  WESC var1:var2 var3 Failed with R15=var5 Reason=var6
ASU03C_  0108  WESC var1:var2 var3 Contains invalid data var7
ASU03D_  0109  WESC var1:var2 var3 branch index (var5) is invalid
ASU03E_  0110  WESC var1:var2 var3 "var7" not found
ASU03F_  0111  WESC var1:var2 var3 Action var4 prematurely terminated
                    due to data trunc
ASU03G_  0112  WES  var1:var2 var3 is not numeric
ASU03H_  0113  WESC var1:var2 var3 was passed too many arguments
ASU03I_  0114  WESC var1:var2 var3 was passed too few arguments
ASU03J_  0115  WESC var1:var2 var3 numeric data (var5) is out of
                    range (var7)
ASU03K_  0116  WESC var1:var2 var3 underflow
ASU03L_  0117  WESC var1:var2 var3 overflow
ASU03M_  0118  WESC var1:var2 var3 Action var4 failed with R15=var5
                    Reason=var6
ASU03N_  0119 I     var1:var2 var3 var7
ASU03O_  0120 I     var1:var2 var3 var8
ASU03P_  0121  WESC var1:var2 var3 Syntax error POS=var5 var7

Where:
  var1 = CSECT
  var2 = COPYBOOK|FIELD|LABEL|LOCALSTG|MACRO|SUB-ROUTINE
  var3 = name associated with var2
  var4 = action
  var5 = nbr_str
  var6 = nbr_str
  var7 = txt_str
  var8 = txt_str
./ ADD NAME=@STRSVC  0119-15216-19172-0843-00070-00001-00000-APLKS   30
    ARCHITECTURE SERVICES UTILITY (COMMON)

    The String Package:
    Language: Assembler, LE compliant.
       AMODE: 31
       RMODE: ANY
        REUS: RENT (LPA eligible)

    The following program is all of the string services
    packaged together as a general string service provider.

      ASUSSVCB - STRING SERVICE(S) PROVIDER

    All of the individual services(s) are linked with the
    previous module.

    The following programs are the individual service(s).
    They are all linked as individual module(s) just in
    case you do not want to carry all of the baggage for just
    one service.
      ASUDAPND - append source to result
      ASUDBPOS - return first/next substring position (Boyer-Moore)
      ASUDCNTR - return source centered
      ASUDDEDT - return de-edited source string
      ASUDFPOS - return first/next substring position
      ASUDHHEX - return source/horizontal hex results
      ASUDJSTF - return source justified
      ASUDLEFT - return source left justified
      ASUDLPOS - return last/previous substring position
      ASUDRGHT - return source right justified
      ASUDSCNT - return character and word count
      ASUDSDEL - return source minus/delete substring
      ASUDSINS - return source plus/insert substring
      ASUDSPCE - return source spaced
      ASUDSREP - return source with substring replacing
      ASUDSSUB - return substring
      ASUDSTRP - return source stripped
      ASUDSVAR - return lexemes from source via patterns
      ASUDVHEX - return character/zone/number results
      ASUDWDEL - return string minus/delete word
      ASUDWPOS - return position and text of nth word in source

    Template Formats:
      Type: 1 binary byte
        x'01' - Input delimiter / alphabet list
      Lgth: 2 binary byte(s) (16:256), byte aligned
            if value is negative then
              Text field contains a 4-byte address
      Text: list of input characters

      Type: 1 binary byte
        x'02' - Input string pattern
      Lgth: 2 binary byte(s), byte aligned
            if value is negative then
              Text field contains a 4-byte address
      Text: any string pattern of length Lgth

      Type: 1 binary byte
        x'03' - Input numeric pattern
      Lgth: 2 binary byte(s), byte aligned
            if value is negative then
              Text field contains a 4-byte address
      Text: any numeric pattern of length Lgth

      Type: 1 binary byte
        x'04' - Output result pattern
      Size: 2 binary byte(s) maximum size limit of result, byte aligned
      Lgth: 2 binary byte(s) actual length of result, byte aligned
      Text: result string of length Lgth

./ ADD NAME=ASTBIT1B 0119-17048-19156-1007-00059-00319-00000-APLKS   13
*        Just Assembly to determine if the bit macro(s)
*        generate the appropriate code
         SPACE 1
         YREGS
         EJECT
ASTBIT1B CSECT
ASTBIT1B AMODE 31
ASTBIT1B RMODE ANY
BEGIN    SAVE  (14,12),,                                               +
               'ASM TEST PGM - ASTBIT1B,&SYSDATC,&SYSTIME'
         LR    R11,R15
         USING ASTBIT1B,R11   EST BASE ADDR REG
         LA    R15,GPRSA      LOAD PGM RSA ADDR
         ST    R13,4(,R15)    LINK CALLER(S) RSA TO PGM RSA
         ST    R15,8(,R13)    LINK PGM RSA TO CALLER(S) RSA
         LR    R13,R15        RESET PGM RSA ADDR
         XR    R15,R15        CLEAR RETURN CODE
***      USING WORKSTG,R13    EST ADDR TO WORKING-STORAGE
         SPACE 2
         BRAS  R14,HOBO
         SPACE 2
         L     R13,4(,R13)    LOAD CALLER(S) RSA ADDR
         RETURN (14,12),,RC=(15)
***      DROP  R11
         EJECT
WORKSTG  EQU   *
GPRSA    DC    18F'0'         PGM(S) RSA
         SPACE 2
         BitDef B1,B2,B3,(B4,B5,B6,B7,B8,B9),B10
         SPACE 1
         BitDef G1,(G2,G3,G4,G5,G6,G7,G8,G9)
         SPACE 1
***      BitDef (H2,H3,H4,H5,H6,H7,H8,H9,H10),H11
         SPACE 1
         BitDef (K1,K2,K3,K4),(K5,K6,K7,K8),K9,K10
         SPACE 2
         LTORG
***      DROP  R13
HOBO     DS    0D
         BitOn B1,B2,B3
         BitOn B4,B5,B10,G1,G2,G3
         BitOn K1,K2,K5,K6,K9,K10
         BitOff B2,B3,B4,B5
         BitOff K1,K5,K9,K10
         BitInv K2,K6,K10
L1       JBitOn (G1,G2,G3),OK
         NOP   TERM
L2       JBitOn (G1,B3,K6),OK,SELECT=ANY
         NOP   TERM
L3       JBitOn (G2,G3),OK,SELECT=ANY
         NOP   TERM
L4       JBitOff (K1,K5,K9,K10),OK
         NOP   TERM
OK       EQU   *
         NOP   TERM
         SPACE 2
TERM     EQU   *
         BR    R14
         END
./ ADD NAME=ASTCCB1B 0141-19091-19323-1553-01128-00439-00000-APLKS   47
*PROCESS RENT
         TITLE 'ASTCCB1B - CHASE CONTROL BLOCKS'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* TEST CHASE CONTROL BLOCKS
*
* PURPOSE: TEST CHASE CONTROL BLOCKS
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTCCB1B'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG, BAR OF PSA
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG, LEN OF EACH TIOTE
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
R6       EQU   6              BAR OF TIOT, TIOTE
R7       EQU   7              BAR OF ZB505
R8       EQU   8              BAR OF JFCB
*                             BAR OF ASCA, ASAB, ASABX
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             BAR 2 OF LE DSA, RSA & DYNAMIC
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
DD#      EQU   30             supported nbr of DD in TIOTE
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
#CEEPLOD2 EQU   3948          enclave/thread level load service
*                             ..specify search order
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..F'0:17,18:23,24:31' input
*                             ..F'token' output
*                             ..A(ep addr of module) output
*                             ..3F'feedback' optional
#CEEPDEL2 EQU   3952          enclave level delete service
*                             ..delete module loaded by CEEPLOD2
*                             ..F'token' input
*                             ..3F'feedback' optional
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
ASCAptr  DS    A              address of AS ASCA
         ORG   ASCAptr
SUBPARM0 DS    A
ASABptr  DS    A              address of AS ASAB
ASABXptr DS    A              address of AS ASAB1
@MDHEX   DS    A              address of ASUMDHEX msg hex dump
@3I01B   DS    A              address of ASU3I01B ctl blk init
@3PM1B   DS    A              address of ASU3PM1B pgm mgr
@3QOIB   DS    A              address of ASU3QOIB query pgmobj info
@PLEFDBK DS    A              address of pgm LE FEEDBACK
         SPACE 1
LS_@TCB  DS    A              TCB current pointer
LS_@JOBSTEPTCB DS    A        addr for JOBSTEP TCB
LS_@JOBLIBDCB DS    A         JOBLIB DCB pointer
LS_@JPALCDE DS    A           JPA lst CDE pointer
*                             ..points to JPA CDE queue
LS_@TIOT DS    A              TIOT pointer
LS_@TIOTE DS    A             TIOTE pointer
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
ASRB     AS1MASDS ADS=ASRB,   expand AS anchor block                   +
               DSECT=NO
         SPACE 1
         AS1MUTSA UDS=(RESA,LEWORK)
         SPACE 1
         DS    0D
         AS1MUTSA UDS=(MISC)
         ORG   VSTR
LNEAREA  DS    0XL122         Print line area (CEEMOUT)
LNELEN   DS    H
         SPACE 1
LNETXT   DS    CL120
         ORG   LNETXT
         SPACE 1
         ORG   LNETXT+24      ..line 002
LNE002A  DS    CL8            ....TCB ADDR x'znznznzn'
         ORG   LNETXT+54
LNE002B  DS    CL8            ....JOBSTEP TCB ADDR x'znznznzn'
         SPACE 1
         ORG   LNETXT+21      ..line 004
LNE004A  DS    CL8            ....JOBNAME xxxxxxxx
         ORG   LNETXT+40
LNE004B  DS    CL8            ....STEPNAME xxxxxxxx
         ORG   LNETXT+59
LNE004C  DS    CL8            ....PROCSTEP xxxxxxxx
         SPACE 1
         ORG   LNETXT+17      ..line 006
LNE006A  DS    ZL2            ....TIOTE len
         ORG   LNETXT+30
LNE006B  DS    CL2            ....TIOTE status
         ORG   LNETXT+42
LNE006C  DS    CL2            ....TIOTE flag
         ORG   LNETXT+54
LNE006D  DS    CL8            ....TIOTE DDNAME
         ORG   LNETXT+75
LNE006E  DS    CL6            ....TIOTE SWA JFCB
         SPACE 1
         ORG   LNETXT+20      ..line 007
LNE007A  DS    CL44           ....TIOTE DSNAME
         SPACE 1
         ORG   LNETXT+19      ..line 009
LNE009A  DS    CL8            ....minor name
         ORG   LNETXT+35
LNE009B  DS    CL8            ....major name
         ORG   LNETXT+51
LNE009C  DS    CL8            ....EP@ x'znznznzn'
         ORG   LNETXT+72
LNE009D  DS    ZL5            ....use count
         SPACE 1
         ORG   LNETXT+20      ..line 011
LNE011A  DS    CL8            ....module name
         ORG   LNETXT+36
LNE011B  DS    CL8            ....EP@ x'znznznzn'
         ORG
         SPACE 1
@SWAEPA  DS    A              SCHEDULER WORK AREA EXTENDED PARM AREA
EPA      DS    XL(L'SWAEPAX)
         SPACE 1
SWAPARMS SWAREQ MF=L
         SPACE 1
         DS    0D
         COPY  AS3DMPRB       hex dump commarea
         SPACE 1
         DS    0D
         COPY  AS3OBJCA       program object commarea
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
LS_NMLEN DS    F
LS_MODULE DS    CL8
LS_EP@   DS    A
LS_TOKEN DS    F              LE module load token for ASUP2DSB
LS_TIOTELEN DS    F           combined length of the TIOTE(s)
         SPACE 1
         AS2EPA MF=L
         SPACE 1
**       AS1MUTSA UDS=LTRACE
         SPACE 1
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* CONTROL BLOCKS FOR AS
* --------------------------------------------------------- *
         SPACE 1
ASCAHDR  AS1MASDS ADS=ASCA,MF=D    AS communication area
ASABHDR  AS1MASDS ADS=ASAB,MF=D    AS anchor block
ASABXHDR AS1MASDS ADS=ASAB1,MF=D   AS batch anchor block extention
         SPACE 2
* --------------------------------------------------------- *
* CONTROL BLOCKS FOR MVS
* --------------------------------------------------------- *
         SPACE 1
*        PREFIXED SAVE AREA (PSA)
         IHAPSA  DSECT=YES,LIST=NO
         SPACE 2
         PUSH  PRINT
**       PRINT NOGEN
*        MVS COMMUNICATION VECTOR (CVT) required for SWAREQ
         CVT   DSECT=YES      (LIST=YES)
         POP   PRINT
         SPACE 2
         PUSH  PRINT
         PRINT NOGEN
*        JOB ENTRY SUBSYSTEM COMMUNICATION TABLE (JESCT)
*                                       required for SWAREQ
         IEFJESCT
         POP   PRINT
         SPACE 2
*        TASK CONTROL BLOCK (TCB)
         IKJTCB DSECT=YES,LIST=NO
         SPACE 2
         PUSH  PRINT
**       PRINT NOGEN
*        TASK INPUT/OUTPUT TABLE (TIOT/TIOTE)
TIOT     DSECT
         IEFTIOT1
         POP   PRINT
         SPACE 2
*        JOB FILE CONTROL BLOCK (JFCB)
JFCB     DSECT
         IEFJFCBN LIST=NO
         SPACE 2
         PUSH  PRINT
**       PRINT NOGEN
*        EXTERNAL PARAMETER AREA FOR SCHEDULER WORK AREA
*                                       required for SWAREQ
         IEFZB505 LOCEPAX=YES
         POP   PRINT
         SPACE 2
         PUSH  PRINT
**       PRINT NOGEN
*        SCHEDULER WORK AREA BLOCK ID DEFINITIONS
*                                       required for SWAREQ
         IEFQMIDS
         POP   PRINT
         SPACE 2
         PUSH  PRINT
**       PRINT NOGEN
*        CONTENTS DIRECTORY ENTRY (CDE)
         IHACDE
         POP   PRINT
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPPA,                                               +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO IF CALLED BY NON-LE          +
               MAIN=YES,                                               +
               ENCLAVE=NO,                                             +
               BASE=(10)
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         SPACE 1
         DROP  RD
         LR    RB,RD
         AHI   RB,4096
         USING CEEDSA,RD,RB
         SPACE 1
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME MAIN=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPPA     CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=01,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *
         LA    R0,CLRBEG
         LAY   R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
         MVC   LEMDEST,F2
         MVC   VLEN,H120
         SPACE 1
         LA    R0,ASRB_#LEN
         STH   R0,ASRB_DSLEN  init ASRB length
         LA    R0,$ASRB
         STH   R0,ASRB_DSID   init ASRB id
         MVC   ASRB_EYE,=CL8'**ASRB**'  init ASRB eye-catcher
         SPACE 1
         XR    RF,RF
         CEEFETCH ,                                                    +
               NAME=ASU3I01B,                                          +
               TOKEN=FW32,                                             +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,@3I01B           AS init ctl blks sub-pgm
         CLC   LECTOK,CEE000
         JE    INIT0040
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0040 EQU   *
*        allocate/initialize the AS control block(s)
         AS2PLIST (ASCAptr,0),                                         +
               VL,MF=(E,PLIST)
*        CALL ASU3I01B
         L     RF,@3I01B
         BASR  RE,RF     link to
         SPACE 1
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         L     R8,ASCA_@ASAB
         DROP  R8
         ST    R8,ASABptr     save addr of ASAB
         USING ASABHDR,R8
         L     R8,ASAB_@ASABX
         USING ASABXHDR,R8
         ST    R8,ASABXptr    save addr of ASABX
         DROP  R8
         SPACE 1
         CEERELES ,                                                    +
               TOKEN=FW32,                                             +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         CLC   LECTOK,CEE000
         JE    INIT0060
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0060 EQU   *         pre-load modules
         SPACE 1
         L     R8,ASCAptr
         USING ASCAHDR,R8
         SPACE 1
         AS2LDMOD ASCAHDR,ASRB,,=CL8'ASUMDHEX'
         ST    RF,@MDHEX      save ASUMDHEX EPA
         AS2LDMOD (2),(3),,=CL8'ASU3QOIB'
         ST    RF,@3QOIB      save ASU3QOIB EPA
         DROP  R8
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 2
MAIN0100 AS2LTRCE
         SPACE 1
         BRAS  RE,TIOTRTN
         BRAS  RE,LOADRTN
         BRAS  RE,CDERTN
MAIN0110 EQU   *
         MVC   REQ_NAME,=CL8'ASUP2DSB'
         XC    REQ_@DCB,REQ_@DCB
         MVC   REQ_TOKEN,LS_TOKEN
         MVI   REQ_LIB,C'Y'
         MVI   REQ_BLDL,C'Y'
         MVI   REQ_CSV,C'Y'
         MVI   REQ_CDE,C'Y'
         MVI   REQ_LDQ,C'Y'
         MVI   REQ_SLM,C'Y'
         MVI   REQ_CPSI,C'Y'
         BRAS  RE,QOIRTN
         SPACE 1
         MVC   REQ_NAME,=CL8'COBANAL'
         XC    REQ_TOKEN,REQ_TOKEN
         MVI   REQ_LDQ,C'N'
         MVI   REQ_CPSI,C'N'
         BRAS  RE,QOIRTN
         SPACE 1
         MVC   REQ_NAME,=CL8'DAF'
         BRAS  RE,QOIRTN
         SPACE 1
         MVC   REQ_NAME,=CL8'REVIEW'
         BRAS  RE,QOIRTN
         SPACE 1
         MVC   REQ_NAME,=CL8'TAPEDIR'
         BRAS  RE,QOIRTN
         SPACE 1
MAIN0190 EQU   *
         BRAS  RE,DELRTN
         SPACE 1
MAIN0200 AS2LTRCE
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE999L),LNE999T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         L     R8,ASCAptr
         USING ASCAHDR,R8
         SPACE 1
         MVC   CSV1_PGMNME,=CL8'ASU3T01B'
         AS2EPA MF=E
         AS2PLIST (ASCAHDR,0),VL,MF=(E,PLIST)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   CSV1_PGMNME,=CL8'ASU3T02B'
         AS2EPA MF=E
         AS2PLIST (ASCAHDR,0),VL,MF=(E,PLIST)
         BASR  RE,RF     LINK TO
         SPACE 1
         AS2LDMOD ASCAHDR,ASRB,2,=CL8'ASUMDHEX'
         AS2LDMOD (2),(3),2,=CL8'ASU3QOIB'
         DROP  R8
         SPACE 1
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 1
EXIT0090 EQU   *
         AS2PLIST (RTNCD,0),VL,MF=(E,PLIST)
*        CALL CEE3SRC
         L     RF,=V(CEE3SRC)
         BASR  RE,RF     LINK TO
         SPACE 1
         L     R0,RSNCD
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15),                                                +
               MF=(E,PLIST)
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TIOTRTN  AS2LTRCE
         AS2RESTK PUSH
         USING PSA,R0         est addr to PSA
         SPACE 1
         L     R6,PSATOLD     get addr of TCB
         ST    R6,LS_@TCB
         DROP  R0
         USING TCB,R6         est addr to TCB
         SPACE 1
         L     R6,TCBJSTCB    get addr of JOBSTEP TCB
         ST    R6,LS_@JOBSTEPTCB
         L     R0,TCBTIO      get addr of TIOT
         ST    R0,LS_@TIOT
         ICM   R0,14,TCBJPQB  get addr of lst CDE for JPA
         SRL   R0,8
         ST    R0,LS_@JPALCDE
         L     R0,TCBJLB      get addr of JOBLIB DCB
         ST    R0,LS_@JOBLIBDCB
         DROP  R6
         SPACE 1         line 001
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE001L),LNE001T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1         line 002
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE002L),LNE002T
         UNPK  ZD01(9),LS_@TCB(L'LS_@TCB+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE002A,ZD01+8-L'LNE002A      copy @TCB
         UNPK  ZD01(9),LS_@JOBSTEPTCB(L'LS_@JOBSTEPTCB+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE002B,ZD01+8-L'LNE002B      copy @JOBSTEPTCB
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1         line 003
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE003L),LNE003T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         L     R6,LS_@TIOT
         USING TIOT,R6
         SPACE 1         line 004
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE004L),LNE004T
         MVC   LNE004A,TIOCNJOB    copy JOB name
         CLI   TIOCJSTN,C' '  Q. PROC JOB STEP name
         JE    TIOT0010       A. no, bypass
         MVC   LNE004B,TIOCJSTN    copy PROC JOB STEP name
         MVC   LNE004C,TIOCPSTN    copy PROC STEP name
         J     TIOT0020
TIOT0010 EQU   *
         MVC   LNE004B,TIOCSTPN    copy non-PROC JOB STEP name
         DROP  R6
TIOT0020 EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1         line 005
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE005L),LNE005T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         XC    LS_TIOTELEN,LS_TIOTELEN
         L     R6,LS_@TIOT
         USING TIOT,R6
         SPACE 1
         LA    R6,TIOENTRY    get addr of TIOTE
         ST    R6,LS_@TIOTE
         DROP  R6
         USING TIOENTRY,R6
         SPACE 1
TIOT0060 EQU   *
         ICM   R3,8,TIOELNGH  Q. length of TIOTE > 0
         JZ    TIOT0800       A. no, bypass
         SRL   R3,24
         SPACE 1         line 006
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE006L),LNE006T
         CVD   R3,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE006A,ZD01+L'ZD01-L'LNE006A      copy TIOTE len
         UNPK  ZD01(9),TIOESTTA(L'TIOESTTA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE006B,ZD01+8-L'LNE006B           copy TIOTE status
         UNPK  ZD01(9),TIOELINK(L'TIOELINK+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE006C,ZD01+8-L'LNE006C           copy TIOTE flag
         MVC   LNE006D,TIOEDDNM                   copy DDNAME
         UNPK  ZD01(9),TIOEJFCB(L'TIOEJFCB+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE006E,ZD01+8-L'LNE006E           copy TIOTE SWA JFCB
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1         line 007
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE007L),LNE007T
         LA    R7,EPA         get addr of EXTENDED PARM AREA
         ST    R7,@SWAEPA
         USING ZB505,R7       est addr to EPA
         SPACE 1
         XC    SWAEPAX,SWAEPAX
         MVC   SWVA,TIOEJFCB  set SVA of JFCB into EPA
         SWAREQ UNAUTH=YES,                                            +
               FCODE=RL,           action code READ/LOCATE             +
               EPA=@SWAEPA,                                            +
               MF=(E,SWAPARMS)
         LARL  RE,EXIT0000    set default return
         LTR   RF,RF          Q. any errors
         JNZ   TXT0107A       A. yes, setup LE condition
*                                ..00-SUCCESSFUL
*                                ..08-SVA IS NOT VALID
*                                ..24-SVA DOESN'T CORR TO VIRT ADDR
*                                ..28-PTR TO EPAL NOT VALID
         SPACE 1
         CLI   SWBLKID,SWJFCBID    Q. SYSTEM JFCB
         JNE   TXT0108A            A. no, error
         L     R8,SWBLKPTR
         DROP  R7
         USING INFMJFCB,R8
         MVC   LNE007A,JFCBDSNM    copy DSNAME
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         DROP  R8
         SPACE 1
         AR    R6,R3          point to next TIOTE
         A     R3,LS_TIOTELEN
         ST    R3,LS_TIOTELEN combined length of the TIOTE(s)
         J     TIOT0060       loop back
         DROP  R6
         SPACE 1
TIOT0800 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
*        call ASUMDHEX to dump the TIOTE(s)
         ICM   R0,15,LS_TIOTELEN
         JZ    TIOT0900
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F1
         MVC   DMPRB_TITLE,=CL44'all of the TIOTE entries'
         L     R6,LS_@TIOTE
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         SPACE 1
         AS2PLIST (ASCAHDR,AS3DMPRB,0(R6)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
TIOT0900 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Load modules in storage
* --------------------------------------------------------- *
LOADRTN  AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE010L),LNE010T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNE011A,=CL8'ASUMDHEX'
         UNPK  ZD01(9),@MDHEX(L'@MDHEX+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE011B,ZD01+8-L'LNE011B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNE011A,=CL8'ASU3QOIB'
         UNPK  ZD01(9),@3QOIB(L'@3QOIB+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE011B,ZD01+8-L'LNE011B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNE011A,=CL8'ASUP2DSB'
         MVC   LS_MODULE,LNE011A
         MVC   LS_NMLEN,F8
*        3rd parm - request MVS only thread
         AS2PLIST (LS_NMLEN,LS_MODULE,F0,LS_TOKEN,LS_EP@,0),           +
               VL,MF=(E,PLIST)
*        CALL  CEEPLOD2
         L     RF,CEECAACELV
         L     RF,#CEEPLOD2(,RF)
         BASR  RE,RF
         SPACE 1
         UNPK  ZD01(9),LS_EP@(L'LS_EP@+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE011B,ZD01+8-L'LNE011B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNE011A,=CL8'COBANAL'
         MVC   LS_MODULE,LNE011A
         LOAD  EPLOC=LS_MODULE
         ST    R0,LS_EP@
         UNPK  ZD01(9),LS_EP@(L'LS_EP@+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE011B,ZD01+8-L'LNE011B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNE011A,=CL8'DAF'
         MVC   LS_MODULE,LNE011A
         LOAD  EPLOC=LS_MODULE
         ST    R0,LS_EP@
         UNPK  ZD01(9),LS_EP@(L'LS_EP@+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE011B,ZD01+8-L'LNE011B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNE011A,=CL8'REVIEW'
         MVC   LS_MODULE,LNE011A
         LOAD  EPLOC=LS_MODULE
         ST    R0,LS_EP@
         UNPK  ZD01(9),LS_EP@(L'LS_EP@+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE011B,ZD01+8-L'LNE011B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNE011A,=CL8'TAPEDIR'
         MVC   LS_MODULE,LNE011A
         LOAD  EPLOC=LS_MODULE
         ST    R0,LS_EP@
         UNPK  ZD01(9),LS_EP@(L'LS_EP@+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE011B,ZD01+8-L'LNE011B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
LOAD0800 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Delete modules in storage
* --------------------------------------------------------- *
DELRTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        delete module ASUP2DSB
         AS2PLIST (LS_TOKEN,0),VL,MF=(E,PLIST)
**       CALL  CEEPDEL2
         L     RF,CEECAACELV
         L     RF,#CEEPDEL2(,RF)
         BASR  RE,RF
         SPACE 1
         MVC   LS_MODULE,=CL8'COBANAL'
         DELETE EPLOC=LS_MODULE
         SPACE 1
         MVC   LS_MODULE,=CL8'DAF'
         DELETE EPLOC=LS_MODULE
         SPACE 1
         MVC   LS_MODULE,=CL8'REVIEW'
         DELETE EPLOC=LS_MODULE
         SPACE 1
         MVC   LS_MODULE,=CL8'TAPEDIR'
         DELETE EPLOC=LS_MODULE
         SPACE 1
DEL0800  EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Retrieve CDE information
* --------------------------------------------------------- *
         SPACE 1
CDERTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         ICM   R6,15,LS_@JPALCDE   Q. get addr of JPAQ
         JZ    CDE0800             A. no, bypass
         USING CDENTRY,R6     est addr to CDE entry
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE008L),LNE008T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
CDE0100  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE009L),LNE009T
         TM    CDATTR,CDMIN   Q. minor CDE
         JNO   CDE0102        A. no, bypass
         MVC   LNE009A,CDNAME copy program name to minor
         ST    R6,FW11
         L     R6,CDXLMJP     get major CDE
         MVC   LNE009B,CDNAME copy program name to major
         L     R6,FW11
         J     CDE0104
CDE0102  EQU   *
         MVC   LNE009B,CDNAME copy program name to major
CDE0104  EQU   *
         UNPK  ZD01(9),CDENTPT(L'CDENTPT+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE009C,ZD01+8-L'LNE009C copy EP@
         LH    R0,CDUSE
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE009D,ZD01+L'ZD01-L'LNE009D copy use count
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL  CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL  CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to dump the CDE(s)
         MVC   DMPRB_LEN,F32
         MVC   DMPRB_NBR,F2
         MVC   DMPRB_TITLE,=CL44'dump of CDE entry'
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         SPACE 1
         AS2PLIST (ASCAHDR,AS3DMPRB,CDENTRY),                          +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
         L     RF,=V(CEEMOUT)
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
         ICM   R6,15,CDCHAIN  Q. any more on the chain
         JNZ   CDE0100        A. yes, loop back
         SPACE 1
CDE0800  EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Query program object information
* --------------------------------------------------------- *
         SPACE 1
QOIRTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         SPACE 1
         AS2PLIST (ASCAHDR,F2,AS3OBJCA,0),                             +
               VL,MF=(E,PLIST)
*        CALL ASU3QOIB
         L     RF,@3QOIB
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
         L     RF,=V(CEEMOUT)
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to dump the commarea
         LA    R0,AS3OBJCA_LEN
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F3
         MVC   DMPRB_TITLE,=CL44'dump of AS3OBJCA'
         SPACE 1
         AS2PLIST (ASCAHDR,AS3DMPRB,AS3OBJCA,0),                       +
               VL,MF=(E,PLIST)
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
         L     RF,=V(CEEMOUT)
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (ASCAHDR,F5,AS3OBJCA,0),                             +
               VL,MF=(E,PLIST)
*        CALL ASU3QOIB
         L     RF,@3QOIB
         BASR  RE,RF     LINK TO
         DROP  R8
         SPACE 1
QOI0800  EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* dynamically retrieve the module EPA
* --------------------------------------------------------- *
         SPACE 1
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0107A AS2LTRCE
         AS2RESTK PUSH
         ST    RF,RTNCD
         XC    RSNCD,RSNCD
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'SWAREQ'
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03B_0002
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     ERTN0800
         SPACE 2
TXT0108A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SWBLKID'
*        INSERT TEXT STRING (VARIABLE 7)
         USING ZB505,R7            EST ADDR TO EPA
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD01(9),SWBLKID(L'SWBLKID+1)
         DROP  R7
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD01+8-2
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9
         SPACE 2
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RC,RD
         DROP  RA
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F8       DC    F'8'
F32      DC    F'32'
H1       DC    H'1'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H120     DC    H'120'
         SPACE 2
LNE001T  DC    Y(15),C'&CSECT:   TCB'
LNE001L  EQU   *-LNE001T
         SPACE 1
LNE002T  DC    Y(63),C'&CSECT:    TCB ADDR x''znznznzn''  JOBSTEP TCB A+
               DDR x''znznznzn'''
LNE002L  EQU   *-LNE002T
         SPACE 1
LNE003T  DC    Y(15),C'&CSECT:  TIOT'
LNE003L  EQU   *-LNE003T
         SPACE 1
LNE004T  DC    Y(66),C'&CSECT:    JOBNAME xxxxxxxx  STEPNAME xxxxxxxx P+
               ROCSTEP xxxxxxxx'
LNE004L  EQU   *-LNE004T
         SPACE 1
LNE005T  DC    Y(15),C'&CSECT: TIOTE'
LNE005L  EQU   *-LNE005T
         SPACE 1
LNE006T  DC    Y(82),C'&CSECT:    LEN nn  STATUS x''zn''  FLAG x''zn'' +
                DDNAME xxxxxxxx  SWA_JFCB x''znznzn'''
LNE006L  EQU   *-LNE006T
         SPACE 1
LNE007T  DC    Y(64),C'&CSECT:    DSNAME xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+
               xxxxxxxxxxxxxx'
LNE007L  EQU   *-LNE007T
         SPACE 1
LNE008T  DC    Y(15),C'&CSECT:   CDE'
LNE008L  EQU   *-LNE008T
         SPACE 1
LNE009T  DC    Y(77),C'&CSECT:    MINOR xxxxxxxx  MAJOR xxxxxxxx  EP@ x+
               ''znznznzn''  Use count nnnnn'
LNE009L  EQU   *-LNE009T
         SPACE 1
LNE010T  DC    Y(15),C'&CSECT:  LOAD'
LNE010L  EQU   *-LNE010T
         SPACE 1
LNE011T  DC    Y(45),C'&CSECT:    MODULE xxxxxxxx  EP@ x''znznznzn'''
LNE011L  EQU   *-LNE011T
         SPACE 1
LNE999T  DC    Y(21),C'&CSECT: END OF STEP'
LNE999L  EQU   *-LNE999T
         SPACE 2
DMPTITLE DC  CL80'&CSECT - LE STORAGE DUMP VIA CEE3DMP'
DMPOPT   DC  CL255'NOTRACE NOFILE VAR STOR SF(ALL) NOCOND GENO'
         SPACE 2
         LTORG
         DROP  R9
         END   &CSECT
./ ADD NAME=ASTDOPEB 0111-18352-18362-1123-00439-00813-00000-APLKS   36
*PROCESS RENT
         TITLE 'ASTDOPEB - TEST ARRAY DOPE VECTOR'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* TEST ARRAY DOPE VECTOR
*
* PURPOSE: TEST ARRAY DOPE VECTOR
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTDOPEB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
R6       EQU   6              WORK REG
R7       EQU   7              WORK REG
R8       EQU   8              WORK REG
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC)
         ORG   VTXT
MSGTXT   EQU   *,83,C'C'
MSG_A    DS    CL53
         DS    CL2
MSG_B    DS    CL8
         DS    CL2
MSG_C    DS    CL8
         DS    CL2
MSG_D    DS    CL8
         ORG
         SPACE 1
         AS1MUTSA UDS=(RESA,LEWORK)
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
SUBPLIST DS    A
         SPACE 1
SUBCNT   DS    F
XPTR     DS    A
         AS2AINDX MF=L
         SPACE 1
ARRAY5   AS2DOPEV ,                                                    +
               PREFIX=(Z_),                                            +
               MF=L
         SPACE 1
**       AS1MUTSA UDS=LTRACE
         SPACE 1
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
DOPE     AS2DOPEV ,                                                    +
               DIM=3,                                                  +
               MF=D
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPPA,                                               +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO IF CALLED BY NON-LE          +
               MAIN=YES,                                               +
               ENCLAVE=NO,                                             +
               BASE=(10)
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         SAVE ORIGINAL R1 VALUE
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME MAIN=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPPA     CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=00,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
         MVC   LEMDEST,F2
         MVC   VLEN,H83
         SPACE 1
**       AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 2
MAIN0100 EQU   *
         LA    R8,C_DOPEV
         XC    CXTWA,CXTWA
         MVC   SUBCNT,=F'3'
         MVC   CXSUB1,=F'1'
         MVC   CXSUB2,=F'1'
         MVC   CXSUB3,=F'1'
         AS2AINDX MF=E        INDEX=8
         MVI   MSGTXT,C' '
         MVC   MSGTXT+1(L'MSGTXT-1),MSGTXT
         MVC   MSG_A,TXT_A
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_B(4),ZD01+L'ZD01-4
         LA    R2,TOFFY(R1)
         MVC   MSG_C(7),0(R2)
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   CXSUB1,=F'2'
         MVC   CXSUB2,=F'2'
         MVC   CXSUB3,=F'2'
         AS2AINDX MF=E        INDEX=75
         MVI   MSGTXT,C' '
         MVC   MSGTXT+1(L'MSGTXT-1),MSGTXT
         MVC   MSG_A,TXT_B
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_B(4),ZD01+L'ZD01-4
         LA    R2,TOFFY(R1)
         MVC   MSG_C(7),0(R2)
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   CXSUB1,=F'3'
         MVC   CXSUB2,=F'1'
         MVC   CXSUB3,=F'1'
         AS2AINDX MF=E        INDEX=90
         MVI   MSGTXT,C' '
         MVC   MSGTXT+1(L'MSGTXT-1),MSGTXT
         MVC   MSG_A,TXT_C
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_B(4),ZD01+L'ZD01-4
         LA    R2,TOFFY(R1)
         MVC   MSG_C(7),0(R2)
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   SUBCNT,=F'2'
         MVC   CXSUB1,=F'2'
         MVC   CXSUB2,=F'1'
         AS2AINDX MF=E        INDEX=44
         MVI   MSGTXT,C' '
         MVC   MSGTXT+1(L'MSGTXT-1),MSGTXT
         MVC   MSG_A,TXT_D
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_B(4),ZD01+L'ZD01-4
         LA    R2,TOFFY(R1)
         MVC   MSG_C(5),0(R2)
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   SUBCNT,=F'1'
         MVC   CXSUB1,=F'3'
         AS2AINDX MF=E        INDEX=82
         MVI   MSGTXT,C' '
         MVC   MSGTXT+1(L'MSGTXT-1),MSGTXT
         MVC   MSG_A,TXT_E
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_B(4),ZD01+L'ZD01-4
         LA    R2,TOFFY(R1)
         MVC   MSG_C(3),0(R2)
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         AS2DOPEV ,                                                    +
               DIM=F3,                                                 +
               LEVEL=(F3,F2,F2),                                       +
               LENGTH=(F3,F5,F7),                                      +
               LBNDS=(F1,F1,F1),                                       +
               PREFIX=(Z_),                                            +
               MF=G
         JNZ   JUNK1
         SPACE 1
         AS2DOPEV MF=E        INDEX=(41,19,7)
         MVI   MSGTXT,C' '
         MVC   MSGTXT+1(L'MSGTXT-1),MSGTXT
         MVC   MSG_A,TXT_F
         L     R1,Z_DVINDX
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_B(4),ZD01+L'ZD01-4
         L     R1,Z_DVINDX+4
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_C(4),ZD01+L'ZD01-4
         L     R1,Z_DVINDX+8
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   MSG_D(4),ZD01+L'ZD01-4
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
***      AS2PLIST (DMPTITLE,DMPOPT,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEE3DMP
***      L     RF,=V(CEE3DMP)
***      BASR  RE,RF     LINK TO
         SPACE 1
MAIN0200 EQU   *
         MVC   VLEN,H22
         MVI   VTXT,C' '
         MVC   VTXT+1(L'VTXT-1),VTXT
         MVC   VTXT,=CL22'&CSECT - END OF STEP'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
**       AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 1
EXIT0090 EQU   *
         AS2PLIST (RTNCD,0),VL,MF=(E,PLIST)
*        CALL CEE3SRC
         L     RF,=V(CEE3SRC)
         BASR  RE,RF     LINK TO
         SPACE 1
         L     R0,RSNCD
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15),                                                +
               MF=(E,PLIST)
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         USING DOPE,R8
         AS2AINDX ,                                                    +
               COUNT=SUBCNT,                                           +
               INDEX=XPTR,                                             +
               MF=C
         JNZ   JUNK2
         BR    RE        return to caller
         DROP  R8
         SPACE 1
         AS2DOPEV ,                                                    +
               PREFIX=(Z_),                                            +
               MF=C
         JNZ   JUNK3
         BR    RE        return to caller
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
JUNK1    EQU   *
         DC    H'01'
JUNK2    EQU   *
         DC    H'02'
JUNK3    EQU   *
         DC    H'03'
         SPACE 2
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RC,RD
         DROP  RA
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F7       DC    F'7'
H22      DC    H'22'
H83      DC    H'83'
         SPACE 1
ARRAY1   AS2DOPEV ,                                                    +
               DIM=4,                                                  +
               LEVEL=(5,4,3,2),                                        +
               LENGTH=(1,2,3,4),                                       +
               LBNDS=(1,1,1,1),                                        +
               PREFIX=(A_,),                                           +
               MF=STATIC
         SPACE 1
ARRAY2   AS2DOPEV ,                                                    +
               DIM=4,                                                  +
               LEVEL=(4,2,3,2),                                        +
               LENGTH=(3,2,3,4),                                       +
               LBNDS=(1,1,1,1),                                        +
               PREFIX=(B_,),                                           +
               MF=STATIC
         SPACE 1
ARRAY3   AS2DOPEV ,                                                    +
               DIM=3,                                                  +
               LEVEL=(3,2,2),                                          +
               LENGTH=(3,5,7),                                         +
               LBNDS=(1,1,1),                                          +
               PREFIX=(C_,),                                           +
               MF=STATIC
         SPACE 2
TOFFY    DS    0D                 NNN
LVL1     DC    C'AAA'         .     0
LVL11    DC    C'11111'       ..    3
LVL111   DC    C'$ABCDEF'     ...   8
LVL112   DC    C'$GHIJKL'     ...  15
LVL12    DC    C'22222'       ..   22
LVL121   DC    C'$MNOPQR'     ...  27
LVL122   DC    C'$STUVWX'     ...  34
LVL2     DC    C'BBB'         .    41
LVL21    DC    C'33333'       ..   44
LVL211   DC    C'#ZYXWVU'     ...  49
LVL212   DC    C'#TSRQPO'     ...  56
LVL22    DC    C'44444'       ..   63
LVL221   DC    C'#NMLKJI'     ...  68
LVL222   DC    C'#HGFEDC'     ...  75
LVL3     DC    C'CCC'         .    82
LVL31    DC    C'55555'       ..   85
LVL311   DC    C'*abcdef'     ...  90
LVL312   DC    C'*ghijkl'     ...  97
LVL32    DC    C'66666'       ..  104
LVL321   DC    C'*mnopqr'     ... 109
LVL322   DC    C'*stuvwx'     ... 116
         SPACE 1
ARRAY4   AS2DOPEV ,                                                    +
               DIM=3,                                                  +
               LEVEL=(3,3,3),                                          +
               LENGTH=(0,0,8),                                         +
               LBNDS=(0,0,0),                                          +
               PREFIX=(D_,),                                           +
               MF=STATIC
         SPACE 2
TXT_A    DC  CL53'&CSECT - LOOKING FOR ARRAY ENTRY(1,1,1) OFFSET(008)'
TXT_B    DC  CL53'&CSECT - LOOKING FOR ARRAY ENTRY(2,2,2) OFFSET(075)'
TXT_C    DC  CL53'&CSECT - LOOKING FOR ARRAY ENTRY(3,1,1) OFFSET(090)'
TXT_D    DC  CL53'&CSECT - LOOKING FOR ARRAY ENTRY(2,1  ) OFFSET(044)'
TXT_E    DC  CL53'&CSECT - LOOKING FOR ARRAY ENTRY(3    ) OFFSET(082)'
TXT_F    DC  CL53'&CSECT - DOPE VECTOR INDEX=(41,19,7)'
         SPACE 2
DMPTITLE DC  CL80'&CSECT - LE STORAGE DUMP VIA CEE3DMP'
DMPOPT   DC  CL255'NOTRACE NOFILE VAR STOR SF(ALL) NOCOND GENO'
         SPACE 2
         LTORG
         DROP  R9
         END
./ ADD NAME=ASTMISCB 0104-19163-19165-1209-00331-00439-00000-APLKS   02
*PROCESS RENT
         TITLE 'ASTMISCB - TEST MISC STUFF'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* TEST MISC STUFF
*
* PURPOSE: TEST MISC STUFF
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTMISCB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
R6       EQU   6              WORK REG
R7       EQU   7              WORK REG
R8       EQU   8              WORK REG
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC)
         ORG   VTXT
MSGTXT   EQU   *,120,C'C'
         DS    CL11           program name
MSG_A    DS    CL8            macro name
         DS    CL2
         DS    CL9            .origin:
MSG_B    DS    CL40           data
         DS    CL2
         DS    CL9            .origin:
MSG_C    DS    CL39           data
         ORG
         SPACE 1
         AS1MUTSA UDS=(RESA,LEWORK)
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
OUT1     EQU   *,1,C'C'
OUT2     EQU   *,2,C'C'
OUT4     EQU   *,4,C'C'
OUT8     EQU   *,8,C'C'
OUT16    EQU   *,16,C'C'
OUTPUT   DS    CL32
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
SUBPLIST DS    A
         SPACE 1
**       AS1MUTSA UDS=LTRACE
         SPACE 1
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPPA,                                               +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO IF CALLED BY NON-LE          +
               MAIN=YES,                                               +
               ENCLAVE=NO,                                             +
               BASE=(10)
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         SAVE ORIGINAL R1 VALUE
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME MAIN=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPPA     CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=00,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
         MVC   LEMDEST,F2
         MVC   VLEN,H120
         SPACE 1
**       AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 2
MAIN0100 EQU   *
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2BI2ZO'
         MVC   MSG_B(L'INP1),INP1
         IC    R1,INP1
         AS2BI2ZO R1,TARGET=OUT8,MF=C
         MVC   MSG_C(L'OUT8),OUT8
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2ZO2BI'
         MVC   MSG_B(L'OUT8),OUT8
         AS2ZO2BI R2,SOURCE=OUT8,MF=C
         STC   R2,OUT1
         MVC   MSG_C(L'OUT1),OUT1
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2BI2HX'
         MVC   MSG_B(L'INP1),INP1
         AS2BI2HX OUT2,INP1,1
         MVC   MSG_C+1(L'OUT2),OUT2
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2BI2HX'
         MVC   MSG_B(L'INP2),INP2
         AS2BI2HX OUT4,INP2,L'INP2
         MVC   MSG_C+1(L'OUT4),OUT4
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2BI2HX'
         MVC   MSG_B(L'INPHEX),INPHEX
         AS2BI2HX OUT8,INPHEX,L'INPHEX
         MVC   MSG_C+1(L'OUT8),OUT8
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2HX2BI'
         MVC   MSG_B+1(L'INPDHEX),INPDHEX
         AS2HX2BI OUT4,INPDHEX,L'INPDHEX
         MVC   MSG_C(L'OUT4),OUT4
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2CH2HH'
         MVC   MSG_B(L'INPUT),INPUT
         LA    R2,OUTPUT      target hex 32
         LA    R3,L'INPUT     source len 16
         LA    R4,INPUT       source chr
         AS2CH2HH R2,R4,MF=C
         MVC   MSG_C+1(L'OUTPUT),OUTPUT
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   MSGTXT,TXT_A
         MVC   MSG_A,=CL8'AS2HH2CH'
         MVC   MSG_B+1(L'OUTPUT),OUTPUT
         LA    R2,OUT16       target chr
         LA    R3,L'OUTPUT    source len 32
         LA    R4,OUTPUT      source hex
         AS2HH2CH R2,R4,MF=C
         MVC   MSG_C(L'OUT16),OUT16
         SPACE 1
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
MAIN0200 EQU   *
         MVC   VLEN,H22
         MVI   VTXT,C' '
         MVC   VTXT+1(L'VTXT-1),VTXT
         MVC   VTXT,=CL22'&CSECT - END OF STEP'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
**       AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 1
EXIT0090 EQU   *
         AS2PLIST (RTNCD,0),VL,MF=(E,PLIST)
*        CALL CEE3SRC
         L     RF,=V(CEE3SRC)
         BASR  RE,RF     LINK TO
         SPACE 1
         L     R0,RSNCD
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15),                                                +
               MF=(E,PLIST)
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         BR    RE        return to caller
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RC,RD
         DROP  RA
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
F2       DC    F'2'
H22      DC    H'22'
H120     DC    H'120'
         SPACE 1
INP1     EQU   *,1,C'C'
INP2     EQU   *,2,C'C'
INP4     EQU   *,4,C'C'
INPUT    DC    C'ABCDEFGH12345678'
INPHEX   DC    X'C1D1E2F0'
INPDHEX  DC    C'C1D1E2F0'
         SPACE 2
TXT_A    DC  CL120'&CSECT - xxxxxxxx  ..INPUT: xxxxxxxxxxxxxxxxxxxxxxxx+
               xxxxxxxxxxxxxxxx  .OUTPUT: xxxxxxxxxxxxxxxxxxxxxxxxxxxxx+
               xxxxxxxxxx'
         SPACE 2
         AS2ZO2BI MF=STATIC
         SPACE 2
         LTORG
         SPACE 2
         AS2HX2BI MF=STATIC
         AS2CH2HH MF=STATIC
         AS2HH2CH MF=STATIC
         SPACE 2
         DROP  R9
         END
./ ADD NAME=ASTNTSPD 0107-15047-18295-1349-00040-00032-00000-APLKS   01
*PROCESS RENT
         TITLE 'ASTNTSPD - SIGNED PACK DECIMAL NUMERIC TEST TABLE'
*        *---------------------------------------------------*
*        * TABLE ID: ASTNTSPD                                *
*        *     DESC: SIGNED PD TRANSLATE AND TEST TABLE      *
*        *  USED BY: MACRO(AS2NTEST)                         *
*        *---------------------------------------------------*
         EJECT
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTNTSPD'
         PRINT ON,GEN
*        PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
&CSECT   CSECT
&CSECT   AMODE 31
&CSECT   RMODE ANY
         ENTRY &CSECT
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F   OFFSET
         DC    XL16'00000000000000000000010180800180'   00-0F
         DC    XL16'00000000000000000000010180800180'   10-1F
         DC    XL16'00000000000000000000010180800180'   20-2F
         DC    XL16'00000000000000000000010180800180'   30-3F
         DC    XL16'00000000000000000000010180800180'   40-4F
         DC    XL16'00000000000000000000010180800180'   50-5F
         DC    XL16'00000000000000000000010180800180'   60-6F
         DC    XL16'00000000000000000000010180800180'   70-7F
         DC    XL16'00000000000000000000010180800180'   80-8F
         DC    XL16'00000000000000000000010180800180'   90-9F
         DC    XL16'01010101010101010101010101010101'   A0-AF
         DC    XL16'01010101010101010101010101010101'   B0-BF
         DC    XL16'01010101010101010101010101010101'   C0-CF
         DC    XL16'01010101010101010101010101010101'   D0-DF
         DC    XL16'01010101010101010101010101010101'   E0-EF
         DC    XL16'01010101010101010101010101010101'   F0-FF
         DS    0D
         DC    C'&CORPNME NONX=&CSECT - &SYSDATC &SYSTIME'
         DC    C' SIGNED PD NUMERIC TEST TABLE '
         DS    0D
         END
./ ADD NAME=ASTNTSZD 0108-15047-18295-1350-00040-00032-00000-APLKS   49
*PROCESS RENT
         TITLE 'ASTNTSZD - SIGNED ZONE DECIMAL NUMERIC TEST TABLE'
*        *---------------------------------------------------*
*        * TABLE ID: ASTNTSZD                                *
*        *     DESC: SIGNED ZD TRANSLATE AND TEST TABLE      *
*        *  USED BY: MACRO(AS2NTEST)                         *
*        *---------------------------------------------------*
         EJECT
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTNTSZD'
         PRINT ON,GEN
*        PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
&CSECT   CSECT
&CSECT   AMODE 31
&CSECT   RMODE ANY
         ENTRY &CSECT
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F   OFFSET
         DC    XL16'01010101010101010101010101010101'   00-0F
         DC    XL16'01010101010101010101010101010101'   10-1F
         DC    XL16'01010101010101010101010101010101'   20-2F
         DC    XL16'01010101010101010101010101010101'   30-3F
         DC    XL16'01010101010101010101010101010101'   40-4F
         DC    XL16'01010101010101010101010101010101'   50-5F
         DC    XL16'01010101010101010101010101010101'   60-6F
         DC    XL16'01010101010101010101010101010101'   70-7F
         DC    XL16'01010101010101010101010101010101'   80-8F
         DC    XL16'01010101010101010101010101010101'   90-9F
         DC    XL16'01010101010101010101010101010101'   A0-AF
         DC    XL16'01010101010101010101010101010101'   B0-BF
         DC    XL16'80808080808080808080010101010101'   C0-CF
         DC    XL16'80808080808080808080010101010101'   D0-DF
         DC    XL16'01010101010101010101010101010101'   E0-EF
         DC    XL16'00000000000000000000010101010101'   F0-FF
         DS    0D
         DC    C'&CORPNME NONX=&CSECT - &SYSDATC &SYSTIME'
         DC    C' SIGNED ZD NUMERIC TEST TABLE '
         DS    0D
         END
./ ADD NAME=ASTNTUCH 0108-15047-19284-1541-00040-00029-00000-APLKS   28
*PROCESS RENT
         TITLE 'ASTNTUCH - UNSIGNED CHAR NUMERIC TEST TABLE'
*        *---------------------------------------------------*
*        * TABLE ID: ASTNTUCH                                *
*        *     DESC: UNSIGNED CH TRANSLATE AND TEST TABLE    *
*        *  USED BY: MACRO(AS2NTEST)                         *
*        *---------------------------------------------------*
         EJECT
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTNTUCH'
         PRINT ON,GEN
*        PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
&CSECT   CSECT
&CSECT   AMODE 31
&CSECT   RMODE ANY
         ENTRY &CSECT
*                    0 1 2 3 4 5 6 7 8 9 A B C D E F   OFFSET
         DC    XL16'01010101010101010101010101010101'   00-0F
         DC    XL16'01010101010101010101010101010101'   10-1F
         DC    XL16'01010101010101010101010101010101'   20-2F
         DC    XL16'01010101010101010101010101010101'   30-3F
         DC    XL16'01010101010101010101010101010101'   40-4F
         DC    XL16'01010101010101010101010101010101'   50-5F
         DC    XL16'01010101010101010101010101010101'   60-6F
         DC    XL16'01010101010101010101010101010101'   70-7F
         DC    XL16'01010101010101010101010101010101'   80-8F
         DC    XL16'01010101010101010101010101010101'   90-9F
         DC    XL16'01010101010101010101010101010101'   A0-AF
         DC    XL16'01010101010101010101010101010101'   B0-BF
         DC    XL16'01010101010101010101010101010101'   C0-CF
         DC    XL16'01010101010101010101010101010101'   D0-DF
         DC    XL16'01010101010101010101010101010101'   E0-EF
         DC    XL16'00000000000000000000010101010101'   F0-FF
         DS    0D
         DC    C'&CORPNME NONX=&CSECT - &SYSDATC &SYSTIME'
         DC    C' UNSIGNED CH NUMERIC TEST TABLE '
         DS    0D
         END
./ ADD NAME=ASTQFA1B 0133-17268-19316-1055-01388-02108-00000-APLKS   56
*PROCESS RENT
         TITLE 'AS UTILITY TEST QUERY FILE ATTRIBUTES'
*************************************************************
* ARCHITECTURE SERVICES UTILITY COMMON
* TEST Query File Attributes
*
*    Name: ASTQFA1B
*
* Purpose: Open input file AM=QSAM|PO|VSAM, call ASU3QFAB
*          to extract input file information and print.
*
*************************************************************
         SPACE 1
         LCLA  &DSNCNT
&DSNCNT  SETA  8              maximum nbr of DSN concatenations
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTQFA1B'
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         PRINT ON,GEN
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              work register
R1       EQU   1              work register, address of parm list
*                             R1:R3 loop control
R2       EQU   2              work register
R3       EQU   3              work register
R4       EQU   4              not used
R5       EQU   5              not used
R6       EQU   6              not used
R7       EQU   7              address of input IDCB | IRPL
R8       EQU   8              BAR ASCA,ASAB,ASABX
R9       EQU   9              BAR static storage
RA       EQU   10             BAR 1 program
RB       EQU   11             reserved for BAR 2 program
RC       EQU   12             BAR LE CAA
RD       EQU   13             BAR 1 RSA/DSA
RE       EQU   14             return address
RF       EQU   15             branch and link address
         SPACE 1
         COPY  AS3DSEQU       EQUATES FOR DSD & DSINFO
         SPACE 1
ACBLNG   EQU   76             LENGTH OF ACB
         SPACE 1
RPLLNG   EQU   76             LENGTH OF RPL
         SPACE 1
DCBDCBE  EQU   0,4,C'A'       OFFSET OF DCBE ADDR IN DCB
DCBBUFNO EQU   20,1,C'X'      OFFSET OF BUFNO IN DCB
DCBDSRG1 EQU   26,1,C'X'      OFFSET OF DSORG
*                             ..x'40' DSORG=PS
*                             ..x'02' DSORG=PO
*                             ..x'08' VSAM
DCBRECFM EQU   36,1,C'X'      OFFSET OF RECFM
DCBRECU  EQU   X'C0'          ..RECFM=U
DCBRECF  EQU   X'80'          ..RECFM=F
DCBRECV  EQU   X'40'          ..RECFM=V
DCBRECBR EQU   X'10'          ..RECFM=.B
DCBRECSB EQU   X'08'          ..RECFM=.S
DCBDDNAM EQU   40,8,C'C'      OFFSET OF DDNAME IN DCB
DCBMACR  EQU   50,2,C'X'      OFFSET OF MACRF BYTE(S)
DCBMACR1 EQU   50,1,C'X'      OFFSET OF MACRF 1ST BYTE
DCBMRGET EQU   X'40'          ..GET QSAM,TCAM
DCBMRMVG EQU   X'10'          ..GET MOVE MODE QSAM,QISAM
DCBMRLCG EQU   X'08'          ..GET LOCATE MODE QSAM
DCBMRSBG EQU   X'04'          ..GET SUBSTITUTE MODE QSAM
DCBMRDMG EQU   X'01'          ..GET DATA MODE QSAM
DCBMACR2 EQU   51,1,C'X'      OFFSET OF MACRF 2ND BYTE
DCBMRPUT EQU   X'40'          ..PUT QSAM
DCBMRMVP EQU   X'10'          ..PUT MOVE MODE QSAM
DCBMRLCP EQU   X'08'          ..PUT LOCATE MODE QSAM
DCBMRTMD EQU   X'04'          ..PUT SUBSTITUTE MODE QSAM
DCBMRDMD EQU   X'01'          ..PUT DATA MODE QSAM
DCBBLKSI EQU   62,2,C'H'      OFFSET OF BLKSIZE
DCBIOBA  EQU   68,4,C'A'      OFFSET OF I/O BUFFER ADDR
*                             ..-4 to extract 4-byte length LBI
DCBLRECL EQU   82,2,C'H'      OFFSET OF LRECL IF RECFM=F|V
*                             OFFSET OF BLKSIZE IF RECFM=U
DCBPRECL EQU   90,2,C'H'      OFFSET OF MAX PHY REC LEN
DCBLNGBS EQU   88             LENGTH OF BSAM DCB
DCBLNGPO EQU   88             LENGTH OF BPAM DCB
DCBLNGQS EQU   96             LENGTH OF QSAM DCB
DCBLNGPS EQU   96             LENGTH OF QSAM/BSAM DCB
         SPACE 1
DCBELEN  EQU   4,2,C'H'       OFFSET OF DCBE LENGTH
DCBEDCB  EQU   8,4,C'A'       OFFSET OF DCB ADDR IN DCBE
*                             ..0 if closed
DCBEFLG1 EQU   16,1,C'X'      OFFSET OF DCBE FLAG1
DCBEOPEN EQU   X'80'          ..DCBE OPEN
DCBESLBI EQU   X'20'          ..SUPPORT LBI
DCBEFLG2 EQU   17,1,C'X'      OFFSET OF DCBE FLAG2
DCBEBU31 EQU   X'80'          ..RMODE31=BUFF
DCBEGSIZ EQU   X'08'          ..GETSIZE=YES
*                             ....calculate size of DS (RBN)
*                             ....store in DCBESIZE & DCBEXSIZ
DCBEULBI EQU   X'04'          ..request LBI
*                             ....DCBEBLKSI is valid, might be 0
DCBEFLG3 EQU   20,1,C'X'      OFFSET OF DCBE FLAG3
DCBELARGE EQU   X'80'         ..appl pgm supports LBI
DCBEBLKSI EQU   28,4,C'F'     OFFSET OF BLKSIZE IF LBI
DCBEXSIZ EQU   32,8,C'X'      OFFSET OF BLOCK COUNT
DCBEEODA EQU   40,4,C'A'      OFFSET OF END-OF-DATA ADDR
DCBESYNA EQU   44,4,C'A'      OFFSET OF SYNAD ADDR
DCBEMINL EQU   56             LENGTH OF MINIMUM DCBE
         SPACE 1
JFCBLGTH EQU   176            LENGTH OF JFCB
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         POP   PRINT
         EJECT
         CEEDSA
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CLRBEG   EQU   *
SUBPARM0 DS    A              addr of ASCA ptr
         ORG   SUBPARM0
ASCAptr  DS    A              address of AS ASCA
ASABptr  DS    A              address of AS ASAB
ASABXptr DS    A              address of AS ASAB1
@PLEFDBK DS    A              addr of pgm LE feedback
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
VACBRC   DS    F              VSAM ACB return code R15
VRPLRC   DS    F              VSAM RPL return code R15
RTNCD    DS    F              return code R15
RSNCD    DS    F              error  code R0
         SPACE 1
@3I01B   DS    A              address of ASU3I01B
@3QFAB   DS    A              address of ASU3QFAB
@MDHEX   DS    A              address of ASUMDHEX
         SPACE 1
         DS    0D
CBWAREA  DS    XL128          GENCB/MODCB/SHOWCB work area
         SPACE 1
         DS    0D
         AS1LAIDA UDS=PARMLIST,PARM=3,PREFIX=HEX_
         SPACE 1
         DS    0D
         COPY  AS3DMPRB
         SPACE 1
         DS    0D
         AS1MDSDS FDS=DSD,PREFIX=SYSUT1_     data set definition
         SPACE 1
DSI      AS1MDSDS FDS=DSINFO,PARM=&DSNCNT    data set information
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         DS    0D
         AS1MUTSA UDS=LTRACE
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,MF=D    expand AS communication area
ASABHDR  AS1MASDS ADS=ASAB,MF=D    expand AS anchor block
ASABXHDR AS1MASDS ADS=ASAB1,MF=D   expand AS anchor block extention
         SPACE 2
         IFGACB AM=VSAM
#ACBLEN  EQU   *-IFGACB       length of ACB
         SPACE 2
         IFGRPL AM=VSAM
#RPLLEN  EQU   *-IFGRPL       length of RPL
         SPACE 2
         IFGEXLST
*              EXLEODL  EQU   10   EODAD   exit addr parm length
*              EXLSYNL  EQU   15   SYNAD   exit addr parm length
*              EXLLERL  EQU   20   LERAD   exit addr parm length
*              EXLUPADL EQU   25   UPAD    exit addr parm length
*              EXLIOPL  EQU   30   IOPID   exit addr parm length
*              EXLJRNL  EQU   35   JRNAD   exit addr parm length
*              EXLOPNL  EQU   40   OPENAD  exit addr parm length
*              EXLRLWL  EQU   40   RLSWAIT exit addr parm length
*              EXLQSCL  EQU   45   QUIESCE exit addr parm length
*              EXRSRVL  EQU   48   end of list (word bndry)
         SPACE 2
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   0=ESA 1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
&CSECT   CEEENTRY ,                                                    +
               PPA=PPPA,                                               +
               AUTO=#DSALEN,                                           +
               MAIN=YES,                                               +
               EXECOPS=YES,                                            +
               BASE=(10),                                              +
               PLIST=HOST
         USING CEEDSA,RD      EST BAR OF DSA
         USING CEECAA,RC      EST BAR OF CAA
         LARL  R9,STATIC
         USING STATIC,R9      EST BAR OF STATIC STORAGE
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME MAIN=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPPA     CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=01,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         SPACE 2
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *         initialize DSA storage
         LA    R0,CLRBEG
         LAY   R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear DSA storage
INIT0100 EQU   *
         MVC   LEMDEST,F2
         SPACE 1
*        initialize the SYSUT1 data set definition control block
         LA    R0,SYSUT1_#LEN
         STH   R0,SYSUT1_DSLEN
         LA    R0,SYSUT1_$DSD
         STH   R0,SYSUT1_DSID
         XC    SYSUT1_FWDPTR,SYSUT1_FWDPTR   zero fwd chain
         MVC   SYSUT1_DDNAME,=CL8'SYSUT1'    set DDNAME to SYSUT1
         SPACE 1
*        initialize the data set information control block
         MVC   DSI_DSLEN,=Y(DSI_NTRY_LEN*&DSNCNT+16)
         LA    R0,DSI_$DSI
         STH   R0,DSI_DSID
         XC    DSI_FWDPTR,DSI_FWDPTR
         SPACE 1
INIT0200 EQU   *         load AS Query File Attributes
*        load the required sub-program(s)
         CEELOAD ,                                                     +
               NAME=ASU3QFAB,                                          +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,@3QFAB           QUERY FILE ALLOC ATTR sub-pgm
         CLC   LECTOK,CEE000
         JE    INIT0210
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0210 EQU   *         load AS hex dump print
         CEELOAD ,                                                     +
               NAME=ASUMDHEX,                                          +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,@MDHEX           AS MESSAGE DUMP HEX sub-pgm
         CLC   LECTOK,CEE000
         JE    INIT0220
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0220 EQU   *         load AS control block creator
         XR    RF,RF
         CEEFETCH ,                                                    +
               NAME=ASU3I01B,                                          +
               TOKEN=FW32,                                             +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,@3I01B           AS ctl blk creator sub-pgm
         CLC   LECTOK,CEE000
         JE    INIT0224
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0224 EQU   *
*        allocate/initialize the AS control block(s)
         AS2PLIST (ASCAptr,0),                                         +
               VL,MF=(E,PLIST)
*        CALL ASU3I01B
         L     RF,@3I01B
         BASR  RE,RF     link to
         SPACE 1
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         L     R8,ASCA_@ASAB
         DROP  R8
         ST    R8,ASABptr     save addr of ASAB
         USING ASABHDR,R8
         L     R8,ASAB_@ASABX
         USING ASABXHDR,R8
         ST    R8,ASABXptr    save addr of ASABX
         SPACE 1
         CEERELES ,                                                    +
               TOKEN=FW32,                                             +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         CLC   LECTOK,CEE000
         JE    INIT0230
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0230 EQU   *
         SPACE 1
INIT9900 EQU   *
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* MAIN ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 AS2LTRCE
         MVC   LECTOK,CEE000
         SPACE 1
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: before OPEN of input'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
MAIN0090 EQU   *
         SPACE 1
MAIN0100 AS2LTRCE
         BRAS  RE,SUBR1000    collect before OPEN
         BRAS  RE,SUBR2000    print before OPEN
         BRAS  RE,SUBR3000    dump ctl blks before OPEN
         SPACE 1
*        intialize values of the DSD for input file
         LARL  RE,EXIT0000    set default return addr
         CLI   DSI_DEV_DCLASS,C' ' Q. blank
         JE    TXT0108C            A. yes,
         CLC   DSI_DEV_DCLASS,=CL8'DASD'     Q. DASD
         JNE   MAIN0102                      A. no, bypass
         CLI   DSI_DSCB_AM,X'00'   Q. filled out
         JE    MAIN0102            A. no, bypass
         MVC   SYSUT1_AM,DSI_DSCB_AM    A. yes, set DSORG=
         J     MAIN0120
MAIN0102 EQU   *
         CLI   DSI_JFCB_AM,X'00'   Q. filled out
         JE    MAIN0180            A. no, bypass
         MVC   SYSUT1_AM,DSI_JFCB_AM    A. yes, set DSORG=
MAIN0120 EQU   *
         TM    SYSUT1_AM,$PS  Q. access method QSAM
         JNO   MAIN0130       A. no, bypass
*                             A. yes, QSAM
         MVC   SYSUT1_MAXLEN,DSI_DSCB_LRECL  set LRECL=
         MVC   SYSUT1_BLKSZ,DSI_DSCB_BLKSZ   set BLKSIZE=
         BRAS  RE,OPEN0100    open input DCB
         J     MAIN0190
         SPACE 1
MAIN0130 EQU   *
         TM    SYSUT1_AM,$PO  Q. access method LIB
         JNO   MAIN0140       A. no, bypass
*                             A. yes, QSAM
         MVC   SYSUT1_MAXLEN,DSI_DSCB_LRECL  set LRECL=
         MVC   SYSUT1_BLKSZ,DSI_DSCB_BLKSZ   set BLKSIZE=
         BRAS  RE,OPEN0100    open input DCB
         J     MAIN0190
         SPACE 1
MAIN0140 AS2LTRCE
         TM    SYSUT1_AM,$VSAM     Q. access method VSAM
         JNO   MAIN0180            A. no, bypass
*                                  A. yes, VSAM
         BRAS  RE,OPEN0200    open input ACB
         J     MAIN0190
         SPACE 1
MAIN0180 AS2LTRCE ,      AM=unknown
         LARL  RE,EXIT0000    set default return addr
         J     TXT0108A
         SPACE 1
MAIN0190 EQU   *
         SPACE 1
MAIN0300 AS2LTRCE
         BRAS  RE,SUBR3000    dump ctl blks after OPEN
         SPACE 2
MAIN9900 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* EXIT ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 AS2LTRCE
*        close file(s)
         OI    SYSUT1_IND2,SYSUT1_$FEOF set EOF
         TM    DSI_DCB_AM,$VSAM    Q. access method VSAM
         JO    EXIT0020            A. yes, bypass
         BRAS  RE,CLOS0100    close QSAM or PO file
         J     EXIT0040
         SPACE 1
EXIT0020 EQU   *
         TM    DSI_DCB_AM,$VSAM    Q. access method VSAM
         JNO   EXIT0040            A. no, bypass
         BRAS  RE,CLOS0200         close VSAM file
*        J     EXIT0040
         SPACE 1
EXIT0040 EQU   *
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         CLC   ASAB1_#BTLH,F0      Q. any heap storage
         JE    EXIT0042            A. no, bypass
*        discard below the line heap storage
         AS2PLIST (ASAB1_#BTLH,0),                                     +
               VL,MF=(E,PLIST)
*        CALL CEEDSHP         discard heap storage
         L     RF,=V(CEEDSHP)
         BASR  RE,RF     link to
         SPACE 1
EXIT0042 EQU   *
         CLC   ASAB1_#ATLH,F0      Q. any heap storage
         JZ    EXIT0049            A. no, bypass
*        discard above the line heap storage
         AS2PLIST (ASAB1_#ATLH,0),                                     +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEDSHP         discard heap storage
         L     RF,=V(CEEDSHP)
         BASR  RE,RF     link to
         SPACE 1
EXIT0049 EQU   *
         SPACE 1
EXIT9800 EQU   *
         SPACE 1
EXIT9900 EQU   *
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15),                                                +
               MF=(E,PLIST)
         SPACE 2
* --------------------------------------------------------- *
* CALLABLE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
OPEN0100 AS2LTRCE ,      open input DCB
         AS2RESTK PUSH
*        get below heap storage
         LA    R0,DCBLNGPS
         ST    R0,SYSUT1_DCBLEN    set length of DCB
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#BTLH,SYSUT1_DCBLEN,SYSUT1_@DCB,0),           +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R1,SYSUT1_@DCB
         MVC   0(DCBLNGPS,R1),MODEL_DCB copy IDCB to HEAP
         XC    DCBMACR(,R1),DCBMACR     clear MACRF=
*        intialize values of the DCB for input file
         MVC   DCBDDNAM(,R1),DSI_DDN    set DDNAME
         CLC   DSI_DEV_DCLASS,=CL8'DASD'     Q. DASD
         JNE   OPEN0110                      A. no, bypass
         MVC   DCBDSRG1(,R1),DSI_DSCB_AM     set DSORG=...
         TM    DSI_DSCB_AM,$PO          Q. AM=PO
         JNO   OPEN0101                 A. no, bypass
         OI    DCBDSRG1(R1),X'02'       A. yes, correct it for DCB
OPEN0101 EQU   *
         TM    DSI_DSCB_RECFM,$FIX      Q. RECFM=F|U
         JNO   OPEN0102                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECF     A. yes,
OPEN0102 EQU   *
         TM    DSI_DSCB_RECFM,$VAR      Q. RECFM=V|U
         JNO   OPEN0104                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECV     A. yes,
OPEN0104 EQU   *
         TM    DSI_DSCB_RECFM,$BLK      Q. RECFM=.B
         JNO   OPEN0106                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECBR    A. yes,
OPEN0106 EQU   *
         TM    DSI_DSCB_RECFM,$SPN      Q. RECFM=.S
         JNO   OPEN0108                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECSB    Q. yes,
OPEN0108 EQU   *
         MVC   DCBLRECL(,R1),DSI_DSCB_LRECL+2     set LRECL=...
         MVC   DCBBLKSI(,R1),DSI_DSCB_BLKSZ+2     set BLKSIZE=...
         OI    DCBMACR1(R1),DCBMRGET+DCBMRLCG     set GET/LOCATE
         J     OPEN0120
         SPACE 1
OPEN0110 EQU   *
         MVC   DCBDSRG1(,R1),DSI_JFCB_AM     set DSORG=...
         TM    DSI_JFCB_AM,$PO          Q. AM=PO
         JNO   OPEN0111                 A. no, bypass
         OI    DCBDSRG1(R1),X'02'       A. yes, correct it for DCB
OPEN0111 EQU   *
         TM    DSI_JFCB_RECFM,$FIX      Q. RECFM=F|U
         JNO   OPEN0112                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECF     A. yes,
OPEN0112 EQU   *
         TM    DSI_JFCB_RECFM,$VAR      Q. RECFM=V|U
         JNO   OPEN0114                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECV     A. yes,
OPEN0114 EQU   *
         TM    DSI_JFCB_RECFM,$BLK      Q. RECFM=.B
         JNO   OPEN0116                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECBR    A. yes,
OPEN0116 EQU   *
         TM    DSI_JFCB_RECFM,$SPN      Q. RECFM=.S
         JNO   OPEN0118                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECSB    Q. yes,
OPEN0118 EQU   *
         MVC   DCBLRECL(,R1),DSI_DSCB_LRECL+2     set LRECL=...
         MVC   DCBBLKSI(,R1),DSI_DSCB_BLKSZ+2     set BLKSIZE=...
         OI    DCBMACR1(R1),DCBMRGET+DCBMRLCG     set GET/LOCATE
**       J     OPEN0120
         SPACE 1
OPEN0120 EQU   *
*        get default heap storage
         LA    R0,DCBEMINL
         ST    R0,SYSUT1_DCBELEN
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#USRH,SYSUT1_DCBELEN,SYSUT1_@DCBE,0),         +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R2,SYSUT1_@DCB
         L     R1,SYSUT1_@DCBE
         MVC   0(DCBEMINL,R1),MODEL_DCBE     copy IDCBE to HEAP
*        intialize values of the DCBE for input file
         ST    R1,DCBDCBE(,R2)     save @DCBE in DCB
         LA    R2,EXIT0000
         ST    R2,DCBEEODA(,R1)    save EOD in IDCBE
         SPACE 1
*        OPEN input DCB
         L     R7,SYSUT1_@DCB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         OPEN  ((7),(INPUT)),MODE=31,                                  +
               MF=(E,PLIST)
         ST    RF,RTNCD       save  OPEN return code R15
         C     RF,F8          Q. any error(s)
         JL    OPEN0130       A. no, bypass
         XC    RSNCD,RSNCD    clear OPEN error  code R0
         LARL  RE,EXIT0000    set default return addr
         J     TXT0107E       A. yes,
OPEN0130 EQU   *
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after OPEN of IDCB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         OI    SYSUT1_IND0,SYSUT1_$FOPEN     set open flag
         OI    SYSUT1_IND0,SYSUT1_$FREAD     set read intent
         OI    SYSUT1_IND0,SYSUT1_$FSEQ      set seq access
         BRAS  RE,SUBR1000    collect after open
         BRAS  RE,SUBR2000    print after open
         SPACE 1
*        intialize values of the DSD for input file
         MVC   SYSUT1_ORG,DSI_ICF_ORG   set organization
         MVC   SYSUT1_RECFM,DSI_DCB_RECFM    set RECFM=
         MVC   SYSUT1_MAXLEN,DSI_DCB_LRECL   set LRECL=
         MVC   SYSUT1_BLKSZ,DSI_DCB_BLKSZ    set BLKSIZE=
         MVC   SYSUT1_BUFNO,DSI_DCB_BUFND    set BUFND=
         SPACE 1
OPEN0190 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
OPEN0200 AS2LTRCE ,      open input ACB
         AS2RESTK PUSH
*        get default heap storage
         LA    R0,ACBLNG
         ST    R0,SYSUT1_ACBLEN    set ACB length
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#USRH,SYSUT1_ACBLEN,SYSUT1_@VACB,0),          +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R1,SYSUT1_@VACB
         USING IFGACB,R1
         MVC   0(ACBLNG,R1),MODEL_ACB   copy ACB to HEAP
         XC    ACBMACRF,ACBMACRF   clear MACRF=
         DROP  R1
         XC    RTNCD,RTNCD    clear MODCB return code R15
         XC    RSNCD,RSNCD    clear MODCB error  code R0
         L     R2,SYSUT1_@VACB
         MODCB ACB=(2),                                                +
               DDNAME=(*,DSI_DDN),                                     +
               MACRF=(SEQ,IN),                                         +
               RMODE31=ALL,                                            +
               MF=(G,CBWAREA)
*    MACRF=
*    [ADR][CNV][KEY]
*         ADR - RBA used as search arg for ESDS | KSDS ¬RLS
*         CNV - CI access, ¬RLS
*        +KEY - KSDS | RRDS by KEY or RBA
*    [CFX|NFX]
*         CFX - match with ICI, OPEN fixes cb & i/o bufs, RLS ign
*        +NFX - OPEN does not fix cb & i/o bufs, RLS assumes
*    [DDN|DSN]
*        +DDN - RLS ign
*         DSN - RLS ign
*    [DFR|NDF]
*         DFR - deferred write, RLS ign
*        +NDF - not deferred, RLS ign
*    [DIR][SEQ][SKP]
*         DIR - direct access to ESDS, KSDS, RRDS
*        +SEQ - seq access to ESDS, KSDS, RRDS
*         SKP - skip-seq access to KSDS(FWD), RRDS
*    [ICI|NCI]
*         ICI - improved CI processing, ¬SMS/EF, RLS ign
*        +NCI - no improved CI processing
*    [IN][OUT]
*        +IN  - retrieve ESDS, KSDS, RRDS, ¬empty
*         OUT - insert new ESDS, KSDS(¬ADR), RRDS
*             - update ESDS, KSDS, RRDS
*             - delete KSDS, RRDS
*    [LEW|NLW]
*        +LEW - match with LSR, wait for exclusive control
*         NLW - match with LSR, return to appl (RC & EC)
*    [NIS|SIS]
*        +NIS - normal insert strategy, CI, CA split at 1/2
*         SIS - seq insert strategy, CI, CA split at insert point
*    [NRM|AIX]
*        +NRM - object named in DDN
*         AIX - object is alt index of path specified by DDN, ¬RLS
*    [NRS|RST]
*        +NRS - data set not reusable
*         RST - data set reusable, HURBA reset to 0
*    [NSR|LSR|GSR|RLS]
*        +NSR - non-shared resource
*         LSR - local shared resource (ea AS), use BLSR instead
*         GSR - global shared resource
*         RLS - record level sharing, ¬LDS, ¬KSDS(ADR), ¬CNV, ¬AIX
*    [NUB|UBF]
*        +NUB - VSAM manages i/o bufs, RLS req
*         UBF - user buffer managed, valid for CNV & OPTCD=MVE,
*               assumed when ICI, ¬RLS
         SPACE 1
         ST    RF,RTNCD       save MODCB return code R15
         LTR   RF,RF          Q. any errors
         JZ    OPEN0210       A. no, bypass
         XC    RSNCD,RSNCD    clear reason code
         C     RF,F4
         JNE   OPEN0202
         ST    R0,RSNCD       save MODCB error  code R0
OPEN0202 EQU   *
         LARL  RE,EXIT0000    set default return addr
         J     TXT0107A       A. yes,
         SPACE 1
OPEN0210 EQU   *
*        OPEN the input ACB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         OPEN  ((2),(INPUT)),MODE=31,                                  +
               MF=(E,PLIST)
         ST    RF,VACBRC      save VSAM ACB return code R15
         LTR   RF,RF          Q. any error(s)
         JZ    OPEN0220       A. no, bypass
         SPACE 1
         XC    RTNCD,RTNCD    clear SHOWCB return code R15
         XC    RSNCD,RSNCD    clear SHOWCB error  code R0
         LA    R3,SYSUT1_VFDBK
         SHOWCB ACB=(2),                                               +
               AREA=(3),                                               +
               LENGTH=L'SYSUT1_VFDBK,                                  +
               FIELDS=(ERROR),                                         +
               MF=(G,CBWAREA)
         SPACE 1
         LTR   RF,RF          Q. any error(s)
         JZ    OPEN0212       A. no, bypass
         ST    RF,RTNCD       save SHOWCB return code R15
         ST    R0,RSNCD       save SHOWCB error  code R0
         LARL  RE,EXIT0000    set default return addr
         J     TXT0107C       A. yes,
OPEN0212 EQU   *
         MVC   RTNCD,VACBRC        save OPEN return code R15
         MVC   RSNCD,SYSUT1_VFDBK  save OPEN error  code R0
         LARL  RE,EXIT0000    set default return addr
         J     TXT0107D
         SPACE 1
OPEN0220 EQU   *
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after OPEN of IACB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         OI    SYSUT1_IND0,SYSUT1_$FOPEN     set open flag
         BRAS  RE,SUBR1000    collect after open
         BRAS  RE,SUBR2000    print after open
         SPACE 1
*        intialize values of the DSD for input file
         MVC   SYSUT1_ORG,DSI_ICF_ORG   set organization
         MVC   SYSUT1_RECFM,DSI_DCB_RECFM    set RECFM=
         MVC   SYSUT1_MAXLEN,DSI_DCB_LRECL   set LRECL=
         MVC   SYSUT1_BLKSZ,DSI_ACB_DCISZ    set data CISZ
         SPACE 1
OPEN0230 AS2LTRCE
*        get default heap storage
         LA    R0,RPLLNG
         ST    R0,SYSUT1_RPL1LEN
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#USRH,SYSUT1_RPL1LEN,SYSUT1_@VRPL1,0),        +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R1,SYSUT1_@VRPL1
         USING IFGRPL,R1
         MVC   0(RPLLNG,R1),MODEL_RPL   copy RPL to HEAP
         XC    RPLOPTCD,RPLOPTCD   clear OPTCD=
         DROP  R1
         XC    RTNCD,RTNCD    clear MODCB return code R15
         XC    RSNCD,RSNCD    clear MODCB error  code R0
         L     R2,SYSUT1_@VACB     put addr of ACB in R2
         LA    R3,SYSUT1_@DBUFF    put addr of record addr in R3
         L     R7,SYSUT1_@VRPL1    put addr of RPL in R7
         TM    DSI_ICF_ORG,$KSDS   Q. KSDS
         JO    OPEN0234            A. yes, bypass
         SPACE 1
*    OPTCD=
*    [ADR|CNV|KEY]
*         ADR - addressed access to ESDS, KSDS via RBA, ¬RLS(KSDS)
*         CNV - CI access, ¬CMP, ¬RLS
*        +KEY - keyed access to KSDS, RRDS, key or RRN
*    [DIR|SEQ|SKP]
*         DIR - direct access to ESDS, KSDS, RRDS
*        +SEQ - seq access to ESDS, KSDS, RRDS
*         SKP - skip-seq access to KSDS
*    [ARD|LRD]
*        +ARD - user arg determines record
*         LRD - last record in data set, BWD required
*    [FWD|BWD]
*        +FWD - forward processing
*         BWD - backward processing
*    [ASY|SYN]
*         ASY - asynchronous access
*        +SYN - synchronous access
*    [NSP|NUP|UPD]
*         NSP - match with DIR only, VSAM remembers position
*        +NUP - no update abilities, insert is ok, VSAM will
*               not remember position
*         UPD - retrieve for update, VSAM remembers position
*    [KEQ|KGE]
*        +KEQ - key =, GET with OPTCD=(KEY,DIR), POINT with
*               OPTCD=KEY
*         KGE - key >=,
*    [FKS|GEN]
*        +FKS - full key search arg
*         GEN - generic key search arg
*    [NWAITX|WAITX]
*        +NWAITX - never take the UPAD or RLSWAIT exit
*         WAITX - when MACRF=LSR|GRS and OPTCD=SYN and UPAD exit
*                 exists, RLS and RLSWAIT exit
*    [LOC|MVE]
*         LOC - return addr of record in VSAM buffer
*        +MVE - move record to a work area
*    [CR|NRI]
*         CR  - consistent read integrity with RLS
*         NRI - no read integrity with RLS
*    [RBA|XRBA]
*        +RBA - with OPTCD=ADR, ¬SMS/EA
*        XRBA - with OPTCD=ADR, GET requires OPTCD=(DIR,ADR,XRBA)
         SPACE 1
OPEN0232 EQU   *         not KSDS
         MODCB RPL=(7),                                                +
               ACB=(2),                                                +
               AREA=(3),                                               +
               OPTCD=(ADR,SEQ,FWD,LOC),                                +
               MF=(G,CBWAREA)
         SPACE 1
         J     OPEN0236
         SPACE 1
OPEN0234 EQU   *         KSDS
         MODCB RPL=(7),                                                +
               ACB=(2),                                                +
               AREA=(3),                                               +
               OPTCD=(KEY,SEQ,FWD,LOC),                                +
               MF=(G,CBWAREA)
         SPACE 1
OPEN0236 EQU   *
         ST    RF,RTNCD       save MODCB return code R15
         XC    RSNCD,RSNCD    clear reason code
         LTR   RF,RF          Q. any errors
         JZ    OPEN0240       A. no, bypass
         C     RF,F4
         JNE   OPEN0238
         ST    R0,RSNCD       save MODCB error  code R0
OPEN0238 EQU   *
         LARL  RE,EXIT0000    set default return addr
         J     TXT0107B       A. yes,
         SPACE 1
OPEN0240 EQU   *
         OI    SYSUT1_IND0,SYSUT1_$FREAD     set read intent
         OI    SYSUT1_IND0,SYSUT1_$FSEQ      set seq access
         SPACE 1
OPEN0290 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
CLOS0100 AS2LTRCE ,      close input DCB
         AS2RESTK PUSH
         TM    SYSUT1_IND0,SYSUT1_$FOPEN     Q. open
         JNO   CLOS0190                      A. no, bypass
         SPACE 1
*        close the input DCB
         L     R7,SYSUT1_@DCB get DCB addr
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         CLOSE ((7)),MODE=31,                                          +
               MF=(E,PLIST)
         ST    RF,RTNCD       save CLOSE return code R15
         LTR   RF,RF          Q. any error(s)
         JZ    CLOS0120       A. no, bypass
         XC    RSNCD,RSNCD    save CLOSE error  code R0
         LARL  RE,CLOS0190    set default return addr
         J     TXT0107J       A. yes,
         SPACE 1
CLOS0120 EQU   *
         NI    SYSUT1_IND0,255-SYSUT1_$FOPEN set closed flag
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after CLOSE of IDCB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
CLOS0190 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
CLOS0200 AS2LTRCE ,      close input ACB
         AS2RESTK PUSH
         TM    SYSUT1_IND0,SYSUT1_$FOPEN     Q. open
         JNO   CLOS0290                      A. no, bypass
         SPACE 1
*        close the input ACB
         L     R2,SYSUT1_@VACB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         CLOSE ((2)),MODE=31,                                          +
               MF=(E,PLIST)
         ST    RF,VACBRC      save VSAM ACB return code R15
         LTR   RF,RF          Q. any error(s)
         JZ    CLOS0220       A. no, bypass
         SPACE 1
         XC    RTNCD,RTNCD    clear return code
         XC    RSNCD,RSNCD    clear error  code
         LA    R3,SYSUT1_VFDBK
         SHOWCB ACB=(2),                                               +
               AREA=(3),                                               +
               LENGTH=L'SYSUT1_VFDBK,                                  +
               FIELDS=(ERROR),                                         +
               MF=(G,CBWAREA)
         SPACE 1
         LTR   RF,RF          Q. any error(s)
         JZ    CLOS0210       A. no, bypass
         ST    RF,RTNCD       save SHOWCB return code R15
         ST    R0,RSNCD       save SHOWCB error  code R0
         LARL  RE,CLOS0290    set default return addr
         J     TXT0107C       A. yes,
CLOS0210 EQU   *
         MVC   RTNCD,VACBRC        save CLOSE return code R15
         MVC   RSNCD,SYSUT1_VFDBK  save CLOSE error  code R0
         LARL  RE,EXIT0040    set default return addr
         J     TXT0107K
         SPACE 1
CLOS0220 EQU   *
         NI    SYSUT1_IND0,255-SYSUT1_$FOPEN set closed flag
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after CLOSE of IACB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
CLOS0290 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
SUBR1000 AS2LTRCE
         AS2RESTK PUSH
*        call ASU3QFAB to query file allocation attributes
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,F2,SYSUT1_BEG,DSI),                         +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASU3QFAB
         L     RF,@3QFAB
         BASR  RE,RF     link to
         SPACE 1
         CLC   LECTOK,CEE000
         JE    SUBR1990
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR1990 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
SUBR2000 AS2LTRCE
         AS2RESTK PUSH
*        call ASU3QFAB to list/print formated queried data
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,F5,SYSUT1_BEG,DSI),                         +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASU3QFAB
         L     RF,@3QFAB
         BASR  RE,RF     link to
         SPACE 1
         CLC   LECTOK,CEE000
         JE    SUBR2990
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR2990 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
SUBR3000 AS2LTRCE
         AS2RESTK PUSH
*        call ASUMDHEX to print the DSI
         ICM   R0,12,DSI_DSLEN
         SRL   R0,16
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F1
         MVC   DMPRB_TITLE,=CL44'Data Set Information block'
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,DSI),                              +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the DSD
         ICM   R0,12,SYSUT1_DSLEN
         SRL   R0,16
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F2
         MVC   DMPRB_TITLE,=CL44'Data Set Definition control block'
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,SYSUT1_BEG),                       +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
SUBR3100 AS2LTRCE ,      PROCESS JFCB(S)
*        call ASUMDHEX to print the JFCB
         LA    R0,JFCBLGTH    length of JFCB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F3
         MVC   DMPRB_TITLE,=CL44'Job File Control Block'
         ICM   R3,15,SYSUT1_@SJFCB Q. JFCB addr exist
         JZ    SUBR3110            A. no, bypass JFCB
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3110 EQU   *
*        call ASUMDHEX to print the JFCB volume extention
         LA    R0,JFCBLGTH    length of JFCB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F3
         MVC   DMPRB_TITLE,=CL44'Job File Control Block VOL(S)'
         ICM   R3,15,SYSUT1_@SJFCBX     Q. JFCB VOL addr exist
         JZ    SUBR3120                 A. no, bypass JFCB
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3120 EQU   *
*        call ASUMDHEX to print the JFCB 3800 extention
         LA    R0,JFCBLGTH    length of JFCB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F3
         MVC   DMPRB_TITLE,=CL44'Job File Control Block 3800'
         ICM   R3,15,SYSUT1_@SJFCBE     Q. JFCB 3800 addr exist
         JZ    SUBR3200                 A. no, bypass JFCB
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3200 AS2LTRCE ,      PROCESS QSAM
         TM    SYSUT1_AM,$PS  Q. QSAM
         JNO   SUBR3300       A. no, bypass QSAM
*        call ASUMDHEX to print the DCB
         LA    R0,DCBLNGPS    length of DCB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F3
         MVC   DMPRB_TITLE,=CL44'Data Control Block'
         ICM   R3,15,SYSUT1_@DCB   Q. DCB addr exist
         JZ    SUBR3210            A. no, bypass DCB
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3210 EQU   *
*        call ASUMDHEX to print the DCBE
         LA    R0,DCBEMINL    length of DCBE
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F4
         MVC   DMPRB_TITLE,=CL44'Data Control Block Extended'
         ICM   R3,15,SYSUT1_@DCBE  Q. DCBE addr exist
         JZ    SUBR3220            A. no, bypass
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3220 EQU   *
         J     SUBR3400
         SPACE 1
SUBR3300 AS2LTRCE ,      PROCESS VSAM
         TM    SYSUT1_AM,$VSAM     Q. VSAM
         JNO   SUBR3400            A. no, bypass VSAM
*        call ASUMDHEX to print the ACB
         LA    R0,ACBLNG      length of ACB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F5
         MVC   DMPRB_TITLE,=CL44'Access method Control Block'
         ICM   R3,15,SYSUT1_@VACB  Q. ACB addr exist
         JZ    SUBR3310            A. no, bypass ACB
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3310 EQU   *
*        call ASUMDHEX to print the RPL1
         LA    R0,RPLLNG      length of RPL
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F6
         MVC   DMPRB_TITLE,=CL44'Request Parameter List'
         ICM   R3,15,SYSUT1_@VRPL1 Q. RPL1 addr exist
         JZ    SUBR3320            A. no, bypass RPL
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3320 EQU   *
         SPACE 1
SUBR3400 EQU   *
         SPACE 1
SUBR3990 AS2LTRCE
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0107A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'MODCB input ACB'
         J     MSG0107E
         SPACE 1
TXT0107B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'MODCB input RPL'
         J     MSG0107E
         SPACE 1
TXT0107C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SHOWCB ACB'
         J     MSG0107E
         SPACE 1
TXT0107D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'OPEN ACB'
         J     MSG0107E
         SPACE 1
TXT0107E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'OPEN DCB'
         J     MSG0107E
         SPACE 1
TXT0107J AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'CLOSE input DCB'
         J     MSG0107E
         SPACE 1
TXT0107K AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'CLOSE input ACB'
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0002
         J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     ERTN0800
         SPACE 2
TXT0108A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'SYSUT1_AM'
         SPACE 1
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),SYSUT1_AM(L'SYSUT1_AM+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         J     MSG0108E
         SPACE 1
TXT0108B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'DSI_DCB_AM'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),DSI_DCB_AM(L'DSI_DCB_AM+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         J     MSG0108E
         SPACE 1
TXT0108C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H14
         MVC   ISITXT+((3-1)*L'ISICOL)(14),=CL14'DSI_DEV_DCLASS'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),DSI_DEV_DCLASS
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
STATIC   DS    0D
*        COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F8       DC    F'8'
F76      DC    F'76'
         SPACE 1
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H14      DC    H'14'
H15      DC    H'15'
H30      DC    H'30'
         SPACE 1
         LTORG
         SPACE 2
         DS    0D
MODEL_ACB ACB  AM=VSAM,       ACCESS METHOD CONTROL BLOCK              +
               DDNAME=DUMMY,                                           +
               RMODE31=ALL
         DS    0D
MODEL_RPL RPL  AM=VSAM        REQUEST PARMETER LIST
         SPACE 2
         DS    0D
MODEL_DCB DCB  ,              DATA CONTROL BLOCK                       +
               DCBE=MODEL_DCBE,                                        +
               DDNAME=DUMMY,                                           +
               DSORG=PS,                                               +
               MACRF=(GL)
         DS    0D
MODEL_DCBE DCBE ,             DCB EXTENSION                            +
               RMODE31=BUFF
         SPACE 2
         END
./ ADD NAME=ASTSRH1B 0126-18318-19064-1131-00813-00631-00000-APLKS   42
*PROCESS RENT
         TITLE 'ASTSRH1B - TEST VECTOR SEARCH'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* TEST VECTOR SEARCH
*
* PURPOSE: TEST VECTOR SEARCH
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASTSRH1B'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
R6       EQU   6              WORK REG
R7       EQU   7              WORK REG
R8       EQU   8              WORK REG
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
FSUB     DS    F
FIDX     DS    F
FIBNBR   DS    F
FARG     DS    CL8
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
SUBPLIST DS    A
         SPACE 1
MSGTXT   EQU   *,57,C'C'
MSG_A    DS    CL27
MSG_B    DS    CL8
MSG_C    DS    CL14
MSG_D    DS    CL10
         SPACE 1
         AS2VLSRH PREFIX=(A_),MF=L
         SPACE 1
         AS2VHSRT PREFIX=(B_),MF=L
         SPACE 1
         AS2VBSRH PREFIX=(B_),MF=L
         SPACE 1
         AS2VBSR1 PREFIX=(C_),MF=L
         SPACE 1
         AS2VBSR1 MF=L        USED BY AS2VFSRH
         AS2VFSRH MF=L
         SPACE 1
VECTORB  DS    CL80
         SPACE 1
**       AS1MUTSA UDS=LTRACE
         SPACE 1
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
LSCB     AS2VLSRH MF=D
         SPACE 1
*** BSCB     AS2VBSRH MF=D
         SPACE 1
BS1CB    AS2VBSRH PREFIX=(BS1_,),MF=D
         SPACE 1
*** FSCB     AS2VFSRH MF=D
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPPA,                                               +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO IF CALLED BY NON-LE          +
               MAIN=YES,                                               +
               ENCLAVE=NO,                                             +
               BASE=(10,11)
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         SAVE ORIGINAL R1 VALUE
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME MAIN=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPPA     CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=00,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
         MVC   LEMDEST,F2
         MVI   MSGTXT,C' '
         MVC   MSGTXT+1(L'MSGTXT-1),MSGTXT
         MVC   MSG_A,TXT_A
         MVC   MSG_C,TXT_B
         SPACE 1
*        INITIAL CONTROL BLOCK FOR LINEAR SEARCH VECTOR A
         AS2VLSRH ,                                                    +
               NTRYCNT=VANCNT,                                         +
               NTRY=(VANPOS,VANLEN),                                   +
               KEY=(VAKPOS,VAKLEN),                                    +
               SRCHARG=FARG,                                           +
               VECTOR=VECTORA,                                         +
               PREFIX=(A_),                                            +
               MF=G
         ST    RF,RTNCD
         MVC   RSNCD,=F'100'
         JNZ   EXIT0000
         SPACE 1
*        INITIAL CONTROL BLOCK FOR HEAP SORT VECTOR B
         AS2VHSRT ,                                                    +
               NTRYCNT=VANCNT,                                         +
               NTRY=(1,10),                                            +
               KEY=(3,8),                                              +
               VECTOR=VECTORB,                                         +
               PREFIX=(B_),                                            +
               MF=G
         ST    RF,RTNCD
         MVC   RSNCD,=F'200'
         JNZ   EXIT0000
         SPACE 1
*        INITIAL CONTROL BLOCK FOR BINARY SEARCH VECTOR B
         AS2VBSRH ,                                                    +
               NTRYCNT=VANCNT,                                         +
               NTRY=(1,10),                                            +
               KEY=(3,8),                                              +
               SRCHARG=FARG,                                           +
               VECTOR=VECTORB,                                         +
               PREFIX=(B_,B_),                                         +
               MF=G
         ST    RF,RTNCD
         MVC   RSNCD,=F'300'
         JNZ   EXIT0000
         SPACE 1
*        INITIAL CONTROL BLOCK FOR BINARY SEARCH 1 VECTOR B
         AS2VBSR1 ,                                                    +
               NTRYCNT=VANCNT,                                         +
               NTRY=(1,10),                                            +
               KEY=(3,8),                                              +
               SRCHARG=FARG,                                           +
               VECTOR=VECTORB,                                         +
               PREFIX=(C_,C_),                                         +
               MF=G
         ST    RF,RTNCD
         MVC   RSNCD,=F'400'
         JNZ   EXIT0000
         SPACE 1
*        INITIAL CONTROL BLOCK FOR BINARY SEARCH 1 VECTOR FIB
         AS2VBSR1 ,                                                    +
               NTRYCNT=32,                                             +
               NTRY=(1,4),                                             +
               KEY=(1,4),                                              +
               VECTOR=FSFIB,                                           +
               SRCHARG=FSNCNT,                                         +
               MF=G
         ST    RF,RTNCD
         MVC   RSNCD,=F'500'
         JNZ   EXIT0000
         SPACE 1
*        INITIAL CONTROL BLOCK FOR FIBONACCIAN SEARCH VECTOR B
         AS2VFSRH ,                                                    +
               NTRYCNT=VANCNT,                                         +
               NTRY=(1,10),                                            +
               KEY=(3,8),                                              +
               SRCHARG=FARG,                                           +
               VECTOR=VECTORB,                                         +
               FIBSUB=FIBNBR,                                          +
               MF=G
         ST    RF,RTNCD
         MVC   RSNCD,=F'510'
         JNZ   EXIT0000
         SPACE 1
**       AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 2
MAIN0100 EQU   *
         MVC   VLEN,H25
         MVC   VTXT,=CL25'&CSECT - LINEAR SEARCH'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'CLINT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VLSRH MF=E
         JZ    L_LS1001
         LA    R2,=CL8'NOTFND'
         J     L_LS1002
L_LS1001 EQU   *
         LA    R2,VANBEG(R1)
L_LS1002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'BILL'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VLSRH MF=E
         JZ    L_LS2001
         LA    R2,=CL8'NOTFND'
         J     L_LS2002
L_LS2001 EQU   *
         LA    R2,VANBEG(R1)
L_LS2002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'99999999'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VLSRH MF=E
         JZ    L_LS3001
         LA    R2,=CL8'NOTFND'
         J     L_LS3002
L_LS3001 EQU   *
         LA    R2,VANBEG(R1)
L_LS3002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
*        SEARCH UNTIL YOU FIND A KEY OF HIGH-VALUES
         L     R0,F1
         LNR   R0,R0
         ST    R0,A_LSUBND
         SPACE 1
         MVC   FARG,=CL8'CLINT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VLSRH MF=E
         JZ    L_LS4001
         LA    R2,=CL8'NOTFND'
         J     L_LS4002
L_LS4001 EQU   *
         LA    R2,VANBEG(R1)
L_LS4002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'BILL'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VLSRH MF=E
         JZ    L_LS5001
         LA    R2,=CL8'NOTFND'
         J     L_LS5002
L_LS5001 EQU   *
         LA    R2,VANBEG(R1)
L_LS5002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'99999999'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VLSRH MF=E
         JZ    L_LS6001
         LA    R2,=CL8'NOTFND'
         J     L_LS6002
L_LS6001 EQU   *
         LA    R2,VANBEG(R1)
L_LS6002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   VLEN,H25
         MVC   VTXT,=CL25'&CSECT - HEAP SORT'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   VECTORB,VANBEG      COPY VECTOR TO STACK STG
         MVC   VLEN,H100
         MVC   VTXT,=CL100'  BEFORE:'
         MVC   VTXT+9(L'VECTORB),VECTORB
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         AS2VHSRT MF=E
         SPACE 1
         MVC   VLEN,H100
         MVC   VTXT,=CL100'   AFTER:'
         MVC   VTXT+9(L'VECTORB),VECTORB
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   VLEN,H25
         MVC   VTXT,=CL25'&CSECT - BINARY SEARCH'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'AARON'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSRH PREFIX=(,B_),MF=E
         JZ    L_BS1001
         LA    R2,=CL8'NOTFND'
         J     L_BS1002
L_BS1001 EQU   *
         LA    R2,VECTORB(R1)
L_BS1002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'CLINT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSRH PREFIX=(,B_),MF=E
         JZ    L_BS2001
         LA    R2,=CL8'NOTFND'
         J     L_BS2002
L_BS2001 EQU   *
         LA    R2,VECTORB(R1)
L_BS2002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'ROBERT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSRH PREFIX=(,B_),MF=E
         JZ    L_BS3001
         LA    R2,=CL8'NOTFND'
         J     L_BS3002
L_BS3001 EQU   *
         LA    R2,VECTORB(R1)
L_BS3002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'ZZZZZZZZ'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSRH PREFIX=(,B_),MF=E
         JZ    L_BS4001
         LA    R2,=CL8'NOTFND'
         J     L_BS4002
L_BS4001 EQU   *
         LA    R2,VECTORB(R1)
L_BS4002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   VLEN,H31
         MVC   VTXT,=CL31'&CSECT - BINARY SEARCH (1) >='
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'AARON'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSR1 PREFIX=(,C_),MF=E
         JZ    L_BS5001
         LA    R2,=CL8'NOTFND'
         J     L_BS5002
L_BS5001 EQU   *
         LA    R2,VECTORB(R1)
L_BS5002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'CLINT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSR1 PREFIX=(,C_),MF=E
         JZ    L_BS6001
         LA    R2,=CL8'NOTFND'
         J     L_BS6002
L_BS6001 EQU   *
         LA    R2,VECTORB(R1)
L_BS6002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'ROBERT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSR1 PREFIX=(,C_),MF=E
         JZ    L_BS7001
         LA    R2,=CL8'NOTFND'
         J     L_BS7002
L_BS7001 EQU   *
         LA    R2,VECTORB(R1)
L_BS7002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'ZZZZZZZZ'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSR1 PREFIX=(,C_),MF=E
         JZ    L_BS8001
         LA    R2,=CL8'NOTFND'
         J     L_BS8002
L_BS8001 EQU   *
         LA    R2,VECTORB(R1)
L_BS8002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'HONDO'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VBSR1 PREFIX=(,C_),MF=E
         JZ    L_BS9001
         LA    R2,=CL8'NOTFND'
         J     L_BS9002
L_BS9001 EQU   *
         LA    R2,VECTORB(R1)
L_BS9002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   VLEN,H29
         MVC   VTXT,=CL29'&CSECT - FIBONACCIAN SEARCH'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'AARON'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VFSRH MF=E
         JZ    L_FS1001
         LA    R2,=CL8'NOTFND'
         J     L_FS1002
L_FS1001 EQU   *
         LA    R2,VECTORB(R1)
L_FS1002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'CLINT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VFSRH MF=E
         JZ    L_FS2001
         LA    R2,=CL8'NOTFND'
         J     L_FS2002
L_FS2001 EQU   *
         LA    R2,VECTORB(R1)
L_FS2002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'ROBERT'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VFSRH MF=E
         JZ    L_FS3001
         LA    R2,=CL8'NOTFND'
         J     L_FS3002
L_FS3001 EQU   *
         LA    R2,VECTORB(R1)
L_FS3002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'ZZZZZZZZ'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VFSRH MF=E
         JZ    L_FS4001
         LA    R2,=CL8'NOTFND'
         J     L_FS4002
L_FS4001 EQU   *
         LA    R2,VECTORB(R1)
L_FS4002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   FARG,=CL8'HONDO'
         MVC   MSG_B,FARG
         XC    FSUB,FSUB
         AS2VFSRH MF=E
         JZ    L_FS5001
         LA    R2,=CL8'NOTFND'
         J     L_FS5002
L_FS5001 EQU   *
         LA    R2,VECTORB(R1)
L_FS5002 EQU   *
         MVC   MSG_D,0(R2)
         MVC   VLEN,H57
         MVC   VTXT,MSGTXT
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         MVC   VLEN,H22
         MVC   VTXT,=CL22'&CSECT - END OF STEP'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
**       AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 1
EXIT0090 EQU   *
         AS2PLIST (RTNCD,0),VL,MF=(E,PLIST)
*        CALL CEE3SRC
         L     RF,=V(CEE3SRC)
         BASR  RE,RF     LINK TO
         SPACE 1
         L     R0,RSNCD
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15),                                                +
               MF=(E,PLIST)
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         AS2VLSRH ,                                                    +
               SUB=FSUB,                                               +
               INDEX=FIDX,                                             +
               PREFIX=(A_),                                            +
               MF=C
         BR    RE
         SPACE 1
         AS2VHSRT ,                                                    +
               PREFIX=(B_),                                            +
               MF=C
         BR    RE
         SPACE 1
         AS2VBSRH ,                                                    +
               SUB=FSUB,                                               +
               INDEX=FIDX,                                             +
               PREFIX=(B_,B_),                                         +
               MF=C
         BR    RE
         SPACE 1
         AS2VBSR1 ,                                                    +
               SUB=FSUB,                                               +
               INDEX=FIDX,                                             +
               PREFIX=(C_,C_),                                         +
               MF=C
         BR    RE
         SPACE 1
         AS2VBSR1 ,                                                    +
               SUB=FSFIBK,                                             +
               INDEX=FSLBND,                                           +
               MF=C
         BR    RE
         SPACE 1
         AS2VFSRH ,                                                    +
               SUB=FSUB,                                               +
               INDEX=FIDX,                                             +
               MF=C
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RC,RD
         DROP  RA
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
H22      DC    H'22'
H25      DC    H'25'
H29      DC    H'29'
H31      DC    H'31'
H57      DC    H'57'
H100     DC    H'100'
         SPACE 1
TXT_A    DC    CL27'&CSECT - LOOKING FOR KEY='
TXT_B    DC    CL14'  FOUND ENTRY='
         DS    0D
VECTORA  EQU   *
         DC    CL16'FIRST NAME TABLE'
VANBEG   EQU   *
         DC    CL2'03'
VAKBEG   EQU   *
         DC    CL8'BOB'
VANEND   EQU   *
         DC    CL2'07',CL8'ROBERT'
         DC    CL2'02',CL8'BILL'
         DC    CL2'04',CL8'CHET'
         DC    CL2'05',CL8'CLINT'
         DC    CL2'01',CL8'AARON'
         DC    CL2'06',CL8'GRAEME'
         DC    CL2'08',CL8'ZEKE'
VAVEND   EQU   *
         DC    CL2'00',8X'FF'
VANCNT   DC    A((VAVEND-VANBEG)/(VANEND-VANBEG))
VANPOS   DC    A(VANBEG-VECTORA+1)
VANLEN   DC    A(VANEND-VANBEG)
VAKPOS   DC    A(VAKBEG-VANBEG+1)
VAKLEN   DC    A(VANEND-VAKBEG)
         SPACE 1
         AS2VFSRH MF=STATIC
         SPACE 2
         LTORG
         DROP  R9
         END
./ ADD NAME=ASUBALCT 0109-15061-18310-1409-00081-00001-00000-APLKS   36
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, PERSISTANT DATA
*
* COPYBOOK ID: ASUBALCT
*       TITLE: LE ASSEMBLER CONDITION TOKENS
*        DATE: 03/02/2015
*
* --------------------------------------------------------- *
*
* 2015/03/02 REGENNED USING REXX EXEC CEEBLDTX
* 2016/08/09 REGENNED USING REXX EXEC CEEBLDTX
* 2018/05/11 REGENNED USING REXX EXEC CEEBLDTX
* 2018/11/06 REGENNED USING REXX EXEC CEEBLDTX
* --------------------------------------------------------- *
ASU035_0001 DC  XL4'00010065',XL4'88C1E2E4'
ASU035_0002 DC  XL4'00020065',XL4'90C1E2E4'
ASU035_0003 DC  XL4'00030065',XL4'98C1E2E4'
ASU035_0004 DC  XL4'00040065',XL4'A0C1E2E4'
ASU036 DC  XL4'00000066',XL4'40C1E2E4'
ASU037_0001 DC  XL4'00010067',XL4'88C1E2E4'
ASU037_0002 DC  XL4'00020067',XL4'90C1E2E4'
ASU038 DC  XL4'00000068',XL4'40C1E2E4'
ASU039_0001 DC  XL4'00010069',XL4'88C1E2E4'
ASU039_0002 DC  XL4'00020069',XL4'90C1E2E4'
ASU039_0003 DC  XL4'00030069',XL4'98C1E2E4'
ASU039_0004 DC  XL4'00040069',XL4'A0C1E2E4'
ASU03A DC  XL4'0000006A',XL4'40C1E2E4'
ASU03B_0001 DC  XL4'0001006B',XL4'88C1E2E4'
ASU03B_0002 DC  XL4'0002006B',XL4'90C1E2E4'
ASU03B_0003 DC  XL4'0003006B',XL4'98C1E2E4'
ASU03B_0004 DC  XL4'0004006B',XL4'A0C1E2E4'
ASU03C_0001 DC  XL4'0001006C',XL4'88C1E2E4'
ASU03C_0002 DC  XL4'0002006C',XL4'90C1E2E4'
ASU03C_0003 DC  XL4'0003006C',XL4'98C1E2E4'
ASU03C_0004 DC  XL4'0004006C',XL4'A0C1E2E4'
ASU03D_0001 DC  XL4'0001006D',XL4'88C1E2E4'
ASU03D_0002 DC  XL4'0002006D',XL4'90C1E2E4'
ASU03D_0003 DC  XL4'0003006D',XL4'98C1E2E4'
ASU03D_0004 DC  XL4'0004006D',XL4'A0C1E2E4'
ASU03E_0001 DC  XL4'0001006E',XL4'88C1E2E4'
ASU03E_0002 DC  XL4'0002006E',XL4'90C1E2E4'
ASU03E_0003 DC  XL4'0003006E',XL4'98C1E2E4'
ASU03E_0004 DC  XL4'0004006E',XL4'A0C1E2E4'
ASU03F_0001 DC  XL4'0001006F',XL4'88C1E2E4'
ASU03F_0002 DC  XL4'0002006F',XL4'90C1E2E4'
ASU03F_0003 DC  XL4'0003006F',XL4'98C1E2E4'
ASU03F_0004 DC  XL4'0004006F',XL4'A0C1E2E4'
ASU03G_0001 DC  XL4'00010070',XL4'88C1E2E4'
ASU03G_0002 DC  XL4'00020070',XL4'90C1E2E4'
ASU03G_0003 DC  XL4'00030070',XL4'98C1E2E4'
ASU03H_0001 DC  XL4'00010071',XL4'88C1E2E4'
ASU03H_0002 DC  XL4'00020071',XL4'90C1E2E4'
ASU03H_0003 DC  XL4'00030071',XL4'98C1E2E4'
ASU03H_0004 DC  XL4'00040071',XL4'A0C1E2E4'
ASU03I_0001 DC  XL4'00010072',XL4'88C1E2E4'
ASU03I_0002 DC  XL4'00020072',XL4'90C1E2E4'
ASU03I_0003 DC  XL4'00030072',XL4'98C1E2E4'
ASU03I_0004 DC  XL4'00040072',XL4'A0C1E2E4'
ASU03J_0001 DC  XL4'00010073',XL4'88C1E2E4'
ASU03J_0002 DC  XL4'00020073',XL4'90C1E2E4'
ASU03J_0003 DC  XL4'00030073',XL4'98C1E2E4'
ASU03J_0004 DC  XL4'00040073',XL4'A0C1E2E4'
ASU03K_0001 DC  XL4'00010074',XL4'88C1E2E4'
ASU03K_0002 DC  XL4'00020074',XL4'90C1E2E4'
ASU03K_0003 DC  XL4'00030074',XL4'98C1E2E4'
ASU03K_0004 DC  XL4'00040074',XL4'A0C1E2E4'
ASU03L_0001 DC  XL4'00010075',XL4'88C1E2E4'
ASU03L_0002 DC  XL4'00020075',XL4'90C1E2E4'
ASU03L_0003 DC  XL4'00030075',XL4'98C1E2E4'
ASU03L_0004 DC  XL4'00040075',XL4'A0C1E2E4'
ASU03M_0001 DC  XL4'00010076',XL4'88C1E2E4'
ASU03M_0002 DC  XL4'00020076',XL4'90C1E2E4'
ASU03M_0003 DC  XL4'00030076',XL4'98C1E2E4'
ASU03M_0004 DC  XL4'00040076',XL4'A0C1E2E4'
ASU03N DC  XL4'00000077',XL4'40C1E2E4'
ASU03O DC  XL4'00000078',XL4'40C1E2E4'
ASU03P_0001 DC  XL4'00010079',XL4'88C1E2E4'
ASU03P_0002 DC  XL4'00020079',XL4'90C1E2E4'
ASU03P_0003 DC  XL4'00030079',XL4'98C1E2E4'
ASU03P_0004 DC  XL4'00040079',XL4'A0C1E2E4'
./ ADD NAME=ASUBSRHB 0123-18172-19267-1159-00477-00442-00000-APLKS   26
*PROCESS RENT
         TITLE 'ASUBSRHB - VECTOR BINARY SEARCH ROUTINE'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* VECTOR BINARY SEARCH ROUTINE
*
* PURPOSE: RETURN VECTOR ENTRY NUMBER OF ENTRY THAT MATCHES
*          THE SERCH ARGUMENT.
*
*        CALL 'ASUBSRHB' USING ASCA, VECTOR, NCNT, NPOS,
*             NLEN, KPOS, KLEN, KARG, NSUB, FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*           VECTOR: (INPUT/OUTPUT,ADDRESS)
*                   VECTOR
*             NCNT: (INPUT,FWD)
*                   VECTOR ENTRY COUNT
*             NPOS: (INPUT,FWD)
*                   ENTRY POS IN VECTOR
*             NLEN: (INPUT,FWD)
*                   ENTRY LENGTH <=256 BYTES, >=KLEN
*             KPOS: (INPUT,FWD)
*                   KEY POS IN ENTRY
*             KLEN: (INPUT,FWD)
*                   KEY LENGTH <=256 BYTES, <=NLEN
*             KARG: (INPUT,CH/BI)
*                   SEARCH ARGUMENT STRING, LENGTH =KLEN
*             NSUB: (OUTPUT,FWD)
*                   SUBSCRIPT OF ENTRY MATCHING THE ARG
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUBSRHB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              BAR OF ASAB, ASABX
R6       EQU   6              BAR OF ASCA
R7       EQU   7              n/a
R8       EQU   8              n/a
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         EJECT
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
PGMPARM1 DS    A              ADDRESS OF ASCA
         ORG   PGMPARM1
SUBPARM0 DS    A              ADDRESS OF ASCA
PGMPARM2 DS    A              ADDRESS OF VECTOR
PGMPARM3 DS    A              ADDRESS OF VECTOR ENTRY COUNT
PGMPARM4 DS    A              ADDRESS OF ENTRY POS IN VECTOR
PGMPARM5 DS    A              ADDRESS OF ENTRY LENGTH
PGMPARM6 DS    A              ADDRESS OF KEY POS IN ENTRY
PGMPARM7 DS    A              ADDRESS OF KEY LENGTH
PGMPARM8 DS    A              ADDRESS OF SEARCH ARGUMENT
PGMPARM9 DS    A              ADDRESS OF MATCHING SUBSCRIPT
PGMPARMA DS    A              ADDRESS OF LE FEEDBACK
         ORG   PGMPARMA
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
NCNT     DS    F              VECTOR ENTRY COUNT
NPOS     DS    F              VECTOR ENTRY POS
NLEN     DS    F              VECTOR ENTRY LENGTH
KPOS     DS    F              KEY POS IN ENTRY
KLEN     DS    F              KEY LENGTH
NSUB     DS    F              VECTOR ENTRY SUBSCRIPT
NIDX     DS    F              VECTOR ENTRY INDEX
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
PGMPLIST DS    A              ORIGINAL R1 VALUE
         SPACE 1
         AS2VBSRH MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         EJECT
* --------------------------------------------------------- *
* PARMLIST COMING TO THIS PROGRAM
* --------------------------------------------------------- *
         SPACE 1
PARMLIST DSECT
@ASCA    DS    A              PTR TO AS COMMUNICATION AREA
@VECTOR  DS    A              PTR TO VECTOR (INPUT)
@NCNT    DS    A              PTR TO VECTOR ENTRY COUNT (INPUT)
@NPOS    DS    A              PTR TO ENTRY POS IN VECTOR (INPUT)
@NLEN    DS    A              PTR TO ENTRY LENGTH (INPUT)
@KPOS    DS    A              PTR TO KEY POS IN ENTRY (INPUT)
@KLEN    DS    A              PTR TO KEY LENGTH (INPUT)
@KARG    DS    A              PTR TO SEARCH ARGUMENT (INPUT)
@NSUB    DS    A              PTR TO VECTOR ENTRY SUBSCRIPT (OUTPUT)
@LEFDBK  DS    A              PTR TO LE FEEDBACK AREA (OUTPUT)
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         ST    R1,PGMPLIST
         SPACE 1
         USING CEEDSA,RD
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 1
         USING CEECAA,RC
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT NOGEN
PPA      CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=01,                                                 +
               REL=00,                                                 +
               MOD=00,                                                 +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *    INITIALIZE DYNAMIC STORAGE
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
**       AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 1
         L     R1,PGMPLIST
         USING PARMLIST,R1
         SPACE 1
         MVC   PGMPARM1,@ASCA
         NC    PGMPARM1,=XL4'7FFFFFFF'
         SPACE 1
         MVC   PGMPARM2,@VECTOR
         NC    PGMPARM2,=XL4'7FFFFFFF'
         SPACE 1
         MVC   PGMPARM3,@NCNT
         NC    PGMPARM3,=XL4'7FFFFFFF'
         L     R2,PGMPARM3
         L     R0,0(,R2)
         ST    R0,NCNT
         SPACE 1
         MVC   PGMPARM4,@NPOS
         NC    PGMPARM4,=XL4'7FFFFFFF'
         L     R2,PGMPARM4
         L     R0,0(,R2)
         ST    R0,NPOS
         SPACE 1
         MVC   PGMPARM5,@NLEN
         NC    PGMPARM5,=XL4'7FFFFFFF'
         L     R2,PGMPARM5
         L     R0,0(,R2)
         ST    R0,NLEN
         SPACE 1
         MVC   PGMPARM6,@KPOS
         NC    PGMPARM6,=XL4'7FFFFFFF'
         L     R2,PGMPARM6
         L     R0,0(,R2)
         ST    R0,KPOS
         SPACE 1
         MVC   PGMPARM7,@KLEN
         NC    PGMPARM7,=XL4'7FFFFFFF'
         L     R2,PGMPARM7
         L     R0,0(,R2)
         ST    R0,KLEN
         SPACE 1
         MVC   PGMPARM8,@KARG
         NC    PGMPARM8,=XL4'7FFFFFFF'
         SPACE 1
         MVC   PGMPARM9,@NSUB
         NC    PGMPARM9,=XL4'7FFFFFFF'
         TM    @NSUB,X'80'    Q. LAST PARM
         JO    INIT0010       A. YES,
         MVC   PGMPARMA,@LEFDBK
         NC    PGMPARMA,=XL4'7FFFFFFF'
         TM    @LEFDBK,X'80'  Q. LAST PARM
         JO    INIT0010       A. YES,
         LARL  RE,EXIT0000
         J     TXT0113A
         SPACE 1
INIT0010 EQU   *
         AS2VBSRH ,                                                    +
               NTRYCNT=NCNT,                                           +
               NTRY=(NPOS,NLEN),                                       +
               KEY=(KPOS,KLEN),                                        +
               VECTPTR=PGMPARM2,                                       +
               ARGPTR=PGMPARM8,                                        +
               MF=G
         ST    RF,RTNCD
         JNZ   MAIN0010
         SPACE 1
MAIN0000 EQU   *
         AS2VBSRH ,                                                    +
               SUB=NSUB,                                               +
               INDEX=NIDX,                                             +
               MF=C
         ST    RF,RTNCD
         JZ    MAIN0020       BINARY SEARCH SUCCESSFUL
MAIN0010 EQU   *
         LARL  RE,EXIT0000
         C     RF,=F'8'       Q. VALID RETURN CODE
         JH    TXT0115A       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN0020       ..00 BINARY SEARCH SUCCESSFUL
         J     TXT0107A       ..04 NOT FOUND
         J     TXT0107B       ..08 BINARY SEARCH UNSUCCESSFUL
MAIN0020 EQU   *
         L     R2,PGMPARM9
         MVC   0(L'NSUB,R2),NSUB   COPY SUBSCRIPT TO CALLER
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
**       AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
EXIT0090 EQU   *
         AS2PLIST (RTNCD,0),VL,MF=(E,PLIST)
*        CALL CEE3SRC
         L     RF,=V(CEE3SRC)
         BASR  RE,RF     link to
         SPACE 1
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         SPACE 2
* --------------------------------------------------------- *
* CALLABLE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR PROCESSING
* --------------------------------------------------------- *
         SPACE 1
TXT0107A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'01'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0001
         SPACE 1
TXT0119A EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(9),=CL9'not fou+
               nd'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
         J     MSG0107
         SPACE 1
TXT0107B EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'02'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0002
         SPACE 1
TXT0119B EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H36
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(36),=CL36'confl+
               icting ENTRY and KEY parameters'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *         FAILED WITH R15= REASON=
         J     ERTN0800
         SPACE 2
TXT0113A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         WAS PASSED TOO MANY ARGUMENTS
         J     ERTN0800
         SPACE 2
TXT0115A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'RETURN CODE'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL3'0:8'
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
         DS    0D
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
**       COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
H2       DC    H'2'
H3       DC    H'3'
H5       DC    H'5'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
H18      DC    H'18'
H36      DC    H'36'
         SPACE 2
         LTORG
         END
./ ADD NAME=ASUBSZAB 0199-16204-19316-1116-02087-00001-00000-APLKS   46
*PROCESS RENT
         TITLE 'AS UTILITY TO EXTRACT BLKSZ CISZ LRECL INFO'
*************************************************************
* ARCHITECTURE SERVICES UTILITY COMMON
* BLOCK SIZE, CI SIZE, LRECL data extract
*
*    Name: ASUBSZAB
*
* Purpose: Read input file AM=QSAM|VSAM, extract information
*          for the REXX analysis program to report on.
*
*          For AM=QSAM read block via RECFM=U.  Logical record
*          information will also be collected.
*
*          For AM=QSAM read record via RECFM=F|V.  Only logical
*          record information will be collected.
*
*          For AM=VSAM read record.  Logical record
*          information, CI, and additional data to determine
*          data fragmentation for KSDS files will be
*          collected.
*
*          Write output record(s).
*             TYPE - 1 -> statistics for lrecl
*                    2 -> statistics for block | CI
*                    3 -> statistics for VSAM KSDS fragmentation
*
*          The output file will be passed through a SORT
*          step.
*
*          Pass the sorted file to REXX exec FILEANAL to
*          report the statistical information.
*
*************************************************************
         SPACE 1
         LCLA  &DSNCNT
&DSNCNT  SETA  1              maximum nbr of DSN concatenations
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUBSZAB'
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         PRINT ON,GEN
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              work register
GR0      EQU   0              work register (64-bit)
R1       EQU   1              work register, address of parm list
*                             R1:R3 loop control
GR1      EQU   1              work register (64-bit)
R2       EQU   2              work register
R3       EQU   3              work register
R4       EQU   4              address of input record | block
R5       EQU   5              not used
R6       EQU   6              not used
R7       EQU   7              address of input IDCB | IRPL
R8       EQU   8              BAR ASCA,ASAB,ASABX
R9       EQU   9              BAR static storage
RA       EQU   10             BAR 1 program
RB       EQU   11             BAR 2 program RESERVED
RC       EQU   12             BAR LE CAA
RD       EQU   13             BAR 1 RSA/DSA
RE       EQU   14             return address
RF       EQU   15             branch and link address
         SPACE 1
ACBLNG   EQU   76             LENGTH OF ACB
         SPACE 1
RPLLNG   EQU   76             LENGTH OF RPL
         SPACE 1
DCBDCBE  EQU   0,4,C'A'       OFFSET OF DCBE ADDR IN DCB
DCBDSRG1 EQU   26,1,C'X'      OFFSET OF DSORG x'40' DSORG=PS
*                                             x'08' VSAM
DCBRECFM EQU   36,1,C'X'      OFFSET OF RECFM
DCBRECU  EQU   X'C0'          ..RECFM=U
DCBRECF  EQU   X'80'          ..RECFM=F
DCBRECV  EQU   X'40'          ..RECFM=V
DCBRECBR EQU   X'10'          ..RECFM=.B
DCBRECSB EQU   X'08'          ..RECFM=.S
DCBDDNAM EQU   40,8,C'C'      OFFSET OF DDNAME IN DCB
DCBMACR  EQU   50,2,C'X'      OFFSET OF MACRF BYTE(S)
DCBMACR1 EQU   50,1,C'X'      OFFSET OF MACRF 1ST BYTE
DCBMRGET EQU   X'40'          ..GET QSAM,TCAM
DCBMRMVG EQU   X'10'          ..GET MOVE MODE QSAM,QISAM
DCBMRLCG EQU   X'08'          ..GET LOCATE MODE QSAM
DCBMRSBG EQU   X'04'          ..GET SUBSTITUTE MODE QSAM
DCBMRDMG EQU   X'01'          ..GET DATA MODE QSAM
DCBMACR2 EQU   51,1,C'X'      OFFSET OF MACRF 2ND BYTE
DCBMRPUT EQU   X'40'          ..PUT QSAM
DCBMRMVP EQU   X'10'          ..PUT MOVE MODE QSAM
DCBMRLCP EQU   X'08'          ..PUT LOCATE MODE QSAM
DCBMRTMD EQU   X'04'          ..PUT SUBSTITUTE MODE QSAM
DCBMRDMD EQU   X'01'          ..PUT DATA MODE QSAM
DCBBLKSI EQU   62,2,C'H'      OFFSET OF BLKSIZE
DCBIOBA  EQU   68,4,C'A'      OFFSET OF I/O BUFFER ADDR
*                             ..-4 to extract 4-byte length LBI
DCBLRECL EQU   82,2,C'H'      OFFSET OF LRECL IF RECFM=F|V
*                             OFFSET OF BLKSIZE IF RECFM=U
DCBPRECL EQU   90,2,C'H'      OFFSET OF MAX PHY REC LEN
DCBLNGBS EQU   88             LENGTH OF BSAM DCB
DCBLNGPO EQU   88             LENGTH OF BPAM DCB
DCBLNGQS EQU   96             LENGTH OF QSAM DCB
DCBLNGPS EQU   96             LENGTH OF QSAM/BSAM DCB
         SPACE 1
DCBELEN  EQU   4,2,C'H'       OFFSET OF DCBE LENGTH
DCBEDCB  EQU   8,4,C'A'       OFFSET OF DCB ADDR IN DCBE
*                             ..0 if closed
DCBEFLG1 EQU   16,1,C'X'      OFFSET OF DCBE FLAG1
DCBEOPEN EQU   X'80'          ..DCBE OPEN
DCBESLBI EQU   X'20'          ..SUPPORT LBI
DCBEFLG2 EQU   17,1,C'X'      OFFSET OF DCBE FLAG2
DCBEBU31 EQU   X'80'          ..RMODE31=BUFF
DCBEGSIZ EQU   X'08'          ..GETSIZE=YES
*                             ....calculate size of DS (RBN)
*                             ....store in DCBESIZE & DCBEXSIZ
DCBEULBI EQU   X'04'          ..request LBI
*                             ....DCBEBLKSI is valid, might be 0
DCBEFLG3 EQU   20,1,C'X'      OFFSET OF DCBE FLAG3
DCBELARGE EQU   X'80'         ..appl pgm supports LBI
DCBEBLKSI EQU   28,4,C'F'     OFFSET OF BLKSIZE IF LBI
DCBEXSIZ EQU   32,8,C'X'      OFFSET OF BLOCK COUNT
DCBEEODA EQU   40,4,C'A'      OFFSET OF END-OF-DATA ADDR
DCBESYNA EQU   44,4,C'A'      OFFSET OF SYNAD ADDR
DCBEMINL EQU   56             LENGTH OF MINIMUM DCBE
         SPACE 1
JFCBLGTH EQU   176            LENGTH OF JFCB
         SPACE 1
DSILEN   EQU   568            LENGTH OF DSI
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         POP   PRINT
         EJECT
         CEEDSA
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CLRBEG   EQU   *
SUBPARM0 DS    A              address of ASCA
         ORG   SUBPARM0
ASCAptr  DS    A              address of AS ASCA
ASABptr  DS    A              address of AS ASAB
ASABXptr DS    A              address of AS ASAB1
@PLEFDBK DS    A              address of pgm LE FEEDBACK
         AS1MUTSA UDS=(RESA)
         SPACE 1
LOOPSTK  DS    3F             save BRXLE registers
VACBRC   DS    F              VSAM ACB return code R15
VRPLRC   DS    F              VSAM RPL return code R15
RTNCD    DS    F              return code R15
RSNCD    DS    F              error  code R0
         AS1MUTSA UDS=(MISC,LEWORK)
         DS    0D
         AS1MDSDS FDS=DSD,PREFIX=SYSUT1_     data set definition
         SPACE 1
         AS1MDSDS FDS=DSD,PREFIX=SYSUT2_     data set definition
         SPACE 1
DSI      AS1MDSDS FDS=DSINFO,PARM=&DSNCNT    data set information
         DS    0D
#CLRLEN  EQU   *-CLRBEG
PGMR1    DS    F
@3I01B   DS    A              address of ASU3I01B
@3QFAB   DS    A              address of ASU3QFAB
@MDHEX   DS    A              address of ASUMDHEX
         DS    0D
CBWAREA  DS    XL128          GENCB/MODCB/SHOWCB work area
         DS    0D
SR_EYE   DC    CL8'STAT REC'
STATREC1 DS    XL32           STATISTICS RECORD for lrecl (OUTPUT)
         ORG   STATREC1
SR1_TYPE   DC    C'1'         ..record type 1
SR1_AM     DS    C            ..access method
*                             ....Q -> QSAM
*                             ....V -> VSAM
           DS    XL1          ..organization
SR1_FLAG   DS    C            ..error flag (contains "E")
           DS    XL4
SR1_SEQNO  DS    F            ..read sequence (cur RECFM)
*                             ....AM=Q RECFM=F -> add 1 for ea record
*                             ....AM=Q RECFM=V -> add 1 for ea record
*                             ....AM=V RECFM=F -> add 1 for ea record
*                             ....AM=V RECFM=V -> add 1 for ea record
SR1_LRECL  DS    F            ..logical record length
*                             ....AM=Q RECFM=U -> DCBLRECL
*                             ....AM=Q RECFM=F -> DCB_LRECL
*                             ....AM=Q RECFM=V -> RDW|DCBLRECL
*                             ....AM=V RECFM=F -> DCB_LRECL
*                             ....AM=V RECFM=V -> pseudo RDW
SR1_RECCNT DS    F            ..record count
*                             ....AM=Q RECFM=F -> rec count for block
*                             ....AM=Q RECFM=V -> value of 1
*                             ....AM=V RECFM=F -> value of 1
*                             ....AM=V RECFM=V -> value of 1
SR1_RCINO  DS    F            ..relative CI number
*                             ....AM=V -> (XRBA/CISZ + 1)
SR1_XRBA   DS    D            ..VSAM XRBA
         ORG
         SPACE 2
STATREC2 DS    XL32           STATISTICS RECORD for block|CI (OUTPUT)
         ORG   STATREC2
SR2_TYPE   DC    C'2'         ..record type 2 block|CI
         ORG   SR2_TYPE
SR3_TYPE   DS    C            ..record type 3 fragmentation
SR2_AM     DS    C            ..access method
*                             ....Q -> QSAM
*                             ....V -> VSAM
SR2_ORG    DS    C            ..organization
*                             ....K -> KSDS
SR2_FLAG   DS    C            ..error flag (contains "E")
           DS    XL4
SR2_SEQNO  DS    F            ..read sequence (cur RECFM)
*                             ....AM=Q RECFM=U -> add 1 for ea block
*                             ....AM=V -> add 1 for ea CI
*                             ......when remainder of
*                             ......XRBA/CISZ = 0
SR2_BLKSZ  DS    F            ..block size | data CISZ
*                             ....AM=Q RECFM=U -> BDW|DCBLRECL
*                             ....AM=V -> data CISZ
           ORG   SR2_BLKSZ
SR3_GAP    DS    F            SR2_RCINO - SR2_SEQNO
*                             ....AM=V ORG=KSDS
SR2_BLKCNT DS    F            ..block count
*                             ....AM=Q RECFM=U -> value of 1
*                             ....AM=V new CI -> value of 1
           ORG   SR2_BLKCNT
SR3_GAPCNT DS    F            ..gap count
*                             ....AM=V ORG=KSDS -> value of 1
SR2_RCINO  DS    F            ..relative CI number
*                             ....AM=V -> (XRBA/CISZ + 1)
SR2_XRBA   DS    D            ..VSAM XRBA
         SPACE 2
         DS    0D
         AS1LAIDA UDS=PARMLIST,PARM=3,PREFIX=HEX_
         COPY  AS3DMPRB
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,MF=D    expand AS communication area
ASABHDR  AS1MASDS ADS=ASAB,MF=D    expand AS anchor block
ASABXHDR AS1MASDS ADS=ASAB1,MF=D   expand AS anchor block extention
         SPACE 2
         IFGACB AM=VSAM       expand VSAM ACB
#ACBLEN  EQU   *-IFGACB       length of ACB
         SPACE 2
         IFGRPL AM=VSAM       expand VSAM RPL
#RPLLEN  EQU   *-IFGRPL       length of RPL
         SPACE 2
         IFGEXLST ,           expand VSAM exit list
*              EXLEODL  EQU   10   EODAD   exit addr parm length
*              EXLSYNL  EQU   15   SYNAD   exit addr parm length
*              EXLLERL  EQU   20   LERAD   exit addr parm length
*              EXLUPADL EQU   25   UPAD    exit addr parm length
*              EXLIOPL  EQU   30   IOPID   exit addr parm length
*              EXLJRNL  EQU   35   JRNAD   exit addr parm length
*              EXLOPNL  EQU   40   OPENAD  exit addr parm length
*              EXLRLWL  EQU   40   RLSWAIT exit addr parm length
*              EXLQSCL  EQU   45   QUIESCE exit addr parm length
*              EXRSRVL  EQU   48   end of list (word bndry)
         SPACE 2
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2             0=ESA 1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
&CSECT   CEEENTRY ,                                                    +
               PPA=PPPA,                                               +
               AUTO=#DSALEN,                                           +
               MAIN=YES,                                               +
               EXECOPS=YES,                                            +
               BASE=(10),                                              +
               PLIST=HOST
         DROP  RD
         USING CEEDSA,RD
         USING CEECAA,RC      EST BAR OF CAA
         LARL  R9,STATIC
         USING STATIC,R9      EST BAR OF STATIC STORAGE
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME MAIN=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPPA     CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=03,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         SPACE 2
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *         initialize DSA storage
         ST    R1,PGMR1
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear DSA storage
INIT0100 EQU   *
         MVC   LEMDEST,F2
         SPACE 1
*        initialize the SYSUT1 data set definition control block
         LA    R0,SYSUT1_#LEN
         STH   R0,SYSUT1_DSLEN
         LA    R0,SYSUT1_$DSD
         STH   R0,SYSUT1_DSID
         LA    R0,SYSUT2_BEG
         ST    R0,SYSUT1_FWDPTR    chain SYSUT1 to SYSUT2
         MVC   SYSUT1_DDNAME,=CL8'SYSUT1'    set DDNAME to SYSUT1
*        initialize the SYSUT2 data set definition control block
         LA    R0,SYSUT2_#LEN
         STH   R0,SYSUT2_DSLEN
         LA    R0,SYSUT2_$DSD
         STH   R0,SYSUT2_DSID
         XC    SYSUT2_FWDPTR,SYSUT2_FWDPTR
         SPACE 1
         OI    SYSUT2_AM,$PS            set access method QSAM
         OI    SYSUT2_ORG,$SEQ          set file organization
         OI    SYSUT2_RS,SYSUT2_$FLAT   set record structure
         OI    SYSUT2_RECFM,$FIX+$BLK   set record format
         OI    SYSUT2_IND0,SYSUT2_$FLOAD     set load intent
         MVC   SYSUT2_MAXLEN,F32        set maximum lrecl
         MVC   SYSUT2_BLKSZ,F0          clear BLKSIZE
         MVC   SYSUT2_DDNAME,=CL8'SYSUT2'    set DDNAME to SYSUT2
         SPACE 1
*        initialize the data set information control block
         MVC   DSI_DSLEN,=Y(DSI_NTRY_LEN*&DSNCNT+16)
         LA    R0,DSI_$DSI
         STH   R0,DSI_DSID
         XC    DSI_FWDPTR,DSI_FWDPTR
*        initialize misc data
         MVC   SR_EYE,=CL8'STAT REC'
         XC    STATREC1,STATREC1
         MVI   SR1_TYPE,C'1'
         XC    STATREC2,STATREC2
         MVI   SR2_TYPE,C'2'
         XC    RESA,RESA
         SPACE 1
INIT0200 EQU   *
*        load the required sub-program(s)
         CEELOAD ,                                                     +
               NAME=ASU3QFAB,                                          +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,@3QFAB           QUERY FILE ALLOC ATTR sub-pgm
         CLC   LECTOK,CEE000
         JE    INIT0210
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0210 EQU   *         load dump hex print
         CEELOAD ,                                                     +
               NAME=ASUMDHEX,                                          +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,@MDHEX           MESSAGE DUMP HEX sub-pgm
         CLC   LECTOK,CEE000
         JE    INIT0220
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0220 EQU   *         load AS control block creator
         XR    RF,RF
         CEEFETCH ,                                                    +
               NAME=ASU3I01B,                                          +
               TOKEN=FW32,                                             +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,@3I01B           AS ctl blk creator sub-pgm
         CLC   LECTOK,CEE000
         JE    INIT0224
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0224 EQU   *
*        allocate/initialize the AS control block(s)
         AS2PLIST (ASCAptr,0),                                         +
               VL,MF=(E,PLIST)
*        CALL ASU3I01B
         L     RF,@3I01B
         BASR  RE,RF     link to
         SPACE 1
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         L     R8,ASCA_@ASAB
         DROP  R8
         ST    R8,ASABptr     save addr of ASAB
         USING ASABHDR,R8
         L     R8,ASAB_@ASABX
         USING ASABXHDR,R8
         ST    R8,ASABXptr    save addr of ASABX
         DROP  R8
         SPACE 1
         CEERELES ,                                                    +
               TOKEN=FW32,                                             +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         CLC   LECTOK,CEE000
         JE    INIT0230
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
INIT0230 EQU   *
         MVC   FW31,F0
         MVC   FW32,F1
         SPACE 1
INIT9900 EQU   *
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         SPACE 2
* --------------------------------------------------------- *
* MAIN ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 AS2LTRCE
         MVC   LECTOK,CEE000
         SPACE 1
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: before OPEN of input'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
MAIN0100 AS2LTRCE
         BRAS  RE,SUBR1000    collect before OPEN
         BRAS  RE,SUBR2000    print before OPEN
         BRAS  RE,SUBR3000    dump ctl blks before OPEN
         SPACE 1
*        intialize values of the DSD for input file
         LARL  RE,EXIT0000    set default return addr
         CLI   DSI_DEV_DCLASS,C' ' Q. blank
         JE    TXT0108F            A. yes,
         CLC   DSI_DEV_DCLASS,=CL8'DASD'     Q. DASD
         JNE   MAIN0104                      A. no, bypass
         CLI   DSI_DSCB_AM,X'00'   Q. filled out
         JE    MAIN0102            A. no, bypass
         MVC   SYSUT1_AM,DSI_DSCB_AM    A. yes, set DSORG=
         J     MAIN0110
MAIN0102 EQU   *
         CLI   DSI_JFCB_AM,X'00'   Q. filled out
         JE    MAIN0104            A. no, bypass
         MVC   SYSUT1_AM,DSI_JFCB_AM    A. yes, set DSORG=
         J     MAIN0110
MAIN0104 EQU   *
         OI    SYSUT1_AM,$PS  set DSORG=
MAIN0110 EQU   *
         TM    SYSUT1_AM,$PS  Q. access method QSAM
         JNO   MAIN0120       A. no, bypass
*                             A. yes, QSAM
         MVC   SYSUT1_MAXLEN,DSI_DSCB_LRECL  set LRECL=
         MVC   SYSUT1_BLKSZ,DSI_DSCB_BLKSZ   set BLKSIZE=
         BRAS  RE,OPEN0100    open input DCB
         SPACE 1
         MVI   SR1_AM,C'Q'    set AM to QSAM
         MVI   SR2_AM,C'Q'    set AM to QSAM
         J     MAIN0190
         SPACE 1
MAIN0120 AS2LTRCE
         TM    SYSUT1_AM,$VSAM     Q. access method VSAM
         JNO   MAIN0140            A. no, bypass
*                                  A. yes, VSAM
         BRAS  RE,OPEN0200    open input ACB
         MVI   SR1_AM,C'V'    set AM to VSAM
         MVI   SR2_AM,C'V'    set AM to VSAM
         J     MAIN0190
         SPACE 1
MAIN0140 AS2LTRCE
         LARL  RE,EXIT0000    set return addr
         J     TXT0108A
         SPACE 1
MAIN0190 EQU   *
         SPACE 1
MAIN0200 AS2LTRCE
         BRAS  RE,SUBR3000    dump ctl blks after open
         SPACE 1
MAIN0300 AS2LTRCE
         BRAS  RE,OPEN0300    open output DCB
         SPACE 1
MAIN0400 AS2LTRCE
         TM    DSI_DCB_AM,$PS Q. access method QSAM
         JNO   MAIN0420       A. no, bypass
         BRAS  RE,READ0100    read record
         BRAS  RE,PROC1000    process input record
         J     MAIN0490
MAIN0420 AS2LTRCE
         TM    DSI_DCB_AM,$VSAM    Q. access method VSAM
         JNO   MAIN0440            A. no, bypass
         BRAS  RE,READ0200    read record
         LTR   R0,R0          Q. reason code = 0
         JNZ   EXIT0000       A. no, assume EOF
         BRAS  RE,PROC2000    process input record
         J     MAIN0490
MAIN0440 AS2LTRCE
         LARL  RE,EXIT0000    set return addr
         J     TXT0108B
MAIN0490 EQU   *
         J     MAIN0400
         SPACE 2
MAIN9900 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* EXIT ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 AS2LTRCE ,      close input
         OI    SYSUT1_IND2,SYSUT1_$FEOF set EOF
         TM    DSI_DCB_AM,$PS Q. access method QSAM
         JNO   EXIT0020       A. no, bypass
         BRAS  RE,CLOS0100    close file
         J     EXIT0040
EXIT0020 EQU   *
         TM    DSI_DCB_AM,$VSAM    Q. access method VSAM
         JNO   EXIT0040            A. no, bypass
         BRAS  RE,CLOS0200         close file
         J     EXIT0040
         SPACE 1
EXIT0040 EQU   *         close output
         BRAS  RE,CLOS0300    close file
         SPACE 1
EXIT9800 EQU   *
         SPACE 1
EXIT9900 EQU   *
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15),                                                +
               MF=(E,PLIST)
         SPACE 2
* --------------------------------------------------------- *
* CALLABLE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
OPEN0100 AS2LTRCE ,      open input DCB
         AS2RESTK PUSH
*        get below heap storage
         LA    R0,DCBLNGPS
         ST    R0,SYSUT1_DCBLEN    set length of DCB
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#BTLH,SYSUT1_DCBLEN,SYSUT1_@DCB,0),           +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R1,SYSUT1_@DCB
         MVC   0(DCBLNGPS,R1),MODEL_DCB copy IDCB to HEAP
         XC    DCBMACR(,R1),DCBMACR     clear MACRF=
*        intialize values of the DCB for input file
         MVC   DCBDDNAM(,R1),DSI_DDN    set DDNAME
         CLC   DSI_DEV_DCLASS,=CL8'DASD'     Q. DASD
         JNE   OPEN0110                      A. no, bypass
         MVC   DCBDSRG1(,R1),DSI_DSCB_AM     set DSORG=...
         TM    DSI_DSCB_RECFM,$FIX      Q. RECFM=F|U
         JNO   OPEN0102                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECF     A. yes,
OPEN0102 EQU   *
         TM    DSI_DSCB_RECFM,$VAR      Q. RECFM=V|U
         JNO   OPEN0104                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECV     A. yes,
OPEN0104 EQU   *
         TM    DSI_DSCB_RECFM,$BLK      Q. RECFM=.B
         JNO   OPEN0106                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECBR    A. yes,
OPEN0106 EQU   *
         TM    DSI_DSCB_RECFM,$SPN      Q. RECFM=.S
         JNO   OPEN0108                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECSB    Q. yes,
OPEN0108 EQU   *
         MVC   DCBLRECL(,R1),DSI_DSCB_LRECL+2     set LRECL=...
         MVC   DCBBLKSI(,R1),DSI_DSCB_BLKSZ+2     set BLKSIZE=...
         OI    DCBMACR1(R1),DCBMRGET+DCBMRLCG     set GET/LOCATE
         J     OPEN0120
         SPACE 1
OPEN0110 EQU   *
         MVC   DCBDSRG1(,R1),DSI_JFCB_AM     set DSORG=...
         TM    DSI_JFCB_RECFM,$FIX      Q. RECFM=F|U
         JNO   OPEN0112                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECF     A. yes,
OPEN0112 EQU   *
         TM    DSI_JFCB_RECFM,$VAR      Q. RECFM=V|U
         JNO   OPEN0114                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECV     A. yes,
OPEN0114 EQU   *
         TM    DSI_JFCB_RECFM,$BLK      Q. RECFM=.B
         JNO   OPEN0116                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECBR    A. yes,
OPEN0116 EQU   *
         TM    DSI_JFCB_RECFM,$SPN      Q. RECFM=.S
         JNO   OPEN0118                 A. no, bypass
         OI    DCBRECFM(R1),DCBRECSB    Q. yes,
OPEN0118 EQU   *
         MVC   DCBLRECL(,R1),DSI_DSCB_LRECL+2     set LRECL=...
         MVC   DCBBLKSI(,R1),DSI_DSCB_BLKSZ+2     set BLKSIZE=...
         OI    DCBMACR1(R1),DCBMRGET+DCBMRLCG     set GET/LOCATE
**       J     OPEN0120
         SPACE 1
OPEN0120 EQU   *
*        get default heap storage
         LA    R0,DCBEMINL
         ST    R0,SYSUT1_DCBELEN
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#USRH,SYSUT1_DCBELEN,SYSUT1_@DCBE,0),         +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R2,SYSUT1_@DCB
         L     R1,SYSUT1_@DCBE
         MVC   0(DCBEMINL,R1),MODEL_DCBE     copy IDCBE to HEAP
*        intialize values of the DCBE for input file
         ST    R1,DCBDCBE(,R2)     save @DCBE in DCB
         LA    R2,EXIT0000
         ST    R2,DCBEEODA(,R1)    save EOD in IDCBE
         SPACE 1
*        OPEN input DCB
         L     R7,SYSUT1_@DCB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         OPEN  ((7),(INPUT)),MODE=31,                                  +
               MF=(E,PLIST)
         ST    RF,RTNCD       save  OPEN return code R15
         C     RF,F8          Q. any error(s)
         JL    OPEN0130       A. no, bypass
         XC    RSNCD,RSNCD    clear OPEN error  code R0
         LARL  RE,EXIT0000    set return addr
         J     TXT0107E       A. yes,
OPEN0130 EQU   *
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after OPEN of IDCB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         OI    SYSUT1_IND0,SYSUT1_$FOPEN     set open flag
         OI    SYSUT1_IND0,SYSUT1_$FREAD     set read intent
         OI    SYSUT1_IND0,SYSUT1_$FSEQ      set seq access
         BRAS  RE,SUBR1000    collect after open
         BRAS  RE,SUBR2000    print after open
         SPACE 1
*        intialize values of the DSD for input file
         MVC   SYSUT1_ORG,DSI_ICF_ORG   set organization
         MVC   SYSUT1_RECFM,DSI_DCB_RECFM    set RECFM=
         MVC   SYSUT1_MAXLEN,DSI_DCB_LRECL   set LRECL=
         MVC   SYSUT1_BLKSZ,DSI_DCB_BLKSZ    set BLKSIZE=
         MVC   SYSUT1_BUFNO,DSI_DCB_BUFND    set BUFND=
         SPACE 1
OPEN0190 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
OPEN0200 AS2LTRCE ,      open input ACB
         AS2RESTK PUSH
*        get default heap storage
         LA    R0,ACBLNG
         ST    R0,SYSUT1_ACBLEN    set ACB length
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#USRH,SYSUT1_ACBLEN,SYSUT1_@VACB,0),          +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R1,SYSUT1_@VACB
         USING IFGACB,R1
         MVC   0(ACBLNG,R1),MODEL_ACB   copy ACB to HEAP
         XC    ACBMACRF,ACBMACRF   clear MACRF=
         DROP  R1
         XC    RTNCD,RTNCD    clear MODCB return code R15
         XC    RSNCD,RSNCD    clear MODCB error  code R0
         L     R2,SYSUT1_@VACB
         MODCB ACB=(2),                                                +
               DDNAME=(*,SYSUT1_DDNAME),                               +
               MACRF=(SEQ,IN),                                         +
               RMODE31=ALL,                                            +
               MF=(G,CBWAREA)
*    MACRF=
*    [ADR][CNV][KEY]
*         ADR - RBA used as search arg for ESDS | KSDS ¬RLS
*         CNV - CI access, ¬RLS
*        +KEY - KSDS | RRDS by KEY or RBA
*    [CFX|NFX]
*         CFX - match with ICI, OPEN fixes cb & i/o bufs, RLS ign
*        +NFX - OPEN does not fix cb & i/o bufs, RLS assumes
*    [DDN|DSN]
*        +DDN - RLS ign
*         DSN - RLS ign
*    [DFR|NDF]
*         DFR - deferred write, RLS ign
*        +NDF - not deferred, RLS ign
*    [DIR][SEQ][SKP]
*         DIR - direct access to ESDS, KSDS, RRDS
*        +SEQ - seq access to ESDS, KSDS, RRDS
*         SKP - skip-seq access to KSDS(FWD), RRDS
*    [ICI|NCI]
*         ICI - improved CI processing, ¬SMS/EF, RLS ign
*        +NCI - no improved CI processing
*    [IN][OUT]
*        +IN  - retrieve ESDS, KSDS, RRDS, ¬empty
*         OUT - insert new ESDS, KSDS(¬ADR), RRDS
*             - update ESDS, KSDS, RRDS
*             - delete KSDS, RRDS
*    [LEW|NLW]
*        +LEW - match with LSR, wait for exclusive control
*         NLW - match with LSR, return to appl (RC & EC)
*    [NIS|SIS]
*        +NIS - normal insert strategy, CI, CA split at 1/2
*         SIS - seq insert strategy, CI, CA split at insert point
*    [NRM|AIX]
*        +NRM - object named in DDN
*         AIX - object is alt index of path specified by DDN, ¬RLS
*    [NRS|RST]
*        +NRS - data set not reusable
*         RST - data set reusable, HURBA reset to 0
*    [NSR|LSR|GSR|RLS]
*        +NSR - non-shared resource
*         LSR - local shared resource (ea AS), use BLSR instead
*         GSR - global shared resource
*         RLS - record level sharing, ¬LDS, ¬KSDS(ADR), ¬CNV, ¬AIX
*    [NUB|UBF]
*        +NUB - VSAM manages i/o bufs, RLS req
*         UBF - user buffer managed, valid for CNV & OPTCD=MVE,
*               assumed when ICI, ¬RLS
         SPACE 1
         ST    RF,RTNCD       save MODCB return code R15
         LTR   RF,RF          Q. any errors
         JZ    OPEN0210       A. no, bypass
         XC    RSNCD,RSNCD    clear reason code
         C     RF,F4
         JNE   OPEN0202
         ST    R0,RSNCD       save MODCB error  code R0
OPEN0202 EQU   *
         LARL  RE,EXIT0000    set return addr
         J     TXT0107A       A. yes,
         SPACE 1
OPEN0210 EQU   *
*        OPEN the input ACB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         OPEN  ((2),(INPUT)),MODE=31,                                  +
               MF=(E,PLIST)
         ST    RF,VACBRC      save VSAM ACB return code R15
         LTR   RF,RF          Q. any error(s)
         JZ    OPEN0220       A. no, bypass
         SPACE 1
         XC    RTNCD,RTNCD    clear SHOWCB return code R15
         XC    RSNCD,RSNCD    clear SHOWCB error  code R0
         LA    R3,SYSUT1_VFDBK
         SHOWCB ACB=(2),                                               +
               AREA=(3),                                               +
               LENGTH=L'SYSUT1_VFDBK,                                  +
               FIELDS=(ERROR),                                         +
               MF=(G,CBWAREA)
         SPACE 1
         LTR   RF,RF          Q. any error(s)
         JZ    OPEN0212       A. no, bypass
         ST    RF,RTNCD       save SHOWCB return code R15
         ST    R0,RSNCD       save SHOWCB error  code R0
         LARL  RE,EXIT0000    set return addr
         J     TXT0107C       A. yes,
OPEN0212 EQU   *
         MVC   RTNCD,VACBRC        save OPEN return code R15
         MVC   RSNCD,SYSUT1_VFDBK  save OPEN error  code R0
         LARL  RE,EXIT0000    set return addr
         J     TXT0107D
         SPACE 1
OPEN0220 EQU   *
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after OPEN of IACB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         OI    SYSUT1_IND0,SYSUT1_$FOPEN     set open flag
         BRAS  RE,SUBR1000    collect after open
         BRAS  RE,SUBR2000    print after open
         SPACE 1
*        intialize values of the DSD for input file
         MVC   SYSUT1_ORG,DSI_ICF_ORG   set organization
         MVC   SYSUT1_RECFM,DSI_DCB_RECFM    set RECFM=
         MVC   SYSUT1_MAXLEN,DSI_DCB_LRECL   set LRECL=
         MVC   SYSUT1_BLKSZ,DSI_ACB_DCISZ    set data CISZ
*        check for valid data CISZ
         LARL  RE,EXIT0000    set return addr
         ICM   R2,15,DSI_ACB_DCISZ Q. DCISZ = 0
         JZ    TXT0108E            A. yes,
         SPACE 1
OPEN0230 AS2LTRCE
*        get default heap storage
         LA    R0,RPLLNG
         ST    R0,SYSUT1_RPL1LEN
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#USRH,SYSUT1_RPL1LEN,SYSUT1_@VRPL1,0),        +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R1,SYSUT1_@VRPL1
         USING IFGRPL,R1
         MVC   0(RPLLNG,R1),MODEL_RPL   copy RPL to HEAP
         XC    RPLOPTCD,RPLOPTCD   clear OPTCD=
         DROP  R1
         XC    RTNCD,RTNCD    clear MODCB return code R15
         XC    RSNCD,RSNCD    clear MODCB error  code R0
         L     R2,SYSUT1_@VACB     put addr of ACB in R2
         LA    R3,SYSUT1_@DBUFF    put addr of record addr in R3
         L     R7,SYSUT1_@VRPL1    put addr of RPL in R7
         TM    DSI_ICF_ORG,$KSDS   Q. KSDS
         JO    OPEN0234            A. yes, bypass
         SPACE 1
*    OPTCD=
*    [ADR|CNV|KEY]
*         ADR - addressed access to ESDS, KSDS via RBA, ¬RLS(KSDS)
*         CNV - CI access, ¬CMP, ¬RLS
*        +KEY - keyed access to KSDS, RRDS, key or RRN
*    [DIR|SEQ|SKP]
*         DIR - direct access to ESDS, KSDS, RRDS
*        +SEQ - seq access to ESDS, KSDS, RRDS
*         SKP - skip-seq access to KSDS
*    [ARD|LRD]
*        +ARD - user arg determines record
*         LRD - last record in data set, BWD required
*    [FWD|BWD]
*        +FWD - forward processing
*         BWD - backward processing
*    [ASY|SYN]
*         ASY - asynchronous access
*        +SYN - synchronous access
*    [NSP|NUP|UPD]
*         NSP - match with DIR only, VSAM remembers position
*        +NUP - no update abilities, insert is ok, VSAM will
*               not remember position
*         UPD - retrieve for update, VSAM remembers position
*    [KEQ|KGE]
*        +KEQ - key =, GET with OPTCD=(KEY,DIR), POINT with
*               OPTCD=KEY
*         KGE - key >=,
*    [FKS|GEN]
*        +FKS - full key search arg
*         GEN - generic key search arg
*    [NWAITX|WAITX]
*        +NWAITX - never take the UPAD or RLSWAIT exit
*         WAITX - when MACRF=LSR|GRS and OPTCD=SYN and UPAD exit
*                 exists, RLS and RLSWAIT exit
*    [LOC|MVE]
*         LOC - return addr of record in VSAM buffer
*        +MVE - move record to a work area
*    [CR|NRI]
*         CR  - consistent read integrity with RLS
*         NRI - no read integrity with RLS
*    [RBA|XRBA]
*        +RBA - with OPTCD=ADR, ¬SMS/EA
*        XRBA - with OPTCD=ADR, GET requires OPTCD=(DIR,ADR,XRBA)
         SPACE 1
OPEN0232 EQU   *
         MODCB RPL=(7),                                                +
               ACB=(2),                                                +
               AREA=(3),                                               +
               OPTCD=(ADR,SEQ,FWD,LOC),                                +
               MF=(G,CBWAREA)
         SPACE 1
         J     OPEN0236
         SPACE 1
OPEN0234 EQU   *
         MVI   SR2_ORG,C'K'   set organization
         MODCB RPL=(7),                                                +
               ACB=(2),                                                +
               AREA=(3),                                               +
               OPTCD=(KEY,SEQ,FWD,LOC),                                +
               MF=(G,CBWAREA)
         SPACE 1
OPEN0236 EQU   *
         ST    RF,RTNCD       save MODCB return code R15
         XC    RSNCD,RSNCD    clear reason code
         LTR   RF,RF          Q. any errors
         JZ    OPEN0240       A. no, bypass
         C     RF,F4
         JNE   OPEN0238
         ST    R0,RSNCD       save MODCB error  code R0
OPEN0238 EQU   *
         LARL  RE,EXIT0000    set return addr
         J     TXT0107B       A. yes,
         SPACE 1
OPEN0240 EQU   *
         OI    SYSUT1_IND0,SYSUT1_$FREAD     set read intent
         OI    SYSUT1_IND0,SYSUT1_$FSEQ      set seq access
         SPACE 1
OPEN0290 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
OPEN0300 AS2LTRCE ,      open output DCB
         AS2RESTK PUSH
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: before OPEN of ODCB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        get below heap storage
         LA    R0,DCBLNGPS
         ST    R0,SYSUT2_DCBLEN
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#BTLH,SYSUT2_DCBLEN,SYSUT2_@DCB,0),           +
               SL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R2,SYSUT2_@DCB
         MVC   0(DCBLNGPS,R2),MODEL_DCB copy ODCB to HEAP
         XC    DCBMACR(,R2),DCBMACR     clear MACRF=
*        intialize values of the DCB for output file
         MVC   DCBDSRG1(,R2),SYSUT2_AM       set AM=PS
         OI    DCBRECFM(R2),DCBRECF+DCBRECBR set RECFM=FB
         MVC   DCBDDNAM(,R2),SYSUT2_DDNAME   set DDNAME in DCB
         OI    DCBMACR2(R2),DCBMRPUT+DCBMRMVP     set PUT/MOVE
         MVC   DCBLRECL(,R2),SYSUT2_MAXLEN+2 set LRECL=32
         SPACE 1
*        get default heap storage
         LA    R0,DCBEMINL
         ST    R0,SYSUT2_DCBELEN
         L     R8,ASABXptr    get addr of ASABX
         USING ASABXHDR,R8    est addr to ASABX
         AS2PLIST (ASAB1_#USRH,SYSUT2_DCBELEN,SYSUT2_@DCBE,0),         +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL CEEGTST         get heap storage
         L     RF,=V(CEEGTST)
         BASR  RE,RF     link to
         SPACE 1
         L     R2,SYSUT2_@DCB
         L     R1,SYSUT2_@DCBE
         MVC   0(DCBEMINL,R1),MODEL_DCBE     copy ODCBE to HEAP
*        intialize values of the DCBE for output file
         ST    R1,DCBDCBE(,R2)     save @DCBE in DCB
         SPACE 1
*        OPEN output DCB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         OPEN  ((2),(OUTPUT)),MODE=31,                                 +
               MF=(E,PLIST)
         ST    RF,RTNCD       save return code
         C     RF,F8          Q. any error(s)
         JL    OPEN0302       A. no, bypass
         LARL  RE,EXIT0000    set return addr
         J     TXT0107F       A. yes,
OPEN0302 EQU   *
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after OPEN of ODCB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         OI    SYSUT2_IND0,SYSUT2_$FOPEN     set open flag
         OI    SYSUT2_IND0,SYSUT2_$FLOAD     set load intent
         OI    SYSUT2_IND0,SYSUT2_$FSEQ      set seq access
         SPACE 1
OPEN0390 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
READ0100 AS2LTRCE ,      get input DCB
         AS2RESTK PUSH
         L     R7,SYSUT1_@DCB get DCB addr
         GET   (7)            get next input record
*                             R7 -> DCB
*                             R1 -> return buffer
         ST    R1,SYSUT1_@DBUFF    save record addr in DSD
         LR    R4,R1          copy record addr to R4
*                             R4 -> record area
         SPACE 1
READ0190 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
READ0200 AS2LTRCE ,      get input RPL
         AS2RESTK PUSH
         L     R7,SYSUT1_@VRPL1    get RPL addr
         USING IFGRPL,R7      est addr to the RPL
         GET   RPL=(7)        get next input record
*                             R7 -> RPL
         ST    RF,VRPLRC      save VSAM RPL return code
         MVC   SYSUT1_VFDBK,RPLFDBWD    save VSAM FDBK in ctl blk
         LTR   RF,RF          Q. any error(s)
         JZ    READ0250       A. no, bypass
         SPACE 1
*        it is an error, but how bad
         ST    RF,RTNCD       save return code
         XR    R0,R0          clear reason code
         IC    R0,RPLERRCD
         ST    R0,RSNCD       save reason code
         CLI   RPLERRCD,X'04' Q. end-of-file
         JE    READ0290       A. yes, bypass
         CLI   RPLERRCD,X'16' Q. not-found
         JE    READ0290       A. yes, bypass
         LARL  RE,EXIT0000    set return addr
         J     TXT0107H
READ0250 AS2LTRCE
         L     R4,SYSUT1_@DBUFF    copy record addr to R4
*                             R4 -> record area
         MVC   SYSUT1_CURLEN,RPLRLEN    save current LRECL
         LA    R3,SYSUT1_XRBA
         SHOWCB RPL=(7),                                               +
               AREA=(3),                                               +
               LENGTH=L'SYSUT1_XRBA,                                   +
               FIELDS=(XRBA),                                          +
               MF=(G,CBWAREA)
         SPACE 1
         LTR   RF,RF          Q. any error(s)
         JZ    READ0252       A. no, bypass
         ST    RF,RTNCD       save SHOWCB return code R15
         ST    R0,RSNCD       save SHOWCB error  code R0
         LARL  RE,EXIT0000    set return addr
         J     TXT0107M       A. yes,
READ0252 EQU   *
         SPACE 1
READ0290 EQU   *
         AS2RESTK POP
         BR    RE             return
         DROP  R7
         SPACE 2
WRTE0300 AS2LTRCE ,      put output DCB
WRTE0301 EQU   *         put output statistics lrecl
         AS2RESTK PUSH
         L     R0,SR1_SEQNO
         AHI   R0,1
         ST    R0,SR1_SEQNO
         SPACE 1
         L     R2,SYSUT2_@DCB
         PUT   (2),STATREC1
         MVI   SR1_FLAG,X'00'
         J     WRTE0390
         SPACE 1
WRTE0302 EQU   *         put output statistics block
         AS2RESTK PUSH
         L     R0,SR2_SEQNO
         AHI   R0,1
         ST    R0,SR2_SEQNO
         SPACE 1
         L     R2,SYSUT2_@DCB
         PUT   (2),STATREC2
         MVI   SR2_FLAG,X'00'
         MVC   SR2_BLKCNT,F0
         SPACE 2
WRTE0303 EQU   *         put output fragmentation block
         CLI   SR2_ORG,C'K'   Q. organization = KSDS
         JNE   WRTE0390       A. no, bypass
         MVI   SR2_TYPE,C'3'
         L     R0,SR2_RCINO   CI actual location
         L     R1,SR2_SEQNO   CI desired location
         CR    R0,R1          Q. actual loc = desired loc
         JL    GAPLO          if actual < desired then actual is
*                               in front of desired location
         JH    GAPHI          if actual > desired then actual
*                               followes location desired
         J     GAPEQ          if actual = desired then CI is where it
*                               belongs
GAPLO    EQU   *
         SR    R1,R0          desired - actual
         LNR   R1,R1          convert to negative
         ST    R1,SR3_GAP     save negative gap
         J     GAPEND
GAPHI    EQU   *
         SR    R0,R1          actual - desired
         ST    R0,SR3_GAP     save positive gap
         J     GAPEND
GAPEQ    EQU   *
         MVC   SR3_GAP,F0     save zero gap
GAPEND   EQU   *
         MVC   SR3_GAPCNT,F1
         SPACE 1
         L     R2,SYSUT2_@DCB
         PUT   (2),STATREC2
         MVI   SR2_TYPE,C'2'
         MVC   SR2_BLKCNT,F0
         SPACE 1
WRTE0390 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
CLOS0100 AS2LTRCE ,      close input DCB
         AS2RESTK PUSH
         TM    SYSUT1_IND0,SYSUT1_$FOPEN     Q. open
         JNO   CLOS0190                      A. no, bypass
         SPACE 1
*        close the input DCB
         L     R7,SYSUT1_@DCB get DCB addr
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         CLOSE ((7)),MODE=31,                                          +
               MF=(E,PLIST)
         ST    RF,RTNCD       save CLOSE return code R15
         LTR   RF,RF          Q. any error(s)
         JZ    CLOS0120       A. no, bypass
         XC    RSNCD,RSNCD    save CLOSE error  code R0
         LARL  RE,CLOS0190    set return addr
         J     TXT0107J       A. yes,
         SPACE 1
CLOS0120 EQU   *
         NI    SYSUT1_IND0,255-SYSUT1_$FOPEN set closed flag
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after CLOSE of IDCB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
CLOS0190 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
CLOS0200 AS2LTRCE ,      close input ACB
         AS2RESTK PUSH
         TM    SYSUT1_IND0,SYSUT1_$FOPEN     Q. open
         JNO   CLOS0290                      A. no, bypass
         SPACE 1
*        close the input ACB
         L     R2,SYSUT1_@VACB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         CLOSE ((2)),MODE=31,                                          +
               MF=(E,PLIST)
         ST    RF,VACBRC      save VSAM ACB return code R15
         LTR   RF,RF          Q. any error(s)
         JZ    CLOS0220       A. no, bypass
         SPACE 1
         XC    RTNCD,RTNCD    clear return code
         XC    RSNCD,RSNCD    clear error  code
         LA    R3,SYSUT1_VFDBK
         SHOWCB ACB=(2),                                               +
               AREA=(3),                                               +
               LENGTH=L'SYSUT1_VFDBK,                                  +
               FIELDS=(ERROR),                                         +
               MF=(G,CBWAREA)
         SPACE 1
         LTR   RF,RF          Q. any error(s)
         JZ    CLOS0210       A. no, bypass
         ST    RF,RTNCD       save SHOWCB return code R15
         ST    R0,RSNCD       save SHOWCB error  code R0
         LARL  RE,CLOS0290    set return addr
         J     TXT0107C       A. yes,
CLOS0210 EQU   *
         MVC   RTNCD,VACBRC        save CLOSE return code R15
         MVC   RSNCD,SYSUT1_VFDBK  save CLOSE error  code R0
         LARL  RE,EXIT0040    set return addr
         J     TXT0107K
         SPACE 1
CLOS0220 EQU   *
         NI    SYSUT1_IND0,255-SYSUT1_$FOPEN set closed flag
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after CLOSE of IACB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
CLOS0230 EQU   *
         L     R1,FW32
         AHI   R1,1           make relative to 1 instead of 0
         ST    R1,FW32        save quotient, relative CI#
         MVC   SR2_BLKSZ,FW31 accum record len in CI
         MVC   SR2_BLKCNT,F1
         MVC   SR2_RCINO,FW32 relative CI#
         MVC   SR2_XRBA,DW02  init to beginning CI XRBA
         BRAS  RE,WRTE0302    go to write statistics block
         SPACE 1
CLOS0290 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
CLOS0300 AS2LTRCE ,      close output DCB
         AS2RESTK PUSH
         TM    SYSUT2_IND0,SYSUT2_$FOPEN     Q. open
         JNO   CLOS0390                      A. no, bypass
         SPACE 1
*        close the output DCB
         L     R2,SYSUT2_@DCB
         XC    PLIST(4),PLIST clear out 1st word of plist
         OI    PLIST,X'80'    set end of list
         CLOSE ((2)),MODE=31,                                          +
               MF=(E,PLIST)
         SPACE 1
         ST    RF,RTNCD       save  return code R15
         LTR   RF,RF          Q. any error(s)
         JZ    CLOS0320       A. no, bypass
         XC    RSNCD,RSNCD    clear error  code R0
         LARL  RE,CLOS0390    set return addr
         J     TXT0107L       A. yes,
         SPACE 1
CLOS0320 EQU   *
         NI    SYSUT2_IND0,255-SYSUT2_$FOPEN set closed flag
         MVC   VLEN,H30
         MVC   VTXT(30),=CL30'&CSECT.: after CLOSE of ODCB'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
CLOS0390 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
PROC1000 AS2LTRCE ,      process AM=PS records
         AS2RESTK PUSH
         L     R7,SYSUT1_@DCB           get DCB addr
         TM    DSI_DSCB_RECFM,$UND      Q. orig RECFM=U
         JO    PROC1100                 A. yes,
         TM    DSI_DSCB_RECFM,$FIX      Q. orig RECFM=F...
         JO    PROC1200                 A. yes,
         TM    DSI_DSCB_RECFM,$VAR      Q. orig RECFM=V...
         JO    PROC1300                 A. yes,
         SPACE 1
         LARL  RE,EXIT0000    set return addr
         J     TXT0108D
         SPACE 1
PROC1100 AS2LTRCE ,      orig RECFM=U
         ICM   R0,12,DCBLRECL(R7)  get length of non-LBI block
         SRL   R0,16
         ST    R0,SYSUT1_CURLEN    save current rec length
         ST    R0,SR1_LRECL   save current rec length
         MVC   SR1_RECCNT,F1  save record count
         BRAS  RE,WRTE0301    go write statistics lrecl
         J     PROC1990       go write output
         SPACE 1
PROC1200 AS2LTRCE ,      orig RECFM=F...
         TM    SYSUT1_RECFM,$UND   Q. cur RECFM=U
         JO    PROC1210            A. yes, go process
         TM    SYSUT1_RECFM,$FIX   Q. cur RECFM=F...
         JO    PROC1240            A. yes, go process
         SPACE 1
         MVC   VLEN,H31
         MVC   VTXT(31),=CL31'&CSECT.: RECFM= is invalid (2)'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         J     PROC1990       error, record bypassed
PROC1210 EQU   *         process blocks, orig RECFM=F cur RECFM=U
         ICM   R0,12,DCBLRECL(R7)  get length of non-LBI block
         SRL   R0,16
         ST    R0,SYSUT1_CURLEN    save current blk length
         ST    R0,SR2_BLKSZ   save current blk length
         SRDL  R0,32          shift blksz to dividend (R1)
         D     R0,SYSUT1_MAXLEN    blksz/lrecl
         LTR   R0,R0          Q. remainder = 0
         JZ    PROC1214       A. yes, bypass
         SPACE 1
         MVI   SR1_FLAG,C'E'  set error flag
         MVI   SR2_FLAG,C'E'  set error flag
         MVC   VLEN,H37
         MVC   VTXT(37),=CL37'&CSECT.: BLKSIZE/LRECL remainder > 0'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
PROC1214 EQU   *
         ST    R1,SR1_RECCNT  save record count
         MVC   SR1_LRECL,SYSUT1_MAXLEN  save rec length
         MVC   SR2_BLKCNT,F1
         BRAS  RE,WRTE0301    go write statistics lrecl
         BRAS  RE,WRTE0302    go write statistics block
         J     PROC1990       go to return
PROC1240 EQU   *         process records, orig RECFM=F cur RECFM=F
         ICM   R0,12,DCBLRECL(R7)  get length of record
         SRL   R0,16
         ST    R0,SYSUT1_CURLEN    save current rec length
         ST    R0,SR1_LRECL   save current rec length
         MVC   SR1_RECCNT,F1  save record count
         BRAS  RE,WRTE0301    go write statistics lrecl
         J     PROC1990       go to return
         SPACE 1
PROC1300 AS2LTRCE ,      orig RECFM=V...
         TM    SYSUT1_RECFM,$UND   Q. cur RECFM=U
         JO    PROC1310            A. yes,
         TM    SYSUT1_RECFM,$VAR   Q. cur RECFM=V...
         JO    PROC1340            A. yes,
         SPACE 1
         LARL  RE,EXIT0000    set return addr
         J     TXT0108C
         SPACE 1
PROC1310 EQU   *         process blocks, orig RECFM=V cur RECFM=U
         ICM   R0,12,DCBLRECL(R7)  get length of non-LBI block
         SRL   R0,16
         ST    R0,SYSUT1_CURLEN    save cur blk length
         ST    R0,SR2_BLKSZ        save cur blk length (BDW+block)
         MVC   SR2_BLKCNT,F1
*        loop thu block and pick up RDW's
         LR    R3,R0          copy blksz to R3 -> BRXLE comparand
         AHI   R3,-4          decrement for BDW
         XR    R2,R2          set BRXLE increment (RDW+record)
         XR    R1,R1          set BRXLE index
         AHI   R1,4           increment past BDW
PROC1320 EQU   *         loop begin
         L     R2,0(R1,R4)    pick up RDW from buffer (R4)
         SRL   R2,16
         ST    R2,SR1_LRECL   save LRECL (RDW+record)
         MVC   SR1_RECCNT,F1
         STM   R1,R3,LOOPSTK
         BRAS  RE,WRTE0301    go write statistics lrecl
         LM    R1,R3,LOOPSTK
         BRXLE R1,R2,PROC1320 go process next var-len record
         BRAS  RE,WRTE0302    go write statistics block
         J     PROC1990       go to return
PROC1340 EQU   *         process records, orig RECFM=V cur RECFM=V
         ICM   R0,12,DCBLRECL(R7)  get length of record
         SRL   R0,16
         ST    R0,SYSUT1_CURLEN    save current rec length
         ST    R0,SR1_LRECL   save current rec length
         MVC   SR1_RECCNT,F1  save record count
         BRAS  RE,WRTE0301    go write statistics lrecl
         J     PROC1990       go to return
         SPACE 1
PROC1990 EQU   *         return to read routine
         AS2RESTK POP
         BR    RE             return
         SPACE 2
PROC2000 AS2LTRCE ,      process AM=VSAM records
         AS2RESTK PUSH
*        check for beginning of CI
         CLC   SYSUT1_XRBA,D0      Q. 1st record
         JE    PROC2040            A. yes, bypass
         LG    GR1,SYSUT1_XRBA     get current XRBA
         DSGF  GR0,DSI_ACB_DCISZ   XRBA/DCISZ
         STG   GR0,DW04       save remainder
         CLC   DW04,D0        Q. remainder = 0, new CI
         JNZ   PROC2040       A. no, bypass, not a CI boundry
*        new CI processing
         AHI   R1,1           make relative to 1 instead of 0
         ST    R1,FW32        save quotient, relative CI#
         MVC   SR2_BLKSZ,FW31 accum record len in CI
         MVC   FW31,F0        clear accum record len
         MVC   SR2_BLKCNT,F1
         MVC   SR2_RCINO,FW32 relative CI#
         MVC   SR2_XRBA,DW02  init to beginning CI XRBA
         MVC   DW02,SYSUT1_XRBA    save beginning CI XRBA
         BRAS  RE,WRTE0302    go to write statistics block
PROC2040 EQU   *
*        LRECL processing
         MVC   SR1_LRECL,SYSUT1_CURLEN  save current LRECL
         L     R0,FW31
         A     R0,SR1_LRECL
         ST    R0,FW31
         MVC   SR1_RECCNT,F1  save record count
         MVC   SR1_RCINO,FW32 relative CI#
         MVC   SR1_XRBA,SYSUT1_XRBA
         BRAS  RE,WRTE0301    go write statistical lrecl
         SPACE 1
PROC2990 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
SUBR1000 AS2LTRCE
         AS2RESTK PUSH
*        call ASU3QFAB to query file allocation attributes
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,F2,SYSUT1_BEG,DSI),                         +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASU3QFAB
         L     RF,@3QFAB
         BASR  RE,RF     link to
         SPACE 1
         CLC   LECTOK,CEE000
         JE    SUBR1990
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR1990 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
SUBR2000 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASU3QFAB to list/print formated queried data
         L     R8,ASCAptr     get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,F5,SYSUT1_BEG,DSI),                         +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASU3QFAB
         L     RF,@3QFAB
         BASR  RE,RF     link to
         SPACE 1
         CLC   LECTOK,CEE000
         JE    SUBR2990
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR2990 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
SUBR3000 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
         L     R8,ASCAptr     get addr of ASCA
*        call ASUMDHEX to print the DSI
         ICM   R0,12,DSI_DSLEN
         SRL   R0,16
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F1
         MVC   DMPRB_TITLE,=CL44'Data Set Information block'
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,DSI),                              +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the DSD
         ICM   R0,12,SYSUT1_DSLEN
         SRL   R0,16
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F2
         MVC   DMPRB_TITLE,=CL44'Data Set Definition control block'
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,SYSUT1_BEG),                       +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the JFCB
         LA    R0,JFCBLGTH    length of JFCB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F3
         MVC   DMPRB_TITLE,=CL44'JOB File Control Block'
         ICM   R3,15,SYSUT1_@SJFCB Q. JFCB addr exist
         JZ    SUBR3010            A. no, bypass
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3010 AS2LTRCE
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the JFCBX
         LA    R0,JFCBLGTH    length of JFCBX
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F4
         MVC   DMPRB_TITLE,=CL44'JOB File Control Block vol(s)'
         ICM   R3,15,SYSUT1_@SJFCBX     Q. JFCBX addr exist
         JZ    SUBR3020                 A. no, bypass
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3020 AS2LTRCE
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the JFCBE
         LA    R0,JFCBLGTH    length of JFCBE
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F5
         MVC   DMPRB_TITLE,=CL44'JOB File Control Block 3800'
         ICM   R3,15,SYSUT1_@SJFCBE     Q. JFCBX addr exist
         JZ    SUBR3030                 A. no, bypass
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3030 EQU   *
         SPACE 1
SUBR3100 AS2LTRCE ,      PROCESS QSAM
         TM    SYSUT1_AM,$PS  Q. QSAM
         JNO   SUBR3200       A. no, bypass QSAM
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the DCB
         LA    R0,DCBLNGPS    length of DCB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F6
         MVC   DMPRB_TITLE,=CL44'Data Control Block'
         ICM   R3,15,SYSUT1_@DCB   Q. DCB addr exist
         JZ    SUBR3120            A. no, bypass DCB
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the DCBE
         LA    R0,DCBEMINL    length of DCBE
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F7
         MVC   DMPRB_TITLE,=CL44'Data Control Block Extended'
         ICM   R3,15,SYSUT1_@DCBE  Q. DCBE addr exist
         JZ    SUBR3120            A. no, bypass
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3120 EQU   *
         SPACE 1
SUBR3200 AS2LTRCE ,      PROCESS VSAM
         TM    SYSUT1_AM,$VSAM     Q. VSAM
         JNO   SUBR3300            A. no, bypass VSAM
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the ACB
         LA    R0,ACBLNG      length of ACB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F8
         MVC   DMPRB_TITLE,=CL44'Access method Control Block'
         ICM   R3,15,SYSUT1_@VACB  Q. ACB addr exist
         JZ    SUBR3300            A. no, bypass ACB
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
         SPACE 1
         MVC   VLEN,H9
         MVC   VTXT(9),=CL9'&CSECT.:'
         AS2PLIST (VSTR,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     link to
         SPACE 1
*        call ASUMDHEX to print the RPL1
         LA    R0,RPLLNG      length of RPL
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F9
         MVC   DMPRB_TITLE,=CL44'Request Parameter List'
         ICM   R3,15,SYSUT1_@VRPL1 Q. RPL1 addr exist
         JZ    SUBR3300            A. no, bypass RPL
         USING ASCAHDR,R8     est addr to ASCA
         AS2PLIST (ASCAHDR,AS3DMPRB,0(,3)),                            +
               VL,MF=(E,PLIST)
         DROP  R8
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,=V(CEEMSG)
         BASR  RE,RF     link to
         SPACE 1
SUBR3300 EQU   *
         SPACE 1
SUBR3990 EQU   *
         AS2RESTK POP
         BR    RE             return
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0107A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'MODCB input ACB'
         J     MSG0107E
         SPACE 1
TXT0107B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'MODCB input RPL'
         J     MSG0107E
         SPACE 1
TXT0107C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SHOWCB ACB'
         J     MSG0107E
         SPACE 1
TXT0107D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'OPEN ACB'
         J     MSG0107E
         SPACE 1
TXT0107E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'OPEN DCB'
         J     MSG0107E
         SPACE 1
TXT0107F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'OPEN DCB'
         J     MSG0107E
         SPACE 1
TXT0107G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'GET DCB'
         J     MSG0107E
         SPACE 1
TXT0107H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'GET RPL'
         J     MSG0107E
         SPACE 1
TXT0107I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'PUT DCB'
         J     MSG0107E
         SPACE 1
TXT0107J AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'CLOSE input DCB'
         J     MSG0107E
         SPACE 1
TXT0107K AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H15
         MVC   ISITXT+((3-1)*L'ISICOL)(15),=CL15'CLOSE input ACB'
         J     MSG0107E
         SPACE 1
TXT0107L AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((3-1)*L'ISICOL)(16),=CL16'CLOSE output DCB'
         J     MSG0107E
         SPACE 1
TXT0107M AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SHOWCB RPL'
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0002
         J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     ERTN0800
         SPACE 2
TXT0108A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'SYSUT1_AM'
         SPACE 1
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),SYSUT1_AM(L'SYSUT1_AM+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         J     MSG0108E
         SPACE 1
TXT0108B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'DSI_DCB_AM'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),DSI_DCB_AM(L'DSI_DCB_AM+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         J     MSG0108E
         SPACE 1
TXT0108C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((3-1)*L'ISICOL)(12),=CL12'SYSUT1_RECFM'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),SYSUT1_RECFM(L'SYSUT1_RECFM+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         J     MSG0108E
         SPACE 1
TXT0108D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H14
         MVC   ISITXT+((3-1)*L'ISICOL)(14),=CL14'DSI_DSCB_RECFM'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),DSI_DSCB_RECFM(L'DSI_DSCB_RECFM+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         J     MSG0108E
         SPACE 1
TXT0108E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H13
         MVC   ISITXT+((3-1)*L'ISICOL)(13),=CL13'DSI_ACB_DCISZ'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),DSI_ACB_DCISZ(L'DSI_ACB_DCISZ+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD02
         J     MSG0108E
         SPACE 1
TXT0108F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H14
         MVC   ISITXT+((3-1)*L'ISICOL)(14),=CL14'DSI_DEV_DCLASS'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),DSI_DEV_DCLASS
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
STATIC   DS    0D
*        COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
D0       DC    D'0'
         SPACE 1
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
F9       DC    F'9'
F32      DC    F'32'
F76      DC    F'76'
         SPACE 1
H0       DC    H'0'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H13      DC    H'13'
H14      DC    H'14'
H15      DC    H'15'
H16      DC    H'16'
H30      DC    H'30'
H31      DC    H'31'
H37      DC    H'37'
         SPACE 1
         COPY  AS3DSEQU       EQUATES FOR DSD & DSINFO
         LTORG
         SPACE 2
         DS    0D
MODEL_ACB ACB  AM=VSAM,       ACCESS METHOD CONTROL BLOCK              +
               DDNAME=DUMMY,                                           +
               RMODE31=ALL
         DS    0D
MODEL_RPL RPL  AM=VSAM        REQUEST PARMETER LIST
         SPACE 2
         DS    0D
MODEL_DCB DCB  ,              DATA CONTROL BLOCK                       +
               DCBE=MODEL_DCBE,                                        +
               DDNAME=DUMMY,                                           +
               DSORG=PS,                                               +
               MACRF=(GL)
         DS    0D
MODEL_DCBE DCBE ,             DCB EXTENSION                            +
               RMODE31=BUFF
         SPACE 2
         END
./ ADD NAME=ASUDAPND 0151-15056-19325-0910-00655-00717-00000-APLKS   16
*PROCESS RENT
         TITLE 'ASUDAPND - APPEND SOURCE TO RESULT'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* APPEND SOURCE STRING TO RESULT FIELD
*
* PURPOSE: RETURN SOURCE STRING APPENDED TO RESULT
*
*        CALL 'ASUDAPND' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR N/A
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION N/A
*       5: COUNT FIELD (NBR OF PAD CHR BEFORE APPEND)
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDAPND'
&C       SETC  ''
&I       SETA  1
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..N/A
$STATE2  EQU   X'02'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* APPEND:
*
*           RETURNS THE SOURCE STRING APPENDED TO
*           THE RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION N/A
*                          +----+
*
*                          +----+
*                          |00NN| COUNT NUMBER OF PAD CHR
*                          +----+ TO INSERT BEFORE APPEND
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|ZZZZ|LLLL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:256 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*     LLLL: LENGTH FIELD 0:32767 (2 BYTE BINARY)
*     ZZZZ: MAX RESULT FIELD LENGTH 0:32767 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES, UPPER CASE XLATE
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES, TOO MANY PATTERNS
         JL    TXT0115B       A. NO, TOO FEW PATTERNS
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* PROCESS RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. PROCESSED RESULT STRING YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 COPY SOURCE TO RESULT
MAIN2100 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,C1.TP_STR_SIZE
         JZ    MAIN2130
         SRL   R0,16
         CHI   R0,32767       Q. RESULT FIELD TOO LARGE
         JH    TXT0115D       A. YES
         L     R4,HLD1_STRT   POINT TO SOURCE
         ICM   R1,12,C2.TP_STR_LEN PICK UP EXISTING RSLT LEN
         JNZ   MAIN2120
         LA    R2,C2.TP_STR   POINT TO RESULT
         LR    R3,R0          INIT RESULT LENGTH
         IC    R5,RO_DFLT_PAD_CH   INIT PAD CHR & SOURCE LEN
         SLL   R5,24          ZERO SOURCE LENGTH
         MVCL  R2,R4          CLEAR STORAGE
MAIN2120 EQU   *
         SRL   R1,16
         XR    R3,R3               CLEAR
         ICM   R3,12,RO_COUNT      Q. PICK UP NBR PAD CHRS
         SRL   R3,16
         LR    R2,R3               OVERALL LEN = PAD LEN
         AR    R2,R1               OVERALL = + RESULT LEN
         A     R2,HLD1_LGTH        OVERALL = + SRC LEN
         CR    R0,R2               Q. RESULT LARGE ENOUGH
         JL    TXT0117A            A. NO
         LA    R5,C2.TP_STR(R1)    POINT TO TARGET
         AR    R5,R3               POINT TO TARGET + PAD
         L     R2,HLD1_LGTH   PICK UP SOURCE LENGTH
         AR    R3,R2          ADD SOURCE LENGTH TO PAD LENGTH
         AHI   R2,-1
         J     *+4+6
         MVC   0(0,R5),0(R4)
*+4+6    EQU   *
         EX    R2,*-6
         ICM   R0,12,C2.TP_STR_LEN
         SRL   R0,16
         AR    R3,R0          ADD RSLT LEN TO PAD + SRC
         STCM  R3,3,C2.TP_STR_LEN  PUT IT BACK IN RSLT LEN
MAIN2130 EQU   *
         MVI   PSTATE,$STATE2      RESULT 1 FIELD COPIED
         J     MAIN0380
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
*        J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
*        J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
*        J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
         J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
*        J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
*        J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         SPACE 1
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'0:32767'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
*        J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
*        J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
*        J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
*        J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H16      DC    H'16'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDBPOS 0133-18078-19325-0912-01009-01032-00000-APLKS   40
*PROCESS RENT
         TITLE 'ASUDBPOS - RETURN FIRST/NEXT SUBSTR POSITION'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* FIRST/NEXT POSITION
*
* PURPOSE: SCAN STRING FOR A PARTICULAR SUBSTRING AND
*          RETURN THE FIRST/NEXT POSITION WHERE FOUND
*          USING THE BOYER-MOORE METHOD.
*
*          CAN ALSO BE USED FOR CASE-INSENSITIVE STRING
*          MATCHING.  SOURCE STRING CAN BE MIXED CASE.
*          SEARCH ARGUMENT MUST BE UPPER-CASE.
*
*          Algorithm created in 1976 by Robert S. Boyer
*          and J. Strother Moore.
*
*          BOYER-MOORE method:
*            1. initialize each byte of a 256-byte table
*               with the length of the search argument.
*            2. starting at the 1st position of the
*               search argument, compute the offset to
*               the end of the search argument, which
*               should result in a position vector
*               (i.e. n-1,n-2,...0) where n=length of
*               search argument.
*            3. use the character value (upper and lower case)
*               as an offset in the 256-byte table and store
*               the position at that offset.
*               if the position in the 256-byte table is less
*               than the length of the search argument, do not
*               change the value.
*            4. loop to step 2 until you reach the end
*               of the search argument.
*
*            search argument = FUBAR  len(+5)
*                              43210
*
*              A...B...F...R...U      256-byte table
*              1   2   4   0   3
*
*                                     111111
*                            123456789012345
*            source string = THIS IS NOT A FUBAR
*            search arg    = FUBAR
*                        +5       FUBAR
*                        +5            FUBAR
*                        +4                FUBAR
*
*            1. R is not equal to blank, the numeric value
*               in the 256-byte table for blank is +5, add +5
*               to source string address, try again.
*            2. R is not equal to O, the numeric value in the
*               256-byte table for O is +5, add +5 to source
*               string address, try again.
*            3. R is not equal F, the numeric value in the
*               256-byte table for F is +4, add +4 to source
*               string address, try again.
*            4. R is equal to R, the numeric value in the
*               256-byte table for R is +0, a match may be
*               possible, compare position in source string
*               to search argument.  FUBAR is equal to FUBAR.
*               Compute the position in source and RETURN.
*               If not a match then add +1 to source string
*               address, and try again.
*
*        CALL 'ASUDBPOS' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION N/A
*       3: CASE-INSENSITIVE STRING MATCH
*       4: STRIP LEADING/TRAILING/BOTH N/A
*       5: INITIAL START POSITION
*       6: COUNT FIELD N/A
*       7: PSA LENGTH AND AREA
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDBPOS'
&C       SETC  ''
&I       SETA  2
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             WORK REG
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD4_CRSR DS    A             SRCH ARG STRING CURSOR ADDRESS
HLD4_LGTH DS    F             SRCH ARG STRING LENGTH
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..B-M SKIP VECTOR HAS BEEN CREATED
$STATE2  EQU   X'02'          ..1-BYTE SRCH ARG
$STATE3  EQU   X'03'          ..SRCH ARG LOCATED IN SOURCE
$STATE4  EQU   X'04'          ..RESULT HAS BEEN COPIED
$STATE5  EQU   X'05'          ..SOURCE HAS BEEN EXHAUSTED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
FLD1_OC  DS    CL256          INITIALIZE TO SPACE
FLD1_UC  DS    CL256          MOVE SUB-STRINGS OF SOURCE TO THIS
*                             ..AREA FOR UPPER-CASE TRANSLATION
*                             ..WHEN PERFORMING CASE-INSENSITIVE
*                             ..STRING MATCHING
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* BPOS:     FIND STRING PATTERN IN SOURCE STRING.  THE
*           SOURCE STRING IS EXAMINED FOR THE FIRST
*           OCCURRENCE OF THE STRING PATTERN STARTING AT
*           START POSITION.
*
*           THE POSITION OF THE STRING PATTERN IN THE
*           SOURCE STRING IS RETURNED IN THE RESULT
*           FIELD.  IF POSITION RETURNED IS ZERO THEN THE
*           STRING PATTERN WAS NOT FOUND.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR N/A
*
*                          +--+
*                          |OO|  OPTIONS N/A
*                          +--+
*
*                          +----+
*                          |NNNN| START POSITION
*                          +----+
*
*                          +----+
*                          |NNNN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |LLLL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*           +10 ADDRESS OF TEMPLATE LIST (5)
*
*               ADDRESS OF SUBSTR TO FIND (SEARCH ARGUMENT)
*               +--------+
*               |PTR     |
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|0004|00LL|RESULT | POSITION
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:255 (2 BYTE BINARY)
*     LLLL: LENGTH FIELD -32768:32767 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         ICM   R0,12,RO_PSA_LEN    Q. ANY PSA
         JZ    TXT0115E            A. NO
         SRL   R0,16
         CHI   R0,288              Q. PSA LONG ENOUGH
         JL    TXT0115E            A. NO
         TM    RO_OPT_FLAG,$CNTREQ Q. CONTINUATION OF PREV REQUEST
         JNO   MAIN0138            A. NO
         MVC   PSTATE,RO_INCOMING_PSTATE
         MVC   RO_START,PSA_NXT_POS
         MVC   HLD4_LGTH,PSA_ULGTH
         MVC   HLD4_CRSR,PSA_UADDR
MAIN0138 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,32767       Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
MAIN0240 EQU   *
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,2           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 N/A
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
         L     R6,SUBPARM2         REQUEST OPTIONS
         USING ASU9LA02,R6
         CLI   PSTATE,$STATE4      Q. RESULT FIELD COPIED
         JNE   MAIN0388            A. NO
         CLC   PSA_ULGTH,F1   Q. SRCH ARG LGTH > 1
         JNE   MAIN0382       A. YES, BYPASS
         MVI   RO_INCOMING_PSTATE,$STATE2    A. NO
         J     MAIN0384
MAIN0382 EQU   *
         MVI   RO_INCOMING_PSTATE,$STATE1
MAIN0384 EQU   *
         MVC   PSA_NXT_POS,FW32+L'FW32-L'PSA_NXT_POS   COPY NEW
         J     MAIN0400
MAIN0388 EQU   *
         CLI   PSTATE,$STATE5      Q. SOURCE EXHAUSTED
         JNE   MAIN0400            A. NO
         XC    PSA,PSA             A. YES, RESET PSA
         XC    RO_INCOMING_PSTATE,RO_INCOMING_PSTATE
         DROP  R6
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         SPACE 1
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER FREQUENCY VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* SCAN SOURCE STRING FOR TEMPLATE STRING PATTERN (SRCH ARG)
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE1 Q. B-M SKIP VECTOR BUILT
         JE    MAIN2400       A. YES,
         CLI   PSTATE,$STATE2 Q. 1-BYTE SRCH ARG
         JE    MAIN2500       A. YES,
         JH    MAIN0380
         SPACE 1
* --------------------------------------------------------- *
* BUILD BOYER-MOORE SKIP VECTOR
* PROCESS THE SRCH ARG
* IF $STATE0
* --------------------------------------------------------- *
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN      Q. VALID LENGTH
         JZ    TXT0115I                 A. NO,
         SRA   R0,16          Q. VALID LENGTH
         JM    MAIN2010       A. NO,
         LA    R1,C2.TP_STR
         J     MAIN2020
MAIN2010 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105F            A. NO,
         LPR   R0,R0
MAIN2020 EQU   *
         CHI   R0,255         Q. VALID LENGTH
         JH    TXT0115I       A. NO,
         ST    R0,HLD4_LGTH   SAVE LGTH OF INPUT SRCH ARG
         ST    R1,HLD4_CRSR   SAVE ADDR OF INPUT SRCH ARG
         CHI   R0,1           Q. SRCH ARG LGTH = 1
         JE    MAIN2500       A. YES, GO USE SRST
         SPACE 1
*        INIT SKIP VECTOR
         L     R6,SUBPARM2    POINT TO REQUEST OPTIONS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         MVC   PSA_BMSKIPV(1),HLD4_LGTH+L'HLD4_LGTH-1
         MVC   PSA_BMSKIPV+1(L'PSA_BMSKIPV-1),PSA_BMSKIPV
         TM    RO_OPT_FLAG,$CASE        Q. CASE-INSENSITIVE
         JNO   MAIN2022                 A. NO, BYPASS
         MVI   FLD1_OC,C' '             A. YES, INITIALIZE
         MVC   FLD1_OC+1(L'FLD1_OC-1),FLD1_OC
         SPACE 1
MAIN2022 EQU   *
*        SET LOOP CONTROL
         L     R0,HLD4_LGTH        COMPUTE OFFSET VALUE
         AHI   R0,-1               ..OF CHAR IN SRCH ARG
*                                  ..REVERSE ORDER (BACK TO FRONT)
         XR    R1,R1               SET INDEX VALUE (SRCH ARG)
         XR    R2,R2               SET INDEX VALUE (SKIP VECTOR)
*                                  ..UC & LC SRCH ARG CHAR
         L     R3,HLD4_CRSR        POINT TO SRCH ARG
         XR    R4,R4               CLEAR WORK REG
         J     MAIN2026
MAIN2024 EQU   *
         AHI   R1,1                BUMP INDEX VALUE (SRCH ARG)
MAIN2026 EQU   *
*        BUILD SKIP VECTOR
         IC    R2,0(R1,R3)         SET INDEX VALUE (SKIP VECTOR)
         IC    R4,PSA_BMSKIPV(R2)  GET SKIP VECTOR VALUE
         C     R4,HLD4_LGTH        Q. SKIP VECTOR < SRCH ARG LGTH
         JL    MAIN2034            A. YES, BYPASS, ALREADY SET
         STC   R0,PSA_BMSKIPV(R2)  SET OFFSET (UC SRCH ARG CHAR)
*                                  ..IN SKIP VECTOR
         N     R2,=A(191)          & X'BF', RESULT IS LOWER-CASE
         STC   R0,PSA_BMSKIPV(R2)  SET OFFSET (LC SRCH ARG CHAR)
*                                  ..IN SKIP VECTOR
MAIN2034 EQU   *
         BRCT  R0,MAIN2024         DECREMENT OFFSET VALUE (SRCH ARG)
*        BUILD LAST ENTRY OF SKIP VECTOR
         AHI   R1,1
         IC    R2,0(R1,R3)         SET INDEX VALUE (SKIP VECTOR)
         IC    R4,PSA_BMSKIPV(R2)  GET SKIP VECTOR VALUE
         C     R4,HLD4_LGTH        Q. SKIP VECTOR < SRCH ARG LGTH
         JL    MAIN2044            A. YES, BYPASS
         STC   R0,PSA_BMSKIPV(R2)  SET OFFSET (UC SRCH ARG CHAR)
*                                  ..IN SKIP VECTOR
*                                  ..VALUE IN R0 IS ZERO
         N     R2,=A(191)          & X'BF', RESULT IS LOWER-CASE
         STC   R0,PSA_BMSKIPV(R2)  SET OFFSET (LC SRCH ARG CHAR)
*                                  ..IN SKIP VECTOR
*                                  ..VALUE IN R0 IS ZERO
MAIN2044 EQU   *
         MVC   PSA_ULGTH,HLD4_LGTH SAVE SRCH ARG STRING LGTH
         MVC   PSA_UADDR,HLD4_CRSR SAVE SRCH ARG STRING ADDR
         MVI   PSTATE,$STATE1      BUILD OF SKIP VECTOR IS COMPLETE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* FIRST/NEXT FORWARD SEARCH OF SOURCE STRING
* IF $STATE1
* --------------------------------------------------------- *
         SPACE 1
MAIN2400 AS2LTRCE
         L     R0,HLD1_STOP   POINT TO END OF SOURCE
         L     R1,HLD4_LGTH   PICK UP LGTH OF SRCH ARG
         AHI   R1,-1
         SR    R0,R1          SUBTRACT OFF STRING LENGTH
         ST    R0,HLD2_CRSR   SAVE MAX ADDR IN SRC THAT
*                             ..SRCH ARG CAN BE FOUND
         XR    R2,R2          CHR IN SRCH ARG
         XR    R3,R3          CHR IN SOURCE
         L     R4,HLD4_CRSR   POINT TO SRCH ARG
         L     R5,HLD1_CRSR   POINT TO SOURCE
         L     R6,SUBPARM2    POINT TO REQUEST OPTIONS
         SPACE 1
MAIN2420 EQU   *
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         IC    R2,0(R1,R4)    GET LAST CHR OF SRCH ARG
         IC    R3,0(R1,R5)    GET LAST CHR OF SRC SUB-STRING
         TM    RO_OPT_FLAG,$CASE   Q. CASE-INSENSITIVE
         JNO   MAIN2422            A. NO, BYPASS
         O     R3,=A(64)           A. YES, OR X'40' UPPER-CASE
MAIN2422 EQU   *
         CR    R2,R3          Q. SAME CHR
         JE    MAIN2440       A. YES, LOOK FOR COMPLETE MATCH
         XR    R0,R0
         IC    R0,PSA_BMSKIPV(R3)  GET OFFSET IN SKIP VECTOR
         AR    R5,R0          BUMP POINTER OF SRC
         C     R5,HLD2_CRSR   Q. ENOUGH LEFT TO LOOK FOR SRCH ARG
         JH    MAIN2490       A. NO, BYPASS
         J     MAIN2420       A. YES, LOOP BACK
         SPACE 1
MAIN2440 EQU   *    MATCHING CHAR
         TM    RO_OPT_FLAG,$CASE        Q. CASE-INSENSITIVE STR MATCH
         JO    MAIN2442                 A. YES, BYPASS
         DROP  R6
         SPACE 1
*        CASE-SENSITIVE STRING MATCH
         J     *+4+6
         CLC   0(0,R4),0(R5)  Q. FOUND SRCH ARG
*+4+6    EQU   *
         EX    R1,*-6
         J     MAIN2444
         SPACE 1
MAIN2442 EQU   *
*        CASE-INSENSITIVE STRING MATCH
         J     *+4+6
         MVC   FLD1_UC(0),0(R5)    MOVE SRC TO WORK AREA
*+4+6    EQU   *
         EX    R1,*-6
         J     *+4+6
         OC    FLD1_UC(0),FLD1_OC  MAKE WORK AREA UC
*+4+6    EQU   *
         EX    R1,*-6
         J     *+4+6
         CLC   0(0,R4),FLD1_UC     Q. FOUND SRCH ARG
*+4+6    EQU   *
         EX    R1,*-6
         SPACE 1
MAIN2444 EQU   *
         JE    MAIN2480       A. YES, BYPASS, STRING MATCH
         AHI   R5,1           A. NO,
         C     R5,HLD2_CRSR   Q. ENOUGH LEFT TO LOOK FOR SRCH ARG
         JH    MAIN2490       A. NO, BYPASS
         J     MAIN2420       LOOP BACK
         SPACE 1
MAIN2480 EQU   *    MATCHING SUB-STRING
         S     R5,HLD1_STRT   COMPUTE POS
         AHI   R5,1           ..IN SRC
         ST    R5,HLD1_CRSR   SAVE POS IN SRC
         A     R5,HLD4_LGTH
         ST    R5,FW32        TEMP SAVE RO_START
         MVI   PSTATE,$STATE3 ARG HAS BEEN LOCATED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 1
MAIN2490 EQU   *    NO MATCH
         MVC   HLD1_CRSR,F0   SET POS IN SRC
         MVI   PSTATE,$STATE5 SOURCE HAS BEEN EXHAUSTED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* FIRST/NEXT FORWARD SEARCH OF SOURCE STRING
* IF $STATE2
* --------------------------------------------------------- *
         SPACE 1
MAIN2500 EQU   *    SRCH ARG IS ONLY 1 BYTE LONG
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         MVC   PSA_ULGTH,HLD4_LGTH SAVE SRCH ARG STRING LGTH
         MVC   PSA_UADDR,HLD4_CRSR SAVE SRCH ARG STRING ADDR
         DROP  R6
         SPACE 1
         L     R5,HLD1_CRSR   GET ADDR OF SRC
         L     R4,HLD1_STOP
         L     R1,HLD4_CRSR   GET ADDR OF SRCH ARG
         ICM   R0,8,0(R1)     SET SRCH ARG CHR
         SRL   R0,24
MAIN2520 EQU   *
         SRST  R4,R5          Q. FIND SRCH ARG CHR
*              R4 - ADDR OF SRC MATCHING BYTE
*              R5 - ADDR OF SRC
*              R0 - 1-BYTE SRCH ARG
         JO    MAIN2520       A. NOT YET, LOOP BACK
         JH    MAIN2490       A. NO,
         S     R4,HLD1_STRT   COMPUTE POS
         AHI   R4,1           ..IN SRC
         ST    R4,HLD1_CRSR   SAVE POS IN SRC
         AHI   R4,1
         ST    R4,FW32        TEMP SAVE RO_START
         MVI   PSTATE,$STATE3 ARG HAS BEEN LOCATED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* COPY RESULT FIELD
* IF $STATE3 OR $STATE5
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE3 Q. ARGUMENT LOCATED IN SOURCE
         JE    MAIN3040       A. YES
         CLI   PSTATE,$STATE5 Q. SOURCE EXHAUSTED
         JE    MAIN3040       A. YES
         J     MAIN0380       A. NO, GO BUMP TO NEXT TEMPLATE
         SPACE 1
MAIN3040 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R0,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    MAIN3060                 A. NO
         SRL   R0,16
         CHI   R0,4           Q. RESULT LARGE ENOUGH
         JL    TXT0115H       A. NO
         MVC   C2.TP_STR_LEN,H4
         MVC   C2.TP_STR(L'HLD1_CRSR),HLD1_CRSR
MAIN3060 EQU   *
         CLI   PSTATE,$STATE5 Q. SOURCE EXHAUSTED
         JE    MAIN0380       A. YES, GO BUMP TO NEXT TEMPLATE
         MVI   PSTATE,$STATE4 RESULT HAS BEEN MOVED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105F AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6/7-SRCH ARG'
         J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'1:32767'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         SPACE 1
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'2:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         ICM   R0,12,RO_START
         DROP  R6
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'RO_PSA_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'>=288'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         ICM   R0,12,RO_PSA_LEN
         DROP  R6
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'>=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:255'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
FM1      DC    F'-1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H256     DC    H'256'
         SPACE 2
         LTORG
         SPACE 2
         DROP  R9
         END
./ ADD NAME=ASUDCNTR 0150-15056-19325-0913-00718-00792-00000-APLKS   27
*PROCESS RENT
         TITLE 'ASUDCNTR - RETURN SOURCE CENTERED'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* CENTER STRING
*
* PURPOSE: RETURN STRING CENTERED IN RESULT
*
*        CALL 'ASUDCNTR' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDCNTR'
&C       SETC  ''
&I       SETA  1
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* CENTER:
*
*           RETURNS THE SOURCE STRING CENTERED IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         COPY  AS4LACC1
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES, TOO MANY PATTERNS
         JL    TXT0115B       A. NO, TOO FEW PATTERNS
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* CENTER SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. SCAN INPUT COMPLETE
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
MAIN2100 EQU   *
         LARL  RE,EXIT0000
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         L     R3,HLD1_CRSR   POINT TO BEGIN OF SOURCE
         L     R2,MF1         SETUP INCR VALUE
MAIN2110 EQU   *
         CLC   0(1,R4),RO_DFLT_STRIP_CH Q. STRIP CHAR
         JNE   MAIN2140       A. NO
         BRXH  R4,R2,MAIN2110 PROCESS ALL SOURCE BYTES
*                             SOURCE IS EMPTY
MAIN2140 EQU   *
         SR    R4,R3          COMPUTE LENGTH
         AHI   R4,1           ..OF SOURCE
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 2
MAIN2500 AS2LTRCE
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
*        COPY SOURCE LEN STRING TO RESULT 1 FIELD
         MVC   C2.TP_STR_LEN,H0
         ICM   R1,12,C1.TP_STR_SIZE
         JZ    MAIN2520
         SRL   R1,16
         CHI   R1,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115E       A. YES
         LR    R2,R1          COPY MAX LENGTH
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN2510
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN2510 EQU   *
         SR    R1,R4          RESULT MAX SIZE - SOURCE LEN
         JM    TXT0117A
         SRL   R1,1           DIVIDE BY 2
         MVC   C2.TP_STR_LEN,C1.TP_STR_SIZE  SAVE RESULT LENGTH
         LA    R2,C2.TP_STR(R1)    POINT TO RESULT FIELD
         AHI   R4,-1
         J     *+4+6
         MVC   0(0,R2),0(R3)  COPY SOURCE TO RESULT
*+4+6    EQU   *
         EX    R4,*-6
MAIN2520 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         COPY  AS4LACC2
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0109C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS4LACC1'
*        INSERT NUMBER VALUE (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
*        J     MSG0109E
         SPACE 1
MSG0109E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03D_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *         NUMBER STRING (NNN) IS INVALID
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'TP_STR'
         SPACE 1
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
MF1      DC    F'-1'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
H16      DC    H'16'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDDEDT 0149-15056-19325-0913-00621-00935-00000-APLKS   56
*PROCESS RENT
         TITLE 'ASUDDEDT - RETURN DE-EDITED SOURCE STRING'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* DE-EDIT SOURCE STRING GIVING RESULT
*
* PURPOSE: RETURN DE-EDITED SOURCE STRING
*
*        CALL 'ASUDDEDT' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION N/A
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDDEDT'
&C       SETC  ''
&I       SETA  1
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
$STATE0  EQU   X'00'
$STATE1  EQU   X'01'
$STATE2  EQU   X'02'
$STATE3  EQU   X'03'
$STATE4  EQU   X'04'
$STATE5  EQU   X'05'
$STATE6  EQU   X'06'
$STATE7  EQU   X'07'
$STATE8  EQU   X'08'
$STATE9  EQU   X'09'
$STATE10 EQU   X'0A'
$STATE11 EQU   X'0B'
$STATE12 EQU   X'0C'
$STATE13 EQU   X'0D'
$STATE14 EQU   X'0E'
$STATE15 EQU   X'0F'
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         AS1LAIDA UDS=WORK
         SPACE 1
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07,ASU9LA08,ASU9LA09),                   +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* DE-EDIT:
*
*           RETURNS THE DE-EDITED SOURCE STRING (NUMERIC).
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR N/A
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION N/A
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         MVC   PWA_COMDS,ASCA_COMDS     SAVE DECIMAL SEPARATOR
         MVC   PWA_COMTS,ASCA_COMTS     SAVE THOUSANDS SEPARATOR
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         TM    RO_OPT_FLAG,$UCX    Q. NEED UPPER CASE XLATE
         JNO   MAIN0240            A. NO
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL
*+4+6    EQU   *
         EX    R2,*-6              A. YES
MAIN0240 EQU   *
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. CORRECT NBR PATTERNS
         JH    TXT0115B       A. NO
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         DROP  R7
         SPACE 2
* --------------------------------------------------------- *
* DE-EDIT SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
*        SETUP SOURCE LOOP WITH BRXLE
*        R5 - INDEX REGISTER (SOURCE ADDR)
*        R6 - INCREMENT REGISTER
*        R7 - COMPARAND (END OF SOURCE)
         L     R5,HLD1_CRSR   SET BRXLE INDEX
         L     R6,F1          SET BRXLE INCREMENT
         L     R7,HLD1_STOP   SET BRXLE COMPARAND
         SPACE 1
         BRAS  RE,SCAN0100    CALL LEX ROUTINE (BYPASS WHITE SPACE)
         JZ    MAIN2100
         TM    PWA_FLAG,$EOD_ON
         JO    MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
MAIN2100 EQU   *
         BRAS  RE,SCAN0200    CALL LEX ROUTINE (EXTRACT NBR)
         J     MAIN0400       GO TERMINATE
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
SCAN0100 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         LARL  RE,EXIT0000
         AS2LA005 DELIM=WSP1VTR    BYPASS WHITE SPACE
         SPACE 1
         AS2RESTK POP
         BR    RE        RETURN
         SPACE 1
SCAN0200 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         LARL  RE,EXIT0000
         AS2LA022 DECSEP=PWA_COMDS,     DE-EDIT NUMBER                 +
               DIGIT=DIGITVTR,                                         +
               TERMSEP=TRM1VTR,                                        +
               THSSEP=PWA_COMTS,                                       +
               RSLTPTR=CTMPLATE
         SPACE 1
         AS2RESTK POP
         BR    RE        RETURN
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
*        J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
*        J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
WSP1VTR  DC    256X'00'
         ORG   WSP1VTR+X'00'       BYPASS LOW-VALUES
         DC    X'01'
         ORG   WSP1VTR+C' '        BYPASS BLANKS
         DC    X'01'
         ORG   WSP1VTR+C'$'        BYPASS CURRENCY
         DC    X'01'
         ORG   WSP1VTR+C'*'        BYPASS ASTERISK
         DC    X'01'
         ORG
         SPACE 1
DIGITVTR DC    256X'00'
         ORG   DIGITVTR+C'0'
         DC    XL10'01010101010101010101'
         ORG
         SPACE 1
TRM1VTR  DC    256X'00'
         ORG   TRM1VTR+C' '
         DC    X'01'
         ORG
         SPACE 1
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDFPOS 0177-16252-19325-0914-00986-00990-00000-APLKS   25
*PROCESS RENT
         TITLE 'ASUDFPOS - RETURN FIRST/NEXT SUBSTR POSITION'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* FIRST/NEXT POSITION
*
* PURPOSE: SCAN STRING FOR A PARTICULAR SUBSTRING AND
*          RETURN THE FIRST/NEXT POSITION WHERE FOUND.
*
*        CALL 'ASUDFPOS' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION N/A
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA
*
* --------------------------------------------------------- *
*************************************************************
*        CODE REVISION LIST
*           DATE     PROGRAMMER  DESCRIPTION
*------------------------------------------------------------
*        yyyy/mm/dd   xxxxxxxx
*        2018-07-10   LKS speed it up, replace TRT inst with
*                     SRST inst
*************************************************************
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDFPOS'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             WORK REG
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD4_CRSR DS    A             SRCH ARG STRING CURSOR ADDRESS
HLD4_LGTH DS    A             SRCH ARG STRING LENGTH
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER FREQ VECTOR HAS BEEN PROCESSED
$STATE2  EQU   X'02'          ..SCAN FOR LFUC HAS BEEN PROCESSED
$STATE3  EQU   X'03'          ..ARGUMENT LOCATED IN SOURCE
$STATE4  EQU   X'04'          ..RESULT HAS BEEN COPIED
$STATE5  EQU   X'05'          ..SOURCE HAS BEEN EXHAUSTED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* FPOS:     FIND STRING PATTERN IN SOURCE STRING.  THE
*           SOURCE STRING IS EXAMINED FOR THE FIRST
*           OCCURRENCE OF THE STRING PATTERN STARTING AT
*           START POSITION.
*
*           THE POSITION OF THE STRING PATTERN IN THE
*           SOURCE STRING IS RETURNED IN THE RESULT
*           FIELD.  IF POSITION RETURNED IS ZERO THEN THE
*           STRING PATTERN WAS NOT FOUND.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR N/A
*
*                          +--+
*                          |OO|  OPTIONS N/A
*                          +--+
*
*                          +----+
*                          |NNNN| START POSITION
*                          +----+
*
*                          +----+
*                          |NNNN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |LLLL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-------------------+
*                          |II|00LL|LFU VECTOR         |
*                          |  |    |OR                 |
*                          |  | -  |LFU VECTOR ADDRESS |
*                          +--+----+-------------------+
*
*               ADDRESS OF SUBSTR TO FIND (SEARCH ARGUMENT)
*               +--------+
*               |PTR     |
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|0004|00LL|RESULT | POSITION
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*     LLLL: LENGTH FIELD -32768:32767 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         ICM   R0,12,RO_PSA_LEN    Q. ANY PSA
         JZ    TXT0115E            A. NO
         SRL   R0,16
         CHI   R0,12               Q. PSA LONG ENOUGH
         JL    TXT0115E            A. NO
         TM    RO_OPT_FLAG,$CNTREQ Q. CONTINUATION OF PREV REQUEST
         JNO   MAIN0138            A. NO
         MVC   PSTATE,RO_INCOMING_PSTATE
         MVC   RO_START,PSA_NXT_POS
         MVC   HLD4_LGTH,PSA_ULGTH
         MVC   HLD4_CRSR,PSA_UADDR
MAIN0138 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,32767       Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
MAIN0240 EQU   *
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         LA    R0,FRQTBL
         ST    R0,FW32
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,2           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER FREQUENCY VECTOR
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
         L     R6,SUBPARM2         REQUEST OPTIONS
         USING ASU9LA02,R6
         CLI   PSTATE,$STATE4      Q. RESULT FIELD COPIED
         JNE   MAIN0384            A. NO
         MVI   RO_INCOMING_PSTATE,$STATE2
         MVC   PSA_NXT_POS,FW32+L'FW32-L'PSA_NXT_POS   COPY NEW
         J     MAIN0400
MAIN0384 EQU   *
         CLI   PSTATE,$STATE5      Q. SOURCE EXHAUSTED
         JNE   MAIN0400            A. NO
         XC    PSA,PSA             A. YES, RESET PSA
         XC    RO_INCOMING_PSTATE,RO_INCOMING_PSTATE
         DROP  R6
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         SPACE 1
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER FREQUENCY VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115F       A. NO
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN Q. VALID LENGTH
         JZ    TXT0115G            A. NO
         SRA   R0,16               Q. VALID LENGTH
         JM    MAIN1030            A. YES,
         LA    R1,C2.TP_STR
         J     MAIN1040
MAIN1030 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105E            A. NO,
         LPR   R0,R0
MAIN1040 EQU   *
         CHI   R0,256              Q. VALID LENGTH
         JNE   TXT0115G            A. NO
         ST    R1,FW32        SAVE ADDR OF USER FREQ VECTOR
         SPACE 1
         MVI   PSTATE,$STATE1 USER FREQ VECTOR HAS BEEN PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* SCAN SOURCE STRING FOR TEMPLATE STRING PATTERN (SRCH ARG)
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE2 Q. SCAN FOR LFUC COMPLETE
         JE    MAIN2400       A. YES,
         CLI   PSTATE,$STATE3 Q. ARG HAS BEEN LOCATED
         JE    MAIN2400       A. YES.
         JH    MAIN0380
         SPACE 1
* --------------------------------------------------------- *
* SCAN STRING PATTERN FOR LEAST FREQ USED CHARACTER
* PROCESS THE SRCH ARG
* IF $STATE0 OR $STATE1
* --------------------------------------------------------- *
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN      Q. VALID LENGTH
         JZ    TXT0115I                 A. NO,
         SRA   R0,16          Q. VALID LENGTH
         JM    MAIN2010       A. NO,
         LA    R1,C2.TP_STR
         J     MAIN2020
MAIN2010 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105F            A. NO,
         LPR   R0,R0
MAIN2020 EQU   *
         CHI   R0,256              Q. VALID LENGTH
         JH    TXT0115I            A. NO,
         ST    R0,HLD4_LGTH   SAVE LGTH OF INPUT SRCH ARG
         ST    R1,HLD4_CRSR   SAVE ADDR OF INPUT SRCH ARG
         SPACE 1
*        SET BRXLE LOOP CONTROL
*        R1 - INDEX VALUE
*        R2 - INCR VALUE
*        R3 - COMPARAND VALUE
         L     R3,FM1         SET COMPARAND VALUE -1
         XR    R1,R1          SET INDEX VALUE
         LA    R2,1           SET INCR VALUE
         SPACE 1
         XR    R0,R0          CLEAR FREQ OF CHAR
         XR    R4,R4          CLEAR CHAR
         MVI   BYTE28,X'FF'   PRESET FREQ OF CHAR
         L     R5,FW32        PICK UP ADDR OF FREQ VECTOR
         L     R8,HLD4_CRSR   PICK UP ADDR OF INPUT SRCH ARG
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
MAIN2040 EQU   *
**       IC    R4,C2.TP_STR(R1)    PICK UP CHAR
         IC    R4,0(R1,R8)    PICK UP CHAR (SAME AS ABOVE)
         IC    R0,0(R4,R5)    PICK UP FREQ OF CHAR
         CLM   R0,1,BYTE28    Q. LOWEST FREQ OF CHAR
         JNL   MAIN2060       A. NO, BYPASS
         STC   R0,BYTE28      SAVE LOWEST FREQ OF CHAR
         SPACE 1
         STC   R4,PSA_LFU_CHR SAVE LEAST FREQ USED CHAR
         STC   R1,PSA_LFU_OFF SAVE CHAR OFFSET
MAIN2060 EQU   *
         BRXLE R1,R2,MAIN2040
         MVC   PSA_ULGTH,HLD4_LGTH SAVE SRCH ARG STRING LGTH
         MVC   PSA_UADDR,HLD4_CRSR SAVE SRCH ARG STRING ADDR
         MVI   PSTATE,$STATE2 SCAN FOR LFUC HAS BEEN PROCESSED
         L     R8,NTMPLATE    RESTORE R8
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* FIRST/NEXT FORWARD SEARCH OF SOURCE STRING
* IF $STATE2
* --------------------------------------------------------- *
         SPACE 1
MAIN2400 AS2LTRCE
         L     R6,SUBPARM2    POINT TO REQUEST OPTIONS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         ICM   R0,8,PSA_LFU_CHR    PICK UP LFUC
         JZ    TXT0108B
         SRL   R0,24
         ICM   R1,8,PSA_LFU_OFF    PICK UP LFUC OFFSET
         SRL   R1,24
         DROP  R6
         SPACE 1
         L     R6,HLD4_CRSR   POINT TO SRCH ARG
         L     R4,HLD1_CRSR   POINT TO SOURCE
         AR    R4,R1          ADD LFUC OFFSET
         L     R2,HLD1_STOP   POINT TO END OF SOURCE
         AHI   R2,1
         L     R3,HLD4_LGTH   PICKUP LENGTH OF SRCH ARG
         SR    R2,R3          SUBT OFF LGTH OF SRCH ARG
         AR    R2,R1          ADD LFUC OFFSET
         AHI   R2,1
         ST    R2,FW32        SAVE END OF SOURCE - LGTH OF SRCH ARG
         AHI   R3,-1          MAKE LGTH READY FOR EX
         SPACE 1
MAIN2410 EQU   *
         SRST  R2,R4          Q. SCAN SOURCE FOR LFUC
*        R0 - LFU CHAR
*        R2 - END OF SOURCE +1
*        R4 - CURRENT ADDR IN SOURCE
         JO    MAIN2410       A. REPEAT
         JH    MAIN2490       A. FINISHED, NOT FOUND
*        FOUND LFUC R2= CURRENT ADDR IN SOURCE
         SR    R2,R1          ALIGN TO START OF SRCH ARG IN SOURCE
         J     *+4+6
**       CLC   0(0,R2),C2.TP_STR   Q. FIND STRING
         CLC   0(0,R2),0(R6)       Q. FIND STRING (SAME AS ABOVE)
*+4+6    EQU   *
         EX    R3,*-6
         JE    MAIN2480            A. YES
         LR    R4,R2          RESET POS IN SOURCE TO LAST MATCH
         AHI   R4,1           BUMP IT +1
         L     R2,FW32        RESTORE END OF SOURCE +1
         J     MAIN2410            A. NO,
MAIN2480 EQU   *
         S     R2,HLD1_STRT   COMPUTE POSITION
         AHI   R2,1           ..IN SOURCE FIELD
         ST    R2,HLD1_CRSR   TEMP SAVE ARG POS
         AR    R2,R3
         AHI   R2,1
         ST    R2,FW32        TEMP SAVE RO_START
         MVI   PSTATE,$STATE3 ARG HAS BEEN LOCATED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
MAIN2490 EQU   *
         MVC   HLD1_CRSR,F0   TEMP SAVE ARG POS
         MVI   PSTATE,$STATE5 SOURCE HAS BEEN EXHAUSTED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* COPY RESULT FIELD
* IF $STATE3 OR $STATE5
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE3 Q. ARGUMENT LOCATED IN SOURCE
         JE    MAIN3040       A. YES
         CLI   PSTATE,$STATE5 Q. SOURCE EXHAUSTED
         JE    MAIN3040       A. YES
         J     MAIN0380       A. NO, GO BUMP TO NEXT TEMPLATE
         SPACE 1
MAIN3040 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R0,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    MAIN3060                 A. NO
         SRL   R0,16
         CHI   R0,4           Q. RESULT LARGE ENOUGH
         JL    TXT0115H       A. NO
         MVC   C2.TP_STR_LEN,H4
         MVC   C2.TP_STR(L'HLD1_CRSR),HLD1_CRSR
MAIN3060 EQU   *
         CLI   PSTATE,$STATE5 Q. SOURCE EXHAUSTED
         JE    MAIN0380       A. YES, GO BUMP TO NEXT TEMPLATE
         MVI   PSTATE,$STATE4
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105E AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6-LFU VECTOR'
         J     MSG0105E
         SPACE 1
TXT0105F AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6/7-SRCH ARG'
         J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0108B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'PSA_LFU_CHR'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         L     R6,SUBPARM2
         USING ASU9LA02,R6    REQUEST OPTIONS
         SPACE 1
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),PSA_LFU_CHR(L'PSA_LFU_CHR+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         DROP  R6
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *         CONTAINS INVALID DATA
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'1:32767'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         SPACE 1
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'2:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1,2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         ICM   R0,12,RO_START
         DROP  R6
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'RO_PSA_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'>=12'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         ICM   R0,12,RO_PSA_LEN
         DROP  R6
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'=256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'>=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),=CL8'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
FM1      DC    F'-1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H255     DC    H'255'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDHHEX 0132-17153-19325-0914-00847-00910-00000-APLKS   50
*PROCESS RENT
         TITLE 'ASUDHHEX - RETURN HORIZONTAL HEXADECIMAL'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* HORIZONTAL HEXADECIMAL
*
* PURPOSE: CONVERT STRING TO HORIZONTAL HEXADECIMAL
*          RETURN THE CHAR/BASE16 STRINGS.
*
*        CALL 'ASUDHHEX' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR N/A
*       2: UPPER CASE TRANSLATION N/A
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
*************************************************************
*           DATE     PROGRAMMER  DESCRIPTION
*------------------------------------------------------------
*        2019/06/15   LKS  CONVERT TO TROT & TRE INST
*                          TO ELIMINATE LOOPS (AS2CH2HH)
*************************************************************
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDHHEX'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE (RESULT)
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             BAR OF PREV TEMPLATE (RESULT)
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
PTMPLATE DS    A              PREV TEMPLATE ADDRESS
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
HLD2_SIZE DS    F             RESULT-1 FIELD SIZE * 2
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..PRINTABLE TR VECTOR HAS BEEN PROCESSED
$STATE2  EQU   X'02'          ..RESULT CHAR STRING HAS BEEN COPIED
$STATE3  EQU   X'03'          ..RESULT HEX  STRING HAS BEEN COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* HHEX:     CONVERT SOURCE STRING INTO TWO RESULT STRINGS.
*           THE FIRST BEING THE PRINTABLE CHARACTER
*           REPRESENTATION OF THE SOURCE BYTES.  THE SECOND
*           BEING THE HEXADECIMAL OF THE INDIVIDUAL SOURCE
*           BYTES.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR N/A
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |NNNN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |NNNN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |LLLL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------------------------+
*                          |II|LLLL|PRINTABLE CHAR TR TABLE      |
*                          |  |    |OR                           |
*                          |  | -  |PRINTABLE CHAR TR TABLE ADDR |
*                          +--+----+-----------------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00LL|ZZZZ|RESULT | PRINTABLE CHAR
*                          +--+----+----+-------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00LL|ZZZZ|RESULT | HEXADECIMAL
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*     NNNN: COUNT FIELD UNSIGNED (2 BYTE BINARY)
*     00LL: LENGTH FIELD UNSIGNED 0:256 (2 BYTE BINARY)
*     LLLL: LENGTH FIELD SIGNED|UNSIGNED (2 BYTE BINARY)
*     ZZZZ: MAX RESULT FIELD LENGTH UNSIGNED (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,32767       Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH   SAVE SOURCE LGTH
         AHI   R2,-1
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         LA    R0,XUPTBL      EST DEFAULT PRINTABLE CHAR TR TABLE
         ST    R0,FW32
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,2           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER PRINTABLE TR VECTOR
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL PRINTABLE TR VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115E       A. NO
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN Q. VALID LENGTH
         JZ    TXT0115F            A. NO,
         SRA   R0,16               Q. VALID LENGTH
         JM    MAIN1020            A. NO,
         LA    R1,C2.TP_STR
         J     MAIN1030
MAIN1020 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105D            A. NO,
         LPR   R0,R0
MAIN1030 EQU   *
         CHI   R0,256              Q. VALID LENGTH
         JNE   TXT0115F            A. NO
         ST    R1,FW32        SAVE ADDR OF OPTIONAL TR VECTOR
         SPACE 1
         MVI   PSTATE,$STATE1 PRINTABLE TR VECTOR HAS BEEN PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* COPY SOURCE STRING TO 1ST RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE2 Q. COPY SOURCE TO 1ST RESULT
         JL    MAIN3100       A. YES
         CLI   PSTATE,$STATE2 Q. COPY SOURCE TO 2ND RESULT
         JE    MAIN3200       A. YES
         J     MAIN0380       A. NO, GO BUMP TO NEXT TEMPLATE
         SPACE 1
MAIN3100 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R4,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    TXT0115G                 A. NO,
         SRL   R4,16
         LR    R0,R4
         SLL   R0,1           RESULT-1 SIZE * 2
         ST    R0,HLD2_SIZE   SAVE RESULT-1 SIZE * 2
         CHI   R4,16383       Q. RESULT > 16383
         JH    TXT0115H       A. YES,
         C     R4,HLD1_LGTH   Q. RESULT LARGE ENOUGH
         JL    MAIN3110       A. NO, OVERFLOW
         J     MAIN3114       A. YES, BYPASS
MAIN3110 EQU   *
         MVC   C2.TP_STR_LEN,C1.TP_STR_SIZE
         J     MAIN3116
MAIN3114 EQU   *
         MVC   C2.TP_STR_LEN,HLD1_LGTH+L'HLD1_LGTH-L'C2.TP_STR_LEN
MAIN3116 EQU   *
         XGR   R0,R0          CLEAR FOR MVCOS INST
         LA    R3,C2.TP_STR   GET RESULT FIELD ADDR
         L     R5,HLD1_CRSR   GET SOURCE FIELD ADDR
MAIN3118 EQU   *
         MVCOS 0(R3),0(R5),R4 Q. COPY SOURCE CHARS TO RESULT
         JZ    MAIN3120       A. ALL DONE, YES
         AHI   R3,4096        ..RESULT FIELD ADDR
         AHI   R5,4096        ..SOURCE FIELD ADDR
         AHI   R4,-4096       ..RESULT FIELD LENGTH
         J     MAIN3118       A. ALL DONE, NO
MAIN3120 EQU   *
         MVI   PSTATE,$STATE2 SOURCE HAS BEEN MOVED TO RESULT
         ST    R7,PTMPLATE    SAVE ADDR OF PREVIOUS RESULT STRING
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* CONVERT 1ST RESULT STRING TO HEXADECIMAL STRING AND COPY
* TO THE 2ND RESULT STRING
* AND TR 1ST RESULT STRING TO PRINTABLE CHARACTERS
* --------------------------------------------------------- *
         SPACE 1
MAIN3200 EQU   *
         MVC   C2.TP_STR_LEN,H0
         ICM   R3,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    TXT0115G                 A. NO,
         SRL   R3,16          SIZE OF RESULT-2
         C     R3,HLD2_SIZE   Q. RESULT-2 SIZE LARGE ENOUGH
         JL    TXT0117B       A. NO, OVERFLOW
         SPACE 1
MAIN3210 EQU   *
         L     R8,PTMPLATE    RESTORE PREVIOUS RESULT STRING
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
P1       USING ASU9LA06,P.TP_PAT_PFX+L'P.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P1.TP_STR_SIZE+L'P1.TP_STR_SIZE
         SPACE 1
         LA    R4,P2.TP_STR   POINT TO PREV RESULT STRING
         LA    R2,C2.TP_STR   POINT TO CURR RESULT STRING
         ICM   R3,12,P2.TP_STR_LEN      GET PREV RESULT STRING LGTH
         SRL   R3,16
         AS2CH2HH R2,R4,MF=C
         SPACE 1
         LA    R0,C'!'        LOAD UNLIKELY STOP CHARACTER X'5A'
         LA    R1,XUPTBL      POINT TO TRANSLATE TABLE
         LA    R2,P2.TP_STR   POINT TO RESULT-1 FIELD
         ICM   R3,12,P2.TP_STR_LEN
         SRL   R3,16
MAIN3212 EQU   *
         TRE   R2,R1          Q. TRANSLATE RESULT-1 TO PRINTABLE
         JO    MAIN3212       A. FINISHED, NO
         JZ    MAIN3214       A. FINISHED, YES
         AHI   R2,1           A. STOP CHARACTER FOUND
         AHI   R3,-1
         J     MAIN3212       POINT PAST AND CONTINUE LOOP
MAIN3214 EQU   *
         SPACE 1
MAIN3230 EQU   *
         MVI   PSTATE,$STATE3 HEXADECIMAL HAS BEEN MOVED TO RESULT
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  P2,P1,P
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H14
         MVC   ISITXT+((5-1)*L'ISICOL)(14),=CL14'6-XLATE VECTOR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'1:32767'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'3:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'=256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'>0'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((7-1)*L'ISICOL)(6),=CL6'>16383'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RESULT-1'
         J     MSG0117W
         SPACE 1
TXT0117B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RESULT-2'
         SPACE 1
**       J     MSG0117W
         SPACE 1
MSG0117W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0001
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H14      DC    H'14'
H16      DC    H'16'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         AS2CH2HH MF=STATIC
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDJSTF 0155-15056-19326-1136-00790-00822-00000-APLKS   59
*PROCESS RENT
         TITLE 'ASUDJSTF - RETURN SOURCE JUSTIFIED'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* JUSTIFY STRING
*
* PURPOSE: RETURN JUSTIFIED SOURCE STRING
*
*        CALL 'ASUDJSTF' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION N/A
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDJSTF'
&C       SETC  ''
&I       SETA  2
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 1
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         AIF   ('&SYSPARM' EQ 'PKG').ASM0002
         SPACE 1
@COUNT   DS    A              06 - COUNT (ASUDSCNT)
.ASM0002 ANOP
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
         DS    F
*        INPUT SOURCE FOR CALL TO COUNT
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
LSR1_RSLT_TXT EQU   *,12,C'X'
LGTH     DS    F
CHARS    DS    F
WORDS    DS    F
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR2_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR2_
LSR2_RSLT_TXT EQU   *,512,C'X'
         DS    XL512
         SPACE 1
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 1
         AS2EPA MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* JUSTIFY:
*
*           RETURNS THE SOURCE STRING JUSTIFIED IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+---------------------+
*                          |II|00LL|DELIM VECTOR         |
*                          |  |    |OR                   |
*                          |  | -  |DELIM VECTOR ADDRESS |
*                          +--+----+---------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,1           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115D       A. NO
         SPACE 1
         MVI   PSTATE,$STATE1 USER DELIMITER LIST PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* JUSTIFY SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. SCAN INPUT COMPLETE
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
         AIF   ('&SYSPARM' EQ 'PKG').ASM0003
         MVC   CSV1_PGMNME,=CL8'ASUDSCNT'
         AS2EPA MF=E
         ST    RF,@COUNT
.ASM0003 ANOP
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         MVC   PLIST+((2-1)*4),SUBPARM2 SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H12
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         MVI   LSR2_TP_PAT_TYPE,LSR2_$RSTR
         MVC   LSR2_TP_STR_SIZE,H512
         MVC   LSR2_TP_STR_LEN,H0
         SPACE 1
         CLI   PSTATE,$STATE1 Q. USER DELIMITER LIST PROCESSED
         JE    MAIN2120       A. YES
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((5-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((6-1)*4),X'80'
         J     MAIN2140
MAIN2120 EQU   *
         LA    R0,F3
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF USER DELIM LIST
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((7-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((7-1)*4),X'80'
MAIN2140 EQU   *
         LA    R1,PLIST
*        CALL  ASUDSCNT
         L     RF,@COUNT
         BASR  RE,RF     LINK TO
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,15,WORDS
         AHI   R0,-1
         ST    R0,FW32        SAVE NBR_OF_GAPS
         SPACE 2
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN2180
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115E       A. YES
         MVC   FW21,CHARS
         LR    R0,R2
         S     R0,FW21
         SRDA  R0,32
         D     R0,FW32        COMPUTE NBR OF PAD CHAR IN THE GAPS
*        R0    REMAINDER - CONTAINS NBR OF TRAILING PAD CHARS
*        R1    NBR OF PAD CHAR IN THE GAPS
         ST    R1,FW31
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         DROP  R6
         AHI   R2,-2
         JM    MAIN2150
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
         SPACE 1
MAIN2150 EQU   *
         MVC   FW22,WORDS
         AS2LACSV COUNT=FW22,                                          +
               SRCPTR=HLD1_STRT,                                       +
               VECTOR=LSR2_RSLT_TXT,                                   +
               TARGET=C2.TP_STR,                                       +
               TGTLEN=C1.TP_STR_SIZE,                                  +
               GAPSZ=FW31
         MVC   C2.TP_STR_LEN,C1.TP_STR_SIZE
MAIN2180 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
*        dynamically acquire the module EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
         J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117Q AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2LACSV'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         AIF   ('&SYSPARM' NE 'PKG').ASM0004
         SPACE 1
@COUNT   DC    V(ASUDSCNT)    06 - COUNT (ASUDSCNT)
.ASM0004 ANOP
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
         SPACE 1
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H28      DC    H'28'
H64      DC    H'64'
H512     DC    H'512'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDLEFT 0141-15056-19325-0915-00717-00790-00000-APLKS   52
*PROCESS RENT
         TITLE 'ASUDLEFT - RETURN SOURCE LEFT JUSTIFIED'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* LEFT JUSTIFY STRING
*
* PURPOSE: RETURN STRING LEFT JUSTIFIED IN RESULT
*
*        CALL 'ASUDLEFT' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDLEFT'
&C       SETC  ''
&I       SETA  1
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* LEFT:
*
*           RETURNS THE SOURCE STRING LEFT JUSTIFIED IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         COPY  AS4LACC1
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* LEFT JUSTIFY SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. SCAN INPUT COMPLETE
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
MAIN2100 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         LARL  RE,EXIT0000
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         L     R3,HLD1_CRSR   POINT TO BEGIN OF SOURCE
         L     R2,MF1         SETUP INCR VALUE
MAIN2110 EQU   *
         CLC   0(1,R4),RO_DFLT_STRIP_CH Q. STRIP CHAR
         JNE   MAIN2140       A. NO
         BRXH  R4,R2,MAIN2110 PROCESS ALL SOURCE BYTES
*                             SOURCE IS EMPTY
MAIN2140 EQU   *
         SR    R4,R3          COMPUTE LENGTH
         AHI   R4,1           ..OF SOURCE
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 2
MAIN2500 AS2LTRCE
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
*        COPY SOURCE LEN STRING TO RESULT 1 FIELD
         MVC   C2.TP_STR_LEN,H0
         ICM   R1,12,C1.TP_STR_SIZE
         JZ    MAIN2520
         SRL   R1,16
         CHI   R1,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115E       A. YES
         LR    R2,R1          COPY MAX LENGTH
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN2510
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN2510 EQU   *
         SR    R1,R4          RESULT MAX SIZE - SOURCE LEN
         JM    TXT0117A
         MVC   C2.TP_STR_LEN,C1.TP_STR_SIZE  SAVE RESULT LENGTH
         AHI   R4,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R3)  COPY SOURCE TO RESULT
*+4+6    EQU   *
         EX    R4,*-6
MAIN2520 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         COPY  AS4LACC2
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0109C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS4LACC1'
**       J     MSG0109E
         SPACE 1
MSG0109E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *         BRANCH INDEX (NNN) IS INVALID
*        INSERT NUMBER VALUE (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
MF1      DC    F'-1'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
H16      DC    H'16'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDLPOS 0150-15133-19325-0916-00997-00984-00000-APLKS   48
*PROCESS RENT
         TITLE 'ASUDLPOS - RETURN LAST/PREV SUBSTRING POSITION'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* LAST/PREVIOUS POSITION
*
* PURPOSE: SCAN STRING FOR A PARTICULAR SUBSTRING AND
*          RETURN THE LAST/PREVIOUS POSITION WHERE FOUND.
*
*        CALL 'ASUDLPOS' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR N/A
*       2: UPPER CASE TRANSLATION N/A
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDLPOS'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             WORK REG
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD4_CRSR DS    A             SRCH ARG STRING CURSOR ADDRESS
HLD4_LGTH DS    A             SRCH ARG STRING LENGTH
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER FREQ VECTOR HAS BEEN PROCESSED
$STATE2  EQU   X'02'          ..SCAN FOR LFUC HAS BEEN PROCESSED
$STATE3  EQU   X'03'          ..ARGUMENT LOCATED IN SOURCE
$STATE4  EQU   X'04'          ..RESULT HAS BEEN COPIED
$STATE5  EQU   X'05'          ..SOURCE HAS BEEN EXHAUSTED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
TRT1_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* LPOS:     FIND STRING PATTERN IN SOURCE STRING.  THE
*           SOURCE STRING IS EXAMINED FOR THE PREVIOUS
*           OCCURRENCE OF THE STRING PATTERN STARTING AT
*           THE LAST/PREVIOUS POSITION.
*
*           THE POSITION OF THE STRING PATTERN IN THE
*           SOURCE STRING IS RETURNED IN THE RESULT
*           FIELD.  IF POSITION RETURNED IS ZERO THEN THE
*           STRING PATTERN WAS NOT FOUND.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR N/A
*
*                          +--+
*                          |OO|  OPTIONS N/A
*                          +--+
*
*                          +----+
*                          |NNNN| START POSITION
*                          +----+
*
*                          +----+
*                          |NNNN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |LLLL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-------------------+
*                          |II|00LL|LFU VECTOR         |
*                          |  |    |OR                 |
*                          |  | -  |LFU VECTOR ADDRESS |
*                          +--+----+-------------------+
*
*               ADDRESS OF SUBSTR TO FIND (SEARCH ARGUMENT)
*               +--------+
*               |PTR     |
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|0004|00LL|RESULT | POSITION
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*     LLLL: LENGTH FIELD -32768:32767 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         ICM   R0,12,RO_PSA_LEN    Q. ANY PSA
         JZ    TXT0115E            A. NO
         SRL   R0,16
         CHI   R0,8                Q. PSA LONG ENOUGH
         JL    TXT0115E            A. NO
         TM    RO_OPT_FLAG,$CNTREQ Q. CONTINUATION OF PREV REQUEST
         JNO   MAIN0138            A. NO
         MVC   PSTATE,RO_INCOMING_PSTATE
         MVC   RO_START,PSA_NXT_POS
         MVC   HLD4_LGTH,PSA_ULGTH
         MVC   HLD4_CRSR,PSA_UADDR
MAIN0138 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,32767       Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
MAIN0240 EQU   *
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         AR    R1,R2          STOP = STRT+LGTH-1
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0284       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_STRT
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
         J     MAIN0290
MAIN0284 EQU   *
         MVC   HLD1_CRSR,HLD1_STOP CURSOR = END
MAIN0290 EQU   *
         LA    R0,FRQTBL
         ST    R0,FW32
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,2           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER FREQUENCY VECTOR
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
         L     R6,SUBPARM2         REQUEST OPTIONS
         USING ASU9LA02,R6
         CLI   PSTATE,$STATE4      Q. RESULT FIELD COPIED
         JNE   MAIN0384            A. NO
         MVI   RO_INCOMING_PSTATE,$STATE2
         L     R0,FW32             PICK UP CRSR POS OF FND STR
         AHI   R0,-1
         STCM  R0,3,PSA_NXT_POS    SAVE NEXT RO_START
         J     MAIN0400
MAIN0384 EQU   *
         CLI   PSTATE,$STATE5      Q. SOURCE EXHAUSTED
         JNE   MAIN0400            A. NO
         XC    PSA,PSA             A. YES, RESET PSA
         XC    RO_INCOMING_PSTATE,RO_INCOMING_PSTATE
         DROP  R6
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER FREQUENCY VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115F       A. NO
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN Q. VALID LENGTH
         JZ    TXT0115G            A. NO
         SRA   R0,16               Q. VALID LENGTH
         JM    MAIN1030            A. YES,
         LA    R1,C2.TP_STR
         J     MAIN1040
MAIN1030 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105E            A. NO,
         LPR   R0,R0
MAIN1040 EQU   *
         CHI   R0,256              Q. VALID LENGTH
         JNE   TXT0115G            A. NO
         ST    R1,FW32        SAVE ADDR OF USER FREQ VECTOR
         SPACE 1
         MVI   PSTATE,$STATE1 USER FREQ VECTOR HAS BEEN PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* SCAN SOURCE STRING FOR TEMPLATE STRING PATTERN (SRCH ARG)
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE2 Q. SCAN FOR LFUC COMPLETE
         JE    MAIN2400       A. YES,
         CLI   PSTATE,$STATE3 Q. ARG HAS BEEN LOCATED
         JE    MAIN2400       A. YES.
         JH    MAIN0380
         SPACE 1
* --------------------------------------------------------- *
* SCAN STRING PATTERN FOR LEAST FREQ USED CHARACTER
* PROCESS THE SRCH ARG
* IF $STATE0 OR $STATE1
* --------------------------------------------------------- *
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN      Q. VALID LENGTH
         JZ    TXT0115I                 A. NO,
         SRA   R0,16          Q. VALID LENGTH
         JM    MAIN2010       A. NO,
         LA    R1,C2.TP_STR
         J     MAIN2020
MAIN2010 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105F            A. NO,
         LPR   R0,R0
MAIN2020 EQU   *
         CHI   R0,256              Q. VALID LENGTH
         JH    TXT0115I            A. NO,
         ST    R0,HLD4_LGTH   SAVE LGTH OF INPUT SRCH ARG
         ST    R1,HLD4_CRSR   SAVE ADDR OF INPUT SRCH ARG
         SPACE 1
*        SET BRXLE LOOP CONTROL
*        R1 - INDEX VALUE
*        R2 - INCR VALUE
*        R3 - COMPARAND VALUE
         L     R3,FM1         SET COMPARAND VALUE -1
         XR    R1,R1          SET INDEX VALUE
         LA    R2,1           SET INCR VALUE
         SPACE 1
         XR    R0,R0          CLEAR FREQ OF CHAR
         XR    R4,R4          CLEAR CHAR
         MVI   BYTE28,X'FF'   PRESET FREQ OF CHAR
         L     R5,FW32        PICK UP ADDR OF FREQ VECTOR
         L     R8,HLD4_CRSR   PICK UP ADDR OF INPUT SRCH ARG
         L     R6,SUBPARM2    POINT TO REQUEST OPTIONS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
MAIN2040 EQU   *
**       IC    R4,C2.TP_STR(R1)    PICK UP CHAR
         IC    R4,0(R1,R8)    PICK UP CHAR (SAME AS ABOVE)
         IC    R0,0(R4,R5)    PICK UP FREQ OF CHAR
         CLM   R0,1,BYTE28    Q. LOWEST FREQ OF CHAR
         JNL   MAIN2060       A. NO, BYPASS
         STC   R0,BYTE28      SAVE LOWEST FREQ OF CHAR
         SPACE 1
         STC   R4,PSA_LFU_CHR SAVE LEAST FREQ USED CHAR
         STC   R1,PSA_LFU_OFF SAVE CHAR OFFSET
MAIN2060 EQU   *
         BRXLE R1,R2,MAIN2040
         MVC   PSA_ULGTH,HLD4_LGTH SAVE SRCH ARG STRING LGTH
         MVC   PSA_UADDR,HLD4_CRSR SAVE SRCH ARG STRING ADDR
         MVI   PSTATE,$STATE2 SCAN FOR LFUC HAS BEEN PROCESSED
         L     R8,NTMPLATE    RESTORE R8
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* LAST/PREVIOUS BACKWARD SEARCH OF SOURCE STRING
* IF $STATE2
* --------------------------------------------------------- *
         SPACE 1
MAIN2400 AS2LTRCE
         XC    TRT1_VECTOR,TRT1_VECTOR
         L     R6,SUBPARM2    POINT TO REQUEST OPTIONS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         ICM   R1,8,PSA_LFU_CHR    PICK UP LEAST FREQ USED CHAR
         JZ    TXT0108B
         SRL   R1,24
         STC   R1,TRT1_VECTOR(R1)  SAVE IN TRT VECTOR
         ICM   R2,8,PSA_LFU_OFF    PICK UP LFU CHAR OFFSET
         SRL   R2,24
         DROP  R6
         SPACE 1
         L     R1,HLD1_CRSR   POINT TO SOURCE
         L     R0,HLD1_STRT   POINT TO BEG OF SOURCE
         L     R3,HLD4_LGTH   PICK UP LGTH OF SRCH ARG
         AHI   R3,-1
         AR    R0,R2          ADD BACK LFU CHAR OFFSET
         ST    R0,FW32        SAVE ADDR OF SRC LAST BYTE
         LR    R0,R2          SAVE LFU CHAR OFFSET
MAIN2420 EQU   *
         LR    R2,R1          POINT TO SOURCE
         S     R2,FW32        Q. COMPUTE REMAINING SRC LENGTH
         JM    MAIN2490       A. YES, FINISHED
         CHI   R2,255         Q. EXEC LENGTH > 255
         JNH   MAIN2460       A. NO
         LHI   R2,255         A. YES, OVERRIDE
MAIN2460 EQU   *
         J     *+4+6
         TRTR  0(0,R1),TRT1_VECTOR A. FIND CHAR
*              R2 - MATCHING BYTE
*              R1 - ADDR OF MATCHING BYTE
*              CC 0 -> JE|JZ ALL ACCESSED FUNCT BYTES WERE ZERO
*              CC 1 -> JL|JM NONZERO FUNCT BYTE BEFORE END
*              CC 2 -> JH|JP NONZERO FUNCT BYTE AT END
*+4+6    EQU   *
         EX    R2,*-6
         JZ    MAIN2470            A. NO HITS
         LR    R2,R1
         SR    R2,R0          ALIGN TO START OF STRING
         L     R6,HLD4_CRSR   POINT TO SRCH ARG
         J     *+4+6
**       CLC   0(0,R2),C2.TP_STR   Q. FIND STRING
         CLC   0(0,R2),0(R6)       Q. FIND STRING (SAME AS ABOVE)
*+4+6    EQU   *
         EX    R3,*-6
         JE    MAIN2480            A. YES
         AHI   R1,1                A. NO
         J     MAIN2420
MAIN2470 EQU   *
         SR    R1,R2          BUMP START ADDR
         AHI   R1,-1
         J     MAIN2420
MAIN2480 EQU   *
         LR    R1,R2          KEEP TEMP CRSR ADDR
         S     R2,HLD1_STRT   COMPUTE POS IN SOURCE
         AHI   R2,1           ..FIELD
         ST    R2,FW32        ..SAVE POS OF SRCH STR IN SRC
*                             ..TEMP SAVE RO_START
         AHI   R1,-1
         ST    R1,HLD1_CRSR   SAVE NEW CURSOR POS
         MVI   PSTATE,$STATE3 ARG HAS BEEN LOCATED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
MAIN2490 EQU   *
         MVC   FW32,F0        SET RESULT VALUE
         MVI   PSTATE,$STATE5 SOURCE HAS BEEN EXHAUSTED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* COPY RESULT FIELD
* IF $STATE3 OR $STATE5
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE3 Q. ARGUMENT LOCATED IN SOURCE
         JE    MAIN3040       A. YES
         CLI   PSTATE,$STATE5 Q. SOURCE EXHAUSTED
         JE    MAIN3040       A. YES
         J     MAIN0380       A. NO, GO BUMP TO NEXT TEMPLATE
         SPACE 1
MAIN3040 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R0,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    MAIN3060                 A. NO
         SRL   R0,16
         CHI   R0,4           Q. RESULT LARGE ENOUGH
         JL    TXT0115H       A. NO
         MVC   C2.TP_STR_LEN,H4
         MVC   C2.TP_STR(L'FW32),FW32
MAIN3060 EQU   *
         CLI   PSTATE,$STATE5 Q. SOURCE EXHAUSTED
         JE    MAIN0380       A. YES, GO BUMP TO NEXT TEMPLATE
         MVI   PSTATE,$STATE4
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105E AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6-LFU VECTOR'
         J     MSG0105E
         SPACE 1
TXT0105F AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6/7-SRCH ARG'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0108B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'PSA_LFU_CHR'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         L     R6,SUBPARM2
         USING ASU9LA02,R6    REQUEST OPTIONS
         SPACE 1
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),PSA_LFU_CHR(L'PSA_LFU_CHR+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         DROP  R6
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *         CONTAINS INVALID DATA
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'1:32767'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         SPACE 1
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'2:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1,2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
         ICM   R0,12,RO_START
         DROP  R6
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'RO_PSA_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'>=12'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         ICM   R0,12,RO_PSA_LEN
         DROP  R6
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'=256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'>=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
FM1      DC    F'-1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H28      DC    H'28'
H32767   DC    H'32767'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDRGHT 0140-15056-19325-0917-00718-00794-00000-APLKS   13
*PROCESS RENT
         TITLE 'ASUDRGHT - RETURN SOURCE RIGHT JUSTIFIED'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* RIGHT JUSTIFY STRING
*
* PURPOSE: RETURN STRING RIGHT JUSTIFIED IN RESULT
*
*        CALL 'ASUDRGHT' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDRGHT'
&C       SETC  ''
&I       SETA  1
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* RIGHT:
*
*           RETURNS THE SOURCE STRING RIGHT JUSTIFIED IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         COPY  AS4LACC1
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* RIGHT JUSTIFY SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. SCAN INPUT COMPLETE
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
MAIN2100 EQU   *
         LARL  RE,EXIT0000
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         L     R3,HLD1_CRSR   POINT TO BEGIN OF SOURCE
         L     R2,MF1         SETUP INCR VALUE
MAIN2110 EQU   *
         CLC   0(1,R4),RO_DFLT_STRIP_CH Q. STRIP CHAR
         JNE   MAIN2140       A. NO
         BRXH  R4,R2,MAIN2110 PROCESS ALL SOURCE BYTES
*                             SOURCE IS EMPTY
MAIN2140 EQU   *
         SR    R4,R3          COMPUTE LENGTH
         AHI   R4,1           ..OF SOURCE
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 2
MAIN2500 AS2LTRCE
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
*        COPY SOURCE LEN STRING TO RESULT 1 FIELD
         MVC   C2.TP_STR_LEN,H0
         ICM   R1,12,C1.TP_STR_SIZE
         JZ    MAIN2520
         SRL   R1,16
         CHI   R1,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115E       A. YES
         LR    R2,R1          COPY MAX LENGTH
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         DROP  R6
         AHI   R2,-2
         JM    MAIN2510
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN2510 EQU   *
         LR    R2,R1          COPY MAX LENGTH
         SR    R2,R4          RESULT MAX SIZE - SOURCE LEN
         JM    TXT0117A
         MVC   C2.TP_STR_LEN,C1.TP_STR_SIZE  SAVE RESULT LENGTH
         LA    R2,C2.TP_STR
         AR    R2,R1
         SR    R2,R4
         AHI   R4,-1
         J     *+4+6
         MVC   0(0,R2),0(R3)  COPY SOURCE TO RESULT
*+4+6    EQU   *
         EX    R4,*-6
MAIN2520 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         COPY  AS4LACC2
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0109C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS4LACC1'
**       J     MSG0109E
         SPACE 1
MSG0109E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03D_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *         BRANCH INDEX (NNN) IS INVALID
*        INSERT NUMBER VALUE (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT BRANCH INDEX (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
MF1      DC    F'-1'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
H16      DC    H'16'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSCNT 0146-15056-19325-0917-00839-00901-00000-APLKS   39
*PROCESS RENT
         TITLE 'ASUDSCNT - RETURN CHARACTER AND WORD COUNT'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* STRING COUNT
*
* PURPOSE: SCAN STRING AND RETURN LENGTH OF SOURCE,
*          CHARACTER AND WORD COUNT.  (OPTIONAL) 2ND
*          RESULT FIELD WILL CONTAIN THE (OFFSET,LENGTH)
*          OF EACH DELIMITER DELIMITED WORD IN THE
*          SOURCE STRING.
*
*        CALL 'ASUDSCNT' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION N/A
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSCNT'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
$STATE4  EQU   X'04'          ..RESULT 2 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
CHR_CNT  DS    F
WRD_CNT  DS    F
HLDFLD1@ DS    A              FLD1_VECTOR PTR
HLDFLD2@ DS    A              FLD1_VECTOR END ADDR
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
FLD1_VECTOR DS    XL512       WILL HOLD 128 FIELD REFERENCES
FLD1_VECTOR_END EQU   *-1     EA FIELD REF: OFFSET(2),LENGTH(2)
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* COUNT:
*
*           RETURNS THE LENGTH OF SOURCE STRING, AND
*           THE NUMBER OF CHARACTERS AND WORDS IN THE
*           SOURCE STRING.
*           (OPTIONAL) A VECTOR CONTAINING THE OFFSET
*           AND LENGTH OF EACH WORD IN THE SOURCE STRING.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS N/A
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+---------------------+
*                          |II|00LL|DELIM VECTOR         |
*                          |  |    |OR                   |
*                          |  | -  |DELIM VECTOR ADDRESS |
*                          +--+----+---------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|0012|00LL|RESULT | LEN/CHR/WRD COUNT
*                          +--+----+----+-------+
*
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+----+--------------+
*                          |II|00ZZ|00LL|RESULT VECTOR |
*                          +--+----+----+--------------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         COPY  AS4LACC1
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,1           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115F       A. NO
         SPACE 1
         COPY  AS4LACC3
         SPACE 1
         MVI   PSTATE,$STATE1 USER DELIMITER LIST PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* SCAN SOURCE STRING AND ACCUMULATE TOTALS FOR
* CHARACTERS AND WORDS
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE3 Q. RESULT 1 FIELD COPIED
         JE    MAIN2600       A. YES,
         JH    MAIN0380
*        IF $STATE0 OR $STATE1 SCAN INPUT
         XC    CHR_CNT,CHR_CNT
         MVC   WRD_CNT,CHR_CNT
         LA    R0,FLD1_VECTOR_END
         ST    R0,HLDFLD2@    SAVE ADDR OF FIELD VECTOR END
         LA    R0,FLD1_VECTOR
         ST    R0,HLDFLD1@    SAVE ADDR OF FIELD VECTOR
MAIN2100 EQU   *
         BRAS  RE,FDLM0000
*              R1 ADDRESS OF NEXT VALID CHARACTER
*              R2 ADDRESS OF DELIMITER CHARACTER
         LARL  RE,EXIT0000
         CHI   RF,8           Q. VALID RC
         JH    TXT0109A       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN2200       ..00 FOUND DELIM CHAR
         J     MAIN2140       ..04 DELIM CHAR NOT FOUND
         NOP   *+4            ..08 VALID CHAR NOT FOUND
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         J     MAIN2200
MAIN2140 EQU   *
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         MVC   HLD2_CRSR,HLD1_STOP
MAIN2200 EQU   *
         L     R5,HLDFLD1@
         C     R5,HLDFLD2@    Q. PAST THE END YET
         JH    TXT0117B       A. YES, OVERFLOW
         L     R2,HLD2_CRSR   CURRENT LEXEME LAST BYTE CURSOR
         L     R1,HLD1_CRSR   CURRENT LEXEME CURSOR
         SPACE 1
         S     R1,HLD1_STRT   COMPUTE OFFSET
         STCM  R1,3,0(R5)     STORE WORD OFFSET
         S     R2,HLD1_CRSR   COMPUTE CHAR COUNT
         AHI   R2,1
         STCM  R2,3,2(R5)     STORE WORD LENGTH
         SPACE 1
         A     R2,CHR_CNT
         ST    R2,CHR_CNT
         LA    R2,1
         A     R2,WRD_CNT     ADD 1 TO WORD COUNT
         ST    R2,WRD_CNT
         MVC   HLD1_CRSR,HLD3_CRSR
         AHI   R5,4           INDEX VECTOR POSITION
         ST    R5,HLDFLD1@
         CLI   PSTATE,$STATE2 Q. SCAN INPUT COMPLETE
         JE    MAIN2500       A. YES,
         J     MAIN2100       A. NO,
         SPACE 2
MAIN2500 AS2LTRCE
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
*        COPY SOURCE LEN / CHAR COUNT / WORD COUNT TO RESULT 1 FIELD
         MVC   C2.TP_STR_LEN,H0
         ICM   R0,12,C1.TP_STR_SIZE
         JZ    MAIN2520
         SRL   R0,16
         CHI   R0,12
         JL    TXT0117A
         MVC   C2.TP_STR_LEN,H12
         L     R1,WRD_CNT          COMPUTE THE
         AHI   R1,-1               ..THE
         SLL   R1,2                ..LENGTH
         LA    R2,FLD1_VECTOR(R1)  ..OF
         ICM   R1,12,0(R2)         ..THE
         SRL   R1,16               ..SOURCE
         ICM   R0,12,2(R2)         ..FIELD
         SRL   R0,16               ..AND
         AR    R1,R0               ..SAVE
         STCM  R1,15,C2.TP_STR
         MVC   C2.TP_STR+4(L'CHR_CNT),CHR_CNT
         MVC   C2.TP_STR+8(L'WRD_CNT),WRD_CNT
MAIN2520 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
MAIN2600 AS2LTRCE
*        COPY FIELD VECTOR TO RESULT 2 FIELD
         MVC   C2.TP_STR_LEN,H0
         ICM   R0,12,C1.TP_STR_SIZE
         JZ    MAIN2640
         SRL   R0,16
         L     R1,WRD_CNT
         SLL   R1,2           SET LENGTH
         CR    R1,R0
         JNH   MAIN2620
         LR    R1,R0          SET LENGTH TO TP_STR_SIZE
MAIN2620 EQU   *
         STCM  R1,3,C2.TP_STR_LEN
         LA    R0,C2.TP_STR
         LA    R2,FLD1_VECTOR
         LR    R3,R1
         MVCL  R0,R2
MAIN2640 EQU   *
         MVI   PSTATE,$STATE4 RESULT 2 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         COPY  AS4LACC2
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6-DELIM VECTOR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0109A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'MAIN2100'
         J     MSG0109E
         SPACE 1
TXT0109C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS4LACC1'
**       J     MSG0109E
         SPACE 1
MSG0109E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03D_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *         BRANCH INDEX (NNN) IS INVALID
*        INSERT NUMBER VALUE (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114S EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115Q AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'1:16'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
         J     MSG0117E
         SPACE 1
TXT0117B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL11'FLD1_VECTOR'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
*        J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H64      DC    H'64'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSDEL 0178-15056-19326-1139-00959-00938-00000-APLKS   00
*PROCESS RENT
         TITLE 'ASUDSDEL - RETURN SOURCE MINUS/DELETE SUBSTR'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* DELETE SUBSTR
*
* PURPOSE: RETURN STRING MINUS/DELETE SELECTED SUBSTR IN RESULT
*
*        CALL 'ASUDSDEL' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION OR CASE-INSENSITIVE
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSDEL'
&C       SETC  ''
&I       SETA  2
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 1
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         AIF   ('&SYSPARM' EQ 'PKG').ASM0002
         SPACE 1
@BPOS    DS    A              20 - 1ST POS (ASUDBPOS)
.ASM0002 ANOP
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
PTMPLATE DS    A              PREVIOUS TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..OPTIONAL STRING PATTERN PROCESSED
$STATE2  EQU   X'02'          ..STRING PATTERN NOT FOUND
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO BPOS
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
LSO1_PSA_BMSKIPV DS    XL256       ..BOYER-MOORE SKIP VECTOR
         SPACE 1
         DS    F
*        INPUT SOURCE FOR CALL TO BPOS
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO FPOS
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
         DS    XL4
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 1
         AS2EPA MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* STRDEL:
*
*           RETURNS THE SOURCE STRING MINUS SELECTED
*           SUBSTR IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS i.e. UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*           +10 ADDRESS OF SUBSTR TO DELETE (5)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         L     R3,HLD1_STRT   POINT TO BEGIN OF SOURCE
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,1           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER FREQ VECTOR
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
         DROP  C2,C
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER FREQUENCY VECTOR
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* PROCESS STRING PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
*        IF $STATE0 SCAN INPUT
         AIF   ('&SYSPARM' EQ 'PKG').ASM0003
         MVC   CSV1_PGMNME,=CL8'ASUDBPOS'
         AS2EPA MF=E
         ST    RF,@BPOS
.ASM0003 ANOP
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
**       XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H288
         XC    LSO1_PSA,LSO1_PSA
         XC    LSO1_PSA_BMSKIPV,LSO1_PSA_BMSKIPV
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         SPACE 1
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF STRING PATTERN
         SPACE 1
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         SPACE 1
MAIN2180 AS2LTRCE
         LA    R1,PLIST
*        CALL  ASUDBPOS
         L     RF,@BPOS
         BASR  RE,RF     LINK TO
         LARL  RE,EXIT0000
         MVI   PSTATE,$STATE1      PROCESS STRING PATTERN COMPLETE
         CLC   LSR1_TP_STR(L'F0),F0
         JNE   MAIN2190
         MVI   PSTATE,$STATE2      STRING PATTERN NOT FOUND
         ST    R7,PTMPLATE         SAVE SRCHARG TEMPLATE ADDR
         J     MAIN0380
MAIN2190 AS2LTRCE
         ICM   R0,15,LSR1_TP_STR   GET SRCH FLD START POS
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=SRCH FLD START POS - 1
         SPACE 1
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R1,12,C2.TP_STR_LEN GET SRCH FLD LEN
         DROP  C2,C
         SRL   R1,16
         AR    R0,R1          ADD LEN OF SRCH FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....+ SRCH FLD LEN
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF SRCH FLD
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....- SRCH FLD LEN
*                             ..LEN=WHATS LEFT OVER
         J     MAIN0380
         SPACE 2
* --------------------------------------------------------- *
* PROCESS RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         CLI   PSTATE,$STATE2 Q. PROCESSED RESULT STRING YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 OR $STATE2
MAIN3100 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         LARL  RE,EXIT0000
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN3300
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115G       A. YES
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN3110
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN3110 EQU   *
         CLI   PSTATE,$STATE2      Q. STRING PATTERN NOT FOUND
         JE    MAIN3500            A. YES, ISSUE MESSAGE AND EXIT
         CLI   PSTATE,$STATE1      Q. STRING PATTERN PROCESSED
         JE    MAIN3300            A. YES,
MAIN3200 AS2LTRCE ,           USE REQUEST OPTIONS AS INPUT
         XC    FW31,FW31      INIT SRC FLD PREFIX INFO
         XC    FW41,FW41      INIT SRC FLD SUFFIX INFO
         ICM   R0,12,RO_START Q. START POS > 0
         JZ    MAIN3202       A. NO,
         SRL   R0,16          A. YES,
         CHI   R0,256         Q. START POS > 256
         JH    TXT0115E       A. YES,
         J     MAIN3204
MAIN3202 EQU   *
         L     R0,F1
MAIN3204 EQU   *
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=START POS - 1
         LH    R1,RO_COUNT    GET LEN
         CHI   R1,256         Q. LEN > 256
         JH    TXT0115F       A. YES,
         AR    R0,R1          ADD LEN OF START FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF START FLD
         LTR   R1,R1          Q. LEN OF START FLD = 0
         JNZ   MAIN3206       A. NO,
         LR    R2,R1          Q. YES, TRUNCATE SRC SUFFIX
MAIN3206 EQU   *
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=WHATS LEFT OVER
         DROP  R6
         SPACE 1
MAIN3300 AS2LTRCE ,           DELETE STRING, BUILD RESULT
*                             COMPUTE OVERALL LENGTH NEEDED
         LH    R2,HW32        ..ADD IN LENGTH OF SRC PREFIX
         AH    R2,HW42        ..ADD IN LENGTH OF SRC SUFFIX
         CLM   R2,3,C1.TP_STR_SIZE Q. RESULT LARGE ENOUGH
         JH    TXT0117A            A. NO
         STCM  R2,3,C2.TP_STR_LEN  STORE RSLT LEN
         SPACE 1
         L     R4,HLD1_STRT   POINT TO SOURCE
* R4 POINTS TO CURRENT POSITION OF SRC STRING
         LA    R5,C2.TP_STR   POINT TO RSLT STRING
* R5 POINTS TO CURRENT POSITION OF RSLT STRING
         ICM   R2,12,HW32     Q. GET SRC PREFIX LEN
         JZ    MAIN3340       A. NO SRC PREFIX
         SRL   R2,16          A. YES, SRC PREFIX EXIST
         AHI   R2,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R4)  MOVE IN SRC PREFIX
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R2          REPOSITION START OF RSLT STRING
         AHI   R5,1
**       J     MAIN3360       GO APPEND SRC SUFFIX TO RSLT
         SPACE 1
MAIN3340 EQU   *              DELETE STRING IS PREFIX
MAIN3360 EQU   *              APPEND SRC SUFFIX TO RSLT STRING
         ICM   R2,12,HW42     Q. GET SRC SUFFIX LEN
         JZ    MAIN3600       A. NO SRC SUFFIX
         SRL   R2,16          A. YES, SRC SUFFIX EXIST
         AHI   R2,-1
         AH    R4,HW41        REPOSITION TO SRC SUFFIX
         J     *+4+6
         MVC   0(0,R5),0(R4)  APPEND SRC SUFFIX TO RSLT STRING
*+4+6    EQU   *
         EX    R2,*-6
         J     MAIN3600
         SPACE 1
MAIN3500 AS2LTRCE ,           SRCH ARG STRING NOT FOUND
         LARL  RE,MAIN3600
         J     TXT0110A       STRING NOT FOUND
MAIN3600 AS2LTRCE
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
*        dynamically acquire the module EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,PTMPLATE    RESTORE PREVIOUS INPUT SRCHARG STR
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P.TP_PAT_PFX+L'P.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),P2.TP_STR_LEN
         ICM   R2,12,P2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),P2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH STRING
         DROP  P2,P
         SPACE 1
**       J     MSG0110W
         SPACE 1
MSG0110W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03E_0001
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *         NOT FOUND
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'STRING'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SEARCH ARG'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_COUNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_COUNT
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         AIF   ('&SYSPARM' NE 'PKG').ASM0004
         SPACE 1
@BPOS    DC    V(ASUDBPOS)    20 - 1ST POS (ASUDBPOS)
.ASM0004 ANOP
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F7       DC    F'7'
         SPACE 1
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H288     DC    H'288'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSINS 0151-18173-19325-0918-00864-00899-00000-APLKS   35
*PROCESS RENT
         TITLE 'ASUDSINS - RETURN SOURCE PLUS/INSERT SUBSTR'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* INSERT SUBSTR
*
* PURPOSE: RETURN STRING PLUS/INSERT SELECTED SUBSTR IN RESULT
*
*        CALL 'ASUDSINS' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSINS'
&C       SETC  ''
&I       SETA  2
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             BAR OF PREVIOUS TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
PTMPLATE DS    A              PREVIOUS TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..N/A
$STATE2  EQU   X'02'          ..STRING PATTERN PROCESSED
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* STRISRT:
*
*           RETURNS THE SOURCE STRING PLUS INSERTED
*           SUBSTR IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*               ADDRESS OF SUBSTR TO INSERT
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         L     R3,HLD1_STRT   POINT TO BEGIN OF SOURCE
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER DELIMITER LIST
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* PROCESS STRING PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. PROCESSED STRING PATTERN YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
X        USING ASU9LA04,R8    NEXT ENTRY
         CLI   X.TP_PAT_TYPE,$RSTR Q. NEXT RESULT TEMPLATE
         JE    MAIN2300            A. YES, PROCESS INSERT STRING
         DROP  X
         J     MAIN0380       NEXT TEMPLATE
MAIN2300 AS2LTRCE
         LARL  RE,EXIT0000
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN      Q. VALID LENGTH
         JZ    TXT0115G                 A. NO
         SRA   R0,16          Q. VALID LENGTH
         JM    MAIN2310       A. YES
         J     MAIN2314
MAIN2310 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105D            A. NO
         LPR   R0,R0
MAIN2314 EQU   *
         CHI   R0,256         Q. VALID LENGTH
         JH    TXT0115G       A. NO
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         SPACE 1
         ICM   R0,12,RO_START Q. START POS > 0
         JZ    MAIN2316       A. NO,
         SRL   R0,16          A. YES,
         J     MAIN2320
MAIN2316 EQU   *
         L     R0,F1
MAIN2320 EQU   *
         CHI   R0,256         Q. START POS > 256
         JH    TXT0115D       A. YES,
         C     R0,HLD1_LGTH   Q. START POS > SRC FLD LEN
         JH    TXT0115E       A. YES,
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=START POS - 1
         SLL   R0,16
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,RO_START    SRC FLD LEN - START POS
         DROP  R6
         CLC   HW41,H0        Q. SRC FLD SUFFIX (OFFSET) = 0
         JE    MAIN2322       A. YES, BYPASS
         AHI   R2,1           JUST TO MAKE IT CORRECT
MAIN2322 EQU   *
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ..LEN=WHATS LEFT OVER
         ST    R7,PTMPLATE    SAVE ADDR OF INSERT TEMPLATE
         MVI   PSTATE,$STATE2      PROCESS STRING PATTERN COMPLETE
         J     MAIN0380
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* PROCESS RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         CLI   PSTATE,$STATE2 Q. PROCESSED RESULT STRING YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 OR $STATE2
MAIN3100 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         LARL  RE,EXIT0000
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN3600
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115F       A. YES
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         DROP  R6
         AHI   R2,-2
         JM    MAIN3110
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN3110 EQU   *
         CLI   PSTATE,$STATE2      Q. STRING PATTERN PROCESSED
         JNE   MAIN0380            A. NO,
MAIN3300 AS2LTRCE ,           INSERT STRING, BUILD RESULT
         L     R8,PTMPLATE    RESTORE PREVIOUS INPUT INSERT STR
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P.TP_PAT_PFX+L'P.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,P2.TP_STR_LEN      Q. VALID LENGTH
         SRA   R0,16          Q. VALID LENGTH
         JM    MAIN3320       A. YES
         LA    R1,P2.TP_STR   GET INSERT STR ADDR
         J     MAIN3330
MAIN3320 EQU   *
         ICM   R1,15,P2.TP_STR     Q. VALID ADDRESS
         LPR   R0,R0
         DROP  P2,P
MAIN3330 EQU   *
*                             COMPUTE OVERALL LENGTH NEEDED
         LH    R2,HW32        ..ADD IN LENGTH OF SRC PREFIX
         AH    R2,HW42        ..ADD IN LENGTH OF SRC SUFFIX
         AR    R2,R0          ..ADD IN LENGTH OF INSERT STRING
         CLM   R2,3,C1.TP_STR_SIZE Q. RESULT LARGE ENOUGH
         JH    TXT0117A            A. NO
         STCM  R2,3,C2.TP_STR_LEN  STORE RSLT LEN
         SPACE 1
         L     R4,HLD1_STRT   POINT TO SOURCE
* R4 POINTS TO CURRENT POSITION OF SRC STRING
         LA    R5,C2.TP_STR   POINT TO RSLT STRING
* R5 POINTS TO CURRENT POSITION OF RSLT STRING
         ICM   R2,12,HW32     Q. GET SRC PREFIX LEN
         JZ    MAIN3340       A. NO SRC PREFIX
         SRL   R2,16          A. YES, SRC PREFIX EXIST
         AHI   R2,-1
         J     *+4+6
         MVC   0(0,R5),0(R4)  MOVE IN SRC PREFIX
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R2          REPOSITION START OF RSLT STRING
         AHI   R5,1
         J     MAIN3350       GO APPEND INSERT STRING TO RSLT
         SPACE 1
MAIN3340 EQU   *              INSERT STRING IS PREFIX
         LR    R2,R0          GET INSERT STRING LEN
         AHI   R2,-1
         J     *+4+6
         MVC   0(0,R5),0(R1)  APPEND INSERT STR TO RSLT
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R0          REPOSITION START OF RSLT STRING
         J     MAIN3360       GO APPEND SRC SUFFIX TO RSLT
MAIN3350 EQU   *              APPEND INSERT STRING TO RSLT
         LR    R2,R0          GET INSERT STRING LEN
         AHI   R2,-1
         J     *+4+6
         MVC   0(0,R5),0(R1)  APPEND INSERT STR TO RSLT
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R0          REPOSITION START OF RSLT STRING
MAIN3360 EQU   *              APPEND SRC SUFFIX TO RSLT STRING
         ICM   R2,12,HW42     Q. GET SRC SUFFIX LEN
         JZ    MAIN3600       A. NO SRC SUFFIX
         SRL   R2,16          A. YES, SRC SUFFIX EXIST
         AHI   R2,-1
         AH    R4,HW41        REPOSITION TO SRC SUFFIX
         J     *+4+6
         MVC   0(0,R5),0(R4)  APPEND SRC SUFFIX TO RSLT STRING
*+4+6    EQU   *
         EX    R2,*-6
         SPACE 1
MAIN3600 AS2LTRCE
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6-INSERT STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F7       DC    F'7'
H0       DC    H'0'
H1       DC    H'1'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H28      DC    H'28'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSPCE 0151-15056-19326-1137-00797-00824-00000-APLKS   29
*PROCESS RENT
         TITLE 'ASUDSPCE - RETURN SOURCE SPACED'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* SPACE STRING
*
* PURPOSE: RETURN SPACED SOURCE STRING
*
*        CALL 'ASUDSPCE' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION N/A
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSPCE'
&C       SETC  ''
&I       SETA  2
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 1
#CEEPLOD EQU   96             ENCLAVE LEVEL LOAD SERVICE
*                             ..F'LENGTH OF NAME' INPUT
*                             ..C'NAME OF MODULE' INPUT
*                             ..A(EP ADDR OF MODULE) OUTPUT
*                             ..F'LENGTH OF MODULE' OUTPUT
*                             ..3F'FEEDBACK' OPTIONAL
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         AIF   ('&SYSPARM' EQ 'PKG').ASM0002
         SPACE 1
@COUNT   DS    A              06 - COUNT (ASUDSCNT)
.ASM0002 ANOP
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
         DS    F
*        INPUT SOURCE FOR CALL TO COUNT
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
LSR1_RSLT_TXT EQU   *,12,C'X'
LGTH     DS    F
CHARS    DS    F
WORDS    DS    F
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR2_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR2_
LSR2_RSLT_TXT EQU   *,512,C'X'
         DS    XL512
         SPACE 1
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 1
         AS2EPA MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* SPACE:
*
*           RETURNS THE SOURCE STRING SPACED IN RESULT
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT (NBR OF DEFAULT PAD CHAR)
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------+
*                          |II|00LL|DELIM LIST |
*                          +--+----+-----------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,1           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115D       A. NO
         SPACE 1
         MVI   PSTATE,$STATE1 USER DELIMITER LIST PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* SPACE SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. SCAN INPUT COMPLETE
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
         AIF   ('&SYSPARM' EQ 'PKG').ASM0003
         MVC   CSV1_PGMNME,=CL8'ASUDSCNT'
         AS2EPA MF=E
         ST    RF,@COUNT
.ASM0003 ANOP
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         MVC   PLIST+((2-1)*4),SUBPARM2 SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H12
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         MVI   LSR2_TP_PAT_TYPE,LSR2_$RSTR
         MVC   LSR2_TP_STR_SIZE,H512
         MVC   LSR2_TP_STR_LEN,H0
         SPACE 1
         CLI   PSTATE,$STATE1 Q. USER DELIMITER LIST PROCESSED
         JE    MAIN2120       A. YES
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((5-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((6-1)*4),X'80'
         J     MAIN2140
MAIN2120 EQU   *
         LA    R0,F3
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF USER DELIM LIST
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((7-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((7-1)*4),X'80'
MAIN2140 EQU   *
         LA    R1,PLIST
*        CALL  ASUDSCNT
         L     RF,@COUNT
         BASR  RE,RF     LINK TO
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,15,WORDS
         AHI   R0,-1
         ST    R0,FW32        SAVE NBR_OF_GAPS
         SPACE 2
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN2180
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115E       A. YES
         MVC   FW21,CHARS
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         ICM   R0,12,RO_COUNT
         SRL   R0,16
         ST    R0,FW31        SAVE GAP SIZE
         L     R0,FW32        NBR_OF_GAPS
         MS    R0,FW31        NBR_OF_GAPS * NBR_OF_PAD_CHAR
         A     R0,FW21        PLUS CHAR COUNT
         CR    R2,R0          Q. RESULT FIELD LARGE ENOUGH
         JL    TXT0117A       A. NO
         STCM  R0,3,C2.TP_STR_LEN
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         DROP  R6
         AHI   R2,-2
         JM    MAIN2150
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
         SPACE 1
MAIN2150 EQU   *
         MVC   FW22,WORDS
         AS2LACSV COUNT=FW22,                                          +
               SRCPTR=HLD1_STRT,                                       +
               VECTOR=LSR2_RSLT_TXT,                                   +
               TARGET=C2.TP_STR,                                       +
               TGTLEN=C1.TP_STR_SIZE,                                  +
               GAPSZ=FW31
         SPACE 1
MAIN2180 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
*        DYNAMICALLY ACQUIRE THE MODULE EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT BRANCH INDEX (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
         J     MSG0117E
         SPACE 1
TXT0117Q AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2LACSV'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
         J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         AIF   ('&SYSPARM' NE 'PKG').ASM0004
         SPACE 1
@COUNT   DC    V(ASUDSCNT)    06 - COUNT (ASUDSCNT)
.ASM0004 ANOP
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
         SPACE 1
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H28      DC    H'28'
H64      DC    H'64'
H512     DC    H'512'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSREP 0173-16011-19326-1139-01048-00995-00000-APLKS   21
*PROCESS RENT
         TITLE 'ASUDSREP - RETURN SOURCE REPLACING SUBSTR'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* REPLACE SUBSTR
*
* PURPOSE: RETURN STRING REPLACING SELECTED SUBSTR IN RESULT
*
*        CALL 'ASUDSREP' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION OR CASE-INSENSITIVE
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSREP'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').MVS0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.MVS0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             BAR OF PREVIOUS TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 1
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         AIF   ('&SYSPARM' EQ 'PKG').ASM0002
         SPACE 1
@BPOS    DS    A              20 - 1ST POS (ASUDBPOS)
.ASM0002 ANOP
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
PTMPLATE DS    A              PREVIOUS TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..OPTIONAL STRPAT (SRCHARG) PROCESSED
$STATE2  EQU   X'02'          ..STRING PATTERN NOT FOUND
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO BPOS
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
LSO1_PSA_BMSKIPV DS    XL256       ..BOYER-MOORE SKIP VECTOR
         SPACE 1
         DS    F
*        INPUT SOURCE FOR CALL TO BPOS
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO BPOS
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
         DS    XL4
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 1
         AS2EPA MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* STRREPL:
*
*           RETURNS THE SOURCE STRING REPLACING A SELECTED
*           SUBSTR IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS i.e. UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF SOURCE SUBSTR TO LOCATE FOR REPLACE
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               ADDRESS OF REPLACING SUBSTR
*           +14 +--------+
*               |PTR     |
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,2           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         DROP  C
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER FREQ VECTOR
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER FREQUENCY VECTOR
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* PROCESS INPUT STRING PATTERN (OPTIONAL OR REPLACE)
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
*        IF $STATE0
N        USING ASU9LA04,R8    NEXT ENTRY
         CLI   N.TP_PAT_TYPE,$SPAT Q. NEXT ALSO STRING TEMPLATE
         JE    MAIN2100            A. YES, PROCESS OPT (SRCHARG)
         CLI   N.TP_PAT_TYPE,$RSTR Q. NEXT RESULT TEMPLATE
         JE    MAIN2300            A. YES, PROCESS REPL STRING
         DROP  N
         J     MAIN0380       NEXT TEMPLATE
MAIN2100 AS2LTRCE ,      MUST BE OPTIONAL INPUT (SRCHARG)
         AIF   ('&SYSPARM' EQ 'PKG').ASM0003
         MVC   CSV1_PGMNME,=CL8'ASUDBPOS'
         AS2EPA MF=E
         ST    RF,@BPOS
.ASM0003 ANOP
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
**       XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H288
         XC    LSO1_PSA,LSO1_PSA
         XC    LSO1_PSA_BMSKIPV,LSO1_PSA_BMSKIPV
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF STRING PATTERN
         SPACE 1
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         SPACE 1
MAIN2180 AS2LTRCE
         LA    R1,PLIST
*        CALL  ASUDBPOS
         L     RF,@BPOS
         BASR  RE,RF     LINK TO
         LARL  RE,EXIT0000
         MVI   PSTATE,$STATE1      PROCESS OPTIONAL SRCHARG COMPLETE
         CLC   LSR1_TP_STR(L'F0),F0
         JNE   MAIN2190
         MVI   PSTATE,$STATE2      STRING PATTERN NOT FOUND
         J     MAIN0380
MAIN2190 AS2LTRCE ,      PROCESS OPTIONAL SRCH ARG
         ICM   R0,15,LSR1_TP_STR   GET SRCH FLD START POS
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=SRCH FLD START POS - 1
         SPACE 1
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R1,12,C2.TP_STR_LEN GET SRCH FLD LEN
         DROP  C2,C
         SRL   R1,16
         AR    R0,R1          ADD LEN OF SRCH FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....+ SRCH FLD LEN
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF SRCH FLD
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....- SRCH FLD LEN
*                             ..LEN=WHATS LEFT OVER
         J     MAIN0380
         SPACE 1
MAIN2300 AS2LTRCE ,      REPLACEMENT STRING TEMPLATE FOUND
         ST    R7,PTMPLATE    SAVE ADDR FOR FUTHER PROCESSING
         J     MAIN0380
         SPACE 2
* --------------------------------------------------------- *
* PROCESS RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         CLI   PSTATE,$STATE3 Q. PROCESSED RESULT STRING YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 OR $STATE2
MAIN3100 AS2LTRCE
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         LARL  RE,EXIT0000
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE     Q. DUMMY RESULT
         JZ    MAIN3600                 A. YES, BYPASS
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115H       A. YES
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN3110
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR INIT RESULT FIELD
*+4+6    EQU   *
         EX    R2,*-6
MAIN3110 EQU   *
         CLI   PSTATE,$STATE2      Q. OPTIONAL SRCH ARG NOT FOUND
         JE    MAIN3500            A. YES, ISSUE MESSAGE AND EXIT
         CLI   PSTATE,$STATE1      Q. SRCHARG WAS FOUND
         JE    MAIN3300            A. YES,
         SPACE 1
*        IF $STATE0
MAIN3200 AS2LTRCE ,      USE REQUEST OPTIONS AS INPUT FOR SRCHARG
         XC    FW31,FW31      INIT SRC FLD PREFIX INFO
         XC    FW41,FW41      INIT SRC FLD SUFFIX INFO
         ICM   R0,12,RO_START Q. START POS > 0
         JZ    MAIN3202       A. NO,
         SRL   R0,16          A. YES,
         CHI   R0,256         Q. START POS > 256
         JH    TXT0115E       A. YES,
         J     MAIN3204
MAIN3202 EQU   *
         L     R0,F1
MAIN3204 EQU   *
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=START POS - 1
         LH    R1,RO_COUNT    GET LEN
         CHI   R1,256         Q. LEN > 256
         JH    TXT0115F       A. YES,
         AR    R0,R1          ADD LEN OF START FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF START FLD
         LTR   R1,R1          Q. LEN OF START FLD = 0
         JNZ   MAIN3206       A. NO,
         LR    R2,R1          Q. YES, TRUNCATE SRC SUFFIX
MAIN3206 EQU   *
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=WHATS LEFT OVER
         DROP  R6
         SPACE 1
MAIN3300 AS2LTRCE ,      REPLACE STRING READY, BUILD RESULT
         L     R8,PTMPLATE    RESTORE PREVIOUS INPUT (REPL STR)
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P.TP_PAT_PFX+L'P.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,P2.TP_STR_LEN      Q. VALID LENGTH
         JZ    TXT0115I                 A. NO
         SRA   R0,16          Q. VALID LENGTH
         JM    MAIN3320       A. YES
         LA    R1,P2.TP_STR   GET REPL STR ADDR
         J     MAIN3330
MAIN3320 EQU   *
         ICM   R1,15,P2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105D            A. NO
         LPR   R0,R0
         DROP  P2,P
MAIN3330 EQU   *
         CHI   R0,256         Q. VALID LENGTH
         JH    TXT0115I       A. NO
         SPACE 1              COMPUTE OVERALL LENGTH NEEDED
         LH    R2,HW32        ..ADD IN LENGTH OF SRC PREFIX
         AH    R2,HW42        ..ADD IN LENGTH OF SRC SUFFIX
         AR    R2,R0          ..ADD IN LENGTH OF REPL STRING
         CLM   R2,3,C1.TP_STR_SIZE Q. RESULT LARGE ENOUGH
         JH    TXT0117A            A. NO
         STCM  R2,3,C2.TP_STR_LEN  STORE RSLT LEN
         SPACE 1
         L     R4,HLD1_STRT   POINT TO SOURCE
* R4 POINTS TO CURRENT POSITION OF SRC STRING
         LA    R5,C2.TP_STR   POINT TO RSLT STRING
* R5 POINTS TO CURRENT POSITION OF RSLT STRING
         ICM   R2,12,HW32     Q. GET SRC PREFIX LEN
         JZ    MAIN3340       A. NO SRC PREFIX
         SRL   R2,16          A. YES, SRC PREFIX EXIST
         AHI   R2,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R4)  MOVE IN SRC PREFIX
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R2          REPOSITION START OF RSLT STRING
         AHI   R5,1
         J     MAIN3350       GO APPEND REPL STRING TO RSLT
         SPACE 1
MAIN3340 EQU   *              REPL STRING IS PREFIX
         LR    R2,R0          GET REPL STRING LEN
         AHI   R2,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R1)  APPEND REPL STR TO RSLT
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R0          REPOSITION START OF RSLT STRING
         J     MAIN3360       GO APPEND SRC SUFFIX TO RSLT
MAIN3350 EQU   *         APPEND REPL STRING TO RSLT
         LR    R2,R0          GET REPL STRING LEN
         AHI   R2,-1
         J     *+4+6
         MVC   0(0,R5),0(R1)  APPEND REPL STR TO RSLT
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R0          REPOSITION START OF RSLT STRING
MAIN3360 EQU   *         APPEND SRC SUFFIX TO RSLT STRING
         ICM   R2,12,HW42     Q. GET SRC SUFFIX LEN
         JZ    MAIN3600       A. NO SRC SUFFIX
         SRL   R2,16          A. YES, SRC SUFFIX EXIST
         AHI   R2,-1
         AH    R4,HW41        REPOSITION TO SRC SUFFIX
         J     *+4+6
         MVC   0(0,R5),0(R4)  APPEND SRC SUFFIX TO RSLT STRING
*+4+6    EQU   *
         EX    R2,*-6
         J     MAIN3600
         SPACE 1
MAIN3500 AS2LTRCE ,      ISSUE MESSAGE AND EXIT
*        OPTIONAL SRCHARG WAS NOT FOUND
         LARL  RE,MAIN3600
         J     TXT0110A       STRING NOT FOUND
         SPACE 1
MAIN3600 AS2LTRCE
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
*        dynamically acquire the module EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((5-1)*L'ISICOL)(8),=CL8'REPL STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,PTMPLATE    RESTORE PREVIOUS INPUT SRCHARG STR
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P.TP_PAT_PFX+L'P.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),P2.TP_STR_LEN
         ICM   R2,12,P2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),P2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH STRING
         DROP  P2,P
**       J     MSG0110W
         SPACE 1
MSG0110W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03E_0001
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *         NOT FOUND
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'STRING'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SEARCH ARG'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
*        J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'2:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_COUNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_COUNT
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         AIF   ('&SYSPARM' NE 'PKG').ASM0004
         SPACE 1
@BPOS    DC    V(ASUDBPOS)    20 - 1ST POS (ASUDBPOS)
.ASM0004 ANOP
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F7       DC    F'7'
         SPACE 1
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H14      DC    H'14'
H288     DC    H'288'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSSUB 0139-15056-19325-0920-00706-00803-00000-APLKS   05
*PROCESS RENT
         TITLE 'ASUDSSUB - RETURN SUBSTRING'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* SUB-STRING
*
* PURPOSE: RETURN SUBSTR IN RESULT
*
*        CALL 'ASUDSSUB' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSSUB'
&C       SETC  ''
&I       SETA  1
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* SUBSTR:
*
*           RETURNS THE SUBSTR IN RESULT
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         L     R3,HLD1_STRT   POINT TO BEGIN OF SOURCE
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES, TOO MANY PATTERNS
         JL    TXT0115B       A. NO, TOO FEW PATTERNS
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER FREQ VECTOR
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* PROCESS RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. PROCESSED RESULT STRING YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1
MAIN2100 EQU   *
         LARL  RE,EXIT0000
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN2240
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115D       A. YES
         ICM   R0,12,RO_START
         SRL   R0,16
         JNZ   MAIN2110
         L     R0,F1
MAIN2110 EQU   *
         C     R0,HLD1_LGTH   Q. START > SOURCE LGTH
         JH    TXT0115E       A. YES
         ICM   R1,12,RO_COUNT Q. LENGTH = ZERO
         SRL   R1,16
         JNZ   MAIN2115       A. NO
         L     R1,HLD1_LGTH   A. YES, DEFAULT TO REST OF SOURCE
         SH    R1,RO_START
         AHI   R1,1
         STH   R1,RO_COUNT
MAIN2115 EQU   *
         AR    R0,R1          ADD RO_COUNT (LGTH)
         AHI   R0,-1
         C     R0,HLD1_LGTH   Q. START+COUNT > SOURCE LGTH
         JH    TXT0115F
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN2120
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN2120 EQU   *
         ICM   R2,12,RO_COUNT Q. ANY DATA TO MOVE
         JZ    MAIN2240       A. NO
         SRL   R2,16
         CLM   R2,3,C1.TP_STR_SIZE Q. RESULT FIELD LARGE ENOUGH
         JH    TXT0117A            A. NO
         ICM   R4,12,RO_START Q. POINT TO SOURCE
         SRL   R4,16
         JZ    MAIN2130       A. NO
         AHI   R4,-1
MAIN2130 EQU   *
         A     R4,HLD1_STRT
         STCM  R2,3,C2.TP_STR_LEN
         AHI   R2,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R4)
*+4+6    EQU   *
         EX    R2,*-6
MAIN2240 EQU   *
         MVI   PSTATE,$STATE2 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114S EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H1
         MVC   ISITXT+((7-1)*L'ISICOL)(1),=CL1'4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_COUNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H25
         MVC   ISITXT+((7-1)*L'ISICOL)(25),=CL25'RO_START+RO_COUNT>SRC_+
               LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
*        J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
H16      DC    H'16'
H25      DC    H'25'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSTRP 0138-15056-19325-0920-00679-00774-00000-APLKS   29
*PROCESS RENT
         TITLE 'ASUDSTRP - RETURN SOURCE STRIPPED'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* STRIP LEADING/TRAILING/BOTH
*
* PURPOSE: RETURN STRING STRIPPED IN RESULT
*
*        CALL 'ASUDSTRP'' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH
*       4: INITIAL START POSITION N/A
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSTRP'
&C       SETC  ''
&I       SETA  1
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* STRIP:
*
*           RETURNS THE SOURCE STRING STRIPPED IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+          LEADING/TRAILING/BOTH
*
*                          +----+
*                          |00NN| STARTING POSITION N/A
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
MAIN0290 EQU   *
         COPY  AS4LACC1
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0113A       A. YES, TOO MANY PATTERNS
         JL    TXT0114A       A. NO, TOO FEW PATTERNS
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     TXT0115C       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* STRIP LEADING/TRAILING/BOTH SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. SCAN INPUT COMPLETE
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
MAIN2100 EQU   *
         LARL  RE,EXIT0000
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         TM    RO_OPT_FLAG,$LEAD   Q. STRIP LEADING
         JO    MAIN2104            A. YES
         L     R3,HLD1_STRT        A. NO
         J     MAIN2106
MAIN2104 EQU   *
         L     R3,HLD1_CRSR   POINT TO BEGIN OF SOURCE
MAIN2106 EQU   *
         TM    RO_OPT_FLAG,$TRAIL  Q. STRIP TRAILING
         JNO   MAIN2140            A. NO
         L     R2,MF1         SETUP INCR VALUE
MAIN2110 EQU   *
         CLC   0(1,R4),RO_DFLT_STRIP_CH Q. STRIP CHAR
         JNE   MAIN2140       A. NO
         BRXH  R4,R2,MAIN2110 PROCESS ALL SOURCE BYTES
*                             SOURCE IS EMPTY
MAIN2140 EQU   *
         SR    R4,R3          COMPUTE LENGTH
         AHI   R4,1           ..OF SOURCE
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 2
MAIN2500 AS2LTRCE
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
*        COPY SOURCE LEN STRING TO RESULT 1 FIELD
         MVC   C2.TP_STR_LEN,H0
         ICM   R1,12,C1.TP_STR_SIZE
         JZ    MAIN2520
         SRL   R1,16
         CHI   R1,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115D       A. YES
         LR    R2,R1          COPY MAX LENGTH
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN2510
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN2510 EQU   *
         LR    R2,R1          COPY MAX LENGTH
         SR    R2,R4          RESULT MAX SIZE - SOURCE LEN
         JM    TXT0117A
         STCM  R4,3,C2.TP_STR_LEN  SAVE RESULT LENGTH
         AHI   R4,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R3)  COPY SOURCE TO RESULT
*+4+6    EQU   *
         EX    R4,*-6
MAIN2520 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         COPY  AS4LACC2
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0109C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS4LACC1'
**       J     MSG0109E
         SPACE 1
MSG0109E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03D_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *         BRANCH INDEX (NNN) IS INVALID
*        INSERT NUMBER VALUE (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H1
         MVC   ISITXT+((7-1)*L'ISICOL)(1),=CL1'4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
MF1      DC    F'-1'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H28      DC    H'28'
H64      DC    H'64'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDSVAR 0191-15056-19326-1139-01395-01197-00000-APLKS   48
*PROCESS RENT
         TITLE 'ASUDSVAR - RETURNS LEXEMES FROM SOURCE VIA PATTERNS'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* PARSE VAR
*
* PURPOSE: RETURNS LEXEMES FROM SOURCE VIA PATTERNS
*
*        CALL 'ASUDSVAR' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION OR CASE-INSENSITIVE
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSVAR'
&C       SETC  ''
&I       SETA  17
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 1
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         AIF   ('&SYSPARM' EQ 'PKG').ASM0002
         SPACE 1
@BPOS    DS    A              20 - 1ST POS (ASUDBPOS)
.ASM0002 ANOP
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD4_CRSR DS    A             CURSOR ADDR OF NPAT SIGN
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A             REFERENCE CURSOR
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..LAST TEMPLATE PROCESSED
PFLAG    DS    CL1            PROCESS FLAG
$1ST     EQU   C'Y'           ..1ST TEMPLATE BEING PROCESSED
PSAIND   DS    CL1            PSA INDICATOR
$PSA     EQU   C'Y'           ..YES
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO BPOS
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
LSO1_PSA_BMSKIPV DS    XL256       ..BOYER-MOORE SKIP VECTOR
         SPACE 1
         DS    F
*        INPUT SOURCE FOR CALL TO BPOS
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO BPOS
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
         DS    XL4
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 1
         AS2EPA MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* VAR:
*
*           RETURNS LEXEMES FROM SOURCE VIA PATTERNS
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS i.e. UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   | 1 TO 16
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+---------------------+
*                          |II|00LL|DELIM VECTOR         |
*                          |  |    |OR                   |
*                          |  | -  |DELIM VECTOR ADDRESS |
*                          +--+----+---------------------+
*
*               +--------+ 1 TO 16 OCCURANCES
*               |PTR     | IN ANY COMBINATION OF POINTERS AND
*               +--------+ THE FOLLOWING DATA STRUCTURES
*
*                          +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*                          +--+----+------------------------+
*                          |II|00LL|NUMERIC PATTERN         |
*                          |  |    |OR                      |
*                          |  | -  |NUMERIC PATTERN ADDRESS |
*                          +--+----+------------------------+
*
*                          +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,RO_PSA_LEN    Q. ANY PSA
         JZ    MAIN0138            A. NO
         SRL   R0,16
         CHI   R0,32               Q. PSA LONG ENOUGH
         JL    TXT0115F            A. NO
         MVI   PSAIND,$PSA         SET PSA IND ON
         TM    RO_OPT_FLAG,$CNTREQ Q. CONTINUATION OF PREV REQUEST
         JNO   MAIN0138            A. NO
         OC    PSA_NXT_POS,PSA_NXT_POS  Q. ZERO
         JZ    MAIN0138                 A. YES
         MVC   RO_START,PSA_NXT_POS     A. NO, INIT START POS
MAIN0138 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD3_CRSR
         ST    R1,HLD1_CRSR   SAVE CURRENT LEXEME CURSOR
         ST    R1,HLD1_REF
         ST    R1,HLD1_STRT
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD3_CRSR   A. NO
         ST    R1,HLD1_CRSR   A. NO
         ST    R1,HLD1_REF    A. NO
MAIN0290 EQU   *
         COPY  AS4LACC1
         MVC   HLD3_CRSR,HLD1_CRSR
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         MVI   PFLAG,$1ST
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,1           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         XC    RESA,RESA           CLEAR R14 STACK
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER DELIM LIST
         J     MAIN2000       ..02 STRING PATTERN
         J     MAIN2000       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115G       A. NO
         SPACE 1
         COPY  AS4LACC3
         SPACE 1
         MVI   PSTATE,$STATE1 USER DELIMITER LIST PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* CHECK OUT THE NEXT TEMPLATE
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. PROCESSED STRING PATTERN YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
MAIN2100 EQU   *
         LARL  RE,EXIT0000
         ICM   R8,15,NTMPLATE      Q. POINT TO NEXT TEMPLATE
         JNZ   MAIN2200            A. YES, ONE EXIST
         MVI   PSTATE,$STATE2      A. NO
         CLI   C.TP_PAT_TYPE,$RSTR Q. CURRENT LEXEME / RESULT
         JNE   MAIN3900            A. NO
         MVC   HLD2_CRSR,HLD1_STOP
         CLC   HLD3_CRSR,F0        Q. NEXT VALID CHAR ADDR ZERO
         JH    MAIN2110            A. NO
         L     R0,HLD1_STOP        POSITION CURSOR PAST STOP
         A     R0,F1
         ST    R0,HLD3_CRSR
MAIN2110 EQU   *
         MVC   HLD1_CRSR,HLD3_CRSR
         J     MAIN3800
         SPACE 1
* --------------------------------------------------------- *
* CHECK NEXT TEMPLATE FOR RESULT STRING
* CHECK CURRENT TEMPLATE FOR RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2200 AS2LTRCE
N        USING ASU9LA04,R8    MAP NEXT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04    (DEPENDENT USING)
N2       USING ASU9LA07,N.TP_PAT_PFX+L'N.TP_PAT_PFX
         SPACE 1
         CLI   N.TP_PAT_TYPE,$RSTR Q. NEXT LEXEME / RESULT
         JNE   MAIN2400            A. NO
         CLI   C.TP_PAT_TYPE,$RSTR Q. CURRENT LEXEME / RESULT
         JNE   MAIN3000            A. NO, BUT NEXT IS
         SPACE 1
         MVC   HLD1_CRSR,HLD3_CRSR
         BRAS  RE,FDLM0000         FIND NEXT DELIM CHAR
*              R1 - ADDR OF NEXT VALID CHAR
*              R2 - ADDR OF DELIM CHAR
         LARL  RE,EXIT0000
         CHI   RF,8           Q. VALID RC
         JH    TXT0109A       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN3800       ..00 FOUND DELIM CHAR
         J     MAIN2210       ..04 DELIM CHAR NOT FOUND
         J     MAIN3800       ..08 VALID CHAR NOT FOUND
MAIN2210 AS2LTRCE
         MVC   HLD2_CRSR,HLD1_STOP
         J     MAIN3800
         SPACE 1
* --------------------------------------------------------- *
* CHECK NEXT TEMPLATE FOR STRING PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN2400 AS2LTRCE
         CLI   N.TP_PAT_TYPE,$SPAT Q. NEXT LEXEME / STRING
         JNE   MAIN2600            A. NO
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R2,12,N2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN2410       A. YES
         LA    R1,N2.TP_STR
         J     MAIN2420
MAIN2410 EQU   *
         ICM   R1,15,N2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105A            A. NO
         LPR   R2,R2
MAIN2420 EQU   *
         AIF   ('&SYSPARM' EQ 'PKG').ASM0003
         MVC   CSV1_PGMNME,=CL8'ASUDBPOS'
         AS2EPA MF=E
         ST    RF,@BPOS
.ASM0003 ANOP
         MVC   PLIST+((1-1)*4),SUBPARM0
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H288
         XC    LSO1_PSA,LSO1_PSA
         XC    LSO1_PSA_BMSKIPV,LSO1_PSA_BMSKIPV
         ST    R5,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),NTMPLATE SAVE ADDR OF STRING PATTERN
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         SPACE 1
         LA    R1,PLIST
*        CALL  ASUDBPOS
         L     RF,@BPOS
         BASR  RE,RF     LINK TO
         CLC   LSR1_TP_STR(L'F0),F0     Q. FIND STRING PATTERN
         JNE   MAIN2460                 A. YES
         LARL  RE,MAIN0400
         J     TXT0110A
MAIN2460 EQU   *
         LARL  RE,EXIT0000
         MVC   FW11,LSR1_TP_STR
         L     R1,FW11
         AHI   R1,-1
         A     R1,HLD1_STRT
         ST    R1,HLD3_CRSR        SAVE NEXT LEXEME START
         AHI   R1,-1
         ST    R1,HLD2_CRSR        SAVE END ADDR OF CURRENT LEXEME
         J     MAIN3000
         SPACE 1
* --------------------------------------------------------- *
* CHECK NEXT TEMPLATE FOR NUMERIC PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN2600 AS2LTRCE
         CLI   N.TP_PAT_TYPE,$NPAT Q. NEXT LEXEME / NUMERIC
         JNE   MAIN3000            A. NO
         SPACE 1
         ICM   R2,12,N2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN2610       A. YES
         LA    R1,N2.TP_STR   A. NO, LITERAL STRING
         J     MAIN2620
MAIN2610 EQU   *
         ICM   R1,15,N2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105E            A. NO
         LPR   R2,R2               A. YES, VARIABLE STRING
MAIN2620 EQU   *
         AHI   R2,-1
         STM   R1,R2,FW21
         LA    R3,0(R2,R1)    POINT TO LAST BYTE OF NUMERIC PATTERN
         ST    R3,HLD4_CRSR
         AS2NTEST FLDPTR=(R1),     Q. NUMERIC PATTERN                  +
               FORMAT=ZD,                                              +
               EXLGTH=(R2)
         LARL  RE,EXIT0000
         JNZ   TXT0112A            A. NO, NOT NUMERIC
         LM    R1,R2,FW21
         J     *+4+6
         PACK  DW01,0(0,R1)
*+4+6    EQU   *
         EX    R2,*-6
         CVB   R0,DW01
         TM    0(R3),X'F0'    Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN2640       A. NO
         L     R1,HLD1_STRT   POSITIONAL NUMERIC PATTERN
         AHI   R0,-1
         J     MAIN2644
MAIN2640 EQU   *
         L     R1,HLD1_REF    RELATIVE NUMERIC PATTERN
MAIN2644 EQU   *
         AR    R1,R0
         ST    R1,HLD3_CRSR   SAVE ADDR OF NEXT LEXEME
         C     R1,HLD1_CRSR   Q. POS >= CURSOR
         JNL   MAIN2660       A. YES
         MVC   HLD2_CRSR,HLD1_STOP A. NO,SET CURRENT LEXEME END ADDR
         J     MAIN3000
MAIN2660 EQU   *
         AHI   R1,-1
         ST    R1,HLD2_CRSR   SAVE END ADDR OF CURRENT LEXEME
*        J     MAIN3000
         SPACE 1
         DROP  N2,N
         SPACE 1
* --------------------------------------------------------- *
* CHECK OUT THE CURRENT TEMPLATE
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 EQU   *
         SPACE 1
C        USING ASU9LA04,R7    MAP NEXT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04    (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
* --------------------------------------------------------- *
* CHECK CURRENT TEMPLATE FOR RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3100 AS2LTRCE
         CLI   C.TP_PAT_TYPE,$RSTR Q. CURRENT LEXEME / RESULT
         JNE   MAIN3200            A. NO
         J     MAIN3800            A. YES, COPY RESULT
         SPACE 1
* --------------------------------------------------------- *
* CHECK CURRENT TEMPLATE FOR STRING PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN3200 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   C.TP_PAT_TYPE,$SPAT Q. CURRENT LEXEME / STRING
         JNE   MAIN3400            A. NO
         SPACE 1
         ICM   R2,12,C2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JNM   MAIN3220       A. NO
         LPR   R2,R2
MAIN3220 EQU   *
         CLI   PFLAG,$1ST     Q. 1ST TEMPLATE
         JE    MAIN3230       Q. YES
         L     R1,HLD3_CRSR
         ST    R1,HLD1_REF    SAVE REFERENCE CURSOR
         AR    R1,R2
         ST    R1,HLD1_CRSR   SAVE CURRENT LEXEME CURSOR
         J     MAIN3900
         SPACE 1
MAIN3230 AS2LTRCE
         AIF   ('&SYSPARM' EQ 'PKG').ASM0004
         MVC   CSV1_PGMNME,=CL8'ASUDBPOS'
         AS2EPA MF=E
         ST    RF,@BPOS
.ASM0004 ANOP
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO REQUEST OPTS
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H288
         XC    LSO1_PSA,LSO1_PSA
         XC    LSO1_PSA_BMSKIPV,LSO1_PSA_BMSKIPV
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         SPACE 1
         MVC   PLIST+((5-1)*4),CTMPLATE SAVE ADDR OF STRING PATTERN
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         SPACE 1
         LA    R1,PLIST
*        CALL  ASUDBPOS
         L     RF,@BPOS
         BASR  RE,RF     LINK TO
         CLC   LSR1_TP_STR(L'F0),F0     Q. FIND STRING PATTERN
         JNE   MAIN3260                 A. YES
         LARL  RE,MAIN0400
         J     TXT0110B
MAIN3260 EQU   *
         LARL  RE,EXIT0000
         MVC   FW11,LSR1_TP_STR    SAVE CURRENT LEXEME START
         L     R1,FW11
         AHI   R1,-1
         A     R1,HLD1_STRT
         ST    R1,HLD1_REF    SAVE REFERENCE CURSOR
         ICM   R2,12,C2.TP_STR_LEN
         SRL   R2,16
         AR    R1,R2
         ST    R1,HLD1_CRSR   SAVE CURRENT LEXEME CURSOR
         J     MAIN3900
         SPACE 1
* --------------------------------------------------------- *
* CHECK CURRENT TEMPLATE FOR NUMERIC PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN3400 AS2LTRCE
         CLI   C.TP_PAT_TYPE,$NPAT Q. CURRENT LEXEME / NUMERIC
         JNE   MAIN3900            A. NO
         SPACE 1
         CLI   PFLAG,$1ST     Q. 1ST TEMPLATE
         JE    MAIN3430       A. YES
         SPACE 1
         CLC   HLD3_CRSR,HLD1_CRSR Q. POS >= CURSOR
         JNL   MAIN3410            A. YES
         MVC   HLD2_CRSR,HLD1_STOP A. NO, SET CURRENT LEXEME END ADDR
MAIN3410 EQU   *
         MVC   HLD1_CRSR,HLD3_CRSR SET CURRENT TO NEXT
         L     R3,HLD4_CRSR
         TM    0(R3),X'F0'         Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN3900            A. NO
         MVC   HLD1_REF,HLD3_CRSR  SET REFERENCE TO NEXT
         J     MAIN3900
         SPACE 1
MAIN3430 AS2LTRCE
         ICM   R2,12,C2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN3440       A. YES
         LA    R1,C2.TP_STR   A. NO, LITERAL STRING
         J     MAIN3450
MAIN3440 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105E            A. NO
         LPR   R2,R2               A. YES, VARIABLE STRING
MAIN3450 EQU   *
         AHI   R2,-1
         STM   R1,R2,FW21
         LA    R3,0(R2,R1)    POINT TO LAST BYTE OF NUMERIC PATTERN
         AS2NTEST FLDPTR=(R1),     Q. NUMERIC PATTERN                  +
               FORMAT=ZD,                                              +
               EXLGTH=(R2)
         LARL  RE,EXIT0000
         JNZ   TXT0112A            A. NO, NOT NUMERIC
         LM    R1,R2,FW21
         J     *+4+6
         PACK  DW01,0(0,R1)
*+4+6    EQU   *
         EX    R2,*-6
         CVB   R0,DW01
         TM    0(R3),X'F0'    Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN3460       A. NO
         L     R1,HLD1_STRT   POSITIONAL NUMERIC PATTERN
         AHI   R0,-1
         J     MAIN3464
MAIN3460 EQU   *
         L     R1,HLD1_REF    RELATIVE NUMERIC PATTERN
MAIN3464 EQU   *
         AR    R1,R0
         ST    R1,HLD1_CRSR   SAVE ADDR OF NEXT LEXEME
         TM    0(R3),X'F0'    Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN3900       A. NO
         ST    R1,HLD1_REF
         J     MAIN3900
         SPACE 1
         DROP  C2
         SPACE 1
* --------------------------------------------------------- *
* COPY LEXEME TO RESULT STRING (LAST TEMPLATE)
* --------------------------------------------------------- *
         SPACE 1
MAIN3800 AS2LTRCE
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE     Q. DUMMY RESULT
         JZ    MAIN3840                 A. YES
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115H       A. YES
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN3810
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN3810 EQU   *
         CLC   HLD2_CRSR,HLD1_STOP      Q. PAST END
         JNH   MAIN3820                 A. NO
         MVC   HLD2_CRSR,HLD1_STOP      A. YES
MAIN3820 EQU   *
         CLC   HLD1_CRSR,HLD1_STRT      Q. PAST END
         JNL   MAIN3830                 A. NO
         MVC   HLD1_CRSR,HLD1_STRT      A. YES
MAIN3830 EQU   *
         L     R2,HLD2_CRSR   RESTORE CURRENT LEXEME END ADDR
         L     R1,HLD1_CRSR   RESTORE CURRENT LEXEME ADDR
         SR    R2,R1          COMPUTE LEXEME LGTH
         JM    MAIN3880
         SPACE 1
         LR    R3,R2
         AHI   R3,1
         CLM   R3,3,C1.TP_STR_SIZE      Q. RESULT LARGE ENOUGH
         JH    TXT0117A                 A. NO
         J     *+4+6
         MVC   C2.TP_STR(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         STCM  R3,3,C2.TP_STR_LEN       SAVE LEXEME LGTH
         J     MAIN3880
MAIN3840 EQU   *
*        LAST TEMPLATE, IS RESULT, PSA EXIST, SAVE START FOR NEXT PASS
         CLI   PSAIND,$PSA              Q. VALID PSA EXIST
         JNE   MAIN3880                 A. NO
         L     R1,HLD1_CRSR   RESTORE NEXT LEXEME ADDR
         C     R1,HLD1_STOP   Q. PAST END
         JNL   MAIN3842       A. YES
         S     R1,HLD1_STRT   COMPUTE POS IN SOURCE
         AHI   R1,1
         STCM  R1,3,PSA_NXT_POS    SAVE POS IN SOURCE
         OI    RO_OPT_FLAG,$CNTREQ SET CONTINUE ON
         J     MAIN3880
MAIN3842 EQU   *
         L     R0,HLD1_LGTH        POINT PAST SOURCE STRING
         A     R0,F1
         STCM  R0,3,PSA_NXT_POS
         OI    RO_OPT_FLAG,$CNTREQ      SET CONTIUE ON
MAIN3880 EQU   *
         SPACE 1
         DROP  C2,C1,C
         DROP  R6
         SPACE 1
* --------------------------------------------------------- *
* GO PROCESS THE NEXT TEMPLATE
* --------------------------------------------------------- *
         SPACE 1
MAIN3900 AS2LTRCE
         MVI   PFLAG,C'N'          TURN OFF 1ST TEMPLATE
         J     MAIN0380
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         COPY  AS4LACC2
         SPACE 1
*        dynamically acquire the module EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((5-1)*L'ISICOL)(16),=CL16'n-STRING PATTERN'
         J     MSG0105E
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6-DELIM VECTOR'
         J     MSG0105E
         SPACE 1
TXT0105E AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H17
         MVC   ISITXT+((5-1)*L'ISICOL)(17),=CL17'n-NUMERIC PATTERN'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0109A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'MAIN2200'
         J     MSG0109E
         SPACE 1
TXT0109C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS4LACC1'
**       J     MSG0109E
         SPACE 1
MSG0109E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03D_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *         BRANCH INDEX (NNN) IS INVALID
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,NTMPLATE    RESTORE NEXT INPUT SRCHARG STR
N        USING ASU9LA04,R8    NEXT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
N2       USING ASU9LA07,N.TP_PAT_PFX+L'N.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),N2.TP_STR_LEN
         ICM   R2,12,N2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),N2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH ARG
         DROP  N2,N
         SPACE 1
         J     MSG0110W
         SPACE 1
TXT0110B AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,CTMPLATE    RESTORE CURRENT INPUT SRCHARG STR
C        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),C2.TP_STR_LEN
         ICM   R2,12,C2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH ARG
         DROP  C2,C
         SPACE 1
         J     MSG0110W
         SPACE 1
MSG0110W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03E_0001
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *         NOT FOUND
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'STRING'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SEARCH ARG'
         J     ERTN0800
         SPACE 2
TXT0112A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H19
         MVC   ISITXT+((3-1)*L'ISICOL)(19),=CL19'TP_STR, NUMERIC PAT'
**       J     MSG0112E
         SPACE 1
MSG0112E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03G_0002
**       J     MSG0112
         SPACE 1
MSG0112  EQU   *         IS NOT NUMERIC
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
         J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
*        J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1:4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'>0'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'RO_PSA_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL3'>=32'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_PSA_LEN
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115Q AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'1:16'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117S EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         AIF   ('&SYSPARM' NE 'PKG').ASM0005
         SPACE 1
@BPOS    DC    V(ASUDBPOS)    20 - 1ST POS (ASUDBPOS)
.ASM0005 ANOP
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
MF1      DC    F'-1'
         SPACE 1
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H17      DC    H'17'
H19      DC    H'19'
H288     DC    H'288'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDVHEX 0144-15362-19325-0922-00885-00987-00000-APLKS   06
*PROCESS RENT
         TITLE 'ASUDVHEX - RETURN VERTICAL HEXADECIMAL'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* VERTICAL HEXADECIMAL
*
* PURPOSE: CONVERT STRING TO VERTICAL HEXADECIMAL
*          RETURN THE CHAR/ZONE/NUMBER STRINGS.
*
*        CALL 'ASUDVHEX' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR N/A
*       2: UPPER CASE TRANSLATION N/A
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDVHEX'
&C       SETC  ''
&I       SETA  4
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
HLD2_LGTH DS    F             RESULT FIELD MAXIMUM LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..PRINTABLE TR VECTOR HAS BEEN PROCESSED
$STATE2  EQU   X'02'          ..RESULT CHAR STRING HAS BEEN COPIED
$STATE3  EQU   X'03'          ..RESULT ZONE NIBBLES HAS BEEN COPIED
$STATE4  EQU   X'04'          ..RESULT NUMBER NIBBLES HAS BEEN COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* VHEX:     CONVERT SOURCE STRING TO THREE RESULT STRINGS.
*           THE FIRST BEING THE PRINTABLE CHARACTER
*           REPRESENTATION OF THE SOURCE BYTES.  THE SECOND
*           BEING THE ZONE NIBBLE OF THE INDIVIDUAL SOURCE
*           BYTES.  THE THIRD BEING THE NUMBER NIBBLE OF
*           THE INDIVIDUAL SOURCE BYTES.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR N/A
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |NNNN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |NNNN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |LLLL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------------------------+
*                          |II|LLLL|PRINTABLE CHAR TR TABLE      |
*                          |  |    |OR                           |
*                          |  | -  |PRINTABLE CHAR TR TABLE ADDR |
*                          +--+----+-----------------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00LL|ZZZZ|RESULT | PRINTABLE CHAR
*                          +--+----+----+-------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00LL|ZZZZ|RESULT | ZONE NIBBLES
*                          +--+----+----+-------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00LL|ZZZZ|RESULT | NUMBER NIBBLES
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*     NNNN: COUNT FIELD UNSIGNED (2 BYTE BINARY)
*     00LL: LENGTH FIELD UNSIGNED 0:256 (2 BYTE BINARY)
*     LLLL: LENGTH FIELD SIGNED|UNSIGNED (2 BYTE BINARY)
*     ZZZZ: MAX RESULT FIELD LENGTH UNSIGNED (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,32767       Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         LA    R0,XUPTBL      EST DEFAULT PRINTABLE CHAR TR TABLE
         ST    R0,FW32
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,3           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER PRINTABLE TR VECTOR
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL PRINTABLE TR VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115E       A. NO
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN Q. VALID LENGTH
         JZ    TXT0115F            A. NO,
         SRA   R0,16               Q. VALID LENGTH
         JM    MAIN1020            A. NO,
         LA    R1,C2.TP_STR
         J     MAIN1030
MAIN1020 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105D            A. NO,
         LPR   R0,R0
MAIN1030 EQU   *
         CHI   R0,256              Q. VALID LENGTH
         JNE   TXT0115F            A. NO
         ST    R1,FW32        SAVE ADDR OF OPTIONAL TR VECTOR
         SPACE 1
         MVI   PSTATE,$STATE1 PRINTABLE TR VECTOR HAS BEEN PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* COPY SOURCE STRING TO RESULT STRINGS
* AND TR RESULT STRINGS
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE2 Q. COPY SOURCE TO 1ST RESULT
         JL    MAIN3100       A. YES
         CLI   PSTATE,$STATE2 Q. COPY SOURCE TO 2ND RESULT
         JE    MAIN3200       A. YES
         CLI   PSTATE,$STATE3 Q. COPY SOURCE TO 3RD RESULT
         JE    MAIN3300       A. YES
         J     MAIN0380       A. NO, GO BUMP TO NEXT TEMPLATE
         SPACE 1
MAIN3100 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R3,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    TXT0115G                 A. NO,
         SRL   R3,16
         ST    R3,HLD2_LGTH   SAVE RESULT-1 LENGTH
         CHI   R3,256         Q. RESULT > 256
         JH    TXT0115H       A. YES, OUT OF RANGE
         MVC   C2.TP_STR_LEN,HLD1_LGTH+L'HLD1_LGTH-L'C2.TP_STR_LEN
         AHI   R3,-1
         L     R5,HLD1_CRSR   GET SOURCE FIELD ADDR
         J     *+4+6
         MVC   C2.TP_STR(0),0(R5)  COPY SOURCE CHARS TO RESULT
*+4+6    EQU   *
         EX    R3,*-6
         L     R4,FW32        GET TR TABLE ADDR
         J     *+4+6
         TR    C2.TP_STR(0),0(R4)  TR SOURCE TO PRINTABLE CHAR
*+4+6    EQU   *
         EX    R3,*-6
         MVI   PSTATE,$STATE2 SOURCE HAS BEEN MOVED TO RESULT
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
MAIN3200 EQU   *
         MVC   C2.TP_STR_LEN,H0
         ICM   R3,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    TXT0115G                 A. NO,
         SRL   R3,16
         C     R3,HLD2_LGTH   Q. RESULT-2 LGTH NOT = RESULT-1 LGTH
         JNE   TXT0115I       A. YES, OUT OF RANGE
         MVC   C2.TP_STR_LEN,HLD1_LGTH+L'HLD1_LGTH-L'C2.TP_STR_LEN
         AHI   R3,-1
         L     R5,HLD1_CRSR   GET SOURCE FIELD ADDR
         J     *+4+6
         MVC   C2.TP_STR(0),0(R5)  COPY SOURCE CHARS TO RESULT
*+4+6    EQU   *
         EX    R3,*-6
         J     *+4+6
         TR    C2.TP_STR(0),TRZONE TR SOURCE TO ZONE NIBBLES
*+4+6    EQU   *
         EX    R3,*-6
         MVI   PSTATE,$STATE3 CHAR NIBBLES HAS BEEN MOVED TO RESULT
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
MAIN3300 EQU   *
         MVC   C2.TP_STR_LEN,H0
         ICM   R3,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    TXT0115G                 A. NO,
         SRL   R3,16
         C     R3,HLD2_LGTH   Q. RESULT-3 LGTH NOT = RESULT-1 LGTH
         JNE   TXT0115I       A. YES, OUT OF RANGE
         MVC   C2.TP_STR_LEN,HLD1_LGTH+L'HLD1_LGTH-L'C2.TP_STR_LEN
         AHI   R3,-1
         L     R5,HLD1_CRSR   GET SOURCE FIELD ADDR
         J     *+4+6
         MVC   C2.TP_STR(0),0(R5)  COPY SOURCE CHARS TO RESULT
*+4+6    EQU   *
         EX    R3,*-6
         J     *+4+6
         TR    C2.TP_STR(0),TRNBR  TR SOURCE TO NUMBER NIBBLES
*+4+6    EQU   *
         EX    R3,*-6
         MVI   PSTATE,$STATE4 NBR NIBBLES HAS BEEN MOVED TO RESULT
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H14
         MVC   ISITXT+((5-1)*L'ISICOL)(14),=CL14'6-XLATE VECTOR'
**       J     MSG0105S
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
*        J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'1:32767'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'3:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'=256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'>0'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'>256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
TXT0115I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'<> RESULT-1 SIZE'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((5-1)*L'ISICOL)(5),ZD01+L'ZD01-5
         J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RESULT-1'
         J     MSG0117W
         SPACE 1
TXT0117B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RESULT-2'
         J     MSG0117W
         SPACE 1
TXT0117C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RESULT-3'
**       J     MSG0117W
         SPACE 1
MSG0117W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0001
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H14      DC    H'14'
H16      DC    H'16'
H255     DC    H'255'
         SPACE 2
TRZONE   DC    16CL1'0'       TR TABLE FOR ZONE NIBBLE
         DC    16CL1'1'
         DC    16CL1'2'
         DC    16CL1'3'
         DC    16CL1'4'
         DC    16CL1'5'
         DC    16CL1'6'
         DC    16CL1'7'
         DC    16CL1'8'
         DC    16CL1'9'
         DC    16CL1'A'
         DC    16CL1'B'
         DC    16CL1'C'
         DC    16CL1'D'
         DC    16CL1'E'
         DC    16CL1'F'
         SPACE 1
TRNBR    DC    16CL16'0123456789ABCDEF' TR TABLE FOR NUMBER NIBBLE
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDWDEL 0150-15056-19326-1138-00806-00843-00000-APLKS   04
*PROCESS RENT
         TITLE 'ASUDWDEL - RETURN STRING MINUS/DELETE WORD(S)'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* WORD(S) DELETE
*
* PURPOSE: RETURN SOURCE STRING MINUS THE DELETED WORDS
*
*        CALL 'ASUDWDEL' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START WORD
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDWDEL'
&C       SETC  ''
&I       SETA  2
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 1
#CEEPLOD EQU   96             ENCLAVE LEVEL LOAD SERVICE
*                             ..F'LENGTH OF NAME' INPUT
*                             ..C'NAME OF MODULE' INPUT
*                             ..A(EP ADDR OF MODULE) OUTPUT
*                             ..F'LENGTH OF MODULE' OUTPUT
*                             ..3F'FEEDBACK' OPTIONAL
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         AIF   ('&SYSPARM' EQ 'PKG').ASM0002
         SPACE 1
@COUNT   DS    A              06 - COUNT (ASUDSCNT)
.ASM0002 ANOP
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO COUNT
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
*        INPUT SOURCE FOR CALL TO COUNT
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
LSR1_RSLT_TXT EQU   *,12,C'X'
LGTH     DS    F
CHARS    DS    F
WORDS    DS    F
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR2_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR2_
LSR2_RSLT_TXT EQU   *,512,C'X'
         DS    XL512
         SPACE 1
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 1
         AS2EPA MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* WORDDEL:
*
*           RETURNS THE SOURCE STRING MINUS THE DELETED WORDS
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING WORD
*                          +----+
*
*                          +----+
*                          |00NN| COUNT
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+---------------------+
*                          |II|00LL|DELIM VECTOR         |
*                          |  |    |OR                   |
*                          |  | -  |DELIM VECTOR ADDRESS |
*                          +--+----+---------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,1           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115D       A. NO
         SPACE 1
         MVI   PSTATE,$STATE1 USER DELIMITER LIST PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* WORD DELETE SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. SCAN INPUT COMPLETE
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
         AIF   ('&SYSPARM' EQ 'PKG').ASM0003
         MVC   CSV1_PGMNME,=CL8'ASUDSCNT'
         AS2EPA MF=E
         ST    RF,@COUNT
.ASM0003 ANOP
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         XC    LSO1_RO_PSA_LEN,LSO1_RO_PSA_LEN
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H12
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         MVI   LSR2_TP_PAT_TYPE,LSR2_$RSTR
         MVC   LSR2_TP_STR_SIZE,H512
         MVC   LSR2_TP_STR_LEN,H0
         SPACE 1
         CLI   PSTATE,$STATE1 Q. USER DELIMITER LIST PROCESSED
         JE    MAIN2120       A. YES
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((5-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((6-1)*4),X'80'
         J     MAIN2140
MAIN2120 EQU   *
         LA    R0,F3
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF USER DELIM LIST
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((7-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((7-1)*4),X'80'
MAIN2140 EQU   *
         LA    R1,PLIST
*        CALL  ASUDSCNT
         L     RF,@COUNT
         BASR  RE,RF     LINK TO
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 1
         LARL  RE,EXIT0000
         SPACE 2
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN2180
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115E       A. YES
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         ICM   R0,12,RO_START Q. START = 0
         SRL   R0,16
         JNZ   MAIN2150
         L     R0,F1          A. YES, MAKE IT 1
MAIN2150 EQU   *
         ST    R0,FW31
         ICM   R0,12,RO_COUNT      Q. COUNT = 0
         SRL   R0,16
         JNZ   MAIN2154
         ICM   R0,15,WORDS         A. YES, REST OF STRING
         S     R0,FW31
         AHI   R0,1
MAIN2154 EQU   *
         ST    R0,FW32
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         DROP  R6
         AHI   R2,-2
         JM    MAIN2160
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
         SPACE 1
MAIN2160 EQU   *
         MVC   FW22,WORDS
         AS2LACSV COUNT=FW22,                                          +
               SRCPTR=HLD1_STRT,                                       +
               VECTOR=LSR2_RSLT_TXT,                                   +
               TARGET=C2.TP_STR,                                       +
               TGTLEN=C1.TP_STR_SIZE,                                  +
               REMOVE=(FW31,FW32)
         L     R0,HLD2_CRSR
         AHI   R0,1
         S     R0,HLD1_CRSR
         STCM  R0,3,C2.TP_STR_LEN
         SPACE 1
MAIN2180 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
*        DYNAMICALLY ACQUIRE THE MODULE EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117Q AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2LACSV'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         AIF   ('&SYSPARM' NE 'PKG').ASM0004
         SPACE 1
@COUNT   DC    V(ASUDSCNT)    06 - COUNT (ASUDSCNT)
.ASM0004 ANOP
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
         SPACE 1
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H28      DC    H'28'
H64      DC    H'64'
H512     DC    H'512'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUDWPOS 0151-15056-19326-1138-00872-00886-00000-APLKS   23
*PROCESS RENT
         TITLE 'ASUDWPOS - RETURN POSITION OF WORD IN SOURCE'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* WORD POSITION
*
* PURPOSE: RETURN THE POSITION OF SELECTED WORD IN SOURCE
*
*        CALL 'ASUDWPOS' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START WORD
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDWPOS'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 1
#CEEPLOD EQU   96             ENCLAVE LEVEL LOAD SERVICE
*                             ..F'LENGTH OF NAME' INPUT
*                             ..C'NAME OF MODULE' INPUT
*                             ..A(EP ADDR OF MODULE) OUTPUT
*                             ..F'LENGTH OF MODULE' OUTPUT
*                             ..3F'FEEDBACK' OPTIONAL
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         AIF   ('&SYSPARM' EQ 'PKG').ASM0002
         SPACE 1
@COUNT   DS    A              06 - COUNT (ASUDSCNT)
.ASM0002 ANOP
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..SCAN INPUT COMPLETE
$STATE3  EQU   X'03'          ..RESULT 1 FIELD COPIED
$STATE4  EQU   X'04'          ..RESULT 2 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO COUNT
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
*        INPUT SOURCE FOR CALL TO COUNT
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
LSR1_RSLT_TXT EQU   *,12,C'X'
LGTH     DS    F
CHARS    DS    F
WORDS    DS    F
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO COUNT
         ORG   *,4,-1
LSR2_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR2_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR2_
LSR2_RSLT_TXT EQU   *,512,C'X'
         DS    XL512
         SPACE 1
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 1
         AS2EPA MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* WORDPOS:
*
*           RETURNS THE POSITION OF SELECTED WORD IN SOURCE
*           AND OPTIONALLY THE WORD TEXT IN RESULT TEMPLATE
*           TWO
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING WORD
*                          +----+
*
*                          +----+
*                          |00NN| COUNT
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+---------------------+
*                          |II|00LL|DELIM VECTOR         |
*                          |  |    |OR                   |
*                          |  | -  |DELIM VECTOR ADDRESS |
*                          +--+----+---------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|0004|00LL|RESULT | POSITION
*                          +--+----+----+-------+
*
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,256         Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CHI   R5,&I          Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,1           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER DELIMITER LIST
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115D       A. NO
         SPACE 1
         MVI   PSTATE,$STATE1 USER DELIMITER LIST PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C
         SPACE 2
* --------------------------------------------------------- *
* WORD POSITION SOURCE STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE3 Q. RESULT 1 FIELD PROCESSED
         JE    MAIN2200       A. YES
         JH    MAIN0380       A.
*        IF $STATE0 OR $STATE1 SCAN INPUT
         AIF   ('&SYSPARM' EQ 'PKG').ASM0003
         MVC   CSV1_PGMNME,=CL8'ASUDSCNT'
         AS2EPA MF=E
         ST    RF,@COUNT
.ASM0003 ANOP
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         XC    LSO1_RO_PSA_LEN,LSO1_RO_PSA_LEN
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H12
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         MVI   LSR2_TP_PAT_TYPE,LSR2_$RSTR
         MVC   LSR2_TP_STR_SIZE,H512
         MVC   LSR2_TP_STR_LEN,H0
         SPACE 1
         CLI   PSTATE,$STATE1 Q. USER DELIMITER LIST PROCESSED
         JE    MAIN2120       A. YES
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((5-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((6-1)*4),X'80'
         J     MAIN2140
MAIN2120 EQU   *
         LA    R0,F3
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF USER DELIM LIST
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         LA    R0,LSR2_RSLT
         ST    R0,PLIST+((7-1)*4)  SAVE ADDR OF RESULT 2
         OI    PLIST+((7-1)*4),X'80'
MAIN2140 EQU   *
         LA    R1,PLIST
*        CALL  ASUDSCNT
         L     RF,@COUNT
         BASR  RE,RF     LINK TO
         MVI   PSTATE,$STATE2      SCAN INPUT COMPLETE
         SPACE 1
         LARL  RE,EXIT0000
         SPACE 2
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN2180
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115E       A. YES
         CHI   R2,4           Q. RESULT FIELD LARGE ENOUGH
         JL    TXT0115E       A. NO
         ICM   R0,15,WORDS
         JZ    MAIN2180
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         ICM   R1,12,RO_START
         SRL   R1,16
         JZ    MAIN2150
         DROP  R6
         CR    R0,R1          Q. WORDS > REQUEST
         JL    MAIN2180       A. NO
         AHI   R1,-1          CONVERT TO INDEX
         SLL   R1,2
MAIN2150 EQU   *
         LA    R2,LSR2_RSLT_TXT(R1)
         ICM   R0,12,0(R2)    PICKUP OFFSET
         SRL   R0,16
         AHI   R0,1           MAKE POSITION
         STCM  R0,15,C2.TP_STR
         LHI   R0,4
         STCM  R0,3,C2.TP_STR_LEN
MAIN2180 EQU   *
         MVI   PSTATE,$STATE3 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
MAIN2200 AS2LTRCE
         LARL  RE,EXIT0000
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN2280
         SRL   R2,16
         CHI   R2,256         Q. RESULT FIELD TOO LARGE
         JH    TXT0115F       A. YES
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         ICM   R0,12,RO_START Q. START = 0
         SRL   R0,16
         JNZ   MAIN2220
         L     R0,F1          A. YES, MAKE IT 1
MAIN2220 EQU   *
         ST    R0,FW31
         ICM   R0,12,RO_COUNT      Q. COUNT = 0
         SRL   R0,16
         JNZ   MAIN2240
         ICM   R0,15,WORDS         A. YES, REST OF STRING
         S     R0,FW31
         AHI   R0,1
MAIN2240 EQU   *
         ST    R0,FW32
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         DROP  R6
         AHI   R2,-2
         JM    MAIN2250
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
         SPACE 1
MAIN2250 EQU   *
         MVC   FW22,WORDS
         AS2LACSV COUNT=FW22,                                          +
               SRCPTR=HLD1_STRT,                                       +
               VECTOR=LSR2_RSLT_TXT,                                   +
               TARGET=C2.TP_STR,                                       +
               TGTLEN=C1.TP_STR_SIZE,                                  +
               COPY=(FW31,FW32)
         L     R0,HLD2_CRSR
         AHI   R0,1
         S     R0,HLD1_CRSR
         STCM  R0,3,C2.TP_STR_LEN
         SPACE 1
MAIN2280 EQU   *
         MVI   PSTATE,$STATE4 RESULT 2 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
*        DYNAMICALLY ACQUIRE THE MODULE EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114S
         SPACE 1
MSG0114S EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT BRANCH INDEX (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'4:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
*        J     ERTN0800
         SPACE 2
TXT0117Q AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2LACSV'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         AIF   ('&SYSPARM' NE 'PKG').ASM0004
         SPACE 1
@COUNT   DC    V(ASUDSCNT)    06 - COUNT (ASUDSCNT)
.ASM0004 ANOP
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
         SPACE 1
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H28      DC    H'28'
H64      DC    H'64'
H512     DC    H'512'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=NO
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ASUENU01 0115-15058-18310-1334-01116-00001-00000-APLKS   26
*PROCESS RENT
*        PRINT NOGEN
         PUNCH ' SETOPT PARM(REUS=RENT)'
ASUENU01 RMODE ANY
ASUENU01 AMODE ANY
ASUENU01 CSECT
*
         CEEXMBEG MSGMOD=ASUENU01,                                     *
               MSGPREF=ASU,                                            *
               MSGRANGE=(0101,0121),                                   *
               MSGCLASS=IWESCFLA
*
         CEEXMADD MSGNO=0101,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='is invalid',                                      *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,10,,)
*
         CEEXMADD MSGNO=0101,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='is invalid',                                      *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,10,,)
*
         CEEXMADD MSGNO=0101,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='is invalid',                                      *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,10,,)
*
         CEEXMADD MSGNO=0101,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='is invalid',                                      *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,10,,)
*
         CEEXMADD MSGNO=0102,                                          *
               MSGRC=0,                                                *
               MSGCL=I,                                                *
               MSGKEY=(0),                                             *
               MSG1=':',                                               *
               MSG2='Valid actions are:',                              *
               MSGPN=7,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,18,,),                            *
               MSGPS7=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0103,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002),                                *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='is not supported',                                *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,16,,)
*
         CEEXMADD MSGNO=0103,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002),                                *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='is not supported',                                *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,16,,)
*
         CEEXMADD MSGNO=0104,                                          *
               MSGRC=0,                                                *
               MSGCL=I,                                                *
               MSGKEY=(0),                                             *
               MSG1=':',                                               *
               MSG2='Supported actions are:',                          *
               MSGPN=7,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,22,,),                            *
               MSGPS7=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0105,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Argument (',                                      *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,10,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0105,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Argument (',                                      *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,10,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0105,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Argument (',                                      *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,10,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0105,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Argument (',                                      *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,10,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0106,                                          *
               MSGRC=0,                                                *
               MSGCL=I,                                                *
               MSGKEY=(0),                                             *
               MSG1=':',                                               *
               MSG2='Valid argument values are:',                      *
               MSGPN=7,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,26,,),                            *
               MSGPS7=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0107,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Failed with R15=',                                *
               MSG3='Reason=',                                         *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,7,,),                             *
               MSGPS10=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0107,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Failed with R15=',                                *
               MSG3='Reason=',                                         *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,7,,),                             *
               MSGPS10=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0107,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Failed with R15=',                                *
               MSG3='Reason=',                                         *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,7,,),                             *
               MSGPS10=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0107,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Failed with R15=',                                *
               MSG3='Reason=',                                         *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,7,,),                             *
               MSGPS10=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0108,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Contains invalid data',                           *
               MSGPN=7,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,21,,),                            *
               MSGPS7=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0108,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Contains invalid data',                           *
               MSGPN=7,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,21,,),                            *
               MSGPS7=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0108,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Contains invalid data',                           *
               MSGPN=7,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,21,,),                            *
               MSGPS7=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0108,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Contains invalid data',                           *
               MSGPN=7,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,21,,),                            *
               MSGPS7=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0109,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='branch index (',                                  *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0109,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='branch index (',                                  *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0109,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='branch index (',                                  *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0109,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='branch index (',                                  *
               MSG3=') is invalid',                                    *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,12,,)
*
         CEEXMADD MSGNO=0110,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='"',                                               *
               MSG3='"',                                               *
               MSG4='not found',                                       *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS7=(CEEM_INS_TYPE,0,7),                             *
               MSGPS8=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS9=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS10=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0110,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='"',                                               *
               MSG3='"',                                               *
               MSG4='not found',                                       *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS7=(CEEM_INS_TYPE,0,7),                             *
               MSGPS8=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS9=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS10=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0110,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='"',                                               *
               MSG3='"',                                               *
               MSG4='not found',                                       *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS7=(CEEM_INS_TYPE,0,7),                             *
               MSGPS8=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS9=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS10=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0110,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='"',                                               *
               MSG3='"',                                               *
               MSG4='not found',                                       *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS7=(CEEM_INS_TYPE,0,7),                             *
               MSGPS8=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS9=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS10=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0111,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='prematurely terminated due to data truncation',   *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,45,,)
*
         CEEXMADD MSGNO=0111,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='prematurely terminated due to data truncation',   *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,45,,)
*
         CEEXMADD MSGNO=0111,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='prematurely terminated due to data truncation',   *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,45,,)
*
         CEEXMADD MSGNO=0111,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='prematurely terminated due to data truncation',   *
               MSGPN=9,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,45,,)
*
         CEEXMADD MSGNO=0112,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003),                           *
               MSG1=':',                                               *
               MSG2='is not numeric',                                  *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,)
*
         CEEXMADD MSGNO=0112,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003),                           *
               MSG1=':',                                               *
               MSG2='is not numeric',                                  *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,)
*
         CEEXMADD MSGNO=0112,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003),                           *
               MSG1=':',                                               *
               MSG2='is not numeric',                                  *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,)
*
         CEEXMADD MSGNO=0113,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too many arguments',                   *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,29,,)
*
         CEEXMADD MSGNO=0113,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too many arguments',                   *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,29,,)
*
         CEEXMADD MSGNO=0113,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too many arguments',                   *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,29,,)
*
         CEEXMADD MSGNO=0113,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too many arguments',                   *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,29,,)
*
         CEEXMADD MSGNO=0114,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too few arguments',                    *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,28,,)
*
         CEEXMADD MSGNO=0114,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too few arguments',                    *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,28,,)
*
         CEEXMADD MSGNO=0114,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too few arguments',                    *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,28,,)
*
         CEEXMADD MSGNO=0114,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='was passed too few arguments',                    *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,28,,)
*
         CEEXMADD MSGNO=0115,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='numeric data (',                                  *
               MSG3=') is out of range (',                             *
               MSG4=')',                                               *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,19,,),                            *
               MSGPS9=(CEEM_INS_TYPE,0,7),                             *
               MSGPS10=(CEEM_NOQ_TYPE,1,,)
*
         CEEXMADD MSGNO=0115,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='numeric data (',                                  *
               MSG3=') is out of range (',                             *
               MSG4=')',                                               *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,19,,),                            *
               MSGPS9=(CEEM_INS_TYPE,0,7),                             *
               MSGPS10=(CEEM_NOQ_TYPE,1,,)
*
         CEEXMADD MSGNO=0115,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='numeric data (',                                  *
               MSG3=') is out of range (',                             *
               MSG4=')',                                               *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,19,,),                            *
               MSGPS9=(CEEM_INS_TYPE,0,7),                             *
               MSGPS10=(CEEM_NOQ_TYPE,1,,)
*
         CEEXMADD MSGNO=0115,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='numeric data (',                                  *
               MSG3=') is out of range (',                             *
               MSG4=')',                                               *
               MSGPN=10,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,14,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_NOQ_TYPE,19,,),                            *
               MSGPS9=(CEEM_INS_TYPE,0,7),                             *
               MSGPS10=(CEEM_NOQ_TYPE,1,,)
*
         CEEXMADD MSGNO=0116,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='underflow',                                       *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0116,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='underflow',                                       *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0116,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='underflow',                                       *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0116,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='underflow',                                       *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,9,,)
*
         CEEXMADD MSGNO=0117,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='overflow',                                        *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,8,,)
*
         CEEXMADD MSGNO=0117,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='overflow',                                        *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,8,,)
*
         CEEXMADD MSGNO=0117,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='overflow',                                        *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,8,,)
*
         CEEXMADD MSGNO=0117,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='overflow',                                        *
               MSGPN=6,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,8,,)
*
         CEEXMADD MSGNO=0118,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='failed with R15=',                                *
               MSG4='Reason=',                                         *
               MSGPN=13,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS10=(CEEM_INS_TYPE,0,5),                            *
               MSGPS11=(CEEM_TAB_TYPE,1,,),                            *
               MSGPS12=(CEEM_NOQ_TYPE,7,,),                            *
               MSGPS13=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0118,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='failed with R15=',                                *
               MSG4='Reason=',                                         *
               MSGPN=13,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS10=(CEEM_INS_TYPE,0,5),                            *
               MSGPS11=(CEEM_TAB_TYPE,1,,),                            *
               MSGPS12=(CEEM_NOQ_TYPE,7,,),                            *
               MSGPS13=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0118,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='failed with R15=',                                *
               MSG4='Reason=',                                         *
               MSGPN=13,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS10=(CEEM_INS_TYPE,0,5),                            *
               MSGPS11=(CEEM_TAB_TYPE,1,,),                            *
               MSGPS12=(CEEM_NOQ_TYPE,7,,),                            *
               MSGPS13=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0118,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Action',                                          *
               MSG3='failed with R15=',                                *
               MSG4='Reason=',                                         *
               MSGPN=13,                                               *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,6,,),                             *
               MSGPS7=(CEEM_INS_TYPE,1,4),                             *
               MSGPS8=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS9=(CEEM_NOQ_TYPE,16,,),                            *
               MSGPS10=(CEEM_INS_TYPE,0,5),                            *
               MSGPS11=(CEEM_TAB_TYPE,1,,),                            *
               MSGPS12=(CEEM_NOQ_TYPE,7,,),                            *
               MSGPS13=(CEEM_INS_TYPE,0,6)
*
         CEEXMADD MSGNO=0119,                                          *
               MSGRC=0,                                                *
               MSGCL=I,                                                *
               MSGKEY=(0),                                             *
               MSG1=':',                                               *
               MSGPN=5,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0120,                                          *
               MSGRC=0,                                                *
               MSGCL=I,                                                *
               MSGKEY=(0),                                             *
               MSG1=':',                                               *
               MSGPN=5,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_INS_TYPE,1,8)
*
         CEEXMADD MSGNO=0121,                                          *
               MSGRC=1,                                                *
               MSGCL=W,                                                *
               MSGKEY=(0001,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Syntax error POS=',                               *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,17,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0121,                                          *
               MSGRC=2,                                                *
               MSGCL=E,                                                *
               MSGKEY=(0002,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Syntax error POS=',                               *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,17,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0121,                                          *
               MSGRC=3,                                                *
               MSGCL=S,                                                *
               MSGKEY=(0003,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Syntax error POS=',                               *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,17,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_INS_TYPE,1,7)
*
         CEEXMADD MSGNO=0121,                                          *
               MSGRC=4,                                                *
               MSGCL=C,                                                *
               MSGKEY=(0004,0001,0002,0003,0004),                      *
               MSG1=':',                                               *
               MSG2='Syntax error POS=',                               *
               MSGPN=8,                                                *
               MSGPS1=(CEEM_INS_TYPE,0,1),                             *
               MSGPS2=(CEEM_NOQ_TYPE,1,,),                             *
               MSGPS3=(CEEM_INS_TYPE,1,2),                             *
               MSGPS4=(CEEM_INS_TYPE,1,3),                             *
               MSGPS5=(CEEM_TAB_TYPE,1,,),                             *
               MSGPS6=(CEEM_NOQ_TYPE,17,,),                            *
               MSGPS7=(CEEM_INS_TYPE,0,5),                             *
               MSGPS8=(CEEM_INS_TYPE,1,7)
*
         CEEXMEND
./ ADD NAME=ASUFSRHB 0121-18176-19316-1122-00641-00490-00000-APLKS   20
*PROCESS RENT
         TITLE 'ASUFSRHB - VECTOR FIBONACCIAN SEARCH ROUTINE'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* VECTOR FIBONACCIAN SEARCH ROUTINE
*
* PURPOSE: RETURN VECTOR ENTRY NUMBER OF ENTRY THAT MATCHES
*          THE SERCH ARGUMENT.  NO SPECIAL HANDELING OF
*          DUPLICATE KEYS.
*
*          USED FOR SEARCHING A SORTED VECTOR WITH A LARGE
*          NUMBER OF ENTRIES.  IT CAN BE EVEN FASTER THAN
*          A BINARY SEARCH.  O(n log n).
*
*        CALL 'ASUFSRHB' USING ASCA, VECTOR, NCNT, NPOS,
*             NLEN, KPOS, KLEN, KARG, FSUB, NSUB, FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*           VECTOR: (INPUT,ADDRESS)
*                   VECTOR
*             NCNT: (INPUT,FWD)
*                   VECTOR ENTRY COUNT
*             NPOS: (INPUT,FWD)
*                   ENTRY POS IN VECTOR
*             NLEN: (INPUT,FWD)
*                   ENTRY LENGTH <=256 BYTES, >=KEYLEN
*             KPOS: (INPUT,FWD)
*                   KEY POS IN ENTRY
*             KLEN: (INPUT,FWD)
*                   KEY LENGTH <=256 BYTES, <=NLEN
*             KARG: (INPUT,CH/BI)
*                   SEARCH ARGUMENT STRING, LENGTH =NLEN
*             FSUB: (INPUT/OUTPUT,FWD)
*                   SUBSCRIPT OF FIBONACCI VECTOR THAT POINTS
*                   TO THE ENTRY >= THE NUMBER OF OCCURS
*                   OF THE VECTOR BEING SEARCHED, INITIAL
*                   CALL CAN CONTAIN A VALUE OF ZERO, ADDITIONAL
*                   CALLS FOR THE SAME VECTOR SHOULD USE THE
*                   RETURNED VALUE, SO THAT THE FIBONACCI
*                   NUMBER DOES NOT HAVE TO BE LOOKED UP AGAIN
*             NSUB: (OUTPUT,FWD)
*                   SUBSCRIPT OF ENTRY MATCHING THE ARG
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUFSRHB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              BAR OF ASAB, ASABX
R6       EQU   6              BAR OF ASCA
R7       EQU   7              n/a
R8       EQU   8              n/a
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         EJECT
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
         ORG   SUBPARM0
PGMPARM1 DS    A              ADDRESS OF ASCA
PGMPARM2 DS    A              ADDRESS OF VECTOR
PGMPARM3 DS    A              ADDRESS OF VECTOR ENTRY COUNT
PGMPARM4 DS    A              ADDRESS OF ENTRY POS IN VECTOR
PGMPARM5 DS    A              ADDRESS OF ENTRY LENGTH
PGMPARM6 DS    A              ADDRESS OF KEY POS IN ENTRY
PGMPARM7 DS    A              ADDRESS OF KEY LENGTH
PGMPARM8 DS    A              ADDRESS OF SEARCH ARGUMENT
PGMPARM9 DS    A              ADDRESS OF FIB SUBSCRIPT
PGMPARMA DS    A              ADDRESS OF MATCHING SUBSCRIPT
PGMPARMB DS    A              ADDRESS OF LE FEEDBACK
         ORG   PGMPARMB
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
NCNT     DS    F              VECTOR ENTRY COUNT
NPOS     DS    F              VECTOR ENTRY POS
NLEN     DS    F              VECTOR ENTRY LENGTH
KPOS     DS    F              KEY POS IN ENTRY
KLEN     DS    F              KEY LENGTH
FSUB     DS    F              FIB VECTOR ENTRY SUBSCRIPT
NSUB     DS    F              VECTOR ENTRY SUBSCRIPT
NIDX     DS    F              VECTOR ENTRY INDEX
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
PGMPLIST DS    A              ORIGINAL R1 VALUE
         SPACE 1
         AS2VBSR1 MF=L        USED BY AS2VFSRH
         SPACE 1
         AS2VFSRH MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         EJECT
* --------------------------------------------------------- *
* PARMLIST COMING TO THIS PROGRAM
* --------------------------------------------------------- *
         SPACE 1
PARMLIST DSECT
@ASCA    DS    A              PTR TO AS COMMUNICATION AREA
@VECTOR  DS    A              PTR TO VECTOR (INPUT)
@NCNT    DS    A              PTR TO VECTOR ENTRY COUNT (INPUT)
@NPOS    DS    A              PTR TO ENTRY POS IN VECTOR (INPUT)
@NLEN    DS    A              PTR TO ENTRY LENGTH (INPUT)
@KPOS    DS    A              PTR TO KEY POS IN ENTRY (INPUT)
@KLEN    DS    A              PTR TO KEY LENGTH (INPUT)
@KARG    DS    A              PTR TO SEARCH ARGUMENT (INPUT)
@FSUB    DS    A              PTR TO FIB VECTOR ENTRY SUBSCRIPT (I/O)
@NSUB    DS    A              PTR TO VECTOR ENTRY SUBSCRIPT (OUTPUT)
@LEFDBK  DS    A              PTR TO LE FEEDBACK AREA (OUTPUT)
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         ST    R1,PGMPLIST
         SPACE 1
         USING CEEDSA,RD
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 1
         USING CEECAA,RC
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT NOGEN
PPA      CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=01,                                                 +
               REL=00,                                                 +
               MOD=00,                                                 +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *    INITIALIZE DYNAMIC STORAGE
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
**       AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 1
         L     R1,PGMPLIST
         USING PARMLIST,R1
         SPACE 1
         MVC   PGMPARM1,@ASCA
         NC    PGMPARM1,=XL4'7FFFFFFF'
         SPACE 1
         MVC   PGMPARM2,@VECTOR
         NC    PGMPARM2,=XL4'7FFFFFFF'
         SPACE 1
         MVC   PGMPARM3,@NCNT
         NC    PGMPARM3,=XL4'7FFFFFFF'
         L     R2,PGMPARM3
         L     R0,0(,R2)
         ST    R0,NCNT
         SPACE 1
         MVC   PGMPARM4,@NPOS
         NC    PGMPARM4,=XL4'7FFFFFFF'
         L     R2,PGMPARM4
         L     R0,0(,R2)
         ST    R0,NPOS
         SPACE 1
         MVC   PGMPARM5,@NLEN
         NC    PGMPARM5,=XL4'7FFFFFFF'
         L     R2,PGMPARM5
         L     R0,0(,R2)
         ST    R0,NLEN
         SPACE 1
         MVC   PGMPARM6,@KPOS
         NC    PGMPARM6,=XL4'7FFFFFFF'
         L     R2,PGMPARM6
         L     R0,0(,R2)
         ST    R0,KPOS
         SPACE 1
         MVC   PGMPARM7,@KLEN
         NC    PGMPARM7,=XL4'7FFFFFFF'
         L     R2,PGMPARM7
         L     R0,0(,R2)
         ST    R0,KLEN
         SPACE 1
         MVC   PGMPARM8,@KARG
         NC    PGMPARM8,=XL4'7FFFFFFF'
         SPACE 1
         MVC   PGMPARM9,@FSUB
         NC    PGMPARM9,=XL4'7FFFFFFF'
         L     R2,PGMPARM9
         L     R0,0(,R2)
         ST    R0,FSUB
         SPACE 1
         MVC   PGMPARMA,@NSUB
         NC    PGMPARMA,=XL4'7FFFFFFF'
         TM    @NSUB,X'80'    Q. LAST PARM
         JO    INIT0010       A. YES,
         MVC   PGMPARMB,@LEFDBK
         NC    PGMPARMB,=XL4'7FFFFFFF'
         TM    @LEFDBK,X'80'  Q. LAST PARM
         JO    INIT0010       A. YES,
         LARL  RE,EXIT0000
         J     TXT0113A
         SPACE 1
INIT0010 EQU   *
         AS2VBSR1 ,                                                    +
               NTRYCNT=32,                                             +
               NTRY=(1,4),                                             +
               KEY=(1,4),                                              +
               VECTOR=FSFIB,                                           +
               SRCHARG=FSNCNT,                                         +
               MF=G
         ST    RF,RTNCD
         JNZ   MAIN0010
         SPACE 1
         AS2VFSRH ,                                                    +
               NTRYCNT=NCNT,                                           +
               NTRY=(NPOS,NLEN),                                       +
               KEY=(KPOS,KLEN),                                        +
               VECTPTR=PGMPARM2,                                       +
               ARGPTR=PGMPARM8,                                        +
               FIBSUB=FSUB,                                            +
               MF=G
         ST    RF,RTNCD
         JNZ   MAIN0010
         SPACE 1
MAIN0000 EQU   *
         AS2VFSRH ,                                                    +
               SUB=NSUB,                                               +
               INDEX=NIDX,                                             +
               MF=C
         ST    RF,RTNCD
         JZ    MAIN0020       FIBONACCIAN SEARCH SUCCESSFUL
MAIN0010 EQU   *
         LARL  RE,EXIT0000
         C     RF,=F'8'       Q. VALID RETURN CODE
         JH    TXT0115A       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN0020       ..00 FIBONACCIAN SEARCH SUCCESSFUL
         J     TXT0107A       ..04 NOT FOUND
         J     TXT0107B       ..08 FIBONACCIAN SEARCH UNSUCCESSFUL
MAIN0020 EQU   *
         L     R2,PGMPARMA
         MVC   0(L'NSUB,R2),NSUB   COPY SUBSCRIPT TO CALLER
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
**       AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
EXIT0090 EQU   *
         AS2PLIST (RTNCD,0),VL,MF=(E,PLIST)
*        CALL CEE3SRC
         L     RF,=V(CEE3SRC)
         BASR  RE,RF     link to
         SPACE 1
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         SPACE 2
* --------------------------------------------------------- *
* CALLABLE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
* Binary Search routine to locate the Fibonacci number that
* is >= the number of vector entries in the vector you are
* searching with the Fibonaccian Search.  You could probably
* do a linear search just as quickly and with a lot less code.
* There are only 32 entries in the Fibonacci number vector.
* That will handle over a million vector entries.
         SPACE 1
         AS2VBSR1 ,                                                    +
               SUB=FSFIBK,                                             +
               INDEX=FSLBND,                                           +
               MF=C
         ST    RF,RTNCD
         L     R2,PGMPARM9    PRIME REG TO ADDR OF FSUB
         MVC   0(L'FSFIBK,R2),FSFIBK    COPY FSUB TO CALLER
         JZ    BSRTN900       BINARY SEARCH SUCCESFUL
         XC    0(L'FSFIBK,R2),0(R2)     CLEAR FSUB
         LARL  RE,EXIT0000
         C     RF,=F'8'       Q. VALID RETURN CODE
         JH    TXT0115B       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     BSRTN900       ..00 BINARY SEARCH SUCCESSFUL
         J     TXT0107C       ..04 NOT FOUND
         J     TXT0107D       ..08 BINARY SEARCH UNSUCCESSFUL
         SPACE 1
BSRTN900 EQU   *
         BR    RE        return to caller
         SPACE 2
* --------------------------------------------------------- *
* ERROR PROCESSING
* --------------------------------------------------------- *
         SPACE 1
TXT0107A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'01'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0001
         SPACE 1
TXT0119A EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(9),=CL9'not fou+
               nd'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
         J     MSG0107
         SPACE 1
TXT0107B EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'02'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0002
         SPACE 1
TXT0119B EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H36
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(36),=CL36'confl+
               icting ENTRY and KEY parameters'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
         J     MSG0107
         SPACE 1
TXT0107C EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2VBSR1'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'01'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0001
         SPACE 1
TXT0119C EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'AS2VBSR+
               1'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(9),=CL9'not fou+
               nd'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
         J     MSG0107
         SPACE 1
TXT0107D EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2VBSR1'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'02'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0002
         SPACE 1
TXT0119D EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'AS2VBSR+
               1'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H36
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(36),=CL36'confl+
               icting ENTRY and KEY parameters'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *         FAILED WITH R15= REASON=
         J     ERTN0800
         SPACE 2
TXT0113A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         WAS PASSED TOO MANY ARGUMENTS
         J     ERTN0800
         SPACE 2
TXT0115A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'RETURN CODE'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL3'0:8'
         J     MSG0115E
         SPACE 1
TXT0115B EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'RETURN CODE'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL3'0:8'
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
         DS    0D
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
**       COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
H2       DC    H'2'
H3       DC    H'3'
H5       DC    H'5'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
H18      DC    H'18'
H36      DC    H'36'
         SPACE 2
         AS2VFSRH MF=STATIC
         SPACE 2
         LTORG
         END
./ ADD NAME=ASUHSRTB 0131-18162-19316-1125-00448-00461-00000-APLKS   35
*PROCESS RENT
         TITLE 'ASUHSRTB - VECTOR HEAP SORT ROUTINE'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* VECTOR HEAP SORT ROUTINE
*
* PURPOSE: RETURN SORTED VECTOR ON 1 KEY IN ASCENDING ORDER
*          A VECTOR ENTRY MUST BE <=256 BYTES
*
*        CALL 'ASUHSRTB' USING ASCA, VECTOR, NCNT, NPOS,
*             NLEN, KPOS, KLEN, FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*           VECTOR: (INPUT/OUTPUT,ADDRESS)
*                   VECTOR
*             NCNT: (INPUT,FWD)
*                   VECTOR ENTRY COUNT
*             NPOS: (INPUT,FWD)
*                   ENTRY POS IN VECTOR
*             NLEN: (INPUT,FWD)
*                   ENTRY LENGTH <=256 BYTES, >=KLEN
*             KPOS: (INPUT,FWD)
*                   KEY POS IN ENTRY
*             KLEN: (INPUT,FWD)
*                   KEY LENGTH <=256 BYTES, <=NLEN
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUHSRTB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              BAR OF ASAB, ASABX
R6       EQU   6              BAR OF ASCA
R7       EQU   7              n/a
R8       EQU   8              n/a
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         EJECT
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
         ORG   SUBPARM0
PGMPARM1 DS    A              ADDRESS OF ASCA
PGMPARM2 DS    A              ADDRESS OF VECTOR
PGMPARM3 DS    A              ADDRESS OF VECTOR ENTRY COUNT
PGMPARM4 DS    A              ADDRESS OF ENTRY POS IN VECTOR
PGMPARM5 DS    A              ADDRESS OF ENTRY LENGTH
PGMPARM6 DS    A              ADDRESS OF KEY POS IN ENTRY
PGMPARM7 DS    A              ADDRESS OF KEY LENGTH
PGMPARM8 DS    A              ADDRESS OF LE FEEDBACK
         ORG   PGMPARM8
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
NCNT     DS    F              VECTOR ENTRY COUNT
NPOS     DS    F              VECTOR ENTRY POS
NLEN     DS    F              VECTOR ENTRY LENGTH
KPOS     DS    F              KEY POS IN ENTRY
KLEN     DS    F              KEY LENGTH
         SPACE 2
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
PGMPLIST DS    A              ORIGINAL R1 VALUE
         SPACE 1
         AS2VHSRT MF=L
         SPACE 2
**       AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         EJECT
* --------------------------------------------------------- *
* PARMLIST COMING TO THIS PROGRAM
* --------------------------------------------------------- *
         SPACE 1
PARMLIST DSECT
@ASCA    DS    A              PTR TO AS COMMUNICATION AREA
@VECTOR  DS    A              PTR TO VECTOR (INPUT/OUTPUT)
@NCNT    DS    A              PTR TO VECTOR ENTRY COUNT (INPUT)
@NPOS    DS    A              PTR TO ENTRY POS IN VECTOR (INPUT)
@NLEN    DS    A              PTR TO ENTRY LENGTH (INPUT)
@KPOS    DS    A              PTR TO KEY POS IN ENTRY (INPUT)
@KLEN    DS    A              PTR TO KEY LENGTH (INPUT)
@LEFDBK  DS    A              PTR TO LE FEEDBACK AREA (OUTPUT)
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         ST    R1,PGMPLIST
         SPACE 1
         USING CEEDSA,RD
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 1
         USING CEECAA,RC
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT NOGEN
PPA      CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=01,                                                 +
               REL=00,                                                 +
               MOD=00,                                                 +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *    INITIALIZE DYNAMIC STORAGE
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
**       AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 1
         L     R1,PGMPLIST
         USING PARMLIST,R1
         SPACE 1
         MVC   PGMPARM1,@ASCA
         NC    PGMPARM1,=XL4'7FFFFFFF'
         MVC   PGMPARM2,@VECTOR
         NC    PGMPARM2,=XL4'7FFFFFFF'
         MVC   PGMPARM3,@NCNT
         NC    PGMPARM3,=XL4'7FFFFFFF'
         L     R2,PGMPARM3
         L     R0,0(,R2)
         ST    R0,NCNT
         MVC   PGMPARM4,@NPOS
         NC    PGMPARM4,=XL4'7FFFFFFF'
         L     R2,PGMPARM4
         L     R0,0(,R2)
         ST    R0,NPOS
         MVC   PGMPARM5,@NLEN
         NC    PGMPARM5,=XL4'7FFFFFFF'
         L     R2,PGMPARM5
         L     R0,0(,R2)
         ST    R0,NLEN
         MVC   PGMPARM6,@KPOS
         NC    PGMPARM6,=XL4'7FFFFFFF'
         L     R2,PGMPARM6
         L     R0,0(,R2)
         ST    R0,KPOS
         MVC   PGMPARM7,@KLEN
         NC    PGMPARM7,=XL4'7FFFFFFF'
         L     R2,PGMPARM7
         L     R0,0(,R2)
         ST    R0,KLEN
         TM    @KLEN,X'80'    Q. LAST PARM
         JO    INIT0010       A. YES,
         MVC   PGMPARM8,@LEFDBK
         NC    PGMPARM8,=XL4'7FFFFFFF'
         TM    @LEFDBK,X'80'  Q. LAST PARM
         JO    INIT0010       A. YES,
         LARL  RE,EXIT0000
         J     TXT0113A
         SPACE 1
INIT0010 EQU   *
         AS2VHSRT ,                                                    +
               NTRYCNT=NCNT,                                           +
               NTRY=(NPOS,NLEN),                                       +
               KEY=(KPOS,KLEN),                                        +
               VECTPTR=PGMPARM2,                                       +
               MF=G
         ST    RF,RTNCD
         JNZ   MAIN0010
         SPACE 1
MAIN0000 EQU   *
         AS2VHSRT MF=C
         ST    RF,RTNCD
         JZ    MAIN0020       HEAP SORT SUCCESSFUL
MAIN0010 EQU   *
         LARL  RE,EXIT0000
         C     RF,=F'8'       Q. VALID RETURN CODE
         JH    TXT0115A       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN0020       ..00 SORT SUCCESSFUL
         J     TXT0107A       ..04 NO ENTRIES TO SORT
         J     TXT0107B       ..08 SORT UNSUCCESSFUL
MAIN0020 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
**       AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
EXIT0090 EQU   *
         AS2PLIST (RTNCD,0),VL,MF=(E,PLIST)
*        CALL CEE3SRC
         L     RF,=V(CEE3SRC)
         BASR  RE,RF     link to
         SPACE 1
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         SPACE 2
* --------------------------------------------------------- *
* CALLABLE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR PROCESSING
* --------------------------------------------------------- *
         SPACE 1
TXT0107A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'01'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0001
         SPACE 1
TXT0119A EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H18
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(18),=CL18'NO EN+
               TRIES TO SORT'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
         J     MSG0107
         SPACE 1
TXT0107B EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT NUMBER STRING (VARIABLE 6)
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((6-1)*L'ISICOL)(2),=CL2'02'
         SPACE 1
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0002
         SPACE 1
TXT0119B EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H36
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(36),=CL36'CONFL+
               ICTING ENTRY AND KEY PARAMETERS'
         SPACE 1
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03N
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *         FAILED WITH R15= REASON=
         J     ERTN0800
         SPACE 2
TXT0113A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         WAS PASSED TOO MANY ARGUMENTS
         J     ERTN0800
         SPACE 2
TXT0115A EQU   *
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'RETURN CODE'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL3'0:8'
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
**       AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
         DS    0D
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
**       COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
H2       DC    H'2'
H3       DC    H'3'
H5       DC    H'5'
H8       DC    H'8'
H11      DC    H'11'
H18      DC    H'18'
H36      DC    H'36'
         SPACE 2
         LTORG
         END
./ ADD NAME=ASULEMSG 0114-15056-18310-1311-01063-00895-00000-APLKS   48
.* Profile caps off
.* Copy CEE.SCEECLST(CEEBLDTX) to an existing REXX library
.*
.* CMDE
.*   CEEBLDTX 'APLKS.ASUTIL.ASM(ASULEMSG)'        /*input source*/
.*            'APLKS.ASUTIL.ASM.ASUENU01'         /*output bal*/
.*            CSECT(ASUENU01)
.*
.* TSO 3.4
.*   COPY 'APLKS.ASUTIL.ASM.ASUENU01'
.*     TO 'APLKS.ASUTIL.ASM(ASUENU01)'
.*
.* CMDE
.*   CEEBLDTX 'APLKS.ASUTIL.ASM(ASULEMSG)'        /*input source*/
.*            'APLKS.ASUTIL.ASM.ASUENU01'         /*output bal*/
.*            BAL('APLKS.ASUTIL.ASM.ASUBALCT')    /*output bal cpybk*/
.*
.*   EDIT AND MODIFY 'APLKS.ASUTIL.ASM.ASUBALCT'
.*
.* TSO 3.4
.*   COPY 'APLKS.ASUTIL.ASM.ASUBALCT'
.*     TO 'APLKS.ASUTIL.ASM(ASUBALCT)'
.*
.* CMDE
.*   CEEBLDTX 'APLKS.ASUTIL.ASM(ASULEMSG)'        /*input source*/
.*            'APLKS.ASUTIL.ASM.ASUENU01'         /*output bal*/
.*            COBOL('APLKS.ASUTIL.COB.ASUIGZCT')  /*output cob cpybk*/
.*
.*   EDIT AND MODIFY 'APLKS.ASUTIL.COB.ASUIGZCT'
.*
.* TSO 3.4
.*   COPY 'APLKS.ASUTIL.COB.ASUIGZCT'
.*     TO 'APLKS.ASUTIL.COBOL(ASUIGZCT)'
.*
.* Architectural Services Utilities
.* Utiltiy Services - application error messages
.* var1 - component --> name of message issuer
.* var2 - component type --> PROGRAM, SUB-ROUTINE, MACRO, COPYBOOK,
.*        LABEL, FIELD, etc.
.* var3 - component name --> name of component type
.* var4 - action
.* var5 - number string
.* var6 - number string
.* var7 - text string
.* var8 - text string
.*
:facid.ASU
.*
.* var1: var2 var3 Action var4 is invalid
:msgno.0101
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Action
:tab.+1
:ins 4.action -
:tab.+1
:msg.is invalid
.*
.* var1: var2 var3 Action var4 is invalid
:msgno.0101
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Action
:tab.+1
:ins 4.action -
:tab.+1
:msg.is invalid
.*
.* var1: var2 var3 Action var4 is invalid
:msgno.0101
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Action
:tab.+1
:ins 4.action -
:tab.+1
:msg.is invalid
.*
.* var1: var2 var3 Action var4 is invalid
:msgno.0101
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Action
:tab.+1
:ins 4.action -
:tab.+1
:msg.is invalid
.*
.* var1: var2 var3 Valid actions are: var7
:msgno.0102
:msgclass.I
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Valid actions are:
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Action var4 is not supported
:msgno.0103
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Action
:tab.+1
:ins 4.action -
:tab.+1
:msg.is not supported
.*
.* var1: var2 var3 Action var4 is not supported
:msgno.0103
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Action
:tab.+1
:ins 4.action -
:tab.+1
:msg.is not supported
.*
.* var1: var2 var3 Suported actions are: var7
:msgno.0104
:msgclass.I
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Supported actions are:
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Argument (var5) is invalid
:msgno.0105
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Argument (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 Argument (var5) is invalid
:msgno.0105
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Argument (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 Argument (var5) is invalid
:msgno.0105
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Argument (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 Argument (var5) is invalid
:msgno.0105
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Argument (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 Valid argument values are: var7
:msgno.0106
:msgclass.I
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Valid argument values are:
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Failed with R15=var5 Reason=var6
:msgno.0107
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 Failed with R15=var5 Reason=var6
:msgno.0107
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 Failed with R15=var5 Reason=var6
:msgno.0107
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 Failed with R15=var5 Reason=var6
:msgno.0107
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.Failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 Contains invalid data var7
:msgno.0108
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Contains invalid data
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Contains invalid data var7
:msgno.0108
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Contains invalid data
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Contains invalid data var7
:msgno.0108
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Contains invalid data
:tab.+1
:ins 7.text string -
.*
.* var1:var2 var3 Contains invalid data var7
:msgno.0108
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Contains invalid data
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 branch index (var5) is invalid
:msgno.0109
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - COPYBOOK
:tab.+1
:ins 3.component name - copybook name
:tab.+1
:msg.branch index (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 branch index (var5) is invalid
:msgno.0109
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - COPYBOOK
:tab.+1
:ins 3.component name - copybook name
:tab.+1
:msg.branch index (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 branch index (var5) is invalid
:msgno.0109
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - COPYBOOK
:tab.+1
:ins 3.component name - copybook name
:tab.+1
:msg.branch index (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 branch index (var5) is invalid
:msgno.0109
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - COPYBOOK
:tab.+1
:ins 3.component name - copybook name
:tab.+1
:msg.branch index (
:ins 5.number string -
:msg.) is invalid
.*
.* var1: var2 var3 "var7" not found
:msgno.0110
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg."
:ins 7.text string -
:msg."
:tab.+1
:msg.not found
.*
.* var1: var2 var3 "var7" not found
:msgno.0110
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg."
:ins 7.text string -
:msg."
:tab.+1
:msg.not found
.*
.* var1: var2 var3 "var7" not found
:msgno.0110
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg."
:ins 7.text string -
:msg."
:tab.+1
:msg.not found
.*
.* var1: var2 var3 "var7" not found
:msgno.0110
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg."
:ins 7.text string -
:msg."
:tab.+1
:msg.not found
.*
.* var1: var2 var3 Action var4 prematurely terminated due to data trunc
:msgno.0111
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.prematurely terminated due to data truncation
.*
.* var1: var2 var3 Action var4 prematurely terminated due to data trunc
:msgno.0111
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.prematurely terminated due to data truncation
.*
.* var1: var2 var3 Action var4 prematurely terminated due to data trunc
:msgno.0111
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.prematurely terminated due to data truncation
.*
.* var1: var2 var3 Action var4 prematurely terminated due to data trunc
:msgno.0111
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUB-ROUTINE
:tab.+1
:ins 3.component name - subroutine name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.prematurely terminated due to data truncation
.*
.* var1: var2 var3 is not numeric
:msgno.0112
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.is not numeric
.*
.* var1: var2 var3 is not numeric
:msgno.0112
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.is not numeric
.*
.* var1: var2 var3 is not numeric
:msgno.0112
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.is not numeric
.*
.* var1: var2 var3 was passed too many arguments
:msgno.0113
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too many arguments
.*
.* var1: var2 var3 was passed too many arguments
:msgno.0113
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too many arguments
.*
.* var1: var2 var3 was passed too many arguments
:msgno.0113
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too many arguments
.*
.* var1: var2 var3 was passed too many arguments
:msgno.0113
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too many arguments
.*
.* var1: var2 var3 was passed too few arguments
:msgno.0114
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too few arguments
.*
.* var1: var2 var3 was passed too few arguments
:msgno.0114
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too few arguments
.*
.* var1: var2 var3 was passed too few arguments
:msgno.0114
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too few arguments
.*
.* var1: var2 var3 was passed too few arguments
:msgno.0114
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - SUBROUTINE
:tab.+1
:ins 3.component name - &csect
:tab.+1
:msg.was passed too few arguments
.*
.* var1: var2 var3 numeric data (var5) is out of range (var7)
:msgno.0115
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.numeric data (
:ins 5.number string
:msg.) is out of range (
:ins 7.text string -
:msg.)
.*
.* var1: var2 var3 numeric data (var5) is out of range (var7)
:msgno.0115
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.numeric data (
:ins 5.number string
:msg.) is out of range (
:ins 7.text string -
:msg.)
.*
.* var1: var2 var3 numeric data (var5) is out of range (var7)
:msgno.0115
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.numeric data (
:ins 5.number string
:msg.) is out of range (
:ins 7.text string -
:msg.)
.*
.* var1: var2 var3 numeric data (var5) is out of range (var7)
:msgno.0115
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.numeric data (
:ins 5.number string
:msg.) is out of range (
:ins 7.text string -
:msg.)
.*
.* var1: var2 var3 underflow
:msgno.0116
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.underflow
.*
.* var1: var2 var3 underflow
:msgno.0116
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.underflow
.*
.* var1: var2 var3 underflow
:msgno.0116
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.underflow
.*
.* var1: var2 var3 underflow
:msgno.0116
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.underflow
.*
.* var1: var2 var3 overflow
:msgno.0117
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.overflow
.*
.* var1: var2 var3 overflow
:msgno.0117
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.overflow
.*
.* var1: var2 var3 overflow
:msgno.0117
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.overflow
.*
.* var1: var2 var3 overflow
:msgno.0117
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.overflow
.*
.* var1: var2 var3 Action var4 failed with R15=var5 REASON=var6
:msgno.0118
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 Action var4 failed with R15=var5 REASON=var6
:msgno.0118
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 Action var4 failed with R15=var5 REASON=var6
:msgno.0118
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 Action var4 failed with R15=var5 REASON=var6
:msgno.0118
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Action
:tab.+1
:ins 4.action
:tab.+1
:msg.failed with R15=
:ins 5.number string -
:tab.+1
:msg.Reason=
:ins 6.number string -
.*
.* var1: var2 var3 var7...
:msgno.0119
:msgclass.I
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 var8...
:msgno.0120
:msgclass.I
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:ins 8.text string -
.*
.* var1: var2 var3 Syntax error POS=var5 var7
:msgno.0121
:msgsubid.0001
:msgclass.W
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Syntax error POS=
:ins 5.number string -
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Syntax error POS=var5 var7
:msgno.0121
:msgsubid.0002
:msgclass.E
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Syntax error POS=
:ins 5.number string -
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Syntax error POS=var5 var7
:msgno.0121
:msgsubid.0003
:msgclass.S
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Syntax error POS=
:ins 5.number string -
:tab.+1
:ins 7.text string -
.*
.* var1: var2 var3 Syntax error POS=var5 var7
:msgno.0121
:msgsubid.0004
:msgclass.C
:ins 1.component - &csect
:msg.:
:tab.+1
:ins 2.component type - FIELD
:tab.+1
:ins 3.component name - field name
:tab.+1
:msg.Syntax error POS=
:ins 5.number string -
:tab.+1
:ins 7.text string -
.*
./ ADD NAME=ASUSSVCB 0149-15047-19325-1501-00581-00658-00000-APLKS   18
*PROCESS RENT
         TITLE 'ASUSSVCB - STRING SERVICE(S) PROVIDER'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* STRING SERVICE(S) PROVIDER
*
* PURPOSE: INTERFACE TO THE STRING SERVICES
*
*        CALL 'ASUSSVCB' USING ASCA, ACTION, ASU9LA02,
*             ASU9LA03, TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*           ACTION: (INPUT,FULLWORD)
*                   01 - RESERVED FOR SET
*                   02 - RESERVED FOR QUERY
*                   03 - RESERVED FOR PUSH
*                   04 - RESERVED FOR POP
*                   05 - APPEND
*                   06 - CENTER
*                   07 - COUNT
*                   08 - DE-EDIT        NUMERIC DATA PATTERNS
*                  *09 - N/A
*                   10 - JUSTIFY
*                   11 - LEFT
*                  *12 - LEX
*                   13 - RIGHT
*                   14 - SPACE
*                   15 - STRDEL
*                   16 - STRFPOS        FIRST/NEXT STRING POS
*                   17 - STRIP
*                   18 - STRISRT
*                   19 - STRLPOS        LAST/PREV STRING POS
*                   20 - STRBPOS        BOYER-MOORE FIRST/NEXT
*                   21 - STRREPL
*                   22 - SUBSTR
*                   23 - VAR / SCAN
*                   24 - VHEX           VERTICAL HEX FORMAT
*                   25 - WORDDEL
*                  *26 - N/A
*                   27 - WORDPOS
*                   28 - HHEX           HORIZONTAL HEX FORMAT
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUSSVCB'
&C       SETC  ''
&I       SETA  16
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF ASCA
R7       EQU   7              SERVICE TABLE INDEX
R8       EQU   8              BAR OF SERVICE TABLE ENTRY
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM1 DS    A              ADDRESS OF ACTION
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
SUBPARM4 DS    A              ADDRESS OF TEMPLATE COUNT
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         ORG   SUBPARM6
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
PGMADDR  DS    F
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@ACTION  DS    A
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO IF CALLED BY NON-LE          +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         SAVE ORIGINAL R1 VALUE
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     MAIN0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPA      CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=01,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 EQU   *
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
MAIN0100 EQU   *
         L     R1,SUBPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,EXIT0000
         MVC   SUBPARM0,@ASCA
         NC    SUBPARM0,=XL4'7FFFFFFF'
         TM    @ASCA,X'80'    Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         MVC   SUBPARM1,@ACTION
         NC    SUBPARM1,=XL4'7FFFFFFF'
         TM    @ACTION,X'80'  Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         MVC   SUBPARM2,@REQOPT
         NC    SUBPARM2,=XL4'7FFFFFFF'
         TM    @REQOPT,X'80'  Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         MVC   SUBPARM3,@SRCSTR
         NC    SUBPARM3,=XL4'7FFFFFFF'
         TM    @SRCSTR,X'80'  Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         MVC   SUBPARM4,@PATCNT
         NC    SUBPARM4,=XL4'7FFFFFFF'
         TM    @PATCNT,X'80'  Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         L     R2,SUBPARM4
         ICM   R0,15,0(R2)    Q. ANY TEMPLATE ENTRIES
         JZ    TXT0114A       A. NO,
         JM    TXT0114A       A. NEGATIVE
         CHI   R0,&I          Q. EXCEED LIMIT
         JH    TXT0113A       A. YES,
         ST    R0,PATCNT      SAVE PATTERN COUNT
         SPACE 1
         LA    R5,@PATSTR     POINT TO BEGIN OF VECTOR
         LA    R4,SUBPARM5    POINT TO BEGIN OF VECTOR
         LA    R2,4           SETUP INCR VALUE
         AHI   R0,-1          SUBT 1 FROM PATTERN COUNT
         SLL   R0,2           MULTIPLY BY 4
         LR    R3,R0          POINT TO END OF VECTOR
         AR    R3,R4
MAIN0110 EQU   *
         MVC   0(4,R4),0(R5)       SAVE ADDR OF PATTERN STR
*        MVC   SUBPARM5,@PATSTR    SAME AS ABOVE
         NC    0(4,R4),=XL4'7FFFFFFF'
*        NC    SUBPARM5,=XL4'7FFFFFFF'  SAME AS ABOVE
         TM    0(R5),X'80'    Q. LAST PARM
*        TM    @PATSTR,X'80'  SAME AS ABOVE
         JO    MAIN0130       A. YES
         AR    R5,R2          BUMP TO NEXT PATTERN
         BRXLE R4,R2,MAIN0110      PROCESS ALL PATTERNS
         SPACE 1
         MVC   SUBPARM6,0(R5)      SAVE ADDR OF LE FDBK
*        MVC   SUBPARM6,@PATSTR    SAME AS ABOVE
         NC    SUBPARM6,=XL4'7FFFFFFF'
         LARL  RE,MAIN0130
         TM    0(R5),X'80'    Q. LAST PARM
*        TM    @PATSTR,X'80'  SAME AS ABOVE
         JNO   TXT0113A       A. NO, TOO MANY PARAMETERS
MAIN0130 EQU   *
         DROP  R1
         LARL  RE,EXIT0000
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         CLC   ASCA_DSID,=Y($ASCA) Q. VALID ASCA
         DROP  R6
         JNE   ABEND850            A. NO
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE SERVICE/ACTION REQUESTED
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         L     R1,SUBPARM1    POINT TO ACTION
         ICM   R7,15,0(R1)    Q. VALID ACTION
         JZ    TXT0101A       A. NO
         CHI   R7,SRVTBL#     Q. VALID ACTION
         JH    TXT0101A       A. NO
         AHI   R7,-1
         SLL   R7,3
         LA    R8,SRVTBL(R7)  SET SERVICE TABLE ENTRY ADDR
         SPACE 2
* --------------------------------------------------------- *
* BUILD PARMLIST FOR CALL TO SERVICE/ACTION
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         L     R0,PATCNT
         CH    R0,BNDSHI(,R8) Q. VALID NUMBER OF TEMPLATES
         JH    TXT0113A       A. NO
         CH    R0,BNDSLO(,R8) Q. VALID NUMBER OF TEMPLATES
         JL    TXT0114A       A. NO
         SPACE 1
         MVC   PLIST+((1-1)*4)(L'SUBPARM0),SUBPARM0
*                             COPY ASCA
         MVC   PLIST+((2-1)*4)(L'SUBPARM2),SUBPARM2
*                             COPY REQUEST OPTIONS
         MVC   PLIST+((3-1)*4)(L'SUBPARM3),SUBPARM3
*                             COPY SOURCE STRING
         MVC   PLIST+((4-1)*4)(L'SUBPARM4),SUBPARM4
*                             COPY TEMPLATE COUNT
*        SETUP TEMPLATE LOOP WITH BRCT
         LA    R2,PLIST+((4-1)*4)
         LA    R1,SUBPARM5-4
MAIN0320 EQU   *
         AHI   R2,4           BUMP UP PLIST POSITION
         AHI   R1,4           BUMP UP SUBPARM5
         MVC   0(L'SUBPARM5,R2),0(R1)
*        MVC   PLIST,SUBPARM5      COPY TEMPLATES
         BRCT  R0,MAIN0320         PROCESS ALL PATTERNS
         AHI   R2,4
         SPACE 1
         OC    SUBPARM6,SUBPARM6   Q. FC AVAILABLE
         JZ    MAIN0340            A. NO
         MVC   0(L'SUBPARM6,R2),SUBPARM6     A. YES
         OI    0(R2),X'80'
         J     MAIN0344
MAIN0340 EQU   *
         AHI   R2,-4
         OI    0(R2),X'80'
MAIN0344 EQU   *
         OC    SRVMOD@(L'PGMADDR,R8),SRVMOD@(R8)
         JZ    TXT0103A
         MVC   PGMADDR,SRVMOD@(R8)
         SPACE 2
* --------------------------------------------------------- *
* CALL SERVICE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0400 AS2LTRCE
         LA    R1,PLIST
         L     RF,PGMADDR
*        CALL  SERVICE ROUTINE
         BASR  RE,RF     LINK TO
         SPACE 1
MAIN0440 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0101A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ACTION (VARIABLE 4)
         CVD   R7,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((4-1)*L'ISICOL)(3),ZD01+L'ZD01-3
**       J     MSG0101E
         SPACE 1
MSG0101E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU035_0002
**       J     MSG0101
         SPACE 1
MSG0101  EQU   *         ACTION IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0102A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(4),=CL4'5:28'
**       J     MSG0102I
         SPACE 1
MSG0102I EQU   *
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU036
**       J     MSG0102
         SPACE 1
MSG0102  EQU   *         VALID ACTIONS ARE
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0103A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ACTION (VARIABLE 4)
         CVD   R7,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((4-1)*L'ISICOL)(3),ZD01+L'ZD01-3
**       J     MSG0103E
MSG0103E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU037_0002
**       J     MSG0103
         SPACE 1
MSG0103  EQU   *         ACTION IS NOT SUPPORTED
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0104A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H21
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(21),=CL21'5:8,1+
               0,11,13:25,27,28'
**       J     MSG0104I
         SPACE 1
MSG0104I EQU   *
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU038
**       J     MSG0104
         SPACE 1
MSG0104  EQU   *         SUPPORTED ACTIONS ARE
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         DS    0D
* --------------------------------------------------------- *
*        0:3 ADDR OF SUBROUTINE TO CALL
*        4:5 MAXIMUM NUMBER OF TEMPLATE PARAMETERS
*        6:7 MINIMUM NUMBER OF TEMPLATE PARAMETERS
* --------------------------------------------------------- *
         SPACE 1
SRVTBL   EQU   *,8,C'X'
         DC    A(0),H'0',H'0'           01 - RESERVED FOR SET
         DC    A(0),H'0',H'0'           02 - RESERVED FOR QUERY
         DC    A(0),H'0',H'0'           03 - RESERVED FOR PUSH
         DC    A(0),H'0',H'0'           04 - RESERVED FOR POP
@APPEND  DC    V(ASUDAPND),H'1',H'1'    05 - APPEND
@CENTER  DC    V(ASUDCNTR),H'1',H'1'    06 - CENTER
@COUNT   DC    V(ASUDSCNT),H'3',H'1'    07 - COUNT
@DEDIT   DC    V(ASUDDEDT),H'1',H'1'    08 - DE-EDIT
         DC    A(0),H'0',H'0'           09 - N/A
@JUSTIFY DC    V(ASUDJSTF),H'2',H'1'    10 - JUSTIFY
@LEFT    DC    V(ASUDLEFT),H'1',H'1'    11 - LEFT
@LEX     DC    A(0),H'0',H'0'           12 - LEX
@RIGHT   DC    V(ASUDRGHT),H'1',H'1'    13 - RIGHT
@SPACE   DC    V(ASUDSPCE),H'2',H'1'    14 - SPACE
@STRDEL  DC    V(ASUDSDEL),H'2',H'1'    15 - STRING DELETE
@FPOS    DC    V(ASUDFPOS),H'3',H'2'    16 - STRING POS FIRST/NEXT
@STRIP   DC    V(ASUDSTRP),H'1',H'1'    17 - STRIP
@STRISRT DC    V(ASUDSINS),H'2',H'2'    18 - STRING INSERT
@LPOS    DC    V(ASUDLPOS),H'3',H'2'    19 - STRING POS LAST/PREV
@BPOS    DC    V(ASUDBPOS),H'2',H'2'    20 - BOYER-MOORE POS
@STRREPL DC    V(ASUDSREP),H'3',H'2'    21 - STRING REPLACE
@SUBSTR  DC    V(ASUDSSUB),H'1',H'1'    22 - SUB-STRING
@VAR     DC    V(ASUDSVAR),H'17',H'1'   23 - VAR / SCAN
@VHEX    DC    V(ASUDVHEX),H'4',H'3'    24 - VERTICAL HEX
@WORDDEL DC    V(ASUDWDEL),H'3',H'1'    25 - WORD DELETE
         DC    A(0),H'0',H'0'           26 - N/A
@WORDPOS DC    V(ASUDWPOS),H'3',H'1'    27 - WORD POS
@HHEX    DC    V(ASUDHHEX),H'3',H'2'    28 - HORIZONTAL HEX
SRVTBL#  EQU   (*-SRVTBL)/L'SRVTBL
SRVMOD@  EQU   0    OFFSET OF SERVICE ADDRESS
BNDSHI   EQU   4    OFFSET OF HIGH PARAMETER BOUNDS
BNDSLO   EQU   6    OFFSET OF LOW PARAMETER BOUNDS
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H6       DC    H'6'
H8       DC    H'8'
H11      DC    H'11'
H21      DC    H'21'
         SPACE 2
         LTORG
         DROP  R9
         END
./ ADD NAME=ASU3I01B 0119-17362-19316-1132-00884-00844-00000-APLKS   47
*PROCESS RENT
         TITLE 'AS UTILITY INITIALIZE THE CONTROL BLOCKS'
*************************************************************
* ARCHITECTURE SERVICES UTILITY COMMON
* Initialize the control blocks
*
*    Name: ASU3I01B
*
* Purpose: Create and initialize the AS control blocks.
*          1 - heap(s)   create Heap storage
*          2 - ASCA      communication area
*          3 - ASAB      anchor block
*          4 - ASAB1     anchor block extension (batch)
*
*************************************************************
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASU3I01B'
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         PRINT ON,GEN
         SPACE 2
* --------------------------------------------------------- *
* Expand DSECT(s)
* --------------------------------------------------------- *
         SPACE 1
ASABHDR  AS1MASDS ADS=ASAB,MF=D    expand AS anchor block
ASABXHDR AS1MASDS ADS=ASAB1,MF=D   expand AS anchor block extention
         SPACE 1
ASCAHDR  AS1MASDS ADS=ASCA,MF=D    expand AS communication area
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              work register
R1       EQU   1              work register, address of parm list
R2       EQU   2              work register
R3       EQU   3              work register
R4       EQU   4              not used
R5       EQU   5              not used
R6       EQU   6              not used
R7       EQU   7              BAR of ASAB
R8       EQU   8              BAR of ASABX, ASCA
R9       EQU   9              static storage BAR
RA       EQU   10             program BAR 1
RB       EQU   11             reserved for program BAR 2
RC       EQU   12             LE CAA BAR
RD       EQU   13             RSA/DSA BAR 1
RE       EQU   14             return address
RF       EQU   15             branch and link address
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         POP   PRINT
         EJECT
         CEEDSA
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,LEWORK)
         SPACE 1
RTNCD    DS    F              return code R15
RSNCD    DS    F              error  code R0
         SPACE 1
HEAP0    DS    F              LE HEAP id 0
HEAP1    DS    F              LE HEAP id BTL
HEAP2    DS    F              LE HEAP id ATL
         SPACE 1
SUBPARM1 DS    A              addr of ASCA ptr
*                             ..should point to a zero value on entry
SUBPARM2 DS    A              LE FDBK / LEFC
         SPACE 1
LS_@ASAB DS    A              addr of ASAB
LS_@ASABX DS   A              addr of ASAB1
LS_@ASCA DS    A              addr of ASCA
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              caller's R1
         SPACE 1
         AS1MUTSA UDS=RESA
         DS    0D
         AS1MUTSA UDS=LTRACE
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: parameter list passed to this subordinate rtn
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
ASCAptr  DS    A              pointer to AS COMMAREA addr
@FDBK    DS    A              LE FEED BACK AREA
         SPACE 2
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   0=ESA 1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO if called by non-LE          +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         save original R1 value
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         B     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPA      CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=01,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINE(S)
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *         initialize DSA storage
         LA    R0,CLRBEG
         LAY   R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear DSA storage
         MVC   LEMDEST,F2
         XC    RESA,RESA      clear R14 save area count
         SPACE 1
INIT0100 EQU   *
         L     R1,SUBPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,EXIT0000
         MVC   SUBPARM1,ASCAptr
         NC    SUBPARM1,=XL4'7FFFFFFF'
         TM    ASCAptr,X'80'  Q. last parameter
         JO    INIT0120       A. NO,
         SPACE 1
INIT0110 EQU   *
         MVC   SUBPARM2,@FDBK
         NC    SUBPARM2,=XL4'7FFFFFFF'
         TM    @FDBK,X'80'    Q. last parameter
         JNO   TXT0113A       A. NO,
         SPACE 1
INIT0120 EQU   *
         SPACE 1
INIT0700 EQU   *
         DROP  R1
         L     R1,SUBPARM1
         ICM   R0,15,0(R1)    Q. ASCA ptr > zero
         JNZ   TXT0105A       A. YES, error
         SPACE 1
INIT0900 EQU   *
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 1
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 AS2LTRCE ,
         BRAS  RE,CHEAP100    create HEAP storage
         BRAS  RE,CASAB100    create ASAB & ASAB1
         BRAS  RE,CASCA100    create ASCA
         BRAS  RE,IASAB100    initialize ASAB & ASAB1
         BRAS  RE,IASCA100    initialize ASCA
         SPACE 2
* --------------------------------------------------------- *
* EXIT ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 AS2LTRCE
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         SPACE 2
* --------------------------------------------------------- *
* CALLABLE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
CHEAP100 AS2LTRCE ,      create LE HEAP(s)
         AS2RESTK PUSH
*        create initial default LE HEAP
         XC    HEAP0,HEAP0
         AS2PLIST (HEAP0,HSIZE,HINCR,HOPTS,LEFC),                      +
               VL,MF=(E,PLIST)
*        CALL CEECRHP         create LE HEAP
         L     RF,@CEECRHP
         BASR  RE,RF     link to
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. SEVERITY > 2
         JH    TXT0107A       A. yes,
         SPACE 1
*        create initial below-the-line LE HEAP
         XC    HEAP1,HEAP1
         AS2PLIST (HEAP1,HSIZE8K,HINCR8K,HOPTS73,LEFC),                +
               VL,MF=(E,PLIST)
*        CALL CEECRHP         create LE HEAP
         L     RF,@CEECRHP
         BASR  RE,RF     link to
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. SEVERITY > 2
         JH    TXT0107B       A. yes,
         SPACE 1
*        create initial above-the-line LE HEAP init 0
         XC    HEAP2,HEAP2
         AS2PLIST (HEAP2,HSIZE,HINCR,HOPTS79,LEFC),                    +
               VL,MF=(E,PLIST)
*        CALL CEECRHP         create LE HEAP
         L     RF,@CEECRHP
         BASR  RE,RF     link to
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. SEVERITY > 2
         JH    TXT0107C       A. yes,
         SPACE 1
CHEAP900 AS2LTRCE
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
CASAB100 AS2LTRCE ,      create ASAB
         AS2RESTK PUSH
*        get storage for ASAB
         XC    LS_@ASAB,LS_@ASAB
         AS2PLIST (HEAP2,=A(ASAB_#LEN),LS_@ASAB,LEFC),                 +
               VL,MF=(E,PLIST)
*        CALL CEEGTST         get storage
         L     RF,@CEEGTST
         BASR  RE,RF     link to
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. severity > 2
         JH    TXT0107D       A. yes,
         SPACE 1
*        get storage for ASABX
         XC    LS_@ASABX,LS_@ASABX
         AS2PLIST (HEAP2,=A(ASAB1_#LEN),LS_@ASABX,LEFC),               +
               VL,MF=(E,PLIST)
*        CALL CEEGTST         get storage
         L     RF,@CEEGTST
         BASR  RE,RF     link to
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. severity > 2
         JH    TXT0107E       A. yes,
         SPACE 1
CASAB900 AS2LTRCE
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
CASCA100 AS2LTRCE ,      create ASCA
         AS2RESTK PUSH
*        get storage for ASCA
         XC    LS_@ASCA,LS_@ASCA
         AS2PLIST (HEAP2,=A(ASCA_#LEN),LS_@ASCA,LEFC),                 +
               VL,MF=(E,PLIST)
*        CALL CEEGTST         get storage
         L     RF,@CEEGTST
         BASR  RE,RF     link to
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. severity > 2
         JH    TXT0107F       A. yes,
         L     R1,SUBPARM1
         MVC   0(L'LS_@ASCA,R1),LS_@ASCA     save @ASCA in ASCA ptr
         SPACE 1
CASCA900 AS2LTRCE
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
IASAB100 AS2LTRCE ,      initialize ASAB & ASAB1
         AS2RESTK PUSH
*        initialize the AS anchor block
         L     R7,LS_@ASAB    get addr of ASAB
         USING ASABHDR,R7     est addr to ASAB
         LA    R0,ASAB_#LEN
         STH   R0,ASAB_DSLEN  init ASAB length
         LA    R0,$ASAB
         STH   R0,ASAB_DSID   init ASAB id
         MVC   ASAB_EYE,=C'**ASAB**'
         L     R0,LS_@ASCA
         ST    R0,ASAB_@ASCA  init ASCA addr
         L     R8,LS_@ASABX   get addr of ASABX
         ST    R8,ASAB_@ASABX init ASAB batch extension addr
*        initialize the AS batch anchor block extension
         USING ASABXHDR,R8    est addr to ASABX
         LA    R0,ASAB1_#LEN
         STH   R0,ASAB1_DSLEN init ASAB1 length
         L     R0,HEAP0       get LE HEAP 0 ID
         ST    R0,ASAB1_#USRH
         L     R0,HEAP1       get LE HEAP BTL ID
         ST    R0,ASAB1_#BTLH
         L     R0,HEAP2       get LE HEAP ATL ID
         ST    R0,ASAB1_#ATLH
         SPACE 1
         CEELOAD ,                                                     +
               NAME=ASUMETXT,                                          +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,ASAB1_@METXT     AS message dispatch sub-pgm
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. severity > 2
         JH    TXT0107G       A. yes,
         SPACE 1
         CEELOAD ,                                                     +
               NAME=ASU3PM1B,                                          +
               FEEDBACK=LEFC,                                          +
               MF=(E,PLIST)
         ST    RF,ASAB1_@#PM1B     AS program manager sub-pgm
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,LEMSEV
         SRL   R0,16
         C     R0,F2          Q. severity > 2
         JH    TXT0107G       A. yes,
         DROP  R8
         SPACE 1
IASAB900 AS2LTRCE
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
IASCA100 AS2LTRCE ,      initialize ASCA
         AS2RESTK PUSH
         L     R8,LS_@ASCA    get addr of ASCA
         USING ASCAHDR,R8     est addr to ASCA
         LA    R0,ASCA_#LEN
         STH   R0,ASCA_DSLEN  init ASCA length
         LA    R0,$ASCA
         STH   R0,ASCA_DSID   init ASCA id
         MVC   ASCA_EYE,=C'**ASCA**'
         MVC   ASCA_@ASAB,LS_@ASAB
         SPACE 1
*        get current GMT
         AS2PLIST (ASCA_GMT_LDAYS,ASCA_GMT_LSEC,0),                    +
               VL,MF=(E,PLIST)
*        CALL CEEGMT
         L     RF,@CEEGMT
         BASR  RE,RF     link to
         SPACE 1
*        get current Lilian date
         AS2PLIST (ASCA_CUR_LDAYS,ASCA_CUR_LSEC,ASCA_CUR_DTTM,0),      +
               VL,MF=(E,PLIST)
*        CALL CEELOCT
         L     RF,@CEELOCT
         BASR  RE,RF     link to
         SPACE 1
*        get current DOW
         AS2PLIST (ASCA_CUR_LDAYS,ASCA_CUR_DOWNBR,0),                  +
               VL,MF=(E,PLIST)
*        CALL CEEDYWK
         L     RF,@CEEDYWK
         BASR  RE,RF     link to
         SPACE 1
*        get national language
         MVC   LEFUNCT,F2          set action to QUERY
         AS2PLIST (LEFUNCT,ASCA_NLANG,0),                              +
               VL,MF=(E,PLIST)
*        CALL CEE3LNG
         L     RF,@CEE#LNG
         BASR  RE,RF     link to
         SPACE 1
*        get current country
         MVC   LEFUNCT,F2          set action to QUERY
         AS2PLIST (LEFUNCT,ASCA_CNTRY,0),                              +
               VL,MF=(E,PLIST)
*        CALL CEE3CTY
         L     RF,@CEE#CTY
         BASR  RE,RF     link to
         SPACE 1
*        get monetary decimal separator
         AS2PLIST (ASCA_CNTRY,ASCA_COMDS,0),                           +
               VL,MF=(E,PLIST)
*        CALL CEE3MDS
         L     RF,@CEE#MDS
         BASR  RE,RF     link to
         SPACE 1
*        get monetary thousands separator
         AS2PLIST (ASCA_CNTRY,ASCA_COMTS,0),                           +
               VL,MF=(E,PLIST)
*        CALL CEE3MTS
         L     RF,@CEE#MTS
         BASR  RE,RF     link to
         SPACE 1
*        get monetary currency symbol
         AS2PLIST (ASCA_CNTRY,ASCA_COMCS,ASCA_INMCS,0),                +
               VL,MF=(E,PLIST)
*        CALL CEE3MC2
         L     RF,@CEE#MC2
         BASR  RE,RF     link to
         SPACE 1
*        get date & time stamp format
         AS2PLIST (ASCA_CNTRY,ASCA_TSPAT,0),                           +
               VL,MF=(E,PLIST)
*        CALL CEEFMDT
         L     RF,@CEEFMDT
         BASR  RE,RF     link to
         SPACE 1
         XC    ASCA_TSLEN,ASCA_TSLEN
*        compute length of ASCA_TSPAT
         LA    R1,ASCA_TSPAT
         XR    R2,R2
*        find last non-blank char in ASCA_TSPAT
         TRTR  ASCA_TSPAT+L'ASCA_TSPAT-1,VCHTBL   Q. find last char
*              R2 - MATCHING BYTE
*              R1 - ADDR OF MATCHING BYTE
*              CC 0 -> JE|JZ ALL ACCESSED FUNCT BYTES WERE ZERO
*              CC 1 -> JL|JM NONZERO FUNCT BYTE BEFORE END
*              CC 2 -> JH|JP NONZERO FUNCT BYTE AT END
         JZ    IASCA110       A. NO hits
         LA    R0,ASCA_TSPAT
         SR    R1,R0          compute length of ASCA_TSPAT
         AHI   R1,1
         STH   R1,ASCA_TSLEN  save length of ASCA_TSPAT
         SPACE 1
IASCA110 EQU   *
         DROP  R8
         SPACE 1
IASCA900 AS2LTRCE
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT NBR STRING (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((5-1)*L'ISICOL)(6),=CL6'1-ASCA'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *    ARGUMENT (VARIABLE 5) IS INVALID
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *
*        insert ISI for variable 1
         LA    R2,ISICOL+((1-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 2
         LA    R2,ISICOL+((2-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 3
         LA    R2,ISICOL+((3-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 5
         LA    R2,ISICOL+((5-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        DISPATCH AS MESSAGE
         AS2PLIST (ISICTOK,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,@CEEMSG
         BASR  RE,RF     link to
         SPACE 1
TXT0106A EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'= 0'
**       J     MSG0106I
         SPACE 1
MSG0106I EQU   *              VALID ARGUMENT VALUES ARE:
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03A
**       J     MSG0106
         SPACE 1
MSG0106  EQU   *
*        insert ISI for variable 1
         LA    R2,ISICOL+((1-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 2
         LA    R2,ISICOL+((2-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 3
         LA    R2,ISICOL+((3-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 7
         LA    R2,ISICOL+((7-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        DISPATCH AS MESSAGE
         AS2PLIST (ISICTOK,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,@CEEMSG
         BASR  RE,RF     link to
         J     ERTN0800
         SPACE 2
TXT0107A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CEECRHP'
         J     MSG0107W
         SPACE 1
TXT0107B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CEECRHP'
         J     MSG0107W
         SPACE 1
TXT0107C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CEECRHP'
         J     MSG0107W
         SPACE 1
TXT0107D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CEEGTST'
         J     MSG0107W
         SPACE 1
TXT0107E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CEEGTST'
         J     MSG0107W
         SPACE 1
TXT0107F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CEEGTST'
         J     MSG0107W
         SPACE 1
TXT0107G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CEELOAD'
**       J     MSG0107W
         SPACE 1
MSG0107W EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0001
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         LH    R0,LEMSEV
         SLL   R0,2
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         LH    R0,LEMNBR
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        DISPATCH LE SERVICE MESSAGE
         AS2PLIST (LEFC,LEMDEST,0),                                    +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,@CEEMSG
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 1
         LA    R2,ISICOL+((1-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 2
         LA    R2,ISICOL+((2-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 3
         LA    R2,ISICOL+((3-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 5
         LA    R2,ISICOL+((5-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 6
         LA    R2,ISICOL+((6-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        DISPATCH AS MESSAGE
         AS2PLIST (ISICTOK,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,@CEEMSG
         BASR  RE,RF     link to
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     MSG0113I
         SPACE 1
MSG0113I EQU   *              VALID ARGUMENT VALUES ARE:
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0001
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *
*        insert ISI for variable 1
         LA    R2,ISICOL+((1-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 2
         LA    R2,ISICOL+((2-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        insert ISI for variable 3
         LA    R2,ISICOL+((3-1)*L'ISICOL)
         AS2PLIST (ISICTOK,F1,0(,R2),0),                               +
               VL,MF=(E,PLIST)
*        CALL CEECMI
         L     RF,@CEECMI
         BASR  RE,RF     link to
         SPACE 1
*        DISPATCH AS MESSAGE
         AS2PLIST (ISICTOK,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMSG
         L     RF,@CEEMSG
         BASR  RE,RF     link to
**       J     ERTN0800
         SPACE 2
ERTN0800 EQU   *
         ICM   R1,15,SUBPARM2
         JZ    ERTN0810
         MVC   0(L'ISICTOK,R1),ISICTOK
         SPACE 1
ERTN0810 EQU   *
         SPACE 1
ERTN0840 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
STATIC   DS    0D
*        COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
@CEECMI  DC    V(CEECMI)
@CEECRHP DC    V(CEECRHP)
@CEEDYWK DC    V(CEEDYWK)
@CEEFMDT DC    V(CEEFMDT)
@CEEGMT  DC    V(CEEGMT)
@CEEGTST DC    V(CEEGTST)
@CEELOCT DC    V(CEELOCT)
@CEEMSG  DC    V(CEEMSG)
@CEE#CTY DC    V(CEE3CTY)
@CEE#LNG DC    V(CEE3LNG)
@CEE#MC2 DC    V(CEE3MC2)
@CEE#MDS DC    V(CEE3MDS)
@CEE#MTS DC    V(CEE3MTS)
         SPACE 1
HSIZE    DC    F'0'           default heap size
HSIZE8K  DC    F'8192'        heap size
HINCR    DC    F'0'           default heap incr
HINCR8K  DC    F'8192'        heap incr
HOPTS    DC    F'0'           default heap option
HOPTS73  DC    F'73'          heap option HEAP(,,BELOW,KEEP)
HOPTS79  DC    F'79'          heap option HEAP(,,ANY,KEEP) INIT 0
         SPACE 1
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F8       DC    F'8'
F76      DC    F'76'
         SPACE 1
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H14      DC    H'14'
H15      DC    H'15'
         SPACE 1
         AS1LAIDA UDS=PERSIST
         SPACE 1
         LTORG
         END
./ ADD NAME=ASU3PM1B 0118-19289-19317-0929-00755-07446-00000-APLKS   53
*PROCESS RENT
         TITLE 'AS PROGRAM MANAGEMENT'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY MVS
* PROGRAM MANAGEMENT
*
*    NAME: ASU3PM1B
* PURPOSE: PROGRAM MANAGEMENT.
*    DESC: RETURN THE ENTRY POINT ADDRESS OF A MODULE.
*
*        CALL 'ASU3PM1B' USING ASCA, ASRB, FC.
*
*        WHERE:
*              ASCA: AS COMMUNICATION AREA
*              ASRB: AS REQUEST BLOCK
*                FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                    LE FEEDBACK DATA TYPE
*
*---------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASU3PM1B'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, addr of PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              not used
R5       EQU   5              BAR of ASAB, ASABX
R6       EQU   6              BAR of ASCA
R7       EQU   7              BAR of ASRB
R8       EQU   8              not used
R9       EQU   9              BAR of STATIC DATA area
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             not used
RC       EQU   12             LE CAA BAR
RD       EQU   13             BAR of RSA/LE DSA
RE       EQU   14             RETURN addr
RF       EQU   15             BRANCH and LINK addr
         SPACE 2
**   LE CWI services
**                            MVS  services
**                            UNIX BPX1LOD sevice
**                            CICS EXEC CICS services
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
#CEEPLOD2 EQU   3948          enclave/thread level load service
*                             ..specify search order
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..F'0:17,18:23,     input
*                             ....24:31' 0-thread 1-enclave
*                             ..F'token' output
*                             ..A(ep addr of module) output
*                             ..3F'feedback' optional
#CEEPDEL EQU   84             enclave level delete service
*                             ..F'length of name' input
*                             ..CL8'name of module' input
*                             ..3F'feedback' optional
#CEEPDEL2 EQU   3952          enclave level delete service
*                             ..delete module loaded by CEEPLOD2
*                             ..F'token' input
*                             ..3F'feedback' optional
* #CEEPQLD EQU   3596           query info on loaded module
#CEEPQLD EQU   3956           z/OS 1.13 query info on loaded module
*                             ..for those loaded by CEEPLOD2
*                             ..F'token' input
*                             ..F'length of name' input/output
*                             ..C'name of module' output
*                             ..A(lp addr of module) output
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
#CEEPLODT EQU   3492          thread level load service
*                             ..F'length of name' input
*                             ..CL8'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
#CEEPDELT EQU   3496          thread level delete service
*                             ..F'length of name' input
*                             ..CL8'name of module' input
*                             ..3F'feedback' optional
         EJECT
         PUSH  PRINT
         PRINT NOGEN
         CEECAA
         SPACE 2
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(RESA,MISC,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
         ORG   SUBPARM0
PGMPARM1 DS    A              ADDRESS OF ASCA
PGMPARM2 DS    A              ADDRESS OF ASRB
PGMPARM3 DS    A              ADDRESS OF LE FEEDBACK AREA
         ORG   PGMPARM3
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F              RETURN CODE
RSNCD    DS    F              REASON CODE
         SPACE 2
*                             CSV return info
LS_CSV_VALID DS    0F
         BITDEF $CSV_OUTLENGTH,         ..validity byte-0              +
               $CSV_OUTEPA,                                            +
               $CSV_OUTEPNM,                                           +
               $CSV_OUTMJNM,                                           +
               $CSV_OUTSP,                                             +
               $CSV_OUTATTR1,                                          +
               $CSV_OUTATTR2,                                          +
               $CSV_OUTATTR3
         BITDEF $CSV_OUTLOADPT,         ..validity byte-1              +
               $CSV_OUTPDATA,                                          +
               $CSV_OUTPID,                                            +
               $CSV_OUTEPTKN,                                          +
               $CSV_OUTXLST,                                           +
               $CSV_OUTDIAG,                                           +
               $CSV_OUTRTID,                                           +
               $CSV_NULL1
         BITDEF $CSV_OUTEPA64,          ..validity byte-2              +
               $CSV_OUTLOADPT64,                                       +
               $CSV_OUTLENGTH64,                                       +
               $CSV_OUTXTLST64,                                        +
               $CSV_OUTXATTR1,                                         +
               $CSV_OUTPATHNAME,                                       +
               $CSV_OUTDSKEY
         BITDEF $CSV_NULL3              ..validity byte-3
LS_CSV_ATTR  DS    0XL3       ..load module attribute byte 0:2
LS_CSV_ATTR0 DS    0XL1       ....load module attribute byte 0
         BITDEF $CSV_EOMDEL,                                           +
               $CSV_LOADED2GLOBAL,                                     +
               $CSV_RENT,                                              +
               $CSV_REUS,                                              +
               $CSV_NOTLOADABLEONLY,                                   +
               $CSV_OVERLAY,                                           +
               $CSV_ALIAS,                                             +
               $CSV_NULL11
LS_CSV_ATTR1 DS    0XL1       ....load module attribute byte 1
         BITDEF $CSV_AUTHLIB,                                          +
               $CSV_AUTHPGM,                                           +
               $CSV_AMODEANY,                                          +
               $CSV_AMODE31,                                           +
               $CSV_NULL12,                                            +
               $CSV_DYNLPA,                                            +
               $CSV_PAGEPROT,                                          +
               $CSV_AMODE64
LS_CSV_ATTR2 DS    0XL1       ....load module attribute byte 2
         BITDEF $CSV_RESATL,                                           +
               $CSV_RESJPA,                                            +
               $CSV_RESPLPA,                                           +
               $CSV_RESMLPA,                                           +
               $CSV_RESFLPA,                                           +
               $CSV_RESCSA
         DS    XL1
LS_CSV_LOADER DS    CL4       ..loaded by PID
*                             ....UNK  - unknown provider
*                             ....LPA  - link pack area
*                             ....PGMF - program fetch
*                             ....LLAF - library look-aside facility
*                             ....AOSL - AOS loader
*                             ....JPA  - job pack area
LS_CSV_POBJLEN DS    F        ..pgm obj length
LS_CSV_POBJLPA DS    A        ..pgm obj load point addr
LS_CSV_POBJEPA DS    A        ..pgm obj entry point addr
         SPACE 2
         CSVQUERY PLISTVER=MAX,                                        +
               MF=(L,CSVQRYWK)
         SPACE 2
LS_@LP   DS    A              addr load point
LS_@EP   DS    A              addr entry point
LS_@LB   DS    A              addr last byte
LS_SIZE  DS    F              size of load module | pgmobj
LS_SLEN  DS    F              scan length (@LB - @EP + 1)
         SPACE 2
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
PGMPLIST DS    A              original R1 value
         SPACE 2
**       AS1MUTSA UDS=(LTRACE)
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         EJECT
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ptr to ARCH SERVICES COMMAREA
@ASRB    DS    A              ptr to ARCH SERVICES REQUEST BLOCK
@LEFDBK  DS    A              ptr to LE FEEDBACK AREA
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,MF=D
ASABHDR  AS1MASDS ADS=ASAB,MF=D
ASABXHDR AS1MASDS ADS=ASAB1,MF=D
ASRBHDR  AS1MASDS ADS=ASRB,MF=D
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
*        PRINT NOGEN
         SYSSTATE ARCHLVL=2   0=ESA 1=ESA/390 2=z/ARCH
         IEABRCX DEFINE
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         ST    R1,PGMPLIST
         SPACE 1
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 1
         USING CEECAA,RC
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT NOGEN
PPA      CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=01,                                                 +
               REL=01,                                                 +
               MOD=00,                                                 +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *              initialize dynamic storage
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear storage
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 1
INIT0100 AS2LTRCE
         L     R1,PGMPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,MAIN8000    set default return
         MVC   PGMPARM1,@ASCA
         NC    PGMPARM1,=XL4'7FFFFFFF'
         TM    @ASCA,X'80'    Q. last parm
         JO    TXT0114A       A. yes, not enough parameters
         SPACE 1
         MVC   PGMPARM2,@ASRB
         NC    PGMPARM2,=XL4'7FFFFFFF'
         TM    @ASRB,X'80'    Q. last parm
         JO    INIT0120       A. yes, bypass
         SPACE 1
         MVC   PGMPARM3,@LEFDBK    save addr of LE FDBK
         NC    PGMPARM3,=XL4'7FFFFFFF'
         LARL  RE,INIT0120    set default return
         TM    @LEFDBK,X'80'  Q. last parm
         JNO   TXT0113A       A. no, too many parameters
         DROP  R1
INIT0120 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* MAIN ROUTINE(S)
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 AS2LTRCE
         LARL  RE,MAIN8000    set default return
         L     R7,PGMPARM2    get request block
         USING ASRBHDR,R7
         CLC   ASRB_DSID,=Y($ASRB) Q. valid ASRB
         JNE   TXT0108A            A. no, error
         CLC   ASRB_SVCMOD,=CL8'&CSECT' Q. right service module
         JNE   TXT0108B                 A. no, error
         SPACE 1
         L     RF,ASRB_SVCACT get action code
         CHI   RF,1           Q. valid action
         JL    TXT0101A       A. no, error
         CHI   RF,2           Q. valid action
         JH    TXT0101A       A. no, error
         SLL   RF,2           multiply by 4
         B     *+4(RF)
         J     TXT0101A       0 - invalid action
         J     LMOD0100       1 - CEEPLOD enclave load module
         J     DMOD0200       2 - CEEPDEL enclave delete module
         SPACE 2
* --------------------------------------------------------- *
* POST PROCESSING / PRE-TERMINATION
* --------------------------------------------------------- *
         SPACE 1
MAIN8000 AS2LTRCE
         SPACE 1
MAIN8990 EQU   *
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* ROUTINE(S)
* --------------------------------------------------------- *
         SPACE 1
* --------------------------------------------------------- *
* Process ACTION CEEPLOD enclave load module
* --------------------------------------------------------- *
         SPACE 1
LMOD0100 AS2LTRCE ,      ACTION(CEEPLOD enclave load)
         BRAS  RE,CSV0100
         CLC   RTNCD,F0       Q. module in storage
         JE    LMOD0190       A. yes, bypass
         SPACE 1
         AS2PLIST (F8,ASRB_PGMNME,LS_@EP,LS_SIZE,LEFC),                +
               VL,MF=(E,PLIST)
*        CALL  CEEPLOD
         L     RF,CEECAACELV       point to LIBVEC
         L     RF,#CEEPLOD(,RF)
         BASR  RE,RF
         LARL  RE,MAIN8000    set default return
         CLC   LECTOK,CEE000  Q. any errors
         JE    LMOD0110       A. no, bypass
         MVC   RTNCD,F4       A. yes, not found
         MVC   RSNCD,F16
         AS2PLIST (LEFC,0,0),                                          +
               VL,MF=(E,PLIST)
*        CALL CEESGL
         L     RF,=V(CEESGL)
         BASR  RE,RF     link to
         J     LMOD0190
LMOD0110 EQU   *
         MVC   ASRB_PGM@EP,LS_@EP
         NC    LS_@EP,=XL4'7FFFFFFF'
         SPACE 1
LMOD0190 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* Process ACTION CEEPDEL enclave delete module
* --------------------------------------------------------- *
         SPACE 1
DMOD0200 AS2LTRCE ,      ACTION(CEEPDEL enclave delete)
         BRAS  RE,CSV0100
         CLC   RTNCD,F0       Q. module in storage
         JNE   DMOD0290       A. no, bypass
         MVC   RTNCD,F0
         SPACE 1
         AS2PLIST (F8,ASRB_PGMNME,LEFC),                               +
               VL,MF=(E,PLIST)
*        CALL  CEEPDEL
         L     RF,CEECAACELV       point to LIBVEC
         L     RF,#CEEPDEL(,RF)
         BASR  RE,RF
         LARL  RE,MAIN8000    set default return
         CLC   LECTOK,CEE000  Q. any errors
         JE    DMOD0210       A. no, bypass
         MVC   RTNCD,F4       A. yes, not successful
         MVC   RSNCD,F16
         AS2PLIST (LEFC,0,0),                                          +
               VL,MF=(E,PLIST)
*        CALL CEESGL
         L     RF,=V(CEESGL)
         BASR  RE,RF     link to
         J     DMOD0290
DMOD0210 EQU   *
         MVC   LS_@EP,F0
         MVC   ASRB_PGM@EP,F0
         SPACE 1
DMOD0290 AS2LTRCE
         J     MAIN8000
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINE(S)
* --------------------------------------------------------- *
         SPACE 1
* --------------------------------------------------------- *
* Retrieve program information (CSV)
* --------------------------------------------------------- *
         SPACE 1
CSV0100  AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         CSVQUERY SEARCH=JPALPA,                                       +
               INEPNAME=ASRB_PGMNME,                                   +
               OUTVALID=LS_CSV_VALID,                                  +
               OUTEPA=LS_CSV_POBJEPA,                                  +
               MF=(E,CSVQRYWK)
**             OUTATTR1=LS_CSV_ATTR0,
**             OUTATTR2=LS_CSV_ATTR1,
**             OUTATTR3=LS_CSV_ATTR2,
**             OUTLENGTH=LS_CSV_POBJLEN,
**             OUTLOADPT=LS_CSV_POBJLPA,
**             OUTPID=LS_CSV_LOADER,
*        RF=0  successful
*           4  module found, 1 or more fields not valid
*           8  module not found
*           12 cannot obtain the lock(s)
*           16 unexpected error
*           20 invalid request
         ST    RF,RTNCD
         LARL  RE,CSV0800     set default return
         CHI   RF,8           Q. bad error
**       JL    CSV0110        A. no, bypass
         JL    CSV0210        A. no, bypass
         JE    CSV0800        A. yes, not found
         J     TXT0107A       A. yes, error
         SPACE 1
CSV0110  EQU   *         LS_CSV_ATTR0
CSV0130  EQU   *         LS_CSV_ATTR1
CSV0150  EQU   *         LS_CSV_ATTR2
CSV0170  EQU   *         LS_CSV_POBJLEN
CSV0190  EQU   *         LS_CSV_POBJLPA
         SPACE 1
CSV0210  EQU   *         LS_CSV_POBJEPA
         MVC   RTNCD,F8       preset RTNCD
         JBITOFF ($CSV_OUTEPA),CSV0230  Q. pgm obj entry pt addr
         MVC   ASRB_PGM@EP,LS_CSV_POBJEPA    A. yes,
         MVC   LS_@EP,LS_CSV_POBJEPA
         NC    LS_@EP,=XL4'7FFFFFFF'
         MVC   RTNCD,F0
**       J     CSV0250
         SPACE 1
CSV0230  EQU   *         LS_CSV_LOADER
CSV0250  EQU   *
         SPACE 1
CSV0800  AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0101A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT ACTION (VARIABLE 4)
         L     R1,ASRB_SVCACT
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0101E
         SPACE 1
MSG0101E EQU   *              ACTION IS INVALID
         MVC   ISICTOK,F0
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU035_0002
**       J     MSG0101
         SPACE 1
MSG0101  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0102A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'1,2'
**       J     MSG0102I
         SPACE 1
MSG0102I EQU   *    VALID ACTIONS ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU036
**       J     MSG0102
         SPACE 1
MSG0102  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0103A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT ACTION (VARIABLE 4)
         L     R1,ASRB_SVCACT
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0103E
         SPACE 1
MSG0103E EQU   *    ACTION IS NOT SUPPORTED
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU037_0002
**       J     MSG0103
         SPACE 1
MSG0103  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0104A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'1,2'
**       J     MSG0104I
         SPACE 1
MSG0104I EQU   *    SUPPORTED ACTIONS ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU038
**       J     MSG0104
         SPACE 1
MSG0104  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0107A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03B_0002
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CSVQUERY'
         J     ERTN0800
         SPACE 2
TXT0108A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'ASRB_DSID'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD01(9),ASRB_DSID(L'ASRB_DSID+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD01+8-(L'ASRB_DSID*2)
         J     MSG0108E
         SPACE 1
TXT0108B AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'ASRB_SVCMOD'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(L'ASRB_SVCMOD),ASRB_SVCMOD
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(L'ASRB_PGMNME),ASRB_PGMNME
**       J     MSG0110E
         SPACE 1
MSG0110E EQU   *    (VARIABLE 7) NOT FOUND
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03E_0002
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *    WAS PASSED TOO MANY ARGUMENTS
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *    WAS PASSED TOO FEW ARGUMENTS
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
         DS    0D
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
**       COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
CEE3DD   DC    XL4'00030DAD',XL4'59C3C5C5'
CEE3DG   DC    XL4'00030DB0',XL4'59C3C5C5'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F4       DC    F'4'
F8       DC    F'8'
F16      DC    F'16'
         SPACE 1
H0       DC    H'0'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H8       DC    H'8'
H9       DC    H'9'
H11      DC    H'11'
         SPACE 2
         DS    0D
**       AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 2
         LTORG
         DROP  R9
         END
./ ADD NAME=ASU3QEIB 0199-17263-19326-1453-13484-09981-00000-APLKS   08
*PROCESS RENT
         TITLE 'AS UTILITY TO QUERY ENVIRONMENT INFORMATION'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY MVS
* QUERY ENVIRONMENT INFORMATION
*
*    NAME: ASU3QEIB
* PURPOSE: QUERY ENVIRONMENT INFORMATION.
*
*        CALL 'ASU3QEIB' USING ASCA, ACTION, ENV_INFO, FC.
*
*        WHERE:
*           ACTION: (INPUT,FULLWORD)
*             01 - RESERVED FOR SET
*             02 - QUERY
*             03 - RESERVED FOR PUSH
*             04 - RESERVED FOR POP
*             05 - LIST/ROUTE ENV_INFO TO SYSOUT
*
*---------------------------------------------------------- *
*************************************************************
*           DATE     PROGRAMMER  DESCRIPTION
*------------------------------------------------------------
*        2017/09/20   lks        z/OS 1.13
*        2019/08/01   lks        z/OS 2.2
*************************************************************
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASU3QEIB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
*                             ..BAR of PSA,PSAE
R1       EQU   1              WORK REG, addr of PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              not used
R5       EQU   5              BAR of ASAB,ASABX
R6       EQU   6              BAR of ASCA,CVT,ECVT,TCB,TIOT,TIOTE,
*                             ..ACEE,DFA,CEEEDA,CEEOCB
R7       EQU   7              BAR of ASCA,TIOTE_DDNTRY,IHAFACL
*                             ..CEEOCB sub-opts
R8       EQU   8              used in LIST command
*                             BAR of STATIC DATA area 2
R9       EQU   9              BAR of STATIC DATA area 1
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             BAR of ENV_INFO
RC       EQU   12             LE CAA BAR
RD       EQU   13             BAR of RSA/LE DSA
RE       EQU   14             RETURN addr
RF       EQU   15             BRANCH and LINK addr
         SPACE 2
DD#      EQU   30             supported nbr of DD in TIOTE
         SPACE 2
         PUSH  PRINT
         PRINT NOGEN
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
         ORG   SUBPARM0
PGMPARM1 DS    A              ADDRESS OF ASCA
PGMPARM2 DS    A              ADDRESS OF ACTION
PGMPARM3 DS    A              ADDRESS OF ENV_INFO
PGMPARM4 DS    A              ADDRESS OF LE FEEDBACK AREA
         ORG   PGMPARM4
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F              RETURN CODE
RSNCD    DS    F              REASON CODE
         SPACE 1
WS_@CVT  DS    A              CVT pointer
WS_@ASCB DS    A              ASCB pointer
*                             Static Storage Area pointer(s)
WS_SSA1  DS    A              ..
WS_SSA2  DS    A              ..
WS_SSA3  DS    A              ..
WS_SSA4  DS    A              ..
WS_SSA5  DS    A              ..
         SPACE 1
LESYSSUB DS    F              LE SYSTEM/SUB-SYSTEM INFO
LEENVINF DS    F              LE ENVIRONMENT INFO
LEMBRID  DS    F              LE MEMBER ID
LEGPID   DS    F              LE PVRM LEVEL
         SPACE 1
WS_DFALEN DS    F             length of the DFA
DFALEN48 EQU   48             ..MVS/XA DFP 2.1.0
DFALEN112 EQU   112           ..>= OS/390 V2 R10
         SPACE 1
*                             CSV return info
WS_CSV_VALID DS F             ..validity bits
         ORG   WS_CSV_VALID
WS_CSV_VALID0 DS    XL1       ....byte-0
*                             ......x'80' OUTLENGTH
*                             ......x'40' OUTEPA
*                             ......x'20' OUTEPNM
*                             ......x'10' OUTMJNM
*                             ......x'08' OUTSP
*                             ......x'04' OUTATTR1
*                             ......x'02' OUTATTR2
*                             ......x'01' OUTATTR3
WS_CSV_VALID1 DS    XL1       ....byte-1
*                             ......x'80' OUTLOADPT
*                             ......x'40' OUTPDATA
*                             ......x'20' OUTPID
*                             ......x'10' OUTEPTKN
*                             ......x'08' OUTXLST
*                             ......x'04' OUTDIAG
*                             ......x'02' OUTRTID
*                             ......x'01' n/a
WS_CSV_VALID2 DS    XL1       ....byte-2
*                             ......x'80' OUTEPA64
*                             ......x'40' OUTLOADPT64
*                             ......x'20' OUTLENGTH64
*                             ......x'10' OUTXTLST64
*                             ......x'08' OUTXATTR1
*                             ......x'04' OUTPATHNAME
*                             ......x'02' OUTDSKEY
*                             ......x'01' n/a
WS_CSV_VALID3 DS    XL1       ....byte-3
*                             ......x'80':x'01' n/a
WS_CSV_ATTR1 DS    XL1        ..load module attribute byte-1
*                             ....x'80' end-of-memory deletion
*                             ....x'40' loaded-to-global
*                             ....x'20' RENT
*                             ....x'10' REUS
*                             ....x'08' not loadable only
*                             ....x'04' overlay format
*                             ....x'02' alias
*                             ....x'01' n/a
WS_CSV_ATTR2 DS    XL1        ..load module attribute byte-2
*                             ....x'80' auth library
*                             ....x'40' auth program
*                             ....x'20' AMODE ANY
*                             ....x'10' AMODE 31
*                             ....x'08' n/a
*                             ....x'04' dynamic LPA module
*                             ....x'02' page protected
*                             ....x'01' AMODE 64
WS_CSV_ATTR3 DS    XL1        ..load module attribute byte-3
*                             ....x'80' resident above the line
*                             ....x'40' JPA
*                             ....x'20' PLPA
*                             ....x'10' MLPA
*                             ....x'08' FLPA
*                             ....x'04' CSA
*                             ....x'02' n/a
*                             ....x'01' n/a
WS_CSV_PDATA DS    CL16       ..load module user information
WS_CSV_LOADER DS    CL4       ..loaded by PID
*                             ....UNK  - unknown provider
*                             ....LPA  -
*                             ....PGMF - program fetch
*                             ....AOSL - AOS loader
*                             ....JPA  -
         SPACE 1
WS_JSABCLEV DS    XL1         JSAB code level
WS_JSABLVL  DS    XL1         JSAB exec level (ADRSP=0,SUBTASK=4)
         SPACE 1
WS_CVTLDTO DS    0D           local Time/Date offset
WS_CVTLDTOL DS    F           ..left  word
WS_CVTLDTOR DS    F           ..right word
WS_CVTLSO DS    0D            leap second offset in TOD format
WS_CVTLSOH DS    F            ..high word
WS_CVTLSOL DS    F            ..low  word
         SPACE 1
WS_ITOD  DS    D              TOD stamp input to STCKCONV
WS_OTOD  DS    4F             TOD stamp output format
         ORG   WS_OTOD
         DS    XL08           WD 1&2 - TOD UNSGNPD HHMMSSthmiju0000
*                             ..t - tenths of seconds
*                             ..h - hundreths of seconds
*                             ..m - thousands (milliseconds)
*                             ..i - ten-thousandths of a second
*                             ..j - hundred-thousandths of a second
*                             ..u - millionths (microseconds)
         DS    XL04           WD 3 - PD UNSGN YYYYMMDD
         DS    F              WD 4 - ZERO
         ORG
TODPLIST STCKCONV MF=L        parmlist convert TOD output
WTIMEDATE DS   PL13           work area for UNSGNPD TIME/DATE
*                                    00000000001111111111222222
*                                    01234567890123456789012345
WTIMEMASK DS   XL26           result 00HHMMSSthmiju0000YYYYMMDD
WDATETIME DS   XL24           result YYYYMMDDHHMMSSthmiju0000
         SPACE 1
WGMTOFF  DS    CL07
         SPACE 2
         AS1MUTSA UDS=(MISC)
         ORG   VSTR
LNEAREA  DS    0XL122         Print line area (CEEMOUT)
LNELEN   DS    H
         SPACE 1
LNETXT   DS    CL120
         ORG   LNETXT
*                             ..every line
LNEPGM   DS    CL08           ..001:010 messaging Program name
         ORG   LNETXT+21      ..line 003+21 PSA
LNE003A  DS    CL1            ....z/ARCH (x)
         ORG   LNETXT+32      ..line 005+32 PSAE
LNE005A  DS    CL2            ....Facility byte-0: x'zn'
         ORG   LNETXT+32      ..line 006+32
LNE006A  DS    CL1            ....x'80' N3 instructions (x)
         ORG   LNETXT+33      ..line 007+33
LNE007A  DS    CL1            ....x'40' z/ARCH installed (x)
         ORG   LNETXT+30      ..line 008+30
LNE008A  DS    CL1            ....x'20' z/ARCH active (x)
         ORG   LNETXT+31      ..line 009+31
LNE009A  DS    CL1            ....x'10' IDTE installed (x)
         ORG   LNETXT+00      ..line 010+00
LNE010A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 011+00
LNE011A  DS    CL1            ....x'04'
         ORG   LNETXT+42      ..line 012+42
LNE012A  DS    CL1            ....x'02' ASN and LX reuse facility (x)
         ORG   LNETXT+34      ..line 013+34
LNE013A  DS    CL1            ....x'01' STFLE instruction (x)
         ORG   LNETXT+32      ..line 014+32
LNE014A  DS    CL2            ....Facility byte-1: x'zn'
         ORG   LNETXT+28      ..line 015+28
LNE015A  DS    CL1            ....x'80' DAT feature (x)
         ORG   LNETXT+46      ..line 016+46
LNE016A  DS    CL1            ....x'40' sense-running-status fac (x)
         ORG   LNETXT+33      ..line 017+33
LNE017A  DS    CL1            ....x'20' SSKE instruction (x)
         ORG   LNETXT+33      ..line 018+33
LNE018A  DS    CL1            ....x'10' STSI-enhancement (x)
         ORG   LNETXT+22      ..line 019+22
LNE019A  DS    CL1            ....x'08' CQCIF (x)
         ORG   LNETXT+36      ..line 020+36
LNE020A  DS    CL1            ....x'04' IPTE-range facility (x)
         ORG   LNETXT+51      ..line 021+51
LNE021A  DS    CL1            ....x'02' non-quiescing key-setting (x)
         ORG   LNETXT+30      ..line 022+30
LNE022A  DS    CL1            ....x'01' APFT facility (x)
         ORG   LNETXT+32      ..line 023+32
LNE023A  DS    CL2            ....Facility byte-2: x'zn'
         ORG   LNETXT+22      ..line 024+22
LNE024A  DS    CL1            ....x'80' ETF-2 (x)
         ORG   LNETXT+37      ..line 025+37
LNE025A  DS    CL1            ....x'40' Cryptographic assist (x)
         ORG   LNETXT+43      ..line 026+43
LNE026A  DS    CL1            ....x'20' long displacement facility (x)
         ORG   LNETXT+46      ..line 027+46
LNE027A  DS    CL1            ....x'10' long displacement fac hp (x)
         ORG   LNETXT+43      ..line 028+43
LNE028A  DS    CL1            ....x'08' HFP Mult/Add/Subt facility (x)
         ORG   LNETXT+40      ..line 029+40
LNE029A  DS    CL1            ....x'04' Extended Immed facility (x)
         ORG   LNETXT+22      ..line 030+22
LNE030A  DS    CL1            ....x'02' ETF-3 (x)
         ORG   LNETXT+43      ..line 031+43
LNE031A  DS    CL1            ....x'01' HFP unnormalized extension (x)
         ORG   LNETXT+32      ..line 032+32
LNE032A  DS    CL2            ....Facility byte-3: x'zn'
         ORG   LNETXT+34      ..line 033+34
LNE033A  DS    CL1            ....x'80' ETF-2 enhancement (x)
         ORG   LNETXT+34      ..line 034+34
LNE034A  DS    CL1            ....x'40' STCKF enhancement (x)
         ORG   LNETXT+45      ..line 035+45
LNE035A  DS    CL1            ....x'20' parsing enhancement fac (x)
         ORG   LNETXT+00      ..line 036+00
LNE036A  DS    CL1            ....x'10'
         ORG   LNETXT+44      ..line 037+44
LNE037A  DS    CL1            ....x'08' TOD clock steering fac (x)
         ORG   LNETXT+00      ..line 038+00
LNE038A  DS    CL1            ....x'04'
         ORG   LNETXT+34      ..line 039+34
LNE039A  DS    CL1            ....x'02' ETF-3 enhancement (x)
         ORG   LNETXT+42      ..line 040+42
LNE040A  DS    CL1            ....x'01' extract CPU time facility (x)
         ORG   LNETXT+32      ..line 041+32
LNE041A  DS    CL2            ....Facility byte-4: x'zn'
         ORG   LNETXT+44      ..line 042+44
LNE042A  DS    CL1            ....x'80' compare-swap-store fac (x)
         ORG   LNETXT+46      ..line 043+46
LNE043A  DS    CL1            ....x'40' compare-swap-store fac 2 (x)
         ORG   LNETXT+39      ..line 044+39
LNE044A  DS    CL1            ....x'20' general-inst-extention (x)
         ORG   LNETXT+43      ..line 045+43
LNE045A  DS    CL1            ....x'10' execute extension fac (x)
         ORG   LNETXT+42      ..line 046+42
LNE046A  DS    CL1            ....x'08' enhanced monitor fac (x)
         ORG   LNETXT+00      ..line 047+00
LNE047A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 048+00
LNE048A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 049+00
LNE049A  DS    CL1            ....x'01'
         ORG   LNETXT+32      ..line 050+32
LNE050A  DS    CL2            ....Facility byte-5: x'zn'
         ORG   LNETXT+47      ..line 051+47
LNE051A  DS    CL1            ....x'80' Set-Program-Parameter fac (x)
         ORG   LNETXT+39      ..line 052+39
LNE052A  DS    CL1            ....x'40' FP support enhancement (x)
         ORG   LNETXT+36      ..line 053+36
LNE053A  DS    CL1            ....x'20' Decimal FP facility (x)
         ORG   LNETXT+39      ..line 054+39
LNE054A  DS    CL1            ....x'10' Decimal FP facility hp (x)
         ORG   LNETXT+26      ..line 055+26
LNE055A  DS    CL1            ....x'08' PFPO inst (x)
         ORG   LNETXT+21      ..line 056+21
LNE056A  DS    CL1            ....x'04' z196 (x)
         ORG   LNETXT+00      ..line 057+00
LNE057A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 058+00
LNE058A  DS    CL1            ....x'01'
         ORG   LNETXT+32      ..line 059+32
LNE059A  DS    CL2            ....Facility byte-6: x'zn'
         ORG   LNETXT+00      ..line 060+00
LNE060A  DS    CL1            ....x'80'
         ORG   LNETXT+47      ..line 061+47
LNE061A  DS    CL1            ....x'40' misc instr extensions fac (x)
*                                       MIE
*                                       exec hint facility
*                                       load & trap facility
         ORG   LNETXT+59      ..line 062+59
LNE062A  DS    CL1            ....x'20' constrained translation (x)
*                                       extension facility
         ORG   LNETXT+00      ..line 063+00
LNE063A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 064+00
LNE064A  DS    CL1            ....x'08'
         ORG   LNETXT+37      ..line 065+37
LNE065A  DS    CL1            ....x'04' load-store-on-cond 2 (x)
*                                       load zero right most byte
         ORG   LNETXT+43      ..line 066+43
LNE066A  DS    CL1            ....x'02' entropy encoding for CMPSC (x)
         ORG   LNETXT+44      ..line 067+44
LNE067A  DS    CL1            ....x'01' conditional transaction end (x)
         ORG   LNETXT+32      ..line 068+32
LNE068A  DS    CL2            ....Facility byte-7: x'zn'
         ORG   LNETXT+25      ..line 069+25
LNE069A  DS    CL1            ....x'80' STPTODCS (x)
         ORG   LNETXT+22      ..line 070+22
LNE070A  DS    CL1            ....x'40' MSAE5 (x)
         ORG   LNETXT+21      ..line 071+21
LNE071A  DS    CL1            ....x'20' MIE2 (x)
         ORG   LNETXT+19      ..line 072+19
LNE072A  DS    CL1            ....x'10' SA (x)
         ORG   LNETXT+20      ..line 073+20
LNE073A  DS    CL1            ....x'08' TSI (x)
         ORG   LNETXT+00      ..line 074+00
LNE074A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 075+00
LNE075A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 076+00
LNE076A  DS    CL1            ....x'01'
         ORG   LNETXT+32      ..line 077+32
LNE077A  DS    CL2            ....Facility byte-8: x'zn'
         ORG   LNETXT+19      ..line 078+19
LNE078A  DS    CL1            ....x'80' RI (x)
         ORG   LNETXT+52      ..line 079+52
LNE079A  DS    CL1            ....x'40' CRYPTO AP-queue adapter ... (x)
         ORG   LNETXT+00      ..line 080+00
LNE080A  DS    CL1            ....x'20'
         ORG   LNETXT+49      ..line 081+49
LNE081A  DS    CL1            ....x'10' CPU-measurement counter fac (x)
         ORG   LNETXT+50      ..line 082+50
LNE082A  DS    CL1            ....x'08' CPU-measure... sampling fac (x)
         ORG   LNETXT+00      ..line 083+00
LNE083A  DS    CL1            ....x'04'
         ORG   LNETXT+30      ..line 084+30
LNE084A  DS    CL1            ....x'02' AISI facility (x)
         ORG   LNETXT+29      ..line 085+29
LNE085A  DS    CL1            ....x'01' AEN facility (x)
         ORG   LNETXT+32      ..line 086+32
LNE086A  DS    CL2            ....Facility byte-9: x'zn'
         ORG   LNETXT+29      ..line 087+29
LNE087A  DS    CL1            ....x'80' AIS facility (x)
         ORG   LNETXT+44      ..line 088+44
LNE088A  DS    CL1            ....x'40' Transactional exec fac (x)
         ORG   LNETXT+00      ..line 089+00
LNE089A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 090+00
LNE090A  DS    CL1            ....x'10'
         ORG   LNETXT+30      ..line 091+30
LNE091A  DS    CL1            ....x'08' MSA3 facility (x)
         ORG   LNETXT+30      ..line 092+30
LNE092A  DS    CL1            ....x'04' MSA4 facility (x)
         ORG   LNETXT+31      ..line 093+31
LNE093A  DS    CL1            ....x'02' enhanced DAT-2 (x)
         ORG   LNETXT+00      ..line 094+00
LNE094A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 095+33
LNE095A  DS    CL2            ....Facility byte-10: x'zn'
         ORG   LNETXT+39      ..line 096+39
LNE096A  DS    CL1            ....x'80' decimal FP packed conv (x)
         ORG   LNETXT+00      ..line 097+00
LNE097A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 098+00
LNE098A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 099+00
LNE099A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 100+00
LNE100A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 101+00
LNE101A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 102+00
LNE102A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 103+00
LNE103A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 104+33
LNE104A  DS    CL2            ....Facility byte-11: x'zn'
         ORG   LNETXT+00      ..line 105+00
LNE105A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 106+00
LNE106A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 107+00
LNE107A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 108+00
LNE108A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 109+00
LNE109A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 110+00
LNE110A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 111+00
LNE111A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 112+00
LNE112A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 113+33
LNE113A  DS    CL2            ....Facility byte-12: x'zn'
         ORG   LNETXT+00      ..line 114+00
LNE114A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 115+00
LNE115A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 116+00
LNE116A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 117+00
LNE117A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 118+00
LNE118A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 119+00
LNE119A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 120+00
LNE120A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 121+00
LNE121A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 122+33
LNE122A  DS    CL2            ....Facility byte-13: x'zn'
         ORG   LNETXT+00      ..line 123+00
LNE123A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 124+00
LNE124A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 125+00
LNE125A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 126+00
LNE126A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 127+00
LNE127A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 128+00
LNE128A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 129+00
LNE129A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 130+00
LNE130A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 131+33
LNE131A  DS    CL2            ....Facility byte-14: x'zn'
         ORG   LNETXT+00      ..line 132+00
LNE132A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 133+00
LNE133A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 134+00
LNE134A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 135+00
LNE135A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 136+00
LNE136A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 137+00
LNE137A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 138+00
LNE138A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 139+00
LNE139A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 140+33
LNE140A  DS    CL2            ....Facility byte-15: x'zn'
         ORG   LNETXT+00      ..line 141+00
LNE141A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 142+00
LNE142A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 143+00
LNE143A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 144+00
LNE144A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 145+00
LNE145A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 146+00
LNE146A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 147+00
LNE147A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 148+00
LNE148A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 150+33
LNE150A  DS    CL2            ....Facility byte-16: x'zn'
         ORG   LNETXT+31      ..line 151+31
LNE151A  DS    CL1            ....x'80' delay facility (x)
         ORG   LNETXT+45      ..line 152+45
LNE152A  DS    CL1            ....x'40' Z1/vector extension fac (x)
         ORG   LNETXT+43      ..line 153+43
LNE153A  DS    CL1            ....x'20' inst exec prot facility (x)
*                                       IF suppression facility
         ORG   LNETXT+37      ..line 154+37
LNE154A  DS    CL1            ....x'10' side effect facility (x)
         ORG   LNETXT+31      ..line 155+31
LNE155A  DS    CL1            ....x'08' close facility (x)
         ORG   LNETXT+20      ..line 156+20
LNE156A  DS    CL1            ....x'04' GSF (x)
         ORG   LNETXT+36      ..line 157+36
LNE157A  DS    CL1            ....x'02' RTI FC mod facility (x)
         ORG   LNETXT+00      ..line 158+00
LNE158A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 160+33
LNE160A  DS    CL2            ....Facility byte-17: x'zn'
         ORG   LNETXT+27      ..line 161+27
LNE161A  DS    CL1            ....x'80' shared TLB (x)
         ORG   LNETXT+00      ..line 162+00
LNE162A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 163+00
LNE163A  DS    CL1            ....x'20'
         ORG   LNETXT+41      ..line 164+41
LNE164A  DS    CL1            ....x'10' TOD clock epoch facility (x)
         ORG   LNETXT+00      ..line 165+00
LNE165A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 166+00
LNE166A  DS    CL1            ....x'04'
         ORG   LNETXT+39      ..line 167+39
LNE167A  DS    CL1            ....x'02' store CPU ctr multiple (x)
         ORG   LNETXT+33      ..line 168+33
LNE168A  DS    CL1            ....x'01' scaled CPU timer (x)
         ORG   LNETXT+33      ..line 170+33
LNE170A  DS    CL2            ....Facility byte-18: x'zn'
         ORG   LNETXT+00      ..line 171+00
LNE171A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 172+00
LNE172A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 173+00
LNE173A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 174+00
LNE174A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 175+00
LNE175A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 176+00
LNE176A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 177+00
LNE177A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 178+00
LNE178A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 180+33
LNE180A  DS    CL2            ....Facility byte-19: x'zn'
         ORG   LNETXT+00      ..line 181+00
LNE181A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 182+00
LNE182A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 183+00
LNE183A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 184+00
LNE184A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 185+00
LNE185A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 186+00
LNE186A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 187+00
LNE187A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 188+00
LNE188A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 190+33
LNE190A  DS    CL2            ....Facility byte-20: x'zn'
         ORG   LNETXT+00      ..line 191+00
LNE191A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 192+00
LNE192A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 193+00
LNE193A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 194+00
LNE194A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 195+00
LNE195A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 196+00
LNE196A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 197+00
LNE197A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 198+00
LNE198A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 200+33
LNE200A  DS    CL2            ....Facility byte-21: x'zn'
         ORG   LNETXT+00      ..line 201+00
LNE201A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 202+00
LNE202A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 203+00
LNE203A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 204+00
LNE204A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 205+00
LNE205A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 206+00
LNE206A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 207+00
LNE207A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 208+00
LNE208A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 210+33
LNE210A  DS    CL2            ....Facility byte-22: x'zn'
         ORG   LNETXT+00      ..line 211+00
LNE211A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 212+00
LNE212A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 213+00
LNE213A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 214+00
LNE214A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 215+00
LNE215A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 216+00
LNE216A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 217+00
LNE217A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 218+00
LNE218A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 220+33
LNE220A  DS    CL2            ....Facility byte-23: x'zn'
         ORG   LNETXT+00      ..line 221+00
LNE221A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 222+00
LNE222A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 223+00
LNE223A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 224+00
LNE224A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 225+00
LNE225A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 226+00
LNE226A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 227+00
LNE227A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 228+00
LNE228A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 230+33
LNE230A  DS    CL2            ....Facility byte-24: x'zn'
         ORG   LNETXT+00      ..line 231+00
LNE231A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 232+00
LNE232A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 233+00
LNE233A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 234+00
LNE234A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 235+00
LNE235A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 236+00
LNE236A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 237+00
LNE237A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 238+00
LNE238A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 240+33
LNE240A  DS    CL2            ....Facility byte-25: x'zn'
         ORG   LNETXT+00      ..line 241+00
LNE241A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 242+00
LNE242A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 243+00
LNE243A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 244+00
LNE244A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 245+00
LNE245A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 246+00
LNE246A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 247+00
LNE247A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 248+00
LNE248A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 250+33
LNE250A  DS    CL2            ....Facility byte-26: x'zn'
         ORG   LNETXT+00      ..line 251+00
LNE251A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 252+00
LNE252A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 253+00
LNE253A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 254+00
LNE254A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 255+00
LNE255A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 256+00
LNE256A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 257+00
LNE257A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 258+00
LNE258A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 260+33
LNE260A  DS    CL2            ....Facility byte-27: x'zn'
         ORG   LNETXT+00      ..line 261+00
LNE261A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 262+00
LNE262A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 263+00
LNE263A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 264+00
LNE264A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 265+00
LNE265A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 266+00
LNE266A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 267+00
LNE267A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 268+00
LNE268A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 270+33
LNE270A  DS    CL2            ....Facility byte-28: x'zn'
         ORG   LNETXT+00      ..line 271+00
LNE271A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 272+00
LNE272A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 273+00
LNE273A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 274+00
LNE274A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 275+00
LNE275A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 276+00
LNE276A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 277+00
LNE277A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 278+00
LNE278A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 280+33
LNE280A  DS    CL2            ....Facility byte-29: x'zn'
         ORG   LNETXT+00      ..line 281+00
LNE281A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 282+00
LNE282A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 283+00
LNE283A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 284+00
LNE284A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 285+00
LNE285A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 286+00
LNE286A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 287+00
LNE287A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 288+00
LNE288A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 290+33
LNE290A  DS    CL2            ....Facility byte-30: x'zn'
         ORG   LNETXT+00      ..line 291+00
LNE291A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 292+00
LNE292A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 293+00
LNE293A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 294+00
LNE294A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 295+00
LNE295A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 296+00
LNE296A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 297+00
LNE297A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 298+00
LNE298A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 300+33
LNE300A  DS    CL2            ....Facility byte-31: x'zn'
         ORG   LNETXT+00      ..line 301+00
LNE301A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 302+00
LNE302A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 303+00
LNE303A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 304+00
LNE304A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 305+00
LNE305A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 306+00
LNE306A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 307+00
LNE307A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 308+00
LNE308A  DS    CL1            ....x'01'
         ORG   LNETXT+21      ..line 321+21 CVT
LNE321A  DS    CL8            ....Product(xxxxxxxx)
         ORG   LNETXT+37      ..line 321+37
LNE321B  DS    CL8            ....FMID(xxxxxxxx)
         ORG   LNETXT+53      ..line 321+53
LNE321C  DS    CL16           ....UVID(xxxxxxxxxxxxxxxx)
         ORG   LNETXT+17      ..line 322+17
LNE322A  DS    ZL4            ....CPU(nnnn)
         ORG   LNETXT+29      ..line 322+29
LNE322B  DS    CL2            ....RRMM(xx/  )
         ORG   LNETXT+32      ..line 322+32
LNE322C  DS    CL2            ....RRMM(  /xx)
         ORG   LNETXT+23      ..line 330+23
LNE330A  DS    CL2            ....CVTDCB: x'zn'
         ORG   LNETXT+40      ..line 331+40
LNE331A  DS    CL1            ....x'80' S/370-XA mode execution (x)
         ORG   LNETXT+27      ..line 332+27
LNE332A  DS    CL1            ....x'40' PCP VM=YES (x)
         ORG   LNETXT+20      ..line 333+20
LNE333A  DS    CL1            ....x'20' MFT (x)
         ORG   LNETXT+20      ..line 334+20
LNE334A  DS    CL1            ....x'10' MVT (x)
         ORG   LNETXT+32      ..line 335+32
LNE335A  DS    CL1            ....x'08' CVTOSLVL usable (x)
         ORG   LNETXT+41      ..line 336+41
LNE336A  DS    CL1            ....x'04' Model 65 multi-processor (x)
         ORG   LNETXT+20      ..line 337+20
LNE337A  DS    CL1            ....x'02' DAT (x)
         ORG   LNETXT+20      ..line 338+20
LNE338A  DS    CL1            ....x'01' MVS (x)
         ORG   LNETXT+30      ..line 339+30
LNE339A  DS    CL1            ....x'12' OS/VS2 system (x)
         ORG   LNETXT+24      ..line 340+24
LNE340A  DS    CL2            ....CVTOPTA: x'zn'
         ORG   LNETXT+38      ..line 341+38
LNE341A  DS    CL1            ....x'80' Channel Check Handler (x)
         ORG   LNETXT+37      ..line 342+37
LNE342A  DS    CL1            ....x'40' Alternate Path Retry (x)
         ORG   LNETXT+46      ..line 343+46
LNE343A  DS    CL1            ....x'20' Dyn Device Reconfig / RMS (x)
         ORG   LNETXT+33      ..line 344+33
LNE344A  DS    CL1            ....x'10' NIP is executing (x)
         ORG   LNETXT+00      ..line 345+00
LNE345A  DS    CL1            ....x'08'
         ORG   LNETXT+28      ..line 346+28
LNE346A  DS    CL1            ....x'04' no EXCP V=R (x)
         ORG   LNETXT+48      ..line 347+48
LNE347A  DS    CL1            ....x'02' ASCII tape processing avail (x)
         ORG   LNETXT+38      ..line 348+38
LNE348A  DS    CL1            ....x'01' Extended Precision FP (x)
         ORG   LNETXT+24      ..line 350+24
LNE350A  DS    CL2            ....CVTOPTB: x'zn'
         ORG   LNETXT+40      ..line 351+40
LNE351A  DS    CL1            ....x'80' Storage Protect feature (x)
         ORG   LNETXT+62      ..line 352+62
LNE352A  DS    CL1            ....x'40' HW Clock...CPU Timer feat (x)
         ORG   LNETXT+42      ..line 353+42
LNE353A  DS    CL1            ....x'20' Time-of-Day clock feature (x)
         ORG   LNETXT+31      ..line 354+31
LNE354A  DS    CL1            ....x'10' no SYS1.LOGREC (x)
         ORG   LNETXT+00      ..line 355+00
LNE355A  DS    CL1            ....x'08'
         ORG   LNETXT+38      ..line 356+38
LNE356A  DS    CL1            ....x'04' FETCH protect feature (x)
         ORG   LNETXT+34      ..line 357+34
LNE357A  DS    CL1            ....x'02' VS1 assist MDC353 (x)
         ORG   LNETXT+34      ..line 358+34
LNE358A  DS    CL1            ....x'01' VS1 assist MDC365 (x)
         ORG   LNETXT+25      ..line 360+25
LNE360A  DS    CL2            ....CVTFLAG1: x'zn'
         ORG   LNETXT+00      ..line 361+00
LNE361A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 362+00
LNE362A  DS    CL1            ....x'40'
         ORG   LNETXT+21      ..line 363+21
LNE363A  DS    CL1            ....x'20' CUSE (x)
         ORG   LNETXT+00      ..line 364+00
LNE364A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 365+00
LNE365A  DS    CL1            ....x'08'
         ORG   LNETXT+33      ..line 366+33
LNE366A  DS    CL1            ....x'04' CSTRING (x)
         ORG   LNETXT+34      ..line 367+34
LNE367A  DS    CL1            ....x'02' Subspace facility (x)
         ORG   LNETXT+00      ..line 368+00
LNE368A  DS    CL1            ....x'01'
         ORG   LNETXT+25      ..line 370+25
LNE370A  DS    CL2            ....CVTFLAG2: x'zn'
         ORG   LNETXT+46      ..line 371+46
LNE371A  DS    CL1            ....x'80' Comp/Expansion service (x)
         ORG   LNETXT+47      ..line 372+47
LNE372A  DS    CL1            ....x'40' Comp/Expansion hardware (x)
         ORG   LNETXT+42      ..line 373+42
LNE373A  DS    CL1            ....x'20' Suppression-on-Protection (x)
         ORG   LNETXT+45      ..line 374+45
LNE374A  DS    CL1            ....x'10' hw BFP instr set (x)
         ORG   LNETXT+30      ..line 375+30
LNE375A  DS    CL1            ....x'08' PER2 hardware (x)
         ORG   LNETXT+53      ..line 376+53
LNE376A  DS    CL1            ....x'04' Internal Queued Direct ... (x)
         ORG   LNETXT+36      ..line 377+36
LNE377A  DS    CL1            ....x'02' ASN & LX reuse Arch (x)
         ORG   LNETXT+34      ..line 378+34
LNE378A  DS    CL1            ....x'01' Enhanced DAT Arch (x)
         ORG   LNETXT+25      ..line 380+25
LNE380A  DS    CL2            ....CVTFLAG3: x'zn'
         ORG   LNETXT+32      ..line 381+32
LNE381A  DS    CL1            ....x'80' z/Arch hardware (x)
         ORG   LNETXT+00      ..line 382+00
LNE382A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 383+00
LNE383A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 384+00
LNE384A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 385+00
LNE385A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 386+00
LNE386A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 387+00
LNE387A  DS    CL1            ....x'02'
         ORG   LNETXT+30      ..line 388+30
LNE388A  DS    CL1            ....x'01' GSF available (x)
         ORG   LNETXT+25      ..line 390+25
LNE390A  DS    CL2            ....CVTFLAG4: x'zn'
         ORG   LNETXT+31      ..line 391+31
LNE391A  DS    CL1            ....x'80' P001 installed (x)
         ORG   LNETXT+28      ..line 392+28
LNE392A  DS    CL1            ....x'40' P001 active (x)
         ORG   LNETXT+22      ..line 393+22
LNE393A  DS    CL1            ....x'20' zNALC (x)
         ORG   LNETXT+45      ..line 394+45
LNE394A  DS    CL1            ....x'10' dyn CPU addition enabled (x)
         ORG   LNETXT+40      ..line 395+40
LNE395A  DS    CL1            ....x'08' P002/TX support enabled (x)
         ORG   LNETXT+42      ..line 396+42
LNE396A  DS    CL1            ....x'04' P002C/TXC support enabled (x)
         ORG   LNETXT+35      ..line 397+35
LNE397A  DS    CL1            ....x'02' RI support enabled (x)
         ORG   LNETXT+36      ..line 398+36
LNE398A  DS    CL1            ....x'01' enhanced DAT-2 Arch (x)
         ORG   LNETXT+25      ..line 400+25
LNE400A  DS    CL2            ....CVTFLAG5: x'zn'
         ORG   LNETXT+45      ..line 401+45
LNE401A  DS    CL1            ....x'80' Z1/vector extension fac (x)
         ORG   LNETXT+20      ..line 402+20
LNE402A  DS    CL1            ....x'40' EEC (x)
         ORG   LNETXT+00      ..line 403+00
LNE403A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 404+00
LNE404A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 405+00
LNE405A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 406+00
LNE406A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 407+00
LNE407A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 408+00
LNE408A  DS    CL1            ....x'01'
         ORG   LNETXT+25      ..line 410+25
LNE410A  DS    CL2            ....CVTFLAG6: x'zn'
         ORG   LNETXT+33      ..line 411+33
LNE411A  DS    CL1            ....x'80' solution edition (x)
         ORG   LNETXT+00      ..line 412+00
LNE412A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 413+00
LNE413A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 414+00
LNE414A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 415+00
LNE415A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 416+00
LNE416A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 417+00
LNE417A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 418+00
LNE418A  DS    CL1            ....x'01'
         ORG   LNETXT+25      ..line 420+25
LNE420A  DS    CL2            ....CVTFLAG7: x'zn'
         ORG   LNETXT+00      ..line 421+00
LNE421A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 422+00
LNE422A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 423+00
LNE423A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 424+00
LNE424A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 425+00
LNE425A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 426+00
LNE426A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 427+00
LNE427A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 428+00
LNE428A  DS    CL1            ....x'01'
         ORG   LNETXT+25      ..line 430+25
LNE430A  DS    CL2            ....CVTFLAG8: x'zn'
         ORG   LNETXT+00      ..line 431+00
LNE431A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 432+00
LNE432A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 433+00
LNE433A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 434+00
LNE434A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 435+00
LNE435A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 436+00
LNE436A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 437+00
LNE437A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 438+00
LNE438A  DS    CL1            ....x'01'
         ORG   LNETXT+25      ..line 440+25
LNE440A  DS    CL6            ....GMT offset (-hh:mm)
         ORG   LNETXT+32      ..line 450+32
LNE450A  DS    CL2            ....CVTOSLVL byte-0: x'zn'
         ORG   LNETXT+32      ..line 451+32
LNE451A  DS    CL1            ....x'80' HBB3310 ESA/370 (x)
         ORG   LNETXT+24      ..line 452+24
LNE452A  DS    CL1            ....x'40' HBB4420 (x)
         ORG   LNETXT+24      ..line 453+24
LNE453A  DS    CL1            ....x'20' JBB3313 (x)
         ORG   LNETXT+36      ..line 454+36
LNE454A  DS    CL1            ....x'10' JBB3311, HiperSpace (x)
         ORG   LNETXT+45      ..line 455+45
LNE455A  DS    CL1            ....x'08' HBB4410,spin-lock,UCB svcs (x)
         ORG   LNETXT+39      ..line 456+39
LNE456A  DS    CL1            ....x'04' DataSpace SCOPE=COMMON (x)
         ORG   LNETXT+27      ..line 457+27
LNE457A  DS    CL1            ....x'02' Encryption (x)
         ORG   LNETXT+24      ..line 458+24
LNE458A  DS    CL1            ....x'01' JBB4422 (x)
         ORG   LNETXT+32      ..line 460+32
LNE460A  DS    CL2            ....CVTOSLVL byte-1: x'zn'
         ORG   LNETXT+37      ..line 461+37
LNE461A  DS    CL1            ....x'80' HBB4430, dynamic APF (x)
         ORG   LNETXT+34      ..line 462+34
LNE462A  DS    CL1            ....x'40' Work Load Manager (x)
         ORG   LNETXT+39      ..line 463+39
LNE463A  DS    CL1            ....x'20' HBB5510, dynamic exits (x)
         ORG   LNETXT+34      ..line 464+34
LNE464A  DS    CL1            ....x'10' HBB5520, enclaves (x)
         ORG   LNETXT+24      ..line 465+24
LNE465A  DS    CL1            ....x'08' JBB5522 (x)
         ORG   LNETXT+50      ..line 466+50
LNE466A  DS    CL1            ....x'04' HBB6603 OS/390 R3,
*                                       dynamic LNKLST (x)
         ORG   LNETXT+58      ..line 467+58
LNE467A  DS    CL1            ....x'02' HBB6601 OS/390 R1,
*                                       prod ena/dis (x)
         ORG   LNETXT+55      ..line 468+55
LNE468A  DS    CL1            ....x'01' HBB6602 OS/390 R2,
*                                       ... PARMLIB svc (x)
         ORG   LNETXT+32      ..line 470+32
LNE470A  DS    CL2            ....CVTOSLVL byte-2: x'zn'
         ORG   LNETXT+70      ..line 471+70
LNE471A  DS    CL1            ....x'80' JBB6604 OS/390 R4,
*                                       dyn LPA, RTL (x)
         ORG   LNETXT+34      ..line 472+34
LNE472A  DS    CL1            ....x'40' HBB6605 OS/390 R5 (x)
         ORG   LNETXT+34      ..line 473+34
LNE473A  DS    CL1            ....x'20' HBB6606 OS/390 R6 (x)
         ORG   LNETXT+58      ..line 474+58
LNE474A  DS    CL1            ....x'10' BFP simulated or HW if ... (x)
         ORG   LNETXT+34      ..line 475+34
LNE475A  DS    CL1            ....x'08' JBB6607 OS/390 R7 (x)
         ORG   LNETXT+34      ..line 476+34
LNE476A  DS    CL1            ....x'04' HBB6608 OS/390 R8 (x)
         ORG   LNETXT+42      ..line 477+42
LNE477A  DS    CL1            ....x'02' JBB6609/HBB6609 OS/390 R9 (x)
         ORG   LNETXT+35      ..line 478+35
LNE478A  DS    CL1            ....x'01' HBB7703 OS/390 R10 (x)
         ORG   LNETXT+32      ..line 480+32
LNE480A  DS    CL2            ....CVTOSLVL byte-3: x'zn'
         ORG   LNETXT+35      ..line 481+35
LNE481A  DS    CL1            ....x'80' pause/release svcs (x)
         ORG   LNETXT+40      ..line 482+40
LNE482A  DS    CL1            ....x'40' IEAVAPE2 & related svcs (x)
         ORG   LNETXT+52      ..line 483+52
LNE483A  DS    CL1            ....x'20' JBB7713 z/OS V1R1,
*                                       LPAR cluster (x)
         ORG   LNETXT+46      ..line 484+46
LNE484A  DS    CL1            ....x'10' HBB7705 z/OS V1R2,
*                                       64-bit VS (x)
         ORG   LNETXT+34      ..line 485+34
LNE485A  DS    CL1            ....x'08' HBB7706 z/OS V1R3 (x)
         ORG   LNETXT+34      ..line 486+34
LNE486A  DS    CL1            ....x'04' HBB7707 z/OS V1R4 (x)
         ORG   LNETXT+34      ..line 487+34
LNE487A  DS    CL1            ....x'02' HBB7708 z/OS V1R5 (x)
         ORG   LNETXT+34      ..line 488+34
LNE488A  DS    CL1            ....x'01' HBB7709 z/OS V1R6 (x)
         ORG   LNETXT+32      ..line 490+32
LNE490A  DS    CL2            ....CVTOSLVL byte-4: x'zn'
         ORG   LNETXT+26      ..line 491+26
LNE491A  DS    CL1            ....x'80' CSRSI svc (x)
         ORG   LNETXT+38      ..line 492+38
LNE492A  DS    CL1            ....x'40' Unicode callable svcs (x)
         ORG   LNETXT+38      ..line 493+38
LNE493A  DS    CL1            ....x'20' CSRUNIC callable svcs (x)
         ORG   LNETXT+36      ..line 494+36
LNE494A  DS    CL1            ....x'10' IBM License Manager (x)
         ORG   LNETXT+36      ..line 495+36
LNE495A  DS    CL1            ....x'08' ASN & LX reuse Arch (x)
         ORG   LNETXT+27      ..line 496+27
LNE496A  DS    CL1            ....x'04' TIME_ON_CP (x)
         ORG   LNETXT+29      ..line 497+29
LNE497A  DS    CL1            ....x'02' zIIP support (x)
         ORG   LNETXT+28      ..line 498+28
LNE498A  DS    CL1            ....x'01' IFA routine (x)
         ORG   LNETXT+32      ..line 500+32
LNE500A  DS    CL2            ....CVTOSLVL byte-5: x'zn'
         ORG   LNETXT+23      ..line 501+23
LNE501A  DS    CL1            ....x'80' z/OS.e (x)
         ORG   LNETXT+34      ..line 502+24
LNE502A  DS    CL1            ....x'40' HBB7720 z/OS V1R7 (x)
         ORG   LNETXT+34      ..line 503+24
LNE503A  DS    CL1            ....x'20' HBB7730 z/OS V1R8 (x)
         ORG   LNETXT+34      ..line 504+24
LNE504A  DS    CL1            ....x'10' HBB7740 z/OS V1R9 (x)
         ORG   LNETXT+35      ..line 505+35
LNE505A  DS    CL1            ....x'08' HBB7750 z/OS V1R10 (x)
         ORG   LNETXT+59      ..line 506+59
LNE506A  DS    CL1            ....x'04' HBB7760 z/OS V1R11,
*                                       G64CPU infra (s)
         ORG   LNETXT+35      ..line 507+35
LNE507A  DS    CL1            ....x'02' HBB7770 z/OS V1R12 (x)
         ORG   LNETXT+35      ..line 508+35
LNE508A  DS    CL1            ....x'01' HBB7780 z/OS V1R13 (x)
         ORG   LNETXT+32      ..line 510+32
LNE510A  DS    CL2            ....CVTOSLVL byte-6: x'zn'
         ORG   LNETXT+34      ..line 511+34
LNE511A  DS    CL1            ....x'80' HBB7790 z/OS V2R1 (x)
         ORG   LNETXT+34      ..line 512+34
LNE512A  DS    CL1            ....x'40' HBB77A0 z/OS V2R2 (x)
         ORG   LNETXT+35      ..line 513+35
LNE513A  DS    CL1            ....x'20' JBB778H z/OS V1R13 (x)
         ORG   LNETXT+00      ..line 514+00
LNE514A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 515+00
LNE515A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 516+00
LNE516A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 517+00
LNE517A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 518+00
LNE518A  DS    CL1            ....x'01'
         ORG   LNETXT+32      ..line 520+32
LNE520A  DS    CL2            ....CVTOSLVL byte-7: x'zn'
         ORG   LNETXT+00      ..line 521+00
LNE521A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 522+00
LNE522A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 523+00
LNE523A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 524+00
LNE524A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 525+00
LNE525A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 526+00
LNE526A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 527+00
LNE527A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 528+00
LNE528A  DS    CL1            ....x'01'
         ORG   LNETXT+32      ..line 530+32
LNE530A  DS    CL2            ....CVTOSLVL byte-8: x'zn'
         ORG   LNETXT+25      ..line 531+25
LNE531A  DS    CL1            ....x'80' IEA4xxxx (x)
         ORG   LNETXT+41      ..line 532+41
LNE532A  DS    CL1            ....x'40' Pause with checkpoint-OK (x)
         ORG   LNETXT+33      ..line 533+33
LNE533A  DS    CL1            ....x'20' TIMEUSED ECT=YES (x)
         ORG   LNETXT+36      ..line 534+36
LNE534A  DS    CL1            ....x'10' TIMEUSED TIME_ON_CP (x)
         ORG   LNETXT+23      ..line 535+23
LNE535A  DS    CL1            ....x'08' IEFOPZ (x)
         ORG   LNETXT+00      ..line 536+00
LNE536A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 537+00
LNE537A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 538+00
LNE538A  DS    CL1            ....x'01'
         ORG   LNETXT+32      ..line 540+32
LNE540A  DS    CL2            ....CVTOSLVL byte-9: x'zn'
         ORG   LNETXT+00      ..line 541+00
LNE541A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 542+00
LNE542A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 543+00
LNE543A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 544+00
LNE544A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 545+00
LNE545A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 546+00
LNE546A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 547+00
LNE547A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 548+00
LNE548A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 550+33
LNE550A  DS    CL2            ....CVTOSLVL byte-10: x'zn'
         ORG   LNETXT+00      ..line 551+00
LNE551A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 552+00
LNE552A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 553+00
LNE553A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 554+00
LNE554A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 555+00
LNE555A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 556+00
LNE556A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 557+00
LNE557A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 558+00
LNE558A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 560+33
LNE560A  DS    CL2            ....CVTOSLVL byte-11: x'zn'
         ORG   LNETXT+00      ..line 561+00
LNE561A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 562+00
LNE562A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 563+00
LNE563A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 564+00
LNE564A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 565+00
LNE565A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 566+00
LNE566A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 567+00
LNE567A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 568+00
LNE568A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 570+33
LNE570A  DS    CL2            ....CVTOSLVL byte-12: x'zn'
         ORG   LNETXT+00      ..line 571+00
LNE571A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 572+00
LNE572A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 573+00
LNE573A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 574+00
LNE574A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 575+00
LNE575A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 576+00
LNE576A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 577+00
LNE577A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 578+00
LNE578A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 580+33
LNE580A  DS    CL2            ....CVTOSLVL byte-13: x'zn'
         ORG   LNETXT+00      ..line 581+00
LNE581A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 582+00
LNE582A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 583+00
LNE583A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 584+00
LNE584A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 585+00
LNE585A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 586+00
LNE586A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 587+00
LNE587A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 588+00
LNE588A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 590+33
LNE590A  DS    CL2            ....CVTOSLVL byte-14: x'zn'
         ORG   LNETXT+00      ..line 591+00
LNE591A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 592+00
LNE592A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 593+00
LNE593A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 594+00
LNE594A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 595+00
LNE595A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 596+00
LNE596A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 597+00
LNE597A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 598+00
LNE598A  DS    CL1            ....x'01'
         ORG   LNETXT+33      ..line 600+33
LNE600A  DS    CL2            ....CVTOSLVL byte-15: x'zn'
         ORG   LNETXT+00      ..line 601+00
LNE601A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 602+00
LNE602A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 603+00
LNE603A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 604+00
LNE604A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 605+00
LNE605A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 606+00
LNE606A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 607+00
LNE607A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 608+00
LNE608A  DS    CL1            ....x'01'
         ORG   LNETXT+21      ..line 621+21 ECVT
LNE621A  DS    CL8            ....SYSPLEX(xxxxxxxx)
         ORG   LNETXT+38      ..line 621+38
LNE621B  DS    CL2            ....CLONE(xx)
         ORG   LNETXT+46      ..line 621+46
LNE621C  DS    CL8            ....HW(xxxxxxxx)
         ORG   LNETXT+62      ..line 621+62
LNE621D  DS    CL8            ....LPAR(xxxxxxxx)
         ORG   LNETXT+78      ..line 621+78
LNE621E  DS    CL8            ....VMid(xxxxxxxx)
         ORG   LNETXT+17      ..line 622+17
LNE622A  DS    CL8            ....PID(xxxxxxxx)
         ORG   LNETXT+32      ..line 622+32
LNE622B  DS    ZL8            ....nbr(nnnnnnnn)
         ORG   LNETXT+49      ..line 622+49
LNE622C  DS    CL16           ....Owner(xxxxxxxxxxxxxxxx)
         ORG   LNETXT+26      ..line 623+26
LNE623A  DS    CL16           ....Product name(xxxxxxxxxxxxxxxx)
         ORG   LNETXT+49      ..line 623+49
LNE623B  DS    CL2            ....Ver(xx)
         ORG   LNETXT+58      ..line 623+58
LNE623C  DS    CL2            ....Rel(xx)
         ORG   LNETXT+67      ..line 623+67
LNE623D  DS    CL2            ....Mod(xx)
         ORG   LNETXT+29      ..line 624+29
LNE624A  DS    ZL4            ....CACHE line size(nnnn)
         ORG   LNETXT+45      ..line 624+45
LNE624B  DS    CL4            ....GRS mode(xxxx)
         ORG   LNETXT+67      ..line 624+67
LNE624C  DS    CL1            ....OMVS available(x)
         ORG   LNETXT+25      ..line 631+25 ASCB
LNE631A  DS    ZL5            ....Logical CPU(nnnnn)
         ORG   LNETXT+36      ..line 631+36
LNE631B  DS    ZL5            ....AS(nnnnn)
         ORG   LNETXT+49      ..line 631+49
LNE631C  DS    ZL3            ....DPRI(nnn)
         ORG   LNETXT+61      ..line 631+61
LNE631D  DS    ZL3            ....Level(nnn)
         ORG   LNETXT+20      ..line 632+20
LNE632A  DS    CL8            ....USERID(xxxxxxxx)
         ORG   LNETXT+20      ..line 641+20 ACEE
LNE641A  DS    CL8            ....USERID(xxxxxxxx)
         ORG   LNETXT+41      ..line 641+41
LNE641B  DS    CL24           ....User name(xxxxxxxxxxxxxxxxxxxxxxxx)
         ORG   LNETXT+27      ..line 642+27
LNE642A  DS    CL8            ....Connect group(xxxxxxxx)
         ORG   LNETXT+48      ..line 642+48
LNE642B  DS    CL8            ....APPL name(xxxxxxxx)
         ORG   LNETXT+66      ..line 642+66
LNE642C  DS    CL8            ....TERMID(xxxxxxxx)
         ORG   LNETXT+19      ..line 651+19 JES
LNE651A  DS    CL8            ....JOBID(xxxxxxxx)
         ORG   LNETXT+39      ..line 651+39
LNE651B  DS    CL8            ....JOB name(xxxxxxxx)
         ORG   LNETXT+57      ..line 651+57
LNE651C  DS    CL8            ....USERID(xxxxxxxx)
         ORG   LNETXT+26      ..line 652+26
LNE652A  DS    CL4            ....Scheduled by(xxxx)
         ORG   LNETXT+43      ..line 652+43
LNE652B  DS    CL4            ....Subsystem(xxxx)
         ORG   LNETXT+29      ..line 653+29
LNE653A  DS    CL24           ....entry timestamp(xxxxxxxxxxxxxxx...)
         ORG   LNETXT+29      ..line 654+29
LNE654A  DS    CL24           ....exec  timestamp(xxxxxxxxxxxxxxx...)
         ORG   LNETXT+21      ..line 661+21 DFA
LNE661A  DS    CL8            ....Product(n-xxxxxx)
         ORG   LNETXT+36      ..line 661+36
LNE661B  DS    CL2            ....Ver(xx)
         ORG   LNETXT+45      ..line 661+45
LNE661C  DS    CL2            ....Rel(xx)
         ORG   LNETXT+54      ..line 661+54
LNE661D  DS    CL2            ....Mod(xx)
         ORG   LNETXT+30      ..line 662+30
LNE662A  DS    ZL1            ....compression type(n-xxx...)
         ORG   LNETXT+32      ..line 662+32
LNE662B  DS    CL13           ....compression type(n-xxx...)
         ORG   LNETXT+38      ..line 663+38
LNE663A  DS    ZL5            ....generations(nnnnn)
         ORG   LNETXT+31      ..line 670+31
LNE670A  DS    CL2            ....Feature byte-0: x'zn'
         ORG   LNETXT+23      ..line 671+23
LNE671A  DS    CL1            ....x'80' MVS/XA (x)
         ORG   LNETXT+36      ..line 672+36
LNE672A  DS    CL1            ....x'40' multi VSAM LSR pool (x)
         ORG   LNETXT+33      ..line 673+33
LNE673A  DS    CL1            ....x'20' erase on scratch (x)
         ORG   LNETXT+43      ..line 674+43
LNE674A  DS    CL1            ....x'10' extended recovery facility (x)
         ORG   LNETXT+29      ..line 675+29
LNE675A  DS    CL1            ....x'08' EXPORT by CI (x)
         ORG   LNETXT+41      ..line 676+41
LNE676A  DS    CL1            ....x'04' erase on scratch for ICF (x)
         ORG   LNETXT+39      ..line 677+39
LNE677A  DS    CL1            ....x'02' System Managed Storage (x)
         ORG   LNETXT+30      ..line 678+30
LNE678A  DS    CL1            ....x'01' PDS/E support (x)
         ORG   LNETXT+31      ..line 680+31
LNE680A  DS    CL2            ....Feature byte-1: x'zn'
         ORG   LNETXT+00      ..line 681+00
LNE681A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 682+00
LNE682A  DS    CL1            ....x'40'
         ORG   LNETXT+41      ..line 683+41
LNE683A  DS    CL1            ....x'20' file management services (x)
         ORG   LNETXT+45      ..line 684+45
LNE684A  DS    CL1            ....x'10' installation dflt comp (x)
         ORG   LNETXT+46      ..line 685+46
LNE685A  DS    CL1            ....x'08' bypass ch pgm prefix bld (x)
         ORG   LNETXT+25      ..line 686+25
LNE686A  DS    CL1            ....x'04' SSF svcs (x)
         ORG   LNETXT+35      ..line 687+35
LNE687A  DS    CL1            ....x'02' MMS supports XTIOT (x)
         ORG   LNETXT+52      ..line 688+52
LNE688A  DS    CL1            ....x'01' comp dflt set by install...(x)
         ORG   LNETXT+31      ..line 690+31
LNE690A  DS    CL2            ....Feature byte-2: x'zn'
         ORG   LNETXT+52      ..line 691+52
LNE691A  DS    CL1            ....x'80' VOLSER extract from sense...(x)
         ORG   LNETXT+36      ..line 692+36
LNE692A  DS    CL1            ....x'40' SAM Extended Format (x)
         ORG   LNETXT+37      ..line 693+37
LNE693A  DS    CL1            ....x'20' KSDS Extended Format (x)
         ORG   LNETXT+40      ..line 694+40
LNE694A  DS    CL1            ....x'10' AM compaction supported (x)
         ORG   LNETXT+47      ..line 695+47
LNE695A  DS    CL1            ....x'08' SMSVSAM server initial RLS (x)
         ORG   LNETXT+51      ..line 696+51
LNE696A  DS    CL1            ....x'04' data set recall ARCHRCAL...(x)
         ORG   LNETXT+27      ..line 697+27
LNE697A  DS    CL1            ....x'02' DSERV exit (x)
         ORG   LNETXT+34      ..line 698+34
LNE698A  DS    CL1            ....x'01' DFSMS DLL support (x)
         ORG   LNETXT+31      ..line 700+31
LNE700A  DS    CL2            ....Feature byte-3: x'zn'
         ORG   LNETXT+00      ..line 701+00
LNE701A  DS    CL1            ....x'80'
         ORG   LNETXT+63      ..line 702+63
LNE702A  DS    CL1            ....x'40' NIP svcs IGGSSRV macro...(x)
         ORG   LNETXT+70      ..line 703+70
LNE703A  DS    CL1            ....x'20' cat info routine...warea (x)
         ORG   LNETXT+40      ..line 704+40
LNE704A  DS    CL1            ....x'10' RunTime Library Support (x)
         ORG   LNETXT+28      ..line 705+28
LNE705A  DS    CL1            ....x'08' dynamic LPA (x)
         ORG   LNETXT+39      ..line 706+39
LNE706A  DS    CL1            ....x'04' DFSMS loader fork exit (x)
         ORG   LNETXT+50      ..line 707+50
LNE707A  DS    CL1            ....x'02' sw support for RVA SNAPSHOT (x)
         ORG   LNETXT+45      ..line 708+45
LNE708A  DS    CL1            ....x'01' API supprt for RVA SNAPSHOT (x)
         ORG   LNETXT+31      ..line 710+31
LNE710A  DS    CL2            ....Feature byte-4: x'zn'
         ORG   LNETXT+32      ..line 711+32
LNE711A  DS    CL1            ....x'80' unmanaged PDS/E (x)
         ORG   LNETXT+39      ..line 712+39
LNE712A  DS    CL1            ....x'40' BLOCKTOKENSIZE=REQUIRE (x)
         ORG   LNETXT+41      ..line 713+41
LNE713A  DS    CL1            ....x'20' BLDL PARMS START=, STOP= (x)
         ORG   LNETXT+27      ..line 714+27
LNE714A  DS    CL1            ....x'10' USEEAV=YES (x)
         ORG   LNETXT+28      ..line 715+28
LNE715A  DS    CL1            ....x'08' SAM_USE_HPF (x)
         ORG   LNETXT+43      ..line 716+43
LNE716A  DS    CL1            ....x'04' BSAM Pipes performance SPE (x)
         ORG   LNETXT+47      ..line 717+47
LNE717A  DS    CL1            ....x'02' ANSI-4 labels else ANSI-3 (x)
         ORG   LNETXT+58      ..line 718+58
LNE718A  DS    CL1            ....x'01' force all ANSI labels... (x)
         ORG   LNETXT+31      ..line 720+31
LNE720A  DS    CL2            ....Feature byte-5: x'zn'
         ORG   LNETXT+00      ..line 721+00
LNE721A  DS    CL1            ....x'80'
         ORG   LNETXT+30      ..line 722+30
LNE722A  DS    CL1            ....x'40' COPYSDB=LARGE (x)
         ORG   LNETXT+30      ..line 723+30
LNE723AA DS    CL1            ....x'30' COPYSDB=INPUT (x)
         ORG   LNETXT+34      ..line 723+34
LNE723A  DS    CL1            ....x'20' COPYSDB=SMALL|YES (x)
         ORG   LNETXT+27      ..line 724+27
LNE724A  DS    CL1            ....x'10' COPYSDB=NO (x)
         ORG   LNETXT+45      ..line 725+45
LNE725A  DS    CL1            ....DATACLAS media enforced TAPE (x)
         ORG   LNETXT+44      ..line 726+44
LNE726A  DS    CL1            ....DATACLAS media enforced JAG (x)
         ORG   LNETXT+66      ..line 727+66
LNE727A  DS    CL1            ....when no preference... media types (x)
         ORG   LNETXT+22      ..line 728+22
LNE728A  DS    CL1            ....STIFF (x)
         ORG   LNETXT+31      ..line 730+31
LNE730A  DS    CL2            ....Feature byte-6: x'zn'
         ORG   LNETXT+32      ..line 731+32
LNE731A  DS    CL1            ....x'80' TAPEAUTHDSN=YES (x)
         ORG   LNETXT+31      ..line 732+31
LNE732A  DS    CL1            ....x'40' TAPEAUTHF1=YES (x)
         ORG   LNETXT+33      ..line 733+33
LNE733A  DS    CL1            ....x'20' TAPEAUTHRC8=WARN (x)
         ORG   LNETXT+33      ..line 734+33
LNE734A  DS    CL1            ....x'10' TAPEAUTHRC4=FAIL (x)
         ORG   LNETXT+41      ..line 735+41
LNE735A  DS    CL1            ....x'08' XIOT/UNCAPT UCBS FOR BAM (x)
         ORG   LNETXT+43      ..line 736+43
LNE736A  DS    CL1            ....x'04' TAPEMULTIVOLUMEERROR=ALLOW (x)
         ORG   LNETXT+42      ..line 737+42
LNE737A  DS    CL1            ....x'02' TAPEMULTIVOLUMEERROR=FAIL (x)
         ORG   LNETXT+41      ..line 738+41
LNE738A  DS    CL1            ....x'01' > 253 SUBSYSTEMS allowed (x)
         ORG   LNETXT+31      ..line 740+31
LNE740A  DS    CL2            ....Feature byte-7: x'zn'
         ORG   LNETXT+37      ..line 741+37
LNE741A  DS    CL1            ....x'80' VSAM enabled for EAS (x)
         ORG   LNETXT+36      ..line 742+36
LNE742A  DS    CL1            ....x'40' SAM enabled for EAS (x)
         ORG   LNETXT+38      ..line 743+38
LNE743A  DS    CL1            ....x'20' PDS/E enabled for EAS (x)
         ORG   LNETXT+36      ..line 744+36
LNE744A  DS    CL1            ....x'10' PDS enabled for EAS (x)
         ORG   LNETXT+37      ..line 745+37
LNE745A  DS    CL1            ....x'08' BDAM enabled for EAS (x)
         ORG   LNETXT+52      ..line 746+52
LNE746A  DS    CL1            ....x'04' Extended Format SEQ... EAS (x)
         ORG   LNETXT+40      ..line 747+40
LNE747A  DS    CL1            ....x'02' DSORG=U enabled for EAS (x)
         ORG   LNETXT+41      ..line 748+41
LNE748A  DS    CL1            ....x'01' EXPIRATION_MESSAGE=NEVER (x)
         ORG   LNETXT+31      ..line 750+31
LNE750A  DS    CL2            ....Feature byte-8: x'zn'
         ORG   LNETXT+42      ..line 751+42
LNE751A  DS    CL1            ....x'80' JES3_ALLOC_ASSIST enabled (x)
         ORG   LNETXT+42      ..line 752+42
LNE752A  DS    CL1            ....x'40' mbr sel User Exit support (x)
         ORG   LNETXT+40      ..line 753+40
LNE753A  DS    CL1            ....x'20' PDSE generation support (x)
         ORG   LNETXT+41      ..line 754+41
LNE754A  DS    CL1            ....x'10' zEDC Compression support (x)
         ORG   LNETXT+55      ..line 755+55
LNE755A  DS    CL1            ....x'08' DADSM extend ... (x)
         ORG   LNETXT+82      ..line 755+82
LNE756A  DS    CL1            ....x'04' DSS full volume ... (x)
         ORG   LNETXT+41      ..line 757+41
LNE757A  DS    CL1            ....x'02' DCBE bypass Auth support (x)
         ORG   LNETXT+54      ..line 758+54
LNE758A  DS    CL1            ....x'01' DFSMS ... encryption ... (x)
         ORG   LNETXT+31      ..line 760+31
LNE760A  DS    CL2            ....Feature byte-9: x'zn'
         ORG   LNETXT+44      ..line 761+44
LNE761A  DS    CL1            ....x'80' READ-ONLY secondary support (x)
         ORG   LNETXT+53      ..line 762+53
LNE762A  DS    CL1            ....x'40' DSSB above-the-bar ... (x)
         ORG   LNETXT+38      ..line 763+38
LNE763A  DS    CL1            ....x'20' DEVTYPE XTIOT support (x)
         ORG   LNETXT+00      ..line 764+00
LNE764A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 765+00
LNE765A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 766+00
LNE766A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 767+00
LNE767A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 768+00
LNE768A  DS    CL1            ....x'01'
         ORG   LNETXT+35      ..line 780+35
LNE780A  DS    CL2            ....HPF Feature byte-1: x'zn'
         ORG   LNETXT+00      ..line 781+00
LNE781A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 782+00
LNE782A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 783+00
LNE783A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 784+00
LNE784A  DS    CL1            ....x'10'
         ORG   LNETXT+39      ..line 785+39
LNE785A  DS    CL1            ....x'08' transfer TCA extension (x)
         ORG   LNETXT+28      ..line 786+28
LNE786A  DS    CL1            ....x'04' HPF phase 1 (x)
         ORG   LNETXT+33      ..line 787+33
LNE787A  DS    CL1            ....x'02' imbedded LR list (x)
         ORG   LNETXT+37      ..line 788+37
LNE788A  DS    CL1            ....x'01' Format update Writes (x)
         ORG   LNETXT+35      ..line 790+35
LNE790A  DS    CL2            ....HPF Feature byte-2: x'zn'
         ORG   LNETXT+36      ..line 791+36
LNE791A  DS    CL1            ....x'80' Format Write enable (x)
         ORG   LNETXT+00      ..line 792+00
LNE792A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 793+00
LNE793A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 794+00
LNE794A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 795+00
LNE795A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 796+00
LNE796A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 797+00
LNE797A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 798+00
LNE798A  DS    CL1            ....x'01'
         ORG   LNETXT+35      ..line 800+35
LNE800A  DS    CL2            ....HPF Feature byte-3: x'zn'
         ORG   LNETXT+00      ..line 801+00
LNE801A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 802+00
LNE802A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 803+00
LNE803A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 804+00
LNE804A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 805+00
LNE805A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 806+00
LNE806A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 807+00
LNE807A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 808+00
LNE808A  DS    CL1            ....x'01'
         ORG   LNETXT+35      ..line 810+35
LNE810A  DS    CL2            ....HPF Feature byte-4: x'zn'
         ORG   LNETXT+00      ..line 811+00
LNE811A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 812+00
LNE812A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 813+00
LNE813A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 814+00
LNE814A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 815+00
LNE815A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 816+00
LNE816A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 817+00
LNE817A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 817+00
LNE818A  DS    CL1            ....x'01'
         ORG   LNETXT+22      ..line 831+22 TIOT
LNE831A  DS    CL8            ....JOB name(xxxxxxxx)
         ORG   LNETXT+42      ..line 831+42
LNE831B  DS    CL8            ....JOB step(xxxxxxxx)
         ORG   LNETXT+63      ..line 831+63
LNE831C  DS    CL8            ....PROC step(xxxxxxxx)
         ORG   LNETXT+21      ..line 832+21
LNE832A  DS    CL8            ....DD name(xxxxxxxx)
         ORG   LNETXT+42      ..line 832+42
LNE832B  DS    ZL2            ....DSN count(nn)
         ORG   LNETXT+21      ..line 841+21 LE
LNE841A  DS    ZL2            ....Product(nn)
         ORG   LNETXT+30      ..line 841+30
LNE841B  DS    ZL2            ....Ver(nn)
         ORG   LNETXT+39      ..line 841+39
LNE841C  DS    ZL2            ....Rel(nn)
         ORG   LNETXT+48      ..line 841+48
LNE841D  DS    ZL2            ....Mod(nn)
         ORG   LNETXT+53      ..line 841+53
LNE841E  DS    CL16           ....LE level text
         ORG   LNETXT+27      ..line 842+27
LNE842A  DS    ZL2            ....compiler ARCH(nn)
         ORG   LNETXT+41      ..line 850+41
LNE850A  DS    CL2            ....System/sub-system byte-0: x'zn'
         ORG   LNETXT+21      ..line 851+21
LNE851A  DS    CL1            ....x'80' CICS (x)
         ORG   LNETXT+26      ..line 852+26
LNE852A  DS    CL1            ....x'40' CICS_PIPI (x)
         ORG   LNETXT+00      ..line 853+00
LNE853A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 854+00
LNE854A  DS    CL1            ....x'10'
         ORG   LNETXT+20      ..line 855+20
LNE855A  DS    CL1            ....x'08' TSO (x)
         ORG   LNETXT+22      ..line 856+22
LNE856A  DS    CL1            ....x'04' batch (x)
         ORG   LNETXT+26      ..line 857+26
LNE857A  DS    CL1            ....x'02' z/OS UNIX (x)
         ORG   LNETXT+00      ..line 858+00
LNE858A  DS    CL1            ....x'01'
         ORG   LNETXT+41      ..line 860+41
LNE860A  DS    CL2            ....System/sub-system byte-1: x'zn'
         ORG   LNETXT+00      ..line 861+00
LNE861A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 862+00
LNE862A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 863+00
LNE863A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 864+00
LNE864A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 865+00
LNE865A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 866+00
LNE866A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 867+00
LNE867A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 868+00
LNE868A  DS    CL1            ....x'01'
         ORG   LNETXT+41      ..line 870+41
LNE870A  DS    CL2            ....System/sub-system byte-2: x'zn'
         ORG   LNETXT+00      ..line 871+00
LNE871A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 872+00
LNE872A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 873+00
LNE873A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 874+00
LNE874A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 875+00
LNE875A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 876+00
LNE876A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 877+00
LNE877A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 878+00
LNE878A  DS    CL1            ....x'01'
         ORG   LNETXT+41      ..line 880+41
LNE880A  DS    CL2            ....System/sub-system byte-3: x'zn'
         ORG   LNETXT+00      ..line 881+00
LNE881A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 882+00
LNE882A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 883+00
LNE883A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 884+00
LNE884A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 885+00
LNE885A  DS    CL1            ....x'08'
         ORG   LNETXT+22      ..line 886+22
LNE886A  DS    CL1            ....x'04' z/VSE (x)
         ORG   LNETXT+21      ..line 887+21
LNE887A  DS    CL1            ....x'02' z/OS (x)
         ORG   LNETXT+00      ..line 888+00
LNE888A  DS    CL1            ....x'01'
         ORG   LNETXT+35      ..line 890+35
LNE890A  DS    CL2            ....Environment byte-0: x'zn'
         ORG   LNETXT+44      ..line 891+44
LNE891A  DS    CL1            ....x'80' PIPI pre-init pgm interface (x)
         ORG   LNETXT+26      ..line 892+26
LNE892A  DS    CL1            ....x'40' PIPI-MAIN (x)
         ORG   LNETXT+25      ..line 893+25
LNE893A  DS    CL1            ....x'20' PIPI-SUB (x)
         ORG   LNETXT+27      ..line 894+27
LNE894A  DS    CL1            ....x'10' PIPI-SUBDP (x)
         ORG   LNETXT+54      ..line 895+54
LNE895A  DS    CL1            ....x'08' PICI pre-init compat... i/f (x)
         ORG   LNETXT+31      ..line 896+31
LNE896A  DS    CL1            ....x'04' nested enclave (x)
         ORG   LNETXT+42      ..line 897+42
LNE897A  DS    CL1            ....x'02' LRR lib routine retention (x)
         ORG   LNETXT+30      ..line 898+30
LNE898A  DS    CL1            ....x'01' runtime reuse (x)
         ORG   LNETXT+35      ..line 900+35
LNE900A  DS    CL2            ....Environment byte-1: x'zn'
         ORG   LNETXT+23      ..line 901+23
LNE901A  DS    CL1            ....x'80' XPLINK (x)
         ORG   LNETXT+29      ..line 902+29
LNE902A  DS    CL1            ....x'40' XPLINK & RTO (x)
         ORG   LNETXT+34      ..line 903+34
LNE903A  DS    CL1            ....x'20' 1 or more PTHREAD (x)
         ORG   LNETXT+43      ..line 904+43
LNE904A  DS    CL1            ....x'10' IPT initial process thread (x)
         ORG   LNETXT+36      ..line 905+36
LNE905A  DS    CL1            ....x'08' multi-threaded fork (x)
         ORG   LNETXT+25      ..line 906+25
LNE906A  DS    CL1            ....x'04' AMODE 31 (x)
         ORG   LNETXT+00      ..line 907+00
LNE907A  DS    CL1            ....x'02'
         ORG   LNETXT+28      ..line 908+28
LNE908A  DS    CL1            ....x'01' PIPI-MAINDP (x)
         ORG   LNETXT+35      ..line 910+35
LNE910A  DS    CL2            ....Environment byte-2: x'zn'
         ORG   LNETXT+00      ..line 911+00
LNE911A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 912+00
LNE912A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 913+00
LNE913A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 914+00
LNE914A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 915+00
LNE915A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 916+00
LNE916A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 917+00
LNE917A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 918+00
LNE918A  DS    CL1            ....x'01'
         ORG   LNETXT+35      ..line 920+35
LNE920A  DS    CL2            ....Environment byte-3: x'zn'
         ORG   LNETXT+00      ..line 921+00
LNE921A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 922+00
LNE922A  DS    CL1            ....x'40'
         ORG   LNETXT+00      ..line 923+00
LNE923A  DS    CL1            ....x'20'
         ORG   LNETXT+00      ..line 924+00
LNE924A  DS    CL1            ....x'10'
         ORG   LNETXT+00      ..line 925+00
LNE925A  DS    CL1            ....x'08'
         ORG   LNETXT+00      ..line 926+00
LNE926A  DS    CL1            ....x'04'
         ORG   LNETXT+00      ..line 927+00
LNE927A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 928+00
LNE928A  DS    CL1            ....x'01'
         ORG   LNETXT+23      ..line 941+23
LNE941A  DS    ZL2            ....OCB ver(nn)
         ORG   LNETXT+27      ..line 941+27
LNE941B  DS    CL16           ....LE OS text xxxxxxxxxxxxxxxx
         ORG   LNETXT+56      ..line 941+56
LNE941C  DS    CL1            ....FORMAT_64(x)
         ORG   LNETXT+72      ..line 941+72
LNE941D  DS    CL1            ....ORIGIN_64(x)
         ORG   LNETXT+28      ..line 942+28
LNE942A  DS    CL1            ....AIXBLD_ON(x)
         ORG   LNETXT+42      ..line 942+42
LNE942B  DS    CL1            ....ALL31_ON(x)
         ORG   LNETXT+58      ..line 942+58
LNE942C  DS    CL1            ....CBLOPTS_ON(x)
         ORG   LNETXT+73      ..line 942+73
LNE942D  DS    CL1            ....CBLQDA_ON(x)
         ORG   LNETXT+27      ..line 943+27
LNE943A  DS    CL1            ....CHECK_ON(x)
         ORG   LNETXT+41      ..line 943+41
LNE943B  DS    CL1            ....DEBUG_ON(x)
         ORG   LNETXT+57      ..line 943+57
LNE943C  DS    CL1            ....HEAP_BELOW(x)
         ORG   LNETXT+72      ..line 943+72
LNE943D  DS    CL1            ....HEAP_FREE(x)
         ORG   LNETXT+30      ..line 944+30
LNE944A  DS    CL1            ....STACK_BELOW(x)
         ORG   LNETXT+46      ..line 944+46
LNE944B  DS    CL1            ....STACK_FREE(x)
         ORG   LNETXT+21      ..line 961+21 CSV
LNE961A  DS    CL8            ....Program(xxxxxxxx)
         ORG   LNETXT+39      ..line 961+39
LNE961B  DS    CL4            ....loader(xxxx)
         ORG   LNETXT+21      ..line 962+21
LNE962A  DS    CL32           ....PDATA(x'znznznznznznznzn...')
         ORG   LNETXT+28      ..line 970+28
LNE970A  DS    CL2            ....Attribute 1: x'zn'
         ORG   LNETXT+00      ..line 971+00
LNE971A  DS    CL1            ....x'80'
         ORG   LNETXT+00      ..line 972+00
LNE972A  DS    CL1            ....x'40'
         ORG   LNETXT+21      ..line 973+21
LNE973A  DS    CL1            ....x'20' RENT (x)
         ORG   LNETXT+21      ..line 974+21
LNE974A  DS    CL1            ....x'10' REUS (x)
         ORG   LNETXT+32      ..line 975+32
LNE975A  DS    CL1            ....x'08' not loaded only (x)
         ORG   LNETXT+24      ..line 976+24
LNE976A  DS    CL1            ....x'04' overlay (x)
         ORG   LNETXT+22      ..line 977+22
LNE977A  DS    CL1            ....x'02' ALIAS (x)
         ORG   LNETXT+00      ..line 978+00
LNE978A  DS    CL1            ....x'01'
         ORG   LNETXT+28      ..line 980+28
LNE980A  DS    CL2            ....Attribute 2: x'zn'
         ORG   LNETXT+35      ..line 981+35
LNE981A  DS    CL1            ....x'80' authorized library (x)
         ORG   LNETXT+35      ..line 982+35
LNE982A  DS    CL1            ....x'40' authorized program (x)
         ORG   LNETXT+26      ..line 983+26
LNE983A  DS    CL1            ....x'20' AMODE ANY (x)
         ORG   LNETXT+25      ..line 984+25
LNE984A  DS    CL1            ....x'10' AMODE 31 (x)
         ORG   LNETXT+00      ..line 985+00
LNE985A  DS    CL1            ....x'08'
         ORG   LNETXT+35      ..line 986+35
LNE986A  DS    CL1            ....x'04' dynamic LPA module (x)
         ORG   LNETXT+31      ..line 987+31
LNE987A  DS    CL1            ....x'02' page protected (x)
         ORG   LNETXT+25      ..line 988+25
LNE988A  DS    CL1            ....x'01' AMODE 64 (x)
         ORG   LNETXT+28      ..line 990+28
LNE990A  DS    CL2            ....Attribute 3: x'zn'
         ORG   LNETXT+40      ..line 991+40
LNE991A  DS    CL1            ....x'80' resident above-the-line (x)
         ORG   LNETXT+29      ..line 992+29
LNE992A  DS    CL1            ....x'40' resident JPA (x)
         ORG   LNETXT+30      ..line 993+30
LNE993A  DS    CL1            ....x'20' resident PLPA (x)
         ORG   LNETXT+30      ..line 994+30
LNE994A  DS    CL1            ....x'10' resident MLPA (x)
         ORG   LNETXT+30      ..line 995+30
LNE995A  DS    CL1            ....x'08' resident FLPA (x)
         ORG   LNETXT+29      ..line 996+29
LNE996A  DS    CL1            ....x'04' resident CSA (x)
         ORG   LNETXT+00      ..line 997+00
LNE997A  DS    CL1            ....x'02'
         ORG   LNETXT+00      ..line 998+00
LNE998A  DS    CL1
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
PGMPLIST DS    A              original R1 value
         SPACE 1
         CSVQUERY PLISTVER=MAX,                                        +
               MF=(L,CSVQRYWK)
         SPACE 1
         AS1MUTSA UDS=(LTRACE)
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         EJECT
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              PTR TO ARCH SERVICES COMMAREA
@ACTION  DS    A              PTR TO ACTION CODE
@COMAREA DS    A              PTR TO ENV_INFO COMMAREA
@LEFDBK  DS    A              PTR TO LE FEEDBACK AREA
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,MF=D
ASABHDR  AS1MASDS ADS=ASAB,MF=D
ASABXHDR AS1MASDS ADS=ASAB1,MF=D
         SPACE 2
ENV_INFO DSECT
         COPY  AS3ENVCA
         SPACE 2
* --------------------------------------------------------- *
* CONTROL BLOCKS FOR MVS
* --------------------------------------------------------- *
*        PREFIXED SAVE AREA
         IHAPSA  DSECT=YES,LIST=YES
         SPACE 1
*        PSA EXTENSION (z/Arch)
**       IHAPSAE DSECT=YES,PSAE=YES
         SPACE 1
*        Facilities List
         IHAFACL
         TITLE 'AS UTILITY TO QUERY ENVIRONMENT INFORMATION'
         SPACE 1
*        COMMUNICATIONS VECTOR TABLE
         CVT   DSECT=YES,LIST=YES,PREFIX=YES
         SPACE 1
*        EXTENDED COMMUNICATIONS VECTOR TABLE
         IHAECVT LIST=YES
         SPACE 1
*        TASK CONTROL BLOCK
         IKJTCB  DSECT=YES,LIST=YES ,TCBDSECT=YES
         SPACE 1
*        JOB STEP CONTROL BLOCK
         IEZJSCB
         SPACE 1
*        ACCESSOR ENVIRONMENT ELEMENT (RACF)
         IHAACEE
         SPACE 1
*        TASK INPUT/OUTPUT TABLE
TIOT     DSECT
         IEFTIOT1
         SPACE 1
*        DATA FACILITIES AREA (SMS)
         IHADFA DSECT=YES
         SPACE 2
* --------------------------------------------------------- *
* CONTROL BLOCKS FOR LE
* --------------------------------------------------------- *
*        LE ENCLAVE DATA BLOCK
         CEEEDB
         SPACE 1
*        LE OPTIONS CONTROL BLOCK
*        where set values:  50 (default)
*                          100 (DOPT)
*                          200 (UOPT)
*                          500 (ROPT)
         CEEOCB
         SPACE 2
* --------------------------------------------------------- *
* CONTROL BLOCKS FOR MACRO IAZXJSAB
* --------------------------------------------------------- *
*        JOB SCHEDULER ADDRESS SPACE CONTROL BLOCK
         IAZJSAB
         SPACE 1
*        ADDRESS SPACE CONTROL BLOCK
         IHAASCB  DSECT=YES,LIST=YES
         SPACE 1
*        ADDRESS SPACE EXTENSION BLOCK
         IHAASXB
         SPACE 1
*        ADDRESS SPACE SECONDARY CONTROL BLOCK
         IHAASSB
         SPACE 1
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
*        PRINT NOGEN
         SYSSTATE ARCHLVL=2   0=ESA 1=ESA/390 2=z/ARCH
         IEABRCX DEFINE
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         ST    R1,PGMPLIST
         SPACE 1
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 1
         USING CEECAA,RC
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT NOGEN
PPA      CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=01,                                                 +
               REL=01,                                                 +
               MOD=00,                                                 +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *              initialize dynamic storage
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear storage
         SPACE 1
*        initialize the Static Storage Area pointers
         LARL  R1,LNE001T
         ST    R1,WS_SSA1     save ptr
         LARL  R1,LNE210T
         ST    R1,WS_SSA2     save ptr
         LARL  R1,LNE480T
         ST    R1,WS_SSA3     save ptr
         LARL  R1,LNE704T
         ST    R1,WS_SSA4     save ptr
         LARL  R1,LNE907T
         ST    R1,WS_SSA5     save ptr
         SPACE 1
         MVC   LEMDEST,F2
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         SPACE 2
* --------------------------------------------------------- *
* MAIN ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0100 EQU   *
         L     R1,PGMPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,MAIN8000    set default return
         MVC   PGMPARM1,@ASCA
         NC    PGMPARM1,=XL4'7FFFFFFF'
         TM    @ASCA,X'80'    Q. last parm
         JO    TXT0114A       A. yes, not enough parameters
         SPACE 1
         MVC   PGMPARM2,@ACTION
         NC    PGMPARM2,=XL4'7FFFFFFF'
         TM    @ACTION,X'80'  Q. last parm
         JO    TXT0114A       A. yes, not enough parameters
         SPACE 1
         MVC   PGMPARM3,@COMAREA
         NC    PGMPARM3,=XL4'7FFFFFFF'
         TM    @COMAREA,X'80' Q. last parm
         JO    MAIN0120       A. yes,
         SPACE 1
         MVC   PGMPARM4,@LEFDBK    save addr of LE FDBK
         NC    PGMPARM4,=XL4'7FFFFFFF'
         LARL  RE,MAIN0120    set default return
         TM    @LEFDBK,X'80'  Q. last parm
         JNO   TXT0113A       A. no, too many parameters
         DROP  R1
MAIN0120 EQU   *
         LARL  RE,MAIN8000    set default return
         ICM   RB,15,PGMPARM3 Q. valid addr
         JZ    TXT0105A       A. no,
         USING ENV_INFO,RB    est addr to commarea
         SPACE 1
MAIN0150 AS2LTRCE
         L     RF,PGMPARM2    get action
         ICM   RF,15,0(RF)    Q. valid action
         JZ    TXT0101A       A. no,
         C     RF,F5          Q. valid action
         JH    TXT0101A       A. no,
         SLL   RF,2           multi by 4
         B     *+4(RF)
         J     TXT0101A       0 - INVALID
         J     MAIN1000       1 - SET
         J     MAIN2000       2 - QUERY
         J     MAIN3000       3 - PUSH
         J     MAIN4000       4 - POP
         J     MAIN5000       5 - LIST
         EJECT
* --------------------------------------------------------- *
* PROCESS ACTION(SET)
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE ,      ACTION(SET)
         LARL  RE,MAIN8000    set default return
         J     TXT0103A
         SPACE 1
MAIN1990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(QUERY)
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE ,      ACTION(QUERY)
         BRAS  RE,PSARTN      collect PSA information
         BRAS  RE,CVTRTN      collect CVT information
         BRAS  RE,ECVTRTN     collect ECVT information
         BRAS  RE,ASCBRTN     collect ASCB information
         BRAS  RE,JESRTN      collect JES information
         BRAS  RE,DFARTN      collect DFA information
         BRAS  RE,TIOTRTN     collect TIOT/TIOTE information
         BRAS  RE,LERTN       collect LE information
         BRAS  RE,CSVRTN      collect CSV information
         SPACE 1
MAIN2990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(PUSH)
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE ,      ACTION(PUSH)
         LARL  RE,MAIN8000    set default return
         J     TXT0103A
         SPACE 1
MAIN3990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(POP)
* --------------------------------------------------------- *
         SPACE 1
MAIN4000 AS2LTRCE ,      ACTION(PUSH)
         LARL  RE,MAIN8000    set default return
         J     TXT0103A
         SPACE 1
MAIN4990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(LIST)
* --------------------------------------------------------- *
         SPACE 1
MAIN5000 AS2LTRCE ,      ACTION(LIST)
         BRAS  RE,PRTPSA      print PSA information
         BRAS  RE,PRTCVT      print CVT information
         BRAS  RE,PRTECVT     print ECVT information
         BRAS  RE,PRTASCB     print ASCB information
         BRAS  RE,PRTACEE     print ACEE information
         BRAS  RE,PRTJES      print JES information
         BRAS  RE,PRTDFA      print DFA information
         BRAS  RE,PRTTIOT     print TIOT/TIOTE information
         BRAS  RE,PRTLE       print LE information
         BRAS  RE,PRTCSV      print CSV information
         SPACE 1
MAIN5990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* POST PROCESSING / PRE-TERMINATION
* --------------------------------------------------------- *
         SPACE 1
MAIN8000 AS2LTRCE
         SPACE 1
MAIN8990 AS2LTRCE
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* RETRIEVE PSA INFORMATION
* --------------------------------------------------------- *
         SPACE 1
PSARTN   AS2LTRCE ,
         AS2RESTK PUSH
         MVC   ARCH,F0        start off with ARCH(0)
         USING PSA,R0
         MVI   PSA_ARCH,C'N'
         MVC   PSA_ARCH+1(L'PSA_ARCH-1),PSA_ARCH
         MVC   PSA_ARCHB0,FLCARCH
         TM    FLCARCH,PSAZARCH    Q. z/Arch
         JNO   PSA0010             A. no, bypass
         MVI   PSA_ZARCH,C'Y'      A. yes
PSA0010  EQU   *         initialize the facility list
         MVI   PSA_FACLST,C'N'     1st 16 bytes
         MVC   PSA_FACLST+1(L'PSA_FACLST-1),PSA_FACLST
         SPACE 1
         MVI   PSA_FACLST1,C'N'    2nd 16 bytes
         MVC   PSA_FACLST1+1(L'PSA_FACLST1-1),PSA_FACLST1
         SPACE 1
         LA    R7,FLCEFACILITIESLIST
         USING FaclData,R7
         SPACE 1
PSA0030  EQU   *         N3 inst installed x'80'
**PSA    MVC   PSA_FLSTB0,FLCFACL0
**PSAE   MVC   PSA_FLSTB0,FLCEFACILITIESLISTBYTE0
         MVC   PSA_FLSTB0,FaclByte0
**PSA    TM    FLCFACL0,FLCFN3     Q. N3 installed
**PSAE   TM    FLCEFACILITIESLISTBYTE0,FLCEZARCHN3
         TM    FaclByte0,FaclZArchN3
         JNO   PSA0032             A. no, bypass
         MVI   PSA_F0N3,C'Y'       A. yes,
PSA0032  EQU   *         z/Arch mode installed x'40'
**PSA    TM    FLCFACL0,FLCFZARI   Q. z/Arch mode installed
**PSAE   TM    FLCEFACILITIESLISTBYTE0,FLCEZARCHINSTALLED
         TM    FaclByte0,FaclZArchInstalled
         JNO   PSA0034             A. no, bypass
         MVI   PSA_F0ZMODE,C'Y'    A. yes,
         MVC   ARCH,F5        set ARCH(5) z900/z800
PSA0034  EQU   *         z/Arch mode active x'20'
**PSA    TM    FLCFACL0,FLCFZARA   Q. z/Arch mode active
**PSAE   TM    FLCEFACILITIESLISTBYTE0,FLCEZARCH
         TM    FaclByte0,FaclZArch
         JNO   PSA0036             A. no, bypass
         MVI   PSA_F0ZACT,C'Y'     A. yes,
PSA0036  EQU   *         IDTE installed x'10'
**PSAE   TM    FLCEFACILITIESLISTBYTE0,FLCEIDTEINSTALLED
         TM    FaclByte0,FaclIDTEInstalled
         JNO   PSA0038             A. no, bypass
         MVI   PSA_F0IDTE,C'Y'     A. yes,
PSA0038  EQU   *
PSA0040  EQU   *
PSA0042  EQU   *         ASN and LX reuse facility x'02' May 2004
**PSA    TM    FLCFACL0,FLCFASLX   Q. ASN & LX reuse facility
**PSAE   TM    FLCEFACILITIESLISTBYTE0,FLCEASNANDLXREUSEINSTALLED
         TM    FaclByte0,FaclAsnAndLxReuseInstalled
         JNO   PSA0044             Q. no, bypass
         MVI   PSA_F0ASLX,C'Y'     A. yes,
PSA0044  EQU   *         STFLE inst x'01' Sep 2005
**PSAE   TM    FLCEFACILITIESLISTBYTE0,FLCESTFLE  Q. STFLE inst
         TM    FaclByte0,FaclSTFLE
         JNO   PSA0060             A. no, bypass
         MVI   PSA_F0STFLE,C'Y'    A. yes,
         SPACE 1
PSA0060  EQU   *         Dynamic Address Translation x'80'
**PSA    MVC   PSA_FLSTB1,FLCFACL1
**PSAE   MVC   PSA_FLSTB1,FLCEFACILITIESLISTBYTE1
         MVC   PSA_FLSTB1,FaclByte1
**PSA    TM    FLCFACL1,FLCFEDAT   Q. DAT feature
**PSAE   TM    FLCEFACILITIESLISTBYTE1,FLCEEDATFEAT
         TM    FaclByte1,FaclEDatFeat
         JNO   PSA0062             A. no, bypass
         MVI   PSA_F1DAT,C'Y'      A. yes,
PSA0062  EQU   *         sense-running-status facility x'40'
**PSA    TM    FLCFACL1,FLCFSRS    Q. sense-running-status facility
**PSAE   TM    FLCEFACILITIESLISTBYTE1,FLCESENSERUNNINGSTATUS
         TM    FaclByte1,FaclSenseRunningStatus
         JNO   PSA0064             A. no, bypass
         MVI   PSA_F1SRSF,C'Y'     A. yes,
PSA0064  EQU   *         SSKE inst x'20' Apr 2007
**PSA    TM    FLCFACL1,FLCFSSKE   Q. SSKE inst installed
**PSAE   TM    FLCEFACILITIESLISTBYTE1,FLCECONDSSKEINSTALLED
         TM    FaclByte1,FaclCondSSKEInstalled
         JNO   PSA0066             A. no, bypass
         MVI   PSA_F1SSKE,C'Y'     A. yes,
PSA0066  EQU   *         STore System Information x'10'
**PSA    TM    FLCFACL1,FLCFCTOP   Q. STSI-enhancement
**PSAE   TM    FLCEFACILITIESLISTBYTE1,FLCECONFIGURATIONTOPOLOGY
         TM    FaclByte1,FaclConfigurationTopology
         JNO   PSA0068             A. no, bypass
         MVI   PSA_F1STSIE,C'Y'    A. yes,
PSA0068  EQU   *         CQCIF 110524 x'08'
         TM    FaclByte1,FaclCQCIF
         JNO   PSA0070             A. no, bypass
         MVI   PSA_F1CQCIF,C'Y'    A. yes,
PSA0070  EQU   *         IPTE-range facility x'04' Aug 2010
**PSAE   TM    FLCEFACILITIESLISTBYTE1,FLCEIPTERANGE
         TM    FaclByte1,FaclIPTERange
         JNO   PSA0072             A. no, bypass
         MVI   PSA_F1IPTE,C'Y'     A. yes,
PSA0072  EQU   *         Nonquiescing key-setting facility x'02'
*                        Aug 2010
**PSAE   TM    FLCEFACILITIESLISTBYTE1,FLCENONQKEYSETTING
         TM    FaclByte1,FaclNonQKeySetting
         JNO   PSA0074             A. no, bypass
PSA0074  EQU   *         APFT facility 091111 x'01'
**PSAE   TM    FLCEFACILITIESLISTBYTE1,FLCEAPFT
         TM    FaclByte1,FaclAPFT
         JNO   PSA0090             A. no, bypass
         MVI   PSA_F1APFT,C'Y'     A. yes,
         SPACE 1
PSA0090  EQU   *         Extended Translation Facility 2 x'80'
*                        Oct 2000
**PSA    MVC   PSA_FLSTB2,FLCFACL2
**PSAE   MVC   PSA_FLSTB2,FLCEFACILITIESLISTBYTE2
         MVC   PSA_FLSTB2,FaclByte2
**PSA    TM    FLCFACL2,FLCFETF2   Q. ETF-2
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCEETF2
         TM    FaclByte2,FaclETF2
         JNO   PSA0092             A. no, bypass
         MVI   PSA_F2ETF2,C'Y'     A. yes,
PSA0092  EQU   *         Cryptographic assist x'40'
**PSA    TM    FLCFACL2,FLCFCRYA   Q. Cryptographic assist
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCECRYPTOASSIST
         TM    FaclByte2,FaclCryptoAssist
         JNO   PSA0094             A. no, bypass
         MVI   PSA_F2CRYA,C'Y'     A. yes,
PSA0094  EQU   *         Long Displacement Facility x'20' Jun 2003
**PSA    TM    FLCFACL2,FLCFLD     Q. LD facilty
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCELONGDISPLACEMENT
         TM    FaclByte2,FaclLongDisplacement
         JNO   PSA0096             A. no, bypass
         MVI   PSA_F2LDF,C'Y'      A. yes,
PSA0096  EQU   *         Long Displacement Facility HP x'10'
**PSA    TM    FLCFACL2,FLCFLDHP   Q. LD High Performance
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCELONGDISPLACEMENTHP
         TM    FaclByte2,FaclLongDisplacementHP
         JNO   PSA0098             A. no, bypass
         MVI   PSA_F2LDFHP,C'Y'    A. yes,
         MVC   ARCH,F6        set ARCH(6) z990/z890
PSA0098  EQU   *         Hex Floating Point Multiply/Add/Sub x'08'
*                        Jun 2003
**PSA    TM    FLCFACL2,FLCFHMAS   Q. base-16 Multiply/Add/Subtract
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCEHFPMAS
         TM    FaclByte2,FaclHFPMAS
         JNO   PSA0100             A. no, bypass
         MVI   PSA_F2HFPMAS,C'Y'   A. yes,
PSA0100  EQU   *         z/Arch Extended immediate x'04' Sep 2005
**PSA    TM    FLCFACL2,FLCFEIMM   Q. Extended Immediate
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCEEXTENDEDIMMEDIATE
         TM    FaclByte2,FaclExtendedImmediate
         JNO   PSA0102             A. no, bypass
         MVI   PSA_F2XIMM,C'Y'     A. yes,
***      TM    FaclByte5,FaclDFPFHP     Q. DFP HP
***      JNO   PSA0186                  A. no, bypass
         MVC   ARCH,F7        set ARCH(7) z9
PSA0102  EQU   *         z/Arch Extended Translation Facility 3 x'02'
*                        May 2004
**PSA    TM    FLCFACL2,FLCFETF3   Q. ETF-3
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCEETF3
         TM    FaclByte2,FaclETF3
         JNO   PSA0104             A. no, bypass
         MVI   PSA_F2ETF3,C'Y'     A. yes,
PSA0104  EQU   *         Hex Floating Point x'01' Sep 2005
**PSA    TM    FLCFACL2,FLCFHUN    Q. HFP un-normalized extention
**PSAE   TM    FLCEFACILITIESLISTBYTE2,FLCEHFPUNNORMEXTENSION
         TM    FaclByte2,FaclHFPUnnormExtension
         JNO   PSA0120             A. no, bypass
         MVI   PSA_F2HFPUNX,C'Y'   A. yes,
         SPACE 1
PSA0120  EQU   *         Extended Translation Fac 2 enhancement x'80'
*                        Sep 2005
**PSA    MVC   PSA_FLSTB3,FLCFACL3
**PSAE   MVC   PSA_FLSTB3,FLCEFACILITIESLISTBYTE3
         MVC   PSA_FLSTB3,FaclByte3
**PSA    TM    FLCFACL3,FLCFET2E   Q. ETF-2 enhancement
**PSAE   TM    FLCEFACILITIESLISTBYTE3,FLCEETF2E
         TM    FaclByte3,FaclETF2E
         JNO   PSA0122             A. no, bypass
         MVI   PSA_F3ETF2E,C'Y'    A. yes,
PSA0122  EQU   *         STore Clock Facility x'40'
**PSA    TM    FLCFACL3,FLCFSTKF   Q. STCKF enhancement
**PSAE   TM    FLCEFACILITIESLISTBYTE3,FLCESTCKF
         TM    FaclByte3,FaclSTCKF
         JNO   PSA0124             A. no, bypass
         MVI   PSA_F3STKFE,C'Y'    A. yes,
PSA0124  EQU   *         Parsing enhancement facility x'20' Feb 2008
**PSAE   TM    FLCEFACILITIESLISTBYTE3,FLCEPARSE
         TM    FaclByte3,FaclParse
         JNO   PSA0126             A. no, bypass
         MVI   PSA_F3PARSE,C'Y'    A. yes,
PSA0126  EQU   *         x'10'
PSA0128  EQU   *         TOD clock steering facility x'08' Sep 2005
**PSAE   TM    FLCEFACILITIESLISTBYTE3,FLCETCSF
         TM    FaclByte3,FaclTCSF
         JNO   PSA0130             A. no, bypass
         MVI   PSA_F3TOD,C'Y'      A. yes,
PSA0130  EQU   *         x'04'
PSA0132  EQU   *         Extended Translation fac 3 enhancement x'02'
*                        Sep 2005
**PSA    TM    FLCFACL3,FLCFET3E   Q. ETF-3 enhancement
**PSAE   TM    FLCEFACILITIESLISTBYTE3,FLCEETF3E
         TM    FaclByte3,FaclETF3E
         JNO   PSA0134             A. no, bypass
         MVI   PSA_F3ETF3E,C'Y'    A. yes,
PSA0134  EQU   *         Extract-CPU-Time Facility x'01' Apr 2007
**PSA    TM    FLCFACL3,FLCFECT    Q. ECT Facility
**PSAE   TM    FLCEFACILITIESLISTBYTE3,FLCEECTF
         TM    FaclByte3,FaclECTF
         JNO   PSA0150             A. no, bypass
         MVI   PSA_F3ECTF,C'Y'     A. yes,
         SPACE 1
PSA0150  EQU   *         Compare & Swap & Store Facility x'80'
*                        Apr 2007
**PSA    MVC   PSA_FLSTB4,FLCFACL4
**PSAE   MVC   PSA_FLSTB4,FLCEFACILITIESLISTBYTE4
         MVC   PSA_FLSTB4,FaclByte4
**PSA    TM    FLCFACL4,FLCFCSSF   Q. CSS Facility
**PSAE   TM    FLCEFACILITIESLISTBYTE4,FLCECSSF
         TM    FaclByte4,FaclCSSF
         JNO   PSA0152             A. no, bypass
         MVI   PSA_F4CSSF,C'Y'     A. yes,
PSA0152  EQU   *         Compare & Swap & Store Facility 2 x'40'
*                        Feb 2008
**PSA    TM    FLCFACL4,FLCFCSF2   Q. CSS Facility 2
**PSAE   TM    FLCEFACILITIESLISTBYTE4,FLCECSSF2
         TM    FaclByte4,FaclCSSF2
         JNO   PSA0154             A. no, bypass
         MVI   PSA_F4CSSF2,C'Y'    A. yes,
PSA0154  EQU   *         General-Instruction-Extension Facility x'20'
*                        Feb 2008
**PSA    TM    FLCFACL4,FLCFGIEF   Q. General-Inst-Extension Facility
**PSAE   TM    FLCEFACILITIESLISTBYTE4,FLCEGENERALINSTEXTENSION
         TM    FaclByte4,FaclGeneralInstExtension
         JNO   PSA0156             A. no, bypass
         MVI   PSA_F4GIXF,C'Y'     A. yes,
         TM    FaclByte5,FaclDFPF
         JNO   PSA0156             A. no, bypass
         MVC   ARCH,F8        set ARCH(8) z10
PSA0156  EQU   *         Execute Extension Facility x'10' Feb 2008
         TM    FaclByte4,FaclExecuteExtF
         JNO   PSA0158             A. no, bypass
         MVI   PSA_F4EEF,C'Y'      A. yes,
PSA0158  EQU   *         Enhanced Monitor facility is supported x'08'
*                        Aug 2010
         TM    FaclByte4,FaclEnhancedMonitor
         JNO   PSA0160             A. no, bypass
         MVI   PSA_F4EMF,C'Y'      A. yes,
PSA0160  EQU   *         x'04'
PSA0162  EQU   *         x'02'
PSA0164  EQU   *         x'01'
         SPACE 1
PSA0178  EQU   *         Set-Program-Parameter facility x'80'
**PSA    MVC   PSA_FLSTB5,FLCFACL5
**PSAE   MVC   PSA_FLSTB5,FLCEFACILITIESLISTBYTE5
         MVC   PSA_FLSTB5,FaclByte5
         TM    FaclByte5,FaclSetProgramParm
         JNO   PSA0180             A. no, bypass
         MVI   PSA_F5SPPF,C'Y'     A. yes,
PSA0180  EQU   *         Floating Point Support Enhancement x'40'
**PSA    TM    FLCFACL5,FLCFFPSE   Q. FP Support enhancement
**PSAE   TM    FLCEFACILITIESLISTBYTE5,FLCEFPSEF
         TM    FaclByte5,FaclFPSEF
         JNO   PSA0182             A. no, bypass
         MVI   PSA_F5FPSE,C'Y'     A. yes,
PSA0182  EQU   *         Decimal Floating Point x'20' Apr 2007
**PSA    TM    FLCFACL5,FLCFDFP    Q. DFP
**PSAE   TM    FLCEFACILITIESLISTBYTE5,FLCEDFPF
         TM    FaclByte5,FaclDFPF
         JNO   PSA0184             A. no, bypass
         MVI   PSA_F5DFP,C'Y'      A. yes,
PSA0184  EQU   *         Decimal Floating Point HP x'10'
**PSA    TM    FLCFACL5,FLCFDFPH   Q. DFP High Performance
**PSAE   TM    FLCEFACILITIESLISTBYTE5,FLCEDFPFHP
         TM    FaclByte5,FaclDFPFHP
         JNO   PSA0186             A. no, bypass
         MVI   PSA_F5DFPHP,C'Y'    A. yes,
PSA0186  EQU   *         Conversion between FP formats x'08' Apr 2007
**PSA    TM    FLCFACL5,FLCFPFPO   Q. PFPO inst 070424
**PSAE   TM    FLCEFACILITIESLISTBYTE5,FLCEPFPO
         TM    FaclByte5,FaclPFPO
         JNO   PSA0188             A. no, bypass
         MVI   PSA_F5PFPO,C'Y'     A. yes,
PSA0188  EQU   *         z196 x'04' Aug 2010
**PSAE   TM    FLCEFACILITIESLISTBYTE5,FLCEDISTINCTOPERANDS
         TM    FaclByte5,FaclDistinctOperands     F-5 Aug 2010
*                        FaclHighWord             F-5 Aug 2010
*                        FaclLoadStoreOnCondition F-5 Aug 2010
*                        FaclPopulationCount      F-5 Aug 2010
         JNO   PSA0190             A. no, bypass
         MVI   PSA_F5Z196,C'Y'     A. yes,
** need to test for interlocked-access facility   F-?
         MVC   ARCH,F9        set ARCH(9) z196
PSA0190  EQU   *         x'02'
PSA0192  EQU   *         x'01'
PSA0200  EQU   *         x'80'
         SPACE 1
PSA0210  EQU   *         misc inst extentsion x'40' Sep 2012
**PSA    MVC   PSA_FLSTB6,FLCFACL6
**PSAE   MVC   PSA_FLSTB6,FLCEFACILITIESLISTBYTE6
         MVC   PSA_FLSTB6,FaclByte6
         TM    FaclByte6,FaclMiscInstExt     Sep 2012
*                        FaclExecutionHint   Sep 2012
*                        FaclLoadAndTrap     Sep 2012
         JNO   PSA0214             A. no, bypass
         MVI   PSA_F6MIEF,C'Y'     A. yes,
         TM    FaclByte9,FaclTransactionalExecution
         JNO   PSA0214
*        only good when CVTTX or PSATX on
         TM    PSAFLAGS,PSATX
         JNO   PSA0214             A. no, bypass
** need to test for enhanced decimal FP facility
         MVC   ARCH,F10       set ARCH(10) xc12
PSA0214  EQU   *         constrainded translation extension x'20'
         TM    FaclByte6,FaclConstrainedTX
         JNO   PSA0216
*        only good when CVTTXC or PSATXC on
         TM    PSAFLAGS,PSATXC
         JNO   PSA0216             A. no, bypass
         MVI   PSA_F6CTXF,C'Y'     A. yes,
PSA0216  EQU   *         x'10'
PSA0218  EQU   *         x'08'
PSA0220  EQU   *         load & store on cond 2 x'04'
         TM    FaclByte6,FACL_LoadStoreOnCond2
*                        FACL_LoadZeroRightmostByte
         JNO   PSA0222             A. no, bypass
         MVI   PSA_F6LSC2,C'Y'     A. yes,
PSA0222  EQU   *         Entropy Encoding for CMPSC x'02'
         TM    FaclByte6,FaclEEC
         JNO   PSA0224             A. no, bypass
         MVI   PSA_F6EECS,C'Y'     A. yes,
PSA0224  EQU   *         conditional trasaction end x'01'
         TM    FaclByte6,FACL_CTEND
         JNO   PSA0226             A. no, bypass
         MVI   PSA_F6CTEND,C'Y'    A. yes,
PSA0226  EQU   *
         SPACE 1
PSA0240  EQU   *         STPTODCS x'80'
**PSA    MVC   PSA_FLSTB7,FLCFACL7
**PSAE   MVC   PSA_FLSTB7,FLCEFACILITIESLISTBYTE7
         MVC   PSA_FLSTB7,FaclByte7
         TM    FaclByte7,FACL_STPTODCS
         JNO   PSA0242             A. no, bypass
         MVI   PSA_F7STPTODCS,C'Y' A. yes,
PSA0242  EQU   *         MSAE5 x'40' Mar 2005
         TM    FaclByte7,FaclMSAE5
         JNO   PSA0244             A. no, bypass
         MVI   PSA_F7MSAE5,C'Y'    A. yes,
PSA0244  EQU   *         MIE2 x'20'
         TM    FaclByte7,FaclMIE2
         JNO   PSA0246             A. no, bypass
         MVI   PSA_F7MIE2,C'Y'     A. yes,
PSA0246  EQU   *         SA x'10'
         TM    FaclByte7,FaclSA
         JNO   PSA0248             A. no, bypass
         MVI   PSA_F7SA,C'Y'       A. yes,
PSA0248  EQU   *         TSI x'08'
         TM    FaclByte7,FaclTSI
         JNO   PSA0250             A. no, bypass
         MVI   PSA_F7TSI,C'Y'      A. yes,
PSA0250  EQU   *         x'04'
PSA0252  EQU   *         x'02'
PSA0254  EQU   *         x'01'
         SPACE 1
PSA0270  EQU   *         RI x'80'
**PSA    MVC   PSA_FLSTB8,FLCFACL8
**PSAE   MVC   PSA_FLSTB8,FLCEFACILITIESLISTBYTE8
         MVC   PSA_FLSTB8,FaclByte8
         TM    FaclByte8,FaclRI
         JNO   PSA0272             A. no, bypass
         MVI   PSA_F8RI,C'Y'       A. yes,
PSA0272  EQU   *         Crypto AP-Queue adapter interruption x'40'
**PSAE   TM    FLCEFACILITIESLISTBYTE8,FLCECRYPTOAPQAI
         TM    FaclByte8,FaclCryptoAPQAI
         JNO   PSA0274             A. no, bypass
         MVI   PSA_F8CRYI,C'Y'     A. yes,
PSA0274  EQU   *         x'20'
PSA0276  EQU   *         CPU-measurement counter facility x'10'
**PSAE   TM    FLCEFACILITIESLISTBYTE8,FLCECPUMEASUREMENTCOUNTER
         TM    FaclByte8,FaclCpuMeasurementCounter
         JNO   PSA0278             A. no, bypass
         MVI   PSA_F8CPUMCF,C'Y'   A. yes,
PSA0278  EQU   *         CPU-measurement sampling facility x'08'
**PSAE   TM    FLCEFACILITIESLISTBYTE8,FLCECPUMEASUREMENTSAMPLING
         TM    FaclByte8,FaclCpuMeasurementSampling
         JNO   PSA0280             A. no, bypass
         MVI   PSA_F8CPUMSF,C'Y'   A. yes,
PSA0280  EQU   *         x'04'
PSA0282  EQU   *         AISI facility x'02'
**PSA    TM    FLCFACL8,FLCFAISI   Q. AISI facility
**PSAE   TM    FLCEFACILITIESLISTBYTE8,FLCEAISI
         TM    FaclByte8,FaclAISI
         JNO   PSA0284             A. no, bypass
         MVI   PSA_F8AISIF,C'Y'    A. yes,
PSA0284  EQU   *         AEN facility x'01'
**PSA    TM    FLCFACL8,FLCFAEN    Q. AEN facility
**PSAE   TM    FLCEFACILITIESLISTBYTE8,FLCEAEN
         TM    FaclByte8,FaclAEN
         JNO   PSA0300             A. no, bypass
         MVI   PSA_F8AENF,C'Y'     A. yes,
         SPACE 1
PSA0300  EQU   *         AIS facility x'80'
**PSA    MVC   PSA_FLSTB9,FLCFACL9
**PSAE   MVC   PSA_FLSTB9,FLCEFACILITIESLISTBYTE9
         MVC   PSA_FLSTB9,FaclByte9
**PSA    TM    FLCFACL9,FLCFAIS    Q. AIS facility
**PSAE   TM    FLCEFACILITIESLISTBYTE9,FLCEAIS
         TM    FaclByte9,FaclAIS
         JNO   PSA0302             A. no, bypass
         MVI   PSA_F9AISF,C'Y'     A. yes,
PSA0302  EQU   *         Transactional Execution facility x'40'
*                        Sep 2012
         TM    FaclByte9,FaclTransactionalExecution
         JNO   PSA0304
*        only good when CVTTX or PSATX on
         TM    PSAFLAGS,PSATX
         JNO   PSA0304             A. no, bypass
         MVI   PSA_F9TXF,C'Y'      A. yes,
PSA0304  EQU   *         x'20'
PSA0306  EQU   *         x'10'
PSA0308  EQU   *         MSA3 facility x'08' Aug 2010
         TM    FaclByte9,FaclMSA3
         JNO   PSA0310             A. no, bypass
         MVI   PSA_F9MSA3,C'Y'     A. yes,
PSA0310  EQU   *         MSA4 facility x'04' Aug 2010
**PSAE   TM    FLCEFACILITIESLISTBYTE9,FLCEMSA4
         TM    FaclByte9,FaclMSA4
         JNO   PSA0312             A. no, bypass
         MVI   PSA_F9MSA4,C'Y'     A. yes,
PSA0312  EQU   *         enhanced DAT-2 x'02' Sep 2012
         TM    FLCEFACILITIESLISTBYTE9,FLCEEDAT2
         JNO   PSA0314             A. no, bypass
         MVI   PSA_F9EDAT2,C'Y'    A. yes,
PSA0314  EQU   *         x'01'
         SPACE 1
PSA0330  EQU   *         decimal FP packed conversion x'80' Mar 2015
**PSAE   MVC   PSA_FLSTBA,FLCEFACILITIESLISTBYTEA
         MVC   PSA_FLSTBA,FaclByte10
         TM    FaclByte10,FACL_DFPPackedConversion
         JNO   PSA0360             A. no, bypass
         MVI   PSA_FADFPP,C'Y'     A. yes,
PSA0332  EQU   *         x'40'
PSA0334  EQU   *         x'20'
PSA0336  EQU   *         x'10'
PSA0338  EQU   *         x'08'
PSA0340  EQU   *         x'04'
PSA0342  EQU   *         x'02'
PSA0344  EQU   *         x'01'
         SPACE 1
PSA0360  EQU   *         facility byte-11
**PSAE   MVC   PSA_FLSTBB,FLCEFACILITIESLISTBYTEB
         MVC   PSA_FLSTBB,FaclByte11
         SPACE 1
PSA0390  EQU   *         facility byte-12
**PSAE   MVC   PSA_FLSTBC,FLCEFACILITIESLISTBYTEC
         MVC   PSA_FLSTBC,FaclByte12
         SPACE 1
PSA0420  EQU   *         facility byte-13
**PSAE   MVC   PSA_FLSTBD,FLCEFACILITIESLISTBYTED
         MVC   PSA_FLSTBD,FaclByte13
         SPACE 1
PSA0450  EQU   *         facility byte-14
**PSAE   MVC   PSA_FLSTBE,FLCEFACILITIESLISTBYTEE
         MVC   PSA_FLSTBE,FaclByte14
         SPACE 1
PSA0480  EQU   *         facility byte-15
**PSAE   MVC   PSA_FLSTBF,FLCEFACILITIESLISTBYTEF
         MVC   PSA_FLSTBF,FaclByte15
         SPACE 1
PSA0510  EQU   *         delay facility x'80'
         L     R6,FLCCVT      get addr of CVTMAP
         USING CVTMAP,R6      est addr to CVT common
         MVC   PSA_FLSTBG,FaclByte16
         TM    FaclByte16,FACL_DelayFacility
         JNO   PSA0512
         MVI   PSA_FGDLYF,C'Y'     A. yes,
PSA0512  EQU   *         Vector Extension Facility x'40' Mar 2015
         TM    FaclByte16,Facl_VectorExtensionFacility
*                         FaclZ1
         JNO   PSA0514
*        only good when CVTVEF on
         TM    CVTFLAG5,CVTVEF     Q. must also be on
         JNO   PSA0514             A. no, bypass
         MVI   PSA_FGVEF,C'Y'      A. yes,
         TM    FaclByte10,FACL_DFPPackedConversion
         JNO   PSA0514
         TM    FaclByte6,FACL_LoadStoreOnCond2
         JNO   PSA0514
         TM    FaclByte6,FACL_CTEND
         JNO   PSA0514
         MVC   ARCH,F11       set ARCH(11) z13
PSA0514  EQU   *         Inst Exec Prot facility x'20'
         TM    FaclByte16,FACL_InstExecProtFacility
*                         FACL_IFSuppressionFacility
         JNO   PSA0516
         MVI   PSA_FGIEPF,C'Y'     A. yes,
PSA0516  EQU   *         Side Effect facility x'10'
         TM    FaclByte16,FACL_SideEffectFacility
         JNO   PSA0518
         MVI   PSA_FGSEF,C'Y'      A. yes,
PSA0518  EQU   *         Close facility x'08'
         TM    FaclByte16,FACL_CloseFacility
         JNO   PSA0520
         MVI   PSA_FGCLOF,C'Y'     A. yes,
PSA0520  EQU   *         GSF x'04'
         TM    FaclByte16,FACL_GSF
         JNO   PSA0522
*        only good when CVTGSF on
         TM    CVTFLAG3,CvtGsf     Q. must also be on
         JNO   PSA0522             A. no, bypass
         MVI   PSA_FGGSF,C'Y'      A. yes,
PSA0522  EQU   *         RTI FC mod facility x'02'
         TM    FaclByte16,FACL_RTI_FCModFacility
         JNO   PSA0524
         MVI   PSA_FGRTI,C'Y'      A. yes,
PSA0524  EQU   *         x'01'
         SPACE 1
PSA0540  EQU   *         shared TLB x'80' Sep 2012
         MVC   PSA_FLSTBH,FaclByte17
         TM    FaclByte17,FACL_SharedTLB
         JNO   PSA0542
         MVI   PSA_FHSTLB,C'Y'     A. yes,
PSA0542  EQU   *         x'40'
PSA0544  EQU   *         x'20'
PSA0546  EQU   *         TOD clock epoch facility x'10'
         TM    FaclByte17,FACL_MultipleEpoch
*                         FACL_TODClockEpochFacility
         JNO   PSA0548
         MVI   PSA_FHCEF,C'Y'      A. yes,
PSA0548  EQU   *         x'08'
PSA0550  EQU   *         x'04'
PSA0552  EQU   *         store CPU ctr multiple x'02'
         TM    FaclByte17,FACL_StoreCpuCtrMultiple
         JNO   PSA0554
         MVI   PSA_FHSCCM,C'Y'     A. yes,
PSA0554  EQU   *         scaled CPU timer x'01'
         TM    FaclByte17,FACL_ScaledCpuTimer
         JNO   PSA0556
         MVI   PSA_FHSCT,C'Y'      A. yes,
PSA0556  EQU   *
         SPACE 1
PSA0560  EQU   *
         MVC   PSA_FLSTBI,FaclByte18
         SPACE 1
PSA0580  EQU   *
         MVC   PSA_FLSTBJ,FaclByte19
         SPACE 1
PSA0600  EQU   *
         MVC   PSA_FLSTBK,FaclByte20
         SPACE 1
PSA0620  EQU   *
         MVC   PSA_FLSTBL,FaclByte21
         SPACE 1
PSA0640  EQU   *
         MVC   PSA_FLSTBM,FaclByte22
         SPACE 1
PSA0660  EQU   *
         MVC   PSA_FLSTBN,FaclByte23
         SPACE 1
PSA0680  EQU   *
         MVC   PSA_FLSTBO,FaclByte24
         SPACE 1
PSA0700  EQU   *
         MVC   PSA_FLSTBP,FaclByte25
         SPACE 1
PSA0720  EQU   *
         MVC   PSA_FLSTBQ,FaclByte26
         SPACE 1
PSA0740  EQU   *
         MVC   PSA_FLSTBR,FaclByte27
         SPACE 1
PSA0760  EQU   *
         MVC   PSA_FLSTBS,FaclByte28
         SPACE 1
PSA0780  EQU   *
         MVC   PSA_FLSTBT,FaclByte29
         SPACE 1
PSA0800  EQU   *
         MVC   PSA_FLSTBU,FaclByte30
         SPACE 1
PSA0820  EQU   *
         MVC   PSA_FLSTBV,FaclByte31
         SPACE 1
         DROP  R0,R6,R7
         SPACE 1
PSA0900  EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE CVT INFORMATION
* --------------------------------------------------------- *
         SPACE 1
CVTRTN   AS2LTRCE ,
         AS2RESTK PUSH
         USING PSA,R0
         L     R6,FLCCVT      get addr of CVTMAP
         ST    R6,WS_@CVT     save addr of CVTMAP
         DROP  R0
         AHI   R6,-256
         LARL  RE,CVT0900     set default return
         USING CVTFIX,R6      est addr to CVTFIX
         CLC   CVTCVT,=CL4' CVT'   Q. really CVT
         JNE   TXT0108A            A. no, bypass
*        prefix area
         MVC   CVT_PPLVL,CVTPROD   copy product name & id
         MVC   CVT_UVID,CVTVERID   copy optional user name of system
         ZAP   PD01,=P'0'
         MVO   PD01,CVTMDL
         UNPK  ZD01,PD01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   CVT_CPU,ZD01+L'ZD01-L'CVT_CPU      copy CPU model nbr
         MVC   CVT_RRMM,CVTRELNO   copy product rel & mod
         SPACE 1
*        common area     CVTDCB
         MVI   CVT_DCB,C'N'
         MVC   CVT_DCB+1(L'CVT_DCB-1),CVT_DCB
         MVC   CVT_DCBB0,CVTDCB
CVT0030  EQU   *         x'80'
         TM    CVTDCB,CVTMVSE      Q. S/370-XA mode execution
         JNO   CVT0032             A. no, bypass
         MVI   CVT_370XA,C'Y'      A. yes,
CVT0032  EQU   *         x'40'
         TM    CVTDCB,CVT1SSS      Q. PCP
         JNO   CVT0034             A. no, bypass
         MVI   CVT_PCP,C'Y'        A. yes,
CVT0034  EQU   *         x'20'
         TM    CVTDCB,CVT2SPS      Q. MFT
         JNO   CVT0036             A. no, bypass
         MVI   CVT_MFT,C'Y'        A. yes,
CVT0036  EQU   *         x'10'
         TM    CVTDCB,CVT4MS1      Q. MVT
         JNO   CVT0038             A. no, bypass
         MVI   CVT_MVT,C'Y'        A. yes,
CVT0038  EQU   *         x'08'
         TM    CVTDCB,CVTOSEXT     Q. CVTOSLVL area exist
         JNO   CVT0040             A. no, bypass
         MVI   CVT_FLG0,C'Y'       A. yes,
CVT0040  EQU   *         x'04'
         TM    CVTDCB,CVT4MPS      Q. M-65 multiprocessing
         JNO   CVT0042             A. no, bypass
         MVI   CVT_M65MP,C'Y'      A. yes,
CVT0042  EQU   *         x'02'
         TM    CVTDCB,CVT6DAT      Q. DAT
         JNO   CVT0044             A. no, bypass
         MVI   CVT_DAT,C'Y'        A. yes,
CVT0044  EQU   *         x'01'
         TM    CVTDCB,CVTMVS2      Q. MVS
         JNO   CVT0046             A. no, bypass
         MVI   CVT_MVS,C'Y'        A. yes,
         SPACE 1
CVT0046  EQU   *         CVTOPTA
         MVI   CVT_OPTA,C'N'
         MVC   CVT_OPTA+1(L'CVT_OPTA-1),CVT_OPTA
         MVC   CVT_OPTAB0,CVTOPTA
CVT0060  EQU   *         x'80'
         TM    CVTOPTA,CVTCCH      Q. Channel Check Handler
         JNO   CVT0062             A. no, bypass
         MVI   CVT_CCH,C'Y'        A. yes,
CVT0062  EQU   *         x'40'
         TM    CVTOPTA,CVTAPR      Q. Alternate Path Retry
         JNO   CVT0064             A. no, bypass
         MVI   CVT_APR,C'Y'        A. yes,
CVT0064  EQU   *         x'20'
         TM    CVTOPTA,CVTDDR      Q. Dynamic Device Reconfig
         JNO   CVT0066             A. no, bypass
         MVI   CVT_DDR,C'Y'        A. yes,
CVT0066  EQU   *         x'10'
         TM    CVTOPTA,CVTNIP      Q. NIP executing
         JNO   CVT0070             A. no, bypass
         MVI   CVT_NIP,C'Y'        A. yes,
CVT0068  EQU   *         x'08'
CVT0070  EQU   *         x'04'
         TM    CVTOPTA,CVT121TR    Q. no EXCP V=R
         JNO   CVT0072             A. no, bypass
         MVI   CVT_NVEQR,C'Y'      A. yes,
CVT0072  EQU   *         x'02'
         TM    CVTOPTA,CVTASCII    Q. ASCII tape processing
         JNO   CVT0074             A. no, bypass
         MVI   CVT_ASCII,C'Y'      A. yes,
CVT0074  EQU   *         x'01'
         TM    CVTOPTA,CVTXPFP     Q. extended percision FP
         JNO   CVT0076             A. no, bypass
         MVI   CVT_XPFP,C'Y'       A. yes,
         SPACE 1
CVT0076  EQU   *         CVTOPTB
         MVI   CVT_OPTB,C'N'
         MVC   CVT_OPTB+1(L'CVT_OPTB-1),CVT_OPTB
         MVC   CVT_OPTBB0,CVTOPTB
CVT0090  EQU   *         x'80'
         TM    CVTOPTB,CVTPROT     Q. Storage Protect feature
         JNO   CVT0092             A. no, bypass
         MVI   CVT_STGPROT,C'Y'    A. yes,
CVT0092  EQU   *         x'40'
         TM    CVTOPTB,CVTCTIMS    Q. Hardware Clock Comparator
*                                     CPU Timer feature
         JNO   CVT0094             A. no, bypass
         MVI   CVT_HWCCTF,C'Y'     A. yes,
CVT0094  EQU   *         x'20'
         TM    CVTOPTB,CVTTOD      Q. Time-of-Day clock feature
         JNO   CVT0096             A. no, bypass
         MVI   CVT_TOD,C'Y'        A. yes,
CVT0096  EQU   *         x'10'
         TM    CVTOPTB,CVTNLOG     Q. no SYS1.LOGREC
         JNO   CVT0098             A. no, bypass
         MVI   CVT_NLOG,C'Y'       A. yes,
CVT0098  EQU   *         x'08'
CVT0100  EQU   *         x'04'
         TM    CVTOPTB,CVTFP       Q. FETCH protect feature
         JNO   CVT0102             A. no, bypass
         MVI   CVT_FPROT,C'Y'      A. yes,
CVT0102  EQU   *         x'02'
         TM    CVTOPTB,CVTVS1A     Q. VS1 assist MDC353
         JNO   CVT0104             A. no, bypass
         MVI   CVT_VS1A,C'Y'       A. yes,
CVT0104  EQU   *         x'01'
         TM    CVTOPTB,CVTVS1B     Q. VS1 assist MDC365
         JNO   CVT0106             A. no, bypass
         MVI   CVT_VS1B,C'Y'
         SPACE 1
CVT0106  EQU   *         CVTFLAG1
         MVI   CVT_FLAG1,C'N'
         MVC   CVT_FLAG1+1(L'CVT_FLAG1-1),CVT_FLAG1
         MVC   CVT_FLAG1B0,CVTFLAG1
CVT0108  EQU   *         x'80'
CVT0110  EQU   *         x'40'
         SPACE 1
CVT0112  EQU   *         x'20'
         TM    CVTFLAG1,CVTCUSE    Q. CUSE
         JNO   CVT0114             A. no, bypass
         MVI   CVT_CUSE,C'Y'       A. yes,
CVT0114  EQU   *         x'10'
CVT0116  EQU   *         x'08'
CVT0118  EQU   *         x'04'
         TM    CVTFLAG1,CVTCSTR    Q. cstring facility is present
         JNO   CVT0120             A. no, bypass
         MVI   CVT_CSTR,C'Y'       A. yes,
CVT0120  EQU   *         x'02'
         TM    CVTFLAG1,CVTSUBSP   Q. subspace facility is present
         JNO   CVT0122             A. no, bypass
         MVI   CVT_SUBSP,C'Y'      A. yes,
CVT0122  EQU   *         x'01'
         SPACE 1
CVT0124  EQU   *         CVTFLAG2
         MVI   CVT_FLAG2,C'N'
         MVC   CVT_FLAG2+1(L'CVT_FLAG2-1),CVT_FLAG2
         MVC   CVT_FLAG2B0,CVTFLAG2
CVT0126  EQU   *         x'80'
         TM    CVTFLAG2,CVTCMPSC   Q. Compression/Expansion service
         JNO   CVT0128             A. no, bypass
         MVI   CVT_CMPSC,C'Y'      A. yes,
CVT0128  EQU   *         x'40'
         TM    CVTFLAG2,CVTCMPSH   Q. Compression/Expansion hardware
         JNO   CVT0130             A. no, bypass
         MVI   CVT_CMPSCHW,C'Y'    A. yes,
CVT0130  EQU   *         x'20'
         TM    CVTFLAG2,CVTSOPF    Q. Suppression-on-Protection
         JNO   CVT0132             A. no, bypass
         MVI   CVT_SOPF,C'Y'
CVT0132  EQU   *         x'10'
         TM    CVTFLAG2,CVTBFPH    Q. BFP inst set
         JNO   CVT0134             A. no, bypass
         MVI   CVT_BFP,C'Y'        A. yes,
CVT0134  EQU   *         x'08'
         TM    CVTFLAG2,CVTPER2    Q. PER2 hardware
         JNO   CVT0136             A. no, bypass
         MVI   CVT_PER2,C'Y'       A. yes.
CVT0136  EQU   *         x'04'
         TM    CVTFLAG2,CVTIQD     Q. Internal Queued Direct Comm
         JNO   CVT0138             A. no, bypass
         MVI   CVT_IQDC,C'Y'       A. yes,
CVT0138  EQU   *         x'02'
         TM    CVTFLAG2,CVTALR     Q. ASN & LX reuse Arch
         JNO   CVT0140             A. no, bypass
         MVI   CVT_ASNLX,C'Y'      A. yes,
CVT0140  EQU   *         x'01'
         TM    CVTFLAG2,CVTEDAT    Q. Enhanced DAT Arch
         JNO   CVT0142             A. no, bypass
         MVI   CVT_EDAT,C'Y'       A. yes,
         SPACE 1
CVT0142  EQU   *         CVTFLAG3
         MVI   CVT_FLAG3,C'N'
         MVC   CVT_FLAG3+1(L'CVT_FLAG3-1),CVT_FLAG3
         MVC   CVT_FLAG3B0,CVTFLAG3
CVT0144  EQU   *         x'80'
         TM    CVTFLAG3,CVTZARCH   Q. zArch hw
         JNO   CVT0146             A. no, bypass
         MVI   CVT_ZARCH,C'Y'      A. yes,
CVT0146  EQU   *         x'40'
CVT0148  EQU   *         x'20'
CVT0150  EQU   *         x'10'
CVT0152  EQU   *         x'08'
CVT0154  EQU   *         x'04'
CVT0156  EQU   *         x'02'
CVT0158  EQU   *         x'01'
         TM    CVTFLAG3,CvtGsf     Q. GSF available
         JNO   CVT0160             A. no, bypass
         MVI   CVT_GSF,C'Y'        A. yes,
         SPACE 1
CVT0160  EQU   *         CVTFLAG4
         MVI   CVT_FLAG4,C'N'
         MVC   CVT_FLAG4+1(L'CVT_FLAG4-1),CVT_FLAG4
         MVC   CVT_FLAG4B0,CVTFLAG4
CVT0162  EQU   *         x'80'
         TM    CVTFLAG4,CVTP001I   Q. P001 installed
         JNO   CVT0164             A. no, bypass
         MVI   CVT_P001I,C'Y'      A. yes,
CVT0164  EQU   *         x'40'
         TM    CVTFLAG4,CVTP001A   Q. P001 active
         JNO   CVT0166             A. no, bypass
         MVI   CVT_P001A,C'Y'      A. yes,
CVT0166  EQU   *         x'20'
         TM    CVTFLAG4,CVTZNALC   Q. zNALC
         JNO   CVT0168             A. no, bypass
         MVI   CVT_ZNALC,C'Y'      A. yes,
CVT0168  EQU   *         x'10'
         TM    CVTFLAG4,CVTDCPA    Q. dynamic CPU addition enabled
         JNO   CVT0170             A. no, bypass
         MVI   CVT_DCPUA,C'Y'      A. yes,
CVT0170  EQU   *         x'08'
         TM    CVTFLAG4,CVTTX      Q. P002/TX support enabled
         JNO   CVT0172             A. no, bypass
         MVI   CVT_TX,C'Y'         A. yes,
CVT0172  EQU   *         x'04'
         TM    CVTFLAG4,CVTTXC     Q. P002C/TXC support enabled
         JNO   CVT0174             A. no, bypass
         MVI   CVT_TXC,C'Y'        A. yes,
CVT0174  EQU   *         x'02'
         TM    CVTFLAG4,CVTRI      Q. RI support enabled
         JNO   CVT0176             A. no, bypass
         MVI   CVT_RI,C'Y'         A. yes,
CVT0176  EQU   *         x'01'
         TM    CVTFLAG4,CVTEDAT2   Q. EDAT2 enabled
         JNO   CVT0180             A. no, bypass
         MVI   CVT_EDAT2,C'Y'      A. yes,
         SPACE 1
CVT0180  EQU   *         CVTFLAG5
         MVI   CVT_FLAG5,C'N'
         MVC   CVT_FLAG5+1(L'CVT_FLAG5-1),CVT_FLAG5
         MVC   CVT_FLAG5B0,CVTFLAG5
CVT0182  EQU   *         x'80'
         TM    CVTFLAG5,CVTVEF     Q. vector extension facility (Z1)
         JNO   CVT0184             A. no, bypass
         MVI   CVT_VEF,C'Y'        A. yes,
CVT0184  EQU   *         x'40'
         TM    CVTFLAG5,CVTEEC     Q. EEC
         JNO   CVT0186             A. no, bypass
         MVI   CVT_EEC,C'Y'        A. yes,
CVT0186  EQU   *         x'20'
CVT0188  EQU   *         x'10'
CVT0190  EQU   *         x'08'
CVT0192  EQU   *         x'04'
CVT0194  EQU   *         x'02'
CVT0196  EQU   *         x'01'
         SPACE 1
CVT0198  EQU   *         CVTFLAG6
         MVI   CVT_FLAG6,C'N'
         MVC   CVT_FLAG6+1(L'CVT_FLAG6-1),CVT_FLAG6
         MVC   CVT_FLAG6B0,CVTFLAG6
CVT0200  EQU   *         x'80'
         TM    CVTFLAG6,CVTSOLED   Q. solution edition
         JNO   CVT0202             A. no, bypass
         MVI   CVT_SOLE,C'Y'       A. yes,
CVT0202  EQU   *         x'40'
CVT0204  EQU   *         x'20'
CVT0206  EQU   *         x'10'
CVT0208  EQU   *         x'08'
CVT0210  EQU   *         x'04'
CVT0212  EQU   *         x'02'
CVT0214  EQU   *         x'01'
         SPACE 1
CVT0218  EQU   *         CVTFLAG7
         MVI   CVT_FLAG7,C'N'
         MVC   CVT_FLAG7+1(L'CVT_FLAG7-1),CVT_FLAG7
         MVC   CVT_FLAG7B0,CVTFLAG7
CVT0220  EQU   *         x'80'
CVT0222  EQU   *         x'40'
CVT0224  EQU   *         x'20'
CVT0226  EQU   *         x'10'
CVT0228  EQU   *         x'08'
CVT0230  EQU   *         x'04'
CVT0232  EQU   *         x'02'
CVT0234  EQU   *         x'01'
         SPACE 1
CVT0236  EQU   *         CVTFLAG8
         MVI   CVT_FLAG8,C'N'
         MVC   CVT_FLAG8+1(L'CVT_FLAG8-1),CVT_FLAG8
         MVC   CVT_FLAG8B0,CVTFLAG8
CVT0238  EQU   *         x'80'
CVT0240  EQU   *         x'40'
CVT0242  EQU   *         x'20'
CVT0244  EQU   *         x'10'
CVT0246  EQU   *         x'08'
CVT0248  EQU   *         x'04'
CVT0250  EQU   *         x'02'
CVT0252  EQU   *         x'01'
         SPACE 1
CVT0254  EQU   *         CVTTZ
         MVC   CVT_LDTOFF,CVTTZ    offset +- from GMT/UTC
         L     R1,CVT_LDTOFF       convert to +-hh:mm
         CVD   R1,DW01
         MP    DW01,=P'1.048576'
         DP    DW01,=P'3600'
         ZAP   DW02,DW01(L'DW01-3)
         MP    DW02,=P'100'
         SRP   DW02,(64-6),5
         MVC   WGMTOFF,=X'402020217A2020'    pattern sdhh:mm
         LA    R1,WGMTOFF+L'WGMTOFF-3   init sign pos
         EDMK  WGMTOFF,DW02+L'DW02-3
         JZ    CVT0255
         BCTR  R1,R0          subt 1 without chging cc
         MVI   0(R1),C'+'     default plus sign
         JP    CVT0255
         MVI   0(R1),C'-'
CVT0255  MVC   CVT_GMTOFF,WGMTOFF+L'WGMTOFF-L'CVT_GMTOFF
CVT0256  EQU   *
CVT0300  EQU   *         initialize the OS level
         MVI   CVT_OSLVL,C'N'
         MVC   CVT_OSLVL+1(L'CVT_OSLVL-1),CVT_OSLVL
         SPACE 1
CVT0302  EQU   *         CVTOSLVO
         MVC   CVT_OSLVLB0,CVTOSLV0     x'FF'
*                        ESA/370 support x'80'
         TM    CVTOSLV0,CVTESA     Q. ESA/370 support
         JNO   CVT0304             A. no, bypass
         MVI   CVT_F0HBB3310,C'Y'  A. yes,
CVT0304  EQU   *         HBB4420 functions are present x'40'
         TM    CVTOSLV0,CVTH4420   Q. HBB4420
         JNO   CVT0306             A. no, bypass
         MVI   CVT_F0HBB4420,C'Y'  A. yes,
CVT0306  EQU   *         JBB3313 functions are present x'20'
         TM    CVTOSLV0,CVTJ3313   Q. JBB3313
         JNO   CVT0308             A. no, bypass
         MVI   CVT_F0JBB3313,C'Y'  A. yes,
CVT0308  EQU   *         JBB3311 functions are present x'10'
         TM    CVTOSLV0,CVTJ3311   Q. hiperspace
         JNO   CVT0310             A. no, bypass
         MVI   CVT_F0JBB3311,C'Y'  A. yes,
CVT0310  EQU   *         HBB4410 functions are present x'08'
         TM    CVTOSLV0,CVTH4410   Q. UCB services
         JNO   CVT0312             A. no, bypass
         MVI   CVT_F0HBB4410,C'Y'  A. yes,
CVT0312  EQU   *         Data Space SCOPE=COMMON supported x'04'
         TM    CVTOSLV0,CVTCADS    Q. data space supported
         JNO   CVT0314             A. no, bypass
         MVI   CVT_F0DTASPC,C'Y'   A. yes,
CVT0314  EQU   *         encryption asymmetric feature x'02'
         TM    CVTOSLV0,CVTCRPTL   Q. encryption feature
         JNO   CVT0316             A. no, bypass
         MVI   CVT_F0CRPT,C'Y'     A. yes,
CVT0316  EQU   *         JBB4422 functions are present x'01'
         TM    CVTOSLV0,CVTJ4422   Q. JBB4422
         JNO   CVT0320             A. no, bypass
         MVI   CVT_F0JBB4422,C'Y'  A. yes,
         SPACE 1
CVT0320  EQU   *         CVTOSLV1 x'FF'
         MVC   CVT_OSLVLB1,CVTOSLV1
*                        dynamic APF x'80'
         TM    CVTOSLV1,CVTH4430   Q. dynamic APF
         JNO   CVT0322             A. no, bypass
         MVI   CVT_F1HBB4430,C'Y'  A. yes,
CVT0322  EQU   *         WLM installed x'40'
         TM    CVTOSLV1,CVTWLM     Q. WLM installed
         JNO   CVT0324             A. no, bypass
         MVI   CVT_F1WLM,C'Y'      A. yes,
CVT0324  EQU   *         HBB5510 functions are present x'20'
         TM    CVTOSLV1,CVTH5510   Q. CSVDYNEX for dynamic exits
         JNO   CVT0326             A. no, bypass
         MVI   CVT_F1HBB5510,C'Y'  A. yes,
CVT0326  EQU   *         HBB5520 functions are present x'10'
         TM    CVTOSLV1,CVTH5520   Q. ENCLAVES
         JNO   CVT0328             A. no, bypass
         MVI   CVT_F1HBB5520,C'Y'  A. yes,
CVT0328  EQU   *         JBB5522 functions are present x'08'
         TM    CVTOSLV1,CVTJ5522   Q. JBB5522
         JNO   CVT0330             A. no, bypass
         MVI   CVT_F1JBB5522,C'Y'  A. yes,
CVT0330  EQU   *         HBB6603 functions are present x'04'
         TM    CVTOSLV1,CVTH6603   Q. OS/390 R3
         JNO   CVT0332             A. no, bypass
         MVI   CVT_F1HBB6603,C'Y'  A. yes,
CVT0332  EQU   *         HBB6601 functions are present x'02'
         TM    CVTOSLV1,CVTH6601   Q. OS/390 R1
         JNO   CVT0334             A. no, bypass
         MVI   CVT_F1HBB6601,C'Y'  A. yes,
CVT0334  EQU   *         HBB6602 functions are present x'01'
         TM    CVTOSLV1,CVTJ6602   Q. OS/390 R2
         JNO   CVT0340             A. no, bypass
         MVI   CVT_F1HBB6602,C'Y'  A. yes,
         SPACE 1
CVT0340  EQU   *         CVTOSLV2 x'FF'
         MVC   CVT_OSLVLB2,CVTOSLV2
*                        JBB6604 functions are present x'80'
         TM    CVTOSLV2,CVTJ6604   Q. OS/390 R4
         JNO   CVT0342             A. no, bypass
         MVI   CVT_F2JBB6604,C'Y'  A. yes,
CVT0342  EQU   *         HBB6605 functions are present x'40'
         TM    CVTOSLV2,CVTH6605   Q. OS/390 R5
         JNO   CVT0344             A. no, bypass
         MVI   CVT_F2HBB6605,C'Y'  A. yes,
CVT0344  EQU   *         HBB6606 functions are present x'20'
         TM    CVTOSLV2,CVTH6606   Q. OS/390 R6
         JNO   CVT0346             A. no, bypass
         MVI   CVT_F2HBB6606,C'Y'  A. yes,
CVT0346  EQU   *         BFP simulated unless CVTBFPH is on x'10'
         TM    CVTOSLV2,CVTBFP     Q. BFP
         JNO   CVT0348             A. no, bypass
         MVI   CVT_F2BFP,C'Y'      A. yes,
CVT0348  EQU   *         JBB6607 functions are present x'08'
         TM    CVTOSLV2,CVTJ6607   Q. OS/390 R7
         JNO   CVT0348             A. no, bypass
         MVI   CVT_F2JBB6607,C'Y'  A. yes,
CVT0350  EQU   *         HBB6608 functions are present x'04'
         TM    CVTOSLV2,CVTH6608   Q. OS/390 R8
         JNO   CVT0352             A. no, bypass
         MVI   CVT_F2HBB6608,C'Y'  A. yes,
CVT0352  EQU   *         JBB6609 functions are present x'02'
         TM    CVTOSLV2,CVTH6609   Q. OS/390 R9
         JNO   CVT0354             A. no, bypass
         MVI   CVT_F2JBB6609,C'Y'  A. yes,
CVT0354  EQU   *         HBB7703 functions are present x'01'
         TM    CVTOSLV2,CVTH7703   Q. OS/390 R10
         JNO   CVT0360             A. no, bypass
         MVI   CVT_F2HBB7703,C'Y'  A. yes,
         SPACE 1
CVT0360  EQU   *         CVTOSLV3 x'FF'
         MVC   CVT_OSLVLB3,CVTOSLV3
*                        pause/release services x'80'
         TM    CVTOSLV3,CVTPAUSE   Q. pause/release svcs
         JNO   CVT0362             A. no, bypass
         MVI   CVT_F3PAUSE,C'Y'    A. yes,
CVT0362  EQU   *         IEAVAPE2 & related svcs x'40'
         TM    CVTOSLV3,CVTPAUS2   Q. IEAVAPE2 & related svcs
         JNO   CVT0364             A. no, bypass
         MVI   CVT_F3PAUSE2,C'Y'   A. yes,
CVT0364  EQU   *         JBB7713 functions are present x'20'
         TM    CVTOSLV3,CVTJ7713   Q. z/OS V1R1
         JNO   CVT0366             A. no, bypass
         MVI   CVT_F3JBB7713,C'Y'  A. yes,
CVT0366  EQU   *         HBB7705 functions are present x'10'
         TM    CVTOSLV3,CVTH7705   Q. z/OS V1R2
         JNO   CVT0368             A. no, bypass
         MVI   CVT_F3HBB7705,C'Y'  A. yes,
CVT0368  EQU   *         HBB7706 functions are present x'08'
         TM    CVTOSLV3,CVTH7706   Q. z/OS V1R3
         JNO   CVT0370             A. no, bypass
         MVI   CVT_F3HBB7706,C'Y'  A. yes,
CVT0370  EQU   *         HBB7707 functions are present x'04'
         TM    CVTOSLV3,CVTH7707   Q. z/OS V1R4
         JNO   CVT0372             A. no, bypass
         MVI   CVT_F3HBB7707,C'Y'  A. yes,
CVT0372  EQU   *         HBB7708 functions are present x'02'
         TM    CVTOSLV3,CVTH7708   Q. z/OS V1R5
         JNO   CVT0374             A. no, bypass
         MVI   CVT_F3HBB7708,C'Y'  A. yes,
CVT0374  EQU   *         HBB7709 functions are present x'01'
         TM    CVTOSLV3,CVTH7709   Q. z/OS V1R6
         JNO   CVT0380             A. no, bypass
         MVI   CVT_F3HBB7709,C'Y'  A. yes,
         SPACE 1
CVT0380  EQU   *         CVTOSLV4 x'AF'
         MVC   CVT_OSLVLB4,CVTOSLV4
*                        CSRSI svc x'80'
         TM    CVTOSLV4,CVTCSRSI   Q. CSRSI svc
         JNO   CVT0382             A. no, bypass
         MVI   CVT_F4CSRSI,C'Y'    A. yes,
CVT0382  EQU   *         Unicode callable svcs x'40'
         TM    CVTOSLV4,CVTUNICS   Q. Unicode callable svcs
         JNO   CVT0384             A. no, bypass
         MVI   CVT_F4UNICODE,C'Y'  A. yes,
CVT0384  EQU   *         CSRUNIC callable svcs x'20'
         TM    CVTOSLV4,CVTCSRUN   Q. CSRUNIC callable svcs
         JNO   CVT0386             A. no, bypass
         MVI   CVT_F4CSRUNIC,C'Y'  A. yes,
CVT0386  EQU   *         IBM License Manager x'10'
         TM    CVTOSLV4,CVTILM     Q. IBM License Manager
         JNO   CVT0388             A. no, bypass
         MVI   CVT_F4IBMLM,C'Y'    A. yes,
CVT0388  EQU   *         ASN & LX reuse Arch x'08'
         TM    CVTOSLV4,CVTALRS    Q. ASN & LX reuse Arch
         JNO   CVT0390             A. no, bypass
         MVI   CVT_F4ASNLX,C'Y'    A. yes,
CVT0390  EQU   *         TIME_ON_CP x'04'
         TM    CVTOSLV4,CVTTOCP    Q. TIME_ON_CP
         JNO   CVT0392             A. no, bypass
         MVI   CVT_F4TOCP,C'Y'     A. yes,
CVT0392  EQU   *         zIIP support x'02'
         TM    CVTOSLV4,CVTZIIP    Q. zIIP support
         JNO   CVT0394             A. no, bypass
         MVI   CVT_F4ZIIP,C'Y'     A. yes,
CVT0394  EQU   *         IFA routine x'01'
         TM    CVTOSLV4,CVTIFAR    Q. IFA routine
         JNO   CVT0400             A. no, bypass
         MVI   CVT_F4IFA,C'Y'      A. yes,
         SPACE 1
CVT0400  EQU   *         CVTOSLV5 x'7F'
         MVC   CVT_OSLVLB5,CVTOSLV5
*                        z/OS.e x'80'
         TM    CVTOSLV5,CVTZOSE    Q. z/OS.e
         JNO   CVT0402             A. no, bypass
         MVI   CVT_F5ZOSE,C'Y'     A. yes,
CVT0402  EQU   *         HBB7720 functions are present x'40'
         TM    CVTOSLV5,CVTH7720   Q. z/OS V1R7
         JNO   CVT0404             A. no, bypass
         MVI   CVT_F5HBB7720,C'Y'  A. yes,
CVT0404  EQU   *         HBB7730 functions are present x'20'
         TM    CVTOSLV5,CVTH7730   Q. z/OS V1R8
         JNO   CVT0406             A. no, bypass
         MVI   CVT_F5HBB7730,C'Y'  A. yes,
CVT0406  EQU   *         HBB7740 functions are present x'10'
         TM    CVTOSLV5,CVTH7740   Q. z/OS V1R9
         JNO   CVT0408             A. no, bypass
         MVI   CVT_F5HBB7740,C'Y'  A. yes,
CVT0408  EQU   *         HBB7750 functions are present x'08'
         TM    CVTOSLV5,CVTH7750   Q. z/OS V1R10
         JNO   CVT0410             A. no, bypass
         MVI   CVT_F5HBB7750,C'Y'  A. yes,
CVT0410  EQU   *         HBB7760 functions are present x'04'
         TM    CVTOSLV5,CVTH7760   Q. z/OS V1R11
         JNO   CVT0412             A. no, bypass
         MVI   CVT_F5HBB7760,C'Y'  A. yes,
CVT0412  EQU   *         HBB7770 functions are present x'02'
         TM    CVTOSLV5,CVTH7770   Q. z/OS V1R12
         JNO   CVT0414             A. no, bypass
         MVI   CVT_F5HBB7770,C'Y'  A. yes,
CVT0414  EQU   *         HBB7780 functions are present x'01'
         TM    CVTOSLV5,CVTH7780   Q. z/OS V1R13
         JNO   CVT0420             A. no, bypass
         MVI   CVT_F5HBB7780,C'Y'  A. yes,
         SPACE 1
CVT0420  EQU   *         CVTOSLV6 x'E0'
         MVC   CVT_OSLVLB6,CVTOSLV6
*                        HBB7790 functions are present x'80'
         TM    CVTOSLV6,CVTH7790   Q. z/OS V2R1
         JNO   CVT0422             A. no, bypass
         MVI   CVT_F6HBB7790,C'Y'  A. yes,
CVT0422  EQU   *         HBB77A0 functions are present x'40'
         TM    CVTOSLV6,CVTH77A0   Q. z/OS V2R2
         JNO   CVT0424             A. no, bypass
         MVI   CVT_F6HBB77A0,C'Y'  A. yes,
CVT0424  EQU   *         JBB778H functions are present x'20'
         TM    CVTOSLV6,CVTJ778H   Q. z/OS V1R13
         JNO   CVT0426             A. no, bypass
         MVI   CVT_F6JBB778H,C'Y'  A. yes,
CVT0426  EQU   *         x'10'
CVT0428  EQU   *         x'08'
CVT0430  EQU   *         x'04'
CVT0432  EQU   *         x'02'
CVT0434  EQU   *         x'01'
         SPACE 1
CVT0440  EQU   *         CVTOSLV7 x'00'
         MVC   CVT_OSLVLB7,CVTOSLV7
*                        x'80'
CVT0442  EQU   *         x'40'
CVT0444  EQU   *         x'20'
CVT0446  EQU   *         x'10'
CVT0448  EQU   *         x'08'
CVT0450  EQU   *         x'04'
CVT0452  EQU   *         x'02'
CVT0454  EQU   *         x'01'
CVT0460  EQU   *         CVTOSLV8 x'D0'
         MVC   CVT_OSLVLB8,CVTOSLV8
*                        IEA4xxxx x'80'
         TM    CVTOSLV8,CVTPAUS3   Q. IEA4xxxx
         JNO   CVT0462             A. no, bypass
         MVI   CVT_F8PAUSE3,C'Y'   A. yes,
CVT0462  EQU   *         Pause with checkpoint-OK x'40'
         TM    CVTOSLV8,CVTPAUS4   Q. Pause with checkpoint-OK
         JNO   CVT0464             A. no, bypass
         MVI   CVT_F8PAUSE4,C'Y'   A. yes,
CVT0464  EQU   *         TIMEUSED ECT=YES x'20'
         TM    CVTOSLV8,CVTECT1    Q. TIMEUSED ECT=YES
         JNO   CVT0466             A. no, bpass
         MVI   CVT_F8ECT,C'Y'      A. yes,
CVT0466  EQU   *         TIMEUSED with TIME_ON_CP x'10'
         TM    CVTOSLV8,CVTOOCP    Q. TIMEUSED with TIME_ON_CP
         JNO   CVT0468             A. no, bypass
         MVI   CVT_F8TOCP,C'Y'     A. yes,
CVT0468  EQU   *         IEFOPZ x'08'
         TM    CVTOSLV8,CVTIEFOPZ  Q. IEFOPZ
         JNO   CVT0440             A. no, bypass
         MVI   CVT_F8OPZ,C'Y'      A. yes,
CVT0470  EQU   *         x'04'
CVT0472  EQU   *         x'02'
CVT0474  EQU   *         x'01'
CVT0480  EQU   *         CVTOSLV9 x'00'
         MVC   CVT_OSLVLB9,CVTOSLV9
*                        x'80'
CVT0482  EQU   *         x'40'
CVT0484  EQU   *         x'20'
CVT0486  EQU   *         x'10'
CVT0488  EQU   *         x'08'
CVT0490  EQU   *         x'04'
CVT0492  EQU   *         x'02'
CVT0494  EQU   *         x'01'
CVT0500  EQU   *         CVTOSLVA x'00'
         MVC   CVT_OSLVLBA,CVTOSLVA
*                        x'80'
CVT0502  EQU   *         x'40'
CVT0504  EQU   *         x'20'
CVT0506  EQU   *         x'10'
CVT0508  EQU   *         x'08'
CVT0510  EQU   *         x'04'
CVT0512  EQU   *         x'02'
CVT0514  EQU   *         x'01'
CVT0520  EQU   *         CVTOSLVB x'00'
         MVC   CVT_OSLVLBB,CVTOSLVB
*                        x'80'
CVT0522  EQU   *         x'40'
CVT0524  EQU   *         x'20'
CVT0526  EQU   *         x'10'
CVT0528  EQU   *         x'08'
CVT0530  EQU   *         x'04'
CVT0532  EQU   *         x'02'
CVT0534  EQU   *         x'01'
CVT0540  EQU   *         CVTOSLVC x'00'
         MVC   CVT_OSLVLBC,CVTOSLVC
*                        x'80'
CVT0542  EQU   *         x'40'
CVT0544  EQU   *         x'20'
CVT0546  EQU   *         x'10'
CVT0548  EQU   *         x'08'
CVT0550  EQU   *         x'04'
CVT0552  EQU   *         x'02'
CVT0554  EQU   *         x'01'
CVT0560  EQU   *         CVTOSLVD x'00'
         MVC   CVT_OSLVLBD,CVTOSLVD
*                        x'80'
CVT0562  EQU   *         x'40'
CVT0564  EQU   *         x'20'
CVT0566  EQU   *         x'10'
CVT0568  EQU   *         x'08'
CVT0570  EQU   *         x'04'
CVT0572  EQU   *         x'02'
CVT0574  EQU   *         x'01'
CVT0580  EQU   *         CVTOSLVE x'00'
         MVC   CVT_OSLVLBE,CVTOSLVE
*                        x'80'
CVT0582  EQU   *         x'40'
CVT0584  EQU   *         x'20'
CVT0586  EQU   *         x'10'
CVT0588  EQU   *         x'08'
CVT0590  EQU   *         x'04'
CVT0592  EQU   *         x'02'
CVT0594  EQU   *         x'01'
CVT0600  EQU   *         CVTOSLVF x'00'
         MVC   CVT_OSLVLBF,CVTOSLVF
*                        x'80'
CVT0602  EQU   *         x'40'
CVT0604  EQU   *         x'20'
CVT0606  EQU   *         x'10'
CVT0608  EQU   *         x'08'
CVT0610  EQU   *         x'04'
CVT0612  EQU   *         x'02'
CVT0614  EQU   *         x'01'
CVT0616  EQU   *
         L     R6,CVTEXT2     get addr of OS/VS2 COMMON EXTENSION
         DROP  R6
         USING CVTXTNT2,R6    est addr to OS/VS2 COMMON EXTENSION
         MVC   WS_CVTLDTO,CVTLDTO  copy local Time/Date offset
         MVC   WS_CVTLSO,CVTLSO    copy leap second offset in TOD
         DROP  R6
         SPACE 1
CVT0900  EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE ECVT INFORMATION
* --------------------------------------------------------- *
         SPACE 1
ECVTRTN  AS2LTRCE ,
         AS2RESTK PUSH
         LARL  RE,ECVT0900    set default return
         L     R6,WS_@CVT     get addr of CVTMAP
         USING CVTMAP,R6      est addr to CVTMAP
         CLC   CVTCVT,=CL4' CVT'   Q. really CVT
         JNE   TXT0108A            A. no,
         L     R6,CVTECVT     get addr of ECVT
         DROP  R6
         USING ECVT,R6        est addr to ECVT
         MVC   ECVT_SYSPLEX,ECVTSPLX    copy SYSPLEX name
         MVC   ECVT_HWNAME,ECVTHDNM     copy hardware name
         MVC   ECVT_LPAR,ECVTLPNM       copy LPAR name
         MVC   ECVT_VMID,ECVTVMNM       copy VM userid
         MVC   ECVT_PID,ECVTPIDN        copy PID
         L     R0,ECVTPSEQ
         CVD   R0,DW01
         UNPK  ECVT_PRODNBR,DW01
         OI    ECVT_PRODNBR+L'ECVT_PRODNBR-1,X'F0'
         MVC   ECVT_PRODOWN,ECVTPOWN    copy product owner
         MVC   ECVT_PRODNME,ECVTPNAM    copy product name
         MVC   ECVT_PRODVER,ECVTPVER    copy product version
         MVC   ECVT_PRODREL,ECVTPREL    copy product release
         MVC   ECVT_PRODMOD,ECVTPMOD    copy product modification
         MVC   ECVT_CLONE,ECVTCLON      copy system within SYSPLEX
         MVC   ECVT_LOADPRM,ECVTMLPR    LOAD parameter for this IPL
         ICM   R0,12,ECVTCACHELINESIZE  copy cache size
         SRL   R0,16
         STH   R0,ECVT_CACHESZ
         ICM   R0,8,ECVTGMOD            copy GRS mode
         SRL   R0,24
         STH   R0,ECVT_GRSMODE
         MVI   ECVT_OMVS,C'N'
         TM    ECVTOCVT,ECVTOMVS   Q. OMVS up & available
         JNO   ECVT0020            A. no, bypass
         MVI   ECVT_OMVS,C'Y'      A. yes,
ECVT0020 EQU   *
         DROP  R6
         SPACE 1
ECVT0900 EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE ASCB & ASXB & ACEE INFORMATION
* --------------------------------------------------------- *
         SPACE 1
ASCBRTN  AS2LTRCE ,
         AS2RESTK PUSH
         USING PSA,R0         est addr to PSA
         L     R6,PSAAOLD     get addr of ASCB
         DROP  R0
         LARL  RE,ASCB0900    set default return
         USING ASCB,R6        est addr to ASCB
         CLC   ASCBASCB,=CL4'ASCB' Q. ASCB
         JNE   TXT0108B            A. no,
         ST    R6,WS_@ASCB
         MVC   ASCB_LCPUID,ASCBWQID     copy logical CPU ID
         MVC   ASCB_ASID,ASCBASID       copy AS ID
         MVC   ASCB_DPRI,ASCBDPH        copy dispatch priority
         ICM   R0,8,ASCBLEVL
         SRL   R0,24
         STH   R0,ASCB_LEVEL            copy level nbr of ASCB
         SPACE 1
         L     R6,ASCBASXB    get addr of ASXB
         DROP  R6
         USING ASXB,R6        est addr to ASXB
         CLC   ASXBASXB,=CL4'ASXB' Q. ASXB
         JNE   TXT0108C            A. no,
         MVC   ASXB_USERID(L'ASXBUSER),ASXBUSER
         L     R6,ASXBSENV    get addr of ACEE
         DROP  R6
         USING ACEE,R6        est addr to ACEE
         CLC   ACEEACEE,=CL4'ACEE' Q. ACEE
         JNE   TXT0108D            A. no,
         SPACE 1
         MVI   ACEE_USERID,C' '
         MVC   ACEE_USERID+1(L'ACEE_USERID-1),ACEE_USERID
         ICM   R1,8,ACEEUSRL
         SRL   R1,24
         AHI   R1,-1
         J     ACEE0010
         MVC   ACEE_USERID(0),ACEEUSRI  copy USERID
ACEE0010 EXRL  R1,*-6
         SPACE 1
         MVI   ACEE_GROUP,C' '
         MVC   ACEE_GROUP+1(L'ACEE_GROUP-1),ACEE_GROUP
         ICM   R1,8,ACEEGRPL
         SRL   R1,24
         AHI   R1,-1
         J     ACEE0020
         MVC   ACEE_GROUP(0),ACEEGRPN   copy GROUP
ACEE0020 EXRL  R1,*-6
         SPACE 1
         MVC   ACEE_APPLNM,ACEEAPLN     copy appl name
         SPACE 1
         MVI   ACEE_USERNAME,C' '
         MVC   ACEE_USERNAME+1(L'ACEE_USERNAME-1),ACEE_USERNAME
         L     R2,ACEEUNAM         get addr of user name
         ICM   R1,8,0(R2)
         SRL   R1,24
         AHI   R1,-2
         LA    R0,L'ACEE_USERNAME-1
         CR    R1,R0          Q. name longer than tgt area
         JNH   ACEE0030       A. no, use length
         LR    R1,R0          A. yes, use max length
         J     ACEE0030
         MVC   ACEE_USERNAME(0),1(R2)   copy user name
ACEE0030 EXRL  R1,*-6
         SPACE 1
**       ICM   R2,15,ACEETRMP      Q. get addr of terminal
**       JZ    ACEE0040            A. no, bypass
         MVC   ACEE_TERMID,ACEETRID
ACEE0040 EQU   *
         SPACE 1
ASCB0900 EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE JES INFORMATION
* REGISTERS 0,1,14,15 USED BY IAZXJSAB
* RETURN CODE R15:
*    0 - SUCCESSFUL
*    4 - UNSUCCESSFUL STORAGE NOT OBTAINED/RELEASED
*    8 - UNSUCCESSFUL NOT FOUND
* --------------------------------------------------------- *
         SPACE 1
JESRTN   AS2LTRCE ,
         AS2RESTK PUSH
         XC    RTNCD,RTNCD
         XC    RSNCD,RSNCD
         IAZXJSAB READ,                                                +
               ASCB=WS_@ASCB,                                          +
               CODELEV=WS_JSABCLEV,                                    +
               COMPID=JSAB_JSABSCID,                                   +
               ENTRYST=JSAB_JSABESTK,                                  +
               EXECST=JSAB_JSABXSTK,                                   +
               JOBID=JSAB_JSABJBID,                                    +
               JOBNAME=JSAB_JSABJBNM,                                  +
               JSABLVL=WS_JSABLVL,                                     +
               SSNAME=JSAB_JSABSSNM,                                   +
               USERID=JSAB_JSABUSID,                                   +
               XCFGPNM=JSAB_JSABGPNM
         SPACE 1
         LARL  RE,JES0900     set default return
         ST    RF,RTNCD
         CLC   RTNCD,F0       Q. any errors
         JH    TXT0118A       A. no, bypass
         SPACE 1
         ICM   R0,8,WS_JSABCLEV
         SRL   R0,24
         STH   R0,JSAB_CODELVL     save code level
         ICM   R0,8,WS_JSABLVL
         SRL   R0,24
         STH   R0,JSAB_EXECLVL     save exec level
         SPACE 1
*        convert entry STCK to printable time stamp
         MVC   WS_ITOD,JSAB_JSABESTK
         BRAS  RE,TODRTN
         CLC   RTNCD,F0       Q. any errors
         JH    JES0900        A. yes,
         MVC   JSAB_NTRYTIMESTAMP,WDATETIME
         SPACE 1
*        convert execution STCK to printable time stamp
         MVC   WS_ITOD,JSAB_JSABXSTK
         BRAS  RE,TODRTN
         CLC   RTNCD,F0       Q. any errors
         JH    JES0900        A. yes,
         MVC   JSAB_EXECTIMESTAMP,WDATETIME
         SPACE 1
JES0900  EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* CONVERT TOD TO A HUMAN USABLE DATE/TIME
* REGISTERS 0,1,14,15 USED BY STCKCONV
* RETURN CODE R15:
*    0 - SUCCESSFUL
*   12 - UNSUCCESSFUL UNEXPECTED ERROR
*   16 - UNSUCCESSFUL PARMLIST NOT ADDRESSABLE
*   20 - UNSUCCESSFUL ETOD INVALID
*
* apparently subroutine BLSUXTOD will convert an 8-byte
* STCK TOD value to a 26-byte char string
*   mm/dd/yyyy hh:mm:ss.ffffff
*
* --------------------------------------------------------- *
         SPACE 1
TODRTN   AS2LTRCE ,
         AS2RESTK PUSH
*        process time zone and leap seconds
         LM    R0,R1,WS_ITOD  get the input TOD
         AL    R1,WS_CVTLDTOR Q. add CVTLDTOR timezone right word
         JM    TOD0100        A. yes, bypass
         JZ    TOD0100        A. yes, bypass
         AL    R0,=F'1'       A. no, overflow propagate carry bit
TOD0100  EQU   *
         AL    R0,WS_CVTLDTOL ADD CVTLDTOL timezone left word
         SL    R1,WS_CVTLSOL  Q. sub CVTLSOL leap sec low word
         JO    TOD0102        A. yes, bypass
         JP    TOD0102        A. yes, bypass
         SL    R0,=F'1'       A. borrow 1 from overflow
TOD0102  EQU   *
         SL    R0,WS_CVTLSOH  sub CVTLSOH leap sec high word
         STM   R0,R1,WS_ITOD
         SPACE 1
         XR    R1,R1          clear R1
         XC    RTNCD,RTNCD
         XC    RSNCD,RSNCD
         STCKCONV STCKVAL=WS_ITOD, input STCK TOD                      +
               CONVVAL=WS_OTOD,    output                              +
               TIMETYPE=DEC,       output format  HHMMSSthmiju0000     +
               DATETYPE=YYYYMMDD,  output format                       +
               MF=(E,TODPLIST)
         SPACE 1
         LARL  RE,TOD0900     set default return
         ST    RF,RTNCD
         C     RF,F0          Q. any errors
         JH    TXT0107A       A. yes,
         SPACE 1
         MVO   WTIMEDATE,WS_OTOD(12)    make room for the sign
         OI    WTIMEDATE+L'WTIMEDATE-1,X'0F' init sign
         MVI   WTIMEMASK,X'20'
         MVC   WTIMEMASK+1(L'WTIMEMASK-1),WTIMEMASK
         MVI   WTIMEMASK,C'0'
         ED    WTIMEMASK,WTIMEDATE
         MVC   WDATETIME(8),WTIMEMASK+18     date/time stamp
         MVC   WDATETIME+8(16),WTIMEMASK+2
         SPACE 1
TOD0900  EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE DATA FACILITIES AREA
* --------------------------------------------------------- *
         SPACE 1
DFARTN   AS2LTRCE
         AS2RESTK PUSH
         LARL  RE,DFA0900     set default return
         L     R6,WS_@CVT     get addr of CVTMAP
         USING CVTMAP,R6      est addr to CVTMAP
         CLC   CVTCVT,=CL4' CVT'   Q. CVT
         JNE   TXT0108A            A. no,
         L     R6,CVTDFA      get addr of DFA
         DROP  R6
         USING DFA,R6         est addr to DFA
         CLC   DFAACRON,=CL4'DFA'  Q. DFA
         JNE   TXT0108E            A. no,
         SPACE 1
         ICM   R0,12,DFALEN
         SRA   R0,16
         ST    R0,WS_DFALEN
         SPACE 1
         MVC   DFA_REL,DFAREL
         UNPK  ZD02(9),DFAREL(L'DFAREL+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   DFA_P0REL,ZD02+8-L'DFA_P0REL
         SPACE 1
         MVC   DFA_RELS,DFARELS
         UNPK  ZD02(9),DFARELS(L'DFARELS+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   DFA_PRELS,ZD02+8-L'DFA_PRELS
         SPACE 1
         ICM   R1,8,DFARELS
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   DFA_PPROD,ZD01+L'ZD01-L'DFA_PPROD
         SPACE 1
         ICM   R1,8,DFARELS+1
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   DFA_PVER,ZD01+L'ZD01-L'DFA_PVER
         SPACE 1
         ICM   R1,8,DFARELS+2
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   DFA_PREL,ZD01+L'ZD01-L'DFA_PREL
         SPACE 1
         ICM   R1,8,DFARELS+3
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   DFA_PMOD,ZD01+L'ZD01-L'DFA_PMOD
         SPACE 1
         MVI   DFA_FEAT,C'N'
         MVC   DFA_FEAT+1(L'DFA_FEAT-1),DFA_FEAT
         SPACE 1
DFA0030  EQU   *         DFAFEAT1
         MVC   DFA_FB0,DFAFEAT1
*                        MVS/XA x'80'
         TM    DFAFEAT1,DFAXA      Q. XA
         JNO   DFA0032             A. no, bypass
         MVI   DFA_F0XA,C'Y'       A. yes,
DFA0032  EQU   *         multiple VSAM LSR pools x'40'
         TM    DFAFEAT1,DFALSR     Q. multiple LSR pools
         JNO   DFA0034             A. no, bypass
         MVI   DFA_F0LSR,C'Y'      A. yes,
DFA0034  EQU   *         DASDM erase on scratch x'20'
         TM    DFAFEAT1,DFAEOS     Q. DASDM erase on scratch
         JNO   DFA0036             A. no, bypass
         MVI   DFA_F0EOS,C'Y'      A. yes,
DFA0036  EQU   *         extended recovery facility x'10'
         TM    DFAFEAT1,DFAXRF     Q. eXtended Recovery Facility
         JNO   DFA0038             A. no, bypass
         MVI   DFA_F0XRF,C'Y'      A. yes,
DFA0038  EQU   *         EXPORT by CONTROL INTERVAL x'08'
         TM    DFAFEAT1,DFAEXPCI   Q. EXPORT by CI
         JNO   DFA0040             A. no, bypass
         MVI   DFA_F0EXP,C'Y'      A. yes,
DFA0040  EQU   *         erase on scratch for ICF x'04'
         TM    DFAFEAT1,DFAEOSIC   Q. erase on scratch for ICF
         JNO   DFA0042             A. no, bypass
         MVI   DFA_F0EOS1,C'Y'     A. yes,
DFA0042  EQU   *         SYSTEM MANAGED STORAGE x'02'
         TM    DFAFEAT1,DFASMS     Q. System Managed Storage
         JNO   DFA0044             A. no, bypass
         MVI   DFA_F0SMS,C'Y'      A. yes,
DFA0044  EQU   *         PDSE x'01
         TM    DFAFEAT1,DFAPDSE    Q. PDS/E support
         JNO   DFA0050             A. no, bypass
         MVI   DFA_F0PDSE,C'Y'     A. yes,
         SPACE 1
DFA0050  EQU   *         DFAFEAT2
         MVC   DFA_FB1,DFAFEAT2
*                        x'80'
DFA0052  EQU   *         x'40'
DFA0054  EQU   *         file management services x'20'
         TM    DFAFEAT2,DFAFMS     Q. File Management Services
         JNO   DFA0056             A. no, bypass
         MVI   DFA_F1FMS,C'Y'      A. yes,
DFA0056  EQU   *         installation default for compaction x'10'
         TM    DFAFEAT2,DFACMPAC   Q. installment dflt for compaction
         JNO   DFA0058             A. no, bypass
         MVI   DFA_F1CMPAC,C'Y'    A. yes,
DFA0058  EQU   *         bypass channel program prefix build x'80'
         TM    DFAFEAT2,DFABPBLD   Q. bypass channel pgm prefix bld
         JNO   DFA0060             A. no, bypass
         MVI   DFA_F1BCPPB,C'Y'    A. yes,
DFA0060  EQU   *         SSF services x'04'
         TM    DFAFEAT2,DFASSF     Q. SSF services
         JNO   DFA0062             A. no, bypass
         MVI   DFA_F1SSF,C'Y'      A. yes,
DFA0062  EQU   *         MMS supports XTIOT x'02'
         TM    DFAFEAT2,DFAMMEXT   Q. MMS supports XTIOT
         JNO   DFA0064             A. no, bypass
         MVI   DFA_F1MMS,C'Y'      A. yes,
DFA0064  EQU   *         compaction default x'01'
         TM    DFAFEAT2,DFAINDEF   Q. compaction dflt set by install
         JNO   DFA0090             A. no, bypass
         MVI   DFA_F1INDEF,C'Y'    A. yes,
         SPACE 1
DFA0070  EQU   *         DFAFEAT3
         MVC   DFA_FB2,DFAFEAT3
*                        VOLSER extracted from SENSE info x'80'
         TM    DFAFEAT3,DFAVOLSN   Q. VOLSER extracted from sense info
         JNO   DFA0072             A. no, bypass
         MVI   DFA_F2VSEX,C'Y'     A. yes,
DFA0072  EQU   *         Extended Format SEQ data set x'40'
         TM    DFAFEAT3,DFASAMEX   Q. EF SEQ data set
         JNO   DFA0074             A. no, bypass
         MVI   DFA_F2SAMEF,C'Y'    A. yes,
DFA0074  EQU   *         Extended Format VSAM KSDS x'20'
         TM    DFAFEAT3,DFAKSDEX   Q. EF VSAM KSDS
         JNO   DFA0076             A. no, bypass
         MVI   DFA_F2KSDSEF,C'Y'   A. yes,
DFA0076  EQU   *         Access Method compression x'10'
         TM    DFAFEAT3,DFACMPCT   Q. DFSMS/MVS AM compaction
         JNO   DFA0078             A. no, bypass
         MVI   DFA_F2CMPCT,C'Y'    A. yes,
DFA0078  EQU   *         SMSVSAM server x'08'
         TM    DFAFEAT3,DFARLSJ3   Q. SMSVSAM SERVER installed
         JNO   DFA0080             A. no, bypass
         MVI   DFA_F2RLSI,C'Y'
DFA0080  EQU   *         data set RECALL capability x'04'
         TM    DFAFEAT3,DFARECAL   Q. data set RECALL capability via
*                                     ARCHRCAL macro
         JNO   DFA0082             A. no, bypass
         MVI   DFA_F2RECALL,C'Y'
DFA0082  EQU   *         DESERV exit function x'02'
         TM    DFAFEAT3,DFADEEXT   Q. DESERV exit function
         JNO   DFA0084             A. no, bypass
         MVI   DFA_F2DSERV,C'Y'    A. yes,
DFA0084  EQU   *         DFSMS support for DLL x'01'
         TM    DFAFEAT3,DFADLL     Q. DFSMS support for DLL
         JNO   DFA0090             A. no, bypass
         MVI   DFA_F2DLL,C'Y'      A. yes,
         SPACE 1
DFA0090  EQU   *         DFAFEAT4 x'80'
         MVC   DFA_FB3,DFAFEAT4
*                        x'80'
DFA0092  EQU   *         DFP NIP services x'40'
         TM    DFAFEAT4,DFANSRV    Q. DFP NIP svcs via IGGSSRV macro
*                                     dynamic link list
         JNO   DFA0094             A. no, bypass
         MVI   DFA_F3NIPSVC,C'Y'   A. yes,
DFA0094  EQU   *         Catalog information routine x'20'
         TM    DFAFEAT4,DFACIR2    Q. catalog info routine
*                                     IKJEHCIR supports format-2
*                                     work area
         JNO   DFA0096             A. no, bypass
         MVI   DFA_F3CIR2,C'Y'     A. yes,
DFA0096  EQU   *         DFSMS support for RTLS x'10'
         TM    DFAFEAT4,DFARTLS    Q. RunTime Library Support
         JNO   DFA0098             A. no, bypass
         MVI   DFA_F3RTLS,C'Y'     A. yes,
DFA0098  EQU   *         DFSMS support for dynamic LPA x'08'
         TM    DFAFEAT4,DFADYLPA   Q. dynamic LPA
         JNO   DFA0100             A. no, bypass
         MVI   DFA_F3DYLPA,C'Y'    A. yes,
DFA0100  EQU   *         DFSMS loader FORK exit x'04'
         TM    DFAFEAT4,DFAFORK    Q. DFSMS loader fork exit
         JNO   DFA0102             A. no, bypass
         MVI   DFA_F3FORK,C'Y'     A. yes,
DFA0102  EQU   *         software support for RVA x'02'
         TM    DFAFEAT4,DFASNBK    Q. software support for
*                                     RVA SNAPSHOT
         JNO   DFA0104             A. no, bypass
         MVI   DFA_F3SSSW,C'Y'     A. yes,
DFA0104  EQU   *         API support for RVA x'01'
         TM    DFAFEAT4,DFASNAP    Q. API support for RVA
*                                     SNAPSHOT
         JNO   DFA0110             A. no, bypass
         MVI   DFA_F3SSAPI,C'Y'    A. yes,
         SPACE 1
DFA0110  EQU   *         DFAFEAT5
         MVC   DFA_FB4,DFAFEAT5
*                        Support for unmanaged PDSEs x'80'
         TM    DFAFEAT5,DFAUPDSE   Q. unmanaged PDS/E
         JNO   DFA0112             A. no, bypass
         MVI   DFA_F4UMPDSE,C'Y'   A. yes,
DFA0112  EQU   *         BLOCKTOKENSIZE=REQUIRE x'40'
         TM    DFAFEAT5,DFABTSREQ  Q. on BLOCKTOKENSIZE=REQUIRE
*                                     off BLOCKTOKENSIZE=NOREQUIRE
         JNO   DFA0114             A. no, bypass
         MVI   DFA_F4BTOKSZ,C'Y'   A. yes,
DFA0114  EQU   *         BLDL START=, STOP= PARMS x'20'
         TM    DFAFEAT5,DFABLDLS   Q. BLDL PARMS START=, STOP=
         JNO   DFA0116             A. no, bypass
         MVI   DFA_F4BLDL,C'Y'     A. yes,
DFA0116  EQU   *         System default for USEEAV=YES x'10'
         TM    DFAFEAT5,DFAUSEAV   Q. USEEAV=YES
         JNO   DFA0118             A. no, bypass
         MVI   DFA_F4EAV,C'Y'      A. yes,
DFA0118  EQU   *         SAM_USE_HPF x'08'
         TM    DFAFEAT5,DFASAMHPF  Q. SAM_USE_HPF
         JNO   DFA0120             A. no, bypass
         MVI   DFA_F4SAMHPF,C'Y'   A. yes,
DFA0120  EQU   *         BSAM Pipes performance SPE(LBI support) x'04'
         TM    DFAFEAT5,DFAPIPES   Q. BSAM Pipes performance SPE
         JNO   DFA0122             A. no, bypass
         MVI   DFA_F4PIPES,C'Y'    A. yes,
DFA0122  EQU   *         ANSI Version level x'02'
         TM    DFAFEAT5,DFAALVER   Q. on ANSI-4 tape labels
*                                     off ANSI-3 tape labels
         JNO   DFA0124             A. no, bypass
         MVI   DFA_F4ANSI4,C'Y'    A. yes,
DFA0124  EQU   *         force parameter for ANSI label x'01'
         TM    DFAFEAT5,DFAALFOR   Q. on force ALL ANSI tape
*                                     labels to be written at
*                                     DFAALVER level
*                                     off force NEW ANSI tape
*                                     labels to be written at
*                                     DFAALVER level
         JNO   DFA0130             A. no, bypass
         MVI   DFA_F4ANSIF,C'Y'    A. yes,
         SPACE 1
DFA0130  EQU   *         DFAFEAT6 x'80'
         MVC   DFA_FB5,DFAFEAT6
*                        x'80'
DFA0132  EQU   *         x'40'
         TM    DFAFEAT6,DFACPSLA   Q. COPYSDB=LARGE
         JNO   DFA0134             A. no, bypass
         MVI   DFA_F5SDBL,C'Y'     A. yes,
DFA0134  EQU   *         x'20'
         TM    DFAFEAT6,DFACPSYE   Q. COPYSDB=SMALL|YES
         JNO   DFA0136             A. no, bypass
         MVI   DFA_F5SDBY,C'Y'     A. yes,
DFA0136  EQU   *         x'10'
         TM    DFAFEAT6,DFACPSNO   Q. COPYSDB=NO
         JNO   DFA0138             A. no, bypass
         MVI   DFA_F5SDBN,C'Y'     A. yes,
DFA0138  EQU   *         x'08'
         TM    DFAFEAT6,DFADCMET   Q. DATACLAS media enforced TAPE
         JNO   DFA0140             A. no, bypass
         MVI   DFA_F5DSMT,C'Y'     A. yes,
DFA0140  EQU   *         x'04'
         TM    DFAFEAT6,DFADCMEJ   Q. DATACLAS media enforced JAG
         JNO   DFA0142             A. no, bypass
         MVI   DFA_F5DSMJ,C'Y'     A. yes,
DFA0142  EQU   *         x'02'
         TM    DFAFEAT6,DFAMTLAM   Q. when no preference accept
*                                     all media types for MTL
         JNO   DFA0144             A. no, bypass
         MVI   DFA_F5AMMTL,C'Y'    A. yes,
DFA0144  EQU   *         x'01'
         TM    DFAFEAT6,DFASTIFF   Q. STIFF SUPPORT
         JNO   DFA0150             A. no, bypass
         MVI   DFA_F5STIFF,C'Y'    A. yes,
         SPACE 1
DFA0150  EQU   *         DFAFEAT7
         CLC   WS_DFALEN,=A(DFALEN48)   Q. <=DFP 2.2.10.0
         JNH   DFA0900                  A. yes, bypass
*                        TAPEAUTHDSN=YES x'80'
         MVC   DFA_FB6,DFAFEAT7
         TM    DFAFEAT7,DFATADSN   Q. TAPEAUTHDSN=YES
         JNO   DFA0152             A. no, bypass
         MVI   DFA_F6TADSN,C'Y'    A. yes,
DFA0152  EQU   *         TAPEAUTHF1=YES x'40'
         TM    DFAFEAT7,DFATADS1   Q. TAPEAUTHF1=YES
         JNO   DFA0154             A. no, bypass
         MVI   DFA_F6TAF1,C'Y'     A. yes,
DFA0154  EQU   *         TAPEAUTHRC8=WARN x'20'
         TM    DFAFEAT7,DFATARC8   Q. TAPEAUTHRC8=WARN
         JNO   DFA0156             A. no, bypass
         MVI   DFA_F6TARC8,C'Y'    A. yes,
DFA0156  EQU   *         TAPEAUTHRC4=FAIL x'10'
         TM    DFAFEAT7,DFATARC4   Q. TAPEAUTHRC4=FAIL
         JNO   DFA0158             A. no, bypass
         MVI   DFA_F6TARC4,C'Y'    A. yes,
DFA0158  EQU   *         XIOT/UNCAPT UCBS for BAM x'08'
         TM    DFAFEAT7,DFAXTBAM   Q. XIOT/UNCAPT UCBS FOR BAM
         JNO   DFA0160             A. no, bypass
         MVI   DFA_F6XIOT,C'Y'     A. yes,
DFA0160  EQU   *         TAPEMULTIVOLUMEERROR=ALLOW x'04'
         TM    DFAFEAT7,DFATPMVA   Q. TAPEMULTIVOLUMEERROR=ALLOW
         JNO   DFA0162             A. no, bypass
         MVI   DFA_F6TMVE1,C'Y'    A. yes,
DFA0162  EQU   *         TAPEMULTIVOLUMEERROR=FAIL x'02'
         TM    DFAFEAT7,DFATPMVF   Q. TAPEMULTIVOLUMEERROR=FAIL
         JNO   DFA0164             A. no, bypass
         MVI   DFA_F6TMVE2,C'Y'    A. yes,
DFA0164  EQU   *         GT 253 SUBSYSTEMS allowed x'01'
         TM    DFAFEAT7,DFA253     Q. > 253 SUBSYSTEMS allowed
         JNO   DFA0170             A. no, bypass
         MVI   DFA_F6GT253,C'Y'    A. yes,
         SPACE 1
DFA0170  EQU   *         DFAFEAT8
         MVC   DFA_FB7,DFAFEAT8
*                        VSAM enabled for EAS x'80'
         TM    DFAFEAT8,DFAVSAMFOREAS   Q. VSAM enabled for EAS
         JNO   DFA0172                  A. no, bypass
         MVI   DFA_F7VSAMEAS,C'Y'       A. yes,
DFA0172  EQU   *         Basic, large format seq QSAM BSAM BDAM x'40'
         TM    DFAFEAT8,DFASEQFOREAS    Q. SAM enabled for EAS
         JNO   DFA0174                  A. no, bypass
         MVI   DFA_F7SAMEAS,C'Y'        A. yes,
DFA0174  EQU   *         PDSE enabled for EAS x'20'
         TM    DFAFEAT8,DFAPDSEFOREAS   Q. PDS/E enabled for EAS
         JNO   DFA0176                  A. no, bypass
         MVI   DFA_F7PDSEEAS,C'Y'       A. yes,
DFA0176  EQU   *         PDS enabled for EAS x'10'
         TM    DFAFEAT8,DFAPDSFOREAS    Q. PDS enabled for EAS
         JNO   DFA0178                  A. no, bypass
         MVI   DFA_F7PDSEAS,C'Y'        A. yes,
DFA0178  EQU   *         BDAM enabled for EAS x'08'
         TM    DFAFEAT8,DFADIRFOREAS    Q. BDAM enabled for EAS
         JNO   DFA0180                  A. no, bypass
         MVI   DFA_F7BDAMEAS,C'Y'       A. yes,
DFA0180  EQU   *         EF seq enabled for EAS x'04'
         TM    DFAFEAT8,DFAEFSEQFOREAS  Q. EF seq enabled for EAS
         JNO   DFA0182                  A. no, bypass
         MVI   DFA_F7EFSEQEAS,C'Y'      A. yes,
DFA0182  EQU   *         DSORG=U enabled for EAS x'02'
         TM    DFAFEAT8,DFAUNDEFFOREAS  Q. DSORG=U enabled for EAS
         JNO   DFA0184                  A. no, bypass
         MVI   DFA_F7UNDEAS,C'Y'        A. yes,
DFA0184  EQU   *         EXPIRATION_MESSAGE=NEVER x'01'
         TM    DFAFEAT8,DFAEXPMSG       Q. EXPIRATION_MESSAGE=NEVER
         JNO   DFA0190                  A. no, bypass
         MVI   DFA_F7EXMSG,C'Y'         A. yes,
         SPACE 1
DFA0190  EQU   *         DFAFEAT9
         MVC   DFA_FB8,DFAFEAT9
*                        JES3_ALLOC_ASSIST enabled x'80'
         TM    DFAFEAT9,DFAJ3AA         Q. JES3_ALLOC_ASSIST
         JNO   DFA0192                  A. no, bypass
         MVI   DFA_F8J3AA,C'Y'          A. yes,
DFA0192  EQU   *         member selection user exit support x'40'
         TM    DFAFEAT9,DFAMEMUX   Q.
         JNO   DFA0194             A. no, bypass
         MVI   DFA_F8MBRUX,C'Y'    A. yes,
DFA0194  EQU   *         PDSE generation support x'20'
         TM    DFAFEAT9,DFAPDSEG   Q.
         JNO   DFA0196             A. no, bypass
         MVI   DFA_F8PDSEG,C'Y'    A. yes,
DFA0196  EQU   *         zEDC compression support x'10'
         TM    DFAFEAT9,DFAZEDCCMP Q.
         JNO   DFA0198             A. no, bypass
         MVI   DFA_F8ZEDC,C'Y'     A. yes,
DFA0198  EQU   *         DADSM extend secondary-space reduction x'08'
         TM    DFAFEAT9,DFASSREN   Q.
         JNO   DFA0200             A. no, bypass
         MVI   DFA_F8XSSR,C'Y'     A. yes,
DFA0200  EQU   *         DSS full volume dump/rest no lockout x'04'
         TM    DFAFEAT9,DFASYSZADRV     Q.
         JNO   DFA0202                  A. no, bypass
         MVI   DFA_F8SYSZADRV,C'Y'      A. yes,
DFA0202  EQU   *         DCBE bypass Auth support x'02'
         TM    DFAFEAT9,DFABYPAUTH Q.
         JNO   DFA0204             A. no, bypass
         MVI   DFA_F8BYPAUTH,C'Y'  A. yes,
DFA0204  EQU   *         DFSMS support for encryption x'01'
         TM    DFAFEAT9,DFAENCRYPT Q.
         JNO   DFA0210             A. no, bypass
         MVI   DFA_F8ENCRYPT,C'Y'  A. yes,
         SPACE 1
DFA0210  EQU   *         DFAFEAT10
         MVC   DFA_FB9,DFAFEAT10
*                        READ-ONLY secondary support x'80'
         TM    DFAFEAT10,DFAROSEC  Q.
         JNO   DFA0212             A. no, bypass
         MVI   DFA_F9ROSEC,C'Y'    A. yes,
DFA0212  EQU   *         DSSB A-T-B for VSAM & MMSRV x'40'
         TM    DFAFEAT10,DFADSSBAbove   Q.
         JNO   DFA0214                  A. no, bypass
         MVI   DFA_F9DSSBATB,C'Y'       A. yes,
DFA0214  EQU   *         DEVTYPE XTIOT support x'20'
         TM    DFAFEAT10,DFADEVTYPEXTIOT     Q.
         JNO   DFA0216                       A. no, bypass
         MVI   DFA_F9XTIOT,C'Y'              A. yes,
DFA0216  EQU   *         x'10'
DFA0218  EQU   *         x'08'
DFA0220  EQU   *         x'04'
DFA0222  EQU   *         x'02'
DFA0224  EQU   *         x'01'
         SPACE 1
DFA0230  EQU   *         DFAHPFC1
         MVI   DFA_FCB1,C'N'
         MVC   DFA_FCB1+1(8),DFA_FCB1
         MVC   DFA_FCB1,DFAHPFC1   HPF feature code-1
*                        x'80'
DFA0232  EQU   *         x'40'
DFA0234  EQU   *         x'20'
DFA0236  EQU   *         x'10'
DFA0238  EQU   *         transfer TCA extension x'08'
         TM    DFAHPFC1,DFAFCX_TTEDcw   Q.
         JNO   DFA0240                  A. no, bypass
         MVI   DFA_FC1TTCAE,C'Y'        A. yes,
DFA0240  EQU   *         HPF phase 1 x'04'
         TM    DFAHPFC1,DFAFCX_REL1
         JNO   DFA0242                  A. no, bypass
         MVI   DFA_FC1PH1,C'Y'          A. yes,
DFA0242  EQU   *         imbedded LR list x'02'
         TM    DFAHPFC1,DFAFCX_ImbeddedLR
         JNO   DFA0244                  A. no, bypass
         MVI   DFA_FC1IMBLR,C'Y'        A. yes,
DFA0244  EQU   *         format update Writes x'01'
         TM    DFAHPFC1,DFAFCX_FmtUpdWrt
         JNO   DFA0250                  A. no, bypass
         MVI   DFA_FC1FUPDW,C'Y'        A. yes,
DFA0250  EQU   *         DFAHPFC2
         MVI   DFA_FCB2,C'N'
         MVC   DFA_FCB2+1(8),DFA_FCB2
         MVC   DFA_FCB2,DFAHPFC2   HPF feature code-2
*                        format Write enable x'80'
         TM    DFAHPFC2,DFAFCX_FmtWrite Q.
         JNO   DFA0252                  A. no, bypass
         MVI   DFA_FC2FWRE,C'Y'         A. yes,
DFA0252  EQU   *         x'40'
DFA0254  EQU   *         x'20'
DFA0256  EQU   *         x'10'
DFA0258  EQU   *         x'08'
DFA0260  EQU   *         x'04'
DFA0262  EQU   *         x'02'
DFA0264  EQU   *         x'01'
         SPACE 1
DFA0270  EQU   *         DFAHPFC3
         MVI   DFA_FCB3,C'N'
         MVC   DFA_FCB3+1(8),DFA_FCB3
         MVC   DFA_FCB3,DFARSVRF   HPF feature code-3
*                        x'80'
DFA0272  EQU   *         x'40'
DFA0274  EQU   *         x'20'
DFA0276  EQU   *         x'10'
DFA0278  EQU   *         x'08'
DFA0280  EQU   *         x'04'
DFA0282  EQU   *         x'02'
DFA0284  EQU   *         x'01'
DFA0290  EQU   *         DFAHPFC4
         MVI   DFA_FCB4,C'N'
         MVC   DFA_FCB4+1(8),DFA_FCB4
         MVC   DFA_FCB4,DFARSVRF+1 HPF feature code-4
*                        x'80'
DFA0292  EQU   *         x'40'
DFA0294  EQU   *         x'20'
DFA0296  EQU   *         x'10'
DFA0298  EQU   *         x'08'
DFA0300  EQU   *         x'04'
DFA0302  EQU   *         x'02'
DFA0304  EQU   *         x'01'
         SPACE 1
DFA0310  EQU   *
         ICM   R0,8,DFACMPTYPEDEF  Default Compression Type
         SRL   R0,24
         STH   R0,DFA_CMPTYPE
         L     R0,DFAMAXGN    PDSE Maximum generations allowed
         ST    R0,DFA_PDSEMAXGEN
         DROP  R6
         SPACE 1
DFA0900  EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE TIOT/TIOTE INFORMATION
* TIOT size is defined in PARMLIB member ALLOCxx
* the default is 32K or 1635 data sets on a single volume,
* 129 data sets with the maximum of 59 volumes defined.
* --------------------------------------------------------- *
         SPACE 1
TIOTRTN  AS2LTRCE ,
         AS2RESTK PUSH
         USING PSA,R0         est addr to PSA
         L     R6,PSATOLD     get addr of TCB
         DROP  R0
         USING TCB,R6         est addr to TCB
         L     R6,TCBTIO      get addr of TIOT
         DROP  R6
         USING TIOT,R6
         MVC   TIOT_JOBNAME,TIOCNJOB    copy JOB name
         CLI   TIOCJSTN,C' '  Q. PROC JOB STEP name
         JE    TIOT0010       A. no, bypass
         MVC   TIOT_PROCSTEP,TIOCPSTN   copy PROC STEP name
         MVC   TIOT_JOBSTEP,TIOCJSTN    copy PROC JOB STEP name
         J     TIOT0020
TIOT0010 EQU   *
         MVC   TIOT_JOBSTEP,TIOCSTPN    copy non-PROC STEP name
TIOT0020 EQU   *
         LA    R6,TIOENTRY    get addr of TIOTE
         DROP  R6
         USING TIOENTRY,R6    est addr to TIOTE
         LA    R7,TIOTE_DDNTRY
         AHI   R7,-L'TIOTE_DDNTRY
         USING TIOTE_DDNTRY,R7     est addr to DD entry
         LARL  RE,TIOT0900    set default return
TIOT0060 EQU   *
         ICM   R0,8,TIOELNGH  Q. length of TIOTE > 0
         JZ    TIOT0900       A. no, bypass
         CLI   TIOEDDNM,C' '  Q. concatenation
         JE    TIOT0064       A. yes, incr & loop
         AHI   R7,L'TIOTE_DDNTRY   point to next DD entry
         LH    R1,TIOT_DDNCNT
         CHI   R1,DD#         Q. DD name count <= DD#
         JNL   TXT0115A       A. no,
         MVC   TIOTE_DDNAME,TIOEDDNM    copy DD name
         AHI   R1,1
         STH   R1,TIOT_DDNCNT      incr DD name count
TIOT0064 EQU   *
         LH    R1,TIOTE_DSNCNT
         AHI   R1,1
         STH   R1,TIOTE_DSNCNT     incr DSN name count
         SPACE 1
         SRL   R0,24
         AR    R6,R0          point to next TIOTE
         J     TIOT0060       loop back
         DROP  R6,R7
         SPACE 1
TIOT0900 EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE LE ENVIRONMENT INFORMATION
* --------------------------------------------------------- *
         SPACE 1
LERTN    AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         ICM   R0,8,CEECAASYSTM
         SRL   R0,24
         STH   R0,LE_OPSYS
         SPACE 1
         ICM   R0,8,CEECAAHRDWR
         SRL   R0,24
         STH   R0,LE_HW
         SPACE 1
         ICM   R0,8,CEECAASBSYS
         SRL   R0,24
         STH   R0,LE_SSYS
         SPACE 1
         ICM   R0,8,CEECAALEVEL
         SRL   R0,24
         STH   R0,LE_LEVEL
         SPACE 1
         AS2PLIST (LESYSSUB,LEENVINF,LEMBRID,LEGPID),                  +
               VL,MF=(E,PLIST)
*        CALL  CEEINF
         L     RF,@CEEINF
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LE_SYS,C'N'
         MVC   LE_SYS+1(L'LE_SYS-1),LE_SYS
LE0030   EQU   *         LESYSSUB
         MVC   LE_SYSB0,LESYSSUB
         TM    LESYSSUB,X'80'      Q. CICS
         JNO   LE0032              A. no, bypass
         MVI   LE_S0CICS,C'Y'      A. yes,
LE0032   EQU   *
         TM    LESYSSUB,X'40'      Q. CICS_PIPI
         JNO   LE0034              A. no, bypass
         MVI   LE_S0PIPI,C'Y'      A. yes,
LE0034   EQU   *
LE0036   EQU   *
LE0038   EQU   *
         TM    LESYSSUB,X'08'      Q. TSO
         JNO   LE0040              A. no, bypass
         MVI   LE_S0TSO,C'Y'       A. yes,
LE0040   EQU   *
         TM    LESYSSUB,X'04'      Q. batch
         JNO   LE0042              A. no, bypass
         MVI   LE_S0BTH,C'Y'       A. yes,
LE0042   EQU   *
         TM    LESYSSUB,X'02'      Q. UNIX
         JNO   LE0044              A. no, bypass
         MVI   LE_S0UNIX,C'Y'      A. yes,
LE0044   EQU   *
         SPACE 1
LE0060   EQU   *         LESYSSUB+1
         MVC   LE_SYSB1,LESYSSUB+1
         SPACE 1
LE0090   EQU   *         LESYSSUB+2
         MVC   LE_SYSB2,LESYSSUB+2
         SPACE 1
LE0120   EQU   *         LESYSSUB+3
         MVC   LE_SYSB3,LESYSSUB+3
LE0122   EQU   *
LE0124   EQU   *
LE0126   EQU   *
LE0128   EQU   *
LE0130   EQU   *
         TM    LESYSSUB+3,X'04'    Q. z/VSE
         JNO   LE0132              A. no, bypass
         MVI   LE_S3VSE,C'Y'       A. yes,
LE0132   EQU   *
         TM    LESYSSUB+3,X'02'    Q. z/OS
         JNO   LE0134              A. no, bypass
         MVI   LE_S3ZOS,C'Y'       A. yes,
LE0134   EQU   *
LE0136   EQU   *
         MVI   LE_ENV,C'N'
         MVC   LE_ENV+1(L'LE_ENV-1),LE_ENV
         SPACE 1
LE0150   EQU   *         LEENVINF
         MVC   LE_ENVB0,LEENVINF+0
         TM    LEENVINF,X'80'      Q. PIPI
         JNO   LE0152              A. no, bypass
         MVI   LE_E0PIPI,C'Y'      A. yes,
LE0152   EQU   *
         TM    LEENVINF,X'40'      Q. PIPI-MAIN
         JNO   LE0154              A. no, bypass
         MVI   LE_E0MAIN,C'Y'      A. yes,
LE0154   EQU   *
         TM    LEENVINF,X'20'      Q. PIPI-SUB
         JNO   LE0156              A. no, bypass
         MVI   LE_E0SUB,C'Y'       A. yes,
LE0156   EQU   *
         TM    LEENVINF,X'10'      Q. PIPI-SUBDP
         JNO   LE0158              A. no, bypass
         MVI   LE_E0SUBDP,C'Y'     A. yes,
LE0158   EQU   *
         TM    LEENVINF,X'08'      Q. PICI
         JNO   LE0160              A. no, bypass
         MVI   LE_E0PICI,C'Y'      A. yes,
LE0160   EQU   *
         TM    LEENVINF,X'04'      Q. nested enclave
         JNO   LE0162              A. no, bypass
         MVI   LE_E0NENC,C'Y'      A. yes,
LE0162   EQU   *
         TM    LEENVINF,X'02'      Q. LRR
         JNO   LE0164              A. no, bypass
         MVI   LE_E0LRR,C'Y'       A. yes,
LE0164   EQU   *
         TM    LEENVINF,X'01'      Q. runtime reuse
         JNO   LE0180              A. no, bypass
         MVI   LE_E0RTR,C'Y'       A. yes,
         SPACE 1
LE0180   EQU   *         LEENVINF+1
         MVC   LE_ENVB1,LEENVINF+1
         TM    LEENVINF+1,X'80'    Q. XPLINK
         JNO   LE0182              A. no, bypass
         MVI   LE_E1XPLK,C'Y'      A. yes,
LE0182   EQU   *
         TM    LEENVINF+1,X'40'    Q. POSIX & RTO
         JNO   LE0184              A. no, bypass
         MVI   LE_E1POSIX,C'Y'     A. yes,
LE0184   EQU   *
         TM    LEENVINF+1,X'20'    Q. 1 or more PTHREAD
         JNO   LE0186              A. no, bypass
         MVI   LE_E1PTHR,C'Y'      A. yes,
LE0186   EQU   *
         TM    LEENVINF+1,X'10'    Q. IPT
         JNO   LE0188              A. no, bypass
         MVI   LE_E1IPT,C'Y'       A. yes,
LE0188   EQU   *
         TM    LEENVINF+1,X'08'    Q. multi-threaded fork
         JNO   LE0190              A. no, bypass
         MVI   LE_E1MTHR,C'Y'      A. yes,
LE0190   EQU   *
         TM    LEENVINF+1,X'04'    Q. AMODE 31
         JNO   LE0192              A. no, bypass
         MVI   LE_E1A31,C'Y'       A. yes,
LE0192   EQU   *
LE0194   EQU   *
         TM    LEENVINF+1,X'01'    Q. PIPI-MAINDP
         JNO   LE0210              A. no, bypass
         MVI   LE_E1MAINDP,C'Y'    A. yes,
         SPACE 1
LE0210   EQU   *         LEENVINF+2
         MVC   LE_ENVB2,LEENVINF+2
         SPACE 1
LE0240   EQU   *         LEENVINF+3
         MVC   LE_ENVB3,LEENVINF+3
         SPACE 1
LE0270   EQU   *         LEGPID
         MVC   LE_HGPID,LEGPID
         SPACE 1
         ICM   R1,8,LE_HPROD
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LE_PPROD,ZD01+L'ZD01-L'LE_PPROD
         SPACE 1
         ICM   R1,8,LE_HVER
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LE_PVER,ZD01+L'ZD01-L'LE_PVER
         SPACE 1
         ICM   R1,8,LE_HREL
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LE_PREL,ZD01+L'ZD01-L'LE_PREL
         SPACE 1
         ICM   R1,8,LE_HMOD
         SRL   R1,24
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LE_PMOD,ZD01+L'ZD01-L'LE_PMOD
         SPACE 1
LE0300   EQU   *         Run time options
         LARL  RE,LE0900      set default return
         L     R6,CEECAAEDB   get addr of Enclave Data Block
         USING CEEEDB,R6      est addr to EDB
         CLC   CEEEDBEYE,=CL8'CEEEDB'   Q. CEEEDB
         JNE   TXT0108F                 A. no,
         L     R6,CEEEDBOPTCB get addr of LE Options ctl blk
         DROP  R6
         USING CEEOCB,R6      est addr to OCB
         CLC   CEEOCB_EYECATCHER,=CL8'CEEOCB'     Q. CEEOCB
         JNE   TXT0108G                           A. no,
         MVC   LE_OCBVER,CEEOCB_VERSION_RELEASE
*              LE_OCBVER starting value = 16
         ICM   R1,12,LE_OCBVER     Q. value > 0
         JZ    TXT0108H            A. no,
         SRL   R1,16
         CHI   R1,16               Q. value >= 16
         JL    TXT0108H            A. no, error
         AHI   R1,-16              make relative to zero
         CHI   R1,OCBOS_NTRY_CNT   Q. value > max
         JH    TXT0108H            A. yes, error
         SLL   R1,4                multiply by 16
         LA    R1,OCBOS(R1)
         MVC   LE_OCBVTXT,0(R1)    copy OCB version text
         SPACE 1
LE0330   EQU   *         OCB format
         MVI   LE_OCBFMT,C'N'
         MVC   LE_OCBFMT+1(L'LE_OCBFMT-1),LE_OCBFMT
         MVC   LE_FMT,CEEOCB_FORMAT
         TM    CEEOCB_FORMAT,CEEOCB_FORMAT_64     Q. 64-bit
         JNO   LE0360                             A. no, bypass
         MVI   LE_FMT64,C'Y'                      A. yes,
LE0360   EQU   *         OCB origin
         MVI   LE_OCBORG,C'N'
         MVC   LE_OCBORG+1(L'LE_OCBORG-1),LE_OCBORG
         MVC   LE_ORG,CEEOCB_ORIGIN
         TM    CEEOCB_ORIGIN,CEEOCB_IBM_SUPPLIED  Q. IBM
         JNO   LE0390                             A. no, bypass
         MVI   LE_IBM,C'Y'                        A. yes,
LE0390   EQU   *         AIXBLD(ON)
         MVI   LE_OPTAIX,C'N'
         MVC   LE_OPTAIX+1(L'LE_OPTAIX-1),LE_OPTAIX
         MVC   LE_AIX,CEEOCB_AIXBLD_BIT_FLAG
         TM    CEEOCB_AIXBLD_BIT_FLAG,CEEOCB_AIXBLD_ON Q. AIXBLD(ON)
         JNO   LE0420                                  A. no, bypass
         MVI   LE_AIXON,C'Y'                           A. yes,
LE0420   EQU   *         ALL31(ON)
         MVI   LE_OPTA31,C'N'
         MVC   LE_OPTA31+1(L'LE_OPTA31-1),LE_OPTA31
         MVC   LE_A31,CEEOCB_ALL31_BIT_FLAG
         TM    CEEOCB_ALL31_BIT_FLAG,CEEOCB_ALL31_ON   Q. ALL31(ON)
         JNO   LE0450                                  A. no, bypass
         MVI   LE_A31ON,C'Y'                           A. yes,
LE0450   EQU   *         CBLOPTS(ON)
         MVI   LE_OPTCBL,C'N'
         MVC   LE_OPTCBL+1(L'LE_OPTCBL-1),LE_OPTCBL
         MVC   LE_CBL,CEEOCB_CBLOPTS_BIT_FLAG
         TM    CEEOCB_CBLOPTS_BIT_FLAG,CEEOCB_CBLOPTS_ON Q. CBLOPTS(ON)
         JNO   LE0480                                    A. no, bypass
         MVI   LE_CBLON,C'Y'                             A. yes,
LE0480   EQU   *         CBLQDA(ON)
         MVI   LE_OPTQDA,C'N'
         MVC   LE_OPTQDA+1(L'LE_OPTQDA-1),LE_OPTQDA
         MVC   LE_QDA,CEEOCB_CBLQDA_BIT_FLAG
         TM    CEEOCB_CBLQDA_BIT_FLAG,CEEOCB_CBLQDA_ON Q. CBLQDA(ON)
         JNO   LE0510                                  A. no, bypass
         MVI   LE_QDAON,C'Y'                           A. yes,
LE0510   EQU   *         CHECK(ON)
         MVI   LE_OPTCHK,C'N'
         MVC   LE_OPTCHK+1(L'LE_OPTCHK-1),LE_OPTCHK
         MVC   LE_CHK,CEEOCB_CHECK_BIT_FLAG
         TM    CEEOCB_CHECK_BIT_FLAG,CEEOCB_CHECK_ON   Q. CHECK(ON)
         JNO   LE0540                                  A. no, bypass
         MVI   LE_CHKON,C'Y'                           A. yes,
LE0540   EQU   *         DEBUG(ON)
         MVI   LE_OPTDBG,C'N'
         MVC   LE_OPTDBG+1(L'LE_OPTDBG-1),LE_OPTDBG
         MVC   LE_DBG,CEEOCB_DEBUG_BIT_FLAG
         TM    CEEOCB_DEBUG_BIT_FLAG,CEEOCB_DEBUG_ON   Q. DEBUG(ON)
         JNO   LE0570                                  A. no, bypass
         MVI   LE_DBGON,C'Y'                           A. yes,
LE0570   EQU   *         HEAP(ON)
         MVI   LE_HEAPON,C'N'
         MVC   LE_HEAP,CEEOCB_HEAP_BIT_FLAG
         TM    CEEOCB_HEAP_BIT_FLAG,CEEOCB_HEAP_ON     Q. HEAP(ON)
         JNO   LE0600                                  A. no, bypass
         MVI   LE_HEAPON,C'Y'                          A. yes,
         LR    R7,R6
         A     R7,CEEOCB_HEAP_SUB_OPTIONS
         USING CEEOCB_HEAP_SUB_OPTS,R7
         MVI   LE_HEAPBELOW,C'N'
         MVC   LE_HEAP_LOC,=CL5'ANY'
         MVC   LE_HEAP_SUB,CEEOCB_HEAP_SUB_BIT_FLAG
         TM    CEEOCB_HEAP_SUB_BIT_FLAG,CEEOCB_HEAP_LOCATION
         JNO   LE0572
         MVI   LE_HEAPBELOW,C'Y'
         MVC   LE_HEAP_LOC,=CL5'BELOW'
LE0572   EQU   *
         MVI   LE_HEAPFREE,C'N'
         MVC   LE_HEAP_DISP,=CL4'KEEP'
         TM    CEEOCB_HEAP_SUB_BIT_FLAG,CEEOCB_HEAP_DISPOSITION
         JNO   LE0600
         MVI   LE_HEAPFREE,C'Y'
         MVC   LE_HEAP_DISP,=CL4'FREE'
         DROP  R7
LE0600   EQU   *         STACK(ON)
         MVI   LE_STACKON,C'N'
         MVC   LE_STACK,CEEOCB_STACK_BIT_FLAG
         TM    CEEOCB_STACK_BIT_FLAG,CEEOCB_STACK_ON   Q. STACK(ON)
         JNO   LE0630                                  A. no, bypass
         MVI   LE_STACKON,C'Y'                         A. yes,
         LR    R7,R6
         A     R7,CEEOCB_STACK_SUB_OPTIONS
         USING CEEOCB_STACK_SUB_OPTS,R7
         MVI   LE_STACKBELOW,C'N'
         MVC   LE_STACK_LOC,=CL5'ANY'
         MVC   LE_STACK_SUB,CEEOCB_STACK_SUB_BIT_FLAG
         TM    CEEOCB_STACK_SUB_BIT_FLAG,CEEOCB_STACK_LOCATION
         JNO   LE0602
         MVI   LE_STACKBELOW,C'Y'
         MVC   LE_STACK_LOC,=CL5'BELOW'
LE0602   EQU   *
         MVI   LE_STACKFREE,C'N'
         MVC   LE_STACK_DISP,=CL4'KEEP'
         TM    CEEOCB_STACK_SUB_BIT_FLAG,CEEOCB_STACK_DISPOSITION
         JNO   LE0630
         MVI   LE_STACKFREE,C'Y'
         MVC   LE_STACK_DISP,=CL4'FREE'
         DROP  R7
LE0630   EQU   *         STORAGE(ON)
         MVI   LE_STGON,C'N'
         MVC   LE_STG,CEEOCB_STORAGE_BIT_FLAG
         TM    CEEOCB_STORAGE_BIT_FLAG,CEEOCB_STORAGE_ON Q. STORAGE(ON)
         JNO   LE0660                                    A. no, bypass
         MVI   LE_STGON,C'Y'                             A. yes,
         LR    R7,R6
         A     R7,CEEOCB_STORAGE_SUB_OPTIONS
         USING CEEOCB_STORAGE_SUB_OPTS,R7
         MVI   LE_STGFLGS,C'N'
         MVC   LE_STGFLGS+1(L'LE_STGFLGS-1),LE_STGFLGS
         XC    LE_HAVAL,LE_HAVAL
         XC    LE_HFVAL,LE_HFVAL
         XC    LE_SAVAL,LE_SAVAL
         MVC   LE_STG_SUB,CEEOCB_STORAGE_SUB_OPTS_FLAGS
         TM    CEEOCB_STORAGE_SUB_OPTS_FLAGS,CEEOCB_STORAGE_HEAP_ALLOC_+
               SET
         JNO   LE0632
         MVI   LE_S1HAS,C'Y'
         MVC   LE_HAVAL,CEEOCB_STORAGE_HEAP_ALLOC_VALUE
LE0632   EQU   *
         TM    CEEOCB_STORAGE_SUB_OPTS_FLAGS,CEEOCB_STORAGE_HEAP_FREE_S+
               ET
         JNO   LE0634
         MVI   LE_S1HFS,C'Y'
         MVC   LE_HFVAL,CEEOCB_STORAGE_HEAP_FREE_VALUE
LE0634   EQU   *
         TM    CEEOCB_STORAGE_SUB_OPTS_FLAGS,CEEOCB_STORAGE_DSA_ALLOC_S+
               ET
         JNO   LE0660
         MVI   LE_S1SAS,C'Y'
         MVC   LE_SAVAL,CEEOCB_STORAGE_DSA_ALLOC_VALUE
LE0660   EQU   *         TERMTHDACT(ON)
         MVI   LE_TTAON,C'N'
         MVC   LE_TTA,CEEOCB_TERMTHDACT_BIT_FLAG
         TM    CEEOCB_TERMTHDACT_BIT_FLAG,CEEOCB_TERMTHDACT_ON
         JNO   LE0690
         MVI   LE_TTAON,C'Y'
         LR    R7,R6
         A     R7,CEEOCB_TERMTHDACT_SUB_OPTIONS
         USING CEEOCB_TERMTHDACT_SUB_OPTS,R7
         MVC   LE_TTALVL,CEEOCB_TERMTHDACT_LEVEL
         TM    LE_TTALVL+3,X'80'   Q. UATRACE
         JNO   LE0662              A. no, bypass
         LHI   R1,((8-1)*8)        A. yes
         J     LE0680
LE0662   EQU   *
         TM    LE_TTALVL+3,X'40'   Q. UAIMM
         JNO   LE0664              A. no, bypass
         LHI   R1,((7-1)*8)        A. yes
         J     LE0680
LE0664   EQU   *
         TM    LE_TTALVL+3,X'20'   Q. UAONLY
         JNO   LE0666              A. no, bypass
         LHI   R1,((6-1)*8)        A. yes
         J     LE0680
LE0666   EQU   *
         TM    LE_TTALVL+3,X'10'   Q. UADUMP
         JNO   LE0668              A. no, bypass
         LHI   R1,((5-1)*8)        A. yes
         J     LE0680
LE0668   EQU   *
         TM    LE_TTALVL+3,X'08'   Q. QUIET
         JNO   LE0670              A. no, bypass
         LHI   R1,((4-1)*8)        A. yes
         J     LE0680
LE0670   EQU   *
         TM    LE_TTALVL+3,X'04'   Q. MSG
         JNO   LE0672              A. no, bypass
         LHI   R1,((3-1)*8)        A. yes
         J     LE0680
LE0672   EQU   *
         TM    LE_TTALVL+3,X'02'   Q. TRACE
         JNO   LE0674              A. no, bypass
         LHI   R1,((2-1)*8)        A. yes
         J     LE0680
LE0674   EQU   *
         TM    LE_TTALVL+3,X'01'   Q. DUMP
         JNO   LE0676              A. no, bypass
         LHI   R1,((1-1)*8)        A. yes
         J     LE0680
LE0676   EQU   *
         LHI   R1,((2-1)*8)        A. TRACE (default)
LE0680   EQU   *
         LA    R1,OCBTTA(R1)
         MVC   LE_TTAVAL,0(R1)     copy LE TERMTHDACT text
         DROP  R7
LE0690   EQU   *
         SPACE 1
LE0900   EQU   *
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* RETRIEVE PROGRAM/CSV INFORMATION
* RETURN CODE R15:
*    0 - SUCCESSFUL
*    4 - MOSTLY SUCCESSFUL
*    8 - NOT FOUND
*  12:20 UNSUCCESSFUL UNEXPECTED ERROR
* --------------------------------------------------------- *
         SPACE 1
CSVRTN   AS2LTRCE
         AS2RESTK PUSH
         CLI   CSV_PGM,C' '   Q. user provide program name
         JNH   CSV0900        A. no, bypass
         SPACE 1
         XC    RTNCD,RTNCD
         XC    RSNCD,RSNCD
         CSVQUERY SEARCH=JPALPA,                                       +
               INEPNAME=CSV_PGM,                                       +
               OUTATTR1=WS_CSV_ATTR1,                                  +
               OUTATTR2=WS_CSV_ATTR2,                                  +
               OUTATTR3=WS_CSV_ATTR3,                                  +
               OUTPDATA=WS_CSV_PDATA,                                  +
               OUTPID=WS_CSV_LOADER,                                   +
               OUTVALID=WS_CSV_VALID,                                  +
               MF=(E,CSVQRYWK)
         ST    RF,RTNCD
         C     RF,F8          Q. bad error
         JL    CSV0030        A. yes, bypass
         LARL  RE,CSV0900     set default return
         J     TXT0107B
         SPACE 1
CSV0030  EQU   *         WS_CSV_ATTR1
         MVI   CSV_ATTR,C'N'
         MVC   CSV_ATTR+1(L'CSV_ATTR-1),CSV_ATTR
         TM    WS_CSV_VALID0,X'04' Q. CSV attr1 valid
         JNO   CSV0060
CSV0032  EQU   *
         MVC   CSV_ATTRB1,WS_CSV_ATTR1
CSV0034  EQU   *
CSV0036  EQU   *
         TM    WS_CSV_ATTR1,X'20'  Q. RENT
         JNO   CSV0038             A. no, bypass
         MVI   CSV_A1RENT,C'Y'     A. yes,
CSV0038  EQU   *
         TM    WS_CSV_ATTR1,X'10'  Q. REUS
         JNO   CSV0040             A. no, bypass
         MVI   CSV_A1REUS,C'Y'     A. yes,
CSV0040  EQU   *
         TM    WS_CSV_ATTR1,X'08'  Q. not load only
         JNO   CSV0042             A. no, bypass
         MVI   CSV_A1NLONLY,C'Y'   A. yes,
CSV0042  EQU   *
         TM    WS_CSV_ATTR1,X'04'  Q. overlay format
         JNO   CSV0044             A. no, bypass
         MVI   CSV_A1OVRLAY,C'Y'   A. yes,
CSV0044  EQU   *
         TM    WS_CSV_ATTR1,X'02'  Q. ALIAS
         JNO   CSV0046             A. no, bypass
         MVI   CSV_A1ALIAS,C'Y'    A. yes,
CSV0046  EQU   *
         SPACE 1
CSV0060  EQU   *         WS_CSV_ATTR2
         TM    WS_CSV_VALID0,X'02' Q. CSV attr2 valid
         JNO   CSV0090
         MVC   CSV_ATTRB2,WS_CSV_ATTR2
         TM    WS_CSV_ATTR2,X'80'  Q. authorized library
         JNO   CSV0062             A. no, bypass
         MVI   CSV_A2ALIB,C'Y'     A. yes,
CSV0062  EQU   *
         TM    WS_CSV_ATTR2,X'40'  Q. authorized program
         JNO   CSV0064             A. no, bypass
         MVI   CSV_A2APGM,C'Y'     A. yes,
CSV0064  EQU   *
         TM    WS_CSV_ATTR2,X'20'  Q. AMODE ANY
         JNO   CSV0066             A. no, bypass
         MVI   CSV_A2AANY,C'Y'     A. yes,
CSV0066  EQU   *
         TM    WS_CSV_ATTR2,X'10'  Q. AMODE 31
         JNO   CSV0068             A. no, bypass
         MVI   CSV_A2A31,C'Y'      A. yes,
CSV0068  EQU   *
CSV0070  EQU   *
         TM    WS_CSV_ATTR2,X'04'  Q. dynamic LPA module
         JNO   CSV0072             A. no, bypass
         MVI   CSV_A2DLPA,C'Y'     A. yes,
CSV0072  EQU   *
         TM    WS_CSV_ATTR2,X'02'  Q. page protected
         JNO   CSV0074             A. no, bypass
         MVI   CSV_A2PGPROT,C'Y'   A. yes,
CSV0074  EQU   *
         TM    WS_CSV_ATTR2,X'01'  Q. AMODE 64
         JNO   CSV0090             A. no, bypass
         MVI   CSV_A2A64,C'Y'      A. yes,
CSV0090  EQU   *         WS_CSV_ATTR3
         TM    WS_CSV_VALID0,X'01' Q. CSV attr3 valid
         JNO   CSV0120
         MVC   CSV_ATTRB3,WS_CSV_ATTR3
         TM    WS_CSV_ATTR3,X'80'  Q. resident above-the-line
         JNO   CSV0092             A. no, bypass
         MVI   CSV_A3RATL,C'Y'     A. yes,
CSV0092  EQU   *
         TM    WS_CSV_ATTR3,X'40'  Q. resident in JPA
         JNO   CSV0094             A. no, bypass
         MVI   CSV_A3RJPA,C'Y'     A. yes,
CSV0094  EQU   *
         TM    WS_CSV_ATTR3,X'20'  Q. resident in PLPA
         JNO   CSV0096             A. no, bypass
         MVI   CSV_A3RPLPA,C'Y'    A. yes,
CSV0096  EQU   *
         TM    WS_CSV_ATTR3,X'10'  Q. resident in MLPA
         JNO   CSV0098             A. no, bypass
         MVI   CSV_A3RMLPA,C'Y'    A. yes,
CSV0098  EQU   *
         TM    WS_CSV_ATTR3,X'08'  Q. resident in FLPA
         JNO   CSV0100             A. no, bypass
         MVI   CSV_A3RFLPA,C'Y'    A. yes,
CSV0100  EQU   *
         TM    WS_CSV_ATTR3,X'04'  Q. resident in CSA
         JNO   CSV0102             A. no, bypass
         MVI   CSV_A3RCSA,C'Y'     A. yes,
CSV0102  EQU   *
CSV0104  EQU   *
CSV0120  EQU   *         WS_CSV_PDATA
         MVI   CSV_PDATA,C' '
         MVC   CSV_PDATA+1(L'CSV_PDATA-1),CSV_PDATA
         TM    WS_CSV_VALID1,X'40' Q. CSV pdata valid
         JNO   CSV0130             A. no, bypass
         UNPK  ZD02(9),WS_CSV_PDATA(5)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   CSV_PDATA(8),ZD02
         UNPK  ZD02(9),WS_CSV_PDATA+4(5)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   CSV_PDATA+8(8),ZD02
         UNPK  ZD02(9),WS_CSV_PDATA+8(5)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   CSV_PDATA+16(8),ZD02
         UNPK  ZD02(9),WS_CSV_PDATA+12(5)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   CSV_PDATA+24(8),ZD02
CSV0130  EQU   *         WS_CSV_LOADER
         MVI   CSV_LOADER,C' '
         MVC   CSV_LOADER+1(L'CSV_LOADER-1),CSV_LOADER
         TM    WS_CSV_VALID1,X'20' Q. CSV loader pid valid
         JNO   CSV0140             A. no, bypass
         MVC   CSV_LOADER,WS_CSV_LOADER A. yes,
CSV0140  EQU   *
         SPACE 1
CSV0900  EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* PRINT ROUTINES
* --------------------------------------------------------- *
         SPACE 1
PRTPSA   AS2LTRCE
         AS2RESTK PUSH
         L     R8,WS_SSA1     point to Static Storage Area 1
         USING LNE001T,R8
PPSA001  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE001L),LNE001T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA002  EQU   *         PSA
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE002L),LNE002T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA003  EQU   *         z/ARCH (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE003L),LNE003T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE003A,PSA_ZARCH
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA004  EQU   *         PSAE
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE004L),LNE004T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA005  EQU   *         Facility byte-0
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE005L),LNE005T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB0(L'PSA_FLSTB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE005A,ZD02+8-L'LNE005A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA006  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE006L),LNE006T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE006A,PSA_F0N3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA007  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE007L),LNE007T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE007A,PSA_F0ZMODE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA008  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE008L),LNE008T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE008A,PSA_F0ZACT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA009  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE009L),LNE009T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE009A,PSA_F0IDTE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA010  EQU   *         x'08'
         SPACE 1
PPSA011  EQU   *         x'04'
         SPACE 1
PPSA012  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE012L),LNE012T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE012A,PSA_F0ASLX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA013  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE013L),LNE013T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE013A,PSA_F0STFLE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA014  EQU   *         Facility byte-1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE014L),LNE014T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB1(L'PSA_FLSTB1+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE014A,ZD02+8-L'LNE014A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA015  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE015L),LNE015T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE015A,PSA_F1DAT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA016  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE016L),LNE016T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE016A,PSA_F1SRSF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA017  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE017L),LNE017T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE017A,PSA_F1SSKE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA018  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE018L),LNE018T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE018A,PSA_F1STSIE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA019  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE019L),LNE019T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE019A,PSA_F1CQCIF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA020  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE020L),LNE020T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE020A,PSA_F1IPTE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA021  EQU   *         x'02'
         SPACE 1
PPSA022  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE022L),LNE022T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE022A,PSA_F1APFT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA023  EQU   *         Facility byte-2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE023L),LNE023T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB2(L'PSA_FLSTB2+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE023A,ZD02+8-L'LNE023A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA024  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE024L),LNE024T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE024A,PSA_F2ETF2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA025  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE025L),LNE025T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE025A,PSA_F2CRYA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA026  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE026L),LNE026T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE026A,PSA_F2LDF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA027  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE027L),LNE027T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE027A,PSA_F2LDFHP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA028  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE028L),LNE028T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE028A,PSA_F2HFPMAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA029  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE029L),LNE029T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE029A,PSA_F2XIMM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA030  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE030L),LNE030T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE030A,PSA_F2ETF3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA031  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE031L),LNE031T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE031A,PSA_F2HFPUNX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA032  EQU   *         Facility byte-3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE032L),LNE032T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB3(L'PSA_FLSTB3+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE032A,ZD02+8-L'LNE032A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA033  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE033L),LNE033T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE033A,PSA_F3ETF2E
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA034  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE034L),LNE034T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE034A,PSA_F3STKFE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA035  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE035L),LNE035T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE035A,PSA_F3PARSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA036  EQU   *         x'10'
         SPACE 1
PPSA037  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE037L),LNE037T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE037A,PSA_F3TOD
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA038  EQU   *         x'04'
         SPACE 1
PPSA039  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE039L),LNE039T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE039A,PSA_F3ETF3E
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA040  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE040L),LNE040T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE040A,PSA_F3ECTF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA041  EQU   *         Facility byte-4
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE041L),LNE041T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB4(L'PSA_FLSTB4+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE041A,ZD02+8-L'LNE041A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA042  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE042L),LNE042T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE042A,PSA_F4CSSF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA043  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE043L),LNE043T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE043A,PSA_F4CSSF2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA044  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE044L),LNE044T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE044A,PSA_F4GIXF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA045  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE045L),LNE045T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE045A,PSA_F4EEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA046  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE046L),LNE046T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE046A,PSA_F4EMF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA047  EQU   *         x'04'
         SPACE 1
PPSA048  EQU   *         x'02'
         SPACE 1
PPSA049  EQU   *         x'01'
         SPACE 1
PPSA050  EQU   *         Facility byte-5
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE050L),LNE050T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB5(L'PSA_FLSTB5+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE050A,ZD02+8-L'LNE050A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA051  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE051L),LNE051T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE051A,PSA_F5SPPF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA052  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE052L),LNE052T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE052A,PSA_F5FPSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA053  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE053L),LNE053T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE053A,PSA_F5DFP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA054  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE054L),LNE054T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE054A,PSA_F5DFPHP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA055  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE055L),LNE055T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE055A,PSA_F5PFPO
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA056  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE056L),LNE056T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE056A,PSA_F5Z196
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA057  EQU   *         x'02'
         SPACE 1
PPSA058  EQU   *         x'01'
         SPACE 1
PPSA059  EQU   *         Facility byte-6
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE059L),LNE059T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB6(L'PSA_FLSTB6+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE059A,ZD02+8-L'LNE059A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA060  EQU   *         x'80'
         SPACE 1
PPSA061  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE061L),LNE061T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE061A,PSA_F6MIEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA062  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE062L),LNE062T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE062A,PSA_F6CTXF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA063  EQU   *         x'10'
         SPACE 1
PPSA064  EQU   *         x'08'
         SPACE 1
PPSA065  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE065L),LNE065T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE065A,PSA_F6LSC2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA066  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE066L),LNE066T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE066A,PSA_F6EECS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA067  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE067L),LNE067T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE067A,PSA_F6CTEND
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA068  EQU   *         Facility byte-7
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE068L),LNE068T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB7(L'PSA_FLSTB7+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE068A,ZD02+8-L'LNE068A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA069  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE069L),LNE069T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE069A,PSA_F7STPTODCS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA070  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE070L),LNE070T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE070A,PSA_F7MSAE5
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA071  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE071L),LNE071T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE071A,PSA_F7MIE2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA072  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE072L),LNE072T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE072A,PSA_F7SA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA073  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE073L),LNE073T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE073A,PSA_F7TSI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA074  EQU   *         x'04'
         SPACE 1
PPSA075  EQU   *         x'02'
         SPACE 1
PPSA076  EQU   *         x'01'
         SPACE 1
PPSA077  EQU   *         Facility byte-8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE077L),LNE077T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB8(L'PSA_FLSTB8+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE077A,ZD02+8-L'LNE077A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA078  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE078L),LNE078T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE078A,PSA_F8RI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA079  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE079L),LNE079T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE079A,PSA_F8CRYI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA080  EQU   *         x'20'
         SPACE 1
PPSA081  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE081L),LNE081T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE081A,PSA_F8CPUMCF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA082  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE082L),LNE082T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE082A,PSA_F8CPUMSF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA083  EQU   *         x'04'
         SPACE 1
PPSA084  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE084L),LNE084T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE084A,PSA_F8AISIF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA085  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE085L),LNE085T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE085A,PSA_F8AENF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA086  EQU   *         Facility byte-9
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE086L),LNE086T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTB9(L'PSA_FLSTB9+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE086A,ZD02+8-L'LNE086A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA087  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE087L),LNE087T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE087A,PSA_F9AISF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA088  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE088L),LNE088T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE088A,PSA_F9MSA4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA089  EQU   *         x'20'
         SPACE 1
PPSA090  EQU   *         x'10'
         SPACE 1
PPSA091  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE091L),LNE091T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE091A,PSA_F9MSA3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA092  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE092L),LNE092T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE092A,PSA_F9MSA4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA093  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE093L),LNE093T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE093A,PSA_F9EDAT2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA094  EQU   *         x'01'
         SPACE 1
PPSA095  EQU   *         Facility byte-10
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE095L),LNE095T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBA(L'PSA_FLSTBA+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE095A,ZD02+8-L'LNE095A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
PPSA096  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE096L),LNE096T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE096A,PSA_FADFPP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA097  EQU   *         x'40'
         SPACE 1
PPSA098  EQU   *         x'20'
         SPACE 1
PPSA099  EQU   *         x'10'
         SPACE 1
PPSA100  EQU   *         x'08'
         SPACE 1
PPSA101  EQU   *         x'04'
         SPACE 1
PPSA102  EQU   *         x'02'
         SPACE 1
PPSA103  EQU   *         x'01'
         SPACE 1
PPSA104  EQU   *         Facility byte-11
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE104L),LNE104T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBB(L'PSA_FLSTBB+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE104A,ZD02+8-L'LNE104A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
PPSA105  EQU   *         x'80'
         SPACE 1
PPSA106  EQU   *         x'40'
         SPACE 1
PPSA107  EQU   *         x'20'
         SPACE 1
PPSA108  EQU   *         x'10'
         SPACE 1
PPSA109  EQU   *         x'08'
         SPACE 1
PPSA110  EQU   *         x'04'
         SPACE 1
PPSA111  EQU   *         x'02'
         SPACE 1
PPSA112  EQU   *         x'01'
         SPACE 1
PPSA113  EQU   *         Facility byte-12
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE113L),LNE113T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBC(L'PSA_FLSTBC+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE113A,ZD02+8-L'LNE113A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
PPSA114  EQU   *         x'80'
         SPACE 1
PPSA115  EQU   *         x'40'
         SPACE 1
PPSA116  EQU   *         x'20'
         SPACE 1
PPSA117  EQU   *         x'10'
         SPACE 1
PPSA118  EQU   *         x'08'
         SPACE 1
PPSA119  EQU   *         x'04'
         SPACE 1
PPSA120  EQU   *         x'02'
         SPACE 1
PPSA121  EQU   *         x'01'
         SPACE 1
PPSA122  EQU   *         Facility byte-13
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE122L),LNE122T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBD(L'PSA_FLSTBD+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE122A,ZD02+8-L'LNE122A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA123  EQU   *         x'80'
         SPACE 1
PPSA124  EQU   *         x'40'
         SPACE 1
PPSA125  EQU   *         x'20'
         SPACE 1
PPSA126  EQU   *         x'10'
         SPACE 1
PPSA127  EQU   *         x'08'
         SPACE 1
PPSA128  EQU   *         x'04'
         SPACE 1
PPSA129  EQU   *         x'02'
         SPACE 1
PPSA130  EQU   *         x'01'
         SPACE 1
PPSA131  EQU   *         Facility byte-14
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE131L),LNE131T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBE(L'PSA_FLSTBE+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE131A,ZD02+8-L'LNE131A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA132  EQU   *         x'80'
         SPACE 1
PPSA133  EQU   *         x'40'
         SPACE 1
PPSA134  EQU   *         x'20'
         SPACE 1
PPSA135  EQU   *         x'10'
         SPACE 1
PPSA136  EQU   *         x'08'
         SPACE 1
PPSA137  EQU   *         x'04'
         SPACE 1
PPSA138  EQU   *         x'02'
         SPACE 1
PPSA139  EQU   *         x'01'
         SPACE 1
PPSA140  EQU   *         Facility byte-15
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE140L),LNE140T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBF(L'PSA_FLSTBF+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE140A,ZD02+8-L'LNE140A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA141  EQU   *         x'80'
         SPACE 1
PPSA142  EQU   *         x'40'
         SPACE 1
PPSA143  EQU   *         x'20'
         SPACE 1
PPSA144  EQU   *         x'10'
         SPACE 1
PPSA145  EQU   *         x'08'
         SPACE 1
PPSA146  EQU   *         x'04'
         SPACE 1
PPSA147  EQU   *         x'02'
         SPACE 1
PPSA148  EQU   *         x'01'
         SPACE 1
PPSA150  EQU   *         Facility byte-16
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE150L),LNE150T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBG(L'PSA_FLSTBG+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE150A,ZD02+8-L'LNE150A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA151  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE151L),LNE151T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE151A,PSA_FGDLYF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA152  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE152L),LNE152T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE152A,PSA_FGVEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA153  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE153L),LNE153T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE153A,PSA_FGIEPF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA154  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE154L),LNE154T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE154A,PSA_FGSEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA155  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE155L),LNE155T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE155A,PSA_FGCLOF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA156  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE156L),LNE156T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE156A,PSA_FGGSF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA157  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE157L),LNE157T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE157A,PSA_FGRTI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA158  EQU   *         x'01'
         SPACE 1
PPSA160  EQU   *         Facility byte-17
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE160L),LNE160T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBH(L'PSA_FLSTBH+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE160A,ZD02+8-L'LNE160A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA161  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE161L),LNE161T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE161A,PSA_FHSTLB
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA162  EQU   *         x'40'
         SPACE 1
PPSA163  EQU   *         x'20'
         SPACE 1
PPSA164  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE164L),LNE164T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE164A,PSA_FHCEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA165  EQU   *         x'08'
         SPACE 1
PPSA166  EQU   *         x'04'
         SPACE 1
PPSA167  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE167L),LNE167T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE167A,PSA_FHSCCM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA168  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE168L),LNE168T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE168A,PSA_FHSCT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA170  EQU   *         Facility byte-18
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE170L),LNE170T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBI(L'PSA_FLSTBI+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE170A,ZD02+8-L'LNE170A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA171  EQU   *         x'80'
         SPACE 1
PPSA172  EQU   *         x'40'
         SPACE 1
PPSA173  EQU   *         x'20'
         SPACE 1
PPSA174  EQU   *         x'10'
         SPACE 1
PPSA175  EQU   *         x'08'
         SPACE 1
PPSA176  EQU   *         x'04'
         SPACE 1
PPSA177  EQU   *         x'02'
         SPACE 1
PPSA178  EQU   *         x'01'
         SPACE 1
PPSA180  EQU   *         Facility byte-19
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE180L),LNE180T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBJ(L'PSA_FLSTBJ+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE180A,ZD02+8-L'LNE180A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA181  EQU   *         x'80'
         SPACE 1
PPSA182  EQU   *         x'40'
         SPACE 1
PPSA183  EQU   *         x'20'
         SPACE 1
PPSA184  EQU   *         x'10'
         SPACE 1
PPSA185  EQU   *         x'08'
         SPACE 1
PPSA186  EQU   *         x'04'
         SPACE 1
PPSA187  EQU   *         x'02'
         SPACE 1
PPSA188  EQU   *         x'01'
         SPACE 1
PPSA190  EQU   *         Facility byte-20
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE190L),LNE190T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBK(L'PSA_FLSTBK+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE190A,ZD02+8-L'LNE190A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA191  EQU   *         x'80'
         SPACE 1
PPSA192  EQU   *         x'40'
         SPACE 1
PPSA193  EQU   *         x'20'
         SPACE 1
PPSA194  EQU   *         x'10'
         SPACE 1
PPSA195  EQU   *         x'08'
         SPACE 1
PPSA196  EQU   *         x'04'
         SPACE 1
PPSA197  EQU   *         x'02'
         SPACE 1
PPSA198  EQU   *         x'01'
         SPACE 1
PPSA200  EQU   *         Facility byte-21
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE200L),LNE200T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBL(L'PSA_FLSTBL+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE200A,ZD02+8-L'LNE200A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA201  EQU   *         x'80'
         SPACE 1
PPSA202  EQU   *         x'40'
         SPACE 1
PPSA203  EQU   *         x'20'
         SPACE 1
PPSA204  EQU   *         x'10'
         SPACE 1
PPSA205  EQU   *         x'08'
         SPACE 1
PPSA206  EQU   *         x'04'
         SPACE 1
PPSA207  EQU   *         x'02'
         SPACE 1
PPSA208  EQU   *         x'01'
         SPACE 1
PPSA210  EQU   *         Facility byte-22
         DROP  R8
         L     R8,WS_SSA2     point to Static Storage Area 2
         USING LNE210T,R8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE210L),LNE210T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBM(L'PSA_FLSTBM+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE210A,ZD02+8-L'LNE210A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA211  EQU   *         x'80'
         SPACE 1
PPSA212  EQU   *         x'40'
         SPACE 1
PPSA213  EQU   *         x'20'
         SPACE 1
PPSA214  EQU   *         x'10'
         SPACE 1
PPSA215  EQU   *         x'08'
         SPACE 1
PPSA216  EQU   *         x'04'
         SPACE 1
PPSA217  EQU   *         x'02'
         SPACE 1
PPSA218  EQU   *         x'01'
         SPACE 1
PPSA220  EQU   *         Facility byte-23
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE220L),LNE220T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBN(L'PSA_FLSTBN+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE220A,ZD02+8-L'LNE220A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA221  EQU   *         x'80'
         SPACE 1
PPSA222  EQU   *         x'40'
         SPACE 1
PPSA223  EQU   *         x'20'
         SPACE 1
PPSA224  EQU   *         x'10'
         SPACE 1
PPSA225  EQU   *         x'08'
         SPACE 1
PPSA226  EQU   *         x'04'
         SPACE 1
PPSA227  EQU   *         x'02'
         SPACE 1
PPSA228  EQU   *         x'01'
         SPACE 1
PPSA230  EQU   *         Facility byte-24
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE230L),LNE230T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBO(L'PSA_FLSTBO+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE230A,ZD02+8-L'LNE230A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA231  EQU   *         x'80'
         SPACE 1
PPSA232  EQU   *         x'40'
         SPACE 1
PPSA233  EQU   *         x'20'
         SPACE 1
PPSA234  EQU   *         x'10'
         SPACE 1
PPSA235  EQU   *         x'08'
         SPACE 1
PPSA236  EQU   *         x'04'
         SPACE 1
PPSA237  EQU   *         x'02'
         SPACE 1
PPSA238  EQU   *         x'01'
         SPACE 1
PPSA240  EQU   *         Facility byte-25
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE240L),LNE240T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBP(L'PSA_FLSTBP+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE240A,ZD02+8-L'LNE240A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA241  EQU   *         x'80'
         SPACE 1
PPSA242  EQU   *         x'40'
         SPACE 1
PPSA243  EQU   *         x'20'
         SPACE 1
PPSA244  EQU   *         x'10'
         SPACE 1
PPSA245  EQU   *         x'08'
         SPACE 1
PPSA246  EQU   *         x'04'
         SPACE 1
PPSA247  EQU   *         x'02'
         SPACE 1
PPSA248  EQU   *         x'01'
         SPACE 1
PPSA250  EQU   *         Facility byte-26
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE250L),LNE250T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBQ(L'PSA_FLSTBQ+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE250A,ZD02+8-L'LNE250A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA251  EQU   *         x'80'
         SPACE 1
PPSA252  EQU   *         x'40'
         SPACE 1
PPSA253  EQU   *         x'20'
         SPACE 1
PPSA254  EQU   *         x'10'
         SPACE 1
PPSA255  EQU   *         x'08'
         SPACE 1
PPSA256  EQU   *         x'04'
         SPACE 1
PPSA257  EQU   *         x'02'
         SPACE 1
PPSA258  EQU   *         x'01'
         SPACE 1
PPSA260  EQU   *         Facility byte-27
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE260L),LNE260T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBR(L'PSA_FLSTBR+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE260A,ZD02+8-L'LNE260A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA261  EQU   *         x'80'
         SPACE 1
PPSA262  EQU   *         x'40'
         SPACE 1
PPSA263  EQU   *         x'20'
         SPACE 1
PPSA264  EQU   *         x'10'
         SPACE 1
PPSA265  EQU   *         x'08'
         SPACE 1
PPSA266  EQU   *         x'04'
         SPACE 1
PPSA267  EQU   *         x'02'
         SPACE 1
PPSA268  EQU   *         x'01'
         SPACE 1
PPSA270  EQU   *         Facility byte-28
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE270L),LNE270T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBS(L'PSA_FLSTBS+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE270A,ZD02+8-L'LNE270A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA271  EQU   *         x'80'
         SPACE 1
PPSA272  EQU   *         x'40'
         SPACE 1
PPSA273  EQU   *         x'20'
         SPACE 1
PPSA274  EQU   *         x'10'
         SPACE 1
PPSA275  EQU   *         x'08'
         SPACE 1
PPSA276  EQU   *         x'04'
         SPACE 1
PPSA277  EQU   *         x'02'
         SPACE 1
PPSA278  EQU   *         x'01'
         SPACE 1
PPSA280  EQU   *         Facility byte-29
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE280L),LNE280T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBT(L'PSA_FLSTBT+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE280A,ZD02+8-L'LNE280A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA281  EQU   *         x'80'
         SPACE 1
PPSA282  EQU   *         x'40'
         SPACE 1
PPSA283  EQU   *         x'20'
         SPACE 1
PPSA284  EQU   *         x'10'
         SPACE 1
PPSA285  EQU   *         x'08'
         SPACE 1
PPSA286  EQU   *         x'04'
         SPACE 1
PPSA287  EQU   *         x'02'
         SPACE 1
PPSA288  EQU   *         x'01'
         SPACE 1
PPSA290  EQU   *         Facility byte-30
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE290L),LNE290T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBU(L'PSA_FLSTBU+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE290A,ZD02+8-L'LNE290A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA291  EQU   *         x'80'
         SPACE 1
PPSA292  EQU   *         x'40'
         SPACE 1
PPSA293  EQU   *         x'20'
         SPACE 1
PPSA294  EQU   *         x'10'
         SPACE 1
PPSA295  EQU   *         x'08'
         SPACE 1
PPSA296  EQU   *         x'04'
         SPACE 1
PPSA297  EQU   *         x'02'
         SPACE 1
PPSA298  EQU   *         x'01'
         SPACE 1
PPSA300  EQU   *         Facility byte-31
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE300L),LNE300T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),PSA_FLSTBV(L'PSA_FLSTBV+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE300A,ZD02+8-L'LNE300A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PPSA301  EQU   *         x'80'
         SPACE 1
PPSA302  EQU   *         x'40'
         SPACE 1
PPSA303  EQU   *         x'20'
         SPACE 1
PPSA304  EQU   *         x'10'
         SPACE 1
PPSA305  EQU   *         x'08'
         SPACE 1
PPSA306  EQU   *         x'04'
         SPACE 1
PPSA307  EQU   *         x'02'
         SPACE 1
PPSA308  EQU   *         x'01'
         SPACE 1
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTCVT   AS2LTRCE
         AS2RESTK PUSH
PCVT320  EQU   *         CVT
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE320L),LNE320T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT321  EQU   *         CVTPROD
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE321L),LNE321T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE321A,CVT_PNAME
         MVC   LNE321B,CVT_FMID
         CLI   CVT_UVID,C' '
         JNH   PCVT321A
         MVC   LNE321C,CVT_UVID
PCVT321A EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT322  EQU   *         CVTMDL,CVTRELNO
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE322L),LNE322T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE322A,CVT_CPU
         MVC   LNE322B,CVT_RR
         MVC   LNE322C,CVT_MM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT330  EQU   *         CVTDCB
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE330L),LNE330T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_DCBB0(L'CVT_DCBB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE330A,ZD02+8-L'LNE330A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT331  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE331L),LNE331T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE331A,CVT_370XA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT332  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE332L),LNE332T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE332A,CVT_PCP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT333  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE333L),LNE333T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE333A,CVT_MFT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT334  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE334L),LNE334T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE334A,CVT_MVT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT335  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE335L),LNE335T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE335A,CVT_FLG0
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT336  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE336L),LNE336T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE336A,CVT_M65MP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT337  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE337L),LNE337T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE337A,CVT_DAT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT338  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE338L),LNE338T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE338A,CVT_MVS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT339  EQU   *         x'12'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE339L),LNE339T
         MVC   LNEPGM,=CL8'&CSECT'
         MVI   LNE339A,C'N'
         TM    CVT_DCBB0,X'12'
         JNO   PCVT339A
         MVI   LNE339A,C'Y'
PCVT339A EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT340  EQU   *         CVTOPTA
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE340L),LNE340T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OPTAB0(L'CVT_OPTAB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE340A,ZD02+8-L'LNE340A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT341  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE341L),LNE341T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE341A,CVT_CCH
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT342  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE342L),LNE342T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE342A,CVT_APR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT343  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE343L),LNE343T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE343A,CVT_DDR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT344  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE344L),LNE344T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE344A,CVT_NIP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT345  EQU   *         x'08'
         SPACE 1
PCVT346  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE346L),LNE346T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE346A,CVT_NVEQR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT347  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE347L),LNE347T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE347A,CVT_ASCII
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT348  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE348L),LNE348T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE348A,CVT_XPFP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT350  EQU   *         CVTOPTB
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE350L),LNE350T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OPTBB0(L'CVT_OPTBB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE350A,ZD02+8-L'LNE350A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT351  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE351L),LNE351T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE351A,CVT_STGPROT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT352  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE352L),LNE352T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE352A,CVT_HWCCTF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT353  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE353L),LNE353T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE353A,CVT_TOD
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT354  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE354L),LNE354T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE354A,CVT_NLOG
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT355  EQU   *         x'08'
         SPACE 1
PCVT356  EQU   *         x'04
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE356L),LNE356T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE356A,CVT_FPROT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT357  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE357L),LNE357T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE357A,CVT_VS1A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT358  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE358L),LNE358T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE358A,CVT_VS1B
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
PCVT360  EQU   *         CVTFLAG1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE360L),LNE360T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG1B0(L'CVT_FLAG1B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE360A,ZD02+8-L'LNE360A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT361  EQU   *         x'80'
         SPACE 1
PCVT362  EQU   *         x'40'
         SPACE 1
PCVT363  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE363L),LNE363T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE363A,CVT_CUSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT364  EQU   *         x'10'
         SPACE 1
PCVT365  EQU   *         x'08'
         SPACE 1
PCVT366  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE366L),LNE366T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE366A,CVT_CSTR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT367  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE367L),LNE367T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE367A,CVT_SUBSP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT368  EQU   *         x'01'
         SPACE 1
PCVT370  EQU   *         CVTFLAG2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE370L),LNE370T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG2B0(L'CVT_FLAG2B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE370A,ZD02+8-L'LNE370A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT371  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE371L),LNE371T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE371A,CVT_CMPSC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT372  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE372L),LNE372T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE372A,CVT_CMPSCHW
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT373  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE373L),LNE373T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE373A,CVT_SOPF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT374  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE374L),LNE374T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE374A,CVT_BFP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT375  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE375L),LNE375T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE375A,CVT_PER2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT376  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE376L),LNE376T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE376A,CVT_IQDC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT377  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE377L),LNE377T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE377A,CVT_ASNLX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT378  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE378L),LNE378T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE378A,CVT_EDAT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT380  EQU   *         CVTFLAG3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE380L),LNE380T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG3B0(L'CVT_FLAG3B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE380A,ZD02+8-L'LNE380A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT381  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE381L),LNE381T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE381A,CVT_ZARCH
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT382  EQU   *         x'40'
         SPACE 1
PCVT383  EQU   *         x'20'
         SPACE 1
PCVT384  EQU   *         x'10'
         SPACE 1
PCVT385  EQU   *         x'08'
         SPACE 1
PCVT386  EQU   *         x'04'
         SPACE 1
PCVT387  EQU   *         x'02'
         SPACE 1
PCVT388  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE388L),LNE388T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE388A,CVT_GSF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT390  EQU   *         CVTFLAG4
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE390L),LNE390T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG4B0(L'CVT_FLAG4B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE390A,ZD02+8-L'LNE390A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT391  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE391L),LNE391T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE391A,CVT_P001I
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT392  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE392L),LNE392T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE392A,CVT_P001A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT393  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE393L),LNE393T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE393A,CVT_ZNALC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT394  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE394L),LNE394T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE394A,CVT_DCPUA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT395  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE395L),LNE395T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE395A,CVT_TX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT396  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE396L),LNE396T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE396A,CVT_TXC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT397  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE397L),LNE397T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE397A,CVT_RI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT398  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE398L),LNE398T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE398A,CVT_EDAT2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT400  EQU   *         CVTFLAG5
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE400L),LNE400T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG5B0(L'CVT_FLAG5B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE400A,ZD02+8-L'LNE400A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT401  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE401L),LNE401T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE401A,CVT_VEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT402  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE402L),LNE402T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE402A,CVT_EEC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT403  EQU   *         x'20'
         SPACE 1
PCVT404  EQU   *         x'10'
         SPACE 1
PCVT405  EQU   *         x'08'
         SPACE 1
PCVT406  EQU   *         x'04'
         SPACE 1
PCVT407  EQU   *         x'02'
         SPACE 1
PCVT408  EQU   *         x'01'
         SPACE 1
PCVT410  EQU   *         CVTFLAG6
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE410L),LNE410T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG6B0(L'CVT_FLAG6B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE410A,ZD02+8-L'LNE410A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT411  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE411L),LNE411T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE411A,CVT_SOLE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT412  EQU   *         x'40'
         SPACE 1
PCVT413  EQU   *         x'20'
         SPACE 1
PCVT414  EQU   *         x'10'
         SPACE 1
PCVT415  EQU   *         x'08'
         SPACE 1
PCVT416  EQU   *         x'04'
         SPACE 1
PCVT417  EQU   *         x'02'
         SPACE 1
PCVT418  EQU   *         x'01'
         SPACE 1
PCVT420  EQU   *         CVTFLAG7
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE420L),LNE420T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG7B0(L'CVT_FLAG7B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE420A,ZD02+8-L'LNE420A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT421  EQU   *         x'80'
         SPACE 1
PCVT422  EQU   *         x'40'
         SPACE 1
PCVT423  EQU   *         x'20'
         SPACE 1
PCVT424  EQU   *         x'10'
         SPACE 1
PCVT425  EQU   *         x'08'
         SPACE 1
PCVT426  EQU   *         x'04'
         SPACE 1
PCVT427  EQU   *         x'02'
         SPACE 1
PCVT428  EQU   *         x'01'
         SPACE 1
PCVT430  EQU   *         CVTFLAG8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE430L),LNE430T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_FLAG8B0(L'CVT_FLAG8B0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE430A,ZD02+8-L'LNE430A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT431  EQU   *         x'80'
         SPACE 1
PCVT432  EQU   *         x'40'
         SPACE 1
PCVT433  EQU   *         x'20'
         SPACE 1
PCVT434  EQU   *         x'10'
         SPACE 1
PCVT435  EQU   *         x'08'
         SPACE 1
PCVT436  EQU   *         x'04'
         SPACE 1
PCVT437  EQU   *         x'02'
         SPACE 1
PCVT438  EQU   *         x'01'
         SPACE 1
PCVT440  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE440L),LNE440T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE440A,CVT_GMTOFF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT450  EQU   *         CVTOSLVL byte-0
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE450L),LNE450T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB0(L'CVT_OSLVLB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE450A,ZD02+8-L'LNE450A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT451  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE451L),LNE451T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE451A,CVT_F0HBB3310
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT452  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE452L),LNE452T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE452A,CVT_F0HBB4420
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT453  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE453L),LNE453T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE453A,CVT_F0JBB3313
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT454  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE454L),LNE454T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE454A,CVT_F0JBB3311
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT455  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE455L),LNE455T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE455A,CVT_F0HBB4410
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT456  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE456L),LNE456T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE456A,CVT_F0DTASPC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT457  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE457L),LNE457T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE457A,CVT_F0CRPT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT458  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE458L),LNE458T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE458A,CVT_F0JBB4422
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT460  EQU   *         CVTOSLVL byte-1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE460L),LNE460T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB1(L'CVT_OSLVLB1+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE460A,ZD02+8-L'LNE460A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT461  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE461L),LNE461T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE461A,CVT_F1HBB4430
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT462  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE462L),LNE462T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE462A,CVT_F1WLM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT463  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE463L),LNE463T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE463A,CVT_F1HBB5510
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT464  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE464L),LNE464T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE464A,CVT_F1HBB5520
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT465  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE465L),LNE465T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE465A,CVT_F1JBB5522
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT466  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE466L),LNE466T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE466A,CVT_F1HBB6603
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT467  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE467L),LNE467T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE467A,CVT_F1HBB6601
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT468  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE468L),LNE468T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE468A,CVT_F1HBB6602
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT470  EQU   *         CVTOSLVL byte-2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE470L),LNE470T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB2(L'CVT_OSLVLB2+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE470A,ZD02+8-L'LNE470A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT471  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE471L),LNE471T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE471A,CVT_F2JBB6604
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT472  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE472L),LNE472T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE472A,CVT_F2HBB6605
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT473  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE473L),LNE473T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE473A,CVT_F2HBB6606
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT474  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE474L),LNE474T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE474A,CVT_F2BFP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT475  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE475L),LNE475T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE475A,CVT_F2JBB6607
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT476  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE476L),LNE476T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE476A,CVT_F2HBB6608
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT477  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE477L),LNE477T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE477A,CVT_F2JBB6609
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT478  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE478L),LNE478T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE478A,CVT_F2HBB7703
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT480  EQU   *         CVTOSLVL byte-3
         DROP  R8
         L     R8,WS_SSA3     point to Static Storage Area 3
         USING LNE480T,R8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE480L),LNE480T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB3(L'CVT_OSLVLB3+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE480A,ZD02+8-L'LNE480A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT481  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE481L),LNE481T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE481A,CVT_F3PAUSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT482  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE482L),LNE482T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE482A,CVT_F3PAUSE2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT483  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE483L),LNE483T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE483A,CVT_F3JBB7713
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT484  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE484L),LNE484T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE484A,CVT_F3HBB7705
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT485  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE485L),LNE485T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE485A,CVT_F3HBB7706
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT486  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE486L),LNE486T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE486A,CVT_F3HBB7707
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT487  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE487L),LNE487T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE487A,CVT_F3HBB7708
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT488  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE488L),LNE488T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE488A,CVT_F3HBB7709
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT490  EQU   *         CVTOSLVL byte-4
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE490L),LNE490T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB4(L'CVT_OSLVLB4+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE490A,ZD02+8-L'LNE490A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT491  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE491L),LNE491T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE491A,CVT_F4CSRSI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT492  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE492L),LNE492T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE492A,CVT_F4UNICODE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT493  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE493L),LNE493T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE493A,CVT_F4CSRUNIC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT494  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE494L),LNE494T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE494A,CVT_F4IBMLM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT495  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE495L),LNE495T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE495A,CVT_F4ASNLX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT496  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE496L),LNE496T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE496A,CVT_F4TOCP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT497  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE497L),LNE497T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE497A,CVT_F4ZIIP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT498  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE498L),LNE498T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE498A,CVT_F4IFA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT500  EQU   *         CVTOSLVL byte-5
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE500L),LNE500T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB5(L'CVT_OSLVLB5+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE500A,ZD02+8-L'LNE500A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT501  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE501L),LNE501T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE501A,CVT_F5ZOSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT502  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE502L),LNE502T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE502A,CVT_F5HBB7720
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT503  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE503L),LNE503T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE503A,CVT_F5HBB7730
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT504  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE504L),LNE504T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE504A,CVT_F5HBB7740
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT505  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE505L),LNE505T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE505A,CVT_F5HBB7750
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT506  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE506L),LNE506T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE506A,CVT_F5HBB7760
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT507  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE507L),LNE507T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE507A,CVT_F5HBB7770
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT508  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE508L),LNE508T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE508A,CVT_F5HBB7780
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT510  EQU   *         CVTOSLVL byte-6
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE510L),LNE510T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB6(L'CVT_OSLVLB6+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE510A,ZD02+8-L'LNE510A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
PCVT511  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE511L),LNE511T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE511A,CVT_F6HBB7790
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT512  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE512L),LNE512T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE512A,CVT_F6HBB77A0
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT513  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE513L),LNE513T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE513A,CVT_F6JBB778H
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT514  EQU   *         x'10'
         SPACE 1
PCVT515  EQU   *         x'08'
         SPACE 1
PCVT516  EQU   *         x'04'
         SPACE 1
PCVT517  EQU   *         x'02'
         SPACE 1
PCVT518  EQU   *         x'01'
         SPACE 1
         SPACE 1
PCVT520  EQU   *         CVTOSLVL byte-7
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE520L),LNE520T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB7(L'CVT_OSLVLB7+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE520A,ZD02+8-L'LNE520A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT530  EQU   *         CVTOSLVL byte-8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE530L),LNE530T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB8(L'CVT_OSLVLB8+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE530A,ZD02+8-L'LNE530A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT531  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE531L),LNE531T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE531A,CVT_F8PAUSE3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT532  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE532L),LNE532T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE532A,CVT_F8PAUSE4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT533  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE533L),LNE533T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE533A,CVT_F8ECT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT534  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE534L),LNE534T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE534A,CVT_F8TOCP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT535  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE535L),LNE535T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE535A,CVT_F8OPZ
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT536  EQU   *         x'04'
         SPACE 1
PCVT537  EQU   *         x'02'
         SPACE 1
PCVT538  EQU   *         x'01'
         SPACE 1
PCVT540  EQU   *         CVTOSLVL byte-9
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE540L),LNE540T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLB9(L'CVT_OSLVLB9+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE540A,ZD02+8-L'LNE540A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT550  EQU   *         CVTOSLVL byte-10
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE550L),LNE550T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLBA(L'CVT_OSLVLBA+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE550A,ZD02+8-L'LNE550A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT560  EQU   *         CVTOSLVL byte-11
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE560L),LNE560T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLBB(L'CVT_OSLVLBB+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE560A,ZD02+8-L'LNE560A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT570  EQU   *         CVTOSLVL byte-12
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE570L),LNE570T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLBC(L'CVT_OSLVLBC+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE570A,ZD02+8-L'LNE570A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT580  EQU   *         CVTOSLVL byte-13
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE580L),LNE580T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLBD(L'CVT_OSLVLBD+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE580A,ZD02+8-L'LNE580A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT590  EQU   *         CVTOSLVL byte-14
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE590L),LNE590T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLBE(L'CVT_OSLVLBE+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE590A,ZD02+8-L'LNE590A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCVT600  EQU   *         CVTOSLVL byte-15
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE600L),LNE600T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CVT_OSLVLBF(L'CVT_OSLVLBF+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE600A,ZD02+8-L'LNE600A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTECVT  AS2LTRCE
         AS2RESTK PUSH
PECVT620 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE620L),LNE620T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PECVT621 EQU   *         ECVTSPLX,ECVTCLON,ECVTHDNM,ECVTLPNM,ECVTNMNM
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE621L),LNE621T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE621A,ECVT_SYSPLEX
         MVC   LNE621B,ECVT_CLONE
         MVC   LNE621C,ECVT_HWNAME
         MVC   LNE621D,ECVT_LPAR
         CLI   ECVT_VMID,C' '
         JE    PECVT621A
         MVC   LNE621E,ECVT_VMID
PECVT621A EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PECVT622 EQU   *         ECVTPIDN,ECVTPSEQ,ECVTPOWN
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE622L),LNE622T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE622A,ECVT_PID
         MVC   LNE622B,ECVT_PRODNBR
         MVC   LNE622C,ECVT_PRODOWN
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PECVT623 EQU   *         ECVTPNAM,ECVTPVER,ECVTPREL,ECVTPMOD
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE623L),LNE623T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE623A,ECVT_PRODNME
         MVC   LNE623B,ECVT_PRODVER
         MVC   LNE623C,ECVT_PRODREL
         MVC   LNE623D,ECVT_PRODMOD
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PECVT624 EQU   *         ECVTCACHELINESIZE,ECVTGMOD
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE624L),LNE624T
         MVC   LNEPGM,=CL8'&CSECT'
         LH    R1,ECVT_CACHESZ
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE624A,ZD01+L'ZD01-L'LNE624A
         LH    R1,ECVT_GRSMODE
         MVC   LNE624B,=C'RING'
         CHI   R1,1
         JE    PECVT624A
         MVC   LNE624B,=C'STAR'
         CHI   R1,2
         JE    PECVT624A
         MVC   LNE624B,=C'none'
PECVT624A EQU   *        ECVTOCVT,ECVTOMVS
         MVC   LNE624C,ECVT_OMVS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTASCB  AS2LTRCE
         AS2RESTK PUSH
PASCB630 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE630L),LNE630T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PASCB631 EQU   *         ASCBWQID,ASCBASID,ASCBDPH,ASCBLEVL
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE631L),LNE631T
         MVC   LNEPGM,=CL8'&CSECT'
         LH    R1,ASCB_LCPUID
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE631A,ZD01+L'ZD01-L'LNE631A
         LH    R1,ASCB_ASID
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE631B,ZD01+L'ZD01-L'LNE631B
         LH    R1,ASCB_DPRI
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE631C,ZD01+L'ZD01-L'LNE631C
         LH    R1,ASCB_LEVEL
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE631D,ZD01+L'ZD01-L'LNE631D
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PASCB632 EQU   *         ASXBUSER
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE632L),LNE632T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE632A,ASXB_USERID
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTACEE  AS2LTRCE
         AS2RESTK PUSH
PACEE640 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE640L),LNE640T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PACEE641 EQU   *         ACEEUSER,ACEEUSRI
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE641L),LNE641T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE641A,ACEE_USERID
         MVC   LNE641B,ACEE_USERNAME
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PACEE642 EQU   *         ACEEGRPN,ACEEAPLN
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE642L),LNE642T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE642A,ACEE_GROUP
         CLI   ACEE_APPLNM,C' '
         JNH   PACEE642A
         MVC   LNE642B,ACEE_APPLNM
PACEE642A EQU   *        ACEETRID
         CLI   ACEE_TERMID,C' '
         JNH   PACEE642B
         MVC   LNE642C,ACEE_TERMID
PACEE642B EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTJES   AS2LTRCE
         AS2RESTK PUSH
PJES650  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE650L),LNE650T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PJES651  EQU   *         JSABJBID,JSABJBNM,JSABUSID
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE651L),LNE651T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE651A,JSAB_JSABJBID
         MVC   LNE651B,JSAB_JSABJBNM
         MVC   LNE651C,JSAB_JSABUSID
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PJES652  EQU   *         JSABSCID,JSABSSNM
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE652L),LNE652T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE652A,JSAB_JSABSCID
         MVC   LNE652B,JSAB_JSABSSNM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PJES653  EQU   *         JSABESTK
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE653L),LNE653T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE653A,JSAB_NTRYTIMESTAMP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PJES654  EQU   *         JSABXSTK
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE654L),LNE654T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE654A,JSAB_EXECTIMESTAMP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTDFA   AS2LTRCE
         AS2RESTK PUSH
PDFA660  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE660L),LNE660T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA661  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE661L),LNE661T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R1,8,DFA_RELS
         SRL   R1,24
         CHI   R1,3                Q. >3
         JNH   PDFA661A            A. no, bypass
         LHI   R1,4                default to 4
PDFA661A EQU   *
         SLL   R1,3                multi by 8
         LA    R2,DFAOS(R1)
         MVC   LNE661A,0(R2)       copy in product/OS text
         MVC   LNE661B,DFA_PVER
         MVC   LNE661C,DFA_PREL
         MVC   LNE661D,DFA_PMOD
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA662  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE662L),LNE662T
         MVC   LNEPGM,=CL8'&CSECT'
         LH    R0,DFA_CMPTYPE compression type
         MVI   LNE662A,C'0'
         MVC   LNE662B,=CL13'generic'
         CHI   R0,0
         JE    PDFA662A
         MVI   LNE662A,C'1'
         MVC   LNE662B,=CL13'tailored'
         CHI   R0,1
         JE    PDFA662A
         MVI   LNE662A,C'2'
         MVC   LNE662B,=CL13'zEDC required'
         CHI   R0,2
         JE    PDFA662A
         MVI   LNE662A,C'3'
         MVC   LNE662B,=CL13'zEDC prefered'
         CHI   R0,3
         JE    PDFA662A
         MVI   LNE662A,C'?'
         MVC   LNE662B,=CL13'unknown'
PDFA662A EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA663  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE663L),LNE663T
         MVC   LNEPGM,=CL8'&CSECT'
         L     R0,DFA_PDSEMAXGEN   PDSE maximum generations
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE663A,ZD01+L'ZD01-L'LNE663A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA670  EQU   *         DFA feature byte-0
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE670L),LNE670T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB0(L'DFA_FB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE670A,ZD02+8-L'LNE670A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA671  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE671L),LNE671T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE671A,DFA_F0XA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA672  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE672L),LNE672T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE672A,DFA_F0LSR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA673  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE673L),LNE673T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE673A,DFA_F0EOS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA674  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE674L),LNE674T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE674A,DFA_F0XRF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA675  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE675L),LNE675T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE675A,DFA_F0EXP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA676  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE676L),LNE676T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE676A,DFA_F0EOS1
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA677  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE677L),LNE677T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE677A,DFA_F0SMS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA678  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE678L),LNE678T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE678A,DFA_F0PDSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA680  EQU   *         DFA feature byte-1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE680L),LNE680T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB1(L'DFA_FB1+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE680A,ZD02+8-L'LNE680A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA681  EQU   *         x'80'
         SPACE 1
PDFA682  EQU   *         x'40'
         SPACE 1
PDFA683  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE683L),LNE683T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE683A,DFA_F1FMS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA684  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE684L),LNE684T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE684A,DFA_F1CMPAC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA685  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE685L),LNE685T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE685A,DFA_F1BCPPB
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA686  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE686L),LNE686T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE686A,DFA_F1SSF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA687  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE687L),LNE687T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE687A,DFA_F1MMS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA688  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE688L),LNE688T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE688A,DFA_F1INDEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA690  EQU   *         DFA feature byte-2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE690L),LNE690T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB2(L'DFA_FB2+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE690A,ZD02+8-L'LNE690A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA691  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE691L),LNE691T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE691A,DFA_F2VSEX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA692  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE692L),LNE692T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE692A,DFA_F2SAMEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA693  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE693L),LNE693T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE693A,DFA_F2KSDSEF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA694  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE694L),LNE694T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE694A,DFA_F2CMPCT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA695  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE695L),LNE695T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE695A,DFA_F2RLSI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA696  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE696L),LNE696T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE696A,DFA_F2RECALL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA697  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE697L),LNE697T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE697A,DFA_F2DSERV
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA698  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE698L),LNE698T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE698A,DFA_F2DLL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA700  EQU   *         DFA feature byte-3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE700L),LNE700T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB3(L'DFA_FB3+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE700A,ZD02+8-L'LNE700A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA701  EQU   *         x'80'
         SPACE 1
PDFA702  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE702L),LNE702T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE702A,DFA_F3NIPSVC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA703  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE703L),LNE703T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE703A,DFA_F3CIR2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA704  EQU   *         x'10'
         DROP  R8
         L     R8,WS_SSA4     point to Static Storage Area 4
         USING LNE704T,R8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE704L),LNE704T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE704A,DFA_F3RTLS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA705  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE705L),LNE705T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE705A,DFA_F3DYLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA706  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE706L),LNE706T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE706A,DFA_F3FORK
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA707  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE707L),LNE707T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE707A,DFA_F3SSSW
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA708  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE708L),LNE708T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE708A,DFA_F3SSAPI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA710  EQU   *         DFA feature byte-4
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE710L),LNE710T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB4(L'DFA_FB4+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE710A,ZD02+8-L'LNE710A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA711  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE711L),LNE711T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE711A,DFA_F4UMPDSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA712  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE712L),LNE712T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE712A,DFA_F4BTOKSZ
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA713  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE713L),LNE713T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE713A,DFA_F4BLDL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA714  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE714L),LNE714T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE714A,DFA_F4EAV
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA715  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE715L),LNE715T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE715A,DFA_F4SAMHPF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA716  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE716L),LNE716T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE716A,DFA_F4PIPES
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA717  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE717L),LNE717T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE717A,DFA_F4ANSI4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA718  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE718L),LNE718T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE718A,DFA_F4ANSIF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA720  EQU   *         DFA feature byte-5
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE720L),LNE720T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB5(L'DFA_FB5+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE720A,ZD02+8-L'LNE720A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA721  EQU   *         x'80'
         SPACE 1
PDFA722  EQU   *         x'40' COPYSDB=LARGE
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE722L),LNE722T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE722A,DFA_F5SDBL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA723A EQU   *         x'30' COPYSDB=INPUT
         TM    DFA_FB5,X'30'
         JNO   PDFA723
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE723AL),LNE723AT
         MVC   LNEPGM,=CL8'&CSECT'
         MVI   LNE723AA,C'Y'       A. yes, COPYSDB=INPUT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         J     PDFA725
         SPACE 1
PDFA723  EQU   *         x'20' COPYSDB=SMALL|YES
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE723L),LNE723T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE723A,DFA_F5SDBY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA724  EQU   *         x'10' COPYSDB=NO
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE724L),LNE724T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE724A,DFA_F5SDBN
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA725  EQU   *         x'08' DATACLAS media enforced TAPE
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE725L),LNE725T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE725A,DFA_F5DSMT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA726  EQU   *         x'04' DATACLAS media enforced JAG
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE726L),LNE726T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE726A,DFA_F5DSMJ
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA727  EQU   *         x'02' accept all media types for MTL
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE727L),LNE727T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE727A,DFA_F5AMMTL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA728  EQU   *         x'01' STIFF
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE728L),LNE728T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE728A,DFA_F5STIFF
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA730  EQU   *         DFA feature byte-6
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE730L),LNE730T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB6(L'DFA_FB6+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE730A,ZD02+8-L'LNE730A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA731  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE731L),LNE731T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE731A,DFA_F6TADSN
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA732  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE732L),LNE732T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE732A,DFA_F6TAF1
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA733  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE733L),LNE733T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE733A,DFA_F6TARC8
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA734  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE734L),LNE734T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE734A,DFA_F6TARC4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA735  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE735L),LNE735T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE735A,DFA_F6XIOT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA736  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE736L),LNE736T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE736A,DFA_F6TMVE1
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA737  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE737L),LNE737T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE737A,DFA_F6TMVE2
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA738  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE738L),LNE738T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE738A,DFA_F6GT253
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA740  EQU   *         DFA feature byte-7
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE740L),LNE740T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB7(L'DFA_FB7+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE740A,ZD02+8-L'LNE740A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA741  EQU   *         x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE741L),LNE741T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE741A,DFA_F7VSAMEAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA742  EQU   *         x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE742L),LNE742T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE742A,DFA_F7SAMEAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA743  EQU   *         x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE743L),LNE743T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE743A,DFA_F7PDSEEAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA744  EQU   *         x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE744L),LNE744T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE744A,DFA_F7PDSEAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA745  EQU   *         x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE745L),LNE745T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE745A,DFA_F7BDAMEAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA746  EQU   *         x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE746L),LNE746T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE746A,DFA_F7EFSEQEAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA747  EQU   *         x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE747L),LNE747T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE747A,DFA_F7UNDEAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA748  EQU   *         x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE748L),LNE748T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE748A,DFA_F7EXMSG
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA750  EQU   *         DFA feature byte-8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE750L),LNE750T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB8(L'DFA_FB8+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE750A,ZD02+8-L'LNE750A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA751  EQU   *         JES3_ALLOC_ASSIST enabled x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE751L),LNE751T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE751A,DFA_F8J3AA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA752  EQU   *         mbr sel User Exit support x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE752L),LNE752T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE752A,DFA_F8MBRUX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA753  EQU   *         PDSE generation support x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE753L),LNE753T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE753A,DFA_F8PDSEG
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA754  EQU   *         zEDC Compression support x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE754L),LNE754T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE754A,DFA_F8ZEDC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA755  EQU   *         DADSM extend secondary-space reduction x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE755L),LNE755T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE755A,DFA_F8XSSR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA756  EQU   *         DSS full volume dump & rest x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE756L),LNE756T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE756A,DFA_F8SYSZADRV
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA757  EQU   *         DCBE Bypass Auth support x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE757L),LNE757T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE757A,DFA_F8BYPAUTH
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA758  EQU   *         DFSMS support for DS encryption x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE758L),LNE758T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE758A,DFA_F8ENCRYPT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA760  EQU   *         DFA feature byte-9
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE760L),LNE760T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FB9(L'DFA_FB9+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE760A,ZD02+8-L'LNE760A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA761  EQU   *         READ-ONLY secondary support x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE761L),LNE761T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE761A,DFA_F9ROSEC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA762  EQU   *         DSSB above-the-bar x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE762L),LNE762T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE762A,DFA_F9DSSBATB
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA763  EQU   *         DEVTYPE XTIOT support x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE763L),LNE763T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE763A,DFA_F9XTIOT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA764  EQU   *         x'10'
         SPACE 1
PDFA765  EQU   *         x'08'
         SPACE 1
PDFA766  EQU   *         x'04'
         SPACE 1
PDFA767  EQU   *         x'02'
         SPACE 1
PDFA768  EQU   *         x'01'
         SPACE 1
PDFA780  EQU   *         DFA HPF byte-1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE780L),LNE780T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FCB1(L'DFA_FCB1+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE780A,ZD02+8-L'LNE780A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA781  EQU   *         x'80'
         SPACE 1
PDFA782  EQU   *         x'40'
         SPACE 1
PDFA783  EQU   *         x'20'
         SPACE 1
PDFA784  EQU   *         x'10'
         SPACE 1
PDFA785  EQU   *         transfer TCA extension x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE785L),LNE785T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE785A,DFA_FC1TTCAE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA786  EQU   *         HPF phase 1 x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE786L),LNE786T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE786A,DFA_FC1PH1
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA787  EQU   *         imbedded LR list x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE787L),LNE787T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE787A,DFA_FC1IMBLR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA788  EQU   *         format update Writes x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE788L),LNE788T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE788A,DFA_FC1FUPDW
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA790  EQU   *         DFA HPF byte-2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE790L),LNE790T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FCB2(L'DFA_FCB2+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE790A,ZD02+8-L'LNE790A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA791  EQU   *         format Write enable x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE791L),LNE791T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE791A,DFA_FC2FWRE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA792  EQU   *         x'40'
         SPACE 1
PDFA793  EQU   *         x'20'
         SPACE 1
PDFA794  EQU   *         x'10'
         SPACE 1
PDFA795  EQU   *         x'08'
         SPACE 1
PDFA796  EQU   *         x'04'
         SPACE 1
PDFA797  EQU   *         x'02'
         SPACE 1
PDFA798  EQU   *         x'01'
         SPACE 1
PDFA800  EQU   *         DFA HPF byte-3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE800L),LNE800T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FCB3(L'DFA_FCB3+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE800A,ZD02+8-L'LNE800A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PDFA810  EQU   *         DFA HPF byte-4
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE810L),LNE810T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),DFA_FCB4(L'DFA_FCB4+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE810A,ZD02+8-L'LNE810A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTTIOT  AS2LTRCE
         AS2RESTK PUSH
PTIOT830 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE830L),LNE830T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PTIOT831 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE831L),LNE831T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE831A,TIOT_JOBNAME
         CLI   TIOT_JOBSTEP,C' '
         JNH   PTIOT831A
         MVC   LNE831B,TIOT_JOBSTEP
PTIOT831A EQU   *
         CLI   TIOT_PROCSTEP,C' '
         JNH   PTIOT831B
         MVC   LNE831C,TIOT_PROCSTEP
PTIOT831B EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PTIOT832 EQU   *
         ICM   R3,12,TIOT_DDNCNT   Q. any DDname(s)
         JZ    PRTTIOTZ            A. no, bypass
         SRL   R3,16
         LA    R2,TIOTE_DDNTRY
         USING TIOTE_DDNTRY,R2
PTIOT832A EQU  *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE832L),LNE832T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE832A,TIOTE_DDNAME
         LH    R1,TIOTE_DSNCNT
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE832B,ZD01+L'ZD01-L'LNE832B
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    R2,L'TIOTE_DDNTRY(,R2)
         BRCT  R3,PTIOT832A
         DROP  R2
         SPACE 1
PRTTIOTZ EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTLE    AS2LTRCE
         AS2RESTK PUSH
PLE840   EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE840L),LNE840T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE841   EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE841L),LNE841T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE841A,LE_PPROD
         MVC   LNE841B,LE_PVER
         MVC   LNE841C,LE_PREL
         MVC   LNE841D,LE_PMOD
         LARL  RE,PRTLE900    set default return
         LH    R1,LE_LEVEL
         CHI   R1,5           Q. value >= min
         JL    TXT0108J       A. no, error
         AHI   R1,-5
         CHI   R1,LELEVEL_NTRY_CNT Q. value > max
         JH    TXT0108J            A. yes, error
         SLL   R1,4
         LA    R1,LELEVEL(R1)
         MVC   LNE841E,0(R1)  copy in LE level text
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE842   EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE842L),LNE842T
         MVC   LNEPGM,=CL8'&CSECT'
         L     R1,ARCH
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE842A,ZD01+L'ZD01-L'LNE842A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE850   EQU   *         LESYSSUB byte-0
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE850L),LNE850T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_SYSB0(L'LE_SYSB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE850A,ZD02+8-L'LNE850A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE851   EQU   *         CICS x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE851L),LNE851T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE851A,LE_S0CICS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE852   EQU   *         CICS_PIPI x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE852L),LNE852T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE852A,LE_S0PIPI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE853   EQU   *         x'20'
         SPACE 1
PLE854   EQU   *         x'10'
         SPACE 1
PLE855   EQU   *         TSO x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE855L),LNE855T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE855A,LE_S0TSO
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE856   EQU   *         batch x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE856L),LNE856T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE856A,LE_S0BTH
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE857   EQU   *         z/OS UNIX x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE857L),LNE857T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE857A,LE_S0UNIX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE858   EQU   *         x'01'
         SPACE 1
PLE860   EQU   *         LESYSSUB byte-1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE860L),LNE860T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_SYSB1(L'LE_SYSB1+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE860A,ZD02+8-L'LNE860A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE861   EQU   *         x'80'
         SPACE 1
PLE862   EQU   *         x'40'
         SPACE 1
PLE863   EQU   *         x'20'
         SPACE 1
PLE864   EQU   *         x'10'
         SPACE 1
PLE865   EQU   *         x'08'
         SPACE 1
PLE866   EQU   *         x'04'
         SPACE 1
PLE867   EQU   *         x'02'
         SPACE 1
PLE868   EQU   *         x'01'
         SPACE 1
PLE870   EQU   *         LESYSSUB byte-2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE870L),LNE870T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_SYSB2(L'LE_SYSB2+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE870A,ZD02+8-L'LNE870A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE871   EQU   *         x'80'
         SPACE 1
PLE872   EQU   *         x'40'
         SPACE 1
PLE873   EQU   *         x'20'
         SPACE 1
PLE874   EQU   *         x'10'
         SPACE 1
PLE875   EQU   *         x'08'
         SPACE 1
PLE876   EQU   *         x'04'
         SPACE 1
PLE877   EQU   *         x'02'
         SPACE 1
PLE878   EQU   *         x'01'
         SPACE 1
PLE880   EQU   *         LESYSSUB byte-3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE880L),LNE880T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_SYSB3(L'LE_SYSB3+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE880A,ZD02+8-L'LNE880A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE881   EQU   *         x'80'
         SPACE 1
PLE882   EQU   *         x'40'
         SPACE 1
PLE883   EQU   *         x'20'
         SPACE 1
PLE884   EQU   *         x'10'
         SPACE 1
PLE885   EQU   *         x'08'
         SPACE 1
PLE886   EQU   *         z/VSE x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE886L),LNE886T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE886A,LE_S3VSE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE887   EQU   *         z/OS x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE887L),LNE887T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE887A,LE_S3ZOS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE888   EQU   *         x'01'
         SPACE 1
PLE890   EQU   *         LEENVINF byte-0
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE890L),LNE890T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_ENVB0(L'LE_ENVB0+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE890A,ZD02+8-L'LNE890A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE891   EQU   *         PIPI pre-init pgm interface x'80
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE891L),LNE891T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE891A,LE_E0PIPI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE892   EQU   *         PIPI-MAIN x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE892L),LNE892T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE892A,LE_E0MAIN
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE893   EQU   *         PIPI-SUB x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE893L),LNE893T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE893A,LE_E0SUB
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE894   EQU   *         PIPI-SUBDP x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE894L),LNE894T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE894A,LE_E0SUBDP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE895   EQU   *         PICI pre-init compat interface x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE895L),LNE895T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE895A,LE_E0PICI
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE896   EQU   *         nested enclave x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE896L),LNE896T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE896A,LE_E0NENC
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE897   EQU   *         LRR lib routine retention x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE897L),LNE897T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE897A,LE_E0LRR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE898   EQU   *         runtime reuse x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE898L),LNE898T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE898A,LE_E0RTR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE900   EQU   *         LEENVINF byte-1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE900L),LNE900T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_ENVB1(L'LE_ENVB1+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE900A,ZD02+8-L'LNE900A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE901   EQU   *         XPLINK x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE901L),LNE901T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE901A,LE_E1XPLK
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE902   EQU   *         POSIX x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE902L),LNE902T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE902A,LE_E1POSIX
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE903   EQU   *         1 or more PTHREAD x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE903L),LNE903T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE903A,LE_E1PTHR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE904   EQU   *         IPT initial process thread x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE904L),LNE904T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE904A,LE_E1IPT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE905   EQU   *         multi-threaded fork x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE905L),LNE905T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE905A,LE_E1MTHR
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE906   EQU   *         AMODE 31 x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE906L),LNE906T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE906A,LE_E1A31
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE907   EQU   *         x'02'
         DROP  R8
         L     R8,WS_SSA5     point to Static Storage Area 5
         USING LNE907T,R8
         SPACE 1
PLE908   EQU   *         PIPI-MAINDP x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE908L),LNE908T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE908A,LE_E1MAINDP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE910   EQU   *         LEENVINF byte-2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE910L),LNE910T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_ENVB2(L'LE_ENVB2+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE910A,ZD02+8-L'LNE910A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE911   EQU   *         x'80'
         SPACE 1
PLE912   EQU   *         x'40'
         SPACE 1
PLE913   EQU   *         x'20'
         SPACE 1
PLE914   EQU   *         x'10'
         SPACE 1
PLE915   EQU   *         x'08'
         SPACE 1
PLE916   EQU   *         x'04'
         SPACE 1
PLE917   EQU   *         x'02'
         SPACE 1
PLE918   EQU   *         x'01'
         SPACE 1
PLE920   EQU   *         LEENVINF byte-3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE920L),LNE920T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),LE_ENVB3(L'LE_ENVB3+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE920A,ZD02+8-L'LNE920A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE921   EQU   *         x'80'
         SPACE 1
PLE922   EQU   *         x'40'
         SPACE 1
PLE923   EQU   *         x'20'
         SPACE 1
PLE924   EQU   *         x'10'
         SPACE 1
PLE925   EQU   *         x'08'
         SPACE 1
PLE926   EQU   *         x'04'
         SPACE 1
PLE927   EQU   *         x'02'
         SPACE 1
PLE928   EQU   *         x'01'
         SPACE 1
PLE940   EQU   *         LE run time options
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE940L),LNE940T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE941   EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE941L),LNE941T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R1,12,LE_OCBVER
         SRL   R1,16
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE941A,ZD01+L'ZD01-L'LNE941A
         MVC   LNE941B,LE_OCBVTXT
         MVC   LNE941C,LE_FMT64
         MVC   LNE941D,LE_IBM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE942   EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE942L),LNE942T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE942A,LE_AIXON
         MVC   LNE942B,LE_A31ON
         MVC   LNE942C,LE_CBLON
         MVC   LNE942D,LE_QDAON
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE943   EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE943L),LNE943T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE943A,LE_CHKON
         MVC   LNE943B,LE_DBGON
         MVC   LNE943C,LE_HEAPBELOW
         MVC   LNE943D,LE_HEAPFREE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PLE944   EQU   *
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE944L),LNE944T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE944A,LE_STACKBELOW
         MVC   LNE944B,LE_STACKFREE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PRTLE900 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTCSV   AS2LTRCE
         AS2RESTK PUSH
PCSV960  EQU   *
         CLI   CSV_PGM,C' '   Q. any program selected
         JE    PRTCSV900      A. no, bypass
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE960L),LNE960T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV961  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE961L),LNE961T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE961A,CSV_PGM
         MVC   LNE961B,CSV_LOADER
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV962  EQU   *
         XC    CSV_PDATA,CSV_PDATA Q. any data
         JNH   PCSV970             A. no, bypass
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE962L),LNE962T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE962A,CSV_PDATA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV970  EQU   *         WS_CSV_ATTR1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE970L),LNE970T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CSV_ATTRB1(L'CSV_ATTRB1+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE970A,ZD02+8-L'LNE970A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV971  EQU   *         end-of-memory deletion x'80'
         SPACE 1
PCSV972  EQU   *         loaded-to-global x'40'
         SPACE 1
PCSV973  EQU   *         RENT x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE973L),LNE973T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE973A,CSV_A1RENT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV974  EQU   *         REUS x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE974L),LNE974T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE974A,CSV_A1REUS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV975  EQU   *         not loadable only x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE975L),LNE975T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE975A,CSV_A1NLONLY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV976  EQU   *         overlay format x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE976L),LNE976T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE976A,CSV_A1OVRLAY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV977  EQU   *         alias x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE977L),LNE977T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE977A,CSV_A1ALIAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV978  EQU   *         x'01'
         SPACE 1
PCSV980  EQU   *         WS_CSV_ATTR2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE980L),LNE980T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CSV_ATTRB2(L'CSV_ATTRB2+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE980A,ZD02+8-L'LNE980A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV981  EQU   *         authorized library x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE981L),LNE981T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE981A,CSV_A2ALIB
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV982  EQU   *         authorized program x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE982L),LNE982T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE982A,CSV_A2APGM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV983  EQU   *         AMODE ANY x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE983L),LNE983T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE983A,CSV_A2AANY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV984  EQU   *         AMODE 31 x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE984L),LNE984T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE984A,CSV_A2A31
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV985  EQU   *         x'08'
         SPACE 1
PCSV986  EQU   *         dynamic LPA module x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE986L),LNE986T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE986A,CSV_A2DLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV987  EQU   *         page protected x'02'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE987L),LNE987T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE987A,CSV_A2PGPROT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV988  EQU   *         AMODE 64 x'01'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE988L),LNE988T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE988A,CSV_A2A64
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV990  EQU   *         WS_CSV_ATTR3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE990L),LNE990T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD02(9),CSV_ATTRB3(L'CSV_ATTRB3+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   LNE990A,ZD02+8-L'LNE990A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV991  EQU   *         resident above-the-line x'80'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE991L),LNE991T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE991A,CSV_A3RATL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV992  EQU   *         resident JPA x'40'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE992L),LNE992T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE992A,CSV_A3RJPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV993  EQU   *         resident PLPA x'20'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE993L),LNE993T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE993A,CSV_A3RPLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV994  EQU   *         resident MLPA x'10'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE994L),LNE994T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE994A,CSV_A3RMLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV995  EQU   *         resident FLPA x'08'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE995L),LNE995T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE995A,CSV_A3RFLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV996  EQU   *         resident CSA x'04'
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE996L),LNE996T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE996A,CSV_A3RCSA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
PCSV997  EQU   *         x'02'
         SPACE 1
PCSV998  EQU   *         x'01'
         SPACE 1
PRTCSV900 EQU   *
         DROP   R8
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0101A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ACTION (VARIABLE 4)
         L     R1,PGMPARM2
         L     R1,0(,R1)
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0101E
         SPACE 1
MSG0101E EQU   *              ACTION IS INVALID
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU035_0002
**       J     MSG0101
         SPACE 1
MSG0101  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0102A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'1:5'
**       J     MSG0102I
         SPACE 1
MSG0102I EQU   *    VALID ACTIONS ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU036
**       J     MSG0102
         SPACE 1
MSG0102  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         J     ERTN0800
         SPACE 2
TXT0103A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ACTION (VARIABLE 4)
         L     R1,PGMPARM2
         L     R1,0(,R1)
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0103E
         SPACE 1
MSG0103E EQU   *    ACTION IS NOT SUPPORTED
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU037_0002
**       J     MSG0103
         SPACE 1
MSG0103  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0104A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'2,5'
**       J     MSG0104I
         SPACE 1
MSG0104I EQU   *    SUPPORTED ACTIONS ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU038
**       J     MSG0104
         SPACE 1
MSG0104  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0105A AS2LTRCE
         AS2RESTK PUSH
*        INSERT NUMBER STRING (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((5-1)*L'ISICOL)(10),=CL10'3-ENV_INFO'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *              ARGUMENT IS INVALID
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0106A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'> 0'
**       J     MSG0106I
         SPACE 1
MSG0106I EQU   *              VALID ARGUMENT VALUES ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03A
**       J     MSG0106
         SPACE 1
MSG0106  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0107A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'STCKCONV'
         J     MSG0107E
         SPACE 1
TXT0107B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CSVQUERY'
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03B_0002
         J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     ERTN0800
         SPACE 2
TXT0108A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'CVTCVT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),=CL8'NOT=bCVT'
         J     MSG0108E
         SPACE 1
TXT0108B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'ASCBASCB'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),=CL8'NOT=ASCB'
         J     MSG0108E
         SPACE 1
TXT0108C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'ASXBASXB'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),=CL8'NOT=ASXB'
         J     MSG0108E
         SPACE 1
TXT0108D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'ACEEACEE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),=CL8'NOT=ACEE'
         J     MSG0108E
         SPACE 1
TXT0108E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'DFAACRON'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),=CL8'NOT=DFA '
         J     MSG0108E
         SPACE 1
TXT0108F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'CEEEDBEYE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((7-1)*L'ISICOL)(10),=CL10'NOT=CEEEDB'
         J     MSG0108E
         SPACE 1
TXT0108G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H17
         MVC   ISITXT+((3-1)*L'ISICOL)(17),=CL17'CEEOCB_EYECATCHER'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((7-1)*L'ISICOL)(10),=CL10'NOT=CEEOCB'
         J     MSG0108E
         SPACE 1
TXT0108H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'LE_OCBVER'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((7-1)*L'ISICOL)(12),=CL12'NOT >=16<=25'
         J     MSG0108E
         SPACE 1
TXT0108I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'LE_TTALVL'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((7-1)*L'ISICOL)(9),=CL9'NOT >0<=8'
         J     MSG0108E
TXT0108J AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'LE_LEVEL'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((7-1)*L'ISICOL)(11),=CL11'NOT >=5<=28'
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *    WAS PASSED TOO MANY ARGUMENTS
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *    WAS PASSED TOO FEW ARGUMENTS
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'> DD#'
         USING TIOTE_DDNTRY,R7     est addr to DD entry
         MVC   TIOT_DDNCNT,=Y(DD#) override
         DROP  R7
**       J     MSG0115W
MSG0115W EQU   *              NUMERIC DATA IS OUT OF RANGE
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0001
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TIOT_DDNCNT'
         J     ERTN0800
         SPACE 2
TXT0118A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'IAZXJSAB'
*        INSERT ACTION (VARIABLE 4)
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((4-1)*L'ISICOL)(4),=CL4'READ'
**       J     MSG0118E
         SPACE 1
MSG0118E EQU   *    ACTION FAILED WITH R15=nn REASON=nn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03C_0002
**       J     MSG0118
         SPACE 1
MSG0118  EQU   *
*        INSERT COMPONENT (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
         DS    0D
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
@CEECMI  DC    V(CEECMI)           LE MODULE TO PROVIDE ISI
@CEEINF  DC    V(CEE3INF)          LE MODULE TO RETRIEVE ENV INFO
@CEEMOUT DC    V(CEEMOUT)          LE MODULE TO ISSUE MESSAGE
@CEESGL  DC    V(CEESGL)           LE MODULE TO SIGNAL CONDITION
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
F9       DC    F'9'
F10      DC    F'10'
F11      DC    F'11'
F12      DC    F'12'
         SPACE 1
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H17      DC    H'17'
         SPACE 2
         DS    0D
***      AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 2
         DS    0D
DFAOS    EQU   *              DFA product/OS system lookup
         DC    CL08'0-DFP'
DFAOS_NTRY_LEN EQU   *-DFAOS
         DC    CL08'1-DFSMS'
         DC    CL08'2-OS/390'
         DC    CL08'3-z/OS'
         DC    CL08'   n/a'
DFAOS_NTRY_CNT EQU   (*-DFAOS)/DFAOS_NTRY_LEN
         SPACE 2
         DS    0D
LELEVEL  EQU   *              LE release level (CEECAALEVEL)
         DC    CL16'OS/390 LE V1R5'          ..05
LELEVEL_NTRY_LEN EQU   *-LELEVEL
         DC    CL16'OS/390 LE V1R6'          ..06
         DC    CL16'OS/390 LE V1R7'          ..07
         DC    CL16'0S/390 LE V1R8'          ..08
         DC    CL16'OS/390 LE V1R9'          ..09
         DC    CL16'OS/390 LE V2R7'          ..10 matches OS
         DC    CL16'OS/390 LE V2R8'          ..11
         DC    CL16'OS/390 LE V2R9'          ..12
         DC    CL16'OS/390 LE V2R10'         ..13
         DC    CL16'z/OS LE V1R2'            ..14
         DC    CL16'z/OS LE V1R3'            ..15
         DC    CL16'z/OS LE V1R4'            ..16
         DC    CL16'z/OS LE V1R5'            ..17
         DC    CL16'z/OS LE V1R6'            ..18
         DC    CL16'z/OS LE V1R7'            ..19
         DC    CL16'z/OS LE V1R8'            ..20
         DC    CL16'z/OS LE V1R9'            ..21
         DC    CL16'z/OS LE V1R10'           ..22
         DC    CL16'z/OS LE V1R11'           ..23
         DC    CL16'z/OS LE V1R12'           ..24
         DC    CL16'z/OS LE V1R13'           ..25
         DC    CL16'z/OS LE V2R1'            ..26
         DC    CL16'z/OS LE V2R2'            ..27
         DC    CL16'z/OS LE V2R3'            ..28
LELEVEL_NTRY_CNT EQU   (*-LELEVEL)/LELEVEL_NTRY_LEN
         SPACE 2
         DS    0D
OCBOS    EQU   *              CEEOCB operating system lookup
         DC    CL16'z/OS R5'       ..16
OCBOS_NTRY_LEN EQU   *-OCBOS
         DC    CL16'z/OS R8'       ..17
         DC    CL16'z/OS R9'       ..18
         DC    CL16'z/OS R10'      ..19
         DC    CL16'z/OS R11'      ..20
         DC    CL16'z/OS R12'      ..21
         DC    CL16'z/OS R13'      ..22
         DC    CL16'z/OS V2R1'     ..23
         DC    CL16'z/OS V2R2'     ..24
         DC    CL16'z/OS V2R3'     ..25
OCBOS_NTRY_CNT EQU   (*-OCBOS)/OCBOS_NTRY_LEN
         SPACE 1
OCBTTA   EQU   *              CEEOCB TERMTHDACT lookup
*                             value  offset
         DC    CL8'DUMP'          1  (1-1)*8= 0
OCBTTA_NTRY_LEN EQU   *-OCBTTA
         DC    CL8'TRACE'         2  (2-1)*8= 8
         DC    CL8'MSG'           4  (3-1)*8= 16
         DC    CL8'QUIET'         8  (4-1)*8= 24
         DC    CL8'UADUMP'       16  (5-1)*8= 32
         DC    CL8'UAONLY'       32  (6-1)*8= 40
         DC    CL8'UAIMM'        64  (7-1)*8= 48
         DC    CL8'UATRACE'     128  (8-1)*8= 56
OCBTTA_NTRY_CNT EQU   (*-OCBTTA)/OCBTTA_NTRY_LEN
         SPACE 2
         LTORG
         DROP  R9
         SPACE 2
LNE001T  DC    Y(39),C'xxxxxxxx: Query environment information'
LNE001L  EQU   *-LNE001T
         SPACE 1
LNE002T  DC    Y(15),C'xxxxxxxx:  PSA:'
LNE002L  EQU   *-LNE002T
         SPACE 1
LNE003T  DC    Y(23),C'xxxxxxxx:    z/ARCH (x)'
LNE003L  EQU   *-LNE003T
         SPACE 1
LNE004T  DC    Y(15),C'xxxxxxxx: PSAE:'
LNE004L  EQU   *-LNE004T
         SPACE 1
LNE005T  DC    Y(35),C'xxxxxxxx:    Facility byte-0: x''xx'''
LNE005L  EQU   *-LNE005T
         SPACE 1
LNE006T  DC    Y(34),C'xxxxxxxx:      N3 instructions (x)'
LNE006L  EQU   *-LNE006T
         SPACE 1
LNE007T  DC    Y(35),C'xxxxxxxx:      z/ARCH installed (x)'
LNE007L  EQU   *-LNE007T
         SPACE 1
LNE008T  DC    Y(32),C'xxxxxxxx:      z/ARCH active (x)'
LNE008L  EQU   *-LNE008T
         SPACE 1
LNE009T  DC    Y(33),C'xxxxxxxx:      IDTE installed (x)'
LNE009L  EQU   *-LNE009T
         SPACE 1
LNE010T  DC    Y(00)
LNE010L  EQU   *-LNE010T
         SPACE 1
LNE011T  DC    Y(00)
LNE011L  EQU   *-LNE011T
         SPACE 1
LNE012T  DC    Y(44),C'xxxxxxxx:      ASN and LX reuse facility (x)'
LNE012L  EQU   *-LNE012T
         SPACE 1
LNE013T  DC    Y(36),C'xxxxxxxx:      STFLE instruction (x)'
LNE013L  EQU   *-LNE013T
         SPACE 1
LNE014T  DC    Y(35),C'xxxxxxxx:    Facility byte-1: x''xx'''
LNE014L  EQU   *-LNE014T
         SPACE 1
LNE015T  DC    Y(30),C'xxxxxxxx:      DAT feature (x)'
LNE015L  EQU   *-LNE015T
         SPACE 1
LNE016T  DC    Y(48),C'xxxxxxxx:      sense-running-status facility (x)+
               '
LNE016L  EQU   *-LNE016T
         SPACE 1
LNE017T  DC    Y(35),C'xxxxxxxx:      SSKE instruction (x)'
LNE017L  EQU   *-LNE017T
         SPACE 1
LNE018T  DC    Y(35),C'xxxxxxxx:      STSI-enhancement (x)'
LNE018L  EQU   *-LNE018T
         SPACE 1
LNE019T  DC    Y(24),C'xxxxxxxx:      CQCIF (x)'
LNE019L  EQU   *-LNE019T
         SPACE 1
LNE020T  DC    Y(38),C'xxxxxxxx:      IPTE-range facility (x)'
LNE020L  EQU   *-LNE020T
         SPACE 1
LNE021T  DC    Y(53),C'xxxxxxxx:      non-quiescing key-setting facilit+
               y (x)'
LNE021L  EQU   *-LNE021T
         SPACE 1
LNE022T  DC    Y(32),C'xxxxxxxx:      APFT facility (x)'
LNE022L  EQU   *-LNE022T
         SPACE 1
LNE023T  DC    Y(35),C'xxxxxxxx:    Facility byte-2: x''xx'''
LNE023L  EQU   *-LNE023T
         SPACE 1
LNE024T  DC    Y(24),C'xxxxxxxx:      ETF-2 (x)'
LNE024L  EQU   *-LNE024T
         SPACE 1
LNE025T  DC    Y(39),C'xxxxxxxx:      Cryptographic assist (x)'
LNE025L  EQU   *-LNE025T
         SPACE 1
LNE026T  DC    Y(45),C'xxxxxxxx:      long displacement facility (x)'
LNE026L  EQU   *-LNE026T
         SPACE 1
LNE027T  DC    Y(48),C'xxxxxxxx:      long displacement facility hp (x)+
               '
LNE027L  EQU   *-LNE027T
         SPACE 1
LNE028T  DC    Y(45),C'xxxxxxxx:      HFP Mult/Add/Subt facility (x)'
LNE028L  EQU   *-LNE028T
         SPACE 1
LNE029T  DC    Y(42),C'xxxxxxxx:      Extended Immed facility (x)'
LNE029L  EQU   *-LNE029T
         SPACE 1
LNE030T  DC    Y(24),C'xxxxxxxx:      ETF-3 (x)'
LNE030L  EQU   *-LNE030T
         SPACE 1
LNE031T  DC    Y(45),C'xxxxxxxx:      HFP unnormalized extension (x)'
LNE031L  EQU   *-LNE031T
         SPACE 1
LNE032T  DC    Y(35),C'xxxxxxxx:    Facility byte-3: x''xx'''
LNE032L  EQU   *-LNE032T
         SPACE 1
LNE033T  DC    Y(36),C'xxxxxxxx:      ETF-2 enhancement (x)'
LNE033L  EQU   *-LNE033T
         SPACE 1
LNE034T  DC    Y(36),C'xxxxxxxx:      STCKF enhancement (x)'
LNE034L  EQU   *-LNE034T
         SPACE 1
LNE035T  DC    Y(47),C'xxxxxxxx:      parsing enhancement facility (x)'
LNE035L  EQU   *-LNE035T
         SPACE 1
LNE036T  DC    Y(00)
LNE036L  EQU   *-LNE036T
         SPACE 1
LNE037T  DC    Y(46),C'xxxxxxxx:      TOD clock steering facility (x)'
LNE037L  EQU   *-LNE037T
         SPACE 1
LNE038T  DC    Y(00)
LNE038L  EQU   *-LNE038T
         SPACE 1
LNE039T  DC    Y(36),C'xxxxxxxx:      ETF-3 enhancement (x)'
LNE039L  EQU   *-LNE039T
         SPACE 1
LNE040T  DC    Y(44),C'xxxxxxxx:      extract CPU time facility (x)'
LNE040L  EQU   *-LNE040T
         SPACE 1
LNE041T  DC    Y(35),C'xxxxxxxx:    Facility byte-4: x''xx'''
LNE041L  EQU   *-LNE041T
         SPACE 1
LNE042T  DC    Y(46),C'xxxxxxxx:      compare-swap-store facility (x)'
LNE042L  EQU   *-LNE042T
         SPACE 1
LNE043T  DC    Y(48),C'xxxxxxxx:      compare-swap-store facility 2 (x)+
               '
LNE043L  EQU   *-LNE043T
         SPACE 1
LNE044T  DC    Y(41),C'xxxxxxxx:      general-inst-extention (x)'
LNE044L  EQU   *-LNE044T
         SPACE 1
LNE045T  DC    Y(45),C'xxxxxxxx:      execute extension facility (x)'
LNE045L  EQU   *-LNE045T
         SPACE 1
LNE046T  DC    Y(44),C'xxxxxxxx:      enhanced monitor facility (x)'
LNE046L  EQU   *-LNE046T
         SPACE 1
LNE047T  DC    Y(00)
LNE047L  EQU   *-LNE047T
         SPACE 1
LNE048T  DC    Y(00)
LNE048L  EQU   *-LNE048T
         SPACE 1
LNE049T  DC    Y(00)
LNE049L  EQU   *-LNE049T
         SPACE 1
LNE050T  DC    Y(35),C'xxxxxxxx:    Facility byte-5: x''xx'''
LNE050L  EQU   *-LNE050T
         SPACE 1
LNE051T  DC    Y(49),C'xxxxxxxx:      Set-Program-Parameter facility (x+
               )'
LNE051L  EQU   *-LNE051T
         SPACE 1
LNE052T  DC    Y(41),C'xxxxxxxx:      FP support enhancement (x)'
LNE052L  EQU   *-LNE052T
         SPACE 1
LNE053T  DC    Y(38),C'xxxxxxxx:      Decimal FP facility (x)'
LNE053L  EQU   *-LNE053T
         SPACE 1
LNE054T  DC    Y(41),C'xxxxxxxx:      Decimal FP facility hp (x)'
LNE054L  EQU   *-LNE054T
         SPACE 1
LNE055T  DC    Y(29),C'xxxxxxxx:      PFPO inst (x)'
LNE055L  EQU   *-LNE055T
         SPACE 1
LNE056T  DC    Y(23),C'xxxxxxxx:      z196 (x)'
LNE056L  EQU   *-LNE056T
         SPACE 1
LNE057T  DC    Y(00)
LNE057L  EQU   *-LNE057T
         SPACE 1
LNE058T  DC    Y(00)
LNE058L  EQU   *-LNE058T
         SPACE 1
LNE059T  DC    Y(35),C'xxxxxxxx:    Facility byte-6: x''xx'''
LNE059L  EQU   *-LNE059T
         SPACE 1
LNE060T  DC    Y(00)
LNE060L  EQU   *-LNE060T
         SPACE 1
LNE061T  DC    Y(49),C'xxxxxxxx:      misc instr extensions facility (x+
               )'
LNE061L  EQU   *-LNE061T
         SPACE 1
LNE062T  DC    Y(61),C'xxxxxxxx:      constrained translation extension+
                facility (x)'
LNE062L  EQU   *-LNE062T
         SPACE 1
LNE063T  DC    Y(00)
LNE063L  EQU   *-LNE063T
         SPACE 1
LNE064T  DC    Y(00)
LNE064L  EQU   *-LNE064T
         SPACE 1
LNE065T  DC    Y(39),C'xxxxxxxx:      load-store-on-cond 2 (x)'
LNE065L  EQU   *-LNE065T
         SPACE 1
LNE066T  DC    Y(45),C'xxxxxxxx:      entropy encoding for CMPSC (x)'
LNE066L  EQU   *-LNE066T
         SPACE 1
LNE067T  DC    Y(46),C'xxxxxxxx:      conditional transaction end (x)'
LNE067L  EQU   *-LNE067T
         SPACE 1
LNE068T  DC    Y(35),C'xxxxxxxx:    Facility byte-7: x''xx'''
LNE068L  EQU   *-LNE068T
         SPACE 1
LNE069T  DC    Y(27),C'xxxxxxxx:      STPTODCS (x)'
LNE069L  EQU   *-LNE069T
         SPACE 1
LNE070T  DC    Y(24),C'xxxxxxxx:      MSAE5 (x)'
LNE070L  EQU   *-LNE070T
         SPACE 1
LNE071T  DC    Y(23),C'xxxxxxxx:      MIE2 (x)'
LNE071L  EQU   *-LNE071T
         SPACE 1
LNE072T  DC    Y(21),C'xxxxxxxx:      SA (x)'
LNE072L  EQU   *-LNE072T
         SPACE 1
LNE073T  DC    Y(22),C'xxxxxxxx:      TSI (x)'
LNE073L  EQU   *-LNE073T
         SPACE 1
LNE074T  DC    Y(00)
LNE074L  EQU   *-LNE074T
         SPACE 1
LNE075T  DC    Y(00)
LNE075L  EQU   *-LNE075T
         SPACE 1
LNE076T  DC    Y(00)
LNE076L  EQU   *-LNE076T
         SPACE 1
LNE077T  DC    Y(35),C'xxxxxxxx:    Facility byte-8: x''xx'''
LNE077L  EQU   *-LNE077T
         SPACE 1
LNE078T  DC    Y(21),C'xxxxxxxx:      RI (x)'
LNE078L  EQU   *-LNE078T
         SPACE 1
LNE079T  DC    Y(54),C'xxxxxxxx:      CRYPTO AP-queue adapter interupti+
               on (x)'
LNE079L  EQU   *-LNE079T
         SPACE 1
LNE080T  DC    Y(00)
LNE080L  EQU   *-LNE080T
         SPACE 1
LNE081T  DC    Y(51),C'xxxxxxxx:      CPU-measurement counter facility +
               (x)'
LNE081L  EQU   *-LNE081T
         SPACE 1
LNE082T  DC    Y(52),C'xxxxxxxx:      CPU-measurement sampling facility+
                (x)'
LNE082L  EQU   *-LNE082T
         SPACE 1
LNE083T  DC    Y(00)
LNE083L  EQU   *-LNE084T
         SPACE 1
LNE084T  DC    Y(32),C'xxxxxxxx:      AISI facility (x)'
LNE084L  EQU   *-LNE083T
         SPACE 1
LNE085T  DC    Y(31),C'xxxxxxxx:      AEN facility (x)'
LNE085L  EQU   *-LNE085T
         SPACE 1
LNE086T  DC    Y(35),C'xxxxxxxx:    Facility byte-9: x''xx'''
LNE086L  EQU   *-LNE086T
         SPACE 1
LNE087T  DC    Y(31),C'xxxxxxxx:      AIS facility (x)'
LNE087L  EQU   *-LNE087T
         SPACE 1
LNE088T  DC    Y(46),C'xxxxxxxx:      transactional exec facility (x)'
LNE088L  EQU   *-LNE088T
         SPACE 1
LNE089T  DC    Y(00)
LNE089L  EQU   *-LNE089T
         SPACE 1
LNE090T  DC    Y(00)
LNE090L  EQU   *-LNE090T
         SPACE 1
LNE091T  DC    Y(32),C'xxxxxxxx:      MSA3 facility (x)'
LNE091L  EQU   *-LNE091T
         SPACE 1
LNE092T  DC    Y(32),C'xxxxxxxx:      MSA4 facility (x)'
LNE092L  EQU   *-LNE092T
         SPACE 1
LNE093T  DC    Y(33),C'xxxxxxxx:      enhanced DAT-2 (x)'
LNE093L  EQU   *-LNE093T
         SPACE 1
LNE094T  DC    Y(00)
LNE094L  EQU   *-LNE094T
         SPACE 1
LNE095T  DC    Y(36),C'xxxxxxxx:    Facility byte-10: x''xx'''
LNE095L  EQU   *-LNE095T
         SPACE 1
LNE096T  DC    Y(41),C'xxxxxxxx:      decimal FP packed conv (x)'
LNE096L  EQU   *-LNE096T
         SPACE 1
LNE097T  DC    Y(00)
LNE097L  EQU   *-LNE097T
         SPACE 1
LNE098T  DC    Y(00)
LNE098L  EQU   *-LNE098T
         SPACE 1
LNE099T  DC    Y(00)
LNE099L  EQU   *-LNE099T
         SPACE 1
LNE100T  DC    Y(00)
LNE100L  EQU   *-LNE100T
         SPACE 1
LNE101T  DC    Y(00)
LNE101L  EQU   *-LNE101T
         SPACE 1
LNE102T  DC    Y(00)
LNE102L  EQU   *-LNE102T
         SPACE 1
LNE103T  DC    Y(00)
LNE103L  EQU   *-LNE103T
         SPACE 1
LNE104T  DC    Y(36),C'xxxxxxxx:    Facility byte-11: x''xx'''
LNE104L  EQU   *-LNE104T
         SPACE 1
LNE105T  DC    Y(00)
LNE105L  EQU   *-LNE105T
         SPACE 1
LNE106T  DC    Y(00)
LNE106L  EQU   *-LNE106T
         SPACE 1
LNE107T  DC    Y(00)
LNE107L  EQU   *-LNE107T
         SPACE 1
LNE108T  DC    Y(00)
LNE108L  EQU   *-LNE108T
         SPACE 1
LNE109T  DC    Y(00)
LNE109L  EQU   *-LNE109T
         SPACE 1
LNE110T  DC    Y(00)
LNE110L  EQU   *-LNE110T
         SPACE 1
LNE111T  DC    Y(00)
LNE111L  EQU   *-LNE111T
         SPACE 1
LNE112T  DC    Y(00)
LNE112L  EQU   *-LNE112T
         SPACE 1
LNE113T  DC    Y(36),C'xxxxxxxx:    Facility byte-12: x''xx'''
LNE113L  EQU   *-LNE113T
         SPACE 1
LNE114T  DC    Y(00)
LNE114L  EQU   *-LNE114T
         SPACE 1
LNE115T  DC    Y(00)
LNE115L  EQU   *-LNE115T
         SPACE 1
LNE116T  DC    Y(00)
LNE116L  EQU   *-LNE116T
         SPACE 1
LNE117T  DC    Y(00)
LNE117L  EQU   *-LNE117T
         SPACE 1
LNE118T  DC    Y(00)
LNE118L  EQU   *-LNE118T
         SPACE 1
LNE119T  DC    Y(00)
LNE119L  EQU   *-LNE119T
         SPACE 1
LNE120T  DC    Y(00)
LNE120L  EQU   *-LNE120T
         SPACE 1
LNE121T  DC    Y(00)
LNE121L  EQU   *-LNE121T
         SPACE 1
LNE122T  DC    Y(36),C'xxxxxxxx:    Facility byte-13: x''xx'''
LNE122L  EQU   *-LNE122T
         SPACE 1
LNE123T  DC    Y(00)
LNE123L  EQU   *-LNE123T
         SPACE 1
LNE124T  DC    Y(00)
LNE124L  EQU   *-LNE124T
         SPACE 1
LNE125T  DC    Y(00)
LNE125L  EQU   *-LNE125T
         SPACE 1
LNE126T  DC    Y(00)
LNE126L  EQU   *-LNE126T
         SPACE 1
LNE127T  DC    Y(00)
LNE127L  EQU   *-LNE127T
         SPACE 1
LNE128T  DC    Y(00)
LNE128L  EQU   *-LNE128T
         SPACE 1
LNE129T  DC    Y(00)
LNE129L  EQU   *-LNE129T
         SPACE 1
LNE130T  DC    Y(00)
LNE130L  EQU   *-LNE130T
         SPACE 1
LNE131T  DC    Y(36),C'xxxxxxxx:    Facility byte-14: x''xx'''
LNE131L  EQU   *-LNE131T
         SPACE 1
LNE132T  DC    Y(00)
LNE132L  EQU   *-LNE132T
         SPACE 1
LNE133T  DC    Y(00)
LNE133L  EQU   *-LNE133T
         SPACE 1
LNE134T  DC    Y(00)
LNE134L  EQU   *-LNE134T
         SPACE 1
LNE135T  DC    Y(00)
LNE135L  EQU   *-LNE135T
         SPACE 1
LNE136T  DC    Y(00)
LNE136L  EQU   *-LNE136T
         SPACE 1
LNE137T  DC    Y(00)
LNE137L  EQU   *-LNE137T
         SPACE 1
LNE138T  DC    Y(00)
LNE138L  EQU   *-LNE138T
         SPACE 1
LNE139T  DC    Y(00)
LNE139L  EQU   *-LNE139T
         SPACE 1
LNE140T  DC    Y(36),C'xxxxxxxx:    Facility byte-15: x''xx'''
LNE140L  EQU   *-LNE140T
         SPACE 1
LNE141T  DC    Y(00)
LNE141L  EQU   *-LNE141T
         SPACE 1
LNE142T  DC    Y(00)
LNE142L  EQU   *-LNE142T
         SPACE 1
LNE143T  DC    Y(00)
LNE143L  EQU   *-LNE143T
         SPACE 1
LNE144T  DC    Y(00)
LNE144L  EQU   *-LNE144T
         SPACE 1
LNE145T  DC    Y(00)
LNE145L  EQU   *-LNE145T
         SPACE 1
LNE146T  DC    Y(00)
LNE146L  EQU   *-LNE146T
         SPACE 1
LNE147T  DC    Y(00)
LNE147L  EQU   *-LNE147T
         SPACE 1
LNE148T  DC    Y(00)
LNE148L  EQU   *-LNE148T
         SPACE 1
LNE150T  DC    Y(36),C'xxxxxxxx:    Facility byte-16: x''xx'''
LNE150L  EQU   *-LNE150T
         SPACE 1
LNE151T  DC    Y(33),C'xxxxxxxx:      delay facility (x)'
LNE151L  EQU   *-LNE151T
         SPACE 1
LNE152T  DC    Y(47),C'xxxxxxxx:      Z1/vector extension facility (x)'
LNE152L  EQU   *-LNE152T
         SPACE 1
LNE153T  DC    Y(45),C'xxxxxxxx:      inst exec protect facility (x)'
LNE153L  EQU   *-LNE153T
         SPACE 1
LNE154T  DC    Y(39),C'xxxxxxxx:      side effect facility (x)'
LNE154L  EQU   *-LNE154T
         SPACE 1
LNE155T  DC    Y(33),C'xxxxxxxx:      close facility (x)'
LNE155L  EQU   *-LNE155T
         SPACE 1
LNE156T  DC    Y(22),C'xxxxxxxx:      GSF (x)'
LNE156L  EQU   *-LNE156T
         SPACE 1
LNE157T  DC    Y(38),C'xxxxxxxx:      RTI FC mod facility (x)'
LNE157L  EQU   *-LNE157T
         SPACE 1
LNE158T  DC    Y(00)
LNE158L  EQU   *-LNE158T
         SPACE 1
LNE160T  DC    Y(36),C'xxxxxxxx:    Facility byte-17: x''xx'''
LNE160L  EQU   *-LNE160T
         SPACE 1
LNE161T  DC    Y(29),C'xxxxxxxx:      shared TLB (x)'
LNE161L  EQU   *-LNE161T
         SPACE 1
LNE162T  DC    Y(00)
LNE162L  EQU   *-LNE162T
         SPACE 1
LNE163T  DC    Y(00)
LNE163L  EQU   *-LNE163T
         SPACE 1
LNE164T  DC    Y(43),C'xxxxxxxx:      TOD clock epoch facility (x)'
LNE164L  EQU   *-LNE164T
         SPACE 1
LNE165T  DC    Y(00)
LNE165L  EQU   *-LNE165T
         SPACE 1
LNE166T  DC    Y(00)
LNE166L  EQU   *-LNE166T
         SPACE 1
LNE167T  DC    Y(41),C'xxxxxxxx:      store CPU ctr multiple (x)'
LNE167L  EQU   *-LNE167T
         SPACE 1
LNE168T  DC    Y(35),C'xxxxxxxx:      scaled CPU timer (x)'
LNE168L  EQU   *-LNE168T
         SPACE 1
LNE170T  DC    Y(36),C'xxxxxxxx:    Facility byte-18: x''xx'''
LNE170L  EQU   *-LNE170T
         SPACE 1
LNE171T  DC    Y(00)
LNE171L  EQU   *-LNE171T
         SPACE 1
LNE172T  DC    Y(00)
LNE172L  EQU   *-LNE172T
         SPACE 1
LNE173T  DC    Y(00)
LNE173L  EQU   *-LNE173T
         SPACE 1
LNE174T  DC    Y(00)
LNE174L  EQU   *-LNE174T
         SPACE 1
LNE175T  DC    Y(00)
LNE175L  EQU   *-LNE175T
         SPACE 1
LNE176T  DC    Y(00)
LNE176L  EQU   *-LNE176T
         SPACE 1
LNE177T  DC    Y(00)
LNE177L  EQU   *-LNE177T
         SPACE 1
LNE178T  DC    Y(00)
LNE178L  EQU   *-LNE178T
         SPACE 1
LNE180T  DC    Y(36),C'xxxxxxxx:    Facility byte-19: x''xx'''
LNE180L  EQU   *-LNE180T
         SPACE 1
LNE181T  DC    Y(00)
LNE181L  EQU   *-LNE181T
         SPACE 1
LNE182T  DC    Y(00)
LNE182L  EQU   *-LNE182T
         SPACE 1
LNE183T  DC    Y(00)
LNE183L  EQU   *-LNE183T
         SPACE 1
LNE184T  DC    Y(00)
LNE184L  EQU   *-LNE184T
         SPACE 1
LNE185T  DC    Y(00)
LNE185L  EQU   *-LNE185T
         SPACE 1
LNE186T  DC    Y(00)
LNE186L  EQU   *-LNE186T
         SPACE 1
LNE187T  DC    Y(00)
LNE187L  EQU   *-LNE187T
         SPACE 1
LNE188T  DC    Y(00)
LNE188L  EQU   *-LNE188T
         SPACE 1
LNE190T  DC    Y(36),C'xxxxxxxx:    Facility byte-20: x''xx'''
LNE190L  EQU   *-LNE190T
         SPACE 1
LNE191T  DC    Y(00)
LNE191L  EQU   *-LNE191T
         SPACE 1
LNE192T  DC    Y(00)
LNE192L  EQU   *-LNE192T
         SPACE 1
LNE193T  DC    Y(00)
LNE193L  EQU   *-LNE193T
         SPACE 1
LNE194T  DC    Y(00)
LNE194L  EQU   *-LNE194T
         SPACE 1
LNE195T  DC    Y(00)
LNE195L  EQU   *-LNE195T
         SPACE 1
LNE196T  DC    Y(00)
LNE196L  EQU   *-LNE196T
         SPACE 1
LNE197T  DC    Y(00)
LNE197L  EQU   *-LNE197T
         SPACE 1
LNE198T  DC    Y(00)
LNE198L  EQU   *-LNE198T
         SPACE 1
LNE200T  DC    Y(36),C'xxxxxxxx:    Facility byte-21: x''xx'''
LNE200L  EQU   *-LNE200T
         SPACE 1
LNE201T  DC    Y(00)
LNE201L  EQU   *-LNE201T
         SPACE 1
LNE202T  DC    Y(00)
LNE202L  EQU   *-LNE202T
         SPACE 1
LNE203T  DC    Y(00)
LNE203L  EQU   *-LNE203T
         SPACE 1
LNE204T  DC    Y(00)
LNE204L  EQU   *-LNE204T
         SPACE 1
LNE205T  DC    Y(00)
LNE205L  EQU   *-LNE205T
         SPACE 1
LNE206T  DC    Y(00)
LNE206L  EQU   *-LNE206T
         SPACE 1
LNE207T  DC    Y(00)
LNE207L  EQU   *-LNE207T
         SPACE 1
LNE208T  DC    Y(00)
LNE208L  EQU   *-LNE208T
         SPACE 1
LNE210T  DC    Y(36),C'xxxxxxxx:    Facility byte-22: x''xx'''
LNE210L  EQU   *-LNE210T
         SPACE 1
LNE211T  DC    Y(00)
LNE211L  EQU   *-LNE211T
         SPACE 1
LNE212T  DC    Y(00)
LNE212L  EQU   *-LNE212T
         SPACE 1
LNE213T  DC    Y(00)
LNE213L  EQU   *-LNE213T
         SPACE 1
LNE214T  DC    Y(00)
LNE214L  EQU   *-LNE214T
         SPACE 1
LNE215T  DC    Y(00)
LNE215L  EQU   *-LNE215T
         SPACE 1
LNE216T  DC    Y(00)
LNE216L  EQU   *-LNE216T
         SPACE 1
LNE217T  DC    Y(00)
LNE217L  EQU   *-LNE217T
         SPACE 1
LNE218T  DC    Y(00)
LNE218L  EQU   *-LNE218T
         SPACE 1
LNE220T  DC    Y(36),C'xxxxxxxx:    Facility byte-23: x''xx'''
LNE220L  EQU   *-LNE220T
         SPACE 1
LNE221T  DC    Y(00)
LNE221L  EQU   *-LNE221T
         SPACE 1
LNE222T  DC    Y(00)
LNE222L  EQU   *-LNE222T
         SPACE 1
LNE223T  DC    Y(00)
LNE223L  EQU   *-LNE223T
         SPACE 1
LNE224T  DC    Y(00)
LNE224L  EQU   *-LNE224T
         SPACE 1
LNE225T  DC    Y(00)
LNE225L  EQU   *-LNE225T
         SPACE 1
LNE226T  DC    Y(00)
LNE226L  EQU   *-LNE226T
         SPACE 1
LNE227T  DC    Y(00)
LNE227L  EQU   *-LNE227T
         SPACE 1
LNE228T  DC    Y(00)
LNE228L  EQU   *-LNE228T
         SPACE 1
LNE230T  DC    Y(36),C'xxxxxxxx:    Facility byte-24: x''xx'''
LNE230L  EQU   *-LNE230T
         SPACE 1
LNE231T  DC    Y(00)
LNE231L  EQU   *-LNE231T
         SPACE 1
LNE232T  DC    Y(00)
LNE232L  EQU   *-LNE232T
         SPACE 1
LNE233T  DC    Y(00)
LNE233L  EQU   *-LNE233T
         SPACE 1
LNE234T  DC    Y(00)
LNE234L  EQU   *-LNE234T
         SPACE 1
LNE235T  DC    Y(00)
LNE235L  EQU   *-LNE235T
         SPACE 1
LNE236T  DC    Y(00)
LNE236L  EQU   *-LNE236T
         SPACE 1
LNE237T  DC    Y(00)
LNE237L  EQU   *-LNE237T
         SPACE 1
LNE238T  DC    Y(00)
LNE238L  EQU   *-LNE238T
         SPACE 1
LNE240T  DC    Y(36),C'xxxxxxxx:    Facility byte-25: x''xx'''
LNE240L  EQU   *-LNE240T
         SPACE 1
LNE241T  DC    Y(00)
LNE241L  EQU   *-LNE241T
         SPACE 1
LNE242T  DC    Y(00)
LNE242L  EQU   *-LNE242T
         SPACE 1
LNE243T  DC    Y(00)
LNE243L  EQU   *-LNE243T
         SPACE 1
LNE244T  DC    Y(00)
LNE244L  EQU   *-LNE244T
         SPACE 1
LNE245T  DC    Y(00)
LNE245L  EQU   *-LNE245T
         SPACE 1
LNE246T  DC    Y(00)
LNE246L  EQU   *-LNE246T
         SPACE 1
LNE247T  DC    Y(00)
LNE247L  EQU   *-LNE247T
         SPACE 1
LNE248T  DC    Y(00)
LNE248L  EQU   *-LNE248T
         SPACE 1
LNE250T  DC    Y(36),C'xxxxxxxx:    Facility byte-26: x''xx'''
LNE250L  EQU   *-LNE250T
         SPACE 1
LNE251T  DC    Y(00)
LNE251L  EQU   *-LNE251T
         SPACE 1
LNE252T  DC    Y(00)
LNE252L  EQU   *-LNE252T
         SPACE 1
LNE253T  DC    Y(00)
LNE253L  EQU   *-LNE253T
         SPACE 1
LNE254T  DC    Y(00)
LNE254L  EQU   *-LNE254T
         SPACE 1
LNE255T  DC    Y(00)
LNE255L  EQU   *-LNE255T
         SPACE 1
LNE256T  DC    Y(00)
LNE256L  EQU   *-LNE256T
         SPACE 1
LNE257T  DC    Y(00)
LNE257L  EQU   *-LNE257T
         SPACE 1
LNE258T  DC    Y(00)
LNE258L  EQU   *-LNE258T
         SPACE 1
LNE260T  DC    Y(36),C'xxxxxxxx:    Facility byte-27: x''xx'''
LNE260L  EQU   *-LNE260T
         SPACE 1
LNE261T  DC    Y(00)
LNE261L  EQU   *-LNE261T
         SPACE 1
LNE262T  DC    Y(00)
LNE262L  EQU   *-LNE262T
         SPACE 1
LNE263T  DC    Y(00)
LNE263L  EQU   *-LNE263T
         SPACE 1
LNE264T  DC    Y(00)
LNE264L  EQU   *-LNE264T
         SPACE 1
LNE265T  DC    Y(00)
LNE265L  EQU   *-LNE265T
         SPACE 1
LNE266T  DC    Y(00)
LNE266L  EQU   *-LNE266T
         SPACE 1
LNE267T  DC    Y(00)
LNE267L  EQU   *-LNE267T
         SPACE 1
LNE268T  DC    Y(00)
LNE268L  EQU   *-LNE268T
         SPACE 1
LNE270T  DC    Y(36),C'xxxxxxxx:    Facility byte-28: x''xx'''
LNE270L  EQU   *-LNE270T
         SPACE 1
LNE271T  DC    Y(00)
LNE271L  EQU   *-LNE271T
         SPACE 1
LNE272T  DC    Y(00)
LNE272L  EQU   *-LNE272T
         SPACE 1
LNE273T  DC    Y(00)
LNE273L  EQU   *-LNE273T
         SPACE 1
LNE274T  DC    Y(00)
LNE274L  EQU   *-LNE274T
         SPACE 1
LNE275T  DC    Y(00)
LNE275L  EQU   *-LNE275T
         SPACE 1
LNE276T  DC    Y(00)
LNE276L  EQU   *-LNE276T
         SPACE 1
LNE277T  DC    Y(00)
LNE277L  EQU   *-LNE277T
         SPACE 1
LNE278T  DC    Y(00)
LNE278L  EQU   *-LNE278T
         SPACE 1
LNE280T  DC    Y(36),C'xxxxxxxx:    Facility byte-29: x''xx'''
LNE280L  EQU   *-LNE280T
         SPACE 1
LNE281T  DC    Y(00)
LNE281L  EQU   *-LNE281T
         SPACE 1
LNE282T  DC    Y(00)
LNE282L  EQU   *-LNE282T
         SPACE 1
LNE283T  DC    Y(00)
LNE283L  EQU   *-LNE283T
         SPACE 1
LNE284T  DC    Y(00)
LNE284L  EQU   *-LNE284T
         SPACE 1
LNE285T  DC    Y(00)
LNE285L  EQU   *-LNE285T
         SPACE 1
LNE286T  DC    Y(00)
LNE286L  EQU   *-LNE286T
         SPACE 1
LNE287T  DC    Y(00)
LNE287L  EQU   *-LNE287T
         SPACE 1
LNE288T  DC    Y(00)
LNE288L  EQU   *-LNE288T
         SPACE 1
LNE290T  DC    Y(36),C'xxxxxxxx:    Facility byte-30: x''xx'''
LNE290L  EQU   *-LNE290T
         SPACE 1
LNE291T  DC    Y(00)
LNE291L  EQU   *-LNE291T
         SPACE 1
LNE292T  DC    Y(00)
LNE292L  EQU   *-LNE292T
         SPACE 1
LNE293T  DC    Y(00)
LNE293L  EQU   *-LNE293T
         SPACE 1
LNE294T  DC    Y(00)
LNE294L  EQU   *-LNE294T
         SPACE 1
LNE295T  DC    Y(00)
LNE295L  EQU   *-LNE295T
         SPACE 1
LNE296T  DC    Y(00)
LNE296L  EQU   *-LNE296T
         SPACE 1
LNE297T  DC    Y(00)
LNE297L  EQU   *-LNE297T
         SPACE 1
LNE298T  DC    Y(00)
LNE298L  EQU   *-LNE298T
         SPACE 1
LNE300T  DC    Y(36),C'xxxxxxxx:    Facility byte-31: x''xx'''
LNE300L  EQU   *-LNE300T
         SPACE 1
LNE301T  DC    Y(00)
LNE301L  EQU   *-LNE301T
         SPACE 1
LNE302T  DC    Y(00)
LNE302L  EQU   *-LNE302T
         SPACE 1
LNE303T  DC    Y(00)
LNE303L  EQU   *-LNE303T
         SPACE 1
LNE304T  DC    Y(00)
LNE304L  EQU   *-LNE304T
         SPACE 1
LNE305T  DC    Y(00)
LNE305L  EQU   *-LNE305T
         SPACE 1
LNE306T  DC    Y(00)
LNE306L  EQU   *-LNE306T
         SPACE 1
LNE307T  DC    Y(00)
LNE307L  EQU   *-LNE307T
         SPACE 1
LNE308T  DC    Y(00)
LNE308L  EQU   *-LNE308T
         SPACE 1
LNE320T  DC    Y(15),C'xxxxxxxx:  CVT:'
LNE320L  EQU   *-LNE320T
         SPACE 1
LNE321T  DC    Y(70),C'xxxxxxxx:    Product(xxxxxxxx)  FMID(xxxxxxxx)  +
               UVID(xxxxxxxxxxxxxxxx)'
LNE321L  EQU   *-LNE321T
         SPACE 1
LNE322T  DC    Y(35),C'xxxxxxxx:    CPU(nnnn)  RRMM(xx/xx)'
LNE322L  EQU   *-LNE322T
         SPACE 1
LNE330T  DC    Y(26),C'xxxxxxxx:    CVTDCB: x''xx'''
LNE330L  EQU   *-LNE330T
         SPACE 1         x'80'
LNE331T  DC    Y(42),C'xxxxxxxx:      S/370-XA mode execution (x)'
LNE331L  EQU   *-LNE331T
         SPACE 1         x'40'
LNE332T  DC    Y(29),C'xxxxxxxx:      PCP VM=YES (x)'
LNE332L  EQU   *-LNE332T
         SPACE 1         x'20'
LNE333T  DC    Y(22),C'xxxxxxxx:      MFT (x)'
LNE333L  EQU   *-LNE333T
         SPACE 1         x'10'
LNE334T  DC    Y(22),C'xxxxxxxx:      MVT (x)'
LNE334L  EQU   *-LNE334T
         SPACE 1         x'08'
LNE335T  DC    Y(34),C'xxxxxxxx:      CVTOSLVL usable (x)'
LNE335L  EQU   *-LNE335T
         SPACE 1         x'04'
LNE336T  DC    Y(43),C'xxxxxxxx:      Model 65 multi-processor (x)'
LNE336L  EQU   *-LNE336T
         SPACE 1         x'02'
LNE337T  DC    Y(22),C'xxxxxxxx:      DAT (x)'
LNE337L  EQU   *-LNE337T
         SPACE 1         x'01'
LNE338T  DC    Y(22),C'xxxxxxxx:      MVS (x)'
LNE338L  EQU   *-LNE338T
         SPACE 1         x'12'
LNE339T  DC    Y(32),C'xxxxxxxx:      OS/VS2 system (x)'
LNE339L  EQU   *-LNE339T
         SPACE 1
LNE340T  DC    Y(27),C'xxxxxxxx:    CVTOPTA: x''xx'''
LNE340L  EQU   *-LNE340T
         SPACE 1         x'80'
LNE341T  DC    Y(40),C'xxxxxxxx:      Channel Check Handler (x)'
LNE341L  EQU   *-LNE341T
         SPACE 1         x'40'
LNE342T  DC    Y(39),C'xxxxxxxx:      Alternate Path Retry (x)'
LNE342L  EQU   *-LNE342T
         SPACE 1         x'20'
LNE343T  DC    Y(48),C'xxxxxxxx:      Dynamic Device Reconfig / RMS (x)+
               '
LNE343L  EQU   *-LNE343T
         SPACE 1         x'10'
LNE344T  DC    Y(35),C'xxxxxxxx:      NIP is executing (x)'
LNE344L  EQU   *-LNE344T
         SPACE 1         x'08'
LNE345T  DC    Y(00)
LNE345L  EQU   *-LNE345T
         SPACE 1         x'04'
LNE346T  DC    Y(30),C'xxxxxxxx:      no EXCP V=R (x)'
LNE346L  EQU   *-LNE346T
         SPACE 1         x'02'
LNE347T  DC    Y(50),C'xxxxxxxx:      ASCII tape processing available (+
               x)'
LNE347L  EQU   *-LNE347T
         SPACE 1         x'01
LNE348T  DC    Y(40),C'xxxxxxxx:      Extended Precision FP (x)'
LNE348L  EQU   *-LNE348T
         SPACE 1
LNE350T  DC    Y(27),C'xxxxxxxx:    CVTOPTB: x''xx'''
LNE350L  EQU   *-LNE350T
         SPACE 1         x'80'
LNE351T  DC    Y(42),C'xxxxxxxx:      Storage Protect feature (x)'
LNE351L  EQU   *-LNE351T
         SPACE 1         x'40'
LNE352T  DC    Y(64),C'xxxxxxxx:      Hardware Clock Comparator / CPU T+
               imer feature (x)'
LNE352L  EQU   *-LNE352T
         SPACE 1         x'20'
LNE353T  DC    Y(44),C'xxxxxxxx:      Time-of-Day clock feature (x)'
LNE353L  EQU   *-LNE353T
         SPACE 1         x'10'
LNE354T  DC    Y(33),C'xxxxxxxx:      no SYS1.LOGREC (x)'
LNE354L  EQU   *-LNE354T
         SPACE 1         x'08'
LNE355T  DC    Y(00)
LNE355L  EQU   *-LNE355T
         SPACE 1         x'04'
LNE356T  DC    Y(40),C'xxxxxxxx:      FETCH protect feature (x)'
LNE356L  EQU   *-LNE356T
         SPACE 1         x'02'
LNE357T  DC    Y(36),C'xxxxxxxx:      VS1 assist MDC353 (x)'
LNE357L  EQU   *-LNE357T
         SPACE 1         x'01'
LNE358T  DC    Y(36),C'xxxxxxxx:      VS1 assist MDC365 (x)'
LNE358L  EQU   *-LNE358T
         SPACE 1
LNE360T  DC    Y(28),C'xxxxxxxx:    CVTFLAG1: x''xx'''
LNE360L  EQU   *-LNE360T
         SPACE 1         x'80'
LNE361T  DC    Y(00)
LNE361L  EQU   *-LNE361T
         SPACE 1         x'40'
LNE362T  DC    Y(00)
LNE362L  EQU   *-LNE362T
         SPACE 1         x'20'
LNE363T  DC    Y(23),C'xxxxxxxx:      CUSE (x)'
LNE363L  EQU   *-LNE363T
         SPACE 1         x'10'
LNE364T  DC    Y(00)
LNE364L  EQU   *-LNE364T
         SPACE 1         x'08'
LNE365T  DC    Y(00)
LNE365L  EQU   *-LNE365T
         SPACE 1         x'04'
LNE366T  DC    Y(35),C'xxxxxxxx:      CSTRING facility (x)'
LNE366L  EQU   *-LNE366T
         SPACE 1         x'02'
LNE367T  DC    Y(36),C'xxxxxxxx:      Subspace facility (x)'
LNE367L  EQU   *-LNE367T
         SPACE 1         x'01'
LNE368T  DC    Y(00)
LNE368L  EQU   *-LNE368T
         SPACE 1
LNE370T  DC    Y(28),C'xxxxxxxx:    CVTFLAG2: x''xx'''
LNE370L  EQU   *-LNE370T
         SPACE 1         x'80'
LNE371T  DC    Y(48),C'xxxxxxxx:      Compression/Expansion service (x)+
               '
LNE371L  EQU   *-LNE371T
         SPACE 1         x'40'
LNE372T  DC    Y(49),C'xxxxxxxx:      Compression/Expansion hardware (x+
               )'
LNE372L  EQU   *-LNE372T
         SPACE 1         x'20'
LNE373T  DC    Y(44),C'xxxxxxxx:      Suppression-on-Protection (x)'
LNE373L  EQU   *-LNE373T
         SPACE 1         x'10'
LNE374T  DC    Y(47),C'xxxxxxxx:      hardware BFP instruction set (x)'
LNE374L  EQU   *-LNE374T
         SPACE 1         x'08'
LNE375T  DC    Y(32),C'xxxxxxxx:      PER2 hardware (x)'
LNE375L  EQU   *-LNE375T
         SPACE 1         x'04'
LNE376T  DC    Y(55),C'xxxxxxxx:      Internal Queued Direct Communicat+
               ion (x)'
LNE376L  EQU   *-LNE376T
         SPACE 1         x'02'
LNE377T  DC    Y(38),C'xxxxxxxx:      ASN && LX reuse Arch (x)'
LNE377L  EQU   *-LNE377T
         SPACE 1         x'01'
LNE378T  DC    Y(36),C'xxxxxxxx:      Enhanced DAT Arch (x)'
LNE378L  EQU   *-LNE378T
         SPACE 1
LNE380T  DC    Y(28),C'xxxxxxxx:    CVTFLAG3: x''xx'''
LNE380L  EQU   *-LNE380T
         SPACE 1         x'80'
LNE381T  DC    Y(34),C'xxxxxxxx:      z/Arch hardware (x)'
LNE381L  EQU   *-LNE381T
         SPACE 1         x'40'
LNE382T  DC    Y(00)
LNE382L  EQU   *-LNE382T
         SPACE 1         x'20'
LNE383T  DC    Y(00)
LNE383L  EQU   *-LNE383T
         SPACE 1         x'10'
LNE384T  DC    Y(00)
LNE384L  EQU   *-LNE384T
         SPACE 1         x'08'
LNE385T  DC    Y(00)
LNE385L  EQU   *-LNE385T
         SPACE 1         x'04'
LNE386T  DC    Y(00)
LNE386L  EQU   *-LNE386T
         SPACE 1         x'02'
LNE387T  DC    Y(00)
LNE387L  EQU   *-LNE387T
         SPACE 1         x'01'
LNE388T  DC    Y(32),C'xxxxxxxx:      GSF available (x)'
LNE388L  EQU   *-LNE388T
         SPACE 1
LNE390T  DC    Y(28),C'xxxxxxxx:    CVTFLAG4: x''xx'''
LNE390L  EQU   *-LNE390T
         SPACE 1         x'80'
LNE391T  DC    Y(33),C'xxxxxxxx:      P001 installed (x)'
LNE391L  EQU   *-LNE391T
         SPACE 1         x'40'
LNE392T  DC    Y(30),C'xxxxxxxx:      P001 active (x)'
LNE392L  EQU   *-LNE392T
         SPACE 1         x'20'
LNE393T  DC    Y(24),C'xxxxxxxx:      zNALC (x)'
LNE393L  EQU   *-LNE393T
         SPACE 1         x'10'
LNE394T  DC    Y(47),C'xxxxxxxx:      dynamic CPU addition enabled (x)'
LNE394L  EQU   *-LNE394T
         SPACE 1         x'08'
LNE395T  DC    Y(42),C'xxxxxxxx:      P002/TX support enabled (x)'
LNE395L  EQU   *-LNE395T
         SPACE 1         x'04'
LNE396T  DC    Y(44),C'xxxxxxxx:      P002C/TXC support enabled (x)'
LNE396L  EQU   *-LNE396T
         SPACE 1         x'02'
LNE397T  DC    Y(37),C'xxxxxxxx:      RI support enabled (x)'
LNE397L  EQU   *-LNE397T
         SPACE 1         x'01'
LNE398T  DC    Y(38),C'xxxxxxxx:      enhanced DAT-2 Arch (x)'
LNE398L  EQU   *-LNE398T
         SPACE 1
LNE400T  DC    Y(28),C'xxxxxxxx:    CVTFLAG5: x''xx'''
LNE400L  EQU   *-LNE400T
         SPACE 1         x'80'
LNE401T  DC    Y(47),C'xxxxxxxx:      Z1/vector extension facility (x)'
LNE401L  EQU   *-LNE401T
         SPACE 1         x'40'
LNE402T  DC    Y(22),C'xxxxxxxx:      EEC (x)'
LNE402L  EQU   *-LNE402T
         SPACE 1         x'20'
LNE403T  DC    Y(00)
LNE403L  EQU   *-LNE403T
         SPACE 1         x'10'
LNE404T  DC    Y(00)
LNE404L  EQU   *-LNE404T
         SPACE 1         x'08'
LNE405T  DC    Y(00)
LNE405L  EQU   *-LNE405T
         SPACE 1         x'04'
LNE406T  DC    Y(00)
LNE406L  EQU   *-LNE406T
         SPACE 1         x'02'
LNE407T  DC    Y(00)
LNE407L  EQU   *-LNE407T
         SPACE 1         x'01
LNE408T  DC    Y(00)
LNE408L  EQU   *-LNE408T
         SPACE 1
LNE410T  DC    Y(28),C'xxxxxxxx:    CVTFLAG6: x''xx'''
LNE410L  EQU   *-LNE410T
         SPACE 1         x'80'
LNE411T  DC    Y(35),C'xxxxxxxx:      solution edition (x)'
LNE411L  EQU   *-LNE411T
         SPACE 1         x'40'
LNE412T  DC    Y(00)
LNE412L  EQU   *-LNE412T
         SPACE 1         x'20'
LNE413T  DC    Y(00)
LNE413L  EQU   *-LNE413T
         SPACE 1         x'10'
LNE414T  DC    Y(00)
LNE414L  EQU   *-LNE414T
         SPACE 1         x'08'
LNE415T  DC    Y(00)
LNE415L  EQU   *-LNE415T
         SPACE 1         x'04'
LNE416T  DC    Y(00)
LNE416L  EQU   *-LNE416T
         SPACE 1         x'02'
LNE417T  DC    Y(00)
LNE417L  EQU   *-LNE417T
         SPACE 1         x'01'
LNE418T  DC    Y(00)
LNE418L  EQU   *-LNE418T
         SPACE 1
LNE420T  DC    Y(28),C'xxxxxxxx:    CVTFLAG7: x''xx'''
LNE420L  EQU   *-LNE420T
         SPACE 1         x'80'
LNE421T  DC    Y(00)
LNE421L  EQU   *-LNE421T
         SPACE 1         x'40'
LNE422T  DC    Y(00)
LNE422L  EQU   *-LNE422T
         SPACE 1         x'20'
LNE423T  DC    Y(00)
LNE423L  EQU   *-LNE423T
         SPACE 1         x'10'
LNE424T  DC    Y(00)
LNE424L  EQU   *-LNE424T
         SPACE 1         x'08'
LNE425T  DC    Y(00)
LNE425L  EQU   *-LNE425T
         SPACE 1         x'04'
LNE426T  DC    Y(00)
LNE426L  EQU   *-LNE426T
         SPACE 1         x'02'
LNE427T  DC    Y(00)
LNE427L  EQU   *-LNE427T
         SPACE 1         x'01'
LNE428T  DC    Y(00)
LNE428L  EQU   *-LNE428T
         SPACE 1
LNE430T  DC    Y(28),C'xxxxxxxx:    CVTFLAG8: x''xx'''
LNE430L  EQU   *-LNE430T
         SPACE 1         x'80'
LNE431T  DC    Y(00)
LNE431L  EQU   *-LNE431T
         SPACE 1         x'40'
LNE432T  DC    Y(00)
LNE432L  EQU   *-LNE432T
         SPACE 1         x'20'
LNE433T  DC    Y(00)
LNE433L  EQU   *-LNE433T
         SPACE 1         x'10'
LNE434T  DC    Y(00)
LNE434L  EQU   *-LNE434T
         SPACE 1         x'08'
LNE435T  DC    Y(00)
LNE435L  EQU   *-LNE435T
         SPACE 1         x'04'
LNE436T  DC    Y(00)
LNE436L  EQU   *-LNE436T
         SPACE 1         x'02'
LNE437T  DC    Y(00)
LNE437L  EQU   *-LNE437T
         SPACE 1         x'01'
LNE438T  DC    Y(00)
LNE438L  EQU   *-LNE438T
         SPACE 1
LNE440T  DC    Y(32),C'xxxxxxxx:    GMT offset (-hh:mm)'
LNE440L  EQU   *-LNE440T
         SPACE 1
LNE450T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-0: x''xx'''
LNE450L  EQU   *-LNE450T
         SPACE 1         x'80'
LNE451T  DC    Y(34),C'xxxxxxxx:      HBB3310 ESA/370 (x)'
LNE451L  EQU   *-LNE451T
         SPACE 1         x'40'
LNE452T  DC    Y(26),C'xxxxxxxx:      HBB4420 (x)'
LNE452L  EQU   *-LNE452T
         SPACE 1         x'20'
LNE453T  DC    Y(26),C'xxxxxxxx:      JBB3313 (x)'
LNE453L  EQU   *-LNE453T
         SPACE 1         x'10'
LNE454T  DC    Y(38),C'xxxxxxxx:      JBB3311, HiperSpace (x)'
LNE454L  EQU   *-LNE454T
         SPACE 1         x'08'
LNE455T  DC    Y(47),C'xxxxxxxx:      HBB4410, spin-lock, UCB svcs (x)'
LNE455L  EQU   *-LNE455T
         SPACE 1         x'04'
LNE456T  DC    Y(41),C'xxxxxxxx:      DataSpace SCOPE=COMMON (x)'
LNE456L  EQU   *-LNE456T
         SPACE 1         x'02'
LNE457T  DC    Y(29),C'xxxxxxxx:      Encryption (x)'
LNE457L  EQU   *-LNE457T
         SPACE 1         x'01'
LNE458T  DC    Y(26),C'xxxxxxxx:      JBB4422 (x)'
LNE458L  EQU   *-LNE458T
         SPACE 1
LNE460T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-1: x''xx'''
LNE460L  EQU   *-LNE460T
         SPACE 1         x'80'
LNE461T  DC    Y(39),C'xxxxxxxx:      HBB4430, dynamic APF (x)'
LNE461L  EQU   *-LNE461T
         SPACE 1         x'40'
LNE462T  DC    Y(36),C'xxxxxxxx:      Work Load Manager (x)'
LNE462L  EQU   *-LNE462T
         SPACE 1         x'20'
LNE463T  DC    Y(41),C'xxxxxxxx:      HBB5510, dynamic exits (x)'
LNE463L  EQU   *-LNE463T
         SPACE 1         x'10'
LNE464T  DC    Y(36),C'xxxxxxxx:      HBB5520, enclaves (x)'
LNE464L  EQU   *-LNE464T
         SPACE 1         x'08'
LNE465T  DC    Y(26),C'xxxxxxxx:      JBB5522 (x)'
LNE465L  EQU   *-LNE465T
         SPACE 1         x'04'
LNE466T  DC    Y(52),C'xxxxxxxx:      HBB6603 OS/390 R3, dynamic LNKLST+
                (x)'
LNE466L  EQU   *-LNE466T
         SPACE 1         x'02'
LNE467T  DC    Y(60),C'xxxxxxxx:      HBB6601 OS/390 R1, product enable+
               /disable (x)'
LNE467L  EQU   *-LNE467T
         SPACE 1         x'01'
LNE468T  DC    Y(57),C'xxxxxxxx:      HBB6602 OS/390 R2, logical PARMLI+
               B svc (x)'
LNE468L  EQU   *-LNE468T
         SPACE 1
LNE470T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-2: x''xx'''
LNE470L  EQU   *-LNE470T
         SPACE 1         x'80'
LNE471T  DC    Y(72),C'xxxxxxxx:      JBB6604 OS/390 R4 / dynamic LPA /+
                Runtime Library svc (x)'
LNE471L  EQU   *-LNE471T
         SPACE 1         x'40'
LNE472T  DC    Y(36),C'xxxxxxxx:      HBB6605 OS/390 R5 (x)'
LNE472L  EQU   *-LNE472T
         SPACE 1         x'20'
LNE473T  DC    Y(36),C'xxxxxxxx:      HBB6606 OS/390 R6 (x)'
LNE473L  EQU   *-LNE473T
         SPACE 1         x'10'
LNE474T  DC    Y(60),C'xxxxxxxx:      BFP simulated or HW if CVTFLAG2 i+
               ndicates (x)'
LNE474L  EQU   *-LNE474T
         SPACE 1         x'08'
LNE475T  DC    Y(36),C'xxxxxxxx:      JBB6607 OS/390 R7 (x)'
LNE475L  EQU   *-LNE475T
         SPACE 1         x'04'
LNE476T  DC    Y(36),C'xxxxxxxx:      HBB6608 OS/390 R8 (x)'
LNE476L  EQU   *-LNE476T
         SPACE 1         x'02'
LNE477T  DC    Y(44),C'xxxxxxxx:      JBB6609/HBB6609 OS/390 R9 (x)'
LNE477L  EQU   *-LNE477T
         SPACE 1         x'01'
LNE478T  DC    Y(37),C'xxxxxxxx:      HBB7703 OS/390 R10 (x)'
LNE478L  EQU   *-LNE478T
         SPACE 1
LNE480T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-3: x''xx'''
LNE480L  EQU   *-LNE480T
         SPACE 1         x'80'
LNE481T  DC    Y(37),C'xxxxxxxx:      pause/release svcs (x)'
LNE481L  EQU   *-LNE481T
         SPACE 1         x'40'
LNE482T  DC    Y(42),C'xxxxxxxx:      IEAVAPE2 && related svcs (x)'
LNE482L  EQU   *-LNE482T
         SPACE 1         x'20'
LNE483T  DC    Y(54),C'xxxxxxxx:      JBB7713 z/OS V1R1 / LPAR clusteri+
               ng (x)'
LNE483L  EQU   *-LNE483T
         SPACE 1         x'10'
LNE484T  DC    Y(48),C'xxxxxxxx:      HBB7705 z/OS V1R2 / 64-bit VS (x)+
               '
LNE484L  EQU   *-LNE484T
         SPACE 1         x'08'
LNE485T  DC    Y(36),C'xxxxxxxx:      HBB7706 z/OS V1R3 (x)'
LNE485L  EQU   *-LNE485T
         SPACE 1         x'04'
LNE486T  DC    Y(36),C'xxxxxxxx:      HBB7707 z/OS V1R4 (x)'
LNE486L  EQU   *-LNE486T
         SPACE 1         x'02'
LNE487T  DC    Y(36),C'xxxxxxxx:      HBB7708 z/OS V1R5 (x)'
LNE487L  EQU   *-LNE487T
         SPACE 1         x'01'
LNE488T  DC    Y(36),C'xxxxxxxx:      HBB7709 z/OS V1R6 (x)'
LNE488L  EQU   *-LNE488T
         SPACE 1
LNE490T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-4: x''xx'''
LNE490L  EQU   *-LNE490T
         SPACE 1         x'80'
LNE491T  DC    Y(28),C'xxxxxxxx:      CSRSI svc (x)'
LNE491L  EQU   *-LNE491T
         SPACE 1         x'40'
LNE492T  DC    Y(40),C'xxxxxxxx:      Unicode callable svcs (x)'
LNE492L  EQU   *-LNE492T
         SPACE 1         x'20'
LNE493T  DC    Y(40),C'xxxxxxxx:      CSRUNIC callable svcs (x)'
LNE493L  EQU   *-LNE493T
         SPACE 1         x'10'
LNE494T  DC    Y(38),C'xxxxxxxx:      IBM License Manager (x)'
LNE494L  EQU   *-LNE494T
         SPACE 1         x'08'
LNE495T  DC    Y(38),C'xxxxxxxx:      ASN && LX reuse Arch (x)'
LNE495L  EQU   *-LNE495T
         SPACE 1         x'04'
LNE496T  DC    Y(29),C'xxxxxxxx:      TIME_ON_CP (x)'
LNE496L  EQU   *-LNE496T
         SPACE 1         x'02'
LNE497T  DC    Y(31),C'xxxxxxxx:      zIIP support (x)'
LNE497L  EQU   *-LNE497T
         SPACE 1         x'01'
LNE498T  DC    Y(30),C'xxxxxxxx:      IFA routine (x)'
LNE498L  EQU   *-LNE498T
         SPACE 1
LNE500T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-5: x''xx'''
LNE500L  EQU   *-LNE500T
         SPACE 1         x'80'
LNE501T  DC    Y(25),C'xxxxxxxx:      z/OS.e (x)'
LNE501L  EQU   *-LNE501T
         SPACE 1         x'40'
LNE502T  DC    Y(36),C'xxxxxxxx:      HBB7720 z/OS V1R7 (x)'
LNE502L  EQU   *-LNE502T
         SPACE 1         x'20'
LNE503T  DC    Y(36),C'xxxxxxxx:      HBB7730 z/OS V1R8 (x)'
LNE503L  EQU   *-LNE503T
         SPACE 1         x'10'
LNE504T  DC    Y(36),C'xxxxxxxx:      HBB7740 z/OS V1R9 (x)'
LNE504L  EQU   *-LNE504T
         SPACE 1         x'08'
LNE505T  DC    Y(37),C'xxxxxxxx:      HBB7750 z/OS V1R10 (x)'
LNE505L  EQU   *-LNE505T
         SPACE 1         x'04'
LNE506T  DC    Y(61),C'xxxxxxxx:      HBB7760 z/OS V1R11 / G64CPU infra+
               structure (x)'
LNE506L  EQU   *-LNE506T
         SPACE 1         x'02'
LNE507T  DC    Y(37),C'xxxxxxxx:      HBB7770 z/OS V1R12 (x)'
LNE507L  EQU   *-LNE507T
         SPACE 1         x'01'
LNE508T  DC    Y(37),C'xxxxxxxx:      HBB7780 z/OS V1R13 (x)'
LNE508L  EQU   *-LNE508T
         SPACE 1
LNE510T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-6: x''xx'''
LNE510L  EQU   *-LNE510T
         SPACE 1         x'80'
LNE511T  DC    Y(36),C'xxxxxxxx:      HBB7790 z/OS V2R1 (x)'
LNE511L  EQU   *-LNE511T
         SPACE 1         x'40'
LNE512T  DC    Y(36),C'xxxxxxxx:      HBB77A0 z/OS V2R2 (x)'
LNE512L  EQU   *-LNE512T
         SPACE 1         x'20'
LNE513T  DC    Y(37),C'xxxxxxxx:      JBB778H z/OS V1R13 (x)'
LNE513L  EQU   *-LNE513T
         SPACE 1         x'10'
LNE514T  DC    Y(00)
LNE514L  EQU   *-LNE514T
         SPACE 1         x'08'
LNE515T  DC    Y(00)
LNE515L  EQU   *-LNE515T
         SPACE 1         x'04'
LNE516T  DC    Y(00)
LNE516L  EQU   *-LNE516T
         SPACE 1         x'02'
LNE517T  DC    Y(00)
LNE517L  EQU   *-LNE517T
         SPACE 1         x'01
LNE518T  DC    Y(00)
LNE518L  EQU   *-LNE518T
         SPACE 1
LNE520T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-7: x''xx'''
LNE520L  EQU   *-LNE520T
         SPACE 1         x'80'
LNE521T  DC    Y(00)
LNE521L  EQU   *-LNE521T
         SPACE 1         x'40'
LNE522T  DC    Y(00)
LNE522L  EQU   *-LNE522T
         SPACE 1         x'20'
LNE523T  DC    Y(00)
LNE523L  EQU   *-LNE523T
         SPACE 1         x'10'
LNE524T  DC    Y(00)
LNE524L  EQU   *-LNE524T
         SPACE 1         x'08'
LNE525T  DC    Y(00)
LNE525L  EQU   *-LNE525T
         SPACE 1         x'04'
LNE526T  DC    Y(00)
LNE526L  EQU   *-LNE526T
         SPACE 1         x'02'
LNE527T  DC    Y(00)
LNE527L  EQU   *-LNE527T
         SPACE 1         x'01'
LNE528T  DC    Y(00)
LNE528L  EQU   *-LNE528T
         SPACE 1
LNE530T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-8: x''xx'''
LNE530L  EQU   *-LNE530T
         SPACE 1         x'80'
LNE531T  DC    Y(27),C'xxxxxxxx:      IEA4xxxx (x)'
LNE531L  EQU   *-LNE531T
         SPACE 1         x'40'
LNE532T  DC    Y(43),C'xxxxxxxx:      Pause with checkpoint-OK (x)'
LNE532L  EQU   *-LNE532T
         SPACE 1         x'20'
LNE533T  DC    Y(35),C'xxxxxxxx:      TIMEUSED ECT=YES (x)'
LNE533L  EQU   *-LNE533T
         SPACE 1         x'10'
LNE534T  DC    Y(38),C'xxxxxxxx:      TIMEUSED TIME_ON_CP (x)'
LNE534L  EQU   *-LNE534T
         SPACE 1         x'08'
LNE535T  DC    Y(25),C'xxxxxxxx:      IEFOPZ (x)'
LNE535L  EQU   *-LNE535T
         SPACE 1         x'04'
LNE536T  DC    Y(00)
LNE536L  EQU   *-LNE536T
         SPACE 1         x'02'
LNE537T  DC    Y(00)
LNE537L  EQU   *-LNE537T
         SPACE 1         x'01'
LNE538T  DC    Y(00)
LNE538L  EQU   *-LNE538T
         SPACE 1
LNE540T  DC    Y(35),C'xxxxxxxx:    CVTOSLVL byte-9: x''xx'''
LNE540L  EQU   *-LNE540T
         SPACE 1         x'80'
LNE541T  DC    Y(00)
LNE541L  EQU   *-LNE541T
         SPACE 1         x'40'
LNE542T  DC    Y(00)
LNE542L  EQU   *-LNE542T
         SPACE 1         x'20'
LNE543T  DC    Y(00)
LNE543L  EQU   *-LNE543T
         SPACE 1         x'10'
LNE544T  DC    Y(00)
LNE544L  EQU   *-LNE544T
         SPACE 1         x'08'
LNE545T  DC    Y(00)
LNE545L  EQU   *-LNE545T
         SPACE 1         x'04'
LNE546T  DC    Y(00)
LNE546L  EQU   *-LNE546T
         SPACE 1         x'02'
LNE547T  DC    Y(00)
LNE547L  EQU   *-LNE547T
         SPACE 1         x'01'
LNE548T  DC    Y(00)
LNE548L  EQU   *-LNE548T
         SPACE 1
LNE550T  DC    Y(36),C'xxxxxxxx:    CVTOSLVL byte-10: x''xx'''
LNE550L  EQU   *-LNE550T
         SPACE 1         x'80'
LNE551T  DC    Y(00)
LNE551L  EQU   *-LNE551T
         SPACE 1         x'40'
LNE552T  DC    Y(00)
LNE552L  EQU   *-LNE552T
         SPACE 1         x'20'
LNE553T  DC    Y(00)
LNE553L  EQU   *-LNE553T
         SPACE 1         x'10'
LNE554T  DC    Y(00)
LNE554L  EQU   *-LNE554T
         SPACE 1         x'08'
LNE555T  DC    Y(00)
LNE555L  EQU   *-LNE555T
         SPACE 1         x'04'
LNE556T  DC    Y(00)
LNE556L  EQU   *-LNE556T
         SPACE 1         x'02'
LNE557T  DC    Y(00)
LNE557L  EQU   *-LNE557T
         SPACE 1         x'01'
LNE558T  DC    Y(00)
LNE558L  EQU   *-LNE558T
         SPACE 1
LNE560T  DC    Y(36),C'xxxxxxxx:    CVTOSLVL byte-11: x''xx'''
LNE560L  EQU   *-LNE560T
         SPACE 1         x'80'
LNE561T  DC    Y(00)
LNE561L  EQU   *-LNE561T
         SPACE 1         x'40'
LNE562T  DC    Y(00)
LNE562L  EQU   *-LNE562T
         SPACE 1         x'20'
LNE563T  DC    Y(00)
LNE563L  EQU   *-LNE563T
         SPACE 1         x'10'
LNE564T  DC    Y(00)
LNE564L  EQU   *-LNE564T
         SPACE 1         x'08'
LNE565T  DC    Y(00)
LNE565L  EQU   *-LNE565T
         SPACE 1         x'04'
LNE566T  DC    Y(00)
LNE566L  EQU   *-LNE566T
         SPACE 1         x'02'
LNE567T  DC    Y(00)
LNE567L  EQU   *-LNE567T
         SPACE 1         x'01
LNE568T  DC    Y(00)
LNE568L  EQU   *-LNE568T
         SPACE 1
LNE570T  DC    Y(36),C'xxxxxxxx:    CVTOSLVL byte-12: x''xx'''
LNE570L  EQU   *-LNE570T
         SPACE 1         x'80'
LNE571T  DC    Y(00)
LNE571L  EQU   *-LNE571T
         SPACE 1         x'40'
LNE572T  DC    Y(00)
LNE572L  EQU   *-LNE572T
         SPACE 1         x'20'
LNE573T  DC    Y(00)
LNE573L  EQU   *-LNE573T
         SPACE 1         x'10'
LNE574T  DC    Y(00)
LNE574L  EQU   *-LNE574T
         SPACE 1         x'08'
LNE575T  DC    Y(00)
LNE575L  EQU   *-LNE575T
         SPACE 1         x'04'
LNE576T  DC    Y(00)
LNE576L  EQU   *-LNE576T
         SPACE 1         x'02'
LNE577T  DC    Y(00)
LNE577L  EQU   *-LNE577T
         SPACE 1         x'01
LNE578T  DC    Y(00)
LNE578L  EQU   *-LNE578T
         SPACE 1
LNE580T  DC    Y(36),C'xxxxxxxx:    CVTOSLVL byte-13: x''xx'''
LNE580L  EQU   *-LNE580T
         SPACE 1         x'80'
LNE581T  DC    Y(00)
LNE581L  EQU   *-LNE581T
         SPACE 1         x'40'
LNE582T  DC    Y(00)
LNE582L  EQU   *-LNE582T
         SPACE 1         x'20'
LNE583T  DC    Y(00)
LNE583L  EQU   *-LNE583T
         SPACE 1         x'10'
LNE584T  DC    Y(00)
LNE584L  EQU   *-LNE584T
         SPACE 1         x'08'
LNE585T  DC    Y(00)
LNE585L  EQU   *-LNE585T
         SPACE 1         x'04'
LNE586T  DC    Y(00)
LNE586L  EQU   *-LNE586T
         SPACE 1         x'02'
LNE587T  DC    Y(00)
LNE587L  EQU   *-LNE587T
         SPACE 1         x'01'
LNE588T  DC    Y(00)
LNE588L  EQU   *-LNE588T
         SPACE 1
LNE590T  DC    Y(36),C'xxxxxxxx:    CVTOSLVL byte-14: x''xx'''
LNE590L  EQU   *-LNE590T
         SPACE 1         x'80'
LNE591T  DC    Y(00)
LNE591L  EQU   *-LNE591T
         SPACE 1         x'40'
LNE592T  DC    Y(00)
LNE592L  EQU   *-LNE592T
         SPACE 1         x'20'
LNE593T  DC    Y(00)
LNE593L  EQU   *-LNE593T
         SPACE 1         x'10'
LNE594T  DC    Y(00)
LNE594L  EQU   *-LNE594T
         SPACE 1         x'08'
LNE595T  DC    Y(00)
LNE595L  EQU   *-LNE595T
         SPACE 1         x'04'
LNE596T  DC    Y(00)
LNE596L  EQU   *-LNE596T
         SPACE 1         x'02'
LNE597T  DC    Y(00)
LNE597L  EQU   *-LNE597T
         SPACE 1         x'01'
LNE598T  DC    Y(00)
LNE598L  EQU   *-LNE598T
         SPACE 1
LNE600T  DC    Y(36),C'xxxxxxxx:    CVTOSLVL byte-15: x''xx'''
LNE600L  EQU   *-LNE600T
         SPACE 1         x'80'
LNE601T  DC    Y(00)
LNE601L  EQU   *-LNE601T
         SPACE 1         x'40'
LNE602T  DC    Y(00)
LNE602L  EQU   *-LNE602T
         SPACE 1         x'20'
LNE603T  DC    Y(00)
LNE603L  EQU   *-LNE603T
         SPACE 1         x'10'
LNE604T  DC    Y(00)
LNE604L  EQU   *-LNE604T
         SPACE 1         x'08'
LNE605T  DC    Y(00)
LNE605L  EQU   *-LNE605T
         SPACE 1         x'04'
LNE606T  DC    Y(00)
LNE606L  EQU   *-LNE606T
         SPACE 1         x'02'
LNE607T  DC    Y(00)
LNE607L  EQU   *-LNE607T
         SPACE 1         x'01'
LNE608T  DC    Y(00)
LNE608L  EQU   *-LNE608T
         SPACE 1
LNE620T  DC    Y(15),C'xxxxxxxx: ECVT:'
LNE620L  EQU   *-LNE620T
         SPACE 1
LNE621T  DC    Y(87),C'xxxxxxxx:    SYSPLEX(xxxxxxxx)  CLONE(xx)  HW(xx+
               xxxxxx)  LPAR(xxxxxxxx)  VMid(xxxxxxxx)'
LNE621L  EQU   *-LNE621T
         SPACE 1
LNE622T  DC    Y(66),C'xxxxxxxx:    PID(xxxxxxxx)  nbr(nnnnnnnn)  Owner+
               (xxxxxxxxxxxxxxxx)'
LNE622L  EQU   *-LNE622T
         SPACE 1
LNE623T  DC    Y(70),C'xxxxxxxx:    Product name(xxxxxxxxxxxxxxxx)  Ver+
               (xx)  Rel(xx)  Mod(xx)'
LNE623L  EQU   *-LNE623T
LNE624T  DC    Y(69),C'xxxxxxxx:    CACHE line size(nnnn)  GRS mode(xxx+
               x)  OMVS available(x)'
LNE624L  EQU   *-LNE624T
         SPACE 1
LNE630T  DC    Y(15),C'xxxxxxxx: ASCB:'
LNE630L  EQU   *-LNE630T
         SPACE 1
LNE631T  DC    Y(65),C'xxxxxxxx:    Logical CPU(nnnnn)  AS(nnnnn)  DPRI+
               (nnn)  Level(nnn)'
LNE631L  EQU   *-LNE631T
         SPACE 1
LNE632T  DC    Y(29),C'xxxxxxxx:    USERID(xxxxxxxx)'
LNE632L  EQU   *-LNE632T
         SPACE 1
LNE640T  DC    Y(15),C'xxxxxxxx: ACEE:'
LNE640L  EQU   *-LNE640T
         SPACE 1
LNE641T  DC    Y(66),C'xxxxxxxx:    USERID(xxxxxxxx)  User name(xxxxxxx+
               xxxxxxxxxxxxxxxxx)'
LNE641L  EQU   *-LNE641T
         SPACE 1
LNE642T  DC    Y(75),C'xxxxxxxx:    Connect group(xxxxxxxx)  APPL name(+
               xxxxxxxx)  TERMID(xxxxxxxx)'
LNE642L  EQU   *-LNE642T
         SPACE 1
LNE650T  DC    Y(15),C'xxxxxxxx:  JES:'
LNE650L  EQU   *-LNE650T
         SPACE 1
LNE651T  DC    Y(66),C'xxxxxxxx:    JOBID(xxxxxxxx)  JOB name(xxxxxxxx)+
                 USERID(xxxxxxxx)'
LNE651L  EQU   *-LNE651T
         SPACE 1
LNE652T  DC    Y(48),C'xxxxxxxx:    Scheduled by(xxxx)  Subsystem(xxxx)+
               '
LNE652L  EQU   *-LNE652T
         SPACE 1
LNE653T  DC    Y(54),C'xxxxxxxx:    entry timestamp(xxxxxxxxxxxxxxxxxxx+
               xxxxx)'
LNE653L  EQU   *-LNE653T
         SPACE 1
LNE654T  DC    Y(54),C'xxxxxxxx:    exec  timestamp(xxxxxxxxxxxxxxxxxxx+
               xxxxx)'
LNE654L  EQU   *-LNE654T
         SPACE 1
LNE660T  DC    Y(15),C'xxxxxxxx:  DFA:'
LNE660L  EQU   *-LNE660T
         SPACE 1
LNE661T  DC    Y(57),C'xxxxxxxx:    Product(n-xxxxxx)  Ver(nn)  Rel(nn)+
                 Mod(nn)'
LNE661L  EQU   *-LNE661T
         SPACE 1
LNE662T  DC    Y(46),C'xxxxxxxx:    compression type(n-xxxxxxxxxxxxx)'
LNE662L  EQU   *-LNE662T
         SPACE 1
LNE663T  DC    Y(44),C'xxxxxxxx:    PDSE maximum generations(nnnnn)'
LNE663L  EQU   *-LNE663T
         SPACE 1
LNE670T  DC    Y(34),C'xxxxxxxx:    Feature byte-0: x''zn'''
LNE670L  EQU   *-LNE670T
         SPACE 1         x'80'
LNE671T  DC    Y(25),C'xxxxxxxx:      MVS/XA (x)'
LNE671L  EQU   *-LNE671T
         SPACE 1         x'40'
LNE672T  DC    Y(38),C'xxxxxxxx:      multi VSAM LSR pool (x)'
LNE672L  EQU   *-LNE672T
         SPACE 1         x'20'
LNE673T  DC    Y(35),C'xxxxxxxx:      erase on scratch (x)'
LNE673L  EQU   *-LNE673T
         SPACE 1         x'10'
LNE674T  DC    Y(45),C'xxxxxxxx:      extended recovery facility (x)'
LNE674L  EQU   *-LNE674T
         SPACE 1         x'08'
LNE675T  DC    Y(31),C'xxxxxxxx:      EXPORT by CI (x)'
LNE675L  EQU   *-LNE675T
         SPACE 1         x'04'
LNE676T  DC    Y(43),C'xxxxxxxx:      erase on scratch for ICF (x)'
LNE676L  EQU   *-LNE676T
         SPACE 1         x'02'
LNE677T  DC    Y(41),C'xxxxxxxx:      System Managed Storage (x)'
LNE677L  EQU   *-LNE677T
         SPACE 1         x'01'
LNE678T  DC    Y(32),C'xxxxxxxx:      PDS/E support (x)'
LNE678L  EQU   *-LNE678T
         SPACE 1
LNE680T  DC    Y(34),C'xxxxxxxx:    Feature byte-1: x''zn'''
LNE680L  EQU   *-LNE680T
         SPACE 1         x'80'
LNE681T  DC    Y(00)
LNE681L  EQU   *-LNE681T
         SPACE 1         x'40'
LNE682T  DC    Y(00)
LNE682L  EQU   *-LNE682T
         SPACE 1         x'20'
LNE683T  DC    Y(43),C'xxxxxxxx:      file management services (x)'
LNE683L  EQU   *-LNE683T
         SPACE 1         x'10'
LNE684T  DC    Y(47),C'xxxxxxxx:      installation dflt compaction (x)'
LNE684L  EQU   *-LNE684T
         SPACE 1         x'08'
LNE685T  DC    Y(48),C'xxxxxxxx:      bypass channel pgm prefix bld (x)+
               '
LNE685L  EQU   *-LNE685T
         SPACE 1         x'04'
LNE686T  DC    Y(27),C'xxxxxxxx:      SSF svcs (x)'
LNE686L  EQU   *-LNE686T
         SPACE 1         x'02'
LNE687T  DC    Y(37),C'xxxxxxxx:      MMS supports XTIOT (x)'
LNE687L  EQU   *-LNE687T
         SPACE 1         x'01'
LNE688T  DC    Y(54),C'xxxxxxxx:      compaction dflt set by installati+
               on (x)'
LNE688L  EQU   *-LNE688T
         SPACE 1
LNE690T  DC    Y(34),C'xxxxxxxx:    Feature byte-2: x''zn'''
LNE690L  EQU   *-LNE690T
         SPACE 1         x'80'
LNE691T  DC    Y(54),C'xxxxxxxx:      VOLSER extracted from sense info +
               OK (x)'
LNE691L  EQU   *-LNE691T
         SPACE 1         x'40'
LNE692T  DC    Y(38),C'xxxxxxxx:      SAM Extended Format (x)'
LNE692L  EQU   *-LNE692T
         SPACE 1         x'20'
LNE693T  DC    Y(39),C'xxxxxxxx:      KSDS Extended Format (x)'
LNE693L  EQU   *-LNE693T
         SPACE 1         x'10'
LNE694T  DC    Y(42),C'xxxxxxxx:      AM compaction supported (x)'
LNE694L  EQU   *-LNE694T
         SPACE 1         x'08'
LNE695T  DC    Y(49),C'xxxxxxxx:      SMSVSAM server initialized RLS (x+
               )'
LNE695L  EQU   *-LNE695T
         SPACE 1         x'04'
LNE696T  DC    Y(53),C'xxxxxxxx:      data set recall via ARCHRCAL macr+
               o (x)'
LNE696L  EQU   *-LNE696T
         SPACE 1         x'02'
LNE697T  DC    Y(29),C'xxxxxxxx:      DSERV exit (x)'
LNE697L  EQU   *-LNE697T
         SPACE 1         x'01'
LNE698T  DC    Y(36),C'xxxxxxxx:      DFSMS DLL support (x)'
LNE698L  EQU   *-LNE698T
         SPACE 1
LNE700T  DC    Y(34),C'xxxxxxxx:    Feature byte-3: x''zn'''
LNE700L  EQU   *-LNE700T
         SPACE 1         x'80'
LNE701T  DC    Y(00)
LNE701L  EQU   *-LNE701T
         SPACE 1         x'40'
LNE702T  DC    Y(65),C'xxxxxxxx:      DFP NIP svcs via IGGSSRV macro, d+
               ynamic LNKLST (x)'
LNE702L  EQU   *-LNE702T
         SPACE 1         x'20'
LNE703T  DC    Y(72),C'xxxxxxxx:      catalog info routine IKJEHCIR sup+
               ports format-2 warea (x)'
LNE703L  EQU   *-LNE703T
         SPACE 1         x'10'
LNE704T  DC    Y(42),C'xxxxxxxx:      RunTime Library Support (x)'
LNE704L  EQU   *-LNE704T
         SPACE 1         x'08'
LNE705T  DC    Y(30),C'xxxxxxxx:      dynamic LPA (x)'
LNE705L  EQU   *-LNE705T
         SPACE 1         x'04'
LNE706T  DC    Y(41),C'xxxxxxxx:      DFSMS loader fork exit (x)'
LNE706L  EQU   *-LNE706T
         SPACE 1         x'02'
LNE707T  DC    Y(52),C'xxxxxxxx:      software support for RVA SNAPSHOT+
                (x)'
LNE707L  EQU   *-LNE707T
         SPACE 1         x'01'
LNE708T  DC    Y(47),C'xxxxxxxx:      API support for RVA SNAPSHOT (x)'
LNE708L  EQU   *-LNE708T
         SPACE 1
LNE710T  DC    Y(34),C'xxxxxxxx:    Feature byte-4: x''zn'''
LNE710L  EQU   *-LNE710T
         SPACE 1         x'80'
LNE711T  DC    Y(34),C'xxxxxxxx:      unmanaged PDS/E (x)'
LNE711L  EQU   *-LNE711T
         SPACE 1         x'40'
LNE712T  DC    Y(41),C'xxxxxxxx:      BLOCKTOKENSIZE=REQUIRE (x)'
LNE712L  EQU   *-LNE712T
         SPACE 1         x'20'
LNE713T  DC    Y(43),C'xxxxxxxx:      BLDL PARMS START=, STOP= (x)'
LNE713L  EQU   *-LNE713T
         SPACE 1         x'10'
LNE714T  DC    Y(29),C'xxxxxxxx:      USEEAV=YES (x)'
LNE714L  EQU   *-LNE714T
         SPACE 1         x'08'
LNE715T  DC    Y(30),C'xxxxxxxx:      SAM_USE_HPF (x)'
LNE715L  EQU   *-LNE715T
         SPACE 1         x'04'
LNE716T  DC    Y(45),C'xxxxxxxx:      BSAM Pipes performance SPE (x)'
LNE716L  EQU   *-LNE716T
         SPACE 1         x'02'
LNE717T  DC    Y(49),C'xxxxxxxx:      ANSI-4 tape labels else ANSI-3 (x+
               )'
LNE717L  EQU   *-LNE717T
         SPACE 1         x'01'
LNE718T  DC    Y(60),C'xxxxxxxx:      force all ANSI tape labels else f+
               orce new (x)'
LNE718L  EQU   *-LNE718T
         SPACE 1
LNE720T  DC    Y(34),C'xxxxxxxx:    Feature byte-5: x''zn'''
LNE720L  EQU   *-LNE720T
         SPACE 1         x'80'
LNE721T  DC    Y(00)
LNE721L  EQU   *-LNE721T
         SPACE 1         x'40'
LNE722T  DC    Y(32),C'xxxxxxxx:      COPYSDB=LARGE (x)'
LNE722L  EQU   *-LNE722T
         SPACE 1         x'30'
LNE723AT DC    Y(32),C'xxxxxxxx:      COPYSDB=INPUT (x)'
LNE723AL EQU   *-LNE723AT
         SPACE 1         x'20'
LNE723T  DC    Y(36),C'xxxxxxxx:      COPYSDB=SMALL|YES (x)'
LNE723L  EQU   *-LNE723T
         SPACE 1         x'10'
LNE724T  DC    Y(29),C'xxxxxxxx:      COPYSDB=NO (x)'
LNE724L  EQU   *-LNE724T
         SPACE 1         x'08'
LNE725T  DC    Y(47),C'xxxxxxxx:      DATACLAS media enforced TAPE (x)'
LNE725L  EQU   *-LNE725T
         SPACE 1         x'04'
LNE726T  DC    Y(46),C'xxxxxxxx:      DATACLAS media enforced JAG (x)'
LNE726L  EQU   *-LNE726T
         SPACE 1         x'02'
LNE727T  DC    Y(68),C'xxxxxxxx:      when no preference accept all med+
               ia types for MTL (x)'
LNE727L  EQU   *-LNE727T
         SPACE 1         x'01'
LNE728T  DC    Y(24),C'xxxxxxxx:      STIFF (x)'
LNE728L  EQU   *-LNE728T
         SPACE 1
LNE730T  DC    Y(34),C'xxxxxxxx:    Feature byte-6: x''zn'''
LNE730L  EQU   *-LNE730T
         SPACE 1         x'80'
LNE731T  DC    Y(34),C'xxxxxxxx:      TAPEAUTHDSN=YES (x)'
LNE731L  EQU   *-LNE731T
         SPACE 1         x'40'
LNE732T  DC    Y(33),C'xxxxxxxx:      TAPEAUTHF1=YES (x)'
LNE732L  EQU   *-LNE732T
         SPACE 1         x'20'
LNE733T  DC    Y(35),C'xxxxxxxx:      TAPEAUTHRC8=WARN (x)'
LNE733L  EQU   *-LNE733T
         SPACE 1         x'10'
LNE734T  DC    Y(35),C'xxxxxxxx:      TAPEAUTHRC4=FAIL (x)'
LNE734L  EQU   *-LNE734T
         SPACE 1         x'08'
LNE735T  DC    Y(43),C'xxxxxxxx:      XIOT/UNCAPT UCBS FOR BAM (x)'
LNE735L  EQU   *-LNE735T
         SPACE 1         x'04'
LNE736T  DC    Y(45),C'xxxxxxxx:      TAPEMULTIVOLUMEERROR=ALLOW (x)'
LNE736L  EQU   *-LNE736T
         SPACE 1         x'02'
LNE737T  DC    Y(44),C'xxxxxxxx:      TAPEMULTIVOLUMEERROR=FAIL (x)'
LNE737L  EQU   *-LNE737T
         SPACE 1         x'01'
LNE738T  DC    Y(43),C'xxxxxxxx:      > 253 SUBSYSTEMS allowed (x)'
LNE738L  EQU   *-LNE738T
         SPACE 1
LNE740T  DC    Y(34),C'xxxxxxxx:    Feature byte-7: x''zn'''
LNE740L  EQU   *-LNE740T
         SPACE 1         x'80'
LNE741T  DC    Y(39),C'xxxxxxxx:      VSAM enabled for EAS (x)'
LNE741L  EQU   *-LNE741T
         SPACE 1         x'40'
LNE742T  DC    Y(38),C'xxxxxxxx:      SAM enabled for EAS (x)'
LNE742L  EQU   *-LNE742T
         SPACE 1         x'20'
LNE743T  DC    Y(40),C'xxxxxxxx:      PDS/E enabled for EAS (x)'
LNE743L  EQU   *-LNE743T
         SPACE 1         x'10'
LNE744T  DC    Y(38),C'xxxxxxxx:      PDS enabled for EAS (x)'
LNE744L  EQU   *-LNE744T
         SPACE 1         x'08'
LNE745T  DC    Y(39),C'xxxxxxxx:      BDAM enabled for EAS (x)'
LNE745L  EQU   *-LNE745T
         SPACE 1         x'04'
LNE746T  DC    Y(54),C'xxxxxxxx:      Extended Format SEQ enabled for E+
               AS (x)'
LNE746L  EQU   *-LNE746T
         SPACE 1         x'02'
LNE747T  DC    Y(42),C'xxxxxxxx:      DSORG=U enabled for EAS (x)'
LNE747L  EQU   *-LNE747T
         SPACE 1         x'01'
LNE748T  DC    Y(43),C'xxxxxxxx:      EXPIRATION_MESSAGE=NEVER (x)'
LNE748L  EQU   *-LNE748T
         SPACE 1
LNE750T  DC    Y(34),C'xxxxxxxx:    Feature byte-8: x''zn'''
LNE750L  EQU   *-LNE750T
         SPACE 1         x'80'
LNE751T  DC    Y(44),C'xxxxxxxx:      JES3_ALLOC_ASSIST enabled (x)'
LNE751L  EQU   *-LNE751T
         SPACE 1         x'40'
LNE752T  DC    Y(44),C'xxxxxxxx:      mbr sel User Exit support (x)'
LNE752L  EQU   *-LNE752T
         SPACE 1         x'20'
LNE753T  DC    Y(42),C'xxxxxxxx:      PDSE generation support (x)'
LNE753L  EQU   *-LNE753T
         SPACE 1         x'10'
LNE754T  DC    Y(43),C'xxxxxxxx:      zEDC Compression support (x)'
LNE754L  EQU   *-LNE754T
         SPACE 1         x'08'
LNE755T  DC    Y(57),C'xxxxxxxx:      DADSM extend secondary-space redu+
               ction (x)'
LNE755L  EQU   *-LNE755T
         SPACE 1         x'04'
LNE756T  DC    Y(84),C'xxxxxxxx:      DSS full volume dump && rest will+
                obtain resource to avoid lockout (x)'
LNE756L  EQU   *-LNE756T
         SPACE 1         x'02'
LNE757T  DC    Y(43),C'xxxxxxxx:      DCBE bypass Auth support (x)'
LNE757L  EQU   *-LNE757T
         SPACE 1         x'01'
LNE758T  DC    Y(56),C'xxxxxxxx:      DFSMS support for data set encryp+
               tion (x)'
LNE758L  EQU   *-LNE758T
         SPACE 1
LNE760T  DC    Y(34),C'xxxxxxxx:    Feature byte-9: x''zn'''
LNE760L  EQU   *-LNE760T
         SPACE 1         x'80'
LNE761T  DC    Y(46),C'xxxxxxxx:      READ-ONLY secondary support (x)'
LNE761L  EQU   *-LNE761T
         SPACE 1         x'40'
LNE762T  DC    Y(55),C'xxxxxxxx:      DSSB above-the-bar for VSAM or MM+
               SRV (x)'
LNE762L  EQU   *-LNE762T
         SPACE 1         x'20'
LNE763T  DC    Y(40),C'xxxxxxxx:      DEVTYPE XTIOT support (x)'
LNE763L  EQU   *-LNE763T
         SPACE 1         x'10'
LNE764T  DC    Y(00)
LNE764L  EQU   *-LNE764T
         SPACE 1         x'08'
LNE765T  DC    Y(00)
LNE765L  EQU   *-LNE765T
         SPACE 1         x'04'
LNE766T  DC    Y(00)
LNE766L  EQU   *-LNE766T
         SPACE 1         x'02'
LNE767T  DC    Y(00)
LNE767L  EQU   *-LNE767T
         SPACE 1         x'01'
LNE768T  DC    Y(00)
LNE768L  EQU   *-LNE768T
         SPACE 1
LNE780T  DC    Y(38),C'xxxxxxxx:    HPF Feature byte-1: x''zn'''
LNE780L  EQU   *-LNE780T
         SPACE 1         x'80'
LNE781T  DC    Y(00)
LNE781L  EQU   *-LNE781T
         SPACE 1         x'40'
LNE782T  DC    Y(00)
LNE782L  EQU   *-LNE782T
         SPACE 1         x'20'
LNE783T  DC    Y(00)
LNE783L  EQU   *-LNE783T
         SPACE 1         x'10'
LNE784T  DC    Y(00)
LNE784L  EQU   *-LNE784T
         SPACE 1         x'08'
LNE785T  DC    Y(41),C'xxxxxxxx:      transfer TCA extension (x)'
LNE785L  EQU   *-LNE785T
         SPACE 1         x'04'
LNE786T  DC    Y(30),C'xxxxxxxx:      HPF phase 1 (x)'
LNE786L  EQU   *-LNE786T
         SPACE 1         x'02'
LNE787T  DC    Y(35),C'xxxxxxxx:      imbedded LR list (x)'
LNE787L  EQU   *-LNE787T
         SPACE 1         x'01'
LNE788T  DC    Y(39),C'xxxxxxxx:      Format update Writes (x)'
LNE788L  EQU   *-LNE788T
         SPACE 1
LNE790T  DC    Y(38),C'xxxxxxxx:    HPF Feature byte-2: x''zn'''
LNE790L  EQU   *-LNE790T
         SPACE 1         x'80'
LNE791T  DC    Y(38),C'xxxxxxxx:      Format Write enable (x)'
LNE791L  EQU   *-LNE791T
         SPACE 1         x'40'
LNE792T  DC    Y(00)
LNE792L  EQU   *-LNE792T
         SPACE 1         x'20'
LNE793T  DC    Y(00)
LNE793L  EQU   *-LNE793T
         SPACE 1         x'10'
LNE794T  DC    Y(00)
LNE794L  EQU   *-LNE794T
         SPACE 1         x'08'
LNE795T  DC    Y(00)
LNE795L  EQU   *-LNE795T
         SPACE 1         x'04'
LNE796T  DC    Y(00)
LNE796L  EQU   *-LNE796T
         SPACE 1         x'02'
LNE797T  DC    Y(00)
LNE797L  EQU   *-LNE797T
         SPACE 1         x'01'
LNE798T  DC    Y(00)
LNE798L  EQU   *-LNE798T
         SPACE 1
LNE800T  DC    Y(38),C'xxxxxxxx:    HPF Feature byte-3: x''zn'''
LNE800L  EQU   *-LNE800T
         SPACE 1         x'80'
LNE801T  DC    Y(00)
LNE801L  EQU   *-LNE801T
         SPACE 1         x'40'
LNE802T  DC    Y(00)
LNE802L  EQU   *-LNE802T
         SPACE 1         x'20'
LNE803T  DC    Y(00)
LNE803L  EQU   *-LNE803T
         SPACE 1         x'10'
LNE804T  DC    Y(00)
LNE804L  EQU   *-LNE804T
         SPACE 1         x'08'
LNE805T  DC    Y(00)
LNE805L  EQU   *-LNE805T
         SPACE 1         x'04'
LNE806T  DC    Y(00)
LNE806L  EQU   *-LNE806T
         SPACE 1         x'02'
LNE807T  DC    Y(00)
LNE807L  EQU   *-LNE807T
         SPACE 1         x'01'
LNE808T  DC    Y(00)
LNE808L  EQU   *-LNE808T
         SPACE 1
LNE810T  DC    Y(38),C'xxxxxxxx:    HPF Feature byte-4: x''zn'''
LNE810L  EQU   *-LNE810T
         SPACE 1         x'80'
LNE811T  DC    Y(00)
LNE811L  EQU   *-LNE811T
         SPACE 1         x'40'
LNE812T  DC    Y(00)
LNE812L  EQU   *-LNE812T
         SPACE 1         x'20'
LNE813T  DC    Y(00)
LNE813L  EQU   *-LNE813T
         SPACE 1         x'10'
LNE814T  DC    Y(00)
LNE814L  EQU   *-LNE814T
         SPACE 1         x'08'
LNE815T  DC    Y(00)
LNE815L  EQU   *-LNE815T
         SPACE 1         x'04'
LNE816T  DC    Y(00)
LNE816L  EQU   *-LNE816T
         SPACE 1         x'02'
LNE817T  DC    Y(00)
LNE817L  EQU   *-LNE817T
         SPACE 1         x'01'
LNE818T  DC    Y(00)
LNE818L  EQU   *-LNE818T
         SPACE 1
LNE830T  DC    Y(15),C'xxxxxxxx: TIOT:'
LNE830L  EQU   *-LNE830T
         SPACE 1
LNE831T  DC    Y(73),C'xxxxxxxx:    JOB name(xxxxxxxx)  JOB step(xxxxxx+
               xx)  PROC step(xxxxxxxx)'
LNE831L  EQU   *-LNE831T
         SPACE 1
LNE832T  DC    Y(44),C'xxxxxxxx:    DD name(xxxxxxxx)  DSN count (nn)'
LNE832L  EQU   *-LNE832T
         SPACE 1
LNE840T  DC    Y(15),C'xxxxxxxx:   LE:'
LNE840L  EQU   *-LNE840T
         SPACE 1
LNE841T  DC    Y(69),C'xxxxxxxx:    Product(nn)  Ver(nn)  Rel(nn)  Mod(+
               nn)  xxxxxxxxxxxxxxxx'
LNE841L  EQU   *-LNE841T
         SPACE 1
LNE842T  DC    Y(30),C'xxxxxxxx:    compiler ARCH(nn)'
LNE842L  EQU   *-LNE842T
         SPACE 1
LNE850T  DC    Y(44),C'xxxxxxxx:    System/sub-system byte-0: x''zn'''
LNE850L  EQU   *-LNE850T
         SPACE 1         x'80'
LNE851T  DC    Y(23),C'xxxxxxxx:      CICS (x)'
LNE851L  EQU   *-LNE851T
         SPACE 1         x'40'
LNE852T  DC    Y(28),C'xxxxxxxx:      CICS_PIPI (x)'
LNE852L  EQU   *-LNE852T
         SPACE 1         x'20'
LNE853T  DC    Y(00)
LNE853L  EQU   *-LNE853T
         SPACE 1         x'10'
LNE854T  DC    Y(00)
LNE854L  EQU   *-LNE854T
         SPACE 1         x'08'
LNE855T  DC    Y(22),C'xxxxxxxx:      TSO (x)'
LNE855L  EQU   *-LNE855T
         SPACE 1         x'04'
LNE856T  DC    Y(24),C'xxxxxxxx:      batch (x)'
LNE856L  EQU   *-LNE856T
         SPACE 1         x'02'
LNE857T  DC    Y(28),C'xxxxxxxx:      z/OS UNIX (x)'
LNE857L  EQU   *-LNE857T
         SPACE 1         x'01'
LNE858T  DC    Y(00)
LNE858L  EQU   *-LNE858T
         SPACE 1
LNE860T  DC    Y(44),C'xxxxxxxx:    System/sub-system byte-1: x''zn'''
LNE860L  EQU   *-LNE860T
         SPACE 1         x'80'
LNE861T  DC    Y(00)
LNE861L  EQU   *-LNE861T
         SPACE 1         x'40'
LNE862T  DC    Y(00)
LNE862L  EQU   *-LNE862T
         SPACE 1         x'20'
LNE863T  DC    Y(00)
LNE863L  EQU   *-LNE863T
         SPACE 1         x'10'
LNE864T  DC    Y(00)
LNE864L  EQU   *-LNE864T
         SPACE 1         x'08'
LNE865T  DC    Y(00)
LNE865L  EQU   *-LNE865T
         SPACE 1         x'04'
LNE866T  DC    Y(00)
LNE866L  EQU   *-LNE866T
         SPACE 1         x'02'
LNE867T  DC    Y(00)
LNE867L  EQU   *-LNE867T
         SPACE 1         x'01'
LNE868T  DC    Y(00)
LNE868L  EQU   *-LNE868T
         SPACE 1
LNE870T  DC    Y(44),C'xxxxxxxx:    System/sub-system byte-2: x''zn'''
LNE870L  EQU   *-LNE870T
         SPACE 1         x'80'
LNE871T  DC    Y(00)
LNE871L  EQU   *-LNE871T
         SPACE 1         x'40'
LNE872T  DC    Y(00)
LNE872L  EQU   *-LNE872T
         SPACE 1         x'20'
LNE873T  DC    Y(00)
LNE873L  EQU   *-LNE873T
         SPACE 1         x'10'
LNE874T  DC    Y(00)
LNE874L  EQU   *-LNE874T
         SPACE 1         x'08'
LNE875T  DC    Y(00)
LNE875L  EQU   *-LNE875T
         SPACE 1         x'04'
LNE876T  DC    Y(00)
LNE876L  EQU   *-LNE876T
         SPACE 1         x'02'
LNE877T  DC    Y(00)
LNE877L  EQU   *-LNE877T
         SPACE 1         x'01'
LNE878T  DC    Y(00)
LNE878L  EQU   *-LNE878T
         SPACE 1
LNE880T  DC    Y(44),C'xxxxxxxx:    System/sub-system byte-3: x''zn'''
LNE880L  EQU   *-LNE880T
         SPACE 1         x'80'
LNE881T  DC    Y(00)
LNE881L  EQU   *-LNE881T
         SPACE 1         x'40'
LNE882T  DC    Y(00)
LNE882L  EQU   *-LNE882T
         SPACE 1         x'20'
LNE883T  DC    Y(00)
LNE883L  EQU   *-LNE883T
         SPACE 1         x'10'
LNE884T  DC    Y(00)
LNE884L  EQU   *-LNE884T
         SPACE 1         x'08'
LNE885T  DC    Y(00)
LNE885L  EQU   *-LNE885T
         SPACE 1         x'04'
LNE886T  DC    Y(24),C'xxxxxxxx:      z/VSE (x)'
LNE886L  EQU   *-LNE886T
         SPACE 1         x'02'
LNE887T  DC    Y(23),C'xxxxxxxx:      z/OS (x)'
LNE887L  EQU   *-LNE887T
         SPACE 1         x'01'
LNE888T  DC    Y(00)
LNE888L  EQU   *-LNE888T
         SPACE 1
LNE890T  DC    Y(38),C'xxxxxxxx:    Environment byte-0: x''zn'''
LNE890L  EQU   *-LNE890T
         SPACE 1         x'80'
LNE891T  DC    Y(46),C'xxxxxxxx:      PIPI pre-init pgm interface (x)'
LNE891L  EQU   *-LNE891T
         SPACE 1         x'40'
LNE892T  DC    Y(28),C'xxxxxxxx:      PIPI-MAIN (x)'
LNE892L  EQU   *-LNE892T
         SPACE 1         x'20'
LNE893T  DC    Y(27),C'xxxxxxxx:      PIPI-SUB (x)'
LNE893L  EQU   *-LNE893T
         SPACE 1         x'10'
LNE894T  DC    Y(29),C'xxxxxxxx:      PIPI-SUBDP (x)'
LNE894L  EQU   *-LNE894T
         SPACE 1         x'08'
LNE895T  DC    Y(56),C'xxxxxxxx:      PICI pre-init compatability inter+
               face (x)'
LNE895L  EQU   *-LNE895T
         SPACE 1         x'04'
LNE896T  DC    Y(33),C'xxxxxxxx:      nested enclave (x)'
LNE896L  EQU   *-LNE896T
         SPACE 1         x'02'
LNE897T  DC    Y(44),C'xxxxxxxx:      LRR lib routine retention (x)'
LNE897L  EQU   *-LNE897T
         SPACE 1         x'01'
LNE898T  DC    Y(32),C'xxxxxxxx:      runtime reuse (x)'
LNE898L  EQU   *-LNE898T
         SPACE 1
LNE900T  DC    Y(38),C'xxxxxxxx:    Environment byte-1: x''zn'''
LNE900L  EQU   *-LNE900T
         SPACE 1         x'80'
LNE901T  DC    Y(25),C'xxxxxxxx:      XPLINK (x)'
LNE901L  EQU   *-LNE901T
         SPACE 1         x'40'
LNE902T  DC    Y(31),C'xxxxxxxx:      XPLINK && RTO (x)'
LNE902L  EQU   *-LNE902T
         SPACE 1         x'20'
LNE903T  DC    Y(36),C'xxxxxxxx:      1 or more PTHREAD (x)'
LNE903L  EQU   *-LNE903T
         SPACE 1         x'10'
LNE904T  DC    Y(45),C'xxxxxxxx:      IPT initial process thread (x)'
LNE904L  EQU   *-LNE904T
         SPACE 1         x'08'
LNE905T  DC    Y(38),C'xxxxxxxx:      multi-threaded fork (x)'
LNE905L  EQU   *-LNE905T
         SPACE 1         x'04'
LNE906T  DC    Y(27),C'xxxxxxxx:      AMODE 31 (x)'
LNE906L  EQU   *-LNE906T
         SPACE 1         x'02'
LNE907T  DC    Y(00)
LNE907L  EQU   *-LNE907T
         SPACE 1         x'01'
LNE908T  DC    Y(30),C'xxxxxxxx:      PIPI-MAINDP (x)'
LNE908L  EQU   *-LNE908T
         SPACE 1
LNE910T  DC    Y(38),C'xxxxxxxx:    Environment byte-2: x''zn'''
LNE910L  EQU   *-LNE910T
         SPACE 1         x'80'
LNE911T  DC    Y(00)
LNE911L  EQU   *-LNE911T
         SPACE 1         x'40'
LNE912T  DC    Y(00)
LNE912L  EQU   *-LNE912T
         SPACE 1         x'20'
LNE913T  DC    Y(00)
LNE913L  EQU   *-LNE913T
         SPACE 1         x'10'
LNE914T  DC    Y(00)
LNE914L  EQU   *-LNE914T
         SPACE 1         x'08'
LNE915T  DC    Y(00)
LNE915L  EQU   *-LNE915T
         SPACE 1         x'04'
LNE916T  DC    Y(00)
LNE916L  EQU   *-LNE916T
         SPACE 1         x'02'
LNE917T  DC    Y(00)
LNE917L  EQU   *-LNE917T
         SPACE 1         x'01'
LNE918T  DC    Y(00)
LNE918L  EQU   *-LNE918T
         SPACE 1
LNE920T  DC    Y(38),C'xxxxxxxx:    Environment byte-3: x''zn'''
LNE920L  EQU   *-LNE920T
         SPACE 1         x'80'
LNE921T  DC    Y(00)
LNE921L  EQU   *-LNE921T
         SPACE 1         x'40'
LNE922T  DC    Y(00)
LNE922L  EQU   *-LNE922T
         SPACE 1         x'20'
LNE923T  DC    Y(00)
LNE923L  EQU   *-LNE923T
         SPACE 1         x'10'
LNE924T  DC    Y(00)
LNE924L  EQU   *-LNE924T
         SPACE 1         x'08'
LNE925T  DC    Y(00)
LNE925L  EQU   *-LNE925T
         SPACE 1         x'04'
LNE926T  DC    Y(00)
LNE926L  EQU   *-LNE926T
         SPACE 1         x'02'
LNE927T  DC    Y(00)
LNE927L  EQU   *-LNE927T
         SPACE 1         x'01'
LNE928T  DC    Y(00)
LNE928L  EQU   *-LNE928T
         SPACE 1
LNE940T  DC    Y(30),C'xxxxxxxx:    Run-Time options:'
LNE940L  EQU   *-LNE940T
         SPACE 1
LNE941T  DC    Y(74),C'xxxxxxxx:      OCB ver(nn) xxxxxxxxxxxxxxxx  FOR+
               MAT_64 (x)  ORIGIN_IBM (x)'
LNE941L  EQU   *-LNE941T
         SPACE 1
LNE942T  DC    Y(75),C'xxxxxxxx:        AIXBLD_ON (x)  ALL31_ON (x)  CB+
               LOPTS_ON (x)  CBLQDA_ON (x)'
LNE942L  EQU   *-LNE942T
         SPACE 1
LNE943T  DC    Y(74),C'xxxxxxxx:        CHECK_ON (x)  DEBUG_ON (x)  HEA+
               P_BELOW (x)  HEAP_FREE (x)'
LNE943L  EQU   *-LNE943T
         SPACE 1
LNE944T  DC    Y(48),C'xxxxxxxx:        STACK_BELOW (x)  STACK_FREE (x)+
               '
LNE944L  EQU   *-LNE944T
         SPACE 1
LNE960T  DC    Y(15),C'xxxxxxxx:  CSV:'
LNE960L  EQU   *-LNE960T
         SPACE 1
LNE961T  DC    Y(44),C'xxxxxxxx:    Program(xxxxxxxx)  loader(xxxx)'
LNE961L  EQU   *-LNE961T
         SPACE 1
LNE962T  DC    Y(55),C'xxxxxxxx:    PDATA(x''znznznznznznznznznznznznzn+
               znznzn'')'
LNE962L  EQU   *-LNE962T
         SPACE 1
LNE970T  DC    Y(31),C'xxxxxxxx:    Attribute 1: x''zn'''
LNE970L  EQU   *-LNE970T
         SPACE 1         x'80'
LNE971T  DC    Y(00)
LNE971L  EQU   *-LNE971T
         SPACE 1         x'40'
LNE972T  DC    Y(00)
LNE972L  EQU   *-LNE972T
         SPACE 1         x'20'
LNE973T  DC    Y(23),C'xxxxxxxx:      RENT (x)'
LNE973L  EQU   *-LNE973T
         SPACE 1         x'10'
LNE974T  DC    Y(23),C'xxxxxxxx:      REUS (x)'
LNE974L  EQU   *-LNE974T
         SPACE 1         x'08'
LNE975T  DC    Y(34),C'xxxxxxxx:      not loaded only (x)'
LNE975L  EQU   *-LNE975T
         SPACE 1         x'04'
LNE976T  DC    Y(27),C'xxxxxxxx:      overlay (x)'
LNE976L  EQU   *-LNE976T
         SPACE 1         x'02'
LNE977T  DC    Y(24),C'xxxxxxxx:      ALIAS (x)'
LNE977L  EQU   *-LNE977T
         SPACE 1         x'01'
LNE978T  DC    Y(00)
LNE978L  EQU   *-LNE978T
         SPACE 1
LNE980T  DC    Y(31),C'xxxxxxxx:    Attribute 2: x''zn'''
LNE980L  EQU   *-LNE980T
         SPACE 1         x'80'
LNE981T  DC    Y(37),C'xxxxxxxx:      authorized library (x)'
LNE981L  EQU   *-LNE981T
         SPACE 1         x'40'
LNE982T  DC    Y(37),C'xxxxxxxx:      authorized program (x)'
LNE982L  EQU   *-LNE982T
         SPACE 1         x'20'
LNE983T  DC    Y(28),C'xxxxxxxx:      AMODE ANY (x)'
LNE983L  EQU   *-LNE983T
         SPACE 1         x'10'
LNE984T  DC    Y(27),C'xxxxxxxx:      AMODE 31 (x)'
LNE984L  EQU   *-LNE984T
         SPACE 1         x'08'
LNE985T  DC    Y(00)
LNE985L  EQU   *-LNE985T
         SPACE 1         x'04'
LNE986T  DC    Y(37),C'xxxxxxxx:      dynamic LPA module (x)'
LNE986L  EQU   *-LNE986T
         SPACE 1         x'02'
LNE987T  DC    Y(33),C'xxxxxxxx:      page protected (x)'
LNE987L  EQU   *-LNE987T
         SPACE 1         x'01'
LNE988T  DC    Y(27),C'xxxxxxxx:      AMODE 64 (x)'
LNE988L  EQU   *-LNE988T
         SPACE 1
LNE990T  DC    Y(31),C'xxxxxxxx:    Attribute 3: x''zn'''
LNE990L  EQU   *-LNE990T
         SPACE 1         x'80'
LNE991T  DC    Y(42),C'xxxxxxxx:      resident above-the-line (x)'
LNE991L  EQU   *-LNE991T
         SPACE 1         x'40'
LNE992T  DC    Y(31),C'xxxxxxxx:      resident JPA (x)'
LNE992L  EQU   *-LNE992T
         SPACE 1         x'20'
LNE993T  DC    Y(32),C'xxxxxxxx:      resident PLPA (x)'
LNE993L  EQU   *-LNE993T
         SPACE 1         x'10'
LNE994T  DC    Y(32),C'xxxxxxxx:      resident MLPA (x)'
LNE994L  EQU   *-LNE994T
         SPACE 1         x'08'
LNE995T  DC    Y(32),C'xxxxxxxx:      resident FLPA (x)'
LNE995L  EQU   *-LNE995T
         SPACE 1         x'04'
LNE996T  DC    Y(31),C'xxxxxxxx:      resident CSA (x)'
LNE996L  EQU   *-LNE996T
         SPACE 1
LNE997T  DC    Y(00)     x'02'
LNE997L  EQU   *-LNE997T
         SPACE 1
LNE998T  DC    Y(00)     x'01
LNE998L  EQU   *-LNE998T
         END
./ ADD NAME=ASU3QFAB 0199-15200-19316-1352-05471-03832-00000-APLKS   36
*PROCESS RENT
         TITLE 'AS I/O UTILITY TO QUERY FILE ALLOC ATTR(S)'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY MVS
* QUERY FILE ALLOCATION ATTRIBUTES
*
* PURPOSE: QUERY DATA SET(S) ATTRIBUTES BY DDNAME.
*
*        CALL 'ASU3QFAB' USING ASCA, ACTION, DRMAB/DFMCB,
*             DSI_INFO, FC.
*
*        WHERE:
*           ACTION: (INPUT,FULLWORD)
*              1 = SET
*              2 = QUERY
*                  QUERY SYSTEM JFCB(S) FOR DDNAME,
*                  COPY DCB, SYSTEM JFCB(S) & VTOC INFO TO DSI_INFO
*                  IF VSAM, COPY ICF CATALOG INFO TO DSI_INFO
*              3 = RESERVED FOR PUSH
*              4 = RESERVED FOR POP
*              5 = LIST
*                  ROUTE DSI_INFO TO SYSOUT
*              6 = RETRIEVE/MERGE
*                  RETRIEVE JFCB (RDJFCB) INFO AND MERGE
*                  DICTIONARY INFO (DFMCB)
*
*      DRMAB/DFMCB: (INPUT/OUTPUT,DATA STRUCTURE)
*                   DICTIONARY RESOURCE MANAGEMENT ANCHOR BLOCK
*                   -OR-
*                   DICTIONARY FILE MANAGEMENT CONTROL BLOCK
*
*         DSI_INFO: (OUTPUT,DATA STRUCTURE)
*                   A COPY OF DCB/ACB/ICF/JFCB/VTOC FIELDS THAT
*                   THE CALLER IS ALLOWED TO VIEW
*                   AN OCCURANCE EXIST FOR EACH DATA SET NAME
*                   ASSOCIATED WITH THE DDNAME IF THE CALLER
*                   PROVIDES ENOUGH STORAGE
*
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
*         ********* INDIRECT
*
*              CVT: (SOURCE,CVT)
*                   MVS COMMUNICATION VECTOR
*
*             DSAB: (SOURCE,IHADSAB)
*                   DATA SET ASSOCIATION BLOCK
*
*            TIOTE: (SOURCE,TIOTIOT1)
*                   TASK INPUT/OUTPUT TABLE ENTRY
*                   1ST MATCHING ENTRY
*
*             JFCB: (SOURCE,IEFJFCBN)
*                   JOB FILE CONTROL BLOCK
*
*            JFCBX: (SOURCE,IEFJFCBX)
*                   SYSTEM JFCBX (VOLS)
*
*            JFCBE: (SOURCE,IEFJFCBE)
*                   SYSTEM JFCBE (3800 PRT)
*
*              ACB: (REQUEST,IFGACB)
*                   ACCESS METHOD CONTROL BLOCK
*
*              RPL: (REQUEST,IFGRPL)
*                   REQUEST PARAMETER LIST
*
*           IGGCSI: (REQUEST,IGGCSI)
*                   CATALOG SEARCH INTERFACE
*
*              DCB: (REQUEST,DCBD)
*                   DATA CONTROL BLOCK
*
*             DCBE: (REQUEST,IHADCBE)
*                   DATA CONTROL BLOCK EXTENSION
*
*             DSCB: (SOURCE,IECSDSL1)
*                   DATA SET ENTRY
*
*             VTOC: (SOURCE,IECSDSL1)
*                   VOLUME ENTRY
*
*         IEFJESCT: (SOURCE,IEFJESCT)
*                   JES CONTROL BLOCK
*
*         IEFDISMP: (SOURCE,IEFDISMP)
*                   DD SERVICE
*
*            UCBOB: (SOURCE,IEFUCBOB)
*                   UNIT CONTROL BLOCK
*
* --------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASU3QFAB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG, AS2PLIST, AS2LTRCE, AS2CDH2C
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG, AS2LTRCE, AS2CDH2C
R3       EQU   3              WORK REG, AS2RESTK, AS2LTRCE, AS2CDH2C,
*                             LOOP CONTROL
R4       EQU   4              LOOP CONTROL
R5       EQU   5              LOOP CONTROL
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF ASCA, DSI_INFO
R7       EQU   7              BAR OF DFMCB, DCBXL, JFCBX,
*                             ZB505, IGGCSI, IHADSAB, ASCA
R8       EQU   8              BAR OF TIOT1, IHADCB, F1DSCB,
*                             INFMJFCB, IFGACB, IHADSAB, IEFUCBOB,
R9       EQU   9              BAR OF STATIC DATA AREA
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             LE CAA BAR
RD       EQU   13             ADDR OF RSA/LE DSA
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
R14      EQU   14
         SPACE 2
         PUSH  PRINT
         PRINT NOGEN
         CEECAA
         SPACE 2
         CEEDSA
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDR OF ASCA
         ORG   SUBPARM0
PGMPARM1 DS    A              ADDR OF ASCA
PGMPARM2 DS    A              ADDR OF ACTION
PGMPARM3 DS    A              ADDR OF AUX DICT ENTITY
PGMPARM4 DS    A              ADDR OF DSI_INFO
PGMPARM5 DS    A              ADDR OF LE FEEDBACK AREA
         ORG   PGMPARM5
@PLEFDBK DS    A              ADDR OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F              RETURN CODE
RSNCD    DS    F              REASON CODE
         SPACE 1
@DCB     DS    A              ADDR OF ACB/DCB
@DSNPNTRY DS    A             ADDR OF PREV DSN_NTRY
@DSNCNTRY DS    A             ADDR OF ACTIVE/CURRENT DSN_NTRY
@CAHWM   DS    A              ADDR OF COMM AREA HIGH WATER MARK
@CSIRHWM DS    A              ADDR OF CSI RETURN AREA HWM
@DSAB    DS    A              ADDR OF DSAB
@TIOTE   DS    A              ADDR OF CURRENT TIOT ENTRY
@SJFCB   DS    A              ADDR OF SYSTEM PROVIDED JFCB
@SJFCBX  DS    A              ADDR OF SYSTEM PROVIDED JFCBX VOLS
@SJFCBE  DS    A              ADDR OF SYSTEM PROVIDED JFCBE 3800 PRT
@DD1UCB_LST DS    A           ADDR OF UCB LIST FOR EA DD IN DEVAREA
#DD1UCB_LST DS    F           LENGTH OF GETMAIN STORAGE
@UCBCS   DS    A              ADDR OF UCB COMMON SEGMENT
@UCBCX   DS    A              ADDR OF UCB COMMON EXTENSION
         SPACE 1
@CSIPGM  DS    A              ADDR OF IGGCSI00
MDSNCNT  DS    H              MAX NBR OF DS PER DD
DSNCNT   DS    H              NBR OF DS PER DD
         SPACE 2
         DS    0D
**       IHADVA INFO=DEVTYPE,DSECT=NO   SAME AS BELOW
DEVINFO  EQU   *,8,C'D'       DEVICE CHARACTERISTICS INFO
DVAUCBTY DS    0XL4           ..REAL OR SIMULATED UCBTYP FIELD
DVAOPTS  DS    XL2            ....DVAOPTS model & opt bits
DVACLASS DS    XL1            ....DVACLASS device class (UCBTBYT3)
$TAPE    EQU   X'80'          ......MAGNETIC TAPE
$CTC     EQU   X'41'          ......CHANNEL TO CHANNEL ADAPTER
$UR      EQU   X'40'          ......UNIT RECORD
$DASD    EQU   X'20'          ......DASD
$DISPLAY EQU   X'10'          ......DISPLAY
$CHRRDR  EQU   X'08'          ......CHARACTER READER
$SIMDEV  EQU   X'01'          ......SIMULATED / NO UCB
DVAUNIT  DS    XL1            ....DVAUNIT unit type (UCBTBYT4)
MAXBLKSZ DS    F              ..DEVICE MAX BLKSIZE W/O LBI
         SPACE 2
UNITNME  DS    CL8            ..UNIT NAME (i.e. 3390)
UNITATTR DS    XL10           ..UNIT ATTRIBUTES
         ORG   UNITATTR
EDTLEN   DC    AL1(10)        ....LENGTH OF DATA AREA
EDTFLG1  DS    XL1            ....FLAG BYTE 1
$ESOGRNM EQU   X'80'          ......UNIT NAME IS ESOTERIC GROUP NAME
$VIOELIG EQU   X'40'          ......UNIT NAME IS VIO-ELIGIBLE
$TPDEV   EQU   X'10'          ......UNIT NAME CONTAINS TP CLASS DEV(S)
EDTFLG2  DS    XL1            ....FLAG BYTE 2
EDT#DEV  DS    XL1            ....NBR OF DEVICE CLASSES IN UNIT NAME
EDT#GEN  DS    F              ....NBR OF GENERIC DEVICE TYPES IN
*                                 UNIT NAME
         DS    XL2            ....NOT USED
         SPACE 2
         DS    0F
         IHADVA INFO=AMCAP,DSECT=NO
         SPACE 2
         DS    0F
         IHADVA INFO=DASD2,DSECT=NO
         SPACE 2
         AS1MUTSA UDS=(MISC)
         ORG   VSTR
LNEAREA  DS    0XL122         MESSAGE AREA
LNELEN   DS    H
         SPACE 1
LNETXT   DS    CL120
         ORG   LNETXT
LNEPGM   DS    CL08           ..001:010 MESSAGING PROGRAM NAME
         SPACE 1
         ORG   LNETXT+17
LNEDDNME DS    CL08           ..018:025 DDNAME
         SPACE 1
         ORG   LNETXT+17
LNEDSNME DS    CL44           ..018:062 DSNAME
         ORG   LNETXT+72
LNEMGNME DS    CL08           ..073:080 MBR/GDG NAME
         SPACE 1
         ORG   LNETXT+10      ALL
LNESRC   DS    CL04           ..011:014 SOURCE(ACB,VCAT,DCB,DSAB,JFCB
*                                              DEV,DSCB,VTOC)
         SPACE 1
         ORG   LNETXT+17
LNEVAR   DS    CL80
         SPACE 1
         ORG   LNETXT+19      3/10:ACB,VCAT,DCB,JFCB,DSCB,DSAB
LNEAM    DS    CL04           ..020:023 ACCESS METHOD
         ORG   LNETXT+30
LNEORG   DS    CL04           ..031:034 FILE ORGANIZATION
         ORG   LNETXT+43
LNERECFM DS    CL04           ..044:046 RECFM
         ORG   LNETXT+56
LNELRECL DS    CL05           ..057:061 LRECL
         ORG   LNETXT+69
LNEDISP  DS    CL03           ..070:072 DISP
         ORG   LNETXT+79
LNESHR   DS    CL03           ..080:082 SHR
         ORG   LNETXT+85
LNESTAT  DS    CL06           ..086:091 STATUS OPEN/CLOSE
         SPACE 1
         ORG   LNETXT+22      4:ACB,JFCB,DSCB
LNEBLKSZ DS    CL05           ..023:027 BLOCK SIZE
         ORG   LNETXT+36
LNEBUFNO DS    CL05           ..037:041 BUFFER NO
         ORG   LNETXT+44
LNEIND2  DS    CL04           ..045:048 BLSR/VIO
         ORG   LNETXT+50
LNEIND7A DS    CL04           ..051:054 ICF
         ORG   LNETXT+56
LNEIND7B DS    CL04           ..057:060 SMS
         SPACE 1
         ORG   LNETXT+21      5/6:ACB,VCAT
LNECISZ  DS    CL05           ..022:026 CI SIZE
         ORG   LNETXT+35
LNEBUFCT DS    CL05           ..036:040 BUFFER COUNT
         ORG   LNETXT+49
LNECICA  DS    CL04           ..050:053 CI/CA
         ORG   LNETXT+62
LNELSRID DS    CL02           ..063:064 LSR ID
         SPACE 1
         ORG   LNETXT+20      7:ACB,VCAT
LNEKOFF  DS    CL03           ..021:023 KEY OFFSET
         ORG   LNETXT+24
LNEKLEN  DS    CL03           ..025:027 KEY LENGTH
         SPACE 1
         ORG   LNETXT+20      8:VCAT
LNESMFEF DS    CL02           ..021:022 SMS/EF
         ORG   LNETXT+23
LNESMFEA DS    CL02           ..024:025 SMS/EA
         ORG   LNETXT+26
LNESMFCP DS    CL02           ..027:028 SMS/COMPRESSION
         ORG   LNETXT+31
LNEIND4  DS    CL04           ..032:034 RLS
         SPACE 1
         ORG   LNETXT+28      9:DEV,VTOC
LNECYLS  DS    CL06           ..029:034 NBR CYLS
         ORG   LNETXT+53
LNETPC   DS    CL03           ..054:056 TRKS PER CYL
         ORG   LNETXT+69
LNETRKSZ DS    CL05           ..070:074 BYTES PER TRK
         SPACE 1
         ORG   LNETXT+26      10:DSAB
LNEIND1  DS    CL03           ..027:029 VIO
         ORG   LNETXT+31
LNESSYS  DS    CL06           ..032:037 SYSIN/SYSOUT/SUBSYS=
         SPACE 1
         ORG   LNETXT+26      11:JFCB
LNEVLIST DS    CL06           ..027:095 VOLUME LIST (10/LINE)
         SPACE 1
         ORG   LNETXT+22      12:DCB,DEV
LNECLASS DS    CL08           ..023:030 CLASS
         ORG   LNETXT+33
LNEDTYPE DS    CL04           ..034:037 DEVICE TYPE (i.e. 3390)
         ORG   LNETXT+39
LNEDNBR  DS    CL04           ..040:043 DEVICE NBR (i.e. A100)
         ORG   LNETXT+45
LNEVIO   DS    CL04           ..046:049 blank or VIO
         ORG   LNETXT+51
LNECACHE DS    CL06           ..052:057 blank or CACHED
         SPACE 1
         ORG   LNETXT+26      13:DEV
LNEMLRECL DS    CL06          ..027:032 MAX LRECL spanned
         ORG   LNETXT+45
LNEMBLKSZ DS    CL05          ..046:050 MAX BLKSZ non-LBI
         ORG   LNETXT+63
LNELBIBLKSZ DS    CL06        ..064:069 LBI BLKSZ
         ORG   LNETXT+87
LNEOPTLBIBLKSZ DS    CL06     ..088:093 BEST LBI BLKSZ
         SPACE 1
         ORG
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
PGMPLIST DS    A              ORIGINAL R1 VALUE
REQFUNCT DS    F
REQDDNME DS    CL08           REQUESTED DD BY CALLER
ACTDDNME DS    CL08           ACTIVE DD
         SPACE 1
PFLAGS   DS    CL04           PROCESS FLAGS
         ORG   PFLAGS
PFLAG1   DS    CL01           ..N/A
PFLAG2   DS    CL01           ..APPLIED JCL OVERRIDES (Y/N)
PFLAG3   DS    CL01           ..N/A
PFLAG4   DS    CL01           ..N/A
         SPACE 1
DEVILST  DS    XL(#DEV0LEN)   AREA FOR DEVTYPE PARM LIST
         SPACE 1
         EDTINFO  MF=(L,EDTPLIST)
         SPACE 1
         IEFDDSRV MF=(L,DD1PLIST)
         IEFDDSRV MF=(L,DD2PLIST)
         SPACE 1
         DS    0D
CAMLST   CAMLST SEARCH,DSNAME,VOLSER,VTOCF4
         DS    0D
VOLSER   DS    CL06
DSNAME   DS    CL44
         SPACE 1
@SWAEPA  DS    A              SCHEDULER WORK AREA EXTENDED PARM AREA
EPA      DS    XL(L'SWAEPAX)
         SPACE 1
SWAPARMS SWAREQ MF=L
         SPACE 2
         DS    0D
WAREA    DS    CL1408
         ORG   WAREA
VTOCF1   DS    CL256          DATA SET INFO
VTOCF4   DS    CL256          VOLUME INFO
         ORG   WAREA
RLIST    DS    30F            RETURN LIST FOR SHOWCB
         ORG   WAREA
WAREA1   DS    CL384          WORK AREA
WAREA2   DS    CL1024
         ORG
         SPACE 2
         AS1MUTSA UDS=(LTRACE)
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         EJECT
* --------------------------------------------------------- *
* PARMLIST COMING TO THIS PROGRAM
* --------------------------------------------------------- *
         SPACE 1
PARMLIST DSECT
@ASCA    DS    A              PTR TO AS COMMUNICATION AREA
@ACTION  DS    A              PTR TO ACTION CODE
@AUXDIC  DS    A              PTR TO DRMAB/DFMCB (INPUT)
@COMAREA DS    A              PTR TO COMMUNICATION AREA (OUTPUT)
@LEFDBK  DS    A              PTR TO LE FEEDBACK AREA
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,MF=D
ASABHDR  AS1MASDS ADS=ASAB,MF=D
ASABXHDR AS1MASDS ADS=ASAB1,MF=D
* --------------------------------------------------------- *
* DICTIONARY RESOURCE MANAGEMENT ANCHOR BLOCK (DRMAB)
* --------------------------------------------------------- *
         SPACE 1
RMAB     DSECT
RM_DSLEN DS    H              DATA STRUCTURE LENGTH
RM_DSID  DS    H              DATA STRUCTURE ID
$DRMAB   EQU   X'0A10'
         SPACE 1
RM_AREA  DS    XL40
         SPACE 2
FMCB     AS1MDSDS FDS=DSD,PREFIX=FM_,MF=D
         SPACE 2
DSI_INFO AS1MDSDS FDS=DSINFO,PARM=1,PREFIX=DSI_,MF=D
         EJECT
* --------------------------------------------------------- *
* MVS COMMUNICATION VECTOR
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         CVT   DSECT=YES      (LIST=YES)
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* JES CONTROL BLOCK
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IEFJESCT
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* JOB FILE CONTROL BLOCK (JFCB)                   176,X'B0'
* --------------------------------------------------------- *
         SPACE 1
JFCB     DSECT
         IEFJFCBN LIST=YES
         SPACE 2
* --------------------------------------------------------- *
* JOB FILE CONTROL BLOCK VOLUME EXTENSION (JFCBX) 176,X'B0'
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
JFCBX    DSECT
         IEFJFCBX
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* JOB FILE CONTROL BLOCK 3800 PRINTER EXTENSION (JFCBE) 176,X'B0'
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
JFCBE    DSECT
         IEFJFCBE
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* DATA CONTROL BLOCK FOR DSORG=PS (DCB)            96,X'60'
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         DCBD  DSORG=PS
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* DATA CONTROL BLOCK EXTENSION FOR DSORG=PS (DCBE) 56,X'38'
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IHADCBE
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* DATA CONTROL BLOCK EXIT LIST (DCBXL)
* --------------------------------------------------------- *
         SPACE 1
DCBXL    DSECT
DCBXLE   DS    8F
         SPACE 2
* --------------------------------------------------------- *
* ACCESS METHOD CONTROL BLOCK (ACB)                76,X'4C'
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IFGACB AM=VSAM
ACB_#LEN EQU   *-IFGACB       76,X'4C'
AMBL_DNPTR EQU   52,4,C'A'    offset in AMB to data    comp DSNAME ptr
AMBL_INPTR EQU   56,4,C'A'    offset in AMB to index   comp DSNAME ptr
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* REQUEST PARAMETER LIST (RPL)                     76,X'4C'
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IFGRPL AM=VSAM
RPL_#LEN EQU   *-IFGRPL       76,X'4C'
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* ACCESS METHOD CONTROL BLOCK EXIT LIST (ACBXL)    48,X'30'
* --------------------------------------------------------- *
         SPACE 1
         IFGEXLST
         SPACE 2
* --------------------------------------------------------- *
* DATA SET ASSOCIATION BLOCK (DSAB)
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IHADSAB
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* DD SERVICE OUTPUT MAPPING
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IEFDISMP
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* UNIT CONTROL BLOCK (UCB)
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IEFUCBOB
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* TASK INPUT/OUTPUT TABLE (TIOT)
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
TIOT     DSECT
         IEFTIOT1
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* VTOC DSCB FORMAT-4 (1st record in VTOC, define the device)
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
F4DSCB   DSECT
         IECSDSL1 4
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* VTOC DSCB FORMAT-1 (define the data set)
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
F1DSCB   DSECT
         IECSDSL1 1
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* CATALOG SEARCH INTERFACE (CSI) REQUEST BLOCK
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IGGCSI
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* RETURN LIST FROM CSI
* --------------------------------------------------------- *
         SPACE 1
CSIRWORK DSECT ,              14-BYTES
CSIUSRLN DS    F              LENGTH OF AREA (USER INPUT)
CSIREQLN DS    F              MINIMAL REQ WORK AREA LEN
CSIUSDLN DS    F              LENGTH OF AREA USED
CSINUMFD DS    H              NBR OF FIELD NAMES +1
CSI_RST1 EQU   *
         SPACE 1
CSICAT   DSECT ,              50-BYTES
CSICFLG  DS    XL01           CATALOG FLAG INFO
CSINTICF EQU   X'80'          ..NON-ICF CAT, NOT SUPPORTED
CSINOENT EQU   X'40'          ..NO ENTRY FOUND FOR CATALOG
CSINTCMP EQU   X'20'          ..INCOMPLETE DATA FOR CATALOG
CSICERR  EQU   X'10'          ..ERROR NO PROCESS
CSICERRP EQU   X'08'          ..ERROR PARTIAL PROCESS
CSICTYPE DS    XL01           CATALOG TYPE
*        EQU   X'F0'
CSICNAME DS    CL44           CATALOG NAME
CSICRETN DS    0XL04          CATALOG RETURN
CSICRETM DS    CL02           ..CATALOG RETURN MODULE ID
CSICRETR DS    XL01           ..CATALOG RETURN REASON CODE
CSICRETC DS    XL01           ..CATALOG RETURN CODE
CSI_CAT_LEN EQU *-CSICAT
CSI_RST2 EQU   *
         SPACE 1
CSINTRY  DSECT ,              50-BYTES
CSIEFLAG DS    XL01           ENTRY FLAG INFORMATION
CSIPMENT EQU   X'80'          ..PRIMARY ENTRY
CSIENTER EQU   X'40'          ..ERROR
CSIEDATA EQU   X'20'          ..DATA IS RETURNED
CSIETYPE DS    CL01           CATALOG ENTRY TYPE
*                             'A' NONVSAM
*                             'B' GDG
*                             'C' VSAM CLUSTER
*                             'D' VSAM DATA COMPONENT
*                             'G' VSAM ALT INDEX
*                             'H' GDS
*                             'I' VSAM INDEX COMPONENT
*                             'R' VSAM PATH
*                             'X' ALIAS
*                             'U' USER CAT CONNECTOR ENTRY
*                             'L' TAPE VOL CAT LIBRARY ENTRY
*                             'W' TAPE VOL CAT VOL ENTRY
CSIENAME DS    CL44           CATALOG ENTRY NAME
CSIERETN DS    0XL04          ENTRY RETURN (EXIST IF CSIENTER)
CSIERETM DS    CL02           ..ENTRY RETURN MODULE ID
CSIERETR DS    XL01           ..ENTRY RETURN REASON CODE
CSIERETC DS    XL01           ..ENTRY RETURN CODE
         ORG   CSIERETN
CSITOTLN DS    XL02
         DS    XL02
CSILENF01 DS   XL02           AMDCIREC(8): CISZ(4),MAXREC(4)
CSILENF02 DS   XL02           AMDKEY(4): OFFSET(2),LEN(2)
CSILENF03 DS   XL02           ATTR1(1):
CSILENF04 DS   XL02           ATTR2(1):
CSILENF05 DS   XL02           BUFSIZE(4):
CSILENF06 DS   XL02           COMPIND(1):
CSILENF07 DS   XL02           LOGPARMS(1):
CSILENF08 DS   XL02           LOGSTRID(26):
CSILENF09 DS   XL02           LRECL(4): AVG REC LEN
CSILENF10 DS   XL02           RLSBWO(1):
CSILENF11 DS   XL02           RLSFLAGS(1):
CSILENF12 DS   XL02           VSAMSTAT(46):
CSILENF13 DS   XL02           VSAMTYPE(2):
CSILENF14 DS   XL02           XACIFLAG(1):
CSILENF15 DS   XL02           XHARBADS(8):
CSILENF16 DS   XL02           XHURBADS(8):
CSI_RST3 EQU   *
*                             REQUESTED FIELDS
CSI_RST4 EQU   *,117,C'X'
CSI_NTRY_#LEN EQU *-CSINTRY
         SPACE 2
* --------------------------------------------------------- *
* EXTERMAL PARAMETER AREA FOR SCHEDULER WORK AREA
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IEFZB505 LOCEPAX=YES
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* SCHEDULER WORK AREA BLOCK ID DEFINITIONS
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
         IEFQMIDS
         POP   PRINT
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2             0=ESA 1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         ST    R1,PGMPLIST
         SPACE 1
         USING CEEDSA,13
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 1
         USING CEECAA,RC
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT NOGEN
PPA      CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=01,                                                 +
               REL=02,                                                 +
               MOD=00,                                                 +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *    INITIALIZE DYNAMIC STORAGE
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
         MVC   LEMDEST,F2     INIT LE MESSAGE DESTINATION
         SPACE 1
         MVI   PFLAGS,C' '
         MVC   PFLAGS+1(L'PFLAGS-1),PFLAGS
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* MAIN ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 AS2LTRCE
         L     R1,PGMPLIST
         USING PARMLIST,R1
         SPACE 1
         MVC   PGMPARM1,@ASCA
         NC    PGMPARM1,=XL4'7FFFFFFF'
         MVC   PGMPARM2,@ACTION
         NC    PGMPARM2,=XL4'7FFFFFFF'
         MVC   PGMPARM3,@AUXDIC
         NC    PGMPARM3,=XL4'7FFFFFFF'
         TM    @AUXDIC,X'80'  Q. LAST PARM
         JO    MAIN0010       A. YES,
         MVC   PGMPARM4,@COMAREA
         NC    PGMPARM4,=XL4'7FFFFFFF'
         TM    @COMAREA,X'80' Q. LAST PARM
         JO    MAIN0010       A. YES, ERROR
         MVC   PGMPARM5,@LEFDBK
         NC    PGMPARM5,=XL4'7FFFFFFF'
MAIN0010 EQU   *
         LARL  RE,MAIN8090    SET DEFAULT RETURN
         ICM   R7,15,PGMPARM3 Q. VALID ADDR
         JZ    TXT0108I       A. NO,
         USING RMAB,R7
         CLC   RM_DSID,=Y($DRMAB)  Q. AUX DICT RMAB
         JE    MAIN0020            A. YES,
         DROP  R7
         USING FMCB,R7
         CLC   FM_DSID,=Y(FM_$DSD) Q. AUX DICT FMCB
         JNE   TXT0108I            A. NO
         DROP  R7
MAIN0020 EQU   *
         ICM   R6,15,PGMPARM4 Q. VALID ADDR
         JZ    TXT0108J       A. NO,
         USING DSI_INFO,R6
         CLC   DSI_DSID,=Y(DSI_$DSI)    Q. VALID COMMAREA
         JNE   TXT0108J                 A. NO
         DROP  R1,R6
MAIN0030 EQU   *
         SPACE 1
MAIN0040 AS2LTRCE
         LARL  RE,MAIN8090    SET DEFAULT RETURN
         L     RF,PGMPARM2
         ICM   RF,15,0(RF)
         JZ    TXT0101A
         C     RF,F6          Q. VALID ACTION
         JH    TXT0101A       A. NO
         SLL   RF,2           MULTI BY 4
         B     *+4(RF)
         J     TXT0101A       0 - INVALID
         J     MAIN0100       1 - SET
         J     MAIN0200       2 - QUERY
         J     MAIN0300       3 - PUSH
         J     MAIN0400       4 - POP
         J     MAIN0500       5 - LIST
         J     MAIN0600       6 - RETRIEVE/MERGE
         EJECT
* --------------------------------------------------------- *
* PROCESS ACTION(SET)
* --------------------------------------------------------- *
         SPACE 1
MAIN0100 AS2LTRCE ,      ACTION(SET)
         LARL  RE,MAIN8090    SET DEFAULT RETURN
         J     TXT0103A
         SPACE 1
MAIN0190 AS2LTRCE
         J     MAIN8090
         SPACE 1
MAIN0199 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(QUERY)
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE ,      ACTION(QUERY)
         L     R7,PGMPARM3    GET DICTIONARY ADDR
         USING RMAB,R7
         SPACE 1
         CLC   RM_DSID,=Y($DRMAB)  Q. AUX DICTIONARY RMAB
         JNE   MAIN0214            A. NO,
         DROP  R7
**    ADD SOME CODE                A. YES,
MAIN0214 EQU   *
         USING FMCB,R7
         SPACE 1
*        MUST BE AN FMCB
         LARL  RE,MAIN8000    SET DEFAULT RETURN
         MVC   @DCB,FM_@DCB   COPY ACB/DCB ADDR
         OC    FM_DDNAME,FM_DDNAME Q. DD NAME EMPTY
         JZ    TXT0108B            A. YES,
         CLI   FM_DDNAME,C' '
         JE    TXT0108B            A. YES,
         SPACE 1
         MVC   REQDDNME,FM_DDNAME
         DROP  R7
         SPACE 1
         L     R6,PGMPARM4    GET ADDR OF COMMAREA
         XC    DSNCNT,DSNCNT  CLEAR HIT COUNT
         USING DSI_INFO,R6    EST ADDR TO COMMAREA
         SPACE 1
         MVC   DSI_DDN,REQDDNME
         SPACE 1
         XR    R0,R0               COMPUTE
         LH    R1,DSI_DSLEN        ..THE LENGTH OF
         AHI   R1,-(DSI_#HDRLEN)   ..THE TABLE
         LA    R6,DSI_VECTOR       POINT TO BEG OF TABLE
         DROP  R6
         ST    R6,@DSNCNTRY   SAVE PTR OF CURRENT ENTRY IN CA
         AR    R6,R1          ADD TABLE LENGTH
         ST    R6,@CAHWM      SAVE HIGH WATER MARK
         LHI   R2,DSI_NTRY_LEN     COMPUTE
         DR    R0,R2               ..THE NBR OF
         STH   R1,MDSNCNT          ..TABLE ENTRIES
         SPACE 1
         XC    @DSAB,@DSAB    CLEAR OUT DSAB ADDR
         SPACE 1
MAIN0220 AS2LTRCE
         BRAS  RE,DSAB0100    LOCATE DDNAME
         LARL  RE,MAIN8000    SET DEFAULT RETURN
         C     RF,F4
         JH    TXT0109A
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN0224       ..00-PROCESSING COMPLETE
         J     MAIN0290       ..04-DD NOT FOUND OR EOD
         SPACE 1
MAIN0224 AS2LTRCE
         LARL  RE,MAIN0290    SET DEFAULT RETURN
         LH    R0,DSNCNT      GET DSN CNT FOR DD
         CH    R0,MDSNCNT     Q. DSNCNT > MDSNCNT
         JH    TXT0117A       A. YES,
         CHI   R0,1           Q. DSNCNT = 1
         JE    MAIN0230       A. YES, BYPASS
*                             A. NO, FALL THRU
*        DSNCNT > 1, COPY POINTERS
         L     R6,@DSNPNTRY        GET PTR TO PREV ENTRY IN CA
         USING DSI_NTRY_BEG,R6     EST ADDR TO PREV ENTRY IN CA
         SPACE 1
         MVC   DSI_FWDPTR,@DSNCNTRY     CHAIN OLD TO NEW
         DROP  R6
         SPACE 1
MAIN0230 AS2LTRCE       *LKS*
         L     R8,@DSAB
         L     R6,@DSNCNTRY   GET PTR TO CURRENT ENTRY IN CA
         BRAS  RE,CDSAB100    COPY DSAB INFO TO OUTPUT
         LARL  RE,MAIN8000    SET DEFAULT RETURN
         ICM   R8,15,@SJFCB   Q. GET ADDR OF SYSTEM JFCB
         JZ    TXT0108C       A. NO,
         BRAS  RE,CJFCB100    COPY SYSTEM JFCB INFO TO OUTPUT
         ICM   R8,15,@DCB     Q. ANY DCB/ACB PRESENT
         JZ    MAIN0260       A. NO, BYPASS
         BRAS  RE,CDCB0100    COPY DCB INFO TO OUTPUT
         BRAS  RE,RVCAT100    PROCESS VSAM/ICF CATALOG
         L     R8,@DCB        GET DCB/ACB ADDR
         BRAS  RE,CVCAT100    COPY ACB/ICF INFO TO OUTPUT
MAIN0260 EQU   *
         BRAS  RE,XDEV0100    EXTRACT DEVICE INFORMATION
         BRAS  RE,CDEV0100    COPY DEVICE INFO TO OUTPUT
         L     R8,@SJFCB      GET ADDR OF SYSTEM JFCB
         BRAS  RE,RVTOC100    PROCESS VTOC
         LA    R8,VTOCF1-L'DSNAME  GET ADDR OF VTOC
         BRAS  RE,CVTOC100    COPY VTOC INFO TO OUTPUT
         SPACE 1
         L     R0,@DSNCNTRY   GET PTR TO CURRENT ENTRY IN CA
         ST    R0,@DSNPNTRY   SAVE PTR TO PREV ENTRY IN CA
         AHI   R0,DSI_NTRY_LEN
         ST    R0,@DSNCNTRY   SAVE PTR TO CURRENT ENTRY IN CA
         J     MAIN0220       LOOP BACK TO DSAB
         SPACE 1
MAIN0290 AS2LTRCE
         LARL  RE,MAIN8000    SET DEFAULT RETURN
         OC    DSNCNT,DSNCNT
         JNZ   MAIN8000
         J     TXT0110A
         SPACE 1
MAIN0299 EQU   *
         EJECT
* --------------------------------------------------------- *
* PROCESS ACTION(PUSH)
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE , ACTION(PUSH)
         LARL  RE,MAIN8090    SET DEFAULT RETURN
         J     TXT0103A
         SPACE 1
MAIN0390 AS2LTRCE
         J     MAIN8090
         SPACE 1
MAIN0399 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(POP)
* --------------------------------------------------------- *
         SPACE 1
MAIN0400 AS2LTRCE , ACTION(POP)
         LARL  RE,MAIN8090    SET DEFAULT RETURN
         J     TXT0103A
         SPACE 1
MAIN0490 AS2LTRCE
         J     MAIN8090
         SPACE 1
MAIN0499 EQU   *
         EJECT
* --------------------------------------------------------- *
* PROCESS ACTION(LIST)
* --------------------------------------------------------- *
         SPACE 1
MAIN0500 AS2LTRCE , ACTION(LIST)
         L     R7,PGMPARM3
         USING RMAB,R7
         SPACE 1
         CLC   RM_DSID,=Y($DRMAB)  Q. AUX DICTIONARY RMAB
         JNE   MAIN0514            A. NO,
**    ADD SOME CODE                A. YES,
         DROP  R7
MAIN0514 EQU   *
         USING FMCB,R7
         SPACE 1
*        MUST BE FMCB
         LARL  RE,MAIN8090    SET DEFAULT RETURN
         MVC   @DCB,FM_@DCB   COPY ACB/DCB ADDR
         DROP  R7
         SPACE 1
* --------------------------------------------------------- *
* FORMAT INFORMATION LINE 1
* --------------------------------------------------------- *
         SPACE 1
MAIN0530 AS2LTRCE , DDNAME
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE1LEN),LNE1DSPY
         SPACE 1
         L     R6,PGMPARM4    GET ADDR OF COMMAREA
         USING DSI_INFO,R6    EST ADDR TO COMMAREA
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNEDDNME,DSI_DDN
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         LA    R6,DSI_NTRY_BEG     GET ADDR TO COMMAREA ENTRY
         DROP  R6
         SPACE 1
* --------------------------------------------------------- *
* FORMAT INFORMATION LINE 2
* --------------------------------------------------------- *
         SPACE 1
         USING DSI_NTRY_BEG,R6
         SPACE 1
MAIN0540 AS2LTRCE , DSNAME
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE2LEN),LNE2DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNEDSNME,DSI_JFCB_DSN
         TM    DSI_JFCB_IND1,$BLSR Q. BLSR
         JNO   MAIN0542            A. NO, BYPASS
         MVC   LNETXT+65(7),=CL7'TGT DDN'
MAIN0542 EQU   *
         CLI   DSI_JFCB_MBRGDG,C' '
         JNH   MAIN0544
         MVC   LNEMGNME,DSI_JFCB_MBRGDG
MAIN0544 EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         DROP  R6
         SPACE 1
* --------------------------------------------------------- *
* FORMAT INFORMATION LINE 3:13
* --------------------------------------------------------- *
         SPACE 1
         ICM   R8,15,@DCB     Q. DCB/ACB PRESENT
         JZ    MAIN0552       A. NO, BYPASS
         USING IFGACB,R8
         TM    ACBDSOR2,ACBDORGA   Q. ACB
         JNO   MAIN0548            A. NO, MUST BE DCB
         DROP  R8
         BRAS  RE,PACB0100    PRINT ACB
         BRAS  RE,PVCAT100    PRINT VCAT
         J     MAIN0552
         SPACE 1
MAIN0548 AS2LTRCE
         BRAS  RE,PDCB0100    PRINT DCB
         SPACE 1
MAIN0552 AS2LTRCE
         BRAS  RE,PDSAB100    PRINT DSAB
         BRAS  RE,PJFCB100    PRINT JFCB
         BRAS  RE,PDEV0100    PRINT DEVice
         BRAS  RE,PVTOC100    PRINT VTOC
         SPACE 1
MAIN0580 EQU   *
         USING DSI_NTRY_BEG,R6
         SPACE 1
         ICM   R6,15,DSI_FWDPTR    Q. ANY MORE ENTRIES
         JNZ   MAIN0540            A. YES
         DROP  R6
         SPACE 1
MAIN0590 AS2LTRCE
         J     MAIN8090
         SPACE 1
MAIN0599 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(RETRIEVE/MERGE)
* --------------------------------------------------------- *
         SPACE 1
MAIN0600 AS2LTRCE , ACTION(RETRIEVE/MERGE)
         BRAS  RE,RJFCB100    PROCESS USER JFCB
         LARL  RE,MAIN8090    SET DEFAULT RETURN
         C     RF,F4
         JH    TXT0109B
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN0690       ..00-PROCESSING COMPLETE
         J     TXT0118A       ..04-(1) DATA SET IS VSAM
*                                  (2) DCB IS OPEN
*                                  (3) DISP= IS NOT EQ TO NEW
*                                  (4) NO DCB OVERRIDES
         SPACE 1
MAIN0690 AS2LTRCE
         J     MAIN8090
         SPACE 1
MAIN0699 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* POST PROCESSING / PRE-TERMINATION
* --------------------------------------------------------- *
         SPACE 1
MAIN8000 EQU   *
MAIN8050 EQU   *
         OC    @CSIPGM,@CSIPGM     Q. CSI PGM LOADED
         JZ    MAIN8052            A. NO,
         DELETE EPLOC=IGGCSI00
         SPACE 1
MAIN8052 EQU   *
         ICM   R1,15,@DD1UCB_LST   Q. STORAGE ADDR EXIST
         JZ    MAIN8054            A. NO, BYPASS
         ICM   R0,15,#DD1UCB_LST   Q. STORAGE LENGTH EXIST
         JZ    MAIN8054            A. NO, BYPASS
         STORAGE RELEASE,                                              +
               ADDR=(1),                                               +
               LENGTH=(0)
MAIN8054 EQU   *
         SPACE 1
MAIN8090 EQU   *
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* LOCATE DDNAME AND TIOT ENTRY ADDR
* --------------------------------------------------------- *
         SPACE 1
DSAB0100 AS2LTRCE
         AS2RESTK PUSH
DSAB0110 AS2LTRCE
         OC    @DSAB,@DSAB    Q. VALID ADDR
         JNZ   DSAB0220       A. YES, MUST WANT NEXT
         SPACE 1
DSAB0200 AS2LTRCE
         XC    @DSAB,@DSAB
         XC    RTNCD,RTNCD
         XC    RSNCD,RSNCD
         GETDSAB DDNAME=REQDDNME,                                      +
               DSABPTR=@DSAB,                                          +
               RETCODE=RTNCD,                                          +
               RSNCODE=RSNCD,                                          +
               LOC=ANY,                                                +
               MF=(E,PLIST)
         LARL  RE,DSAB0800    SET DEFAULT RETURN
         C     RF,F0
         JH    TXT0107B       SETUP LE COND
         J     DSAB0300       ..00-PROCESSING COMPLETE
         SPACE 1
DSAB0220 AS2LTRCE
         XC    RTNCD,RTNCD
         XC    RSNCD,RSNCD
         GETDSAB NEXT,                                                 +
               DSABPTR=@DSAB,                                          +
               RETCODE=RTNCD,                                          +
               RSNCODE=RSNCD,                                          +
               LOC=ANY,                                                +
               MF=(E,PLIST)
         LARL  RE,DSAB0800    SET DEFAULT RETURN
         C     RF,F4
         JH    TXT0107B       SETUP LE COND
         B     *+4(RF)        GO TO DEPENDING ON
         J     DSAB0300       ..00-PROCESSING COMPLETE
         J     DSAB0904       ..04-END OF CHAIN
         SPACE 1
DSAB0300 AS2LTRCE
         L     R7,PGMPARM3    GET ADDR OF FMCB
         USING FMCB,R7        EST ADDR TO FMCB
         MVC   FM_@DSAB,@DSAB SAVE IN CALLER'S REQ BLK
         DROP  R7
         LARL  RE,DSAB0800    SET DEFAULT RETURN
         ICM   R7,15,@DSAB    Q. VALID DSAB ADDR
         JZ    TXT0108E       A. NO, INVALID DATA
         USING DSAB,R7
         SPACE 1
         CLC   DSABID,=CL4'DSAB'   Q. VALID DSAB
         JNE   TXT0108E            A. NO, INVALID DATA
         SPACE 1
DSAB0320 EQU   *
         XC    @TIOTE,@TIOTE  CLEAR CURRENT TIOT ENTRY ADDR
         LARL  RE,DSAB0800    SET DEFAULT RETURN
         ICM   R8,15,DSABTIOT Q. TIOT ENTRY PRESENT
         JZ    TXT0108F       A. NO, INVALID DATA
         DROP  R7
         ST    R8,@TIOTE      SAVE CURRENT TIOT ENTRY ADDR
         USING TIOENTRY,R8    EST ADDR TO TIOT ENTRY
         SPACE 1
         CLI   TIOELNGH,X'00' Q. END OF TIOT
         JE    DSAB0904       A. YES, SET EOD
         TM    TIOESTTA,TIOSLTYP   Q. FREED TIOT ENTRY
         JO    DSAB0110            A. YES, GO GET NEXT DSAB
         CLI   TIOEDDNM,C' '  Q. CONCATENATION
         JE    DSAB0322       A. YES,
         CLC   TIOEDDNM,REQDDNME   Q. DDNAME MATCH
         JNE   DSAB0904            A. NO, BYPASS
         SPACE 1
DSAB0322 EQU   *
         L     R7,PGMPARM3    GET ADDR OF FMCB
         USING FMCB,R7        EST ADDR TO FMCB
         MVC   FM_@TIOTE,@TIOTE    A. YES, SAVE IN CALLER'S REQ BLK
         DROP  R7
         LH    R0,DSNCNT      PICK UP HIT COUNT
         AHI   R0,1           ADD 1
         STH   R0,DSNCNT      SAVE HIT COUNT
         SPACE 1
         LA    R7,EPA         GET ADDR OF EXTENDED PARM AREA
         ST    R7,@SWAEPA
         USING ZB505,R7       EST ADDR TO EPA
         SPACE 1
         XC    SWAEPAX,SWAEPAX
         MVC   SWVA,TIOEJFCB  SET SVA OF JFCB INTO EPA
         DROP  R8
         SWAREQ UNAUTH=YES,                                            +
               FCODE=RL,           ACTION CODE READ/LOCATE             +
               EPA=@SWAEPA,                                            +
               MF=(E,SWAPARMS)
         LARL  RE,DSAB0800    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107C       A. YES, SETUP LE COND
         SPACE 1
         CLI   SWBLKID,SWJFCBID    Q. SYSTEM JFCB
         JNE   TXT0108D            A. NO,
         MVC   @SJFCB,SWBLKPTR     SAVE SYSTEM JFCB ADDR
         DROP  R7
         L     R7,PGMPARM3    GET ADDR OF FMCB
         USING FMCB,R7        EST ADDR TO FMCB
         MVC   FM_@SJFCB,@SJFCB    SAVE IN CALLER'S REQ BLK
         DROP  R7
         SPACE 1
DSAB0800 AS2LTRCE
         AS2RESTK POP
         BR    RE        RETURN TO CALLER
         SPACE 1
DSAB0904 AS2LTRCE
         L     RF,F4          SET END OF DATA (EOD)
         J     DSAB0800
         EJECT
* --------------------------------------------------------- *
* READ JFCB FOR SELECTED DDNAME
*
* THE RDJFCB PARAMETER LIST, THE DCB, AND THE JFCB AREA
*     SPECIFIED IN THE EXIT LIST AS WELL AS THE EXIT LIST
*     ITSELF MUST RESIDE BELOW THE 16 MB LINE, ALTHOUGH THE
*     CALLING PROGRAM CAN BE ABOVE 16 MB LINE.
*     SET JFCBMASK+4 X'80' TO ENSURE JFCB MODIFICATIONS
*     WILL BE IMPLEMENTED ON OPEN.
*
* RETURN CODE SETTINGS:
*   04 - (1) DATA SET IS VSAM
*        (2) DCB IS OPEN
*        (3) DISP IS NOT EQUAL TO NEW
*        (4) NO DCB OVERRIDES
* --------------------------------------------------------- *
         SPACE 1
RJFCB100 AS2LTRCE
         AS2RESTK PUSH
         L     R7,PGMPARM3
         USING RMAB,R7
         SPACE 1
         CLC   RM_DSID,=Y($DRMAB)  Q. AUX DICTIONARY RMAB
         JNE   RJFCB130            A. NO,
**    ADD SOME CODE                A. YES,
         SPACE 1
RJFCB130 AS2LTRCE
         USING FMCB,R7
         SPACE 1
         LARL  RE,RJFCB800    SET DEFAULT RETURN
         CLC   FM_DSID,=Y(FM_$DSD) Q. AUX DICTIONARY FMCB
         JNE   TXT0108I            A. NO,
         SPACE 1
         TM    FM_@DCB,X'7F'  Q. 24-BIT ADDR
         JNZ   TXT0108A       A. NO
         TM    FM_@WJFCB,X'7F'     Q. 24-BIT ADDR
         JNZ   TXT0108G            A. NO
         TM    FM_@CBXL,X'7F' Q. 24-BIT ADDR
         JNZ   TXT0108H       A. NO
         SPACE 1
         ICM   R8,15,FM_@DCB  Q. DCB PRESENT
         JZ    TXT0108A       A. NO
         ICM   R3,15,FM_@WJFCB     Q. JFCB PRESENT
         JZ    TXT0108G            A. NO
         ST    R7,FW21        SAVE FMCB FOR LATER
         ICM   R7,15,FM_@CBXL Q. DCB EXIT LIST PRESENT
         JZ    TXT0108H       A. NO
         DROP  R7
         SPACE 1
         USING DCBXL,R7
         USING IHADCB,R8
         SPACE 1
         LA    R0,1           SET REASON CODE
         TM    DCBDSRG2,DCBACBM    Q. ACB
         JO    RJFCB904            A. YES, NO PROCESSING REQUIRED
         LA    R0,2           SET REASON CODE
         CLC   DCBDDNAM,REQDDNME   Q. DCB HAVE DDNAME
         JNE   RJFCB904            A. NO, MUST BE OPEN
         TM    DCBOFLGS,DCBOFOPN   Q. DATA SET OPEN
         JO    RJFCB904            A. YES
         ST    R3,DCBXLE      SAVE JFCB ADDR IN EXLST
         MVI   DCBXLE,X'07'   DEFINE JFCB EXIT
         OI    DCBXLE,X'80'   TERMINATE LIST
         DROP  R7
         SPACE 1
         STCM  R7,7,DCBEXLSA  SAVE EXLST ADDR IN DCB
         MVI   PLIST,X'80'    SET UP END OF PLIST
         RDJFCB IHADCB,MF=(E,PLIST)
         LARL  RE,RJFCB800
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107G       A. YES, SETUP LE COND
*                                ..00-SUCCESSFUL
*                                ..04-DCB(S) NOT PROCESSED
*                                ..08-ARL(S) NOT PROCESSED
         DROP  R8
         MVI   PFLAG2,C'N'
         SPACE 1
RJFCB200 AS2LTRCE , NON-VSAM
         L     R7,FW21
         USING FMCB,R7
         LR    R8,R3
         USING INFMJFCB,R8
         LA    R0,1           SET REASON CODE
         TM    FM_AM,$VSAM    Q. AM = VSAM
         JO    RJFCB400       A. YES
         LA    R0,3           SET REASON CODE
         TM    JFCBIND2,JFCNEW     Q. DISP=NEW
         JNO   RJFCB904            A. NO,
         OC    JFCBLKSI,JFCBLKSI   Q. JFCB BLKSIZE SPECIFIED
         JNZ   RJFCB210            A. YES
         OC    FM_BLKSZ,FM_BLKSZ   Q. DICT BLKSIZE SPECIFIED
         JZ    RJFCB210            A. NO
         MVC   JFCBLKSI,FM_BLKSZ+L'FM_BLKSZ-L'JFCBLKSI
         MVI   PFLAG2,C'Y'
RJFCB210 EQU   *
         OC    JFCLRECL,JFCLRECL   Q. JFCB LRECL SPECIFIED
         JNZ   RJFCB220            A. YES
         MVC   JFCLRECL,FM_MAXLEN+L'FM_MAXLEN-L'JFCLRECL
         MVI   PFLAG2,C'Y'
         TM    JFCBFLG3,JFCBBFTK   Q. LRECL=nK
         JNO   RJFCB220            A. NO
         NI    JFCBFLG3,255-JFCBBFTK  TURN OFF NK DESIGNATION
         MVI   PFLAG2,C'Y'
RJFCB220 EQU   *
*                        D B  S  A ,
*                        F B  S  A|M ,
*                        U A|M ,
*                        V B  S  A|M
         CLI   JFCRECFM,X'00' Q. JFCB RECFM SPECIFIED
         JNE   RJFCB289       A. YES
         TM    FM_RECFM,$UND  Q. DICT RECFM=U
         JNO   RJFCB230       A. NO
         OI    JFCRECFM,JFCUND
         XC    JFCLRECL,JFCLRECL   DCB=LRECL=n
         MVI   PFLAG2,C'Y'
         J     RJFCB270
RJFCB230 EQU   *
         TM    FM_RECFM,$FIX  Q. DICT RECFM=F
         JNO   RJFCB240       A. NO
         OI    JFCRECFM,JFCFIX
         MVI   PFLAG2,C'Y'
         J     RJFCB250
RJFCB240 EQU   *
         TM    FM_RECFM,$VAR  Q. DICT RECFM=V
         JNO   RJFCB250       A. NO
         OI    JFCRECFM,JFCVAR
         MVI   PFLAG2,C'Y'
*        J     RJFCB250
RJFCB250 EQU   *
         TM    FM_RECFM,$BLK  Q. DICT RECFM=.B
         JNO   RJFCB260       A. NO
         OI    JFCRECFM,JFCRFB
         MVI   PFLAG2,C'Y'
*        J     RJFCB270
RJFCB260 EQU   *
         TM    FM_RECFM,$SPN  Q. DICT RECFM=.S
         JNO   RJFCB270       A. NO
         OI    JFCRECFM,JFCRFS
         MVI   PFLAG2,C'Y'
*        J     RJFCB270
RJFCB270 EQU   *
         TM    FM_RECFM,$ASA  Q. DICT RECFM=..A
         JNO   RJFCB280       A. NO
         OI    JFCRECFM,JFCASA
         MVI   PFLAG2,C'Y'
         J     RJFCB289
RJFCB280 EQU   *
         TM    FM_RECFM,$MCC  Q. DICT RECFM=..M
         JNO   RJFCB290       A. NO
         OI    JFCRECFM,JFCMAC
         MVI   PFLAG2,C'Y'
RJFCB289 EQU   *
         SPACE 1
RJFCB290 EQU   *
         CLI   JFCBUFNO,X'00' Q. JFCB BUFNO SPECIFIED
         JNE   RJFCB300       A. NO
         MVC   JFCBUFNO,FM_BUFNO+L'FM_BUFNO-L'JFCBUFNO
         MVI   PFLAG2,C'Y'
RJFCB300 EQU   *
         J     RJFCB700
         SPACE 1
RJFCB400 AS2LTRCE , VSAM
         OC    JFCNLREC,JFCNLREC   Q. JFCB LRECL SPECIFIED
         JNZ   RJFCB410            A. YES
         MVC   JFCNLREC,FM_MAXLEN+L'FM_MAXLEN-L'JFCNLREC
         MVI   PFLAG2,C'Y'
         SPACE 1
RJFCB410 EQU   *
         OC    JFCBADBF,JFCBADBF   Q. JFCB AMP=(BUFND=N) SPECIFIED
         JNZ   RJFCB420            A. YES
         MVC   JFCBADBF,FM_BUFND
         MVI   PFLAG2,C'Y'
         SPACE 1
RJFCB420 EQU   *
         OC    JFCBAXBF,JFCBAXBF   Q. JFCB AMP=(BUFNI=n) SPECIFIED
         JNZ   RJFCB430            A. YES
         MVC   JFCBAXBF,FM_BUFNI
         MVI   PFLAG2,C'Y'
RJFCB430 EQU   *
         OC    JFCBABFS,JFCBABFS   Q. JFCB AMP=(BUFSP=n) SPECIFIED
         JZ    RJFCB440            A. NO
         OC    JFCBADBF,JFCBADBF   Q. JFCB AMP=(BUFND=n) SPECIFIED
         JZ    RJFCB440            A. NO
         XC    JFCBABFS,JFCBABFS   A. YES USE BUFND
         MVI   PFLAG2,C'Y'
RJFCB440 EQU   *
RJFCB449 EQU   *
RJFCB700 EQU   *
         LA    R0,4           SET REASON CODE
         CLI   PFLAG2,C'Y'    Q. JCL OVERRIDES
         JNE   RJFCB904       A. NO
         OI    JFCBMASK+4,X'80'
         SPACE 1
RJFCB800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R7,R8
         SPACE 1
RJFCB904 AS2LTRCE
         LA    RF,4           SET NOT PROCESSED RC
         J     RJFCB800
         EJECT
* --------------------------------------------------------- *
* READ ICF CATALOG FOR DSNAME
* PRE-REQS: R8 POINTS TO ACB
*           R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
RVCAT100 AS2LTRCE
         AS2RESTK PUSH
         USING IFGACB,R8
         USING DSI_NTRY_BEG,R6
         SPACE 1
         TM    ACBDSOR2,ACBDORGA   Q. ACB
         JNO   RVCAT800            A. NO, BYPASS
         DROP  R8
         SPACE 1
RVCAT110 AS2LTRCE
         ICM   R8,15,@SJFCB   Q. SYSTEM JFCB
         JZ    RVCAT800       A. NO,
         SPACE 1
         LA    R0,WAREA
         LA    R1,L'WAREA
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
         LA    R7,WAREA1
         USING CSIFIELD,R7
         USING INFMJFCB,R8
         SPACE 1
         MVC   CSIFILTK,JFCBDSNM
         DROP  R8
         MVI   CSICATNM,C' '
         MVC   CSICATNM+1(L'CSICATNM-1),CSICATNM
         MVC   CSIRESNM,CSICATNM
         MVI   CSIDTYPS,C' '
         MVC   CSIDTYPS+1(L'CSIDTYPS-1),CSIDTYPS
         MVI   CSIDTYPS,C'C'
         MVI   CSICLDI,C'Y'
         MVI   CSIRESUM,C' '
         MVI   CSIS1CAT,C'Y'
         XC    CSIRESRV,CSIRESRV
         MVC   CSINUMEN($REQCNT*8+2),REQTABLE
         DROP  R7
         LA    R7,WAREA2
         USING CSIRWORK,R7
         USING CSICAT,CSI_RST1
         USING CSINTRY,CSI_RST2
         SPACE 1
         LA    R0,L'WAREA2
         ST    R0,CSIUSRLN
         LA    R0,14+CSI_CAT_LEN+CSI_NTRY_#LEN
         ST    R0,CSIREQLN
         DROP  R7
         SPACE 1
RVCAT200 AS2LTRCE
         OC    @CSIPGM,@CSIPGM     Q. CSIPGM BEEN LOADED
         JNZ   RVCAT210            A. YES
         LOAD  EPLOC=IGGCSI00      A. NO
         ST    R0,@CSIPGM     SAVE ADDR OF CSIPGM
RVCAT210 EQU   *
         XC    FW21,FW21      CLEAR OUT RETURN/REASON
         AS2PLIST (FW21,WAREA1,WAREA2),VL,MF=(E,PLIST)
         L     RF,@CSIPGM
*        CALL  IGGCSI00
         BASR  RE,RF     LINK TO
         LARL  RE,RVCAT800    SET DEFAULT RETURN
         C     RF,F4          Q. ANY ERRORS
         JH    TXT0107D       A. YES, SETUP LE COND
RVCAT230 EQU   *
         SPACE 1
RVCAT800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         EJECT
* --------------------------------------------------------- *
* READ VTOC FOR SELECTED DDNAME
* PRE-REQS: R8 POINTS TO JFCB
* --------------------------------------------------------- *
         SPACE 1
RVTOC100 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         USING INFMJFCB,R8
         SPACE 1
         TM    DVACLASS,$DASD Q. DASD DEVICE
         JNO   RVTOC800       A. NO, CAN'T BE VTOC
         ICM   R1,8,JFCBNVOL  Q. PICK UP NBR OF VOL=SER
         JZ    RVTOC800       A. NO, NONE EXIST
         MVC   VOLSER,JFCBVOLS     SAVE 1ST VOL=SER=
         SPACE 1
         LA    R1,193
         SLL   R1,24
         ST    R1,CAMLST      SAVE ACTION
         LA    R1,DSNAME
         ST    R1,CAMLST+4    SAVE DSNAME
         LA    R1,VOLSER
         ST    R1,CAMLST+8    SAVE VOLSER
         SPACE 1
RVTOC200 AS2LTRCE
*        COLLECT VTOC VOLUME INFORMATION
         MVI   DSNAME,X'04'
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         LA    R1,VTOCF4
         ST    R1,CAMLST+12
         OBTAIN CAMLST
         LARL  RE,RVTOC800    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107E       A. YES, SETUP LE COND
         SPACE 1
RVTOC300 AS2LTRCE
*        COLLECT VTOC DSNAME INFORMATION
         MVC   DSNAME,JFCBDSNM     SAVE DSNAME
         DROP  R8
         LA    R1,VTOCF1
         ST    R1,CAMLST+12   SAVE VTOC BUFFER
         OBTAIN CAMLST
         LARL  RE,RVTOC800    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107E       A. YES, SETUP LE COND
         SPACE 1
RVTOC800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* EXTRACT DEVICE INFORMATION
* --------------------------------------------------------- *
         SPACE 1
XDEV0100 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1              EXTRACT DEVICE INFO
         XC    DEVINFO,DEVINFO     CLEAR OUT 2 WORDS
         DEVTYPE REQDDNME,DEVINFO
         LARL  RE,XDEV0120    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107F       A. YES, SETUP LE COND
*                                ..00-SUCCESSFUL
*                                ....00-ALL INFO AVAILABLE
*                                ....04-NOT ALL INFO AVAILABLE
*                                ..04-INVOCATION ERROR
*                                ....04-DD NOT DEFINED
*                                ....08-PARM LIST NOT VALID
*                                ..08-UNSUPPORTED DEVICE CLASS
*                                ....12-NUMERIOUS POSIBILITIES
         SPACE 2
XDEV0120 EQU   *    EXTRACT AM CAPABILITY INFO
         MVC   DEVILST,DEVILST0    INIT MUTABLE PARM LIST
         DEVTYPE REQDDNME,(DVAAMCAP,L'DVAAMCAP),                       +
               INFOLIST=DEVILST1,MF=(E,DEVILST)
         LARL  RE,XDEV0140    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107F       A. YES, SETUP LE COND
*                                ..00-SUCCESSFUL
*                                ....00-ALL INFO AVAILABLE
*                                ....04-NOT ALL INFO AVAILABLE
*                                ..04-INVOCATION ERROR
*                                ....04-DD NOT DEFINED
*                                ....08-PARM LIST NOT VALID
*                                ..08-UNSUPPORTED DEVICE CLASS
*                                ....12-NUMERIOUS POSIBILITIES
         SPACE 2
XDEV0140 EQU   *    EXTRACT DASD INFO
         TM    DVACLASS,$DASD Q. DASD
         JNO   XDEV0160       A. NO, BYPASS
         MVC   DEVILST,DEVILST0    INIT MUTABLE PARM LIST
         DEVTYPE REQDDNME,(DVAIDASD,L'DVAIDASD),                       +
               INFOLIST=DEVILST2,MF=(E,DEVILST)
         LARL  RE,XDEV0160    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107F       A. YES, SETUP LE COND
*                                ..00-SUCCESSFUL
*                                ....00-ALL INFO AVAILABLE
*                                ....04-NOT ALL INFO AVAILABLE
*                                ..04-INVOCATION ERROR
*                                ....04-DD NOT DEFINED
*                                ....08-PARM LIST NOT VALID
*                                ..08-UNSUPPORTED DEVICE CLASS
*                                ....12-NUMERIOUS POSIBILITIES
         SPACE 2
XDEV0160 EQU   *    EXTRACT ELIGIBLE DEVICE TABLE INFO
         LA    R0,10
         STC   R0,EDTLEN
         EDTINFO RTNUNIT,RTNATTR,                                      +
               DEVTYPE=DVAUCBTY,                                       +
               OUTUNIT=UNITNME,                                        +
               ATTRAREA=UNITATTR,                                      +
               RETCODE=RTNCD,                                          +
               RSNCODE=RSNCD,                                          +
               MF=(E,EDTPLIST)
         LARL  RE,XDEV0180    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107H       A. YES, SETUP LE COND
*                             ..00-SUCCESSFUL
*                             ..04-SOME MINOR ERRORS
*                             ....01-DEVICE(S) NOT IN SAME GROUP
*                             ....02-DEVICE(S) DOES NOT MATCH DEVTYPE
*                             ....03-NO UNIT(S) MATCHED DEVICE
*                             ..08-INVALID PARAMETER ERROR
*                             ....01-UNIT NOT FOUND
*                             ....02-DEVTYPE NOT FOUND
*                             ....03-DEVICE(S) NBR INVALID
*                             ....04-INSUFFICIENT STORAGE
*                             ....05-MAXELIG REQUIRES GENERIC DEVTYPE
*                             ....06-NO FUNCTION REQUESTED
*                             ....07-REQUESTED FUNCTION INVALID
*                             ....08-PARM VALUE INVALID
*                             ..12-CONFIGURATION CHANGE
*                             ..16-STORAGE NOT AVAILABLE
*                             ..24-SYSTEM ERROR
         SPACE 2
XDEV0180 EQU   *    RETRIEVE DEVICE INFO FOR DDNAME
         IEFDDSRV RETRIEVE,DEVENTRY,                                   +
               DDNAME=REQDDNME,                                        +
               DEVAREA=@DD1UCB_LST,                                    +
               LOC=ANY,                                                +
               RETCODE=RTNCD,                                          +
               RSNCODE=RSNCD,                                          +
               MF=(E,DD1PLIST)
         LARL  RE,XDEV0300    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107H       A. YES, SETUP LE COND
*                             ..00-SUCCESSFUL
*                             ..08-INVALID PARAMETER ERROR
*                             ....04-DD NAME BLANK
*                             ....08-DSAB PTR ZERO
*                             ....12-DCB PTR ZERO
*                             ....16-SUBSPOOL INVALID
*                             ....20-ACB PTR ZERO
*                             ....24-DSAB 31-BIT
*                             ....32-VERSION & PARM LEN DO NOT MATCH
*                             ....36-VERSION DOES NOT SUPPORT FUNCTION
*                             ....40-PARM LIST VER > MACRO LEVEL
*                             ....44-FUNCTION NOT SUPPORTED BY MACRO
*                             ..12-INVALID INPUT
*                             ....04-DD NAME INVALID
*                             ....08-DSAB PTR INVALID
*                             ....12-FAILED TO OBTAIN TIOT
*                             ....16-FAILED TO OBTAIN LOCK
*                             ....20-TCB PTR INVALID
*                             ....28-DSAB PTR 31-BIT
*                             ....32-DSAB PTR TO TCTTIOT ZERO
*                             ....+MORE
*                             ..16-SYSTEM ERROR
         SPACE 1
XDEV0200 EQU   *    PICK UP 1ST UCB ADDR OF DEVICE
*                   LIST BASED OFF DSNCNT (CONCATENATED
*                   DATA SET OF SELECTED DDNAME)
         ICM   R8,15,@DD1UCB_LST
         JZ    XDEV0220
         USING DVAR,R8        EST ADDR TO DEVICE AREA HEADER
         ICM   R0,14,DVAR_LENGTH
         SRL   R0,8
         ST    R0,#DD1UCB_LST SAVE LENGTH OF GETMAIN
         LH    R3,DSNCNT      PICK-UP LIST COUNT
         AHI   R3,-1          CONVERT TO INDEX
         SLL   R3,2           MULTIPLY BY 4
         L     R7,DVAR_DEVLST_ADDR(R3)  GET ADDR OF DEVICE LIST
*                                       FOR DDNAME CONCATENATION
         USING DVAR_DEVICE_LIST,R7 EST ADDR TO DEVICE LIST
         L     R0,DVAR_DEV_ADDR    GET 1ST UCB ADDR
         ST    R0,@UCBCS           SAVE IT FOR FUTHER PROCESSING
         DROP  R7,R8
         SPACE 1
XDEV0220 EQU   *
         SPACE 1
XDEV0300 EQU   *
         SPACE 2
XDEV0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* COPY DEVICE INFO TO DATA SET INFO
* PRE-REQS: R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
CDEV0100 AS2LTRCE
         AS2RESTK PUSH
         USING DSI_NTRY_BEG,R6
         SPACE 1
         MVC   DSI_DEV_DCLASS,=CL8'UNKNOWN'
         MVC   DSI_UCB_DTYPE,=CL4'UNKN'
         SPACE 1
         OC    DEVINFO,DEVINFO     Q. ANY BITS ON
         JNZ   CDEV0120            A. YES, NOT DD DUMMY
         OI    DSI_UCB_IND0,$DUMMY A. NO, MUST BE DUMMY
         J     CDEV0160
         SPACE 1
CDEV0120 EQU   *
         TM    DVACLASS,$TAPE Q. MAG TAPE
         JNO   CDEV0124       A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'MAGTAPE'
         J     CDEV0160
CDEV0124 EQU   *
         TM    DVACLASS,$CTC  Q. C2C ADAPTOR
         JNO   CDEV0128       A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'C-TO-C'
         J     CDEV0160
CDEV0128 EQU   *
         TM    DVACLASS,$UR   Q. UNIT RECORD
         JNO   CDEV0132       A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'UR'
         J     CDEV0160
CDEV0132 EQU   *
         TM    DVACLASS,$DASD Q. DASD
         JNO   CDEV0136       A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'DASD'
         J     CDEV0160
CDEV0136 EQU   *
         TM    DVACLASS,$DISPLAY   Q. DISPLAY
         JNO   CDEV0140            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'DISPLAY'
         J     CDEV0160
CDEV0140 EQU   *
         TM    DVACLASS,$CHRRDR    Q. CHARACTER READER
         JNO   CDEV0144            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'CHRRDR'
         J     CDEV0160
CDEV0144 EQU   *
         TM    DVACLASS,$SIMDEV    Q. SIMULATED DEVICE, NO DCB
         JNO   CDEV0150            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'SIMDEV'
         TM    DVAUNIT,X'02'            Q. SYSIN/SYSOUT/SUBSYS=
         JNO   CDEV0150                 A. NO,
         OI    DSI_UCB_IND0,$SUBSYS     A. YES,
*        J     CDEV0160
CDEV0150 EQU   *
         SPACE 1
CDEV0160 AS2LTRCE
         MVC   DSI_DEV_MAXBSZ,MAXBLKSZ
         TM    DVAAMFLG,DVAAMLBI   Q. LBI SUPPORTED
         JNO   CDEV0164            A. NO, BYPASS
         MVC   DSI_DEV_LBIBSZ,DVAMAXBLK
         MVC   DSI_DEV_OPTBSZ,DVAOPTBLK
         SPACE 1
CDEV0164 AS2LTRCE
         MVC   DSI_DEV_MLRECL,DVAMAXLR
         CLC   DSI_DEV_DCLASS,=CL8'DASD'     Q. DASD
         JNE   CDEV0800                      A. NO,
         MVC   DSI_DEV_NOLCYL,DVAICYL   NBR CYLS - ALT CYLS
         MVC   DSI_DEV_TRKCYL,DVAITRK   NBR TRKS/CYL
         TM    DVAIFLAG1,DVACACHE1 Q. DEVICE CACHED
         JNO   CDEV0168            A. NO, BYPASS
         OI    DSI_UCB_IND8,$CACHE A. YES,
CDEV0168 EQU   *
         TM    EDTFLG1,$VIOELIG    Q. VIO ELIGIBLE
         JNO   CDEV0172            A. NO, BYPASS
         OI    DSI_UCB_IND1,$VIO   A. YES,
CDEV0172 EQU   *
         SPACE 2
CDEV0180 AS2LTRCE , UCB COMMON SEGMENT
         L     R7,PGMPARM3    PICK-UP COMMAREA
         USING FMCB,R7        EST ADDR TO COMMAREA
         MVC   FM_@UCB,@UCBCS
         DROP  R7
         L     R8,@UCBCS      GET ADDR OF UCB COMMON SEGMENT
         USING UCBOB,R8       EST ADDR TO UCB COMMON SEGMENT
         TM    UCBJBNR,UCBVRDEV    Q. VIO DEVICE
         JNO   CDEV0182            A. NO, BYPASS
         OI    DSI_UCB_IND1,$VIO   A. YES,
CDEV0182 EQU   *
         TM    UCBFL5,UCBSMS       Q. SMS
         JNO   CDEV0184            A. NO, BYPASS
         OI    DSI_UCB_IND7,$SMS   A. YES,
CDEV0184 EQU   *
         UNPK  ZD02(9),UCBCHAN(L'UCBCHAN+1) CONV DEVICE TO DSPLY HEX
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   DSI_UCB_DNBR,ZD02+8-L'DSI_UCB_DNBR
**       UCBDEVN DEVN=DSI_UCB_DNBR,UCBPTR=@UCBCS
CDEV0186 EQU   *
         TM    UCBWGT,UCBIN        Q. SYSIN
         JNO   CDEV0188            A. NO, BYPASS
         OI    DSI_UCB_IND9,$SYSIN A. YES,
         J     CDEV0190
CDEV0188 EQU   *
         TM    UCBWGT,UCBOUT            Q. SYSOUT
         JNO   CDEV0190                 A. NO, BYPASS
         OI    DSI_UCB_IND9,$SYSOUT     A. YES,
         SPACE 1
CDEV0190 AS2LTRCE , UCB CLASS BITS
         TM    UCBTBYT3,UCB3TAPE   Q. TAPE DEVICE (CLASS BITS)
         JNO   CDEV0250            A. NO, BYPASS TAPE
         MVC   DSI_DEV_DCLASS,=CL8'MAGTAPE'
*        TEST FOR REEL TAPE
         TM    UCBTBYT4,UCB3400    Q. REEL TAPE (DEVICE CODE)
         JNO   CDEV0200            A. NO, BYPASS REEL
         MVC   DSI_DEV_DCLASS,=CL8'REEL'
         MVC   DSI_UCB_DTYPE,=CL4'3400'
         OI    DSI_UCB_INDA,$T3400 A. YES,
         TM    UCBTBYT1,UCBD1600   Q. 1600 BPI (MODEL BITS)
         JNO   CDEV0192            A. NO, BYPASS
         OI    DSI_UCB_INDA,$BPI1600
         J     CDEV0194
CDEV0192 EQU   *
         TM    UCBTBYT1,UCBD6250   Q. 6250 BPI (MODEL BITS)
         JNO   CDEV0194            A. NO, BYPASS
         OI    DSI_UCB_INDA,$BPI6250
CDEV0194 EQU   *
         TM    UCBTBYT2,UCBDUDN2   Q. DUAL DENSITY (OPT BITS)
         JNO   CDEV0196            A. NO, BYPASS
         OI    DSI_UCB_INDA,$BPIDUAL
         J     CDEV0230
CDEV0196 EQU   *
         J     CDEV0230
         SPACE 1
CDEV0200 AS2LTRCE , TEST FOR CART TAPE
         TM    UCBTBYT4,X'80' Q. CART TAPE (DEVICE CODE)
         JNO   CDEV0500       A. NO, BYPASS UNKNOWN TAPE
         MVC   DSI_DEV_DCLASS,=CL8'CART'
         TM    UCBTBYT4,UCB3423    Q. 3423 (DEVICE CODE)
         JNO   CDEV0202            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3423'
         OI    DSI_UCB_INDB,$T3423 A. YES,
         J     CDEV0220
CDEV0202 EQU   *
         TM    UCBTBYT4,UCB3480    Q. 3480 (DEVICE CODE)
         JNO   CDEV0204            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3480'
         OI    DSI_UCB_INDB,$T3480 A. YES,
         J     CDEV0220
CDEV0204 EQU   *
         TM    UCBTBYT4,UCB3490    Q. 3490 (DEVICE CODE)
         JNO   CDEV0206            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3490'
         OI    DSI_UCB_INDB,$T3490 A. YES,
         J     CDEV0220
CDEV0206 EQU   *
         TM    UCBTBYT4,UCB3591    Q. 3590 (DEVICE CODE)
         JNO   CDEV0208            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3590'
         OI    DSI_UCB_INDB,$T3590 A. YES,
         J     CDEV0220
CDEV0208 EQU   *
*        J     CDEV0220
CDEV0220 EQU   *
         TM    UCBTBYT2,UCBCOMPA   Q. COMPACTION (OPT BITS)
         JNO   CDEV0230            A. NO, BYPASS
         OI    DSI_UCB_INDB,$MTCOMP
*        J     CDEV0230
         SPACE 1
CDEV0230 AS2LTRCE
         MVC   DSI_UCB_VOLNM,UCBVOLI    VOLSER
         MVC   DSI_UCB_VOLSEQ,UCBFSEQ   VOL SEQ NBR
         MVC   DSI_UCB_VOLCNT,UCBFSCT   VOL SEQ COUNT
         TM    UCBTFL2,UCBTVCMP    Q. VOL CONTAIN COMPACT DATA
         JNO   CDEV0232            A. NO, BYPASS
         OI    DSI_UCB_INDB,$MTCOMP
CDEV0232 EQU   *
         TM    UCBTFL1,UCBNLTP     Q. NON-LABELED
         JNO   CDEV0234            A. NO, BYPASS
         OI    DSI_UCB_IND6,$LBLNL A. YES,
         J     CDEV0500
CDEV0234 EQU   *
         TM    UCBTFL1,UCBNSLTP    Q. NON-STD LABELS
         JNO   CDEV0236            A. NO, BYPASS
         OI    DSI_UCB_IND6,$LBLNSL
         J     CDEV0500
CDEV0236 EQU   *
         TM    UCBTFL1,UCBBLP Q. BLP
         JNO   CDEV0238       A. NO, BYPASS
         OI    DSI_UCB_IND6,$LBLBLP
         J     CDEV0500
CDEV0238 EQU   *
         J     CDEV0500
         SPACE 1
CDEV0250 AS2LTRCE , TEST FOR DASD
         TM    UCBTBYT3,UCB3DACC   Q. DASD DEVICE (CLASS BITS)
         JNO   CDEV0280            A. NO, BYPASS DASD
         MVC   DSI_DEV_DCLASS,=CL8'DASD'
         TM    UCBTBYT2,UCBRVDEV   Q. VIRTUAL DEVICE (OPT BITS)
         JNO   CDEV0254            A. NO, BYPASS
         OI    DSI_UCB_IND1,$VIO   A. YES,
CDEV0254 EQU   *
         CLI   UCBTBYT4,X'07' Q. 2305-2 (DEVICE CODE)
         JNE   CDEV0256       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'2305'
         OI    DSI_UCB_INDB,$D2305
         J     CDEV0270
CDEV0256 EQU   *
         CLI   UCBTBYT4,X'09' Q. 3330 (DEVICE CODE)
         JNE   CDEV0258       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3330'
         OI    DSI_UCB_INDB,$D3330
         J     CDEV0270
CDEV0258 EQU   *
         CLI   UCBTBYT4,X'0A' Q. 3340 (DEVICE CODE)
         JNE   CDEV0260       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3340'
         OI    DSI_UCB_INDB,$D3340
         J     CDEV0270
CDEV0260 EQU   *
         CLI   UCBTBYT4,X'0B' Q. 3350 (DEVICE CODE)
         JNE   CDEV0262       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3350'
         OI    DSI_UCB_INDB,$D3350
         J     CDEV0270
CDEV0262 EQU   *
         CLI   UCBTBYT4,X'0C' Q. 3375 (DEVICE CODE)
         JNE   CDEV0264       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3375'
         OI    DSI_UCB_INDB,$D3375
         J     CDEV0270
CDEV0264 EQU   *
         CLI   UCBTBYT4,X'0D' Q. 3330-11 (DEVICE CODE)
         JNE   CDEV0266       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'333X'
         OI    DSI_UCB_INDB,$D333X
         J     CDEV0270
CDEV0266 EQU   *
         CLI   UCBTBYT4,X'0E' Q. 3380 (DEVICE CODE)
         JNE   CDEV0268       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3380'
         OI    DSI_UCB_INDB,$D3380
         J     CDEV0270
CDEV0268 EQU   *
         CLI   UCBTBYT4,X'0F' Q. 3390 (DEVICE CODE)
         JNE   CDEV0270       A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3390'
         OI    DSI_UCB_INDB,$D3390
*        J     CDEV0270
CDEV0270 EQU   *
         MVC   DSI_UCB_VOLNM,UCBVOLI
         J     CDEV0500
         SPACE 1
CDEV0280 AS2LTRCE , TEST FOR UNIT RECORD
         TM    UCBTBYT3,UCB3UREC        Q. UNIT RECORD (CLASS BITS)
         JNO   CDEV0310                 A. NO, BYPASS UR
         MVC   DSI_DEV_DCLASS,=CL8'UR'  A. YES,
         MVC   DSI_UCB_URXPTR,UCBXTADR
         CLI   UCBTBYT4,UCB3211    Q. PRINTER 3211 (DEVICE CODE)
         JNE   CDEV0282            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'PRINTER'
         MVC   DSI_UCB_DTYPE,=CL4'3211'
         OI    DSI_UCB_INDB,$P3211
         J     CDEV0500
CDEV0282 EQU   *
         CLI   UCBTBYT4,UCB3800    Q. PRINTER 3800 (DEVICE CODE)
         JNE   CDEV0284            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'PRINTER'
         MVC   DSI_UCB_DTYPE,=CL4'3800'
         OI    DSI_UCB_INDB,$P3800
         J     CDEV0500
CDEV0284 EQU   *
         CLI   UCBTBYT4,UCBAFP1    Q. PRINTER APF SUBSYS (DEVICE CODE)
         JNE   CDEV0286            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'PRINTER'
         MVC   DSI_UCB_DTYPE,=CL4'APF'
         OI    DSI_UCB_INDB,$PAPF
         J     CDEV0500
CDEV0286 EQU   *
         CLI   UCBTBYT4,UCB4245    Q. PRINTER 3263/4245 (DEVICE CODE)
         JNE   CDEV0288            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'PRINTER'
         MVC   DSI_UCB_DTYPE,=CL4'4245'
         OI    DSI_UCB_INDB,$P4245
         J     CDEV0500
CDEV0288 EQU   *
         CLI   UCBTBYT4,UCB4248    Q. PRINTER 4248 (DEVICE CODE)
         JNE   CDEV0290            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'PRINTER'
         MVC   DSI_UCB_DTYPE,=CL4'4248'
         OI    DSI_UCB_INDB,$P4248
         J     CDEV0500
CDEV0290 EQU   *
         CLI   UCBTBYT4,UCB3895    Q. OPTRDR 3895 (DEVICE CODE)
         JNE   CDEV0292            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'OPTRDR'
         MVC   DSI_UCB_DTYPE,=CL4'3895'
         OI    DSI_UCB_INDB,$R3895
         J     CDEV0500
CDEV0292 EQU   *
         CLI   UCBTBYT4,UCBDIR     Q. ESCON/FICON DIR (DEVICE CODE)
         JNE   CDEV0294            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'DIR'
         OI    DSI_UCB_INDB,$EFDIR
         J     CDEV0500
CDEV0294 EQU   *
         CLI   UCBTBYT4,UCB3838    Q. ARRAY PROCESSOR (DEVICE CODE)
         JNE   CDEV0296            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'VCTP'
         OI    DSI_UCB_INDB,$AP3838
         J     CDEV0500
CDEV0296 EQU   *
         J     CDEV0500
         SPACE 1
CDEV0310 AS2LTRCE , TEST FOR CTC
         TM    UCBTBYT3,UCB3CTC    Q. CTC (CLASS BITS)
         JNO   CDEV0350            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'C-TO-C'
         CLI   UCBTBYT4,UCBPCTC    Q. PARALLEL CTC (DEVICE CODE)
         JNE   CDEV0312            A. NO, BYPASS
         OI    DSI_UCB_INDB,$CTCPAR
         J     CDEV0500
CDEV0312 EQU   *
         CLI   UCBTBYT4,UCBSCTC    Q. SERIAL CTC (DEVICE CODE)
         JNE   CDEV0314            A. NO, BYPASS
         OI    DSI_UCB_INDB,$CTCSER
         J     CDEV0500
CDEV0314 EQU   *
         CLI   UCBTBYT4,UCBBCTC    Q. BASIC ESCON CTC (DEVICE CODE)
         JNE   CDEV0316            A. NO, BYPASS
         OI    DSI_UCB_INDB,$CTCESCON
         J     CDEV0500
CDEV0316 EQU   *
         CLI   UCBTBYT4,UCBRS6K    Q. RS6000 ACTING CTC (DEVICE CODE)
         JNE   CDEV0318            A. NO, BYPASS
         OI    DSI_UCB_INDB,$CTCRS6000
         J     CDEV0500
CDEV0318 EQU   *
         CLI   UCBTBYT4,UCB3172    Q. 3172 ACTING CTC (DEVICE CODE)
         JNE   CDEV0320            A. NO, BYPASS
         OI    DSI_UCB_INDB,$CTC3172
         J     CDEV0500
CDEV0320 EQU   *
         CLI   UCBTBYT4,UCBFCTC    Q. FICON CTC (DEVICE CODE)
         JNE   CDEV0322            A. NO, BYPASS
         OI    DSI_UCB_INDB,$CTCFICON
         J     CDEV0500
CDEV0322 EQU   *
         OI    DSI_UCB_INDB,$CTCOTH OTHER TYPE OF CTC (DEVICE CODE)
         J     CDEV0500
         SPACE 1
CDEV0350 AS2LTRCE , TEST FOR COMMUNICATION
         TM    UCBTBYT3,UCB3COMM   Q. COMMUNICATION (CLASS BITS)
         JNO   CDEV0370            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'COMM'
         CLI   UCBTBYT4,UCB3791L   Q. 3791 LOCAL CU (DEVICE CODE)
         JNE   CDEV0352            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'3791'
         J     CDEV0500
CDEV0352 EQU   *
         CLI   UCBTBYT4,UCB42AD1   Q. 2702 CU WITH TYPE 1 ADAPTOR
*                                     (DEVICE CODE)
         JNE   CDEV0354            A. NO, BYPASS
         MVC   DSI_UCB_DTYPE,=CL4'2702'
         J     CDEV0500
CDEV0354 EQU   *
         SPACE 1
CDEV0370 AS2LTRCE , TEST FOR DISPLAY
         TM    UCBTBYT3,UCB3DISP   Q. DISPLAY (CLASS BITS)
         JNO   CDEV0380            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'DISPLAY'
         J     CDEV0500
         SPACE 1
CDEV0380 AS2LTRCE , TEST FOR CHRRDR
         TM    UCBTBYT3,UCB3CHAR   Q. CHR READER (CLASS BITS)
         JNO   CDEV0400            A. NO, BYPASS
         MVC   DSI_DEV_DCLASS,=CL8'CHRRDR'
**       J     CDEV0500
CDEV0400 EQU   *
         SPACE 1
CDEV0500 AS2LTRCE
         DROP  R8
         SPACE 1
CDEV0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         EJECT
* --------------------------------------------------------- *
* COPY DSAB INFO TO DATA SET INFO
* PRE-REQS: R8 POINTS TO DSAB
*           R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
CDSAB100 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         USING DSAB,R8
         USING DSI_NTRY_BEG,R6
         SPACE 1
         CLC   DSABID,=CL4'DSAB'   Q. IS THIS A DSAB
         JNE   CDSAB260            A. NO, BYPASS
         ICM   R0,12,DSABLNTH      Q. ANY DATA PRESENT
         JZ    CDSAB260            A. NO, BYPASS
         SPACE 1
CDSAB110 AS2LTRCE , CHECK FOR DSORG=
         TM    DSABORG1,DSABIS+DSABPS+DSABDA+DSABPO
         JZ    CDSAB160
         SPACE 1
CDSAB120 AS2LTRCE
         TM    DSABORG1,DSABIS     Q. IS
         JNO   CDSAB130
         OI    DSI_DSAB_AM,$IS     A. YES
         OI    DSI_ICF_ORG,$KEY
         J     CDSAB190
         SPACE 1
CDSAB130 AS2LTRCE
         TM    DSABORG1,DSABPS     Q. PS
         JNO   CDSAB140
         OI    DSI_DSAB_AM,$PS     A. YES
         OI    DSI_ICF_ORG,$SEQ
         J     CDSAB190
         SPACE 1
CDSAB140 AS2LTRCE
         TM    DSABORG1,DSABDA     Q. DA
         JNO   CDSAB150
         OI    DSI_DSAB_AM,$DA     A. YES
         OI    DSI_ICF_ORG,$DIR
         J     CDSAB190
         SPACE 1
CDSAB150 AS2LTRCE
         OI    DSI_DSAB_AM,$PO     A. YES
         OI    DSI_ICF_ORG,$LIB
         J     CDSAB190
         SPACE 1
CDSAB160 AS2LTRCE
         TM    DSABORG2,DSABAM     Q. VSAM
         JNO   CDSAB190
         OI    DSI_DSAB_AM,$VSAM   A. YES
CDSAB190 EQU   *
         SPACE 1
CDSAB200 AS2LTRCE , FILE OPEN
         TM    DSABFLG2,DSABOPEN   Q. OPEN
         JNO   CDSAB220            A. NO,
         OI    DSI_DSAB_IND0,$OPEN A. YES,
         SPACE 1
CDSAB220 AS2LTRCE
         TM    DSABFLG3,DSABVAM    Q. VIO
         JNO   CDSAB240            A. NO,
         OI    DSI_DSAB_IND1,$VIO  A. YES,
         SPACE 1
CDSAB240 AS2LTRCE
         CLI   DSABSSNM,X'00' Q. EMPTY
         JE    CDSAB260       A. YES, BYPASS
         CLI   DSABSSNM,C' '  Q. SUB-SYSTEM NAME
         JE    CDSAB260       A. NO, BYPASS
         OI    DSI_DSAB_IND0,$SUBSYS
         MVC   DSI_DSAB_SSYS,DSABSSNM
         SPACE 1
CDSAB260 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R8,R6
         SPACE 2
* --------------------------------------------------------- *
* COPY DCB  INFO TO DATA SET INFO
* PRE-REQS: R8 POINTS TO DCB
*           R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
CDCB0100 AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         USING IHADCB,R8
         USING DSI_NTRY_BEG,R6
         SPACE 1
         TM    DCBDSRG2,DCBACBM    Q. ACB
         JO    CDCB0800            A. YES, BYPASS
*        CHECK FOR OPEN
         CLC   DCBDDNAM,REQDDNME   Q. DCB HAVE DDNAME
         JE    CDCB0800            A. YES, MUST BE CLOSED
         TM    DCBOFLG,DCBOFOPN    Q. OPEN SUCCESSFUL
         JNO   CDCB0800            A. NO, MUST BE CLOSED
         OI    DSI_DCB_IND0,$OPEN  A. YES
         TM    DCBBFALN,DCBH1+DCBH0     Q. DCBE EXISTS
         JNO   CDCB0110                 A. NO, BYPASS
         L     R7,PGMPARM3
         USING FMCB,R7
         ICM   R1,15,FM_@DCBE Q. DCBE ADDR ALREADY EXISTS
         JNZ   CDCB0110       A. YES, BYPASS
         ICM   R1,15,DCBDCBE  Q. DCBE ADDR IN DCB
         JZ    CDCB0110       A. NO, BYPASS
         ST    R1,FM_@DCBE    SAVE DCBE ADDR IN CTL BLK
         USING DCBE,R1        EST ADDR TO DCBE
         ICM   R0,12,DCBELEN  Q. DCBE PRESENT
         JZ    CDCB0110       A. NO,
         SRL   R0,16
         ST    R0,FM_DCBELEN  SAVE DCBE LENGTH IN CTL BLK
         DROP  R1,R7
         SPACE 1
CDCB0110 AS2LTRCE , CHECK FOR DEVICE TYPE & CLASS
         MVC   DSI_DCB_DCLASS,=CL8'UNKNOWN'
         MVC   DSI_DCB_DTYPE,=CL4'UNKN'
         XR    R0,R0
         IC    R0,DCBDEVT     PICK UP DEVICE TYPE (SRCH ARG)
         LA    R2,VALID_DASD  POINT TO START OF VECTOR
         LA    R1,L'VALID_DASD(,R2)     POINT TO END OF VECTOR
CDCB0115 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0115       A. SCAN INCOMPLETE
         JH    CDCB0160       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'DASD'
         CLI   DCBDEVT,DCBDV311    Q. 2311 DISK
         JNE   CDCB0118            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2311'
         J     CDCB0500
CDCB0118 EQU   *
         CLI   DCBDEVT,DCBDV301    Q. 2301 PARALLEL DRUM
         JNE   CDCB0120            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2301'
         J     CDCB0500
CDCB0120 EQU   *
         CLI   DCBDEVT,DCBDV303    Q. 2303 SERIAL DRUM
         JNE   CDCB0122            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2303'
         J     CDCB0500
CDCB0122 EQU   *
         CLI   DCBDEVT,DCBDV345    Q. 9345 DISK
         JNE   CDCB0124            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'9345'
         J     CDCB0500
CDCB0124 EQU   *
         CLI   DCBDEVT,DCBDV321    Q. 2321 DATA CELL
         JNE   CDCB0126            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2321'
         J     CDCB0500
CDCB0126 EQU   *
         CLI   DCBDEVT,DCBD1305    Q. 2305 DRUM MOD-1
         JNE   CDCB0128            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2305'
         J     CDCB0500
CDCB0128 EQU   *
         CLI   DCBDEVT,DCBDV305    Q. 2305 DRUM MOD-2
         JNE   CDCB0130            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2305'
         J     CDCB0500
CDCB0130 EQU   *
         CLI   DCBDEVT,DCBDV314    Q. 2314/2319 DISK
         JNE   CDCB0132            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2314'
         J     CDCB0500
CDCB0132 EQU   *
         CLI   DCBDEVT,DCBDV330    Q. 3330/3333 DISK
         JNE   CDCB0134            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3330'
         J     CDCB0500
CDCB0134 EQU   *
         CLI   DCBDEVT,DCBDV340    Q. 3340/3344 DISK
         JNE   CDCB0136            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3340'
         J     CDCB0500
CDCB0136 EQU   *
         CLI   DCBDEVT,DCBDV350    Q. 3350 DISK
         JNE   CDCB0138            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3350'
         J     CDCB0500
CDCB0138 EQU   *
         CLI   DCBDEVT,DCBDV375    Q. 3375 DISK
         JNE   CDCB0140            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3375'
         J     CDCB0500
CDCB0140 EQU   *
         CLI   DCBDEVT,DCBDV331    Q. 3330/3333 MOD-11 DISK
         JNE   CDCB0142            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'333X'
         J     CDCB0500
CDCB0142 EQU   *
         CLI   DCBDEVT,DCBDV380    Q. 3380 DISK
         JNE   CDCB0144            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3380'
         J     CDCB0500
CDCB0144 EQU   *
         CLI   DCBDEVT,DCBDV390    Q. 3390 DISK
         JNE   CDCB0146            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3390'
         J     CDCB0500
CDCB0146 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0160 AS2LTRCE
         LA    R2,VALID_CRDRDR     POINT TO START OF VECTOR
         LA    R1,L'VALID_CRDRDR(,R2)   POINT TO END OF VECTOR
CDCB0165 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0165       A. SCAN INCOMPLETE
         JH    CDCB0190       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'CRDRDR'
         CLI   DCBDEVT,DCBDVCR0    Q. 2540 CARD READER
         JNE   CDCB0168            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2540'
         J     CDCB0500
CDCB0168 EQU   *
         CLI   DCBDEVT,DCBDVCR1    Q. 2501 CARD READER
         JNE   CDCB0170            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2501'
         J     CDCB0500
CDCB0170 EQU   *
         CLI   DCBDEVT,DCBDVCR2    Q. 3505 CARD READER
         JNE   CDCB0172            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3505'
         J     CDCB0500
CDCB0172 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0190 AS2LTRCE
         LA    R2,VALID_CRDPUN     POINT TO START OF VECTOR
         LA    R1,L'VALID_CRDPUN(,R2)   POINT TO END OF VECTOR
CDCB0195 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0195       A. SCAN INCOMPLETE
         JH    CDCB0230       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'CRDPUN'
         CLI   DCBDEVT,DCBDVCP0    Q. 2540 CARD PUNCH
         JNE   CDCB0198            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2540'
         J     CDCB0500
CDCB0198 EQU   *
         CLI   DCBDEVT,DCBDVCP1    Q. 3525 CARD PUNCH
         JNE   CDCB0200            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3525'
         J     CDCB0500
CDCB0200 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0230 AS2LTRCE
         LA    R2,VALID_RDRPUN     POINT TO START OF VECTOR
         LA    R1,L'VALID_RDRPUN(,R2)   POINT TO END OF VECTOR
CDCB0235 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0235       A. SCAN INCOMPLETE
         JH    CDCB0270       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'RDRPUN'
         CLI   DCBDEVT,DCBDVCRP    Q. 1442 READER/PUNCH
         JNE   CDCB0238            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'1442'
         J     CDCB0500
CDCB0238 EQU   *
         CLI   DCBDEVT,DCBDVCPR    Q. 2520 CARD READER/PUNCH
         JNE   CDCB0240            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2520'
         J     CDCB0500
CDCB0240 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0270 AS2LTRCE
         LA    R2,VALID_PRINTER    POINT TO START OF VECTOR
         LA    R1,L'VALID_PRINTER(,R2)  POINT TO END OF VECTOR
CDCB0275 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0275       A. SCAN INCOMPLETE
         JH    CDCB0320       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'PRINTER'
         CLI   DCBDEVT,DCBDVPR1    Q. 1403 IMPACT PRINTER
         JNE   CDCB0278            A. NO, BYPASS
         MVC   DSI_DCB_DCLASS,=CL4'1403'
         J     CDCB0500
CDCB0278 EQU   *
         CLI   DCBDEVT,DCBDVPR2    Q. 1443 IMPACT PRINTER
         JNE   CDCB0280            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'1443'
         J     CDCB0500
CDCB0280 EQU   *
         CLI   DCBDEVT,DCBDVPR3    Q. 3211 IMPACT PRINTER
         JNE   CDCB0282            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3211'
         OI    DSI_DCB_INDB,$P3211
         J     CDCB0500
CDCB0282 EQU   *
         CLI   DCBDEVT,DCBDVPR4    Q. 3203-4 IMPACT PRINTER
         JNE   CDCB0284            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3203'
         J     CDCB0500
CDCB0284 EQU   *
         CLI   DCBDEVT,DCBDVPRT    Q. OTHER IMPACT PRINTER
         JNE   CDCB0286            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'UNKN'
         J     CDCB0500
CDCB0286 EQU   *
         CLI   DCBDEVT,DCBDVPR5    Q. 3800 LASER PRINTER
         JNE   CDCB0288            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3800'
         OI    DSI_DCB_INDB,$P3800
         J     CDCB0500
CDCB0288 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0320 AS2LTRCE
         LA    R2,VALID_TERM  POINT TO START OF VECTOR
         LA    R1,L'VALID_TERM(,R2)     POINT TO END OF VECTOR
CDCB0325 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0325       A. SCAN INCOMPLETE
         JH    CDCB0350       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'TERMINAL'
         CLI   DCBDEVT,DCBDVTRM    Q. 3270 CRT
         JNE   CDCB0328            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3270'
         J     CDCB0500
CDCB0328 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0350 AS2LTRCE
         LA    R2,VALID_PAPERTAP   POINT TO START OF VECTOR
         LA    R1,L'VALID_PAPERTAP(,R2) POINT TO END OF VECTOR
CDCB0355 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0355       A. SCAN INCOMPLETE
         JH    CDCB0380       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'PAPERTAP'
         CLI   DCBDEVT,DCBDVPTP    Q. 2671 PAPER TAPE
         JNE   CDCB0358            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'2671'
         J     CDCB0500
CDCB0358 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0380 AS2LTRCE
         LA    R2,VALID_OPTRDR     POINT TO START OF VECTOR
         LA    R1,L'VALID_OPTRDR(,R2)   POINT TO END OF VECTOR
CDCB0385 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0385       A. SCAN INCOMPLETE
         JH    CDCB0420       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'OPTRDR'
         CLI   DCBDEVT,DCBDVOR5    Q. 1285 OPTICAL READER
         JNE   CDCB0388            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'1285'
         J     CDCB0500
CDCB0388 EQU   *
         CLI   DCBDEVT,DCBDVOR7    Q. 1287 OPTICAL READER
         JNE   CDCB0390            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'1287'
         J     CDCB0500
CDCB0390 EQU   *
         CLI   DCBDEVT,DCBDVOR8    Q. 1288 OPTICAL READER
         JNE   CDCB0392            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'1288'
         J     CDCB0500
CDCB0392 EQU   *
         CLI   DCBDEVT,DCBDVOR9    Q. 3886 OPTICAL READER
         JNE   CDCB0394            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3886'
         J     CDCB0500
CDCB0394 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0420 AS2LTRCE
         LA    R2,VALID_MAGINK     POINT TO START OF VECTOR
         LA    R1,L'VALID_MAGINK(,R2)   POINT TO END OF VECTOR
CDCB0425 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0425       A. SCAN INCOMPLETE
         JH    CDCB0450       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'MAGINK'
         CLI   DCBDEVT,DCBDVMR     Q. 1419 MAG INK READER/SORTER
         JNE   CDCB0428            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'1419'
         J     CDCB0500
CDCB0428 EQU   *
         CLI   DCBDEVT,DCBDVORS    Q. 1275 OPT READER/SORTER
         JNE   CDCB0430            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'1275'
         J     CDCB0500
CDCB0430 EQU   *
         CLI   DCBDEVT,DCBDVMRS    Q. 3890 MAG INK READER/SORTER
         JNE   CDCB0432            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3890'
         J     CDCB0500
CDCB0432 EQU   *
         CLI   DCBDEVT,DCBDVDRI    Q. 3895 DOC READER/INSCRIBER
         JNE   CDCB0434            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3895'
         OI    DSI_DCB_INDB,$R3895
         J     CDCB0500
CDCB0434 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0450 AS2LTRCE
         LA    R2,VALID_MAGTAPE    POINT TO START OF VECTOR
         LA    R1,L'VALID_MAGTAPE(,R2)  POINT TO END OF VECTOR
CDCB0455 SRST  R1,R2          Q. SCAN VECTOR FOR SRCH ARG
         JO    CDCB0455       A. SCAN INCOMPLETE
         JH    CDCB0500       A. NOT FOUND
         MVC   DSI_DCB_DCLASS,=CL8'MAGTAPE'
         CLI   DCBDEVT,DCBDVMT3    Q. 3400 REEL
         JNE   CDCB0460            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3400'
         OI    DSI_DCB_INDA,$T3400
         CLI   DCBDEN,DCBMTDN3     Q. DENSITY 1600 BPI
         JNE   CDCB0458            A. NO, BYPASS
         OI    DSI_DCB_INDA,$BPI1600
         J     CDCB0500
CDCB0458 EQU   *
         CLI   DCBDEN,DCBMTDN4     Q. DENSITY 6250 BPI
         JNE   CDCB0500            A. NO, BYPASS
         OI    DSI_DCB_INDA,$BPI6250
         J     CDCB0500
CDCB0460 EQU   *
         CLI   DCBDEVT,DCBDVMT     Q. 3490 CART
         JNE   CDCB0462            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3490'
         OI    DSI_DCB_INDB,$T3490
         J     CDCB0500
CDCB0462 EQU   *
         CLI   DCBDEVT,DCBDVMT2    Q. 3423 CART
         JNE   CDCB0464            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3423'
         OI    DSI_DCB_INDB,$T3423
         J     CDCB0500
CDCB0464 EQU   *
         CLI   DCBDEVT,DCBDVMT4    Q. 3480 CART
         JNE   CDCB0466            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3480'
         OI    DSI_DCB_INDB,$T3480
         J     CDCB0500
CDCB0466 EQU   *
         CLI   DCBDEVT,DCBDVMT5    Q. 3590 CART
         JNE   CDCB0468            A. NO, BYPASS
         MVC   DSI_DCB_DTYPE,=CL4'3590'
         OI    DSI_DCB_INDB,$T3590
         J     CDCB0500
CDCB0468 EQU   *
         J     CDCB0500
         SPACE 1
CDCB0500 AS2LTRCE , CHECK FOR DSORG=
         TM    DCBDSRG1,DCBDSGIS+DCBDSGPS+DCBDSGDA+DCBDSGPO
         JZ    CDCB0800
         ICM   R0,12,DCBLRECL
         SRL   R0,16
         ST    R0,DSI_DCB_LRECL
         ICM   R0,12,DCBBLKSI
         SRL   R0,16
         ST    R0,DSI_DCB_BLKSZ
         ICM   R0,8,DCBBUFNO
         SRL   R0,24
         STCM  R0,3,DSI_DCB_BUFND
         SPACE 1
CDCB0540 AS2LTRCE
         TM    DCBDSRG1,DCBDSGIS   Q. IS
         JNO   CDCB0550
         OI    DSI_DCB_AM,$IS      A. YES
         OI    DSI_ICF_ORG,$KEY
         J     CDCB0600
         SPACE 1
CDCB0550 AS2LTRCE
         TM    DCBDSRG1,DCBDSGPS   Q. PS
         JNO   CDCB0560
         OI    DSI_DCB_AM,$PS      A. YES
         OI    DSI_ICF_ORG,$SEQ
         J     CDCB0600
         SPACE 1
CDCB0560 AS2LTRCE
         TM    DCBDSRG1,DCBDSGDA   Q. DA
         JNO   CDCB0570
         OI    DSI_DCB_AM,$DA      A. YES
         OI    DSI_ICF_ORG,$DIR
         J     CDCB0600
         SPACE 1
CDCB0570 AS2LTRCE
         TM    DCBDSRG1,DCBDSGPO   Q. PO
         JNO   CDCB0580
         OI    DSI_DCB_AM,$PO      A. YES
         OI    DSI_ICF_ORG,$LIB
         J     CDCB0600
CDCB0580 EQU   *
*        J     CDCB0600
         SPACE 1
CDCB0600 AS2LTRCE , CHECK FOR RECFM=
         TM    DCBRECFM,DCBRECF    Q. RECFM=F
         JNO   CDCB0610
         OI    DSI_DCB_RECFM,$FIX  A. YES
         SPACE 1
CDCB0610 AS2LTRCE
         TM    DCBRECFM,DCBRECV    Q. RECFM=V
         JNO   CDCB0620
         OI    DSI_DCB_RECFM,$VAR  A. YES
         TM    DCBRECFM,DCBRECSB   Q. RECFM=VS
         JNO   CDCB0620
         OI    DSI_DCB_RECFM,$SPN  A. YES
         SPACE 1
CDCB0620 AS2LTRCE
         TM    DCBRECFM,DCBRECBR   Q. RECFM=.B
         JNO   CDCB0630
         OI    DSI_DCB_RECFM,$BLK  A. YES
         SPACE 1
CDCB0630 AS2LTRCE
         TM    DCBRECFM,DCBRECCA   Q. RECFM=..A
         JNO   CDCB0640
         OI    DSI_DCB_RECFM,$ASA  A. YES
         J     CDCB0650
         SPACE 1
CDCB0640 AS2LTRCE
         TM    DCBRECFM,DCBRECCM   Q. RECFM=..M
         JNO   CDCB0650
         OI    DSI_DCB_RECFM,$MCC  A. YES
*        J     CDCB0650
CDCB0650 EQU   *
         SPACE 1
CDCB0700 AS2LTRCE
         TM    DCBCIND2,DCBCNIOE        Q. PERMANENT I/O ERROR
         JNO   CDCB0720
         OI    DSI_DCB_IND0,$PIOERR     A. YES
CDCB0720 EQU   *
         SPACE 1
CDCB0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R8,R6
         EJECT
* --------------------------------------------------------- *
* COPY JFCB INFO TO DATA SET INFO
* PRE-REQS: R8 POINTS TO JFCB
*           R6 POINTS TO DSI_INFO, DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
CJFCB100 AS2LTRCE
         AS2RESTK PUSH
         USING INFMJFCB,R8
         USING DSI_NTRY_BEG,R6
         SPACE 1
         ICM   R0,14,JFCBEXAD
         JZ    CJFCB140
         SRL   R0,8
         SPACE 1
         LA    R7,EPA         GET ADDR OF EXTENDED PARM AREA
         ST    R7,@SWAEPA
         USING ZB505,R7       EST ADDR TO EPA
         SPACE 1
         XC    SWAEPAX,SWAEPAX
         MVC   SWVA,JFCBEXAD  SET SVA OF JFCB EXT INTO EPA
         SWAREQ UNAUTH=YES,                                            +
               FCODE=RL,      ACTION CODE READ/LOCATE                  +
               EPA=@SWAEPA,                                            +
               MF=(E,SWAPARMS)
         LARL  RE,CJFCB800    SET DEFAULT RETURN
         LTR   RF,RF          Q. ANY ERRORS
         JNZ   TXT0107C       A. YES, SETUP LE COND
*                                ..00-SUCCESSFUL
*                                ..08-SVA IS NOT VALID
*                                ..24-SVA DOESN'T CORR TO VIRT ADDR
*                                ..28-PTR TO EPAL NOT VALID
         CLI   SWBLKID,SWJFCXID    Q. JFCBX (VOLS)
         JNE   CJFCB130            A. NO
         MVC   @SJFCBX,SWBLKPTR    SAVE SYSTEM JFCB ADDR
         J     CJFCB140
         SPACE 1
CJFCB130 AS2LTRCE
         CLI   SWBLKID,SWJFCEID    Q. JFCBE (3800 PRT)
         JNE   CJFCB140            A. NO
         MVC   @SJFCBE,SWBLKPTR    SAVE SYSTEM JFCB ADDR
         DROP  R7
**       J     CJFCB140
         SPACE 1
CJFCB140 AS2LTRCE
         L     R7,PGMPARM3    GET ADDR OF FMCB
         USING FMCB,R7        EST ADDR TO FMCB
         MVC   FM_@SJFCBX,@SJFCBX  SAVE IN CALLER'S REQ BLK
         MVC   FM_@SJFCBE,@SJFCBE  SAVE IN CALLER'S REQ BLK
         DROP  R7
         SPACE 1
CJFCB150 AS2LTRCE
         MVC   DSI_JFCB_DSN,JFCBDSNM
         SPACE 1
         TM    JFCBIND1,JFCGDG+JFCPDS   Q. GDG OR PDS?
         JZ    CJFCB200                 A. NO, BYPASS
         CLI   JFCBELNM,C' '            ..Q. ANY VALUE
         JNH   CJFCB152                 ..A. NO, BYPASS
         MVC   DSI_JFCB_MBRGDG,JFCBELNM A. YES
CJFCB152 EQU   *
         TM    JFCBIND1,JFCGDG          Q. GDG OR MBR
         JNO   CJFCB160
         OI    DSI_JFCB_IND1,$GDGMBR    A. YES, GDG
         J     CJFCB200
         SPACE 1
CJFCB160 AS2LTRCE
         TM    JFCBIND1,JFCPDS          Q. PDS MBR
         JNO   CJFCB180                 A. NO, BYPASS
         OI    DSI_JFCB_IND1,$PDSMBR    A. YES, PDS
CJFCB180 EQU   *
         SPACE 1
CJFCB200 AS2LTRCE , CHECK FOR DISP=
         TM    JFCBIND2,JFCMOD     Q. DISP=MOD
         JNO   CJFCB210            A. NO, BYPASS
         OI    DSI_JFCB_IND2,$MOD  A. YES
         SPACE 1
CJFCB210 EQU   *
         TM    JFCBIND2,JFCOLD     Q. DISP=OLD
         JNO   CJFCB220            A. NO, BYPASS
         OI    DSI_JFCB_IND2,$OLD  A. YES
         SPACE 1
CJFCB220 EQU   *
         TM    JFCBIND2,JFCSHARE   Q. SHARED
         JNO   CJFCB230            A. NO, BYPASS
         OI    DSI_JFCB_IND2,$SHR  A. YES
         SPACE 1
CJFCB230 EQU   *
         TM    JFCBIND2,JFCTEMP    Q. TEMPORARY DATA SET
         JNO   CJFCB240            A. NO, BYPASS
         OI    DSI_JFCB_IND2,$TEMP A. YES
         SPACE 1
CJFCB240 AS2LTRCE
         TM    JFCBTSDM,JFCCAT     Q. CATALOGED
         JNO   CJFCB250            A. NO, BYPASS
         OI    DSI_JFCB_IND7,$CTLG A. YES
         J     CJFCB300
CJFCB250 EQU   *
         SPACE 1
CJFCB300 AS2LTRCE , CHECK FOR MISC.
         TM    JFCFLGS1,JFCBLSR    Q. BLSR
         JNO   CJFCB310            A. NO, BYPASS
         OI    DSI_JFCB_IND1,$BLSR A. YES
         MVC   DSI_JFCB_TGTDDN,JFCBLSRD      SAVE TARGET DDNAME
         J     CJFCB400
         SPACE 1
CJFCB310 AS2LTRCE
         TM    JFCFLGS1,JFCVRDS    Q. VIO
         JNO   CJFCB320            A. NO, BYPASS
         OI    DSI_JFCB_IND1,$VIO  A. YES
         J     CJFCB400
         SPACE 1
CJFCB320 AS2LTRCE
         TM    JFCBTSDM,JFCSDS          Q. SYSIN/SYSOUT/SUBSYS=
         JNO   CJFCB330                 A. NO, BYPASS
         OI    DSI_JFCB_IND0,$SUBSYS    A. YES
         J     CJFCB400
CJFCB330 EQU   *
         SPACE 1
CJFCB400 AS2LTRCE , CHECK FOR DSORG=
         TM    JFCDSRG1,JFCORGIS+JFCORGPS+JFCORGDA+JFCORGPO
         JZ    CJFCB440
         SPACE 1
         ICM   R0,12,JFCLRECL      DCB=LRECL=n
         SRL   R0,16
         ST    R0,DSI_JFCB_LRECL
         TM    JFCBFLG3,JFCBBFTK   Q. LRECL in K
         JNO   CJFCB402            A. NO, BYPASS
         ICM   R0,15,DSI_JFCB_LRECL     Q. LRECL > 0
         JZ    CJFCB402                 A. no, bypass
         SLA   R0,10                    A. yes, * BY 1024
         ST    R0,DSI_JFCB_LRECL
         SPACE 1
CJFCB402 AS2LTRCE
         ICM   R0,8,JFCBUFNO       Q. DCB=BUFNO= > 0
         JZ    CJFCB404            A. no, bypass
         STCM  R0,8,DSI_JFCB_BUFND
         SPACE 1
CJFCB404 AS2LTRCE
         ICM   R0,12,JFCBLKSI      Q. DCB=BLKSIZE= > 0
         JZ    CJFCB406            A. no, bypass
         SRL   R0,16
         ST    R0,DSI_JFCB_BLKSZ
         SPACE 1
CJFCB406 AS2LTRCE
         SPACE 1
         TM    JFCDSRG1,JFCORGIS   Q. ISAM
         JNO   CJFCB410            A. no, bypass
         OI    DSI_JFCB_AM,$IS     A. YES
         OI    DSI_ICF_ORG,$KEY
         J     CJFCB500
         SPACE 1
CJFCB410 AS2LTRCE
         TM    JFCDSRG1,JFCORGPS   Q. PS
         JNO   CJFCB420            A. no, bypass
         OI    DSI_JFCB_AM,$PS     A. YES
         OI    DSI_ICF_ORG,$SEQ
         J     CJFCB500
         SPACE 1
CJFCB420 AS2LTRCE
         TM    JFCDSRG1,JFCORGDA   Q. DA
         JNO   CJFCB430            A. no, bypass
         OI    DSI_JFCB_AM,$DA     A. YES
         OI    DSI_ICF_ORG,$DIR
         J     CJFCB500
         SPACE 1
CJFCB430 AS2LTRCE
         TM    JFCDSRG1,JFCORGPO   Q. PO
         JNO   CJFCB440            A. no, bypass
         OI    DSI_JFCB_AM,$PO     A. YES
         OI    DSI_ICF_ORG,$LIB
         J     CJFCB500
         SPACE 1
CJFCB440 AS2LTRCE
         TM    JFCDSRG2,JFCORGAM   Q. VSAM
         JNO   CJFCB450            A. no, bypass
         OI    DSI_JFCB_AM,$VSAM   A. YES
         ICM   R0,12,JFCNLREC      LRECL=
         SRL   R0,16
         ST    R0,DSI_JFCB_LRECL
         MVC   DSI_JFCB_BUFND,JFCBADBF  AMP=('BUFND=n')
         MVC   DSI_JFCB_BUFNI,JFCBAXBF  AMP=('BUFNI=n')
         ICM   R0,14,JFCBABFS
         SRL   R0,8
         ST    R0,DSI_JFCB_BUFSP        AMP=('BUFSP=n')
         MVC   DSI_JFCB_STRNO,JFCAMSTR  AMP=('STRNO=n')
         J     CJFCB500
CJFCB450 EQU   *
         SPACE 1
CJFCB500 AS2LTRCE , CHECK FOR RECFM=
         TM    JFCRECFM,JFCFIX     Q. RECFM=F|U
         JNO   CJFCB510            A. NO, BYPASS
         OI    DSI_JFCB_RECFM,$FIX A. YES
         SPACE 1
CJFCB510 EQU   *
         TM    JFCRECFM,JFCVAR     Q. RECFM=V|U
         JNO   CJFCB520            A. NO, BYPASS
         OI    DSI_JFCB_RECFM,$VAR A. YES
         SPACE 1
CJFCB520 EQU   *
         TM    JFCRECFM,JFCRFB     Q. RECFM=.B
         JNO   CJFCB530            A. NO, BYPASS
         OI    DSI_JFCB_RECFM,$BLK A. YES
         SPACE 1
CJFCB530 EQU   *
         TM    JFCRECFM,JFCRFS     Q. RECFM=.S
         JNO   CJFCB540            A. NO, BYPASS
         OI    DSI_JFCB_RECFM,$SPN A. YES
         SPACE 1
CJFCB540 EQU   *
         TM    JFCRECFM,JFCASA     Q. RECFM=..A
         JNO   CJFCB550            A. NO, BYPASS
         OI    DSI_JFCB_RECFM,$ASA A. YES
         SPACE 1
CJFCB550 EQU   *
         TM    JFCRECFM,JFCMAC     Q. RECFM=..M
         JNO   CJFCB560            A. NO, BYPASS
         OI    DSI_JFCB_RECFM,$MCC A. YES
         SPACE 1
CJFCB560 EQU   *
         TM    JFCOPTCD,JFCOPTJ         Q. DCB=OPTCD=J
         JNO   CJFCB570                 A. NO, BYPASS
         OI    DSI_JFCB_RECFM,$3800CC   A. YES
CJFCB570 EQU   *
         SPACE 1
CJFCB600 AS2LTRCE , CHECK FOR LABEL=
         TM    JFCBLTYP,JFCDSEQN        Q. SEQ# SPECIFIED
         JNO   CJFCB604                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLSEQ#   A. YES,
         MVC   DSI_JFCB_LBLSEQ,JFCBFLSQ
CJFCB604 EQU   *
         TM    JFCBLTYP,JFCBAL          Q. AL - ISO/ANSI/FIPS
         JNO   CJFCB608                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLAL     A. YES,
         TM    JFCBLTYP,X'08'           Q. UL - USER LABEL
         JNO   CJFCB608                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLUL     A. YES,
CJFCB608 EQU   *
         TM    JFCBLTYP,JFCBLTM         Q. LTM - LEADING TAPE MARK
         JNO   CJFCB612                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLLTM    A. YES,
CJFCB612 EQU   *
         TM    JFCBLTYP,JFCBLP          Q. BLP - BYPASS LABEL PROC
         JNO   CJFCB616                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLBLP    A. YES,
CJFCB616 EQU   *
         TM    JFCBLTYP,JFCNSL          Q. NSL - NON-STD LABEL
         JNO   CJFCB620                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLNSL    A. YES,
CJFCB620 EQU   *
         TM    JFCBLTYP,JFCSL           Q. SL - STD LABEL
         JNO   CJFCB626                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLSL     A. YES,
         TM    JFCBLTYP,X'08'           Q. UL - USER LABEL
         JNO   CJFCB626
         OI    DSI_JFCB_IND6,$LBLUL     A. YES,
CJFCB626 EQU   *
         TM    JFCBLTYP,JFCNL           Q. NL - NO LABEL
         JNO   CJFCB628                 A. NO, BYPASS
         OI    DSI_JFCB_IND6,$LBLNL     A. YES,
CJFCB628 EQU   *
         SPACE 1
CJFCB650 AS2LTRCE , CHECK FOR SPACE=
         TM    JFCBIND1,JFCRLSE         Q. SPACE=(,(...),RLSE)
         JNO   CJFCB654                 A. NO, BYPASS
         OI    DSI_JFCB_IND5,$RLSE      A. YES,
CJFCB654 EQU   *
         TM    JFCBCTRI,JFCBCYL         Q. SPACE=(CYL,(...))
         JNO   CJFCB658                 A. NO, BYPASS
         OI    DSI_JFCB_IND5,$SPCCYL    A. YES,
CJFCB658 EQU   *
         TM    JFCBCTRI,JFCBTRK         Q. SPACE=(TRK,(...))
         JNO   CJFCB662                 A. NO, BYPASS
         OI    DSI_JFCB_IND5,$SPCTRK    A. YES,
CJFCB662 EQU   *
         TM    JFCBCTRI,JFCBAVR         Q. SPACE=(blksize,(...))
         JNO   CJFCB666                 A. NO, BYPASS
         OI    DSI_JFCB_IND5,$SPCBSZ    A. YES,
         ICM   R1,14,JFCBDRLH
         JZ    CJFCB666
         SRL   R1,8
         ST    R1,DSI_JFCB_BLKSPC
CJFCB666 EQU   *
         TM    JFCBCTRI,JFCONTIG        Q. SPACE=(,(...),,CONTIG)
         JNO   CJFCB670                 A. NO, BYPASS
         OI    DSI_JFCB_IND5,$CONTIG    A. YES,
CJFCB670 EQU   *
         TM    JFCBCTRI,JFCMIXG    Q. SPACE=(,(...),,MXIG)
         JNO   CJFCB674            A. NO, BYPASS
         OI    DSI_JFCB_IND5,$MXIG A. YES,
CJFCB674 EQU   *
         TM    JFCBCTRI,JFCBABS         Q. SPACE=(,(...),,ROUND)
         JNO   CJFCB678                 A. NO, BYPASS
         OI    DSI_JFCB_IND5,$ROUND     A. YES,
CJFCB678 EQU   *
         ICM   R1,14,JFCBPQTY      Q. SPACE=(,(pri))
         JZ    CJFCB682            A. NO, BYPASS
         SRL   R1,8
         ST    R1,DSI_JFCB_PRISPC  A. YES,
CJFCB682 EQU   *
         ICM   R1,14,JFCBSQTY      Q. SPACE=(,(,sec))
         JZ    CJFCB686            A. NO, BYPASS
         SRL   R1,8
         ST    R1,DSI_JFCB_SECSPC  A. YES,
CJFCB686 EQU   *
         ICM   R1,14,JFCBDQTY      Q. SPACE=(,(,,dir))
         JZ    CJFCB690            A. NO, BYPASS
         SRL   R1,8
         ST    R1,DSI_JFCB_DIRSPC  A. YES,
CJFCB690 EQU   *
         SPACE 1
CJFCB700 AS2LTRCE , CHECK FOR VOL=
         ICM   R1,12,JFCBVLSQ      Q. VOL=(,,volseq#,,)
         JZ    CJFCB704            A. NO, BYPASS
         SRL   R1,16
         STH   R1,DSI_JFCB_VOLSEQ  A. YES,
CJFCB704 EQU   *
         ICM   R1,8,JFCBVLCT       Q. VOL=(,,,volcnt)
         JZ    CJFCB708            A. NO, BYPASS
         SRL   R1,24
         STH   R1,DSI_JFCB_VOLCNT  A. YES,
CJFCB708 EQU   *
         ICM   R1,8,JFCBNVOL  Q. PICK UP NBR OF VOL=SER
         JZ    CJFCB712       A. NO, NONE EXIST
         SRL   R1,24
         STH   R1,DSI_JFCB_NOVOL
         MVC   DSI_JFCB_VOLNM1(L'JFCBVOLS),JFCBVOLS
         CHI   R1,5
         JNH   CJFCB712
         ICM   R7,15,@SJFCBX  Q. PICK UP JFCBX
         JZ    CJFCB712       A. ADDR ZERO
         USING JFCBX,R7
         SPACE 1
         MVC   DSI_JFCB_VOLNM2(L'JFCBXVOL*15),JFCBXVOL
         DROP  R7
CJFCB712 EQU   *
         SPACE 1
CJFCB800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R8,R6
         EJECT
* --------------------------------------------------------- *
* COPY VSAM CATALOG INFO TO DATA SET INFO
* PRE-REQS: R8 POINTS TO ACB
*           R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
CVCAT100 AS2LTRCE
         AS2RESTK PUSH
         USING IFGACB,R8
         USING DSI_NTRY_BEG,R6
         SPACE 1
         TM    ACBDSOR2,ACBDORGA   Q. ACB
         JNO   CVCAT810            A. NO, BYPASS
         OI    DSI_DCB_AM,$VSAM
         MVC   DSI_DCB_DCLASS,=CL8'DASD'
         TM    ACBOFLGS,ACBOPEN    Q. ACB OPEN
         JNO   CVCAT110            A. NO, BYPASS
         OI    DSI_DCB_IND0,$OPEN
         DROP  R8
         SPACE 1
CVCAT110 AS2LTRCE
         LA    R7,WAREA2
         USING CSIRWORK,R7
         USING CSICAT,CSI_RST1
         USING CSINTRY,CSI_RST2
         SPACE 1
         LA    R0,CSIRWORK
         A     R0,CSIUSDLN
         ST    R0,@CSIRHWM    SAVE CSI RETURN AREA HWM
         SPACE 1
         LA    R1,CSINTRY
         DROP  R7
         USING CSINTRY,R7
         SPACE 1
CVCAT120 AS2LTRCE
         LR    R7,R1
         CLI   CSIETYPE,C'C'  Q. LOOKING AT VSAM CLUSTER
         JE    CVCAT800       A. YES, BYPASS
         CLI   CSIETYPE,C'D'  Q. LOOKING AT VSAM DATA
         JE    CVCAT130       A. YES, PROCESS
         CLI   CSIETYPE,C'I'  Q. LOOKING AT VSAM INDEX
         JE    CVCAT400       A. YES, PROCESS
         J     CVCAT800
         SPACE 1
CVCAT130 AS2LTRCE , PROCESS DATA COMPONENT
         LA    R2,CSI_RST3
         XR    R0,R0
CVCAT140 EQU   *    PROCESS CISZ/MAXREC
         ICM   R0,3,CSILENF01      Q. ANY DATA PASSED
         JZ    CVCAT150            A. NO, BYPASS
         CLI   0(R2),X'FF'         Q. DATA ANY GOOD
         JE    CVCAT144            A. NO, BYPASS
         MVC   DSI_ACB_DCISZ,0(R2) SAVE DATA CI SIZE
         MVC   DSI_DCB_LRECL,4(R2) SAVE MAX LRECL
CVCAT144 EQU   *
         AR    R2,R0
CVCAT150 EQU   *    PROCESS KEY OFFSET/LENGTH
         ICM   R0,3,CSILENF02      Q. ANY DATA PASSED
         JZ    CVCAT160            A. NO, BYPASS
         CLI   0(R2),X'FF'         Q. DATA ANY GOOD
         JE    CVCAT154            A. NO, BYPASS
         MVC   DSI_ACB_KEYOFF,0(R2)     SAVE KEY OFFSET
         MVC   DSI_ACB_KEYLEN,2(R2)     SAVE KEY LENGTH
CVCAT154 EQU   *
         AR    R2,R0
CVCAT160 EQU   *    IGNORE ATTR1
         ICM   R0,3,CSILENF03 Q. ANY DATA PASSED
         JZ    CVCAT170       A. NO, BYPASS
         AR    R2,R0
CVCAT170 EQU   *    PROCESS ATTR2
         ICM   R0,3,CSILENF04 Q. ANY DATA PASSED
         JZ    CVCAT194       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT196       A. NO, BYPASS
         TM    0(R2),X'C0'    Q. REGION SHR(4 N)
         JNO   CVCAT174       A. NO, BYPASS
         OI    DSI_ICF_SHR,$SHRREG4
         J     CVCAT180
CVCAT174 EQU   *
         TM    0(R2),X'80'    Q. REGION SHR(3 N)
         JNO   CVCAT176       A. NO, BYPASS
         OI    DSI_ICF_SHR,$SHRREG3
         J     CVCAT180
CVCAT176 EQU   *
         TM    0(R2),X'40'    Q. REGION SHR(2 N)
         JNO   CVCAT178       A. NO, BYPASS
         OI    DSI_ICF_SHR,$SHRREG2
         J     CVCAT180
CVCAT178 EQU   *
         OI    DSI_ICF_SHR,$SHRREG1
CVCAT180 EQU   *
         TM    0(R2),X'30'    Q. SYSTEM SHR(N 4)
         JNO   CVCAT184       A. NO, BYPASS
         OI    DSI_ICF_SHR,$SHRSYS4
         J     CVCAT190
CVCAT184 EQU   *
         TM    0(R2),X'20'    Q. SYSTEM SHR(N 3)
         JNO   CVCAT186       A. NO, BYPASS
         OI    DSI_ICF_SHR,$SHRSYS3
         J     CVCAT190
CVCAT186 EQU   *
         TM    0(R2),X'10'    Q. SYSTEM SHR(N 2)
         JNO   CVCAT188       A. NO, BYPASS
         OI    DSI_ICF_SHR,$SHRSYS2
         J     CVCAT190
CVCAT188 EQU   *
         OI    DSI_ICF_SHR,$SHRSYS1
CVCAT190 EQU   *
         J     CVCAT196
CVCAT194 EQU   *
         OI    DSI_ICF_SHR,$SHRREG1     DEFAULT SHR(1 1)
         OI    DSI_ICF_SHR,$SHRSYS1
CVCAT196 EQU   *
         AR    R2,R0
CVCAT200 EQU   *    PROCESS BUFSIZE
         ICM   R0,3,CSILENF05 Q. ANY DATA PASSED
         JZ    CVCAT210       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT204       A. NO, BYPASS
         MVC   DSI_ACB_BUFSP,0(R2) SAVE BUFFER SPACE
CVCAT204 EQU   *
         AR    R2,R0
CVCAT210 EQU   *    PROCESS COMPIND
         ICM   R0,3,CSILENF06 Q. ANY DATA PASSED
         JZ    CVCAT220       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT216       A. NO, BYPASS
         TM    0(R2),X'40'    Q. SMS/EF
         JNO   CVCAT214       A. NO, BYPASS
         OI    DSI_ICF_IND3,$SMSEF
CVCAT214 EQU   *
         TM    0(R2),X'20'    Q. SMS/COMPRESSION
         JNO   CVCAT216       A. NO, BYPASS
         OI    DSI_ICF_IND3,$SMSEFC
CVCAT216 EQU   *
         AR    R2,R0
CVCAT220 EQU   *    PROCESS LOGPARMS
         ICM   R0,3,CSILENF07 Q. ANY DATA PASSED
         JZ    CVCAT230       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT228       A. NO, BYPASS
         TM    0(R2),X'03'    Q. LOG(ALL)
         JNO   CVCAT224       A. NO, BYPASS
         OI    DSI_ICF_IND4,$LOGALL
         J     CVCAT228
CVCAT224 EQU   *
         TM    0(R2),X'02'    Q. LOG(UNDO)
         JNO   CVCAT226       A. NO, BYPASS
         OI    DSI_ICF_IND4,$LOGUNDO
         J     CVCAT228
CVCAT226 EQU   *
         TM    0(R2),X'01'    Q. LOG(NONE)
         JNO   CVCAT228       A. NO, BYPASS
         OI    DSI_ICF_IND4,$LOGNONE
CVCAT228 EQU   *
         AR    R2,R0
CVCAT230 EQU   *    PROCESS LOGSTRID
         ICM   R0,3,CSILENF08 Q. ANY DATA PASSED
         JZ    CVCAT240       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT234       A. NO, BYPASS
         MVC   DSI_ICF_LOGID,0(R2)
CVCAT234 EQU   *
         AR    R2,R0
CVCAT240 EQU   *    PROCESS AVG LRECL
         ICM   R0,3,CSILENF09 Q. ANY DATA PASSED
         JZ    CVCAT250       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT244       A. NO, BYPASS
         MVC   DSI_ICF_ALRECL,0(R2)
CVCAT244 EQU   *
         AR    R2,R0
CVCAT250 EQU   *    PROCESS RLSBWO
         ICM   R0,3,CSILENF10 Q. ANY DATA PASSED
         JZ    CVCAT260       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT258       A. NO, BYPASS
         TM    0(R2),X'03'    Q. BWO(TYPEIMS)
         JNO   CVCAT254       A. NO, BYPASS
         OI    DSI_ICF_IND4,$BWOIMS
         J     CVCAT258
CVCAT254 EQU   *
         TM    0(R2),X'01'    Q. BWO(TYPECICS)
         JNO   CVCAT258       A. NO, BYPASS
         OI    DSI_ICF_IND4,$BWOCICS
CVCAT258 EQU   *
         AR    R2,R0
CVCAT260 EQU   *    PROCESS RLSFLAGS
         ICM   R0,3,CSILENF11 Q. ANY DATA PASSED
         JZ    CVCAT270       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT264       A. NO, BYPASS
         TM    0(R2),X'08'    Q. NEED RECOVERY
         JNO   CVCAT264
         OI    DSI_ICF_IND4,$RLSRCVY
CVCAT264 EQU   *
         AR    R2,R0
CVCAT270 EQU   *    PROCESS VSAM STATS
         ICM   R0,3,CSILENF12 Q. ANY DATA PASSED
         JZ    CVCAT280       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT274       A. NO, BYPASS
         ICM   R1,8,0(R2)
         SRL   R1,24
         STCM  R1,3,DSI_ICF_DCAFS  SAVE CA FREE SP
         ICM   R1,8,1(R1)
         SRL   R1,24
         STCM  R1,3,DSI_ICF_DCIFS  SAVE CI FREE SP
         ICM   R1,12,2(R2)
         SRL   R1,16
         STCM  R1,3,DSI_ICF_DCICA  SAVE DATA CI/CA
CVCAT274 EQU   *
         AR    R2,R0
CVCAT280 EQU   *
         ICM   R0,3,CSILENF13 Q. ANY DATA PASSED
         JZ    CVCAT300       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT296       A. NO, BYPASS
         TM    0(R2),X'80'    Q. KSDS
         JNO   CVCAT284       A. NO, BYPASS
         OI    DSI_ICF_ORG,$KSDS
         J     CVCAT294
CVCAT284 EQU   *
         TM    0(R2),X'02'    Q. RRDS
         JNO   CVCAT286       A. NO, BYPASS
         OI    DSI_ICF_ORG,$RRDS
         J     CVCAT294
CVCAT286 EQU   *
         TM    1(R2),X'04'    Q. LDS
         JNO   CVCAT288       A. NO, BYPASS
         OI    DSI_ICF_ORG,$LDS
         J     CVCAT300
CVCAT288 EQU   *
         TM    1(R2),X'01'    Q. VRRDS
         JNO   CVCAT290       A. NO, BYPASS
         OI    DSI_ICF_ORG,$VRRDS
         J     CVCAT294
CVCAT290 EQU   *
         OI    DSI_ICF_ORG,$ESDS   MUST BE ESDS
CVCAT294 EQU   *
         TM    0(R2),X'01'    Q. SPANNED
         JNO   CVCAT296       A. NO, BYPASS
         OI    DSI_DCB_RECFM,$SPN
CVCAT296 EQU   *
         AR    R2,R0
CVCAT300 EQU   *
         ICM   R0,3,CSILENF14 Q. ANY DATA PASSED
         JZ    CVCAT310       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT304       A. NO, BYPASS
         TM    0(R2),X'40'    Q. SMS/EA
         JNO   CVCAT304       A. NO, BYPASS
         OI    DSI_ICF_IND3,$SMSEFEA
CVCAT304 EQU   *
         AR    R2,R0
CVCAT310 EQU   *
         ICM   R0,3,CSILENF15 Q. ANY DATA PASSED
         JZ    CVCAT320       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT314       A. NO, BYPASS
         MVC   DSI_ACB_HARBA,0(R2)
CVCAT314 EQU   *
         AR    R2,R0
CVCAT320 EQU   *
         ICM   R0,3,CSILENF16 Q. ANY DATA PASSED
         JZ    CVCAT330       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT324       A. NO, BYPASS
         MVC   DSI_ICF_HURBA,0(R2)
CVCAT324 EQU   *
         AR    R2,R0
CVCAT330 EQU   *
CVCAT380 EQU   *
         CLC   DSI_DCB_LRECL,DSI_ICF_ALRECL
         JNE   CVCAT384
         OI    DSI_DCB_RECFM,$FIX
         J     CVCAT390
CVCAT384 EQU   *
         OI    DSI_DCB_RECFM,$VAR
CVCAT390 EQU   *
         J     CVCAT800
CVCAT400 EQU   *    PROCESS INDEX COMPONENT
         LA    R2,CSI_RST3
         XR    R0,R0
         SPACE 1
         ICM   R0,3,CSILENF01 Q. ANY DATA PASSED
         JZ    CVCAT410       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT404       A. NO, BYPASS
         MVC   DSI_ACB_ICISZ,0(R2) SAVE INDEX CI SIZE
CVCAT404 EQU   *
         AR    R2,R0
CVCAT410 EQU   *    IGNORE KEY OFFSET/LENGTH
         ICM   R0,3,CSILENF02 Q. ANY DATA PASSED
         JZ    CVCAT420       A. NO, BYPASS
         AR    R2,R0
CVCAT420 EQU   *    IGNORE ATTR1
         ICM   R0,3,CSILENF03 Q. ANY DATA PASSED
         JZ    CVCAT430       A. NO, BYPASS
         AR    R2,R0
CVCAT430 EQU   *    IGNORE ATTR2
         ICM   R0,3,CSILENF04 Q. ANY DATA PASSED
         JZ    CVCAT440       A. NO, BYPASS
         AR    R2,R0
CVCAT440 EQU   *    IGNORE BUFSIZE
         ICM   R0,3,CSILENF05 Q. ANY DATA PASSED
         JZ    CVCAT450       A. NO, BYPASS
         AR    R2,R0
CVCAT450 EQU   *    IGNORE COMPIND
         ICM   R0,3,CSILENF06 Q. ANY DATA PASSED
         JZ    CVCAT460       A. NO, BYPASS
         AR    R2,R0
CVCAT460 EQU   *    IGNORE LOGPARMS
         ICM   R0,3,CSILENF07 Q. ANY DATA PASSED
         JZ    CVCAT470       A. NO, BYPASS
         AR    R2,R0
CVCAT470 EQU   *    IGNORE LOGSTRID
         ICM   R0,3,CSILENF08 Q. ANY DATA PASSED
         JZ    CVCAT480       A. NO, BYPASS
         AR    R2,R0
CVCAT480 EQU   *    IGNORE AVG LRECL
         ICM   R0,3,CSILENF09 Q. ANY DATA PASSED
         JZ    CVCAT490       A. NO, BYPASS
         AR    R2,R0
CVCAT490 EQU   *    IGNORE RLSBWO
         ICM   R0,3,CSILENF10 Q. ANY DATA PASSED
         JZ    CVCAT500       A. NO, BYPASS
         AR    R2,R0
CVCAT500 EQU   *    IGNORE RLSFLAGS
         ICM   R0,3,CSILENF11 Q. ANY DATA PASSED
         JZ    CVCAT510       A. NO, BYPASS
         AR    R2,R0
CVCAT510 EQU   *    PROCESS VSAM STATS
         ICM   R0,3,CSILENF12 Q. ANY DATA PASSED
         JZ    CVCAT520       A. NO, BYPASS
         CLI   0(R2),X'FF'    Q. DATA ANY GOOD
         JE    CVCAT514       A. NO, BYPASS
         ICM   R1,12,2(R2)
         SRL   R1,16
         STCM  R1,3,DSI_ICF_ICICA  SAVE INDEX CI/CA
CVCAT514 EQU   *
         AR    R2,R0
CVCAT520 EQU   *    IGNORE VSAMTYPE
         ICM   R0,3,CSILENF13 Q. ANY DATA PASSED
         JZ    CVCAT530       A. NO, BYPASS
         AR    R2,R0
CVCAT530 EQU   *    IGNORE XACIFLAG
         ICM   R0,3,CSILENF14 Q. ANY DATA PASSED
         JZ    CVCAT540       A. NO, BYPASS
         AR    R2,R0
CVCAT540 EQU   *    IGNORE XHARBADS
         ICM   R0,3,CSILENF15 Q. ANY DATA PASSED
         JZ    CVCAT550       A. NO, BYPASS
         AR    R2,R0
CVCAT550 EQU   *    IGNORE XHURBADS
         ICM   R0,3,CSILENF16 Q. ANY DATA PASSED
         JZ    CVCAT560       A. NO, BYPASS
         AR    R2,R0
CVCAT560 EQU   *
         SPACE 1
CVCAT800 AS2LTRCE
         LA    R1,CSITOTLN
         ICM   R0,12,CSITOTLN
         SRL   R0,16
         AR    R1,R0
         C     R1,@CSIRHWM    Q. BEYOND CSI RETURN AREA
         JL    CVCAT120       A. NO, PROCESS NEXT ENTRY
         SPACE 1
CVCAT810 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         EJECT
* --------------------------------------------------------- *
* COPY VTOC INFO TO DATA SET INFO
* PRE-REQS: R8 POINTS TO VTOC FORMAT 1,4
*           R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
CVTOC100 AS2LTRCE
         AS2RESTK PUSH
         USING F1DSCB,R8
         USING DSI_NTRY_BEG,R6
         SPACE 1
         TM    DVACLASS,$DASD Q. DASD DEVICE
         JNO   CVTOC800       A. NO, CAN'T BE VTOC
*        CHECK FOR SMS
         TM    DS1SMSFG,DS1SMSDS   Q. SMS CONTROLED
         JNO   CVTOC200            A. NO, BYPASS
         OI    DSI_DSCB_IND7,$SMS  A. YES
         TM    DS1SMSFG,DS1DSAE         Q. EXTENDED ATTRIBUTES
         JNO   CVTOC120                 A. NO, BYPASS
         OI    DSI_DSCB_IND3,$SMSEFEA   A. YES
         TM    DS1SMSFG,DS1STRP         Q. EXTENDED FORMAT
         JNO   CVTOC120                 A. NO, BYPASS
         OI    DSI_DSCB_IND3,$SMSEF     A. YES
         SPACE 1
CVTOC120 AS2LTRCE
         TM    DS1FLAG1,DS1COMPR        Q. COMPRESSED
         JNO   CVTOC130                 A. NO, BYPASS
         OI    DSI_DSCB_IND3,$SMSEFC    A. YES
         SPACE 1
CVTOC130 AS2LTRCE
         TM    DS1SMSFG,DS1PDSE    Q. PDS/E
         JNO   CVTOC140            A. NO, BYPASS
         OI    DSI_DSCB_IND1,$PDSE A. YES
         OI    DSI_ICF_ORG,$LIB
         J     CVTOC200
         SPACE 1
CVTOC140 AS2LTRCE
         TM    DS1SMSFG,$HFS       Q. HFS
         JNO   CVTOC150            A. NO, BYPASS
         OI    DSI_DSCB_IND1,$HFS  A. YES
         OI    DSI_ICF_ORG,$LIB
         J     CVTOC200
CVTOC150 EQU   *
         SPACE 1
CVTOC200 AS2LTRCE , CHECK FOR DSORG=
         TM    DS1DSORG,DS1DSGIS   Q. IS
         JNO   CVTOC210            A. NO, BYPASS
         OI    DSI_DSCB_AM,$IS     A. YES
         OI    DSI_ICF_ORG,$KEY
         J     CVTOC300
         SPACE 1
CVTOC210 AS2LTRCE
         TM    DS1DSORG,DS1DSGPS   Q. PS
         JNO   CVTOC220            A. NO, BYPASS
         OI    DSI_DSCB_AM,$PS     A. YES
         OI    DSI_ICF_ORG,$SEQ
         J     CVTOC300
         SPACE 1
CVTOC220 AS2LTRCE
         TM    DS1DSORG,DS1DSGDA   Q. DA
         JNO   CVTOC230            A. NO, BYPASS
         OI    DSI_DSCB_AM,$DA     A. YES
         OI    DSI_ICF_ORG,$DIR
         J     CVTOC300
         SPACE 1
CVTOC230 AS2LTRCE
         TM    DS1DSORG,DS1DSGPO   Q. PO
         JNO   CVTOC240            A. NO, BYPASS
         OI    DSI_DSCB_AM,$PO     A. YES
         OI    DSI_ICF_ORG,$LIB
         J     CVTOC300
         SPACE 1
CVTOC240 AS2LTRCE
         TM    DS1DSORG+1,DS1ORGAM Q. VSAM
         JNO   CVTOC250            A. NO, BYPASS
         OI    DSI_DSCB_AM,$VSAM   A. YES
         TM    DS1OPTCD,DS1OPTIC   Q. ICF CTLG
         JNO   CVTOC250            A. NO, BYPASS
         OI    DSI_DSCB_IND7,$ICF  A. YES
CVTOC250 EQU   *
         SPACE 1
CVTOC300 AS2LTRCE , CHECK FOR RECFM=
         TM    DS1RECFM,DS1RECFF   Q. RECFM=F
         JNO   CVTOC310            A. NO, BYPASS
         OI    DSI_DSCB_RECFM,$FIX A. YES
         SPACE 1
CVTOC310 AS2LTRCE
         TM    DS1RECFM,DS1RECFV   Q. RECFM=V
         JNO   CVTOC320            A. NO, BYPASS
         OI    DSI_DSCB_RECFM,$VAR A. YES
         SPACE 1
CVTOC320 AS2LTRCE
         TM    DS1RECFM,DS1RECFB   Q. RECFM=.B
         JNO   CVTOC330            A. NO, BYPASS
         OI    DSI_DSCB_RECFM,$BLK A. YES
         SPACE 1
CVTOC330 AS2LTRCE
         TM    DS1RECFM,DS1RECFS   Q. RECFM=.S
         JNO   CVTOC340            A. NO, BYPASS
         OI    DSI_DSCB_RECFM,$SPN A. YES
         SPACE 1
CVTOC340 AS2LTRCE
         TM    DS1RECFM,DS1RECFA   Q. RECFM=..A
         JNO   CVTOC350            A. NO, BYPASS
         OI    DSI_DSCB_RECFM,$ASA A. YES
         SPACE 1
CVTOC350 AS2LTRCE
         TM    DS1RECFM,DS1RECMC   Q. RECFM=..M
         JNO   CVTOC360            A. NO, BYPASS
         OI    DSI_DSCB_RECFM,$MCC A. YES
         SPACE 1
CVTOC360 AS2LTRCE
         ICM   R0,12,DS1BLKL       BLKSZ=
         SRL   R0,16
         ST    R0,DSI_DSCB_BLKSZ
*        BLKSZ for RECFM=F|V|U
         ICM   R0,12,DS1LRECL      LRECL=
         SRL   R0,16
         ST    R0,DSI_DSCB_LRECL
*        LRECL for RECFM=F
*        LRECL for RECFM=V  <= 32756
*        LRECL for RECFM=VS <= 32756
*        32768 for RECFM=VS >  32756
*        0     for RECFM=U
         DROP  R8
         SPACE 1
CVTOC400 AS2LTRCE
         LA    R8,VTOCF4
         USING F4DSCB,R8
         SPACE 1
         MVC   DSI_VTOC_NOLCYL,DS4DSCYL SAVE CYL/DEVICE
         MVC   DSI_VTOC_TRKCYL,DS4DSTRK SAVE TRK/CYL
         MVC   DSI_VTOC_TRKSZ,DS4DEVTK  DEVICE TRK SIZE
         DROP  R8
         SPACE 1
CVTOC800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         EJECT
* --------------------------------------------------------- *
* PRINT ACB INFO FOUND IN DATA SET INFO
* PRE-REQS: R8 POINTS TO IFGACB
*           R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
PACB0100 AS2LTRCE
         AS2RESTK PUSH
         USING IFGACB,R8
         USING DSI_NTRY_BEG,R6
         SPACE 1
PACB0110 AS2LTRCE , ACCESS METHOD
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE3LEN),LNE3DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'ACB'
         SPACE 1
         TM    ACBDSOR2,ACBDORGA   Q. VSAM
         JNO   PACB0800            A. no, bypass
         MVC   LNEAM,=CL4'VSAM'    A. yes,
         TM    ACBOFLGS,ACBOPEN    Q. OPEN
         JNO   PACB0800            A. NO, BYPASS
         SPACE 1
PACB0210 AS2LTRCE
         ICM   R0,12,ACBLRECL Q. LRECL > 0
         JZ    PACB0220       A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELRECL,DW02+L'DW02-L'LNELRECL
         SPACE 1
PACB0220 AS2LTRCE
         MVC   LNESTAT,=CL6'CLOSED'
         TM    ACBOFLGS,ACBOPEN    Q. OPEN
         JNO   PACB0250            A. NO, BYPASS
         MVC   LNESTAT,=CL6'OPEN'
         SPACE 1
PACB0250 AS2LTRCE , PRINT LINE 3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE5LEN),LNE5DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'ACB'
         SPACE 1
PACB0260 AS2LTRCE
         ICM   R0,12,ACBBUFND Q. data BUFND > 0
         JZ    PACB0262       A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBUFCT,DW02+L'DW02-L'LNEBUFCT
         SPACE 1
PACB0262 AS2LTRCE
         ICM   R0,8,ACBSHRP   Q. share pool id > 0
         JZ    PACB0264       A. no, bypass
         SRL   R0,24
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELSRID,DW02+L'DW02-L'LNELSRID
         SPACE 1
PACB0264 EQU   *
         SPACE 1
PACB0272 AS2LTRCE , PRINT LINE 5
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
*        TEST TO SEE IF THERE IS AN INDEX COMPONENT
         OC    DSI_ACB_KEYLEN,DSI_ACB_KEYLEN
         JZ    PACB0800
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE6LEN),LNE6DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'ACB'
         SPACE 1
PACB0280 AS2LTRCE
         ICM   R0,12,ACBBUFNI Q. index BUFND > 0
         JZ    PACB0282       A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBUFCT,DW02+L'DW02-L'LNEBUFCT
         SPACE 1
PACB0282 EQU   *
         SPACE 1
PACB0292 AS2LTRCE , PRINT LINE 6
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE8LEN),LNE8DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'ACB'
         SPACE 1
         TM    ACBMACR3,ACBLSR     Q. LSR
         JNO   PACB0300            A. no, bypass
         MVC   LNEIND4,=CL4'LSR'   A. yes,
         J     PACB0310
PACB0300 AS2LTRCE
         TM    ACBMACR3,ACBGSR     Q. GSR
         JNO   PACB0302            A. no, bypass
         MVC   LNEIND4,=CL4'GSR'   A. yes,
         J     PACB0310
PACB0302 AS2LTRCE
         TM    ACBMACR3,ACBICI     Q. ICI
         JNO   PACB0304            A. no, bypass
         MVC   LNEIND4,=CL4'ICI'   A. yes,
         J     PACB0310
PACB0304 AS2LTRCE
         TM    ACBMACR4,ACBRLS     Q. RLS
         JNO   PACB0310            A. no, bypass
         MVC   LNEIND4,=CL4'RLS'   A. yes,
*        J     PACB0310
PACB0310 EQU   *
         SPACE 1
PACB0320 AS2LTRCE , PRINT LINE 8
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PACB0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R8,R6
         SPACE 2
* --------------------------------------------------------- *
* PRINT DCB INFO FOUND IN DATA SET INFO
* PRE-REQS: R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
PDCB0100 AS2LTRCE
         AS2RESTK PUSH
         USING DSI_NTRY_BEG,R6
         SPACE 1
PDCB0110 AS2LTRCE , ACCESS METHOD
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE3LEN),LNE3DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DCB'
         SPACE 1
         TM    DSI_DCB_AM,$IS
         JNO   PDCB0114
         MVC   LNEAM,=CL4'IS'
         J     PDCB0130
         SPACE 1
PDCB0114 AS2LTRCE
         TM    DSI_DCB_AM,$PS
         JNO   PDCB0118
         MVC   LNEAM,=CL4'PS'
         J     PDCB0130
         SPACE 1
PDCB0118 AS2LTRCE
         TM    DSI_DCB_AM,$DA
         JNO   PDCB0122
         MVC   LNEAM,=CL4'DA'
         J     PDCB0130
         SPACE 1
PDCB0122 AS2LTRCE
         TM    DSI_DCB_AM,$PO
         JNO   PDCB0126
         MVC   LNEAM,=CL4'PO'
         J     PDCB0130
PDCB0126 EQU   *
         J     PDCB0800
         SPACE 1
PDCB0130 AS2LTRCE , ORGANIZATION
         TM    DSI_ICF_ORG,$KEY
         JNO   PDCB0134
         MVC   LNEORG,=CL4'KEY'
         J     PDCB0150
         SPACE 1
PDCB0134 AS2LTRCE
         TM    DSI_ICF_ORG,$DIR
         JNO   PDCB0138
         MVC   LNEORG,=CL4'DIR'
         J     PDCB0150
         SPACE 1
PDCB0138 AS2LTRCE
         TM    DSI_ICF_ORG,$SEQ
         JNO   PDCB0140
         MVC   LNEORG,=CL4'SEQ'
         J     PDCB0150
         SPACE 1
PDCB0140 AS2LTRCE
         TM    DSI_ICF_ORG,$LIB
         JNO   PDCB0144
         MVC   LNEORG,=CL4'LIB'
         J     PDCB0150
PDCB0144 EQU   *
PDCB0150 EQU   *
         SPACE 1
PDCB0170 AS2LTRCE , RECFM
*                     D B  S  A ,
*                     F B  S  A|M ,
*                     U A|M ,
*                     V B  S  A|M
         TM    DSI_DCB_RECFM,$UND
         JNO   PDCB0174
         MVC   LNERECFM,=CL4'U'
         J     PDCB0190
         SPACE 1
PDCB0174 AS2LTRCE
         TM    DSI_DCB_RECFM,$FIX
         JNO   PDCB0178
         MVC   LNERECFM,=CL4'F'
         J     PDCB0182
         SPACE 1
PDCB0178 AS2LTRCE
         TM    DSI_DCB_RECFM,$VAR
         JNO   PDCB0182
         MVC   LNERECFM,=CL4'V'
**       J     PDCB0182
         SPACE 1
PDCB0182 AS2LTRCE
         TM    DSI_DCB_RECFM,$BLK
         JNO   PDCB0186
         MVI   LNERECFM+1,C'B'
         TM    DSI_DCB_RECFM,$SPN
         JNO   PDCB0190
         MVI   LNERECFM+2,C'S'
         J     PDCB0190
         SPACE 1
PDCB0186 AS2LTRCE
         TM    DSI_DCB_RECFM,$SPN
         JNO   PDCB0190
         MVI   LNERECFM+1,C'S'
**       J     PDCB0190
         SPACE 1
PDCB0190 AS2LTRCE
         TM    DSI_DCB_RECFM,$ASA
         JNO   PDCB0194
         MVI   LNERECFM+3,C'A'
         J     PDCB0200
         SPACE 1
PDCB0194 AS2LTRCE
         TM    DSI_DCB_RECFM,$MCC
         JNO   PDCB0200
         MVI   LNERECFM+3,C'M'
**       J     PDCB0200
PDCB0200 EQU   *
         SPACE 1
PDCB0210 AS2LTRCE , LRECL
         ICM   R0,15,DSI_DCB_LRECL
         JZ    PDCB0214
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELRECL,DW02+L'DW02-L'LNELRECL
         SPACE 1
PDCB0214 AS2LTRCE , OPEN/CLOSE STATUS
         MVC   LNESTAT,=CL6'CLOSED'
         TM    DSI_DCB_IND0,$OPEN  Q. OPEN
         JNO   PDCB0250            A. CLOSE
         MVC   LNESTAT,=CL6'OPEN'
         SPACE 1
PDCB0250 AS2LTRCE , PRINT LINE 3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE4LEN),LNE4DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DCB'
         SPACE 1
         ICM   R0,15,DSI_DCB_BLKSZ BLKSZ
         JZ    PDCB0254
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBLKSZ,DW02+L'DW02-L'LNEBLKSZ
         SPACE 1
PDCB0254 AS2LTRCE
         ICM   R0,12,DSI_DCB_BUFND BUFFER COUNT
         JZ    PDCB0260
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBUFNO,DW02+L'DW02-L'LNEBUFNO
PDCB0260 EQU   *
         SPACE 1
PDCB0300 AS2LTRCE , PRINT LINE 4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNECLEN),LNECDSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DCB'
         SPACE 1
         MVC   LNECLASS,DSI_DCB_DCLASS  DEVICE CLASS
         MVC   LNEDTYPE,DSI_DCB_DTYPE   DEVICE TYPE
         SPACE 1
PDCB0350 AS2LTRCE , PRINT LINE 12
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PDCB0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PRINT DSAB INFO FOUND IN DATA SET INFO
* PRE-REQS: R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
PDSAB100 AS2LTRCE
         AS2RESTK PUSH
         USING DSI_NTRY_BEG,R6
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNEALEN),LNEADSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DSAB'
         SPACE 1
         TM    DSI_DSAB_AM,$IS     ACCESS METHOD
         JNO   PDSAB124
         MVC   LNEAM,=CL4'IS'
         J     PDSAB150
         SPACE 1
PDSAB124 AS2LTRCE
         TM    DSI_DSAB_AM,$PS
         JNO   PDSAB128
         MVC   LNEAM,=CL4'PS'
         J     PDSAB150
         SPACE 1
PDSAB128 AS2LTRCE
         TM    DSI_DSAB_AM,$DA
         JNO   PDSAB132
         MVC   LNEAM,=CL4'DA'
         J     PDSAB150
         SPACE 1
PDSAB132 AS2LTRCE
         TM    DSI_DSAB_AM,$PO
         JNO   PDSAB136
         MVC   LNEAM,=CL4'PO'
         J     PDSAB150
         SPACE 1
PDSAB136 AS2LTRCE
         TM    DSI_DSAB_AM,$VSAM
         JNO   PDSAB140
         MVC   LNEAM,=CL4'VSAM'
         J     PDSAB150
         SPACE 1
PDSAB140 EQU   *
         SPACE 1
PDSAB150 AS2LTRCE
         TM    DSI_DSAB_IND1,$VIO
         JNO   PDSAB159
         MVC   LNEIND1,=CL3'VIO'
PDSAB159 EQU   *
         SPACE 1
PDSAB160 AS2LTRCE
         TM    DSI_DSAB_IND0,$SUBSYS    Q. SYSIN/SYSOUT/SUBSYS=
         JNO   PDSAB169                 A. NO, BYPASS
         CLI   DSI_DSAB_SSYS,C' '       Q. SUBSYS= SPACE
         JE    PDSAB169                 A. YES, BYPASS
         MVC   LNESSYS,DSI_DSAB_SSYS    A. NO,
PDSAB169 EQU   *
         SPACE 1
PDSAB170 AS2LTRCE , OPEN/CLOSED STATUS
         MVC   LNESTAT,=CL6'CLOSED'
         TM    DSI_DSAB_IND0,$OPEN Q. OPEN
         JNO   PDSAB179            A. NO, BYPASS
         MVC   LNESTAT,=CL6'OPEN'
PDSAB179 EQU   *
PDSAB180 AS2LTRCE , PRINT LINE 10
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PDSAB800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PRINT JFCB INFO FOUND IN DATA SET INFO
* PRE-REQS: R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
PJFCB100 AS2LTRCE
         AS2RESTK PUSH
         USING DSI_NTRY_BEG,R6
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE3LEN),LNE3DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'JFCB'
         SPACE 1
         TM    DSI_JFCB_AM,$IS     ACCESS METHOD
         JNO   PJFCB124
         MVC   LNEAM,=CL4'IS'
         J     PJFCB150
         SPACE 1
PJFCB124 AS2LTRCE
         TM    DSI_JFCB_AM,$PS
         JNO   PJFCB128
         MVC   LNEAM,=CL4'PS'
         J     PJFCB150
         SPACE 1
PJFCB128 AS2LTRCE
         TM    DSI_JFCB_AM,$DA
         JNO   PJFCB132
         MVC   LNEAM,=CL4'DA'
         J     PJFCB150
         SPACE 1
PJFCB132 AS2LTRCE
         TM    DSI_JFCB_AM,$PO
         JNO   PJFCB136
         MVC   LNEAM,=CL4'PO'
         J     PJFCB150
         SPACE 1
PJFCB136 AS2LTRCE
         TM    DSI_JFCB_AM,$VSAM
         JNO   PJFCB140
         MVC   LNEAM,=CL4'VSAM'
         J     PJFCB150
         SPACE 1
PJFCB140 AS2LTRCE
         TM    DSI_DSCB_IND1,$HFS
         JNO   PJFCB144
         MVC   LNEAM,=CL4'HFS'
         J     PJFCB150
PJFCB144 EQU   *
         SPACE 1
PJFCB150 AS2LTRCE , ORGANIZATION
         TM    DSI_ICF_ORG,$KEY
         JNO   PJFCB152
         MVC   LNEORG,=CL4'KEY'
         J     PJFCB160
         SPACE 1
PJFCB152 AS2LTRCE
         TM    DSI_ICF_ORG,$DIR
         JNO   PJFCB154
         MVC   LNEORG,=CL4'DIR'
         J     PJFCB160
         SPACE 1
PJFCB154 AS2LTRCE
         TM    DSI_ICF_ORG,$SEQ
         JNO   PJFCB156
         MVC   LNEORG,=CL4'SEQ'
         J     PJFCB160
         SPACE 1
PJFCB156 AS2LTRCE
         TM    DSI_ICF_ORG,$LIB
         JNO   PJFCB158
         MVC   LNEORG,=CL4'LIB'
         J     PJFCB160
PJFCB158 EQU   *
         SPACE 1
PJFCB160 AS2LTRCE , RECORD FORMAT
*                     D B  S  A ,
*                     F B  S  A|M ,
*                     U A|M ,
*                     V B  S  A|M
         TM    DSI_JFCB_RECFM,$UND
         JNO   PJFCB164
         MVC   LNERECFM,=CL4'U'
         J     PJFCB180
         SPACE 1
PJFCB164 AS2LTRCE
         TM    DSI_JFCB_RECFM,$FIX
         JNO   PJFCB168
         MVC   LNERECFM,=CL4'F'
         J     PJFCB172
         SPACE 1
PJFCB168 AS2LTRCE
         TM    DSI_JFCB_RECFM,$VAR
         JNO   PJFCB172
         MVC   LNERECFM,=CL4'V'
**       J     PJFCB172
         SPACE 1
PJFCB172 AS2LTRCE
         TM    DSI_JFCB_RECFM,$BLK
         JNO   PJFCB176
         MVI   LNERECFM+1,C'B'
         TM    DSI_JFCB_RECFM,$SPN
         JNO   PJFCB180
         MVI   LNERECFM+2,C'S'
         J     PJFCB180
         SPACE 1
PJFCB176 AS2LTRCE
         TM    DSI_JFCB_RECFM,$SPN
         JNO   PJFCB180
         MVI   LNERECFM+1,C'S'
**       J     PJFCB180
         SPACE 1
PJFCB180 AS2LTRCE
         TM    DSI_JFCB_RECFM,$ASA
         JNO   PJFCB184
         MVI   LNERECFM+3,C'A'
         J     PJFCB188
         SPACE 1
PJFCB184 AS2LTRCE
         TM    DSI_JFCB_RECFM,$MCC
         JNO   PJFCB188
         MVI   LNERECFM+3,C'M'
**       J     PJFCB188
PJFCB188 EQU   *
         SPACE 1
PJFCB200 AS2LTRCE , LOGICAL RECORD
         ICM   R0,15,DSI_JFCB_LRECL
         JZ    PJFCB204
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELRECL,DW02+L'DW02-L'LNELRECL
PJFCB204 EQU   *
         SPACE 1
PJFCB210 AS2LTRCE , OPEN DISPOSITION
         TM    DSI_JFCB_IND2,$NEW
         JNO   PJFCB214
         MVC   LNEDISP,=CL3'NEW'
         J     PJFCB226
         SPACE 1
PJFCB214 AS2LTRCE
         TM    DSI_JFCB_IND2,$MOD
         JNO   PJFCB218
         MVC   LNEDISP,=CL3'MOD'
         J     PJFCB226
         SPACE 1
PJFCB218 AS2LTRCE
         TM    DSI_JFCB_IND2,$OLD
         JNO   PJFCB222
         MVC   LNEDISP,=CL3'OLD'
         J     PJFCB226
         SPACE 1
PJFCB222 AS2LTRCE
         TM    DSI_JFCB_IND2,$SHR
         JNO   PJFCB226
         MVC   LNEDISP,=CL3'SHR'
**       J     PJFCB226
PJFCB226 EQU   *
         SPACE 1
PJFCB240 AS2LTRCE , PRINT LINE 3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE4LEN),LNE4DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'JFCB'
         SPACE 1
         ICM   R0,15,DSI_JFCB_BLKSZ     BLOCK SIZE
         JZ    PJFCB250
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBLKSZ,DW02+L'DW02-L'LNEBLKSZ
         SPACE 1
PJFCB250 AS2LTRCE
         ICM   R0,12,DSI_JFCB_BUFND     BUFFER SIZE
         JZ    PJFCB260
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBUFNO,DW02+L'DW02-L'LNEBUFNO
         TM    DSI_JFCB_IND1,$BLSR
         JNO   PJFCB260
         MVC   LNEIND2,=CL4'BLSR'
         SPACE 1
PJFCB260 AS2LTRCE
         TM    DSI_JFCB_IND1,$VIO
         JNO   PJFCB270
         MVC   LNEIND2,=CL4'VIO'
PJFCB270 EQU   *
         SPACE 1
PJFCB280 AS2LTRCE , PRINT LINE 4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNEBLEN),LNEBDSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'JFCB'
         SPACE 1
         CLC   DSI_DCB_DCLASS,=CL8'DASD'     Q. DASD
         JNE   PJFCB300                      A. NO, BYPASS
         ICM   R0,12,DSI_JFCB_NOVOL     Q. ANY VOLS WITH EXTENTS
         JZ    PJFCB300                 A. NO, BYPASS
         SRL   R0,16
         ST    R0,FW11        STORE SAVE VOL CNT
         CLC   FW11,F10       Q. SAVE VOL CNT > 10 (1 PRINT LINE)
         JH    PJFCB284       A. YES,
         L     R5,FW11        A. NO, LOAD SAVE VOL CNT
         J     PJFCB288
PJFCB284 EQU   *
         L     R5,F10         A. YES, USE 10 FOR VOL CNT
PJFCB288 EQU   *
*        SETUP LOOP WITH BRCT
         LA    R3,DSI_JFCB_VOLNM   SET ADDR OF SOURCE FIELD(S)
PJFCB289 EQU   *
         LA    R4,LNEVLIST    SET ADDR OF TARGET FIELD(S)
PJFCB292 EQU   *
*        MVC   LNEVLIST,DSI_JFCB_VOLNM  MOVE IN VOL
         MVC   0(L'DSI_JFCB_VOLNM,R4),0(R3)  SAME AS ABOVE
         SPACE 1
         LA    R3,L'DSI_JFCB_VOLNM(,R3) BUMP UP ADDR OF NEXT VOL
         LA    R4,L'LNEVLIST+1(,R4)     BUMP UP ADDR OF NEXT PRINT POS
         BRCT  R5,PJFCB292    PROCESS NEXT VOL
*                             FINISHED WITH 1ST ROW
*        PRINT LINE 11
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNEVAR,C' '
         MVC   LNEVAR+1(L'LNEVAR-1),LNEVAR
         SPACE 1
PJFCB296 EQU   *
         CLC   FW11,F10       Q. SAVE VOL CNT > 10
         JNH   PJFCB300       A. NO, BYPASS
         L     R0,FW11        LOAD SAVE VOL CNT
         S     R0,F10
         ST    R0,FW11        STORE SAVE VOL CNT
         LR    R5,R0
         J     PJFCB289       LOOP BACK TO PRINT NEXT 10 VOL
         SPACE 1
PJFCB300 EQU   *
         SPACE 1
PJFCB800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PRINT DEVICE INFO FOUND IN DATA SET INFO
* PRE-REQS: R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
PDEV0100 AS2LTRCE
         AS2RESTK PUSH
         USING DSI_NTRY_BEG,R6
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE9LEN),LNE9DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DEV'
         SPACE 1
         CLC   DSI_DEV_DCLASS,=CL8'DASD'     Q. DASD
         JNE   PDEV0180                      A. NO, BYPASS
         ICM   R0,15,DSI_DEV_NOLCYL     NBR OF CYLS
         JZ    PDEV0120
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNECYLS,DW02+L'DW02-L'LNECYLS
         SPACE 1
PDEV0120 AS2LTRCE
         ICM   R0,15,DSI_DEV_TRKCYL     NBR OF TRKS/CYL
         JZ    PDEV0140
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNETPC,DW02+L'DW02-L'LNETPC
         SPACE 1
PDEV0140 EQU   *
         SPACE 1
PDEV0160 AS2LTRCE , PRINT LINE 9
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PDEV0180 AS2LTRCE
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNECLEN),LNECDSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DEV'
         SPACE 1
         MVC   LNECLASS,DSI_DEV_DCLASS  DEVICE CLASS
         MVC   LNEDTYPE,DSI_UCB_DTYPE   DEVICE TYPE i.e. 3390
         MVC   LNEDNBR,DSI_UCB_DNBR     DEVICE NBR i.e. A100
         TM    DSI_UCB_IND1,$VIO        Q. VIO ELIGIBLE
         JNO   PDEV0184                 A. NO,
         MVC   LNEVIO,=CL4'VIO'
PDEV0184 EQU   *
         TM    DSI_UCB_IND8,$CACHE      Q. CACHE DEVICE
         JNO   PDEV0188                 A. NO,
         MVC   LNECACHE,=CL6'CACHED'    A. YES,
PDEV0188 EQU   *
         SPACE 1
PDEV0200 AS2LTRCE , PRINT LINE 12
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PDEV0220 AS2LTRCE
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNEDLEN),LNEDDSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DEV'
         SPACE 1
         ICM   R0,15,MAXBLKSZ      MAX BLKSIZE
         JZ    PDEV0224
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEMBLKSZ,DW02+L'DW02-L'LNEMBLKSZ
PDEV0224 EQU   *
         ICM   R0,15,DVAMAXLR+4    MAX LRECL
         JZ    PDEV0226
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEMLRECL,DW02+L'DW02-L'LNEMLRECL
PDEV0226 EQU   *
         ICM   R0,15,DVAMAXBLK+4   MAX LBI BLKSIZE
         JZ    PDEV0228
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELBIBLKSZ,DW02+L'DW02-L'LNELBIBLKSZ
PDEV0228 EQU   *
         ICM   R0,15,DVAOPTBLK+4   MAX OPTIMUM LBI BLKSIZE
         JZ    PDEV0230
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEOPTLBIBLKSZ,DW02+L'DW02-L'LNEOPTLBIBLKSZ
PDEV0230 EQU   *
         SPACE 1
PDEV0240 AS2LTRCE , PRINT LINE 13
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PDEV0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PRINT VCAT INFO FOUND IN DATA SET INFO
* PRE-REQS: R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
PVCAT100 AS2LTRCE
         AS2RESTK PUSH
         USING DSI_NTRY_BEG,R6
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE3LEN),LNE3DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'VCAT'
         SPACE 1
         MVC   LNEAM,=CL4'VSAM'
         SPACE 1
PVCAT140 AS2LTRCE , ORGANIZATION
         TM    DSI_ICF_ORG,$VRRDS
         JNO   PVCAT144
         MVC   LNEORG,=CL4'VRRD'
         J     PVCAT170
         SPACE 1
PVCAT144 AS2LTRCE
         TM    DSI_ICF_ORG,$KSDS
         JNO   PVCAT148
         MVC   LNEORG,=CL4'KSDS'
         J     PVCAT170
         SPACE 1
PVCAT148 AS2LTRCE
         TM    DSI_ICF_ORG,$RRDS
         JNO   PVCAT152
         MVC   LNEORG,=CL4'RRDS'
         J     PVCAT170
         SPACE 1
PVCAT152 AS2LTRCE
         TM    DSI_ICF_ORG,$ESDS
         JNO   PVCAT156
         MVC   LNEORG,=CL4'ESDS'
         J     PVCAT170
         SPACE 1
PVCAT156 AS2LTRCE
         TM    DSI_ICF_ORG,$LDS
         JNO   PVCAT160
         MVC   LNEORG,=CL4'LDS'
         J     PVCAT170
PVCAT160 EQU   *
         SPACE 1
PVCAT170 AS2LTRCE , RECFM
*                     D B  S  A ,
*                     F B  S  A|M ,
*                     U A|M ,
*                     V B  S  A|M
         TM    DSI_DCB_RECFM,$UND
         JNO   PVCAT174
         MVC   LNERECFM,=CL4'U'
         J     PVCAT190
         SPACE 1
PVCAT174 AS2LTRCE
         TM    DSI_DCB_RECFM,$FIX
         JNO   PVCAT178
         MVC   LNERECFM,=CL4'F'
         J     PVCAT182
         SPACE 1
PVCAT178 AS2LTRCE
         TM    DSI_DCB_RECFM,$VAR
         JNO   PVCAT182
         MVC   LNERECFM,=CL4'V'
**       J     PVCAT182
         SPACE 1
PVCAT182 AS2LTRCE
         TM    DSI_DCB_RECFM,$BLK
         JNO   PVCAT186
         MVI   LNERECFM+1,C'B'
         TM    DSI_DCB_RECFM,$SPN
         JNO   PVCAT190
         MVI   LNERECFM+2,C'S'
         J     PVCAT190
         SPACE 1
PVCAT186 AS2LTRCE
         TM    DSI_DCB_RECFM,$SPN
         JNO   PVCAT190
         MVI   LNERECFM+1,C'S'
**       J     PVCAT190
         SPACE 1
PVCAT190 AS2LTRCE
         TM    DSI_DCB_RECFM,$ASA
         JNO   PVCAT194
         MVI   LNERECFM+3,C'A'
         J     PVCAT200
         SPACE 1
PVCAT194 AS2LTRCE
         TM    DSI_DCB_RECFM,$MCC
         JNO   PVCAT200
         MVI   LNERECFM+3,C'M'
**       J     PVCAT200
PVCAT200 EQU   *
         SPACE 1
PVCAT210 AS2LTRCE
         ICM   R0,15,DSI_DCB_LRECL      Q. LRECL > 0
         JZ    PVCAT214                 A. no, bypass
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELRECL,DW02+L'DW02-L'LNELRECL
         SPACE 1
PVCAT214 AS2LTRCE , SHR(N X)
         TM    DSI_ICF_SHR,$SHRREG4
         JNO   PVCAT218
         MVI   LNESHR,C'4'
         J     PVCAT230
         SPACE 1
PVCAT218 AS2LTRCE
         TM    DSI_ICF_SHR,$SHRREG3
         JNO   PVCAT222
         MVI   LNESHR,C'3'
         J     PVCAT230
         SPACE 1
PVCAT222 AS2LTRCE
         TM    DSI_ICF_SHR,$SHRREG2
         JNO   PVCAT226
         MVI   LNESHR,C'2'
         J     PVCAT230
         SPACE 1
PVCAT226 AS2LTRCE
         TM    DSI_ICF_SHR,$SHRREG1
         JNO   PVCAT230
         MVI   LNESHR,C'1'
**       J     PVCAT230
         SPACE 1
PVCAT230 AS2LTRCE , SHR(X N)
         TM    DSI_ICF_SHR,$SHRSYS4
         JNO   PVCAT234
         MVI   LNESHR+2,C'4'
         J     PVCAT246
         SPACE 1
PVCAT234 AS2LTRCE
         TM    DSI_ICF_SHR,$SHRSYS3
         JNO   PVCAT238
         MVI   LNESHR+2,C'3'
         J     PVCAT246
         SPACE 1
PVCAT238 AS2LTRCE
         TM    DSI_ICF_SHR,$SHRSYS2
         JNO   PVCAT242
         MVI   LNESHR+2,C'2'
         J     PVCAT246
         SPACE 1
PVCAT242 AS2LTRCE
         TM    DSI_ICF_SHR,$SHRSYS1
         JNO   PVCAT246
         MVI   LNESHR+2,C'1'
**       J     PVCAT246
PVCAT246 EQU   *
         SPACE 1
PVCAT248 AS2LTRCE , OPEN/CLOSE STATUS
         MVC   LNESTAT,=CL6'CLOSED'
         TM    DSI_DCB_IND0,$OPEN  Q. OPEN
         JNO   PVCAT250            A. NO, BYPASS
         MVC   LNESTAT,=CL6'OPEN'
         SPACE 1
PVCAT250 AS2LTRCE , PRINT LINE 3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE5LEN),LNE5DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'VCAT'
         SPACE 1
         ICM   R0,15,DSI_ACB_DCISZ      Q. DATA CISZ > 0
         JZ    PVCAT260                 A. no, bypass
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNECISZ,DW02+L'DW02-L'LNECISZ
         SPACE 1
PVCAT260 AS2LTRCE
         ICM   R0,12,DSI_DCB_BUFND      Q. data BUFND > 0
         JZ    PVCAT264                 A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBUFCT,DW02+L'DW02-L'LNEBUFCT
         SPACE 1
PVCAT264 AS2LTRCE
         ICM   R0,12,DSI_ICF_DCICA      Q. data CI/CA > 0
         JZ    PVCAT268                 A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNECICA,DW02+L'DW02-L'LNECICA
         SPACE 1
PVCAT268 AS2LTRCE
         ICM   R0,12,DSI_ACB_DLSR       Q. data LSR pool id > 0
         JZ    PVCAT270                 A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELSRID,DW02+L'DW02-L'LNELSRID
         SPACE 1
PVCAT270 AS2LTRCE , PRINT LINE 5
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
*        TEST TO SEE IF THERE IS AN INDEX COMPONENT
         OC    DSI_ACB_KEYLEN,DSI_ACB_KEYLEN
         JZ    PVCAT320
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE6LEN),LNE6DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'VCAT'
         SPACE 1
         ICM   R0,15,DSI_ACB_ICISZ      Q. index CISZ > 0
         JZ    PVCAT284                 A. no, bypass
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNECISZ,DW02+L'DW02-L'LNECISZ
         SPACE 1
PVCAT284 AS2LTRCE
         ICM   R0,12,DSI_ACB_BUFNI      Q. index BUFND > 0
         JZ    PVCAT286                 A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBUFCT,DW02+L'DW02-L'LNEBUFCT
         SPACE 1
PVCAT286 AS2LTRCE
         ICM   R0,12,DSI_ICF_ICICA     Q. index CI/CA > 0
         JZ    PVCAT288                A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNECICA,DW02+L'DW02-L'LNECICA
         SPACE 1
PVCAT288 AS2LTRCE
         ICM   R0,12,DSI_ACB_ILSR       Q. index LSR pool id > 0
         JZ    PVCAT290                 A. no, bypass
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELSRID,DW02+L'DW02-L'LNELSRID
         SPACE 1
PVCAT290 AS2LTRCE , PRINT LINE 6
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PVCAT300 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE7LEN),LNE7DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'VCAT'
         SPACE 1
         OC    DSI_ACB_KEYLEN,DSI_ACB_KEYLEN Q. KEY length = 0
         JZ    PVCAT312                      A. yes, bypass
         ICM   R0,12,DSI_ACB_KEYOFF     get KEY offset
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEKOFF,DW02+L'DW02-L'LNEKOFF
         SPACE 1
PVCAT310 AS2LTRCE
         ICM   R0,12,DSI_ACB_KEYLEN     get KEY length
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEKLEN,DW02+L'DW02-L'LNEKLEN
         SPACE 1
PVCAT312 AS2LTRCE , PRINT LINE 7
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PVCAT320 AS2LTRCE
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE8LEN),LNE8DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'VCAT'
         SPACE 1
         TM    DSI_ICF_IND3,$SMSEF      Q. SMS/EF
         JNO   PVCAT330                 A. no, bypass
         MVC   LNESMFEF,=CL2'EF'
         SPACE 1
PVCAT330 AS2LTRCE
         TM    DSI_ICF_IND3,$SMSEFC     Q. SMS/COMPRESSION
         JNO   PVCAT334                 A. no, bypass
         MVC   LNESMFCP,=CL2'CP'
         SPACE 1
PVCAT334 AS2LTRCE
         TM    DSI_ICF_IND3,$SMSEFEA    Q. SMS/EA
         JNO   PVCAT340                 A. no, bypass
         MVC   LNESMFEA,=CL2'EA'
PVCAT340 EQU   *
         SPACE 1
PVCAT348 AS2LTRCE
         TM    DSI_ICF_IND4,X'EE'  Q. RLS
         JZ    PVCAT352            A. no, bypass
         MVC   LNEIND4,=CL4'RLS'
         SPACE 1
PVCAT352 AS2LTRCE , PRINT LINE 8
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PVCAT800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* PRINT VTOC INFO FOUND IN DATA SET INFO
* PRE-REQS: R6 POINTS TO DSI_NTRY_BEG
* --------------------------------------------------------- *
         SPACE 1
PVTOC100 AS2LTRCE
         AS2RESTK PUSH
         USING DSI_NTRY_BEG,R6
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE3LEN),LNE3DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DSCB'
         SPACE 1
         TM    DSI_DSCB_AM,$IS     ACCESS METHOD
         JNO   PVTOC124
         MVC   LNEAM,=CL4'IS'
         J     PVTOC150
         SPACE 1
PVTOC124 AS2LTRCE
         TM    DSI_DSCB_AM,$PS
         JNO   PVTOC128
         MVC   LNEAM,=CL4'PS'
         J     PVTOC150
         SPACE 1
PVTOC128 AS2LTRCE
         TM    DSI_DSCB_AM,$DA
         JNO   PVTOC132
         MVC   LNEAM,=CL4'DA'
         J     PVTOC150
         SPACE 1
PVTOC132 AS2LTRCE
         TM    DSI_DSCB_AM,$PO
         JNO   PVTOC136
         MVC   LNEAM,=CL4'PO'
         J     PVTOC150
         SPACE 1
PVTOC136 AS2LTRCE
         TM    DSI_DSCB_AM,$VSAM
         JNO   PVTOC140
         MVC   LNEAM,=CL4'VSAM'
         J     PVTOC150
         SPACE 1
PVTOC140 AS2LTRCE
         TM    DSI_DSCB_IND1,$PDSE
         JNO   PVTOC144
         MVC   LNEAM,=CL4'PDSE'
         J     PVTOC150
         SPACE 1
PVTOC144 AS2LTRCE
         TM    DSI_DSCB_IND1,$HFS
         JNO   PVTOC148
         MVC   LNEAM,=CL4'HFS'
         J     PVTOC150
PVTOC148 EQU   *
         SPACE 1
PVTOC150 AS2LTRCE , ORGANIZATION
         TM    DSI_ICF_ORG,$KEY
         JNO   PVTOC152
         MVC   LNEORG,=CL4'KEY'
         J     PVTOC160
         SPACE 1
PVTOC152 AS2LTRCE
         TM    DSI_ICF_ORG,$DIR
         JNO   PVTOC154
         MVC   LNEORG,=CL4'DIR'
         J     PVTOC160
         SPACE 1
PVTOC154 AS2LTRCE
         TM    DSI_ICF_ORG,$SEQ
         JNO   PVTOC156
         MVC   LNEORG,=CL4'SEQ'
         J     PVTOC160
         SPACE 1
PVTOC156 AS2LTRCE
         TM    DSI_ICF_ORG,$LIB
         JNO   PVTOC158
         MVC   LNEORG,=CL4'LIB'
         J     PVTOC160
PVTOC158 EQU   *
         SPACE 1
PVTOC160 AS2LTRCE , RECFM
*                     D B  S  A ,
*                     F B  S  A|M ,
*                     U A|M ,
*                     V B  S  A|M
         TM    DSI_DSCB_RECFM,$UND
         JNO   PVTOC164
         MVC   LNERECFM,=CL4'U'
         J     PVTOC180
         SPACE 1
PVTOC164 AS2LTRCE
         TM    DSI_DSCB_RECFM,$FIX
         JNO   PVTOC168
         MVC   LNERECFM,=CL4'F'
         J     PVTOC172
         SPACE 1
PVTOC168 AS2LTRCE
         TM    DSI_DSCB_RECFM,$VAR
         JNO   PVTOC172
         MVC   LNERECFM,=CL4'V'
**       J     PVTOC172
         SPACE 1
PVTOC172 AS2LTRCE
         TM    DSI_DSCB_RECFM,$BLK
         JNO   PVTOC176
         MVI   LNERECFM+1,C'B'
         TM    DSI_DSCB_RECFM,$SPN
         JNO   PVTOC180
         MVI   LNERECFM+2,C'S'
         J     PVTOC180
         SPACE 1
PVTOC176 AS2LTRCE
         TM    DSI_DSCB_RECFM,$SPN
         JNO   PVTOC180
         MVI   LNERECFM+1,C'S'
**       J     PVTOC180
         SPACE 1
PVTOC180 AS2LTRCE
         TM    DSI_DSCB_RECFM,$ASA
         JNO   PVTOC184
         MVI   LNERECFM+3,C'A'
         J     PVTOC188
         SPACE 1
PVTOC184 AS2LTRCE
         TM    DSI_DSCB_RECFM,$MCC
         JNO   PVTOC188
         MVI   LNERECFM+3,C'M'
**       J     PVTOC188
PVTOC188 EQU   *
         SPACE 1
PVTOC200 AS2LTRCE , LRECL
         ICM   R0,15,DSI_DSCB_LRECL
         JZ    PVTOC204
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNELRECL,DW02+L'DW02-L'LNELRECL
PVTOC204 EQU   *
         SPACE 1
PVTOC220 AS2LTRCE , PRINT LINE 3
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE4LEN),LNE4DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'DSCB'
         SPACE 1
         ICM   R0,15,DSI_DSCB_BLKSZ     BLOCK SIZE
         JZ    PVTOC224
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNEBLKSZ,DW02+L'DW02-L'LNEBLKSZ
PVTOC224 EQU   *
         TM    DSI_DSCB_IND7,$ICF
         JNO   PVTOC226
         MVC   LNEIND7A,=CL4'ICF'
PVTOC226 EQU   *
         TM    DSI_DSCB_IND7,$SMS
         JNO   PVTOC250
         MVC   LNEIND7B,=CL4'SMS'
PVTOC250 EQU   *
         SPACE 1
PVTOC260 AS2LTRCE , PRINT LINE 4
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE9LEN),LNE9DSPY
         SPACE 1
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNESRC,=CL4'VTOC'
         SPACE 1
         ICM   R0,12,DSI_VTOC_NOLCYL    NBR OF CYLS
         JZ    PVTOC270
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNECYLS,DW02+L'DW02-L'LNECYLS
         SPACE 1
PVTOC270 AS2LTRCE
         ICM   R0,12,DSI_VTOC_TRKCYL    NBR OF TRKS/CYL
         JZ    PVTOC280
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNETPC,DW02+L'DW02-L'LNETPC
         SPACE 1
PVTOC280 AS2LTRCE
         ICM   R0,12,DSI_VTOC_TRKSZ     NBR OF BYTES/TRK
         JZ    PVTOC290
         SRL   R0,16
         CVD   R0,DW01
         UNPK  DW02,DW01
         OI    DW02+L'DW02-1,X'F0'
         MVC   LNETRKSZ,DW02+L'DW02-L'LNETRKSZ
         SPACE 1
PVTOC290 AS2LTRCE , PRINT LINE 9
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     LINK TO
         SPACE 1
PVTOC800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         EJECT
* --------------------------------------------------------- *
* ERROR PROCESSING
* --------------------------------------------------------- *
         SPACE 1
TXT0101A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ACTION (VARIABLE 4)
         L     R1,PGMPARM2
         L     R1,0(,R1)
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0101E
         SPACE 1
MSG0101E EQU   *    INVALID ACTION
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU035_0002
**       J     MSG0101
         SPACE 1
MSG0101  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0102A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'1:6'
**       J     MSG0102I
         SPACE 1
MSG0102I EQU   *    VALID ACTIONS ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU036
**       J     MSG0102
         SPACE 1
MSG0102  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0103A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ACTION (VARIABLE 4)
         L     R1,PGMPARM2
         L     R1,0(,R1)
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0103E
         SPACE 1
MSG0103E EQU   *    ACTION NOT SUPPORTED
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU037_0002
**       J     MSG0103
         SPACE 1
MSG0103  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0104A AS2LTRCE
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(5),=CL5'2,5:6'
**       J     MSG0104I
         SPACE 1
MSG0104I EQU   *    SUPPORTED ACTIONS ARE
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU038
**       J     MSG0104
         SPACE 1
MSG0104  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0107B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'GETDSAB'
         J     MSG0107E
         SPACE 1
TXT0107C AS2LTRCE
         AS2RESTK PUSH
         ST    RF,RTNCD
         XC    RSNCD,RSNCD
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'SWAREQ'
         J     MSG0107E
         SPACE 1
TXT0107D AS2LTRCE
         AS2RESTK PUSH
         ST    RF,RTNCD
         XC    RSNCD,RSNCD
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-PROGRAM'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),IGGCSI00
         J     MSG0107E
         SPACE 1
TXT0107E AS2LTRCE
         AS2RESTK PUSH
         ST    RF,RTNCD
         XC    RSNCD,RSNCD
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'OBTAIN'
         J     MSG0107E
         SPACE 1
TXT0107F AS2LTRCE
         AS2RESTK PUSH
         ST    RF,RTNCD
         ST    R0,RSNCD
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'DEVTYPE'
         J     MSG0107E
         SPACE 1
TXT0107G AS2LTRCE
         AS2RESTK PUSH
         ST    RF,RTNCD
         XC    RSNCD,RSNCD
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RDJFCB'
         J     MSG0107E
         SPACE 1
TXT0107H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'EDTINFO'
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03B_0002
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     ERTN0800
         SPACE 2
TXT0108A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'...@DCB'
*        INSERT TEXT STRING (VARIABLE 7)
         USING FMCB,R7
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),FM_@DCB(L'FM_@DCB+1)
         DROP  R7
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD02
         J     MSG0108E
         SPACE 1
TXT0108B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'...DDNAME'
*        INSERT TEXT STRING (VARIABLE 7)
         USING FMCB,R7
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((7-1)*L'ISICOL)(8),FM_DDNAME
         DROP  R7
         J     MSG0108E
         SPACE 1
TXT0108C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'@SJFCB'
*        INSERT TEXT STRING (VARIABLE 7)
         USING FMCB,R7
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),@SJFCB(L'@SJFCB+1)
         DROP  R7
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD02
         J     MSG0108E
         SPACE 1
TXT0108D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SWBLKID'
*        INSERT TEXT STRING (VARIABLE 7)
         USING ZB505,R7            EST ADDR TO EPA
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),SWBLKID(L'SWBLKID+1)
         DROP  R7
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(2),ZD02+8-2
         J     MSG0108E
         SPACE 1
TXT0108E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((3-1)*L'ISICOL)(5),=CL5'@DSAB'
*        INSERT TEXT STRING (VARIABLE 7)
         USING FMCB,R7
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),@DSAB(L'@DSAB+1)
         DROP  R7
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD02
         J     MSG0108E
         SPACE 1
TXT0108F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'DSABTIOT'
*        INSERT TEXT STRING (VARIABLE 7)
         USING DSAB,R7
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),DSABTIOT(L'DSABTIOT+1)
         DROP  R7
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD02
         J     MSG0108E
         SPACE 1
TXT0108G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'...@WJFCB'
*        INSERT TEXT STRING (VARIABLE 7)
         USING FMCB,R7
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),FM_@WJFCB(L'FM_@WJFCB+1)
         DROP  R7
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD02
         J     MSG0108E
         SPACE 1
TXT0108H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'...@CBXL'
*        INSERT TEXT STRING (VARIABLE 7)
         USING FMCB,R7
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD02(9),FM_@CBXL(L'FM_@CBXL+1)
         DROP  R7
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD02
         J     MSG0108E
         SPACE 1
TXT0108I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'3-AUX DICT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'ADDRESS'
         J     MSG0108E
         SPACE 1
TXT0108J AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'4-DSI_INFO'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'ADDRESS'
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03C_0002
**       J     MSG0108
         SPACE 1
MSG0108  EQU   *
         J     ERTN0800
         SPACE 2
TXT0109A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'MAIN0220'
         J     MSG0109E
         SPACE 1
TXT0109B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'MAIN0600'
**       J     MSG0109E
         SPACE 1
MSG0109E EQU   *    BRANCH INDEX(nnn) IS INVALID
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03D_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *
*        INSERT BRANCH INDEX (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'DDNAME'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),REQDDNME
**       J     MSG0110W
         SPACE 1
MSG0110W EQU   *    NOT FOUND
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03E_0001
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'TABLE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'DSINFO'
**       J     MSG0117W
         SPACE 1
MSG0117W EQU   *    OVERFLOW
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03L_0001
**       J     MSG0110
         SPACE 1
MSG0117  EQU   *
         J     ERTN0800
         SPACE 2
TXT0118A AS2LTRCE
         AS2RESTK PUSH
         ST    RF,RTNCD
         ST    R0,RSNCD
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT ACTION (VARIABLE 4)
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((4-1)*L'ISICOL)(16),=CL16'6-RETRIEVE/MERGE'
**       J     MSG0118E
         SPACE 1
MSG0118E EQU   *    ACTION nnn FAILED WITH R15=nnnn ...
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK(L'LECTOK),ASU03M_0002
**       J     MSG0118
         SPACE 1
MSG0118  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
         DS    0D
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
**       COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 1
         COPY  AS3DSEQU            EQUATES FOR DSD & DSINFO
         SPACE 2
@CEEMOUT DC    V(CEEMOUT)          LE MODULE TO DISPATCH MSG
IGGCSI00 DC    CL8'IGGCSI00'
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
F10      DC    F'10'
F12      DC    F'12'
         SPACE 1
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H16      DC    H'16'
H18      DC    H'18'
H19      DC    H'19'
         SPACE 2
*        VALID DEVICE(S) CLASS VECTOR
VALID_DASD     DC    XL15'2122232425262728292A2B2C2D2E2F'
*        EQU   X'21' 2311
*        EQU   X'22' 2301 PARALLEL DRUM
*        EQU   X'23' 2303 SERIAL DRUM
*        EQU   X'24' 9345
*        EQU   X'25' 2321 DATA CELL
*        EQU   X'26' 2305 DRUM MODEL-1
*        EQU   X'27' 2305 DRUM MODEL-2
*        EQU   X'28' 2314/2319
*        EQU   X'29' 3330 MODEL-1, MODEL-2, 3333 MODEL-1
*        EQU   X'2A' 3340/3344
*        EQU   X'2B' 3350 MODEL-A2, MODEL-B2, MODEL-C2
*        EQU   X'2C' 3375
*        EQU   X'2D' 3330 MODEL-11, 3333 MODEL-11
*        EQU   X'2E' 3380
*        EQU   X'2F' 3390
VALID_CRDRDR   DC    XL03'414446'       CARD RDR
*        EQU   X'41' 2540
*        EQU   X'44' 2501
*        EQU   X'46' 3505
VALID_CRDPUN   DC    XL02'424C'         CARD PUN
*        EQU   X'42' 2540
*        EQU   X'4C' 3525
VALID_RDRPUN   DC    XL02'4345'         CARD RDR/PUN
*        EQU   X'43' 1442
*        EQU   X'45' 2520
VALID_PRINTER  DC    XL05'48494B4D4E'   PRINTER
*        EQU   X'48' 1403, 1404
*        EQU   X'49' 3211
*        EQU   X'4B' 3203-4
*        EQU   X'4D' ANY OTHER PRINTER, LOOK AT UCBTBYT4
*        EQU   X'4E' 3800
VALID_TERM     DC    XL01'4F'           3270 TERMINAL
VALID_PAPERTAP DC    XL01'50'           PAPER TAPE
*        EQU   X'50' 2671 PAPER TAPE READER
VALID_OPTRDR   DC    XL04'575A5B5C'     OPTICAL RDR
*        EQU   X'57' 3886
*        EQU   X'5A' 1285
*        EQU   X'5B' 1287
*        EQU   X'5C' 1288
VALID_MAGINK   DC    XL04'56595D5F'     MAG CHR/INK RDR
*        EQU   X'56' 3890
*        EQU   X'59' 3895
*        EQU   X'5D' 1419
*        EQU   X'5F' 1275
VALID_MAGTAPE  DC    XL04'80818283'     MAG TAPE
*        EQU   X'80' 3480
*        EQU   X'81' 3490
*        EQU   X'82' 3423
*        EQU   X'83' 3400, 3590
         DS    0D
REQTABLE DC    Y($REQCNT)          NBR OF ENTRIES
REQMBRS  EQU   *
         DC    CL8'AMDCIREC'       LEN(8)  CISZ(4),MAX RECLEN(4)
         DC    CL8'AMDKEY'         LEN(4)  KEY REL POS(2),LEN(2)
         DC    CL8'ATTR1'          LEN(1)
         DC    CL8'ATTR2'          LEN(1)
         DC    CL8'BUFSIZE'        LEN(4)
         DC    CL8'COMPIND'        LEN(1)
         DC    CL8'LOGPARMS'       LEN(1)
         DC    CL8'LOGSTRID'       LEN(26)
         DC    CL8'LRECL'          LEN(4)  AVG RECLEN
         DC    CL8'RLSBWO'         LEN(1)
         DC    CL8'RLSFLAGS'       LEN(1)
         DC    CL8'VSAMSTAT'       LEN(46)
         DC    CL8'VSAMTYPE'       LEN(2)
         DC    CL8'XACIFLAG'       LEN(1)
         DC    CL8'XHARBADS'       LEN(8)
         DC    CL8'XHURBADS'       LEN(8)
$REQCNT  EQU   (*-REQMBRS)/8
         SPACE 2
DEVILST0 DEVTYPE ,INFOLIST=,MF=L
#DEV0LEN EQU   *-DEVILST0
         SPACE 1
DEVILST1 DEVTYPE INFO=AMCAP      STATIC VERSION
         SPACE 1
DEVILST2 DEVTYPE INFO=DASD       STATIC VERSION
         SPACE 2
LNE1DSPY DC    Y(26),C'xxxxxxxx: DDNAME(xxxxxxxx)'
LNE1LEN  EQU   *-LNE1DSPY
         SPACE 1
LNE2DSPY DC    Y(81),C'xxxxxxxx: DSNAME(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+
               xxxxxxxxxxxxx)  MBR/GDG(xxxxxxxx)'
LNE2LEN  EQU   *-LNE2DSPY
         SPACE 1
LNE3DSPY DC    Y(91),C'xxxxxxxx: xxxx  AM(xxxx)  ORG(xxxx)  RECFM(xxxx)+
                 LRECL(nnnnn)  DISP(xxx)  SHR(n n)'
LNE3LEN  EQU   *-LNE3DSPY
         SPACE 1
LNE4DSPY DC    Y(60),C'xxxxxxxx: xxxx  BLKSZ(nnnnn)  BUFNO(nnnnn)  xxxx+
                 xxxx  xxxx'
LNE4LEN  EQU   *-LNE4DSPY
         SPACE 1
LNE5DSPY DC    Y(65),C'xxxxxxxx: xxxx  CISZ(nnnnn)  BUFND(nnnnn)  CI/CA+
               (nnnn)  LSRID(nn)'
LNE5LEN  EQU   *-LNE5DSPY
         SPACE 1
LNE6DSPY DC    Y(65),C'xxxxxxxx: xxxx  CISZ(nnnnn)  BUFNI(nnnnn)  CI/CA+
               (nnnn)  LSRID(nn)'
LNE6LEN  EQU   *-LNE6DSPY
         SPACE 1
LNE7DSPY DC    Y(28),C'xxxxxxxx: xxxx  KEY(nnn nnn)'
LNE7LEN  EQU   *-LNE7DSPY
         SPACE 1
*                                          EF/EA/CP  RLS
LNE8DSPY DC    Y(34),C'xxxxxxxx: xxxx  SMS(xx/xx/xx) xxxx'
LNE8LEN  EQU   *-LNE8DSPY
         SPACE 1
LNE9DSPY DC    Y(75),C'xxxxxxxx: xxxx  NBR OF CYLS(nnnnnn)  NBR OF TRKS+
               /CYL(nnn)  BYTES/TRK(nnnnn)'
LNE9LEN  EQU   *-LNE9DSPY
         SPACE 1
LNEADSPY DC    Y(37),C'xxxxxxxx: xxxx  AM(xxxx)  xxx  xxxxxx'
LNEALEN  EQU   *-LNEADSPY
         SPACE 1
LNEBDSPY DC    Y(95),C'xxxxxxxx: xxxx  VOLUME(S)'
LNEBLEN  EQU   *-LNEBDSPY
         SPACE 1
LNECDSPY DC    Y(57),C'xxxxxxxx: xxxx  CLASS(xxxxxxxx)  xxxx  xxxx  xxx+
               x  xxxxxx'
LNECLEN  EQU   *-LNECDSPY
         SPACE 1
LNEDDSPY DC    Y(94),C'xxxxxxxx: xxxx  MAX LRECL(nnnnnn)  MAX BLKSZ(nnn+
               nn)  LBI BLKSZ(nnnnnn)  BEST LBI BLKSZ(nnnnnn)'
LNEDLEN  EQU   *-LNEDDSPY
         SPACE 2
         LTORG
         SPACE 2
*        ERROR MAPPING MACRO IEFDISRC FOR IEFDDSRV
         IEFDISRC
         DROP  R9
         END
./ ADD NAME=ASU3QOIB 0189-19063-19316-1358-07457-09977-00000-APLKS   29
*PROCESS RENT
         TITLE 'AS UTILITY TO QUERY PROGRAM OBJECT INFORMATION'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY MVS
* QUERY PROGRAM OBJECT INFORMATION
*
*    NAME: ASU3QOIB
* PURPOSE: QUERY PROGRAM OBJECT INFORMATION.
*
*        CALL 'ASU3QOIB' USING ASCA, ACTION, PGMOBJ_INFO, FC.
*
*        WHERE:
*           ACTION: (INPUT,FULLWORD)
*             01 - RESERVED FOR SET
*             02 - QUERY
*             03 - RESERVED FOR PUSH
*             04 - RESERVED FOR POP
*             05 - LIST/ROUTE PGMOBJ_INFO TO SYSOUT
*
*      PGMOBJ_INFO: (I/O,AS3OBJCA  DATA STRUCTURE)
*                   COLLECT DATA FROM THE TCB/TIOT/TIOTE/
*                   BLDL/CSV/CDE/CEEPQLD/Scan PgmObj/COBOL PSI
*                   THAT THE CALLER IS ALLOWED TO VIEW
*
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
*         ********* INDIRECT
*
*             BLDL: (SOURCE,IHAPDS)
*                   BUILD PDS/PDSE DIRECTORY ENTRY
*                   map PDS/PDSE directory entry
*                   Search sequence:
*                   - JOBLIB
*                   - STEPLIB
*                   - SYSLIB  (optional)
*
*              CDE: (SOURCE,IHACDE)
*                   CONTENTS DIRECTORY ENTRY
*
*              CSV: (SOURCE,local storage)
*                   CONTENTS SUPERVISOR QUERY SERVICE
*
*              CVT: (SOURCE,CVT)
*                   MVS COMMUNICATION VECTOR
*
*         IEFJESCT: (SOURCE,IEFJESCT)
*                   JES CONTROL BLOCK
*
*             DSAB: (SOURCE,IHADSAB)
*                   DATA SET ASSOCIATION BLOCK
*
*              TCB: (SOURCE,IKJTCB)
*                   TASK CONTROL BLOCK
*
*             TIOT: (SOURCE,IEFTIOT1)
*                   TASK INPUT/OUTPUT TABLE
*            TIOTE: (SOURCE,TIOTIOT1)
*                   TASK INPUT/OUTPUT TABLE ENTRY
*                   1ST MATCHING ENTRY
*
*             JFCB: (SOURCE,IEFJFCBN)
*                   JOB FILE CONTROL BLOCK
*
*---------------------------------------------------------- *
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASU3QOIB'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG, PSA
R1       EQU   1              WORK REG, addr of PARM LIST
R2       EQU   2              WORK REG, TIOTE
R3       EQU   3              WORK REG
R4       EQU   4              not used
R5       EQU   5              BAR of ASAB, ASABX
*                             temp IHAPDS area in dynamic storage
R6       EQU   6              BAR of TCB, TIOT, JPAQ/CDE
*                             BAR OF ASCA
R7       EQU   7              BAR of EPA, JFCB
R8       EQU   8              BAR of STATIC DATA area 2
R9       EQU   9              BAR of STATIC DATA area 1
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             BAR of PGMOBJ_INFO
RC       EQU   12             LE CAA BAR
RD       EQU   13             BAR of RSA/LE DSA
RE       EQU   14             RETURN addr
RF       EQU   15             BRANCH and LINK addr
         SPACE 2
DD#      EQU   30             supported nbr of DD in TIOTE
         SPACE 2
**   LE CWI services
**                            MVS  services
**                            UNIX BPX1LOD sevice
**                            CICS EXEC CICS services
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
#CEEPLOD2 EQU   3948          enclave/thread level load service
*                             ..specify search order
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..F'0:17,18:23,     input
*                             ....24:31' 0-thread 1-enclave
*                             ..F'token' output
*                             ..A(ep addr of module) output
*                             ..3F'feedback' optional
#CEEPDEL EQU   84             enclave level delete service
*                             ..F'length of name' input
*                             ..CL8'name of module' input
*                             ..3F'feedback' optional
#CEEPDEL2 EQU   3952          enclave level delete service
*                             ..delete module loaded by CEEPLOD2
*                             ..F'token' input
*                             ..3F'feedback' optional
* #CEEPQLD EQU   3596           query info on loaded module
#CEEPQLD EQU   3956           z/OS 1.13 query info on loaded module
*                             ..for those loaded by CEEPLOD2
*                             ..F'token' input
*                             ..F'length of name' input/output
*                             ..C'name of module' output
*                             ..A(lp addr of module) output
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
#CEEPLODT EQU   3492          thread level load service
*                             ..F'length of name' input
*                             ..CL8'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
#CEEPDELT EQU   3496          thread level delete service
*                             ..F'length of name' input
*                             ..CL8'name of module' input
*                             ..3F'feedback' optional
         EJECT
         PUSH  PRINT
         PRINT NOGEN
         CEECAA
         SPACE 2
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
         ORG   SUBPARM0
PGMPARM1 DS    A              ADDRESS OF ASCA
PGMPARM2 DS    A              ADDRESS OF ACTION
PGMPARM3 DS    A              ADDRESS OF PGMOBJ_INFO
PGMPARM4 DS    A              ADDRESS OF LE FEEDBACK AREA
         ORG   PGMPARM4
@PLEFDBK DS    A              ADDRESS OF PGM LE FEEDBACK
         SPACE 1
RTNCD    DS    F              RETURN CODE
RSNCD    DS    F              REASON CODE
         SPACE 1
LS_@CVT  DS    A              CVT pointer
LS_@TCB  DS    A              TCB pointer
LS_@JOBSTEPTCB DS    A        TCB for JOBSTEP
LS_@JOBLIBDCB DS    A         TCB JOBLIB DCB pointer
LS_@JPALCDE DS    A           TCB JPA lst CDE pointer
*                             ..points to JPA CDE queue
LS_@TIOT DS    A              TIOT pointer
LS_@1stTIOTE DS    A          1st TIOTE pointer
LS_@TIOTE DS    A             current TIOTE pointer
LS_@SWAEPA DS    A            SWA EPA pointer
*                             ..Scheduler Work Area Extended Parm Area
         SPACE 1
*                             Static Storage Area pointer(s)
LS_SSA1  DS    A              ..print lines LNE061T...
         SPACE 2
LS_DDNAME DS    CL8           JOBLIB/STEPLIB
         SPACE 1
LS_EPA   DS    XL(L'SWAEPAX)  SWA Extended Parm Area
SWAPARMS SWAREQ MF=L
         SPACE 2
         DS    0D             required hwd align
*                             BLDL return info
LS_BLDL_PFX DS    XL8         required for BLDL PREFIX
LS_BLDL_LST DS    0XL80
LS_BLDL_CNT DS    H           ..nbr of entries in list
LS_BLDL_LEN DS    H           ..maximum len of entry
         IHAPDS DSECT=NO      map PDS/PDSE directory entry
         SPACE 2
*                             CSV return info
LS_CSV_VALID DS    0F
         BITDEF $CSV_OUTLENGTH,         ..validity byte-0              +
               $CSV_OUTEPA,                                            +
               $CSV_OUTEPNM,                                           +
               $CSV_OUTMJNM,                                           +
               $CSV_OUTSP,                                             +
               $CSV_OUTATTR0,                                          +
               $CSV_OUTATTR1,                                          +
               $CSV_OUTATTR2
         BITDEF $CSV_OUTLOADPT,         ..validity byte-1              +
               $CSV_OUTPDATA,                                          +
               $CSV_OUTPID,                                            +
               $CSV_OUTEPTKN,                                          +
               $CSV_OUTXLST,                                           +
               $CSV_OUTDIAG,                                           +
               $CSV_OUTRTID,                                           +
               $CSV_NULL1
         BITDEF $CSV_OUTEPA64,          ..validity byte-2              +
               $CSV_OUTLOADPT64,                                       +
               $CSV_OUTLENGTH64,                                       +
               $CSV_OUTXTLST64,                                        +
               $CSV_OUTXATTR1,                                         +
               $CSV_OUTPATHNAME,                                       +
               $CSV_OUTDSKEY
         BITDEF $CSV_NULL3              ..validity byte-3
         DS    0F
LS_CSV_ATTR  DS    0XL3       ..load module attribute byte 0:2
LS_CSV_ATTR1 DS    XL1        ....load module attribute byte 0
LS_CSV_ATTR2 DS    XL1        ....load module attribute byte 1
LS_CSV_ATTR3 DS    XL1        ....load module attribute byte 2
         DS    XL1
LS_CSV_LOADER DS    CL4       ..loaded by PID
*                             ....UNK  - unknown provider
*                             ....LPA  - link pack area
*                             ....PGMF - program fetch
*                             ....LLAF - library look-aside facility
*                             ....AOSL - AOS loader
*                             ....JPA  - job pack area
LS_CSV_PDATA DS    XL16       ..load module user information
LS_CSV_POBJLEN DS    F        ..pgm obj length
LS_CSV_POBJLPA DS    A        ..pgm obj load point addr
LS_CSV_POBJEPA DS    A        ..pgm obj entry point addr
         SPACE 2
         CSVQUERY PLISTVER=MAX,                                        +
               MF=(L,CSVQRYWK)
         SPACE 2
LS_@LP   DS    A              addr load point
LS_@EP   DS    A              addr entry point
LS_@LB   DS    A              addr last byte
LS_SIZE  DS    F              size of load module | pgmobj
LS_SLEN  DS    F              scan length (@LB - @EP + 1)
LS_@PPA1 DS    A              addr LE PPA1
LS_@PPA2 DS    A              addr LE PPA2
LS_@TS   DS    A              addr time stamp
LS_@CPSB DS    A              addr COBOL Program Signature bytes
         SPACE 1
LS_@EPNAME DS    A            addr of entry point len & name
LS_EPNAME DS   H,CL255        len, entry point name
         SPACE 1
         DS    0F
         BITDEF $LANG_OTHR,                                            +
               $LANG_ASM,                                              +
               $LANG_COBOLVS,                                          +
               $LANG_COBOLII,                                          +
               $CICS_ASM,                                              +
               $CICS_COBOL,                                            +
               $CICS_LE,                                               +
               $CICS_PLI,                                              +
               $CICS_EXCI,                                             +
               $LEENTRY_STD,                                           +
               $LEENTRY_FASTLINK,                                      +
               $LEENTRY_OPLINK,                                        +
               $LEENTRY_CEESTART,                                      +
               $LEENTRY_XPLINK,                                        +
               $LEENTRY_C370,                                          +
               $LEPPA2_OLD_C_CPP,                                      +
               $LEPPA2_STD,                                            +
               $LEPPA2_FASTLINK,                                       +
               $LEPPA2_OPLINK,                                         +
               $LEPPA2_XPLINK,                                         +
               $LELANG_NA,                                             +
               $LELANG_CEL,                                            +
               $LELANG_C370,                                           +
               $LELANG_C_CPP,                                          +
               $LELANG_COBOLV5,                                        +
               $LELANG_COBOL,                                          +
               $LELANG_DEBUGGER,                                       +
               $LELANG_VSFORT,                                         +
               $LELANG_DCE,                                            +
               $LELANG_PLI,                                            +
               $LELANG_VAPLI,                                          +
               $LELANG_SOCKETS,                                        +
               $LELANG_ASM
         SPACE 2
         DS    0D
* --------------------------------------------------------- *
*  1. LE initial code points to PPA1
*  2. PPA1 points to PPA2
*  3. PPA2 points to timestamp
*     COBOL V3 & V4
*       x'00' 00 - timestamp 20-bytes: YYYYMMDDHHMMSSVVRRMM
*       x'14' 20 - ccsid H 2-bytes
*       x'16' 22 - 2-bytes
*       x'18' 24 - SIB 28:29 2-bytes
*       x'1A' 26 - year window H 2-bytes
*       x'1C' 28 - SIB 1:23 23-bytes
*       x'33' 51 - signature level 1-byte
*       x'34' 52 - nbr of Data Division stmts F 4-bytes
*       x'38' 56 - nbr of Procedure Division stmts F 4-bytes
*       x'3C' 60 - SIB 24:27 4-bytes
*       x'40' 64 - LVLINFO C 4-bytes
*     COBOL V5
*       x'00' 00 - timestamp 20-bytes: YYYYMMDDHHMMSSVVRRMM
*       x'14' 20 - length of SIB H 2-bytes (48)
*         x'16' 22 - ccsid H 2-bytes
*         x'18' 24 - arch level 1-byte
*         x'19' 25 - opt level 1-byte
*         x'1A' 26 - SIB 28:29 2-bytes
*         x'1C' 28 - 2-bytes
*         x'1E' 30 - SIB 1:23 23-bytes
*         x'35' 53 - signature level 1-byte
*         x'36' 54 - nbr of Data Division stmts F 4-bytes
*         x'3A' 58 - nbr of Procedure Division stmts F 4-bytes
*         x'3E' 62 - SIB 24:27 4-bytes
*       x'42' 66 - LVLINFO C 4-bytes
*     COBOL V6
*       x'00' 00 - timestamp 20-bytes: YYYYMMDDHHMMSSVVRRMM
*       x'14' 20 - length of SIB H 2-bytes (48)
*         x'16' 22 - ccsid H 2-bytes
*         x'18' 24 - arch level 1-byte
*         x'19' 25 - opt level 1-byte
*         x'1A' 26 - SIB 28:29 2-bytes
*         x'1C' 28 - SIB 30:31 2-bytes
*         x'1E' 30 - SIB 1:23 23-bytes
*         x'35' 53 - signature level 1-byte
*         x'36' 54 - nbr of Data Division stmts F 4-bytes
*         x'3A' 58 - nbr of Procedure Division stmts F 4-bytes
*         x'3E' 62 - SIB 24:27 4-bytes
*       x'42' 66 - build level C 8-bytes
*
* --------------------------------------------------------- *
         SPACE 1
LS_PSI_BINF DS    CL8         build/level info
LS_PSI_DDS# DS    F           DATA DIVISION statement count
LS_PSI_PDS# DS    F           PROCEDURE DIVISION statement count
LS_PSI_LEN  DS    H           COBOL Signature byte length
LS_PSI_CDPG DS    H           CCSID - CP(nnnn)  codepage
LS_PSI_ARCH DS    H           ARCH(nn)
LS_PSI_OPT  DS    H           OPT(n)
LS_PSI_LVL  DS    H           COBOL SIGNATURE level
            DS    H
LS_PSI_SIB  DS    0XL31       COBOL Signature bytes 1:31
LS_PSI_SIB1 DS    XL23        ..1:23
LS_PSI_SIB2 DS    XL4         ..24:27
LS_PSI_SIB3 DS    XL2         ..28:29
LS_PSI_SIB4 DS    XL2         ..30:31
         SPACE 2
         AS1MUTSA UDS=(MISC)
         ORG   VSTR
LNEAREA  DS    0XL122         Print line area (CEEMOUT)
LNELEN   DS    H
         SPACE 1
LNETXT   DS    CL120
         ORG   LNETXT
*                             ..every line
LNEPGM   DS    CL08           ..001:207 messaging Program name
         ORG   LNETXT+21      ..line 003+21
LNE003A  DS    CL8            ....TIOT JOB name
         ORG   LNETXT+40      ..line 003+40
LNE003B  DS    CL8            ....TIOT JOB step
         ORG   LNETXT+60      ..line 003+60
LNE003C  DS    CL8            ....TIOT PROC step
         ORG   LNETXT+13      ..line 005+13
LNE005A  DS    CL4            ....TIOTE  JOB|STEP
         ORG   LNETXT+16      ..line 006+16
LNE006A  DS    ZL2            ....TIOTE concatenation level
         ORG   LNETXT+19      ..line 006+19
LNE006B  DS    CL44           ....TIOTE library dsname
         ORG   LNETXT+20      ..line 008+20
LNE008A  DS    CL8            ....BLDL member name
         ORG   LNETXT+36      ..line 008+36
LNE008B  DS    ZL7            ....BLDL member size
         ORG   LNETXT+60      ..line 008+60
LNE008C  DS    CL8            ....BLDL original name
         ORG   LNETXT+33      ..line 010+33
LNE010A  DS    CL2            ....BLDL hex indicator byte
         ORG   LNETXT+22      ..line 011+22
LNE011A  DS    CL1            ....BLDL ALIAS Y|N
         ORG   LNETXT+26      ..line 019+26
LNE019A  DS    ZL2            ....BLDL directory entry location
         ORG   LNETXT+31      ..line 019+31
LNE019B  DS    CL23           ....BLDL directory entry text
         ORG   LNETXT+40      ..line 020+40
LNE020A  DS    ZL2            ....BLDL concatenation level
         ORG   LNETXT+33      ..line 030+33
LNE030A  DS    CL2            ....BLDL hex attribute byte
         ORG   LNETXT+21      ..line 031+21
LNE031A  DS    CL1            ....BLDL RENT Y|N
         ORG   LNETXT+21      ..line 032+21
LNE032A  DS    CL1            ....BLDL REUS Y|N
         ORG   LNETXT+21      ..line 033+21
LNE033A  DS    CL1            ....BLDL OVLY Y|N
         ORG   LNETXT+21      ..line 034+21
LNE034A  DS    CL1            ....BLDL TEST Y|N
         ORG   LNETXT+30      ..line 035+30
LNE035A  DS    CL1            ....BLDL only loadable Y|N
         ORG   LNETXT+24      ..line 036+24
LNE036A  DS    CL1            ....BLDL scatter Y|N
         ORG   LNETXT+27      ..line 037+27
LNE037A  DS    CL1            ....BLDL executable Y|N
         ORG   LNETXT+38      ..line 038+38
LNE038A  DS    CL1            ....BLDL 1 blk of TXT & no RLD Y|N
         ORG   LNETXT+33      ..line 040+33
LNE040A  DS    CL2            ....BLDL hex attribute byte 2
         ORG   LNETXT+27      ..line 041+27
LNE041A  DS    CL1            ....BLDL > lnkedt E Y|N
         ORG   LNETXT+42      ..line 042+42
LNE042A  DS    CL1            ....BLDL origin of 1st blk is 0 Y|N
         ORG   LNETXT+32      ..line 043+32
LNE043A  DS    CL1            ....BLDL EP addr > 0 Y|N
         ORG   LNETXT+23      ..line 044+23
LNE044A  DS    CL1            ....BLDL no RLD Y|N
         ORG   LNETXT+56      ..line 045+56
LNE045A  DS    CL1            ....BLDL can not reprocess Y|N
         ORG   LNETXT+46      ..line 046+46
LNE046A  DS    CL1            ....BLDL TESTRAN symbol cards Y|N
         ORG   LNETXT+25      ..line 047+25
LNE047A  DS    CL1            ....BLDL lnkedt F Y|N
         ORG   LNETXT+21      ..line 048+21
LNE048A  DS    CL1            ....BLDL REFR Y|N
         ORG   LNETXT+28      ..line 050+28
LNE050A  DS    CL2            ....BLDL flag byte 1
         ORG   LNETXT+27      ..line 051+27
LNE051A  DS    CL1            ....BLDL AOS lnkedt Y|N
         ORG   LNETXT+38      ..line 052+38
LNE052A  DS    CL1            ....BLDL large PGMOBJ extended Y|N
         ORG   LNETXT+29      ..line 053+29
LNE053A  DS    CL1            ....BLDL page aligned Y|N
         ORG   LNETXT+25      ..line 054+25
LNE054A  DS    CL1            ....BLDL SSI data Y|N
         ORG   LNETXT+34      ..line 055+34
LNE055A  DS    CL1            ....BLDL APF is valid Y|N
         ORG   LNETXT+23      ..line 056+23
LNE056A  DS    CL1            ....BLDL PGMOBJ Y|N
         ORG   LNETXT+33      ..line 057+33
LNE057A  DS    CL1            ....BLDL PGMOBJ is signed Y|N
         ORG   LNETXT+37      ..line 058+37
LNE058A  DS    CL1            ....BLDL extended attributes Y|N
         ORG   LNETXT+28      ..line 060+28
LNE060A  DS    CL2            ....BLDL flag byte 2
         ORG   LNETXT+49      ..line 061+49
LNE061A  DS    CL1            ....BLDL primary name gen by binder Y|N
         ORG   LNETXT+21      ..line 064+21
LNE064A  DS    CL3            ....BLDL RMODE(xxx)
         ORG   LNETXT+27      ..line 065+27
LNE065A  DS    CL3            ....BLDL ALIAS AMODE(xxx)
         ORG   LNETXT+21      ..line 066+21
LNE066A  DS    CL3            ....BLDL AMODE(xxx)
         ORG   LNETXT+28      ..line 070+28
LNE070A  DS    CL2            ....BLDL flag byte 3
         ORG   LNETXT+42      ..line 071+42
LNE071A  DS    CL1            ....BLDL PGMOBJ can not be LOADMOD Y|N
         ORG   LNETXT+24      ..line 072+24
LNE072A  DS    CL5            ....BLDL FETCHOPT(xxxxx)
         ORG   LNETXT+19      ..line 073+19                LKS
LNE073A  DS    CL8            ....SSI word                 LKS
         ORG   LNETXT+22      ..line 074+22                LKS
LNE074A  DS    ZL9            ....LPO size                 LKS
         ORG   LNETXT+48      ..line 074+48                LKS
LNE074B  DS    CL8            ....LPO EP addr              LKS
         ORG   LNETXT+34      ..line 075+34                LKS
LNE075A  DS    CL2            ....XATTR flag byte-0        LKS
         ORG   LNETXT+34      ..line 076+34                LKS
LNE076A  DS    CL2            ....XATTR flag byte-1        LKS
         ORG   LNETXT+26      ..line 077+26                LKS
LNE077A  DS    CL30           ....XATTR data               LKS
         ORG   LNETXT+21      ..line 080+21
LNE080A  DS    CL8            ....CSV program name
         ORG   LNETXT+39      ..line 080+39
LNE080B  DS    CL4            ....CSV program loader
         ORG   LNETXT+21      ..line 081+21
LNE081A  DS    CL32           ....CSV hex PDATA
         ORG   LNETXT+58      ..line 081+58
LNE081B  DS    CL16           ....CSV character PDATA
         ORG   LNETXT+23      ..line 082+23
LNE082A  DS    CL8            ....CSV LP addr
         ORG   LNETXT+45      ..line 082+45
LNE082B  DS    CL8            ....CSV EP addr
         ORG   LNETXT+62      ..line 082+62
LNE082C  DS    ZL7            ....CSV module size
         ORG   LNETXT+28      ..line 090+28
LNE090A  DS    CL2            ....CSV attribute byte 1
         ORG   LNETXT+37      ..line 091+37
LNE091A  DS    CL1            ....CSV end-of-module delete Y|N
         ORG   LNETXT+33      ..line 092+33
LNE092A  DS    CL1            ....CSV loaded to global Y|N
         ORG   LNETXT+21      ..line 093+21
LNE093A  DS    CL1            ....CSV RENT Y|N
         ORG   LNETXT+21      ..line 094+21
LNE094A  DS    CL1            ....CSV REUS Y|N
         ORG   LNETXT+34      ..line 095+34
LNE095A  DS    CL1            ....CSV not loadable only Y|N
         ORG   LNETXT+21      ..line 096+21
LNE096A  DS    CL1            ....CSV OVLY Y|N
         ORG   LNETXT+22      ..line 097+22
LNE097A  DS    CL1            ....CSV ALIAS Y|N
         ORG   LNETXT+28      ..line 100+28
LNE100A  DS    CL2            ....CSV attribute byte 2
         ORG   LNETXT+35      ..line 101+35
LNE101A  DS    CL1            ....CSV auth lib Y|N
         ORG   LNETXT+35      ..line 102+35
LNE102A  DS    CL1            ....CSV auth pgm Y|N
         ORG   LNETXT+26      ..line 103+26
LNE103A  DS    CL1            ....CSV AMODE ANY  Y|N
         ORG   LNETXT+25      ..line 104+25
LNE104A  DS    CL1            ....CSV AMODE 31  Y|N
         ORG   LNETXT+35      ..line 106+35
LNE106A  DS    CL1            ....CSV dynamic LPA Y|N
         ORG   LNETXT+31      ..line 107+31
LNE107A  DS    CL1            ....CSV page protected Y|N
         ORG   LNETXT+25      ..line 108+25
LNE108A  DS    CL1            ....CSV AMODE 64  Y|N
         ORG   LNETXT+28      ..line 110+28
LNE110A  DS    CL2            ....CSV attribute byte 3
         ORG   LNETXT+40      ..line 111+40
LNE111A  DS    CL1            ....CSV resident above-the-line Y|N
         ORG   LNETXT+29      ..line 112+29
LNE112A  DS    CL1            ....CSV resident JPA Y|N
         ORG   LNETXT+30      ..line 113+30
LNE113A  DS    CL1            ....CSV resident PLPA Y|N
         ORG   LNETXT+30      ..line 114+30
LNE114A  DS    CL1            ....CSV resident MLPA Y|N
         ORG   LNETXT+30      ..line 115+30
LNE115A  DS    CL1            ....CSV resident FLPA Y|N
         ORG   LNETXT+29      ..line 116+29
LNE116A  DS    CL1            ....CSV resident CSA Y|N
         ORG   LNETXT+17      ..line 119+17
LNE119A  DS    CL5            ....CDE major|minor
         ORG   LNETXT+21      ..line 120+21
LNE120A  DS    CL8            ....CDE program name
         ORG   LNETXT+42      ..line 120+42
LNE120B  DS    ZL5            ....CDE program use count
         ORG   LNETXT+23      ..line 121+23
LNE121A  DS    CL8            ....CDE EP addr
         ORG   LNETXT+40      ..line 121+40
LNE121B  DS    ZL3            ....CDE SPID
         ORG   LNETXT+33      ..line 130+33
LNE130A  DS    CL2            ....CDE indicator byte 0
         ORG   LNETXT+25      ..line 131+25
LNE131A  DS    CL1            ....CDE RMODE 31 Y|N
         ORG   LNETXT+25      ..line 132+25
LNE132A  DS    CL1            ....CDE RMODE 64 Y|N
         ORG   LNETXT+26      ..line 133+26
LNE133A  DS    CL1            ....CDE major CDE Y|N
         ORG   LNETXT+28      ..line 140+28
LNE140A  DS    CL2            ....CDE attribute byte 1
         ORG   LNETXT+30      ..line 141+30
LNE141A  DS    CL1            ....CDE delete module Y|N
         ORG   LNETXT+34      ..line 142+34
LNE142A  DS    CL1            ....CDE built by IDENTIFY Y|N
         ORG   LNETXT+37      ..line 143+37
LNE143A  DS    CL1            ....CDE loaded by DIRTY task Y|N
         ORG   LNETXT+36      ..line 144+36
LNE144A  DS    CL1            ....CDE extension exist Y|N
         ORG   LNETXT+21      ..line 145+21
LNE145A  DS    CL1            ....CDE LPDE Y|N
         ORG   LNETXT+33      ..line 146+33
LNE146A  DS    CL1            ....CDE loaded to global Y|N
         ORG   LNETXT+36      ..line 147+36
LNE147A  DS    CL1            ....CDE module contaminated Y|N
         ORG   LNETXT+39      ..line 148+39
LNE148A  DS    CL1            ....CDE RACF execution auth Y|N
         ORG   LNETXT+28      ..line 150+28
LNE150A  DS    CL2            ....CDE attribute byte 2
         ORG   LNETXT+33      ..line 151+33
LNE151A  DS    CL1            ....CDE loaded by system Y|N
         ORG   LNETXT+29      ..line 152+29
LNE152A  DS    CL1            ....CDE being loaded Y|N
         ORG   LNETXT+21      ..line 153+21
LNE153A  DS    CL1            ....CDE RENT Y|N
         ORG   LNETXT+21      ..line 154+21
LNE154A  DS    CL1            ....CDE REUS Y|N
         ORG   LNETXT+25      ..line 155+25
LNE155A  DS    CL1            ....CDE not REUS Y|N
         ORG   LNETXT+26      ..line 156+26
LNE156A  DS    CL1            ....CDE minor CDE Y|N
         ORG   LNETXT+29      ..line 157+29
LNE157A  DS    CL1            ....CDE resident JPA
         ORG   LNETXT+34      ..line 158+34
LNE158A  DS    CL1            ....CDE not loadable only Y|N
         ORG   LNETXT+28      ..line 160+28
LNE160A  DS    CL2            ....CDE attribute byte 3
         ORG   LNETXT+26      ..line 161+26
LNE161A  DS    CL1            ....CDE in SPID 0 Y|N
         ORG   LNETXT+32      ..line 162+32
LNE162A  DS    CL1            ....CDE module inactive Y|N
         ORG   LNETXT+34      ..line 163+34
LNE163A  DS    CL1            ....CDE extent list built Y|N
         ORG   LNETXT+49      ..line 164+49
LNE164A  DS    CL1            ....CDE minor EP addr has been relo Y|N
         ORG   LNETXT+26      ..line 165+26
LNE165A  DS    CL1            ....CDE RMODE ANY Y|N
         ORG   LNETXT+21      ..line 166+21
LNE166A  DS    CL1            ....CDE OVLY Y|N
         ORG   LNETXT+35      ..line 167+35
LNE167A  DS    CL1            ....CDE auth lib Y|N
         ORG   LNETXT+35      ..line 168+35
LNE168A  DS    CL1            ....CDE auth pgm Y|N
         ORG   LNETXT+28      ..line 170+28
LNE170A  DS    CL2            ....CDE attribute byte 4
         ORG   LNETXT+35      ..line 171+35
LNE171A  DS    CL1            ....CDE OMVS PATH provided Y|N
         ORG   LNETXT+28      ..line 172+28
LNE172A  DS    CL1            ....CDE PML running Y|N
         ORG   LNETXT+35      ..line 173+35
LNE173A  DS    CL1            ....CDE split RMODE PGMOBJ Y|N
         ORG   LNETXT+41      ..line 174+41
LNE174A  DS    CL1            ....CDE HFS system shared module Y|N
         ORG   LNETXT+37      ..line 176+37
LNE176A  DS    CL1            ....CDE resident dynamic LPA Y|N
         ORG   LNETXT+45      ..line 177+45
LNE177A  DS    CL1            ....CDE page protected on whole page Y|N
         ORG   LNETXT+28      ..line 180+28
LNE180A  DS    CL2            ....CDE attribute byte 5
         ORG   LNETXT+21      ..line 190+21
LNE190A  DS    CL8            ....LQD hex token id
         ORG   LNETXT+38      ..line 190+38
LNE190B  DS    ZL7            ....LQD program size
         ORG   LNETXT+23      ..line 191+23
LNE191A  DS    CL8            ....LQD LP addr
         ORG   LNETXT+45      ..line 191+45
LNE191B  DS    CL8            ....LQD EP addr
         ORG   LNETXT+21      ..line 192+21
LNE192A  DS    CL8            ....LQD program name
         ORG   LNETXT+36      ..line 194+36
LNE194A  DS    CL3            ....LMI CICS translator level
**       ORG   LNETXT+21      ..line 192+21
*LNE192A DS    CL8            ....LMI LE program name
         ORG   LNETXT+28      ..line 195+28
LNE195A  DS    CL8            ....LMI LE entry type
         ORG   LNETXT+37      ..line 196+37
LNE196A  DS    CL16           ....LMI LE conforming language
         ORG   LNETXT+31      ..line 197+31
LNE197A  DS    CL16           ....LMI LE control level
         ORG   LNETXT+27      ..line 198+27
LNE198A  DS    CL20           ....LMI LE timestamp
         ORG   LNETXT+41      ..line 199+41
LNE199A  DS    CL9            ....LM language
         ORG   LNETXT+44      ..line 201+44
LNE201A  DS    ZL7            ....COBOL DATA DIVISION stmt count
         ORG   LNETXT+49      ..line 202+49
LNE202A  DS    ZL7            ....COBOL PROCEDURE DIVISION stmt count
         ORG   LNETXT+30      ..line 203+30
LNE203A  DS    ZL4            ....CCSID / codepage
         ORG   LNETXT+35      ..line 204+35
LNE204A  DS    ZL2            ....ARCH(nn)
         ORG   LNETXT+38      ..line 205+38
LNE205A  DS    ZL1            ....OPT(n)
         ORG   LNETXT+36      ..line 206+36
LNE206A  DS    ZL2            ....COBOL Signature level
         ORG   LNETXT+37      ..line 207+37
LNE207A  DS    ZL2            ....COBOL Signature length
         ORG   LNETXT+31      ..line 208+31
LNE208A  DS    CL8            ....build level information
         SPACE 1
         ORG   LNETXT+15      ..line 210+15
LNE210A  DS    CL105
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
PGMPLIST DS    A              original R1 value
         SPACE 1
         AS1LAIDA UDS=ASU9LA02     expand request options
         AS1LAIDA UDS=ASU9LA03     expand source field
SRC_TXT  DS    CL25
         AS1LAIDA UDS=(ASU9LA04,ASU9LA06,ASU9LA07) expand result field
RSLT_TXT DS    CL105
         SPACE 1
FLUSHSW  DS    CL1
         SPACE 2
         AS1MUTSA UDS=(LTRACE)
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         EJECT
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ptr to ARCH SERVICES COMMAREA
@ACTION  DS    A              ptr to ACTION CODE
@COMAREA DS    A              ptr to PGMOBJ_INFO COMMAREA
@LEFDBK  DS    A              ptr to LE FEEDBACK AREA
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,MF=D
ASABHDR  AS1MASDS ADS=ASAB,MF=D
ASABXHDR AS1MASDS ADS=ASAB1,MF=D
         SPACE 2
PGMOBJ_INFO DSECT
         COPY  AS3OBJCA
         SPACE 2
* --------------------------------------------------------- *
* CONTROL BLOCKS FOR MVS
* --------------------------------------------------------- *
         SPACE 1
*        PREFIXED SAVE AREA (PSA)
**       IHAPSA  DSECT=YES    (,LIST=YES)
         SPACE 1
*        MVS COMMUNICATION VECTOR (CVT) required for SWAREQ
*                                       required for GETDSAB
         CVT   DSECT=YES      (,LIST=YES)
         SPACE 1
*        TASK CONTROL BLOCK (TCB)
         IKJTCB DSECT=YES     (,LIST=YES)
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
*        JES COMMUNICATION TABLE (JESCT)
*                                       required for SWAREQ
*                                       required for GETDSAB
         IEFJESCT
         POP   PRINT
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
*        DATA SET ASSOCIATION BLOCK (DSAB)
*                                       required for GETDSAB
         IHADSAB
         POP   PRINT
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        TASK INPUT/OUTPUT TABLE (TIOT/TIOTE)
TIOT     DSECT
         IEFTIOT1
         POP   PRINT
         SPACE 1
*        JOB FILE CONTROL BLOCK (JFCB)            176,X'B0'
JFCB     DSECT
         IEFJFCBN LIST=NO
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        EXTERMAL PARAMETER AREA FOR SCHEDULER WORK AREA
*                                       required for SWAREQ
         IEFZB505 LOCEPAX=YES
         POP   PRINT
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        SCHEDULER WORK AREA BLOCK ID DEFINITIONS
*                                       required for SWAREQ
         IEFQMIDS
         POP   PRINT
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        CONTENTS DIRECTORY ENTRY (CDE)
         IHACDE
         POP   PRINT
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
*        PRINT NOGEN
         SYSSTATE ARCHLVL=2   0=ESA 1=ESA/390 2=z/ARCH
         IEABRCX DEFINE
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         ST    R1,PGMPLIST
         SPACE 1
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 1
         USING CEECAA,RC
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT NOGEN
PPA      CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=01,                                                 +
               REL=01,                                                 +
               MOD=00,                                                 +
               DSA=YES
         POP   PRINT
         SPACE 2
         LTORG
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *              initialize dynamic storage
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear storage
         SPACE 1
*        initialize the Static Storage Area pointers
         SPACE 1
         LARL  R1,LNE061T
         ST    R1,LS_SSA1
         MVC   LEMDEST,F2
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* MAIN ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0100 EQU   *
         L     R1,PGMPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,MAIN8000    set default return
         MVC   PGMPARM1,@ASCA
         NC    PGMPARM1,=XL4'7FFFFFFF'
         TM    @ASCA,X'80'    Q. last parm
         JO    TXT0114A       A. yes, not enough parameters
         SPACE 1
         MVC   PGMPARM2,@ACTION
         NC    PGMPARM2,=XL4'7FFFFFFF'
         TM    @ACTION,X'80'  Q. last parm
         JO    TXT0114A       A. yes, not enough parameters
         SPACE 1
         MVC   PGMPARM3,@COMAREA
         NC    PGMPARM3,=XL4'7FFFFFFF'
         TM    @COMAREA,X'80' Q. last parm
         JO    MAIN0120       A. yes,
         SPACE 1
         MVC   PGMPARM4,@LEFDBK    save addr of LE FDBK
         NC    PGMPARM4,=XL4'7FFFFFFF'
         LARL  RE,MAIN0120    set default return
         TM    @LEFDBK,X'80'  Q. last parm
         JNO   TXT0113A       A. no, too many parameters
         DROP  R1
MAIN0120 EQU   *
         LARL  RE,MAIN8000    set default return
         ICM   RB,15,PGMPARM3 Q. valid addr
         JZ    TXT0105A       A. no,
         USING PGMOBJ_INFO,RB est addr to commarea
         SPACE 1
MAIN0150 AS2LTRCE
         L     RF,PGMPARM2    get action
         ICM   RF,15,0(RF)    Q. valid action
         JZ    TXT0101A       A. no,
         C     RF,F5          Q. valid action
         JH    TXT0101A       A. no,
         SLL   RF,2           multi by 4
         B     *+4(RF)
         J     TXT0101A       0 - INVALID
         J     MAIN1000       1 - SET
         J     MAIN2000       2 - QUERY
         J     MAIN3000       3 - PUSH
         J     MAIN4000       4 - POP
         J     MAIN5000       5 - LIST
         EJECT
* --------------------------------------------------------- *
* PROCESS ACTION(SET)
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE ,      ACTION(SET)
         LARL  RE,MAIN8000    set default return
         J     TXT0103A
         SPACE 1
MAIN1990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(QUERY)
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE ,      ACTION(QUERY)
         LARL  RF,MAIN8000    set default return
         BRAS  RE,TCBRTN      collect TCB information
         L     RB,PGMPARM3
         USING PGMOBJ_INFO,RB est addr to commarea
         SPACE 1
         BRAS  RE,TIOTRTN     collect TIOT information
         CLI   REQ_NAME,C' '  Q. valid request name
         JE    TXT0105A       A. no, error
         CLI   REQ_LIB,C'Y'   Q. request JOB/STEPLIB(s)
         JNE   MAIN2010       A. no, bypass
         BRAS  RE,TIOTERTN    collect JOB/STEPLIB(s) information
MAIN2010 EQU   *
         CLI   REQ_BLDL,C'Y'  Q. request for BLDL
         JNE   MAIN2012       A. no, bypass
         BRAS  RE,BLDLRTN     collect BLDL information
MAIN2012 EQU   *
         CLI   REQ_CSV,C'Y'   Q. request for CSV
         JNE   MAIN2014       A. no, bypass
         BRAS  RE,CSVRTN      collect CSV information
MAIN2014 EQU   *
         CLI   REQ_CDE,C'Y'   Q. request for CDE
         JNE   MAIN2016       A. no, bypass
         BRAS  RE,CDERTN      collect CDE information
MAIN2016 EQU   *
         CLI   REQ_LDQ,C'Y'   Q. request for LE CEEPQLD info
         JNE   MAIN2018       A. no, bypass
         LARL  RE,MAIN2018    set default return
         CLC   REQ_TOKEN,F0   Q. valid request token
         JE    TXT0108B       A. no, error
         BRAS  RE,LDQRTN      collect LE CEEPQLD info
         SPACE 1
MAIN2018 EQU   *
         CLI   REQ_SLM,C'Y'   Q. request for scan load module
         JNE   MAIN2020       A. no, bypass
         BRAS  RE,SLMRTN      collect loadmod/pgmobj info (LE stuff)
         SPACE 1
MAIN2020 EQU   *
         CLI   REQ_CPSI,C'Y'  Q. request for COBOL PSI
         JNE   MAIN2024       A. no, bypass
         JBITON ($LELANG_COBOL,$LELANG_COBOLV5),MAIN2022,SELECT=ANY
         J     MAIN2024
MAIN2022 EQU   *
         BRAS  RE,CBLRTN      collect COBOL SIB info
         SPACE 1
MAIN2024 EQU   *
         SPACE 1
MAIN2990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(PUSH)
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE ,      ACTION(PUSH)
         LARL  RE,MAIN8000    set default return
         J     TXT0103A
         SPACE 1
MAIN3990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(POP)
* --------------------------------------------------------- *
         SPACE 1
MAIN4000 AS2LTRCE ,      ACTION(PUSH)
         LARL  RE,MAIN8000    set default return
         J     TXT0103A
         SPACE 1
MAIN4990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* PROCESS ACTION(LIST)
* --------------------------------------------------------- *
         SPACE 1
MAIN5000 AS2LTRCE ,      ACTION(LIST)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE001L),LNE001T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
         BRAS  RE,PRTTIOT     print TIOT information
         CLI   REQ_LIB,C'Y'
         JNE   MAIN5010
         BRAS  RE,PRTLIB      print TIOTE information
MAIN5010 EQU   *
         CLI   REQ_BLDL,C'Y'
         JNE   MAIN5020
         BRAS  RE,PRTBLDL     print BLDL information
MAIN5020 EQU   *
         CLI   REQ_CSV,C'Y'
         JNE   MAIN5030
         BRAS  RE,PRTCSV      print CSV information
MAIN5030 EQU   *
         CLI   REQ_CDE,C'Y'
         JNE   MAIN5040
         BRAS  RE,PRTCDE      print CDE information
MAIN5040 EQU   *
         CLI   REQ_LDQ,C'Y'
         JNE   MAIN5050
         BRAS  RE,PRTLDQ      print LE LOAD QUERY information
MAIN5050 EQU   *
         CLI   REQ_SLM,C'Y'
         JNE   MAIN5060
         BRAS  RE,PRTSLM      print search loadmod information
MAIN5060 EQU   *
         CLI   REQ_CPSI,C'Y'
         JNE   MAIN5070
         SPACE 1
         BRAS  RE,PRTCBL      print COBOL Signature Info bytes
MAIN5070 EQU   *
         SPACE 1
MAIN5990 AS2LTRCE
         J     MAIN8000
         SPACE 2
* --------------------------------------------------------- *
* POST PROCESSING / PRE-TERMINATION
* --------------------------------------------------------- *
         SPACE 1
MAIN8000 AS2LTRCE
         SPACE 1
MAIN8990 AS2LTRCE
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINE(S)
* --------------------------------------------------------- *
         SPACE 1
* --------------------------------------------------------- *
* Retrieve TCB information
* --------------------------------------------------------- *
         SPACE 1
TCBRTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
**       USING PSA,R0         est addr to PSA
         SPACE 1
**       L     R6,PSATOLD     get addr of TCB
         L     R6,540(,0)     get addr of TCB
         ST    R6,LS_@TCB
**       DROP  R0
         USING TCB,R6         est addr to TCB
         SPACE 1
         L     R6,TCBJSTCB    get addr of JOBSTEP TCB
         ST    R6,LS_@JOBSTEPTCB
         SPACE 1
         L     R0,TCBTIO      get addr of TIOT
         ST    R0,LS_@TIOT
         L     R0,TCBJLB      get addr of JOBLIB DCB
         ST    R0,LS_@JOBLIBDCB
         ICM   R0,14,TCBJPQB  get addr of lst CDE for JPA
         SRL   R0,8
         ST    R0,LS_@JPALCDE
         SPACE 1
TCB0800  AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* Retrieve TIOT information
* TIOT size is defined in PARMLIB member ALLOCxx
* the default is 32K or 1635 data sets on a single volume,
* 129 data sets with the maximum of 59 volumes defined.
* --------------------------------------------------------- *
         SPACE 1
TIOTRTN  AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         L     R6,LS_@TIOT
         USING TIOT,R6
         SPACE 1
         MVI   TIOTINFO,C' '
         MVC   TIOTINFO+1(TIOTLEN-1),TIOTINFO
         SPACE 1
         MVC   TIOT_JOBNAME,TIOCNJOB    copy JOB name
         CLI   TIOCJSTN,C' '  Q. PROC JOB STEP name
         JE    TIOT0010       A. no, bypass
         MVC   TIOT_PROCSTEP,TIOCPSTN   copy PROC STEP name
         MVC   TIOT_JOBSTEP,TIOCJSTN    copy PROC JOB STEP name
         J     TIOT0020
         SPACE 1
TIOT0010 EQU   *
         MVC   TIOT_JOBSTEP,TIOCSTPN    copy non-PROC STEP name
         SPACE 1
TIOT0020 EQU   *
         LA    R6,TIOENTRY    get addr of TIOTE
         ST    R6,LS_@1stTIOTE
         DROP  R6
         SPACE 1
TIOT0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Retrieve TIOTE JOBLIB/STEPLIB information
* --------------------------------------------------------- *
         SPACE 1
TIOTERTN AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         MVC   LIB_CNT,H0
         MVC   LIB_TYPE,=CL4'STEP'
         MVC   LS_DDNAME,=CL8'STEPLIB'
         L     R2,LS_@1stTIOTE
         USING TIOENTRY,R2    est addr to TIOTE
         SPACE 1
         AS2DDSCN LS_DDNAME   Q. find ddname in TIOTE
         JNZ   TIOTE0100      A. no, not found
         ST    R2,LS_@TIOTE   save addr of TIOTE match
         DROP  R2
         BRAS  RE,LIBRTN      lookup STEPLIB DD
         OC    LIB_CNT,LIB_CNT
         JNZ   TIOTE0800
         SPACE 1
TIOTE0100 EQU   *
         MVC   LIB_TYPE,=CL4' JOB'
         MVC   LS_DDNAME,=CL8'JOBLIB'
         L     R2,LS_@1stTIOTE
         USING TIOENTRY,R2    est addr to TIOTE
         SPACE 1
         AS2DDSCN LS_DDNAME   Q. find ddname in TIOTE
         JNZ   TIOTE0200      A. no, not found
         ST    R2,LS_@TIOTE   save addr of TIOTE match
         DROP  R2
         BRAS  RE,LIBRTN      lookup JOBLIB DD
         OC    LIB_CNT,LIB_CNT
         JNZ   TIOTE0800
         SPACE 1
TIOTE0200 EQU   *
         MVI   LIB_TYPE,C' '
         MVC   LIB_TYPE+1(L'LIB_TYPE-1),LIB_TYPE
         SPACE 1
TIOTE0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Collect all of the JFCB JOBLIB/STEPLIB DSNAME(s)
* --------------------------------------------------------- *
         SPACE 1
LIBRTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         L     R2,LS_@TIOTE   get current TIOTE addr
         USING TIOENTRY,R2    est addr to TIOTE
         SPACE 1
LIB0200  EQU   *
         LA    R7,LS_EPA      get addr of Extended Parm Area
         ST    R7,LS_@SWAEPA
         USING ZB505,R7       est addr to EPA
         SPACE 1
         XC    SWAEPAX,SWAEPAX
         MVC   SWVA,TIOEJFCB  set SVA of JFCB into EPA
         DROP  R2
         MVC   RTNCD,F0
         MVC   RSNCD,F0
         SWAREQ UNAUTH=YES,                                            +
               FCODE=RL,           action code READ/LOCATE             +
               EPA=LS_@SWAEPA,                                         +
               MF=(E,SWAPARMS)
*        RF=0  successful
*           8  SVA is not valid
*           24 SVA doesn't correspond to virtual addr
*           28 ptr to EPAL not valid
         LARL  RE,LIB0800     set default return
         ST    RF,RTNCD
         LTR   RF,RF          Q. any errors
         JNZ   TXT0107B       A. yes, setup LE COND
         SPACE 1
         CLI   SWBLKID,SWJFCBID    Q. SYSTEM JFCB
         JNE   LIB0800             A. no, bypass
         L     R6,SWBLKPTR    get addr of SYSTEM JFCB
         DROP  R7
         LH    R0,LIB_CNT     get library count
         CHI   R0,DD#         Q. room to add to DSNAME vector
         JNL   TXT0115A       A. no, out of range bypass
         LR    R1,R0
         MHI   R1,L'LIB_DSN
         LA    R1,LIB_DSN(R1)
         USING INFMJFCB,R6    est addr to SYSTEM JFCB
         SPACE 1
         MVC   0(L'LIB_DSN,R1),JFCBDSNM copy DSNAME
         DROP  R6
         AHI   R0,1
         STH   R0,LIB_CNT
         SPACE 1
         L     R2,LS_@TIOTE   get current TIOTE addr
         USING TIOENTRY,R2    est addr to TIOTE
         AS2DDNXT ,           Q. find concatenation to DDNAME
         JNZ   LIB0800        A. no, not found
         ST    R2,LS_@TIOTE   save addr of TIOTE concatenation
         J     LIB0200
         SPACE 1
LIB0800  AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Retrieve Library DIR information
*   search order (default)
*     - JOBLIB or STEPLIB
*     - Link list libraries
*   search order
*     - SYSLIB when addr of open DCB is passed
* --------------------------------------------------------- *
         SPACE 1
BLDLRTN  AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         MVC   LS_BLDL_CNT,H1
         LA    R0,L'LS_BLDL_LST
         STH   R0,LS_BLDL_LEN
         MVC   PDS2NAME,REQ_NAME
         MVC   RTNCD,F0
         MVC   RSNCD,F0
         OC    REQ_@DCB,REQ_@DCB   Q. DCB addr passed
         JNZ   BLDL0010            A. yes, bypass
         BLDL  0,LS_BLDL_LST,NOCONNECT
         J     BLDL0012
         SPACE 1
BLDL0010 EQU   *
         BLDL  REQ_@DCB,LS_BLDL_LST,NOCONNECT
         SPACE 1
BLDL0012 EQU   *
*        RF=0  R0=0  successful
*           4     0  some entries not resolved
*           4     4  connect to UNIX failed because of RACF exec auth
*           8     0  permanent I/O error
*           8     4  insufficient virtual storage
*           8     8  invalid DEB
*           8     20 error returned by IGGSOOPN
*           8     24 connect to UNIX failed because of RACF user auth
*           8     20 START=value is invalid
*           8     32 START or STOP was specified with DCB addr 0
*           8     36 STOP=value is invalid
         ST    RF,RTNCD
         ST    R0,RSNCD
         C     RF,F8          Q. serious errors
         JNL   TXT0107C       A. yes, error
         MVC   BLDL_NAME,PDS2NAME
         MVC   BLDL_TTR,PDS2TTRP   1st block of text
         ICM   R0,8,PDS2CNCT       pick up concatenation nbr
         SRL   R0,24
         STH   R0,BLDL_CONCAT#     save DS concatenation nbr
         ICM   R0,8,PDS2LIBF       pick up dir entry loc
         SRL   R0,24
         STH   R0,BLDL_DIRLOC      save dir entry loc
         ICM   R0,8,PDS2INDC       pick up flag byte
         SRL   R0,31
         SLL   R0,7
         STC   R0,BLDL_IND1        save ALIAS flag
         MVI   BLDL_1ALIAS,C'N'
         JBITOFF ($BLDL_ALIAS),BLDL0014
         MVI   BLDL_1ALIAS,C'Y'
BLDL0014 EQU   *
         ICM   R0,8,PDS2INDC       pick up flag byte
         SLL   R0,1
         SRL   R0,30
         STH   R0,BLDL_TTR#        save nbr of TTR fields in user
         ICM   R0,8,PDS2INDC       pick up flag byte
         SLL   R0,3
         SRL   R0,27
         SLL   R0,1                * 2
         STH   R0,BLDL_UDATA_LEN   save len of user data
         MVC   BLDL_TTRT,PDS2TTRT
         MVC   BLDL_TTRN,PDS2TTRN
         ICM   R0,8,PDS2NL
         SRL   R0,24
         STH   R0,BLDL_NL
         MVC   BLDL_ATTR1,PDS2ATR1
         MVC   BLDL_ATTR1+1(8),=8C'N'
         JBITOFF ($BLDL_RENT),BLDL0020
         MVI   BLDL_1RENT,C'Y'
BLDL0020 EQU   *
         JBITOFF ($BLDL_REUS),BLDL0022
         MVI   BLDL_1REUS,C'Y'
BLDL0022 EQU   *
         JBITOFF ($BLDL_OVLY),BLDL0024
         MVI   BLDL_1OVLY,C'Y'
BLDL0024 EQU   *
         JBITOFF ($BLDL_TEST),BLDL0026
         MVI   BLDL_1TEST,C'Y'
BLDL0026 EQU   *
         JBITOFF ($BLDL_ONLYLD),BLDL0028
         MVI   BLDL_1ONLYLD,C'Y'
BLDL0028 EQU   *
         JBITOFF ($BLDL_SCTR),BLDL0030
         MVI   BLDL_1SCTR,C'Y'
BLDL0030 EQU   *
         JBITOFF ($BLDL_XEQ),BLDL0032
         MVI   BLDL_1XEQ,C'Y'
BLDL0032 EQU   *
         JBITOFF ($BLDL_BLK1),BLDL0034
         MVI   BLDL_1BLK1,C'Y'
BLDL0034 EQU   *
         MVC   BLDL_ATTR2,PDS2ATR2
         MVC   BLDL_ATTR2+1(8),=8C'N'
         JBITOFF ($BLDL_GTLNKEDTE),BLDL0040
         MVI   BLDL_2GTLNKEDTE,C'Y'
BLDL0040 EQU   *
         JBITOFF ($BLDL_ORIGIN0),BLDL0042
         MVI   BLDL_2ORIGIN0,C'Y'
BLDL0042 EQU   *
         JBITOFF ($BLDL_EP0),BLDL0044
         MVI   BLDL_2EP0,C'Y'
BLDL0044 EQU   *
         JBITOFF ($BLDL_NRLD),BLDL0046
         MVI   BLDL_2NRLD,C'Y'
BLDL0046 EQU   *
         JBITOFF ($BLDL_NREPROC),BLDL0048
         MVI   BLDL_2NREPROC,C'Y'
BLDL0048 EQU   *
         JBITOFF ($BLDL_TSTRAN),BLDL0050
         MVI   BLDL_2TSTRAN,C'Y'
BLDL0050 EQU   *
         JBITOFF ($BLDL_LNKEDTF),BLDL0052
         MVI   BLDL_2LNKEDTF,C'Y'
BLDL0052 EQU   *
         JBITOFF ($BLDL_REFR),BLDL0054
         MVI   BLDL_2REFR,C'Y'
BLDL0054 EQU   *
         ICM   R0,14,PDS2STOR
         SRL   R0,8
         ST    R0,BLDL_CMSTGL
         ICM   R0,12,PDS2FTBL
         SRL   R0,16
         STH   R0,BLDL_L1STBLK
         ICM   R0,14,PDS2EPA
         SRL   R0,8
         ST    R0,BLDL_EP@
         SPACE 1
         MVC   BLDL_FLAG1,PDS2FTB1
         MVC   BLDL_FLAG1+1(8),=8C'N'
         JBITOFF ($BLDL_AOSLNKEDT),BLDL0060
         MVI   BLDL_1AOSLNKEDT,C'Y'
BLDL0060 EQU   *
         JBITOFF ($BLDL_LRGPGMOBJEXT),BLDL0062
         MVI   BLDL_1LRGPGMOBJEXT,C'Y'
BLDL0062 EQU   *
         JBITOFF ($BLDL_PGALIGN),BLDL0064
         MVI   BLDL_1PGALIGN,C'Y'
BLDL0064 EQU   *
         JBITOFF ($BLDL_SSI),BLDL0066
         MVI   BLDL_1SSI,C'Y'
BLDL0066 EQU   *
         JBITOFF ($BLDL_APF),BLDL0068
         MVI   BLDL_1APF,C'Y'
BLDL0068 EQU   *
         JBITOFF ($BLDL_PGMOBJ),BLDL0070
         MVI   BLDL_1PGMOBJ,C'Y'
BLDL0070 EQU   *
         JBITOFF ($BLDL_PGMOBJSIGN),BLDL0072
         MVI   BLDL_1PGMOBJSIGN,C'Y'
BLDL0072 EQU   *
         JBITOFF ($BLDL_XATTR),BLDL0074
         MVI   BLDL_1XATTR,C'Y'
BLDL0074 EQU   *
         SPACE 1
         MVC   BLDL_FLAG2,PDS2FTB2
         MVI   BLDL_2ALTPRI,C'N'
         JBITOFF ($BLDL_ALTPRI),BLDL0080
         MVI   BLDL_2ALTPRI,C'Y'
BLDL0080 EQU   *
BLDL0082 EQU   *
BLDL0084 EQU   *
         MVC   BLDL_2RMODE,=CL3' 24'
         JBITOFF ($BLDL_RMODE),BLDL0086
         MVC   BLDL_2RMODE,=CL3'ANY'
BLDL0086 EQU   *
         JBITOFF ($BLDL_ALIAS),BLDL0088
         MVC   BLDL_2ALIASAMODE,=CL3'ANY'
         JBITON ($BLDL_ALIASAMODE1,$BLDL_ALIASAMODE2),BLDL0090
         MVC   BLDL_2ALIASAMODE,=CL3' 31'
         JBITON ($BLDL_ALIASAMODE1),BLDL0090
         MVC   BLDL_2ALIASAMODE,=CL3' 64'
         JBITON ($BLDL_ALIASAMODE2),BLDL0090
         MVC   BLDL_2ALIASAMODE,=CL3' 24'
         J     BLDL0090
         SPACE 1
BLDL0088 EQU   *
         JBITON ($BLDL_ALIAS),BLDL0090
         MVC   BLDL_2AMODE,=CL3'ANY'
         JBITON ($BLDL_MAINAMODE1,$BLDL_MAINAMODE2),BLDL0090
         MVC   BLDL_2AMODE,=CL3' 31'
         JBITON ($BLDL_MAINAMODE1),BLDL0090
         MVC   BLDL_2AMODE,=CL3' 64'
         JBITON ($BLDL_MAINAMODE2),BLDL0090
         MVC   BLDL_2AMODE,=CL3' 24'
**       J     BLDL0090
         SPACE 1
BLDL0090 EQU   *
         SPACE 1
         XC    BLDL_FLAG3,BLDL_FLAG3
         JBITOFF ($BLDL_PGMOBJ),BLDL0108
         MVC   BLDL_FLAG3,PDS2FTB3
         MVI   BLDL_3NOMIG,C'N'
         JBITOFF ($BLDL_NOMIG),BLDL0100
         MVI   BLDL_3NOMIG,C'Y'
BLDL0100 EQU   *
         MVC   BLDL_3FETCHOPT,=5C' '
         JBITON ($BLDL_PRIME),BLDL0102
         J     BLDL0104
         SPACE 1
BLDL0102 EQU   *
         MVC   BLDL_3FETCHOPT,=CL5'PRIME'
         J     BLDL0108
         SPACE 1
BLDL0104 EQU   *
         JBITON ($BLDL_PACK),BLDL0106
         J     BLDL0108
         SPACE 1
BLDL0106 EQU   *
         MVC   BLDL_3FETCHOPT,=CL5'PACK'
BLDL0108 EQU   *
         LA    R5,PDSBCEND    point to end of basic section
         JBITOFF ($BLDL_SCTR),BLDL0110
*        process optional area SCATTER storage
*        sorry we do not save any of this info
         AHI   R5,PDSS01LN
BLDL0110 EQU   *
         MVC   BLDL_ONAME,=8C' '
         JBITOFF ($BLDL_ALIAS),BLDL0120
*        process optional area ALIAS
         MVC   BLDL_ONAME,PDS2MNM-PDSS02(R5) save original name
         AHI   R5,PDSS02LN
BLDL0120 EQU   *
         XC    BLDL_SSI_WORD,BLDL_SSI_WORD
         JBITOFF ($BLDL_SSI),BLDL0130
*        process optional area SSI
*        align to halfword boundry
         AHI   R5,1           force carry if possible
         SRL   R5,1           drop right most bit
         SLL   R5,1           multiply by 2
         MVC   BLDL_SSI_WORD,PDSSSIWD-PDSS03(R5)  save SSI word
         AHI   R5,PDSS03LN
BLDL0130 EQU   *
         XC    BLDL_APF_AUTH,BLDL_APF_AUTH
         JBITOFF ($BLDL_APF),BLDL0140
*        process optional area APF
         ICM   R0,8,PDSAPFAC-PDSS04(R5)
         SRL   R0,24
         STH   R0,BLDL_APF_AUTH    save AUTH code
         AHI   R5,PDSS04LN
BLDL0140 EQU   *
         XC    BLDL_LPO_SIZE,BLDL_LPO_SIZE
         XC    BLDL_LPO_EPA,BLDL_LPO_EPA
         JBITOFF ($BLDL_LRGPGMOBJEXT),BLDL0150
*        process optional area large PgmObj
         ICM   R0,15,PDS2VSTR-PDSLPO(R5)     get PgmObj size
         ST    R0,BLDL_LPO_SIZE    save PgmObj size
         ICM   R0,15,PDS2MEPA-PDSLPO(R5)     get PgmObj EPA
         JBITOFF ($BLDL_ALIAS),BLDL0142
         ICM   R0,15,PDS2AEPA-PDSLPO(R5)     get ALIAS PgmObj EPA
BLDL0142 EQU   *
         ST    R0,BLDL_LPO_EPA     save PgmObj EPA
         AHI   R5,PDSLPOLN
BLDL0150 EQU   *
         MVI   BLDL_XATTR_FLAG0,X'00'
         MVI   BLDL_XATTR_FLAG1,X'00'
         XC    BLDL_XATTR_LEN,BLDL_XATTR_LEN
         XC    BLDL_XATTR_DATA,BLDL_XATTR_DATA
         JBITOFF ($BLDL_XATTR),BLDL0160
*        process optional area XATTR
******   add code here
BLDL0160 EQU   *
         SPACE 1
BLDL0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Retrieve program CSV information
* --------------------------------------------------------- *
         SPACE 1
CSVRTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         MVC   CSV_NAME,REQ_NAME
         MVC   RTNCD,F0
         MVC   RSNCD,F0
         CSVQUERY SEARCH=JPALPA,                                       +
               INEPNAME=CSV_NAME,                                      +
               OUTATTR1=LS_CSV_ATTR1,                                  +
               OUTATTR2=LS_CSV_ATTR2,                                  +
               OUTATTR3=LS_CSV_ATTR3,                                  +
               OUTPDATA=LS_CSV_PDATA,                                  +
               OUTPID=LS_CSV_LOADER,                                   +
               OUTVALID=LS_CSV_VALID,                                  +
               OUTLENGTH=LS_CSV_POBJLEN,                               +
               OUTLOADPT=LS_CSV_POBJLPA,                               +
               OUTEPA=LS_CSV_POBJEPA,                                  +
               MF=(E,CSVQRYWK)
*        RF=0  successful
*           4  module found, 1 or more fields not valid
*           8  module not found
*           12 cannot obtain the lock(s)
*           16 unexpected error
*           20 invalid request
         ST    RF,RTNCD
         C     RF,F8          Q. bad error
         JL    CSV0030        A. yes, bypass
         LARL  RE,CSV0800     set default return
         J     TXT0107D
         SPACE 1
CSV0030  EQU   *         LS_CSV_ATTR1
         JBITOFF ($CSV_OUTATTR0),CSV0050
         MVC   CSV_ATTR1,LS_CSV_ATTR1   save CSV attr byte 1
         MVC   CSV_ATTR1+1(8),=8C'N'
         SPACE 1
         JBITOFF ($CSV_EOMDEL),CSV0032  Q. end-of-module delete
         MVI   CSV_1EOMDEL,C'Y'         A. yes
CSV0032  EQU   *
         JBITOFF ($CSV_LOADED2GLOBAL),CSV0034     Q. load to global
         MVI   CSV_1LD2GLBL,C'Y'                  A. yes,
CSV0034  EQU   *
         JBITOFF ($CSV_RENT),CSV0036    Q. RENT
         MVI   CSV_1RENT,C'Y'           A. yes
CSV0036  EQU   *
         JBITOFF ($CSV_REUS),CSV0038    Q. REUS
         MVI   CSV_1REUS,C'Y'           A. yes
CSV0038  EQU   *
         JBITOFF ($CSV_NOTLOADABLEONLY),CSV0040   Q. not loadable only
         MVI   CSV_1NLDONLY,C'Y'                  A. yes
CSV0040  EQU   *
         JBITOFF ($CSV_OVERLAY),CSV0042 Q. overlay format
         MVI   CSV_1OVRLAY,C'Y'         A. yes
CSV0042  EQU   *
         JBITOFF ($CSV_ALIAS),CSV0044   Q. ALIAS
         MVI   CSV_1ALIAS,C'Y'          A. yes
CSV0044  EQU   *
CSV0046  EQU   *
         SPACE 1
CSV0050  EQU   *         LS_CSV_ATTR2
         JBITOFF ($CSV_OUTATTR1),CSV0070
         MVC   CSV_ATTR2,LS_CSV_ATTR2
         MVC   CSV_ATTR2+1(8),=8C'N'
         SPACE 1
         JBITOFF ($CSV_AUTHLIB),CSV0052 Q. authorized library
         MVI   CSV_2AUTHLIB,C'Y'        A. yes
CSV0052  EQU   *
         JBITOFF ($CSV_AUTHPGM),CSV0054 Q. authorized program
         MVI   CSV_2AUTHPGM,C'Y'        A. yes
CSV0054  EQU   *
         JBITOFF ($CSV_AMODEANY),CSV0056     Q. AMODE(ANY)
         MVI   CSV_2AMODEANY,C'Y'            A. yes
CSV0056  EQU   *
         JBITOFF ($CSV_AMODE31),CSV0058 Q. AMODE(31)
         MVI   CSV_2AMODE31,C'Y'        A. yes
CSV0058  EQU   *
CSV0060  EQU   *
         JBITOFF ($CSV_DYNLPA),CSV0062  Q. dynamic LPA module
         MVI   CSV_2DYNLPA,C'Y'         A. yes
CSV0062  EQU   *
         JBITOFF ($CSV_PAGEPROT),CSV0064     Q. page protected
         MVI   CSV_2PAGEPROT,C'Y'            A. yes
CSV0064  EQU   *
         JBITOFF ($CSV_AMODE64),CSV0068 Q. AMODE(64)
         MVI   CSV_2AMODE64,C'Y'        A. yes
CSV0068  EQU   *
         SPACE 1
CSV0070  EQU   *         LS_CSV_ATTR3
         JBITOFF ($CSV_OUTATTR2),CSV0090
         MVC   CSV_ATTR3,LS_CSV_ATTR3
         MVC   CSV_ATTR3+1(8),=8C'N'
         SPACE 1
         JBITOFF ($CSV_RESATL),CSV0072  Q. resident above-the-line
         MVI   CSV_3RESATL,C'Y'         A. yes
CSV0072  EQU   *
         JBITOFF ($CSV_RESJPA),CSV0074  Q. resident in JPA
         MVI   CSV_3RESJPA,C'Y'         A. yes
CSV0074  EQU   *
         JBITOFF ($CSV_RESPLPA),CSV0076 Q. resident in PLPA
         MVI   CSV_3RESPLPA,C'Y'        A. yes
CSV0076  EQU   *
         JBITOFF ($CSV_RESMLPA),CSV0078 Q. resident in MLPA
         MVI   CSV_3RESMLPA,C'Y'        A. yes
CSV0078  EQU   *
         JBITOFF ($CSV_RESFLPA),CSV0080 Q. resident in FLPA
         MVI   CSV_3RESFLPA,C'Y'        A. yes
CSV0080  EQU   *
         JBITOFF ($CSV_RESCSA),CSV0082  Q. resident in CSA
         MVI   CSV_3RESCSA,C'Y'         A. yes
CSV0082  EQU   *
CSV0084  EQU   *
CSV0086  EQU   *
         SPACE 1
CSV0090  EQU   *         LS_CSV_LOADER
         MVI   CSV_LOADER,C' '
         MVC   CSV_LOADER+1(L'CSV_LOADER-1),CSV_LOADER
         JBITOFF ($CSV_OUTPID),CSV0092  Q. CSV loader pid value
         MVC   CSV_LOADER,LS_CSV_LOADER A. yes
CSV0092  EQU   *
         SPACE 1
CSV0100  EQU   *         LS_CSV_PDATA
         MVI   CSV_PDATA,C' '
         MVC   CSV_PDATA+1(L'CSV_PDATA-1),CSV_PDATA
         JBITOFF ($CSV_OUTPDATA),CSV0102     Q. PDATA
         MVC   CSV_PDATA,LS_CSV_PDATA        A. yes
CSV0102  EQU   *
         SPACE 1
CSV0120  EQU   *         LS_CSV_POBJLEN
         MVC   LS_SIZE,F0
         MVC   CSV_POBJLEN,F0
         JBITOFF ($CSV_OUTLENGTH),CSV0130    Q. pgm obj len
         MVC   CSV_POBJLEN,LS_CSV_POBJLEN    A. yes
         MVC   LS_SIZE,LS_CSV_POBJLEN
         SPACE 1
CSV0130  EQU   *         LS_CSV_POBJLPA
         MVC   LS_@LP,F0
         MVC   CSV_POBJLPA,F0
         JBITOFF ($CSV_OUTLOADPT),CSV0140    Q. pgm obj load pt addr
         MVC   CSV_POBJLPA,LS_CSV_POBJLPA    A. yes
         MVC   LS_@LP,LS_CSV_POBJLPA
         SPACE 1
CSV0140  EQU   *         LS_CSV_POBJEPA
         MVC   LS_@EP,F0
         MVC   CSV_POBJEPA,F0
         JBITOFF ($CSV_OUTEPA),CSV0150       Q. pgm obj entry pt addr
         MVC   CSV_POBJEPA,LS_CSV_POBJEPA    A. yes
         MVC   LS_@EP,LS_CSV_POBJEPA
         NC    LS_@EP,=XL4'7FFFFFFF'
         SPACE 1
CSV0150  EQU   *
         SPACE 1
CSV0800  AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Retrieve CDE information
* --------------------------------------------------------- *
         SPACE 1
CDERTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         LARL  RE,CDE0800     set default return
         MVC   RTNCD,F4       not found
         MVC   RSNCD,F20      no JPAQ
         ICM   R6,15,LS_@JPALCDE   Q. get addr of JPAQ
         JZ    TXT0107F            A. no, error
         MVC   RSNCD,F16      not in JPAQ
         USING CDENTRY,R6     est addr to CDE entry
         SPACE 1
CDE0100  EQU   *
         CLC   REQ_NAME,CDNAME     Q. find matching entry
         JE    CDE0110             A. yes, go copy
         ICM   R6,15,CDCHAIN  Q. any more on the chain
         JNZ   CDE0100        A. yes, loop back
         J     TXT0107F       A. no, exit
         SPACE 1
CDE0110  EQU   *         CDNAME, CDENTPT
*        fill out the first vector entry (may be minor|major CDE)
         MVC   CDE1_NAME,CDNAME
         MVC   CDE1_EP@,CDENTPT
         MVC   CDE1_IND0+1(8),=8C'N'
         TM    CDE1_EP@,X'80' Q. AMODE 31
         JNO   CDE0112        A. no, bypass
         BITON $CDE1_AMODE31
         MVI   CDE1_0AMODE31,C'Y'
         J     CDE0114
         SPACE 1
CDE0112  EQU   *
         TM    CDE1_EP@+3,X'01'    Q. AMODE 64
         JNO   CDE0114             A. no, bypass
         BITON $CDE1_AMODE64
         MVI   CDE1_0AMODE64,C'Y'
         J     CDE0116
         SPACE 1
CDE0114  EQU   *
         JBITON ($CDE1_MINOR),CDE0116
         BITON $CDE1_MAJOR
         MVI   CDE1_0MAJOR,C'Y'
*        J     CDE0116
         SPACE 1
CDE0116  EQU   *         CDUSE, CDATTRB
         MVC   CDE1_USECNT,CDUSE
         MVC   CDE1_ATTR1,CDATTRB
         MVC   CDE1_ATTR1+1(8),=8C'N'
         JBITOFF ($CDE1_DELMOD),CDE0121
         MVI   CDE1_1DELMOD,C'Y'
CDE0121  EQU   *
         JBITOFF ($CDE1_IDENTIFY),CDE0122
         MVI   CDE1_1IDENTIFY,C'Y'
CDE0122  EQU   *
         JBITOFF ($CDE1_LDBYDIRTY),CDE0123
         MVI   CDE1_1LDBYDIRTY,C'Y'
CDE0123  EQU   *
         JBITOFF ($CDE1_EXT),CDE0124
         MVI   CDE1_1EXT,C'Y'
CDE0124  EQU   *
         JBITOFF ($CDE1_LPDE),CDE0125
         MVI   CDE1_1LPDE,C'Y'
CDE0125  EQU   *
         JBITOFF ($CDE1_GLBL),CDE0126
         MVI   CDE1_1GLBL,C'Y'
CDE0126  EQU   *
         JBITOFF ($CDE1_BAD),CDE0127
         MVI   CDE1_1BAD,C'Y'
CDE0127  EQU   *
         JBITOFF ($CDE1_EXECAUTH),CDE0128
         MVI   CDE1_1EXECAUTH,C'Y'
CDE0128  EQU   *         CDSP, CDATTR
         ICM   R0,8,CDSP
         SRL   R0,16
         STH   R0,CDE1_SPID
         MVC   CDE1_ATTR2+1(8),=8C'N'
         MVC   CDE1_ATTR2,CDATTR
         JBITOFF ($CDE1_LDBYSYS),CDE0131
         MVI   CDE1_2LDBYSYS,C'Y'
CDE0131  EQU   *
         JBITOFF ($CDE1_BEINGLD),CDE0132
         MVI   CDE1_2BEINGLD,C'Y'
CDE0132  EQU   *
         JBITOFF ($CDE1_RENT),CDE0133
         MVI   CDE1_2RENT,C'Y'
CDE0133  EQU   *
         JBITOFF ($CDE1_REUS),CDE0134
         MVI   CDE1_2REUS,C'Y'
CDE0134  EQU   *
         JBITOFF ($CDE1_NREUS),CDE0135
         MVI   CDE1_2NREUS,C'Y'
CDE0135  EQU   *
         JBITOFF ($CDE1_MINOR),CDE0136
         MVI   CDE1_2MINOR,C'Y'
CDE0136  EQU   *
         JBITOFF ($CDE1_JPA),CDE0137
         MVI   CDE1_2JPA,C'Y'
CDE0137  EQU   *
         JBITOFF ($CDE1_NOTLOADABLEONLY),CDE0138
         MVI   CDE1_2NLDONLY,C'Y'
CDE0138  EQU   *         CDATTR2
         MVC   CDE1_ATTR3+1(8),=8C'N'
         MVC   CDE1_ATTR3,CDATTR2
         JBITOFF ($CDE1_LDSPID0),CDE0141
         MVI   CDE1_3LDSPID0,C'Y'
CDE0141  EQU   *
         JBITOFF ($CDE1_INACTIVE),CDE0142
         MVI   CDE1_3INACTIVE,C'Y'
CDE0142  EQU   *
         JBITOFF ($CDE1_XLBILT),CDE0143
         MVI   CDE1_3XLBILT,C'Y'
CDE0143  EQU   *
         JBITOFF ($CDE1_MEPREL),CDE0144
         MVI   CDE1_3MEPREL,C'Y'
CDE0144  EQU   *
         JBITOFF ($CDE1_RMODEANY),CDE0145
         MVI   CDE1_3RMODEANY,C'Y'
CDE0145  EQU   *
         JBITOFF ($CDE1_OVRLY),CDE0146
         MVI   CDE1_3OVRLY,C'Y'
CDE0146  EQU   *
         JBITOFF ($CDE1_AUTHLIB),CDE0147
         MVI   CDE1_3AUTHLIB,C'Y'
CDE0147  EQU   *
         JBITOFF ($CDE1_AUTHPGM),CDE0148
         MVI   CDE1_3AUTHPGM,C'Y'
CDE0148  EQU   *         CDATTR3
         MVC   CDE1_ATTR4+1(8),=8C'N'
         MVC   CDE1_ATTR4,CDATTR3
         JBITOFF ($CDE1_PATHNME),CDE0151
         MVI   CDE1_4PATHNME,C'Y'
CDE0151  EQU   *
         JBITOFF ($CDE1_PML),CDE0152
         MVI   CDE1_4PML,C'Y'
CDE0152  EQU   *
         JBITOFF ($CDE1_SPLTRMODE),CDE0153
         MVI   CDE1_4SPLTRMODE,C'Y'
CDE0153  EQU   *
         JBITOFF ($CDE1_HFSSSLM),CDE0154
         MVI   CDE1_4HFSSSLM,C'Y'
CDE0154  EQU   *
CDE0155  EQU   *
         JBITOFF ($CDE1_LDDYNLPA),CDE0156
         MVI   CDE1_4LDDYNLPA,C'Y'
CDE0156  EQU   *
         JBITOFF ($CDE1_PGPROT),CDE0157
         MVI   CDE1_4PGPROT,C'Y'
CDE0157  EQU   *
CDE0158  EQU   *         CDATTR4
         MVC   CDE1_ATTR5+1(8),=8C'N'
         MVC   CDE1_ATTR5,CDATTR4
CDE0161  EQU   *
CDE0162  EQU   *
CDE0163  EQU   *
CDE0164  EQU   *
CDE0165  EQU   *
CDE0166  EQU   *
CDE0167  EQU   *
CDE0168  EQU   *
         MVC   CDE_NTRY_CNT,H1
         JBITOFF ($CDE1_MINOR),CDE0800
         L     R6,CDXLMJP     point to major CDE
CDE0210  EQU   *
*        fill out the second vector entry (major CDE)
         MVC   CDE2_NAME,CDNAME
         MVC   CDE2_EP@,CDENTPT
         MVC   CDE2_IND0+1(8),=8C'N'
         TM    CDE2_EP@,X'80' Q. AMODE 31
         JNO   CDE0212        A. no, bypass
         BITON $CDE2_AMODE31
         MVI   CDE2_0AMODE31,C'Y'
         J     CDE0214
         SPACE 1
CDE0212  EQU   *
         TM    CDE2_EP@+3,X'01'    Q. AMODE 64
         JNO   CDE0214             A. no, bypass
         BITON $CDE2_AMODE64
         MVI   CDE2_0AMODE64,C'Y'
CDE0214  EQU   *
         JBITOFF ($CDE2_MINOR),CDE0216
         BITON $CDE2_MAJOR
         MVI   CDE2_0MAJOR,C'Y'
*        J     CDE0216
         SPACE 1
CDE0216  EQU   *         CDUSE, CDATTRB
         MVC   CDE2_USECNT,CDUSE
         MVC   CDE2_ATTR1+1(8),=8C'N'
         MVC   CDE2_ATTR1,CDATTRB
         JBITOFF ($CDE2_DELMOD),CDE0221
         MVI   CDE2_1DELMOD,C'Y'
CDE0221  EQU   *
         JBITOFF ($CDE2_IDENTIFY),CDE0222
         MVI   CDE2_1IDENTIFY,C'Y'
CDE0222  EQU   *
         JBITOFF ($CDE2_LDBYDIRTY),CDE0223
         MVI   CDE2_1LDBYDIRTY,C'Y'
CDE0223  EQU   *
         JBITOFF ($CDE2_EXT),CDE0224
         MVI   CDE2_1EXT,C'Y'
CDE0224  EQU   *
         JBITOFF ($CDE2_LPDE),CDE0225
         MVI   CDE2_1LPDE,C'Y'
CDE0225  EQU   *
         JBITOFF ($CDE2_GLBL),CDE0226
         MVI   CDE2_1GLBL,C'Y'
CDE0226  EQU   *
         JBITOFF ($CDE2_BAD),CDE0227
         MVI   CDE2_1BAD,C'Y'
CDE0227  EQU   *
         JBITOFF ($CDE2_EXECAUTH),CDE0228
         MVI   CDE2_1EXECAUTH,C'Y'
CDE0228  EQU   *         CDSP, CDATTR
         ICM   R0,8,CDSP
         SRL   R0,16
         STH   R0,CDE2_SPID
         MVC   CDE2_ATTR2+1(8),=8C'N'
         MVC   CDE2_ATTR2,CDATTR
         JBITOFF ($CDE2_LDBYSYS),CDE0231
         MVI   CDE2_2LDBYSYS,C'Y'
CDE0231  EQU   *
         JBITOFF ($CDE2_BEINGLD),CDE0232
         MVI   CDE2_2BEINGLD,C'Y'
CDE0232  EQU   *
         JBITOFF ($CDE2_RENT),CDE0233
         MVI   CDE2_2RENT,C'Y'
CDE0233  EQU   *
         JBITOFF ($CDE2_REUS),CDE0234
         MVI   CDE2_2REUS,C'Y'
CDE0234  EQU   *
         JBITOFF ($CDE2_NREUS),CDE0235
         MVI   CDE2_2NREUS,C'Y'
CDE0235  EQU   *
         JBITOFF ($CDE2_MINOR),CDE0236
         MVI   CDE2_2MINOR,C'Y'
CDE0236  EQU   *
         JBITOFF ($CDE2_JPA),CDE0237
         MVI   CDE2_2JPA,C'Y'
CDE0237  EQU   *
         JBITOFF ($CDE2_NOTLOADABLEONLY),CDE0238
         MVI   CDE2_2NLDONLY,C'Y'
CDE0238  EQU   *         CDATTR2
         MVC   CDE2_ATTR3+1(8),=8C'N'
         MVC   CDE2_ATTR3,CDATTR2
         JBITOFF ($CDE2_LDSPID0),CDE0241
         MVI   CDE2_3LDSPID0,C'Y'
CDE0241  EQU   *
         JBITOFF ($CDE2_INACTIVE),CDE0242
         MVI   CDE2_3INACTIVE,C'Y'
CDE0242  EQU   *
         JBITOFF ($CDE2_XLBILT),CDE0243
         MVI   CDE2_3XLBILT,C'Y'
CDE0243  EQU   *
         JBITOFF ($CDE2_MEPREL),CDE0244
         MVI   CDE2_3MEPREL,C'Y'
CDE0244  EQU   *
         JBITOFF ($CDE2_RMODEANY),CDE0245
         MVI   CDE2_3RMODEANY,C'Y'
CDE0245  EQU   *
         JBITOFF ($CDE2_OVRLY),CDE0246
         MVI   CDE2_3OVRLY,C'Y'
CDE0246  EQU   *
         JBITOFF ($CDE2_AUTHLIB),CDE0247
         MVI   CDE2_3AUTHLIB,C'Y'
CDE0247  EQU   *
         JBITOFF ($CDE2_AUTHPGM),CDE0248
         MVI   CDE2_3AUTHPGM,C'Y'
CDE0248  EQU   *         CDATTR3
         MVC   CDE2_ATTR4+1(8),=8C'N'
         MVC   CDE2_ATTR4,CDATTR3
         JBITOFF ($CDE2_PATHNME),CDE0251
         MVI   CDE2_4PATHNME,C'Y'
CDE0251  EQU   *
         JBITOFF ($CDE2_PML),CDE0252
         MVI   CDE2_4PML,C'Y'
CDE0252  EQU   *
         JBITOFF ($CDE2_SPLTRMODE),CDE0253
         MVI   CDE2_4SPLTRMODE,C'Y'
CDE0253  EQU   *
         JBITOFF ($CDE2_HFSSSLM),CDE0254
         MVI   CDE2_4HFSSSLM,C'Y'
CDE0254  EQU   *
CDE0255  EQU   *
         JBITOFF ($CDE2_LDDYNLPA),CDE0256
         MVI   CDE2_4LDDYNLPA,C'Y'
CDE0256  EQU   *
         JBITOFF ($CDE2_PGPROT),CDE0257
         MVI   CDE2_4PGPROT,C'Y'
CDE0257  EQU   *
CDE0258  EQU   *         CDATTR4
         MVC   CDE2_ATTR5+1(8),=8C'N'
         MVC   CDE2_ATTR5,CDATTR4
CDE0261  EQU   *
CDE0262  EQU   *
CDE0263  EQU   *
CDE0264  EQU   *
CDE0265  EQU   *
CDE0266  EQU   *
CDE0267  EQU   *
CDE0268  EQU   *
         MVC   CDE_NTRY_CNT,H2
         SPACE 1
CDE0800  AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R6
         SPACE 2
* --------------------------------------------------------- *
* Retrieve LE LOAD QUERY information
* --------------------------------------------------------- *
         SPACE 1
LDQRTN   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         MVC   RTNCD,F4       not found
         MVC   RSNCD,F16      not loaded by LE
         LA    R0,L'LDQ_NAME
         ST    R0,LDQ_NLEN
         MVI   LDQ_NAME,C' '
         MVC   LDQ_NAME+1(L'LDQ_NAME-1),LDQ_NAME
         MVC   LDQ_TOKEN,REQ_TOKEN
         AS2PLIST (LDQ_TOKEN,LDQ_NLEN,LDQ_NAME,                        +
               LDQ_POBJLPA,LDQ_POBJEPA,LDQ_POBJLEN,                    +
               LEFC),VL,                                               +
               MF=(E,PLIST)
         L     RF,CEECAACELV
         L     RF,#CEEPQLD(,RF)
*        CALL  CEEPQLD
         BASR  RE,RF     link to
         LARL  RE,LDQ0800          set default return
         CLC   LECTOK,CEE000       Q. any errors
         JNE   TXT0107E            A. yes, error
         MVC   LS_@LP,LDQ_POBJLPA
         MVC   LS_@EP,LDQ_POBJEPA
         NC    LS_@EP,=XL4'7FFFFFFF'
         MVC   LS_SIZE,LDQ_POBJLEN
         SPACE 1
LDQ0800  AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Scan load module | program object information
* try and determine type, language, etc.
* --------------------------------------------------------- *
         SPACE 1
SLMRTN   AS2LTRCE ,
         AS2RESTK PUSH
         SPACE 1
SLM0200  EQU   *
         MVI   LM_CICS_XLVL,C' '
         MVC   LM_CICS_XLVL+1(L'LM_CICS_XLVL-1),LM_CICS_XLVL
         MVI   LMLE_NAME,C' '
         MVC   LMLE_NAME+1(L'LMLE_NAME-1),LMLE_NAME
         MVI   LMLE_ENTRY,C' '
         MVC   LMLE_ENTRY+1(L'LMLE_ENTRY-1),LMLE_ENTRY
         MVI   LMLE_LANG,C' '
         MVC   LMLE_LANG+1(L'LMLE_LANG-1),LMLE_LANG
         MVI   LMLE_CTLLVL,C' '
         MVC   LMLE_CTLLVL+1(L'LMLE_CTLLVL-1),LMLE_CTLLVL
         MVI   LMLE_TSTAMP,C' '
         MVC   LMLE_TSTAMP+1(L'LMLE_TSTAMP-1),LMLE_TSTAMP
         MVI   LM_LANG,C' '
         MVC   LM_LANG+1(L'LM_LANG-1),LM_LANG
         MVI   LS_EPNAME,C' '
         MVC   LS_EPNAME+1(L'LS_EPNAME-1),LS_EPNAME
         SPACE 1
         LARL  RE,SLM0800     set default return
         ICM   R0,15,LS_@LP   Q. load point addr > 0
         JZ    TXT0108C       A. no, error
         ICM   R0,15,LS_@EP   Q. entry point addr > 0
         JZ    TXT0108D       A. no, error
         ICM   R0,15,LS_SIZE  Q. module size > 0
         JZ    TXT0108E       A. no, error
         SPACE 1
         L     R0,LS_@LP      compute addr of
         A     R0,LS_SIZE     ..last byte
         AHI   R0,-1          ..of module
         ST    R0,LS_@LB      save addr of last byte of module
         S     R0,LS_@EP      compute scan length
         ST    R0,LS_SLEN     save scan length
         SPACE 1
*                        check to see if C/370 entry
         L     R1,LS_@EP
         CLC   LS_SLEN,=A(30+L'C370EYE) Q. enough space to look
         JL    SLM0210                  A. no, bypass
         CLC   C370EYE,4(R1)  Q. C/370 entry code
         JNE   SLM0210        A. no, bypass
         BITON $LEENTRY_C370,$LELANG_C370
         MVC   LMLE_LANG,=CL16'C/370'
         SPACE 1
         LA    R2,4(,R1)      point to PPA1
         ST    R2,LS_@PPA1    save addr of PPA1
         L     R3,4(,R2)      point to PPA2
         ST    R3,LS_@PPA2    save addr of PPA2
         SPACE 1
         ICM   R0,8,0(R2)     Q. get offset to len & epname
         JZ    SLM0400        A. no name, bypass LE compliant
         SRL   R0,24
         AR    R0,R1
         ST    R0,LS_@EPNAME  save addr of entry point name
         J     SLM0280        go copy EP name
         SPACE 1
SLM0210  EQU   *         check to see if LE STD entry
         L     R1,LS_@EP
         CLC   LS_SLEN,=A(30+L'LE3EYE)  Q. enough space to look
         JL    SLM0220                  A. no, bypass
         CLC   LE3EYE,4(R1)   Q. LE STD entry
         JNE   SLM0220        A. no, bypass
         BITON $LEENTRY_STD
         SPACE 1
         L     R2,12(,R1)     point to PPA1
         AR    R2,R1
         ST    R2,LS_@PPA1    save addr of PPA1
         CLI   1(R2),X'CE'    Q. still look like LE STD entry
         JNE   SLM0400        A. no, bypass LE compliant
         MVC   LMLE_ENTRY,=CL8'Standard'
         L     R3,4(,R2)      point to PPA2
         ST    R3,LS_@PPA2    save addr of PPA2
         SPACE 1
         ICM   R0,8,0(R2)     Q. get offset to len & epname
         JZ    SLM0400        A. no name, bypass LE compliant
         SRL   R0,24
         AR    R0,R2          add in addr of PPA1
         ST    R0,LS_@EPNAME  save addr of entry point name
         J     SLM0280        go to copy EP name
         SPACE 1
SLM0220  EQU   *         check to see if LE FASTLINK or OPLINK
*                        or IEEE entry
         L     R1,LS_@EP
         CLC   LS_SLEN,=A(30+L'LE3EYE1) Q. enough space to look
         JL    SLM0230                  A. no, bypass
         CLC   LE3EYE1,4(R1)  Q. LE FASTLINK or OPLINK entry
*                                ..Enterprise COBOL V5 is OPLINK
         JNE   SLM0230        A. no, bypass
         BITON $LEENTRY_FASTLINK
         SPACE 1
         L     R2,12(,R1)     point to PPA1
         AR    R2,R1          add in addr of EP
         ST    R2,LS_@PPA1    save addr of PPA1
         CLI   1(R2),X'CE'    Q. still look like LE
         JNE   SLM0400        A. no, bypass LE compliant
         MVC   LMLE_ENTRY,=CL8'FASTLINK'
         L     R3,4(,R2)      point to PPA2
         AR    R3,R1
         ST    R3,LS_@PPA2    save addr of PPA2
         SPACE 1
         ICM   R0,8,0(R2)     Q. get offset to len & epname
         JZ    SLM0400        A. no name, bypass LE compliant
         SRL   R0,24
         SLL   R0,1           multiply by 2
         AR    R0,R2          add in addr of PPA1
         ST    R0,LS_@EPNAME  save addr of entry point name
         J     SLM0280        go copy EP name
         SPACE 1
SLM0230  EQU   *         check to see if LE CEESTART entry
         L     R1,LS_@EP
         CLC   LS_SLEN,=A(40+L'LE3EYE3) Q. enough space to look
         JL    SLM0240                  A. no, bypass
         CLC   LE3EYE3,28(R1) Q. LE CEESTART entry
         JNE   SLM0240        A. no, bypass
         BITON $LEENTRY_CEESTART
         CLI   20(R1),X'CE'   Q. still look like LE
         JNE   SLM0400        A. no, bypass LE compliant
         MVC   LMLE_ENTRY,=CL8'CEESTART'
         SPACE 1
         LA    R0,LS_EPNAME
         ST    R0,LS_@EPNAME
         MVC   LS_EPNAME(2),=H'8'  save len of EP name
         MVC   LS_EPNAME+2(8),28(R1)    save EP name
         XR    R0,R0
         IC    R0,22(,R1)          pick up Version
         CVD   R0,DW01
         OI    DW01+L'DW01-1,X'0F'
         UNPK  ZD01(3),DW01+6(2)
         MVC   LMLE_TSVRM(2),ZD01+1
         IC    R0,23(,R1)          pick up Release
         CVD   R0,DW01
         OI    DW01+L'DW01-1,X'0F'
         UNPK  ZD01(3),DW01+6(2)
         MVC   LMLE_TSVRM+2(2),ZD01+1
         J     SLM0300
         SPACE 1
SLM0240  EQU   *         check for LE XPLINK CEESTART
         L     R1,LS_@EP
         CLC   LS_SLEN,=A(30+L'XPLKEYE1) Q. enough space to look
         JL    SLM0248                   A. no, bypass
*        LE XPLINK CEESTART
         CLC   PGMB2,0(R1)    Q. NOP
         JNE   SLM0248        A. no, bypass
         CLC   PGMB2,4(R1)    Q. NOP
         JNE   SLM0248        A. no, bypass
         CLC   PGMSTM,8(R1)   Q. STM instruction
         JNE   SLM0248        A. no, bypass
         CLC   PGMBALR,12(R1) Q. BALR instruction
         JNE   SLM0248        A. no, bypass
         CLC   PGMB,14(R1)    Q. B unconditional
         JNE   SLM0248        A. no, bypass
         CLC   XPLKEYE,18(R1) Q. LE XPLINK entry
         JNE   SLM0248        A. no, bypass
         CLC   XPLKEYE1,21(R1)     Q. LE XPLINK entry
         JNE   SLM0244             A. no, bypass
         BITON $LELANG_C_CPP       default to C/C++
         MVC   LMLE_LANG,=CL16'XPLINK C/C++'
         J     SLM0800
         SPACE 1
SLM0244  EQU   *         must be unknown
         SPACE 1
SLM0248  EQU   *         anything ahead of EP
         CLC   LS_@EP,LS_@LP  Q. EP > LP
         JNH   SLM0250        A. no, bypass
*                             A. yes
         L     R1,LS_@EP
         AHI   R1,-16         backup for eyeball check
         C     R1,LS_@LP      Q. EP < LP
         JL    SLM0400        A. yes, bypass LE compliant
         CLC   LE3EYE2,0(R1)  Q. LE XPLINK entry
         JNE   SLM0250        A. no, bypass
*                             A. yes
         CLI   7(R1),C'1'     Q. LE XPLINK entry
         JNE   SLM0250        A. no, bypass
         BITON $LEENTRY_XPLINK
         SPACE 1
         L     R2,8(,R1)      point to PPA1
         AR    R2,R1
         ST    R2,LS_@PPA1    save addr of PPA1
         L     R1,LS_@EP
         CLI   1(R2),X'CE'    Q. still look like LE
         JNE   SLM0400        A. no, bypass LE compliant
         MVC   LMLE_ENTRY,=CL8'XPLINK'
         L     R3,4(,R2)      point to PPA2
         AR    R3,R2          add in addr of PPA1
         ST    R3,LS_@PPA2    save addr of PPA2
         J     SLM0300        bypass EP name copy
         SPACE 1
SLM0250  EQU   *
         J     SLM0400
         SPACE 1
SLM0280  EQU   *         copy EP name
         LARL  RE,SLM0300     set default return
         ICM   R2,15,LS_@EPNAME    Q. addr of EP name > zero
         JZ    SLM0300             A. no, bypass name move
         ICM   R1,12,0(R2)         Q. len of EP name > zero
         JZ    TXT0108F            A. no, error
         SRL   R1,16
         AHI   R1,-1
         J     *+4+6
         MVC   LS_EPNAME+2(0),2(R2)
*+4+6    EQU   *
         EXRL  R1,*-6
         MVC   LMLE_NAME,LS_EPNAME+2
         SPACE 1
SLM0300  EQU   *         LE entry type old C/C++
         LARL  RE,SLM0800     set default return
         L     R1,LS_@EP      point to EP
         L     R2,LS_@PPA2    point to PPA2
         CLI   3(R2),X'00'    Q. PPA2 for old C/C++
         JNE   SLM0304        A. no, bypass
         BITON $LEPPA2_OLD_C_CPP
         MVC   LMLE_CTLLVL,=CL16'old C/C++'
         J     SLM0320
         SPACE 1
SLM0304  EQU   *         LE entry type STD
         CLI   3(R2),X'01'    Q. PPA2 for LE STD
         JNE   SLM0306        A. no, bypass
         BITON $LEPPA2_STD
         MVC   LMLE_CTLLVL,=CL16'Standard'
         J     SLM0320
         SPACE 1
SLM0306  EQU   *         LE entry type FASTLINK
         CLI   3(R2),X'02'    Q. PPA2 for LE FASTLINK
         JNE   SLM0308        A. no, bypass
         BITON $LEPPA2_FASTLINK
         MVC   LMLE_CTLLVL,=CL16'FASTLINK'
         J     SLM0320
         SPACE 1
SLM0308  EQU   *         LE entry type IEEE|OPLINK
         CLI   3(R2),X'03'    Q. PPA2 for LE IEEE & OPLINK
         JNE   SLM0310        A. no, bypass
         BITON $LEPPA2_OPLINK
         MVC   LMLE_CTLLVL,=CL16'OPLINK'
         J     SLM0320
         SPACE 1
SLM0310  EQU   *
         CLI   3(R2),X'04'    Q. PPA2 for LE XPLINK
         JNE   SLM0312        A. no, bypass
         BITON $LEPPA2_XPLINK
         MVC   LMLE_CTLLVL,=CL16'XPLINK'
         J     SLM0320
         SPACE 1
SLM0312  EQU   *
         SPACE 1
SLM0320  EQU   *
         ICM   R3,15,12(R2)   Q. point to Time Stamp
         JZ    SLM0340        A. no, bypass
         JBITON ($LEPPA2_OLD_C_CPP),SLM0330
         AR    R3,R2
SLM0330  EQU   *
         ST    R3,LS_@TS      save addr of Time Stamp
         MVC   LMLE_TSTAMP,0(R3)   save Time Stamp
         LA    R3,L'LMLE_TSTAMP
         ST    R3,LS_@CPSB    save addr of COBOL Signature Info bytes
*                             ..if LE compliant COBOL
SLM0340  EQU   *
         CLI   0(R2),X'01'    Q. CEL
         JNE   SLM0342        A. no, bypass
         BITON $LELANG_CEL
         MVC   LMLE_LANG,=CL16'LE (CEL)'
         J     SLM0500
         SPACE 1
SLM0342  EQU   *
         SPACE 1
SLM0344  EQU   *
         CLI   0(R2),X'03'    Q. C/C++
         JNE   SLM0346        A. no, bypass
         BITON $LELANG_C_CPP
         MVC   LMLE_LANG,=CL16'C/C++'
         J     SLM0500
         SPACE 1
SLM0346  EQU   *
         CLI   0(R2),X'04'    Q. COBOL Enterprise V5 or V6
         JNE   SLM0348        A. no, bypass
         BITOFF $LEENTRY_FASTLINK
         BITON $LEENTRY_OPLINK,$LELANG_COBOLV5
         MVC   LMLE_ENTRY,=CL8'OPLINK'
         MVC   LMLE_LANG,=CL16'COBOL V5'
         J     SLM0500
         SPACE 1
SLM0348  EQU   *
         CLI   0(R2),X'05'    Q. COBOL MVS, OS/390, Enterprise
         JNE   SLM0350        A. no, bypass
         BITON $LELANG_COBOL
         MVC   LMLE_LANG,=CL16'COBOL'
         J     SLM0500
         SPACE 1
SLM0350  EQU   *
         CLI   0(R2),X'06'    Q. DEBUG TOOL
         JNE   SLM0352        A. no, bypass
         BITON $LELANG_DEBUGGER
         MVC   LMLE_LANG,=CL16'z/OS Debugger'
         J     SLM0500
         SPACE 1
SLM0352  EQU   *
         CLI   0(R2),X'07'    Q. FORTRAN
         JNE   SLM0354        A. no, bypass
         BITON $LELANG_VSFORT
         MVC   LMLE_LANG,=CL16'VS FORTRAN'
         J     SLM0500
         SPACE 1
SLM0354  EQU   *
         CLI   0(R2),X'08'    Q. DCE
         JNE   SLM0356        A. no, bypass
         BITON $LELANG_DCE
         MVC   LMLE_LANG,=CL16'DCE'
         J     SLM0500
         SPACE 1
SLM0356  EQU   *
         SPACE 1
SLM0358  EQU   *
         CLI   0(R2),X'0A'    Q. PL/I for MVS
         JNE   SLM0360        A. no, bypass
         BITON $LELANG_PLI
         MVC   LMLE_LANG,=CL16'PL/I'
         J     SLM0500
         SPACE 1
SLM0360  EQU   *
         CLI   0(R2),X'0B'    Q. VISUALAGE PL/I
         JNE   SLM0362        A. no, bypass
         BITON $LELANG_VAPLI
         MVC   LMLE_LANG,=CL16'VA PL/I'
         J     SLM0500
         SPACE 1
SLM0362  EQU   *
         CLI   0(R2),X'0C'    Q. SOCKETS (TCP)
         JNE   SLM0364        A. no, bypass
         BITON $LELANG_SOCKETS
         MVC   LMLE_LANG,=CL16'Berkeley Sockets'
         J     SLM0500
         SPACE 1
SLM0364  EQU   *
SLM0366  EQU   *
         SPACE 1
SLM0368  EQU   *
         CLI   0(R2),X'0F'    Q. ASSEMBLER
         JNE   SLM0370        A. no, bypass
         BITON $LELANG_ASM
         MVC   LMLE_LANG,=CL16'Assembler'
         J     SLM0500
         SPACE 1
SLM0370  EQU   *
         BITON $LELANG_NA     not available
         MVC   LMLE_LANG,=CL16'not available'
         J     SLM0500
         SPACE 1
SLM0400  EQU   *         not an LE compliant program
         L     R1,LS_@EP
         CLC   LS_SLEN,=F'41'      Q. enough space to look
         JL    SLM0410             A. no, bypass
         L     R0,LS_@LB           get addr of last byte
         AHI   R0,-20
         CR    R0,R1               Q. @LB > @EP
         JL    SLM0410             A. no, bypass
         CLC   COB2EYE,13(R1)      Q. COBOL II
         JNE   SLM0410             A. no, bypass
         BITON $LANG_COBOLII
         MVC   LM_LANG,=CL9'COBOLII'
**       MVI   LS_TSVRM,C'0'
**       MVC   LS_TSVRM+1(L'LS_TSVRM-1),LS_TSVRM
**       MVC   LS_TSVRM+1(1),17(R1)     copy CMPL VRM
**       MVC   LS_TSVRM+3(1),19(R1)
**       MVC   LS_TSVRM+5(1),21(R1)
**       MVC   LS_TSCYMD+2(2),29(R1)    copy CMPL date
**       MVC   LS_TSCYMD+4(2),23(R1)
**       MVC   LS_TSCYMD+6(2),26(R1)
**       MVC   LS_TSHMS(2),32(R1)       copy CMPL time
**       MVC   LS_TSHMS+2(2),35(R1)
**       MVC   LS_TSHMS+4(2),38(R1)
         J     SLM0500
         SPACE 1
SLM0410  EQU   *
         L     R1,LS_@EP
         CLC   LS_SLEN,=A(40+L'COBVSEYE)     Q. enough space to look
         JL    SLM0420                       A. no, bypass
         CLC   COBVSEYE,20(R1)     Q. COBOL VS
         JNE   SLM0420             A. no, bypass
         BITON $LANG_COBOLVS
         MVC   LM_LANG,=CL9'COBOLVS'
         J     SLM0500
         SPACE 1
SLM0420  EQU   *         loop init
         L     R1,LS_@EP
         L     R0,LS_SLEN
         C     R0,=F'30'      Q. > 30
         JNH   SLM0424        A. no, use computed length
         L     R0,=F'30'      A. yes, use 30
SLM0424  EQU   *         loop init continued
         AR    R0,R1
SLM0430  EQU   *         loop begin
         CLC   PGMSTM,0(R1)   Q. STM instruction (ASM)
         JE    SLM0440        A. yes, bypass
         CLC   PGMB,0(R1)     Q. B instruction (ASM)
         JE    SLM0440        A. yes, bypass
         CLC   PGMB1,0(R1)    Q. B instruction (ASM)
         JE    SLM0440        A. yes, bypass
         CLC   PGML,0(R1)     Q. LOAD instruction (ASM)
         JE    SLM0440        A. yes, bypass
         CLC   PGMSTM1,0(R1)  Q. STM instruction (ASM)
         JE    SLM0440        A. yes, bypass
         CLC   PGMBALR,0(R1)  Q. BALR instruction (ASM)
         JE    SLM0440        A. yes, bypass
         CLC   PGMBAKR,0(R1)  Q. BAKR instruction (ASM)
         JE    SLM0440        A. yes, bypass
         LA    R1,2(,R1)      bump up +2
         CR    R1,R0          Q. beyond bounds
         JL    SLM0430        A. no, loop back
         J     SLM0450        A. yes, bypass
         SPACE 1
SLM0440  EQU   *
         BITON $LANG_ASM
         MVC   LM_LANG,=CL9'Assembler'
         J     SLM0500
         SPACE 1
SLM0450  EQU   *
         BITON $LANG_OTHR
         MVC   LM_LANG,=CL9'Other'
**       J     SLM0500
         SPACE 1
SLM0500  EQU   *         scan for CICS stub
         CLC   LS_@EP,LS_@LP  Q. EP > LP
         JNH   SLM0600        A. no, bypass
*                             A. yes
         L     R1,LS_@LP      loop init
         SPACE 1
SLM0510  EQU   *         loop begin
         CLC   CICSAEYE,0(R1) Q. CICS Assembler stub
         JNE   SLM0512        A. no, bypass
         BITON $CICS_ASM
         MVC   LM_CICS_XLVL,L'CICSAEYE-1(R1)
         J     SLM0600
         SPACE 1
SLM0512  EQU   *
         CLC   CICSCEYE,0(R1) Q. CICS COBOL stub
         JNE   SLM0514        A. no, bypass
         BITON $CICS_COBOL
         MVC   LM_CICS_XLVL,L'CICSCEYE-1(R1)
         J     SLM0600
         SPACE 1
SLM0514  EQU   *
         CLC   CICSIEYE,0(R1) Q. CICS LE stub
         JNE   SLM0516        A. no, bypass
         BITON $CICS_LE
         MVC   LM_CICS_XLVL,L'CICSIEYE-1(R1)
         J     SLM0600
         SPACE 1
SLM0516  EQU   *
         CLC   CICSPEYE,0(R1) Q. CICS PL/I stub
         JNE   SLM0518        A. no, bypass
         BITON $CICS_PLI
         MVC   LM_CICS_XLVL,L'CICSPEYE-1(R1)
         J     SLM0600
         SPACE 1
SLM0518  EQU   *
         CLC   EXCIXEYE,0(R1) Q. CICS EXCI stub
         JNE   SLM0520        A. no, bypass
         BITON $CICS_EXCI
         MVC   LM_CICS_XLVL,12(R1)
         MVI   LM_CICS_XLVL,C'X'
         J     SLM0600
         SPACE 1
SLM0520  EQU   *         end of loop
         LA    R1,1(,R1)
         C     R1,LS_@EP      Q. reached EP yet
         JL    SLM0510        A. no, loop back
         SPACE 1
SLM0600  EQU   *
         SPACE 1
SLM0800  AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* Scan COBOL load module | Program Object information
* retreive COBOL Signature Information Bytes
* --------------------------------------------------------- *
         SPACE 1
CBLRTN   AS2LTRCE ,
         AS2RESTK PUSH
         SPACE 1
         L     R3,LS_@TS
CBL0200  EQU   *
         MVI   LS_PSI_BINF,C' '
         MVC   LS_PSI_BINF+1(L'LS_PSI_BINF-1),LS_PSI_BINF
         JBITOFF ($LELANG_COBOL),CBL0210
         MVC   LS_PSI_CDPG,20(R3)  copy CCSID
         ICM   R0,8,51(R3)         get COBOL Signature level
         SRL   R0,24
         STH   R0,LS_PSI_LVL       copy COBOL Signature level
         MVC   LS_PSI_SIB1,28(R3)  copy SIB 1:23
         MVC   LS_PSI_SIB2,60(R3)  copy SIB 24:27
         MVC   LS_PSI_SIB3,24(R3)  copy SIB 28:29
         MVC   LS_PSI_BINF(4),64(R3)    copy LVLINFO
         MVC   LS_PSI_DDS#,52(R3)  copy DATA DIVISION stmt count
         MVC   LS_PSI_PDS#,56(R3)  copy PROCEDURE DIVISION stmt cnt
         J     CBL0214
         SPACE 1
CBL0210  EQU   *
         JBITOFF ($LELANG_COBOLV5),CBL0800
         MVC   LS_PSI_LEN,20(R3)   copy length of PSI
         MVC   LS_PSI_CDPG,22(R3)  copy CCSID, codepage id
         ICM   R0,8,24(R3)         get ARCH(n)
         SRL   R0,24
         STH   R0,LS_PSI_ARCH      copy ARCH(n)
         ICM   R0,8,25(R3)         get OPT(n)
         SRL   R0,24
         STH   R0,LS_PSI_OPT       copy OPT(n)
         ICM   R0,8,53(R3)         get COBOL Signature level
         SRL   R0,24
         STH   R0,LS_PSI_LVL       copy COBOL Signature level
         MVC   LS_PSI_SIB1,30(R3)  copy SIB  1:23
         MVC   LS_PSI_SIB2,62(R3)  copy SIB 24:27
         MVC   LS_PSI_SIB3,26(R3)  copy SIB 28:29
         MVC   LS_PSI_SIB4,28(R3)  copy SIB 30:31
         MVC   LS_PSI_DDS#,54(R3)  copy DATA DIVISION stmt count
         MVC   LS_PSI_PDS#,58(R3)  copy PROCEDURE DIVISION stmt count
         CLC   LMLE_TSVRM(4),CVRM6#1    Q. < COBOL V6.1
         JL    CBL0212                  A. yes, bypass
         MVC   LS_PSI_BINF,66(R3)  copy LVLINFO
         J     CBL0214
CBL0212  EQU   *
         MVC   LS_PSI_BINF(4),66(R3)    copy LVLINFO
CBL0214  EQU   *
         SPACE 1
CBL0240  EQU   *         copy local storage fields to commarea
         MVC   PSI_DDS#,LS_PSI_DDS#
         MVC   PSI_PDS#,LS_PSI_PDS#
         MVC   PSI_LEN,LS_PSI_LEN
         MVC   PSI_CDPG,LS_PSI_CDPG
         MVC   PSI_ARCH,LS_PSI_ARCH
         MVC   PSI_OPT,LS_PSI_OPT
         MVC   PSI_LVL,LS_PSI_LVL
         MVC   PSI_BINF,LS_PSI_BINF
         SPACE 1
         MVC   PSI_SIB1,LS_PSI_SIB
         MVC   PSI_SIB1+1(8),=8C'N'
         MVC   PSI_SIB2,LS_PSI_SIB+1
         MVC   PSI_SIB2+1(8),=8C'N'
         MVC   PSI_SIB3,LS_PSI_SIB+2
         MVC   PSI_SIB3+1(8),=8C'N'
         MVC   PSI_SIB4,LS_PSI_SIB+3
         MVC   PSI_SIB4+1(8),=8C'N'
         MVC   PSI_SIB5,LS_PSI_SIB+4
         MVC   PSI_SIB5+1(8),=8C'N'
         MVC   PSI_SIB6,LS_PSI_SIB+5
         MVC   PSI_SIB6+1(8),=8C'N'
         MVC   PSI_SIB7,LS_PSI_SIB+6
         MVC   PSI_SIB7+1(8),=8C'N'
         MVC   PSI_SIB8,LS_PSI_SIB+7
         MVC   PSI_SIB8+1(8),=8C'N'
         MVC   PSI_SIB9,LS_PSI_SIB+8
         MVC   PSI_SIB9+1(8),=8C'N'
         MVC   PSI_SIBA,LS_PSI_SIB+9
         MVC   PSI_SIBA+1(8),=8C'N'
         MVC   PSI_SIBB,LS_PSI_SIB+10
         MVC   PSI_SIBB+1(8),=8C'N'
         MVC   PSI_SIBC,LS_PSI_SIB+11
         MVC   PSI_SIBC+1(8),=8C'N'
         MVC   PSI_SIBD,LS_PSI_SIB+12
         MVC   PSI_SIBD+1(8),=8C'N'
         MVC   PSI_SIBE,LS_PSI_SIB+13
         MVC   PSI_SIBE+1(8),=8C'N'
         MVC   PSI_SIBF,LS_PSI_SIB+14
         MVC   PSI_SIBF+1(8),=8C'N'
         MVC   PSI_SIBG,LS_PSI_SIB+15
         MVC   PSI_SIBG+1(8),=8C'N'
         MVC   PSI_SIBH,LS_PSI_SIB+16
         MVC   PSI_SIBH+1(8),=8C'N'
         MVC   PSI_SIBI,LS_PSI_SIB+17
         MVC   PSI_SIBI+1(8),=8C'N'
         MVC   PSI_SIBJ,LS_PSI_SIB+18
         MVC   PSI_SIBJ+1(8),=8C' '
         MVC   PSI_SIBK,LS_PSI_SIB+19
         MVC   PSI_SIBK+1(8),=8C'N'
         MVC   PSI_SIBL,LS_PSI_SIB+20
         MVC   PSI_SIBL+1(8),=8C'N'
         MVC   PSI_SIBM,LS_PSI_SIB+21
         MVC   PSI_SIBM+1(8),=8C'N'
         MVC   PSI_SIBN,LS_PSI_SIB+22
         MVC   PSI_SIBN+1(8),=8C'N'
         MVC   PSI_SIBO,LS_PSI_SIB+23
         MVC   PSI_SIBO+1(8),=8C'N'
         MVC   PSI_SIBP,LS_PSI_SIB+24
         MVC   PSI_SIBP+1(8),=8C'N'
         MVC   PSI_SIBQ,LS_PSI_SIB+25
         MVC   PSI_SIBQ+1(8),=8C'N'
         MVC   PSI_SIBR,LS_PSI_SIB+26
         MVC   PSI_SIBR+1(8),=8C'N'
         MVC   PSI_SIBS,LS_PSI_SIB+27
         MVC   PSI_SIBS+1(8),=8C'N'
         MVC   PSI_SIBT,LS_PSI_SIB+28
         MVC   PSI_SIBT+1(8),=8C'N'
         MVC   PSI_SIBU,LS_PSI_SIB+29
         MVC   PSI_SIBU+1(8),=8C'N'
         MVC   PSI_SIBV,LS_PSI_SIB+30
         MVC   PSI_SIBV+1(8),=8C'N'
         SPACE 1
CBL0250  EQU   *         COBOL PSI 01
         JBITOFF ($CBL_ADV),CBL0252
         MVI   PSI_01ADV,C'Y'
CBL0252  EQU   *
         JBITOFF ($CBL_APOST),CBL0254
         MVI   PSI_01APOST,C'Y'
CBL0254  EQU   *
         JBITOFF ($CBL_DATA31),CBL0256
         MVI   PSI_01DATA31,C'Y'
CBL0256  EQU   *
         JBITOFF ($CBL_DECK),CBL0258
         MVI   PSI_01DECK,C'Y'
CBL0258  EQU   *
         JBITOFF ($CBL_DUMP),CBL0260
         MVI   PSI_01DUMP,C'Y'
CBL0260  EQU   *
         JBITOFF ($CBL_DYNAM),CBL0262
         MVI   PSI_01DYNAM,C'Y'
CBL0262  EQU   *
         JBITOFF ($CBL_FASTSRT),CBL0264
         MVI   PSI_01FASTSRT,C'Y'
CBL0264  EQU   *
         JBITOFF ($CBL_SQLIMS),CBL0266
         MVI   PSI_01SQLIMS,C'Y'
CBL0266  EQU   *
         SPACE 1
CBL0270  EQU   *         COBOL PSI 02
         JBITOFF ($CBL_LIB),CBL0272               <
         MVI   PSI_02LIB,C'Y'
CBL0272  EQU   *
         JBITOFF ($CBL_LIST),CBL0274
         MVI   PSI_02LIST,C'Y'
CBL0274  EQU   *
         JBITOFF ($CBL_MAP),CBL0276
         MVI   PSI_02MAP,C'Y'
CBL0276  EQU   *
         JBITOFF ($CBL_NUM),CBL0278
         MVI   PSI_02NUM,C'Y'
CBL0278  EQU   *
         JBITOFF ($CBL_OBJECT),CBL0280
         MVI   PSI_02OBJECT,C'Y'
CBL0280  EQU   *
         JBITOFF ($CBL_OFFSET),CBL0282
         MVI   PSI_02OFFSET,C'Y'
CBL0282  EQU   *
         JBITOFF ($CBL_OPT),CBL0284               <
         MVI   PSI_02OPT,C'Y'
CBL0284  EQU   *
         JBITOFF ($CBL_OUTDD),CBL0286
         MVI   PSI_02OUTDD,C'Y'
CBL0286  EQU   *
         SPACE 1
CBL0290  EQU   *         COBOL PSI 03
         JBITON ($CBL_NUMPROCMIG),CBL0292         <
         JBITOFF ($CBL_NUMPROCPFD),CBL0292
         MVI   PSI_03NUMPROCPFD,C'Y'
CBL0292  EQU   *
         JBITOFF ($CBL_RENT),CBL0294
         MVI   PSI_03RENT,C'Y'
CBL0294  EQU   *
CBL0296  EQU   *
         JBITOFF ($CBL_SEQUENCE),CBL0298
         MVI   PSI_03SEQ,C'Y'
CBL0298  EQU   *
CBL0300  EQU   *
         JBITOFF ($CBL_SOURCE),CBL0302
         MVI   PSI_03SOURCE,C'Y'
CBL0302  EQU   *
         JBITOFF ($CBL_SSRANGE),CBL0304
         MVI   PSI_03SSRANGE,C'Y'
CBL0304  EQU   *
         JBITOFF ($CBL_TERM),CBL0306
         MVI   PSI_03TERM,C'Y'
CBL0306  EQU   *
         SPACE 1
CBL0310  EQU   *         COBOL PSI 04
         JBITOFF ($CBL_TEST),CBL0312
         MVI   PSI_04TEST,C'Y'
CBL0312  EQU   *
         JBITON ($CBL_TRUNCBIN),CBL0314
         JBITOFF ($CBL_TRUNCSTD),CBL0314
         MVI   PSI_04TUNCSTD,C'Y'  on=STD, off=OPT
CBL0314  EQU   *
         JBITOFF ($CBL_WORD),CBL0316
         MVI   PSI_04WORD,C'Y'
CBL0316  EQU   *
         JBITOFF ($CBL_VBREF),CBL0318
         MVI   PSI_04VBREF,C'Y'
CBL0318  EQU   *
         JBITOFF ($CBL_XREF),CBL0320
         MVI   PSI_04XREF,C'Y'
CBL0320  EQU   *
         JBITOFF ($CBL_ZWB),CBL0322
         MVI   PSI_04ZWB,C'Y'
CBL0322  EQU   *
         JBITOFF ($CBL_NAME),CBL0324
         MVI   PSI_04NAME,C'Y'
CBL0324  EQU   *
CBL0326  EQU   *
         SPACE 1
CBL0330  EQU   *         COBOL PSI 05
**       JBITOFF ($CBL_NUMPROCPDF,$CBL_NUMPROCMIG),CBL0332  <
         JBITOFF ($CBL_NUMPROCMIG),CBL0332        <
         MVI   PSI_05NUMPRCMIG,C'Y'
CBL0332  EQU   *
         JBITOFF ($CBL_NUMCLSALT),CBL0334         <
         MVI   PSI_05NUMCLSALT,C'Y'     on=ALT, off=PRIME
CBL0334  EQU   *
         JBITOFF ($CBL_DBCS),CBL0336
         MVI   PSI_05DBCS,C'Y'
CBL0336  EQU   *
         JBITOFF ($CBL_AWO),CBL0338
         MVI   PSI_05AWO,C'Y'
CBL0338  EQU   *
**       JBITOFF ($CBL_TRUNCSTD,$CBL_TRUNCBIN),CBL0340
         JBITOFF ($CBL_TRUNCBIN),CBL0340
         MVI   PSI_05TRUNCBIN,C'Y' on=BIN, off=null
CBL0340  EQU   *
         JBITOFF ($CBL_ADATA),CBL0342
         MVI   PSI_05ADATA,C'Y'
CBL0342  EQU   *
         JBITOFF ($CBL_CURRENCY),CBL0344
         MVI   PSI_05CURRENCY,C'Y'
CBL0344  EQU   *
         JBITOFF ($COD_CLASS),CBL0346             <
         MVI   PSI_05CLASS,C'Y'    on=CLASS, off=PROGRAM
CBL0346  EQU   *
         SPACE 1
CBL0350  EQU   *         COBOL PSI 06
         SPACE 1
CBL0370  EQU   *         COBOL PSI 07
         SPACE 1
CBL0390  EQU   *         COBOL PSI 08
CBL0392  EQU   *
CBL0394  EQU   *
CBL0396  EQU   *
CBL0398  EQU   *
         JBITOFF ($CBL_VSAMOPENFS),CBL0400
         MVI   PSI_08VSAMOPENFS,C'Y'
CBL0400  EQU   *
         SPACE 1
CBL0410  EQU   *         COBOL PSI 09
         SPACE 1
CBL0430  EQU   *         COBOL PSI 10
         SPACE 1
CBL0450  EQU   *         COBOL PSI 11
         SPACE 1
CBL0470  EQU   *         COBOL PSI 12
         SPACE 1
CBL0490  EQU   *         COBOL PSI 13
         SPACE 1
CBL0510  EQU   *         COBOL PSI 14
         SPACE 1
CBL0530  EQU   *         COBOL PSI 15
         SPACE 1
CBL0550  EQU   *         COBOL PSI 16
         SPACE 1
CBL0570  EQU   *         COBOL PSI 17
         SPACE 1
CBL0590  EQU   *         COBOL PSI 19
         SPACE 1
CBL0610  EQU   *         COBOL PSI 20
         SPACE 1
CBL0630  EQU   *         COBOL PSI 21
         SPACE 1
CBL0650  EQU   *         COBOL PSI 22
         SPACE 1
CBL0670  EQU   *         COBOL PSI 23
CBL0672  EQU   *
CBL0674  EQU   *
CBL0676  EQU   *
CBL0678  EQU   *
         JBITOFF ($CBL_SUPPRESS),CBL0680
         MVI   PSI_23SUPPRESS,C'Y'
CBL0680  EQU   *
         JBITOFF ($CBL_SSRZLEN),CBL0682
         MVI   PSI_23SSRZLEN,C'Y'  on=SSR(ZLEN), off=SSR(NOZLEN)
CBL0682  EQU   *
         JBITOFF ($CBL_SSRABD),CBL0684
         MVI   PSI_23SSRABD,C'Y'   on=SSR(ABD), off=SSR(MSG)
CBL0684  EQU   *
         JBITOFF ($CBL_INLINE),CBL0686
         MVI   PSI_23INLINE,C'Y'
CBL0686  EQU   *
         SPACE 1
CBL0690  EQU   *         COBOL PSI 24
         SPACE 1
CBL0710  EQU   *         COBOL PSI 25
         SPACE 1
CBL0730  EQU   *         COBOL PSI 26
         JBITOFF ($CBL_RMODEANY),CBL0732
         MVI   PSI_26RMODEANY,C'Y' on=ANY, off=24
CBL0732  EQU   *
**       JBITOFF ($CBL_TESTSTMT,$CBL_TESTPATH,$CBL_TESTBLOC),CBL0738
         JBITOFF ($CBL_TESTSTMT),CBL0734
         MVI   PSI_26TESTSTMT,C'Y'
CBL0734  EQU   *
         JBITOFF ($CBL_TESTPATH),CBL0736
         MVI   PSI_26TESTPATH,C'Y'
CBL0736  EQU   *
         JBITOFF ($CBL_TESTBLOC),CBL0738
         MVI   PSI_26TESTBLOC,C'Y'
CBL0738  EQU   *
         JBITOFF ($CBL_OPT,$CBL_OPTFULL),CBL0740
         MVI   PSI_26OPTFULL,C'Y'  on=OPT, on=FULL, off=STD
CBL0740  EQU   *
         JBITOFF ($CBL_INTDATELILIAN),CBL0742
         MVI   PSI_26INTDATELILIAN,C'Y' on=LILIAN, off=ANSI
CBL0742  EQU   *
         JBITOFF ($CBL_xxTESTSEP),CBL0744
         MVI   PSI_26xxTESTSEP,C'Y'     on=xxTEST(SEP),
*                                       off=xxTEST(NOSEP)
CBL0744  EQU   *
         JBITOFF ($CBL_xxTESTSEPDSN),CBL0746
         MVI   PSI_26xxTESTSEPDSN,C'Y'  on=xxTEST(SEP(DSN),
*                                       off=xxTEST(SEP(NODSN)
CBL0746  EQU   *
         SPACE 1
CBL0750  EQU   *         COBOL PSI 27
         JBITOFF ($CBL_PGMNLONGUPPER),CBL0752
         MVI   PSI_27PGMNLONGUPPER,C'Y' on=PGMN(LU), off=null
CBL0752  EQU   *
         JBITOFF ($CBL_PGMNLONGMIXED),CBL0754
         MVI   PSI_27PGMNLONGMIXED,C'Y' on=PGMN(LM), off=null
CBL0754  EQU   *
         JBITOFF ($CBL_DLL),CBL0756
         MVI   PSI_27DLL,C'Y'
CBL0756  EQU   *
         JBITOFF ($CBL_EXPORTALL),CBL0758
         MVI   PSI_27EXPORTALL,C'Y'
CBL0758  EQU   *
         JBITOFF ($CBL_xxTESTSRC),CBL0760
         MVI   PSI_27xxTESTSRC,C'Y'     on=xxTEST(S),
*                                       off=xxTEST(NOS)
CBL0760  EQU   *
         JBITOFF ($CBL_ARITHEXTEND),CBL0762
         MVI   PSI_27ARITHEXTEND,C'Y'   on=AR(E), off=AR(C)
CBL0762  EQU   *
         JBITOFF ($CBL_THREAD),CBL0764
         MVI   PSI_27THREAD,C'Y'
CBL0764  EQU   *
         JBITOFF ($CBL_TESTEJPD),CBL0766
         MVI   PSI_27TESTEJPD,C'Y'      on=TEST(EJPD)
*                                       off=TEST(NOEJPD)
CBL0766  EQU   *
         SPACE 1
CBL0770  EQU   *         COBOL PSI 28
         JBITOFF ($CBL_SQL),CBL0772
         MVI   PSI_28SQL,C'Y'
CBL0772  EQU   *
         JBITOFF ($CBL_CICS),CBL0774
         MVI   PSI_28CICS,C'Y'
CBL0774  EQU   *
         JBITOFF ($CBL_MDECK),CBL0776
         MVI   PSI_28MDEC,C'Y'
CBL0776  EQU   *
         JBITOFF ($CBL_SQLCCSID),CBL0778
         MVI   PSI_28SQLCCSID,C'Y' on=SQLC, off=NOSQLC
CBL0778  EQU   *
         JBITOFF ($CBL_OPTFILE),CBL0780
         MVI   PSI_28OPTFILE,C'Y'
CBL0780  EQU   *
         JBITOFF ($CBL_XMLPARSEXMLSS),CBL0782
         MVI   PSI_28XMLPARSEXMLSS,C'Y' on=XP(X), off=XP(C)
CBL0782  EQU   *
         JBITOFF ($CBL_BLOCK0),CBL0784
         MVI   PSI_28BLOCK0,C'Y'
CBL0784  EQU   *
         JBITOFF ($CBL_DISPSIGNSEP),CBL0786
         MVI   PSI_28DISPSIGNSEP,C'Y'   on=DS(S), off=DS(C)
CBL0786  EQU   *
         SPACE 1
CBL0790  EQU   *         COBOL PSI 29
CBL0792  EQU   *
CBL0794  EQU   *
CBL0796  EQU   *
CBL0798  EQU   *
         JBITOFF ($CBL_STGOPT),CBL0800
         MVI   PSI_29STGOPT,C'Y'
CBL0800  EQU   *
         JBITOFF ($CBL_AFPVOLATILE),CBL0802
         MVI   PSI_29AFPVOLATILE,C'Y'
CBL0802  EQU   *
         JBITOFF ($CBL_HGPRPRESERVE),CBL0804
         MVI   PSI_29HGPRESERVE,C'Y'
CBL0804  EQU   *
         JBITOFF ($CBL_NOTESTDWARF),CBL0806
         MVI   PSI_29NOTESTDWARF,C'Y'
CBL0806  EQU   *
         SPACE 1
CBL0810  EQU   *         COBOL PSI 30
         JBITOFF ($CBL_QUALIFYEXTEND),CBL0812
         MVI   PSI_30QUALIFYEXTEND,C'Y' on=QUA(E), off=QUA(C)
CBL0812  EQU   *
         JBITOFF ($CBL_VLRCOMPAT),CBL0814
         MVI   PSI_30VLRCOMPAT,C'Y'     on=VLR(C), off=VLR(S)
CBL0814  EQU   *
         JBITOFF ($CBL_COPYRIGHT),CBL0816
         MVI   PSI_30COPYRIGHT,C'Y'
CBL0816  EQU   *
         JBITOFF ($CBL_SERVICE),CBL0818
         MVI   PSI_30SERVICE,C'Y'
CBL0818  EQU   *
         JBITOFF ($CBL_ZONEDATAMIG),CBL0820
         MVI   PSI_30ZONEDATAMIG,C'Y'   on=ZD(MIG), off=null
CBL0820  EQU   *
         JBITOFF ($CBL_ZONEDATAPFD),CBL0822
         MVI   PSI_30ZONEDATAPFD,C'Y'   on=ZD(PFD), off=ZD(NOPFD)
CBL0822  EQU   *
CBL0824  EQU   *
CBL0826  EQU   *
         SPACE 1
CBL0830  EQU   *         COBOL PSI 31
         JBITOFF ($CBL_NUMCHECKZONX),CBL0832
         MVI   PSI_31NUMCHECKZONX,C'Y'  on=NC(ZON(ALPHNUM)
*                                       off=null
CBL0832  EQU   *
         JBITOFF ($CBL_NUMCHECKPAC),CBL0834
         MVI   PSI_31NUMCHECKPAC,C'Y'   on=NC(PAC), off=NC(NOPAC)
CBL0834  EQU   *
         JBITOFF ($CBL_NUMCHECKBIN),CBL0836
         MVI   PSI_31NUMCHECKBIN,C'Y'   on=NC(BIN), off=NC(NOBIN)
CBL0836  EQU   *
         JBITOFF ($CBL_NUMCHECKABD),CBL0838
         MVI   PSI_31NUMCHECKABD,C'Y'   on=NC(ABD), off=NC(MSG)
CBL0838  EQU   *
         JBITOFF ($CBL_PARMCHECK),CBL0840
         MVI   PSI_31PARMCHECK,C'Y'
CBL0840  EQU   *
         JBITOFF ($CBL_PARMCHECKABD),CBL0842
         MVI   PSI_31PARMCHECKABD,C'Y'  on=PC(ABD), off=PC(MSG)
CBL0842  EQU   *
         JBITOFF ($CBL_NUMCHECKZONNOX),CBL0844
         MVI   PSI_31NUMCHECKZONNOX,C'Y'     on=NC(ZON(NOALPHNUM))
*                                            off=null
CBL0844  EQU   *
CBL0846  EQU   *
         SPACE 1
CBL0900  AS2LTRCE
         AS2RESTK POP
         BR    RE
         EJECT
* --------------------------------------------------------- *
* PRINT ROUTINES
* --------------------------------------------------------- *
         SPACE 1
PRTTIOT  AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
PTIOT002 EQU   *         TIOT:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE002L),LNE002T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PTIOT003 EQU   *         JOBNAME, JOBSTEP, PROCSTEP
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE003L),LNE003T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE003A,TIOT_JOBNAME
         CLI   TIOT_JOBSTEP,C' '
         JNH   PTIOT003A
         MVC   LNE003B,TIOT_JOBSTEP
PTIOT003A EQU   *
         CLI   TIOT_PROCSTEP,C' '
         JNH   PTIOT003B
         MVC   LNE003C,TIOT_PROCSTEP
PTIOT003B EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PTIOT0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTLIB   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
PLIB004  EQU   *         TIOTE:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE004L),LNE004T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PLIB005  EQU   *         xxxxLIB
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE005L),LNE005T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE005A,LIB_TYPE
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PLIB006  EQU   *
         ICM   R0,12,LIB_CNT       Q. any DDname(s)
         JZ    PLIB0800            A. no, bypass
         L     R0,F0
         LA    R2,LIB_DSN
         USING LIB_DSN,R2
         SPACE 1
PLIB006A EQU  *          +nn library name
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE006L),LNE006T
         MVC   LNEPGM,=CL8'&CSECT'
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE006A,ZD01+L'ZD01-L'LNE006A
         MVC   LNE006B,0(R2)       copy library dsname
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
         AHI   R0,1
         CH    R0,LIB_CNT          Q. R0 >= LIB_CNT
         JNL   PLIB0800            A. yes, bypass
         LA    R2,L'LIB_DSN(,R2)
         J     PLIB006A
         DROP  R2
         SPACE 1
PLIB0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTBLDL  AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         CLI   BLDL_NAME,C' ' Q. any program selected
         JE    PBLDL0800      A. no, bypass
PBLDL007 EQU   *         BLDL:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE007L),LNE007T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL008 EQU   *         Member, Size
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE008L),LNE008T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE008A,BLDL_NAME   copy module name
         L     R0,BLDL_CMSTGL
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE008B,ZD01+L'ZD01-L'LNE008B copy module size
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL010 EQU   *         Indicator byte-1:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE010L),LNE010T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_IND1(L'BLDL_IND1+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE010A,ZD01+8-L'LNE010A copy indicator
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL011 EQU   *         ALIAS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE011L),LNE011T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE011A,BLDL_1ALIAS copy ALIAS flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL019 EQU   *         Library type nn
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE019L),LNE019T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R0,12,BLDL_DIRLOC
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE019A,ZD01+L'ZD01-L'LNE019A copy dir location
         C     R0,F0
         JH    PBLDL019A
         MVC   LNE019B,=CL23'private library'
         J     PBLDL019D
PBLDL019A EQU   *
         C     R0,F1
         JH    PBLDL019B
         MVC   LNE019B,=CL23'link library'
         J     PBLDL019D
PBLDL019B EQU   *
         C     R0,F2
         JH    PBLDL019C
         MVC   LNE019B,=CL23'job, task, step library'
         J     PBLDL019D
PBLDL019C EQU   *
         MVC   LNE019B,=CL23'parent task, value -2'
PBLDL019D EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL020 EQU   *         Library concatenation nbr
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE020L),LNE020T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R0,12,BLDL_CONCAT#
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE020A,ZD01+L'ZD01-L'LNE020A copy library concat nbr
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL030 EQU   *         Attribute byte-1:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE030L),LNE030T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_ATTR1(L'BLDL_ATTR1+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE030A,ZD01+8-L'LNE030A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL031 EQU   *         RENT (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE031L),LNE031T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE031A,BLDL_1RENT  copy RENT flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL032 EQU   *         REUS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE032L),LNE032T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE032A,BLDL_1REUS  copy REUS flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL033 EQU   *         OVLY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE033L),LNE033T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE033A,BLDL_1OVLY  copy OVLY flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL034 EQU   *         TEST (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE034L),LNE034T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE034A,BLDL_1TEST  copy TEST flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL035 EQU   *         only Loadable (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE035L),LNE035T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE035A,BLDL_1ONLYLD     copy ONLYLD flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL036 EQU   *         Scatter (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE036L),LNE036T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE036A,BLDL_1SCTR  copy SCTR flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL037 EQU   *         Executable (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE037L),LNE037T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE037A,BLDL_1XEQ   copy EXEC flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL038 EQU   *         1 blk of txt && no RLD (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE038L),LNE038T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE038A,BLDL_1BLK1  copy TXT flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL040 EQU   *         Attribute byte-2:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE040L),LNE040T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_ATTR2(L'BLDL_ATTR2+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE040A,ZD01+8-L'LNE040A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL041 EQU   *         > LNKEDT E (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE041L),LNE041T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE041A,BLDL_2GTLNKEDTE  copy > lnkedt E flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL042 EQU   *         Origin of 1st blk is zero (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE042L),LNE042T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE042A,BLDL_2ORIGIN0    copy ORIGIN flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL043 EQU   *         EP addr is zero (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE043L),LNE043T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE043A,BLDL_2EP0   copy EP 0 flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL044 EQU   *         no RLD (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE044L),LNE044T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE044A,BLDL_2NRLD  copy no RLD flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL045 EQU   *         can not reprocess
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE045L),LNE045T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE045A,BLDL_2NREPROC    copy no reprocess flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL046 EQU   *         contains TESTRAN symbol cards (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE046L),LNE046T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE046A,BLDL_2TSTRAN     copy TESTRAN flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL047 EQU   *         LNKEDT F (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE047L),LNE047T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE047A,BLDL_2LNKEDTF    copy lnkedt F flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL048 EQU   *         REFR (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE048L),LNE048T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE048A,BLDL_2REFR  copy REFR flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL050 EQU   *         Flag byte-1:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE050L),LNE050T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_FLAG1(L'BLDL_FLAG1+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE050A,ZD01+8-L'LNE050A copy flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL051 EQU   *         AOS LNKEDT (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE051L),LNE051T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE051A,BLDL_1AOSLNKEDT  copy AOS lnkedt flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL052 EQU   *         Large PGMOBJ extended (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE052L),LNE052T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE052A,BLDL_1LRGPGMOBJEXT    copy large PGMOBJ flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL053 EQU   *         page aligned (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE053L),LNE053T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE053A,BLDL_1PGALIGN    copy pg align flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL054 EQU   *         SSI data (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE054L),LNE054T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE054A,BLDL_1SSI   copy SSI flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL055 EQU   *         APF info is valid (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE055L),LNE055T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE055A,BLDL_1APF   copy API valid flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL056 EQU   *         PGMOBJ (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE056L),LNE056T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE056A,BLDL_1PGMOBJ     copy PGMOBJ flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL057 EQU   *         PGMOBJ is signed (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE057L),LNE057T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE057A,BLDL_1PGMOBJSIGN copy PGMOBJ signed flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL060 EQU   *         Flag byte-2:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE060L),LNE060T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_FLAG2(L'BLDL_FLAG2+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE060A,ZD01+8-L'LNE060A copy flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL061 EQU   *         primary name generated by Binder
         L     R8,LS_SSA1
         USING LNE061T,R8
         SPACE 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE061L),LNE061T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE061A,BLDL_2ALTPRI     copy alt pri name flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL064 EQU   *         RMODE(xxx)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE064L),LNE064T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE064A,BLDL_2RMODE copy RMODE value
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL065 EQU   *         ALIAS AMODE(xxx)
         JBITOFF ($BLDL_ALIAS),PBLDL066
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE065L),LNE065T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE065A,BLDL_2ALIASAMODE copy alias AMODE value
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL066 EQU   *         AMODE(xxx)
         JBITON ($BLDL_ALIAS),PBLDL070
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE066L),LNE066T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE066A,BLDL_2AMODE copy AMODE value
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL070 EQU   *         Flag byte-3:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE070L),LNE070T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_FLAG3(L'BLDL_FLAG3+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE070A,ZD01+8-L'LNE070A copy flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL071 EQU   *         PGMOBJ can not be LOADMOD (x)
         JBITOFF ($BLDL_PGMOBJ),PBLDL073
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE071L),LNE071T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE071A,BLDL_3NOMIG      copy no migrate flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL072 EQU   *         FETCHOPT(xxxxx)
         JBITOFF ($BLDL_PRIME,$BLDL_PACK),PBLDL073
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE072L),LNE072T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE072A,BLDL_3FETCHOPT   copy FETCHOPT value
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL073 EQU   *         SSI word
         JBITOFF ($BLDL_SSI),PBLDL074
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE073L),LNE073T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_SSI_WORD(L'BLDL_SSI_WORD+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE073A,ZD01+8-L'LNE073A copy SSI word
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL074 EQU   *         LPO size
         JBITOFF ($BLDL_LRGPGMOBJEXT),PBLDL075
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE074L),LNE074T
         MVC   LNEPGM,=CL8'&CSECT'
         L     R0,BLDL_LPO_SIZE
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE074A,ZD01+L'ZD01-L'LNE074A copy LPO size
         UNPK  ZD01(9),BLDL_LPO_EPA(L'BLDL_LPO_EPA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE074B,ZD01+8-L'LNE074B copy LPO EP addr
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL075 EQU   *         XATTR flag byte-0
         JBITOFF ($BLDL_XATTR),PBLDL078
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE075L),LNE075T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_XATTR_FLAG0(L'BLDL_XATTR_FLAG0+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE075A,ZD01+8-L'LNE075A copy XATTR flag byte-0
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL076 EQU   *         XATTR flag byte-1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE076L),LNE076T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),BLDL_XATTR_FLAG1(L'BLDL_XATTR_FLAG1+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE076A,ZD01+8-L'LNE076A copy XATTR flag byte-1
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL077 EQU   *         XATTR data
         OC    BLDL_XATTR_LEN,BLDL_XATTR_LEN      Q. any data
         JZ    PBLDL078                           A. no, bypass
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE077L),LNE077T
         MVC   LNEPGM,=CL8'&CSECT'
*        place fields here
***      UNPK  ZD01(9),BLDL_XATTR_DATA(L'BLDL_XATTR_DATA+1)
***      NC    ZD01(8),=8X'0F'
***      TR    ZD01(8),=CL16'0123456789ABCDEF'
***      MVC   LNE077A,ZD01+8-L'LNE077A copy XATTR data
***      ...
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PBLDL078 EQU   *
         SPACE 1
PBLDL0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTCSV   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         CLI   CSV_NAME,C' '  Q. any program selected
         JE    PCSV0800       A. no, bypass
         SPACE 1
PCSV079  EQU   *         CSV:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE079L),LNE079T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV080  EQU   *         Program, loader
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE080L),LNE080T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE080A,CSV_NAME
         MVC   LNE080B,CSV_LOADER
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
         CLI   CSV_PDATA,C' ' Q. any data
         JE    PCSV082        A. no, bypass
         SPACE 1
PCSV081  EQU   *         PDATA
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE081L),LNE081T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CSV_PDATA(5)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE081A(8),ZD01
         UNPK  ZD01(9),CSV_PDATA+4(5)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE081A+8(8),ZD01
         UNPK  ZD01(9),CSV_PDATA+8(5)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE081A+16(8),ZD01
         UNPK  ZD01(9),CSV_PDATA+12(5)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE081A+24(8),ZD01
         MVC   LNE081B,CSV_PDATA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV082  EQU   *         LP addr, EP addr, size
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE082L),LNE082T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CSV_POBJLPA(L'CSV_POBJLPA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE082A,ZD01+8-L'LNE082A
         UNPK  ZD01(9),CSV_POBJEPA(L'CSV_POBJEPA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE082B,ZD01+8-L'LNE082B
         L     R0,CSV_POBJLEN
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE082C,ZD01+L'ZD01-L'LNE082C
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV090  EQU   *         Attribute 1:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE090L),LNE090T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CSV_ATTR1(L'CSV_ATTR1+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE090A,ZD01+8-L'LNE090A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV091  EQU   *         end-of-module delete (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE091L),LNE091T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE091A,CSV_1EOMDEL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV092  EQU   *         loaded to global (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE092L),LNE092T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE092A,CSV_1LD2GLBL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV093  EQU   *         RENT (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE093L),LNE093T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE093A,CSV_1RENT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV094  EQU   *         REUS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE094L),LNE094T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE094A,CSV_1REUS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV095  EQU   *         not loadable only (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE095L),LNE095T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE095A,CSV_1NLDONLY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV096  EQU   *         OVLY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE096L),LNE096T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE096A,CSV_1OVRLAY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV097  EQU   *         ALIAS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE097L),LNE097T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE097A,CSV_1ALIAS
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV098  EQU   *
         SPACE 1
PCSV100  EQU   *         Attribute 2:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE100L),LNE100T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CSV_ATTR2(L'CSV_ATTR2+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE100A,ZD01+8-L'LNE100A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV101  EQU   *         authorized library (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE101L),LNE101T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE101A,CSV_2AUTHLIB
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV102  EQU   *         authorized program (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE102L),LNE102T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE102A,CSV_2AUTHPGM
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV103  EQU   *         AMODE ANY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE103L),LNE103T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE103A,CSV_2AMODEANY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV104  EQU   *         AMODE 31 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE104L),LNE104T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE104A,CSV_2AMODE31
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV105  EQU   *
         SPACE 1
PCSV106  EQU   *         dynamic LPA module (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE106L),LNE106T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE106A,CSV_2DYNLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV107  EQU   *         page protected (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE107L),LNE107T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE107A,CSV_2PAGEPROT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV108  EQU   *         AMODE 64 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE108L),LNE108T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE108A,CSV_2AMODE64
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV110  EQU   *         Attribute 3:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE110L),LNE110T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CSV_ATTR3(L'CSV_ATTR3+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE110A,ZD01+8-L'LNE110A
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV111  EQU   *         resident above-the-line (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE111L),LNE111T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE111A,CSV_3RESATL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV112  EQU   *         resident JPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE112L),LNE112T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE112A,CSV_3RESJPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV113  EQU   *         resident PLPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE113L),LNE113T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE113A,CSV_3RESPLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV114  EQU   *         resident MLPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE114L),LNE114T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE114A,CSV_3RESMLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV115  EQU   *         resident FLPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE115L),LNE115T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE115A,CSV_3RESFLPA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV116  EQU   *         resident CSA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE116L),LNE116T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE116A,CSV_3RESCSA
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCSV117  EQU   *
         SPACE 1
PCSV118  EQU   *
         SPACE 1
PCSV0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTCDE   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         CLC   CDE_NTRY_CNT,H0
         JE    PCDE0800
PCDE119  EQU   *         CDE: xxxxx
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE119L),LNE119T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE119A,=CL5'major'
         JBITON ($CDE1_MAJOR),PCDE119A
         MVC   LNE119A,=CL5'minor'
PCDE119A EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE120  EQU   *         Program, Use count
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE120L),LNE120T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE120A,CDE1_NAME   copy program name
         ICM   R0,12,CDE1_USECNT
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE120B,ZD01+L'ZD01-L'LNE120B copy use count
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE121  EQU   *         EP addr, SPID
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE121L),LNE121T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE1_EP@(L'CDE1_EP@+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE121A,ZD01+8-L'LNE121A copy EP@
         ICM   R0,12,CDE1_SPID
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE121B,ZD01+L'ZD01-L'LNE121B copy SPID
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE130  EQU   *         Indicator byte-0:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE130L),LNE130T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE1_IND0(L'CDE1_IND0+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE130A,ZD01+8-L'LNE130A copy indicator
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE131  EQU   *         RMODE31 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE131L),LNE131T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE131A,CDE1_0AMODE31    copy AMODE31 flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE132  EQU   *         RMODE64 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE132L),LNE132T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE132A,CDE1_0AMODE64    copy AMODE64 flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE133  EQU   *         major CDE (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE133L),LNE133T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE133A,CDE1_0MAJOR copy major CDE flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE140  EQU   *         Attribute 1:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE140L),LNE140T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE1_ATTR1(L'CDE1_ATTR1+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE140A,ZD01+8-L'LNE140A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE141  EQU   *         delete module (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE141L),LNE141T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE141A,CDE1_1DELMOD     copy delete mod flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE142  EQU   *         built by IDENTIFY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE142L),LNE142T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE142A,CDE1_1IDENTIFY   copy IDENTIFY flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE143  EQU   *         loaded by DIRTY task (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE143L),LNE143T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE143A,CDE1_1LDBYDIRTY  copy DIRTY bit flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE144  EQU   *         CDE extension exist (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE144L),LNE144T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE144A,CDE1_1EXT   copy extension flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE145  EQU   *         LPDE (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE145L),LNE145T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE145A,CDE1_1LPDE  copy LPDE/CDE flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE146  EQU   *         loaded to GLOBAL (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE146L),LNE146T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE146A,CDE1_1GLBL  copy global flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE147  EQU   *         module contaminated (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE147L),LNE147T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE147A,CDE1_1BAD   copy bad flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE148  EQU   *         RACF execute authority (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE148L),LNE148T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE148A,CDE1_1EXECAUTH   copy exec auth flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE150  EQU   *         Attribute 2:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE150L),LNE150T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE1_ATTR2(L'CDE1_ATTR2+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE150A,ZD01+8-L'LNE150A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE151  EQU   *         loaded by System (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE151L),LNE151T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE151A,CDE1_2LDBYSYS    copy loaded by system flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE152  EQU   *         being loaded (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE152L),LNE152T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE152A,CDE1_2BEINGLD    copy being loaded flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE153  EQU   *         RENT (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE153L),LNE153T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE153A,CDE1_2RENT  copy RENT flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE154  EQU   *         REUS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE154L),LNE154T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE154A,CDE1_2REUS  copy REUS flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE155  EQU   *         not REUS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE155L),LNE155T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE155A,CDE1_2NREUS copy no REUS flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE156  EQU   *         minor CDE (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE156L),LNE156T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE156A,CDE1_2MINOR copy minor CDE flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE157  EQU   *         resident JPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE157L),LNE157T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE157A,CDE1_2JPA   copy resident JPA flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE158  EQU   *         not loadable only (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE158L),LNE158T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE158A,CDE1_2NLDONLY    copy not loadable only flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE160  EQU   *         Attribute 3:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE160L),LNE160T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE1_ATTR3(L'CDE1_ATTR3+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE160A,ZD01+8-L'LNE160A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE161  EQU   *         in SPID 0 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE161L),LNE161T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE161A,CDE1_3LDSPID0    copy loaded in SPID 0 flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE162  EQU   *         module inactive (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE162L),LNE162T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE162A,CDE1_3INACTIVE   copy inactive flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE163  EQU   *         extent list built (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE163L),LNE163T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE163A,CDE1_3XLBILT     copy extent list built flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE164  EQU   *         minor EP addr has been relocated
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE164L),LNE164T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE164A,CDE1_3MEPREL     copy minor EP@ relocated flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE165  EQU   *         RMODE(ANY) (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE165L),LNE165T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE165A,CDE1_3RMODEANY   copy no RMODE(ANY) flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE166  EQU   *         OVLY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE166L),LNE166T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE166A,CDE1_3OVRLY copy OVLY flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE167  EQU   *         authorized library (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE167L),LNE167T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE167A,CDE1_3AUTHLIB    copy AUTH lib flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE168  EQU   *         authorized program (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE168L),LNE168T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE168A,CDE1_3AUTHPGM    copy AUTH pgm flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE170  EQU   *         Attribute 4:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE170L),LNE170T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE1_ATTR4(L'CDE1_ATTR4+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE170A,ZD01+8-L'LNE170A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE171  EQU   *         OMVS PATH provided (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE171L),LNE171T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE171A,CDE1_4PATHNME    copy OMVS path flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE172  EQU   *         PML running (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE172L),LNE172T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE172A,CDE1_4PML   copy PML running flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE173  EQU   *         split RMODE PGMOBJ (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE173L),LNE173T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE173A,CDE1_4SPLTRMODE  copy split RMODE pgmobj flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE174  EQU   *         HFS system shared module (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE174L),LNE174T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE174A,CDE1_4HFSSSLM    copy HFS shared lib mod flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE175  EQU   *
         SPACE 1
PCDE176  EQU   *         resident dynamic LPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE176L),LNE176T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE176A,CDE1_4LDDYNLPA   copy dynamic LPA flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE177  EQU   *         page protected on whole page (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE177L),LNE177T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE177A,CDE1_4PGPROT     copy page protect flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE178  EQU   *
         SPACE 1
PCDE180  EQU   *         Attribute 5:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE180L),LNE180T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE1_ATTR5(L'CDE1_ATTR5+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE180A,ZD01+8-L'LNE180A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE181  EQU   *
         SPACE 1
PCDE182  EQU   *
         SPACE 1
PCDE183  EQU   *
         SPACE 1
PCDE184  EQU   *
         SPACE 1
PCDE185  EQU   *
         SPACE 1
PCDE186  EQU   *
         SPACE 1
PCDE187  EQU   *
         SPACE 1
PCDE188  EQU   *
         SPACE 2
PCDE190  EQU   *
         CLC   CDE_NTRY_CNT,=H'1'
         JE    PCDE0800
         SPACE 1
PCDE319  EQU   *         CDE: xxxxx
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE119L),LNE119T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE119A,=CL5'major'
         JBITOFF ($CDE2_MAJOR),PCDE319A
         MVC   LNE119A,=CL5'minor'
PCDE319A EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE320  EQU   *         Program, Use count
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE120L),LNE120T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE120A,CDE2_NAME   copy program name
         ICM   R0,12,CDE2_USECNT
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE120B,ZD01+L'ZD01-L'LNE120B copy use count
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE321  EQU   *         EP addr, SPID
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE121L),LNE121T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE2_EP@(L'CDE2_EP@+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE121A,ZD01+8-L'LNE121A copy EP@
         ICM   R0,12,CDE2_SPID
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE121B,ZD01+L'ZD01-L'LNE121B copy SPID
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE330  EQU   *         Indicator byte-0:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE130L),LNE130T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE2_IND0(L'CDE2_IND0+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE130A,ZD01+8-L'LNE130A copy indicator
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE331  EQU   *         AMODE 31 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE131L),LNE131T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE131A,CDE2_0AMODE31    copy AMODE31 flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE332  EQU   *         AMODE 64 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE132L),LNE132T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE132A,CDE2_0AMODE64    copy AMODE 64 flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE333  EQU   *         major CDE (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE133L),LNE133T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE133A,CDE2_0MAJOR copy major CDE flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE340  EQU   *         Attribute 1:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE140L),LNE140T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE2_ATTR1(L'CDE2_ATTR1+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE140A,ZD01+8-L'LNE140A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE341  EQU   *         delete module (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE141L),LNE141T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE141A,CDE2_1DELMOD     copy delete mod flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE342  EQU   *         built by IDENTIFY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE142L),LNE142T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE142A,CDE2_1IDENTIFY   copy IDENTIFY flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE343  EQU   *         loaded by DIRTY task (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE143L),LNE143T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE143A,CDE2_1LDBYDIRTY  copy DIRTY bit flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE344  EQU   *         CDE extension exist (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE144L),LNE144T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE144A,CDE2_1EXT   copy extension flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE345  EQU   *         LPDE (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE145L),LNE145T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE145A,CDE2_1LPDE  copy LPDE/CDE flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE346  EQU   *         loaded to GLOBAL (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE146L),LNE146T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE146A,CDE2_1GLBL  copy global flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE347  EQU   *         module contaminated (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE147L),LNE147T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE147A,CDE2_1BAD   copy bad flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE348  EQU   *         RACF execute authority (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE148L),LNE148T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE148A,CDE2_1EXECAUTH   copy exec auth flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE350  EQU   *         Attribute 2:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE150L),LNE150T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE2_ATTR2(L'CDE2_ATTR2+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE150A,ZD01+8-L'LNE150A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE351  EQU   *         loaded by System (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE151L),LNE151T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE151A,CDE2_2LDBYSYS    copy loaded by system flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE352  EQU   *         being loaded (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE152L),LNE152T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE152A,CDE2_2BEINGLD    copy being loaded flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE353  EQU   *         RENT (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE153L),LNE153T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE153A,CDE2_2RENT  copy RENT flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE354  EQU   *         REUS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE154L),LNE154T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE154A,CDE2_2REUS  copy REUS flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE355  EQU   *         not REUS (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE155L),LNE155T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE155A,CDE2_2NREUS copy no REUS flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE356  EQU   *         minor CDE (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE156L),LNE156T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE156A,CDE2_2MINOR copy minor CDE flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE357  EQU   *          resident JPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE157L),LNE157T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE157A,CDE2_2JPA   copy resident JPA flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE358  EQU   *         not loadable only (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE158L),LNE158T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE158A,CDE2_2NLDONLY    copy not loadable only flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE360  EQU   *         Attribute 3:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE160L),LNE160T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE2_ATTR3(L'CDE1_ATTR3+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE160A,ZD01+8-L'LNE160A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE361  EQU   *         in SPID 0 (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE161L),LNE161T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE161A,CDE2_3LDSPID0    copy loaded in SPID 0 flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE362  EQU   *         module inactive (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE162L),LNE162T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE162A,CDE2_3INACTIVE   copy inactive flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE363  EQU   *         extent list built (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE163L),LNE163T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE163A,CDE2_3XLBILT     copy extent list built flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE364  EQU   *         minor EP addr has been relocated (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE164L),LNE164T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE164A,CDE2_3MEPREL     copy minor EP@ relocated flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE365  EQU   *         RMODE ANY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE165L),LNE165T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE165A,CDE2_3RMODEANY   copy no RMODE ANY flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE366  EQU   *         OVLY (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE166L),LNE166T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE166A,CDE2_3OVRLY copy OVLY flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE367  EQU   *         authorized library (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE167L),LNE167T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE167A,CDE2_3AUTHLIB    copy AUTH lib flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE368  EQU   *         authorized program (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE168L),LNE168T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE168A,CDE2_3AUTHPGM    copy AUTH pgm flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE370  EQU   *         Attribute 4:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE170L),LNE170T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE2_ATTR4(L'CDE2_ATTR4+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE170A,ZD01+8-L'LNE170A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE371  EQU   *         OMVS PATH provided (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE171L),LNE171T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE171A,CDE2_4PATHNME    copy OMVS path flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE372  EQU   *         PML running (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE172L),LNE172T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE172A,CDE2_4PML   copy PML running flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE373  EQU   *         split RMODE PGMOBJ (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE173L),LNE173T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE173A,CDE2_4SPLTRMODE  copy split RMODE pgmobj flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE374  EQU   *         HFS system shared module (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE174L),LNE174T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE174A,CDE2_4HFSSSLM    copy HFS shared lib mod flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE375  EQU   *
         SPACE 1
PCDE376  EQU   *         resident dynamic LPA (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE176L),LNE176T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE176A,CDE2_4LDDYNLPA   copy dynamic LPA flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE377  EQU   *         page protected on whole page (x)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE177L),LNE177T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE177A,CDE2_4PGPROT copy page protect flag
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE378  EQU   *
         SPACE 1
PCDE380  EQU   *         Attribute 5:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE180L),LNE180T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),CDE2_ATTR5(L'CDE2_ATTR5+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE180A,ZD01+8-L'LNE180A copy attribute
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCDE381  EQU   *
         SPACE 1
PCDE382  EQU   *
         SPACE 1
PCDE383  EQU   *
         SPACE 1
PCDE384  EQU   *
         SPACE 1
PCDE385  EQU   *
         SPACE 1
PCDE386  EQU   *
         SPACE 1
PCDE387  EQU   *
         SPACE 1
PCDE388  EQU   *
         SPACE 1
PCDE0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTLDQ   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
PLDQ189  EQU   *         LE module query:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE189L),LNE189T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PLDQ190  EQU   *         Token, Size
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE190L),LNE190T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),LDQ_TOKEN(L'LDQ_TOKEN+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE190A,ZD01+8-L'LNE190A copy token
         L     R0,LDQ_POBJLEN
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE190B,ZD01+L'ZD01-L'LNE190B copy size
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PLDQ191  EQU   *         LP addr, EP addr
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE191L),LNE191T
         MVC   LNEPGM,=CL8'&CSECT'
         UNPK  ZD01(9),LDQ_POBJLPA(L'LDQ_POBJLPA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE191A,ZD01+8-L'LNE191A copy LP@
         UNPK  ZD01(9),LDQ_POBJEPA(L'LDQ_POBJEPA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE191B,ZD01+8-L'LNE191B copy EP@
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PLDQ192  EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE192L),LNE192T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R1,15,LDQ_NLEN      Q. any program name
         JZ    PLDQ193             A. no, bypass
         CHI   R1,8                Q. name longer than 8-bytes
         JNH   PLDQ192A            A. no, bypass
         L     R1,F8
PLDQ192A EQU   *
         AHI   R1,-1
         J     *+4+6
         MVC   LNE192A(0),LDQ_NAME
*+4+6    EQU   *
         EXRL  R1,*-6
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PLDQ193  EQU   *
         SPACE 1
PLDQ0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTSLM   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
PSLM193  EQU   *         Executable information:
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE193L),LNE193T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM194  EQU   *         CICS translator level (xxx)
         CLI   LM_CICS_XLVL,C' '
         JE    PSLM192
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE194L),LNE194T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE194A,LM_CICS_XLVL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM192  EQU   *         program name
         CLI   LMLE_NAME,C' '
         JE    PSLM195
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE192L),LNE192T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE192A,LMLE_NAME
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM195  EQU   *         LE entry type (xxxxxxxx)
         CLI   LMLE_ENTRY,C' '
         JE    PSLM196
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE195L),LNE195T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE195A,LMLE_ENTRY
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM196  EQU   *         LE conforming language
         CLI   LMLE_LANG,C' '
         JE    PSLM197
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE196L),LNE196T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE196A,LMLE_LANG
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM197  EQU   *         LE control level
         CLI   LMLE_CTLLVL,C' '
         JE    PSLM198
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE197L),LNE197T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE197A,LMLE_CTLLVL
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM198  EQU   *         LE timestamp
         CLI   LMLE_TSTAMP,C' '
         JE    PSLM199
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE198L),LNE198T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE198A,LMLE_TSTAMP
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM199  EQU   *
         CLI   LM_LANG,C' '
         JE    PSLM200
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE199L),LNE199T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE199A,LM_LANG
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PSLM200  EQU   *
         SPACE 1
PSLM0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
PRTCBL   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
PCBL200  EQU   *         COBOL information:
         CLC   LMLE_LANG(5),=CL5'COBOL'
         JNE   PCBL0800
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE200L),LNE200T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL201  EQU   *         DATA DIVISION statement count
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE201L),LNE201T
         MVC   LNEPGM,=CL8'&CSECT'
         L     R0,PSI_DDS#
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE201A,ZD01+L'ZD01-L'LNE201A copy DD stmt count
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL202  EQU   *         PROCEDURE DIVISION statement count
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE202L),LNE202T
         MVC   LNEPGM,=CL8'&CSECT'
         L     R0,PSI_PDS#
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE202A,ZD01+L'ZD01-L'LNE202A copy PD stmt count
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL203  EQU   *         CCSID - CODEPAGE(nnnn)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE203L),LNE203T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R0,12,PSI_CDPG
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE203A,ZD01+L'ZD01-L'LNE203A copy code page
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL204  EQU   *         hardware level - ARCH(nn)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE204L),LNE204T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R0,12,PSI_ARCH
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE204A,ZD01+L'ZD01-L'LNE204A copy ARCH
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL205  EQU   *         optimization level - OPT(n)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE205L),LNE205T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R0,12,PSI_OPT
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE205A,ZD01+L'ZD01-L'LNE205A copy OPT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL206  EQU   *         COBOL Signature level (nn)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE206L),LNE206T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R0,12,PSI_LVL
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE206A,ZD01+L'ZD01-L'LNE206A copy Signiture level
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL207  EQU   *         COBOL Signature length (nn)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE207L),LNE207T
         MVC   LNEPGM,=CL8'&CSECT'
         ICM   R0,12,PSI_LEN
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE207A,ZD01+L'ZD01-L'LNE207A copy Signature length
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL208  EQU   *         build level info
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE208L),LNE208T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE208A,PSI_BINF    build|level info
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
PCBL209  EQU   *         Compiler Options(s)
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE209L),LNE209T
         MVC   LNEPGM,=CL8'&CSECT'
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
         MVI   FLUSHSW,C'N'
         XC    RO,RO          clear request options
         MVI   RO_DFLT_STRIP_CH,C' '    set default(s)
         MVI   RO_DFLT_DELIM_CH,C' '
         MVI   RO_DFLT_PAD_CH,C' '
         XC    SRC_LEN,SRC_LEN
         MVI   SRC_TXT,C' '
         MVC   SRC_TXT+1(L'SRC_TXT-1),SRC_TXT
         MVI   TP_PAT_TYPE,$RSTR
         MVC   TP_STR_SIZE,=Y(L'RSLT_TXT)
         XC    TP_STR_LEN,TP_STR_LEN
         MVI   RSLT_TXT,C' '
         MVC   RSLT_TXT+1(L'RSLT_TXT-1),RSLT_TXT
         SPACE 1
PCBL220  EQU   *         ADV*|NOADV
         LA    R0,L'ADV
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'ADV),ADV
         JBITON ($CBL_ADV),PCBL222
         MVC   SRC_TXT(L'NO),NO
PCBL222  EQU   *         APOST|QUOTE*
         BRAS  RE,APPEND
         JBITOFF ($CBL_APOST),PCBL224
         LA    R0,L'LITCHR1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'LITCHR1),LITCHR1
         J     PCBL226
PCBL224  EQU   *
         LA    R0,L'LITCHR2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'LITCHR2),LITCHR2
PCBL226  EQU   *         DATA(24)|DATA(31*)
         BRAS  RE,APPEND
         JBITOFF ($CBL_DATA31),PCBL228
         LA    R0,L'DATA1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DATA1),DATA1   DATA(31)
         J     PCBL230
PCBL228  EQU   *
         LA    R0,L'DATA2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DATA2),DATA2   DATA(24)
PCBL230  EQU   *         D|NOD
         BRAS  RE,APPEND
         LA    R0,L'DECK
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DECK),DECK
         JBITON ($CBL_DECK),PCBL232
         MVC   SRC_TXT(L'NO),NO
PCBL232  EQU   *         DU|NODU*
         BRAS  RE,APPEND
         LA    R0,L'DUMP
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DUMP),DUMP
         JBITON ($CBL_DUMP),PCBL234
         MVC   SRC_TXT(L'NO),NO
PCBL234  EQU   *         DYN|NODYN*
         BRAS  RE,APPEND
         LA    R0,L'DYNAM
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DYNAM),DYNAM
         JBITON ($CBL_DYNAM),PCBL236
         MVC   SRC_TXT(L'NO),NO
PCBL236  EQU   *         FSRT|NOFSRT*
         BRAS  RE,APPEND
         LA    R0,L'FASTSRT
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'FASTSRT),FASTSRT
         JBITON ($CBL_FASTSRT),PCBL238
         MVC   SRC_TXT(L'NO),NO
PCBL238  EQU   *         SQLIMS|NOSQLIMS*
         BRAS  RE,APPEND
         CLC   LMLE_TSVRM(L'CVRM5#2),CVRM5#2 Q. < COBOL V5.2
         JL    PCBL241                       A. yes, bypass
         LA    R0,L'SQLIMS
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SQLIMS),SQLIMS
         JBITON ($CBL_SQLIMS),PCBL240
         MVC   SRC_TXT(L'NO),NO
PCBL240  EQU   *
         BRAS  RE,APPEND
PCBL241  EQU   *         LIB*|NOLIB
         LA    R0,L'LIB
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'LIB),LIB
         JBITON ($CBL_LIB),PCBL242
         MVC   SRC_TXT(L'NO),NO
PCBL242  EQU   *         LIST|NOLIST*
         BRAS  RE,APPEND
         LA    R0,L'LIST
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'LIST),LIST
         JBITON ($CBL_LIST),PCBL244
         MVC   SRC_TXT(L'NO),NO
PCBL244  EQU   *         MAP|NOMAP*
         BRAS  RE,APPEND
         LA    R0,L'MAP
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'MAP),MAP
         JBITON ($CBL_MAP),PCBL246
         MVC   SRC_TXT(L'NO),NO
PCBL246  EQU   *         NUM|NONUM*
         BRAS  RE,APPEND
         LA    R0,L'NUMBER
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMBER),NUMBER
         JBITON ($CBL_NUM),PCBL248
         MVC   SRC_TXT(L'NO),NO
PCBL248  EQU   *         OBJ*|NOOBJ
         BRAS  RE,APPEND
         LA    R0,L'OBJECT
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OBJECT),OBJECT
         JBITON ($CBL_OBJECT),PCBL250
         MVC   SRC_TXT(L'NO),NO
PCBL250  EQU   *         OFF|NOOFF*
         BRAS  RE,APPEND
         LA    R0,L'OFFSET
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OFFSET),OFFSET
         JBITON ($CBL_OFFSET),PCBL252
         MVC   SRC_TXT(L'NO),NO
PCBL252  EQU   *         OPT|NOOPT*     obsolete
         BRAS  RE,APPEND
         CLC   LMLE_TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JNL   PCBL255                       A. yes, bypass
         LA    R0,L'OPTIMIZE
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OPTIMIZE),OPTIMIZE
         JBITON ($CBL_OPT),PCBL254
         MVC   SRC_TXT(L'NO),NO
PCBL254  EQU   *
         BRAS  RE,APPEND
PCBL255  EQU   *         OUTDD(ddname|SYSOUT*)
         LA    R0,L'OUTDD
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OUTDD),OUTDD
         JBITON ($CBL_OUTDD),PCBL256
         MVC   SRC_TXT(L'NO),NO
PCBL256  EQU   *         NUMPROC(PFD|NOPFD*)
         BRAS  RE,APPEND
         JBITON  ($CBL_NUMPROCMIG),PCBL259
         LA    R0,L'NUMPROC1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMPROC1),NUMPROC1
         JBITON ($CBL_NUMPROCPFD),PCBL258
         MVC   SRC_TXT+8(L'NO),NO
PCBL258  EQU   *
         BRAS  RE,APPEND
PCBL259  EQU   *         RENT*|NORENT
         LA    R0,L'RENT
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'RENT),RENT
         JBITON ($CBL_RENT),PCBL260
         MVC   SRC_TXT(L'NO),NO
PCBL260  EQU   *         RES*|NORES
         BRAS  RE,APPEND
         LA    R0,L'RES
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'RES),RES
         JBITON ($CBL_RES),PCBL262
         MVC   SRC_TXT(L'NO),NO
PCBL262  EQU   *         SEQ*|NOSEQ
         BRAS  RE,APPEND
         LA    R0,L'SEQUENCE
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SEQUENCE),SEQUENCE
         JBITON ($CBL_SEQUENCE),PCBL264
         MVC   SRC_TXT(L'NO),NO
PCBL264  EQU   *         SIZE(MAX)      obsolete
         BRAS  RE,APPEND
**       J     PCBL267
PCBL266  EQU   *
**       BRAS  RE,APPEND
PCBL267  EQU   *         S*|NOS
         LA    R0,L'SOURCE
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SOURCE),SOURCE
         JBITON ($CBL_SOURCE),PCBL268
         MVC   SRC_TXT(L'NO),NO
PCBL268  EQU   *         SSR|NOSSR
         BRAS  RE,APPEND
         LA    R0,L'SSRANGE
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SSRANGE),SSRANGE
         JBITON ($CBL_SSRANGE),PCBL270
         MVC   SRC_TXT(L'NO),NO
PCBL270  EQU   *         TERM|NOTERM*
         BRAS  RE,APPEND
         LA    R0,L'TERM
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TERM),TERM
         JBITON ($CBL_TERM),PCBL272
         MVC   SRC_TXT(L'NO),NO
PCBL272  EQU   *         TEST|NOTEST*
         BRAS  RE,APPEND
         LA    R0,L'TEST
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TEST),TEST
         JBITON ($CBL_TEST),PCBL274
         MVC   SRC_TXT(L'NO),NO
PCBL274  EQU   *         TRUNC(STD*)|TRUNC(OPT)
         BRAS  RE,APPEND
         JBITON ($CBL_TRUNCBIN),PCBL279
         JBITOFF ($CBL_TRUNCSTD),PCBL276
         LA    R0,L'TRUNC1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TRUNC1),TRUNC1      TRUNC(STD)
         J     PCBL278
PCBL276  EQU   *
         LA    R0,L'TRUNC2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TRUNC2),TRUNC2      TRUNC(OPT)
PCBL278  EQU   *
         BRAS  RE,APPEND
PCBL279  EQU   *         WD|NOWD*
         LA    R0,L'WORD
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'WORD),WORD
         JBITON ($CBL_WORD),PCBL280
         MVC   SRC_TXT(L'NO),NO
PCBL280  EQU   *         VBREF|NOVBREF*
         BRAS  RE,APPEND
         LA    R0,L'VBREF
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'VBREF),VBREF
         JBITON ($CBL_VBREF),PCBL282
         MVC   SRC_TXT(L'NO),NO
PCBL282  EQU   *         X*|NOX
         BRAS  RE,APPEND
         LA    R0,L'XREF
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'XREF),XREF
         JBITON ($CBL_XREF),PCBL284
         MVC   SRC_TXT(L'NO),NO
PCBL284  EQU   *         ZWB*|NOZWB
         BRAS  RE,APPEND
         LA    R0,L'ZWB
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'ZWB),ZWB
         JBITON ($CBL_ZWB),PCBL286
         MVC   SRC_TXT(L'NO),NO
PCBL286  EQU   *         NAME|NONAME*
         BRAS  RE,APPEND
         LA    R0,L'NAME
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NAME),NAME
         JBITON ($CBL_NAME),PCBL288
         MVC   SRC_TXT(L'NO),NO
PCBL288  EQU   *         CMPR2|NOCMPR2  obsolete
         BRAS  RE,APPEND
**       place code here for what replaces CMPR2
**       J     PCBL291
PCBL290  EQU   *
**       BRAS  RE,APPEND
PCBL291  EQU   *         NUMPROC(MIG)
         CLC   LMLE_TSVRM(L'CVRM5#1),CVRM5#1 Q. < COBOL V5.1
         JL    PCBL293                       A. yes, bypass
         JBITOFF ($CBL_NUMPROCMIG),PCBL293
         LA    R0,L'NUMPROC2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMPROC2),NUMPROC2
PCBL292  EQU   *
         BRAS  RE,APPEND
PCBL293  EQU   *         NUMCLS(ALT|PRIME*)
         JBITOFF ($CBL_NUMCLSALT),PCBL294
         LA    R0,L'NUMCLS1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCLS1),NUMCLS1    NUMCLS(ALT)
         J     PCBL296
PCBL294  EQU   *
         LA    R0,L'NUMCLS2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCLS2),NUMCLS2    NUMCLS(PRIME)
PCBL296  EQU   *         DBCS*|NODBCS
         BRAS  RE,APPEND
         LA    R0,L'DBCS
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DBCS),DBCS
         JBITON ($CBL_DBCS),PCBL298
         MVC   SRC_TXT(L'NO),NO
PCBL298  EQU   *         AWO|NOAWO*
         BRAS  RE,APPEND
         LA    R0,L'AWO
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'AWO),AWO
         JBITON ($CBL_AWO),PCBL300
         MVC   SRC_TXT(L'NO),NO
PCBL300  EQU   *         TRUNC(BIN)
         BRAS  RE,APPEND
         JBITOFF ($CBL_TRUNCBIN),PCBL303
         LA    R0,L'TRUNC3
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TRUNC3),TRUNC3 TRUNC(BIN)
PCBL302  EQU   *
         BRAS  RE,APPEND
PCBL303  EQU   *         ADATA|NOADATA*
         LA    R0,L'ADATA
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'ADATA),ADATA
         JBITON ($CBL_ADATA),PCBL304
         MVC   SRC_TXT(L'NO),NO
PCBL304  EQU   *         CURR|NOCURR*
         BRAS  RE,APPEND
         LA    R0,L'CURRENCY
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'CURRENCY),CURRENCY
         JBITON ($CBL_CURRENCY),PCBL306
         MVC   SRC_TXT(L'NO),NO
PCBL306  EQU   *         CLASS|PROGRAM*    not a compile option
         BRAS  RE,APPEND
         JBITOFF ($COD_CLASS),PCBL308
         LA    R0,L'OBJTYP1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OBJTYP1),OBJTYP1    CLASS
         J     PCBL310
PCBL308  EQU   *
         LA    R0,L'OBJTYP2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OBJTYP2),OBJTYP2    PROGRAM
PCBL310  EQU   *
         BRAS  RE,APPEND
         SPACE 1         this is a gap
PCBL344  EQU   *         VS(C*)|VS(S)
**       BRAS  RE,APPEND
         CLC   LMLE_TSVRM(L'CVRM6#1),CVRM6#1 Q. < COBOL V6.1
         JL    PCBL349                       A. yes, bypass
         JBITOFF ($CBL_VSAMOPENFS),PCBL346
         LA    R0,L'VSOPNFS1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'VSOPNFS1),VSOPNFS1  VS(C)
         J     PCBL348
PCBL346  EQU   *
         LA    R0,L'VSOPNFS2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'VSOPNFS2),VSOPNFS2  VS(S)
PCBL348  EQU   *
         BRAS  RE,APPEND
PCBL349  EQU   *         SUPP*|NOSUPP
         CLC   LMLE_TSVRM(L'CVRM6#1),CVRM6#1 Q. < COBOL V6.1
         JL    PCBL351                       A. yes, bypass
         LA    R0,L'SUPPRESS
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SUPPRESS),SUPPRESS
         JBITON ($CBL_SUPPRESS),PCBL350
         MVC   SRC_TXT(L'NO),NO
PCBL350  EQU   *
         BRAS  RE,APPEND
PCBL351  EQU   *         SSR(ZLEN|NOZLEN*)
         JBITOFF ($CBL_SSRANGE),PCBL357
         CLC   LMLE_TSVRM(L'CVRM6#2),CVRM6#2 Q. < COBOL V6.2
         JL    PCBL357                       A. yes, bypass
         LA    R0,L'SSRANGE1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SSRANGE1),SSRANGE1
         JBITON ($CBL_SSRZLEN),PCBL352
         MVC   SRC_TXT+4(L'NO),NO
PCBL352  EQU   *         SSR(ABD|MSG*)
         BRAS  RE,APPEND
         JBITOFF ($CBL_SSRABD),PCBL354
         LA    R0,L'SSRANGE2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SSRANGE2),SSRANGE2  SSR(ABD)
         J     PCBL356
PCBL354  EQU   *
         LA    R0,L'SSRANGE3
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SSRANGE3),SSRANGE3  SSR(MSG)
PCBL356  EQU   *
         BRAS  RE,APPEND
PCBL357  EQU   *         INL|NOINL*
         CLC   LMLE_TSVRM(L'CVRM6#2),CVRM6#2 Q. < COBOL V6.2
         JL    PCBL359                       A. yes, bypass
         LA    R0,L'INLINE
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'INLINE),INLINE
         JBITON ($CBL_INLINE),PCBL358
         MVC   SRC_TXT(L'NO),NO
PCBL358  EQU   *
         BRAS  RE,APPEND
PCBL359  EQU   *
PCBL370  EQU   *         RMODE(ANY)|RMODE(24)
         JBITOFF ($CBL_RMODEANY),PCBL372
         LA    R0,L'RMODE1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'RMODE1),RMODE1 RMODE(ANY)
         J     PCBL374
PCBL372  EQU   *
         LA    R0,L'RMODE2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'RMODE2),RMODE2 RMODE(24)
PCBL374  EQU   *         TEST(HOOK)
         BRAS  RE,APPEND
         JBITOFF ($CBL_TEST),PCBL376
         JBITOFF ($CBL_TESTSTMT,$CBL_TESTPATH,$CBL_TESTBLOC),PCBL376
         LA    R0,L'TEST5
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TEST5),TEST5   TEST(HOOK)
         BRAS  RE,APPEND
PCBL376  EQU   *         OPT(FULL)|OPT(STD)
         JBITOFF ($CBL_OPT),PCBL381
         JBITOFF ($CBL_OPTFULL),PCBL378
         LA    R0,L'OPT1A
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OPT1A),OPT1A   OPT(FULL)
         J     PCBL380
PCBL378  EQU   *
         LA    R0,L'OPT2A
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OPT2A),OPT2A   OPT(STD)
PCBL380  EQU   *
         BRAS  RE,APPEND
PCBL381  EQU   *         INTDATE(ANSI*)|INTDATE(LILIAN)
         JBITOFF ($CBL_INTDATELILIAN),PCBL382
         LA    R0,L'INTDATE1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'INTDATE1),INTDATE1  INTDATE(LILIAN)
         J     PCBL384
PCBL382  EQU   *
         LA    R0,L'INTDATE2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'INTDATE2),INTDATE2  INTDATE(ANSI)
PCBL384  EQU   *         xxTEST(SEP*|NOSEP)
         BRAS  RE,APPEND
         LA    R0,L'TEST4
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TEST4),TEST4
         JBITON ($CBL_TEST),PCBL385
         MVC   SRC_TXT(L'NO),NO
PCBL385  EQU   *
         JBITON ($CBL_xxTESTSEP),PCBL386
         MVC   SRC_TXT+7(L'NO),NO
PCBL386  EQU   *         xxTEST(SEP(DSNAME*|NODSNAME))
         BRAS  RE,APPEND
         CLC   LMLE_TSVRM(L'CVRM6#2),CVRM6#2 Q. < COBOL V6.2
         JL    PCBL390                       A. yes, bypass
         LA    R0,L'TEST9
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TEST9),TEST9
         JBITON ($CBL_TEST),PCBL388
         MVC   SRC_TXT(L'NO),NO
PCBL388  EQU   *
         JBITON ($CBL_xxTESTSEPDSN),PCBL389
         MVC   SRC_TXT+11(L'NO),NO
PCBL389  EQU   *
         BRAS  RE,APPEND
PCBL390  EQU   *         PGMN(CO)
         JBITON ($CBL_PGMNLONGUPPER),PCBL392
         JBITON ($CBL_PGMNLONGMIXED),PCBL394
         LA    R0,L'PGMNCO
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'PGMNCO),PGMNCO
         BRAS  RE,APPEND
         J     PCBL396
PCBL392  EQU   *         PGMN(LU)
         LA    R0,L'PGMNLU
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'PGMNLU),PGMNLU
         BRAS  RE,APPEND
         J     PCBL396
PCBL394  EQU   *         PGMN(LM)
         LA    R0,L'PGMNLM
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'PGMNLM),PGMNLM
         BRAS  RE,APPEND
PCBL396  EQU   *         DLL|NODLL*
         LA    R0,L'DLL
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DLL),DLL
         JBITON ($CBL_DLL),PCBL398
         MVC   SRC_TXT(L'NO),NO
PCBL398  EQU   *         EXP|NOEXP*
         BRAS  RE,APPEND
         LA    R0,L'EXPORT
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'EXPORT),EXPORT
         JBITON ($CBL_EXPORTALL),PCBL400
         MVC   SRC_TXT(L'NO),NO
PCBL400  EQU   *         xxTEST(SO*|NOSO)
         BRAS  RE,APPEND
         LA    R0,L'TEST7
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TEST7),TEST7
         JBITON  ($CBL_TEST),PCBL401
         MVC   SRC_TXT(L'NO),NO
PCBL401  EQU   *
         JBITON ($CBL_xxTESTSRC),PCBL402
         MVC   SRC_TXT+7(L'NO),NO
PCBL402  EQU   *
         BRAS  RE,APPEND
PCBL403  EQU   *         AR(C*)|AR(E)
         JBITOFF ($CBL_ARITHEXTEND),PCBL404
         LA    R0,L'ARITH1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'ARITH1),ARITH1 AR(C)
         J     PCBL406
PCBL404  EQU   *
         LA    R0,L'ARITH2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'ARITH2),ARITH2 AR(E)
PCBL406  EQU   *         THREAD|NOTHREAD*
         BRAS  RE,APPEND
         LA    R0,L'THREAD
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'THREAD),THREAD
         JBITON ($CBL_THREAD),PCBL408
         MVC   SRC_TXT(L'NO),NO
PCBL408  EQU   *         TEST(EJPD*|NOEJPD)
         BRAS  RE,APPEND
         JBITOFF ($CBL_TEST),PCBL411
         CLC   LMLE_TSVRM(L'CVRM4#1),CVRM4#1 Q. < COBOL V4.1
         JL    PCBL411                       A. yes, bypass
         LA    R0,L'TEST6
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TEST6),TEST6
         JBITON ($CBL_TESTEJPD),PCBL410
         MVC   SRC_TXT+5(L'NO),NO
PCBL410  EQU   *
         BRAS  RE,APPEND
PCBL411  EQU   *         SQL|NOSQL*
         LA    R0,L'SQL
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SQL),SQL
         JBITON ($CBL_SQL),PCBL412
         MVC   SRC_TXT(L'NO),NO
PCBL412  EQU   *         CICS|NOCICS*
         BRAS  RE,APPEND
         LA    R0,L'CICS
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'CICS),CICS
         JBITON ($CBL_CICS),PCBL414
         MVC   SRC_TXT(L'NO),NO
PCBL414  EQU   *         MD|NOMD*
         BRAS  RE,APPEND
         LA    R0,L'MDECK
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'MDECK),MDECK
         JBITON ($CBL_MDECK),PCBL416
         MVC   SRC_TXT(L'NO),NO
PCBL416  EQU   *         SQLC*|NOSQLC
         BRAS  RE,APPEND
         LA    R0,L'SQLCCSID
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SQLCCSID),SQLCCSID
         JBITON ($CBL_SQLCCSID),PCBL418
         MVC   SRC_TXT(L'NO),NO
PCBL418  EQU   *         OPTFILE|NOOPTFILE
         BRAS  RE,APPEND
         LA    R0,L'OPTFILE
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'OPTFILE),OPTFILE
         JBITON ($CBL_OPTFILE),PCBL420
         MVC   SRC_TXT(L'NO),NO
PCBL420  EQU   *         XP(X*)|XP(C)
         BRAS  RE,APPEND
         JBITOFF ($CBL_XMLPARSEXMLSS),PCBL422
         LA    R0,L'XMLP1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'XMLP1),XMLP1   XP(X)
         J     PCBL424
PCBL422  EQU   *
         LA    R0,L'XMLP2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'XMLP2),XMLP2   XP(C)
PCBL424  EQU   *         BLOCK0|NOBLOCK0
         BRAS  RE,APPEND
         LA    R0,L'BLOCK0
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'BLOCK0),BLOCK0
         JBITON ($CBL_BLOCK0),PCBL426
         MVC   SRC_TXT(L'NO),NO
PCBL426  EQU   *         DS(C*)|DS(S)
         BRAS  RE,APPEND
         CLC   LMLE_TSVRM(L'CVRM5#1),CVRM5#1 Q. < COBOL V5.1
         JL    PCBL431                       A. yes, bypass
         JBITOFF ($CBL_DISPSIGNSEP),PCBL428
         LA    R0,L'DSPSGN1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DSPSGN1),DSPSGN1    DS(S)
         J     PCBL430
PCBL428  EQU   *
         LA    R0,L'DSPSGN2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'DSPSGN2),DSPSGN2    DS(C)
PCBL430  EQU   *
         BRAS  RE,APPEND
PCBL431  EQU   *         SO|NOSO*
         CLC   LMLE_TSVRM(L'CVRM5#1),CVRM5#1 Q. < COBOL V5.1
         JL    PCBL433                       A. yes, bypass
         LA    R0,L'STGOPT
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'STGOPT),STGOPT
         JBITON ($CBL_STGOPT),PCBL432
         MVC   SRC_TXT(L'NO),NO
PCBL432  EQU   *
         BRAS  RE,APPEND
PCBL433  EQU   *         AFP(VOLATILE|NOVOLATILE*)
         CLC   LMLE_TSVRM(L'CVRM5#1),CVRM5#1 Q. < COBOL V5.1
         JL    PCBL435                       A. yes, bypass
         LA    R0,L'AFP
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'AFP),AFP
         JBITON ($CBL_AFPVOLATILE),PCBL434
         MVC   SRC_TXT+4(L'NO),NO
PCBL434  EQU   *
         BRAS  RE,APPEND
PCBL435  EQU   *         HGPR(PRESERVE*|NOPRESERVE)
         CLC   LMLE_TSVRM(L'CVRM5#1),CVRM5#1 Q. < COBOL V5.1
         JL    PCBL437                       A. yes, bypass
         LA    R0,L'HGPR
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'HGPR),HGPR
         JBITON ($CBL_HGPRPRESERVE),PCBL436
         MVC   SRC_TXT+5(L'NO),NO
PCBL436  EQU   *
         BRAS  RE,APPEND
PCBL437  EQU   *         NOTEST(DWARF)
         JBITON ($CBL_TEST),PCBL439
         CLC   LMLE_TSVRM(L'CVRM5#1),CVRM5#1 Q. < COBOL V5.1.1
         JL    PCBL439                       A. yes, bypass
         JBITOFF ($CBL_NOTESTDWARF),PCBL439
         LA    R0,L'TEST8
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'TEST8),TEST8
PCBL438  EQU   *
         BRAS  RE,APPEND
PCBL439  EQU   *         QUA(C*)|QUA(E)
         CLC   LMLE_TSVRM(L'CVRM5#2),CVRM5#2 Q. < COBOL V5.2
         JL    PCBL443                       A. yes, bypass
         JBITOFF ($CBL_QUALIFYEXTEND),PCBL440
         LA    R0,L'QUALIFY1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'QUALIFY1),QUALIFY1  QUA(E)
         J     PCBL442
PCBL440  EQU   *
         LA    R0,L'QUALIFY2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'QUALIFY2),QUALIFY2  QUA(C)
PCBL442  EQU   *
         BRAS  RE,APPEND
PCBL443  EQU   *         VLR(C)|VLR(S*)
         CLC   LMLE_TSVRM(L'CVRM5#2),CVRM5#2 Q. < COBOL V5.2
         JL    PCBL447                       A. yes, bypass
         JBITOFF ($CBL_VLRCOMPAT),PCBL446
         LA    R0,L'VLR1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'VLR1),VLR1     VLR(C)
         J     PCBL446
PCBL444  EQU   *
         LA    R0,L'VLR2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'VLR2),VLR2     VLR(S)
PCBL446  EQU   *
         BRAS  RE,APPEND
PCBL447  EQU   *         CPYR|NOCPYR*
         CLC   LMLE_TSVRM(L'CVRM5#2),CVRM5#2 Q. < COBOL V5.2
         JL    PCBL449                       A. yes, bypass
         LA    R0,L'CPYR
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'CPYR),CPYR
         JBITON ($CBL_COPYRIGHT),PCBL448
         MVC   SRC_TXT(L'NO),NO
PCBL448  EQU   *
         BRAS  RE,APPEND
PCBL449  EQU   *         SERV|NOSERV*  (64-bytes)
         CLC   LMLE_TSVRM(L'CVRM5#2),CVRM5#2 Q. < COBOL V5.2
         JL    PCBL451                       A. yes, bypass
         LA    R0,L'SERV
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'SERV),SERV
         JBITON ($CBL_SERVICE),PCBL450
         MVC   SRC_TXT(L'NO),NO
PCBL450  EQU   *
         BRAS  RE,APPEND
PCBL451  EQU   *         ZD(MIG)
         CLC   LMLE_TSVRM(L'CVRM5#2),CVRM5#2 Q. < COBOL V5.2
         JL    PCBL455                       A. yes, bypass
         JBITOFF ($CBL_ZONEDATAMIG),PCBL452
         LA    R0,L'ZONEDAT1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'ZONEDAT1),ZONEDAT1
         J     PCBL454
PCBL452  EQU   *         ZD(PFD|NOPFD)
         LA    R0,L'ZONEDATA
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'ZONEDATA),ZONEDATA
         JBITON ($CBL_ZONEDATAPFD),PCBL454
         MVC   SRC_TXT(L'NO),NO
PCBL454  EQU   *
         BRAS  RE,APPEND
PCBL455  EQU   *
PCBL460  EQU   *         NONC
         CLC   LMLE_TSVRM(L'CVRM6#1),CVRM6#1 Q. < COBOL V6.2
         JL    PCBL481                       A. yes, bypass
         JBITON ($CBL_NUMCHECKZONX),PCBL462
         JBITON ($CBL_NUMCHECKZONNOX),PCBL464
         JBITON ($CBL_NUMCHECKPAC),PCBL466
         JBITON ($CBL_NUMCHECKBIN),PCBL468
         LA    R0,L'NUMCHK
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCHK),NUMCHK NONC
         J     PCBL474
PCBL462  EQU   *         NC(ZON(  ALPHNUM))
         JBITOFF ($CBL_NUMCHECKZONX),PCBL464
         LA    R0,L'NUMCHK1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCHK1),NUMCHK1
         BRAS  RE,APPEND
         J     PCBL466
PCBL464  EQU   *         NC(ZON(NOALPHNUM))
         JBITOFF ($CBL_NUMCHECKZONNOX),PCBL466
         LA    R0,L'NUMCHK1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCHK1),NUMCHK1
         MVC   SRC_TXT+7(L'NO),NO
         BRAS  RE,APPEND
PCBL466  EQU   *         NC(PAC)
         JBITOFF ($CBL_NUMCHECKPAC),PCBL468
         LA    R0,L'NUMCHK2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCHK2),NUMCHK2
         BRAS  RE,APPEND
PCBL468  EQU   *         NC(BIN)
         JBITOFF ($CBL_NUMCHECKBIN),PCBL470
         LA    R0,L'NUMCHK3
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCHK3),NUMCHK3
         BRAS  RE,APPEND
PCBL470  EQU   *         NC(ABD)|NC(MSG*)
         JBITOFF ($CBL_PARMCHECKABD),PCBL472
         LA    R0,L'NUMCHK4
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCHK4),NUMCHK4    NC(ABD)
         J     PCBL474
PCBL472  EQU   *
         LA    R0,L'NUMCHK5
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'NUMCHK5),NUMCHK5    NC(MSG)
PCBL474  EQU   *
         BRAS  RE,APPEND
PCBL475  EQU   *         PC|NOPC*
         LA    R0,L'PRMCHK
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'PRMCHK),PRMCHK
         JBITON ($CBL_PARMCHECK),PCBL476
         MVC   SRC_TXT(L'NO),NO
PCBL476  EQU   *         PC(ABD|MSG*)
         BRAS  RE,APPEND
         JBITOFF ($CBL_PARMCHECKABD),PCBL478
         LA    R0,L'PRMCHK1
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'PRMCHK1),PRMCHK1    PC(ABD)
         J     PCBL480
PCBL478  EQU   *
         LA    R0,L'PRMCHK2
         STH   R0,SRC_LEN
         MVC   SRC_TXT(L'PRMCHK2),PRMCHK2    PC(MSG)
PCBL480  EQU   *
         BRAS  RE,APPEND
PCBL481  EQU   *
         SPACE 1
PCBL600  EQU   *
         MVI   FLUSHSW,C'Y'
         BRAS  RE,APPEND
         SPACE 1
PCBL0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* LEVEL 2 PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
APPEND   AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
         CLI   FLUSHSW,C'Y'   Q. flush the print buffer
         JE    APND0110       A. yes, bypass
         SPACE 1
APND0100 EQU   *
         XC    LEFC,LEFC      clear LE feed back area
         L     R6,PGMPARM1    get addr of ASCA
         USING ASCAHDR,R6     est addr to ASCA
         AS2PLIST (ASCAHDR,RO,SRC_LEN,F1,TP_PAT_PFX,LEFC),             +
               VL,MF=(E,PLIST)
         DROP  R6
         L     RF,@APND
*        CALL  ASUDAPND
         BASR  RE,RF     link to
         SPACE 1
         CLC   LEMSEV,=H'0'   Q. any problems
         JE    APND0800       A. no, bypass
         CLC   LEMNBR,=H'117' Q. result overflow
         JNE   APND0200       A. no, bypass
APND0110 EQU   *
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE210L),LNE210T
         MVC   LNEPGM,=CL8'&CSECT'
         MVC   LNE210A,RSLT_TXT
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF     link to
         SPACE 1
         CLI   FLUSHSW,C'Y'   Q. flush the print buffer
         JE    APND0800       A. yes, bypass
         XC    TP_STR_LEN,TP_STR_LEN
         MVI   RSLT_TXT,C' '
         MVC   RSLT_TXT+1(L'RSLT_TXT-1),RSLT_TXT
         J     APND0100
         SPACE 1
APND0200 EQU   *
         AS2PLIST (LEFC,0,0),VL,MF=(E,PLIST)
         L     RF,@CEESGL
*        CALL  CEESGL
         BASR  RE,RF     link to
APND0800 AS2LTRCE
         AS2RESTK POP
         BR    RE
         DROP  R8
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0101A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT ACTION (VARIABLE 4)
         L     R1,PGMPARM2
         L     R1,0(,R1)
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0101E
         SPACE 1
MSG0101E EQU   *              ACTION IS INVALID
         MVC   ISICTOK,F0
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU035_0002
**       J     MSG0101
         SPACE 1
MSG0101  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0102A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'1:5'
**       J     MSG0102I
         SPACE 1
MSG0102I EQU   *    VALID ACTIONS ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU036
**       J     MSG0102
         SPACE 1
MSG0102  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         J     ERTN0800
         SPACE 2
TXT0103A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT ACTION (VARIABLE 4)
         L     R1,PGMPARM2
         L     R1,0(,R1)
         CVD   R1,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((4-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0103E
         SPACE 1
MSG0103E EQU   *    ACTION IS NOT SUPPORTED
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU037_0002
**       J     MSG0103
         SPACE 1
MSG0103  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0104A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'2,5'
**       J     MSG0104I
         SPACE 1
MSG0104I EQU   *    SUPPORTED ACTIONS ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU038
**       J     MSG0104
         SPACE 1
MSG0104  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         J     ERTN0800
         SPACE 2
TXT0105A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT NUMBER STRING (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H13
         MVC   ISITXT+((5-1)*L'ISICOL)(13),=CL13'3-PGMOBJ_INFO'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *              ARGUMENT IS INVALID
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
TXT0106A EQU   *
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((2-1)*L'ISIROW)+((7-1)*L'ISICOL)(3),=CL3'> 0'
**       J     MSG0106I
         SPACE 1
MSG0106I EQU   *              VALID ARGUMENT VALUES ARE:
         XC    ISICTOK+((2-1)*L'ISIROW),ISICTOK+((2-1)*L'ISIROW)
         MVC   ISICTOK+((2-1)*L'ISIROW)(L'LECTOK),ASU03A
**       J     MSG0106
         SPACE 1
MSG0106  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISIROW)+((2-1)*L'ISICOL)(11),=CL11'SUB-R+
               OUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISIROW)+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         J     ERTN0800
         SPACE 2
TXT0107A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'GETDSAB'
         J     MSG0107E
         SPACE 1
TXT0107B AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'SWAREQ'
         J     MSG0107E
         SPACE 1
TXT0107C AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((3-1)*L'ISICOL)(4),=CL4'BLDL'
         J     MSG0107E
         SPACE 1
TXT0107D AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CSVQUERY'
         J     MSG0107E
         SPACE 1
TXT0107E AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'CEEPQLD'
         J     MSG0107E
         SPACE 1
TXT0107F AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'CDERTN'
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03B_0002
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0108A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H26
         MVC   ISITXT+((7-1)*L'ISICOL),=CL10'REQ_NAME x'
         UNPK  ZD01(9),REQ_NAME(5)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+10(8),ZD01
         UNPK  ZD01+8(9),REQ_NAME+4(5)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+18(8),ZD01
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS3OBJCA'
         J     MSG0108E
         SPACE 1
TXT0108B AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H19
         MVC   ISITXT+((7-1)*L'ISICOL)(11),=CL11'REQ_TOKEN x'
         UNPK  ZD01(9),REQ_TOKEN(L'REQ_TOKEN+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+11(8),ZD01
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS3OBJCA'
         J     MSG0108E
         SPACE 1
TXT0108C AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD01(9),LS_@LP(L'LS_@LP+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD01
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'LOCALSTG'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'LS_@LP'
         J     MSG0108E
         SPACE 1
TXT0108D AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD01(9),LS_@EP(L'LS_@EP+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD01
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'LOCALSTG'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'LS_@EP'
         J     MSG0108E
         SPACE 1
TXT0108E AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 7)
         L     R0,LS_SIZE
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(4),ZD01+L'ZD01-7
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'LOCALSTG'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'LS_SIZE'
         J     MSG0108E
         SPACE 1
TXT0108F AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD01(9),LS_@EPNAME(L'LS_@EPNAME+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD01
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'LOCALSTG'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'LS_@EPNAME'
         J     MSG0108E
         SPACE 1
TXT0108H AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD01(9),LS_@TIOTE(L'LS_@TIOTE+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD01
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'LOCALSTG'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((3-1)*L'ISICOL)(9),=CL9'LS_@TIOTE'
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03C_0002
**       J     MSG0108
MSG0108  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *    WAS PASSED TOO MANY ARGUMENTS
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *    WAS PASSED TOO FEW ARGUMENTS
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'LIB_CNT'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'> DD#'
**       J     MSG0115W
MSG0115W EQU   *              NUMERIC DATA IS OUT OF RANGE
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0001
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0118A AS2LTRCE
         AS2RESTK PUSH
         SPACE 1
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'IAZXJSAB'
*        INSERT ACTION (VARIABLE 4)
         MVC   ISILEN+((4-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((4-1)*L'ISICOL)(4),=CL4'READ'
**       J     MSG0118E
         SPACE 1
MSG0118E EQU   *    ACTION FAILED WITH R15=nn REASON=nn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03M_0002
**       J     MSG0118
         SPACE 1
MSG0118  EQU   *
*        INSERT COMPONENT (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     ERTN0800
         SPACE 2
         COPY  AS4MLCC9       ERTN0800
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
         DS    0D
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
@CEEMOUT DC    V(CEEMOUT)          LE MODULE TO ISSUE MESSAGE
@CEESGL  DC    V(CEESGL)           LE MODULE TO SIGNAL CONDITION
@APND    DC    V(ASUDAPND)         AS MODULE TO APPEND STRING
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
F9       DC    F'9'
F10      DC    F'10'
F11      DC    F'11'
F12      DC    F'12'
F16      DC    F'16'
F20      DC    F'20'
F44      DC    F'44'
         SPACE 1
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H13      DC    H'13'
H15      DC    H'15'
H17      DC    H'17'
H19      DC    H'19'
H26      DC    H'26'
         SPACE 2
         DS    0D
**       AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 2
         LTORG
         DROP  R9
         SPACE 2
* --------------------------------------------------------- *
* load module / program object eye-catchers
* --------------------------------------------------------- *
         SPACE 1
COBVSEYE DC    CL04'VSR1'     COBOL VS eye catcher
COB2EYE  DC    CL04' C2 '     COBOL II eye catcher
C370EYE  DC    XL02'14CE'     C/370 eye catcher
LE3EYE   DC    XL04'00C3C5C5' LE eye catcher STD
LE3EYE1  DC    XL04'01C3C5C5' LE eye catcher FASTLINK or OPLINK
LE3EYE2  DC    XL07'00C300C500C500' LE eye catcher XPLINK
LE3EYE3  DC    CL08'CEESTART' LE eye catcher CEESTART CSECT
CICSAEYE DC    CL05'DFHYA'    CICS eye catcher (ASSEMBLER)
CICSCEYE DC    CL05'DFHYC'    CICS eye catcher (COBOL)
CICSIEYE DC    CL05'DFHYI'    CICS eye catcher (LE COMPLIANT)
CICSPEYE DC    CL05'DFHYP'    CICS eye catcher (PL/I)
EXCIXEYE DC    CL09'*DFHXCSTB' EXCI eye catcher (GENERIC)
PGML     DC    XL02'58F0'     Load R15 instruction
PGMSTM1  DC    XL01'90'       STM instruction
PGMB1    DC    XL02'47FF'     Branch unconditional instruction
PGMBAKR  DC    XL04'B24000E0'
*        block of code
PGMB2    DC    XL02'4700'     Branch NOP instruction
PGMSTM   DC    XL02'90EC'     STM instruction R14:R12
PGMBALR  DC    XL01'05'       BALR instruction
PGMB     DC    XL02'47F0'     Branch unconditional instruction
XPLKEYE  DC    XL03'0014CE'   XPLINK eye catcher
XPLKEYE1 DC    XL03'030310'   XPLINK eye catcher
*        end of block of code
ALFA1EYE DC    CL08'**ALFA**' old API ALFA table eye catcher
ALFA2EYE DC    CL08'*2ALFA2*' new API ALFA table eye catcher
         SPACE 2
* --------------------------------------------------------- *
* COBOL compiler VVRRMM values
* --------------------------------------------------------- *
         SPACE 1
CVRM2    DC    CL02'02'
CVRM3    DC    CL04'0304'
CVRM4    DC    CL02'04'
CVRM4#1  DC    CL04'0401'
CVRM5#1  DC    CL04'0501'
CVRM5#2  DC    CL04'0502'
CVRM6#1  DC    CL04'0601'
CVRM6#2  DC    CL04'0602'
         SPACE 2
* --------------------------------------------------------- *
* COBOL compiler option literals
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
NO       DC    CL02'NO'
ADV      DC    CL06'  ADV,'        byte  1 bit 0 on  default
LITCHR1  DC    CL06'APOST,'        byte  1 bit 1 on
LITCHR2  DC    CL02'Q,'            byte  1 bit 1 off default
DATA1    DC    CL09'DATA(31),'     byte  1 bit 2 on  default
DATA2    DC    CL09'DATA(24),'     byte  1 bit 2 off
DECK     DC    CL04'  D,'          byte  1 bit 3 on
DUMP     DC    CL05'  DU,'         byte  1 bit 4 on
DYNAM    DC    CL06'  DYN,'        byte  1 bit 5 on
FASTSRT  DC    CL07'  FSRT,'       byte  1 bit 6 on
FDUMP    DC    CL08'  FDUMP,'      byte  1 bit 7 on    COBOL II only
SQLIMS   DC    CL09'  SQLIMS,'     byte  1 bit 7 on    ADDED V5.2
LIB      DC    CL06'  LIB,'        byte  2 bit 0 always on
LIST     DC    CL07'  LIST,'       byte  2 bit 1 on
MAP      DC    CL06'  MAP,'        byte  2 bit 2 on
NUMBER   DC    CL06'  NUM,'        byte  2 bit 3 on
OBJECT   DC    CL06'  OBJ,'        byte  2 bit 4 on
OFFSET   DC    CL06'  OFF,'        byte  2 bit 5 on
OPTIMIZE DC    CL06'  OPT,'        byte  2 bit 6 on
OUTDD    DC    CL08'  OUTDD,'      byte  2 bit 7 on
NUMPROC1 DC    CL15'NUMPROC(  PFD),'    byte  3 bit 0 on
RENT     DC    CL07'  RENT,'       byte  3 bit 1 on  default
RES      DC    CL06'  RES,'        byte  3 bit 2 always on
SEQUENCE DC    CL06'  SEQ,'        byte  3 bit 3 on  default
SIZE1    DC    CL08'SZ(MAX),' byte  3 bit 4 on  depreciated  V5.2
SIZE2    DC    CL06'SZ(N),'        byte  3 bit 4 off         V5.2
SOURCE   DC    CL04'  S,'          byte  3 bit 5 on  default
SSRANGE  DC    CL06'  SSR,'        byte  3 bit 6 on
TERM     DC    CL07'  TERM,'       byte  3 bit 7 on
TEST     DC    CL07'  TEST,'       byte  4 bit 0 on
TRUNC1   DC    CL11'TRUNC(STD),'   byte  4 bit 1 on
TRUNC2   DC    CL11'TRUNC(OPT),'   byte  4 bit 1 off default
WORD     DC    CL05'  WD,'         byte  4 bit 2 on
VBREF    DC    CL08'  VBREF,'      byte  4 bit 3 on
XREF     DC    CL04'  X,'          byte  4 bit 4 on
ZWB      DC    CL06'  ZWB,'        byte  4 bit 5 on
NAME     DC    CL07'  NAME,'       byte  4 bit 6 on
NUMPROC2 DC    CL13'NUMPROC(MIG),' byte  5 bit 0 on    DROPPED V5.1
NUMCLS1  DC    CL12'NUMCLS(ALT),'  byte  5 bit 1 on
NUMCLS2  DC    CL13'NUMCLS(PRIM),' byte  5 bit 1 off default
DBCS     DC    CL07'  DBCS,'       byte  5 bit 2 on  default
AWO      DC    CL06'  AWO,'        byte  5 bit 3 on
TRUNC3   DC    CL11'TRUNC(BIN),'   byte  5 bit 4 on
EVENTS   DC    CL09'  EVENTS,'     byte  5 bit 5 on    COBOL II only
ADATA    DC    CL08'  ADATA,'      byte  5 bit 5 on
CURRENCY DC    CL07'  CURR,'       byte  5 bit 6 on
OBJTYP1  DC    CL06'CLASS,'        byte  5 bit 7 on
OBJTYP2  DC    CL08'PROGRAM,'      byte  5 bit 7 off default
VSOPNFS1 DC    CL06'VS(C),'        byte  8 bit 4 on  default   V6.1
VSOPNFS2 DC    CL06'VS(S),'        byte  8 bit 4 off   ADDED   V6.1
SUPPRESS DC    CL07'  SUPP,'       byte 23 bit 4 on    ADDED   V6.1
SSRANGE1 DC    CL12'SSR(  ZLEN),'  byte 23 bit 5 on    ADDED   V6.2
SSRANGE2 DC    CL09'SSR(ABD),'     byte 23 bit 6 on    ADDED   V6.2
SSRANGE3 DC    CL09'SSR(MSG),'     byte 23 bit 6 off default   V6.2
INLINE   DC    CL06'  INL,'        byte 23 bit 7 on    ADDED   V6.2
RMODE1   DC    CL11'RMODE(ANY),'   byte 26 bit 0 on
RMODE2   DC    CL10'RMODE(24),'    byte 26 bit 0 off
TEST1    DC    CL11'TEST(STMT),'   byte 26 bit 1 on    ADDED   V3.1
TEST2    DC    CL11'TEST(PATH),'   byte 26 bit 2 on    ADDED   V3.1
TEST3    DC    CL12'TEST(BLOCK),'  byte 26 bit 3 on    ADDED   V3.1
TEST5    DC    CL11'TEST(HOOK),'   byte 26 bit 1:3     ADDED   V4.1
OPT1A    DC    CL10'OPT(FULL),'    byte 26 bit 4 on    DROPPED V5.1
OPT2A    DC    CL09'OPT(STD),'     byte 26 bit 4 off   DROPPED V5.1
INTDATE1 DC    CL16'INTDATE(LILIAN),'   byte 26 bit 5 on
INTDATE2 DC    CL14'INTDATE(ANSI),'     byte 26 bit 5 off default
TEST4    DC    CL14'  TEST(  SEP),'  byte 26 bit 6 on  ADDED   V3.1
TEST9    DC    CL22'  TEST(SEP(  DSNAME)),'
*                                  byte 26 bit 7 on    ADDED   V6.2
PGMNCO   DC    CL09'PGMN(CO),'     byte 27 bit 0:1 off default
PGMNLU   DC    CL09'PGMN(LU),'     byte 27 bit 0 on    LONGUPPER
PGMNLM   DC    CL09'PGMN(LM),'     byte 27 bit 1 on    LONGMIXED
DLL      DC    CL06'  DLL,'        byte 27 bit 2 on
EXPORT   DC    CL06'  EXP,'        byte 27 bit 3 on
TEST7    DC    CL13'  TEST(  SO),' byte 27 bit 4 on            V5.1
DATEPROC DC    CL05'  DP,'         byte 27 bit 3 on    DROPPED V5.1
ARITH1   DC    CL06'AR(E),'        byte 27 bit 5 on
ARITH2   DC    CL06'AR(C),'        byte 27 bit 5 off default
THREAD   DC    CL09'  THREAD,'     byte 27 bit 6 on
TEST6    DC    CL13'TEST(  EJPD),' byte 27 bit 7 on    ADDED   V4.1
*    build level info              byte 28 bit 0:7             V6.1
SQL      DC    CL06'  SQL,'        byte 28 bit 0 on
CICS     DC    CL07'  CICS,'       byte 28 bit 1 on    ADDED   V3.1
MDECK    DC    CL05'  MD,'         byte 28 bit 2 on    ADDED   V3.4
SQLCCSID DC    CL07'  SQLC,'       byte 28 bit 3 on    ADDED   V4.1
OPTFILE  DC    CL10'  OPTFILE,'    byte 28 bit 4 on
XMLP1    DC    CL06'XP(X),'        byte 28 bit 5 on  default   V5.1
XMLP2    DC    CL06'XP(C),'        byte 28 bit 5 off           V5.1
BLOCK0   DC    CL09'  BLOCK0,'     byte 28 bit 6 on    ADDED   V4.2
DSPSGN1  DC    CL06'DS(S),'        byte 28 bit 7 on    ADDED   V5.1
DSPSGN2  DC    CL06'DS(C),'        byte 28 bit 7 off default   V5.1
STGOPT   DC    CL05'  SO,'         byte 29 bit 4 on    ADDED   V5.1
AFP      DC    CL16'AFP(  VOLATILE),'   byte 29 bit 5 on       V5.1
HGPR     DC    CL17'HGPR(  PRESERVE),'  byte 29 bit 6 on       V5.1
TEST8    DC    CL14'NOTEST(DWARF),'     byte 29 bit 7 on       V5.1
QUALIFY1 DC    CL07'QUA(E),'       byte 30 bit 0 on    ADDED   V5.2
QUALIFY2 DC    CL07'QUA(C),'       byte 30 bit 0 off default   V5.2
VLR1     DC    CL07'VLR(C),'       byte 30 bit 1 on    ADDED   V5.2
VLR2     DC    CL07'VLR(S),'       byte 30 bit 1 off default   V5.2
CPYR     DC    CL07'  CPYR,'       byte 30 bit 2 on    ADDED   V5.2
SERV     DC    CL07'  SERV,'       byte 30 bit 3 on    ADDED   V5.2
ZONEDAT1 DC    CL08'ZD(MIG),'      byte 30 bit 4 on    ADDED   V5.2
ZONEDATA DC    CL10'ZD(  PFD),'    byte 30 bit 5 on    ADDED   V5.2
*                   NUMCHECK       byte 31 bit 0:2     ADDED   V6.2
NUMCHK   DC    CL05'NONC,'         byte 31 bit 0:2 off ADDED   V6.2
NUMCHK1  DC    CL17'NC(ZON(  ALPHNUM)),'  byte 31 bit 0 on ADDED V6.2
NUMCHK2  DC    CL08'NC(PAC),'      byte 31 bit 1 on    ADDED   V6.2
NUMCHK3  DC    CL08'NC(BIN),'      byte 31 bit 2 on    ADDED   V6.2
NUMCHK4  DC    CL08'NC(ABD),'      byte 31 bit 3 on    ADDED   V6.2
NUMCHK5  DC    CL08'NC(MSG),'      byte 31 bit 3 off default   V6.2
PRMCHK   DC    CL05'  PC,'         byte 31 bit 4 on    ADDED   V6.2
PRMCHK1  DC    CL08'PC(ABD),'      byte 31 bit 5 on    ADDED   V6.2
PRMCHK2  DC    CL08'PC(MSG),'      byte 31 bit 5 off default   V6.2
*    NC(ZON(NOALPHNUM))            byte 31 bit 6 on
SIGLVL   DC    CL12'SIGLVL(nnn),'
DEFINE   DC    CL06'  DEF,'                            ADDED   V6.2
INITCHK  DC    CL05'  IC,'                             ADDED   V6.1
         SPACE 2
* --------------------------------------------------------- *
* static data for print lines
* --------------------------------------------------------- *
         SPACE 1
LNE001T  DC    Y(42),C'xxxxxxxx: Query program object information'
LNE001L  EQU   *-LNE001T
         SPACE 1
LNE002T  DC    Y(16),C'xxxxxxxx:  TIOT:'
LNE002L  EQU   *-LNE002T
         SPACE 1
LNE003T  DC    Y(69),C'xxxxxxxx:    JOBNAME(xxxxxxxx)  JOBSTEP(xxxxxxxx+
               )  PROCSTEP(xxxxxxxx)'
LNE003L  EQU   *-LNE003T
         SPACE 1
LNE004T  DC    Y(16),C'xxxxxxxx: TIOTE:'
LNE004L  EQU   *-LNE004T
         SPACE 1
LNE005T  DC    Y(20),C'xxxxxxxx:    xxxxLIB'
LNE005L  EQU   *-LNE005T
         SPACE 1
LNE006T  DC    Y(63),C'xxxxxxxx:      +nn xxxxxxxxxxxxxxxxxxxxxxxxxxxxx+
               xxxxxxxxxxxxxxx'
LNE006L  EQU   *-LNE006T
         SPACE 1
LNE007T  DC    Y(16),C'xxxxxxxx:  BLDL:'
LNE007L  EQU   *-LNE007T
         SPACE 1
LNE008T  DC    Y(69),C'xxxxxxxx:    Member(xxxxxxxx)  Size(nnnnnnn)  Or+
               iginal Name(xxxxxxxx)'
LNE008L  EQU   *-LNE008T
         SPACE 1
LNE010T  DC    Y(36),C'xxxxxxxx:    Indicator byte-1: x''zn'''
LNE010L  EQU   *-LNE010T
         SPACE 1
LNE011T  DC    Y(24),C'xxxxxxxx:      ALIAS (x)'
LNE011L  EQU   *-LNE011T
         SPACE 1
LNE012T  DC    Y(00)
LNE012L  EQU   *-LNE012T
         SPACE 1
LNE013T  DC    Y(00)
LNE013L  EQU   *-LNE013T
         SPACE 1
LNE014T  DC    Y(00)
LNE014L  EQU   *-LNE014T
         SPACE 1
LNE015T  DC    Y(00)
LNE015L  EQU   *-LNE015T
         SPACE 1
LNE016T  DC    Y(00)
LNE016L  EQU   *-LNE016T
         SPACE 1
LNE017T  DC    Y(00)
LNE017L  EQU   *-LNE017T
         SPACE 1
LNE018T  DC    Y(00)
LNE018L  EQU   *-LNE018T
         SPACE 1
LNE019T  DC    Y(54),C'xxxxxxxx:    Library type nn - xxxxxxxxxxxxxxxxx+
               xxxxxx'
LNE019L  EQU   *-LNE019T
         SPACE 1
LNE020T  DC    Y(43),C'xxxxxxxx:    Library concatenation nbr (nn)'
LNE020L  EQU   *-LNE020T
         SPACE 1
LNE030T  DC    Y(36),C'xxxxxxxx:    Attribute byte-1: x''zn'''
LNE030L  EQU   *-LNE030T
         SPACE 1
LNE031T  DC    Y(23),C'xxxxxxxx:      RENT (x)'
LNE031L  EQU   *-LNE031T
         SPACE 1
LNE032T  DC    Y(23),C'xxxxxxxx:      REUS (x)'
LNE032L  EQU   *-LNE032T
         SPACE 1
LNE033T  DC    Y(23),C'xxxxxxxx:      OVLY (x)'
LNE033L  EQU   *-LNE033T
         SPACE 1
LNE034T  DC    Y(23),C'xxxxxxxx:      TEST (x)'
LNE034L  EQU   *-LNE034T
         SPACE 1
LNE035T  DC    Y(32),C'xxxxxxxx:      only Loadable (x)'
LNE035L  EQU   *-LNE035T
         SPACE 1
LNE036T  DC    Y(26),C'xxxxxxxx:      Scatter (x)'
LNE036L  EQU   *-LNE036T
         SPACE 1
LNE037T  DC    Y(29),C'xxxxxxxx:      Executable (x)'
LNE037L  EQU   *-LNE037T
         SPACE 1
LNE038T  DC    Y(40),C'xxxxxxxx:      1 blk of txt && no RLD (x)'
LNE038L  EQU   *-LNE038T
         SPACE 1
LNE040T  DC    Y(36),C'xxxxxxxx:    Attribute byte-2: x''zn'''
LNE040L  EQU   *-LNE040T
         SPACE 1
LNE041T  DC    Y(29),C'xxxxxxxx:      > LNKEDT E (x)'
LNE041L  EQU   *-LNE041T
         SPACE 1
LNE042T  DC    Y(44),C'xxxxxxxx:      Origin of 1st blk is zero (x)'
LNE042L  EQU   *-LNE042T
         SPACE 1
LNE043T  DC    Y(34),C'xxxxxxxx:      EP addr is zero (x)'
LNE043L  EQU   *-LNE043T
         SPACE 1
LNE044T  DC    Y(25),C'xxxxxxxx:      no RLD (x)'
LNE044L  EQU   *-LNE044T
         SPACE 1
LNE045T  DC    Y(58),C'xxxxxxxx:      can not reprocess with LNKEDT or +
               Binder (x)'
LNE045L  EQU   *-LNE045T
         SPACE 1
LNE046T  DC    Y(48),C'xxxxxxxx:      contains TESTRAN symbol cards (x)+
               '
LNE046L  EQU   *-LNE046T
         SPACE 1
LNE047T  DC    Y(27),C'xxxxxxxx:      LNKEDT F (x)'
LNE047L  EQU   *-LNE047T
         SPACE 1
LNE048T  DC    Y(23),C'xxxxxxxx:      REFR (x)'
LNE048L  EQU   *-LNE048T
         SPACE 1
LNE050T  DC    Y(31),C'xxxxxxxx:    Flag byte-1: x''zn'''
LNE050L  EQU   *-LNE050T
         SPACE 1
LNE051T  DC    Y(29),C'xxxxxxxx:      AOS LNKEDT (x)'
LNE051L  EQU   *-LNE051T
         SPACE 1
LNE052T  DC    Y(40),C'xxxxxxxx:      Large PGMOBJ extended (x)'
LNE052L  EQU   *-LNE052T
         SPACE 1
LNE053T  DC    Y(31),C'xxxxxxxx:      page aligned (x)'
LNE053L  EQU   *-LNE053T
         SPACE 1
LNE054T  DC    Y(27),C'xxxxxxxx:      SSI data (x)'
LNE054L  EQU   *-LNE054T
         SPACE 1
LNE055T  DC    Y(36),C'xxxxxxxx:      APF info is valid (x)'
LNE055L  EQU   *-LNE055T
         SPACE 1
LNE056T  DC    Y(25),C'xxxxxxxx:      PGMOBJ (x)'
LNE056L  EQU   *-LNE056T
         SPACE 1
LNE057T  DC    Y(35),C'xxxxxxxx:      PGMOBJ is signed (x)'
LNE057L  EQU   *-LNE057T
         SPACE 1
LNE058T  DC    Y(38),C'xxxxxxxx:      extended attributes (x)'
LNE058L  EQU   *-LNE058T
         SPACE 1
LNE060T  DC    Y(31),C'xxxxxxxx:    Flag byte-2: x''zn'''
LNE060L  EQU   *-LNE060T
         SPACE 1
LNE061T  DC    Y(51),C'xxxxxxxx:      primary name generated by Binder +
               (x)'
LNE061L  EQU   *-LNE061T
         SPACE 1
LNE062T  DC    Y(00)
LNE062L  EQU   *-LNE062T
         SPACE 1
LNE063T  DC    Y(00)
LNE063L  EQU   *-LNE063T
         SPACE 1
LNE064T  DC    Y(25),C'xxxxxxxx:      RMODE(xxx)'
LNE064L  EQU   *-LNE064T
         SPACE 1
LNE065T  DC    Y(31),C'xxxxxxxx:      ALIAS AMODE(xxx)'
LNE065L  EQU   *-LNE065T
         SPACE 1
LNE066T  DC    Y(25),C'xxxxxxxx:      AMODE(xxx)'
LNE066L  EQU   *-LNE066T
         SPACE 1
LNE067T  DC    Y(00)
LNE067L  EQU   *-LNE067T
         SPACE 1
LNE068T  DC    Y(00)
LNE068L  EQU   *-LNE068T
         SPACE 1
LNE070T  DC    Y(31),C'xxxxxxxx:    Flag byte-3: x''zn'''
LNE070L  EQU   *-LNE070T
         SPACE 1
LNE071T  DC    Y(44),C'xxxxxxxx:      PGMOBJ can not be LOADMOD (x)'
LNE071L  EQU   *-LNE071T
         SPACE 1
LNE072T  DC    Y(30),C'xxxxxxxx:      FETCHOPT(xxxxx)'
LNE072L  EQU   *-LNE072T
         SPACE 1
LNE073T  DC    Y(29),C'xxxxxxxx:    SSI(x''znznznzn'')'
LNE073L  EQU   *-LNE073T
         SPACE 1
LNE074T  DC    Y(58),C'xxxxxxxx:    LPO size(nnnnnnnnn)  LPO EP addr(x'+
               'znznznzn'')'
LNE074L  EQU   *-LNE074T
         SPACE 1
LNE075T  DC    Y(37),C'xxxxxxxx:    XATTR Flag byte-0: x''zn'''
LNE075L  EQU   *-LNE075T
         SPACE 1
LNE076T  DC    Y(37),C'xxxxxxxx:    XATTR Flag byte-1: x''zn'''
LNE076L  EQU   *-LNE075T
         SPACE 1
LNE077T  DC    Y(58),C'xxxxxxxx:    XATTR data(x''znznznznznznznznznznz+
               nznznznzn'')'
LNE077L  EQU   *-LNE077T
         SPACE 1
LNE079T  DC    Y(16),C'xxxxxxxx:   CSV:'
LNE079L  EQU   *-LNE079T
         SPACE 1
LNE080T  DC    Y(44),C'xxxxxxxx:    Program(xxxxxxxx)  loader(xxxx)'
LNE080L  EQU   *-LNE080T
         SPACE 1
LNE081T  DC    Y(76),C'xxxxxxxx:    PDATA(x''znznznznznznznznznznznznzn+
               znznzn''  c''xxxxxxxxxxxxxxxx'')'
LNE081L  EQU   *-LNE081T
         SPACE 1
LNE082T  DC    Y(70),C'xxxxxxxx:    LP addr(x''znznznzn'')  EP addr(x''+
               znznznzn'')  Size(nnnnnnn)'
LNE082L  EQU   *-LNE082T
         SPACE 1
LNE090T  DC    Y(31),C'xxxxxxxx:    Attribute 1: x''zn'''
LNE090L  EQU   *-LNE090T
         SPACE 1
LNE091T  DC    Y(39),C'xxxxxxxx:      end-of-module delete (x)'
LNE091L  EQU   *-LNE091T
         SPACE 1
LNE092T  DC    Y(35),C'xxxxxxxx:      loaded to global (x)'
LNE092L  EQU   *-LNE092T
         SPACE 1
LNE093T  DC    Y(23),C'xxxxxxxx:      RENT (x)'
LNE093L  EQU   *-LNE093T
         SPACE 1
LNE094T  DC    Y(23),C'xxxxxxxx:      REUS (x)'
LNE094L  EQU   *-LNE094T
         SPACE 1
LNE095T  DC    Y(36),C'xxxxxxxx:      not loadable only (x)'
LNE095L  EQU   *-LNE095T
         SPACE 1
LNE096T  DC    Y(23),C'xxxxxxxx:      OVLY (x)'
LNE096L  EQU   *-LNE096T
         SPACE 1
LNE097T  DC    Y(24),C'xxxxxxxx:      ALIAS (x)'
LNE097L  EQU   *-LNE097T
         SPACE 1
LNE098T  DC    Y(00)
LNE098L  EQU   *-LNE098T
         SPACE 1
LNE100T  DC    Y(31),C'xxxxxxxx:    Attribute 2: x''zn'''
LNE100L  EQU   *-LNE100T
         SPACE 1
LNE101T  DC    Y(37),C'xxxxxxxx:      authorized library (x)'
LNE101L  EQU   *-LNE101T
         SPACE 1
LNE102T  DC    Y(37),C'xxxxxxxx:      authorized program (x)'
LNE102L  EQU   *-LNE102T
         SPACE 1
LNE103T  DC    Y(28),C'xxxxxxxx:      AMODE ANY (x)'
LNE103L  EQU   *-LNE103T
         SPACE 1
LNE104T  DC    Y(27),C'xxxxxxxx:      AMODE 31 (x)'
LNE104L  EQU   *-LNE104T
         SPACE 1
LNE105T  DC    Y(00)
LNE105L  EQU   *-LNE105T
         SPACE 1
LNE106T  DC    Y(37),C'xxxxxxxx:      dynamic LPA module (x)'
LNE106L  EQU   *-LNE106T
         SPACE 1
LNE107T  DC    Y(33),C'xxxxxxxx:      page protected (x)'
LNE107L  EQU   *-LNE107T
         SPACE 1
LNE108T  DC    Y(27),C'xxxxxxxx:      AMODE 64 (x)'
LNE108L  EQU   *-LNE108T
         SPACE 1
LNE110T  DC    Y(31),C'xxxxxxxx:    Attribute 3: x''zn'''
LNE110L  EQU   *-LNE110T
         SPACE 1
LNE111T  DC    Y(42),C'xxxxxxxx:      resident above-the-line (x)'
LNE111L  EQU   *-LNE111T
         SPACE 1
LNE112T  DC    Y(31),C'xxxxxxxx:      resident JPA (x)'
LNE112L  EQU   *-LNE112T
         SPACE 1
LNE113T  DC    Y(32),C'xxxxxxxx:      resident PLPA (x)'
LNE113L  EQU   *-LNE113T
         SPACE 1
LNE114T  DC    Y(32),C'xxxxxxxx:      resident MLPA (x)'
LNE114L  EQU   *-LNE114T
         SPACE 1
LNE115T  DC    Y(32),C'xxxxxxxx:      resident FLPA (x)'
LNE115L  EQU   *-LNE115T
         SPACE 1
LNE116T  DC    Y(31),C'xxxxxxxx:      resident CSA (x)'
LNE116L  EQU   *-LNE116T
         SPACE 1
LNE117T  DC    Y(00)
LNE117L  EQU   *-LNE117T
         SPACE 1
LNE118T  DC    Y(00)
LNE118L  EQU   *-LNE118T
         SPACE 1
LNE119T  DC    Y(22),C'xxxxxxxx:   CDE: xxxxx'
LNE119L  EQU   *-LNE119T
         SPACE 1
LNE120T  DC    Y(52),C'xxxxxxxx:    Program(xxxxxxxx)  Use count(nnnnn)+
               '
LNE120L  EQU   *-LNE120T
         SPACE 1
LNE121T  DC    Y(44),C'xxxxxxxx:    EP addr(x''znznznzn'')  SPID(nnn)'
LNE121L  EQU   *-LNE121T
         SPACE 1
LNE130T  DC    Y(36),C'xxxxxxxx:    Indicator byte-0: x''zn'''
LNE130L  EQU   *-LNE130T
         SPACE 1
LNE131T  DC    Y(27),C'xxxxxxxx:      AMODE 31 (x)'
LNE131L  EQU   *-LNE131T
         SPACE 1
LNE132T  DC    Y(27),C'xxxxxxxx:      AMODE 64 (x)'
LNE132L  EQU   *-LNE132T
         SPACE 1
LNE133T  DC    Y(28),C'xxxxxxxx:      major CDE (x)'
LNE133L  EQU   *-LNE133T
         SPACE 1
LNE134T  DC    Y(00)
LNE134L  EQU   *-LNE134T
         SPACE 1
LNE135T  DC    Y(00)
LNE135L  EQU   *-LNE135T
         SPACE 1
LNE136T  DC    Y(00)
LNE136L  EQU   *-LNE136T
         SPACE 1
LNE137T  DC    Y(00)
LNE137L  EQU   *-LNE137T
         SPACE 1
LNE138T  DC    Y(00)
LNE138L  EQU   *-LNE138T
         SPACE 1
LNE140T  DC    Y(31),C'xxxxxxxx:    Attribute 1: x''zn'''
LNE140L  EQU   *-LNE140T
         SPACE 1
LNE141T  DC    Y(32),C'xxxxxxxx:      delete module (x)'
LNE141L  EQU   *-LNE141T
         SPACE 1
LNE142T  DC    Y(36),C'xxxxxxxx:      built by IDENTIFY (x)'
LNE142L  EQU   *-LNE141T
         SPACE 1
LNE143T  DC    Y(39),C'xxxxxxxx:      loaded by DIRTY task (x)'
LNE143L  EQU   *-LNE143T
         SPACE 1
LNE144T  DC    Y(38),C'xxxxxxxx:      CDE extension exist (x)'
LNE144L  EQU   *-LNE144T
         SPACE 1
LNE145T  DC    Y(23),C'xxxxxxxx:      LPDE (x)'
LNE145L  EQU   *-LNE145T
         SPACE 1
LNE146T  DC    Y(35),C'xxxxxxxx:      loaded to GLOBAL (x)'
LNE146L  EQU   *-LNE146T
         SPACE 1
LNE147T  DC    Y(38),C'xxxxxxxx:      module contaminated (x)'
LNE147L  EQU   *-LNE147T
         SPACE 1
LNE148T  DC    Y(41),C'xxxxxxxx:      RACF execute authority (x)'
LNE148L  EQU   *-LNE148T
         SPACE 1
LNE150T  DC    Y(31),C'xxxxxxxx:    Attribute 2: x''zn'''
LNE150L  EQU   *-LNE150T
         SPACE 1
LNE151T  DC    Y(35),C'xxxxxxxx:      loaded by System (x)'
LNE151L  EQU   *-LNE151T
         SPACE 1
LNE152T  DC    Y(31),C'xxxxxxxx:      being loaded (x)'
LNE152L  EQU   *-LNE152T
         SPACE 1
LNE153T  DC    Y(23),C'xxxxxxxx:      RENT (x)'
LNE153L  EQU   *-LNE153T
         SPACE 1
LNE154T  DC    Y(23),C'xxxxxxxx:      REUS (x)'
LNE154L  EQU   *-LNE154T
         SPACE 1
LNE155T  DC    Y(27),C'xxxxxxxx:      not REUS (x)'
LNE155L  EQU   *-LNE155T
         SPACE 1
LNE156T  DC    Y(28),C'xxxxxxxx:      minor CDE (x)'
LNE156L  EQU   *-LNE156T
         SPACE 1
LNE157T  DC    Y(31),C'xxxxxxxx:      resident JPA (x)'
LNE157L  EQU   *-LNE157T
         SPACE 1
LNE158T  DC    Y(36),C'xxxxxxxx:      not loadable only (x)'
LNE158L  EQU   *-LNE158T
         SPACE 1
LNE160T  DC    Y(31),C'xxxxxxxx:    Attribute 3: x''zn'''
LNE160L  EQU   *-LNE160T
         SPACE 1
LNE161T  DC    Y(28),C'xxxxxxxx:      in SPID 0 (x)'
LNE161L  EQU   *-LNE161T
         SPACE 1
LNE162T  DC    Y(34),C'xxxxxxxx:      module inactive (x)'
LNE162L  EQU   *-LNE162T
         SPACE 1
LNE163T  DC    Y(36),C'xxxxxxxx:      extent list built (x)'
LNE163L  EQU   *-LNE163T
         SPACE 1
LNE164T  DC    Y(51),C'xxxxxxxx:      minor EP addr has been relocated +
               (x)'
LNE164L  EQU   *-LNE164T
         SPACE 1
LNE165T  DC    Y(28),C'xxxxxxxx:      RMODE ANY (x)'
LNE165L  EQU   *-LNE165T
         SPACE 1
LNE166T  DC    Y(23),C'xxxxxxxx:      OVLY (x)'
LNE166L  EQU   *-LNE166T
         SPACE 1
LNE167T  DC    Y(37),C'xxxxxxxx:      authorized library (x)'
LNE167L  EQU   *-LNE167T
         SPACE 1
LNE168T  DC    Y(37),C'xxxxxxxx:      authorized program (x)'
LNE168L  EQU   *-LNE168T
         SPACE 1
LNE170T  DC    Y(31),C'xxxxxxxx:    Attribute 4: x''zn'''
LNE170L  EQU   *-LNE170T
         SPACE 1
LNE171T  DC    Y(37),C'xxxxxxxx:      OMVS PATH provided (x)'
LNE171L  EQU   *-LNE171T
         SPACE 1
LNE172T  DC    Y(30),C'xxxxxxxx:      PML running (x)'
LNE172L  EQU   *-LNE172T
         SPACE 1
LNE173T  DC    Y(37),C'xxxxxxxx:      split RMODE PGMOBJ (x)'
LNE173L  EQU   *-LNE173T
         SPACE 1
LNE174T  DC    Y(43),C'xxxxxxxx:      HFS system shared module (x)'
LNE174L  EQU   *-LNE174T
         SPACE 1
LNE175T  DC    Y(00)
LNE175L  EQU   *-LNE175T
         SPACE 1
LNE176T  DC    Y(39),C'xxxxxxxx:      resident dynamic LPA (x)'
LNE176L  EQU   *-LNE176T
         SPACE 1
LNE177T  DC    Y(47),C'xxxxxxxx:      page protected on whole page (x)'
LNE177L  EQU   *-LNE177T
         SPACE 1
LNE178T  DC    Y(00)
LNE178L  EQU   *-LNE178T
         SPACE 1
LNE180T  DC    Y(31),C'xxxxxxxx:    Attribute 5: x''zn'''
LNE180L  EQU   *-LNE180T
         SPACE
LNE181T  DC    Y(00)
LNE181L  EQU   *-LNE181T
         SPACE 1
LNE182T  DC    Y(00)
LNE182L  EQU   *-LNE182T
         SPACE 1
LNE183T  DC    Y(00)
LNE183L  EQU   *-LNE183T
         SPACE 1
LNE184T  DC    Y(00)
LNE184L  EQU   *-LNE184T
         SPACE 1
LNE185T  DC    Y(00)
LNE185L  EQU   *-LNE185T
         SPACE 1
LNE186T  DC    Y(00)
LNE186L  EQU   *-LNE186T
         SPACE 1
LNE187T  DC    Y(00)
LNE187L  EQU   *-LNE187T
         SPACE 1
LNE188T  DC    Y(00)
LNE188L  EQU   *-LNE188T
         SPACE 1
LNE189T  DC    Y(27),C'xxxxxxxx:  LE module query:'
LNE189L  EQU   *-LNE189T
         SPACE 1
LNE190T  DC    Y(46),C'xxxxxxxx:    Token(x''znznznzn'')  Size(nnnnnnn)+
               '
LNE190L  EQU   *-LNE190T
         SPACE 1
LNE191T  DC    Y(55),C'xxxxxxxx:    LP addr(x''znznznzn'')  EP addr(x''+
               znznznzn'')'
LNE191L  EQU   *-LNE191T
         SPACE 1
LNE192T  DC    Y(30),C'xxxxxxxx:    Program(xxxxxxxx)'
LNE192L  EQU   *-LNE192T
         SPACE 1
LNE193T  DC    Y(34),C'xxxxxxxx:  Executable information:'
LNE193L  EQU   *-LNE193T
         SPACE 1
LNE194T  DC    Y(40),C'xxxxxxxx:    CICS translator level (xxx)'
LNE194L  EQU   *-LNE194T
         SPACE 1
LNE195T  DC    Y(37),C'xxxxxxxx:    LE entry type (xxxxxxxx)'
LNE195L  EQU   *-LNE195T
         SPACE 1
LNE196T  DC    Y(54),C'xxxxxxxx:    LE conforming language (xxxxxxxxxxx+
               xxxxx)'
LNE196L  EQU   *-LNE196T
         SPACE 1
LNE197T  DC    Y(48),C'xxxxxxxx:    LE control level (xxxxxxxxxxxxxxxx)+
               '
LNE197L  EQU   *-LNE197T
         SPACE 1
LNE198T  DC    Y(48),C'xxxxxxxx:    LE timestamp (xxxxxxxxxxxxxxxxxxxx)+
               '
LNE198L  EQU   *-LNE198T
         SPACE 1
LNE199T  DC    Y(51),C'xxxxxxxx:    non-LE conforming language (xxxxxxx+
               xx)'
LNE199L  EQU   *-LNE199T
         SPACE 1
LNE200T  DC    Y(29),C'xxxxxxxx:  COBOL information:'
LNE200L  EQU   *-LNE200T
         SPACE 1
LNE201T  DC    Y(52),C'xxxxxxxx:    DATA DIVISION statement count (nnnn+
               nnn)'
LNE201L  EQU   *-LNE201T
         SPACE 1
LNE202T  DC    Y(57),C'xxxxxxxx:    PROCEDURE DIVISION statement count +
               (nnnnnnn)'
LNE202L  EQU   *-LNE202T
         SPACE 1
LNE203T  DC    Y(35),C'xxxxxxxx:    CCSID - CODEPAGE(nnnn)'
LNE203L  EQU   *-LNE203T
         SPACE 1
LNE204T  DC    Y(38),C'xxxxxxxx:    hardware level - ARCH(nn)'
LNE204L  EQU   *-LNE204T
         SPACE 1
LNE205T  DC    Y(40),C'xxxxxxxx:    optimization level - OPT(n)'
LNE205L  EQU   *-LNE205T
         SPACE 1
LNE206T  DC    Y(39),C'xxxxxxxx:    COBOL Signature level (nn)'
LNE206L  EQU   *-LNE206T
         SPACE 1
LNE207T  DC    Y(40),C'xxxxxxxx:    COBOL Signature length (nn)'
LNE207L  EQU   *-LNE207T
         SPACE 1
LNE208T  DC    Y(40),C'xxxxxxxx:    build level info (xxxxxxxx)'
LNE208L  EQU   *-LNE208T
         SPACE 1
LNE209T  DC    Y(30),C'xxxxxxxx:    Compiler Options:'
LNE209L  EQU   *-LNE209T
         SPACE 1
LNE210T  DC    Y(120),C'xxxxxxxx:    '
LNE210L  EQU   *-LNE210T
         END
./ ADD NAME=ASU3T01B 0108-19302-19323-1617-00418-00887-00000-APLKS   55
*PROCESS RENT
         TITLE 'AS UTILITY TERMINATION REPORT'
*************************************************************
* ARCHITECTURE SERVICES UTILITY MVS
* Termination Report (ASCA, ASAB, ASABX)
*
*    Name: ASU3T01B
*
* Purpose: Create termination report.
*          1 - dump ASCA, ASAB, ASABX report
*
*************************************************************
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASU3T01B'
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         PRINT ON,GEN
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              work register
R1       EQU   1              work register, address of parm list
R2       EQU   2              work register
R3       EQU   3              work register
R4       EQU   4              not used
R5       EQU   5              BAR of ASAB, ASABX
R6       EQU   6              BAR of ASCA
R7       EQU   7              not used
R8       EQU   8              not used
R9       EQU   9              static storage BAR
RA       EQU   10             program BAR 1
RB       EQU   11             reserved for program BAR 2
RC       EQU   12             LE CAA BAR
RD       EQU   13             RSA/DSA BAR 1
RE       EQU   14             return address
RF       EQU   15             branch and link address
         SPACE 1
#CEEPLOD EQU   96             enclave level load service
*                             ..F'length of name' input
*                             ..C'name of module' input
*                             ..A(ep addr of module) output
*                             ..F'length of module' output
*                             ..3F'feedback' optional
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         POP   PRINT
         EJECT
         CEEDSA
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CLRBEG   EQU   *
         AS1MUTSA UDS=(RESA,LEWORK)
         SPACE 1
RTNCD    DS    F              return code R15
RSNCD    DS    F              error  code R0
         SPACE 1
SUBPARM0 DS    A              addr of ASCA
         ORG   SUBPARM0
SUBPARM1 DS    A              addr of ASCA
SUBPARM2 DS    A              LE FDBK / LEFC
         ORG   SUBPARM2
@PLEFDBK DS    A              addr of pgm LE FEEDBACK
         SPACE 1
LS_@ASAB DS    A              addr of ASAB
LS_@ASABX DS   A              addr of ASAB1
LS_@ASCA DS    A              addr of ASCA
         SPACE 1
@MDHEX   DS    A              addr of ASUMDHEX
         SPACE 1
         AS1MUTSA UDS=MISC
         ORG   VSTR
LNEAREA  DS    0XL122         Print line area (CEEMOUT)
LNELEN   DS    H
         SPACE 1
LNETXT   DS    CL120
         ORG   LNETXT
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              caller's R1
         SPACE 1
         AS2EPA MF=L
         SPACE 2
         COPY  AS3DMPRB       hex dump commarea
         SPACE 1
**       AS1MUTSA UDS=LTRACE
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: parameter list passed to this subordinate rtn
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              pointer to AS COMMAREA addr
@FDBK    DS    A              LE FEED BACK AREA
         SPACE 2
* --------------------------------------------------------- *
* Expand DSECT(s)
* --------------------------------------------------------- *
         SPACE 1
ASABHDR  AS1MASDS ADS=ASAB,MF=D    expand AS anchor block
ASABXHDR AS1MASDS ADS=ASAB1,MF=D   expand AS anchor block extention
         SPACE 1
ASCAHDR  AS1MASDS ADS=ASCA,MF=D    expand AS communication area
         SPACE 2
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   0=ESA 1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO if called by non-LE          +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         save original R1 value
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPA      CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=01,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINE(S)
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *         initialize DSA storage
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear DSA storage
         MVC   LEMDEST,F2
         SPACE 1
INIT0100 EQU   *
         L     R1,SUBPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,EXIT0000
         MVC   SUBPARM1,@ASCA
         NC    SUBPARM1,=XL4'7FFFFFFF'
         TM    @ASCA,X'80'    Q. last parameter
         JO    INIT0120       A. NO,
         SPACE 1
INIT0110 EQU   *
         MVC   SUBPARM2,@FDBK
         NC    SUBPARM2,=XL4'7FFFFFFF'
         TM    @FDBK,X'80'    Q. last parameter
         JNO   TXT0113A       A. NO,
         DROP  R1
         SPACE 1
INIT0120 EQU   *
         ICM   R6,15,SUBPARM1 Q. ASCA
         JZ    ABEND850       A. no, error
         USING ASCAHDR,R6     est addr to ASCA
         SPACE 1
         CLC   ASCA_DSID,=Y($ASCA) Q. ASCA
         JNE   ABEND850            A. no, error
         CLC   ASCA_EYE,=CL8'**ASCA**'  Q. ASCA
         JNE   ABEND850                 A. no, error
         ST    R6,LS_@ASCA
         ICM   R5,15,ASCA_@ASAB    Q. ASAB
         JZ    ABEND850            A. no, error
         USING ASABHDR,R5          est addr to ASAB
         SPACE 1
         CLC   ASAB_DSID,=Y($ASAB) Q. ASAB
         JNE   ABEND850            A. no, error
         CLC   ASAB_EYE,=CL8'**ASAB**'  Q. ASAB
         JNE   ABEND850                 A. no, error
         ST    R5,LS_@ASAB
         ICM   R5,15,ASAB_@ASABX   Q. ASABX
         JZ    ABEND850            A. no, error
         DROP  R5
         ST    R5,LS_@ASABX
         SPACE 1
INIT0130 EQU   *
         MVC   CSV1_PGMNME,=CL8'ASUMDHEX'
         AS2EPA MF=E
         ST    RF,@MDHEX
         SPACE 1
INIT0900 EQU   *
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 1
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 AS2LTRCE ,
*        print blank line
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
*        print line 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE001L),LNE001T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         BRAS  RE,PASCA       dump ASCA
         BRAS  RE,PASAB       dump ASAB
         BRAS  RE,PASABX      dump ASABX
         SPACE 2
* --------------------------------------------------------- *
* EXIT ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 AS2LTRCE
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
*        dump the ASCA
PASCA    AS2LTRCE
         AS2RESTK PUSH
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE999L),LNE999T
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         L     R6,LS_@ASCA    get addr of ASCA
         USING ASCAHDR,R6     est addr to ASCA
         SPACE 1
*        call ASUMDHEX to dump the ASCA
         LH    R0,ASCA_DSLEN  length of ASCA
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F1
         MVC   DMPRB_TITLE,=CL44'AS Communication Area'
         AS2PLIST (ASCAHDR,AS3DMPRB,ASCAHDR),                          +
               VL,MF=(E,PLIST)
         DROP  R6
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
*        dump the ASAB
PASAB    AS2LTRCE
         AS2RESTK PUSH
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE999L),LNE999T
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         L     R6,LS_@ASCA    get addr of ASCA
         USING ASCAHDR,R6     est addr to ASCA
         SPACE 1
         L     R5,LS_@ASAB    get addr of ASAB
         USING ASABHDR,R5     est addr to ASAB
         SPACE 1
*        call ASUMDHEX to dump the ASAB
         LH    R0,ASAB_DSLEN  length of ASAB
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F2
         MVC   DMPRB_TITLE,=CL44'AS Anchor block'
         AS2PLIST (ASCAHDR,AS3DMPRB,ASABHDR),                          +
               VL,MF=(E,PLIST)
         DROP  R5,R6
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
*        dump the ASABX
PASABX   AS2LTRCE
         AS2RESTK PUSH
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE999L),LNE999T
         AS2PLIST (LNEAREA,LEMDEST,0),VL,MF=(E,PLIST)
         L     RF,@CEEMOUT
*        CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         SPACE 1
         L     R6,LS_@ASCA    get addr of ASCA
         USING ASCAHDR,R6     est addr to ASCA
         SPACE 1
         L     R5,LS_@ASABX   get addr of ASABX
         USING ASABXHDR,R5
         SPACE 1
*        call ASUMDHEX to dump the ASABX
         LH    R0,ASAB1_DSLEN length of ASABX
         ST    R0,DMPRB_LEN
         MVC   DMPRB_NBR,F3
         MVC   DMPRB_TITLE,=CL44'AS Anchor block extended'
         AS2PLIST (ASCAHDR,AS3DMPRB,ASABXHDR),                         +
               VL,MF=(E,PLIST)
         DROP  R5,R6
*        CALL ASUMDHEX
         L     RF,@MDHEX
         BASR  RE,RF     link to
         SPACE 1
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
*        dynamically acquire the module EPA
         AS2EPA MF=C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0113A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     ERTN0800
         COPY  AS4MLCC9
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
STATIC   DS    0D
*        COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
@CEEMOUT DC    V(CEEMOUT)
         SPACE 1
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
         SPACE 1
H1       DC    H'1'
H8       DC    H'8'
H11      DC    H'11'
         SPACE 1
LNE001T  DC    Y(32),C'&CSECT: List AS control blocks'
LNE001L  EQU   *-LNE001T
         SPACE 1
LNE999T  DC    Y(10),C'&CSECT: '
LNE999L  EQU   *-LNE999T
         SPACE 1
**       AS1LAIDA UDS=PERSIST
         SPACE 1
         LTORG
         END
./ ADD NAME=ASU3T02B 0111-19322-19322-1018-01343-01343-00000-APLKS   36
*PROCESS RENT
         TITLE 'AS UTILITY TERMINATION REPORT'
*************************************************************
* ARCHITECTURE SERVICES UTILITY MVS
* Termination Report (programs/CDE)
*
*    Name: ASU3T02B
*
* Purpose: Create termination report.
*          1 - chase the CDE chain and report
*
*************************************************************
         SPACE 1
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASU3T02B'
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         PRINT ON,GEN
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              work register
*                             BAR of PSA
R1       EQU   1              work register, address of parm list
R2       EQU   2              work register
*                             BAR of TIOTE
R3       EQU   3              work register
R4       EQU   4              not used
R5       EQU   5              not used
*                             BAR of ASAB, ASABX
R6       EQU   6              BAR of TCB, TIOT, INFMJFCB, CDENTRY
*                             BAR of ASCA
R7       EQU   7              BAR of ASAB, ZB505
R8       EQU   8              BAR of ASABX, ASCA
R9       EQU   9              static storage BAR
RA       EQU   10             program BAR 1
RB       EQU   11             reserved for program BAR 2
RC       EQU   12             LE CAA BAR
RD       EQU   13             RSA/DSA BAR 1
RE       EQU   14             return address
RF       EQU   15             branch and link address
         SPACE 1
         PUSH  PRINT
         PRINT OFF
         CEECAA
         POP   PRINT
         EJECT
         CEEDSA
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
CLRBEG   EQU   *
         SPACE 1
RTNCD    DS    F              return code R15
RSNCD    DS    F              error  code R0
         SPACE 1
SUBPARM0 DS    A              addr of ASCA ptr
         ORG   SUBPARM0
SUBPARM1 DS    A              addr of ASCA ptr
SUBPARM2 DS    A              LE FDBK / LEFC
         ORG   SUBPARM2
@PLEFDBK DS    A              addr of pgm LE feedback
         SPACE 1
LS_@ASAB DS    A              addr of ASAB
LS_@ASABX DS   A              addr of ASAB1
LS_@ASCA DS    A              addr of ASCA
LS_@TCB  DS    A              TCB pointer
LS_@JOBSTEPTCB DS    A        TCB for JOBSTEP
LS_@JPALCDE DS    A           TCB JPA lst CDE pointer
*                             ..points to JPA CDE queue
LS_@TIOT DS    A              TIOT pointer
LS_@1stTIOTE DS    A          1st TIOTE pointer
LS_@TIOTE DS    A             current TIOTE pointer
LS_@SWAEPA DS    A            SWA EPA pointer
*                             ..Scheduler Work Area Extended Parm Area
         SPACE 1
LS_SWAEPA DS    XL(L'SWAEPAX) SWA Extended Parm Area
SWAPARMS SWAREQ MF=L
         SPACE 2
         DS    0D             required hwd align
*                             BLDL return info
LS_BLDL_PFX DS    XL8         required for BLDL PREFIX
LS_BLDL_LST DS    0XL80
LS_BLDL_CNT DS    H           ..nbr of entries in list
LS_BLDL_LEN DS    H           ..maximum len of entry
         IHAPDS DSECT=NO      map PDS/PDSE directory entry
         SPACE 2
*                             CSV return info
LS_CSV_VALID DS    0F
         BITDEF $CSV_OUTLENGTH,         ..validity byte-0              +
               $CSV_OUTEPA,                                            +
               $CSV_OUTEPNM,                                           +
               $CSV_OUTMJNM,                                           +
               $CSV_OUTSP,                                             +
               $CSV_OUTATTR0,                                          +
               $CSV_OUTATTR1,                                          +
               $CSV_OUTATTR2
         BITDEF $CSV_OUTLOADPT,         ..validity byte-1              +
               $CSV_OUTPDATA,                                          +
               $CSV_OUTPID,                                            +
               $CSV_OUTEPTKN,                                          +
               $CSV_OUTXLST,                                           +
               $CSV_OUTDIAG,                                           +
               $CSV_OUTRTID,                                           +
               $CSV_NULL1
         BITDEF $CSV_OUTEPA64,          ..validity byte-2              +
               $CSV_OUTLOADPT64,                                       +
               $CSV_OUTLENGTH64,                                       +
               $CSV_OUTXTLST64,                                        +
               $CSV_OUTXATTR1,                                         +
               $CSV_OUTPATHNAME,                                       +
               $CSV_OUTDSKEY
         BITDEF $CSV_NULL3              ..validity byte-3
         DS    0F
LS_CSV_ATTR  DS    0XL3       ..load module attribute byte 0:2
LS_CSV_ATTR1 DS    0XL1       ....load module attribute byte 0
         BITDEF $CSV_EOMDEL,                                           +
               $CSV_LOADED2GLOBAL,                                     +
               $CSV_RENT,                                              +
               $CSV_REUS,                                              +
               $CSV_NOTLOADABLEONLY,                                   +
               $CSV_OVERLAY,                                           +
               $CSV_ALIAS,                                             +
               $CSV_NULL11
LS_CSV_ATTR2 DS    0XL1       ....load module attribute byte 1
         BITDEF $CSV_AUTHLIB,                                          +
               $CSV_AUTHPGM,                                           +
               $CSV_AMODEANY,                                          +
               $CSV_AMODE31,                                           +
               $CSV_NULL12,                                            +
               $CSV_DYNLPA,                                            +
               $CSV_PAGEPROT,                                          +
               $CSV_AMODE64
LS_CSV_ATTR3 DS    0XL1       ....load module attribute byte 2
         BITDEF $CSV_RESATL,                                           +
               $CSV_RESJPA,                                            +
               $CSV_RESPLPA,                                           +
               $CSV_RESMLPA,                                           +
               $CSV_RESFLPA,                                           +
               $CSV_RESCSA
         DS    XL1
LS_CSV_POBJLEN DS    F        ..pgm obj length
LS_CSV_POBJLPA DS    A        ..pgm obj load point addr
LS_CSV_POBJEPA DS    A        ..pgm obj entry point addr
         SPACE 2
         CSVQUERY PLISTVER=MAX,                                        +
               MF=(L,CSVQRYWK)
         SPACE 2
LS_BSTG  EQU   *,50,C'X'
LS_@CDE  DS    A              ..CDE addr
LS_@majCDE DS    A            ..major CDE addr
LS_LPA   DS    A              ..load point addr
LS_EPA   DS    A              ..entry point addr
LS_SIZE  DS    F              ..size
LS_LDCNT DS    H              ..load count
LS_LIBSEQ DS   H              ..library order/sequence
LS_MODNM DS    CL8            ..module name
LS_AMODE DS    CL3            ..amode
LS_RMODE DS    CL3            ..rmode
LS_REFR  DS    CL2            ..refresh
LS_RENT  DS    CL2            ..rent
LS_REUS  DS    CL2            ..reus
LS_MJMR  DS    CL1            ..major/minor flag
LS_ATTR  DS    XL5            ..attribute bytes
LS_ESTG  EQU   *
LS_TSTG  DS    F              total pgm storage
         SPACE 1
         AS1MUTSA UDS=(RESA,LEWORK,MISC)
         ORG   VSTR
LNEAREA  DS    0XL122         Print line area (CEEMOUT)
LNELEN   DS    H
         SPACE 1
LNETXT   DS    CL120
         ORG   LNETXT
         SPACE 1
         ORG   LNETXT+21      ..line 003
LNE003A  DS    CL8            ....JOBNAME(xxxxxxxx)
         ORG   LNETXT+40      ..line 003
LNE003B  DS    CL8            ....JOBSTEP(xxxxxxxx)
         ORG   LNETXT+60      ..line 003
LNE003C  DS    CL8            ....PROCSTEP(xxxxxxxx)
         SPACE 1
         ORG   LNETXT+13      ..line 005
LNE005A  DS    CL4            .... joblib/steplib
         SPACE 1
         ORG   LNETXT+16      ..line 006
LNE006A  DS    ZL2            ....+nn
         ORG   LNETXT+19      ..line 006
LNE006B  DS    CL44           ....library name
         SPACE 1
         ORG   LNETXT+4       ..line 009
LNE009A  DS    CL8            ....LPA
         ORG   LNETXT+17      ..line 009
LNE009B  DS    CL8            ....EPA
         ORG   LNETXT+28      ..line 009
LNE009C  DS    ZL7            ....SIZE
         ORG   LNETXT+37      ..line 009
LNE009D  DS    CL1            ....+|-
         ORG   LNETXT+39      ..line 009
LNE009E  DS    CL8            ....MODULE
         ORG   LNETXT+49      ..line 009
LNE009F  DS    ZL5            ....LOAD COUNT
         ORG   LNETXT+57      ..line 009
LNE009G  DS    ZL2            ....LIBRARY ORDER
         ORG   LNETXT+61      ..line 009
LNE009H  DS    CL3            ....AMODE
         ORG   LNETXT+65      ..line 009
LNE009I  DS    CL3            ....RMODE
         ORG   LNETXT+70      ..line 009
LNE009J  DS    CL2            ....REFRESH
         ORG   LNETXT+73      ..line 009
LNE009K  DS    CL2            ....RENT
         ORG   LNETXT+76      ..line 009
LNE009M  DS    CL2            ....REUS
         ORG   LNETXT+82      ..line 009
LNE009N  DS    CL10           ....ATTRIBUTES
         ORG   LNETXT+97      ..line 009
LNE009P  DS    CL8            ....CDE ADDR
         ORG   LNETXT+110     ..line 009
LNE009Q  DS    CL8            ....MAJOR CDE ADDR
         SPACE 1
         ORG   LNETXT+24      ..line 010
LNE010A  DS    CL11           ....total storage size
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              caller's R1
         SPACE 1
LS_EDNBR DS    CL12
         SPACE 1
         DS    0D
         AS1MUTSA UDS=LTRACE
         SPACE 2
#UDSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       length of DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: parameter list passed to this subordinate rtn
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
ASCAptr  DS    A              pointer to AS COMMAREA addr
@FDBK    DS    A              LE FEED BACK AREA
         SPACE 2
* --------------------------------------------------------- *
* Expand DSECT(s)
* --------------------------------------------------------- *
         SPACE 1
*        expand AS anchor block
ASABHDR  AS1MASDS ADS=ASAB,MF=D
*        expand AS batch anchor block extention
ASABXHDR AS1MASDS ADS=ASAB1,MF=D
         SPACE 1
*        expand AS communication area
ASCAHDR  AS1MASDS ADS=ASCA,MF=D
         SPACE 2
* --------------------------------------------------------- *
* CONTROL BLOCKS FOR MVS
* --------------------------------------------------------- *
         SPACE 1
*        PREFIXED SAVE AREA (PSA)
         IHAPSA  DSECT=YES    (,LIST=YES)
         SPACE 1
*        MVS COMMUNICATION VECTOR (CVT) required for SWAREQ
         CVT   DSECT=YES      (,LIST=YES)
         SPACE 1
*        TASK CONTROL BLOCK (TCB)
         IKJTCB DSECT=YES     (,LIST=YES)
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
*        JES COMMUNICATION TABLE (JESCT)
*                                       required for SWAREQ
         IEFJESCT
         POP   PRINT
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        TASK INPUT/OUTPUT TABLE (TIOT/TIOTE)
TIOT     DSECT
         IEFTIOT1
         POP   PRINT
         SPACE 1
*        JOB FILE CONTROL BLOCK (JFCB)            176,X'B0'
JFCB     DSECT
         IEFJFCBN LIST=YES    (,LIST=YES)
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        EXTERMAL PARAMETER AREA FOR SCHEDULER WORK AREA
*                                       required for SWAREQ
         IEFZB505 LOCEPAX=YES
         POP   PRINT
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        SCHEDULER WORK AREA BLOCK ID DEFINITIONS
*                                       required for SWAREQ
         IEFQMIDS
         POP   PRINT
         SPACE 1
         PUSH  PRINT
**       PRINT NOGEN
*        CONTENTS DIRECTORY ENTRY (CDE)
         IHACDE
         POP   PRINT
         SPACE 2
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   0=ESA 1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO if called by non-LE          +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         save original R1 value
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         B     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPA      CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=01,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         EJECT
* --------------------------------------------------------- *
* INITALIZATION ROUTINE(S)
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *         initialize DSA storage
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          clear DSA storage
         MVC   LEMDEST,F2
         SPACE 1
INIT0100 EQU   *
         L     R1,SUBPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,EXIT0000
         MVC   SUBPARM1,ASCAptr
         NC    SUBPARM1,=XL4'7FFFFFFF'
         TM    ASCAptr,X'80'  Q. last parameter
         JO    INIT0120       A. NO,
         SPACE 1
INIT0110 EQU   *
         MVC   SUBPARM2,@FDBK
         NC    SUBPARM2,=XL4'7FFFFFFF'
         TM    @FDBK,X'80'    Q. last parameter
         JNO   TXT0113A       A. NO,
         SPACE 1
INIT0120 EQU   *
         DROP  R1
         SPACE 1
         ICM   R6,15,SUBPARM1 Q. ASCA
         JZ    ABEND850       A. no, error
         USING ASCAHDR,R6     est addr to ASCA
         SPACE 1
         CLC   ASCA_DSID,=Y($ASCA) Q. ASCA
         JNE   ABEND850            A. no, error
         CLC   ASCA_EYE,=C'**ASCA**'    Q. ASCA
         JNE   ABEND850                 A. no, error
         ST    R6,LS_@ASCA
         ICM   R5,15,ASCA_@ASAB    Q. ASAB
         JZ    ABEND850            A. no, error
         USING ASABHDR,R5     est addr to ASAB
         SPACE 1
         CLC   ASAB_DSID,=Y($ASAB) Q. ASAB
         JNE   ABEND850            A. no, error
         CLC   ASAB_EYE,=C'**ASAB**'    Q. ASAB
         JNE   ABEND850                 A. no, error
         ST    R5,LS_@ASAB
         ICM   R5,15,ASAB_@ASABX   Q. ASABX
         JZ    ABEND850            A. no, error
         ST    R5,LS_@ASABX
         DROP  R5,R6
         SPACE 1
INIT0900 EQU   *
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES,PRINT=YES
         SPACE 1
* --------------------------------------------------------- *
* MAINLINE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 AS2LTRCE
*        print blank line
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNELEN,H1
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
*        print line 1
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE001L),LNE001T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         BRAS  RE,PTIOT       print TIOT JOBNAME/STEPNAME/PROCSTEP
         BRAS  RE,PTIOTE      print TIOTE JOBLIB/STEPLIB
         BRAS  RE,PCDE        print CDE chain
         SPACE 1
*        print line 10
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE010L),LNE010T
         ZAP   PD01,=P'0'
         L     R0,LS_TSTG
         CVD   R0,PD01+L'PD01-8
         MVC   LS_EDNBR,SIZEMASK
         ED    LS_EDNBR,PD01+L'PD01-(9/2+1)
         MVC   LNE010A,LS_EDNBR+L'LS_EDNBR-L'LNE010A
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 2
* --------------------------------------------------------- *
* EXIT ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 AS2LTRCE
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 2
* --------------------------------------------------------- *
* print TIOT values
* --------------------------------------------------------- *
         SPACE 1
PTIOT    AS2LTRCE
         AS2RESTK PUSH
         USING PSA,R0         est addr to PSA
         SPACE 1
         L     R6,PSATOLD     get addr of TCB
         ST    R6,LS_@TCB
         DROP  R0
         SPACE 1
         USING TCB,R6         est addr to TCB
         SPACE 1
         L     R6,TCBJSTCB    get addr of JOBSTEP TCB
         ST    R6,LS_@JOBSTEPTCB
         L     R0,TCBTIO      get addr of TIOT
         ST    R0,LS_@TIOT
         ICM   R0,14,TCBJPQB  get addr of lst CDE for JPA
         SRL   R0,8
         ST    R0,LS_@JPALCDE
         DROP  R6
         SPACE 1
         L     R6,LS_@TIOT    get addr of TIOT
         USING TIOT,R6        est addr to TIOT
         SPACE 1
         LA    R0,TIOENTRY    get addr of 1st TIOTE
         ST    R0,LS_@1stTIOTE
*        print line 2
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE002L),LNE002T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
*        print line 3
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE003L),LNE003T
         MVC   LNE003A,TIOCNJOB    copy JOB name
         CLI   TIOCJSTN,C' '  Q. PROC JOB STEP name
         JE    PTIOT010       A. no, bypass
         MVC   LNE003B,TIOCJSTN    copy PROC JOB STEP name
         MVC   LNE003C,TIOCPSTN    copy PROC STEP name
         J     PTIOT020
         SPACE 1
PTIOT010 EQU   *
         MVC   LNE003B,TIOCSTPN    copy non-PROC JOB STEP name
         DROP  R6
         SPACE 1
PTIOT020 EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
PTIOT800 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* print TIOTE values
* --------------------------------------------------------- *
         SPACE 1
PTIOTE   AS2LTRCE
         AS2RESTK PUSH
*        print line 4
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE004L),LNE004T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         L     R2,LS_@1stTIOTE     get addr of 1st TIOTE
         USING TIOENTRY,R2    est addr to TIOTE
         SPACE 1
         AS2DDSCN =CL8'STEPLIB'    Q. find ddname in TIOTE
         JNZ   PTIOTE10            A. no, not found
         ST    R2,LS_@TIOTE   save addr of TIOTE match
         DROP  R2
         SPACE 1
*        print line 5
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE005L),LNE005T
         MVC   LNE005A,=CL4'STEP'
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         BRAS  RE,PLIB        Q. lookup STEPLIB DD
         JNZ   PTIOTE800      A. no more to process
         J     PTIOTE800
         SPACE 1
PTIOTE10 AS2LTRCE
         L     R2,LS_@1stTIOTE     get addr of 1st TIOTE
         USING TIOENTRY,R2    est addr to TIOTE
         SPACE 1
         AS2DDSCN =CL8'JOBLIB'     Q. find ddname in TIOTE
         JNZ   PTIOTE20            A. no, not found
         ST    R2,LS_@TIOTE   save addr of TIOTE match
         DROP  R2
         SPACE 1
*        print line 5
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE005L),LNE005T
         MVC   LNE005A,=CL4' JOB'
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         BRAS  RE,PLIB        Q. lookup JOBLIB DD
         JNZ   PTIOTE800      A. no more to process
         J     PTIOTE800
         SPACE 1
PTIOTE20 EQU   *
         SPACE 1
PTIOTE800 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* print all of the JFCB JOBLIB/STEPLIB DSNAME(s)
* --------------------------------------------------------- *
         SPACE 1
PLIB     AS2LTRCE
         AS2RESTK PUSH
         L     R2,LS_@TIOTE   get addr of current TIOTE
         USING TIOENTRY,R2    est addr to TIOTE
         SPACE 1
         XC    DW02,DW02
PLIB0200 EQU   *
         LA    R7,LS_EPA      get addr of Extended Parm Area
         ST    R7,LS_@SWAEPA
         USING ZB505,R7       est addr to EPA
         SPACE 1
         XC    SWAEPAX,SWAEPAX
         MVC   SWVA,TIOEJFCB  set SVA of JFCB into EPA
         DROP  R2
         SPACE 1
         MVC   RTNCD,F0
         MVC   RSNCD,F0
         SWAREQ UNAUTH=YES,                                            +
               FCODE=RL,           action code READ/LOCATE             +
               EPA=LS_@SWAEPA,                                         +
               MF=(E,SWAPARMS)
*        RF=0  successful
*           8  SVA is not valid
*           24 SVA doesn't correspond to virtual addr
*           28 ptr to EPAL not valid
         LARL  RE,PLIB0800    set default return
         ST    RF,RTNCD
         LTR   RF,RF          Q. any errors
         JNZ   TXT0107B       A. yes, setup LE COND
         SPACE 1
         CLI   SWBLKID,SWJFCBID    Q. SYSTEM JFCB
         JNE   PLIB0800            A. no, bypass
         L     R6,SWBLKPTR    get addr of SYSTEM JFCB
         DROP  R7
         SPACE 1
         USING INFMJFCB,R6    est addr to SYSTEM JFCB
         SPACE 1
*        print line 6
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE006L),LNE006T
         LH    R0,HW24        get DSNAME concatenation nbr
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE006A,ZD01+L'ZD01-L'LNE006A
         AHI   R0,1           bump up concatenation nbr
         STH   R0,HW24        save it for next loop
         MVC   LNE006B,JFCBDSNM    copy DSNAME
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         DROP  R6
         SPACE 1
         L     R2,LS_@TIOTE   get addr of current TIOTE
         USING TIOENTRY,R2    est addr to TIOTE
         AS2DDNXT ,           Q. find concatenation to DDNAME
         JNZ   PLIB0800       A. no, not found
         DROP  R2
         SPACE 1
         ST    R2,LS_@TIOTE   save addr of TIOTE concatenation
         J     PLIB0200
         SPACE 1
PLIB0800 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* print the CDE chain with additional info from CSV & BLDL
* --------------------------------------------------------- *
         SPACE 1
PCDE     AS2LTRCE ,      print CDE entry chain
         AS2RESTK PUSH
         LARL  RE,PCDE0800
         ICM   R6,15,LS_@JPALCDE   Q. get addr of JPAQ
         JZ    TXT0108C            A. no, error
*        print line 7
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE007L),LNE007T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
*        print line 8
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE008L),LNE008T
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
         USING CDENTRY,R6     est addr to CDE entry
         SPACE 1
PCDE0100 EQU   *
         TM    CDATTR3,CDPATHN     Q. OMVS path
         JO    PCDE0400            A. yes, bypass
         CLC   CDNAME(3),=CL3'CEE' Q. CEE
         JE    PCDE0400            A. yes, bypass
         CLC   CDNAME(3),=CL3'IGZ' Q. IGZ
         JE    PCDE0400            A. yes, bypass
         ST    R6,LS_@CDE     save addr of CDE
         MVI   LS_MJMR,C'+'
         TM    CDATTR,CDMIN   Q. minor CDE
         JNO   PCDE0200       A. no, bypass
         MVI   LS_MJMR,C'-'
         MVC   LS_@majCDE,CDXLMJP  save addr of major CDE
PCDE0200 EQU   *
         MVC   LS_MODNM,CDNAME
         MVC   LS_EPA,CDENTPT
         MVC   LS_AMODE,=CL3' 24'  AMODE=24
         TM    CDENTPT,CDEMODE     Q. AMODE 31
         JNO   PCDE0210            A. no, bypass
         MVC   LS_AMODE,=CL3' 31'  A. yes, AMODE=31
         J     PCDE0220
         SPACE 1
PCDE0210 EQU   *
         TM    CDENTPT3,CDEMOD64   Q. AMODE 64
         JNO   PCDE0220            A. no, bypass
         MVC   LS_AMODE,=CL3' 64'  A. yes, AMODE=64
PCDE0220 EQU   *
         MVC   LS_LDCNT,CDUSE
         MVC   LS_ATTR(L'CDATTRB),CDATTRB    save flag byte
         MVC   LS_ATTR+1(L'CDATTR),CDATTR    save attr 1
         TM    CDATTR,CDREN   Q. re-entrant
         JNO   PCDE0222       A. no, bypass
         MVC   LS_RENT,=CL2'RN'
PCDE0222 EQU   *
         TM    CDATTR,CDSER   Q. reusable
         JNO   PCDE0224       A. no, bypass
         MVC   LS_REUS,=CL2'RU'
PCDE0224 EQU   *
         MVC   LS_ATTR+2(L'CDATTR2),CDATTR2  save attr 2
         MVC   LS_RMODE,=CL3' 24'
         TM    CDATTR2,CDEANYM     Q. RMODE ANY
         JNO   PCDE0226
         MVC   LS_RMODE,=CL3'ANY'
PCDE0226 EQU   *
         MVC   LS_ATTR+3(L'CDATTR3),CDATTR3  save attr 3
         MVC   LS_ATTR+4(L'CDATTR4),CDATTR4  save attr 4
         SPACE 1
PCDE0300 EQU   *
         BRAS  RE,CSVRTN
         BRAS  RE,BLDLRTN
*        print line 9
         MVI   LNETXT,C' '
         MVC   LNETXT+1(L'LNETXT-1),LNETXT
         MVC   LNEAREA(LNE009L),LNE009T
         UNPK  ZD01(9),LS_LPA(L'LS_LPA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE009A,ZD01+8-L'LNE009A
         UNPK  ZD01(9),LS_EPA(L'LS_EPA+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE009B,ZD01+8-L'LNE009B
         L     R0,LS_SIZE
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE009C,ZD01+L'ZD01-L'LNE009C
         MVC   LNE009D,LS_MJMR
         MVC   LNE009E,LS_MODNM
         LH    R0,LS_LDCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE009F,ZD01+L'ZD01-L'LNE009F
         LH    R0,LS_LIBSEQ
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   LNE009G,ZD01+L'ZD01-L'LNE009G
         OC    LS_AMODE,LS_AMODE
         JZ    PCDE0310
         MVC   LNE009H,LS_AMODE
PCDE0310 EQU   *
         OC    LS_RMODE,LS_RMODE
         JZ    PCDE0312
         MVC   LNE009I,LS_RMODE
PCDE0312 EQU   *
         OC    LS_REFR,LS_REFR
         JZ    PCDE0314
         MVC   LNE009J,LS_REFR
PCDE0314 EQU   *
         OC    LS_RENT,LS_RENT
         JZ    PCDE0316
         MVC   LNE009K,LS_RENT
PCDE0316 EQU   *
         OC    LS_REUS,LS_REUS
         JZ    PCDE0318
         MVC   LNE009M,LS_REUS
PCDE0318 EQU   *
         UNPK  ZD01(9),LS_ATTR(5)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE009N(8),ZD01+8-8
         UNPK  ZD01(9),LS_ATTR+4(2)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE009N+8(2),ZD01+8-2
         UNPK  ZD01(9),LS_@CDE(L'LS_@CDE+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE009P,ZD01+8-L'LNE009P
         OC    LS_@majCDE,LS_@majCDE
         JZ    PCDE0320
         UNPK  ZD01(9),LS_@majCDE(L'LS_@majCDE+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   LNE009Q,ZD01+8-L'LNE009Q
PCDE0320 EQU   *
         AS2PLIST (LNEAREA,LEMDEST,0),                                 +
               VL,MF=(E,PLIST)
*        CALL CEEMOUT
         L     RF,=V(CEEMOUT)
         BASR  RE,RF     LINK TO
         SPACE 1
PCDE0400 AS2LTRCE
         XC    LS_BSTG,LS_BSTG     clear storage
         ICM   R6,15,CDCHAIN  Q. any more on the chain
         DROP  R6
         JNZ   PCDE0100       A. yes, loop back
**       J     PCDE0800       A. no, exit
         SPACE 1
PCDE0800 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         SPACE 2
* --------------------------------------------------------- *
* extract CSV information
* --------------------------------------------------------- *
         SPACE 1
CSVRTN   AS2LTRCE
         AS2RESTK PUSH
         MVC   RTNCD,F0
         MVC   RSNCD,F0
         CSVQUERY SEARCH=JPALPA,                                       +
               INEPNAME=LS_MODNM,                                      +
               OUTATTR1=LS_CSV_ATTR1,                                  +
               OUTATTR2=LS_CSV_ATTR2,                                  +
               OUTATTR3=LS_CSV_ATTR3,                                  +
               OUTVALID=LS_CSV_VALID,                                  +
               OUTLENGTH=LS_CSV_POBJLEN,                               +
               OUTLOADPT=LS_CSV_POBJLPA,                               +
               OUTEPA=LS_CSV_POBJEPA,                                  +
               MF=(E,CSVQRYWK)
*        RF=0  successful
*           4  module found, 1 or more fields not valid
*           8  module not found
*           12 cannot obtain the lock(s)
*           16 unexpected error
*           20 invalid request
         ST    RF,RTNCD
         C     RF,F8          Q. bad error
         JL    CSV0030        A. yes, bypass
         LARL  RE,CSV0800     set default return
         J     TXT0107C
         SPACE 1
CSV0030  EQU   *         LS_CSV_ATTR1
         JBITOFF ($CSV_OUTATTR0),CSV0050
**       JBITOFF ($CSV_EOMDEL),CSV0032  Q. end-of-module delete
CSV0032  EQU   *
**       JBITOFF ($CSV_LOADED2GLOBAL),CSV0034     Q. load to global
CSV0034  EQU   *
         JBITOFF ($CSV_RENT),CSV0036    Q. RENT
         OC    LS_RENT,LS_RENT
         JNZ   CSV0036
         MVC   LS_RENT,=CL2'RN'         A. yes
CSV0036  EQU   *
         JBITOFF ($CSV_REUS),CSV0038    Q. REUS
         OC    LS_REUS,LS_REUS
         JNZ   CSV0038
         MVC   LS_REUS,=CL2'RU'         A. yes
CSV0038  EQU   *
**       JBITOFF ($CSV_NOTLOADABLEONLY),CSV0040   Q. not loadable only
CSV0040  EQU   *
**       JBITOFF ($CSV_OVERLAY),CSV0042 Q. overlay format
CSV0042  EQU   *
**       JBITOFF ($CSV_ALIAS),CSV0044   Q. ALIAS
CSV0044  EQU   *
CSV0046  EQU   *
         SPACE 1
CSV0050  EQU   *         LS_CSV_ATTR2
         JBITOFF ($CSV_OUTATTR1),CSV0070
CSV0054  EQU   *
         JBITOFF ($CSV_AMODEANY),CSV0056     Q. AMODE(ANY)
         OC    LS_AMODE,LS_AMODE
         JNZ   CSV0056
         MVC   LS_AMODE,=CL3'ANY'            A. yes
CSV0056  EQU   *
         JBITOFF ($CSV_AMODE31),CSV0058 Q. AMODE(31)
         OC    LS_AMODE,LS_AMODE
         JNZ   CSV0058
         MVC   LS_AMODE,=CL3' 31'       A. yes
CSV0058  EQU   *
CSV0064  EQU   *
         JBITOFF ($CSV_AMODE64),CSV0068 Q. AMODE(64)
         OC    LS_AMODE,LS_AMODE
         JZ    CSV0068
         MVC   LS_AMODE,=CL3' 64'       A. yes
CSV0068  EQU   *
         SPACE 1
CSV0070  EQU   *         LS_CSV_ATTR3
         JBITOFF ($CSV_OUTATTR2),CSV0090
         MVC   LS_RMODE,=CL3' 24'
         JBITOFF ($CSV_RESATL),CSV0072  Q. resident above-the-line
         MVC   LS_RMODE,=CL3'ANY'       A. yes
CSV0072  EQU   *
**       JBITOFF ($CSV_RESJPA),CSV0074  Q. resident in JPA
CSV0074  EQU   *
**       JBITOFF ($CSV_RESPLPA),CSV0076 Q. resident in PLPA
CSV0076  EQU   *
**       JBITOFF ($CSV_RESMLPA),CSV0078 Q. resident in MLPA
CSV0078  EQU   *
**       JBITOFF ($CSV_RESFLPA),CSV0080 Q. resident in FLPA
CSV0080  EQU   *
**       JBITOFF ($CSV_RESCSA),CSV0082  Q. resident in CSA
CSV0082  EQU   *
         SPACE 1
CSV0090  EQU   *         LS_CSV_LOADER
         SPACE 1
CSV0100  EQU   *         LS_CSV_PDATA
         SPACE 1
CSV0120  EQU   *         LS_CSV_POBJLEN
         JBITOFF ($CSV_OUTLENGTH),CSV0130    Q. pgm obj len
         MVC   LS_SIZE,LS_CSV_POBJLEN        A. yes
         L     R0,LS_TSTG
         A     R0,LS_SIZE
         ST    R0,LS_TSTG     save total pgm storage used
         SPACE 1
CSV0130  EQU   *         LS_CSV_POBJLPA
         JBITOFF ($CSV_OUTLOADPT),CSV0140    Q. pgm obj load pt addr
         MVC   LS_LPA,LS_CSV_POBJLPA         A. yes
         SPACE 1
CSV0140  EQU   *         LS_CSV_POBJEPA
         JBITOFF ($CSV_OUTEPA),CSV0150       Q. pgm obj entry pt addr
         OC    LS_EPA,LS_EPA
         JNZ   CSV0150
         MVC   LS_EPA,LS_CSV_POBJEPA         A. yes
         SPACE 1
CSV0150  EQU   *
CSV0800  EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* extract BLDL information
* --------------------------------------------------------- *
         SPACE 1
BLDLRTN  AS2LTRCE
         AS2RESTK PUSH
         MVC   LS_BLDL_CNT,H1
         LA    R0,L'LS_BLDL_LST
         STH   R0,LS_BLDL_LEN
         MVC   PDS2NAME,LS_MODNM
         MVC   RTNCD,F0
         MVC   RSNCD,F0
         BLDL  0,LS_BLDL_LST,NOCONNECT
*        RF=0  R0=0  successful
*           4     0  some entries not resolved
*           4     4  connect to UNIX failed because of RACF exec auth
*           8     0  permanent I/O error
*           8     4  insufficient virtual storage
*           8     8  invalid DEB
*           8     20 error returned by IGGSOOPN
*           8     24 connect to UNIX failed because of RACF user auth
*           8     20 START=value is invalid
*           8     32 START or STOP was specified with DCB addr 0
*           8     36 STOP=value is invalid
         ST    RF,RTNCD
         ST    R0,RSNCD
         LARL  RE,BLDL0800    set default return
         C     RF,F8          Q. serious errors
         JNL   TXT0107D       A. yes, error
         ICM   R0,8,PDS2CNCT       pick up concatenation nbr
         SRL   R0,24
         STH   R0,LS_LIBSEQ        save DS concatenation nbr
         TM    PDS2ATR1,PDS2RENT   Q. RENT
         JNO   BLDL0020
         OC    LS_RENT,LS_RENT
         JNZ   BLDL0020
         MVC   LS_RENT,=CL2'RN'    A. yes
BLDL0020 EQU   *
         TM    PDS2ATR1,PDS2REUS   Q. REUS
         JNO   BLDL0022
         OC    LS_REUS,LS_REUS
         JNZ   BLDL0022
         MVC   LS_REUS,=CL2'RU'    A. yes
BLDL0022 EQU   *
**       TM    PDS2ATR1,PDS2OVLY   Q. OVLY
**       JNO   BLDL0024
BLDL0024 EQU   *
**       TM    PDS2ATR1,PDS2TEST   Q. TEST
**       JNO   BLDL0026
BLDL0026 EQU   *
**       TM    PDS2ATR1,PDS2LOAD   Q. only loadable
**       JNO   BLDL0028
BLDL0028 EQU   *
**       TM    PDS2ATR1,PDS2SCTR   Q. scatter storage
**       JNO   BLDL0030
BLDL0030 EQU   *
**       TM    PDS2ATR1,PDS2EXEC   Q. executable
**       JNO   BLDL0032
BLDL0032 EQU   *
**       TM    PDS2ATR1,PDS21BLK
**       JNO   BLDL0034
BLDL0034 EQU   *
**       TM    PDS2ATR2,PDS2FLVL
**       JNO   BLDL0040
BLDL0040 EQU   *
**       TM    PDS2ATR2,PDS2ORG0
**       JNO   BLDL0042
BLDL0042 EQU   *
**       TM    PDS2ATR2,PDS2EP0
**       JNO   BLDL0044
BLDL0044 EQU   *
**       TM    PDS2ATR2,PDS2NRLD
**       JNO   BLDL0046
BLDL0046 EQU   *
**       TM    PDS2ATR2,PDS2NREP
**       JNO   BLDL0048
BLDL0048 EQU   *
**       TM    PDS2ATR2,PDS2TSTN
**       JNO   BLDL0050
BLDL0050 EQU   *
**       TM    PDS2ATR2,PDS2LEF
**       JNO   BLDL0052
BLDL0052 EQU   *
         TM    PDS2ATR2,PDS2REFR   Q. REFR
         JNO   BLDL0054
         MVC   LS_REFR,=CL2'RF'    A. yes
BLDL0054 EQU   *
**       TM    PDS2FTB1,PDSAOSLE   Q. OS/VS linkage editor
**       JNO   BLDL0060
BLDL0060 EQU   *
**       TM    PDS2FTB1,PDS2BIG    Q. large pgm obj
**       JNO   BLDL0062
BLDL0062 EQU   *
**       TM    PDS2FTB1,PDS2PAGA   Q. page align
**       JNO   BLDL0064
BLDL0064 EQU   *
**       TM    PDS2FTB1,PDS2SSI    Q. valid SSI
**       JNO   BLDL0066
BLDL0066 EQU   *
**       TM    PDS2FTB1,PDSAPFLG   Q. valid APF
**       JNO   BLDL0068
BLDL0068 EQU   *
**       TM    PDS2FTB1,PDS2PGMO   Q. pgm obj info available
**       JNO   BLDL0070
BLDL0070 EQU   *
**       TM    PDS2FTB1,PDS2SIGN   Q. pgm obj signed
**       JNO   BLDL0072
BLDL0072 EQU   *
**       TM    PDS2FTB1,PDS2XATR   Q. valid extended attributes
**       JNO   BLDL0074
BLDL0074 EQU   *
         SPACE 1
**       TM    PDS2FTB2,PDS2ALTP
**       JNO   BLDL0080
BLDL0080 EQU   *
BLDL0082 EQU   *
BLDL0084 EQU   *
         OC    LS_RMODE,LS_RMODE
         JNZ   BLDL0086
         TM    PDS2FTB2,PDSLRMOD   Q. RMODE
         JNO   BLDL0086
         MVC   LS_RMODE,=CL3'ANY'
BLDL0086 EQU   *
         TM    PDS2INDC,PDS2ALIS   Q. ALIAS
         JNO   BLDL0088            A. no, bypass
         OC    LS_AMODE,LS_AMODE
         JNZ   BLDL0088
         MVC   LS_AMODE,=CL3'ANY'
         TM    PDS2FTB2,PDSAAMOD   Q. ALIAS AMODE ANY
         JO    BLDL0090            A. yes, bypass
         MVC   LS_AMODE,=CL3' 31'
         TM    PDS2FTB2,BIT4       Q. ALIAS AMODE 31
         JO    BLDL0090            A. yes, bypass
         MVC   LS_AMODE,=CL3' 64'
         TM    PDS2FTB2,BIT5       Q. ALIAS AMODE 64
         JO    BLDL0090            A. yes, bypass
         MVC   LS_AMODE,=CL3' 24'
         J     BLDL0090
         SPACE 1
BLDL0088 EQU   *
         TM    PDS2INDC,PDS2ALIS   Q. ALIAS
         JO    BLDL0090            A. yes, bypass
         OC    LS_AMODE,LS_AMODE
         JNZ   BLDL0090
         MVC   LS_AMODE,=CL3'ANY'
         TM    PDS2FTB2,PDSMAMOD   Q. main AMODE ANY
         JO    BLDL0090            A. yes, bypass
         MVC   LS_AMODE,=CL3' 31'
         TM    PDS2FTB2,BIT6       Q. main AMODE 31
         JO    BLDL0090            A. yes, bypass
         MVC   LS_AMODE,=CL3' 64'
         TM    PDS2FTB2,BIT7       Q. main AMODE 64
         JO    BLDL0090            A. yes, bypass
         MVC   LS_AMODE,=CL3' 24'
**       J     BLDL0090
         SPACE 1
BLDL0090 EQU   *
         TM    PDS2FTB1,PDS2PGMO   Q. pgm obj info available
         JNO   BLDL0120            A. no, bypass
**       TM    PDS2FTB3,PDS2NMIG   Q. not migratable
**       JNO   BLDL0092            A. yes
BLDL0092 EQU   *
**       TM    PDS2FTB3,PDS2PRIM   Q. FETCHOPT=PRIME
**       JNO   BLDL0094            A. no, bypass
**       J     BLDL0096
BLDL0094 EQU   *
**       TM    PDS2FTB3,PDS2PACK   Q. FETCHOPT=PACK
**       JNO   BLDL0096            A. no, bypass
**       J     BLDL0096
BLDL0096 EQU   *
BLDL0120 EQU   *
         SPACE 1
BLDL0800 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0107B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'SWAREQ'
         J     MSG0107E
         SPACE 1
TXT0107C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CSVQUERY'
         J     MSG0107E
         SPACE 1
TXT0107D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((3-1)*L'ISICOL)(4),=CL4'BLDL'
**       J     MSG0107E
         SPACE 1
MSG0107E EQU   *    FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03B_0002
**       J     MSG0107
         SPACE 1
MSG0107  EQU   *
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         L     R0,RSNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     ERTN0800
         SPACE 2
TXT0108C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H9
         MVI   ISITXT+((7-1)*L'ISICOL),C'x'
         UNPK  ZD01(9),LS_@JPALCDE(L'LS_@JPALCDE+1)
         NC    ZD01(8),=8X'0F'
         TR    ZD01(8),=CL16'0123456789ABCDEF'
         MVC   ISITXT+((7-1)*L'ISICOL)+1(8),ZD01
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'LOCALSTG'
*        INSERT COMPONENT TYPE (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'LS_@JPALCDE'
**       J     MSG0108E
         SPACE 1
MSG0108E EQU   *    CONTAINS INVALID DATA
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03C_0002
**       J     MSG0108
MSG0108  EQU   *
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
**       J     ERTN0800
         COPY  AS4MLCC9
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         DROP  RA
         EJECT
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA) NONMUTABLE
* --------------------------------------------------------- *
         SPACE 1
STATIC   DS    0D
*        COPY  CEEBALCT       CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F8       DC    F'8'
         SPACE 1
H1       DC    H'1'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
         SPACE 1
SIZEMASK DC    XL12'402020206B2020206B202120'
         SPACE 1
LNE001T  DC    Y(48),C'&CSECT: List programs in storage via CDE chain'
LNE001L  EQU   *-LNE001T
         SPACE 1
LNE002T  DC    Y(16),C'&CSECT:  TIOT:'
LNE002L  EQU   *-LNE002T
         SPACE 1
LNE003T  DC    Y(69),C'&CSECT:    JOBNAME(xxxxxxxx)  JOBSTEP(xxxxxxxx) +
                PROCSTEP(xxxxxxxx)'
LNE003L  EQU   *-LNE003T
         SPACE 1
LNE004T  DC    Y(16),C'&CSECT: TIOTE:'
LNE004L  EQU   *-LNE004T
         SPACE 1                  steplib/joblib
LNE005T  DC    Y(20),C'&CSECT:    xxxxLIB'
LNE005L  EQU   *-LNE005T
         SPACE 1
LNE006T  DC    Y(63),C'&CSECT:      +nn xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx+
               xxxxxxxxxxxxx'
LNE006L  EQU   *-LNE006T
         SPACE 1
LNE007T  DC    Y(16),C'&CSECT:   CDE:'
LNE007L  EQU   *-LNE007T
         SPACE 1
LNE008T  DC    Y(118)
         DC    6C' '
         DC    CL48'LPA          EPA         SIZE    MODULE      CNT'
         DC    2C' '
         DC    CL3'LIB'
         DC    24C' '
         DC    CL7'ATTR(s)'
         DC    7C' '
         DC    CL8'CDE ADDR'
         DC    5C' '
         DC    CL8'MAJ ADDR'
LNE008L  EQU   *-LNE008T
         SPACE 1
LNE009T  DC    Y(119)
         DC    2C' '
         DC    CL11'x''znznznzn'''      LPA
         DC    2C' '
         DC    CL11'x''znznznzn'''      EPA
         DC    2C' '
         DC    CL7'nnnnnnn'             SIZE
         DC    4C' '
         DC    CL8'xxxxxxxx'            MODULE
         DC    2C' '
         DC    CL5'nnnnn'               LOAD COUNT
         DC    3C' '
         DC    CL2'nn'                  LIBRARY
         DC    2C' '
         DC    CL3'xxx'                 AMODE
         DC    CL1'/'
         DC    CL3'xxx'                 RMODE
         DC    2C' '
         DC    CL2'xx'                  REFRESH
         DC    CL1'-'
         DC    CL2'xx'                  RENT
         DC    CL1'-'
         DC    CL2'xx'                  REUS
         DC    2C' '
         DC    CL13'x''znznznznzn'''    ATTRIBUTES
         DC    2C' '
         DC    CL11'x''znznznzn'''      addr of CDE
         DC    2C' '
         DC    CL11'x''znznznzn'''      addr of major CDE
LNE009L  EQU   *-LNE009T
         SPACE 1
LNE010T  DC    Y(35),C'&CSECT:'
         DC    15C' '
         DC    CL11'zzz,zzz,zzn'
LNE010L  EQU   *-LNE010T
         SPACE 1
**       AS1LAIDA UDS=PERSIST
         SPACE 1
         LTORG
         END
./ ADD NAME=AS1LAIDA 0135-18275-19168-1000-00720-00715-00000-APLKS   43
         MACRO
&LABEL   AS1LAIDA &UDS=,                                               +
               &DSECT=NO,                                              +
               &EJECT=NO,                                              +
               &LIST=YES,                                              +
               &HIST=NO,                                               +
               &PARM=,                                                 +
               &PREFIX=,                                               +
               &MF=
.* -------------------------------------------------------- *
.* ARCHITECTURE SERVICES UTILTIY
.* ASSEMBLER MACRO, DATA
.*
.* MACRO ID: AS1LAIDA
.*    TITLE: MAP LEXICAL ANALYSIS INTERFACE DATA AREA
.*     DATE: 03/01/2005
.*
.*     DESC: THIS MACRO IS USED TO MAP THE INTERFACE DATA
.*
.*  OPTIONS:
.*                          <-,------+
.*     >>-AS1LAIDA-+-----(+----------+)------------------->
.*                 +-UDS=-+----------+
.*                        +-PARMLIST-+
.*                        +-ASU9LA00-+
.*                        +-ASU9LA01-+
.*                        +-ASU9LA02-+ REQUEST OPTIONS
.*                        +-ASU9LA03-+ SOURCE FIELD
.*                        +-ASU9LA04-+ TEMPLATE PREFIX
.*                        +-ASU9LA05-+
.*                        +-ASU9LA06-+ TEMPLATE RESULT INFIX
.*                        +-ASU9LA07-+ TEMPLATE SUFFIX
.*                        +-ASU9LA08-+ TOKEN DESCRIPTION
.*                        +-ASU9LA09-+ NUMBER DESCRIPTION
.*                        +-WORK-----+ PARSING WORK AREA
.*                        +-PERSIST--+
.*
.*      >-+--------------+--+--------------+-------------->
.*        +-DSECT=-+-NO--+  +-EJECT=-+-NO--+
.*                 +-YES-+           +-YES-+
.*        +-MF=-+--------+
.*              +-D------+
.*
.*      >-+-------------+--+-------------+---------------->
.*        +-LIST=-+-YES-+  +-HIST=-+-NO--+
.*                +-NO--+          +-YES-+
.*
.*      >-+-------------+--+---------------------+-------<<
.*        +-PARM=-+-----+  +-PREFIX=-+-----------+
.*                +-999-+            +-XXXXXXXXX-+
.*
.* -------------------------------------------------------- *
.* MAINTENANCE HISTORY:
.*
.* YYYY/MM/DD
.* -------------------------------------------------------- *
         GBLC  &GMSCPFX,&GRESPFX,&GTRCPFX,&GLEWPFX
         LCLA  &I,&J,&DUP#
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &P,&L
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS1LAIDA'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-09-18'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&I       SETA  1
         AIF   (T'&UDS NE 'O').LAID002
         MNOTE 8,'&MACNME - UDS PARAMETER IS MISSING, MACRO EXPANSION I+
               GNORED'
         MEXIT
.LAID002 ANOP
         AIF   ('&DSECT' EQ 'YES' OR '&DSECT' EQ 'NO').LAID010
         AIF   ('&MF' EQ 'D').LAID010
         MNOTE 4,'&MACNME - DSECT OR MF PARAMETER IS MISSING, WILL DEFA+
               ULT'
.LAID010 ANOP
         AIF   ('&EJECT' EQ 'YES' OR '&EJECT' EQ 'NO').LAID012
         MNOTE 8,'&MACNME - EJECT PARAMETER MUST BE "YES" OR "NO", MACR+
               O EXPANSION IGNORED'
         MEXIT
.LAID012 ANOP
         AIF   ('&LIST' EQ 'YES' OR '&LIST' EQ 'NO').LAID014
         MNOTE 8,'&MACNME - LIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.LAID014 ANOP
         AIF   ('&HIST' EQ 'YES' OR '&HIST' EQ 'NO').LAID016
         MNOTE 8,'&MACNME - HIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.LAID016 ANOP
.LAID018 ANOP
.* **********
.LAID020 ANOP
         AIF   ('&LIST' EQ 'YES').LAID022
         PRINT OFF
         AGO   .LAID024
.LAID022 ANOP
         PRINT ON
.LAID024 ANOP
.LAID030 ANOP
         AIF   (T'&PREFIX EQ 'O').LAID032
&P       SETC  '&PREFIX'
         AGO   .LAID034
.LAID032 ANOP
&P       SETC  ''
.LAID034 ANOP
.* **********
.LAID050 ANOP
         AIF   ('&UDS(&I)' EQ 'PARMLIST').LAID051
         AIF   ('&UDS(&I)' NE 'ASU9LA00').LAID070
.LAID051 ANOP
         AIF   ('&DSECT' EQ 'YES').LAID054
         AIF   ('&MF' EQ 'D').LAID054
         AIF   ('&LABEL' NE '').LAID052
&L       SETC  'ASU9LA00'
&L       DS    0D
         AGO   .LAID056
.LAID052 ANOP
&LABEL   DS    0D
         AGO   .LAID056
.LAID054 ANOP
         MNOTE 8,'&MACNME - DSECT IS NOT SUPPORTED FOR THIS REQUEST, PA+
               RAMETER IS IGNORED'
.LAID056 ANOP
&J       SETA  0
&DUP#    SETA  4
         AIF   (T'&PARM EQ 'O' OR '&PARM' EQ '').LAID058
&DUP#    SETA  &PARM
.LAID058 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS PUBLIC TRANSIENT DYNAMIC
*        *    DATA AREA, INTERFACE DATA AREA
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID060
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID060 ANOP
         SPACE 1
&P.ACTION   DS    F           ACTION
&P.$APPEND  EQU   5           ..APPEND SOURCE TO RESULT
&P.$CENTER  EQU   6           ..CENTER SOURCE IN RESULT
&P.$COUNT   EQU   7           ..RETURN CHAR AND WORD COUNT
&P.$DEEDIT  EQU   8           ..REMOVE PUNCTUATION FROM SOURCE
&P.$UNK1    EQU   9           ..ADD PUNCTUATION TO SOURCE
&P.$JUSTIFY EQU   10          ..JUSTIFY SOURCE IN RESULT
&P.$LEFT    EQU   11          ..LEFT JUST SOURCE IN RESULT
&P.$LEX     EQU   12          ..TOKENIZE SOURCE GIVING RESULT
&P.$RIGHT   EQU   13          ..RIGHT JUST SOURCE IN RESULT
&P.$SPACE   EQU   14          ..INSERT SPACE BETWEEN WORDS
&P.$STRDEL  EQU   15          ..REMOVE SUBSTRING FROM SOURCE
&P.$STRFPOS EQU   16          ..RETURN POS OF 1ST/NXT POS OF STRING
&P.$STRIP   EQU   17          ..REMOVE L/T/B STRIP CHAR
&P.$STRISRT EQU   18          ..INSERT STRING IN SOURCE
&P.$STRLPOS EQU   19          ..RETURN POS OF LST/PREV POS OF STRING
&P.$STRBPOS EQU   20          ..RETURN POS OF 1ST/NXT POS OF STRING  BM
&P.$STRREPL EQU   21          ..REPLACE STRING IN SOURCE
&P.$SUBSTR  EQU   22          ..RETURN SUBSTR WITHIN STRING
&P.$VAR     EQU   23          ..SCANNER USING TEMPLATES
&P.$VHEX    EQU   24          ..RETURN CHAR/ZONE/NUMBER
&P.$WORDDEL EQU   25          ..REMOVE WORD(S) FROM SOURCE
&P.$NBR2TXT EQU   26          ..NUMBER TO TEXT (WORD,CURR,CHECK)
&P.$WORDPOS EQU   27          ..RETURN NTH WORD POSITION AND TEXT
&P.$HHEX    EQU   28          ..RETURN CHAR/HEXADECIMAL
&P.REQOPTS  DS    XL18,H      REQUEST OPTIONS
&P.REQPSA   DS    XL32        REQUEST PSA
&P.SRCFLD   DS    H,CL256     SOURCE FIELD
         AGO   .LAID064
.LAID062 ANOP
         DS    0F
&P.PATFLD&J DS    XL5,CL256
.LAID064 ANOP
&J       SETA  &J+1
         AIF   (&J LE &DUP#).LAID062
         AIF   ('&EJECT' EQ 'YES').LAID066
         SPACE 2
         AGO   .LAID068
.LAID066 ANOP
         EJECT
.LAID068 ANOP
         AGO   .LAID800
.* **********
.LAID070 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA01').LAID090
         AIF   ('&DSECT' EQ 'YES').LAID072
         AIF   ('&MF' EQ 'D').LAID072
         MNOTE 8,'&MACNME - DSECT IS REQUIRED FOR THIS REQUEST, MACRO E+
               XPANSION IGNORED'
         MEXIT
.LAID072 ANOP
ASU9LA01 DSECT
.LAID074 ANOP
.LAID076 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID078
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID078 ANOP
         SPACE 1
*        DATA GOES HERE
         SPACE 1
         ORG
         AIF   ('&EJECT' EQ 'YES').LAID086
         SPACE 2
         AGO   .LAID088
.LAID086 ANOP
         EJECT
.LAID088 ANOP
         AGO   .LAID800
.* **********
.LAID090 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA02').LAID110
         AIF   ('&DSECT' EQ 'YES').LAID092
         AIF   ('&MF' EQ 'D').LAID092
&LABEL   DS    0F
         AGO   .LAID096
.LAID092 ANOP
ASU9LA02 DSECT
.LAID094 ANOP
.LAID096 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS REQUEST OPTIONS
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID098
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID098 ANOP
         SPACE 1
&P.RO    EQU   *,20,C'X'
&P.RO_DFLT_STRIP_CH DS    CL01     DEFAULT STRIP CHAR
&P.RO_DFLT_DELIM_CH DS    CL01     DEFAULT DELIMITER CHAR
&P.RO_DFLT_PAD_CH   DS    CL01     DEFAULT PAD CHAR
&P.RO_OPT_FLAG      DS    XL01     OPTION FLAG 1
&P.$UCX    EQU   X'80'             ..ON =UPPER CASE TRANSLATION
*                                  ..OFF=NO TRANSLATION
&P.$CASE   EQU   X'40'             ..ON =CASE-INSENSITIVE STRING MATCH
&P.$BOTH   EQU   X'30'             ..ON =STRIP LEADING & TRAILING
&P.$LEAD   EQU   X'20'             ..ON =STRIP LEADING
&P.$TRAIL  EQU   X'10'             ..ON =STRIP TRAILING
&P.$CNTREQ EQU   X'01'             ..ON =PREV REQUEST CONTINUED
*                                  ..OFF=NEW REQUEST
*  OPTION(S) FOR NBR TO WORDS ONLY
&P.$WORD   EQU   X'20'             ..ON =NBR TO WORD
&P.$CURR   EQU   X'10'             ..ON =NBR TO CURRENCY
*          EQU   X'30'             ..OFF=NBR TO CHECK
         DS    XL03                RESERVED
&P.RO_INCOMING_PSTATE DS  XL01     IF $CNTREQ THIS IS INITIAL PSTATE
&P.RO_START    DS    XL02
&P.RO_COUNT    DS    XL02
         DS    XL06
&P.RO_PSA_LEN  DS    H        OPTIONAL PERSISTENT STG AREA LEN
*        OPTIONAL PERSISTENT STG AREA STARTS HERE
&P.PSA   EQU   *,32,C'X'
&P.PSA_LFU_CHR DS    XL01     ..LEAST FREQUENTLY USED CHR (LFUC)
&P.PSA_LFU_OFF DS    XL01     ..LFU CHAR OFFSET
&P.PSA_NXT_POS DS    XL02     ..NEXT SCAN POSITION
&P.PSA_ULGTH   DS    XL04     ..SRCH ARG LGTH
&P.PSA_UADDR   DS    XL04     ..SRCH ARG ADDR
               DS    XL20
         AIF   ('&DSECT' NE 'YES' AND '&MF' NE 'D').LAID100
&P.PSA_BMSKIPV DS    XL256    ..BOYER-MOORE SKIP VECTOR
.LAID100 ANOP
         AIF   ('&EJECT' EQ 'YES').LAID106
         SPACE 2
         AGO   .LAID108
.LAID106 ANOP
         EJECT
.LAID108 ANOP
         AGO   .LAID800
.* **********
.LAID110 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA03').LAID130
         AIF   ('&DSECT' EQ 'YES').LAID112
         AIF   ('&MF' EQ 'D').LAID112
         AGO   .LAID116
.LAID112 ANOP
ASU9LA03 DSECT
.LAID114 ANOP
.LAID116 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS SOURCE FIELD
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID118
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID118 ANOP
         SPACE 1
&P.SRC_LEN DS    XL02         SOURCE STRING LENGTH
&P.SRC_STR EQU   *            SOURCE STRING
         AIF   ('&EJECT' EQ 'YES').LAID126
         SPACE 2
         AGO   .LAID128
.LAID126 ANOP
         EJECT
.LAID128 ANOP
         AGO   .LAID800
.* **********
.LAID130 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA04').LAID150
         AIF   ('&DSECT' EQ 'YES').LAID132
         AIF   ('&MF' EQ 'D').LAID132
         AGO   .LAID136
.LAID132 ANOP
ASU9LA04 DSECT
.LAID134 ANOP
.LAID136 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS TEMPLATE PREFIX (COMMON)
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID138
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID138 ANOP
         SPACE 1
&P.TP_PAT_PFX  EQU   *,1,C'X' TEMPLATE PATTERN PREFIX FIELDS
&P.TP_PAT_TYPE DS    XL01     INPUT PATTERN/RESULT TYPE
&P.$DLIST EQU   X'01'         ..DELIMITER LIST / ALPHABET LIST
&P.$SPAT  EQU   X'02'         ..STRING PATTERN
&P.$NPAT  EQU   X'03'         ..NUMERIC PATTERN
&P.$RSTR  EQU   X'04'         ..LEXEME/RESULT STRING
         AIF   ('&EJECT' EQ 'YES').LAID146
         SPACE 2
         AGO   .LAID148
.LAID146 ANOP
         EJECT
.LAID148 ANOP
         AGO   .LAID800
.* **********
.LAID150 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA05').LAID170
         AIF   ('&DSECT' EQ 'YES').LAID152
         AIF   ('&MF' EQ 'D').LAID152
         MNOTE 8,'&MACNME - DSECT IS REQUIRED FOR THIS REQUEST, MACRO E+
               XPANSION IGNORED'
         MEXIT
.LAID152 ANOP
ASU9LA05 DSECT
.LAID154 ANOP
.LAID156 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS ...
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID158
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID158 ANOP
         SPACE 1
*        DATA GOES HERE
         AIF   ('&EJECT' EQ 'YES').LAID166
         SPACE 2
         AGO   .LAID168
.LAID166 ANOP
         EJECT
.LAID168 ANOP
         AGO   .LAID800
.* **********
.LAID170 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA06').LAID190
         AIF   ('&DSECT' EQ 'YES').LAID172
         AIF   ('&MF' EQ 'D').LAID172
         AGO   .LAID176
.LAID172 ANOP
ASU9LA06 DSECT
.LAID174 ANOP
.LAID176 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS RESULT INFIX TEMPLATE
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID178
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID178 ANOP
         SPACE 1
&P.TP_STR_SIZE DS    XL02     OUTPUT MAXIMUM LEXEME SIZE
         AIF   ('&EJECT' EQ 'YES').LAID186
         SPACE 2
         AGO   .LAID188
.LAID186 ANOP
         EJECT
.LAID188 ANOP
         AGO   .LAID800
.* **********
.LAID190 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA07').LAID210
         AIF   ('&DSECT' EQ 'YES').LAID192
         AIF   ('&MF' EQ 'D').LAID192
         AGO   .LAID196
.LAID192 ANOP
ASU9LA07 DSECT
.LAID194 ANOP
.LAID196 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS TEMPLATE SUFFIX
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID198
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID198 ANOP
         SPACE 1
&P.TP_STR_LEN DS    XL02      TEMPLATE STRING LENGTH
&P.TP_STR EQU   *             TEMPLATE STRING
         AIF   ('&EJECT' EQ 'YES').LAID206
         SPACE 2
         AGO   .LAID208
.LAID206 ANOP
         EJECT
.LAID208 ANOP
         AGO   .LAID800
.* **********
.LAID210 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA08').LAID230
         AIF   ('&DSECT' EQ 'YES').LAID212
         AIF   ('&MF' EQ 'D').LAID212
         AGO   .LAID216
.LAID212 ANOP
ASU9LA08 DSECT
.LAID214 ANOP
.LAID216 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS TOKEN DESCRIPTION
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID218
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID218 ANOP
         SPACE 1
&P.TP_TOK_HDR EQU   *,4,C'X'
&P.TP_TOK_TYPE  DS    CL01    TOKEN TYPE
*   F=FLOATING POINT, R=REAL, S=STRING, W=WORD, Z=INTEGER
&P.TP_TOK_STYPE DS    ZL01    TOKEN SUB-TYPE
&P.TP_TOK_LEN DS    XL02      TOKEN LENGTH
&P.TP_TOK_DATA EQU   *
         AIF   ('&EJECT' EQ 'YES').LAID226
         SPACE 2
         AGO   .LAID228
.LAID226 ANOP
         EJECT
.LAID228 ANOP
         AGO   .LAID800
.* **********
.LAID230 ANOP
         AIF   ('&UDS(&I)' NE 'ASU9LA09').LAID250
         AIF   ('&DSECT' EQ 'YES').LAID232
         AIF   ('&MF' EQ 'D').LAID232
         AGO   .LAID236
.LAID232 ANOP
ASU9LA09 DSECT
.LAID234 ANOP
.LAID236 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS NUMBER DESCRIPTION
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID238
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID238 ANOP
         SPACE 1
&P.TP_TOK_INFO  DS    0XL06   TOKEN
&P.TP_TOK_PREC  DS    0XL04   ..TOKEN PRECISION
&P.TP_TOK_DIGIT DS    XL02    ....TOKEN PRECISION (DIGIT COUNT)
&P.TP_TOK_SCALE DS    XL02    ....TOKEN PRECISION (DECIMAL COUNT)
&P.TP_TOK_EXP   DS    XL02    ..TOKEN EXPONENT (DIGIT COUNT)
&P.TP_TOK_NBR   EQU   *       TOKEN NUMBER
*                             ..INTEGER 31 DIGITS
*                             ..REAL 31 DIGITS
*                             ..FLOATING POINT 35 DIGITS
*                             ..FLOATING POINT EXPONENT 5 DIGITS
         AIF   ('&EJECT' EQ 'YES').LAID246
         SPACE 2
         AGO   .LAID248
.LAID246 ANOP
         EJECT
.LAID248 ANOP
         AGO   .LAID800
.* **********
.LAID250 ANOP   ENTER NEXT ENTRY HERE
         AGO   .LAID680
.* **********
.LAID680 ANOP
         AIF   ('&UDS(&I)' NE 'WORK').LAID700
         AIF   ('&DSECT' EQ 'YES').LAID682
         AIF   ('&MF' EQ 'D').LAID682
         AGO   .LAID684
.LAID682 ANOP
         MNOTE 8,'&MACNME - DSECT IS NOT SUPPORTED FOR THIS REQUEST, MA+
               CRO EXPANSION IGNORED'
         MEXIT
.LAID684 ANOP
.LAID686 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS PARSING WORK AREA
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID688
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID688 ANOP
         SPACE 1
&P.PWA_LOOPCNTL DS    3F      SAVE AREA FOR LOOP CONTROL
&P.PWA_SRCptr DS    F         SAVE AREA FOR INPUT/SOURCE ADDR
&P.PWA_PSTATE DS    F         PROCESSING STATE
&P.PWA_TSTATE DS    F         TERMINATION STATE
&P.PWA_FIELD1len DS    H      LENGTH OF FIELD 1
&P.PWA_FIELD1 DS    CL64      ..FIELD 1
&P.PWA_FIELD2len DS    H      LENGTH OF FIELD 2
&P.PWA_FIELD2 DS    CL64      ..FIELD 2
&P.PWA_FLAG DS    XL1         BIT FLAGS
$SIGN_ON EQU   X'80'          ..NEGATIVE SIGN ACTIVE
$COMMA_ON EQU   X'40'         ..COMMA  ACTIVE
$DECIMAL_ON EQU   X'20'       ..DECIMAL ACTIVE
$SIGDIG_ON EQU   X'10'        ..SIGNIFICANT DIGIT ACTIVE
$PWR_SIGN_ON EQU   X'08'      ..EXPONENT SIGN ACTIVE
$EOD_ON  EQU   X'01'          ..END OF DATA ACTIVE
&P.PWA_COMDS DS    CL1        DECIMAL SEPARATOR
&P.PWA_COMTS DS    CL1        THOUSANDS SEPARATOR
&P.PWA_#OF_DIGIT DS    PL3    TOTAL NUMBER OF DIGITS (PRECISION)
&P.PWA_#OF_SCALE DS    PL3    NBR OF DIGITS TO THE RIGHT OF DECIMAL
&P.PWA_#OF_PWR DS    PL3      NBR OF DIGITS IN PWR
&P.PWA_REOCCUR_CHR_CNT DS    PL3   NBR OF DIGITS BETWEEN COMMAS
&P.PWA_MULT DS    PL1         USED WHEN PROCESSING K,M,G TRAILING CHR
         AIF   ('&EJECT' EQ 'YES').LAID696
         SPACE 2
         AGO   .LAID698
.LAID696 ANOP
         EJECT
.LAID698 ANOP
         AGO   .LAID800
.* **********
.LAID700 ANOP
         AIF   ('&UDS(&I)' NE 'PERSIST').LAID800
         AIF   ('&DSECT' EQ 'YES').LAID702
         AIF   ('&MF' EQ 'D').LAID702
         AGO   .LAID704
.LAID702 ANOP
         MNOTE 8,'&MACNME - DSECT IS NOT SUPPORTED FOR THIS REQUEST, MA+
               CRO EXPANSION IGNORED'
         MEXIT
.LAID704 ANOP
.LAID706 ANOP
*        *------------------------------------------------- *
*        * AS LEXICAL ANALYSIS PERSISTENT DATA AREA
*        *    TR AND TRT TABLES
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').LAID708
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.LAID708 ANOP
         SPACE 1
         DS    0D
&P.VCHTBL DC   256X'00'       LOCATE VALID CHAR
         ORG   &P.VCHTBL+X'4B'
         DC    C'.<(+|&&'     ..CHAR ARE GOOD
         ORG   &P.VCHTBL+X'5A'
         DC    C'!$*);¬-/'    ..CHAR ARE GOOD
         ORG   &P.VCHTBL+X'6B'
         DC    C',%_>?'       ..CHAR ARE GOOD
         ORG   &P.VCHTBL+X'7A'
         DC    C':#@',X'7D',C'="'
         ORG   &P.VCHTBL+X'81'
         DC    C'abcdefghi'   ..CHAR ARE GOOD (LOWER CASE)
         ORG   &P.VCHTBL+X'91'
         DC    C'jklmnopqr'   ..CHAR ARE GOOD (LOWER CASE)
         ORG   &P.VCHTBL+X'A2'
         DC    C'stuvwxyz'    ..CHAR ARE GOOD (LOWER CASE)
         ORG   &P.VCHTBL+X'C1'
         DC    C'ABCDEFGHI'   ..CHAR ARE GOOD
         ORG   &P.VCHTBL+X'D1'
         DC    C'JKLMNOPQR'   ..CHAR ARE GOOD
         ORG   &P.VCHTBL+X'E2'
         DC    C'STUVWXYZ'    ..CHAR ARE GOOD
         ORG   &P.VCHTBL+X'F0'
         DC    C'0123456789'  ..CHAR ARE GOOD
         ORG
         SPACE 1
         DS    0D
&P.XUPTBL DC   256X'40'       TRANSLATE UNPRINTABLE CHAR TO BLANK
         ORG   &P.XUPTBL+X'40'
         DC    C' '           ..SPACE IS GOOD
         ORG   &P.XUPTBL+X'4B'
         DC    C'.<(+|&&'     ..DECIMAL IS GOOD
         ORG   &P.XUPTBL+X'5A'
         DC    C'!$*);¬-/'    ..CHAR ARE GOOD
         ORG   &P.XUPTBL+X'6B'
         DC    C',%_>?'       ..COMMA IS GOOD
         ORG   &P.XUPTBL+X'7A'
         DC    C':#@',X'7D',C'="'
         ORG   &P.XUPTBL+X'81'
         DC    C'abcdefghi'   ..CHAR ARE GOOD
         ORG   &P.XUPTBL+X'91'
         DC    C'jklmnopqr'   ..CHAR ARE GOOD
         ORG   &P.XUPTBL+X'A2'
         DC    C'stuvwxyz'    ..CHAR ARE GOOD
         ORG   &P.XUPTBL+X'C1'
         DC    C'ABCDEFGHI'   ..CHAR ARE GOOD
         ORG   &P.XUPTBL+X'D1'
         DC    C'JKLMNOPQR'   ..CHAR ARE GOOD
         ORG   &P.XUPTBL+X'E2'
         DC    C'STUVWXYZ'    ..CHAR ARE GOOD
         ORG   &P.XUPTBL+X'F0'
         DC    C'0123456789'  ..CHAR ARE GOOD
         ORG
         SPACE 1
         DS    0D
&P.XUCTBL DC   256X'40'       TRANSLATE TO UPPER CASE
*                             AND UNPRINTABLE CHAR TO BLANK
         ORG   &P.XUCTBL+X'40'
         DC    X'40'          ..SPACE IS GOOD
         ORG   &P.XUCTBL+X'4B'
         DC    C'.<(+|&&'     ..CHAR ARE GOOD
         ORG   &P.XUCTBL+X'5A'
         DC    C'!$*);¬-/'    ..CHAR ARE GOOD
         ORG   &P.XUCTBL+X'6B'
         DC    C',%_>?'       ..CHAR ARE GOOD
         ORG   &P.XUCTBL+X'7A'
         DC    C':#@',X'7D',C'="'
         ORG   &P.XUCTBL+X'81'
         DC    C'ABCDEFGHI'   ..CHAR ARE GOOD (LOWER CASE)
         ORG   &P.XUCTBL+X'91'
         DC    C'JKLMNOPQR'   ..CHAR ARE GOOD (LOWER CASE)
         ORG   &P.XUCTBL+X'A2'
         DC    C'STUVWXYZ'    ..CHAR ARE GOOD (LOWER CASE)
         ORG   &P.XUCTBL+X'C1'
         DC    C'ABCDEFGHI'   ..CHAR ARE GOOD
         ORG   &P.XUCTBL+X'D1'
         DC    C'JKLMNOPQR'   ..CHAR ARE GOOD
         ORG   &P.XUCTBL+X'E2'
         DC    C'STUVWXYZ'    ..CHAR ARE GOOD
         ORG   &P.XUCTBL+X'F0'
         DC    C'0123456789'  ..CHAR ARE GOOD
         ORG
         SPACE 1
         DS    0D
&P.FRQTBL DC   256X'01'                 FREQ OF USE FOR POS
         ORG   &P.FRQTBL+C' '
         DC    X'E8'
         ORG   &P.FRQTBL+C'.'           .,<,(,+,|,&
         DC    X'1F1F1F1F1F1F'
         ORG   &P.FRQTBL+C'$'           $,*,),;,¬,-,/
         DC    X'1F1F1F1F1F1F1F'
         ORG   &P.FRQTBL+C','           ,
         DC    X'1F'
         ORG   &P.FRQTBL+C'_'           _,>
         DC    X'1F1F'
         ORG   &P.FRQTBL+C':'           :,#,@,',=,"
         DC    X'1F1F1F1F1F1F'
         ORG   &P.FRQTBL+C'A'           A,B,C,D,E,F,G,H,I
         DC    X'722F3C4B9F36345D66'
         ORG   &P.FRQTBL+C'J'           J,K,L,M,N,O,P,Q,R
         DC    X'22284838636B33215C'
         ORG   &P.FRQTBL+C'S'           S,T,U,V,W,X,Y,Z
         DC    X'5F7B3C2A37213421'
         ORG   &P.FRQTBL+C'0'           0,1,2,3,4
         DC    X'2020202020'
         ORG   &P.FRQTBL+C'5'           5,6,7,8,9
         DC    X'1010101010'
         ORG
         AIF   ('&EJECT' EQ 'YES').LAID716
         SPACE 2
         AGO   .LAID718
.LAID716 ANOP
         EJECT
.LAID718 ANOP
         AGO   .LAID800
.* **********
.LAID800 ANOP
&I       SETA  &I+1
         AIF   (N'&UDS GE &I).LAID030
.LAID900 ANOP
         MEND
./ ADD NAME=AS1MASDS 0136-17363-19302-0850-00373-00357-00000-APLKS   32
         MACRO
&LABEL   AS1MASDS &ADS=,                                               +
               &DSECT=NO,                                              +
               &EJECT=NO,                                              +
               &LIST=YES,                                              +
               &HIST=NO,                                               +
               &PREFIX=,                                               +
               &MF=
.* -------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ARCHITECTURE DATA STRUCTURES
.* ASSEMBLER MACRO, DATA
.*
.* MACRO ID: AS1MASDS
.*    TITLE: MAP AS DATA STRUCTURES
.*     DATE: 03/01/2005
.*
.*     DESC: THIS MACRO IS USED TO MAP AS DATA STRUCTURES
.*
.*  OPTIONS:
.*                        <-,------+
.*     >>-AS1MASDS-+-----(+--------+)--------------------->
.*                 +-ADS=-+--------+
.*                        +-ASAB---+
.*                        +-ASAB1--+
.*                        +-ASAB2--+
.*                        +-ASCA---+
.*                        +-ASRB---+
.*
.*      >-+---------------+--+---------------+------------>
.*        +-,DSECT=-+-NO--+  +-,EJECT=-+-NO--+
.*                  +-YES-+            +-YES-+
.*        +-,MF=-+--------+
.*               +-D------+
.*
.*      >-+--------------+--+--------------+-------------->
.*        +-,LIST=-+-YES-+  +-,HIST=-+-NO--+
.*                 +-NO--+           +-YES-+
.*
.*      >-+----------------------+-------<<
.*        +-,PREFIX=-+-----------+
.*                   +-XXXXXXXXX-+
.*
.* -------------------------------------------------------- *
.* MAINTENANCE HISTORY:
.*
.* YYYY/MM/DD
.* -------------------------------------------------------- *
         LCLA  &I
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &P
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS1MASDS'
&MACVER  SETC  '0001'
&MACREL  SETC  '.001'
&MACDATE SETC  '2019-10-16'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&I       SETA  1
         AIF   (T'&ADS NE 'O').MADS002
         MNOTE 8,'&MACNME - ADS PARAMETER IS MISSING, MACRO EXPANSION I+
               GNORED'
         MEXIT
.MADS002 ANOP
         AIF   ('&DSECT' EQ 'YES' OR '&DSECT' EQ 'NO').MADS010
         AIF   ('&MF' EQ 'D').MADS010
         MNOTE 4,'&MACNME - DSECT OR MF PARAMETER IS MISSING, WILL DEFA+
               ULT'
.MADS010 ANOP
         AIF   ('&EJECT' EQ 'YES' OR '&EJECT' EQ 'NO').MADS012
         MNOTE 8,'&MACNME - EJECT PARAMETER MUST BE "YES" OR "NO", MACR+
               O EXPANSION IGNORED'
         MEXIT
.MADS012 ANOP
         AIF   ('&LIST' EQ 'YES' OR '&LIST' EQ 'NO').MADS014
         MNOTE 8,'&MACNME - LIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.MADS014 ANOP
         AIF   ('&HIST' EQ 'YES' OR '&HIST' EQ 'NO').MADS016
         MNOTE 8,'&MACNME - HIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.MADS016 ANOP
.MADS018 ANOP
.* **********
.MADS020 ANOP
         AIF   ('&LIST' EQ 'YES').MADS022
         PRINT OFF
         AGO   .MADS024
.MADS022 ANOP
         PRINT ON
.MADS024 ANOP
         AIF   ('&DSECT' EQ 'YES').MADS026
         AIF   ('&MF' EQ 'D').MADS026
&LABEL   DS    0D
         AGO   .MADS028
.MADS026 ANOP
&LABEL   DSECT
.MADS028 ANOP
.* **********
.MADS030 ANOP
         AIF   (T'&PREFIX EQ 'O').MADS032
&P       SETC  '&PREFIX'
         AGO   .MADS034
.MADS032 ANOP
&P       SETC  ''
.MADS034 ANOP
.* **********
.MADS050 ANOP
         AIF   ('&ADS(&I)' NE 'ASAB').MADS060
         AIF   ('&P' NE '').MADS052
&P       SETC  'ASAB_'
.MADS052 ANOP
*        * ------------------------------------------------ *
*        * ARCHITECTURE SERVICES
*        * ANCHOR BLOCK
*        * ------------------------------------------------ *
         AIF   ('&HIST' EQ 'NO').MADS054
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        * ------------------------------------------------ *
.MADS054 ANOP
         SPACE 1
&P.BEG   EQU   *
&P.DSLEN DC    Y(&P.END-*)    DATA STRUCTURE LENGTH
&P.DSID  DC    Y(2561)        DATA STRUCTURE ID
$ASAB    EQU   X'0A01'
         DS    F
&P.EYE   DC    CL08'**ASAB**' **ASAB** LITERAL EYE CATCHER
         DS    XL32           STATUS FLAGS
         SPACE 1
&P.@ASABX DS   A              ADDR OF AS ANCHOR BLOCK EXTENSION
&P.@ASCA DS    A              ADDR OF AS COMMUNICATION AREA
&P.@ASRB DS    A              ADDR OF AS REQUEST BLOCK
         DS    9A
         SPACE 1
         DS    0D
&P.END   EQU   *
&P.#LEN  EQU   *-&P.BEG
         AIF   ('&EJECT' EQ 'YES').MADS056
         SPACE 2
         AGO   .MADS058
.MADS056 ANOP
         EJECT
.MADS058 ANOP
         AGO   .MADS800
.* **********
.MADS060 ANOP
         AIF   ('&ADS(&I)' NE 'ASAB1').MADS070
         AIF   ('&P' NE '').MADS062
&P       SETC  'ASAB1_'
.MADS062 ANOP
*        * ------------------------------------------------ *
*        * ARCHITECTURE SERVICES
*        * ANCHOR BLOCK (BATCH) EXTENSION
*        * ------------------------------------------------ *
         AIF   ('&HIST' EQ 'NO').MADS064
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        * ------------------------------------------------ *
.MADS064 ANOP
         SPACE 1
&P.BEG   EQU   *
&P.DSLEN DC    Y(&P.END-*)    DATA STRUCTURE LENGTH
         DS    H              RESERVED
&P.#USRH DS    F              ID OF HEAP 0
&P.#BTLH DS    F              ID OF BELOW-THE-LINE HEAP 1
&P.#ATLH DS    F              ID OF ABOVE-THE-LINE HEAP 2
         DS    8F
         SPACE 1    ADDR(S) OF ALL AS LIST HEADER(S)
&P.PPDLST DS    A             ADDR OF PGM PROPERTIES DEFINITION LIST
&P.DSDLST DS    A             ADDR OF DATA SET DEFINITION LIST
&P.DGDLST DS    A             ADDR OF DATA GROUP DEFINITION LIST
          DS    5A
         SPACE 1    ADDR(S) OF AS SERVICE MODULES
&P.@METXT DS    A             ADDR OF ASUMETXT PGM
&P.@#PM1B DS    A             ADDR OF ASU?PM1B PGM
         DS    14A
         SPACE 1
         DS    0D
&P.END   EQU   *
&P.#LEN  EQU   *-&P.BEG
         AIF   ('&EJECT' EQ 'YES').MADS066
         SPACE 2
         AGO   .MADS068
.MADS066 ANOP
         EJECT
.MADS068 ANOP
         AGO   .MADS800
.* **********
.MADS070 ANOP
         AIF   ('&ADS(&I)' NE 'ASAB2').MADS080
         AIF   ('&P' NE '').MADS072
&P       SETC  'ASAB2_'
.MADS072 ANOP
*        * ------------------------------------------------ *
*        * ARCHITECTURE SERVICES
*        * ANCHOR BLOCK (ONLINE) EXTENSION
*        * ------------------------------------------------ *
         AIF   ('&HIST' EQ 'NO').MADS074
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        * ------------------------------------------------ *
.MADS074 ANOP
         SPACE 1
&P.BEG   EQU   *
&P.DSLEN DC    Y(&P.END-*)
         SPACE 1
         DS    0D
&P.END   EQU   *
&P.#LEN  EQU   *-&P.BEG
         AIF   ('&EJECT' EQ 'YES').MADS076
         SPACE 2
         AGO   .MADS078
.MADS076 ANOP
         EJECT
.MADS078 ANOP
         AGO   .MADS800
.* **********
.MADS080 ANOP
         AIF   ('&ADS(&I)' NE 'ASCA').MADS090
         AIF   ('&P' NE '').MADS082
&P       SETC  'ASCA_'
.MADS082 ANOP
*        * ------------------------------------------------ *
*        * ARCHITECTURE SERVICES
*        * COMMUNICATION AREA
*        * ------------------------------------------------ *
         AIF   ('&HIST' EQ 'NO').MADS084
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        * ------------------------------------------------ *
.MADS084 ANOP
         SPACE 1
&P.BEG   EQU   *
&P.DSLEN DC    Y(&P.END-*)    DATA STRUCTURE LENGTH
*                             ..MINIMUM LENGTH (9*4)=36
&P.DSID  DC    Y(2562)        DATA STRUCTURE ID
$ASCA    EQU   X'0A02'
&P.EYE   DC    CL08'**ASCA**' **ASCA** LITERAL EYE CATCHER
         SPACE 1
*   APPLICATION LE CONDITION TOKEN(S)
&P.CUR_CTOKN DS    XL12       CURRENT LE CONDITION TOKEN
&P.MAX_CTOKN DS    XL12       MAXIMUM LE CONDITION TOKEN
         SPACE 1
*   PLATFORM DEFAULTS
&P.CUR_DOWNBR DS    F         DAY OF WEEK NUMBER
&P.GMT_LSEC   DS    D         GMT LILIAN SECONDS
&P.CUR_LSEC   DS    D         # SEC SINCE OCT 14, 1582
&P.GMT_LDAYS  DS    F         GMT LILIAN DAYS
&P.CUR_LDAYS  DS    F         LILIAN DAYS (# DAYS SINCE OCT 14,1582)
&P.CUR_DTTM   DS    CL17      GREGORIAN YYYYMMDDHHMISS999
         DS    XL13           FILLER
&P.NLANG DS    CL03           LE NATIONAL LANGUAGE
&P.CNTRY DS    CL02           LE COUNTRY CODE
&P.COMDS DS    CL02           LE COUNTRY MONETARY DECIMAL SEPARATOR
&P.COMTS DS    CL02           LE COUNTRY MONETARY THOUSANDS SEPARATOR
&P.COMCS DS    CL04           LE COUNTRY MONETARY SYMBOL
&P.INMCS DS    CL03           LE INTL MONETARY SYMBOL
&P.TSTMP DS    0CL82          LE TIME STAMP PATTERN
&P.TSLEN DS    H              ..LENGTH OF STRING
&P.TSPAT DS    CL80           ..TIME STAMP PATTERN
         SPACE 1
*   POINTERS TO CONTROL BLOCKS
&P.@ASAB DS    A              ADDR OF AS ANCHOR BLOCK
         DS    15A
         SPACE 1
*   MISC. INFORMATION
&P.ISCRPT DS    CL16          INITIAL SCRIPT
&P.IPGM  DS    CL8            INITIAL PROGRAM
         DS    0D
&P.END   EQU   *
&P.#LEN  EQU   *-&P.BEG
         AIF   ('&EJECT' EQ 'YES').MADS086
         SPACE 2
         AGO   .MADS088
.MADS086 ANOP
         EJECT
.MADS088 ANOP
         AGO   .MADS800
.* **********
.MADS090 ANOP
         AIF   ('&ADS(&I)' NE 'ASRB').MADS100
         AIF   ('&P' NE '').MADS092
&P       SETC  'ASRB_'
.MADS092 ANOP
*        * ------------------------------------------------ *
*        * ARCHITECTURE SERVICES
*        * REQUEST BLOCK
*        * ------------------------------------------------ *
         AIF   ('&HIST' EQ 'NO').MADS094
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.MADS094 ANOP
         SPACE 1
&P.BEG   EQU   *
&P.DSLEN DC    Y(&P.END-*)    DATA STRUCTURE LENGTH
&P.DSID  DC    Y(2563)        DATA STRUCTURE ID
$ASRB    EQU   X'0A03'
&P.EYE   DC    CL08'**ASRB**' **ASRB** LITERAL EYE CATCHER
&P.BWDPTR DS    A             ADDR PTR TO PREV ASRB
         DS    A              RESERVED FOR ADDR PTR TO NEXT ASRB
&P.VERB  DS    CL16           API VERB
&P.SVCMOD DS    CL8           REQUESTED SERVICE MODULE
&P.SVCACT DS    F             REQUESTED SERVICE MODULE ACTION CODE
         SPACE 1
&P.BLOB  DS    XL32           REDEFINED BY EACH VERB
         ORG   &P.BLOB
*                             ..PROGRAM ADDR REQUEST
&P.PGMNME DS    CL8           ....PROGRAM NAME
&P.PGM@EP DS    A             ....PROGRAM EP ADDR
         ORG
         SPACE 1
         DS    0D
&P.END   EQU   *
&P.#LEN  EQU   *-&P.BEG
         AIF   ('&EJECT' EQ 'YES').MADS096
         SPACE 2
         AGO   .MADS098
.MADS096 ANOP
         EJECT
.MADS098 ANOP
         AGO   .MADS800
.* **********
.MADS100 ANOP
         AIF   ('&ADS(&I)' NE 'XXXXXX').MADS110
         AIF   ('&P' NE '').MADS102
&P       SETC  'XXXX_'
.MADS102 ANOP
*        *------------------------------------------------- *
*        * ARCHITECTURE SERVICES
*        * XXXXXXXX
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').MADS104
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.MADS104 ANOP
         AIF   ('&EJECT' EQ 'YES').MADS106
         SPACE 2
         AGO   .MADS108
.MADS106 ANOP
         EJECT
.MADS108 ANOP
         AGO   .MADS800
.* **********
.MADS110 ANOP
.* **********
.MADS800 ANOP
&I       SETA  &I+1
         AIF   (N'&ADS GE &I).MADS030
.MADS900 ANOP
         MEND
./ ADD NAME=AS1MDSDS 0196-17108-19028-0937-00678-00685-00000-APLKS   37
         MACRO
&LABEL   AS1MDSDS &FDS=,                                               +
               &DSECT=NO,                                              +
               &EJECT=NO,                                              +
               &LIST=YES,                                              +
               &HIST=NO,                                               +
               &PARM=,                                                 +
               &PREFIX=,                                               +
               &MF=
.* -------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* DATA SET SERVICES
.* ASSEMBLER MACRO, DATA
.*
.* MACRO ID: AS1MDSDS
.*    TITLE: MAP DS DATA STRUCTURES
.*     DATE: 2016/07/21
.*
.*     DESC: THIS MACRO IS USED TO MAP DS DATA STRUCTURES
.*
.*  OPTIONS:
.*                        <-,------+
.*     >>-AS1MDSDS-+-----(+--------+)--------------------->
.*                 +-FDS=-+--------+
.*                        +-DSD----+
.*                        +-DSINFO-+
.*
.*      >-+---------------+--+---------------+------------>
.*        +-,DSECT=-+-NO--+  +-,EJECT=-+-NO--+
.*                  +-YES-+            +-YES-+
.*        +-,MF=-+--------+
.*               +-D------+
.*
.*      >-+--------------+--+--------------+-------------->
.*        +-,LIST=-+-YES-+  +-,HIST=-+-NO--+
.*                 +-NO--+           +-YES-+
.*
.*      >-+-------------+--+----------+-----------+------<<
.*        +-,PARM=-+----+  +-,PREFIX=-+-----------+
.*                 +-99-+             +-XXXXXXXXX-+
.*
.* -------------------------------------------------------- *
.* MAINTENANCE HISTORY:
.*
.* YYYY/MM/DD
.* -------------------------------------------------------- *
         LCLA  &I,&DUP#
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &P
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS1MDSDS'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2016-07-21'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&I       SETA  1
         AIF   (T'&FDS NE 'O').MFDS002
         MNOTE 8,'&MACNME - FSD PARAMETER IS MISSING, MACRO EXPANSION I+
               GNORED'
         MEXIT
.MFDS002 ANOP
         AIF   ('&DSECT' EQ 'YES' OR '&DSECT' EQ 'NO').MFDS010
         AIF   ('&MF' EQ 'D').MFDS010
         MNOTE 4,'&MACNME - DSECT OR MF PARAMETER IS MISSING, WILL DEFA+
               ULT'
.MFDS010 ANOP
         AIF   ('&EJECT' EQ 'YES' OR '&EJECT' EQ 'NO').MFDS012
         MNOTE 8,'&MACNME - EJECT PARAMETER MUST BE "YES" OR "NO", MACR+
               O EXPANSION IGNORED'
         MEXIT
.MFDS012 ANOP
         AIF   ('&LIST' EQ 'YES' OR '&LIST' EQ 'NO').MFDS014
         MNOTE 8,'&MACNME - LIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.MFDS014 ANOP
         AIF   ('&HIST' EQ 'YES' OR '&HIST' EQ 'NO').MFDS015
         MNOTE 8,'&MACNME - HIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.MFDS015 ANOP
&DUP#    SETA  3
         AIF   (T'&PARM EQ 'O' OR '&PARM' EQ '').MFDS016
&DUP#    SETA  &PARM
.MFDS016 ANOP
.MFDS018 ANOP
.* **********
.MFDS020 ANOP
         AIF   ('&LIST' EQ 'YES').MFDS022
         PRINT OFF
         AGO   .MFDS024
.MFDS022 ANOP
         PRINT ON
.MFDS024 ANOP
         AIF   ('&DSECT' EQ 'YES').MFDS026
         AIF   ('&MF' EQ 'D').MFDS026
&LABEL   DS    0D
         AGO   .MFDS028
.MFDS026 ANOP
&LABEL   DSECT
.MFDS028 ANOP
.* **********
.MFDS030 ANOP
         AIF   (T'&PREFIX EQ 'O').MFDS032
&P       SETC  '&PREFIX'
         AGO   .MFDS034
.MFDS032 ANOP
&P       SETC  ''
.MFDS034 ANOP
.* **********
.MFDS060 ANOP
         AIF   ('&FDS(&I)' NE 'DSD').MFDS070
         AIF   ('&P' NE '').MFDS062
&P       SETC  'DSD_'
.MFDS062 ANOP
*        * ------------------------------------------------ *
*        * ARCHITECTURE SERVICES
*        * DATA SET SERVICES
*        * DATA SET DEFINITION (DSD)
*        * ------------------------------------------------ *
         AIF   ('&HIST' EQ 'NO').MFDS064
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        * ------------------------------------------------ *
.MFDS064 ANOP
         SPACE 1
&P.BEG   EQU   *
&P.DSLEN DC    Y(&P.END-*)    DATA STRUCTURE LENGTH LEN=144
&P.DSID  DC    Y(3842)        DATA STRUCTURE ID
&P.$DSD  EQU   X'0F02'
         SPACE 1
&P.FWDPTR DC    A(0)          DSD LIST FWD PTR
&P.COMMON EQU   *,104,C'X'    ..COMMON INFORMATION
&P.DDNAME DS    CL08          ....FILE NAME OR DD NAME
&P.@WJFCB DS    A             ....WORK/USER JFCB ADDR
&P.@DBUFF DS    A             ....DATA BUFFER ADDR
&P.@WBUFF DS    A             ....WORK BUFFER ADDR
&P.@CBXL  DS    A             ....ACB/DCB EXIT LIST ADDR
&P.CBXLEN DS    F             ....ACB/DCB EXIT LIST LENGTH
&P.MAXLEN DS    F             ....MAXIMUM RECORD LENGTH
&P.CURLEN DS    F             ....CURRENT RECORD LENGTH
&P.AM    DS    XL01           ....FILE ACCESS METHOD
*        EQU   X'40'          ......DSORG=PS
*        EQU   X'20'          ......DSORG=DA
*        EQU   X'10'          ......DSORG=PO
*        EQU   X'08'          ......VSAM
*        EQU   X'02'          ......DATA-IN-VIRTURAL
*        EQU   X'01'          ......VIRTUAL RECORD
         DS    XL01           ....DATA BASE
&P.ORG   DS    XL01           ....FILE ORGANIZATION (TYPE)
*        EQU   X'C0'          ......VRRDS
*        EQU   X'80'          ......KSDS
*        EQU   X'40'          ......RRDS
*        EQU   X'20'          ......ESDS
*        EQU   X'10'          ......LDS
*        EQU   X'08'          ......KEY
*        EQU   X'04'          ......DIRECT
*        EQU   X'02'          ......SEQUENTIAL
*        EQU   X'01'          ......LIBRARY
&P.RS    DS    XL01           ....RECORD STRUCTURE (ORG)
&P.$FLAT   EQU   X'80'        ......FLAT(ON)
*                             ......PROPRIETARY HIERARCHICAL(ON)
*                             ......PROPRIETARY CHAINED (ON)
&P.$FAUDIT EQU   X'01'        ......AUDIT INFO IMBEDDED (ON)
&P.RECFM DS    XL01           ....RECORD FORMAT
*        EQU   X'C0'          ......RECFM=U    UNDEFINED
*        EQU   X'80'          ......RECFM=F    FIXED
*        EQU   X'40'          ......RECFM=V    VARIABLE
*        EQU   X'20'          ......RECFM=.B   BLOCKED
*        EQU   X'10'          ......RECFM=.SS  SPANNED
*        EQU   X'08'          ......RECFM=...A ASA CTL CHR
*        EQU   X'04'          ......RECFM=...M MACHINE CTL CHR
*        EQU   X'01'          ......3800 CTL CHR
&P.IND0  DS    XL01           ....ACCESS INTENT
&P.$FOPEN   EQU   X'80'       ......OPEN(ON) CLOSE(OFF)
&P.$FREAD   EQU   X'40'       ......READ ONLY INTENT
&P.$FUPDT   EQU   X'20'       ......UPDATE INTENT
&P.$FLOAD   EQU   X'10'       ......LOAD INTENT
&P.$FSKPSEQ EQU   X'0C'       ......SKIP SEQ ACCESS
&P.$FDIR    EQU   X'08'       ......DIRECT ACCESS (KEY)
&P.$FSEQ    EQU   X'04'       ......SEQUENTIAL ACCESS
&P.$FSPM    EQU   X'02'       ......SEQ PAIRED MASTER
&P.IND1  DS    XL01           ....MORE INFORMATION
*        EQU   X'80'          ......PS GDG MBR
*        EQU   X'40'          ......PO PDS MBR
*        EQU   X'20'          ......VSAM BLSR
*        EQU   X'10'          ......VIO
*        EQU   X'08'          ......SYSIN/SYSOUT/SUBSYS=
&P.IND2  DS    XL01           ....MORE INFORMATION
&P.$FEOF   EQU   X'80'        ......END-OF-FILE
&P.$FDUMMY EQU   X'40'        ......FILE ALLOC TO NULLFILE
&P.$FRCVR  EQU   X'20'        ......RECOVERABLE
         DS    XL16
&P.@DEB  DS    A              ....DATA EXTENT BLOCK (DEB)
&P.@UCB  DS    A              ....UNIT CONTROL BLOCK (UCB)
&P.@DSAB DS    A              ....DATA SET ASSOCIATION BLOCK (DSAB)
&P.@TIOTE  DS    A            ....1ST MATCHING
*                                 TASK INPUT/OUTPUT TABLE ENTRY
&P.@SJFCB  DS    A            ....SYSTEM JFCB
&P.@SJFCBX DS    A            ....SYSTEM JFCBX (VOLS)
&P.@SJFCBE DS    A            ....SYSTEM JFCBE (3800 PRT)
         DS    2F
         DS    0D
&P.CEND  EQU   *
         SPACE 1
&P.VSAM  EQU   *,40,C'X'      ..VSAM INFORMATION
&P.@VACB  DS    A             ....ACB ADDR
&P.ACBLEN DS    F             ....ACB LENGTH
&P.@VRPL1 DS    A             ....PRIMARY RPL ADDR
&P.RPL1LEN DS    F            ....PRIMARY RPL LENGTH
&P.@VRPL2 DS    A             ....ALTERNATE RPL ADDR
&P.RPL2LEN DS    F            ....ALTERNATE RPL LENGTH
&P.VFDBK DS    F              ....FEED BACK AREA
&P.BUFND DS    H              ....DATA BUFFER COUNT
&P.BUFNI DS    H              ....INDEX BUFFER COUNT
&P.XRBA  DS    D              ....EXTENDED RBA
         ORG   &P.XRBA+4
&P.RBA   DS    F              ....RBA
&P.VEND  EQU   *
         SPACE 1
         ORG   &P.VSAM
&P.QSAM  EQU   *,22,C'X'      ..QSAM INFORMATION
&P.@DCB    DS    A            ....DCB ADDR
&P.DCBLEN  DS    F            ....DCB LENGTH
&P.@DCBE   DS    A            ....DCB EXTENDED ADDR
&P.DCBELEN DS    F            ....DCBE LENGTH
&P.BLKSZ DS    F              ....BLOCK SIZE
&P.BUFNO DS    H              ....BUFFER COUNT
&P.QEND  EQU   *
         ORG
&P.END   EQU   *
&P.#LEN  EQU   (*-&P.BEG)
         AIF   ('&EJECT' EQ 'YES').MFDS066
         SPACE 2
         AGO   .MFDS068
.MFDS066 ANOP
         EJECT
.MFDS068 ANOP
         AGO   .MFDS800
.* **********
.MFDS070 ANOP
         AIF   ('&FDS(&I)' NE 'DSINFO').MFDS080
         AIF   ('&P' NE '').MFDS072
&P       SETC  'DSI_'
.MFDS072 ANOP
*        * ------------------------------------------------ *
*        * ARCHITECTURE SERVICES
*        * DATA SET SERVICES
*        * DATA SET INFORMATION, OUTPUT OF ASU3QFAB
*        *
*        * DSLEN 32568 = 16+(552*59) 59 DSN(S) FOR A DDN
*        *        8296 = 16+(552*15) 15 DSN(S) FOR A DDN
*        *        7744 = 16+(552*14) 14 DSN(S) FOR A DDN
*        *        7192 = 16+(552*13) 13 DSN(S) FOR A DDN
*        *        6640 = 16+(552*12) 12 DSN(S) FOR A DDN
*        *        6088 = 16+(552*11) 11 DSN(S) FOR A DDN
*        *        5536 = 16+(552*10) 10 DSN(S) FOR A DDN
*        *        4984 = 16+(552*09)  9 DSN(S) FOR A DDN
*        *        4432 = 16+(552*08)  8 DSN(S) FOR A DDN
*        *        3880 = 16+(552*07)  7 DSN(S) FOR A DDN
*        *        3328 = 16+(552*06)  6 DSN(S) FOR A DDN
*        *        2776 = 16+(552*05)  5 DSN(S) FOR A DDN
*        *        2224 = 16+(552*04)  4 DSN(S) FOR A DDN
*        *        1672 = 16+(552*03)  3 DSN(S) FOR A DDN
*        *        1120 = 16+(552*02)  2 DSN(S) FOR A DDN
*        *         568 = 16+(552*01)  1 DSN(S) FOR A DDN
*        * ------------------------------------------------ *
         AIF   ('&HIST' EQ 'NO').MFDS074
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        * ------------------------------------------------ *
.MFDS074 ANOP
         SPACE 1
&P.BEG   EQU   *
&P.DSLEN DC    Y(&P.NTRY_LEN*&DUP#+16) DATA STRUCTURE LEN (MIN=568)
&P.DSID  DC    Y(3105)        DATA STRUCTURE ID
&P.$DSI  EQU   X'0C21'
         SPACE 1
&P.DDN   DS    CL08           DDNAME
         DS    XL04
&P.#HDRLEN EQU *-&P.BEG
         SPACE 1
&P.VECTOR DS    &DUP#.XL552
         ORG   &P.VECTOR
&P.NTRY_BEG EQU   *
&P.FWDPTR DC    A(0)          FWD POINTER
*                             ACB/DCB/ICF INFORMATION
*                             DSAB INFORMATION
*                             JFCB INFORMATION
*                             DEVICE/UCB INFORMATION
*                             VTOC INFORMATION
&P.DCB_DCLASS DS    CL08      ..DEVICE CLASS
&P.DCB_DTYPE DS    XL04       ..DEVICE TYPE
&P.DCB_AM DS    XL01          ..DCB/ACB ACCESS METHOD
*        EQU   X'40'          ....DSORG=PS
**                            ......SEQUENTIAL (BSAM,QSAM)
*        EQU   X'20'          ....DSORG=DA
**                            ......DIRECT (BDAM)
*        EQU   X'10'          ....DSORG=PO
**                            ......PARTITIONED (BPAM)
*        EQU   X'08'          ....VSAM
**                            ......VIRTUAL STORAGE (VSAM)
*        EQU   X'02'          ....DATA-IN-VIRTUAL
*        EQU   X'01'          ....VIRTUAL
         DS    XL01           ..DATA BASE
&P.ICF_ORG DS    XL01         ..FILE ORGANIZATION
*        EQU   X'C0'          ....VRRDS VARLEN RELATIVE RECORD
*        EQU   X'80'          ....KSDS  KEYED SEQUENCE
*        EQU   X'40'          ....RRDS  RELATIVE RECORD
*        EQU   X'20'          ....ESDS  ENTRY SEQUENCED
*        EQU   X'10'          ....LDS   LOGICAL (4K CHUNKS)
*        EQU   X'08'          ....KEY
*        EQU   X'04'          ....DIR
*        EQU   X'02'          ....SEQ   SEQUENTIAL/FLAT
*        EQU   X'01'          ....LIB   PDS/PDSE/HFS
&P.DCB_RECFM DS    XL01       ..DCB/ACB/ICF RECORD FORMAT
*        EQU   X'C0'          ....RECFM=U   UNDEFINED
*        EQU   X'80'          ....RECFM=F   FIXED
*        EQU   X'40'          ....RECFM=V   VARIABLE
*        EQU   X'20'          ....RECFM=.B  BLOCKED
*        EQU   X'10'          ....RECFM=.SS SPANNED
*        EQU   X'08'          ....RECFM=..A ASA PRINT CTL CHAR
*        EQU   X'04'          ....RECFM=..M MACHINE PRINT CTL CHAR
*        EQU   X'01'          ....3800 CTL CHAR
&P.DCB_IND0 DS    XL01        ..INDICATOR 0
*        EQU   X'80'          ....OPEN
*        EQU   X'40'          ....DUMMY DD
*        EQU   X'20'          ....SYSIN/SYSOUT/SUBSYS=
*        EQU   X'08'          ....PHYSICAL I/O ERROR
&P.ICF_IND3 DS    XL01        ..INDICATOR 3
*        EQU   X'80'          ....SMS/EF EXTENDED FORMAT
*                                 append an additional 32-bytes
*                                 of control information
*        EQU   X'40'          ....SMS/EF COMPRESSABLE
*        EQU   X'20'          ....SMS/EF EXTENDED ADDRESS > 4GB
&P.ICF_IND4 DS    XL01        ..INDICATOR 4
*        EQU   X'80'          ....RLS BWO(TYPECICS)
*        EQU   X'40'          ....RLS BWO(TYPEIMS)
*        EQU   X'20'          ....RLS RECOVERY REQUIRED
*        EQU   X'08'          ....RLS LOG ALL  (FWD RECOVERY)
*        EQU   X'04'          ....RLS LOG UNDO (DTB)
*        EQU   X'02'          ....RLS LOG NONE
&P.ICF_IND7 DS    XL01        ..INDICATOR 7
*        EQU   X'40'          ....CATALOGED IN ICF
&P.DCB_INDA DS    XL01        ..INDICATOR 10
*        EQU   X'80'          ....3400 SERIES TAPE DRIVE (REEL)
*        EQU   X'40'          ....1600 BPI
*        EQU   X'20'          ....6250 BPI
&P.DCB_INDB DS    XL01        ..INDICATOR 11
*        EQU   X'80'          ....3423 TAPE DRIVE (CART)
*        EQU   X'40'          ....3480 TAPE DRIVE (CART)
*        EQU   X'20'          ....3490 TAPE DRIVE (CART)
*        EQU   X'10'          ....3590 TAPE DRIVE (CART)
*
*        EQU   X'80'          ....2305-2 DASD
*        EQU   X'40'          ....3330 DASD
*        EQU   X'20'          ....3340 DASD
*        EQU   X'10'          ....3350 DASD
*        EQU   X'08'          ....3375 DASD
*        EQU   X'04'          ....3330-11 DASD
*        EQU   X'02'          ....3380 DASD
*        EQU   X'01'          ....3390 DASD
*
*        EQU   X'80'          ....3211 PRINTER IMPACT
*        EQU   X'10'          ....3800 PRINTER LASER
*        EQU   X'04'          ....OPTICAL/MAGINK CHAR RDR
&P.ICF_SHR    DS    XL01      ..ICF VSAM SHARE OPTIONS
*        EQU   X'80'          ....ON SHR(4 n)
*        EQU   X'40'          ....ON SHR(3 n)
*        EQU   X'20'          ....ON SHR(2 n)
*        EQU   X'10'          ....ON SHR(1 n)
*        EQU   X'08'          ....ON SHR(n 4)
*        EQU   X'04'          ....ON SHR(n 3)
*        EQU   X'02'          ....ON SHR(n 2)
*        EQU   X'01'          ....ON SHR(n 1)
         DS    XL05           ..RESERVED
&P.DCB_LRECL  DS    F         ..DCB/ACB/ICF MAX LRECL
&P.ICF_ALRECL DS    F         ..ICF AVG LRECL
&P.DCB_BLKSZ  DS    F         ..DCB=BLKSIZE
&P.ACB_DCISZ  DS    F         ..ACB/ICF DATA CI SIZE
&P.ACB_ICISZ  DS    F         ..ACB/ICF INDEX CI SIZE
&P.ACB_BUFSP  DS    F         ..ACB/ICF BUFFER SPACE
&P.DCB_BUFND  DS    H         ..DCB=BUFNO, ACB=BUFND
&P.ACB_BUFNI  DS    H         ..ACB NBR OF INDEX BUFFERS
&P.ACB_KEYOFF DS    H         ..ACB/ICF INDEX KEY OFFSET
&P.ACB_KEYLEN DS    H         ..ACB/ICF INDEX KEY LENGTH
&P.ICF_DCAFS  DS    H         ..ICF DATA CA FREE SPACE
&P.ICF_DCIFS  DS    H         ..ICF DATA CI FREE SPACE
&P.ICF_DCICA  DS    H         ..ICF DATA CI PER CA
&P.ICF_ICICA  DS    H         ..ICF INDEX CI PER CA
&P.ACB_DLSR   DS    H         ..ACB DATA SHARE POOL ID
&P.ACB_ILSR   DS    H         ..ACB INDEX SHARE POOL ID
&P.ACB_ENDRBA DS    XL08      ..ACB DATA END RBA
&P.ACB_HARBA  DS    XL08      ..ACB/ICF DATA HIGH ALLOCATED RBA
&P.ICF_HURBA  DS    XL08      ..ICF DATA HIGH USED RBA
&P.ICF_LOGID  DS    CL26      ..RLS LOG STREAM ID
         SPACE 1
         DS    0D             DSAB INFORMATION
&P.DSAB_AM DS    XL01         ..ACCESS METHOD
*        EQU   X'40'          ....DSORG=PS
*        EQU   X'20'          ....DSORG=DA
*        EQU   X'10'          ....DSORG=PO
*        EQU   X'08'          ....VSAM
&P.DSAB_IND0 DS    XL01       ..INDICATOR 0
*        EQU   X'80'          ....OPEN
*        EQU   X'20'          ....SYSIN/SYSOUT/SUBSYS=
&P.DSAB_IND1 DS    XL01       ..INDICATOR 1
*        EQU   X'10'          ....VIO
         DS    XL01           ..RESERVED
&P.DSAB_SSYS DS    CL04       ..SUB-SYSTEM NAME
         SPACE 1
         DS    0D             JFCB INFORMATION
&P.JFCB_DSN DS    CL44        ..DSNAME
&P.JFCB_TGTDDN DS    0CL08    ..TARGET DDNAME IF BLSR
&P.JFCB_MBRGDG DS    CL08     ..MEMBER NAME OR GDG
&P.JFCB_AM DS    XL01         ..ACCESS METHOD
*        EQU   X'40'          ....DSORG=PS
*        EQU   X'20'          ....DSORG=DA
*        EQU   X'10'          ....DSORG=PO
*        EQU   X'08'          ....VSAM
&P.JFCB_RECFM DS    XL01      ..DCB=RECFM, AMP=RECFM
*        EQU   X'C0'          ....RECFM=U   UNDEFINED
*        EQU   X'80'          ....RECFM=F   FIXED
*        EQU   X'40'          ....RECFM=V   VARIABLE
*        EQU   X'20'          ....RECFM=.B  BLOCKED
*        EQU   X'10'          ....RECFM=.SS SPANNED
*        EQU   X'08'          ....RECFM=..A ASA CTL CHAR
*        EQU   X'04'          ....RECFM=..M MACHINE CTL CHAR
*        EQU   X'01'          ....3800 CTL CHAR
&P.JFCB_IND0 DS    XL01       ..INDICATOR 0
*        EQU   X'20'          ....SYSIN/SYSOUT/SUBSYS=
&P.JFCB_IND1 DS    XL01       ..INDICATOR 1
*        EQU   X'80'          ....PS GDG MBR
*        EQU   X'40'          ....PO PDS MBR
*        EQU   X'20'          ....VSAM BLSR
*        EQU   X'10'          ....VIO
&P.JFCB_IND2 DS    XL01       ..INDICATOR 2
*        EQU   X'C0'          ....DISP=NEW
*        EQU   X'80'          ....DISP=MOD
*        EQU   X'40'          ....DISP=OLD
*        EQU   X'20'          ....DISP=SHR
*        EQU   X'01'          ....TEMPORARY DATA SET
&P.JFCB_IND3 DS    XL01       ..INDICATOR 3
*        EQU   X'80'          ....SMS/EF EXTENDED FORMAT
*                                 append an additional 32-bytes
*                                 of control information
*        EQU   X'40'          ....SMS/EF COMPRESSABLE
*        EQU   X'20'          ....SMS/EF EXTENDED ADDRESS >4GB
&P.JFCB_IND5 DS    XL01       ..INDICATOR 5
*                                 SPACE=(alloc,(pri,sec,dir),RLSE,
*                                 CONTIG|MXIG|ALX|ROUND )
*        EQU   X'C0'          ....SPACE=(CYL,...
*        EQU   X'80'          ....SPACE=(TRK,...
*        EQU   X'40'          ....SPACE=(blksize,...
*        EQU   X'20'          ....SPACE=(,,RLSE)
*        EQU   X'08'          ....SPACE=(,,,CONTIG)
*        EQU   X'04'          ....SPACE=(,,,MXIG)
*        EQU   X'02'          ....SPACE=(,,,ALX)
*        EQU   X'01'          ....SPACE=(,,,ROUND)
&P.JFCB_IND6 DS    XL01       ..INDICATOR 6
*                                 LABEL=(seq#,type,protect,
*                                 RETPD=n | EXPDT=yyddd|yyyyddd )
*        EQU   X'80'          ....LABEL=(seq#,...)
*        EQU   X'40'          ....LABEL=(,AL,...)
*                             ......ISO/ANSI, ISO/ANSI/FIPS
*        EQU   X'20'          ....LABEL=(,LTM,...)
*                             ......leading TM on unlabeled tape
*        EQU   X'10'          ....LABEL=(,BLP,...)
*                             ......bypass label processing (AUTH)
*        EQU   X'08'          ....user labels
*                             ......AUL, SUL
*        EQU   X'04'          ....LABEL=(,NSL,...)
*                             ......non-std label
*        EQU   X'02'          ....LABEL=(,SL,...)
*                             ......standard label
*        EQU   X'01'          ....LABEL=(,NL,...)
*                             ......no label
&P.JFCB_IND7 DS    XL01       ..INDICATOR 7
*        EQU   X'80'          ....CATALOGED
         DS    XL05           ..RESERVED
&P.JFCB_BUFSP DS    F         ..AMP=BUFSP
&P.JFCB_LRECL DS    F         ..DCB/ACB LRECL
&P.JFCB_BLKSZ DS    F         ..DCB=BLKSIZE
&P.JFCB_BUFND DS    H         ..DCB=BUFNO AMP=BUFND
&P.JFCB_BUFNI DS    H         ..AMP=BUFNI
&P.JFCB_STRNO DS    H         ..AMP=STRNO
         DS    H              ..RESERVED
         SPACE 1
&P.JFCB_BLKSPC DS    F        ..SPACE=(blksize,...
&P.JFCB_PRISPC DS    F        ..SPACE=(,(primary)...
&P.JFCB_SECSPC DS    F        ..SPACE=(,(,secondary)...
&P.JFCB_DIRSPC DS    F        ..SPACE=(,(,,dir)...
         SPACE 1
&P.JFCB_LBLSEQ DS    H        ..LABEL=(seq#,...
         SPACE 1
&P.JFCB_VOLSEQ DS    H        ..VOL=(,,volseq#)
&P.JFCB_VOLCNT DS    H        ..VOL=(,,,volcnt)
         SPACE 1
*                             ..VOLUMES WITH EXTENTS
&P.JFCB_NOVOL DS    H         ....NUMBER OF VOLUMES
&P.JFCB_VOLNM DS    20CL06
         ORG   &P.JFCB_VOLNM
&P.JFCB_VOLNM1 DS    05CL06   ....TABLE OF VOL IDS
&P.JFCB_VOLNM2 DS    15CL06   ....TABLE OF VOL IDS
         SPACE 1
         DS    0D             DEVICE INFORMATION
&P.UCB_IND0 DS    XL01        ..INDICATOR 0
*        EQU   X'20'          ....SYSIN/SYSOUT/SUBSYS=
&P.UCB_IND1 DS    XL01        ..INDICATOR 1
*        EQU   X'10'          ....VIO
&P.UCB_IND2 DS    XL01        ..INDICATOR 2
*        EQU   X'20'          ....DISP=SHR
&P.UCB_IND6 DS    XL01        ..INDICATOR 6
*        EQU   X'10'          ....LABEL=(,BLP,...)
*                             ......bypass label processing (AUTH)
*        EQU   X'04'          ....LABEL=(,NSL,...)
*                             ......non-std label
*        EQU   X'01'          ....LABEL=(,NL,...)
*                             ......no label
&P.UCB_IND7 DS    XL01        ..INDICATOR 7
*        EQU   X'10'          ....SMS MANAGED
&P.UCB_IND8 DS    XL01        ..INDICATOR 8
*        EQU   X'01'          ....CACHED DEVICE
&P.UCB_IND9 DS    XL01        ..INDICATOR 9
*        EQU   X'02'          ....SYSIN DEVICE
*        EQU   X'01'          ....SYSOUT DEVICE
&P.UCB_INDA DS    XL01        ..INDICATOR 10
*        EQU   X'80'          ....3400 SERIES TAPE DRIVE (REEL)
*        EQU   X'40'          ....1600 BPI
*        EQU   X'20'          ....6250 BPI
*        EQU   X'01'          ....DUAL DENSITY 1600/6250
&P.UCB_INDB DS    XL01        ..INDICATOR 11
*        EQU   X'80'          ....3423 TAPE DRIVE (CART)
*        EQU   X'40'          ....3480 TAPE DRIVE (CART)
*        EQU   X'20'          ....3490 TAPE DRIVE (CART)
*        EQU   X'10'          ....3590 TAPE DRIVE (CART)
*        EQU   X'01'          ....DATA COMPACTION
*
*        EQU   X'80'          ....2305-2 DASD
*        EQU   X'40'          ....3330 DASD
*        EQU   X'20'          ....3340 DASD
*        EQU   X'10'          ....3350 DASD
*        EQU   X'08'          ....3375 DASD
*        EQU   X'04'          ....3330-11 DASD
*        EQU   X'02'          ....3380 DASD
*        EQU   X'01'          ....3390 DASD
*
*        EQU   X'80'          ....3211 PRINTER IMPACT
*        EQU   X'40'          ....4245 PRINTER IMPACT
*        EQU   X'20'          ....4248 PRINTER IMPACT
*        EQU   X'10'          ....3800 PRINTER LASER
*        EQU   X'08'          ....APF  PRINTER SUBSYS
*        EQU   X'04'          ....3895 OPTICAL/MAGINK CHAR RDR
*        EQU   X'02'          ....3838 ARRAY PROCESSOR
*        EQU   X'01'          ....ESCON/FICON DIRECTOR
*
*        EQU   X'80'          ....SERIAL CTC
*        EQU   X'40'          ....PARALLEL CTC
*        EQU   X'20'          ....ESCON CTC
*        EQU   X'10'          ....FICON CTC
*        EQU   X'08'          ....RS6000 ACTING CTC
*        EQU   X'04'          ....3172 ACTING CTC
*        EQU   X'01'          ....OTHER TYPE OF CTC
         DS    XL07           ..RESERVED
&P.DEV_MLRECL DS    D         ..MAX UNSPANNED LRECL FOR BSAM/QSAM/BPAM
&P.DEV_LBIBSZ DS    D         ..MAX BLKSIZE FOR LBI
&P.DEV_OPTBSZ DS    D         ..RECOMMENDED BLKSIZE FOR LBI
&P.DEV_MAXBSZ DS    F         ..MAX BLKSIZE FOR NON-LBI
&P.DEV_NOLCYL DS    F         ..NBR OF LOGICAL CYL ON DEVICE
&P.DEV_TRKCYL DS    F         ..NBR TRKS PER LOGICAL CYL
&P.UCB_URXPTR DS    A         ..UNIT RECORD EXTENTION ADDR
*                             ....OPTRDR 3886
*                             ....DISKETTE 3540
*                             ....PRINTER LASER 3800
*                             ....PRINTER 3211 UCS
&P.DEV_DCLASS DS    CL08      ..DEVICE CLASS
&P.UCB_DTYPE  DS    CL04      ..DEVICE TYPE (i.e. 3390)
&P.UCB_DNBR   DS    CL04      ..DEVICE NBR (i.e. a100)
&P.UCB_VOLNM  DS    CL06      ..VOLUME ID
&P.UCB_VOLSEQ DS    H         ..VOL=(,,volseq#)
&P.UCB_VOLCNT DS    H         ..VOL=(,,,volcnt)
         SPACE 1
         DS    0D             VTOC INFORMATION (DSCB)
&P.DSCB_AM DS    XL01         ..ACCESS METHOD
*        EQU   X'40'          ....DSORG=PS
*        EQU   X'20'          ....DSORG=DA
*        EQU   X'10'          ....DSORG=PO
*        EQU   X'08'          ....VSAM
&P.DSCB_RECFM DS    XL01      ..RECFM
*        EQU   X'C0'          ....RECFM=U   UNDEFINED
*        EQU   X'80'          ....RECFM=F   FIXED
*        EQU   X'40'          ....RECFM=V   VARIABLE
*        EQU   X'20'          ....RECFM=.B  BLOCKED
*        EQU   X'10'          ....RECFM=.SS SPANNED
*        EQU   X'08'          ....RECFM=..A ASA CTL CHAR
*        EQU   X'04'          ....RECFM=..M MACHINE CTL CHAR
&P.DSCB_IND1 DS    XL01       ..INDICATOR 1
*        EQU   X'08'          ....PDS/E
*        EQU   X'04'          ....HFS
&P.DSCB_IND3 DS    XL01       ..INDICATOR 3
*        EQU   X'80'          ....SMS/EF EXTENDED FORMAT
*                                 append an additional 32-bytes
*                                 of control information
*        EQU   X'40'          ....SMS/EF COMPRESSABLE
&P.DSCB_IND5 DS    XL01       ..INDICATOR 5
*                                 SPACE=(alloc,(pri,sec,dir),RLSE,
*                                 CONTIG|MXIG|ALX|ROUND )
*        EQU   X'C0'          ....SPACE=(CYL,...
*        EQU   X'80'          ....SPACE=(TRK,...
*        EQU   X'40'          ....SPACE=(blksize,...
*        EQU   X'08'          ....SPACE=(,,,CONTIG)
*        EQU   X'04'          ....SPACE=(,,,MXIG)
*        EQU   X'02'          ....SPACE=(,,,ALX)
*        EQU   X'01'          ....SPACE=(,,,ROUND)
&P.DSCB_IND7 DS    XL01       ..INDICATOR 7
*        EQU   X'40'          ....CATALOGED IN ICF
*        EQU   X'10'          ....SMS MANAGED
*        EQU   X'08'          ....LAST VOLUME OF DATA SET
*        EQU   X'04'          ....DATA SET RACF DEFINED
         SPACE 1
&P.DSCB_SECSPCIND DS    XL01  ..SECONDARY SPACE IND
&P.$SECSPCA EQU   X'80'       ....AVERAGE BLOCK LENGTH
&P.$SECSPCM EQU   X'40'       ....MB
&P.$SECSPCK EQU   X'20'       ....KB
&P.$SECSPCB EQU   X'10'       ....BYTES
&P.$SECSPCY EQU   X'08'       ....multiple of 256 (hex value)
&P.$SECSPCZ EQU   X'16'       ....multiple of 65536 (hex value)
         DS    XL01           ..RESERVED
&P.DSCB_LRECL  DS    F        ..LRECL
&P.DSCB_BLKSZ  DS    F        ..BLKSZ
&P.DSCB_SECALC DS    F        ..SECONDARY SPACE ALLOCATION
&P.DSCB_SECSPC DS    H        ..SECONDARY SPACE EXTENSION
&P.DSCB_NXOV   DS    H        ..NBR OF EXTENTS ON VOLUME
         SPACE 1
&P.DSCB_CRDTE DS    CL08      ..CREATION DATE YYYYMMDD
&P.DSCB_EXDTE DS    CL08      ..EXPIRATION DATE YYYYMMDD
&P.DSCB_LRDTE DS    CL08      ..LAST REFERENCE DATE YYYYMMDD
         SPACE 1
&P.DSCB_EXT1 DS    XL10       ..1ST 3 EXTENTS ON VOLUME
&P.DSCB_EXT2 DS    XL10
&P.DSCB_EXT3 DS    XL10
         SPACE 1
         DS    0D             VTOC INFORMATION (DASD)
&P.VTOC_IND7 DS    XL01       ..INDICATOR 7
*        EQU   X'20'          ....VVDS ON VOLUME
*        EQU   X'10'          ....SMS MANAGED VOLUME
         DS    XL03           ..RESERVED
&P.VTOC_NOLCYL DS    H        ..NBR OF LOGICAL CYL ON DEVICE
&P.$EAV  EQU   X'FFFE'        ....EAV VOLUME INDICATOR
&P.VTOC_TRKCYL DS    H        ..NBR TRKS PER LOGICAL CYL
&P.VTOC_TRKSZ  DS    H        ..TRACK LENGTH
         SPACE 1
         DS    0D
&P.NTRY_END EQU   *
&P.NTRY_LEN EQU   *-&P.NTRY_BEG
         ORG
         AIF   ('&EJECT' EQ 'YES').MFDS076
         SPACE 2
         AGO   .MFDS078
.MFDS076 ANOP
         EJECT
.MFDS078 ANOP
         AGO   .MFDS800
.* **********
.MFDS080 ANOP
.* **********
.MFDS800 ANOP
&I       SETA  &I+1
         AIF   (N'&FDS GE &I).MFDS030
.MFDS900 ANOP
         MEND
./ ADD NAME=AS1MUTSA 0119-15069-18295-1106-00430-00486-00000-APLKS   55
         MACRO
&LABEL   AS1MUTSA &UDS=,                                               +
               &DSECT=NO,                                              +
               &EJECT=NO,                                              +
               &LIST=YES,                                              +
               &HIST=NO,                                               +
               &PARM=,                                                 +
               &PREFIX=,                                               +
               &MF=
.* -------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, DATA
.*
.* MACRO ID: AS1MUTSA
.*    TITLE: MAP USER TRANSIENT STORAGE AREA
.*     DATE: 2016/17/21
.*
.*     DESC: THIS MACRO IS USED TO MAP OUT TSA DATA AREAS
.*
.*  OPTIONS:
.*                        <-,------+
.*     >>-AS1MUTSA-+-----(+--------+)--------------------->
.*                 +-UDS=-+--------+
.*                        +-MISC---+
.*                        +-RESA---+
.*                        +-LTRACE-+
.*                        +-LEWORK-+
.*
.*      >-+---------------+--+---------------+------------>
.*        +-,DSECT=-+-NO--+  +-,EJECT=-+-NO--+
.*               -  +-YES-+            +-YES-+
.*        +-,MF=-+--------+
.*               +-D------+
.*
.*      >-+--------------+--+--------------+-------------->
.*        +-,LIST=-+-YES-+  +-,HIST=-+-NO--+
.*                 +-NO--+           +-YES-+
.*
.*      >-+--------------+--+----------------------+-----<<
.*        +-,PARM=-+-----+  +-,PREFIX=-+-----------+
.*                 +-999-+             +-XXXXXXXXX-+
.*
.* -------------------------------------------------------- *
.* MAINTENANCE HISTORY:
.*
.* YYYY/MM/DD
.* -------------------------------------------------------- *
         GBLC  &GMSCPFX,&GRESPFX,&GTRCPFX,&GLEWPFX
         GBLC  &GRSKPFX,&GRQUPFX,&GTRC#
         LCLA  &I
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &RESA#,&RSTK#
         LCLC  &P
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS1MUTSA'
&MACVER  SETC  '0001'
&MACREL  SETC  '.003'
&MACDATE SETC  '2017-08-21'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&I       SETA  1
         AIF   (T'&UDS NE 'O').MTSA002
         MNOTE 8,'&MACNME - UDS PARAMETER IS MISSING, MACRO EXPANSION I+
               GNORED'
         MEXIT
.MTSA002 ANOP
         AIF   ('&DSECT' EQ 'YES' OR '&DSECT' EQ 'NO').MTSA010
         AIF   ('&MF' EQ 'D').MTSA010
         MNOTE 4,'&MACNME - DSECT OR MF PARAMETER IS MISSING, WILL DEFA+
               ULT'
.MTSA010 ANOP
         AIF   ('&EJECT' EQ 'YES' OR '&EJECT' EQ 'NO').MTSA012
         MNOTE 8,'&MACNME - EJECT PARAMETER MUST BE "YES" OR "NO", MACR+
               O EXPANSION IGNORED'
         MEXIT
.MTSA012 ANOP
         AIF   ('&LIST' EQ 'YES' OR '&LIST' EQ 'NO').MTSA014
         MNOTE 8,'&MACNME - LIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.MTSA014 ANOP
         AIF   ('&HIST' EQ 'YES' OR '&HIST' EQ 'NO').MTSA016
         MNOTE 8,'&MACNME - HIST PARMETER MUST BE "YES" OR "NO", MACRO +
               EXPANSION IGNORED'
         MEXIT
.MTSA016 ANOP
.MTSA018 ANOP
.* **********
.MTSA020 ANOP
         AIF   ('&LIST' EQ 'YES').MTSA022
         PRINT OFF
         AGO   .MTSA024
.MTSA022 ANOP
         PRINT ON
.MTSA024 ANOP
         AIF   ('&DSECT' EQ 'YES').MTSA026
         AIF   ('&MF' EQ 'D').MTSA026
         AIF   ('&LABEL' EQ '').MTSA028
&LABEL   DS    0D
         AGO   .MTSA028
.MTSA026 ANOP
&LABEL   DSECT
.MTSA028 ANOP
.* **********
.MTSA030 ANOP
         AIF   (T'&PREFIX EQ 'O').MTSA032
&P       SETC  '&PREFIX'
         AGO   .MTSA034
.MTSA032 ANOP
&P       SETC  ''
.MTSA034 ANOP
.* **********
.MTSA050 ANOP
         AIF   ('&UDS(&I)' NE 'MISC').MTSA060
&GMSCPFX SETC  '&P'
*        *------------------------------------------------- *
*        * WORK FIELD(S)
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').MTSA054
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.MTSA054 ANOP
         SPACE 1
*        *------------------------------------------------- *
*        * SUBROUTINE CALL LIST
*        *------------------------------------------------- *
         SPACE 1
&P.PLIST DS    32F           PARAMETER LIST VECTOR
         SPACE 2
*        *------------------------------------------------- *
*        * BINARY WORK FIELD(S)
*        *------------------------------------------------- *
         SPACE 1
&P.DW01  DS    D             DOUBLE WORD 1
         ORG   &P.DW01
&P.FW11  DS    F             ..FULL WORD 1
&P.FW12  DS    F             ..FULL WORD 2
         ORG   &P.DW01
&P.HW11  DS    H             ..HALF WORD 1
&P.HW12  DS    H             ..HALF WORD 2
&P.HW13  DS    H             ..HALF WORD 3
&P.HW14  DS    H             ..HALF WORD 4
         ORG   &P.DW01
&P.BYTE11 DS   X             ..BYTE 1
&P.BYTE12 DS   X             ..BYTE 2
&P.BYTE13 DS   X             ..BYTE 3
&P.BYTE14 DS   X             ..BYTE 4
&P.BYTE15 DS   X             ..BYTE 5
&P.BYTE16 DS   X             ..BYTE 6
&P.BYTE17 DS   X             ..BYTE 7
&P.BYTE18 DS   X             ..BYTE 8
         SPACE 1
&P.DW02  DS    D             DOUBLE WORD 2
         ORG   &P.DW02
&P.FW21  DS    F             ..FULL WORD 1
&P.FW22  DS    F             ..FULL WORD 2
         ORG   &P.DW02
&P.HW21  DS    H             ..HALF WORD 1
&P.HW22  DS    H             ..HALF WORD 2
&P.HW23  DS    H             ..HALF WORD 3
&P.HW24  DS    H             ..HALF WORD 4
         ORG   &P.DW02
&P.BYTE21 DS   X             ..BYTE 1
&P.BYTE22 DS   X             ..BYTE 2
&P.BYTE23 DS   X             ..BYTE 3
&P.BYTE24 DS   X             ..BYTE 4
&P.BYTE25 DS   X             ..BYTE 5
&P.BYTE26 DS   X             ..BYTE 6
&P.BYTE27 DS   X             ..BYTE 7
&P.BYTE28 DS   X             ..BYTE 8
         SPACE 1
&P.DW03  DS    D             DOUBLE WORD 3
         ORG   &P.DW03
&P.FW31  DS    F             ..FULL WORD 1
&P.FW32  DS    F             ..FULL WORD 2
         ORG   &P.DW03
&P.HW31  DS    H             ..HALF WORD 1
&P.HW32  DS    H             ..HALF WORD 2
&P.HW33  DS    H             ..HALF WORD 3
&P.HW34  DS    H             ..HALF WORD 4
         SPACE 1
&P.DW04  DS    D             DOUBLE WORD 4
         ORG   &P.DW04
&P.FW41  DS    F             ..FULL WORD 1
&P.FW42  DS    F             ..FULL WORD 2
         ORG   &P.DW04
&P.HW41  DS    H             ..HALF WORD 1
&P.HW42  DS    H             ..HALF WORD 2
&P.HW43  DS    H             ..HALF WORD 3
&P.HW44  DS    H             ..HALF WORD 4
         SPACE 2
         DS    0D
*        *------------------------------------------------- *
*        * PACK DECIMAL FIELD(S)
*        *------------------------------------------------- *
         SPACE 1
&P.PD01  DS    PL16          PACK DECIMAL 1
&P.PD02  DS    PL16          PACK DECIMAL 2
         SPACE 2
         DS    0D
*        *------------------------------------------------- *
*        * ZONE DECIMAL FIELD(S)
*        *------------------------------------------------- *
         SPACE 1
&P.ZD01  DS    ZL16          ZONE DECIMAL 1
&P.ZD02  DS    ZL16          ZONE DECIMAL 2
         SPACE 2
         DS    0D
*        *------------------------------------------------- *
*        * VARIABLE LENGTH STRING
*        *------------------------------------------------- *
         SPACE 1
&P.VSTR  DS    0XL122        VARIABLE LENGTH STRING
&P.VLEN  DS    H             ..VARIABLE STRING LENGTH
&P.VTXT  DS    CL120         ..VARIABLE STRING TEXT
         ORG   &P.VTXT
&P.FTXT  DS    CL80          ..FIXED STRING TEXT
         ORG
         AIF   ('&EJECT' EQ 'YES').MTSA056
         SPACE 2
         AGO   .MTSA058
.MTSA056 ANOP
         EJECT
.MTSA058 ANOP
         AGO   .MTSA800
.* **********
.MTSA060 ANOP
         AIF   ('&UDS(&I)' NE 'RESA').MTSA070
&RESA#   SETC  '7'
         AIF   (T'&PARM EQ 'O' OR '&PARM' EQ '').MTSA062
&RESA#   SETC  '&PARM'
.MTSA062 ANOP
&GRESPFX SETC  '&P'
         DS    0D
*        *------------------------------------------------- *
*        * REGISTER 14 STACK AREA
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').MTSA064
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.MTSA064 ANOP
         SPACE 1
&P.RESA  DS    F              R14 STACK AREA
*                             ....NBR OF ACTIVE ENTRIES
         DS    &RESA#.F
         AIF   ('&EJECT' EQ 'YES').MTSA066
         SPACE 2
         AGO   .MTSA068
.MTSA066 ANOP
         EJECT
.MTSA068 ANOP
         AGO   .MTSA800
.* **********
.MTSA070 ANOP
         AIF   ('&UDS(&I)' NE 'LTRACE').MTSA080
&GTRCPFX SETC  '&P'
&GTRC#   SETC  '99'
         AIF   (T'&PARM EQ 'O' OR '&PARM' EQ '').MTSA072
&GTRC#   SETC  '&PARM'
.MTSA072 ANOP
         DS    0D
*        *------------------------------------------------- *
*        * LABEL TRACE WORK AREA
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').MTSA074
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.MTSA074 ANOP
         SPACE 1
&P.CTBL  DS    04F            LABEL TRACE TABLE
*                             ....NBR OF RECORDED TRACES
*                             ....POINTER TO CURRENT ENTRY
*                             ....POINTER TO LAST TABLE ENTRY
*                             ....FLAG BYTES
*                             ......X'40' TRACE ON
&P.NTRY  DS    &GTRC#.XL20    ..NBR(4),CSECT(8),LABEL(8)
&P.CTBLE DS    0H
         AIF   ('&EJECT' EQ 'YES').MTSA076
         SPACE 2
         AGO   .MTSA078
.MTSA076 ANOP
         EJECT
.MTSA078 ANOP
         AGO   .MTSA800
.* **********
.MTSA080 ANOP
         AIF   ('&UDS(&I)' NE 'LEWORK').MTSA090
&GLEWPFX SETC  '&P'
*        *------------------------------------------------- *
*        * LE RELATED WORK AREAS
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').MTSA084
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.MTSA084 ANOP
         SPACE 1
         DS    0D
*        *------------------------------------------------- *
*        * LE FEEDBACK AREA
*        *------------------------------------------------- *
         SPACE 1
&P.LEFC  DS    2XL12          LE FEEDBACK AREA
*        *------------------------------------------------- *
*        *   1ST OCCURANCE: LE ROUTINE FEEDBACK
*        *   2ND OCCURANCE: FEEDBACK SAVE AREA
*        *------------------------------------------------- *
&P.$LEFBSA  EQU   L'LEFC      OFFSET TO SAVE AREA
         ORG   &P.LEFC
&P.LECTOK  DS    0XL08        ..LE CONDITION TOKEN
&P.LEMCDE  DS    0XL04        ....MESSAGE CODE
&P.LEMSEV  DS    H            ......MESSAGE SEVERITY
&P.LEMNBR  DS    H            ......MESSAGE NUMBER
&P.LEMCSC  DS    XL01         ....MESSAGE CASE/SEVERITY/CONTROL
&P.LEMFID  DS    CL03         ....MESSAGE FACILITY ID
&P.LEMISI  DS    F            ..LE ISI INFORMATION
         ORG
         SPACE 2
         DS    0D
*        *------------------------------------------------- *
*        * LE PARAMETERS TO BUILD CONDITION TOKEN (CEENCOD)
*        *------------------------------------------------- *
         SPACE 1
&P.WKCTOK  DS    XL12         LE WORK CONDITION TOKEN (O8)
&P.WKMISI  DS    F            LE WORK ISI INFORMATION (I7)
&P.WKMSEV  DS    H            LE WORK MESSAGE SEVERITY (I1)
&P.WKMNBR  DS    H            LE WORK MESSAGE NUMBER (I2)
&P.WKCASE  DS    H            LE WORK CASE (I3)
&P.WKSEV   DS    H            LE WORK SEVERITY (I4)
*                             ..0=INFORMATIONAL
*                             ..1=WARNING
*                             ..2=ERROR
*                             ..3=SEVERE
*                             ..4=CRITICAL
&P.WKCNTL  DS    H            LE WORK CONTROL (I5)
*                             ..0=NON-IBM
*                             ..1=IBM
&P.WKMFID  DS    CL03         LE WORK FACILITY ID (I6)
         SPACE 2
         DS    0D
*        *------------------------------------------------- *
*        * LE PARAMETERS TO INSERT VARIABLE DATA INTO
*        * ERROR MESSAGE(S) (CEECMI)
*        *------------------------------------------------- *
&P.ISIROW  DS    3XL380       MSG/ISI MATRIX 3X8
         ORG   &P.ISIROW
&P.ISICTOK DS    XL12         ..MSG ISI CONDITION TOKEN
         SPACE 1
*        * ------------------------------------------------ *
*        * MESSAGE ISI TABLE
*        * HOLDS INSERT DATA FOR LE MESSAGE PROCESSING
*        *
*        * ENTRY  CONTENTS
*        *
*        *   01   COMPONENT ISSUEING MESSAGE
*        *   02   COMPONENT TYPE
*        *   03   COMPONENT NAME OF 02
*        *   04   ACTION
*        *   05   NUMBER STRING
*        *   06   NUMBER STRING
*        *   07   TEXT STRING
*        *   08   TEXT STRING
*        * ------------------------------------------------ *
         SPACE 1
&P.ISICOL  DS    8XL46        ..MSG ISI VECTOR
         ORG   &P.ISICOL
&P.ISILEN  DS   H             ....MSG ISI LENGTH
&P.ISITXT  DS   CL44          ....MSG ISI TEXT
         ORG
         SPACE 2
         DS    0D
*        *------------------------------------------------- *
*        * LE PARAMETER FIELDS
*        *------------------------------------------------- *
         SPACE 1
&P.LEFUNCT DS    F            LE FUNCTION/ACTION
&P.LEMDEST DS    F            LE MESSAGE DESTINATION (2)
         AIF   ('&EJECT' EQ 'YES').MTSA086
         SPACE 2
         AGO   .MTSA088
.MTSA086 ANOP
         EJECT
.MTSA088 ANOP
         AGO   .MTSA800
.* **********
.MTSA110 ANOP
         AIF   ('&UDS(&I)' NE 'XXXXXX').MTSA120
.MTSA112 ANOP
*        *------------------------------------------------- *
*        * XXXXXXXXXXXXXXXXXX
*        *------------------------------------------------- *
         AIF   ('&HIST' EQ 'NO').MTSA114
*        *
*        * MAINTENANCE:
*        *
*        * YY/MM/DD +-APAR-+  +-DESCRIPTION---------------- +
*        *
*        *------------------------------------------------- *
.MTSA114 ANOP
         SPACE 1
         AIF   ('&EJECT' EQ 'YES').MTSA116
         SPACE 2
         AGO   .MTSA118
.MTSA116 ANOP
         EJECT
.MTSA118 ANOP
         AGO   .MTSA800
.* **********
.MTSA120 ANOP
.* **********
.MTSA800 ANOP
&I       SETA  &I+1
         AIF   (N'&UDS GE &I).MTSA030
.MTSA900 ANOP
         MEND
./ ADD NAME=AS2AINDX 0109-18353-19318-1419-00226-00482-00000-APLKS   29
         MACRO
&LABEL   AS2AINDX ,                                                    +
               &DOPEPFX=,                                              +
               &COUNT=,                                                +
               &INDEX=,                                                +
               &PREFIX=,                                               +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2AINDX
.*    TITLE: COMPUTE ARRAY INDEX
.*     DATE: 2018-12-20
.*
.*     DESC: THIS MACRO WILL GENERATE A ROUTINE TO
.*           TAKE A SET OF SUBSCRIPTS FOR AN ARRAY
.*           AND COMPUTE AN INDEX VALUE.
.*
.*    INPUT:
.*      DOPEPFX=   prefix to Dope Vector data labels
.*      COUNT=     number of subscripts (left to right) to use
.*                 in computing the index value
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand routine to compute index value
.*                 D - expand TWA DSECT definition
.*                 E - expand  CALL logic
.*                 L - expand TWA definition
.*
.*    OUTPUT:
.*      INDEX=     integer offset of matching array entry
.*      R1         same value as INDEX
.*      RF         return code
.*                 0 = successful
.*                 4 = subscript overflow/underflow
.*                 8 = invalid parameter
.*
.*  OPTIONS:
.*
.*      >>-AS2AINDX-+-----------------------+--->
.*
.*                >-+-DOPEPFX=--------------+--->
.*
.*                >-+-COUNT=----------------+--->
.*
.*                >-+-INDEX=----------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)-+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+---+-------------+---><
.*                        +-C-+    expand code
.*                        +-D-+    expand TWA DSECT
.*                        +-E-+    expand CALL
.*                        +-L-+    expand TWA
.*
.* ALGORITHM:
.*
.*      n = nbr of subscripts passed (left to right)
.*      t1 = 0;
.*      Do vi=1 To n By +1;
.*        t2 = (VSUB(vi) - VLBND(vi)) * VINDX(vi);
.*        t1 = t1 + t2;
.*        If vi-1 > 0 Then;
.*          t1 = t1 + VLGTH(vi-1);
.*      End;
.*
.*      Return (t1);
.*
.*  REG USE: R0: work
.*           R1: work / index
.*           R2: work
.*           RF: return code
.*               0 = successful
.*               4 = subscript overflow/underflow
.*               8 = invalid parameter
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D,&E
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2AINDX'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-12-20'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.CIDX030 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').CIDX032
&D       SETC  '&PREFIX(1)'
.CIDX032 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').CIDX034
&C       SETC  '&PREFIX(2)'
.CIDX034 ANOP
.CIDX100 ANOP
         AIF   (T'&MF NE 'O').CIDX110
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.CIDX110 ANOP
         AIF   ('&MF(1)' EQ 'C').CIDX800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'D').CIDX210    EXPAND TWA DSECT
         AIF   ('&MF(1)' EQ 'E').CIDX600    EXPAND CALL
         AIF   ('&MF(1)' EQ 'L').CIDX200    EXPAND TWA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.CIDX200 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA)
         DS    0D
         AGO   .CIDX220
.CIDX210 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA) DSECT
&LABEL   DSECT
.CIDX220 ANOP
&D.CXTWA EQU   *,(10*4),C'X'  COMPUTE INDEX FOR ARRAY
&D.CXSUB DS    7F             ..ARRAY SUBSCRIPTS
         ORG   &D.CXSUB
&D.CXSUB1 DS    F
&D.CXSUB2 DS    F
&D.CXSUB3 DS    F
&D.CXSUB4 DS    F
&D.CXSUB5 DS    F
&D.CXSUB6 DS    F
&D.CXSUB7 DS    F
&D.CXN   DS    F              LOOP UBNDS
&D.CXI   DS    F              LOOP SUBSCRIPT
&D.CXT1  DS    F              TEMP FIELD 1 (ACCUMULATOR)
         MEXIT
.CIDX600 ANOP  ,    CALL COMPUTE ARRAY INDEX
         MNOTE *,'&MACNME - USING REG 14'
         BRAS  RE,&C.CXRTN100 call compute array index
         MEXIT
.CIDX800 ANOP  ,    EXPAND COMPUTE ARRAY INDEX
         MNOTE *,'&MACNME - USING REG 0,1,2,15'
         AIF   (T'&DOPEPFX NE 'O').CIDX810
         AGO   .CIDX820
.CIDX810 ANOP
&E       SETC  '&DOPEPFX'
.CIDX820 ANOP
         AIF   (T'&COUNT NE 'O').CIDX822
         MNOTE 8,'&MACNME - COUNT KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.CIDX822 ANOP
         AIF   (T'&COUNT NE 'N').CIDX824
         MNOTE 8,'&MACNME - COUNT KEYWORD PARAMETER INVALID'
         AGO   .ERR0001
.CIDX824 ANOP
         AIF   (T'&COUNT EQ 'A' OR T'&COUNT EQ 'F').CIDX826
         MNOTE 8,'&MACNME - COUNT KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.CIDX826 ANOP
.CIDX830 ANOP
         AIF   (T'&INDEX NE 'O').CIDX832
         MNOTE 8,'&MACNME - INDEX KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.CIDX832 ANOP
         AIF   (T'&INDEX NE 'N').CIDX834
         MNOTE 8,'&MACNME - INDEX KEYWORD PARAMETER INVALID'
         AGO   .ERR0001
.CIDX834 ANOP
         AIF   (T'&INDEX EQ 'A' OR T'&COUNT EQ 'F').CIDX836
         MNOTE 8,'&MACNME - INDEX KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.CIDX836 ANOP
&C.CXRTN100 EQU   *      COMPUTE ARRAY INDEX ROUTINE
         LA    RF,8           set invalid parameter(s)
         ICM   R0,15,&COUNT   Q. nbr of subscripts > 0
         JZ    &C.CXRTN890    A. no, terminate
         JM    &C.CXRTN890    A. no, terminate
         C     R0,&E.DVDIM    Q. subscript count <= dimension
         JH    &C.CXRTN890    A. no, terminate
         XC    &D.CXT1,&D.CXT1
*        loop init
         ST    R0,&D.CXN      init n = loop upper bounds
         LA    R0,1
         ST    R0,&D.CXI      init i = loop lower bounds
         LA    RF,4           set subscript(s) overflow
&C.CXRTN200 EQU   *
*        Do i=1 To n By +1
         CLC   &D.CXI,&D.CXN  Q. i > n
         JH    &C.CXRTN800    A. yes, finish up loop
         SPACE 1
         L     R1,&D.CXI      pick up i
         AHI   R1,-1          ..convert to
         SLL   R1,2           ..index
         L     R2,&D.CXSUB(R1)     pick up sub(i)
         C     R2,&E.DVHBND(R1)    Q. sub(i) > hbnd(i)
         JH    &C.CXRTN890         A. yes, terminate
         C     R2,&E.DVLBND(R1)    Q. sub(i) < lbnd(i)
         JL    &C.CXRTN890         A. yes, terminate
         S     R2,&E.DVLBND(R1)    t2 = sub(i) - lbnd(i)
         MS    R2,&E.DVINDX(R1)    t2 = t2 * indx(i)
         L     R0,&D.CXT1     pick up t1
         AR    R0,R2          t1 = t1 + t2
         L     R1,&D.CXI      pick up i
         AHI   R1,-1
         C     R1,=F'0'       Q. i-1 > 0
         JNH   &C.CXRTN210    A. no, bypass
         AHI   R1,-1          ..convert to
         SLL   R1,2           ..index
         A     R0,&E.DVLGTH(R1)    t1 = t1 + lgth(i-1)
&C.CXRTN210 EQU   *
         ST    R0,&D.CXT1     save t1
         L     R0,&D.CXI
         AHI   R0,1
         ST    R0,&D.CXI
         J     &C.CXRTN200    return to loop begin
*        End
         SPACE 1
&C.CXRTN800 EQU   *      SUCCESSFUL
         LA    RF,0
         L     R1,&D.CXT1
         ST    R1,&INDEX
&C.CXRTN890 EQU   *
         LTR   RF,RF
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2BI2HX 0104-19164-19318-1420-00074-00108-00000-APLKS   13
         MACRO
&LABEL   AS2BI2HX &TGTlbl,&SRClbl,&SRClen,                             +
               &MF=C
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2BI2HX
.*    TITLE: CONVERT BINARY TO HORIZONTAL HEX (printable)
.*     DATE: 2019-06-13
.*
.*     DESC: THIS MACRO WILL GENERATE INLINE CODE TO CONVERT
.*           CHARACTER/BINARY DATA TO HORIZONTAL HEX.
.*
.*    INPUT:
.*      SRClbl     label of source field
.*      SRClen     source field length (absolute value <= 4)
.*      MF=        macro expansion option
.*                 C - expand routine
.*
.*    OUTPUT:
.*      TGTlbl     label of target field
.*
.*    It is the programmers responsibility to ensure that the
.*    target field is twice the length of the source field.
.*
.*  OPTIONS:
.*
.*      >>-AS2BI2HX-+------------------------+--->
.*
.*                >-+-TGTlbl-----------------+--->
.*
.*                >-+-,SRClbl----------------+--->
.*
.*                >-+-,SRClen----------------+--->
.*
.*                >-+-,MF=-+------+----------+---><
.*                         +-C----+  expand code
.*
.* Work data areas can be expanded using:
.*       AS1MUTSA UDS=MISC,PREFIX=...
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2BI2HX'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019-06-13'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.XC2H030 ANOP
         AIF   (T'&MF NE 'O').XC2H040
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XC2H040 ANOP
         AIF   ('&MF(1)' EQ 'C').XC2H800    EXPAND CODE
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.XC2H800 ANOP  ,    EXPAND CONVERT CHARACTER TO HORTIZONAL HEX
&LABEL   UNPK  ZD02(9),&SRClbl.(&SRClen+1)
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         MVC   &TGTlbl.(&SRClen*2),ZD02+8-(&SRClen*2)
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2BI2ZO 0106-19162-19318-1421-00092-00217-00000-APLKS   08
         MACRO
&LABEL   AS2BI2ZO &SRCreg,                                             +
               &TARGET=,                                               +
               &PREFIX=,                                               +
               &MF=C
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2BI2ZO
.*    TITLE: CONVERT BYTE TO 8-BYTES OF ZERO'S AND ONE'S
.*     DATE: 2019-06-11
.*
.*     DESC: THIS MACRO WILL GENERATE INLINE CODE TO CONVERT
.*           A BYTE TO 8-BYTES OF ZERO'S AND ONE'S.
.*
.*    INPUT:
.*      SRCreg=    contains source byte in the register
.*      PREFIX=(data)
.*        data     prefix to all data labels
.*      MF=        macro expansion option
.*                 C - expand routine
.*
.*    OUTPUT:
.*      TARGET=    8-byte result field
.*
.*  OPTIONS:
.*
.*      >>-AS2BI2ZO-+------------------------+--->
.*
.*                >-+-SRCreg-----------------+--->
.*
.*                >-+-,TARGET=---------------+--->
.*
.*                >-+-,PREFIX=-(-+-------+-)-+--->
.*                               +--data-+
.*
.*                >-+-,MF=-+--------+--------+---><
.*                         +-C------+  expand code
.*
.* ALGORITHM: attributed to John Ganci
.*
.* Work data areas can be expanded using:
.*       AS1MUTSA UDS=MISC,PREFIX=...
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2BI2ZO'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019-06-11'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.XB2F010 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').XB2F012
&D       SETC  '&PREFIX(1)'
.XB2F012 ANOP
.XB2F030 ANOP
         AIF   (T'&MF NE 'O').XB2F040
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XB2F040 ANOP
         AIF   ('&MF(1)' EQ 'C').XB2F800    EXPAND CODE
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.XB2F800 ANOP  ,    EXPAND CONVERT BYTE TO 8-BYTES OF ZERO'S & ONE'S
         AIF   (T'&TARGET NE 'O').XB2F810
         MNOTE 8,'&MACNME - TARGET KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XB2F810 ANOP
         MNOTE *,'&MACNME - USING REG &SRCreg'
&LABEL   STC   &SRCreg,&D.BYTE27
         UNPK  &D.DW01(3),&D.BYTE27(2)
         NC    &D.DW01(2),=8X'0F'
         TR    &D.DW01(2),=X'00010405101114154041444550515455'
         UNPK  &D.DW01(5),&D.DW01(3)
         NC    &D.DW01(4),=8X'0F'
         TR    &D.DW01(4),=X'00010405101114154041444550515455'
         UNPK  &D.DW01(9),&D.DW01(5)
         MVC   &TARGET,&D.DW01
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2CH2HH 0111-19162-19318-1422-00106-00217-00000-APLKS   30
         MACRO
&LABEL   AS2CH2HH &TGTreg,&SRCreg,                                     +
               &PREFIX=,                                               +
               &MF=C
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2CH2HH
.*    TITLE: CONVERT CHARACTER TO HORIZONTAL HEX (printable)
.*     DATE: 2019-06-11
.*
.*     DESC: THIS MACRO WILL GENERATE INLINE CODE TO CONVERT
.*           CHARACTER/BINARY DATA TO HORIZONTAL HEX.
.*
.*    INPUT:
.*      SRCreg=    register pointing to source field
.*      PREFIX=(data)
.*        data     prefix to all data labels
.*      MF=        macro expansion option
.*                 C - expand routine
.*            STATIC - expand PSA definitions
.*
.*    OUTPUT:
.*      TGTreg=    even register pointing to target field
.*                 odd register contains length of source field
.*
.*    It is the programmers responsibility to ensure that the
.*    target field is twice the length of the source field.
.*
.*  OPTIONS:
.*
.*      >>-AS2CH2HH-+------------------------+--->
.*
.*                >-+-TGTreg-----------------+--->
.*
.*                >-+-,SRCreg-,--------------+--->
.*
.*                >-+-,PREFIX=-(-+-------+-)-+--->
.*                               +--data-+
.*
.*                >-+-,MF=-+--------+--------+---><
.*                         +-C------+  expand code
.*                         +-STATIC-+  expand PSA
.*
.*  REG USE: R1: points to TR table
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2CH2HH'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019-06-11'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.XC2H010 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').XC2H012
&D       SETC  '&PREFIX(1)'
.XC2H012 ANOP
.XC2H030 ANOP
         AIF   (T'&MF NE 'O').XC2H040
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XC2H040 ANOP
         AIF   ('&MF(1)' EQ 'C').XC2H800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'STATIC').XC2H100 EXPAND PSA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.XC2H100 ANOP  ,    EXPAND PERSISTENT STORAGE AREA (PSA)
         DS    0D
&D.TRCH2HH EQU   *,512,C'C'
         DC    C'000102030405060708090A0B0C0D0E0F' 00-0F
         DC    C'101112131415161618191A1B1C1D1E1F' 10-1F
         DC    C'202122232425262728292A2B2C2D2E2F' 20-2F
         DC    C'303132333435363738393A3B3C3D3E3F' 30-3F
         DC    C'404142434445464748494A4B4C4D4E4F' 40-4F
         DC    C'505152535455565758595A5B5C5D5E5F' 50-5F
         DC    C'606162636465666768696A6B6C6D6E6F' 60-6F
         DC    C'707172737475767778797A7B7C7D7E7F' 70-7F
         DC    C'808182838485868788898A8B8C8D8E8F' 80-8F
         DC    C'909192939495969798999A9B9C9D9E9F' 90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF' A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF' F0-FF
         MEXIT
.XC2H800 ANOP  ,    EXPAND CONVERT CHARACTER TO HORTIZONAL HEX
         MNOTE *,'&MACNME - USING REG 1,&TGTreg,&TGTreg.+1,&SRCreg'
&LABEL   LAY   1,&D.TRCH2HH
*-4      EQU   *
         TROT  &TGTreg,&SRCreg,1
         JO    *-4            loop back to continue
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2DDNXT 0106-17081-18295-1107-00064-00001-00000-APLKS   24
         MACRO
&LABEL   AS2DDNXT
.* --------------------------------------------------------- *
.* MACRO ID: AS2DDNXT
.*    TITLE: BUMP THROUGH CONCATENATED ENTRIES OF TIOTE FOR
.*           AN ALREADY FOUND DDNAME
.*     DATE: 2017/03/17
.*
.*     DESC: THIS MACRO IS USED TO RETRIEVE THE ADDRESS OF
.*           THE NEXT TIOTE FOR A SPECIFIC DDNAME
.*
.*  OPTIONS:
.*
.*     >>-AS2DDNXT-+---------------+--><
.*
.* EXTERNAL:
.*           MACRO IHAPSA, IKJTCB, IEFTIOT1
.*
.*           ESTABLISH ADDRESABILITY TO TIOENTRY
.*           USING TIOENTRY,R2
.*           PRIOR TO EXPANDING THIS MACRO
.*
.*  EXAMPLE:
.*
.*       IHAPSA DSECT=YES,LIST=YES
.*       IKJTCB DSECT=YES,LIST=YES
.*  TIOT DSECT
.*       IEFTIOT1
.*       ...
.*       SPACE 2
.*       L     R2,@STIOTE     RESTORE ADDR OF TIOTE ENTRY
.*       USING TIOENTRY,R2    EST ADDR TO TIOTE
.*       AS2DDNXT             Q. FIND CONCATENATION TO DDNAME
.*       JNZ   NOTFND         A. NO, NOT FOUND
.*       ST    R2,@STIOTE     SAVE ADDR OF TIOTE CONCATENATION
.*
.*  REG USE: R0 - WORK REGISTER
.*           R2 - INPUT  ADDRESS OF A TIOT ENTRY
.*                OUTPUT ADDRESS OF CONCATENATED TIOT ENTRY
.*           RF - 0 = SUCCESSFUL (CONCATENATION)
.*                4 = NOT FOUND (NO CONCATENATION)
.*
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2DDNXT'
&MACVER  SETC  '0001'
&MACREL  SETC  '.002'
&MACDATE SETC  '2018-05-17'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         MNOTE *,'&MACNME - USING REG 0,2,15'
&LABEL   L     15,=F'4'       INIT RC=4 NOT FOUND
         ICM   0,8,TIOELNGH   Q. LENGTH OF TIOT ENTRY > 0
         JZ    *+20           A. NO, BYPASS
         SRL   0,24
         AR    2,0            POINT TO NEXT TIOT ENTRY
         CLI   TIOEDDNM,C' '  Q. CONCATENATION
         JNE   *+6            A. NO, GO EXIT
         XR    15,15          A. YES, INIT RC=0 SUCCESSFUL
*+6      EQU   *
*+20     EQU   *
         LTR   15,15          SET CONDITION CODE
         MEND
./ ADD NAME=AS2DDSCN 0105-17081-18295-1108-00080-00001-00000-APLKS   10
         MACRO
&LABEL   AS2DDSCN &DD
.* --------------------------------------------------------- *
.* MACRO ID: AS2DDSCN
.*    TITLE: SCAN TIOT ENTRIES FOR A DDNAME
.*     DATE: 2017/02/17
.*
.*     DESC: THIS MACRO IS USED TO SCAN THE TIOT ENTRIES
.*           FOR A SPECIFIC DDNAME.
.*
.*  OPTIONS:
.*
.*     >>-AS2DDSCN-+-DDNAME-+---------------+--><
.*
.* EXTERNAL:
.*           MACRO IHAPSA, IKJTCB, IEFTIOT1
.*
.*           ESTABLISH ADDRESABILITY TO TIOENTRY
.*           USING TIOENTRY,R2
.*           PRIOR TO EXPANDING THIS MACRO
.*
.*  EXAMPLE:
.*
.*       IHAPSA DSECT=YES,LIST=YES
.*       IKJTCB DSECT=YES,LIST=YES
.*  TIOT DSECT
.*       IEFTIOT1
.*       ...
.*       SPACE 2
.*       MVC   DDNAME,=CL8'SYSUT1'
.*       USING PSA,R0
.*       L     R2,PSATOLD     PTR TO CURRENT TCB
.*       DROP  R0
.*       USING TCB,R2         EST ADDR TO TCB
.*       L     R2,TCBTIO      PTR TO TASK I/O TABLE (TIOT)
.*       DROP  R2
.*       USING TIOT,R2        EST ADDR TO TIOT
.*       ST    R2,@TIOT       SAVE ADDR OF TIOT
.*       LA    R2,TIOENTRY    PTR TO 1ST TIOT ENTRY
.*       ST    R2,@TIOTE      SAVE ADDR OF TIOTE (1ST ENTRY)
.*       DROP  R2
.*       USING TIOENTRY,R2    EST ADDR TO TIOTE
.*       AS2DDSCN DDNAME      Q. FIND DDNAME IN TIOT
.*       JNZ   NOTFND         A. NO, NOT FOUND
.*       ST    R2,@STIOTE     SAVE ADDR OF TIOTE MATCH
.*
.*  REG USE: R0 - WORK REGISTER
.*           R2 - INPUT  ADDRESS OF A TIOT ENTRY, USUALLY 1ST
.*                OUTPUT ADDRESS OF MATCHING TIOT ENTRY
.*           RF - 0 = SUCCESSFUL
.*                4 = NOT FOUND
.*
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2DDSCN'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2017-02-17'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         MNOTE *,'&MACNME - USING REG 0,2,15'
&LABEL   L     15,=F'4'       INIT RC=4 NOT FOUND
*-32     EQU   *
         ICM   0,8,TIOELNGH   Q. LENGTH OF TIOT ENTRY > 0
         JZ    *+34           A. NO, BYPASS
         CLI   TIOEDDNM,C' '  Q. CONCATENATION
         JE    *+14           A. YES, INCR & LOOP
         CLC   TIOEDDNM,&DD   Q. MATCH
         JE    *+14           A. YES, BYPASS LOOP
*+14     EQU   *
         SRL   0,24
         AR    2,0            POINT TO NEXT TIOT ENTRY
         J     *-32           LOOP BACK
*+14     EQU   *
         XR    15,15          INIT RC=0 SUCCESSFUL
*+34     EQU   *
         LTR   15,15          SET CONDITION CODE
         MEXIT
         MEND
./ ADD NAME=AS2DOPEV 0121-18345-19318-1424-00575-00482-00000-APLKS   22
         MACRO
&LABEL   AS2DOPEV ,                                                    +
               &DIM=,                                                  +
               &LEVEL=(),                                              +
               &LENGTH=(),                                             +
               &LBNDS=(),                                              +
               &PREFIX=,                                               +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2DOPEV
.*    TITLE: ARRAY DOPE VECTOR
.*     DATE: 2018-12-18
.*
.*     DESC: THIS MACRO WILL GENERATE AN ARRAY DOPE VECTOR.
.*
.*    INPUT:
.*      DIM=       integer count of array dimension
.*                 defines the number of entries in the following
.*                 vectors
.*      LEVEL=()   integer values of each level of array
.*                 maximum number of entries for each level
.*      LENGTH=()  integer values of size vector
.*                 length of data at each level
.*      LBNDS=()   integer values of low-bounds vector
.*                 starting subscript for each level
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand DOPE VECTOR creation
.*                 D - expand DOPE VECTOR TWA/PSA DSECT definition
.*                 E - expand CALL routine
.*                 G - expand TWA initialization
.*                 L - expand TWA definition
.*                 STATIC - expand PSA definition
.*
.*  OPTIONS:
.*
.*      >>-AS2DOPEV-+------------------------+--->
.*
.*                >-+-DIM=-------------------+--->
.*
.*                             +-<-,----+
.*                >-+-LEVEL=-(-+--------+-)--+--->
.*                             +-number-+
.*
.*                              +-<-,----+
.*                >-+-LENGTH=-(-+--------+-)-+--->
.*                              +-number-+
.*
.*                             +-<-,----+
.*                >-+-LBNDS=-(-+--------+-)--+--->
.*                             +-number-+
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+--------+---------+---><
.*                        +-C------+  expand DOPE VECTOR creation
.*                        +-D------+  expand DOPE VECTOR TWA/PSA DSECT
.*                        +-E------+  expand CALL
.*                        +-G------+  expand TWA initialization
.*                        +-L------+  expand TWA definition
.*                        +-STATIC-+  expand PSA definition
.*
.* ALGRITHM:
.*
.*      Generate Array Dope Vector (left-major).
.*
.*      The Dope Vector contains the dimension (1:7) of the array,
.*      a vector (VSIZE) that contains the number of entries
.*      for each level, a vector (VLGTH) that contains the
.*      length of user data defined at each level, and a vector
.*      (VLBND) that specifies the relative starting value
.*      of each subscript for each level.  Each of the previously
.*      declared vectors are provided by the user.
.*
.*         DIMENSION = 4
.*         VSIZE = (5,4,3,2)
.*         VLGTH = (1,2,3,4)
.*         VLBND = (1,1,1,1)
.*
.*      The following two vectors are generated using the user
.*      provided data.
.*
.*      The vector (VHBND) specifies the maximum value for
.*      each subscript for each level.
.*
.*         Do vi=1 To dim By +1;
.*           VHBND(vi) = VSIZE(vi) + VLBND(vi) - 1;
.*         End;
.*
.*         VHBND = (5,4,3,2)
.*
.*      The vector (VINDX) specifies the offset to the next
.*      array entry for the same subscript level.
.*
.*         lb = 2;
.*         Do vi=1 To dim-1 By +1;
.*           Do ub=dim To lb By -1;
.*             t = 1;
.*             Do vj=ub To lb By -1;
.*               t = t * VSIZE(vj)
.*             End;
.*             t = t * VLGTH(ub);
.*             VINDX(vi) = VINDX(vi) + t;
.*           End;
.*           lb = lb + 1;
.*         End;
.*
.*         Do vi=1 To dim By +1;
.*           VINDX(vi) = VINDX(vi) + VLGTH(vi);
.*         End;
.*         VINDX(dim) = VLGTH(dim);
.*
.*         VINDX = (141,35,11,4)
.*
.*  REG USE: R0: work / sub
.*           R1:
.*           R2:
.*           R3:
.*           RF: return code
.*               0 = successful
.*               4 = not successful
.*               8 = invalid parameters
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLA  &I,&J,&N,&T,&LB,&UB
         LCLA  &ADIM,&NLEVEL,&NLENGTH,&NLBNDS
         LCLA  &VSIZE(7),&VLGTH(7),&VLBND(7),&VHBND(7),&VINDX(7)
         LCLB  &EFLG
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D,&STR
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2DOPEV'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-12-18'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.DOPE030 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').DOPE032
&D       SETC  '&PREFIX(1)'
.DOPE032 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').DOPE034
&C       SETC  '&PREFIX(2)'
.DOPE034 ANOP
.DOPE100 ANOP
         AIF   (T'&MF NE 'O').DOPE110
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.DOPE110 ANOP
         AIF   ('&MF(1)' EQ 'C').DOPE800     EXPAND CODE
         AIF   ('&MF(1)' EQ 'D').DOPE210     EXPAND TWA/PSA DSECT
         AIF   ('&MF(1)' EQ 'E').DOPE600     EXPAND CALL
         AIF   ('&MF(1)' EQ 'G').DOPE400     EXPAND TWA GENERATION
         AIF   ('&MF(1)' EQ 'L').DOPE200     EXPAND TWA
         AIF   ('&MF(1)' EQ 'STATIC').DOPE500     EXPAND PSA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.DOPE200 ANOP  ,    expand transient work area (TWA)
         DS    0D
         AGO   .DOPE220
.DOPE210 ANOP  ,    expand TWA/PSA dsect
&LABEL   DSECT
.DOPE220 ANOP
&D.DOPEV EQU   *              ARRAY DOPE VECTOR(S)
&D.DVDIM DS    F              ..ARRAY DIMENSION
.DOPE222 ANOP  ,    edit keyword DIM
         AIF   (T'&DIM NE 'O').DOPE224
&ADIM    SETA  7
         AGO   .DOPE228
.DOPE224 ANOP
         AIF   (T'&DIM EQ 'N').DOPE226
&ADIM    SETA  7
         AGO   .DOPE228
.DOPE226 ANOP
&ADIM    SETA  &DIM
.DOPE228 ANOP
&D.DVSIZE DS   &ADIM.F        ..NBR OF ENTRIES IN EACH DIMENSION
&D.DVLGTH DS   &ADIM.F        ..LENGTH OF EACH DIMENSION
&D.DVLBND DS   &ADIM.F        ..SUBSCRIPT LBNDS OF EACH DIMENSION
&D.DVHBND DS   &ADIM.F        ..SUBSCRIPT HBNDS OF EACH DIMENSION
&D.DVINDX DS   &ADIM.F        ..INDEX VALUE OF EACH DIMENSION
         AIF   ('&MF(1)' EQ 'D').DOPE230
         SPACE 1
&D.DVN   DS    F              1ST DO LOOP UPPER LIMIT
&D.DVLB  DS    F              2ND & 3RD DO LOOP UPPER LIMIT
&D.DVI   DS    F              1ST DO LOOP SUBSCRIPT
&D.DVUB  DS    F              2ND DO LOOP SUBSCRIPT
&D.DVJ   DS    F              3RD DO LOOP SUBSCRIPT
&D.DVT1  DS    F              TEMP VALUE 1 (ACCUMULATOR)
.DOPE230 ANOP
&D.DVLEN EQU   *-&D.DOPEV
         MEXIT
.DOPE400 ANOP  ,    generate TWA
.DOPE410 ANOP  ,    edit keyword DIM
         AIF   (T'&DIM NE 'O').DOPE412
         MNOTE 8,'&MACNME - DIM KEYWORD PARAMETER MISSING'
&EFLG    SETB  1
.DOPE412 ANOP
         AIF   (T'&DIM EQ 'A' OR T'&DIM EQ 'F').DOPE414
         MNOTE 8,'&MACNME - DIM KEYWORD DATA TYPE INVALID'
&EFLG    SETB  1
.DOPE414 ANOP
.DOPE420 ANOP  ,    edit keyword LEVEL
         AIF   (T'&LEVEL NE 'O').DOPE422
         MNOTE 8,'&MACNME - LEVEL KEYWORD PARAMETER MISSING'
&EFLG    SETB  1
.DOPE422 ANOP
&NLEVEL  SETA  N'&LEVEL
&I       SETA  1
.DOPE424 ANOP
         AIF   (T'&LEVEL(&I) EQ 'A' OR T'&LEVEL(&I) EQ 'F').DOPE426
         MNOTE 8,'&MACNME - LEVEL KEYWORD DATA TYPE &I INVALID'
&EFLG    SETB  1
.DOPE426 ANOP
&I       SETA  &I+1
         AIF   (&I LE &NLEVEL).DOPE424
.DOPE430 ANOP ,     edit keyword LENGTH
         AIF   (T'&LENGTH NE 'O').DOPE432
         MNOTE 8,'&MACNME - LENGTH KEYWORD PARAMETER MISSING'
&EFLG    SETB  1
.DOPE432 ANOP
&NLENGTH SETA  N'&LENGTH
&I       SETA  1
.DOPE434 ANOP
         AIF   (T'&LENGTH(&I) EQ 'A' OR T'&LENGTH(&I) EQ 'F').DOPE436
         MNOTE 8,'&MACNME - LENGTH KEYWORD DATA TYPE &I INVALID'
&EFLG    SETB  1
.DOPE436 ANOP
&I       SETA  &I+1
         AIF   (&I LE &NLENGTH).DOPE434
.DOPE440 ANOP ,     edit keyword LBNDS
         AIF   (T'&LBNDS NE 'O').DOPE442
         MNOTE 8,'&MACNME - LBNDS KEYWORD PARAMETER MISSING'
&EFLG    SETB  1
.DOPE442 ANOP
&NLBNDS  SETA  N'&LBNDS
&I       SETA  1
.DOPE444 ANOP
         AIF   (T'&LBNDS(&I) EQ 'A' OR T'&LBNDS(&I) EQ 'F').DOPE446
         MNOTE 8,'&MACNME - LBNDS KEYWORD DATA TYPE &I INVALID'
&EFLG    SETB  1
.DOPE446 ANOP
&I       SETA  &I+1
         AIF   (&I LE &NLBNDS).DOPE444
         AIF   (&EFLG).ERR0001
.DOPE450 ANOP
         MNOTE *,'&MACNME - USING REG 0,15'
         LA    15,8           set invalid parameter
         ICM   0,15,&DIM
         JZ    &C.DVRTN099
         C     0,=F'7'
         JH    &C.DVRTN099
         ST    0,&D.DVDIM
&I       SETA  1
.DOPE454 ANOP
         ICM   0,15,&LEVEL(&I)     Q. level(i) > 0
         JZ    &C.DVRTN099         A. no, bypass
         ST    0,&D.DVSIZE+(&I-1)*4     init size(i)
         SPACE 1
         AIF   (&I EQ &NLEVEL).DOPE456
         L     0,&LENGTH(&I)
         AGO   .DOPE458
.DOPE456 ANOP
         ICM   0,15,&LENGTH(&I)    Q. length(dim) > 0
         JZ    &C.DVRTN099         A. no, bypass
.DOPE458 ANOP
         ST    0,&D.DVLGTH+(&I-1)*4     init lgth(i)
         SPACE 1
         L     0,&LBNDS(&I)
         ST    0,&D.DVLBND+(&I-1)*4     init lbnd(i)
         SPACE 1
         A     0,&D.DVSIZE+(&I-1)*4
         AHI   0,-1
         ST    0,&D.DVHBND+(&I-1)*4     hbnd(i) = lbnd(i)+size(i)-1
&I       SETA  &I+1
         AIF   (&I LE &NLEVEL).DOPE454
         LA    15,0
&C.DVRTN099 EQU   *
         LTR   15,15
         MEXIT
.DOPE500 ANOP  ,    initialize PSA
.DOPE510 ANOP  ,    edit keyword DIM
         AIF   (T'&DIM NE 'O').DOPE512
         MNOTE 8,'&MACNME - DIM KEYWORD PARAMETER MISSING'
         AGO   .ERR0001
.DOPE512 ANOP
         AIF   (T'&DIM EQ 'N').DOPE514
         MNOTE 8,'&MACNME - DIM KEYWORD PARAMETER INVALID'
         AGO   .ERR0001
.DOPE514 ANOP
&ADIM    SETA  &DIM
.DOPE520 ANOP  ,    edit keyword LEVEL
         AIF   (T'&LEVEL NE 'O').DOPE522
         MNOTE 8,'&MACNME - LEVEL KEYWORD PARAMETER MISSING'
         AGO   .ERR0001
.DOPE522 ANOP
&NLEVEL  SETA  N'&LEVEL
         AIF   (&NLEVEL EQ &ADIM).DOPE524
         MNOTE 8,'&MACNME - LEVEL KEYWORD LIST <> &ADIM ENTRIES'
         AGO   .ERR0001
.DOPE524 ANOP
&I       SETA  1
.DOPE526 ANOP
         AIF   (T'&LEVEL(&I) EQ 'N').DOPE528
         MNOTE 8,'&MACNME - LEVEL KEYWORD PARAMETER &I INVALID'
         AGO   .ERR0001
.DOPE528 ANOP ,     save VSIZE(I)
&VSIZE(&I) SETA  &LEVEL(&I)
&I       SETA  &I+1
         AIF   (&I LE &NLEVEL).DOPE526
.DOPE530 ANOP ,     edit keyword LENGTH
         AIF   (T'&LENGTH NE 'O').DOPE532
         MNOTE 8,'&MACNME - LENGTH KEYWORD PARAMETER MISSING'
         AGO   .ERR0001
.DOPE532 ANOP
&NLENGTH SETA  N'&LENGTH
         AIF   (&NLENGTH EQ &ADIM).DOPE534
         MNOTE 8,'&MACNME - LENGTH KEYWORD LIST <> &ADIM ENTRIES'
         AGO   .ERR0001
.DOPE534 ANOP
&I       SETA  1
.DOPE536 ANOP
         AIF   (T'&LENGTH(&I) EQ 'N').DOPE538
         MNOTE 8,'&MACNME - LENGTH KEYWORD PARAMETER &I INVALID'
         AGO   .ERR0001
.DOPE538 ANOP ,     save VLGTH(I)
&VLGTH(&I) SETA  &LENGTH(&I)
&I       SETA  &I+1
         AIF   (&I LE &NLENGTH).DOPE536
.DOPE540 ANOP ,     edit keyword LBNDS
         AIF   (T'&LBNDS NE 'O').DOPE542
         MNOTE 8,'&MACNME - LBNDS KEYWORD PARAMETER MISSING'
         AGO   .ERR0001
.DOPE542 ANOP
&NLBNDS  SETA  N'&LBNDS
         AIF   (&NLBNDS EQ &ADIM).DOPE544
         MNOTE 8,'&MACNME - LBNDS KEYWORD LIST <> &ADIM ENTRIES'
         AGO   .ERR0001
.DOPE544 ANOP
&I       SETA  1
.DOPE546 ANOP
         AIF   (T'&LBNDS(&I) EQ 'N').DOPE548
         MNOTE 8,'&MACNME - LBNDS KEYWORD PARAMETER &I INVALID'
         AGO   .ERR0001
.DOPE548 ANOP ,     save VLBND(I)
&VLBND(&I) SETA  &LBNDS(&I)
&I       SETA  &I+1
         AIF   (&I LE &NLBNDS).DOPE546
.DOPE560 ANOP ,     build VHBND
&I       SETA  1
.DOPE562 ANOP
&VHBND(&I) SETA  &VSIZE(&I)+&VLBND(&I)-1
&I       SETA  &I+1
         AIF   (&I LE &ADIM).DOPE562
.DOPE564 ANOP ,     init loop control
&LB      SETA  2
&I       SETA  1
&N       SETA  &ADIM-1
.DOPE570 ANOP ,     build VINDX
.*       Do i=1 To n By +1         1st Do loop
         AIF  (&I GT &N).DOPE584
.DOPE572 ANOP
&UB      SETA  &ADIM
.DOPE574 ANOP
.*         Do ub=d To lb By -1     2nd Do loop
         AIF  (&UB LT &LB).DOPE582
&T       SETA  1
.DOPE576 ANOP
&J       SETA  &UB
.DOPE578 ANOP
.*           Do j=ub To lb By -1   3rd Do loop
         AIF   (&J LT &LB).DOPE580
&T       SETA  &T*&VSIZE(&J)
&J       SETA  &J-1
         AGO   .DOPE578       return to 3rd Do loop
.*           End
.DOPE580 ANOP
&T       SETA  &T*&VLGTH(&UB)
&VINDX(&I) SETA  &VINDX(&I)+&T
&UB      SETA  &UB-1
         AGO   .DOPE574       return to 2nd Do loop
.*         End
.DOPE582 ANOP
&LB      SETA  &LB+1
&I       SETA  &I+1
         AGO   .DOPE570       return to 1st Do loop
.*       End
.DOPE584 ANOP
&I       SETA  1
.DOPE586 ANOP
.*       Do i=1 to d By +1
         AIF  (&I GT &ADIM).DOPE588
&VINDX(&I) SETA  &VINDX(&I)+&VLGTH(&I)
&I       SETA  &I+1
         AGO  .DOPE586        return to Do loop
.*       End
.DOPE588 ANOP
&VINDX(&ADIM) SETA  &VLGTH(&ADIM)
.*                  initialize the dope vector(s)
&D.DOPEV EQU   *              ARRAY DOPE VECTOR(S)
&D.DVDIM DC    F'&ADIM'       ..ARRAY DIMENSION
.DOPE5A0 ANOP ,     generate VSIZE vector
&I       SETA  1
&STR     SETC  '&VSIZE(&I)'
.DOPE5A2 ANOP ,          loop begin
&I       SETA  &I+1
         AIF   (&I GT &ADIM).DOPE5A4
&STR     SETC  '&STR'.',&VSIZE(&I)'
         AGO   .DOPE5A2  loop end
.DOPE5A4 ANOP
&D.DVSIZE DC    A(&STR)       ..LEVEL/SIZE VECTOR
.DOPE5B0 ANOP ,     generate VLGTH vector
&I       SETA  1
&STR     SETC  '&VLGTH(&I)'
.DOPE5B2 ANOP ,          loop begin
&I       SETA  &I+1
         AIF   (&I GT &ADIM).DOPE5B4
&STR     SETC  '&STR'.',&VLGTH(&I)'
         AGO   .DOPE5B2  loop end
.DOPE5B4 ANOP
&D.DVLGTH DC    A(&STR)       ..LENGTH VECTOR
.DOPE5C0 ANOP ,     generate VLBND vector
&I       SETA  1
&STR     SETC  '&VLBND(&I)'
.DOPE5C2 ANOP ,          loop begin
&I       SETA  &I+1
         AIF   (&I GT &ADIM).DOPE5C4
&STR     SETC  '&STR'.',&VLBND(&I)'
         AGO   .DOPE5C2  loop end
.DOPE5C4 ANOP
&D.DVLBND DC    A(&STR)       ..LOW BOUNDS VECTOR
.DOPE5D0 ANOP ,     generate VHBND vector
&I       SETA  1
&STR     SETC  '&VHBND(&I)'
.DOPE5D2 ANOP ,          loop begin
&I       SETA  &I+1
         AIF   (&I GT &ADIM).DOPE5D4
&STR     SETC  '&STR'.',&VHBND(&I)'
         AGO   .DOPE5D2  loop end
.DOPE5D4 ANOP
&D.DVHBND DC    A(&STR)       ..HI BOUNDS VECTOR
.DOPE5E0 ANOP ,     generate VINDX vector
&I       SETA  1
&STR     SETC  '&VINDX(&I)'
.DOPE5E2 ANOP ,          loop begin
&I       SETA  &I+1
         AIF   (&I GT &ADIM).DOPE5E4
&STR     SETC  '&STR'.',&VINDX(&I)'
         AGO   .DOPE5E2  loop end
.DOPE5E4 ANOP
&D.DVINDX DC    A(&STR)       ..INDEX/OFFSET VECTOR
.*                  end of dope vector(s) initalization
&D.DVLEN EQU   *-&D.DOPEV
         MEXIT
.DOPE600 ANOP  ,    call dope vector creation routine
         MNOTE *,'&MACNME - USING REG 14'
         BRAS  14,&C.DVRTN100 call dope vector creation routine
         MEXIT
.DOPE800 ANOP ,     generate dope vector creation routine
         MNOTE *,'&MACNME - USING REG 0,1,15'
&C.DVRTN100 EQU   *      dope vector creation routine
         LA    15,4           set unsuccessful
*        set loop control
         MVC   &D.DVLB,=F'2'
         MVC   &D.DVI,=F'1'
         L     0,&D.DVDIM
         AHI   0,-1
         ST    0,&D.DVN       n = dim-1
         L     0,&D.DVI
&C.DVRTN110 EQU   *      1st do loop
*        Do i=1 To n By +1
         C     0,&D.DVN       Q. i > n
         JH    &C.DVRTN124    A. yes, exit 1st do loop
         MVC   &D.DVUB,&D.DVDIM    ub = dim
         L     0,&D.DVUB
&C.DVRTN112 EQU   *      2nd do loop
*          Do ub=dim To lb By -1
         C     0,&D.DVLB      Q. ub < lb
         JL    &C.DVRTN122    A. yes, exit 2nd do loop
         MVC   &D.DVT1,=F'1'
         MVC   &D.DVJ,&D.DVUB j = ub
         L     0,&D.DVJ
&C.DVRTN114 EQU   *      3rd do loop
*            Do j=ub To lb By -1
         C     0,&D.DVLB      Q. j < lb
         JL    &C.DVRTN120    A. yes, exit 3rd do loop
         L     1,&D.DVJ       compute
         AHI   1,-1           ..index
         SLL   1,2            ..value
         L     0,&D.DVT1
         MS    0,&D.DVSIZE(1)
         ST    0,&D.DVT1      t1 = t1*size(j)
         SPACE 1
         L     0,&D.DVJ
         AHI   0,-1
         ST    0,&D.DVJ
         J     &C.DVRTN114    A. yes, loop back
*            End    3rd do loop
         SPACE 1
&C.DVRTN120 EQU   *      end of 3rd do loop
         L     1,&D.DVUB      compute
         AHI   1,-1           ..index
         SLL   1,2            ..value
         L     0,&D.DVT1
         MS    0,&D.DVLGTH(1)
         ST    0,&D.DVT1
         SPACE 1
         L     1,&D.DVI       compute
         AHI   1,-1           ..index
         SLL   1,2            ..value
         L     0,&D.DVINDX(1)
         A     0,&D.DVT1
         ST    0,&D.DVINDX(1)      indx(i) = indx(i)+t1
         SPACE 1
         L     0,&D.DVUB
         AHI   0,-1
         ST    0,&D.DVUB
         J     &C.DVRTN112    loop back to 2nd do loop
*          End      2nd do loop
         SPACE 1
&C.DVRTN122 EQU   *      end of 2nd do loop
         L     0,&D.DVLB
         AHI   0,1
         ST    0,&D.DVLB      lb = lb+1
         SPACE 1
         L     0,&D.DVI
         AHI   0,1
         ST    0,&D.DVI       i = i+1
         J     &C.DVRTN110    loop back to 1st do loop
*        End        1st do loop
         SPACE 1
&C.DVRTN124 EQU   *      end of 1st do loop
*        set loop control
         MVC   &D.DVI,=F'1'
         L     0,&D.DVI
&C.DVRTN130 EQU   *
         C     0,&D.DVDIM     Q. i > n
         JH    &C.DVRTN140    A. yes, exit do loop
         L     1,&D.DVI       compute
         AHI   1,-1           ..index
         SLL   1,2            ..value
         L     0,&D.DVINDX(1)
         A     0,&D.DVLGTH(1)
         ST    0,&D.DVINDX(1) indx(i) = indx(i)+lgth(i)
         L     0,&D.DVI
         AHI   0,1
         ST    0,&D.DVI
         J     &C.DVRTN130
         SPACE 1
&C.DVRTN140 EQU   *
         L     1,&D.DVDIM     compute
         AHI   1,-1           ..index
         SLL   1,2            ..value
         L     0,&D.DVLGTH(1)
         ST    0,&D.DVINDX(1) indx(dim) = indx(dim)+lgth(dim)
         LA    15,0
&C.DVRTN190 EQU   *
         LTR   15,15
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2EPA   0110-19323-19323-1034-00246-00246-00000-APLKS   22
         MACRO
&LABEL   AS2EPA &PREFIX=,                                              +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2EPA
.*    TITLE: RETURN ENTRY POINT ADDRESS
.*     DATE: 2019-11-15
.*
.*     DESC: THIS MACRO WILL GENERATE CODE TO EXPAND
.*           THE CSVQUERY MACRO TO FIND THE MODULE IN
.*           STORAGE, IF FOUND IT WILL RETURN THE EPA
.*           VIA THE TRANSIENT WORK AREA (TWA).
.*           IF NOT FOUND THEN IT WILL USE THE LE SERVICE
.*           CEEPLOD TO LOAD THE MODULE AND RETURN THE EPA
.*           VIA THE TWA.
.*
.*    INPUT:
.*      module name passed via the TWA (CSV1_PGMNME)
.*
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand routine
.*                 E - expand CALL logic
.*                 L - expand TWA definitions
.*
.*    OUTPUT:
.*      R15       (0=not found, >0 then module EPA)
.*
.*  OPTIONS:
.*
.*      >>-AS2EPA-+------------------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+---+--------------+---><
.*                        +-C-+    expand code
.*                        +-E-+    expand CALL
.*                        +-L-+    expand TWA
.*
.*  REG USE:  0 - work reg
.*            1 - addr of parm list
.*           14 - return addr
.*           15 = 0 not found
.*              > 0, then module EPA
.*
.* Work data areas can be expanded using:
.*       AS1MUTSA UDS=MISC,PREFIX=...
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2EPA'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019/11/15'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.REPA030 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').REPA032
&D       SETC  '&PREFIX(1)'
.REPA032 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').REPA034
&C       SETC  '&PREFIX(2)'
.REPA034 ANOP
.REPA100 ANOP
         AIF   (T'&MF NE 'O').REPA110
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.REPA110 ANOP
         AIF   ('&MF(1)' EQ 'C').REPA800    EXPAND CODE
.*       AIF   ('&MF(1)' EQ 'D').REPA210    EXPAND TWA DSECT
         AIF   ('&MF(1)' EQ 'E').REPA600    EXPAND CALL
.*       AIF   ('&MF(1)' EQ 'G').REPA400    EXPAND TWA INIT
         AIF   ('&MF(1)' EQ 'L').REPA200    EXPAND TWA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.REPA200 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA)
         DS    0D
         AGO   .REPA220
.REPA210 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA) DSECT
&LABEL   DSECT
.REPA220 ANOP
*                             CSV input info
&D.CSV1_PGMNME DS    CL8
*                             CSV return info
&D.CSV1_VALID DS    0F
         BITDEF &D.$CSV1_OUTLENGTH,     ..validity byte-0              +
               &D.$CSV1_OUTEPA,                                        +
               &D.$CSV1_OUTEPNM,                                       +
               &D.$CSV1_OUTMJNM,                                       +
               &D.$CSV1_OUTSP,                                         +
               &D.$CSV1_OUTATTR1,                                      +
               &D.$CSV1_OUTATTR2,                                      +
               &D.$CSV1_OUTATTR3
         BITDEF &D.$CSV1_OUTLOADPT,     ..validity byte-1              +
               &D.$CSV1_OUTPDATA,                                      +
               &D.$CSV1_OUTPID,                                        +
               &D.$CSV1_OUTEPTKN,                                      +
               &D.$CSV1_OUTXLST,                                       +
               &D.$CSV1_OUTDIAG,                                       +
               &D.$CSV1_OUTRTID,                                       +
               &D.$CSV1_NULL1
         BITDEF &D.$CSV1_OUTEPA64,      ..validity byte-2              +
               &D.$CSV1_OUTLOADPT64,                                   +
               &D.$CSV1_OUTLENGTH64,                                   +
               &D.$CSV1_OUTXTLST64,                                    +
               &D.$CSV1_OUTXATTR1,                                     +
               &D.$CSV1_OUTPATHNAME,                                   +
               &D.$CSV1_OUTDSKEY
         BITDEF &D.$CSV1_NULL3          ..validity byte-3
&D.CSV1_ATTR DS    0XL3       ..load module attribute byte 0:2
&D.CSV1_ATTR0 DS    0XL1      ....load module attribute byte 0
         BITDEF &D.$CSV1_EOMDEL,                                       +
               &D.$CSV1_LOADED2GLOBAL,                                 +
               &D.$CSV1_RENT,                                          +
               &D.$CSV1_REUS,                                          +
               &D.$CSV1_NOTLOADABLEONLY,                               +
               &D.$CSV1_OVERLAY,                                       +
               &D.$CSV1_ALIAS,                                         +
               &D.$CSV1_NULL11
&D.CSV1_ATTR1 DS    0XL1      ....load module attribute byte 1
         BITDEF &D.$CSV1_AUTHLIB,                                      +
               &D.$CSV1_AUTHPGM,                                       +
               &D.$CSV1_AMODEANY,                                      +
               &D.$CSV1_AMODE31,                                       +
               &D.$CSV1_NULL12,                                        +
               &D.$CSV1_DYNLPA,                                        +
               &D.$CSV1_PAGEPROT,                                      +
               &D.$CSV1_AMODE64
&D.CSV1_ATTR2 DS    0XL1      ....load module attribute byte 2
         BITDEF &D.$CSV1_RESATL,                                       +
               &D.$CSV1_RESJPA,                                        +
               &D.$CSV1_RESPLPA,                                       +
               &D.$CSV1_RESMLPA,                                       +
               &D.$CSV1_RESFLPA,                                       +
               &D.$CSV1_RESCSA
         DS    XL1
&D.CSV1_POBJLEN DS    F       ..pgm obj length
&D.CSV1_POBJLPA DS    A       ..pgm obj load point addr
&D.CSV1_POBJEPA DS    A       ..pgm obj entry point addr
&D.CSV1_RTNCD DS    F         ..return code
         SPACE 2
         CSVQUERY PLISTVER=MAX,                                        +
               MF=(L,&D.CSVQRYWK)
         MEXIT
.REPA400 ANOP  ,    INITIALIZE TWA
         MEXIT
.REPA600 ANOP  ,    CALL RETURN EPA ROUTINE
         MNOTE *,'&MACNME - USING REG 14'
         BRAS  RE,&C.REPA0100 call EPA routine
         MEXIT
.REPA800 ANOP  ,    EXPAND EPA ROUTINE
&C.REPA0100 EQU    *     EPA ROUTINE
         MNOTE *,'&MACNME - USING REG 0,1,14,15'
         AS2RESTK PUSH
         XC    &D.CSV1_RTNCD,&D.CSV1_RTNCD   clear EPA TWA
         XC    &D.CSV1_VALID,&D.CSV1_VALID
         XC    &D.CSV1_ATTR,&D.CSV1_ATTR
         XC    &D.CSV1_POBJLEN,&D.CSV1_POBJLEN
         XC    &D.CSV1_POBJLPA,&D.CSV1_POBJLPA
         XC    &D.CSV1_POBJEPA,&D.CSV1_POBJEPA
         SPACE 1
         CSVQUERY SEARCH=JPALPA,                                       +
               INEPNAME=&D.CSV1_PGMNME,                                +
               OUTVALID=&D.CSV1_VALID,                                 +
               OUTATTR1=&D.CSV1_ATTR0,                                 +
               OUTATTR2=&D.CSV1_ATTR1,                                 +
               OUTATTR3=&D.CSV1_ATTR2,                                 +
               OUTLENGTH=&D.CSV1_POBJLEN,                              +
               OUTLOADPT=&D.CSV1_POBJLPA,                              +
               OUTEPA=&D.CSV1_POBJEPA,                                 +
               RETCODE=&D.CSV1_RTNCD,                                  +
               MF=(E,&D.CSVQRYWK)
*        RF=0  successful
*           4  module found, 1 or more fields not valid
*           8  module not found
*           12 cannot obtain the lock(s)
*           16 unexpected error
*           20 invalid request
         CHI   RF,8
         JH    &C.REPA0110    error
         B     *+4(RF)        GO TO DEPENDING ON
         J     &C.REPA0800    ..00 successful
         J     &C.REPA0800    ..04 found with errors
         J     &C.REPA0200    ..08 not found
         SPACE 1
&C.REPA0110 EQU    *
         LARL  RE,&C.REPA0800 set default return
*        INSERT RC=nnnn (VARIABLE 5)
         L     R0,&D.CSV1_RTNCD
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT REASON=nnnn (VARIABLE 6)
         LA    R0,0
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((6-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((6-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        FAILED WITH R15=nnnn REASON=nnnn
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW),ASU03B_0002
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),=H'5'
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),=H'8'
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'CSVQUERY'
         J     ERTN0800
         SPACE 1
&C.REPA0200 EQU    *     NOT FOUND, LOAD IT
         XC    &D.CSV1_RTNCD,&D.CSV1_RTNCD
         AS2PLIST (=F'8',                                              +
               &D.CSV1_PGMNME,                                         +
               &D.CSV1_POBJEPA,                                        +
               &D.CSV1_POBJLEN,                                        +
               0),VL,MF=(E,PLIST)
*        CALL  CEEPLOD
         L     RF,CEECAACELV       point to LIBVEC
         L     RF,#CEEPLOD(,RF)
         BASR  RE,RF
&C.REPA0800 EQU    *
         ICM   RF,15,&D.CSV1_POBJEPA
         AS2RESTK POP
         BR    RE
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2HH2CH 0110-19163-19318-1426-00156-00108-00000-APLKS   35
         MACRO
&LABEL   AS2HH2CH &TGTreg,&SRCreg,                                     +
               &PREFIX=,                                               +
               &MF=C
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2HH2CH
.*    TITLE: CONVERT HORIZONTAL HEX (printable) TO CHARACTER
.*     DATE: 2019-06-11
.*
.*     DESC: THIS MACRO WILL GENERATE INLINE CODE TO CONVERT
.*           HORIZONTAL HEX BACK TO CHARACTER/BINARY.
.*
.*    INPUT:
.*      SRCreg=    register pointing to source field
.*                 (horizontal hex (printable))
.*      PREFIX=(data)
.*        data     prefix to all data labels
.*      MF=        macro expansion option
.*                 C - expand routine
.*            STATIC - expand PSA definitions
.*
.*    OUTPUT:
.*      TGTreg=    even register pointing to target field
.*                 (character)
.*                 odd register contains length of source field
.*
.*    It is the programmers responsibility to ensure that the
.*    target field is half the length of the source field.
.*
.*  OPTIONS:
.*
.*      >>-AS2HH2CH-+------------------------+--->
.*
.*                >-+-TGTreg-----------------+--->
.*
.*                >-+-,SRCreg----------------+--->
.*
.*                >-+-,PREFIX=-(-+-------+-)-+--->
.*                               +--data-+
.*
.*                >-+-,MF=-+--------+---------+---><
.*                         +-C------+  expand code
.*                         +-STATIC-+  expand PSA
.*
.*  REG USE: R1: points to TR table
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2HH2CH'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019-06-11'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.XH2C010 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').XH2C012
&D       SETC  '&PREFIX(1)'
.XH2C012 ANOP
.XH2C030 ANOP
         AIF   (T'&MF NE 'O').XH2C040
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XH2C040 ANOP
         AIF   ('&MF(1)' EQ 'C').XH2C800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'STATIC').XH2C100 EXPAND PSA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.XH2C100 ANOP  ,    EXPAND PERSISTENT STORAGE AREA (PSA)
         DS    0D
&D.TRHH2CH EQU   *,14236,C'X'
         DC    X'FF'
         DC    X'AAABACADAEAF'
         DC    41X'FF'
         DC    X'A0A1A2A3A4A5A6A7A8A9'
         DC    199X'FF'
         DC    X'BABBBCBDBEBF'
         DC    41X'FF'
         DC    X'B0B1B2B3B4B5B6B7B8B9'
         DC    199X'FF'
         DC    X'CACBCCCDCECF'
         DC    41X'FF'
         DC    X'C0C1C2C3C4C5C6C7C8C9'
         DC    199X'FF'
         DC    X'DADBDCDDDEDF'
         DC    41X'FF'
         DC    X'D0D1D2D3D4D5D6D7D8D9'
         DC    199X'FF'
         DC    X'EAEBECEDEEEF'
         DC    41X'FF'
         DC    X'E0E1E2E3E4E5E6E7E8E9'
         DC    199X'FF'
         DC    X'FAFBFCFDFEFF'
         DC    41X'FF'
         DC    X'F0F1F2F3F4F5F6F7F8F9'
         DC    10695X'FF'
         DC    X'0A0B0C0D0E0F'
         DC    41X'FF'
         DC    X'00010203040506070809'
         DC    199X'FF'
         DC    X'1A1B1C1D1E1F'
         DC    41X'FF'
         DC    X'10111213141516171819'
         DC    41X'FF'
         DC    X'2A2B2C2D2E2F'
         DC    41X'FF'
         DC    X'20212223242526272829'
         DC    199X'FF'
         DC    X'3A3B3C3D3E3F'
         DC    41X'FF'
         DC    X'30313233343536373839'
         DC    199X'FF'
         DC    X'4A4B4C4D4E4F'
         DC    41X'FF'
         DC    X'40414243444546474849'
         DC    199X'FF'
         DC    X'5A5B5C5D5E5F'
         DC    41X'FF'
         DC    X'50515253545556575859'
         DC    199X'FF'
         DC    X'6A6B6C6D6E6F'
         DC    41X'FF'
         DC    X'60616263646566676869'
         DC    199X'FF'
         DC    X'7A7B7C7D7E7F'
         DC    41X'FF'
         DC    X'70717273747576777879'
         DC    199X'FF'
         DC    X'8A8B8C8D8E8F'
         DC    41X'FF'
         DC    X'80818283848586878889'
         DC    199X'FF'
         DC    X'9A9B9C9D9E9F'
         DC    41X'FF'
         DC    X'90919293949596979899'
         MEXIT
.XH2C800 ANOP  ,    EXPAND CONVERT HORIZONTAL HEX TO CHARACTER
         MNOTE *,'&MACNME - USING REG 1,&TGTreg,&TGTreg.+1,&SRCreg'
&LABEL   LAY   1,&D.TRHH2CH-49600
*-4      EQU   *
         TRTO  &TGTreg,&SRCreg,1
         JO    *-4            loop back to continue
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2HX2BI 0104-19164-19318-1427-00095-00076-00000-APLKS   17
         MACRO
&LABEL   AS2HX2BI &TGTlbl,&SRClbl,&SRClen,                             +
               &PREFIX=,                                               +
               &MF=C
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2HX2BI
.*    TITLE: CONVERT HORIZONTAL HEX (printable) TO BINARY
.*     DATE: 2019-06-13
.*
.*     DESC: THIS MACRO WILL GENERATE INLINE CODE TO CONVERT
.*           HORIZONTAL HEX (printable) TO BINARY.
.*
.*    INPUT:
.*      SRClbl     label of source field (horizontal hex)
.*      SRClen     source field length (absolute value <= 8)
.*      PREFIX=(data)
.*        data     prefix to all data labels
.*      MF=        macro expansion option
.*                 C - expand routine
.*
.*    OUTPUT:
.*      TGTlbl     label of target field (character/binary)
.*
.*    It is the programmers responsibility to ensure that the
.*    source field is twice the length of the target field.
.*
.*  OPTIONS:
.*
.*      >>-AS2HX2BI-+------------------------+--->
.*
.*                >-+-TGTlbl-----------------+--->
.*
.*                >-+-,SRClbl----------------+--->
.*
.*                >-+-,SRClen----------------+--->
.*
.*                >-+-,PREFIX=-(-+-------+-)-+--->
.*                               +--data-+
.*
.*                >-+-,MF=-+------+----------+---><
.*                         +-C----+  expand code
.*
.* Work data areas can be expanded using:
.*       AS1MUTSA UDS=MISC,PREFIX=...
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2HX2BI'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019-06-13'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.XH2B010 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').XH2B012
&D       SETC  '&PREFIX(1)'
.XH2B012 ANOP
.XH2B030 ANOP
         AIF   (T'&MF NE 'O').XH2B040
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XH2B040 ANOP
         AIF   ('&MF(1)' EQ 'C').XH2B800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'STATIC').XH2B100     EXPAND PSA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.XH2B100 ANOP  ,    EXPAND PERSISTENT STORAGE AREA (PSA)
         DS    0D
&D.TRHX2BI EQU   *,63,C'X'
         DC    X'0A0B0C0D0E0F',9X'00'             C1-CF
         DC    16X'00'                            D0-DF
         DC    16X'00'                            E0-EF
         DC    X'00010203040506070809',6X'00'     F0-FF
         MEXIT
.XH2B800 ANOP  ,    EXPAND CONVERT HORIZONTAL HEX TO BINARY
&LABEL   XC    ZD02,ZD02
         MVC   ZD02+8-&SRClen.(&SRClen),&SRClbl
         TR    ZD02(8),&D.TRHX2BI-C'A'
         PACK  PD02(5),ZD02(9)
         MVC   &TGTlbl.(4),PD02
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2LACSV 0105-16299-18353-1048-00258-00257-00000-APLKS   23
         MACRO
&LABEL   AS2LACSV &COUNT=,                                             +
               &SOURCE=,                                               +
               &SRCPTR=,                                               +
               &VECTOR=,                                               +
               &TARGET=,                                               +
               &TGTPTR=,                                               +
               &TGTLEN=,                                               +
               &GAPSZ=,                                                +
               &COPY=,                                                 +
               &REMOVE=,                                               +
               &WRKFLD=FW11
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2LACSV
.*    TITLE: COPY ITEMS IN WORD VECTOR TO RESULT FIELD
.*     DATE: 03/01/2007
.*
.*     DESC: THIS MACRO IS USED TO COPY WORDS FROM A
.*           SOURCE FIELD TO A RESULT FIELD VIA A WORD
.*           VECTOR CREATED BY ASUDSCNT.
.*
.*  OPTIONS:
.*
.*     >>-AS2LACSV-+-COUNT=-+-LABEL FWD-+------------------>
.*
.*      >-+-SOURCE=-+-LABEL-----+-VECTOR=-+-LABEL-+-------->
.*        +-SRCPTR=-+-LABEL FWD-+
.*
.*      >-+-TARGET=-+-LABEL-----+--+-TGTLEN=-+-LABEL HWD-+->
.*        +-TGTPTR=-+-LABEL FWD-+
.*
.*      >-+-------------------+---------------------------->
.*        +-GAPSZ=+-LABEL FWD-+
.*
.*      >-+--------------------------------+--------------->
.*        +---COPY=(-+-LABEL FWD,LABEL FWD-+-)
.*                   +-START----,COUNT-----+ )
.*        +-REMOVE=(-+-LABEL FWD,LABEL FWD-+-)
.*                   +-START----,COUNT-----+ )
.*
.*      >-+-WRKFLD=-+-LABEL FWD-+--------------------------><
.*
.*
.*  REG USE: R0: VECTOR LOOP CONTROL
.*           R1: NBR OF WORDS TO COPY/REMOVE
.*           R2: LEXEME LENGTH
.*           R3: INDEX TO VECTOR
.*           R4: POINTER TO SOURCE FIELD
.*           R5: POINTER TO RESULT FIELD
.*
.*  FIELDS USED:
.*           HLD1_CRSR: LEXEME CURSOR ADDR
.*           HLD2_CRSR: LEXEME LAST BYTE CURSOR ADDR
.*           HLD3_CRSR: TARGET LAST BYTE ADDR
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &LGAPSZ
         LCLB  &NOCOPY,&NOREMOV
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2LACSV'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2007-03-01'
.* --------------------------------------------------------- *
.* VERIFY REQUIRED FIELDS ARE PRESENT
.* --------------------------------------------------------- *
.CSV0100 ANOP
         AIF   (T'&COUNT EQ 'O').ERR0010
         AIF   (T'&COUNT NE 'F').ERR0020
         AIF   (T'&SOURCE EQ 'O' AND T'&SRCPTR EQ 'O').ERR0030
         AIF   (T'&SRCPTR EQ 'O').CSV0110
         AIF   (T'&SRCPTR NE 'A' AND T'&SRCPTR NE 'F').ERR0032
.CSV0110 ANOP
         AIF   (T'&VECTOR EQ 'O').ERR0040
         AIF   (T'&TARGET EQ 'O' AND T'&TGTPTR EQ 'O').ERR0050
         AIF   (T'&TGTPTR EQ 'O').CSV0120
         AIF   (T'&TGTPTR NE 'A' AND T'&TGTPTR NE 'F').ERR0052
.CSV0120 ANOP
         AIF   (T'&TGTLEN EQ 'O').ERR0060
         AIF   (L'&TGTLEN NE 2).ERR0062
         AIF   (T'&GAPSZ EQ 'O').CSV0130
&LGAPSZ  SETC  '&GAPSZ'
         AIF   (T'&GAPSZ EQ 'F').CSV0140
         MNOTE 08,'&MACNME - GAPSZ=&GAPSZ LABEL MUST REFER TO A DATA TY+
               PE OF FULL WORD BINARY, STATEMENT SUBSTITUTED'
.CSV0130 ANOP
&LGAPSZ  SETC  '=F''1'''
.CSV0140 ANOP
         AIF   (T'&COPY NE 'O' AND T'&REMOVE NE 'O').ERR0070
         AIF   (T'&COPY NE 'O').CSV0150
&NOCOPY  SETB  1
         AGO   .CSV0180
.CSV0150 ANOP
         AIF   (N'&COPY NE 2).ERR0072
         AIF   (T'&COPY(1) EQ 'F').CSV0160
         MNOTE 08,'&MACNME - COPY=&COPY(1) LABEL MUST REFER TO A DATA T+
               YPE OF FULL WORD BINARY, STATEMENT DISCARDED'
&NOCOPY  SETB  1
.CSV0160 ANOP
         AIF   (T'&COPY(2) EQ 'F').CSV0170
         MNOTE 08,'&MACNME - COPY=&COPY(2) LABEL MUST REFER TO A DATA T+
               YPE OF FULL WORD BINARY, STATEMENT DISCARDED'
&NOCOPY  SETB  1
.CSV0170 ANOP
         AGO   .CSV0300
.CSV0180 ANOP
         AIF   (T'&REMOVE NE 'O').CSV0190
&NOREMOV SETB  1
         AGO   .CSV0300
.CSV0190 ANOP
         AIF   (N'&REMOVE NE 2).ERR0074
         AIF   (T'&REMOVE(1) EQ 'F').CSV0200
         MNOTE 08,'&MACNME - REMOVE=&REMOVE(1) LABEL MUST REFER TO A DA+
               TA TYPE OF FULL WORD BINARY, STATEMENT DISCARDED'
&NOREMOV SETB  1
.CSV0200 ANOP
         AIF   (T'&REMOVE(2) EQ 'F').CSV0210
         MNOTE 08,'&MACNME - REMOVE=&REMOVE(2) LABEL MUST REFER TO A DA+
               TA TYPE OF FULL WORD BINARY, STATEMENT SUBSTITUTED'
&NOREMOV SETB  1
.CSV0210 ANOP
.CSV0300 ANOP
         AIF   (T'&WRKFLD EQ 'O').ERR0080
         AIF   (T'&WRKFLD NE 'F').ERR0084
.CSV0900 ANOP
.* --------------------------------------------------------- *
.* MACRO EXPANSION
.* --------------------------------------------------------- *
.CSV1000 ANOP
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         MNOTE *,'&MACNME - USING REG 0,1,2,3,4,5'
         ICM   R0,12,&TGTLEN
         SRL   R0,16
         AIF   (T'TARGET EQ 'O').CSV1010
         LA    R5,&TARGET
         AGO   .CSV1020
.CSV1010 ANOP
         L     R5,&TGTPTR
.CSV1020 ANOP
         ST    R5,HLD1_CRSR
         AR    R0,R5
         ST    R0,HLD3_CRSR
         XR    R0,R0          INIT VECTOR LOOP CONTROL
         AIF   (&NOCOPY).CSV1090
         L     R1,&COPY(1)
         A     R1,&COPY(2)
         AHI   R1,-1
         ST    R1,&WRKFLD
.CSV1090 ANOP
CSV1&SYSNDX EQU   *
         AHI   R0,1           BUMP TO NEXT WORD IN VECTOR
         C     R0,&COUNT      Q. PAST LAST VECTOR WORD
         JH    CSV9&SYSNDX    A. YES
         AIF   (&NOCOPY).CSV1100
         C     R0,&COPY(1)    Q. LESS THAN START
         JL    CSV1&SYSNDX    A. YES
         C     R0,&WRKFLD     Q. GREATER THAN START + COUNT
         JH    CSV9&SYSNDX    A. YES
         AGO   .CSV1200
.CSV1100 ANOP
         AIF   (&NOREMOV).CSV1200
         C     R0,&REMOVE(1)  Q. DROP THIS WORD FROM MOVE
         JNE   CSV2&SYSNDX    A. NO
         CLC   &REMOVE(2),=F'1'    Q. REMOVE COUNT = 1
         JNH   CSV1&SYSNDX    A. YES
         L     R1,&REMOVE(2)
         AHI   R1,-1
         AR    R0,R1
         J     CSV1&SYSNDX
.CSV1200 ANOP
CSV2&SYSNDX EQU   *
         LR    R3,R0
         AHI   R3,-1
         SLL   R3,2
         LH    R1,&VECTOR.(R3)     PICKUP SOURCE LEXEME OFFSET
         LH    R2,&VECTOR+2(R3)    PICKUP SOURCE LEXEME LENGTH
         LR    R4,R2
         AR    R4,R5
         C     R4,HLD3_CRSR   Q. TARGET OVERFLOW
         JH    TXT0117Q       A. YES
         AHI   R2,-1
         AIF   (T'&SOURCE EQ 'O').CSV1050
         LA    R4,&SOURCE          PICKUP SOURCE START ADDR
         AGO   .CSV1060
.CSV1050 ANOP
         L     R4,&SRCPTR          PICKUP SOURCE START ADDR
.CSV1060 ANOP
         AR    R4,R1
         EX    R2,CSVI&SYSNDX
*        MVC   0(0,R5),0(R4)  COPY SOURCE TO RESULT
         AR    R5,R2          POINT TO NEXT AVAIL SPACE IN RESULT
         ST    R5,HLD2_CRSR
         AHI   R5,1
         A     R5,&LGAPSZ
         J     CSV1&SYSNDX
CSVI&SYSNDX MVC   0(0,R5),0(R4)    COPY SOURCE TO RESULT
CSV9&SYSNDX EQU   *
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'&MACNME - PARAMETER COUNT HAS NOT BEEN ENTERED'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'&MACNME - COUNT=&COUNT LABEL MUST REFER TO A DATA TY+
               PE OF FULL WORD BINARY'
         MEXIT
.ERR0030 ANOP
         MNOTE 12,'&MACNME - PARAMETER SOURCE/SRCPTR HAS NOT BEEN ENTER+
               ED OR BOTH HAVE BEEN ENTERED'
         MEXIT
.ERR0032 ANOP
         MNOTE 12,'&MACNME - PARAMETER SRCPTR=&SRCPTR LABEL MUST REFER +
               TO A DATA TYPE OF ADDRESS OR A FULL WORD BINARY'
         MEXIT
.ERR0040 ANOP
         MNOTE 12,'&MACNME - PARAMETER VECTOR HAS NOT BEEN ENTERED'
         MEXIT
.ERR0050 ANOP
         MNOTE 12,'&MACNME - PARAMETER TARGET/TGTPTR HAS NOT BEEN ENTER+
               ED OR BOTH HAVE BEEN ENTERED'
         MEXIT
.ERR0052 ANOP
         MNOTE 12,'&MACNME - PARAMETER TGTPTR=&TGTPTR LABEL MUST REFER +
               TO A DATA TYPE OF ADDRESS OR A FULL WORD BINARY'
         MEXIT
.ERR0060 ANOP
         MNOTE 12,'&MACNME - PARAMETER TGTLEN HAS NOT BEEN ENTERED'
         MEXIT
.ERR0062 ANOP
         MNOTE 12,'&MACNME - PARAMETER TGTLEN=&TGTLEN LABEL MUST REFER +
               TO A TWO BYTE BINARY FIELD'
         MEXIT
.ERR0070 ANOP
         MNOTE 12,'&MACNME - PARAMETERS COPY AND REMOVE ARE MUTUALLY EX+
               CLUSIVE'
         MEXIT
.ERR0072 ANOP
         MNOTE 12,'&MACNME - PARAMETER COPY REQUIRES 2 SUB-PARAMETERS (+
               START,COUNT) TO BE ENTERED'
         MEXIT
.ERR0074 ANOP
         MNOTE 12,'&MACNME - PARAMETER REMOVE REQUIRES 2 SUB-PARAMETERS+
                (START,COUNT) TO BE ENTERED'
         MEXIT
.ERR0080 ANOP
         MNOTE 12,'&MACNME - PARAMETER WRKFLD HAS NOT BEEN ENTERED'
         MEXIT
.ERR0084 ANOP
         MNOTE 12,'&MACNME - WRKFLD=&WRKFLD LABEL MUST REFER TO A DATA +
               TYPE OF FULL WORD BINARY'
         MEND
./ ADD NAME=AS2LA005 0125-18129-19318-1428-00207-00179-00000-APLKS   25
         MACRO
&LABEL   AS2LA005 &DELIM=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2LA005
.*    TITLE: LEXICAL ANALYSIS ROUTINE 05
.*     DATE: 2018-05-08
.*
.*     DESC: THIS MACRO IS USED TO BYPASS BLANKS, USER
.*           DEFINED DELIMITERS, COMMENTS, ETC.
.*
.*  OPTIONS:
.*
.*     >>-AS2LA005----------------------->
.*
.*      >-+-DELIM=-+-LABEL TRT TABLE-+---><
.*
.*
.*  REG USE: R5: BRXLE INDEX REGISTER (SOURCE POINTER)
.*           R6: BRXLE INCREMENT REGISTER
.*           R7: BRXLE COMPARAND REGISTER
.*           RF: INDEX TO BRANCH TABLE
.*
.*  FIELDS USED: (EXTERNAL)
.*
.*  PWA_LOOPCNTL (3FWD)  - SAVE AREA FOR LOOP CONTROL
.*  PWA_SRCPTR (FWD)     - SAVE AREA FOR INPUT/SOURCE ADDR
.*  PWA_PSTATE (FWD)     - PROCESSING STATE
.*  PWA_TSTATE (FWD)     - TERMINATION STATE
.*  PWA_FLAG    (HEX)    - BIT FLAGS
.*    X'80' - $SIGN_ON NEGATIVE SIGN ACTIVE
.*    X'40' - $COMMA_ON COMMA ACTIVE
.*    X'20' - $DECIMAL_ON DECIMAL ACTIVE
.*    X'10' - $SIGDIG_ON SIGNIFICANT DIGIT ACTIVE
.*    X'08' - $PWR_SIGN_ON
.*    X'01' - $EOD_ON END OF DATA ACTIVE
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLA  &MAX,&MAX1,&MAX2
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2LA005'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-05-16'
&MAX     SETA  2              MAXIMUM PROCESS STATE VALUE
&MAX1    SETA  &MAX+1         SYNTAX ERROR
&MAX2    SETA  &MAX+2         FAILURE ERROR
.* --------------------------------------------------------- *
.* VERIFY REQUIRED FIELDS ARE PRESENT
.* --------------------------------------------------------- *
.WSP0120 ANOP
         AIF   (T'&DELIM EQ 'O').ERR0005
.WSP0900 ANOP
.* --------------------------------------------------------- *
.* MACRO EXPANSION
.* --------------------------------------------------------- *
.WSP1000 ANOP
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         SPACE 2
         MNOTE *,'&MACNME - USING REG 5,6,7,14,15'
* ---------------------------------------------------------- *
* BYPASS ALL SPACES, DELIMITERS, AND COMMENTS
* ---------------------------------------------------------- *
         SPACE 1
TWSP0000 EQU   *
         AS2RESTK PUSH
         XC    PWA_PSTATE,PWA_PSTATE
         XC    PWA_FLAG,PWA_FLAG
         ST    R5,PWA_SRCPTR
         SPACE 1
TWSP0100 EQU   *         LOOP
*        R5 - INDEX REGISTER
*        R6 - INCREMENT REGISTER
*        R7 - COMPARAND
         STM   R5,R7,PWA_LOOPCNTL
         L     RF,PWA_PSTATE  LOAD PROCESSING STATE
         CHI   RF,&MAX2       Q. EXCEEDE LIMIT
         JH    TWSP0410       A. YES
         SLL   RF,2
         B     *+4(RF)
         J     PSTWSP00       STATE 00 - DETERMINE DELIM
         J     PSTWSP01       STATE 01 - DETERMINE COMMENT
         J     PSTWSP02       STATE 02 - PAST WHITE SPACE
         J     TWSP0400       STATE SYNTAX
         J     TWSP0500       STATE FAIL
TWSP0200 EQU   *         BUMP
         LM    R5,R7,PWA_LOOPCNTL
         BRXLE R5,R6,TWSP0100
*        NO MORE DATA
         OI    PWA_FLAG,$EOD_ON
         J     TWSPEXIT
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE SYNTAX ERROR
* ---------------------------------------------------------- *
         SPACE 1
TWSP0400 EQU   *
         LA    RF,0
         J     TWSPEXIT
         SPACE 1
TWSP0410 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),=H'5'
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),=H'8'
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2LA005'
*        INSERT NUMBER VALUE (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),=H'3'
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
*        MSG0109E BRANCH INDEX (NNN) IS INVALID
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03D_0002
         J     ERTN0800
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE FAIL
* ---------------------------------------------------------- *
         SPACE 1
TWSP0500 EQU   *
         L     R5,PWA_SRCPTR  RESTORE
         LA    RF,20          TOKEN NOT EXTRACTED
         J     TWSPEXIT
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 00  (CHECK FOR DELIMITER & BEGIN OF COMMENT)
* ---------------------------------------------------------- *
         SPACE 1
PSTWSP00 EQU   *
         CLI   0(R5),C'/'     Q. POSSIBLE COMMENT
         JE    PSTWSP00B      A. MAYBE
PSTWSP00A EQU   *
*        NOT A COMMENT
         TRT   0(1,R5),&DELIM Q. DELIMITER
         JH    PSTWSP00C      A. YES
*                             A. NO, SET TERMINATION STATE
         LA    RF,$STATE2     SET STATE TO 02
         ST    RF,PWA_PSTATE
         J     TWSP0100       LOOP
PSTWSP00B EQU   *
*        COMMENT
         CLI   1(R5),C'*'     Q. COMMENT
         JNE   PSTWSP00A      A. NO, CONTINUE
*                             A. YES, FLUSH COMMENT
         LA    RF,$STATE1     SET STATE TO 01
         ST    RF,PWA_PSTATE
         AHI   R5,1
         ST    R5,PWA_LOOPCNTL
         J     TWSP0200       BUMP
PSTWSP00C EQU   *
*        DELIMITER / WHITE SPACE
         LA    RF,$STATE0     SET STATE TO 00
         ST    RF,PWA_PSTATE
         J     TWSP0200       BUMP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 01  (CHECK FOR END OF COMMENT)
* ---------------------------------------------------------- *
         SPACE 1
PSTWSP01 EQU   *
         CLI   0(R5),C'*'     Q. POSSIBLE END OF COMMENT
         JE    PSTWSP01A      A. MAYBE
*                             A. NO
         J     TWSP0200       BUMP
PSTWSP01A EQU  *
*        END OF COMMENT
         CLI   1(R5),C'/'     Q. END OF COMMENT
         JNE   TWSP0200       A. NO, BUMP
*                             A. YES, CHECK FOR MORE WHITE SPACE
         AHI   R5,1
         ST    R5,PWA_LOOPCNTL
         LA    RF,$STATE0     SET STATE TO 00
         ST    RF,PWA_PSTATE
         J     TWSP0200       BUMP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 02 (PAST WHITE SPACE)
* ---------------------------------------------------------- *
         SPACE 1
PSTWSP02 EQU   *
         LA    RF,0
         J     TWSPEXIT
         SPACE 2
* ---------------------------------------------------------- *
* MACRO EXIT
* ---------------------------------------------------------- *
         SPACE 1
TWSPEXIT EQU   *
         AS2RESTK POP
         LTR   RF,RF
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0005 ANOP
         MNOTE 12,'&MACNME - PARAMETER DELIM IS REQUIRED'
         MEND
./ ADD NAME=AS2LA022 0146-18130-19318-1429-00953-00707-00000-APLKS   53
         MACRO
&LABEL   AS2LA022 &DECSEP=,        DECIMAL SEPARATOR                   +
               &DIGIT=,            DIGIT TRT VECTOR LABEL              +
               &TERMSEP=,          FLD TERMINATION TRT VECTOR LABEL    +
               &THSSEP=,           THOUSANDS SEPARATOR                 +
               &RSLTPTR=           RESULT POINTER
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2LA022
.*    TITLE: LEXICAL ANALYSIS ROUTINE 22
.*     DATE: 2018-04-12
.*
.*     DESC: THIS MACRO IS USED TO DE-EDIT NUMERIC DATA
.*           REMOVE LEADING NEGATIVE SIGN(S)
.*           REMOVE THOUSANDS SEPARATOR(S)
.*           REMOVE DECIMAL SEPARATOR
.*           "Z1" INTEGER
.*           "R1" REAL
.*           "F1" FLOATING POINT
.*
.*  OPTIONS:
.*
.*     >>-AS2LA022----------------------->
.*
.*      >-+-DECSEP=-+-LABEL CHR-+-------->
.*
.*      >-+-DIGIT=-+-LABEL TRT TABLE-+--->
.*
.*      >-+-TERMSEP=-+-LABEL TRT TABLE-+->
.*
.*      >-+-THSSEP=-+-LABEL CHR-+-------->
.*
.*      >-+-RSLTPTR=-+-LABEL ADDR-+------>
.*
.*  REG USE: R5: BRXLE INDEX REGISTER (SOURCE POINTER)
.*           R6: BRXLE INCREMENT REGISTER
.*           R7: BRXLE COMPARAND REGISTER
.*           RF: INDEX TO BRANCH TABLE
.*
.*  FIELDS USED: (EXTERNAL)
.*
.*  PWA_LOOPCNTL (3FWD)  - SAVE AREA FOR LOOP CONTROL
.*  PWA_SRCptr (FWD)     - SAVE AREA FOR INPUT/SOURCE ADDR
.*  PWA_PSTATE (FWD)     - PROCESSING STATE
.*  PWA_TSTATE (FWD)     - TERMINATION STATE
.*  PWA_FIELD1len (HWD)  - LENGTH OF FIELD 1
.*  PWA_FIELD1 (STRING)  - FIELD 1
.*  PWA_FIELD2len (HWD)  - LENGTH OF FIELD 2
.*  PWA_FIELD2 (STRING)  - FIELD 2
.*  PWA_FLAG (HEX)       - BIT FLAGS
.*    X'80' - $SIGN_ON NEGATIVE SIGN ACTIVE
.*    X'40' - $COMMA_ON COMMA ACTIVE
.*    X'20' - $DECIMAL_ON DECIMAL ACTIVE
.*    X'10' - $SIGDIG_ON SIGNIFICANT DIGIT ACTIVE
.*    X'08' - $PWR_SIGN_ON
.*    X'01' - $EOD_ON END OF DATA ACTIVE
.*  PWA_#OF_DIGIT   (PD) - TOTAL NUMBER OF DIGITS (PRECISION)
.*  PWA_#OF_SCALE   (PD) - NBR OF DIGITS TO THE RIGHT OF DECIMAL
.*  PWA_#OF_PWR     (PD) - NBR OF DIGITS IN PWR
.*  PWA_REOCCUR_CHR_CNT (PD) - NBR OF DIGITS BETWEEN COMMAS
.*  PWA_MULT (PD)        - USED WHEN PROCESSING K,M,G TRAILING CHR
.*
.*   RESULT:
.*
.*               SIZE  LEN
.*           +--+--+--+--+--+
.*           |4 |   50|     |
.*           +--+--+--+--+--+
.*
.*    TOKEN:
.*           +--+--+--+--+  +--+--+--+--+--+--+------------...---+
.*           |  |  |     |  |     |     |     |            |
.*           +--+--+--+--+  +--+--+--+--+--+--+------------...---+
.*           |  |  |        |     |     |     |
.*           |  |  |        |     |     |     |>DATA (1:35)
.*           |  |  |        |     |     |     |>EXP DATA (0:5)
.*           |  |  |        |     |     |     |>DATA (1:31)
.*           |  |  |        |     |     |
.*           |  |  |        |     |     |>EXPONENT COUNT (0:5)
.*           |  |  |        |     |
.*           |  |  |        |     |>SCALE COUNT (0:35)
.*           |  |  |        |
.*           |  |  |        |>DIGIT COUNT (1:35)
.*           |  |  |
.*           |  |  |>LENGTH OF TOKEN DATA (6:46)
.*           |  |
.*           |  |>TOKEN SUB-TYPE 0...9
.*           |
.*           |>TOKEN TYPE F,R,Z
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLA  &MAX,&MAX1,&MAX2
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2LA022'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-05-16'
&MAX     SETA  12             MAXIMUM PROCESS STATE VALUE
&MAX1    SETA  &MAX+1         SYNTAX ERROR
&MAX2    SETA  &MAX+2         FAILURE ERROR
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.* --------------------------------------------------------- *
.* VERIFY REQUIRED FIELDS ARE PRESENT
.* --------------------------------------------------------- *
.ENBR100 ANOP
         AIF   (T'&DECSEP EQ 'O').ERR0001
         AIF   (T'&DIGIT EQ 'O').ERR0002
         AIF   (T'&TERMSEP EQ 'O').ERR0003
         AIF   (T'&THSSEP EQ 'O').ERR0004
         AIF   (T'&RSLTPTR EQ 'O').ERR0005
         AIF   (T'&RSLTPTR NE 'A' AND T'&RSLTPTR NE 'F').ERR0005
         SPACE 2
         MNOTE *,'&MACNME - USING REG 0,1,2,3,5,6,7,14,15'
* ---------------------------------------------------------- *
* DE-EDIT NUMBERS
* ---------------------------------------------------------- *
DNBR0000 EQU   *
         AS2RESTK PUSH
         XC    PWA_PSTATE,PWA_PSTATE
         XC    PWA_TSTATE,PWA_TSTATE
         XC    PWA_FLAG,PWA_FLAG
         XC    PWA_FIELD1len,PWA_FIELD1len
         MVI   PWA_FIELD1,C'0'
         MVC   PWA_FIELD1+1(L'PWA_FIELD1-1),PWA_FIELD1
         XC    PWA_FIELD2len,PWA_FIELD2len
         XC    PWA_FIELD2,PWA_FIELD2
         ST    R5,PWA_SRCptr
         ZAP   PWA_#OF_DIGIT,=P'0'
         ZAP   PWA_#OF_SCALE,=P'0'
         ZAP   PWA_#OF_PWR,=P'0'
         ZAP   PWA_REOCCUR_CHR_CNT,=P'0'
         ZAP   PWA_MULT,=P'0'
         SPACE 1
DNBR0100 EQU   *         LOOP
*        R5 - INDEX REGISTER
*        R6 - INCREMENT REGISTER
*        R7 - COMPARAND
         STM   R5,R7,PWA_LOOPCNTL
         L     RF,PWA_PSTATE  LOAD PROCESSING STATE
         CHI   RF,&MAX2       Q. EXCEEDE LIMIT
         JH    DNBR0410       A. YES
         SLL   RF,2
         B     *+4(RF)
         J     PSDNBR00       STATE 00 - DETERMINE (-)
         J     PSDNBR01       STATE 01 - ELIMINATE (-)
         J     PSDNBR02       STATE 02 - ELIMINATE (-,COMMA)
         J     PSDNBR03       STATE 03 - DETERMINE (DIGIT)
         J     PSDNBR04       STATE 04 - Z integer
         J     PSDNBR05       STATE 05 - DETERMINE (TRAILING MULT)
         J     PSDNBR06       STATE 06 - ELIMINATE (COMMA)
         J     PSDNBR07       STATE 07 - DETERMINE (DECIMAL)
         J     PSDNBR08       STATE 08 - DETERMINE (DIGIT|E|term)
         J     PSDNBR09       STATE 09 - R real
         J     PSDNBR10       STATE 10 - DETERMINE (+|-)
         J     PSDNBR11       STATE 11 - DETERMINE (DIGIT|term)
         J     PSDNBR12       STATE 12 - F floating point
         J     DNBR0400       STATE SYNTAX ERROR
         J     DNBR0500       STATE FAIL
DNBR0200 EQU   *         BUMP
         LM    R5,R7,PWA_LOOPCNTL
         BRXLE R5,R6,DNBR0100
*        NO MORE DATA
         OI    PWA_FLAG,$EOD_ON
         OC    PWA_TSTATE,PWA_TSTATE    Q. TERM STATE 00
         JZ    DNBR0210                 A. YES, BYPASS
         MVC   PWA_PSTATE,PWA_TSTATE    A. NO, ONE MORE LOOP
         J     DNBR0100       LOOP
DNBR0210 EQU   *
         LA    RF,0
         J     DNBREXIT
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE SYNTAX ERROR
* ---------------------------------------------------------- *
         SPACE 1
DNBR0400 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),=H'5'
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),=H'8'
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2LA005'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PWA_SRCPTR
         SR    R0,R5
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),=H'3'
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
*        INSERT TEXT STRING (VARIABLE 7)
         L     R0,HLD1_STOP
         SR    R0,R5
         LR    R1,R0
         AHI   R0,1
         ST    R0,FW12
         MVC   ISILEN+((7-1)*L'ISICOL)(2),HW14
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(16),0(R5)
*+4+6    EQU   *
         EX    R1,*-6
*        MSG0121E SYNTAX ERROR POS=
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03P_0002
         J     ERTN0800
         SPACE 1
DNBR0410 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),=H'5'
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'MACRO'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),=H'8'
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS2LA022'
*        INSERT NUMBER VALUE (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),=H'3'
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
*        MSG0109E BRANCH INDEX (NNN) IS INVALID
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03D_0002
         J     ERTN0800
         SPACE 1
DNBR0420 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),=H'5'
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),=H'11'
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'>=50'
*        MSG0115E NUMERIC DATA IS OUT OF RANGE
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
         J     ERTN0800
         SPACE 1
DNBR0430 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),=H'5'
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),=H'13'
         MVC   ISITXT+((3-1)*L'ISICOL)(13),=CL13'PWA_FIELD1len'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'1:31'
*        MSG0115E NUMERIC DATA IS OUT OF RANGE
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
         J     ERTN0800
         SPACE 1
DNBR0440 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),=H'5'
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),=H'13'
         MVC   ISITXT+((3-1)*L'ISICOL)(13),=CL13'PWA_FIELD1len'
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),=H'4'
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'1:35'
*        MSG0115E NUMERIC DATA IS OUT OF RANGE
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
         J     ERTN0800
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE FAIL
* ---------------------------------------------------------- *
         SPACE 1
DNBR0500 EQU   *
         L     R5,PWA_SRCptr  RESTORE
         LA    RF,20          TOKEN NOT EXTRACTED
         J     DNBREXIT
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 00  (CHECK FOR MINUS, DIGIT)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR00 EQU   *
         CLI   0(R5),C'-'     Q. MINUS CHAR
         JE    PSDNBR00A      A. YES
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR00B      A. YES
         LA    RF,$STATE&MAX2 SET STATE TO FAIL
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR00A EQU   *
*        MINUS SIGN
         OI    PWA_FLAG,$SIGN_ON   SET MINUS SIGN ACTIVE
         LA    RF,$STATE1
         ST    RF,PWA_PSTATE
         J     DNBR0200       BUMP
PSDNBR00B EQU   *
*        DIGIT
         J     PSDNBR03
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 01 (CHECK FOR MINUS, COMMA, DIGIT)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR01 EQU   *
         CLI   0(R5),C'-'     Q. MINUS SIGN
         JE    PSDNBR01A      A. YES
         CLC   0(1,R5),&THSSEP     Q. COMMA
         JE    PSDNBR01B           A. YES
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR01C      A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR01A EQU   *
*        MINUS SIGN
         LA    RF,$STATE1     SET STATE TO 01
         ST    RF,PWA_PSTATE
         TM    PWA_FLAG,$COMMA_ON  Q. COMMA ON
         JNO   DNBR0200            A. NO, BUMP
         AP    PWA_REOCCUR_CHR_CNT,=P'1'
         CP    PWA_REOCCUR_CHR_CNT,=P'3'
         JNH   DNBR0200       BUMP
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR01B EQU   *
*        COMMA
         LA    RF,$STATE2     SET STATE TO 02
         ST    RF,PWA_PSTATE
         OI    PWA_FLAG,$COMMA_ON
         ZAP   PWA_REOCCUR_CHR_CNT,=P'0'
         J     DNBR0200       BUMP
PSDNBR01C EQU   *
*        DIGIT
         J     PSDNBR03
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 02 (CHECK FOR MINUS, DIGIT)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR02 EQU   *
         CLI   0(R5),C'-'     Q. MINUS SIGN
         JE    PSDNBR02A      A. YES
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR02B      A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR02A EQU   *
*        MINUS SIGN
         LA    RF,$STATE1     SET STATE TO 01
         ST    RF,PWA_PSTATE
         J     DNBR0200       BUMP
PSDNBR02B EQU   *
*        DIGIT
         J     PSDNBR03
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 03 (CHECK FOR DIGIT, COMMA, TERMINATOR,
*                   K|M|G, DECIMAL)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR03 EQU   *
         TM    PWA_FLAG,$SIGDIG_ON Q. SIGNIFICANT DIGIT ON
         JO    PSDNBR03A           A. YES, BYPASS
         CLI   0(R5),C'0'     Q. LEADING ZERO
         JE    PSDNBR03B      A. YES
PSDNBR03A EQU   *
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR03C      A. YES
         CLC   0(1,R5),&THSSEP     Q. COMMA CHAR
         JE    PSDNBR03D           A. YES
         TRT   0(1,R5),&TERMSEP    Q. TERMINATION CHAR
         JH    PSDNBR03E           A. YES
         CLI   0(R5),C'K'     Q. MULTI BY 1000
         JE    PSDNBR03F      A. YES
         CLI   0(R5),C'M'     Q. MULTI BY 1000000
         JE    PSDNBR03G      A. YES
         CLI   0(R5),C'G'     Q. MULTI BY 1000000000
         JE    PSDNBR03H      A. YES
         CLC   0(1,R5),&DECSEP     Q. DECIMAL
         JE    PSDNBR03I           A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR03B EQU   *
*        LEADING ZERO DIGIT
         LA    RF,$STATE3     SET STATE TO 03
         ST    RF,PWA_PSTATE
         J     DNBR0200       BUMP
PSDNBR03C EQU   *
*        DIGIT
         LA    RF,$STATE3     SET STATE TO 03
         ST    RF,PWA_PSTATE
         OI    PWA_FLAG,$SIGDIG_ON
         AP    PWA_#OF_DIGIT,=P'1'
         TM    PWA_FLAG,$COMMA_ON  Q. COMMA ON
         JNO   PSDNBR03C2          A. NO, BYPASS
         AP    PWA_REOCCUR_CHR_CNT,=P'1'
         CP    PWA_REOCCUR_CHR_CNT,=P'3'
         JNH   PSDNBR03C2
         LA    RF,$STATE&MAX1      SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR03C2 EQU   *
         BRAS  RE,DNBR1000
         J     DNBR0200       BUMP
PSDNBR03D EQU   *
*        COMMA
         LA    RF,$STATE6     SET STATE TO 06
         ST    RF,PWA_PSTATE
         OI    PWA_FLAG,$COMMA_ON
         ZAP   PWA_REOCCUR_CHR_CNT,=P'0'
         J     DNBR0200       BUMP
PSDNBR03E EQU   *
*        TERMINATION CHAR
         LA    RF,$STATE4     SET STATE TO 04
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR03F EQU   *
*        MULTIPLIER K
         LA    RF,$STATE5     SET STATE TO 05
         ST    RF,PWA_PSTATE
         ZAP   PWA_MULT,=P'3'
         J     DNBR0200       BUMP
PSDNBR03G EQU   *
*        MULTIPLIER M
         LA    RF,$STATE5     SET STATE TO 05
         ST    RF,PWA_PSTATE
         ZAP   PWA_MULT,=P'6'
         J     DNBR0200       BUMP
PSDNBR03H EQU   *
*        MULTIPLIER G
         LA    RF,$STATE5     SET STATE TO 05
         ST    RF,PWA_PSTATE
         ZAP   PWA_MULT,=P'9'
         J     DNBR0200       BUMP
PSDNBR03I EQU   *
*        DECIMAL
         LA    RF,$STATE7     SET STATE TO 07
         ST    RF,PWA_PSTATE
         NI    PWA_FLAG,255-$COMMA_ON
         OI    PWA_FLAG,$DECIMAL_ON
         J     DNBR0200       BUMP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 04 (TERMINATE Z INTEGER)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR04 EQU   *
         BRAS  RE,DNBR1200
         XC    PWA_TSTATE,PWA_TSTATE
         LA    RF,0
         J     DNBREXIT       TERMINATE
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 05 (CHECK FOR TERMINATOR)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR05 EQU   *
         TRT   0(1,R5),&TERMSEP    Q. TERMINATION CHAR
         JH    PSDNBR05A           A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR05A EQU   *
*        TERMINATION CHAR
         LA    RF,$STATE4     SET STATE TO 04
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 06 (CHECK FOR DIGIT, DECIMAL, TERMINATOR)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR06 EQU   *
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR06A      A. YES
         CLC   0(1,R5),&DECSEP     Q. DECIMAL
         JE    PSDNBR06B           A. YES
         TRT   0(1,R5),&TERMSEP    Q. TERMINATION CHAR
         JH    PSDNBR06C           A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR06A EQU   *
*        DIGIT
         LA    RF,$STATE3     SET STATE TO 03
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR06B EQU   *
*        DECIMAL
         LA    RF,$STATE7     SET STATE TO 07
         ST    RF,PWA_PSTATE
         NI    PWA_FLAG,255-$COMMA_ON
         OI    PWA_FLAG,$DECIMAL_ON
         J     DNBR0200       BUMP
PSDNBR06C EQU   *
*        TERMINATION CHAR
         LA    RF,$STATE4     SET STATE TO 04
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 07 (CHECK FOR DIGIT, TERMINATOR)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR07 EQU   *
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR07A      A. YES
         TRT   0(1,R5),&TERMSEP    Q. TERMINATION CHAR
         JH    PSDNBR07B           A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR07A EQU   *
*        DIGIT
         J     PSDNBR08A
PSDNBR07B EQU   *
*        TERMINATION CHAR
         LA    RF,$STATE9     SET STATE TO 09
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 08 (CHECK FOR DIGIT, e|E, TERMINATOR)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR08 EQU   *
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR08A      A. YES
         CLI   0(R5),C'e'     Q. FLOATING POINT
         JE    PSDNBR08B      A. YES
         CLI   0(R5),C'E'     Q. FLOATING POINT
         JE    PSDNBR08B      A. YES
         TRT   0(1,R5),&TERMSEP    Q. TERMINATION CHAR
         JH    PSDNBR08C           A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR08A EQU   *
*        DIGIT
         LA    RF,$STATE8     SET STATE TO 08
         ST    RF,PWA_PSTATE
         AP    PWA_#OF_DIGIT,=P'1'
         AP    PWA_#OF_SCALE,=P'1'
         BRAS  RE,DNBR1010
         J     DNBR0200       BUMP
PSDNBR08B EQU   *
*        FLOATING POINT e|E
         LA    RF,$STATE10    SET STATE TO 10
         ST    RF,PWA_PSTATE
         J     DNBR0200       BUMP
PSDNBR08C EQU   *
*        TERMINATOR
         LA    RF,$STATE9     SET STATE TO 09
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 09 (TERMINATE R REAL)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR09 EQU   *
         BRAS  RE,DNBR1300
         XC    PWA_TSTATE,PWA_TSTATE
         LA    RF,0
         J     DNBREXIT       TERMINATE
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 10  (CHECK FOR PWR PLUS, MINUS)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR10 EQU   *
         CLI   0(R5),C'+'     Q. PLUS CHAR
         JE    PSDNBR10A      A. YES
         CLI   0(R5),C'-'     Q. MINUS CHAR
         JE    PSDNBR10B      A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR10A EQU   *
*        PWR PLUS SIGN
         LA    RF,$STATE11    SET STATE TO 11
         ST    RF,PWA_PSTATE
         J     DNBR0200       BUMP
PSDNBR10B EQU   *
*        PWR MINUS SIGN
         LA    RF,$STATE11    SET STATE TO 11
         ST    RF,PWA_PSTATE
         OI    PWA_FLAG,$PWR_SIGN_ON   SET MINUS SIGN ACTIVE
         J     DNBR0200       BUMP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 11 (CHECK FOR PWR DIGIT, TERMINATOR)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR11 EQU   *
         TRT   0(1,R5),&DIGIT Q. DIGIT
         JH    PSDNBR11A      A. YES
         TRT   0(1,R5),&TERMSEP    Q. TERMINATION CHAR
         JH    PSDNBR11B           A. YES
         LA    RF,$STATE&MAX1 SET STATE TO SYNTAX
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
PSDNBR11A EQU   *
*        PWR DIGIT
         LA    RF,$STATE11    SET STATE TO 11
         ST    RF,PWA_PSTATE
         AP    PWA_#OF_PWR,=P'1'
         BRAS  RE,DNBR1100
         J     DNBR0200       BUMP
PSDNBR11B EQU   *
*        TERMINATION CHAR
         LA    RF,$STATE12    SET STATE TO 12
         ST    RF,PWA_PSTATE
         J     DNBR0100       LOOP
         SPACE 2
* ---------------------------------------------------------- *
* PROCESS STATE 12 (TERMINATE F FLOATING POINT)
* ---------------------------------------------------------- *
         SPACE 1
PSDNBR12 EQU   *
         BRAS  RE,DNBR1400
         XC    PWA_TSTATE,PWA_TSTATE
         LA    RF,0
         J     DNBREXIT       TERMINATE
         SPACE 2
* ---------------------------------------------------------- *
* PERFORMED ROUTINES
* ---------------------------------------------------------- *
         SPACE 1
* ---------------------------------------------------------- *
* CALLED FROM PSTATE 03,08
* ---------------------------------------------------------- *
         SPACE 1
DNBR1000 EQU   *
         LA    R0,$STATE4
         ST    R0,PWA_TSTATE  SET TERM STATE 04
         J     DNBR1020
DNBR1010 EQU   *
         LA    R0,$STATE9
         ST    R0,PWA_TSTATE  SET TERM STATE 09
DNBR1020 EQU   *
         AS2RESTK PUSH
         LA    R1,PWA_FIELD1
         LH    R0,PWA_FIELD1len
         AR    R1,R0
         MVC   0(1,R1),0(R5)
         AHI   R0,1
         STH   R0,PWA_FIELD1len
DNBR1090 EQU   *
         AS2RESTK POP
         BR    RE        RETURN
         SPACE 2
* ---------------------------------------------------------- *
* CALLED FROM PSTATE 11
* ---------------------------------------------------------- *
         SPACE 1
DNBR1100 EQU   *
         AS2RESTK PUSH
         LA    R0,$STATE12
         ST    R0,PWA_TSTATE  SET TERM STATE 12
         LA    R1,PWA_FIELD2
         LH    R0,PWA_FIELD2len
         AR    R1,R0
         MVC   0(1,R1),0(R5)
         AHI   R0,1
         STH   R0,PWA_FIELD2len
DNBR1190 EQU   *
         AS2RESTK POP
         BR    RE        RETURN
         SPACE 2
* ---------------------------------------------------------- *
* CALLED FROM PSTATE 04 Z-INTEGER
* ---------------------------------------------------------- *
         SPACE 1
DNBR1200 EQU   *
         AS2RESTK PUSH
         L     R3,&RSLTPTR
         USING ASU9LA04,R3
C        USING ASU9LA04,R3    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
*        APPEND ASU9LA08 TO ASU9LA07  (DEPENDENT USING)
C3       USING ASU9LA08,C2.TP_STR_LEN+L'C2.TP_STR_LEN
*        APPEND ASU9LA09 TO ASU9LA08  (DEPENDENT USING)
C4       USING ASU9LA09,C3.TP_TOK_HDR+L'C3.TP_TOK_HDR
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE     Q. > ZERO
         JZ    DNBR1290                 A. NO,
         SRL   R0,16
         CHI   R0,50          Q. >= MAX NEEDED
         JL    DNBR0420       A. NO,
         LH    R0,PWA_FIELD1len
         CHI   R0,31          Q. INTEGER LEN > 31
         JH    DNBR0430       A. YES,
         SPACE 1
         MVI   C3.TP_TOK_TYPE,C'Z'      CODE AS INTEGER
         MVI   C3.TP_TOK_STYPE,C'1'     DE-EDITED
         SPACE 1
         XR    R0,R0
         STCM  R0,3,C4.TP_TOK_SCALE
         STCM  R0,3,C4.TP_TOK_EXP
         SPACE 1
         ZAP   DW01,PWA_#OF_DIGIT
         AP    DW01,PWA_MULT       ADD MULTIPLIER DIGITS
         CVB   R0,DW01
         STCM  R0,3,C4.TP_TOK_DIGIT
         SPACE 1
         ICM   R2,12,PWA_FIELD1len
         SRL   R2,16
         CP    PWA_MULT,=P'0'      Q. DIGITS +0 ZEROS
         JE    DNBR1210            A. YES, BYPASS
         CP    PWA_MULT,=P'3'      Q. DIGITS +3 ZEROS
         JNE   DNBR1202            A. NO, BYPASS
         A     R2,=F'3'
         J     DNBR1210
DNBR1202 EQU   *
         CP    PWA_MULT,=P'6'      Q. DIGITS +6 ZEROS
         JNE   DNBR1204            A. NO, BYPASS
         A     R2,=F'6'
         J     DNBR1210
DNBR1204 EQU   *
         CP    PWA_MULT,=P'9'      Q. DIGITS +9 ZEROS
         JNE   DNBR1210            A. NO, BYPASS
         A     R2,=F'9'
**       J     DNBR1210
DNBR1210 EQU   *
         LA    R1,L'C4.TP_TOK_INFO(,R2)
         STCM  R1,3,C3.TP_TOK_LEN
         LA    R1,L'C3.TP_TOK_HDR(,R1)
         STCM  R1,3,C2.TP_STR_LEN
         AHI   R2,-1
         TM    PWA_FLAG,$SIGN_ON   Q. NEGATIVE SIGN
         JNO   DNBR1220            A. NO, BYPASS
         LA    R1,PWA_FIELD1(R2)   A. YES, MAKE NEGATIVE
         NI    0(R1),X'DF'
DNBR1220 EQU   *
         J     *+4+6
         MVC   C4.TP_TOK_NBR(0),PWA_FIELD1
*+4+6    EQU   *
         EX    R2,*-6
         DROP  C4,C3,C2,C1,C,R3
DNBR1290 EQU   *
         AS2RESTK POP
         BR    RE        RETURN
         SPACE 2
* ---------------------------------------------------------- *
* CALLED FROM PSTATE 09 R-REAL
* ---------------------------------------------------------- *
         SPACE 1
DNBR1300 EQU   *
         AS2RESTK PUSH
         L     R3,&RSLTPTR
         USING ASU9LA04,R3
C        USING ASU9LA04,R3    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
*        APPEND ASU9LA08 TO ASU9LA07  (DEPENDENT USING)
C3       USING ASU9LA08,C2.TP_STR_LEN+L'C2.TP_STR_LEN
*        APPEND ASU9LA09 TO ASU9LA08  (DEPENDENT USING)
C4       USING ASU9LA09,C3.TP_TOK_HDR+L'C3.TP_TOK_HDR
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE     Q. > ZERO
         JZ    DNBR1390                 A. NO,
         SRL   R0,16
         CHI   R0,50          Q. >= MAX NEEDED
         JL    DNBR0420       A. NO,
         LH    R0,PWA_FIELD1len
         CHI   R0,31          Q. REAL LEN > 31
         JH    DNBR0430       A. YES,
         SPACE 1
         MVI   C3.TP_TOK_TYPE,C'R'      CODE AS REAL
         MVI   C3.TP_TOK_STYPE,C'1'     DE-EDITED
         SPACE 1
         XR    R0,R0
         STCM  R0,3,C4.TP_TOK_EXP
         SPACE 1
         ZAP   DW01,PWA_#OF_DIGIT
         CVB   R0,DW01
         STCM  R0,3,C4.TP_TOK_DIGIT
         SPACE 1
         ZAP   DW01,PWA_#OF_SCALE
         CVB   R0,DW01
         STCM  R0,3,C4.TP_TOK_SCALE
         SPACE 1
         ICM   R2,12,PWA_FIELD1len
         SRL   R2,16
         LA    R1,L'C4.TP_TOK_INFO(,R2)
         STCM  R1,3,C3.TP_TOK_LEN
         LA    R1,L'C3.TP_TOK_HDR(,R1)
         STCM  R1,3,C2.TP_STR_LEN
         AHI   R2,-1
         TM    PWA_FLAG,$SIGN_ON   Q. NEGATIVE SIGN
         JNO   DNBR1302            A. NO, BYPASS
         LA    R1,PWA_FIELD1(R2)   A. YES, MAKE NEGATIVE
         NI    0(R1),X'DF'
DNBR1302 EQU   *
         J     *+4+6
         MVC   C4.TP_TOK_NBR(0),PWA_FIELD1
*+4+6    EQU   *
         EX    R2,*-6
         DROP  C4,C3,C2,C1,C,R3
DNBR1390 EQU   *
         AS2RESTK POP
         BR    RE        RETURN
         SPACE 2
* ---------------------------------------------------------- *
* CALLED FROM PSTATE 12 F-FLOAT
* ---------------------------------------------------------- *
         SPACE 1
DNBR1400 EQU   *
         AS2RESTK PUSH
         L     R3,&RSLTPTR
         USING ASU9LA04,R3
C        USING ASU9LA04,R3    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
*        APPEND ASU9LA08 TO ASU9LA07  (DEPENDENT USING)
C3       USING ASU9LA08,C2.TP_STR_LEN+L'C2.TP_STR_LEN
*        APPEND ASU9LA09 TO ASU9LA08  (DEPENDENT USING)
C4       USING ASU9LA09,C3.TP_TOK_HDR+L'C3.TP_TOK_HDR
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE     Q. > ZERO
         JZ    DNBR1490                 A. NO,
         SRL   R0,16
         CHI   R0,50          Q. >= MAX NEEDED
         JL    DNBR0420       A. NO,
         LH    R0,PWA_FIELD1len
         CHI   R0,35          Q. FLOAT LEN > 35
         JH    DNBR0440       A. YES,
         SPACE 1
         MVI   C3.TP_TOK_TYPE,C'F'      CODE AS FLOAT
         MVI   C3.TP_TOK_STYPE,C'1'     DE-EDITED
         SPACE 1
         ZAP   DW01,PWA_#OF_DIGIT
         CVB   R0,DW01
         STCM  R0,3,C4.TP_TOK_DIGIT
         SPACE 1
         ZAP   DW01,PWA_#OF_SCALE
         CVB   R0,DW01
         STCM  R0,3,C4.TP_TOK_SCALE
         SPACE 1
         ZAP   DW01,PWA_#OF_PWR
         CVB   R0,DW01
         STCM  R0,3,C4.TP_TOK_EXP
         SPACE 1
         ICM   R2,12,PWA_FIELD1len
         SRL   R2,16
         ICM   R0,12,PWA_FIELD2len
         SRL   R0,16
         AR    R2,R0                    n=FIELD1len+FIELD2len
         LA    R1,L'C4.TP_TOK_INFO(,R2) n=n+6
         STCM  R1,3,C3.TP_TOK_LEN
         LA    R1,L'C3.TP_TOK_HDR(,R1)  n=n+4
         STCM  R1,3,C2.TP_STR_LEN
         SPACE 1
         ICM   R2,12,PWA_FIELD1len
         SRL   R2,16
         ST    R2,FW11        SAVE POS OF PWR IN RESULT
         AHI   R2,-1
         TM    PWA_FLAG,$SIGN_ON   Q. NEGATIVE SIGN
         JNO   DNBR1402            A. NO, BYPASS
         LA    R1,PWA_FIELD1(R2)   A. YES, MAKE NEGATIVE
         NI    0(R1),X'DF'
DNBR1402 EQU   *
         J     *+4+6
         MVC   C4.TP_TOK_NBR(0),PWA_FIELD1
*+4+6    EQU   *
         EX    R2,*-6
         SPACE 1
         ICM   R2,12,PWA_FIELD2len
         SRL   R2,16
         AHI   R2,-1
         TM    PWA_FLAG,$PWR_SIGN_ON    Q. NEGATIVE SIGN
         JNO   DNBR1404                 A. NO, BYPASS
         LA    R1,PWA_FIELD2(R2)        A. YES, MAKE NEGATIVE
         NI    0(R1),X'DF'
DNBR1404 EQU   *
         L     R6,FW11        RESTORE POS IN RESULT
         LA    R1,C4.TP_TOK_NBR(R6)
         J     *+4+6
         MVC   0(0,R1),PWA_FIELD2
*+4+6    EQU   *
         EX    R2,*-6
         DROP  C4,C3,C2,C1,C,R3
DNBR1490 EQU   *
         AS2RESTK POP
         BR    RE        RETURN
         SPACE 2
* ---------------------------------------------------------- *
* MACRO EXIT
* ---------------------------------------------------------- *
         SPACE 1
DNBREXIT EQU   *
         AS2RESTK POP
         LTR   RF,RF
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - PARAMETER DECSEP IS REQUIRED'
         MEXIT
.ERR0002 ANOP
         MNOTE 12,'&MACNME - PARAMETER DIGIT IS REQUIRED'
         MEXIT
.ERR0003 ANOP
         MNOTE 12,'&MACNME - PARAMETER TERMSEP IS REQUIRED'
         MEXIT
.ERR0004 ANOP
         MNOTE 12,'&MACNME - PARAMETER THSSEP IS REQUIRED'
         MEXIT
.ERROO05 ANOP
         MNOTE 12,'&MACNME - PARAMETER RSLTPTR IS REQUIRED'
         MEXIT
.ERR0006 ANOP
         MNOTE 12,'&MACNME - PARAMETER RSLTPTR=&RSLTPTR LABEL MUST REFE+
               R TO A DATA TYPE OF ADDRESS OR A FULL WORD BINARY'
         MEND
./ ADD NAME=AS2LDMOD 0110-19297-19312-1504-00153-00064-00000-APLKS   39
         MACRO
&LABEL   AS2LDMOD &PP1,&PP2,&PP3,&PP4
.* --------------------------------------------------------- *
.* MACRO ID: AS2LDMOD
.*    TITLE: LOAD/RETRIEVE EPA | DELETE MODULE FROM STORAGE
.*     DATE: 2019/10/25
.*
.*     DESC: THIS MACRO IS USED TO DELETE A MODULE BY NAME
.*           OR LOAD A MODULE BY NAME OR RETRIEVE THE
.*           ENTRY POINT ADDRESS OF A EXISTING MODULE.
.*           IT WILL CALL SERVICE MODULE ASU?PM1B TO
.*           PROCESS THE ACTION.
.*           1 - IF MODULE IS ALREADY LOADED, RETURN EPA
.*           2 - IF MODULE IS NOT PRESENT IN STORAGE, LOAD
.*               IT AND RETURN EPA.
.*           3 - IF MODULE IS ALREADY LOADED, DELETE IT FROM
.*               STORAGE
.*    INPUT:
.*      asca    label or register pointing to ASCA
.*      asrb    label or register pointing to ASRB
.*      action  label or self-defining term for action code
.*              1=load module by name at the enclave level
.*              2=delete module by name at the enclave level
.*      module  label of module name to load or return EPA
.*
.*   OUTPUT:
.*      R15     0 or address of module EPA
.*
.*  OPTIONS:
.*
.*     >>-AS2LDMOD-+---------------+-->
.*               >-+--asca---------+-->
.*               >-+-,asrb---------+-->
.*               >-+-,action-------+-->
.*               >-+-,module-------+--><
.*
.*  REG USE: R1 - ADDRESS OF CALL LIST
.*           R2 - INPUT ADDRESS OF ASCA
.*           R3 - INPUT ADDRESS OF ASRB
.*           R4 - WORK REGISTER
.*           RE - RETURN REGISTER
.*           RF - 0  = NOT FOUND, NOT LOADED
.*                >0 = REQUESTED MODULE EPA
.*
.* --------------------------------------------------------- *
         LCLA  &KPP1,&KPP2
         LCLC  &ACTION
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2LDMOD'
&MACVER  SETC  '0001'
&MACREL  SETC  '.002'
&MACDATE SETC  '2019-10-31'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         AIF   (N'&SYSLIST GT 4).ERR0010  too many parameters
.*       process positional parameter 1
         AIF   (T'&PP1 EQ 'O').EPA0200
.*       is it register notation
&KPP1    SETA  K'&PP1         string count
         AIF   ('&PP1'(1,1) EQ '(' AND '&PP1'(&KPP1,1) EQ ')').EPA0110
         AIF   (T'&PP1(1) EQ 'N').ERR0050
.*       no it is a label
         LA    R2,&PP1(1)
         AGO   .EPA0200
.EPA0110 ANOP
         AIF   (T'&PP1(1) NE 'N').ERR0070
.*       it is register notation
         AIF   ('&PP1(1)' EQ '2').EPA0200
         AIF   ('&PP1(1)' EQ '0').ERR0030
         AIF   ('&PP1(1)' EQ '1').ERR0030
         AIF   ('&PP1(1)' EQ '3').ERR0030
         AIF   ('&PP1(1)' EQ '4').ERR0030
         LR    R2,&PP1(1)
.EPA0200 ANOP
.*       process positional parameter 2
         AIF   (T'&PP2 EQ 'O').EPA0300
.*       is it register notation
&KPP2    SETA  K'&PP2         string count
         AIF   ('&PP2'(1,1) EQ '(' AND '&PP2'(&KPP2,1) EQ ')').EPA0210
         AIF   (T'&PP2(1) EQ 'N').ERR0060
.*       no it is a label
         LA    R3,&PP2(1)
         AGO   .EPA0300
.EPA0210 ANOP
         AIF   (T'&PP2(1) NE 'N').ERR0080
.*       it is register notation
         AIF   ('&PP2(1)' EQ '3').EPA0300
         AIF   ('&PP2(1)' EQ '0').ERR0040
         AIF   ('&PP2(1)' EQ '1').ERR0040
         AIF   ('&PP2(1)' EQ '2').ERR0040
         AIF   ('&PP2(1)' EQ '4').ERR0040
         LR    R3,&PP2(1)
.EPA0300 ANOP
.*       process positional parameter 3
&ACTION  SETC  '=F''1'''
         AIF   (T'&PP3 EQ 'O').EPA0400
         AIF   (T'&PP3 NE 'N').EPA0320
.*       yes it is a self-defining term
         AIF   ('&PP3' EQ '1' OR '&PP3' EQ '2').EPA0310
         AGO   .ERR0090
.EPA0310 ANOP
&ACTION  SETC  '=F''&PP3'''
         AGO   .EPA0400
.EPA0320 ANOP
.*       no it is a label
&ACTION  SETC  '&PP3'
.EPA0400 ANOP
.*       process positional parameter 4
         AIF   (T'&PP4 EQ 'O').ERR0020
.*       generate block of code
         MNOTE *,'&MACNME - USING REG 1,2,3,4,14,15'
&LABEL   MVC   36(8,R3),=CL8'ASU3PM1B'  init ASRB svc mod
         MVC   44(4,R3),&ACTION    init ASRB svc action
         MVC   48(8,R3),&PP4
         AS2PLIST (0(,R2),0(,R3),0),                                   +
               VL,MF=(E,PLIST)
*        CALL ASU?PM1B
         L     R4,192(,R2)    get ASAB addr
         L     R4,48(,R4)     get ASABX addr
         L     RF,84(,R4)     get addr of ASU?PM1B
         BASR  RE,RF     link to
         ICM   RF,15,56(R3)   Q. get module EPA
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'TOO MANY POSITIONAL PARAMETERS'
         AGO   .ERR0900
.ERR0020 ANOP
         MNOTE 12,'4TH POS PARM IS MISSING'
         AGO   .ERR0900
.ERR0030 ANOP
         MNOTE 12,'1ST POS PARM CAN NOT BE GPR 0,1,3,4'
         AGO   .ERR0900
.ERR0040 ANOP
         MNOTE 12,'2ND POS PARM CAN NOT BE GPR 0,1,2,4'
         AGO   .ERR0900
.ERR0050 ANOP
         MNOTE 12,'1ST POS PARM IS NOT A LABEL'
         AGO   .ERR0900
.ERR0060 ANOP
         MNOTE 12,'2ND POS PARM IS NOT A LABEL'
         AGO   .ERR0900
.ERR0070 ANOP
         MNOTE 12,'1ST POS PARM IS NOT A SELF-DEFINING TERM'
         AGO   .ERR0900
.ERR0080 ANOP
         MNOTE 12,'2ND POS PARM IS NOT A SELF-DEFINING TERM'
         AGO   .ERR0900
.ERR0090 ANOP
         MNOTE 12,'3RD POS PARM IS NOT IN THE RANGE(1:2)'
.ERR0900 ANOP
         MNOTE 12,'MACRO TERMINATED'
         MEND
./ ADD NAME=AS2LTRCE 0123-18123-19163-1103-00265-00264-00000-APLKS   36
         MACRO
&LABEL   AS2LTRCE &TYPE=LABEL,                                         +
               &TRACE=NO,                                              +
               &PRINT=NO
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2LTRCE
.*    TITLE: LABEL TRACE MACRO
.*     DATE: 03/01/2005
.*
.*     DESC: THIS MACRO IS USED TO TRACK/TRACE THROUGH A
.*           PROGRAM OR A GROUP OF PROGRAMS.  THE OUTPUT
.*           CONSIST OF CSECT NAME AND LABEL WITHIN CSECT.
.*           THE OUTPUT CAN BE DIRECTED TO A TRACE TABLE
.*           OR TO THE LE MSGFILE.
.*
.*  OPTIONS:
.*
.*     >>-AS2LTRCE-+---------------+---------------------->
.*                 +-TYPE=-+-LABEL-+
.*                         +-CODE--+
.*                         +-END---+
.*                         +-INIT--+
.*      >-+--------------+--+--------------+--------------><
.*        +-TRACE=-+-NO--+  +-PRINT=-+-NO--+
.*                 +-YES-+           +-YES-+
.*
.* EXTERNAL: THE FOLLOWING GLOBAL DATA IS DEFINED EXTERNAL
.*           TO THIS MACRO.
.*           A) &GMSCPFX  MACRO(AS1MUTSA)
.*           B) &GTRCPFX  MACRO(AS1MUTSA)
.*           C) &GTRC#    MACRO(AS1MUTSA)
.*
.*           THE FOLLOWING DATA IS DEFINED EXTERNAL TO THIS
.*           MACRO.
.*           A) TRCETBL   MACRO(AS1MUTSA)
.*           B) WORK AREA MACRO(AS1MUTSA)
.*
.*  REG USE: R0: WORK REG
.*           R1: WORK REG
.*           R2: ADDR OF CSECT AND LABEL; PARAMETER ADDR;
.*           R3: WORK REG
.*           RE: STANDARD LINKAGE
.*           RF: STANDARD LINKAGE
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* 2017/09/26 LKS        UPDATE ADDRESSING
.* --------------------------------------------------------- *
         GBLB  &GTRC1ST,&GTRCON,&GTRCGEN,&GTRCPON
         GBLC  &GMSCPFX,&GTRCPFX,&GTRC#
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &P1,&P2
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2LTRCE'
&MACVER  SETC  '0001'
&MACREL  SETC  '.003'
&MACDATE SETC  '2017-09-26'
&P1      SETC  '&GMSCPFX'
&P2      SETC  '&GTRCPFX'
.* --------------------------------------------------------- *
.* DETERMINE TYPE OF MACRO EXPANSION
.* --------------------------------------------------------- *
.TRC0100 ANOP
         AIF   (&GTRC1ST).TRC0200
         AIF   ('&TYPE' EQ 'INIT').TRC1000
         MNOTE 08,'&MACNME - TYPE=INITIAL MUST BE THE FIRST COMMAND PRO+
               CSSED, MACRO EXPANSION IGNORED'
         MEXIT
.TRC0200 ANOP
         AIF   (T'&TYPE EQ 'O').TRC3000          LABEL (DEFAULT)
         AIF   ('&TYPE' EQ 'CODE').TRC4000
         AIF   ('&TYPE' EQ 'END').TRC8000
         AIF   ('&TYPE' EQ 'LABEL').TRC3000      LABEL
         MNOTE 08,'&MACNME - TYPE=&TYPE PARAMETER IS INVALID, MACRO EXP+
               ANSION IGNORED'
         MEXIT
.* --------------------------------------------------------- *
.* TYPE=INIT   MACRO EXPANSION
.* --------------------------------------------------------- *
.TRC1000 ANOP
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&GTRC1ST SETB  1
         AIF   ('&SYSPARM' EQ 'LBLTRCE').TRC1030
         AIF   (T'&TRACE EQ 'O').TRC1002
         AIF   ('&TRACE' EQ 'NO').TRC1010
         AIF   ('&TRACE' EQ 'YES').TRC1020
         AIF   ('&TRACE' EQ 'GEN').TRC1032
.TRC1002 ANOP
         MNOTE *,'&MACNME - TRACE= PARAMETER WAS OMITTED OR INVALID'
         MNOTE *,'&MACNME - TRACE=NO IS ASSUMED'
.TRC1010 ANOP
&GTRCON  SETB  0
&GTRCGEN SETB  0
         AGO   .TRC1200
.TRC1020 ANOP
&GTRCON  SETB  1
&GTRCGEN SETB  0
         AGO   .TRC1200
.TRC1030 ANOP
         MNOTE *,'PARM=(SYSPARM(LBLTRCE)) HAS BEEN SPECIFIED'
.TRC1032 ANOP
&GTRCON  SETB  0
&GTRCGEN SETB  1
.TRC1200 ANOP
         AIF   (T'&PRINT EQ 'O').TRC1202
         AIF   ('&PRINT' EQ 'NO').TRC1210
         AIF   ('&PRINT' EQ 'YES').TRC1220
.TRC1202 ANOP
.*       MNOTE *,'&MACNME - PRINT= PARAMETER WAS OMITTED OR INVALID'
.*       MNOTE *,'&MACNME - PRINT=NO IS ASSUMED'
.TRC1210 ANOP
&GTRCPON SETB  0
         AGO   .TRC1300
.TRC1220 ANOP
&GTRCPON SETB  1
.TRC1300 ANOP
         AIF   (&GTRCON OR &GTRCGEN).TRC1310
         MEXIT
.TRC1310 ANOP
         MNOTE *,'&MACNME - USING REG 0,1'
         LAY   1,&P2.CTBL     GET ADDR OF TRACE TABLE
         XC    0(L'&P2.NTRY*2,1),0(1)
         LAY   0,&P2.NTRY+L'&P2.NTRY
         STY   0,&P2.CTBL+04       SAVE CURRENT ENTRY ADDR
         AHI   0,+(&GTRC#-1)*L'&P2.NTRY
         STY   0,&P2.CTBL+08       SAVE LAST ENTRY ADDR
         LA    0,2
         ST    0,LEMDEST
         MEXIT
.* --------------------------------------------------------- *
.* TYPE=LABEL  MACRO EXPANSION
.* --------------------------------------------------------- *
.TRC3000 ANOP
         AIF   (T'&LABEL NE 'O').TRC3002
         MNOTE 08,'&MACNME - A LABEL IS REQUIRED TO EXPAND THIS MACRO, +
               MACRO EXPANSION IGNORED'
         MEXIT
.TRC3002 ANOP
         MNOTE *,'&MACNME - USING REG 2'
         AIF   (&GTRCON).TRC3004
         AIF   (&GTRCGEN).TRC3008
&LABEL   EQU   *
         MEXIT
.TRC3004 ANOP
&LABEL   BRAS  2,LTRCERTN
         DC    CL08'&SYSECT',CL08'&LABEL'
         MEXIT
.TRC3008 ANOP
&LABEL   TMY   &P2.CTBL+12,X'40'   Q. TRACE TURNED ON
         JNO   *+4+4+16            A. NO, BYPASS
         BRAS  2,LTRCERTN
         DC    CL08'&SYSECT',CL08'&LABEL'
*+4+4+16 EQU   *
         MEXIT
.* --------------------------------------------------------- *
.* TYPE=CODE   MACRO EXPANSION
.* --------------------------------------------------------- *
.TRC4000 ANOP
         AIF   (&GTRCON OR &GTRCGEN).TRC4002
         MEXIT
.TRC4002 ANOP
         MNOTE *,'&MACNME - USING REG 1,2,3'
         CNOP  0,4
LTRCERTN EQU   *
         LY    3,&P2.CTBL     GET TRACE NBR
         AHI   3,1            INCR NBR OF RECORDED TRACES
         STY   3,&P2.CTBL     SAVE TRACE NBR
         AIF   (&GTRCPON).TRC4200
.TRC4100 ANOP
         LY    3,&P2.CTBL+04  GET CURRENT ENTRY ADDR
         LAY   1,&P2.CTBL     GET ADDR OF TRACE TABLE
         MVC   0(4,3),0(1)    SAVE TRACE NBR
         MVC   4(16,3),0(2)   MOVE TO CURRENT ENTRY
         AHI   2,+16          INCR RETURN REG
         LAY   3,L'&P2.NTRY(,3)    POINT TO NEXT ENTRY
         CY    3,&P2.CTBL+08       Q. AT END OF TABLE
         JH    *+4+6+2             A. YES,
         STY   3,&P2.CTBL+04       A. NO, SAVE PTR TO CURRENT
         BR    2         RETURN TO CALLER
*+4+6+2  EQU   *
         LAY   3,&P2.NTRY     POINT TO BEGIN OF TABLE
         STY   3,&P2.CTBL+04  SAVE PTR TO CURRENT
         BR    2         RETURN TO CALLER
         MEXIT
.TRC4200 ANOP
         CVD   3,&P1.DW04
         OI    &P1.DW04+L'&P1.DW04-1,X'0F'
         MVI   &P1.VTXT,C' '
         MVC   &P1.VTXT+1(L'&P1.VTXT-1),&P1.VTXT
         UNPK  &P1.VTXT+7(7),&P1.DW04+L'&P1.DW04-4(4)
         MVC   &P1.VTXT(8),=CL8'LTRACE'
         MVC   &P1.VTXT+14(7),=CL7' CSECT='
         MVC   &P1.VTXT+21(8),0(2)
         MVC   &P1.VTXT+29(8),=CL8', LABEL='
         MVC   &P1.VTXT+37(8),8(2)
         MVC   &P1.VLEN,=H'48'
         AHI   2,L'&P2.NTRY-4 INCR RETURN REG
         STM   14,15,FW41     SAVE R14, R15
         AS2PLIST (&P1.VSTR,LEMDEST,0),                                +
               VL,MF=(E,&P1.PLIST)
         LY    15,=V(CEEMOUT) GET ADDR OF CEEMOUT
         BASR  14,15          ROUTE MESSAGE TO MSGFILE
         LM    14,15,FW41     RESTORE R14, R15
         BR    2         RETURN TO CALLER
         MEXIT
.* --------------------------------------------------------- *
.* TYPE=END    MACRO EXPANSION
.* --------------------------------------------------------- *
.TRC8000 ANOP
         AIF   (&GTRCON OR &GTRCGEN).TRC8002
         MEXIT
.TRC8002 ANOP
         AIF   ('&SYSPARM' EQ 'LBLTRCE').TRC8020
         AIF   (T'&PRINT EQ 'O').TRC8010
         AIF   ('&PRINT' EQ 'NO').TRC8010
         AIF   ('&PRINT' EQ 'YES').TRC8020
.TRC8004 ANOP
         MNOTE 04,'&MACNME - PRINT= PARAMETER WAS OMITTED OR INVALID'
         MNOTE 04,'&MACNME - PRINT=NO IS ASSUMED'
.TRC8010 ANOP
         MEXIT
.TRC8020 ANOP
         AIF   (NOT &GTRCGEN).TRC8026
         MNOTE *,'&MACNME - USING REG 0,1,2,3'
         TMY   &P2.CTBL+12,X'40'   Q. TRACE TURNED ON
         JNO   LTRCEEOL            A. NO, EXIT
.TRC8026 ANOP
         MVI   &P1.VTXT,C' '
         MVC   &P1.VTXT+1(L'&P1.VTXT-1),&P1.VTXT
         LY    0,&P2.CTBL     GET NBR OF RECORDED TRACES
         LY    2,&P2.CTBL+04  GET ADDR OF CURRENT ENTRY
         LAY   3,&P2.NTRY     GET ADDR OF BEG OF TABLE
LTRCEBOL EQU   *              BEGIN OF LOOP
         AHI   2,-L'&P2.NTRY
         OC    0(L'&P2.NTRY,2),0(2)     Q. FINISHED YET
         JZ    LTRCEEOL       A. YES, EXIT
         CR    2,3            Q. BEYOND LIMITS OF TABLE
         JNL   *+4+6          A. NO, BYPASS
         LY    2,&P2.CTBL+8   A. YES, POINT TO E-O-T
*+4+6    EQU   *
         CY    2,&P2.CTBL+4   Q. MADE IT BACK TO CURRENT YET
         JE    LTRCEEOL       A. YES, EXIT
         LY    0,0(,2)        GET TRACE NBR
         CVD   0,&P1.DW04
         OI    &P1.DW04+L'&P1.DW04-1,X'0F'
         UNPK  &P1.VTXT+7(7),&P1.DW04+L'&P1.DW04-4(4)
         MVC   &P1.VTXT(8),=CL8'LTRACE'
         MVC   &P1.VTXT+14(7),=CL7' CSECT='
         MVC   &P1.VTXT+21(8),4(R2)
         MVC   &P1.VTXT+29(8),=CL8', LABEL='
         MVC   &P1.VTXT+37(8),12(R2)
         MVC   &P1.VLEN,=H'48'
         AS2PLIST (&P1.VSTR,LEMDEST,0),                                +
               VL,MF=(E,&P1.PLIST)
         LY    15,=V(CEEMOUT) GET ADDR OF CEEMOUT
         BASR  14,15          ROUTE MESSAGE TO MSGFILE
         J     LTRCEBOL       GO GET NEXT
LTRCEEOL EQU   *              END OF LOOP
         SPACE 2
         MEND
./ ADD NAME=AS2NTEST 0108-15047-19163-1109-00413-00425-00000-APLKS   37
         MACRO
&LABEL   AS2NTEST &FLD,       NAME1|N(L,RN)                            +
               &FLDPTR=,     ANAME1|FNAME1|XNAME1|(RN)|(R1)            +
               &FORMAT=,     CHAR|CH|C|ZONE|ZD|Z|PACK|PD|P             +
               &LENGTH=,     FNAME2|HNAME2|XNAME2|LIT2|(RN)|(R2)       +
               &EXLGTH=      FNAME2|HNAME2|XNAME2|LIT2|(RN)|(R2)
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2NTEST
.*    TITLE: NUMERIC TEST
.*     DATE: 05/01/2007
.*
.*     DESC: THIS MACRO IS USED TO GENERATE THE NECESSARY
.*           CODE TO TEST THE NUMERIC VALIDITY OF A FIELD.
.*
.*           THE FOLLOWING OBJECT MODULES WILL BE
.*           AUTO INCLUDED AT LINKEDIT TIME:
.*
.*             UNSIGNED EXTERNAL DECIMAL (CH)
.*             MVS(ILBOWTB0) VSE(ILBDWTB0) AS(ASTNTSZD)
.*
.*             EXTERNAL DECIMAL (ZD)
.*             MVS(ILBOETB0) VSE(ILBDETB0) AS(ASTNTSZD)
.*
.*             INTERNAL DECIMAL (PD)
.*             MVS(ILBOITB0) VSE(ILBDITB0) AS(ASTNTSPD)
.*
.*    INPUT: FLD      LABEL OF FIELD TO BE TESTED FOR
.*                    NUMERIC.
.*           FLDPTR   ADDRESS OF THE FIELD TO BE TESTED
.*                    FOR NUMERIC.
.*           FORMAT   (CHAR|CH|C) - UNSIGNED ZONE DECIMAL
.*                                  TEST.
.*                    (ZONE|ZD|Z) - SIGNED ZONE DECMIAL
.*                                  TEST.
.*                    (PACK|PD|P) - SIGNED PACK DECIMAL
.*                                  TEST.
.*           LENGTH   A NUMERIC LITERAL, A BINARY FIELD,
.*                    OR REGISTER NOTATION.  THE VALUE
.*                    WILL BE REDUCED BY 1 FOR EXECUTION
.*                    PURPOSES.
.*           EXLGTH   A NUMERIC LITERAL, A BINARY FIELD,
.*                    OR REGISTER NOTATION.  THE VALUE
.*                    IS ASSUMED TO BE IN EXECUTABLE FORM.
.*
.*   OUTPUT: R15      0 = NUMERIC
.*                    4 = NOT NUMERIC
.*
.*  REG USE: R1  - FIELD ADDRESS (DEFAULT)
.*           R2  - FIELD LENGTH (DEFAULT)
.*           R15 - ADDRESS OF TRANSLATE TABLE
.*                 RETURN CODE
.*
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLB  &EXECSW
         LCLC  &TRGT
         LCLC  &INIT1,&INIT2
         LCLC  &INITA,&INITB
         LCLC  &INST1,&INST2,&INST3
         LCLC  &INSTA,&INSTB,&INSTC
         LCLC  &LEN
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2NTEST'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-05-03'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&EXECSW  SETB  0
&LEN     SETC  '0'
         AIF   (T'&FLD EQ 'O' AND T'&FLDPTR EQ 'O').ERR001
         AIF   (T'&LENGTH NE 'O' AND T'&EXLGTH NE 'O').ERR004
         AIF   (T'&FLDPTR NE 'O').NTST200
         AIF   (T'&FLD NE 'O').NTST100
.ERR001  ANOP
         MNOTE 8,'&MACNME - NO TARGET FIELD WAS SPECIFIED, MACRO EXPANS+
               ION IGNORED'
         MEXIT
.NTST100 ANOP
&TRGT    SETC  '&FLD'
         AIF   (T'&LENGTH EQ 'O' AND T'&EXLGTH EQ 'O').NTST102
         MNOTE 4,'&MACNME - LENGTH PARAMETER IS INVALID FOR THIS EXPANS+
               ION, LENGTH PARAMETER IS IGNORED'
.NTST102 ANOP
         AIF   (T'&FLD EQ 'C').NTSTCH
         AIF   (T'&FLD EQ 'Z').NTSTZD
         AIF   (T'&FLD EQ 'P').NTSTPD
         AIF   (T'&FORMAT NE 'O').NTST110
         MNOTE 8,'&MACNME - FORMAT PARAMETER WAS OMITTED, MACRO EXPANSI+
               ON IGNORED'
         MEXIT
.NTST110 ANOP
         AIF   ('&FORMAT' EQ 'C' OR '&FORMAT' EQ 'CH' OR               +
               '&FORMAT' EQ 'CHAR').NTSTCH
         AIF   ('&FORMAT' EQ 'Z' OR '&FORMAT' EQ 'ZD' OR               +
               '&FORMAT' EQ 'ZONE').NTSTZD
         AIF   ('&FORMAT' EQ 'P' OR '&FORMAT' EQ 'PD' OR               +
               '&FORMAT' EQ 'PACK').NTSTPD
         MNOTE 8,'&MACNME - FORMAT PARAMETER IS INVALID, MACRO EXPANSIO+
               N IGNORED'
         MEXIT
.NTST200 ANOP
         AIF   (T'&FLDPTR EQ 'A' OR T'&FLDPTR EQ 'F').NTST230
         AIF   (T'&FLDPTR EQ 'X').NTST220
         AIF   ('&FLDPTR'(1,1) EQ '(').NTST210
         MNOTE 8,'&MACNME - FLDPTR PARAMETER IS INVALID, MACRO EXPANSIO+
               N IGNORED'
         MEXIT
.NTST210 ANOP
         AIF   ('&FLDPTR(1)' EQ '0').ERR002
         AIF   ('&FLDPTR(1)' EQ '2').ERR002
         AIF   ('&FLDPTR(1)' EQ '15').ERR002
         AIF   ('&FLDPTR(1)' EQ '1').NTST299
&INST1   SETC  'LR   '
&INSTA   SETC  '1,&FLDPTR(1)'
         AGO   .NTST299
.NTST220 ANOP
         AIF   (L'&FLDPTR EQ 4).NTST224
         AIF   (L'&FLDPTR EQ 3).NTST222
         MNOTE 8,'&MACNME - FLDPTR PARAMETER HAS AN INVALID LENGTH, MAC+
               RO EXPANSION IGNORED'
         MEXIT
.NTST222 ANOP
&INIT1   SETC  'XR   '
&INITA   SETC  '1,1'
&INST1   SETC  'ICM  '
&INSTA   SETC  '1,7,&FLDPTR'
         AGO   .NTST299
.NTST224 ANOP
&INST1   SETC  'ICM  '
&INSTA   SETC  '1,15,&FLDPTR'
         AGO   .NTST299
.NTST230 ANOP
&INST1   SETC  'L    '
&INSTA   SETC  '1,&FLDPTR'
         AGO   .NTST299
.NTST299 ANOP
.NTST300 ANOP
         AIF   (T'&LENGTH NE 'O' OR T'&EXLGTH NE 'O').NTST310
         MNOTE 8,'&MACNME - LENGTH PARAMETER WAS OMITTED, MACRO EXPANSI+
               ON IGNORED'
         MEXIT
.NTST310 ANOP
         AIF   (T'&EXLGTH NE 'O').NTST400
         AIF   (T'&LENGTH EQ 'A' OR T'&LENGTH EQ 'F').NTST360
         AIF   (T'&LENGTH EQ 'Y' OR T'&LENGTH EQ 'H').NTST350
         AIF   (T'&LENGTH EQ 'X').NTST340
         AIF   ('&LENGTH'(1,1) EQ '(').NTST330
         AIF   (T'&LENGTH EQ 'N').NTST320
.*       MNOTE 8,'&MACNME - LENGTH PARAMETER IS INVALID, MACRO EXPANSIO
.*             N IGNORED'
.*       MEXIT
.NTST320 ANOP
&LEN     SETC  '&LENGTH'
         AGO   .NTST399
.NTST330 ANOP
&EXECSW  SETB  1
         AIF   ('&LENGTH(1)' EQ '0').ERR003
         AIF   ('&LENGTH(1)' EQ '1').ERR003
         AIF   ('&LENGTH(1)' EQ '15').ERR003
         AIF   ('&LENGTH(1)' EQ '2').NTST370
&INST2   SETC  'LR   '
&INSTB   SETC  '2,&LENGTH(1)'
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST340 ANOP
&EXECSW  SETB  1
         AIF   (L'&LENGTH EQ 4).NTST348
         AIF   (L'&LENGTH EQ 3).NTST346
         AIF   (L'&LENGTH EQ 2).NTST344
         AIF   (L'&LENGTH EQ 1).NTST342
         MNOTE 8,'&MACNME - LENGTH PARAMETER HAS AN INVALID LENGTH, MAC+
               RO EXPANSION IGNORED'
         MEXIT
.NTST342 ANOP
&INIT2   SETC  'XR   '
&INITB   SETC  '2,2'
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,1,&LENGTH'
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST344 ANOP
&INIT2   SETC  'XR   '
&INITB   SETC  '2,2'
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,3,&LENGTH'
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST346 ANOP
&INIT2   SETC  'XR   '
&INITB   SETC  '2,2'
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,7,&LENGTH'
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST348 ANOP
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,15,&LENGTH'
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST350 ANOP
&EXECSW  SETB  1
&INST2   SETC  'LH   '
&INSTB   SETC  '2,&LENGTH'
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST360 ANOP
&EXECSW  SETB  1
&INST2   SETC  'L    '
&INSTB   SETC  '2,&LENGTH'
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST370 ANOP
&INST3   SETC  'AHI  '
&INSTC   SETC  '2,-1'
         AGO   .NTST399
.NTST399 ANOP
.NTST400 ANOP
         AIF   (T'&LENGTH NE 'O').NTST499
         AIF   (T'&EXLGTH EQ 'A' OR T'&EXLGTH EQ 'F').NTST460
         AIF   (T'&EXLGTH EQ 'Y' OR T'&EXLGTH EQ 'H').NTST450
         AIF   (T'&EXLGTH EQ 'X').NTST440
         AIF   ('&EXLGTH'(1,1) EQ '(').NTST430
         AIF   (T'&EXLGTH EQ 'N').NTST420
.*       MNOTE 8,'&MACNME - EXLGTH PARAMETER IS INVALID, MACRO EXPANSIO
.*             N IGNORED'
.*       MEXIT
.NTST420 ANOP
&LEN     SETC  '&EXLGTH.+1'
         AGO   .NTST499
.NTST430 ANOP
&EXECSW  SETB  1
         AIF   ('&EXLGTH(1)' EQ '0').ERR013
         AIF   ('&EXLGTH(1)' EQ '1').ERR013
         AIF   ('&EXLGTH(1)' EQ '15').ERR013
         AIF   ('&EXLGTH(1)' EQ '2').NTST499
&INST2   SETC  'LR   '
&INSTB   SETC  '2,&EXLGTH(1)'
         AGO   .NTST499
.NTST440 ANOP
&EXECSW  SETB  1
         AIF   (L'&EXLGTH EQ 4).NTST448
         AIF   (L'&EXLGTH EQ 3).NTST446
         AIF   (L'&EXLGTH EQ 2).NTST444
         AIF   (L'&EXLGTH EQ 1).NTST442
         MNOTE 8,'&MACNME - EXLGTH PARAMETER HAS AN INVALID LENGTH, MAC+
               RO EXPANSION IGNORED'
         MEXIT
.NTST442 ANOP
&INIT2   SETC  'XR   '
&INITB   SETC  '2,2'
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,1,&EXLGTH'
         AGO   .NTST499
.NTST444 ANOP
&INIT2   SETC  'XR   '
&INITB   SETC  '2,2'
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,3,&EXLGTH'
         AGO   .NTST499
.NTST446 ANOP
&INIT2   SETC  'XR   '
&INITB   SETC  '2,2'
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,7,&EXLGTH'
         AGO   .NTST499
.NTST448 ANOP
&INST2   SETC  'ICM  '
&INSTB   SETC  '2,15,&EXLGTH'
         AGO   .NTST499
.NTST450 ANOP
&EXECSW  SETB  1
&INST2   SETC  'LH   '
&INSTB   SETC  '2,&EXLGTH'
         AGO   .NTST499
.NTST460 ANOP
&EXECSW  SETB  1
&INST2   SETC  'L    '
&INSTB   SETC  '2,&EXLGTH'
         AGO   .NTST499
.NTST499 ANOP
&TRGT    SETC  '0(&LEN.,1)'
.NTST500 ANOP
         AIF   (T'&FORMAT NE 'O').NTST510
         MNOTE 8,'&MACNME - FORMAT PARAMETER WAS OMITTED, MACRO EXPANSI+
               ON IGNORED'
         MEXIT
.NTST510 ANOP
         AIF   ('&FORMAT' EQ 'C' OR '&FORMAT' EQ 'CH' OR               +
               '&FORMAT' EQ 'CHAR').NTSTCH
         AIF   ('&FORMAT' EQ 'Z' OR '&FORMAT' EQ 'ZD' OR               +
               '&FORMAT' EQ 'ZONE').NTSTZD
         AIF   ('&FORMAT' EQ 'P' OR '&FORMAT' EQ 'PD' OR               +
               '&FORMAT' EQ 'PACK').NTSTPD
         MNOTE 8,'&MACNME - FORMAT PARAMETER IS INVALID, MACRO EXPANSIO+
               N IGNORED'
         MEXIT
.NTSTCH  ANOP
.*       ***   MACRO=AS2NTEST FORMAT=CH
         AIF   ('&INIT1' EQ '').NTST802
         &INIT1 &INITA
.NTST802 ANOP
         AIF   ('&INST1' EQ '').NTST804
         &INST1 &INSTA
.NTST804 ANOP
         L     15,=V(ASTNTSZD)     LOAD ADR OF ZD TRT TABLE
         AIF   ('&INIT2' EQ '').NTST806
         &INIT2 &INITB
.NTST806 ANOP
         AIF   ('&INST2' EQ '').NTST808
         &INST2 &INSTB
.NTST808 ANOP
         AIF   ('&INST3' EQ '').NTST810
         &INST3 &INSTC
.NTST810 ANOP
         AIF   (NOT &EXECSW).NTST812
         EX    2,*+8 .        EXECUTE TRT INSTR
         J     *+10 .         BRANCH TO CC TEST FOR TRT
.NTST812 ANOP
         TRT   &TRGT,0(15)    Q. TEST FOR CH
         JNE   *+8 .          A. NO, NOT NUMERIC
         J     *+12 .         A. YES, NUMERIC
         AGO   .NTST900
.NTSTZD  ANOP
.*       ***   MACRO=AS2NTEST FORMAT=ZD
         AIF   ('&INIT1' EQ '').NTST822
         &INIT1 &INITA
.NTST822 ANOP
         AIF   ('&INST1' EQ '').NTST824
         &INST1 &INSTA
.NTST824 ANOP
         L     15,=V(ASTNTSZD)     LOAD ADR OF ZD TRT TABLE
         AIF   ('&INIT2' EQ '').NTST826
         &INIT2 &INITB
.NTST826 ANOP
         AIF   ('&INST2' EQ '').NTST828
         &INST2 &INSTB
.NTST828 ANOP
         AIF   ('&INST3' EQ '').NTST830
         &INST3 &INSTC
.NTST830 ANOP
         AIF   (NOT &EXECSW).NTST832
         EX    2,*+8 .        EXECUTE TRT INSTR
         B     *+10 .         BRANCH TO CC TEST FOR TRT
.NTST832 ANOP
         TRT   &TRGT,0(15)    Q. TEST FOR ZD
         JL    *+20 .         A. NO, NOT NUMERIC
         JE    *+24 .         A. YES, NUMERIC SIGN=F
         N     2,=F'1' .      Q. VALID SIGN
         JNE   *+8 .          A. NO, INVALID SIGN
         J     *+12 .         A. YES, VALID SIGN
         AGO   .NTST900
.NTSTPD  ANOP
.*       ***   MACRO=AS2NTEST FORMAT=PD
         AIF   ('&INIT1' EQ '').NTST842
         &INIT1 &INITA
.NTST842 ANOP
         AIF   ('&INST1' EQ '').NTST844
         &INST1 &INSTA
.NTST844 ANOP
         L     15,=V(ASTNTSPD)     LOAD ADR OF PD TRT TABLE
         AIF   ('&INIT2' EQ '').NTST846
         &INIT2 &INITB
.NTST846 ANOP
         AIF   ('&INST2' EQ '').NTST848
         &INST2 &INSTB
.NTST848 ANOP
         AIF   ('&INST3' EQ '').NTST850
         &INST3 &INSTC
.NTST850 ANOP
         AIF   (NOT &EXECSW).NTST852
         EX    2,*+8 .        EXECUTE TRT INSTR
         J     *+10 .         BRANCH TO CC TEST FOR TRT
.NTST852 ANOP
         TRT   &TRGT,0(15)    Q. TEST FOR PD
         BRC   12,*+12 .      A. NO, NOT NUMERIC
         N     2,=F'1' .      Q. VALID SIGN
         JE    *+12 .         A. YES, VALID SIGN
         AGO   .NTST900
.NTST900 ANOP
         LA    15,4 .         INDICATE NOT NUMERIC
         J     *+8 .          GO SET CONDITION CODE
         LA    15,0 .         INDICATE NUMERIC
         LTR   15,15 .        SET CONDITION CODE
         MEXIT
.ERR002  ANOP
         MNOTE 8,'&MACNME - &FLDPTR IS INVALID AS USED, MACRO EXPANSION+
                IGNORED'
         AGO   .NTST999
.ERR003  ANOP
         MNOTE 8,'&MACNME - &LENGTH IS INVALID AS USED, MACRO EXPANSION+
                IGNORED'
         AGO   .NTST999
.ERR004  ANOP
         MNOTE 8,'&MACNME - BOTH LENGTH PARAMETERS WERE USED, MACRO EXP+
               ANSION IGNORED'
         AGO   .NTST999
.ERR013  ANOP
         MNOTE 8,'&MACNME - &EXLGTH IS INVALID AS USED, MACRO EXPANSION+
                IGNORED'
         AGO   .NTST999
.NTST999 ANOP
         MEND
./ ADD NAME=AS2PLIST 0107-15225-19163-1111-00121-00118-00000-APLKS   07
         MACRO
&NAME    AS2PLIST &PP1,&PP2,                                           +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2PLIST
.*    TITLE: BUILD PARAMETER LIST
.*     DATE: 03/01/2005
.*
.*     DESC: THIS MACRO IS USED TO BUILD A PARM LIST AND
.*           RETURN THE ADDRESS IN GPR1.
.*
.*  OPTIONS:
.*                   +-<-,--------+
.*     >>-AS2PLIST-(-+------------+-),VL,----------------->
.*                   +-POSITIONAL-+
.*
.*      >-+-----------------+-----------------------------><
.*        +-MF=-+-----------+
.*              +-(E,LABEL)-+
.*              +-I---------+
.*              +-L---------+
.*
.*  REG USE: R0: WORK REG
.*           R1: ADDR OF PARAMETER LIST
.*
.* --------------------------------------------------------- *
.*
.* 2018/05/29 CHANGED REGISTER USAGE
.* --------------------------------------------------------- *
         LCLA  &NPP1,&KPP1,&CNTR,&OFFSET
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2PLIST'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-05-03'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         AIF   (T'&PP1 EQ 'O').ERR0010
&CNTR    SETA  1
&NPP1    SETA  N'&PP1   NBR OF PARAMETERS
&KPP1    SETA  K'&PP1   NBR OF BYTES IN THE STRING
         AIF   ('&PP1'(1,1) EQ '(' AND '&PP1'(&KPP1,1) EQ ')').PLST040
         MNOTE 12,'1ST POS OPERAND NEEDS TO BE IN LIST FORMAT'
         MNOTE 12,'ENCLOSE IN PARENTHESES'
         MEXIT
.PLST040 ANOP
         AIF   (T'&MF EQ 'O').PLST200       INLINE
         AIF   ('&MF(1)' EQ 'I').PLST200    INLINE
         AIF   ('&MF(1)' EQ 'L').PLST300    BUILT STORAGE LIST
         AIF   ('&MF(1)' EQ 'E').PLST400    EXEC FROM STORAGE LIST
         MNOTE 12,'MF=, SET TO INVALID VALUE'
         MEXIT
.PLST200 ANOP
.*       GENERATE INLINE FORM
         MNOTE *,'&MACNME - USING REG 0,1'
&OFFSET  SETA  ((&NPP1+1)/2)*8+4
         CNOP  0,4
         BRAS  1,*+&OFFSET
         DC    &NPP1.A(0)
.PLST210 ANOP
         LA    0,&PP1(&CNTR)
         ST    0,(&CNTR-1)*4(,1)
         AIF   (&CNTR EQ &NPP1).PLST220
&CNTR    SETA  &CNTR+1
         AGO   .PLST210
.PLST220 ANOP
         AIF   (T'&PP2 EQ 'O').PLST490
         AIF   ('&PP2' NE 'VL').PLST490
         OI    (&CNTR-1)*4(R1),X'80'
.PLST290 ANOP
         MEXIT
.PLST300 ANOP
.*       GENERATE STORAGE ITEMS FOR LIST
         AIF   (T'&NAME EQ 'O').ERR0300
.PLST310 ANOP
&NAME    DC    A(&PP1(&CNTR))
         AGO   .PLST320
.PLST315 ANOP
         DC    A(&PP1(&CNTR))
.PLST320 ANOP
         AIF   (&CNTR EQ &NPP1).PLST330
&CNTR    SETA  &CNTR+1
         AGO   .PLST315
.PLST330 ANOP
.PLST390 ANOP
         MEXIT
.PLST400 ANOP
         AIF   (K'&MF LT 2).ERR0400
.*       GENERATE EXECUTION FORM
         MNOTE *,'&MACNME - USING REG 1'
.PLST405 ANOP
         LA    1,&PP1(&CNTR)
         ST    1,&MF(2)+(&CNTR-1)*4
         AIF   (&CNTR EQ &NPP1).PLST410
&CNTR    SETA  &CNTR+1
         AGO   .PLST405
.PLST410 ANOP
         AIF   (T'&PP2 EQ 'O').PLST490
         AIF   ('&PP2' NE 'VL').PLST490
         OI    &MF(2)+(&CNTR-1)*4,X'80'
         LA    1,&MF(2)
.PLST490 ANOP
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'1ST POS OPERAND MISSING'
         AGO   .ERR0900
.ERR0040 ANOP
         MNOTE 12,'KEYWORD PARAMETER MF= IS MISSING'
         AGO   .ERR0900
.ERR0300 ANOP
         MNOTE 12,'MACRO EXPANSION REQUIRES A LABEL'
         AGO   .ERR0900
.ERR0400 ANOP
         MNOTE 12,'MF=(E,LABEL), LABEL IS MISSING'
.ERR0900 ANOP
         MNOTE 12,'MACRO TERMINATED'
         MEND
./ ADD NAME=AS2RESTK 0105-15148-19163-1113-00091-00089-00000-APLKS   01
         MACRO
&LABEL   AS2RESTK &CMD,&STK,                                           +
               &PREFIX=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2RESTK
.*    TITLE: REGISTER 14 STACK
.*     DATE: 03/01/2005
.*
.*     DESC: THIS MACRO IS USED TO SAVE AND/OR RESTORE
.*           REGISTER 14 UPON ENTRY AND/OR EXIT OF LOW
.*           LEVEL ROUTINES.
.*
.*           &CMD - MACRO EXPANSION FUNCTION; PUSH, POP
.*           &STK - (OPTIONAL) NAME OF THE STORAGE VECTOR
.*                  WHERE R14 IS TO BE STORED OR LOADED
.*                  FROM. DEFAULT IS RESA.
.*  OPTIONS:
.*
.*     >>-AS2RESTK-+-PUSH-+--+-------+--+---------------+--><
.*                 +-POP--+  +-,&STK-+  +-,PREFIX=-+----+
.*
.*
.* EXTERNAL: THE FOLLOWING GLOBAL DATA IS DEFINED EXTERNAL
.*           TO THIS MACRO.
.*           A) &GTRCPFX  MACRO(AS1MUTSA)
.*
.*
.*  REG USE: R3 - MODIFIED
.*           RE - SAVED OR RESTORED
.*
.* --------------------------------------------------------- *
.*
.* 05/28/2015 SWAP USE OF R2 WITH R3
.* --------------------------------------------------------- *
         GBLC  &GRESPFX
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &P,&STKV
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2RESTK'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-05-03'
&STKV    SETC  'RESA'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         AIF   (T'&CMD EQ 'O').ERR0010
         AIF   ('&CMD' NE 'PUSH' AND '&CMD' NE 'POP').ERR0020
         AIF   (T'&STK EQ 'O').ESTK020
&STKV    SETC  '&STK'
.*       AIF   (T'&STK EQ 'F' OR T'&STK EQ 'A').ESTK030
.*       AGO   .ERR0030
.ESTK020 ANOP
         AIF   ('&GRESPFX' EQ '').ESTK030
&P       SETC  '&GRESPFX'
.ESTK030 ANOP
         AIF   (T'&PREFIX EQ 'O').ESTK040
&P       SETC  '&PREFIX'
.ESTK040 ANOP
         AIF   ('&CMD' EQ 'PUSH').ESTK100
         AIF   ('&CMD' EQ 'POP').ESTK200
         AGO   .ERR0020
.ESTK100 ANOP  ***PUSH***
         MNOTE *,'&MACNME - USING REG 3,14'
&LABEL   L     3,&P.&STKV         LOAD CURRENT INDEX VALUE
         AHI   3,4                INCR TO NEXT ENTRY
         ST    3,&P.&STKV         SAVE NEW INDEX VALUE
         ST    14,&P.&STKV.(3)    SAVE REGISTER 14
         MEXIT
.ESTK200 ANOP  ***POP***
         MNOTE *,'&MACNME - USING REG 3,14'
&LABEL   L     3,&P.&STKV         LOAD CURRENT INDEX VALUE
         L     14,&P.&STKV.(3)    RESTORE REGISTER 14
         AHI   3,-4               DECR TO PREVIOUS ENTRY
         ST    3,&STKV            SAVE NEW INDEX VALUE
         MEXIT
.ERR0010 ANOP
         MNOTE 08,'&MACNME - COMMAND PARAMETER WAS OMITTED, MACRO EXPAN+
               SION IGNORED'
         AGO   .ESTK999
.ERR0020 ANOP
         MNOTE 08,'&MACNME - COMMAND &CMD IS INVALID, MACRO EXPANSION I+
               GNORED'
         AGO   .ESTK999
.ERR0030 ANOP
         MNOTE 08,'&MACNME - REGISTER STACK VECTOR MUST BE ALIGNED ON A+
                FULL WORD, MACRO EXPANSION IGNORED'
.ESTK999 ANOP
         MEND
./ ADD NAME=AS2VBSRH 0149-18155-19318-1433-00479-00955-00000-APLKS   07
         MACRO
&LABEL   AS2VBSRH ,                                                    +
               &NTRYCNT=,                                              +
               &NTRY=(1,),                                             +
               &KEY=(1,),                                              +
               &ARGPTR=,                                               +
               &SRCHARG=,                                              +
               &VECTPTR=,                                              +
               &VECTOR=,                                               +
               &SUB=,                                                  +
               &INDEX=,                                                +
               &PREFIX=,                                               +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2VBSRH
.*    TITLE: BINARY SEARCH ALGORITHM
.*     DATE: 2018-06-04
.*
.*     DESC: THIS MACRO WILL GENERATE A BINARY SEARCH
.*           ROUTINE THAT WILL RETURN THE FIRST MATCHING
.*           VECTOR ENTRY IN A VECTOR SORTED IN ASCENDING
.*           ORDER BY KEY.
.*
.*    INPUT:
.*      NTRYCNT=   integer count of vector entries
.*      NTRY=(pos,len)
.*        pos      integer position of 1st vector entry
.*        len      integer length of each vector entry
.*      KEY=(pos,len)
.*        pos      integer position of KEY in vector entry
.*        len      integer length of KEY in vector entry
.*      ARGPTR=    address of search argument
.*     |SRCHARG=   search argument
.*      VECTPTR=   address of vector
.*     |VECTOR=    vector
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand binary search routine
.*                 D - expand TWA DSECT definition
.*                 E - expand  CALL logic
.*                 G - expand TWA initialization
.*                 L - expand TWA definitions
.*
.*    OUTPUT:
.*      SUB=       integer subscript of matching vector entry
.*      INDEX=     integer offset of matching vector entry
.*      R0         same value as SUB
.*      R1         same value as INDEX
.*      RF         return code (0=found, 4=not found, 8=invalid parms)
.*
.*  OPTIONS:
.*
.*      >>-AS2VBSRH-+------------------------+--->
.*
.*                >-+-NTRYCNT=---------------+--->
.*
.*                >-+-NTRY=-(-+------+-)-----+--->
.*                            +--pos-+
.*                            +-,len-+
.*
.*                >-+-KEY=-(-+------+-)------+--->
.*                           +--pos-+
.*                           +-,len-+
.*
.*                >-+-ARGPTR=----------------+--->
.*
.*                  +-SRCHARG=---------------+--->
.*
.*                >-+-VECTPTR=---------------+--->
.*
.*                  +-VECTOR=----------------+--->
.*
.*                >-+-SUB=-------------------+--->
.*
.*                >-+-INDEX=-----------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+---+--------------+---><
.*                        +-C-+    expand code
.*                        +-D-+    expand TWA DSECT
.*                        +-E-+    expand CALL
.*                        +-G-+    expand TWA init
.*                        +-L-+    expand TWA
.*
.* ALGORITHM: Programming Pearls 2nd Ed. by Jon Bentley
.*
.*      lbnds = 0;
.*      ubnds = n;      /* nbr of vector entries */
.*      Do While lbnds+1 <> ubnds;
.*        mid = (lbnds+ubnds)%2;
.*        If v(mid) < srcharg Then;
.*          lbnds = mid;
.*        Else
.*          ubnds = mid;
.*      End;
.*      If ubnds > n | v(ubnds) <> srcharg Then;
.*        Do;
.*          sub = 0; index = 0;
.*          R0 = 0; R1 = 0; RF = +4;
.*        End;
.*      Else;
.*        Do;
.*          sub = ubnds; index = ;
.*          R0 = ubnds; R1 = index; RF = 0;
.*        End;
.*
.*      Return (RF);
.*
.*  REG USE: R0: work / sub
.*           R1: entry(mid|upper) addr / index
.*           R2: srch arg addr
.*           R3: compare length
.*           RF: return code
.*               0 = entry found
.*               4 = entry not found
.*               8 = invalid parameters
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2VBSRH'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-06-20'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.BSRH030 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').BSRH032
&D       SETC  '&PREFIX(1)'
.BSRH032 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').BSRH034
&C       SETC  '&PREFIX(2)'
.BSRH034 ANOP
.BSRH100 ANOP
         AIF   (T'&MF NE 'O').BSRH110
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH110 ANOP
         AIF   ('&MF(1)' EQ 'C').BSRH800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'D').BSRH210    EXPAND TWA DSECT
         AIF   ('&MF(1)' EQ 'E').BSRH600    EXPAND CALL
         AIF   ('&MF(1)' EQ 'G').BSRH400    EXPAND TWA INIT
         AIF   ('&MF(1)' EQ 'L').BSRH200    EXPAND TWA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.BSRH200 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA)
         DS    0D
         AGO   .BSRH220
.BSRH210 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA) DSECT
&LABEL   DSECT
.BSRH220 ANOP
&D.BSTWA EQU   *,(12*4),C'X'  BINARY SEARCH TRANSIENT WORK AREA
&D.BSNCNT DS    F             ..VECTOR ENTRY COUNT
&D.BSNPOS DS    F             ..POSITION OF 1ST ENTRY
&D.BSNLEN DS    F             ..ENTRY LENGTH
&D.BSKPOS DS    F             ..KEY POSITION
&D.BSKLEN DS    F             ..KEY LENGTH
&D.BS@ARG DS    A             ..SEARCH ARGUMENT ADDRESS
&D.BS@VCT DS    A             ..VECTOR ADDRESS
&D.BSNBEG DS    A             ..BS@VCT+BSNPOS-1
&D.BSKBEG DS    A             ..BSNBEG+BSKPOS-1
&D.BSLBND DS    F             ..LOWER BOUNDS
&D.BSUBND DS    F             ..UPPER BOUNDS
&D.BSMID DS    F              ..MID POINT
         MEXIT
.BSRH400 ANOP  ,    INITIALIZE TWA
         MNOTE *,'&MACNME - USING REG 0,15'
         XC    &D.BSTWA,&D.BSTWA   CLEAR BINARY SEARCH TWA
         AIF   (T'&NTRYCNT NE 'O').BSRH410
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH410 ANOP
         AIF   (T'&NTRYCNT EQ 'N').BSRH412
         AIF   ('&NTRYCNT'(1,1) EQ '(').BSRH414
         AIF   (T'&NTRYCNT EQ 'A' OR T'&NTRYCNT EQ 'F').BSRH416
         AIF   (T'&NTRYCNT EQ 'Y' OR T'&NTRYCNT EQ 'H').BSRH418
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.BSRH412 ANOP  ,    STORE NTRYCNT - SELF DEFINING TERM
         LA    0,&NTRYCNT
         ST    0,&D.BSNCNT     SAVE VECTOR ENTRY COUNT
         AGO   .BSRH420
.BSRH414 ANOP  ,    STORE REGISTER IN NTRYCNT
         ST    &NTRYCNT(1),&D.BSNCNT    SAVE VECTOR ENTRY COUNT
         AGO   .BSRH420
.BSRH416 ANOP  ,    SAVE 4-BYTE NTRYCNT
         MVC   &D.BSNCNT,&NTRYCNT  SAVE VECTOR ENTRY COUNT
         AGO   .BSRH420
.BSRH418 ANOP  ,    SAVE 2-BYTE NTRYCNT
         LH    0,&NTRYCNT
         ST    0,&D.BSNCNT     SAVE VECTOR ENTRY COUNT
.BSRH420 ANOP
         AIF   (T'&NTRY NE 'O').BSRH430
         MNOTE 8,'&MACNME - NTRY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH430 ANOP
         AIF   ('&NTRY'(1,1) EQ '(' AND '&NTRY'(K'&NTRY,1) EQ ')').BSRH+
               432
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.BSRH432 ANOP
         AIF   (N'&NTRY EQ 2).BSRH434
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.BSRH434 ANOP
         AIF   (T'&NTRY(1) NE 'O').BSRH440
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH440 ANOP
         AIF   (T'&NTRY(1) EQ 'N').BSRH442
         AIF   (T'&NTRY(1) EQ 'A' OR T'&NTRY(1) EQ 'F').BSRH446
         AIF   (T'&NTRY(1) EQ 'Y' OR T'&NTRY(1) EQ 'H').BSRH448
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.BSRH442 ANOP  ,    STORE NTRY POS - SELF DEFINING TERM
         LA    0,&NTRY(1)
         ST    0,&D.BSNPOS     SAVE VECTOR 1ST NTRY POS
         AGO   .BSRH450
.BSRH446 ANOP  ,    SAVE 4-BYTE NTRY POS
         MVC   &D.BSNPOS,&NTRY(1)  SAVE VECTOR 1ST NTRY POS
         AGO   .BSRH450
.BSRH448 ANOP  ,    SAVE 2-BYTE NTRY POS
         LH    0,&NTRY(1)
         ST    0,&D.BSNPOS     SAVE VECTOR 1ST NTRY POS
.BSRH450 ANOP
.BSRH460 ANOP
         AIF   (T'&NTRY(2) NE 'O').BSRH470
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH470 ANOP
         AIF   (T'&NTRY(2) EQ 'N').BSRH472
         AIF   (T'&NTRY(2) EQ 'A' OR T'&NTRY(2) EQ 'F').BSRH476
         AIF   (T'&NTRY(2) EQ 'Y' OR T'&NTRY(2) EQ 'H').BSRH478
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 2 INVALID'
         AGO   .ERR0001
.BSRH472 ANOP  ,    STORE NTRY LEN - SELF DEFINING TERM
         LA    0,&NTRY(2)
         ST    0,&D.BSNLEN     SAVE VECTOR NTRY LEN
         AGO   .BSRH480
.BSRH476 ANOP  ,    SAVE 4-BYTE NTRY LEN
         MVC   &D.BSNLEN,&NTRY(2)  SAVE VECTOR NTRY LEN
         AGO   .BSRH480
.BSRH478 ANOP  ,    SAVE 2-BYTE NTRY LEN
         LH    0,&NTRY(2)
         ST    0,&D.BSNLEN     SAVE VECTOR NTRY LEN
.BSRH480 ANOP
.BSRH490 ANOP
         AIF   (T'&KEY NE 'O').BSRH4A0
         MNOTE 8,'&MACNME - KEY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH4A0 ANOP
         AIF   ('&KEY'(1,1) EQ '(' AND '&KEY'(K'&KEY,1) EQ ')').BSRH4A2
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.BSRH4A2 ANOP
         AIF   (N'&KEY EQ 2).BSRH4A4
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.BSRH4A4 ANOP
         AIF   (T'&KEY(1) NE 'O').BSRH4B0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH4B0 ANOP
         AIF   (T'&KEY(1) EQ 'N').BSRH4B2
         AIF   (T'&KEY(1) EQ 'A' OR T'&KEY(1) EQ 'F').BSRH4B6
         AIF   (T'&KEY(1) EQ 'Y' OR T'&KEY(1) EQ 'H').BSRH4B8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.BSRH4B2 ANOP  ,    STORE KEY POS - SELF DEFINING TERM
         LA    0,&KEY(1)
         ST    0,&D.BSKPOS     SAVE VECTOR 1ST KEY POS
         AGO   .BSRH4C0
.BSRH4B6 ANOP  ,    SAVE 4-BYTE KEY POS
         MVC   &D.BSKPOS,&KEY(1)   SAVE VECTOR 1ST KEY POS
         AGO   .BSRH4C0
.BSRH4B8 ANOP  ,    SAVE 2-BYTE KEY POS
         LH    0,&KEY(1)
         ST    0,&D.BSKPOS     SAVE VECTOR 1ST KEY POS
.BSRH4C0 ANOP
.BSRH4D0 ANOP
         AIF   (T'&KEY(2) NE 'O').BSRH4E0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH4E0 ANOP
         AIF   (T'&KEY(2) EQ 'N').BSRH4E2
         AIF   (T'&KEY(2) EQ 'A' OR T'&KEY(2) EQ 'F').BSRH4E6
         AIF   (T'&KEY(2) EQ 'Y' OR T'&KEY(2) EQ 'H').BSRH4E8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.BSRH4E2 ANOP  ,    STORE KEY LEN - SELF DEFINING TERM
         LA    0,&KEY(2)
         ST    0,&D.BSKLEN     SAVE VECTOR KEY LEN
         AGO   .BSRH4F0
.BSRH4E6 ANOP  ,    SAVE 4-BYTE KEY LEN
         MVC   &D.BSKLEN,&KEY(2)   SAVE VECTOR KEY LEN
         AGO   .BSRH4F0
.BSRH4E8 ANOP  ,    SAVE 2-BYTE KEY LEN
         LH    0,&KEY(2)
         ST    0,&D.BSKLEN    SAVE VECTOR KEY LEN
.BSRH4F0 ANOP
.BSRH4G0 ANOP
         AIF   (T'&SRCHARG NE 'O').BSRH4I0
         AIF   (T'&ARGPTR NE 'O').BSRH4H0
         MNOTE 8,'&MACNME - SRCHARG OR ARGPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.BSRH4H0 ANOP
         AIF   ('&ARGPTR'(1,1) EQ '(').BSRH4H4
         AIF   (T'&ARGPTR EQ 'A').BSRH4H6
         MNOTE 8,'&MACNME - ARGPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.BSRH4H4 ANOP  ,    STORE REGISTER IN ARGPTR
         ST    &ARGPTR(1),&D.BS@ARG     SAVE SRCH ARG ADDR
         AGO   .BSRH4K0
.BSRH4H6 ANOP  ,    SAVE 4-BYTE ARGPTR
         MVC   &D.BS@ARG,&ARGPTR   SAVE SRCH ARG ADDR
         AGO   .BSRH4K0
.BSRH4I0 ANOP
.BSRH4J0 ANOP
.BSRH4J4 ANOP  ,    STORE ADDRESS OF SRCHARG
         LA    0,&SRCHARG
         ST    0,&D.BS@ARG     SAVE SRCH ARG ADDR
.BSRH4K0 ANOP
         AIF   (T'&VECTOR NE 'O').BSRH4M0
         AIF   (T'&VECTPTR NE 'O').BSRH4L0
         MNOTE 8,'&MACNME - VECTOR OR VECTPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.BSRH4L0 ANOP
         AIF   ('&VECTPTR'(1,1) EQ '(').BSRH4L4
         AIF   (T'&VECTPTR EQ 'A' OR T'&VECTPTR EQ 'V').BSRH4L6
         MNOTE 8,'&MACNME - VECTPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.BSRH4L4 ANOP  ,    STORE REGISTER IN VECTPTR
         ST    &VECTPTR(1),&D.BS@VCT    SAVE VECTOR ADDR
         AGO   .BSRH4O0
.BSRH4L6 ANOP  ,    SAVE 4-BYTE VECTPTR
         MVC   &D.BS@VCT,&VECTPTR  SAVE VECTOR ADDR
         AGO   .BSRH4O0
.BSRH4M0 ANOP
.BSRH4N0 ANOP
.BSRH4N4 ANOP  ,    STORE ADDRESS OF VECTOR
         LA    0,&VECTOR
         ST    0,&D.BS@VCT     SAVE VECTOR ADDR
.BSRH4O0 ANOP
         LA    15,8            set init error
         CLC   &D.BSKLEN,=F'256'   Q. key len > 256
         JH    &C.BSRTN099         A. yes, error
         CLC   &D.BSKLEN,&D.BSNLEN Q. key len > entry len
         JH    &C.BSRTN099         A. yes, error
         L     0,&D.BSKPOS
         AHI   0,-1           make relative to zero
         A     0,&D.BSKLEN
         C     0,&D.BSNLEN    Q. key exceedes entry len
         JH    &C.BSRTN099    A. yes, error
         LA    15,4           set not found
         ICM   0,15,&D.BSNCNT      Q. any vector entries
         JZ    &C.BSRTN099         A. no, not found
         L     0,&D.BS@VCT
         A     0,&D.BSNPOS    add position of 1st entry
         AHI   0,-1           make relative to zero
         ST    0,&D.BSNBEG    save vector entry begin addr
         A     0,&D.BSKPOS    add position of 1st key
         AHI   0,-1           make relative to zero
         ST    0,&D.BSKBEG    save vector entry key begin addr
         XR    15,15          clear return code
&C.BSRTN099 EQU   *
         LTR   15,15
.BSRH4P0 ANOP
         MEXIT
.BSRH600 ANOP  ,    CALL BINARY SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 14'
.BSRH610 ANOP
         BRAS  14,&C.BSRTN100 call binary search routine
         MEXIT
.BSRH800 ANOP  ,    EXPAND BINARY SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 0,1,2,3,15'
         AIF   (T'&SUB NE 'O').BSRH810
         MNOTE 8,'&MACNME - SUB KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH810 ANOP
         AIF   (T'&SUB EQ 'F').BSRH820
         MNOTE 8,'&MACNME - SUB KEYWORD PARAMETER INVALID'
         AGO   .ERR0001
.BSRH820 ANOP
         AIF   (T'&INDEX NE 'O').BSRH822
         MNOTE 8,'&MACNME - INDEX KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH822 ANOP
         AIF   (T'&INDEX EQ 'F').BSRH830
         MNOTE 8,'&MACNME - INDEX KEYWORD PARAMETER INVALID'
         AGO   .ERR0001
.BSRH830 ANOP
&C.BSRTN100 EQU   *      BINARY SEARCH ROUTINE
         LA    15,4           set not found
*        loop init
         XC    &D.BSLBND,&D.BSLBND init lower bounds
         MVC   &D.BSUBND,&D.BSNCNT init upper bounds
         L     2,&D.BS@ARG    prime reg with search arg addr
         L     3,&D.BSKLEN    prime reg with key len
         AHI   3,-1
&C.BSRTN200 EQU   *      DO WHILE LOOP
         L     0,&D.BSLBND
         AHI   0,1
         C     0,&D.BSUBND    Q. lower bounds +1 >= upper bounds
         JNL   &C.BSRTN300    A. yes, go exit loop
*        compute mid point
         L     1,&D.BSLBND
         A     1,&D.BSUBND
         SRL   1,1            mid = (lbnd+ubnd)%2
         ST    1,&D.BSMID     save mid point
*        compute mid point key addr
         AHI   1,-1           compute
         MS    1,&D.BSNLEN    ..key index value
         A     1,&D.BSKBEG
*        check for match
         J     *+4+6
         CLC   0(0,1),0(2)    Q. key of v(mid) >= srch arg
*+4+6    EQU   *
         EX    3,*-6
         JNL   &C.BSRTN210    A. yes, bypass
         MVC   &D.BSLBND,&D.BSMID  A. lower bnds = mid point
         J     &C.BSRTN212
&C.BSRTN210 EQU   *
         MVC   &D.BSUBND,&D.BSMID  A. upper bnds = mid point
&C.BSRTN212 EQU   *
         J     &C.BSRTN200    return to loop begin
&C.BSRTN300 EQU   *      END OF LOOP
*        check for no match
         CLC   &D.BSUBND,&D.BSNCNT Q. upper bnds > n
         JH    &C.BSRTN800         A. yes, not found
*        compute upper bnds key index
         L     1,&D.BSUBND
         AHI   1,-1           compute
         MS    1,&D.BSNLEN    ..key index value
         A     1,&D.BSKBEG
*        check for no match
         J     *+4+6
         CLC   0(0,1),0(2)    Q. entry(upper) <> srch arg
*+4+6    EQU   *
         EX    3,*-6
         JNE   &C.BSRTN800    A. yes, not found
         SPACE 1
*        match found
         L     0,&D.BSUBND
         ST    0,&SUB         return match
*        compute upper bnds entry index
         LR    1,0
         AHI   1,-1           compute
         MS    1,&D.BSNLEN    ..entry index value
         ST    1,&INDEX
         XR    15,15          set return code to 0
         J     &C.BSRTN890
&C.BSRTN800 EQU   *      NOT FOUND
         XR    0,0
         ST    0,&SUB
         LR    1,0
         ST    1,&INDEX
&C.BSRTN890 EQU   *
         LTR   15,15
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2VBSR1 0132-18182-19318-1434-00472-00460-00000-APLKS   06
         MACRO
&LABEL   AS2VBSR1 ,                                                    +
               &NTRYCNT=,                                              +
               &NTRY=(1,),                                             +
               &KEY=(1,),                                              +
               &ARGPTR=,                                               +
               &SRCHARG=,                                              +
               &VECTPTR=,                                              +
               &VECTOR=,                                               +
               &SUB=,                                                  +
               &INDEX=,                                                +
               &PREFIX=,                                               +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2VBSR1
.*    TITLE: BINARY SEARCH ALGORITHM (1)
.*     DATE: 2018-07-06
.*
.*     DESC: THIS MACRO WILL GENERATE A BINARY SEARCH
.*           ROUTINE THAT WILL RETURN THE SUBSCRIPT
.*           AND INDEX VALUE OF A MATCHING VECTOR
.*           ENTRY KEY, OR OF THE SMALLEST KEY GREATER
.*           THAN THE SEARCH KEY.
.*
.*    INPUT:
.*      NTRYCNT=   integer count of vector entries
.*      NTRY=(pos,len)
.*        pos      integer position of 1st vector entry
.*        len      integer length of each vector entry
.*      KEY=(pos,len)
.*        pos      integer position of KEY in vector entry
.*        len      integer length of KEY in vector entry
.*      ARGPTR=    address of search argument
.*     |SRCHARG=   search argument
.*      VECTPTR=   address of vector
.*     |VECTOR=    vector
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand binary search routine
.*                 D - expand TWA DSECT definition
.*                 E - expand  CALL logic
.*                 G - expand TWA initialization
.*                 L - expand TWA definitions
.*
.*    OUTPUT:
.*      SUB=       integer subscript of matching vector entry
.*      INDEX=     integer offset of matching vector entry
.*      R0         same value as SUB
.*      R1         same value as INDEX
.*      RF         return code (0=found, 4=not found, 8=invalid parms)
.*
.*  OPTIONS:
.*
.*      >>-AS2VBSR1-+------------------------+--->
.*
.*                >-+-NTRYCNT=---------------+--->
.*
.*                >-+-NTRY=-(-+------+-)-----+--->
.*                            +--pos-+
.*                            +-,len-+
.*
.*                >-+-KEY=-(-+------+-)------+--->
.*                           +--pos-+
.*                           +-,len-+
.*
.*                >-+-ARGPTR=----------------+--->
.*
.*                  +-SRCHARG=---------------+--->
.*
.*                >-+-VECTPTR=---------------+--->
.*
.*                  +-VECTOR=----------------+--->
.*
.*                >-+-SUB=-------------------+--->
.*
.*                >-+-INDEX=-----------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+---+--------------+---><
.*                        +-C-+    expand code
.*                        +-D-+    expand TWA DSECT
.*                        +-E-+    expand CALL
.*                        +-G-+    expand TWA init
.*                        +-L-+    expand TWA
.*
.* ALGORITHM:
.*
.*      lbnds = 1;
.*      ubnds = n;      /* nbr of vector entries */
.*      gteq = 0;       /* >= subscript */
.*      Do While lbnds <= ubnds;
.*        mid = (lbnds+ubnds)%2;
.*        Select;
.*          When srcharg < key of v(mid) Then;
.*            Do;
.*              ubnds = mid-1;
.*              gteq = mid;
.*            End;
.*          When srcharg > key of v(mid) Then;
.*            lbnds = mid+1;
.*          Otherwise;
.*            Return mid;
.*      End;
.*
.*      Return gteq;
.*
.*  REG USE: R0: work / sub
.*           R1: entry(mid) addr / index
.*           R2: srch arg addr
.*           R3: compare length
.*           RF: return code
.*               0 = entry found
.*               4 = entry not found
.*               8 = invalid parameters
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2VBSR1'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-07-01'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.BSRH030 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').BSRH032
&D       SETC  '&PREFIX(1)'
.BSRH032 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').BSRH034
&C       SETC  '&PREFIX(2)'
.BSRH034 ANOP
.BSRH100 ANOP
         AIF   (T'&MF NE 'O').BSRH110
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH110 ANOP
         AIF   ('&MF(1)' EQ 'C').BSRH800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'D').BSRH210    EXPAND TWA DSECT
         AIF   ('&MF(1)' EQ 'E').BSRH600    EXPAND CALL
         AIF   ('&MF(1)' EQ 'G').BSRH400    EXPAND TWA INIT
         AIF   ('&MF(1)' EQ 'L').BSRH200    EXPAND TWA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.BSRH200 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA)
         DS    0D
         AGO   .BSRH220
.BSRH210 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA) DSECT
&LABEL   DSECT
.BSRH220 ANOP
&D.BSTWA EQU   *,(13*4),C'X'  BINARY SEARCH (1) TRANSIENT WORK AREA
&D.BSNCNT DS    F             ..VECTOR ENTRY COUNT
&D.BSNPOS DS    F             ..POSITION OF 1ST ENTRY
&D.BSNLEN DS    F             ..ENTRY LENGTH
&D.BSKPOS DS    F             ..KEY POSITION
&D.BSKLEN DS    F             ..KEY LENGTH
&D.BS@ARG DS    A             ..SEARCH ARGUMENT ADDRESS
&D.BS@VCT DS    A             ..VECTOR ADDRESS
&D.BSNBEG DS    A             ..BS@VCT+BSNPOS-1
&D.BSKBEG DS    A             ..BSNBEG+BSKPOS-1
&D.BSLBND DS    F             ..LOWER BOUNDS
&D.BSUBND DS    F             ..UPPER BOUNDS
&D.BSMID DS    F              ..MID POINT SUBSCRIPT
&D.BSGTEQ DS    F             ..GTEQ POINT SUBSCRIPT
         MEXIT
.BSRH400 ANOP  ,    INITIALIZE TWA
         MNOTE *,'&MACNME - USING REG 0,15'
         XC    &D.BSTWA,&D.BSTWA   CLEAR BINARY SEARCH TWA
         AIF   (T'&NTRYCNT NE 'O').BSRH410
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH410 ANOP
         AIF   (T'&NTRYCNT EQ 'N').BSRH412
         AIF   ('&NTRYCNT'(1,1) EQ '(').BSRH414
         AIF   (T'&NTRYCNT EQ 'A' OR T'&NTRYCNT EQ 'F').BSRH416
         AIF   (T'&NTRYCNT EQ 'Y' OR T'&NTRYCNT EQ 'H').BSRH418
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.BSRH412 ANOP  ,    STORE NTRYCNT - SELF DEFINING TERM
         LA    0,&NTRYCNT
         ST    0,&D.BSNCNT    SAVE VECTOR ENTRY COUNT
         AGO   .BSRH420
.BSRH414 ANOP  ,    STORE REGISTER IN NTRYCNT
         ST    &NTRYCNT(1),&D.BSNCNT    SAVE VECTOR ENTRY COUNT
         AGO   .BSRH420
.BSRH416 ANOP  ,    SAVE 4-BYTE NTRYCNT
         MVC   &D.BSNCNT,&NTRYCNT  SAVE VECTOR ENTRY COUNT
         AGO   .BSRH420
.BSRH418 ANOP  ,    SAVE 2-BYTE NTRYCNT
         LH    0,&NTRYCNT
         ST    0,&D.BSNCNT    SAVE VECTOR ENTRY COUNT
.BSRH420 ANOP
         AIF   (T'&NTRY NE 'O').BSRH430
         MNOTE 8,'&MACNME - NTRY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH430 ANOP
         AIF   ('&NTRY'(1,1) EQ '(' AND '&NTRY'(K'&NTRY,1) EQ ')').BSRH+
               432
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.BSRH432 ANOP
         AIF   (N'&NTRY EQ 2).BSRH434
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.BSRH434 ANOP
         AIF   (T'&NTRY(1) NE 'O').BSRH440
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH440 ANOP
         AIF   (T'&NTRY(1) EQ 'N').BSRH442
         AIF   (T'&NTRY(1) EQ 'A' OR T'&NTRY(1) EQ 'F').BSRH446
         AIF   (T'&NTRY(1) EQ 'Y' OR T'&NTRY(1) EQ 'H').BSRH448
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.BSRH442 ANOP  ,    STORE NTRY POS - SELF DEFINING TERM
         LA    0,&NTRY(1)
         ST    0,&D.BSNPOS    SAVE VECTOR 1ST NTRY POS
         AGO   .BSRH450
.BSRH446 ANOP  ,    SAVE 4-BYTE NTRY POS
         MVC   &D.BSNPOS,&NTRY(1)  SAVE VECTOR 1ST NTRY POS
         AGO   .BSRH450
.BSRH448 ANOP  ,    SAVE 2-BYTE NTRY POS
         LH    0,&NTRY(1)
         ST    0,&D.BSNPOS    SAVE VECTOR 1ST NTRY POS
.BSRH450 ANOP
.BSRH460 ANOP
         AIF   (T'&NTRY(2) NE 'O').BSRH470
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH470 ANOP
         AIF   (T'&NTRY(2) EQ 'N').BSRH472
         AIF   (T'&NTRY(2) EQ 'A' OR T'&NTRY(2) EQ 'F').BSRH476
         AIF   (T'&NTRY(2) EQ 'Y' OR T'&NTRY(2) EQ 'H').BSRH478
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 2 INVALID'
         AGO   .ERR0001
.BSRH472 ANOP  ,    STORE NTRY LEN - SELF DEFINING TERM
         LA    0,&NTRY(2)
         ST    0,&D.BSNLEN    SAVE VECTOR NTRY LEN
         AGO   .BSRH480
.BSRH476 ANOP  ,    SAVE 4-BYTE NTRY LEN
         MVC   &D.BSNLEN,&NTRY(2)  SAVE VECTOR NTRY LEN
         AGO   .BSRH480
.BSRH478 ANOP  ,    SAVE 2-BYTE NTRY LEN
         LH    0,&NTRY(2)
         ST    0,&D.BSNLEN    SAVE VECTOR NTRY LEN
.BSRH480 ANOP
.BSRH490 ANOP
         AIF   (T'&KEY NE 'O').BSRH4A0
         MNOTE 8,'&MACNME - KEY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH4A0 ANOP
         AIF   ('&KEY'(1,1) EQ '(' AND '&KEY'(K'&KEY,1) EQ ')').BSRH4A2
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.BSRH4A2 ANOP
         AIF   (N'&KEY EQ 2).BSRH4A4
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.BSRH4A4 ANOP
         AIF   (T'&KEY(1) NE 'O').BSRH4B0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH4B0 ANOP
         AIF   (T'&KEY(1) EQ 'N').BSRH4B2
         AIF   (T'&KEY(1) EQ 'A' OR T'&KEY(1) EQ 'F').BSRH4B6
         AIF   (T'&KEY(1) EQ 'Y' OR T'&KEY(1) EQ 'H').BSRH4B8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.BSRH4B2 ANOP  ,    STORE KEY POS - SELF DEFINING TERM
         LA    0,&KEY(1)
         ST    0,&D.BSKPOS   SAVE VECTOR 1ST KEY POS
         AGO   .BSRH4C0
.BSRH4B6 ANOP  ,    SAVE 4-BYTE KEY POS
         MVC   &D.BSKPOS,&KEY(1)   SAVE VECTOR 1ST KEY POS
         AGO   .BSRH4C0
.BSRH4B8 ANOP  ,    SAVE 2-BYTE KEY POS
         LH    0,&KEY(1)
         ST    0,&D.BSKPOS    SAVE VECTOR 1ST KEY POS
.BSRH4C0 ANOP
.BSRH4D0 ANOP
         AIF   (T'&KEY(2) NE 'O').BSRH4E0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.BSRH4E0 ANOP
         AIF   (T'&KEY(2) EQ 'N').BSRH4E2
         AIF   (T'&KEY(2) EQ 'A' OR T'&KEY(2) EQ 'F').BSRH4E6
         AIF   (T'&KEY(2) EQ 'Y' OR T'&KEY(2) EQ 'H').BSRH4E8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.BSRH4E2 ANOP  ,    STORE KEY LEN - SELF DEFINING TERM
         LA    0,&KEY(2)
         ST    0,&D.BSKLEN    SAVE VECTOR KEY LEN
         AGO   .BSRH4F0
.BSRH4E6 ANOP  ,    SAVE 4-BYTE KEY LEN
         MVC   &D.BSKLEN,&KEY(2)   SAVE VECTOR KEY LEN
         AGO   .BSRH4F0
.BSRH4E8 ANOP  ,    SAVE 2-BYTE KEY LEN
         LH    0,&KEY(2)
         ST    0,&D.BSKLEN    SAVE VECTOR KEY LEN
.BSRH4F0 ANOP
.BSRH4G0 ANOP
         AIF   (T'&SRCHARG NE 'O').BSRH4I0
         AIF   (T'&ARGPTR NE 'O').BSRH4H0
         MNOTE 8,'&MACNME - SRCHARG OR ARGPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.BSRH4H0 ANOP
         AIF   ('&ARGPTR'(1,1) EQ '(').BSRH4H4
         AIF   (T'&ARGPTR EQ 'A').BSRH4H6
         MNOTE 8,'&MACNME - ARGPTR KEYWORD PARAMETER INVALID'
         AGO   .ERR0001
.BSRH4H4 ANOP  ,    STORE REGISTER IN ARGPTR
         ST    &ARGPTR(1),&D.BS@ARG     SAVE SRCH ARG ADDR
         AGO   .BSRH4K0
.BSRH4H6 ANOP  ,    SAVE 4-BYTE ARGPTR
         MVC   &D.BS@ARG,&ARGPTR   SAVE SRCH ARG ADDR
         AGO   .BSRH4K0
.BSRH4I0 ANOP
.BSRH4J0 ANOP
.BSRH4J4 ANOP  ,    STORE ADDRESS OF SRCHARG
         LA    0,&SRCHARG
         ST    0,&D.BS@ARG    SAVE SRCH ARG ADDR
.BSRH4K0 ANOP
         AIF   (T'&VECTOR NE 'O').BSRH4M0
         AIF   (T'&VECTPTR NE 'O').BSRH4L0
         MNOTE 8,'&MACNME - VECTOR OR VECTPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.BSRH4L0 ANOP
         AIF   ('&VECTPTR'(1,1) EQ '(').BSRH4L4
         AIF   (T'&VECTPTR EQ 'A' OR T'&VECTPTR EQ 'V').BSRH4L6
         MNOTE 8,'&MACNME - VECTPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.BSRH4L4 ANOP  ,    STORE REGISTER IN VECTPTR
         ST    &VECTPTR(1),&D.BS@VCT    SAVE VECTOR ADDR
         AGO   .BSRH4O0
.BSRH4L6 ANOP  ,    SAVE 4-BYTE VECTPTR
         MVC   &D.BS@VCT,&VECTPTR  SAVE VECTOR ADDR
         AGO   .BSRH4O0
.BSRH4M0 ANOP
.BSRH4N0 ANOP
.BSRH4N4 ANOP  ,    STORE ADDRESS OF VECTOR
         LA    0,&VECTOR
         ST    0,&D.BS@VCT    SAVE VECTOR ADDR
.BSRH4O0 ANOP
         LA    15,8           set init error
         CLC   &D.BSKLEN,=F'256'   Q. key len > 256
         JH    &C.BSRTN099         A. yes, error
         CLC   &D.BSKLEN,&D.BSNLEN Q. key len > entry len
         JH    &C.BSRTN099         A. yes, error
         L     0,&D.BSKPOS
         AHI   0,-1           make relative to zero
         A     0,&D.BSKLEN
         C     0,&D.BSNLEN         Q. key exceedes entry len
         JH    &C.BSRTN099         A. yes, error
         LA    15,4           set not found
         ICM   0,15,&D.BSNCNT      Q. any vector entries
         JZ    &C.BSRTN099         A. no, not found
         L     0,&D.BS@VCT
         A     0,&D.BSNPOS    add position of 1st entry
         AHI   0,-1           make relative to zero
         ST    0,&D.BSNBEG    save vector entry begin addr
         A     0,&D.BSKPOS    add position of 1st key
         AHI   0,-1           make relative to zero
         ST    0,&D.BSKBEG    save vector entry key begin addr
         XR    15,15          clear return code
&C.BSRTN099 EQU   *
         LTR   15,15
.BSRH4P0 ANOP
         MEXIT
.BSRH600 ANOP  ,    CALL BINARY SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 14'
.BSRH610 ANOP
         BRAS  14,&C.BSRTN100 call binary search routine
         MEXIT
.BSRH800 ANOP  ,    EXPAND BINARY SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 0,1,2,3,15'
         AIF   (T'&SUB NE 'O').BSRH810
         MNOTE 8,'&MACNME - SUB KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH810 ANOP
         AIF   (T'&SUB EQ 'F').BSRH820
         MNOTE 8,'&MACNME - SUB KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.BSRH820 ANOP
         AIF   (T'&INDEX NE 'O').BSRH822
         MNOTE 8,'&MACNME - INDEX KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.BSRH822 ANOP
         AIF   (T'&INDEX EQ 'F').BSRH830
         MNOTE 8,'&MACNME - INDEX KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.BSRH830 ANOP
&C.BSRTN100 EQU   *      BINARY SEARCH ROUTINE (1)
         LA    15,4           set not found
*        LOOP INIT
         MVC   &D.BSLBND,=F'1'
         MVC   &D.BSUBND,&D.BSNCNT
         XC    &D.BSGTEQ,&D.BSGTEQ
         L     2,&D.BS@ARG    prime reg with search arg addr
         L     3,&D.BSKLEN    prime reg with key len
         AHI   3,-1
&C.BSRTN200 EQU   *      DO WHILE LOOP
         L     1,&D.BSLBND
         C     1,&D.BSUBND    Q. lower bounds <= upper bounds
         JH    &C.BSRTN300    A. no, go exit loop
*        compute mid point
         A     1,&D.BSUBND
         SRL   1,1
         ST    1,&D.BSMID     mid = (lbnd+ubnd)%2
         LR    0,1            save mid point
*        compute mid point key addr
         AHI   1,-1           compute
         MS    1,&D.BSNLEN    ..key index value
         A     1,&D.BSKBEG
*        check for match
         J     *+4+6
         CLC   0(0,2),0(1)    Q. srch arg = key of v(mid)
*+4+6    EQU   *
         EX    3,*-6
         JL    &C.BSRTN210    A. srch arg < key of v(mid)
         JH    &C.BSRTN220    A. srch arg > key of v(mid)
         J     &C.BSRTN310    A. srch arg = key of v(mid)
         SPACE 1
&C.BSRTN210 EQU   *      srch arg < key of v(mid)
         ST    0,&D.BSGTEQ    gteq = mid point
         AHI   0,-1
         ST    0,&D.BSUBND    upper bnds = mid point - 1
         J     &C.BSRTN200    loop back to begin
         SPACE 1
&C.BSRTN220 EQU   *      srch arg > key of v(mid)
         AHI   0,1
         ST    0,&D.BSLBND    lower bnds = mid point + 1
         J     &C.BSRTN200    loop back to begin
         SPACE 1
&C.BSRTN300 EQU   *      RETURN GTEQ
         L     0,&D.BSGTEQ
&C.BSRTN310 EQU   *      RETURN GTEQ/EQ
         ST    0,&SUB
         LR    1,0
         LTR   0,0            Q. was something found
         JNZ   &C.BSRTN312    A. yes, bypass
*        not found
         ST    1,&INDEX
         J     &C.BSRTN800
         SPACE 1
&C.BSRTN312 EQU   *
*        compute gteq/eq key index
         AHI   1,-1           compute
         MS    1,&D.BSNLEN    ..entry index value
         ST    1,&INDEX
         XR    15,15          set return code to 0
&C.BSRTN800 EQU   *      EXIT
         LTR   15,15
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2VFSRH 0144-18185-19318-1438-00553-00541-00000-APLKS   10
         MACRO
&LABEL   AS2VFSRH ,                                                    +
               &NTRYCNT=,                                              +
               &NTRY=(1,),                                             +
               &KEY=(1,),                                              +
               &ARGPTR=,                                               +
               &SRCHARG=,                                              +
               &VECTPTR=,                                              +
               &VECTOR=,                                               +
               &FIBSUB=,                                               +
               &SUB=,                                                  +
               &INDEX=,                                                +
               &PREFIX=,                                               +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2VFSRH
.*    TITLE: FIBONACCIAN SEARCH ALGORITHM
.*     DATE: 2018-07-15
.*
.*     DESC: THIS MACRO WILL GENERATE A FIBONACCIAN SEARCH
.*           ROUTINE THAT WILL RETURN A MATCHING
.*           VECTOR ENTRY IN A VECTOR SORTED IN ASCENDING
.*           ORDER BY KEY.  NO SPECIAL HANDLING OF
.*           DUPLICATE KEYS.
.*
.*    INPUT:
.*      NTRYCNT=   integer count of vector entries
.*      NTRY=(pos,len)
.*        pos      integer position of 1st vector entry
.*        len      integer length of each vector entry
.*      KEY=(pos,len)
.*        pos      integer position of KEY in vector entry
.*        len      integer length of KEY in vector entry
.*      ARGPTR=    address of search argument
.*     |SRCHARG=   search argument
.*      VECTPTR=   address of vector
.*     |VECTOR=    vector
.*      FIBSUB=    subscript of Fibonacci vector that points
.*                 to the entry >= the number of occurs
.*                 of the vector being searched, enter 0 for
.*                 first access
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand fibonaccian search routine
.*                 D - expand TWA DSECT definition
.*                 E - expand CALL logic
.*                 G - expand TWA initialization
.*                 L - expand TWA definitions
.*            STATIC - expand PSA definitions
.*
.*    OUTPUT:
.*      FIBSUB=    subscript of Fibonacci vector that points
.*                 to the entry >= the number of occurs
.*                 of the vector being searched, use returned
.*                 value for additional accesses to the same
.*                 input vector
.*      SUB=       integer subscript of matching vector entry
.*      INDEX=     integer offset of matching vector entry
.*      R0         same value as SUB
.*      R1         same value as INDEX
.*      RF         return code (0=found, 4=not found, 8=invalid parms)
.*
.*  OPTIONS:
.*
.*      >>-AS2VFSRH-+------------------------+--->
.*
.*                >-+-NTRYCNT=---------------+--->
.*
.*                >-+-NTRY=-(-+------+-)-----+--->
.*                            +--pos-+
.*                            +-,len-+
.*
.*                >-+-KEY=-(-+------+-)------+--->
.*                           +--pos-+
.*                           +-,len-+
.*
.*                >-+-ARGPTR=----------------+--->
.*
.*                  +-SRCHARG=---------------+--->
.*
.*                >-+-VECTPTR=---------------+--->
.*
.*                  +-VECTOR=----------------+--->
.*
.*                >-+-SUB=-------------------+--->
.*
.*                >-+-INDEX=-----------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+--------+---------+---><
.*                        +-C------+  expand code
.*                        +-D------+  expand TWA DSECT
.*                        +-E------+  expand CALL
.*                        +-G------+  expand TWA init
.*                        +-L------+  expand TWA
.*                        +-STATIC-+  expand PSA
.*
.* ALGORITHM:
.*
.*      F is the Fibonacci number vector
.*      V is the vector
.*      n is the number of entries in vector V
.*      s is the search argument
.*      k is the subscript of the Fibonacci vector entry
.*        that is >= n
.*
.*      F.0 = 32;
.*      F.1 = 0; F.2 = 1; F.3 = 1; F.4 = 2; F.5 = 3;
.*      F.6 = 5; F.7 = 8; F.8 = 13; F.9 = 21; F.10 = 34;
.*      F.11 = 55; F.12 = 89; ...
.*
.*      Parse ARG n,s,k;
.*
.*      If k = 0 Then;
.*        /* return the subscript of the Fib number >= n */
.*        k = BSRCH1(F(0),n);
.*
.*      lbnds = 0;
.*      Do While k>0;
.*        k = k-1;
.*        ubnds = lbnds+F.k;
.*        Select;
.*          When ubnds > n | srcharg < key of v(ubnds) Then;
.*            /* index is out of bounds or srcharg in 1st part */
.*            Nop;
.*          When srcharg > key of v(ubnds) Then;
.*            /* srcharg in 2nd part */
.*            Do;
.*              lbnds = ubnds;
.*              k = k-1;
.*            End;
.*          Otherwise;
.*            /* srcharg found in v(ubnds) */
.*            Return ubnds;
.*        End;
.*      End;
.*
.*      /* srcharg not found */
.*      Return 0;
.*
.*  REG USE: R0: work / sub
.*           R1: work / index
.*           R2: srcharg addr
.*           R3: srcharg len
.*           RF: return code
.*               0 = entry found
.*               4 = entry not found
.*               8 = invalid parameters
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLA  &FIB(32),&K,&FIBNCNT,&I
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D
&K       SETA  32   needs to match nbr of occur(s) of &FIB
.*                  must be a multiple of 8
&FIBNCNT SETA  3
&FIB(1)  SETA  0
&FIB(2)  SETA  1
&I       SETA  3
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2VFSRH'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-07-15'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.FSRH010 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').FSRH012
&D       SETC  '&PREFIX(1)'
.FSRH012 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').FSRH014
&C       SETC  '&PREFIX(2)'
.FSRH014 ANOP
.FSRH030 ANOP
         AIF   (T'&MF NE 'O').FSRH040
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.FSRH040 ANOP
         AIF   ('&MF(1)' EQ 'C').FSRH800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'D').FSRH210    EXPAND TWA DSECT
         AIF   ('&MF(1)' EQ 'E').FSRH600    EXPAND CALL
         AIF   ('&MF(1)' EQ 'G').FSRH400    EXPAND TWA INIT
         AIF   ('&MF(1)' EQ 'L').FSRH200    EXPAND TWA
         AIF   ('&MF(1)' EQ 'STATIC').FSRH100 EXPAND PSA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.FSRH100 ANOP  ,    EXPAND PERSISTENT STORAGE AREA (PSA)
&FIB(&I) SETA  &FIB(&I-2)+&FIB(&I-1)
         AIF   (&I GE &K).FSHR110
&I       SETA  &I+1
         AGO   .FSRH100
.FSHR110 ANOP
         DS    0D
FSPSA    EQU   *              FIBONACCI PERSISTENT STORAGE AREA (PSA)
FSFIB    EQU   *              ..FIBONACCI VECTOR
&I       SETA  1
.FSHR112 ANOP
         DC    A(&FIB(&I),&FIB(&I+1),&FIB(&I+2),&FIB(&I+3),&FIB(&I+4),&+
               FIB(&I+5),&FIB(&I+6),&FIB(&I+7))
&I       SETA  &I+8
         AIF   (&I LT &K).FSHR112
FSFIB#   DC    A((*-FSFIB)/4)      NBR OF VECTOR ENTRIES
         MEXIT
.FSRH200 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA)
         DS    0D
         AGO   .FSRH220
.FSRH210 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA) DSECT
&LABEL   DSECT
.FSRH220 ANOP
&D.FSTWA EQU   *,(13*4),C'X'  FIBONACCIAN SEARCH TRANSIENT WORK AREA
&D.FSNCNT DS    F             ..VECTOR ENTRY COUNT
&D.FSNPOS DS    F             ..POSITION OF 1ST ENTRY
&D.FSNLEN DS    F             ..ENTRY LENGTH
&D.FSKPOS DS    F             ..KEY POSITION
&D.FSKLEN DS    F             ..KEY LENGTH
&D.FS@ARG DS    A             ..SEARCH ARGUMENT ADDRESS
&D.FS@VCT DS    A             ..VECTOR ADDRESS
&D.FSNBEG DS    A             ..FS@VCT+FSNPOS-1
&D.FSKBEG DS    A             ..FSNBEG+FSKPOS-1
&D.FSLBND DS    F             ..LOWER BOUNDS
&D.FSUBND DS    F             ..UPPER BOUNDS
&D.FSFIBK DS    F             ..INITIAL K WHERE FIB(K) >= FSNCNT
&D.FSK    DS    F             ..K
         MEXIT
.FSRH400 ANOP  ,    INITIALIZE TWA
         MNOTE *,'&MACNME - USING REG 0,15'
         XC    &D.FSTWA,&D.FSTWA   CLEAR FIBONACCIAN SEARCH TWA
         AIF   (T'&NTRYCNT NE 'O').FSRH410
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.FSRH410 ANOP
         AIF   (T'&NTRYCNT EQ 'N').FSRH412
         AIF   ('&NTRYCNT'(1,1) EQ '(').FSRH414
         AIF   (T'&NTRYCNT EQ 'A' OR T'&NTRYCNT EQ 'F').FSRH416
         AIF   (T'&NTRYCNT EQ 'Y' OR T'&NTRYCNT EQ 'H').FSRH418
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.FSRH412 ANOP  ,    STORE NTRYCNT - SELF DEFINING TERM
         LA    0,&NTRYCNT
         ST    0,&D.FSNCNT    SAVE VECTOR ENTRY COUNT
         AGO   .FSRH420
.FSRH414 ANOP  ,    STORE REGISTER IN NTRYCNT
         ST    &NTRYCNT(1),&D.FSNCNT    SAVE VECTOR ENTRY COUNT
         AGO   .FSRH420
.FSRH416 ANOP  ,    SAVE 4-BYTE NTRYCNT
         MVC   &D.FSNCNT,&NTRYCNT  SAVE VECTOR ENTRY COUNT
         AGO   .FSRH420
.FSRH418 ANOP  ,    SAVE 2-BYTE NTRYCNT
         LH    0,&NTRYCNT
         ST    0,&D.FSNCNT    SAVE VECTOR ENTRY COUNT
.FSRH420 ANOP
         AIF   (T'&NTRY NE 'O').FSRH430
         MNOTE 8,'&MACNME - NTRY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.FSRH430 ANOP
         AIF   ('&NTRY'(1,1) EQ '(' AND '&NTRY'(K'&NTRY,1) EQ ')').FSRH+
               432
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.FSRH432 ANOP
         AIF   (N'&NTRY EQ 2).FSRH434
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.FSRH434 ANOP
         AIF   (T'&NTRY(1) NE 'O').FSRH440
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.FSRH440 ANOP
         AIF   (T'&NTRY(1) EQ 'N').FSRH442
         AIF   (T'&NTRY(1) EQ 'A' OR T'&NTRY(1) EQ 'F').FSRH446
         AIF   (T'&NTRY(1) EQ 'Y' OR T'&NTRY(1) EQ 'H').FSRH448
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.FSRH442 ANOP  ,    STORE NTRY POS - SELF DEFINING TERM
         LA    0,&NTRY(1)
         ST    0,&D.FSNPOS    SAVE VECTOR 1ST NTRY POS
         AGO   .FSRH450
.FSRH446 ANOP  ,    SAVE 4-BYTE NTRY POS
         MVC   &D.FSNPOS,&NTRY(1)  SAVE VECTOR 1ST NTRY POS
         AGO   .FSRH450
.FSRH448 ANOP  ,    SAVE 2-BYTE NTRY POS
         LH    0,&NTRY(1)
         ST    0,&D.FSNPOS    SAVE VECTOR 1ST NTRY POS
.FSRH450 ANOP
.FSRH460 ANOP
         AIF   (T'&NTRY(2) NE 'O').FSRH470
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.FSRH470 ANOP
         AIF   (T'&NTRY(2) EQ 'N').FSRH472
         AIF   (T'&NTRY(2) EQ 'A' OR T'&NTRY(2) EQ 'F').FSRH476
         AIF   (T'&NTRY(2) EQ 'Y' OR T'&NTRY(2) EQ 'H').FSRH478
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 2 INVALID'
         AGO   .ERR0001
.FSRH472 ANOP  ,    STORE NTRY LEN - SELF DEFINING TERM
         LA    0,&NTRY(2)
         ST    0,&D.FSNLEN    SAVE VECTOR NTRY LEN
         AGO   .FSRH480
.FSRH476 ANOP  ,    SAVE 4-BYTE NTRY LEN
         MVC   &D.FSNLEN,&NTRY(2)  SAVE VECTOR NTRY LEN
         AGO   .FSRH480
.FSRH478 ANOP  ,    SAVE 2-BYTE NTRY LEN
         LH    0,&NTRY(2)
         ST    0,&D.FSNLEN    SAVE VECTOR NTRY LEN
.FSRH480 ANOP
.FSRH490 ANOP
         AIF   (T'&KEY NE 'O').FSRH4A0
         MNOTE 8,'&MACNME - KEY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.FSRH4A0 ANOP
         AIF   ('&KEY'(1,1) EQ '(' AND '&KEY'(K'&KEY,1) EQ ')').FSRH4A2
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.FSRH4A2 ANOP
         AIF   (N'&KEY EQ 2).FSRH4A4
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.FSRH4A4 ANOP
         AIF   (T'&KEY(1) NE 'O').FSRH4B0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.FSRH4B0 ANOP
         AIF   (T'&KEY(1) EQ 'N').FSRH4B2
         AIF   (T'&KEY(1) EQ 'A' OR T'&KEY(1) EQ 'F').FSRH4B6
         AIF   (T'&KEY(1) EQ 'Y' OR T'&KEY(1) EQ 'H').FSRH4B8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.FSRH4B2 ANOP  ,    STORE KEY POS - SELF DEFINING TERM
         LA    0,&KEY(1)
         ST    0,&D.FSKPOS    SAVE VECTOR 1ST KEY POS
         AGO   .FSRH4C0
.FSRH4B6 ANOP  ,    SAVE 4-BYTE KEY POS
         MVC   &D.FSKPOS,&KEY(1)   SAVE VECTOR 1ST KEY POS
         AGO   .FSRH4C0
.FSRH4B8 ANOP  ,    SAVE 2-BYTE KEY POS
         LH    0,&KEY(1)
         ST    0,&D.FSKPOS    SAVE VECTOR 1ST KEY POS
.FSRH4C0 ANOP
.FSRH4D0 ANOP
         AIF   (T'&KEY(2) NE 'O').FSRH4E0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.FSRH4E0 ANOP
         AIF   (T'&KEY(2) EQ 'N').FSRH4E2
         AIF   (T'&KEY(2) EQ 'A' OR T'&KEY(2) EQ 'F').FSRH4E6
         AIF   (T'&KEY(2) EQ 'Y' OR T'&KEY(2) EQ 'H').FSRH4E8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.FSRH4E2 ANOP  ,    STORE KEY LEN - SELF DEFINING TERM
         LA    0,&KEY(2)
         ST    0,&D.FSKLEN    SAVE VECTOR KEY LEN
         AGO   .FSRH4F0
.FSRH4E6 ANOP  ,    SAVE 4-BYTE KEY LEN
         MVC   &D.FSKLEN,&KEY(2)   SAVE VECTOR KEY LEN
         AGO   .FSRH4F0
.FSRH4E8 ANOP  ,    SAVE 2-BYTE KEY LEN
         LH    0,&KEY(2)
         ST    0,&D.FSKLEN    SAVE VECTOR KEY LEN
.FSRH4F0 ANOP
.FSRH4G0 ANOP
         AIF   (T'&SRCHARG NE 'O').FSRH4I0
         AIF   (T'&ARGPTR NE 'O').FSRH4H0
         MNOTE 8,'&MACNME - SRCHARG OR ARGPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.FSRH4H0 ANOP
         AIF   ('&ARGPTR'(1,1) EQ '(').FSRH4H4
         AIF   (T'&ARGPTR EQ 'A').FSRH4H6
         MNOTE 8,'&MACNME - ARGPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.FSRH4H4 ANOP  ,    STORE REGISTER IN ARGPTR
         ST    &ARGPTR(1),&D.FS@ARG     SAVE SRCH ARG ADDR
         AGO   .FSRH4K0
.FSRH4H6 ANOP  ,    SAVE 4-BYTE ARGPTR
         MVC   &D.FS@ARG,&ARGPTR   SAVE SRCH ARG ADDR
         AGO   .FSRH4K0
.FSRH4I0 ANOP
.FSRH4J0 ANOP
.FSRH4J4 ANOP  ,    STORE ADDRESS OF SRCHARG
         LA    0,&SRCHARG
         ST    0,&D.FS@ARG    SAVE SRCH ARG ADDR
.FSRH4K0 ANOP
         AIF   (T'&VECTOR NE 'O').FSRH4M0
         AIF   (T'&VECTPTR NE 'O').FSRH4L0
         MNOTE 8,'&MACNME - VECTOR OR VECTPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.FSRH4L0 ANOP
         AIF   ('&VECTPTR'(1,1) EQ '(').FSRH4L4
         AIF   (T'&VECTPTR EQ 'A' OR T'&VECTPTR EQ 'V').FSRH4L6
         MNOTE 8,'&MACNME - VECTPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.FSRH4L4 ANOP  ,    STORE REGISTER IN VECTPTR
         ST    &VECTPTR(1),&D.FS@VCT    SAVE VECTOR ADDR
         AGO   .FSRH4O0
.FSRH4L6 ANOP  ,    SAVE 4-BYTE VECTPTR
         MVC   &D.FS@VCT,&VECTPTR  SAVE VECTOR ADDR
         AGO   .FSRH4O0
.FSRH4M0 ANOP
.FSRH4N0 ANOP
.FSRH4N4 ANOP  ,    STORE ADDRESS OF VECTOR
         LA    0,&VECTOR
         ST    0,&D.FS@VCT    SAVE VECTOR ADDR
.FSRH4O0 ANOP
         AIF   (T'&FIBSUB EQ 'N').FSRH4O2
         AIF   (T'&FIBSUB EQ 'A' OR T'&FIBSUB EQ 'F').FSRH4O4
         MNOTE 8,'&MACNME - FIBSUB KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.FSRH4O2 ANOP  ,    STORE FIBSUB - SELF DEFINING TERM
         LA    0,&FIBSUB
         ST    0,&D.FSFIBK    SAVE INITIAL K OF FIB(K)>=FSNCNT
         AGO   .FSRH4Q0
.FSRH4O4 ANOP  ,    SAVE 4-BYTE FIBSUB
         MVC   &D.FSFIBK,&FIBSUB   SAVE INITAL K OF FIB(K)>=FSNCNT
.FSRH4Q0 ANOP
         LA    15,8           set init error
         L     1,FSFIB#       retrieve FIB count
         AHI   1,-1
         SLL   1,2            multiply by 4
         LA    1,FSFIB(1)
         CLC   0(4,1),&D.FSNCNT    Q. FIB contain an entry large
*                                  enough for vector count
         JL    &C.FSRTN099         A. no, error
         OC    &D.FSFIBK,&D.FSFIBK Q. did caller pass FIBSUB
         JNZ   &C.FSRTN020         A. yes, bypass
         AS2RESTK PUSH             save caller's R14
         AS2VBSR1 MF=E             A. no, locate entry in FIB vector
         AS2RESTK POP              restore caller's R14
&C.FSRTN020 EQU   *
         MVC   &FIBSUB,&D.FSFIBK
         CLC   &D.FSKLEN,=F'256'   Q. key len > 256
         JH    &C.FSRTN099         A. yes, error
         CLC   &D.FSKLEN,&D.FSNLEN Q. key len > entry len
         JH    &D.FSRTN099         A. yes, error
         SPACE 1
         L     0,&D.FSKPOS
         AHI   0,-1           make relative to zero
         A     0,&D.FSKLEN
         C     0,&D.FSNLEN         Q. key exceedes entry len
         JH    &C.FSRTN099         A. yes, error
         LA    15,4           set not found
         ICM   0,15,&D.FSNCNT      Q. any vector entries
         JZ    &C.FSRTN099         A. no, not found
         SPACE 1
         L     0,&D.FS@VCT
         A     0,&D.FSNPOS    add position of 1st entry
         AHI   0,-1           make relative to zero
         ST    0,&D.FSNBEG    save vector entry begin addr
         A     0,&D.FSKPOS    add position of 1st key
         AHI   0,-1           make relative to zero
         ST    0,&D.FSKBEG    save vector entry key begin addr
         XR    15,15          clear return code
&C.FSRTN099 EQU   *
         LTR   15,15
.FSHR4R0 ANOP
         MEXIT
.FSRH600 ANOP  ,    CALL FIBONACCIAN SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 14'
.FSRH610 ANOP
         BRAS  14,&C.FSRTN100 call fibonaccian search routine
         MEXIT
.FSRH800 ANOP  ,    EXPAND FIBONACCIAN SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 0,1,2,3,15'
         AIF   (T'&SUB NE 'O').FSRH810
         MNOTE 8,'&MACNME - SUB KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.FSRH810 ANOP
         AIF   (T'&SUB EQ 'F').FSRH820
         MNOTE 8,'&MACNME - SUB KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.FSRH820 ANOP
         AIF   (T'&INDEX NE 'O').FSRH822
         MNOTE 8,'&MACNME - INDEX KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.FSRH822 ANOP
         AIF   (T'&INDEX EQ 'F').FSRH840
         MNOTE 8,'&MACNME - INDEX KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.FSRH840 ANOP
&C.FSRTN100 EQU   *      FIBONACCIAN SEARCH ROUTINE
         LA    15,4           set not found
         XC    &D.FSLBND,&D.FSLBND init lower bounds
         MVC   &D.FSK,&D.FSFIBK    k
         L     2,&D.FS@ARG    prime reg with search arg addr
         L     3,&D.FSKLEN    prime reg with key len
         AHI   3,-1
&C.FSRTN200 EQU   *      DO WHILE LOOP
         ICM   1,15,&D.FSK    Q. FIB vector subscript = 0
         JZ    &C.FSRTN800    A. yes, not found
         SPACE 1
         AHI   1,-1
         ST    1,&D.FSK       k = k-1
         SPACE 1
         AHI   1,-1
         SLL   1,2            multiply by 4
         L     1,FSFIB(R1)    F(k)
         A     1,&D.FSLBND
         ST    1,&D.FSUBND    ubnds = lbnds+F(k)
         SPACE 1
         CLC   &D.FSUBND,&D.FSNCNT Q. ubnds > n
         JH    &C.FSRTN200         A. yes, loop back
         SPACE 1
         LR    0,1            save temp ubnds
         AHI   1,-1           compute
         MS    1,&D.FSNLEN    ..key index value
         A     1,&D.FSKBEG
         J     *+4+6
         CLC   0(0,2),0(1)    Q. srcharg < v(ubnds)
*+4+6    EQU   *
         EX    3,*-6
         JL    &C.FSRTN200    A. srcharg < v(ubnds)
         JE    &C.FSRTN810    A. srcharg = v(ubnds)
*                             A. srcharg > v(ubnds)
         MVC   &D.FSLBND,&D.FSUBND lbnds = ubnds
         L     1,&D.FSK
         AHI   1,-1
         ST    1,&D.FSK       k = k-1
         J     &C.FSRTN200
         SPACE 1
&C.FSRTN800 EQU   *      NOT FOUND
         XR    0,0
         ST    0,&SUB
         LR    1,0
         ST    1,&INDEX
         J     &C.FSRTN890
         SPACE 1
&C.FSRTN810 EQU   *      FOUND
         ST    0,&SUB
         LR    1,0            retrieve temp ubnds
         AHI   1,-1           compute
         MS    1,&D.FSNLEN    ..key index value
         ST    1,&INDEX
         XR    15,15
&C.FSRTN890 EQU   *      EXIT
         LTR   15,15
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2VHSRT 0135-18339-19318-1439-00631-00632-00000-APLKS   22
         MACRO
&LABEL   AS2VHSRT ,                                                    +
               &NTRYCNT=,                                              +
               &NTRY=(1,),                                             +
               &KEY=(1,),                                              +
               &VECTPTR=,                                              +
               &VECTOR=,                                               +
               &PREFIX=,                                               +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2VHSRT
.*    TITLE: VECTOR HEAP SORT ALGORITHM
.*     DATE: 2018-06-11
.*
.*     DESC: THIS MACRO WILL GENERATE A HEAP SORT ROUTINE.
.*           SORTING A KEY IN ASCENDING ORDER.
.*           IN-PLACE, NON-STABLE SORT THAT RUNS IN
.*           O(1.8n lg n) TIME.
.*
.*    INPUT:
.*      NTRYCNT=   integer count of vector entries
.*      NTRY=(pos,len)
.*        pos      integer position of 1st vector entry
.*        len      integer length <=256 of each vector entry
.*      KEY=(pos,len)
.*        pos      integer position of KEY in vector entry
.*        len      integer length of KEY in vector entry
.*      VECTPTR=   address of vector
.*     |VECTOR=    vector
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand heap sort routine
.*                 D - expand TWA DSECT definition
.*                 E - expand  CALL logic
.*                 G - expand TWA initialization
.*                 L - expand TWA definitions
.*
.*    OUTPUT:
.*      RF         return code (0=successful,
.*                              4=no entries to sort,
.*                              8=not successful)
.*
.*  OPTIONS:
.*
.*      >>-AS2VHSRT-+------------------------+--->
.*
.*                >-+-NTRYCNT=---------------+--->
.*
.*                >-+-NTRY=-(-+------+-)-----+--->
.*                            +--pos-+
.*                            +-,len-+
.*
.*                >-+-KEY=-(-+------+-)------+--->
.*                           +--pos-+
.*                           +-,len-+
.*
.*                >-+-VECTPTR=---------------+--->
.*
.*                  +-VECTOR=----------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+---+--------------+---><
.*                        +-C-+    expand code
.*                        +-D-+    expand TWA DSECT
.*                        +-E-+    expand CALL
.*                        +-G-+    expand TWA init
.*                        +-L-+    expand TWA
.*
.* ALGORITHM: Developed by J.W.J. Williams in 1964.
.*
.*      A heap is a data structure represented by a vector
.*      and treated as if it is a binary tree.  It has two
.*      properties:
.*
.*      1. Order, the value of any node is >= to the values
.*         of the node's children, or any node is <= it's
.*         parent node (where i>=2 & i<=n).  This implies
.*         that the largest element of the collection is the root.
.*      2. Shape, is that of a tree
.*         (26, 12, 51, 35, 17, 20, 40, 29, 19, 23, 15, 22)
.*
.*             1             26
.*                          /   \
.*                         /     \
.*                        /       \
.*                       /         \
.*             2       12           51
.*                    /   \        /   \
.*             4    35     17     20    40
.*                  /\     /\     /
.*                 /  \   /  \   /
.*             8  29  19 23  15 22
.*
.*         where: n the number of nodes 12
.*                the root of the tree is i=1
.*                any node i has children 2i and 2i+1
.*                any parent is i%2
.*                null if i<1 or i>n
.*
.*         After Heapify (normalizing the vector into a heap)
.*         the tree looks like
.*         (51, 35, 40, 29, 23, 22, 26, 12, 19, 17, 15, 20)
.*
.*             1             51
.*                          /   \
.*                         /     \
.*                        /       \
.*                       /         \
.*             2       35           40
.*                    /   \        /   \
.*             4    29     23     22    26
.*                  /\     /\     /
.*                 /  \   /  \   /
.*             8  12  19 17  15 20
.*
.*         Now the sorting process can begin.  Swap the first (1)
.*         vector entry with the last entry (n).  n is now n - 1.
.*         Re-establish the heap property.  Repeat the process.
.*
.*         The final result is:
.*         (12, 15, 17, 19, 20, 22, 23, 26, 29, 35, 40, 51)
.*
.*      HeapSort:
.*
.*      /* Heapify */
.*      Do i = n % 2 To 1 By -1;
.*        x = PERC(i,n);
.*      End;
.*
.*      /* Sort */
.*      Do i = n To 2 By -1;
.*        x = SWAP(v(1),v(i));  /*swap places*/
.*        x = PERC(1,i-1);
.*      End;
.*
.*      Return 0;
.*
.*      PERC:
.*
.*      Parse ARG lbnd,ubnd;
.*
.*      p = lbnd;
.*      lchld = 2 * p;
.*      rchld = lchld + 1;
.*
.*      If lchld < ubnd Then;
.*        If key of v(lchld) < key of v(rchld) Then;
.*          lchld = rchld;
.*
.*      Do While lchld <= ubnd;
.*        If key of v(p) >= key of v(lchld) Then;
.*          Leave;
.*        x = SWAP(v(p),v(lchld)); /*swap places*/
.*        p = lchld;
.*        lchld = 2 * p;
.*        rchld = lchld + 1;
.*        If lchld < ubnd Then;
.*          If key of v(lchld) < key of v(rchld) Then;
.*            lchld = rchld;
.*      End;
.*
.*      Return 0;
.*
.*
.*  REG USE: R0: work
.*           R1:
.*           R2:
.*           R3: execution length
.*           RF: return code
.*               0 = successful
.*               4 = vector entry count <= 1
.*               8 = not successful
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2VHSRT'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-06-20'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.HSRT030 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').HSRT032
&D       SETC  '&PREFIX(1)'
.HSRT032 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').HSRT034
&C       SETC  '&PREFIX(2)'
.HSRT034 ANOP
.HSRT100 ANOP
         AIF   (T'&MF NE 'O').HSRT110
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.HSRT110 ANOP
         AIF   ('&MF(1)' EQ 'C').HSRT800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'D').HSRT210    EXPAND TWA DSECT
         AIF   ('&MF(1)' EQ 'E').HSRT600    EXPAND CALL
         AIF   ('&MF(1)' EQ 'G').HSRT400    EXPAND TWA INIT
         AIF   ('&MF(1)' EQ 'L').HSRT200    EXPAND TWA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.HSRT200 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA)
         DS    0D
         AGO   .HSRT220
.HSRT210 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA) DSECT
&LABEL   DSECT
.HSRT220 ANOP
&D.HSTWA EQU   *,(18*4),C'X'  HEAP SORT TRANSIENT WORK AREA
&D.HSNCNT DS    F             ..VECTOR ENTRY COUNT
&D.HSNPOS DS    F             ..POSITION OF 1ST ENTRY
&D.HSNLEN DS    F             ..ENTRY LENGTH
&D.HSKPOS DS    F             ..KEY POSITION
&D.HSKLEN DS    F             ..KEY LENGTH
&D.HS@VCT DS    A             ..VECTOR ADDRESS
&D.HSNBEG DS    A             ..HS@VCT+HSNPOS-1
&D.HSKBEG DS    A             ..HS@VCT+HSNPOS-1+HSKPOS-1
&D.HSLBND DS    F             ..LOWER BOUND SUBSCRIPT
&D.HSUBND DS    F             ..UPPER BOUND SUBSCRIPT
&D.HSPSUB DS    F             ..PARENT SUBSCRIPT
&D.HSPPTR DS    A             ..(HSPSUB-1)*HSNLEN+HSNBEG
&D.HSPKPTR DS    A            ..HSPPTR+HSKPOS-1
&D.HSXSUB EQU   *,4,C'F'
&D.HSLSIB DS    F             ..LEFT SIBLING SUBSCRIPT
&D.HSRSIB DS    F             ..RIGHT SIBLING SUBSCRIPT
&D.HSPRM0 DS    F             ..PARM 0 - i loop control
&D.HSPRM1 DS    F             ..PARM 1 - lbnd
&D.HSPRM2 DS    F             ..PARM 2 - ubnd
         MEXIT
.HSRT400 ANOP  ,    INITIALIZE TWA
         MNOTE *,'&MACNME - USING REG 0,15'
         XC    &D.HSTWA,&D.HSTWA   clear binary search TWA
         AIF   (T'&NTRYCNT NE 'O').HSRT410
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.HSRT410 ANOP
         AIF   (T'&NTRYCNT EQ 'N').HSRT412
         AIF   ('&NTRYCNT'(1,1) EQ '(').HSRT414
         AIF   (T'&NTRYCNT EQ 'A' OR T'&NTRYCNT EQ 'F').HSRT416
         AIF   (T'&NTRYCNT EQ 'Y' OR T'&NTRYCNT EQ 'H').HSRT418
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.HSRT412 ANOP  ,    STORE NTRYCNT - SELF DEFINING TERM
         LA    0,&NTRYCNT
         ST    0,&D.HSNCNT    save vector entry count
         AGO   .HSRT420
.HSRT414 ANOP  ,    STORE REGISTER IN NTRYCNT
         ST    &NTRYCNT(1),&D.HSNCNT    save vector entry count
         AGO   .HSRT420
.HSRT416 ANOP  ,    SAVE 4-BYTE NTRYCNT
         MVC   &D.HSNCNT,&NTRYCNT  save vector entry count
         AGO   .HSRT420
.HSRT418 ANOP  ,    SAVE 2-BYTE NTRYCNT
         LH    0,&NTRYCNT
         ST    0,&D.HSNCNT    save vector entry count
.HSRT420 ANOP
         AIF   (T'&NTRY NE 'O').HSRT430
         MNOTE 8,'&MACNME - NTRY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.HSRT430 ANOP
         AIF   ('&NTRY'(1,1) EQ '(' AND '&NTRY'(K'&NTRY,1) EQ ')').HSRT+
               432
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.HSRT432 ANOP
         AIF   (N'&NTRY EQ 2).HSRT434
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.HSRT434 ANOP
         AIF   (T'&NTRY(1) NE 'O').HSRT440
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.HSRT440 ANOP
         AIF   (T'&NTRY(1) EQ 'N').HSRT442
         AIF   (T'&NTRY(1) EQ 'A' OR T'&NTRY(1) EQ 'F').HSRT446
         AIF   (T'&NTRY(1) EQ 'Y' OR T'&NTRY(1) EQ 'H').HSRT448
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.HSRT442 ANOP  ,    STORE NTRY POS - SELF DEFINING TERM
         LA    0,&NTRY(1)
         ST    0,&D.HSNPOS    save vector 1st ntry pos
         AGO   .HSRT450
.HSRT446 ANOP  ,    SAVE 4-BYTE NTRY POS
         MVC   &D.HSNPOS,&NTRY(1)  save vector 1st ntry pos
         AGO   .HSRT450
.HSRT448 ANOP  ,    SAVE 2-BYTE NTRY POS
         LH    0,&NTRY(1)
         ST    0,&D.HSNPOS    save vector 1st ntry pos
.HSRT450 ANOP
.HSRT460 ANOP
         AIF   (T'&NTRY(2) NE 'O').HSRT470
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.HSRT470 ANOP
         AIF   (T'&NTRY(2) EQ 'N').HSRT472
         AIF   (T'&NTRY(2) EQ 'A' OR T'&NTRY(2) EQ 'F').HSRT476
         AIF   (T'&NTRY(2) EQ 'Y' OR T'&NTRY(2) EQ 'H').HSRT478
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 2 INVALID'
         AGO   .ERR0001
.HSRT472 ANOP  ,    STORE NTRY LEN - SELF DEFINING TERM
         LA    0,&NTRY(2)
         ST    0,&D.HSNLEN    save vector ntry len
         AGO   .HSRT480
.HSRT476 ANOP  ,    SAVE 4-BYTE NTRY LEN
         MVC   &D.HSNLEN,&NTRY(2)  save vector ntry len
         AGO   .HSRT480
.HSRT478 ANOP  ,    SAVE 2-BYTE NTRY LEN
         LH    0,&NTRY(2)
         ST    0,&D.HSNLEN    save vector ntry len
.HSRT480 ANOP
.HSRT490 ANOP
         AIF   (T'&KEY NE 'O').HSRT4A0
         MNOTE 8,'&MACNME - KEY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.HSRT4A0 ANOP
         AIF   ('&KEY'(1,1) EQ '(' AND '&KEY'(K'&KEY,1) EQ ')').HSRT4A2
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.HSRT4A2 ANOP
         AIF   (N'&KEY EQ 2).HSRT4A4
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.HSRT4A4 ANOP
         AIF   (T'&KEY(1) NE 'O').HSRT4B0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.HSRT4B0 ANOP
         AIF   (T'&KEY(1) EQ 'N').HSRT4B2
         AIF   (T'&KEY(1) EQ 'A' OR T'&KEY(1) EQ 'F').HSRT4B6
         AIF   (T'&KEY(1) EQ 'Y' OR T'&KEY(1) EQ 'H').HSRT4B8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.HSRT4B2 ANOP  ,    STORE KEY POS - SELF DEFINING TERM
         LA    0,&KEY(1)
         ST    0,&D.HSKPOS    save vector 1st key pos
         AGO   .HSRT4C0
.HSRT4B6 ANOP  ,    SAVE 4-BYTE KEY POS
         MVC   &D.HSKPOS,&KEY(1)   save vector 1st key pos
         AGO   .HSRT4C0
.HSRT4B8 ANOP  ,    SAVE 2-BYTE KEY POS
         LH    0,&KEY(1)
         ST    0,&D.HSKPOS    save vector 1st key pos
.HSRT4C0 ANOP
.HSRT4D0 ANOP
         AIF   (T'&KEY(2) NE 'O').HSRT4E0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.HSRT4E0 ANOP
         AIF   (T'&KEY(2) EQ 'N').HSRT4E2
         AIF   (T'&KEY(2) EQ 'A' OR T'&KEY(2) EQ 'F').HSRT4E6
         AIF   (T'&KEY(2) EQ 'Y' OR T'&KEY(2) EQ 'H').HSRT4E8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.HSRT4E2 ANOP  ,    STORE KEY LEN - SELF DEFINING TERM
         LA    0,&KEY(2)
         ST    0,&D.HSKLEN    save vector key len
         AGO   .HSRT4F0
.HSRT4E6 ANOP  ,    SAVE 4-BYTE KEY LEN
         MVC   &D.HSKLEN,&KEY(2)   save vector key len
         AGO   .HSRT4F0
.HSRT4E8 ANOP  ,    SAVE 2-BYTE KEY LEN
         LH    0,&KEY(2)
         ST    0,&D.HSKLEN    save vector key len
.HSRT4F0 ANOP
.HSRT4K0 ANOP
         AIF   (T'&VECTOR NE 'O').HSRT4M0
         AIF   (T'&VECTPTR NE 'O').HSRT4L0
         MNOTE 8,'&MACNME - VECTOR OR VECTPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.HSRT4L0 ANOP
         AIF   ('&VECTPTR'(1,1) EQ '(').HSRT4L4
         AIF   (T'&VECTPTR EQ 'A' OR T'&VECTPTR EQ 'V').HSRT4L6
         MNOTE 8,'&MACNME - VECTPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.HSRT4L4 ANOP  ,    STORE REGISTER IN VECTPTR
         ST    &VECTPTR(1),&D.HS@VCT    save vector addr
         AGO   .HSRT4O0
.HSRT4L6 ANOP  ,    SAVE 4-BYTE VECTPTR
         MVC   &D.HS@VCT,&VECTPTR  save vector addr
         AGO   .HSRT4O0
.HSRT4M0 ANOP
.HSRT4N0 ANOP
.HSRT4N4 ANOP  ,    STORE ADDRESS OF VECTOR
         LA    0,&VECTOR
         ST    0,&D.HS@VCT    save vector addr
.HSRT4O0 ANOP
         MVC   &D.HSLBND,=F'1'
         MVC   &D.HSUBND,&D.HSNCNT
         LA    15,8           set init error
         CLC   &D.HSNLEN,=F'256'   Q. entry len > 256
         JH    &C.HSRTN099         A. yes, error
         CLC   &D.HSKLEN,&D.HSNLEN Q. key len > entry len
         JH    &C.HSRTN099         A. yes, error
         L     0,&D.HSKPOS
         AHI   0,-1           make relative to zero
         A     0,&D.HSKLEN
         C     0,&D.HSNLEN         Q. key exceedes entry len
         JH    &C.HSRTN099         A. yes, error
         LA    15,4           set not found
         CLC   &D.HSNCNT,=F'2'     Q. enough vector entries to sort
         JL    &C.HSRTN099         A. no, already sorted
         L     0,&D.HS@VCT
         A     0,&D.HSNPOS    add position of 1st entry
         AHI   0,-1           make relative to zero
         ST    0,&D.HSNBEG    save vector entry begin addr
         A     0,&D.HSKPOS    add position of 1st key
         AHI   0,-1           make relative to zero
         ST    0,&D.HSKBEG    save vector entry key begin addr
         XR    15,15          clear return code
&C.HSRTN099 EQU   *
         LTR   15,15
.HSRT4P0 ANOP
         MEXIT
.HSRT600 ANOP  ,    CALL HEAP SORT ROUTINE
         MNOTE *,'&MACNME - USING REG 14'
.HSRT610 ANOP
         BRAS  14,&C.HSRTN100 call heap sort routine
         MEXIT
.HSRT800 ANOP  ,    EXPAND HEAP SORT ROUTINE
         MNOTE *,'&MACNME - USING REG 0,1,2,3,14'
&C.HSRTN100 EQU   *      HEAP SORT ROUTINE
*        set up heapify loop control
         AS2RESTK PUSH        save r14 its needed to return
         L     0,&D.HSNCNT
         ST    0,&D.HSPRM2    init parm2 to ubnd | ncnt
         SRL   0,1            % 2
         ST    0,&D.HSPRM0    init parm0 to i loop control
         ST    0,&D.HSPRM1    init parm1 to lbnd
&C.HSRTN200 EQU   *      HEAPIFY DO LOOP
         BRAS  14,&C.HSRTN400 PERC(parm1,parm2)
         L     0,&D.HSPRM0    prime reg with i loop control
         AHI   0,-1           decrement loop counter
         ST    0,&D.HSPRM0    save parm0 i loop control
         ST    0,&D.HSPRM1    save parm1
         C     0,=F'0'        Q. lbnd > 0
         JH    &C.HSRTN200    A. yes, loop back
*                             A. no, continue
*        set up sort loop control
         MVC   &D.HSPRM0,&D.HSUBND init parm0 i loop control to ubnd
         MVC   &D.HSPRM1,=F'1'     init parm1 to 1
&C.HSRTN300 EQU   *      SORT DO LOOP
*        1st entry index in the vector
         L     1,&D.HSNBEG
*        compute upper bnds entry addr
         L     2,&D.HSPRM0    prime reg with i loop control
         AHI   2,-1           compute
         MS    2,&D.HSNLEN    ..entry index value
         A     2,&D.HSNBEG    ..+ vector begin
         SPACE 1
         L     3,&D.HSNLEN    prime reg with entry len
         AHI   3,-1
         SPACE 1
*        swap vector(1) with vector(parm2)
         J     *+4+6
         XC    0(0,1),0(2)    xor 1st entry with last entry
*+4+6    EQU   *
         EX    3,*-6
         J     *+4+6
         XC    0(0,2),0(1)    xor last entry with 1st entry
*+4+6    EQU   *
         EX    3,*-6
         J     *+4+6
         XC    0(0,1),0(2)    xor 1st entry with last entry
*+4+6    EQU   *
         EX    3,*-6
         SPACE 1
         L     0,&D.HSPRM0    prime reg with i loop control
         AHI   0,-1
         ST    0,&D.HSPRM2    save parm2 with i - 1
         BRAS  14,&C.HSRTN400 PERC(parm1,parm2)
         L     0,&D.HSPRM0    get loop counter
         AHI   0,-1           decrement
         ST    0,&D.HSPRM0    save i loop control
         C     0,=F'1'        Q. loop counter > 1
         JH    &C.HSRTN300    A. yes, loop back
*                             A. no, continue
         XR    15,15          set return code
         SPACE 1
         AS2RESTK POP
         J     &C.HSRTN800    go to exit
         SPACE 2
&C.HSRTN400 EQU   *      PERColate LOOP
         L     0,&D.HSPRM1    prime reg with lbnd
         ST    0,&D.HSPSUB    save parent subscript
*        compute parent entry addr
         AHI   0,-1           compute
         MS    0,&D.HSNLEN    ..entry index value
         A     0,&D.HSNBEG    ..+ vector begin
         ST    0,&D.HSPPTR    save parent addr
*        compute parent key addr
         A     0,&D.HSKPOS
         AHI   0,-1           make relative to zero
         ST    0,&D.HSPKPTR   save parent key addr
         SPACE 1
         L     0,&D.HSPSUB    prime reg with parent sub
         SLL   0,1            parent sub * 2
         ST    0,&D.HSLSIB    save left sibling
         AHI   0,1
         ST    0,&D.HSRSIB    save right sibling
         SPACE 1
         CLC   &D.HSLSIB,&D.HSPRM2 Q. left sibling < ubnd
         JNL   &C.HSRTN410         A. no, bypass
*        compute left sibling key addr
         L     1,&D.HSLSIB
         AHI   1,-1           compute
         MS    1,&D.HSNLEN    ..entry index value
         A     1,&D.HSKBEG    ..+ vector key begin
*        compute right sibling key addr
         L     2,&D.HSRSIB
         AHI   2,-1           compute
         MS    2,&D.HSNLEN    ..entry index value
         A     2,&D.HSKBEG    ..+ vector key begin
         SPACE 1
         L     3,&D.HSKLEN    prime reg with key len
         AHI   3,-1
         SPACE 1
         J     *+4+6
         CLC   0(0,1),0(2)    Q. key of v(left) < key of v(right)
*+4+6    EQU   *
         EX    3,*-6
         JNL   &C.HSRTN410    A. no, bypass
         MVC   &D.HSXSUB,&D.HSRSIB A. yes, save right sibling sub
&C.HSRTN410 EQU   *      DO WHILE LOOP
         CLC   &D.HSXSUB,&D.HSPRM2 Q. sibling <= ubnd
         JH    &C.HSRTN420         A. no, bypass
         L     1,&D.HSPKPTR   prime reg with parent key addr
*        compute left sibling key addr
         L     2,&D.HSLSIB
         AHI   2,-1           compute
         MS    2,&D.HSNLEN    ..entry index value
         A     2,&D.HSKBEG    ..+ vector key begin
         SPACE 1
         L     3,&D.HSKLEN    prime reg with key len
         AHI   3,-1
         SPACE 1
         J     *+4+6
         CLC   0(0,1),0(2)    Q. key of v(parent) >= key of v(sibling)
*+4+6    EQU   *
         EX    3,*-6
         JNL   &C.HSRTN420    A. yes, bypass
*                             A. no, continue
         L     1,&D.HSPPTR    prime reg with parent addr
*        compute left child entry addr
         L     2,&D.HSLSIB
         AHI   2,-1           compute
         MS    2,&D.HSNLEN    ..entry index value
         A     2,&D.HSNBEG    ..+ vector entry begin
         SPACE 1
         L     3,&D.HSNLEN    prime reg with entry len
         AHI   3,-1
         SPACE 1
*        swap vector(parent) with vector(sibling)
         J     *+4+6
         XC    0(0,1),0(2)    xor v(parent) with v(sibling)
*+4+6    EQU   *
         EX    3,*-6
         J     *+4+6
         XC    0(0,2),0(1)    xor v(sibling) with v(parent)
*+4+6    EQU   *
         EX    3,*-6
         J     *+4+6
         XC    0(0,1),0(2)    xor v(parent) with v(sibling)
*+4+6    EQU   *
         EX    3,*-6
         SPACE 1
         MVC   &D.HSPSUB,&D.HSXSUB
*        compute parent entry addr
         L     0,&D.HSPSUB    prime reg with parent sub
         AHI   0,-1           compute
         MS    0,&D.HSNLEN    ..entry index value
         A     0,&D.HSNBEG    ..+ vector begin
         ST    0,&D.HSPPTR    save parent addr
*        compute parent key addr
         A     0,&D.HSKPOS
         AHI   0,-1           make relative to zero
         ST    0,&D.HSPKPTR   save parent key addr
         SPACE 1
         L     0,&D.HSPSUB    prime reg with parent sub
         SLL   0,1            * 2
         ST    0,&D.HSLSIB    save left sibling
         AHI   0,1
         ST    0,&D.HSRSIB    save right sibling
         SPACE 1
         CLC   &D.HSLSIB,&D.HSPRM2 Q. left sibling < ubnd
         JNL   &C.HSRTN410         A. no, loop back
*                                  A. yes, continue
*        compute left sibling key addr
         L     1,&D.HSLSIB
         AHI   1,-1           compute
         MS    1,&D.HSNLEN    ..entry index value
         A     1,&D.HSKBEG    ..+ vector key begin
*        compute right sibling key addr
         L     2,&D.HSRSIB
         AHI   2,-1           compute
         MS    2,&D.HSNLEN    ..entry index value
         A     2,&D.HSKBEG    ..+ vector key begin
         SPACE 1
         L     3,&D.HSKLEN    prime reg with key len
         AHI   3,-1
         SPACE 1
         J     *+4+6
         CLC   0(0,1),0(2)    Q. key of v(left) < key of v(right)
*+4+6    EQU   *
         EX    3,*-6
         JNL   &C.HSRTN410    A. no, loop back
         MVC   &D.HSXSUB,&D.HSRSIB A. yes
         J     &C.HSRTN410    loop back
         SPACE 1
&C.HSRTN420 EQU   *      FINISH UP PERColate
         BR    14        return to caller
         SPACE 1
&C.HSRTN800 EQU   *      EXIT HEAP SORT
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2VLSRH 0132-18317-19318-1440-00462-00445-00000-APLKS   25
         MACRO
&LABEL   AS2VLSRH ,                                                    +
               &NTRYCNT=,                                              +
               &NTRY=(1,),                                             +
               &KEY=(1,),                                              +
               &ARGPTR=,                                               +
               &SRCHARG=,                                              +
               &VECTPTR=,                                              +
               &VECTOR=,                                               +
               &SUB=,                                                  +
               &INDEX=,                                                +
               &PREFIX=,                                               +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2VLSRH
.*    TITLE: LINEAR SEARCH ALGORITHM (UNORDERED)
.*     DATE: 2018-11-15
.*
.*     DESC: THIS MACRO WILL GENERATE A LINEAR SEARCH
.*           ROUTINE THAT WILL RETURN THE 1st MATCHING
.*           VECTOR ENTRY IN AN UNORDERED VECTOR.
.*
.*    INPUT:
.*      NTRYCNT=   integer count of vector entries
.*                 if not specified the value will be -1
.*                 and the loop will terminate with a
.*                 entry key of high-values i.e. x'FF'
.*      NTRY=(pos,len)
.*        pos      integer position of 1st vector entry
.*        len      integer length of each vector entry
.*      KEY=(pos,len)
.*        pos      integer position of KEY in vector entry
.*        len      integer length of KEY in vector entry
.*      ARGPTR=    address of search argument
.*     |SRCHARG=   search argument
.*      VECTPTR=   address of vector
.*     |VECTOR=    vector
.*      PREFIX=(data,code)
.*        data     prefix to all data labels
.*        code     prefix to all code labels
.*      MF=        macro expansion option
.*                 C - expand linear search routine
.*                 D - expand TWA DSECT definition
.*                 E - expand CALL logic
.*                 G - expand TWA initialization
.*                 L - expand TWA definitions
.*
.*    OUTPUT:
.*      SUB=       integer subscript of matching vector entry
.*      INDEX=     integer offset of matching vector entry
.*      R0         same value as SUB
.*      R1         same value as INDEX
.*      RF         return code (0=found, 4=not found, 8=invalid parms)
.*
.*  OPTIONS:
.*
.*      >>-AS2VLSRH-+------------------------+--->
.*
.*                >-+-NTRYCNT=---------------+--->
.*
.*                >-+-NTRY=-(-+------+-)-----+--->
.*                            +--pos-+
.*                            +-,len-+
.*
.*                >-+-KEY=-(-+------+-)------+--->
.*                           +--pos-+
.*                           +-,len-+
.*
.*                >-+-ARGPTR=----------------+--->
.*
.*                  +-SRCHARG=---------------+--->
.*
.*                >-+-VECTPTR=---------------+--->
.*
.*                  +-VECTOR=----------------+--->
.*
.*                >-+-SUB=-------------------+--->
.*
.*                >-+-INDEX=-----------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*                              +-,code-+
.*
.*                >-+-MF=-+---+--------------+---><
.*                        +-C-+    expand code
.*                        +-D-+    expand TWA DSECT
.*                        +-E-+    expand CALL
.*                        +-G-+    expand TWA init
.*                        +-L-+    expand TWA
.*
.* ALGORITHM:
.*
.*      Do i=1 To ubnds By +1;
.*        Select;
.*          When srcharg <> key of v(i) Then;
.*            Iterate;
.*          Otherwise;
.*            Return (i);
.*        End;
.*      End;
.*
.*      Return (0);
.*
.*  REG USE: R0: work / sub
.*           R1: v(current) addr / index
.*           R2: srch arg addr
.*           R3: compare length
.*           RF: return code
.*               0 = entry found
.*               4 = entry not found
.*               8 = invalid parameters
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &C,&D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2VLSRH'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2018-11-12'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.LSRH030 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').LSRH032
&D       SETC  '&PREFIX(1)'
.LSRH032 ANOP
         AIF   (T'&PREFIX(2) EQ 'O').LSRH034
&C       SETC  '&PREFIX(2)'
.LSRH034 ANOP
.LSRH100 ANOP
         AIF   (T'&MF NE 'O').LSRH110
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.LSRH110 ANOP
         AIF   ('&MF(1)' EQ 'C').LSRH800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'D').LSRH210    EXPAND TWA DSECT
         AIF   ('&MF(1)' EQ 'E').LSRH600    EXPAND CALL
         AIF   ('&MF(1)' EQ 'G').LSRH400    EXPAND TWA INIT
         AIF   ('&MF(1)' EQ 'L').LSRH200    EXPAND TWA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.LSRH200 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA)
         DS    0D
         AGO   .LSRH220
.LSRH210 ANOP  ,    EXPAND TRANSIENT WORK AREA (TWA) DSECT
&LABEL   DSECT
.LSRH220 ANOP
&D.LSTWA EQU   *,(11*4),C'X'  LINEAR SEARCH TRANSIENT WORK AREA
&D.LSNCNT DS    F             ..VECTOR ENTRY COUNT
&D.LSNPOS DS    F             ..POSITION OF 1ST ENTRY
&D.LSNLEN DS    F             ..ENTRY LENGTH
&D.LSKPOS DS    F             ..KEY POSITION
&D.LSKLEN DS    F             ..KEY LENGTH
&D.LS@ARG DS    A             ..SEARCH ARGUMENT ADDRESS
&D.LS@VCT DS    A             ..VECTOR ADDRESS
&D.LSNBEG DS    A             ..LS@VCT+LSNPOS-1
&D.LSKBEG DS    A             ..LSNBEG+LSKPOS-1
&D.LSLBND DS    F             ..LOWER BOUNDS
&D.LSUBND DS    F             ..UPPER BOUNDS
         MEXIT
.LSRH400 ANOP  ,    INITIALIZE TWA
         MNOTE *,'&MACNME - USING REG 0,15'
         XC    &D.LSTWA,&D.LSTWA   CLEAR LINEAR SEARCH TWA
         AIF   (T'&NTRYCNT NE 'O').LSRH410
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.LSRH410 ANOP
         AIF   (T'&NTRYCNT EQ 'O').LSRHR12
         AIF   (T'&NTRYCNT EQ 'N').LSRH414
         AIF   ('&NTRYCNT'(1,1) EQ '(').LSRH416
         AIF   (T'&NTRYCNT EQ 'A' OR T'&NTRYCNT EQ 'F').LSRH418
         AIF   (T'&NTRYCNT EQ 'Y' OR T'&NTRYCNT EQ 'H').LSRH420
         MNOTE 8,'&MACNME - NTRYCNT KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.LSRH412 ANOP
         LA    0,1
         LNR   0,0
         ST    0,&D.LSNCNT    SAVE -1 VECTOR ENTRY COUNT
         AGO   .LSRH425
.LSRH414 ANOP  ,    STORE NTRYCNT - SELF DEFINING TERM
         LA    0,&NTRYCNT
         ST    0,&D.LSNCNT    SAVE VECTOR ENTRY COUNT
         AGO   .LSRH425
.LSRH416 ANOP  ,    STORE REGISTER IN NTRYCNT
         ST    &NTRYCNT(1),&D.LSNCNT    SAVE VECTOR ENTRY COUNT
         AGO   .LSRH425
.LSRH418 ANOP  ,    SAVE 4-BYTE NTRYCNT
         MVC   &D.LSNCNT,&NTRYCNT  SAVE VECTOR ENTRY COUNT
         AGO   .LSRH425
.LSRH420 ANOP  ,    SAVE 2-BYTE NTRYCNT
         LH    0,&NTRYCNT
         ST    0,&D.LSNCNT    SAVE VECTOR ENTRY COUNT
.LSRH425 ANOP
         AIF   (T'&NTRY NE 'O').LSRH430
         MNOTE 8,'&MACNME - NTRY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.LSRH430 ANOP
         AIF   ('&NTRY'(1,1) EQ '(' AND '&NTRY'(K'&NTRY,1) EQ ')').LSRH+
               432
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.LSRH432 ANOP
         AIF   (N'&NTRY EQ 2).LSRH434
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.LSRH434 ANOP
         AIF   (T'&NTRY(1) NE 'O').LSRH440
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.LSRH440 ANOP
         AIF   (T'&NTRY(1) EQ 'N').LSRH442
         AIF   (T'&NTRY(1) EQ 'A' OR T'&NTRY(1) EQ 'F').LSRH446
         AIF   (T'&NTRY(1) EQ 'Y' OR T'&NTRY(1) EQ 'H').LSRH448
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.LSRH442 ANOP  ,    STORE NTRY POS - SELF DEFINING TERM
         LA    0,&NTRY(1)
         ST    0,&D.LSNPOS    SAVE VECTOR 1ST NTRY POS
         AGO   .LSRH450
.LSRH446 ANOP  ,    SAVE 4-BYTE NTRY POS
         MVC   &D.LSNPOS,&NTRY(1)  SAVE VECTOR 1ST NTRY POS
         AGO   .LSRH450
.LSRH448 ANOP  ,    SAVE 2-BYTE NTRY POS
         LH    0,&NTRY(1)
         ST    0,&D.LSNPOS    SAVE VECTOR 1ST NTRY POS
.LSRH450 ANOP
.LSRH460 ANOP
         AIF   (T'&NTRY(2) NE 'O').LSRH470
         MNOTE 8,'&MACNME - NTRY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.LSRH470 ANOP
         AIF   (T'&NTRY(2) EQ 'N').LSRH472
         AIF   (T'&NTRY(2) EQ 'A' OR T'&NTRY(2) EQ 'F').LSRH476
         AIF   (T'&NTRY(2) EQ 'Y' OR T'&NTRY(2) EQ 'H').LSRH478
         MNOTE 8,'&MACNME - NTRY KEYWORD DATA TYPE 2 INVALID'
         AGO   .ERR0001
.LSRH472 ANOP  ,    STORE NTRY LEN - SELF DEFINING TERM
         LA    0,&NTRY(2)
         ST    0,&D.LSNLEN    SAVE VECTOR NTRY LEN
         AGO   .LSRH480
.LSRH476 ANOP  ,    SAVE 4-BYTE NTRY LEN
         MVC   &D.LSNLEN,&NTRY(2)  SAVE VECTOR NTRY LEN
         AGO   .LSRH480
.LSRH478 ANOP  ,    SAVE 2-BYTE NTRY LEN
         LH    0,&NTRY(2)
         ST    0,&D.LSNLEN    SAVE VECTOR NTRY LEN
.LSRH480 ANOP
.LSRH490 ANOP
         AIF   (T'&KEY NE 'O').LSRH4A0
         MNOTE 8,'&MACNME - KEY KEYWORD LIST PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.LSRH4A0 ANOP
         AIF   ('&KEY'(1,1) EQ '(' AND '&KEY'(K'&KEY,1) EQ ')').LSRH4A2
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NOT A LIST'
         AGO   .ERR0001
.LSRH4A2 ANOP
         AIF   (N'&KEY EQ 2).LSRH4A4
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER NEEDS 2 PARAMETERS'
         AGO   .ERR0001
.LSRH4A4 ANOP
         AIF   (T'&KEY(1) NE 'O').LSRH4B0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 1 NOT SPECIFIED'
         AGO   .ERR0001
.LSRH4B0 ANOP
         AIF   (T'&KEY(1) EQ 'N').LSRH4B2
         AIF   (T'&KEY(1) EQ 'A' OR T'&KEY(1) EQ 'F').LSRH4B6
         AIF   (T'&KEY(1) EQ 'Y' OR T'&KEY(1) EQ 'H').LSRH4B8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.LSRH4B2 ANOP  ,    STORE KEY POS - SELF DEFINING TERM
         LA    0,&KEY(1)
         ST    0,&D.LSKPOS    SAVE VECTOR 1ST KEY POS
         AGO   .LSRH4C0
.LSRH4B6 ANOP  ,    SAVE 4-BYTE KEY POS
         MVC   &D.LSKPOS,&KEY(1)   SAVE VECTOR 1ST KEY POS
         AGO   .LSRH4C0
.LSRH4B8 ANOP  ,    SAVE 2-BYTE KEY POS
         LH    0,&KEY(1)
         ST    0,&D.LSKPOS    SAVE VECTOR 1ST KEY POS
.LSRH4C0 ANOP
.LSRH4D0 ANOP
         AIF   (T'&KEY(2) NE 'O').LSRH4E0
         MNOTE 8,'&MACNME - KEY KEYWORD PARAMETER 2 NOT SPECIFIED'
         AGO   .ERR0001
.LSRH4E0 ANOP
         AIF   (T'&KEY(2) EQ 'N').LSRH4E2
         AIF   (T'&KEY(2) EQ 'A' OR T'&KEY(2) EQ 'F').LSRH4E6
         AIF   (T'&KEY(2) EQ 'Y' OR T'&KEY(2) EQ 'H').LSRH4E8
         MNOTE 8,'&MACNME - KEY KEYWORD DATA TYPE 1 INVALID'
         AGO   .ERR0001
.LSRH4E2 ANOP  ,    STORE KEY LEN - SELF DEFINING TERM
         LA    0,&KEY(2)
         ST    0,&D.LSKLEN    SAVE VECTOR KEY LEN
         AGO   .LSRH4F0
.LSRH4E6 ANOP  ,    SAVE 4-BYTE KEY LEN
         MVC   &D.LSKLEN,&KEY(2)   SAVE VECTOR KEY LEN
         AGO   .LSRH4F0
.LSRH4E8 ANOP  ,    SAVE 2-BYTE KEY LEN
         LH    0,&KEY(2)
         ST    0,&D.LSKLEN    SAVE VECTOR KEY LEN
.LSRH4F0 ANOP
.LSRH4G0 ANOP
         AIF   (T'&SRCHARG NE 'O').LSRH4I0
         AIF   (T'&ARGPTR NE 'O').LSRH4H0
         MNOTE 8,'&MACNME - SRCHARG OR ARGPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.LSRH4H0 ANOP
         AIF   ('&ARGPTR'(1,1) EQ '(').LSRH4H4
         AIF   (T'&ARGPTR EQ 'A').LSRH4H6
         MNOTE 8,'&MACNME - ARGPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.LSRH4H4 ANOP  ,    STORE REGISTER IN ARGPTR
         ST    &ARGPTR(1),&D.LS@ARG     SAVE SRCH ARG ADDR
         AGO   .LSRH4K0
.LSRH4H6 ANOP  ,    SAVE 4-BYTE ARGPTR
         MVC   &D.LS@ARG,&ARGPTR   SAVE SRCH ARG ADDR
         AGO   .LSRH4K0
.LSRH4I0 ANOP
.LSRH4J0 ANOP
.LSRH4J4 ANOP  ,    STORE ADDRESS OF SRCHARG
         LA    0,&SRCHARG
         ST    0,&D.LS@ARG    SAVE SRCH ARG ADDR
.LSRH4K0 ANOP
         AIF   (T'&VECTOR NE 'O').LSRH4M0
         AIF   (T'&VECTPTR NE 'O').LSRH4L0
         MNOTE 8,'&MACNME - VECTOR OR VECTPTR KEYWORD PARAMETER NOT SPE+
               CIFIED'
         AGO   .ERR0001
.LSRH4L0 ANOP
         AIF   ('&VECTPTR'(1,1) EQ '(').LSRH4L4
         AIF   (T'&VECTPTR EQ 'A' OR T'&VECTPTR EQ 'V').LSRH4L6
         MNOTE 8,'&MACNME - VECTPTR KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.LSRH4L4 ANOP  ,    STORE REGISTER IN VECTPTR
         ST    &VECTPTR(1),&D.LS@VCT    SAVE VECTOR ADDR
         AGO   .LSRH4O0
.LSRH4L6 ANOP  ,    SAVE 4-BYTE VECTPTR
         MVC   &D.LS@VCT,&VECTPTR  SAVE VECTOR ADDR
         AGO   .LSRH4O0
.LSRH4M0 ANOP
.LSRH4N0 ANOP
.LSRH4N4 ANOP  ,    STORE ADDRESS OF VECTOR
         LA    0,&VECTOR
         ST    0,&D.LS@VCT    SAVE VECTOR ADDR
.LSRH4O0 ANOP
         LA    15,8           set init error
         CLC   &D.LSKLEN,=F'256'   Q. key len > 256
         JH    &C.LSRTN099         A. yes, error
         CLC   &D.LSKLEN,&D.LSNLEN Q. key len > entry len
         JH    &C.LSRTN099         A. yes, error
         L     0,&D.LSKPOS
         AHI   0,-1           make relative to zero
         A     0,&D.LSKLEN
         C     0,&D.LSNLEN    Q. key exceedes entry len
         JH    &C.LSRTN099    A. yes, error
         LA    15,4           set not found
         ICM   0,15,&D.LSNCNT      Q. any vector entries
         JZ    &C.LSRTN099         A. no, not found
         ST    0,&D.LSUBND    init upper bounds
         L     0,&D.LS@VCT
         A     0,&D.LSNPOS    add position of 1st entry
         AHI   0,-1           make relative to zero
         ST    0,&D.LSNBEG    save vector entry begin addr
         A     0,&D.LSKPOS    add position of 1st key
         AHI   0,-1           make relative to zero
         ST    0,&D.LSKBEG    save vector entry key begin addr
         XR    15,15          clear return code
&C.LSRTN099 EQU   *
         LTR   15,15
.LSRH4P0 ANOP
         MEXIT
.LSRH600 ANOP  ,    CALL LINEAR SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 14'
.LSRH610 ANOP
         BRAS  14,&C.LSRTN100 call linear search routine
         MEXIT
.LSRH800 ANOP  ,    EXPAND LINEAR SEARCH ROUTINE
         MNOTE *,'&MACNME - USING REG 0,1,2,3,15'
         AIF   (T'&SUB NE 'O').LSRH810
         MNOTE 8,'&MACNME - SUB KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.LSRH810 ANOP
         AIF   (T'&SUB EQ 'F').LSRH820
         MNOTE 8,'&MACNME - SUB KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.LSRH820 ANOP
         AIF   (T'&INDEX NE 'O').LSRH822
         MNOTE 8,'&MACNME - INDEX KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.LSRH822 ANOP
         AIF   (T'&INDEX EQ 'F').LSRH830
         MNOTE 8,'&MACNME - INDEX KEYWORD DATA TYPE INVALID'
         AGO   .ERR0001
.LSRH830 ANOP
&C.LSRTN100 EQU   *      LINEAR SEARCH ROUTINE (1)
*        loop init
         L     1,&D.LSKBEG    prime reg with key addr
         L     2,&D.LS@ARG    prime reg with search arg addr
         L     3,&D.LSKLEN    prime reg with key len
         AHI   3,-1
&C.LSRTN199 EQU   *
         XC    &D.LSLBND,&D.LSLBND init lower bounds
         LA    15,4           set not found
&C.LSRTN200 EQU   *      DO LOOP
         L     0,&D.LSLBND
         AHI   0,1
         ST    0,&D.LSLBND    save current entry sub
         CLI   0(1),X'FF'     Q. key of v(sub) = x'FF'
         JE    &C.LSRTN800    A. yes, end of vector, not found
*        check for match
         J     *+4+6
         CLC   0(0,1),0(2)    Q. key of v(sub) = srch arg
*+4+6    EQU   *
         EX    3,*-6
         JE    &C.LSRTN220    A. yes,
         TM    &D.LSUBND,X'80'     Q. ubnd negative
         JO    &C.LSRTN210         A. yes, bypass
         CLC   &D.LSLBND,&D.LSUBND      Q. lbnd >= ubnd
         JNL   &C.LSRTN810              A. yes, end of vector
         SPACE 1
&C.LSRTN210 EQU   *
*        compute next key addr
         A     1,&D.LSNLEN    point to next key entry
         J     &C.LSRTN200    loop back
         SPACE 1
&C.LSRTN220 EQU   *      FOUND
*        match found
         MVC   &SUB,&D.LSLBND return match sub
*        compute lower bnds entry index
         LR    1,0
         AHI   1,-1           compute
         MS    1,&D.LSNLEN    ..entry index value
         ST    1,&INDEX
         XR    15,15          set return code to 0
         J     &C.LSRTN890
         SPACE 1
&C.LSRTN800 EQU   *
         AHI   0,-1           compute ubnd
         ST    0,&D.LSUBND    save ubnd
         SPACE 1
&C.LSRTN810 EQU   *      NOT FOUND
         XR    0,0
         ST    0,&SUB
         LR    1,0
         ST    1,&INDEX
&C.LSRTN890 EQU   *
         LTR   15,15
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS2ZO2BI 0105-19163-19318-1441-00102-00107-00000-APLKS   08
         MACRO
&LABEL   AS2ZO2BI &TGTreg,                                             +
               &SOURCE=,                                               +
               &PREFIX=,                                               +
               &MF=C
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2ZO2BI
.*    TITLE: CONVERT 8-BYTES OF ZERO'S & ONE'S TO A BYTE
.*     DATE: 2019-06-11
.*
.*     DESC: THIS MACRO WILL GENERATE INLINE CODE TO CONVERT
.*           8-BYTES OF ZERO'S & ONE'S TO A BYTE.
.*
.*    INPUT:
.*      SOURCE=    contains 8-bytes of zero's & one's
.*      PREFIX=(data)
.*        data     prefix to all data labels
.*      MF=        macro expansion option
.*                 C - expand routine
.*            STATIC - expand PSA definitions
.*
.*    OUTPUT:
.*      TGTreg=    contains result byte in register
.*
.*  OPTIONS:
.*
.*      >>-AS2ZO2BI-+------------------------+--->
.*
.*                >-+-TGTreg-,---------------+--->
.*
.*                >-+-SOURCE=-+--------------+--->
.*
.*                >-+-PREFIX=-(-+-------+-)--+--->
.*                              +--data-+
.*
.*                >-+-MF=-+--------+---------+---><
.*                        +-C------+  expand code
.*                        +-STATIC-+  expand PSA
.*
.* ALGORITHM: attributed to John Ganci
.*
.* Work data areas can be expanded using:
.*       AS1MUTSA UDS=MISC,PREFIX=...
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &D
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2ZO2BI'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019-06-11'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
.XF2B010 ANOP
         AIF   (T'&PREFIX(1) EQ 'O').XF2B012
&D       SETC  '&PREFIX(1)'
.XF2B012 ANOP
.XF2B030 ANOP
         AIF   (T'&MF NE 'O').XF2B040
         MNOTE 8,'&MACNME - MF KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XF2B040 ANOP
         AIF   ('&MF(1)' EQ 'C').XF2B800    EXPAND CODE
         AIF   ('&MF(1)' EQ 'STATIC').XF2B100 EXPAND PSA
         MNOTE 8,'&MACNME - MF KEYWORD IS SET TO INVALID VALUE'
         AGO   .ERR0001
.XF2B100 ANOP  ,    EXPAND PERSISTENT STORAGE AREA (PSA)
         DS    0D
NV       EQU   X'FE'
&D.TRZO2BY EQU   *,86,C'X'
         DC    AL1(0,1,NV,NV,2,3),10AL1(NV)
         DC    AL1(4,5,NV,NV,6,7),42AL1(NV)
         DC    AL1(8,9,NV,NV,10,11),10AL1(NV)
         DC    AL1(12,13,NV,NV,14,15)
         MEXIT
.XF2B800 ANOP  ,    EXPAND CONVERT 8-BYTES OF ZERO'S & ONE'S TO A BYTE
         AIF   (T'&SOURCE NE 'O').XF2B810
         MNOTE 8,'&MACNME - SOURCE KEYWORD PARAMETER NOT SPECIFIED'
         AGO   .ERR0001
.XF2B810 ANOP
         MNOTE *,'&MACNME - USING REG &TGTreg'
&LABEL   MVC   &D.DW01,&SOURCE
         PACK  &D.DW01+4(5),&D.DW01(9)
         TR    &D.DW01+4(4),&D.TRZO2BY
         PACK  &D.DW01+6(3),&D.DW01+4(5)
         TR    &D.DW01+6(2),&D.TRZO2BY
         PACK  &D.DW01+7(2),&D.DW01+6(3)
         IC    &TGTreg,&D.BYTE18
         MEXIT
.* --------------------------------------------------------- *
.* MACRO ERROR MESSAGES
.* --------------------------------------------------------- *
.ERR0001 ANOP
         MNOTE 12,'&MACNME - EXPANSION TERMINATED'
         MEND
./ ADD NAME=AS3DMPRB 0106-16243-17172-1155-00017-00004-00000-APLKS   14
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, DATA
*
* CPYBK ID: AS3DMPRB
*    TITLE: MAP DUMP REQUEST BLOCK
*     DATE: 2017/06/10
*
*     DESC: THIS COPYBOOK IS USED TO MAP THE REQUEST BLOCK
*           FOR PROGRAM(S) ASUMVHEX, ASUMDHEX
*
* --------------------------------------------------------- *
         SPACE 1
AS3DMPRB    DS    0D       DUMP REQUEST BLOCK
DMPRB_LEN   DS    F        ..DATA LENGTH
DMPRB_NBR   DS    F        ..NUMBER OR SEQUENCE
DMPRB_TITLE DS    CL44     ..TITLE
./ ADD NAME=AS3DSEQU 0105-17100-19029-1349-00205-00013-00000-APLKS   19
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, DATA
*
* CPYBK ID: AS3DSEQU
*    TITLE: DATA SET EQUATES
*     DATE: 2017/04/10
*
*     DESC: THIS COPYBOOK IS USED TO ESTABLISH EQUATES FOR
*           MACRO AS1MDSDS
*
* --------------------------------------------------------- *
         SPACE 1
* --------------------------------------------------------- *
* COMMON EQUATE VALUES FOR THE FOLLOWING CONTROL BLOCKS
*
*   MACRO(AS1MDSDS) DSD, DSINFO
*   PROGRAM(ASU3QFAB)
*
* MAXIMUM RECLGTH FOR CARD RDR/PUN = 80
*
* MAXIMUM RECLGTH FOR PRINTER (IMPACT & LASER)
*  1403   - 120,132
*  3203   - 132
*  3211   - 132,150
*  3800   - 136 (10 PITCH)
*           163 (12 PITCH)
*           204 (15 PITCH)
*  4245   - 132
*  4248   - 132,168
*  3262-5 - 132
*  6252   - 133
*
* MAXIMUM RECLGTH FOR TAPE
*  3420   - 32760 (7 OR 9 TRACK)
*  3430   - 32760
*  3480   - 32760,65535(LBI)
*  3490   - 32760,65535(LBI)
*  3590   - 32760,262144(LBI)
*
* MAXIMUM RECLGTH FOR DASD = 32760
*
* --------------------------------------------------------- *
*       DCB  DSAB JFCB ICF  DSCB VTOC UCB
* _IND0  Y     Y    Y                  Y
* _IND1        Y    Y         Y        Y
* _IND2             Y                  Y
* _IND3             Y   Y     Y
* _IND4                 Y
* _IND5             Y         Y
* _IND6             Y                  Y
* _IND7             Y   Y     Y    Y   Y
* _IND8                                Y
* _IND9                                Y
* _INDA  Y                             Y
* _INDB  Y                             Y
*
* --------------------------------------------------------- *
         SPACE 1
*                             ..ACCESS METHOD
$IS      EQU   X'80'          ....DSORG=IS
$PS      EQU   X'40'          ....DSORG=PS
$DA      EQU   X'20'          ....DSORG=DA
$PO      EQU   X'10'          ....DSORG=PO
$VSAM    EQU   X'08'          ....VSAM
$DIV     EQU   X'02'          ....DATA-IN-VIRTUAL
$VIRT    EQU   X'01'          ....VIRTUAL
*                             ..FILE ORGANIZATION
$VRRDS   EQU   X'C0'          ....VRRDS VARLEN RELATIVE RECORD
$KSDS    EQU   X'80'          ....KSDS  KEYED SEQUENCE
$RRDS    EQU   X'40'          ....RRDS  RELATIVE RECORD
$ESDS    EQU   X'20'          ....ESDS  ENTRY SEQUENCED
$LDS     EQU   X'10'          ....LDS   LOGICAL (4K CHUNKS)
$KEY     EQU   X'08'          ....KEY
$DIR     EQU   X'04'          ....DIR
$SEQ     EQU   X'02'          ....SEQ   SEQUENTIAL/FLAT
$LIB     EQU   X'01'          ....LIB   PDS/PDSE/HFS
*                             ..RECORD FORMAT
$UND     EQU   X'C0'          ....RECFM=U   UNDEFINED
$FIX     EQU   X'80'          ....RECFM=F   FIXED
$VAR     EQU   X'40'          ....RECFM=V   VARIABLE
$BLK     EQU   X'20'          ....RECFM=.B  BLOCKED
$SPN     EQU   X'10'          ....RECFM=.SS SPANNED
$ASA     EQU   X'08'          ....RECFM=..A ASA CTL CHAR
$MCC     EQU   X'04'          ....RECFM=..M MACHINE CTL CHAR
$3800CC  EQU   X'01'          ....3800 CTL CHAR
*                             ..INDICATOR 0
$OPEN    EQU   X'80'          ....OPEN
$DUMMY   EQU   X'40'          ....DUMMY DD
$SUBSYS  EQU   X'20'          ....SYSIN/SYSOUT/SUBSYS=
$PIOERR  EQU   X'08'          ....PHYSICAL I/O ERROR
*                             ..INDICATOR 1
$GDGMBR  EQU   X'80'          ....GDG MEMBER
$PDSMBR  EQU   X'40'          ....PDS MEMBER
$BLSR    EQU   X'20'          ....VSAM BLSR
$VIO     EQU   X'10'          ....VIO VIRTUAL I/O
$PDSE    EQU   X'08'          ....PDS/E
$HFS     EQU   X'04'          ....HFS
*                             ..INDICATOR 2
$NEW     EQU   X'C0'          ....DISP=NEW
$MOD     EQU   X'80'          ....DISP=MOD
$OLD     EQU   X'40'          ....DISP=OLD
$SHR     EQU   X'20'          ....DISP=SHR
$TEMP    EQU   X'01'          ....TEMPORARY DATA SET
*                             ..INDICATOR 3
$SMSEF   EQU   X'80'          ....SMS/EF EXTENDED FORMAT
*                                 APPEND AN ADDITIONAL 32-BYTES
*                                 OF CONTROL INFORMATION
$SMSEFC  EQU   X'40'          ....SMS/EF COMPRESSABLE
$SMSEFEA EQU   X'20'          ....SMS/EF EXTENDED ADDRESS > 4GB
*                             ..INDICATOR 4
$BWOCICS EQU   X'80'          ....RLS BWO(TYPECICS)
$BWOIMS  EQU   X'40'          ....RLS BWO(TYPEIMS)
$RLSRCVY EQU   X'20'          ....RLS RECOVERY REQUIRED
$LOGALL  EQU   X'08'          ....RLS LOG ALL  (FWD RECOVERY)
$LOGUNDO EQU   X'04'          ....RLS LOG UNDO (DTB)
$LOGNONE EQU   X'02'          ....RLS LOG NONE
*                             ..INDICATOR 5
*                                 SPACE=(ALLOC,(PRI,SEC,DIR),RLSE,
*                                 CONTIG|MXIG|ALX|ROUND)
$SPCCYL  EQU   X'C0'          ....SPACE=(CYL,...
$SPCTRK  EQU   X'80'          ....SPACE=(TRK,...
$SPCBSZ  EQU   X'40'          ....SPACE=(BLKSIZE,...
$RLSE    EQU   X'20'          ....SPACE=(,,RLSE)
$CONTIG  EQU   X'08'          ....SPACE=(,,,CONTIG)
$MXIG    EQU   X'04'          ....SPACE=(,,,MXIG)
$ALX     EQU   X'02'          ....SPACE=(,,,ALX)
$ROUND   EQU   X'01'          ....SPACE=(,,,ROUND)
*                             ..INDICATOR 6
*                                 LABEL=(SEQ#,TYPE,PROTECT,
*                                 RETPD=N | EXPDT=YYDDD|YYYYDDD)
$LBLSEQ# EQU   X'80'          ....LABEL=(SEQ#,...)
$LBLAL   EQU   X'40'          ....LABEL=(,AL,...)
*                             ......ISO/ANSI, ISO/ANSI/FIPS
$LBLLTM  EQU   X'20'          ....LABEL=(,LTM,...)
*                             ......LEADING TM ON UNLABELED TAPE
$LBLBLP  EQU   X'10'          ....LABEL=(,BLP,...)
*                             ......BYPASS LABEL PROCESSING (AUTH)
$LBLUL   EQU   X'08'          ....USER LABELS
*                             ......AUL, SUL
$LBLNSL  EQU   X'04'          ....LABEL=(,NSL,...)
*                             ......NON-STD LABEL
$LBLSL   EQU   X'02'          ....LABEL=(,SL,...)
*                             ......STANDARD LABEL
$LBLNL   EQU   X'01'          ....LABEL=(,NL,...)
*                             ......NO LABEL
*                             ..INDICATOR 7
$CTLG    EQU   X'80'          ....CATALOGED
$ICF     EQU   X'40'          ....CATALOGED IN ICF CATALOG
$VVDS    EQU   X'20'          ....VVDS ON VOLUME
$SMS     EQU   X'10'          ....SMS MANAGED/OWNED
$LVOLODS EQU   X'08'          ....LAST VOL OF DATA SET
$RACFCTL EQU   X'04'          ....RACF CONTROLED
*                             ..INDICATOR 8
$CACHE   EQU   X'01'          ....CACHED DEVICE
*                             ..INDICATOR 9
$SYSIN   EQU   X'02'          ....SYSIN DEVICE
$SYSOUT  EQU   X'01'          ....SYSOUT DEVICE
*                             ..INDICATOR 10
$T3400   EQU   X'80'          ....3400 TAPE DRIVE (REEL)
$BPI1600 EQU   X'40'          ....1600 BPI
$BPI6250 EQU   X'20'          ....6250 BPI
$BPIDUAL EQU   X'01'          ....DUAL DENSITY 1600/6250
*                             ..INDICATOR 11
*                             ....CART
$T3423   EQU   X'80'          ....3423 TAPE DRIVE (CART)
$T3480   EQU   X'40'          ....3480 TAPE DRIVE (CART)
$T3490   EQU   X'20'          ....3490 TAPE DRIVE (CART)
$T3590   EQU   X'10'          ....3590 TAPE DRIVE (CART)
$MTCOMP  EQU   X'01'          ....DATA COMPACTION
*                             ....DASD
$D2305   EQU   X'80'          ....2305-2 DASD
$D3330   EQU   X'40'          ....3330 DASD
$D3340   EQU   X'20'          ....3340 DASD
$D3350   EQU   X'10'          ....3350 DASD
$D3375   EQU   X'08'          ....3375 DASD
$D333X   EQU   X'04'          ....3330-11 DASD
$D3380   EQU   X'02'          ....3380 DASD
$D3390   EQU   X'01'          ....3390 DASD
*                             ....UNIT RECORD
$P3211   EQU   X'80'          ....3211 PRINTER IMPACT
$P4245   EQU   X'40'          ....4245 PRINTER IMPACT
$P4248   EQU   X'20'          ....4248 PRINTER IMPACT
$P3800   EQU   X'10'          ....3800 PRINTER LASER
$PAPF    EQU   X'08'          ....APF  PRINTER SUBSYS
$R3895   EQU   X'04'          ....OPTICAL/MAGINK CHAR RDR
$AP3838  EQU   X'02'          ....3838 ARRAY PROCESSOR
$EFDIR   EQU   X'01'          ....ESCON/FICON DIRECTOR
*                             ....CTC
$CTCSER  EQU   X'80'          ....SERIAL CTC
$CTCPAR  EQU   X'40'          ....PARALLEL CTC
$CTCESCON EQU   X'20'         ....ESCON CTC
$CTCFICON EQU   X'10'         ....FICON CTC
$CTCRS6000  EQU   X'08'       ....RS6000 ACTING CTC
$CTC3172 EQU   X'04'          ....3172 ACTING CTC
$CTCOTH  EQU   X'01'          ....OTHER TYPE OF CTC
*                             ..VSAM SHARE OPTIONS
$SHRREG4 EQU   X'80'          ....ON SHR(4 N)
$SHRREG3 EQU   X'40'          ....ON SHR(3 N)
$SHRREG2 EQU   X'20'          ....ON SHR(2 N)
$SHRREG1 EQU   X'10'          ....ON SHR(1 N)
$SHRSYS4 EQU   X'08'          ....ON SHR(N 4)
$SHRSYS3 EQU   X'04'          ....ON SHR(N 3)
$SHRSYS2 EQU   X'02'          ....ON SHR(N 2)
$SHRSYS1 EQU   X'01'          ....ON SHR(N 1)
./ ADD NAME=AS3ENVCA 0137-19227-19238-1027-00932-00931-00000-APLKS   12
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, DATA
*
* CPYBK ID: AS3ENVCA
*    TITLE: MAP QUERY ENVIRONMENT COMMUNICATION AREA
*     DATE: 2017/08/31
*
*     DESC: THIS COPYBOOK IS USED TO MAP THE COMM AREA
*           FOR PROGRAM(S) ASU3QEIB
*
* --------------------------------------------------------- *
*************************************************************
*        CODE REVISION LIST
*           DATE     PROGRAMMER  DESCRIPTION
*------------------------------------------------------------
*        2017/09/20   lks        z/OS 1.13
*        2019/08/10   lks        z/OS 2.2
*************************************************************
         SPACE 1
         DS    0D
AS3ENVCA EQU   *         Query Environment Communication Area
PSAINFO  EQU   *         Info from the PSA
* PSA - Prefix Storage Area
PSA_ARCH DS    0XL(1*8+1)     ..Architecture (FLCARCH)
PSA_ARCHB0 DS    XL1          ....byte-0
         DS    CL7            ......
PSA_ZARCH DS    CL1           ......x'01' z/ARCH
         SPACE 1
         DS    D
PSAEINFO EQU   *         Info from the PSAE
* PSAE - Prefix Storage Area Extended
PSA_FACLST  DS   0XL(16*8+16) ..facility list 0 (FLCEFACILITIESLIST)
PSA_FLSTB0  DS    XL1         ....byte-0
PSA_F0N3    DS    CL1         ......x'80' N3 inst are available
PSA_F0ZMODE DS    CL1         ......x'40' z/Arch mode installed
PSA_F0ZACT  DS    CL1         ......x'20' z/Arch mode active
PSA_F0IDTE  DS    CL1         ......x'10' IDTE installed
            DS    CL1         ......x'08' IDTE clear seg tbl
            DS    CL1         ......x'04' IDTE clear reg tbl
PSA_F0ASLX  DS    CL1         ......x'02' ASN and LX reuse facility
*                                         May 2004
PSA_F0STFLE DS    CL1         ......x'01' STFLE inst available
PSA_FLSTB1  DS    XL1         ....byte-1
PSA_F1DAT   DS    CL1         ......x'80' DAT feature
PSA_F1SRSF  DS    CL1         ......x'40' sense-running-status facility
PSA_F1SSKE  DS    CL1         ......x'20' SSKE inst installed
*                                         Apr 2007 Set Stg Key Extended
PSA_F1STSIE DS    CL1         ......x'10' STSI-enhancement
PSA_F1CQCIF DS    CL1         ......x'08' CQCIF 110524
PSA_F1IPTE  DS    CL1         ......x'04' IPTE-range facility
*                                         Aug 2010
            DS    CL1         ......x'02' Nonquiescing key-setting
*                                         facility Aug 2010
PSA_F1APFT  DS    CL1         ......x'01' APFT facility 091111
PSA_FLSTB2  DS    XL1         ....byte-2
PSA_F2ETF2  DS    CL1         ......x'80' ETF-2 Oct 2000
*                                         Extended Translation Facility
PSA_F2CRYA  DS    CL1         ......x'40' Cryptographic assist
PSA_F2LDF   DS    CL1         ......x'20' long displacement facility
*                                         Jun 2003
*                                         z/Arch
PSA_F2LDFHP DS    CL1         ......x'10' long displacement facility hp
PSA_F2HFPMAS DS    CL1        ......x'08' HFP Mult/Add/Subt facility
*                                         Jun 2003
PSA_F2XIMM  DS    CL1         ......x'04' Extended Immed facility
*                                         Sep 2005
PSA_F2ETF3  DS    CL1         ......x'02' ETF-3 May 2004
*                                         Extended Translation Facility
PSA_F2HFPUNX DS    CL1        ......x'01' HFP unnormalized extension
*                                         Sep 2005
PSA_FLSTB3  DS    XL1         ....byte-3
PSA_F3ETF2E DS    CL1         ......x'80' ETF-2 enhancement Sep 2005
PSA_F3STKFE DS    CL1         ......x'40' STCKF enhancement
PSA_F3PARSE DS    CL1         ......x'20' parsing enhancement facility
*                                         Feb 2008
            DS    CL1         ......x'10'
PSA_F3TOD   DS    CL1         ......x'08' TOD clock steering facility
*                                         Sep 2005
            DS    CL1         ......x'04'
PSA_F3ETF3E DS    CL1         ......x'02' ETF-3 enhancement Sep 2005
PSA_F3ECTF  DS    CL1         ......x'01' extract CPU time facility
*                                         Apr 2007
PSA_FLSTB4  DS    XL1         ....byte-4
PSA_F4CSSF  DS    CL1         ......x'80' compare-swap-store facility
*                                         Apr 2007
PSA_F4CSSF2 DS    CL1         ......x'40' compare-swap-store facility 2
*                                         Feb 2008
PSA_F4GIXF  DS    CL1         ......x'20' general-inst-extention
*                                         Feb 2008
PSA_F4EEF   DS    CL1         ......x'10' execute extension facility
*                                         Feb 2008
PSA_F4EMF   DS    CL1         ......x'08' enhanced monitor facility
*                                         Aug 2010
            DS    CL3         ......
PSA_FLSTB5  DS    XL1         ....byte-5
PSA_F5SPPF  DS    CL1         ......x'80' Set-Program-Parameter fac
PSA_F5FPSE  DS    CL1         ......x'40' FP support enhancement
PSA_F5DFP   DS    CL1         ......x'20' Decimal FP facility
*                                         Apr 2007
PSA_F5DFPHP DS    CL1         ......x'10' Decimal FP facility HP
PSA_F5PFPO  DS    CL1         ......x'08' PFPO inst Apr 2007
PSA_F5Z196  DS    CL1         ......x'04' z196
*                                         distinct operands Aug 2010
*                                         high-word Aug 2010
*                                         load-store-on-condition
*                                         Aug 2010
*                                         population count Aug 2010
*                                         interlocked-access fac 1
*                                         Aug 2010
            DS    CL2         ......
PSA_FLSTB6  DS    XL1         ....byte-6
            DS    CL1         ......x'80'
PSA_F6MIEF  DS    CL1         ......x'40' misc instr extensions fac
*                                         Sep 2012
*                                         exec hint facility Sep 2012
*                                         load & trap fac Sep 2012
PSA_F6CTXF  DS    CL1         ......x'20' constrained transactional
*                                         execution facility
*                                         Sep 2012
*           only if CVTTXC or PSATXC on
            DS    CL2         ......
PSA_F6LSC2  DS    CL1         ......x'04' load-store-on-cond 2
*                                         Mar 2015
*                                         load zero right most byte
*                                         Mar 2015
PSA_F6EECS  DS    CL1         ......x'02' entropy encoding for CMPSC
PSA_F6CTEND DS    CL1         ......x'01' conditional transaction end
PSA_FLSTB7  DS    XL1         ....byte-7
PSA_F7STPTODCS DS    CL1      ......x'80' STPTODCS
PSA_F7MSAE5 DS    CL1         ......x'40' MSAE5 Mar 2015
*                                         message security assist
PSA_F7MIE2  DS    CL1         ......x'20' MIE2
PSA_F7SA    DS    CL1         ......x'10' SA
PSA_F7TSI   DS    CL1         ......x'08' TSI
            DS    CL3         ......
PSA_FLSTB8  DS    XL1         ....byte-8
PSA_F8RI    DS    CL1         ......x'80' RI
PSA_F8CRYI  DS    CL1         ......x'40' CRYPTO AP-queue adapter
*                                         interruption
            DS    CL1         ......x'20'
PSA_F8CPUMCF DS    CL1        ......x'10' CPU-measurement counter
*                                         facility
PSA_F8CPUMSF DS    CL1        ......x'08' CPU-measurement sampling
*                                         facility
            DS    CL1         ......x'04'
PSA_F8AISIF DS    CL1         ......x'02' AISI facility
PSA_F8AENF  DS    CL1         ......x'01' AEN facility
PSA_FLSTB9  DS    XL1         ....byte-9
PSA_F9AISF  DS    CL1         ......x'80' AIS facility
PSA_F9TXF   DS    CL1         ......x'40' Transactional exec facility
*                                         Sep 2012
*           only if CVTTX or PSATX on
            DS    CL2         ......
PSA_F9MSA3  DS    CL1         ......x'08' MSA3 facility Aug 2010
*                                         message security assist
PSA_F9MSA4  DS    CL1         ......x'04' MSA4 facility Aug 2010
*                                         message security assist
PSA_F9EDAT2 DS    CL1         ......x'02' enhanced DAT-2 Sep 2012
            DS    CL1         ......
PSA_FLSTBA  DS    XL1         ....byte-10
PSA_FADFPP  DS    CL1         ......x'80' decimal FP packed conv
*                                         Mar 2015
            DS    CL7         ......
PSA_FLSTBB  DS    XL1         ....byte-11
            DS    CL8         ......byte-11
PSA_FLSTBC  DS    XL1         ....byte-12
            DS    CL8         ......byte-12
PSA_FLSTBD  DS    XL1         ....byte-13
            DS    CL8         ......byte-13
PSA_FLSTBE  DS    XL1         ....byte-14
            DS    CL8         ......byte-14
PSA_FLSTBF  DS    XL1         ....byte-15
            DS    CL8         ......byte-15
PSA_FACLST1 DS   0XL(16*8+16) ..facility list 1 (FLCEFACILITIESLIST1)
PSA_FLSTBG  DS    XL1         ....byte-16
PSA_FGDLYF  DS    CL1         ......x'80' delay facility
PSA_FGVEF   DS    CL1         ......x'40' vector extension facility
*                                         Z1 Mar 2015
*           only if CVTVEF on
PSA_FGIEPF  DS    CL1         ......x'20' inst exec prot facility
*                                         IF suppression facility
PSA_FGSEF   DS    CL1         ......x'10' side effect facility
PSA_FGCLOF  DS    CL1         ......x'08' close facility
PSA_FGGSF   DS    CL1         ......x'04' GSF
*           only if CVTGSF on
PSA_FGRTI   DS    CL1         ......x'02' RTI FC mod facility
            DS    CL1         ......
PSA_FLSTBH  DS    XL1         ....byte-17
PSA_FHSTLB  DS    CL1         ......x'80' shared TLB Sep 2012
            DS    CL2
PSA_FHCEF   DS    CL1         ......x'10' TOD clock epoch facility
            DS    CL2
PSA_FHSCCM  DS    CL1         ......x'02' store CPU ctr multiple
PSA_FHSCT   DS    CL1         ......x'01' scaled CPU timer
PSA_FLSTBI  DS    XL1         ....byte-18
            DS    CL8         ......byte-18
PSA_FLSTBJ  DS    XL1         ....byte-19
            DS    CL8         ......byte-19
PSA_FLSTBK  DS    XL1         ....byte-20
            DS    CL8         ......byte-20
PSA_FLSTBL  DS    XL1         ....byte-21
            DS    CL8         ......byte-21
PSA_FLSTBM  DS    XL1         ....byte-22
            DS    CL8         ......byte-22
PSA_FLSTBN  DS    XL1         ....byte-23
            DS    CL8         ......byte-23
PSA_FLSTBO  DS    XL1         ....byte-24
            DS    CL8         ......byte-24
PSA_FLSTBP  DS    XL1         ....byte-25
            DS    CL8         ......byte-25
PSA_FLSTBQ  DS    XL1         ....byte-26
            DS    CL8         ......byte-26
PSA_FLSTBR  DS    XL1         ....byte-27
            DS    CL8         ......byte-27
PSA_FLSTBS  DS    XL1         ....byte-28
            DS    CL8         ......byte-28
PSA_FLSTBT  DS    XL1         ....byte-29
            DS    CL8         ......byte-29
PSA_FLSTBU  DS    XL1         ....byte-30
            DS    CL8         ......byte-30
PSA_FLSTBV  DS    XL1         ....byte-31
            DS    CL8         ......byte-31
         SPACE 1
         DS    D
CVTINFO  EQU   *         Info from the CVT
* CVT - Communication Vector Table
*   FLCCVT field of the PSA data area (location X'10')
*   FLCCVT2 field of the PSA data area
CVT_PPLVL   DS    0CL16       ..program product level (CVTPROD)
CVT_PNAME   DS    CL8         ....product name
CVT_FMID    DS    CL8         ....FMID
CVT_UVID    DS    CL16        ..user provided version ID (CVTVERID)
CVT_CPU     DS    ZL04        ..CPU number (i.e. 3090) (CVTMDL)
CVT_RRMM    DS    0CL4        ..release and level (CVTRELNO)
CVT_RR      DS    CL2         ....release
CVT_MM      DS    CL2         ....modification level
CVT_DCB     DS    0XL(1*8+1)  ..(CVTDCB) X'9B'
CVT_DCBB0   DS    XL1         ....byte-0
CVT_370XA   DS    CL1         ......x'80' S/370-XA mode execution
CVT_PCP     DS    CL1         ......x'40' PCP (VM=YES)
CVT_MFT     DS    CL1         ......x'20' MFT
CVT_MVT     DS    CL1         ......x'10' MVT
CVT_FLG0    DS    CL1         ......x'08' CVTOSLVL usable (ESA+)
CVT_M65MP   DS    CL1         ......x'04' Model 65 multi-processor
CVT_DAT     DS    CL1         ......x'02' Dynamic Address Translation
CVT_MVS     DS    CL1         ......x'01' Multiple Virtural Storage
*                             ......x'12' OS/VS2 system
CVT_OPTA    DS    0XL(1*8+1)  ..(CVTOPTA) X'A3'
CVT_OPTAB0  DS    XL1         ....byte-0
CVT_CCH     DS    CL1         ......x'80' Channel Check Handler
CVT_APR     DS    CL1         ......x'40' Alternate Path Retry
CVT_DDR     DS    CL1         ......x'20' Dynamic Device Reconfig
*                                 (RMS)   Recovery Management Support
CVT_NIP     DS    CL1         ......x'10' NIP is executing
            DS    CL1         ......x'08'
CVT_NVEQR   DS    CL1         ......x'04' no EXCP V=R
CVT_ASCII   DS    CL1         ......x'02' ASCII tape processing avail
CVT_XPFP    DS    CL1         .  ...x'01' Extended Precision FP
CVT_OPTB    DS    0XL(1*8+1)  ..(CVTOPTB) X'20'
CVT_OPTBB0  DS    XL1         ....byte-0
CVT_STGPROT DS    CL1         ......x'80' Storage Protect feature
CVT_HWCCTF  DS    CL1         ......x'40' Hardware Clock Comparator
*                                         CPU Timer feature
CVT_TOD     DS    CL1         ......x'20' Time-of-Day clock feature
CVT_NLOG    DS    CL1         ......x'10' no SYS1.LOGREC
            DS    CL1         ......x'08'
CVT_FPROT   DS    CL1         ......x'04' FETCH protect feature
CVT_VS1A    DS    CL1         ......x'02' VS1 assist MDC353
CVT_VS1B    DS    CL1         ......x'01' VS1 assist MDC365
CVT_FLAG1   DS    0XL(1*8+1)  ..(CVTFLAG1) X'00'
CVT_FLAG1B0 DS    XL1         ....byte-0
            DS    CL2
CVT_CUSE    DS    CL1         ......x'20' CUSE
            DS    CL2
CVT_CSTR    DS    CL1         ......x'04' CSTRING faciltiy Jun 1992
CVT_SUBSP   DS    CL1         ......x'02' Subspace facility Apr 1994
            DS    CL1
CVT_FLAG2   DS    0XL(1*8+1)  ..(CVTFLAG2) X'FF'
CVT_FLAG2B0 DS    XL1         ....byte-0
CVT_CMPSC   DS    CL1         ......x'80' Compression/Expansion svc
CVT_CMPSCHW DS    CL1         ......x'40' Compression/Expansion HW
CVT_SOPF    DS    CL1         ......x'20' Suppression-on-Procection
CVT_BFP     DS    CL1         ......x'10' BFP inst set HW May 1998
CVT_PER2    DS    CL1         ......x'08' PER2 hardware
CVT_IQDC    DS    CL1         ......x'04' Internal Queued Direct Comm
CVT_ASNLX   DS    CL1         ......x'02' ASN & LX reuse Arch May 2004
CVT_EDAT    DS    CL1         ......x'01' Enhanced DAT Arch Feb 2008
CVT_FLAG3   DS    0XL(1*8+1)  ..(CVTFLAG3) X'00'
CVT_FLAG3B0 DS    XL1         ....byte-0
CVT_ZARCH   DS    CL1         ......x'80' z/Arch hw
            DS    CL6
CVT_GSF     DS    CL1         ......x'01' GSF is available
CVT_FLAG4   DS    0XL(1*8+1)  ..(CVTFLAG4) X'80'
CVT_FLAG4B0 DS    XL1         ....byte-0
CVT_P001I   DS    CL1         ......x'80' P001 installed
CVT_P001A   DS    CL1         ......x'40' P001 active
CVT_ZNALC   DS    CL1         ......x'20' zNALC
CVT_DCPUA   DS    CL1         ......x'10' dynamic CPU addition enabled
CVT_TX      DS    CL1         ......x'08' TX support enabled Sep 2012
*                                         P002 enabled
CVT_TXC     DS    CL1         ......x'04' TXC support enabled Sep 2012
*                                         P002C enabled
CVT_RI      DS    CL1         ......x'02' RI support enabled
CVT_EDAT2   DS    CL1         ......x'01' EDAT2 enabled
CVT_FLAG5   DS    0XL(1*8+1)  ..(CVTFLAG5) X'40'
CVT_FLAG5B0 DS    XL1         ....byte-0
CVT_VEF     DS    CL1         ......x'80' vector extension facility
*                                         Z1 Mar 2015
CVT_EEC     DS    CL1         ......x'40' EEC
            DS    CL6
CVT_FLAG6   DS    0XL(1*8+1)  ..(CVTFLAG6) X'00'
CVT_FLAG6B0 DS    XL1         ....byte-0
CVT_SOLE    DS    CL1         ......x'80' solution edition
            DS    CL7
CVT_FLAG7   DS    0XL(1*8+1)  ..(CVTFLAG7) X'00'
CVT_FLAG7B0 DS    XL1         ....byte-0
            DS    CL8
CVT_FLAG8   DS    0XL(1*8+1)  ..(CVTFLAG8) X'00'
CVT_FLAG8B0 DS    XL1         ....byte-0
            DS    CL8
CVT_LDTOFF  DS    F           ..(CVTTZ) Local Date/Time offset GMT/UTC
CVT_GMTOFF  DS    CL6         ..GMT offset = CVTTZ*1.048576/3600*100
*                               +-HH:MM FROM GMT
CVT_OSLVL   DS   0CL(16*8+16) ..(CVTOSLVL)
CVT_OSLVLB0 DS    XL1         ....byte-0
CVT_F0HBB3310 DS    CL1       ......x'80' HBB3310 ESA/370
CVT_F0HBB4420 DS    CL1       ......x'40' HBB4420
CVT_F0JBB3313 DS    CL1       ......x'20' JBB3313
CVT_F0JBB3311 DS    CL1       ......x'10' JBB3311,HiperSpace
CVT_F0HBB4410 DS    CL1       ......x'08' HBB4410,spin-lock,UCB svcs
CVT_F0DTASPC  DS    CL1       ......x'04' DataSpace SCOPE=COMMON
CVT_F0CRPT    DS    CL1       ......x'02' Encryption
CVT_F0JBB4422 DS    CL1       ......x'01' JBB4422
CVT_OSLVLB1 DS    XL1         ....byte-1
CVT_F1HBB4430 DS    CL1       ......x'80' HBB4430,dynamic APF
CVT_F1WLM     DS    CL1       ......x'40' Work Load Manager
CVT_F1HBB5510 DS    CL1       ......x'20' HBB5510,dynamic exits
CVT_F1HBB5520 DS    CL1       ......x'10' HBB5520,Enclaves
CVT_F1JBB5522 DS    CL1       ......x'08' JBB5522
CVT_F1HBB6603 DS    CL1       ......x'04' HBB6603 OS/390 R3,
*                                         dynamic LNKLST
CVT_F1HBB6601 DS    CL1       ......x'02' HBB6601 OS/390 R1,
*                                         product enable/disable
CVT_F1HBB6602 DS    CL1       ......x'01' HBB6602 OS/390 R2,
*                                         logical PARMLIB svc
CVT_OSLVLB2 DS    XL1         ....byte-2
CVT_F2JBB6604 DS    CL1       ......x'80' JBB6604 OS/390 R4
*                                         dynamic LPA
*                                         Runtime Library Services
CVT_F2HBB6605 DS    CL1       ......x'40' HBB6605 OS/390 R5
CVT_F2HBB6606 DS    CL1       ......x'20' HBB6606 OS/390 R6
CVT_F2BFP     DS    CL1       ......x'10' Binary Floating Point
*                                         simulated, or hw if CVT_BFP
CVT_F2JBB6607 DS    CL1       ......x'08' JBB6607 OS/390 R7
CVT_F2HBB6608 DS    CL1       ......x'04' HBB6608 OS/390 R8
CVT_F2JBB6609 DS    CL1       ......x'02' JBB6609/HBB6609 OS/390 R9
CVT_F2HBB7703 DS    CL1       ......x'01' HBB7703 OS/390 R10
CVT_OSLVLB3 DS    XL1         ....byte-3
CVT_F3PAUSE   DS    CL1       ......x'80' pause/release svcs
CVT_F3PAUSE2  DS    CL1       ......x'40' IEAVAPE2 & related svcs
CVT_F3JBB7713 DS    CL1       ......x'20' JBB7713 z/OS V1R1
*                                         LPAR clustering
CVT_F3HBB7705 DS    CL1       ......x'10' HBB7705 z/OS V1R2
*                                         64-bit virtual storage
CVT_F3HBB7706 DS    CL1       ......x'08' HBB7706 z/OS V1R3
CVT_F3HBB7707 DS    CL1       ......x'04' HBB7707 z/OS V1R4
CVT_F3HBB7708 DS    CL1       ......x'02' HBB7708 z/OS V1R5
CVT_F3HBB7709 DS    CL1       ......x'01' HBB7709 z/OS V1R6
CVT_OSLVLB4 DS    XL1         ....byte-4
CVT_F4CSRSI   DS    CL1       ......x'80' CSRSI svc
CVT_F4UNICODE DS    CL1       ......x'40' Unicode callable svcs
CVT_F4CSRUNIC DS    CL1       ......x'20' CSRUNIC callable svcs
*                                         ETF-2 Oct 2000
CVT_F4IBMLM   DS    CL1       ......x'10' IBM License Manager
CVT_F4ASNLX   DS    CL1       ......x'08' ASN & LX reuse Arch
CVT_F4TOCP    DS    CL1       ......x'04' TIME_ON_CP
CVT_F4ZIIP    DS    CL1       ......x'02' zIIP support
CVT_F4IFA     DS    CL1       ......x'01' IFA routine
CVT_OSLVLB5 DS    XL1         ....byte-5
CVT_F5ZOSE    DS    CL1       ......x'80' z/OS.e
CVT_F5HBB7720 DS    CL1       ......x'40' HBB7720 z/OS V1R7
CVT_F5HBB7730 DS    CL1       ......x'20' HBB7730 z/OS V1R8
CVT_F5HBB7740 DS    CL1       ......x'10' HBB7740 z/OS V1R9
CVT_F5HBB7750 DS    CL1       ......x'08' HBB7750 z/OS V1R10
CVT_F5HBB7760 DS    CL1       ......x'04' HBB7760 z/OS V1R11
*                                         G64CPU infrastructure
CVT_F5HBB7770 DS    CL1       ......x'02' HBB7770 z/OS V1R12
CVT_F5HBB7780 DS    CL1       ......x'01' HBB7780 z/OS V1R13
CVT_OSLVLB6 DS    XL1         ....byte-6
CVT_F6HBB7790 DS  CL1         ......x'80' HBB7790 z/OS V2R1
CVT_F6HBB77A0 DS  CL1         ......x'40' HBB77A0 z/OS V2R2
CVT_F6JBB778H DS  CL1         ......x'20' JBB778H z/OS V1R13
            DS    CL5         ......
CVT_OSLVLB7 DS    XL1         ....byte-7
            DS    CL8         ......byte-7
CVT_OSLVLB8 DS    XL1         ....byte-8
CVT_F8PAUSE3  DS    CL1       ......x'80' IEA4xxxx
CVT_F8PAUSE4  DS    CL1       ......x'40' Pause with checkpoint-OK
CVT_F8ECT   DS    CL1         ......x'20' TIMEUSED ECT=YES
CVT_F8TOCP  DS    CL1         ......x'10' TIMEUSED TIME_ON_CP
CVT_F8OPZ   DS    CL1         ......x'08' IEFOPZ
            DS    CL3         ......
CVT_OSLVLB9 DS    XL1         ....byte-9
            DS    CL8         ......byte-9
CVT_OSLVLBA DS    XL1         ....byte-10
            DS    CL8         ......byte-10
CVT_OSLVLBB DS    XL1         ....byte-11
            DS    CL8         ......byte-11
CVT_OSLVLBC DS    XL1         ....byte-12
            DS    CL8         ......byte-12
CVT_OSLVLBD DS    XL1         ....byte-13
            DS    CL8         ......byte-13
CVT_OSLVLBE DS    XL1         ....byte-14
            DS    CL8         ......byte-14
CVT_OSLVLBF DS    XL1         ....byte-15
            DS    CL8         ......byte-15
         SPACE 1
         DS    D
ECVTINFO EQU   *         Info from the ECVT
* ECVT - Extended Communication Vector Table
*   PSAECVT+4 field of the PSA data area
*   CVTECVT field of the CVT data area
ECVT_SYSPLEX DS    CL8        ..SYSPLEX name (ECVTSPLX)
ECVT_HWNAME  DS    CL8        ..hardware name (ECVTHDNM)
ECVT_LPAR    DS    CL8        ..LPAR name (ECVTLPNM)
ECVT_VMID    DS    CL8        ..host VM userid of MVS guest (ECVTNMNM)
ECVT_PID     DS    CL8        ..PID product ID (ECVTPIDN)
ECVT_PRODNBR DS    ZL8        ..product sequence number (ECVTPSEQ)
ECVT_PRODOWN DS    CL16       ..product owner (ECVTPOWN)
ECVT_PRODNME DS    CL16       ..product name (ECVTPNAM)
ECVT_PRODVRM DS    0CL6       ..product VRM
ECVT_PRODVER DS    CL2        ....product version (ECVTPVER)
ECVT_PRODREL DS    CL2        ....product release (ECVTPREL)
ECVT_PRODMOD DS    CL2        ....product modification (ECVTPMOD)
ECVT_CLONE   DS    CL2        ..system within SYSPLEX (ECVTCLON)
ECVT_LOADPRM DS    CL8        ..LOAD parameter for this IPL (ECVTMLPR)
ECVT_CACHESZ DS    H          ....cache line size
ECVT_GRSMODE DS    H          ....GRS mode of operation (ECVTGMOD)
*                             ......0-none, 1-ring, 2-star
ECVT_OMVS    DS    CL1        ....OMVS is available Y|N
         SPACE 1
         DS    D
ASCBINFO EQU   *         Info from the ASCB & ASXB
* ASCB - Address Space Control Block
*   PSAAOLD field of the PSA data area (CURRENT/HOME ASCB)
* ASXB - Address Space Extension Block
*   ASCBASXB field of the ASCB data area
ASCB_LCPUID   DS    H         ..logical CPU ID (ASCBWQID)
ASCB_ASID     DS    H         ..ASCB ASID (ASCBASID)
ASCB_DPRI     DS    H         ..dispatching priority 0:255 (ASCBDPH)
ASCB_LEVEL    DS    H         ..(ASCBLEVL)
*                             ....x'00' HBB2102
*                             ....x'01' JBB2110
*                             ....x'02' JBB2133
*                             ....x'03' HBB4410 spin-lock, UCB svcs
ASXB_USERID   DS    CL8       ..USERID (ASXBUSER)
         SPACE 1
ACEEINFO EQU   *         Info from Accessor Environment Element
* ACEE - ACCESSOR ENVIRONMENT ELEMENT
*   ASXBSENV field of the ASXB data area
ACEE_USERID DS    CL8         ..ACEE USERID
ACEE_GROUP  DS    CL8         ..ACEE connect GROUP
ACEE_APPLNM DS    CL8         ..ACEE application name
ACEE_TERMID DS    CL8         ..ACEE terminal id
ACEE_USERNAME DS    CL24      ..ACEE user name
         SPACE 1
JESINFO  EQU   *         Info from JES JSAB
* JSAB - JOB Scheduler Address Space Block
*   ASSBJSAB field of the ASSB data area
*   STCBJSAB field of the STCB data area
JSAB_CODELVL  DS    H         ..CODE LEVEL OF CREATING COMPONENT
*                             ....0:255
JSAB_JSABSCID DS    CL4       ..SCHEDULING COMPONENT'S ID
*                             ....JES2|JES3|ASCH FOR APPC/MVS
JSAB_JSABESTK DS    XL8       ..STCK PGM ENTRY START TIME UNSGNPD
JSAB_NTRYTIMESTAMP DS    CL24 ..ENTRY TIME STAMP PRINTABLE
JSAB_JSABXSTK DS    XL8       ..STCK PGM EXEC START TIME UNSGNPD
JSAB_EXECTIMESTAMP DS    CL24 ..EXEC TIME STAMP PRINTABLE
JSAB_JSABJBID DS    CL8       ..JOB ID
JSAB_JSABJBNM DS    CL8       ..JOB NAME
JSAB_EXECLVL  DS    H         ..0=ADDR SP, 4=SUBTASK
JSAB_JSABSSNM DS    CL4       ..CREATING SUBSYSTEM NAME
*                             ....JES2|JES3
JSAB_JSABUSID DS    CL8       ..USER ID
JSAB_JSABGPNM DS    CL8       ..XCF GROUP NAME FOR JESPLEX
*                             ....JES2 ONLY
         SPACE 1
         DS    D
DFAINFO  EQU   *         Info from Data Facilities Area
*   CVTDFA field of the CVT data area
DFA_REL  DS    XL2            ..DFA release in hex x'3321'
DFA_P0REL DS    0CL4          ..DFA print release
DFA_P0LVL DS    CL3           ....DFA last release
DFA_P0PLUS DS    CL1          ....DFA >0 then higher than last release
DFA_RELS DS    XL4            ..DFA product, VRM in hex x'03010D00'
DFA_PRELS DS    CL8           ..DFA print release ppvvrrmm
DFA_PPROD DS    ZL2           ....DFA product
*                             ......c'00' DFP use DFA_REL
*                             ......c'01' DFSMS
*                             ......c'02' OS/390
*                             ......c'03' z/OS
DFA_PVER DS    ZL2            ....DFA version
DFA_PREL DS    ZL2            ....DFA release
DFA_PMOD DS    ZL2            ....DFA modification
DFA_FEAT DS    0XL(10*8+10)   ..DFA features
DFA_FB0  DS    XL1            ....byte-0 x'FE'
DFA_F0XA DS    CL1            ......x'80' MVS/XA
DFA_F0LSR DS    CL1           ......x'40' multi VSAM LSR pool
DFA_F0EOS DS    CL1           ......x'20' erase on scratch
DFA_F0XRF DS    CL1           ......x'10' extended recovery facility
DFA_F0EXP DS    CL1           ......x'08' EXPORT by CI
DFA_F0EOS1 DS    CL1          ......x'04' erase on scratch for ICF
DFA_F0SMS DS    CL1           ......x'02' System Managed Storage
DFA_F0PDSE DS    CL1          ......x'01' PDS/E support
DFA_FB1  DS    XL1            ....byte-1 x'2A'
         DS    CL2            ......
DFA_F1FMS DS    CL1           ......x'20' file management services
DFA_F1CMPAC DS    CL1         ......x'10' installation dflt compaction
DFA_F1BCPPB DS    CL1         ......x'08' bypass channel pgm prefix bld
DFA_F1SSF DS    CL1           ......x'04' SSF services
DFA_F1MMS DS    CL1           ......x'02' MMS supports XTIOT
DFA_F1INDEF DS    CL1         ......x'01' compaction dflt set by
*                                         installation
DFA_FB2  DS    XL1            ....byte-2 x'63'
DFA_F2VSEX DS    CL1          ......x'80' VOLSER extracted from sense
*                                         info OK
DFA_F2SAMEF DS    CL1         ......x'40' SAM EF
DFA_F2KSDSEF DS    CL1        ......x'20' KSDS EF
DFA_F2CMPCT DS    CL1         ......x'10' AM compaction supported
DFA_F2RLSI DS    CL1          ......x'08' SMSVSAM server initialized
*                                         RLS
DFA_F2RECALL DS    CL1        ......x'04' data set recall via
*                                         ARCHRCAL macro
DFA_F2DSERV DS    CL1         ......x'02' DSERV exit
DFA_F2DLL DS    CL1           ......x'01' DFSMS DLL support
DFA_FB3  DS    XL1            ....byte-3 x'7C'
         DS    CL1            ......x'80'
DFA_F3NIPSVC DS    CL1        ......x'40' DFP NIP svcs via IGGSSRV
*                                         macro, dynamic link list
DFA_F3CIR2 DS    CL1          ......x'20' catalog info routine
*                                         IKJEHCIR supports format-2
*                                         work area
DFA_F3RTLS DS    CL1          ......x'10' RunTime Library Support
DFA_F3DYLPA DS    CL1         ......x'08' dynamic LPA
DFA_F3FORK DS    CL1          ......x'04' DFSMS loader fork exit
DFA_F3SSSW DS    CL1          ......x'02' software support for
*                                         RVA SNAPSHOT
DFA_F3SSAPI DS    CL1         ......x'01' API support for RVA
*                                         SNAPSHOT
DFA_FB4  DS    XL1            ....byte-4 x'B4'
DFA_F4UMPDSE DS    CL1        ......x'80' unmanaged PDS/E
DFA_F4BTOKSZ DS    CL1        ......x'40' on BLOCKTOKENSIZE=REQUIRE
*                                         off BLOCKTOKENSIZE=NOREQUIRE
DFA_F4BLDL DS    CL1          ......x'20' BLDL PARMS START=, STOP=
DFA_F4EAV DS    CL1           ......x'10' USEEAV=YES
DFA_F4SAMHPF DS    CL1        ......x'08' SAM_USE_HPF
DFA_F4PIPES DS    CL1         ......x'04' BSAM Pipes performance SPE
DFA_F4ANSI4 DS    CL1         ......x'02' on ANSI-4 tape labels
*                                         off ANSI-3 tape labels
DFA_F4ANSIF DS    CL1         ......x'01' on force all ANSI tape
*                                         labels to be written at
*                                         DFA_F5ANSI4 level
*                                         off force new ANSI tape
*                                         labels to be written at
*                                         DFA_F5ANSI4 level
DFA_FB5  DS    XL1            ....byte-5 x'00'
*   system-determined block size
         DS    CL1            ......x'80'
DFA_F5SDBL DS    CL1          ......x'40' COPYSDB=LARGE
*                             ......x'30' COPYSDB=INPUT
DFA_F5SDBY DS    CL1          ......x'20' COPYSDB=SMALL|YES
DFA_F5SDBN DS    CL1          ......x'10' COPYSDB=NO
DFA_F5DSMT DS    CL1          ......x'08' DATACLAS media enforced TAPE
DFA_F5DSMJ DS    CL1          ......x'04' DATACLAS media enforced JAG
DFA_F5AMMTL DS    CL1         ......x'02' when no preference accept
*                                         all media types for MTL
DFA_F5STIFF DS    CL1         ......x'01' STIFF
* end of DFA DFRELS >= X'02020A00' or DFP 2.2.10.0
DFA_FB6  DS    XL1            ....byte-6 x'00'
DFA_F6TADSN DS    CL1         ......x'80' TAPEAUTHDSN=YES
DFA_F6TAF1 DS    CL1          ......x'40' TAPEAUTHF1=YES
DFA_F6TARC8 DS    CL1         ......x'20' TAPEAUTHRC8=WARN
DFA_F6TARC4 DS    CL1         ......x'10' TAPEAUTHRC4=FAIL
DFA_F6XIOT DS    CL1          ......x'08' XIOT/UNCAPT UCBS FOR BAM
DFA_F6TMVE1 DS    CL1         ......x'04' TAPEMULTIVOLUMEERROR=ALLOW
DFA_F6TMVE2 DS    CL1         ......x'02' TAPEMULTIVOLUMEERROR=FAIL
DFA_F6GT253 DS    CL1         ......x'01' > 253 SUBSYSTEMS allowed
DFA_FB7  DS    XL1            ....byte-7 x'FE'
*   The following 7 flags indicate VSAM and non-VSAM data set support
*   for the Extended Addressing Space (EAS) on an EAV.
DFA_F7VSAMEAS DS    CL1       ......x'80' VSAM enabled for EAS
DFA_F7SAMEAS DS    CL1        ......x'40' SAM enabled for EAS
DFA_F7PDSEEAS DS    CL1       ......x'20' PDS/E enabled for EAS
DFA_F7PDSEAS DS    CL1        ......x'10' PDS enabled for EAS
DFA_F7BDAMEAS DS    CL1       ......x'08' BDAM enabled for EAS
DFA_F7EFSEQEAS DS    CL1      ......x'04' EF seq enabled for EAS
DFA_F7UNDEAS DS    CL1        ......x'02' DSORG=U enabled for EAS
DFA_F7EXMSG DS    CL1         ......x'01' EXPIRATION_MESSAGE=NEVER
DFA_FB8  DS    XL1            ....byte-8 x'7F'
DFA_F8J3AA  DS    CL1         ......x'80' JES3_ALLOC_ASSIST enabled
DFA_F8MBRUX DS    CL1         ......x'40' mbr sel User Exit support
DFA_F8PDSEG DS    CL1         ......x'20' PDSE Generation support
*                                         installed
DFA_F8ZEDC  DS    CL1         ......x'10' zEDC Compression support
*                                         installed
DFA_F8XSSR  DS    CL1         ......x'08' DADSM Extend Secondary-Space
*                                         reduction enabled
DFA_F8SYSZADRV DS    CL1      ......x'04' DSS full volume dump & rest
*                                         will obtain resource to
*                                         avoid lockout
DFA_F8BYPAUTH DS    CL1       ......x'02' DCBE Bypass Auth support
*                                         installed
DFA_F8ENCRYPT DS    CL1       ......x'01' DFSMS support for data set
*                                         encryption installed
DFA_FB9  DS    XL1            ....byte-9 x'E0'
DFA_F9ROSEC   DS    CL1       ......x'80' READ-ONLY secondary support
DFA_F9DSSBATB DS    CL1       ......x'40' DSSB above-the-bar for
*                                         VSAM or MMSRV
DFA_F9XTIOT   DS    CL1       ......x'20' DEVTYPE XTIOT support
*                                         installed
         DS    CL5
DFA_FCB1 DS    XL1            ....byte-1 x'00' HPF feature
         DS    CL4            ......x'80':x'10'
DFA_FC1TTCAE  DS    CL1       ......x'08' 4 Transfer TCA Extension
DFA_FC1PH1    DS    CL1       ......x'04' 5 HPF phase 1
DFA_FC1IMBLR  DS    CL1       ......x'02' 6 Imbedded LR List
DFA_FC1FUPDW  DS    CL1       ......x'01' 7 Format Update Writes
DFA_FCB2 DS    XL1            ....byte-2 x'00' HPF feature
DFA_FC2FWRE   DS    CL1       ......x'80' 8 Format Write Enable
         DS   CL7
DFA_FCB3 DS    XL1            ....byte-3 x'00'
         DS    CL8            ......x'80':x'01'
DFA_FCB4 DS    XL1            ....byte-4 x'00'
         DS    CL8            ......x'80':x'01'
         DS    XL2
DFA_CMPTYPE DS    H           ....compression type (value)
*                             ......0 generic
*                             ......1 tailored
*                             ......2 zEDC compression required
*                             ......3 zEDC compression prefered
DFA_PDSEMAXGEN DS    F        ....maximum generations for PDSE
         SPACE 1
         DS    D
TIOTINFO EQU   *         Info from Task Input/Output Table
* TIOT - Task Input/Output Table
*   PSATOLD  field of the PSA data area
TIOT_JOBNAME  DS    CL8       ..TIOT JOB name
TIOT_JOBSTEP  DS    CL8       ..TIOT JOB step
TIOT_PROCSTEP DS    CL8       ..TIOT PROC step
TIOT_DDNCNT   DS    H         ..TIOT DD statement count
TIOTE_DDNTRY  DS    (DD#)XL10 ..TIOTE DD entry
              ORG   TIOTE_DDNTRY
TIOTE_DDNAME  DS    CL8       ....DD name
TIOTE_DSNCNT  DS    H         ....DSN count
         ORG
         SPACE 1
         DS    D
LEINFO   EQU   *         Info from Language Environment
LE_HGPID DS    0XL4           ..LE hex ppvvrrmm
LE_HPROD DS    XL1            ....LE product
LE_HVER  DS    XL1            ....LE version
LE_HREL  DS    XL1            ....LE release
LE_HMOD  DS    XL1            ....LE modification
LE_PGPID DS    0CL8           ..LE printable ppvvrrmm
LE_PPROD DS    ZL2            ....LE printable product
LE_PVER  DS    ZL2            ....LE printable version
LE_PREL  DS    ZL2            ....LE printable release
LE_PMOD  DS    ZL2            ....LE printable modification
LE_PLVL  DS    CL16           ..LE printable level text
         SPACE 1
LE_LEVEL DS    H              ..LE level
*                             ....1:28 CEECAALEVEL
LE_HW    DS    H              ..LE underlying hardware
*                             ....0:4 CEECAAHRDWR
LE_OPSYS DS    H              ..LE underlying OP Sys
*                             ....0:4 CEECAASYSTM
LE_SSYS  DS    H              ..LE underlying sub-system
*                             ....0:5 CEECAASBSYS
         SPACE 1
ARCH     DS    F              ..compiler ARCH(n)
*                             ..currently supported ARCH(>=7)
*                             ..look in POP for detailed info
*                             ....C/C++ ARCH(0)
*                             ....C/C++ ARCH(1)
*                             ......9021-520|640|740|820|860|900
*                             ......9021-xx1|2
*                             ......9672-Rx1|2(G1)
*                             ......9672-Exx
*                             ......9672-Pxx
*                             ......C logical string assist HW inst
*                             ....C/C++ ARCH(2)
*                             ......9672-Rx3(G2)
*                             ......9672-Rx4(G3)
*                             ......9672-Rx5(G4)
*                             ......2003
*                             ......branch relative inst
*                             ......branch relative & save
*                             ......halfword immediate inst
*                             ....C/C++ ARCH(3)
*                             ......9672-xx6(G5)
*                             ......9672-xx7(G6)
*                             ......IEEE FP, +12 new FP reg(s)
*                             ....C/C++ ARCH(4)
*                             ......z900 2064-xxx in ESA/390 mode
*                             ......z800 2066-xxx in ESA/390 mode
*                             ......32-bit add-with-carry inst
*                             ......32-bit subt-with-borrow inst
*                             ......inline 32-bit mult-logical inst
*                             ....C/C++ ARCH(5), z/OS V1R7
*                             ......z900 2064-xxx in z/Arch mode
*                             ......z800 2066-xxx in z/Arch mode
*                             ......tgt mach 31|64 bit
*                             ....C/C++,COBOL,PL/I ARCH(6)
*                             ......z990 2084-xxx in z/Arch mode
*                             ......z890 2086-xxx in z/Arch mode
*                             ......long-displacement facility
*                             ......load byte inst
*                             ......FP load & store inst
*                             ....C/C++,COBOL,PL/I ARCH(7)
*                             ......z9 BC 2096-xxx in z/Arch mode
*                             ......z9 EC 2094-xxx in z/Arch mode
*                             ......extended-immediate
*                             ......DFP
*                             ....C/C++,COBOL,PL/I ARCH(8)
*                             ......z10 EC 2097-xxx in z/Arch mode
*                             ......z10 BC 2098-xxx in z/Arch mode
*                             ......general inst extensions facility
*                             ......DFP add inst
*                             ....C/C++,COBOL,PL/I ARCH(9)
*                             ......z196 2817-xxx in z/Arch mode
*                             ......z114 2818-xxx in z/Arch mode
*                             ......high-word facility
*                             ......interlocked access facility
*                             ......load-store-on-condition facility
*                             ......distinct-operands facility
*                             ......population-count facility
*                             ......FP extension facility (PL/I)
*                             ....C/C++,COBOL,PL/I ARCH(10)
*                             ......zEC12 2827-xxx in z/Arch mode
*                             ......zBC12 2828-xxx in z/Arch mode
*                             ......execution-hint facility
*                             ......load-and-trap facility
*                             ......misc-instructions-extension
*                             ......transactional-execution facility
*                             ......enhanced DFP facility
*                             ....COBOL ARCH(11)
*                             ......z13  2964-xxx in z/Arch mode
*                             ......z13s 2965-xxx in z/Arch mode
*                             ......enhanced DFP facility
*                             ......exploit vector extension facility
*                             .......SIMD inst for INSPECT REPLACING
*                             .......& INSPECT TALLYING, z/OS V2.2
*                             ....COBOL ARCH(12)
*                             ......z14     3906-xxx in z/Arch mode
*                             ......z14 ZR1 3907-xxx in z/Arch mode
*                             ......vector packed-decimal facility
LE_SYS   DS    0XL(4*8+4)     ..LE System/sub-system info
LE_SYSB0 DS    XL1            ....byte-0 x'04'
LE_S0CICS DS    CL1           ......x'80' CICS
LE_S0PIPI DS    CL1           ......x'40' CICS_PIPI
         DS    CL1            ......x'20'
         DS    CL1            ......x'10'
LE_S0TSO DS    CL1            ......x'08' TSO
LE_S0BTH DS    CL1            ......x'04' batch
LE_S0UNIX DS    CL1           ......x'02' z/OS UNIX
         DS    CL1            ......x'01'
LE_SYSB1 DS    XL1            ....byte-1
         DS    CL8            ......byte-1
LE_SYSB2 DS    XL1            ....byte-2
         DS    CL8            ......byte-2
LE_SYSB3 DS    XL1            ....byte-3 x'02'
         DS    CL5            ......
LE_S3VSE DS    CL1            ......x'04' z/VSE
LE_S3ZOS DS    CL1            ......x'02' z/OS
         DS    CL1            ......x'01'
LE_ENV   DS    0XL(4*8+4)     ..LE Environment info
LE_ENVB0 DS    XL1            ....byte-0 x'00'
LE_E0PIPI DS    CL1           ......x'80' PIPI pre-init pgm interface
LE_E0MAIN DS    CL1           ......x'40' PIPI-MAIN
LE_E0SUB DS    CL1            ......x'20' PIPI-SUB
LE_E0SUBDP DS    CL1          ......x'10' PIPI-SUBDP
LE_E0PICI DS    CL1           ......x'08' PICI pre-init compat inter
LE_E0NENC DS    CL1           ......x'04' nested enclave
LE_E0LRR DS    CL1            ......x'02' LRR lib routine retention
LE_E0RTR DS    CL1            ......x'01' runtime reuse
LE_ENVB1 DS    XL1            ....byte-1 x'14'
LE_E1XPLK DS    CL1           ......x'80' XPLINK
LE_E1POSIX DS    CL1          ......x'40' POSIX
LE_E1PTHR DS    CL1           ......x'20' 1 or more PTHREAD
LE_E1IPT DS    CL1            ......x'10' IPT initial process thread
LE_E1MTHR DS    CL1           ......x'08' multi-threaded fork
LE_E1A31 DS    CL1            ......x'04' AMODE 31
*        .....00.             ........AMODE 24
*        .....10.             ........AMODE 31
         DS    CL1            ......x'02'
LE_E1MAINDP DS    CL1         ......x'01' PIPI-MAINDP
LE_ENVB2 DS    XL1            ....byte-2
         DS    CL8            ......byte-2
LE_ENVB3 DS    XL1            ....byte-3
         DS    CL8            ......byte-3
LE_OCBVER DS    H             ..OCB version release nbr
*                             ....16=z/OS R5
*                             ....17=z/OS R8
*                             ....18=z/OS R9
*                             ....19=z/OS R10
*                             ....20=z/OS R11
*                             ....21=z/OS R12
*                             ....22=z/OS R13
*                             ....23=z/OS V2R1
*                             ....24=z/OS V2R2
*                             ....25=z/OS V2R3
LE_OCBVTXT DS    CL16
LE_OCBFMT DS    0XL(1*8+1)    ..LE option table format
LE_FMT   DS    XL1            ....OCB format
         DS    CL7
LE_FMT64 DS    CL1            ....x'01' 64-bit
*
LE_OCBORG DS    0XL(1*8+1)    ..LE option table origin
LE_ORG   DS    XL1            ....OCB origin
LE_IBM   DS    CL1            ....x'80' IBM
         DS    CL7
*
LE_OPTAIX DS    0XL2          ..LE AIXBLD() option
LE_AIX   DS    XL1            ....AIXBLD option
LE_AIXON DS    CL1            ....x'80' AIXBLD(ON)
*
LE_OPTA31 DS    0XL2          ..LE ALL31() option
LE_A31   DS    XL1            ....ALL31 option
LE_A31ON DS    CL1            ....x'80' ALL31(ON)
*
LE_OPTCBL DS    0XL2          ..LE CBLOPTS()
LE_CBL   DS    XL1            ....CBLOPTS option
LE_CBLON DS    CL1            ....x'80' CBLOPTS(ON)
*
LE_OPTQDA DS    0XL2          ..LE CBLQDA()
LE_QDA   DS    XL1            ....CBLQDA option
LE_QDAON DS    CL1            ....x'80' CBLQDA(ON)
*
LE_OPTCHK DS    0XL2          ..LE CHECK()
LE_CHK   DS    XL1            ....CHECK option
LE_CHKON DS    CL1            ....x'80' CHECK(ON)
*
LE_OPTDBG DS    0XL2          ..LE DEBUG()
LE_DBG   DS    XL1            ....DEBUG option
LE_DBGON DS    CL1            ....x'80' DEBUG(ON)
*
LE_OPTHEAP DS    0XL14        ..LE HEAP() option
LE_HEAP  DS    XL1            ....HEAP option
LE_HEAPON DS    CL1           ....x'80' ALL31(ON)
LE_HEAP_SUB DS    XL1         ....HEAP sub-options LOC & DISP
LE_HEAPBELOW DS    CL1        ....x'80' loc BELOW
LE_HEAPFREE DS    CL1         ....x'40' disp FREE
LE_HEAP_LOC DS    CL5         ....BELOW|ANY
LE_HEAP_DISP DS    CL4        ....FREE|KEEP
*
LE_OPTSTK DS    0XL12         ..LE STACK() option
LE_STACK DS    XL1            ....STACK option
LE_STACKON DS    CL1          ....x'80' STACK(ON)
LE_STACK_SUB DS    XL1        ....STACK sub-options LOC & DISP
LE_STACKBELOW DS    CL1       ......x'80' loc BELOW
LE_STACKFREE DS    CL1        ......x'40' disp FREE
LE_STACK_LOC DS    CL5        ....BELOW|ANY
LE_STACK_DISP DS    CL4       ....FREE|KEEP
*
LE_OPTSTG DS    0XL14         ..LE STORAGE() option
LE_STG   DS    XL1            ....STORAGE option
LE_STGON DS    CL1            ....x'80' STORAGE(ON)
LE_STGFLGS DS    0XL(1*8+1)   ....STORAGE flags
LE_STG_SUB DS    XL1          ......STORAGE sub-options
LE_S1HAS DS    CL1            ........x'80' HEAP ALLOC set
LE_S1HFS DS    CL1            ........x'40' HEAP FREE set
LE_S1SAS DS    CL1            ........x'20' STACK alloc set
         DS    CL5
LE_HAVAL DS    XL1            ....x'nn' HEAP  ALLOC value
LE_HFVAL DS    XL1            ....x'nn' HEAP  FREE  value
LE_SAVAL DS    XL1            ....x'nn' STACK ALLOC value
*
LE_OPTTTA DS    0XL14         ..LE TERMTHDACT() option
LE_TTA   DS    XL1            ....TERMTHDACT option
LE_TTAON DS    CL1            ....x'80' TERMTHDACT(ON)
LE_TTALVL DS    XL4           ....treat as nbr not bits
*                             ......000 TRACE   x'00' default
*                             ......001 DUMP    x'01
*                             ......002 TRACE   x'02'
*                             ......004 MSG     x'04'
*                             ......008 QUIET   x'08'
*                             ......016 UADUMP  x'10'
*                             ......032 UAONLY  x'20'
*                             ......064 UAIMM   x'40'
*                             ......128 UATRACE x'80'
LE_TTAVAL DS    CL8           ....DUMP|TRACE|MSG|QUIET|UADUMP|
*                             ....UAONLY|UAIMM|UATRACE
         SPACE 1
         DS    D
CSVINFO  EQU   *         CSV information
CSV_PGM  DS    CL8            ..input program name
CSV_ATTR  DS    0XL(3*8+3)    ..CSV attributes 1:3
CSV_ATTRB1 DS    XL1          ....CSV attribute 1
         DS    CL2
CSV_A1RENT DS    CL1          ......x'20' RENT
CSV_A1REUS DS    CL1          ......x'10' REUS
CSV_A1NLONLY DS    CL1        ......x'08' not loaded only
CSV_A1OVRLAY DS    CL1        ......x'04' overlay
CSV_A1ALIAS DS    CL1         ......x'02' ALIAS
         DS    CL1            ......x'01'
CSV_ATTRB2 DS    XL1          ....CSV attribute 2
CSV_A2ALIB DS    CL1          ......x'80' authorized library
CSV_A2APGM DS    CL1          ......x'40' authorized program
CSV_A2AANY DS    CL1          ......x'20' AMODE ANY
CSV_A2A31 DS    CL1           ......x'10' AMODE 31
         DS    CL1            ......x'08'
CSV_A2DLPA DS    CL1          ......x'04' dynamic LPA module
CSV_A2PGPROT DS    CL1        ......x'02' page protected
CSV_A2A64 DS    CL1           ......x'01' AMODE 64
CSV_ATTRB3 DS    XL1          ....CSV attribute 3
CSV_A3RATL DS    CL1          ......x'80' resident above-the-line
CSV_A3RJPA DS    CL1          ......x'40' resident JPA
CSV_A3RPLPA DS    CL1         ......x'20' resident PLPA
CSV_A3RMLPA DS    CL1         ......x'10' resident MLPA
CSV_A3RFLPA DS    CL1         ......x'08' resident FLPA
CSV_A3RCSA  DS    CL1         ......x'04' resident CSA
         DS    CL1            ......x'02'
         DS    CL1            ......x'01'
CSV_LOADER DS    CL4
*                             ....UNK  - unknown provider
*                             ....LPA  - link pack area
*                             ....PGMF - program fetch
*                             ....LLAF - library look-aside facility
*                             ....AOSL - AOS loader
*                             ....JPA  - job pack area
CSV_PDATA DS    CL32
./ ADD NAME=AS3OBJCA 0150-19198-19281-1717-00931-00913-00000-APLKS   27
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, DATA
*
* CPYBK ID: AS3OBJCA
*    TITLE: MAP QUERY PROGRAM OBJECT COMMUNICATION AREA
*     DATE: 2019/03/11
*
*     DESC: THIS COPYBOOK IS USED TO MAP THE COMM AREA
*           FOR PROGRAM(S) ASU3QOIB
*
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
AS3OBJCA EQU   *         Query Program Object Communication Area
*                             Request information
REQINFO  EQU   *
REQ_@DCB DS    A              ..request addr of open SYSLIB DCB
REQ_NAME DS    CL8            ..request member name
REQ_TOKEN DS    F             ..request LE CEEPLOD2 token
REQ_FLGS DS    0CL8           ..request flags
REQ_LIB  DS    CL1            ....request JOB/STEPLIB(s) info Y|N
REQ_BLDL DS    CL1            ....request BLDL info Y|N
REQ_CSV  DS    CL1            ....request CSV info Y|N
REQ_CDE  DS    CL1            ....request CDE info Y|N
REQ_LDQ  DS    CL1            ....request LE CEEPQLD info Y|N
REQ_SLM  DS    CL1            ....request scan load module Y|N
REQ_CPSI DS    CL1            ....request COBOL PSI Y|N
         DS    CL1
REQLEN   EQU   *-REQINFO
         SPACE 2
         DS    D
*                             TIOT data fields
TIOTINFO EQU   *
TIOT_JOBNAME DS    CL8        ..JOB name
TIOT_JOBSTEP DS    CL8        ..JOB step name
TIOT_PROCSTEP DS    CL8       ..PROC step name
TIOTLEN  EQU   *-TIOTINFO
         SPACE 2
         DS    D
*                             JOBLIB/STEPLIB data fields
LIBINFO  EQU   *
LIB_TYPE DS    CL4            .. JOB or STEP
LIB_CNT  DS    H              ..nbr of libraries in JOBLIB/STEPLIB
LIB_DSN  DS    (DD#)CL44      ..library data set name(s)
LIBLEN   EQU   *-LIBINFO
         SPACE 2
         DS    D
*                             BLDL data fields
BLDLINFO EQU   *
BLDL_NAME DS    CL8           ..dir member/alias name
BLDL_FLAG DS    0XL(8*1+1)    ..BLDL flags 1:1
BLDL_IND1 DS    0XL1          ....BLDL indicator byte (hex)
         BITDEF $BLDL_ALIAS
BLDL_1ALIAS DS    CL1         ......x'80' ALIAS
          DS    CL7           ......x'40' thru x'01'
BLDL_TTR  DS    XL3           ..relative track nbr, block nbr (hex)
*                             ....PDSE|UNIX dir is a token
BLDL_DIRLOC DS    H           ..directory entry location
*        0 = private library
*        1 = link library
*        2 = job, task, step library
*     3:16 = parent task, value -2
BLDL_CONCAT# DS    H          ..library concatenation nbr rel to 0
BLDL_TTR# DS    H             ..nbr of TTR fields in user data
*                             block of common data
BLDL_UDATA_LEN DS    H        ..user data length (0:62)
BLDL_UDATA EQU   *            ..user data
BLDL_EP@ DS    A              ..entry point addr (3-bytes)
BLDL_CMSTGL DS    F           ..contiguous main stg req
BLDL_L1STBLK DS    H          ..len of 1st blk of text
BLDL_TTRT DS    XL3           ..track & block addr (hex)
BLDL_TTRN DS    XL3           ..TTR of note list or SCATTER table
*                             ....used for program in SCATTER load
*                             ....format or OVERLAY structure only
*                             ....(hex)
BLDL_NL   DS    H             ..nbr of entries in note list for
*                             ....program in OVERLAY structure (hex)
BLDL_ATTR DS    0XL(8*2+2)
BLDL_ATTR1 DS    0XL1
         BITDEF $BLDL_RENT,                                            +
               $BLDL_REUS,                                             +
               $BLDL_OVLY,                                             +
               $BLDL_TEST,                                             +
               $BLDL_ONLYLD,                                           +
               $BLDL_SCTR,                                             +
               $BLDL_XEQ,                                              +
               $BLDL_BLK1
BLDL_1RENT DS    CL1          ..x'80' reentrent
BLDL_1REUS DS    CL1          ..x'40' serial reusable
BLDL_1OVLY DS    CL1          ..x'20' overlay
BLDL_1TEST DS    CL1          ..x'10' TESTRAN
BLDL_1ONLYLD DS    CL1        ..x'08' only loadable
BLDL_1SCTR DS    CL1          ..x'04' scatter storage
BLDL_1XEQ DS    CL1           ..x'02' executable
BLDL_1BLK1 DS    CL1          ..x'01' one block of text an no RLD
         SPACE 1
BLDL_ATTR2 DS    0XL1
         BITDEF $BLDL_GTLNKEDTE,                                       +
               $BLDL_ORIGIN0,                                          +
               $BLDL_EP0,                                              +
               $BLDL_NRLD,                                             +
               $BLDL_NREPROC,                                          +
               $BLDL_TSTRAN,                                           +
               $BLDL_LNKEDTF,                                          +
               $BLDL_REFR
BLDL_2GTLNKEDTE DS    CL1     ..> link edit E
BLDL_2ORIGIN0 DS    CL1       ..origin of 1st block is zero
BLDL_2EP0 DS    CL1           ..entry point addr is zero
BLDL_2NRLD DS    CL1          ..no RLD records
BLDL_2NREPROC DS    CL1       ..can not reprocess with lnkedt or binder
BLDL_2TSTRAN DS    CL1        ..contains TESTRAN symbol cards
BLDL_2LNKEDTF DS    CL1       ..created by link editor F
BLDL_2REFR DS    CL1          ..attr REFRESH
         SPACE 1
BLDL_FLAGS DS    0XL(8*3+3+4+3)
BLDL_FLAG1 DS    0XL1
         BITDEF $BLDL_AOSLNKEDT,                                       +
               $BLDL_LRGPGMOBJEXT,                                     +
               $BLDL_PGALIGN,                                          +
               $BLDL_SSI,                                              +
               $BLDL_APF,                                              +
               $BLDL_PGMOBJ,                                           +
               $BLDL_PGMOBJSIGN,                                       +
               $BLDL_XATTR
BLDL_1AOSLNKEDT DS    CL1     ..x'80' processed by AOS link editor
BLDL_1LRGPGMOBJEXT DS    CL1  ..x'40' large program object extended
BLDL_1PGALIGN DS    CL1       ..x'20' program page aligned
BLDL_1SSI DS    CL1           ..x'10' SSI data exists
BLDL_1APF DS    CL1           ..x'08' APF info exists
BLDL_1PGMOBJ DS    CL1        ..x'04' more info exists in PDS2FTB3
BLDL_1PGMOBJSIGN DS    CL1    ..x'02' program object is signed
BLDL_1XATTR DS    CL1         ..x'01' extended attribute exists
         SPACE 1
BLDL_FLAG2 DS    0XL1
         BITDEF $BLDL_ALTPRI,                                          +
               $BLDL_NULL1,                                            +
               $BLDL_NULL2,                                            +
               $BLDL_RMODE,                                            +
               $BLDL_ALIASAMODE1,                                      +
               $BLDL_ALIASAMODE2,                                      +
               $BLDL_MAINAMODE1,                                       +
               $BLDL_MAINAMODE2
         SPACE 1
BLDL_2ALTPRI DS    CL1        ..x'80' primary name generated by binder
         DS    CL2
BLDL_2RMODE DS    CL3         ..x'10' RMODE(ANY)
*                             ....RMODE(24)
BLDL_2ALIASAMODE DS    CL3    ..bit 4,5 alias AMODE(24|31|ANY|64)
*                             ....b'00' x'0C' off AMODE 24
*                             ....b'11' x'0C' on  AMODE ANY
*                             ....b'10' x'08' on  AMODE 31
*                             ....b'01' x'04' on  AMODE 64
BLDL_2AMODE DS    CL3         ..bit 6,7 AMODE(24|31|ANY|64)
*                             ....b'00' x'03' off AMODE 24
*                             ....b'11' x'03' on  AMODE ANY
*                             ....b'10' x'02' on  AMODE 31
*                             ....b'01' x'01' on  AMODE 64
         SPACE 1
BLDL_FLAG3 DS    0XL1
         BITDEF $BLDL_NOMIG,                                           +
               $BLDL_PRIME,                                            +
               $BLDL_PACK
BLDL_3NOMIG DS    CL1         ..x'80' pgmobj can not be loadmod
BLDL_3FETCHOPT DS    CL5      ..x'40' FETCHOPT(PRIME)
*                             ..x'20' FETCHOPT(PACK)
         DS    XL3
BLDL_ONAME DS     CL8         ..ALIAS segment original name
BLDL_LPO_SIZE DS    F         ..LPO segment PgmObj size
BLDL_LPO_EPA DS    A          ..LPO segment PgmObj EPA
BLDL_SSI_WORD DS    XL4       ..SSI word
BLDL_APF_AUTH DS    H         ..APF segment AUTH code
BLDL_XATTR_FLAG0 DS    XL1    ..XATTR segment flag 0
BLDL_XATTR_FLAG1 DS    0XL1   ..XATTR segment flag 1
         BITDEF $BLDL_XATTR_LONGPARM    >100 bytes allowed
BLDL_XATTR_LEN DS    H        ..XATTR segment attr data length
BLDL_XATTR_DATA DS    XL15    ..XATTR segment attr data
         DS    XL7
BLDLLEN  EQU   *-BLDLINFO
         SPACE 2
         DS    D
*                             CSV data fields
CSVINFO  EQU   *
CSV_NAME DS    CL8            ..program name
CSV_POBJLEN DS    F           ..pgm obj len
CSV_POBJLPA DS    A           ..pgm obj load point addr
CSV_POBJEPA DS    A           ..pgm obj entry point addr
CSV_LOADER DS    CL4
*                             ....UNK  unknown provider
*                             ....LPA  link pack area
*                             ....PGMF program fetch
*                             ....LLAF library look-aside facility
*                             ....AOSL AOS loader
*                             ....JPA  job pack area
CSV_PDATA DS    CL16          ..pdata
CSV_ATTR  DS    0XL(8*3+3)    ..CSV attributes 1:3
CSV_ATTR1 DS    0XL1          ....CSV attribute 1 (hex)
         BITDEF $CSV_EOMDEL,                                           +
               $CSV_LOADED2GLOBAL,                                     +
               $CSV_RENT,                                              +
               $CSV_REUS,                                              +
               $CSV_NOTLOADABLEONLY,                                   +
               $CSV_OVERLAY,                                           +
               $CSV_ALIAS,                                             +
               $CSV_NULL11
CSV_1EOMDEL DS    CL1         ....x'80' end-of-module delete
CSV_1LD2GLBL DS    CL1        ....x'40' loaded to global
CSV_1RENT DS    CL1           ....x'20' RENT
CSV_1REUS DS    CL1           ....x'10' REUS
CSV_1NLDONLY DS    CL1        ....x'08' not loadable only
CSV_1OVRLAY DS    CL1         ....x'04' overlay
CSV_1ALIAS DS    CL1          ....x'02' ALIAS
         DS    CL1            ....x'01'
CSV_ATTR2  DS    0XL1         ....CSV attribute 2 (hex)
         BITDEF $CSV_AUTHLIB,                                          +
               $CSV_AUTHPGM,                                           +
               $CSV_AMODEANY,                                          +
               $CSV_AMODE31,                                           +
               $CSV_NULL12,                                            +
               $CSV_DYNLPA,                                            +
               $CSV_PAGEPROT,                                          +
               $CSV_AMODE64
CSV_2AUTHLIB DS    CL1        ....x'80' authorized library
CSV_2AUTHPGM DS    CL1        ....x'40' authorized program
CSV_2AMODEANY DS    CL1       ....x'20' AMODE ANY
CSV_2AMODE31 DS    CL1        ....x'10' AMODE 31
         DS    CL1            ....x'08'
CSV_2DYNLPA DS    CL1         ....x'04' dynamic LPA module
CSV_2PAGEPROT DS    CL1       ....x'02' page protected
CSV_2AMODE64 DS    CL1        ....x'01' AMODE 64
CSV_ATTR3  DS    0XL1         ....CSV attribute 3 (hex)
         BITDEF $CSV_RESATL,                                           +
               $CSV_RESJPA,                                            +
               $CSV_RESPLPA,                                           +
               $CSV_RESMLPA,                                           +
               $CSV_RESFLPA,                                           +
               $CSV_RESCSA
CSV_3RESATL DS    CL1         ....x'80' resident above-the-line
CSV_3RESJPA DS    CL1         ....x'40' resident JPA
CSV_3RESPLPA DS    CL1        ....x'20' resident PLPA
CSV_3RESMLPA DS    CL1        ....x'10' resident MLPA
CSV_3RESFLPA DS    CL1        ....x'08' resident FLPA
CSV_3RESCSA  DS    CL1        ....x'04' resident CSA
         DS    CL1            ....x'02'
         DS    CL1            ....x'01'
         DS    XL5
CSVLEN   EQU   *-CSVINFO
         SPACE 2
         DS    D
*                             CDE data fields
CDE_NTRY_CNT DS    H          ..1 MAJOR entry
*                             ..2 MINOR and MAJOR entry(s)
CDE1INFO  EQU   *
CDE1_NAME DS    CL8           ..module name / alias name
CDE1_EP@  DS    A             ..modules entry point address
CDE1_USECNT DS    H           ..module use count
CDE1_SPID DS    H             ..storage pool id
CDE1_IND  DS    0XL(8*1+1)
CDE1_IND0 DS    0XL1          ..misc flags
         BITDEF $CDE1_AMODE31,                                         +
               $CDE1_AMODE64,                                          +
               $CDE1_MAJOR
CDE1_0AMODE31 DS    CL1       ..x'80' AMODE31
CDE1_0AMODE64 DS    CL1       ..x'40' AMODE64
CDE1_0MAJOR DS    CL1         ..x'20' major CDE
         DS    CL5
CDE1_ATTR DS    0XL(8*5+5)    ..CDE attributes 1:5
CDE1_ATTR1 DS    0XL1         ....CDE attribute 1 (hex)
         BITDEF $CDE1_DELMOD,                                          +
               $CDE1_IDENTIFY,                                         +
               $CDE1_LDBYDIRTY,                                        +
               $CDE1_EXT,                                              +
               $CDE1_LPDE,                                             +
               $CDE1_GLBL,                                             +
               $CDE1_BAD,                                              +
               $CDE1_EXECAUTH
CDE1_1DELMOD DS   CL1         ....x'80' delete module
CDE1_1IDENTIFY DS    CL1      ....x'40' built by IDENTIFY
CDE1_1LDBYDIRTY DS    CL1     ....x'20' module loaded by dirty task
CDE1_1EXT DS    CL1           ....x'10' CDE extension exists
CDE1_1LPDE DS    CL1          ....x'08' ON=LPDE, OFF=CDE
CDE1_1GLBL DS    CL1          ....x'04' module loaded to GLOBAL
CDE1_1BAD DS    CL1           ....x'02' module contaminated
CDE1_1EXECAUTH DS    CL1      ....x'01' RACF execute authority
         SPACE 1
CDE1_ATTR2 DS    0XL1         ....CDE attribute 2 (hex)
         BITDEF $CDE1_LDBYSYS,                                         +
               $CDE1_BEINGLD,                                          +
               $CDE1_RENT,                                             +
               $CDE1_REUS,                                             +
               $CDE1_NREUS,                                            +
               $CDE1_MINOR,                                            +
               $CDE1_JPA,                                              +
               $CDE1_NOTLOADABLEONLY
CDE1_2LDBYSYS DS    CL1       ....x'80' loaded by NIP F|MLPA DYN LPA
CDE1_2BEINGLD DS    CL1       ....x'40' being loaded
CDE1_2RENT DS    CL1          ....x'20' attr RENT
CDE1_2REUS DS    CL1          ....x'10' attr serially REUS
CDE1_2NREUS DS    CL1         ....x'08' attr not REUS, not functional
CDE1_2MINOR DS    CL1         ....x'04' minor CDE
CDE1_2JPA DS    CL1           ....x'02' loaded in JPA
CDE1_2NLDONLY DS    CL1       ....x'01' not loadable only
         SPACE 1
CDE1_ATTR3 DS    0XL1         ....CDE attribute 3 (hex)
         BITDEF $CDE1_LDSPID0,                                         +
               $CDE1_INACTIVE,                                         +
               $CDE1_XLBILT,                                           +
               $CDE1_MEPREL,                                           +
               $CDE1_RMODEANY,                                         +
               $CDE1_OVRLY,                                            +
               $CDE1_AUTHLIB,                                          +
               $CDE1_AUTHPGM
CDE1_3LDSPID0 DS    CL1       ....x'80' loaded in SUBPOOL ID 0
CDE1_3INACTIVE DS    CL1      ....x'40' module is inactive, may be rel
CDE1_3XLBILT DS    CL1        ....x'20' extent list has been built
CDE1_3MEPREL DS    CL1        ....x'10' minor EP@ relocated by FETCH
CDE1_3RMODEANY DS    CL1      ....x'08' attr RMODE=ANY
CDE1_3OVRLY DS    CL1         ....x'04' attr OVERLAY
CDE1_3AUTHLIB DS    CL1       ....x'02' authorized library
CDE1_3AUTHPGM DS    CL1       ....x'01' authorized program
          SPACE 1
CDE1_ATTR4 DS    0XL1         ....CDE attribute 4 (hex)
         BITDEF $CDE1_PATHNME,                                         +
               $CDE1_PML,                                              +
               $CDE1_SPLTRMODE,                                        +
               $CDE1_HFSSSLM,                                          +
               $CDE1_NULL1,                                            +
               $CDE1_LDDYNLPA,                                         +
               $CDE1_PGPROT,                                           +
               $CDE1_NULL2
CDE1_4PATHNME DS    CL1       ....x'80' OMVS PATH name provided
CDE1_4PML DS    CL1           ....x'40' PML running
CDE1_4SPLTRMODE DS    CL1     ....x'20' split RMODE pgm obj
CDE1_4HFSSSLM DS    CL1       ....x'10' HFS system shared lib module
         DS    CL1            ....x'08'
CDE1_4LDDYNLPA DS    CL1      ....x'04' loaded in dynamic LPA
CDE1_4PGPROT DS    CL1        ....x'02' page prot only on whole pg
         DS    CL1            ....x'01'
         SPACE 1
CDE1_ATTR5 DS    0XL1         ....CDE attribute 5 (hex)
         BITDEF $CDE1_NULL3
         DS    CL8            ....x'80' thru x'01'
         DS    XL6
CDE1LEN  EQU   *-CDE1INFO
         SPACE 1
CDE2INFO  EQU   *
CDE2_NAME DS    CL8           ..module name / alias name
CDE2_EP@  DS    A             ..modules entry point address
CDE2_USECNT DS    H           ..module use count
CDE2_SPID DS    H             ..storage pool id
CDE2_IND  DS    0XL(8*1+1)
CDE2_IND0 DS    0XL1          ..misc flags
         BITDEF $CDE2_AMODE31,                                         +
               $CDE2_AMODE64,                                          +
               $CDE2_MAJOR
CDE2_0AMODE31 DS    CL1       ..x'80' AMODE31
CDE2_0AMODE64 DS    CL1       ..x'40' AMODE64
CDE2_0MAJOR DS    CL1         ..x'20' major CDE
         DS    CL5
CDE2_ATTR DS    0XL(8*5+5)    ..CDE attributes 1:5
CDE2_ATTR1 DS    0XL1         ....CDE attribute 1 (hex)
         BITDEF $CDE2_DELMOD,                                          +
               $CDE2_IDENTIFY,                                         +
               $CDE2_LDBYDIRTY,                                        +
               $CDE2_EXT,                                              +
               $CDE2_LPDE,                                             +
               $CDE2_GLBL,                                             +
               $CDE2_BAD,                                              +
               $CDE2_EXECAUTH
CDE2_1DELMOD DS   CL1         ....x'80' delete module
CDE2_1IDENTIFY DS    CL1      ....x'40' built by IDENTIFY
CDE2_1LDBYDIRTY DS    CL1     ....x'20' module loaded by dirty task
CDE2_1EXT DS    CL1           ....x'10' CDE extension exists
CDE2_1LPDE DS    CL1          ....x'08' ON=LPDE, OFF=CDE
CDE2_1GLBL DS    CL1          ....x'04' module loaded to GLOBAL
CDE2_1BAD DS    CL1           ....x'02' module contaminated
CDE2_1EXECAUTH DS    CL1      ....x'01' RACF execute authority
         SPACE 1
CDE2_ATTR2 DS    0XL1         ....CDE attribute 2 (hex)
         BITDEF $CDE2_LDBYSYS,                                         +
               $CDE2_BEINGLD,                                          +
               $CDE2_RENT,                                             +
               $CDE2_REUS,                                             +
               $CDE2_NREUS,                                            +
               $CDE2_MINOR,                                            +
               $CDE2_JPA,                                              +
               $CDE2_NOTLOADABLEONLY
CDE2_2LDBYSYS DS    CL1       ....x'80' loaded by NIP F|MLPA DYN LPA
CDE2_2BEINGLD DS    CL1       ....x'40' being loaded
CDE2_2RENT DS    CL1          ....x'20' attr RENT
CDE2_2REUS DS    CL1          ....x'10' attr serially REUS
CDE2_2NREUS DS    CL1         ....x'08' attr not REUS, not functional
CDE2_2MINOR DS    CL1         ....x'04' minor CDE
CDE2_2JPA DS    CL1           ....x'02' loaded in JPA
CDE2_2NLDONLY DS    CL1       ....x'01' not loadable only
         SPACE 1
CDE2_ATTR3 DS    0XL1         ....CDE attribute 3 (hex)
         BITDEF $CDE2_LDSPID0,                                         +
               $CDE2_INACTIVE,                                         +
               $CDE2_XLBILT,                                           +
               $CDE2_MEPREL,                                           +
               $CDE2_RMODEANY,                                         +
               $CDE2_OVRLY,                                            +
               $CDE2_AUTHLIB,                                          +
               $CDE2_AUTHPGM
CDE2_3LDSPID0 DS    CL1       ....x'80' loaded in SUBPOOL ID 0
CDE2_3INACTIVE DS    CL1      ....x'40' module is inactive, may be rel
CDE2_3XLBILT DS    CL1        ....x'20' extent list has been built
CDE2_3MEPREL DS    CL1        ....x'10' minor EP@ relocated by FETCH
CDE2_3RMODEANY DS    CL1      ....x'08' attr RMODE=ANY
CDE2_3OVRLY DS    CL1         ....x'04' attr OVERLAY
CDE2_3AUTHLIB DS    CL1       ....x'02' authorized library
CDE2_3AUTHPGM DS    CL1       ....x'01' authorized program
          SPACE 1
CDE2_ATTR4 DS    0XL1         ....CDE attribute 4 (hex)
         BITDEF $CDE2_PATHNME,                                         +
               $CDE2_PML,                                              +
               $CDE2_SPLTRMODE,                                        +
               $CDE2_HFSSSLM,                                          +
               $CDE2_NULL1,                                            +
               $CDE2_LDDYNLPA,                                         +
               $CDE2_PGPROT,                                           +
               $CDE2_NULL2
CDE2_4PATHNME DS    CL1       ....x'80' OMVS PATH name provided
CDE2_4PML DS    CL1           ....x'40' PML running
CDE2_4SPLTRMODE DS    CL1     ....x'20' split RMODE pgm obj
CDE2_4HFSSSLM DS    CL1       ....x'10' HFS system shared lib module
         DS    CL1            ....x'08'
CDE2_4LDDYNLPA DS    CL1      ....x'04' loaded in dynamic LPA
CDE2_4PGPROT DS    CL1        ....x'02' page prot only on whole pg
         DS    CL1            ....x'01'
         SPACE 1
CDE2_ATTR5 DS    0XL1         ....CDE attribute 5 (hex)
         BITDEF $CDE2_NULL3
         DS    CL8            ....x'80' thru x'01'
         DS    XL2
CDE2LEN  EQU   *-CDE2INFO
         SPACE 2
         DS    D
*                             LE load query data fields
LDQINFO  EQU   *
LDQ_TOKEN DS    F             ..LE pgm obj token id
LDQ_POBJLEN DS    F           ..pgm obj len
LDQ_POBJLPA DS    A           ..pgm obj load point addr
LDQ_POBJEPA DS    A           ..pgm obj entry point addr
LDQ_NLEN DS    F              ..program name length
LDQ_NAME DS    CL256          ..program name
         DS    XL4
LDQLEN   EQU   *-LDQINFO
         SPACE 2
         DS    D
*                             load module data fields
LMINFO    EQU   *
LM_CICS_XLVL DS    CL3        CICS translator level
*                             ..DFHYA Ann Assembler
*                             ..DFHYC Cnn COBOL
*                             ..DFHYI Inn LE Compliant
*                             ..DFHYP Pnn PL/I
*                             ..*DFHXCSTB Xnn EXCI
         DS   CL5
LMLE_NAME DS    CL8           LE program name
LMLE_ENTRY DS    CL8          LE conforming entry type
*                             ..x'14CE' C/370
*                             ..x'00C3C5C5' Standard
*                             ..x'01C3C5C5' FASTLINK
*                             ..CEESTART
*                             ..x'00C300C500C500' XPLINK
*                             ..x'01C3C5C5' OPLINK
LMLE_LANG DS    CL16          LE conforming language
*                             ..not available
*                             ..XPLINK C/C++
*                             ..x'01' LE (CEL)
*                             ..x'03' C/C++
*                             ..x'04' COBOL V5
*                             ..x'05' COBOL
*                             ..x'06' z/OS Debugger
*                             ..x'07' VS FORTRAN
*                             ..x'08' DCE
*                             ..x'0A' PL/I
*                             ..x'0B' VA PL/I
*                             ..x'0C' Berkeley Sockets
*                             ..x'0F' Assembler
LMLE_CTLLVL DS    CL16        LE control level
*                             ..x'00' old C/C++
*                             ..1 Standard
*                             ..2 FASTLINK
*                             ..3 OPLINK
*                             ..4 XPLINK
LMLE_TSTAMP DS    0CL20       LE time stamp
LMLE_TSCYMDD DS    CL8        ....CCYYMMDD
LMLE_TSHMS DS    CL6          ....HHMMSS
LMLE_TSVRM DS    CL6          ....VVRRMM
LM_LANG  DS    CL9            non-LE conforming language
         DS    XL3
LMLEN    EQU   *-LMINFO
         SPACE 2
         DS    D
PSIINFO  EQU   *
*                             LE COBOL PSI misc info
PSI_DDS# DS    F              ..DATA DIVISION statement count
PSI_PDS# DS    F              ..PROCEDURE DIVISION statement count
PSI_CDPG DS    H              ..CCSID - CP(nnnn) codepage
PSI_ARCH DS    H              ..ARCH(nn) code generation level
PSI_OPT  DS    H              ..OPT(n) optimize level
PSI_LVL  DS    H              ..COBOL Signature level
PSI_LEN  DS    H              ..Signature byte length 48
         DS    XL2
PSI_BINF DS    CL8            ..build/level info
*                             COBOL Signature Information bytes
PSI_SIB  EQU   *,(8*31+31)
PSI_SIB1 DS    0XL1           SIB byte 1 (hex)
         BITDEF $CBL_ADV,                                              +
               $CBL_APOST,                                             +
               $CBL_DATA31,                                            +
               $CBL_DECK,                                              +
               $CBL_DUMP,                                              +
               $CBL_DYNAM,                                             +
               $CBL_FASTSRT,                                           +
               $CBL_SQLIMS
PSI_01ADV DS    CL1                ..x'80' ADV*|NOADV
PSI_01APOST DS    CL1              ..x'40' APOST|QUOTE*
PSI_01DATA31 DS    CL1             ..x'20' DATA(24|31*)
PSI_01DECK DS    CL1               ..x'10' D|NOD
PSI_01DUMP DS    CL1               ..x'08' DU|NODU*
PSI_01DYNAM DS    CL1              ..x'04' DYN|NODYN*
PSI_01FASTSRT DS    CL1            ..x'02' FSRT|NOFSRT*
PSI_01SQLIMS DS    CL1             ..x'01' SQLIMS|NOSQLIMS*
         SPACE 1
PSI_SIB2 DS    0XL1           SIB byte 2 (hex)
         BITDEF $CBL_LIB,                                              +
               $CBL_LIST,                                              +
               $CBL_MAP,                                               +
               $CBL_NUM,                                               +
               $CBL_OBJECT,                                            +
               $CBL_OFFSET,                                            +
               $CBL_OPT,                                               +
               $CBL_OUTDD
PSI_02LIB DS    CL1                ..x'80' LIB*             <
PSI_02LIST DS    CL1               ..x'40' LIST|NOLIST*
PSI_02MAP DS    CL1                ..x'20' MAP|NOMAP*
PSI_02NUM DS    CL1                ..x'10' NUM|NONUM*
PSI_02OBJECT DS    CL1             ..x'08' OBJ*|NOOBJ
PSI_02OFFSET DS    CL1             ..x'04' OFF|NOOFF*
PSI_02OPT DS    CL1                ..x'02' OPT|NOOPT*       <
PSI_02OUTDD DS    CL1              ..x'01' OUTDD(ddname|SYSOUT*)
         SPACE 1
PSI_SIB3 DS    0XL1           SIB byte 3 (hex)
         BITDEF $CBL_NUMPROCPFD,                                       +
               $CBL_RENT,                                              +
               $CBL_RES,                                               +
               $CBL_SEQUENCE,                                          +
               $CBL_NULL1,                                             +
               $CBL_SOURCE,                                            +
               $CBL_SSRANGE,                                           +
               $CBL_TERM
PSI_03NUMPROCPFD DS    CL1         ..x'80' NUMPROC(PFD|NOPFD*)
PSI_03RENT DS    CL1               ..x'40' RENT*|NORENT
PSI_03RES DS    CL1                ..x'20' RES*             <
PSI_03SEQ DS    CL1                ..x'10' SEQ*|NOSEQ
         DS    CL1                 ..x'08' SIZE(MAX)        <
PSI_03SOURCE DS    CL1             ..x'04' S*|NOS
PSI_03SSRANGE DS    CL1            ..x'02' SSR|NOSSR
PSI_03TERM DS    CL1               ..x'01' TERM|NOTERM*
         SPACE 1
PSI_SIB4 DS    0XL1           SIB byte 4 (hex)
         BITDEF $CBL_TEST,                                             +
               $CBL_TRUNCSTD,                                          +
               $CBL_WORD,                                              +
               $CBL_VBREF,                                             +
               $CBL_XREF,                                              +
               $CBL_ZWB,                                               +
               $CBL_NAME,                                              +
               $CBL_NULL2
PSI_04TEST DS    CL1               ..x'80' TEST|NOTEST*
PSI_04TUNCSTD DS    CL1            ..x'40' TRUNC(STD*|OPT)
PSI_04WORD DS    CL1               ..x'20' WD|NOWD*
PSI_04VBREF DS    CL1              ..x'10' VBREF|NOVBREF*
PSI_04XREF DS    CL1               ..x'08' X*|NOX
PSI_04ZWB DS    CL1                ..x'04' ZWB*|NOZWB
PSI_04NAME DS    CL1               ..x'02' NAME|NONAME*
         DS    CL1                 ..x'01' CMPR2|NOCMPR2    <
         SPACE 1
PSI_SIB5 DS    0XL1           SIB byte 5 (hex)
         BITDEF $CBL_NUMPROCMIG,                                       +
               $CBL_NUMCLSALT,                                         +
               $CBL_DBCS,                                              +
               $CBL_AWO,                                               +
               $CBL_TRUNCBIN,                                          +
               $CBL_ADATA,                                             +
               $CBL_CURRENCY,                                          +
               $COD_CLASS
PSI_05NUMPRCMIG DS    CL1          ..x'80' NUMPROC(MIG)     <
PSI_05NUMCLSALT DS    CL1          ..x'40' NUMCLS(ALT|PRIME*) <
PSI_05DBCS DS    CL1               ..x'20' DBCS*|NODBCS
PSI_05AWO DS    CL1                ..x'10' AWO|NOAWO*
PSI_05TRUNCBIN DS    CL1           ..x'08' TRUNC(BIN)
PSI_05ADATA DS    CL1              ..x'04' ADATA|NOADATA*
PSI_05CURRENCY DS    CL1           ..x'02' CURR|NOCURR*
PSI_05CLASS DS    CL1              ..x'01' CLASS|PROGRAM* <
         SPACE 1
PSI_SIB6 DS    0XL1           SIB byte 6  DATA DIVISION
         BITDEF $COD_QSAM,                                             +
               $COD_ESDS,                                              +
               $COD_KSDS,                                              +
               $COD_RRN,                                               +
               $COD_CODESET,                                           +
               $COD_SPAN,                                              +
               $COD_PICGN,                                             +
               $COD_ODO
         DS    CL8
         SPACE 1
PSI_SIB7 DS    0XL1           SIB byte 7  DATA DIVISION
         BITDEF $COD_SYNCHRONIZED,                                     +
               $COD_JUSTIFIED,                                         +
               $COD_USAGEPTR,                                          +
               $COD_CPLXODO,                                           +
               $COD_EFP,                                               +
               $COD_IFP,                                               +
               $COD_LINE,                                              +
               $COD_PFPTR
         DS    CL8
         SPACE 1
PSI_SIB8 DS    0XL1           SIB byte 8  ENVIRONMENT DIVISION
         BITDEF $COD_FILESTATUS,                                       +
               $COD_RERUN,                                             +
               $COD_UPSI,                                              +
               $COD_WSOPT,                                             +
               $CBL_VSAMOPENFS,                                        +
               $COD_NULL4,                                             +
               $COD_NULL5,                                             +
               $COD_NULL6
         DS    CL4
PSI_08VSAMOPENFS DS    CL1         ..x'08' VS(C*|S)
         DS    CL3
         SPACE 1
PSI_SIB9 DS    0XL1           SIB byte 9  PROCEDURE DIVISION
         BITDEF $COD_ACCEPT,                                           +
               $COD_ADD,                                               +
               $COD_ALTER,                                             +
               $COD_CALL,                                              +
               $COD_CANCEL,                                            +
               $COD_NULL7,                                             +
               $COD_CLOSE,                                             +
               $COD_NULL8
         DS    CL8
         SPACE 1
PSI_SIBA DS    0XL1           SIB byte 10  PROCEDURE DIVISION
         BITDEF $COD_COMPUTE,                                          +
               $COD_NULL9,                                             +
               $COD_DELETE,                                            +
               $COD_NULL10,                                            +
               $COD_DISPLAY,                                           +
               $COD_DIVIDE,                                            +
               $COD_NULL11,                                            +
               $COD_NULL12
         DS    CL8
         SPACE 1
PSI_SIBB DS    0XL1           SIB byte 11  PROCEDURE DIVISION
         BITDEF $COD_NULL13,                                           +
               $COD_ENDPROGRAM,                                        +
               $COD_ENTER,                                             +
               $COD_ENTRY,                                             +
               $COD_EXIT,                                              +
               $COD_EXEC,                                              +
               $COD_GOTO,                                              +
               $COD_IF
         DS    CL8
         SPACE 1
PSI_SIBC DS    0XL1           SIB byte 12  PROCEDURE DIVISION
         BITDEF $COD_INITIALIZE,                                       +
               $COD_INVOKE,                                            +
               $COD_INSPECT,                                           +
               $COD_MERGE,                                             +
               $COD_MOVE,                                              +
               $COD_MULTIPLY,                                          +
               $COD_OPEN,                                              +
               $COD_PERFORM
         DS    CL8
         SPACE 1
PSI_SIBD DS    0XL1           SIB byte 13  PROCEDURE DIVISION
         BITDEF $COD_READ,                                             +
               $COD_NULL14,                                            +
               $COD_RELEASE,                                           +
               $COD_RETURN,                                            +
               $COD_REWRITE,                                           +
               $COD_SEARCH,                                            +
               $COD_NULL15,                                            +
               $COD_SET
         DS    CL8
         SPACE 1
PSI_SIBE DS    0XL1           SIB byte 14  PROCEDURE DIVISION
         BITDEF $COD_SORT,                                             +
               $COD_START,                                             +
               $COD_STOP,                                              +
               $COD_STRING,                                            +
               $COD_SUBTRACT,                                          +
               $COD_NULL16,                                            +
               $COD_NULL17,                                            +
               $COD_UNSTRING
         DS    CL8
         SPACE 1
PSI_SIBF DS    0XL1           SIB byte 15  PROCEDURE DIVISION
         BITDEF $COD_USE,                                              +
               $COD_WRITE,                                             +
               $COD_CONTINUE,                                          +
               $COD_ENDADD,                                            +
               $COD_ENDCALL,                                           +
               $COD_ENDCOMPUTE,                                        +
               $COD_ENDDELETE,                                         +
               $COD_ENDDIVIDE
         DS    CL8
         SPACE 1
PSI_SIBG DS    0XL1           SIB byte 16  PROCEDURE DIVISION
         BITDEF $COD_ENDEVALUATE,                                      +
               $COD_ENDIF,                                             +
               $COD_ENDMULTIPLY,                                       +
               $COD_ENDREAD,                                           +
               $COD_ENDRETURN,                                         +
               $COD_ENDREWRITE,                                        +
               $COD_ENDSEARCH,                                         +
               $COD_ENDSTART
         DS    CL8
         SPACE 1
PSI_SIBH DS    0XL1           SIB byte 17  PROCEDURE DIVISION
         BITDEF $COD_ENDSTRING,                                        +
               $COD_ENDSUBTRACT,                                       +
               $COD_ENDUNSTRING,                                       +
               $COD_ENDWRITE,                                          +
               $COD_GOBACK,                                            +
               $COD_EVALUATE,                                          +
               $COD_NULL18,                                            +
               $COD_SERVICE
         DS    CL8
         SPACE 1
PSI_SIBI DS    0XL1           SIB byte 18  PROCEDURE DIVISION
         BITDEF $COD_ENDINVOKE,                                        +
               $COD_ENDEXEC,                                           +
               $COD_XML,                                               +
               $COD_ENDXML,                                            +
               $COD_ALLOCATE,                                          +
               $COD_FREE,                                              +
               $COD_JSON,                                              +
               $COD_ENDJSON
PSI_SIBJ DS    0XL1           SIB byte 19
         BITDEF $CBL_NULL19,                                           +
               $CBL_NULL20,                                            +
               $CBL_NULL21,                                            +
               $CBL_NULL22,                                            +
               $CBL_NULL23,                                            +
               $CBL_NULL24,                                            +
               $CBL_NULL25,                                            +
               $CBL_NULL26
         DS    CL8
         SPACE 1
PSI_SIBK DS    0XL1           SIB byte 20
         BITDEF $CBL_NULL27,                                           +
               $CBL_NULL28,                                            +
               $CBL_NULL29,                                            +
               $CBL_NULL30,                                            +
               $CBL_NULL31,                                            +
               $CBL_NULL32,                                            +
               $CBL_NULL33,                                            +
               $CBL_NULL34
         DS    CL8
         SPACE 1
PSI_SIBL DS    0XL1           SIB byte 21  PROCEDURE DIVISION
         BITDEF $COD_HEXLIT,                                           +
               $COD_ALTEREDGOTO,                                       +
               $COD_IOERROR,                                           +
               $COD_NULL35,                                            +
               $COD_DEBUGGING,                                         +
               $COD_SEGMENTATION,                                      +
               $COD_OPENEXTEND,                                        +
               $COD_EXITPGM
         DS    CL8
         SPACE 1
PSI_SIBM DS    0XL1           SIB byte 22  PROCEDURE DIVISION
         BITDEF $COD_CALLLIT,                                          +
               $COD_CALLID,                                            +
               $COD_CALLONOVERFLOW,                                    +
               $COD_CALLLENGTHOF,                                      +
               $COD_CALLADDRESSOF,                                     +
               $COD_CLOSEREEL,                                         +
               $COD_EXPONENT,                                          +
               $COD_FPUSED
         DS    CL8
         SPACE 1
PSI_SIBN DS    0XL1           SIB byte 23  PROCEDURE DIVISION
         BITDEF $COD_COPY,                                             +
               $COD_BASIS,                                             +
               $COD_PGMNMDBCS,                                         +
               $COD_DBCSSOSI,                                          +
               $CBL_SUPPRESS,                                          +
               $CBL_SSRZLEN,                                           +
               $CBL_SSRABD,                                            +
               $CBL_INLINE
         DS    CL4
PSI_23SUPPRESS DS    CL1           ..x'08' SUPP*|NOSUPP
PSI_23SSRZLEN DS    CL1            ..x'04' SSR(ZLEN|NOZLEN*)
PSI_23SSRABD DS    CL1             ..x'02' SSR(ABD|MSG*)
PSI_23INLINE DS    CL1             ..x'01' INL|NOINL*
         SPACE 1
PSI_SIBO DS    0XL1           SIB byte 24  PROCEDURE DIVISION
         BITDEF $COD_DBCSLIT,                                          +
               $COD_REPLACE,                                           +
               $COD_REFMOD,                                            +
               $COD_NESTEDPGM,                                         +
               $COD_INITIAL,                                           +
               $COD_COMMON,                                            +
               $COD_SELECTOPTIONAL,                                    +
               $COD_EXTERNAL
         DS    CL8
         SPACE 1
PSI_SIBP DS    0XL1           SIB byte 25  PROCEDURE DIVISION
         BITDEF $COD_GLOBAL,                                           +
               $COD_RECORDVARYING,                                     +
               $COD_VOLATILE,                                          +
               $CBL_NULL36,                                            +
               $CBL_NULL37,                                            +
               $COD_INTRINSICFUNCT,                                    +
               $COD_ZLIT,                                              +
               $COD_RECURSIVE
         DS    CL8
         SPACE 1
PSI_SIBQ DS    0XL1           SIB byte 26 (hex)
         BITDEF $CBL_RMODEANY,                                         +
               $CBL_TESTSTMT,                                          +
               $CBL_TESTPATH,                                          +
               $CBL_TESTBLOC,                                          +
               $CBL_OPTFULL,                                           +
               $CBL_INTDATELILIAN,                                     +
               $CBL_xxTESTSEP,                                         +
               $CBL_xxTESTSEPDSN
PSI_26RMODEANY DS    CL1           ..x'80' RMODE(ANY|24)
*                                  ..x'70' TEST(HOOK)       <
PSI_26TESTSTMT DS    CL1           ..x'40' TEST(STMT)       <
PSI_26TESTPATH DS    CL1           ..x'20' TEST(PATH)       <
PSI_26TESTBLOC DS    CL1           ..x'10' TEST(BLOCK)      <
PSI_26OPTFULL DS    CL1            ..x'08' OPT(FULL)|OPT(STD) <
PSI_26INTDATELILIAN DS    CL1      ..x'04' ANSI*|LILIAN
PSI_26xxTESTSEP DS    CL1          ..x'02' xxTEST(SEP*|NOSEP)
PSI_26xxTESTSEPDSN DS    CL1       ..x'01' xxTEST(SEP(DSNAME*|NODSNAME)
         SPACE 1
PSI_SIBR DS    0XL1           SIB byte 27 (hex)
         BITDEF $CBL_PGMNLONGUPPER,                                    +
               $CBL_PGMNLONGMIXED,                                     +
               $CBL_DLL,                                               +
               $CBL_EXPORTALL,                                         +
               $CBL_xxTESTSRC,                                         +
               $CBL_ARITHEXTEND,                                       +
               $CBL_THREAD,                                            +
               $CBL_TESTEJPD
PSI_27PGMNLONGUPPER DS    CL1      ..x'80' PGMN(LU)
PSI_27PGMNLONGMIXED DS    CL1      ..x'40' PGMN(LM)
PSI_27DLL DS    CL1                ..x'20' DLL|NODLL*
PSI_27EXPORTALL DS    CL1          ..x'10' EXP|NOEXP*
PSI_27xxTESTSRC DS    CL1          ..x'08' xxTEST(SO*|NOSO)
PSI_27ARITHEXTEND DS    CL1        ..x'04' AR(C*|E)
PSI_27THREAD DS    CL1             ..x'02' THREAD|NOTHREAD*
PSI_27TESTEJPD DS    CL1           ..x'01' TEST(EJPD*|NOEJPD)
         SPACE 1
PSI_SIBS DS    0XL1           SIB byte 28 (hex)
         BITDEF $CBL_SQL,                                              +
               $CBL_CICS,                                              +
               $CBL_MDECK,                                             +
               $CBL_SQLCCSID,                                          +
               $CBL_OPTFILE,                                           +
               $CBL_XMLPARSEXMLSS,                                     +
               $CBL_BLOCK0,                                            +
               $CBL_DISPSIGNSEP
PSI_28SQL DS    CL1                ..x'80' SQL|NOSQL*
PSI_28CICS DS    CL1               ..x'40' CICS|NOCICS*
PSI_28MDEC DS    CL1               ..x'20' MD|NOMD*
PSI_28SQLCCSID DS    CL1           ..x'10' SQLC*|NOSQLC
PSI_28OPTFILE DS    CL1            ..x'08' OPTFILE|none*
PSI_28XMLPARSEXMLSS DS    CL1      ..x'04' XP(X*|C)
PSI_28BLOCK0 DS    CL1             ..x'02' BLOCK0|NOBLOCK0
PSI_28DISPSIGNSEP DS    CL1        ..x'01' DS(C*|S)
         SPACE 1
PSI_SIBT DS    0XL1           SIB byte 29  PROCEDURE DIVISION
         BITDEF $COD_JAVAOO,                                           +
               $COD_RANDOM,                                            +
               $COD_NATIONAL,                                          +
               $COD_XMLPARSEVALIDATION,                                +
               $CBL_STGOPT,                                            +
               $CBL_AFPVOLATILE,                                       +
               $CBL_HGPRPRESERVE,                                      +
               $CBL_NOTESTDWARF
         DS    CL4
PSI_29STGOPT DS    CL1             ..x'08' SO|NOSO*
PSI_29AFPVOLATILE DS    CL1        ..x'04' APF(VOLATILE|NOVOLATILE*)
PSI_29HGPRESERVE DS    CL1         ..x'02' HGPR(PRESERVE*|NOPRESERVE)
PSI_29NOTESTDWARF DS    CL1        ..x'01' NOTEST(DWARF)
         SPACE 1
PSI_SIBU DS    0XL1           SIB byte 30 (hex)
         BITDEF $CBL_QUALIFYEXTEND,                                    +
               $CBL_VLRCOMPAT,                                         +
               $CBL_COPYRIGHT,                                         +
               $CBL_SERVICE,                                           +
               $CBL_ZONEDATAMIG,                                       +
               $CBL_ZONEDATAPFD,                                       +
               $CBL_NULL42,                                            +
               $CBL_NULL43
PSI_30QUALIFYEXTEND DS    CL1      ..x'80' QUA(C*|E)
PSI_30VLRCOMPAT DS    CL1          ..x'40' VLR(C|S*)
PSI_30COPYRIGHT DS    CL1          ..x'20' CPYR|NOCPYR*
PSI_30SERVICE DS    CL1            ..x'10' SERV|NOSERV*  (64-bytes)
PSI_30ZONEDATAMIG DS    CL1        ..x'08' ZD(MIG)
PSI_30ZONEDATAPFD DS    CL1        ..x'04' ZD(PFD|NOPFD)
         DS    CL2
         SPACE 1
PSI_SIBV DS    0XL1           SIB byte 31 (hex)
         BITDEF $CBL_NUMCHECKZONX,                                     +
               $CBL_NUMCHECKPAC,                                       +
               $CBL_NUMCHECKBIN,                                       +
               $CBL_NUMCHECKABD,                                       +
               $CBL_PARMCHECK,                                         +
               $CBL_PARMCHECKABD,                                      +
               $CBL_NUMCHECKZONNOX,                                    +
               $CBL_NULL44
PSI_31NUMCHECKZONX DS    CL1       ..x'80' NC(ZON(  ALPHNUM*))
PSI_31NUMCHECKPAC DS    CL1        ..x'40' NC(PAC)
PSI_31NUMCHECKBIN DS    CL1        ..x'20' NC(BIN)
PSI_31NUMCHECKABD DS    CL1        ..x'10' NC(ABD|MSG*)
PSI_31PARMCHECK DS    CL1          ..x'08' PC|NOPC*
PSI_31PARMCHECKABD DS    CL1       ..x'04' PC(ABD|MSG*)
PSI_31NUMCHECKZONNOX DS    CL1     ..x'02' NC(ZON(NOALPHNUM))
         DS    CL1
         DS    XL5
PSILEN   EQU   *-PSIINFO
AS3OBJCA_LEN EQU   *-AS3OBJCA
./ ADD NAME=AS4LACC0 0109-15222-19325-1428-00109-00107-00000-APLKS   31
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
         PUSH  PRINT
*        PRINT OFF
&CSECT   CEEENTRY ,                                                    +
               PPA=PPA,                                                +
               AUTO=#DSALEN,                                           +
               NAB=YES,            NAB=NO IF CALLED BY NON-LE          +
               MAIN=NO,                                                +
               ENCLAVE=NO,                                             +
               PARMREG=1,                                              +
               BASE=10,                                                +
               PLIST=HOST
         POP   PRINT
         SPACE 2
         USING CEECAA,RC
         ST    R1,SUBPLIST         SAVE ORIGINAL R1 VALUE
         LARL  R9,STATIC
         USING STATIC,R9
         SPACE 1
         J     MAIN0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA (PRIMARY)
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
         PUSH  PRINT
         PRINT OFF
PPA      CEEPPA ,                                                      +
               EPNAME=&CSECT,                                          +
               VER=01,REL=01,MOD=00,                                   +
               DSA=YES
         POP   PRINT
         EJECT
MAIN0000 EQU   *
         LA    R0,CLRBEG
         LA    R1,#CLRLEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2          CLEAR STORAGE
         SPACE 1
MAIN0100 EQU   *
         L     R1,SUBPLIST
         USING INPPLIST,R1
         SPACE 1
         LARL  RE,EXIT0000
         MVC   SUBPARM0,@ASCA
         NC    SUBPARM0,=XL4'7FFFFFFF'
         TM    @ASCA,X'80'    Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         MVC   SUBPARM2,@REQOPT
         NC    SUBPARM2,=XL4'7FFFFFFF'
         TM    @REQOPT,X'80'  Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         MVC   SUBPARM3,@SRCSTR
         NC    SUBPARM3,=XL4'7FFFFFFF'
         TM    @SRCSTR,X'80'  Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         L     R2,@PATCNT
         ICM   R0,15,0(R2)    Q. ANY TEMPLATE ENTRIES
         JZ    TXT0114A       A. NO,
         JM    TXT0114A       A. NEGATIVE
         CH    R0,=Y(&I)      Q. EXCEED LIMIT
         JH    TXT0113A       A. YES,
         ST    R0,PATCNT      SAVE PATTERN COUNT
         TM    @PATCNT,X'80'  Q. LAST PARM
         JO    TXT0114A       A. YES, ERROR
         SPACE 1
         LA    R5,@PATSTR     POINT TO BEGIN OF VECTOR
         LA    R4,SUBPARM5    POINT TO BEGIN OF VECTOR
         LA    R2,4           SETUP INCR VALUE
         AHI   R0,-1          SUBT 1 FROM PATTERN COUNT
         SLL   R0,2           MULTIPLY BY 4
         LR    R3,R0          POINT TO END OF VECTOR
         AR    R3,R4
MAIN0110 EQU   *
         MVC   0(4,R4),0(R5)       SAVE ADDR OF PATTERN STR
*        MVC   SUBPARM5,@PATSTR    SAME AS ABOVE
         NC    0(4,R4),=XL4'7FFFFFFF'
*        NC    SUBPARM5,=XL4'7FFFFFFF'  SAME AS ABOVE
         TM    0(R5),X'80'    Q. LAST PARM
*        TM    @PATSTR,X'80'  SAME AS ABOVE
         JO    MAIN0130       A. YES
         AR    R5,R2          BUMP TO NEXT PATTERN
         BRXLE R4,R2,MAIN0110      PROCESS ALL PATTERNS
         SPACE 1
         MVC   SUBPARM6,0(R5)      SAVE ADDR OF LE FDBK
*        MVC   SUBPARM6,@PATSTR    SAME AS ABOVE
         NC    SUBPARM6,=XL4'7FFFFFFF'
         LARL  RE,MAIN0130
         TM    0(R5),X'80'    Q. LAST PARM
*        TM    @PATSTR,X'80'  SAME AS ABOVE
         JNO   TXT0113B       A. NO, TOO MANY PARAMETERS
         DROP  R1
MAIN0130 EQU   *
         LARL  RE,EXIT0000
         ICM   R6,15,SUBPARM0 Q. ASCA
         JZ    ABEND850       A. NO
         USING ASCAHDR,R6
         CLC   ASCA_DSID,=Y($ASCA) Q. VALID ASCA
         JNE   ABEND850            A. NO
         CLC   ASCA_EYE,=CL8'**ASCA**'  Q. VALID ASCA
         JNE   ABEND850                 A. NO, ERROR
./ ADD NAME=AS4LACC1 0102-15057-19028-0912-00057-00056-00000-APLKS   06
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, CODE
*
*     CPYBK ID: AS4LACC1
*        TITLE: LEXICAL ANALYSIS COMMON CODE 1
*         DATE: 09/01/2006
*
*         DESC: THIS COPYBOOK PROVIDES COMMON CODE FOR
*               LEXICAL ANALYSIS ROUTINES
*
* REQUIREMENTS: ADDRESSABILITY TO DSECT ASU9LA02 VIA
*               MACRO AS1LAIDA.  ADDRESSABILITY TO
*               VALID CHARACTER TABLE VIA MACRO AS1LAIDA.
*               COPYBOOK AS4LACC2.
*               TSA FIELDS TRT1_VECTOR, TRT2_VECTOR,
*               HLD1_REF.
*               IF THIS ROUTINE OCCURS MULTIPLE TIMES IN
*               A COMPILE UNIT PRESET GLOBAL VARIABLE &C
*               PRIOR TO COPYBOOK INCLUSION.
* --------------------------------------------------------- *
         SPACE 2
* --------------------------------------------------------- *
* INITIALIZE TRT TABLES FOR FCHR0000 AND FDLM0000
*
* OUTPUT:
*
*   &C.HLD1_CRSR   = ADDR IF VALID CHARACTER
*   &C.TRT1_VECTOR = VALID CHAR TRT TABLE
*   &C.TRT2_VECTOR = VALID DELIM TRT TABLE
* --------------------------------------------------------- *
         SPACE 1
*        POSITION TO FIRST VALID CHARACTER
         MVC   &C.TRT1_VECTOR,VCHTBL    INIT TRT TABLE
         ICM   R2,8,RO_DFLT_STRIP_CH
         SRL   R2,24
         LA    R1,&C.TRT1_VECTOR(R2)
         MVI   0(R1),X'00'    TURN OFF STRIP CHAR
         BRAS  RE,&C.FCHR0000      FIND FIRST VALID CHAR
         LARL  RE,EXIT0000
         CHI   RF,4           Q. VALID RC
         JH    TXT0109C       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     *+4+4          ..00 FOUND VALID CHAR
         J     TXT0105C       ..04 VALID CHAR NOT FOUND
*+4+4    EQU   *
*        INITIALIZE TRT TABLES
         MVC   &C.TRT1_VECTOR,VCHTBL
         ICM   R2,8,RO_DFLT_DELIM_CH
         SRL   R2,24
         LA    R1,&C.TRT1_VECTOR(R2)
         MVI   0(R1),X'00'    TURN OFF DELIM CHAR
         SPACE 1
         MVI   &C.TRT2_VECTOR,X'00'
         MVC   &C.TRT2_VECTOR+1(L'&C.TRT2_VECTOR-1),&C.TRT2_VECTOR
         LA    R1,&C.TRT2_VECTOR(R2)
         MVI   0(R1),X'01'    TURN ON DELIM CHAR
./ ADD NAME=AS4LACC2 0101-15148-19028-0942-00116-00116-00000-APLKS   28
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, CODE
*
*     CPYBK ID: AS4LACC2
*        TITLE: LEXICAL ANALYSIS COMMON CODE 2
*         DATE: 09/01/2006
*
*         DESC: THIS COPYBOOK PROVIDES COMMON CODE FOR
*               LEXICAL ANALYSIS ROUTINES
*
* REQUIREMENTS: TSA FIELDS HLD1_CRSR, HLD2_CRSR, HLD1_STOP.
*               IF THIS ROUTINE OCCURS MULTIPLE TIMES IN
*               A COMPILE UNIT PRESET GLOBAL VARIABLE &C
*               PRIOR TO COPYBOOK INCLUSION.
* --------------------------------------------------------- *
         SPACE 2
* --------------------------------------------------------- *
* FIND WHERE VALID CHARACTERS BEGIN
*
*  INPUT:
*
*   &C.HLD1_CRSR = SCAN START ADDRESS
*   &C.HLD1_STOP = SCAN END ADDRESS
*
* OUTPUT:
*
*   &C.HLD1_CRSR = ADDR IF VAILD CHARACTER
*             R1 = ADDR OF VALID CHARACTER
*             R2 = TRT STOP FUNCTION BYTE VALUE
*             RF = 0 IF FOUND VALID CHAR
*                  4 IF VALID CHAR IS NOT FOUND
* --------------------------------------------------------- *
         SPACE 1
&C.FCHR0000 EQU   *
         AS2RESTK PUSH
         SPACE 1
         LHI   RF,4           SET DEFAULT RC
         L     R1,&C.HLD1_CRSR     POINT TO SCAN BEGIN
         L     R2,&C.HLD1_STOP     POINT TO SCAN END
         SR    R2,R1               COMPUTE FIELD LGTH
         J     *+4+6
         TRT   0(0,R1),&C.TRT1_VECTOR
*              R1 = ADDR OF STOP CHAR IN INPUT AREA
*              R2 = NON-ZERO FUNCTION BYTE
*+4+6    EQU   *
         EX    R2,*-6         Q. FIND VALID CHAR
         JZ    &C.FCHR9900    A. NO
         ST    R1,&C.HLD1_CRSR     SAVE LEXEME FIELD CURSOR
         LHI   RF,0
&C.FCHR9900 EQU   *
         AS2RESTK POP
         BR    RE
         SPACE 2
* --------------------------------------------------------- *
* FIND DELIMITER CHARACTERS
*
*  INPUT:
*
*   &C.HLD1_CRSR = LEXEME FIELD CURSOR ADDRESS
*   &C.HLD1_STOP = SOURCE FIELD END ADDRESS
*
* OUTPUT:
*
*   &C.HLD2_CRSR = SOURCE FIELD LAST BYTE CURSOR ADDRESS
*   &C.HLD3_CRSR = NEXT VALID CHAR ADDRESS
*             R1 = ADDR OF NEXT VALID CHARACTER
*             R2 = ADDR OF DELIM CHARACTER (TERMINATING LEXEME)
*             R3 = ADDR OF SOURCE FIELD LAST BYTE / HLD2_CRSR
*             RF = 0 IF FOUND DELIM CHAR
*                  4 IF DELIM CHAR IS NOT FOUND
*                  8 IF VALID CHAR IS NOT FOUND
* --------------------------------------------------------- *
         SPACE 1
&C.FDLM0000 EQU   *
         AS2RESTK PUSH
         SPACE 1
         LHI   RF,4           SET DEFAULT RC
         L     R1,&C.HLD1_CRSR     POINT TO CURSOR POSITION
         L     R2,&C.HLD1_STOP     POINT TO LAST BYTE OF SOURCE
         SR    R2,R1               COMPUTE FIELD LENGTH
         J     *+4+6
         TRT   0(0,R1),&C.TRT2_VECTOR
*              R1 = ADDR OF STOP CHAR IN INPUT AREA
*              R2 = NON-ZERO FUNCTION BYTE
*+4+6    EQU   *
         EX    R2,*-6              Q. FIND STOP CHAR
         JZ    &C.FDLM9900         A. NO
         SPACE 1
         LR    R3,R1               SAVE ADDR OF DELIM CHAR
         LA    R4,1                SET INCR VALUE FOR BRXLE
         L     R5,&C.HLD1_STOP     SET COMPARAND FOR BRXLE
         J     &C.FDLM0240
&C.FDLM0200 EQU   *
         ICM   R2,8,0(R1)
         SRL   R2,24
         LA    R2,&C.TRT1_VECTOR(R2)
         CLI   0(R2),X'00'         Q. VALID CHAR
         JE    &C.FDLM0240         A. NO
         LHI   RF,0
         J     &C.FDLM0250         A. YES
&C.FDLM0240 EQU   *
         BRXLE R1,R4,&C.FDLM0200
*              R1 = ADDR OF BYTE TO CHECK
*              R4 = INCREMENT VALUE
*              R5 = COMPARAND (END ADDR)
         LHI   RF,8
         L     R1,F0          SAVE ADDR OF NEXT VALID CHAR
&C.FDLM0250 EQU   *
         ST    R1,&C.HLD3_CRSR     SAVE ADDR OF NEXT VALID CHAR
         LR    R2,R3          SET R2 TO ADDR OF DELIM CHAR
         AHI   R3,-1
         ST    R3,&C.HLD2_CRSR     SAVE END ADDR
&C.FDLM9900 EQU   *
         AS2RESTK POP
         BR    RE
./ ADD NAME=AS4LACC3 0102-16294-19028-0913-00056-00056-00000-APLKS   11
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, CODE
*
*     CPYBK ID: AS4LACC3
*        TITLE: LEXICAL ANALYSIS COMMON CODE 3
*         DATE: 2016/10/20
*
*         DESC: THIS COPYBOOK PROVIDES COMMON CODE FOR
*               LEXICAL ANALYSIS ROUTINES
*
* REQUIREMENTS: ADDRESSABILITY TO DSECT ASU9LA07 VIA
*               MACRO AS1LAIDA.
*
*    C   USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
*    C2  USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
*
*               TSA FIELDS TRT1_VECTOR, TRT2_VECTOR.
*               IF THIS ROUTINE OCCURS MULTIPLE TIMES IN
*               A COMPILE UNIT PRESET GLOBAL VARIABLE &C
*               PRIOR TO COPYBOOK INCLUSION.
* --------------------------------------------------------- *
         SPACE 2
* --------------------------------------------------------- *
* PROCESS USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
&C.UDLM1000 EQU   *
         ICM   R0,12,C2.TP_STR_LEN Q. VALID LENGTH
         JZ    TXT0115Q            A. NO,
         SRA   R0,16          Q. VALID LENGTH
         JM    &C.UDLM1020    A. YES,
         LA    R3,C2.TP_STR   POINT TO DELIM VECTOR
         J     &C.UDLM1030
&C.UDLM1020 EQU   *
         ICM   R3,15,C2.TP_STR     Q. VALID ADDRESS DELIM VECTOR
         JZ    TXT0105D            A. NO,
         LPR   R0,R0
&C.UDLM1030 EQU   *
         CHI   R0,16          Q. VALID LENGTH
         JH    TXT0115Q       A. NO,
         SPACE 1
         LA    R4,1           PICK UP INCR VALUE OF TEMPLATE
         LR    R5,R3          POINT TO TEMPLATE
         AR    R5,R0          SET UP COMPARAND FIELD
         AHI   R5,-1
         XR    R2,R2
&C.UDLM1100 EQU   *
*        INTIIALIZE TRT TABLES
         IC    R2,0(,R3)      PICK UP DELIM CHAR
         LA    R1,&C.TRT1_VECTOR(R2)
         MVI   0(R1),X'00'    TURN OFF DELIM CHAR
         LA    R1,&C.TRT2_VECTOR(R2)
         MVI   0(R1),X'01'    TURN ON DELIM CHAR
         BRXLE R3,R4,&C.UDLM1100
./ ADD NAME=AS4MLCC9 0104-19266-19316-1017-00050-00024-00000-APLKS   12
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES
* ASSEMBLER COPYBOOK, CODE
*
*     CPYBK ID: AS4MLCC9
*        TITLE: MAIN LINE COMMON CODE 9
*         DATE: 2019/09/23
*
*         DESC: THIS COPYBOOK PROVIDES COMMON CODE FOR
*               MAIN LINE ERROR PROCESSING ROUTINES
* --------------------------------------------------------- *
         SPACE 1
ERTN0800 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),=H'8'
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         ICM   R1,15,@PLEFDBK GET ADDR OF PGM LE FEEDBACK
         JZ    ERTN0810
         MVC   0(L'ISICTOK,R1),ISICTOK
         SPACE 1
ERTN0810 EQU   *
         L     R6,SUBPARM0    GET ADDR OF ASCA
         USING ASCAHDR,R6     EST ADDR TO ASCA
         L     R5,ASCA_@ASAB  GET ADDR OF ASAB
         USING ASABHDR,R5     EST ADDR TO ASAB
         L     R5,ASAB_@ASABX GET ADDR OF ASABX
         DROP  R5
         USING ASABXHDR,R5    EST ADDR TO ASABX
         AS2PLIST (ASCAHDR,ISIROW,0),                                  +
               VL,MF=(E,PLIST)
*        CALL ASUMETXT
         L     RF,ASAB1_@METXT
         BASR  RE,RF     LINK TO
         SPACE 1
         ICM   RF,12,ASCA_CUR_CTOKN     RETRIEVE SEVERITY
         SRL   RF,14          ..SET RETURN CODE TO LESEV*4
         ST    RF,RTNCD
         DROP  R5,R6
         SPACE 1
ERTN0840 EQU   *
         AS2RESTK POP
         BR    RE        RETURN TO CALLER
         SPACE 1
ABEND850 EQU   *         NO ASCA, ASAB, ASABX
         AS2PLIST (=F'850',=F'1'),                                     +
               VL,MF=(E,PLIST)
*        CALL CEE3ABD
         L     RF,=V(CEE3ABD)
         BR    RF        LINK TO
./ ADD NAME=BITDEF   0118-19014-19025-1359-00087-00213-00000-APLKS   26
         MACRO
         BitDef
.* --------------------------------------------------------- *
.* In Honor of Dr. John Ehrman (Mr. Assembler)
.* ASSEMBLER MACRO, DATA
.*
.* MACRO ID: BitDef
.*    TITLE: Bit Define
.*     DATE: 2019/01/14
.*
.*     DESC: Declare bit flags and keep track of which ones
.*           have been declared.  If a group of bits should
.*           be kept in a single byte, so they can be set
.*           and tested in combinations, then declare them
.*           in their own sublist (parenthesized). The macro
.*           will ensure that if parenthesized and there are
.*           1:8 bit flags defined, they will fit in a single
.*           byte.  A new byte of storage is created for each
.*           macro call.
.*
.*  OPTIONS:
.*
.*     >>-BitDef---------------------->
.*
.*          <-,--------+
.*      >-+-positional-+-------------->
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'Dr. John Ehrman'
&MACNME  SETC  'BitDef'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019/01/14'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         GBLA  &BitDef_ByteNo      used to count defined bytes
&L(1)    SETA  128,64,32,16,8,4,2,1     define bit pos values
&NN      SETA  N'&SYSLIST     nbr of bit names declared
&M       SETA  1              name counter
         AIF   (&NN EQ 0).Null     check for null arg list
.NB      AIF   (&M GT &NN).Done    check if names exhausted
&C       SETA  1              start new byte at leftmost bit
         DC    B'0'           define a bit-flag byte
&BitDef_ByteNo SETA  &BitDef_ByteNo+1
.NewN    ANOP  ,              get a new bit name
&B       SETC  '&SYSLIST(&M)' get M-th name from arg list
         AIF   ('&B' EQ '').Null   null arg
         AIF   ('&B'(1,1) NE '(').Nol
&NS      SETA  N'&SYSLIST(&M)      nbr of sublist elements
         AIF   (&NS GT 8).ErrS     >8 elements
&CS      SETA  1              init count of sublist elements
         AIF   (&C+&NS LE 9).SubT  skip if room left in byte
&C       SETA  1              start a new byte
         DC    B'0'           define a bit-flag byte
&BitDef_ByteNo SETA  &BitDef_ByteNo+1
.SubT    ANOP  ,              generate sublist equates
&B       SETC  '&SYSLIST(&M,&CS)'  extract sublist element
         AIF   ('&B' EQ '').Null   check for null
         GBLA  &(BitDef_&B._ByteNo)     created var sym for this bit
         AIF   (&(BitDef_&B._ByteNo) GT 0).DupDef
&B       EQU   *-1,&L(&C)     ..equate bit via length attr
&(BitDef_&B._ByteNo) SETA  &BitDef_ByteNo     byte nbr for this bit
&CS      SETA  &CS+1          step to next sublist element
         AIF   (&CS GT &NS).NewA   skip if end of sublist
&C       SETA  &C+1           count bits in byte
         AGO   .SubT          and go do more list elements
.Nol     ANOP  ,              not a sublist
         GBLA  &(BitDef_&B._ByteNo)     declare byte nbr for this bit
         AIF   (&(BitDef_&B._ByteNo) GT 0).DupDef
&B       EQU   *-1,&L(&C)     ..equate bit via length attr
&(BitDef_&B._ByteNo) SETA  &BitDef_ByteNo    byte nbr for this bit
.NewA    ANOP  ,              ready for next arg
&M       SETA  &M+1           step to next name
         AIF   (&M GT &NN).Done    exit if names exhausted
&C       SETA  &C+1           count bits in a byte
         AIF   (&C LE 8).NewN      get new name if not done
         AGO   .NB            bit filled, start new byte
.DupDef  MNOTE 8,'&MACNME: bit name ''&B'' was previously declared'
         MEXIT
.ErrS    MNOTE 8,'&MACNME: sublist group > 8 elements'
         MEXIT
.Null    MNOTE 8,'&MACNME: missing name at argument &M'
.Done    MEND
./ ADD NAME=BITINV   0115-19014-19025-1359-00084-00082-00000-APLKS   52
         MACRO
&LABEL   BitInv
.* --------------------------------------------------------- *
.* In Honor of Dr. John Ehrman (Mr. Assembler)
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: BitInv
.*    TITLE: set Bit Inverse (XI)
.*     DATE: 2019/01/14
.*
.*     DESC: Accept a list of bit names, generate the minimum
.*           number of instructions required to reverse setting.
.*
.*  OPTIONS:
.*
.*     >>-BitInv---------------------->
.*
.*          <-,--------+
.*      >-+-positional-+-------------->
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'Dr. John Ehrman'
&MACNME  SETC  'BitInv'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019/01/14'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&L       SETC  '&LABEL'
&NBN     SETA  0              nbr of distinct byte nbrs
&M       SETA  0              name counter
&NN      SETA  N'&SYSLIST     nbr of names declared
.NmLp    AIF   (&M GE &NN).Pass2   check if all names scanned
&M       SETA  &M+1           step to next name
&B       SETC  '&SYSLIST(&M)' pick off a name
         AIF   ('&B' EQ '').Null   check for null element
         GBLA  &(BitDef_&B._ByteNo)     declare GBLA with byte nbr
         AIF   (&(BitDef_&B._ByteNo) EQ 0).UnDef
&K       SETA  0              loop through known byte nbrs
.BNLp    AIF   (&K GE &NBN).NewBN  not in list, a new byte nbr
&K       SETA  &K+1           serch next known byte nbr
         AIF   (&BN(&K) NE &(BitDef_&B._ByteNo)).BNLp
&J       SETA  1              check if name is unique
.CkDup   AIF   (&J GT &IBN(&K)).NmOK    branch if name is unique
         AIF   ('&B' EQ '&(BitDef_Nm_&BN(&K)._&J)').DupNm
&J       SETA  &J+1           search next name in this byte
         AGO   .CkDup
.DupNm   MNOTE 8,'&MACNME: name ''&B'' duplicated in operand list'
         MEXIT
.NmOK    ANOP  ,              no match, enter name in list
&IBN(&K) SETA  &IBN(&K)+1     matching BN, bump bit count in this byte
         LCLC  &(BitDef_Nm_&BN(&K)._&IBN(&K))     slot for bit name
&(BitDef_Nm_&BN(&K)._&IBN(&K)) SETC  '&B'    save K-th bit name
         AGO   .NmLp          get next name
.NewBN   ANOP  ,              new byte nbr
&NBN     SETA  &NBN+1         incr byte nbr count
&BN(&NBN) SETA  &(BitDef_&B._ByteNo)    save new byte nbr
&IBN(&NBN) SETA  1            set count of this byte nbr to 1
         LCLC  &(BitDef_Nm_&BN(&NBN)._1)     slot for 1st bit name
&(BitDef_Nm_&BN(&NBN)._1) SETC  '&B'    save 1st bit name, this byte
         AGO   .NmLp          get next name
.Pass2   ANOP  ,              pass 2: scan byte nbr list
&M       SETA  0              byte nbr counter
.BLp     AIF   (&M GE &NBN).Done   check if all byte nbrs done
&M       SETA  &M+1           incr outer-loop counter
&X       SETA  &BN(&M)        get M-th byte nbr
&K       SETA  1              set up inner loop
&Op      SETC  '&(BitDef_Nm_&X._&K).,L''&(BitDef_Nm_&X._&K)' 1st op
.OpLp    AIF   (&K GE &IBN(&M)).GenXI   op loop, check for done
&K       SETA  &K+1           step to next bit in byte
&Op      SETC  '&Op.+L''&(BitDef_Nm_&X._&K)'
         AGO   .OpLp          loop inner for next op
.GenXI   ANOP  ,              generate instruction for byte nbr
&L       XI    &Op            reverse bit settings
&L       SETC  ''             nullify label string
         AGO   .BLp           loop outer for next byte nbr
.UnDef   MNOTE 8,'&MACNME: name ''&B'' not defined by BitDef'
         MEXIT
.Null    MNOTE 8,'&MACNME: null argument at position &M'
.Done    MEND
./ ADD NAME=BITOFF   0115-19014-19025-1400-00084-00082-00000-APLKS   13
         MACRO
&LABEL   BitOff
.* --------------------------------------------------------- *
.* In Honor of Dr. John Ehrman (Mr. Assembler)
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: BitOff
.*    TITLE: set Bit Off (NI)
.*     DATE: 2019/01/14
.*
.*     DESC: Accept a list of bit names, generate the minimum
.*           number of instructions required to set them off.
.*
.*  OPTIONS:
.*
.*     >>-BitOff---------------------->
.*
.*          <-,--------+
.*      >-+-positional-+-------------->
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'Dr. John Ehrman'
&MACNME  SETC  'BitOff'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019/01/14'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&L       SETC  '&LABEL'
&NBN     SETA  0              nbr of distinct byte nbrs
&M       SETA  0              name counter
&NN      SETA  N'&SYSLIST     nbr of names declared
.NmLp    AIF   (&M GE &NN).Pass2   check if all names scanned
&M       SETA  &M+1           step to next name
&B       SETC  '&SYSLIST(&M)' pick off a name
         AIF   ('&B' EQ '').Null   check for null element
         GBLA  &(BitDef_&B._ByteNo)     declare GBLA with byte nbr
         AIF   (&(BitDef_&B._ByteNo) EQ 0).UnDef
&K       SETA  0              loop through known byte nbrs
.BNLp    AIF   (&K GE &NBN).NewBN  not in list, a new byte nbr
&K       SETA  &K+1           serch next known byte nbr
         AIF   (&BN(&K) NE &(BitDef_&B._ByteNo)).BNLp
&J       SETA  1              check if name is unique
.CkDup   AIF   (&J GT &IBN(&K)).NmOK    branch if name is unique
         AIF   ('&B' EQ '&(BitDef_Nm_&BN(&K)._&J)').DupNm
&J       SETA  &J+1           search next name in this byte
         AGO   .CkDup
.DupNm   MNOTE 8,'&MACNME: name ''&B'' duplicated in operand list'
         MEXIT
.NmOK    ANOP  ,              no match, enter name in list
&IBN(&K) SETA  &IBN(&K)+1     matching BN, bump bit count in this byte
         LCLC  &(BitDef_Nm_&BN(&K)._&IBN(&K))     slot for bit name
&(BitDef_Nm_&BN(&K)._&IBN(&K)) SETC  '&B'    save K-th bit name
         AGO   .NmLp          get next name
.NewBN   ANOP  ,              new byte nbr
&NBN     SETA  &NBN+1         incr byte nbr count
&BN(&NBN) SETA  &(BitDef_&B._ByteNo)    save new byte nbr
&IBN(&NBN) SETA  1            set count of this byte nbr to 1
         LCLC  &(BitDef_Nm_&BN(&NBN)._1)     slot for 1st bit name
&(BitDef_Nm_&BN(&NBN)._1) SETC  '&B'    save 1st bit name, this byte
         AGO   .NmLp          get next name
.Pass2   ANOP  ,              pass 2: scan byte nbr list
&M       SETA  0              byte nbr counter
.BLp     AIF   (&M GE &NBN).Done   check if all byte nbrs done
&M       SETA  &M+1           incr outer-loop counter
&X       SETA  &BN(&M)        get M-th byte nbr
&K       SETA  1              set up inner loop
&Op      SETC  '&(BitDef_Nm_&X._&K).,255-L''&(BitDef_Nm_&X._&K)' 1st op
.OpLp    AIF   (&K GE &IBN(&M)).GenNI   op loop, check for done
&K       SETA  &K+1           step to next bit in byte
&Op      SETC  '&Op.-L''&(BitDef_Nm_&X._&K)'
         AGO   .OpLp          loop inner for next op
.GenNI   ANOP  ,              generate instruction for byte nbr
&L       NI    &Op            turn bits off
&L       SETC  ''             nullify label string
         AGO   .BLp           loop outer for next byte nbr
.UnDef   MNOTE 8,'&MACNME: name ''&B'' not defined by BitDef'
         MEXIT
.Null    MNOTE 8,'&MACNME: null argument at position &M'
.Done    MEND
./ ADD NAME=BITON    0118-19015-19025-1400-00084-00082-00000-APLKS   46
         MACRO
&LABEL   BitOn
.* --------------------------------------------------------- *
.* In Honor of Dr. John Ehrman (Mr. Assembler)
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: BitOn
.*    TITLE: set Bit On (OI)
.*     DATE: 2019/01/14
.*
.*     DESC: Accept a list of bit names, generate the minimum
.*           number of instructions required to set them on.
.*
.*  OPTIONS:
.*
.*     >>-BitOn----------------------->
.*
.*          <-,--------+
.*      >-+-positional-+-------------->
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'Dr. John Ehrman'
&MACNME  SETC  'BitOn'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019/01/14'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&L       SETC  '&LABEL'
&NBN     SETA  0              nbr of distinct byte nbrs
&M       SETA  0              name counter
&NN      SETA  N'&SYSLIST     nbr of names declared
.NmLp    AIF   (&M GE &NN).Pass2   check if all names scanned
&M       SETA  &M+1           step to next name
&B       SETC  '&SYSLIST(&M)' pick off a name
         AIF   ('&B' EQ '').Null   check for null element
         GBLA  &(BitDef_&B._ByteNo)     declare GBLA with byte nbr
         AIF   (&(BitDef_&B._ByteNo) EQ 0).UnDef
&K       SETA  0              loop through known byte nbrs
.BNLp    AIF   (&K GE &NBN).NewBN  not in list, a new byte nbr
&K       SETA  &K+1           serch next known byte nbr
         AIF   (&BN(&K) NE &(BitDef_&B._ByteNo)).BNLp
&J       SETA  1              check if name is unique
.CkDup   AIF   (&J GT &IBN(&K)).NmOK    branch if name is unique
         AIF   ('&B' EQ '&(BitDef_Nm_&BN(&K)._&J)').DupNm
&J       SETA  &J+1           search next name in this byte
         AGO   .CkDup
.DupNm   MNOTE 8,'&MACNME: name ''&B'' duplicated in operand list'
         MEXIT
.NmOK    ANOP  ,              no match, enter name in list
&IBN(&K) SETA  &IBN(&K)+1     matching BN, bump bit count in this byte
         LCLC  &(BitDef_Nm_&BN(&K)._&IBN(&K))     slot for bit name
&(BitDef_Nm_&BN(&K)._&IBN(&K)) SETC  '&B'    save K-th bit name
         AGO   .NmLp          get next name
.NewBN   ANOP  ,              new byte nbr
&NBN     SETA  &NBN+1         incr byte nbr count
&BN(&NBN) SETA  &(BitDef_&B._ByteNo)    save new byte nbr
&IBN(&NBN) SETA  1            set count of this byte nbr to 1
         LCLC  &(BitDef_Nm_&BN(&NBN)._1)     slot for 1st bit name
&(BitDef_Nm_&BN(&NBN)._1) SETC  '&B'    save 1st bit name, this byte
         AGO   .NmLp          get next name
.Pass2   ANOP  ,              pass 2: scan byte nbr list
&M       SETA  0              byte nbr counter
.BLp     AIF   (&M GE &NBN).Done   check if all byte nbrs done
&M       SETA  &M+1           incr outer-loop counter
&X       SETA  &BN(&M)        get M-th byte nbr
&K       SETA  1              set up inner loop
&Op      SETC  '&(BitDef_Nm_&X._&K).,L''&(BitDef_Nm_&X._&K)' 1st op
.OpLp    AIF   (&K GE &IBN(&M)).GenOI   op loop, check for done
&K       SETA  &K+1           step to next bit in byte
&Op      SETC  '&Op.+L''&(BitDef_Nm_&X._&K)'
         AGO   .OpLp          loop inner for next op
.GenOI   ANOP  ,              generate instruction for byte nbr
&L       OI    &Op            turn bits on
&L       SETC  ''             nullify label string
         AGO   .BLp           loop outer for next byte nbr
.UnDef   MNOTE 8,'&MACNME: name ''&B'' not defined by BitDef'
         MEXIT
.Null    MNOTE 8,'&MACNME: null argument at position &M'
.Done    MEND
./ ADD NAME=JBITOFF  0112-19015-19025-1403-00095-00093-00000-APLKS   51
         MACRO
&LABEL   JBitOff &NL,&JTLABEL
.* --------------------------------------------------------- *
.* In Honor of Dr. John Ehrman (Mr. Assembler)
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: JBitOff
.*    TITLE: Jump Bit Off
.*     DATE: 2019/01/14
.*
.*     DESC: Jump to a label if all the declared bits are off.
.*
.*  OPTIONS:
.*
.*     >>-JBitOff--------------------->
.*
.*             <-,--------+
.*      >-+-(-+-name_list-+-)-+------->
.*
.*      >-+-jump_target_label-+-------><
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'Dr. John Ehrman'
&MACNME  SETC  'JBitOff'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019/01/14'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         AIF   (N'&SYSLIST NE 2 OR '&NL' EQ '' OR '&JTLABEL' EQ '').Bad+
               Arg
&L       SETC  '&LABEL'
&NBN     SETA  0              nbr of distinct byte nbrs
&M       SETA  0              name counter
&NN      SETA  N'&NL          nbr of names declared
.NmLp    AIF   (&M GE &NN).Pass2   check if all names scanned
&M       SETA  &M+1           step to next name
&B       SETC  '&NL(&M)'      pick off a name
         GBLA  &(BitDef_&B._ByteNo)     declare GBLA with byte nbr
         AIF   (&(BitDef_&B._ByteNo) EQ 0).UnDef
&K       SETA  0              loop through known byte nbrs
.BNLp    AIF   (&K GE &NBN).NewBN  not in list, a new byte nbr
&K       SETA  &K+1           serch next known byte nbr
         AIF   (&BN(&K) NE &(BitDef_&B._ByteNo)).BNLp
&J       SETA  1              check if name is unique
.CkDup   AIF   (&J GT &IBN(&K)).NmOK    branch if name is unique
         AIF   ('&B' EQ '&(BitDef_Nm_&BN(&K)._&J)').DupNm
&J       SETA  &J+1           search next name in this byte
         AGO   .CkDup
.DupNm   MNOTE 8,'&MACNME: name ''&B'' duplicated in operand list'
         MEXIT
.NmOK    ANOP  ,              no match, enter name in list
&IBN(&K) SETA  &IBN(&K)+1     matching BN, bump bit count in this byte
         LCLC  &(BitDef_Nm_&BN(&K)._&IBN(&K))     slot for bit name
&(BitDef_Nm_&BN(&K)._&IBN(&K)) SETC  '&B'    save K-th bit name
         AGO   .NmLp          get next name
.NewBN   ANOP  ,              new byte nbr
&NBN     SETA  &NBN+1         incr byte nbr count
&BN(&NBN) SETA  &(BitDef_&B._ByteNo)    save new byte nbr
&IBN(&NBN) SETA  1            set count of this byte nbr to 1
         LCLC  &(BitDef_Nm_&BN(&NBN)._1)     slot for 1st bit name
&(BitDef_Nm_&BN(&NBN)._1) SETC  '&B'    save 1st bit name, this byte
         AGO   .NmLp          get next name
.Pass2   ANOP  ,              pass 2: scan byte nbr list
&M       SETA  0              byte nbr counter
&Skip    SETC  'JBitOff_&SYSNDX'   false branch target label
.BLp     AIF   (&M GE &NBN).Done   check if all byte nbrs done
&M       SETA  &M+1           incr outer-loop counter
&X       SETA  &BN(&M)        get M-th byte nbr
&K       SETA  1              set up inner loop
&Op      SETC  '&(BitDef_Nm_&X._&K).,L''&(BitDef_Nm_&X._&K)' 1st op
.OpLp    AIF   (&K GE &IBN(&M)).GenBC   op loop, check for done
&K       SETA  &K+1           step to next bit in byte
&Op      SETC  '&Op.+L''&(BitDef_Nm_&X._&K)'
         AGO   .OpLp          loop inner for next op
.GenBC   ANOP  ,              generate instruction for byte nbr
         AIF   (&M EQ &NBN).Last   check for last test
&L       TM    &Op            test if bit(s) are off
         JO    &Skip          skip if not all off
&L       SETC  ''             nullify label string
         AGO   .BLp           loop outer for next byte nbr
.Last    ANOP  ,              generate last test & branch
&L       TM    &Op            test if bit(s) are off
         JNO   &JTLABEL       branch if all off
         AIF   (&NBN EQ 1).Done
&Skip    EQU   *
         MEXIT
.UnDef   MNOTE 8,'&MACNME: name ''&B'' not defined by BitDef'
         MEXIT
.BadArg  MNOTE 8,'&MACNME: improperly specified argument list'
.Done    MEND
./ ADD NAME=JBITON   0107-19150-19156-1033-00132-00141-00000-APLKS   34
         MACRO
&LABEL   JBitOn &NL,&TARGET,&SELECT=ALL
.* --------------------------------------------------------- *
.* In Honor of Dr. John Ehrman (Mr. Assembler)
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: JBitOn
.*    TITLE: Jump Bit On
.*     DATE: 2019/01/14
.*
.*     DESC: Jump to a target label if the declared bit(s) are on.
.*           SELECT=ALL   jump to target label if all are on
.*           SELECT=ANY   jump to target label if any are on
.*
.*  OPTIONS:
.*
.*     >>-JBitOn---------------------->
.*
.*             <-,--------+
.*      >-+-(-+-name_list-+-)-+------->
.*
.*      >-+-target_label------+------->
.*
.*      >-+-SELECT=-+-ALL---+-+-------><
.*                  +-ANY---+
.*
.* --------------------------------------------------------- *
.*
.* YYYY/MM/DD
.* --------------------------------------------------------- *
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLB  &ClrReg
&CORPNME SETC  'Dr. John Ehrman'
&MACNME  SETC  'JBitOn'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '2019/01/14'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
&ClrReg  SETB  1
         AIF   (N'&SYSLIST LT 2).BadArg
         AIF   (T'&SYSLIST(1) EQ 'O' OR '&NL' EQ '').BadArg
         AIF   (T'&SYSLIST(2) EQ 'O' OR '&TARGET' EQ '').BadArg
         AIF   (T'&SELECT EQ 'O').Begin
         AIF   ('&SELECT' EQ 'ALL' OR '&SELECT' EQ 'ANY').Begin
         AGO   .InvSel
.Begin   ANOP
&L       SETC  '&LABEL'
&NBN     SETA  0              nbr of distinct byte nbrs
&M       SETA  0              name counter
&NN      SETA  N'&NL          nbr of names declared
.NmLp    AIF   (&M GE &NN).Pass2   check if all names scanned
&M       SETA  &M+1           step to next name
&B       SETC  '&NL(&M)'      pick off a name
         GBLA  &(BitDef_&B._ByteNo)     declare GBLA with byte nbr
         AIF   (&(BitDef_&B._ByteNo) EQ 0).UnDef
&K       SETA  0              loop through known byte nbrs
.BNLp    AIF   (&K GE &NBN).NewBN  not in list, a new byte nbr
&K       SETA  &K+1           serch next known byte nbr
         AIF   (&BN(&K) NE &(BitDef_&B._ByteNo)).BNLp
&J       SETA  1              check if name is unique
.CkDup   AIF   (&J GT &IBN(&K)).NmOK    branch if name is unique
         AIF   ('&B' EQ '&(BitDef_Nm_&BN(&K)._&J)').DupNm
&J       SETA  &J+1           search next name in this byte
         AGO   .CkDup
.DupNm   MNOTE 8,'&MACNME: name ''&B'' duplicated in operand list'
         MEXIT
.NmOK    ANOP  ,              no match, enter name in list
&IBN(&K) SETA  &IBN(&K)+1     matching BN, bump bit count in this byte
         LCLC  &(BitDef_Nm_&BN(&K)._&IBN(&K))     slot for bit name
&(BitDef_Nm_&BN(&K)._&IBN(&K)) SETC  '&B'    save K-th bit name
         AGO   .NmLp          get next name
.NewBN   ANOP  ,              new byte nbr
&NBN     SETA  &NBN+1         incr byte nbr count
&BN(&NBN) SETA  &(BitDef_&B._ByteNo)    save new byte nbr
&IBN(&NBN) SETA  1            set count of this byte nbr to 1
         LCLC  &(BitDef_Nm_&BN(&NBN)._1)     slot for 1st bit name
&(BitDef_Nm_&BN(&NBN)._1) SETC  '&B'    save 1st bit name, this byte
         AGO   .NmLp          get next name
.Pass2   ANOP  ,              pass 2: scan byte nbr list
&M       SETA  0              byte nbr counter
&Skip    SETC  'JBitOn_&SYSNDX'    else branch target label
.BLp     AIF   (&M GE &NBN).Done   check if all byte nbrs done
&M       SETA  &M+1           incr outer-loop counter
&X       SETA  &BN(&M)        get M-th byte nbr
&K       SETA  1              set up inner loop
&Op      SETC  '&(BitDef_Nm_&X._&K).,L''&(BitDef_Nm_&X._&K)' 1st op
.OpLp    AIF   (&K GE &IBN(&M)).GenBC   op loop, check for done
&K       SETA  &K+1           step to next bit in byte
&Op      SETC  '&Op.+L''&(BitDef_Nm_&X._&K)'
         AGO   .OpLp          loop inner for next op
.GenBC   ANOP  ,              generate instruction for byte nbr
         AIF   ('&SELECT' NE 'ANY').bypXR
         AIF   (NOT &ClrReg).bypXR
&L       XR    0,0            clear reg 0 for count
&L       SETC  ''
&ClrReg  SETB  0
.bypXR   ANOP  ,
         AIF   (&M EQ &NBN).Last   check for last test
         AIF   ('&SELECT' EQ 'ANY').Any1
.All1    ANOP  ,              SELECT=ALL
&L       TM    &Op            test bit(s)
&L       SETC  ''             nullify label string
         JNO   &Skip          skip if not all on
         AGO   .BLp           loop outer for next byte nbr
.Any1    ANOP  ,              SELECT=ANY
         TM    &Op            test bit(s)
         JZ    *+8            branch if all off
         AHI   0,1
         AGO   .BLp           loop outer for next byte nbr
.Last    ANOP  ,              generate last test & branch
         AIF   ('&SELECT' EQ 'ANY').Any2
.All2    ANOP  ,
&L       TM    &Op            test bit(s)
         JO    &TARGET        branch if all on
         AIF   (&NBN EQ 1).Done
&Skip    EQU   *
         MEXIT
.Any2    ANOP  ,
&L       TM    &Op            test bit(s)
         JZ    *+8            branch if all off
         AHI   0,1
         LTR   0,0
         JNZ   &TARGET
         AIF   (&NBN EQ 1).Done
         MEXIT
.UnDef   MNOTE 8,'&MACNME: name ''&B'' not defined by BitDef'
         MEXIT
.BadArg  MNOTE 8,'&MACNME: improperly specified argument list'
         MEXIT
.InvSel  MNOTE 8,'&MACNME: SELECT keyword not = ALL, ANY'
.Done    MEND
./ ADD NAME=SSLEANAL 0143-14176-19296-1627-06777-06215-00000-APLKS   38
*PROCESS RENT
         MACRO
&LABEL   AS2RESTK &CMD,&STK,                                           +
               &PREFIX=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2RESTK
.*    TITLE: REGISTER 14 STACK
.*     DATE: 03/01/2005
.*
.*     DESC: THIS MACRO IS USED TO SAVE AND/OR RESTORE
.*           REGISTER 14 UPON ENTRY AND/OR EXIT OF LOW
.*           LEVEL PROCEDURES.
.*
.*           &CMD - MACRO EXPANSION FUNCTION; PUSH, POP
.*           &STK - (OPTIONAL) NAME OF THE STORAGE VECTOR
.*                  WHERE R14 IS TO BE STORED OR LOADED
.*                  FROM. DEFAULT IS RESA.
.*  OPTIONS:
.*
.*     >>-AS2RESTK-+-PUSH-+--+-------+--+---------------+--><
.*                 +-POP--+  +-,&STK-+  +-,PREFIX=-+----+
.*
.*
.* EXTERNAL: THE FOLLOWING GLOBAL DATA IS DEFINED EXTERNAL
.*           TO THIS MACRO.
.*           A) &GTRCPFX  MACRO(AS1MUTSA)
.*
.*
.*  REG USE: R2 - MODIFIED
.*           RE - SAVED OR RESTORED
.*
.* --------------------------------------------------------- *
.*
.* XX/XX/XXXX
.* --------------------------------------------------------- *
         GBLC  &GRESPFX
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
         LCLC  &P,&STKV
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&MACNME  SETC  'AS2RESTK'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '03/01/2005'
&STKV    SETC  'RESA'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         AIF   (T'&CMD EQ 'O').ERR0010
         AIF   ('&CMD' NE 'PUSH' AND '&CMD' NE 'POP').ERR0020
         AIF   (T'&STK EQ 'O').ESTK020
&STKV    SETC  '&STK'
.*       AIF   (T'&STK EQ 'F' OR T'&STK EQ 'A').ESTK030
.*       AGO   .ERR0030
.ESTK020 ANOP
         AIF   ('&GRESPFX' EQ '').ESTK030
&P       SETC  '&GRESPFX'
.ESTK030 ANOP
         AIF   (T'&PREFIX EQ 'O').ESTK040
&P       SETC  '&PREFIX'
.ESTK040 ANOP
         AIF   ('&CMD' EQ 'PUSH').ESTK100
         AIF   ('&CMD' EQ 'POP').ESTK200
         AGO   .ERR0020
.ESTK100 ANOP  ***PUSH***
&LABEL   L     R2,&P.&STKV        LOAD CURRENT INDEX VALUE
         AHI   R2,4               INCR TO NEXT ENTRY
         ST    R2,&P.&STKV        SAVE NEW INDEX VALUE
         ST    RE,&P.&STKV.(R2)   SAVE REGISTER 14
         MEXIT
.ESTK200 ANOP  ***POP***
&LABEL   L     R2,&P.&STKV        LOAD CURRENT INDEX VALUE
         L     RE,&P.&STKV.(R2)   RESTORE REGISTER 14
         AHI   R2,-4              DECR TO PREVIOUS ENTRY
         ST    R2,&STKV           SAVE NEW INDEX VALUE
         MEXIT
.ERR0010 ANOP
         MNOTE 08,'&MACNME - COMMAND PARAMETER WAS OMITTED, MACRO EXPAN+
               SION IGNORED'
         AGO   .ESTK999
.ERR0020 ANOP
         MNOTE 08,'&MACNME - COMMAND &CMD IS INVALID, MACRO EXPANSION I+
               GNORED'
         AGO   .ESTK999
.ERR0030 ANOP
         MNOTE 08,'&MACNME - REGISTER STACK VECTOR MUST BE ALIGNED ON A+
                FULL WORD, MACRO EXPANSION IGNORED'
.ESTK999 ANOP
         MEND
         MACRO
&NAME    AS2PLIST &PP1,&PP2,                                           +
               &MF=
.* --------------------------------------------------------- *
.* ARCHITECTURE SERVICES
.* ASSEMBLER MACRO, CODE
.*
.* MACRO ID: AS2PLIST
.*    TITLE: BUILD PARAMETER LIST
.*     DATE: 03/01/2005
.*
.*     DESC: THIS MACRO IS USED TO BUILD A PARM LIST AND
.*           RETURN THE ADDRESS IN GPR1.
.*
.*  OPTIONS:
.*                   +-<-,--------+
.*     >>-AS2PLIST-(-+------------+-),VL,------------------>
.*                   +-POSITIONAL-+
.*
.*      >-+-----------------+-----------------------------><
.*        +-MF=-+-----------+
.*              +-(E,LABEL)-+
.*              +-I---------+
.*              +-(L,LABEL)-+
.*
.*  REG USE: R0: WORK REG
.*           R1: ADDR OF PARAMETER LIST
.*
.* --------------------------------------------------------- *
.*
.* XX/XX/XXXX
.* --------------------------------------------------------- *
         LCLA  &NPP1,&KPP1,&CNTR,&OFFSET
         LCLC  &CORPNME,&MACNME,&MACVER,&MACREL,&MACDATE
&CORPNME SETC  'BUZZARD CREEK TECH'
&MACNME  SETC  'AS2PLIST'
&MACVER  SETC  '0001'
&MACREL  SETC  '.000'
&MACDATE SETC  '03/01/2005'
         MNOTE '* &CORPNME MACRO=&MACNME LEVEL=&MACVER&MACREL - &MACDAT+
               E'
         AIF   (T'&PP1 EQ 'O').ERR0010
&CNTR    SETA  1
&NPP1    SETA  N'&PP1   NBR OF PARAMETERS
&KPP1    SETA  K'&PP1   NBR OF BYTES IN THE STRING
         AIF   ('&PP1'(1,1) EQ '(' AND '&PP1'(&KPP1,1) EQ ')').PLST040
         MNOTE 12,'1ST POS OPERAND NEEDS TO BE IN LIST FORMAT'
         MNOTE 12,'ENCLOSE IN PARENTHESES'
         MEXIT
.PLST040 ANOP
         AIF   (T'&MF EQ 'O').PLST200       INLINE
         AIF   ('&MF(1)' EQ 'I').PLST200    INLINE
         AIF   ('&MF(1)' EQ 'L').PLST300    BUILT STORAGE LIST
         AIF   ('&MF(1)' EQ 'E').PLST400    EXEC FROM STORAGE LIST
         MNOTE 12,'MF=, SET TO INVALID VALUE'
         MEXIT
.PLST200 ANOP
.*       GENERATE INLINE FORM
&OFFSET  SETA  ((&NPP1+1)/2)*8+4
         CNOP  0,4
         BRAS  R1,*+&OFFSET
         DC    &NPP1.A(0)
.PLST210 ANOP
         LA    R0,&PP1(&CNTR)
         ST    R0,(&CNTR-1)*4(,R1)
         AIF   (&CNTR EQ &NPP1).PLST220
&CNTR    SETA  &CNTR+1
         AGO   .PLST210
.PLST220 ANOP
         AIF   (T'&PP2 EQ 'O').PLST490
         AIF   ('&PP2' NE 'VL').PLST490
         OI    (&CNTR-1)*4(R1),X'80'
.PLST290 ANOP
         MEXIT
.PLST300 ANOP
.*       GENERATE STORAGE ITEMS FOR LIST
         AIF   (T'&NAME EQ 'O').ERR0300
.PLST310 ANOP
&NAME    DC    A(&PP1(&CNTR))
         AGO   .PLST320
.PLST315 ANOP
         DC    A(&PP1(&CNTR))
.PLST320 ANOP
         AIF   (&CNTR EQ &NPP1).PLST330
&CNTR    SETA  &CNTR+1
         AGO   .PLST315
.PLST330 ANOP
.PLST390 ANOP
         MEXIT
.PLST400 ANOP
         AIF   (K'&MF LT 2).ERR0400
.*       GENERATE EXECUTION FORM
         LA    R0,&PP1(&CNTR)
         ST    R0,&MF(2)+(&CNTR-1)*4
         AIF   (&CNTR EQ &NPP1).PLST410
&CNTR    SETA  &CNTR+1
         AGO   .PLST400
.PLST410 ANOP
         AIF   (T'&PP2 EQ 'O').PLST490
         AIF   ('&PP2' NE 'VL').PLST490
         OI    &MF(2)+(&CNTR-1)*4,X'80'
         LA    R1,&MF(2)
.PLST490 ANOP
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'1ST POS OPERAND MISSING'
         AGO   .ERR0900
.ERR0040 ANOP
         MNOTE 12,'KEYWORD PARAMETER MF= IS MISSING'
         AGO   .ERR0900
.ERR0300 ANOP
         MNOTE 12,'MACRO EXPANSION REQUIRES A LABEL'
         AGO   .ERR0900
.ERR0400 ANOP
         MNOTE 12,'MF=(E,LABEL), LABEL IS MISSING'
.ERR0900 ANOP
         MNOTE 12,'MACRO TERMINATED'
         MEND
         TITLE 'LOADLIB UTILITY TO PROVIDE LANGUAGE INFORMATION'
* --------------------------------------------------------- *
* THIS PROGRAM IS USED TO COLLECT INFORMATION ABOUT LOADLIB
* MEMBERS. AMODE/RMODE, BINDER OPTIONS, BATCH/CICS, COMPILER,
* API, SIZE, COBOL COMPILER OPTIONS, COBOL DIVISION
* INFORMATION (VERBS ETC).
*
* FOR COBOL COMPILER OPTIONS REPORT SPECIFY:
* PARM='O.../RPTOPTS '
*
* ALL LOADLIB MEMBERS WILL BE REPORTED
*
* PARM='O.../RPTOPTS '
*
* DD MBRLIST WILL POINT TO THE LIST OF MEMBERS TO REPORT ON
*
* PARM='O.../RPTOPTS,SELECT(DATA(24),  CMPR2,...)
*
* PRINT ONLY THOSE MEMBERS THAT MATCH SELECTED COMPILER OPTIONS
*
* ***
*
* FOR COBOL DIVISION INFORMATION (VERBS ETC.) REPORT SPECIFY:
* PARM='O.../RPTVERB '
*
* ALL LOADLIB MEMBERS WILL BE REPORTED
*
* PARM='O.../RPTVERB '
*
* DD MBRLIST WILL POINT TO THE LIST OF MEMBERS TO REPORT ON
*
* ***
*
* WHERE O = LE RUN-TIME OPTIONS OR BLANK
*
* --------------------------------------------------------- *
*  1. LE initial code points to PPA1
*  2. PPA1 points to PPA2
*  3. PPA2 points to timestamp
*     COBOL V3 & V4
*       x'00' 00 - timestamp 20-bytes: YYYYMMDDHHMMSSVVRRMM
*       x'14' 20 - ccsid H 2-bytes
*       x'16' 22 - 2-bytes
*       x'18' 24 - SIB 28:29 2-bytes
*       x'1A' 26 - year window H 2-bytes
*       x'1C' 28 - SIB 1:23 23-bytes
*       x'33' 51 - signature level 1-byte
*       x'34' 52 - nbr of Data Division stmts F 4-bytes
*       x'38' 56 - nbr of Procedure Division stmts F 4-bytes
*       x'3C' 60 - SIB 24:27 4-bytes
*       x'40' 64 - LVLINFO C 4-bytes
*     COBOL V5
*       x'00' 00 - timestamp 20-bytes: YYYYMMDDHHMMSSVVRRMM
*       x'14' 20 - length of SIB H 2-bytes (48)
*         x'16' 22 - ccsid H 2-bytes
*         x'18' 24 - arch level 1-byte
*         x'19' 25 - opt level 1-byte
*         x'1A' 26 - SIB 28:29 2-bytes
*         x'1C' 28 - 2-bytes
*         x'1E' 30 - SIB 1:23 23-bytes
*         x'35' 53 - signature level 1-byte
*         x'36' 54 - nbr of Data Division stmts F 4-bytes
*         x'3A' 58 - nbr of Procedure Division stmts F 4-bytes
*         x'3E' 62 - SIB 24:27 4-bytes
*       x'42' 66 - LVLINFO C 4-bytes
*     COBOL V6
*       x'00' 00 - timestamp 20-bytes: YYYYMMDDHHMMSSVVRRMM
*       x'14' 20 - length of SIB H 2-bytes (48)
*         x'16' 22 - ccsid H 2-bytes
*         x'18' 24 - arch level 1-byte
*         x'19' 25 - opt level 1-byte
*         x'1A' 26 - SIB 28:29 2-bytes
*         x'1C' 28 - SIB 30:31 2-bytes
*         x'1E' 30 - SIB 1:23 23-bytes
*         x'35' 53 - signature level 1-byte
*         x'36' 54 - nbr of Data Division stmts F 4-bytes
*         x'3A' 58 - nbr of Procedure Division stmts F 4-bytes
*         x'3E' 62 - SIB 24:27 4-bytes
*       x'42' 66 - build level C 8-bytes
*
* --------------------------------------------------------- *
*************************************************************
*           DATE     PROGRAMMER  DESCRIPTION
*------------------------------------------------------------
*        2017/11/08   lks SUPPORT FOR COBOL V4.1 THRU V6.2
*************************************************************
         GBLC  &C,&P
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'SSLEANAL'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
         EJECT
         CEECAA
         EJECT
         CEEDSA
         SPACE 2
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC STORAGE AREA
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
UDSA     EQU   *              USER DSA
         SPACE 1
CLRBEG   EQU   *
DWORD1   DS    D              DOUBLE WORD WORK AREA
DWORD2   DS    D
         ORG   DWORD2
FWORD21  DS    F
FWORD22  DS    F
         ORG   FWORD22
HWORD221 DS    H
HWORD222 DS    H
         SPACE 1
PARMLIST DS    16F            PARM LIST WORK AREA
         SPACE 1
RESTACK  DS    6F             REGISTER 14 STACK
         SPACE 1
ABCODE   DS    F              ABEND CODE
         SPACE 1
EPADDR   DS    F              ENTRY POINT ADDR
LPADDR   DS    F              LOAD POINT ADDR
LBADDR   DS    F              LAST BYTE ADDR
LMSIZE   DS    F              LOAD MODULE SIZE
SCANLEN  DS    F              SCAN LENGTH (LBADDR - EPADDR +1)
@PPA1    DS    F              LE PPA1 ADDR
@PPA2    DS    F              LE PPA2 ADDR
@TSTAMP  DS    F              TIME STAMP ADDR
@PSI     DS    F              PROGRAM SIGNATURE INFO BYTES ADDR
LMFLAGS  DS    0XL06
LMFLAG1  DS    XL01           ..MODE/LANGUAGE
#LMA31   EQU   X'80'          ....AMODE 31
#LMAANY  EQU   X'40'          ....AMODE ANY
#LMRANY  EQU   X'20'          ....RMODE ANY
#LMOTH   EQU   X'08'          ....OTHER NON EXEC
#LMMAP   EQU   X'04'          ....CICS MAPS
LMFLAG2  DS    XL01           ..LANGUAGE (CONT)
#LMCOB4  EQU   X'80'          ....COBOL V5, V6
#LMCOB3  EQU   X'40'          ....COBOL MVS, OS/390, Enterprise
#LMCOB2  EQU   X'20'          ....COBOL II
#LMCOB1  EQU   X'10'          ....COBOL VS
#LMASM   EQU   X'08'          ....ASSEMBLER
#LMCOB   EQU   X'04'          ....COBOL
#LMOOP   EQU   X'02'          ....OBJ ORIENTED PGM
#LMLE3   EQU   X'01'          ....LE ENABLED LANGUAGE
LMFLAG3  DS    XL01           ..LANGUAGE (CONT)
#LMLESTD EQU   X'80'          ....LE STD ROUTINE
#LMLEFLK EQU   X'40'          ....LE FAST LINK ROUTINE
#LMLEOPL EQU   X'40'          ....LE OPLINK ROUTINE (COBOL V5)
#LMLEI3E EQU   X'20'          ....LE IEEE ROUTINE
#LMLESTR EQU   X'10'          ....LE CEESTART EP
#LMLEXPL EQU   X'08'          ....LE XPLINK ROUTINE
#LMC370  EQU   X'04'          ....C/370 ROUTINE
LMFLAG4  DS    XL01           ..LANGUAGE (CONT)
#LMDBUG  EQU   X'40'          ....DEBUG
#LMCEL   EQU   X'20'          ....COMMON EXECUTION LIBRARY
#LMCCPP  EQU   X'10'          ....C/C++
#LMFORT  EQU   X'08'          ....FORTRAN
#LMDCE   EQU   X'04'          ....DCE
#LMPLI   EQU   X'02'          ....PL/I
#LMSCKT  EQU   X'01'          ....SOCKETS
LMFLAG5  DS    XL01           ..TRANSLATORS
#LMEXCI  EQU   X'20'          ....EXCI
#LMCICS  EQU   X'10'          ....CICS
#LMAPI2  EQU   X'02'          ....API NEW ALFA
#LMAPI1  EQU   X'01'          ....API OLD ALFA
LMFLAG6  DS    XL01           ..BINDER ATTRIBUTES
#LMOL    EQU   X'10'          ....ONLY LOADABLE
#LMRFRSH EQU   X'08'          ....REFRESH
#LMRENT  EQU   X'04'          ....RENT
#LMRUSE  EQU   X'02'          ....REUSE
#LMSCTR  EQU   X'01'          ....SCATTER FORMAT
CICSLVL  DS    CL03           CICS LEVEL
         SPACE 1
TSTAMP   DS    0CL20          TIME STAMP
TSCYMD   DS    CL08           ..CCYYMMDD
TSHMS    DS    CL06           ..HHMMSS
TSVRM    DS    CL06           ..VVRRMM
SIG_BLEN DS    H              SIGNATURE BYTE LENGTH
SIG_CDPG DS    H              ..CCSID - CP(nnnn)
SIG_YRW  DS    H              ..YEAR WINDOW
SIG_ARCH DS    XL1            ..ARCH(nn)
SIG_OPT  DS    XL1            ..OPT(n)
SIG_LVL  DS    XL1            ..COBOL Signature level
SIG_SIB  DS    0XL31          ..COBOL Signature bits
SIG_SIB1 DS    XL23           ....1:23
SIG_SIB2 DS    XL4            ....24:27
SIG_SIB3 DS    XL2            ....28:29
SIG_SIB4 DS    XL2            ....30:31
SIG_BINF DS    CL8            build/level info
SIG_DDS# DS    F              DATA DIVISION STATEMENT COUNT
SIG_PDS# DS    F              PROCEDURE DIVISION STATEMENT COUNT
         SPACE 1
         DS    0F
FDBKINFO DS    0XL12          FEEDBACK INFORMATION
         ORG   FDBKINFO
FCCDE    DS    0F             ..FEEDBACK CODE
FCSEV    DS    H              ....SEVERITY CODE
FCMSG    DS    H              ....MESSAGE NUMBER
FCFLAGS  DS    XL01           ..
*              NN......       ....CASE
*              ..NNN...       ....SEVERITY
*              .....NNN       ....CONTROL
FCFID    DS    CL03           ..FACILITY ID
FCISI    DS    F              ..INSTANCE-SPECIFIC INFO
FDBKHOLD DS    XL12           FEEDBACK HOLD
         DS    0D
         SPACE 1
#CLRLEN  EQU   *-CLRBEG
         SPACE 2
WAREA    DS    CL32           WORK AREA
         SPACE 2
@HEAPSTG DS    A              ADDR OF HEAP STORAGE
@PDSDIR  DS    A              ADDR OF PDS DIRECTORY
@TIOT    DS    A              ADDR OF TIOT
         SPACE 1
@ACTLST  DS    A              ADDR OF ACTION LIST
@ACTLSTZ DS    A              ADDR OF END OF ACTION LIST
         SPACE 1
PGMPLIST DS    A              ORIGINAL R1 VALUE
DIRPTR   DS    2F             PDS DIR REC POSITION
LDREFID  DS    F              LOAD REF ID
         SPACE 1
LINECNT  DS    PL3
         SPACE 1
PDSFLAG  DS    CL01           1 IF INPUT PDS 0 IF DD MBRLIST
REQDDNME DS    CL08           LOOKUP DDNAME IN TIOT
BYTE     DS    CL01           HOLD AREA FOR CHAR FREQ
SEPBYTE  DS    CL01           FIELD SEPARATOR BYTE
RPTTYPE  DS    CL08           REPORT TYPE (RPTOPTS, RPTVERB)
ACTION   DS    CL08           ACTION/VERB NAME (SELECT)
PARMPARM DS    CL80           PARM PARAMETER ON EXEC STMT
         SPACE 2
MBRNMLEN DS    F              LENGTH OF THE MEMBER NAME
MBRNM    DS    CL08           MEMBER NAME
CDPG     DS    CL04           CODEPAGE(nnnn)
YEARWIN  DS    ZL04           YW(nnnn)
ARCHLVL  DS    ZL02           ARCH(nn)
OPTLVL   DS    ZL01           OPT(n)
COBSIGLV DS    ZL03           SIGLVL(nnn)
CDDSTMT  DS    ZL08           DDSTMT(nnnnnnnn)
CPDSTMT  DS    ZL08           PDSTMT(nnnnnnnn)
SRVLVL   DS    XL02,CL255     SERVICE LEVEL
EPNAME   DS    XL02,CL255     ENTRY POINT NAME
         SPACE 1
SRCHLST  DS    XL256
         SPACE 1
SRCHTAB  DS    XL256          TRT TABLE FOR SEARCH
         SPACE 1
PDSNAME  DS    CL44
         SPACE 2
* --------------------------------------------------------- *
* ERROR COLLECTION INFORMATION
* --------------------------------------------------------- *
         SPACE 1
E1SRVC   DS    CL12           LE SERVICE NAME
EMSGSTR  DS    XL2,CL80
         SPACE 2
* --------------------------------------------------------- *
* HEADING LINE
* --------------------------------------------------------- *
         SPACE 1
H1LINE   DS    0CL133       HEADING LINE 1
         DS    CL01
H1RTDTE  DS    CL10           ..RUN TIME DATE
         ORG   H1LINE+15
H1RTMSG  DS    CL18           ..RUN TIME LITERAL
         ORG   H1LINE+34
H1LEVRM  DS    CL05           ..VNN.RNN.MNN
         ORG   H1LINE+49
H1OSMSG  DS    CL08           ..PLATFORM LITERAL
         ORG   H1LINE+58
H1OPSYS  DS    CL12           ..OP/SYS VALUE
         ORG   H1LINE+L'H1LINE
         SPACE 1
H2LINE   DS    0CL133       HEADING LINE 2
         DS    CL01
H2TEXT1  DS    CL15           ..TEXT "PDS/E LOADLIB: "
H2DSNAME DS    CL44           ..LOAD LIB NAME
         ORG   H2LINE+60
H2TEXT2  DS    CL8            ..TEXT "SELECT: "
H2PARM   DS    CL65           ..PARM STATEMENT
         ORG   H2LINE+L'H2LINE
         SPACE 2
* --------------------------------------------------------- *
* DETAIL LINES
* --------------------------------------------------------- *
         SPACE 1
SRCHOBJ  EQU   *,1,C'C'
         SPACE 1
D1LINE   DS    0CL133       DETAIL LINE 1
         DS    CL01
D1PGMNME DS    CL08           ..PROGRAM NAME
         ORG   D1LINE+10
D1AMODE  DS    CL03           ..AMODE 24/31/ANY
D1SLASH1 DS    CL01
D1RMODE  DS    CL03           ..RMODE 24/ANY
         ORG   D1LINE+18
D1BNDR1  DS    CL02           ..ONLY LOADABLE (OL)
D1SLASH2 DS    CL01
D1BNDR2  DS    CL02           ..REFRESHABLE (RF)
D1SLASH3 DS    CL01
D1BNDR3  DS    CL02           ..RE-ENTRANT (RN)
D1SLASH4 DS    CL01
D1BNDR4  DS    CL02           ..REUSE (RU)
D1SLASH5 DS    CL01
D1BNDR5  DS    CL02           ..SCATTER STORAGE (SC)
         ORG   D1LINE+35
D1LE     DS    CL01           ..LE ENVIRONMENT (S,F,X)
         ORG   D1LINE+37
D1LANG   DS    CL04           ..LANGUAGE
         ORG   D1LANG+L'D1LANG-1
D1LANVER DS    CL01           ..LANGUAGE VERSION
         DS    CL01
D1VRM    DS    CL06           ..COMPILER VRM
         ORG   D1LINE+50
D1CICS   DS    CL03           ..CICS LEVEL
         ORG   D1LINE+55
D1API    DS    CL01           ..API LEVEL
         ORG   D1LINE+58
D1CMPLDT DS    CL08           ..COMPILE CCYYMMDD
         ORG   D1LINE+67
D1CMPLTM DS    CL06           ..COMPILE HHMMSS
         ORG   D1LINE+74
D1SIZE   DS    CL05           ..LOAD MODULE SIZE
         ORG   D1LINE+81
D1OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         SPACE 1
D2LINE   DS    0CL133       DETAIL LINE 1 CONTINUED
         DS    CL01
         ORG   D2LINE+81
D2OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
D3LINE   DS    0CL133       DETAIL LINE 2 CONTINUED
         DS    CL01
         ORG   D3LINE+81
D3OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
D4LINE   DS    0CL133       DETAIL LINE 3 CONTINUED
         DS    CL01
         ORG   D4LINE+81
D4OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
D5LINE   DS    0CL133       DETAIL LINE 4 CONTINUED
         DS    CL01
         ORG   D5LINE+81
D5OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
D6LINE   DS    0CL133       DETAIL LINE 5 CONTINUED
         DS    CL01
         ORG   D6LINE+81
D6OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
D7LINE   DS    0CL133       DETAIL LINE 6 CONTINUED
         DS    CL01
         ORG   D7LINE+81
D7OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
D8LINE   DS    0CL133       DETAIL LINE 7 CONTINUED
         DS    CL01
         ORG   D8LINE+81
D8OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
D9LINE   DS    0CL133       DETAIL LINE 8 CONTINUED
         DS    CL01
         ORG   D9LINE+81
D9OPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
DALINE   DS    0CL133       DETAIL LINE 9 CONTINUED
         DS    CL01
         ORG   DALINE+81
DAOPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
DBLINE   DS    0CL133       DETAIL LINE 10 CONTINUED
         DS    CL01
         ORG   DBLINE+81
DBOPTS   DS    CL52           ..COBOL COMPILE OPTIONS
         ORG
         SPACE 1
SRCHOBJZ EQU   *
         SPACE 1
#UDSALEN EQU   *-UDSA
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         EJECT
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              BAR 2 OF STATIC STORAGE
R6       EQU   6              BAR OF PSI
R7       EQU   7              WORK REG
R8       EQU   8              BAR OF PLINE POSITION
R9       EQU   9              BAR OF STATIC STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             LE CAA BAR
RD       EQU   13             ADDR OF RSA AND DSA
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         EJECT
* --------------------------------------------------------- *
* ENTRY ROUTINE
* --------------------------------------------------------- *
         SPACE 1
&C       SETC  'A'
&P       SETC  '&C._'
SSLEANAL CEEENTRY ,                                                    +
               PPA=&P.PPA,                                             +
               AUTO=#DSALEN,                                           +
               MAIN=YES,                                               +
               EXECOPS=YES,                                            +
               PARMREG=1,                                              +
               BASE=(10,11),                                           +
               PLIST=HOST
         SPACE 2
         XR    RF,RF
         USING CEECAA,RC
         L     R9,=A(STATIC)
         L     R5,=A(STATIC+4096)
         USING STATIC,R9,R5
         J     INIT0000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=&CSECT - &SYSDATC &SYSTIME'
&P.PPA   CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=YES,                                               +
               EXTPROC=YES,                                            +
               TSTAMP=YES,                                             +
               PEP=YES,                                                +
               INSTOP=YES,                                             +
               EPNAME=&CSECT,                                          +
               VER=04,             CHG THIS FOR REWRITES               +
               REL=01,             CHG THIS FOR PERM FIXES             +
               MOD=00,             CHG THIS FOR TEMP FIXES             +
               DSA=YES
         SPACE 2
* --------------------------------------------------------- *
* INITALIZATION ROUTINES
* --------------------------------------------------------- *
         SPACE 1
INIT0000 EQU   *
         ST    R1,PGMPLIST         SAVE ORIGINAL R1
         SPACE 1
         LA    R0,CLRBEG
         LA    R1,#UDSALEN
         LR    R2,R0
         XR    R3,R3
         MVCL  R0,R2               CLEAR STORAGE
         SPACE 1
         LR    R1,RD               PASS OWN DSA ADDR
         L     RF,=A(INIT1)
         BASR  RE,RF
         C     RF,=F'12'           Q. VALID RC
         JH    EXIT0100            A. NO, EXIT
         B     *+4(RF)
         J     MAIN0000            0 - CONTINUE
         J     EXIT0100            4 - FATAL ERROR
         J     EXIT0100            8 - FATAL ERROR
         J     EXIT0100           12 - FATAL ERROR
         EJECT
* --------------------------------------------------------- *
* MAIN LINE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
MAIN0000 EQU   *
         XC    CLRBEG(#CLRLEN),CLRBEG
         SPACE 1
         MVI   D1LINE,C' '
         MVC   D1LINE+1(L'D1LINE-1),D1LINE
         MVC   D2LINE,D1LINE
         MVC   D3LINE,D1LINE
         MVC   D4LINE,D1LINE
         MVC   D5LINE,D1LINE
         MVC   D6LINE,D1LINE
         MVC   D7LINE,D1LINE
         MVC   D8LINE,D1LINE
         MVC   D9LINE,D1LINE
         MVC   DALINE,D1LINE
         MVC   DBLINE,D1LINE
         MVC   TSTAMP,D1LINE
         XC    SIG_BLEN,SIG_BLEN
         XC    SIG_CDPG,SIG_CDPG
         XC    SIG_YRW,SIG_YRW
         XC    SIG_ARCH,SIG_ARCH
         XC    SIG_OPT,SIG_OPT
         XC    SIG_LVL,SIG_LVL
         XC    SIG_SIB,SIG_SIB
         XC    SIG_BINF,SIG_BINF
         XC    SIG_DDS#,SIG_DDS#
         XC    SIG_PDS#,SIG_PDS#
         XC    SRVLVL(2),SRVLVL
         MVI   SRVLVL+2,C' '
         MVC   SRVLVL+3(255-1),SRVLVL+2
         XC    EPNAME(2),EPNAME
         MVI   EPNAME+2,C' '
         MVC   EPNAME+3(255-1),EPNAME+2
         SPACE 1
MAIN1000 EQU   *
         CLI   PDSFLAG,C'1'        Q. ACCESS PDS/E DIR
         JE    MAIN1010            A. YES,
         BRAS  RE,PMBR0000         A. NO, ACCESS DD MBRLIST
         J     MAIN1020
MAIN1010 EQU   *
         BRAS  RE,PDIR0000
MAIN1020 EQU   *
         CLI   MBRNM,X'FF'         Q. END OF MEMBER LIST
         JE    MAIN9000            A. YES
         BRAS  RE,LOAD0000
         BRAS  RE,INFO0000
         BRAS  RE,SCAN0000
         CLC   RPTTYPE,=CL8'RPTOPTS'
         JNE   MAIN5000
         L     RF,=A(SCAN1)
         BASR  RE,RF
MAIN5000 EQU   *
         CLC   RPTTYPE,=CL8'RPTVERB'
         JNE   MAIN6000
         L     RF,=A(SCAN2)
         BASR  RE,RF
MAIN6000 EQU   *
         BRAS  RE,ALFA0000
         BRAS  RE,CICS0000
         BRAS  RE,DLET0000
         BRAS  RE,FRMT0000
         SPACE 1
         CLI   ACTION,C' '         Q. ANY USER SELECTIONS
         JE    MAIN6010            A. NO, GO PRINT
         LR    R1,RD               PASS OWN DSA
         L     RF,=A(SRCH1)
         BASR  RE,RF
         C     RF,=F'12'           Q. VALID RC
         JH    MAIN9000            A. NO, EXIT
         B     *+4(RF)
         J     MAIN6010            00-FOUND PRINT
         J     MAIN6020            04-NOT FOUND DONT PRINT
         J     MAIN9000            08-FAILURE
         J     MAIN9000            12-FAILURE
         SPACE 1
MAIN6010 EQU   *
         BRAS  RE,PRNT0000
MAIN6020 EQU   *
         CLI   MBRNM,X'FF'         Q. ANY MORE
         JE    MAIN9000            A. NO, FINISH
         J     MAIN0000
         SPACE 1
MAIN9000 EQU   *
         EJECT
* --------------------------------------------------------- *
* EXIT ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         L     R2,@HEAPSTG
         LA    R2,PRNTDCB-BLOWSTG(,R2)
         XC    PARMLIST(4),PARMLIST
         OI    PARMLIST,X'80'
         SPACE 1
         CLOSE ((2)),                                                  +
               MF=(E,PARMLIST),                                        +
               MODE=31
         LTR   RF,RF               Q. ANY ERRORS
         JNZ   &P.MSG1500          A. YES
         SPACE 1
EXIT0100 EQU   *
         CEETERM ,                                                     +
               RC=(15),                                                +
               MF=(E,PARMLIST)
         EJECT
* --------------------------------------------------------- *
* LE LOAD ROUTINE
* --------------------------------------------------------- *
         SPACE 1
LOAD0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         LA    R1,8
         ST    R1,MBRNMLEN
         XC    FWORD21,FWORD21     MVS-ONLY, THREAD
         AS2PLIST (MBRNMLEN,MBRNM,FWORD21,LDREFID,EPADDR,FDBKINFO),    +
               VL,MF=(E,PARMLIST)
         L     RF,CEECAACELV
         L     RF,#LOAD(,RF)
         MVC   E1SRVC,=CL12'CEEPLOD2,031'
**       CALL  CEEPLOD2
         BASR  RE,RF
         LA    RE,MAIN0000         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000          A. YES
         SPACE 1
LOAD9000 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         EJECT
* --------------------------------------------------------- *
* LE DELETE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
DLET0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         LA    R1,8
         ST    R1,MBRNMLEN
         AS2PLIST (LDREFID,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,CEECAACELV
         L     RF,#DELETE(,RF)
         MVC   E1SRVC,=CL12'CEEPDEL2,032'
**       CALL  CEEPDEL2
         BASR  RE,RF
         LA    RE,DLET9000         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000          A. YES
         SPACE 1
DLET9000 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         EJECT
* --------------------------------------------------------- *
* LE LOAD MODULE QUERY INFO ROUTINE
* --------------------------------------------------------- *
         SPACE 1
INFO0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         AS2PLIST (LDREFID,MBRNMLEN,MBRNM,LPADDR,EPADDR,LMSIZE,        +
               FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,CEECAACELV
         L     RF,#QUERY(,RF)
         MVC   E1SRVC,=CL12'CEEPQLD ,033'
**       CALL  CEEPQLD
         BASR  RE,RF
         LA    RE,INFO9000         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000          A. YES
         L     R0,LPADDR           COMPUTE
         A     R0,LMSIZE           ..MODULE
         BCTR  R0,R0               ..LAST BYTE
         ST    R0,LBADDR           ..ADDRESS
         S     R0,EPADDR           COMPUTE
         N     R0,=X'7FFFFFFF'     ..TURN OFF HIGH ORDER BIT
         AHI   R0,1                ..SCAN
         ST    R0,SCANLEN          ..LENGTH
         SPACE 1
INFO9000 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         EJECT
* --------------------------------------------------------- *
* PROCESS PDS/PDSE DIRECTORY
* --------------------------------------------------------- *
         SPACE 1
PDIR0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         CLI   MBRNM,X'FF'         Q. ANY MORE MEMBERS
         JE    PDIR9000            A. NO, FINISH
         OC    DIRPTR,DIRPTR       Q. ALREADY HAVE A DIR REC
         JZ    PDIR1000            A. NO
         LM    R1,R2,DIRPTR
         J     PDIR7000
         SPACE 1
PDIR1000 EQU   *
         L     R1,@HEAPSTG
         LA    R1,PDSEDCB-BLOWSTG(,R1)
         GET   (1)
*        REG 1 - ADDR OF DIRECTORY BLOCK
         LH    R2,0(,R1)           GET LENGTH OF DIR REC
         AR    R2,R1               COMPUTE LAST BYTE
         BCTR  R2,0
         ST    R2,DIRPTR+4         SAVE PARM 2
         LA    R1,2(,R1)           BUMP OVER LENGTH
         USING PDS2,R1
         SPACE 1
PDIR1200 EQU   *
         ST    R1,DIRPTR           SAVE PARM 1
         CLI   0(R1),X'FF'         Q. END OF DIR
         JE    PDIR8000            A. YES
         TM    PDS2INDC,PDS2ALIS   Q. ALIAS ENTRY
         JO    PDIR7000            A. YES
         TM    PDS2ATR1,PDS2EXEC   Q. PGM EXECUTABLE
         JNO   PDIR7000            A. NO
         LA    R0,#XLISTC          GET XCLUDE TBL COUNT
         LA    R4,XLIST            GET XCLUDE TBL ADDR
PDIR1210 EQU   *
         CLC   0(L'XENTRY,R4),PDS2NAME Q. TOO BE XCLUDED
         JE    PDIR7000                A. YES
         LA    R4,L'XENTRY(,R4)    POINT TO NEXT
         BRCT  R0,PDIR1210         Q. LOOKING FOR MORE
*                                  A. NO
PDIR1220 EQU   *
         MVC   MBRNM,PDS2NAME      SAVE MODULE NAME
         TRT   MBRNM,INVALCH       Q. MBR NAME OK
         LM    R1,R2,DIRPTR        RESTORE R1,R2
         JNZ   PDIR7000            A. NO
PDIR1230 EQU   *
         TM    PDS2FTB2,PDSLRMOD   Q. RMODE 31
         JNO   PDIR1240            A. NO
         OI    LMFLAG1,#LMRANY     A. YES
PDIR1240 EQU   *
         TM    PDS2FTB2,PDSMAMOD   Q. AMODE ANY/31
         JZ    PDIR1250            A. NO
         JO    PDIR1242            A. YES, BOTH ANY/31
         OI    LMFLAG1,#LMA31      A. MIXED, SET AMODE 31
         J     PDIR1250
PDIR1242 EQU   *
         OI    LMFLAG1,#LMAANY     A. YES, SET AMODE ANY
PDIR1250 EQU   *
         TM    PDS2ATR1,PDS2RENT   Q. REENTERANT
         JNO   PDIR1260            A. NO
         OI    LMFLAG6,#LMRENT     A. YES
PDIR1260 EQU   *
         TM    PDS2ATR1,PDS2REUS   Q. REUSE
         JNO   PDIR1270            A. NO
         OI    LMFLAG6,#LMRUSE     A. YES
PDIR1270 EQU   *
         TM    PDS2ATR1,PDS2LOAD   Q. ONLY LOADABLE
         JNO   PDIR1280            A. NO
         OI    LMFLAG6,#LMOL       A. YES
PDIR1280 EQU   *
         TM    PDS2ATR1,PDS2SCTR   Q. SCATTER FORMAT
         JNO   PDIR1290            A. NO
         OI    LMFLAG6,#LMSCTR     A. YES
PDIR1290 EQU   *
         TM    PDS2ATR2,PDS2REFR   Q. REFRESHABLE
         JNO   PDIR1300            A. NO
         OI    LMFLAG6,#LMRFRSH    A. YES
PDIR1300 EQU   *
         J     PDIR9000
         SPACE 1
PDIR7000 EQU   *
         XR    R3,R3
         IC    R3,PDS2INDC         GET NBR OF HWD
         SLL   R3,27               GET RID OF 3 BYTES 3 BITS
         SRL   R3,26               DOUBLE IT
         LA    R1,12(R3,R1)        POINT TO NEXT ENTRY
         CR    R1,R2               Q. LAST ENTRY
         JL    PDIR1200            A. NO
         J     PDIR1000            READ NEXT DIR REC
         SPACE 1
PDIR8000 EQU   *
         MVI   MBRNM,X'FF'         INFORM OF LAST
         MVC   DIRPTR,=F'-1'
         SPACE 1
         L     R2,@HEAPSTG
         LA    R2,PDSEDCB-BLOWSTG(,R2)
         XC    PARMLIST(4),PARMLIST
         OI    PARMLIST,X'80'
         SPACE 1
         CLOSE ((2)),                                                  +
               MF=(E,PARMLIST),                                        +
               MODE=31
         LTR   RF,RF               Q. ANY ERRORS
         JNZ   &P.MSG1400          A. YES
         SPACE 1
PDIR9000 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         SPACE 1
         DROP  R1
         EJECT
* --------------------------------------------------------- *
* PROCESS DD MBRLIST
* --------------------------------------------------------- *
         SPACE 1
PMBR0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         CLI   MBRNM,X'FF'         Q. ANY MORE MEMBERS
         JE    PMBR9000            A. NO, FINISH
         SPACE 1
PMBR1000 EQU   *
         L     R1,@HEAPSTG
         LA    R1,CARDDCB-BLOWSTG(,R1)
         GET   (1)
*        REG 1 - ADDR OF MBRLIST RECORD (CARD)
         CLI   0(R1),C'*'          Q. COMMENT
         JE    PMBR1000            A. YES, BYPASS
         TRT   0(60,R1),VALIDCH    Q. FIND 1ST BYTE OF NAME
         JNE   PMBR1010            A. GOT A HIT
         JE    PMBR1000            A. NO HITS
PMBR1010 EQU   *
         STC   R2,SEPBYTE
         CLI   SEPBYTE,X'02'       Q. NUMERIC
         JE    PMBR1000            A. YES, NOT VALID
         LR    R4,R1               SAVE BEGIN ADDR
         TRT   0(9,R1),SEPTAB      Q. FIND END OF NAME
         JNE   PMBR1020            A. GOT A HIT
         JE    PMBR1000            A. NO HITS
PMBR1020 EQU   *
         STC   R2,SEPBYTE
         SR    R1,R4               COMPUTE LENGTH OF NAME
         JZ    PMBR1000
         BCTR  R1,R0               COMPUTE EXEC LENGTH
         EX    R1,MVCMBRNM
**       MVC   MBRNM(0),0(R4)
PMBR1300 EQU   *
         J     PMBR9000
         SPACE 1
PMBR8000 EQU   *
         MVI   MBRNM,X'FF'         INFORM OF LAST
         SPACE 1
         L     R2,@HEAPSTG
         LA    R2,CARDDCB-BLOWSTG(,R2)
         XC    PARMLIST(4),PARMLIST
         OI    PARMLIST,X'80'
         SPACE 1
         CLOSE ((2)),                                                  +
               MF=(E,PARMLIST),                                        +
               MODE=31
         LTR   RF,RF               Q. ANY ERRORS
         JNZ   &P.MSG1600          A. YES
         SPACE 1
PMBR9000 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         SPACE 1
MVCMBRNM MVC   MBRNM(0),0(R4)
         EJECT
* --------------------------------------------------------- *
* FORMAT LINE ONE
* --------------------------------------------------------- *
         SPACE 1
FRMT0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
FRMT0100 EQU   *
         MVC   D1PGMNME,MBRNM
         MVI   D1SLASH1,C'/'
         MVC   D1AMODE,=C'ANY'
         TM    LMFLAG1,#LMAANY     Q. AMODE ANY
         JO    FRMT0110            A. YES
         MVC   D1AMODE,=C' 31'
         TM    LMFLAG1,#LMA31      Q. AMODE 31
         JO    FRMT0110            A. YES
         MVC   D1AMODE,=C' 24'     A. NO
FRMT0110 EQU   *
         MVC   D1RMODE,=C'ANY'
         TM    LMFLAG1,#LMRANY     Q. RMODE 31
         JO    FRMT0120            A. YES
         MVC   D1RMODE,=C'24 '     A. NO
FRMT0120 EQU   *
         MVI   D1SLASH2,C'-'
         MVI   D1SLASH3,C'-'
         MVI   D1SLASH4,C'-'
         MVI   D1SLASH5,C'-'
         SPACE 1
         TM    LMFLAG6,#LMOL       Q. ONLY LOAD
         JNO   FRMT0122            A. NO
         MVC   D1BNDR1,=C'OL'
FRMT0122 EQU   *
         TM    LMFLAG6,#LMRFRSH    Q. REFRESHABLE
         JNO   FRMT0124            A. NO
         MVC   D1BNDR2,=C'RF'
FRMT0124 EQU   *
         TM    LMFLAG6,#LMRENT     Q. RE-ENTRANT
         JNO   FRMT0126            A. NO
         MVC   D1BNDR3,=C'RN'
FRMT0126 EQU   *
         TM    LMFLAG6,#LMRUSE     Q. RE-USE
         JNO   FRMT0128            A. NO
         MVC   D1BNDR4,=C'RU'
FRMT0128 EQU   *
         TM    LMFLAG6,#LMSCTR     Q. SCATTER FORMAT
         JNO   FRMT0130            A. NO
         MVC   D1BNDR5,=C'SC'
         SPACE 1
FRMT0130 EQU   *
         MVI   D1LE,C'N'
         TM    LMFLAG2,#LMLE3      Q. LE
         JNO   FRMT0140            A. NO
         MVI   D1LE,C'S'
         TM    LMFLAG3,#LMLESTD    Q. LE STD ROUTINE
         JO    FRMT0140            A. YES
         MVI   D1LE,C'F'
         TM    LMFLAG3,#LMLEFLK    Q. LE FAST LINK ROUTINE
         JO    FRMT0140            A. YES
         MVI   D1LE,C'E'
         TM    LMFLAG3,#LMLEI3E    Q. LE IEEE ROUTINE
         JO    FRMT0140            A. YES
         MVI   D1LE,C'R'
         TM    LMFLAG3,#LMLESTR    Q. LE CEESTART EP
         JO    FRMT0140            A. YES
         MVI   D1LE,C'X'
         TM    LMFLAG3,#LMLEXPL    Q. LE XPLINK ROUTINE
         JO    FRMT0140            A. YES
         MVI   D1LE,C'C'
         TM    LMFLAG3,#LMC370     Q. C/370 ROUTINE
         JO    FRMT0140
         MVI   D1LE,C'Y'           UNKNOWN LE
FRMT0138 EQU   *
         SPACE 1
FRMT0140 EQU   *
         TM    LMFLAG1,X'0F'       Q. KNOWN LANG
         JZ    FRMT0142            A. NO
         TM    LMFLAG1,#LMOTH      Q. OTHER
         JNO   FRMT0142            A. NO
         MVC   D1LANG,=C'OTH '     A. YES
         J     FRMT0160
FRMT0142 EQU   *
         TM    LMFLAG1,#LMMAP      Q. MAP
         JNO   FRMT0144            A. NO
         MVC   D1LANG,=C'MAP '     A. YES
         J     FRMT0160
FRMT0144 EQU   *
         TM    LMFLAG2,X'FC'       Q. KNOWN LANG
         JZ    FRMT0150            A. NO
         TM    LMFLAG2,#LMASM      Q. LANG ASM
         JNO   FRMT0146            A. NO
         MVC   D1LANG,=C'ASM '
         J     FRMT0160
FRMT0146 EQU   *
         MVC   D1LANG,=C'COB '
         MVI   D1LANVER,C'4'
         TM    LMFLAG2,#LMCOB4     Q. COBOL V5
         JO    FRMT0160            A. YES, SKIP
         MVI   D1LANVER,C'3'
         TM    LMFLAG2,#LMCOB3     Q. COBOL MVS, OS/390, Enterprise
         JO    FRMT0160            A. YES, SKIP
         MVI   D1LANVER,C'2'
         TM    LMFLAG2,#LMCOB2     Q. COBOL II
         JO    FRMT0160            A. YES, SKIP
         MVI   D1LANVER,C'1'
         TM    LMFLAG2,#LMCOB1     Q. COBOL/VS
         JO    FRMT0160            A. YES, SKIP
         MVI   D1LANVER,C' '
         TM    LMFLAG2,#LMCOB      Q. SOME LE COMPLIANT COBOL
         JO    FRMT0160            A. YES
         MVI   D1LANG,C' '
         MVC   D1LANG+1(L'D1LANG-1),D1LANG
         J     FRMT0160
FRMT0150 EQU   *
         OC    LMFLAG4,LMFLAG4     Q. KNOWN LANG
         JZ    FRMT0160            A. NO
         MVC   D1LANG,=C'CEL '
         TM    LMFLAG4,#LMCEL      Q. COMMON EXEC LIBR
         JO    FRMT0160            A. YES
         MVC   D1LANG,=C'C/++'
         TM    LMFLAG4,#LMCCPP     Q. C/C++
         JO    FRMT0160            A. YES
         MVC   D1LANG,=C'FOR '
         TM    LMFLAG4,#LMFORT     Q. FORTRAN
         JO    FRMT0160            A. YES
         MVC   D1LANG,=C'DCE '
         TM    LMFLAG4,#LMDCE      Q. DCE
         JO    FRMT0160            A. YES
         MVC   D1LANG,=C'PLI '
         TM    LMFLAG4,#LMPLI      Q. PL/I
         JO    FRMT0160            A. YES
         MVC   D1LANG,=C'TCP '
         TM    LMFLAG4,#LMSCKT     Q. SOCKETS / TCP/IP
         JO    FRMT0160            A. YES
         MVC   D1LANG,=C'DBUG'
         TM    LMFLAG4,#LMDBUG     Q. DEBUG
         JO    FRMT0160            A. YES
         MVC   D1LANG,=C'N/A '
         SPACE 1
FRMT0160 EQU   *
         MVC   D1VRM,TSVRM
         OC    LMFLAG5,LMFLAG5     Q. ANY TRANSLATORS
         JZ    FRMT0170            A. NO, SKIP
         TM    LMFLAG5,#LMCICS+#LMEXCI  Q. CICS
         JZ    FRMT0164            A. NO, SKIP
         MVC   D1CICS,CICSLVL
         CLC   LPADDR,EPADDR
         JNE   FRMT0164
         MVI   D1CICS-1,C'*'
FRMT0164 EQU   *
         TM    LMFLAG5,X'03'       Q. API
         JZ    FRMT0170            A. NO, SKIP
         MVI   D1API,C'2'
         TM    LMFLAG5,#LMAPI2     Q. API 2
         JO    FRMT0170            A. YES
         MVI   D1API,C'1'
         TM    LMFLAG5,#LMAPI1     Q. API 1
         JO    FRMT0170            A. YES
         MVI   D1API,C'Y'
FRMT0170 EQU   *
         MVC   D1CMPLDT,TSCYMD
         MVC   D1CMPLTM,TSHMS
         L     R0,LMSIZE
         C     R0,=F'1024'         Q. MULTI OF 1K
         JL    FRMT0174
         MVI   D1SIZE+L'D1SIZE,C'K'
         A     R0,=F'1024'
         S     R0,=F'1'
         SRA   R0,10               DIVIDE BY 1024
FRMT0174 EQU   *
         CVD   R0,DWORD1
         MVC   D1SIZE-1(6),=XL6'402020202120'
         ED    D1SIZE-1(6),DWORD1+5
         SPACE 1
         AS2RESTK POP,RESTACK
         BR    RE                  RETURN
         EJECT
* --------------------------------------------------------- *
* PRINT ROUTINE
* --------------------------------------------------------- *
         SPACE 1
PRNT0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         CP    LINECNT,=P'51'      Q. NEED HEADINGS
         JNH   PRNT0100
         SPACE 1
         L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'H1LINE,R2),H1LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'H2LINE,R2),H2LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'H3LINE,R2),H3LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         ZAP   LINECNT,=P'4'
         SPACE 1
PRNT0100 EQU   *
         TM    LMFLAG2,#LMCOB      Q. COBOL
         JO    PRNT0102            A. YES, BYPASS
         MVI   D1OPTS,C' '
         MVC   D1OPTS+1(L'D1OPTS-1),D1OPTS
PRNT0102 EQU   *
         L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D1LINE,R2),D1LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0200 EQU   *
         TM    LMFLAG2,#LMCOB      Q. COBOL
         JNO   PRNT9000            A. NO, BYPASS
         SPACE 1
         CLI   D2OPTS,C' '
         JNE   PRNT0204
         CLC   D2OPTS+1(L'D2OPTS-1),D2OPTS
         JE    PRNT9000
PRNT0204 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D2LINE,R2),D2LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0300 EQU   *
         CLI   D3OPTS,C' '
         JNE   PRNT0304
         CLC   D3OPTS+1(L'D3OPTS-1),D3OPTS
         JE    PRNT9000
PRNT0304 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D3LINE,R2),D3LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0400 EQU   *
         CLI   D4OPTS,C' '
         JNE   PRNT0404
         CLC   D4OPTS+1(L'D4OPTS-1),D4OPTS
         JE    PRNT9000
PRNT0404 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D4LINE,R2),D4LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0500 EQU   *
         CLI   D5OPTS,C' '
         JNE   PRNT0504
         CLC   D5OPTS+1(L'D5OPTS-1),D5OPTS
         JE    PRNT9000
PRNT0504 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D5LINE,R2),D5LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0600 EQU   *
         CLI   D6OPTS,C' '
         JNE   PRNT0604
         CLC   D6OPTS+1(L'D6OPTS-1),D6OPTS
         JE    PRNT9000
PRNT0604 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D6LINE,R2),D6LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0700 EQU   *
         CLI   D7OPTS,C' '
         JNE   PRNT0704
         CLC   D7OPTS+1(L'D7OPTS-1),D7OPTS
         JE    PRNT9000
PRNT0704 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D7LINE,R2),D7LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0800 EQU   *
         CLI   D8OPTS,C' '
         JNE   PRNT0804
         CLC   D8OPTS+1(L'D8OPTS-1),D8OPTS
         JE    PRNT9000
PRNT0804 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D8LINE,R2),D8LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0900 EQU   *
         CLI   D9OPTS,C' '
         JNE   PRNT0904
         CLC   D9OPTS+1(L'D9OPTS-1),D9OPTS
         JE    PRNT9000
PRNT0904 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'D9LINE,R2),D9LINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0A00 EQU   *
         CLI   DAOPTS,C' '
         JNE   PRNT0A04
         CLC   DAOPTS+1(L'DAOPTS-1),DAOPTS
         JE    PRNT9000
PRNT0A04 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'DALINE,R2),DALINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT0B00 EQU   *
         CLI   DBOPTS,C' '
         JNE   PRNT0B04
         CLC   DBOPTS+1(L'DBOPTS-1),DBOPTS
         JE    PRNT9000
PRNT0B04 EQU   *
**       L     R2,@HEAPSTG
         LA    R1,PRNTDCB-BLOWSTG(,R2)
         MVC   PLINE-BLOWSTG(L'DBLINE,R2),DBLINE
         LA    R0,PLINE-BLOWSTG(,R2)
         PUT   (1),(0)
         SPACE 1
         AP    LINECNT,=P'1'
         SPACE 1
PRNT9000 EQU   *
         AS2RESTK POP,RESTACK
         BR    RE                  RETURN
         EJECT
* --------------------------------------------------------- *
* EAA ALFA TABLE LOOKUP
* THE ALFA TABLE CAN RESIDE IN FRONT OF THE LOAD MODULE
* ENTRY POINT OR RESIDE AT ENTRY POINT +160.
* --------------------------------------------------------- *
         SPACE 1
ALFA0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         TM    LMFLAG2,#LMCOB4+#LMCOB3+#LMCOB2  Q. POSSIBLE ALFA 2
         JM    ALFA1000                 A. YES
         J     ALFA2000
         SPACE 1
ALFA1000 EQU   *
         CLC   LPADDR,EPADDR       Q. ANYTHING AHEAD OF EP
         JNL   ALFA9000            A. NO
         L     R1,EPADDR
         S     R1,=F'16'           BACKUP FOR EYEBALL CHECK
         C     R1,LPADDR           Q. ANYTHING AHEAD OF EP
         JL    ALFA9000            A. NO
         CLC   ALFA2EYE,8(R1)      Q. NEW ALFA TABLE
         JNE   ALFA9000            A. NO
         OI    LMFLAG5,#LMAPI2
         J     ALFA9000
         SPACE 1
ALFA2000 EQU   *
         L     R0,SCANLEN          LOAD SCAN LENGTH
         C     R0,=F'500'          Q. ENOUGH ROOM FOR ALFA
         JL    ALFA9000            A. NO
         C     R0,=F'680'          Q. SIZE > LIMIT
         JH    ALFA2010            A. YES
         S     R0,=F'169'
         J     ALFA2100
ALFA2010 EQU   *
         L     R0,=F'500'          SET LIMIT TO MAX
ALFA2100 EQU   *
         L     R1,EPADDR
         LA    R1,160(,R1)         POINT TO WHERE ALFA CAN BE
ALFA2110 EQU   *
         CLC   ALFA1EYE,0(R1)      Q. OLD ALFA TABLE
         JE    ALFA2120            A. YES
         LA    R1,1(,R1)           BUMP UP
         BRCT  R0,ALFA2110         Q. ANY MORE BYTES LEFT
         J     ALFA9000            A. NO
ALFA2120 EQU   *
         OI    LMFLAG5,#LMAPI1
         J     ALFA9000
         SPACE 1
ALFA9000 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         EJECT
* --------------------------------------------------------- *
* CICS TRANSLATOR LOCATE
* IT IS ASSUMED THAT THE CICS STUB WILL BE THE FIRST
* MODULE WITHIN THE LOAD MODULE.
* --------------------------------------------------------- *
         SPACE 1
CICS0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
         CLC   LPADDR,EPADDR       Q. ANYTHING AHEAD OF EP
         JNL   CICS2000            A. NO
         L     R1,LPADDR
         SPACE 1
CICS1000 EQU   *
         CLC   CICSCEYE,0(R1)      Q. CICS TRANSLATOR
         JE    CICS1010            A. YES
         CLC   CICSAEYE,0(R1)      Q. CICS TRANSLATOR
         JE    CICS1020            A. YES
         CLC   CICSIEYE,0(R1)      Q. CICS TRANSLATOR
         JE    CICS1030            A. YES
         CLC   CICSPEYE,0(R1)      Q. CICS TRANSLATOR
         JE    CICS1040            A. YES
         CLC   EXCIXEYE,0(R1)      Q. EXCI INTERFACE
         JE    CICS1050            A. YES
         LA    R1,1(,R1)
         C     R1,EPADDR           Q. REACHED EP YET
         JL    CICS1000            A. NO
         J     CICS9000            A. YES
CICS1010 EQU   *
         OI    LMFLAG5,#LMCICS
         MVC   CICSLVL,L'CICSCEYE-1(R1)
         OI    LMFLAG2,#LMCOB
         J     CICS9000
CICS1020 EQU   *
         OI    LMFLAG5,#LMCICS
         MVC   CICSLVL,L'CICSAEYE-1(R1)
         OI    LMFLAG2,#LMASM
         J     CICS9000
CICS1030 EQU   *
         OI    LMFLAG5,#LMCICS
         MVC   CICSLVL,L'CICSIEYE-1(R1)
         J     CICS9000
CICS1040 EQU   *
         OI    LMFLAG5,#LMCICS
         MVC   CICSLVL,L'CICSPEYE-1(R1)
         J     CICS9000
         SPACE 1
CICS1050 EQU   *
         OI    LMFLAG5,#LMEXCI
         MVC   CICSLVL,12(R1)
         MVI   CICSLVL,C'X'
         J     CICS9000
         SPACE 1
CICS2000 EQU   *
         L     R1,LPADDR
         CLC   CICSAEYE,0(R1)      Q. CICS TRANSLATOR
         JNE   CICS3000            A. NO, BYPASS
         OI    LMFLAG5,#LMCICS
         MVC   CICSLVL,L'CICSAEYE-1(R1)
         TM    LMFLAG2,X'FC'       Q. ALREADY KNOW
         JNZ   CICS9000            A. YES
         OI    LMFLAG2,#LMASM
         J     CICS9000
         SPACE 1
CICS3000 EQU   *
         SPACE 1
CICS9000 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         EJECT
* --------------------------------------------------------- *
* SCAN LOAD MODULE TO DETERMINE TYPE
* --------------------------------------------------------- *
         SPACE 1
SCAN0000 EQU   *
         AS2RESTK PUSH,RESTACK
         SPACE 1
SCAN0100 EQU   *
         TM    EPADDR,X'80'        Q. AMODE 31
         JNO   SCAN0110            A. NO
         NI    EPADDR,X'7F'
         CLI   PDSFLAG,C'1'        Q. INPUT PDS
         JE    SCAN0110            A. YES, BYPASS
         OI    LMFLAG1,#LMA31      A. YES
SCAN0110 EQU   *
         TM    LPADDR,X'7F'        Q. RMODE 31
         JZ    SCAN0120            A. NO
         CLI   PDSFLAG,C'1'        Q. INPUT PDS
         JE    SCAN0120            A. YES, BYPASS
         OI    LMFLAG1,#LMRANY     A. YES
SCAN0120 EQU   *
         SPACE 1
SCAN0200 EQU   *
         L     R1,EPADDR
         CLC   SCANLEN,=A(30+L'C370EYE) Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0210            A. NO
         CLC   C370EYE,4(R1)       Q. C/370 ROUTINE
         JNE   SCAN0210            A. NO
         OI    LMFLAG3,#LMC370
         OI    LMFLAG2,#LMLE3
         SPACE 1
         LA    R2,4(,R1)           POINT TO PPA1
         ST    R2,@PPA1
         SPACE 1
         L     R3,4(,R2)           POINT TO PPA2
         ST    R3,@PPA2
         SPACE 1
         ICM   R3,8,0(R2)          Q. PICK UP OFFSET TO NAME
         JZ    SCAN0300            A. NO NAME
         SRL   R3,24
         AR    R3,R1
         ICM   R4,12,0(R3)         Q. GET LENGTH OF EP NAME
         JZ    SCAN0300            A. ZERO
         SRL   R4,16
         STCM  R4,3,EPNAME         SAVE STRING LENGTH
         BCTR  R4,R0               SUBT 1 FOR EXEC
         EX    R4,MVCEPNME
**       MVC   EPNAME+2,2(R3)      SAVE ENTRY POINT NAME
         J     SCAN0300
SCAN0210 EQU   *
         CLC   SCANLEN,=A(30+L'LE3EYE)  Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0220            A. NO
         CLC   LE3EYE,4(R1)        Q. LE STD ROUTINE
         JNE   SCAN0220            A. NO
         OI    LMFLAG3,#LMLESTD
         SPACE 1
         L     R2,12(,R1)          POINT TO PPA1
         AR    R2,R1
         ST    R2,@PPA1
         CLI   1(R2),X'CE'         Q. STILL LOOK LIKE LE
         JNE   SCAN0380            A. NO
         OI    LMFLAG2,#LMLE3      A. YES
         L     R3,4(,R2)           POINT TO PPA2
         ST    R3,@PPA2
         SPACE 1
         ICM   R3,8,0(R2)          Q. PICK UP OFFSET TO NAME
         JZ    SCAN0300            A. NO NAME
         SRL   R3,24
         AR    R3,R2
         ICM   R4,12,0(R3)         Q. GET LENGTH OF EP NAME
         JZ    SCAN0300            A. ZERO
         SRL   R4,16
         STCM  R4,3,EPNAME         SAVE STRING LENGTH
         BCTR  R4,R0               SUBT 1 FOR EX
         EX    R4,MVCEPNME
**       MVC   EPNAME+2,2(R3)      SAVE ENTRY POINT NAME
         J     SCAN0300
SCAN0220 EQU   *
         CLC   SCANLEN,=A(30+L'LE3EYE1) Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0230            A. NO
         CLC   LE3EYE1,4(R1)       Q. LE FAST LINK OR OPLINK ROUTINE
*                                     ENTERPRISE COBOL V5 IS OPLINK
         JNE   SCAN0230            A. NO
         OI    LMFLAG3,#LMLEFLK
         L     R2,12(,R1)          POINT TO PPA1
         AR    R2,R1
         ST    R2,@PPA1
         CLI   1(R2),X'CE'         Q. STILL LOOK LIKE LE
         JNE   SCAN0380            A. NO
         OI    LMFLAG2,#LMLE3      A. YES
         L     R3,4(,R2)           POINT TO PPA2
         AR    R3,R1
         ST    R3,@PPA2
         SPACE 1
         ICM   R3,8,0(R2)          Q. PICK UP OFFSET TO NAME
         JZ    SCAN0300            A. NO NAME
         SRL   R3,24
         SLL   R3,1                multiply by 2
         AR    R3,R2
         ICM   R4,12,0(R3)         Q. GET LENGTH OF EP NAME
         JZ    SCAN0300            A. ZERO
         SRL   R4,16
         STCM  R4,3,EPNAME         SAVE STRING LENGTH
         BCTR  R4,R0               SUBT 1 FOR EX
         EX    R4,MVCEPNME
**       MVC   EPNAME+2,2(R3)      SAVE ENTRY POINT NAME
         J     SCAN0300
SCAN0230 EQU   *
         CLC   SCANLEN,=A(40+L'LE3EYE3) Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0240            A. NO
         CLC   LE3EYE3,28(R1)      Q. LE CEESTART EP
         JNE   SCAN0240            A. NO
         OI    LMFLAG3,#LMLESTR
         CLI   20(R1),X'CE'        Q. STILL LOOK LIKE LE
         JNE   SCAN0380            A. NO
         OI    LMFLAG2,#LMLE3      A. YES
         SPACE 1
         MVC   EPNAME(2),=H'8'
         MVC   EPNAME+2(8),28(R1)  SAVE ENTRY POINT NAME
         XR    R0,R0
         IC    R0,22(,R1)          PICK UP VERSION
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  WAREA(3),DWORD1+6(2)
         MVC   TSVRM(2),WAREA+1
         IC    R0,23(,R1)          PICK UP RELEASE
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  WAREA(3),DWORD1+6(2)
         MVC   TSVRM+2(2),WAREA+1
         LA    R2,21(,R1)
         J     SCAN0340
SCAN0240 EQU   *
         CLC   SCANLEN,=A(30+L'XPLKEYE1) Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0248                  A. NO
         CLC   PGMB2,0(R1)         Q. LE XPLINK CEESTART
         JNE   SCAN0248            A. NO
         CLC   PGMB2,4(R1)
         JNE   SCAN0248
         CLC   PGMSTM,8(R1)
         JNE   SCAN0248
         CLC   PGMBALR,12(R1)
         JNE   SCAN0248
         CLC   PGMB,14(R1)
         JNE   SCAN0248
         CLC   XPLKEYE,18(R1)
         JNE   SCAN0248
         CLC   XPLKEYE1,21(R1)
         JNE   SCAN0244
         OI    LMFLAG2,#LMLE3
         OI    LMFLAG4,#LMCCPP
         J     SCAN0900
SCAN0244 EQU   *
         OI    LMFLAG2,#LMLE3
         OI    LMFLAG1,#LMOTH
         J     SCAN0900
SCAN0248 EQU   *
         CLC   LPADDR,EPADDR       Q. ANYTHING AHEAD OF EP
         JNL   SCAN0250            A. NO
         S     R1,=F'16'           BACKUP FOR EYEBALL CHECK
         C     R1,LPADDR           Q. ANYTHING AHEAD OF EP
         JL    SCAN0380            A. NO
         CLC   LE3EYE2,0(R1)       Q. LE XPLINK ROUTINE
         JNE   SCAN0250            A. NO
         OI    LMFLAG2,#LMLE3
         CLI   7(R1),C'1'          Q. XPLINK ROUTINE
         JNE   SCAN0250            A. NO
         OI    LMFLAG3,#LMLEXPL
         L     R2,8(,R1)           POINT TO PPA1
         AR    R2,R1
         ST    R2,@PPA1
         L     R1,EPADDR
         CLI   1(R2),X'CE'         Q. STILL LOOK LIKE LE
         JNE   SCAN0250            A. NO
         OI    LMFLAG2,#LMLE3      A. YES
         L     R3,4(,R2)           POINT TO PPA2
         AR    R3,R1
         ST    R3,@PPA2
         J     SCAN0300
SCAN0250 EQU   *
         J     SCAN0380
         SPACE 1
SCAN0300 EQU   *
         L     R1,EPADDR
         L     R2,@PPA2            POINT TO PPA2
         CLI   3(R2),X'00'         Q. PPA2 FOR OLD C/C++
         JNE   SCAN0304            A. NO
         OI    LMFLAG3,#LMC370
**       OI    LMFLAG4,#LMCCPP
         J     SCAN0320
SCAN0304 EQU   *
         CLI   3(R2),X'01'         Q. PPA2 FOR LE STD
         JNE   SCAN0306            A. NO
         OI    LMFLAG3,#LMLESTD
         J     SCAN0320
SCAN0306 EQU   *
         CLI   3(R2),X'02'         Q. PPA2 FOR LE FASTLINK
         JNE   SCAN0308            A. NO
         OI    LMFLAG3,#LMLEFLK
         J     SCAN0320
SCAN0308 EQU   *
         CLI   3(R2),X'03'         Q. PPA2 FOR LE IEEE & CPLINK
         JNE   SCAN0312            A. NO
         OI    LMFLAG3,#LMLEI3E
         J     SCAN0320
SCAN0312 EQU   *
         CLI   3(R2),X'04'         Q. PPA2 FOR LE XPLINK
         JNE   SCAN0316            A. NO
         OI    LMFLAG3,#LMLEXPL
         J     SCAN0320
SCAN0316 EQU   *
         SPACE 1
SCAN0320 EQU   *
         ICM   R3,15,12(R2)        Q. POINT TO TIME STAMP
         JZ    SCAN0330            A. NO, BYPASS
         TM    LMFLAG3,#LMC370     Q. OLD C/C++
         JO    SCAN0322            A. YES,
         AR    R3,R2               A. NO,
SCAN0322 EQU   *
         ST    R3,@TSTAMP          SAVE ADDR OF TIME STAMP
         MVC   TSTAMP,0(R3)        SAVE TIME STAMP
         SPACE 1
SCAN0330 EQU   *
         CLI   0(R2),X'05'         Q. COBOL MVS, OS/390, Enterprise
         JNE   SCAN0334            A. NO, BYPASS
         OI    LMFLAG2,#LMCOB
         OI    LMFLAG2,#LMCOB3     SET COBOL MVS, OS/390, Enterprise
         MVC   SIG_CDPG,20(R3)     MOVE CCSID
         MVC   SIG_YRW,26(R3)      MOVE YEAR WINDOW
         MVC   SIG_LVL,51(R3)      COBOL SIGNATURE LEVEL
         MVC   SIG_SIB1,28(R3)     MOVE SIB 1:23
         MVC   SIG_SIB2,60(R3)     MOVE SIB 24:27
         MVC   SIG_SIB3,24(R3)     MOVE SIB 28:29
         MVI   SIG_BINF,C' '
         MVC   SIG_BINF+1(L'SIG_BINF-1),SIG_BINF
         MVC   SIG_BINF(4),64(R3)  MOVE LVLINFO
         MVC   SIG_DDS#,52(R3)     MOVE DATA DIVISION STMT CNT
         MVC   SIG_PDS#,56(R3)     MOVE PROCEDURE DIVISION STMT CNT
         J     SCAN0336
         SPACE 1
SCAN0334 EQU   *
         CLI   0(R2),X'04'         Q. COBOL Enterprise V5 or V6
         JNE   SCAN0340            A. NO,
         OI    LMFLAG2,#LMCOB      A. YES,
         OI    LMFLAG2,#LMCOB4     A. SET ENTERPRISE V5 or V6
         MVC   SIG_BLEN,20(R3)     MOVE LEN OF PSI
         MVC   SIG_CDPG,22(R3)     MOVE CCSID
         MVC   SIG_ARCH,24(R3)     MOVE ARCH(n)
         MVC   SIG_OPT,25(R3)      MOVE OPT(n)
         MVC   SIG_LVL,53(R3)      COBOL SIGNATURE LEVEL
         MVC   SIG_SIB1,30(R3)     MOVE SIB 1:23
         MVC   SIG_SIB2,62(R3)     MOVE SIB 24:27
         MVC   SIG_SIB3,26(R3)     MOVE SIB 28:29
         MVC   SIG_SIB4,28(R3)     MOVE SIB 30:31
         MVC   SIG_DDS#,54(R3)     MOVE DATA DIVISION STMT CNT
         MVC   SIG_PDS#,58(R3)     MOVE PROCEDURE DIVISION STMT CNT
         CLC   TSVRM(L'CVRM6#1),CVRM6#1 Q. >= COBOL V6.1
         JL    SCAN0335                 A. NO, BYPASS
         MVC   SIG_BINF,66(R3)     MOVE LVLINFO
         J     SCAN0336
SCAN0335 EQU   *
         MVC   SIG_BINF(4),66(R3)  MOVE BUILD INFO
         SPACE 1
SCAN0336 EQU   *
         LH    R0,SIG_CDPG         PICKUP CODEPAGE
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  DWORD2,DWORD1
         MVC   CDPG(L'CDPG),DWORD2+L'DWORD2-L'CDPG  SAVE CODEPAGE
         SPACE 1
         ICM   R0,12,SIG_YRW       PICKUP YEARWINDOW
         SRL   R0,16
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  DWORD2,DWORD1
         MVC   YEARWIN(L'YEARWIN),DWORD2+L'DWORD2-L'YEARWIN SAVE YW
         SPACE 1
         ICM   R0,8,SIG_ARCH       PICKUP ARCHLVL
         SRL   R0,24
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  DWORD2,DWORD1
         MVC   ARCHLVL(L'ARCHLVL),DWORD2+L'DWORD2-L'ARCHLVL  SAVE ARCH
         SPACE 1
         ICM   R0,8,SIG_OPT        PICKUP OPTLVL
         SRL   R0,24
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  DWORD2,DWORD1
         MVC   OPTLVL(L'OPTLVL),DWORD2+L'DWORD2-L'OPTLVL  SAVE OPTLVL
         SPACE 1
         ICM   R0,8,SIG_LVL        PICKUP COBOL SIGNATURE LEVEL
         SRL   R0,24
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  DWORD2,DWORD1
         MVC   COBSIGLV(L'COBSIGLV),DWORD2+L'DWORD2-L'COBSIGLV SAVE SIG
         SPACE 1
         ICM   R0,15,SIG_DDS#      PICKUP DATA DIVISION STMTS
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  DWORD2,DWORD1
         MVC   CDDSTMT(L'CDDSTMT),DWORD2+L'DWORD2-L'CDDSTMT
         ICM   R0,15,SIG_PDS#      PICKUP PROCEDURE DIVISION STMTS
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  DWORD2,DWORD1
         MVC   CPDSTMT(L'CPDSTMT),DWORD2+L'DWORD2-L'CPDSTMT
         J     SCAN0900
         SPACE 1
SCAN0340 EQU   *
         CLI   0(R2),X'0F'         Q. ASSEMBLER
         JNE   SCAN0350            A. NO
         OI    LMFLAG2,#LMASM      A. YES
         J     SCAN0900
         SPACE 1
SCAN0350 EQU   *
         CLI   0(R2),X'01'         Q. CEL
         JNE   SCAN0352
         OI    LMFLAG4,#LMCEL      A. YES
         J     SCAN0900
SCAN0352 EQU   *
         CLI   0(R2),X'03'         Q. C/C++
         JNE   SCAN0354
         OI    LMFLAG4,#LMCCPP     A. YES
         J     SCAN0900
SCAN0354 EQU   *
         CLI   0(R2),X'06'         Q. DEBUG TOOL
         JNE   SCAN0356
         OI    LMFLAG4,#LMDBUG     A. YES
         J     SCAN0900
SCAN0356 EQU   *
         CLI   0(R2),X'07'         Q. FORTRAN
         JNE   SCAN0358
         OI    LMFLAG4,#LMFORT     A. YES
         J     SCAN0900
SCAN0358 EQU   *
         CLI   0(R2),X'08'         Q. DCE
         JNE   SCAN0360
         OI    LMFLAG4,#LMDCE      A. YES
         J     SCAN0900
SCAN0360 EQU   *
         CLI   0(R2),X'0A'         Q. PL/I
         JE    SCAN0362            A. YES
         CLI   0(R2),X'0B'         Q. VISUALAGE PL/I
         JNE   SCAN0364            A. NO
SCAN0362 EQU   *
         OI    LMFLAG4,#LMPLI      A. YES
         J     SCAN0900
SCAN0364 EQU   *
         CLI   0(R2),X'0C'         Q. SOCKETS (TCP)
         JNE   SCAN0366
         OI    LMFLAG4,#LMSCKT     A. YES
         J     SCAN0900
SCAN0366 EQU   *
         J     SCAN0800
         SPACE 1
SCAN0380 EQU   *
         L     R1,EPADDR
         CLC   SCANLEN,=F'41'      Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0390            A. NO
         L     R0,LBADDR
         AHI   R0,-20
         CR    R0,R1               Q. LBADDR > EPADDR
         JL    SCAN0390            A. NO
         CLC   COB2EYE,13(R1)      Q. COBOL II
         JNE   SCAN0390            A. NO
         OI    LMFLAG2,#LMCOB      A. YES
         OI    LMFLAG2,#LMCOB2     A. YES
         MVI   TSVRM,C'0'
         MVC   TSVRM+1(L'TSVRM-1),TSVRM
         MVC   TSVRM+1(1),17(R1)   SAVE CMPL VRM
         MVC   TSVRM+3(1),19(R1)
         MVC   TSVRM+5(1),21(R1)
         MVC   TSCYMD+2(2),29(R1)  SAVE CMPL DATE
         MVC   TSCYMD+4(2),23(R1)
         MVC   TSCYMD+6(2),26(R1)
         MVC   TSHMS(2),32(R1)     SAVE CMPL TIME
         MVC   TSHMS+2(2),35(R1)
         MVC   TSHMS+4(2),38(R1)
         J     SCAN0900
         SPACE 1
SCAN0390 EQU   *
         L     R1,EPADDR
         CLC   SCANLEN,=A(40+L'COBVSEYE) Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0400            A. NO
         CLC   COBVSEYE,20(R1)     Q. COBOL VS
         JNE   SCAN0400            A. NO
         OI    LMFLAG2,#LMCOB      A. YES
         OI    LMFLAG2,#LMCOB1     A. YES
         J     SCAN0900
         SPACE 1
SCAN0400 EQU   *
         L     R1,EPADDR
         CLC   SCANLEN,=F'8'       Q. MODULE BIG ENOUGH TO LOOK
         JL    SCAN0490            A. NO
         TRT   0(8,R1),INVALCH     Q. VALID CHAR
         JNZ   SCAN0490            A. NO
         L     R3,EPADDR           SET COMPARAND
         BCTR  R3,R0
         L     R2,=F'-1'           SET INCREMENT VALUE
         LA    R1,7(,R3)           SET START ADDR
SCAN0410 EQU   *
         CLI   0(R1),C' '          Q. FIND LAST CHAR
         JNE   SCAN0430            A. YES
         BRXH  R1,R2,SCAN0410      Q. PAST THE FRONT
SCAN0420 EQU   *
         J     SCAN0490            A. YES
SCAN0430 EQU   *
         LR    R2,R1               SAVE NAME END ADDR
         LR    R3,R1               SAVE NAME END ADDR
         L     R1,EPADDR           POINT TO BEGINNING OF NAME
         SR    R2,R1               COMPUTE LENGTH OF NAME
         EX    R2,CLC2             Q. SAME NAMES
**       CLC   0(0,R1),MBRNM
         JE    SCAN0480            A. YES
         CLC   0(4,R1),MBRNM       Q. 1ST 4 CHAR THE SAME
         JE    SCAN0480            A. YES
         CLC   2(4,R1),MBRNM       Q. 3RD THRU 6TH CHAR THE SAME
         JE    SCAN0480            A. YES
         J     SCAN0490
SCAN0480 EQU   *
         OI    LMFLAG1,#LMMAP      LOOKS LIKE A CICS MAP
         J     SCAN0900
SCAN0490 EQU   *
         SPACE 1
SCAN0500 EQU   *
         L     R1,EPADDR
         L     R0,SCANLEN
         C     R0,=F'30'           Q. > 30
         JNH   SCAN0504            A. NO USE COMPUTED LEN
         L     R0,=F'30'           A. YES, USE 30
SCAN0504 EQU   *
         AR    R0,R1
SCAN0510 EQU   *
         CLC   PGMSTM,0(R1)        Q. STM INSTR (ASM)
         JE    SCAN0520            A. YES
         CLC   PGMB,0(R1)          Q. B INSTR (ASM)
         JE    SCAN0520            A. YES
         CLC   PGMB1,0(R1)         Q. B INSTR (ASM)
         JE    SCAN0520            A. YES
         CLC   PGML,0(R1)          Q. LOAD INSTR (ASM)
         JE    SCAN0520            A. YES
         CLC   PGMSTM1,0(R1)       Q. STM INSTR (ASM)
         JE    SCAN0520            A. YES
         CLC   PGMBALR,0(R1)       Q. BALR INSTR (ASM)
         JE    SCAN0520            A. YES
         CLC   PGMBAKR,0(R1)       Q. BAKR INSTR (ASM)
         JE    SCAN0520            A. YES
         LA    R1,2(,R1)           A. NO, BUMP UP
         CR    R1,R0               Q. BEYOND BNDS
         JL    SCAN0510            A. NO, LOOP BACK
         J     SCAN0590            A. YES, CONTINUE
SCAN0520 EQU   *
         OI    LMFLAG2,#LMASM
         J     SCAN0900
SCAN0590 EQU   *
         SPACE 1
SCAN0600 EQU   *
         SPACE 1
SCAN0800 EQU   *
         OI    LMFLAG1,#LMOTH      MUST BE OTHER
         SPACE 1
SCAN0900 EQU   *
         AS2RESTK POP,RESTACK
         SPACE 1
         BR    RE                  RETURN
         SPACE 1
MVCEPNME MVC   EPNAME+2(0),2(R3)   SAVE ENTRY POINT NAME
MVCSRLVL MVC   SRVLVL+2(0),22(R3)  SAVE SERVICE LEVEL
CLC2     CLC   0(0,R1),MBRNM
         EJECT
* --------------------------------------------------------- *
* ERROR MESSAGE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
&P.MSG0000 EQU *
         AS2RESTK PUSH,RESTACK     SAVE RETURN REG VALUE
         SPACE 1
         MVC   FDBKHOLD,FDBKINFO
         AS2PLIST (FDBKHOLD,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         J     &P.MSG8000
         SPACE 1
&P.MSG1100 EQU *
         AS2PLIST (MSG1100,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,034'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    EXIT0100            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1200 EQU *
         AS2PLIST (MSG1200,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,035'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    EXIT0100            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1400 EQU *
         AS2PLIST (MSG1400,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,036'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    EXIT0100            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1500 EQU *
         AS2PLIST (MSG1500,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,037'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    EXIT0100            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1600 EQU *
         AS2PLIST (MSG1600,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,037'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    EXIT0100            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG8000 EQU *              PRINT LE ERROR MSG
         L     RF,=V(CEEMSG)
         MVC   E1SRVC,=CL12'CEEMSG  ,038'
**       CALL  CEEMSG
         BASR  RE,RF               LINK TO
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    &P.MSG8200          A. NO
&P.MSG8100 EQU *
         CLC   FCSEV,=H'2'         Q. HOW SEVERE
         JL    &P.MSG8200          A. NOT BAD ENOUGH
&P.MSG8102 EQU *
         LA    R1,3754             NUMBER VALUE 'EAA'
         ST    R1,ABCODE           SET ABEND CODE
         LA    R1,1
         ST    R1,FWORD21          SET ABEND CLEAN UP
         AS2PLIST (ABCODE,FWORD21),VL,MF=(E,PARMLIST)
         L     RF,=V(CEE3ABD)
         MVC   E1SRVC,=CL12'CEE3ABD ,039'
**       CALL  CEE3ABD
         BASR  RE,RF               LINK TO
         SPACE 1
&P.MSG8200 EQU *
         MVC   EMSGSTR+2(L'E1MSG),E1MSG
         MVC   EMSGSTR+2+14(L'E1SRVC),E1SRVC
         LA    R1,L'E1MSG
         STCM  R1,3,EMSGSTR
         AS2PLIST (EMSGSTR,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,12               SET RC = 12 (FATAL)
         SPACE 1
&P.MSG8300 EQU *
         AS2RESTK POP,RESTACK      RESTORE RE VALUE
         BR    RE                  RETURN TO PROCESS
         SPACE 1
         DROP  R5,R9,RC,RD
         EJECT
* --------------------------------------------------------- *
* LOAD MODULE EXCLUDE LIST
* --------------------------------------------------------- *
         SPACE 1
XLIST    DS    0D
XENTRY   DC    CL08'$$$SPACE'
         DC    CL08'CGSIALST'
         DC    CL08'JUNK'
#XLISTL  EQU   *-XLIST
#XLISTC  EQU   #XLISTL/L'XENTRY
         SPACE 2
* --------------------------------------------------------- *
* LOCAL LITERAL POOL
* --------------------------------------------------------- *
         SPACE 1
#LOAD    EQU   X'0F6C'
#DELETE  EQU   X'0F70'
#QUERY   EQU   X'0F74'
         SPACE 2
         LTORG
         SPACE 1
         DROP  RA,RB
         TITLE 'COMMON STATIC STORAGE'
         DS    0D
STATIC   CSECT
STATIC   RMODE ANY
STATIC   AMODE ANY
         SPACE 2
* --------------------------------------------------------- *
* STATIC DATA
* --------------------------------------------------------- *
         SPACE 1
*        CEEBALCT             CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
FZERO    DC    F'0'
DEST     DC    F'2'           LE MESSAGE FILE
LE3EYE   DC    XL04'00C3C5C5' LE EYE CATCHER STD
LE3EYE1  DC    XL04'01C3C5C5' LE EYE CATCHER FASTLINK OR OPLINK
LE3EYE2  DC    XL07'00C300C500C500' LE EYE CATCHER XPLINK
LE3EYE3  DC    CL08'CEESTART' LE EYE CATCHER CEESTART CSECT
C370EYE  DC    XL02'14CE'     C/370 EYE CATCHER
XPLKEYE  DC    XL03'0014CE'   XPLINK EYE CATCHER
XPLKEYE1 DC    XL03'030310'   XPLINK EYE CATCHER
COB2EYE  DC    CL04' C2 '     COBOL II EYE CATCHER
COBVSEYE DC    CL04'VSR1'     COBOL VS EYE CATCHER
ALFA1EYE DC    CL08'**ALFA**' OLD API ALFA TABLE
ALFA2EYE DC    CL08'*2ALFA2*' NEW API ALFA TABLE
CICSAEYE DC    CL05'DFHYA'    CICS EYE CATCHER (ASSEMBLER)
CICSCEYE DC    CL05'DFHYC'    CICS EYE CATCHER (COBOL)
CICSIEYE DC    CL05'DFHYI'    CICS EYE CATCHER (LE COMPLIANT)
CICSPEYE DC    CL05'DFHYP'    CICS EYE CATCHER (PL/I)
EXCIXEYE DC    CL09'*DFHXCSTB' EXCI EYE CATCHER (GENERIC)
PGMSTM   DC    XL02'90EC'     STORE MULTIPLE INSTR
PGMSTM1  DC    XL01'90'       STORE MULTIPLE INSTR
PGMBALR  DC    XL01'05'       BALR INSTR
PGMBAKR  DC    XL04'B24000E0' BAKR INSTR
PGMB     DC    XL02'47F0'     BRANCH INSTR
PGMB1    DC    XL02'47FF'     BRANCH INSTR
PGMB2    DC    XL02'4700'     BRANCH INSTR
PGML     DC    XL02'58F0'     LOAD INSTR
         SPACE 1
*        COBOL COMPILER VVRRMM VALUES
CVRM2    DC    CL02'02'
CVRM3    DC    CL04'0304'
CVRM4    DC    CL02'04'
CVRM5#1  DC    CL06'050101'
CVRM5#2  DC    CL04'0502'
CVRM6#1  DC    CL04'0601'
CVRM6#2  DC    CL04'0602'
         SPACE 1
PGMNAME  DC    CL08'SSLEANAL'
         SPACE 1
DFLTRPT  DC    CL07'RPTOPTS'  DEFAULT REPORT TYPE (RPTOPTS,RPTVERB)
DFLTACT  DC    CL08'        ' DEFAULT ACTION (BLANK,SELECT)
PARSESEL DC    CL08'SELECT  '
         SPACE 1
         DS    0D
SEPTAB   DC    256X'00'
         ORG   SEPTAB
         ORG   SEPTAB+C' '
         DC    C' '
         ORG   SEPTAB+C'('
         DC    C'('
         ORG   SEPTAB+C')'
         DC    C')'
         ORG   SEPTAB+C','
         DC    C','
         ORG
         SPACE 1
         DS    0D
TRMTAB   DC    256X'00'
         ORG   TRMTAB
         ORG   TRMTAB+C')'
         DC    C')'
         ORG
         SPACE 1
         DS    0D
VALIDCH  DC    256X'00'
         ORG   VALIDCH+C' '
         DC    X'00'               BLANK
         ORG   VALIDCH+C'$'
         DC    X'01'               $
         ORG   VALIDCH+C'#'
         DC    2X'01'              #,@
         ORG   VALIDCH+C'A'
         DC    9X'01'              A,B,C,D,E,F,G,H,I
         ORG   VALIDCH+C'J'
         DC    9X'01'              J,K,L,M,N,O,P,Q,R
         ORG   VALIDCH+C'S'
         DC    8X'01'              S,T,U,V,W,X,Y,Z
         ORG   VALIDCH+C'0'
         DC    10X'02'             0,1,2,3,4,5,6,7,8,9
         ORG
         SPACE 1
         DS    0D
INVALCH  DC    256X'01'
         ORG   INVALCH+C' '
         DC    X'00'               BLANK
         ORG   INVALCH+C'$'
         DC    X'00'               $
         ORG   INVALCH+C'#'
         DC    2X'00'              #,@
         ORG   INVALCH+C'A'
         DC    9X'00'              A,B,C,D,E,F,G,H,I
         ORG   INVALCH+C'J'
         DC    9X'00'              J,K,L,M,N,O,P,Q,R
         ORG   INVALCH+C'S'
         DC    8X'00'              S,T,U,V,W,X,Y,Z
         ORG   INVALCH+C'0'
         DC    10X'00'             0,1,2,3,4,5,6,7,8,9
         ORG
         SPACE 1
         DS    0D
OPTSFREQ DC    256X'FF'
         ORG   OPTSFREQ+C' '
         DC    X'66'               BLANK
         ORG   OPTSFREQ+C'('
         DC    X'36'               (
         ORG   OPTSFREQ+C'$'
         DC    X'01'               $
         ORG   OPTSFREQ+C'*'
         DC    X'01'               *
         ORG   OPTSFREQ+C')'
         DC    X'36'               )
         ORG   OPTSFREQ+C'-'
         DC    X'14'               -
         ORG   OPTSFREQ+C'/'
         DC    X'11'               /
         ORG   OPTSFREQ+C'#'
         DC    X'01'               #
         ORG   OPTSFREQ+C'@'
         DC    X'01'               @
         ORG   OPTSFREQ+C'A'
         DC    X'36'               A
         ORG   OPTSFREQ+C'B'
         DC    X'17'               B
         ORG   OPTSFREQ+C'C'
         DC    X'23'               C
         ORG   OPTSFREQ+C'D'
         DC    X'31'               D
         ORG   OPTSFREQ+C'E'
         DC    X'38'               E
         ORG   OPTSFREQ+C'F'
         DC    X'18'               F
         ORG   OPTSFREQ+C'G'
         DC    X'15'               G
         ORG   OPTSFREQ+C'H'
         DC    X'14'               H
         ORG   OPTSFREQ+C'I'
         DC    X'23'               I
         ORG   OPTSFREQ+C'J'
         DC    X'11'               J
         ORG   OPTSFREQ+C'K'
         DC    X'11'               K
         ORG   OPTSFREQ+C'L'
         DC    X'26'               L
         ORG   OPTSFREQ+C'M'
         DC    X'33'               M
         ORG   OPTSFREQ+C'N'
         DC    X'66'               N
         ORG   OPTSFREQ+C'O'
         DC    X'60'               O
         ORG   OPTSFREQ+C'P'
         DC    X'33'               P
         ORG   OPTSFREQ+C'Q'
         DC    X'12'               Q
         ORG   OPTSFREQ+C'R'
         DC    X'34'               R
         ORG   OPTSFREQ+C'S'
         DC    X'34'               S
         ORG   OPTSFREQ+C'T'
         DC    X'53'               T
         ORG   OPTSFREQ+C'U'
         DC    X'25'               U
         ORG   OPTSFREQ+C'V'
         DC    X'13'               V
         ORG   OPTSFREQ+C'W'
         DC    X'12'               W
         ORG   OPTSFREQ+C'X'
         DC    X'15'               X
         ORG   OPTSFREQ+C'Y'
         DC    X'12'               Y
         ORG   OPTSFREQ+C'Z'
         DC    X'13'               Z
         ORG   OPTSFREQ+C'0'
         DC    X'01'               0
         ORG   OPTSFREQ+C'1'
         DC    X'14'               1
         ORG   OPTSFREQ+C'2'
         DC    X'16'               2
         ORG   OPTSFREQ+C'3'
         DC    X'14'               3
         ORG   OPTSFREQ+C'4'
         DC    X'12'               4
         ORG   OPTSFREQ+C'5'
         DC    X'01'               5
         ORG   OPTSFREQ+C'6'
         DC    X'01'               6
         ORG   OPTSFREQ+C'7'
         DC    X'01'               7
         ORG   OPTSFREQ+C'8'
         DC    X'01'               8
         ORG   OPTSFREQ+C'9'
         DC    X'01'               9
         ORG
         SPACE 1
         DS    0D
DSMSG    DC    CL15'PDS/E LOADLIB: '
PSMSG    DC    CL08'SELECT: '
RTMSG    DC    CL18'EXECUTING UNDER LE'
OSMSG    DC    CL08'PLATFORM'
E1MSG    DC    CL26'LE SERVICE IS xxxxxxxxxxxx'
*                                 +14
DATEMASK DC    XL10'04051106071100010203'
         SPACE 1
         DS    0D
OSTAB    DS    6CL12
         ORG   OSTAB
         DC    CL12'UNKNOWN     '  1
         DC    CL12'OS/2        '  2
         DC    CL12'OS/390 OR VM'  3
         DC    CL12'AS/400      '  4
         DC    CL12'VSE         '  5
         DC    CL12'UNKNOWN     '  >5
         SPACE 1
         DS    0D
RPTTAB   EQU   *,8,C'C'
RPTNTRY  DC    CL08'RPTOPTS'
         DC    CL08'RPTVERB'
RPTTABZ  EQU   (*-1),4,C'A'
RPTCTL   DC    A(RPTTAB,L'RPTNTRY,RPTTABZ)
         SPACE 1
         DS    0D
ACTTAB   EQU   *,8,C'C'
ACTNTRY  DC    CL08'SELECT'
         DC    CL08'SEL'
         DC    CL08'S'
ACTTABZ  EQU   (*-1),4,C'A'
ACTCTL   DC    A(ACTTAB,L'ACTNTRY,ACTTABZ)
         SPACE 1
         DS    0D
MSG1100  DC    Y(26),C'ERROR OPENING FILE APPLLIB'
MSG1200  DC    Y(26),C'ERROR OPENING FILE PRTOUTA'
MSG1300  DC    Y(26),C'ERROR OPENING FILE MBRLIST'
MSG1400  DC    Y(26),C'ERROR CLOSING FILE APPLLIB'
MSG1500  DC    Y(26),C'ERROR CLOSING FILE PRTOUTA'
MSG1600  DC    Y(26),C'ERROR CLOSING FILE MBRLIST'
MSG1700  DC    Y(29),C'INVALID PARM STATEMENT SYNTAX'
MSG1800  DC    Y(19),C'INVALID REPORT TYPE'
MSG1900  DC    Y(14),C'INVALID ACTION'
         SPACE 2
* --------------------------------------------------------- *
* HEADING LINES
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
H3LINE   DC    CL133'0'
         ORG   H3LINE+1
         DC    CL07'PROGRAM'
         ORG   H3LINE+12
         DC    CL04'MODE'
         ORG   H3LINE+19
         DC    CL13'BINDER OPT(S)'
         ORG   H3LINE+34
         DC    CL02'LE'
         ORG   H3LINE+37
         DC    CL04'LANG'
         ORG   H3LINE+49
         DC    CL04'CICS'
         ORG   H3LINE+54
         DC    CL03'API'
         ORG   H3LINE+60
         DC    CL04'DATE'
         ORG   H3LINE+68
         DC    CL04'TIME'
         ORG   H3LINE+75
         DC    CL04'SIZE'
         ORG   H3LINE+81
         DC    CL39'COMPILER OPTIONS OR PROGRAM INFORMATION'
         ORG
         EJECT
* --------------------------------------------------------- *
* COMPILER OPTION LITERALS
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
ADATA    DC    CL08'  ADATA,'
ADV      DC    CL06'  ADV,'
AFP      DC    CL16'AFP(  VOLATILE),'
LITCHR1  DC    CL06'APOST,'
LITCHR2  DC    CL02'Q,'
ARCH     DC    CL09'ARCH(nn),'
ARITH1   DC    CL06'AR(E),'
ARITH2   DC    CL06'AR(C),'
AWO      DC    CL06'  AWO,'
BLOCK0   DC    CL09'  BLOCK0,'
CICS     DC    CL07'  CICS,'
OBJTYP1  DC    CL06'CLASS,'
OBJTYP2  DC    CL08'PROGRAM,'
CODEPAGE DC    CL09'CP(nnnn),'
CMPR2    DC    CL08'  CMPR2,'
CPYR     DC    CL07'  CPYR,'       ADDED V5.2
CURRENCY DC    CL07'  CURR,'
DATA1    DC    CL09'DATA(31),'
DATA2    DC    CL09'DATA(24),'
DBCS     DC    CL07'  DBCS,'
DDSTMT   DC    CL17'DDSTMT(nnnnnnnn),'
DECK     DC    CL04'  D,'
DEFINE   DC    CL06'  DEF,'        ADDED V6.2
DSPSGN1  DC    CL06'DS(S),'        ADDED V5.1
DSPSGN2  DC    CL06'DS(C),'        ADDED V5.1
DLL      DC    CL06'  DLL,'
DATEPROC DC    CL05'  DP,'         DROPPED V5.1
DUMP     DC    CL05'  DU,'
DYNAM    DC    CL06'  DYN,'
EVENTS   DC    CL09'  EVENTS,'
EXPORT   DC    CL06'  EXP,'
FASTSRT  DC    CL07'  FSRT,'
FDUMP    DC    CL08'  FDUMP,'      COBOL II ONLY
HGPR     DC    CL17'HGPR(  PRESERVE),'  ADDED V5.1
INITCHK  DC    CL05'  IC,'              ADDED V6.2
INLINE   DC    CL06'  INL,'             ADDED V6.2
INTDATE1 DC    CL16'INTDATE(LILIAN),'
INTDATE2 DC    CL14'INTDATE(ANSI),'
LIB      DC    CL06'  LIB,'
LIST     DC    CL07'  LIST,'
MAP      DC    CL06'  MAP,'
MDECK    DC    CL05'  MD,'
NAME     DC    CL07'  NAME,'
NO       DC    CL02'NO'
NUMBER   DC    CL06'  NUM,'
NUMCLS1  DC    CL12'NUMCLS(ALT),'
NUMCLS2  DC    CL13'NUMCLS(PRIM),'
NUMCHK   DC    CL05'NONC,'         ADDED V6.2
NUMCHK1  DC    CL08'NC(  ZON),'    ADDED V6.2
NUMCHK2  DC    CL08'NC(  PAC),'    ADDED V6.2
NUMCHK3  DC    CL08'NC(  BIN),'    ADDED V6.2
NUMCHK4  DC    CL08'NC(ABD),'      ADDED V6.2
NUMCHK5  DC    CL08'NC(MSG),'      ADDED V6.2
NUMPROC1 DC    CL15'NUMPROC(  PFD),'
NUMPROC2 DC    CL13'NUMPROC(MIG),' DROPPED V5.1
OBJECT   DC    CL06'  OBJ,'
OFFSET   DC    CL06'  OFF,'
OPTFILE  DC    CL10'  OPTFILE,'
OPTIMIZE DC    CL06'  OPT,'
OPT1A    DC    CL10'OPT(FULL),'     DROPPED V5.1
OPT2A    DC    CL09'OPT(STD),'      DROPPED V5.1
OPTN     DC    CL07'OPT(n),'        ADDED V5.1
OUTDD    DC    CL06'  OUT,'
PRMCHK   DC    CL05'  PC,'          ADDED V6.2
PRMCHK1  DC    CL08'PC(ABD),'       ADDED V6.2
PRMCHK2  DC    CL08'PC(MSG),'       ADDED V6.2
PGMNCO   DC    CL09'PGMN(CO),'      COMPAT
PGMNLU   DC    CL09'PGMN(LU),'      LONGUPPER
PGMNLM   DC    CL09'PGMN(LM),'      LONGMIXED
PDSTMT   DC    CL17'PDSTMT(nnnnnnnn),'
QUALIFY1 DC    CL07'QUA(E),'        ADDED V5.2
QUALIFY2 DC    CL07'QUA(C),'        ADDED V5.2
RENT     DC    CL07'  RENT,'
RES      DC    CL06'  RES,'        COBOL II ONLY
RMODE1   DC    CL11'RMODE(ANY),'
RMODE2   DC    CL10'RMODE(24),'
SEQUENCE DC    CL06'  SEQ,'
SERV     DC    CL07'  SERV,'       ADDED V5.2
SIGLVL   DC    CL12'SIGLVL(nnn),'
SIZE1    DC    CL08'SZ(MAX),'
SIZE2    DC    CL06'SZ(N),'
SOURCE   DC    CL04'  S,'
SQL      DC    CL06'  SQL,'
SQLCCSID DC    CL07'  SQLC,'       ADDED V3.4
SQLIMS   DC    CL09'  SQLIMS,'     ADDED V5.1.1
SSRANGE  DC    CL06'  SSR,'
SSRANGE1 DC    CL12'SSR(  ZLEN),'  ADDED V6.1
SSRANGE2 DC    CL09'SSR(ABD),'     ADDED V6.2
SSRANGE3 DC    CL09'SSR(MSG),'     ADDED V6.2
STGOPT   DC    CL05'  SO,'         ADDED V5.1
TERM     DC    CL07'  TERM,'
TEST     DC    CL07'  TEST,'
TEST1    DC    CL11'TEST(STMT),'        ADDED V3.1
TEST2    DC    CL11'TEST(PATH),'        ADDED V3.1
TEST3    DC    CL12'TEST(BLOCK),'       ADDED V3.1
TEST4    DC    CL12'TEST(  SEP),'       ADDED V3.1
TEST5    DC    CL11'TEST(HOOK),'        ADDED V4.1
TEST6    DC    CL13'TEST(  EJPD),'      ADDED V5.1
TEST7    DC    CL10'TEST(  S),'         ADDED V5.1
TEST8    DC    CL16'NOTEST(  DWARF),'   ADDED V5.1
THREAD   DC    CL09'  THREAD,'
TRUNC1   DC    CL11'TRUNC(STD),'
TRUNC2   DC    CL11'TRUNC(OPT),'
TRUNC3   DC    CL11'TRUNC(BIN),'
VBREF    DC    CL08'  VBREF,'
VLR1     DC    CL07'VLR(C),'       ADDED V5.1.1
VLR2     DC    CL07'VLR(S),'       ADDED V5.1.1
VSOPNFS1 DC    CL06'VS(C),'        ADDED V6.1
VSOPNFS2 DC    CL06'VS(S),'        ADDED V6.1
WORD     DC    CL05'  WD,'
XMLP1    DC    CL06'XP(X),'
XMLP2    DC    CL06'XP(C),'
XREF     DC    CL04'  X,'
YW       DC    CL09'YW(nnnn),'
ZONEDATA DC    CL08'ZD(  PFD),'    ADDED V5.2
ZONEDAT1 DC    CL08'ZD(MIG),'      ADDED V5.2
ZWB      DC    CL06'  ZWB,'
         SPACE 2
* --------------------------------------------------------- *
* DATA DIVISION ITEMS LITERALS
* --------------------------------------------------------- *
         SPACE 1
QSAM     DC    CL09'QSAM/SAM,'
ESDS     DC    CL10'VSAM ESDS,'
KSDS     DC    CL10'VSAM KSDS,'
RRDS     DC    CL10'VSAM RRDS,'
CODESET  DC    CL09'CODE-SET,'
SPANREC  DC    CL16'SPANNED RECORDS,'
DBCSG    DC    CL11'DBCS PIC G,'
DBCSGN   DC    CL13'DBCS PIC G/N,'
NODO     DC    CL04'ODO,'
SYNC     DC    CL13'SYNCHRONIZED,'
JUST     DC    CL10'JUSTIFIED,'
UADRPTR  DC    CL17'USAGE IS POINTER,'
CODO     DC    CL12'COMPLEX ODO,'
XFP      DC    CL24'EXTERNAL FLOATING POINT,'
IFP      DC    CL24'INTERNAL FLOATING POINT,'
LNESEQ   DC    CL21'LINE-SEQUENTIAL FILE,'
UCDEPTR  DC    CL27'USAGE IS PROCEDURE-POINTER,'
UCDEFUN  DC    CL36'USAGE IS PROCEDURE/FUNCTION POINTER,'
         SPACE 2
* --------------------------------------------------------- *
* ENVIRONMENT DIVISION ITEMS LITERALS
* --------------------------------------------------------- *
         SPACE 1
FILERC   DC    CL12'FILE STATUS,'
RERUN    DC    CL06'RERUN,'
UPSI     DC    CL10'UPSI USED,'
         SPACE 2
* --------------------------------------------------------- *
* PROCEDURE DIVISION VERBS LITERALS
* --------------------------------------------------------- *
         SPACE 1
ACCEPT   DC    CL07'ACCEPT,'
ADD      DC    CL04'ADD,'
ALTER    DC    CL06'ALTER,'
CALL     DC    CL05'CALL,'
CANCEL   DC    CL07'CANCEL,'
CLOSE    DC    CL06'CLOSE,'
COMPUTE  DC    CL08'COMPUTE,'
DELETE   DC    CL07'DELETE,'
DISPLAY  DC    CL08'DISPLAY,'
DIVIDE   DC    CL07'DIVIDE,'
ENDPFRM  DC    CL12'END-PERFORM,'
ENTER    DC    CL06'ENTER,'
ENTRY    DC    CL06'ENTRY,'
EXIT     DC    CL05'EXIT,'
EXEC     DC    CL05'EXEC,'         Enterprise COBOL
GOTO     DC    CL06'GO TO,'
IF       DC    CL03'IF,'
INITLIZE DC    CL11'INITIALIZE,'
INVOKE   DC    CL07'INVOKE,'       COBOL for MVS, OS/390
INSPECT  DC    CL08'INSPECT,'
MERGE    DC    CL06'MERGE,'
MOVE     DC    CL05'MOVE,'
MULTIPLY DC    CL09'MULTIPLY,'
OPEN     DC    CL05'OPEN,'
PERFORM  DC    CL08'PERFORM,'
READ     DC    CL05'READ,'
RELEASE  DC    CL08'RELEASE,'
RETURN   DC    CL07'RETURN,'
REWRITE  DC    CL08'REWRITE,'
SEARCH   DC    CL07'SEARCH,'
SET      DC    CL04'SET,'
SORT     DC    CL05'SORT,'
START    DC    CL06'START,'
STOP     DC    CL05'STOP,'
STRING   DC    CL07'STRING,'
SUBTRACT DC    CL09'SUBTRACT,'
UNSTRING DC    CL09'UNSTRING,'
USE      DC    CL04'USE,'
WRITE    DC    CL06'WRITE,'
CONTINUE DC    CL09'CONTINUE,'
ENDADD   DC    CL08'END-ADD,'
ENDCALL  DC    CL09'END-CALL,'
ENDCMPT  DC    CL12'END-COMPUTE,'
ENDDEL   DC    CL11'END-DELETE,'
ENDDIV   DC    CL11'END-DIVIDE,'
ENDEVAL  DC    CL13'END-EVALUATE,'
ENDIF    DC    CL07'END-IF,'
ENDMULT  DC    CL13'END-MULTIPLY,'
ENDREAD  DC    CL09'END-READ,'
ENDRETN  DC    CL11'END-RETURN,'
ENDRWR   DC    CL12'END-REWRITE,'
ENDSRCH  DC    CL11'END-SEARCH,'
ENDSTRT  DC    CL10'END-START,'
ENDSTR   DC    CL11'END-STRING,'
ENDSUBT  DC    CL13'END-SUBTRACT,'
ENDUSTR  DC    CL13'END-UNSTRING,'
ENDWRITE DC    CL10'END-WRITE,'
GOBACK   DC    CL07'GOBACK,'
EVALUATE DC    CL09'EVALUATE,'
SERVICE  DC    CL08'SERVICE,'
ENDINVOK DC    CL11'END-INVOKE,'   COBOL for MVS, OS/390
ENDEXEC  DC    CL09'END-EXEC,'     Enterprise COBOL
XML      DC    CL04'XML,'          Enterprise COBOL
ENDXML   DC    CL08'END-XML,'      Enterprise COBOL
ALLOCATE DC    CL09'ALLOCATE,'     COBOL V6.1
FREE     DC    CL05'FREE,'         COBOL V6.1
JASON    DC    CL06'JASON,'        COBOL V6.1
ENDJASON DC    CL10'END-JASON,'    COBOL V6.1
         SPACE 2
* --------------------------------------------------------- *
* PROCEDURE DIVISION INFORMATION LITERALS
* --------------------------------------------------------- *
         SPACE 1
HEXLIT   DC    CL20'HEXADECIMAL LITERAL,'
ALTGOTO  DC    CL14'ALTERED GO TO,'
IOERRDCL DC    CL22'I/O ERROR DECLARATIVE,'
LABELDCL DC    CL18'LABEL DECLARATIVE,'      obsolete
DEBUGDCL DC    CL22'DEBUGGING DECLARATIVE,'
PGMSEG   DC    CL21'PROGRAM SEGMENTATION,'
OPENXTND DC    CL14'OPEN...EXTEND,'
EXITPGM  DC    CL13'EXIT PROGRAM,'
CALLLIT  DC    CL13'CALL LITERAL,'
CALLID   DC    CL16'CALL IDENTIFIER,'
CALLOVR  DC    CL19'CALL...ON OVERFLOW,'
CALLLEN  DC    CL17'CALL...LENGTH OF,'
CALLADR  DC    CL18'CALL...ADDRESS OF,'
CLOSEUNT DC    CL18'CLOSE...REEL/UNIT,'
EXPONENT DC    CL20'EXPONENTIATION USED,'
FLOATPT  DC    CL20'FLOATING POINT USED,'
COPYCODE DC    CL10'COPY CODE,'
BASIS    DC    CL06'BASIS,'
DBCSUSED DC    CL15'DBCS NAME USED,'
DBCSSOSI DC    CL23'DBCS SHIFT-OUT/IN USED,'
DBCSLIT  DC    CL13'DBCS LITERAL,'
REPLACE  DC    CL08'REPLACE,'
REFMOD   DC    CL28'REFERENCE MODIFICATION USED,'
NESTPGM  DC    CL16'NESTED PROGRAMS,'
INITIAL  DC    CL08'INITIAL,'
COMMON   DC    CL07'COMMON,'
SELOPT   DC    CL18'SELECT...OPTIONAL,'
EXTERNAL DC    CL09'EXTERNAL,'
GLOBAL   DC    CL07'GLOBAL,'
VLREC    DC    CL18'RECORD IS VARYING,'
INPIPT   DC    CL19'ACCEPT FROM SYSIPT,'     obsolete
OUTLST   DC    CL20'DISPLAY UPON SYSLST,'    obsolete
OUTPCH   DC    CL20'DISPLAY UPON SYSPCH,'    obsolete
FUNCTION DC    CL24'INTRINSIC FUNCTION USED,'
ZLIT     DC    CL10'Z-LITERAL,'         COBOL V5.1
RECURS   DC    CL10'RECURSIVE,'         COBOL V5.1
JAVA     DC    CL21'JAVA BASED OO SYNTAX,'   Enterprise COBOL
RANDOM   DC    CL21'FUNCTION RANDOM USED,'   Enterprise COBOL
NATIONAL DC    CL09'NATIONAL,'               Enterprise COBOL
XMLSCHV  DC    CL17'XML PARSE SCHEMA,'       Enterprise COBOL
         EJECT
* --------------------------------------------------------- *
* DEFAULT DEFINITION FOR PRINTER
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
BLOWSTG  EQU   *,4,C'A'
BLOWLIST DS    8F
         DS    0D
PRNTDCB  DCB ,                                                         +
               DCBE=PRNTDCBE,                                          +
               BLKSIZE=3990,                                           +
               DDNAME=PRTOUTA,                                         +
               DEVD=PR,                                                +
               DSORG=PS,                                               +
               LRECL=133,                                              +
               MACRF=(PM),                                             +
               RECFM=FBA
         SPACE 1
         DS    0D
PRNTDCBE DCBE
         SPACE 1
         DS    0D
PLINE    DS    CL133
         SPACE 2
* --------------------------------------------------------- *
* DEFAULT DEFINITION FOR PDS/PDSE (LOADLIB) DIRECTORY
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
PDSEDCB  DCB ,                                                         +
               DCBE=PDSEDCBE,                                          +
               BLKSIZE=256,                                            +
               DDNAME=APPLLIB,                                         +
               DSORG=PS,                                               +
               LRECL=256,                                              +
               MACRF=(GL),                                             +
               RECFM=F
         SPACE 1
         DS    0D
PDSEDCBE DCBE ,                                                        +
               EODAD=PDIR8000
         SPACE 1
         DS    0D
PDSEXLST DS    F              PDSE EXIT LIST
PDSEJFCB DS    XL256          PDSE JFCB
         SPACE 2
* --------------------------------------------------------- *
* DEFAULT DEFINITION FOR CARD INPUT
* PROVIDES THE LIST OF MODULES TO LOAD
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
CARDDCB  DCB ,                                                         +
               DCBE=CARDDCBE,                                          +
               DDNAME=MBRLIST,                                         +
               DSORG=PS,                                               +
               LRECL=80,                                               +
               MACRF=(GL)
         SPACE 1
         DS    0D
CARDDCBE DCBE ,                                                        +
               EODAD=PMBR8000
         SPACE 1
         DS    0D
#BLOWLEN EQU   *-BLOWSTG
         TITLE 'SCAN FOR COMPILER OPTIONS'
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
* R0       EQU   0              WORK REG
* R1       EQU   1              NOT USED
* R2       EQU   2              NOT USED
* R3       EQU   3              NOT USED
* R4       EQU   4              NOT USED
* R5       EQU   5              BAR 2 OF STATIC STORAGE
* R6       EQU   6              BAR OF PSI
* R7       EQU   7              ADDR OF END OF PLINE
* R8       EQU   8              BAR OF PLINE POSITION
* R9       EQU   9              BAR OF STATIC STORAGE
* RA       EQU   10             PROGRAM BAR 1
* RB       EQU   11             RESERVED FOR BAR 2
* RC       EQU   12             LE CAA BAR
* RD       EQU   13             ADDR OF RSA
* RE       EQU   14             RETURN ADDR
* RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
* --------------------------------------------------------- *
* SCAN LOAD MODULE TO DETERMINE COMPILER OPTIONS
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
SCAN1    CSECT
SCAN1    RMODE ANY
SCAN1    AMODE ANY
         ENTRY SCAN1
         USING SCAN1,RF
         STM   RE,RC,12(RD)
         LR    RA,RF
         LR    RB,RA
         AHI   RB,4096
         DROP  RF
         USING SCAN1,RA,RB
         USING CEEDSA,RD
         USING STATIC,R9,R5
         SPACE 1
SCAN1000 EQU   *
         L     R1,EPADDR
         LA    R6,SIG_SIB          POINT TO PSI
         USING PSI,R6
         SPACE 1
         LA    R8,D1OPTS
         LA    R7,D1OPTS+L'D1OPTS
         J     SCAN1050
SCAN1010 EQU   *
         LA    R0,D1OPTS+L'D1OPTS
         CR    R0,R7
         JE    SCAN1012
         LA    R0,D2OPTS+L'D2OPTS
         CR    R0,R7
         JE    SCAN1014
         LA    R0,D3OPTS+L'D3OPTS
         CR    R0,R7
         JE    SCAN1016
         LA    R0,D4OPTS+L'D4OPTS
         CR    R0,R7
         JE    SCAN1018
         LA    R0,D5OPTS+L'D5OPTS
         CR    R0,R7
         JE    SCAN1020
         LA    R0,D6OPTS+L'D6OPTS
         CR    R0,R7
         JE    SCAN1022
         LA    R0,D7OPTS+L'D7OPTS
         CR    R0,R7
         JE    SCAN1024
         LA    R0,D8OPTS+L'D8OPTS
         CR    R0,R7
         JE    SCAN1026
         LA    R0,D9OPTS+L'D9OPTS
         CR    R0,R7
         JE    SCAN1028
         LA    R0,DAOPTS+L'DAOPTS
         CR    R0,R7
         JE    SCAN1030
         DC    H'0'
SCAN1012 EQU   *
         LA    R8,D2OPTS
         LA    R7,D2OPTS+L'D2OPTS
         BR    RE
SCAN1014 EQU   *
         LA    R8,D3OPTS
         LA    R7,D3OPTS+L'D3OPTS
         BR    RE
SCAN1016 EQU   *
         LA    R8,D4OPTS
         LA    R7,D4OPTS+L'D4OPTS
         BR    RE
SCAN1018 EQU   *
         LA    R8,D5OPTS
         LA    R7,D5OPTS+L'D5OPTS
         BR    RE
SCAN1020 EQU   *
         LA    R8,D6OPTS
         LA    R7,D6OPTS+L'D6OPTS
         BR    RE
SCAN1022 EQU   *
         LA    R8,D7OPTS
         LA    R7,D7OPTS+L'D7OPTS
         BR    RE
SCAN1024 EQU   *
         LA    R8,D8OPTS
         LA    R7,D8OPTS+L'D8OPTS
         BR    RE
SCAN1026 EQU   *
         LA    R8,D9OPTS
         LA    R7,D9OPTS+L'D9OPTS
         BR    RE
SCAN1028 EQU   *
         LA    R8,DAOPTS
         LA    R7,DAOPTS+L'DAOPTS
         BR    RE
SCAN1030 EQU   *
         LA    R8,DBOPTS
         LA    R7,DBOPTS+L'DBOPTS
         BR    RE
         SPACE 1
SCAN1050 EQU   *         DDSTMT(nnnnnnnn)
         LA    RE,SCAN1050
         LA    R0,L'DDSTMT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DDSTMT,R8),DDSTMT    DDSTMT(nnnnnnnn)
         MVC   7(L'CDDSTMT,R8),CDDSTMT
         LA    R8,L'DDSTMT(,R8)
         SPACE 1
SCAN1060 EQU   *         PDSTMT(nnnnnnnn)
         LA    RE,SCAN1060
         LA    R0,L'PDSTMT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'PDSTMT,R8),PDSTMT    PDSTMT(nnnnnnnn)
         MVC   7(L'CPDSTMT,R8),CPDSTMT
         LA    R8,L'PDSTMT(,R8)
         SPACE 1
SCAN1100 EQU   *         SIGLVL(nnn)
         LA    RE,SCAN1100
         LA    R0,L'SIGLVL(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SIGLVL,R8),SIGLVL
         MVC   7(L'COBSIGLV,R8),COBSIGLV
         LA    R8,L'SIGLVL(,R8)
         SPACE 1
SCAN1110 EQU   *         CP(nnnn)
         LA    RE,SCAN1110
         LA    R0,L'CODEPAGE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'CODEPAGE,R8),CODEPAGE     CP(nnnn)
         MVC   3(L'CDPG,R8),CDPG
         LA    R8,L'CODEPAGE(,R8)
         SPACE 1
SCAN1120 EQU   *         ARCH(nn)
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JL    SCAN1130                 A. NO, BYPASS
         LA    RE,SCAN1120
         LA    R0,L'ARCH(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'ARCH,R8),ARCH   ARCH(nn)
         MVC   5(L'ARCHLVL,R8),ARCHLVL
         LA    R8,L'ARCH(,R8)
         SPACE 1
SCAN1130 EQU   *         ADV|NOADV
         LA    RE,SCAN1300
         LA    R0,L'ADV(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'ADV,R8),ADV
         TM    PSICCO01,#PSIADV    Q. ON
         JO    SCAN1132            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1132 EQU   *
         LA    R8,L'ADV(,R8)
         SPACE 1
SCAN1140 EQU   *         APOST|Q
         TM    PSICCO01,#PSILIT    Q. ON
         JNO   SCAN1142            A. NO
         LA    RE,SCAN1140
         LA    R0,L'LITCHR1(,R8)   A. YES, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         BH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'LITCHR1,R8),LITCHR1
         LA    R8,L'LITCHR1(,R8)
         J     SCAN1144
SCAN1142 EQU   *
         LA    RE,SCAN1142
         LA    R0,L'LITCHR2(,R8)   A. NO, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'LITCHR2,R8),LITCHR2
         LA    R8,L'LITCHR2(,R8)
SCAN1144 EQU   *
         SPACE 1
SCAN1150 EQU   *         DATA(24|31)
         TM    PSICCO01,#PSIDATA   Q. ON
         JNO   SCAN1152            A. NO
         LA    RE,SCAN1150
         LA    R0,L'DATA1(,R8)     A. YES, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'DATA1,R8),DATA1
         LA    R8,L'DATA1(,R8)
         J     SCAN1154
SCAN1152 EQU   *
         LA    RE,SCAN1152
         LA    R0,L'DATA2(,R8)     A. NO, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DATA2,R8),DATA2
         LA    R8,L'DATA2(,R8)
SCAN1154 EQU   *
         SPACE 1
SCAN1160 EQU   *         D|NOD
         LA    RE,SCAN1160
         LA    R0,L'DECK(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DECK,R8),DECK
         TM    PSICCO01,#PSIDECK   Q. ON
         JO    SCAN1162            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1162 EQU   *
         LA    R8,L'DECK(,R8)
         SPACE 1
SCAN1170 EQU   *         DU|NODU
         LA    RE,SCAN1170
         LA    R0,L'DUMP(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DUMP,R8),DUMP
         TM    PSICCO01,#PSIDUMP   Q. ON
         JO    SCAN1172            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1172 EQU   *
         LA    R8,L'DUMP(,R8)
         SPACE 1
SCAN1180 EQU   *         DYN|NODYN
         LA    RE,SCAN1180
         LA    R0,L'DYNAM(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DYNAM,R8),DYNAM
         TM    PSICCO01,#PSIDYNM   Q. ON
         JO    SCAN1182            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1182 EQU   *
         LA    R8,L'DYNAM(,R8)
         SPACE 1
SCAN1190 EQU   *         FSRT|NOFSRT
         LA    RE,SCAN1190
         LA    R0,L'FASTSRT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'FASTSRT,R8),FASTSRT
         TM    PSICCO01,#PSIFSRT   Q. ON
         JO    SCAN1192            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1192 EQU   *
         LA    R8,L'FASTSRT(,R8)
         SPACE 1
SCAN1200 EQU   *         FDUMP|NOFDUMP
         TM    LMFLAG2,#LMCOB2     Q. COBOL II
         JNO   SCAN1220            A. NO, BYPASS
         LA    RE,SCAN1200
         LA    R0,L'FDUMP(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'FDUMP,R8),FDUMP
         TM    PSICCO01,#PSIFDMP   Q. ON
         JO    SCAN1212            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1212 EQU   *
         LA    R8,L'FDUMP(,R8)
         SPACE 1
SCAN1220 EQU   *         SQLIMS|NOSQLIMS
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1.1
         JL    SCAN1230                 A. NO, BYPASS
         LA    RE,SCAN1220
         LA    R0,L'SQLIMS(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SQLIMS,R8),SQLIMS
         TM    PSICCO01,#PSIIMS    Q. ON
         JO    SCAN1222            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1222 EQU   *
         LA    R8,L'SQLIMS(,R8)
         SPACE 1
SCAN1230 EQU   *         LIB|NOLIB
         LA    RE,SCAN1230
         LA    R0,L'LIB(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'LIB,R8),LIB
         TM    PSICCO02,#PSILIB    Q. ON
         JO    SCAN1232            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1232 EQU   *
         LA    R8,L'LIB(,R8)
         SPACE 1
SCAN1240 EQU   *         LIST|NOLIST
         LA    RE,SCAN1240
         LA    R0,L'LIST(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'LIST,R8),LIST
         TM    PSICCO02,#PSILIST   Q. ON
         JO    SCAN1242            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1242 EQU   *
         LA    R8,L'LIST(,R8)
         SPACE 1
SCAN1250 EQU   *         MAP|NOMAP
         LA    RE,SCAN1250
         LA    R0,L'MAP(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'MAP,R8),MAP
         TM    PSICCO02,#PSIMAP    Q. ON
         JO    SCAN1252            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1252 EQU   *
         LA    R8,L'MAP(,R8)
         SPACE 1
SCAN1260 EQU   *         NUM|NONUM
         LA    RE,SCAN1260
         LA    R0,L'NUMBER(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'NUMBER,R8),NUMBER
         TM    PSICCO02,#PSINUM    Q. ON
         JO    SCAN1262            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1262 EQU   *
         LA    R8,L'NUMBER(,R8)
         SPACE 1
SCAN1270 EQU   *         OBJ|NOOBJ
         LA    RE,SCAN1270
         LA    R0,L'OBJECT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OBJECT,R8),OBJECT
         TM    PSICCO02,#PSIOBJ    Q. ON
         JO    SCAN1272            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1272 EQU   *
         LA    R8,L'OBJECT(,R8)
         SPACE 1
SCAN1280 EQU   *         OFF|NOOFF
         LA    RE,SCAN1280
         LA    R0,L'OFFSET(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OFFSET,R8),OFFSET
         TM    PSICCO02,#PSIOFF    Q. ON
         JO    SCAN1282            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1282 EQU   *
         LA    R8,L'OFFSET(,R8)
         SPACE 1
SCAN1290 EQU   *         OPT|NOOPT
         LA    RE,SCAN1290
         LA    R0,L'OPTIMIZE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OPTIMIZE,R8),OPTIMIZE
         TM    PSICCO02,#PSIOPT    Q. ON
         JO    SCAN1292            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1292 EQU   *
         LA    R8,L'OPTIMIZE(,R8)
         TM    PSICCO02,#PSIOPT    Q. ON
         JNO   SCAN1310            A. NO, BYPASS
SCAN1294 EQU   *         OPT(FULL)
         TM    LMFLAG2,#LMCOB3     Q. COBOL MVS, OS/390, Enterprise
         JNO   SCAN1300            A. NO, GO CHECK COBOL V5
         TM    PSICCO26,#PSIOFUL   Q. ON
         JNO   SCAN1296            A. YES
         LA    RE,SCAN1294
         LA    R0,L'OPT1A(,R8)     A. YES, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         BH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'OPT1A,R8),OPT1A
         LA    R8,L'OPT1A(,R8)
         J     SCAN1310
SCAN1296 EQU   *         OPT(STD)
         LA    RE,SCAN1296
         LA    R0,L'OPT2A(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OPT2A,R8),OPT2A
         LA    R8,L'OPT2A(,R8)
         J     SCAN1310
SCAN1300 EQU   *
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JL    SCAN1310                 A. YES, BYPASS
SCAN1302 EQU   *         OPT(0|1|2)
         LA    RE,SCAN1302
         LA    R0,L'OPTN(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OPTN,R8),OPTN
         MVC   4(L'OPTLVL,R8),OPTLVL
         LA    R8,L'OPTN(,R8)
         SPACE 1
SCAN1310 EQU   *         OUTDD|NOOUTDD
         LA    RE,SCAN1310
         LA    R0,L'OUTDD(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OUTDD,R8),OUTDD
         TM    PSICCO02,#PSIODD    Q. ON
         JO    SCAN1312            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1312 EQU   *
         LA    R8,L'OUTDD(,R8)
         SPACE 1
SCAN1320 EQU   *         NUMPROC(MIG)
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JNL   SCAN1332                 A. YES, BYPASS
         TM    PSICCO05,#PSIMIG    Q. ON
         JNO   SCAN1332            A. YES
         LA    RE,SCAN1320
         LA    R0,L'NUMPROC2(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'NUMPROC2,R8),NUMPROC2
         LA    R8,L'NUMPROC2(,R8)
         J     SCAN1340
SCAN1332 EQU   *         NUMPROC(PFD|NOPFD)
         LA    RE,SCAN1332
         LA    R0,L'NUMPROC1(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'NUMPROC1,R8),NUMPROC1
         TM    PSICCO03,#PSIPFD    Q. ON
         JO    SCAN1334            A. YES
         MVC   8(L'NO,R8),NO       A. NO
SCAN1334 EQU   *
         LA    R8,L'NUMPROC1(,R8)
         SPACE 1
SCAN1340 EQU   *         RENT|NORENT
         LA    RE,SCAN1340
         LA    R0,L'RENT(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'RENT,R8),RENT
         TM    PSICCO03,#PSIRENT   Q. ON
         JO    SCAN1342            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1342 EQU   *
         LA    R8,L'RENT(,R8)
         SPACE 1
SCAN1350 EQU   *         RES|NORES
         LA    RE,SCAN1350
         LA    R0,L'RES(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'RES,R8),RES
         TM    PSICCO03,#PSIRES    Q. ON
         JO    SCAN1352            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1352 EQU   *
         LA    R8,L'RES(,R8)
         SPACE 1
SCAN1360 EQU   *         SEQ|NOSEQ
         LA    RE,SCAN1360
         LA    R0,L'SEQUENCE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SEQUENCE,R8),SEQUENCE
         TM    PSICCO03,#PSISEQ    Q. ON
         JO    SCAN1362            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1362 EQU   *
         LA    R8,L'SEQUENCE(,R8)
         SPACE 1
SCAN1370 EQU   *         SZ(MAX)
         CLC   TSVRM(L'CVRM5#2),CVRM5#2 Q. >= COBOL V5.2
         JNL   SCAN1380                 A. YES, BYPASS
         TM    PSICCO03,#PSISIZE   Q. ON
         JNO   SCAN1372            A. NO
         LA    RE,SCAN1370
         LA    R0,L'SIZE1(,R8)     A. YES, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'SIZE1,R8),SIZE1
         LA    R8,L'SIZE1(,R8)
         J     SCAN1380
SCAN1372 EQU   *         SZ(N)
         LA    RE,SCAN1372
         LA    R0,L'SIZE2(,R8)     A. NO, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SIZE2,R8),SIZE2
         LA    R8,L'SIZE2(,R8)
         SPACE 1
SCAN1380 EQU   *         S|NOS
         LA    RE,SCAN1380
         LA    R0,L'SOURCE(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SOURCE,R8),SOURCE
         TM    PSICCO03,#PSISRCE   Q. ON
         JO    SCAN1382            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1382 EQU   *
         LA    R8,L'SOURCE(,R8)
         SPACE 1
SCAN1390 EQU   *         SSR|NOSSR
         LA    RE,SCAN1390
         LA    R0,L'SSRANGE(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SSRANGE,R8),SSRANGE
         TM    PSICCO03,#PSISSR    Q. ON
         JO    SCAN1392            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1392 EQU   *
         LA    R8,L'SSRANGE(,R8)
SCAN1394 EQU   *         SSR(ZLEN|NOZLEN)
         TM    PSICCO03,#PSISSR    Q. ON
         JNO   SCAN1410            A. NO, BYPASS
         CLC   TSVRM(L'CVRM6#1),CVRM6#1 Q. >= COBOL V6.1
         JL    SCAN1410                 A. NO, BYPASS
         LA    RE,SCAN1394
         LA    R0,L'SSRANGE1(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SSRANGE1,R8),SSRANGE1     SSR(  ZLEN)
         TM    PSIPDI23,#PSISSR1   Q. ON
         JO    SCAN1396            A. YES
         MVC   4(L'NO,R8),NO       A. NO
SCAN1396 EQU   *
         LA    R8,L'SSRANGE1(,R8)
SCAN1398 EQU   *         SSR(ABD)
         CLC   TSVRM(L'CVRM6#2),CVRM6#2 Q. >= COBOL V6.2
         JL    SCAN1410                 A. NO, BYPASS
         TM    PSIPDI23,#PSISSR2   Q. ON
         JNO   SCAN1400            A. NO
         LA    RE,SCAN1398
         LA    R0,L'SSRANGE2(,R8)  A. YES, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'SSRANGE2,R8),SSRANGE2     SSR(ABD)
         LA    R8,L'SSRANGE2(,R8)
         J     SCAN1410
SCAN1400 EQU   *         SSR(MSG)
         LA    RE,SCAN1400
         LA    R0,L'SSRANGE3(,R8)  A. NO, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SSRANGE3,R8),SSRANGE3     SSR(MSG)
         LA    R8,L'SSRANGE3(,R8)
         SPACE 1
SCAN1410 EQU   *         TERM|NOTERM
         LA    RE,SCAN1410
         LA    R0,L'TERM(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TERM,R8),TERM
         TM    PSICCO03,#PSITERM   Q. ON
         JO    SCAN1412            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1412 EQU   *
         LA    R8,L'TERM(,R8)
         SPACE 1
SCAN1420 EQU   *         TEST|NOTEST
         LA    RE,SCAN1420
         LA    R0,L'TEST(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST,R8),TEST
         TM    PSICCO04,#PSITEST   Q. ON
         JO    SCAN1422            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1422 EQU   *
         LA    R8,L'TEST(,R8)
SCAN1424 EQU   *         TEST(STMT) COBOL V3
         TM    PSICCO04,#PSITEST   Q. TEST ON
         JNO   SCAN1452            A. NO, BYPASS TEST
         CLC   TSVRM(L'CVRM3),CVRM3     Q. = COBOL V3
         JNE   SCAN1434                 A. NO, BYPASS
         TM    PSICCO26,#PSITST1   Q. TEST(STMT)
         JNO   SCAN1426            A. NO
         LA    RE,SCAN1424
         LA    R0,L'TEST1(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST1,R8),TEST1 TEST(STMT)
         LA    R8,L'TEST1(,R8)
SCAN1426 EQU   *         TEST(PATH) COBOL V3
         TM    PSICCO26,#PSITST2   Q. TEST(PATH)
         JNO   SCAN1428            A. NO
         LA    RE,SCAN1426
         LA    R0,L'TEST2(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST2,R8),TEST2 TEST(PATH)
         LA    R8,L'TEST2(,R8)
SCAN1428 EQU   *         TEST(BLOCK) COBOL V3
         TM    PSICCO26,#PSITST3   Q. TEST(BLOCK)
         JNO   SCAN1430            A. NO
         LA    RE,SCAN1428
         LA    R0,L'TEST3(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST3,R8),TEST3 TEST(BLOCK)
         LA    R8,L'TEST3(,R8)
SCAN1430 EQU   *         TEST(SEP|NOSEP) COBOL V3
         LA    RE,SCAN1430
         LA    R0,L'TEST4(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST4,R8),TEST4 TEST(  SEP)
         TM    PSICCO26,#PSITST4   Q. ON
         JO    SCAN1432            A. YES
         MVC   5(L'NO,R8),NO       A. NO
SCAN1432 EQU   *
         LA    R8,L'TEST4(,R8)
         J     SCAN1460
SCAN1434 EQU   *         TEST
         CLC   TSVRM(L'CVRM4),CVRM4     Q. = COBOL V4
         JNE   SCAN1444                 A. NO, BYPASS
         LA    RE,SCAN1434
         LA    R0,L'TEST5(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST5,R8),TEST5 TEST(HOOK)
         LA    R8,L'TEST5(,R8)
SCAN1436 EQU   *         TEST(EJPD|NOEJPD) COBOL V4
         LA    RE,SCAN1436
         LA    R0,L'TEST6(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST6,R8),TEST6 TEST(  EJPD)
         TM    PSICCO27,#PSITST7   Q. TEST(EJPD)
         JO    SCAN1438            A. YES
         MVC   5(L'NO,R8),NO       A. NO
SCAN1438 EQU   *
         LA    R8,L'TEST6(,R8)
SCAN1440 EQU   *         TEST(SEP|NOSEP) COBOL V4
         LA    RE,SCAN1440
         LA    R0,L'TEST4(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST4,R8),TEST4 TEST(  SEP)
         TM    PSICCO26,#PSITST4   Q. ON
         JO    SCAN1442            A. YES
         MVC   5(L'NO,R8),NO       A. NO
SCAN1442 EQU   *
         LA    R8,L'TEST4(,R8)
         J     SCAN1460
SCAN1444 EQU   *         TEST(EJPD|NOEJPD) COBOL V5
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. = COBOL V5
         JNE   SCAN1460                 A. NO, BYPASS
         LA    RE,SCAN1444
         LA    R0,L'TEST6(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST6,R8),TEST6 TEST(  EJPD)
         TM    PSICCO27,#PSITST7   Q. TEST(EJPD)
         JO    SCAN1446            A. YES
         MVC   5(L'NO,R8),NO       A. NO
SCAN1446 EQU   *
         LA    R8,L'TEST6(,R8)
SCAN1448 EQU   *         TEST(S|NOS) COBOL V5
         LA    RE,SCAN1448
         LA    R0,L'TEST7(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST7,R8),TEST7 TEST(  S)
         TM    PSICCO27,#PSITST7   Q. ON
         JO    SCAN1450            A. YES
         MVC   5(L'NO,R8),NO       A. NO
SCAN1450 EQU   *
         LA    R8,L'TEST7(,R8)
         J     SCAN1460
SCAN1452 EQU   *         NOTEST(DWARF|NODWARF) COBOL V5.1
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JL    SCAN1460                 A. NO, BYPASS
         LA    RE,SCAN1452
         LA    R0,L'TEST8(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TEST8,R8),TEST8 TEST(  DWARF)
         TM    PSIPDI29,#PSITST8   Q. ON
         JO    SCAN1454            A. YES
         MVC   7(L'NO,R8),NO       A. NO
SCAN1454 EQU   *
         LA    R8,L'TEST8(,R8)
         SPACE 1
SCAN1460 EQU   *         TRUNC(BIN)
         TM    PSICCO05,#PSIBIN    Q. ON
         JNO   SCAN1462            A. YES
         LA    RE,SCAN1460
         LA    R0,L'TRUNC3(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TRUNC3,R8),TRUNC3    TRUNC(BIN)
         LA    R8,L'TRUNC3(,R8)
         J     SCAN1470
SCAN1462 EQU   *         TRUNC(STD|OPT)
         TM    PSICCO04,#PSISTD    Q. ON
         JNO   SCAN1464            A. NO
         LA    RE,SCAN1462
         LA    R0,L'TRUNC1(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'TRUNC1,R8),TRUNC1    TRUNC(STD)
         LA    R8,L'TRUNC1(,R8)
         J     SCAN1470
SCAN1464 EQU   *
         LA    RE,SCAN1464
         LA    R0,L'TRUNC2(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'TRUNC2,R8),TRUNC2    TRUNC(OPT)
         LA    R8,L'TRUNC2(,R8)
         SPACE 1
SCAN1470 EQU   *         WD|NOWD
         LA    RE,SCAN1470
         LA    R0,L'WORD(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'WORD,R8),WORD     WD
         TM    PSICCO04,#PSIWORD   Q. ON
         JO    SCAN1472            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1472 EQU   *         VBREF|NOVBREF
         LA    RE,SCAN1472
         LA    R0,L'VBREF(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'VBREF,R8),VBREF   VBREF
         TM    PSICCO04,#PSIVREF   Q. ON
         JO    SCAN1474            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1474 EQU   *
         LA    R8,L'VBREF(,R8)
         SPACE 1
SCAN1480 EQU   *         X|NOX
         LA    RE,SCAN1480
         LA    R0,L'XREF(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'XREF,R8),XREF     X
         TM    PSICCO04,#PSIXREF   Q. ON
         JO    SCAN1482            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1482 EQU   *
         LA    R8,L'XREF(,R8)
         SPACE 1
SCAN1490 EQU   *         ZWB|NOZWB
         LA    RE,SCAN1490
         LA    R0,L'ZWB(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'ZWB,R8),ZWB
         TM    PSICCO04,#PSIZWB    Q. ON
         JO    SCAN1492            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1492 EQU   *
         LA    R8,L'ZWB(,R8)
         SPACE 1
SCAN1500 EQU   *         NAME|NONAME
         LA    RE,SCAN1500
         LA    R0,L'NAME(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'NAME,R8),NAME
         TM    PSICCO04,#PSINAME   Q. ON
         JO    SCAN1502            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1502 EQU   *
         LA    R8,L'NAME(,R8)
         SPACE 1
SCAN1510 EQU   *         CMPR2|NOCMPR2
         CLC   TSVRM(L'CVRM2),CVRM2     Q. = COBOL II
         JNE   SCAN1520                 A. YES, BYPASS
         LA    RE,SCAN1510
         LA    R0,L'CMPR2(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'CMPR2,R8),CMPR2   CMPR2
         TM    PSICCO04,#PSICMPR   Q. ON
         JO    SCAN1512            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1512 EQU   *
         LA    R8,L'CMPR2(,R8)
         SPACE 1
SCAN1520 EQU   *         NUMCLS(ALT|PRIM)
         TM    PSICCO05,#PSINCLS   Q. ON
         JNO   SCAN1522            A. NO
         LA    RE,SCAN1520
         LA    R0,L'NUMCLS1(,R8)   A. YES, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'NUMCLS1,R8),NUMCLS1  NUMCLS(ALT)
         LA    R8,L'NUMCLS1(,R8)
         J     SCAN1530
SCAN1522 EQU   *
         LA    RE,SCAN1522
         LA    R0,L'NUMCLS2(,R8)   A. NO, COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'NUMCLS2,R8),NUMCLS2  NUMCLS(PRIM)
         LA    R8,L'NUMCLS2(,R8)
         SPACE 1
SCAN1530 EQU   *         DBCS|NODBCS
         LA    RE,SCAN1530
         LA    R0,L'DBCS(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DBCS,R8),DBCS     DBCS
         TM    PSICCO05,#PSIDBCS   Q. ON
         JO    SCAN1532            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1532 EQU   *
         LA    R8,L'DBCS(,R8)
         SPACE 1
SCAN1540 EQU   *         AWO|NOAWO
         LA    RE,SCAN1540
         LA    R0,L'AWO(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'AWO,R8),AWO
         TM    PSICCO05,#PSIAWO    Q. ON
         JO    SCAN1542            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1542 EQU   *
         LA    R8,L'AWO(,R8)
         SPACE 1
SCAN1550 EQU   *         EVENTS|NOEVENTS
         CLC   TSVRM(L'CVRM2),CVRM2     Q. = COBOL II
         JNE   SCAN1560                 A. NO, BYPASS
         LA    RE,SCAN1550
         LA    R0,L'EVENTS(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'EVENTS,R8),EVENTS
         TM    PSICCO05,#PSIEVNT   Q. ON
         JO    SCAN1552            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1552 EQU   *
         LA    R8,L'EVENTS(,R8)
         SPACE 1
SCAN1560 EQU   *         ADATA|NOADATA
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN1590                 A. NO, BYPASS
         LA    RE,SCAN1560
         LA    R0,L'ADATA(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'ADATA,R8),ADATA   ADATA
         TM    PSICCO05,#PSIADTA   Q. ON
         JO    SCAN1562            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1562 EQU   *
         LA    R8,L'ADATA(,R8)
         SPACE 1
SCAN1570 EQU   *         CURR|NOCURR
         LA    RE,SCAN1570
         LA    R0,L'CURRENCY(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'CURRENCY,R8),CURRENCY       CURR
         TM    PSICCO05,#PSICURR   Q. ON
         JO    SCAN1572            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1572 EQU   *
         LA    R8,L'CURRENCY(,R8)
         SPACE 1
SCAN1580 EQU   *         CLASS|PROGRAM
         TM    PSICCO05,#PSICLS    Q. ON
         JNO   SCAN1582            A. NO
         LA    RE,SCAN1580
         LA    R0,L'OBJTYP1(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OBJTYP1,R8),OBJTYP1  CLASS
         LA    R8,L'OBJTYP1(,R8)
         OI    LMFLAG2,#LMOOP
         J     SCAN1590
SCAN1582 EQU   *
         LA    RE,SCAN1582
         LA    R0,L'OBJTYP2(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OBJTYP2,R8),OBJTYP2  PROGRAM
         LA    R8,L'OBJTYP2(,R8)
         SPACE 1
SCAN1590 EQU   *         VS(C|S)
         CLC   TSVRM(L'CVRM6#1),CVRM6#1 Q. >= COBOL V6.1
         JL    SCAN1600                 A. NO, BYPASS
         TM    PSIEDI08,#PSIVS     Q. ON
         JNO   SCAN1592            A. NO
         LA    RE,SCAN1590
         LA    R0,L'VSOPNFS1(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'VSOPNFS1,R8),VSOPNFS1  VS(C)
         LA    R8,L'VSOPNFS1(,R8)
         J     SCAN1600
SCAN1592 EQU   *
         LA    RE,SCAN1592
         LA    R0,L'VSOPNFS2(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'VSOPNFS2,R8),VSOPNFS2  VS(S)
         LA    R8,L'VSOPNFS2(,R8)
         SPACE 1
SCAN1600 EQU   *         INL|NOINL
         CLC   TSVRM(L'CVRM6#2),CVRM6#2 Q. >= COBOL V6.2
         JL    SCAN1610                 A. NO, BYPASS
         LA    RE,SCAN1600
         LA    R0,L'INLINE(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'INLINE,R8),INLINE
         TM    PSIPDI23,#PSIINL    Q. ON
         JO    SCAN1602            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1602 EQU   *
         LA    R8,L'INLINE(,R8)
         SPACE 1
SCAN1610 EQU   *         RMODE(ANY|24)
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN1770                 A. NO, BYPASS
         TM    PSICCO26,#PSIRMOD   Q. ON
         JNO   SCAN1612            A. NO
         LA    RE,SCAN1610
         LA    R0,L'RMODE1(,R8)    A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'RMODE1,R8),RMODE1    RMODE(ANY)
         LA    R8,L'RMODE1(,R8)
         J     SCAN1620
SCAN1612 EQU   *
         LA    RE,SCAN1612
         LA    R0,L'RMODE2(,R8)    A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'RMODE2,R8),RMODE2    RMODE(24)
         LA    R8,L'RMODE2(,R8)
         SPACE 1
SCAN1620 EQU   *         INTDATE(LILIAN)
         TM    PSICCO26,#PSIINTD   Q. ON
         JNO   SCAN1622            A. NO
         LA    RE,SCAN1620
         LA    R0,L'INTDATE1(,R8)  A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'INTDATE1,R8),INTDATE1     INTDATE(LILIAN)
         LA    R8,L'INTDATE1(,R8)
         J     SCAN1630
SCAN1622 EQU   *         INTDATE(ANSI)
         LA    RE,SCAN1622
         LA    R0,L'INTDATE2(,R8)  A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'INTDATE2,R8),INTDATE2     INTDATE(ANSI)
         LA    R8,L'INTDATE2(,R8)
         SPACE 1
SCAN1630 EQU   *         PGMN(CO)
         TM    PSICCO27,#PSILUP+#PSILMX Q. PGMN(LU) OR PGMN(LM)
         JNZ   SCAN1632                 A. YES,
         LA    RE,SCAN1630
         LA    R0,L'PGMNCO(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'PGMNCO,R8),PGMNCO    PGMN(CO)
         LA    R8,L'PGMNCO(,R8)
         J     SCAN1640
SCAN1632 EQU   *         PGMN(LU)
         TM    PSICCO27,#PSILUP    Q. ON
         JNO   SCAN1634            A. NO
         LA    RE,SCAN1632
         LA    R0,L'PGMNLU(,R8)    A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'PGMNLU,R8),PGMNLU    PGMN(LU)
         LA    R8,L'PGMNLU(,R8)
         J     SCAN1640
SCAN1634 EQU   *         PGMN(LM)
         TM    PSICCO27,#PSILMX    Q. ON
         JNO   SCAN1640            A. NO
         LA    RE,SCAN1634
         LA    R0,L'PGMNLM(,R8)    A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'PGMNLM,R8),PGMNLM    PGMN(LM)
         LA    R8,L'PGMNLM(,R8)
SCAN1640 EQU   *         DLL|NODLL
         LA    RE,SCAN1640
         LA    R0,L'DLL(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DLL,R8),DLL       DLL
         TM    PSICCO27,#PSIDLL    Q. ON
         JO    SCAN1642            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1642 EQU   *
         LA    R8,L'DLL(,R8)
         SPACE 1
SCAN1650 EQU   *         EXP|NOEXP
         LA    RE,SCAN1650
         LA    R0,L'EXPORT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'EXPORT,R8),EXPORT
         TM    PSICCO27,#PSIXPRT   Q. ON
         JO    SCAN1652            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1652 EQU   *
         LA    R8,L'EXPORT(,R8)
         SPACE 1
SCAN1660 EQU   *         DP|NODP
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JNL   SCAN1670                 A. NO, BYPASS
         LA    RE,SCAN1660
         LA    R0,L'DATEPROC(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DATEPROC,R8),DATEPROC
         TM    PSICCO27,#PSIDAPR   Q. ON
         JO    SCAN1662            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1662 EQU   *
         LA    R8,L'DATEPROC(,R8)
         SPACE 1
SCAN1664 EQU   *         YW(nnnn)
         TM    PSICCO27,#PSIDAPR   Q. ON
         JNO   SCAN1670            A. YES
         LA    RE,SCAN1664
         LA    R0,L'YW(,R8)        COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'YW,R8),YW
         MVC   3(L'YEARWIN,R8),YEARWIN
         LA    R8,L'YEARWIN(,R8)
         SPACE 1
SCAN1670 EQU   *         AR(C|E)
***      CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
***      JNL   SCAN1730                 A. NO, BYPASS
         TM    PSICCO27,#PSIARTH   Q. ON
         JNO   SCAN1672            A. NO
         LA    RE,SCAN1670
         LA    R0,L'ARITH1(,R8)    A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'ARITH1,R8),ARITH1    AR(E)
         LA    R8,L'ARITH1(,R8)
         J     SCAN1680
SCAN1672 EQU   *
         LA    RE,SCAN1672
         LA    R0,L'ARITH2(,R8)    A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'ARITH2,R8),ARITH2    AR(C)
         LA    R8,L'ARITH2(,R8)
         SPACE 1
SCAN1680 EQU   *         THREAD|NOTHREAD
         LA    RE,SCAN1680
         LA    R0,L'THREAD(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'THREAD,R8),THREAD      THREAD
         TM    PSICCO27,#PSITHRD   Q. ON
         JO    SCAN1682            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1682 EQU   *
         LA    R8,L'THREAD(,R8)
         SPACE 1
SCAN1700 EQU   *         SQL|NOSQL
         LA    RE,SCAN1700
         LA    R0,L'SQL(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SQL,R8),SQL       SQL
         TM    PSICCO28,#PSISQL    Q. ON
         JO    SCAN1702            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1702 EQU   *
         LA    R8,L'SQL(,R8)
         SPACE 1
SCAN1710 EQU   *         CICS|NOCICS
         LA    RE,SCAN1710
         LA    R0,L'CICS(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'CICS,R8),CICS
         TM    PSICCO28,#PSICICS   Q. ON
         JO    SCAN1712            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1712 EQU   *
         LA    R8,L'CICS(,R8)
         SPACE 1
SCAN1720 EQU   *         MD|NOMD
         LA    RE,SCAN1720
         LA    R0,L'MDECK(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'MDECK,R8),MDECK
         TM    PSICCO28,#PSIMDK    Q. ON
         JO    SCAN1722            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1722 EQU   *
         LA    R8,L'MDECK(,R8)
         SPACE 1
SCAN1730 EQU   *         SQLLC|NOSQLLC
***      CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3.4
***      JNL   SCAN1740                 A. NO, BYPASS
         LA    RE,SCAN1730
         LA    R0,L'SQLCCSID(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SQLCCSID,R8),SQLCCSID
         TM    PSICCO28,#PSICCS    Q. ON
         JO    SCAN1732            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1732 EQU   *
         LA    R8,L'SQLCCSID(,R8)
         SPACE 1
SCAN1740 EQU   *         OPTFILE|NOOPTFILE
         LA    RE,SCAN1740
         LA    R0,L'OPTFILE(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'OPTFILE,R8),OPTFILE
         TM    PSICCO28,#PSIOPTF   Q. ON
         JO    SCAN1742            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1742 EQU   *
         LA    R8,L'OPTFILE(,R8)
         SPACE 1
SCAN1750 EQU   *         XP(X)
         TM    PSICCO28,#PSIXMLP   Q. ON
         JNO   SCAN1752            A. NO
         LA    RE,SCAN1750
         LA    R0,L'XMLP1(,R8)     A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'XMLP1,R8),XMLP1 XP(X)
         LA    R8,L'XMLP1(,R8)
         J     SCAN1760
SCAN1752 EQU   *         XP(C)
         LA    RE,SCAN1752
         LA    R0,L'XMLP2(,R8)     A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'XMLP2,R8),XMLP2 XP(C)
         LA    R8,L'XMLP2(,R8)
SCAN1760 EQU   *         BLOCK0|NOBLOCK0
         LA    RE,SCAN1760
         LA    R0,L'BLOCK0(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'BLOCK0,R8),BLOCK0      BLOCK0
         TM    PSICCO28,#PSIBLK0   Q. ON
         JO    SCAN1762            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1762 EQU   *
         LA    R8,L'OPTFILE(,R8)
         SPACE 1
SCAN1770 EQU   *         end of COBOL V3 begin of COBOL V5+
SCAN1780 EQU   *         DS(S)
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JL    SCAN1990                 A. NO, BYPASS
         TM    PSICCO28,#PSIDSGN   Q. ON
         JNO   SCAN1782            A. NO
         LA    RE,SCAN1780
         LA    R0,L'DSPSGN1(,R8)   A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'DSPSGN1,R8),DSPSGN1  DS(S)
         LA    R8,L'DSPSGN1(,R8)
         J     SCAN1790
SCAN1782 EQU   *         DS(C)
         LA    RE,SCAN1782
         LA    R0,L'DSPSGN2(,R8)   A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'DSPSGN2,R8),DSPSGN2  DS(C)
         LA    R8,L'DSPSGN2(,R8)
         SPACE 1
SCAN1790 EQU   *         SO|NOSO
         LA    RE,SCAN1790
         LA    R0,L'STGOPT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'STGOPT,R8),STGOPT
         TM    PSIPDI29,#PSISTGO   Q. ON
         JO    SCAN1792            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1792 EQU   *
         LA    R8,L'STGOPT(,R8)
         SPACE 1
SCAN1800 EQU   *         AFP(  VOLATILE)
         LA    RE,SCAN1800
         LA    R0,L'AFP(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'AFP,R8),AFP     AFP(  VOLATILE)
         TM    PSIPDI29,#PSIAFP    Q. ON
         JO    SCAN1802            A. YES
         MVC   4(L'NO,R8),NO       A. NO
SCAN1802 EQU   *
         LA    R8,L'AFP(,R8)
         SPACE 1
SCAN1810 EQU   *         HGPR(  PRESERVE)
         LA    RE,SCAN1810
         LA    R0,L'HGPR(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'HGPR,R8),HGPR   HGPR(  PRESERVE)
         TM    PSIPDI29,#PSIHGPR   Q. ON
         JO    SCAN1812            A. YES
         MVC   5(L'NO,R8),NO       A. NO
SCAN1812 EQU   *
         LA    R8,L'HGPR(,R8)
         SPACE 1
SCAN1820 EQU   *         QUA(C|E)
         CLC   TSVRM(L'CVRM5#2),CVRM5#2 Q. >= COBOL V5.2
         JL    SCAN1830                 A. NO, BYPASS
         TM    PSICCO30,#PSIQUA    Q. ON
         JNO   SCAN1822            A. NO
         LA    RE,SCAN1820
         LA    R0,L'QUALIFY1(,R8)  A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'QUALIFY1,R8),QUALIFY1     QUA(E)
         LA    R8,L'QUALIFY1(,R8)
         J     SCAN1830
SCAN1822 EQU   *
         LA    RE,SCAN1822
         LA    R0,L'QUALIFY2(,R8)  A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'QUALIFY2,R8),QUALIFY2     QUA(C)
         LA    R8,L'QUALIFY2(,R8)
         SPACE 1
SCAN1830 EQU   *         VLR(C|S)
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1.1
         JL    SCAN1840                 A. NO, BYPASS
         TM    PSICCO30,#PSIFVLR   Q. ON
         JNO   SCAN1832            A. NO
         LA    RE,SCAN1830
         LA    R0,L'VLR1(,R8)      A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'VLR1,R8),VLR1   VLR(C)
         LA    R8,L'VLR1(,R8)
         J     SCAN1840
SCAN1832 EQU   *
         LA    RE,SCAN1832
         LA    R0,L'VLR2(,R8)      A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'VLR2,R8),VLR2   VLR(S)
         LA    R8,L'VLR2(,R8)
         SPACE 1
SCAN1840 EQU   *         CPYR|NOCPYR
         CLC   TSVRM(L'CVRM5#2),CVRM5#2 Q. >= COBOL V5.2
         JL    SCAN1870                 A. NO, BYPASS
         LA    RE,SCAN1840
         LA    R0,L'CPYR(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'CPYR,R8),CPYR
         TM    PSICCO30,#PSICPYR   Q. ON
         JO    SCAN1842            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1842 EQU   *
         LA    R8,L'CPYR(,R8)
         SPACE 1
SCAN1850 EQU   *         SERV|NOSERV
         LA    RE,SCAN1850
         LA    R0,L'SERV(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'SERV,R8),SERV
         TM    PSICCO30,#PSISVCS   Q. ON
         JO    SCAN1852            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1852 EQU   *
         LA    R8,L'SERV(,R8)
         SPACE 1
SCAN1860 EQU   *         ZD(MIG)
         TM    PSICCO30,#PSIZDMI   Q. ON
         JNO   SCAN1862            A. YES
         LA    RE,SCAN1860
         LA    R0,L'ZONEDAT1(,R8)
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'ZONEDAT1,R8),ZONEDAT1     ZD(MIG)
         LA    R8,L'ZONEDAT1(,R8)
         J     SCAN1870
SCAN1862 EQU   *         ZD(  PFD)
         LA    RE,SCAN1862
         LA    R0,L'ZONEDATA(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'ZONEDATA,R8),ZONEDATA     ZD(  PFD)
         TM    PSICCO30,#PSIZDNP   Q. ON
         JNO   SCAN1864            A. NO
         MVC   3(L'NO,R8),NO       A. YES
SCAN1864 EQU   *
         LA    R8,L'ZONEDATA(,R8)
         SPACE 1
SCAN1870 EQU   *         NONC
         CLC   TSVRM(L'CVRM6#2),CVRM6#2 Q. >= COBOL V6.2
         JL    SCAN1990                 A. NO, BYPASS
         TM    PSICCO31,#PSINCZO+#PSINCPA+#PSINCBI
         JNO   SCAN1890
         LA    RE,SCAN1870
         LA    R0,L'NUMCHK(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'NUMCHK,R8),NUMCHK    NONC
         LA    R8,L'NUMCHK(,R8)
         J     SCAN1890
SCAN1872 EQU   *         NC(  ZON)
         LA    RE,SCAN1872
         LA    R0,L'NUMCHK1(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'NUMCHK1,R8),NUMCHK1  NC(  ZON)
         TM    PSICCO31,#PSINCZO   Q. ON
         JNO   SCAN1874            A. NO
         MVC   3(L'NO,R8),NO       A. YES
SCAN1874 EQU   *
         LA    R8,L'NUMCHK1(,R8)
SCAN1876 EQU   *         NC(  PAC)
         LA    RE,SCAN1876
         LA    R0,L'NUMCHK2(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'NUMCHK2,R8),NUMCHK2  NC(  PAC)
         TM    PSICCO31,#PSINCPA   Q. ON
         JNO   SCAN1878            A. NO
         MVC   3(L'NO,R8),NO       A. YES
SCAN1878 EQU   *
         LA    R8,L'NUMCHK2(,R8)
SCAN1880 EQU   *         NC(  BIN)
         LA    RE,SCAN1880
         LA    R0,L'NUMCHK3(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'NUMCHK3,R8),NUMCHK3  NC(  BIN)
         TM    PSICCO31,#PSINCBI   Q. ON
         JNO   SCAN1882            A. NO
         MVC   3(L'NO,R8),NO       A. YES
SCAN1882 EQU   *
         LA    R8,L'NUMCHK3(,R8)
SCAN1884 EQU   *         NC(ABD)
         TM    PSICCO31,#PSINCAB   Q. ON
         JNO   SCAN1886            A. NO
         LA    RE,SCAN1884
         LA    R0,L'NUMCHK4(,R8)   A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'NUMCHK4,R8),NUMCHK4  NC(ABD)
         LA    R8,L'NUMCHK4(,R8)
         J     SCAN1890
SCAN1886 EQU   *         NC(MSG)
         LA    RE,SCAN1886
         LA    R0,L'NUMCHK5(,R8)   A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'NUMCHK5,R8),NUMCHK5  NC(MSG)
         LA    R8,L'NUMCHK5(,R8)
         SPACE 1
SCAN1890 EQU   *         PC|NOPC
         LA    RE,SCAN1890
         LA    R0,L'PRMCHK(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'PRMCHK,R8),PRMCHK
         TM    PSICCO31,#PSIPC     Q. ON
         JO    SCAN1892            A. YES
         MVC   0(L'NO,R8),NO       A. NO
SCAN1892 EQU   *
         LA    R8,L'PRMCHK(,R8)
SCAN1894 EQU   *         PC(ABD)
         TM    PSICCO31,#PSIPC     Q. ON
         JNO   SCAN1900            A. YES
         TM    PSICCO31,#PSIPCAB   Q. ON
         JNO   SCAN1896            A. NO
         LA    RE,SCAN1894
         LA    R0,L'PRMCHK1(,R8)   A. YES
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A  SET UP NEW LINE
         MVC   0(L'PRMCHK1,R8),PRMCHK1  PC(ABD)
         LA    R8,L'PRMCHK1(,R8)
         J     SCAN1900
SCAN1896 EQU   *         PC(MSG)
         LA    RE,SCAN1896
         LA    R0,L'PRMCHK2(,R8)   A. NO
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN1010            A. SET UP NEW LINE
         MVC   0(L'PRMCHK2,R8),PRMCHK2  PC(MSG)
         LA    R8,L'PRMCHK2(,R8)
SCAN1900 EQU   *         IC|NOIC
         SPACE 1
SCAN1990 EQU   *
         LM    RE,RC,12(RD)
         BR    RE                  RETURN
         SPACE 1
         DROP  R5,R6,R9,RD
         DROP  RA,RB
         TITLE 'SCAN FOR COBOL PROGRAM TYPE INFO'
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
* R0       EQU   0              WORK REG
* R1       EQU   1              NOT USED
* R2       EQU   2              NOT USED
* R3       EQU   3              NOT USED
* R4       EQU   4              NOT USED
* R5       EQU   5              BAR 2 OF STATIC STORAGE
* R6       EQU   6              BAR OF PSI
* R7       EQU   7              ADDR OF END OF PLINE
* R8       EQU   8              BAR OF PLINE POSITION
* R9       EQU   9              BAR OF STATIC STORAGE
* RA       EQU   10             PROGRAM BAR 1
* RB       EQU   11             RESERVED FOR BAR 2
* RC       EQU   12             LE CAA BAR
* RD       EQU   13             ADDR OF RSA
* RE       EQU   14             RETURN ADDR
* RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
* --------------------------------------------------------- *
* SCAN LOAD MODULE TO DETERMINE VERBS, ETC.
* --------------------------------------------------------- *
         SPACE 1
         DS    0D
SCAN2    CSECT
SCAN2    RMODE ANY
SCAN2    AMODE ANY
         ENTRY SCAN2
         USING SCAN2,RF
         STM   RE,RC,12(RD)
         LR    RA,RF
         LR    RB,RA
         AHI   RB,4096
         DROP  RF
         USING SCAN2,RA,RB
         USING CEEDSA,RD
         USING STATIC,R9,R5
         SPACE 1
SCAN2000 EQU   *
         L     R1,EPADDR
         LA    R6,SIG_SIB          POINT TO PSI
         USING PSI,R6
         SPACE 1
         LA    R8,D1OPTS
         LA    R7,D1OPTS+L'D1OPTS
         J     SCAN2100
SCAN2010 EQU   *
         LA    R0,D1OPTS+L'D1OPTS
         CR    R0,R7
         JE    SCAN2012
         LA    R0,D2OPTS+L'D2OPTS
         CR    R0,R7
         JE    SCAN2014
         LA    R0,D3OPTS+L'D3OPTS
         CR    R0,R7
         JE    SCAN2016
         LA    R0,D4OPTS+L'D4OPTS
         CR    R0,R7
         JE    SCAN2018
         LA    R0,D5OPTS+L'D5OPTS
         CR    R0,R7
         JE    SCAN2020
         LA    R0,D6OPTS+L'D6OPTS
         CR    R0,R7
         JE    SCAN2022
         LA    R0,D7OPTS+L'D7OPTS
         CR    R0,R7
         JE    SCAN2024
         LA    R0,D8OPTS+L'D8OPTS
         CR    R0,R7
         JE    SCAN2026
         LA    R0,D9OPTS+L'D9OPTS
         CR    R0,R7
         JE    SCAN2028
         LA    R0,DAOPTS+L'DAOPTS
         CR    R0,R7
         JE    SCAN2030
         DC    H'0'
SCAN2012 EQU   *
         LA    R8,D2OPTS
         LA    R7,D2OPTS+L'D2OPTS
         BR    RE
SCAN2014 EQU   *
         LA    R8,D3OPTS
         LA    R7,D3OPTS+L'D3OPTS
         BR    RE
SCAN2016 EQU   *
         LA    R8,D4OPTS
         LA    R7,D4OPTS+L'D4OPTS
         BR    RE
SCAN2018 EQU   *
         LA    R8,D5OPTS
         LA    R7,D5OPTS+L'D5OPTS
         BR    RE
SCAN2020 EQU   *
         LA    R8,D6OPTS
         LA    R7,D6OPTS+L'D6OPTS
         BR    RE
SCAN2022 EQU   *
         LA    R8,D7OPTS
         LA    R7,D7OPTS+L'D7OPTS
         BR    RE
SCAN2024 EQU   *
         LA    R8,D8OPTS
         LA    R7,D8OPTS+L'D8OPTS
         BR    RE
SCAN2026 EQU   *
         LA    R8,D9OPTS
         LA    R7,D9OPTS+L'D9OPTS
         BR    RE
SCAN2028 EQU   *
         LA    R8,DAOPTS
         LA    R7,DAOPTS+L'DAOPTS
         BR    RE
SCAN2030 EQU   *
         LA    R8,DBOPTS
         LA    R7,DBOPTS+L'DBOPTS
         BR    RE
         SPACE 1
SCAN2100 EQU   *         ACCEPT
         TM    PSIPDV09,#PSIACC    Q. ON
         JNO   SCAN2110            A. YES
         LA    RE,SCAN2100
         LA    R0,L'ACCEPT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ACCEPT,R8),ACCEPT
         LA    R8,L'ACCEPT(,R8)
         SPACE 1
SCAN2110 EQU   *         ADD
         TM    PSIPDV09,#PSIADD    Q. ON
         JNO   SCAN2120            A. NO
         LA    RE,SCAN2110
         LA    R0,L'ADD(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A  SET UP NEW LINE
         MVC   0(L'ADD,R8),ADD
         LA    R8,L'ADD(,R8)
         SPACE 1
SCAN2120 EQU   *         ALTER
         TM    PSIPDV09,#PSIALTR   Q. ON
         JNO   SCAN2130            A. NO
         LA    RE,SCAN2120
         LA    R0,L'ALTER(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ALTER,R8),ALTER
         LA    R8,L'ALTER(,R8)
         SPACE 1
SCAN2130 EQU   *         CALL
         TM    PSIPDV09,#PSICALL   Q. ON
         JNO   SCAN2140            A. NO
         LA    RE,SCAN2130
         LA    R0,L'CALL(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CALL,R8),CALL
         LA    R8,L'CALL(,R8)
         SPACE 1
SCAN2140 EQU   *         CANCEL
         TM    PSIPDV09,#PSICAN    Q. ON
         JNO   SCAN2160            A. NO
         LA    RE,SCAN2140
         LA    R0,L'CANCEL(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CANCEL,R8),CANCEL
         LA    R8,L'CANCEL(,R8)
         SPACE 1
SCAN2160 EQU   *         CLOSE
         TM    PSIPDV09,#PSICLO    Q. ON
         JNO   SCAN2200            A. NO
         LA    RE,SCAN2160
         LA    R0,L'CLOSE(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CLOSE,R8),CLOSE
         LA    R8,L'CLOSE(,R8)
         SPACE 1
SCAN2200 EQU   *         COMPUTE
         TM    PSIPDV10,#PSICMP    Q. ON
         JNO   SCAN2220            A. NO
         LA    RE,SCAN2200
         LA    R0,L'COMPUTE(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'COMPUTE,R8),COMPUTE
         LA    R8,L'COMPUTE(,R8)
         SPACE 1
SCAN2220 EQU   *         DELETE
         TM    PSIPDV10,#PSIDEL    Q. ON
         JNO   SCAN2240            A. NO
         LA    RE,SCAN2220
         LA    R0,L'DELETE(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DELETE,R8),DELETE
         LA    R8,L'DELETE(,R8)
         SPACE 1
SCAN2240 EQU   *         DISPLAY
         TM    PSIPDV10,#PSIDSPL   Q. ON
         JNO   SCAN2250            A. NO
         LA    RE,SCAN2240
         LA    R0,L'DISPLAY(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DISPLAY,R8),DISPLAY
         LA    R8,L'DISPLAY(,R8)
         SPACE 1
SCAN2250 EQU   *         DIVIDE
         TM    PSIPDV10,#PSIDIV    Q. ON
         JNO   SCAN2310            A. NO
         LA    RE,SCAN2250
         LA    R0,L'DIVIDE(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DIVIDE,R8),DIVIDE
         LA    R8,L'DIVIDE(,R8)
         SPACE 1
SCAN2310 EQU   *         END-PERFORM
         TM    PSIPDV11,#PSIEPER   Q. ON
         JNO   SCAN2320            A. NO
         LA    RE,SCAN2310
         LA    R0,L'ENDPFRM(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDPFRM,R8),ENDPFRM
         LA    R8,L'ENDPFRM(,R8)
         SPACE 1
SCAN2320 EQU   *         ENTER
         TM    PSIPDV11,#PSINTER   Q. ON
         JNO   SCAN2330            A. NO
         LA    RE,SCAN2320
         LA    R0,L'ENTER(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENTER,R8),ENTER
         LA    R8,L'ENTER(,R8)
         SPACE 1
SCAN2330 EQU   *         ENTRY
         TM    PSIPDV11,#PSINTRY   Q. ON
         JNO   SCAN2340            A. NO
         LA    RE,SCAN2330
         LA    R0,L'ENTRY(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENTRY,R8),ENTRY
         LA    R8,L'ENTRY(,R8)
         SPACE 1
SCAN2340 EQU   *         EXIT
         TM    PSIPDV11,#PSIEXIT   Q. ON
         JNO   SCAN2350            A. NO
         LA    RE,SCAN2340
         LA    R0,L'EXIT(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'EXIT,R8),EXIT
         LA    R8,L'EXIT(,R8)
         SPACE 1
SCAN2350 EQU   *         EXEC
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN2360                 A. NO, BYPASS
         TM    PSIPDV11,#PSIEXEC   Q. ON
         JNO   SCAN2360            A. NO
         LA    RE,SCAN2350
         LA    R0,L'EXEC(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'EXEC,R8),EXEC
         LA    R8,L'EXEC(,R8)
         SPACE 1
SCAN2360 EQU   *         GO TO
         TM    PSIPDV11,#PSIGOTO   Q. ON
         JNO   SCAN2370            A. NO
         LA    RE,SCAN2360
         LA    R0,L'GOTO(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'GOTO,R8),GOTO
         LA    R8,L'GOTO(,R8)
         SPACE 1
SCAN2370 EQU   *         IF
         TM    PSIPDV11,#PSIIF     Q. ON
         JNO   SCAN2400            A. NO
         LA    RE,SCAN2370
         LA    R0,L'IF(,R8)        COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'IF,R8),IF
         LA    R8,L'IF(,R8)
         SPACE 1
SCAN2400 EQU   *         INITIALIZE
         TM    PSIPDV12,#PSIINTZ   Q. ON
         JNO   SCAN2410            A. NO
         LA    RE,SCAN2400
         LA    R0,L'INITLIZE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'INITLIZE,R8),INITLIZE
         LA    R8,L'INITLIZE(,R8)
         SPACE 1
SCAN2410 EQU   *         INVOKE
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN2420                 A. NO, BYPASS
         TM    PSIPDV12,#PSINVK    Q. ON
         JNO   SCAN2420            A. NO
         LA    RE,SCAN2410
         LA    R0,L'INVOKE(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'INVOKE,R8),INVOKE
         LA    R8,L'INVOKE(,R8)
         SPACE 1
SCAN2420 EQU   *         INSPECT
         TM    PSIPDV12,#PSINSP    Q. ON
         JNO   SCAN2430            A. NO
         LA    RE,SCAN2420
         LA    R0,L'INSPECT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'INSPECT,R8),INSPECT
         LA    R8,L'INSPECT(,R8)
         SPACE 1
SCAN2430 EQU   *         MERGE
         TM    PSIPDV12,#PSIMRGE   Q. ON
         JNO   SCAN2440            A. NO
         LA    RE,SCAN2430
         LA    R0,L'MERGE(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'MERGE,R8),MERGE
         LA    R8,L'MERGE(,R8)
         SPACE 1
SCAN2440 EQU   *         MOVE
         TM    PSIPDV12,#PSIMVC    Q. ON
         JNO   SCAN2450            A. NO
         LA    RE,SCAN2440
         LA    R0,L'MOVE(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'MOVE,R8),MOVE
         LA    R8,L'MOVE(,R8)
         SPACE 1
SCAN2450 EQU   *         MULTIPLY
         TM    PSIPDV12,#PSIMUL    Q. ON
         JNO   SCAN2460            A. NO
         LA    RE,SCAN2450
         LA    R0,L'MULTIPLY(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'MULTIPLY,R8),MULTIPLY
         LA    R8,L'MULTIPLY(,R8)
         SPACE 1
SCAN2460 EQU   *         OPEN
         TM    PSIPDV12,#PSIOPEN   Q. ON
         JNO   SCAN2470            A. NO
         LA    RE,SCAN2460
         LA    R0,L'OPEN(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'OPEN,R8),OPEN
         LA    R8,L'OPEN(,R8)
         SPACE 1
SCAN2470 EQU   *         PERFORM
         TM    PSIPDV12,#PSIPER    Q. ON
         JNO   SCAN2500            A. NO
         LA    RE,SCAN2470
         LA    R0,L'PERFORM(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'PERFORM,R8),PERFORM
         LA    R8,L'PERFORM(,R8)
         SPACE 1
SCAN2500 EQU   *         READ
         TM    PSIPDV13,#PSIRD     Q. ON
         JNO   SCAN2520            A. NO
         LA    RE,SCAN2500
         LA    R0,L'READ(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'READ,R8),READ
         LA    R8,L'READ(,R8)
         SPACE 1
SCAN2520 EQU   *         RELEASE
         TM    PSIPDV13,#PSIREL    Q. ON
         JNO   SCAN2530            A. NO
         LA    RE,SCAN2520
         LA    R0,L'RELEASE(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'RELEASE,R8),RELEASE
         LA    R8,L'RELEASE(,R8)
         SPACE 1
SCAN2530 EQU   *         RETURN
         TM    PSIPDV13,#PSIRET    Q. ON
         JNO   SCAN2540            A. NO
         LA    RE,SCAN2530
         LA    R0,L'RETURN(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'RETURN,R8),RETURN
         LA    R8,L'RETURN(,R8)
         SPACE 1
SCAN2540 EQU   *         REWRITE
         TM    PSIPDV13,#PSIRWR    Q. ON
         JNO   SCAN2550            A. NO
         LA    RE,SCAN2540
         LA    R0,L'REWRITE(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'REWRITE,R8),REWRITE
         LA    R8,L'REWRITE(,R8)
         SPACE 1
SCAN2550 EQU   *         SEARCH
         TM    PSIPDV13,#PSISRH    Q. ON
         JNO   SCAN2570            A. NO
         LA    RE,SCAN2550
         LA    R0,L'SEARCH(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SEARCH,R8),SEARCH
         LA    R8,L'SEARCH(,R8)
         SPACE 1
SCAN2570 EQU   *         SET
         TM    PSIPDV13,#PSISET    Q. ON
         JNO   SCAN2600            A. NO
         LA    RE,SCAN2570
         LA    R0,L'SET(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SET,R8),SET
         LA    R8,L'SET(,R8)
         SPACE 1
SCAN2600 EQU   *         SORT
         TM    PSIPDV14,#PSISORT   Q. ON
         JNO   SCAN2610            A. NO
         LA    RE,SCAN2600
         LA    R0,L'SORT(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SORT,R8),SORT
         LA    R8,L'SORT(,R8)
         SPACE 1
SCAN2610 EQU   *         START
         TM    PSIPDV14,#PSISRT    Q. ON
         JNO   SCAN2620            A. NO
         LA    RE,SCAN2610
         LA    R0,L'START(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'START,R8),START
         LA    R8,L'START(,R8)
         SPACE 1
SCAN2620 EQU   *         STOP
         TM    PSIPDV14,#PSISTP    Q. ON
         JNO   SCAN2630            A. NO
         LA    RE,SCAN2620
         LA    R0,L'STOP(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'STOP,R8),STOP
         LA    R8,L'STOP(,R8)
         SPACE 1
SCAN2630 EQU   *         STRING
         TM    PSIPDV14,#PSISTR    Q. ON
         JNO   SCAN2640            A. NO
         LA    RE,SCAN2630
         LA    R0,L'STRING(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'STRING,R8),STRING
         LA    R8,L'STRING(,R8)
         SPACE 1
SCAN2640 EQU   *         SUBTRACT
         TM    PSIPDV14,#PSISUB    Q. ON
         JNO   SCAN2670            A. NO
         LA    RE,SCAN2640
         LA    R0,L'SUBTRACT(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SUBTRACT,R8),SUBTRACT
         LA    R8,L'SUBTRACT(,R8)
         SPACE 1
SCAN2670 EQU   *         UNSTRING
         TM    PSIPDV14,#PSIUST    Q. ON
         JNO   SCAN2700            A. NO
         LA    RE,SCAN2670
         LA    R0,L'UNSTRING(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'UNSTRING,R8),UNSTRING
         LA    R8,L'UNSTRING(,R8)
         SPACE 1
SCAN2700 EQU   *         USE
         TM    PSIPDV15,#PSIUSE    Q. ON
         JNO   SCAN2710            A. NO
         LA    RE,SCAN2700
         LA    R0,L'USE(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'USE,R8),USE
         LA    R8,L'USE(,R8)
         SPACE 1
SCAN2710 EQU   *         WRITE
         TM    PSIPDV15,#PSIWRT    Q. ON
         JNO   SCAN2720            A. NO
         LA    RE,SCAN2710
         LA    R0,L'WRITE(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'WRITE,R8),WRITE
         LA    R8,L'WRITE(,R8)
         SPACE 1
SCAN2720 EQU   *         CONTINUE
         TM    PSIPDV15,#PSICONT   Q. ON
         JNO   SCAN2730            A. NO
         LA    RE,SCAN2720
         LA    R0,L'CONTINUE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CONTINUE,R8),CONTINUE
         LA    R8,L'CONTINUE(,R8)
         SPACE 1
SCAN2730 EQU   *         END-ADD
         TM    PSIPDV15,#PSIEADD   Q. ON
         JNO   SCAN2740            A. NO
         LA    RE,SCAN2730
         LA    R0,L'ENDADD(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDADD,R8),ENDADD
         LA    R8,L'ENDADD(,R8)
         SPACE 1
SCAN2740 EQU   *         END-CALL
         TM    PSIPDV15,#PSIECAL   Q. ON
         JNO   SCAN2750            A. NO
         LA    RE,SCAN2740
         LA    R0,L'ENDCALL(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDCALL,R8),ENDCALL
         LA    R8,L'ENDCALL(,R8)
         SPACE 1
SCAN2750 EQU   *         END-COMPUTE
         TM    PSIPDV15,#PSIECMP   Q. ON
         JNO   SCAN2760            A. NO
         LA    RE,SCAN2750
         LA    R0,L'ENDCMPT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDCMPT,R8),ENDCMPT
         LA    R8,L'ENDCMPT(,R8)
         SPACE 1
SCAN2760 EQU   *         END-DELETE
         TM    PSIPDV15,#PSIEDEL   Q. ON
         JNO   SCAN2770            A. NO
         LA    RE,SCAN2760
         LA    R0,L'ENDDEL(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDDEL,R8),ENDDEL
         LA    R8,L'ENDDEL(,R8)
         SPACE 1
SCAN2770 EQU   *         END-DIVIDE
         TM    PSIPDV15,#PSIEDIV   Q. ON
         JNO   SCAN2800            A. NO
         LA    RE,SCAN2770
         LA    R0,L'ENDDIV(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDDIV,R8),ENDDIV
         LA    R8,L'ENDDIV(,R8)
         SPACE 1
SCAN2800 EQU   *         END-EVALUATE
         TM    PSIPDV16,#PSIEEVL   Q. ON
         JNO   SCAN2810            A. NO
         LA    RE,SCAN2800
         LA    R0,L'ENDEVAL(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDEVAL,R8),ENDEVAL
         LA    R8,L'ENDEVAL(,R8)
         SPACE 1
SCAN2810 EQU   *         END-IF
         TM    PSIPDV16,#PSIEIF    Q. ON
         JNO   SCAN2820            A. NO
         LA    RE,SCAN2810
         LA    R0,L'ENDIF(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDIF,R8),ENDIF
         LA    R8,L'ENDIF(,R8)
         SPACE 1
SCAN2820 EQU   *         END-MULTIPLY
         TM    PSIPDV16,#PSIEMUL   Q. ON
         JNO   SCAN2830            A. NO
         LA    RE,SCAN2820
         LA    R0,L'ENDMULT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDMULT,R8),ENDMULT
         LA    R8,L'ENDMULT(,R8)
         SPACE 1
SCAN2830 EQU   *         END-READ
         TM    PSIPDV16,#PSIERD    Q. ON
         JNO   SCAN2840            A. NO
         LA    RE,SCAN2830
         LA    R0,L'ENDREAD(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDREAD,R8),ENDREAD
         LA    R8,L'ENDREAD(,R8)
         SPACE 1
SCAN2840 EQU   *         END-RETURN
         TM    PSIPDV16,#PSIERET   Q. ON
         JNO   SCAN2850            A. NO
         LA    RE,SCAN2840
         LA    R0,L'ENDRETN(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDRETN,R8),ENDRETN
         LA    R8,L'ENDRETN(,R8)
         SPACE 1
SCAN2850 EQU   *         END-REWRITE
         TM    PSIPDV16,#PSIERWR   Q. ON
         JNO   SCAN2860            A. NO
         LA    RE,SCAN2850
         LA    R0,L'ENDRWR(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDRWR,R8),ENDRWR
         LA    R8,L'ENDRWR(,R8)
         SPACE 1
SCAN2860 EQU   *         END-SEARCH
         TM    PSIPDV16,#PSIESRH   Q. ON
         JNO   SCAN2870            A. NO
         LA    RE,SCAN2860
         LA    R0,L'ENDSRCH(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDSRCH,R8),ENDSRCH
         LA    R8,L'ENDSRCH(,R8)
         SPACE 1
SCAN2870 EQU   *         END-START
         TM    PSIPDV16,#PSIESRT   Q. ON
         JNO   SCAN2900            A. NO
         LA    RE,SCAN2870
         LA    R0,L'ENDSTRT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDSTRT,R8),ENDSTRT
         LA    R8,L'ENDSTRT(,R8)
         SPACE 1
SCAN2900 EQU   *         END-STRING
         TM    PSIPDV17,#PSIESTR   Q. ON
         JNO   SCAN2910            A. NO
         LA    RE,SCAN2900
         LA    R0,L'ENDSTR(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDSTR,R8),ENDSTR
         LA    R8,L'ENDSTR(,R8)
         SPACE 1
SCAN2910 EQU   *         END-SUBTRACT
         TM    PSIPDV17,#PSIESUB   Q. ON
         JNO   SCAN2920            A. NO
         LA    RE,SCAN2910
         LA    R0,L'ENDSUBT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDSUBT,R8),ENDSUBT
         LA    R8,L'ENDSUBT(,R8)
         SPACE 1
SCAN2920 EQU   *         END-UNSTRING
         TM    PSIPDV17,#PSIEUST   Q. ON
         JNO   SCAN2930            A. NO
         LA    RE,SCAN2920
         LA    R0,L'ENDUSTR(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDUSTR,R8),ENDUSTR
         LA    R8,L'ENDUSTR(,R8)
         SPACE 1
SCAN2930 EQU   *         END-WRITE
         TM    PSIPDV17,#PSIEWRT   Q. ON
         JNO   SCAN2940            A. NO
         LA    RE,SCAN2930
         LA    R0,L'ENDWRITE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDWRITE,R8),ENDWRITE
         LA    R8,L'ENDWRITE(,R8)
         SPACE 1
SCAN2940 EQU   *         GOBACK
         TM    PSIPDV17,#PSIGOBK   Q. ON
         JNO   SCAN2950            A. NO
         LA    RE,SCAN2940
         LA    R0,L'GOBACK(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'GOBACK,R8),GOBACK
         LA    R8,L'GOBACK(,R8)
         SPACE 1
SCAN2950 EQU   *         EVALUATE
         TM    PSIPDV17,#PSIEVL    Q. ON
         JNO   SCAN2970            A. NO
         LA    RE,SCAN2950
         LA    R0,L'EVALUATE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'EVALUATE,R8),EVALUATE
         LA    R8,L'EVALUATE(,R8)
         SPACE 1
SCAN2970 EQU   *         SERVICE
         TM    PSIPDV17,#PSISRVC   Q. ON
         JNO   SCAN2A00            A. NO
         LA    RE,SCAN2970
         LA    R0,L'SERVICE(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SERVICE,R8),SERVICE
         LA    R8,L'SERVICE(,R8)
         SPACE 1
SCAN2A00 EQU   *         END-INVOKE
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN2A40                 A. NO, BYPASS
         TM    PSIPDV18,#PSIENVK   Q. ON
         JNO   SCAN2A10            A. NO
         LA    RE,SCAN2A00
         LA    R0,L'ENDINVOK(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDINVOK,R8),ENDINVOK
         LA    R8,L'ENDINVOK(,R8)
         SPACE 1
SCAN2A10 EQU   *         END-EXEC
         TM    PSIPDV18,#PSIEXEQ   Q. ON
         JNO   SCAN2A20            A. NO
         LA    RE,SCAN2A10
         LA    R0,L'ENDEXEC(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDEXEC,R8),ENDEXEC
         LA    R8,L'ENDEXEC(,R8)
         SPACE 1
SCAN2A20 EQU   *         XML
         TM    PSIPDV18,#PSIXML    Q. ON
         JNO   SCAN2A30            A. NO
         LA    RE,SCAN2A20
         LA    R0,L'XML(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'XML,R8),XML
         LA    R8,L'XML(,R8)
         SPACE 1
SCAN2A30 EQU   *         END-XML
         TM    PSIPDV18,#PSIEXML   Q. ON
         JNO   SCAN2A40            A. NO
         LA    RE,SCAN2A30
         LA    R0,L'ENDXML(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDXML,R8),ENDXML
         LA    R8,L'ENDXML(,R8)
         SPACE 1
SCAN2A40 EQU   *         ALLOCATE
         CLC   TSVRM(L'CVRM6#1),CVRM6#1 Q. >= COBOL V6.1
         JL    SCAN2B00                 A. NO, BYPASS
         TM    PSIPDV18,#PSIALLO   Q. ON
         JNO   SCAN2A50            A. NO
         LA    RE,SCAN2A40
         LA    R0,L'ALLOCATE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ALLOCATE,R8),ALLOCATE
         LA    R8,L'ALLOCATE(,R8)
         SPACE 1
SCAN2A50 EQU   *         FREE
         TM    PSIPDV18,#PSIFREE   Q. ON
         JNO   SCAN2A60            A. NO
         LA    RE,SCAN2A50
         LA    R0,L'FREE(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'FREE,R8),FREE
         LA    R8,L'FREE(,R8)
         SPACE 1
SCAN2A60 EQU   *         JASON
         TM    PSIPDV18,#PSIJASO   Q. ON
         JNO   SCAN2A70            A. NO
         LA    RE,SCAN2A60
         LA    R0,L'JASON(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'JASON,R8),JASON
         LA    R8,L'JASON(,R8)
         SPACE 1
SCAN2A70 EQU   *         END-JASON
         TM    PSIPDV18,#PSIEJAS   Q. ON
         JNO   SCAN2B00            A. NO
         LA    RE,SCAN2A70
         LA    R0,L'ENDJASON(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ENDJASON,R8),ENDJASON
         LA    R8,L'ENDJASON(,R8)
         SPACE 1
SCAN2B00 EQU   *
         SPACE 1
SCAN2C00 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* SCAN LOAD MODULE TO DETERMINE DATA DIVISION ITEMS
* --------------------------------------------------------- *
         SPACE 1
SCAN2D00 EQU   *         QSAM/SAM
         TM    PSIDDI06,#PSIQSAM   Q. ON
         JNO   SCAN2D10            A. NO
         LA    RE,SCAN2D00
         LA    R0,L'QSAM(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'QSAM,R8),QSAM
         LA    R8,L'QSAM(,R8)
         SPACE 1
SCAN2D10 EQU   *         VSAM ESDS
         TM    PSIDDI06,#PSIESDS   Q. ON
         JNO   SCAN2D20            A. NO
         LA    RE,SCAN2D10
         LA    R0,L'ESDS(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ESDS,R8),ESDS
         LA    R8,L'ESDS(,R8)
         SPACE 1
SCAN2D20 EQU   *         VSAM KSDS
         TM    PSIDDI06,#PSIKSDS   Q. ON
         JNO   SCAN2D30            A. NO
         LA    RE,SCAN2D20
         LA    R0,L'KSDS(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'KSDS,R8),KSDS
         LA    R8,L'KSDS(,R8)
         SPACE 1
SCAN2D30 EQU   *         VSAM RRDS
         TM    PSIDDI06,#PSIRRDS   Q. ON
         JNO   SCAN2D40            A. NO
         LA    RE,SCAN2D30
         LA    R0,L'RRDS(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'RRDS,R8),RRDS
         LA    R8,L'RRDS(,R8)
         SPACE 1
SCAN2D40 EQU   *         CODE-SET
         TM    PSIDDI06,#PSICODE   Q. ON
         JNO   SCAN2D50            A. NO
         LA    RE,SCAN2D40
         LA    R0,L'CODESET(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CODESET,R8),CODESET
         LA    R8,L'CODESET(,R8)
         SPACE 1
SCAN2D50 EQU   *         SPANNED RECORDS
         TM    PSIDDI06,#PSISPAN   Q. ON
         JNO   SCAN2D60            A. NO
         LA    RE,SCAN2D50
         LA    R0,L'SPANREC(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SPANREC,R8),SPANREC
         LA    R8,L'SPANREC(,R8)
         SPACE 1
SCAN2D60 EQU   *         DBCS PIC G/N
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN2D62                 A. NO, BYPASS
         TM    PSIDDI06,#PSIDBGN   Q. ON
         JNO   SCAN2D70            A. NO
         LA    RE,SCAN2D60
         LA    R0,L'DBCSGN(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DBCSGN,R8),DBCSGN
         LA    R8,L'DBCSGN(,R8)
         J     SCAN2D70
         SPACE 1
SCAN2D62 EQU   *         DBCS PIC G
         CLC   TSVRM(L'CVRM2),CVRM2     Q. >= COBOL II
         JL    SCAN2D70                 A. NO, BYPASS
         TM    PSIDDI06,#PSIDBGN   Q. ON
         JNO   SCAN2D70            A. NO
         LA    RE,SCAN2D62
         LA    R0,L'DBCSG(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DBCSG,R8),DBCSG
         LA    R8,L'DBCSG(,R8)
         SPACE 1
SCAN2D70 EQU   *         ODO
         TM    PSIDDI06,#PSINODO   Q. ON
         JNO   SCAN2E00            A. NO
         LA    RE,SCAN2D70
         LA    R0,L'NODO(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'NODO,R8),NODO
         LA    R8,L'NODO(,R8)
         SPACE 1
SCAN2E00 EQU   *         SYNCHRONIZED
         TM    PSIDDI07,#PSISYNC   Q. ON
         JNO   SCAN2E10            A. NO
         LA    RE,SCAN2E00
         LA    R0,L'SYNC(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SYNC,R8),SYNC
         LA    R8,L'SYNC(,R8)
         SPACE 1
SCAN2E10 EQU   *         JUSTIFIED
         TM    PSIDDI07,#PSIJUST   Q. ON
         JNO   SCAN2E20            A. NO
         LA    RE,SCAN2E10
         LA    R0,L'JUST(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'JUST,R8),JUST
         LA    R8,L'JUST(,R8)
         SPACE 1
SCAN2E20 EQU   *         USAGE IS POINTER
         TM    PSIDDI07,#PSIUPTR   Q. ON
         JNO   SCAN2E30            A. NO
         LA    RE,SCAN2E20
         LA    R0,L'UADRPTR(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'UADRPTR,R8),UADRPTR
         LA    R8,L'UADRPTR(,R8)
         SPACE 1
SCAN2E30 EQU   *         COMPLEX ODO
         TM    PSIDDI07,#PSICODO   Q. ON
         JNO   SCAN2E40            A. NO
         LA    RE,SCAN2E30
         LA    R0,L'CODO(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CODO,R8),CODO
         LA    R8,L'CODO(,R8)
         SPACE 1
SCAN2E40 EQU   *         EXTERNAL FLOATING POINT
         TM    PSIDDI07,#PSIEFP    Q. ON
         JNO   SCAN2E50            A. NO
         LA    RE,SCAN2E40
         LA    R0,L'XFP(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'XFP,R8),XFP
         LA    R8,L'XFP(,R8)
         SPACE 1
SCAN2E50 EQU   *         INTERNAL FLOATING POINT
         TM    PSIDDI07,#PSIIFP    Q. ON
         JNO   SCAN2E60            A. NO
         LA    RE,SCAN2E50
         LA    R0,L'IFP(,R8)       COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'IFP,R8),IFP
         LA    R8,L'IFP(,R8)
         SPACE 1
SCAN2E60 EQU   *         LINE-SEQUENTIAL FILE
         TM    PSIDDI07,#PSILSEQ   Q. ON
         JNO   SCAN2E70            A. NO
         LA    RE,SCAN2E60
         LA    R0,L'LNESEQ(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'LNESEQ,R8),LNESEQ
         LA    R8,L'LNESEQ(,R8)
         SPACE 1
SCAN2E70 EQU   *         USAGE IS PROCEDURE-POINTER
         J     SCAN2E72
         TM    PSIDDI07,#PSIUPRO   Q. ON
         JNO   SCAN2E72            A. NO
         LA    RE,SCAN2E70
         LA    R0,L'UCDEPTR(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'UCDEPTR,R8),UCDEPTR
         LA    R8,L'UCDEPTR(,R8)
         SPACE 1
SCAN2E72 EQU   *         USAGE IS PROCEDURE/FUNCTION POINTER
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN2F00                 A. NO, BYPASS
         TM    PSIDDI07,#PSIUPRO   Q. ON
         JNO   SCAN2F00            A. NO
         LA    RE,SCAN2E72
         LA    R0,L'UCDEFUN(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'UCDEFUN,R8),UCDEFUN
         LA    R8,L'UCDEFUN(,R8)
         SPACE 2
* --------------------------------------------------------- *
* SCAN LOAD MODULE TO DETERMINE ENVIRONMENT DIVISION ITEMS
* --------------------------------------------------------- *
         SPACE 1
SCAN2F00 EQU   *         FILE STATUS
         TM    PSIEDI08,#PSIFILE   Q. ON
         JNO   SCAN2F10            A. NO
         LA    RE,SCAN2F00
         LA    R0,L'FILERC(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'FILERC,R8),FILERC
         LA    R8,L'FILERC(,R8)
         SPACE 1
SCAN2F10 EQU   *         RERUN
         TM    PSIEDI08,#PSIRRUN   Q. ON
         JNO   SCAN2F20            A. NO
         LA    RE,SCAN2F10
         LA    R0,L'RERUN(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'RERUN,R8),RERUN
         LA    R8,L'RERUN(,R8)
         SPACE 1
SCAN2F20 EQU   *         UPSI USED
         TM    PSIEDI08,#PSIUPSI   Q. ON
         JNO   SCAN2F30            A. NO
         LA    RE,SCAN2F20
         LA    R0,L'UPSI(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'UPSI,R8),UPSI
         LA    R8,L'UPSI(,R8)
         SPACE 1
SCAN2F30 EQU   *         WSOPT
         SPACE 2
* --------------------------------------------------------- *
* SCAN LOAD MODULE TO DETERMINE PROCEDURE DIVISION INFO
* --------------------------------------------------------- *
         SPACE 1
SCAN2G00 EQU   *         HEXADECIMAL LITERAL
         TM    PSIPDI21,#PSIXLIT   Q. ON
         JNO   SCAN2G10            A. NO
         LA    RE,SCAN2G00
         LA    R0,L'HEXLIT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'HEXLIT,R8),HEXLIT
         LA    R8,L'HEXLIT(,R8)
         SPACE 1
SCAN2G10 EQU   *         ALTER GO TO
         TM    PSIPDI21,#PSIAGT    Q. ON
         JNO   SCAN2G20            A. NO
         LA    RE,SCAN2G10
         LA    R0,L'ALTGOTO(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ALTGOTO,R8),ALTGOTO
         LA    R8,L'ALTGOTO(,R8)
         SPACE 1
SCAN2G20 EQU   *         I/O ERROR DECLARATIVE
         TM    PSIPDI21,#PSIIOED   Q. ON
         JNO   SCAN2G40            A. NO
         LA    RE,SCAN2G20
         LA    R0,L'IOERRDCL(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'IOERRDCL,R8),IOERRDCL
         LA    R8,L'IOERRDCL(,R8)
         SPACE 1
SCAN2G30 EQU   *         LABEL DECLARATIVE
         J     SCAN2G40
         TM    PSIPDI21,#PSILDCL   Q. ON
         JNO   SCAN2G40            A. NO
         LA    RE,SCAN2G30
         LA    R0,L'LABELDCL(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'LABELDCL,R8),LABELDCL
         LA    R8,L'LABELDCL(,R8)
         SPACE 1
SCAN2G40 EQU   *         DEBUGGING DECLARATIVE
         TM    PSIPDI21,#PSIDBUG   Q. ON
         JNO   SCAN2G50            A. NO
         LA    RE,SCAN2G40
         LA    R0,L'DEBUGDCL(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DEBUGDCL,R8),DEBUGDCL
         LA    R8,L'DEBUGDCL(,R8)
         SPACE 1
SCAN2G50 EQU   *         PROGRAM SEGMENTATION
         TM    PSIPDI21,#PSIPSEG   Q. ON
         JNO   SCAN2G60            A. NO
         LA    RE,SCAN2G50
         LA    R0,L'PGMSEG(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'PGMSEG,R8),PGMSEG
         LA    R8,L'PGMSEG(,R8)
         SPACE 1
SCAN2G60 EQU   *         OPEN...EXTEND
         TM    PSIPDI21,#PSIXTND   Q. ON
         JNO   SCAN2G70            A. NO
         LA    RE,SCAN2G60
         LA    R0,L'OPENXTND(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'OPENXTND,R8),OPENXTND
         LA    R8,L'OPENXTND(,R8)
         SPACE 1
SCAN2G70 EQU   *         EXIT PROGRAM
         TM    PSIPDI21,#PSIXPGM   Q. ON
         JNO   SCAN2H00            A. NO
         LA    RE,SCAN2G70
         LA    R0,L'EXITPGM(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'EXITPGM,R8),EXITPGM
         LA    R8,L'EXITPGM(,R8)
         SPACE 1
SCAN2H00 EQU   *         CALL LITERAL
         TM    PSIPDI22,#PSICLIT   Q. ON
         JNO   SCAN2H10            A. NO
         LA    RE,SCAN2H00
         LA    R0,L'CALLLIT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CALLLIT,R8),CALLLIT
         LA    R8,L'CALLLIT(,R8)
         SPACE 1
SCAN2H10 EQU   *         CALL IDENTIFIER
         TM    PSIPDI22,#PSICID    Q. ON
         JNO   SCAN2H20            A. NO
         LA    RE,SCAN2H10
         LA    R0,L'CALLID(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CALLID,R8),CALLID
         LA    R8,L'CALLID(,R8)
         SPACE 1
SCAN2H20 EQU   *         CALL...ON OVERFLOW
         TM    PSIPDI22,#PSICOVR   Q. ON
         JNO   SCAN2H30            A. NO
         LA    RE,SCAN2H20
         LA    R0,L'CALLOVR(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CALLOVR,R8),CALLOVR
         LA    R8,L'CALLOVR(,R8)
         SPACE 1
SCAN2H30 EQU   *         CALL...LENGTH OF
         TM    PSIPDI22,#PSICLEN   Q. ON
         JNO   SCAN2H40            A. NO
         LA    RE,SCAN2H30
         LA    R0,L'CALLLEN(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CALLLEN,R8),CALLLEN
         LA    R8,L'CALLLEN(,R8)
         SPACE 1
SCAN2H40 EQU   *         CALL...ADDRESS OF
         TM    PSIPDI22,#PSICADR   Q. ON
         JNO   SCAN2H50            A. NO
         LA    RE,SCAN2H40
         LA    R0,L'CALLADR(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CALLADR,R8),CALLADR
         LA    R8,L'CALLADR(,R8)
         SPACE 1
SCAN2H50 EQU   *         CLOSE...REEL/UNIT
         TM    PSIPDI22,#PSICLOU   Q. ON
         JNO   SCAN2H60            A. NO
         LA    RE,SCAN2H50
         LA    R0,L'CLOSEUNT(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'CLOSEUNT,R8),CLOSEUNT
         LA    R8,L'CLOSEUNT(,R8)
         SPACE 1
SCAN2H60 EQU   *         EXPONENTIATION USED
         TM    PSIPDI22,#PSIPWR    Q. ON
         JNO   SCAN2H70            A. NO
         LA    RE,SCAN2H60
         LA    R0,L'EXPONENT(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'EXPONENT,R8),EXPONENT
         LA    R8,L'EXPONENT(,R8)
         SPACE 1
SCAN2H70 EQU   *         FLOATING POINT USED
         TM    PSIPDI22,#PSIIFP    Q. ON
         JNO   SCAN2I00            A. NO
         LA    RE,SCAN2H70
         LA    R0,L'FLOATPT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'FLOATPT,R8),FLOATPT
         LA    R8,L'FLOATPT(,R8)
         SPACE 1
SCAN2I00 EQU   *         COPY statement
         TM    PSIPDI23,#PSIPDCP   Q. ON
         JNO   SCAN2I10            A. NO
         LA    RE,SCAN2I00
         LA    R0,L'COPYCODE(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'COPYCODE,R8),COPYCODE
         LA    R8,L'COPYCODE(,R8)
         SPACE 1
SCAN2I10 EQU   *         BASIS
         TM    PSIPDI23,#PSICCTL   Q. ON
         JNO   SCAN2I20            A. NO
         LA    RE,SCAN2I10
         LA    R0,L'BASIS(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'BASIS,R8),BASIS
         LA    R8,L'BASIS(,R8)
         SPACE 1
SCAN2I20 EQU   *         DBCS NAME USED
         TM    PSIPDI23,#PSIDBPG   Q. ON
         JNO   SCAN2I30            A. NO
         LA    RE,SCAN2I20
         LA    R0,L'DBCSUSED(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DBCSUSED,R8),DBCSUSED
         LA    R8,L'DBCSUSED(,R8)
         SPACE 1
SCAN2I30 EQU   *         DBCS SHIFT-OUT/IN USED
         TM    PSIPDI23,#PSISOSI   Q. ON
         JNO   SCAN2J00            A. NO
         LA    RE,SCAN2I30
         LA    R0,L'DBCSSOSI(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DBCSSOSI,R8),DBCSSOSI
         LA    R8,L'DBCSSOSI(,R8)
         SPACE 1
SCAN2J00 EQU   *         DBCS LITERAL
         TM    PSIPDI24,#PSIDBLT   Q. ON
         JNO   SCAN2J10            A. NO
         LA    RE,SCAN2J00
         LA    R0,L'DBCSLIT(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'DBCSLIT,R8),DBCSLIT
         LA    R8,L'DBCSLIT(,R8)
         SPACE 1
SCAN2J10 EQU   *         REPLACE
         TM    PSIPDI24,#PSIREPL   Q. ON
         JNO   SCAN2J20            A. NO
         LA    RE,SCAN2J10
         LA    R0,L'REPLACE(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'REPLACE,R8),REPLACE
         LA    R8,L'REPLACE(,R8)
         SPACE 1
SCAN2J20 EQU   *         REFERENCE MODIFICATION USED
         TM    PSIPDI24,#PSIRFMD   Q. ON
         JNO   SCAN2J30            A. NO
         LA    RE,SCAN2J20
         LA    R0,L'REFMOD(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'REFMOD,R8),REFMOD
         LA    R8,L'REFMOD(,R8)
         SPACE 1
SCAN2J30 EQU   *         NESTED PROGRAMS
         TM    PSIPDI24,#PSINSTD   Q. ON
         JNO   SCAN2J40            A. NO
         LA    RE,SCAN2J30
         LA    R0,L'NESTPGM(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'NESTPGM,R8),NESTPGM
         LA    R8,L'NESTPGM(,R8)
         SPACE 1
SCAN2J40 EQU   *         INITIAL
         TM    PSIPDI24,#PSIINIT   Q. ON
         JNO   SCAN2J50            A. NO
         LA    RE,SCAN2J40
         LA    R0,L'INITIAL(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'INITIAL,R8),INITIAL
         LA    R8,L'INITIAL(,R8)
         SPACE 1
SCAN2J50 EQU   *         COMMON
         TM    PSIPDI24,#PSICOMN   Q. ON
         JNO   SCAN2J60            A. NO
         LA    RE,SCAN2J50
         LA    R0,L'COMMON(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'COMMON,R8),COMMON
         LA    R8,L'COMMON(,R8)
         SPACE 1
SCAN2J60 EQU   *         SELECT...OPTIONAL
         TM    PSIPDI24,#PSISOPT   Q. ON
         JNO   SCAN2J70            A. NO
         LA    RE,SCAN2J60
         LA    R0,L'SELOPT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'SELOPT,R8),SELOPT
         LA    R8,L'SELOPT(,R8)
         SPACE 1
SCAN2J70 EQU   *         EXTERNAL
         TM    PSIPDI24,#PSIXTRN   Q. ON
         JNO   SCAN2K00            A. NO
         LA    RE,SCAN2J70
         LA    R0,L'EXTERNAL(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'EXTERNAL,R8),EXTERNAL
         LA    R8,L'EXTERNAL(,R8)
         SPACE 1
SCAN2K00 EQU   *         GLOBAL
         TM    PSIPDI25,#PSIGLBL   Q. ON
         JNO   SCAN2K10            A. NO
         LA    RE,SCAN2K00
         LA    R0,L'GLOBAL(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'GLOBAL,R8),GLOBAL
         LA    R8,L'GLOBAL(,R8)
         SPACE 1
SCAN2K10 EQU   *         RECORD IS VARYING
         TM    PSIPDI25,#PSIVLR    Q. ON
         JNO   SCAN2K50            A. NO
         LA    RE,SCAN2K10
         LA    R0,L'VLREC(,R8)     COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'VLREC,R8),VLREC
         LA    R8,L'VLREC(,R8)
         SPACE 1
SCAN2K20 EQU   *         ACCEPT FROM SYSIPT
         TM    PSIPDI25,#PSIIPT    Q. ON
         JNO   SCAN2K30            A. NO
         LA    RE,SCAN2K20
         LA    R0,L'INPIPT(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'INPIPT,R8),INPIPT
         LA    R8,L'INPIPT(,R8)
         SPACE 1
SCAN2K30 EQU   *         DISPLAY UPON SYSLST
         TM    PSIPDI25,#PSILST    Q. ON
         JNO   SCAN2K40            A. NO
         LA    RE,SCAN2K30
         LA    R0,L'OUTLST(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'OUTLST,R8),OUTLST
         LA    R8,L'OUTLST(,R8)
         SPACE 1
SCAN2K40 EQU   *         DISPLAY UPON SYSPUN
         TM    PSIPDI25,#PSIPCH    Q. ON
         JNO   SCAN2K50            A. NO
         LA    RE,SCAN2K40
         LA    R0,L'OUTPCH(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'OUTPCH,R8),OUTPCH
         LA    R8,L'OUTPCH(,R8)
         SPACE 1
SCAN2K50 EQU   *         INTRINSIC FUNCTION USED
         TM    PSIPDI25,#PSIFUNC   Q. ON
         JNO   SCAN2K60            A. NO
         LA    RE,SCAN2K50
         LA    R0,L'FUNCTION(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'FUNCTION,R8),FUNCTION
         LA    R8,L'FUNCTION(,R8)
         SPACE 1
SCAN2K60 EQU   *         Z-LITERAL
         CLC   TSVRM(L'CVRM5#1),CVRM5#1 Q. >= COBOL V5.1
         JL    SCAN2L00                 A. NO, BYPASS
         TM    PSIPDI25,#PSIZLIT   Q. ON
         JNO   SCAN2K70            A. NO
         LA    RE,SCAN2K60
         LA    R0,L'ZLIT(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'ZLIT,R8),ZLIT
         LA    R8,L'ZLIT(,R8)
         SPACE 1
SCAN2K70 EQU   *         RECURSIVE
         TM    PSIPDI25,#PSIRCUR   Q. ON
         JNO   SCAN2L00            A. NO
         LA    RE,SCAN2K70
         LA    R0,L'RECURS(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'RECURS,R8),RECURS
         LA    R8,L'RECURS(,R8)
         SPACE 1
SCAN2L00 EQU   *         JAVA BASED OO SYNTAX
         CLC   TSVRM(L'CVRM3),CVRM3     Q. >= COBOL V3
         JL    SCAN2L40                 A. NO, BYPASS
         TM    PSIPDI29,#PSIJAVA   Q. ON
         JNO   SCAN2L10            A. NO
         LA    RE,SCAN2L00
         LA    R0,L'JAVA(,R8)      COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'JAVA,R8),JAVA
         LA    R8,L'JAVA(,R8)
         SPACE 1
SCAN2L10 EQU   *         FUNCTION RANDOM USED
         TM    PSIPDI29,#PSIRNDM   Q. ON
         JNO   SCAN2L20            A. NO
         LA    RE,SCAN2L10
         LA    R0,L'RANDOM(,R8)    COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'RANDOM,R8),RANDOM
         LA    R8,L'RANDOM(,R8)
         SPACE 1
SCAN2L20 EQU   *         NATIONAL
         TM    PSIPDI29,#PSINATL   Q. ON
         JNO   SCAN2L30            A. NO
         LA    RE,SCAN2L20
         LA    R0,L'NATIONAL(,R8)  COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'NATIONAL,R8),NATIONAL
         LA    R8,L'NATIONAL(,R8)
         SPACE 1
SCAN2L30 EQU   *         XML PARSE SCHEMA
         SPACE 1
         TM    PSIPDI29,#PSIXPSV   Q. ON
         JNO   SCAN2L40            A. NO
         LA    RE,SCAN2L30
         LA    R0,L'XMLSCHV(,R8)   COMPUTE SPACE
         CR    R0,R7               Q. ROOM FOR IT
         JH    SCAN2010            A. SET UP NEW LINE
         MVC   0(L'XMLSCHV,R8),XMLSCHV
         LA    R8,L'XMLSCHV(,R8)
         SPACE 1
SCAN2L40 EQU   *
         SPACE 1
SCAN2990 EQU   *
         LM    RE,RC,12(RD)
         BR    RE                  RETURN
         SPACE 1
         DROP  R5,R6,R9,RD
         DROP  RA,RB
         TITLE 'SEARCH ROUTINE 1'
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
* R0       EQU   0              WORK REG
* R1       EQU   1              WORK REG
* R2       EQU   2              WORK REG
* R3       EQU   3              WORK REG
* R4       EQU   4              NOT USED
* R5       EQU   5              NOT USED
* R6       EQU   6              NOT USED
* R7       EQU   7              NOT USED
* R8       EQU   8              BAR OF SEARCH LIST
* R9       EQU   9              BAR OF STATIC STORAGE
* RA       EQU   10             PROGRAM BAR 1
* RB       EQU   11             BAR OF CALLERS DSA
* RC       EQU   12             LE CAA BAR
* RD       EQU   13             BAR OF DSA/RSA
* RE       EQU   14             RETURN ADDR
* RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
* --------------------------------------------------------- *
* SEARCH PRINT LINE FOR USER SELECTED TEXT STRINGS
* --------------------------------------------------------- *
         SPACE 1
&C       SETC  'E'
&P       SETC  '&C._'
         DS    0D
SRCH1    CEEENTRY ,                                                    +
               PPA=&P.PPA,                                             +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               PARMREG=1,                                              +
               BASE=10
         SPACE 2
         XR    RF,RF
         USING CEECAA,RC
         DROP  RD                  DROP MY DSA
         LR    RB,R1               PICK UP CALLERS DSA
         USING CEEDSA,RB           EST CALLERS DSA
         L     R9,=A(STATIC)
         L     R5,=A(STATIC+4096)
         USING STATIC,R9,R5
         J     SRCH1000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=SRCH1 - &SYSDATC &SYSTIME'
&P.PPA   CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=NO,                                                +
               EXTPROC=NO,                                             +
               TSTAMP=NO,                                              +
               PEP=NO,                                                 +
               INSTOP=YES,                                             +
               EPNAME=SRCH1,                                           +
               VER=04,                                                 +
               REL=01,                                                 +
               MOD=00,                                                 +
               DSA=YES
         SPACE 2
SRCH1000 EQU   *
         XC    SRCHTAB,SRCHTAB
         LA    R8,SRCHLST
         USING SRCHMAP,R8
         SPACE 1
SRCH1010 EQU   *
         XR    R0,R0               CLEAR WORK REG
         XR    R2,R2               CLEAR WORK REG
         ICM   R7,8,SRCHLEN        Q. ANY DATA
         JZ    SRCH9990            A. NO,       WAS SRCH9970
         SRL   R7,24
         LR    R3,R7               PICK UP SRCHSTR LENGTH
         BCTR  R3,R0               COMPUTE EXEC LENGTH
         XC    SRCHTAB,SRCHTAB     CLEAR TABLE
         IC    R0,SRCHOFF          PICK UP CHAR OFFSET
         IC    R2,SRCHCHR          PICK UP LEAST FREQ USED CHAR
         STC   R2,SRCHTAB(R2)      SAVE IN TRT TABLE
         LA    R1,SRCHOBJ
SRCH1020 EQU   *
         LA    R4,SRCHOBJZ         GET END ADDR+1
         SR    R4,R1               COMPUTE FIELD LENGTH
         JZ    SRCH9970            A. YES, FINISHED
         C     R4,=F'256'          Q. LENGTH > 256
         BNH   SRCH1024            A. NO, BYPASS
         L     R4,=F'256'          A. YES, OVERRIDE
SRCH1024 EQU   *
         BCTR  R4,R0               SET LENGTH FOR EXEC
         EX    R4,TRT3
**       TRT   0(0,R1),SRCHTAB     Q. FIND CHAR
         JZ    SRCH1028            A. NO HITS
         LR    R2,R1
         SR    R2,R0               POSITION TO BEGINNING
         EX    R3,CLC1
**       CLC   0(0,R2),SRCHSTR     Q. FIND STRING
         JE    SRCH9980            A. YES, SET FOUND
         LA    R1,1(,R1)           BUMP UP
         J     SRCH1020            LOOP BACK
SRCH1028 EQU   *
         AR    R1,R4               BUMP PAST TRT BOUNDS
         LA    R1,1(,R1)           BUMP UP
         J     SRCH1020            LOOP BACK
SRCH1040 EQU   *
         LA    R8,SRCHCHR+3(R7)    BUMP TO NEXT SRCHSTR
         J     SRCH1010            PROCESS NEXT STRING
         SPACE 1
TRT3     TRT   0(0,R1),SRCHTAB     Q. FIND CHAR
CLC1     CLC   0(0,R2),SRCHSTR     Q. FIND STRING
         DROP  R8
         SPACE 1
SRCH9970 EQU   *
         LA    RF,4                SET RC = 4 (NOTFOUND)
         J     SRCH1040            GO EXIT   WAS SRCH9990
         SPACE 2
SRCH9980 EQU   *
         XR    RF,RF               SET RC = 0
         SPACE 2
SRCH9990 EQU   *
         CEETERM ,                                                     +
               RC=(15)
         SPACE 1
         DROP  R5,R9,RB,RC
         SPACE 2
* --------------------------------------------------------- *
* LOCAL LITERAL POOL
* --------------------------------------------------------- *
         SPACE 1
         LTORG
         SPACE 1
         DROP  RA
         TITLE 'INITALIZATION ROUTINE 1'
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
* R0       EQU   0              WORK REG
* R1       EQU   1              WORK REG
* R2       EQU   2              WORK REG
* R3       EQU   3              WORK REG
* R4       EQU   4              WORK REG
* R5       EQU   5              BAR 2 OF STATIC STORAGE
* R6       EQU   6              NOT USED
* R7       EQU   7              NOT USED
* R8       EQU   8              BAR OF SEARCH LIST
* R9       EQU   9              BAR OF STATIC STORAGE
* RA       EQU   10             PROGRAM BAR 1
* RB       EQU   11             BAR OF CALLERS DSA
* RC       EQU   12             LE CAA BAR
* RD       EQU   13             ADDR OF DSA/RSA
* RE       EQU   14             RETURN ADDR
* RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
* --------------------------------------------------------- *
* PRELOAD LE CALLABLE SERVICE ROUTINES
* --------------------------------------------------------- *
         SPACE 1
&C       SETC  'F'
&P       SETC  '&C._'
         DS    0D
INIT1    CEEENTRY ,                                                    +
               PPA=&P.PPA,                                             +
               NAB=YES,                                                +
               MAIN=NO,                                                +
               PARMREG=1,                                              +
               BASE=10
         SPACE 2
         XR    RF,RF
         USING CEECAA,RC
         DROP  RD                  DROP MY DSA
         LR    RB,R1               PICK UP CALLERS DSA
         USING CEEDSA,RB           EST CALLERS DSA
         L     R9,=A(STATIC)
         L     R5,=A(STATIC+4096)
         USING STATIC,R9,R5
         J     INIT1000
         SPACE 2
* --------------------------------------------------------- *
* PROGRAM PROLOG AREA
* --------------------------------------------------------- *
         SPACE 1
         DC    C'&CORPNME SUBR=INIT1 - &SYSDATC &SYSTIME'
&P.PPA   CEEPPA ,                                                      +
               LIBRARY=NO,                                             +
               PPA2=NO,                                                +
               EXTPROC=NO,                                             +
               TSTAMP=NO,                                              +
               PEP=NO,                                                 +
               INSTOP=YES,                                             +
               EPNAME=INIT1,                                           +
               VER=04,                                                 +
               REL=01,                                                 +
               MOD=00,                                                 +
               DSA=YES
         SPACE 2
INIT1000 EQU   *
         XC    DIRPTR,DIRPTR
         SPACE 1
INIT1099 EQU   *
         EJECT
* --------------------------------------------------------- *
* GET HEAP STORAGE
* --------------------------------------------------------- *
         SPACE 1
INIT1200 EQU   *
*        DEFINE HEAP STORAGE BELOW THE LINE
         LA    R0,76
         ST    R0,FWORD22
         AS2PLIST (FWORD21,FZERO,FZERO,FWORD22,FDBKINFO),VL,           +
               MF=(E,PARMLIST)
         L     RF,=V(CEECRHP)
         MVC   E1SRVC,=CL12'CEECRHP ,009'
**       CALL  CEECRHP
         BASR  RE,RF               LINK TO
         LA    RE,INIT9990         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000
         SPACE 1
*        ALLOCATE HEAP STORAGE
         LA    R1,#BLOWLEN
         ST    R1,FWORD22          SET HEAP SIZE
         AS2PLIST (FWORD21,FWORD22,@HEAPSTG,FDBKINFO),VL,              +
               MF=(E,PARMLIST)
         L     RF,=V(CEEGTST)
         MVC   E1SRVC,=CL12'CEEGTST ,010'
**       CALL  CEEGTST
         BASR  RE,RF               LINK TO
         LA    RE,INIT9990         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000
         SPACE 1
INIT1210 EQU   *
         L     R0,@HEAPSTG
         LA    R1,#BLOWLEN
         LA    R2,BLOWSTG
         LR    R3,R1
         MVCL  R0,R2               COPY STG BELOW THE LINE
         SPACE 1
INIT1299 EQU   *
         EJECT
* --------------------------------------------------------- *
* PROCESS PARM=
* --------------------------------------------------------- *
         SPACE 1
INIT1300 EQU   *
         AS2PLIST (PARMPARM,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEE3PRM)
         MVC   E1SRVC,=CL12'CEE3PRM ,011'
**       CALL  CEE3PRM
         BASR  RE,RF               LINK TO
         LA    RE,INIT1340         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000          A. YES
         MVI   MBRNM,C' '          CLEAR OUT
         MVC   MBRNM+1(L'MBRNM-1),MBRNM
         MVC   RPTTYPE,DFLTRPT
         MVC   ACTION,DFLTACT
         XC    @ACTLST,@ACTLST
         SPACE 1
INIT1310 EQU   *              PARSE PARM= STATEMENT
         LA    R4,PARMPARM         POINT TO PARM= STMT
         TRT   PARMPARM,SEPTAB     Q. ANY SEPARATOR CHARS
         JZ    INIT1399            A. NO HITS
         STC   R2,SEPBYTE
         CLI   SEPBYTE,C' '        Q. SEPARATOR BYTE SPACE
         JE    INIT1320            A. YES
         CLI   SEPBYTE,C','        Q. SEPARATOR BYTE COMMA
         JE    INIT1320            A. YES
         J     &P.MSG1700          A. NO
INIT1320 EQU   *
         LR    R2,R1               SAVE SEPARATOR ADDR
         SR    R2,R4               COMPUTE FIELD LENGTH
         JZ    &P.MSG1700          A. NO REPORT TYPE
         C     R2,=A(L'RPTTYPE)    Q. STRING TOO LONG
         JH    &P.MSG1700          A. YES
         BCTR  R2,R0               SUBT 1 FOR EX
         EX    R2,MVC1
**       MVC   RPTTYPE(0),0(R4)    SAVE REPORT TYPE
         SPACE 1
INIT1330 EQU   *
         LA    R4,1(,R1)           POINT TO ACTION STRING
         LA    R1,PARMPARM+L'PARMPARM-1
         SR    R1,R4
         EX    R1,TRT1
**       TRT   0(0,R4),SEPTAB      Q. ANY SEPARATOR CHARS
         JZ    INIT1399            A. NO HITS
         STC   R2,SEPBYTE
         CLI   SEPBYTE,C' '        Q. BLANK
         JE    INIT1399            A. YES
         CLI   SEPBYTE,C'('        Q. SEPARATOR BYTE (
         JE    INIT1340            A. YES
         J     &P.MSG1700          A. NO
INIT1340 EQU   *
         LR    R2,R1               SAVE SEPARATOR ADDR
         SR    R2,R4               COMPUTE FIELD LENGTH
         JZ    &P.MSG1700          A. NO ACTION
         C     R2,=A(L'ACTION)     Q. STRING TOO LONG
         JH    &P.MSG1700          A. YES
         BCTR  R2,R0               SUBT 1 FOR EX
         EX    R2,MVC2
**       MVC   ACTION(0),0(R4)     SAVE ACTION
         SPACE 1
INIT1350 EQU   *
         LA    R4,1(,R1)           POINT TO ACTION LIST
         ST    R4,@ACTLST          SAVE ACTION LIST ADDR
         LA    R1,PARMPARM+L'PARMPARM-1
INIT1352 EQU   *
         CLI   0(R1),C')'          Q. SEPARATOR BYTE )
         JE    INIT1354            A. YES, SKIP
         BCTR  R1,R0
         CR    R1,R4               Q. AT BEGINNING YET
         JH    INIT1352            A. NO, LOOP BACK
         J     &P.MSG1700          A. NO
INIT1354 EQU   *
INIT1360 EQU   *
         ST    R1,@ACTLSTZ         SAVE END ADDR OF ACTION LIST
         SPACE 1
INIT1370 EQU   *
         XC    SRCHLST,SRCHLST
         LA    R4,SRCHLST          POINT TO SEARCH LIST
         LA    R0,C','             EST STOP CHAR
         L     R2,@ACTLST          POINT TO ACTION LIST
INIT1374 EQU   *
         L     R3,@ACTLSTZ         POINT TO END OF ACTION LIST
INIT1376 EQU   *                   PARSE ACTION LIST
         SRST  R3,R2               Q. FIND STOP CHAR
**       JO    INIT1376            A. NO, CPU INTERRUPT
         JL    INIT1378            A. YES
         JH    INIT1380            A. NO, NOT FOUND
         DC    H'0'                ABEND
INIT1378 EQU   *
         LR    R1,R3
         SR    R1,R2               COMPUTE FIELD LGTH
         STCM  R1,7,0(R4)          SAVE CHAR,OFFSET,LENGTH
         BCTR  R1,R0               SUBT 1 FOR EXECUTE
         EX    R1,MVC3
**       MVC   1(0,R4),0(R2)       SAVE SEARCH STRING
         AR    R4,R1               BUMP THRU SEARCH LIST
         AHI   R4,4                BUMP THRU SEARCH LIST
         AHI   R3,1
         LR    R2,R3               RESET BEGIN OF ACTION LIST
         J     INIT1374            LOOP BACK
INIT1380 EQU   *
         LR    R1,R3
         SR    R1,R2               COMPUTE FIELD LGTH
         STCM  R1,7,0(R4)
         BCTR  R1,R0               SUBT 1 FOR EXECUTE
         EX    R1,MVC3
**       MVC   1(0,R4),0(R2)       SAVE SEARCH STRING
         J     INIT1399
         SPACE 1
MVC1     MVC   RPTTYPE(0),0(R4)    SAVE REPORT TYPE
MVC2     MVC   ACTION(0),0(R4)     SAVE ACTION
MVC3     MVC   3(0,R4),0(R2)       SAVE SEARCH STRING
TRT1     TRT   0(0,R4),SEPTAB      Q. ANY SEPARATOR CHARS
TRT2     TRT   0(0,R4),TRMTAB      Q. ANY TERMINATION CHARS
         SPACE 1
INIT1399 EQU   *
         SPACE 1
INIT1400 EQU   *
         LM    R1,R3,RPTCTL        INITALIZE LOOP CTL
INIT1410 EQU   *
         CLC   RPTTYPE,0(R1)       Q. FOUND IT
         JE    INIT1412            A. YES
         BRXLE R1,R2,INIT1410      A. NO, LOOK AGAIN
         J     &P.MSG1800          A. NOTFOUND
INIT1412 EQU   *
         SPACE 1
INIT1420 EQU   *
         CLI   ACTION,C' '         Q. ANY ACTION
         JE    INIT1499            A. NO, BYPASS
         LM    R1,R3,ACTCTL        INITALIZE LOOP CTL
INIT1422 EQU   *
         CLC   ACTION,0(R1)        Q. FOUND IT
         JE    INIT1424            A. YES
         BRXLE R1,R2,INIT1422      A. NO, LOOK AGAIN
         J     &P.MSG1900          A. NOTFOUND
INIT1424 EQU   *
         SPACE 1
INIT1430 EQU   *
         XR    R0,R0               CLEAR FREQ OF CHAR
         XR    R4,R4               CLEAR CHAR
         LA    R8,SRCHLST
         USING SRCHMAP,R8
INIT1434 EQU   *
         ICM   R3,8,SRCHLEN        Q. ANY DATA
         JZ    INIT1499            A. NO,
         SRL   R3,24
         BCTR  R3,R0               SET COMPARAND VALUE
         XR    R1,R1               SET INDEX VALUE
         LA    R2,1                SET INCR VALUE
         MVI   BYTE,X'FF'          PRESET FREQ OF CHAR
INIT1436 EQU   *
         IC    R4,SRCHSTR(R1)      PICK UP CHAR
         IC    R0,OPTSFREQ(R4)     PICK UP FREQ OF CHAR
         CLM   R0,1,BYTE           Q. LOWEST FREQ OF CHAR
         JNL   INIT1450            A. NO, BYPASS
         STC   R0,BYTE             SAVE LOWEST FREQ OF CHAR
         STC   R4,SRCHCHR          SAVE LEAST FREQ USED CHAR
         STC   R1,SRCHOFF          SAVE CHAR OFFSET
INIT1450 EQU   *
         BRXLE R1,R2,INIT1436
         LA    R8,SRCHSTR+1(R3)
         J     INIT1434            PROCESS NEXT STRING
         SPACE 1
         DROP  R8
         SPACE 1
INIT1499 EQU   *
         EJECT
* --------------------------------------------------------- *
* QUERY FOR DD MBRLIST
* --------------------------------------------------------- *
         SPACE 1
INIT1500 EQU   *
         MVI   PDSFLAG,X'FF'       SET PDS FLAG N/A
         XC    PARMLIST(12),PARMLIST
         MVC   REQDDNME,=CL8'MBRLIST'
         EXTRACT @TIOT,FIELDS=TIOT,MF=(E,PARMLIST)
         ICM   R4,15,@TIOT         Q. TIOT PRESENT
         JZ    INIT1599            A. NO
         USING TIOT1,R4            EST ADDR TO TIOT HDR
         SPACE 1
INIT1510 EQU   *
         CLI   TIOELNGH,X'00'      Q. END OF TIOT
         JE    INIT1599            A. YES
         TM    TIOESTTA,TIOSLTYP   Q. FREED TIOT ENTRY
         JO    INIT1520            A. YES, GO BUMP
         TM    TIOESTTA,TIOSJBLB   Q. JOBLIB
         JO    INIT1520            A. YES, GO BUMP
         CLC   REQDDNME,TIOEDDNM   Q. MATCH
         JE    INIT1530            A. YES
INIT1520 EQU   *
         ICM   R0,8,TIOELNGH       PICK UP ENTRY LENGTH
         SRL   R0,24
         AR    R4,R0               BUMP TO NEXT ENTRY
         J     INIT1510            LOOP BACK
         DROP  R4
INIT1530 EQU   *
         MVI   PDSFLAG,C'0'        SET PDS FLAG OFF
         L     R2,@HEAPSTG
         LA    R0,CARDDCBE-BLOWSTG(,R2)
         ST    R0,CARDDCB-BLOWSTG(,R2)
         LA    R2,CARDDCB-BLOWSTG(,R2)
         XC    PARMLIST(4),PARMLIST
         OI    PARMLIST,X'80'
         SPACE 1
         OPEN  ((2),INPUT),                                            +
               MF=(E,PARMLIST),                                        +
               MODE=31
         C     RF,=F'4'            Q. ANY ERRORS
         JH    &P.MSG1300          A. YES
         SPACE 1
INIT1599 EQU   *
         EJECT
* --------------------------------------------------------- *
* INITIALIZE PDS/PDSE
* --------------------------------------------------------- *
         SPACE 1
INIT1600 EQU   *
         L     R2,@HEAPSTG
         LA    R0,PDSEDCBE-BLOWSTG(,R2)
         ST    R0,PDSEDCB-BLOWSTG(,R2)
         LA    R0,PDSEJFCB-BLOWSTG(,R2)
         ST    R0,PDSEXLST-BLOWSTG(,R2)    SAVE JFCB ADDR
         OI    PDSEXLST-BLOWSTG(R2),X'07'  DEFINE JFCB EXIT
         OI    PDSEXLST-BLOWSTG(R2),X'80'  TERMINATE LIST
         LA    R0,PDSEXLST-BLOWSTG(,R2)
         SPACE 1
         LA    R3,PDSEDCB-BLOWSTG(,R2)
         USING IHADCB,R3
         STCM  R0,7,DCBEXLSA       SAVE EXLST ADDR IN DCB
         DROP  R3
         OI    BLOWLIST-BLOWSTG(R2),X'80'  SET UP END OF PARMLIST
         XR    RF,RF               CLEAR RC
         SPACE 1
         RDJFCB ((3)),MF=(E,BLOWLIST-BLOWSTG(,R2))
         C     RF,=F'08'
         JH    INIT1620
         B     *+4(RF)
         J     INIT1610            00-RDJFCB SUCCESSFUL
         J     INIT1620            04-RDJFCB ERROR
         J     INIT1620            08-RDJFCB ERROR
INIT1610 EQU   *
         LA    R1,PDSEJFCB-BLOWSTG(,R2)
         USING INFMJFCB,R1
         MVC   PDSNAME,JFCBDSNM    SAVE PDS/PDSE NAME
         DROP  R1
         SPACE 1
INIT1620 EQU   *
         CLI   PDSFLAG,C'0'        Q. USING DD MBRLIST
         JE    INIT1699            A. YES, BYPASS OPEN
         SPACE 1
         MVI   PDSFLAG,C'1'        SET PDS FLAG ON
         XC    PARMLIST(4),PARMLIST
         OI    PARMLIST,X'80'
         XR    RF,RF               CLEAR RC
         SPACE 1
         OPEN  ((3),INPUT),                                            +
               MF=(E,PARMLIST),                                        +
               MODE=31
         C     RF,=F'4'            Q. ANY ERRORS
         JH    &P.MSG1100          A. YES
         SPACE 1
INIT1699 EQU   *
         EJECT
* --------------------------------------------------------- *
* INITIALIZE PRINTER
* --------------------------------------------------------- *
         SPACE 1
INIT1700 EQU   *
         ZAP   LINECNT,=P'99'
         SPACE 1
         L     R2,@HEAPSTG
         LA    R0,PRNTDCBE-BLOWSTG(,R2)
         ST    R0,PRNTDCB-BLOWSTG(,R2)
         LA    R2,PRNTDCB-BLOWSTG(,R2)
         XC    PARMLIST(4),PARMLIST
         OI    PARMLIST,X'80'
         SPACE 1
         OPEN  ((2),OUTPUT),                                           +
               MF=(E,PARMLIST),                                        +
               MODE=31
         C     RF,=F'4'            Q. ANY ERRORS
         JH    &P.MSG1200          A. YES
         SPACE 1
INIT1710 EQU   *
INIT1799 EQU   *
         EJECT
* --------------------------------------------------------- *
* INITIALIZE HEADING
* --------------------------------------------------------- *
         SPACE 1
INIT1800 EQU   *
         MVI   H1LINE,C' '
         MVC   H1LINE+1(L'H1LINE-1),H1LINE
         MVI   H1LINE,C'1'         MOVE IN CARRIAGE CONTROL
         SPACE 1
*        RETRIEVE THE SYSTEM DATE AND TIME
         AS2PLIST (FWORD21,DWORD1,WAREA,FDBKINFO),VL,                  +
               MF=(E,PARMLIST)
         L     RF,=V(CEELOCT)
         MVC   E1SRVC,=CL12'CEELOCT ,012'
**       CALL  CEELOCT
         BASR  RE,RF               LINK TO
         LA    RE,INIT9990         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000          A. YES,
         SPACE 1
         MVI   WAREA+17,C'/'       INIT EDIT CHAR
         MVC   H1RTDTE,DATEMASK
         TR    H1RTDTE,WAREA       REFORMAT DATE
         SPACE 1
*        RETRIEVE THE LE AND PLATFORM INFO
         AS2PLIST (FWORD21,FWORD22,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEGPID)
         MVC   E1SRVC,=CL12'CEEGPID ,013'
**       CALL  CEEGPID
         BASR  RE,RF               LINK TO
         LA    RE,INIT9990         SET DEFAULT RETURN
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JNE   &P.MSG0000          A. YES,
         SPACE 1
*        LAYOUT OF VERSION ID (FWORD21)
*        PPVVRRMM - BINARY HEX FORMAT
*        PP - PRODUCT NUMBER
*        VV - VERSION
*        RR - RELEASE
*        MM - MODIFICATION
         XR    R0,R0
         IC    R0,FWORD21+1        PICK UP VERSION
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  WAREA(3),DWORD1+6(2)
         MVI   H1LEVRM,C'V'
         MVC   H1LEVRM+1(2),WAREA+1
         MVI   H1LEVRM+3,C'.'
         SPACE 1
         IC    R0,FWORD21+2        PICK UP RELEASE
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  WAREA(3),DWORD1+6(2)
         MVI   H1LEVRM+4,C'R'
         MVC   H1LEVRM+5(2),WAREA+1
         MVI   H1LEVRM+7,C'.'
         SPACE 1
         IC    R0,FWORD21+3        PICK UP MODIFICATION
         CVD   R0,DWORD1
         OI    DWORD1+L'DWORD1-1,X'0F'
         UNPK  WAREA(3),DWORD1+6(2)
         MVI   H1LEVRM+8,C'M'
         MVC   H1LEVRM+9(2),WAREA+1
         SPACE 1
*        LAYOUT OF PLATFORM ID (FWORD22)
         ICM   R1,15,FWORD22
         JZ    INIT1810
         C     R1,=F'6'            Q. PLATFORM < 6
         JL    INIT1812            A. YES,
INIT1810 EQU   *
         L     R1,=F'6'            A. NO,
INIT1812 EQU   *
         BCTR  R1,R0
         MHI   R1,L'OSTAB
         LA    R2,OSTAB(R1)
         MVC   H1OPSYS,0(R2)
         SPACE 1
         MVC   H1RTMSG,RTMSG
         MVC   H1OSMSG,OSMSG
         SPACE 2
INIT1820 EQU   *
         MVI   H2LINE,C' '
         MVC   H2LINE+1(L'H1LINE-1),H2LINE
         MVC   H2TEXT1,DSMSG
         MVC   H2DSNAME,PDSNAME
         MVC   H2TEXT2,PSMSG
         ICM   R2,15,@ACTLST
         JZ    INIT1899
         MVC   H2PARM,0(R2)
INIT1899 EQU   *
         SPACE 2
INIT9980 EQU   *
         XR    RF,RF               SET RC = 0
         SPACE 2
INIT9990 EQU   *
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* ERROR MESSAGE ROUTINE
* --------------------------------------------------------- *
         SPACE 1
&P.MSG0000 EQU *
         AS2RESTK PUSH,RESTACK     SAVE RETURN REG VALUE
         SPACE 1
         MVC   FDBKHOLD,FDBKINFO
         AS2PLIST (FDBKHOLD,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         J     &P.MSG8000
         SPACE 1
&P.MSG1100 EQU *
         AS2PLIST (MSG1100,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,014'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    INIT9990            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1200 EQU *
         AS2PLIST (MSG1200,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,015'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    INIT9990            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1300 EQU *
         AS2PLIST (MSG1300,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,016'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    INIT9990            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1700 EQU *
         AS2PLIST (MSG1700,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,017'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    INIT9990            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1800 EQU *
         AS2PLIST (MSG1800,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,018'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    INIT9990            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG1900 EQU *
         AS2PLIST (MSG1900,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
         MVC   E1SRVC,=CL12'CEEMOUT ,019'
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,4
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    INIT9990            A. NO, QUIT
         J     &P.MSG8102          A. YES, ABEND
         SPACE 1
&P.MSG8000 EQU *              PRINT LE ERROR MSG
         L     RF,=V(CEEMSG)
         MVC   E1SRVC,=CL12'CEEMSG  ,020'
**       CALL  CEEMSG
         BASR  RE,RF               LINK TO
         CLC   FCCDE,CEE000        Q. ANY ERRORS
         JE    &P.MSG8200          A. NO
&P.MSG8100 EQU *
         CLC   FCSEV,=H'2'         Q. HOW SEVERE
         JL    &P.MSG8200          A. NOT BAD ENOUGH
&P.MSG8102 EQU *
         LA    R1,3754             NUMBER VALUE 'EAA'
         ST    R1,ABCODE           SET ABEND CODE
         LA    R1,1
         ST    R1,FWORD21          SET ABEND CLEAN UP
         AS2PLIST (ABCODE,FWORD21),VL,MF=(E,PARMLIST)
         L     RF,=V(CEE3ABD)
         MVC   E1SRVC,=CL12'CEE3ABD ,021'
**       CALL  CEE3ABD
         BASR  RE,RF               LINK TO
         SPACE 1
&P.MSG8200 EQU *
         MVC   EMSGSTR+2(L'E1MSG),E1MSG
         MVC   EMSGSTR+2+14(L'E1SRVC),E1SRVC
         LA    R1,L'E1MSG
         STCM  R1,3,EMSGSTR
         AS2PLIST (EMSGSTR,DEST,FDBKINFO),VL,MF=(E,PARMLIST)
         L     RF,=V(CEEMOUT)
**       CALL  CEEMOUT
         BASR  RE,RF               LINK TO
         LA    RF,12               SET RC = 12 (FATAL)
         SPACE 1
&P.MSG8300 EQU *
         AS2RESTK POP,RESTACK      RESTORE RE VALUE
         BR    RE                  RETURN TO PROCESS
         SPACE 1
         DROP  R5,R9,RB,RC
         SPACE 2
* --------------------------------------------------------- *
* LOCAL LITERAL POOL
* --------------------------------------------------------- *
         SPACE 1
         LTORG
         SPACE 1
         DROP  RA
         EJECT
* --------------------------------------------------------- *
* MAP SEARCH LIST
* --------------------------------------------------------- *
         SPACE 1
SRCHMAP  DSECT
SRCHCHR  DS    CL01         ..LEAST FREQ USED CHAR IN STRING
SRCHOFF  DS    XL01         ..OFFSET OF CHR IN STRING
SRCHLEN  DS    XL01         ..LENGTH OF STRING
SRCHSTR  EQU   *,1,C'C'     ..BEGIN OF SEARCH STRING
         EJECT
* --------------------------------------------------------- *
* PROGRAM SIGNATURE INFORMATION BYTES
* --------------------------------------------------------- *
         SPACE 1
PSI      DSECT
*                           COMPILER OPTIONS IN EFFECT
PSICCO01 DS    XL01           BYTE 01 COBOL COMPILER OPTIONS
#PSIADV  EQU   X'80'          ..ON(ADV), OFF(NOADV)
#PSILIT  EQU   X'40'          ..ON(APOST), OFF(QUOTE)
#PSIDATA EQU   X'20'          ..ON(DATA(31)), OFF(DATA(24))
#PSIDECK EQU   X'10'          ..ON(DECK), OFF(NODECK)
#PSIDUMP EQU   X'08'          ..ON(DUMP), OFF(NODUMP)
#PSIDYNM EQU   X'04'          ..ON(DYNAM), OFF(NODYNAM)
#PSIFSRT EQU   X'02'          ..ON(FASTSRT), OFF(NOFASTSRT)
#PSIFDMP EQU   X'01'          ..ON(FDUMP), OFF(NOFDUMP) COBII RESERVED
#PSIIMS  EQU   X'01'          ..ON(SQLIMS), OFF(SQLIMS)
         SPACE 1
PSICCO02 DS    XL01           BYTE 02 COBOL COMPILER OPTIONS
#PSILIB  EQU   X'80'          ..ON(LIB), OFF(NOLIB)
#PSILIST EQU   X'40'          ..ON(LIST), OFF(NOLIST)
#PSIMAP  EQU   X'20'          ..ON(MAP), OFF(NOMAP)
#PSINUM  EQU   X'10'          ..ON(NUM), OFF(NONUM)
#PSIOBJ  EQU   X'08'          ..ON(OBJ), OFF(NOOBJ)
#PSIOFF  EQU   X'04'          ..ON(OFFSET), OFF(NOOFFSET)
#PSIOPT  EQU   X'02'          ..ON(OPTIMIZE), OFF(NOOPTIMIZE)
#PSIODD  EQU   X'01'          ..DDNAME SUPPLIED IN OUTDD
         SPACE 1
PSICCO03 DS    XL01           BYTE 03 COBOL COMPILER OPTIONS
#PSIPFD  EQU   X'80'          ..ON(NUMPROC(PFD)), OFF(NUMPROC(NOPFD))
#PSIRENT EQU   X'40'          ..ON(RENT), OFF(NORENT)
#PSIRES  EQU   X'20'          ..ON(RES), OFF(NORES) COBII RESERVED
#PSISEQ  EQU   X'10'          ..ON(SEQUENCE), OFF(NOSEQUENCE)
#PSISIZE EQU   X'08'          ..ON(SIZE(MAX)), OFF(SIZE(VALUE))
#PSISRCE EQU   X'04'          ..ON(SOURCE), OFF(NOSOURCE)
#PSISSR  EQU   X'02'          ..ON(SSRANGE), OFF(NOSSRANGE)
#PSITERM EQU   X'01'          ..ON(TERM), OFF(NOTERM)
         SPACE 1
PSICCO04 DS    XL01           BYTE 04 COBOL COMPILER OPTIONS
#PSITEST EQU   X'80'          ..ON(TEST), OFF(NOTEST)
#PSISTD  EQU   X'40'          ..ON(TRUNC(STD)), OFF(TRUNC(OPT))
#PSIWORD EQU   X'20'          ..WORD() SPECIFIED
#PSIVREF EQU   X'10'          ..ON(VBREF), OFF(NOVBREF)
#PSIXREF EQU   X'08'          ..ON(XREF), OFF(NOXREF)
#PSIZWB  EQU   X'04'          ..ON(ZWB), OFF(NOZWB)
#PSINAME EQU   X'02'          ..ON(NAME), OFF(NONAME)
#PSICMPR EQU   X'01'          ..ON(CMPR2), OFF(NOCMPR2) RESERVED
         SPACE 1
PSICCO05 DS    XL01           BYTE 05 COBOL COMPILER OPTIONS
#PSIMIG  EQU   X'80'          ..ON(NUMPROC(MIG))
#PSINCLS EQU   X'40'          ..ON(NUMCLS(ALT)), OFF(NUMCLS(PRIM))
#PSIDBCS EQU   X'20'          ..ON(DBCS), OFF(NODBCS)
#PSIAWO  EQU   X'10'          ..ON(AWO), OFF(NOAWO)
#PSIBIN  EQU   X'08'          ..ON(TRUNC(BIN))
#PSIEVNT EQU   X'04'          ..ON(EVENTS), OFF(NOEVENTS) RESERVED
#PSIADTA EQU   X'04'          ..ON(ADATA), OFF(NOADATA)
#PSICURR EQU   X'02'          ..ON(CURRENCY), OFF(NOCURRENCY)
#PSICLS  EQU   X'01'          ..ON(CLASS), OFF(PROGRAM)
         SPACE 1
PSIDDI06 DS    XL01           BYTE 06 DATA DIVISION ITEMS
#PSIQSAM EQU   X'80'          ..ON(QSAM/SAM USED)
#PSIESDS EQU   X'40'          ..ON(VSAM ESDS USED)
#PSIKSDS EQU   X'20'          ..ON(VSAM KSDS USED)
#PSIRRDS EQU   X'10'          ..ON(VSAM RRDS USED)
#PSICODE EQU   X'08'          ..ON(CODE-SET)
#PSISPAN EQU   X'04'          ..ON(SPANNED RECORDS)
#PSIDBGN EQU   X'02'          ..ON(DBCS PIC G/N)
#PSINODO EQU   X'01'          ..ON(ODO)
         SPACE 1
PSIDDI07 DS    XL01           BYTE 07 DATA DIVISION ITEMS
#PSISYNC EQU   X'80'          ..ON(SYNCHRONIZED)
#PSIJUST EQU   X'40'          ..ON(JUSTIFIED)
#PSIUPTR EQU   X'20'          ..ON(USAGE IS POINTER)
#PSICODO EQU   X'10'          ..ON(COMPLEX ODO)
#PSIEFP  EQU   X'08'          ..ON(EXTERNAL FLOATING POINT)
#PSIIFP  EQU   X'04'          ..ON(INTERNAL FLOATING POINT)
#PSILSEQ EQU   X'02'          ..ON(LINE-SEQUENTIAL FILE)
#PSIUPRO EQU   X'01'          ..ON(USAGE IS PROCEDURE-POINTER)  CBLMVS
*                             ..ON(USAGE IS PROCEDURE/FUNCTION-POINTER)
*                                  ECOBOL 3.1
         SPACE 1
PSIEDI08 DS    XL01           BYTE 08 ENVIRONMENT DIVISION INFO
#PSIFILE EQU   X'80'          ..ON(FILE STATUS)
#PSIRRUN EQU   X'40'          ..ON(RERUN)
#PSIUPSI EQU   X'20'          ..ON(UPSI SW DEFINED)
*        EQU   X'10'          ..NOT USED
#PSIVS   EQU   X'08'          ..ON(VSAMOPENFS(COMPAT))
*                             ..OFF(VSAMOPENFS(SUCC))
*        EQU   X'04'          ..NOT USED
*        EQU   X'02'          ..NOT USED
*        EQU   X'01'          ..NOT USED
         SPACE 2
*                           VERBS IN THE PROCEDURE DIVISION
PSIPDV09 DS    XL01           BYTE 09 PROCEDURE DIVISION VERBS
#PSIACC  EQU   X'80'          ..ON(ACCEPT)
#PSIADD  EQU   X'40'          ..ON(ADD)
#PSIALTR EQU   X'20'          ..ON(ALTER)
#PSICALL EQU   X'10'          ..ON(CALL)
#PSICAN  EQU   X'08'          ..ON(CANCEL)
*        EQU   X'04'          ..NOT USED
#PSICLO  EQU   X'02'          ..ON(CLOSE)
*        EQU   X'01'          ..NOT USED
         SPACE 1
PSIPDV10 DS    XL01           BYTE 10 PROCEDURE DIVISION VERBS
#PSICMP  EQU   X'80'          ..ON(COMPUTE)
*        EQU   X'40'          ..NOT USED
#PSIDEL  EQU   X'20'          ..ON(DELETE)
*        EQU   X'10'          ..NOT USED
#PSIDSPL EQU   X'08'          ..ON(DISPLAY)
#PSIDIV  EQU   X'04'          ..ON(DIVIDE)
*        EQU   X'02'          ..NOT USED
*        EQU   X'01'          ..NOT USED
         SPACE 1
PSIPDV11 DS    XL01           BYTE 11 PROCEDURE DIVISION VERBS
*        EQU   X'80'          ..NOT USED
#PSIEPER EQU   X'40'          ..ON(END-PERFORM)
#PSINTER EQU   X'20'          ..ON(ENTER)
#PSINTRY EQU   X'10'          ..ON(ENTRY)
#PSIEXIT EQU   X'08'          ..ON(EXIT)
#PSIEXEC EQU   X'04'          ..ON(EXEC)
#PSIGOTO EQU   X'02'          ..ON(GO TO)
#PSIIF   EQU   X'01'          ..ON(IF)
         SPACE 1
PSIPDV12 DS    XL01           BYTE 12 PROCEDURE DIVISION VERBS
#PSIINTZ EQU   X'80'          ..ON(INITIALIZE)
#PSINVK  EQU   X'40'          ..ON(INVOKE)          CBLMVS
#PSINSP  EQU   X'20'          ..ON(INSPECT)
#PSIMRGE EQU   X'10'          ..ON(MERGE)
#PSIMVC  EQU   X'08'          ..ON(MOVE)
#PSIMUL  EQU   X'04'          ..ON(MULTIPLY)
#PSIOPEN EQU   X'02'          ..ON(OPEN)
#PSIPER  EQU   X'01'          ..ON(PERFORM)
         SPACE 1
PSIPDV13 DS    XL01           BYTE 13 PROCEDURE DIVISION VERBS
#PSIRD   EQU   X'80'          ..ON(READ)
*        EQU   X'40'          ..NOT USED
#PSIREL  EQU   X'20'          ..ON(RELEASE)
#PSIRET  EQU   X'10'          ..ON(RETURN)
#PSIRWR  EQU   X'08'          ..ON(REWRITE)
#PSISRH  EQU   X'04'          ..ON(SEARCH)
*        EQU   X'02'          ..NOT USED
#PSISET  EQU   X'01'          ..ON(SET)
         SPACE 1
PSIPDV14 DS    XL01           BYTE 14 PROCEDURE DIVISION VERBS
#PSISORT EQU   X'80'          ..ON(SORT)
#PSISRT  EQU   X'40'          ..ON(START)
#PSISTP  EQU   X'20'          ..ON(STOP)
#PSISTR  EQU   X'10'          ..ON(STRING)
#PSISUB  EQU   X'08'          ..ON(SUBTRACT)
*        EQU   X'04'          ..NOT USED
*        EQU   X'02'          ..NOT USED
#PSIUST  EQU   X'01'          ..ON(UNSTRING)
         SPACE 1
PSIPDV15 DS    XL01           BYTE 15 PROCEDURE DIVISION VERBS
#PSIUSE  EQU   X'80'          ..ON(USE)
#PSIWRT  EQU   X'40'          ..ON(WRITE)
#PSICONT EQU   X'20'          ..ON(CONTINUE)
#PSIEADD EQU   X'10'          ..ON(END-ADD)
#PSIECAL EQU   X'08'          ..ON(END-CALL)
#PSIECMP EQU   X'04'          ..ON(END-COMPUTE)
#PSIEDEL EQU   X'02'          ..ON(END-DELETE)
#PSIEDIV EQU   X'01'          ..ON(END-DIVIDE)
         SPACE 1
PSIPDV16 DS    XL01           BYTE 16 PROCEDURE DIVISION VERBS
#PSIEEVL EQU   X'80'          ..ON(END-EVALUATE)
#PSIEIF  EQU   X'40'          ..ON(END-IF)
#PSIEMUL EQU   X'20'          ..ON(END-MULTIPLY)
#PSIERD  EQU   X'10'          ..ON(END-READ)
#PSIERET EQU   X'08'          ..ON(END-RETURN)
#PSIERWR EQU   X'04'          ..ON(END-REWRITE)
#PSIESRH EQU   X'02'          ..ON(END-SEARCH)
#PSIESRT EQU   X'01'          ..ON(END-START)
         SPACE 1
PSIPDV17 DS    XL01           BYTE 17 PROCEDURE DIVISION VERBS
#PSIESTR EQU   X'80'          ..ON(END-STRING)
#PSIESUB EQU   X'40'          ..ON(END-SUBTRACT)
#PSIEUST EQU   X'20'          ..ON(END-UNSTRING)
#PSIEWRT EQU   X'10'          ..ON(END-WRITE)
#PSIGOBK EQU   X'08'          ..ON(GOBACK)
#PSIEVL  EQU   X'04'          ..ON(EVALUATE)
*        EQU   X'02'          ..NOT USED
#PSISRVC EQU   X'01'          ..ON(SERVICE)
         SPACE 1
PSIPDV18 DS    XL01           BYTE 18 PROCEDURE DIVISION VERBS
#PSIENVK EQU   X'80'          ..ON(END-INVOKE)
#PSIEXEQ EQU   X'40'          ..ON(END-EXEC)
#PSIXML  EQU   X'20'          ..ON(XML)
#PSIEXML EQU   X'10'          ..ON(END-XML)
#PSIALLO EQU   X'08'          ..ON(ALLOCATE)      COBOL V6.1
#PSIFREE EQU   X'04'          ..ON(FREE)          COBOL V6.1
#PSIJASO EQU   X'02'          ..ON(JASON)         COBOL V6.1
#PSIEJAS EQU   X'01'          ..ON(END-JASON)     COBOL V6.1
         SPACE 1
PSIPDI19 DS    XL01           BYTE 19
PSIPDI20 DS    XL01           BYTE 20
PSIPDI21 DS    XL01           BYTE 21 PROCEDURE DIVISION INFO
#PSIXLIT EQU   X'80'          ..ON(HEXADECIMAL LITERAL)
#PSIAGT  EQU   X'40'          ..ON(ALTERED GO TO)
#PSIIOED EQU   X'20'          ..ON(I/O ERROR DECLARTIVE)
#PSILDCL EQU   X'10'          ..ON(LABEL DECLARTIVE)
#PSIDBUG EQU   X'08'          ..ON(DEBUGGING DECLARTIVE)
#PSIPSEG EQU   X'04'          ..ON(PROGRAM SEGMENTATION)
#PSIXTND EQU   X'02'          ..ON(OPEN...EXTEND)
#PSIXPGM EQU   X'01'          ..ON(EXIT PROGRAM)
         SPACE 1
PSIPDI22 DS    XL01           BYTE 22 PROCEDURE DIVISION INFO
#PSICLIT EQU   X'80'          ..ON(CALL LITERAL)
#PSICID  EQU   X'40'          ..ON(CALL IDENTIFIER)
#PSICOVR EQU   X'20'          ..ON(CALL...ON OVERFLOW)
#PSICLEN EQU   X'10'          ..ON(CALL...LENGTH OF)
#PSICADR EQU   X'08'          ..ON(CALL...ADDRESS OF)
#PSICLOU EQU   X'04'          ..ON(CLOSE...REAL/UNIT)
#PSIPWR  EQU   X'02'          ..ON(EXPONENTIATION USED)
#PSIFP   EQU   X'01'          ..ON(FLOATING POINT USED)
         SPACE 1
PSIPDI23 DS    XL01           BYTE 23 PROCEDURE DIVISION INFO
#PSIPDCP EQU   X'80'          ..ON(COPY)
#PSICCTL EQU   X'40'          ..ON(BASIS)
#PSIDBPG EQU   X'20'          ..ON(DBCS NAME IN PROG)
#PSISOSI EQU   X'10'          ..ON(SHIFT-OUT/SHIFT-IN USED)
*        BITS 4:7             ..HIGHEST SEVERITY AT ENTRY TO ASM2
*                               MODULE IGYBINIT
#PSISUPR EQU   X'08'          ..ON(SUPRESS), OFF(NOSUPRESS)
#PSISSR1 EQU   X'04'          ..ON(SSR(ZLEN)), OFF(SSR(NOZLEN))
#PSISSR2 EQU   X'02'          ..ON(SSR(ABD)), OFF(SSR(MSG))
#PSIINL  EQU   X'01'          ..ON(INLINE), OFF(NOINLINE)
         SPACE 1
PSIPDI24 DS    XL01           BYTE 24 PROCEDURE DIVISION INFO
#PSIDBLT EQU   X'80'          ..ON(DBCS LITERAL)
#PSIREPL EQU   X'40'          ..ON(REPLACE)
#PSIRFMD EQU   X'20'          ..ON(REFERENCE MODIFICATION USED)
#PSINSTD EQU   X'10'          ..ON(NESTED PROGRAMS)
#PSIINIT EQU   X'08'          ..ON(INITIAL)
#PSICOMN EQU   X'04'          ..ON(COMMON)
#PSISOPT EQU   X'02'          ..ON(SELECT...OPTIONAL)
#PSIXTRN EQU   X'01'          ..ON(EXTERNAL)
         SPACE 1
PSIPDI25 DS    XL01           BYTE 25 PROCEDURE DIVISION INFO
#PSIGLBL EQU   X'80'          ..ON(GLOBAL)
#PSIVLR  EQU   X'40'          ..ON(RECORD IS VARYING)
#PSIIPT  EQU   X'20'          ..ON(ACCEPT FROM SYSIPT)
#PSILST  EQU   X'10'          ..ON(DISPLAY UPON SYSLST)
#PSIPCH  EQU   X'08'          ..ON(DISPLAY UPON SYSPCH)
#PSIFUNC EQU   X'04'          ..ON(INTRINSIC FUNCTION USED) CBLMVS
#PSIZLIT EQU   X'02'          ..ON(Z-LITERAL FOUND) EC 5.1
#PSIRCUR EQU   X'01'          ..ON(RECURSIVE)
         SPACE 1
PSICCO26 DS    XL01           BYTE 26 COBOL COMPILER OPTIONS
#PSIRMOD EQU   X'80'          ..ON(RMODE(ANY)), OFF(RMODE(24))
#PSITST1 EQU   X'40'          ..ON(TEST(STMT))
#PSITST2 EQU   X'20'          ..ON(TEST(PATH))
#PSITST3 EQU   X'10'          ..ON(TEST(BLOCK))
#PSIOFUL EQU   X'08'          ..ON(OPT(FULL)), OFF(OPT(STD/NOOPT))
#PSIINTD EQU   X'04'          ..ON(INTDATE(LILIAN)), OFF(INTDATE(ANSI))
#PSITST4 EQU   X'02'          ..ON(TEST(SEPARATE))
*        EQU   X'01'          ..NOT USED
         SPACE 1
PSICCO27 DS    XL01           BYTE 27 COBOL COMPILER OPTIONS
#PSILUP  EQU   X'80'          ..ON(PGMNAME(LONGUPPER)
#PSILMX  EQU   X'40'          ..ON(PGMNAME(LONGMIXED)
#PSIDLL  EQU   X'20'          ..ON(DLL), OFF(NODLL)
#PSIXPRT EQU   X'10'          ..ON(EXPORTALL), OFF(NOEXPORTALL)
#PSIDAPR EQU   X'08'          ..ON(DATEPROC), OFF(NODATEPROC)
#PSITST7 EQU   X'08'          ..ON(TEST(S)), OFF(TEST(NOS))
#PSIARTH EQU   X'04'          ..ON(ARITH(EXTEND)), OFF(ARITH(COMPAT))
#PSITHRD EQU   X'02'          ..ON(THREAD), OFF(NOTHREAD)
#PSITST6 EQU   X'01'          ..ON(TEST(EJPD)), OFF(TEST(NOEJPD))
         SPACE 1
PSICCO28 DS    XL01           BYTE 28 COBOL COMPILER OPTIONS
#PSISQL  EQU   X'80'          ..ON(SQL), OFF(NOSQL)
#PSICICS EQU   X'40'          ..ON(CICS), OFF(NOCICS)
#PSIMDK  EQU   X'20'          ..ON(MDECK), OFF(NOMDECK)
#PSICCS  EQU   X'10'          ..ON(SQLCCSID), OFF(NOSQLCCSID)
#PSIOPTF EQU   X'08'          ..OPTFILE IS IN EFFECT
#PSIXMLP EQU   X'04'          ..ON(XMLPARSE(XMLSS)),
*                             ..OFF(XMLPARSE(COMPAT))
#PSIBLK0 EQU   X'02'          ..ON(BLOCK0), OFF(NOBLOCK0)
#PSIDSGN EQU   X'01'          ..ON(DISPSIGN(SEP), OFF(DISPSIGN(COMPAT)
         SPACE 1
PSIPDI29 DS    XL01           BYTE 29 PROCEDURE DIVISION INFO
#PSIJAVA EQU   X'80'          ..ON(JAVA BASED OO SYNTAX IN PROGRAM)
#PSIRNDM EQU   X'40'          ..ON(FUNCTION RANDOM USED)
#PSINATL EQU   X'20'          ..ON(NATIONAL DATA USED IN PROGRAM)
#PSIXPSV EQU   X'10'          ..ON(XML PARSE SCHEMA VALIDATION)
#PSISTGO EQU   X'08'          ..ON(STGOPT), OFF(NOSTGOPT)
#PSIAFP  EQU   X'04'          ..ON(AFP(VOLATILE)), OFF(AFP(NOVOLATILE))
#PSIHGPR EQU   X'02'          ..ON(HGPR(PRESERVE)),OFF(HGPR(NOPRESERV))
#PSITST8 EQU   X'01'          ..ON(NOTEST(DWARF)), OFF(NOTEST(NODWARF))
         SPACE 1
PSICCO30 DS    XL01           BYTE 30 COBOL COMPILER OPTIONS
#PSIQUA  EQU   X'80'          ..ON(QUALIFY(EXTEND)),
*                               OFF(QUALIFY(COMPAT))
#PSIFVLR EQU   X'40'          ..ON(VLR(COMPAT)), OFF(VLR(STANDARD))
#PSICPYR EQU   X'20'          ..ON(COPYRIGHT), OFF(NOCOPYRIGHT)
#PSISVCS EQU   X'10'          ..ON(SERVICE), OFF(NOSERVICE)
#PSIZDMI EQU   X'08'          ..ON(ZONEDATA(MIG))
#PSIZDNP EQU   X'04'          ..ON(ZONEDATA(NOPFD))
*                             ..OFF(ZONEDATA(  PFD))
         SPACE 1
PSICCO31 DS    XL01           BYTE 31 COBOL COMPILER OPTIONS
#PSINCZO EQU   X'80'          ..ON(NUMCHECK(ZON))
#PSINCPA EQU   X'40'          ..ON(NUMCHECK(PAC))
#PSINCBI EQU   X'20'          ..ON(NUMCHECK(BIN))
#PSINCAB EQU   X'10'          ..ON(NUMCHECK(ABD)), OFF(NUMCHECK(MSG))
#PSIPC   EQU   X'08'          ..ON(PARMCHECK), OFF(NOPARMCHECK)
#PSIPCAB EQU   X'04'          ..ON(PARMCHECK(ABD)),OFF(PARMCHECK(MSG))
         EJECT
* --------------------------------------------------------- *
* IBM PDS/PDSE DIRECTORY MAP
* --------------------------------------------------------- *
         SPACE 1
PDS2     DSECT
PDS2NAME DS    CL8            MEMBER NAME OR ALIAS NAME
PDS2TTRP DS    XL3            TTR OF 1ST BLOCK
PDS2INDC DS    XL1            INDICATOR BYTE
PDS2ALIS EQU   X'80'          ..THIS IS AN ALIAS ENTRY
*        EQU   X'60'          ..BITS 1:2 #TTR IN USER DATA FIELD
*        EQU   X'1F'          ..BITS 3:7 LGTH OF USER DATA (HWD)
         DS    XL3
         DS    XL1
         DS    XL3
         DS    XL1
PDS2ATR1 DS    XL1            1ST BYTE OF PGM ATTR FIELD
PDS2RENT EQU   X'80'          ..ON  - REENTERABLE (RN)
PDS2REUS EQU   X'40'          ..ON  - REUSE (RU)
PDS2OVLY EQU   X'20'          ..ON  - OVERLAY STRUCTURE (OV)
PDS2TEST EQU   X'10'          ..ON  - TESTRAN
PDS2LOAD EQU   X'08'          ..ON  - ONLY LOADABLE (OL)
PDS2SCTR EQU   X'04'          ..ON  - SCATTER FORMAT (SC)
PDS2EXEC EQU   X'02'          ..ON  - EXECUTABLE
PDS21BLK EQU   X'01'          ..ON  - NO RLD ITEMS, 1 BLK TEXT
*                             ..OFF - MULTI RECORDS 1+ BLK TEXT
PDS2ATR2 DS    XL1            2ND BYTE OF PGM ATTR FIELD
PDS2FLVL EQU   X'80'          ..ON  - LINKAGE EDITOR FAILS IF ERROR
PDS2ORG0 EQU   X'40'          ..ON  - ORIGIN OF 1ST BLK IS 0
PDS2EP0  EQU   X'20'          ..ON  - ENTRY PT IS 0
PDS2NRLD EQU   X'10'          ..ON  - NO RLD ITEMS
PDS2NREP EQU   X'08'          ..ON  - LINKAGE EDITOR CAN'T REPROCESS
PDS2TSTN EQU   X'04'          ..ON  - CONTAINS TESTRAN DATA
PDS2LEF  EQU   X'02'          ..ON  - LINKAGE EDITOR F USED
PDS2REFR EQU   X'01'          ..ON  - REFRESHABLE (RF)
PDS2STOR DS    XL3            SIZE
PDS2FTBL DS    XL2            LGTH OF 1ST BLK OF TEXT
PDS2EPA  DS    XL3            ENTRY POINT ADDR
PDS2FTB1 DS    XL1            1ST FLAG BYTE
PDSAOSLE EQU   X'80'          ..ON  - LINKAGE EDITOR AOS USED
PDS2BIG  EQU   X'40'          ..ON  - LARGE PGM OBJ EXTENTION
PDS2PAGA EQU   X'20'          ..ON  - PAGE ALIGNMENT
PDS2SSI  EQU   X'10'          ..ON  - SSI INFO PRESENT
PDSAPFLG EQU   X'08'          ..ON  - PDSAPF INFO IS VALID
PDS2PGM0 EQU   X'04'          ..ON  - PDS2FTB3 FIELD IS VALID
PDS2FTB2 DS    XL1            2ND FLAG BYTE
PDS2ALTP EQU   X'80'          ..ON  - PRIMARY NAME GENED BY BINDER
PDSLRMOD EQU   X'10'          ..PGM RESIDENCY MODE
*                             ..ON  - RMODE ANY
*                             ..OFF - RMODE24
PDSMAMOD EQU   X'03'          ..PGM ADDR MODE
*        EQU   X'02'          ..ON  - AMODE31
*        EQU   X'03'          ..ON  - AMODE ANY
PDS2FTB3 DS    XL1            3RD FLAG BYTE
PDS2NMIG EQU   X'80'          ..ON  - PGM OBJ CAN'T BE LOADMOD
PDS2PRIM EQU   X'40'          ..ON  - FETCHOPT PRIME WAS SPECIFIED
PDS2PACK EQU   X'20'          ..ON  - FETCHOPT PACK WAS SPECIFIED
         EJECT
* --------------------------------------------------------- *
* TASK INPUT/OUTPUT TABLE (INPUT)
* --------------------------------------------------------- *
         SPACE 1
TIOT     DSECT
         IEFTIOT1
         EJECT
* --------------------------------------------------------- *
* DATA CONTROL BLOCK FOR DSORG=PS (DCB)
* --------------------------------------------------------- *
         SPACE 1
         DCBD  DSORG=PS
         EJECT
* --------------------------------------------------------- *
* JOB FILE CONTROL BLOCK (JFCB)
* --------------------------------------------------------- *
         SPACE 1
JFCB     DSECT
         IEFJFCBN LIST=YES
         SPACE 2
         END   SSLEANAL
./ ADD NAME=UASUMSGT 0108-15062-18295-1335-00036-00032-00000-APLKS   43
*PROCESS RENT
         TITLE 'UASUMSGT - USER ASU LE MESSAGE TABLE'
*        *---------------------------------------------------*
*        * TABLE ID: UASUMSGT                                *
*        *     DESC: USER ASU LE MESSAGE TABLE               *
*        *---------------------------------------------------*
         EJECT
         LCLC  &CORPNME,&CSECT
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'UASUMSGT'
         PRINT ON,GEN
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
&CSECT   CSECT
&CSECT   AMODE 31
&CSECT   RMODE ANY
         ENTRY &CSECT
*
         DC    F'1'               NUMBER OF LANGUAGES
         DC    CL8'ENU'           LANGUAGUE IDENTIFIER
         DC    A(ASUENU)          POINTER TO 1ST LANGUAGE TABLE
ASUENU   EQU   *
         DC    F'0101'            LOWEST MSG NBR IN MODULE
         DC    F'0121'            HIGHEST MSG NBR IN MODULE
         DC    CL8'ASUENU01'      MESSAGE MODULE NAME
ASUENULE EQU   *                  LAST ENTRY OF TABLE FOR LANGUAGE
         DC    F'-1'
         DC    F'-1'
         DC    CL8'DUMMY'
*  ADDITIONAL TABLES FOLLOW
EOT      EQU   *                  END OF TABLE/MODULE
         DS    0D
         DC    C'&CORPNME NONX=&CSECT - &SYSDATC &SYSTIME'
         DC    C' USER ASU LE MESSAGE TABLE '
         DS    0D
         END
./ ADD NAME=ZSUDHHEX 0100-19165-19165-1350-00864-00864-00000-APLKS   28
*PROCESS RENT
         TITLE 'ASUDHHEX - RETURN HORIZONTAL HEXADECIMAL'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* HORIZONTAL HEXADECIMAL
*
* PURPOSE: CONVERT STRING TO HORIZONTAL HEXADECIMAL
*          RETURN THE CHAR/BASE16 STRINGS.
*
*        CALL 'ASUDHHEX' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR N/A
*       2: UPPER CASE TRANSLATION N/A
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDHHEX'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE (RESULT)
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             BAR OF PREV TEMPLATE (RESULT)
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         SPACE 1
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
PTMPLATE DS    A              PREV TEMPLATE ADDRESS
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
HLD2_LGTH DS    F             SOURCE FIELD LENGTH * 2
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..PRINTABLE TR VECTOR HAS BEEN PROCESSED
$STATE2  EQU   X'02'          ..RESULT CHAR STRING HAS BEEN COPIED
$STATE3  EQU   X'03'          ..RESULT HEX  STRING HAS BEEN COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* HHEX:     CONVERT SOURCE STRING INTO TWO RESULT STRINGS.
*           THE FIRST BEING THE PRINTABLE CHARACTER
*           REPRESENTATION OF THE SOURCE BYTES.  THE SECOND
*           BEING THE HEXADECIMAL OF THE INDIVIDUAL SOURCE
*           BYTES.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR N/A
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |NNNN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |NNNN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |LLLL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------------------------+
*                          |II|00LL|PRINTABLE CHAR TR TABLE      |
*                          |  |    |OR                           |
*                          |  | -  |PRINTABLE CHAR TR TABLE ADDR |
*                          +--+----+-----------------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|LLLL|ZZZZ|RESULT | PRINTABLE CHAR
*                          +--+----+----+-------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|LLLL|ZZZZ|RESULT | HEXADECIMAL
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*     NNNN: COUNT FIELD UNSIGNED (2 BYTE BINARY)
*       LL: LENGTH FIELD SIGNED|UNSIGNED 0:256 (2 BYTE BINARY)
*     LLLL: LENGTH FIELD SIGNED|UNSIGNED (2 BYTE BINARY)
*     ZZZZ: MAX RESULT FIELD LENGTH UNSIGNED (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CHI   R2,16383       Q. VALID LENGTH
         JH    TXT0115A       A. NO
         SLL   R2,1           MULTIPLY BY 2
         ST    R2,HLD2_LGTH   SAVE SOURCE LGTH * 2
         SRL   R2,1           DIVIDE BY 2
         ST    R2,HLD1_LGTH   SAVE SOURCE LGTH
         AHI   R2,-1
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD1_CRSR   A. NO
MAIN0290 EQU   *
         LA    R0,XUPTBL      EST DEFAULT PRINTABLE CHAR TR TABLE
         ST    R0,FW32
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CH    R5,=Y(&I)      Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CHI   R5,2           Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LHI   R4,4           SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CHI   RF,4           Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER PRINTABLE TR VECTOR
         J     TXT0115C       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL PRINTABLE TR VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115E       A. NO
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN Q. VALID LENGTH
         JZ    TXT0115F            A. NO,
         SRA   R0,16               Q. VALID LENGTH
         JM    MAIN1020            A. NO,
         LA    R1,C2.TP_STR
         J     MAIN1030
MAIN1020 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105D            A. NO,
         LPR   R0,R0
MAIN1030 EQU   *
         CHI   R0,256              Q. VALID LENGTH
         JNE   TXT0115F            A. NO
         ST    R1,FW32        SAVE ADDR OF OPTIONAL TR VECTOR
         SPACE 1
         MVI   PSTATE,$STATE1 PRINTABLE TR VECTOR HAS BEEN PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* COPY SOURCE STRING TO 1ST RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   PSTATE,$STATE2 Q. COPY SOURCE TO 1ST RESULT
         JL    MAIN3100       A. YES
         CLI   PSTATE,$STATE2 Q. COPY SOURCE TO 2ND RESULT
         JE    MAIN3200       A. YES
         J     MAIN0380       A. NO, GO BUMP TO NEXT TEMPLATE
         SPACE 1
MAIN3100 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R4,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    TXT0115G                 A. NO,
         LARL  RE,MAIN3110
         SRL   R4,16
         C     R4,HLD1_LGTH   Q. RESULT LARGE ENOUGH
**       JL    TXT0117A       A. NO, OVERFLOW
         JL    MAIN3110       A. NO, OVERFLOW
         J     MAIN3114       A. YES, BYPASS
MAIN3110 EQU   *
         MVC   C2.TP_STR_LEN,C1.TP_STR_SIZE
         J     MAIN3116
MAIN3114 EQU   *
         MVC   C2.TP_STR_LEN,HLD1_LGTH+L'HLD1_LGTH-L'C2.TP_STR_LEN
MAIN3116 EQU   *
         LARL  RE,EXIT0000
         AHI   R4,-1                                    *LKS*
         L     R5,HLD1_CRSR   GET SOURCE FIELD ADDR
         J     *+4+6
         MVC   C2.TP_STR(0),0(R5)  COPY SOURCE CHARS TO RESULT
*+4+6    EQU   *
         EX    R4,*-6                                   *LKS*
         MVI   PSTATE,$STATE2 SOURCE HAS BEEN MOVED TO RESULT
         ST    R7,PTMPLATE    SAVE ADDR OF PREVIOUS RESULT STRING
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* CONVERT 1ST RESULT STRING TO HEXADECIMAL STRING AND COPY
* TO THE 2ND RESULT STRING
* AND TR 1ST RESULT STRING TO PRINTABLE CHARACTERS
* --------------------------------------------------------- *
         SPACE 1
MAIN3200 EQU   *
         MVC   C2.TP_STR_LEN,H0
         ICM   R3,12,C1.TP_STR_SIZE     Q. VALID VALUE
         JZ    TXT0115G                 A. NO,
         LARL  RE,MAIN3210
         SRL   R3,16
**       C     R3,HLD2_LGTH   Q. RESULT LARGE ENOUGH
**       JL    TXT0117B       A. NO, OVERFLOW
MAIN3210 EQU   *
         L     R8,PTMPLATE    RESTORE PREVIOUS RESULT STRING
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
P1       USING ASU9LA06,P.TP_PAT_PFX+L'P.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P1.TP_STR_SIZE+L'P1.TP_STR_SIZE
         SPACE 1
*        SETUP UNPK LOOP CONTROL
         LA    R5,P2.TP_STR   POINT TO PREV RESULT STRING
         LA    R4,C2.TP_STR   POINT TO CURR RESULT STRING
         ICM   R1,12,P2.TP_STR_LEN GET PREV RESULT STRING LENGTH
         SRL   R1,16
         SPACE 1
MAIN3220 EQU   *
         UNPK  ZD02(9),0(5,R5)     UNPK PREV RESULT STRING
         NC    ZD02(8),=8X'0F'
         TR    ZD02(8),=CL16'0123456789ABCDEF'
         C     R1,F4          Q. END OF PREV RESULT STRING
         JL    MAIN3224       A. YES,BYPASS
         MVC   0(8,R4),ZD02   MOVE HEX TO CURR RESULT STRING
         AHI   R5,4           INCR PREV RESULT CURSOR
         AHI   R4,8           INCR CURR RESULT CURSOR
         AHI   R1,-4          DECR PREV RESULT LENGTH
         J     MAIN3220
MAIN3224 EQU   *
         C     R1,F0          Q. END OF PREV RESULT STRING
         JE    MAIN3226       A. YES, BYPASS
         AHI   R1,-1
         J     *+4+6
         MVC   0(0,R4),ZD02
*+4+6    EQU   *
         EX    R1,*-6
         ICM   R1,12,P2.TP_STR_LEN GET PREV RESULT STRING LENGTH
         SRL   R1,16
         SLL   R1,1
         STCM  R1,3,C2.TP_STR_LEN  SAVE CURR RESULT STRING LENGTH
MAIN3226 EQU   *
         ICM   R1,12,P2.TP_STR_LEN GET PREV RESULT STRING LENGTH
         SRL   R1,16
         AHI   R1,-1
         L     R4,FW32        GET TR TABLE ADDR
         J     *+4+6
         TR    P2.TP_STR(0),0(R4)  TR SOURCE TO PRINTABLE CHAR
*+4+6    EQU   *
         EX    R1,*-6
MAIN3230 EQU   *
         MVI   PSTATE,$STATE3 HEXADECIMAL HAS BEEN MOVED TO RESULT
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  P2,P1,P
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105B AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((5-1)*L'ISICOL)(6),=CL6'1-ASCB'
         J     MSG0105E
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H14
         MVC   ISITXT+((5-1)*L'ISICOL)(14),=CL14'6-XLATE VECTOR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((7-1)*L'ISICOL)(7),=CL7'1:32767'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'3:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'=256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'>0'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RESULT-1'
         J     MSG0117W
         SPACE 1
TXT0117B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RESULT-2'
         SPACE 1
**       J     MSG0117W
         SPACE 1
MSG0117W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0001
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
ERTN0800 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         ICM   R1,15,SUBPARM6
         JZ    ERTN0810
         MVC   0(L'ISICTOK,R1),ISICTOK
         SPACE 1
ERTN0810 EQU   *
         L     R6,SUBPARM0    GET ADDR OF ASCA
         USING ASCAHDR,R6     EST ADDR TO ASCA
         L     R5,ASCA_@ASAB  GET ADDR OF ASAB
         USING ASABHDR,R5     EST ADDR TO ASAB
         L     R5,ASAB_@ASABX GET ADDR OF ASABX
         DROP  R5
         USING ASABXHDR,R5    EST ADDR TO ASABX
         AS2PLIST (ASCAHDR,ISIROW,0),                                  +
               VL,MF=(E,PLIST)
*        CALL ASUMETXT
         L     RF,ASAB1_@METXT
         BASR  RE,RF     LINK TO
         SPACE 1
         ICM   RF,12,ASCA_CUR_CTOKN     RETRIEVE SEVERITY
         SRL   RF,14          ..SET RETURN CODE TO LESEV*4
         ST    RF,RTNCD
         DROP  R5,R6
         SPACE 1
ERTN0840 EQU   *
         AS2RESTK POP
         BR    RE        RETURN TO CALLER
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H14      DC    H'14'
H16      DC    H'16'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ZSUDSDEL 0100-18312-18312-1600-01001-01001-00000-APLKS   31
*PROCESS RENT
         TITLE 'ASUDSDEL - RETURN SOURCE MINUS/DELETE SUBSTR'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* DELETE SUBSTR
*
* PURPOSE: RETURN STRING MINUS/DELETE SELECTED SUBSTR IN RESULT
*
*        CALL 'ASUDSDEL' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSDEL'
&C       SETC  ''
&I       SETA  3
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
PTMPLATE DS    A              PREVIOUS TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER FREQUENCY VECTOR PROCESSED
$STATE2  EQU   X'02'          ..OPTIONAL STRING PATTERN PROCESSED
$STATE3  EQU   X'03'          ..STRING PATTERN NOT FOUND
$STATE4  EQU   X'04'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO FPOS
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
*        INPUT SOURCE FOR CALL TO FPOS
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO FPOS
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
         DS    XL4
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* STRDEL:
*
*           RETURNS THE SOURCE STRING MINUS SELECTED
*           SUBSTR IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-------------------+
*                          |II|00LL|LFU VECTOR         |
*                          |  |    |OR                 |
*                          |  | -  |LFU VECTOR ADDRESS |
*                          +--+----+-------------------+
*
*               ADDRESS OF SUBSTR TO DELETE
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CH    R2,H256        Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         L     R4,HLD1_STOP   POINT TO END OF SOURCE
         L     R3,HLD1_STRT   POINT TO BEGIN OF SOURCE
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CH    R5,=Y(&I)      Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CH    R5,H1          Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LH    R4,H4          SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CH    RF,H4          Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER FREQ VECTOR
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
         DROP  C2,C
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER FREQUENCY VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115H       A. NO
         SPACE 1
         MVI   PSTATE,$STATE1 USER FREQ VECTOR PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* PROCESS STRING PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. PROCESSED STRING PATTERN YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
X        USING ASU9LA04,R8    NEXT ENTRY
         CLI   X.TP_PAT_TYPE,$RSTR Q. NEXT RESULT TEMPLATE
         JE    MAIN2100            A. YES, PROCESS OPT (SRCHARG)
         DROP  X
         J     MAIN0380       NEXT TEMPLATE
MAIN2100 AS2LTRCE ,           MUST BE OPTIONAL INPUT TEMPLATE
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H12
         XC    LSO1_PSA,LSO1_PSA
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         CLI   PSTATE,$STATE1 Q. USER FREQ VECTOR PROCESSED
         JE    MAIN2160       A. YES
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF STRING PATTERN
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         J     MAIN2180
MAIN2160 EQU   *
         LA    R0,F3
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF USER DELIM LIST
         MVC   PLIST+((6-1)*4),SUBPARM5+4    SAVE ADDR OF STR PATTERN
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((7-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((7-1)*4),X'80'
MAIN2180 AS2LTRCE
         LA    R1,PLIST
*        CALL  ASUDFPOS
         L     RF,@FPOS
         BASR  RE,RF     LINK TO
         LARL  RE,EXIT0000
         MVI   PSTATE,$STATE2      PROCESS STRING PATTERN COMPLETE
         CLC   LSR1_TP_STR(L'F0),F0
         JNE   MAIN2190
         MVI   PSTATE,$STATE3      STRING PATTERN NOT FOUND
         ST    R7,PTMPLATE         SAVE SRCHARG TEMPLATE ADDR
         J     MAIN0380
MAIN2190 AS2LTRCE
         ICM   R0,15,LSR1_TP_STR   GET SRCH FLD START POS
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=SRCH FLD START POS - 1
         SPACE 1
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R1,12,C2.TP_STR_LEN GET SRCH FLD LEN
         DROP  C2,C
         SRL   R1,16
         AR    R0,R1          ADD LEN OF SRCH FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....+ SRCH FLD LEN
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF SRCH FLD
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....- SRCH FLD LEN
*                             ..LEN=WHATS LEFT OVER
         J     MAIN0380
         SPACE 2
* --------------------------------------------------------- *
* PROCESS RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         CLI   PSTATE,$STATE3 Q. PROCESSED RESULT STRING YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 OR $STATE2 OR $STATE3
MAIN3100 EQU   *
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         LARL  RE,EXIT0000
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE
         JZ    MAIN3300
         SRL   R2,16
         CH    R2,H256        Q. RESULT FIELD TOO LARGE
         JH    TXT0115G       A. YES
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN3110
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN3110 EQU   *
         CLI   PSTATE,$STATE3      Q. STRING PATTERN NOT FOUND
         JE    MAIN3500            A. YES, ISSUE MESSAGE AND EXIT
         CLI   PSTATE,$STATE2      Q. STRING PATTERN PROCESSED
         JE    MAIN3300            A. YES,
MAIN3200 AS2LTRCE ,           USE REQUEST OPTIONS AS INPUT
         XC    FW31,FW31      INIT SRC FLD PREFIX INFO
         XC    FW41,FW41      INIT SRC FLD SUFFIX INFO
         ICM   R0,12,RO_START Q. START POS > 0
         JZ    MAIN3202       A. NO,
         SRL   R0,16          A. YES,
         CH    R0,H256        Q. START POS > 256
         JH    TXT0115E       A. YES,
         J     MAIN3204
MAIN3202 EQU   *
         L     R0,F1
MAIN3204 EQU   *
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=START POS - 1
         LH    R1,RO_COUNT    GET LEN
         CH    R1,H256        Q. LEN > 256
         JH    TXT0115F       A. YES,
         AR    R0,R1          ADD LEN OF START FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF START FLD
         LTR   R1,R1          Q. LEN OF START FLD = 0
         JNZ   MAIN3206       A. NO,
         LR    R2,R1          Q. YES, TRUNCATE SRC SUFFIX
MAIN3206 EQU   *
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=WHATS LEFT OVER
         DROP  R6
         SPACE 1
MAIN3300 AS2LTRCE ,           DELETE STRING, BUILD RESULT
*                             COMPUTE OVERALL LENGTH NEEDED
         LH    R2,HW32        ..ADD IN LENGTH OF SRC PREFIX
         AH    R2,HW42        ..ADD IN LENGTH OF SRC SUFFIX
         CLM   R2,3,C1.TP_STR_SIZE Q. RESULT LARGE ENOUGH
         JH    TXT0117A            A. NO
         STCM  R2,3,C2.TP_STR_LEN  STORE RSLT LEN
         SPACE 1
         L     R4,HLD1_STRT   POINT TO SOURCE
* R4 POINTS TO CURRENT POSITION OF SRC STRING
         LA    R5,C2.TP_STR   POINT TO RSLT STRING
* R5 POINTS TO CURRENT POSITION OF RSLT STRING
         ICM   R2,12,HW32     Q. GET SRC PREFIX LEN
         JZ    MAIN3340       A. NO SRC PREFIX
         SRL   R2,16          A. YES, SRC PREFIX EXIST
         AHI   R2,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R4)  MOVE IN SRC PREFIX
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R2          REPOSITION START OF RSLT STRING
         AHI   R5,1
**       J     MAIN3360       GO APPEND SRC SUFFIX TO RSLT
         SPACE 1
MAIN3340 EQU   *              DELETE STRING IS PREFIX
MAIN3360 EQU   *              APPEND SRC SUFFIX TO RSLT STRING
         ICM   R2,12,HW42     Q. GET SRC SUFFIX LEN
         JZ    MAIN3600       A. NO SRC SUFFIX
         SRL   R2,16          A. YES, SRC SUFFIX EXIST
         AHI   R2,-1
         AH    R4,HW41        REPOSITION TO SRC SUFFIX
         J     *+4+6
         MVC   0(0,R5),0(R4)  APPEND SRC SUFFIX TO RSLT STRING
*+4+6    EQU   *
         EX    R2,*-6
         J     MAIN3600
         SPACE 1
MAIN3500 AS2LTRCE ,           SRCH ARG STRING NOT FOUND
         LARL  RE,MAIN3600
         J     TXT0110A       STRING NOT FOUND
MAIN3600 AS2LTRCE
         MVI   PSTATE,$STATE4 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105B AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((5-1)*L'ISICOL)(6),=CL6'1-ASCB'
         J     MSG0105E
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,PTMPLATE    RESTORE PREVIOUS INPUT SRCHARG STR
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P.TP_PAT_PFX+L'P.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),P2.TP_STR_LEN
         ICM   R2,12,P2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),P2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH STRING
         DROP  P2,P
         SPACE 1
**       J     MSG0110W
         SPACE 1
MSG0110W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03E_0001
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *         NOT FOUND
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'STRING'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SEARCH ARG'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1,2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_COUNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_COUNT
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
ERTN0800 AS2LTRCE
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         ICM   R1,15,SUBPARM6
         JZ    ERTN0810
         MVC   0(L'ISICTOK,R1),ISICTOK
         SPACE 1
ERTN0810 EQU   *
         L     R6,SUBPARM0    GET ADDR OF ASCA
         USING ASCAHDR,R6     EST ADDR TO ASCA
         L     R5,ASCA_@ASAB  GET ADDR OF ASAB
         USING ASABHDR,R5     EST ADDR TO ASAB
         L     R5,ASAB_@ASABX GET ADDR OF ASABX
         DROP  R5
         USING ASABXHDR,R5    EST ADDR TO ASABX
         AS2PLIST (ASCAHDR,ISIROW,0),                                  +
               VL,MF=(E,PLIST)
*        CALL ASUMETXT
         L     RF,ASAB1_@METXT
         BASR  RE,RF     LINK TO
         SPACE 1
         ICM   RF,12,ASCA_CUR_CTOKN     RETRIEVE SEVERITY
         SRL   RF,14          ..SET RETURN CODE TO LESEV*4
         ST    RF,RTNCD
         DROP  R5,R6
         SPACE 1
ERTN0840 EQU   *
         AS2RESTK POP
         BR    RE        RETURN TO CALLER
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 1
@FPOS    DC    V(ASUDFPOS)         16 - 1ST POS
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F7       DC    F'7'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H256     DC    H'256'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ZSUDSREP 0100-18312-18312-1601-01081-01081-00000-APLKS   11
*PROCESS RENT
         TITLE 'ASUDSREP - RETURN SOURCE REPLACING SUBSTR'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* REPLACE SUBSTR
*
* PURPOSE: RETURN STRING REPLACING SELECTED SUBSTR IN RESULT
*
*        CALL 'ASUDSREP' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD
*       6: PSA LENGTH AND AREA N/A
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSREP'
&C       SETC  ''
&I       SETA  4
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').MVS0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.MVS0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
*                             BAR OF PREVIOUS TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
PTMPLATE DS    A              PREVIOUS TEMPLATE ADDRESS
         SPACE 1
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER FREQUENCY VECTOR PROCESSED
$STATE2  EQU   X'02'          ..OPTIONAL STRING PATTERN PROCESSED
$STATE3  EQU   X'03'          ..STRING PATTERN NOT FOUND
$STATE4  EQU   X'04'          ..RESULT 1 FIELD COPIED
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO FPOS
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
*        INPUT SOURCE FOR CALL TO FPOS
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO FPOS
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
         DS    XL4
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* STRREPL:
*
*           RETURNS THE SOURCE STRING REPLACING A SELECTED
*           SUBSTR IN RESULT.
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   |
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-------------------+
*                          |II|00LL|LFU VECTOR         |
*                          |  |    |OR                 |
*                          |  | -  |LFU VECTOR ADDRESS |
*                          +--+----+-------------------+
*
*               ADDRESS OF SOURCE SUBSTR TO LOCATE FOR REPLACE
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               ADDRESS OF REPLACING SUBSTR
*               +--------+
*               |PTR     |
*               +--------+ +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*               +--------+
*               |PTR     |
*               +--------+ +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         NI    PSTATE,255-$CNTREQ  SET FOR NEW REQUEST
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CH    R2,H256        Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD1_STRT
         ST    R1,HLD1_CRSR
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
MAIN0290 EQU   *
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         L     R5,PATCNT
         CH    R5,=Y(&I)      Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CH    R5,H2          Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LH    R4,H4          SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         DROP  C
         SRL   RF,24
         CH    RF,H4          Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER FREQ VECTOR
         J     MAIN2000       ..02 STRING PATTERN
         J     TXT0115C       ..03 NUMERIC PATTERN
         J     MAIN3000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER FREQUENCY VECTOR
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115G       A. NO
         SPACE 1
         MVI   PSTATE,$STATE1 USER FREQ VECTOR PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* PROCESS INPUT STRING PATTERN (OPTIONAL OR REPLACE)
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE3 Q. REPLACEMENT STRING PROCESSED YET
         JH    MAIN0380       A. YES,
*        IF $STATE0 OR $STATE1 SCAN INPUT
X        USING ASU9LA04,R8    NEXT ENTRY
         CLI   X.TP_PAT_TYPE,$SPAT Q. NEXT ALSO STRING TEMPLATE
         JE    MAIN2100            A. YES, PROCESS OPT (SRCHARG)
         CLI   X.TP_PAT_TYPE,$RSTR Q. NEXT RESULT TEMPLATE
         JE    MAIN2300            A. YES, PROCESS REPL STRING
         DROP  X
         J     MAIN0380       NEXT TEMPLATE
MAIN2100 AS2LTRCE ,           MUST BE OPTIONAL INPUT TEMPLATE
         LARL  RE,EXIT0000
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H12
         XC    LSO1_PSA,LSO1_PSA
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         CLI   PSTATE,$STATE1 Q. USER FREQ VECTOR PROCESSED
         JE    MAIN2160       A. YES
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF STRING PATTERN
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         J     MAIN2180
MAIN2160 EQU   *
         LA    R0,F3
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),SUBPARM5 SAVE ADDR OF USER DELIM LIST
         MVC   PLIST+((6-1)*4),SUBPARM5+4    SAVE ADDR OF STR PATTERN
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((7-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((7-1)*4),X'80'
MAIN2180 AS2LTRCE
         LA    R1,PLIST
*        CALL  ASUDFPOS
         L     RF,@FPOS
         BASR  RE,RF     LINK TO
         LARL  RE,EXIT0000
         MVI   PSTATE,$STATE2      PROCESS STRING PATTERN COMPLETE
         CLC   LSR1_TP_STR(L'F0),F0
         JNE   MAIN2190
         MVI   PSTATE,$STATE3      STRING PATTERN NOT FOUND
         J     MAIN0380
MAIN2190 AS2LTRCE
         ICM   R0,15,LSR1_TP_STR   GET SRCH FLD START POS
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=SRCH FLD START POS - 1
         SPACE 1
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R1,12,C2.TP_STR_LEN GET SRCH FLD LEN
         DROP  C2,C
         SRL   R1,16
         AR    R0,R1          ADD LEN OF SRCH FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....+ SRCH FLD LEN
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF SRCH FLD
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=SRCH FLD START POS - 1
*                             ....- SRCH FLD LEN
*                             ..LEN=WHATS LEFT OVER
         J     MAIN0380
         SPACE 1
MAIN2300 AS2LTRCE
         ST    R7,PTMPLATE    SAVE ADDR FOR FUTHER PROCESSING
         J     MAIN0380
         SPACE 2
* --------------------------------------------------------- *
* PROCESS RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 AS2LTRCE
         CLI   PSTATE,$STATE4 Q. PROCESSED RESULT STRING YET
         JH    MAIN0380       A. YES
*        IF $STATE2 OR $STATE3
MAIN3100 AS2LTRCE
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         LARL  RE,EXIT0000
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE     Q. DUMMY RESULT
         JZ    MAIN3600                 A. YES, BYPASS
         SRL   R2,16
         CH    R2,H256        Q. RESULT FIELD TOO LARGE
         JH    TXT0115H       A. YES
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN3110
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR INIT RESULT FIELD
*+4+6    EQU   *
         EX    R2,*-6
MAIN3110 EQU   *
         CLI   PSTATE,$STATE3      Q. STRING PATTERN NOT FOUND
         JE    MAIN3500            A. YES, ISSUE MESSAGE AND EXIT
         CLI   PSTATE,$STATE2      Q. STRING PATTERN PROCESSED
         JE    MAIN3300            A. YES,
MAIN3200 AS2LTRCE ,           USE REQUEST OPTIONS AS INPUT
         XC    FW31,FW31      INIT SRC FLD PREFIX INFO
         XC    FW41,FW41      INIT SRC FLD SUFFIX INFO
         ICM   R0,12,RO_START Q. START POS > 0
         JZ    MAIN3202       A. NO,
         SRL   R0,16          A. YES,
         CH    R0,H256        Q. START POS > 256
         JH    TXT0115E       A. YES,
         J     MAIN3204
MAIN3202 EQU   *
         L     R0,F1
MAIN3204 EQU   *
         AHI   R0,-1
         ST    R0,FW31        SAVE SRC FLD PREFIX (OFFSET,LEN)
*                             ..OFFSET=0
*                             ..LEN=START POS - 1
         LH    R1,RO_COUNT    GET LEN
         CH    R1,H256        Q. LEN > 256
         JH    TXT0115F       A. YES,
         AR    R0,R1          ADD LEN OF START FLD
         SLL   R0,16          SHIFT OFFSET TO ALIGN WITH 1ST HW
         ST    R0,FW41        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=0
         L     R2,HLD1_LGTH   PICKUP LGTH OF SRC FLD
         SH    R2,HW32        SUBT LGTH OF SRC FLD PREFIX
         SR    R2,R1          SUBT LGTH OF START FLD
         LTR   R1,R1          Q. LEN OF START FLD = 0
         JNZ   MAIN3206       A. NO,
         LR    R2,R1          Q. YES, TRUNCATE SRC SUFFIX
MAIN3206 EQU   *
         STH   R2,HW42        SAVE SRC FLD SUFFIX (OFFSET,LEN)
*                             ..OFFSET=START POS - 1
*                             ....+ COUNT
*                             ..LEN=WHATS LEFT OVER
         DROP  R6
         SPACE 1
MAIN3300 AS2LTRCE ,           REPLACE STRING, BUILD RESULT
         L     R8,PTMPLATE    RESTORE PREVIOUS INPUT REPL STR
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P.TP_PAT_PFX+L'P.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,P2.TP_STR_LEN      Q. VALID LENGTH
         JZ    TXT0115I                 A. NO
         SRA   R0,16          Q. VALID LENGTH
         JM    MAIN3320       A. YES
         LA    R1,P2.TP_STR   GET REPL STR ADDR
         J     MAIN3330
MAIN3320 EQU   *
         ICM   R1,15,P2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105D            A. NO
         LPR   R0,R0
         DROP  P2,P
MAIN3330 EQU   *
         CH    R0,H256        Q. VALID LENGTH
         JH    TXT0115I       A. NO
         SPACE 1              COMPUTE OVERALL LENGTH NEEDED
         LH    R2,HW32        ..ADD IN LENGTH OF SRC PREFIX
         AH    R2,HW42        ..ADD IN LENGTH OF SRC SUFFIX
         AR    R2,R0          ..ADD IN LENGTH OF REPL STRING
         CLM   R2,3,C1.TP_STR_SIZE Q. RESULT LARGE ENOUGH
         JH    TXT0117A            A. NO
         STCM  R2,3,C2.TP_STR_LEN  STORE RSLT LEN
         SPACE 1
         L     R4,HLD1_STRT   POINT TO SOURCE
* R4 POINTS TO CURRENT POSITION OF SRC STRING
         LA    R5,C2.TP_STR   POINT TO RSLT STRING
* R5 POINTS TO CURRENT POSITION OF RSLT STRING
         ICM   R2,12,HW32     Q. GET SRC PREFIX LEN
         JZ    MAIN3340       A. NO SRC PREFIX
         SRL   R2,16          A. YES, SRC PREFIX EXIST
         AHI   R2,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R4)  MOVE IN SRC PREFIX
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R2          REPOSITION START OF RSLT STRING
         AHI   R5,1
         J     MAIN3350       GO APPEND REPL STRING TO RSLT
         SPACE 1
MAIN3340 EQU   *              REPL STRING IS PREFIX
         LR    R2,R0          GET REPL STRING LEN
         AHI   R2,-1
         J     *+4+6
         MVC   C2.TP_STR(0),0(R1)  APPEND REPL STR TO RSLT
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R0          REPOSITION START OF RSLT STRING
         J     MAIN3360       GO APPEND SRC SUFFIX TO RSLT
MAIN3350 EQU   *              APPEND REPL STRING TO RSLT
         LR    R2,R0          GET REPL STRING LEN
         AHI   R2,-1
         J     *+4+6
         MVC   0(0,R5),0(R1)  APPEND REPL STR TO RSLT
*+4+6    EQU   *
         EX    R2,*-6
         AR    R5,R0          REPOSITION START OF RSLT STRING
MAIN3360 EQU   *              APPEND SRC SUFFIX TO RSLT STRING
         ICM   R2,12,HW42     Q. GET SRC SUFFIX LEN
         JZ    MAIN3600       A. NO SRC SUFFIX
         SRL   R2,16          A. YES, SRC SUFFIX EXIST
         AHI   R2,-1
         AH    R4,HW41        REPOSITION TO SRC SUFFIX
         J     *+4+6
         MVC   0(0,R5),0(R4)  APPEND SRC SUFFIX TO RSLT STRING
*+4+6    EQU   *
         EX    R2,*-6
         J     MAIN3600
         SPACE 1
MAIN3500 AS2LTRCE ,           ISSUE MESSAGE AND EXIT
         LARL  RE,MAIN3600
         J     TXT0110A       STRING NOT FOUND
         SPACE 1
MAIN3600 AS2LTRCE
         MVI   PSTATE,$STATE4 RESULT 1 FIELD COPIED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         DROP  C2,C1,C
         SPACE 2
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105B AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((5-1)*L'ISICOL)(6),=CL6'1-ASCB'
         J     MSG0105E
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H14
         MVC   ISITXT+((5-1)*L'ISICOL)(14),=CL14'6/7/8 REPL STR'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,PTMPLATE    RESTORE PREVIOUS INPUT SRCHARG STR
P        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
P2       USING ASU9LA07,P.TP_PAT_PFX+L'P.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),P2.TP_STR_LEN
         ICM   R2,12,P2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),P2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH STRING
         DROP  P2,P
**       J     MSG0110W
         SPACE 1
MSG0110W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03E_0001
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *         NOT FOUND
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'STRING'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SEARCH ARG'
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
**       J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
*        J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'2:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1,2,4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_COUNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_COUNT
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115I AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
**       J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
ERTN0800 AS2LTRCE
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         ICM   R1,15,SUBPARM6
         JZ    ERTN0810
         MVC   0(L'ISICTOK,R1),ISICTOK
         SPACE 1
ERTN0810 EQU   *
         L     R6,SUBPARM0    GET ADDR OF ASCA
         USING ASCAHDR,R6     EST ADDR TO ASCA
         L     R5,ASCA_@ASAB  GET ADDR OF ASAB
         USING ASABHDR,R5     EST ADDR TO ASAB
         L     R5,ASAB_@ASABX GET ADDR OF ASABX
         DROP  R5
         USING ASABXHDR,R5    EST ADDR TO ASABX
         AS2PLIST (ASCAHDR,ISIROW,0),                                  +
               VL,MF=(E,PLIST)
*        CALL ASUMETXT
         L     RF,ASAB1_@METXT
         BASR  RE,RF     LINK TO
         SPACE 1
         ICM   RF,12,ASCA_CUR_CTOKN     RETRIEVE SEVERITY
         SRL   RF,14          ..SET RETURN CODE TO LESEV*4
         ST    RF,RTNCD
         DROP  R5,R6
         SPACE 1
ERTN0840 EQU   *
         AS2RESTK POP
         BR    RE        RETURN TO CALLER
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKEN
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 1
@FPOS    DC    V(ASUDFPOS)         16 - 1ST POS
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F5       DC    F'5'
F7       DC    F'7'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H14      DC    H'14'
H256     DC    H'256'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
./ ADD NAME=ZSUDSVAR 0100-18312-18312-1601-01399-01399-00000-APLKS   37
*PROCESS RENT
         TITLE 'ASUDSVAR - RETURNS LEXEMES FROM SOURCE VIA PATTERNS'
* --------------------------------------------------------- *
* ARCHITECTURE SERVICES UTILITY COMMON
* PARSE VAR
*
* PURPOSE: RETURNS LEXEMES FROM SOURCE VIA PATTERNS
*
*        CALL 'ASUDSVAR' USING ASCA, ASU9LA02, ASU9LA03,
*             TEMPLATE_COUNT, TEMPLATES..., FC.
*
*        WHERE:
*             ASCA: (INPUT,DATA STRUCTURE)
*                   AS COMMUNICATION AREA
*         ASU9LA02: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS REQUEST OPTIONS
*         ASU9LA03: (INPUT,DATA STRUCTURE)
*                   LEXICAL ANALYSIS SOURCE DATA
*   TEMPLATE_COUNT: (INPUT,FULLWORD)
*                   COUNT OF TEMPLATES FOLLOWING
*        TEMPLATES: (INPUT/OUTPUT,DATA STRUCTURES)
*               FC: (OUTPUT,12-BYTE LE DATA STRUCTURE) OPTIONAL
*                   LE FEEDBACK DATA TYPE
*
* OPTIONS: (ASU9LA02)
*
*       1: DEFAULT DELIMITER/PAD/STRIP CHAR
*       2: UPPER CASE TRANSLATION
*       3: STRIP LEADING/TRAILING/BOTH N/A
*       4: INITIAL START POSITION
*       5: COUNT FIELD N/A
*       6: PSA LENGTH AND AREA
*
* --------------------------------------------------------- *
         SPACE 1
         LCLA  &I
         LCLC  &CORPNME,&CSECT,&C
&CORPNME SETC  'BUZZARD CREEK TECH, INC.'
&CSECT   SETC  'ASUDSVAR'
&C       SETC  ''
&I       SETA  16
         PRINT ON,GEN
         AIF   ('&SYSPARM' EQ 'PKG').ASM0001
         PUNCH ' ENTRY &CSECT'
         PUNCH ' SETOPT PARM(REUS=RENT)'
*        PUNCH ' SETSSI CB@@@###'
.ASM0001 ANOP
         SPACE 2
* --------------------------------------------------------- *
* REGISTER EQUATES
* --------------------------------------------------------- *
         SPACE 1
R0       EQU   0              WORK REG
R1       EQU   1              WORK REG, ADDR OF PARM LIST
R2       EQU   2              WORK REG
R3       EQU   3              WORK REG
R4       EQU   4              WORK REG
R5       EQU   5              WORK REG
*                             BAR OF ASAB, ASABX
R6       EQU   6              BAR OF REQUEST OPTIONS
*                             BAR OF ASCA
R7       EQU   7              BAR OF SOURCE
*                             BAR OF CURRENT TEMPLATE
R8       EQU   8              BAR OF NEXT TEMPLATE
R9       EQU   9              BAR OF STATIC PERSISTENT STORAGE
RA       EQU   10             PROGRAM BAR 1
RB       EQU   11             RESERVED FOR BAR 2
RC       EQU   12             BAR OF LE CAA
RD       EQU   13             BAR OF LE DSA, RSA & DYNAMIC
*                             USER TRANSIENT STORAGE AREA (TSA)
RE       EQU   14             RETURN ADDR
RF       EQU   15             BRANCH AND LINK ADDR
         SPACE 2
         PUSH  PRINT
         PRINT OFF
         CEECAA
         EJECT
         CEEDSA
         POP   PRINT
* --------------------------------------------------------- *
* USER DEFINED DYNAMIC TRANSIENT STORAGE AREA (TSA)
* --------------------------------------------------------- *
         SPACE 1
CEEDSA   DSECT ,
         ORG   CEEDSAEND
CLRBEG   EQU   *
         AS1MUTSA UDS=(MISC,RESA,LEWORK)
         SPACE 1
SUBPARM0 DS    A              ADDRESS OF ASCA
SUBPARM2 DS    A              ADDRESS OF REQUEST OPTIONS
SUBPARM3 DS    A              ADDRESS OF SOURCE STRING
PATCNT   DS    F              NBR OF TEMPLATES IN CALL LIST
SUBPARM5 DS    (&I)A          ADDRESS OF 1ST TEMPLATE VECTOR
SUBPARM_EOV EQU   *-4
SUBPARMX DS    F              DUMMY ENTRY TO CONTAIN ZERO
SUBPARM6 DS    A              ADDRESS OF LE FEEDBACK
         SPACE 1
RTNCD    DS    F
RSNCD    DS    F
         SPACE 1
LOOPCNTL DS    3F             REG SA FOR LOOP CONTROL
CTMPLATE DS    A              CURRENT TEMPLATE ADDRESS
NTMPLATE DS    A              NEXT TEMPLATE ADDRESS
         SPACE 1
HLD4_CRSR DS    A             CURSOR ADDR OF NPAT SIGN
HLD3_CRSR DS    A             LEXEME CURSOR ADDRESS OF NEXT
HLD2_CRSR DS    A             LEXEME LAST BYTE CURSOR ADDRESS
HLD1_CRSR DS    A             LEXEME CURSOR ADDRESS
HLD1_REF  DS    A             REFERENCE CURSOR
HLD1_STRT DS    A             SOURCE FIELD START ADDRESS
HLD1_STOP DS    A             SOURCE FIELD END ADDRESS
HLD1_LGTH DS    F             SOURCE FIELD LENGTH
         SPACE 1
PSTATE   DS    XL1            PROCESSING STATE
$STATE1  EQU   X'01'          ..USER DELIMITER LIST PROCESSED
$STATE2  EQU   X'02'          ..LAST TEMPLATE PROCESSED
PFLAG    DS    CL1            PROCESS FLAG
$1ST     EQU   C'Y'           ..1ST TEMPLATE BEING PROCESSED
PSAIND   DS    CL1            PSA INDICATOR
$PSA     EQU   C'Y'           ..YES
         SPACE 1
         DS    0D
#CLRLEN  EQU   *-CLRBEG
         SPACE 1
SUBPLIST DS    A              R1 VALUE
         SPACE 1
*        REQUEST OPTIONS FOR CALL TO FPOS
         AS1LAIDA UDS=ASU9LA02,PREFIX=LSO1_
         SPACE 1
         DS    F
*        INPUT SOURCE FOR CALL TO FPOS
         ORG   *,4,-2
LSS1_SRC EQU   *
         AS1LAIDA UDS=ASU9LA03,PREFIX=LSS1_
         DS    XL4
         SPACE 1
         DS    F
*        RESULT TEMPLATE FOR CALL TO FPOS
         ORG   *,4,-1
LSR1_RSLT EQU   *
         AS1LAIDA UDS=ASU9LA04,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA06,PREFIX=LSR1_
         AS1LAIDA UDS=ASU9LA07,PREFIX=LSR1_
         DS    XL4
         SPACE 1
TRT1_VECTOR DS    XL256
TRT2_VECTOR DS    XL256
FLD1_SOURCE DS    XL256       HOLD AREA FOR SOURCE
         SPACE 2
         AS1MUTSA UDS=LTRACE
         SPACE 2
         DS    0D
#UTSALEN EQU   *-CLRBEG
#DSALEN  EQU   *-CEEDSA       LENGTH OF DSA
         SPACE 2
* --------------------------------------------------------- *
* INPPLIST: PARAMETER LIST PASSED TO THIS SUBORDINATE RTN
* --------------------------------------------------------- *
         SPACE 1
INPPLIST DSECT
@ASCA    DS    A              ARCH SERVICES COMMAREA
@REQOPT  DS    A
@SRCSTR  DS    A
@PATCNT  DS    A              NBR OF TEMPLATE FIELDS FOLLOWING
@PATSTR  DS    (&I+1)A        RESERVE 1 MORE FOR LE FEEDBACK
         SPACE 2
ASABHDR  AS1MASDS ADS=ASAB,PREFIX=,MF=D
         SPACE 2
ASABXHDR AS1MASDS ADS=ASAB1,PREFIX=,MF=D
         SPACE 2
ASCAHDR  AS1MASDS ADS=ASCA,PREFIX=,MF=D
         SPACE 2
         AS1LAIDA UDS=(ASU9LA02,ASU9LA03,ASU9LA04,                     +
               ASU9LA06,ASU9LA07),                                     +
               PREFIX=,MF=D
         EJECT
* --------------------------------------------------------- *
* VAR:
*
*           RETURNS LEXEMES FROM SOURCE VIA PATTERNS
*
*       R1: ADDRESS OF PARAMETER LIST
*
*               ADDRESS OF ASCA (0)
*           +00 +--------+
*               |PTR     |
*               +--------+
*
*
*               ADDRESS OF REQUEST OPTIONS (2)
*           +04 +--------+
*               |PTR     |
*               +--------+ +--+--+--+
*                          |DD|PP|SS|  DEFAULT
*                          +--+--+--+  DELIM/PAD/STRIP CHAR
*
*                          +--+
*                          |OO|  OPTIONS UC TRANSLATION
*                          +--+
*
*                          +----+
*                          |00NN| STARTING POSITION
*                          +----+
*
*                          +----+
*                          |00NN| COUNT N/A
*                          +----+
*
*               ADDRESS OF SOURCE DATA (3)
*           +08 +--------+
*               |PTR     |
*               +--------+ +----+----------------------+
*                          |00LL|SOURCE STRING         |
*                          |    |OR                    |
*                          | -  |SOURCE STRING ADDRESS |
*                          +----+----------------------+
*
*               ADDRESS OF COUNT FOR TEMPLATE LIST (4)
*           +0C +--------+
*               |PTR     |
*               +--------+ +--------+
*                          |COUNT   | 1 TO 16
*                          +--------+
*
*               ADDRESS OF TEMPLATE LIST (5)
*           +10 +--------+
*               |PTR     | OPTIONAL
*               +--------+ +--+----+---------------------+
*                          |II|00LL|DELIM VECTOR         |
*                          |  |    |OR                   |
*                          |  | -  |DELIM VECTOR ADDRESS |
*                          +--+----+---------------------+
*
*               +--------+ 1 TO 16 OCCURANCES
*               |PTR     | IN ANY COMBINATION OF POINTERS AND
*               +--------+ THE FOLLOWING DATA STRUCTURES
*
*                          +--+----+-----------------------+
*                          |II|00LL|STRING PATTERN         |
*                          |  |    |OR                     |
*                          |  | -  |STRING PATTERN ADDRESS |
*                          +--+----+-----------------------+
*
*                          +--+----+------------------------+
*                          |II|00LL|NUMERIC PATTERN         |
*                          |  |    |OR                      |
*                          |  | -  |NUMERIC PATTERN ADDRESS |
*                          +--+----+------------------------+
*
*                          +--+----+----+-------+
*                          |II|00ZZ|00LL|RESULT |
*                          +--+----+----+-------+
*
*               ADDRESS OF LE FEEDBACK (6)
*               +--------+
*               |PTR     | OPTIONAL
*               +--------+
*
*   LEGEND:
*       DD: DEFAULT DELIMITER CHAR (1 BYTE CHAR)
*       PP: DEFAULT PAD CHAR (1 BYTE CHAR)
*       SS: DEFAULT STRIP CHAR (1 BYTE CHAR)
*       OO: OPTION FLAGS (1 BYTE HEX)
*       NN: COUNT FIELD 0:255 (2 BYTE BINARY)
*       LL: LENGTH FIELD 0:256 (2 BYTE BINARY)
*       ZZ: MAX RESULT FIELD LENGTH 0:256 (2 BYTE BINARY)
*       II: INPUT PARAMETER TYPE (1 BYTE BINARY)
*
* --------------------------------------------------------- *
         SPACE 1
         SYSSTATE ARCHLVL=2   1=ESA/390 2=Z/ARCH
         IEABRCX DEFINE
         SPACE 1
         COPY  AS4LACC0
         SPACE 1
         AS2LTRCE TYPE=INIT,TRACE=NO
**       AS2LTRCE TYPE=INIT,TRACE=YES
         DROP  R6
         SPACE 1
MAIN0140 EQU   *
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         L     R7,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R7    EST ADDR
         SPACE 1
         LARL  RE,EXIT0000
         ICM   R0,12,RO_PSA_LEN    Q. ANY PSA
         JZ    MAIN0138            A. NO
         SRL   R0,16
         CH    R0,H32              Q. PSA LONG ENOUGH
         JL    TXT0115F            A. NO
         MVI   PSAIND,$PSA         SET PSA IND ON
         TM    RO_OPT_FLAG,$CNTREQ Q. CONTINUATION OF PREV REQUEST
         JNO   MAIN0138            A. NO
         OC    PSA_NXT_POS,PSA_NXT_POS  Q. ZERO
         JZ    MAIN0138                 A. YES
         MVC   RO_START,PSA_NXT_POS     A. NO, INIT START POS
MAIN0138 EQU   *
         SPACE 2
* --------------------------------------------------------- *
* ESTABLISH SOURCE FIELD BEGINNING
* --------------------------------------------------------- *
         SPACE 1
MAIN0200 AS2LTRCE
         LARL  RE,EXIT0000
         ICM   R2,12,SRC_LEN  Q. VALID LENGTH
         JZ    TXT0115A       A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN0220       A. YES
         LA    R1,SRC_STR
         J     MAIN0230
MAIN0220 EQU   *
         ICM   R1,15,SRC_STR  Q. VALID ADDRESS
         JZ    TXT0105C       A. NO
         LPR   R2,R2
MAIN0230 EQU   *
         CH    R2,H256        Q. VALID LENGTH
         JH    TXT0115A       A. NO
         ST    R2,HLD1_LGTH
         AHI   R2,-1
         SPACE 1
         TM    RO_OPT_FLAG,$UCX         Q. COPY SOURCE
         JZ    MAIN0280                 A. NO
         J     *+4+6
         MVC   FLD1_SOURCE(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         LA    R1,FLD1_SOURCE
         J     *+4+6
         TR    FLD1_SOURCE(0),XUCTBL    UPPER CASE XLATE
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         SPACE 1
MAIN0280 EQU   *
         ST    R1,HLD3_CRSR
         ST    R1,HLD1_CRSR   SAVE CURRENT LEXEME CURSOR
         ST    R1,HLD1_REF
         ST    R1,HLD1_STRT
         AR    R1,R2
         ST    R1,HLD1_STOP
         SPACE 1
         ICM   R1,12,RO_START Q. INITIAL POSITION
         JZ    MAIN0290       A. NO
         SRL   R1,16
         AHI   R1,-1
         A     R1,HLD1_CRSR
         C     R1,HLD1_STOP   Q. BEYOND END OF FIELD
         JH    TXT0115D       A. YES
         ST    R1,HLD3_CRSR   A. NO
         ST    R1,HLD1_CRSR   A. NO
         ST    R1,HLD1_REF    A. NO
MAIN0290 EQU   *
         COPY  AS4LACC1
         MVC   HLD3_CRSR,HLD1_CRSR
         DROP  R6,R7
         SPACE 2
* --------------------------------------------------------- *
* DETERMINE TEMPLATE PARMS
* --------------------------------------------------------- *
         SPACE 1
MAIN0300 AS2LTRCE
         LARL  RE,EXIT0000
         MVI   PFLAG,$1ST
         L     R5,PATCNT
         CH    R5,=Y(&I)      Q. TOO MANY PATTERNS
         JH    TXT0115B       A. YES
         CH    R5,H1          Q. ENOUGH PATTERNS
         JL    TXT0115B       A. NO
         SPACE 1
*        SETUP TEMPLATE LOOP WITH BRXLE
         AHI   R5,-1          DECREMENT FOR OFFSET
         SLL   R5,2           SET BRXLE COMPARAND
         LH    R4,H4          SET BRXLE INCREMENT
         XR    R3,R3          SET BRXLE INDEX
         SPACE 1
MAIN0320 EQU   *
         USING ASU9LA04,R7    CURRENT ENTRY
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         SPACE 1
         XC    RESA,RESA           CLEAR R14 STACK
         L     R7,SUBPARM5(R3)     POINT TO CURRENT TEMPLATE
         ST    R7,CTMPLATE         SAVE CURRENT
         L     R8,SUBPARM5+4(R3)   POINT TO NEXT TEMPLATE
         ST    R8,NTMPLATE         SAVE NEXT
         STM   R3,R5,LOOPCNTL
         SPACE 1
         ICM   RF,8,C.TP_PAT_TYPE  Q. VALID INPUT PARM TYPE
         JZ    TXT0115C            A. NO
         SRL   RF,24
         CH    RF,H4          Q. VALID INPUT PARM TYPE
         JH    TXT0115C       A. NO
         SLL   RF,2
         B     *+4(RF)        GO TO DEPENDING ON
         J     TXT0115C       ..00 ERROR
         J     MAIN1000       ..01 USER DELIM LIST
         J     MAIN2000       ..02 STRING PATTERN
         J     MAIN2000       ..03 NUMERIC PATTERN
         J     MAIN2000       ..04 RESULT STRING
MAIN0380 EQU   *
         LM    R3,R5,LOOPCNTL
         BRXLE R3,R4,MAIN0320 GO PROCESS NEXT TEMPLATE
         SPACE 1
MAIN0400 EQU   *
         L     R6,SUBPARM0    POINT TO ASCA
         USING ASCAHDR,R6
         AS2LTRCE TYPE=END,PRINT=NO
**       AS2LTRCE TYPE=END,PRINT=YES
         SPACE 2
* --------------------------------------------------------- *
* EXIT/TERMINATION ROUTINE
* --------------------------------------------------------- *
         SPACE 1
EXIT0000 EQU   *
         DROP  R6
         L     RF,RTNCD
         CEETERM ,                                                     +
               RC=(15)
         EJECT
* --------------------------------------------------------- *
* PROCESS OPTIONAL USER DELIMITER LIST
* --------------------------------------------------------- *
         SPACE 1
MAIN1000 AS2LTRCE
         LARL  RE,EXIT0000
         OC    PSTATE,PSTATE  Q. PROCESS STATE = 0
         JNZ   TXT0115G       A. NO
         SPACE 1
         COPY  AS4LACC3
         SPACE 1
         MVI   PSTATE,$STATE1 USER DELIMITER LIST PROCESSED
         J     MAIN0380       GO BUMP TO NEXT TEMPLATE PATTERN
         SPACE 2
* --------------------------------------------------------- *
* CHECK OUT THE NEXT TEMPLATE
* --------------------------------------------------------- *
         SPACE 1
MAIN2000 AS2LTRCE
         CLI   PSTATE,$STATE1 Q. PROCESSED STRING PATTERN YET
         JH    MAIN0380       A. YES
*        IF $STATE0 OR $STATE1 SCAN INPUT
MAIN2100 EQU   *
         LARL  RE,EXIT0000
         ICM   R8,15,NTMPLATE      Q. POINT TO NEXT TEMPLATE
         JNZ   MAIN2200            A. YES, ONE EXIST
         MVI   PSTATE,$STATE2      A. NO
         CLI   C.TP_PAT_TYPE,$RSTR Q. CURRENT LEXEME / RESULT
         JNE   MAIN3900            A. NO
         MVC   HLD2_CRSR,HLD1_STOP
         CLC   HLD3_CRSR,F0        Q. NEXT VALID CHAR ADDR ZERO
         JH    MAIN2110            A. NO
         L     R0,HLD1_STOP        POSITION CURSOR PAST STOP
         A     R0,F1
         ST    R0,HLD3_CRSR
MAIN2110 EQU   *
         MVC   HLD1_CRSR,HLD3_CRSR
         J     MAIN3800
         SPACE 1
* --------------------------------------------------------- *
* CHECK NEXT TEMPLATE FOR RESULT STRING
* CHECK CURRENT TEMPLATE FOR RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN2200 AS2LTRCE
N        USING ASU9LA04,R8    MAP NEXT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04    (DEPENDENT USING)
N2       USING ASU9LA07,N.TP_PAT_PFX+L'N.TP_PAT_PFX
         SPACE 1
         CLI   N.TP_PAT_TYPE,$RSTR Q. NEXT LEXEME / RESULT
         JNE   MAIN2400            A. NO
         CLI   C.TP_PAT_TYPE,$RSTR Q. CURRENT LEXEME / RESULT
         JNE   MAIN3000            A. NO, BUT NEXT IS
         SPACE 1
         MVC   HLD1_CRSR,HLD3_CRSR
         BRAS  RE,FDLM0000         FIND NEXT DELIM CHAR
*              R1 - ADDR OF NEXT VALID CHAR
*              R2 - ADDR OF DELIM CHAR
         LARL  RE,EXIT0000
         CH    RF,H8          Q. VALID RC
         JH    TXT0109A       A. NO
         B     *+4(RF)        GO TO DEPENDING ON
         J     MAIN3800       ..00 FOUND DELIM CHAR
         J     MAIN2210       ..04 DELIM CHAR NOT FOUND
         J     MAIN3800       ..08 VALID CHAR NOT FOUND
MAIN2210 AS2LTRCE
         MVC   HLD2_CRSR,HLD1_STOP
         J     MAIN3800
         SPACE 1
* --------------------------------------------------------- *
* CHECK NEXT TEMPLATE FOR STRING PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN2400 AS2LTRCE
         CLI   N.TP_PAT_TYPE,$SPAT Q. NEXT LEXEME / STRING
         JNE   MAIN2600            A. NO
         SPACE 1
         ICM   R2,12,N2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. VALID LENGTH
         JM    MAIN2410       A. YES
         LA    R1,N2.TP_STR
         J     MAIN2420
MAIN2410 EQU   *
         ICM   R1,15,N2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105A            A. NO
         LPR   R2,R2
MAIN2420 EQU   *
         MVC   PLIST+((1-1)*4),SUBPARM0
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO ORIGINAL
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H32
         XC    LSO1_PSA,LSO1_PSA
         ST    R5,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         SPACE 1
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         MVC   PLIST+((5-1)*4),NTMPLATE SAVE ADDR OF STRING PATTERN
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         SPACE 1
         LA    R1,PLIST
*        CALL  ASUDFPOS
         L     RF,@FPOS
         BASR  RE,RF     LINK TO
         CLC   LSR1_TP_STR(L'F0),F0     Q. FIND STRING PATTERN
         JNE   MAIN2460                 A. YES
         LARL  RE,MAIN0400
         J     TXT0110A
MAIN2460 EQU   *
         LARL  RE,EXIT0000
         MVC   FW11,LSR1_TP_STR
         L     R1,FW11
         AHI   R1,-1
         A     R1,HLD1_STRT
         ST    R1,HLD3_CRSR        SAVE NEXT LEXEME START
         AHI   R1,-1
         ST    R1,HLD2_CRSR        SAVE END ADDR OF CURRENT LEXEME
         J     MAIN3000
         SPACE 1
* --------------------------------------------------------- *
* CHECK NEXT TEMPLATE FOR NUMERIC PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN2600 AS2LTRCE
         CLI   N.TP_PAT_TYPE,$NPAT Q. NEXT LEXEME / NUMERIC
         JNE   MAIN3000            A. NO
         SPACE 1
         ICM   R2,12,N2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN2610       A. YES
         LA    R1,N2.TP_STR   A. NO, LITERAL STRING
         J     MAIN2620
MAIN2610 EQU   *
         ICM   R1,15,N2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105E            A. NO
         LPR   R2,R2               A. YES, VARIABLE STRING
MAIN2620 EQU   *
         AHI   R2,-1
         STM   R1,R2,FW21
         LA    R3,0(R2,R1)    POINT TO LAST BYTE OF NUMERIC PATTERN
         ST    R3,HLD4_CRSR
         AS2NTEST FLDPTR=(R1),     Q. NUMERIC PATTERN                  +
               FORMAT=ZD,                                              +
               EXLGTH=(R2)
         LARL  RE,EXIT0000
         JNZ   TXT0112A            A. NO, NOT NUMERIC
         LM    R1,R2,FW21
         J     *+4+6
         PACK  DW01,0(0,R1)
*+4+6    EQU   *
         EX    R2,*-6
         CVB   R0,DW01
         TM    0(R3),X'F0'    Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN2640       A. NO
         L     R1,HLD1_STRT   POSITIONAL NUMERIC PATTERN
         AHI   R0,-1
         J     MAIN2644
MAIN2640 EQU   *
         L     R1,HLD1_REF    RELATIVE NUMERIC PATTERN
MAIN2644 EQU   *
         AR    R1,R0
         ST    R1,HLD3_CRSR   SAVE ADDR OF NEXT LEXEME
         C     R1,HLD1_CRSR   Q. POS >= CURSOR
         JNL   MAIN2660       A. YES
         MVC   HLD2_CRSR,HLD1_STOP A. NO,SET CURRENT LEXEME END ADDR
         J     MAIN3000
MAIN2660 EQU   *
         AHI   R1,-1
         ST    R1,HLD2_CRSR   SAVE END ADDR OF CURRENT LEXEME
*        J     MAIN3000
         SPACE 1
         DROP  N2,N
         SPACE 1
* --------------------------------------------------------- *
* CHECK OUT THE CURRENT TEMPLATE
* --------------------------------------------------------- *
         SPACE 1
MAIN3000 EQU   *
         SPACE 1
C        USING ASU9LA04,R7    MAP NEXT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04    (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
* --------------------------------------------------------- *
* CHECK CURRENT TEMPLATE FOR RESULT STRING
* --------------------------------------------------------- *
         SPACE 1
MAIN3100 AS2LTRCE
         CLI   C.TP_PAT_TYPE,$RSTR Q. CURRENT LEXEME / RESULT
         JNE   MAIN3200            A. NO
         J     MAIN3800            A. YES, COPY RESULT
         SPACE 1
* --------------------------------------------------------- *
* CHECK CURRENT TEMPLATE FOR STRING PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN3200 AS2LTRCE
         LARL  RE,EXIT0000
         CLI   C.TP_PAT_TYPE,$SPAT Q. CURRENT LEXEME / STRING
         JNE   MAIN3400            A. NO
         SPACE 1
         ICM   R2,12,C2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JNM   MAIN3220       A. NO
         LPR   R2,R2
MAIN3220 EQU   *
         CLI   PFLAG,$1ST     Q. 1ST TEMPLATE
         JE    MAIN3230       Q. YES
         L     R1,HLD3_CRSR
         ST    R1,HLD1_REF    SAVE REFERENCE CURSOR
         AR    R1,R2
         ST    R1,HLD1_CRSR   SAVE CURRENT LEXEME CURSOR
         J     MAIN3900
         SPACE 1
MAIN3230 AS2LTRCE
         MVC   PLIST+((1-1)*4),SUBPARM0 SAVE ADDR OF ASCA
         SPACE 1
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR TO REQUEST OPTS
         MVC   LSO1_RO,RO
         DROP  R6
         NI    LSO1_RO_OPT_FLAG,256-$CNTREQ
         XC    LSO1_RO_INCOMING_PSTATE,LSO1_RO_INCOMING_PSTATE
         XC    LSO1_RO_START,LSO1_RO_START
         XC    LSO1_RO_COUNT,LSO1_RO_COUNT
         MVC   LSO1_RO_PSA_LEN,H32
         XC    LSO1_PSA,LSO1_PSA
         LA    R0,LSO1_RO
         ST    R0,PLIST+((2-1)*4)  SAVE ADDR OF OPTIONS
         SPACE 1
         L     R0,HLD1_LGTH
         LNR   R0,R0
         STCM  R0,3,LSS1_SRC_LEN
         MVC   LSS1_SRC_STR(L'HLD1_STRT),HLD1_STRT
         LA    R0,LSS1_SRC
         ST    R0,PLIST+((3-1)*4)  SAVE ADDR OF SOURCE
         SPACE 1
         LA    R0,F2
         ST    R0,PLIST+((4-1)*4)  SAVE ADDR OF COUNT
         SPACE 1
         MVC   PLIST+((5-1)*4),CTMPLATE SAVE ADDR OF STRING PATTERN
         SPACE 1
         MVI   LSR1_TP_PAT_TYPE,LSR1_$RSTR
         MVC   LSR1_TP_STR_SIZE,H4
         MVC   LSR1_TP_STR_LEN,H0
         LA    R0,LSR1_RSLT
         ST    R0,PLIST+((6-1)*4)  SAVE ADDR OF RESULT 1
         OI    PLIST+((6-1)*4),X'80'
         SPACE 1
         LA    R1,PLIST
*        CALL  ASUDFPOS
         L     RF,@FPOS
         BASR  RE,RF     LINK TO
         CLC   LSR1_TP_STR(L'F0),F0     Q. FIND STRING PATTERN
         JNE   MAIN3260                 A. YES
         LARL  RE,MAIN0400
         J     TXT0110B
MAIN3260 EQU   *
         LARL  RE,EXIT0000
         MVC   FW11,LSR1_TP_STR    SAVE CURRENT LEXEME START
         L     R1,FW11
         AHI   R1,-1
         A     R1,HLD1_STRT
         ST    R1,HLD1_REF    SAVE REFERENCE CURSOR
         ICM   R2,12,C2.TP_STR_LEN
         SRL   R2,16
         AR    R1,R2
         ST    R1,HLD1_CRSR   SAVE CURRENT LEXEME CURSOR
         J     MAIN3900
         SPACE 1
* --------------------------------------------------------- *
* CHECK CURRENT TEMPLATE FOR NUMERIC PATTERN
* --------------------------------------------------------- *
         SPACE 1
MAIN3400 AS2LTRCE
         CLI   C.TP_PAT_TYPE,$NPAT Q. CURRENT LEXEME / NUMERIC
         JNE   MAIN3900            A. NO
         SPACE 1
         CLI   PFLAG,$1ST     Q. 1ST TEMPLATE
         JE    MAIN3430       A. YES
         SPACE 1
         CLC   HLD3_CRSR,HLD1_CRSR Q. POS >= CURSOR
         JNL   MAIN3410            A. YES
         MVC   HLD2_CRSR,HLD1_STOP A. NO, SET CURRENT LEXEME END ADDR
MAIN3410 EQU   *
         MVC   HLD1_CRSR,HLD3_CRSR SET CURRENT TO NEXT
         L     R3,HLD4_CRSR
         TM    0(R3),X'F0'         Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN3900            A. NO
         MVC   HLD1_REF,HLD3_CRSR  SET REFERENCE TO NEXT
         J     MAIN3900
         SPACE 1
MAIN3430 AS2LTRCE
         ICM   R2,12,C2.TP_STR_LEN      Q. ANY DATA
         JZ    TXT0115E                 A. NO
         SRA   R2,16          Q. LENGTH NEGATIVE
         JM    MAIN3440       A. YES
         LA    R1,C2.TP_STR   A. NO, LITERAL STRING
         J     MAIN3450
MAIN3440 EQU   *
         ICM   R1,15,C2.TP_STR     Q. VALID ADDRESS
         JZ    TXT0105E            A. NO
         LPR   R2,R2               A. YES, VARIABLE STRING
MAIN3450 EQU   *
         AHI   R2,-1
         STM   R1,R2,FW21
         LA    R3,0(R2,R1)    POINT TO LAST BYTE OF NUMERIC PATTERN
         AS2NTEST FLDPTR=(R1),     Q. NUMERIC PATTERN                  +
               FORMAT=ZD,                                              +
               EXLGTH=(R2)
         LARL  RE,EXIT0000
         JNZ   TXT0112A            A. NO, NOT NUMERIC
         LM    R1,R2,FW21
         J     *+4+6
         PACK  DW01,0(0,R1)
*+4+6    EQU   *
         EX    R2,*-6
         CVB   R0,DW01
         TM    0(R3),X'F0'    Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN3460       A. NO
         L     R1,HLD1_STRT   POSITIONAL NUMERIC PATTERN
         AHI   R0,-1
         J     MAIN3464
MAIN3460 EQU   *
         L     R1,HLD1_REF    RELATIVE NUMERIC PATTERN
MAIN3464 EQU   *
         AR    R1,R0
         ST    R1,HLD1_CRSR   SAVE ADDR OF NEXT LEXEME
         TM    0(R3),X'F0'    Q. UNSIGNED NUMERIC POSITIONAL
         JNO   MAIN3900       A. NO
         ST    R1,HLD1_REF
         J     MAIN3900
         SPACE 1
         DROP  C2
         SPACE 1
* --------------------------------------------------------- *
* COPY LEXEME TO RESULT STRING (LAST TEMPLATE)
* --------------------------------------------------------- *
         SPACE 1
MAIN3800 AS2LTRCE
         L     R6,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R6    EST ADDR
         SPACE 1
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
*        APPEND ASU9LA07 TO ASU9LA06  (DEPENDENT USING)
C2       USING ASU9LA07,C1.TP_STR_SIZE+L'C1.TP_STR_SIZE
         SPACE 1
         MVC   C2.TP_STR_LEN,H0
         ICM   R2,12,C1.TP_STR_SIZE     Q. DUMMY RESULT
         JZ    MAIN3840                 A. YES
         SRL   R2,16
         CH    R2,H256        Q. RESULT FIELD TOO LARGE
         JH    TXT0115H       A. YES
         MVC   C2.TP_STR(1),RO_DFLT_PAD_CH
         AHI   R2,-2
         JM    MAIN3810
         J     *+4+6
         MVC   C2.TP_STR+1(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6
MAIN3810 EQU   *
         CLC   HLD2_CRSR,HLD1_STOP      Q. PAST END
         JNH   MAIN3820                 A. NO
         MVC   HLD2_CRSR,HLD1_STOP      A. YES
MAIN3820 EQU   *
         CLC   HLD1_CRSR,HLD1_STRT      Q. PAST END
         JNL   MAIN3830                 A. NO
         MVC   HLD1_CRSR,HLD1_STRT      A. YES
MAIN3830 EQU   *
         L     R2,HLD2_CRSR   RESTORE CURRENT LEXEME END ADDR
         L     R1,HLD1_CRSR   RESTORE CURRENT LEXEME ADDR
         SR    R2,R1          COMPUTE LEXEME LGTH
         JM    MAIN3880
         SPACE 1
         LR    R3,R2
         AHI   R3,1
         CLM   R3,3,C1.TP_STR_SIZE      Q. RESULT LARGE ENOUGH
         JH    TXT0117A                 A. NO
         J     *+4+6
         MVC   C2.TP_STR(0),0(R1)
*+4+6    EQU   *
         EX    R2,*-6                   A. YES
         STCM  R3,3,C2.TP_STR_LEN       SAVE LEXEME LGTH
         J     MAIN3880
MAIN3840 EQU   *
*        LAST TEMPLATE, IS RESULT, PSA EXIST, SAVE START FOR NEXT PASS
         CLI   PSAIND,$PSA              Q. VALID PSA EXIST
         JNE   MAIN3880                 A. NO
         L     R1,HLD1_CRSR   RESTORE NEXT LEXEME ADDR
         C     R1,HLD1_STOP   Q. PAST END
         JNL   MAIN3842       A. YES
         S     R1,HLD1_STRT   COMPUTE POS IN SOURCE
         AHI   R1,1
         STCM  R1,3,PSA_NXT_POS    SAVE POS IN SOURCE
         OI    RO_OPT_FLAG,$CNTREQ SET CONTINUE ON
         J     MAIN3880
MAIN3842 EQU   *
         L     R0,HLD1_LGTH        POINT PAST SOURCE STRING
         A     R0,F1
         STCM  R0,3,PSA_NXT_POS
         OI    RO_OPT_FLAG,$CNTREQ      SET CONTIUE ON
MAIN3880 EQU   *
         SPACE 1
         DROP  C2,C1,C
         DROP  R6
         SPACE 1
* --------------------------------------------------------- *
* GO PROCESS THE NEXT TEMPLATE
* --------------------------------------------------------- *
         SPACE 1
MAIN3900 AS2LTRCE
         MVI   PFLAG,C'N'          TURN OFF 1ST TEMPLATE
         J     MAIN0380
         EJECT
* --------------------------------------------------------- *
* PERFORMED ROUTINES
* --------------------------------------------------------- *
         SPACE 1
         COPY  AS4LACC2
         SPACE 2
* --------------------------------------------------------- *
* ERROR ROUTINES
* --------------------------------------------------------- *
         SPACE 1
TXT0105A AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((5-1)*L'ISICOL)(16),=CL16'n-STRING PATTERN'
         J     MSG0105E
         SPACE 1
TXT0105B AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((5-1)*L'ISICOL)(6),=CL6'1-ASCA'
         J     MSG0105E
         SPACE 1
TXT0105C AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H9
         MVC   ISITXT+((5-1)*L'ISICOL)(9),=CL9'4-SRC STR'
         J     MSG0105E
         SPACE 1
TXT0105D AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H12
         MVC   ISITXT+((5-1)*L'ISICOL)(12),=CL12'6-DELIM VECTOR'
         J     MSG0105E
         SPACE 1
TXT0105E AS2LTRCE
         AS2RESTK PUSH
*        INSERT ARGUMENT NUMBER (VARIABLE 5)
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H17
         MVC   ISITXT+((5-1)*L'ISICOL)(17),=CL17'n-NUMERIC PATTERN'
**       J     MSG0105E
         SPACE 1
MSG0105E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU039_0002
**       J     MSG0105
         SPACE 1
MSG0105  EQU   *         ARGUMENT(NNN) IS INVALID
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0109A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'LABEL'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'MAIN2200'
         J     MSG0109E
         SPACE 1
TXT0109C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((2-1)*L'ISICOL)(8),=CL8'COPYBOOK'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'AS4LACC1'
**       J     MSG0109E
         SPACE 1
MSG0109E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03D_0002
**       J     MSG0109
         SPACE 1
MSG0109  EQU   *         BRANCH INDEX (NNN) IS INVALID
*        INSERT NUMBER STRING (VARIABLE 5)
         CVD   RF,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((5-1)*L'ISICOL)(3),ZD01+L'ZD01-3
         J     ERTN0800
         SPACE 2
TXT0110A AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,NTMPLATE    RESTORE NEXT INPUT SRCHARG STR
X        USING ASU9LA04,R8    NEXT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
X2       USING ASU9LA07,X.TP_PAT_PFX+L'X.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),X2.TP_STR_LEN
         ICM   R2,12,X2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),X2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH ARG
         DROP  X2,X
         SPACE 1
         J     MSG0110W
         SPACE 1
TXT0110B AS2LTRCE
         AS2RESTK PUSH
*        INSERT TEXT STRING (VARIABLE 7)
         L     R8,CTMPLATE    RESTORE CURRENT INPUT SRCHARG STR
C        USING ASU9LA04,R8    PREVIOUS ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         SPACE 1
         MVC   ISILEN+((7-1)*L'ISICOL)(2),C2.TP_STR_LEN
         ICM   R2,12,C2.TP_STR_LEN
         SRA   R2,16
         LPR   R2,R2
         C     R2,=A(L'ISITXT)
         JNH   *+8
         LA    R2,L'ISITXT
*+8      EQU   *
         AHI   R2,-1
         J     *+4+6
         MVC   ISITXT+((7-1)*L'ISICOL)(0),C2.TP_STR
*+4+6    EQU   *
         EX    R2,*-6         MOVE IN SEARCH ARG
         DROP  C2,C
         SPACE 1
         J     MSG0110W
         SPACE 1
MSG0110W EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03E_0001
**       J     MSG0110
         SPACE 1
MSG0110  EQU   *         NOT FOUND
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((2-1)*L'ISICOL)(6),=CL6'STRING'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'SEARCH ARG'
         J     ERTN0800
         SPACE 2
TXT0112A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H19
         MVC   ISITXT+((3-1)*L'ISICOL)(19),=CL19'TP_STR, NUMERIC PAT'
**       J     MSG0112E
         SPACE 1
MSG0112E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03G_0002
**       J     MSG0112
         SPACE 1
MSG0112  EQU   *         IS NOT NUMERIC
         J     ERTN0800
         SPACE 2
TXT0113A AS2LTRCE
         AS2RESTK PUSH
         J     MSG0113E
         SPACE 1
TXT0113B AS2LTRCE
         AS2RESTK PUSH
**       J     MSG0113E
         SPACE 1
MSG0113E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03H_0002
         J     MSG0113
         SPACE 1
MSG0113  EQU   *         TOO MANY ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0114A AS2LTRCE
         AS2RESTK PUSH
*        J     MSG0114E
         SPACE 1
MSG0114E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03I_0002
**       J     MSG0114
         SPACE 1
MSG0114  EQU   *         TOO FEW ARGUMENTS
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((2-1)*L'ISICOL)(11),=CL11'SUB-ROUTINE'
         SPACE 1
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'&CSECT'
         J     ERTN0800
         SPACE 2
TXT0115A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H7
         MVC   ISITXT+((3-1)*L'ISICOL)(7),=CL7'SRC_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:256'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM3    POINT TO SOURCE FIELD
         USING ASU9LA03,R5    EST ADDR
         ICM   R0,12,SRC_LEN
         DROP  R5
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115B AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PATCNT'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'1:&I'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R0,PATCNT
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115C AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_PAT_TYPE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'1:4'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
         ICM   R0,8,C.TP_PAT_TYPE
         DROP  C
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115D AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((3-1)*L'ISICOL)(8),=CL8'RO_START'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H16
         MVC   ISITXT+((7-1)*L'ISICOL)(16),=CL16'RO_START>SRC_LEN'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_START
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115E AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'>0'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115F AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'RO_PSA_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H3
         MVC   ISITXT+((7-1)*L'ISICOL)(3),=CL3'>=4'
*        INSERT NUMBER STRING (VARIABLE 5)
         L     R5,SUBPARM2    POINT TO REQUEST OPTS
         USING ASU9LA02,R5    EST ADDR
         ICM   R0,12,RO_PSA_LEN
         DROP  R5
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115G AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'PSTATE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((7-1)*L'ISICOL)(2),=CL2'=0'
*        INSERT NUMBER STRING (VARIABLE 5)
         ICM   R0,8,PSTATE
         SRL   R0,24
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H2
         MVC   ISITXT+((5-1)*L'ISICOL)(2),ZD01+L'ZD01-2
         J     MSG0115E
         SPACE 1
TXT0115H AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H11
         MVC   ISITXT+((3-1)*L'ISICOL)(11),=CL11'TP_STR_SIZE'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((7-1)*L'ISICOL)(5),=CL5'0:256'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA06 TO ASU9LA04  (DEPENDENT USING)
C1       USING ASU9LA06,C.TP_PAT_PFX+L'C.TP_PAT_PFX
         ICM   R0,12,C1.TP_STR_SIZE
         DROP  C1,C
         SRL   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
TXT0115Q AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H10
         MVC   ISITXT+((3-1)*L'ISICOL)(10),=CL10'TP_STR_LEN'
*        INSERT TEXT STRING (VARIABLE 7)
         MVC   ISILEN+((7-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((7-1)*L'ISICOL)(4),=CL4'1:16'
*        INSERT NUMBER STRING (VARIABLE 5)
C        USING ASU9LA04,R7    CURRENT ENTRY
*        APPEND ASU9LA07 TO ASU9LA04  (DEPENDENT USING)
C2       USING ASU9LA07,TP_PAT_PFX+L'TP_PAT_PFX
         ICM   R0,12,C2.TP_STR_LEN
         DROP  C2,C
         SRA   R0,16
         CVD   R0,DW01
         UNPK  ZD01,DW01
         OI    ZD01+L'ZD01-1,X'F0'
         MVC   ISILEN+((5-1)*L'ISICOL)(2),H4
         MVC   ISITXT+((5-1)*L'ISICOL)(4),ZD01+L'ZD01-4
         J     MSG0115E
         SPACE 1
MSG0115E EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03J_0002
**       J     MSG0115
         SPACE 1
MSG0115  EQU   *         NUMERIC DATA IS OUT OF RANGE
         J     ERTN0800
         SPACE 2
TXT0117A AS2LTRCE
         AS2RESTK PUSH
*        INSERT COMPONENT TYPE (VARIABLE 2)
         MVC   ISILEN+((2-1)*L'ISICOL)(2),H5
         MVC   ISITXT+((2-1)*L'ISICOL)(5),=CL5'FIELD'
*        INSERT COMPONENT NAME (VARIABLE 3)
         MVC   ISILEN+((3-1)*L'ISICOL)(2),H6
         MVC   ISITXT+((3-1)*L'ISICOL)(6),=CL6'RESULT'
**       J     MSG0117E
         SPACE 1
MSG0117S EQU   *
         XC    ISICTOK,ISICTOK
         MVC   ISICTOK+((1-1)*L'ISIROW)(L'LECTOK),ASU03L_0002
**       J     MSG0117
         SPACE 1
MSG0117  EQU   *         OVERFLOW
**       J     ERTN0800
         SPACE 2
ERTN0800 EQU   *
*        INSERT COMPONENT TYPE (VARIABLE 1)
         MVC   ISILEN+((1-1)*L'ISICOL)(2),H8
         MVC   ISITXT+((1-1)*L'ISICOL)(8),=CL8'&CSECT'
         SPACE 1
         ICM   R1,15,SUBPARM6
         JZ    ERTN0810
         MVC   0(L'ISICTOK,R1),ISICTOK
         SPACE 1
ERTN0810 EQU   *
         L     R6,SUBPARM0    GET ADDR OF ASCA
         USING ASCAHDR,R6     EST ADDR TO ASCA
         L     R5,ASCA_@ASAB  GET ADDR OF ASAB
         USING ASABHDR,R5     EST ADDR TO ASAB
         L     R5,ASAB_@ASABX GET ADDR OF ASABX
         DROP  R5
         USING ASABXHDR,R5    EST ADDR TO ASABX
         AS2PLIST (ASCAHDR,ISIROW,0),                                  +
               VL,MF=(E,PLIST)
*        CALL ASUMETXT
         L     RF,ASAB1_@METXT
         BASR  RE,RF     link to
         SPACE 1
         ICM   RF,12,ASCA_CUR_CTOKN     retrieve severity
         SRL   RF,14          ..set return code to LEsev*4
         ST    RF,RTNCD
         DROP  R5,R6
         SPACE 1
ERTN0840 EQU   *
         AS2RESTK POP
         BR    RE        return to caller
         EJECT
* --------------------------------------------------------- *
* LABEL TRACE ROUTINE
* --------------------------------------------------------- *
         AS2LTRCE TYPE=CODE
         SPACE 2
         DROP  RA
         DROP  RC,RD
         DS    0D
         EJECT
STATIC   EQU   *
* --------------------------------------------------------- *
* STATIC PERSISTENT STORAGE AREA (PSA)
* --------------------------------------------------------- *
         SPACE 1
*        COPY  CEEBALCT            CONSTANTS FOR CONDITION TOKENS
CEE000   DC    XL4'00000000',XL4'00000000'
         SPACE 1
         COPY  ASUBALCT
         SPACE 1
@FPOS    DC    V(ASUDFPOS)         16 - 1ST POS
         SPACE 2
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'
F4       DC    F'4'
F5       DC    F'5'
F6       DC    F'6'
F7       DC    F'7'
F8       DC    F'8'
MF1      DC    F'-1'
H0       DC    H'0'
H1       DC    H'1'
H2       DC    H'2'
H3       DC    H'3'
H4       DC    H'4'
H5       DC    H'5'
H6       DC    H'6'
H7       DC    H'7'
H8       DC    H'8'
H9       DC    H'9'
H10      DC    H'10'
H11      DC    H'11'
H12      DC    H'12'
H16      DC    H'16'
H17      DC    H'17'
H19      DC    H'19'
H32      DC    H'32'
H256     DC    H'256'
         SPACE 2
         LTORG
         SPACE 2
         DS    0D
         AS1LAIDA UDS=(PERSIST),LIST=YES
         SPACE 1
         DROP  R9
         END
