{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011135000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 5819814, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 27, "INMDSNAM": "CBT.V500.FILE053.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 5819814, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 5819814, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE053.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\\\\\x05'", "DS1TRBAL": "b'\\x8dP'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00`\\x00\\n\\x00f\\x00\\x0c\\x00]'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02p\\x02p\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 624, "newlines": 624, "modlines": 0, "user": "DELUXE"}, "text": "$CAL     TITLE '$ - TSO CALL FUNCTION FOR LINKLIB MODULES'\n*\n*        LAST UPDATED 09 MAY 73 - BMD (*BMD*)\n*                     FIX PARM OF '' AND SHARE\n*                     SUBPOOL 78 FOR IKJPUTGT\n*\n*        LAST UPDATED 05 JUN 80 - HMD (*HMD MM/YY*)\n*                     ADD ALIASES AUTH AND XEQ\n*                     USE PUTLINE FOR ALL MESSAGES\n*                     ADD LPDE SEARCH PRIOR TO BLDL         *HMD 06/80*\n*                     TURN ON AUTHORIZATION DYNAMICALLY     *HMD 06/80*\n*                     IF COMMAND INVOKED IS '$' OR 'AUTH'   *HMD 06/80*\n*                                                           *HMD 06/80*\n*\n*        LAST UPDATED 09 JAN 85 - JWC (*JWC MM/YY*)\n*                     RE-WRITTEN TO UTILIZE THE TSO\n*                     SERVICE FACILITY (TSF) PROVIDED WITH\n*                     TSO/E. THE TSF ROUTINE (IKJEFTSR),\n*                     ACCESSED VIA THE LINK MACRO, ACTUALLY\n*                     INVOKES THE REQUESTED PROGRAM AND ALLOWS\n*                     PARAMETERS TO BE PASSED TO THE PROGRAM.\n*                     THE LPA SEARCH AND BLDL SEARCH PORTIONS OF THE\n*                     FORMER PROGRAM ARE NO LONGER NEEDED. ALSO,\n*                     THE DOATTACH AND CORRESPONDING STAI ROUTINES\n*                     HAVE BEEN REMOVED. ALL NON-IBM MACROS HAVE\n*                     BEEN REMOVED, ALONG WITH THE ECT MAPPING MACRO.\n*\n*        LAST UPDATED 11 FEB 85 - JWC (*JWC MM/YY*)\n*                     ADD 'NOMSG' PARAMETER TO ALLOW FOR\n*                     SUPPRESSION OF ALL INFORMATIONAL MESSAGES.\n*\n*        LAST UPDATED 19 MAR 85 - JWC (*JWC MM/YY*)\n*                     SET LENGTH OF PARM LIST PASSED TO CALLED PROGRAM\n*                     TO DEFAULT AT ZERO. FIX PGM ABEND CODE DISPLAY\n*\n***********************************************************************\n         PRINT NOGEN\n         EJECT\n$        CSECT\n         SAVE  (14,12),,$-&SYSDATE-&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING $,R12                 ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LR    R6,R1                   PRESERVE PTR TO CPPL CNTL BLK\n         GETMAIN R,LV=LDYNAMIC         GETMAIN DYNAMIC WORKAREA\n         LR    R11,R1                  PRESERVE PTR TO WORKAREA\n         ST    R13,4(R11)              STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R11,8(,R13)             STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R11                 LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVC   TSFNUM,FULL01           INITIALIZE TSFMSG\n         LA    R1,TSFMSG                   OUTPUT LINE\n         ST    R1,TSFADDR                      DESCRIPTOR\n         MVC   RETNNUM,FULL01          INITIALIZE RETNMSG\n         LA    R1,RETNMSG                  OUTPUT LINE\n         ST    R1,RETNADDR                     DESCRIPTOR\n         MVC   IOPB,FULL00             INIT CNTL & TPUT OPTION FLAGS\n         MVC   PARMLEN(2),HALF00       INITIALIZE PARAMETER LENGTH (0)\n***********************************************************************\n*        BUILD PARSE PARAMETER AND I/O PARAMETER LISTS USING COMMAND  *\n*        PROCESSOR PARAMETER LIST. INITIALIZE I/O CONTROL BLOCKS      *\n***********************************************************************\n*                                                                     *\n         USING CPPL,R6                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARM LIST\n         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL\n         LA    R5,IOPLSECT             LOAD ADDR OF PUTLINE PARM LIST\n         USING IOPL,R5                 ESTABLISH ADDRESSABILITY TO IOPL\n         L     R1,CPPLUPT              LOAD PTR TO USER PROFILE TABLE\n*                                      FROM CPPL\n         L     R2,CPPLECT              LOAD PTR TO ENVIRONMENTAL\n*                                      CONTROL TABLE FROM CPPL\n         SLR   R3,R3                   ZERO REGISTER 3\n         ST    R3,ECB                  STORE REG AS ECB FOR PPL\n         LA    R3,ECB                  LOAD ADDRESS OF ECB\n         STM   R1,R3,PPLSECT           STORE ADDRESS OF UPT,ECT, AND\n*                                      ECB IN PPL\n         STM   R1,R3,IOPLSECT          STORE ADDRESS OT UPT, ECT, AND\n*                                      ECB IN PPL\n         LA    R3,IOPB                 LOAD ADDRESS OF PUTLINE\n*                                      PARAMETER BLOCK\n         ST    R3,IOPLIOPB             STORE IOPB ADDRESS IN IOPL\n         MVC   PPLPCL,PCLADDR          MOVE PTR TO PARAMETER CONTROL\n*                                      LIST INTO PPL\n         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO\n*                                      CONTAIN ADDRESS OF PDE RETURNED\n*                                      BY PARSE\n         ST    R2,PPLANS               STORE PTR TO RETURN ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE PTR TO CMD BUFFER INTO PPL\n         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORKAREA\n         ST    R2,PPLUWA               STORE ADDRESS IN PPL\n         DROP  R4,R5,R6                DROP ADDRESSABILITY TO CPPL,\n*                                      IOPL, AND PPL\n         EJECT\n***********************************************************************\n*        CALLTSSR TO PARSE (IKJPARS). ON RETURN, PARSBACK POINTS TO   *\n*        THE PDL. IF NEEDED, ISSUE PARSE SEVICE ROUTINE ERROR         *\n***********************************************************************\n         CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)\n         LTR   R15,R15                 IS RETURN CODE ZERO?\n         BNZ   BADPARSE                NO, ISSUE ERROR MSG AND STOP\n***********************************************************************\n*        SET UP ADDRESSABILITY TO PDL. REG 4 - ADDR OF PGMNAME PDE    *\n***********************************************************************\nGOODPARS EQU   *\n         L     R11,PARSBACK            R11 - PTR TO PARS ANSWER\n         USING PDL,R11                 ESTABLISH ADDRESSABILITY TO PDL\n         MVC   TSFLAGS,TSFLGS          TSO SERVICE ROUTINE PROCESS FLGS\n         L     R4,MODNAME              R4 - PTR TO PROGRAM NAME\n         TM    MODNAME+6,X'80'         IS PROGRAM NAME PRESENT?\n         BNO   BADPARSE                NO, ISSUE ERROR MSG AND STOP\n         LH    R5,MODNAME+4            R5 - LENGTH OF PROGRAM NAME\n         ST    R5,PGMLEN               PGMLEN - PARM PASSED TO IKJEFTSR\n         BCTR  R5,0                    DECREMENT FOR EXECUTE\n         EX    R5,MVCMOD               MODNAME TO PGMNAME(FOR IKJEFTSR)\n         L     R6,PDLPARM              R6 - PTR TO PROGRAM PARM LIST\n         TM    PDLPARM+6,X'80'         IS PARAMETER LIST PRESENT?\n         BNO   BUILDLST                NO, BUILD IKJEFTSR PARM LIST\n         LH    R5,PDLPARM+4            R5 - LENGTH OF PARAMETER LIST\n         CH    R5,HALF100              IS LENGTH OK?\n         BNH   LENOK                   YES, PROCESS PARAMETER LIST\n         LA    R10,8                   R10 - BRANCH ADDR FOR PARM ERR\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R5,100                  SET PARM LIST LENGTH AT MAX\nLENOK    EQU   *\n         CH    R5,HALF01               IS LENGTH OK?\n         BL    BUILDLST                NO, BUILD IKJEFTSR PARM LIST\n         STH   R5,PARMLEN              PARMLEN - PASSED TO IKJEFTSR\n         BCTR  R5,0                    DECREMENT FOR EXECUTE\n         EX    R5,MVCPARM              PDLPARM TO PARMLIST (IKJEFTSR)\n         LA    R5,1(R5)                RESET R5 TO ORIGINAL VALUE\n         EJECT\n***********************************************************************\n*        BUILD PARAMETER LIST TO BE PASSED TO IKJEFTSR VIA LINK       *\n***********************************************************************\nBUILDLST EQU   *\n         LA    R2,TSFLAGS              R2 - ADDR OF TSF FLAGS\n         ST    R2,TSFLGPTR                  TO BE STORED IN LINKLIST\n         LA    R2,PGMNAME              R2 - ADDR OF PROGRAM NAME\n         ST    R2,PGMNMPTR                  TO BE STORED IN LINKLIST\n         LA    R2,PGMLEN               R2 - ADDR OF PROGRAM LENGTH\n         ST    R2,PGMLNPTR                  TO BE STORED IN LINKLIST\n         LA    R2,RETURNCD             R2 - ADDR OF PGM RETURN CODE\n         ST    R2,RETCDPTR                  TO BE STORED IN LINKLIST\n         LA    R2,REASONCD             R2 - ADDR OF PGM/TSF REASON CODE\n         ST    R2,REASNPTR                  TO BE STORED IN LINKLIST\n         LA    R2,ABENDCD              R2 - ADDR OF PROGRAM ABEND CODE\n         ST    R2,ABECDPTR                  TO BE STORED IN LINKLIST\n         LA    R2,PARMLEN              R2 - ADDR OF PROGRAM PARM LIST\n         ST    R2,PARMADDR                  TO BE STORED IN PARMADDR\n         OI    PARMADDR,X'80'          MARK PARMADDR AS LAST PARAMETER\n*                                          PASSED TO IKJEFTSR\n         LA    R2,PARMADDR             R2 - ADDR OF PGM PARAMETER LIST\n         ST    R2,PARAMPTR                  TO BE STORED IN LINKLIST\n         OI    PARAMPTR,X'80'          MARK PARAMPTR AS LAST PARAMETER\n*                                          PASSED TO LINK\n         B     LINKTSR                 LINK TSO SERVICE ROUTINE\nABECDEND EQU   *\n         OI    ABECDPTR,X'80'          MARK ABECDPTR AS LAST PARAMETER\n*                                          PASSED TO LINK\nLINKTSR  EQU   *\n         LINK  EP=IKJEFTSR,                                            X\n               MF=(E,LINKLIST)         NO, INVOKE IKJEFTSR WITHOUT\n***********************************************************************\n*        CHECK RETURN CODE PASSED BACK FROM IKJEFTSR                  *\n***********************************************************************\nERRCHECK EQU   *\n         C     R15,FULL00              RETURN CODE = 00?\n         BNE   CHK04                   NO, CHECK FOR RC = 04\n         B     FINISH                  RETURN\nCHK04    EQU   *\n         C     R15,FULL04              RETURN CODE = 04?\n         BNE   CHK08                   NO, CHECK FOR RC = 08\n         LA    R10,12                  R10 - BRANCH ADDR - NON-ZERO MSG\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R7,RETURNCD             R7 - RETURN CODE FROM PROGRAM\n         LA    R10,4                   R10 - BRANCH ADDR - RETURN CODE\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,RETURNCD            R15 - PROGRAM RETURN CODE\n         B     FINISH                  RETURN\n         EJECT\nCHK08    EQU   *\n         C     R15,FULL08              RETURN CODE = 08?\n         BNE   CHK12                   NO, CHECK FOR RC = 12\n         LA    R10,16                  R10 - BRANCH ADDR - ATTENTN MSG\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL08              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nCHK12    EQU   *\n         C     R15,FULL12              RETURN CODE = 12?\n         BNE   CHK16                   NO, CHECK FOR RC = 16\n         LA    R10,20                  R10 - BRANCH ADDR - PGMABEND MSG\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LH    R7,ABENDCD+1            R7 - ABEND CODE FROM IKJEFTSR\n         SRL   R7,4                    COMPENSATE FOR BAD ALLIGNMENT\n         L     R8,REASONCD             R8 - REASON CODE FROM IKJEFTSR\n         LA    R10,24                  R10 - BRANCH ADDR - ABEND/REASN\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LH    R15,ABENDCD+1           R15 - $ RETURN CODE\n         SRL   R15,4                   COMPENSATE FOR BAD ALLIGNMENT\n         B     FINISH                  RETURN\nCHK16    EQU   *\n         C     R15,FULL16              RETURN CODE = 16?\n         BNE   CHK20                   NO, CHECK FOR RC = 20\n         LA    R10,28                  R10 - BRANCH ADDR - TSF ERR MSG\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LR    R7,R15                  R7 - RETURN CODE FROM IKJEFTSR\n         LA    R10,4                   R10 - BRANCH ADDR - RETURN CODE\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL16              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nCHK20    EQU   *\n         C     R15,FULL20              RETURN CODE = 20?\n         BNE   CHK24                   NO, CHECK FOR RC = 24\n         ABEND 405,DUMP\n         LR    R7,R15                  R7 - RETURN CODE FROM IKJEFTSR\n         L     R8,REASONCD             R8 - BRANCH ADDR - REASON CODE\n         B     REASONS(R8)             BRANCH TO CORRECT REASON ROUTINE\nREASONS  DS    F                       NO ZERO REASON CODE\n         B     REASON01                TSO SERVICE FACILITY ERROR\n         B     REASON01                             \"\n         B     REASON01                             \"\n         B     REASON01                             \"\n         B     REASON01                             \"\n         B     REASON02                PGM INVOKED IN NON-TSO ENVIRONMT\n         B     REASON01                TSO SERVICE FACILITY ERROR\n         B     REASON01                             \"\n         B     REASON01                             \"\n         B     REASON03                PROGRAM NOT FOUND ERROR\n         B     REASON04                SYNTAX ERROR IN PROGRAM NAME\n         B     REASON01                TSO SERVICE FACILITY ERROR\n         B     REASON05                PGM NOT SUPPORTED IN BACKGROUND\n         B     REASON06                PGM NOT IN AUTHORIZED LIBRARY\nREASON01 EQU   *\n         LA    R10,28                  R10 - BRANCH ADDR - TSF ERR MSG\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,32                  R10 - BRANCH ADDR - RETURN/REASN\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL20              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\n         EJECT\nREASON02 EQU   *\n         LA    R10,36                  R10 - BRANCH ADDR - NON-TSO MSG\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,32                  R10 - BRANCH ADDR - RETURN/REASN\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL20              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nREASON03 EQU   *\n         LA    R10,40                  R10 - BRANCH ADDR - NOT FOUND\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,32                  R10 - BRANCH ADDR - RETURN/REASN\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL20              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nREASON04 EQU   *\n         LA    R10,44                  R10 - BRANCH ADDR - SYNTAX ERROR\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,32                  R10 - BRANCH ADDR - RETURN/REASN\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL20              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nREASON05 EQU   *\n         LA    R10,48                  R10 - BRANCH ADDR - NON-SUPPORT\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,32                  R10 - BRANCH ADDR - RETURN/REASN\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL20              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nREASON06 EQU   *\n         LA    R10,52                  R10 - BRANCH ADDR - AUTHORIZED\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,32                  R10 - BRANCH ADDR - RETURN/REASN\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL20              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nCHK24    EQU   *\n         C     R15,FULL24              RETURN CODE = 24?\n         BNE   BADRETN                 NO, BAD RETURN CODE\n         LA    R10,28                  R10 - BRANCH ADDR - TSF ERR MSG\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LR    R7,R15                  R7 - RETURN CODE FROM IKJEFTSR\n         LA    R10,4                   R10 - BRANCH ADDR - RETURN CODE\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         L     R15,FULL24              R15 - $ RETURN CODE\n         B     FINISH                  RETURN\nBADPARSE EQU   *\n         LR    R7,R15                  R7 - RETURN CODE FROM REG 15\n         LA    R10,0                   R10 - BRANCH ADDR FOR PARSE ERR\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,4                   R10 - BRANCH ADDR FOR RETNCD\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LR    R15,R7                  R15 - $ RETURN CODE\n         B     FINISH                  RETURN\n         EJECT\nBADRETN  EQU   *\n         LR    R7,R15                  R7 - RETURN CODE FROM IKJEFTSR\n         LA    R10,56                  R10 - BRANCH ADDR - BAD RETNCD\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LA    R10,4                   R10 - BRANCH ADDR - RETURN CODE\n         BAL   R9,MSGHANDL             BRANCH TO ERROR HANDLING ROUTINE\n         LR    R15,R7                  R15 - $ RETURN CODE\n         B     FINISH                  RETURN\n***********************************************************************\n*        MESSAGE HANDLING ROUTINE                                     *\n***********************************************************************\nMSGHANDL EQU   *\n         B     LOADMSG(R10)            BRANCH TO CORRECT ERROR ROUTINE\nLOADMSG  B     LOADPARS                PARSE ERROR\n         B     LOADRET1                RETURN CODE\n         B     LOADPARM                PARM LIST ERROR\n         B     LOADNON0                PGM COMPLETED - NON-ZERO RETNCD\n         B     LOADATTN                PGM TERMINATED BY AN ATTENTION\n         B     LOADABEN                PROGRAM ABEND MESSAGE\n         B     LOADRET2                ABEND AND REASON CODE\n         B     LOADTSF                 TSO SERVICE FACILITY ERROR\n         B     LOADRET3                RETURN AND REASON CODE\n         B     LOADTSO                 FACILITY IN NON-TSO ENVIRONMENT\n         B     LOADNOT                 PROGRAM NOT FOUND ERROR\n         B     LOADSYN                 PROGRAM SYNTAX ERROR\n         B     LOADSUPP                PROGRAM NOT SUPPORTED BACKGND\n         B     LOADAUTH                PROGRAM NOT IN AUTHORIZED LIB\n         B     LOADRETN                BAD RETURN CODE RECEIVED\nLOADPARS EQU   *\n         MVC   TSFMSG(76),TSFMSG0      MOVE PARSE ERROR TO TSF MESSAGE\n         B     PUTMSG\nLOADPARM EQU   *\n         MVC   TSFMSG(76),TSFMSG1      MOVE PARM ERROR TO TSF MESSAGE\n         B     PUTMSG\nLOADNON0 EQU   *\n         MVC   TSFMSG(76),TSFMSG2      MOVE NON-ZERO TO TSF MESSAGE\n         B     PUTMSG\nLOADATTN EQU   *\n         MVC   TSFMSG(76),TSFMSG3      MOVE ATTENTION TO TSF MESSAGE\n         B     PUTMSG\nLOADABEN EQU   *\n         MVC   TSFMSG(76),TSFMSG4      MOVE PGM ABEND TO TSF MESSAGE\n         B     PUTMSG\nLOADTSF  EQU   *\n         MVC   TSFMSG(76),TSFMSG5      MOVE TSF ERROR TO TSF MESSAGE\n         B     PUTMSG\nLOADTSO  EQU   *\n         MVC   TSFMSG(76),TSFMSG6      MOVE TSO ERROR TO TSF MESSAGE\n         B     PUTMSG\nLOADNOT  EQU   *\n         MVC   TSFMSG(76),TSFMSG7      MOVE NOT FOUND TO TSF MESSAGE\n         B     PUTMSG\n         EJECT\nLOADSYN  EQU   *\n         MVC   TSFMSG(76),TSFMSG8      MOVE SYNTAX ERR TO TSF MESSAGE\n         B     PUTMSG\nLOADSUPP EQU   *\n         MVC   TSFMSG(76),TSFMSG9      MOVE NON-SUPPORT TO TSF MESSAGE\n         B     PUTMSG\nLOADAUTH EQU   *\n         MVC   TSFMSG(76),TSFMSGA      MOVE NON-AUTHRZD TO TSF MESSAGE\n         B     PUTMSG\nLOADRETN EQU   *\n         MVC   TSFMSG(76),TSFMSGB      MOVE BAD RETNCD TO TSF MESSAGE\n         B     PUTMSG\nLOADRET1 EQU   *\n         ST    R7,DEC                  STORE RETURN CODE\n         MVC   DEC(3),DEC+1            SHIFT DATA LEFT ONE BYTE\n         UNPK  CONDATA,DEC+1           UNPACK\n         TR    CONDATA(8),TRANS        MAKE IT PRINTABLE\n         MVC   RETNNUM1(4),CONDATA+3   MOVE TO OUTPUT AREA\n         MVC   RETNMSG1,=C'RETURN CODE = '\n         MVC   RETNLEN,HALF42          MOVE RETNLEN TO RETNMSG\n         B     PUTRETN\nLOADRET2 EQU   *\n         ST    R7,DEC                  STORE RETURN CODE\n         MVC   DEC(3),DEC+1            SHIFT DATA LEFT ONE BYTE\n         UNPK  CONDATA,DEC+1           UNPACK\n         TR    CONDATA(8),TRANS        MAKE IT PRINTABLE\n         MVC   RETNNUM1(4),CONDATA+3   MOVE TO OUTPUT AREA\n         MVC   RETNMSG1,=C' ABEND CODE = '\n         ST    R8,DEC                  STORE RETURN CODE\n         MVC   DEC(3),DEC+1            SHIFT DATA LEFT ONE BYTE\n         UNPK  CONDATA,DEC+1           UNPACK\n         TR    CONDATA(8),TRANS        MAKE IT PRINTABLE\n         MVC   RETNNUM2(4),CONDATA+3   MOVE TO OUTPUT AREA\n         MVC   RETNMSG2,=C'  REASON CODE = '\n         MVC   RETNLEN,HALF42          MOVE RETNLEN TO RETNMSG\n         B     PUTRETN\nLOADRET3 EQU   *\n         ST    R7,DEC                  STORE RETURN CODE\n         MVC   DEC(3),DEC+1            SHIFT DATA LEFT ONE BYTE\n         UNPK  CONDATA,DEC+1           UNPACK\n         TR    CONDATA(8),TRANS        MAKE IT PRINTABLE\n         MVC   RETNNUM1(4),CONDATA+3   MOVE TO OUTPUT AREA\n         MVC   RETNMSG1,=C'RETURN CODE = '\n         ST    R8,DEC                  STORE RETURN CODE\n         MVC   DEC(3),DEC+1            SHIFT DATA LEFT ONE BYTE\n         UNPK  CONDATA,DEC+1           UNPACK\n         TR    CONDATA(8),TRANS        MAKE IT PRINTABLE\n         MVC   RETNNUM2(4),CONDATA+3   MOVE TO OUTPUT AREA\n         MVC   RETNMSG2,=C'  REASON CODE = '\n         MVC   RETNLEN,HALF42          MOVE RETNLEN TO RETNMSG\n         B     PUTRETN\n         EJECT\nPUTMSG   EQU   *\n         CLI   NOMESSG+1,X'00'         SHOULD MESSAGE BE ISSUED?\n         BNZ   CLEARIT1                NO, RETURN ('NOMSG' KEYWD)\n         PUTLINE PARM=IOPB,                                            X\n               OUTPUT=(TSFOLD,TERM,SINGLE,INFOR),                      X\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE TSF MESSAGE\n         LTR   R15,R15                 CHECK PUTLINE RETURN CODE\n         BZ    CLEARIT1                IF ZERO, CLEAR MSG LINE\n         ABEND 405,DUMP                ABEND FOR DUMP\nCLEARIT1 EQU   *\n         MVC   TSFMSG+4(72),SPACES     CLEAR MESSAGE AREA\n         BR    R9                      RETURN\nPUTRETN  EQU   *\n         CLI   NOMESSG+1,X'00'         SHOULD MESSAGE BE ISSUED?\n         BNZ   CLEARIT2                NO, RETURN ('NOMSG' KEYWD)\n         PUTLINE PARM=IOPB,                                            X\n               OUTPUT=(RETNOLD,TERM,SINGLE,INFOR),                     X\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE ERR MESSAGE\nCLEARIT2 EQU   *\n         MVC   RETNMSG+4(38),SPACES    CLEAR RETURN CODE MESSAGE\n         BR    R9                      RETURN\n***********************************************************************\n*        CLEANUP AREAS GETMAINED BY PARSE AND PGM, SET RETURN CODE,   *\n*        RESTORE REGISTERS AND EXIT                                   *\n***********************************************************************\nFINISH   EQU   *\n         LR    R2,R15                  SAVE RETURN CODE IN R2\n         IKJRLSA PARSBACK              RELEASE VIRTUAL STORAGE\n*                                          ALLOCATED BY PARSE\n         LA    R0,LDYNAMIC             R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         LR    R15,R2                  RETURN RETURN CODE TO R15\n         RETURN (14,12),,RC=(15)       RESTORE REGISTERS AND RETURN\n***********************************************************************\n*        EXECUTED INSTRUCTIONS                                        *\n***********************************************************************\nMVCMOD   MVC   PGMNAME(0),0(R4)        <<EXECUTED>>\nMVCPARM  MVC   PARMLIST(0),0(R6)       <<EXECUTED>>\n***********************************************************************\n*        GENERAL DECLARE STATEMENTS                                   *\n***********************************************************************\nHALF00   DC    H'00'                   CONSTANT\nHALF01   DC    H'01'                   CONSTANT\nHALF42   DC    H'42'                   CONSTANT\nHALF100  DC    H'100'                  CONSTANT\nFULL00   DC    F'00'                   CONSTANT\nFULL01   DC    F'01'                   CONSTANT\nFULL02   DC    F'02'                   CONSTANT\nFULL04   DC    F'04'                   CONSTANT\nFULL08   DC    F'08'                   CONSTANT\nFULL12   DC    F'12'                   CONSTANT\nFULL16   DC    F'16'                   CONSTANT\nFULL20   DC    F'20'                   CONSTANT\nFULL24   DC    F'24'                   CONSTANT\nTSFLGS   DS    0F\n         DC    XL2'0000'               FLGS 1 & 2 PASSED TO IKJEFTSR\n         DC    XL1'00'                 FLG 3 - NO DUMP TO BE TAKEN\n         DC    XL1'02'                 FLG 4 - PROGRAM SPECIFICATION\nSPACES   DC    80C' '                  CONSTANT\nPCLADDR  DC    A(PCL)                  PCL ADDRESS TO BE PASSED TO PPL\n         DS    0F\nTRANS    EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         DS    0F\n         EJECT\n***********************************************************************\n*        ERROR AND INFORMATIONAL MESSAGES                             *\n***********************************************************************\nTSFMSG0  DC    AL2(TSFMSG0L)\n         DC    AL2(0)\n         DC    CL72'AN ERROR WAS ENCOUNTERED IN THE PARSE SERVICE ROUTIX\n               NE.'\nTSFMSG0L EQU   *-TSFMSG0\nTSFMSG1  DC    AL2(TSFMSG1L)\n         DC    AL2(0)\n         DC    CL72'PARM FIELD TOO LONG. TRUNCATED AT 100 CHARACTERS'\nTSFMSG1L EQU   *-TSFMSG1\nTSFMSG2  DC    AL2(TSFMSG2L)\n         DC    AL2(0)\n         DC    CL72'PROGRAM COMPLETED WITH NON-ZERO RETURN CODE. RETURNX\n                CODE FOLLOWS'\nTSFMSG2L EQU   *-TSFMSG2\nTSFMSG3  DC    AL2(TSFMSG3L)\n         DC    AL2(0)\n         DC    CL72'INVOKED PROGRAM WAS TERMINATED BECAUSE OF AN ATTENTX\n               ION'\nTSFMSG3L EQU   *-TSFMSG3\nTSFMSG4  DC    AL2(TSFMSG4L)\n         DC    AL2(0)\n         DC    CL72'PROGRAM ABENDED. ABEND AND REASON CODES FOLLOW'\nTSFMSG4L EQU   *-TSFMSG4\nTSFMSG5  DC    AL2(TSFMSG5L)\n         DC    AL2(0)\n         DC    CL72'TSO SERVICE FACILITY ERROR - CONTACT SYSTEMS PERSONX\n               NEL'\nTSFMSG5L EQU   *-TSFMSG5\nTSFMSG6  DC    AL2(TSFMSG6L)\n         DC    AL2(0)\n         DC    CL72'FACILITY MAY ONLY BE INVOKED IN TSO ENVIRONMENT(FORX\n               EGROUND / BACKGROUND)'\nTSFMSG6L EQU   *-TSFMSG6\nTSFMSG7  DC    AL2(TSFMSG7L)\n         DC    AL2(0)\n         DC    CL72'REQUESTED PROGRAM NOT FOUND. RE-ENTER COMMAND'\nTSFMSG7L EQU   *-TSFMSG7\n         EJECT\nTSFMSG8  DC    AL2(TSFMSG8L)\n         DC    AL2(0)\n         DC    CL72'IKJSCAN DETECTED A SYNTAX ERROR IN THE PROGRAM NAMEX\n               . RE-ENTER COMMAND'\nTSFMSG8L EQU   *-TSFMSG8\nTSFMSG9  DC    AL2(TSFMSG9L)\n         DC    AL2(0)\n         DC    CL72'REQUESTED PROGRAM NOT SUPPORTED IN A BACKGROUND ENVX\n               IRONMENT'\nTSFMSG9L EQU   *-TSFMSG9\nTSFMSGA  DC    AL2(TSFMSGAL)\n         DC    AL2(0)\n         DC    CL72'PROGRAM IS AUTHORIZED, BUT COPY CANNOT BE FOUND IN X\n               AN AUTHORIZED LIBRARY'\nTSFMSGAL EQU   *-TSFMSGA\nTSFMSGB  DC    AL2(TSFMSGBL)\n         DC    AL2(0)\n         DC    CL72'BAD RETURN CODE RECEIVED FROM EITHER IKJEFTSR OR LIX\n               NK. RETN CODE FOLLOWS'\nTSFMSGBL EQU   *-TSFMSGB\n***********************************************************************\n*        GENERAL REGISTER EQUATES                                     *\n***********************************************************************\n         LTORG\nPATCH    DC    50S(*)                  GENERATE SCON'S FOR PATCH AREA\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       PARAMETER PTR & WORK REGISTER\nR2       EQU   2                       WORK REGISTER\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       PTR TO PGM NAME & WORK REGISTER\nR5       EQU   5                       PGM LENGTH & WORK REGISTER\nR6       EQU   6                       PTR TO PGM PARM LIST & WORK REG\nR7       EQU   7                       ABEND & RETURN CODE CONVERSION\nR8       EQU   8                       REASON CODE CONVERSION\nR9       EQU   9                       BAL REGISTER TO MSG HANDLER\nR10      EQU   10                      BRANCH REGISTER - MSG HANDLER\nR11      EQU   11                      PTR TO PARSE ANS & WORK REGISTER\nR12      EQU   12                      BASE REG\nR13      EQU   13                      SAVE AREA ADDRESS\nR14      EQU   14                      OS LINKAGE REGISTER\nR15      EQU   15                      OS LINKAGE REG AND RETURN CODE\n         EJECT\n***********************************************************************\n*        DSECTS FOR PARSE CONTROL BLOCKS                              *\n***********************************************************************\nPCL      IKJPARM DSECT=PDL\nMODNAME  IKJIDENT 'PROGRAM',MAXLNTH=8,FIRST=ALPHANUM,                  X\n               OTHER=ALPHANUM,PROMPT='PROGRAM NAME',                   X\n               HELP='NAME OF PROGRAM TO BE CALLED'\nPDLPARM  IKJPOSIT QSTRING,HELP='PARAMETER FIELD FOR PROGRAM'\nNOMESSG  IKJKEYWD\n         IKJNAME 'NOMSG'\n         IKJENDP\n***********************************************************************\n*        TSO SERVICE FACILITY MAPPING MACROS                          *\n***********************************************************************\n         CVT   DSECT=YES               CVT MAPPING MACRO\n         IKJCPPL                       COMMAND PROCESSOR PARAMETER LIST\nCPPLLEN  EQU   *-CPPL\n         IKJPPL                        PARSE PARAMETER LIST\nPPLLEN   EQU   *-PPL\n         IKJIOPL                       I / O PARAMETER LIST\nIOPLLEN  EQU   *-IOPL\n         EJECT\n***********************************************************************\n*        DSECT FOR GETMAINED WORKAREA                                 *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nDEC      DS    F                       RETURN CODE CONVERSION (PACKED)\nECB      DS    F                       EVENT CONTROL BLOCK\nPPLSECT  DS    0F                      PARSE PARAMETER LIST\n         ORG   PPLSECT+PPLLEN\nIOPLSECT DS    0F                      I / O PARAMETER LIST\n         ORG   IOPLSECT+IOPLLEN\nPARSBACK DS    F                       ADDRESS OF PDE RETURNED BY PARSE\nTSFLAGS  DS    F                       TSO SERVICE FACILITY FLAGS\nPGMNAME  DS    CL8                     PROGRAM TO BE EXECUTED\nPGMLEN   DS    F                       LENGTH OF PGMNAME\nRETURNCD DS    F                       PROGRAM RETURN CODE\nREASONCD DS    F                       TSO SERVICE FACILITY REASON CODE\nABENDCD  DS    F                       ABEND CODE\nPARMLEN  DS    H                       LEN OF PROGRAM PARAMETER LIST\nPARMLIST DS    CL100                   PROGRAM PARAMETER LIST\nPARMADDR DS    A                       ADDRESS OF PGM PARAMETER LIST\nLINKLIST DS    0F\nTSFLGPTR DS    F                       PTR TO TSO SERVICE FACILITY FLGS\nPGMNMPTR DS    F                       PTR TO PROGRAM TO BE EXECUTED\nPGMLNPTR DS    F                       PTR TO LENGTH OF PGMNAME\nRETCDPTR DS    F                       PTR TO PROGRAM RETURN CODE\nREASNPTR DS    F                       PTR TO PGM/IKJEFTSR REASON CODE\nABECDPTR DS    F                       PTR TO PROGRAM ABEND CODE\nPARAMPTR DS    F                       PTR TO ADDR OF PGM PARAMETER LST\nCONDATA  DS    XL9                     RETURN CODE CONVERSION\n         DS    0F\nTSFOLD   DS    0FL2                    TSFMSG OUTPUT LINE DESCRIPTOR\nTSFNUM   DS    F                       NUMBER OF TSFMSG OUTPUT LINES\nTSFADDR  DS    F                       ADDRESS OF TSFMSG\nTSFMSG   DS    0CL76                   INFORMATIONAL OR ERROR MESSAGE\nTSFLEN   DS    2H                      LENGTH OF MESSAGE (76)\nTSFLINE  DS    CL72                    MESSAGE TEXT\nRETNOLD  DS    0FL2                    RETNMSG OUTPUT LINE DESCRIPTOR\nRETNNUM  DS    F                       NUMBER OF RETNMSG OUTPUT LINES\nRETNADDR DS    F                       ADDRESS OF RETNMSG\nRETNMSG  DS    0CL42                   RETURN, ABEND & REASON CODE MSG\nRETNLEN  DS    2H                      LENGTH OF MESSAGE (42)\nRETNMSG1 DS    CL14                    'RETURN CODE =' / 'ABEND CODE ='\nRETNNUM1 DS    CL4                     RETURN OR ABEND CODE NUMBER\nRETNMSG2 DS    CL16                    'REASON CODE ='\nRETNNUM2 DS    CL4                     REASON CODE MESSAGE\nIOPB     PUTLINE MF=L                  LIST FORM OF PUTLINE MACRO\nLDYNAMIC EQU   *-WORKAREA\n         END   $\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLOCMOD": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03g\\x03g\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 871, "newlines": 871, "modlines": 0, "user": "DELUXE"}, "text": "         PRINT NOGEN\n         TITLE 'ALLOCMOD - MODULE DESCRIPTION AND FUNCTION'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = ALLOCMOD                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  DISPLAYS INFORMATION FOR DATA       *\n*                                 SETS ALLOCATED TO TSO USER          *\n*                                                                     *\n*             FUNCTION =                                              *\n*               THIS PROGRAM WILL DISPLAY INFORMATION FOR DATA SETS   *\n*               ALLOCATED TO A TSO USER. INFORMATION IS EXTRACTED     *\n*               FROM THE TIOT, JFCB AND FORMAT1 DSCB.                 *\n*                                                                     *\n*                OPERATION =                                          *\n*                  GETMAIN WORK AREAS                                 *\n*                  DEFINE DIALOG VARIABLES                            *\n*                  CREATE TEMPORARY TABLE AND SET CRP TO TOP          *\n*                  ESTABLISH ADDRESSABILITY TO THE TIOT               *\n*                  LOOP THRU DDNAME ENTRIES FOUND IN THE TIOT         *\n*                    OBTAIN DSCB FOR NEEDED ENTRIES                   *\n*                    CONSTRUCT TABLE ENTRIES USING INFORMATION        *\n*                      FROM THE TIOT, JFCB AND FORMAT1 DSCB           *\n*                  DISPLAY THE TEMPORARY TABLE                        *\n*                    IF ENTER HIT, CONTINUE DISPLAY                   *\n*                    IF END HIT, FINISH                               *\n*                  CLOSE (DELETE) TEMPORARY TABLE                     *\n*                  FREE GETMAIN'ED AREAS                              *\n*                  EXIT                                               *\n*                                                                     *\n*             NOTES =                                                 *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTER  2       = ADDRESSABILITY TO TIOT       *\n*                    REGISTER  3       = ADDRESSABILITY TO JFCB       *\n*                    REGISTER  4       = LENGTH OF TIOT DD ENTRY      *\n*                    REGISTER  5       = BINARY/DECIMAL/ZONED WORK REG*\n*                    REGISTERS 7 TO 10 = WORK REGISTERS               *\n*                    REGISTER  11      = MAX TIOT DD ENTRIES PROCESSED*\n*                    REGISTER  12      = ADDRESSABILITY TO ALLOCMOD   *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS = GETMAIN, ISPCALL, OBTAIN, FREEMAIN, RETURN     *\n*                                                                     *\n*             ATTRIBUTES = RE-ENTRANT, RE-USABLE & RE-FRESHABLE       *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                05/16/85  WRITTEN.      JWC.                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'ALLOCMOD - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         X\n               &EP=ISPLINK,                                            X\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    X\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      X\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    X\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               X\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHESX\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n         EJECT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 X\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LISX\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'ALLOCMOD - INITIALIZATION SECTION'\nALLOCMOD CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,ALLOCMOD_&SYSDATE_&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING ALLOCMOD,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        X\n               WKAREA=PARMS,                                           X\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',DEFLIST1,ALRECFM,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST2,ALDISP,'CHAR',5)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST3,ALDSN,'CHAR',30)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST4,ALDDNAM,'CHAR',8)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBCREAT                 RC = 00 (CONTINUE)\n         B     DEFERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     DEFERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     DEFERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     DEFERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     DEFERR20                RC = 20 (DISPLAY PANEL / MSG)\n         EJECT\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE TEMPORARY TABLE AND POINT TO TOP\n***********************************************************************\nTBCREAT  EQU   *\n*                                      CREATE TABLE\n         ISPCALL ('TBCREATE','ALLOCTBL',' ',NAMELIST,'NOWRITE','REPLACEX\n               ')\n         B     TBCREA10(R15)           CHECK RETURN CODE\nTBCREA10 EQU   *\n         B     TBTOP                   RC = 00 (CONTINUE)\n         B     TBTOP                   RC = 04 (CONTINUE)\n         B     CREERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     CREERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     CREERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     CREERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBTOP    EQU   *\n*                                      POSITION CRP AT TOP OF TABLE\n         ISPCALL ('TBTOP','ALLOCTBL')\n         B     TBTOP10(R15)            CHECK RETURN CODE\nTBTOP10  EQU   *\n         B     SETOBTAN                RC = 00 (CONTINUE)\n         B     TOPERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     TOPERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     TOPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     TOPERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     TOPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE PARAMETER LIST FOR 'OBTAIN'\n***********************************************************************\nSETOBTAN EQU   *\n*                                      PARAMETER LIST FOR OBTAIN\n         MVC   OPCODE,OPCOD            SET OP CODE FOR DSN SEARCH\n         LA    R6,ALDSN1               ADDRESS OF FULL DSNAME\n         ST    R6,DSNPTR\n         LA    R6,ALVOL                ADDRESS OF VOLUME SERIAL\n         ST    R6,VOLPTR\n         LA    R6,WORK                 ADDRESS OF 160 BYTE WORK AREA\n         ST    R6,WORKPTR\n         MVI   WORKPTR,X'80'           INDICATE LAST PARAMETER IN LIST\n***********************************************************************\n*  INITIALIZATION SECTION - ESTABLISH ADDRESSABILITY TO TIOT DD ENTRY\n***********************************************************************\n         L     R2,16                   R2 - ADDRESS OF CVT\n         L     R2,0(R2)                R2 - ADDR OF TCB/ASCB ADDR LIST\n         L     R2,4(R2)                R2 - ADDRESS OF CURRENT TCB\n         L     R2,12(R2)               R2 - ADDRESS OF TIOT (BEGINNING)\n         LA    R2,24(R2)               R2 - ADDR OF TIOT (DD ENTRY)\n         LA    R11,400                 R11 - SET MAX NUMBER TO LOOP\n         EJECT\n         TITLE 'ALLOCMOD - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - EXTRACT DDNAME, VOLSER AND DSN\n***********************************************************************\nLOADTBL  EQU   *\n         SLR   R4,R4                   R4 - LENGTH OF TIOT DD ENTRY\n         ICM   R4,B'0001',0(R2)        LOAD LENGTH OF ENTRY\n         LTR   R4,R4                   R4 - IS LENGTH OF ENTRY ZERO?\n         BZ    DISPL1                  YES, DISPLAY TABLE\n         MVI   DSNFLG,X'00'              ITIALIZE DSN FLAG\n         MVC   ALDDNAM(8),SPACES       INITIALIZE ALLOCATED DDNAME\n         MVC   ALDSN(30),SPACES        INITIALIZE ALLOCATED DSN(1ST 30)\n         MVC   ALDSN1(30),SPACES       INITIALIZE ALLOCATED DSN(1ST 30)\n         MVC   ALDSN2(14),SPACES       INITIALIZE ALLOCATED DSN(END)\n         MVC   ALDISP(5),SPACES        INITIALIZE ALLOCATED DISP\n         MVC   ALDSORG(5),SPACES       INITIALIZE ALLOCATED DSORG\n         MVC   ALRECFM(4),SPACES       INITIALIZE ALLOCATED RECFM\n         MVC   ALBLKSZ(5),SPACES       INITIALIZE ALLOCATED BLKSIZE\n         MVC   ALRECL(5),SPACES        INITIALIZE ALLOCATED LRECL\n         MVC   ALVOL(8),SPACES         INITIALIZE ALLOCATED VOLSER\n         TM    1(R2),X'80'             HAS THIS TIOT ENTRY BEEN FREED?\n         BO    NEXTIOT                 YES, PROCEED TO NEXT TIOT ENTRY\n         MVC   ALDDNAM,4(R2)           GET DDNAME FROM TIOT\n         L     R3,11(R2)               R3 - ADDRESS OF JFCB\n         LA    R3,16(R3)               FIRST BYTE TO '00', ADJUST\n         USING INFMJFCB,R3             ESTABLISH JFCB ADDRESSABILITY\n         MVC   ALVOL(6),JFCBVOLS       GET VOLSER FROM JFCB\n         MVC   ALDSN(30),JFCBDSNM      GET 1ST 30 CHARACTERS OF DSN\n         MVC   ALDSN1(30),JFCBDSNM     GET 1ST 30 CHARACTERS OF DSN\n         MVC   ALDSN2(14),JFCBDSNM+30  GET LAST 14 CHARACTERS OF DSN\n         CLC   ALDSN2(14),SPACES       DSN LONGER THAN 30 CHARACTERS?\n         BE    CHKDISP                 NO, GET DISPOSITION\n         MVI   DSNFLG,X'FF'            YES, SET DSN FLAG\n***********************************************************************\n*  PROCESSING SECTION - WRITE FIRST 30 CHAR OF DSN TO TABLE\n***********************************************************************\nWRITDSN1 EQU   *\n         MVC   VOLSAVE,ALVOL           SAVE VOLSER FOR NEXT LINE\n         MVC   ALVOL,SPACES            CLEAR VOLSER FOR THIS LINE\n         LA    R8,ALDSN1               R8 - INDEX FOR ALDSN1\n         LA    R8,29(R8)               POINT TO END OF ALDSN1\n         LA    R9,8                    R9 - MAX NUM OF CHAR TO VIEW\n         LA    R10,1                   R10 - REPRESENTS 1 CHAR POSITION\nFINDEND  EQU   *\n         CLC   0(1,R8),=CL1'.'         IS THIS THE END OF LAST SEGMENT?\n         BE    FOUNDIT                 YES, SAVE IT TO BE ADDED TO NEXT\n         SR    R8,R10                  POINT AT PREVIOUS POSITION\n         BCT   R9,FINDEND              GO CHECK FOR SEGMENT END\nFOUNDIT  EQU   *\n         MVC   ALDSN(30),SPACES        CLEAR ALDSN TO PREPARE FOR MOVE\n         LA    R7,ALDSN                R7 - USED IN EXECUTED MOVE\n         LA    R10,ALDSN1              FIND NUMBER OF CHARACTERS\n         SR    R8,R10                      TO BE MOVED FROM\n         EX    R8,MOVEDSN1                     ALDSN1 TO ALDSN\n         B     REPLACE\n         EJECT\n***********************************************************************\n*  PROCESSING SECTION - DISP, DSORG, RECFM, LRECL & BLKSIZE FROM JFCB\n***********************************************************************\nCHKDISP  EQU   *\n         TM    JFCBIND2,JFCSHARE       DISPOSITION SHR?\n         BNO   CHKTEMP                 NO, CHECK TEMP\n         MVC   ALDISP(4),=CL4'SHR'     YES, SET DISP TO SHR\n         B     CHKDSOR1                GO CHECK DSORG\nCHKTEMP  EQU   *\n         TM    JFCBIND2,JFCTEMP        DISPOSITION TEMP?\n         BNO   CHKNEW                  NO, CHECK NEW\n         MVC   ALDISP(4),=CL4'TEMP'    YES, SET DISP TO TEMP\n         B     CHKDSOR1                GO CHECK DSORG\nCHKNEW   EQU   *\n         TM    JFCBIND2,JFCNEW         DISPOSITION NEW?\n         BNO   CHKMOD                  NO, CHECK MOD\n         MVC   ALDISP(4),=CL4'NEW'     YES, SET DISP TO NEW\n         B     CHKDSOR1                GO CHECK DSORG\nCHKMOD   EQU   *\n         TM    JFCBIND2,JFCMOD         DISPOSITION MOD?\n         BNO   CHKOLD                  NO, CHECK OLD\n         MVC   ALDISP(4),=CL4'MOD'     YES, SET DISP TO MOD\n         B     CHKDSOR1                GO CHECK DSORG\nCHKOLD   EQU   *\n         TM    JFCBIND2,JFCOLD         DISPOSITION OLD?\n         BNO   SETDISP                 NO, SET DISP\n         MVC   ALDISP(4),=CL4'OLD'     YES, SET DISP TO OLD\n         B     CHKDSOR1                GO CHECK DSORG\nSETDISP  EQU   *\n         MVC   ALDISP(4),=CL4'????'    SET DISP TO ????\nCHKDSOR1 EQU   *\n         TM    JFCDSRG1,JFCORGIS       DSORG INDEXED SEQUENTIAL?\n         BNO   CHKPS1                  NO, CHECK PHYSICAL SEQUENTIAL\n         MVC   ALDSORG(2),=CL2'IS'     YES, SET DSORG TO IS\n         B     CHKFMT1                 GO CHECK RECFM\nCHKPS1   EQU   *\n         TM    JFCDSRG1,JFCORGPS       DSORG PHYSICAL SEQUENTIAL?\n         BNO   CHKDA1                  NO, CHECK DIRECT ACCESS\n         MVC   ALDSORG(2),=CL2'PS'     YES, SET DSORG TO PS\n         B     CHKFMT1                 GO CHECK RECFM\nCHKDA1   EQU   *\n         TM    JFCDSRG1,JFCORGDA       DSORG DIRECT ACCESS?\n         BNO   CHKPO1                  NO, CHECK PARTITIONED\n         MVC   ALDSORG(2),=CL2'DA'     YES, SET DSORG TO DA\n         B     CHKFMT1                 GO CHECK RECFM\nCHKPO1   EQU   *\n         TM    JFCDSRG1,JFCORGPO       DSORG PARTITIONED?\n         BNO   CHKU1                   NO, CHECK UNMOVABLE\n         MVC   ALDSORG(2),=CL2'PO'     YES, SET DSORG TO PO\n         B     CHKFMT1                 GO CHECK RECFM\nCHKU1    EQU   *\n         TM    JFCDSRG1,JFCORGU        DSORG UNMOVABLE?\n         BNO   OBTAINIT                NO, OBTAIN FORMAT 1 DSCB\n         MVC   ALDSORG(2),=CL2'U'      YES, SET DSORG TO U\n         EJECT\nCHKFMT1  EQU   *\n         TM    JFCRECFM,JFCUND         RECFM UNDEFINED?\n         BNO   CHKF1                   NO, CHECK FIXED\n         MVC   ALRECFM(1),=CL1'U'      YES, SET RECFM TO U\n         B     CHKS1                   GO CHECK SPANNED\nCHKF1    EQU   *\n         TM    JFCRECFM,JFCFIX         RECFM FIXED?\n         BNO   CHKV1                   NO, CHECK VARIABLE\n         MVC   ALRECFM(1),=CL1'F'      YES, SET RECFM TO F\n         B     CHKB1                   GO CHECK BLOCKED\nCHKV1    EQU   *\n         TM    JFCRECFM,JFCVAR         RECFM VARIABLE?\n         BNO   OBTAINIT                NO, OBTAIN FORMAT 1 DSCB\n         MVC   ALRECFM(1),=CL1'V'      YES, SET RECFM TO V\nCHKB1    EQU   *\n         TM    JFCRECFM,JFCRFB         RECFM BLOCKED?\n         BNO   CHKS1                   NO, CHECK SPANNED\n         MVC   ALRECFM+1(1),=CL1'B'    YES, SET RECFM TO B\nCHKS1    EQU   *\n         TM    JFCRECFM,JFCRFS         RECFM SPANNED?\n         BNO   CHKA1                   NO, CHECK ASA CONTROL\n         MVC   ALRECFM+2(1),=CL1'S'    YES, SET RECFM TO S\n         B     GETBLK1                 GET MAX BLOCK SIZE\nCHKA1    EQU   *\n         TM    JFCRECFM,JFCASA         RECFM ASA CONTROL?\n         BNO   CHKM1                   NO, CHECK MACHINE CODE CONTROL\n         MVC   ALRECFM+2(1),=CL1'A'    YES, SET RECFM TO A\n         B     GETBLK1                 GET MAX BLOCK SIZE\nCHKM1    EQU   *\n         TM    JFCRECFM,JFCMAC         RECFM MACHINE CODE CONTROL?\n         BNO   GETBLK1                 NO, GET MAX BLOCK SIZE\n         MVC   ALRECFM+2(1),=CL1'M'    YES, SET RECFM TO M\nGETBLK1  EQU   *\n         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK\n         LH    R5,JFCBLKSI             LOAD BLOCK SIZE FROM JFCB\n         CVD   R5,DEC                  CONVERT TO DECIMAL\n         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA\n         ED    CONV,DEC+5              CONVERT TO ZONED\n         MVC   ALBLKSZ(5),CONV+1       MOVE TO OUTPUT AREA\n         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK\n         LH    R5,JFCLRECL             LOAD LOGICAL REC LEN FROM JFCB\n         CVD   R5,DEC                  CONVERT TO DECIMAL\n         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA\n         ED    CONV,DEC+5              CONVERT TO ZONED\n         MVC   ALRECL(5),CONV+1        MOVE TO OUTPUT AREA\n         DROP  R3                      DROP JFCB ADDRESSABILITY\n         B     REPLACE\n         EJECT\n***********************************************************************\n*  PROCESSING SECTION - DISP, DSORG, RECFM, LRECL & BLKSIZE FROM DSCB\n***********************************************************************\nOBTAINIT EQU   *\n         OBTAIN OBTANLST               GET DSCB1 INFORMATION\n         LTR   R15,R15                 INFORMATION RETURNED?\n         BNZ   REPLACE                 NO, WRITE OUT INFO AND CONTINUE\nCHKDSOR2 EQU   *\n         TM    WORK+38,DS1DSGIS        DSORG INDEXED SEQUENTIAL?\n         BNO   CHKPS2                  NO, CHECK PHYSICAL SEQUENTIAL\n         MVC   ALDSORG(2),=CL2'IS'     YES, SET DSORG TO IS\n         B     CHKFMT2                 GO CHECK RECFM\nCHKPS2   EQU   *\n         TM    WORK+38,DS1DSGPS        DSORG PHYSICAL SEQUENTIAL?\n         BNO   CHKDA2                  NO, CHECK DIRECT ACCESS\n         MVC   ALDSORG(2),=CL2'PS'     YES, SET DSORG TO PS\n         B     CHKFMT2                 GO CHECK RECFM\nCHKDA2   EQU   *\n         TM    WORK+38,DS1DSGDA        DSORG DIRECT ACCESS?\n         BNO   CHKPO2                  NO, CHECK PARTITIONED\n         MVC   ALDSORG(2),=CL2'DA'     YES, SET DSORG TO DA\n         B     CHKFMT2                 GO CHECK RECFM\nCHKPO2   EQU   *\n         TM    WORK+38,DS1DSGPO        DSORG PARTITIONED?\n         BNO   CHKU2                   NO, CHECK UNMOVABLE\n         MVC   ALDSORG(2),=CL2'PO'     YES, SET DSORG TO PO\n         B     CHKFMT2                 GO CHECK RECFM\nCHKU2    EQU   *\n         TM    WORK+38,DS1DSGU         DSORG UNMOVABLE?\n         BNO   CHKFMT2                 NO, CHECK RECFM\n         MVC   ALDSORG(2),=CL2'U'      YES, SET DSORG TO U\n         EJECT\nCHKFMT2  EQU   *\n         TM    WORK+40,DS1RECFU        RECFM UNDEFINED?\n         BNO   CHKF2                   NO, CHECK FIXED\n         MVC   ALRECFM(1),=CL1'U'      YES, SET RECFM TO U\n         B     CHKS2                   GO CHECK SPANNED\nCHKF2    EQU   *\n         TM    WORK+40,DS1RECFF        RECFM FIXED?\n         BNO   CHKV2                   NO, CHECK VARIABLE\n         MVC   ALRECFM(1),=CL1'F'      YES, SET RECFM TO F\n         B     CHKB2                   GO CHECK BLOCKED\nCHKV2    EQU   *\n         TM    WORK+40,DS1RECFV        RECFM VARIABLE?\n         BNO   CHKB2                   NO, CHECK FOR BLOCKED\n         MVC   ALRECFM(1),=CL1'V'      YES, SET RECFM TO V\nCHKB2    EQU   *\n         TM    WORK+40,DS1RECFB        RECFM BLOCKED?\n         BNO   CHKS2                   NO, CHECK SPANNED\n         MVC   ALRECFM+1(1),=CL1'B'    YES, SET RECFM TO B\nCHKS2    EQU   *\n         TM    WORK+40,DS1RECFS        RECFM SPANNED?\n         BNO   CHKA2                   NO, CHECK ASA CONTROL\n         MVC   ALRECFM+2(1),=CL1'S'    YES, SET RECFM TO S\n         B     GETBLK2                 GET MAX BLOCK SIZE\nCHKA2    EQU   *\n         TM    WORK+40,DS1RECFA        RECFM ASA CONTROL?\n         BNO   CHKM2                   NO, CHECK MACHINE CODE CONTROL\n         MVC   ALRECFM+2(1),=CL1'A'    YES, SET RECFM TO A\n         B     GETBLK2                 GET MAX BLOCK SIZE\nCHKM2    EQU   *\n         TM    WORK+40,DS1RECMC        RECFM MACHINE CODE CONTROL?\n         BNO   GETBLK2                 NO, GET MAX BLOCK SIZE\n         MVC   ALRECFM+2(1),=CL1'M'    YES, SET RECFM TO M\nGETBLK2  EQU   *\n         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK\n         LH    R5,WORK+42              LOAD BLOCK SIZE FROM DSCB1\n         CVD   R5,DEC                  CONVERT TO DECIMAL\n         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA\n         ED    CONV,DEC+5              CONVERT TO ZONED\n         MVC   ALBLKSZ(5),CONV+1       MOVE TO OUTPUT AREA\n         SLR   R5,R5                   R5 - BINARY/DECIMAL/ZONED WORK\n         LH    R5,WORK+44              LOAD LOGICAL REC LEN FROM DSCB1\n         CVD   R5,DEC                  CONVERT TO DECIMAL\n         MVC   CONV,BLKPTTRN           MOVE EDIT PATTERN TO WORK AREA\n         ED    CONV,DEC+5              CONVERT TO ZONED\n         MVC   ALRECL(5),CONV+1        MOVE TO OUTPUT AREA\n         DROP  R3                      DROP DSCB1 ADDRESSABILITY\n         EJECT\n***********************************************************************\n*  PROCESSING SECTION - REPLACE VARIABLES AND ADD TO TABLE\n***********************************************************************\nREPLACE  EQU   *\n*                                      REPLACE VARIABLE VALUES\n         ISPCALL ('VREPLACE',NAMELIST,LENLST1,ALRECFM)\n         B     VREP10(R15)             CHECK RETURN CODE\nVREP10   EQU   *\n         B     TBADD                   RC = 00 (CONTINUE)\n         B     REPERR04                RC = 04 (NOT VALID FOR VREPLACE)\n         B     REPERR08                RC = 08 (NOT VALID FOR VREPLACE)\n         B     REPERR12                RC = 12 (NOT VALID FOR VREPLACE)\n         B     REPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     REPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBADD    EQU   *\n*                                      ADD VARIABLES TO TABLE\n         ISPCALL ('TBADD','ALLOCTBL')\n         B     TBADD10(R15)            CHECK RETURN CODE\nTBADD10  EQU   *\n         B     TESTDSN                 RC = 00 (CONTINUE)\n         B     ADDERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     ADDERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ADDERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ADDERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ADDERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - WRITE REMAINDER OF DSN TO TABLE\n***********************************************************************\nTESTDSN  EQU   *\n         TM    DSNFLG,X'FF'            DSN LONGER THAN 30 CHARACTERS?\n         BNO   NEXTIOT                 NO, POINT TO NEXT TIOT ENTRY\n         MVC   ALDSN(30),SPACES        CLEAR ALDSN\n         AR    R8,R10                  RESET R8\n         LA    R10,8                   DETERMINE NUMBER OF CHARACTERS\n         SR    R10,R9                      TO BE ADDED TO ALDSN2\n         BNP   SKIPMOVE                NO CHARACTERS TO BE MOVED\n         LA    R8,1(R8)                POINT TO SEGMENT TO BE MOVED\n         LA    R7,ALDSN                R7 - INDEX POINTER TO ALDSN\n         LA    R7,4(R7)                INDENT FOUR SPACES\n         BCTR  R10,0                   DECREMENT R10 FOR MOVE\n         EX    R10,MOVEDSN2            MOVE SEGMENT ALDSN1 TO ALDSN\nSKIPMOVE EQU   *\n         LA    R8,ALDSN                PREPARE TO MOVE ALDSN2 TO ALDSN\n         LA    R8,4(R8)                INDENT FOUR SPACES\n         AR    R8,R10                  SKIP PAST SEGMENT FROM ALDSN1\n         MVC   1(14,R8),ALDSN2         MOVE ALDSN2 TO ALDSN\n         MVC   ALDDNAM,SPACES          CLEAR DDNAME FOR NEXT LINE\n         MVC   ALVOL,VOLSAVE           RESTORE ALVOL\n         MVI   DSNFLG,X'00'            RESTORE DSNFLG\n         B     CHKDISP                 GET MORE INFORMATION\nNEXTIOT  EQU   *\n         AR    R2,R4                   POINT TO NEXT DD ENTRY OF TIOT\n         BCT   R11,LOADTBL             CONTINUE TO LOAD TABLE\n         EJECT\n         TITLE 'ALLOCMOD - DISPLAY SECTION'\n***********************************************************************\n*  DISPLAY SECTION - TOP OF TABLE AND DISPLAY USING 'ALLOCLST' PANEL\n***********************************************************************\nDISPL1   EQU   *\n*                                      POSITION CRP AT TOP OF TABLE\n         ISPCALL ('TBTOP','ALLOCTBL')\n         B     TBTOP20(R15)            CHECK RETURN CODE\nTBTOP20  EQU   *\n         B     DISPL2                  RC = 00 (CONTINUE)\n         B     TOPERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     TOPERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     TOPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     TOPERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     TOPERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL2   EQU   *\n*                                      DISPLAY TABLE USING 'ALLOCLST'\n         ISPCALL ('TBDISPL','ALLOCTBL','ALLOCLST')\n         B     TBDIS10(R15)            CHECK RETURN CODE\nTBDIS10  EQU   *\n         B     DISPL2                  RC = 00 (CONTINUE)\n         B     DISPL2                  RC = 04 (CONTINUE)\n         B     FINISH                  RC = 08 (CONTINUE)\n         B     DISERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     DISERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     DISERR20                RC = 20 (DISPLAY PANEL / MSG)\n         EJECT\n         TITLE 'ALLOCMOD - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nADDERR04 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC040'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nADDERR08 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC080'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nADDERR12 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC120'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nADDERR16 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC160'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nADDERR20 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC200'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nCREERR08 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC081'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nCREERR12 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC121'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nCREERR16 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC161'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nCREERR20 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC201'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nDEFERR04 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC042'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nDEFERR08 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC082'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nDEFERR12 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC122'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nDEFERR16 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC162'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nDEFERR20 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC202'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\n         EJECT\nDISERR12 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC123'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nDISERR16 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC163'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nDISERR20 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC203'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nREPERR04 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC044'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nREPERR08 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC084'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nREPERR12 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC124'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nREPERR16 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC164'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nREPERR20 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC204'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nTOPERR04 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC045'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nTOPERR08 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC085'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nTOPERR12 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC125'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nTOPERR16 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC165'  SET MESSAGE-ID\n         B     DISPL3                  DISPLAY PANEL WITH MESSAGE\nTOPERR20 EQU   *\n         MVC   ALMSGID,=CL8'ALLOC205'  SET MESSAGE-ID\nDISPL3   EQU   *\n*                                      DISPLAY TABLE USING 'ALLOCLST'\n         ISPCALL ('TBDISPL','ALLOCTBL','ALLOCLST',ALMSGID)\n         EJECT\n         TITLE 'ALLOCMOD - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n*                                      RELEASE AREA HELP BY TEMP TABLE\n         ISPCALL ('TBEND','ALLOCTBL')\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         EJECT\n         TITLE 'ALLOCMOD - EXECUTED INSTRUCTIONS AND REGISTER EQUATES'\n***********************************************************************\n*  EXECUTED INSTRUCTIONS\n***********************************************************************\nMOVEDSN1 MVC   0(0,R7),ALDSN1          MOVE FIRST PART OF DSN\nMOVEDSN2 MVC   0(0,R7),0(R8)           MOVE SECOND PART OF DSN\nMOVEDSN3 MVC   0(0,R8),0(R9)           MOVE SEARCH ARGUMENT TO ALDSN\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nDS1DSGIS EQU   X'80'\nDS1DSGPS EQU   X'40'\nDS1DSGDA EQU   X'20'\nDS1DSGPO EQU   X'02'\nDS1DSGU  EQU   X'01'\nDS1RECFU EQU   X'C0'\nDS1RECFF EQU   X'80'\nDS1RECFV EQU   X'40'\nDS1RECFB EQU   X'10'\nDS1RECFS EQU   X'08'\nDS1RECFA EQU   X'04'\nDS1RECMC EQU   X'02'\n         EJECT\n         TITLE 'ALLOCMOD - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   TEST FOR END OF TIOT\nLENLST1  DS    0F                      LIST OF VARIABLE LENGTHS\nFULL04   DC    F'04'                   LENGTH OF RECFM\nFULL05   DC    F'05'                   LENGTH OF DISPOSITION\n         DC    F'05'                   LENGTH OF DSORG\n         DC    F'05'                   LENGTH OF BLKSIZE\n         DC    F'05'                   LENGTH OF LRECL\nFULL30   DC    F'30'                   LENGTH OF DSNAME-ONE\nFULL08   DC    F'08'                   TEST FOR RETURN CODE OF EIGHT\n         DC    F'08'                   LENGTH OF VOLUME SERIAL\n*                                      LENGTH OF DDNAME\nOPCOD    DC    XL4'C1000000'           SEARCH FOR DSNAME\nBLKPTTRN DC    XL6'402020202020'       EDIT PATTERN FOR BLKSIZE & LRECL\nSPACES   DC    CL80' '                 SPACES\nNAMELIST DS    0F                      NAMES OF VARIABLES IN TABLE\n         DC    F'08'\n         DC    F'00'\n         DC    CL8'ZALFMT'\n         DC    CL8'ZALDISP'\n         DC    CL8'ZALDORG'\n         DC    CL8'ZALBLK'\n         DC    CL8'ZALRECL'\n         DC    CL8'ZALDSN'\n         DC    CL8'ZALDD'\n         DC    CL8'ZALVOL'\nDEFLIST1 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZALFMT'\nDEFLIST2 DS    0F                      NAMES OF VARIABLES (LENGTH 5)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'ZALDISP'\n         DC    CL8'ZALDORG'\n         DC    CL8'ZALBLK'\n         DC    CL8'ZALRECL'\nDEFLIST3 DS    0F                      NAMES OF VARIABLES (LENGTH 30)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZALDSN'\nDEFLIST4 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'ZALDD'\n         DC    CL8'ZALVOL'\n         EJECT\n         TITLE 'ALLOCMOD - LITERAL POOL AND MACROS'\n         LTORG\n***********************************************************************\n*  MACROS\n***********************************************************************\n         IEFJFCBN\nALLOCMOD CSECT\n         EJECT\n         TITLE 'ALLOCMOD - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nOBTANLST DS    0F                      ADDR LIST FOR OBTAIN MACRO\nOPCODE   DS    F                       OPERATION CODE\nDSNPTR   DS    F                       ADDRESS OF DATA SET NAME\nVOLPTR   DS    F                       ADDRESS OF VOLUME SERIAL\nWORKPTR  DS    F                       ADDRESS OF 160 BYTE WORK AREA\nWORK     DS    20D                     160 BYTE WORK AREA FOR OBTAIN\nDEC      DS    D                       BINARY TO DECIMAL CONVERSION\nDSNFLG   DS    XL1                     FLAG SET IF DSN LONGER THAN 30\nCONV     DS    CL6                     DECIMAL TO ZONED CONVERSION\nALRECFM  DS    CL4                     RECORD FORMAT OF ALLOCATED DSN\nALDISP   DS    CL5                     DISPOSITION OF ALLOCATED DSN\nALDSORG  DS    CL5                     DATA SET ORGINIZATION OF DSN\nALBLKSZ  DS    CL5                     MAX BLOCK SIZE OF ALLOCATED DSN\nALRECL   DS    CL5                     LOGICAL RECORD LENGTH OF DSN\nALDSN    DS    CL30                    1ST 30 CHAR OF ALLOCATED DSN\nALDDNAM  DS    CL8                     ALLOCATED DDNAME\nALVOL    DS    CL8                     VOLSER ON WHICH DSN RESIDES\nALDSN1   DS    CL30                    1ST 30 CHAR OF ALLOCATED DSN\nALDSN2   DS    CL14                    NEXT 14 CHAR OF ALLOCATED DSN\nALMSGID  DS    CL8                     ERROR MESSAGE-ID\nVOLSAVE  DS    CL8                     ALLOCATED VOLSER SAVE AREA\nWORKLEN  EQU   *-WORKAREA\n         END   ALLOCMOD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASID": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x039\\x039\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 825, "newlines": 825, "modlines": 0, "user": "DELUXE"}, "text": "ASID    AMODE  ANY\nASID    CSECT\n*\n*   ASID WAS WRITTEN BY\n*                             R P WENZEL\n*                             OPTIMUM SYSTEMS INCORPORATED\n*                             5615 FISHERS LANE\n*                             ROCKVILLE, MARYLAND 20852\n*                             (301) 468-1000 X232\n*                             JUNE 2, 1976.\n*\n*   WITH MODIFICATIONS BY\n*                             J R PASEUR\n*                             OPTIMUM SYSTEMS INCORPORATED\n*\n*   MORE MODIFICATIONS BY\n*                             R P WENZEL\n*                             U S POSTAL SERVICE\n*                             850 CHERRY AVE.\n*                             SAN BRUNO, CALIFORNIA 94097\n*                             (415) 876-9142\n*                             FEBRUARY 1977.\n EJECT\n*)F FUNCTION -\n*  THE ASID COMMAND DISPLAYS INFORMATION ON THE ADDRESS SPACES.\n*)X SYNTAX -\n*         ASID    'ASID#'/*/STC/JOB/TSU/ALL1/ALL2\n*  REQUIRED - NONE\n*  DEFAULTS - ASID ALL1\n*  NOTE     - ASID OUTPUT HAS THE FOLLOWING FORMAT :\n*ID DP JOB  STEP  *FLAG* CPU-TIME REAL WORK G/P/D  SRC SC SERV TRC SERV\n*WHERE\n*        ID - ASID NUMBER\n*        DP - DISPATCHING PRIORITY\n*       JOB - JOBNAME\n*      STEP - STEPNAME\n*    *FLAG* - XYYYZZ\n*         X - S   - STARTED OR SYSTEM TASK\n*             J   - JOBS ON JES INITIATORS\n*             T   - TSO USERS\n*       YYY - IN  - IN CORE, SWAPPED IN (DEFAULT IF NONE OF THE BELOW)\n*             NSW - NON-SWAPPABLE\n*             PVL - PRIVILEDGED (NON-SWAPPABLE EXCEPT FOR LONG WAIT)\n*             AXS - AUX SHORTAGE FORCED SWAP\n*             OUT - SWAPPED OUT\n*             GOO - IN PROCESS OF BEING SWAPPED OUT\n*             GOI - IN PROCESS OF BEING SWAPPED IN\n*             GOB - CURRENTLY CHANGING STATUS\n*             ENQ - TEMPORARILY NON-SWAPPABLE DUE TO ENQ\n*             APG - AUTOMATIC-PRIORITY-GROUP APPLIES\n*             RMA - RMA ALGORITHM APPLIES (RTB=0)\n*        ZZ - TW  - TERMINAL WAIT\n*             MW  - LONG WAIT STATUS DETECTED BY MSO (MS6)\n*             LW  - EXPLICIT LONG WAIT\n*             NW  - NON-SWAPPABLE WAIT\n*             OW  - OUTPUT TERMINAL WAIT\n*             CP  - SIGINIFICANT CPU USER (SET BY IRARMCPM)\n*  CPU TIME - STEP CPU TIME IN HOURS:MINUTES:SECONDS\n*      REAL - AMOUNT OF REAL CORE AT LAST PAGE-IN\n*      WORK - WORKING SET SIZE AT LAST SWAPIN\n*     G/P/D - PERFORMANCE GROUP/PERFORMANCE GROUP PERIOD/DOMAIN\n*       SRC - SWAP OUT REASON CODES\n*             OTW - OUTPUT TERMINAL WAIT\n*             ITW - INPUT TERMINAL WAIT\n*              LW - LONGWAIT\n*             ASS - AUXILIARY STORAGE SHORTAGE\n*             RSS - REAL PAGEABLE STORAGE SHORTAGE\n*              DT - DETECTED WAIT\n*              RS - REQUESTED SWAP\n*              EE - ENQ EXCHANGE\n*             ERV - EXCHANGE OF RECOMMENDATION VALUE\n*               U - UNILATERAL\n*       SWC - NUMBER OF SWAPS FOR CURRENT TRANSACTION\n*      SERV - SERVICE UNITS ACCUMALATED FOR CURRENT TRANSACTION\n*       TRC - NUMBER OF TRANSACTIONS DURING SESSION\n*      SERV - SERVICE UNITS ACCUMALATED DURING SESSION\n*)O OPERANDS -\n*  'ASID#'   - ADDRESS SPACE IDENTIFICATION NUMBER.  AN ASTERISK (*)\n*              INDICATES CURRENT TSO USER.\n*))STC       - DISPLAY STARTED OR SYSTEM TASKS.\n*))JOB       - DISPLAY JOBS ON JES INITIATORS.\n*))TSU       - DISPLAY TSO USERS.\n*))ALL1      - DISPLAY ALL ASID'S BY ASCENDING ASID#.\n*))ALL2      - DISPLAY ALL ASID'S GROUPED BY STC, JOB AND TSU.\n EJECT\nASID     CSECT\n         REGS\n         SAVE  (14,12)\n         LR    R12,R15                 SET UP PROGRAM BASE\n         USING ASID,R12\n         USING ASCB,R5\n*\n         BAL   R14,BEGIN\n*\n         B     PRSE\n*\nRETURN   LR    R1,R13                  DYNAMIC AREA ADDRESS IN R1\n         LA    R0,LDYNAMIC             SIZE OF AREA\n         L     R13,4(R13)              PREVIOUS SAVE AREA\n         LA    R1,0(R1)                CLEAR TOP BYTE\n         SVC   10                      FREEMAIN\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n EJECT\n*  SUBROUTINE TO GET READY SET AND GO\n*\nBEGIN    LR    R10,R1                  SAVE R1\n         GETMAIN R,LV=LDYNAMIC         GET CORE\n         ST    R13,4(R1)               SAVE\n         ST    R1,8(R13)                   AREAS\n         LR    R13,R1\n         USING WORKAREA,R13            SET UP ADDRESSABILITY\n         MVC   LINE,SPACES             BLANK LINE\n         MVI   ASIDFLAG,OFF            BLANK FLAG\n         MVC   HEADER2,COLHEAD         MOVE COLHEAD TO HEADER2\n         MVI   HEADERSW,COLMHEAD       SET HEADERSW TO COLUMN HEADER\n         L     R2,16                   CVT ->\n         L     R2,556(R2)              ASVT ->\n         LA    R2,516(R2)              ADDR OF ASVTMAXU\n         L     R3,0(R2)                ASVTMAXU\n         ST    R3,ASCBMAX              SAVE MAX ASCB'S\n         LA    R2,8(R2)                ADDR OF ASVTENTY\n         ST    R2,ASCBONE              FIRST ASCB\n         BR    R14\n EJECT\n*  SUBROUTINE TO FORMAT ASID NUMBER\n*             DISPATCHING PRIORITY\n*             OUCB STATUS FLAGS\n*             STEP TIME\n*             AMOUNT OF REAL STORAGE\n*             CORE AT LAST SWAP IN\n*             PERFORMANCE GROUP AND PERIOD\n*\nCOMN     CVD   R3,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINEASID,CHAR+5         MOVE THREE CHARS TO LINE\nCOMNFRST SR    R7,R7                   CLEAR R7\n         IC    R7,ASCBDP               DPRTY\n         SRL   R7,4                    LEFT CHAR\n         AH    R7,=H'240'              ADD X'F0'\n         CH    R7,=H'249'              LESS THAN X'F9'\n         BH    COMNFST1                NO\n         STC   R7,LINEDPRT             SAVE CHAR\n         B     COMNSCND                RETURN\nCOMNFST1 SH    R7,=H'57'               SUB X'39'\n         STC   R7,LINEDPRT             SAVE CHAR\nCOMNSCND SR    R7,R7                   CLEAR R7\n         IC    R7,ASCBDP               DPRTY\n         LA    R8,240                  X'F0'\n         OR    R7,R8                   AND REGS.\n         CH    R7,=H'249'              LESS THAN X'F9'\n         BH    COMSCND1                NO\n         STC   R7,LINEDPRT+1           SAVE CHAR\n         B     COMN1                   CONTINUE\nCOMSCND1 SH    R7,=H'57'               SUB X'39'\n         STC   R7,LINEDPRT+1           SAVE CHAR\n EJECT\nCOMN1    MVC   LINSTAT1,=C'FAIL '      DEFAULT STATUS - FAILED\n         TM    ASCBDSP1,ASCBFAIL       TEST FOR FAILED ADDRSPC\n         BO    COMN3                   BR IF ADDRESS SPACE DEAD\n         MVC   LINSTAT1,=C'IN   '      DEFAULT/WLM ALGORITHM IN EFFECT\n         USING OUCB,R7\n         L     R7,ASCBOUCB\n         LA    R8,COMNMVE1             MOVE STATEMENT\nTESTOUT  LA    R9,=C'OUT'              SWAPPED OUT\n         TM    ASCBRCTF,ASCBOUT        TEST ASCB FOR THIS\n         BOR   R8\n         LA    R9,=C'ENQ'              NONSWAPPABLE DUE TO ENQ\n         TM    OUCBSFL,OUCBENQ\n         BOR   R8\n         LA    R9,=C'NSW'              NON-SWAPPABLE\n         TM    OUCBSFL,OUCBNSW\n         BOR   R8\n         LA    R9,=C'PVL'              PRIVELEGED STATUS\n         TM    OUCBSFL,OUCBPVL\n         BOR   R8\n         LA    R9,=C'AXS'              AUX SHORTAGE FORCED SWAP\n         TM    OUCBYFL,OUCBAXS\n         BOR   R8\n         LA    R9,=C'GOO'              GOING OUT\n         TM    OUCBQFL,OUCBGOO\n         BOR   R8\n         LA    R9,=C'GOI'              GOING IN\n         TM    OUCBQFL,OUCBGOI\n         BOR   R8\n         LA    R9,=C'GOB'              CHANGING STATUS\n         TM    OUCBQFL,OUCBGOB\n         BOR   R8\n         LA    R9,=C'APG'              APG ALGORITM APPLICABLE\n         TM    OUCBAFL,OUCBAPG\n         BOR   R8\n*        LA    R9,=C'RT0'              RMA ALGORITHM APPLICABLE\n*        TM    OUCBAFL,OUCBRMA\n*        BOR   R8\n         B     COMN2                   ACCEPT DEFAULT STATUS\nCOMNMVE1 MVC   LINSTAT1,0(R9)          MOVE COMN1\n         SPACE 3\nCOMN2    LA    R8,COMNMVE2             MOVE COMMENT\n         LA    R9,=C'TW'               TERMINAL WAIT\n         TM    OUCBEFL,OUCBTRM\n         BOR   R8\n         LA    R9,=C'MW'               MSO-DETECTED WAIT\n         TM    OUCBEFL,OUCBMWT\n         BOR   R8\n         LA    R9,=C'LW'               LONG WAIT\n         TM    OUCBEFL,OUCBLWT\n         BOR   R8\n         LA    R9,=C'OW'               OUTPUT WAIT\n         TM    OUCBEFL,OUCBOWT\n         BOR   R8\n         LA    R9,=C'NW'               NON-SWAPPABLE WAIT\n         TM    OUCBAFL,OUCBNWT\n         BOR   R8\n         LA    R9,=C'CP'               SIGNIFICANT CPU USER\n         TM    OUCBAFL,OUCBCPL\n         BOR   R8\n         B     COMN3\nCOMNMVE2 MVC   LINSTAT2,0(R9)          MOVE COMN2\n EJECT\nCOMN3    LM    R8,R9,ASCBEJST          PICK UP CPU TIME\n         SRDL  R8,24                   MOVE TO ODD REG\n         M     R8,=A(1048576)          COMPUTE IN SECONDS\n         D     R8,=A(1000000*256)\n         BAL   R7,TIMECNVT             CHANGE SEC. TO HH:MM:SS\n         SPACE 3\n         LH    R8,ASCBFMCT             ALLOCATED PAGE FRAME COUNT\n         SLL   R8,2                    MULT. BY 4\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINEFMCT,CHAR+4         MOVE FOUR CHARS TO LINE\n         MVI   LINEFMCT+4,C'K'         MOVE C'K' TO PRINT LINE\n         SPACE 3\n         L     R7,ASCBOUCB\n         USING OUCB,R7\n         LH    R8,OUCBWSS              WORKING SET SIZE AT SWAP-IN\n         SLL   R8,2                    MULT. BY 4\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINEWSS,CHAR+4          MOVE FOUR CHARS TO LINE\n         MVI   LINEWSS+4,C'K'          MOVE C'K' TO PRINT LINE\n         SPACE 3\n         SR    R8,R8                   CLEAR REG. 8\n         IC    R8,OUCBNPG              NEW PERFORMANCE GROUP NUMBER\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINENPG,CHAR+6          MOVE TWO CHARS TO LINE\n         MVI   LINENPG+2,C'/'          MOVE IN SLASH\n         SPACE 3\n         IC    R8,OUCBPGP              WMPGP OFFSET\n         SH    R8,=H'4'                SUBTRACT 4 FROM OFFSET\n         SRL   R8,3                    DIVIDE BY 8\n         STC   R8,LINEPGP              PERFORMANCE GROUP PERIOD\n         OI    LINEPGP,X'F0'           OR TO GET PRINTABLE CHAR\n         MVI   LINEPGP+1,C'/'          MOVE IN SLASH\n         SPACE 3\n         SR    R8,R8                   CLEAR REG. 8\n         IC    R8,OUCBDMN              DOMAIN NUMBER\n         CH    R8,=H'9'                DOMAIN NUMBER GREATER THAN 9\n         BH    COMN4                   YES THERE ARE TWO CHARS\n         STC   R8,LINEDMN              STORE CHARACTER\n         OI    LINEDMN,X'F0'           MAKE NUMBER\n         B     COMN5                   SKIP MOVING TWO CHARACTERS\nCOMN4    CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK2             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINEDMN,CHAR+6          MOVE TWO CHARS TO LINE\n         SPACE 3\nCOMN5    SR    R8,R8                   CLEAR REGISTER 8\n         IC    R8,OUCBSRC              SWAP REASON CODE\n         LTR   R8,R8                   EQUAL TO ZERO?\n         BZ    COMN6                   GO TO COMN6 AND FIND SWAP COUNT\n         SLL   R8,2                    MULT. BY 4 FOR TABLE OFFSET\n         LA    R9,COMNTBLE             TABLE OF SWAP REASON CODES\n         AR    R9,R8                   ADD OFFSET\n         MVC   LINESRC(3),0(R9)        MOVE SWAP REASON CODE TO LINE\n         B     COMN6                   SKIP COMNTBLE\n*                 0   1   2   3   4   5   6  7   8   9  10\nCOMNTBLE DC    C'    OTW/ITW/ LW/ASS/RSS/ DT/ RS/ EE/ERV/  U/'\n         SPACE 3\nCOMN6    LH    R8,OUCBSWC              SWAP COUNT FOR CURRENT TRANS\n         LTR   R8,R8                   EQUAL TO ZERO?\n         BZ    COMNRTN                 GO TO RETURN\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINESWC,CHAR+5          MOVE TWO CHARS TO LINE\n         SPACE 3\nCOMNRTN  BR    R15\n         DROP  R7\n EJECT\n*  SUBROUTINE TO FIND JOBS ON JES INITIATORS\n*\nINIT     MVI   ASIDTYPE,J              MOVE 'J' TO FLAG FIELD\n         MVC   HEADER1,JOBHEAD         MOVE JOBHEAD TO HEADER1\n         MVI   HEADERSW,TITLHEAD       HEADERSW TO 'STC, JOB OR TSU'\n         L     R2,ASCBONE              FIRST ASCB ->\n         LA    R3,0                    SET R3 = 0\n         L     R4,ASCBMAX              MAX NO. OF ASCB\n         TM    ASIDFLAG,ON             WAS ASID=0\n         BZ    INITLOOP                YES\n         LH    R2,ASIDNMBR             NO, PICK UP ASID NUMBER\n         SLL   R2,2                    MULT. BY 4\n         A     R2,ASCBONE              FIND CORRECT ASCB\n         LH    R3,ASIDNMBR             PICK UP ASID NUMBER\n         LA    R4,1                    NULLIFY LOOP\nINITLOOP TM    0(R2),X'80'             ASID IN USE?\n         BO    INITINCR                NO\n         L     R5,0(R2)                BEGINNING OF ASCB\n         L     R6,ASCBJBNI             JOB NAME FOR INIT PGMS\n         LTR   R6,R6                   ZERO?\n         BZ    INITINCR                YES\nINITOUT  MVC   LINEJOBN,0(R6)          MOVE JOBNAME\n         MVC   LINESTEP,56(R6)         MOVE STEPNAME\n         BAL   R15,COMN                COMMON INFO\n         BAL   R15,TSOOUXB\n         BAL   R7,PUTLINE\nINITINCR LA    R3,1(R3)                ADD ONE TO R3\n         LA    R2,4(R2)                NEXT ASCB ENTRY\n         BCT   R4,INITLOOP\n         BR    R14                     RETURN\n EJECT\n*  SUBROUTINE TO PARSE INPUT AND TO PERFORM THE REQUESTS\n*\nPRSE     EQU   *\n         USING CPPL,R10\n         MVC   IOPB,=F'00'             INIT CNTL AND INPUT OPTION FLAGS\n*\n*        REMOVE THE * IN THE FOLLOWING 5 LINES OF CODE IF\n*        YOU WISH TO RESTRICT USE OF THIS COMMAND TO ONLY\n*        THOSE USERS WHO HAVE OPERATOR PRIVILEDGES\n*\n         L     R8,CPPLPSCB\n         USING PSCB,R8\n         CLC   PSCBUSER(4),=C'ASFI'    LOCAL SYSTEMS GROUP?\n         BE    TISGOOD                 LET 'EM PASS IF =\n         TM    PSCBATR1,PSCBCTRL       USER HAVE OPERATOR PRIV.\n         BZ    PRSEVLDT                TPUT MESSAGE AND QUIT\n         DROP  R8\nTISGOOD  LA    R9,PPLADDR              ADDRESSABILITY FOR PPL\n         USING PPL,R9\n         LA    R11,IOPLSECT            ADDRESSABILITY FOR PUTLINE PARMS\n         USING IOPL,R11\n         MVC   ASIDNUM,=F'01'          INITIALIZED ASIDMSG\n         LA    R3,ASIDMSG              OUTPUT LINE\n         ST    R3,ASIDADDR                 DESCRIPTOR\n         MVC   PPLUPT,CPPLUPT          UPT\n         MVC   IOPLUPT,CPPLUPT         IOPL TOO\n         MVC   PPLECT,CPPLECT          ECT\n         MVC   IOPLECT,CPPLECT         IOPL TOO\n         LA    R3,ECB\n         ST    R3,PPLECB               ECB\n         ST    R3,IOPLECB              IOPL TOO\n         LA    R3,IOPB                 ADDR OF PUTLINE PARAMETER BLOCK\n         ST    R3,IOPLIOPB             STORE IT IN IOPL\n         L     R3,PCLADDR\n         ST    R3,PPLPCL               PCL\n         LA    R3,PDLADDR              PDL ADDRESS\n         ST    R3,PPLANS               ANSWER\n         MVC   PPLCBUF,CPPLCBUF        CBUF\n         LA    R1,PPLADDR\n         LINK  EP=IKJPARS              GO PARSE\n         LTR   R15,R15\n         BZ    PRSE1\n         MVC   ASIDMSG,PRSERM          PARSE ERROR TEXT\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(ASIDOLD,TERM,SINGLE,INFOR),                     +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO MESSAGE\n         MVC   ASIDLINE(80),SPACES     CLEAR MESSAGE AREA\n         B     RETURN\n         DROP  R9\n         DROP  R10\n EJECT\nPRSE1    L     R10,PDLADDR\n         USING IKJPARMD,R10\n         L     R3,ASIDNO               ADDR OF ASIDNO\n         CLI   0(R3),C'*'              WANT ONLY CURRENT USER?\n         BNE   PRSEASID                NO\n         L     R3,16                   CVT ->\n         L     R3,0(R3)                TCB CURRENT - OLD POINTER\n         L     R3,8(R3)                ASCB CURRENT - OLD POINTER\n         LH    R3,36(R3)               ASCBASID\n         STH   R3,ASIDNMBR             SAVE ASID NUMBER\n         LA    R3,4                    TSO TYPE NUMBER\n         STH   R3,TYPE                 SAVE TYPE\n         B     PSRESTFL\n         SPACE 1\nPRSEASID LH    R3,ASIDNO+4             LENGTH OF ASIDNO\n         BCTR  R3,0                    DECREMENT BY 1\n         LA    R4,X'70'                LENGTH OF WORK - 1\n         OR    R3,R4                   LENGTHS FOR PACK INSTR.\n         L     R4,ASIDNO               ADDR OF ASIDNO\n         EX    R3,PACK                 PACK ASIDNO\n         CVB   R3,WORK                 CONVERT ASID TO BINARY\n         C     R3,ASCBMAX              DOES ASIDNO EXISTS?\n         BH    PRSEMXER                NO SAY SO AND QUIT\n         STH   R3,ASIDNMBR             SAVE ASID NUMBER\n         LTR   R3,R3                   ASIDNO = 0 ?\n         BZ    PRSEBRTB                YES GO TO PARSE BRANCH TABLE\nPSRESTFL MVI   ASIDFLAG,ON             NO TURN ASID FLAG ON\nPRSEBRTB LH    R3,TYPE                 PICK UP TYPE\n         SLL   R3,2                    MULT. BY 4\n         B     *+0(R3)                 BRANCH TABLE\n         B     PRSEALL1                TYPE = 1\n         B     PRSEALL2                TYPE = 2\n         B     PRSESTRT                TYPE = 3\n         B     PRSEINIT                TYPE = 4\n         B     PRSETSO                 TYPE = 5\nPRSEALL1 BAL   R14,ALL1\n         B     RETURN\nPRSEALL2 BAL   R14,STRT\n         BAL   R14,INIT\n         BAL   R14,TSOJ\n         B     RETURN\nPRSETSO  BAL   R14,TSOJ\n         B     RETURN\nPRSEINIT BAL   R14,INIT\n         B     RETURN\nPRSESTRT BAL   R14,STRT\n         B     RETURN\n EJECT\nPRSEVLDT MVC   ASIDMSG,PRSEVLD         PARSE ERROR TEXT\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(ASIDOLD,TERM,SINGLE,INFOR),                     +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO MESSAGE\n         MVC   ASIDLINE(80),SPACES     CLEAR MESSAGE AREA\n         B     RETURN\n         SPACE 3\nPRSEMXER L     R3,ASCBMAX              MAX ASCB\n         MVC   LINE,PRSEMXTP\n         CVD   R3,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINE+27(4),CHAR+4       MOVE FOUR CHARS TO LINE\n         MVC   ASIDLGTH(2),=H'80'      SET UP LENGTH OF OUTPUT\n         MVC   ASIDLINE,LINE           MOVE TEXT\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(ASIDOLD,TERM,SINGLE,INFOR),                     +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO MESSAGE\n         MVC   ASIDLINE(80),SPACES     CLEAR MESSAGE AREA\n         B     RETURN\n         SPACE 3\nPACK     PACK  WORK,0(0,R4)\n         DROP  R10\n*\nPRSERM   DC    AL2(LPRSERM)\n         DC    AL2(0)\n         DC    CL80'AN ERROR WAS ENCOUNTERED IN THE PARSE SERVICE ROUTI+\n               INE'\nLPRSERM  EQU   *-PRSERM\nPRSEVLD  DC    AL2(LPRSEVLD)\n         DC    AL2(0)\n         DC    CL80'ASID COMMAND NOT AVAILABLE'\nLPRSEVLD EQU   *-PRSEVLD\nPRSEMXTP DC    CL80'MAXIMUM NUMBER OF ASCBS IS'\n EJECT\n*  SUBROUTINE TO TEST IF APPROPRIATE HEADER HAS BEEN PRINTED\n*             AND THEN PRINT CURRENT LINE\n*\nPUTLINE  CLI   HEADERSW,TITLHEAD       WRITE STC, JOB OR TSU HEADER?\n         ST    R14,SAVREG14            SAVE REG 14\n         BNE   PUTLINE1                NO, CHECK COLUMN HEADER\n         MVC   ASIDLGTH(2),=H'80'      SET UP LENGTH OF OUTPUT\n         MVC   ASIDLINE,HEADER1        STC, JOB OR TSU HEADER\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(ASIDMSG,TERM,SINGLE,DATA),                      +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO MESSAGE\n         MVC   ASIDLINE(80),SPACES     CLEAR MESSAGE AREA\n         MVI   HEADERSW,COLMHEAD       TURN COLUMN HEADER SWITCH ON\nPUTLINE1 CLI   HEADERSW,COLMHEAD       WRITE COLUMN HEADER?\n         BNE   PUTLINE2                NO, WRITE DATA LINE\n         MVC   ASIDLGTH(2),=H'80'      SET UP LENGTH OF OUTPUT\n         MVC   ASIDLINE,HEADER2        COLUMN HEADER\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(ASIDMSG,TERM,SINGLE,DATA),                      +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO MESSAGE\n         MVC   ASIDLINE(80),SPACES     CLEAR MESSAGE AREA\n         MVI   HEADERSW,DATALINE       INDICATE DATA LINE TO BE WRITTEN\nPUTLINE2 MVC   LINSTAT0,ASIDTYPE       IDENTIFY ASID TYPE IN FLAG FIELD\n         MVC   ASIDLGTH(2),=H'80'      SET UP LENGTH OF OUTPUT\n         MVC   ASIDLINE,LINE           DATA LINE\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(ASIDMSG,TERM,SINGLE,DATA),                      +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO MESSAGE\n         MVC   ASIDLINE(80),SPACES     CLEAR MESSAGE AREA\n         MVC   LINE,SPACES\n         L     R14,SAVREG14            RESTORE REG 14\n         BR    R7                      RETURN\n EJECT\n*  SUBROUTINE TO FIND STARTED TASKS, INITIATOR JOBS AND TSO USERS\n*\nALL1     L     R2,ASCBONE              FIRST ASCB ->\n         LA    R3,0                    SET R3 = 0\n         L     R4,ASCBMAX              MAX NO. OF ASCB\n         TM    ASIDFLAG,ON             WAS ASID=0\n         BZ    ALL1LOOP                YES\n         LH    R2,ASIDNMBR             NO, PICK UP ASID NUMBER\n         SLL   R2,2                    MULT. BY 4\n         A     R2,ASCBONE              FIND CORRECT ASCB\n         LH    R3,ASIDNMBR             PICK UP ASID NUMBER\n         LA    R4,1                    NULLIFY LOOP\nALL1LOOP TM    0(R2),X'80'             ASID IN USE?\n         BO    ALL1INCR                NO\n         L     R5,0(R2)                BEGINNING OF ASCB\n         L     R6,ASCBJBNI             JOB NAME FOR INIT PGMS\n         LTR   R6,R6                   ZERO?\n         BNZ   ALL1INIT                NO\n         L     R6,ASCBCSCB             ASCBCSCB ->\n         USING CSCB,R6\n         LTR   R6,R6                   ZERO?\n         BZ    ALL1STRT                YES SYSTEM TASK\n         TM    CHPKE,CHTSID            TSO JOB?\n         BO    ALL1TSOJ                YES TSO USER\n         B     ALL1STRT                SYSTEM TASK\nALL1INIT MVI   ASIDTYPE,J              MOVE 'J' TO FLAG FIELD\n         MVC   LINEJOBN,0(R6)          MOVE JOBNAME\n         MVC   LINESTEP,56(R6)         MOVE STEPNAME\n         BAL   R15,COMN                COMMON INFO\n         BAL   R15,TSOOUXB\n         BAL   R7,PUTLINE\n         B     ALL1INCR                NEXT ASCB\nALL1STRT MVI   ASIDTYPE,S              MOVE 'S' TO FLAG FIELD\n         L     R6,ASCBJBNS             JOB NAME FOR STARTED TASK\n         MVC   LINEJOBN,0(R6)          MOVE JOBNAME\n         BAL   R15,COMN\n         BAL   R7,PUTLINE\n         B     ALL1INCR                NEXT ASCB\nALL1TSOJ MVI   ASIDTYPE,T              MOVE 'T' TO FLAG FIELD\n         MVC   LINEJOBN,CHKEY          MOVE JOBNAME\n         MVC   LINESTEP,CHCLS          MOVE STEPNAME\n         BAL   R15,COMN\n         BAL   R15,TSOOUXB\n         BAL   R7,PUTLINE\nALL1INCR LA    R3,1(R3)                ADD ONE TO R3\n         LA    R2,4(R2)                NEXT ASCB ENTRY\n         BCT   R4,ALL1LOOP\n         BR    R14                     RETURN\n*  SUBROUTINE TO FIND STARTED          TASKS\n*\nSTRT     MVI   ASIDTYPE,S              MOVE 'S' TO FLAG FIELD\n         MVC   HEADER1,STCHEAD         MOVE STCHEAD TO HEADER1\n         MVI   HEADERSW,TITLHEAD       HEADERSW TO 'STC, JOB OR TSU'\n         L     R2,ASCBONE              FIRST ASCB ->\n         LA    R3,0                    SET R3 = 0\n         L     R4,ASCBMAX              MAX NO. OF ASCB\n         TM    ASIDFLAG,ON             WAS ASID=0\n         BZ    STRTLOOP                YES\n         LH    R2,ASIDNMBR             NO, PICK UP ASID NUMBER\n         SLL   R2,2                    MULT. BY 4\n         A     R2,ASCBONE              FIND CORRECT ASCB\n         LH    R3,ASIDNMBR             PICK UP ASID NUMBER\n         LA    R4,1                    NULLIFY LOOP\nSTRTLOOP TM    0(R2),X'80'             ASID IN USE?\n         BO    STRTINCR                NO\n         L     R5,0(R2)                BEGINNING OF ASCB\n         L     R6,ASCBJBNI             JOB NAME FOR INIT PGMS\n         LTR   R6,R6                   ZERO?\n         BNZ   STRTINCR                NO\n         L     R6,ASCBCSCB             ASCBCSCB ->\n         USING CSCB,R6\n         LTR   R6,R6                   ZERO?\n         BZ    STRTOUT                 YES SYSTEM TASK\n         TM    CHPKE,CHTSID            TSO JOB?\n         DROP  R6\n         BO    STRTINCR                YES\nSTRTOUT  L     R6,ASCBJBNS             JOB NAME FOR STARTED TASK\n         MVC   LINEJOBN,0(R6)          MOVE JOBNAME\n         BAL   R15,COMN\n         BAL   R7,PUTLINE\nSTRTINCR LA    R3,1(R3)                ADD ONE TO R3\n         LA    R2,4(R2)                NEXT ASCB ENTRY\n         BCT   R4,STRTLOOP\n         BR    R14                     RETURN\n EJECT\n*  SUBROUTINE TO CONVERT TIME IN SEC TO HH:MM:SS.\n*        INPUT - R9=TIME IN SEC.\n*        OUTPUT - TIME IN 'LINEEJST'.\n*\nTIMECNVT MVC   LINEEJST,TIMECNST       SET DEFAULT LINEEJST\n         LTR   R9,R9                   ANY SECONDS\n         BCR   8,R7                    RETURN IF NO TIME\n         SR    R8,R8                   ZERO FOR DIVIDE\n         D     R8,=F'3600'             GET HOURS IN R9\n         CVD   R9,WORK\n         UNPK  LINEEJST(2),WORK\n         OI    LINEEJST+1,X'F0'\n         LTR   R8,R8                   ANY REMAINING SECONDS\n         BCR   8,R7                    RETURN IF NO\n         LR    R9,R8                   GET READY FOR DIVIDE\n         SR    R8,R8\n         D     R8,=F'60'               GET MINUTES IN R9\n         CVD   R9,WORK\n         UNPK  LINEEJST+3(2),WORK\n         OI    LINEEJST+4,X'F0'\n         CVD   R8,WORK                 GET REMAINING SECONDS\n         UNPK  LINEEJST+6(2),WORK\n         OI    LINEEJST+7,X'F0'\n         BR    R7                      RETURN TO CALLER\n*\nTIMECNST DC    CL8'00:00:00'           DEFAULT TIME VALUE\n EJECT\n*  SUBROUTINE TO FIND TSO USERS\n*\nTSOJ     MVI   ASIDTYPE,T              MOVE 'T' TO FLAG FIELD\n         MVC   HEADER1,TSUHEAD         MOVE TSUHEAD TO HEADER1\n         MVI   HEADERSW,TITLHEAD       HEADERSW - 'STC, JOB OR TSU' HDR\n         L     R2,ASCBONE              FIRST ASCB ->\n         LA    R3,0                    SET R3 = 0\n         L     R4,ASCBMAX              MAX NO. OF ASCB\n         TM    ASIDFLAG,ON             WAS ASID=0\n         BZ    TSOJLOOP                YES\n         LH    R2,ASIDNMBR             NO, PICK UP ASID NUMBER\n         SLL   R2,2                    MULT. BY 4\n         A     R2,ASCBONE              FIND CORRECT ASCB\n         LH    R3,ASIDNMBR             PICK UP ASID NUMBER\n         LA    R4,1                    NULLIFY LOOP\nTSOJLOOP TM    0(R2),X'80'             ASID IN USE?\n         BO    TSOJINCR                NO\n         L     R5,0(R2)                BEGINNING OF ASCB\n         L     R6,ASCBJBNI             JOB NAME FOR INIT PGMS\n         LTR   R6,R6                   ZERO?\n         BNZ   TSOJINCR                NO\n         L     R6,ASCBCSCB             ASCBCSCB ->\n         USING CSCB,R6\n         LTR   R6,R6                   ZERO?\n         BZ    TSOJINCR                YES SYSTEM TASK\n         TM    CHPKE,CHINITID          INTIT?\n         BO    TSOJINCR                YES\n         TM    CHPKE,CHTSID            TSO JOB?\n         BNO   TSOJINCR                NO\nTSOJOUT  MVC   LINEJOBN,CHKEY          MOVE JOBNAME\n         MVC   LINESTEP,CHCLS          MOVE STEPNAME\n         DROP  R6\n         BAL   R15,COMN\n         BAL   R15,TSOOUXB\n         BAL   R7,PUTLINE\nTSOJINCR LA    R3,1(R3)                ADD ONE TO R3\n         LA    R2,4(R2)                NEXT ASCB ENTRY\n         BCT   R4,TSOJLOOP\n         BR    R14                     RETURN\n EJECT\n*  SUBROUTINE TO EXTRACT CURRENT TRANSACTION SERVICE UNITS\n*             TO EXTRACT CURRENT TRANSACTION COUNT\n*         AND TO EXTRACT SESSION SERVICE UNITS\n*\nTSOOUXB  L     R7,ASCBOUXB\n         USING OUXB,R7\n         L     R8,OUXBTRS              SERVICE UNITS\n         LTR   R8,R8                   EQUAL TO 0?\n         BZ    TSOOUXB2                SKIP TO TRANSACTION COUNT\n         C     R8,=F'9999'             GREATER THAN 9,999\n         BH    TSOOUXB1                YES CHANGE TO K\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINETRS,CHAR+4          MOVE FOUR CHARS TO LINE\n         B     TSOOUXB2                CONTINUE\nTSOOUXB1 AH    R8,=H'512'              ADD .5K FOR ROUND OFF\n         SRL   R8,10                   DIVIDE BY1024\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINETRS(3),CHAR+5       MOVE THREE CHARS TO LINE\n         MVI   LINETRS+3,C'K'          MOVE K TO LINE\nTSOOUXB2 L     R8,OUXBTRC              TRANSACTION COUNT\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         BZR   R15                     RETURN\n         MVC   LINETRC,CHAR+5          MOVE THREE CHARS TO LINE\n         L     R8,OUXBJBS              SERVICE UNITS\n         LTR   R8,R8                   EQUAL TO 0?\n         BZR   R15                     YES, RETURN\n         C     R8,=F'99999'            GREATER THAN 99,999\n         BH    TSOOUXB3                YES, CHANGE TO K\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINEJBS,CHAR+3          MOVE FIVE CHARS TO LINE\n         BR    R15                     RETURN\nTSOOUXB3 AH    R8,=H'512'              ADD .5K FOR ROUND OFF\n         SRL   R8,10                   DIVIDE BY 1024\n         CVD   R8,WORK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1             MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4             EDIT TO EBCDIC\n         MVC   LINEJBS+1(3),CHAR+5     MOVE THREE CHARS TO LINE\n         MVI   LINEJBS+4,C'K'          MOVE K TO LINE\n         BR    R15                     RETURN\n EJECT\nPCLADDR  DC    A(DSPPCL)\nSPACES   DC    CL80' '\nSTCHEAD  DC    CL80' '\n         ORG   STCHEAD                 RESET ADDRESSABILITY\n         DC    C'****   S T C   ****   S T C   ****   S T'\n         DC    C' C   ****   S T C   ****   S T C   ****'\n         ORG\nJOBHEAD  DC    CL80' '\n         ORG   JOBHEAD                 RESET ADDRESSABILITY\n         DC    C'****   J O B   ****   J O B   ****   J O'\n         DC    C' B   ****   J O B   ****   J O B   ****'\n         ORG\nTSUHEAD  DC    CL80' '\n         ORG   TSUHEAD                 RESET ADDRESSABILITY\n         DC    C'****   T S U   ****   T S U   ****   T S'\n         DC    C' U   ****   T S U   ****   T S U   ****'\n         ORG\nCOLHEAD  DC    CL80' '\n         ORG   COLHEAD                 RESET ADDRESSABILITY\n         DC    C' ID DP JOB-NAME STEPNAME *FLAG* CPU-TIME'\n         DC    C' REAL WORK G/P/D SRC SWC SERV TRC  SERV'\n         ORG\nEDMSK1   DC    XL8'4020202020202120'\nEDMSK2   DC    XL8'4020202020212020'\n         LTORG\n EJECT\nDSPPCL   IKJPARM\nASIDNO   IKJIDENT 'ASID NUMBER',ASTERISK,                              +\n               MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,                  +\n               DEFAULT='0'\nTYPE     IKJKEYWD DEFAULT='ALL1'\n         IKJNAME 'ALL1'\n         IKJNAME 'ALL2'\n         IKJNAME 'STC'\n         IKJNAME 'JOB'\n         IKJNAME 'TSU'\n         IKJENDP\n EJECT\n         IKJCPPL\n EJECT\n         IKJPSCB\n EJECT\n         IKJPPL\n EJECT\n         IKJIOPL\nIOPLLEN  EQU   *-IOPL\n EJECT\n*   CSCB\nCSCB     DSECT\n         IEECHAIN\n EJECT\n*   ASCB\n         IHAASCB\n EJECT\n*   OUCB\n         IRAOUCB\n EJECT\n*   OUXB\n         IHAOUXB\n EJECT\nWORKAREA DSECT\nSAVEAREA DS    18F\nSAVREG14 DS    F\nIOPLSECT DS    0F                      I/O PARAMETER LIST\n         ORG   IOPLSECT+IOPLLEN\nLINE     DS    CL80\n         ORG   LINE+0\nLINEASID DS    CL3\n         ORG   LINE+4\nLINEDPRT DS    CL2\n         ORG   LINE+7\nLINEJOBN DS    CL8\n         ORG   LINE+16\nLINESTEP DS    CL8\n         ORG   LINE+25\nLINESTAT DS    0CL6\nLINSTAT0 DS    CL1\nLINSTAT1 DS    CL3\nLINSTAT2 DS    CL2\n         ORG   LINE+32\nLINEEJST DS    CL8\n         ORG   LINE+40\nLINEFMCT DS    CL4\n         ORG   LINE+45\nLINEWSS  DS    CL4\n         ORG   LINE+50\nLINENPG  DS    CL2\n         ORG   LINE+53\nLINEPGP  DS    CL1\n         ORG   LINE+55\nLINEDMN  DS    CL2\n         ORG   LINE+57\nLINESRC  DS    CL3\n         ORG   LINE+61\nLINESWC  DS    CL3\n         ORG   LINE+65\nLINETRS  DS    CL4\n         ORG   LINE+70\nLINETRC  DS    CL3\n         ORG   LINE+74\nLINEJBS  DS    CL5\n         ORG   LINE+81\nWORK     DS    D\nCHAR     DS    D\nASCBONE  DS    F\nASCBMAX  DS    F\nECB      DS    F\nPDLADDR  DS    F\nPPLADDR  DS    7F\nASIDNMBR DS    H\nHEADER1  DS    CL80\nHEADER2  DS    CL80\nASIDTYPE DS    C                       'S'/STC, 'J'/JOB OR 'T'/TSU\nASIDFLAG DS    C\nHEADERSW DS    C\nASIDOLD  DS    0FL2                    ASIDMSG OUTPUT LINE DESCRIPTOR\nASIDNUM  DS    F                       NUMBER OF ASIDMSG OUTPUT LINES\nASIDADDR DS    F                       ADDRESS OF ASIDMSG\nASIDMSG  DS    0CL84                   MSG SKELETON USED BY PUTLINE\nASIDLGTH DS    2H                      LENGTH OF MESSAGE LINE (80)\nASIDLINE DS    CL80                    MSG LINE TO BE WRITTEN TO TERM\nIOPB     PUTLINE MF=L                  LIST FORMAT OF PUTLINE MACRO\nLDYNAMIC EQU   *-WORKAREA\nOFF      EQU   X'00'\nON       EQU   X'01'\nTITLHEAD EQU   X'01'                   'STC, JOB OR TSU' HEADER\nCOLMHEAD EQU   X'02'                   COLUMN HEADER\nDATALINE EQU   X'03'                   DATA LINE\nJ        EQU   X'D1'                   ASIDTYPE OF JOB\nS        EQU   X'E2'                   ASIDTYPE OF STC\nT        EQU   X'E3'                   ASIDTYPE OF TSU\n         END   ASID\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATLGTAP": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x9a\\x01\\x9a\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 410, "newlines": 410, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'CATLGTAP - RECATALOG TAPE VOLUMES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = CATLGTAP                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = GENERATE A CLIST WHICH, WHEN         *\n*                EXECUTED, WILL RECATALOG ALL TAPE VOLUMES.           *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CREATES A CLIST FOR RECATALOGING TAPE VOLUMES        *\n*                USING THE 'DEFINE NONVSAM' COMMAND.                  *\n*                                                                     *\n*                OPERATION =                                          *\n*                   OPEN THE SPECIFIED CATALOG                        *\n*                   OPEN THE SPECIFIED OUTPUT FILE                    *\n*                   READ A CATALOG RECORD; AT EOF, GOTO CLOSE         *\n*                   IF NEITHER NON-VSAM OR GDG DATA SET, IGNORE IT    *\n*                   IF NON-VSAM,                                      *\n*                     GET DATA SET NAME                               *\n*                     GET CREATION DATE FROM NAME CELL                *\n*                     SKIP ASSOCIATION CELL IF PRESENT                *\n*                     IF TAPE VOLUME,                                 *\n*                       GET VOLSER, FILSEQ, & VOLSEQ FROM VOLUME CELL *\n*                       WRITE AN OUTPUT RECORD FOR EACH VOLUME CELL   *\n*                   IF GDG,                                           *\n*                     CONSTRUCT DATA SET NAME                         *\n*                     GET CREATION DATE FROM NAME CELL                *\n*                     SKIP ASSOCIATION CELL IF PRESENT                *\n*                     IF TAPE VOLUME,                                 *\n*                       GET VOLSER, FILSEQ, & VOLSEQ FROM VOLUME CELL *\n*                       WRITE AN OUTPUT RECORD FOR EACH VOLUME CELL   *\n*                     IF MORE GDG'S GOTO CONSTRUCT DATA SET NAME      *\n*                   CLOSE CATALOG AND OUTPUT FILE                     *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 9  = WORK REGISTERS               *\n*                    REGISTER  10      = LINKAGE TO SUBROUTINE        *\n*                    REGISTER  11      = WORK REGISTER                *\n*                    REGISTER  12      = ADDRESSABILITY TO CATLGTAP   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, OPEN, GET, PUT CLOSE                           *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                02/27/84  WRITTEN.      BC.                          *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*          //STEP001  EXEC PGM=CATLGTAP                               *\n*          //STEPCAT DD DISP=SHR,DSN=CATALOG.VPRODZ                   *\n*          //CATALOG DD DISP=SHR,DSN=CATALOG.VPRODZ                   *\n*          //OUTFILE DD DSN=T99999.TEST.DATA,DISP=SHR                 *\n*                                                                     *\n***********************************************************************\n*\n         TITLE 'CATLGTAP'\nCATLGTAP CSECT\n         SAVE  (14,12),,CATLGTAP_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING CATLGTAP,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\nOPENIT   EQU   *\n         OPEN  GETACB                   OPEN THE CATALOG\n         LTR   R15,R15\n         BNZ   ERROR01\n         LA    R2,GETACB                POINT TO ACCESS CONTROL BLOCK\n         USING IFGACB,R2                ESTABLISH ADDRESSABILITY\n         L     R6,ACBAMBL               GET AMB LIST ADDRESS\n         DROP  R2\n         L     R2,52(R6)                GET AMB ADDRESS\n         MVC   CATALOG(44),136(R2)      LOAD THE CATALOG NAME\n         LA    R5,CATALOG               FIND END OF NAME\n         BAL   R4,NXTSPC\n         MVI   0(R5),C')'               AND CLOSE OFF LINE\n         OPEN  (OUTFILE,OUTPUT)         OPEN THE OUTPUT FILE\n         LTR   R15,R15\n         BNZ   ERROR02\n         LA    R8,FSTLINE               POINT TO FIRST LINE OF CLIST\n         LA    R5,FSTLINE+L'FSTLINE     POINT TO END OF FIRST LINE\n         BAL   R4,PRINTIT               AND PRINT IT\n         LA    R8,SNDLINE               POINT TO SECOND LINE\n         LA    R5,SNDLINE+L'SNDLINE     POINT TO END OF SECOND LINE\n         BAL   R4,PRINTIT               AND PRINT IT ALSO\nGETLOOP  EQU   *\n         GET   RPL=GETRPL               READ A CATALOG RECORD\n         LTR   R15,R15\n         BNZ   ERROR03\n         L     R7,RECADDR               GET RECORD ADDRESS\n         LA    R7,2(R7)                 SKIP OVER RECORD LENGTH\n         CLI   2(R7),C'A'               NON-VSAM DATA SET?\n         BE    NONVSAM                  IF SO, PROCESS FOR NON-VSAM\n         CLI   2(R7),C'B'               GDG DATA SET?\n         BE    GDG                      IF SO, PROCESS FOR GDG\n         B     GETLOOP                  IF NEITHER, GO BACK FOR ANOTHER\nNONVSAM  EQU   *\n         MVC   DSNAME(44),7(R7)         GET DATA SET NAME\n         LA    R5,DSNAME                POINT TO BEGINNING OF NAME\n         BAL   R4,NXTSPC                FIND END OF NAME\n         MVI   0(R5),C')'               CLOSE OFF\n         SLR   R8,R8\n         ICM   R8,B'0011',4(R7)         SAVE # OF VOLUME CELLS\n         BAL   R10,PROCVOLS             PROCESS VOLUME CELLS\n         B     GETLOOP\nGDG      EQU   *\n         MVC   GDGNAM(44),7(R7)         STORE BASE NAME\n         LA    R5,GDGNAM\n         BAL   R4,NXTSPC                FIND END OF NAME\n         MVI   0(R5),C')'               AND CLOSE IT OFF\n         SLR   R9,R9\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         SLR   R3,R3\n         ICM   R3,B'0001',4(R7)         GET LIMIT\n         CVD   R3,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   LIMIT(3),DECNUM+5        STORE IN OUTPUT RECORD\n         MVI   LIMIT+3,C')'             CLOSE IT OFF\n         MVC   REC8,=CL7'NOEMPTY'       DEFAULT TO NOEMPTY\n         TM    3(R7),X'80'              SHOULD IT REALLY BE EMPTY?\n         BNO   GD10                     IF NOT, BRANCH\n         MVC   REC8,=CL7'EMPTY'         IF SO, CHANGE IT\nGD10     EQU   *\n         MVC   REC9,=CL9'NOSCRATCH'     DEFAULT TO NOSCRATCH\n         TM    3(R7),X'40'              SHOULD IT REALLY BE SCRATCH\n         BNO   GD20                     IF NOT, BRANCH\n         MVC   REC9,=CL9'SCRATCH'       IF SO, CHANGE IT\nGD20     EQU   *\n         ICM   R3,B'0001',5(R7)         GET CURRENT # OF ENTRIES\n         LTR   R3,R3                    MAKE SURE NOT ZERO\n         BZ    GETLOOP                  IF ZERO, FORGET IT\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         MVI   GDGFLG,C'Y'              SET THE GDG FLAG\nGD30     EQU   *\n         CLI   2(R7),C'H'               DATA SET NAME CELL?\n         BNE   GD60                     IF NOT, END LOOP\n         MVC   DSNAME,GDGNAM            GET DATA SET NAME\n         LA    R4,DSNAME                POINT TO BEGINNING OF DSNAME\nGD40     EQU   *\n         CLI   0(R4),C')'               LOOK FOR END OF BASE NAME\n         BE    GD50                     WHEN FOUND, STOP\n         LA    R4,1(R4)                 GO TO NEXT CHARACTER\n         B     GD40\nGD50     EQU   *\n         MVC   0(2,R4),=C'.G'           GET READY TO ADD GEN# & VER#\n         ICM   R9,B'0011',5(R7)         GET GENERATION NUMBER\n         CVD   R9,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   2(4,R4),DECNUM+4         MOVE INTO DATA SET NAME\n         MVI   6(R4),C'V'               GET READY TO ADD VER#\n         SLR   R9,R9\n         ICM   R9,B'0001',7(R7)         GET VERSION NUMBER\n         CVD   R9,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   7(2,R4),DECNUM+6         MOVE INTO DATA SET NAME\n         LR    R5,R4\n         BAL   R4,NXTSPC                FIND END OF NAME\n         MVI   0(R5),C')'               CLOSE IT OFF\n         SLR   R8,R8\n         ICM   R8,B'0011',8(R7)         SAVE # OF VOLUME CELLS\n         BAL   R10,PROCVOLS             PROCESS VOLUME CELLS\n         MVI   GDGFLG,C'N'              TURN OFF FLAG\n         BCT   R3,GD30\nGD60     EQU   *\n         B     GETLOOP\nCLOSEIT  EQU   *\n         CLOSE GETACB                   CLOSE CATALOG\n         LTR   R15,R15\n         BNZ   ERROR04\n         LA    R8,LSTLINE               POINT TO LAST LINE\n         LA    R5,LSTLINE+L'LSTLINE     POINT TO END OF LAST LINE\n         BAL   R4,PRINTIT               PRINT THE LINE\n         CLOSE OUTFILE                  CLOSE OUTPUT FILE\n         LTR   R15,R15\n         BNZ   ERROR05\nRETURN0  EQU   *\n         SLR   R15,R15\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS\n*\n* SUBROUTINE TO PROCESS VOLUME CELL RECORDS\n*\nPROCVOLS EQU   *\n         LA    R2,VOLUMES               POINT TO VOLUMES\n         LA    R6,UNITS                 POINT TO UNITS\n         LA    R11,FSEQN                POINT TO FILE SEQ NUMBERS\n         MVI   VOLUMES,X'40'            CLEAR OUT VOLUMES\n         MVC   VOLUMES+1(L'VOLUMES-1),VOLUMES\n         MVI   UNITS,X'40'              CLEAR OUT UNITS\n         MVC   UNITS+1(L'UNITS-1),UNITS\n         MVI   FSEQN,X'40'              CLEAR OUT FILE SEQ NUMBERS\n         MVC   FSEQN+1(L'FSEQN-1),FSEQN\n         SLR   R9,R9\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF NAME CELL\n         AR    R7,R9                    GO TO NEXT CELL\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF OWNER CELL\n         AR    R7,R9                    GO TO NEXT CELL\n         CLI   2(R7),X'03'              ASSOCIATION CELL?\n         BNE   PV10                     IF NOT, BRANCH\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF ASSOCIATION CELL\n         AR    R7,R9                    GO TO NEXT CELL\nPV10     EQU   *\n         CLI   2(R7),X'04'              VOLUME CELL?\n         BNE   PV20                     IF NOT, WHAT'S GOING ON?\n         TM    12(R7),X'80'             TAPE DATA SET?\n         BNO   PV20                     IF NOT, FORGET IT\n         MVC   0(6,R2),4(R7)            GET VOLUME SERIAL NUMBER\n         LA    R2,7(R2)                 MOVE POINTER\n         MVC   0(6,R6),=C'TAPE62'       GET UNIT\n         LA    R6,7(R6)                 MOVE POINTER\n         ICM   R9,B'0011',20(R7)        GET FILE SEQUENCE NUMBER\n         CVD   R9,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   0(4,R11),DECNUM+4        STORE IN OUTPUT RECORD\n         LA    R11,5(R11)               MOVE POINTER\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF ASSOCIATION CELL\n         AR    R7,R9                    GO TO NEXT CELL\n         BCT   R8,PV10                  LOOP TIL ALL VOLUMES DONE\n         CLI   GDGFLG,C'Y'              FIRST OF A GDG?\n         BNE   PV15                     IF NOT, BRANCH\n         MVI   CMD,X'40'                CLEAR OUT OLD COMMAND\n         MVC   CMD+1(L'CMD-1),CMD\n         LA    R5,CMD\n         MVC   0(L'REC6,R5),REC6        LOAD GDG BASE NAME\n         BAL   R4,NXTSPC\n         LA    R5,1(R5)\n         MVC   0(L'REC7,R5),REC7        LOAD GDG LIMIT\n         BAL   R4,NXTSPC\n         LA    R5,1(R5)\n         MVC   0(L'REC8,R5),REC8        LOAD EMPTY/NOEMPTY\n         BAL   R4,NXTSPC\n         LA    R5,1(R5)\n         MVC   0(L'REC9,R5),REC9        LOAD SCRATCH/NOSCRATCH\n         BAL   R4,NXTSPC\n         MVI   0(R5),C')'               CLOSE IT OFF\n         MVC   2(L'REC5,R5),REC5        FINISH WITH CATALOG\n         BAL   R4,NXTSPC\n         LA    R8,LINE\n         BAL   R4,PRINTIT               PRINT THE LINE\nPV15     EQU   *\n         BCTR  R2,0\n         MVI   0(R2),C')'               END VOLUME\n         BCTR  R6,0\n         MVI   0(R6),C')'               END UNIT\n         BCTR  R11,0\n         MVC   0(2,R11),=C'))'          END FILE SEQUENCE NUMBER\n         MVI   CMD,X'40'                CLEAR OUT OLD COMMAND\n         MVC   CMD+1(L'CMD-1),CMD\n         LA    R5,CMD                   GET START OF COMMAND AREA\n         MVC   0(L'REC1,R5),REC1        LOAD DATASET NAME\n         BAL   R4,NXTSPC                FIND NEXT SPACE\n         LA    R5,1(R5)\n         MVC   0(L'REC2,R5),REC2        LOAD VOLUME\n         BAL   R4,NXTSPC\n         LA    R5,1(R5)\n         MVC   0(L'REC3,R5),REC3        LOAD UNIT\n         BAL   R4,NXTSPC\n         LA    R5,1(R5)\n         MVC   0(L'REC4,R5),REC4        LOAD FILE SEQUENCE NUMBER\n         BAL   R4,NXTSPC\n         LA    R5,1(R5)\n         MVC   0(L'REC5,R5),REC5        LOAD CATALOG\n         BAL   R4,NXTSPC                POINT TO END OF RECORD\n         LA    R8,LINE\n         BAL   R4,PRINTIT               PRINT THE RECORD\nPV20     EQU   *\n         BR    R10\n*\nNXTSPC   EQU   *\n         LA    R5,1(R5)                 INCREMENT POINTER\n         CLC   0(4,R5),=C'    '         CHECK FOR A SPACE\n         BNE   NXTSPC                   LOOP TIL SPACE FOUND\n         BR    R4                       RETURN\n*\nPRINTIT  EQU   *\n         AP    LINE#,=P'100'            INCREMENT LINE NUMBER\n         UNPK  4(8,R8),LINE#            UNPACK LINE NUMBER\n         MVZ   11(1,R8),10(R8)          AND MOVE ZONE BYTE\n         SR    R5,R8                    CALCULATE LINE LENGTH\n         STH   R5,0(R8)                   AND STORE\n         MVC   2(2,R8),=X'0000'\n         PUT   OUTFILE,(R8)             WRITE RECORD INTO OUTPUT FILE\n         BR    R4\n*\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nRECADDR  DS    F                        ADDRESS OF RECORD WITHIN BUFFER\nWORK     DS    D\nDECNUM   DS    CL8\nGDGFLG   DC    C'N'\nLINE#    DC    P'00000000'\n*\n         DS    0F\nLINE     DS    0CL255                   OUTPUT FILE RECORD\n         DC    X'00000000'\n         DS    CL8\nCMD      DC    CL243' '\n*\n         DS    0F\nFSTLINE  DS    0CL18                    OUTPUT FILE RECORD\n         DC    X'00000000'\n         DS    CL8\n         DC    C'PROC 0'\n*\n         DS    0F\nSNDLINE  DS    0CL43                    OUTPUT FILE RECORD\n         DC    X'00000000'\n         DS    CL8\n         DC    C'CONTROL LIST NOFLUSH PROMPT MSG'\n*\n         DS    0F\nREC1     DS    0CL66\n         DC    C'DEFINE NONVSAM (NAME('\nDSNAME   DC    CL45' '                    DATA SET NAME\n*\n         DS    0F\nREC2     DS    0CL49\n         DC    C'VOLUME('\nVOLUMES  DC    CL42' '                    VOLUME SERIAL NUMBERS\n*\n         DS    0F\nREC3     DS    0CL47\n         DC    C'DEVT('\nUNITS    DC    CL42' '                    UNITS\n*\n         DS    0F\nREC4     DS    0CL37\n         DC    C'FSEQN('\nFSEQN    DC    CL31' '                    FILE SEQUENCE NUMBERS\n*\n         DS    0F\nREC5     DS    0CL49\n         DC    C'CAT('\nCATALOG  DC    CL45' '                    CATALOG\n*\n         DS    0F\nREC6     DS    0CL62\n         DC    C'DEFINE GDG (NAME('\nGDGNAM   DC    CL45' '                    GDG BASE NAME\n*\n         DS    0F\nREC7     DS    0CL10\n         DC    C'LIMIT('\nLIMIT    DC    CL4' '                     LIMIT\n*\n         DS    0F\nREC8     DC    CL7' '                     EMPTY/NOEMPTY\n*\n         DS    0F\nREC9     DC    CL9' '                     SCRATCH/NOSCRATCH\n*\nLSTLINE  DS    0CL15\n         DC    X'00000000'\n         DS    CL8\n         DC    C'END'\n*\nGETACB   ACB   AM=VSAM,CATALOG=NO,DDNAME=CATALOG,EXLST=ERROR,          X\n               MACRF=(ADR,NFX,NDF,SEQ,NCI,IN,NIS,NRM,NRS,NUB)\nERROR    EXLST AM=VSAM,EODAD=CLOSEIT\nGETRPL   RPL   ACB=GETACB,AM=VSAM,AREA=RECADDR,AREALEN=4,              X\n               OPTCD=(ADR,SEQ,ARD,FWD,SYN,NUP,LOC)\nOUTFILE  DCB   DDNAME=OUTFILE,DSORG=PS,RECFM=VB,LRECL=255,             X\n               MACRF=(PM)\n         PRINT NOGEN\nERROR01  EQU   *\n         WTO   'CATLGTAP01 OPEN FOR THE CATALOG FAILED',               X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR02  EQU   *\n         WTO   'CATLGTAP02 OPEN FOR THE OUTPUT FILE FAILED',           X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR03  EQU   *\n         WTO   'CATLGTAP03 GET MACRO FAILED',                          X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR04  EQU   *\n         WTO   'CATLGTAP05 CLOSE FOR CATALOG FAILED',                  X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR05  EQU   *\n         WTO   'CATLGTAP06 CLOSE FOR OUTPUT FILE FAILED',              X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\n         PRINT GEN\n         LTORG\n         PRINT NOGEN\n         EQUATE                         REGISTER EQUATES\n         IFGACB\n         PRINT GEN\n         END   CATLGTAP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATLIST": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\xb1\\x01\\xb1\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 433, "newlines": 433, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'CATLIST'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = CATLIST                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = LIST ALL NON-VSAM AND GDG            *\n*                CATALOG ENTRIES.                                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                GENERATES A LIST OF ALL NON-VSAM (INCLUDING GDG)     *\n*                DATA SETS CATALOGED IN THE SPECIFIED CATALOG. THE    *\n*                LISTING IS ALMOST IDENTICAL TO THE ONE GENERATED     *\n*                BY IBM'S LISTCAT USING SYSIN OF 'NONVSAM'.           *\n*                                                                     *\n*                OPERATION =                                          *\n*                   FORMAT THE TIME AND DATE                          *\n*                   OPEN THE CATALOG AND OUTPUT FILE                  *\n*                   READ CATALOG RECORD, IF EOF, GOTO CLOSE           *\n*                   IF NOT NON-VSAM OR GDG, GOTO READ                 *\n*                   IF NON-VSAM, SET FLAG AND STORE DATA SET NAME     *\n*                   IF GDG, SET FLAG AND CONSTRUCT DATA SET NAME      *\n*                   CONSTRUCT PRINT LINES FOR DATA SET AND OUTPUT     *\n*                     TO THE OUTPUT FILE                              *\n*                   IF ANOTHER DATA SET IN THE GDG, GOTO CONSTRUCT    *\n*                     DATA SET NAME                                   *\n*                   ELSE GOTO READ CATALOG RECORD                     *\n*                   CLOSE CATALOG AND OUTPUT FILE                     *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 4  = LINKAGE & WORK REGISTERS     *\n*                    REGISTERS 5 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO CMPAPDX    *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, OPEN, GET, PUT, CLOSE                          *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                01/19/84  WRITTEN.      BC.                          *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\nCATLIST CSECT\n         SAVE  (14,12),,CATLIST_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING CATLIST,R12              TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\nGETDATE  EQU   *\n         TIME  DEC                      GET THE TIME AND DATE\n         SRL   R0,4                     R0 = 0HHMMSST\n         ST    R0,WORK                  WORK = 0HHMMSST\n         OI    WORK+3,X'0F'             WORK = 0HHMMSSF\n         ED    TIME,WORK                TIME = HH:MM:SS\n         MVC   TIME,TIME+1\n         ST    R1,WORK                  WORK = 00YYDDDF\n         XC    WORK(2),WORK             WORK = 0000DDDF\n         SRL   R1,12                    R1 = 00000YYD\n         ST    R1,DWORK+4               DWORK+4 = 00000YYD\n         OI    DWORK+7,X'0F'            DWORK+4 = 00000YYF\n         UNPK  YY,DWORK+6(2)            STORE THE YEAR\n         CVB   R1,DWORK                 CONVERT THE YEAR TO BINARY\n         N     R1,=F'3'                 LEAP YEAR?\n         BNZ   GT10                     IF NOT, BRANCH\n         AP    DAYSYEAR,=P'1'           INCREASE DAYS IN A YEAR\n         AP    MONTH-1,=P'1'            ADD A DAY TO FEBRUARY\nGT10     EQU   *\n         LA    R1,MONTH                 POINT TO JANUARY\nGT20     EQU   *\n         SP    WORK,0(1,R1)             SUBTRACT DAYS IN THE MONTH\n         SP    WORK,=P'30'\n         BNP   GT30                     WHEN NEGATIVE, BRANCH OUT\n         BCTR  R1,0                     GO BACKWARDS THRU TABLE\n         AP    COUNT,=P'1'              COUNT THE MONTHS\n         B     GT20                     AND LOOP\nGT30     EQU   *\n         AP    WORK,0(1,R1)             ADD LAST MONTH BACK IN\n         AP    WORK,=P'30'\n         OI    COUNT+L'COUNT-1,X'0F'    COUNT = 0MMF\n         UNPK  MM,COUNT                 STORE THE MONTH\n         OI    WORK+3,X'0F'\n         UNPK  DD,WORK                  STORE THE DAY\nOPENIT   EQU   *\n         MODESET KEY=ZERO,MODE=SUP\n         L     R3,540\n         LA    R3,0(R3)\n         L     R4,180(R3)\n         OI    243(R4),X'80'\n         MODESET KEY=NZERO,MODE=PROB\n         OPEN  GETACB                   OPEN THE CATALOG\n         LTR   R15,R15\n         BNZ   ERROR01\n         LA    R2,GETACB                GET ADDRESS TO ACB\n         USING IFGACB,R2                ESTABLISH ADDRESSABILITY\n         L     R3,ACBAMBL               GET ADDRESS TO AMBL\n         L     R4,52(R3)                GET ADDRESS TO AMB\n         MVC   CATNAME,136(R4)          GET THE ACTUAL CATALOG NAME\n         DROP  R2\n         OPEN  (OUTFILE,OUTPUT)         OPEN THE OUTPUT FILE\n         LTR   R15,R15\n         BNZ   ERROR02\nGETLOOP  EQU   *\n         GET   RPL=GETRPL               READ A CATALOG RECORD\n         LTR   R15,R15\n         BNZ   ERROR03\n         L     R7,RECADDR               GET RECORD ADDRESS\n         LA    R7,2(R7)                 SKIP OVER RECORD LENGTH\n         CLI   2(R7),C'A'               NON-VSAM DATA SET?\n         BE    NONVSAM                  IF SO, PROCESS FOR NON-VSAM\n         CLI   2(R7),C'B'               GDG DATA SET?\n         BE    GDG                      IF SO, PROCESS FOR GDG\n         B     GETLOOP                  IF NEITHER, GO BACK FOR ANOTHER\n*\nNONVSAM  EQU   *\n         MVI   TYPE,C'0'                SET FLAG FOR NON-VSAM\n         MVC   DSNAME,7(R7)             STORE DATA SET NAME\n         MVC   LINE7,LINE7A             STORE NON-VSAM ASSOCIATIONS\n         SLR   R2,R2\n         ICM   R2,B'0011',4(R7)         GET # OF VOLUME CELLS\n         B     BOTH                     BRANCH TO COMMON SECTION\n*\nGDG      EQU   *\n         MVI   TYPE,C'1'                SET FLAG FOR GDG\n         MVC   GDGNAME,7(R7)            STORE GDG NAME\n         MVC   DSNAME,7(R7)             GET DATA SET NAME\n         LA    R4,DSNAME                POINT TO BEGINNING OF DSNAME\nGD10     EQU   *\n         CLI   0(R4),X'40'              LOOK FOR FIRST BLANK\n         BE    GD20                     WHEN FOUND, STOP\n         LA    R4,1(R4)                 GO TO NEXT CHARACTER\n         B     GD10\nGD20     EQU   *\n         MVC   0(2,R4),=C'.G'           GET READY TO ADD GEN# & VER#\n         SLR   R9,R9\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         SLR   R6,R6\n         ICM   R6,B'0001',5(R7)\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\nGD30     EQU   *\n         CLI   2(R7),C'H'               DATA SET NAME CELL?\n         BNE   GD50                     IF NOT, END LOOP\n         ICM   R9,B'0011',5(R7)         GET GENERATION NUMBER\n         CVD   R9,DWORK                 CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,DWORK             UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   2(4,R4),DECNUM+4         MOVE INTO DATA SET NAME\n         MVI   6(R4),C'V'               GET READY TO ADD VER#\n         SLR   R9,R9\n         ICM   R9,B'0001',7(R7)         GET VERSION NUMBER\n         CVD   R9,DWORK                 CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,DWORK             UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   7(2,R4),DECNUM+6         MOVE INTO DATA SET NAME\n         SLR   R2,R2\n         ICM   R2,B'0011',8(R7)         SAVE # OF VOLUME CELLS\n         MVC   LINE7,LINE7B             STORE GDG ASSOCIATIONS\n         ST    R4,SAVEPTR               SAVE R4 FOR LATER\n         B     BOTH\nGD40     EQU   *\n         L     R4,SAVEPTR               GET R4 BACK\n         BCT   R6,GD30                  LOOP TIL ALL GDG'S DONE\nGD50     EQU   *\n         B     GETLOOP\n*\nBOTH     EQU   *\n         MVC   LINE(L'LINE1),LINE1      SET UP FIRST LINE\n         MVI   CNTL,C'0'                SET CONTROL TO SPACE 2 LINES\n         BAL   R10,PRINT                OUTPUT THE LINE\n         MVC   LINE+5(L'LINE2),LINE2    SET UP SECOND LINE\n         BAL   R10,PRINT                OUTPUT THE LINE\n         SLR   R9,R9\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         MVC   LINE+7(L'LINE3A),LINE3A  START THIRD LINE\n         CLC   3(8,R7),NULLCHK          ANYTHING IN OWNER-IDENT?\n         BE    B10                      IF NOT, SKIP IT\n         MVC   LINE+23(8),3(R7)         ADD OWNER-IDENT\nB10      EQU   *\n         MVC   LINE+36(L'LINE3B),LINE3B ADD TO THIRD LINE\n         UNPK  DATE,12(3,R7)            UNPACK CREATION DATE\n         MVZ   DATE+4(1),DATE+3         MOVE ZONE BYTE\n         MVC   LINE+54(2),DATE          STORE THE YEAR\n         MVI   LINE+56,C'.'             INSERT PERIOD\n         MVC   LINE+57(3),DATE+2        ADD DAY\n         BAL   R10,PRINT                OUTPUT THE LINE\n         MVC   LINE+7(L'LINE4A),LINE4A  START FOURTH LINE\n         MVC   LINE+36(L'LINE4B),LINE4B ADD TO FOURTH LINE\n         UNPK  DATE,15(3,R7)            UNPACK EXPIRATION DATE\n         MVZ   DATE+4(1),DATE+3         MOVE ZONE BYTE\n         MVC   LINE+54(2),DATE          STORE THE YEAR\n         MVI   LINE+56,C'.'             INSERT PERIOD\n         MVC   LINE+57(3),DATE+2        ADD DAY\n         BAL   R10,PRINT                OUTPUT THE LINE\n         MVC   LINE+5(L'LINE5),LINE5    SET UP THE FIFTH LINE\n         BAL   R10,PRINT                OUTPUT THE LINE\n         SLR   R9,R9\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         CLI   2(R7),X'04'              VOLUME RECORD?\n         BE    B20                      IF SO, BRANCH\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\nB20      EQU   *\n         MVC   LINE+7(L'LINE6A),LINE6A  START THE SIXTH LINE\n         MVC   LINE+25(6),4(R7)         GET VOLUME SERIAL NUMBER\n         MVC   LINE+36(L'LINE6B),LINE6B ADD TO SIXTH LINE\n         LA    R8,LINE+51               GET ADDRESS FOR DEVICE TYPE\n         LA    R3,8                     GET LENGTH OF DEVICE TYPE\n         L     R5,10(R7)                GET DEVICE TYPE\nB30      EQU   *\n         SLR   R4,R4\n         SLDL  R4,4(0)                  PUT HIGHEST 4 BITS INTO R4\n         STC   R4,CHAR+1                STORE LOWEST 8 BITS\n         OI    CHAR+1,X'F0'             SET TOP 4 BITS OF THOSE 8\n         CLI   CHAR+1,X'F9'             WAS THE NUMBER GREATER THAN 9?\n         BNH   B40                      IF NOT, BRANCH\n         XI    CHAR+1,X'38'             CONVERT TO EBCDIC CHARACTER\n         ICM   R4,B'0011',CHAR\n         SH    R4,=H'1'                   OF 'A' THRU 'F'\n         STH   R4,CHAR\nB40      EQU   *\n         MVC   0(1,R8),CHAR+1           STORE IN LINE\n         LA    R8,1(R8)                 GO TO NEXT LINE POSITION\n         BCT   R3,B30                   LOOP TIL ALL 8 CHARS STORED\n         MVC   LINE+65(L'LINE6C),LINE6C ADD TO SIXTH LINE\n         ICM   R9,B'0011',20(R7)        GET FILE SEQUENCE NUMBER\n         CVD   R9,DWORK                 CONVERT TO PACKED DECIMAL\n         MVC   LINE+83(6),FSEQFMT       GET FORMAT FOR FILE SEQ NUMBER\n         ED    LINE+83(6),DWORK+5       STORE IN THE PRINT LINE\n         BAL   R10,PRINT                OUTPUT THE LINE\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         BCT   R2,B20                   LOOP TIL ALL VOLUMES DONE\n         MVC   LINE+5(L'LINE7),LINE7    SET UP LINE 7\n         BAL   R10,PRINT                OUTPUT THE LINE\n         CLI   TYPE,C'1'                IS THIS A GDG?\n         BNE   GETLOOP                  IF NOT, THAT'S IT\n         MVC   LINE+7(L'LINE8),LINE8    SET UP LINE 8\n         BAL   R10,PRINT                OUTPUT THE LINE\n         B     GD40\n*\nCLOSEIT  EQU   *\n         CLOSE GETACB                   CLOSE CATALOG\n         LTR   R15,R15\n         BNZ   ERROR04\n         CLOSE OUTFILE                  CLOSE OUTPUT FILE\n         LTR   R15,R15\n         BNZ   ERROR05\nRETURN0  EQU   *\n         SLR   R15,R15\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS\n*\nPRINT    EQU   *\n         L     R11,LINE#                GET CURRENT LINE NUMBER\n         CLI   CNTL,C' '                SPACE ONE LINE?\n         BNE   PT10                     IF NOT, BRANCH\n         C     R11,=F'53'               TIME FOR HEADERS?\n         BL    PT30                     IF NOT, BRANCH AROUND\n         B     PT20                     OTHERWISE, GO OUTPUT HEADERS\nPT10     EQU   *\n         C     R11,=F'52'               TIME FOR HEADERS?\n         BL    PT30                     IF NOT, BRANCH AROUND\nPT20     EQU   *\n         AP    PAGENO,=P'1'             INCREMENT PAGE NUMBER\n         MVC   PAGE#,PAGEFMT            GET EDIT FORMAT\n         ED    PAGE#,PAGENO             STORE IN HEADER\n         PUT   OUTFILE,HEADER1          WRITE OUT FIRST HEADER\n         PUT   OUTFILE,HEADER2          WRITE OUT SECOND HEADER\n         LA    R11,4                    INIT LINE NUMBER\n         MVI   CNTL,C'0'                FORCE EXTRA SPACE\nPT30     EQU   *\n         LA    R4,LINE                  POINT TO BEGINNING OF DATA\n         LA    R5,OUTREC                GET BEGINNING OF OUTPUT RECORD\nPT40     EQU   *\n         CLC   0(16,R4),=CL16' '        LOOK FOR END OF DATA\n         BE    PT50                     WHEN FOUND, BRANCH\n         LA    R4,1(R4)                 GO TO NEXT POSITION\n         B     PT40                     AND LOOP\nPT50     EQU   *\n         SR    R4,R5                    CALCULATE LENGTH OF LINE\n         STH   R4,OUTREC                STORE THE LENGTH\n         MVC   OUTREC+2(2),=X'0000'\n         PUT   OUTFILE,OUTREC           WRITE OUT RECORD\n         MVI   LINE,C' '                CLEAR PRINT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         A     R11,=F'1'                INCREMENT LINE NUMBER\n         CLI   CNTL,C' '                EXTRA SPACE?\n         BE    PT60                     IF NOT, BRANCH\n         A     R11,=F'1'                ADD ANOTHER LINE\nPT60     EQU   *\n         ST    R11,LINE#                AND STORE IT\n         MVI   CNTL,C' '                RESET SPACING CONTROL\n         BR    R10\n*\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nRECADDR  DS    F                        ADDRESS OF RECORD WITHIN BUFFER\nLINE#    DC    F'53'\nSAVEPTR  DC    F'0'\nDWORK    DC    D'0'\nWORK     DC    F'0'\nDAYSYEAR DC    P'365'\nCOUNT    DC    P'001'\nPAGENO   DC    P'00000'\nPAGEFMT  DC    X'402020202020'\nFSEQFMT  DC    X'602020202120'\nDECNUM   DS    CL8\nTYPE     DC    C'0'\nDATE     DS    CL5\nCHAR     DC    H'0'\nNULLCHK  DC    X'FFFFFFFFFFFFFFFF'\n*                                       MONTH DISPLACEMENT FROM 30 DAY\n         DS    0CL12                      (BACKWARD TABLE)\n         DC    P'1'                     DECEMBER\n         DC    P'0'                     NOVEMBER\n         DC    P'1'                     OCTOBER\n         DC    P'0'                     SEPTEMBER\n         DC    P'1'                     AUGUST\n         DC    P'1'                     JULY\n         DC    P'0'                     JUNE\n         DC    P'1'                     MAY\n         DC    P'0'                     APRIL\n         DC    P'1'                     MARCH\n         DC    P'-2'                    FEBRUARY\nMONTH    DC    P'1'                     JANUARY\n*\nOUTREC   DS    0CL125                   OUTPUT FILE RECORD\n         DC    X'005A'                    VARIABLE RECORD LENGTH\n         DC    X'0000'\nCNTL     DC    C' '                       PRINTER CONTROL CHARACTER\nLINE     DC    CL120' '                   MAIN OUTPUT LINE\n*\nLINE1    DS    0CL60\n         DC    C'NONVSAM ------- '\nDSNAME   DS    CL44\nLINE2    DC    C'HISTORY'\nLINE3A   DC    C'OWNER-IDENT-------(NULL)'\nLINE3B   DC    C'CREATION----------00.000'\nLINE4A   DC    C'RELEASE----------------2'\nLINE4B   DC    C'EXPIRATION--------00.000'\nLINE5    DC    C'VOLUMES'\nLINE6A   DC    C'VOLSER------------XXXXXX'\nLINE6B   DC    C'DEVTYPE------X''99999999'''\nLINE6C   DC    C'FSEQN------------------0'\nLINE7    DS    CL26\nLINE7A   DC    C'ASSOCIATIONS--------(NULL)'\nLINE7B   DC    C'ASSOCIATIONS              '\nLINE8    DS    0CL53\n         DC    C'GDG------'\nGDGNAME  DS    CL44\n*\nHEADER1  DS    0CL116\n         DC    X'0074'\n         DC    X'0000'\n         DC    C'1'\n         DC    C'IDCAMS  SYSTEM SERVICES'\n         DC    CL43' '\n         DC    C'TIME: '\nTIME     DC    X'2120207A20207A2020'\n         DC    CL7' '\nMM       DC    CL2' '\n         DC    C'/'\nDD       DC    CL2' '\n         DC    C'/'\nYY       DC    CL2' '\n         DC    CL5' '\n         DC    C'PAGE'\nPAGE#    DC    XL6'00'\nHEADER2  DS    0CL102\n         DC    X'0066'\n         DC    X'0000'\n         DC    C'-'\n         DC    CL29' '\n         DC    C'LISTING FROM CATALOG -- '\nCATNAME  DC    CL44' '\n*\nGETACB   ACB   AM=VSAM,CATALOG=NO,DDNAME=CATALOG,EXLST=ERROR,          X\n               MACRF=(KEY,NFX,NDF,SEQ,NCI,IN,NIS,NRM,NRS,NUB)\nERROR    EXLST AM=VSAM,EODAD=CLOSEIT\nGETRPL   RPL   ACB=GETACB,AM=VSAM,AREA=RECADDR,AREALEN=4,              X\n               OPTCD=(KEY,SEQ,ARD,FWD,SYN,NUP,LOC)\nOUTFILE  DCB   DDNAME=OUTFILE,DSORG=PS,RECFM=VBA,LRECL=125,            X\n               MACRF=(PM),BLKSIZE=6233\n*\n         PRINT NOGEN\nERROR01  EQU   *\n         WTO   'CATLIST01 OPEN FOR THE CATALOG FAILED',                X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR02  EQU   *\n         WTO   'CATLIST02 OPEN FOR THE OUTPUT FILE FAILED',            X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR03  EQU   *\n         WTO   'CATLIST03 GET MACRO FAILED',                           X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR04  EQU   *\n         WTO   'CATLIST05 CLOSE FOR CATALOG FAILED',                   X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR05  EQU   *\n         WTO   'CATLIST06 CLOSE FOR OUTPUT FILE FAILED',               X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\n         PRINT GEN\n         LTORG\n         PRINT NOGEN\n         EQUATE                         REGISTER EQUATES\n         IFGACB\n         PRINT GEN\n         END   CATLIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMDEX005": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xa7\\x00\\xa7\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 167, "newlines": 167, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 COMMAND PREPROCESSOR EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 CMD PREPROCESSOR EXIT 5                      *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *\n*       OF ALLOWING A SET OF COMMAND(S) TO BE PROTECTED BY           *\n*       PUTTING THEM IN A TABLE REFERENCED IN THE EXIT. THE          *\n*       EXIT WILL ONLY ALLOW PROTECTED COMMANDS WHICH ORIGINATE      *\n*       FROM A 'SUBSYSTEM ALLOCATABLE CONSOLE'                       *\n*       (OCCF, SCON & COMMAND).                                      *\n*                                                                    *\n*    ENTRY POINT = DLXXIT05                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0-R4  N/A                                                   *\n*       R5     ADDRESS OF THE CURRENT OPERAND                        *\n*       R6     INCREMENT VALUE OF 4                                  *\n*       R7     ADDRESS OF THE LAST OPERAND                           *\n*       R8-R10 N/A                                                   *\n*       R11    ADDRESS OF THE HCT                                    *\n*       R12    N/A                                                   *\n*       R13    ADDRESS OF THE HASPCOMM PCE                           *\n*       R14    RETURN ADDRESS                                        *\n*       R15    ENTRY ADDRESS                                         *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH NORMAL $WTO PROCESSING               *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n*    MVS MACROS USED:                                                *\n*        CVT, IEECUCM                                                *\n*                                                                    *\n*    CHANGE ACTIVITY:                                                *\n*        07/15/86  WRITTEN TO RUN UNDER JES2 VERSIONS                *\n*                  1.3.6 / 2.1.5.                              JWC.  *\n*        01/08/87  CHANGED TO INCLUDE '$TI' COMMANDS.          JWC.  *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nCMDEX005 $MODULE $BUFFER,                                              +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JOE,                    REQ'D BY $COMWORK              +\n               $MIT,                    REQ'D BY $MODULE               +\n               $PCE,                    HASP PROCESSOR CONTROL ELEMENT +\n               $COMWORK,                HASP CMD PCE WORK AREA MAPPING +\n               RESPA,                   REQ'D BY $COMWORK              +\n               RPL,                     REQ'D BY $BUFFER               +\n               CVT                      COMM VECTOR TABLE MAPPING\n         TITLE 'DELUXE JES2 COMMAND PREPROCESSOR EXIT '\n         SPACE 1\nDLXXIT05 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         USING HCT,R11                  ADDRESSABILITY TO HCT\n         USING PCE,R13                  ADDRESSABILITY TO COMMAND PCE\n         SLR   R15,R15                  CLEAR REG 15\n         LA    R3,CMDTAB                POINT TO COMMAND TABLE\n         LA    R4,COMMAND+1             POINT TO START OF COMMAND\nCMDSRCH  EQU   *\n         SR    R2,R2                    CLEAR FOR IC\n         IC    R2,10(R3)                GET MAX VERB LENGTH\n         SR    R1,R1                    CLEAR FOR IC\n         IC    R1,9(R3)                 GET MIN VERB LENGTH\n         BCTR  R1,0                     SO BXH CAN GO DOWN LOW\n         SR    R0,R0                    CLEAR R0 AND\n         BCTR  R0,0                         SET TO -1\nCMDSCAN  EQU   *\n         CLC   0(9,R3),=CL9' '          END OF PROTECTED CMD TABLE?\n         BE    CLASS00                  YES, CHECK CLASS CHANGE(MAYBE)\n         EX    R2,CLCCMD                PROTECTED COMMAND ENTERED?\n         BE    VALCONS                  YES, CHECK FOR VALID CONSOLE\n         BXH   R2,R0,CMDSCAN            NO, CHECK NEXT SMALLER SIZE\n         LA    R3,11(R3)                POINT TO NEXT PROTECTED COMMAND\n         B     CMDSRCH                  CHECK NEXT COMMAND\nCLCCMD   CLC   0(*-*,R4),0(R3)          PROTECTED COMMAND ENTERED?\nCLASS00  EQU   *\n         LA    R3,132                   MAX LENGTH OF COMMAND\n         CLC   BADOP1,0(R4)             TRYING TO CHANGE CLASS(MAYBE)?\n         BE    CLASS10                  YES, SCAN FOR ',C='\n         CLC   BADOP2,0(R4)             TRYING TO CHANGE CLASS(MAYBE)?\n         BNE   RETURN                   NO, RETURN\nCLASS10  EQU   *\n         CLC   SPACE,0(R4)              END OF COMMAND?\n         BE    RETURN                   YES, WE'RE DONE\n         CLC   CLASS,0(R4)              TRYING TO CHANGE CLASS?\n         BE    VALCONS                  YES, CHECK FOR VALID CONSOLE\n         LA    R4,1(R4)                 INCREMENT REG 4\n         BCT   R3,CLASS10               CONTINUE SCANNING\n         B     RETURN                   NOT TRYING TO CHANGE CLASS\nVALCONS  EQU   *\n         L     R2,CVTPTR                R2 - ADDRESS OF CVT\n         USING CVT,R2                   ESTABLISH ADDRESSABILITY TO CVT\n         L     R2,CVTCUCB               R2 - ADDRESS OF UCM BASE\n         USING UCM,R2                   ESTABLISH ADDRESSABILITY TO UCM\n         L     R3,UCMVEA                R3 - ADDR OF UCM DEVICE ENTRIES\n         USING UCMLIST,R3               ESTABLISH ADDRESSABILITY\nVALCON1  EQU   *\n         CLC   COMINCON,UCMID           ORIGINATING CONSOLE?\n         BNE   VALCON2                  NO, CHECK NEXT UCM DEVICE ENTRY\n         TM    UCMDISP2,UCMDISPK        SUBSYS CONSOLE (OCCF/SCON/CMD)?\n         BO    RETURN                   YES, ALLOW IT\n         LA    R15,12                   NO, ISSUE $HASP000 \"OK\"\n         B     RETURN                   RETURN\nVALCON2  EQU   *\n         A     R3,UCMVEZ                POINT TO NEXT UCM DEVICE ENTRY\n         C     R3,UCMVEL                HAVE WE CHECKED THEM ALL?\n         BNH   VALCON1                  NO, COMPARE NEXT CONSOLE ID\n         LA    R15,12                   YES, ISSUE $HASP000 \"OK\"\n         B     RETURN                   RETURN\nRETURN   EQU   *\n         $RETURN RC=(R15)               RETURN TO CALLER\n**********************************************************************\n*        JES2 - PROTECTED COMMAND TABLE\n**********************************************************************\nCMDTAB   EQU   *\n         DC    CL9'TBUFDEF  ',AL1(6,6)\n         DC    CL9'TCONDEF  ',AL1(6,6)\n         DC    CL9'TDEBUG   ',AL1(5,5)\n         DC    CL9'TESTBYTE ',AL1(7,7)\n         DC    CL9'TESTIME  ',AL1(6,6)\n         DC    CL9'TESTLNCT ',AL1(7,7)\n         DC    CL9'TESTPAGE ',AL1(7,7)\n         DC    CL9'TESTPUN  ',AL1(6,6)\n         DC    CL9'TJOBDEF  ',AL1(6,6)\n         DC    CL9'TJOBPRTY ',AL1(7,7)\n         DC    CL9'TMASDEF  ',AL1(6,6)\n         DC    CL9'TNJEDEF  ',AL1(6,6)\n         DC    CL9'TOUTCLASS',AL1(8,8)\n         DC    CL9'TOUTDEF  ',AL1(6,6)\n         DC    CL9'TOUTPRTY ',AL1(7,7)\n         DC    CL9'TPRINTDEF',AL1(8,8)\n         DC    CL9'TRECVOPTS',AL1(8,8)\n         DC    CL9'TSMFDEF  ',AL1(6,6)\n         DC    CL9'TSPOOLDEF',AL1(8,8)\n         DC    CL9'TTPDEF   ',AL1(5,5)\n         DC    CL9'TI       ',AL1(1,1)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\n         DC    CL9'         ',AL1(8,8)\nBADOP1   DC    C'TJ'\nBADOP2   DC    C'T'''\nCLASS    DC    C',C='\nSPACE    DC    C' '\n         LTORG\n***********************************************************************\n*        DSECT FOR UNIT CONTROL MODULE DEFINITION\n***********************************************************************\n         IEECUCM FORMAT=NEW\n         EJECT\nCMDEX005 CSECT\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMDEX255": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x80\\x00\\x80\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 128, "newlines": 128, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 COMMAND SCREEN USER EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 CMD SCREEN USER EXIT 255                     *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE WILL SET AUTHORIZATION     *\n*       FOR S XXXRN,N=PROCNAME COMMANDS THAT ARE                     *\n*       COMING FROM RN AND DIRECTED AT ADMIN TO ALLOW. THIS          *\n*       WILL BE DONE BY ANDING THE CMBFLAG FIELD WITH X'F0' WHICH    *\n*       WILL ALLOW ALL COMMANDS.  IN ALL OTHER CASES THE EXIT WILL   *\n*       SIMPLY RETURN AND ALLOW JES2 TO DO THE AUTHORITY CHECKING.   *\n*                                                                    *\n*    ENTRY POINT = DLXUX255                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0-3  N/A                                                    *\n*       R4    ADDRESS OF THE CMB                                     *\n*       R5-10 N/A                                                    *\n*       R11   ADDRESS OF THE JES2 HCT                                *\n*       R12   N/A                                                    *\n*       R13   N/A                                                    *\n*       R14   RETURN ADDRESS                                         *\n*       R15   ENTRY ADDRESS                                          *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH NORMAL $WTO PROCESSING               *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nCMDEX255 $MODULE $BUFFER,                                              +\n               $CAT,                    REQ'D BY HCT                   +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $CMB,                    CONSOLE MESSAGE BUFFER MAPPING +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D BY $CAT                  +\n               $JQE,                    REQ'D BY HCT                   +\n               $MIT,                    REQ'D BY $MODEND               +\n               $PCE,                    REQ'D BY HCT                   +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE JES2 COMMAND SCREEN USER EXIT '\n         SPACE 1\nDLXUX255 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         USING CMB,R4                   ADDRESSABILITY TO CMB\n         SLR   R15,R15\n         TM    CMBFLAG,CMBFLAGC         IS IT A COMMAND?\n         BNO   RETURN                   NO QUIT\n         CLC   CMBFMNOD,=H'1'           IS IT ORIGINATING AT ADMIN?\n         BE    RETURN                   ALLOW IT\n         CLC   CMBFMNOD,=H'10'          IS IT ORIGINATING AT ELOIGNE?\n         BE    RETURN                   ALLOW IT\n         CLC   CMBTONOD,=H'1'           IS IT DESTINED FOR ADMIN?\n         BE    NOTADM1                  CONTINUE CHECKING\n         CLC   CMBTONOD,=H'10'          IS IT DESTINED FOR ELOIGNE?\n         BE    NOTADM1                  CONTINUE CHECKING\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\nNOTADM1  EQU   *\n         CLC   CMBMSG(2),=CL2'S '       IS IT A START COMMAND?\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\n         CLI   CMBMSG+5,C'R'            IS IT A REGIONAL STC?\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\n         TM    CMBMSG+6,X'F0'           IS IT NUMERIC?\n         BNO   RETURN                   GREATER THAN 8; LET JES DO IT\n         CLC   CMBMSG+7(3),=CL3',N='    IS IT THE CORRECT FORMAT?\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\nCHKCMD11 EQU   *\n         CLI   CMBFMNOD+1,X'0B'         IS IT NODE 11 (REG1)?\n         BNE   CHKCMD12                 CHECK NEXT NODE\n         CLI   CMBMSG+6,C'1'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES OK TO ISSUE COMMAND\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCHKCMD12 EQU   *\n         CLI   CMBFMNOD+1,X'0C'         IS IT NODE 12 (REG2)?\n         BNE   CHKCMD13                 CHECK NEXT NODE\n         CLI   CMBMSG+6,C'2'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES OK TO ISSUE COMMAND\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCHKCMD13 EQU   *\n         CLI   CMBFMNOD+1,X'0D'         IS IT NODE 13 (REG3)?\n         BNE   CHKCMD14                 CHECK NEXT NODE\n         CLI   CMBMSG+6,C'3'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES OK TO ISSUE COMMAND\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCHKCMD14 EQU   *\n         CLI   CMBFMNOD+1,X'0E'         IS IT NODE 14 (REG4)?\n         BNE   CHKCMD15                 CHECK NEXT NODE\n         CLI   CMBMSG+6,C'4'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES OK TO ISSUE COMMAND\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCHKCMD15 EQU   *\n         CLI   CMBFMNOD+1,X'0F'         IS IT NODE 15 (REG5)?\n         BNE   CHKCMD16                 CHECK NEXT NODE\n         CLI   CMBMSG+6,C'5'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES OK TO ISSUE COMMAND\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCHKCMD16 EQU   *\n         CLI   CMBFMNOD+1,X'10'         IS IT NODE 16 (REG6)?\n         BNE   CHKCMD17                 CHECK NEXT NODE\n         CLI   CMBMSG+6,C'6'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES OK TO ISSUE COMMAND\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCHKCMD17 EQU   *\n         CLI   CMBFMNOD+1,X'11'         IS IT NODE 17 (REG7)?\n         BNE   CHKCMD18                 CHECK NEXT NODE\n         CLI   CMBMSG+6,C'7'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES OK TO ISSUE COMMAND\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCHKCMD18 EQU   *\n         CLI   CMBFMNOD+1,X'12'         IS IT NODE 18 (REG8)?\n         BNE   RETURN                   LET JES2 HANDLE IT\n         CLI   CMBMSG+6,C'8'            IS THIS FOR THEMSELVES?\n         BNE   RETURN                   JES2 WILL NIX IT\nOKIT     EQU   *\n         NI    CMBFLAG,X'F0'            SAY IT IS OK TO ISSUE COMMAND\nRETURN   EQU   *\n         $RETURN RC=(R15)               RETURN TO CALLER\n         SPACE 1\n         LTORG\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMPAPDX": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xc8\\x00\\xc8\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 200, "newlines": 200, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'CMPAPDX'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = CMPAPDX                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = COMPARE THE APPLY CHECK LISTING      *\n*                TO APPENDICES B, C, AND D IN THE PUT DOCUMENTATION.  *\n*                                                                     *\n*             FUNCTION =                                              *\n*                COMPARES THE APPLY CHECK LISTING TO APPENDICES       *\n*                B, C, AND D IN THE PUT DOCUMENTATION AND             *\n*                LISTS ANY APPLIED OR SUPERCEDED SYSMODS WHICH        *\n*                ARE FOUND IN THE APPENDICES.                         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   OPEN THE PUT DOCUMENTATION FILE                   *\n*                   READ ALL THE APPENDIX B, C, AND D RECORDS         *\n*                     STORING THEM IN A GETMAIN'ED AREA               *\n*                   CLOSE THE PUT DOCUMENTATION FILE                  *\n*                   OPEN THE FILE WITH THE APPLY CHECK LISTING        *\n*                   OPEN THE OUTPUT FILE                              *\n*                   READ AN APPLY CHECK LISTING RECORD                *\n*                   IF NOT AN APPLIED OR SUPERCEDED SYSMOD, IGNORE    *\n*                   POINT TO THE START OF THE GETMAIN'ED AREA         *\n*                   COMPARE SYSMOD WITH THOSE LISTED IN APPENDICES    *\n*                     B, C, AND D                                     *\n*                   IF MATCH FOUND, PUT INTO OUTPUT FILE              *\n*                   CONTINUE READING APPLY CHECK LISTING UNTIL ALL    *\n*                     ALL SYSMODS HAVE BEEN CHECKED                   *\n*                   CLOSE FILES                                       *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 4  = LINKAGE & WORK REGISTERS     *\n*                    REGISTERS 5 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO CMPAPDX    *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, OPEN, GET, PUT, CLOSE                          *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                01/19/84  WRITTEN.      BC.                          *\n*                03/26/84  MODIFIED TO READ THE APPENDICES INTO       *\n*                          A GETMAIN'ED AREA THEREBY CUTTING          *\n*                          DOWN ON I/O'S.      BC.                    *\n*                04/17/84  DOUBLED THE SIZE OF THE GETMAIN'ED         *\n*                          AREA.     BC.                              *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*    WHEN RUNNING THE APPLY CHECK, MAKE SURE THERE IS A               *\n*    '/*ROUTE PRINT FETCH' CARD IN THE JCL.  USING IOF,               *\n*    'SNAP' THE SMPRPT OUTPUT TO A DISK DATA SET.  USE                *\n*    THAT DATA SET AS THE 'APCK' INPUT FOR THE COMPARE                *\n*    STEP BELOW.                                                      *\n*                                                                     *\n*    //CMPAPDX  JOB (GEE1,0104),'MIKE OR BARB',CLASS=S,MSGCLASS=A,    *\n*    //     USER=SYSPGM,PASSWORD=????????                             *\n*    /*ROUTE PRINT FETCH                                              *\n*    //DOCSTEP  EXEC PGM=LOADER,                                      *\n*    //     PARM='NAME=DOCPRINT,NOPRINT,NOCALL'                       *\n*    //SYSPRINT DD SYSOUT=*                                           *\n*    //SYSLIN DD DSN=PUTTAP,UNIT=TAPE62,LABEL=(9,NL,EXPDT=98000),     *\n*    //    VOL=SER=T8307,DCB=(RECFM=FB,LRECL=80,BLKSIZE=7200),        *\n*    //    DISP=(OLD,PASS)                                            *\n*    //SYSUT1 DD DSN=DOCINPUT,UNIT=TAPE62,LABEL=(10,NL,EXPDT=98000),  *\n*    //    VOL=SER=T8307,DCB=BLKSIZE=7200,                            *\n*    //    DISP=(OLD,KEEP)                                            *\n*    //SYSUT2 DD DSN=&&PUTDOC,DCB=(RECFM=FBM,LRECL=80,BLKSIZE=6160),  *\n*    //        SPACE=(CYL,(1,1)),UNIT=SYSDA,DISP=(,PASS)              *\n*    //SYSIN DD *,DCB=BLKSIZE=80                                      *\n*    PRINT SREL=Z038,TYPE=SING                                        *\n*    /*                                                               *\n*    //CMPSTEP EXEC PGM=CMPAPDX                                       *\n*    //PUTDOC DD DSN=&&PUTDOC,DISP=(OLD,DELETE)                       *\n*    //APCK   DD DSN=T56714.BARB.APCK,DISP=SHR                        *\n*    //REPORT DD SYSOUT=*                                             *\n*                                                                     *\n***********************************************************************\nCMPAPDX CSECT\n         SAVE  (14,12),,CMPAPDX_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING CMPAPDX,R12              TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         GETMAIN R,LV=240000            GET DYNAMIC WORK AREA\n         ST    R1,APDXPTR               PRESERVE PTR TO WORK AREA\nLODFILE  EQU   *\n         OPEN  (INFILE2,INPUT)          OPEN THE PUT DOCUMENT FILE\n         L     R5,APDXPTR               GET ADDRESS OF APPENDIX BUFFER\nLF10     EQU   *\n         GET   INFILE2,INREC2           READ A PUT DOCUMENT RECORD\n         CLI   APDXFLAG,C'B'            APPENDICES FOUND?\n         BE    LF20                     IF SO, CONTINUE\n         CLC   INREC2+32(10),=CL10'APPENDIX B' LOOK FOR APPENDIX B\n         BNE   LF10\n         MVI   APDXFLAG,C'B'            IF FOUND, SET FLAG\nLF20     EQU   *\n         MVC   0(60,R5),INREC2          STORE THE RECORD\n         LA    R5,60(R5)                GO TO NEXT AVAILABLE SPACE\n         CLC   INREC2+25(L'ENDPAGE),ENDPAGE  END OF APPENDICES?\n         BNE   LF10                     IF NOT, LOOP\n         CLOSE INFILE2\nOPENIT   EQU   *\n         OPEN  (INFILE1,INPUT)          OPEN THE APPLY CHECK LIST\n         OPEN  (OUTFILE,OUTPUT)         OPEN THE OUTPUT FILE\nGETLOOP  EQU   *\n         GET   INFILE1,INREC            READ AN APPLY CHECK RECORD\n         CLC   INREC1+1(7),=CL7'ELEMENT'   LOOK FOR END OF SYSMODS\n         BE    CLOSEIT                  IF FOUND, BRANCH OUT OF LOOP\n         CLC   INREC1+10(7),=CL7'APPLIED' APPLIED SYSMOD?\n         BE    GL10                       IF SO, CHECK FOR MATCH\n         CLC   INREC1+10(4),=CL4'SUPD'    SUPERCEDED SYSMOD?\n         BNE   GETLOOP                    IF NOT, SKIP IT\nGL10     EQU   *\n         L     R5,APDXPTR               POINT TO START OF APPENDICES\n         MVI   APDXFLAG,C'B'            RESET APPENDIX FLAG\nSEARCH   EQU   *\n         CLC   32(10,R5),=CL10'APPENDIX C' LOOK FOR APPENDIX C\n         BNE   SRCH1                    IF NOT FOUND, BRANCH\n         MVI   APDXFLAG,C'C'            IF FOUND, SET FLAG\nSRCH1    EQU   *\n         CLC   32(10,R5),=CL10'APPENDIX D' LOOK FOR APPENDIX D\n         BNE   SRCH2                    IF NOT FOUND, BRANCH\n         MVI   APDXFLAG,C'D'            IF FOUND, SET FLAG\nSRCH2    EQU   *\n         CLC   25(L'ENDPAGE,R5),ENDPAGE  END OF APPENDICES?\n         BE    ENDSRCH                  IF SO, END LOOP\n         CLC   3(7,R5),INREC1+1         MATCH ON PTF NUMBER?\n         BNE   SRCH4                    IF NOT, BRANCH\n         MVC   OUTREC+1(1),APDXFLAG     STORE APPENDIX LETTER\n         MVI   OUTREC+3,C'-'\n         MVC   OUTREC+5(59),1(R5)       STORE LINE\n         PUT   OUTFILE,OUTREC           WRITE INTO OUTPUT FILE\n         CLI   APDXFLAG,C'D'            WORKING ON APPENDIX D?\n         BNE   SRCH4                    IF NOT, LOOP\nSRCH3    EQU   *\n         LA    R5,60(R5)                GO TO NEXT RECORD\n         CLC   3(6,R5),=CL6'PF-PTF'     COLUMN HEADER?\n         BE    SRCH3                    IF SO, TRY THE NEXT RECORD\n         CLC   0(4,R5),=CL4'PAGE'       PAGE NUMBER LINE?\n         BE    SRCH3                    IF SO, TRY THE NEXT RECORD\n         CLC   3(7,R5),=CL7' '          ANYTHING ELSE THERE?\n         BNE   SEARCH                   IF SO, GO BACK TO COMPARE\n         CLC   25(L'ENDPAGE,R5),ENDPAGE  END OF APPENDICES?\n         BE    ENDSRCH                  IF SO, END LOOP\n         CLC   19(7,R5),=CL7' '         SOMETHING IN PE-APAR?\n         BE    SRCH3                    IF NOT, TRY NEXT RECORD\n         MVI   OUTREC,C' '\n         MVI   OUTREC+1,C' '\n         MVI   OUTREC+3,C' '\n         MVC   OUTREC+5(59),1(R5)\n         PUT   OUTFILE,OUTREC           WRITE INTO OUTPUT FILE ALSO\n         MVI   OUTREC,C'0'\n         B     SRCH3                    GO BACK FOR ANOTHER\nSRCH4    EQU   *\n         LA    R5,60(R5)                GO TO NEXT RECORD\n         B     SEARCH\nENDSRCH  EQU   *\n         B     GETLOOP\nCLOSEIT  EQU   *\n         CLOSE INFILE1                  CLOSE APPLY CHECK FILE\n         CLOSE OUTFILE                  CLOSE OUTPUT FILE\n         FREEMAIN R,LV=240000,A=APDXPTR\nRETURN0  EQU   *\n         SLR   R15,R15\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS\n*\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nINREC    DC    F'0'\nINREC1   DC    255C' '\nINREC2   DC    80C' '\nOUTREC   DC    CL80'0'\nAPDXFLAG DC    C'0'\nAPDXPTR  DC    F'0'\nENDPAGE  DC    C'PUT INSTALLATION OPTIONS'\nINFILE1  DCB   DDNAME=APCK,DSORG=PS,RECFM=VBA,LRECL=255,               X\n               MACRF=(GM),EODAD=CLOSEIT\nINFILE2  DCB   DDNAME=PUTDOC,DSORG=PS,RECFM=FBM,LRECL=80,              X\n               MACRF=(GM),EODAD=GETLOOP\nOUTFILE  DCB   DDNAME=REPORT,DSORG=PS,RECFM=FBA,LRECL=80,              X\n               MACRF=(PM)\n         PRINT NOGEN\n         PRINT GEN\n         LTORG\n         PRINT NOGEN\n         EQUATE                         REGISTER EQUATES\n         PRINT GEN\n         END   CMPAPDX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMMAND": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\xa3\\x01\\xa3\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 419, "newlines": 419, "modlines": 0, "user": "DELUXE"}, "text": "*          DATA SET CBT1081    AT LEVEL 001 AS OF 05/28/80\nCOMMAND  TITLE 'C O M M A N D  --  Issue System Operator Commands V2.0'\n***********************************************************************\n*                                                                     *\n*                           C O M M A N D                             *\n*                                                                     *\n*                   Issue System Operator Commands                    *\n*                                                                     *\n*                                                                     *\n*     This program accepts system or JES operator commands as         *\n*     input and executes them using SVC 34. It must be APF            *\n*     authorized.                                                     *\n*                                                                     *\n*     COMMAND can operate in one of three modes:                      *\n*                                                                     *\n*     1) Batch or CALLed program                                      *\n*        In this mode COMMAND accepts input as either 80-byte         *\n*        card images from SYSIN or a single command from the PARM     *\n*        field. The response to the operator command will             *\n*        appear on all operator consoles. For example:                *\n*                                                                     *\n*           //STEP1    EXEC PGM=COMMAND,PARM='VARY 017,ONLINE'        *\n*                                                                     *\n*           - or -                                                    *\n*                                                                     *\n*           //STEP1    EXEC PGM=COMMAND                               *\n*           //SYSIN    DD *                                           *\n*           VARY 017,ONLINE                                           *\n*           /*                                                        *\n*                                                                     *\n*     2) TSO Command Processor                                        *\n*        In this mode COMMAND expects to find the operator command    *\n*        directly following on the TSO input line. The response to    *\n*        OS commands will then be displayed on the TSO terminal.      *\n*        Response to JES commands will appear on all consoles.        *\n*        For example:                                                 *\n*                                                                     *\n*           COMMAND D T         <--- (Response will appear on CRT)    *\n*                                                                     *\n*     3) Callable subroutine                                          *\n*        In this mode COMMAND accepts input according to standard     *\n*        OS linkage conventions. In addition to the command itself,   *\n*        a second parameter may be passed which contains the          *\n*        console number where you wish the response to appear.        *\n*        (The SVC 34 will also assume the authority of that           *\n*        console.) For example:                                       *\n*                                                                     *\n*           LA       R1,CMDADDR                                       *\n*           LA       R15,=V(COMMAND)                                  *\n*           BALR     R14,R15                                          *\n*                                                                     *\n*           CMDADDR  DC    A(OPERCMD)                                 *\n*           CNSADDR  DC    XL1'80',AL3(CONSOLE)                       *\n*           OPERCMD  DC    H(3),CL3'D T'                              *\n*           CONSOLE  DC    F'5'                                       *\n*                                                                     *\n*        This would make it appear as if 'D T' were issued from       *\n*        console 5. (This method is used by program 'SPY')            *\n*                                                                     *\n*     Just prior to issuing a command via SVC 34, COMMAND will        *\n*     issue a WTO of the form                                         *\n*                                                                     *\n*        SCECMD01 - userid  - VARY 017,ONLINE                         *\n*                                                                     *\n*     This will appear on the operator's console and in SYSLOG.       *\n*                                                                     *\n*     COMMAND may be used to issue replies to WTORs. Since the        *\n*     reply may be sensitive (for example, a password) COMMAND        *\n*     will supress it whenever a REPLY is issued.                     *\n*                                                                     *\n*     Author:                                                         *\n*       The original version of COMMAND was written by Mark Sorkin.   *\n*       The current version has been heavily modified at SCE.         *\n*       Questions and comments may be sent to                         *\n*                                                                     *\n*          Steve Langley                                              *\n*          Southern California Edison                                 *\n*          P.O. Box 800                                               *\n*          Rosemead, Calif. 91770                                     *\n*          1-213-572-3435                                             *\n*                                                                     *\n***********************************************************************\n         EJECT\nCOMMAND  CSECT\n         SPACE 3\nR0       EQU   0                  register 0\nR1       EQU   1                  register 1\nR2       EQU   2                  work register\nR3       EQU   3                  work register\nR4       EQU   4                  work register\nR5       EQU   5                  WORK register\nR10      EQU   10                 parameter list address register\nR11      EQU   11                 subroutine linkage register\nR12      EQU   12                 base register\nR13      EQU   13                 save area address register\nR14      EQU   14                 register 14\nR15      EQU   15                 register 15\n         EJECT\n         SAVE  (14,12)            save caller's registers\n         LR    R12,R15            establish\n         USING COMMAND,R12        addressability\n         LA    R3,SAVEAREA        get our savearea address\n         ST    R13,SAVEAREA+4     establish back\n         ST    R3,8(R13)          and forward savearea pointers\n         LR    R13,R3             establish our savearea address\n         LR    R10,R1             save parameter register\n         SPACE 2\n*   BEGINNING OF RACF CHECKING\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n*\n*  IF USER HAS SPECIAL ATTRIBUTE, EXIT WITHOUT FURTHER CHECKING\n*\n         L     R2,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2\n         USING ASXB,R2                 TELL ASSEMBLER\n         L     R2,ASXBSENV             GET ADDRESS OF ACEE\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BO    ENDRACF                 IF NOT, CHECK FURTHER\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         RACHECK ENTITY=PROGNAME,CLASS='APPL'\n         LTR   R15,R15\n         BZ    ENDRACF\n         ABEND X'913',,STEP             ABEND USER\nENDRACF  EQU   *\n*   END OF RACF CHECKING\n         SPACE 2\n         LR    R1,R10             restore parameter register\n         L     R2,CVTPTR          R2 = addr of CVT\n         USING CVT,R2\n         L     R3,CVTTCBP         R3 = addr of addr of our TCB\n         L     R4,8(R3)           R4 = addr of our TCB\n         USING ASCB,R4\n         MVC   ASID,ASCBASID      save our ASID\n         DROP  R4\n         L     R3,0(R3)           R3 = addr of our TCB\n         USING TCB,R3\n         L     R3,TCBTIO          R3 = addr of TIOT\n         DROP  R3\n         USING TIOT1,R3\n         MVC   JOBNAME(8),TIOCNJOB save our jobname\n         SPACE 3\nINITDONE DS    0H                 check out input parm\n         TM    0(R10),X'80'       is first the only parm?\n         BO    ONEPARM            yes; only parm\n         TM    4(R10),X'80'       is second the last parm?\n         BO    TWOPARMS           yes; two parms (called with CNxx)\n***********************************************************************\n*                                                                     *\n*     A X'80' was not found in the high order byte of the first       *\n*     two parms, so we can assume command is being called as a CP.    *\n*     If the command being issued is not a JES command then           *\n*     place our ASID into the R0 mask and continue. If it is a        *\n*     JES command, simply issue the command (Mode 1).                 *\n*                                                                     *\n***********************************************************************\n         XR    R2,R2              clear R2\n         LH    R2,ASID            R2 = ASID of caller\n         O     R2,=XL4'00008000'  tell SVC34 its an ASID\n         ST    R2,R0MASK          and override the R0 mask\n         L     R3,0(R10)          R3 = addr of input line\n         LA    R4,4(R3)           R4 = addr of first char of input\n         AH    R4,2(R3)           R4 = addr of first char past command\n         LH    R2,0(R3)           R2 = total length of string\n         SH    R2,2(R3)           R2 = length of oper cmd portion\n         BCTR  R2,0               R2 = R2 - 1 for EX MVC\n         EX    R2,MOVE1           move cmd into card\n         CLI   CARD,C'$'          is this a JES2 cmd?\n         BNE   DOSVC34            no;  go do it\n         XC    R0MASK(4),R0MASK   yes; don't try to get back reply\n         B     DOSVC34\n***********************************************************************\n*                                                                     *\n*     X'80' was found in the high order byte of the second parm,      *\n*     so we have been called as a subroutine (Mode 3). The second     *\n*     parm contains the console ID where the command is to 'come      *\n*     from', so use that for the R0 mask.                             *\n*                                                                     *\n***********************************************************************\nTWOPARMS L     R3,4(R10)          R3 = addr of R0 mask for SVC34\n         MVC   R0MASK(4),0(R3)    save R0 mask for SVC34\n***********************************************************************\n*                                                                     *\n*     Only one parm was passed, so we are being called in mode 1.     *\n*     Just issue the command from the parm string.                    *\n*                                                                     *\n***********************************************************************\nONEPARM  L     R10,0(R10)         get parameter address\n         LH    R3,0(R10)          get parameter text length\n         LTR   R3,R3              is parameter text present?\n         BZ    USESYSIN           no - go get commands from SYSIN\n         BCTR  R3,R0              decrement R3 for use in execute\n         EX    R3,MOVE            execute MVC\n         LA    R11,EOJ            get address for return from SVC34\n         B     SUBSYS                  ISSUE CMD FROM SUBSYS CONSOLE?\nDOSVC34  LA    R11,EOJ            get address for return from SVC34\n         B     SVC34              go issue command\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*     No parm field found, so look at SYSIN for input                 *\n*                                                                     *\n***********************************************************************\nUSESYSIN OPEN  (SYSIN,INPUT)      open SYSIN\nGETSYSIN GET   SYSIN,CARD         get a SYSIN record into SVC34 list\n         MVC   CARD+72(8),CARD+80 blank out sequence field in 73-80\n         CLI   CARD,C'*'          is this a comment?\n         BE    GETSYSIN           yes;go get another card\n         LA    R11,GETSYSIN       get address for return from SVC34\n         B     SUBSYS                  ISSUE CMD FROM SUBSYS CONSOLE?\n         SPACE 3\nEODSYSIN CLOSE (SYSIN)            close SYSIN\n         SPACE 3\nEOJ      L     R13,SAVEAREA+4     get address of caller's savearea\n         RETURN (14,12),RC=0      return to caller\n         EJECT\n***********************************************************************\n*        CHECK TO SEE IF COMMAND SHOULD BE ISSUED FROM SUBSYS CONSOLE *\n***********************************************************************\nSUBSYS   EQU   *\n         LA    R2,CARD                 R2 - INDEX THROUGH CARD\n         LA    R3,68                   R3 - MAXIMUM LENGTH OF CARD\nSUBSYS10 EQU   *\n         CLC   0(4,R2),=CL4'/SUB'      ISSUE CMD FROM SUBSYS CONSOLE?\n         BE    SUBSYS20                YES, GO FIND CONSOLE ID\n         LA    R2,1(R2)                NO, INCREMENT R2\n         BCT   R3,SUBSYS10                 AND CONTINUE CHECKING\n         B     SUBSYS90                RETURN\nSUBSYS20 EQU   *\n         MVC   0(4,R2),=CL4' '         REMOVE '/SUB' FROM THE COMMAND\n         L     R2,CVTPTR               R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R2,CVTCUCB              R2 - ADDRESS OF UCM BASE\n         USING UCM,R2                  ESTABLISH ADDRESSABILITY TO UCM\n         L     R3,UCMVEA               R3 - ADDR OF UCM DEVICE ENTRIES\n         USING UCMLIST,R3              ESTABLISH ADDRESSABILITY\nSUBSYS30 EQU   *\n         TM    UCMATR,UCMUF            ACTIVE CONSOLE?\n         BNO   SUBSYS40                NO, EXTRACT CONSOLE ID\n         A     R3,UCMVEZ               POINT TO NEXT UCM DEVICE ENTRY\n         C     R3,UCMVEL               HAVE WE CHECKED THEM ALL?\n         BNH   SUBSYS30                NO, CHECK NEXT DEVICE ENTRY\n         ABEND 999,DUMP                WHAT NO CONSOLES AVAILABLE?\nSUBSYS40 EQU   *\n         SR    R2,R2                   CLEAR R2\n         ICM   R2,B'0001',UCMID        EXTRACT SUBSYS CONSOLE ID\n         ST    R2,R0MASK               SET R0 MASK FOR SVC34\n         MVC   SAVSTS,UCMSTS           SAVE UCMSTS\n         MVC   SAVAUTHA,UCMAUTHA       SAVE UCMAUTHA\n         MVC   SAVDISP1,UCMDISP1       SAVE UCMDISP1\n         MVC   SAVDISP2,UCMDISP2       SAVE UCMDISP2\n         MODESET KEY=ZERO,MODE=SUP     INDICATE PSW KEY(0), SUPERVISOR\nSUBSYS50 EQU   *\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=COND,REGS=USE,                 +\n               RELATED=(UCM,COMMAND(SUBSYS65))\n*                                      LOCAL LOCK NEEDED TO OBTAIN CMS\n         C     R15,FULL08              LOCK OBTAINED?\n         BE    SUBSYS50                NO, ALREADY HELD, TRY AGAIN\n         BH    EOJ                     NO, LEVEL ERROR, QUIT\nSUBSYS55 EQU   *\n         SETLOCK OBTAIN,TYPE=CMS,MODE=COND,REGS=USE,                   +\n               RELATED=(UCM,COMMAND(SUBSYS60))\n*                                      CMS LOCK NEEDED TO UPDATE UCM\n         C     R15,FULL08              LOCK OBTAINED?\n         BE    SUBSYS55                NO, ALREADY HELD, TRY AGAIN\n         BH    EOJ                     NO, LEVEL ERROR, QUIT\n         OI    UCMAUTHA,UCMAUTH1+UCMAUTH2+UCMAUTH3    CMD GROUPS 1-3\n         OI    UCMDISP1,UCMDISPE       MARK FULL I/O CAPABILITY\n         OI    UCMDISP2,UCMDISPK+UCMDISPL+UCMDISPM   SUBSYS+PSEUDO MAST\nSUBSYS60 EQU   *\n         SETLOCK RELEASE,TYPE=CMS,REGS=USE,                            +\n               RELATED=(UCM,COMMAND(SUBSYS55))\n*                                      RELEASE THE CMS LOCK\nSUBSYS65 EQU   *\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          +\n               RELATED=(UCM,COMMAND(SUBSYS50))\n*                                      RELEASE THE LOCAL LOCK\n         MODESET KEY=NZERO,MODE=PROB   GO BACK TO USER KEY, PROBLEM\n         LR    R2,R11                  SAVE RETURN ADDRESS\n         LR    R5,R3                   SAVE UCM ADDRESS\n         BAL   R11,SVC34               GO ISSUE COMMAND\n         STIMER WAIT,DINTVL=ONESEC     WAIT FOR 02 SECONDS\n         LR    R3,R5                   RESTORE UCM ADDRESS\n         MODESET KEY=ZERO,MODE=SUP     INDICATE PSW KEY(0), SUPERVISOR\nSUBSYS70 EQU   *\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=COND,REGS=USE,                 +\n               RELATED=(UCM,COMMAND(SUBSYS85))\n*                                      LOCAL LOCK NEEDED TO OBTAIN CMS\n         C     R15,FULL08              LOCK OBTAINED?\n         BE    SUBSYS70                NO, ALREADY HELD, TRY AGAIN\n         BH    EOJ                     NO, LEVEL ERROR, QUIT\nSUBSYS75 EQU   *\n         SETLOCK OBTAIN,TYPE=CMS,MODE=COND,REGS=USE,                   +\n               RELATED=(UCM,COMMAND(SUBSYS80))\n*                                      CMS LOCK NEEDED TO UPDATE UCM\n         C     R15,FULL08              LOCK OBTAINED?\n         BE    SUBSYS75                NO, ALREADY HELD, TRY AGAIN\n         BH    EOJ                     NO, LEVEL ERROR, QUIT\n         MVC   UCMSTS,SAVSTS           RESTORE UCMATR\n         MVC   UCMAUTHA,SAVAUTHA       RESTORE UCMAUTHA\n         MVC   UCMDISP1,SAVDISP1       RESTORE UCMDISP1\n         MVC   UCMDISP2,SAVDISP2       RESTORE UCMDISP2\nSUBSYS80 EQU   *\n         SETLOCK RELEASE,TYPE=CMS,REGS=USE,                            +\n               RELATED=(UCM,COMMAND(SUBSYS75))\n*                                      RELEASE THE CMS LOCK\nSUBSYS85 EQU   *\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                          +\n               RELATED=(UCM,COMMAND(SUBSYS70))\n*                                      RELEASE THE LOCAL LOCK\n         MODESET KEY=NZERO,MODE=PROB   GO BACK TO USER KEY, PROBLEM\n         BR    R2                      RETURN\nSUBSYS90 EQU   *\n         B     SVC34                   GO ISSUE COMMAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*     This routine actually issues the SVC 34. It either returns      *\n*     to the SYSIN-read loop or EOJ depending on the value of R11     *\n*                                                                     *\n***********************************************************************\nSVC34    MVC   WTOTEXT(100),CARD  move command text into WTO list\n         CLI   WTOTEXT,C'r'       is this a lower case reply?\n         BE    REPLY              no; go on\n         CLI   WTOTEXT,C'R'       is this an upper case reply?\n         BE    REPLY              no; go on\n         CLI   WTOTEXT,X'F0'      start with a number?\n         BL    NOTREPLY           no; can't be a reply\nREPLY    MVC   WTOTEXT(100),=CL100'Reply Suppressed by ''COMMAND'''\nNOTREPLY LA    R3,WTOTEXT+L'WTOTEXT-1 point to end of text\n         LA    R4,WTOTEXT         point to beginning of text\n         SPACE\nFINDTEXT DS    0H                 find last text character\n         CR    R3,R4              all blank?\n         BL    SVC34END           yes - ignore it\n         CLI   0(R3),C' '         blank character?\n         BNE   GOTTEXT            no - found end of text\n         BCT   R3,FINDTEXT        keep on looking\n         SPACE\nGOTTEXT  DS    0H                 build parameter list lengths\n         MVC   WTOUSER(8),JOBNAME save job name in message\n         SR    R3,R4              compute length of\n         LA    R3,5(R3)           text and list prefix\n         STH   R3,CMDLIST         set SVC 34 list length\n         LA    R3,L'WTOID(R3)     add WTO id length\n         LA    R3,L'WTOUSER(R3)   add WTO id length\n         STH   R3,WTOLEN          set WTO list length\n         MODESET KEY=ZERO         indicate key=zero\n*        WTO   MF=(E,WTOLIST)     echo command to operator via WTO\n         L     R0,R0MASK          load R0 for SVC34 (probably zero)\n         LA    R1,CMDLIST         get address of SVC 34 list\n         SVC   34                 issue SVC 34 to process command\n         MODESET KEY=NZERO        go back to user key\n         SPACE\nSVC34END DS    0H                 end of command routine\n         BR    R11                return to mainline\n         EJECT\nSAVEAREA DC    18F'0'             our savearea\nR0MASK   DC    A(0)               R0 mask for SVC34\nJOBNAME  DC    CL8' '             our jobname\nASID     DC    H'00'              our ASID\n         SPACE\nPROGNAME DC    CL8'COMMAND'\nWTOLIST  DS    0F                 WTO list\nWTOLEN   DC    AL2(*-*,0)         text length & MCS flags\nWTOID    DC    C'SCECMD01 - '     text identifier\nWTOUSER  DC    C'XXXXXXXX - '     caller's jobname\nWTOTEXT  DC    CL100' '           text passed to command processor\n         SPACE\n         CNOP  4,8                align to middle of double word\nCMDLIST  DC    AL2(*-*,0)         SVC 34 list\nCARD     DC    CL101' '           command text\nFULL08   DC    F'08'                   FULLWORD CONSTANT, VALUE X'08'\nONESEC   DC    CL8'00000100'           02 SEC TIME INTERVAL\n         SPACE\n         DS    0F\nSAVSTS   DC    XL1'00'            SAVE\nSAVAUTHA DC    XL1'00'                 INFO\nSAVDISP1 DC    XL1'00'                      FROM\nSAVDISP2 DC    XL1'00'                           UCM\n         SPACE 3\nMOVE     MVC   CARD(*-*),2(R10)   move parm text into SVC 34 list\nMOVE1    MVC   CARD(*-*),0(R4)    move parm text into SVC 34 list\n         SPACE 3\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,     *\n               EODAD=EODSYSIN\n         SPACE 3\n         LTORG                    begin literal pool\n         EJECT\n***********************************************************************\n*                                                                     *\n*                System Control Block Mapping DSECTs                  *\n*                                                                     *\n*      All these macros can be found in the 'SYS1.AMODGEN' maclib     *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=YES Communications Vector Table\n         SPACE 2\n         DSECT\n         IEFTIOT1                 Task I/O Table\n         SPACE 2\n         IEECUCM FORMAT=NEW            UNIT CONTROL MODULE\n         SPACE 2\n         IHAPSA                        PREFIXED SAVE AREA\n         SPACE 2\n         IHAASCB                  Address Space Control Block\n         SPACE 2\n         IHAASXB\n         SPACE 2\n         IHAACEE\n         SPACE 2\n         IKJTCB                   Task Control Block\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DLXBLGE#": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00/\\x00/\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "DELUXE"}, "text": "1                             DLXBLGEN\n               GENERALIZED DATASET REBLOCKING PROGRAM\n- DLXBLGEN is a program used to reblock files from or to 80-byte records.\n0 DLXBLGEN will process any fixed block sequential file.\n     NOTE:  A single member of a partitioned dataset can be processed,\n            since it is treated as a sequential dataset.\n- OPERATION OF DLXBLGEN\n0 DLXBLGEN determines the lrecl's of the SYSUT1 and SYSUT2 files. One\n  of the files must have an lrecl of 80-bytes.  If not, the program\n  will terminate with a return code of 8.\n0 If the lrecl of SYSUT1 is less than the lrecl of SYSUT2, the program\n  will combine as many SYSUT1 records as necessary to create a SYSUT2\n  record of the specified lrecl.\n0 If the lrecl of SYSUT1 is greater than the lrecl of SYSUT2, the\n  program will write as many SYSUT2 records as necessary for each\n  SYSUT1 record.\n0 DLXBLGEN also generates a SYSPRINT file.  It gives record counts for\n  the number of SYSUT1 records read and the number of SYSUT2 records\n  written.\n1 NOTES ON USE OF DLXBLGEN:\n-\n    SAMPLE JCL: (reblock a 128-byte dataset to an 80-byte dataset)\n0   //DLXBLGEN  JOB (GEB1,9999),'NAME',CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1),\n    //         USER=T99999,PASSWORD=????????\n    //STEP1  EXEC PGM=DLXBLGEN\n    //SYSUT1 DD DSN=USERID.OLD.LREC128,DISP=SHR\n    //SYSUT2 DD DSN=USERID.LRECL80,UNIT=SYSDA,DISP=(,CATLG),\n    //          SPACE=(TRK,(10,2)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n    //SYSPRINT DD SYSOUT=*\n-\n    SAMPLE JCL: (reblock back to a 128-byte dataset)\n0   //DLXBLGEN  JOB (GEB1,9999),'NAME',CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1),\n    //         USER=T99999,PASSWORD=????????\n    //STEP1  EXEC PGM=DLXBLGEN\n    //SYSUT1 DD DSN=USERID.LRECL80,DISP=SHR\n    //SYSUT2 DD DSN=USERID.NEW.LREC128,UNIT=SYSDA,DISP=(,CATLG),\n    //          SPACE=(TRK,(10,2)),DCB=(RECFM=FB,LRECL=128,BLKSIZE=6144)\n    //SYSPRINT DD SYSOUT=*\n-\n ERROR MESSAGES:\n0   ***** EITHER SYSUT1 OR SYSUT2 MUST HAVE AN LRECL OF 80 BYTES *****\n    The program requires that one of the datasets be 80-byte records.\n0   ***** # OF INPUT RECORDS NOT A MULTIPLE OF OUTPUT RECORDS -\n     LAST RECORD(S) IGNORED *****\n    The program expects that when combining SYSUT1 record to make a\n      larger SYSUT2 record, the number of SYSUT1 records should be a\n      multiple of the number of SYSUT2 records.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DLXBLGEN": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01K\\x01K\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 331, "newlines": 331, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXBLGEN - GENERALIZED REBLOCKING PROGRAM'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = DLXBLGEN                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = REBLOCK FROM OR TO 80-BYTE           *\n*                RECORDS.                                             *\n*                                                                     *\n*             FUNCTION =                                              *\n*                DETERMINES LRECL'S OF SYSUT1 AND SYSUT2 FILES        *\n*                IF LRECL OF SYSUT1 < LRECL OF SYSUT2                 *\n*                  CALCULATE # OF RECORDS TO BE COMBINED              *\n*                  READS CALC'D NUMBER OF SYSUT1 RECORDS              *\n*                  WRITES RECORD INTO SYSUT2.                         *\n*                IF LRECL OF SYSUT2 > LRECL OF SYSUT2                 *\n*                  CALCULATE # OF SYSUT2 RECORDS TO BE CREATED        *\n*                  READS SYSUT1 FILE                                  *\n*                  WRITES CALC'D NUMBER OF SYSUT2 RECORDS             *\n*                                                                     *\n*                OPERATION =                                          *\n*                   OPEN SYSUT1, SYSUT2, AND SYSPRINT                 *\n*                   INITIALIZE RECORD COUNTERS                        *\n*                   DETERMINE LRECL'S OF SYSUT1 AND SYSUT2            *\n*                   IF LRECL OF SYSUT1 < LRECL OF SYSUT2 THEN:        *\n*                     DETERMINE HOW MANY SYSUT1 RECORDS TO COMBINE    *\n*                     READ AND COUNT THAT MANY SYSUT1 RECORDS         *\n*                     PAD WITH SPACES                                 *\n*                     WRITE INTO SYSUT2 FILE AND COUNT THE RECORD     *\n*                     IF MORE SYSUT1 RECS, GOTO 'READ AND COUNT'      *\n*                   IF LRECL OF SYSUT1 > LRECL OF SYSUT2 THEN:        *\n*                     DETERMINE HOW MANY SYSUT2 RECORDS TO CREATE     *\n*                     READ AND COUNT A SYSUT1 RECORD                  *\n*                     WRITE AND COUNT CALC'D NUMBER OF SYSUT2 RECS    *\n*                     IF MORE SYSUT1 RECS, GOTO 'READ AND COUNT'      *\n*                   CONVERT RECORD TOTALS AND REPORT IN SYSPRINT      *\n*                   CLOSE SYSUT1, SYSUT2, AND SYSPRINT                *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 3  = WORK REGISTERS               *\n*                    REGISTERS 4       = DCB POINTER                  *\n*                    REGISTERS 5       = SYSUT1 RECORD COUNTER        *\n*                    REGISTERS 6       = SYSUT2 RECORD COUNTER        *\n*                    REGISTER  7       = POINTER TO SYSUT1 RECORD     *\n*                    REGISTER  8 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO DLXBLGEN   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, GETMAIN, OPEN, GET, PUT, CLOSE, FREEMAIN       *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                06/26/86  WRITTEN.      BC.                          *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*     //DLXBLGEN JOB (GEE1,0104),'BARB COUTURE',CLASS=S,MSGCLASS=A,   *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1 EXEC PGM=DLXBLGEN                                       *\n*     //SYSUT1 DD DSN=T99999.SYSUT1.TEST,DISP=SHR                     *\n*     //SYSUT2 DD DSN=T99999.SYSUT2.TEST,DISP=SHR                     *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n*\nDLXBLGEN CSECT\n         USING DLXBLGEN,R15\n         B     SAVEREGS\n         DC    C'(C) COPYRIGHT DELUXE CHECK PRINTERS, INC., 1987.'\nSAVEREGS EQU   *\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15\n         DROP  R15\n         USING DLXBLGEN,R12            ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE PTR TO WORK AREA\n         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA\n         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA\n         LR    R13,R10                 LOAD ADDR OF CURRENT SA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n*\n*  INITIALIZE THE WORK AREA.  OPEN THE SYSIN, SYSUT1, SYSUT2 AND\n*  SYSPRINT DATA SETS.\n*\nINIT     EQU   *\n         LA    R6,DATA                 SET UP REGISTERS FOR\n         LA    R7,MOVEL                  LONG MOVE\n         LA    R8,CDATA\n         LA    R9,MOVEL\n         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA\n         OPEN  (SYSUT2,OUTPUT),MF=(E,EX2)  OPEN OUTPUT DATA SET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         OPEN  (SYSPRINT,OUTPUT),MF=(E,EX2)  OPEN SYSPRINT DATA SET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         OPEN  (SYSUT1,INPUT),MF=(E,EX2)    OPEN SYSUT1 DATA SET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         SLR   R5,R5                   INIT COUNTER FOR SYSUT1 RECS\n         SLR   R6,R6                   INIT COUNTER FOR SYSUT2 RECS\n         USING IHADCB,R4\n         LA    R4,SYSUT1\n         MVC   LRECL1,DCBLRECL         GET LRECL OF SYSUT1\n         LA    R4,SYSUT2\n         MVC   LRECL2,DCBLRECL         GET LRECL OF SYSUT2\n         CLC   LRECL1,=H'80'           IS LRECL OF SYSUT1 = 80?\n         BE    INIT1                   IF SO, BRANCH\n         CLC   LRECL2,=H'80'           IS LRECL OF SYSUT2 = 80?\n         BE    INIT1                   IF SO, CONTINUE\n         PUT   SYSPRINT,ERRMSG0        PRINT ERROR MESSAGE\n         LA    R15,8                   SET RC = 8\n         B     CLOSEX                  AND END PROGRAM\nINIT1    EQU   *\n         CLC   LRECL1,LRECL2\n         BL    COMBINE                 IF SYSUT1 < SYSUT2, COMBINE\n         B     SPLIT                   IF SYSUT1 > SYSUT2, SPLIT\n         DROP  R4\n*\n*  COMBINE SYSUT1 RECORDS TO MAKE LARGER SYSUT2 RECORD.\n*\nCOMBINE  EQU   *\n         CLC   LRECL2,=H'80'           IS SYSUT2 LRECL = 80 ?\n         BNE   CB10                    IF NOT, BRANCH\n         LA    R9,1                    JUST WRITE 1 FOR 1\n         B     CB20\nCB10     EQU   *\n         SLR   R8,R8                   CLEAR WORK REGISTERS\n         SLR   R9,R9\n         SLR   R11,R11\n         ICM   R9,B'0011',LRECL2       GET SYSUT2 LRECL\n         ICM   R11,B'0011',LRECL1      GET SYSUT1 LRECL\n         DR    R8,R11                  SYSUT2 LRECL / SYSUT1 LRECL\n         LTR   R8,R8                   CHECK FOR REMAINDER\n         BE    CB20                    IF NONE, CONTINUE\n         LA    R9,1(R9)                IF REMAINDER, INC # OF RECS\nCB20     EQU   *\n         ST    R9,NUMRECS              SAVE # OF RECS\nREAD1    EQU   *\n         LA    R8,OUTBUF               SET UP FOR LONG MOVE\n         LA    R9,1024\n         LA    R10,CLRBUF\n         LA    R11,1024\n         MVCL  R8,R10                  CLEAR OUTPUT BUFFER\n         L     R9,NUMRECS              GET # OF RECS TO COMBINE\n         SLR   R4,R4\n         ICM   R4,B'0011',LRECL1       GET SYSUT1 LRECL\n         LA    R3,OUTBUF               POINT TO OUTPUT BUFFER\nRD10     EQU   *\n         GET   SYSUT1,0(R3)            READ A SYSUT1 RECORD\n         LA    R5,1(R5)                COUNT THE RECORD\n         AR    R3,R4                   INCREMENT PAST RECORD\n         BCT   R9,RD10                 CONTINUE TO READ SYSUT1\n         PUT   SYSUT2,OUTBUF           WRITE INTO OUTPUT FILE\n         LA    R6,1(R6)                COUNT THE RECORD\n         B     READ1\n*\n*  SPLIT SYSUT1 RECORD INTO SMALLER SYSUT2 RECORDS.\n*\nSPLIT    EQU   *\n         CLC   LRECL1,=H'80'           IS SYSUT1 LRECL = 80 ?\n         BNE   SP10                    IF NOT, BRANCH\n         LA    R9,1                    DEFAULT 1 FOR 1\n         B     SP20                    AND CONTINUE\nSP10     EQU   *\n         SLR   R8,R8                   CLEAR WORK REGISTERS\n         SLR   R9,R9\n         SLR   R11,R11\n         ICM   R9,B'0011',LRECL1       GET SYSUT1 LRECL\n         ICM   R11,B'0011',LRECL2      GET SYSUT2 LRECL\n         DR    R8,R11                  SYSUT1 LRECL / SYSUT2 LRECL\n         LTR   R8,R8                   CHECK FOR REMAINDER\n         BE    SP20                    IF NONE, CONTINUE\n         LA    R9,1(R9)                IF REMAINDER, INC # OF RECS\nSP20     EQU   *\n         ST    R9,NUMRECS              STORE NUMBER OF RECS\nREAD2    EQU   *\n         LA    R8,OUTBUF               SET UP FOR LONG MOVE\n         LA    R9,1024\n         LA    R10,CLRBUF\n         LA    R11,1024\n         MVCL  R8,R10                  CLEAR OUTPUT BUFFER\n         L     R9,NUMRECS              GET # OF RECS TO SPLIT INTO\n         SLR   R4,R4\n         ICM   R4,B'0011',LRECL2       GET SYSUT2 LRECL\n         LA    R3,OUTBUF               POINT TO OUTPUT BUFFER\n         GET   SYSUT1,0(R3)            READ A SYSUT1 RECORD\n         LA    R5,1(R5)                COUNT THE RECORD\nRD20     EQU   *\n         PUT   SYSUT2,0(R3)            WRITE INTO OUTPUT FILE\n         LA    R6,1(R6)                COUNT THE RECORD\n         AR    R3,R4                   POINT TO NEXT RECORD\n         BCT   R9,RD20                 CONTINUE TO WRITE SYSUT2\n         B     READ2\n*\n*  WRITE INTO SYSPRINT THE NUMBER OF RECORDS READ FROM THE INPUT FILE\n*    AND THE NUMBER OF RECORDS WRITTEN TO THE OUTPUT FILE.\n*\nSUMUP    EQU   *\n         MVI   PRINTBUF,X'40'          CLEAR PRINT LINE\n         MVC   PRINTBUF+1(L'PRINTBUF-1),PRINTBUF\n         MVC   PRINTBUF+2(L'LINE1),LINE1  CONSTRUCT 1ST LINE\n         CVD   R5,PWORK                CONVERT TO PACKED DECIMAL\n         UNPK  WORK,PWORK+3(5)         UNPACK\n         MVZ   WORK+7(1),WORK+6        MOVE ZONE BYTE\n         MVC   PRINTBUF+40(L'WORK),WORK    ADD NUMBER OF RECORDS\n         PUT   SYSPRINT,PRINTBUF       WRITE INTO SYSPRINT FILE\n         MVI   PRINTBUF,X'40'          CLEAR PRINT LINE\n         MVC   PRINTBUF+1(L'PRINTBUF-1),PRINTBUF\n         MVC   PRINTBUF+2(L'LINE2),LINE2  CONSTRUCT 2ND LINE\n         CVD   R6,PWORK                CONVERT TO PACKED DECIMAL\n         UNPK  WORK,PWORK+3(5)         UNPACK\n         MVZ   WORK+7(1),WORK+6        MOVE ZONE BYTE\n         MVC   PRINTBUF+40(L'WORK),WORK    ADD NUMBER OF RECORDS\n         PUT   SYSPRINT,PRINTBUF       WRITE INTO SYSPRINT FILE\n         SLR   R15,R15\n         C     R9,NUMRECS              DID EVERYTHING COME OUT EVENLY?\n         BE    CLOSEX                  IF SO, BRANCH\n         PUT   SYSPRINT,ERRMSG1        ELSE, PRINT ERROR MESSAGE\n         LA    R15,8                   AND INDICATE ERROR\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (SYSUT1,,SYSUT2,,SYSPRINT),MF=(E,EX4)\n         LR    R15,R7                  RESTORE CONTENTS OF R15\nRETURN   EQU   *\n         LR    R7,R15                  SAVE RETURN CODE\n         FREEMAIN R,LV=LDATA,A=(13)    FREE DYNAMIC WORK AREA\n         LR    R15,R7                  RESTORE RETURN CODE\n         L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n*\n***********************************************************************\n*                                                                     *\n*                     CONSTANT DATA                                   *\n*                                                                     *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         LTORG\n*\nLINE1    DC    C'NUMBER OF SYSUT1 RECORDS READ: '\nLINE2    DC    C'NUMBER OF RECORDS WRITTEN TO SYSUT2: '\nERRMSG0  DS    0CL132\n         DC    CL33' '\n         DC    C'***** EITHER SYSUT1 OR SYSUT2 MUST HAVE AN LRECL '\n         DC    C'OF 80 BYTES *****'\n         DC    CL33' '\nERRMSG1  DS    0CL132\n         DC    CL22' '\n         DC    C'***** # OF INPUT RECORDS NOT A MULTIPLE OF '\n         DC    C'OUTPUT RECORDS - '\n         DC    C'LAST RECORD(S) IGNORED *****'\n         DC    CL22' '\n*\n*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA\n*\nCDATA    DS    0F\nDCB1     DCB   DDNAME=SYSUT1,DSORG=PS,RECFM=FB,                        X\n               MACRF=(GM),EODAD=SUMUP\nDCB2     DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,                        X\n               MACRF=(PM)\nDCB3     DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X\n               MACRF=(PM)\nLIST2    OPEN   (,),MF=L\nLIST4    CLOSE  (,),MF=L\nMOVEL    EQU   *-CDATA\n*\n*\n*  MISCELLANEOUS CONSTANTS\n*\nCLRBUF   DC    1024X'40'\n*\n***********************************************************************\n*                                                                     *\n*                    DSECTS FOR GETMAIN'ED AREA                       *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F\n*\nOUTBUF   DS    1024X\nPRINTBUF DS    CL132\nWORK     DS    CL8\nPWORK    DS    1D\nLRECL1   DS    1H\nLRECL2   DS    1H\nNUMRECS  DS    1F\n*\nDATA     DS    0F\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,RECFM=FB,                        X\n               MACRF=(GM),EODAD=SUMUP\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,                        X\n               MACRF=(PM)\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X\n               MACRF=(PM)\nEX2      OPEN   (,),MF=L\nEX4      CLOSE  (,),MF=L\n*\nLDATA    EQU   *-WORKAREA\n*\n         DCBD  DSORG=PS,DEVD=DA\n         END   DLXBLGEN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXCICLG": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\xd4\\x02\\xd4\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 724, "newlines": 724, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXCICLG - CICS JOURNAL LOGGING'\n***********************************************************************\n*                                                                     *\n*              MODULE NAME = DLXCICLG                                 *\n*                                                                     *\n*              DESCRIPTIVE NAME = CICS JOURNAL LOGGING                *\n*                                                                     *\n*              FUNCTION =                                             *\n*                USE SVC99 TO DYNAMICALLY ALLOCATE 'CICS_.            *\n*                DFHJ___' AS IEFRDER OR SYSUT1, A CICS JOURNAL        *\n*                FILE AND 'CICS_.DFHJ__.TAPEBKP(+1)' AS NEWRDER       *\n*                OR SYSUT2, A GDG USED TO CONTAIN BACKUP COPY         *\n*                OF THE JOURNAL FILE. LINK TO 'DFSULTR0' OR           *\n*                'IEBGENER' TO PERFORM THE ACTUAL COPY OF THE         *\n*                JOURNAL TO BACKUP TAPE. IF REPL-ID IS PRESENT        *\n*                AND JOURNAL BACKUP IS SUCCESSFUL, REPLY 'GO' TO      *\n*                OUTSTANDING CICS MESSAGE. IF JOURNAL BACKUP IS NOT   *\n*                SUCCESSFUL, ISSUE APPROPRIATE WTO.                   *\n*                                                                     *\n*              OPERATION =                                            *\n*                SAVE REGISTERS AND ESTABLISH ADDRESSABILITY          *\n*                IF 'REPLONLY' IS 'YES':                              *\n*                    IF 'REPLYID' IS NOT 'XX':                        *\n*                        GETMAIN DYNAMIC STORAGE                      *\n*                        REPLY 'GO' TO OUTSTANDING CICS MESSAGE       *\n*                        FREEMAIN DYNAMIC STORAGE                     *\n*                IF 'REPLONLY' IS 'NO ':                              *\n*                    GETMAIN DYNAMIC STORAGE                          *\n*                    INVOKE DYNALLOC (SVC99) TO ALLOCATE THE          *\n*                        JOURNAL FILE ON DISK:                        *\n* ------------------------------------------------------------------- *\n* |       IEFRDER  DD  DSN=CICS_.DFHJ___,                           | *\n* |                    DISP=(SHR,KEEP,KEEP),                        | *\n* |                    DCB=RECFM=VB                                 | *\n* |                              OR                                 | *\n* |       SYSUT2   DD  DSN=CICS_.DFHJ___,                           | *\n* |                    DISP=(SHR,KEEP,KEEP),                        | *\n* |                    DCB=RECFM=VB                                 | *\n* ------------------------------------------------------------------- *\n*                    INVOKE DYNALLOC (SVC99) TO ALLOCATE THE          *\n*                        BACKUP COPY OF THE JOURNAL FILE ON TAPE:     *\n* ------------------------------------------------------------------- *\n* |       NEWRDER  DD  DSN=CICS_.DFHJ__.TAPEBKP(+1),                | *\n* |                    DISP=(NEW,CATLG,DELETE),                     | *\n* |                    UNIT=TAPE3480,                               | *\n* |                 DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)| *\n* |                              OR                                 | *\n* |       SYSUT2   DD  DSN=CICS_.DFHJ__.TAPEBKP(+1),                | *\n* |                    DISP=(NEW,CATLG,DELETE),                     | *\n* |                    UNIT=TAPE3480,                               | *\n* |                 DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)| *\n* ------------------------------------------------------------------- *\n*                    CHOOSE 'DFSULTR0' OR 'IEBGENER' BASED ON LOGPGM  *\n*                    LINK TO 'LOGPGM' TO PERFORM COPY OPERATION       *\n*                    IF 'LOGPGM' IS SUCCESSFUL:                       *\n*                        REPLY 'GO' TO OUTSTANDING CICS MSG IF        *\n*                        NECESSARY                                    *\n*                    IF 'LOGPGM' IS NOT SUCCESSFUL:                   *\n*                        ISSUE WTO SO THAT OPERATORS WILL TAKE        *\n*                        APPROPRIATE ACTION                           *\n*                    FREEMAIN DYNAMIC STORAGE                         *\n*                RESTORE REGISTERS                                    *\n*                EXIT                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *\n*                    REGISTER  1      = PARAMETER LIST POINTER        *\n*                    REGISTER  2      = PARAMETER LIST WORK POINTER   *\n*                    REGISTERS 3 - 10 = WORK REGISTERS                *\n*                    REGISTER  11     = BAL REGISTER                  *\n*                    REGISTER  12     = BASE REGISTER                 *\n*                    REGISTER  13     = SAVE AREA POINTER             *\n*                    REGISTER  14     = RETURN                        *\n*                    REGISTER  15     = ENTRY POINT ADDRESS AND       *\n*                                       RETURN CODE REGISTER          *\n*                                                                     *\n*              MACROS =                                               *\n*                 SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN,            *\n*                 DYNALLOC, LINK, MODESET, MGCRPL, WTO                *\n*                                                                     *\n*              MAPPING MACROS USED =                                  *\n*                 IEFZB4D0, IEFZB4D2, IEZMGCR                         *\n*                                                                     *\n*              ASSEMBLER OPTIONS = LIST,RENT                          *\n*                                                                     *\n*              LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,      *\n*                                       REFR,AC=1                     *\n*                                                                     *\n*              LOAD LIBRARY = SYS1.PPLINK (LINKLST LIBRARY)           *\n*                                                                     *\n*                                                                     *\n*              CHANGE ACTIVITY =                                      *\n*                 12/04/85  WRITTEN.                            JWC.  *\n*                                                                     *\n*                 04/25/86  CHANGE TAPE DSN.                    JWC.  *\n*                                                                     *\n*                 04/29/86  CHANGE DCB INFORMATION FOR JOURNAL        *\n*                           AND TAPE DATA SETS.                 JWC.  *\n*                                                                     *\n*                 07/29/86  ADD 'IEBGENER' OPTION.              JWC.  *\n*                                                                     *\n*                 08/21/86  ADD STIMER MACRO FOR 'TAPE UNIT           *\n*                           UNAVAILABLE' ERRORS.                JWC.  *\n*                                                                     *\n*                 09/12/86  UPDATE TO WORK WITH CICS 1.7 AS           *\n*                           WELL AS CICS 1.6.                   JWC.  *\n*                                                                     *\n*                 12/09/86  ADD STIMER MACRO FOR 'DATA SET            *\n*                           UNAVAILABLE' ERRORS.                JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nDLXCICLG CSECT                         CICS JOURNAL LOGGING\n         SAVE  (14,12),,DLXCICLG_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING DLXCICLG,R12            ESTABLISH PGM ADDRESSABILITY\n         SR    R15,R15                 R15 - INITIALIZE TO ZERO\n         L     R2,0(,R1)               PRESERVE PTR TO PARMS\n         LA    R3,PARMSLEN             LENGTH OF PARMS\n         BCTR  R3,0                    DECREMENT LENGTH BY ONE\n         LA    R2,2(R2)                SKIP 2 BYTE LENGTH FIELD\n         USING PARMSIN,R2              ESTABLISH ADDRESSABILITY TO\n*                                      THE PARAMETER LIST DSECT\n         EX    R3,TRANUPPR             TRANSLATE TEXT TO UPPER CASE\n         CLC   REPLINFO,NALLOCNR       NEED TO ALLOCATE & RUN BACKUP\n*                                      AND/OR REPLY TO CICS MESSAGE?\n         BE    FINISH                  NO, RESTORE REGS & RETURN\n         B     GETMAIN                 YES, GETMAIN DYNAMIC STORAGE\nTRANUPPR OC    PARMSIN(0),SPACES       TRANSLATE TO UPPER CASE\n***********************************************************************\n*        GETMAIN DYNAMIC STORAGE\n***********************************************************************\nGETMAIN  DS    0H\n         GETMAIN R,LV=WORKLEN,SP=SUBPOOL\n*                                      GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVC   MGCRETN,FULL00          INITIALIZE MGCRETN\n         CLC   REPLONLY,YES            ALLOCATE FILES & RUN BACKUP?\n         BE    REPLYMSG                NO, REPLY TO CICS MESSAGE ONLY\n         EJECT\n***********************************************************************\n*        MOVE CICS ID AND DDNAME TO DYNAMIC STORAGE FOR DYNALLOC\n***********************************************************************\nMOVNAMES DS    0H\n         GETMAIN R,LV=S99WKTOT         GETMAIN DYNAMIC STORAGE FOR\n*                                      SVC 99 REQUEST BLOCK, TEXT UNIT\n*                                      POINTER LIST & NEEDED STORAGE\n         LR    R4,R1                   SAVE ADDRESS OF RETURNED STG\n         USING S99WORK,R4              ESTABLISH ADDRESSABLIITY\n*                                      FOR S99RBP DSECT, TEXT UNIT\n*                                      POINTER LIST & NEEDED STORAGE\n         LA    R6,S99WORK+NONRBLEN     POINT TO S99RBP DSECT\n         USING S99RBP,R6               ESTABLISH ADDRESSABLIITY\n         MVC   DSKDD(LDSKDD),DFSDSKDD    INITIAL DSKDD FOR DFSULTR0\n         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?\n         BNE   MOVNAM10                NO, CONTINUE\n         MVC   DSKDD(LDSKDD),IEBDSKDD    SET DSKDD FOR IEBGENER\nMOVNAM10 DS    0H\n         MVC   DSKDSN(LDSKDSN),DSKDSNAM\n*                                      DISK DSN FROM STATIC TO DYNAMIC\n         MVC   CICSDID,CICSJOB         CICSJOB FROM STATIC TO DYNAMIC\n*                                      (1ST SEGMENT OF DISK DSN)\n         MVC   CICSDDD,DDNAME          DDNAME FROM STATIC TO DYNAMIC\n*                                      (2ND SEGMENT OF DISK DSN)\n         MVC   TAPDD(LTAPDD),DFSTAPDD    INITIAL TAPDD FOR DFSULTR0\n         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?\n         BNE   MOVNAM20                NO, CONTINUE\n         MVC   TAPDD(LTAPDD),IEBTAPDD    SET TAPDD FOR IEBGENER\nMOVNAM20 DS    0H\n         MVC   TAPDSN(LTAPDSN),TAPDSNAM\n*                                      TAPE DSN FROM STATIC TO DYNAMIC\n         MVC   CICSTID,CICSJOB         CICSJOB FROM STATIC TO DYNAMIC\n         MVC   CICSTDD,CICSDDD         DDNAME FROM DISK DSN TO TAPE DSN\n***********************************************************************\n*        BUILD SVC 99 REQUEST BLOCK FOR DYNAMIC ALLOCATION\n***********************************************************************\nBLDS99RB DS    0H\n         LA    R7,S99RBPTR+4           POINT TO S99RB DSECT\n         USING S99RB,R7                ESTABLISH ADDRESSABILITY\n         ST    R7,S99RBPTR             HAVE RBPTR POINT TO S99RB\n         OI    S99RBPTR,S99RBPND       TURN ON HIGH ORDER BIT - RBPTR\n         XC    S99RB(RBLEN),S99RB      ZERO OUT REQUEST BLOCK\n         MVI   S99RBLN,RBLEN           LENGTH OF RB IN LENGTH FIELD\n         MVI   S99VERB,S99VRBAL        INDICATE ALLOCATION VERB FUNCTN\n         EJECT\n***********************************************************************\n*        BUILD TEXT UNIT POINTER LIST FOR 'CICS_.DFHJ___',\n*        DISK JOURNAL FILE AND ALLOCATE IT\n***********************************************************************\nDSKTUP   DS    0H\n         MVC   DEVTYPE,DISK            INDICATE 'DISK' DEVICE TYPE\n         LA    R8,S99RB+RBLEN          START OF TEXT UNIT POINTER LIST\n         USING S99TUPL,R8              ESTABLISH ADDRESSABILITY FOR\n*                                      TEXT UNIT POINTERS\n         ST    R8,S99TXTPP             STORE ADDR OF TUP LIST IN RB\n         LA    R9,DSKDD                GET ADDRESS OF FIRST TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,DSKDSN               GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,DSKSTATS             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,DSKNDISP             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,DSKCDISP             GET ADDRESS OF LAST TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?\n         BE    DSKTUP10                YES, SKIP DCB TEXT UNIT\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,DSKRECFM             GET ADDRESS OF LAST TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\nDSKTUP10 DS    0H\n         LA    R10,20                  R10 - MAX 30SEC INTERVAL TO WAIT\n         BAL   R11,ALLOC               USE DYNALLOC TO ALLOCATE DSN\n         EJECT\n***********************************************************************\n*        BUILD TEXT UNIT POINTER LIST FOR 'CICS_.DFHJ__.TAPEBKP(+1)',\n*        TAPE BACKUP OF DISK JOURNAL FILE AND ALLOCATE IT\n***********************************************************************\nTAPTUP   DS    0H\n         MVC   DEVTYPE,TAPE            INDICATE 'TAPE' DEVICE TYPE\n         LA    R8,S99RB+RBLEN          START OF TEXT UNIT POINTER LIST\n         USING S99TUPL,R8              ESTABLISH ADDRESSABILITY FOR\n*                                      TEXT UNIT POINTERS\n         ST    R8,S99TXTPP             STORE ADDR OF TUP LIST IN RB\n         LA    R9,TAPDD                GET ADDRESS OF FIRST TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPDSN               GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPMEMBR             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPSTATS             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPNDISP             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPCDISP             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPUNIT              GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPDCBDS             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?\n         BE    TAPTUP10                YES, SKIP DCB TEXT UNITS\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPBLKSZ             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPDSORG             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPLRECL             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\n         LA    R8,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R9,TAPRECFM             GET ADDRESS OF LAST TEXT UNIT\n         ST    R9,S99TUPTR             AND STORE IT IN THE TUP LIST\nTAPTUP10 DS    0H\n         LA    R10,20                  R10 - MAX INTERVALS TO WAIT\n         BAL   R11,ALLOC               USE DYNALLOC TO ALLOCATE DSN\n         EJECT\n***********************************************************************\n*        LINK TO 'DFSULTR0' OR 'IEBGENER' TO PERFORM COPY OPERATION\n***********************************************************************\nLINKPGM  DS    0H\n         CLC   LOGPGM,IEBGENER         IEBGENER REQUESTED?\n         BNE   LINKP10                 NO, LINK TO DFSULTR0\n         MVC   PARMLEN(2),HALF00       PARMSOUT LEN - STATIC TO DYNAMIC\n         LA    R3,LINKLST              R3 - ADDR OF IEBGENER PARM LIST\n         ST    R3,LINKLIST             STORE INTO LINKLIST\n         LINK  EP=IEBGENER,                                            +\n               MF=(E,LINKLIST)         BACKUP COPY OF CICS JOURNAL FILE\n         ST    R15,LINKRETN            SAVE 'IEBGENER' RETURN CODE\n         B     LINKP20                 CHECK RETURN CODE\nLINKP10  DS    0H\n         MVC   PARMLEN(2),HALF16       PARMSOUT LEN - STATIC TO DYNAMIC\n         MVC   PARMSOUT,PARMLST        PARMSOUT - STATIC TO DYNAMIC\n         LA    R3,LINKLST              R3 - ADDR OF DFSULTR0 PARM LIST\n         ST    R3,LINKLIST             STORE INTO LINKLIST\n         LINK  EP=DFSULTR0,                                            +\n               MF=(E,LINKLIST)         BACKUP COPY OF CICS JOURNAL FILE\n         ST    R15,LINKRETN            SAVE 'DFSULTR0' RETURN CODE\nLINKP20  DS    0H\n         C     R15,FULL04              LOG PROGRAM SUCCESSFUL?\n         BNH   FREEMN1                 YES, FREEMAIN DYNALLOC STG\n         MVC   WTOLIST_(LWTOLST1),WTOLIST1    MOVE WTO LIST FORM FROM\n*                                      STATIC TO DYNAMIC\n         MVC   WTOLIST_+4(5),CICSJOB   INDICATE APPROPRIATE CICS\n         MVC   WTOLIST_+34(8),LOGPGM   INDICATE APPROPRIATE LOG PGM\n         MVC   WTOLIST_+116(2),REPLID  INDICATE APPROPRIATE REPLY-ID\n         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE\n         B     ABEND                   NO, ABEND AND DUMP\n         EJECT\n***********************************************************************\n*        FREEMAIN DYNAMIC STORAGE (DYNALLOC)\n***********************************************************************\nFREEMN1  DS    0H\n         LR    R10,R4                  R10 - ADDR OF S99WORK\n         FREEMAIN R,LV=S99WKTOT,A=(R10)   FREEMAIN DYNAMIC STORAGE\n***********************************************************************\n*        REPLY TO OUTSTANDING MESSAGE IF NEEDED\n***********************************************************************\nREPLYMSG DS    0H\n         CLC   REPLID,NULLREPL         DO WE NEED TO REPLY 'GO'?\n         BE    FREEMN2                 NO, FREE DYNAMIC STORAGE\n         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR THE PARAMETER LIST\n         MVI   MGCRFLG1,X'80'          SET FLAG1 TO INDICATE THAT FLAG2\n*                                      CONTAINS VALID INFORMATION.\n*                                      FLAG2 = X'0000' (NO USER TOKEN).\n         MVC   MGCRTEXT(L'CMDTXT1),SPACES     INITIALIZE\n         MVC   MGCRTEXT(L'CMDTXT1),CMDTXT1    MOVE REPLY CMD SKELETON\n         MVC   CICSID,REPLID           INSERT REPLY ID\n         MVC   CICSREPL,REPLY          INSERT REPLY\n         LA    R1,(MGCRTEXT-MGCRPL)+L'CMDTXT1    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH             SAVE LENGTH IN MGCRPL\n         SR    R0,R0                   CLEAR REG 0\n         MVC   MODLIST_(LMODLST1),MODLIST1    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY ZERO)\n         MODESET MF=(E,MODLIST_)       SUPER STATE TO ISSUE COMMAND\n         MGCR  MGCRPL                  ISSUE THE COMMAND\n         ST    R15,MGCRETN             SAVE 'MGCR' RETURN CODE\n         MVC   MODLIST_(LMODLST2),MODLIST2    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY NZERO)\n         MODESET MF=(E,MODLIST_)       BACK TO USER KEY\n         CLC   MGCRETN,FULL00          COMMAND ISSUED SUCCESSFULLY?\n         BE    FREEMN2                 YES, FREE DYNAMIC STORAGE\n         MVC   WTOLIST_(LWTOLST1),WTOLIST2    MOVE WTO LIST FORM FROM\n*                                      STATIC TO DYNAMIC\n         MVC   WTOLIST_+4(5),CICSJOB   INDICATE APPROPRIATE CICS\n         MVC   WTOLIST_+86(2),REPLID   INDICATE APPROPRIATE REPLY-ID\n         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE\n         B     ABEND                   NO, ABEND AND DUMP\n         EJECT\n***********************************************************************\n*        FREEMAIN DYNAMIC STORAGE\n***********************************************************************\nFREEMN2  DS    0H\n         LR    R10,R13                 R10 - ADDR OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN R,LV=WORKLEN,A=(R10),SP=SUBPOOL\n*                                      FREEMAIN DYNAMIC STORAGE\n         L     R15,LINKRETN            R15 - RESTORE RETNCODE(LOGPGM)\n***********************************************************************\n*        RESTORE REGISTERS AND RETURN\n***********************************************************************\nFINISH   DS    0H\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n***********************************************************************\n*        ALLOCATE DATA SET NAME USING DYNALLOC (SVC 99)\n***********************************************************************\nALLOC    DS    0H\n         OI    S99TUPTR,S99TUPLN       TURN ON HIGH-ORDER BIT\n*                                      IN LAST TUP LIST ENTRY\n         LR    R1,R6                   R1 - ADDR OF REQUEST BLOCK PTR\n         DYNALLOC                      INVOKE SVC 99 TO PROCESS REQUEST\n         LTR   R15,R15                 SUCCESSFUL ALLOCATION?\n         BZR   R11                     YES, RETURN\n         CLC   DEVTYPE,TAPE            TAPE DEVICE ALLOCATION ERROR?\n         BNE   ALLOC20                 NO, CONTINUE\n         CLC   S99ERROR,NODSN          TAPE DATA SET NOT AVAILABLE?\n         BE    ALLOC10                 YES, STIMER\n         CLC   S99ERROR,NOUNIT         TAPE DEVICE NOT AVAILABLE?\n         BNE   ALLOC20                 NO, CONTINUE\n         STIMER WAIT,DINTVL=THRTYSEC   WAIT FOR 30 SECONDS\n         BCT   R10,ALLOC               TRY TO ALLOCATE TAPE DEV\nALLOC10  DS    0H\n         STIMER WAIT,DINTVL=SIXTYSEC   WAIT FOR 60 SECONDS\n         BCT   R10,ALLOC               TRY TO ALLOCATE TAPE DSN\nALLOC20  DS    0H\n         ST    R15,SVC99RTN            SAVE SVC99 RETURN CODE\n         MVC   WTOLIST_(LWTOLST1),WTOLIST3    MOVE WTO LIST FORM FROM\n*                                      STATIC TO DYNAMIC\n         MVC   WTOLIST_+4(5),CICSJOB   INDICATE APPROPRIATE CICS\n         MVC   WTOLIST_+47(4),DEVTYPE  INDICATE ALLOCATION DEVICE TYPE\n         MVC   WTOLIST_+127(2),REPLID  INDICATE MESSAGE REPLY - ID\n         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE\n         ST    R7,DFS99RBP             STORE ADDRESS OF FAILING SVC99\n*                                      REQUEST BLOCK IN DAIRFAIL DSECT\n         LA    R5,SVC99RTN             R5 - ADDR OF SVC99 RETURN CODE\n         ST    R5,DFRCP                STORE ADDRESS OF SVC99 RETURN\n*                                      CODE IN DAIRFAIL DSECT\n         MVC   IKJEFF02,FULL00         MSG WRITER ROUTINE (NOT KNOWN)\n         LA    R5,IKJEFF02             R5 - PTR TO MSG WRITER ROUTINE\n         ST    R5,DFJEFF02             STORE ADDR OF PTR TO MSG WRITER\n*                                      ROUTINE IN DAIRFAIL DSECT\n         OI    DFID,DFWTP              INDICATE WRITE TO PROGRAMMER\n         OI    DFID+1,DFSVC99          INDICATE SVC99 ERROR\n         LA    R5,DFID                 R5 - ADDR OF 2 BYTE CALLER ID\n         ST    R5,DFIDP                STORE ADDRESS OF CALLER\n*                                      IDENTIFIER IN DAIRFAIL DSECT\n         MVC   DFCPPLP,FULL00          ADDR OF CPPL (NOT USED)\n         MVC   DFBUFP,FULL00           ADDR MSG TEXT BUFFERS (NOT USED)\n         LINK  EP=IKJEFF18,                                            +\n               MF=(E,DFPARMS)          EXECUTE DAIRFAIL ROUTINE\n         LTR   R15,R15                 DAIRFAIL FINISH SUCCESSFULLY?\n         BZ    ABEND                   YES, CONTINUE WITH ABEND\n         UNPK  CONDATA1,SVC99RTN+2     UNPACK SVC99 RETURN CODE\n         TR    CONDATA1(8),TRANS       MAKE IT PRINTABLE\n         MVC   DYNALRTN(2),CONDATA1+4  MOVE TO OUTPUT AREA\n         UNPK  CONDATA2(10),S99ERROR(4)    UNPACK SVC99 REASON CODE\n         TR    CONDATA2(10),TRANS      MAKE IT PRINTABLE\n         MVC   DYNALRSN(4),CONDATA2+3  MOVE TO OUTPUT AREA\n         MVC   WTOLIST_(LWTOLST1),WTOLIST4    MOVE WTO LIST FORM FROM\n*                                      STATIC TO DYNAMIC\n         MVC   WTOLIST_+100(28),CLASSX    RESERVED DYNALLOC ERROR CLASS\n         CLI   S99ERROR,X'02'          DYNALLOC ERROR CLASS 2?\n         BNE   CHK03                   NO, CHECK FOR CLASS 3\n         MVC   WTOLIST_+100(28),CLASS2    INDICATE DYNALLOC ERROR CLASS\n         B     WTO                     PERFORM WTO\nCHK03    DS    0H\n         CLI   S99ERROR,X'03'          DYNALLOC ERROR CLASS 3?\n         BNE   CHK04                   NO, CHECK FOR CLASS 4\n         MVC   WTOLIST_+100(28),CLASS3    INDICATE DYNALLOC ERROR CLASS\n         B     WTO                     PERFORM WTO\nCHK04    DS    0H\n         CLI   S99ERROR,X'04'          DYNALLOC ERROR CLASS 4?\n         BNE   CHK07                   NO, CHECK FOR CLASS 7\n         MVC   WTOLIST_+100(28),CLASS4    INDICATE DYNALLOC ERROR CLASS\n         B     WTO                     PERFORM WTO\nCHK07    DS    0H\n         CLI   S99ERROR,X'07'          DYNALLOC ERROR CLASS 7?\n         BNE   WTO                     NO, CLASS IS RESERVED\n         MVC   WTOLIST_+100(28),CLASS4    INDICATE DYNALLOC ERROR CLASS\n         B     WTO                     PERFORM WTO\nWTO      DS    0H\n         MVC   WTOLIST_+62(2),DYNALRTN INDICATE DYNALLOC RETURN CODE\n         MVC   WTOLIST_+80(4),DYNALRSN INDICATE DYNALLOC REASON CODE\n         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE\n***********************************************************************\n*        ABEND DLXCICLG (USER 444)\n***********************************************************************\nABEND    DS    0H\n         ABEND 444,DUMP                ABEND AND DUMP\n         EJECT\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nHALF00   DC    H'00'                   HALFWORD, VALUE '00' (PARM LEN)\nHALF16   DC    H'16'                   HALFWORD, VALUE '16' (PARM LEN)\nFULL00   DC    F'00'                   FULLWORD, VALUE '00' (RETN CODE)\nFULL04   DC    F'04'                   FULLWORD, VALUE '04' (RETN CODE)\n         DS    0D                      FORCE DOUBLEWORD BOUNDARY\nTHRTYSEC DC    CL8'00003000'           30 SEC TIME INTERVAL\nSIXTYSEC DC    CL8'00010000'           60 SEC TIME INTERVAL\nNODSN    DC    XL2'0210'               SVC99 REASON CODE - DSN UNAVAIL\nNOUNIT   DC    XL2'0214'               SVC99 REASON CODE - UNIT UNAVAIL\nSPACES   DC    CL87' '                 PARMSIN UPPER CASE TRANSLATION\nPARMLST  DC    CL16'DBRC=NO,CICS=YES'  PARMSOUT PASSED TO 'DFSULTR0'\nCMDTXT1  DC    C'REPLY XX,XXXX'        COMMAND TEXT DFH4583 (REPLY)\nNULLREPL DC    CL2'XX'                 NULL MESSAGE REPLY-ID\nIEBGENER DC    CL8'IEBGENER'           USE IEBGENER TO BACKUP LOG FILE\nYES      DC    CL3'YES'                REPLY TO CICS MSG ONLY; DON'T\n*                                      ALLOCATE FILES OR RUN BACKUP\nNALLOCNR DC    CL5'XXYES'              DON'T ALLOC FILES, RUN BACKUP\n*                                      OR REPLY TO CICS MESSAGE\nDISK     DC    CL4'DISK'               'DISK' DEVICE TYPE\nTAPE     DC    CL4'TAPE'               'TAPE' DEVICE TYPE\nCLASS2   DC    C'UNAVAILABLE SYSTEM REASOURCE'  DYNALLOC ERROR CLASS 2\nCLASS3   DC    C'INVALID PARAMETER LIST      '  DYNALLOC ERROR CLASS 3\nCLASS4   DC    C'ENVIRONMENTAL ERROR         '  DYNALLOC ERROR CLASS 4\nCLASS7   DC    C'SYSTEM ROUTINE ERROR        '  DYNALLOC ERROR CLASS 7\nCLASSX   DC    C'UNKNOWN ERROR               '  DYNALLOC ERROR\n         DS    0F\nTRANS    EQU   *-C'0'                  HEX CHAR TRANSLATE TBL (OUTPUT)\n         DC    C'0123456789ABCDEF'\n         DS    0F\n***********************************************************************\n*              DISK DATA SET ALLOCATION TEXT UNITS\n*     IEFRDER  DD  DSN=CICSA.DFHJ01A,DISP=(SHR,KEEP,KEEP),\n*                  DCB=RECFM=VB\n*                               OR\n*     SYSUT1   DD  DSN=CICSA.DFHJ01A,DISP=(SHR,KEEP,KEEP),\n*                  DCB=RECFM=VB\n***********************************************************************\nDFSDSKDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    CL8'IEFRDER'\nLDSKDD   EQU   *-DFSDSKDD              LENGTH OF DISK DDNAME\nIEBDSKDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    CL8'SYSUT1'\nDSKDSNAM DC    AL2(DALDSNAM)           DSNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'000D'\n         DC    C'CICSA.DFHJ01A'\nLDSKDSN  EQU   *-DSKDSNAM              LENGTH OF DISK DSNAME\nDSKSTATS DC    AL2(DALSTATS)           DATA SET STATUS SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'08'\nDSKNDISP DC    AL2(DALNDISP)           DATA SET NORMAL DISPOSITION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'08'\nDSKCDISP DC    AL2(DALCDISP)           DATA SET CONDITIONAL DISPOSITION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'08'\nDSKRECFM DC    AL2(DALRECFM)           RECFM SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'50'\n         EJECT\n***********************************************************************\n*              TAPE DATA SET ALLOCATION TEXT UNITS\n*     NEWRDER  DD  DSN=CICSA.DFHJ01.TAPEBKP(+1),\n*                  DISP=(NEW,CATLG,DELETE),\n*                  UNIT=TAPE3480,\n*                  DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)\n*                               OR\n*     SYSUT2   DD  DSN=CICSA.DFHJ01.TAPEBKP(+1),\n*                  DISP=(NEW,CATLG,DELETE),\n*                  UNIT=TAPE3480,\n*                  DCB=(BLKSIZE=31165,DSORG=PS,LRECL=6233,RECFM=VB)\n***********************************************************************\nDFSTAPDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    CL8'NEWRDER'\nLTAPDD   EQU   *-DFSTAPDD              LENGTH OF TAPE DDNAME\nIEBTAPDD DC    AL2(DALDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    CL8'SYSUT2'\nTAPDSNAM DC    AL2(DALDSNAM)           DSNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0014'\n         DC    C'CICSA.DFHJ01.TAPEBKP'\nLTAPDSN  EQU   *-TAPDSNAM              LENGTH OF TAPE DSNAME\nTAPMEMBR DC    AL2(DALMEMBR)           GENERATION SPECIFICATION\n         DC    X'0001'\n         DC    X'0002'\n         DC    C'+1'\nTAPSTATS DC    AL2(DALSTATS)           DATA SET STATUS SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'04'\nTAPNDISP DC    AL2(DALNDISP)           DATA SET NORMAL DISPOSITION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'02'\nTAPCDISP DC    AL2(DALCDISP)           DATA SET CONDITIONAL DISPOSITION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'04'\nTAPUNIT  DC    AL2(DALUNIT)            UNIT DESCRIPTION SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    C'TAPE3480'\nTAPDCBDS DC    AL2(DALDCBDS)           DCB DSN REFERENCE SPECIFICATION\n         DC    X'0001'\n         DC    X'000D'\n         DC    C'DLX1.MODLDSCB'\nTAPBLKSZ DC    AL2(DALBLKSZ)           BLKSIZE SPECIFICATION\n         DC    X'0001'\n         DC    X'0002'\n         DC    X'79BD'\nTAPDSORG DC    AL2(DALDSORG)           DSORG SPECIFICATION\n         DC    X'0001'\n         DC    X'0002'\n         DC    X'4000'\nTAPLRECL DC    AL2(DALLRECL)           LRECL SPECIFICATION\n         DC    X'0001'\n         DC    X'0002'\n         DC    X'1859'\nTAPRECFM DC    AL2(DALRECFM)           RECFM SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'50'\n         EJECT\n***********************************************************************\n*        LIST FORM OF WTO\n***********************************************************************\nWTOLIST1 WTO   'CICS_ JOURNAL BACKUP UTILITY (DFSULTR0) FAILED! NOTIFY +\n               SYSTEMS PROGRAMMING BEFORE REPLYING ''GO'' TO MESSAGE ID+\n                - XX           ',ROUTCDE=(01),DESC=(02),MF=L\nLWTOLST1 EQU   *-WTOLIST1\nWTOLIST2 WTO   'CICS_ JOURNAL BACKUP UTILITY (DLXCICLG) FAILED! PLEASE +\n               REPLY ''GO'' TO MESSAGE ID - XX. DO NOT NOTIFY SYSTEMS P+\n               ROGRAMMING.     ',ROUTCDE=(01),DESC=(02),MF=L\nWTOLIST3 WTO   'CICS_ JOURNAL BACKUP FAILED DUE TO DYNAMIC XXXX FILE AL+\n               LOCATION ERROR. NOTIFY SYSTEMS BEFORE REPLYING ''GO'' TO+\n                MESSAGE ID - XX',ROUTCDE=(01),DESC=(02),MF=L\nWTOLIST4 WTO   'DAIRFAIL ROUTINE ERROR. DYNALLOC CODES ARE: RETURN CODE+\n                = XX; REASON CODE = XXXX; ERROR CLASS - XXXXXXXXXXXXXXX+\n               XXXXXXXXXXXXX.',ROUTCDE=(11),MF=L\n***********************************************************************\n*        LIST FORM OF MODESET\n***********************************************************************\nMODLIST1 MODESET KEY=ZERO,MODE=SUP,MF=L\nLMODLST1 EQU   *-MODLIST1\nMODLIST2 MODESET KEY=NZERO,MODE=PROB,MF=L\nLMODLST2 EQU   *-MODLIST2\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\nSUBPOOL  EQU   230\n         EJECT\n***********************************************************************\n*        IEFZB4D2 - SVC99 TEXT UNIT MNEMONICS\n***********************************************************************\n         IEFZB4D2\n         LTORG\n         EJECT\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\n         DS    0F\nSAVEAREA DS    18F                     DLXCICLG SAVE AREA\n         DS    0F\nMGCRETN  DS    F                       MGCR RETURN CODE\n         EJECT\nMGCR     IEZMGCR DSECT=NO              MGCRPL MAPPING MACRO\n         ORG   MGCRTEXT\nTXTREPL  DS    0CL13                   CMD TEXT DFH4583 'REPLY XX,XXXX'\n         DS    CL6\nCICSID   DS    CL2\n         DS    CL1\nCICSREPL DS    CL4\n         ORG\n         DS    0H\nWTOLIST_ DS    CL(LWTOLST1)            DYNAMIC LIST FORM OF WTO MACRO\n         DS    0H\nMODLIST_ DS    CL(LMODLST1)            DYNAMIC LIST FORM OF MODESET\nWORKLEN  EQU   *-WORKAREA\n         EJECT\n***********************************************************************\n*        SVC99 DYNAMIC WORK AREA\n***********************************************************************\nS99WORK  DSECT\nLINKRETN DS    F                       LOG PGM RETURN CODE\nSVC99RTN DS    F                       SVC99 RETURN CODE\nIKJEFF02 DS    F                       PTR MSG WRITER ROUTINE(UNKNOWN)\nDFID     DS    H                       DAIRFAIL CALLER IDENTIFIER\nCONDATA1 DS    CL9                     RETURN CODE CONVERSION\nCONDATA2 DS    CL11                    REASON CODE CONVERSION\nDSKDD    DS    0H                      DISK DDNAME SPECIFICATION\n         DS    AL2(DALDDNAM)\n         DS    X'0001'\n         DS    X'0008'\n         DS    CL8'IEFRDER'\nDSKDSN   DS    0H                      DISK DSNAME SPECIFICATION\n         DS    AL2(DALDSNAM)\n         DS    XL2'0001'\n         DS    XL2'000D'\nDSKDSN2  DS    0CL13\nCICSDID  DS    CL5'CICS_'\n         DS    CL1'.'\nCICSDDD  DS    CL7'DFHJ___'\nTAPDD    DS    0H                      TAPE DDNAME SPECIFICATION\n         DS    AL2(DALDDNAM)\n         DS    X'0001'\n         DS    X'0008'\n         DS    CL8'NEWRDER'\nTAPDSN   DS    0H                      TAPE DSNAME SPECIFICATION\n         DS    AL2(DALDSNAM)\n         DS    XL2'0001'\n         DS    XL2'0015'\nTAPDSN2  DS    0CL20\nCICSTID  DS    CL5'CICS_'\n         DS    CL1'.'\nCICSTDD  DS    CL6'DFHJ__'\n         DS    CL1'.'\n         DS    CL7'TAPEBKP'\nLINKLIST DS    F\nLINKLST  DS    0F\nPARMLEN  DS    H'16'                   LENGTH OF PARAMETER LIST\nPARMSOUT DS    CL16'DBRC=NO,CICS=YES'  PARAMETER LIST\n         IKJEFFDF DFDSECT=NO,DFDSEC2=NO    DAIRFAIL MAPPING MACRO\nDEVTYPE  DS    CL4                     INDICATE 'DISK' OR 'TAPE'\nDYNALRTN DS    CL2                     DYNALLOC RETURN CODE (OUTPUT)\nDYNALRSN DS    CL4                     DYNALLOC REASON CODE (OUTPUT)\nDYNALCLS DS    CL28                    DYNALLOC ERROR CLASS (OUTPUT)\nNONRBEND EQU   *\n***********************************************************************\n*        IEFZB4D0 - SVC99 SYMBOLIC NAMES\n***********************************************************************\n         IEFZB4D0\nRBLEN    EQU   (S99RBEND-S99RB)        LENGTH OF RB\nNONRBLEN EQU   (NONRBEND-S99WORK)      LENGTH OF NON-RB DATA\nS99RBTOT EQU   (RBLEN+25*4)            LEN OF RB + 25 TEXT UNIT ADDRS\nS99WKTOT EQU   (S99RBTOT+NONRBLEN)     LEN OF RB + 25 TEXT UNIT ADDRS\n*                                      & ALL NEEDED FOR DYNALLOC\n***********************************************************************\n*        MAPPING OF PARAMETER LIST\n***********************************************************************\nPARMSIN  DSECT\nCICSJOB  DS    CL5                     CICS_ JOB NAME\nDDNAME   DS    CL7                     CICS_ DDNAME\nLOGPGM   DS    CL8                     DFSULTR0 OR IEBGENER\nREPLINFO DS    0CL5                    MESSAGE REPLY INFORMATION\nREPLID   DS    CL2                     MESSAGE REPLY ID\nREPLONLY DS    CL3                     INDICATE IF FILES ARE TO BE\n*                                      ALLOCATED AND BACKUP RUN\nREPLY    DS    CL4                     MESSAGE REPLY TEXT\nPARMSLEN EQU   *-PARMSIN\n         END   DLXCICLG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXCMD": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00o\\x00o\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "DELUXE"}, "text": "*          DATA SET CBT1081    AT LEVEL 001 AS OF 05/28/80\nDLXCMD   TITLE 'DLXCMD  --  ISSUE SYSTEM OPERATOR COMMANDS V2.0'\n***********************************************************************\n*                                                                     *\n*                           C O M M A N D                             *\n*                                                                     *\n*                   ISSUE SYSTEM OPERATOR COMMANDS                    *\n*                                                                     *\n*                                                                     *\n*     THIS PROGRAM ACCEPTS SYSTEM OR JES OPERATOR COMMANDS AS         *\n*     INPUT AND EXECUTES THEM USING SVC 34. IT MUST BE APF            *\n*     AUTHORIZED.                                                     *\n*                                                                     *\n*     COMMAND CAN OPERATE IN THE FOLLOWING MODE:                      *\n*                                                                     *\n*     1) BATCH PROGRAM                                                *\n*        IN THIS MODE COMMAND ACCEPTS INPUT AS A SINGLE COMMAND       *\n*        FROM THE PARM FIELD.  THE RESPONSE TO THE OPERATOR COMMAND   *\n*        WILL APPEAR ON ALL OPERATOR CONSOLES.  FOR EXAMPLE:          *\n*                                                                     *\n*   //STEP1    EXEC PGM=DLXCMD,PARM='NSEC,VARY 017,ONLINE'            *\n*                                                                     *\n***********************************************************************\n         EJECT\nDLXCMD   CSECT\n         SPACE 3\nR0       EQU   0                  REGISTER 0\nR1       EQU   1                  REGISTER 1\nR2       EQU   2                  WORK REGISTER\nR3       EQU   3                  WORK REGISTER\nR4       EQU   4                  WORK REGISTER\nR10      EQU   10                 PARAMETER LIST ADDRESS REGISTER\nR11      EQU   11                 SUBROUTINE LINKAGE REGISTER\nR12      EQU   12                 BASE REGISTER\nR13      EQU   13                 SAVE AREA ADDRESS REGISTER\nR14      EQU   14                 REGISTER 14\nR15      EQU   15                 REGISTER 15\n         EJECT\n         SAVE  (14,12)            SAVE CALLER'S REGISTERS\n         LR    R12,R15            ESTABLISH\n         USING DLXCMD,R12         ADDRESSABILITY\n         LA    R3,SAVEAREA        GET OUR SAVEAREA ADDRESS\n         ST    R13,SAVEAREA+4     ESTABLISH BACK\n         ST    R3,8(R13)          AND FORWARD SAVEAREA POINTERS\n         LR    R13,R3             ESTABLISH OUR SAVEAREA ADDRESS\n         LR    R10,R1             SAVE PARAMETER REGISTER\n         SPACE 3\nINITDONE DS    0H                 CHECK OUT INPUT PARM\n***********************************************************************\n*                                                                     *\n*     ONLY ONE PARM WAS PASSED, SO WE ARE BEING CALLED IN MODE 1.     *\n*     JUST ISSUE THE COMMAND FROM THE PARM STRING.                    *\n*                                                                     *\n***********************************************************************\nONEPARM  L     R10,0(R10)         GET PARAMETER ADDRESS\n         LH    R3,0(R10)          GET PARAMETER TEXT LENGTH\n         LTR   R3,R3              IS PARAMETER TEXT PRESENT?\n         BZ    EOJ                NO - JUST QUIT\n         TM    2(R10),X'F0'       IS IT NUMERIC?\n         BNO   EOJ                NO JUST QUIT\n         TM    3(R10),X'F0'       IS IT NUMERIC?\n         BNO   EOJ                NO JUST QUIT\n         TM    4(R10),X'F0'       IS IT NUMERIC?\n         BNO   EOJ                NO JUST QUIT\n         TM    5(R10),X'F0'       IS IT NUMERIC?\n         BNO   EOJ                NO JUST QUIT\n         TM    6(R10),C','        IS IT DELIMITER:\n         BNO   EOJ                NO JUST QUIT\n         MVC   PARMTIME(4),2(R10) MOVE TIME VALUE\n         SH    R3,=H'6'           DECREMENT R3 FOR USE IN EXECUTE\n         MVC   CARD(*-*),7(R10)   MOVE PARM TEXT INTO SVC 34 LIST\n         EX    R3,*-6             EXECUTE MVC\n         LA    R3,5(R3)           TEXT PLUS PLIST LENGTH\n         STH   R3,CMDLIST         SET SVC 34 LIST LENGTH\n         PACK  WORK,PARMTIME      PACK IT\n         OI    WORK+7,X'0F'       STRIP SIGN\n         CVB   R3,WORK            GET IT IN BINARY\n         MH    R3,=H'100'         GET IT IN HUNDREDTHS OF A SECOND\n         ST    R3,NUMSEC          STORE NUMBER OF SECONDS TO WAIT\n         STIMER WAIT,BINTVL=NUMSEC  WAIT SPECIFIED LENGTH OF TIME\n         B     SVC34              GO ISSUE COMMAND\n         SPACE 3\nEOJ      L     R13,SAVEAREA+4     GET ADDRESS OF CALLER'S SAVEAREA\n         RETURN (14,12),RC=0      RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*     THIS ROUTINE ACTUALLY ISSUES THE SVC 34.                        *\n*                                                                     *\n***********************************************************************\nSVC34    DS    0H                 GET SET TO ISSUE THE COMMAND\n         MODESET KEY=ZERO         INDICATE KEY=ZERO\n         SLR   R0,R0              LOAD R0 FOR SVC34 WITH ZEROS\n         LA    R1,CMDLIST         GET ADDRESS OF SVC 34 LIST\n         SVC   34                 ISSUE SVC 34 TO PROCESS COMMAND\n         MODESET KEY=NZERO        GO BACK TO USER KEY\n         SPACE\nSVC34END DS    0H                 END OF COMMAND ROUTINE\n         B     EOJ                GO TO EOJ\n         EJECT\nSAVEAREA DC    18F'0'             OUR SAVEAREA\n         SPACE\n         CNOP  4,8                ALIGN TO MIDDLE OF DOUBLE WORD\nCMDLIST  DC    AL2(*-*,0)         SVC 34 LIST\nCARD     DC    CL101' '           COMMAND TEXT\nPARMTIME DC    CL4' '             TIME FROM PARM\nWORK     DS    D                  WORK FIELD FOR PACK\nNUMSEC   DC    A(0)               BINTVL VALUE FOR STIMER\n         SPACE 3\n         LTORG                    BEGIN LITERAL POOL\n         END   DLXCMD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXCMDUX": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x82\\x00\\x82\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 130, "newlines": 130, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 COMMAND SCREEN USER EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 CMD SCREEN USER EXIT 255                     *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE WILL SET AUTHORIZATION     *\n*       FOR S XXXRN,N=PROCNAME COMMANDS THAT ARE                     *\n*       COMING FROM RN AND DIRECTED AT ADMIN TO ALLOW. THIS          *\n*       WILL BE DONE BY ANDING THE CMBFLAG FIELD WITH X'F0' WHICH    *\n*       WILL ALLOW ALL COMMANDS.  IN ALL OTHER CASES THE EXIT WILL   *\n*       SIMPLY RETURN AND ALLOW JES2 TO DO THE AUTHORITY CHECKING.   *\n*                                                                    *\n*    ENTRY POINT = DLXUX255                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0-3  N/A                                                    *\n*       R4    ADDRESS OF THE CMB                                     *\n*       R5-10 N/A                                                    *\n*       R11   ADDRESS OF THE JES2 HCT                                *\n*       R12   N/A                                                    *\n*       R13   N/A                                                    *\n*       R14   RETURN ADDRESS                                         *\n*       R15   ENTRY ADDRESS                                          *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH NORMAL $WTO PROCESSING               *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nDLXCMDUX $MODULE $BUFFER,                                              +\n               $CAT,                    REQ'D BY HCT                   +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $CMB,                    CONSOLE MESSAGE BUFFER MAPPING +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D BY $CAT                  +\n               $JQE,                    REQ'D BY HCT                   +\n               $MIT,                    REQ'D BY $MODEND               +\n               $PCE                     REQ'D BY HCT                   +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE JES2 COMMAND SCREEN USER EXIT '\n         SPACE 1\nDLXUX255 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         USING CMB,R4                   ADDRESSABILITY TO CMB\n         SLR   R15,R15\n         TM    CMBFLAG,CMBFLAGC         IS IT A COMMAND?\n         BNO   RETURN                   NO QUIT\n         CLC   CMBFMNOD,=H'1'           IS IT ORIGINATING AT ADMIN?\n         BE    RETURN                   ALLOW IT\n         CLC   CMBFMNOD,=H'10'          IS IT ORIGINATING AT ELOIGNE?\n         BE    RETURN                   ALLOW IT\n         CLC   CMBTONOD,=H'1'           IS IT DESTINED FOR ADMIN?\n         BE    NOTADM1                  CONTINUE CHECKING\n         CLC   CMBTONOD,=H'10'          IS IT DESTINED FOR ELOIGNE?\n         BE    NOTADM1                  CONTINUE CHECKING\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\nNOTADM1  EQU   *\n         CLC   CMBMSG(2),=CL2'S '       IS IT A START COMMAND?\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\n         CLI   CMBMSG+5,C'R'            IS IT A REGIONAL STC?\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\n         TM    CMBMSG+6,X'F0'           IS IT NUMERIC?\n         BNO   RETURN                   GREATER THAN 8; LET JES DO IT\n         CLC   CMBMSG+7(3),=CL3',N='    IS IT THE CORRECT FORMAT?\n         BNE   RETURN                   LET JES2 FIGURE IT OUT\n         CLI   CMBFMNOD+1,X'02'         IS IT NODE 2?\n         BE    CK8                      NODE 2 IS REGION 8\n         CLI   CMBFMNOD+1,X'03'         IS IT NODE 3?\n         BE    CK2                      NODE 3 IS REGION 2\n         CLI   CMBFMNOD+1,X'04'         IS IT NODE 4?\n         BE    CK4                      NODE 4 IS REGION 4\n         CLI   CMBFMNOD+1,X'05'         IS IT NODE 5?\n         BE    CK1                      NODE 5 IS REGION 1\n         CLI   CMBFMNOD+1,X'06'         IS IT NODE 6?\n         BE    CK5                      NODE 6 IS REGION 5\n         CLI   CMBFMNOD+1,X'07'         IS IT NODE 7?\n         BE    CK7                      NODE 7 IS REGION 7\n         CLI   CMBFMNOD+1,X'08'         IS IT NODE 8?\n         BE    CK6                      NODE 8 IS REGION 6\n         CLI   CMBFMNOD+1,X'09'         IS IT NODE 9?\n         BE    CK3                      NODE 9 IS REGION 3\n         B     RETURN                   GET OUT\nCK1      EQU   *                        REGION 1 CHECK\n         CLI   CMBMSG+6,C'1'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCK2      EQU   *                        REGION 2 CHECK\n         CLI   CMBMSG+6,C'2'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCK3      EQU   *                        REGION 3 CHECK\n         CLI   CMBMSG+6,C'3'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCK4      EQU   *                        REGION 4 CHECK\n         CLI   CMBMSG+6,C'4'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCK5      EQU   *                        REGION 5 CHECK\n         CLI   CMBMSG+6,C'5'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCK6      EQU   *                        REGION 6 CHECK\n         CLI   CMBMSG+6,C'6'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCK7      EQU   *                        REGION 7 CHECK\n         CLI   CMBMSG+6,C'7'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nCK8      EQU   *                        REGION 8 CHECK\n         CLI   CMBMSG+6,C'8'            IS THIS FOR THEMSELVES?\n         BE    OKIT                     YES ALLOW IT\n         B     RETURN                   OTHERWISE JES2 WILL NIX IT\nOKIT     EQU   *\n         NI    CMBFLAG,X'F0'            SAY IT IS OK TO ISSUE COMMAND\nRETURN   EQU   *\n         $RETURN RC=(R15)               RETURN TO CALLER\n         SPACE 1\n         LTORG\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXEXTNT": {"ttr": 2818, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x02\\x01\\x02\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 258, "newlines": 258, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXEXTNT -- EXTEND A KSDS VSAM DATASET'\n*                                                                     *\n*         MODULE NAME = DLXEXTNT                                      *\n*                                                                     *\n*         FUNCTION =                                                  *\n*             WRITE RECORDS TO A NEWLY-ALLOCATED VSAM FILE            *\n*             UNTIL A SECONDARY EXTENT IS ALLOCATED.                  *\n*                                                                     *\n*         OPERATION =                                                 *\n*             CHECK FOR VALID DD CARD IN PARM INFO                    *\n*             GENERATE ACB FOR FILE                                   *\n*             OPEN THE FILE                                           *\n*             TEST ACB TO BE SURE IT'S A KSDS                         *\n*             SHOW ACB TO GET KEY LENGTH, KEY OFFSET, REC LENGTH      *\n*             GET STORAGE FOR RECORD BUFFER                           *\n*             GENERATE RPL FOR UPDATE                                 *\n*             PUT RECORDS INTO FILE, INCREMENTING KEY                 *\n*             AFTER EVERY SUCCESSFUL PUT, CHECK REASON CODE IN        *\n*                 RPL FEEDBACK WORK FOR ALLOCATION OF STORAGE         *\n*             CLOSE FILE                                              *\n*             FREE STORAGE                                            *\n*             EXIT                                                    *\n*                                                                     *\n*         NOTES =                                                     *\n*                                                                     *\n*         THIS PROGRAM IS FOR USE ON KSDS FILES ONLY.                 *\n*                                                                     *\n*         REGISTER USAGE =                                            *\n*             R0  - STANDARD                                          *\n*             R1  - \"                                                 *\n*             R2  - WORK                                              *\n*             R3  - WORK THEN STORE ADDRESS OF GETMAIN STORAGE        *\n*             R4  - STORE RECORD LENGTH                               *\n*             R5  - STORE RPL ADDRESS                                 *\n*             R6  - WORK AND THEN STORE ACB ADDRESS                   *\n*             R7  - WORK, THEN ADDR OF KEY IN GETMAIN STORAGE         *\n*             R8  -                                                   *\n*             R9  - INCREMENTED FOR RECORD KEY                        *\n*             R10 - WORK                                              *\n*             R11 -                                                   *\n*             R12 - BASE REGISTER                                     *\n*             R13 - STANDARD                                          *\n*             R14 -    \"                                              *\n*             R15 -    \"                                              *\n*                                                                     *\n*         MACROS =                                                    *\n*             SAVE, OPEN, GENCB, SHOWCB, TESTCB, GETMAIN,             *\n*             FREEMAIN, PUT, CLOSE, RETURN                            *\n*                                                                     *\n*         CHANGE ACTIVITY =                                           *\n*             02/26/86  WRITTEN.      LH.                             *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*          //STEP01  EXEC PGM=DLXEXTNT,PARM='VSAMDS'                  *\n*          //VSAMDS  DD DSN=DSV.DSV002.A714.F04,DISP=SHR              *\n*                                                                     *\n*                                                                     *\nDLXEXTNT CSECT\n         SAVE  (14,12),,DLXEXTNT_EXTND_ANY_KSDS_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXEXTNT,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         L     R10,0(R1)                LOAD ADDRESS OF PARAMETERS\n         ST    R1,PARMADD               SAVE PARM ADDRESS\n         LH    R2,0(R10)                LENGTH OF PARM TO R2\n         LTR   R2,R2                    CHECK FOR NO PARM\n         BZ    ERROR00                  IF NONE ISSUE MSG & QUIT\n         LA    R10,2(R10)               BUMP PAST LENGTH\n         BCTR  R2,R0                    DECREMENT FOR MOVE\n         EX    R2,MOVEDD                MOVE IN DDNAME\n         L     R2,16                    ADDRESS OF CVT\n         L     R2,0(R2)                 ADDRESS OF TCB ADDRESS WORDS\n         L     R2,4(R2)                 ADDRESS OF CURRENT TCB\n         L     R2,12(R2)                ADDRESS OF THIS TCB 'S TIOT\n         LA    R2,24(R2)                ADDRESS OF START OF DD ENTRY\n         SLR   R3,R3                    ZERO R3\n         IC    R3,0(R2)                 LENGTH OF THIS ENTRY\nFINDDD1  EQU   *\n         LTR   R3,R3\n         BZ    ERROR10\n         CLC   4(8,R2),DDNAME           IS IT THE PASSED DDNAME?\n         BE    DONEDD\nNEXTDD   EQU   *\n         AR    R2,R3                    BUMP TO NEXT DD ENTRY\n         IC    R3,0(R2)                 GET LENGTH OF ENTRY\n         B     FINDDD1                  LOOP\nDONEDD   EQU   *\n*        AT THIS POINT WE KNOW THAT THE DDNAME THAT WAS PASSED TO US\n*        HAS A DD CARD SO WE CAN TRY TO CREATE CONTROL BLOCKS FOR IT\n*        AND OPEN IT\nGETACB   GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               CATALOG=NO,                                             X\n               COPIES=1,                                               X\n               DDNAME=(*,DDNAME),                                      X\n               MACRF=(KEY,NFX,NDF,SEQ,NCI,OUT,NIS,NRM,NRS,NUB),        X\n               STRNO=1\n         LTR   R15,R15\n         BNZ   ERROR02\n         ST    R1,ACBADDR\n         LR    R6,R1\nOPEN     OPEN  ((R6))                   OPEN THE ACB TO ADD RECORDS\n         LTR   R15,R15\n         BNZ   ERROR04\n*        OPEN WAS SUCCESSFUL SO TEST TO BE SURE IT IS A KSDS\nTESTKSDS TESTCB ACB=(R6),                                              X\n               ATRB=KSDS,                                              X\n               ERET=ERROR07\n         BNE   ERROR09\n*        THIS IS A KSDS SO LET'S FIND THE KEY LENGTH AND OFFSET AND\n*                THE RECORD LENGTH\n         SHOWCB ACB=(R6),                                              X\n               AREA=SHOWFLD,                                           X\n               LENGTH=16,                                              X\n               FIELDS=(ERROR,KEYLEN,LRECL,RKP)\n         LTR   R15,R15\n         BNZ   ERROR05\n*        SHOWCB WAS SUCCESSFUL SO LET'S GET STORAGE AREA\n         L     R4,RECLEN                 LOAD RECORD LENGTH TO R4\nGETSTOR  GETMAIN R,LV=(R4)\n         LR    R3,R1                     LOAD STORAGE ADDR TO R3\n*        TIME TO GENERATE RPL FOR UPDATE\nGETRPL   GENCB BLK=RPL,                                                X\n               ACB=(R6),                                               X\n               AM=VSAM,                                                X\n               AREA=(R3),                                              X\n               AREALEN=(R4),                                           X\n               RECLEN=(R4),                                            X\n               COPIES=1,                                               X\n               OPTCD=(KEY,SEQ,ARD,FWD,SYN,NUP,MVE)\n         LTR   R15,R15\n         BNZ   ERROR03\n         ST    R1,RPLADDR\n         LR    R5,R1                 LOAD ADDRESS OF RPL TO R5\n*   RPL GEN IS GOOD, NOW ZERO OUT KEY AND WRITE RECS, INCREMENTING KEY\n         LR    R7,R3\n         AH    R7,KEYDISP            GET STARTING ADDRESS OF KEY\n         MVI   0(R7),C'0'            MOVE 0 TO FIRST CHARACTER\n         L     R2,KEYYLEN            CALC KEY LENGTH\n         SH    R2,=H'2'                    MINUS 2 FOR PROPAGATION\n         EX    R2,ZEROKEY\n         SLR   R9,R9                 ZERO-OUT REGISTER FOR KEY INCR\nPUTREC   EQU   *                     BEGINNING OF LOOP TO WRITE RECS\n         LA    R9,1(R9)              INCREMENT REGISTER FOR KEY,\n         STCM  R9,B'1111',0(R7)      THEN STORE IN KEY\n         PUT   RPL=(R5)              WRITE REC, KEY=INCREMENTED VALUE\n         LTR   R15,R15\n         BNZ   ERROR08\n         SHOWCB RPL=(R5),                                              X\n               AREA=SHOWFLD2,                                          X\n               LENGTH=4,                                               X\n               FIELDS=(FDBK)\n         LTR   R15,R15\n         BNZ   ERROR5B\n         CLI   FEEDBACK+3,X'04'    HAS ADDITIONAL SPACE BEEN ALLOCATED?\n         BE    CLOSE                 IF SO, FINISH UP\n         B     PUTREC                OTHERWISE, WRITE ANOTHER RECORD\n*\n* BEGINNING OF EPILOGUE\nCLOSE    CLOSE ((R6))                CLOSE FILE\n         LTR   R15,R15\n         BNZ   ERROR06\n*                                    RELEASE STORAGE\nFREESTOR FREEMAIN R,LV=(R4),A=(R3)\n         ICM   R15,B'0001',RCODE        LOAD RETURN CODE\n         L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS\n* END OF EPILOGUE\n*\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nMOVEDD   MVC   DDNAME(*-*),0(R10)       MOVE IN DDNAME\nZEROKEY  MVC   1(0,R7),0(R7)            PROPAGATE ZERO THROUGHOUT KEY\nACBADDR  DS    F                        ADDRESS OF ACB\nRPLADDR  DS    F                        ADDRESS OF RPL\nRECADDR  DS    F                        ADDRESS OF RECORD WITHIN BUFFER\nPARMADD  DS    F                        ADDRESS OF PARAMETER LIST\nSHOWFLD  DS    0F                       HOLD AREA FOR SHOWCB\nERRCODE  DS    F                        ERROR\nKEYYLEN  DS    F                        KEYLEN\nRECLEN   DS    F                        LRECL\nKEYDISP  DS    F                        RKP (KEY DISPLACEMENT)\nSHOWFLD2 DS    0F                       HOLD AREA FOR SHOWCB 2\nFEEDBACK DS    F                        EXTENTS AFTER WRITING RECORDS\nDDNAME   DC    CL8' '                   HOLD AREA FOR DDNAME\nRCODE    DC    XL1'00'                  PROGRAM RETURN CODE\n         DS    0F\n         PRINT NOGEN\nERROR00  EQU   *\n         WTO   'DLXEXTNT00  DLXEXTNT DDNAME PARM MISSING'              X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     FREESTOR\nERROR01  EQU   *\n         WTO   'DLXEXTNT01 TESTCB OF AN ACB FAILED',                   X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     CLOSE\nERROR02  EQU   *\n         WTO   'DLXENTNT02 GENCB FOR AN ACB FAILED',                   X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     FREESTOR\nERROR03  EQU   *\n         WTO   'DLXEXTNT03 GENCB FOR AN RPL FAILED',                   X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     FREESTOR\nERROR04  EQU   *\n         WTO   'DLXEXTNT04 OPEN FOR AN ACB FAILED',                    X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     FREESTOR\nERROR05  EQU   *\n         WTO   'DLXEXTNT05 SHOWCB FOR AN ACB FAILED',                  X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     CLOSE\nERROR5B  EQU   *\n         WTO   'DLXEXTNT5B SHOWCB FOR AN RPL FAILED',                  X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     CLOSE\nERROR06  EQU   *\n         WTO   'DLXEXTNT06 CLOSE OF AN ACB FAILED',                    X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     FREESTOR\nERROR07  EQU   *\n         WTO   'DLXEXTNT07 TESTCB OF AN ACB FAILED',                   X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     CLOSE\nERROR08  EQU   *\n         WTO   'DLXEXTNT08 PUT OF RECORD FAILED',                      X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     CLOSE\nERROR09  EQU   *\n         WTO   'DLXEXTNT09 DDNAME DOES NOT SPECIFY A KSDS FILE',       X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     CLOSE\nERROR10  EQU   *\n         WTO   'DLXEXTNT10  DLXEXTNT DD CARD MISSING OR MISSPELLED'    X\n               ROUTCDE=(11)\n         MVI   RCODE,X'0C'              SET RETURN CODE 12\n         B     FREESTOR\n         PRINT GEN\n         LTORG\n         PRINT NOGEN\n         EQUATE                         REGISTER EQUATES\n*\n         PRINT GEN\n         END   DLXEXTNT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLXGENPW": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00K\\x00K\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXGENPW - GENERATE PASSWORD'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = DLXGENPW                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = GENERATE PASSWORD                    *\n*                                                                     *\n*             FUNCTION =                                              *\n*                GENERATES FROM 1 TO 9 RANDOM 8-CHARACTER             *\n*                PASSWORDS.                                           *\n*                                                                     *\n*             PARAMETER =                                             *\n*                NUMBER OF PASSWORDS TO BE GENERATED                  *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                10/30/85  WRITTEN.      BC.                          *\n*                                                                     *\n***********************************************************************\n*\nDLXGENPW CSECT\n         SAVE  (14,12),,DLXGENPW_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING DLXGENPW,R12            ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   SAVE PTR TO PARM ADDRESS\n         LA    R11,1                   DEFAULT TO 1 PASSWORD\n         L     R3,0(R2)                GET ADDRESS OF PARM\n         SLR   R4,R4\n         LH    R4,0(R3)                GET LENGTH OF PARM\n         LTR   R4,R4                   IF NO PARMS\n         BZ    CONT                    THEN CONTINUE\n         PACK  DBL,2(1,R3)             PACK PARM\n         CVB   R11,DBL                 CONVERT TO BINARY\nCONT     EQU   *\n         TIME  BIN                     GET THE TIME (IN 1/100 SECONDS)\n         LR    R7,R0                   STORE IT\n         SLR   R6,R6                   MAKE IT A DOUBLE WORD\n         D     R6,=F'262139'           DIVIDE BY 'M' REMAINDER='SEED'\n         LR    R7,R6                   SAVE REMAINDER\n         SLR   R6,R6\nNEXT     EQU   *\n         LA    R10,8                   SET TO REPEAT 8 TIMES\n         LA    R9,PASSWORD             POINT TO START OF PASSWORD\nRANDOM   EQU   *\n         M     R6,=F'5243'             MULTIPLY BY 'J'\n         A     R7,=F'55397'            ADD 'K'\n         D     R6,=F'262139'           DIVIDE BY 'M'\n         LR    R5,R6                   SAVE 'I' (SEED)\n         SLR   R4,R4                   MAKE IT A DOUBLE WORD\n         M     R4,=F'10000'            MULTIPLY SO RESULT NOT < 1\n         A     R5,=F'5000'             ADD '.5X10000'\n         D     R4,=F'262139'           DIVIDE BY 'M'\n         SLR   R4,R4                   GET RID OF REMAINDER\n         D     R4,=F'36'               DIVIDE BY 36 REMAINDER=INDEX\n         LA    R8,TABLE                POINT TO TABLE\n         AR    R8,R4                   INDEX INTO TABLE\n         MVC   0(1,R9),0(R8)           INSERT CHARACTER INTO PASSWORD\n         LA    R9,1(R9)                POINT TO NEXT POSITION\n         LR    R7,R6                   GET SEED FOR NEXT\n         SLR   R6,R6\n         BCT   R10,RANDOM              REPEAT 8 TIMES\n         TPUT  PASSWORD,8              OUTPUT THE PASSWORD\n         BCT   R11,NEXT\nEXIT     EQU   *\n         RETURN (14,12),RC=(15)\n         LTORG\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n*\nDBL      DS    D\nPASSWORD DS    CL8' '\nTABLE    DC    C'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n*\n         END   DLXGENPW\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXJCTUP": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03 \\x03 \\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 800, "newlines": 800, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXJCTUP - TSO COMMAND PROCESSOR TO UPDATE JES2 JCT AND+\n                TSO PSCB'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = DLXJCTUP                                       *\n*                                                                     *\n*        DESCRIPTIVE NAME =                                           *\n*               TSO COMMAND PROCESSOR TO UPDATE JES2 JCT AND TSO PSCB *\n*                                                                     *\n*        FUNCTION =                                                   *\n*              PROGRAM PLACES USER NAME AND ROOM NUMBER IN            *\n*              JCT AS PART OF THE 'INITIAL' CLIST PROCESSING.         *\n*              ALSO, USER NAME, ROOM NUMBER AND DEFAULT SYSOUT        *\n*              DESTINATION MAY BE UPDATED IN TSO MODE. AUTHORIZED     *\n*              USERS MAY TURN THEIR VOLUME MOUNT AUTHORIZATION        *\n*              CONTROL ON OR OFF.                                     *\n*                                                                     *\n*        OPERATION =                                                  *\n*              SAVE REGISTERS AND ESTABLISH ADDRESSABILITY            *\n*              GETMAIN DYNAMIC STORAGE                                *\n*              ESTABLISH ADDRESSABILITY TO ACEE                       *\n*              GET THE PROGRAMMER NAME FROM THE ACEE                  *\n*              GET THE ROOM NUMBER FROM THE INSTALLATION SUPPLIED     *\n*                  USER DATA POINTED TO BY THE ACEE                   *\n*              IF 'NAME' KEYWORD IS SPECIFIED:                        *\n*                  USE VALUE PASSED TO UPDATE THE PROGRAMMER NAME     *\n*                  OBTAINED FROM THE ACEE                             *\n*              IF 'ROOM' KEYWORD IS SPECIFIED:                        *\n*                  USE VALUE PASSED TO UPDATE THE ROOM NUMBER         *\n*                  OBTAINED FROM THE ACEE                             *\n*              INSERT NAME AND ROOM NUMBER INTO JCT                   *\n*              ESTABLISH ADDRESSABILITY TO TSO PSCB                   *\n*              IF 'MOUNT' KEYWORD IS SPECIFIED AND USER DOESN'T       *\n*                  HAVE READ ACCESS TO APPL OF 'MOUNT', PROCEED       *\n*                  TO PROCESS DEST KEYWORD.                           *\n*              IF 'MOUNT' KEYWORD IS SPECIFIED:                       *\n*                  FOR VALUE OF 'ON', TURN VOL MOUNT AUTH ON          *\n*                  FOR VALUE OF 'OFF', TURN VOL MOUNT AUTH OFF        *\n*              IF 'DEST' KEYWORD IS SPECIFIED:                        *\n*                  CHANGE SYSOUT DESTINATION TO DESIRED VALUE         *\n*              FREEMAIN DYNAMIC STORAGE                               *\n*              RESTORE REGISTERS                                      *\n*              RETURN                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        NOTES =                                                      *\n*                                                                     *\n*              REGISTER CONVENTIONS = STANDARD CONVENTIONS.           *\n*                  REGISTER  1      = PARAMETER LIST POINTER          *\n*                  REGISTER  2      = ADDRESSABILITY TO GNRLFAIL      *\n*                  REGISTER  3      = ADDRESSABILITY TO PSCB & JCT    *\n*                  REGISTERS 4 - 10 = WORK REGISTERS                  *\n*                  REGISTER  11     = BAL REGISTER                    *\n*                  REGISTER  12     = BASE REGISTER                   *\n*                  REGISTER  13     = SAVE AREA POINTER               *\n*                  REGISTER  14     = RETURN                          *\n*                  REGISTER  15     = ENTRY POINT ADDRESS AND         *\n*                                     RETURN CODE REGISTER            *\n*                                                                     *\n*        MACROS =                                                     *\n*              SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN,               *\n*              RACHECK, CALLTSSR, IKJRLSA, ABEND, LINK,               *\n*              PUTGET, MODESET, IEFSSREQ                              *\n*                                                                     *\n*        MAPPING MACROS USED =                                        *\n*              CVT, IHAASCB, IHAASXB, IHAACEE, IKJEFFGF, IKJCPPL,     *\n*              IKJPARM, IKJPPL, IKJTCB, IEZJSCB, IEFJSSIB, IKJIOPL,   *\n*              IKJPSCB, $SJB, $JCT, $BUFFER, IEFJSSOB, IEFJESCT       *\n*                                                                     *\n*        ASSEMBLER OPTIONS = LIST,RENT                                *\n*                                                                     *\n*        LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,REFR,AC=1   *\n*              (MUST BE LINKED INTO AN AUTHORIZED LIBRARY)            *\n*                                                                     *\n*        COMMAND FORMAT =                                             *\n*+-------------------------------------------------------------------+*\n*| DLXJCTUP NAME('ANY NAME') ROOM(XXXX) MOUNT(OFF/ON) DEST(XXXXXXXX) |*\n*+-------------------------------------------------------------------+*\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              10/25/85  WRITTEN.                               JWC.  *\n*                                                                     *\n*              10/29/85  CHANGED TO EXTRACT PROGRAMMER NAME AND       *\n*                        ROOM NUMBER FROM THE ACEE INSTEAD OF A       *\n*                        TABLE LOADED INTO CORE. OPTIONALLY, THE      *\n*                        PROGRAMMER NAME AND/OR ROOM NUMBER MAY       *\n*                        BE PASSED TO THE COMMAND PROCESSOR TO        *\n*                        OVERIDE INFORMATION IN THE ACEE.       JWC.  *\n*                                                                     *\n*              12/16/85  CHANGED TO ALLOW USER TO ALSO UPDATE         *\n*                        VOLUME MOUNT AUTHORIZATION CONTROL AND       *\n*                        SYSOUT DESTINATION IN TSO PSCB.        JWC.  *\n*                                                                     *\n*              08/08/85  CHANGED TO ACCOMODATE JES 2.1.5 CONTROL      *\n*                        BLOCKS.                                JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nDLXJCTUP CSECT\nDLXJCTUP AMODE ANY                     ADDRESSING MODE - ABOVE OR BELOW\n         SAVE  (14,12),,DLXJCTUP_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING DLXJCTUP,R12            ESTABLISH PGM ADDRESSABILITY\n         LR    R3,R1                   PRESERVE PTR TO CPPL CNTL BLK\n***********************************************************************\n*        GETMAIN DYNAMIC STORAGE\n***********************************************************************\nGETMAIN  DS    0H\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         GETMAIN R,LV=GFLENGF          GETMAIN GNRLFAIL PARM LIST\n         LR    R2,R1                   R2 - POINTER TO GFPARMS\n         USING GFDSECTD,R2             ADDRESSABILITY TO GFPARMS\n         ST    R3,GFCPPLP              CPPL PTR IN PARM LST TO GNRLFAIL\n         MVC   MSGNUM,FULL01           INITIALIZE TSUPMSG\n         LA    R4,TSUPMSG                  OUTPUT LINE\n         ST    R4,MSGADDR                      DESCRIPTOR (MSGOLD)\n         ST    R3,CPPLADDR             PRESERVE PTR TO CPPL CNTL BLK\n         EJECT\n***********************************************************************\n*        SET UP ADDRESSABILITY TO ACEE / EXTRACT NAME & ROOM NUMBER\n***********************************************************************\nACCEADDR DS    0H\n         L     R3,CVTPTR               R3 - ADDRESS OF CVT\n         L     R3,0(R3)                R3 - PTR TO FOUR WORD ADDR  LIST\n         L     R3,12(R3)               R3 - ADDRESS OF CURRENT ASCB\n         USING ASCB,R3                 ESTABLISH ADDRESSABILITY TO ASCB\n         L     R3,ASCBASXB             R3 - ADDRESS OF ASXB\n         USING ASXB,R3                 ESTABLISH ADDRESSABILITY TO ASXB\n         L     R3,ASXBSENV             R3 - ADDRESS OF ACEE\n         USING ACEE,R3                 ESTABLISH ADDRESSABILITY TO ACEE\n         L     R4,ACEEUNAM             R4 - ADDRESS OF PROGRAMMER NAME\n         SR    R5,R5                   CLEAR REG 5\n         ICM   R5,B'0001',0(R4)        R5 - LENGTH OF PROGRAMMER NAME\n         LA    R4,1(R4)                R4 - INCREMENT PAST LENGTH FIELD\n         CH    R5,HALF00               PROGRAMMER NAME PRESENT?\n         BNE   EXTRNAME                YES, EXTRACT IT\n         MVC   PGMRNAME,J___DOE        NO, NAME WILL BE 'JANEJOHN DOE'\n         B     CHKROOM                 CAN ROOM NUMBER BE EXTRACTED?\nEXTRNAME DS    0H\n         MVC   PGMRNAME(20),SPACES     INITIALIZE PGMRNAME\n         BCTR  R5,0                    DECREMENT LENGTH BY ONE\n         EX    R5,MVCNAME1             MOVE NAME FROM ACEE TO PGMR NAME\n         B     CHKROOM                 CHECK FOR ROOM PARM\nMVCNAME1 MVC   PGMRNAME(0),0(R4)       GET NAME FROM ACEE\nCHKROOM  DS    0H\n         L     R4,ACEEINST             R4 - ADDR OF INSTALLATION DATA\n         SR    R5,R5                   CLEAR REG 5\n         ICM   R5,B'0001',0(R4)        R5 - LENGTH OF INSTALLATION DATA\n         LA    R4,1(R4)                R4 - INCREMENT PAST LENGTH FIELD\n         CH    R5,HALF00               INSTALLATION DATA PRESENT?\n         BE    DFLTROOM                NO, SET ROOM NUMBER TO DEFAULT\n         LR    R6,R5                   COUNTER INITIALIZATION\n         CH    R6,HALF09               LENGTH OF ROOM=9999\n         BL    DFLTROOM                NO SET ROOM NUMBER TO DEFAULT\n         SH    R6,HALF09               MINUS LENGTH OF ROOM=9999\nROOMLOOP DS    0H\n         CLC   0(5,R4),ROOMEQL         'ROOM=' KEYWORD LOCATED?\n         BE    EXTROOM                 YES, EXTRACT IT\n         LA    R4,1(R4)                NO, INCREMENT INDEX\n         BCT   R6,ROOMLOOP             GO LOOK AGAIN\nDFLTROOM DS    0H\n         MVC   PGMROOM,ROOM9999        SET ROOM NUMBER TO DEFAULT\n         B     BLDPARSE                BUILD PARSE PARAMETER LISTS\nEXTROOM  DS    0H\n         LA    R4,5(R4)                SKIP PAST 'ROOM=' KEYWORD\n         MVC   PGMROOM(4),0(R4)        MOVE ROOM # TO BE PUT INTO JCT\n         EJECT\n***********************************************************************\n*        BUILD PARSE PARAMETER LISTS USING COMMAND PROCESSOR\n*            PARAMETER LIST AND INITIALIZE INPUT/OUTPUT CONTROL\n*            BLOCKS IN WORKAREA\n***********************************************************************\nBLDPARSE DS    0H\n         L     R3,CPPLADDR             R3 - ADDRESS OF CPPL\n         USING CPPL,R3                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARM LIST\n         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL\n         LA    R1,IOPLSECT             LOAD ADDRESS OF I/O PARM LIST\n         USING IOPL,R1                 ESTABLISH ADDRESSABILITY TO IOPL\n         L     R5,CPPLUPT              LOAD PTR TO USER PROFILE TABLE\n*                                      FROM CPPL\n         ST    R5,UPTADDR              STORE FOR USE BY PUTGET MACRO\n         L     R6,CPPLECT              LOAD PTR TO ENVIRONMENTAL\n*                                      CONTROL TABLE FROM CPPL\n         ST    R6,ECTADDR              STORE FOR USE BY PUTGET MACRO\n         SLR   R7,R7                   ZERO REGISTER 7\n         ST    R7,ECB                  STORE REG AS ECB FOR PPL\n         LA    R7,ECB                  LOAD ADDRESS OF ECB\n         STM   R5,R7,PPLSECT           STORE ADDRESS OF UPT,ECT, AND\n*                                      ECB IN PPL\n         STM   R5,R7,IOPLSECT          STORE ADDRESS OF UPT,ECT, AND\n*                                      ECB IN IOPL\n         LA    R1,PGPB                 LOAD ADDRESS OF PUTGET\n*                                      PARAMETER BLOCK\n         ST    R1,IOPLIOPB             STORE IOPB ADDRESS IN IOPL\n         MVC   PPLPCL,PCLADDR          MOVE PTR TO PARAMETER CONTROL\n*                                      LIST INTO PPL\n         LA    R5,PARSBACK             LOAD ADDRESS OF FULLWORD TO\n*                                      CONTAIN ADDRESS OF PDE RETURNED\n*                                      BY PARSE\n         ST    R5,PPLANS               STORE PTR TO RETURN ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE PTR TO CMD BUFFER INTO PPL\n         LA    R5,PPLUWA               LOAD ADDRESS OF USER WORKAREA\n         ST    R5,PPLUWA               STORE ADDRESS IN PPL\n         DROP  R1,R3,R4                DROP ADDRESSABILITY TO IOPL,\n*                                      CPPL AND PPL\n         EJECT\n***********************************************************************\n*        CALLTSSR TO PARSE; ON RETURN PARSBACK ---> PDL\n*        USE GNRLFAIL SERVICE ROUTINE TO HANDLE ALL ERROR CODES\n***********************************************************************\nCALLTSSR DS    0H\n         CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)\n         LTR   R15,R15                 SEE IF RETURN CODE ZERO\n         BZ    PDLADDR                 YES, CONTINUE PROCESSING\n         C     R15,FULL04              IS PARSE RCODE = X'04'?\n         BE    SETABEND                YES, SET GFCALLID = GFABEND\n         C     R15,FULL20              IS PARSE RCODE = X'20'?\n         BE    SETABEND                YES, SET GFCALLID = GFABEND\n         MVI   GFCALLID+1,GFPARSE      PARSE SERVICE ROUTINE ERROR\n         B     GNRLFAIL                PROCESS ERROR CODE\nSETABEND DS    0H\n         MVI   GFCALLID+1,GFABEND      ISSUE ABEND MESSAGE\n         EJECT\n***********************************************************************\n*        GENERAL FAIL SERVICE ROUTINE\n***********************************************************************\nGNRLFAIL DS    0H\n         ST    R15,GFRCODE             STORE RETURN CODE FOR GNRLFAIL\n         MVC   GFPGMNL(2),HALF08       PROGRAM LENGTH TO GNRLFAIL PARM\n         LA    R1,PGMNAME              R15 - ADDRESS OF PROGRAM NAME\n         ST    R1,GFPGMNP              ADDR OF PGMNAME TO GNRLFAIL PARM\n         LA    R1,GFPARMS              R1 - ADDRESS OF PARAMETER LIST\n         ST    R1,GFPADDR              STORE ADDRESS OF GFPARMS\n         LA    R1,GFPADDR              R1 - ADDR OF POINTER TO GFPARMS\n         LINK  EP=IKJEFF19,                                            +\n               MF=(E,(R1))             LINK TO GNRLFAIL TO PROCESS RC\n         LTR   R15,R15                 GNRLFAIL PROCESS OK?\n         BZ    FINISH                  YES, FREE STORAGE AND RETURN\n         ABEND 400,DUMP                OH NO! GNRLFAIL FAILED!!!!!!!!!\n***********************************************************************\n*        SET UP ADDRESSABILITY TO PDL\n***********************************************************************\nPDLADDR  DS    0H\n         L     R5,PARSBACK             LOAD PTR TO PARS ANSWER\n         USING IKJPARMD,R5             ESTABLISH ADDRESSABILITY TO PDL\n***********************************************************************\n*        CHECK VALUE OF 'NAME' KEYWORD\n***********************************************************************\nNAMEPARM DS    0H\n         LA    R6,NAME                 LOAD PTR TO NAME KEYWORD\n         CLI   1(R6),X'00'             'NAME' KEYWORD ENTERED?\n         BE    ROOMPARM                NO, CHECK FOR ROOM NUMBER\n         LA    R6,NAMEPGMR             LOAD POINTER TO PGMMER NAME ADDR\n         L     R7,0(R6)                SET UP PTR TO PROGRAMMER NAME\n         LH    R8,4(R6)                SET UP LENGTH OF PROGRAMMER NAME\n         BCTR  R8,0                    DECREMENT LENGTH BY ONE\n         MVC   PGMRNAME(20),SPACES     CLEAR PROGRAMMER NAME\n         EX    R8,MVCNAME2             MOVE REQUESTED PARM TO PGMR NAME\n         B     ROOMPARM                CHECK FOR ROOM PARM\nMVCNAME2 MVC   PGMRNAME(0),0(R7)       GET NAME FROM COMMAND\n         EJECT\n***********************************************************************\n*        CHECK VALUE OF 'ROOM' KEYWORD\n***********************************************************************\nROOMPARM DS    0H\n         LA    R6,ROOM                 LOAD PTR TO ROOM KEYWORD\n         CLI   1(R6),X'00'             'ROOM' KEYWORD ENTERED?\n         BE    JCTINSRT                NO, INSERT INFORMATION INTO JCT\n         LA    R6,ROOMPGMR             LOAD POINTER TO PGMMER ROOM #\n         L     R7,0(R6)                SET UP PTR TO ROOM NUMBER\n         LH    R8,4(R6)                SET UP LENGTH OF ROOM NUMBER\n         BCTR  R8,0                    DECREMENT LENGTH BY ONE\n         MVC   PGMROOM(4),SPACES       CLEAR ROOM NUMBER\n         EX    R8,MVCROOM2             MOVE REQUESTED PARM TO ROOM #\n         B     JCTINSRT                INSERT INFORMATION INTO JCT\nMVCROOM2 MVC   PGMROOM(0),0(R7)        GET ROOM FROM COMMAND\n***********************************************************************\n*        ESTABLISH ADDRESSABILITY TO JCT - INSERT PGMER NAME & ROOM #\n***********************************************************************\nJCTINSRT DS    0H\n         L     R3,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R3,0(R3)                LOAD ADDR OF NEXT/CURR TCB'S\n         L     R3,OURTCB(R3)           LOAD ADDR OF OUT TCB\n         USING TCB,R3                  ESTABLISH ADDRESSABILITY - TCB\n         L     R3,TCBJSCB              LOAD ADDR OF JSCB\n         USING IEZJSCB,R3              ESTABLISH ADDRESSABILITY - JSCB\n         L     R3,JSCBACT              LOAD ADDR OF ACTIVE JSCB\n         L     R3,JSCBSSIB             LOAD ADDR OF LIFE-OF-JOB SSIB\n         USING SSIB,R3                 ESTABLISH ADDRESSABILITY - SSIB\n         L     R3,SSIBSUSE             LOAD ADDR OF JES2 SJB\n         USING SJB,R3                  ESTABLISH ADDRESSABILITY - SJB\n         L     R3,SJBJCT               LOAD ADDR OF JES2 JCT\n         USING JCT,R3                  ESTABLISH ADDRESSABILITY - JCT\n         MVC   MODLIST_(LMODLST1),MODLIST1    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY ZERO)\n         MODESET MF=(E,MODLIST_)       SUPER STATE TO ALTER PSCB\n         MVC   JCTPNAME,PGMRNAME       NAME FROM TABLE ---> JCT\n         MVC   JCTROOMN,PGMROOM        ROOM # FROM TABLE ---> JCT\n         MVC   MODLIST_(LMODLST1),MODLIST2    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY NZERO)\n         MODESET MF=(E,MODLIST_)       BACK TO PROBLEM STATE\n         EJECT\n***********************************************************************\n*        ESTABLISH ADDRESSABILITY TO PSCB - PROTECTED STEP CONTROL BLK\n***********************************************************************\nPSCBADDR DS    0H\n         L     R3,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R3,0(R3)                LOAD ADDR OF NEXT/CURR TCB'S\n         L     R3,OURTCB(R3)           LOAD ADDR OF OUR TCB\n         USING TCB,R3                  ESTABLISH ADDRESSABILITY - TCB\n         L     R3,TCBJSCB              LOAD ADDR OF JSCB\n         USING IEZJSCB,R3              ESTABLISH ADDRESSABILITY - JSCB\n         L     R3,JSCBACT              LOAD ADDR OF ACTIVE JSCB\n         L     R3,JSCBPSCB             LOAD ADDR OF PSCB\n         USING PSCB,R3                 ESTABLISH ADDRESSABILITY - PSCB\n         EJECT\n***********************************************************************\n*        PERFORM MOUNT KEYWORD PROCESSING\n***********************************************************************\nMNTPARM  DS    0H\n         LA    R6,MOUNT                LOAD PTR TO MOUNT KEYWORD\n         CLI   1(R6),X'00'             'MOUNT' KEYWORD ENTERED?\n         BE    DESTPARM                NO, CHECK FOR SYSOUT DESTINATION\n         MVC   RACLIST_(RACLEN1),RACLIST1    MOVE STATIC TO DYNAMIC\n         LA    R6,MNTAPPL              R6 - ADDRESS OF 'MOUNT' APPL\n         RACHECK ENTITY=((R6)),CLASS=APPL,LOG=NOSTAT,                  +\n               MF=(E,RACLIST_)         RACHECK FOR CLASS = 'APPL'\n         LTR   R15,R15                 USER HAVE PROPER AUTHORITY?\n         BNZ   DESTPARM                NO, CHECK FOR SYSOUT DESTINATION\n         LA    R6,MOUNTAT              R6 - PTR TO MOUNT AUTH ADDR\n         L     R7,0(R6)                SET PTR TO MOUNT AUTH CNTL\n         LH    R8,4(R6)                SET LEN OF MOUNT AUTH CNTL\n         BCTR  R8,0                    DECREMENT LENGTH BY ONE\n         MVC   MNTCNTL(3),SPACES       CLEAR MOUNT AUTH CNTL\n         EX    R8,MVCMOUNT             MOVE REQUESTED PARM TO MNTCNTL\nCHKCNTL  DS    0H\n         CLC   MNTCNTL,ON              TURN ON VOL MOUNT AUTH CNTL?\n         BE    MOUNTON                 YES, TURN ON VOL MOUNT AUTH CNTL\n         CLC   MNTCNTL,OFF             TURN OFF VOL MOUNT AUTH CNTL?\n         BE    MOUNTOFF                YES, TURN OFF MOUNT AUTH CNTL\n         MVC   TSUPMSG,INFMSG1         MOVE 'INVALID VALUE' TEXT TO MSG\n         BAL   R11,PUTGET              ISSUE MESSAGE, OBTAIN NEW VALUE\n         L     R6,PGINPTR              R6 - ADDR OF PUTGET INPUT BUFFER\n         LH    R8,0(R6)                R8 - LEN OF RETURNED INPUT LINE\n         LA    R7,4(R6)                R7 - ADDRESS OF INPUT TEXT\n         S     R8,FULL04               SUBTRACT LENGTH OF HEADER\n         N     R8,FULL03               SET MAXIMUM LENGTH TO 3 BYTES\n         BCTR  R8,0                    DECREMENT LENGTH BY ONE\n         MVC   MNTCNTL(3),SPACES       CLEAR MOUNT AUTH CNTL\n         EX    R8,MVCMOUNT             MOVE INFORMATION INTO MNTCNTL\n         EX    R8,TRANMNT              TRANSLATE TEXT TO UPPERCASE\n         LH    R0,0(R6)                GET LENGTH AGAIN\n         O     R0,=X'01000000'         INDICATE SUBPOOL 1\n         FREEMAIN R,LV=(R0),A=(R6)     FREEMAIN PUTGET INPUT BUFFER\n         B     CHKCNTL                 GO CHECK MOUNT KEYWORD VALUE\nMOUNTON  DS    0H\n         MVC   MODLIST_(LMODLST1),MODLIST1    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY ZERO)\n         MODESET MF=(E,MODLIST_)       SUPER STATE TO ALTER PSCB\n         OI    PSCBATR1,PSCBVMNT       TURN ON VOL MOUNT AUTH CNTL\n         MVC   MODLIST_(LMODLST1),MODLIST2    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY NZERO)\n         MODESET MF=(E,MODLIST_)       BACK TO PROBLEM STATE\n         B     DESTPARM                DEST KYWD PROCESSING, IF NEEDED\nMOUNTOFF DS    0H\n         MVC   MODLIST_(LMODLST1),MODLIST1    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY ZERO)\n         MODESET MF=(E,MODLIST_)       SUPER STATE TO ALTER PSCB\n         NI    PSCBATR1,X'EF'          TURN OFF VOL MOUNT AUTH CNTL\n         MVC   MODLIST_(LMODLST1),MODLIST2    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY NZERO)\n         MODESET MF=(E,MODLIST_)       BACK TO PROBLEM STATE\n         B     DESTPARM                DEST KYWD PROCESSING, IF NEEDED\nMVCMOUNT MVC   MNTCNTL(0),0(R7)        GET MOUNT AUTH CNTL FROM COMMAND\nTRANMNT  OC    MNTCNTL(0),SPACES       TRANSLATE TO UPPER CASE\n         EJECT\n***********************************************************************\n*        PERFORM DESTINATION KEYWORD PROCESSING\n***********************************************************************\nDESTPARM DS    0H\n         LA    R6,DEST                 LOAD PTR TO DEST KEYWORD\n         CLI   1(R6),X'00'             'DEST' KEYWORD ENTERED?\n         BE    FINISH                  NO, WE'RE FINISHED\n         LA    R6,DESTSOUT             R6 - PTR TO SYSOUT DEST ADDRESS\n         L     R7,0(R6)                SET PTR TO SYSOUT DESTINATION\n         LH    R8,4(R6)                SET LEN OF SYSOUT DESTINATION\n         BCTR  R8,0                    DECREMENT LENGTH BY ONE\n         MVC   MODLIST_(LMODLST1),MODLIST1    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY ZERO)\n         MODESET MF=(E,MODLIST_)       SUPER STATE TO ALTER PSCB\n         MVC   DESTSAVE,PSCBDEST       SAVE DEST FROM PSCB\n         MVC   PSCBDEST(8),SPACES      CLEAR SYSOUT DESTINATION\n         EX    R8,MVCDEST              PUT INFORMATION INTO PSCB\n         MVC   MODLIST_(LMODLST1),MODLIST2    MOVE LIST FORM MODESET\n*                                      STATIC TO DYNAMIC (KEY NZERO)\n         MODESET MF=(E,MODLIST_)       BACK TO PROBLEM STATE\n         B     FINISH                  WE'RE FINISHED\nMVCDEST  MVC   PSCBDEST(0),0(R7)       GET DEST FROM PARSE\n***********************************************************************\n*        CLEANUP AREAS GETMAINED FOR PARSE, DLXJCTUP AND GNRLFAIL\n*        SET RETURN CODE, RESTORE REGISTERS AND RETURN\n***********************************************************************\nFINISH   DS    0H\n         LR    R5,R15                  R5 - SAVE RETURN CODE\n         IKJRLSA PARSBACK              RELEASE VIRTUAL STORAGE\n*                                      ALLOCATED BY PARSE\n         LR    R10,R2                  R10 - ADDRESS OF GFPARMS LIST\n         FREEMAIN R,LV=GFLENGF,A=(R10)   FREEMAIN DYNAMIC STORAGE\n         LR    R10,R13                 R10 - ADDR OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN R,LV=WORKLEN,A=(R10)   FREEMAIN DYNAMIC STORAGE\n         LR    R15,R5                  R15 - RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n*        ISSUE PUTGET MACRO TO OBTAIN CORRECT KEYWORD VALUES\n***********************************************************************\nPUTGET   DS    0H\n         MVC   PGPB(PUTLEN1),PUTLIST1    MOVE STATIC TO DYNAMIC\n         L     R6,UPTADDR              R6 - ADDRESS OF UPT\n         L     R7,ECTADDR              R7 - ADDRESS OF ECT\n         LA    R8,ECB                  R8 - ADDRESS OF ECB\n         PUTGET PARM=PGPB,UPT=(R6),ECT=(R7),ECB=(R8),                  +\n               OUTPUT=(MSGOLD,SINGLE,PROMPT),                          +\n               MF=(E,IOPLSECT)\n         MVC   TSUPLINE,SPACES         CLEAR MESSAGE LINE AREA\n         BR    R11                     RETURN\n         EJECT\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nPCLADDR  DC    A(PARMTAB)\nFULL01   DC    F'01'                   FULLWORD, VALUE '1'\nFULL03   DC    F'03'                   FULLWORD, VALUE '3'\nFULL04   DC    F'04'                   FULLWORD, VALUE '4' (RETNCODE)\nFULL08   DC    F'08'                   FULLWORD, VALUE '8' (DEST LEN)\nFULL20   DC    F'20'                   FULLWORD, VALUE '20' (RETNCODE)\nHALF00   DC    H'00'                   HALFWORD, VALUE '0'\nHALF08   DC    H'08'                   HALFWORD, VALUE '8' (PGM LENGTH)\nHALF09   DC    H'09'                   HALFWORD, VALUE '9' (ROOM LEN  )\nPGMNAME  DC    CL8'DLXJCTUP'           PROGRAM NAME IDENTIFIER\nMNTAPPL  DC    CL8'MOUNT'              APPL OF 'MOUNT'\nAPPL     DS    0F                      RESOURCE CLASS OF 'APPL'\n         DC    AL1(4)                  LENGTH OF CLASS NAME\n         DC    CL4'APPL'               CLASS NAME\nOFF      DC    C'OFF'                  TURN VOL MOUNT AUTH CNTL 'OFF'\nON       DC    C'ON '                  TURN VOL MOUNT AUTH CNTL 'ON'\nSPACES   DC    CL100' '                INITIALIZATION VALUE\nROOM9999 DC    CL4'9999'               GENERIC ROOM #\nJ___DOE  DC    CL20'JANEJOHN DOE'      GENERIC USER NAME\nROOMEQL  DC    CL5'ROOM='              'ROOM=' KEYWORD\n***********************************************************************\n*        ERROR AND INFORMATIONAL MESSAGES\n***********************************************************************\nINFMSG1  DC    AL2(INFMSG1L)\n         DC    AL2(0)\n         DC    CL72'INVALID VALUE SPECIFIED FOR ''MOUNT'' KEYWORD. ENTE+\n               R EITHER ''ON'' OR ''OFF'''\nINFMSG1L EQU   *-INFMSG1\nINFMSG2  DC    AL2(INFMSG2L)\n         DC    AL2(0)\n         DC    CL72'INVALID VALUE SPECIFIED FOR ''DEST'' KEYWORD. RE-EN+\n               TER SYSOUT DESTINATION '\nINFMSG2L EQU   *-INFMSG2\n***********************************************************************\n*        LIST FORM OF MODESET MACRO\n***********************************************************************\nMODLIST1 MODESET KEY=ZERO,MODE=SUP,MF=L    MODESET TO SUPER STATE\nLMODLST1 EQU   *-MODLIST1\nMODLIST2 MODESET KEY=NZERO,MODE=PROB,MF=L    MODESET TO PROBLEM STATE\nLMODLST2 EQU   *-MODLIST2\n         EJECT\n***********************************************************************\n*        INITIALIZATION DATA FOR PORTION OF GETMAIN'D AREA\n***********************************************************************\nRACLIST1 RACHECK MF=L                  LIST FORM OF RACHECK MACRO\nRACLEN1  EQU   *-RACLIST1\nPUTLIST1 PUTGET MF=L                   LIST FORM OF PUTGET MACRO\nPUTLEN1  EQU   *-PUTLIST1\n         EJECT\n***********************************************************************\n*        DSECT FOR COMMUNICATIONS VECTOR TABLE\n***********************************************************************\n         CVT DSECT=YES\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR ADDRESS SPACE CONTROL BLOCK\n***********************************************************************\n         IHAASCB DSECT=YES\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR ADDRESS SPACE EXTENSION BLOCK\n***********************************************************************\n         IHAASXB DSECT=YES\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR ACCESSOR ENVIRONMENT ELEMENT\n***********************************************************************\n         IHAACEE\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR TASK CONTROL TABLE\n***********************************************************************\n         IKJTCB DSECT=YES\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR JOB STEP CONTROL BLOCK\n***********************************************************************\n         IEZJSCB\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR SUBSYSTEM IDENTIFICATION BLOCK\n***********************************************************************\n         IEFJSSIB\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR HASP SUBSYSTEM JOB BLOCK\n***********************************************************************\n         $SJB\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR HASP JOB CONTROL TABLE\n***********************************************************************\n         $JCT\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR HASP BUFFER DSECT\n***********************************************************************\n         $BUFFER\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR HASP TIMER QUEUE ELEMENT\n***********************************************************************\n         $TQE\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR REQUEST PARAMETER LIST\n***********************************************************************\n         IFGRPL\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR GETMAINED GNRLFAIL PARAMETER LIST\n***********************************************************************\n         IKJEFFGF GFDSECT=YES\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR COMMAND PROCESSOR PARAMETER LIST\n***********************************************************************\n         IKJCPPL\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR PARSE PARAMETER LIST\n***********************************************************************\n         IKJPPL\nPPLLEN   EQU   *-PPL\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR INPUT/OUTPUT PARAMETER LIST\n***********************************************************************\n         IKJIOPL\nIOPLLEN  EQU   *-IOPL\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR TSO PROTECTED STEP CONTROL BLOCK\n***********************************************************************\n         IKJPSCB\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECTS FOR PARSE CONTROL BLOCKS\n***********************************************************************\nPARMTAB  IKJPARM DSECT=IKJPARMD\nNAME     IKJKEYWD\n         IKJNAME 'N',ALIAS=('NA','NAM','NAME'),SUBFLD=NAMESUB\nROOM     IKJKEYWD\n         IKJNAME 'R',ALIAS=('RO','ROOM'),SUBFLD=ROOMSUB\nMOUNT    IKJKEYWD\n         IKJNAME 'M',ALIAS=('MO','MNT','MOUNT'),SUBFLD=MOUNTSUB\nDEST     IKJKEYWD\n         IKJNAME 'D',ALIAS=('DES','DEST'),SUBFLD=DESTSUB\nNAMESUB  IKJSUBF\nNAMEPGMR IKJIDENT 'PROGRAMMER NAME',MAXLNTH=20,FIRST=ALPHANUM,         +\n               OTHER=ALPHANUM,PROMPT='PROGRAMMER NAME',CHAR,           +\n               HELP=('NAME OF PROGRAMMER TO BE PRINTED ON LISTING')\nROOMSUB  IKJSUBF\nROOMPGMR IKJIDENT 'ROOM NUMBER',MAXLNTH=4,FIRST=ALPHANUM,              +\n               OTHER=ALPHANUM,PROMPT='ROOM NUMBER',CHAR,               +\n               HELP=('ROOM NUMBER TO BE PRINTED ON LISTING')\nMOUNTSUB IKJSUBF\nMOUNTAT  IKJIDENT 'VOL MOUNT AUTHORIZATION',MAXLNTH=3,FIRST=ALPHA,     +\n               OTHER=ALPHA,PROMPT='VOL MOUNT AUTHORIZATION',CHAR,      +\n               HELP=('VOLUME MOUNT AUTHORIZATION - ''ON'' OR ''OFF''')\nDESTSUB  IKJSUBF\nDESTSOUT IKJIDENT 'SYSOUT DESTINATION',MAXLNTH=8,FIRST=ALPHANUM,       +\n               OTHER=ALPHANUM,PROMPT='SYSOUT DESTINATION',CHAR,        +\n               VALIDCK=DESTVAL,                                        +\n               HELP=('DESTINATION FOR SYSOUT DATA SETS')\n         IKJENDP\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR SUBSYSTEM OPTIONS BLOCK WITH REMOTE DEST VALIDATION\n***********************************************************************\n         IEFJSSOB (US),CONTIG=YES\nSSOBTOT  EQU   *-SSOB\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        DSECT FOR JES CONTROL TABLE\n***********************************************************************\n         IEFJESCT\n         EJECT\nDLXJCTUP CSECT\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\nOURTCB   EQU   X'04'         OFFSET INTO TCB LIST OF OUR TCB ADDRESS\n$MAXDA   EQU   253                     MAXIMUM NUMBER OF SPOOL VOLS\n         LTORG\n         EJECT\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\n         DS    0F\nSAVEAREA DS    18F                     DLXJCTUP SAVE AREA\nECB      DS    F                       EVENT CONTROL BLOCK FOR PPL\nPARSBACK DS    F                       ADDRESS OF PDE RETURNED BY PARSE\nGFPADDR  DS    F                       ADDRESS OF GFPARMS\nCPPLADDR DS    F                       PRESERVE POINTER TO CPPL\nUPTADDR  DS    F                       PRESERVE POINTER TO UPT\nECTADDR  DS    F                       PRESERVE POINTER TO ECT\nPGMRNAME DS    CL20                    PGMMER NAME TO BE PUT INTO JCT\nPGMROOM  DS    CL4                     PGMMER ROOM # TO BE PUT INTO JCT\nMSGOLD   DS    0F                      TSUPMSG OUTPUT LINE DESCRIPTOR\nMSGNUM   DS    F                       NUMBER OF TSUPMSG OUTPUT LINES\nMSGADDR  DS    F                       ADDRESS OF TSUPMSG\nMNTCNTL  DS    CL3                     VOL MOUNT AUTHORIZATN CNTL\nDESTSAVE DS    CL8                     SAVE DESTINATION FROM PSCB\nTSUPMSG  DS    0CL76                   MSG SKELETON USED BY PUTGET\nTSUPLGTH DS    F                       LENGTH OF MESSAGE LINE (72)\nTSUPLINE DS    CL72                    MSG LINE TO BE WRITTEN TO TERM\nPPLSECT  DS    0F                      PARSE PARAMETER LIST\n         ORG   PPLSECT+PPLLEN\nIOPLSECT DS    0F                      I/O PARAMETER LIST\n         ORG   IOPLSECT+IOPLLEN\nRACLIST_ DS    CL(RACLEN1)             DYNAMIC LIST FORMAT OF RACHECK\nPGPB     DS    0F                      DYNAMIC LIST FORMAT OF PUTGET\n         DS    3F\nPGINPTR  DS    F                       ADDRESS OF PUTGET INPUT BUFFER\nMODLIST_ DS    CL(LMODLST1)            DYNAMIC LIST FORM OF MODESET\nWORKLEN  EQU   *-WORKAREA\n         TITLE 'DESTVAL  - SYSOUT VALIDATION SUBROUTINE                +\n                        '\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nDESTVAL  CSECT                         SYSOUT VALIDATION SUBROUTINE\nDESTVAL  AMODE ANY                     ADDRESSING MODE - ABOVE OR BELOW\n         SAVE  (14,12),,DESTVAL_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING DESTVAL,R12             ESTABLISH PGM ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARAMETER LIST\n         USING PARMLIST,R2             ESTABLISH ADDRESSABILITY TO PARM\n         SLR   R15,R15                 SET RETURN CODE TO 0, INITIALLY\n***********************************************************************\n*        GETMAIN DYNAMIC STORAGE\n***********************************************************************\n         GETMAIN R,LV=DESTLEN          GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING DESTWORK,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         EJECT\n***********************************************************************\n*        OBTAIN ADDRESS OF SSIB (SUBSYSTEM IDENTIFICATION BLOCK)\n***********************************************************************\n         L     R3,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R3,0(R3)                LOAD ADDR OF NEXT/CURR TCB'S\n         L     R3,OURTCB(R3)           LOAD ADDR OF OUT TCB\n         USING TCB,R3                  ESTABLISH ADDRESSABILITY - TCB\n         L     R3,TCBJSCB              LOAD ADDR OF JSCB\n         USING IEZJSCB,R3              ESTABLISH ADDRESSABILITY - JSCB\n         L     R3,JSCBACT              LOAD ADDR OF ACTIVE JSCB\n         L     R3,JSCBSSIB             LOAD ADDR OF LIFE-OF-JOB SSIB\n         ST    R3,SSIBADDR             PRESERVE POINTER TO SSIB\n***********************************************************************\n*        OBTAIN SYSOUT DESTINATION NAME\n***********************************************************************\n         L     R3,PDEADDR              R3 - ADDRESS OF PDE\n         L     R4,0(R3)                R4 - ADDRESS OF 'DEST' VALUE\n         LH    R5,4(R3)                R5 - LENGTH OF 'DEST' VALUE\n         BCTR  R5,0                    DECREMENT LENGTH BY ONE\n         MVC   DESTNAME,CLEAR          INITIALIZE SYSOUT DEST TO SPACES\n         EX    R5,DESTMVC              MOVE REQUESTED PARM TO DESTNAME\n***********************************************************************\n*        VALIDATE SYSOUT DESTINATION USING IEFSSREQ\n***********************************************************************\n         LA    R3,SSOBSECT             R3 - ADDRESS OF SSOB\n         USING SSOB,R3                 ESTABLISH ADDRESSABILITY TO SSOB\n         MVC   SSOBID,SSOBNAME         CONTROL BLOCK IDENTIFIER\n         MVI   SSOBLEN+1,SSOBHSIZ      LENGTH OF SSOB HEADER\n         MVI   SSOBFUNC+1,SSOBUSER     FUNTION ID (REMOTE DEST VALID)\n         MVC   SSOBSSIB,SSIBADDR       LOAD PTR TO SUBSYSTEM INFO BLOCK\n         LA    R1,SSOBGN               ADDRESS OF FUNTION DEPENDENT PTR\n         ST    R1,SSOBINDV             STORE INTO SSOB\n         MVI   SSUSLEN+1,SSUSIZE       REMOTE DESTINATION EXTENSION LEN\n         MVC   SSUSUSER,DESTNAME       DESTINATION TO BE VERIFIED\n         ST    R3,SSOBADDR             PRESERVE ADDRESS OF SSOB\n         OI    SSOBADDR,X'80'          TURN ON HIGH ORDER BIT\n         LA    R1,SSOBADDR             PTR TO ADDRESS OF SSOB\n         IEFSSREQ                      INVOKE SUBSYS INTERFACE REQUEST\n         LTR   R15,R15                 OKEE-DOKEE?\n         BNZ   ABENDUMP                NO, ABEND AND DUMP\n         CLI   SSOBRETN+3,SSUSRTOK     IS DESTINATION VALID?\n         BE    QUIT                    YES, WE'RE DONE\n         LA    R15,4                   INDICATE 'DEST' PARM INVALID\n         B     QUIT                    WE'RE DONE\nDESTMVC  MVC   DESTNAME(0),0(R4)       GET DEST FROM PARSE\n         EJECT\n***********************************************************************\n*        CLEANUP AREAS GETMAINED FOR DESTVAL, SET RETURN CODE,\n*        RESTORE REGISTERS AND RETURN\n***********************************************************************\nQUIT     DS    0H\n         LR    R5,R15                  R5 - SAVE RETURN CODE\n         LR    R10,R13                 R10 - ADDR OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN R,LV=DESTLEN,A=(R10)   FREEMAIN DYNAMIC STORAGE\n         LR    R15,R5                  R15 - RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n*        ABEND AND DUMP\n***********************************************************************\nABENDUMP DS    0H\n         ABEND 401,DUMP                ABEND AND DUMP\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nSSOBNAME DC    CL4'SSOB'               SSOB CONTROL BLOCK IDENTIFIER\nCLEAR    DC    CL8' '                  SPACES TO INITIALIZE DESTNAME\n***********************************************************************\n*        DSECT FOR MAPPING VALIDITY CHECK PARAMETER LIST\n***********************************************************************\nPARMLIST DSECT\nPDEADDR  DS    F                       --> PARAMETER DESCRIPTOR ENTRY\nUSERWORD DS    F                       --> USER WORK AREA\nVALMSG   DS    F                       --> OPTIONAL SECOND LEVEL MSG\n         EJECT\nDESTVAL  CSECT\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nDESTWORK DSECT\n         DS    0F\nSAVAREA  DS    18F                     DESTVAL  SAVE AREA\nSSIBADDR DS    F                       PRESERVE POINTER TO SSIB\nSSOBADDR DS    F                       PRESERVE POINTER TO SSOB\nSSOBSECT DS    0F                      SUBSYSTEM OPTIONS BLOCK\n         ORG   SSOBSECT+SSOBTOT\nDESTNAME DS    CL8                     SYSOUT DESTINATION WORK AREA\nDESTLEN  EQU   *-DESTWORK\nDLXJCTUP CSECT\n         END   DLXJCTUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXJOBS#": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00=\\x00=\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "DELUXE"}, "text": "1\n-                        DELUXE JOB START -- DLXJOBST\n                                                             REV 07/31/87\n-\n  DLXJOBST IS A PROGRAM DESIGNED TO AID JOB CONTROL BY DYNAMICALLY STARTING\n  A SPECIFIED JOB IF THE CURRENT JOB EXECUTES SUCCESSFULLY.  DLXJOBST WOULD\n  NORMALLY BE EXECUTED AS THE LAST STEP IN THE JOB STREAM.  THE EIGHT-DIGIT\n  NAME OF THE JOB TO BE STARTED IS SPECIFIED EITHER AS PARM DATA, OR IN SYSIN.\n  A 'COND' IS CODED ON THE EXEC STATEMENT SO THAT DLXJOBST WILL NOT EXECUTE IF\n  THE PREVIOUS JOB STEPS ARE NOT SUCCESSFUL.\n-                        DLXJOBST RULES:\n0      DLXJOBST CANNOT BE EXECUTED AS THE FIRST STEP IN THE JOBSTREAM.\n0      THE FIRST THREE CHARACTERS OF THE JOB TO BE STARTED MUST MATCH THE FIRST\n       THREE CHARACTERS OF THE CURRENT JOB NAME.\n0      THE JOB TO BE STARTED MUST BE SEVEN OR EIGHT CHARACTERS IN LENGTH.\n0      THE JOB TO BE STARTED MUST NOT MATCH THE CURRENT JOB NAME.\n0      NOTE:  THE USER MUST MAKE SURE THAT THE JOB TO BE STARTED DOES NOT\n       CONTAIN A DLXJOBST STEP THAT STARTS THE ORIGINAL JOB STREAM AGAIN!\n1\n-                        DLXJOBST -- SAMPLE JCL\n-                **  USING PARM FIELD  **\n      //SLS999$1 JOB (MMA1,R152),'JOB CONTROL',MSGCLASS=A,CLASS=1,\n      //         USER=SLSJOB,PASSWORD=????????,NOTIFY=T99999\n      //STEP1    EXEC PGM=IEFBR14\n      //SYSOUT   DD  SYSOUT=*\n      //STEP2    EXEC PGM=DLXJOBST,PARM='SLS171$1',COND=(5,LE)\n      //SYSUDUMP DD  SYSOUT=Z\n      //SYSPRINT DD  SYSOUT=*\n      //SYSOUT   DD  SYSOUT=*\n-                **  USING SYSIN  **\n      //SLS999$1 JOB (MMA1,R152),'JOB CONTROL',MSGCLASS=A,CLASS=1,\n      //         USER=SLSJOB,PASSWORD=????????,NOTIFY=T99999\n      //STEP1    EXEC PGM=IEFBR14\n      //SYSOUT   DD  SYSOUT=*\n      //STEP2    EXEC PGM=DLXJOBST,COND=(5,LE)\n      //SYSUDUMP DD  SYSOUT=Z\n      //SYSPRINT DD  SYSOUT=*\n      //SYSOUT   DD  SYSOUT=*\n      //SYSIN    DD  *\n      SLS171$1\n1\n-                   DLXJOBST - ERROR MESSAGES\n0      'DLX001E DLXJOBST - THIS STEP SHOULD NOT BE THE FIRST STEP IN THE\n        RUNSTREAM.'\n0      'DLX002E DLXJOBST - PARM FIELD MUST BE SEVEN OR EIGHT CHARACTERS IN\n        LENGTH.'\n0      'DLX003E DLXJOBST - THE FIRST THREE CHARACTERS IN PARM FIELD MUST\n        MATCH THE FIRST THREE CHARACTERS OF THE JOB NAME.'\n0      'DLX004E DLXJOBST - PARM DATA MATCHES THE CURRENT JOB NAME. THIS\n        WOULD RESULT IN AN ENDLESS LOOP. START NOT ISSUED.'\n0      'DLX005E DLXJOBST - SYSIN IS MISSING OR MISSPELLED, AND PARM IS NOT\n        PRESENT.  INCLUDE PARM OR SYSIN.'\n0      'DLX006E DLXJOBST - THE FIRST THREE CHARACTERS IN SYSIN FIELD MUST\n        MATCH THE FIRST THREE CHARACTERS OF THE JOB NAME.'\n0      'DLX007E DLXJOBST - SYSIN DATA MATCHES CURRENT JOB NAME. THIS WOULD\n        RESULT IN AN ENDLESS LOOP.  START NOT ISSUED.'\n0      'DLX008E DLXJOBST - SYSIN CONTAINS NO RECORDS, AND PARM IS NOT PRESENT.\n        INCLUDE PARM OR SYSIN.'\n0      'DLX009E DLXJOBST - ERROR OCCURRED ATTEMPTING TO OPEN SYSIN.'\n0      'DLX010E DLXJOBST - USER IS NOT AUTHORIZED TO USE DLXJOBST.'\n0      'DLX011E DLXJOBST - START COMMAND WAS UNSUCCESSFUL.'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXJOBST": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x8e\\x01\\x8e\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 398, "newlines": 398, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXJOBST - DYNAMIC JOB START UTILITY'\n***********************************************************************\n*                                                                     *\n*              MODULE NAME = DLXJOBST                                 *\n*                                                                     *\n*              DESCRIPTIVE NAME = DYNAMIC JOB START UTILITY           *\n*                                                                     *\n*              FUNCTION =                                             *\n*                USE TO DYNAMICALLY START BATCH JOBS.                 *\n*                JOB TO BE STARTED CAN BE SPECIFIED IN THE PARM       *\n*                FIELD, OR IN SYSIN.  THE FIRST THREE CHARACTERS      *\n*                MUST MATCH THE FIRST THREE CHARACTERS OF THE         *\n*                JOB NAME THAT THIS STEP IS A PART OF (BUT OF         *\n*                COURSE, THE JOB NAMES CANNOT BE EQUAL).  THIS        *\n*                JOB STEP CANNOT BE THE FIRST STEP IN THE JOB.        *\n*                                                                     *\n*              OPERATION =                                            *\n*                SAVE REGISTERS AND ESTABLISH ADDRESSABILITY          *\n*                  GETMAIN DYNAMIC STORAGE                            *\n*                  EXTRACT JOBNAME FROM THE TIOT                      *\n*                  EXTRACT USERID FROM THE ACEE                       *\n*                  CHECK FOR FIRST STEP                               *\n*                  CHECK TO SEE IF PARM IS PRESENT                    *\n*                  IF IT IS, EDIT PARM, AND GO TO RACHECK ROUTINE     *\n*                  IF PARM IS NOT PRESENT, LOOK FOR SYSIN             *\n*                  IF SYSIN FOUND, EDIT IT                            *\n*                  CHECK RACF AUTHORITY TO RUN JOB                    *\n*                  IF PASSED ALL CHECKS, ISSUE START COMMAND          *\n*                  CLOSE SYSIN IF APPLICABLE                          *\n*                  FREEMAIN DYNAMIC STORAGE                           *\n*                RESTORE REGISTERS                                    *\n*                RETURN                                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *\n*                    REGISTER  1      = PARAMETER LIST POINTER        *\n*                    REGISTER  2      = PARAMETER LIST WORK POINTER   *\n*                    REGISTERS 3 - 10 = WORK REGISTERS                *\n*                    REGISTER  11     = BAL REGISTER                  *\n*                    REGISTER  12     = BASE REGISTER                 *\n*                    REGISTER  13     = SAVE AREA POINTER             *\n*                    REGISTER  14     = RETURN                        *\n*                    REGISTER  15     = ENTRY POINT ADDRESS AND       *\n*                                       RETURN CODE REGISTER          *\n*                                                                     *\n*              MACROS =                                               *\n*                 SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN, RACHECK,   *\n*                 MGCR, MODESET, WTO, OPEN, CLOSE.                    *\n*                                                                     *\n*              MAPPING MACROS USED =                                  *\n*                 IEZMGCR                                             *\n*                                                                     *\n*              ASSEMBLER OPTIONS = LIST,RENT                          *\n*                                                                     *\n*              LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,      *\n*                                       REFR,AC=1                     *\n*                                                                     *\n*              LOAD LIBRARY = SYS1.PPLINK (LINKLST LIBRARY)           *\n*                                                                     *\n*              CHANGE ACTIVITY =                                      *\n*                 07/31/87  WRITTEN.                            MC    *\n***********************************************************************\n         EJECT\n***********************************************************************\n***      INITIALIZATION\n***********************************************************************\nDLXJOBST CSECT\n         SAVE  (14,12),,DLXJOBST_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING DLXJOBST,R12            ESTABLISH PGM ADDRESSABILITY\n         SR    R15,R15                 R15 - INITIALIZE TO ZERO\n         L     R3,0(R1)                GET PARM ADDRESS\n***********************************************************************\n**       GETMAIN DYNAMIC STORAGE\n**           BELOW 16-MEG LINE BECAUSE SVC 34 REQUIRES THE MGCR\n**           PARAMETER LIST TO BE IN 24-BIT ADDRESSABLE STORAGE\n***********************************************************************\nGETMAIN  EQU   *\n         GETMAIN RU,LV=WORKLEN,LOC=BELOW\n*                                      GETMAIN DYNAMIC STORAGE\n         LR    R10,R1                  PRESERVE POINTER TO WORK AREA\n         ST    R13,4(R10)              STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R10,8(R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R10                 LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         LA    R6,DATA                 SET UP REGISTERS FOR\n         LA    R7,MOVEL                  LONG MOVE\n         LA    R8,CDATA\n         LA    R9,MOVEL\n         MVCL  R6,R8\n         EJECT\n***********************************************************************\n***      POINT R2==>TIOT, R5==>JSCB, GET JOBNAME FROM TIOT\n***********************************************************************\n         L     R2,16                    ADDRESS OF CVT\n         L     R2,0(R2)                 ADDRESS OF TCB ADDRESS WORDS\n         L     R2,4(R2)                 ADDRESS OF CURRENT TCB\n         L     R5,180(R2)               ADDRESS OF JSCB\n         L     R2,12(R2)                ADDRESS OF THIS TCB'S TIOT\n         MVC   JOBNAME(8),0(R2)         MOVE JOBNAME TO OUR STORAGE\n***********************************************************************\n***      EXTRACT USERID FROM ACEE\n***********************************************************************\n         L     R4,16                    ADDRESS OF CVT\n         L     R4,0(R4)                 PTR TO FOUR WORD ADDR  LIST\n         L     R4,12(R4)                ADDRESS OF CURRENT ASCB\n         L     R4,108(R4)               ADDRESS OF ASXB\n         L     R4,200(R4)               ADDRESS OF ACEE\n         MVC   USERID(8),21(R4)         MOVE USERID TO OUR STORAGE\n         EJECT\n***********************************************************************\n***      GET AND CHECK PARM OR SYSIN\n*********************************************************************\n         CLI   228(R5),X'01'            IS THIS THE FIRST STEP?\n         BNE   CHKPARM                  IF NOT, GO TO NEXT CHECK\n         B     ERRSTEP1                 ELSE - ERROR\nCHKPARM  EQU   *\n         SR    R1,R1                    CLEAR R1\n         LH    R1,0(R3)                 LENGTH OF PARM TO R1\n         LTR   R1,R1                    CHECK FOR NO PARM\n         BZ    CHKCARD                  NO PARM - GO TO CHECK SYSIN\n         MVC   PARMSW,=C'1'             SET PARMSW ON\n         CH    R1,=H'8'                 CHECK FOR PARM LENGTH = 8\n         BE    LEN8                     LENGTH IS OK\n         CH    R1,=H'7'                 CHECK FOR PARM LENGTH = 7\n         BNE   ERRPARM1                 IF NOT =7 OR 8, ISSUE MSG\n         LA    R3,2(R3)                 BUMP PAST LENGTH\n         MVC   JOBSTART(7),0(R3)        MOVE PARM DATA (7 CHARS)\n         MVC   JOBSTART+7(1),SPACER     MOVE SPACE TO EIGHTH CHARACTER\n         B     CONTCHK                  CONTINUE\nLEN8     EQU   *\n         LA    R3,2(R3)                 BUMP PAST LENGTH\n         MVC   JOBSTART(8),0(R3)        MOVE PARM DATA\nCONTCHK  EQU   *\n         CLC   JOBSTART(3),JOBNAME      DO 1ST 3 CHARS OF PARM=JOBNAME\n         BNE   ERRPARM2                 IF NOT- ERROR\n         CLC   JOBSTART(8),JOBNAME      PARM JOBNAME = CURR JOBNAME?\n         BE    ERRPARM3                 IF SO - ERROR\n         B     RACCHK                   IF PASSED CHECKS, GO TO RACHECK\nCHKCARD  EQU   *\n         SR    R3,R3                    CLEAR R3\n         LA    R2,24(R2)                ADDRESS OF START OF DD ENTRY\n         IC    R3,0(R2)                 LENGTH OF THIS ENTRY\nFINDDD1  EQU   *\n         LTR   R3,R3                    END OF DD'S?\n         BZ    ERRCARD1                 NO SYSIN\n         CLC   4(8,R2),=CL8'SYSIN'      IS IT SYSIN?\n         BE    SYSYES\n         AR    R2,R3                    BUMP TO NEXT DD ENTRY\n         IC    R3,0(R2)                 GET LENGTH OF ENTRY\n         B     FINDDD1                  LOOP\nSYSYES   EQU   *\n         OPEN  (SYSIN,INPUT),MF=(E,EX2) OPEN SYSIN\n         LTR   R15,R15                  IF NOT OK,\n         BNZ   ERRCARD5\n         GET   SYSIN,SYSINREC\n         CLC   SYSINREC(3),JOBNAME      DO 1ST 3 CHARS OF SYSIN=JOBNAME\n         BNE   ERRCARD2                 IF NOT- ERROR\n         CLC   SYSINREC(8),JOBNAME      SYSIN JOBNAME = CURR JOBNAME?\n         BE    ERRCARD3                 IF SO - ERROR\n         MVC   JOBSTART(8),SYSINREC     MOVE VALID SYSIN DATA\n         EJECT\n***********************************************************************\n***      CHECK USER FOR PROPER RACF AUTHORITY, AND START THE JOB\n*********************************************************************\nRACCHK   EQU   *\n         RACHECK ENTITY=THISPGM,CLASS=APPL,MF=(E,RACLISTD)\n*                                       RACHECK FOR CLASS='APPL'\n         LTR   15,15                    USER HAVE PROPER AUTHORITY?\n         BNZ   ERRRACF                  NO?...EXIT\nSTARTJOB EQU   *\n         XC    MGCRPL(MGCRLTH),MGCRPL       CLEAR THE PARAMETER LIST\n         MVI   MGCRFLG1,X'80'        SET FLAG1 TO INDICATE THAT FLAG2\n*                                    CONTAINS VALID INFORMATION.\n*                                    FLAG2 = X'0000' (NO USER TOKEN).\n         MVC   MGCRTEXT(L'CMDTXT1),CMDTXT1    MOVE CMD TEXT SKELETON\n         MVC   CMDUID,USERID                  MOVE USERID TO CMD\n         MVC   CMDJOBNM,JOBSTART              MOVE JOB NAME TO CMD\n         LA    R1,(MGCRTEXT-MGCRPL)+L'CMDTXT1    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH             SAVE LENGTH IN MGCRPL\n         MODESET MF=(E,MODLST1D)       GO INTO SUPERVISOR STATE\n         SR    R0,R0                   CLEAR REG 0\n         MGCR  MGCRPL                  ISSUE THE COMMAND\n         ST    R15,MGCRETN             SAVE MGCR RETURN CODE\n         MODESET MF=(E,MODLST2D)       BACK TO USER KEY, PROB STATE\n         CLC   MGCRETN,FULL00          WAS START SUCCESSFUL?\n         BNE   ERRSTART                IF NOT, ISSUE MESSAGE\n         B     GOODCLOS\n         EJECT\n***********************************************************************\n***      CLOSE FILES\n***********************************************************************\nERRCLOSE EQU   *                       ERROR EXIT\n         CLI   PARMSW,C'1'             WAS SYSIN OPENED?\n         BE    FREEMAIN                IF NOT, BRANCH AROUND CLOSE\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (SYSIN,FREE),MF=(E,EX4)\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     FREEMAIN\nGOODCLOS EQU   *\n         CLI   PARMSW,C'1'             WAS SYSIN OPENED?\n         BE    SETRC                   IF NOT, BRANCH AROUND CLOSE\n         CLOSE (SYSIN,FREE),MF=(E,EX4)\nSETRC    EQU   *\n         MVI   RETCODE+3,X'00'         SET RETURN CODE TO ZERO\n***********************************************************************\n***      FREEMAIN DYNAMIC STORAGE\n***********************************************************************\nFREEMAIN EQU   *\n         L     R7,RETCODE              LOAD STORED RETURN CODE\n         LR    R10,R13                 R10 - ADDR OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN RU,LV=WORKLEN,A=(R10)      FREE STORAGE\n***********************************************************************\n***      RESTORE REGISTERS AND RETURN\n***********************************************************************\nFINISH   EQU   *\n         LR    R15,R7                  LOAD RETURN CODE FROM REG7\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n***      ERROR ROUTINES\n***********************************************************************\nERRSTEP1 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST2    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     FREEMAIN            GET OUT\nERRPARM1 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST3    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     FREEMAIN            GET OUT\nERRPARM2 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST4    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     FREEMAIN            GET OUT\nERRPARM3 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST5    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     FREEMAIN            GET OUT\nERRCARD1 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST6    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     FREEMAIN            GET OUT\nERRCARD2 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST1    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     ERRCLOSE            GET OUT\nERRCARD3 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST7    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     ERRCLOSE            GET OUT\nERRCARD4 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST8    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     ERRCLOSE            GET OUT\nERRCARD5 EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLIST9    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     ERRCLOSE            GET OUT\nERRRACF  EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLISTA    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     ERRCLOSE            GET OUT\nERRSTART EQU   *\n         MVC   WTOLIST_(LWTOLST1),WTOLISTB    MOVE STATIC TO DYNAMIC\n         WTO   MF=(E,WTOLIST_)                ISSUE THE MESSAGE\n         MVI   RETCODE+3,X'0C'     SET RETURN CODE TO 12\n         B     ERRCLOSE            GET OUT\n         EJECT\n*********************************************************************\n***         CONSTANTS                                             ***\n*********************************************************************\nFULL00   DC   F'00'               FULLWORD, VALUE '00' (RETURN CODE)\nAPPL     DS   0H\n         DC   AL1(4)              LENGTH OF CLASSNAME\n         DC   C'APPL'             CLASSNAME FOR RACHECK MACRO\nTHISPGM  DC   CL8'DLXJOBST'       USED IN RACHECK\nSPACER   DC   CL1' '\n*********************************************************************\n***     LIST FORM OF WTO                                          ***\n*********************************************************************\nWTOLIST1 WTO   'DLX006E DLXJOBST - THE FIRST THREE CHARACTERS IN SYSIN +\n               FIELD MUST MATCH THE FIRST THREE CHARACTERS OF THE JOB N+\n               AME.',ROUTCDE=(11),MF=L\nLWTOLST1 EQU   *-WTOLIST1\nWTOLIST2 WTO   'DLX001E DLXJOBST - THIS STEP SHOULD NOT BE THE FIRST ST+\n               EP IN THE RUNSTREAM.',ROUTCDE=(11),MF=L\nWTOLIST3 WTO   'DLX002E DLXJOBST - PARM FIELD MUST BE SEVEN OR EIGHT CH+\n               ARACTERS IN LENGTH.',ROUTCDE=(11),MF=L\nWTOLIST4 WTO   'DLX003E DLXJOBST - THE FIRST THREE CHARACTERS IN PARM F+\n               IELD MUST MATCH THE FIRST THREE CHARACTERS OF THE JOB NA+\n               ME.',ROUTCDE=11,MF=L\nWTOLIST5 WTO   'DLX004E DLXJOBST - PARM DATA MATCHES THE CURRENT JOB NA+\n               ME. THIS WOULD RESULT IN AN ENDLESS LOOP. START NOT ISSU+\n               ED.',ROUTCDE=(11),MF=L\nWTOLIST6 WTO   'DLX005E DLXJOBST - SYSIN IS MISSING OR MISSPELLED, AND +\n               PARM IS NOT PRESENT.  INCLUDE PARM OR SYSIN.',          +\n               ROUTCDE=(11),MF=L\nWTOLIST7 WTO   'DLX007E DLXJOBST - SYSIN DATA MATCHES CURRENT JOB NAME.+\n                 THIS WOULD RESULT IN AN ENDLESS LOOP.  START NOT ISSUE+\n               D.',ROUTCDE=(11),MF=L\nWTOLIST8 WTO   'DLX008E DLXJOBST - SYSIN CONTAINS NO RECORDS, AND PARM +\n               IS NOT PRESENT.  INCLUDE PARM OR SYSIN.',ROUTCDE=(11),  +\n               MF=L\nWTOLIST9 WTO   'DLX009E DLXJOBST - ERROR OCCURRED ATTEMPTING TO OPEN SY+\n               SIN.',ROUTCDE=(11),MF=L\nWTOLISTA WTO   'DLX010E DLXJOBST - USER IS NOT AUTHORIZED TO USE DLXJOB+\n               ST.',ROUTCDE=(11),MF=L\nWTOLISTB WTO   'DLX011E DLXJOBST - START COMMAND WAS UNSUCCESSFUL.',   +\n               ROUTCDE=(11),MF=L\n         EJECT\n*********************************************************************\n***     EQUATES                                                   ***\n*********************************************************************\n*  REGISTER EQUATES\n         EQUATE\n         LTORG\n         EJECT\n*********************************************************************\n***     INITITALIZATION DATA FOR PORTION OF GETMAINED AREA        ***\n*********************************************************************\nCDATA    DS    0F\nMGCRETNI DC    F'0'\nRACLISTL RACHECK MF=L              LIST FORM OF RACHECK MACRO\nRACLENL  EQU   *-RACLISTL\nMODLIST1 MODESET KEY=ZERO,MODE=SUP,MF=L\nLMODLST1 EQU   *-MODLIST1\nMODLIST2 MODESET KEY=NZERO,MODE=PROB,MF=L\nLMODLST2 EQU   *-MODLIST2\nOP       OPEN  (,),MF=L\nCL       CLOSE (,),MF=L\nDCB1     DCB   DDNAME=SYSIN,DSORG=PS,EODAD=ERRCARD4,MACRF=(GM),        +\n               LRECL=80,RECFM=FB\nPARMSWI  DC    C'0'\nCMDTXTI  DC    CL19'S XXXXXX,N=XXXXXXXX'\nMOVEL    EQU   *-CDATA\n         EJECT\n*********************************************************************\n***     DYNAMIC STORAGE AREA                                      ***\n*********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                      DLXJOBST SAVE AREA\nUSERID   DC    CL8' '                   8 BYTE USER ID FIELD\nRETCODE  DS    F                        SAVE AREA FOR RETURN CODE\nSYSINREC DS    CL80\nJOBNAME  DS    CL8\nJOBSTART DS    CL8\n*\nDATA     DS    0F\nMGCRETN  DC    F'0'\nRACLISTD DS    CL(RACLENL)              DYNAMIC LIST FORMAT OF RACHECK\nMODLST1D DS    CL(LMODLST1)             DYNAMIC LIST FORM OF MODESET\nMODLST2D DS    CL(LMODLST1)             DYNAMIC LIST FORM OF MODESET\nEX2      OPEN  (,),MF=L\nEX4      CLOSE (,),MF=L\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,EODAD=ERRCARD4,MACRF=(GM),        +\n               LRECL=80,RECFM=FB\nPARMSW   DC    C'0'           0 = PARM NOT PRESENT\n*                             1 = PARM PRESENT (SYSIN IS NOT OPENED)\nCMDTXT1  DC    CL19'S XXXXXX,N=XXXXXXXX'\nLDATA    EQU   *-WORKAREA\n         EJECT\n         DS    0F\nWTOLIST_ DS    CL(LWTOLST1)            DYNAMIC LIST FORM OF WTO MACRO\n*********************************************************************\n***     MAPPING MACRO FOR MGCR PARAMETER LIST                     ***\n*********************************************************************\nMGCR     IEZMGCR DSECT=NO               MGCRPL MAPPING MACRO\n         EJECT\n         ORG   MGCRTEXT\nCMDTXT   DS    0CL19                    COMMAND TEXT\n         DS    CL2\nCMDUID   DS    CL6\n         DS    CL3\nCMDJOBNM DS    CL8\n         ORG\n         EJECT\nWORKLEN  EQU   *-WORKAREA\n         END   DLXJOBST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXNALOC": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00x\\x00x\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 120, "newlines": 120, "modlines": 0, "user": "DELUXE"}, "text": "DLXNALOC CSECT\n         SAVE  (14,12),,DLXNALOC_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXNALOC,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         LR    R3,R1                    SAVE ADDRESS OF PARMLIST\n************************************************************\n*                                                          *\n*        TEST FOR RACF AUTHORITY (IF NONE, EXIT)           *\n*                                                          *\n************************************************************\n         L     R1,CVTPTR                R1 - ADDRESS CVT\n         L     R1,0(R1)                 R1 - PTR TO FOUR WORD ADDR LIST\n         L     R1,12(R1)                R1 - ADDRESS OF CURRENT ASCB\n         USING ASCB,R1                  ADDRESSABILITY TO ASCB DSECT\n         L     R1,ASCBASXB              R1 - ADDRESS OF ASXB\n         USING ASXB,R1                  ADDRESSABILITY TO ASXB DSECT\n         L     R1,ASXBSENV              R1 - ADDRESS OF ACEE\n         USING ACEE,R1                  ADDRESSABILITY TO ACEE DSECT\n         TM    ACEEFLG1,ACEESPEC        USER HAVE SPECIAL ATTRIBUTE?\n         BO    GETPARM1                 YES, CONTINUE\n         RACHECK ENTITY=PGMNAME,CLASS='APPL'\n         LTR   R15,R15                  USER ALLOWED TO USE DISPLAY?\n         BNZ   RETURNX                  NO, RETURN\n* END OF PROLOGUE                       SAVE AREA\nGETPARM1 EQU   *                        GET PARM FIELD\n         L     R1,0(R3)                 ADDRESS OF PARM TO R2\n         LH    R3,0(R1)                 LENGTH OF PARM TO R3\n         LTR   R3,R3                    CHECK FOR NO PARM\n         BZ    OPENCARD                 NO PARMS\n         CH    R3,=H'4'                 CHECK FOR VALID ADDRESS LENGTH\n         BNE   ABEND12                  BAD LENGTH\n         MVC   DEVADDR(4),2(R1)         MOVE PARM\nLOOP1    EQU   *\n         TR    DEVADDR(3),TTAB\n         ICM   R1,B'0001',DEVADDR+1\n         SLL   R1,4\n         STCM  R1,B'0001',DEVADDR+1\n         OC    DEVADDR+2(1),DEVADDR+1\n         MVC   DEVADDR+1(1),DEVADDR\n         MVI   DEVADDR,X'00'\n         SLR   R6,R6\n         ICM   R6,B'0111',DEVADDR\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R13,IOSSAVE\n         IOSLOOK DEV=(6),UCB=(7)\n         LA    R13,SAVEAREA\n         LTR   R15,R15\n         BNZ   ABEND4\n         USING UCBCMSEG,R7\n         TM    UCBSTAT,UCBONLI\n         BO    WTO\n         CLI   DEVADDR+3,C'0'\n         BE    BITOFF\n         OI    UCBFL5,UCBNALOC\n         B     MODEST\nBITOFF   NI    UCBFL5,X'FF'-UCBNALOC\nMODEST   MODESET KEY=NZERO,MODE=PROB\n         B     GETCARD\nRETURN0  SLR   R15,R15\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS RC=R15\nOPENCARD EQU   *\n         OPEN  (SYSIN,(INPUT))\n         LTR   R15,R15\n         BNZ   ABEND8\n         MVI   CARDSW,C'1'\nGETCARD  EQU   *\n         CLI   CARDSW,C'1'\n         BNE   RETURN0\n         GET   SYSIN,CARDAREA\n         MVC   DEVADDR(4),CARDAREA\n         B     LOOP1\nCLOSCARD EQU   *\n         CLOSE (SYSIN)\n         B     RETURN0\nWTO      WTO   'DLXNALOC -- DEVICE IS ONLINE',ROUTCDE=(11)\n         LA    R15,8\n         B     RETURNX\nABEND4   ABEND 4,DUMP\nABEND8   ABEND 8,DUMP\nABEND12  ABEND 12,DUMP\n* END OF EPILOGUE\nPGMNAME  DC    CL8'DLXNALOC'\nDEVADDR  DC    CL4'0'\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nIOSSAVE  DC    16F'0'                   IOSLOOK SAVE AREA\nTTAB     DS    0CL256\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'800A0B0C0D0E0FC7C8C98A8B8C8D8E8F'\n         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C00A0B0C0D0E0FC7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'00010203040506070809FAFBFCFDFEFF'\nCARDSW   DC    C'0'\nCARDAREA DC    CL80' '\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),              X\n               RECFM=FB,EODAD=CLOSCARD\n         LTORG\n         EQUATE\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         IEFUCBOB\n         IECDIOCM                       REQUIRED FOR IOSLOOK\n         CVT   DSECT=YES                REQUIRED FOR IOSLOOK\n         END   DLXNALOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXNOTXT": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00F\\x00F\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 TSO/E NOTIFY EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 TSO/E NOTIFY EXIT                            *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       TO SET THE RETURN CODE TO 8 SO THAT JES2 WILL NOTIFY USERS   *\n*       OF INCOMING FILES FROM THE TSO/E INTERACTIVE DATA            *\n*       TRANSMISSION FACILTY.                                        *\n*                                                                    *\n*    ENTRY POINT = DLXXIT13                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0   N/A                                                     *\n*       R1   POINTER TO A 5 WORD PARAMETER LIST WITH THE FOLLOWING   *\n*            STRUCTURE:                                              *\n*            WORD 1 ( +0) ADDRESS OF THE NETWORK JOB HEADER (NJH)    *\n*            WORD 2 ( +4) ADDRESS OF THE NETWORK DATA SET            *\n*                         HEADER (NDH)                               *\n*            WORD 3 ( +8) ADDRESS OF THE PERIPHERAL DATA DEFINITION  *\n*                         BLOCK BUILT FOR THE RECEIVED FILE          *\n*            WORD 4 ( +C) ADDRESS OF A 1 BYTE FIELD CONTAINING THE   *\n*                         SYSID VALUE FOR THE MULTI-ACCESS SPOOL     *\n*                         MEMBER ON WHICH THE INTENDED RECEIVER IS   *\n*                         CURRENTLY LOGGED ON; IF THE INTENDED       *\n*                         RECEIVER IS NOT CURRENTLY LOGGED ON, THIS  *\n*                         FIELD CONTAINS A ZERO                      *\n*            WORD 5 (+10) ADDRESS OF A 70 BYTE MESSAGE TEXT AREA FOR *\n*                         $HASP548; JES2 HAS INITIALIZED THIS AREA   *\n*                         TO 'DELETED, INVALID USERID'               *\n*       R2-9 N/A                                                     *\n*       R10  ADDRESS OF THE JOB'S JCT                                *\n*       R11  ADDRESS OF THE JES2 HCT                                 *\n*       R12  N/A                                                     *\n*       R13  ADDRESS OF THE PRINTER OR PUNCH PCE                     *\n*       R14  RETURN ADDRESS                                          *\n*       R15  ENTRY ADDRESS                                           *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15  CONTAINS A RETURN CODE AS FOLLOWS:                      *\n*            =0  CONTINUE WITH NORMAL SYSOUT RECEIVER PROCESSING     *\n*            =4  CONTINUE WITH NORMAL SYSOUT RECEIVER PROCESSING     *\n*            =8  JES2 WILL ISSUE THE $HASP549 MESSAGE TO THE         *\n*                INTENDED RECEIVER OF THE DATASET                    *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nDLXNOTXT $MODULE $BUFFER,                                              +\n               RPL,                                                    +\n               $CAT,                    REQ'D BY HCT                   +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D BY $CAT                  +\n               $JQE,                    REQ'D BY HCT                   +\n               $MIT,                    REQ'D BY $MODEND               +\n               $PCE                     REQ'D BY HCT\n         TITLE 'DELUXE JES2 TSO/E NOTIFY EXIT'\n         SPACE 1\nDLXXIT13 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD BASE REGISTER\nRETURN   $RETURN RC=8                   RETURN TO CALLER\n         SPACE 1\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXOFFL": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00e\\x00e\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "DELUXE"}, "text": "DLXOFFL CSECT\n         SAVE  (14,12),,DLXOFFL_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXOFFL,R12              TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         LR    R3,R1                    SAVE ADDRESS OF PARMLIST\n* END OF PROLOGUE                       SAVE AREA\nGETPARM1 EQU   *                        GET PARM FIELD\n         L     R1,0(R3)                 ADDRESS OF PARM TO R2\n         LH    R3,0(R1)                 LENGTH OF PARM TO R3\n         LTR   R3,R3                    CHECK FOR NO PARM\n         BZ    OPENCARD                 NO PARMS\n         CH    R3,=H'4'                 CHECK FOR VALID ADDRESS LENGTH\n         BNE   ABEND12                  BAD LENGTH\n         MVC   DEVADDR(4),2(R1)         MOVE PARM\nLOOP1    EQU   *\n         TR    DEVADDR(3),TTAB\n         ICM   R1,B'0001',DEVADDR+1\n         SLL   R1,4\n         STCM  R1,B'0001',DEVADDR+1\n         OC    DEVADDR+2(1),DEVADDR+1\n         MVC   DEVADDR+1(1),DEVADDR\n         MVI   DEVADDR,X'00'\n         SLR   R6,R6\n         ICM   R6,B'0111',DEVADDR\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R13,IOSSAVE\n         IOSLOOK DEV=(6),UCB=(7)\n         LA    R13,SAVEAREA\n         LTR   R15,R15\n         BNZ   ABEND4\n         USING UCBCMSEG,R7\n         CLI   DEVADDR+3,C'0'\n         BE    BITOFF\n         NI    UCBSTAT,X'FF'-UCBONLI\n         B     MODEST\nBITOFF   EQU   *\n         OI    UCBSTAT,UCBONLI\nMODEST   MODESET KEY=NZERO,MODE=PROB\n         B     GETCARD\nRETURN0  SLR   R15,R15\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS RC=R15\nOPENCARD EQU   *\n         OPEN  (SYSIN,(INPUT))\n         LTR   R15,R15\n         BNZ   ABEND8\n         MVI   CARDSW,C'1'\nGETCARD  EQU   *\n         CLI   CARDSW,C'1'\n         BNE   RETURN0\n         GET   SYSIN,CARDAREA\n         MVC   DEVADDR(4),CARDAREA\n         B     LOOP1\nCLOSCARD EQU   *\n         CLOSE (SYSIN)\n         B     RETURN0\nWTO      WTO   'DLXOFFL -- DEVICE IS ONLINE',ROUTCDE=(11)\n         LA    R15,8\n         B     RETURNX\nABEND4   ABEND 4,DUMP\nABEND8   ABEND 8,DUMP\nABEND12  ABEND 12,DUMP\n* END OF EPILOGUE\nPGMNAME  DC    CL8'DLXOFFL'\nDEVADDR  DC    CL4'0'\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nIOSSAVE  DC    16F'0'                   IOSLOOK SAVE AREA\nTTAB     DS    0CL256\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'800A0B0C0D0E0FC7C8C98A8B8C8D8E8F'\n         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C00A0B0C0D0E0FC7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'00010203040506070809FAFBFCFDFEFF'\nCARDSW   DC    C'0'\nCARDAREA DC    CL80' '\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),              X\n               RECFM=FB,EODAD=CLOSCARD\n         LTORG\n         EQUATE\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         IEFUCBOB\n         IECDIOCM                       REQUIRED FOR IOSLOOK\n         CVT   DSECT=YES                REQUIRED FOR IOSLOOK\n         END   DLXOFFL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXPRIME": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\t\\x01\\t\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 265, "newlines": 265, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXPRIME -- PRIME A KSDS VSAM DATASET'\n*\n*     THIS PROGRAM IS FOR USE ON KSDS FILES ONLY.\n*     DELVSAM IS CALLED TO DELETE THE RECORD THAT WAS WRITTEN\n*        TO PRIME THE FILE.\n*\n*         REGISTER USAGE\n*             R0  - STANDARD\n*             R1  - \"\n*             R2  - WORK\n*             R3  - WORK THEN STORE ADDRESS OF GETMAIN STORAGE\n*             R4  - STORE RECORD LENGTH\n*             R5  - STORE RPL ADDRESS\n*             R6  - WORK AND THEN STORE ACB ADDRESS\n*             R7  - WORK\n*             R8  -\n*             R9  -\n*             R10 - WORK\n*             R11 -\n*             R12 - BASE REGISTER\n*             R13 - STANDARD\n*             R14 -    \"\n*             R15 -    \"\nDLXPRIME CSECT\n         SAVE  (14,12),,DLXPRIME_PRIME_ANY_KSDS_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXPRIME,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         L     R10,0(R1)                LOAD ADDRESS OF PARAMETERS\n         ST    R1,PARMADD               SAVE PARM ADDRESS\n*   BEGINNING OF RACF CHECKING\n         NOP   ENDRACF                 MAKE HARD BRANCH ON VS1\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n*\n*  IF USER HAS SPECIAL ATTRIBUTE, EXIT WITHOUT FURTHER CHECKING\n*\n         L     R2,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2\n         USING ASXB,R2                 TELL ASSEMBLER\n         L     R2,ASXBSENV             GET ADDRESS OF ACEE\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BO    ENDRACF                 IF NOT, CHECK FURTHER\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         RACHECK ENTITY=PROGNAME,CLASS='APPL'\n         LTR   R15,R15\n         BNZ   ERROR11\nENDRACF  EQU   *\n*   END OF RACF CHECKING\n         LH    R2,0(R10)                LENGTH OF PARM TO R2\n         LTR   R2,R2                    CHECK FOR NO PARM\n         BZ    ERROR00                  IF NONE ISSUE MESSAGE AND QUIT\n         LA    R10,2(R10)               BUMP PAST LENGTH\n         BCTR  R2,R0                    DECREMENT FOR MOVE\n* END OF PROLOGUE                       SAVE AREA\n         EX    R2,MOVEDD                MOVE IN DDNAME\n         L     R2,16                    ADDRESS OF CVT\n         L     R2,0(R2)                 ADDRESS OF TCB ADDRESS WORDS\n         L     R2,4(R2)                 ADDRESS OF CURRENT TCB\n         L     R2,12(R2)                ADDRESS OF THIS TCBS TIOT\n         LA    R2,24(R2)                ADDRESS OF START OF DD ENTRY\n         SLR   R3,R3                    ZERO R3\n         IC    R3,0(R2)                 LENGTH OF THIS ENTRY\nFINDDD1  EQU   *\n         LTR   R3,R3\n         BZ    ERROR01\n         CLC   4(8,R2),DDNAME           IS IT THE PASSED DDNAME?\n         BE    DONEDD\n         B     NEXTDD                   DONT KNOW WHY BUT TRY AGAIN\nNEXTDD   EQU   *\n         AR    R2,R3                    BUMP TO NEXT DD ENTRY\n         IC    R3,0(R2)                 GET LENGTH OF ENTRY\n         B     FINDDD1                  LOOP\nDONEDD   EQU   *\n*        AT THIS POINT WE KNOW THAT THE DDNAME THAT WAS PASSED TO US\n*        HAS A DD CARD SO WE CAN TRY TO CREATE CONTROL BLOCKS FOR IT\n*        AND OPEN IT\nGETACB   GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               CATALOG=NO,                                             X\n               COPIES=1,                                               X\n               DDNAME=(*,DDNAME),                                      X\n               MACRF=(KEY,NFX,NDF,SEQ,NCI,OUT,NIS,NRM,NRS,NUB),        X\n               STRNO=2\n         LTR   R15,R15\n         BNZ   ERROR02\n         ST    R1,ACBADDR\n         LR    R6,R1\nOPENIT   OPEN  ((R6))                   OPEN THE ACB\n         B     ERRTYPE(R15)\nERRTYPE  B     CLOSEIT                  IF OPEN GOOD --> CLOSE AND END\n         B     ERROR05\n         B     LOGICAL                  LOGIC ERROR --> CHECK ERRORCODE\n         B     ERROR05\nLOGICAL  TESTCB ACB=(R6),                                              X\n               ERROR=X'A0',             CHECK IF FILE NEEDS PRIMING    X\n               ERET=ERROR08\n         BNE   ERROR05\nMODACB   MODCB ACB=(R6),                MODIFY ACB FOR LOAD MODE       X\n               AM=VSAM,                                                X\n               STRNO=1\n         LTR   R15,R15\n         BNZ   ERROR03\nOPEN2    OPEN  ((R6))                   OPEN THE ACB TO ADD RECORD\n         LTR   R15,R15\n         BNZ   ERROR05\n*        OPEN WAS SUCCESSFUL SO TEST TO BE SURE IT IS A KSDS\nTESTKSDS TESTCB ACB=(R6),                                              X\n               ATRB=KSDS,                                              X\n               ERET=ERROR08\n         BNE   ERROR10\n*        THIS IS A KSDS SO LETS FIND THE KEY LENGTH AND OFFSET\n         SHOWCB ACB=(R6),                                              X\n               AREA=SHOWFLD,                                           X\n               LENGTH=16,                                              X\n               FIELDS=(ERROR,KEYLEN,LRECL,RKP)\n         LTR   R15,R15\n         BNZ   ERROR06\n*        SHOWCB WAS SUCCESSFUL SO LETS GET STORAGE AREA\n         L     R4,RECLEN                 LOAD RECORD LENGTH TO R4\nGETSTOR  GETMAIN R,LV=(R4)\n         LR    R3,R1                     LOAD STORAGE ADDR TO R3\n*        TIME TO GENERATE RPL FOR UPDATE\nGETRPL   GENCB BLK=RPL,                                                X\n               ACB=(R6),                                               X\n               AM=VSAM,                                                X\n               AREA=(R3),                                              X\n               AREALEN=(R4),                                           X\n               RECLEN=(R4),                                            X\n               COPIES=1,                                               X\n               OPTCD=(KEY,SEQ,ARD,FWD,SYN,NUP,MVE)\n         LTR   R15,R15\n         BNZ   ERROR04\n         ST    R1,RPLADDR\n         LR    R5,R1 LOAD ADDRESS OF RPL TO R5\n*   RPL GEN IS GOOD, NOW ZERO OUT KEY AND WRITE RECORD\n         LR    R7,R3\n         AH    R7,KEYDISP            GET STARTING ADDRES OF KEY\n         MVI   0(R7),C'0'            MOVE 0 TO FIRST CHARACTER\n         L     R2,KEYYLEN            CALC KEY LENGTH\n         SH    R2,=H'2'                    MINUS 2 FOR PROPAGATION\n         EX    R2,ZEROKEY\nPUTREC   PUT   RPL=(R5)              WRITE RECORD WITH KEY=ZEROS\n         LTR   R15,R15\n         BNZ   ERROR09\n*   RELEASE STORAGE\nFREESTOR FREEMAIN R,LV=(R4),A=(R3)\n*\nCLOSE2   CLOSE ((R6))                 CLOSE BEFORE CALLING DELVSAM\n         LTR   R15,R15\n         BNZ   ERROR07\n*\n* CALL DELVSAM TO DELETE RECORD IN KSDS\n         L     R1,PARMADD\n         LINK  EP=DELVSAM\n         B     RETURNX\nCLOSEIT  CLOSE ((R6))                    CLOSE THE FILE\n         LTR   R15,R15\n         BNZ   ERROR07\n         WTO   'DLXPRIME MESSAGE - KSDS FILE WAS ALREADY PRIMED',      X\n               ROUTCDE=(11)\n* BEGINNING OF EPILOGUE\nRETURN0  EQU   *\n         LA    R15,4                    SET RETURN CODE TO 4\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS\n* END OF EPILOGUE\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nMOVEDD   MVC   DDNAME(*-*),0(R10)       MOVE IN DDNAME\nZEROKEY  MVC   1(0,R7),0(R7)            PROPAGATE ZERO THROUGHOUT KEY\nPROGNAME DC    CL8'DLXPRIME'            PROGRAM NAME FOR RACF\nACBADDR  DS    F                        ADDRESS OF ACB\nRPLADDR  DS    F                        ADDRESS OF RPL\nRECADDR  DS    F                        ADDRESS OF RECORD WITHIN BUFFER\nPARMADD  DS    F                        ADDRESS OF PARAMETER LIST\nSHOWFLD  DS    0F                       HOLD AREA FOR SHOWCB\nERRCODE  DS    F                        ERROR\nKEYYLEN  DS    F                        KEYLEN\nRECLEN   DS    F                        LRECL\nKEYDISP  DS    F                        RKP (KEY DISPLACEMENT)\nDDNAME   DC    CL8' '                   HOLD AREA FOR DDNAME\n         PRINT NOGEN\nERROR00  EQU   *\n         WTO   'DLXPRIME00 DLXPRIME DDNAME PARM MISSING',              X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR01  EQU   *\n         WTO   'DLXPRIME01 DLXPRIME DD CARD MISSING OR MISPELLED',     X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR02  EQU   *\n         WTO   'DLXPRIME02 GENCB FOR AN ACB FAILED',                   X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR03  EQU   *\n         WTO   'DLXPRIME03 MODCB FOR AN ACB FAILED',                   X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR04  EQU   *\n         WTO   'DLXPRIME04 GENCB FOR AN RPL FAILED',                   X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR05  EQU   *\n         WTO   'DLXPRIME05 OPEN FOR AN ACB FAILED',                    X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR06  EQU   *\n         WTO   'DLXPRIME06 SHOWCB FOR AN ACB FAILED',                  X\n               ROUTCDE=(11)\n         CLOSE ((R6))\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR07  EQU   *\n         WTO   'DLXPRIME07 CLOSE OF AN ACB FAILED',                    X\n               ROUTCDE=(11)\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR08  EQU   *\n         WTO   'DLXPRIME08 TESTCB OF AN ACB FAILED',                   X\n               ROUTCDE=(11)\n         CLOSE ((R6))\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR09  EQU   *\n         WTO   'DLXPRIME09 PUT OF RECORD FAILED',                      X\n               ROUTCDE=(11)\n         CLOSE ((R6))\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR10  EQU   *\n         WTO   'DLXPRIME10 DDNAME DOES NOT SPECIFY A KSDS FILE',       X\n               ROUTCDE=(11)\n         CLOSE ((R6))\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR11  EQU   *\n         WTO   'DLXPRIME11 DLXPRIME NOT AUTHORIZED FOR YOUR USERID',   X\n               ROUTCDE=(2,9,11)\n         ABEND X'913',,STEP     ABEND WITH USER 913 AND ABEND USER\n         PRINT GEN\n         LTORG\n         PRINT NOGEN\n         EQUATE                         REGISTER EQUATES\n*\n*  DSECTS\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\n*\n         PRINT GEN\n         END   DLXPRIME\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLXPUNCH": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x000\\x000\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "DELUXE"}, "text": "DLXPUNCH CSECT\n         STM   R14,R12,12(R13)\n         LR    R11,R15\n         USING DLXPUNCH,R11\n         ST    R13,SAVEAREA+4\n         LR    R6,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R6)\n         OPEN  (SYSUT1)\n         OPEN  (SYSPUNCH,OUTPUT)\nLOOP1    EQU   *\n         GET   SYSUT1,INAREA\n         MVI   OUTECB,X'00'   INITIALIZE ECB\n         EXCP  OUTIOB         WRITE IT\n         WAIT  ECB=OUTECB     WAIT FOR IT\n         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?\n         BNE   OUTERR         NO - ERROR\n         B     LOOP1\nOUTERR   ABEND 2048,DUMP\n*\n*  CLOSE ALL FILES\n*\nEOFUT1   CLOSE (SYSUT1)\n         CLOSE (SYSPUNCH)\n*\n*  THE END\n*\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         RETURN RC=0\nSAVEAREA DC    18F'0'\n         CNOP  0,8\nOUTCCW   DC    X'81',AL3(INAREA),X'2000',H'80'\nOUTECB   DC    F'0'\nOUTIOB   DC    X'02000000'\n         DC    A(OUTECB)\nOUTCSW   DC    2F'0'\n         DC    A(OUTCCW)\nOUTDCBPT DC    A(SYSPUNCH)\n         DC    F'0'\n         DC    X'00000000'\n         SPACE 3\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,EODAD=EOFUT1,LRECL=80,           X\n               MACRF=(GM),RECFM=FB\nSYSPUNCH DCB   MACRF=(E),DDNAME=SYSPUNCH,DEVD=PC,DSORG=PS,RECFM=F\nINAREA   DS    CL80\n         EQUATE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXRACCK": {"ttr": 3597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x008\\x008\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "DELUXE"}, "text": "DLXRACCK CSECT\n         SAVE  (14,12),,DLXRACCK_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXRACCK,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n* END OF PROLOGUE                       SAVE AREA\nGETPARM1 EQU   *                        GET PARM FIELD\n         L     R1,0(R1)                 ADDRESS OF PARM TO R2\n         LH    R3,0(R1)                 LENGTH OF PARM TO R3\n         LTR   R3,R3                    CHECK FOR NO PARM\n         BZ    RETURN16                 NO PARMS\n         CH    R3,=H'8'                 CHECK FOR VALID ADDRESS LENGTH\n         BH    RETURN20                 BAD LENGTH\n         BCTR  R3,R0                    DECREMENT LENGTH FOR EXECUTE\n         MVC   PROGNAME(*-*),2(R1)      MOVE PARM\n         EX    R3,*-6                   VIA EXECUTE\n*   BEGINNING OF RACF CHECKING\n         SLR   R15,R15                 START OUT WITH 0\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n*\n*  IF USER HAS SPECIAL ATTRIBUTE, EXIT WITHOUT FURTHER CHECKING\n*\n         L     R2,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2\n         USING ASXB,R2                 TELL ASSEMBLER\n         L     R2,ASXBSENV             GET ADDRESS OF ACEE\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BO    ENDRACF                 IF NOT, CHECK FURTHER\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         RACHECK ENTITY=PROGNAME,CLASS='APPL',LOG=NOSTAT\nENDRACF  EQU   *\n*   END OF RACF CHECKING\n         B     RETURNX\nRETURN16 LA    R15,16\n         B     RETURNX\nRETURN20 LA    R15,20\n         B     RETURNX\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),T,RC=(15)       RETURN TO OS RC=R15\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nPROGNAME DC    CL8'        '\n         LTORG\n         EQUATE\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         CVT   DSECT=YES                REQUIRED FOR CALLRTM\n         END   DLXRACCK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXREBL#": {"ttr": 3599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00-\\x00-\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "DELUXE"}, "text": "1\n-             DELUXE DATASET REBLOCK PROGRAM -- DLXREBLK\n                                                              REV 9/17/84\n-\n  DLXREBLK IS A GENERALIZED FILE REBLOCKING PROGRAM.  IT WILL REWRITE\n       ANY SEQUENTIAL FILE INTO A FILE WITH A RECORD LENGTH LARGER OR\n       SMALLER THAN THE ORIGINAL, PROVIDING THAT ONE RECORD LENGTH IS\n       AN INTEGRAL MULTIPLE OF THE OTHER.\n0 DLXREBLK WILL NOT PROCESS VARIABLE LENGTH RECORDS.\n0 WHEN BLOCKING UP TO LARGER RECORDS, THERE MUST BE ENOUGH INPUT RECORDS\n       TO CREATE WHOLE OUTPUT RECORDS.  IF THERE ARE ANY INPUT RECORDS\n       LEFT OVER, AN ERROR (DLX007E) WILL RESULT AND THE OUTPUT FILE\n       WILL BE EMPTY.\n1\n-                     DLXREBLK -- JCL\n0 DD NAMES:\n  SYSUT1    -  INPUT FILE TO BE REBLOCKED\n  SYSUT2    -  OUTPUT FILE WHICH WILL CONTAIN REBLOCKED RECORDS\n0 PARM INFO:\n    PARM='OUTLRECL='  -  OUTPUT FILE RECORD LENGTH\n                         MUST BE SPECIFIED, AND MUST BE EITHER A MULTIPLE\n                         OF THE INPUT RECORD LENGTH OR THE INPUT RECORD\n                         LENGTH MUST BE A MULTIPLE OF IT.\n0   PARM='OUTBLKSZ='  -  OUTPUT FILE BLOCK SIZE\n                         MUST BE SPECIFIED, AND MUST BE VALID FOR THE\n                         RECORD LENGTH SPECIFIED.\n1\n-                   DLXREBLK - ERROR MESSAGES\n-      'DLX001E  DLXREBLK -- NEW RECORD LENGTH NOT SPECIFIED'\n                   PROGRAM TERMINATES, RC=8.\n0      'DLX002E  DLXREBLK -- NEW BLOCK SIZE NOT SPECIFIED'\n                   PROGRAM TERMINATES, RC=8.\n0      'DLX003E  DLXREBLK -- OPEN ERROR ON SYSUT2 FILE'\n                   PROGRAM TERMINATES, RC=RETURN CODE FROM OPEN.\n0      'DLX004E  DLXREBLK -- OPEN ERROR ON SYSUT1 FILE'\n                   PROGRAM TERMINATES, RC=RETURN CODE FROM OPEN.\n0      'DLX005E  DLXREBLK -- OLD RECORD LENGTH IS NOT AN EVEN MULTIPLE\n                             OF THE NEW RECORD LENGTH'\n                   PROGRAM TERMINATES, RC=8.\n0      'DLX006E  DLXREBLK -- NEW RECORD LENGTH IS NOT AN EVEN MULTIPLE\n                             OF THE OLD RECORD LENGTH'\n                   PROGRAM TERMINATES, RC=8.\n0      'DLX007E  DLXREBLK -- NUMBER OF INPUT RECORD DOES NOT CREATE AN\n                             INTERGRAL NUMBER OF OUTPUT RECORDS'\n                   PROGRAM TERMINATES, RC=8.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXREBLK": {"ttr": 3842, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x9e\\x01\\x9e\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 414, "newlines": 414, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXREBLK - REBLOCK FILES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = DLXREBLK                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = CHANGE THE RECORD LENGTH AND         *\n*                BLOCK SIZE OF FILES.                                 *\n*                                                                     *\n*             FUNCTION =                                              *\n*                READS SYSUT1 FILE.  IF SPECIFIED OUTPUT RECORD       *\n*                LENGTH IS SHORTER, CREATES AN INTEGRAL NUMBER        *\n*                OF OUTPUT RECORDS FROM EACH SYSUT1 RECORD.  IF       *\n*                SPECIFIED OUTPUT RECORD LENGTH IS LONGER,  COM-      *\n*                BINES AN INTERGRAL NUMBER OF SYSUT1 RECORDS TO       *\n*                MAKE EACH OUTPUT RECORD.                             *\n*                                                                     *\n*                OPERATION =                                          *\n*                   READ PARAMETERS                                   *\n*                   OPEN SYSUT1 AND SYSUT2 FILES                      *\n*                   IF SPECIFIED LRECL IS SHORTER THAN SYSUT1'S:      *\n*                     DETERMINE # OF OUTPUT RECORDS PER INPUT RECORD  *\n*                     READ SYSUT1 RECORD                              *\n*                     AT END-OF-FILE, EXIT                            *\n*                     OUTPUT PREVIOUSLY DETERMINED # OF RECORDS       *\n*                     GOTO READ SYSUT1                                *\n*                   IF SPECIFIED LRECL IS LONGER THAN SYSUT1'S:       *\n*                     DETERMINE # OF INPUT RECORDS PER OUTPUT RECORD  *\n*                     READ PREVIOUSLY DETERMINED # OF SYSUT1 RECORDS  *\n*                     AT END-OF-FILE, EXIT                            *\n*                     WRITE INTO SYSUT2 FILE                          *\n*                     GOTO READ                                       *\n*                   CLOSE SYSUT1 AND SYSUT2 FILES                     *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 9  = WORK REGISTERS               *\n*                    REGISTERS 10      = LINKAGE REGISTER             *\n*                    REGISTERS 11      = ADDRESSABILITY TO DCB        *\n*                    REGISTER  12      = ADDRESSABILITY TO DLXREBLK   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, GETMAIN, OPEN, GET, PUT, CLOSE, FREEMAIN       *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                09/17/84  WRITTEN.      BC.                          *\n*                04/14/86  ADDED \"IGNRLAST\" PARM TO,                  *\n*                          ON A LARGE RECORD BEING BUILT FROM MANY    *\n*                          MANY SMALLER RECORDS, IF IT IS ALL BLANKS, *\n*                          IGNORE THE LAST INPUT RECORD   MJL.        *\n*                08/27/86  ADDED \"IGNRFRST\" PARM TO SKIP THE FIRST    *\n*                          80 BYTE RECORD IF IT IS ALL BLANKS. USED   *\n*                          ONLY WHEN INCREASING LRECL.     JST.       *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*     //DLXREBLK JOB (GEE1,0104),'BARB COUTURE',CLASS=S,MSGCLASS=A,   *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1 EXEC PGM=DLXREBLK,PARM='OUTLRECL=80,OUTBLKSZ=6144'      *\n*     //SYSUT1 DD DSN=T99999.SYSUT1.TEST,DISP=SHR                     *\n*     //SYSUT2 DD DSN=T99999.SYSUT2.TEST,DISP=(,CATLG),               *\n*                UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=6144),     *\n*                SPACE=(TRK,(5,2))                                    *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n*\nDLXREBLK CSECT\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15\n         USING DLXREBLK,R12            ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE PTR TO WORK AREA\n         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA\n         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA\n         LR    R13,R10                 LOAD ADDR OF CURRENT SA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n         LA    R6,DATA                 SET UP REGISTERS FOR\n         LA    R7,MOVEL                  LONG MOVE\n         LA    R8,CDATA\n         LA    R9,MOVEL\n         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA\n         MVI   IGNRLAST,C'N'           INIT IGNORE LAST RECORD FLAG\n         MVI   IGNRFRST,C'N'           INIT IGNORE FIRST RECORD FLAG\n*\n*  GET 'OUTLRECL' AND 'OUTBLKSZ' PARMS.\n*\nGETPARM  EQU   *\n         MVI   OUTLRECL,X'40'          CLEAR NEW RECORD LENGTH\n         MVC   OUTLRECL+1(L'OUTLRECL-1),OUTLRECL\n         MVI   OUTBLKSZ,X'40'          CLEAR NEW BLOCK SIZE\n         MVC   OUTBLKSZ+1(L'OUTBLKSZ-1),OUTBLKSZ\n         L     R5,0(R2)                GET PARM ADDRESS\n         LH    R3,0(R5)                SAVE PARM LENGTH\n         LTR   R3,R3                   ANY PARM DATA?\n         BZ    GP40                    IF NOT, BRANCH\n         LA    R5,2(R5)                SKIP PARM LENGTH FIELD\n         LA    R4,PARMBUF              SET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\nGP10     EQU   *\n         CLI   0(R5),C','              DELIMITING COMMA?\n         BE    GP20                    IF SO, BRANCH\n         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER\n         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER\n         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER\n         BCT   R3,GP10                 LOOP BACK TIL DONE\nGP20     EQU   *\n         CLC   PARMBUF(9),=C'OUTLRECL='  CHECK FOR 'OUTLRECL' KEYWORD\n         BNE   GP25                    IF NOT, BRANCH\n         MVC   OUTLRECL,PARMBUF+9      SAVE OUTPUT RECORD LENGTH\n         B     GP30\nGP25     EQU   *\n         CLC   PARMBUF(9),=C'OUTBLKSZ='  CHECK FOR 'OUTBLKSZ' KEYWORD\n         BNE   GP26                    IF NOT, BRANCH\n         MVC   OUTBLKSZ,PARMBUF+9      SAVE OUTPUT BLOCK SIZE\n         B     GP30\nGP26     EQU   *\n         CLC   PARMBUF(8),=C'IGNRLAST'  CHECK FOR 'IGNRLAST' KEYWORD\n         BNE   GP27                    IF NOT, BRANCH\n         MVI   IGNRLAST,C'Y'            SET IGNORE LAST RECORD FLAG\n         B     GP30\nGP27     EQU   *\n         CLC   PARMBUF(8),=C'IGNRFRST'  CHECK FOR 'IGNRFRST' KEYWORD\n         BNE   GP30                    IF NOT, BRANCH\n         MVI   IGNRFRST,C'Y'            SET IGNORE FIRST RECORD FLAG\nGP30     EQU   *\n         LA    R4,PARMBUF              RESET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\n         LTR   R3,R3                   ANY MORE PARMS?\n         BZ    GP40                    IF NOT, EXIT\n         LA    R5,1(R5)                IF SO, SKIP COMMA\n         B     GP10                    AND LOOP BACK\nGP40     EQU   *\n         CLC   OUTLRECL,=CL8' '        NEW RECORD LENGTH SPECIFIED?\n         BE    ERROR1                  IF NOT, ERROR\n         CLC   OUTBLKSZ,=CL8' '        NEW BLOCK SIZE SPECIFIED?\n         BE    ERROR2                  IF NOT, ERROR\n         LA    R2,OUTLRECL             POINT TO BEGINNING OF LRECL\n         BAL   R10,PACKIT              CONVERT TO PACKED DECIMAL\n         CVB   R5,PWORK                CONVERT TO BINARY\n         ST    R5,NLRECL               SAVE NEW RECORD LENGTH\n         LA    R2,OUTBLKSZ             POINT TO BEGINNING OF BLKSZ\n         BAL   R10,PACKIT              CONVERT TO PACKED DECIMAL\n         CVB   R5,PWORK                CONVERT TO BINARY\n         ST    R5,NBLKSZ               SAVE NEW BLOCK SIZE\n*\n*  INITIALIZE LRECL AND BLKSIZE OF SYSUT2 AND OPEN SYSUT1 AND\n*  SYSUT2.\n*\nINIT     EQU   *\n         LA    R11,SYSUT2              POINT TO OUTPUT DCB\n         USING IHADCB,R11              ESTABLISH ADDRESSABILITY\n         MVC   DCBLRECL,NLRECL+2       STORE NEW RECORD LENGTH\n         MVC   DCBBLKSI,NBLKSZ+2       STORE NEW BLOCK SIZE\n         OPEN  (SYSUT2,OUTPUT),MF=(E,EX2)  OPEN OUTPUT DATA SET\n         LTR   R15,R15\n         BNZ   ERROR3\n         OPEN  (SYSUT1,INPUT),MF=(E,EX2)    OPEN INPUT DATA SET\n         LTR   R15,R15\n         BNZ   ERROR4\n         LA    R11,SYSUT1              POINT TO INPUT DCB\n         SLR   R5,R5\n         ICM   R5,B'0011',DCBLRECL     GET OLD RECORD LENGTH\n         ST    R5,OLRECL               AND SAVE IT\n         L     R3,NLRECL               GET NEW RECORD LENGTH\n         DROP  R11\n         GETMAIN R,LV=(R3)             GET DYNAMIC AREA FOR OUTPUT REC\n         ST    R1,OUTADDR              PRESERVE PTR TO OUTPUT AREA\n         CR    R5,R3                   COMPARE OLD TO NEW\n         BL    INCSIZE                 GO TO INCREASE RECORD SIZE\n*\n*  READ THE SYSUT1 RECORDS.  SPLIT EACH RECORD INTO AN INTEGRAL\n*    NUMBER OF SMALLER RECORDS BASED ON NEW RECORD LENGTH SPECIFIED\n*    IN THE PARAMETERS.\n*\nDECSIZE  EQU   *\n         MVI   CHKFLG,C'N'             INDICATE NO CHECK NEEDED AT END\n         SLR   R4,R4                   INIT R4\n         DR    R4,R3                   DIVIDE NEW SIZE INTO OLD (R5)\n         C     R4,=F'0'                ANY REMAINDER?\n         BNE   ERROR5                  IF SO, FORGET IT\n         ST    R5,NUMRECS              STORE # OF SMALLER RECS\n         L     R9,OUTADDR\n         BCTR  R3,0                    DECREMENT NEW RECORD LENGTH\nDS10     EQU   *\n         GET   SYSUT1                  READ AN INPUT RECORD\n         LR    R7,R1                   SAVE ADDRESS OF RECORD\n         L     R5,NUMRECS              GET # OF RECS TO OUTPUT\nDS20     EQU   *\n         EX    R3,LOADOUT              LOAD THE OUTPUT BUFFER\n         PUT   SYSUT2,(R9)             WRITE INTO OUTPUT FILE\n         AR    R7,R3                   POINT TO NEXT RECORD\n         LA    R7,1(R7)\n         BCT   R5,DS20                 LOOP TIL ALL OUTPUT\n         B     DS10                    LOOP TIL ALL INPUT PROCESSED\n*\n*  READ THE SYSUT1 RECORDS.  PACK THE RECORDS INTO LARGER RECORDS\n*    OF SPECIFIED RECORD LENGTH.\n*\nINCSIZE  EQU   *\n         MVI   CHKFLG,C'Y'             INDICATE CHECK NEEDED AT END\n         SLR   R2,R2                   INIT R2 FOR DIVIDE\n         DR    R2,R5                   DIVIDE OLD SIZE INTO NEW (R3)\n         C     R2,=F'0'                ANY REMAINDER?\n         BNE   ERROR6                  IF SO, FORGET IT\n         ST    R3,NUMRECS              SAVE NUMBER OF RECS\n         L     R9,OUTADDR              GET ADDR OF OUTPUT BUFFER\n         LR    R2,R9                   STORE IN R2\n         BCTR  R5,0                    DECREMENT OLD RECORD LENGTH\nIS10     EQU   *\n         GET   SYSUT1                  READ AN INPUT RECORD\n         LR    R7,R1                   GET POINTER TO BEGINNING\n         CLI   IGNRFRST,C'Y'           IGNORE FIRST RECORD FLAG ON?\n         BNE   IS11                    NO - BRANCH\n         CLC   OLRECL+2(2),=X'0050'    IS IT AN 80 CHAR RECORD?\n         BNE   IS11                    NO - BRANCH\n         CLC   0(80,R7),=CL80' '       IS THE FIRST RECORD 80 BLANKS?\n         BNE   IS11                    NO - BRANCH\n         MVI   IGNRFRST,C'N'           YES - TURN OFF IGNRFRST SWITCH\n         B     IS10                        AND GET ANOTHER RECORD\nIS11     EX    R5,LOADOUT              MOVE RECORD INTO OUTPUT BUFFER\n         AR    R9,R5                   MOVE OUTPUT POINTER\n         LA    R9,1(R9)\n         BCT   R3,IS10                 LOOP TIL ALL OUTPUT LOADED\n         PUT   SYSUT2,(R2)             WRITE INTO OUTPUT FILE\n         L     R9,OUTADDR              RESET R9\n         L     R3,NUMRECS              RESET R3\n         B     IS10                    LOOP TIL ALL INPUT PROCESSED\n*\n*  CHECK TO MAKE SURE THERE WERE ENOUGH SMALL RECORDS TO MAKE UP\n*    THE LAST LARGER RECORD.  IF NOT, CLEAR THE OUTPUT FILE AND\n*    REPORT AN ERROR.\n*\nENDREAD  EQU   *\n         CLI   CHKFLG,C'Y'             FINAL CHECK NEEDED?\n         BNE   CLOSE                   IF NOT, BRANCH\n         CLI   IGNRLAST,C'Y'           IGNORE LAST RECORD FLAG ON?\n         BNE   ENDREAD2                SKIP LAST RECORD CHECKS\n         CLC   OLRECL+2(2),=X'0050'    IS IT AN 80 CHAR RECORD\n         BNE   ENDREAD2                IF NOT IGNRLAST DOES NOT APPLY\n         SR    R9,R5                   SET R9 BACK ONE RECORD\n         BCTR  R9,R0\n         CLC   0(80,R9),=CL80' '       IS THE LAST RECORD 80 BLANKS?\n         BNE   ENDREAD2                IF NOT IGNRLAST DOES NOT APPLY\n         LA    R3,1(R3)                IGNRLAST APPLYS, INCREMENT COUNT\nENDREAD2 EQU   *\n         C     R3,NUMRECS              CHECK R3\n         BE    CLOSE                   IF EQUAL, OK\n         CLOSE SYSUT2,MF=(E,EX4)       OTHERWISE, CLOSE OUTPUT\n*        OPEN  (SYSUT2,OUTPUT),MF=(E,EX2)  AND REOPEN FOR INPUT\n         B     ERROR7                  THEN REPORT ERROR\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         L     R3,NLRECL\n         L     R9,OUTADDR\n         FREEMAIN R,LV=(R3),A=(R9)\n         CLOSE (SYSUT1,FREE,SYSUT2,FREE),MF=(E,EX4)\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     RETURN\nCLOSE    EQU   *\n         L     R3,NLRECL\n         L     R9,OUTADDR\n         FREEMAIN R,LV=(R3),A=(R9)\n         CLOSE (SYSUT1,FREE,SYSUT2,FREE),MF=(E,EX4)\n         SLR   R15,R15\nRETURN   EQU   *\n         LR    R7,R15                  SAVE RETURN CODE\n         FREEMAIN R,LV=LDATA,A=(13)    FREE DYNAMIC WORK AREA\n         LR    R15,R7                  RESTORE RETURN CODE\n         L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n*\nERROR1   EQU   *\n         WTO   'DLX001E  DLXREBLK -- NEW RECORD LENGTH NOT SPECIFIED', X\n               ROUTCDE=(11)\n         LA    R15,8\n         B     RETURN\nERROR2   EQU   *\n         WTO   'DLX002E  DLXREBLK -- NEW BLOCK SIZE NOT SPECIFIED',    X\n               ROUTCDE=(11)\n         LA    R15,8\n         B     RETURN\nERROR3   EQU   *\n         WTO   'DLX003E  DLXREBLK -- OPEN ERROR ON SYSUT2 FILE',       X\n               ROUTCDE=(11)\n         B     CLOSEX\nERROR4   EQU   *\n         WTO   'DLX004E  DLXREBLK -- OPEN ERROR ON SYSUT1 FILE',       X\n               ROUTCDE=(11)\n         B     CLOSEX\nERROR5   EQU   *\n         WTO   'DLX005E  DLXREBLK -- OLD RECORD LENGTH IS NOT AN EVEN MX\n               ULTIPLE OF THE NEW RECORD LENGTH',ROUTCDE=(11)\n         LA    R15,8\n         B     CLOSEX\nERROR6   EQU   *\n         WTO   'DLX006E  DLXREBLK -- NEW RECORD LENGTH IS NOT AN EVEN MX\n               ULTIPLE OF THE OLD RECORD LENGTH',ROUTCDE=(11)\n         LA    R15,8\n         B     CLOSEX\nERROR7   EQU   *\n         WTO   'DLX007E  DLXREBLK -- NUMBER OF INPUT RECORDS DOES NOT CX\n               REATE AN INTEGRAL NUMBER OF OUTPUT RECORDS',ROUTCDE=(11)\n         LA    R15,8\n         B     CLOSEX\n*\n*  SUBROUTINES\n*\nPACKIT   EQU   *\n         SLR   R3,R3                   INIT LENGTH\n         LR    R4,R2\nPK10     EQU   *\n         CLI   0(R4),X'40'             LOOK FOR SPACE\n         BE    PK20                    WHEN FOUND, BRANCH\n         CLI   0(R4),X'00'             LOOK FOR ZERO ALSO\n         BE    PK20                    WHEN FOUND, BRANCH\n         LA    R3,1(R3)                COUNT THE NON-SPACE\n         LA    R4,1(R4)                GO TO THE NEXT BYTE\n         B     PK10                    AND LOOP\nPK20     EQU   *\n         BCTR  R3,0                    DECREMENT LENGTH\n         EX    R3,PACKNUM              CONVERT TO PACKED DECIMAL\n         BR    R10                     AND RETURN\n*\n***********************************************************************\n*                                                                     *\n*                     CONSTANT DATA                                   *\n*                                                                     *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         LTORG\n*\n*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA\n*\nCDATA    DS    0F\nDCB1     DCB   DDNAME=SYSUT1,MACRF=(GL),EODAD=ENDREAD,DSORG=PS\nDCB2     DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,MACRF=(PM)\nLIST2    OPEN   (,),MF=L\nLIST4    CLOSE  (,),MF=L\nINST1    MVC   0(0,R9),0(R7)\nINST2    PACK  PWORK,0(0,R2)\nMOVEL    EQU   *-CDATA\n*\n*\n*  MISCELLANEOUS CONSTANTS\n*\n*\n***********************************************************************\n*                                                                     *\n*                    DSECTS FOR GETMAIN'ED AREA                       *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F\n*\nOUTBLKSZ DS    CL8\nOUTLRECL DS    CL8\nPARMBUF  DS    CL20\nWORK     DS    CL8\nCHKFLG   DS    CL1\nIGNRFRST DS    CL1\nIGNRLAST DS    CL1\nNBLKSZ   DS    1F\nNLRECL   DS    1F\nOLRECL   DS    1F\nOUTADDR  DS    1F\nNUMRECS  DS    1F\nPWORK    DS    1D\n*\nDATA     DS    0F\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=(GL),EODAD=ENDREAD,DSORG=PS\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,MACRF=(PM)\nEX2      OPEN   (,),MF=L\nEX4      CLOSE  (,),MF=L\nLOADOUT  MVC   0(0,R9),0(R7)\nPACKNUM  PACK  PWORK,0(0,R2)\n*\nLDATA    EQU   *-WORKAREA\n*\n*\nDCBSECT  DSECT\n         DCBD  DSORG=PS,DEVD=DA\n         END   DLXREBLK\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLXRFSCN": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\t\\x02\\t\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 521, "newlines": 521, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXRFSCN - SCAN RACF USER PROFILES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = DLXRFSCN                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = SCAN RACF USER PROFILES TO CHECK     *\n*                FOR INACTIVE USERS.                                  *\n*                                                                     *\n*             FUNCTION =                                              *\n*                SCANS THE RACF USER PROFILES AND CREATES 3 LISTS:    *\n*                1) USERS WHO HAVE NEVER LOGGED ON, BUT WHOSE         *\n*                   PROFILES ARE AT LEAST 7 DAYS OLD.                 *\n*                2) USERS WHO ARE WITHIN 7 DAYS OF BEING REVOKED      *\n*                   FOR INACTIVITY.                                   *\n*                3) FINANCIAL INSTITUTIONS THAT HAVE BEEN INACTIVE    *\n*                   FOR 'PARM=NN' DAYS.                               *\n*                ALSO, A CLIST IS PRODUCED TO REVOKE THE USER         *\n*                PROFILES PRINTED ON LIST #1.                         *\n*                                                                     *\n*                OPERATION =                                          *\n*                   READ AND PROCESS PARM                             *\n*                   OPEN OUTPUT DATASETS                              *\n*                   READ USER PROFILE FROM RACF DATASET               *\n*                   IF USER IS REVOKED, OUTPUT ON REPORT4             *\n*                   IF USER HAS NEVER LOGGED ON, AND HAS BEEN         *\n*                     DEFINED FOR AT LEAST 7 DAYS, OUTPUT ON          *\n*                     REPORT1 AND OUTPUT LINE IN CLIST TO             *\n*                     REVOKE THE USER                                 *\n*                   IF USER IS WITHIN 7 DAYS OF BEING REVOKED,        *\n*                     OUTPUT ON REPORT2                               *\n*                   IF USER IS A FINANCIAL INSTITUTION WHICH HAS      *\n*                     BEEN INACTIVE FOR THE NUMBER OF DAYS INDICATED  *\n*                     BY THE PARM, OUTPUT ON REPORT3                  *\n*                   GO TO READ NEXT USER PROFILE                      *\n*                   IF ALL USER PROFILES PROCESSED, CLOSE FILES       *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO DLXRFSCN   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, OPEN, PUT, CLOSE, RETURN                       *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                09/30/87  WRITTEN.      BHC.                         *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=DLXRFSCN,PARM='14'                         *\n*     //REPORT1  DD    SYSOUT=*                                       *\n*     //REPORT2  DD    SYSOUT=*                                       *\n*     //REPORT3  DD    SYSOUT=*                                       *\n*     //REPORT4  DD    SYSOUT=*                                       *\n*     //CLIST    DD    DSN=T99999.CMDS.CLIST(DLXRFSCN),DISP=SHR       *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n*\nDLXRFSCN CSECT\n         SAVE  (14,12),,DLXRFSCN_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING DLXRFSCN,R12            ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         ST    R13,SAVEAREA+4          SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                  SAVE IT IN R6\n         LA    R13,SAVEAREA            POINT R13 AT OUT SAVE AREA\n         ST    R13,8(R6)               STORE OUR SAVEAREA ADDR IN OS\n*\n*  PROCESS PARAMETERS.\n*\nGETPARM  EQU   *\n         L     R5,0(R2)                GET PARM ADDRESS\n         LH    R3,0(R5)                SAVE PARM LENGTH\n         LR    R7,R3                   AND SAVE FOR LATER\n         LTR   R3,R3                   ANY PARM DATA?\n         BZ    GP80                    IF NOT, BRANCH TO DEFAULT\n         LA    R5,2(R5)                SKIP PARM LENGTH FIELD\nGP05     EQU   *\n         LA    R4,PARMBUF              SET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\nGP10     EQU   *\n         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER\n         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER\n         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER\n         BCT   R3,GP10                 LOOP BACK TIL DONE\n         BCTR  R7,0\n         EX    R7,PACKNUM              CONVERT TO PACKED DECIMAL\n         MVC   P#DAYS,PWORK+4          STORE\n         UNPK  TITLE3B+22(3),P#DAYS+2(2)  CONVERT TO EBCDIC\nGP80     EQU   *\n         MVC   RACFWORK(4),RACFLENG    INIT LENGTH OF WORK AREA\nGETDATE  EQU   *\n         TIME  DEC                     GET CURRENT DATE\n         ST    R1,CDAY                 STORE IT\n         ST    R1,WORK                 WORK = 00YYDDDF\n         XC    WORK(2),WORK            WORK = 0000DDDF\n         SRL   R1,12                   R1 = 00000YYD\n         ST    R1,PWORK+4              PWORK+4 = 00000YYD\n         OI    PWORK+7,X'0F'           PWORK+4 = 00000YYF\n         UNPK  YY,PWORK+6(2)           STORE THE YEAR\n         CVB   R1,PWORK                CONVERT THE YEAR TO BINARY\n         N     R1,=F'3'                LEAP YEAR?\n         BNZ   GD10                    IF NOT, BRANCH\n         AP    DAYSYEAR,=P'1'          INCREASE DAYS IN A YEAR\n         AP    MONTH-1,=P'1'           ADD A DAY TO FEBRUARY\nGD10     EQU   *\n         LA    R1,MONTH                POINT TO JANUARY\nGD20     EQU   *\n         SP    WORK,0(1,R1)            SUBTRACT DAYS IN THE MONTH\n         SP    WORK,=P'30'\n         BNP   GD30                    WHEN NEGATIVE, BRANCH OUT\n         BCTR  R1,0                    GO BACKWARDS THRU TABLE\n         AP    COUNT,=P'1'             COUNT THE MONTHS\n         B     GD20                    AND LOOP\nGD30     EQU   *\n         AP    WORK,0(1,R1)            ADD LAST MONTH BACK IN\n         AP    WORK,=P'30'\n         OI    COUNT+L'COUNT-1,X'0F'   COUNT = 0MMF\n         UNPK  MM,COUNT                STORE THE MONTH\n         OI    WORK+3,X'0F'\n         UNPK  DD,WORK                 STORE THE DAY\nGETSYSID EQU   *\n         L     R2,CVTPTR               GET ADDR OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY\n         L     R8,CVTSMCA              GET ADDR OF SMCA\n         USING SMCABASE,R8             ESTABLISH ADDRESSABILITY\n         MVC   SYSID,SMCASID           OBTAIN SYSTEM ID\n         DROP  R2\n         DROP  R8\n         CLC   SYSID(3),=CL3'ADM'      ONE OF ADMIN'S COMPUTERS?\n         BNE   OPENFILE                IF NOT, CONTINUE\n         MVC   TITLEC,ADMIN            ELSE, LOAD ADMINISTRATION\nOPENFILE EQU   *\n         OPEN  (REPORT1,OUTPUT)        OPEN OUTPUT DATASETS\n         OPEN  (REPORT2,OUTPUT)        OPEN OUTPUT DATASETS\n         OPEN  (REPORT3,OUTPUT)        OPEN OUTPUT DATASETS\n         OPEN  (REPORT4,OUTPUT)        OPEN OUTPUT DATASETS\n         OPEN  (CLIST,OUTPUT)          OPEN CLIST DATASET\n         MVI   CMDLINE,X'40'\n         MVC   CMDLINE+1(L'CMDLINE-1),CMDLINE\n         MVC   CMDLINE(L'CLINE1),CLINE1\n         LA    R5,CMDLINE+L'CLINE1\n         LA    R3,CLINE\n         SR    R5,R3\n         BAL   R10,PRINTC\n         MVC   CMDLINE(L'CLINE2),CLINE2\n         LA    R5,CMDLINE+L'CLINE2\n         LA    R3,CLINE\n         SR    R5,R3\n         BAL   R10,PRINTC\nGETUSR   EQU   *\n         MVI   USERID,X'40'            INITIALIZE RACF NAME AREA\n         MVC   USERID+1(43),USERID\n         MVI   USERIDL,X'01'           INITIALIZE RACF NAME LENGTH\nGETUSR1  EQU   *\n         ICHEINTY NEXTC,TYPE='USR',ENTRY=USERIDL,                      X\n               ACTIONS=(U1,U2,U3,U4,U5),                               X\n               WKAREA=RACFWORK\n         LTR   R15,R15                 IF OK,\n         BZ    PROFU                      CONTINUE\n         C     R15,=F'12'              END OF RACF GROUP PROFILES?\n         BE    ENDUSR                  IF SO, GO CLOSE AND END\n         B     CLOSEX                  IF NOT, TAKE ERROR EXIT\nPROFU    EQU   *\n         LA    R2,RACFWORK             GET ADDRESS OF RACF WORK AREA\n         USING USRFLD0,R2              ESTABLISH ADDRESSABILITY\n         CLI   USFLAG4,X'00'           CHECK REVOKE FLAG\n         BE    PF20                    IF USER REVOKED, GO TO LIST4\nLIST4    EQU   *\n         LA    R3,LINE#4               POINT TO PARMS\n         LA    R5,REPORT4              POINT TO DCB4\n         BAL   R10,PRTLINE             OUTPUT THE LINE\n         B     GETUSR1\nPF20     EQU   *\n         CLC   USLJD,=XL3'FFFFFF'      HAS USER EVER LOGGED ON?\n         BNE   PF30                    IF SO, CONTINUE\n         MVC   PDATE+1(3),USAUTHD      GET CREATION DATE\n         AP    PDATE,=P'7'             ADD SEVEN DAYS\n         BAL   R10,CHKDATE             CHECK FOR VALID DATE\n         CP    PDATE,CDAY              COMPARE TO CURRENT DATE\n         BH    GETUSR1                 IF < OR =, OUTPUT ON LIST1\nLIST1    EQU   *\n         LA    R3,LINE#1               POINT TO PARMS\n         LA    R5,REPORT1              POINT TO DCB1\n         BAL   R10,PRTLINE             OUTPUT THE LINE\n         MVC   CMDLINE(L'CLINE3),CLINE3\n         LA    R5,CMDLINE+L'CLINE3\n         LA    R3,CLINE\n         SR    R5,R3\n         BAL   R10,PRINTC              ALSO ADD USER TO CLIST\n         B     GETUSR1                 THAT'S ALL FOR THIS GROUP\nPF30     EQU   *\n         MVC   PDATE+1(3),USLJD        GET LAST LOGON\n         AP    PDATE,=P'30'            ADD 30 DAYS\n         BAL   R10,CHKDATE\n         MVC   PDATE1,PDATE\n         MVC   PDATE,CDAY              GET CURRENT DAY\n         AP    PDATE,=P'7'             ADD 7 DAYS\n         BAL   R10,CHKDATE\n         CP    PDATE1,PDATE            COMPARE\n         BH    PF40                    IF < OR =, OUTPUT ON LIST2\nLIST2    EQU   *\n         LA    R3,LINE#2               POINT TO PARMS\n         LA    R5,REPORT2              POINT TO DCB2\n         BAL   R10,PRTLINE             OUTPUT THE LINE\nPF40     EQU   *\n         CLC   USDFLTG(5),=CL5'FIAOE'  FINANCIAL INSTITUTION?\n         BNE   GETUSR1                 IF NOT, ALL DONE\n         MVC   PDATE+1,USLJD           GET LAST LOGON\n         AP    PDATE,P#DAYS            ADD PARM\n         BAL   R10,CHKDATE\n         CP    PDATE,CDAY              COMPARE TO CURRENT DATE\n         BH    GETUSR1                 IF < OR =, OUTPUT ON LIST3\nLIST3    EQU   *\n         LA    R3,LINE#3               POINT TO PARMS\n         LA    R5,REPORT3              POINT TO DCB3\n         BAL   R10,PRTLINE             OUTPUT THE LINE\n         B     GETUSR1\nENDUSR   EQU   *\n         MVC   CMDLINE(L'CLINE4),CLINE4\n         LA    R5,CMDLINE+L'CLINE4\n         LA    R3,CLINE\n         SR    R5,R3\n         BAL   R10,PRINTC              END THE CLIST\n         B     CLOSE\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (REPORT1)               CLOSE THE FILE\n         CLOSE (REPORT2)\n         CLOSE (REPORT3)\n         CLOSE (REPORT4)\n         CLOSE (CLIST)\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     RETURN\nCLOSE    EQU   *\n         CLOSE (REPORT1)               CLOSE THE FILE\n         CLOSE (REPORT2)\n         CLOSE (REPORT3)\n         CLOSE (REPORT4)\n         CLOSE (CLIST)\n         SR    R15,R15                 SET RETURN CODE\nRETURN   L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n***********************************************************************\n*\n*  WRITE THE CLIST\n*\nPRINTC   EQU   *\n         AP    LINE#,=P'100'           INCREMENT LINE NUMBER\n         UNPK  LINENO,LINE#            UNPACK\n         MVZ   LINENO+7(1),LINENO+6      & MOVE ZONE BYTE\n         STH   R5,CLINE                STORE LINE LENGTH\n         MVC   CLINE+2(2),=X'0000'\n         PUT   CLIST,CLINE             WRITE INTO CLIST FILE\n         MVI   CLINE,X'40'\n         MVC   CLINE+1(L'CLINE-1),CLINE\n         BR    R10\n*\n*  CHECK FOR A VALID DATE\n*\nCHKDATE  EQU   *\n         MVC   DAYSYEAR,=PL2'365'      INIT DAYS / YEAR\n         L     R1,PDATE                R1 = 00YYDDDF\n         MVC   PDAY,PDATE+2            SAVE JUST THE DAY\n         SRL   R1,12                   R1 = 00000YYD\n         ST    R1,PWORK+4\n         OI    PWORK+7,X'0F'           PWORK+4 = 00000YYF\n         CVB   R1,PWORK                CONVERT TO BINARY\n         BCTR  R1,0                    DECREMENT FOR LAST YEAR\n         N     R1,=F'3'                LEAP YEAR?\n         BNZ   CD10                    IF NOT, BRANCH\n         AP    DAYSYEAR,=P'1'          INCREASE DAYS IN LAST YEAR\nCD10     EQU   *\n         CP    PDAY,DAYSYEAR           INTO NEXT YEAR?\n         BNH   CD20                    IF NOT, CONTINUE\n         SP    PDATE,DAYSYEAR          IF SO, SUBTRACT DAYS / YEAR\n         AP    PDATE,=P'1000'          AND ADD A YEAR\nCD20     EQU   *\n         BR    R10\n*\n*  FORMAT THE REPORT LINE\n*\nFMTLINE  EQU   *\n         ICM   R7,B'0001',USERIDL      GET LENGTH OF USERID\n         BCTR  R7,0                    DECREMENT\n         EX    R7,MOVNAME              STORE USERID\n         MVC   CLINE3+5(8),UID         ALSO STORE IN CLIST LINE\n         CLC   USPGMNM(8),=CL8'########'\n         BNE   FL10\n         MVC   NAME(7),=CL7'UNKNOWN'\n         B     FL20\nFL10     EQU   *\n         MVC   NAME,USPGMNM            STORE USER NAME\nFL20     EQU   *\n         MVC   GROUP,USDFLTG           STORE DEFAULT GROUP\n         UNPK  YYDDD,USAUTHD           UNPACK DATE\n         MVC   AYEAR,YYDDD             STORE THE YEAR\n         MVI   AYEAR+2,C'.'\n         MVC   ADAY,YYDDD+2            STORE THE DAY\n         CLC   USLJD,=XL3'FFFFFF'      DATE UNKNOWN?\n         BNE   FL30\n         MVC   LYEAR(7),=CL7'UNKNOWN'\n         B     FL40\nFL30     EQU   *\n         UNPK  YYDDD,USLJD             UNPACK DATE\n         MVC   LYEAR,YYDDD             STORE THE YEAR\n         MVI   LYEAR+2,C'.'\n         MVC   LDAY,YYDDD+2            STORE THE DAY\nFL40     EQU   *\n         BR    R9\n*\n*  PRINT A REPORT LINE\n*\nPRTLINE  EQU   *\n         MVI   LINE,X'40'              CLEAR OUTPUT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         L     R4,0(R3)                GET LINE NUMBER\n         LTR   R4,R4                   START NEW PAGE?\n         BNZ   PL10                    IF NOT, BRANCH\n         MVC   LINE+49(36),4(R3)       GET 'A' TITLE\n         MVI   LINE,C'1'\n         PUT   (R5),LINE               OUTPUT\n         MVC   LINE+49(36),40(R3)      GET 'B' TITLE\n         MVI   LINE,C' '\n         PUT   (R5),LINE               OUTPUT\n         MVC   LINE+49(36),TITLEC      GET 'C' TITLE\n         MVI   LINE,C' '\n         PUT   (R5),LINE               OUTPUT\n         MVC   LINE+49(36),TITLED      GET 'D' TITLE\n         MVI   LINE,C' '\n         PUT   (R5),LINE               OUTPUT\n         MVI   LINE,X'40'              CLEAR OUTPUT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVI   LINE,C'-'\n         MVC   LINE+21(75),HEADER      LOAD HEADER\n         PUT   (R5),LINE               OUTPUT\n         MVI   LINE,X'40'              CLEAR OUTPUT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVI   LINE,C'0'\nPL10     EQU   *\n         BAL   R9,FMTLINE              FORMAT THE OUTPUT LINE\n         PUT   (R5),LINE               OUTPUT\n         MVI   LINE,X'40'              CLEAR OUTPUT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R4,1(R4)                COUNT THE LINE\n         C     R4,=F'51'               END-OF-PAGE?\n         BNE   PL20                    IF NOT, BRANCH\n         SLR   R4,R4\nPL20     EQU   *\n         ST    R4,0(R3)                STORE THE NEXT LINE#\n         BR    R10\n*\n***********************************************************************\n*                     CONSTANT DATA                                   *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*    THE FOLLOWING FIELDS WILL BE RETRIEVED FROM THE RACF DATA SET\n*\nU1       ICHEACTN FIELD=AUTHDATE\nU2       ICHEACTN FIELD=FLAG4\nU3       ICHEACTN FIELD=PGMRNAME\nU4       ICHEACTN FIELD=DFLTGRP\nU5       ICHEACTN FIELD=LJDATE\n*\n***********************************************************************\nSAVEAREA DS    18F\n*\nPWORK    DS    1D\n*\nRACFLENG DC    F'76'\nWORK     DS    1F\n*\nCDAY     DC    PL4'0'\nPDATE    DC    PL4'0'\nPDATE1   DC    PL4'0'\nP#DAYS   DC    PL4'7'\nLINE#    DC    PL4'0'\nDAYSYEAR DC    PL2'365'\nPDAY     DC    PL2'0'\nCOUNT    DC    PL2'001'\n*\nYYDDD    DS    CL5\nPARMBUF  DS    CL8\nUSERIDL  DS    XL1\nUSERID   DS    CL8\nRACFWORK DS    XL80\nADMIN    DC    CL36'           ADMINISTRATION           '\n*\nLINE#1   DC    F'0'\nTITLE1A  DC    CL36'   USERS WHO HAVE NEVER LOGGED ON   '\nTITLE1B  DC    CL36'   (PROFILES AT LEAST 7 DAYS OLD)   '\nLINE#2   DC    F'0'\nTITLE2A  DC    CL36'    USERS WHO ARE WITHIN 7 DAYS     '\nTITLE2B  DC    CL36'         OF BEING REVOKED           '\nLINE#3   DC    F'0'\nTITLE3A  DC    CL36' FINANACIAL INSTITUTIONS THAT HAVE  '\nTITLE3B  DC    CL36'    BEEN INACTIVE FOR XXX DAYS      '\nLINE#4   DC    F'0'\nTITLE4A  DC    CL36'  USERS WHO ARE CURRENTLY REVOKED   '\nTITLE4B  DC    CL36' '\n*\nTITLEC   DS    0CL36\n         DC    CL16' '\nSYSID    DC    CL4' '\n         DC    CL16' '\n*\nTITLED   DS    0CL36\n         DC    CL14' '\nMM       DC    CL2' '\n         DC    CL1'/'\nDD       DC    CL2' '\n         DC    CL1'/'\nYY       DC    CL2' '\n         DC    CL14' '\n*\nHEADER   DC    CL44'USERID          GROUP           DATE DEFINED'\n         DC    CL31'        LAST ACCESS        NAME'\n*\nLINE     DS    0CL133\n         DS    CL1\n         DS    CL20\nUID      DS    CL8\n         DS    CL8\nGROUP    DS    CL8\n         DS    CL8\nAYEAR    DS    CL2\n         DS    CL1\nADAY     DS    CL3\n         DS    CL14\nLYEAR    DS    CL2\n         DS    CL1\nLDAY     DS    CL3\n         DS    CL13\nNAME     DS    CL20\n         DS    CL21\n*\nCLINE1   DC    CL6'PROC 0'\nCLINE2   DC    CL31'CONTROL LIST NOFLUSH PROMPT MSG'\nCLINE3   DC    CL20' ALU XXXXXXXX REVOKE'\nCLINE4   DC    CL3'END'\n*\n         DS    0F\nCLINE    DS    0CL255\n         DS    CL4\nLINENO   DS    CL8\nCMDLINE  DS    CL243\n*\n         DS    0CL12                 BACKWARD TABLE FOR MONTH\n         DC    P'1'                  DECEMBER\n         DC    P'0'                  NOVEMBER\n         DC    P'1'                  OCTOBER\n         DC    P'0'                  SEPTEMBER\n         DC    P'1'                  AUGUST\n         DC    P'1'                  JULY\n         DC    P'0'                  JUNE\n         DC    P'1'                  MAY\n         DC    P'0'                  APRIL\n         DC    P'1'                  MARCH\n         DC    P'-2'                 FEBRUARY\nMONTH    DC    P'1'                  JANUARY\n*\nMOVNAME  MVC   UID(0),USERID\nPACKNUM  PACK  PWORK,PARMBUF(0)\n*\nREPORT1  DCB   DDNAME=REPORT1,DSORG=PS,RECFM=FBA,LRECL=133,MACRF=(PM)\nREPORT2  DCB   DDNAME=REPORT2,DSORG=PS,RECFM=FBA,LRECL=133,MACRF=(PM)\nREPORT3  DCB   DDNAME=REPORT3,DSORG=PS,RECFM=FBA,LRECL=133,MACRF=(PM)\nREPORT4  DCB   DDNAME=REPORT4,DSORG=PS,RECFM=FBA,LRECL=133,MACRF=(PM)\nCLIST    DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,MACRF=(PM)\n*\nUSRFLD0  DSECT\n         DS    CL10\nUSFLAG   DS    CL1\n         DS    CL17\n         DS    CL2\nUSAUTHD  DS    CL3\n         DS    CL2\nUSFLAG4  DS    CL1\n         DS    CL2\nUSPGMNM  DS    CL20\n         DS    CL2\nUSDFLTG  DS    CL8\n         DS    CL2\nUSLJD    DS    CL3\n*\n         ICHPRCVT\n         CVT   DSECT=YES\n         IEESMCA\n*\n         END   DLXRFSCN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXRMTUX": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00p\\x00p\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 112, "newlines": 112, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 REMOTE PAGE EJECT EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 REMOTE PAGE EJECT EXIT 254                   *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE WILL SET CHANGE THE        *\n*       STANDARD JES2 PAGE EJECT COMMANDS TO NOP CCWS FOR SPECIFIC   *\n*       REMOTE PRINTERS.                                             *\n*                                                                    *\n*    ENTRY POINT = DLXUX254                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0-3  N/A                                                    *\n*       R4-R5 CCW WORK REGISTERS                                     *\n*       R6-9  N/A                                                    *\n*       R10   JCT ADDRESSABILITY                                     *\n*       R11   HCT ADDRESSABILITY                                     *\n*       R12   EXIT ADDRESSABILITY                                    *\n*       R13   PCE ADDRESSABILITY                                     *\n*       R14   RETURN ADDRESS                                         *\n*       R15   ENTRY ADDRESS                                          *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH NORMAL $WTO PROCESSING               *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nDLXRMTUX $MODULE $BUFFER,                                              +\n               $CAT,                    REQ'D BY HCT                   +\n               $DCT,                    REQ'D BY THIS EXIT             +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D BY $CAT                  +\n               $JQE,                    REQ'D BY HCT                   +\n               $MIT,                    REQ'D BY $MODEND               +\n               $PCE                     REQ'D BY HCT\n         TITLE 'DELUXE JES2 REMOTE PAGE EJECT EXIT'\n         SPACE 1\n         USING  DCTDSECT,R1             ESTABLISH DCT ADDRESSABILITY\n         USING  PCEDSECT,R13            ESTABLISH PCE ADDRESSABILITY\nDLXUX254 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR     R12,R15                 SET LOCAL BASE REGISTER\n         SLR    R15,R15                 SET ZERO RETURN CODE (DEFAULT)\n         L      R1,PCEDCT               LOAD DCT ADDRESS FROM PCE\n         TM     DCTDEVTP,DCTRPR         IS THIS A REMOTE PRINTER?\n         BNO    RETURN                  IF NOT, IGNORE IT\n         LA     R6,RMTLIST              ADDRESS OF TABLE TO R6\nRMTNEXT  EQU    *\n         CLC    DCTDEVN(8),0(R6)        IS THE DEVICE IN THE TABLE\n         BE     NOEJECT                 YES, PREVENT THE EJECT\n         LA     R6,8(R6)                OTHERWISE CHECK THE NEXT ENTRY\n         CLC    0(8,R6),=CL8'        '  IS IT THE END OF THE TABLE\n         BE     RETURN                  YES, NOT FOUND GET OUT\n         B      RMTNEXT                 OTHERWISE LOOP\nNOEJECT  EQU   *\n         LA     R15,4\nRETURN   $RETURN RC=(R15)               RETURN TO CALLER\nRMTLIST  EQU   *                   LIST OF REMOTES TO PROCESS\n         DC    CL8'R30.PR1 '\n         DC    CL8'R31.PR1 '\n         DC    CL8'R32.PR1 '\n         DC    CL8'R33.PR1 '\n         DC    CL8'R34.PR1 '\n         DC    CL8'R35.PR1 '\n         DC    CL8'R36.PR1 '\n         DC    CL8'R37.PR1 '\n         DC    CL8'R38.PR1 '\n         DC    CL8'R39.PR1 '\n         DC    CL8'R40.PR1 '\n         DC    CL8'R41.PR1 '\n         DC    CL8'R42.PR1 '\n         DC    CL8'R43.PR1 '\n         DC    CL8'R44.PR1 '\n         DC    CL8'R45.PR1 '\n         DC    CL8'R46.PR1 '\n         DC    CL8'R47.PR1 '\n         DC    CL8'R48.PR1 '\n         DC    CL8'R49.PR1 '\n         DC    CL8'R50.PR1 '\n         DC    CL8'R52.PR1 '\n         DC    CL8'R100.PR1'\n         DC    CL8'R101.PR1'\n         DC    CL8'R102.PR1'\n         DC    CL8'R103.PR1'\n         DC    CL8'R104.PR1'\n         DC    CL8'R105.PR1'\n         DC    CL8'R106.PR1'\n         DC    CL8'R107.PR1'\n         DC    CL8'R108.PR1'\n         DC    CL8'R109.PR1'\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EIGHT BLANKS TERMINATES THE SEARCH\n         SPACE 1\n         DROP   R1,R13                  DROP ADDRESSABILITIES\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXRTM": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00G\\x00G\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "DELUXE"}, "text": "DLXRTM CSECT\n         SAVE  (14,12),,DLXRTM_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXRTM,R12               TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n* END OF PROLOGUE                       SAVE AREA\n         ST    R1,PARMSAVE\n*   BEGINNING OF RACF CHECKING\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n*\n*  IF USER HAS SPECIAL ATTRIBUTE, EXIT WITHOUT FURTHER CHECKING\n*\n         L     R2,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2\n         USING ASXB,R2                 TELL ASSEMBLER\n         L     R2,ASXBSENV             GET ADDRESS OF ACEE\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BO    ENDRACF                 IF NOT, CHECK FURTHER\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         RACHECK ENTITY=PROGNAME,CLASS='APPL'\n         LTR   R15,R15\n         BZ    ENDRACF\n         ABEND X'913',,STEP             ABEND USER\nENDRACF  EQU   *\n*   END OF RACF CHECKING\n         L     R1,PARMSAVE\nGETPARM1 EQU   *                        GET PARM FIELD\n         L     R1,0(R1)                 ADDRESS OF PARM TO R2\n         LH    R3,0(R1)                 LENGTH OF PARM TO R3\n         LTR   R3,R3                    CHECK FOR NO PARM\n         BZ    RETURN4                  NO PARMS\n         CH    R3,=H'3'                 CHECK FOR VALID ADDRESS LENGTH\n         BNE   RETURN8                  BAD LENGTH\n         MVC   ASIDPARM(3),2(R1)        MOVE PARM\n         PACK  WORK8,ASIDPARM\n         CVB   R4,WORK8\n         MODESET KEY=ZERO,MODE=SUP\n         LR    R5,R13\n         LA    R13,CALLAREA\n         CALLRTM TYPE=MEMTERM,COMPCOD=2457,ASID=(4),DUMP=NO,STEP=YES\n         MODESET KEY=NZERO,MODE=PROB\n         LR    R13,R5\n         SLR   R15,R15\n         B     RETURNX\nRETURN4  LA    R15,4\n         B     RETURNX\nRETURN8  LA    R15,8\n         B     RETURNX\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS RC=R15\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nCALLAREA DC    18F'0'                   CALLRTM SAVE AREA\nWORK8    DC    D'0'                     WORKAREA\nPARMSAVE DC    F'0'\nASIDPARM DC    CL3'000'                 ASID\nPROGNAME DC    CL8'DLXRTM  '            PROGRAM NAME\n         LTORG\n         EQUATE\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         CVT   DSECT=YES                REQUIRED FOR CALLRTM\n         END   DLXRTM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXSHARD": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00`\\x00`\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "DELUXE"}, "text": "DLXSHARD CSECT\n         SAVE  (14,12),,DLXSHARD_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXSHARD,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         LR    R3,R1                    SAVE ADDRESS OF PARMLIST\nGETPARM1 EQU   *                        GET PARM FIELD\n         L     R1,0(R3)                 ADDRESS OF PARM TO R2\n         LH    R3,0(R1)                 LENGTH OF PARM TO R3\n         LTR   R3,R3                    CHECK FOR NO PARM\n         BZ    OPENCARD                 NO PARMS\n         CH    R3,=H'4'                 CHECK FOR VALID ADDRESS LENGTH\n         BNE   ABEND12                  BAD LENGTH\n         MVC   DEVADDR(4),2(R1)         MOVE PARM\nLOOP1    EQU   *\n         TR    DEVADDR(3),TTAB\n         ICM   R1,B'0001',DEVADDR+1\n         SLL   R1,4\n         STCM  R1,B'0001',DEVADDR+1\n         OC    DEVADDR+2(1),DEVADDR+1\n         MVC   DEVADDR+1(1),DEVADDR\n         MVI   DEVADDR,X'00'\n         SLR   R6,R6\n         ICM   R6,B'0111',DEVADDR\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R13,IOSSAVE\n         IOSLOOK DEV=(6),UCB=(7)\n         LA    R13,SAVEAREA\n         LTR   R15,R15\n         BNZ   ABEND4\n         USING UCBCMSEG,R7\n         CLI   DEVADDR+3,C'0'\n         BE    BITOFF\n         OI    UCBTBYT2,UCBRR\n         B     MODEST\nBITOFF   NI    UCBTBYT2,X'FF'-UCBRR\nMODEST   MODESET KEY=NZERO,MODE=PROB\n         B     GETCARD\nRETURN0  SLR   R15,R15\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS RC=R15\nOPENCARD EQU   *\n         OPEN  (SYSIN,(INPUT))\n         LTR   R15,R15\n         BNZ   ABEND8\n         MVI   CARDSW,C'1'\nGETCARD  EQU   *\n         CLI   CARDSW,C'1'\n         BNE   RETURN0\n         GET   SYSIN,CARDAREA\n         MVC   DEVADDR(4),CARDAREA\n         B     LOOP1\nCLOSCARD EQU   *\n         CLOSE (SYSIN)\n         B     RETURN0\nABEND4   ABEND 4,DUMP\nABEND8   ABEND 8,DUMP\nABEND12  ABEND 12,DUMP\n* END OF EPILOGUE\nPGMNAME  DC    CL8'DLXSHARD'\nDEVADDR  DC    CL4'0'\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nIOSSAVE  DC    16F'0'                   IOSLOOK SAVE AREA\nTTAB     DS    0CL256\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'800A0B0C0D0E0FC7C8C98A8B8C8D8E8F'\n         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C00A0B0C0D0E0FC7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'00010203040506070809FAFBFCFDFEFF'\nCARDSW   DC    C'0'\nCARDAREA DC    CL80' '\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),              X\n               RECFM=FB,EODAD=CLOSCARD\n         LTORG\n         EQUATE\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         IEFUCBOB\n         IECDIOCM                       REQUIRED FOR IOSLOOK\n         CVT   DSECT=YES                REQUIRED FOR IOSLOOK\n         END   DLXSHARD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXSYLOG": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02=\\x02=\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 573, "newlines": 573, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXSYLOG - SYSLOG SELECTION AND DISPLAY'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = DLXSYLOG                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  DIALOG FOR SYSLOG SELECTION         *\n*                                 AND DISPLAY                         *\n*                                                                     *\n*             FUNCTION =                                              *\n*               THIS PROGRAM WILL DISPLAY SCREENS FOR SELECTION OF    *\n*               A SYSLOG WHICH IS CURRENTLY STORED ON DISK.  ONCE     *\n*               SELECTED, THE SYSLOG MAY BE BROWSED.                  *\n*                                                                     *\n*                OPERATION =                                          *\n*                  GETMAIN WORK AREAS                                 *\n*                  MAKE SURE THE USER IS AUTHORIZED TO BROWSE SYSLOGS *\n*                    IF NOT AUTHORIZED, EXIT                          *\n*                  DEFINE DIALOG VARIABLES                            *\n*                  CREATE TEMPORARY TABLE                             *\n*                  DISPLAY FIRST PANEL                                *\n*                    IF ENTER HIT, GET THE LOCATION IDENTIFIER        *\n*                    IF END HIT, GO TO CLOSE                          *\n*                  CONSTRUCT GDG BASE                                 *\n*                  DO A SUPERLOCATE ON THE GDG BASE                   *\n*                  LOOP THRU DATA SET NAMES FOUND BY SUPERLOCATE      *\n*                    OBTAIN DSCB FOR EACH                             *\n*                    CONVERT CREATION DATE                            *\n*                    ADD RECORD TO THE TEMPORARY TABLE                *\n*                  DISPLAY THE TEMPORARY TABLE                        *\n*                    IF ENTER HIT, DISPLAY SELECTED FILE(S)           *\n*                    IF END HIT, GO TO DISPLAY FIRST PANEL            *\n*                  GO TO DISPLAY TEMPORARY TABLE AGAIN                *\n*                  CLOSE (DELETE) TEMPORARY TABLE                     *\n*                  FREE GETMAIN'ED AREAS                              *\n*                  EXIT                                               *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTER  2       = ADDRESSABILITY TO ASCB,      *\n*                                        ASXB, AND ACEE               *\n*                    REGISTERS 3 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO DLXSYLOG   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS = GETMAIN, RACHECK, ISPCALL, LOCATE, OBTAIN,     *\n*                      FREEMAIN, RETURN\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                04/20/84  WRITTEN.      BC.                          *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         X\n               &EP=ISPLINK,                                            X\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    X\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      X\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    X\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               X\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHESX\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 X\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LISX\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n*\nDLXSYLOG CSECT\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15\n         USING DLXSYLOG,R12            ESTABLISH ADDRESSABILITY\n         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE PTR TO WORK AREA\n         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA\n         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA\n         LR    R13,R10                 LOAD ADDR OF CURRENT SA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n         GETMAIN R,LV=X'7FF8'          GET SOME STORE FOR RETURNED DATA\n         ST    R1,GENWORK              STORE ITS ADDRESS\n         ST    R1,GETADDR              ALSO SAVE IT FOR LATER\n         ISPCALL ('CONTROL','ERRORS','RETURN'),WKAREA=PARAMS,          X\n               EPADDR=ISPADDR\n*\n*  MAKE SURE THE USER IS AUTHORIZED TO BROWSE THE SYSLOGS.\n*\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n*\n*  IF USER HAS SPECIAL ATTRIBUTE, EXIT WITHOUT FURTHER CHECKING\n*\n         L     R2,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2\n         USING ASXB,R2                 TELL ASSEMBLER\n         L     R2,ASXBSENV             GET ADDRESS OF ACEE\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BO    ENDRACF                 IF NOT, CHECK FURTHER\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         RACHECK ENTITY=PROGNAME,CLASS='APPL'\n         LTR   R15,R15\n         BNZ   ERROR0\nENDRACF  EQU   *\n*\n*  DEFINE THE DIALOGUE VARIABLES TO BE USED BY THE PROGRAM.\n*\n         ISPCALL ('VDEFINE','(LOCID)',LOCID,'CHAR',5)\n         ISPCALL ('VDEFINE','(SELECT)',SELECT,'CHAR',1)\n         ISPCALL ('VDEFINE','(DSNAM)',DSNAM,'CHAR',44)\n         ISPCALL ('VDEFINE','(CREDT)',CREDT,'CHAR',6)\n*\n*  CREATE A TEMPORARY TABLE AND GET THE REQUIRED LOCATION IDENTIFIER.\n*\nGETPARM  EQU   *\n         ISPCALL ('TBCREATE','SYSLOGS',0,VARLIST,'NOWRITE','REPLACE')\n         C     R15,=F'4'               CHECK RETURN CODE\n         BH    ERRXIT                  IF >4, BRANCH TO ERROR\n         ISPCALL ('DISPLAY','SLGPANL1',0,'LOCID')\n         B     GP10(R15)               BRANCH DEPENDING ON RETURN CODE\nGP10     EQU   *\n         B     GP20                    IF RC=0, CONTINUE\n         B     GP20                    IF RC=4, CONTINUE\n         B     RETURN                  IF RC=8, EXIT\n         B     ERRXIT                  IF RC=12, ERROR EXIT\n         B     ERRXIT                  IF RC=16, ERROR EXIT\n         B     ERRXIT                  IF RC=20, ERROR EXIT\nGP20     EQU   *\n         MVI   KEY,X'40'               CLEAR OUT DATA SET NAME\n         MVC   KEY+1(L'KEY-1),KEY\n         MVC   KEY(7),=CL7'DLXSAV.'    LOAD FIRST QUALIFIER\n         LA    R4,KEY+7                GET ADDR OF NEXT SPACE\n         LA    R5,LOCID                GET PARM ADDRESS\n         LA    R3,5                    SAVE PARM LENGTH\nGP30     EQU   *\n         CLI   0(R5),C' '              END OF PARAMETER?\n         BE    GP40                    IF SO, BRANCH\n         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER\n         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER\n         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER\n         BCT   R3,GP30                 LOOP BACK TIL DONE\nGP40     EQU   *\n         MVC   0(8,R4),=CL8'.SYSLOG.'  LOAD 3RD QUALIFIER\n         LA    R4,8(R4)                MOVE TO END OF GENERIC NAME\n         LA    R3,KEY                  GET ADDR OF BEGINNING\n         SR    R4,R3                   GET LENGTH OF KEY\n         STC   R4,DSNAME               STORE THE LENGTH\n*\n*  INITIALIZE THE WORK AREA.  SET UP PARAMETERS FOR THE LOCATE\n*    AND OBTAIN.\n*\nINIT     EQU   *\n         LA    R10,DSCB                GET ADDR OF DSCB\n         USING IECSDSL1,R10            ESTABLISH ADDRESSABILITY TO IT\n         LA    R6,DATA                 SET UP REGISTERS FOR\n         LA    R7,MOVEL                  LONG MOVE\n         LA    R8,CDATA\n         LA    R9,MOVEL\n         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA\n         LA    R6,KEY                  SET UP CAMLST PARAMETERS\n         ST    R6,LOCLIST+4              ADDR OF DATA SET NAME\n         ST    R6,OPTLIST+4              ADDR OF DATA SET NAME\n         LA    R6,LOCWORK\n         ST    R6,LOCLIST+12             ADDR OF WORK BUFFER\n         LA    R6,VOL\n         ST    R6,OPTLIST+8              ADDR OF VOLUME SERIAL\n         LA    R6,DSCB+44\n         ST    R6,OPTLIST+12             ADDR OF DSCB BUFFER\n         MVC   GENFLAG,=X'05201100'    SET UP FLAGS FOR INITIAL LOCATE\n         XC    GENX1,GENX1             CLEAR OUT 3ND WORD\n         XC    GENX2,GENX2             CLEAR OUT 5TH WORD\n         LA    R6,DSNAME               GET ADDR OF GENERIC NAME\n         ST    R6,GENNAME              STORE IT\n         L     R1,GETADDR\n         MVC   0(4,R1),=X'7FF80004'    INIT THE WORK BUFFER LENGTH\n         LA    R1,GENPARM              LOAD PARM ADDR INTO R1\n         SVC   26                      DO THE GENERIC LOCATE\n         LTR   R15,R15                 CHECK FOR ERRORS\n         BNZ   ERROR1                  IF ANY ERRORS, EXIT\n         L     R7,GETADDR              GET ADDRESS OF WORK BUFFER\n         LA    R7,0(R7)                CLEAR OUT HIGH BYTE\n         LH    R8,2(R7)                GET THE LENGTH RETURNED\n         AR    R8,R7                   ADD TO START OF WORK BUFFER\n         ST    R8,LSTADDR              STORE THE LAST ADDRESS\n         LA    R7,49(R7)               SKIP THE RETURNED CATALOG NAME\n         C     R7,LSTADDR              ANY MORE DATA SET NAMES?\n         BNL   ERROR2                  IF NOT, GO TO DISPLAY THE TABLE\n*\n*  LOOP THROUGH THE DATA SET NAMES FOUND.  GET THE CREATION DATE\n*    FOR EACH, CONVERT TO EBCDIC, AND WRITE INTO THE TABLE.\n*\nLOOP     EQU   *\n         C     R7,LSTADDR              ANY MORE DATA SET NAMES?\n         BNL   DISPTBL                 IF NOT, GO TO DISPLAY THE TABLE\n         MVC   KEY,1(R7)               GET THE COMPLETE DATA SET NAME\n         LA    R7,45(R7)               MOVE POINTER TO NEXT ONE\n         LOCATE LOCLIST                DO THE LOCATE\n         LTR   R15,R15                 CHECK FOR ERRORS\n         BNZ   ERROR1                  IF ERROR, EXIT\n         MVC   VOL,LOCWORK+6           GET VOLUME SERIAL #\n         MVC   DS1DSNAM,KEY            STORE DSNAME FOR INITIAL READ\n         MVC   DSNAM,KEY               ALSO STORE IT FOR TABLE\n         OBTAIN OPTLIST                DO THE OBTAIN TO GET THE DSCB\n         LTR   R15,R15                 CHECK FOR ERRORS\n         BNZ   ERROR1                  IF ERROR, EXIT\n         SLR   R9,R9                   CLEAR REGISTER 9\n         ICM   R9,B'0001',DS1CREDT     GET THE CREATION DATE YEAR\n         CVD   R9,PWORK                CONVERT TO PACKED DECIMAL\n         UNPK  WORK,PWORK+3(5)         UNPACK CREATION YEAR\n         MVZ   WORK+7(1),WORK+6        MOVE ZONE BYTE\n         MVC   DATE(2),WORK+6          STORE\n         MVI   DATE+2,C'.'             INSERT PERIOD\n         SLR   R9,R9                   CLEAR REGISTER 9\n         ICM   R9,B'0011',DS1CREDT+1   GET THE CREATION DATE DAY\n         CVD   R9,PWORK                CONVERT TO PACKED DECIMAL\n         UNPK  WORK,PWORK+3(5)         UNPACK CREATION DAY\n         MVZ   WORK+7(1),WORK+6        MOVE ZONE BYTE\n         MVC   DATE+3(3),WORK+5        STORE\n         MVC   CREDT,DATE              STORE THE DATE\n         MVI   SELECT,C'_'             CLEAR OUT SELECT CODE\n         ISPCALL ('TBADD','SYSLOGS')   ADD THE RECORD TO THE TABLE\n         LTR   R15,R15                 CHECK THE RETURN CODE\n         BNE   ERROR1                  IF NOT ZERO, ERROR\n         B     LOOP                    LOOP BACK FOR ANOTHER DATASET\n*\n*  DISPLAY THE CREATED TABLE.\n*\nDISPTBL  EQU   *\n         ISPCALL ('TBTOP','SYSLOGS')   GO TO TOP OF TABLE\n         LTR   R15,R15                 CHECK THE RETURN CODE\n         BNE   ERROR1                  IF NOT ZERO, ERROR\n         ISPCALL ('TBDISPL','SYSLOGS','SLGPANL2')  DISPLAY IT\n         LR    R2,R15                  SAVE THE RETURN CODE\n         B     DP10(R15)               BRANCH DEPENDIN ON RETURN CODE\nDP10     EQU   *\n         B     BROWSIT                 IF RC=0, CONTINUE\n         B     BROWSIT                 IF RC=4, CONTINUE\n         B     DP20                    IF RC=8, EXIT PANEL\n         B     ERROR1                  IF RC=12, ERROR\n         B     ERROR1                  IF RC=16, ERROR\n         B     ERROR1                  IF RC=20, ERROR\nDP20     EQU   *\n         ISPCALL ('TBCLOSE','SYSLOGS')  DELETE THE TEMPORARY TABLE\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNE   ERROR1                  IF NOT ZERO, ERROR\n         ISPCALL ('VREPLACE',VARLIST,VARLNGTH,VARINIT)  INIT VARIABLES\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNE   ERROR1                  IF NOT ZERO, ERROR\n         B     GETPARM                 LOOP BACK TO FIRST PANEL\n*\n*  BROWSE THE SELECTED SYSLOG.\n*\nBROWSIT  EQU   *\n         ISPCALL ('CONTROL','DISPLAY','SAVE')  SAVE INFO FROM TBDISPL\n         ISPCALL ('BROWSE',DSNAM,' ',' ','SLGPANL3')\n         B     BW10(R15)               BRANCH DEPENDING ON RETURN CODE\n         BNE   ERROR3                  IF NOT ZERO, ERROR\nBW10     EQU   *\n         B     BW20                    IF RC=0, CONTINUE\n         B     BW20                    IF RC=4, CONTINUE\n         B     BW20                    IF RC=8, CONTINUE\n         B     ERROR3                  IF RC=12, ERROR\n         B     ERROR3                  IF RC=16, ERROR\n         B     ERROR3                  IF RC=20, ERROR\nBW20     EQU   *\n         ISPCALL ('CONTROL','DISPLAY','RESTORE')  RESTORE SAVED INFO\n         LTR   R2,R2                   CHECK SAVED RETURN CODE\n         BE    BW40                    IF ZERO, NO MORE SELECTIONS\n         ISPCALL ('TBDISPL','SYSLOGS')  ELSE, GET NEXT SELECTION\n         LR    R2,R15                  SAVE THE RETURN CODE\n         B     BW30(R15)               BRANCH DEPENDING ON RETURN CODE\nBW30     EQU   *\n         B     BROWSIT                 IF RC=0, CONTINUE\n         B     BROWSIT                 IF RC=4, CONTINUE\n         B     DP20                    IF RC=8, EXIT PANEL\n         B     ERROR3                  IF RC=12, ERROR\n         B     ERROR3                  IF RC=16, ERROR\n         B     ERROR3                  IF RC=20, ERROR\nBW40     EQU   *\n         ISPCALL ('VREPLACE','SELECT',VARLNGTH,VARINIT)  INIT VARIABLES\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNE   ERROR3                  IF NOT ZERO, ERROR\n         B     DISPTBL                 RETURN TO SECOND PANEL\n*\n*  ERROR DISPLAYS.\n*\nERROR0   EQU   *\n         ISPCALL ('DISPLAY','SLGPANL0')  DISPLAY NOT AUTHORIZED SCREEN\n         B     ERRXIT                  TAKE ERROR EXIT\nERROR1   EQU   *\n         ISPCALL ('DISPLAY','SLGPANL1','SYSL002','LOCID')\n         B     GP10(R15)               BRANCH DEPENDING ON RETURN CODE\nERROR2   EQU   *\n         ISPCALL ('DISPLAY','SLGPANL1','SYSL003','LOCID')\n         B     GP10(R15)               BRANCH DEPENDING ON RETURN CODE\nERROR3   EQU   *\n         ISPCALL ('TBDISPL','SYSLOGS','SLGPANL2','SYSL002')\n         LR    R2,R15                  SAVE THE RETURN CODE\n         B     BW10(R15)               BRANCH DEPENDIN ON RETURN CODE\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nERRXIT   EQU   *\n         LR    R7,R15                  SAVE RETURN CODE\n         FREEMAIN R,LV=X'7FF8',A=GETADDR\n         FREEMAIN R,LV=LDATA,A=(13)\n         LR    R15,R7                  RESTORE RETURN CODE\n         L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\nRETURN   EQU   *\n         ISPCALL ('TBCLOSE','SYSLOGS')  DELETE THE TEMPORARY TABLE\n         SLR   R15,R15\n         FREEMAIN R,LV=X'7FF8',A=GETADDR\n         FREEMAIN R,LV=LDATA,A=(13)\n         L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n*\n***********************************************************************\n*                                                                     *\n*                      SUBROUTINES                                    *\n*                                                                     *\n***********************************************************************\n*\n*\n***********************************************************************\n*                                                                     *\n*                     CONSTANT DATA                                   *\n*                                                                     *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         LTORG\n*\n*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA\n*\nCDATA    DS    0F\nLIST5    CAMLST NAME,*,,*\nLIST6    CAMLST SEARCH,*,*,*\nMOVEL    EQU   *-CDATA\n*\n*\n*  MISCELLANEOUS CONSTANTS\n*\nPROGNAME DC    CL8'DLXSYLOG'\nVARLIST  DC    C'(SELECT DSNAM CREDT LOCID)'\nVARLNGTH DC    F'1',F'44',F'6',F'5'\nVARINIT  DC    CL56' '\n*\n***********************************************************************\n*                                                                     *\n*                    DSECTS FOR GETMAIN'ED AREA                       *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F\n*\nDSNAME   DS    X\nKEY      DS    CL44\n*\nSELECT   DS    CL1\nDSNAM    DS    CL44\nCREDT    DS    CL6\nLOCID    DS    CL5\n*\nGENPARM  DS    0F\nGENFLAG  DS    F\nGENNAME  DS    A\nGENX1    DS    A\nGENWORK  DS    A\nGENX2    DS    3A\n*\nDATE     DS    CL6\nDSCB     DS    XL140\nEMSG     DS    CL8\nLOCWORK  DS    XL265\nVOL      DS    CL6\nWORK     DS    CL8\nPWORK    DS    1D\nGETADDR  DS    A\nLSTADDR  DS    A\nISPADDR  DS    A\nPARAMS   DS    7A\n*\nDATA     DS    0F\nLOCLIST  DS    XL16\nOPTLIST  DS    XL16\n*\nLDATA    EQU   *-WORKAREA\n*\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\nDSCB1    DSECT\n         IECSDSL1 1\nJFCB     DSECT\n         IEFJFCBN ,\nDCBSECT  DSECT\n         DCBD  DSORG=PS,DEVD=DA\n         END   DLXSYLOG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLXTPLST": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01%\\x01%\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 293, "newlines": 293, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXTPLST - LIST CATALOGED TAPE VOLUMES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = DLXTPLST                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = GENERATE A LIST OF ALL TAPE          *\n*                VOLUMES ON THE SPECIFIED CATALOG.                    *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CREATES A LIST OF CATALOGED TAPE VOLUMES             *\n*                GIVING THE VOLSER, THE DATA SET NAME, THE            *\n*                VOLUME SEQUENCE NUMBER, THE FILE SEQUENCE            *\n*                NUMBER, AND THE CREATION DATE.                       *\n*                                                                     *\n*                OPERATION =                                          *\n*                   OPEN THE SPECIFIED CATALOG                        *\n*                   OPEN THE SPECIFIED OUTPUT FILE                    *\n*                   READ A CATALOG RECORD; AT EOF, GOTO CLOSE         *\n*                   IF NEITHER NON-VSAM OR GDG DATA SET, IGNORE IT    *\n*                   IF NON-VSAM,                                      *\n*                     GET DATA SET NAME                               *\n*                     GET CREATION DATE FROM NAME CELL                *\n*                     SKIP ASSOCIATION CELL IF PRESENT                *\n*                     IF TAPE VOLUME,                                 *\n*                       GET VOLSER, FILSEQ, & VOLSEQ FROM VOLUME CELL *\n*                       WRITE AN OUTPUT RECORD FOR EACH VOLUME CELL   *\n*                   IF GDG,                                           *\n*                     CONSTRUCT DATA SET NAME                         *\n*                     GET CREATION DATE FROM NAME CELL                *\n*                     SKIP ASSOCIATION CELL IF PRESENT                *\n*                     IF TAPE VOLUME,                                 *\n*                       GET VOLSER, FILSEQ, & VOLSEQ FROM VOLUME CELL *\n*                       WRITE AN OUTPUT RECORD FOR EACH VOLUME CELL   *\n*                     IF MORE GDG'S GOTO CONSTRUCT DATA SET NAME      *\n*                   CLOSE CATALOG AND OUTPUT FILE                     *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 9  = WORK REGISTERS               *\n*                    REGISTER  10      = LINKAGE TO SUBROUTINE        *\n*                    REGISTER  11      = WORK REGISTER                *\n*                    REGISTER  12      = ADDRESSABILITY TO DLXTPLST   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, OPEN, GET, PUT CLOSE                           *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                02/27/84  WRITTEN.      BC.                          *\n*                04/25/86  CHANGED TO DO GETS IN MOVE MODE            *\n*                          RATHER THAN LOCATE MODE SO THAT            *\n*                          IT WILL WORK WITH SPANNED RECORDS   BC.    *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*          //STEP001  EXEC PGM=DLXTPLST                               *\n*          //STEPCAT DD DISP=SHR,DSN=CATALOG.VPRODZ                   *\n*          //CATALOG DD DISP=SHR,DSN=CATALOG.VPRODZ                   *\n*          //OUTFILE DD DSN=T99999.TEST.DATA,DISP=SHR                 *\n*                                                                     *\n***********************************************************************\n*\n         TITLE 'DLXTPLST'\nDLXTPLST CSECT\n         SAVE  (14,12),,DLXTPLST_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXTPLST,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\nOPENIT   EQU   *\n         GETMAIN R,LV=32400\n         ST    R1,GETRPL+32\n         OPEN  GETACB                   OPEN THE CATALOG\n         LTR   R15,R15\n         BNZ   ERROR01\n         OPEN  (OUTFILE,OUTPUT)         OPEN THE OUTPUT FILE\n         LTR   R15,R15\n         BNZ   ERROR02\nGETLOOP  EQU   *\n         L     R7,GETRPL+32\n         GET   RPL=GETRPL               READ A CATALOG RECORD\n         LTR   R15,R15\n         BNZ   ERROR03\n         LA    R7,2(R7)                 SKIP OVER RECORD LENGTH\n         CLI   2(R7),C'A'               NON-VSAM DATA SET?\n         BE    NONVSAM                  IF SO, PROCESS FOR NON-VSAM\n         CLI   2(R7),C'B'               GDG DATA SET?\n         BE    GDG                      IF SO, PROCESS FOR GDG\n         B     GETLOOP                  IF NEITHER, GO BACK FOR ANOTHER\nNONVSAM  EQU   *\n         SLR   R5,R5                    INIT VOLUME SEQUENCE NUMBER\n         MVC   DSNAME,7(R7)             GET DATA SET NAME\n         SLR   R8,R8\n         ICM   R8,B'0011',4(R7)         SAVE # OF VOLUME CELLS\n         BAL   R10,PROCVOLS             PROCESS VOLUME CELLS\n         B     GETLOOP\nGDG      EQU   *\n         MVC   DSNAME,7(R7)             GET DATA SET NAME\n         LA    R4,DSNAME                POINT TO BEGINNING OF DSNAME\nGD10     EQU   *\n         CLI   0(R4),X'40'              LOOK FOR FIRST BLANK\n         BE    GD20                     WHEN FOUND, STOP\n         LA    R4,1(R4)                 GO TO NEXT CHARACTER\n         B     GD10\nGD20     EQU   *\n         MVC   0(2,R4),=C'.G'           GET READY TO ADD GEN# & VER#\n         SLR   R9,R9\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\n         SLR   R3,R3\n         ICM   R3,B'0001',5(R7)\n         ICM   R9,B'0011',0(R7)         GET RECORD LENGTH\n         AR    R7,R9                    GO TO NEXT RECORD\nGD30     EQU   *\n         SLR   R5,R5                    INIT VOLUME SEQUENCE NUMBER\n         CLI   2(R7),C'H'               DATA SET NAME CELL?\n         BNE   GD40                     IF NOT, END LOOP\n         ICM   R9,B'0011',5(R7)         GET GENERATION NUMBER\n         CVD   R9,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   2(4,R4),DECNUM+4         MOVE INTO DATA SET NAME\n         MVI   6(R4),C'V'               GET READY TO ADD VER#\n         SLR   R9,R9\n         ICM   R9,B'0001',7(R7)         GET VERSION NUMBER\n         CVD   R9,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   7(2,R4),DECNUM+6         MOVE INTO DATA SET NAME\n         SLR   R8,R8\n         ICM   R8,B'0011',8(R7)         SAVE # OF VOLUME CELLS\n         BAL   R10,PROCVOLS             PROCESS VOLUME CELLS\n         BCT   R3,GD30\nGD40     EQU   *\n         B     GETLOOP\nCLOSEIT  EQU   *\n         CLOSE GETACB                   CLOSE CATALOG\n         LTR   R15,R15\n         BNZ   ERROR04\n         CLOSE OUTFILE                  CLOSE OUTPUT FILE\n         LTR   R15,R15\n         BNZ   ERROR05\nRETURN0  EQU   *\n         SLR   R15,R15\nRETURNX  EQU   *\n         LR    R7,R15\n         FREEMAIN R,LV=32400,A=GETRPL+32\n         LR    R15,R7\n         L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS\n*\n* SUBROUTINE TO PROCESS VOLUME CELL RECORDS\n*\nPROCVOLS EQU   *\n         SLR   R9,R9\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF NAME CELL\n         AR    R7,R9                    GO TO NEXT CELL\n         UNPK  EXPDT,12(3,R7)           UNPACK CREATION DATE\n         MVZ   EXPDT+4(1),EXPDT+3       MOVE ZONE BYTE\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF OWNER CELL\n         AR    R7,R9                    GO TO NEXT CELL\n         CLI   2(R7),X'03'              ASSOCIATION CELL?\n         BNE   PV10                     IF NOT, BRANCH\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF ASSOCIATION CELL\n         AR    R7,R9                    GO TO NEXT CELL\nPV10     EQU   *\n         CLI   2(R7),X'04'              VOLUME CELL?\n         BNE   PV20                     IF NOT, WHAT'S GOING ON?\n         MVC   VOLSER,4(R7)             GET VOLUME SERIAL NUMBER\n         TM    12(R7),X'80'             TAPE DATA SET?\n         BNO   PV20                     IF NOT, FORGET IT\n         ICM   R9,B'0011',20(R7)        GET FILE SEQUENCE NUMBER\n         CVD   R9,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   FILESEQ,DECNUM+4         STORE IN OUTPUT RECORD\n         LA    R5,1(R5)                 SET VOLUME SEQUENCE NUMBER\n         CVD   R5,WORK                  CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,WORK              UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   VOLSEQ,DECNUM+4          STORE IN OUTPUT RECORD\n         PUT   OUTFILE,OUTREC           WRITE RECORD INTO OUTPUT FILE\n         ICM   R9,B'0011',0(R7)         GET LENGTH OF ASSOCIATION CELL\n         AR    R7,R9                    GO TO NEXT CELL\n         BCT   R8,PV10                  LOOP TIL ALL VOLUMES DONE\nPV20     EQU   *\n         BR    R10\n*\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nWORK     DS    D\nFEEDBK   DS    F\nDECNUM   DS    CL8\nOUTREC   DS    0CL80                    OUTPUT FILE RECORD\nVOLSER   DC    CL6' '                     VOLUME SERIAL NUMBER\n         DC    CL1' '\nDSNAME   DC    CL44' '                    DATA SET NAME\n         DC    CL1' '\nVOLSEQ   DC    CL4' '                     VOLUME SEQUENCE NUMBER\n         DC    CL1' '\nFILESEQ  DC    CL4' '                     FILE SEQUENCE NUMBER\n         DC    CL1' '\nEXPDT    DC    CL5'99000'                 EXPIRATION DATE\n         DC    CL13' '\nEXWTO    WTO   '                                           RC = 000',  X\n               ROUTCDE=(11),MF=L\nWTO01    DC    CL40'DLXTPLST01 OPEN FOR THE CATALOG FAILED'\nWTO02    DC    CL40'DLXTPLST02 OPEN FOR OUTPUT FILE FAILED'\nWTO03    DC    CL40'DLXTPLST03 GET MACRO FAILED'\nWTO04    DC    CL40'DLXTPLST04 CLOSE FOR CATALOG FAILED'\nWTO05    DC    CL40'DLXTPLST05 CLOSE FOR OUTPUT FILE FAILED'\nWTO06    DC    CL40'DLXTPLST06 SHOWCB FAILED'\nGETACB   ACB   AM=VSAM,CATALOG=NO,DDNAME=CATALOG,EXLST=ERROR,          X\n               MACRF=(NFX,NDF,SEQ,NCI,IN,NIS,NRM,NRS,NUB)\nERROR    EXLST AM=VSAM,EODAD=CLOSEIT\nGETRPL   RPL   ACB=GETACB,AM=VSAM,AREALEN=32400,                       X\n               OPTCD=(SEQ,ARD,FWD,SYN,NUP,MVE)\nOUTFILE  DCB   DDNAME=OUTFILE,DSORG=PS,RECFM=FB,LRECL=80,              X\n               MACRF=(PM)\nERROR01  EQU   *\n         LR    R7,R15\n         MVC   EXWTO+4(40),WTO01\n         SHOWCB RPL=GETRPL,AREA=FEEDBK,LENGTH=4,FIELDS=FDBK\n         LTR   R15,R15\n         BNZ   ERROR06\n         L     R5,FEEDBK\n         CVD   R5,WORK\n         UNPK  DECNUM,WORK+3(5)\n         MVZ   DECNUM+7(1),DECNUM+6\n         MVC   EXWTO+52(3),DECNUM+5\n         WTO   MF=(E,EXWTO)\n         LR    R15,R7\n         B     RETURNX\nERROR02  EQU   *\n         LR    R7,R15\n         MVC   EXWTO+4(40),WTO02\n         WTO   MF=(E,EXWTO)\n         LR    R15,R7\n         B     RETURNX\nERROR03  EQU   *\n         LR    R7,R15\n         MVC   EXWTO+4(40),WTO03\n         SHOWCB RPL=GETRPL,AREA=FEEDBK,LENGTH=4,FIELDS=FDBK\n         LTR   R15,R15\n         BNZ   ERROR06\n         L     R5,FEEDBK\n         CVD   R5,WORK\n         UNPK  DECNUM,WORK+3(5)\n         MVZ   DECNUM+7(1),DECNUM+6\n         MVC   EXWTO+52(3),DECNUM+5\n         WTO   MF=(E,EXWTO)\n         LR    R15,R7\n         B     RETURNX\nERROR04  EQU   *\n         LR    R7,R15\n         MVC   EXWTO+4(40),WTO04\n         SHOWCB RPL=GETRPL,AREA=FEEDBK,LENGTH=4,FIELDS=FDBK\n         LTR   R15,R15\n         BNZ   ERROR06\n         L     R5,FEEDBK\n         CVD   R5,WORK\n         UNPK  DECNUM,WORK+3(5)\n         MVZ   DECNUM+7(1),DECNUM+6\n         MVC   EXWTO+52(3),DECNUM+5\n         WTO   MF=(E,EXWTO)\n         LR    R15,R7\n         LA    R15,12                   SET RETURN CODE 12\n         B     RETURNX\nERROR05  EQU   *\n         LR    R7,R15\n         MVC   EXWTO+4(40),WTO05\n         WTO   MF=(E,EXWTO)\n         LR    R15,R7\n         B     RETURNX\nERROR06  EQU   *\n         LR    R7,R15\n         MVC   EXWTO+4(40),WTO06\n         WTO   MF=(E,EXWTO)\n         LR    R15,R7\n         B     RETURNX\n         PRINT GEN\n         LTORG\n         PRINT NOGEN\n         EQUATE                         REGISTER EQUATES\n         PRINT GEN\n         END   DLXTPLST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXTRAN#": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00S\\x00S\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "DELUXE"}, "text": "1\n-             DELUXE DATASET TRANSFER PROGRAM -- DLXTRANS\n                                                              REV 1/19/83\n-\n  DLXTRANS IS A GENERALIZED FILE TRANSFER PROGRAM.  IT WILL REFORMAT\n       ANY SEQUENTIAL FILE INTO 80-BYTE RECORDS FOR TRANSMISSION AND\n       RECREATE THE ORIGINAL FILE AFTER TRANSMISSION.\n0 DLXTRANS WILL PROCESS ANY RECORD FORMAT, INCLUDING VARIABLE LENGTH\n       AND SPANNED RECORDS, EXCEPT FOR RECFM=U.\n0      VSAM DATASETS CAN BE TRANSMITTED BY USING IDCAMS REPRO OR EXPORT\n       TO CREATE A SEQUENTIAL FILE FOR SENDING AND TO RECREATE THE VSAM\n       FILE AFTER TRANSMISSION.\n0      PARTITIONED DATASETS CAN BE TRANSMITTED SUCCESSFULLY BY USING\n       IEBCOPY TO CREATE A SEQUENTIAL FILE CONSISTING OF ANY OR ALL\n       MEMBERS OF THE PDS, AND AGAIN TO RECREATE THE PDS AFTER\n       TRANSMISSION.\n0   ** NOTE:  THIS INCLUDES PARTITIONED DATASETS WITH RECFM=U, SUCH AS\n               LOAD LIBRARIES.\n1\n-                     DLXTRANS -- JCL\n-              **  TO REFORMAT FILE FOR SENDING  **\n0 DD NAMES:\n  SYSUT1    -  INPUT FILE TO BE SENT\n  SYSPUNCH  -  80-BYTE OUTPUT\n  JCLIN     -  OPTIONAL - JCL TO EXECUTE WITH OUTPUT DATA\n  ENDJCLIN  -  OPTIONAL - JCL TO EXECUTE NEXT JOB STEP(S)\n0 PARM INFO:\n    PARM='NOJCL'  -  NO JCL FILE INCLUDED  -\n                     THIS OPTION WOULD NOT NORMALLY BE USED BETWEEN HOST\n                     AND REGION. IT IS INCLUDED FOR USE BY SERIES 1\n0   PARM='DLM=##' -  JCL FILE IS INCLUDED, DELIMITED AS SPECIFIED  -\n                     CHOOSE UNIQUE DELIMITER TO MINIMIZE THE CHANCE\n                     OF THAT CHARACTER STRING'S OCCURING IN THE DATA.\n                     PROGRAM TERMINATES WITH AN ERROR MESSAGE IF DELIMITER\n                     IS NOT SPECIFIED, OR IF DELIMITER OCCURS WITHIN\n                     THE DATA.\n-                **  TO RECREATE ORIGINAL FILE  **\n0 DD NAMES:\n  SYSIN   - INPUT 80-BYTE RECORDS\n    ** NOTE:  'SYSIN' DD STATEMENT IS GENERATED WHEN DLM= IS SPECIFIED\n              IN FIRST STEP\n  SYSUT2  - OUTPUT - THE ORIGINAL FILE\n0           IF SYSUT2 SPECIFIES AN LRECL DIFFERENT FROM THE\n            ORIGINAL FILE, THE PROGRAM WILL ISSUE ERROR MESSAGE\n            'DLX010E' AND STOP.\n1\n-                   DLXTRANS - ERROR MESSAGES\n-      'DLX001E  DLXTRANS -- SYSPUNCH DD CARD MISSING OR MISPELLED AND\n        SYSUT1 DD CARD PRESENT'       PROGRAM TERMINATES.\n0      'DLX002E  DLXTRANS -- JCLIN DD CARD MISSING OR MISPELLED AND\n        NOJCL PARM NOT SPECIFIED'     PROGRAM TERMINATES.\n0      'DLX003I  DLXTRANS -- SYSUT1 DD CARD PRESENT AND NOT NEEDED'\n                                      INFORMATION ONLY.\n0      'DLX004I  DLXTRANS -- SYSUT2 DD CARD PRESENT AND NOT NEEDED'\n                                      INFORMATION ONLY.\n0      'DLX005I  DLXTRANS -- SYSIN DD CARD PRESENT AND NOT NEEDED'\n                                      INFORMATION ONLY.\n0      'DLX006I  DLXTRANS -- JCLIN DD CARD PRESENT AND NOT NEEDED'\n                                      INFORMATION ONLY.\n0      'DLX007I  DLXTRANS -- SYSPUNCH DD CARD PRESENT AND NOT NEEDED'\n                                      INFORMATION ONLY.\n0      'DLX008E  DLXTRANS -- NEITHER SYSUT1 OR SYSUT2 DD CARDS ARE\n        PRESENT. ONE IS REQUIRED'      PROGRAM TERMINATES.\n0      'DLX009E  DLXTRANS -- SYSIN DD CARD MISSING OR MISPELLED AND\n        SYSUT2 DD CARD PRESENT'        PROGRAM TERMINATES.\n0      'DLX010E  DLXTRANS -- LRECL FROM INPUT FILE DOES NOT MATCH\n        LRECL SPECIFIED FOR OUTPUT'    PROGRAM TERMINATES\n0      'DLX011E  DLXTRANS -- SYSUT1 FOR A RECEIVE OPERATION CANNOT\n        BE A NEW DATASET'              PROGRAM TERMINATES.\n0      'DLX012W  DLXTRANS -- SYSUT1 DATASET NAME HAS NO THIRD\n        QUALIFIER - \"DUMMYFIL\" SUBSTITUTED'     RETURN CODE 4\n0      'DLX014W  DLXTRANS -- RECFM TAKEN FROM HEADER RECORD - JCL\n        NOT USED'                      RETURN CODE 4\n0      'DLX013E  DLXTRANS -- DELIMITER (DLM=) MUST BE SPECIFIED\n        WHEN JCL IS TRANSMITTED'        PROGRAM TERMINATES.\n0      'DLX015E  DLXTRANS -- RECFM = U CANNOT BE PROCESSED -\n        PROGRAM TERMINATED'             PROGRAM TERMINATES.\n0      'DLX016E  DLXTRANS -- DELIMITER CHARACTERS HAVE OCCURRED\n        IN THE DATA ----\n        TRANSMITTED FILE IS INCOMPLETE. DELETE FILE & RERUN WITH\n        NEW DELIMITER'                  PROGRAM TERMINATES.\n0      'DLX017I  DLXTRANS -- ENDJCLIN DD CARD PRESENT BUT CAN\n        NOT BE USED - IGNORED'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLXTRANS": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x04\\xb3\\x04\\xb3\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1203, "newlines": 1203, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE DATASET TRANSFER PROGRAM -- DLXTRANS'\nDLXTRANS CSECT\n**********************************************************************\n*PROGRAM NAME:  DATA TRANSFER PROGRAM\n*JOB ACCOUNT CODE: GDA1\n**********************************************************************\n*RUN INSTRUCTIONS:                                            10/13/82\n*\n*** OPTION 1  CREATE 80-BYTE RECORDS FOR TRANSMISSION\n*\n*FILES:\n*SYSUT1  = INPUT FILE\n*\n*SYSPUNCH = 80-BYTE OUTPUT\n*\n*JCLIN = (OPTIONAL, SEE PARM INFO) JCL TO RECONSTRUCT THE FILE\n*\n*ENDJCLIN = (OPTIONAL, USED ONLY WHEN JCLIN IS PRESENT)\n*           JCL TO EXECUTE WITH RECONSTRUCTED FILE\n*\n*\n*PARM INFO:\n*  PARM='NOJCL' -  NO JCL FILE INCLUDED\n*           USING 'NOJCL' IMPLIES THAT DATA IS BEING SENT TO SERIES/1\n*  PARM='DLM=XX' - JCL FILE IS INCLUDED, DELIMITER AS SPECIFIED\n*\n*\n***** OPTION 2  REFORMAT 80-BYTE RECORDS TO ORIGINAL FILE\n*\n*FILES:\n*SYSIN - 80-BYTE RECORDS (OUTPUT FROM OPTION 1)\n*\n*SYSUT2 - REFORMATTED FILE\n*\n*\n*PARM INFO:  NONE.\n*\n******************************************************************\n* PURPOSE: 10/13/82\n*   TO REFORMAT ANY FILE TO 80 BYTE RECORDS FOR\n*   TRANSMISSION AND TO RECONSTRUCT THE ORIGINAL FILE\n*   AFTER TRANSMISSION.\n*\n* SOURCE OF INFORMATION:\n*   ANY FILE EXCEPT RECFM=U AND PDS'S.\n*   TO TRANSMIT A PDS, USE IEBCOPY TO CREATE A SEQUENTIAL FILE,\n*   SEND THAT, AND RECREATE THE PDS AFTER TRANSMISSION.\n*\n* NOTES:\n*      IF SYSUT2 JCL SPECIFIES AN LRECL DIFFERENT FROM THE\n*      ORIGINAL FILE, THE PROGRAM WILL ISSUE AN ERROR MESSAGE\n*      AND STOP.\n*\n************************************************************\n*\n* PROGRAM FLOW:\n*   PARM AND DD INFORMATION IS ANALYZED AND CHECKED FOR CONSISTENCY.\n*\n*   IF SENDING (BUILDING 80-BYTE RECORDS):\n*     OPEN SYSPUNCH\n*     IF JCLIN PRESENT\n*       OPEN JCLIN FILE, READ AND WRITE IT TO SYSPUNCH, CLOSE FILE,\n*         AND CREATE '//SYSIN DD DATA,DLM=' RECORD ON SYSPUNCH.\n*     DETERMINE DCB INFO FROM DSCB OR JCL\n*     BUILD AND WRITE HEADER RECORD FROM DCB INFO AND DATASET NAME.\n*     OPEN SYSUT1\n*     READ SYSUT1 AND REFORMAT TO 80-BYTE RECORDS ON SYSUT1\n*     AT END  MOVE '$$EOF' PATTERN TO FILL OUT FINAL RECORD.\n*     IF JCL WAS INCLUDED, WRITE DELIMITER RECORD.\n*     IF ENDJCLIN WAS INCLUDED, OPEN THAT FILE, READ AND WRITE EACH\n*       RECORD IN IT, AND CLOSE IT.\n*     CLOSE SYSUT1, SYSPUNCH.\n*     END.\n*\n*   IF RECEIVING  (80-BYTE RECORDS INPUT):\n*     OPEN SYSIN\n*     READ HEADER RECORD TO GET OUTPUT DCB INFO.\n*     READ JCL FOR OUTPUT INFO.\n*     IF NO BLOCKSIZE GIVEN, FORCE MAX SIZE FOR TAPE, BLOCK 1 FOR DISK.\n*     OPEN SYSUT2\n*     READ SYSIN AND REFORMAT TO SYSUT2 SPECS\n*     CHECK FOR END OF FILE PATTERN\n*     CLOSE SYSUT2, SYSIN.\n*     END.\n*\n*********************************************************************\n*  ERROR MESSAGES:\n*    'DLX001E  DLXTRANS -- SYSPUNCH DD CARD MISSING OR MISPELLED AND\n*     SYSUT1 DD CARD PRESENT'                  RETURN CODE 16\n*\n*    'DLX002E  DLXTRANS -- JCLIN DD CARD MISSING OR MISPELLED AND\n*     NOJCL PARM NOT SPECIFIED'                RETURN CODE 16\n*\n*    'DLX003I  DLXTRANS -- SYSUT1 DD CARD PRESENT AND NOT NEEDED'\n*\n*    'DLX004I  DLXTRANS -- SYSUT2 DD CARD PRESENT AND NOT NEEDED'\n*\n*    'DLX005I  DLXTRANS -- SYSIN DD CARD PRESENT AND NOT NEEDED'\n*\n*    'DLX006I  DLXTRANS -- JCLIN DD CARD PRESENT AND NOT NEEDED'\n*\n*    'DLX007I  DLXTRANS -- SYSPUNCH DD CARD PRESENT AND NOT NEEDED'\n*\n*    'DLX008E  DLXTRANS -- NEITHER SYSUT1 OR SYSUT2 DD CARDS ARE\n*     PRESENT. ONE IS REQUIRED'                RETURN CODE 16\n*\n*    'DLX009E  DLXTRANS -- SYSIN DD CARD MISSING OR MISPELLED AND\n*     SYSUT2 DD CARD PRESENT'                  RETURN CODE 16\n*\n*    'DLX010E  DLXTRANS -- LRECL FROM INPUT FILE DOES NOT MATCH\n*     LRECL SPECIFIED FOR OUTPUT'              RETURN CODE 16\n*\n*    'DLX011E  DLXTRANS -- SYSUT1 FOR A RECEIVE OPERATION CANNOT\n*     BE A NEW DATASET'                        RETURN CODE 16\n*\n*    'DLX012I  DLXTRANS -- SYSUT1 DATASET NAME HAS NO THIRD\n*     QUALIFIER - \"DUMMYFIL\" SUBSTITUTED'      RETURN CODE 4\n*\n*    'DLX013E  DLXTRANS -- DELIMITER (DLM=) MUST BE SPECIFIED\n*     WHEN JCL IS TRANSMITTED'                 RETURN CODE 16\n*\n*    'DLX014W  DLXTRANS -- RECFM TAKEN FROM HEADER RECORD - JCL\n*     NOT USED'                                RETURN CODE 4\n*\n*    'DLX015E  DLXTRANS -- RECFM = U CANNOT BE PROCESSED -\n*     PROGRAM TERMINATED'                      RETURN CODE 16\n*\n*    'DLX016E  DLXTRANS -- DELIMITER CHARACTERS HAVE OCCURRED\n*     IN THE DATA -----\n*     TRANSMITTED FILE IS INCOMPLETE. DELETE FILE & RERUN WITH\n*     NEW DELIMITER'                           RETURN CODE 16\n*\n*    'DLX017I  DLXTRANS -- ENDJCLIN DD CARD PRESENT BUT CAN NOT\n*     BE USED - IGNORED'\n*\n********************************************************************\n* REVISION HISTORY:\n*  10/13/82    NEW PROGRAM            NKH\n*\n*  01/14/83    ADDED CHECK FOR  SYSOUT SO THAT SYSUT2 CAN BE USED\n*                   FOR PRINTOUTS\n*              ADDED CHECK FOR DELIMITER OCCURRING WITHIN DATA\n*              ADDED CAPABILITY FOR SECOND SYSIN  - ENDJCLIN\n*\n***********************************************************************\n*\n         SAVE  (14,12),,DLXTRANS_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXTRANS,R12,R11         TELL ASSEMBLER\n         LA    R11,4095(R12)            R11 SECONDARY BASE\n         LA    R11,1(R11)               4096 PLUS R12\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n* END OF PROLOGUE                       SAVE AREA\n***********************************************************************\n**********   GET PARMS, ANALYZE, SET JCL SWITCH IF NEEDED   ***********\n***********************************************************************\nGETPARM1 EQU   *                        GET PARM FIELD\n         L     R2,0(R1)                 ADDRESS OF PARM TO R2\n         LH    R3,0(R2)                 LENGTH OF PARM TO R3\n         LTR   R3,R3                    CHECK FOR NO PARM\n         BZ    PARMEXIT                 ALL DONE WITH PARMS\n         LA    R3,1(R3)                 DECREMENT FOR EXECUTE\n         EX    R3,MOVEPARM              EXECUTE MOVE\n         LH    R3,PARMLNGT              RELOAD LENGTH\n         LA    R2,PARMFLDS              ADDRESS OF FIRST BYTE OF PARMS\n         LA    R4,PARMANAL              ADDRESS OF PARM WORKAREA\nGETPARM2 EQU   *\n         CLI   0(R2),C','               DELIMITING COMMA?\n         BE    ANALYZEP                 IF SO GO ANALYZE PREVIOUS PARM\n         BCT   R3,GETPARM3              IF MORE PARM INFO KEEP GOING\n         MVI   MOREPARM,C'N'            SET LASTPARM SWITCH\n         MVC   0(1,R4),0(R2)            MOVE LAST BYTE OF PARM INFO OUT\n         B     ANALYZEP                 GO ANALYZE THE PARM INFO\nGETPARM3 EQU   *\n         MVC   0(1,R4),0(R2)            MOVE A BYTE OF PARM INFO TO\n*                                       TEST AREA\n         LA    R4,1(R4)                 POINT TO NEXT SLOT IN TEST AREA\n         LA    R2,1(R2)                 POINT TO NEXT CHARACTER IN THE\n*                                       PARM FIELD\n         B     GETPARM2                 GO BACK AND DO IT AGAIN\nANALYZEP EQU   *                        ANALYZE THE PARM WE HAVE FOUND\n         CLC   PARMANAL(5),=C'NOJCL'    IS NOJCL SPECIFIED?\n         BE    GOTPARM1\n         CLC   PARMANAL(4),=C'DLM='     IS DLM= SPECIFIED?\n         BE    GOTPARM2\n         B     NEXTPARM\nGOTPARM1 EQU   *                        NOJCL WAS SPECIFIED\n         MVI   JCLSW,C'0'               SET JCL SWITCH TO NO\n         B     NEXTPARM\nGOTPARM2 EQU   *                        DLM= WAS SPECIFIED\n         MVC   JCLDLM(2),PARMANAL+4     MOVE DLM TO JCLDLM FIELD\n         B     NEXTPARM\nNEXTPARM EQU   *                        CHECK AND SET IF NECESSARY\n*                                       FOR MORE PARM PROCESSING\n         LA    R4,PARMANAL              RESET R4\n         MVI   PARMANAL,X'40'\n         MVC   PARMANAL+1(19),PARMANAL\n         CLI   MOREPARM,C'N'            IS THIS THE LAST PARM?\n         BE    PARMEXIT\n         LA    R2,1(R2)                 BUMP PAST COMMA\n         B     GETPARM2\nPARMEXIT EQU   *\n***********************************************************************\n**********   FIND DDNAMES THAT ARE PRESENT                  ***********\n***********************************************************************\n         SLR   R3,R3                    CLEAR R3\n         L     R2,16                    ADDRESS OF CVT\n         L     R2,0(R2)                 ADDRESS OF TCB ADDRESS WORDS\n         L     R2,4(R2)                 ADDRESS OF CURRENT TCB\n         L     R2,12(R2)                ADDRESS OF THIS TCBS TIOT\n         LA    R2,24(R2)                ADDRESS OF START OF DD ENTRY\n         IC    R3,0(R2)                 LENGTH OF THIS ENTRY\nFINDDD1  EQU   *\n         LTR   R3,R3\n         BZ    DONEDD\n         CLC   4(8,R2),=CL8'SYSIN'      IS IT SYSIN?\n         BE    GOTSYSIN\n         CLC   4(8,R2),=CL8'SYSUT1'     IS IT SYSUT1?\n         BE    GOTUT1\n         CLC   4(8,R2),=CL8'SYSUT2'     IS IT SYSUT2?\n         BE    GOTUT2\n         CLC   4(8,R2),=CL8'JCLIN'      IS IT JCLIN?\n         BE    GOTJCLIN\n         CLC   4(8,R2),=CL8'ENDJCLIN'   IS IT ENDJCLIN?\n         BE    GOTENDJ\n         CLC   4(8,R2),=CL8'SYSPUNCH'   IS IT SYSPUNCH?\n         BE    GOTPUNCH\n         B     NEXTDD                   DONT KNOW WHY BUT TRY AGAIN\nGOTSYSIN EQU   *\n         MVI   SYSINSW,C'1'             SET SYSIN DD PRESENT\n         B     NEXTDD\nGOTUT1   EQU   *\n         MVI   UT1SW,C'1'               SET SYSUT1 DD PRESENT\n         B     NEXTDD\nGOTUT2   EQU   *\n         MVI   UT2SW,C'1'               SET SYSUT2 DD PRESENT\n         B     NEXTDD\nGOTJCLIN EQU   *\n         MVI   JCLINSW,C'1'             SET JCLIN DD PRESENT\n         B     NEXTDD\nGOTENDJ  EQU   *\n         MVI   ENDJSW,C'1'              SET ENDJCLIN DD PRESENT\n         B     NEXTDD\nGOTPUNCH EQU   *\n         MVI   PUNCHSW,C'1'             SET PUNCH DD PRESENT\n         B     NEXTDD\nNEXTDD   EQU   *\n         AR    R2,R3                    BUMP TO NEXT DD ENTRY\n         IC    R3,0(R2)                 GET LENGTH OF ENTRY\n         B     FINDDD1                  LOOP\nDONEDD   EQU   *\n***********************************************************************\n*****    AT THIS POINT WE KNOW (OR CAN DECIDE) BASED ON COLLECTED\n*****    INFORMATION WHETHER THIS IS A REBLOCK OR DEBLOCK RUN AND\n*****    WHETHER THE OUTPUT OF A DEBLOCK RUN GOES TO A 370 OR A\n*****    SERIES/1 MACHINE.  NOW VALIDATE THAT ALL FILES NEEDED\n*****    ARE PRESENT.\n***********************************************************************\n*BEGIN VALIDATION\n*\n         CLI   UT1SW,C'0'               ARE WE SENDING?\n         BE    VALIDAT3                 NO\n         CLI   PUNCHSW,C'0'             IS OUTPUT FILE FOR SEND THERE?\n         BE    ERROR01                  NO GO PRODUCE MESSAGE AND QUIT\n*                                PARM=NOJCL IMPLIES SERIES/1\n         CLI   JCLSW,C'1'               CHECK FOR SERIES/1 OR 370\n         BNE   VALIDAT1                 FOR SERIES/1 DO NOT CHECK JCL\n         CLI   JCLINSW,C'0'             IF JCLIN FILE THERE?\n         BE    ERROR02                  NO GO PRODUCE MESSAGE AND QUIT\n         B     VALIDAT2\n***********************************************************************\n****           WE HAVE ENOUGH DD'S TO SEND BUT PRODUCE AN\n****           INFORMATIONAL ERROR MESSAGE FOR UNUSED DD CARDS\n***********************************************************************\nVALIDAT1 EQU   *                          JCLIN NOT USED FOR S/1\n         CLI   JCLINSW,C'0'             IS JCLIN FILE THERE?\n         BE    VALIDAT2                 NO, CONTINUE\n         BAL   R9,ERROR06               INFORM USER\nVALIDAT2 EQU   *\n         CLI   SYSINSW,C'0'             IS SYSIN FILE THERE?\n         BE    *+8                      NO, CONTINUE\n         BAL   R9,ERROR05               INFORM USER\n         B     VALIDATX                 DONE VALIDATION\nVALIDAT3 EQU   *\n         CLI   UT2SW,C'0'               SYSUT2 MUST BE SPECIFIED\n         BE    ERROR08                  IF NOT, QUIT\n         CLI   SYSINSW,C'0'             SYSIN MUST BE SPECIFIED\n         BE    ERROR09                  IF NOT, QUIT\n***********************************************************************\n****           WE HAVE ENOUGH DD'S TO RECEIVE BUT PRODUCE AN\n****           INFORMATIONAL ERROR MESSAGE FOR UNUSED DD CARDS\n***********************************************************************\n         CLI   UT1SW,C'0'               IS SYSUT1 FILE THERE?\n         BE    *+8                      NO, CONTINUE\n         BAL   R9,ERROR03               INFORM USER\n         CLI   JCLINSW,C'0'             IS JCLIN FILE THERE?\n         BE    *+8                      NO, CONTINUE\n         BAL   R9,ERROR06               INFORM USER\n         CLI   ENDJSW,C'0'              IS ENDJCLIN FILE THERE?\n         BE    *+8                      NO, CONTINUE\n         BAL   R9,ERROR17               INFORM USER\n         CLI   PUNCHSW,C'0'             IS SYSPUNCH FILE THERE?\n         BE    *+8                      NO, CONTINUE\n         BAL   R9,ERROR07               INFORM USER\nVALIDATX EQU   *                        END VALIDATION\n*\n***********************************************************************\n*  AT THIS POINT EVERYTHING THAT IS GOING TO BE VALIDATED IS.\n*  THE NEXT SECTION OF CODE SETS UP DATASET CHARACTERISTICS WHERE\n*  NECESSARY AND OPENS THE REQUIRED DATASETS.\n***********************************************************************\n         CLI   SYSINSW,C'0'             IF SYSIN IS PRESENT\n         BE    OPENSND1                 CONTINUE, ELSE GO SEND\n***********************************************************************\n*******     RECEIVE  -  SYSIN (80'S)  AND  SYSUT2 OUT       ***********\n***********************************************************************\n*  DETERMINE IF SYSIN IS REALLY SYSIN DATA OR A CATALOGUED DATASET\n         LA    R8,JFCBAREA              ADDRESS OF WORK AREA TO R8\n         USING JFCB,R8                  TELL ASSEMBLER\n         LA    R7,SYSIN                 ADDRESS OF DCB TO R7\n         USING IHADCB,R7                TELL ASSEMBLER\n         RDJFCB (SYSIN)\n         TM    JFCBTSDM,JFCSDS          CHECK FOR SYSIN/SYSOUT\n         BNO   OPENRCV1                 IF NOT, CONTINUE\n         MVC   DCBBLKSI(2),DCBLRECL     DEFAULT 80-80 LRECL-BLKSIZE\nOPENRCV1 EQU   *\n         OPEN  (SYSIN)\n         LA    R6,RECAREA               ADDRESS OF INPUT RECORD\n         USING HDR,R6                   TELL ASSEMBLER\n         GET   SYSIN,RECAREA            GET FIRST RECORD\n         MVC   UT1RECFM,HDRRECFM        MOVE\n         MVC   UT1DSORG,HDRDSRG1          ALL\n         MVC   UT1LRECL,HDRLRECL            DATASET CHARACTERISTICS\n         MVC   UT1BLKSI,HDRBLKSZ              TO HOLD AREA FOR INPUT\n         DROP  R6\n         MVI   RECAREA,X'40'            CLEAR INPUT\n         MVC   RECAREA+1(79),RECAREA        AREA\n***********************************************************************\n*        BEGIN TO PROCESS THE OUTPUT DATASET (OPEN)\n***********************************************************************\n         MVI   JFCBAREA,X'00'           CLEAR\n         MVC   JFCBAREA+1(L'JFCBAREA-1),JFCBAREA ALL WORK AREAS\n         LA    R7,SYSUT2                AND PREPARE TO PROCESS\n         RDJFCB (SYSUT2)\n         TM     JFCBIND2,JFCNEW         CHECK IF NEW DATASET\n         BO     OPENRCV2                BYPASS OBTAIN\n         TM     JFCBTSDM,JFCSDS         IF 'OLD' DATASET IS SYSOUT\n         BO     OPENRCV2                BYPASS OBTAIN\n         CLC    JFCBFLSQ,=X'0000'       WILL BE NONZERO IF TAPE\n         BNE    OPENRCV2                BYPASS OBTAIN\n*\n*        DO OBTAIN FOR FORMAT1 DSCB FOR OLD OUTPUT DISK DATASET\n*\n         LA    R6,DSCB1WRK              ADDRESS OF WORK AREA\n         USING DS1FMTID,R6              TELL ASSEMBLER\n         MVI    CAMLDSNM,X'40'          CLEAR\n         MVC    CAMLDSNM+1(L'CAMLDSNM-1),CAMLDSNM\n         MVC    CAMLDSNM,JFCBDSNM       AND LOAD\n         MVI    CAMLVOLS,X'40'          DATASET NAME\n         MVC    CAMLVOLS+1(L'CAMLVOLS-1),CAMLVOLS\n         MVC    CAMLVOLS(6),JFCBVOLS    AND VOLUME SERIAL\n         OBTAIN DSCBLIST                GET DSCB FORMAT 1\n         MVC    UT2DSORG,DS1DSORG\n         MVC    UT2RECFM,DS1RECFM\n         MVC    UT2LRECL,DS1LRECL\n         MVC    UT2BLKSI,DS1BLKL\n         DROP   R6\n         B      OPENRCV3\nOPENRCV2 EQU    *\n         MVC   UT2DSORG,JFCDSRG1        BUILD UT2 INFO FROM JCL\n         MVC   UT2RECFM,JFCRECFM\n         MVC   UT2LRECL,JFCLRECL\n         MVC   UT2BLKSI,JFCBLKSI\nOPENRCV3 EQU   *\n************* ( CAN'T PROCESS RECFM=U YET, SO CHECK FOR IT )\n         TM    UT1RECFM,DCBRECU         TEST FOR RECFM=U\n         BO    ERROR15                  YES, WRITE MSG AND QUIT\n         TM    UT1RECFM,DCBRECV         TEST FOR VARIABLE\n         BO    OPENRCV5                 IF SO GO PROCESS\n         CLC   JFCBFLSQ,=X'0000'         TAPE?\n         BE   OPNRCVD1                 IF NOT, GO TO DISK PROCESS\n*\n*****************   PROCESS  TAPE  ***********************************\nOPNRCVT1 EQU   *\n         MVC   DCBLRECL(2),UT1LRECL   MOVE HDR LRECL TO DCB\n         CLC   UT2BLKSI,=X'0000'      IF OUTPUT BLKSIZE NOT 0\n         BNE   OPNRCVT3                 BRANCH\nOPNRCVT2 EQU   *                    *****  COMPUTE BLKSIZE\n         SLR   R8,R8                  ELSE\n         SLR   R9,R9                   CLEAR REGISTERS\n         SLR   R5,R5                    AND COMPUTE\n         A     R9,=F'32760'            MAX BLOCK SIZE\n         LH    R5,DCBLRECL\n         DR    R8,R5\n         MR    R8,R5\n         STH   R9,DCBBLKSI\n         B     OPENRCV4\nOPNRCVT3 EQU   *                    **** CHECK GIVEN BLKSIZE\n         SLR   R5,R5\n         SLR   R8,R8\n         SLR   R9,R9\n         A     R9,=F'32760'\n         LH    R8,UT2BLKSI\n         LH    R5,DCBLRECL\n         SR    R9,R8                  MAX BLKSIZE MINUS GIVEN BLKSIZE\n         CR    R9,R5                  IF > LRECL GO BACK AND CALCULATE\n         BNL   OPNRCVT2               LARGER BLOCK\n         B     OPENRCV4\n*\n*****************   PROCESS  DISK  ***********************************\nOPNRCVD1 EQU   *\n         CLC   UT2LRECL,UT1LRECL        LRECL NOT SPECIFIED?\n         BNE   ERROR10\n         MVC   DCBLRECL(2),UT2LRECL     MOVE LRECL TO DCB\n         CLC   UT2BLKSI,=X'0000'       IF BLOCK = 0\n         BNE   *+14\n         MVC   DCBBLKSI(2),UT2LRECL    FORCE BLOCK 1\n         B     OPENRCV4\n         MVC   DCBBLKSI(2),UT2BLKSI    ELSE USE GIVEN BLKSIZE\n*\nOPENRCV4 MVI   DCBDSRG1,DCBDSGPS        DSORG=PS\n         MVC   DCBRECFM(1),UT2RECFM     SET RECFM TO UT2RECFM\n         B     OPENUT2                  GO OPEN\n*\n**********************************************************************\n************        VARIABLE FORMAT SYSUT2                 ***********\n**********************************************************************\nOPENRCV5 EQU   *\n         MVC   DCBLRECL(2),UT2LRECL     IF OUTPUT BLKSIZE=0\n         CLC   UT2BLKSI,=X'0000'\n         BNE   *+20                     FORCE TO BLOCK 1\n         LH    R3,UT2LRECL              GET MAX LRECL\n         LA    R3,4(R3)                 BUMP BY 4 FOR BDW\n         STH   R3,DCBBLKSI              STORE IN DCB\n         B     *+10\n         MVC   DCBBLKSI(2),UT2BLKSI     ELSE MOVE UT2BLKSI TO DCB\n*\n         MVC   DCBRECFM(1),UT2RECFM     SET RECFM TO PREV SPEC\n         TM    UT1RECFM,DCBRECSB        CHECK HEADER\n         BNO   OPENRCV6                 BRANCH IF NOT S\n         CLC   UT1RECFM,UT2RECFM        IF S, BUT HDR = JCL,\n         BE    OPENRCV6                  BRANCH ANYWAY\n*\n         CLC   UT2RECFM,=X'00'          IF JCL DCB NOT GIVEN\n         BE    *+8                       SKIP MESSAGE\n*\n         BAL   R9,ERROR14\n         MVC   DCBRECFM(1),UT1RECFM      CHANGE RECFM TO = HEADER\n         MVC   DCBBLKSI(2),UT1BLKSI      CHANGE BLOCKING TO MATCH\n*\nOPENRCV6 TM    DCBRECFM,DCBRECV+DCBRECBR+DCBRECSB\n*        IF RECFM=VBS THEN CHANGE BFTEK TO A\n         BNO   *+8\n         OI    DCBBFTEK,DCBBFTA         BFTEK=A\n         MVI   DCBDSRG1,DCBDSGPS        DSORG=PS\n         B     OPENUT2V                 GO OPEN\n*                                 ****************************\n*                                  * R3 - OUTPUT  POINTER\n*                                  * R5 - INPUT POINTER\n*                                  * R6 - REMAINING OUTPUT LENGTH\n*                                  * R7 - INPUT LRECL\n*                                  * R9 - MISC. CONSTANTS\n*                                 ****************************\n*\nOPENUT2V EQU   *\n         MVC   UT2BLKSI,DCBBLKSI\n         MVC   UT2RECFM,DCBRECFM\n         MVC   UT2DSORG,DCBDSRG1\n         XC    DCBMACR(2),DCBMACR       CLEAR MACRF= AND\n         MVI   DCBMACR2,DCBMRPUT+DCBMRLCP  SET IT TO MACRF=(PL)\n         OPEN  (SYSUT2,(OUTPUT))\n         PUT   SYSUT2\n         ST    R1,UT2AREA\nRCVPS1V  EQU   *\n         L     R3,UT2AREA               OUTPUT RECORD START ADDRESS\nRCVPS2V  EQU   *\n         MVI   RECAREA,X'40'            CLEAR RECORD AREA\n         MVC   RECAREA+1(79),RECAREA\n         GET   SYSIN,RECAREA            GET A RECORD\n         LA    R5,RECAREA               ADDRESS OF INPUT RECORD START\n         MVC   SAVLRECL(2),RECAREA      SAVE FIRST 2 BYTES OF RECAREA\n         LH    R6,SAVLRECL              R6 = CURRENT LRECL - OUT\n         LA    R7,80                    R7 = INPUT LRECL\n         CR    R6,R7                    IF OUTPUT LRECL < 80\n         BL    RCVPS4V                    BRANCH\nRCVPS3V  EQU   *\n         BCTR  R7,R0\n         EX    R7,MOVEREC1           MOVE SYSIN (ALL OR WHAT IS LEFT)\n         LA    R8,1(R7)              SAVE 'HOW MUCH WAS JUST MOVED'\n         LA    R3,0(R8,R3)           AND BUMP R3 BY THAT MUCH\n*\n         MVI   RECAREA,X'40'            CLEAR RECORD AREA\n         MVC   RECAREA+1(79),RECAREA\n         GET   SYSIN,RECAREA            GET A RECORD\n         LA    R5,RECAREA               ADDRESS OF INPUT RECORD START\n         LA    R7,80                    INPUT LRECL\n*\n         SR    R6,R8               SET R6 = HOW MUCH IS LEFT IN OUTPUT\n         CR    R7,R6               IF ROOM FOR ANOTHER WHOLE SYSIN,\n         BH    RCVPS4V\n         B     RCVPS3V               GO BACK AND GET ANOTHER\n*\nRCVPS4V  EQU   *\n         LTR   R6,R6               SKIP FOLLOWING MOVE IF  R6=0\n         BZ    RCVPS5V             (SYSUT2 AND SYSIN RECORDS HAVE\n*                                   ENDED TOGTHER)\n         BCTR  R6,R0\n         EX    R6,MOVEREC1         MOVE AS MUCH AS THERE IS ROOM FOR\n         LA    R6,1(R6)            PUT R6 COUNTER BACK\n         L     R1,UT2AREA          PUT R1 BACK\n         LA    R5,0(R6,R5)         BUMP R5 - HOW FAR INTO SYSIN\n*\nRCVPS5V  EQU   *\n         PUT   SYSUT2                 WRITE SYSUT2\n         ST    R1,UT2AREA\n         L     R3,UT2AREA\n         SR    R7,R6                  HOW MUCH SYSIN IS LEFT?\n         LA    R9,1\n         CR    R7,R9                  CHECK FOR ONLY ONE BYTE LEFT\n         BNE   RCVPS6V                   IF NOT, SKIP\n*\n         MVC   SAVLRECL(1),0(R5)     SAVE THE ONE REMAINING BYTE\n         MVI   RECAREA,X'40'          CLEAR RECAREA\n         MVC   RECAREA+1(79),RECAREA\n         GET   SYSIN,RECAREA          AND GET NEXT SYSIN\n         LA    R5,RECAREA\n         MVC   SAVLRECL+1(1),RECAREA  COMPLETE SAVED LRECL\n         LA    R5,1(R5)               BUMP R5 - SYSIN\n         MVC   0(R9,R3),SAVLRECL      MOVE SAVED LRECL TO OUTPUT\n         LA    R9,2\n         LH    R6,SAVLRECL\n         SR    R6,R9                  ADJUST SAVLRECL SO THAT R6\n         STH   R6,SAVLRECL              COMES OUT RIGHT LATER\n         LA    R3,2(R3)               BUMP R3 BY 2\n         LA    R7,79                  SET LENGTH OF REMAINING SYSIN\n         B     RCVPS7V\n*\nRCVPS6V  EQU   *\n         MVC   SAVLRECL(2),0(R5)      SAVE LRECL OF NEXT RECORD\nRCVPS7V  EQU   *\n         CLC   SAVLRECL(1),=C'$'\n         BE    ENDSYSIN\n         LH    R6,SAVLRECL            RE-INITIALIZE R6\n         CR    R6,R7               COMPARE WHAT IS LEFT IN SYSIN TO\n         BL    RCVPS4V               OUTPUT LRECL\n         B     RCVPS3V\n********************************************************************\n***         PROCESS FIXED LENGTH SYSUT2\n********************************************************************\n*                                  * REG3 - OUTPUT  POINTER\n*                                  * REG4 - OUTPUT LRECL\n*                                  * REG5 - INPUT POINTER\n*                                  * REG6 - REMAINING OUTPUT LENGTH\n*                                  * REG7 - INPUT LRECL\n*                                  * REG9 - MISC. CONSTANTS\n*\nOPENUT2  EQU   *\n         MVC   UT2BLKSI,DCBBLKSI\n         MVC   UT2RECFM,DCBRECFM\n         MVC   UT2DSORG,DCBDSRG1\n         XC    DCBMACR(2),DCBMACR       CLEAR MACRF= AND\n         MVI   DCBMACR2,DCBMRPUT+DCBMRLCP  SET IT TO MACRF=(PL)\n         OPEN  (SYSUT2,(OUTPUT))\n         PUT   SYSUT2\n         ST    R1,UT2AREA\nRCVPS1   EQU   *\n         L     R3,UT2AREA               OUTPUT RECORD START ADDRESS\n         LH    R4,UT2LRECL              OUTPUT RECORD LENGTH\n         LR    R6,R4                    R6 = LRECL\nRCVPS2   EQU   *\n         MVI   RECAREA,X'40'            CLEAR RECORD AREA\n         MVC   RECAREA+1(79),RECAREA\n         GET   SYSIN,RECAREA            GET A RECORD\n         LA    R5,RECAREA               ADDRESS OF INPUT RECORD START\n         LA    R7,80                    INPUT LRECL\n         CR    R4,R7                    IF OUTPUT LRECL < 80\n         BL    RCVPS4                     BRANCH\nRCVPS3   EQU   *\n         BCTR  R7,R0\n         EX    R7,MOVEREC1           MOVE SYSIN (ALL OR WHAT IS LEFT)\n         LA    R8,1(R7)              SAVE 'HOW MUCH WAS JUST MOVED'\n         LA    R3,0(R8,R3)           AND BUMP R3 BY THAT MUCH\n*\n         MVI   RECAREA,X'40'            CLEAR RECORD AREA\n         MVC   RECAREA+1(79),RECAREA\n         GET   SYSIN,RECAREA            GET A RECORD\n         LA    R5,RECAREA               ADDRESS OF INPUT RECORD START\nSPECIAL  LA    R7,80                    INPUT LRECL\n*\n         SR    R6,R8               SET R6 = HOW MUCH IS LEFT IN OUTPUT\n         CR    R7,R6               IF ROOM FOR ANOTHER WHOLE SYSIN,\n         BH    RCVPS4\n         B     RCVPS3                GO BACK AND GET ANOTHER\n*\nRCVPS4   EQU   *\n         LTR   R6,R6               SKIP FOLLOWING MOVE IF  R6=0\n         BZ    RCVPS5              (SYSUT2 AND SYSIN RECORDS HAVE\n*                                   ENDED TOGTHER)\n         BCTR  R6,R0\n         EX    R6,MOVEREC1         MOVE AS MUCH AS THERE IS ROOM FOR\n         LA    R6,1(R6)            PUT R6 COUNTER BACK\n         L     R1,UT2AREA          PUT R1 BACK\n         LA    R5,0(R6,R5)         BUMP R5 - HOW FAR INTO SYSIN\n*\n         SR    R7,R6              FIND LENGTH OF REMAINING INPUT\n         LA    R9,5\n         CR    R7,R9              AND COMPARE TO 5 (LENGTH OF $$EOF)\n         BL    SHORTFIL           IF SHORT, BRANCH\n*\nRCVPS5   EQU   *\n         MVC   HOLDPAT(5),0(5)\n         CLC   HOLDPAT(5),ENDFILL  IS THIS END-OF-DATA ($$EOF)?\n         BE    ENDSYSIN\n         PUT   SYSUT2              WRITE SYSUT2\n         ST    R1,UT2AREA\n         L     R3,UT2AREA\n*\n*        SR    R7,R6               HOW MUCH SYSIN IS LEFT\n         LR    R6,R4               RE-INITIALIZE R6\n         CR    R4,R7               COMPARE WHAT IS LEFT IN SYSIN TO\n         BL    RCVPS4                OUTPUT LRECL\n         B     RCVPS3\n*\nSHORTFIL EQU   *\n         ST    R5,SAVER5              SAVE INPUT POINTER\n         GET   SYSIN,LASTAREA         GET NEXT RECORD TO TEST\n         LA    R5,LASTAREA\n         CLC   LASTAREA(5),ENDFILL\n         BE    ENDSYSIN               IF SO, GO FINISH\n         PUT   SYSUT2                 IF NOT AT END\n         ST    R1,UT2AREA             WRITE CURRENT OUTPUT RECORD\n         L     R3,UT2AREA             AND RESET R3\n         LR    R6,R4                   AND R6\n         LA    R8,80                  SET R8 = 80\n         CR    R4,R8                  IF OUTPUT LRECL > 80\n         BL    RESET4                   RESET BEFORE BRANCHING BACK.\n*\nRESET4   EQU   *\n         L     R5,SAVER5               RESET R5\n         BCTR  R7,R0                    DECREMENT COUNTER FOR MOVE\n         EX    R7,MOVEREC1             MOVE END OF FORMER SYSIN RECORD\n         LA    R8,1(R7)\n         LA    R3,0(R8,R3)\n         MVI   RECAREA,X'40'            CLEAR INPUT AREA\n         MVC   RECAREA+1(79),RECAREA\n         MVC   RECAREA(80),LASTAREA\n         LA    R5,RECAREA\n         B     SPECIAL\n*\nENDSYSIN EQU   *\n         CLOSE (SYSIN,,SYSUT2)           CLOSE FILES\n         B     TERMINAT\nRCVPART1 EQU   *\n         B     TERMINAT\nOPENSND1 EQU   *\n         MVI   JFCBAREA,X'00'           CLEAR\n         MVC   JFCBAREA+1(L'JFCBAREA-1),JFCBAREA ALL WORK AREAS\n         LA    R8,JFCBAREA              ADDRESS OF WORK AREA TO R8\n         USING JFCB,R8                  TELL ASSEMBLER\n         LA    R7,SYSPUNCH              ADDRESS OF DCB TO R7\n         USING IHADCB,R7                TELL ASSEMBLER\n         RDJFCB (SYSPUNCH)\n         TM    JFCBTSDM,JFCSDS          CHECK FOR SYSIN/SYSOUT\n         BNO   OPENSND2                 IF NOT CONTINUE\n         MVC   DCBBLKSI(2),DCBLRECL     DEFAULT 80-80 LRECL-BLKSIZE\nOPENSND2 EQU   *\n         TM     JFCBIND2,JFCNEW         CHECK IF NEW DATASET\n         BO     OPENSND3                BYPASS OBTAIN\n         TM     JFCBTSDM,JFCSDS         IF 'OLD' DATASET IS SYSOUT\n         BO     OPENSND3                BYPASS OBTAIN\n         CLC    JFCBFLSQ,=X'0000'       WILL BE NONZERO IF TAPE\n         BNE    OPENSND3                BYPASS OBTAIN\n*\n*        DO OBTAIN FOR FORMAT1 DSCB FOR OLD OUTPUT DISK DATASET\n*\n         LA    R6,DSCB1WRK              ADDRESS OF WORK AREA\n         USING DS1FMTID,R6              TELL ASSEMBLER\n         MVI    CAMLDSNM,X'40'          CLEAR\n         MVC    CAMLDSNM+1(L'CAMLDSNM-1),CAMLDSNM\n         MVC    CAMLDSNM,JFCBDSNM       AND LOAD\n         MVI    CAMLVOLS,X'40'          DATASET NAME\n         MVC    CAMLVOLS+1(L'CAMLVOLS-1),CAMLVOLS\n         MVC    CAMLVOLS(6),JFCBVOLS    AND VOLUME SERIAL\n         OBTAIN DSCBLIST                GET DSCB FORMAT 1\n         CLC    DS1BLKL(2),=X'0000'     CHECK FOR BLOCKSIZE OF 0\n         BNE    OPENSND3                IF NOT CONTINUE\n         MVC   DCBBLKSI(2),DCBLRECL     DEFAULT 80-80 LRECL-BLKSIZE\n         DROP  R6\n         DROP  R7\n         DROP  R8\nOPENSND3 EQU   *\n         OPEN  (SYSPUNCH,(OUTPUT))\n         CLI   JCLSW,C'0'               CHECK IF JCL NEEDED\n         BE    OPENSND4                 IF NOT CONTINUE\n*\nOPENJCL  EQU   *\n         MVI   JFCBAREA,X'00'           CLEAR\n         MVC   JFCBAREA+1(L'JFCBAREA-1),JFCBAREA ALL WORK AREAS\n         LA    R8,JFCBAREA\n         USING JFCB,R8\n         LA    R7,JCLIN\n         USING IHADCB,R7\n         RDJFCB (JCLIN)\n         TM    JFCBTSDM,JFCSDS          CHECK FOR SYSIN/SYSOUT\n         BNO   *+10                     IF NOT CONTINUE\n         MVC   DCBBLKSI(2),DCBLRECL     DEFAULT 80-80 LRECL-BLKSIZE\n         OPEN  (JCLIN)\n*\nSNDJCL1  EQU   *                        JCL COPY LOOP\n         GET   JCLIN,JCLAREA            GET A RECORD\n         PUT   SYSPUNCH,JCLAREA         PUT A RECORD\n         MVI   JCLAREA,X'40'            CLEAR THE\n         MVC   JCLAREA+1(L'JCLAREA-1),JCLAREA  RECORD AREA\n         B     SNDJCL1                  CONTINUE\nENDJCL   EQU   *\n         CLOSE (JCLIN)                  CLOSE JCL COPY FILE\n         DROP  R7\n         DROP  R8\n         CLI   JCLDLM,X'40'             DLM= PARM SPECIFIED?\n         BE    ERROR13                  NO CONTINUE, ELSE\n         MVC   JCLAREA(20),=C'//SYSIN DD DATA,DLM='\n         MVC   JCLAREA+20(2),JCLDLM      CREATE SYSIN CARD\n         PUT   SYSPUNCH,JCLAREA          AND WRITE IT\nOPENSND4 EQU   *                         BEGIN TO PROCESS SYSUT1 FILE\n         MVI   JFCBAREA,X'00'           CLEAR\n         MVC   JFCBAREA+1(L'JFCBAREA-1),JFCBAREA ALL WORK AREAS\n         LA    R8,JFCBAREA              ADDRESS OF WORK AREA TO R8\n         USING JFCB,R8                  TELL ASSEMBLER\n         LA    R7,SYSUT1                ADDRESS OF DCB TO R7\n         USING IHADCB,R7                TELL ASSEMBLER\n         RDJFCB (SYSUT1)\n         TM    JFCBTSDM,JFCSDS          CHECK FOR SYSIN/SYSOUT\n         BNO   OPENSND5                 IF NOT CONTINUE\n         MVC   DCBBLKSI(2),DCBLRECL     DEFAULT 80-80 LRECL-BLKSIZE\nOPENSND5 EQU   *                         BEGIN TO PROCESS SYSUT1 FILE\n         TM     JFCBIND2,JFCNEW         CHECK IF NEW DATASET\n         BO     ERROR11                 IF SO ERROR AND QUIT\n*********************************************************************\n*\n         MVI    CAMLDSNM,X'40'          CLEAR\n         MVC    CAMLDSNM+1(L'CAMLDSNM-1),CAMLDSNM\n         MVC    CAMLDSNM,JFCBDSNM       AND LOAD\n*\n         LOCATE CAMLIST\n*\n         CLI    LOCWORK+4,X'80'         WILL BE EQUAL IF TAPE\n         BE     OPENSNDT                BRANCH IF  TAPE\n*\n*        DO OBTAIN FOR FORMAT1 DSCB FOR OLD OUTPUT DISK DATASET\n*\n         LA    R6,DSCB1WRK              ADDRESS OF WORK AREA\n         USING DS1FMTID,R6              TELL ASSEMBLER\n         MVI    CAMLDSNM,X'40'          CLEAR\n         MVC    CAMLDSNM+1(L'CAMLDSNM-1),CAMLDSNM\n         MVC    CAMLDSNM,JFCBDSNM       AND LOAD\n         MVI    CAMLVOLS,X'40'          DATASET NAME\n         MVC    CAMLVOLS+1(L'CAMLVOLS-1),CAMLVOLS\n         MVC    CAMLVOLS(6),JFCBVOLS    AND VOLUME SERIAL\n         OBTAIN DSCBLIST                GET DSCB FORMAT 1\n         MVC    UT1DSORG,DS1DSORG\n         MVC    UT1RECFM,DS1RECFM\n         MVC    UT1LRECL,DS1LRECL\n         MVC    UT1BLKSI,DS1BLKL\n         DROP   R6\n         B      OPENSND7\nOPENSNDT EQU    *                      *** FIND TAPE DCB INFO\n         OPEN  (SYSUT1,(INPUT,REREAD))\n         MVC   UT1DSORG,DCBDSORG\n         MVC   UT1RECFM,DCBRECFM\n         MVC   UT1LRECL,DCBLRECL\n         MVC   UT1BLKSI,DCBBLKSI\n         CLOSE (SYSUT1)\n         B     OPENSND7\nOPENSND6 EQU    *\n         MVC   UT1DSORG,JFCDSRG1       *** SHOULDN\"T NEED THIS,\n         MVC   UT1RECFM,JFCRECFM           SINCE FILE SHOULD BE\n         MVC   UT1LRECL,JFCLRECL           CATALOGUED.\n         MVC   UT1BLKSI,JFCBLKSI\nOPENSND7 EQU    *\n         TM    UT1RECFM,DCBRECV         TEST FOR VARIABLE\n         BO    OPENSND8                 IF SO GO PROCESS\n         MVC   DCBLRECL(2),UT1LRECL\n         CLC   UT1BLKSI,X'0000'         IF OUTPUT BLKSIZE = 0\n         BNE   *+14\n         MVC   DCBBLKSI(2),UT1LRECL     FORCE TO BLOCK 1\n         B     *+10\n         MVC   DCBBLKSI(2),UT1BLKSI     ELSE SET DCBBLKSI = UT1BLKSI\n*\n         MVC   DCBRECFM(1),UT1RECFM     SET RECFM\n*\n         MVI   DCBDSRG1,DCBDSGPS        DSORG=PS\n         B     OPENUT1                  GO OPEN\nOPENSND8 EQU   *                        PROCESS RECFM=V*\n         MVC  DCBLRECL(2),UT1LRECL      IF OUTPUT BLKSIZE=0\n         CLC   UT1BLKSI,X'0000'\n         BNE   *+20                     FORCE TO BLOCK 1\n         LH    R3,UT1LRECL              GET MAX LRECL\n         LA    R3,4(R3)                 BUMP BY 4 FOR BDW\n         STH   R3,DCBBLKSI              STORE IN DCB\n         B     *+10\n         MVC   DCBBLKSI(2),UT1BLKSI     ELSE MOVE UT1BLKSIZE TO DCB\n*\n         MVC   DCBRECFM(1),UT1RECFM\n*\n         TM    DCBRECFM,DCBRECV+DCBRECBR+DCBRECSB\n*        IF RECFM=VBS THEN CHANGE BFTEK TO A\n         BNO   *+8\n         OI    DCBBFTEK,DCBBFTA         BFTEK=A\n         MVI   DCBDSRG1,DCBDSGPS        DSORG=PS\n         B     OPENUT1                  GO OPEN\nOPENUT1  EQU   *\n         MVC   UT1BLKSI,DCBBLKSI\n         MVC   UT1RECFM,DCBRECFM\n         MVC   UT1DSORG,DCBDSRG1\n         XC    DCBMACR(2),DCBMACR       CLEAR MACRF= AND\n         MVI   DCBMACR1,DCBMRGET+DCBMRLCG  SET IT TO MACRF=(GL)\n         MVI   RECAREA,X'40'            CLEAR RECORD AREA TO\n         MVC   RECAREA+1(L'RECAREA-1),RECAREA     SPACES\n         LA    R6,RECAREA               ADDRESS OF RECORD AREA\n         USING HDR,R6                   TELL ASSEMBLER\n*********************************************************************\n*****        USE DCB INFO TO SET UP HEADER RECORD        ************\n*********************************************************************\n         MVC   HDRLRECL,DCBLRECL\n         MVC   HDRBLKSZ,DCBBLKSI\n         MVC   HDRRECFM,DCBRECFM\n         MVC   HDRDSRG1,DCBDSRG1\n         MVI   HDRDSN3Q,X'40'\n         MVC   HDRDSN3Q+1(7),HDRDSN3Q\n*********************************************************************\n*****        FIND THIRD QUALIFIER FOR HEADER RECORD      ************\n*********************************************************************\n         LA    R5,JFCBDSNM\n         LA    R4,0\n         LA    R3,1                     CONTROL\nDSN3Q1   CLI   0(R5),C'.'               CHECK FOR END OF A QUALIFIER\n         BE    DSN3Q2                   CHECK FOR WHICH ONE\n         CLI   0(R5),C' '               CHECK FOR END OF A QUALIFIER\n         BE    DSN3Q2                   CHECK FOR WHICH ONE\n         LA    R5,1(R5)                 BUMP R5\n         B     DSN3Q1                   LOOP\nDSN3Q2   CR    R3,R4\n         BE    DSN3Q3                   IF 2ND QUALIFIER\n         LA    R4,1(R4)                 BUMP QUALIFIER COUNT\n         LA    R5,1(R5)                 BUMP R5\n         B     DSN3Q1                   LOOP\n*\nDSN3Q3   LA    R3,HDRDSN3Q              LOAD OUTPUT ADDRESS\n         CLI   0(R5),C'.'               IS THERE A THIRD QUALIFIER?\n         BE    DSN3Q4                   IF SO, GO ON\n         MVC   HDRDSN3Q(8),DUMMYNAM     ELSE MOVE DUMMY NAME TO HEADER\n         BAL   R9,ERROR12               INFORM USER\n         LA    R5,8(R5)                 FIX REG 5\n         B     DSN3QX                   AND GO TO PUT\n*\nDSN3Q4   LA    R5,1(R5)\n         CLI   0(R5),C'.'               ARE WE DONE MOVING?\n         BE    DSN3QX\n         CLI   0(R5),C' '\n         BE    DSN3QX\n         MVC   0(1,R3),0(R5)            MOVE A BYTE\n         LA    R3,1(R3)                 BUMP THE\n         B     DSN3Q4                   LOOP\n*********************************************************************\n*****        WRITE HEADER RECORD AND OPEN INPUT SYSUT1   ************\n*********************************************************************\nDSN3QX   EQU   *\n         PUT   SYSPUNCH,RECAREA         PUT THE HEADER RECORD\n         MVI   RECAREA,X'40'            CLEAR TO BLANKS\n         MVC   RECAREA+1(L'RECAREA-1),RECAREA\n         DROP  R6\n         DROP  R7\n         DROP  R8\n         OPEN  (SYSUT1)\n*\n         LA    R2,SYSUT1\n         USING IHADCB,R2\n         GET   SYSUT1\n*********************************************************************\n*****        INITIALIZE REGISTERS FOR PROCESSING         ************\n*********************************************************************\n         ST    R1,UT1AREA\n         L     R5,UT1AREA         R5 = INPUT START ADDRESS\n         LA    R3,RECAREA         R3 = OUTPUT START ADDRESS\n         LA    R4,80              R4 = OUTPUT LRECL (80)\n         LR    R6,R4              R6 = OUTPUT LRECL COUNTER\n         LH    R7,DCBLRECL        R7 = INPUT LRECL\n         LR    R8,R7              R8 = INPUT LRECL COUNTER\n*\n         CR    R7,R4              COMPARE INPUT LRECL TO 80\n         BH    SNDPS3              BRANCH IF MORE\n*********************************************************************\n*****       LENGTH OF INPUT TO BE PROCESSED NOT > 80     ************\n*********************************************************************\nSNDPS1   EQU   *\n         LTR   R8,R8\n         BZ    SNDPS2           SKIP THE MOVE, IF ZERO\n         BCTR  R8,0\n         EX    R8,MOVEREC1      MOVE WHAT INPUT IS AVAILABLE\n         LA    R8,1(R8)         FIX R8\n         LA    R3,0(R3,R8)      BUMP R3 - HOW FAR INTO OUTPUT ARE WE?\n*\nSNDPS2   EQU   *\n         CLI   ENDT1SW,C'1'     AT END,\n         BE    SNDPS4             DON'T DO ANOTHER GET\n         GET   SYSUT1\n         ST    R1,UT1AREA\n         L     R5,UT1AREA\n         LH    R7,DCBLRECL\n*\n         SR    R6,R8           DETERMINE REMAINING OUTPUT\n         LR    R8,R7           RE-INITIALIZE R8 INPUT LRECL COUNTER\n         CR    R7,R6           IF WHOLE INPUT WILL FIT, GO BACK AND\n         BNH   SNDPS1           MOVE IT\n*********************************************************************\n*****       LENGTH OF INPUT TO BE PROCESSED > 80         ************\n*********************************************************************\nSNDPS3   EQU   *\n         LTR   R6,R6              SKIP THE MOVE IF R6 = 0\n         BZ    SNDPS4\n*\n         BCTR  R6,0               MOVE 80, OR WHATEVER FITS\n         EX    R6,MOVEREC1\n         LA    R6,1(R6)           FIX R6\n         LA    R5,0(R6,R5)        BUMP R5 TO CURRENT POS. IN INPUT\n*\nSNDPS4   EQU   *\n         CLI   JCLDLM,X'40'\n         BE    PUTPUNCH              IF JCL DELIMITER IS SPECIFIED,\n         CLC   RECAREA(2),JCLDLM      IF DATA MATCHES IT HERE,\n         BE    ERROR16                ISSUE ERROR MESSAGE AND END\n*\nPUTPUNCH PUT   SYSPUNCH,RECAREA\n         MVI   RECAREA,X'40'\n         MVC   RECAREA+1(L'RECAREA-1),RECAREA\n         LA    R3,RECAREA\n         LR    R10,R3\n         AR    R10,R4               R10 = ADDRESS OF END OF RECORD\n         CLI   FILLSW,C'1'\n         BE    ENDUT1C\n         CLI   FILLSW,C'2'\n         BE    EOFUT1\n*\n         SR    R8,R6            DETERMINE REMAINING INPUT\n         CR    R8,R4            COMPARE REMAINING INPUT TO 80\n         BNL   *+10             BRANCH BACK IF INPUT CONTAINS ANOTHER\n*                                     WHOLE OUTPUT RECORD\n         LR    R6,R4\n         B     SNDPS1\n         LA    R6,80\n         B     SNDPS3\n*********************************************************************\n************               END OF SYSUT1                 ************\n*********************************************************************\n*\nENDUT1   EQU   *\n         CLI   FILLSW,C'1'\n         BE    ENDUT1C\n         ST    R3,SAVER3\n         LA    R3,5(R3)\n         CR    R10,R3               IS THERE ROOM FOR \"AT END\"?\n         L     R3,SAVER3\n         BNL   ENDUT1C                BRANCH IF SO,\n         LA    R9,4                   ELSE\n         MVC   0(R9,R3),ENDFILL     MOVE \"AT END\" PATTERN (TRUNCATES)\n         LA    R9,1(R9)             R9 = 5\n         MVI   FILLSW,C'1'          SET FILLSW ON\n         B     SNDPS4               GO PUT RECORD\n*\nENDUT1C  EQU   *\n         LA    R9,4                 R9 = 4\n         MVC   0(R9,R3),ENDFILL     MOVE \"AT END\" PATTERN\n         LA    R9,1(R9)             R9 = 5\n         LA    R3,5(R3)\n         MVI   FILLSW,C'2'          SET FILLSW TO 'FINISH'\n         CR    R10,R3               IS THE RECORD FULL YET?\n         BNL   ENDUT1C              IF NOT, GO BACK\n         B     SNDPS4\nEOFUT1   EQU   *\n         CLI   JCLSW,C'1'           IF NO JCL\n         BNE   TERMINAT             END\n         MVC   0(2,R3),JCLDLM       ELSE WRITE DELIMITER\n         PUT   SYSPUNCH,RECAREA\n         CLI   ENDJSW,C'1'          IF NO ENDJCLIN\n         BNE   TERMINAT             END\n*\nOPENENDJ EQU   *\n         MVI   JFCBAREA,X'00'           CLEAR ALL WORK AREAS\n         MVC   JFCBAREA+1(L'JFCBAREA-1),JFCBAREA\n         LA    R8,JFCBAREA\n         USING JFCB,R8\n         LA    R7,ENDJCLIN\n         USING IHADCB,R7\n         RDJFCB (ENDJCLIN)\n         TM    JFCBTSDM,JFCSDS          CHECK FOR SYSIN/SYSOUT\n         BNO   *+10                     IF NOT CONTINUE\n         MVC   DCBBLKSI(2),DCBLRECL     DEFAULT 80-80 LRECL-BLKSIZE\n         OPEN  (ENDJCLIN)\n*\nENDJCL1  EQU   *                        JCL COPY LOOP\n         GET   ENDJCLIN,ENDJAREA        GET A RECORD\n         PUT   SYSPUNCH,ENDJAREA        PUT A RECORD\n         MVI   ENDJAREA,X'40'            CLEAR THE RECORD AREA\n         MVC   ENDJAREA+1(L'ENDJAREA-1),ENDJAREA\n         B     ENDJCL1                  CONTINUE\nENDENDJ  EQU   *\n         CLOSE (ENDJCLIN)               CLOSE ENDJCL COPY FILE\n         B     TERMINAT             END\n**********************************************************************\n* BEGINNING OF EPILOGUE\nTERMINAT L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         L     R15,RETCODE              LOAD STORED RETURN CODE\n         RETURN (14,12),RC=(15)         RETURN TO OS RC=R15\n* END OF EPILOGUE\n**********************************************************************\n* ERROR PROCESSING ROUTINES\n*        IN GENERAL THESE ROUTINES WILL PRODUCE A WTO WITH ROUTCDE=11\n*        SET AN APPROPRIATE RETURN CODE AND TERMINATE THE PROGRAM\n*        IN THE CASE OF INFORMATIONAL MESSAGES THE ROUTINE WILL\n*        ISSUE A WTO WITH ROUTCDE=11 AND RETURN FROM WHENCE IT CAME\n*        USING REGISTER 9 FOR LINKAGE\n         PRINT NOGEN\nERROR01  EQU   *                        SYSPUNCH DD MISSING ON SEND\n         WTO   'DLX001E  DLXTRANS -- SYSPUNCH DD CARD MISSING OR MISPELX\n               LED AND SYSUT1 DD CARD PRESENT',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         B     TERMINAT                 GET OUT\nERROR02  EQU   *                        SYSPUNCH DD MISSING ON SEND\n         WTO   'DLX002E  DLXTRANS -- JCLIN DD CARD MISSING OR MISPELLEDX\n                AND NOJCL PARM NOT SPECIFIED',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         B     TERMINAT                 GET OUT\nERROR03  EQU   *                        SYSUT1 PRESENT BUT NOT USED\n         WTO   'DLX003I  DLXTRANS -- SYSUT1 DD CARD PRESENT AND NOT NEEX\n               DED',ROUTCDE=(11)\n         BR    R9                       RETURN\nERROR04  EQU   *                        SYSUT2 PRESENT BUT NOT USED\n         WTO   'DLX004I  DLXTRANS -- SYSUT2 DD CARD PRESENT AND NOT NEEX\n               DED',ROUTCDE=(11)\n         BR    R9                       RETURN\nERROR05  EQU   *                        SYSIN PRESENT BUT NOT USED\n         WTO   'DLX005I  DLXTRANS -- SYSIN DD CARD PRESENT AND NOT NEEDX\n               ED',ROUTCDE=(11)\n         MVI   SYSINSW,C'0'\n         BR    R9                       RETURN\nERROR06  EQU   *                        JCLIN PRESENT BUT NOT USED\n         WTO   'DLX006I  DLXTRANS -- JCLIN DD CARD PRESENT AND NOT NEEDX\n               ED',ROUTCDE=(11)\n         BR    R9                       RETURN\nERROR07  EQU   *                        SYSPUNCH PRESENT BUT NOT USED\n         WTO   'DLX007I  DLXTRANS -- SYSPUNCH DD CARD PRESEND AND NOT NX\n               EEDED',ROUTCDE=(11)\n         BR    R9                       RETURN\nERROR08  EQU   *                        SYSPUNCH DD MISSING ON SEND\n         WTO   'DLX008E  DLXTRANS -- NEITHER SYSUT1 OR SYSUT2 DD CARDS X\n               ARE PRESENT. ONE IS REQUIRED',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         B     TERMINAT                 GET OUT\nERROR09  EQU   *                        SYSPUNCH DD MISSING ON SEND\n         WTO   'DLX009E  DLXTRANS -- SYSIN DD CARD MISSING OR MISPELLEDX\n                AND SYSUT2 DD CARD PRESENT',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         B     TERMINAT                 GET OUT\n*\nERROR10  EQU   *                        SYSPUNCH DD MISSING ON SEND\n         WTO   'DLX010E  DLXTRANS -- LRECL FROM INPUT FILE DOES NOT MATX\n               CH LRECL SPECIFIED FOR OUTPUT',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         CLOSE (SYSIN)\n         B     TERMINAT                 GET OUT\n*\nERROR11  EQU   *                        SYSUT1 ON RECEIVE A NEW DATASET\n         WTO   'DLX011E  DLXTRANS -- SYSUT1 FOR A RECEIVE OPERATION CANX\n                NOT BE A NEW DATASET',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         CLOSE (SYSPUNCH)\n         B     TERMINAT                 GET OUT\n*\nERROR12  EQU   *                        NO THIRD QUALIFIER\n         WTO   'DLX012I  DLXTRANS -- SYSUT1 DATASET NAME HAS NO THIRD QX\n               UALIFIER - \"DUMMYFIL\" SUBSTITUTED',ROUTCDE=(11)\n         MVI   RETCODE+3,X'04'          SET RETURN CODE TO 4\n         BR    R9                       RETURN\n*\nERROR13  EQU   *                        NO THIRD QUALIFIER\n         WTO   'DLX013E  DLXTRANS -- DELIMITER (DLM=) MUST BE SPECIFIEDX\n                WHEN JCL IS TRANSMITTED',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         B     TERMINAT                 END\n*\nERROR14  EQU   *\n         WTO   'DLX014W  DLXTRANS -- RECFM TAKEN FROM HEADER RECORD - JX\n               CL IGNORED',ROUTCDE=(11)\n         MVI   RETCODE+3,X'04'          SET RETURN CODE TO 4\n         BR    R9                       RETURN\n*\nERROR15  EQU   *                        NO THIRD QUALIFIER\n         WTO   'DLX015E  DLXTRANS -- RECFM = U CANNOT BE PROCESSED - PRX\n               OGRAM TERMINATED',ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         B     TERMINAT                 END\n*\nERROR16  EQU   *                        DELIMITER NOT UNIQUE\n         WTO   'DLX016E  DLXTRANS -- DELIMITER CHARACTERS HAVE OCCURREDX\n                IN THE DATA -',ROUTCDE=(11)\n         WTO   '-- TRANSMITTED FILE IS INCOMPLETE',ROUTCDE=(11)\n         WTO   '-- DELETE FILE AND RERUN WITH NEW DELIMITER',          X\n               ROUTCDE=(11)\n         MVI   RETCODE+3,X'0F'          SET RETURN CODE TO 16\n         B     TERMINAT                 END\n*\nERROR17  EQU   *                     ENDJCLIN PRESENT BUT NOT USED\n         WTO   'DLX017I  DLXTRANS -- ENDJCLIN DD CARD PRESENT BUT CAN NX\n               OT BE USED - IGNORED',ROUTCDE=(11)\n         BR    R9                       RETURN\n***********************************************************************\n         PRINT GEN\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nPARMAREA DS    0CL102                   AREA FOR PARM FIELD\nPARMLNGT DC    XL2'0000'                LENGTH OF PARM FIELD\nPARMFLDS DC    CL100' '                 MAX LENGTH PARM FIELD\nPARMANAL DC    CL20' '                  WORK FIELD FOR PARM ANALYSIS\nJCLSW    DC    C'1'                     JCL NEEDED 1 YES 0 NO\nMOREPARM DC    C'Y'                     LAST PARM SWITCH\nSYSINSW  DC    C'0'                     SYSIN DD 1 PRESENT 0 MISSING\nUT1SW    DC    C'0'                     SYSUT1 DD 1 PRESENT 0 MISSING\nUT2SW    DC    C'0'                     SYSUT2 DD 1 PRESENT 0 MISSING\nJCLINSW  DC    C'0'                     JCLIN DD 1 PRESENT 0 MISSING\nENDJSW   DC    C'0'                  ENDJCLIN DD 1 PRESENT 0 MISSING\nPUNCHSW  DC    C'0'                     SYSPUNCH DD 1 PRESENT 0 MISSING\nENDT1SW  DC    C'0'                     EOF INDICATOR - SYSUT1\nFILLSW   DC    C'0'                     END PATTERN INDICATOR\nRETCODE  DC    F'0'                     SAVE AREA FOR RETURN CODE\nUT1RECFM DC    XL1'00'                  SYSUT1 RECFM\nUT1DSORG DC    XL1'00'                  SYSUT1 DSORG\nUT1LRECL DC    XL2'0000'                SYSUT1 LRECL\nUT1BLKSI DC    XL2'0000'                SYSUT1 BLKSIZE\nSAVLRECL DC    XL2'0000'\nSAVLEN   DC    XL2'0000'\nSAVER3   DC    F'0'\nSAVER5   DC    F'0'\nDUMMYNAM DC    C'DUMMYFIL'              DUMMY NAME FOR THIRD QUALIFIER\nENDFILL  DC    C'$$EOF'\nHOLDPAT  DC    C'00000'\nUT1AREA  DC    F'0'                     AREA ADDRESS RETURNED BY PUT\nUT2RECFM DC    XL1'00'                  SYSUT2 RECFM\nUT2DSORG DC    XL1'00'                  SYSUT2 DSORG\nUT2LRECL DC    XL2'0000'                SYSUT2 LRECL\nUT2BLKSI DC    XL2'0000'                SYSUT2 BLKSIZE\nUT2AREA  DC    F'0'                     AREA ADDRESS RETURNED BY PUT\nRECAREA  DC    CL80' '\nLASTAREA DC    CL80' '\nJCLAREA  DC    CL80' '\nENDJAREA DC    CL80' '\nJCLDLM   DC    CL2'  '                  DLM=\nCAMLDSNM DC    CL44' '\nCAMLVOLS DC    CL6' '\nDSCB1WRK DC    XL140'00'                FORMAT1 DSCB WORKAREA\nMOVEPARM MVC   PARMAREA(0),0(R2)        MOVE PARM FIELD TO PARMSAVE\nMOVEREC1 MVC   0(0,R3),0(R5)            MOVE RECORD FROM INPUT TO OUT\nDSCBLIST CAMLST SEARCH,CAMLDSNM,CAMLVOLS,DSCB1WRK\nCAMLIST  CAMLST NAME,CAMLDSNM,,LOCWORK\nLOCWORK  DS    0D\n         DS    265C\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),              X\n               RECFM=FB,EODAD=ENDSYSIN,EXLST=RDJFLIST\nSYSUT1   DCB   DDNAME=SYSUT1,EODAD=ENDUT1,EXLST=RDJFLIST,DSORG=PS,     X\n               MACRF=(RP)\nSYSUT2   DCB   DDNAME=SYSUT2,EXLST=RDJFLIST,DSORG=PS,MACRF=(PM)\nSYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,LRECL=80,EXLST=RDJFLIST,       X\n               MACRF=(PM),RECFM=FB\nJCLIN    DCB   DDNAME=JCLIN,DSORG=PS,LRECL=80,MACRF=(GM),              X\n               RECFM=FB,EODAD=ENDJCL,EXLST=RDJFLIST\nENDJCLIN DCB   DDNAME=ENDJCLIN,DSORG=PS,LRECL=80,MACRF=(GM),           X\n               RECFM=FB,EODAD=ENDENDJ,EXLST=RDJFLIST\n*\n*DSNAP   DCB   DDNAME=DDSNAP,DSORG=PS,LRECL=125,BLKSIZE=1632,\n*              MACRF=(W),RECFM=VBA\n         PRINT GEN\nRDJFLIST DC    X'07',AL3(JFCBAREA)\nJFCBAREA DC    176X'0'\n         SPACE 3\n         LTORG\n         EQUATE                         REGISTER EQUATES\n         PRINT NOGEN\n*        DSECTS FOR MAPPING MACROS\n*\n*  DSECT FOR HEADER CARD\nHDR      DSECT\n         COPY  BLKCHG\n* DCB DSECT    GOOD FOR PS AND PO DATASETS ON DA OR TA\n         DCBD  DSORG=(PS,PO),DEVD=(DA,TA)\n* DSCB1 DSECT  GOOD FOR FORMAT1 DSCBS\n         IECSDSL1 1\n* JFCB DSECT\nJFCB     DSECT\n         IEFJFCBN LIST=YES\n         PRINT GEN\n         END   DLXTRANS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLXTRT": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00A\\x00A\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "DELUXE"}, "text": "DLXTRT   CSECT\n         STM   R14,R12,12(R13)\n         LR    R11,R15\n         USING DLXTRT,R11\n         ST    R13,SAVEAREA+4\n         LR    R6,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R6)\n* END OF PROLOUGE\n         OPEN  (INOTDCB,(UPDAT))    OPEN DS FOR UPDATE\n         LA    R7,INOTDCB           ESTABLISH ADDRESABLITY\n         USING IHADCB,R7            TO THE DCB THRU THE DSECT\nLOOP     GET   INOTDCB              GET THE ADDRESS OF A RECORD\n         LR    R6,R1                STORE IT IN R6\n         XR    R5,R5                ZERO OUT R5\n         LH    R5,DCBLRECL          SET LENGTH OF RECORD IN R5\n         BCTR  R5,R0                DECREMENT BY ONE FOR INST LNGTH\n         EX    R5,TRINST            TRANSLATE LOWER TO UPPER CASE\n         LR    R1,R6                RESTORE R1 IF FOULED\n         PUTX  INOTDCB              REWRITE THE RECORD\n         B     LOOP\nCLOSIT   CLOSE (INOTDCB)\n* BEGINNING OF EPILOUGE\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         RETURN RC=0\n* END OF EPILOUGE\nTRINST   TR    0(0,R6),TTAB\nINOTDCB  DCB   DDNAME=INOUT,DSORG=PS,EODAD=CLOSIT,MACRF=(GL,PL),DEVD=DA\nSAVEAREA DC    18F'0'\nTTAB     DS    0CL256\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'\n         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         DCBD  DSORG=LR\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   DLXTRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXTSO": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00p\\x00p\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 112, "newlines": 112, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXTSO - TSO SYSTEM ENFORCEMENT'\n***********************************************************************\n*\n*        MODULE NAME: DLXTSO\n*\n*        DESCRIPTION: TSO SYSTEM ENFORCEMENT\n*\n*        FUNCTION: RESTRICT UNAUTHORIZED USERS FROM ACCESSING TSO\n*                  ON A CPU WHICH IS DESIGNATED FOR BATCH PROCESSING\n*\n*        OPERATION:\n*              SAVE REGISTERS AND ESTABLISH ADDRESSABILITY\n*              GETMAIN DYNAMIC STORAGE\n*              OBTAIN SYSID\n*              PERFORM RACHECK FOR APPL OF SYSID\n*              SET RETURN CODE\n*              FREEMAIN DYNAMIC STORAGE\n*              RESTORE REGISTERS\n*              RETURN\n*\n*        MACROS: SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN, RACHECK\n*\n*        MAPPING MACROS: CVT, IEESMCA\n*\n*        ASSEMBLER OPTIONS: LIST,RENT\n*\n*        LINKAGE EDITOR OPTIONS: LET,LIST,XREF,RENT,REUS,REFR,AC=1\n*              (RESIDES IN SYS1.PPLINK)\n*\n*        CHANGE ACTIVITY: 12/10/86  WRITTEN                      JWC\n*\n***********************************************************************\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nDLXTSO   CSECT\n         SAVE  (14,12),,DLXTSO_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING DLXTSO,R12              ESTABLISH PGM ADDRESSABILITY\n         GETMAIN R,LV=WORKLEN\n*                                      GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n*                                      IN CURRENT SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  R13 - ADDRESS OF GETMAINED AREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*        OBTAIN SYSTEM ID\n***********************************************************************\nSYSID    DS    0H\n         L     R2,CVTPTR               R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABLITY TO CVT\n         L     R2,CVTSMCA              R2 - ADDRESS OF SMCA\n         USING SMCABASE,R2             ESTABLISH ADDRESSABLITY TO SMCA\n         LA    R3,SMCASID              R3 - ADDRESS OF 4 CHAR SYSID\n***********************************************************************\n*        PERFORM RACHECK FOR CLASS OF 'APPL'\n***********************************************************************\nRACHECK  DS    0H\n         MVC   RACLIST(INITLEN),INITDATA    STATIC INFO TO DYNAMIC FORM\n         RACHECK ENTITY=((R3)),CLASS=APPL,LOG=ASIS,                    +\n               MF=(E,RACLIST)          RACHECK FOR CLASS = 'APPL'\n***********************************************************************\n*        FREEMAIN DYNAMIC STORAGE, FREE REGISTERS AND RETURN\n***********************************************************************\nFREEMAIN DS    0H\n         LR    R2,R15                  R2 - SAVE RACHECK RETURN CODE\n         LR    R3,R13                  R3 - ADDRESS OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN R,LV=WORKLEN,A=(R3)\n*                                      FREEMAIN DYNAMIC STORAGE\n         LR    R15,R2                  R15 - RESTOR RACHECK RETURN CODE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nAPPL     DS    0H\n         DC    AL1(4)                  LENGTH OF CLASSNAME\n         DC    C'APPL'                 CLASSNAME FOR RACHECK MACRO\n***********************************************************************\n*        INITIATIALIZATION DATA FOR PORTION OF GETMAIN'D AREA\n***********************************************************************\nINITDATA RACHECK MF=L                  LIST FORM OF RACHECK MACRO\nINITLEN  EQU   *-INITDATA\n***********************************************************************\n*        DSECT FOR COMMUNICATIONS VECTOR TABLE\n***********************************************************************\n         CVT DSECT=YES\n         EJECT\nDLXTSO   CSECT\n***********************************************************************\n*        DSECT FOR SMF CONTROL AREA\n***********************************************************************\n         IEESMCA\n         EJECT\nDLXTSO   CSECT\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         LTORG\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     DLXTSO SAVE AREA\nRACLIST  DS    CL(INITLEN)             LIST FORM OF RACHECK MACRO\nWORKLEN  EQU   *-WORKAREA\n         END   DLXTSO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DLXVVDS": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01R\\x01R\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 338, "newlines": 338, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLXVVDS  -- VVDS CLEANUP PROGRAM'\n*\n*     THIS PROGRAM IS USED TO CREATE JCL THAT WILL CLEAN UP\n*     THE CATALOG ENTRIES FOUND IN THE FIRST RECORD OF A VVDS.\n*\n*         REGISTER USAGE\n*             R0  - STANDARD\n*             R1  - \"\n*             R2  - RACF CHECK THEN WORK\n*             R3  - RPL WORK AREA\n*             R4  - GETMAIN AREA\n*             R5  - STORE RPL ADDRESS\n*             R6  - STORE ACB ADDRESS\n*             R7  - WORK\n*             R8  - WORK\n*             R9  - STORE PARM VALUE AND THEN WORK\n*             R10 - WORK\n*             R11 - STORE RECORD LENGTH\n*             R12 - BASE REGISTER\n*             R13 - STANDARD\n*             R14 -    \"\n*             R15 -    \"\n*\n*     PROGRAM LINK-EDIT VALUES\n*      AC=1   (RACF APPL CHECK)\n*\n*   SAMPLE JCL TO RUN DLXVVDS JOB\n*   NOTE:  PARM VALUE -  VOLSER OF VOLUME YOU ARE WORKING ON\n****************************************************************\n**  //DLXVVDS  JOB (GEE1,0101),MSGLEVEL=(2,0),CLASS=S,\n**  //         MSGCLASS=A,USER=SYSPGM,PASSWORD=????????\n**  /*ROUTE XEQ ADMIN\n**  /*ROUTE PRINT ADMIN.SYSPGM\n**  //STEP1   EXEC PGM=DLXVVDS,PARM='DLXST7'\n**  //SYSPRINT DD  SYSOUT=*\n**  //SYSUT1   DD  DSN=SYS1.VVDS.VDLXST7,DISP=SHR,\n**  //         UNIT=3380,VOL=SER=DLXST7\n**  //SYSUT2   DD  DSN=SYSP.MVSXA.CNTL(DELVVDS),DISP=SHR\n****************************************************************\nDLXVVDS  CSECT\n         SAVE  (14,12),,VVDS_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING DLXVVDS,R12              TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R10,R13                  SAVE IT IN R10\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R10)               STORE OUR SAVEAREA ADDR IN OS\n         L     R9,0(R1)                 LOAD ADDRESS OF PARAMETERS\n*   BEGINNING OF RACF CHECKING\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n*\n*  IF USER HAS SPECIAL ATTRIBUTE, EXIT WITHOUT FURTHER CHECKING\n*\n         L     R2,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2\n         USING ASXB,R2                 TELL ASSEMBLER\n         L     R2,ASXBSENV             GET ADDRESS OF ACEE\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BO    ENDRACF                 IF NOT, CHECK FURTHER\n         DROP  R2                      DROP ASXB ADDRESSABILITY\n         RACHECK ENTITY=PROGNAME,CLASS='APPL'\n         LTR   R15,R15\n         BNZ   ERR99\nENDRACF  EQU   *\n         OPEN  (SYSPRINT,OUTPUT),MF=(E,EX1)  OPEN OUTPUT PRINT FILE\n         LTR   R15,R15\n         BNZ   ERRSYS\n         OPEN  (SYSUT2,OUTPUT),MF=(E,EX1)  OPEN OUTPUT JCL FILE\n         LTR   R15,R15                 ERROR WHEN OPENING FILE?\n         BNZ   ERR07                   IF SO, BRANCH\n         LH    R2,0(R9)                LENGTH OF PARM TO R2\n         LTR   R2,R2                   CHECK FOR NO PARM\n         BZ    ERR00                   IF NONE GET MESSAGE AND EXIT\n         LA    R9,2(R9)                BUMP PAST LENGTH\n         MVC   VOLNAME,0(R9)           MOVE IN VOLUME SERIAL NAME\n* END OF PROLOGUE\nOPENDD   EQU   *\nGETACB   GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               DDNAME=SYSUT1,                                          X\n               MACRF=(ADR,SEQ,NRM,IN)\n         LTR   R15,R15\n         BNZ   ERR01\n         ST    R1,ACBADDR\n         LR    R6,R1\nOPENACB  OPEN  ((R6))                   OPEN THE ACB\n         LTR   R15,R15\n         BNZ   ERR03\n         B     GETSTOR\nSTORLEN  DC    A(5600)\nBUFRLEN  DC    A(5594)\nGETSTOR  L     R4,STORLEN\n         L     R11,BUFRLEN\n         GETMAIN R,LV=(R4)\n         LR    R2,R1\n         LA    R3,4(R2)\n*        TIME TO GENERATE RPL FOR UPDATE\nGETRPL   GENCB BLK=RPL,                                                X\n               ACB=(R6),                                               X\n               AM=VSAM,                                                X\n               AREA=(R3),                                              X\n               AREALEN=(R11),                                          X\n               OPTCD=(ADR,SEQ,MVE)\n         LTR   R15,R15\n         BNZ   ERR02\n         ST    R1,RPLADDR\n         LR    R5,R1                    LOAD ADDRESS OF RPL TO R5\n         GET   RPL=(R5)                RETRIEVE FIRST RECORD OF VVDS\n         LTR   R15,R15\n         BNZ   ERR02\n         LR    R2,R3\n         LA    R2,24(R2)\n         MVI   SPLINE,X'40'\nGETCAT1  EQU   *\n         CLC   0(7,R2),=C'CATALOG'     MAKE SURE ENTRY IS A CATALOG\n         BZ    GETCHK1                 IF NOT, GET OUT.\n         B     JOBJCL2\nCATLOOP  EQU   *\n         MVI   CATFLAG1,C'Y'           TURN 1ST CATALOG FLAG ON.\n         LA    R2,56(R2)  INCREMENT POINTER\n         CLC   0(7,R2),=C'CATALOG'    MAKE SURE ENTRY IS A CATALOG\n         BZ    GETCHK1                 IF NOT, GET OUT.\n         MVI   CATFLAG2,C'Y'\n         B     JOBJCL2\nGETCHK1  EQU   *\n         CLI   CATFLAG1,C'N'           IS THIS 1ST CATALOG NAME?\n         BE    JOBJCL1                 IF IS BRANCH TO JOBJCL1\n         B     JOBJCL2                 ELSE BRANCH TO JOBJCL2\nJOBJCL1  EQU *\n         MVC   CATNAME1,0(R2)         MOVE CATALOG ENTRY NAME\n         MVI   JCLLINE,X'40'           INITIALIZE JCL LINE\n         MVC   JCLLINE+1(79),JCLLINE   TO SPACES\n         MVC   JCL1,LINE01             MOVE 1ST PART OF JOB CARD\n         BAL   R9,CREATJCL             CREATE LINE 1\n         MVC   JCL1,LINE02             MOVE 2ND PART OF JOB CARD\n         BAL   R9,CREATJCL             CREATE LINE 2\n         MVC   JCL1,LINE03             MOVE 1ST ROUTE CARD\n         BAL   R9,CREATJCL             CREATE LINE 3\n         MVC   JCL1,LINE04             MOVE 2ND ROUTE CARD\n         BAL   R9,CREATJCL             CREATE LINE 4\n         MVC   JCL1,LINE05             MOVE EXEC CARD TO OUTPUT\n         BAL   R9,CREATJCL             CREATE LINE 5\n         MVC   JCL1(L'LINE05A),LINE05A  MOVE STEPCAT CARD TO OUTPUT\n         MVC   JCL1+L'LINE05A(L'CATNAME1),CATNAME1\n         BAL   R9,CREATJCL             CREATE LINE 5\n         MVC   JCL1,LINE06             MOVE SYSPRINT CARD TO OUTPUT\n         BAL   R9,CREATJCL             CREATE LINE 6\n         MVC   JCL1(L'LINE07),LINE07   MOVE VOLUME DD CARD TO OUTPUT\n         MVC   JCL1+L'LINE07(L'VOLNAME),VOLNAME\n         BAL   R9,CREATJCL             CREATE LINE 7\n         MVC   JCL1,LINE08             MOVE SYSIN CARD TO OUTPUT\n         BAL   R9,CREATJCL             CREATE LINE 7\nJOBJCL2  EQU *\n         CLI   CATFLAG1,C'N'           IS THIS 1ST CATALOG NAME?\n         BE    CATLOOP                 IF SO GET NEXT CATALOG NAME\n         MVC   CATNAME,0(R2)          MOVE CATALOG ENTRY NAME\n         CLI   CATFLAG2,C'N'           LAST CATALOG NAME FLAG\n         BE    CATMOVE\n         MVC   CATNAME,CATNAME1\nCATMOVE  EQU   *\n         MVC   JCL1(L'LINE09),LINE09   ADD LINE09 TO OUTPUT\n         MVC   JCL1+L'LINE09(L'VOLNAME),VOLNAME\n         LA    R7,JCLLINE\n         BAL   R8,NXTSPC\n         MVC   0(L'LINE10,R7),LINE10\n         BAL   R8,NXTSPC\n         MVC   0(L'CATNAME,R7),CATNAME\n         BAL   R8,NXTSPC\n         MVI   0(R7),C')'              ADD PARENTHESIS\n         LA    R7,1(R7)                INCREMENT POINTER\n         CLI   CATFLAG2,C'Y'\n         BE    NOSCRTCH\n         MVC   0(L'LINE11,R7),LINE11\nNOSCRTCH BAL   R9,CREATJCL             CREATE CONTROL ENTRY LINE\n         CLI   CATFLAG2,C'N'           LAST CATALOG NAME FLAG\n         BE    CATLOOP\n         B     CLOSEIT\nCLOSEIT  CLOSE ((R6))                  CLOSE FILE\n         LTR   R15,R15\n         BNZ   ERR04\n         CLOSE (SYSUT2),MF=(E,EX2)\n         CLOSE (SYSPRINT),MF=(E,EX2)\n* BEGINNING OF EPILOGUE\nRETURN0  EQU   *\n         LA    R15,0                    SET RETURN CODE TO 4\nRETURNX  L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS\n* END OF EPILOGUE\n*********************************\n**   CREATE JCL                **\n*********************************\nCREATJCL EQU   *\n         PUT   SYSUT2,JCLLINE          WRITE INTO OUTPUT FILE\n         MVI   JCLLINE,X'40'           RESET JCL LINE\n         MVC   JCLLINE+1(79),JCLLINE   TO SPACES\n         BR    R9\n************************************\n**   POINT TO NEXT SPACE ON LINE  **\n************************************\nNXTSPC   EQU   *\n         LA    R7,1(R7)                 INCREMENT POINTER\n         CLC   0(4,R7),=C'    '         CHECK FOR SPACE\n         BNE   NXTSPC                   LOOP UNTIL SPACE IS FOUND\n         BR    R8                       RETURN\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nPROGNAME DC    CL8'DLXVVDS '            PROGRAM NAME FOR RACF\nCATFLAG1 DC    CL1'N'                   SET 1ST CATALOG NAME FLAG\nCATFLAG2 DC    CL1'N'                   SET END OF CATALOG LIST FLAG\nVOLNAME  DC    CL6' '                   HOLD AREA FOR VOLUME SERIAL\nCATNAME1 DC    CL25'                         ' AREA FOR CATALOG NAME\nCATNAME  DC    CL25'                         ' AREA FOR CATALOG NAME\nACBADDR  DS    F                        ADDRESS OF ACB\nRPLADDR  DS    F                        ADDRESS OF RPL\nRECADDR  DS    F                        ADDRESS OF RECORD WITHIN BUFFER\nRECLEN   DS    F                        ADDRESS OF RECORD WITHIN BUFFER\nERRSYS   EQU   *\n         WTO   'ERROR OPENING SYSPRINT FILE',ROUTCDE=(11)\n         LA    R15,16\n         B     RETURNX\nERR00    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR00        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR01    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR01        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR02    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR02        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR03    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR03        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR04    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR04        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR05    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR05        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR06    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR06        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR07    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR07        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         LA    R15,12\n         B     RETURNX\nERR99    EQU   *\n         MVI   SPLINE,X'40'\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   PRTERR,ERROR99        GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE TO PRINT FILE\n         ABEND X'913',,STEP     ABEND WITH USER 913 AND ABEND USER\n*********************************\n**   ERROR MESSAGES            **\n*********************************\nERROR00  DC  CL50'DLXVVDS00  NO VOLUME PARM SPECIFIED               '\nERROR01  DC  CL50'DLXVVDS01  GENCB FOR AN VVDS ACB OPEN FAILED      '\nERROR02  DC  CL50'DLXVVDS02  GENCB FOR AN RPL FAILED                '\nERROR03  DC  CL50'DLXVVDS03  OPEN FOR AN ACB FAILED                 '\nERROR04  DC  CL50'DLXVVDS04  CLOSE OF AN ACB FAILED                 '\nERROR05  DC  CL50'DLXVVDS05  GET FOR AN ACB FAILED                  '\nERROR06  DC  CL50'DLXVVDS06  ENTRY NOT A CATALOG                    '\nERROR07  DC  CL50'DLXVVDS07  ERROR OPENING SYSUT2 FILE              '\nERROR99  DC  CL50'DLXVVDS99  DLXPRIME NOT AUTHORIZED FOR YOUR USERID'\n*********************************\n**   JCL LINE ENTRIES          **\n*********************************\nLINE01   DC    CL50'//DLXVVDS  JOB (GEE1,0101),MSGCLASS=A,CLASS=S,    '\nLINE02   DC    CL50'//  MSGLEVEL=(1,1),USER=SYSPGM,PASSWORD=????????  '\nLINE03   DC    CL50'/*ROUTE  XEQ ADMIN                                '\nLINE04   DC    CL50'/*ROUTE  PRINT ADMIN.SYSPGM                       '\nLINE05   DC    CL50'//STEP1   EXEC PGM=IDCAMS                         '\nLINE05A  DC    CL28'//STEPCAT  DD  DISP=SHR,DSN='\nLINE06   DC    CL50'//SYSPRINT DD  SYSOUT=*                           '\nLINE07   DC    CL46'//DD1      DD  UNIT=SYSALLDA,DISP=SHR,VOL=SER='\nLINE08   DC    CL50'//SYSIN    DD  *                                  '\nLINE09   DC    CL20'  DELETE SYS1.VVDS.V'\nLINE10   DC    CL6'  CAT('\nLINE11   DC    CL10' NOSCRATCH'\nJCLLINE  DS    0CL80                    OUTPUT JCL LINE ENTRY\nJCL1     DS    CL50\n         DS    CL30\nSPLINE   DS    0CL121                   OUTPUT PRINT LINE ENTRY\n         DS    CL1\nPRTERR   DS    CL50\n         DS    CL70\nEX1      OPEN  (,),MF=L\nEX2      CLOSE (,),MF=L\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,LRECL=80,MACRF=(PM)\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=121,MACRF=(PM)\n         PRINT NOGEN\n         PRINT GEN\n         LTORG\n         PRINT NOGEN\n         EQUATE                         REGISTER EQUATES\n*\n*  DSECTS\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\n*\n         PRINT GEN\n         END   DLXVVDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DLX3480": {"ttr": 5383, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x04[\\x04[\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1115, "newlines": 1115, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DLX3480 - COPY DATA FROM MAGNETIC TAPE TO CASSETTE'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = DLX3480                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = TRANSFER DATA FROM CATALOGED         *\n*                MAGNETIC TAPES OR CASSETTES TO A CASSETTE TAPE.      *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CHECKS THE TMC FOR INFORMATION CONNECTED TO          *\n*                THE INPUT TAPE.  THIS INFORMATION IS THEN            *\n*                CHECKED AGAINST THE CATALOG TO SEE IF A              *\n*                SPECIFIED FILE SHOULD BE COPIED INTO A TABLE         *\n*                OR PASSED.  ONCE ALL THE FILES FROM THE INPUT        *\n*                TAPES HAVE BEEN PROCESSED THEN THREE SETS OF JCL     *\n*                WILL BE GENERATED. THE FIRST SET WILL UNCATALOG      *\n*                THE FILES FOUND ON THE INPUT TAPE.  THE SECOND       *\n*                SET WILL CONTAIN THE JCL TO DO THE ACTUAL COPY       *\n*                FROM TAPE TO TAPE OR FROM TAPE TO CASSETTE. THE      *\n*                FATAR PROGRAM IS USED.     THE THIRD SET CONTAINS    *\n*                JCL TO RECATALOG THE FILES FOUND ON THE INPUT TAPE;  *\n*                ONLY THE FILES THAT WERE ORIGINALLY CATALOGED WILL   *\n*                BE RECATALOGED.  THIS THIRD SET IS TO BE USED ONLY   *\n*                IN A RECOVERY SITUATION.                             *\n*                                                                     *\n*                OPERATION =                                          *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 4  = LINKAGE & WORK REGISTERS     *\n*                    REGISTERS 5 TO 9  = WORK REGISTERS               *\n*                    REGISTER  10      = ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTER  11      = ADDRESSABILITY TO DLX3480    *\n*                    REGISTER  12      = ADDRESSABILITY TO DLX3480    *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                GETMAIN, OPEN, CLOSE, PUT, FREEMAIN,                 *\n*                OPENTMC, GETTMC, GETDSNB                             *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                01/14/85  WRITTEN. MK                                *\n*                03/25/86  MODIFIED FOR MULTIPLE INPUT VOLUMES.  LH.  *\n*                01/06/87  MODIFIED TO USE FORM TYPE 'DL34'           *\n*                          ON THE SYSPRINT OUTPRINT. MK.              *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*  ALL DATASETS ON A SINGLE VOLUME:                                   *\n*                                                                     *\n*   //JOBNAME JOB (GEB1,OPER),'PROG NAME',CLASS=I,MSGCLASS=A,         *\n*   //        MSGLEVEL=(1,1),USER=TPCJOB,PASSWORD=????????            *\n*   //STEP1 EXEC  PGM=DLX3480,                                        *\n*   //      PARM='IVOL=$00001,IUNIT=TAPE62,OUNIT=TAPE3480,JOBSUF=X,   *\n*   //            DEBUG=Y'                                            *\n*   //JCL1  DD    DSN=MVSP.DLX3480.OPERLIB(C&IVOL),DISP=OLD           *\n*   //JCL2  DD    DSN=MVSP.DLX3480.OPERLIB(D&IVOL),DISP=OLD           *\n*   //JCL3  DD    DSN=MVSP.DLX3480.OPERLIB(R&IVOL),DISP=OLD           *\n*                                                                     *\n* OR ALL DATASETS ON SEVERAL VOLUMES:                                 *\n*                                                                     *\n*   //JOBNAME JOB (GEB1,OPER),'PROG NAME',CLASS=I,MSGCLASS=A,         *\n*   //        MSGLEVEL=(1,1),USER=TPCJOB,PASSWORD=????????            *\n*   //STEP1 EXEC  PGM=DLX3480                                         *\n*   //SYSIN DD    *                                                   *\n*       (80-BYTE SYSIN RECORDS GO HERE)                               *\n*     | IUNIT | OUNIT | JOBSUF | DEBUG |                              *\n*     | IVOL | IVOL | IVOL | IVOL | IVOL | IVOL | IVOL | IVOL | ...   *\n*                                                                     *\n*     IUNIT: 8 BYTES                                                  *\n*     OUNIT: 8 BYTES                                                  *\n*     JOBSUF: 1 BYTE                                                  *\n*     DEBUG: 1 BYTE                                                   *\n*     IVOL: 6 BYTES (12 PER RECORD)                                   *\n*                                                                     *\n*   //JCL1  DD    DSN=MVSP.DLX3480.OPERLIB(C&IVOL),DISP=OLD           *\n*   //JCL2  DD    DSN=MVSP.DLX3480.OPERLIB(D&IVOL),DISP=OLD           *\n*   //JCL3  DD    DSN=MVSP.DLX3480.OPERLIB(R&IVOL),DISP=OLD           *\n*                                                                     *\n*    NOTE:  THE DEBUG PARM IS NOT USED IN NORMAL RUNS OF THIS JOB     *\n*           IT IS USED ONLY WHEN A PROBLEM HAS OCCURRED AND           *\n*           ADDITIONAL INFORMATION IS NEEDED TO DIAGNOSE THE PROBLEM. *\n*                                                                     *\n*    NOTE:  DO NOT USE A COMBINATION OF PARM DATA AND SYSIN CARDS.    *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\nDLX3480  CSECT\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15\n         USING DLX3480,R12             ESTABLISH ADDRESSABILITY\n         LA    R11,4095(R12)\n         USING DLX3480+4095,R11        GET ADDRESSABILITY TO REST\n         LA    R10,SAVEAREA            GET OUR SAVEAREA ADDRESS\n         ST    R13,SAVEAREA+4          ESTABLISH BACK SA POINTERS\n         ST    R10,8(R13)              ESTABLISH FORWARD SA POINTERS\n         LR    R13,R10                 ESTABLISH SAVEAREA ADDRESS\n         LR    R2,R1                   SAVE PARAMETER REGISTER\n*\n*  GET PARMS TO DETERMINE INPUT AND OUTPUT FILES TO BE PROCESSED.\n*\nGETPARM  EQU   *\n         MVI   DEBUG,C'N'              INITIALIZE DEBUG FLAG TO OFF\n         MVI   FIRSTFIL,C'Y'           FIRST FILE ON VOLUME\n         L     R5,0(R2)                GET PARM ADDRESS\n         LH    R3,0(R5)                SAVE PARM LENGTH\n         LTR   R3,R3                   ANY PARM DATA?\n         BZ    PARMEXIT                IF NOT, BRANCH TO SYSIN CHECK\n         LA    R5,2(R5)                SKIP PARM LENGTH FIELD\nGP05     EQU   *\n         LA    R4,PARMBUF              SET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\nGP10     EQU   *\n         CLI   0(R5),C','              DELIMITING COMMA?\n         BE    GP20                    IF SO, BRANCH\n         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER\n         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER\n         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER\n         BCT   R3,GP10                 LOOP BACK TIL DONE\nGP20     EQU   *\n         CLC   PARMBUF(6),=C'IUNIT='   CHECK FOR INPUT UNIT\n         BNE   GP22                    IF NOT, IGNORE IT\n         CLC   PARMBUF(12),=C'IUNIT=TAPE62'  CHECK IF IT IS TAPE62\n         BNE   GP20A\n         MVC   IUNIT(6),PARMBUF+6\n         B     GP30                    CONTINUE\nGP20A    EQU   *\n         MVC   IUNIT(8),PARMBUF+6\n         B     GP30                    CONTINUE\nGP22     EQU   *\n         CLC   PARMBUF(5),=C'IVOL='    CHECK FOR INPUT VOLSER\n         BNE   GP24                    IF NOT, IGNORE IT\n         MVC   IVOL,PARMBUF+5\n         B     GP30                    CONTINUE\nGP24     EQU   *\n         CLC   PARMBUF(6),=C'OUNIT='   CHECK FOR OUTPUT UNIT\n         BNE   GP26                    IF NOT, IGNORE IT\n         CLC   PARMBUF(12),=C'OUNIT=TAPE62'  CHECK IF IT IS TAPE62\n         BNE   GP24A\n         MVC   OUNIT(6),PARMBUF+6\n         B     GP30                    CONTINUE\nGP24A    EQU   *\n         MVC   OUNIT(8),PARMBUF+6\n         B     GP30                    CONTINUE\nGP26     EQU   *\n         CLC   PARMBUF(7),=C'JOBSUF='  CHECK FOR JOB SUFFIX\n         BNE   GP28                    IF NOT, IGNORE IT\n         MVC   JOBSUF,PARMBUF+7\n         B     GP30                    CONTINUE\nGP28     EQU   *\n         CLC   PARMBUF(6),=C'DEBUG='   CHECK FOR DEBUG PARM\n         BNE   GP30                    IF NOT, IGNORE IT\n         MVI   DEBUG,C'Y'              TURN DEBUG FLAG ON.\nGP30     EQU   *\n         LA    R4,PARMBUF              RESET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\n         LTR   R3,R3                   ANY MORE PARMS?\n         BZ    GP40                    IF NOT, EXIT\n         LA    R5,1(R5)                IF SO, SKIP COMMA\n         B     GP10                    AND LOOP BACK\nPARMEXIT EQU   *\n         SLR   R3,R3                   CLEAR R3\n         L     R2,16                   ADDRESS OF CVT\n         L     R2,0(R2)                ADDRESS OF TCB ADDRESS WORDS\n         L     R2,4(R2)                ADDRESS OF CURRENT TCB\n         L     R2,12(R2)               ADDRESS OF THIS TCB'S TIOT\n         LA    R2,24(R2)               ADDRESS OF START OF DD ENTRY\n         IC    R3,0(R2)                LENGTH OF THIS ENTRY\nFINDDD1  EQU   *\n         LTR   R3,R3\n         BZ    ERR10                   IF NO DD CARDS, REPORT ERROR\n         CLC   4(8,R2),=CL8'SYSIN'     IS IT SYSIN?\n         BE    GOTSYSIN\n         AR    R2,R3                   BUMP TO NEXT DD ENTRY\n         IC    R3,0(R2)                GET LENGTH OF ENTRY\n         B     FINDDD1                 LOOP\nGOTSYSIN EQU   *\n         OPEN  (INPUT,(INPUT))         OPEN SYSIN FILE\n         LTR   R15,R15                 ERROR OPENING FILE?\n         BNZ   ERR116                  REPORT IT\nGETCARD  GET   INPUT,INPUTBUF          IF OK, GET CARD\n         CLI   SYSINSW,C'0'            IS THIS THE FIRST SYSIN CARD?\n         BE    DOFIRST                 STORE UNIT NAMES, ETC.\n         LA    R2,INPUTBUF\n         ST    R2,IVOLADDR             STORE POINTER OF 1ST IVOL NAME\n         SLR   R3,R3                   CLEAR REGISTER\n         STH   R3,INCR                 SET INCREMENT TO BEG OF CARD (0)\n         B     NXTPFIL                 IF NOT FIRST CARD, GO TO NXTPFIL\nDOFIRST  EQU   *                       IF FIRST CARD, SAVE FIELDS\n         MVC   IUNIT,INPUTBUF\n         MVC   OUNIT,INPUTBUF+8\n         MVC   JOBSUF,INPUTBUF+16\n         CLC   INPUTBUF+17(1),=C'Y'\n         BNE   SETSW\n         MVC   DEBUG,INPUTBUF+17\nSETSW    EQU   *\n         MVI   SYSINSW,C'1'            NOW WORKING ON SYSIN IVOL CARDS\n         B     GETCARD\nNXTPFIL  EQU   *                       IF IVOL CARD,\n         LH    R3,INCR\n         CH    R3,LIMIT                CHECK COUNT. 12 DONE FROM CARD?\n         BE    GETCARD                 IF SO, GET A NEW RECORD\n         L     R2,IVOLADDR             OTHERWISE, RESTORE POINTER\n         CLC   0(4,R2),=CL6'      '    IF SPACES IN CARD, DONE W/ SYSIN\n         BE    CLOSCARD                CLOSE FILE & CREATE JCL\n         MVC   IVOL,0(R2)              SAVE VOLUME NAME\n         AH    R3,=H'1'                INCREMENT COUNTER\n         STH   R3,INCR                 SAVE COUNTER FOR NEXT CARD\n         LA    R2,6(R2)\n         ST    R2,IVOLADDR             STORE POINTER FOR NEXT IVOL\n         B     GP40\nCLOSCARD EQU   *\n         CLOSE INPUT\n         B     CRETJCL1\nGP40     EQU   *\n         LA    R2,IVOL                 LOAD INPUT VOLSER\n         CLC   GOTMAIN,=C'Y'           DO ONLY IF GETMAIN NOT DONE YET\n         BE    GETTMC\n         OPEN  (SYSPRINT,OUTPUT),MF=(E,EX1)  OPEN SYSPRINT DATASET\n         LTR   R15,R15\n         BNZ   ERR100\n         GETMAIN RU,LV=16200,BNDRY=PAGE,SP=12\n         ST    R1,CATLIST              SAVE POINTER TO AREA\n         L     R10,CATLIST\n         OPENTMC NOTACT=ERR20,MF=S\n         LTR   R15,R15\n         BNZ   ERR40\n         MVI   GOTMAIN,C'Y'            SET GETMAIN FLAG TO 'DONE'\nGETTMC   EQU   *\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   SPLINE+1(35),LINE9A\n         MVC   SPLINE+36(6),IVOL\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         GETTMC (R2),TMREC,ERR30,ENQ=NO\n         LTR   R15,R15\n         BNZ   ERR50\n         TM    TMFLAG1,X'04'           CHECK IF IVOL IS SCRATCH\n         BO    ERR140                  IF SO, DISPLAY MSG AND EXIT\n         LA    R3,0\n         CH    R3,NUMDSNB              DOES VOL CONTAIN MULTI-FILES\n         BNE   TMC2                    IF SO, SKIP VOLSEQ CHECK\n         LA    R3,1\n         CH    R3,TMVOLSEQ             CHECK VOLSEQ EQUAL TO 1\n         BNE   ERR90                   GOTO ERR90 IF VOLSEQ NE 1\nTMC2     EQU   *\n         MVC   OUTDSN,TMDSN            GET DSN NAME\n         MVC   TBDSN,TMDSN             GET DSN NAME\n         MVC   TBEXPDT,TMEXPDT         GET EXPDT\n         MVC   TBFSQN,ISEQ             GET FILE SEQUENCE NUMBER\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVI   FLAGLOC,C'N'            INITIALIZE LOCATE FLAG\n         BAL   R9,LOCAT                BRANCH FOR CATALOG SEARCH\n         LH    R3,NUMDSNB              LOAD NUMBER OF DSNB TO R3\n         LTR   R3,R3                   ANY DSNB\n         BZ    ERR60                   SKIP DSNB CHECK\n         MVC   DSNBNEXT,TMDSNB\nDSNBCK1  EQU   *\n         GETDSNB DSNBTST,DSNBNEXT,(R6),ENQ=NO\n         LTR   R15,R15\n         BNZ   ERR60\n         LR    R5,R6                   SAVE CONTENTS OF R6\n         LA    R4,DSNBREC              SET POINTER INTO DSNB\n         MVI   DSNBREC,X'40'           CLEAR DSNBREC\n         MVC   DSNBREC+1(L'DSNBREC-1),DSNBREC\n         MVC   0(100,R4),0(R5)         MOVE DSNB RECORD\n         MVC   OUTDSN,DSNBDSN          GET DSN NAME FOR PRINTOUT\n         MVC   TBDSN,DSNBDSN           GET DSN NAME FOR LOCATE\n         MVC   TBEXPDT,DSNBEXDT        GET EXPDT\n         MVC   TBFSQN,DSNBFSN          GET FILE SEQUENCE NUMBER\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         BAL   R9,LOCAT                BRANCH FOR CATALOG SEARCH\n         BCT   R3,DSNBCK1\nLOOPER   EQU   *\n         CLI   SYSINSW,C'1'            IF SYSIN USED\n         BE    NXTPFIL                 GET NEXT TAPE FILE NAME\n*********************************************\n*** CREATE JCL FOR JCL1   FILE.\n*********************************************\nCRETJCL1 EQU   *\n         MVI   FLAGLOC,C'Y'            TURN LOCATE FLAG ON\n         L     R9,CATLIST\n         BAL   R7,CHCKTABL             CHECK IF ANY ENTRIES IN TABLE\n         OPEN  (JCL1,OUTPUT),MF=(E,EX1) OPEN OUTPUT JCL FILE.\n         LTR   R15,R15                 ERROR WHEN OPENING FILE?\n         BNZ   ERR110                  IF SO, BRANCH.\n         BAL   R7,CNVTTABL\n         MVI   JCLLINE,X'40'           INITIALIZE JCL PRINT LINE\n         MVC   JCLLINE+1(79),JCLLINE   TO SPACES\n         ZAP   SEQNUM,ISEQNUM          INITIALIZE SEQNUM TO ZERO\n         MVC   JCLLINE(9),LINE0B       MOVE JOB NAME TO 1ST JOB CARD\n         MVC   JCLLINE+9(1),JOBSUF     MOVE JOBSUF PARM TO JOB NAME\n         MVC   JCLLINE+12(35),LINE0D   MOVE REST OF 1ST JOB CARD\n         BAL   R8,PRNTJCL1             PRINT 1ST LINE\n         MVC   JCLLINE(52),LINE0E      MOVE 2ND LINE OF JOB CARD\n         BAL   R8,PRNTJCL1             PRINT 2ND LINE\n         B     JCL11\nJCL10    EQU   *\n         LA    R9,49(R9)               INCREMENT TO NEXT TABLE ENTRY\n         CLC   0(2,R9),=X'0000'        CHECK FOR LAST ENTRY OF TABLE\n         BE    CRETJCL2\n         BAL   R7,CNVTTABL\nJCL11    EQU   *\n         MVC   TBDSN,SAVEDSN\n         BAL   R7,LOCAT\n         BAL   R7,SEQNUMBR             GET SEQ# AND STEP NUMBER\n         MVC   JCLLINE(2),=C'//'       SET COLS 1 & 2 OF JCL LINE\n         MVC   JCLL1(4),=C'STEP'       SET UP JOB STEP LINE\n         MVC   JCLL1+4(L'NUM),NUM      GIVE STEP A SEQUENCE NUMBER\n         MVC   JCLCOL1(L'LINE1A),LINE1A SET UP EXEC LINE FOR FATAR\n         BAL   R8,PRNTJCL1             PRINT OUTPUT JCL EXEC LINE\n         MVC   JCLL1(L'LINE2A),LINE2A  SET UP SYSPRINT LINE\n         BAL   R8,PRNTJCL1             PRINT OUTPUT JCL SYSPRINT LINE\n         MVC   JCLL1(7),=C'TAPEOUT'    SET UP FIRST TAPEOUT LINE\n         MVC   JCLCOL1(L'LINE3A),LINE3A ADD TAPE DATA SET NAME\n         MVC   JCLCOL1+L'LINE3A(L'SAVEDSN),SAVEDSN\n         LA    R5,JCLCOL1\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              END LINE WITH A COMMA\n         BAL   R8,PRNTJCL1             PRINT OUTPUT JCL DD LINE\n         MVC   JCLCOL2(L'LINE3C),LINE3C ADD DATASET DISP\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              ADD COMMA\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVC   0(L'LINE4A,R5),LINE4A   PRINT UNIT PARAMETER\n         BAL   R6,NXTSPC\n         CLC   OUNIT(6),=C'TAPE62'     CHECK IF IT IS TAPE62\n         BE    JCL11A\n         MVC   0(L'OUNIT,R5),OUNIT     PRINT UNIT VALUE TAPE3480\n         B     JCL11B\nJCL11A   EQU   *\n         MVC   0(L'XUNIT,R5),OUNIT     PRINT UNIT VALUE TAPE62\nJCL11B   EQU   *\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              ADD COMMA\n         BAL   R8,PRNTJCL1             PRINT OUTPUT JCL DD LINE\n         CLC   FIRSTFIL,=C'Y'          FIRST FILE?\n         BNE   JCL12\n         MVC   JCLCOL2(L'LINE4B),LINE4B PRINT VOLUME PARAMETER\n         B     JCL13\nJCL12    EQU   *\n         MVC   JCLCOL2(L'LINE4E),LINE4E PRINT VOL PARAMETER WITH REF\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVC   0(L'REF#,R5),REF#       PRINT STEP# FOR REF PARAMETER\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVC   0(L'LINE4F,R5),LINE4F   PRINT REST OF REF PARAMETER\nJCL13    EQU   *\n         MVI   FIRSTFIL,C'N'           FOR FILES AFTER THE FIRST\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              ADD COMMA\n         BAL   R8,PRNTJCL1             PRINT OUTPUT JCL DD LINE\n         MVC   JCLCOL2(L'LINE4C),LINE4C ADD TAPE LABEL\n         MVC   JCLCOL2+L'LINE4C(L'NUM),NUM  ADD SEQ#\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              ADD COMMA\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVC   0(L'LINE4D,R5),LINE4D   PRINT  EXPDT ENTRY\n         BAL   R6,NXTSPC\n         MVC   0(L'EXPDT,R5),EXPDT\n         BAL   R6,NXTSPC\n         MVI   0(R5),C')'              PUT PARENTHESIS\n         BAL   R8,PRNTJCL1\nJCL14    EQU   *\n         MVI   JCLL1,X'40'             CLEAR OUTPUT LINE\n         MVC   JCLL1+1(77),JCLL1\n         MVC   JCLL1(6),=C'TAPEIN'     SET UP FIRST TAPEIN LINE\n         MVC   JCLCOL1(L'LINE3A),LINE3A ADD TAPE DATA SET NAME\n         MVC   JCLCOL1+L'LINE3A(L'SAVEDSN),SAVEDSN\n         LA    R5,JCLCOL1\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              PUT COMMA AT END\n         BAL   R8,PRNTJCL1\n         MVC   JCLCOL2(L'LINE3B),LINE3B ADD DATASET DISPOSITION\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              PUT COMMA AT END\n         BAL   R8,PRNTJCL1             PRINT OUTPUT LINE\n         MVC   JCLCOL2(L'LINE4A),LINE4A ADD DATASET UNIT PARAMETER\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         CLC   IUNIT(6),=C'TAPE62'     CHECK IF IT IS TAPE62\n         BE    JCL14A\n         MVC   0(L'IUNIT,R5),IUNIT     PRINT UNIT VALUE TAPE3480\n         B     JCL14B\nJCL14A   EQU   *\n         MVC   0(L'XUNIT,R5),IUNIT     PRINT UNIT VALUE TAPE62\nJCL14B   EQU   *\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              ADD COMMA\n         LA    R5,1(R5)                INCREMENT POINTER\nJCL15    EQU   *\n         LA    R7,CAMWORK\n         LA    R7,6(R7)\n         MVC   VOLUM,0(R7)\n         MVC   0(L'LINE4G,R5),LINE4G   PRINT VOLUME PARAMETER\n         BAL   R6,NXTSPC\n         CLC   FLAGMVOL,=C'Y'          IS THERE MULTI VOL\n         BE    JCL16\n         MVC   0(L'VOLUM,R5),VOLUM     PRINT VOLUME PARAMETER\n         BAL   R6,NXTSPC\n         B     JCL19\nJCL16    EQU   *\n         MVI   0(R5),C'('              ADD OPEN PARENTHESIS\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVC   0(L'VOLUM,R5),VOLUM     PRINT VOLUME PARAMETER\n         BAL   R6,NXTSPC\nJCL17    EQU   *\n         LA    R7,12(R7)               INCREMENT TO NEXT VOLSER\n         CLC   0(2,R7),=X'0000'        CHECK FOR NO ENTRY\n         BE    JCL18\n         MVI   0(R5),C','              ADD COMMA\n         BAL   R8,PRNTJCL1             PRINT OUTPUT JCL DD LINE\n         LA    R5,JCLCOL2\n         MVC   VOLUM,0(R7)\n         MVC   JCLCOL2(L'VOLUM),VOLUM  ADD NEXT VOLSER\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         B     JCL17\nJCL18    EQU   *\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         LA    R5,1(R5)                INCREMENT POINTER\nJCL19    EQU   *\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVI   0(R5),C','              ADD COMMA\n         BAL   R8,PRNTJCL1             PRINT OUTPUT JCL DD LINE\n         MVC   JCLCOL2(L'LINE4C),LINE4C ADD TAPE LABEL\n         MVC   JCLCOL2+L'LINE4C(L'SEQ#),SEQ# ADD SEQ#\n         LA    R5,JCLCOL2\n         BAL   R6,NXTSPC\n         MVI   0(R5),C','              ADD COMMA\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVC   0(L'LINE4D,R5),LINE4D   PRINT  EXPDT ENTRY\n         BAL   R6,NXTSPC\n         MVC   0(L'EXPDT,R5),EXPDT\n         BAL   R6,NXTSPC\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         BAL   R8,PRNTJCL1\n         MVC   JCLL1(L'LINE7A),LINE7A  SET UP SYSIN  LINE\n         BAL   R8,PRNTJCL1\n         B     JCL10                   CREATE JCL FOR JCL2 FILE\n*********************************************\n*** CREATE JCL FOR JCL2   FILE.\n*********************************************\nCRETJCL2 EQU   *\n         CLOSE (JCL1),MF=(E,EX2)\n         L     R9,CATLIST\n         BAL   R7,CHCKTABL             CHECK IF ANY ENTRIES IN TABLE\n         OPEN  (JCL2,OUTPUT),MF=(E,EX1) OPEN OUTPUT JCL FILE.\n         LTR   R15,R15                 ERROR WHEN OPENING FILE?\n         BNZ   ERR112                  IF SO, BRANCH.\n         BAL   R7,CNVTTABL\n         MVI   JCLL1,X'40'             INITIALIZE JCL PRINT LINE\n         MVC   JCLL1+1(77),JCLL1       TO SPACES\n         ZAP   SEQNUM,ISEQNUM          INITIALIZE SEQNUM TO ZERO\n         MVI   FLAGJCL2,C'N'           INITIALIZE 1ST JCL ENTRY\n         MVC   JCLLINE(9),LINE0A       MOVE JOB NAME TO 1ST JOB CARD\n         MVC   JCLLINE+9(1),JOBSUF     MOVE JOBSUF PARM TO JOB NAME\n         MVC   JCLLINE+12(35),LINE0D   MOVE REST OF 1ST JOB CARD\n         BAL   R8,PRNTJCL2             PRINT 1ST LINE\n         MVC   JCLLINE(52),LINE0E      MOVE 2ND LINE OF JOB CARD\n         BAL   R8,PRNTJCL2             PRINT 2ND LINE\n         B     JCL22\nJCL20    EQU   *\n         LA    R9,49(R9)               INCREMENT TO NEXT TABLE ENTRY\n         CLC   0(2,R9),=X'0000'        CHECK FOR LAST ENTRY OF TABLE\n         BE    CRETJCL3\n         BAL   R7,CNVTTABL\nJCL22    EQU   *\n         BAL   R7,SEQNUMBR             GET SEQ# AND STEP NUMBER\n         CLC   FLAGJCL2,=C'Y'          IS THIS THE 1ST ENTRY\n         BE    JCL24                   IF NOT, BRANCH\n         MVC   JCLLINE(2),=C'//'       SET COLS 1 & 2 OF JCL LINE\n         MVC   JCLL1(4),=C'STEP'       SET UP JOB STEP LINE\n         MVC   JCLL1+4(L'NUM),NUM      GIVE STEP A SEQUENCE NUMBER\n         MVC   JCLCOL1(L'LINE1B),LINE1B SET UP EXEC LINE FOR IDCAMS\n         BAL   R8,PRNTJCL2             PRINT OUTPUT JCL EXEC LINE\n         MVC   JCLL1(L'LINE2A),LINE2A  SET UP SYSPRINT LINE\n         BAL   R8,PRNTJCL2             PRINT OUTPUT JCL SYSPRINT LINE\n         MVC   JCLL1(L'LINE7B),LINE7B  SET UP SYSIN  LINE\n         BAL   R8,PRNTJCL2             PRINT OUTPUT JCL SYSPRINT LINE\n         MVC   JCLLINE(2),=C'  '       SET COLS 1 & 2 OF SYSIN INFO\n         MVI   FLAGJCL2,C'Y'           INITIALIZE 1ST JCL ENTRY\nJCL24    EQU   *\n         MVC   JCLL1(L'LINE8A),LINE8A START DELETE STATEMENT\n         MVC   JCLL1+L'LINE8A(L'SAVEDSN),SAVEDSN\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVC   0(L'LINE8B,R5),LINE8B   PRINT RECORD BLKSIZE\n         BAL   R8,PRNTJCL2             PRINT OUTPUT JCL DD LINE\n         B     JCL20                   CREATE JCL FOR JCL3 FILE\n*********************************************\n*** CREATE JCL FOR JCL3   FILE.\n*********************************************\nCRETJCL3 EQU   *\n         CLOSE (JCL2),MF=(E,EX2)\n         L     R9,CATLIST\n         BAL   R7,CHCKTABL             CHECK IF ANY ENTRIES IN TABLE\n         OPEN  (JCL3,OUTPUT),MF=(E,EX1) OPEN OUTPUT JCL FILE.\n         LTR   R15,R15                 ERROR WHEN OPENING FILE?\n         BNZ   ERR114                  IF SO, BRANCH.\n         BAL   R7,CNVTTABL\n         MVI   JCLL1,X'40'             INITIALIZE JCL PRINT LINE\n         MVC   JCLL1+1(77),JCLL1       TO SPACES\n         ZAP   SEQNUM,ISEQNUM          INITIALIZE SEQNUM TO ZERO\n         MVI   FLAGJCL3,C'N'           INITIALIZE 1ST JCL ENTRY\n         MVC   JCLLINE(9),LINE0C       MOVE JOB NAME TO 1ST JOB CARD\n         MVC   JCLLINE+9(1),JOBSUF     MOVE JOBSUF PARM TO JOB NAME\n         MVC   JCLLINE+12(35),LINE0D   MOVE REST OF 1ST JOB CARD\n         BAL   R8,PRNTJCL3             PRINT 1ST LINE\n         MVC   JCLLINE(52),LINE0E      MOVE 2ND LINE OF JOB CARD\n         BAL   R8,PRNTJCL3             PRINT 2ND LINE\n         B     JCL32\nJCL30    EQU   *\n         LA    R9,49(R9)               INCREMENT TO NEXT TABLE ENTRY\n         CLC   0(2,R9),=X'0000'        CHECK FOR LAST ENTRY OF TABLE\n         BE    PRTTBL1\n         BAL   R7,CNVTTABL\nJCL32    EQU   *\n         MVC   TBDSN,SAVEDSN\n         BAL   R7,LOCAT\n         BAL   R7,SEQNUMBR             GET SEQ# AND STEP NUMBER\n         CLC   FLAGJCL3,=C'Y'          IS THIS THE 1ST ENTRY\n         BE    JCL34                   IF NOT, BRANCH\n         MVC   JCLLINE(2),=C'//'       SET COLS 1 & 2 OF JCL LINE\n         MVC   JCLL1(4),=C'STEP'       SET UP JOB STEP LINE\n         MVC   JCLL1+4(L'NUM),NUM      GIVE STEP A SEQUENCE NUMBER\n         MVC   JCLCOL1(L'LINE1B),LINE1B SET UP EXEC LINE FOR IDCAMS\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL EXEC LINE\n         MVC   JCLL1(L'LINE2A),LINE2A  SET UP SYSPRINT LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL SYSPRINT LINE\n         MVC   JCLL1(L'LINE7B),LINE7B  SET UP SYSIN  LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL SYSPRINT LINE\n         MVC   JCLLINE(2),=C'  '       SET COLS 1 & 2 OF SYSIN INFO\n         MVI   FLAGJCL3,C'Y'           INITIALIZE 1ST JCL ENTRY\nJCL34    EQU   *\n         MVC   JCLL1(L'LINE8C),LINE8C START DEFINE STATEMENT\n         MVC   JCLL1+L'LINE8C(L'SAVEDSN),SAVEDSN\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVC   0(L'LINE8D,R5),LINE8D   PRINT DEVT(\n         MVC   L'LINE8D(L'OUNIT,R5),IUNIT    TAPE62 OR TAPE3480\n         BAL   R6,NXTSPC\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVC   0(L'LINE8H,R5),LINE8H   PRINT HYPHEN AT END OF LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         LA    R7,CAMWORK\n         LA    R7,6(R7)\n         MVC   JCLL1(L'LINE8E),LINE8E  CONTINUE SYSIN LINE\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         CLC   FLAGMVOL,=C'N'          IS THERE MULTI VOLUMES\n         BE    JCL35                   IF NOT, BRANCH\n         MVC   0(L'LINE8H,R5),LINE8H   PRINT HYPHEN AT END OF LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         B     JCL36\nJCL35    EQU   *\n         MVC   VOLUM,0(R7)             MOVE VOLUME NUMBER FROM CAMLIST\n         MVC   0(L'VOLUM,R5),VOLUM     PRINT VOLUME PARAMETER\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVC   0(L'LINE8F,R5),LINE8F   PRINT FILE SEQUENCE\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         LA    R7,6(R7)\n         MVC   0(L'SEQ#,R5),SEQ#       SEQUENCE NUMBER\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         B     JCL30                   LOOP BACK TO BEGINNING\nJCL36    EQU   *\n         MVC   VOLUM,0(R7)             MOVE VOLUME NUMBER FROM CAMLIST\n         MVC   JCLL1(L'VOLUM),VOLUM    PRINT VOLUME PARAMETER\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVC   0(L'LINE8H,R5),LINE8H   PRINT HYPHEN AT END OF LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         LA    R7,12(R7)               INCREMENT TO NEXT VOLSER\n         CLC   0(2,R7),=X'0000'        CHECK FOR SPACE\n         BNE   JCL36\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVC   0(L'LINE8H,R5),LINE8H   PRINT HYPHEN AT END OF LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         MVC   JCLL1(L'LINE8F),LINE8F  PRINT FILE SEQUENCE\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVC   0(L'LINE8H,R5),LINE8H   PRINT HYPHEN AT END OF LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         LH    R3,VOLSEQ\n         LA    R7,CAMWORK\n         LA    R7,6(R7)\nJCL38    EQU   *\n         MVC   JCLL1(L'SEQ#),SEQ#      SEQUENCE NUMBER\n         LA    R5,JCLL1\n         BAL   R6,NXTSPC\n         MVC   0(L'LINE8H,R5),LINE8H   PRINT HYPHEN AT END OF LINE\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         LA    R7,12(R7)               INCREMENT FOR NEXT CHECK\n         CLC   0(2,R7),=X'0000'        CHECK FOR LAST ENTRY\n         BNE   JCL38\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         LA    R5,1(R5)                INCREMENT POINTER\n         MVI   0(R5),C')'              ADD PARENTHESIS\n         BAL   R8,PRNTJCL3             PRINT OUTPUT JCL DD LINE\n         B     JCL30                   CREATE JCL FOR JCL3 FILE\n*********************************************\n*** TEMPORARY ROUTINE TO PRINT TABLE ENTRIES.\n*********************************************\nPRTTBL1  EQU   *\n         CLOSE (JCL3),MF=(E,EX2)\n         CLC   DEBUG,=C'N'          CHECK TO SEE IF DEBUG IS OFF\n         BE    FREEALL\n         L     R9,CATLIST\n         MVC   OUTDSN,CATPRINT\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\nPRTTBL2  EQU   *\n         MVC   OUTDSN,0(R9)            GET DSN NAME\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R9,49(R9)\n         CLC   0(2,R9),=X'0000'        CHECK FOR SPACE\n         BNE   PRTTBL2\n*********************************************\n*********************************************\nFREEALL  EQU   *\n         FREEMAIN RU,SP=12\n         SLR   R15,R15\nRETURNX  L     R13,SAVEAREA+4          LOAD OS SAVEAREA ADDR TO R13\n         RETURN (14,12),RC=(15)        RETURN TO OS\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (SYSPRINT),MF=(E,EX2)\n         LR    R15,R7                  RESTORE R15\n         B     RETURNX\nRETURN0  EQU   *                       SEE WHETHER TO QUIT AFTER ERROR\n         CLI   SYSINSW,C'1'            IF USING SYSIN\n         BE    NXTPFIL                 GET NEXT TAPE FILE NAME\n         LA    R15,16                  OTHERWISE, SET RETURN CODE TO 16\n         B     RETURNX                 AND JUST QUIT\n*********************************************\n**    LOCATE CATALOG SEARCH ROUTINE\n*********************************************\nLOCAT    EQU   *\n         MVI   CAMWORK,X'40'\n         MVC   CAMWORK+1(255),CAMWORK\n         MVC   CAMWORK+256(9),CAMWORK\n         LOCATE LOCLIST                CHECK FOR IF ENTRY IS CATALOGED\n         LTR   R15,R15                 IF NOT BRANCH\n         BNZ   ERR80\n         CLC   FLAGLOC,=C'N'\n         BE    CONTIN\n         BR    R7\nCONTIN   EQU   *\n         LA    R6,CAMWORK\n         CLC   6(6,R6),IVOL            CHECK CATALOG VOLSER WITH TMS\n         BNE   ERR120                  VOLSERS DO NOT MATCH?\n         MVI   FLAGMVOL,C'N'           INITIALIZE MULTI-VOL FLAG\n         LH    R8,0(R6)\n         CVD   R8,PWORK1               CONVERT TO PACKED DECIMAL\n         UNPK  SAVEVOL,PWORK1         UNPACK RECORD LENGTH\n         MVZ   SAVEVOL+7(1),SAVEVOL+6 MOVE ZONE BYTE\n         MVI   VOLSEQ,X'40'\n         MVC   VOLSEQ+1(L'VOLSEQ-1),VOLSEQ\n         LA    R7,VOLSEQ\n         LA    R8,SAVEVOL\n         LA    R4,8\n         BAL   R5,L60\nL60      EQU   *\n         CLI   0(R8),C'0'              LEADING ZERO ?\n         BE    L80                     IF SO, BRANCH\nL70      EQU   *\n         MVC   0(1,R7),0(R8)           MOVE A CHARACTER\n         LA    R7,1(R7)                INCREMENT POINTER\n         LA    R8,1(R8)                INCREMENT POINTER\n         BCT   R4,L70                  LOOP UNTIL DONE\n         B     L90                     RETURN\nL80      EQU   *\n         LA    R8,1(R8)                INCREMENT POINTER\n         BCT   R4,L60                  LOOP\nL90      EQU   *\n         CLC   VOLSEQ,=C'20'\n         BE    ERR150                  VOLSEQ NOT LESS THAN 20?\n         CLC   VOLSEQ,=C'1 '           IS THERE JUST 1 VOLUME\n         BE    L100                    IF SO, BRANCH\n         MVI   FLAGMVOL,C'Y'           TURN MULTI-VOL FLAG ON\nL100     EQU   *\n         MVC   0(49,R10),TBFILE        MOVE CATALOGED FILE TO TABLE\n         LA    R10,49(R10)             INCREMENT POINTER TO TABLE\n         BR    R9                      RETURN\n*********************************************\n**    PRINT OUTPUT LINES SUBROUTINE\n*********************************************\nPRNTJCL1 EQU   *\n         PUT   JCL1,JCLLINE            WRITE INTO JCL1 FILE\n         MVI   JCLL1,X'40'             RESET LINE BUFFER\n         MVC   JCLL1+1(77),JCLL1       TO SPACES\n         BR    R8                      RETURN\nPRNTJCL2 EQU   *\n         PUT   JCL2,JCLLINE            WRITE INTO JCL2 FILE\n         MVI   JCLL1,X'40'             RESET LINE BUFFER\n         MVC   JCLL1+1(77),JCLL1       TO SPACES\n         BR    R8                      RETURN\nPRNTJCL3 EQU   *\n         PUT   JCL3,JCLLINE            WRITE INTO JCL3 FILE\n         MVI   JCLL1,X'40'             RESET LINE BUFFER\n         MVC   JCLL1+1(77),JCLL1       TO SPACES\n         BR    R8                      RETURN\n*********************************************\n**    POINT TO NEXT SPACE ON LINE SUBROUTINE\n*********************************************\nNXTSPC   EQU   *\n         LA    R5,1(R5)                INCREMENT POINTER\n         CLC   0(4,R5),=C'    '        CHECK FOR A SPACE\n         BNE   NXTSPC                  LOOP UNTIL SPACE IS FOUND\n         BR    R6                      RETURN\n*********************************************\n**    GET SEQ# AND STEP NUMBER ROUTINE\n*********************************************\nSEQNUMBR EQU   *\n         MVC   REF#,NUM                MOVE PRIOR STEP# TO REF#\n         AP    SEQNUM,=P'1'            INCREMENT SEQ#\n         UNPK  SEQ1,SEQNUM             UNPACK SEQ#\n         MVZ   SEQ1+7(1),SEQ1+6        MOVE ZONE BYTE\n         LA    R6,SEQ1+4               LEFT JUSTIFY AND SPACE FILL\n         MVI   NUM,X'40'               INITIALIZE SEQ NUMBER\n         MVC   NUM+1(L'NUM-1),NUM\n         LA    R5,NUM\n         LA    R3,4                    ONLY WORRY ABOUT LAST 4 DIGITS\nSQ10     EQU   *\n         CLI   0(R6),C'0'              LEADING ZEROS??\n         BNE   SQ20                    IF NOT, GET IT.\n         LA    R6,1(R6)                INCREMENT POINTER\n         BCT   R3,SQ10                 LOOP THRU 4 CHARACTERS\n         B     SQ30\nSQ20     EQU   *\n         MVC   0(1,R5),0(R6)           IF SOMETHING ELSE MOVE IT\n         LA    R5,1(R5)                INCREMENT POINTER\n         LA    R6,1(R6)                INCREMENT POINTER\n         BCT   R3,SQ20                 LOOP THRU 4 CHARACTERS\nSQ30     EQU   *\n         BR    R7                      RETURN\n*********************************************\n**  CHECK IF ANY FILES ON TAPE WERE CATALOGED\n*********************************************\nCHCKTABL EQU   *\n         CLC   0(2,R9),=X'0000'        CHECK FOR SPACE\n         BE    ERR130\n         BR    R7\n*********************************************\n**  OBTAIN AND CONVERT INFORMATION FROM TABLE\n*********************************************\nCNVTTABL EQU   *\n         MVC   SAVEDSN,0(R9)           GET DSN NAME\n         MVC   SAVEEXPD,44(R9)         GET EXPDT\n         UNPK  EXPDT,SAVEEXPD          UNPACK EXPDT\n         MVZ   EXPDT+4(1),EXPDT+3      MOVE ZONE BYTE\nC50      EQU   *\n         LH    R8,47(R9)\n         CVD   R8,PWORK1               CONVERT TO PACKED DECIMAL\n         UNPK  SAVEFSQN,PWORK1         UNPACK FILE SEQUENCE NUMBER\n         MVZ   SAVEFSQN+7(1),SAVEFSQN+6 MOVE ZONE BYTE\n         MVI   SEQ#,X'40'\n         MVC   SEQ#+1(L'SEQ#-1),SEQ#\n         LA    R2,SEQ#\n         LA    R3,SAVEFSQN\n         LA    R4,8\n         BAL   R5,C60\n         BR    R7\nC60      EQU   *\n         CLI   0(R3),C'0'              LEADING ZERO ?\n         BE    C80                     IF SO, BRANCH\nC70      EQU   *\n         MVC   0(1,R2),0(R3)           MOVE A CHARACTER\n         LA    R2,1(R2)                INCREMENT POINTER\n         LA    R3,1(R3)                INCREMENT POINTER\n         BCT   R4,C70                  LOOP UNTIL DONE\n         B     C90                     RETURN\nC80      EQU   *\n         LA    R3,1(R3)                INCREMENT POINTER\n         BCT   R4,C60                  LOOP\nC90      EQU   *\n         BR    5                       RETURN\n*********************************************\n**    ERROR MESSAGES\n*********************************************\nERR10    EQU   *\n         MVC   PRTERR,PARMERR          GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR20    EQU   *\n         MVC   PRTERR,UCCERR           GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR30    EQU   *\n         MVC   PRTERR,TMCERR1          GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         B     RETURN0\nERR40    EQU   *\n         MVC   PRTERR,TMCERR2          GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR50    EQU   *\n         MVC   PRTERR,TMCERR3          GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         B     RETURN0\nERR60    EQU   *\n         MVC   PRTERR,DSNBERR1         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,0                   SET RETURN CODE TO 0\n         B     LOOPER\nERR70    EQU   *\n         MVC   PRTERR,DSNBERR2         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         B     RETURN0\nERR80    EQU   *\n         CLC   FLAGLOC,=C'Y'\n         BE    ERR80A\n         MVC   OUTDSN,TBDSN            GET DSN NAME\n         MVC   PRTERR,LOCATER1         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         BR    R9\nERR80A   EQU   *\n         BR    R7\nERR90    EQU   *\n         MVC   PRTERR,IVOLERR1         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         B     RETURN0\nERR100   EQU   *\n         MVC   PRTERR,OPENERR1         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR110   EQU   *\n         MVC   PRTERR,OPENERR2         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR112   EQU   *\n         MVC   PRTERR,OPENERR3         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR114   EQU   *\n         MVC   PRTERR,OPENERR4         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR116   EQU   *\n         MVC   PRTERR,OPENERR5         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         LA    R15,16                  SET RETURN CODE TO 16\n         B     RETURNX\nERR120   EQU   *\n         MVC   PRTERR,IVOLERR2         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         BR    R9                      CONTINUE PROCESSING\nERR130   EQU   *\n         MVC   PRTERR,TABLERR1         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         B     RETURN0\nERR140   EQU   *\n         MVC   PRTERR,SCRERR1          GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         B     RETURN0\nERR150   EQU   *\n         MVC   OUTDSN,TBDSN            GET DSN NAME\n         MVC   PRTERR,LOCATER2         GET ERROR MESSAGE\n         PUT   SYSPRINT,SPLINE         WRITE INTO SYSPRINT FILE\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         B     RETURN0\n*********************************************************************\n*             CONSTANT DATA                                         *\n*********************************************************************\n*\n*   REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,MACRF=(PM)\nINPUT    DCB   DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,MACRF=(GM),     *\n               EODAD=CLOSCARD\nJCL1     DCB   DDNAME=JCL1,DSORG=PS,RECFM=FB,LRECL=80,MACRF=(PM)\nJCL2     DCB   DDNAME=JCL2,DSORG=PS,RECFM=FB,LRECL=80,MACRF=(PM)\nJCL3     DCB   DDNAME=JCL3,DSORG=PS,RECFM=FB,LRECL=80,MACRF=(PM)\n*\nCATPRINT DC    CL44'# OF ENTRIES FOUND IN CATALOGED ENTRY TABLE '\n*\nLINE0A   DC    C'//DL3480D'\nLINE0B   DC    C'//DL3480C'\nLINE0C   DC    C'//DL3480R'\nLINE0D   DC    C'JOB (GEB1,OPER),MSGCLASS=A,CLASS=I,'\nLINE0E   DC    C'//      MSGLEVEL=(1,1),USER=TPCJOB,PASSWORD=????????'\nLINE1A   DC    C'EXEC  PGM=FATAR'\nLINE1B   DC    C'EXEC  PGM=IDCAMS'\nLINE2A   DC    C'SYSPRINT DD SYSOUT=(A,,DL34)'\nLINE3A   DC    C'DD DSN='\nLINE3B   DC    C'DISP=(OLD,KEEP)'\nLINE3C   DC    C'DISP=(,CATLG)'\nLINE4A   DC    C'UNIT='\nLINE4B   DC    C'VOL=(,RETAIN,,19)'\nLINE4C   DC    C'LABEL=('\nLINE4D   DC    C'SL,EXPDT='\nLINE4E   DC    C'VOL=(,RETAIN,,19,REF=*.STEP'\nLINE4F   DC    C'.TAPEOUT)'\nLINE4G   DC    C'VOL=(,RETAIN,SER='\nLINE7A   DC    C'SYSIN    DD DSN=MVSP.DLX3480.OPERLIB(FATAR),DISP=SHR'\nLINE7B   DC    C'SYSIN    DD *'\nLINE8A   DC    C'DELETE '\nLINE8B   DC    C' NOSCRATCH'\nLINE8C   DC    C'DEFINE NONVSAM (NAME('\nLINE8D   DC    C') DEVT('\nLINE8E   DC    C'VOLUME('\nLINE8F   DC    C' FSEQN('\nLINE8H   DC    C'  -'\nLINE9A   DC    C'TAPE FILE LISTING FOR INPUT VOLUME '\n*\nDSNBERR1 DC    CL50'DLX3480 - NO DSNB RECORDS FOR THIS VOLUME         '\nDSNBERR2 DC    CL50'DLX3480 - ERROR OCCURRED ATTEMPTING TO READ DSNB  '\nIVOLERR1 DC    CL50'DLX3480 - IVOL NOT 1ST VOLUME OF MULTI-VOLUME LIST'\nIVOLERR2 DC    CL50'DLX3480 - CATALOG VOLSER DOES NOT MATCH TMS VOLSER'\nLOCATER1 DC    CL50'DLX3480 - LOCATE FAILED.  DATASET NOT CATALOGED   '\nLOCATER2 DC    CL50'DLX3480 - MULTI-VOLUME FILE EXCEEDS 19 VOLUMES    '\nOPENERR1 DC    CL50'DLX3480 - OPEN FAILED ON SYSPRINT OUTPUT FILE     '\nOPENERR2 DC    CL50'DLX3480 - OPEN FAILED ON JCL1   OUTPUT FILE       '\nOPENERR3 DC    CL50'DLX3480 - OPEN FAILED ON JCL1   OUTPUT FILE       '\nOPENERR4 DC    CL50'DLX3480 - OPEN FAILED ON JCL1   OUTPUT FILE       '\nOPENERR5 DC    CL50'DLX3480 - OPEN FAILED ON SYSIN FILE               '\nPARMERR  DC    CL50'DLX3480 - NO PARAMETERS OR SYSIN CARDS SPECIFIED  '\nSCRERR1  DC    CL50'DLX3480 - INPUT VOLUME IS ON THE TMS SCRATCH LIST '\nTABLERR1 DC    CL50'DLX3480 - NONE OF THE FILES ON TAPE ARE CATALOGED '\nTMCERR1  DC    CL50'DLX3480 - VOLSER NOT IN TMC RANGE                 '\nTMCERR2  DC    CL50'DLX3480 - ERROR OCCURRED ATTEMPTING TO OPEN TMC   '\nTMCERR3  DC    CL50'DLX3480 - ERROR OCCURRED ATTEMPTING TO READ TMC   '\nUCCERR   DC    CL50'DLX3480 - UCC ONE IS INACTIVE                     '\n*\nISEQNUM  DC    P'00000000'\nISEQ     DC    B'0000000000000001'\n*\nSAVEAREA DS    18F'0'\n*\nPARMBUF  DS    CL50\nDEBUG    DS    CL1\nIUNIT    DS    CL8\nIVOL     DS    CL6\nJOBSUF   DS    CL1\nOUNIT    DS    CL8\n*\nINPUTBUF DS    CL80\n*\nPWORK1   DS    1D\n*\nTMREC    DS    0CL200\nTMDSN    DS    CL44\n         DS    CL10\nTMVOLSEQ DS    CL2\n         DS    CL3\nTMEXPDT  DS    CL3\n         DS    CL32\nNUMDSNB  DS    CL2\nTMDSNB   DS    CL4\n         DS    CL31\nTMFLAG1  DS    CL1\n         DS    CL68\n*\nDSNBREC  DS    0CL100\nDSNBID   DS    CL1\n         DS    CL6\nDSNBFSN  DS    CL2\nDSNBDSN  DS    CL44\nDSNBEXDT DS    CL3\n         DS    CL40\nDSNBNEXT DS    CL4\n*\nDSNBTST  DS    CL200\n*\nSPLINE   DS    0CL132\nOUTDSN   DS    CL44\n         DS    CL6\nPRTERR   DS    CL50\n         DS    CL32\n*\nJCLLINE  DS    0CL80\n         DS    CL2\nJCLL1    DS    CL8\n         DS    CL1\nJCLCOL1  DS    CL2\n         DS    CL1\nJCLCOL2  DS    CL66\n*\nSAVEFILE DS    0CL55\nSAVEDSN  DS    CL44\nSAVEEXPD DS    CL3\nSAVEFSQN DS    CL8\n*\nTBFILE   DS    0CL49\nTBDSN    DS    CL44\nTBEXPDT  DS    CL3\nTBFSQN   DS    CL2\n*\nEXPDT    DS    CL5\nFIRSTFIL DS    CL1\nFLAGJCL2 DS    CL1\nFLAGJCL3 DS    CL1\nFLAGLOC  DS    CL1\nFLAGMVOL DS    CL1\nNUM      DS    CL4\nREF#     DS    CL4\nSAVEVOL  DS    CL8\nSEQ#     DS    CL8\nSEQ1     DS    CL8\nSEQNUM   DS    P'00000000'\n         DS    0H\nVOLSEQ   DS    CL2\nVOLUM    DS    CL6\nXUNIT    DS    CL6\n*\nGOTMAIN  DC    C'N'\nSYSINSW  DC    C'0'\nINCR     DS    H\nLIMIT    DC    H'12'\n*\nCATLIST  DC    A(0)\nIVOLADDR DC    A(0)\n*\nEX1      OPEN  (,),MF=L\nEX2      CLOSE (,),MF=L\nLOCLIST  CAMLST NAME,TBDSN,,CAMWORK\nCAMWORK  DS    0D\n         DS    265C\n*\n         END   DLX3480\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSATTR": {"ttr": 5893, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02>\\x02>\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 574, "newlines": 574, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DSATTR - LIST DATA SET ATTRIBUTES COMMAND'\nDSATTR   START 0\n         STM   R14,R12,12(R13)\n         USING DSATTR,R15\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         B     BEGIN\nSAVE     DC    18F'0'\n         DROP  R15\n         USING SAVE,R13\n         TITLE 'DSATTR - GETMAIN AND PARSE'\nBEGIN    LR    R4,R1\n         USING CPPL,R4\n         LA    R0,LWORK            GET LENGTH OF WORK AREA\n         AH    R0,=H'4096'         GET EXTRA 4K FOR LOCINDEX WORK\n         ICM   R0,B'1000',=FL1'1'  SUBPOOL 1\n         GETMAIN R,LV=(0)\n         LR    R12,R1               SAVE ADDR OF WORK AREA\n         USING WORKAREA,R12\n         LA    R0,LOCINDXW          POINT TO LOCINDEX WORK AREA\n         ST    R0,PARM+12           SAVE ADDR IN PARM LIST\n         MVI   PARM+12,X'80'        INDICATE END OF PARM LIST\n         MVI   WXTNT+4,X'04'\n         LA    R3,WPPL             GET ADDR OF PPL\n         USING PPL,R3\n         L     R0,CPPLCBUF\n         ST    R0,PPLCBUF          SAVE ADDR OF COMMAND BUFFER\n         L     R0,CPPLUPT\n         ST    R0,PPLUPT           SAVE ADDR OF UPT\n         L     R0,CPPLPSCB\n         LR    R10,R0              GET ADDR OF USERID FROM PSCB\n         SR    R11,R11\n         IC    R11,7(R10)          GET LENGTH OF USERID\n         BCTR  R11,0\n*        CLC   0(6,R10),=C'SYSTEM'                           ** VPI **\n*        BE    AUTHRZD                                       ** VPI **\n*        CLC   0(6,R10),=C'CONSUT'                           ** VPI **\n*        BNE   LECT                                          ** VPI **\nAUTHRZD  OI    FLAG,X'80'\nLECT     L     R0,CPPLECT\n         ST    R0,PPLECT           SAVE ADDR OF ECT\n         LA    R0,CPECB\n         ST    R0,PPLECB           SAVE ADDR OF ECB\n         XC    CPECB,CPECB         CLEAR ECB\n         L     R0,=A(PARSLIST)\n         ST    R0,PPLPCL           SAVE ADDR OF PCL\n         LA    R0,WPDL\n         ST    R0,PPLANS           SAVE ADDR OF PDL AREA\n         XC    PPLUWA,PPLUWA       CLEAR UWA\n         LR    R1,R3               PASS ADDR OF PPL TO PARSE\n         LINK  EP=IKJPARS          LINK TO PARSE SERVICE ROUTINE\n         LTR   R15,R15             PARSE ERROR\n         BNZ   RETC                 YES\n         TM    PPLANS,X'FF'        PARSE ERROR\n         BO    RETC                 YES\n         DROP  R3,R4\n         L     R3,WPDL             GET ADDR OF PDL\n         USING IKJPARMD,R3\n         TM    EXTENT+1,X'01'      EXTENT SPECIFIED?\n         BZ    *+8                  NO\n         OI    FLAG,X'20'           YES, SET FLAG BIT\n         TM    DSNLIST+6,X'80'      DSNAME SPECIFIED?\n         BO    DSNRTN                YES\n         TM    LEV+6,X'80'          INDEX LEVEL SPECIFIED?\n         BO    LEVEL                 YES\n         TM    VOL+6,X'80'          VOLUME SPECIFIED?\n         BO    FREEA                 YES\n         B     EUSLO                NO PARMS - LISTS FOR USERID\n         TITLE 'DSATTR - DATASET NAME ROUTINE'\nDSNRTN   LA    R4,DSNLIST           POINT TO DSN LIST\n         LA    R0,L'MSG1\n         LA    R1,MSG1\n         SVC   93                  TPUT HEADING\nDSNAME   L     R5,0(R4)             POINT TO DSNAME\n         LH    R6,4(R4)             GET LENGTH OF DSNAME\n         BCTR  R6,0\n         MVI   DSN1,X'40'\n         MVC   DSN1+1(43),DSN1     BLANK DSN WORK AREA\n         LA    R8,DSN1              POINT TO DSN WORK AREA\n         TM    6(R4),X'40'          DSNAME CONTAINED IN QUOTES?\n         BO    MVCDSNAM               YES\n         EX    R11,USIDMVC         MOVE USERID TO WORK AREA\n         LA    R8,1(R11,R8)        BUMP PAST USERID\n         MVI   0(R8),C'.'          MOVE PERIOD TO WORK AREA\n         LA    R8,1(0,R8)          BUMP PAST\nMVCDSNAM EX    R6,DSNMVC           MOVE DSNAME TO WORK AREA\n         MVC   VOLS,BLANKS         MOVE BLANKS TO VOLSER WORK AREA\n         TM    FLAG,X'80'          AUTHORIZED USER?\n         BZ    LOCDSN               NO\n         TM    VOL+6,X'80'         VOLUME SPECIFIED?\n         BZ    LOCDSN               NO, LOCATE DSN\n         LA    R1,VOLS             POINT TO VOLSER WORK AREA\n         L     R5,VOL              POINT TO VOLUME PARAMETER\n         LH    R6,VOL+4            GET LENGTH OF VOL PARM\n         BCTR  R6,0\n         EX    R6,MVCVOLS          MOVE VOL PARM TO VOLSER WORK AREA\n         B     BALOBTN             BYPASS LOCATE\nLOCDSN   OI    FLAG,X'10'\n         LOCATE INDS\n         LTR   R15,R15              DID IT FIND VOL SER\n         BNZ   ERR03                 NO WRITE ERROR MSG\n         NI    FLAG,X'EF'\n         MVC   VOLS(6),BUF1+6      YES - MOVE IN VOL SER\n         SPACE 2\nBALOBTN  BAL   R9,OBTNRTN          LINK TO OBTAIN AND PRINT ROUTINE\nRETDSN   L     R4,24(R4)           GET DSN LINK POINTER\n         C     R4,ENDLIST          END OF LIST?\n         BE    RETC                 YES\n         B     DSNAME               NO, GET NEXT DSNAME\n         TITLE 'DSATTR - LEVEL ROUTINE'\nEUSLO    EQU   *\n**     FOR ENTIRE USERID LOGGED ON\n         MVC   USERID(7),0(R10)        MOVE IN USERID\n         B     GOTUS               BRANCH TO GOT USERID\n         SPACE 3\nLEVEL    EQU   *\n         L     R5,LEV              POINT TO INDEX STRUCTURE\n         LH    R6,LEV+4            GET LENGTH OF INDEX STRUCT\n         BCTR  R6,0\n         LA    R8,USERID           POINT TO WORK AREA\n         EX    R6,DSNMVC           MOVE INDEX STRUCTURE TO WORK AREA\nGOTUS    EQU   *\n         LA    R0,L'MSG1\n         LA    R1,MSG1\n         SVC   93                  TPUT HEADING\n         OI    FLAG,X'40'          SET FLAG FOR DATA SETS FOR USERID\nLOOP     EQU   *                   LOOP FOR DATASET IN USERID\n         L     R15,=V(LOCINDEX)    POINT TO EP(LOCINDEX)\n         LA    R1,PARM             POINT TO PARM LIST\n         BALR  R14,R15             GO TO LOCINDEX\n         B     *+4(R15)            BRANCH , DEP ON RETURN CODE\n         B     OK                  0-GET INFOR FOR DSN & CONT\n         B     NOUSER              4-PRINT MSG & RETRUN TO SYS\n         B     NOTDISK             8-PRINT MSG&CONTINUE\n         B     MULTIVOL            12-PRINT MSG&CONTINUE\n         B     RETC                16-FINISHED-RETURN TO SYS\n         B     RDERR               20-PRINT MSG&RETRUN TO SUS\nOK       BAL   R9,OBTNRTN          LINK TO OBTAIN AND PRINT ROUTINE\n         B     LOOP                GET NEXT DSNAME FROM LOCINDEX\n         SPACE 3\n         TITLE 'DSATTR - VOLUME ROUTINE'\nFREEA    EQU   *\n** TO GET AVAILABLE SPACE ON PARTICULAR VOLUME\n         TM    FLAG,X'80'          AUTHORIZED USER?\n         BZ    ERRF                 NO\n         LA    R0,L'MSG4\n         LA    R1,MSG4\n         SVC   93                  TPUT HEADING\n         SPACE 2\n         LA    R4,VOL              POINT TO VOLUME LIST\nVOLLOOP  ST    R4,OBTNSAVE         SAVE ADDRESS\n         MVI   MSG2,X'40'\n         MVC   MSG2+1(75),MSG2     BLANK MESSAGE AREA\n         XC    PEXCTR,PEXCTR       CLEAR EXTENT COUNTER\n         LA    R1,VOLS             POINT TO VOLSER WORK AREA\n         L     R5,0(R4)            POINT TO VOLUME PARM\n         LH    R6,4(R4)            GET LENGTH OF VOL PARM\n         BCTR  R6,0\n         EX    R6,MVCVOLS          MOVE VOL PARM TO VOLSER WORK AREA\n         LA    R1,MSG2             POINT TO MESSAGE AREA\n         EX    R6,MVCVOLS          MOVE VOLSER TO MESSAGE AREA\n         MVI   DSN1,X'04'          MOVE 'DSN' FOR F4 DSCB...\n         MVC   DSN1+1(43),DSN1     ...INTO DSN1\n         OBTAIN SERCHCAM\n         CLI   BUF1,X'F4'          DID IT READ OK?\n         BNE   ERRF4               NO\n         MVC   VOLTKCYL(2),BUF1+20 GET NUM OF TRKS/CYL\n         MVC   VOLDSCTK+1(1),BUF1+30   GET NUM OF DSCBS PER TRK\n         MVC   VOLF4CHR(4),BUF1+63 GET CCHH OF START OF VTOC\n         MVI   VOLF4CHR+4,X'01'    F4 DSCB IS FIRST REC\n         LH    RCC,VOLF4CHR        SETUP...\n         LH    RHH,VOLF4CHR+2         DISK...\n         SR    RR,RR                     ADDRESSING...\n         IC    RR,VOLF4CHR+4\n         MVC   WXTNT(4),BUF1+63    MOVE BEGIN XTNT TO WORK AREA\n         UNPK  MSG2+29(9),WXTNT(5) UNPACK INTO MESSAGE AREA\n         TR    MSG2+29(8),TRTBL    TRANSLATE EXTENT\n         MVC   WXTNT(4),BUF1+67    MOVE END XTNT TO WORK AREA\n         UNPK  MSG2+38(9),WXTNT(5) UNPACK INTO MESSAGE AREA\n         TR    MSG2+38(8),TRTBL    TRANSLATE EXTENT\n         SR    R9,R9\n         LH    R9,BUF1+6             MOVE IN NUMBER FREE DSCB\n         CVD   R9,WKD\n         MVC   MSG2+6(6),MASKED        MOVE IN MASK\n         ED    MSG2+6(6),WKD+5         EDIT FREE DSCB\n         LH    R1,VOLNO            GET NUM VOLS PROCESSED\n         LA    R1,1(R1)            BUMP\n         STH   R1,VOLNO            REPLACE\n         LA    RR,1(RR)            BUMP RECORD PTR\n         CH    RR,VOLDSCTK         TEST FOR LAST REC ON TRK\n         BNH   VBSET               GO SET VTOCCHHR\n         LA    RR,1                RESET RR TO 1\n         LA    RHH,1(RHH)          BUMP TRK COUNTER\n         CH    RHH,VOLTKCYL        PAST END OF CYL?\n         BL    VBSET               GO SET VTOCCHHR\n         SR    RHH,RHH             ELSE SET RHH TO TRK 0\n         LA    RCC,1(RCC)          BUMP TO NEXT CYL\nVBSET    STH   RCC,VTOCCHHR        SET...\n         STH   RHH,VTOCCHHR+2         UP...\n         STC   RR,VTOCCHHR+4            VTOCCHHR\n         SR    R4,R4               ZERO COUNTER\n         SPACE 2\nPFOBT    OBTAIN SEEKCAM\n         LA    R2,1                INDICATE FIRST EXTENT\n         LA    R3,BUF1+4           POINT TO FIRST EXTENT\nPFLOOP   CLC   0(5,R3),=D'0'       LAST EXTENT?\n         BE    PFGOT               EXIT IF SO\n         MVC   HWK1(2),2(R3)       MOVE NUM CYLS TO HWD\n         LH    R1,HWK1             LOAD\n         MH    R1,VOLTKCYL         CONVERT TO TRKS\n         SR    R0,R0               ZERO R0\n         IC    R0,4(R3)            LOAD NUM TRKS\n         AR    R1,R0               ADD TRKS\n         AR    R4,R1               ACCUMULATE\n         LA    R2,1(R2)            BUMP CTR\n         CH    R2,=H'9'            NINTH EXTENT?\n         BE    PFXT9               BRANCH IF SO\n         CH    R2,=H'27'           27TH EXTNET?\n         BE    PFXT27              BRANCH IF SO\n         LA    R3,5(R3)            BUMP NORMALLY\n         B     PFLOOP              AND CONTINUE\nPFXT9    LA    R3,6(R3)            SKIP OVER F5 IF AT DSCH+44\n         B     PFLOOP              AND CONTINUE\nPFXT27   AH    R2,PEXCTR           ACCUM EXT TOTALS\n         BCTR  R2,0\n         STH   R2,PEXCTR           SAVE EXT TOTALS\n         CLC   BUF1+135(5),=D'0'   PTR TO NEXT F5?\n         BE    PFGOT               DONE. NO MORE F5\n         MVC   VTOCCHHR(5),BUF1+135\n         B     PFOBT               GO READ NEXT F5\nPFGOT    EQU   *\n         AH    R2,PEXCTR           ACCUM EXTENT TOTALS\n         CVD   R2,WKD              CONVERT NUM EXTENTS\n         MVC   MSG2+14(4),MASKED     MOVE IN MASK\n         ED    MSG2+14(4),WKD+6      EDIT NUM EXTENTS\n         CVD   R4,WKD              CONVERT NUM TRKS FREE\n         MVC   MSG2+21(6),MASKED     MOVE IN MASK\n         ED    MSG2+21(6),WKD+5      EDIT FREE TRKS\n         TPUT  MSG2,76             WRITE FREE INFO\nVOLRET   L     R4,OBTNSAVE         LOAD POINTER TO VOLUME LIST\n         L     R4,8(R4)            GET LINK POINTER\n         C     R4,ENDLIST          END OF LIST\n         BE    RETC                 YES\n         B     VOLLOOP              NO, GET NEXT VOLUME\n         TITLE 'DSATTR - OBTAIN AND PRINT ROUTINES'\n*   READ DSCB1 AND GET SPACE\nOBTNRTN  STM   R2,R11,OBTNSAVE     SAVE CALLER'S REGISTERS\n         MVC   DSNSAVE(44),DSN1\n         MVI   DSN1,X'04'          MOVE 'DSN' FOR F4 DSCB...\n         MVC   DSN1+1(43),DSN1     ...INTO DSN1\n         OBTAIN SERCHCAM\n         CLI   BUF1,X'F4'          DID IT READ OK?\n         BNE   ERRF4               NO\n         MVC   VOLTKCYL(2),BUF1+20 GET NUM OF TRKS/CYL\n         MVC   DSN1(44),DSNSAVE\n         MVI   MSG2,X'40'\n         MVC   MSG2+1(75),MSG2     BLANK MESSAGE AREA\n         OBTAIN SERCHCAM\n         LTR   R15,R15             DID OBTAIN WORK\n         BNZ   ERR03               NO - WRITE ERROR MSG\n         SPACE 2\n         CLI   BUF1,C'1'            IS IT F1 DSCB?\n         BNE   ERR01                NOT F1\n         LA    R9,XTNTS            POINT TO EXTENTS SAVE AREA\n         LH    R6,BUF1+54          GET LAST RELATIVE TRK USED\n         CLI   BUF1+56,X'00'       IS TRK UNUSED?\n         BE    *+8                  YES\n         LA    R6,1(R6)             NO, ANOTHER TRACK\n         STH   R6,LASTTRK          SAVE LAST REL. TRK\n         MVC   DSORG,BUF1+38       SAVE DSORG\nAROUND   EQU   *\n* TEST FOR TYPE OF DSORG AND MOVE TO PRINT LINE\n         CLI   BUF1+38,X'80'        IS IT IS\n         BNE   NIS                  NO\n         MVC   MSG2+2(2),=C'IS'     YES - MOVE IN IS\n         B     GDSO                 BRANCH TO GOT DSORG\nNIS      CLI   BUF1+38,X'40'        IS IT PS\n         BNE   NPS                   NO\n         MVC   MSG2+2(2),=C'PS'      YES-MOVE IN PS\n         B     GDSO                 BRANCH TO GOT DSORG\nNPS      CLI   BUF1+38,X'20'        IS IT DA\n         BNE   NDA                   NO\n         MVC   MSG2+2(2),=C'DA'      YES - MOVE IN DA\n         B     GDSO                 BRANCH TO GOT DSORG\nNDA      CLI   BUF1+38,X'02'        IS IT PO\n         BNE   NPO                   NO\n         MVC   MSG2+2(2),=C'PO'      YES - MOVE IN PO\n         B     GDSO                 BRANCH TO DSORG\nNPO      CLI   BUF1+38,X'01'        IS IT UNMOVEABLE\n         MVC   MSG2+2(2),=C' U'      YES\nGDSO     SR    R2,R2                ZERO REG 2\n         IC    R2,BUF1+15           PICK UP NUMBER OF EXTENTS\n         LA    R3,1                 SET EXTENT COUNTER\n         SR    R4,R4                CLEAR R4 TO TRK ACCUMULATION\n         LTR   R2,R2               NO XTNTS? - GDG PATTERN. DSCB\n         B     VVALID               YES, BYPASS ACCUMULATE\n         LA    R5,BUF1+61           POINT TO FIRST EXTENT\nVXTLOOP  MVC   0(10,R9),0(R5)      MOVE EXTENT TO SAVE AREA\n         LA    R9,10(R9)           BUMP TO NEXT SAVE AREA\n         MVC   HWK1(2),6(R5)        MOVE HI-CYL TO HWD\n         LH    R0,HWK1              LOAD\n         MVC   HWK1(2),8(R5)        MOVE HI-TRK TO HWD\n         LH    R1,HWK1              LOAD\n         MVC   HWK1(2),2(R5)        MOVE LOW-CYL TO HWD\n         SH    R0,HWK1              SUBTRACT\n         MVC   HWK1(2),4(R5)        MOVE LOW-TRK TO HWD\n         SH    R1,HWK1              SUBTRACT\n         MH    R0,VOLTKCYL          CONVERT CYL TO TRK\n         AR    R1,R0                GET TOTAL MINUS1\n         LA    R4,1(R1,R4)          GET TOTAL AND ACCUMULATE\n         CR    R3,R2                DONE LAST EXTENT?\n         BE    VVALID               GO TO VVALID IF SO\n         LA    R3,1(R3)             BUMP TO EXTENT COUNTER\n         CH    R3,=H'4'             FOURTH EXTENT?\n         BE    VXT4                   BRANCH IF SO\n         CH    R3,=H'8'             EIGHTTH EXTENT?\n         BE   VXT8\n         LA    R5,10(R5)            ELSE BUMP EXTENT POINTER\n         B     VXTLOOP              AND GO TO NEXT EXTENT\nVXT4     MVC   VTOCCHHR(5),BUF1+91  POINT NEXT DSCH(F2 OR F3)\nVXT4OBT  OBTAIN SEEKCAM\n         CLI   BUF1+44,C'3'         IF IT F3 DSCB\n         BE    VXT4F3               BRANCH IF SO\n         MVC   VTOCCHHR(5),BUF1+135  ELSE ITS F2-POINT TO F3\n         B     VXT4OBT\nVXT4F3   LA    R5,BUF1+4            POINT TO FIRST EXTENT IN F3\n         B     VXTLOOP              CONTINUE LOOP FOR SIZE\nVXT8     LA    R5,BUF1+45           SKIP OVER F3 ID IN F3 DSCB\n         B     VXTLOOP              CONTINUE LOOP FOR SIZE\nVVALID   EQU   *\n* CONVERT SPACE ALLOC AND EDIT IN PRINT LINE\n* DELUXE BEGINS\n         LA    R4,MSG2+7\n         TM    BUF1+40,X'C0'\n         BM    NOTUNDEF\n         MVI   0(R4),C'U'\n         B     ENDRECFM\nNOTUNDEF TM    BUF1+40,X'80'\n         BO    RECFMF\nRECFMV   MVI   0(R4),C'V'\n         LA    R4,1(R4)\n         B     RECFMB\nRECFMF   MVI   0(R4),C'F'\n         LA    R4,1(R4)\nRECFMB   TM    BUF1+40,X'10'\n         BZ    RECFMS\n         MVI   0(R4),C'B'\n         LA    R4,1(R4)\nRECFMS   TM    BUF1+40,X'08'\n         BZ    RECFMCC\n         MVI   0(R4),C'S'\n         LA    R4,1(R4)\nRECFMCC  TM    BUF1+40,X'06'\n         BZ    ENDRECFM\n         TM    BUF1+40,X'04'\n         BZ    RECFMMM\n         MVI   0(R4),C'A'\n         B     ENDRECFM\nRECFMMM  MVI   0(R4),C'M'\nENDRECFM EQU   *\n         LH    R4,BUF1+42    LOAD BLOCKSIZE\n         CVD   R4,WKD               CONVERT DEC. R4  #TRKS ALLOC\n         MVC   MSG2+17(6),MASKED     MOVE MASKED FIELD IN\n         ED    MSG2+17(6),WKD+5      EDIT  # TRKS MSG2+5\n         LH    R4,BUF1+44    LOAD LRECL\n         CVD   R4,WKD               CONVERT DEC. R4  #TRKS ALLOC\n         MVC   MSG2+11(6),MASKED     MOVE MASKED FIELD IN\n         ED    MSG2+11(6),WKD+5      EDIT  # TRKS MSG2+5\n         CVD   R4,WKD               CONVERT DEC. R4  #TRKS ALLOC\n         B     SKPTRKS\n         MVC   MSG2+5(6),MASKED      MOVE MASKED FIELD IN\n         ED    MSG2+5(6),WKD+5       EDIT  # TRKS MSG2+5\n         TM    DSORG,X'42'        IS IT PO OR PS\n         BNZ   CVDU                  YES - BRANCH\n         MVI   MSG2+17,C'*'\n         B     CVDX                 BRANCH TO EXTENT CONVERSION\nCVDU     LH    R6,LASTTRK            GET LAST RELATIVE TRACK\n         LR    R7,R4\n         SR    R7,R6                 R7 CONTAINS UNUSED SPACE\n         CVD   R7,WKD               CONVERT DEC R7\n         MVC   MSG2+12(6),MASKED      MOVE IN MASKED FIELD\n         ED    MSG2+12(6),WKD+5       EDIT # TRKD UNUSED\nCVDX     CVD   R2,WKD                   PICK UP # EXTENTS\n         MVC   MSG2+20(4),MASKED      MOVE IN MASKED FIELD\n         ED    MSG2+20(4),WKD+6      EDIT # EXTENTS USED\nSKPTRKS  EQU   *\n         MVC   MSG2+27(44),DSN1     MOVE DSN TO PRINT LINE\n         TPUT  MSG2,76             WRITE OUT LINE\n         TM    FLAG,X'A0'          AUTHORIZED USER?\n         BNO   OBTNRET              NO\n         LA    R9,XTNTS            POINT TO EXTENT SAVE AREA\n         MVC   MSG2(6),VOLS        MOVE VOLSER TO MESSAGE AREA\nOUTLOOP  LA    R3,3                SET LOOP CONTROL\n         LA    R4,MSG2+8           POINT TO MESSAGE AREA\n         MVI   MSG2+6,X'40'\n         MVC   MSG2+7(69),MSG2+6   BLANK MESSAGE AREA\nINLOOP   MVC   WXTNT+3(1),1(R9)    MOVE EXTENT # TO WORK AREA\n         UNPK  0(2,R4),WXTNT+3(2)  UNPACK EXTENT #\n         TR    0(1,R4),TRTBL       TRANSLATE EXTENT #\n         MVC   WXTNT(4),2(R9)      MOVE BEGIN XTNT TO WORK AREA\n         UNPK  2(9,R4),WXTNT(5)    UNPACK XTNT\n         TR    2(8,R4),TRTBL       TRANSLATE EXTENT\n         MVC   WXTNT(4),6(R9)      MOVE END XTNT TO WORK AREA\n         UNPK  11(9,R4),WXTNT(5)   UNPACK XTNT\n         TR    11(8,R4),TRTBL      TRANSLATE EXTENT\n         LA    R9,10(R9)           BUMP TO NEXT EXTENT\n         LA    R4,22(R4)           BUMP MESSAGE AREA POINTER\n         BCTR  R2,0                DECREASE # EXTENTS\n         LTR   R2,R2               ANY MORE EXTENTS\n         BZ    *+8                  NO\n         BCT   R3,INLOOP           CONVERT NEXT EXTENT\n         LA    R0,L'MSG2\n         LA    R1,MSG2\n         SVC   93                  TPUT EXTENTS\n         MVC   MSG2(6),BLANKS      BLANK VOLSER\n         LTR   R2,R2               ANY MORE EXTENTS?\n         BNZ   OUTLOOP              YES\nOBTNRET  LM    R2,R11,OBTNSAVE     RELOAD CALLER'S REGISTERS\n         BR    R9                  RETURN TO CALLER\n         TITLE 'DSATTR - EOJ AND ERROR ROUTINES'\nRETC     EQU   *\n         L     13,SAVE+4           LOAD R13 PREVIOUS SPACE AREA\n         LM    2,12,28(13)         RELOAD REGISTERS\n         L     14,12(13)           LOAD RETURN ADDRESS\n         MVI   12(13),X'FF'        INDICATE CONTROL RETURN CALLING PROG\n         BCR   15,14               RETURN TO CALLING PROGRAM\n         SPACE 3\nERR01    EQU   *\n* NO VALID COMMAND\n         TPUT  ERMSG1,18\n         B     RETC                BRANCH TO RETURN CODE\n* DATASET NAME NOT FOUND\nERR03    MVC   MSG2(L'ERMSG9),ERMSG9\n         MVC   MSG2+L'ERMSG9(44),DSN1\n         LA    R0,L'ERMSG9+44\n         LA    R1,MSG2\n         SVC   93\n         TM    FLAG,X'40'\n         BO    LOOP\n         TM    FLAG,X'10'\n         BO    RETDSN\n         B     OBTNRET\n         SPACE 3\nRDERR    MVC   MSG2(L'ERMSG8),ERMSG8\n         MVC   MSG2+L'ERMSG8(44),DSN1\n         LA    R0,L'ERMSG8+44\n         LA    R1,MSG2\n         SVC   93\n         B     LOOP                CONTINUE THRU LOOP\n         SPACE 3\nNOUSER   MVC   MSG2(L'ERMSG3),ERMSG3\n         MVC   MSG2+L'ERMSG3(44),USERID\n         LA    R0,L'ERMSG3+44\n         LA    R1,MSG2\n         SVC   93\n         B     RETC                RETURN TO SYSTEM\n         SPACE 3\nNOTDISK  MVC   MSG2(L'ERMSG6),ERMSG6\n         MVC   MSG2+L'ERMSG6(44),DSN1\n         LA    R0,L'ERMSG6+44\n         LA    R1,MSG2\n         SVC   93\n         B     LOOP                PICK UP NEXT DATASET\n         SPACE 3\nMULTIVOL MVC   MSG2(L'ERMSG7),ERMSG7\n         MVC   MSG2+L'ERMSG7(44),DSN1\n         LA    R0,L'ERMSG7+44\n         LA    R1,MSG2\n         SVC   93\n         B     LOOP                CONTINUE WITH NEXT DSN\n         SPACE 3\nERRF     EQU   *\n         TPUT  ERMSG10,20\n         B     RETC\nERRF4    EQU   *                   ERROR READING F4\n         TPUT  ERMSG11,21\n         B     VOLRET\nUSIDMVC  MVC   0(0,R8),0(R10)\nDSNMVC   MVC   0(0,R8),0(R5)\nMVCVOLS  MVC   0(0,R1),0(R5)\n         TITLE 'DSATTR - DATA AREAS'\nENDLIST  DS    0F\n         DC    XL4'FF000000'\n* SETUP CONSTANTS\nVOLDSCTK DC    H'0'                NUM DSCH ON A TRK\nVOLF4CHR DC    XL5'00'             CCHHR OF DSCB\nVOLNO    DC    H'0'                NUM VOLUMES PROCESSED\nPEXCTR   DC    H'0'                CTR FOR TATAL NUM FREE SPACE\nLASTTRK  DC    H'0'\nDSN1     DC    CL44' '              DATASET NAME\nDSNSAVE  DC    CL44' '\nVOLS     DC    CL6' '                 VOLUME SER\nUSERID   DC    CL44' '              USERID\nFLAG     DC    X'00'\nDSORG    DC    X'00'\nBLANKS   DC    CL6' '\nBUF1     DS    0D\n         DS    265C\nTRTBL    EQU   *-240\n         DC    C'0123456789ABCDEF'\nMASKED   DC    XL6'402020202020'   MASK FIELD FOR EDIT\n         SPACE 3\n* MESSAGE TO BE PRINTED\nMSG1     DC    C'DSORG RECFM LRECL BLKSIZE  DSNAME'\nMSG2     DC    CL76' '\nMSG4     DC    C'VOLUME DSCBS EXTENTS TRACKS  VTOC'\n         SPACE 3\n* ERROR MESSAGES\nERMSG1   DC    C'NO VALID COMMAND'\nERMSG3   DC    C'INVALID LEVEL - '\nERMSG6   DC    C'DSN NOT ON DISK - '\nERMSG7   DC    C'DSN ON MULTIVOLUMES - '\nERMSG8   DC    C'ERROR READING CATALOG DSN - '\nERMSG9   DC    C'DSN NOT FOUND - '\nERMSG10  DC    C'UNSUPPORTED KEYWORD'\nERMSG11  DC    C'ERROR READING F4 DSCB'\n         EJECT\n* CAMLST FOR DSCB3\nSEEKCAM  CAMLST SEEK,VTOCCHHR,VOLS,BUF1\n         SPACE 2\n* CAMLST LOCATE DSN OV VOL SER\nINDS     CAMLST NAME,DSN1,,BUF1\n         SPACE 2\n* CAMLST FOR DSCB 1\nSERCHCAM CAMLST SEARCH,DSN1,VOLS,BUF1\n         EJECT\n* CONSTANTS AND WORK AREAS\nHWK1     DC    H'0'                HALF WORD WORK AREA\nVOLTKCYL DC    H'19'               # TRKS/CYL\nVTOCCHHR DC    XL5'0'              TRACK ADDR WORK AREA\nWKD      DC    D'0'                DOUBLE WORK WORK AREA\n         SPACE 3\n* PARM SETUP FOR GETDSN\nPARM     DC    A(USERID)           USERID ADDRESS\n         DC    A(DSN1)             DSN ADDRESS\n         DC    A(VOLS)             VOL SER ADDRESS\n         DC    A(0)                ADDRESS FOR GETMAIN\n         SPACE 3\n* EQUATE REGISTERS\n         EQUATE\nRCC      EQU   R8\nRHH      EQU   R7\nRR       EQU   R6\n         TITLE 'DSATTR - PARSE PARAMETER LIST'\nPARSLIST IKJPARM\nDSNKYD   IKJKEYWD\n         IKJNAME 'DATASET',SUBFLD=DSNSUBF\nLEVL     IKJKEYWD\n         IKJNAME 'LEVEL',SUBFLD=LVL\nVOLUME   IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VLM\nEXTENT   IKJKEYWD\n         IKJNAME 'EXTENTS'\nDSNSUBF  IKJSUBF\nDSNLIST  IKJPOSIT DSNAME,LIST\nLVL      IKJSUBF\nLEV      IKJIDENT 'LEVEL',OTHER=ANY,MAXLNTH=44\nVLM      IKJSUBF\nVOL      IKJIDENT 'VOLUME',LIST,FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6\n         IKJENDP\n         IKJPPL\n         IKJCPPL\n         TITLE 'DSATTR - WORK AREA'\nWORKAREA DSECT\nWPPL     DS    7A\nCPECB    DS    F\nWPDL     DS    F\nOBTNSAVE DS    10F\nXTNTS    DS    16XL10\nWXTNT    DS    CL5\n         DS    0D\nLOCINDXW EQU   *\nLWORK    EQU   *-WORKAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSN3@ATH": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xb4\\x00\\xb4\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 180, "newlines": 180, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DSN3@ATH - DB2 AUTHORIZATION EXIT'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = DSN3@ATH                                       *\n*                                                                     *\n*        DESCRIPTIVE NAME =                                           *\n*               DB2 AUTHORIZATION EXIT USED TO CHANGE DB2             *\n*               AUTHORIZATION IDS                                     *\n*                                                                     *\n*        FUNCTION =                                                   *\n*              PROGRAM CHECKS SUPPLIED USERID FOR A CONNECT TO A      *\n*              DB2 GROUP. IF THE CONNECTION EXISTS, THE GROUP NAME    *\n*              IS SUBTITUTED FOR THE USERID AND WILL BE USED AS THE   *\n*              DB2 AUTHORIZATION ID.                                  *\n*                                                                     *\n*        OPERATION =                                                  *\n*              SAVE REGISTERS AND ESTABLISH ADDRESSABILITY            *\n*              ESTABLISH ADDRESSABILITY TO CGRP                       *\n*              CHECK FOR CONNECT TO DB2* GROUP                        *\n*              RESTORE REGISTERS                                      *\n*              RETURN                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        NOTES =                                                      *\n*                                                                     *\n*              REGISTER CONVENTIONS = NONSTANDARD USAGE, HOWEVER,     *\n*                               REGISTERS ARE SAVED AND RESTORED      *\n*                               ON ENTRY AND EXIT.                    *\n*                  REGISTER  1      = PARAMETER LIST POINTER          *\n*                  REGISTER  2      = ADDRESS OF AUTHORIZATION ID     *\n*                  REGISTERS 3 - 11 = WORK REGISTERS                  *\n*                  REGISTER  12     = BASE REGISTER                   *\n*                  REGISTER  13     =                                 *\n*                  REGISTER  14     = RETURN                          *\n*                  REGISTER  15     = ENTRY POINT ADDRESS AND         *\n*                                     RETURN CODE REGISTER            *\n*                                                                     *\n*           REASON FOR NONSTANDARD USAGE : A GETMAIN COULD NOT BE     *\n*                           DONE, BUT THIS EXIT STILL NEEDED TO       *\n*                           BE REENTRANT.                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        MACROS =                                                     *\n*              SAVE, RETURN, EQUATE                                   *\n*                                                                     *\n*        MAPPING MACROS USED =                                        *\n*              CVT, IHAASCB, IHAASXB, IHAACEE, ICHPCGRP               *\n*                                                                     *\n*        ASSEMBLER OPTIONS = LIST,RENT                                *\n*                                                                     *\n*        LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,AC=1,            *\n*               RMODE=ANY,AMODE=31                                    *\n*              (MUST BE LINKED INTO AN AUTHORIZED LIBRARY)            *\n*                                                                     *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              06/03/86  WRITTEN.                               MCR.  *\n*              03/17/87  CHANGED TO NOT USE 'DB2' AS            MCR.  *\n*                          AN AUTHORIZATION-ID.\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\n*\nDSN3@ATH CSECT\n         SAVE  (2,13),,DSN3@ATH_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING DSN3@ATH,R12            ESTABLISH ADDRESSABILITY\n         L     R2,4(R1)                SAVE ADDRESS OF DB2 AUTH ID\n         EJECT\n***********************************************************************\n*        SET UP ADDRESSABILITY TO CGRP\n***********************************************************************\nCGRPADDR DS    0H\n         L     R3,CVTPTR               R3 - ADDRESS OF CVT\n         L     R3,0(R3)                R3 - PTR TO FOUR WORD ADDR  LIST\n         L     R3,12(R3)               R3 - ADDRESS OF CURRENT ASCB\n         USING ASCB,R3                 ESTABLISH ADDRESSABILITY TO ASCB\n         L     R3,ASCBASXB             R3 - ADDRESS OF ASXB\n         USING ASXB,R3                 ESTABLISH ADDRESSABILITY TO ASXB\n         L     R3,ASXBSENV             R3 - ADDRESS OF ACEE\n         USING ACEE,R3                 ESTABLISH ADDRESSABILITY TO ACEE\n         L     R3,ACEECGRP             R3 - ADDRESS OF CGRP\n         USING CGRP,R3                 ESTABLISH ADDRESSABILITY TO CRGP\n***********************************************************************\n*        CHECK FOR GROUP NAMES THAT START WITH DB2\n***********************************************************************\n         SLR   R5,R5                   CLEAR REGISTER 5\n         LH    R5,CGRPNUM              R5 = NUMBER OF GROUPS USER IS\n*                                                     CONNECTED TO\n         LTR   R5,R5                   IF FOR SOME REASON THERE ARE NO\n         BZ    FINISH                       GROUPS, THEN END\n         LA    R4,32(R3)               CGRPENT STARTS 32 CHARACTERS\n*                                                     AFTER CGRP\nNEXTGRP  EQU   *\n         USING CGRPENTD,R4          ESTABLISH ADDRESSABILITY TO CRGPENT\n*\n         CLC   DB2GROUP,CGRPNAME       SEE IF GROUPNAME IS 'DB2'\n         BE    SETGROUP                 IF IT IS, SET UP FOR NEXT GROUP\n         CLC   DB2NAME,CGRPNAME        SEE IF GROUPNAME STARTS WITH DB2\n         BE    CHGGROUP                  IF IT DOES, GO TO CHANGE GROUP\nSETGROUP EQU   *\n         LA    R4,24(R4)               ELSE  SET TO NEXT ENTRY AND\n         BCT   R5,NEXTGRP                   GO TO NEXT GROUP IF PRESENT\n*\n         B     FINISH                  NO DB2 GROUP FOUND SO END.\nCHGGROUP EQU   *\n         MVC   0(8,R2),CGRPNAME      MOVE GROUPNAME TO DB2\n*                                             AUTHORIZATION ID.\n***********************************************************************\n*        CLEANUP AREAS GETMAINED\n*        SET RETURN CODE, RESTORE REGISTERS AND RETURN\n***********************************************************************\nFINISH   DS    0H\n         RETURN (2,13),RC=(15)        RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n         EJECT\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nDB2NAME  DC    CL3'DB2'                DB2\nDB2GROUP DC    CL4'DB2 '               DB2GROUP\n***********************************************************************\n*        ERROR AND INFORMATIONAL MESSAGES\n***********************************************************************\n***********************************************************************\n***********************************************************************\n*        DSECT FOR COMMUNICATIONS VECTOR TABLE\n***********************************************************************\n         CVT DSECT=YES,LIST=YES\n         EJECT\nDSN3@ATH CSECT\n***********************************************************************\n*        DSECT FOR ADDRESS SPACE CONTROL BLOCK\n***********************************************************************\n         IHAASCB DSECT=YES\n         EJECT\nDSN3@ATH CSECT\n***********************************************************************\n*        DSECT FOR ADDRESS SPACE EXTENSION BLOCK\n***********************************************************************\n         IHAASXB DSECT=YES\n         EJECT\nDSN3@ATH CSECT\n***********************************************************************\n*        DSECT FOR ACCESSOR ENVIRONMENT ELEMENT\n***********************************************************************\n         IHAACEE\n         EJECT\nDSN3@ATH CSECT\n***********************************************************************\n*        DSECT FOR CONNECT GROUP NAME TABLE DEFINITION\n***********************************************************************\n         ICHPCGRP\n         EJECT\nDSN3@ATH CSECT\n***********************************************************************\n         EJECT\nDSN3@ATH CSECT\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         EJECT\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\n         DS    0F\nSAVEAREA DS    18F                     DSN3@ATH SAVE AREA\nWORKLEN  EQU   *-WORKAREA\n***********************************************************************\n         END   DSN3@ATH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUDASD": {"ttr": 6153, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xbc\\x00\\xbc\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 188, "newlines": 188, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'D U D A S D R   ---   D A S D   V S N   D I S P L A Y'\nDUDASDR  CSECT\n***********************************************************************\n*              PERFORM PROCESSING INITIALIZATION                      *\n***********************************************************************\n         PRINT NOGEN\n         SAVE  (14,12),,DUDASDR-&SYSDATE-&SYSTIME   SAVE REGISTERS\n         LR    R11,R15                 LOAD REG 11 WITH ENTRY ADDRESS\n         USING DUDASDR,R11             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R12,4095(R11)           LOAD REG 12 WITH ENTRY ADDR 4095\n         USING DUDASDR+4095,R12        ESTABLISH ADDRESSABILTY TO\n*                                      REST OF PROGRAM\n         LR    R5,R1                   PRESERVE PTR TO CPPL CNTL BLK\n         GETMAIN R,LV=LDYNAMIC         GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  PRESERVE PTR TO WORKAREA\n         ST    R13,4(R10)              STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R10,8(,R13)             STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R10                 LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         USING CPPL,R5                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R4,IOPLSECT             LOAD ADDR OF PUTLINE PARM LIST\n         USING IOPL,R4                 ESTABLISH ADDRESSABILITY TO IOPL\n         L     R1,CPPLUPT              LOAD PTR TO USER PROFILE TABLE\n*                                      FROM CPPL\n         L     R2,CPPLECT              LOAD PTR TO ENVIRONMENTAL\n*                                      CONTROL TABLE FROM CPPL\n         SLR   R3,R3                   ZERO REGISTER 3\n         ST    R3,ECB                  STORE REG AS ECB FOR IOPL\n         LA    R3,ECB                  LOAD ADDRESS OF ECB\n         STM   R1,R3,IOPLSECT          STORE ADDRESS OT UPT, ECT, AND\n*                                      ECB IN IOPL\n         LA    R3,PUTLINE              LOAD ADDRESS OF PUTLINE\n*                                      PARAMETER BLOCK\n         ST    R3,IOPLIOPB             STORE IOPB ADDRESS IN IOPL\n         DROP  R4,R5                   DROP ADDRESSABILITY - CPPL/IOPL\n         USING CVT,R4                  R4 - ADDRESSABILITY / CVT\n         USING UCBCMSEG,R5             R5 - ADDRESSABILITY / UBC\n         XC    PREFIX(4),PREFIX        CLEAR PUTLINE SINGLE-LINE HEADER\n         LA    R15,L'BUFFER+4          R15 - LENGTH OF OUTPUT-LINE+HDR\n         STH   R15,PREFIX              STORE R15 (LENGTH) INTO HEADER\n         L     R4,16                   LOAD R4 WITH ADDRESS OF CVT\n         L     R5,CVTUCBA              LOAD R5 WITH ADDRESS OF 1ST UCB\n***********************************************************************\n*  DULINE      OUTPUT LINE PROCESSING LOOP                            *\n***********************************************************************\nDULINE   EQU   *\n         MVC   BUFFER(L'BUFFER),SPACES    CLEAR OUTPUT-LINE\n         LA    R6,BUFFER               R6 - INDEX TO OUTPUT ELEMENT\n         LA    R7,L'BUFFER/L'ELEMENT   R7 - NUM OF ELEMENTS PER LINE\n         USING ELEMENT,R6              R6 - ADDRESSABILITY / ELEMENT\n***********************************************************************\n*  DUUNIT      OUTPUT ELEMENT PROCESSING LOOP                         *\n***********************************************************************\nDUUNIT   EQU   *\n         LTR   R5,R5                   IS THIS THE LAST UCB IN CHAIN?\n         BZ    PUT                     YES, WRITE OUTPUT-LINE TO TERM\n         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE?\n         BNO   NEXTUCB                 NO, GET NEXT UCB IN CHAIN\n         CLC   LASTUCB,UCBNAME         UNIT ALREADY BEEN DISPLAYED?\n         BE    NEXTUCB                 YES, GET NEXT UCB IN CHAIN\n         MVC   LASTUCB,UCBNAME         UPDATE FOR DUPLICATE UNIT CHECK\n         MVC   ELEUNIT,UCBNAME         MOVE UCBNAME TO OUTPUT ELEMENT\n         MVC   ELEVSN,UCBVOLI          MOVE VOLSER TO OUTPUT ELEMENT\n         TM    UCBSTAT,UCBONLI         IS THIS DEVICE ONLINE?\n         BO    ONLINE                  YES, PROCESS ONLINE VOLUME\n         MVC   ELEVSN,=CL6'(OFF)'      NO, MOVE 'OFFLINE' INDICATOR\n*                                      TO OUTPUT ELEMENT\n         B     ULOOP                   PROCESS NEXT UCB IN CHAIN\nNEXTUCB  EQU   *\n         L     R5,UCBNXUCB             R5 - ADDR OF NEXT UCB IN CHAIN\n         B     DUUNIT                  PROCESS NEXT UCB IN CHAIN\nONLINE   EQU   *\n         MVI   ELEDASH,C'-'            MOVE '-' TO OUTPUT ELEMENT\n         MVI   ELESTAT,C'O'            MOVE 'ONLINE UNALLOCATED'\n*                                      INDICATOR TO OUTPUT ELEMENT\n         TM    UCBSTAT,UCBALOC         IS THIS DEVICE ALLOCATED?\n         BNO   PENDOFF                 NO, CHECK FOR PENDING OFFLINE\n         MVI   ELESTAT,C'A'            YES, MOVE 'ONLINE ALLOCATED'\n*                                      INDICATOR TO OUTPUT ELEMENT\nPENDOFF  EQU   *\n         TM    UCBSTAT,UCBCHGS         IS THIS VOLUME PENDING OFFLINE?\n         BNO   RESERV                  NO, CHECK TO SEE IF VOL RESERVED\n         MVI   ELESTAT,C'P'            YES, MOVE 'PENDING OFFLINE'\n*                                      INDICATOR TO OUTPUT ELEMENT\nRESERV   EQU   *\n         CLI   UCBSQC,X'00'            IS THIS VOLUME RESERVED FOR TSO?\n         BE    MOUNT                   NO, CHECK MOUNT STATUS\n         MVI   ELERSRV,C'R'            YES, MOVE 'TSO RESERVED'\n*                                      INDICATOR TO OUTPUT ELEMENT\nMOUNT    EQU   *\n         TM    UCBSTAT,UCBRESV         IS VOLUME RESERVED (MOUNT)?\n         BZ    RESIDENT                NO, CHECK TO SEE IF RES VOL\n         MVC   ELEMSTAT(3),=C'RSV'     YES, MOVE 'MOUNT STAT RESERVED'\n*                                      INDICATOR TO OUTPUT ELEMENT\n         B     ULOOP                   PROCESS NEXT UCB IN CHAIN\nRESIDENT EQU   *\n         TM    UCBSTAT,UCBPRES         IS THIS VOLUME PERM. RESIDENT?\n         BZ    ULOOP                   NO, PROCESS NEXT UCB IN CHAIN\n         MVC   ELEMSTAT(3),=C'RSD'     YES, MOVE 'PERMANENTLY RESIDENT'\n*                                      INDICATOR TO OUTPUT ELEMENT\nULOOP    EQU   *\n         LA    R6,ELENEXT              POINT TO NEXT OUTPUT ELEMENT\n         L     R5,UCBNXUCB             R5 - ADDR OF NEXT UCB IN CHAIN\n         BCT   R7,DUUNIT               PROCESS NEXT OUTPUT ELEMENT\n***********************************************************************\n*  PUT         WRITE OUTPUT-LINE ROUTINE                              *\n***********************************************************************\nPUT      EQU   *\n         CLC   BUFFER,SPACES           IS THIS THE LAST OUTPUT-LINE?\n         BE    DONE                    YES, WE'RE DONE\n         PUTLINE PARM=PUTLINE,MF=(E,IOPLSECT),ECB=ECB,                 +\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     +\n               OUTPUT=(PREFIX,TERM,SINGLE,DATA)\n         B     DULINE\n***********************************************************************\n*  DONE        FREE GETMAINED AREA, RESTORE REGISTERS,                *\n*              SET RETURN CODE AND EXIT                               *\n***********************************************************************\nDONE     EQU   *\n         LA    R0,LDYNAMIC             R0 - LENGTH OF DYNAMIC WORK AREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR OF CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC WORK AREA\n         SRL   R15,R15                 CLEAR R15 (RETURN CODE)\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         LTORG\n***********************************************************************\n*              GENERAL DECLARE AND EQUATE STATEMENTS                  *\n***********************************************************************\nR0       EQU   00                      LENGTH OF DYNAMIC SAVE AREA\nR1       EQU   01                      PARAMETER PTR AND WORK REGISTER\nR2       EQU   02                      PTR TO ENVIRONMENTAL CONTROL TBL\nR3       EQU   03                      WORK REGISTER\nR4       EQU   04                      PTR TO IOPL AND CVT\nR5       EQU   05                      PTR TO CPPL AND UCB\nR6       EQU   06                      INDEX TO OUTPUT ELEMENT\nR7       EQU   07                      NUMBER OF ELEMENTS / OUTPUT LINE\nR8       EQU   08                      NOT USED\nR9       EQU   09                      NOT USED\nR10      EQU   10                      WORK REGISTER\nR11      EQU   11                      NOT USED\nR12      EQU   12                      ADDRESSABILITY TO CSECT\nR13      EQU   13                      PTR TO SAVE AREA\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY PT ADDRESS & RETURN CODE\nSPACES   DC    80C' '\nELEWRK   DSECT\nELEMENT  DS    0CL20\nELEUNIT  DS    CL3\n         DS    CL1\nELEVSN   DS    CL6\nELEDASH  DS    CL1\nELESTAT  DS    CL1\nELERSRV  DS    CL1\nELEMSTAT DS    CL3\n         DS    CL2\nELENEXT  DS    0CL1\n***********************************************************************\n*              CONTROL BLOCK DSECTS                                   *\n***********************************************************************\n         TITLE 'IOPL DSECT'\n         IKJIOPL\nIOPLLEN  EQU   *-IOPL\n         TITLE 'CPPL DSECT'\n         IKJCPPL\nCPPLLEN  EQU   *-CPPL\n         TITLE 'UCB DSECT'\n         IEFUCBOB\n         TITLE 'CVT DSECT'\n         CVT   DSECT=YES\n***********************************************************************\n*              DSECT FOR GETMAINED WORK AREA                          *\n***********************************************************************\nWORKAREA DSECT\nSSA      DS    18F\nIOPLSECT DS    0F\n         ORG   IOPLSECT+IOPLLEN\nECB      DS    01F\nLASTUCB  DS    CL3\nPREFIX   DS    2H\nBUFFER   DS    CL(L'ELEMENT*4)\nPUTLINE  PUTLINE MF=L\nLDYNAMIC EQU   *-WORKAREA\n         END   DUDASDR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENQ": {"ttr": 6157, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x030\\x030\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 816, "newlines": 816, "modlines": 0, "user": "DELUXE"}, "text": "         MACRO\n&LBL     MSG   &PARM\n         LCLA  &A\n&A       SETA  2+K'&PARM\n&LBL     DC    0H'0',AL2(&A,0)\n         DC    C&PARM\n         MEND\nENQ      CSECT\n         PUSH  PRINT\n         PUSH  PRINT\n         PRINT OFF,GEN\n         POP   PRINT\n         DS    0F\nWDSECT   DSECT\n         DC    AL1(1),AL3(0)           SP AND LENGTH OF WORK AREA\n         DC    3A(0)                   R13 CHAIN, STAKMAX AND STACKERR\n         L     R15,12(R12)             ADDR OF STACK OVERFLOW ROUTINE\n         BR    R15                     CALL THE ROUTINE\nAREAA    DS    F                       ADDRESS OF Q AREA\nAREAL    DS    F                       LENGTH OF AREA\nRIBL     DS    H                       LENGTH OF RIB\nRIBEL    DS    H                       LENGTH OF RIBE\nTOKEN    DS    F                       TOKEN FOR GQSCAN\nGQRC     DS    F                       RETURN CODE FROM GQSCAN\nNRIBS    DS    F                       NUMBER OF RIBS RETURNED\nNRIBES   DS    F                       NUMBER OF RIBES THIS RIB\nNCRIBES  DS    F                       NUMBER OF RIBES IN THIS AREA\nGQLIST   GQSCAN MF=L\nIOPLL    DS    4F\nTSOECB   DS    F\nGETADDR  DS    F                       ADDR OF BUF RETURNED BY PUTGET\nGETLEN   DS    F                       LENGTH OF BUF RETURNED BY PUTGET\nCURIN    DS    F                       PTR TO CURRENT INPUT POSITION\nCUREND   DS    F                       PTR PAST END OF CURRENT INPUT\nOLD      DS    2F                      OUTPUT LINE DESCRIPTOR\nPARMLSTS EQU   *\nPUTLL    PUTLINE MF=L                  PUTLINE PARM BLOCK\n         ORG   PARMLSTS\nPUTGETL  PUTGET  MF=L                  PUTGET PARM BLOCK\n         ORG   PARMLSTS\nGETMAINL GETMAIN VC,MF=L\n         ORG   PARMLSTS\nFREEML   FREEMAIN VU,MF=L\n         ORG\nQNL      DS    H                       QNAME LENGTH\nRNL      DS    H                       RNAME LENGTH\nJNL      DS    H                       JOBNAME LENGTH\nFLGS     DS    X\nCONTFLG  EQU   X'80'                   RIB HAS BEEN FORMATTED\nCONFLG   EQU   X'40'                   CONFLICT COMMAND IN EFFECT\nFINDFLG  EQU   X'20'                   FIND COMMAND IN EFFECT\nGLOBFLG  EQU   X'10'                   GLOBAL COMMAND IN EFFECT\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nQNAME    DS    CL8                     QUEUE NAME\nJNAME    DS    CL8                     JOB NAME\nRNAME    DS    CL255                   RNAME\nPRTLEN   DS    H                       PRINTLINE LENGTH\nPRTOFF   DS    H                       OFFSET\nPRTBUFF  DS    (300)CL1                OUTPUT BUFFER\nSTACK    DC    0D'0'\n         DC    216XL1'0'               STACK AREA\nXO0001   EQU   4096*(((*-WDSECT)+4095)/4096)\n         ORG   WDSECT+XO0001\nXL0001   EQU   *-WDSECT\nENQ      CSECT\n         B     18(R15)                 BRANCH AROUND ID\n         DC    AL1(13)                 IDENTIFIER LENGTH\n         DC    CL13'ENQ_&SYSDATE'      IDENTIFIER\n         STM   14,12,12(13)            SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING ENQ,R10                 ESTABLISH ENQ ADDRESSABILITY\n         LR    R9,R1                   SAVE PARM REGISTER\n         USING CPPL,R9                 ESTABLISH CPPL ADDRESSABILITY\n         GETMAIN R,LV=XL0001           GETMAIN DYNAMIC WORK AREA\n         MVC   0(4,R1),*-10            COPY SP AND LENGTH\n         ST    R13,4(R1)               SAVE AREA CHAINING\n         ST    R1,8(R13)               ESTABLISH ADDRESSABILITY\n         LR    R12,R1                  MOVE BASE OF WORK AREA\n         USING WDSECT,R12\n         L     R13,=A(STACK-WDSECT)    GET OFFSET TO STACK\n         ALR   R13,R12                 POINT TO START OF STACK\n         A     R1,=A(XL0001-71)        GET ADDR OF STACK MAX\n         ST    R1,8(R12)               SAVE INTO WORK AREA\n         MVC   16(6,R12),=XL6'58FC000C07FF'\n         LA    R1,OVERFLOW             GET OVERFLOW ROUTINE ADDRESS\n         ST    R1,12(R12)              STORE INTO WORK AREA\n         B     INITIAL                 BEGIN INITIALIZATION\nOVERFLOW EQU   *\n         BALR  R15,0                   GET A BASE\n         USING *,R15                   ESTABLISH ADDRESSABILITY\n         WTO   'STACK OVERFLOW IN ENQ',ROUTCDE=11,DESC=7\n         DROP  R15\n         ABEND 900,DUMP                PRODUCE DUMP\n         B     EXIT                        AND RETURN\n         TITLE 'ENQ - INITIALIZATION'\n*\n*        INITIALIZATION\n*\nINITIAL  EQU   *\n         LA    R8,IOPLL                INITIALIZE THE IOPL\n         USING IOPL,R8                 ESTABLISH IOPL ADDRESSABILITY\n         MVC   IOPLUPT(4),CPPLUPT      COPY UPT ADD FROM CPPL\n         MVC   IOPLECT(4),CPPLECT      COPY ECT ADD FROM CPPL\n         LA    R1,TSOECB               GET TSO ECB ADDRESS\n         ST    R1,IOPLECB              STORE IN IOPL\n         DROP  R8,R9                   IOPL, CPPL\n         LA    R1,PRTLEN               INITIALIZE TO OLD\n         ST    R1,OLD+4                STORE OUTPUT BUF ADD IN OLD\n         LA    R1,1                    GET NUMBER OF OUTPUT SEGMENTS\n         ST    R1,OLD                  STORE IN OLD\n         XC    PRTOFF(2),PRTOFF        ZERO OFFSET OF FIRST SEGMENT\n         MVC   GETMAINL(GETMLEN),GETMDC    BUY AN AREA FOR GQSCAN\nGETAREA  GETMAIN VC,LA=MEMLOW,A=AREAA,MF=(E,GETMAINL),SP=1,            X\n               RELATED=(FREEAREA)\n         LTR   R15,R15\n         BZ    CONFL1\n         LA    R1,NOMEM                COMPLAIN ABOUT LACK OF MEMORY\n         L     R15,=A(PRINT)\n         BALR  R14,R15\n         LA    R15,4\n         B     EXIT\n*\n*        ON ENTRY WE ASSUME THE CONFLICT COMMAND\n*\nCONFL1   MVI   FLGS,CONFLG             INIT THE FLAG\n         XC    QNL(6),QNL              ZERO LENGTHS\n         MVC   GQLIST(CONQL),CONQ      INIT PARM LIST\n         TITLE 'ENQ - MAIN Q SCAN/FORM AT LOOP'\n*\n*        MAIN  Q SCAN/FORMAT LOOP  FOR ALL COMMANDS\n*\nENQLP    EQU   *\n         L     R15,=A(SCAN)            GO SCAN QUEUES\n         BALR  R14,R15\n         BZ    ENQLP1                  RESOURCE FOUND\n         TM    FLGS,CONFLG             CONFLICT REQUEST?\n         BNO   GETCMD                  NO, DON'T ISSUE MESSAGE\n         LA    R1,CONFLPRM             POINT TO NO CONFLICTS FOUND MSG\n         ST    R1,OLD+4                STORE IN OLD\n         L     R15,=A(PRINT)\n         BALR  R14,R15\n         BZ    GETCMD                  GET COMMAND\nENQLP1   EQU   *\n         L     R9,AREAA                POINT TO FIRST RIB\n         USING RIB,R9\n*\n*        LOOP  TO HERE AFTER RESCAN WHERE ALL RIBES FOR THE\n*              PREVIOUS RIB OCCURED  IN THE PREVIOUS AREA\n*\nENQLP2   MVC   NRIBES(4),RIBTRIBE      TOTAL NUM OF RIBE'S FOR THIS RIB\n         NI    FLGS,X'FF'-CONTFLG      MARK START OF RIB\n         MVC   NCRIBES(4),RIBNRIBE     SAVE # RIBES THIS AREA\n         LR    R8,R9                   COPY RIB ADDR\n         AH    R8,RIBL                 ADD RIBLENGTH RETURN BY GQSCAN\n         AH    R8,RIBVLEN              ADD LENGTH OF VARIABLE PORTION\n         USING RIBE,R8\n*\n*        LOOP  TO HERE TO PROCESS  A RIBE\n*\nENQLP3   EQU   *\n         L     R15,=A(FINDCHK)         SEE IF WE PRINT THIS ONE\n         BALR  R14,R15\n         BNZ   ENQ2                    IF NOT NO PRINT\n         L     R15,=A(FMTRIBE)         FORMAT JOB INFO\n         BALR  R14,R15\n         L     R15,=A(FMTRIB)          FORMAT QNAME, RNAME INFO\n         BALR  R14,R15\n         L     R15,=A(PRINT)\n         BALR  R14,R15\n         BNZ   GETCMD                  IF ATTN, QUIT\nENQ2     AH    R8,RIBEL                POINT TO NEXT RIBE\n         L     R1,NRIBES               GET # UNPROCESSED RIBES THIS RIB\n         BCT   R1,ENQ4                 DECREMENT\n*\n*        FINISHED WITH THE RIBES IN THIS RIB\n*        ADJUST POINTER AND DECREMENT NUMBER OF RIBS\n*\nENQ2A    LR    R9,R8                   ITS A RIB NOT A RIBE\n         NI    FLGS,X'FF'-CONTFLG      MARK START OF RIB\n         L     R1,NRIBS                GET # UNPROCESSED RIBS\n         BCT   R1,ENQ3                 DECREMENT\n*\n*        FINISHED WITH ALL THE RIBS IN THIS AREA\n*        CHECK RC TO SEE IF THAT  WAS THE LAST RIB\n*\n         ICM   R1,15,GQRC              CHECK FOR END OF LIST\n         BZ    GETCMD\n         L     R15,=A(RESCAN)          GET NEXT CHUNK OF STUFF\n         BALR  R14,R15\n         L     R9,AREAA                POINT TO FIRST RIB\n         BZ    ENQLP2\n         B     GETCMD                  TOTAL NUM OF RIBE'S FOR THIS RIB\n*\n*        THERE IS AT LEAST ONE UNPROCESSED RIB IN THIS AREA\n*\nENQ3     ST    R1,NRIBS                STORE NEW #\n         B     ENQLP2                  GO PROCESS THIS RIB\n*\n*        THERE IS AT LEAST ONE UNPROCESSED RIBE IN THIS RIB\n*\nENQ4     ST    R1,NRIBES               STORE NEW #\n         L     R1,NCRIBES              GET # UNPROCESSED RIBS THIS AREA\n         BCT   R1,ENQ5\n*\n*        THE RIBES FOR THIS RIB SPAN THIS AREA\n*        PUT OUT A MSG OF (*MORE*) AND PROCESS THE NEXT RIB\n*\n         LA    R1,MOREM                POINT TO MORE MESSAGE\n         ST    R1,OLD+4                STORE IN OLD\n         L     R15,=A(PRINT)\n         BALR  R14,R15\n         BZ    ENQ2A                   PROCESS NEXT RIB\n         B     GETCMD                  IF ATTN PROCESS NEXT CMD\n*\n*        THERE  IS AT LEAST ONE UNPROCESSED RIBE IN THIS AREA\n*\nENQ5     ST    R1,NCRIBES              STORE NEW #\n         B     ENQLP3                  GO FORMAT THIS ONE\n         TITLE 'ENQ - COMMAND REQUESTOR'\n*\n*        COMMAND REQUESTOR\n*\nGETCMD   NI    FLGS,CONFLG+FINDFLG+GLOBFLG    CLEANUP FLAGS\n         LA    R1,HERALD               POINT TO HERALD\n         ST    R1,OLD+4                STORE IN OLD\n         MVC   PUTGETL(PUTGTDCL),PUTGETDC    INIT PARM BLOCK\n         XC    TSOECB(4),TSOECB        INIT ECB\n         PUTGET PARM=PUTGETL,OUTPUT=(OLD,SINGLE,MODE),                 X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               TERMGET=(EDIT,WAIT),MF=(E,IOPLL)\n         CH    R15,=H'5'               SEE IF OK RETURN\n         BL    GETCMD1\n         CH    R15,=H'8'               WAS IT ATTENTION?\n         BE    GETCMD                  IF SO REPROMPT\n         CH    R15,=H'32'              DID THE USER HANG UP?\n         BE    CLEANUP                 IF SO JUST EXIT\n         EX    R0,*                    SHOULD NEVER HAPPEN\nGETCMD1  L     R9,PUTGETL+12           GET ADDR OF REPLY\n         ST    R9,GETADDR              SAVE AS ADDR OF INPUT BUFFER\n         LH    R8,0(R9)                GET LENGTH OF INPUT BUFFER\n         ST    R8,GETLEN               SAVE LENGTH\n         CH    R8,=H'4'                SEE IF EMPTY\n         BH    GETCMD2                 NO SO PROCESS IT\nRECMD    TM    FLGS,CONFLG             DO LAST COMMAND AGAIN\n         BO    CONFLICT                IF CONFLICT, DO IT AGAIN\n         TM    FLGS,FINDFLG            IF FIND\n         BO    FINDAG                  DO THAT AGAIN\n         TM    FLGS,GLOBFLG            IF GLOBAL\n         BO    GLOBAL                  DO THAT AGAIN\nGETCMDAG EQU   *\n         L     R15,=A(GETCMDFR)        FREE THE INPUT BUFFER\n         BALR  R14,R15\n         B     GETCMD                  AND ASK AGAIN\nGETCMD2  LA    R7,0(R8,R9)             POINT PAST END OF INPUT BUFFER\n         ST    R7,CUREND               SAVE THIS POSITION\n         LA    R6,4(R9)                POINT TO FIRST TEXT CHAR\n         ST    R6,CURIN                INIT CURRENT INPUT POSITION\n         L     R15,=A(GETTOKEN)\n         BALR  R14,R15\n         BZ    RECMD                   IF EMPTY LINE, DO PREVIOUS CMD\n         CLI   0(R1),C'C'              SEE IF CONFLICT\n         BE    CONFLICT\n         CLI   0(R1),C'D'              SEE IF DSN\n         BE    DSN\n         CLI   0(R1),C'E'              SEE IF END\n         BE    END\n         CLI   0(R1),C'F'              SEE IF FIND\n         BE    FIND\n         CLI   0(R1),C'G'              SEE IF GLOBAL\n         BE    GLOBAL\n         LA    R1,CMDNF                POINT TO INVALID COMMAND MSG\n         ST    R1,OLD+4\n         L     R15,=A(PRINT)\n         BALR  R14,R15\n         BZ    GETCMDAG                IF NO ATTN, ASK AGAIN\n         B     END                     IF ATTN, END\n         TITLE 'ENQ - COMMANDS'\nCONFLICT EQU   *\n         L     R15,=A(GETCMDFR)        CONFLICT\n         BALR  R14,R15\n         B     CONFL1\n*\nDSN      XC    QNL(6),QNL              ZERO ALL LENGTHS\n         LA    R15,6                   LENGTH OF 'SYSDSN'\n         STH   R15,QNL                 SAVE QNAME LENGTH\n         MVC   QNAME,=CL6'SYSDSN'      MOVE INTO SAVE AREA\nDSN1     EQU   *\n         L     R15,=A(GETTOKEN)\n         BALR  R14,R15\n         BZ    DSN2                    IF NONE LEAVE REST EMPTY\n         CLI   0(R1),C'*'              * IS SAME AS EMPTY\n         BE    DSN2\n         CH    R15,=H'255'\n         BH    DSNPR\n         STH   R15,RNL                 SAVE RNAME LENGTH\n         BCTR  R15,0                   DECREMENT FOR EXECUTE\n         MVC   RNAME(1),0(R1)          < EXECUTED >\n         EX    R15,*-6\nDSN2     EQU   *\n         L     R15,=A(GETTOKEN)\n         BALR  R14,R15\n         BZ    DSNAG                   IF NONE LEAVE REST EMPTY\n         CLI   0(R1),C'*'              * IS SAME AS EMPTY\n         BE    DSNAG\n         CH    R15,=H'8'               CHECK FOR VALID LENGTH\n         BH    DSNPR\n         STH   R15,JNL                 SAVE JOBNAME LENGTH\n         BCTR  R15,0                   DECREMENT FOR EXECUTE\n         MVC   JNAME(1),0(R1)          < EXECUTED >\n         EX    R15,*-6\nDSNAG    EQU   *\n         L     R15,=A(GETCMDFR)\n         BALR  R14,R15\n         MVI   FLGS,FINDFLG            FIND\n         MVC   GQLIST(ALLQL),ALLQ      INIT PARM BLOCK\n         B     ENQLP\nDSNPR    LA    R1,DSNPRM               POINT TO INVALID PARM MSG\n         ST    R1,OLD+4                STORE IN OLD\n         L     R15,=A(PRINT)\n         BALR  R14,R15\n         BZ    GETCMDAG                IF NO ATTN, ASK AGAIN\n         B     END                     IF ATTN, QUIT\n*\nEND      EQU   *\n         L     R15,=A(GETCMDFR)        END\n         BALR  R14,R15\n         B     CLEANUP\n*\nGLOBAL   EQU   *\n         L     R15,=A(GETCMDFR)        GLOBAL\n         BALR  R14,R15\n         MVI   FLGS,GLOBFLG            CLEAR FLAGS\n         MVC   GQLIST(ALLQL),ALLQ      INIT PARM BLOCK\n         B     ENQLP\n*\nFIND     XC    QNL(6),QNL              ZERO ALL LENGTHS\n         L     R15,=A(GETTOKEN)\n         BALR  R14,R15\n         BZ    FIND1                   IF NONE LEAVE ALL EMPTY\n         CLI   0(R1),C'*'              * IS SAME AS EMPTY\n         BE    FIND1\n         CH    R15,=H'8'               CHECK LENGTH\n         BH    FINDPR\n         STH   R15,QNL                 SAVE QNAME LENGTH\n         BCTR  R15,0                   DECREMENT FOR EXECUTE\n         MVC   QNAME(1),0(R1)          < EXECUTED >\n         EX    R15,*-6                 MOVE INTO SAVE AREA\nFIND1    EQU   *\n         L     R15,=A(GETTOKEN)\n         BALR  R14,R15\n         BZ    FIND2                   IF NONE LEAVE REST EMPTY\n         CLI   0(R1),C'*'              * IS SAME AS EMPTY\n         BE    FIND2\n         CH    R15,=H'255'\n         BH    FINDPR\n         STH   R15,RNL                 SAVE RNAME LENGTH\n         BCTR  R15,0                   DECREMENT FOR EXECUTE\n         MVC   RNAME(1),0(R1)          < EXECUTED >\n         EX    R15,*-6\nFIND2    EQU   *\n         L     R15,=A(GETTOKEN)\n         BALR  R14,R15\n         BZ    FINDAG                  IF NONE LEAVE REST EMPTY\n         CLI   0(R1),C'*'              * IS SAME AS EMPTY\n         BE    FINDAG\n         CH    R15,=H'8'               CHECK FOR VALID LENGTH\n         BH    FINDPR\n         STH   R15,JNL                 SAVE JOBNAME LENGTH\n         BCTR  R15,0                   DECREMENT FOR EXECUTE\n         MVC   JNAME(1),0(R1)          < EXECUTED >\n         EX    R15,*-6\nFINDAG   EQU   *\n         L     R15,=A(GETCMDFR)\n         BALR  R14,R15\n         MVI   FLGS,FINDFLG            FIND\n         MVC   GQLIST(ALLQL),ALLQ      INIT PARM BLOCK\n         B     ENQLP\nFINDPR   LA    R1,FINDPRM              POINT TO INVALID PARM MSG\n         ST    R1,OLD+4                STORE IN OLD\n         L     R15,=A(PRINT)\n         BALR  R14,R15\n         BZ    GETCMDAG                IF NO ATTN, ASK AGAIN\n         B     END                     IF ATTN, QUIT\n*\nCLEANUP  MVC   FREEML(FREEMLEN),FREEMDC\nFREEAREA FREEMAIN VU,A=AREAA,MF=(E,FREEML),SP=1,RELATED=(GETAREA)\n         SR    R15,R15\nEXIT     EQU   *\n         LR    R1,R12                  SAVE WORK AREA BASE ADDRESS\n         L     R13,4(R12)              UNCHAIN SAVE AREA\n         ST    R15,16(R13)             SAVE RETURN CODE\n         L     R0,0(R1)                GET SP AND LENGTH\n         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC WORK AREA\n         LM    14,12,12(R13)           RESTORE CALLER'S REGISTERS\n         LTR   R15,R15                 SET CONDITION CODE\n         BR    R14                     RETURN\n         DC    0D'0'                   PAD TO LTORG FOR COMPARES\n         LTORG                         GOOD AS PLACE AS ANY\n         TITLE 'ENQ - CONSTANTS'\n         DS    0F                      ALLIGN TO FULLWORD BOUNDARY\nMEMLOW   DC    X'00008000'             MEM LIMITS FOR GQ AREA\nMEMHIGH  DC    X'7FFFFFFF'\nGETMDC   GETMAIN VC,SP=1,MF=L\nGETMLEN  EQU   *-GETMDC\nFREEMDC  FREEMAIN VU,SP=1,MF=L\nFREEMLEN EQU   *-FREEMDC\nPUTGETDC PUTGET  OUTPUT=(0,,MODE),MF=L\nPUTGTDCL EQU   *-PUTGETDC\nALLQ     GQSCAN REQLIM=MAX,SCOPE=ALL,SYSNAME=0,REQCNT=1,MF=L\nALLQL    EQU   *-ALLQ\nCONQ     GQSCAN REQLIM=MAX,SCOPE=ALL,SYSNAME=0,WAITCNT=1,MF=L\nCONQL    EQU   *-CONQ\nNOMEM    MSG   ' NOT ENOUGH CORE TO PROCESS REQUEST'\nHERALD   MSG   ' ENQ'\nCMDNF    MSG   ' INVALID COMMAND'\nCONFLPRM MSG   ' NO CONFLICTS FOUND'\nDSNPRM   MSG   ' INVALID PARAMETER'\nFINDPRM  MSG   ' INVALID PARAMETER'\nMOREM    MSG   ' (*MORE*)'\n         LTORG\n         DROP  R10                     ENQ\n         TITLE 'ENQ - SUBROUTINES'\n*\n*        SUBROUTINE TO PARSE AND  UPPERCASE NEXT TOKEN FROM INPUT LINE\n*\n*     ON ENTRY ASSUMES:\n*        CURIN POINTS TO FIRST CHAR OF TEXT\n*        CUREND POINTS PAST END OF TEXT\n*\n*     ON RETURN:\n*        R1 POINTS TO FIRST CHAR OF TOKEN\n*        R15 CONTAINS LENGTH OF TOKEN\n*        CURIN POINTS TO NEXT POSITION IN INPUT STRING\n*\n         PUSH  PRINT\n         DS    0F\nGETTOKEN EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING GETTOKEN,R10            ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         L     R6,CURIN                POINT TO CURRENT POS\n         L     R7,CUREND               POINT PAST END OF STRING\n         SR    R15,R15                 ASSUME ZERO LENGTH TOKEN\n         CR    R6,R7                   SEE IF AT END OF TEXT\n         BNL   GETTR1                  IF SO RETURN WITH EMPTY TOKEN\n*\n*        FIND  FIRST NON BLANK, OR COMMA\n*\nGETT1    OI    0(R6),C' '              UPPERCASE THE CHARACTER\n         CLI   0(R6),C' '              SEE IF BLANK\n         BNE   GETT2                   BRANCH IF NOT\n         LA    R6,1(R6)                POINT TO NEXT CHAR\n         CR    R6,R7                   SEE IF OFF END OF TEXT\n         BL    GETT1                   IF NOT OFF END CONTINUE\n         B     GETTR1                  IF OFF END RETURN EMPTY TOKEN\nGETT2    CLI   0(R6),C','              IS IT A COMMA\n         BNE   GETT3                   IF NOT THEN START OF TOKEN\n         B     GETTR                   AND RETURN EMPTY TOKEN\n*\n*        NEXT  BLANK OR COMMA DELIMITS TOKEN\n*\nGETT3    LR    R1,R6                   SAVE START OF TOKEN\nGETT4    OI    0(R6),C' '              UPPERCASE THE CHARACTER\n         CLI   0(R6),C' '              FIND NEXT BLANK\n         BE    GETTR                   END OF TOKEN\n         CLI   0(R6),C','              COMMA IS ALSO A DELIMITER\n         BE    GETTR                   END OF TOKEN\n         LA    R15,1(R15)              COUNT THIS CHAR\n         LA    R6,1(R6)                BUMP POINTER\n         CR    R6,R7                   SEE IF OFF END OF TEXT\n         BL    GETT4                   IF NOT, CONTINUE SCAN\nGETTR    LA    R6,1(R6)                POINT TO NEXT CHAR\nGETTR1   ST    R6,CURIN                SAVE NEW CURRENT POSSITION\n         LTR   R15,R15                 GET RC\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\n         LTORG\n         DROP  R10\n         EJECT\n*\n*        SUBROUTINE TO FREE INPUT BUFFER FROM PUTGET\n*        ASSUMES ADDR IN R9, LENGTH IN R8\n*\n         PUSH  PRINT\n         DS    0F\nGETCMDFR EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING GETCMDFR,R10            ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         L     R9,GETADDR              POINT TO AREA TO BE FREED\n         L     R8,GETLEN               GET LENGTH OF AREA TO BE FREED\n         FREEMAIN R,A=(R9),LV=(R8),SP=1\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\n         LTORG\n         DROP  R10\n         EJECT\n         PUSH  PRINT\n         DS    0F\nSCAN     EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING SCAN,R10                ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         XC    TOKEN(4),TOKEN          ZERO TOKEN\n         LM    R2,R3,AREAA             GET AREA ADDR AND LENGTH\n         GQSCAN AREA=((R2),(R3)),TOKEN=TOKEN,MF=(E,GQLIST)\n         ST    R15,GQRC                SAVE THE RC\n         CH    R15,=H'4'               EMPTY\n         BE    SCANRT                  IF SO RETURN\n         CH    R15,=H'12'              ERROR\n         BL    SCAN1\n         EX    R0,*                    SHOULD NEVER HAPPEN\nSCAN1    ST    R0,RIBL                 SAVE LENGTHS OF RIB AND RIBE\n         ST    R1,NRIBS                SAVE # RIBS THIS AREA\n         SR    R15,R15\nSCANRT   EQU   *\n         LTR   R15,R15                 GET RC\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\n         LTORG\n         DROP  R10\n         EJECT\n*\n*        CALL  TO GET NEXT CHUNK  OF DATA FROM GQSCAN\n*\n         PUSH  PRINT\n         DS    0F\nRESCAN   EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING RESCAN,R10              ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         GQSCAN MF=(E,GQLIST)\nSCANCHK  ST    R15,GQRC                SAVE THE RC\n         CH    R15,=H'4'               EMPTY\n         BE    RESCANRT                IF SO RETURN\n         CH    R15,=H'12'              ERROR\n         BL    RESCAN1\n         EX    R0,*                    SHOULD NEVER HAPPEN\nRESCAN1  ST    R0,RIBL                 SAVE LENGTHS OF RIB AND RIBE\n         ST    R1,NRIBS                SAVE # RIBS THIS AREA\n         SR    R15,R15\nRESCANRT EQU   *\n         LTR   R15,R15                 GET RC\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\n         LTORG\n         DROP  R10\n         EJECT\n*\n*        CHECK  TO SEE IF FIND IS  IN EFFECT\n*        IF NOT RETURN RC=0\n*\n*        IF SO CHECK THAT SPECIFIED INITIAL PORTIONS OF\n*        QNAME RNAME AND JOBNAME  MATCH\n*        RETURN ZERO IF SO, NONZERO IF NOT\n*\n         PUSH  PRINT\n         DS    0F\nFINDCHK  EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING FINDCHK,R10             ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         TM    FLGS,FINDFLG            IS FIND APPROPRIATE\n         BNO   FINDC00                 NO, EVERYTHING IS FOUND\n         SR    R1,R1                   CLEAR R1\n         ICM   R1,3,QNL                GET QNAME LENGTH\n         BZ    FINDC1\n         BCTR  R1,0                    DECREMENT FOR EXECUTE\n         CLC   RIBQNAME(1),QNAME       < EXECUTED >\n         EX    R1,*-6\n         BNE   FINDNZ\nFINDC1   ICM   R1,3,JNL                GET JOBNAME LENGTH\n         BZ    FINDC2\n         BCTR  R1,0                    DECREMENT FOR EXECUTE\n         CLC   RIBEJBNM(1),JNAME       < EXECUTED >\n         EX    R1,*-6\n         BNE   FINDNZ\nFINDC2   ICM   R1,3,RNL                GET RNAME LENGTH\n         BZ    FINDC00\n         BCTR  R1,0                    DECREMENT FOR EXECUTE\n         LR    R15,R9                  COPY RIB ADDR\n         AH    R15,RIBL                POINT TO VARIABLE PORTION\n         CLC   0(1,R15),RNAME          < EXECUTED >\n         EX    R1,*-6\n         BNE   FINDNZ\nFINDC00  SR    R15,R15\nFINDNZ   DS    0H                      R15 - BASE AND IS NON-ZERO\nFINDRET  EQU   *\n         LTR   R15,R15                 GET RC\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\n         LTORG\n         DROP  R10\n         EJECT\n*\n*        FORMAT THE REQUESTOR SPECIFIC INFO FROM THE RIB AND RIBE\n*\n         PUSH  PRINT\n         DS    0F\nFMTRIBE  EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING FMTRIBE,R10             ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         MVC   PRTBUFF(7),=CL7' '      START WITH A BLANKS\n         MVC   PRTBUFF+1(3),=C'SHR'    SHR -> PRTBUFF\n         TM    RIBERFLG,X'80'          EXCLUSIVE CONTROL?\n         BNZ   FMTRIBE1                NO, LEAVE AS SHARE\n         MVC   PRTBUFF+1(3),=C'OLD'    OLD -> PRTBUFF\nFMTRIBE1 EQU   *\n         MVC   PRTBUFF+5(1),=C'W'      W -> PRTBUFF\n         TM    RIBESFLG,X'80'          OWN RESOURCE?\n         BNO   FMTRIBE2                NO, LEAVE AS WAIT\n         MVC   PRTBUFF+5(1),=C'O'      O -> PRTBUFF\nFMTRIBE2 EQU   *\n         MVC   PRTBUFF+7(8),RIBEJBNM   COPY JOBNAME\n         MVC   PRTLEN(2),=H'19'        LEN = 15+4 (NO VOL, UCB)\n         TM    RIBERFLG,RIBERESV       TEST FOR RESERVE\n         BNO   FMTRIBE3\n         MVI   PRTBUFF+15,C' '\n         MVC   PRTLEN(2),=H'31'        LEN = 27+4\n         L     R2,RIBEUCB              GET UCB ADDRESS\n         MVC   PRTBUFF+16(6),UCBVOLI-UCBOB(R2)\n         MVI   PRTBUFF+22,C'-'\n         SLL   R2,4                    SHIFT UCB ADDRESS LEFT 2\n         ST    R2,PARMLSTS             STORE IN WORK AREA\n         OI    PARMLSTS+3,X'0F'        OR IN SIGN\n         UNPK  PRTBUFF+23(4),PARMLSTS+1(3)    UNPACK\n         L     R1,=A(FMTTRTBL)         BECAUSE OF ADDRESSABILITY\n         TR    PRTBUFF+23(4),0(R1)     CONVERT TO CHARACTER\nFMTRIBE3 EQU   *\n         LA    R1,PRTLEN               POINT TO THE SEGMENT\n         ST    R1,OLD+4                STORE IN OLD\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\nFMTTRTBL EQU   *-X'F0'\n         DC    C'0123456789ABCDEF'     TRANSLATE TABLE\n         LTORG\n         DROP  R10\n         EJECT\n*\n*        FORMAT THE RESOURCE SPECIFIC INFO FROM THE RIB\n*\n*        ALTHOUGH THIS SUBROUTINE IS CALLED FOR EACH RIBE,\n*        IT ONLY ADDS STUFF TO THE PRINT BUFFER ONCE FOR EACH\n*        RIB.  IT ASSUMES THAT FMTRIBE HAS ALREADY BEEN CALLED\n*\n         PUSH  PRINT\n         DS    0F\nFMTRIB   EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING FMTRIB,R10              ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         TM    FLGS,CONTFLG            SEE IF RIB ALREADY FORMATTED\n         BO    FMTRIB00\n         OI    FLGS,CONTFLG            MARK RIB AS FORMATTED\n         LA    R1,PRTLEN               POINT TO OUTPUT BUFFER\n         ST    R1,OLD+4                POINT OLD TO PRINT BUFFER\n         LH    R2,PRTLEN               GET LENGTH\n         LA    R1,0(R1,R2)             POINT PAST END OF BUFFER\n         MVI   0(R1),C' '              MOVE IN QNAME\n         MVC   1(8,R1),RIBQNAME\n         MVI   9(R1),C' '\n         AH    R2,=H'10'               ADDJUST LENGTH\n         SR    R3,R3                   CLEAR R3\n         ICM   R3,1,RIBRNMLN           GET RNAME LENGTH\n         BNZ   FMTRIB1\n         STH   R2,PRTLEN               SAVE NEW LENGTH\n         B     FMTRIB00\nFMTRIB1  AR    R2,R3                   ADD RNAME LENGTH TO PRINT LENGTH\n         STH   R2,PRTLEN               SAVE NEW LENGTH\n         LR    R4,R9                   COPY RIB ADDR\n         AH    R4,RIBL                 POINT TO VARIABLE PORTION\n         BCTR  R3,0                    DECREMENT FOR EXECUTE\n         MVC   10(1,R1),0(R4)          < EXECUTED >\n         EX    R3,*-6                  MOVE IN RNAME\nFMTRIB00 EQU   *\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\nPRTSPACE MSG   '  '\n         LTORG\n         DROP  R10\n         EJECT\n*\n*        PUTLINE SUBROUTINE, ASSUMES OLD POINTS TO SEGMENT TO BE\n*         PRINTED. RETURNS NON ZERO IF ATTENTION SIGNALLED\n*\n         PUSH  PRINT\n         DS    0F\nPRINT    EQU   *\n         STM   0,15,0(R13)             SAVE CALLER'S REGISTERS\n         LR    R10,R15                 SAVE BASE REGISTER\n         USING PRINT,R10               ESTABLISH ADDRESSABILITY\n         LR    R11,R13\n         LA    R13,64(R13)             RESERVE THIS ELEMENT\n         C     R13,8(R12)              CHECK FOR OVERFLOW\n         BNL   16(R12)                 IF SO GO TO ERROR ROUTINE\n*        THE FOLLOWING REGISTERS ARE IN USE:\n*        R12 - WDSECT\n*        R10 - GETTOKEN\n*        R9  - RIB\n*        R8  - RIBE\n         POP   PRINT\n         XC    TSOECB(4),TSOECB\n         MVC   PUTLL(PUTLDCL),PUTLDC\n         PUTLINE PARM=PUTLL,OUTPUT=OLD,MF=(E,IOPLL)\n         LTR   R15,R15\n         BZ    PRINTRET\n         CH    R15,4                   ATTENTION?\n         BE    PRINTNZ                 IF SO RETURN NON ZERO RC\n         CH    R15,20                  TERMINAL DISCONNECTED?\n         BE    PRINTRET                IGNORE IT\n         CH    R15,12                  SEVERE ERROR\n         BL    PRINTRET                IGNORE ALL OTHERS\n         EX    R0,*                    SHOULD NEVER HAPPEN\nPRINTRET SR    R15,R15                 ZERO RETURN CODE\nPRINTNZ  EQU   *\n         LTR   R15,R15                 GET RC\n         LM    2,14,8(R11)             RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\nPUTLDC   PUTLINE MF=L\nPUTLDCL  EQU   *-PUTLDC\n         LTORG\n         DROP  R10\n         TITLE 'ENQ - DSECTS'\n         IKJCPPL\n         IKJIOPL\nUCB      DSECT\n         IEFUCBOB\n         EJECT\n         ISGRIB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EOIEX020": {"ttr": 6660, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00u\\x00u\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 117, "newlines": 117, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE END OF INPUT EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE END OF INPUT EXIT 20                              *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *\n*       OF CHECKING THE JCTUSER4 FIELD FOR THE SETTING OF THE FIRST  *\n*       BYTE OF THE FIELD.  IF THE BYTE IS = ZERO THEN THE EXIT      *\n*       WILL ALLOW THE JOB TO CONINUE PROCESSING NORMALLY            *\n*       WHILE A NON-ZERO VALUE WILL CUASE THE TOB TO BE CANCELED.    *\n*                                                                    *\n*    ENTRY POINT = DLXXIT20                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0     ZERO                                                  *\n*       R1-R9  N/A                                                   *\n*       R10    ADDRESS OF THE JCT                                    *\n*       R11    ADDRESS OF THE HCT                                    *\n*       R12    N/A                                                   *\n*       R13    ADDRESS OF THE HASPRDR PCE                            *\n*       R14    RETURN ADDRESS                                        *\n*       R15    ENTRY ADDRESS                                         *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-R1  N/A                                                   *\n*       R2-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH ADDITIONAL EXITS/HASPRDR PROCESSING  *\n*             =4  CONTINUE WITH NORMAL HASPRDR PROCESSING            *\n*             =8  CANCEL JOB. PRODUCE OUTPUT.                        *\n*             =12 PURGE JOB. NO OUTPUT IS PRODUCED.                  *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n*    CHANGE ACTIVITY:                                                *\n*        01/20/87  WRITTEN.                                    JWC.  *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nEOIEX020 $MODULE $BUFFER,                                              +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D FOR MAPPING              +\n               $MIT,                    REQ'D BY $MODULE               +\n               $PCE,                    HASP PROCESSOR CONTROL ELEMENT +\n               $RDRWORK,                HASP INPUT SERVICE PCE WORK    +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE END OF INPUT EXIT'\n         SPACE 1\n***********************************************************************\n*        JES2 - INITIALIZATION AND ADDRESSABILITY\n***********************************************************************\nDLXXIT20 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         SLR   R15,R15                  CLEAR REG 15\n         USING JCT,R10                  ADDRESSABILITY TO JCT\n         CLC   JOB,JCTJOBID             THIS A BATCH JOB?\n         BNE   RETURN                   NO, RETURN\n         OI    JCTUSER0+2,X'04'         EXIT 04 PROCESSING COMPLETE\n         CLI   JCTUSER4,X'00'           HAS THE CANCEL FLAG BEEN SET?\n         BE    RETURN                   NO ALLOW PROCESSING TO CONTINUE\n         B     CANJOB00                 ELSE SET TO CANCEL, NO PURGE\n***********************************************************************\n*        JES2 - SET RETURN CODE 8 TO CANCEL BUT NOT PURGE JOB\n***********************************************************************\nCANJOB00 EQU   *\n         CLC   JCTUSEID+3(1),=C'R'      REGIONAL JOB?\n         BNE   CANJOB20                 NO, CONTINUE\n         LA    R2,NODETAB               NODE TRANSLATION TABLE\nCANJOB10 EQU   *\n         CLI   0(R2),C' '               END OF TABLE?\n         BE    CANJOB30                 YES, USE DEST=FETCH\n         CLC   0(1,R2),JCTUSEID+4       THIS NODE DEFINED?\n         BE    CANJOB30                 YES, EXTRACT DEST FOR JCT\n         LA    R2,5(R2)                 POINT AT NEXT ENTRY\n         B     CANJOB10                 CONTINUE SEARCH\nCANJOB20 EQU   *\n         LA    R2,DFLTNODE              DEST=FETCH\nCANJOB30 EQU   *\n         MVC   JCTPROUT(4),1(R2)        UPDATE JCT\n         LA    R15,8                    SET RETURN CODE 8\n         B     RETURN                   GET OUT\n***********************************************************************\n*        JES2 - RESTORE REGISTERS AND RETURN\n***********************************************************************\nRETURN   EQU   *\n         $RETURN RC=(R15)               RETURN TO CALLER\nJOB      DC    C'JOB'                   JCTJOBID FOR BATCH JOB\n**********************************************************************\n*        JES2 - REGIONAL NODE TRANSLATION TABLE\n**********************************************************************\nNODETAB  EQU   *\n         DC    CL1'1',X'000B0000'\n         DC    CL1'2',X'000C0000'\n         DC    CL1'3',X'000D0000'\n         DC    CL1'4',X'000E0000'\n         DC    CL1'5',X'000F0000'\n         DC    CL1'6',X'00100000'\n         DC    CL1'7',X'00110000'\n         DC    CL1'8',X'00120000'\n         DC    CL1'P',X'0001003B'\nDFLTNODE DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         DC    CL1' ',X'00010096'\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXIMPORT": {"ttr": 6663, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x05\\x06\\x05\\x06\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1286, "newlines": 1286, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'EXIMPORT - GEN JCL FOR EXPORTS AND IMPORTS'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = EXIMPORT                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = GENERATE THE JCL NECESSARY FOR       *\n*                EXPORTING AND IMPORTING THE DATA SETS ON A           *\n*                SPECIFIED VOLUME.                                    *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CREATES ONE DATA SET WITH THE JCL FOR EXPORTING      *\n*                THE DATA SETS ON A SPECIFIED VOLUME AND ANOTHER      *\n*                FOR IMPORTING THE SAME DATA SETS.  FOR VSAM          *\n*                FILES, THE JCL WILL BE SET UP TO EXECUTE             *\n*                IDCAMS, EXPORTING TO TAPE AND THEN IMPORTING         *\n*                BACK ONTO THE SAME VOLUME FROM THE TAPE.             *\n*                FOR NON-VSAM PS FILES, THE PROGRAM IEBGENER IS       *\n*                EXECUTED TO COPY THE DATA SET TO TAPE AND THEN       *\n*                BACK TO THE SAME VOLUME.  FOR PO FILES, IEBCOPY      *\n*                IS USED.  ALSO A CLIST IS GENERATED TO SCRATCH       *\n*                THE TAPE FILES AFTER THE DATA SETS HAVE BEEN         *\n*                IMPORTED.                                            *\n*                                                                     *\n*                OPERATION =                                          *\n*                   READ THE PROGRAM PARAMETERS                       *\n*                   OPEN THE VTOC FOR THE SPECIFIED VOLUME            *\n*                   FIGURE OUT THE DEVICE TYPE FOR BOTH THE CURRENT   *\n*                     AND THE NEW DEVICES                             *\n*                   OPEN THE SPECIFIED OUTPUT FILES (FOR THE JCL)     *\n*                   READ FORMAT 1 RECORDS OF VTOC FOR DATA SET NAME   *\n*                   FOR VSAM FILES, IGNORE .INDEX FILES AND           *\n*                     REMOVE THE .DATA FROM THE REST SO EXPORT-       *\n*                     IMPORT IS SET UP FOR THE CLUSTER.               *\n*                   FOR NON-VSAM FILE, CALCULATE PARAMETERS           *\n*                     TO RECONSTUCT THE DATA SET WHEN COPYING         *\n*                     BACK TO THE VOLUME.                             *\n*                   WRITE OUT JCL TO BOTH EXPORT AND IMPORT DATA      *\n*                     SETS.                                           *\n*                   WRITE OUT THE SCRATCH STATEMENTS INTO THE CLIST   *\n*                     DATA SET.\n*                   CONTINUE READING VTOC TIL ALL DATA SETS PROCESSED *\n*                   CLOSE VTOC AND OUTPUT FILES                       *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 4  = LINKAGE & WORK REGISTERS     *\n*                    REGISTERS 5 TO 9  = WORK REGISTERS               *\n*                    REGISTER  10      = ADDRESSABILITY TO DCB,       *\n*                                        JFCB & DSCB                  *\n*                    REGISTER  11      = ADDRESSABILITY TO REST OF    *\n*                                        EXIMPORT CSECT               *\n*                    REGISTER  12      = ADDRESSABILITY TO EXIMPORT   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, GETMAIN, RDJFCB, OPEN, CVAFSEQ, CVAFDIR,       *\n*                CLOSE, TRKCALC, PUT, DEVTYPE                         *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                10/21/83  WRITTEN.      BC.                          *\n*                10/28/83  ADDED SYSPRINT & CLIST                     *\n*                          CHANGED READING OF VTOC TO                 *\n*                            USE CVAF MACROS.     BC.                 *\n*                02/28/84  FIXED BUG IN 'SYSIN DD DUMMY' LINE         *\n*                          ADDED SUPPORT FOR PARTITIONED DATA SETS    *\n*                          ADDED SUPPORT FOR 3375'S                   *\n*                          CHANGE 'VOL=' AND 'UNIT=' PARAMETERS TO    *\n*                            APPLY TO ALL DATA SETS             BC.   *\n*                03/02/84  MODIFIED ALLOCATION REQUIREMENTS FOR       *\n*                            NEW DEVICE TYPE.                         *\n*                          ADDED CAPABILITY TO SPECIFY NO VSAM.   BC. *\n*                05/10/84  FIXED BUG SO THAT NO PARMS RESULTS         *\n*                            IN A RETURN CODE OF 8.     BC.           *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*  BOTH VSAM AND NON-VSAM (PO AND PS ONLY) FILES:                     *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=EXIMPORT,PARM='DATE=OCT14'                 *\n*     //VTOC   DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                   *\n*     //EXPORT DD DSN=T99999.TEST.EXPJCL,VOL=SER=DLXTS1,UNIT=3380,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //IMPORT DD DSN=T99999.TEST.IMPJCL,VOL=SER=DLXTS1,UNIT=3380,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //CLIST  DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS1,UNIT=3380,     *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(5,1)),               *\n*     //            DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)             *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n*  VSAM ONLY:                                                         *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=EXIMPORT,                                  *\n*     //         PARM='DATE=OCT14,VSAMONLY'                           *\n*     //VTOC   DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                   *\n*     //EXPORT DD DSN=T99999.TEST.EXPJCL,VOL=SER=DLXTSO,UNIT=3350,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //IMPORT DD DSN=T99999.TEST.IMPJCL,VOL=SER=DLXTSO,UNIT=3350,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //CLIST  DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS1,UNIT=3380,     *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(5,1)),               *\n*     //            DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)             *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n*  NO VSAM:                                                           *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=EXIMPORT,                                  *\n*     //         PARM='DATE=OCT14,NOVSAM'                             *\n*     //VTOC   DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                   *\n*     //EXPORT DD DSN=T99999.TEST.EXPJCL,VOL=SER=DLXTSO,UNIT=3350,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //IMPORT DD DSN=T99999.TEST.IMPJCL,VOL=SER=DLXTSO,UNIT=3350,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //CLIST  DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS1,UNIT=3380,     *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(5,1)),               *\n*     //            DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)             *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n*  IMPORTING TO A DIFFERENT VOLUME:                                   *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=EXIMPORT,                                  *\n*     //         PARM='DATE=OCT14,UNIT=3380,VOL=DLXTS3'               *\n*     //VTOC   DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                   *\n*     //EXPORT DD DSN=T99999.TEST.EXPJCL,VOL=SER=DLXTSO,UNIT=3350,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //IMPORT DD DSN=T99999.TEST.IMPJCL,VOL=SER=DLXTSO,UNIT=3350,    *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),              *\n*     //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              *\n*     //CLIST  DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS1,UNIT=3380,     *\n*     //            DISP=(NEW,CATLG),SPACE=(TRK,(5,1)),               *\n*     //            DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)             *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n*  NOTE:  WHEN IMPORTING TO A NEW VOLUME, IF 'VOL=' IS SPECIFIED      *\n*         WITHOUT 'UNIT=', THE NEW UNIT WILL DEFAULT TO THE SAME      *\n*         AS THE OLD.  IF 'UNIT=' IS SPECIFIED WITHOUT 'VOL=',        *\n*         BOTH VOLUME AND UNIT WILL REMAIN UNCHANGED.                 *\n*                                                                     *\n***********************************************************************\n         PRINT NOGEN\n*\nEXIMPORT CSECT\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15\n         USING EXIMPORT,R12            ESTABLISH ADDRESSABILITY\n         LA    R11,4095(R12)\n         USING EXIMPORT+4095,R11       ESTABLISH ADDRESSABILITY TO REST\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE PTR TO WORK AREA\n         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA\n         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA\n         LR    R13,R10                 LOAD ADDR OF CURRENT SA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n*\n*  GET PARMS FOR DATE, VSAM ONLY, VOLUME AND UNIT.\n*\nGETPARM  EQU   *\n         L     R5,0(R2)                GET PARM ADDRESS\n         LH    R3,0(R5)                SAVE PARM LENGTH\n         LTR   R3,R3                   ANY PARM DATA?\n         BZ    GP75                    IF NOT, BRANCH TO ERROR\n         LA    R5,2(R5)                SKIP PARM LENGTH FIELD\n         MVI   VSAMONLY,C'N'           INIT VSAM ONLY FLAG\n         MVI   NOVSAM,C'N'             INIT NO VSAM FLAG\n         MVI   NEWUNIT,X'40'           CLEAR UNIT BUFFER\n         MVC   NEWUNIT+1(L'NEWUNIT-1),NEWUNIT\n         MVI   NEWVOL,X'40'            CLEAR VOLUME BUFFER\n         MVC   NEWVOL+1(L'NEWVOL-1),NEWVOL\nGP05     EQU   *\n         LA    R4,PARMBUF              SET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\nGP10     EQU   *\n         CLI   0(R5),C','              DELIMITING COMMA?\n         BE    GP20                    IF SO, BRANCH\n         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER\n         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER\n         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER\n         BCT   R3,GP10                 LOOP BACK TIL DONE\nGP20     EQU   *\n         CLC   PARMBUF(5),=C'DATE='    CHECK FOR DATE PARAMETER\n         BNE   GP30                    IF NOT, BRANCH\n         MVC   DATE,PARMBUF+5          STORE DATE\n         B     GP70\nGP30     EQU   *\n         CLC   PARMBUF(4),=C'VOL='     CHECK FOR VOLUME PARAMETER\n         BNE   GP40                    IF NOT, BRANCH\n         MVC   NEWVOL,PARMBUF+4        STORE NEW VOLUME\n         B     GP70\nGP40     EQU   *\n         CLC   PARMBUF(5),=C'UNIT='    CHECK FOR UNIT PARAMETER\n         BNE   GP50                    IF NOT, BRANCH\n         MVC   NEWUNIT,PARMBUF+5       STORE NEW UNIT\n         B     GP70\nGP50     EQU   *\n         CLC   PARMBUF(8),=C'VSAMONLY' DO VSAM ONLY?\n         BNE   GP60                    IF NOT, BRANCH\n         MVI   VSAMONLY,C'Y'           IF SO, SET FLAG\n         B     GP70\nGP60     EQU   *\n         CLC   PARMBUF(6),=C'NOVSAM'   IGNORE VSAM?\n         BNE   GP70                    IF NOT, BRANCH\n         MVI   NOVSAM,C'Y'             IF SO, SET FLAG\nGP70     EQU   *\n         LA    R4,PARMBUF              RESET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\n         LTR   R3,R3                   ANY MORE PARMS?\n         BZ    GP80                    IF NOT, EXIT\n         LA    R5,1(R5)                IF SO, SKIP COMMA\n         B     GP05                    AND LOOP BACK\nGP75     EQU   *\n         LA    R15,8                   SET RETURN CODE OF 8\n         B     RETURN                  AND EXIT\nGP80     EQU   *\n*\n*  INITIALIZE THE WORK AREA.  OPEN THE VTOC, EXPORT, AND IMPORT\n*  DATA SETS.  INITIALIZE DEVICE PARAMETERS.\n*\nINIT     EQU   *\n         LA    R6,DATA                 SET UP REGISTERS FOR\n         LA    R7,MOVEL                  LONG MOVE\n         LA    R8,CDATA\n         LA    R9,MOVEL\n         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA\n         LA    R10,VTOC                GET ADDRESS OF DCB1\n         USING IHADCB,R10              ADDRESSIBILITY TO DCB\n         LA    R9,JFCBA                GET ADDRESS OF BUFFER\n         ST    R9,EXLIST               STORE ADDRESS IN EXIT LIST\n         MVI   EXLIST,X'87'            SET END OF LIST & JFCB BYTE\n         LA    R6,EXLIST               GET ADDRESS OF EXIT LIST\n         ST    R6,DCBEXLST             STORE IN DCB\n         DROP  R10\n         LR    R10,R9\n         RDJFCB (VTOC,),MF=(E,EX1)     READ JOB FILE CONTROL BLOCK\n         USING INFMJFCB,R10            ESTABLISH ADDRESSABILITY\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNZ   RETURN                  IF NOT SUCCESSFUL, EXIT\n         MVI   JFCBDSNM,X'04'          CHANGE DATASET NAME TO\n         MVC   JFCBDSNM+1(43),JFCBDSNM   44 X'04'S\n         OI    JFCBTSDM,JFCNWRIT       SET FLAG NOT TO WRITE BACK\n         MVC   VOL,JFCBVOLS            SAVE VOLSER\n         DROP  R10\n         OPEN  (VTOC,INPUT),TYPE=J,MF=(E,EX2) OPEN THE VTOC\n         LTR   R15,R15\n         BNZ   CLOSEX\n         LA    R10,VTOC                GET ADDRESSING TO THE\n         USING IHADCB,R10                VTOC DCB AGAIN\n         L     R9,DCBDEBAD             SAVE THE ADDRESS OF THE DEB\n         ST    R9,DEBADDR                FOR READING THE VTOC\n         DROP  R10\n         OPEN  (EXPORT,OUTPUT),MF=(E,EX2)  OPEN EXPORT DATA SET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         OPEN  (IMPORT,OUTPUT),MF=(E,EX2)  OPEN IMPORT DATA SET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         OPEN  (CLIST,OUTPUT),MF=(E,EX2)  OPEN CLIST DATA SET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         MVI   CLINE,X'40'             INITIALIZE CLIST LINE\n         MVC   CLINE+1(L'CLINE-1),CLINE   TO ALL SPACES\n         MVC   CMDLINE(L'FSTLINE),FSTLINE  OUTPUT FIRST LINE OF CLIST\n         BAL   R3,PRINTC\n         MVC   CMDLINE(L'SNDLINE),SNDLINE  OUTPUT SECOND LINE OF CLIST\n         BAL   R3,PRINTC\n         OPEN  (SYSPRINT,OUTPUT),MF=(E,EX2)  OPEN SYSPRINT DATA SET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         MVI   SPLINE,X'40'            INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         MVC   SPLINE(L'AIXLINE),AIXLINE LOAD FIRST LINE INTO SYSPRINT\n         PUT   SYSPRINT,SPLINE\n         MVI   SPLINE,X'40'            RE-INITIALIZE LINE\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         PUT   SYSPRINT,SPLINE         OUTPUT BLANK LINE\n         MVI   LINE,X'40'              INITIALIZE LINE\n         MVC   LINE+1(L'LINE-1),LINE     TO ALL SPACES\n         DEVTYPE VTOCLBL,DEVBUF,DEVTAB  GET DEVICE PARAMETERS\n         USING IECSDSL1,R10            ESTABLISH ADDRESSABILITY\n         LA    R10,DSCB                LOAD DSCB ADDRESS\n         MVI   BUFLIST,X'00'           INITIALIZE BUFFER LIST\n         MVC   BUFLIST+1(BUFLEN-1),BUFLIST\n         OI    BFLHFL,BFLHDSCB         DSCB'S TO BE READ WITH LIST\n         MVI   BFLHNOE,1               ONE BUFFER LIST ENTRY\n         LA    R9,DS1FMTID             GET ADDRESS OF DSCB BUFFER\n         ST    R9,BFLEBUF              AND STORE IN BUFFER LIST\n         MVI   BFLELTH,DSCBLTH         READ ONLY DATA PORTION\n         MVI   DS1DSNAM,X'00'          INITIALIZE DATA SET NAME\n         MVC   DS1DSNAM+1(L'DS1DSNAM-1),DS1DSNAM\n*\n*  FIGURE OUT DEVICE TYPE\n*\nGETDEVT  EQU   *\n         MVC   TYPE,=CL5' '            INIT TO SPACES\n         CLI   DEVBUF+3,X'0B'          IS THIS A 3350?\n         BNE   GD10                    IF NOT, BRANCH\n         MVC   TYPE,=C'3350,'          STORE TYPE\n         B     GD30                    AND CONTINUE\nGD10     EQU   *\n         CLI   DEVBUF+3,X'0C'          IS THIS A 3375?\n         BNE   GD20                    IF NOT, BRANCH\n         MVC   TYPE,=C'3375,'          STORE TYPE\n         B     GD30                    AND CONTINUE\nGD20     EQU   *\n         CLI   DEVBUF+3,X'0E'          IS THIS A 3380?\n         BNE   CALCPRI                 IF NOT, BRANCH\n         MVC   TYPE,=C'3380,'          STORE TYPE\nGD30     EQU   *\n         SLR   R7,R7\n         SLR   R8,R8\n         LA    R6,TYPE                 POINT TO DEVICE TYPE\n         CLI   NEWUNIT,C' '            CHANGING TO NEW UNIT?\n         BE    GD40                    IF NOT, BRANCH\n         LA    R6,NEWUNIT              POINT TO NEW UNIT\nGD40     EQU   *\n         CLC   0(4,R6),=C'3350'        3350?\n         BNE   GD50                    IF NOT, BRANCH\n         LA    R7,36                   SET FOR MULTIPLES OF 36 DIR BLKS\n         MVI   NEWDEV,X'0B'            SET NEW DEVICE BYTE\n         LA    R8,30                   SET FOR 30 TRACKS/CYL\n         B     GD70\nGD50     EQU   *\n         CLC   0(4,R6),=C'3375'        3375?\n         BNE   GD60                    IF NOT, BRANCH\n         LA    R7,43                   SET FOR MULTIPLES OF 43 DIR BLKS\n         MVI   NEWDEV,X'0C'            SET NEW DEVICE BYTE\n         LA    R8,12                   SET FOR 12 TRACKS/CYL\n         B     GD70\nGD60     EQU   *\n         CLC   0(4,R6),=C'3380'        3380?\n         BNE   GD70                    IF NOT, BRANCH\n         LA    R7,46                   SET FOR MULTIPLES OF 46 DIR BLKS\n         MVI   NEWDEV,X'0E'            SET NEW DEVICE BYTE\n         LA    R8,15                   SET FOR 15 TRACKS/CYL\nGD70     EQU   *\n         ST    R7,IDEAL#               SAVE THE NUMBER\n         ST    R8,TRKPCYL2             SAVE # OF TRACKS PER CYLINDER\n*\n*  READ THE VTOC FORMAT-1 RECORDS.  PROCESS ALL DATA SETS ON VOLUME\n*    WITH THE EXCEPTION OF A FEW (SUCH AS THE VTOC INDEX, CATALOG\n*    CATALOG INDEX, TEMPORARY DATA SETS, ETC.)\n*\nREADIT   EQU   *\n         L     R9,DEBADDR              GET DEB ADDRESS AND READ VTOC\n         CVAFSEQ DEB=(R9),BUFLIST=BUFLIST,DSN=DS1DSNAM,MF=(E,EX3)\n         LTR   R15,R15                 IF SUCCESSFUL,\n         BZ    RI05                      BRANCH\n         LR    R9,R15                  SAVE RETURN CODE\n         MVC   RCODE,CVSTAT              AND STATUS\n         CVAFDIR ACCESS=RLSE,BUFLIST=0,IXRCDS=NOKEEP,MF=(E,EX3)\n         LR    R15,R9                  RELEASE BUFFERS & RESTORE RC\n         C     R15,=F'4'               JUST A 4?\n         BNE   CLOSEX                  IF NOT, BRANCH TO ERROR EXIT\n         CLI   RCODE,STAT032           IS IT END OF DATA?\n         BE    CLOSE                   IF SO, NORMAL EXIT\n         ABEND 10,DUMP\n         B     CLOSEX                  ELSE, BRANCH TO ERROR EXIT\nRI05     EQU   *\n         CLI   DS1FMTID,C'1'           FORMAT 1 RECORD?\n         BNE   READIT                  IF NOT, GO BACK FOR ANOTHER\n         CLC   DS1DSNAM(11),=C'SYS1.VTOCIX'\n         BE    IGNORE\n         CLC   DS1DSNAM(9),=C'SYS1.VVDS'\n         BE    IGNORE\n         CLC   DS1DSNAM(7),=C'CATALOG'            IGNORE CERTAIN\n         BE    IGNORE                              DATA SETS\n         CLC   DS1DSNAM(8),=C'CATINDEX'\n         BE    IGNORE\n         CLC   DS1DSNAM(8),=C'FDRABR.V'\n         BE    IGNORE\n         CLC   DS1DSNAM(3),=C'SYS'\n         BNE   PROCDS\n         LA    R7,DS1DSNAM+3\n         LA    R8,5\nRI10     EQU   *\n         TM    0(R7),X'F0'\n         BNO   PROCDS\n         LA    R7,1(R7)\n         BCT   R8,RI10\nIGNORE   EQU   *\n         MVC   SPDSN(L'DS1DSNAM),DS1DSNAM  GET DATA SET NAME\n         PUT   SYSPRINT,SPLINE             WRITE INTO SYSPRINT FILE\n         B     READIT\n*\n*  IF VSAM .INDEX FILE, SKIP IT.  IF .DATA, REMOVE THE .DATA SO\n*    ONLY THE CLUSTER NAME IS LEFT.  IF VSAM ALTERNATE INDEX,\n*    OUTPUT MESSAGE TO SYSPRINT AND GO ON TO THE NEXT DATA SET.\n*    FOR ALL DATA SETS TO BE PROCESSED, BUILED THE TAPE DATA SET\n*    NAME AND CALCULATE THE SEQUENCE NUMBER.\n*\nPROCDS   EQU   *\n         MVC   SAVDSNAM,DS1DSNAM       SAVE THE DATA SET NAME\n         TM    DS1DSORG+1,DS1ACBM      VSAM FILE?\n         BO    PD05                    IF SO, BRANCH\n         CLI   VSAMONLY,C'Y'           VSAM ONLY?\n         BE    READIT                  IF SO, GO BACK FOR ANOTHER\n         TM    DS1DSORG,DS1DSGPS+DS1DSGPO  IS IT EITHER PS OR PO?\n         BM    PD30                    IF SO, GO AHEAD\n         B     IGNORE                  IF NEITHER, SKIP IT\nPD05     EQU   *\n         CLI   NOVSAM,C'Y'             IGNORE VSAM?\n         BE    READIT                  IF SO, LOOP BACK TO READ\n         LA    R7,SAVDSNAM             GET ADDRESS OF DATA SET NAME\n         LA    R8,L'SAVDSNAM           SET LOOP FOR MAX OF 44\nPD10     EQU   *\n         CLI   0(R7),C' '              LOOK FOR END OF NAME\n         BE    PD20                    IF FOUND, BRANCH\n         LA    R7,1(R7)                IF NOT, INCREMENT ADDRESS\n         BCT   R8,PD10                 AND LOOP\nPD20     EQU   *\n         S     R7,=F'5'                GO BACK 5 CHARACTERS\n         CLC   0(5,R7),=C'.DATA'       IS THIS THE DATA COMPONENT?\n         BNE   READIT                  IF NOT, SKIP IT\n         MVC   0(5,R7),=C'     '       IF SO, CLEAR OUT FOR CLUSTER\n         S     R7,=F'4'                GO BACK 5 MORE CHARACTERS\n         CLC   0(3,R7),=C'AIX'         IS THIS AN ALTERNATE INDEX?\n         BE    IGNORE                  IF SO, SKIP IT\nPD30     EQU   *\n         MVC   TAPEDSN,SAVDSNAM        BUILD TAPE DATA SET NAME\n         LA    R5,TAPEDSN\n         BAL   R2,NXTSPC               POINT TO END OF DATA SET NAME\n         MVI   0(R5),C'.'              TACK ON DATE GIVEN IN PARAMETERS\n         MVC   1(5,R5),DATE\n         MVC   6(3,R5),=C'EXP'\n         AP    SEQNUM,=P'1'            INCREMENT SEQUENCE NUMBER\n         UNPK  SEQ#,SEQNUM             UNPACK SEQUENCE NUMBER\n         MVZ   SEQ#+7(1),SEQ#+6        MOVE ZONE BYTE\n         LA    R6,SEQ#+4               LEFT JUSTIFY & SPACE FILL\n         MVI   NUM,X'40'               INIT NUMBER\n         MVC   NUM+1(L'NUM-1),NUM\n         LA    R7,NUM\n         LA    R8,4                    ONLY WORRY ABOUT LAST 4 DIGITS\nPD40     EQU   *\n         CLI   0(R6),C'0'              LEADING ZERO?\n         BNE   PD50                    IF NOT, GET IT\n         LA    R6,1(R6)                INCREMENT POINTER\n         BCT   R8,PD40                 LOOP THRU 4 CHARACTERS\n         B     PD60\nPD50     EQU   *\n         MVC   0(1,R7),0(R6)           IF SOMETHING ELSE, MOVE IT\n         LA    R7,1(R7)                INCREMENT POINTER\n         LA    R6,1(R6)                INCREMENT POINTER\n         BCT   R8,PD50                 LOOP THRU 4 CHARACTERS\nPD60     EQU   *\n         TM    DS1DSORG+1,DS1ACBM      VSAM FILE?\n         BO    VSAM                    IF SO, BRANCH TO VSAM SECTION\n         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?\n         BNO   NONVSAM                 IF NOT, BRANCH\n*\n*  FOR PARTITIONED DATA SET, CALCULATE NUMBER OF DIRECTORY BLOCKS\n*\nPODS     EQU   *\n         LA    R9,PARTDS               GET ADDRESS OF DCB6\n         USING IHADCB,R9               ADDRESSIBILITY TO DCB\n         LA    R8,JFCBA2               GET ADDRESS OF BUFFER\n         ST    R8,EXLIST2              STORE ADDRESS IN EXIT LIST\n         MVI   EXLIST2,X'87'           SET END OF LIST & JFCB BYTE\n         LA    R6,EXLIST2              GET ADDRESS OF EXIT LIST\n         ST    R6,DCBEXLST             STORE IN DCB\n         DROP  R9\n         LR    R9,R8\n         RDJFCB (PARTDS,),MF=(E,EX1)   READ JOB FILE CONTROL BLOCK\n         USING INFMJFCB,R9             ESTABLISH ADDRESSABILITY\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNZ   RETURN                  IF NOT SUCCESSFUL, EXIT\n         MVC   JFCBDSNM,SAVDSNAM       CHANGE DATASET NAME TO\n         OI    JFCBTSDM,JFCNWRIT       SET FLAG NOT TO WRITE BACK\n         DROP  R9\n         OPEN  (PARTDS,INPUT),TYPE=J,MF=(E,EX2) OPEN THE DATASET\n         LTR   R15,R15\n         BNZ   CLOSEX\n         SLR   R7,R7                   INITIALIZE R7\nPO10     EQU   *\n         READ  DECB,SF,PARTDS,DSCB2,'S',MF=E  READ THE 256-BYTE BLOCKS\n         CHECK DECB                    WAIT UNTIL I/O DONE\n         LA    R7,1(R7)                COUNT THE NUMBER OF BLOCKS\n         B     PO10\nPO20     EQU   *\n         L     R5,IDEAL#               GET IDEAL NUMBER OF DIR BLKS\n         LTR   R5,R5                   MAKE SURE IT'S NOT ZERO\n         BE    PO30                    IF IT IS, LEAVE IT ALONE\n         SLR   R6,R6                   CLEAR OUT R6 FOR THE REMAINDER\n         DR    R6,R5                   DIVIDE BY IDEAL NUMBER\n         LTR   R6,R6                   ANY REMAINDER?\n         BE    PO30                    IF NOT, BRANCH\n         LA    R7,1(R7)                IF SO, INCREMENT R7\n         SLR   R6,R6                   CLEAR OUT R6 FOR THE MULTIPLY\nPO30     EQU   *\n         MR    R6,R5                   MULTIPLY (RESULT WILL BE IN R7)\n         BAL   R2,CNVEBC               CONVERT # OF BLOCKS TO EBCDIC\n         MVC   DIRBLKS,WORK2           AND SAVE IT FOR LATER\n         CLOSE PARTDS,MF=(E,EX4)       CLOSE THE FILE\n*\n*  GENERATE JCL FOR NON-VSAM FILES (PO AND PS ONLY).\n*\nNONVSAM  EQU   *\n*\n*  CONVERT SECONDARY ALLOCATION TO PROPER VALUE FOR NEW DEVICE.\n*  CONVERT PARMS INTO EBCDIC - SECONDARY ALLOCATION, RECORD LENGTH,\n*    AND BLOCK LENGTH.\n*\n         TM    NEWDEV,X'0B'            ARE WE GOING TO A 3350?\n         BNO   NV03                    IF NOT, BRANCH\n         SLR   R6,R6                   CLEAR OUT R6\n         ICM   R6,B'0011',DS1BLKL      GET THE BLOCK SIZE\n         C     R6,=F'19069'            IS THE BLOCK SIZE TOO BIG?\n         BH    IGNORE                  IF SO, IGNORE IT\nNV03     EQU   *\n         STM   R1,R14,WORK3            SAVE REGISTERS\n         TRKCALC FUNCTN=TRKCAP,TYPE=DEVBUF+3,DD=DS1BLKL,R=1,MF=(E,EX5)\n         ST    R0,NUMBLKS              SAVE # OF BLKS/TRK (ORIG UNIT)\n         LM    R1,R14,WORK3            RESTORE REGISTERS\n         TRKCALC FUNCTN=TRKCAP,TYPE=NEWDEV,DD=DS1BLKL,R=1,MF=(E,EX5)\n         ST    R0,NUMBLKS2             SAVE # OF BLKS/TRK (NEW UNIT)\n         LTR   R15,R15\n         BNZ   IGNORE\n         LM    R1,R14,WORK3            RESTORE REGISTERS\n         MVC   TRKSPCYL(2),DEVBUF+10   SAVE # TRACKS / CYLINDER\n         MVI   WORK3,X'00'\n         MVC   WORK3+1(3),DS1SCALO+1   GET SECONDARY ALLOCATION\n         L     R7,WORK3\n         TM    DS1SCALO,X'C0'          IS ALLOCATION IN CYLINDERS?\n         BO    NV05                    IF SO, BRANCH\n         TM    DS1SCALO,X'40'          IS ALLOCATION IN BLOCKS?\n         BO    NV30                    IF SO, BRANCH\n         B     NV10                    ELSE, IT MUST BE TRACKS\nNV05     EQU   *\n         MH    R7,TRKSPCYL             CONVERT TO TRACKS\nNV10     EQU   *\n         SLR   R6,R6                   ZERO OUT R6 FOR MULTIPLY\n         M     R6,NUMBLKS              CONVERT TO NUMBER OF BLOCKS\n         SLR   R6,R6                   ZERO OUT R6 FOR DIVIDE\n         D     R6,NUMBLKS2             CONVERT TO TRACKS FOR NEW DEVICE\n         LTR   R6,R6                   ANY REMAINDER?\n         BZ    NV20                    IF NOT, BRANCH\n         LA    R7,1(R7)                IF SO, UP THE ALLOCATION\nNV20     EQU   *\n         TM    DS1SCALO,X'C0'          ALLOCATION IN CYLINDERS?\n         BNO   NV30                    IF NOT, ALL DONE\n         SLR   R6,R6                   ZERO OUT R6 FOR DIVIDE\n         D     R6,TRKPCYL2             CONVERT TO CYLINDERS FOR NEW DEV\n         LTR   R6,R6                   ANY REMAINDER?\n         BZ    NV30                    IF NOT, BRANCH\n         LA    R7,1(R7)                IF SO, UP THE ALLOCATION\nNV30     EQU   *\n         BAL   R2,CNVEBC               CONVERT TO EBCDIC\n         MVC   SECALLOC,WORK2          AND STORE\n         MVC   LRECL(2),=X'0000'       PUT RECORD LENGTH INTO\n         MVC   LRECL+2(2),DS1LRECL       A FULL WORD\n         L     R7,LRECL                GET RECORD LENGTH\n         BAL   R2,CNVEBC               CONVERT TO EBCDIC\n         MVC   RECLEN,WORK2            AND STORE\n         MVC   WORK3(2),DS1BLKL        GET BLOCK SIZE\n         SLR   R7,R7\n         LH    R7,WORK3\n         BAL   R2,CNVEBC               CONVERT TO EBCDIC\n         MVC   BLKSIZE,WORK2           AND STORE\n*\n*  CALCULATE PRIMARY ALLOCATION\n*\nCALCPRI  EQU   *\n         MVC   HIHH(2),DS1EXT1+8       SAVE UPPER TRACK\n         MVC   LOHH(2),DS1EXT1+4       SAVE LOWER TRACK\n         MVC   HICC(2),DS1EXT1+6       SAVE UPPER CYLINDER\n         MVC   LOCC(2),DS1EXT1+2       SAVE LOWER CYLINDER\n         LA    R5,ALLOC                GET ADDRESS TO BUILD ALLOC PARMS\n         MVI   ALLOC,X'40'             CLEAR THE BUFFER\n         MVC   ALLOC+1(L'ALLOC-1),ALLOC\n         SLR   R6,R6\n         LH    R6,HIHH                 GET UPPER TRACK\n         SLR   R7,R7\n         LH    R7,HICC                 GET UPPER CYLINDER\n         CH    R6,LOHH                 UPPER TRACK > LOWER TRACK?\n         BNL   CP10                    IF SO, BRANCH\n         SH    R7,=X'0001'             OTHERWISE, BORROW A CYLINDER\n         AH    R6,TRKSPCYL             AND ADD A CYL OF TRACKS\nCP10     EQU   *\n         SH    R7,LOCC                 UPPER CYL - LOWER CYL\n         MH    R7,TRKSPCYL             CONVERT TO TRACKS\n         SH    R6,LOHH                 UPPER TRK - LOWER TRK\n         AR    R7,R6                   ADD TOGETHER FOR TOTAL TRACKS\n         AH    R7,=X'0001'             ADJUSTMENT OF 1 TRACK\n         SLR   R6,R6                   ZERO OUT R6 FOR MULTIPLY\n         M     R6,NUMBLKS              CONVERT FROM TRACKS TO BLOCKS\n         TM    DS1SCALO,X'C0'          IS ALLOCATION IN CYLINDERS?\n         BO    CP20                    IF SO, BRANCH\n         TM    DS1SCALO,X'40'          IS ALLOCATION IN BLOCKS?\n         BNO   CP20                    IF NOT, BRANCH\n         MVC   0(8,R5),BLKSIZE         GET BLOCK SIZE\n         BAL   R2,NXTSPC\n         MVC   0(2,R5),=C',('\n         B     CP60\nCP20     EQU   *\n         SLR   R6,R6                   ZERO OUT R6 FOR DIVIDE\n         D     R6,NUMBLKS2             CONVERT FROM BLOCKS TO TRACKS\n         LTR   R6,R6                   ANY REMAINDER?\n         BZ    CP30                    IF NOT, BRANCH\n         LA    R7,1(R7)                IF SO, ADD ON ANOTHER TRACK\nCP30     EQU   *\n         TM    DS1SCALO,X'C0'          IS ALLOCATION IN CYLINDERS?\n         BO    CP40                    IF SO, BRANCH\n         MVC   0(5,R5),=C'TRK,('       INDICATE TRACKS\n         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?\n         BNO   CP60                    IF NOT, BRANCH\n         C     R7,=F'1'                ONLY 1 TRACK?\n         BNE   CP60                    IF MORE, BRANCH\n         LA    R7,1(R7)                INCREASE BY 1\n         B     CP60                    AND CONTINUE\nCP40     EQU   *\n         SLR   R6,R6                   ZERO OUT R6 FOR DIVIDE\n         D     R6,TRKPCYL2             CONVERT FROM TRACKS TO CYLINDERS\n         LTR   R6,R6                   ANY REMAINDER?\n         BZ    CP50                    IF NOT, BRANCH\n         LA    R7,1(R7)                IF SO, ADD ON ANOTHER TRACK\nCP50     EQU   *\n         MVC   0(5,R5),=C'CYL,('       INDICATE CYLINDERS\nCP60     EQU   *\n         BAL   R2,CNVEBC               CONVERT TO EBCDIC\n         MVC   PRIALLOC,WORK2          AND STORE\n         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?\n         BO    CNSTJCL                 IF SO, SKIP AHEAD\n*\n*  FIGURE OUT RECORD FORMAT\n*\nGETRECF  EQU   *\n         MVI   RECFMT,X'40'            CLEAR OUT RECORD FORMAT\n         MVC   RECFMT+1(L'RECFMT-1),RECFMT\n         LA    R6,RECFMT               GET STARTING ADDRESS\n         TM    DS1RECFM,X'C0'          UNDEFINED RECORD FORMAT?\n         BNO   GR10                    IF NOT, BRANCH\n         MVI   0(R6),C'U'              SET TO 'U' FOR UNDEFINED\n         B     GR30\nGR10     EQU   *\n         TM    DS1RECFM,X'80'          FIXED LENGTH RECORD?\n         BNO   GR20                    IF NOT, BRANCH\n         MVI   0(R6),C'F'              SET TO 'F' FOR FIXED BLOCKED\n         B     GR30\nGR20     EQU   *\n         TM    DS1RECFM,X'40'          VARIABLE LENGTH RECORD?\n         BNO   GR40                    IF NOT, BRANCH\n         MVI   0(R6),C'V'              SET TO 'V' FOR VARIABLE\nGR30     EQU   *\n         LA    R6,1(R6)                GO TO NEXT CHARACTER\nGR40     EQU   *\n         TM    DS1RECFM,X'10'          BLOCKED?\n         BNO   GR50                    IF NOT, BRANCH\n         MVI   0(R6),C'B'              SET TO 'B' FOR BLOCKED\n         LA    R6,1(R6)                GO TO NEXT CHARACTER\nGR50     EQU   *\n         TM    DS1RECFM,X'20'          TRACK OVERFLOW?\n         BNO   GR60                    IF NOT, BRANCH\n         MVI   0(R6),C'T'              SET TO 'T' FOR TRACK OVERFLOW\n         LA    R6,1(R6)                GO TO NEXT CHARACTER\nGR60     EQU   *\n         TM    DS1RECFM,X'08'          SPANNED OR STANDARD?\n         BNO   GR70                    IF NOT, BRANCH\n         MVI   0(R6),C'S'              SET TO 'S' FOR SPAN OR STANDARD\n         LA    R6,1(R6)                GO TO NEXT CHARACTER\nGR70     EQU   *\n         TM    DS1RECFM,X'04'          ASA CONTROL CHARACTER?\n         BNO   GR80                    IF NOT, BRANCH\n         MVI   0(R6),C'A'              SET TO 'A' FOR ASA CHARACTER\n         LA    R6,1(R6)                GO TO NEXT CHARACTER\nGR80     EQU   *\n         TM    DS1RECFM,X'02'          MACHINE CONTROL CHARACTER?\n         BNO   GR90                    IF NOT, BRANCH\n         MVI   0(R6),C'M'              SET TO 'M' FOR MACHINE CHARACTER\nGR90     EQU   *\n*\n*  FIGURE OUT TAPE BLOCK SIZE\n*\nGETTBLK  EQU   *\n         L     R7,=F'32760'\n         CLI   RECFMT,C'F'             FIXED RECORD LENGTH?\n         BNE   GB10                    IF NOT, BRANCH\n         SLR   R6,R6\n         D     R6,LRECL                GET INTEGER PART OF 32760/LRECL\n         M     R6,LRECL                AND MULTIPLY BY LRECL\nGB10     EQU   *\n         BAL   R2,CNVEBC               CONVERT TO EBCDIC\n         MVC   TBLKSIZE,WORK2          AND STORE\n*\n*  CONSTUCT JCL\n*\nCNSTJCL  EQU   *\n         MVC   LINE(2),=C'//'          GET READY FOR JCL LINES\n         MVC   LLABEL(4),=C'STEP'      START LINE1\n         MVC   LLABEL+4(L'NUM),NUM     GIVE STEP A SEQUENCE NUMBER\n         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?\n         BNO   CJ10                    IF NOT, BRANCH\n         MVC   LCOL1(L'LINE1C),LINE1C  SET UP EXECUTE LINE FOR IEBCOPY\n         B     CJ20\nCJ10     EQU   *\n         MVC   LCOL1(L'LINE1B),LINE1B  SET UP EXECUTE LINE FOR IEBGENER\nCJ20     EQU   *\n         MVI   PRNTFLG,C'B'            SET FLAG TO OUTPUT TO BOTH\n         BAL   R3,PRINTIT              OUTPUT JCL LINES\n         MVC   LLABEL(L'LINE2A),LINE2A SET UP SYSPRINT LINE\n         BAL   R3,PRINTIT              OUTPUT TO BOTH FILES\n         MVC   LLABEL(6),=C'SYSUT2'    SET UP FIRST SYSUT2 LINE\n         MVC   LCOL1(L'LINE3A),LINE3A  ADD TAPE DATA SET NAME\n         MVC   LCOL1+L'LINE3A(L'TAPEDSN),TAPEDSN\n         LA    R5,LCOL1\n         BAL   R2,NXTSPC\n         MVI   0(R5),C','              END WITH A COMMA\n         MVI   PRNTFLG,C'E'            PUT THIS LINE IN EXPORT ONLY\n         BAL   R3,PRINTIT\n         MVC   LLABEL(6),=C'SYSUT1'    MODIFY TO SYSUT1 FOR IMPORT\n         MVI   PRNTFLG,C'I'            PUT INTO IMPORT FILE ONLY\n         BAL   R3,PRINTIT\n         MVC   LCOL2(L'LINE3B),LINE3B  ADD DATA SET DISPOSITION\n         MVI   PRNTFLG,C'E'            PUT THIS LINE IN EXPORT ONLY\n         BAL   R3,PRINTIT\n         MVC   LCOL2(L'LINE3C),LINE3C  CHANGE DISPOSITION\n         MVI   PRNTFLG,C'I'            PUT INTO IMPORT FILE ONLY\n         BAL   R3,PRINTIT\n         MVC   LCOL2(L'LINE4A),LINE4A  SET UP NEXT SYSUT2 LINE\n         MVC   LCOL2+L'LINE4A(L'LINE4B),LINE4B\n         LA    R5,LCOL2\n         CLI   REF,C' '                REFER BACK TO A PREVIOUS DD?\n         BNE   CJ30                    IF SO, BRANCH\n         MVC   REF(L'REFSYSUT),REFSYSUT  IF NOT, LOAD IT FOR NEXT TIME\n         B     CJ40\nCJ30     EQU   *\n         BAL   R2,NXTSPC\n         MVC   0(L'REF,R5),REF         REFER BACK TO PREVIOUS DD\nCJ40     EQU   *\n         BAL   R2,NXTSPC               FIND END OF LINE SO FAR\n         MVC   0(L'LINE4C,R5),LINE4C   ADD TAPE LABEL\n         MVC   L'LINE4C(L'NUM,R5),NUM  LOAD SEQUENCE NUMBER\n         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?\n         BO    CJ45                    IF SO, SKIP COMMA\n         BAL   R2,NXTSPC\n         MVI   0(R5),C','\nCJ45     EQU   *\n         MVI   PRNTFLG,C'E'            PRINT IN EXPORT FILE ONLY\n         BAL   R3,PRINTIT\n         MVI   LLABEL,X'40'            CLEAR OUT LINE\n         MVC   LLABEL+1(77),LLABEL\n         MVC   LCOL2(L'LINE4B),LINE4B  SET UP SECOND SYSUT1 LINE\n         MVI   LCOL2+L'LINE4B,C')'\n         MVI   PRNTFLG,C'I'            PRINT IN IMPORT FILE ONLY\n         BAL   R3,PRINTIT\n         TM    DS1DSORG,DS1DSGPO       PARTITIONED DATA SET?\n         BO    CJ60                    IF SO, SKIP NEXT LINE\n         MVC   LCOL2(L'LINE5A),LINE5A  SET UP THIRD SYSUT2 LINE\n         MVC   LCOL2+L'LINE5A(L'TBLKSIZE),TBLKSIZE  GET TAPE BLK SIZE\n         LA    R5,LCOL2\n         BAL   R2,NXTSPC\n         MVC   0(L'LINE5B,R5),LINE5B   ADD TAPE DENSITY\n         CLI   RECLEN,X'40'            RECORD LENGTH OF ZERO?\n         BE    CJ50                    IF SO, BRANCH\n         MVC   L'LINE5B(L'LINE5C,R5),LINE5C  ADD RECORD LENGTH\n         MVC   L'LINE5B+L'LINE5C(L'RECLEN,R5),RECLEN\nCJ50     EQU   *\n         BAL   R2,NXTSPC\n         MVC   0(L'LINE5D,R5),LINE5D   ADD RECORD FORMAT\n         MVC   L'LINE5D(L'RECFMT,R5),RECFMT\n         BAL   R2,NXTSPC\n         MVI   0(R5),C')'              ADD ENDING PAREN\n         MVC   PRNTFLG,C'E'            OUTPUT INTO EXPORT FILE ONLY\n         BAL   R3,PRINTIT\n         MVI   LLABEL,C' '             CLEAR OUT LINE BUFFER\n         MVC   LLABEL+1(77),LLABEL\nCJ60     EQU   *\n         MVC   LLABEL(6),=C'SYSUT1'    SET UP FIRST SYSUT1 EXPORT LINE\n         MVC   LCOL1(L'LINE3A),LINE3A  PUT IN DATA SET NAME\n         MVC   LCOL1+L'LINE3A(L'SAVDSNAM),SAVDSNAM\n         LA    R5,LCOL1\n         BAL   R2,NXTSPC\n         MVI   0(R5),C','              PUT COMMA AT END\n         MVI   PRNTFLG,C'E'\n         BAL   R3,PRINTIT              PUT INTO EXPORT FILE ONLY\n         MVC   LLABEL(6),=C'SYSUT2'    CHANGE TO SYSUT2 FOR IMPORT\n         MVC   1(L'LINE3B,R5),LINE3B   ADD DISPOSITION\n         MVI   PRNTFLG,C'I'            PUT INTO IMPORT FILE ONLY\n         BAL   R3,PRINTIT\n         MVC   LCOL2(L'LINE7C),LINE7C   SET UP NEXT LINE FOR EXPORT\n         MVC   LCOL2+L'LINE7C(L'VOL),VOL  ADD VOLSER\n         MVC   LCOL2+L'LINE7C+L'VOL(L'LINE7D),LINE7D  ADD UNIT\n         MVC   LCOL2+L'LINE7C+L'VOL+L'LINE7D(L'TYPE),TYPE\n         MVI   PRNTFLG,C'E'            PUT INTO EXPORT FILE\n         BAL   R3,PRINTIT\n         CLI   NEWVOL,X'40'            NEW VOLUME FOR IMPORT?\n         BE    CJ70                    IF NOT, BRANCH\n         MVC   LCOL2+L'LINE7C(L'NEWVOL),NEWVOL  ADD NEW VOLSER\n         CLI   NEWUNIT,X'40'           NEW UNIT FOR IMPORT?\n         BE    CJ70                    IF NOT, BRANCH\n         MVC   LCOL2+L'LINE7C+L'NEWVOL+L'LINE7D(L'NEWUNIT),NEWUNIT\nCJ70     EQU   *\n         MVI   PRNTFLG,C'I'            PUT INTO IMPORT FILE\n         BAL   R3,PRINTIT\n         MVC   LCOL2(L'LINE6B),LINE6B  ADD DATA SET DISPOSITION\n         MVI   PRNTFLG,C'E'            PUT INTO EXPORT ONLY\n         BAL   R3,PRINTIT\n         MVI   LLABEL,X'40'            RESET THE LINE BUFFER\n         MVC   LLABEL+1(77),LLABEL       TO SPACES\n         MVC   LCOL2(L'LINE6C),LINE6C  ADD PROPER ALLOCATION\n         MVC   LCOL2+L'LINE6C(L'ALLOC),ALLOC\n         LA    R5,LCOL2\n         BAL   R2,NXTSPC\n         MVC   0(L'PRIALLOC,R5),PRIALLOC  ADD PRIMARY ALLOCATION\n         TM    DS1DSORG,DS1DSGPO          PARTITIONED DATA SET?\n         BO    CJ80                       LEAVE SPACE FOR SEC ALLOC\n         CLI   SECALLOC,X'40'             ANY SECONDARY ALLOCATION?\n         BE    CJ90                       IF NOT, BRANCH\nCJ80     EQU   *\n         BAL   R2,NXTSPC\n         MVI   0(R5),C','\n         MVC   1(L'SECALLOC,R5),SECALLOC  ADD SECONDARY ALLOCATION\nCJ90     EQU   *\n         BAL   R2,NXTSPC\n         TM    DS1DSORG,DS1DSGPO        PARTITIONED DATA SET?\n         BNO   CJ100                    IF NOT, END OF LINE\n         MVI   0(R5),C','               PUT IN ANOTHER COMMA\n         MVC   1(L'DIRBLKS,R5),DIRBLKS  ADD # OF DIRECTORY BLOCKS\n         BAL   R2,NXTSPC\nCJ100    EQU   *\n         MVC   0(2,R5),=C'))'\n         TM    DS1DSORG,DS1DSGPO        PARTITIONED DATA SET?\n         BO    CJ105                    IF SO, END OF LINE\n         MVI   2(R5),C','               IF NOT, ADD COMMA\nCJ105    EQU   *\n         MVI   PRNTFLG,C'I'             PUT INTO IMPORT FILE ONLY\n         BAL   R3,PRINTIT\n         TM    DS1DSORG,DS1DSGPO        PARTITIONED DATA SET?\n         BNO   CJ110                    IF NOT, BRANCH\n         MVC   LLABEL(L'LINE9A),LINE9A  SET UP SYSUT3 LINE\n         MVI   PRNTFLG,C'B'             PUT INTO BOTH FILES\n         BAL   R3,PRINTIT\n         MVC   LLABEL(L'LINE9B),LINE9B  SET UP SYSUT4 LINE\n         BAL   R3,PRINTIT               PUT INTO BOTH FILES\n         B     CJ130\nCJ110    EQU   *\n         MVC   LCOL2(L'LINE5A),LINE5A\n         LA    R5,LCOL2\n         BAL   R2,NXTSPC\n         MVC   0(L'BLKSIZE,R5),BLKSIZE  ADD BLOCK SIZE\n         BAL   R2,NXTSPC\n         CLI   RECLEN,X'40'             RECORD LENGTH PRESENT?\n         BE    CJ120                    IF NOT, BRANCH\n         MVC   0(L'LINE5C,R5),LINE5C    ADD RECORD LENGTH\n         MVC   L'LINE5C(L'RECLEN,R5),RECLEN\n         BAL   R2,NXTSPC\nCJ120    EQU   *\n         MVC   0(L'LINE5D,R5),LINE5D    ADD RECORD FORMAT\n         MVC   L'LINE5D(L'RECFMT,R5),RECFMT\n         BAL   R2,NXTSPC\n         MVI   0(R5),C')'\n         MVI   PRNTFLG,C'I'             PUT INTO IMPORT FILE ONLY\n         BAL   R3,PRINTIT\nCJ130    EQU   *\n         MVC   LLABEL(L'LINE8A),LINE8A  SET UP 'SYSIN DD DUMMY'\n         MVI   PRNTFLG,C'B'            PUT INTO BOTH FILES\n         BAL   R3,PRINTIT\n         B     GENCLIST                GO TO CREATE RECORD IN CLIST\n*\n*  GENERATE OUTPUT RECORDS FOR VSAM FILES.\n*\nVSAM     EQU   *\n         MVC   LINE(2),=C'//'          GET READY FOR JCL LINES\n         MVC   LLABEL(4),=C'STEP'      START LINE 1\n         MVC   LLABEL+4(L'NUM),NUM     GIVE STEP A SEQUENCE NUMBER\n         MVC   LCOL1(L'LINE1A),LINE1A  SET UP EXECUTE LINE\n         MVI   PRNTFLG,C'B'            SET FLAG TO OUTPUT TO BOTH\n         BAL   R3,PRINTIT              PRINT THE LINES\n         MVC   LLABEL(L'LINE2A),LINE2A SET UP SYSPRINT LINE\n         BAL   R3,PRINTIT              PRINT THE LINES\n         MVC   LLABEL(3),=C'DD1'       START DD1 LINE\n         MVC   LCOL1(L'LINE3A),LINE3A  INDICATE TAPE DATA SET NAME\n         MVC   LCOL1+L'LINE3A(L'TAPEDSN),TAPEDSN\n         LA    R5,LCOL1\n         BAL   R2,NXTSPC               FIND BLANK SPACE\n         MVI   0(R5),C','              INSERT COMMA\n         MVC   1(L'LINE3B,R5),LINE3B   ADD DATA SET DISPOSITION\n         MVI   PRNTFLG,C'E'            PRINT IN EXPORT FILE\n         BAL   R3,PRINTIT\n         MVC   1(L'LINE3C,R5),LINE3C   CHANGE DATA SET DISPOSITION\n         MVI   PRNTFLG,C'I'            PRINT IN IMPORT FILE\n         BAL   R3,PRINTIT\n         MVC   LCOL2(L'LINE4A),LINE4A  SET UP SECOND DD1 LINE\n         MVC   LCOL2+L'LINE4A(L'LINE4B),LINE4B  BY ADDING UNIT & VOL\n         LA    R5,LCOL2\n         CLI   REF,C' '                REFER BACK TO PREVIOUS?\n         BNE   VS10                    IF SO, BRANCH\n         MVC   REF(L'REFDD1),REFDD1    IF NOT, LOAD IT FOR NEXT TIME\n         B     VS20\nVS10     EQU   *\n         BAL   R2,NXTSPC\n         MVC   0(L'REF,R5),REF         REFER BACK TO PREVIOUS DD\nVS20     EQU   *\n         BAL   R2,NXTSPC               FIND END OF LINE SO FAR\n         MVC   0(L'LINE4C,R5),LINE4C   ADD TAPE LABEL\n         MVC   L'LINE4C(L'NUM,R5),NUM  LOAD SEQUENCE NUMBER\n         BAL   R2,NXTSPC\n         MVI   0(R5),C','\n         MVI   PRNTFLG,C'E'            PRINT IN EXPORT FILE\n         BAL   R3,PRINTIT\n         MVI   LLABEL,X'40'            CLEAR OUT LINE\n         MVC   LLABEL+1(77),LLABEL\n         MVC   LCOL2(L'LINE4B),LINE4B  SET UP SECOND DD1 FOR IMPORT\n         MVI   LCOL2+L'LINE4B,C')'     END WITH PAREN\n         MVI   PRNTFLG,C'I'            PRINT IN IMPORT FILE\n         BAL   R3,PRINTIT\n         MVC   LCOL2(L'LINE5A),LINE5A  SET UP THIRE DD1 FOR EXPORT\n         MVC   LCOL2+L'LINE5A(5),=C'32760'  SET TAPE BLOCK SIZE\n         MVC   LCOL2+L'LINE5A+5(L'LINE5B),LINE5B  SET TAPE DENSITY\n         MVI   LCOL2+L'LINE5A+5+L'LINE5B,C')'\n         MVC   PRNTFLG,C'E'            OUTPUT INTO EXPORT FILE ONLY\n         BAL   R3,PRINTIT\n         MVI   LLABEL,C' '             CLEAR OUT LINE BUFFER\n         MVC   LLABEL+1(77),LLABEL\n         CLI   NEWVOL,X'40'            NEW VOLUME SPECIFIED?\n         BE    VS30                    IF NOT, BRANCH\n         MVC   LLABEL(3),=C'DD2'       IF SO, SET UP SPECIAL DD2 LINE\n         MVC   LCOL1(L'LINE5E),LINE5E  GET THE UNIT INFORMATION\n         MVC   LCOL1+L'LINE5E(L'NEWUNIT),NEWUNIT\n         MVI   LCOL1+L'LINE5E+L'NEWUNIT,C','\n         LA    R5,LCOL1+L'LINE5E+L'NEWUNIT+1  CHANGE GEARS TO SHORTEN\n         MVC   0(L'LINE7C,R5),LINE7C   GET THE VOLUME\n         MVC   L'LINE7C(L'NEWVOL,R5),NEWVOL\n         MVC   L'LINE7C+L'NEWVOL(L'LINE5F,R5),LINE5F  FINISH LINE\n         MVI   PRNTFLG,C'I'             OUTPUT TO IMPORT ONLY\n         BAL   R3,PRINTIT               PRINT THE LINE\nVS30     EQU   *\n         MVC   LLABEL(L'LINE6A),LINE6A SET UP 'SYSIN DD *' LINE\n         MVI   PRNTFLG,C'B'            SET FLAG FOR BOTH\n         BAL   R3,PRINTIT              OUTPUT THE LINES\n         MVC   LINE(8),=C'  EXPORT'    SET UP 'SYSIN' LINE FOR EXPORT\n         MVC   LINE+9(L'SAVDSNAM),SAVDSNAM  LOAD DATA SET NAME\n         LA    R5,LINE+8\n         BAL   R2,NXTSPC\n         MVC   1(L'LINE7A,R5),LINE7A   LOAD REST OF 'SYSIN' LINE\n         MVC   PRNTFLG,C'E'            WRITE INTO EXPORT FILE ONLY\n         BAL   R3,PRINTIT\n         MVI   LLABEL,C' '             CLEAR OUT LINE\n         MVC   LLABEL+1(77),LLABEL\n         MVC   LINE(8),=C'  IMPORT'    SET UP 'SYSIN' LINE FOR IMPORT\n         MVC   LINE+9(11),=C'OUTDATASET('\n         MVC   LINE+20(L'SAVDSNAM),SAVDSNAM  ADD DATA SET NAME\n         LA    R5,LINE+20\n         BAL   R2,NXTSPC\n         MVC   0(L'LINE7B,R5),LINE7B   LOAD REST OF 'SYSIN' LINE\n         MVI   PRNTFLG,C'I'            WRITE INTO IMPORT FILE ONLY\n         CLI   NEWVOL,X'40'            SPECIAL VSAM REQUESTED?\n         BE    VS40                    IF NOT, BRANCH\n         BAL   R2,NXTSPC               FIND END OF LINE\n         MVI   1(R5),C'-'              AND INDICATE CONTINUED\n         BAL   R3,PRINTIT              WRITE THE LINE\n         LA    R5,LINE+9               POINT TO START FOR NEXT LINE\n         MVC   0(9,R5),=C'OBJECTS(('   START OUT NEXT LINE\n         MVC   9(L'SAVDSNAM,R5),SAVDSNAM  LOAD DATA SET NAME\n         BAL   R2,NXTSPC               FIND NEXT SPACE\n         MVC   1(L'LINE7E,R5),LINE7E   ADD VOLUME\n         MVC   1+L'LINE7E(L'NEWVOL,R5),NEWVOL\n         MVC   1+L'LINE7E+L'NEWVOL(L'LINE7F,R5),LINE7F  FINISH LINE\nVS40     EQU   *\n         BAL   R3,PRINTIT              PRINT THE LINE\n*\n*  CREATE RECORD FOR CLIST\n*\nGENCLIST EQU   *\n         MVC   CMDLINE(6),=C'DELETE'        SET UP CLIST LINE\n         MVC   CMDLINE+7(L'TAPEDSN),TAPEDSN   ADD TAPE DATA SET NAME\n         LA    R5,CMDLINE                     FIND NEXT SPACE\n         BAL   R2,NXTSPC\n         MVC   1(9,R5),=C'NOSCRATCH'          JUST DELETE FROM CATALOG\n         BAL   R3,PRINTC                    PRINT THE LINE\n         B     READIT\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (VTOC,,EXPORT,,IMPORT,,CLIST,,SYSPRINT),MF=(E,EX4)\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     RETURN\nCLOSE    EQU   *\n         MVC   CMDLINE(L'LSTLINE),LSTLINE  PUT LAST LINE INTO CLIST\n         BAL   R3,PRINTC\n         CLOSE (VTOC,,EXPORT,,IMPORT,,CLIST,,SYSPRINT),MF=(E,EX4)\n         SLR   R15,R15\nRETURN   EQU   *\n         LR    R7,R15                  SAVE RETURN CODE\n         FREEMAIN R,LV=LDATA,A=(13)    FREE DYNAMIC WORK AREA\n         LR    R15,R7                  RESTORE RETURN CODE\n         L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n*\n***********************************************************************\n*                                                                     *\n*                      SUBROUTINES                                    *\n*                                                                     *\n***********************************************************************\n*\n*  SUBROUTINE TO WRITE THE OUTPUT LINES INTO THE JCL DATA SETS\n*\nPRINTIT  EQU   *\n         CLI   PRNTFLG,C'I'            IMPORT ONLY?\n         BE    PI10                    IF SO, BRANCH\n         PUT   EXPORT,LINE             WRITE INTO EXPORT FILE\n         CLI   PRNTFLG,C'B'            IMPORT ALSO?\n         BNE   PI20                    IF NOT, BRANCH\nPI10     EQU   *\n         PUT   IMPORT,LINE             WRITE INTO IMPORT FILE\n         MVI   LLABEL,X'40'            RESET THE LINE BUFFER\n         MVC   LLABEL+1(77),LLABEL     TO SPACES\nPI20     EQU   *\n         BR    R3                      RETURN\n*\n*  SUBROUTINE TO PRINT THE CLIST\n*\nPRINTC   EQU   *\n         AP    LINE#,=P'100'           INCREMENT LINE NUMBER\n         UNPK  LINENO,LINE#            UNPACK LINE NUMBER\n         MVZ   LINENO+7(1),LINENO+6      & MOVE ZONE BYTE\n         LA    R5,CMDLINE\n         BAL   R2,NXTSPC               FIND LINE LENGTH\n         LA    R2,CLINE\n         SR    R5,R2                   CALCULATE LINE LENGTH\n         STH   R5,CLINE                  AND STORE\n         MVC   CLINE+2(2),=X'0000'\n         PUT   CLIST,CLINE             WRITE INTO CLIST FILE\n         MVI   CLINE,X'40'             RESET THE LINE BUFFER\n         MVC   CLINE+1(L'CLINE-1),CLINE  TO SPACES\n         BR    R3                      RETURN\n*\n*  SUBROUTINE TO POINT TO THE NEXT DATA POSITION IN THE OUTPUT LINE.\n*\nNXTSPC   EQU   *\n         LA    R5,1(R5)                INCREMENT POINTER\n         CLC   0(4,R5),=C'    '        CHECK FOR A SPACE\n         BNE   NXTSPC                  LOOP TIL SPACE FOUND\n         BR    R2                      RETURN\n*\n*  SUBROUTINE TO CONVERT FROM BINARY TO EBCDIC AND LEFT JUSTIFY.\n*\nCNVEBC   EQU   *\n         CVD   R7,PWORK                CONVERT TO PACKED DECIMAL\n         UNPK  WORK1,PWORK+3(5)        UNPACK RESULTS\n         MVZ   WORK1+7(1),WORK1+6      MOVE THE ZONE BYTE\n         MVI   WORK2,X'40'             CLEAR OUT OTHER WORK BUFFER\n         MVC   WORK2+1(L'WORK2-1),WORK2\n         LA    R6,WORK2                GET ADDRESSES FOR MOVE\n         LA    R8,WORK1\n         LA    R9,8                    MOVE MAX OF 8 CHARACTERS\nCE10     EQU   *\n         CLI   0(R8),C'0'              LEADING ZERO?\n         BE    CE30                    IF SO, BRANCH\nCE20     EQU   *\n         MVC   0(1,R6),0(R8)           MOVE A CHARACTER\n         LA    R6,1(R6)                INCREMENT POINTERS\n         LA    R8,1(R8)\n         BCT   R9,CE20                 AND LOOP TIL DONE\n         B     CE40\nCE30     EQU   *\n         LA    R8,1(R8)                INCREMENT ONE POINTER\n         BCT   R9,CE10                 AND LOOP\nCE40     EQU   *\n         BR    R2                      RETURN\n*\n***********************************************************************\n*                                                                     *\n*                     CONSTANT DATA                                   *\n*                                                                     *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         LTORG\n*\n*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA\n*\nCDATA    DS    0F\nISEQNUM  DC    P'00000000'\nILINE#   DC    P'00000000'\nIREF     DC    CL20' '\nDCB1     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X\n               MACRF=(R),EODAD=CLOSE\nDCB2     DCB   DDNAME=EXPORT,DSORG=PS,RECFM=FB,LRECL=80,               X\n               MACRF=(PM)\nDCB3     DCB   DDNAME=IMPORT,DSORG=PS,RECFM=FB,LRECL=80,               X\n               MACRF=(PM)\nDCB4     DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X\n               MACRF=(PM)\nDCB5     DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X\n               MACRF=(PM)\nDCB6     DCB   DDNAME=VTOC,DSORG=PS,KEYLEN=8,BLKSIZE=256,              X\n               MACRF=(R),EODAD=PO20\nLIST1    RDJFCB (,),MF=L\nLIST2    OPEN   (,),MF=L\nLIST3    CVAFSEQ ACCESS=GT,IXRCDS=KEEP,BRANCH=NO,MF=L\nLIST4    CLOSE  (,),MF=L\nLIST5    TRKCALC MF=L\nLIST6    READ   DECB1,SF,MF=L\nMOVEL    EQU   *-CDATA\n*\n*\n*  MISCELLANEOUS CONSTANTS\n*\nLINE1A   DC    C'EXEC PGM=IDCAMS'\nLINE1B   DC    C'EXEC PGM=IEBGENER'\nLINE1C   DC    C'EXEC PGM=IEBCOPY'\nLINE2A   DC    C'SYSPRINT DD SYSOUT=*'\nLINE3A   DC    C'DD DSN='\nLINE3B   DC    C'DISP=(,CATLG),'\nLINE3C   DC    C'DISP=(OLD,PASS),'\nLINE4A   DC    C'UNIT=TAPE62,'\nLINE4B   DC    C'VOL=(,RETAIN'\nLINE4C   DC    C'),LABEL='\nLINE5A   DC    C'DCB=(BLKSIZE='\nLINE5B   DC    C',DEN=4'\nLINE5C   DC    C',LRECL='\nLINE5D   DC    C',RECFM='\nLINE5E   DC    C'DD UNIT='\nLINE5F   DC    C',DISP=SHR'\nLINE6A   DC    C'SYSIN    DD *'\nLINE6B   DC    C'DISP=(OLD,DELETE,KEEP)'\nLINE6C   DC    C'SPACE=('\nLINE7A   DC    C'OUTFILE(DD1) PURGE PERMANENT'\nLINE7B   DC    C') INFILE(DD1)'\nLINE7C   DC    C'VOL=SER='\nLINE7D   DC    C',UNIT='\nLINE7E   DC    C'VOLUMES('\nLINE7F   DC    C') FILE(DD2)))'\nLINE8A   DC    C'SYSIN    DD DUMMY'\nLINE9A   DC    C'SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(2,1))'\nLINE9B   DC    C'SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,(2,1))'\nREFDD1   DC    C',REF=*.STEP1.DD1'\nREFSYSUT DC    C',REF=*.STEP1.SYSUT2'\nVTOCLBL  DC    CL8'VTOC'\nFSTLINE  DC    C'PROC 0'\nSNDLINE  DC    C'CONTROL LIST NOFLUSH PROMPT MSG'\nLSTLINE  DC    C'END'\nAIXLINE  DC    C'THE FOLLOWING DATA SETS WILL NOT BE EXPORTED:'\n*\n***********************************************************************\n*                                                                     *\n*                    DSECTS FOR GETMAIN'ED AREA                       *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F\n*\nLINE     DS    0CL80\n         DS    CL2\nLLABEL   DS    CL8\n         DS    CL1\nLCOL1    DS    CL2\n         DS    CL1\nLCOL2    DS    CL66\n*\nCLINE    DS    0CL255\n         DS    CL2\nLINENO   DS    CL8\nCMDLINE  DS    CL245\n*\nSPLINE   DS    0CL132\n         DS    CL5\nSPDSN    DS    CL127\n*\nALLOC    DS    CL10\nBLKSIZE  DS    CL8\nDATE     DS    CL5\nDIRBLKS  DS    CL8\nNEWUNIT  DS    CL4\nNEWVOL   DS    CL6\nNUM      DS    CL4\nPRNTFLG  DS    CL1\nPARMBUF  DS    CL20\nPARTREC  DS    CL256\nPRIALLOC DS    CL8\nRCODE    DS    CL1\nRECFMT   DS    CL4\nRECLEN   DS    CL8\nSAVDSNAM DS    CL44\nSECALLOC DS    CL8\nSEQ#     DS    CL8\nTAPEDSN  DS    CL44\nTBLKSIZE DS    CL8\nTYPE     DS    CL5\nVSAMONLY DS    CL1\nNOVSAM   DS    CL1\nVOL      DS    CL6\nWORK1    DS    CL8\nWORK2    DS    CL8\nDSCB     DS    XL140\nJFCBA    DS    XL176\nDSCB2    DS    XL140\nJFCBA2   DS    XL176\nNEWDEV   DS    1X\nHICC     DS    1H\nLOCC     DS    1H\nHIHH     DS    1H\nLOHH     DS    1H\nTRKSPCYL DS    1H\nTRKPCYL2 DS    1F\nDEBADDR  DS    1F\nEXLIST   DS    1F\nEXLIST2  DS    1F\nDEVBUF   DS    5F\nLRECL    DS    1F\nNUMBLKS  DS    1F\nNUMBLKS2 DS    1F\nIDEAL#   DS    1F\nWORK3    DS    7D\nPWORK    DS    1D\nBUFLIST  ICVAFBFL DSECT=NO\nBUFLEN   EQU   *-BUFLIST\n*\nDATA     DS    0F\nSEQNUM   DS    P'00000000'\nLINE#    DS    P'00000000'\nREF      DS    CL20\nVTOC     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X\n               MACRF=(R),EODAD=CLOSE\nEXPORT   DCB   DDNAME=EXPORT,DSORG=PS,RECFM=FB,LRECL=80,               X\n               MACRF=(PM)\nIMPORT   DCB   DDNAME=IMPORT,DSORG=PS,RECFM=FB,LRECL=80,               X\n               MACRF=(PM)\nCLIST    DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X\n               MACRF=(PM)\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X\n               MACRF=(PM)\nPARTDS   DCB   DDNAME=VTOC,DSORG=PS,KEYLEN=8,BLKSIZE=256,              X\n               MACRF=(R),EODAD=PO20\nEX1      RDJFCB (,),MF=L\nEX2      OPEN   (,),MF=L\nEX3      CVAFSEQ ACCESS=GT,IXRCDS=KEEP,BRANCH=NO,MF=L\n         ORG   EX3\nCVPLMAP  ICVAFPL DSECT=NO\nEX4      CLOSE  (,),MF=L\nEX5      TRKCALC MF=L\nEX6      READ   DECB,SF,MF=L\n*\nLDATA    EQU   *-WORKAREA\n*\n*\nDSCB1    DSECT\n         IECSDSL1 1\nDSCBLTH  EQU   *-DSCB1-L'DS1DSNAM\nJFCB     DSECT\n         IEFJFCBN ,\nDCBSECT  DSECT\n         DCBD  DSORG=PS,DEVD=DA\n         END   EXIMPORT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDRXPASS": {"ttr": 7175, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\xc2\\x01\\xc2\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 450, "newlines": 450, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'FDRXPASS - FDR DATA SET SECURITY EXIT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = FDRXPASS                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = FDR DATA SET SECURITY EXIT           *\n*                                                                     *\n*             FUNCTION -                                              *\n*                EXIT KEEPS USERS FROM:                               *\n*                  - RESTORING DATA SETS THEY DO NOT HAVE 'ALTER'     *\n*                    ACCESS TO, UNLESS THEY HAVE READ ACCESS TO APPL  *\n*                    'JCLMAINT'. IF SO, THEY WILL BE ALLOWED TO       *\n*                    USE 'FDRABRUT' TO RESTORE DATA SETS THEY DO      *\n*                    NOT HAVE 'ALTER' ACCESS TO. DATA SETS RESTORED   *\n*                    MAY NOT BE RENAMED, EXCEPT TO CHANGE THE HIGH    *\n*                    LEVEL QUALIFIER.                                 *\n*                  - PERFORMING ABSOLUTE TRACK OPERATIONS WITHOUT     *\n*                    PROPER AUTHORITY.                                *\n*                  - EXECUTING 'FDR' TO DO A FULL VOLUME DUMP OR      *\n*                    RESTORE WITHOUT PROPER AUTHORITY.                *\n*                  - EXECUTING THE 'FDRABRM' MAINTENANCE UTILITY      *\n*                    WITHOUT PROPER AUTHORITY.                        *\n*                  - RESTORING DATA SETS WHICH THEY DO NOT HAVE       *\n*                    'ALTER' ACCESS TO.                               *\n*                  - RESTORING DATA SETS TO ANOTHER DATA SET NAME     *\n*                    UNLESS:                                          *\n*                      - THERE IS A GENERIC PROFILE FOR THE NEW       *\n*                        DATA SET NAME.                               *\n*                      - THEY HAVE 'ALTER' AUTHORITY TO THE NEW       *\n*                        DATA SET NAME.                               *\n*                      - THEY HAVE AT LEAST 'READ' ACCESS TO THE      *\n*                        OLD DATA SET.                                *\n*                  - ARCHIVING OR SCRATCHING DATA SETS UNLESS THEY    *\n*                    HAVE 'ALTER' ACCESS TO THESE DATA SET NAMES.     *\n*                  - DUMPING DATA SETS USING 'FDRDSF' UNLESS THEY     *\n*                    HAVE AT LEAST 'READ' ACCESS TO THESE DATA        *\n*                    SET NAMES.                                       *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                OPERATION =                                          *\n*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *\n*                   INITIALY, ACCEPT THE OPERATION                    *\n*                   GETMAIN DYNAMIC STORAGE, IF NEEDED                *\n*                   FOR REMOTE QUEUE OPERATIONS USING FDRABRUT:       *\n*                     - IF USER HAS 'READ' ACCESS TO THE AP-          *\n*                       PLICATION 'JCLMAINT', ALLOW HIM TO            *\n*                       RESTORE ANY DATASET WITHOUT RENAMING IT       *\n*                       (EXCEPT TO CHANGE HIGH LEVEL QUALIFIER).      *\n*                   FOR ABSOLUTE TRACK OPERATIONS USING DSF:          *\n*                     - IF USER DOES NOT HAVE AT LEAST 'READ'         *\n*                       ACCESS TO THE APPLICATION, 'FDRABSTK',        *\n*                       TERMINATE THE VOLUME FOR PROCESSING           *\n*                   FOR FULL VOLUME DUMP OR RESTORE USING FDR:        *\n*                     - IF USER DOES NOT HAVE AT LEAST 'READ'         *\n*                       ACCESS TO THE APPLICATION, 'FDR',             *\n*                       TERMINATE THE VOLUME FOR PROCESSING           *\n*                   FOR MAINTENANCE OPERATIONS:                       *\n*                     - IF USER DOES NOT HAVE AT LEAST 'READ'         *\n*                       ACCESS TO THE APPLICATION, 'FDRABRM',         *\n*                       TERMINATE THE VOLUME FOR PROCESSING           *\n*                   FOR RESTORE OPERATIONS WITH DSN RENAME:           *\n*                     - IF NO GENERIC PROFILE EXISTS FOR NEW          *\n*                       DSNAME, REJECT DSN FOR RESTORE                *\n*                     - IF USER DOES NOT HAVE 'ALTER' ACCESS          *\n*                       TO THE NEW DSNAME, REJECT THE DSNAME          *\n*                       FOR RESTORE                                   *\n*                     - IF USER DOES NOT HAVE AT LEAST 'READ'         *\n*                       ACCESS TO THE OLD DSNAME, REJECT THE          *\n*                       DSNAME FOR RESTORE                            *\n*                   FOR RESTORE OPERATIONS WITHOUT DSN RENAME:        *\n*                     - IF USER DOES NOT HAVE 'ALTER' AUTHORITY       *\n*                       TO THE OLD DSNAME, REJECT THE DSNAME FOR      *\n*                       RESTORE                                       *\n*                   FOR SCRATCH AND ARCHIVE OPERATIONS:               *\n*                     - IF USER DOES NOT HAVE 'ALTER' AUTHORITY       *\n*                       TO THE DSNAME, REJECT THE DSNAME FOR THESE    *\n*                       OPERATIONS                                    *\n*                   FOR DUMP OPERATIONS USING FDRDSF:                 *\n*                     - IF USER DOES NOT HAVE 'READ' ACCESS TO THE    *\n*                       DSNAME, REJECT THE DSNAME FOR DSF DUMP        *\n*                   FREEMAIN DYNAMIC STORAGE, IF NEEDED               *\n*                   RESTORE REGISTERS                                 *\n*                   RETURN                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  1       = PARAMETER LIST POINTER       *\n*                    REGISTERS 2       = PARAMETER LIST WORK POINTER  *\n*                    REGISTER  3       = PTR - DSNAME/APPLNAME (RACF) *\n*                    REGISTER  4       = ACCESS AUTHORITY (RACHECK)   *\n*                    REGISTER  5 - 10  = WORK REGISTERS               *\n*                    REGISTER  11      = BAL REGISTER                 *\n*                    REGISTER  12      = BASE REGISTER                *\n*                    REGISTER  13      = SAVE AREA POINTER            *\n*                    REGISTER  14      = RETURN                       *\n*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *\n*                                        RETURN CODE REGISTER         *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN, RACHECK     *\n*                                                                     *\n*             MAPPING MACROS USED =                                   *\n*                IECSDSL1                                             *\n*                                                                     *\n*             ASSEMBLER OPTIONS = LIST,RENT                           *\n*                                                                     *\n*             LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,REFR   *\n*                                      AC=1                           *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                09/24/85  WRITTEN.      JWC.                         *\n*                                                                     *\n*                12/18/85  CHANGED TO INITIALIZE LIST FORM OF         *\n*                          RACHECK MACRO PRIOR TO EACH INVOCATION.    *\n*                                        JWC.                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nFDRXPASS CSECT                         FDR DATA SET SECURITY EXIT\n         SAVE  (14,12),,FDRXPASS_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING FDRXPASS,R12            ESTABLISH PGM ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         USING FDRPARM,R2              ESTABLISH ADDRESSABILITY TO\n*                                      FDR PARAMETER LIST\n         MVC   COMPCOD,ACCEPT          INIT, ACCEPT DSN FOR OPERATION\n         EJECT\n***********************************************************************\n*        GETMAIN DYNAMIC STORAGE AND/OR ESTABLISH ADDRESSABILITY\n***********************************************************************\nGETMAIN  DS    0H\n         CLC   REENT,FULL00            WORK ADDRESS IN PARAMETER LIST?\n         BNE   SKIPGET                 YES, DON'T BOTHER WITH GETMAIN\n         GETMAIN R,LV=WORKLEN\n*                                      GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n*                                      IN CURRENT SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         ST    R1,REENT                STORE ADDR OF DYNAMIC WORKAREA\n*                                      IN RE-ENTRANT ADDR POINTER\n         USING WORKAREA,R1             ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         DROP  R1                      FREE REG 1\nSKIPGET  DS    0H\n         L     R13,REENT               LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         CLC   OPMODE,EXITMODE         FINISHED WITH THIS OPERATION?\n         BE    FREEMAIN                YES, PROCEED WITH FREEMAIN\n         USING WORKAREA,R13            NO, ESTABLISH ADDRESSABILITY\n*                                      TO DYNAMIC WORKAREA\n         CLC   OPTYPE,QUEUTYPE         THIS A REMOTE QUEUE OPERATION?\n         BNE   CONTINUE                NO, CONTINUE REGULAR CHECKING\n         BAL   R11,QUEUEOP             YES, SET UP FOR JCLMAINT RACHECK\n         B     FREEMAIN                FREE STORAGE AND RETURN\nCONTINUE DS    0H\n         CLC   OPTIONS,ABSOLUTE        THIS AN ABSOLUTE TRK OPERATION?\n         BE    TRACKOP                 YES, SET UP FOR FDRABSTK RACHECK\n         CLC   OPTYPE,FDRTYPE          THIS A FULL VOLUME OPERATION?\n         BE    FDROP                   YES, SET UP FOR FDR RACHECK\n         CLC   OPTYPE,MAINTYPE         THIS A MAINTENANCE OPERATION?\n         BE    MAINTOP                 YES, SET UP FOR MAINT RACHECK\n         CLC   OPMODE,RESTMODE         IS THIS A RESTORE OPERATION?\n         BE    RESTOP                  YES, SET UP FOR RESTORE RACHECK\n         CLC   OPTIONS,ARCHIVE         IS THIS AN ARCHIVE OPERATION?\n         BE    ARCSCROP                YES, SET UP FOR ARCHIVE RACHECK\n         CLC   OPTIONS,SCRATCH         IS THIS A SCRATCH OPERATION?\n         BE    ARCSCROP                YES, SET UP FOR SCRATCH RACHECK\n         CLC   OPTYPE(3),DSFDUMP       IS THIS A DSF DUMP OPERATION?\n         BE    DSFDMPOP                YES, SET UP FOR DSF DUMP RECHECK\n         B     FREEMAIN                FREE STORAGE (JUST IN CASE)\n         EJECT\n***********************************************************************\n*        SET UP FOR REMOTE QUEUE OPERATION (CLASS OF 'APPL')\n***********************************************************************\nQUEUEOP  DS    0H\n         MVC   RACLIST(INITLEN),INITDATA    STATIC INFO TO DYNAMIC FORM\n         MVC   REJCTCOD,REJECT         VARIBLE REJECT CODE = 'R'\n         LA    R3,JCLMAINT             R3 - ADDRESS OF 'JCLMAINT' APPL\n         RACHECK ENTITY=((R3)),CLASS=APPL,LOG=NOSTAT,                  +\n               MF=(E,RACLIST)          RACHECK FOR CLASS = 'APPL'\n         LTR   R15,R15                 USER HAVE PROPER AUTHORITY?\n         BNZ   CONTINUE                NO, RETURN AND CONTINUE CHECKING\n         CLC   OPTIONS,DFEFRNAM        VSAM DFEF CLUSTER RESTORE\n*                                      WITH NEWNAME\n         BE    RENAME0                 YES, SET UP TO CONTINUE CHECKING\n         CLC   OPTIONS,DSNRNAME        DATASET RESTORE\n*                                      WITH NEWNAME\n         BE    RENAME0                 YES, SET UP TO CONTINUE CHECKING\n         CLC   NDSNAME,DSNZEROS        RENAME ?\n         BER   R11                     NO, RETURN / DSN ACCEPTED\n         CLC   NDSNAME,DSNSPACE        RENAME ?\n         BER   R11                     NO, RETURN / DSN ACCEPTED\n         CLC   DS1DSNAM,NDSNAME        RENAME ?\n         BER   R11                     NO, RETURN / DSN ACCEPTED\nRENAME0  EQU   *\n         LA    R3,NDSNAME              R3 - ADDRESS OF NEW DSNAME\n         LA    R4,DS1DSNAM             R4 - ADDRESS OF OLD DSNAME\n         LA    R5,9                    R5 - MAX LENGTH QUALIFIER + .\nHIGHLEV  DS    0H\n         CLC   0(1,R3),0(R4)           HIGHLEV QUALIFIERS EQUAL?\n         BNE   REJECTIT                NO, ILLEGAL RENAME OF DSN\n         CLC   0(1,R3),PERIOD          YES, END OF HIGHLEV QUALIFIERS?\n         BER   R11                     YES, RETURN / DSN ACCEPTED\n         LA    R3,1(R3)                NO, INCREMENT R3\n         LA    R4,1(R4)                AND INCREMENT R4\n         BCT   R5,HIGHLEV              CHECK REST OF HIGHLEV QUALIFIERS\n         B     REJECTIT                REJECT, ILLEAGAL DSN\n         SPACE\n         EJECT\n***********************************************************************\n*        SET UP FOR ABSOLUTE TRACK OPERATION (CLASS OF 'APPL')\n***********************************************************************\nTRACKOP  DS    0H\n         MVC   REJCTCOD,TERMINAT       VARIBLE REJECT CODE = 'T'\n         LA    R3,FDRABSTK             R3 - ADDRESS OF 'FDRABSTK' APPL\n         BAL   R11,RACHECKA            PERFORM RACHECK-CLASS 'APPL'\n         B     FREEMAIN                FINISH AND RETURN\n         SPACE\n***********************************************************************\n*        SET UP FOR FDR FULL DUMP/RESTORE OPERATION (CLASS OF 'APPL')\n***********************************************************************\nFDROP    DS    0H\n         MVC   REJCTCOD,TERMINAT       VARIBLE REJECT CODE = 'T'\n         LA    R3,FDR                  R3 - ADDRESS OF 'FDR' APPL\n         BAL   R11,RACHECKA            PERFORM RACHECK-CLASS 'APPL'\n         B     FREEMAIN                FINISH AND RETURN\n         SPACE\n***********************************************************************\n*        SET UP FOR MAINTENANCE OPERATION (CLASS OF 'APPL')\n***********************************************************************\nMAINTOP  DS    0H\n         MVC   REJCTCOD,TERMINAT       VARIBLE REJECT CODE = 'T'\n         LA    R3,FDRABRM              R3 - ADDRESS OF 'FDRABRM' APPL\n         BAL   R11,RACHECKA            PERFORM RACHECK-CLASS 'APPL'\n         B     FREEMAIN                FINISH AND RETURN\n         SPACE\n***********************************************************************\n*        SET UP FOR RESTORE OPERATION  (CLASS OF 'DATASET')\n***********************************************************************\nRESTOP   DS    0H\n         MVC   REJCTCOD,REJECT         VARIBLE REJECT CODE = 'R'\n         LA    R4,128                  SET AUTHORITY REG TO 'ALTER'\n*                                      FOR RESTORE OPERATION (RACHECK)\n         CLC   OPTIONS,DFEFRNAM        VSAM DFEF CLUSTER RESTORE\n*                                      WITH NEWNAME\n         BE    RENAME1                 YES, SET UP FOR EXTRA CHECK\n         CLC   OPTIONS,DSNRNAME        DATASET RESTORE\n*                                      WITH NEWNAME\n         BE    RENAME1                 YES, SET UP FOR EXTRA CHECK\n         CLC   NDSNAME,DSNZEROS        RENAME ?\n         BE    SKPRENAM                NO, RETURN / DSN ACCEPTED\n         CLC   NDSNAME,DSNSPACE        RENAME ?\n         BE    SKPRENAM                NO, RETURN / DSN ACCEPTED\n         CLC   DS1DSNAM,NDSNAME        RENAME ?\n         BE    SKPRENAM                NO, RETURN / DSN ACCEPTED\nRENAME1  EQU   *\n         LA    R3,NDSNAME              R3 - ADDRESS OF NEW DSNAME\n         BAL   R11,RACHECKD            PERFORM RACHECK-CLASS 'DATASET'\n         LA    R4,2                    SET AUTHORITY REG TO 'READ'\n*                                      FOR RENAME OPERATION (RACHECK)\nSKPRENAM DS    0H\n         LA    R3,DS1DSNAM             R3 - ADDRESS OF OLD DSNAME\n         BAL   R11,RACHECKD            PERFORM RACHECK-CLASS 'DATASET'\n         B     FREEMAIN                FINISH AND RETURN\n         SPACE\n         EJECT\n***********************************************************************\n*        SET UP FOR ARCHIVE/SCRATCH OPERATION (CLASS OF 'DATASET')\n***********************************************************************\nARCSCROP DS    0H\n         CLC   DS1DSNAM(4),=CL4'SYS8'  IS THIS A TEMPORARY DSN?\n         BE    FREEMAIN                ALLOW THE OPERATION\n         MVC   REJCTCOD,REJECT         VARIBLE REJECT CODE = 'R'\n         LA    R3,DS1DSNAM             R3 - ADDRESS OF OLD DSNAME\n         LA    R4,128                  SET AUTHORITY REG TO 'ALTER'\n*                                      FOR ARCHIVE/SCRATCH OPERATION\n         BAL   R11,RACHECKD            PERFORM RACHECK-CLASS 'DATASET'\n         B     FREEMAIN                FINISH AND RETURN\n         SPACE\n***********************************************************************\n*        SET UP FOR FDRDSF DUMP OPERATION (CLASS OF 'DATASET')\n***********************************************************************\nDSFDMPOP DS    0H\n         MVC   REJCTCOD,REJECT         VARIBLE REJECT CODE = 'R'\n         LA    R3,DS1DSNAM             R3 - ADDRESS OF OLD DSNAME\n         LA    R4,2                    SET AUTHORITY REG TO 'READ'\n*                                      FOR FDRDSF DUMP OPERATION\n         BAL   R11,RACHECKD            PERFORM RACHECK-CLASS 'DATASET'\n         B     FREEMAIN                FINISH AND RETURN\n         SPACE\n***********************************************************************\n*        PERFORM RACHECK FOR CLASS OF 'APPL'\n***********************************************************************\nRACHECKA DS    0H\n         MVC   RACLIST(INITLEN),INITDATA    STATIC INFO TO DYNAMIC FORM\n         RACHECK ENTITY=((R3)),CLASS=APPL,LOG=ASIS,                    +\n               MF=(E,RACLIST)          RACHECK FOR CLASS = 'APPL'\n         LTR   R15,R15                 USER HAVE PROPER AUTHORITY?\n         BNZ   REJECTIT                NO, TERMINATE THIS VOLUME\n         BR    R11                     YES, RETURN\n         SPACE\n         EJECT\n***********************************************************************\n*        PERFORM RACHECK FOR CLASS OF 'DATASET'\n***********************************************************************\nRACHECKD DS    0H\n         MVC   RACLIST(INITLEN),INITDATA    STATIC INFO TO DYNAMIC FORM\n         RACHECK ENTITY=((R3)),VOLSER=VOLZERO,                         +\n               RACFIND=NO,CLASS=DATASET,ATTR=(R4),LOG=ASIS,            +\n               MF=(E,RACLIST)\n         LTR   R15,R15                 RACHECK SUCCESSFUL?\n         BNZ   REJECTIT                NO, REJECT DSNAME FOR OPERATION\n         BR    R11                     YES, RETURN\n         SPACE\n***********************************************************************\n*        REJECT DATA SET FOR THIS OPERATION\n***********************************************************************\nREJECTIT DS    0H\n         MVC   COMPCOD,REJCTCOD        REJECTION FOR THIS OPERATION\n         BR    R11                     RETURN\n         SPACE\n         EJECT\n***********************************************************************\n*        FREEMAIN DYNAMIC STORAGE\n***********************************************************************\nFREEMAIN DS    0H\n         LR    R6,R13                  R6 - ADDRESS OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         CLC   OPMODE,EXITMODE         FINISHED WITH THIS OPERATION?\n         BNE   FINISH                  NO, DON'T BOTHER WITH FREEMAIN\n         FREEMAIN R,LV=WORKLEN,A=(R6)\n*                                      FREEMAIN DYNAMIC STORAGE\n         SPACE\n***********************************************************************\n*        WRAP THINGS UP AND RETURN\n***********************************************************************\nFINISH   DS    0H\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS\n         SR    R15,R15                 SET REG 15 TO ZERO\n         BR    R14                     RETURN\n         SPACE\n         EJECT\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   FULLWORD VALUE ZERO\nDSNZEROS DC    XL44'00'                DSNAME WITH VALUE OF HEX ZEROS\nFDRTYPE  DC    CL1'F'                  FDR TYPE OF OPERATION\nMAINTYPE DC    CL1'M'                  FDRABRM TYPE OF OPERATION\nQUEUTYPE DC    CL1'U'                  FDRABRUT TYPE OF OPERATION\nEXITMODE DC    CL1'Z'                  INDICATES END OF VOL PROCESSING\nRESTMODE DC    CL1'R'                  INDICATES RESTORE OPERATION\nARCHIVE  DC    CL1'A'                  INDICATES DS ARCHIVE PROCESSING\nSCRATCH  DC    CL1'S'                  INDICATES DS SCRATCH PROCESSING\nDFEFRNAM DC    CL1'E'                  VSAM DFEF RESTORE AND RENAME\nDSNRNAME DC    CL1'M'                  DSN RESTORE AND RENAME\nABSOLUTE DC    CL1'Z'                  INDICATE ABSOLUTE TRK PROCESSING\nDSFDUMP  DC    CL3'DDD'                INDICATE FDRDSF DUMP PROCESSING\nACCEPT   DC    CL1'A'                  ACCEPT THE OPERATION\nTERMINAT DC    CL1'T'                  TERMINATE THIS VOLUME\nREJECT   DC    CL1'R'                  REJECT THIS DATA SET\nPERIOD   DC    CL1'.'                  DELIMITER BETWEEN DSN QUALIFIERS\nDATASET  DS    0H\n         DC    AL1(7)                  LENGTH OF CLASSNAME\n         DC    C'DATASET'              CLASSNAME FOR RACHECK MACRO\nAPPL     DS    0H\n         DC    AL1(4)                  LENGTH OF CLASSNAME\n         DC    C'APPL'                 CLASSNAME FOR RACHECK MACRO\nFDR      DC    CL8'FDR     '           ENTITY FOR RACHECK CLASS='APPL'\nFDRABRM  DC    CL8'FDRABRM '           ENTITY FOR RACHECK CLASS='APPL'\nFDRABSTK DC    CL8'FDRABSTK'           ENTITY FOR RACHECK CLASS='APPL'\nJCLMAINT DC    CL8'JCLMAINT'           ENTITY FOR RACHECK CLASS='APPL'\nDSNSPACE DC    CL44' '                 DSNAME WITH VALUE OF SPACES\nVOLZERO  DC    CL6'000000'             VOLUME SERIAL FOR RACHECK MACRO\n         SPACE\n***********************************************************************\n*        INITIATIALIZATION DATA FOR PORTION OF GETMAIN'D AREA\n***********************************************************************\nINITDATA RACHECK MF=L                  LIST FORM OF RACHECK MACRO\nINITLEN  EQU   *-INITDATA\n         SPACE\n         EJECT\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         LTORG\n         SPACE\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     FDRXPASS SAVE AREA\nREJCTCOD DS    CL1                     VARIABLE REJECT CODE, 'R' OR 'T'\nRACLIST  DS    CL(INITLEN)             LIST FORM OF RACHECK MACRO\nWORKLEN  EQU   *-WORKAREA\n         SPACE\n         EJECT\n***********************************************************************\n*        MAPPING OF FDR PARAMETER LIST\n***********************************************************************\nFDRPARM  DSECT                         FDR PARAMETER LIST MAP\nREENT    DS    CL4                     RE-ENTRANT ADDRESS POINTER\nOPTYPE   DS    CL1                     TYPE OF OPERATION\n*              F - FDR                 D - FDRDSF\n*              A - FDRABR              M - FDRABRM\n*              U - FDRABRUT\nOPMODE   DS    CL1                     MODE OF OPERATIONS\n*              D - DUMP                S - SIM\n*              C - COPY                R - RESTORE\n*              P - PRINT               Z - EXIT\n*              X - RESET (FDRABRUT)    Y - REMOVE (FDRABRUT)\nOPTIONS  DS    CL1                     OPTIONS\n*              F - FDR FULL VOLUME DUMP\n*              R - FULL VOLUME RESTORE - PARM R (CPYVOLID=YES)\n*              N - FULL VOLUME RESTORE - PARM N (CPYVOLID=NO)\n*              C - VSAM DF/EF CLUSTER NAME RESTORE\n*              D - DATA SET OPERATION\n*              E - VSAM DF/EF CLUSTER RESTORE WITH NEWNAME\n*              A - ARCHIVE DATA SET OPERATION (TYPE=ARC)\n*              S - SCRATCH DATA SET (TYPE=SCR)\n*              M - DATA SET RESTORE WITH NEWNAME\n*              Z - ABSOLUTE TRACK OPERATION\nCOMPCOD  DS    CL1                     COMPLETION CODE (SET BY EXIT)\n*              A - ACCEPT THE OPERATION\n*              T - TERMINATE THIS VOLUME (A USER ABEND IS ISSUED)\n*              R - REJECT THIS DATA SET (DATA SET EXIT ONLY)\n         DS    CL4                     RESERVED\nDDNAME   DS    CL8                     DISK DD NAME\nVOLSER   DS    CL6                     VOLUME SERIAL OF VOLUME ACCESSED\n         DS    CL6                     RESERVED\nDSCB1    DS    0F\n         IECSDSL1 (1)                  DSCB MAPPING MACRO\nODSLEN   DS    CL2                     DATA SET NAME LENGTH (FDRABRUT)\nNDSLEN   DS    CL2                     NEW DSNAME LENGTH (FDRABRUT)\nNDSNAME  DS    CL44                    NEWNAME OF DATA SET (OPTION 'M')\n         END   FDRXPASS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FOLDIT": {"ttr": 7429, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00a\\x00a\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 97, "newlines": 97, "modlines": 0, "user": "DELUXE"}, "text": "******************** FOLDIT *******************************************\n*                                                                     *\n*  FOLDIT IS A PROGRAM FOR PRINTING DATA SETS WITH UPPER AND LOWER    *\n*  CASE CHARACTERS ON PRINTERS LACKING THE LUXURY OF LOWER CASE.      *\n*  DDNAMES: SYSUT1 - INPUT DATASET\n*           SYSUT2 - PRINT FILE\n*  THE INPUT DS IS ASSUMED TO HAVE A CONTROL CHARACTER IN THE         *\n*  FIRST BYTE OF EACH RECORD.  THE DS MAY BE FIXED OR VARIABLE LENGTH *\n*  BLOCKED OR UNBLOCKED.  THE MAIN DIFFERENCE BETWEEN THIS AND        *\n*  PRINTOFF (IPO SUPPLIED COMMAND PROCESSOR) IS THAT THIS PROGRAM     *\n*  MAINTAINS THE PRINTER CONTROL CHARACTERS (LEAVES THEM ALONE).      *\n*                                                                     *\n***********************************************************************\n         TITLE 'FOLDIT - PROGRAM TO TRANSLATE LOWER TO UPPER CASE '\nFOLDIT   CSECT\n         STM   R14,R12,12(R13)\n         LR    R11,R15\n         USING FOLDIT,R11\n         ST    R13,SAVEAREA+4\n         LR    R6,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R6)\n* END OF PROLOUGE\n         MVI   OUTAREA,C' '        SET UP AND\n         MVC   OUTAREA+1(132),OUTAREA    CLEAR OUTPUT RECORD AREA\n         OPEN  (INDCB,(INPUT),OUTDCB,(OUTPUT))\n         LA    R7,INDCB\n         USING IHADCB,R7\nREADIT   GET   INDCB               GET A RECORD ADDRESS IN R1\n         LR    R6,R1               MOVE IT TO R6\n         SLR   R5,R5               ZERO R5\n         LH    R5,DCBLRECL         GET ITS LENGTH\n         BCTR  R5,R0               DECREMENT BY ONE FOR INST\n         BCTR  R5,R0               DECREMENT BY ONE FOR CTL CHAR\n         LA    R6,1(R6)            INCREMENT PAST CTL CHAR\n         TM    DCBRECFM,X'40'      IS IT RECFM = V\n         BNO   NOTV                NO GO TO NOTV\n         SH    R5,=H'4'            ELSE DECREMENT LENGTH BY RDW LENGTH\n         LA    R6,4(R6)            AND INCREMENT ADDRESS PAST RDW\n         LTR   R5,R5                    CHECK FOR NEGATIVE NUMBER\n         BM    NOTRT                    TRT WOULD HAVE BAD LENGTH\nNOTV     EX    R5,TRTINST          TRANSLATE IT\nNOTRT    S     R6,=F'1'            SET ADDRESS BACK TO CTL CHAR\n         LA    R5,1(R5)            SET LENGTH UP TO INCLUDE CTL CHAR\n         MVI   OUTAREA,C' '        SET UP AND\n         MVC   OUTAREA+1(132),OUTAREA    CLEAR OUTPUT RECORD AREA\n         LA    R4,OUTAREA\n         EX    R5,MVCINST          MOVE RECORD IN\n         PUT   OUTDCB,OUTAREA\n         B     READIT\nCLOSIT   CLOSE (INDCB,,OUTDCB)\n* BEGINNING OF EPILOUGE\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         RETURN RC=0\n* END OF EPILOUGE\nTRTINST  TR    0(0,R6),TTAB\nMVCINST  MVC   0(0,R4),0(R6)\nINDCB    DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=CLOSIT\nOUTDCB   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=(PM),LRECL=133,BLKSIZE=133\nOUTAREA  DS    CL133\nSAVEAREA DC    18F'0'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nTTAB     DS    0CL256\n         DC    XL16'000102030405060708090A0B0C0D0E0F'\n         DC    XL16'101112131415161718191A1B1C1D1E1F'\n         DC    XL16'202122232425262728292A2B2C2D2E2F'\n         DC    XL16'303132333435363738393A3B3C3D3E3F'\n         DC    XL16'404142434445464748494A4B4C4D4E4F'\n         DC    XL16'505152535455565758595A5B5C5D5E5F'\n         DC    XL16'606162636465666768696A6B6C6D6E6F'\n         DC    XL16'707172737475767778797A7B7C7D7E7F'\n         DC    XL16'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'\n         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         DCBD  DSORG=QS\n         END   FOLDIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GDATE": {"ttr": 7432, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00n\\x00n\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "DELUXE"}, "text": "GDATE    CSECT\n         USING GDATE,R15\n         SAVE  (14,12)\n         DROP  R15\n         LR    R12,R15\n         USING GDATE,R12\n         LA    R6,SAVEAREA\n         ST    R13,4(R6)\n         ST    R6,8(R13)\n         LR    R13,R6\n         L     R6,0(R1)\n         LA    R6,2(R6)                LOAD OUTPUT AREA ADDRESS\n         CLC   0(3,R6),=X'000000'\n         BE    GETTIME\n         CLC   0(3,R6),=X'404040'\n         BE    GETTIME\n         B     GOTTIME\nGETTIME  TIME\n         STCM  R1,B'0111',DATE\n         B     LETSGO\nGOTTIME  MVC   DATE(3),1(R6)\nLETSGO   LA    R1,MMDDYY\n         USING OUTPUT,R1\n         CP    DATE,=PL3'0'\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+2,X'F0'          SET ZONE\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL3'0'          00 00 0C\n         MVO   YEAR2,YEAR              00 0Y YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     LA    R15,TABLE               LOAD TABLE ADDRESS\n         USING CALENDAR,R15            SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP1    CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   DATERTRN\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R15,LEN(R15)            INCREMENT TO NEXT MONTH\n         B     LOOP1\nDATERTRN UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         B     RETURN                  RETURN\nNODATE   MVC   MMDDYY,=CL12' '         BLANK DATE FIELD\nRETURN   MVC   0(12,R6),MMDDYY\n         L     R13,4(R13)              RETURN\n         RETURN (14,12),RC=0\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nSAVEAREA DC    18F'0'\nTABLE    DC    PL2'31'                  JANUARY\n         DC    PL2'29'                  FEBRUARY\n         DC    PL2'31'                  MARCH\n         DC    PL2'30'                  APRIL\n         DC    PL2'31'                  MAY\n         DC    PL2'30'                  JUNE\n         DC    PL2'31'                  JULY\n         DC    PL2'31'                  AUGUST\n         DC    PL2'30'                  SEPTEMBER\n         DC    PL2'31'                  OCTOBER\n         DC    PL2'30'                  NOVEMBER\n         DC    PL2'31'                  DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        WORK AREA                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nDATEWORK DS    0F                       DATE\n         DS    C                        FILLER\nDATE     DS    0CL3                     JULIAN DATE - PACKED DECIMAL\nYEAR     DS    C                        YEAR - NO SIGN\nDAY      DS    CL2                      DD DS\nMONTHP   DS    PL2                      0M MS\nTARGET   DS    0CL3                     00 0Y YS  -  0Q QS RS\n         DS    C                        0Q         PART OF QUOTIENT\nYEAR2    DS    0PL2                     0Y YS      YEAR AND SIGN\n         DS    C                        QS         QUOTIENT AND SIGN\nREM      DS    C                        RS         REMAINDER AND SIGN\n         DS    0F                       FULLWORD ALIGNMENT\nMMDDYY   DC    CL12' '                  WORK AREA FOR FINAL DATE\n         EQUATE\n         LTORG\nOUTPUT   DSECT\nMO       DS    CL2\nSLASH1   DS    C\nDA       DS    CL2\nSLASH2   DS    C\nJULIAN   DS    0CL5\nYR       DS    CL2\nJULDAY   DS    CL3\nBLANK    DS    C\nCALENDAR DSECT\nDAYS     DS    PL2\nLEN      EQU   *-DAYS\n         END   GDATE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENPW": {"ttr": 7435, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00K\\x00K\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'GENPW - GENERATE PASSWORD'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = GENPW                                     *\n*                                                                     *\n*             DESCRIPTIVE NAME = GENERATE PASSWORD                    *\n*                                                                     *\n*             FUNCTION =                                              *\n*                GENERATES FROM 1 TO 9 RANDOM 8-CHARACTER             *\n*                PASSWORDS.                                           *\n*                                                                     *\n*             PARAMETER =                                             *\n*                NUMBER OF PASSWORDS TO BE GENERATED                  *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                10/30/85  WRITTEN.      BC.                          *\n*                                                                     *\n***********************************************************************\n*\nGENPW CSECT\n         SAVE  (14,12),,GENPW_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING GENPW,R12               ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   SAVE PTR TO PARM ADDRESS\n         LA    R11,1                   DEFAULT TO 1 PASSWORD\n         L     R3,0(R2)                GET ADDRESS OF PARM\n         SLR   R4,R4\n         LH    R4,0(R3)                GET LENGTH OF PARM\n         LTR   R4,R4                   IF NO PARMS\n         BZ    CONT                    THEN CONTINUE\n         PACK  DBL,2(1,R3)             PACK PARM\n         CVB   R11,DBL                 CONVERT TO BINARY\nCONT     EQU   *\n         TIME  BIN                     GET THE TIME (IN 1/100 SECONDS)\n         LR    R7,R0                   STORE IT\n         SLR   R6,R6                   MAKE IT A DOUBLE WORD\n         D     R6,=F'262139'           DIVIDE BY 'M' REMAINDER='SEED'\n         LR    R7,R6                   SAVE REMAINDER\n         SLR   R6,R6\nNEXT     EQU   *\n         LA    R10,8                   SET TO REPEAT 8 TIMES\n         LA    R9,PASSWORD             POINT TO START OF PASSWORD\nRANDOM   EQU   *\n         M     R6,=F'5243'             MULTIPLY BY 'J'\n         A     R7,=F'55397'            ADD 'K'\n         D     R6,=F'262139'           DIVIDE BY 'M'\n         LR    R5,R6                   SAVE 'I' (SEED)\n         SLR   R4,R4                   MAKE IT A DOUBLE WORD\n         M     R4,=F'10000'            MULTIPLY SO RESULT NOT < 1\n         A     R5,=F'5000'             ADD '.5X10000'\n         D     R4,=F'262139'           DIVIDE BY 'M'\n         SLR   R4,R4                   GET RID OF REMAINDER\n         D     R4,=F'36'               DIVIDE BY 36 REMAINDER=INDEX\n         LA    R8,TABLE                POINT TO TABLE\n         AR    R8,R4                   INDEX INTO TABLE\n         MVC   0(1,R9),0(R8)           INSERT CHARACTER INTO PASSWORD\n         LA    R9,1(R9)                POINT TO NEXT POSITION\n         LR    R7,R6                   GET SEED FOR NEXT\n         SLR   R6,R6\n         BCT   R10,RANDOM              REPEAT 8 TIMES\n         TPUT  PASSWORD,8              OUTPUT THE PASSWORD\n         BCT   R11,NEXT\nEXIT     EQU   *\n         RETURN (14,12),RC=(15)\n         LTORG\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n*\nDBL      DS    D\nPASSWORD DS    CL8' '\nTABLE    DC    C'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n*\n         END   GENPW\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HELPLIST": {"ttr": 7438, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\xb8\\x01\\xb8\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 440, "newlines": 440, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE '    H E L P L I S T   -   V E R S I O N   1 . 2   '\n************************************************************\n*                                                          *\n*              'HELPLIST' PROGRAM AT FPC                   *\n*                                                          *\n************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n*        PROGRAM. HELPLIST.\n*        AUTHOR. UNKNOWN - FROM TOM GEE.\n*        MODIFIER. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. FEDERAL POWER COMMISSION.\n*        DATE-UPDATED IN SOURCE LIBRARY. JANUARY 8 1974.\n*        REMARKS.\n*            DATE ADDED TO HEADING.\n*            SUBCOMMAND NAMES PREFIXED WITH 'SUBCOMMAND - '.\n*            INDENTATION CHANGED. CHECK FOR )X SYNTAX ADDED.\n*            USER MACROS - EASYCOME,GEHEN,REGISTER\n*\n*        MODIFIER. JERRY PITTENGER, PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. OFFICE OF MANAGEMENT AND BUDGET (OMB).\n*        DATE-UPDATED IN SOURCE LIBRARY. AUGUST 17 1977.\n*        REMARKS:\n*            DATE REMOVED FROM HEADING. MULTIPLE HEADING LINES.\n*            CHANGE FROM )O OR )X OR )F HIGHLIGHTED BETTER.\n*            ALLOW NO ALIAS TO PRINT BY USING BLDL AGAINST\n*            THE SYSUT1 LIBRARY/LIBRARIES DIRECTORY. INSERTED\n*            SUBCOMMANDS ON SEPARATE PAGES WITH THE SUBCOMMAND\n*            NAME IN THE HEADER BLOCK.\n         EJECT\n*            CURRENT REGISTER USAGE:\n*\n*            R0 = SYSTEM PARM REG\n*            R1 = SYSTEM PARM REG\n*            R2 = PROGRAM PARM REG + WORK REG\n*            R3 = WORK REG\n*            R4 = RECORD LENGTH\n*            R5 = BLOCKSIZE\n*            R6 = SPARE\n*            R7 = SPARE\n*            R8 = OFFSET INTO MEMBER DSECT\n*            R9 = WORK REG\n*           R10 = ADDRESS OF 'LINE'\n*           R11 = I/O AREA BASE\n*           R12 = PROGRAM BASE\n*           R13 = SAVE AREA POINTER\n*           R14 = SYSTEM RETURN ADDR\n*           R15 = PROGRAM RETURN ADDR\n*\n*        NON-STANDARD MACROS USED: KOMMEN AND GEHEN\n*\n*        UPDATED, 04DEC84, WILLIAM SMITH, SYNTEX (USA), INC.\n*                 PALO ALTO, CALIFORNIA  94304\n*        REMARKS:\n*            ELIMINATED USE OF ALL NON-STANDARD MACRO CALLS - ALL CODE\n*            IS NOW IN-LINE\n*\n*\n*        UPDATED, 23OCT85, BRUCE LELAND, HITACHI AMERICA LTD.,\n*                 SAN JOSE, CALIFORNIA  95131\n*        REMARKS:\n*            ADDED PROGRAM MESSAGES )M FORMATTING LOGIC\n*\n*\n         EJECT\nHELPLIST CSECT\n         STM   14,12,12(13)\n         LR    12,15\n         USING HELPLIST,12\n         LA    11,SAVEEM\n         ST    13,4(11)\n         ST    11,8(13)\n         LR    13,11\n         L     2,0(,1)             REG 2 --> PARM\n         MVI   LINE-1,C' '\n         MVC   LINE,LINE-1\n         LA    R10,LINE                POINT R10 TO 'LINE'\n         MVI   HEAD-1,C' '\n         OPEN  (IN,,HELP,,OUT,OUTPUT)\n         TM    IN+48,X'10'             OPEN OK?\n         BO    PARMCHK                 YES....SYSIN SPECIFIED\n         BZ    OPENERR                 NO....CAN'T OPEN\nPARMCHK  CLI   1(2),0              PARM?\n         BE    NOPARM\n         LH    3,0(,2)             R3  =  LENGTH OF PARM\n         CLI   1(2),9              PARM LENGTH GREATER THAN 9?\n         BNH   *+8                 NO - BRANCH\n         LA    3,9                 YES - REDUCE TO 9\n         BCTR  3,0                 LENGTH MINUS 1 FOR EX\nNOPARM   EQU   *\n         LH    R0,HELP+62               BLOCKSIZE\n         GETMAIN R,LV=(0)\n         LR    R11,R1                   SAVE POINTER TO I/O AREA\nCNTRL    EQU   *\n         GET   IN,REC                   READ A CONTROL CARD\n         MVC   MEM1(8),REC              MOVE TO BLDL AREA\n         MVC   MEMNAME,REC              SAVE DESIRED MEMBER NAME\n         LA    R1,HELP                  POINT TO DCB FOR BLDL\n         LA    R0,LSTSTRT               POINT TO BLDL LIST\n         BLDL  (R1),(R0)                GO GET IT\n         B     *+4(R15)                 TEST RETURN CODE\n         B     MOVE                     GOOD MEMBER\n         B     BADONE                   ALIAS OR INVALID MEMBER\n         B     BLDLERR                  GO ISSUE ABEND..PERM I/O ERROR\nBADONE   EQU   *\n         MVC   MEM1+8(6),=X'000000000000' ZERO OUT BLDL TTR FIELD\n         B     CNTRL                    GO GET THE NEXT MEMBER\nMOVE     TM    MEM1+13,X'80'            IS IT AN ALIAS???\n         BO    INDICATE                 ALIAS GO INDICATE SO\n         SR    R7,R7                    ZERO OUT R7\n         SR    R6,R6                    ZERO OUT R6\n         LA    R6,8                     LOAD A CONSTANT\n         LA    R14,REC                  LOAD ADDRESS TO CHECK\n         LA    R6,0(R6,R14)             COMBINE THE TWO\nCOMPR    CLI   0(R6),X'40'              CHECK FOR A BLANK\n         BNE   COMPDONE                 IF NOT...FINISHED\n         CR    R6,R14                   FINISHED YET???\n         BE    COMPDONE                 YES\n         BCT   R6,COMPR                 DOWN 1 AND CHECK AGAIN\nCOMPDONE EQU   *                        R6 ALREADY -1 FOR EXECUTE\n         SR    R6,R14                   LEAVE THE NUMBER OF CHARS\n         STC   R6,MEMLEN                SAVE MEMBER LENGTH FOR EXEC\n         LA    R7,8                     LOAD A CONSTANT\n         LA    R6,1(R6)                 PUT R6 BACK UP\n         SR    R7,R6                    GET NUMBER OF BLANKS\n         STC   R7,OFFSET                OFFSET FOR CENTERING ON HDR\n         SRL   R7,1                     DIVIDE BY 2\n         STC   R7,MEMOFFST              SAVE FOR OFFSETTING\n         NI    OP,255-STILLSC           TELL EM NOT SUBCOMMAND ANYMORE\n         NI    OP,255-SCSAVED           SUBCOMMAND NOT SAVED ANY MORE\n         FIND  HELP,MEMNAME,D           FIND MEMBER\n         B     *+4(R15)                 TEST RETURN CODE\n         B     *+12                     GOOD RETURN\n         B     BADNAME                  INVALID NAME\n         B     IOERROR                  I/O ERROR\nRDSETUP  NI    OP,255-OPMSGS-OPCMDS     TURN OFF MESSAGES & CMDS\n         CLC   MEMNAME,=CL8'COMMANDS'   COMMANDS?\n         BNE   *+8                      NO, ....\n         OI    OP,OPCMDS                YES, INDICATE SUCH\n         TM    OP,ALIAS                 ALIAS ALREADY CAUSED TOF???\n         BO    READEM                   YES, NO HEADER\n         ZAP   CTRLIN,=P'0'        FORCE HEADING\nREADEM   EQU   *\n          NI    OP,255-ALIAS             TURN OFF ALIAS FLAG\n         READ  DECB,SF,HELP,(R11),'S'\n         CHECK DECB\n         LH    R5,HELP+62               BLOCK SIZE\n         L     R1,DECB+16               A(IOB)\n         SH    R5,14(R1)                MINUS RESIDUAL CCW COUNT\n         BCTR  R5,0                     DOWN ONE\n         LR    R3,R11                   REC START\n         LA    R4,80                    REC LENGTH\n         LA    R5,0(R3,R5)              REC END\nPROCESS  TM    OP,OPCMDS                CMDS?\n         BZ    PROCESSA                 NO, CONTINUE\n         MVC   LINEPL(72),0(R3)         YES, COPY IN RECORD\n         B     LISTER                   GO LIST IT\nPROCESSA CLC   0(2,R3),=C')F'           FUNCTION\n         BE    MAJOR\n         CLC   0(2,R3),=C')S'           SUBCOMMANDS\n         BE    MAJOR\n         CLC   0(2,R3),=C')X'           SYNTAX\n         BE    MAJOR\n         CLC   0(2,R3),=C')O'           OPERANDS\n         BE    MAJOR\n         CLC   0(2,R3),=C')M'           MESSAGES\n         BE    MESSAGE\n         CLI   0(R3),C'='               SUB COMMAND\n         BNE   CHEKOP                   NO\n         OI    OP,SUBCOMD               TELL EM SUBCOMD\n         NI    OP,255-SCSAVED           TELL EM NEW SUBCOMMAND\n         NI    OP,255-OPMSGS            NO MORE MESSAGES\n         NI    OP,255-STILLSC           NOT CONTINUED SUBCMD\n         B     SUBCMD                   GO SEPARATE\nCHEKOP   CLC   0(2,R3),=C'))'           YES - OPERAND?\n         BE    GOTDUMB                  YES - BRANCH\n         CLC   0(2,R3),=C'  '           NO, CHECK FOR LACK OF NEATNESS\n         BE    NOTDUMB                  VERY GOOD - BRANCH\n         MVC   LINEIND(72),0(R3)  SOME DUMMY DIDN'T LEAVE 1ST 2 BLANK\n         B     LISTER\nGOTDUMB  MVC   MSGSAVE(8),2(R3)         SAVE OPERAND OR MESSAGE NAME\n         MVI   CC,C'0'                  DOUBLE SPACE\nNOTDUMB  MVC   LINEIND(70),2(R3)        YES, SET LINE WITH INDENTION\n         B     LISTER\nNORMAL   TM    OP,MAJ                   MAJOR SEPARATION???\n         BNO   LISTER1                  NO....LIST IT\n         MVC   LINEMAJ(70),2(R3)        MOVE IN DATA\n         MVC   3(3,R10),=C'***'          INSERT HIGHLIGHTER\n         MVC   18(3,R10),=C'***'         INSERT HIGHLIGHTER\n         NI    OP,255-MAJ               TURN OFF SWITCH\n         B     LISTER\nLISTER1  MVC   LINEPL(70),2(R3)\nLISTER   CP    CTRLIN,CTRMAXH           CURRENT:MAXIMUM HIGH THRESHOLD\n         BL    *+10                     LOW, BRANCH\n         ZAP   CTRLIN,=P'0'             HIGH OR EQUAL, NEW PAGE\n         SPACE 1\n         CP    CTRLIN,CTRMAXL           CURRENT:MAXIMUM LOW THRESHOLD\n         BL    LISTER4                  LOW, BRANCH\n         CLI   CC,X'40'                 ANY CARRIAGE CONTROL?\n         BNE   LISTER2                  YES, NEXT PAGE\n         CLC   LINESAVE(20),=CL20' '    LAST LINE BLANK OR CARRIAGE?\n         BNE   LISTER4                  NO, BRANCH\n         CLC   LINEPL(20),=CL20' '      BLANKS?\n         BE    LISTER4                  YES, BRANCH\nLISTER2  ZAP   CTRLIN,=P'0'             YES, GO TO THE NEXT PAGE\n         SPACE 1\nLISTER4  MVC   LINESAVE(20),LINEPL      SAVE FOR LAST LINE\n         TM    OP,CMDSEP                NEED COMMAND NAME???\n         BO    HEADALI                  YES...GO DO IT\n         CP    CTRLIN,=P'0'\n         BE    HEADING1                 GO SEE IF STILL SUBCOMMAND\nREPORTD  AP    CTRLIN,=P'1'\n         CLI   LINE,C'0'           DOUBLE SPACING?\n         BNE   *+10                NO - BRANCH AROUND AP\n         AP    CTRLIN,=P'1'\n         TM    OP,SUBCOMD                IS IT SUBCOMMANDS???\n         BNO   PUTIT                     NO....LIST ASIS\n         NI    OP,255-SUBCOMD            TURN OFF SWITCH\n         MVC   3(3,R10),=C'***'          INSERT HIGHLIGHTER\nPUTIT    PUT   OUT,LINE\n         MVC   LINE,LINE-1         CLEAR LINE\nBXLE     BXLE  R3,R4,PROCESS       SCAN ENTIRE BLOCK\n         B     READEM                   READ ANOTHER BLOCK\nHEADING1 TM    OP,STILLSC               IS IT STILL SUBCOMMAND????\n         BO    SUBCMD                   YES.....GO DO IT THAT WAY\nHEADING  MVC   HEAD,HEAD-1              CLEAR IT\n         NI    OP,255-STILLSC           NOT SUBCOMMAND ANYMORE\n         MVI   HEAD,C'1'                SET TO EJECT\n         MVC   HEAD+2(60),TITLE         TOP OF PAGE ID\n         PUT   OUT,HEAD                 WRITE IT\nHEADALI  AP    CTRLIN,=P'5'             1 EA. FOR HDR + HIGHLIGHTERS\n         NI    OP,255-CMDSEP            TURN OFF COMMAND PRINT SW\n* THE OTHERS ARE ALREADY TAKEN INTO ACCOUNT\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         MVC   HEAD+35(10),=C'----------' COMMAND HIGHLIGHTER\n         PUT   OUT,HEAD                 PUT IT\n         MVI   HEAD,C' '                SET TO SINGLE SPACE\n         MVC   HEAD+35(10),=C'          ' BLANK OUT HEADER\n         SR    R6,R6                    ZERO OUT R6\n         IC    R6,MEMOFFST              GET THE OFFSET FOR MOVE\n         LA    R7,HEAD+36               PICK UP MOVE LOCATION\n         LA    R7,0(R7,R6)              LOAD R7 W/LOCATION + OFFSET\n         IC    R6,MEMLEN                PICK UP LENGTH TO MOVE\nMOVEMEM  MVC   0(0,R7),MEMNAME          EXECUTED BELOW\n         EX    R6,*-6                   MOVE IN THE MEMBER NAME\n         PUT   OUT,HEAD                 PUT OUT CENTERED NAME\n         MVC   HEAD+35(10),=C'----------' COMMAND HIGHLIGHTER\n         PUT   OUT,HEAD                 PUT IT\n         MVC   HEAD,HEAD-1              BLANK OUT HEAD\n         MVI   HEAD,C'0'                SET TO DOUBLE SPACE\n         PUT   OUT,HEAD                 WRITE BLANK HEADS\n         B     REPORTD\nMAJOR    NI    OP,255-OPMSGS            TURN OFF MESSAGES\n         MVI   CC,C'0'                  DOUBLE SPACE\n         OI    OP,MAJ                   TURN ON SWITCH\n         B     NORMAL\nSUBCMD   TM    OP,STILLSC               IS IT STILL SUBCOMMAND???\n         BO    SUBCMD1                  YES, LONG MEMBER\n         CP    CTRLIN,=P'05'            ENOUGH ROOM FOR NEW ONE??\n         BL    ADD5                     YES, GO GETEM\nSUBCMD1  MVC   HEAD,HEAD-1              CLEAR IT\nNEWPG    ZAP   CTRLIN,=P'0'             REINITIALIZE LINE COUNT\n         MVI   HEAD,C'1'                SET TO EJECT\n         MVC   HEAD+2(59),TITLE         TOP OF PAGE ID\n         PUT   OUT,HEAD                 WRITE IT\nADD5     AP    CTRLIN,=P'5'             1 EA. FOR HDR + HIGHLIGHTERS\n* THE OTHERS ARE ALREADY TAKEN INTO ACCOUNT\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         MVC   HEAD+27(27),DASHES       COMMAND HIGHLIGHTER\n         TM    OP,OPMSGS                MESSAGES?\n         BNO   *+10                     NO, BRANCH\n         MVC   HEAD+27(35),DASHES       COMMAND HIGHLIGHTER\n         PUT   OUT,HEAD                 PUT IT\n         MVC   HEAD,HEAD-1              CLEAR THE DASHES\n         MVI   HEAD,C' '                SET TO SINGLE SPACE\n         SR    R6,R6                    CLEAR IT\n         MVI   HEAD+41,C'-'             PUT IN THE SEPARATOR\n         LA    R7,HEAD+28               PICK UP LOCATION\n         IC    R6,OFFSET                PICK UP THE OFFSET\n         LA    R7,0(R6,R7)              POINT R7 TO LOCATION + OFFSET\n         IC    R6,MEMLEN                PICK UP LENGTH TO MOVE\nMEMMVC   MVC   0(0,R7),MEMNAME          EXECUTED BELOW\n         EX    R6,*-6                   MOVE IN MEMNAME\n* PRESUPPOSES THAT SUBCOMMAND HAS AN '=' SIGN IN FRONT OF IT\n         TM    OP,SCSAVED               HAS SUBCOMMAND BEEN SAVED???\n         BNO   R3MOVE                   IF NOT GET OFF OF R3\n         MVC   HEAD+44(8),SCSAVE        HAS BEEN SAVED....GET IT\n         B     DONEMOVE                 GO AROUND R3 MOVE\nR3MOVE   MVC   HEAD+44(8),1(R3)         MOVE IN SUBCOMMAND NAME\n         MVC   SCSAVE(8),1(R3)          SAVE THE SUBCOMMAND NAME\n         OI    OP,SCSAVED               AND TURN ON THE FLAG\nDONEMOVE LA    R14,HEAD+44              SET UP FOR '=' CHECK\n         LA    R15,8                    LENGTH TO CHECK\nSUBCX    CLI   0(R14),C'='              IS IT AN '=' SIGN\n         BE    SUBCX1                   YES....GO BLANK IT\n         LA    R14,1(R14)               BUMP TO NEXT CHAR\n         BCT   R15,SUBCX                GO CHECK FURTHER\nSUBCX1   MVC   0(9,R14),=C'         '   MOVE IN BLANKS\n         TM    OP,OPMSGS                MESSAGES?\n         BNO   *+10                     NO, BRANCH\n         MVC   HEAD+52(8),MSGSAVE       ADD THE MESSAGE NUMBER\n         PUT   OUT,HEAD                 WRITE IT\n         MVC   HEAD+27(27),DASHES       HIGHLIGHT IT\n         TM    OP,OPMSGS                MESSAGES?\n         BNO   *+10                     NO, BRANCH\n         MVC   HEAD+27(35),DASHES       COMMAND HIGHLIGHTER\n         PUT   OUT,HEAD                 WRITE EM\n         MVC   HEAD,HEAD-1              BLANK IT\n         MVI   LINE,C'0'                SET FOR DOUBLE SPACE\n         OI    OP,STILLSC               SET SUBCOMMAND HEADER SWITCH\n         TM    OP,SUBCOMD               LONG MEMBER OR NEW SUBCOMMAND?\n         BNO   REPORTD                  LONG MEMBER...LINE PRESENT\n         NI    OP,255-SUBCOMD           TURN OFF THE SWITCH\n         B     BXLE                     GO GET SOME MORE\nMESSAGE  OI    OP,OPMSGS                TURN ON MESSAGES\n         MVI   CC,C'0'                  DOUBLE SPACE\n         OI    OP,MAJ                   TURN ON SWITCH\n         B     NORMAL\nFINI     DS    0H\n         CLOSE (OUT,,HELP,,IN)\n         L     13,4(13)\n         LM    14,12,12(13)\n         SR    R15,R15\n         BR    R14\n         SPACE 2\nBADNAME  DS    0H\n         MVC   LINE+10(L'ENAME),ENAME   INVALID MEMBER NAME\n         B     MSGOUT\nIOERROR  DS    0H\n         MVC   LINE+10(L'EIO),EIO       I/O ERROR\nMSGOUT   MVC   LINE+1(8),MEMNAME        PUT IN MEMBER NAME\n         MVI   CC,C'1'                  EJECT A PAGE\n         PUT   OUT,LINE                 PRINT ERROR MSG\n         MVC   LINE,LINE-1              CLEAR OUT LINE\n         B     CNTRL\nINDICATE EQU   *                        ALIAS PROCESSING\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         TM    OP,ALIAS                 BEEN HERE BEFORE???\n         BNO   INDIC1                   NO, FORCE HEADING\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         B     INDIC2                   NO HEADING\nINDIC1   MVI   HEAD,C'1'                FORCE HEADING\n         NI    OP,255-STILLSC           NOT SUBCMD ANYMORE\n         MVC   HEAD+2(59),TITLE         INSTALLATION CODE\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1\n         MVI   HEAD,C'0'                DOUBLE SPACE\n         ZAP   CTRLIN,=P'0'             RESET LINE COUNT\n         AP    CTRLIN,=P'1'\nINDIC2   MVC   HEAD+27(27),DASHES       HIGHLITE\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C' '                SINGLE SPACE\n         MVC   HEAD+30(8),MEMNAME       MOVE IN MEMBER NAME\n         MVC   HEAD+38(12),=C' IS AN ALIAS'\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVC   HEAD+27(27),DASHES       HIGHLITE\n         PUT   OUT,HEAD\n         MVC   HEAD,HEAD-1              CLEAR LINE\n         MVI   HEAD,C' '                SPACE\n         PUT   OUT,HEAD\n         AP    CTRLIN,=P'5'             MAKE LINECT CORRECT\n         OI    OP,ALIAS                 SAY WE HAVE BEEN HERE\n         OI    OP,CMDSEP                PRINT COMMAND NAME ALSO\n         B     CNTRL                    GO GET NEXT MEMBER\n         EJECT\n         DS    0D\nMEMNAME  DC    CL8'0'\nREC      DC    CL80'0'\n         DC    C'0'\nLINE     DS    0CL133\nCC       DC    CL1'0'\n         DC    CL132'0'\nLINEMAJ  EQU   LINE+6\nLINEPL   EQU   LINE+8\nLINEIND  EQU   LINEPL\n         DC    CL1'0'\nHEAD     DC    CL133'0'\nENAME    DC    C'- INVALID AS SPECIFIED'\nEIO      DC    C'- I/O ERROR OCCURRED WHILE LOCATING NAME'\nH9       DC    H'9'\nDASHES   DC    35C'-'       SUBCOMMAND HIGHLIGHTER\nMEMLEN   DC    B'0'\nOFFSET   DC    B'0'\nMEMOFFST DC    B'0'\nOP       DC    B'0'\nOPMSGS   EQU   B'10000000'  MESSAGES FORMATTING\nOPCMDS   EQU   B'01000000'\nSTILLSC  EQU   B'00100000'  SUBCOMMAND HEADER FLAG\nSCSAVED  EQU   B'00010000'  SUBCOMMAND HAS BEEN SAVED FLAG\nALIAS    EQU   B'00001000'  SPARE FLAG\nMAJ      EQU   B'00000100'  MAJOR SEPARATION\nSUBCOMD  EQU   B'00000010'  SUBCOMMAND SEPARATION\nCMDSEP   EQU   B'00000001'  PRINT COMMAND NAME FLAG\n         SPACE\nLINESAVE DC    CL20'LAST DATA LINE'\nMSGSAVE  DC    D'0'                  OPERAND AND MESSAGE SAVE AREA\nSCSAVE   DC    D'0'                  SUBCOMMAND SAVE AREA\nBLKADDR  DC    F'0'\nCTRMAXL  DC    P'051'                LOW MAXIMUM THRESHOLD\nCTRMAXH  DC    P'055'                HIGH MAXIMUM THRESHOLD\nCTRLIN   DC    P'000'\n         SPACE\n         SPACE\n         PRINT NOGEN\n         LTORG\n         SPACE\n         DS    0D\nLSTSTRT  DC    X'0001000E'   TELL BLDL MAX NUMBER AND LENGTH\nMEM1     DC    2F'0'\nDUMMYFW  DC    F'0'\nDUMMYHW  DC    H'0'\nBLDLERR  ABEND 2222,DUMP     BLDL ERROR\nOPENERR  ABEND 1111,DUMP     CAN'T OPEN\nTITLE    DC    C'                        TSO COMMAND -- HELP REFERENCE'\nSAVEEM   DC    18F'0'        SAVE AREA\nIN       DCB   DSORG=PS,MACRF=GM,EODAD=FINI,DDNAME=SYSIN\n         SPACE\nOUT      DCB DSORG=PS,MACRF=PM,RECFM=FA,BLKSIZE=133,DDNAME=SYSPRINT\n         SPACE\nHELP     DCB   DSORG=PO,MACRF=R,EODAD=CNTRL,DDNAME=SYSUT1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHAUTAB": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\"\\x00\"\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'RACF AUTHORIZED CALLER TABLE'\nICHAUTAB CSECT\nICHAUTAB AMODE ANY\nICHAUTAB RMODE ANY\n*        ICHAUTAB CONTAINS THE NAMES OF PROGRAMS INSTALLATION\n*        AUTHORIZED TO ISSUE THE RACLIST SVC OR THE RACINIT SVC WITHOUT\n*        THE \"NEWPASS\" KEYWORD.\n*        LKED ATTRIBUTES ARE \"RENT,REFR,REUS\"\n*        THE ENTRY FORMAT IS AS FOLLOWS:\n*        DC    CL8'PPPPPPPP'            CALLER NAME LEFT JUSTIFIED AND\n*                                       PADDED WITH BLANKS\n*     NOTE NOTE NOTE NOTE NOTE NOTE     LAST ENTRY MUST BE BLANKS\n*        DC    X'40000000'              RACLIST SVC AUTHORIZATION\n*                                         OR\n*        DC    X'80000000'              RACINIT SVC AUTHORIZATION\n*                                       WITHOUT THE \"NEWPASS\" KEYWORD\n*\n*\n*\nENTRY1   DC    CL8'DSIOST'              NCCF PROGRAM NAME\n         DC    X'80000000'              RACINIT AUTHORIZATION\nENTRY2   DC    CL8'DSILAR'              NCCF PROGRAM NAME\n         DC    X'80000000'              RACINIT AUTHORIZATION\nENTRY3   DC    CL8'CADPRIVL'            CADAM PROGRAM NAME\n         DC    X'80000000'              RACINIT AUTHORIZATION\nENTRY4   DC    CL8'CADACCPG'            CADAM PROGRAM NAME\n         DC    X'80000000'              RACINIT AUTHORIZATION\nENTRY5   DC    CL8' '                   DUMMY ENTRY\n         DC    X'00000000'              NO AUTHORIZATION ON DUMMY\nENTRY6   DC    CL8' '                   DUMMY ENTRY\n         DC    X'00000000'              NO AUTHORIZATION ON DUMMY\nLASTENT  DC    CL8' '                   LAST ENTRY MUST BE BLANK\n         DC    X'00000000'              NO AUTHORIZATION ON DUMMY\n         END   ICHAUTAB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ICHCNX00": {"ttr": 7689, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00v\\x00v\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 118, "newlines": 118, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'ICHCNX00' - COMMAND PREPROCESSING EXIT'\n***********************************************************************\n*                                                                     *\n*              MODULE NAME = ICHCNX00                                 *\n*                                                                     *\n*              DESCRIPTIVE NAME = COMMAND PREPROCESSING EXIT          *\n*                                                                     *\n*              FUNCTION =                                             *\n*                  EXIT ALLOWS INSTALLATION TO FAIL ALL BATCH         *\n*                  REQUESTS TO PROCESS 'ADDSD' AND 'PERMIT'           *\n*                  COMMANDS FOR ALL USERS WITHOUT THE 'SPECIAL'       *\n*                  ATTRIBUTE                                          *\n*                                                                     *\n*              OPERATION =                                            *\n*                  SAVE REGISTERS AND ESTABLISH ADDRESSABILITY        *\n*                  IF COMMAND TYPE IS OTHER THAN 'ADDSD' OR           *\n*                      'PERMIT', EXIT                                 *\n*                  IF USER IS A MEMBER OF GROUP JCLGRP SET RC=4 AND *\n*                       EXIT                                          *\n*                  IF JOB TYPE IS NOT BATCH, EXIT                     *\n*                  IF USER HAS 'SPECIAL' ATTRIBUTE SET RC=0,          *\n*                      ELSE SET RC=4                                  *\n*                  EXIT                                               *\n*                                                                     *\n*              REGISTER CONVENTIONS = STANDARD CONVENTIONS.           *\n*                  REGISTER  0      = NOT USED                        *\n*                  REGISTER  1      = PARAMETER LIST POINTER          *\n*                  REGISTER  2      = PRESERVED POINTER TO PARM LIST  *\n*                  REGISTERS 3 - 5  = NOT USED                        *\n*                  REGISTERS 6 - 7  = WORK REGISTERS                  *\n*                  REGISTERS 8 - 11 = NOT USED                        *\n*                  REGISTER  12     = BASE REGISTER                   *\n*                  REGISTER  13     = SAVE AREA POINTER               *\n*                  REGISTER  14     = RETURN ADDRESS                  *\n*                  REGISTER  15     = ENTRY POINT ADDRESS AND         *\n*                                     RETURN CODE REGISTER            *\n*                                                                     *\n*              MACROS =                                               *\n*                  SAVE, RETURN, EQUATE                               *\n*                                                                     *\n*              MAPPING MACROS USED =                                  *\n*                  IHAACEE - ACEE MAP                                 *\n*                  IHAASCB - ASCB MAP                                 *\n*                  IHAASXB - ASXB MAP                                 *\n*                                                                     *\n*                                                                     *\n*              CHANGE ACTIVITY =                                      *\n*                  12/10/84  WRITTEN.  JWC.                           *\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n         PRINT NOGEN\nICHCNX00 CSECT\nICHCNX00 AMODE ANY\nICHCNX00 RMODE ANY\n         SAVE  (14,12),,ICHCNX00_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING ICHCNX00,R12            ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         SLR   R15,R15                 CLEAR R15 FOR FUTURE USE\n         L     R8,16                   GET ADDRESS OF CVT\n         L     R8,0(R8)                GET ADDR OF TCB ADDRESS WORD\n         L     R8,12(R8)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R8                 ADDRESSABILITY TO ASCB DSECT\n         L     R9,ASCBASXB             GET THE ADDRESS OF ASXB\n         USING ASXB,R9                 ADDRESSABILITY TO ASXB DSECT\n         L     R9,ASXBSENV             GET ADDRESS OF ACEE\n         USING ACEE,R9                 ADDRESSABILITY TO ACEE DSECT\n*\n*  CHECK TO SEE IF COMMAND TYPE IS 'ADDSD' OR 'PERMIT'. IF NOT, EXIT.\n*\nCHKCOMND EQU   *\n         L     R6,4(R2)                GET CALLER ADDR (FUNCTION CODE)\n         CLI   0(R6),X'03'             IS THIS AN 'ADDSD' COMMAND?\n         BE    CHKGRP                  YES, CHECK JOB TO SEE IF BATCH\n         CLI   0(R6),X'07'             IS THIS AN 'PERMIT' COMMAND?\n         BE    CHKGRP                  YES, CHECK JOB TO SEE IF BATCH\n         B     EXIT                    NO, RETURN (RC=0)\n*\n*  CHECK TO SEE IF THIS IS A MEMBER OF JCLGRP IF SO FAIL REQUEST\n*\nCHKGRP   EQU   *\n         CLC   ACEEGRPN,=CL8'JCLGRP'   IS IT A MEMBER OF JCLGRP\n         BNE   CHKJOB                  NO CONTINUE\n         LA    R15,4                   SET TO FAIL REQUEST\n         B     EXIT\n*\n*  CHECK TO SEE IF THIS IS A BATCH JOB. IF NOT, EXIT.\n*\nCHKJOB   EQU   *\n         L     R7,ASCBTSB              GET ADDRESS OF TSB\n         LTR   R7,R7                   IS TSB ADDRESS ZERO?\n         BNZ   EXIT                    NO, A TSO USER. EXIT (RC=0)\n*\n*  CHECK TO SEE IF THIS USER HAS 'SPECIAL' ATTRIBUTE. IF NOT, SET RC=4.\n*\n         TM    ACEEFLG1,ACEESPEC       USER HAVE 'SPECIAL' ATTRIBUTE?\n         BO    EXIT                    YES, EXIT (RC=0)\n         LA    R15,4                   NO, SET RC=4 (FAIL REQUEST)\n*\n*  EXIT THE EXIT\n*\nEXIT     EQU   *\n         RETURN (14,12),,RC=(15)       RESTORE REGISTERS AND RETURN\n         EJECT\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n         LTORG\n*\n*  DSECTS\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         END   ICHCNX00\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRDSNT": {"ttr": 7692, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "DELUXE"}, "text": "ICHRDSNT CSECT\nICHRDSNT AMODE ANY\nICHRDSNT RMODE ANY\n         DC    AL1(1)              INDICATES ONE RACF DATA SET\n         DC    CL44'SYS1.RACFDS1'  PRIMARY RACF DS NAME\n         DC    CL44'SYS1.RACFBKP1' BACKUP RACF DS NAME\n         DC    AL1(128)            # RESIDENT INDEX BLOCKS\n         DC    X'81'               UPDATES  OTHER THAN STATISTICS\n*                                  WILL BE UPDATED ON THE BACKUP\n*                                  RACF DATASET, AND USE THE RESIDENT\n*                                  DATA BLOCK OPTION FOR THE PRIMARY\n*                                  RACF DATASET\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRDX01": {"ttr": 7694, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 138, "newlines": 138, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'ICHRDX01' - RACDEF EXIT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = ICHRDX01                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = RACDEF PREPROCESSING EXIT            *\n*                                                                     *\n*             FUNCTION =                                              *\n*                EXIT ALLOWS INSTALLATION TO FAIL DATA SET            *\n*                DEFINITION REQUESTS IF NO RACF PROFILE EXISTS.       *\n*                EXIT PROCESSES RACHECK MACRO TO DETERMINE            *\n*                PROFILE AVAILABILITY.                                *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *\n*                   IF REQUEST IS FOR OTHER THAN TYPE = DEFINE,       *\n*                       EXIT                                          *\n*                   IF REQUEST IS FOR OTHER THAN RESOURCE CLASS =     *\n*                       DATASET, EXIT                                 *\n*                   COPY RESOURCE NAME (DATASET NAME) TO WORK AREA    *\n*                   SET RACHECK ENTITY PARM TO ADDRESS OF DATASET     *\n*                       NAME WORKAREA                                 *\n*                   SET RACHECK CLASS PARM TO DATASET                 *\n*                   IF REQUEST IS FOR DSTYPE = V (VSAM), SET RACHECK  *\n*                       DSTYPE PARM TO V; ELSE SET DSTYPE = N         *\n*                       (NON-VSAM)                                    *\n*                   SET RACHECK LOG PARM TO NOSTAT                    *\n*                   PROCESS RACHECK MACRO                             *\n*                   IF RETURN CODE FROM RACHECK IS X'04', SET R15 TO  *\n*                       X'04'; ELSE SET R15 TO X'00'                  *\n*                   EXIT                                              *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  1       = PARAMETER LIST POINTER       *\n*                    REGISTERS 2 - 6   = WORK REGISTERS               *\n*                    REGISTER  7       = PARAMETER LIST WORK POINTER  *\n*                    REGISTER  8       = WORK REGISTER                *\n*                    REGISTER  9       = ENTITY NAME POINTER          *\n*                    REGISTER  10      = CLASSNAME POINTER            *\n*                    REGISTER  11      = WORK AREA POINTER            *\n*                    REGISTER  12      = BASE REGISTER                *\n*                    REGISTER  13      = SAVE AREA POINTER            *\n*                    REGISTER  14      = DSECT ADDRESS AND RETURN     *\n*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *\n*                                        RETURN CODE REGISTER         *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, RACHECK, RETURN, EQUATE                        *\n*                                                                     *\n*             MAPPING MACROS USED =                                   *\n*                NONE                                                 *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                10/28/83  WRITTEN.      BC.                          *\n*                11/01/83  COMPLETED USE OF SYMBOLICS INSTEAD OF      *\n*                          HARD CODED ADDRESS (STILL NEED A DSECT     *\n*                          FOR THE PLIST), ADDED CHECK TO SEE IF      *\n*                          REQUEST IS A TYPE=DEFINE, AND STREAMLINED  *\n*                          THE ASSEMBLY OF THE MODEL DATASET NAME.    *\n*                          ADDED THE DOCUMENTATION SECTION.   MJL.    *\n*                11/02/83  MOVED INSTRUCTION FOR SAVING THE MENTITY   *\n*                          ADDRESS TO CORRECT LOCATION.     BC.       *\n*                11/24/84  MAJOR LOGIC CHANGE. PROCESS RACHECK MACRO  *\n*                          USING ENTITY, CLASS AND DSTYPE INFORMATION *\n*                          FROM THE PARAMETER LIST. IF PROFILE DOES   *\n*                          NOT EXIST, FAIL REQUEST; ELSE CONTINUE     *\n*                          PROCESSING.     JWC.                       *\n*                                                                     *\n*                12/13/84  ADDED CHECK FOR RACFIND=YES.  IF YES, THEN *\n*                          DISALLOW RACDEF, ELSE CONTINUE CHECKING.   *\n*                                          MJL.                       *\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n         PRINT NOGEN\nICHRDX01 CSECT\nICHRDX01 AMODE ANY\nICHRDX01 RMODE ANY\n         SAVE  (14,12),,ICHRDX01_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING ICHRDX01,R12            ESTABLISH ADDRESSABILITY\n         LR    R7,R1                   PRESERVE PTR TO PARMS\n         SLR   R15,R15                 CLEAR R15 FOR FUTURE USE\n*\n*  CHECK TO SEE IF GENERIC PROFILE IS BEING CREATED. IF IT IS, EXIT.\n*\nCHKGENRC EQU   *\n         L     R8,80(R7)               GET FLAG BYTE 2 ADDRESS\n         TM    0(R8),X'01'             HAS GENERIC=YES BEEN SPECIFIED?\n         BNO   CHKTYPE                 NO; CHECK TYPE=DEFINE REQUEST\n         B     EXITX                   YES; RETURN\n*\n*  CHECK TO SEE IF REQUEST IS FOR TYPE = DEFINE. IF NOT, EXIT.\n*\nCHKTYPE  EQU   *\n         L     R8,4(R7)                GET ADDRESS OF FLAG BYTE 1\n         TM    0(R8),X'C0'             TYPE=DEFINE REQUEST?\n         BNO   CHKCLASS                YES; CHECK FOR CLASS = DATASET\n         B     EXITX                   NO; RETURN\n*\n*  CHECK TO SEE IF REQUEST IS FOR CLASS = DATASET. IF NOT, EXIT.\n*\nCHKCLASS EQU   *\n         L     R8,24(R7)               GET 1 BYTE CLASSNAME LEN ADDR,\n         CLC   1(7,R8),=C'DATASET'     FOLLOWED BY THE CLASSNAME\n*                                      IS CLASSNAME = DATASET?\n         BE    CHKIND                  YES; CHECK FOR RACFIND=YES\n         B     EXITX                   NO; RETURN\n*\n*  CHECK TO SEE IF RACFIND=YES IS SPECIFIED. IF IT IS EXIT WITH RC=4\n*\nCHKIND   EQU   *\n         L     R8,80(R7)               GET FLAG BYTE 2 ADDRESS\n         TM    0(R8),X'C0'             HAS RACFIND=YES BEEN SPECIFIED?\n         BNO   SETR15                  NO; CONTINUE\n         LA    R15,4                   YES; SET TO FAIL REQUEST AND\n         B     EXITX                   RETURN\nSETR15   EQU   *\n         SLR   R15,R15                 YES; SET RETURN CODE TO 0\n*\n*  EXIT THE EXIT\n*\nEXITX    RETURN (14,12),,RC=(15)       END THE EXIT\n         EJECT\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n         LTORG\n         END   ICHRDX01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRFR01": {"ttr": 7939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00)\\x00)\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "DELUXE"}, "text": "ICHRFR01 CSECT\nICHRFR01 AMODE ANY\nICHRFR01 RMODE ANY\nTAB13    ICHRFRTB CLASS=DSNR,REQSTOR=IDENTIFY,SUBSYS=DSN,ACTION=RACF\nTAB14    ICHRFRTB CLASS=DSNR,REQSTOR=IDENTIFY,SUBSYS=DSNA,ACTION=RACF\nTAB15    ICHRFRTB CLASS=DSNR,REQSTOR=IDENTIFY,SUBSYS=DSNE,ACTION=RACF\nTAB16    ICHRFRTB CLASS=DSNR,REQSTOR=IDENTIFY,SUBSYS=DSNT,ACTION=RACF\nTAB17    ICHRFRTB CLASS=TPRODTRN,ACTION=RACF\nTAB18    ICHRFRTB CLASS=GPRODTRN,ACTION=RACF\nTAB19    ICHRFRTB CLASS=PPRODPSB,ACTION=RACF\nTAB20    ICHRFRTB CLASS=QPRODPSB,ACTION=RACF\nTAB21    ICHRFRTB CLASS=FPRODFCT,ACTION=RACF\nTAB22    ICHRFRTB CLASS=HPRODFCT,ACTION=RACF\nTAB23    ICHRFRTB CLASS=JPRODJCT,ACTION=RACF\nTAB24    ICHRFRTB CLASS=KPRODJCT,ACTION=RACF\nTAB25    ICHRFRTB CLASS=DPRODDCT,ACTION=RACF\nTAB26    ICHRFRTB CLASS=EPRODDCT,ACTION=RACF\nTAB27    ICHRFRTB CLASS=SPRODTST,ACTION=RACF\nTAB28    ICHRFRTB CLASS=UPRODTST,ACTION=RACF\nTAB29    ICHRFRTB CLASS=MPRODPPT,ACTION=RACF\nTAB30    ICHRFRTB CLASS=NPRODPPT,ACTION=RACF\nTAB31    ICHRFRTB CLASS=APRODPCT,ACTION=RACF\nTAB32    ICHRFRTB CLASS=BPRODPCT,ACTION=RACF\nTAB33    ICHRFRTB CLASS=TREGNTRN,ACTION=RACF\nTAB34    ICHRFRTB CLASS=GREGNTRN,ACTION=RACF\nTAB35    ICHRFRTB CLASS=PREGNPSB,ACTION=RACF\nTAB36    ICHRFRTB CLASS=QREGNPSB,ACTION=RACF\nTAB37    ICHRFRTB CLASS=FREGNFCT,ACTION=RACF\nTAB38    ICHRFRTB CLASS=HREGNFCT,ACTION=RACF\nTAB39    ICHRFRTB CLASS=JREGNJCT,ACTION=RACF\nTAB40    ICHRFRTB CLASS=KREGNJCT,ACTION=RACF\nTAB41    ICHRFRTB CLASS=DREGNDCT,ACTION=RACF\nTAB42    ICHRFRTB CLASS=EREGNDCT,ACTION=RACF\nTAB43    ICHRFRTB CLASS=SREGNTST,ACTION=RACF\nTAB44    ICHRFRTB CLASS=UREGNTST,ACTION=RACF\nTAB45    ICHRFRTB CLASS=MREGNPPT,ACTION=RACF\nTAB46    ICHRFRTB CLASS=NREGNPPT,ACTION=RACF\nTAB47    ICHRFRTB CLASS=AREGNPCT,ACTION=RACF\nTAB48    ICHRFRTB CLASS=BREGNPCT,ACTION=RACF\nENDTAB   ICHRFRTB TYPE=END\n         END   ICHRFR01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRIN03": {"ttr": 7941, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'RACF STARTED TASK TABLE AT DELUXE'\n*\n*    ATTRIBUTES: RENT REFR REUS\n*\n*    PART OF: IGC0003{ SVC130 131 132 133\n*\nICHRIN03 CSECT\nICHRIN03 AMODE ANY\nICHRIN03 RMODE ANY\nENTRIES  DC    X'8001'                  NUMBER OF ENTRIES FOLLOWING\n*        DC    CL32'<=PROC=><=USER=><=GROUP=><=FLAGS>'\nE1       DC    CL24'*       =               ',XL8'00'\n         END   ICHRIN03\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRRCDE": {"ttr": 7943, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x000\\x000\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "DELUXE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "IDATMSTP": {"ttr": 7945, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE CHECK PRINTERS INC. REPLACEMENT - IDATMSTP'\n*\nIDATMSTP CSECT\n         SLR   15,15                CLEAR REGISTER 15\n         LA    15,4                 STORE RETURN CODE OF 4\n         BR    14                   AND BRANCH OUT\n         END   IDATMSTP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEAVMXIT": {"ttr": 7947, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\xad\\x01\\xad\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 429, "newlines": 429, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'IEAVMXIT - GENERAL USER WTO EXIT'\n***********************************************************************\n*                                                                     *\n*              MODULE NAME = IEAVMXIT                                 *\n*                                                                     *\n*              DESCRIPTIVE NAME = GENERAL USER WTO EXIT               *\n*                                                                     *\n*              FUNCTION =                                             *\n*                EXIT RESPONDS TO THE FOLLOWING CICS MESSAGES:        *\n*                DFH4512, DFH4513, DFH4581, DFH4583 AND DFH4585       *\n*                                                                     *\n*              OPERATION =                                            *\n*                 SAVE REGISTERS AND ESTABLISH ADDRESSABILITY         *\n*                 IF MESSAGE ID IS NOT 'DFH4512', 'DFH4513',          *\n*                 'DFH4581', 'DFH4583' OR 'DFH4585'                   *\n*                     RESTORE REGISTERS                               *\n*                     EXIT                                            *\n*                 IF MESSAGE ID IS 'DFH4512', 'DFH4513',              *\n*                 'DFH4581', 'DFH4583' OR 'DFH4585'                   *\n*                     GETMAIN DYNAMIC STORAGE                         *\n*                     GET JOBNAME FROM TIOT (TASK INPUT/OUTPUT TABLE) *\n*                     IF MESSAGE ID IS 'DFH4512' OR 'DFH4513':        *\n*                         ISSUE 'F CICSX,CEMT P SHUT' COMMAND FOR     *\n*                             THE APPROPRIATE CICS                    *\n*                         ISSUE THE FOLLOWING WTO:                    *\n*                             'CICSX SYSTEM LOG / JOURNAL IS          *\n*                             NO LONGER AVAILABLE. NOTIFY SYSTEMS     *\n*                             PROGRAMMING BEFORE ATTEMPTING TO        *\n*                             RESTART CICSX'                          *\n*                     IF MESSAGE ID IS 'DFH4581', 'DFH4583',          *\n*                         OR 'DFH4585':                               *\n*                         SCAN MESSAGE TEXT TO DETERMINE WHICH        *\n*                             DDNAME NEEDS TO BE DUMPED               *\n*                         FOR MESSAGE 'DFH4583', PARM WILL ALSO       *\n*                             CONTAIN THE APPROPRIATE REPLY ID (A     *\n*                             REPLY OF 'GO' WILL BE ISSUED FROM       *\n*                             CICSXLOG)                               *\n*                         ISSUE 'S CICSXLOG,CICSDD=DFHJXXX,           *\n*                             CICSREP=XX'.                            *\n*                     FREEMAIN DYNAMIC STORAGE                        *\n*                     RESTORE REGISTERS                               *\n*                     EXIT                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *\n*                    REGISTER  1      = PARAMETER LIST POINTER        *\n*                    REGISTER  2      = PARAMETER LIST WORK POINTER   *\n*                    REGISTERS 3 - 10 = WORK REGISTERS                *\n*                    REGISTER  11     = BRANCH ADDRESS FROM GETMAIN   *\n*                    REGISTER  12     = BASE REGISTER                 *\n*                    REGISTER  13     = SAVE AREA POINTER             *\n*                    REGISTER  14     = RETURN                        *\n*                    REGISTER  15     = ENTRY POINT ADDRESS AND       *\n*                                       RETURN CODE REGISTER          *\n*                                                                     *\n*              MACROS =                                               *\n*                SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN,             *\n*                MGCR, WTO                                            *\n*                                                                     *\n*              MAPPING MACROS USED =                                  *\n*                IEZVX100, IEZMGCR, IHAPSA, IKJTCB, IEFTIOT1          *\n*                                                                     *\n*              ASSEMBLER OPTIONS = LIST,RENT                          *\n*                                                                     *\n*              LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,      *\n*                                       REFR,AC=1                     *\n*                                                                     *\n*              LOAD LIBRARY = SYS1.LINKLIB (APF AUTHORIZED LIBRARY)   *\n*                                                                     *\n*                                                                     *\n*              CHANGE ACTIVITY =                                      *\n*                09/12/85  WRITTEN.    JWC.                           *\n*                                                                     *\n*                11/20/85  ADAPTED FOR USE WITH THE FOLLOWING CICS    *\n*                          MESSAGES ONLY: DFH4512, DFH4513, DFH4581,  *\n*                          DFH4583 AND DFH4585.                       *\n*                                      JWC.                           *\n*                                                                     *\n*                07/29/86  WILL REQUEST 'DLXCICLG' TO USE 'IEBGENER'  *\n*                          TO DUMP JOURNAL IF JOURNAL IS OTHER THAN   *\n*                          DFHJ01.                                    *\n*                                      JWC.                           *\n*                                                                     *\n*                08/21/86  WILL NOT DUMP JOURNAL ON DFH4585 MESSAGE   *\n*                          (SHUTDOWN) IF JOURNAL IS OTHER THAN DFHJ01.*\n*                                      JWC.                           *\n*                                                                     *\n*                09/12/86  UPDATED TO WORK WITH CICS 1.7 AS WELL      *\n*                          AS CICS 1.6.                               *\n*                                      JWC.                           *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nIEAVMXIT CSECT                         GENERAL USER WTO EXIT\nIEAVMXIT AMODE 31                      31-BIT ADDRESSING MODE\nIEAVMXIT RMODE ANY                     31-BIT ADDRESSING MODE\n         SAVE  (14,12),,IEAVMXIT_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING IEAVMXIT,R12            ESTABLISH PGM ADDRESSABILITY\n         L     R2,0(,R1)               PRESERVE PTR TO PARMS\n         USING CTXT,R2                 ESTABLISH ADDRESSABILITY TO\n*                                      COMMUNICATIONS TASK EXIT\n*                                      PARAMETER LIST DSECT (CTXT)\n***********************************************************************\n*        MESSAGE ID CHECKING\n***********************************************************************\nCHKMSGID DS    0H\n         L     R3,CTXTTXPJ             R3 - ADDRESS OF MESSAGE TEXT\n         USING CTXTATTR,R3             ESTABLISH ADDRESSABILITY TO\n*                                      COMMUNICATIONS TASK EXIT\n*                                      MESSAGE ATTRIBUTES\n         LA    R4,CTXTTMSG             R4 - ADDRESS OF TEXT AREA\n         USING MSGTEXT,R4              ESTABLISH ADDRESSABILITY TO\n*                                      TEXT OF MESSAGE\n         LA    R11,MDFH4512            R11 - BRANCH ADDR AFTER GETMAIN\n         CLC   MSGID,DFH4512           DFH4512 MESSAGE?\n         BE    GETMAIN                 GETMAIN DYNAMIC STORAGE\n         CLC   MSGID,DFH4513           DFH4513 MESSAGE?\n         BE    GETMAIN                 GETMAIN DYNAMIC STORAGE\n         LA    R11,MDFH4581            R11 - BRANCH ADDR AFTER GETMAIN\n         CLC   MSGID,DFH4581           DFH4581 MESSAGE?\n         BE    GETMAIN                 GETMAIN DYNAMIC STORAGE\n         CLC   MSGID,DFH4583           DFH4583 MESSAGE?\n         BE    GETMAIN                 GETMAIN DYNAMIC STORAGE\n         CLC   MSGID,DFH4585           DFH4585 MESSAGE?\n         BNE   FINISH                  NO, FINISH WITH NO GET/FREEMAIN\n         EJECT\n***********************************************************************\n*        GETMAIN DYNAMIC STORAGE\n*            BELOW 16-MEG LINE BECAUSE SVC 34 REQUIRES THE MGCR\n*            PARAMETER LIST TO BE IN 24-BIT ADDRESSABLE STORAGE\n***********************************************************************\nGETMAIN  DS    0H\n         GETMAIN RU,LV=WORKLEN,SP=SUBPOOL,LOC=BELOW\n*                                      GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*        EXTRACT JOBNAME FROM TIOT (TASK INPUT/OUTPUT TABLE)\n***********************************************************************\nEXTRJOB  DS    0H\n         LA    R6,0                    R6 - ADDRESS OF THE PSA\n         USING PSA,R6                  ESTABLISH ADDRESSABILITY TO PSA\n         L     R6,PSATOLD              R6 - ADDRESS OF CALLER'S TCB\n         USING TCB,R6                  ESTABLISH ADDRESSABILITY TO TCB\n         L     R6,TCBTIO               R6 - ADDRESS OF THE TIOT\n         USING TIOT1,R6                ESTABLISH ADDRESSABILITY TO TIOT\n         MVC   JOBNAME,TIOCNJOB        MOVE JOBNAME TO DYNAMIC WORK\n         DROP  R6                      DROP ADDRESSABILITY TO TIOT\n         BR    R11                     RETURN\n         EJECT\n***********************************************************************\n*        REPLYING 'F CICSX,CEMT P SHUT' AFTER 'DFH4512' & 'DFH4513'\n***********************************************************************\nMDFH4512 DS    0H\n         OI    CTXTRFB2,CTXTRHCO       SUPPRESS THE MSG (HARDCOPY ONLY)\n         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR THE PARAMETER LIST\n         MVI   MGCRFLG1,X'80'          SET FLAG1 TO INDICATE THAT FLAG2\n*                                      CONTAINS VALID INFORMATION.\n*                                      FLAG2 = X'0000' (NO USER TOKEN).\n         MVC   MGCRTEXT(L'CMDTXT1),CMDTXT1    MOVE COMMAND TEXT\n         MVC   CICSJOB,JOBNAME         INDICATE APPROPRIATE CICS\n         LA    R1,(MGCRTEXT-MGCRPL)+L'CMDTXT1    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH             SAVE LENGTH IN MGCRPL\n         SR    R0,R0                   CLEAR REG 0\n         MGCR  MGCRPL                  ISSUE THE COMMAND\n         MVC   WTOLIST_(LWTOLST1),WTOLIST1    MOVE WTO LIST FORM FROM\n*                                      STATIC TO DYNAMIC\n         MVC   WTOLIST_+4(5),JOBNAME   INDICATE APPROPRIATE CICS\n         MVC   WTOLIST_+111(5),JOBNAME    INDICATE APPROPRIATE CICS\n         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE\n         B     FREEMAIN                FREE DYNAMIC STORAGE & RETURN\n         EJECT\n***********************************************************************\n*        REPLYING\n* 'S CICSXLOG,CICSDD=DFHJXXX,CICSREP=XX,REPLY=XXXX'\n*                                 OR\n* 'S CICSXLOG,CICSDD=DFHJXXX,LOGPGM=IEBGENER,SYSINDSN=DUMMY,CICSREP=XX,\n*     REPLY=XXXX'\n*                                 OR\n* 'S CICSXLOG,REPONLY=YES,CICSREP=XX,REPLY=XXXX'\n*        AFTER DFH4581, DFH4583 AND DFH4585\n***********************************************************************\nMDFH4581 DS    0H\n         MVC   REPLID,NULLREPL         INITIALIZE MESSAGE REPLY-ID\n         MVC   REPLY,GO                INITIALIZE MESSAGE REPLY\n         CLC   MSGID,DFH4583           DO WE NEED TO REPLY?\n         BNE   EXTRACT                 NO, EXTRACT DDNAME\n         MVC   REPLID,CTXTRPID         YES, INSERT REPLY ID\nEXTRACT  DS    0H\n         SR    R6,R6                   CLEAR REGISTER 6\n         LH    R6,CTXTTLEN             R6 - MAXIMUM TEXT LENGTH\n         LR    R5,R4                   R5 - PRESEARVE PTR TO MSGTEXT\nEXTLOOP0 DS    0H\n         CLC   0(4,R5),DFHJ            FOUND DDNAME?\n         BE    ENDLOOP0                YES, MOVE TO DYNAMIC\n         LA    R5,1(R5)                NO, INCREMENT INDEX\n         BCT   R6,EXTLOOP0             LOOK AGAIN\n         MVC   WTOLIST_(LWTOLST2),WTOLIST2    MOVE WTO LIST FORM FROM\n*                                      STATIC TO DYNAMIC\n         MVC   WTOLIST_+19(5),JOBNAME  INDICATE APPROPRIATE CICS\n         MVC   WTOLIST_+114(2),REPLID  INDICATE MESSAGE REPLY-ID\n         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE (NO DDNAME)\n         B     FREEMAIN                RETURN\nENDLOOP0 DS    0H\n         LA    R8,DDNAME               R8 - INDEX TO DYNAMIC DDNAME\n         LA    R7,8                    R7 - MAX LENGTH OF DDNAME+1\nEXTLOOP1 DS    0H\n         CLC   0(1,R5),BLANK           END OF DDNAME?\n         BE    ENDLOOP1                YES, EXTRACT REPLY IF NEEDED\n         CLC   0(1,R5),RPAREN          END OF DDNAME?\n         BE    ENDLOOP1                YES, EXTRACT REPLY IF NEEDED\n         MVC   0(1,R8),0(R5)           DDNAME TO DYNAMIC, 1 CHR / TIME\n         LA    R5,1(R5)                INCREMENT MSG TEXT INDEX (INPUT)\n         LA    R8,1(R8)                INCREMENT DYNAMIC INDEX (OUTPUT)\n         BCTR  R6,0                    DECREMENT R6\n         BCT   R7,EXTLOOP1             GET NEXT CHARACTER\n         MVC   WTOLIST_(LWTOLST2),WTOLIST2    MOVE WTO LIST FORM FROM\n*                                      STATIC TO DYNAMIC\n         MVC   WTOLIST_+19(5),JOBNAME  INDICATE APPROPRIATE CICS\n         MVC   WTOLIST_+114(2),REPLID  INDICATE MESSAGE REPLY-ID\n         WTO   MF=(E,WTOLIST_)         ISSUE THE MESSAGE (NO DDNAME)\n         B     FREEMAIN                RETURN\nENDLOOP1 DS    0H\n         LA    R5,1(R5)                INCREMENT MSG TEXT INDEX (INPUT)\n         BCTR  R6,0                    DECREMENT R6\nEXTLOOP2 DS    0H\n         CLC   0(2,R5),REPLYIND        REPLY FOUND?\n         BE    ENDLOOP2                YES, EXTRACT REPLY\n         LA    R5,1(R5)                INCREMENT MSG TEXT INDEX (INPUT)\n         BCT   R6,EXTLOOP2             CONTINUE SEARCH\n         B     CMD0                    USE DEFAULT REPLY (GO)\nENDLOOP2 DS    0H\n         MVC   REPLY,1(R5)             EXTRACT REPLY\nCMD0     DS    0H\n         OI    CTXTRFB2,CTXTRHCO       SUPPRESS THE MSG (HARDCOPY ONLY)\n         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR THE PARAMETER LIST\n         MVI   MGCRFLG1,X'80'          SET FLAG1 TO INDICATE THAT FLAG2\n*                                      CONTAINS VALID INFORMATION.\n*                                      FLAG2 = X'0000' (NO USER TOKEN).\n         CLC   DFHJ01,DDNAME           IEBGENER OR DFSULTR0?\n         BE    CMD2                    DFSULTR0\n         CLC   MSGID,DFH4585           REPONLY=YES?\n         BE    CMD4                    YES REPLY ONLY\nCMD3     DS    0H\n         MVC   MGCRTEXT(L'CMDTXT3),CMDTXT3    MOVE CMD TEXT SKELETON\n         MVC   CICSLOGB,CICSID         INDICATE WHICH CICSLOG TO START\n         MVC   CICSDDB,DDNAME          DDNAME FROM STATIC TO DYNAMIC\n         MVC   CICSIDB,REPLID          REPLY-ID FROM STATIC TO DYNAMIC\n         MVC   CICSREPB,REPLY          REPLY FROM STATIC TO DYNAMIC\n         LA    R1,(MGCRTEXT-MGCRPL)+L'CMDTXT3    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH             SAVE LENGTH IN MGCRPL\n         B     MGCR                    ISSUE COMMAND\nCMD2     DS    0H\n         MVC   MGCRTEXT(L'CMDTXT2),CMDTXT2    MOVE CMD TEXT SKELETON\n         MVC   CICSLOGA,CICSID         INDICATE WHICH CICSLOG TO START\n         MVC   CICSDDA,DDNAME          DDNAME FROM STATIC TO DYNAMIC\n         MVC   CICSIDA,REPLID          REPLY-ID FROM STATIC TO DYNAMIC\n         MVC   CICSREPA,REPLY          REPLY FROM STATIC TO DYNAMIC\n         LA    R1,(MGCRTEXT-MGCRPL)+L'CMDTXT2    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH             SAVE LENGTH IN MGCRPL\n         B     MGCR                    ISSUE COMMAND\nCMD4     DS    0H\n         MVC   MGCRTEXT(L'CMDTXT4),CMDTXT4    MOVE CMD TEXT SKELETON\n         MVC   CICSLOGC,CICSID         INDICATE WHICH CICSLOG TO START\n         MVC   CICSIDC,REPLID          REPLY-ID FROM STATIC TO DYNAMIC\n         MVC   CICSREPC,REPLY          REPLY FROM STATIC TO DYNAMIC\n         LA    R1,(MGCRTEXT-MGCRPL)+L'CMDTXT4    GET MGCRPL LENGTH\n         STC   R1,MGCRLGTH             SAVE LENGTH IN MGCRPL\nMGCR     DS    0H\n         SR    R0,R0                   CLEAR REG 0\n         MGCR  MGCRPL                  ISSUE THE COMMAND\n         EJECT\n***********************************************************************\n*        FREEMAIN DYNAMIC STORAGE\n*            BELOW 16-MEG LINE BECAUSE SVC 34 REQUIRES THE MGCR\n*            PARAMETER LIST TO BE IN 24-BIT ADDRESSABLE STORAGE\n***********************************************************************\nFREEMAIN DS    0H\n         LR    R5,R13                  R5 - ADDRESS OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN RU,LV=WORKLEN,A=(R5),SP=SUBPOOL\n*                                      FREEMAIN DYNAMIC STORAGE\n***********************************************************************\n*        WRAP THINGS UP AND RETURN\n***********************************************************************\nFINISH   DS    0H\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS\n         BR    R14                     RETURN\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nDFHJ     DC    CL4'DFHJ'               DDNAME INDICATOR / JOURNAL FILE\nBLANK    DC    CL1' '                  END OF DDNAME INDICATOR\nNULLREPL DC    CL2'XX'                 NULL REPLY-ID\nGO       DC    CL4'GO'                 DEFAULT REPLY\nREPLYIND DC    CL2'''Y'                INDICATES REPLY TEXT (YNNX)\nRPAREN   DC    CL1')'                  END OF DDNAME INDICATOR\nDFHJ01   DC    C'DFHJ01'               JOURNAL USES DFSULTR0 TO LOG\nDFH4512  DC    C'DFH4512 '             MESSAGE DFH4512\nDFH4513  DC    C'DFH4513 '             MESSAGE DFH4513\nDFH4581  DC    C'DFH4581 '             MESSAGE DFH4581\nDFH4583  DC    C'DFH4583 '             MESSAGE DFH4583\nDFH4585  DC    C'DFH4585 '             MESSAGE DFH4585\nCMDTXT1  DC    C'F CICSX,CEMT P SHUT,I'  CMD TEXT FOR DFH4512 & DFH4513\nCMDTXT2  DC    C'S CICSXLOG,CICSDD=DFHJXXX,CICSREP=XX,REPLY=XXXX'\nCMDTXT3  DC    C'S CICSXLOG,CICSDD=DFHJXXX,LOGPGM=IEBGENER,SYSINDS=DUMM+\n               Y,CICSREP=XX,REPLY=XXXX'\nCMDTXT4  DC    C'S CICSXLOG,REPONLY=YES,CICSREP=XX,REPLY=XXXX'\n*                                      CMD TEXT DFH4581,DFH4583,DFH4585\n         EJECT\n***********************************************************************\n*        LIST FORM OF WTO\n***********************************************************************\nWTOLIST1 WTO   'CICSX SYSTEM LOG / JOURNAL IS NO LONGER AVAILABLE. NOTI+\n               FY SYSTEMS PROGRAMMING BEFORE ATTEMPTING TO RESTART CICS+\n               X',ROUTCDE=(01),DESC=(02),MF=L\nLWTOLST1 EQU   *-WTOLIST1\nWTOLIST2 WTO   'UNABLE TO DUMP CICSX JOURNAL FILE. DDNAME UNKNOWN. NOTI+\n               FY SYSTEMS PROGRAMMING BEFORE REPLYING TO MESSAGE ID - X+\n               X',ROUTCDE=(01),DESC=(02),MF=L\nLWTOLST2 EQU   *-WTOLIST2\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\nSUBPOOL  EQU   230                     SUBPOOL FOR GET/FREEMAINS\n         LTORG\n         EJECT\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\n         DS    0F\nSAVEAREA DS    18F                     IEAVMXIT SAVE AREA\n         DS    0F\n         EJECT\nMGCR     IEZMGCR DSECT=NO\n         EJECT\n         ORG   MGCRTEXT\nTXT4512  DS    0CL19                   CMD TEXT FOR DFH4512 & DFH4513\n         DS    CL2\nCICSJOB  DS    CL5\n         DS    CL12\n         ORG   MGCRTEXT\nTXT4581A DS    0CL47                   CMD TEXT DFH4581,DFH4583,DFH4585\n         DS    CL6\nCICSLOGA DS    CL1                     CICSLOG JOB IDENTIFIER\n         DS    CL11\nCICSDDA  DS    CL7                     CICS JOURNAL DDNAME (DFHJXXX)\n         DS    CL9\nCICSIDA  DS    CL2                     REPLY-ID (FOR DFH4583 ONLY)\n         DS    CL7\nCICSREPA DS    CL4                     REPLY (FOR DFH4583 ONLY)\n         ORG   MGCRTEXT\nTXT4581B DS    0CL77                   CMD TEXT DFH4581,DFH4583,DFH4585\n         DS    CL6\nCICSLOGB DS    CL1                     CICSLOG JOB IDENTIFIER\n         DS    CL11\nCICSDDB  DS    CL7                     CICS JOURNAL DDNAME (DFHJXXX)\n         DS    CL39\nCICSIDB DS     CL2                     REPLY-ID (FOR DFH4583 ONLY)\n         DS    CL7\nCICSREPB DS    CL4                     REPLY (FOR DFH4583 ONLY)\n         ORG   MGCRTEXT\nTXT4581C DS    0CL44                   CMD TEXT DFH4581,DFH4583,DFH4585\n         DS    CL6\nCICSLOGC DS    CL1                     CICSLOG JOB IDENTIFIER\n         DS    CL24\nCICSIDC DS     CL2                     REPLY-ID (FOR DFH4583 ONLY)\n         DS    CL7\nCICSREPC DS    CL4                     REPLY (FOR DFH4583 ONLY)\n         ORG\nREPLID   DS    CL2                     REPLY-ID WORK AREA\nREPLY    DS    CL4                     REPLY WORK AREA\nJOBNAME  DS    0CL8                    CICS JOB NAME WORK AREA\n         DS    CL4\nCICSID   DS    CL1                     CICS IDENTIFIER (A,B,T,ETC.)\n         DS    CL3\nDDNAME   DS    CL7                     CICS JOURNAL DDNAME WORK AREA\nWTOLIST_ DS    CL(LWTOLST1)            DYNAMIC LIST FORM OF WTO MACRO\nWORKLEN  EQU   *-WORKAREA\n***********************************************************************\n*        MAPPING OF MESSAGE TEXT\n***********************************************************************\nMSGTEXT  DSECT\nMSGID    DS    CL8                     MESSAGE ID\nJOBDATA  DS    CL8                     JOBNAME\n         EJECT\n***********************************************************************\n*        IEAVMXIT COMMUNICATIONS TASK EXIT PARAMETER LIST (CTXT)\n***********************************************************************\n         IEZVX100\n         EJECT\nIEAVMXIT CSECT                         GENERAL USER WTO EXIT\n***********************************************************************\n*        PREFIXED SAVE AREA DSECT\n***********************************************************************\n         IHAPSA DSECT=YES\n         EJECT\nIEAVMXIT CSECT                         GENERAL USER WTO EXIT\n***********************************************************************\n*        TASK CONTROL BLOCK DSECT\n***********************************************************************\n         IKJTCB DSECT=YES\n         EJECT\nIEAVMXIT CSECT                         GENERAL USER WTO EXIT\n***********************************************************************\n*        TASK INPUT/OUTPUT TABLE DSECT\n***********************************************************************\nTIOT     DSECT\n         IEFTIOT1\n         EJECT\nIEAVMXIT CSECT                         GENERAL USER WTO EXIT\n         END   IEAVMXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFACTRT": {"ttr": 8196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x04\\x80\\x04\\x80\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1152, "newlines": 1152, "modlines": 0, "user": "DELUXE"}, "text": "***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFACTRT                                  *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PUT MESSAGES VIA IEFYS ON SYSTEM MESSAGE DATA        *\n*                SET.                                                 *\n*                                                                     *\n*                OPERATION =                                          *\n*                   FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.  *\n*                   FOR JOB TERMINATION PUT OUT JOB END MESSAGE.      *\n*                                                                     *\n*              NOTES =                                                *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.             *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *\n*                     AS FOLLOWS.                                     *\n*                 1.  PTR TO COMMON EXIT PARAMETER AREA               *\n*                 2.  PTR TO STEPNAME FIELD                           *\n*                 3.  PTR TO PROGRAMMER NAME FIELD                    *\n*                 4.  PTR TO JOB CPU TIME FIELD                       *\n*                 5.  PTR TO JOB ACCOUNTING FIELDS                    *\n*                 6.  PTR TO STEP CPU TIME FIELD                      *\n*                 7.  PTR TO STEP ACCOUNTING FIELDS                   *\n*                 8.  PTR TO CANCEL FLAG & STEP NUMBER                *\n*                 9.  PTR TO CONDITION CODE FIELD                     *\n*                10.  PTR TO SMF RECORD TO BE WRITTEN                 *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                OUTPUT = NONE                                        *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                OUTPUT = NONE                                        *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                ROUTINES = NONE                                      *\n*                DATA AREAS = NONE                                    *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN,          *\n*                      SETRP, IFASMFR, IEFJMR, IHASDWA, TIME          *\n*                                                                     *\n*             MESSAGES =                                              *\n*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *\n*                                                                     *\n*             ABEND CODES:                                            *\n*                11 = RACLIST ERROR FOR APPL CLASES                   *\n*                12 = RACLIST ERROR FOR APPL CLASES DELETE            *\n*                21 = RACLIST ERROR FOR APPL CLASS_                   *\n*                22 = RACLIST ERROR FOR APPL CLASS_ DELETE            *\n*                41 = SMF RECORD WITHOUT ID SECTION                   *\n*                42 = SMF RECORD WITHOUT COMPLETION SECTION           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n*\n* CONSTANT ADDRESS EQUATES\n*\n$MAXDA   EQU    253         MAX NUMBER OF SPOOL VOLUMES\nOURTCB   EQU    X'04'       OFFSET INTO TCB LIST OF OUR TCB ADDRESS\nBYTE06   EQU    X'06'       BYTE CONSTANT, VALUE X'06'\n*\n* REGISTER EQUATES\n*\nR0  EQU  0 WORK\nR1  EQU  1 WORK / PARM\nR2  EQU  2 WORK\nR3  EQU  3 WORK\nR4  EQU  4 SECTION PTR\nR5  EQU  5 WORK\nR6  EQU  6 OUTPUT LINE\nR7  EQU  7 COMMON AREA\nR8  EQU  8 WSRCC JCT\nR9  EQU  9 SMF RECORD\nR10 EQU 10 BASE REG2\nR11 EQU 11 CONSTANTS\nR12 EQU 12 BASE REG1\nR13 EQU 13 SAVE AREA\nR14 EQU 14 LINKAGE\nR15 EQU 15 LINKAGE\n         EJECT\nIEFACTRT CSECT                    SMF TERMINATION EXIT\n         SAVE  (14,12),,IEFACTRT_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                 SAVE THE REGISTERS\n         LR    R12,R15            ESTABLISH ADDRESSABILITY\n         USING IEFACTRT,R12       TELL THE ASSEMBLER\n         LA    R10,4095(R12)      ESTABLISH ADDRESSABILITY\n         USING IEFACTRT+4095,R10  TELL THE ASSEMBLER\n*\n*        DETERMINE REASON FOR ENTRY\n*\n         C     R0,=F'20'\n         BNE   EXITO\n*\n*        DETERMINE WHETHER TSO USER OR STARTED TASK\n*\n         L     R9,36(R1)          LOAD ADDRESS OF SMF RECORD\n         USING SMFRCD30,R9        ADDRESS THE TYPE 30 RECORD\n         CLC   SMF30WID,JES2      TEST FOR TSO USER OR STARTED TASK\n         BNE   EXITO              DISCONTINUE EXECUTION\n         LR    R3,R1              SAVE REGISTER 1 (POINTER TO PARMS)\n         L     R7,0(R3)\n         USING JMR,R7\n         CLC   JMRUCOM,=F'0'      ADDRESS ALREADY IN COM AREA?\n         BNE   INIT               YES, USE IT\n         GETMAIN R,LV=LTOTGM,SP=241\n         ST    R1,JMRUCOM         STORE ADDRESS OF GTMN'D AREA\n         ST    R13,4(R1)          STOR ADDRESS OF OLD SAVE IN NEW\n         ST    R1,8(R13)          STOR ADDRESS OF NEW SAVE IN OLD\n         LR    R13,R1\n         USING DATA,R13\n         XC    GMTAPES,GMTAPES    INIT TAPE COUNT\n         MVC   BADEND,=C'N'       NO BAD RETURN CODES\n         MVC   EXCPS,SPACES       INIT EXCP COUNT ERROR INDICATOR\n         L     R11,4(R13)\n         L     R11,68(R11)\n         ST    R11,R12FORYS\n         B     INIT2\nINIT     LR    R1,R13\n         L     R13,JMRUCOM\n         ST    R1,SAVEBK\n         ST    R13,SAVEFW\nINIT2    MVC   PARMS(LPARMS),0(R3)\n         ST    R7,JMRADDR\n*\n*        DETERMINE RECORD 30 SUBTYPE\n*\n         CLC   SMF30STP,R30JOB     JOB TERMINATION?\n         BE    JOBTERM\n         CLC   SMF30STP,R30STEP    STEP TERMINATION?\n         BE    STEPTERM\n         B     EXITR\n         EJECT\n***********************************************************************\n*\n*        HANDLE STEP TERMINATION CONDITIONS\n*\n***********************************************************************\nSTEPTERM MVC   WTO1TXT,STEPMSG1    MOVE ' ' MSG OVLY TO MSG BUFFER\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,STEPMSG2    MOVE '*' MSG OVLY TO MSG BUFFER\n         BAL   R14,MSGRTN\n         CLC   SMF30ION,=H'0'      IS THERE AN IDENTIFICATION SECTION?\n         BH    CHKID               IF YES, LOOK AT IT; OTHERWISE\n         ABEND 41,DUMP\nCHKID    LR    R4,R9               POINT REGISTER TO SMF RECORD\n         A     R4,SMF30IOF         AND THEN TO IDENTIFICATION SECTION\n         USING SMF30ID,R4\n         MVC   WTO1TXT,IDMSG       MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING IDMSGS,R5\n         MVC   ID1,SMF30STM        GET STEP NAME FROM SMF RECORD\n         MVC   ID2,SMF30JBN        GET JOB NAME FROM SMF RECORD\n         MVC   ID3,SMF30UIF        GET USERID FROM SMF RECORD\n         MVC   ID4,SMF30CLS        GET CURRENT CLASS FROM SMF RECORD\n         BAL   R14,MSGRTN\n         MVC   JOBCLASS,SMF30CLS   SAVE CURRENT CLASS FROM SMF RECORD\n         MVC   BSTCLAS,SMF30CLS    INITIALIZE CLASS RECOMMENDATION\n*\n* GET RETURN CODE INDICATORS\n*\n         CLC   SMF30TON,=H'0'      IS THERE A COMPLETION SECTION?\n         BH    CODES               IF NOT, ABEND\n         ABEND 42,DUMP\nCODES    LR    R4,R9               POINT REGISTER TO SMF RECORD\n         A     R4,SMF30TOF         AND THEN TO COMPLETION SECTION\n         USING SMF30CMP,R4\n         TM    SMF30STI,X'008'     IF BIT8 IS SET, IT INDICATES\n         BNO   CODES010            INCORRECT EXCP COUNT FOR STEP\n         MVC   EXCPS,=C'********'  WILL DISPLAY '***' INSTEAD OF COUNT\nCODES010 CLC   BADEND,=C'Y'        BAD RETURN CODE FROM PREVIOUS STEP?\n         BE    ACCT                DON'T BOTHER CHECKING FOR THIS STEP\n         TM    SMF30STI,X'02'      ABEND FOR STEP? (BIT6 SET?)\n         BNO   CODES050            IF NOT, CHECK NORMAL COMPLETION\n         TM    SMF30SCC,X'80'      USER ABEND? CONSIDER RECOMMENDATION\n         BO    ACCT                OTHERWISE, IT'S A SYSTEM ABEND\n         CLC   SMF30SCC,=X'0722'   TOO MUCH SYSOUT?\n         BNE   CODES020            IF NOT, CHECK FOR TIME-OUT ERROR\n         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION\n         B     ACCT\nCODES020 CLC   SMF30SCC,=X'0522'   TIME-OUT ERROR?\n         BNE   CODES030            IF NOT, CHECK FOR TIME-OUT ERROR\n         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION\n         B     ACCT\nCODES030 CLC   SMF30SCC,=X'0322'   TIME-OUT ERROR?\n         BNE   CODES040            IF NOT, CHECK FOR CANCELATION\n         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION\n         B     ACCT\nCODES040 CLC   SMF30SCC,=X'0222'   CANCELED BY OPERATOR?\n         BNE   ACCT                IF NOT, CONSIDER RECOMMENDATION\n         MVC   BADEND,=C'Y'        IF YES, NO RECOMMENDATION\n         B     ACCT\nCODES050 TM    SMF30STI,X'01'      IF BIT7=0, RC=0; MAKE RECOMMENDATION\n         BNO   ACCT                IF BIT7=1, STEP FLUSHED; NO RECC.\n         MVC   BADEND,=C'Y'        IF SET, NO RECOMMENDATION\n*\n* GET STEP TIME UNDER TCB FOR LATER WORKING SET SIZE CALCULATIONS\n*\nACCT     CLC   SMF30CON,=H'0'      IS THERE AN ACCOUNTING SECTION?\n         BE    STG                 IF NOT, SKIP THIS PART\n         LR    R4,R9               POINT REGISTER TO SMF RECORD\n         A     R4,SMF30COF         AND THEN TO PROCESSOR ACCTNG SECTION\n         USING SMF30CAS,R4\n         MVC   STCPUTCB,SMF30CPT   STORE CPU TIME\n         MVC   WTO1TXT,CPUMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING CPUMSGS,R5\n         L     R1,SMF30CPT         GET JOB TCB TIME\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   CPU1,TIMEFLD+1\n         L     R1,SMF30CPS         GET JOB SRB TIME\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   CPU2,TIMEFLD+1\n         L     R1,SMF30CPT         GET JOB TCB TIME\n         A     R1,SMF30CPS         ADD JOB SRB TIME\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   CPU3,TIMEFLD+1\n         MVC   JOBMIN,TIMEFLD      STORE MINUTES\n         OC    JOBMIN,ZEROS        INCLUDE LEADING ZEROS\n         MVC   JOBSEC,TIMEFLD+5    STORE SECONDS\n         OC    JOBSEC,ZEROS        INCLUDE LEADING ZEROS\n         BAL   R14,MSGRTN\n*\n* GET REGION REQUESTED, STG USED BELOW 16M AND STG USED ABOVE 16M\n*\nSTG      CLC   SMF30RON,=H'0'      IS THERE A STORAGE SECTION?\n         BE    PAGES               IF NOT, SKIP THIS PART\n         LR    R4,R9               POINT REGISTER TO SMF RECORD\n         A     R4,SMF30ROF         AND THEN TO STORAGE SECTION\n         USING SMF30SAP,R4\n         MVC   WTO1TXT,STGMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING STGMSGS,R5\n         SLR   R2,R2               CLEAR REGISTER\n         L     R2,SMF30RGN         GET REQUESTED REGION SIZE\n         LA    R3,STG1\n         BAL   R14,PCOUNT\n         L     R2,SMF30URB         GET STORAGE (BELOW 16 MEGABYTES)\n         SRL   R2,10               CONVERT FROM BYTES TO 'K' BYTES\n         LA    R3,STG2\n         BAL   R14,PCOUNT\n         L     R2,SMF30EUR         GET STORAGE (BELOW 16 MEGABYTES)\n         SRL   R2,10               CONVERT FROM BYTES TO 'K' BYTES\n         LA    R3,STG3\n         BAL   R14,PCOUNT\n         BAL   R14,MSGRTN\n*\n* PAGE-IN AND PAGE-OUT STATISTICS\n*\nPAGES    CLC   SMF30RON,=H'0'      IS THERE A STORAGE SECTION?\n         BE    TAPES               IF NOT, SKIP THIS PART\n         LR    R4,R9               POINT REGISTER TO SMF RECORD\n         A     R4,SMF30ROF         AND THEN TO STORAGE SECTION\n         USING SMF30SAP,R4\n         MVC   WTO1TXT,PAGMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING PAGMSGS,R5\n*\n* GET PAGE COUNTS, CONVERT TO PRINT CHARACTERS, PUT INTO MESSAGE\n*\n         L     R2,SMF30PSI         GET STEP PAGE-INS\n         LA    R3,PAG1\n         BAL   R14,PCOUNT\n         L     R2,SMF30PSO         GET STEP PAGE-OUTS\n         LA    R3,PAG2\n         BAL   R14,PCOUNT\n         L     R2,SMF30VPI         GET STEP VIO PAGE-INS\n         LA    R3,PAG3\n         BAL   R14,PCOUNT\n         L     R2,SMF30VPO         GET STEP VIO PAGE-OUTS\n         LA    R3,PAG4\n         BAL   R14,PCOUNT\n*\n* CALCULATE WORKING SET SIZE, CONVERT TO PRINT CHARS, PUT INTO MSG\n*\n         L     R2,STCPUTCB\n         LTR   R2,R2               CPU TIME GOTTEN?\n         BNZ   DIVI\n         MVC   WSS,=C'********'\n         B     PRT\nDIVI     LM    R2,R3,SMF30PSC      COUNT OF CPU PAGE SECONDS\n         D     R2,STCPUTCB         DIVIDE BY TCB TIME\n         LR    R2,R3\n         LA    R3,WSS\n         BAL   R14,PCOUNT\n*\n* DISPLAY PAGE COUNTS, WORKING SET SIZE\n*\nPRT      BAL   R14,MSGRTN\n*\n* ADDRESS SPACE SWAP SEQUENCES\n*\n         MVC   WTO1TXT,SWPMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING SWPMSGS,R5\n         L     R2,SMF30NSW         GET SWAP SEQUENCE COUNT\n         LA    R3,SWP1\n         BAL   R14,PCOUNT\n         BAL   R14,MSGRTN\n*\n* CHECK FOR DEVICES ALLOCATED IN THIS STEP, EXCP COUNT\n*\nTAPES    SLR   R2,R2\n         LH    R2,SMF30EON         NUMBER OF EXCP SECTIONS\n         LTR   R2,R2               IS THERE AN EXCP SECTION?\n         BZ    EXIT                IF NOT, THEN SKIP THIS PART\n         XC    GMDASD,GMDASD       INIT DASD COUNT FOR STEP\n         LR    R4,R9               POINT TO SMF RECORD\n         A     R4,SMF30EOF         AND THEN TO EXCP SECTION\n         USING SMF30EXP,R4\n         SLR   R5,R5               CLEAR REGISTER FOR TAPE COUNT\n         SLR   R6,R6               CLEAR REGISTER FOR DASD COUNT\n         SLR   R7,R7               CLEAR REGISTER FOR TOTAL EXCP COUNT\n         ST    R7,DASDEXCP         CLEAR DASD TOTAL EXCP COUNT\n         ST    R7,TAPEEXCP         CLEAR TAPE TOTAL EXCP COUNT\nCOUNTAP  CLC   SMF30DEV,=X'80'     IS THIS A TAPE ALLOCATION?\n         BNE   COUNTDSK            NO, SEE IF IT'S DASD\n         LA    R5,1(R5)            YES, COUNT TAPE\n         L     R7,TAPEEXCP         YES, GET PREVIOUS EXCP COUNT\n         A     R7,SMF30BLK         ADD EXCP'S FROM THIS SECTION\n         ST    R7,TAPEEXCP         SAVE EXCP COUNT FOR FUTURE\n         B     NXTEXCP\nCOUNTDSK CLC   SMF30DEV,=X'20'     IS THIS A DASD ALLOCATION?\n         BNE   NXTEXCP             NO, CHECK NEXT EXCP SECTION\n         LA    R6,1(R6)            YES, COUNT DASD\n         L     R7,DASDEXCP         YES, GET PREVIOUS EXCP COUNT\n         A     R7,SMF30BLK         ADD EXCP'S FROM THIS SECTION\n         ST    R7,DASDEXCP         SAVE EXCP COUNT FOR FUTURE\nNXTEXCP  LA    R4,22(R4)           LOOK AT NEXT EXCP SECTION\n         BCT   R2,COUNTAP\n         ST    R6,GMDASD           STORE STEP DASD COUNT\n*\n* GET TAPE COUNTS, COMPARE TO OLD COUNT, SAVE LARGER IN SAVED GETMAIN\n*\n         L     R2,GMTAPES          GET PREVIOUS HIGH TAPE COUNT\n         CR    R5,R2               COMPARE STEP COUNT TO SAVED COUNT\n         BNH   DEVMSGRT            TAPE COUNT NOT LARGER, SHOW COUNTS\n         ST    R5,GMTAPES          OTHERWISE, STORE LARGER COUNT\nDEVMSGRT ST    R5,STORX2           SAVE TAPE COUNT FOR STEP\n         MVC   WTO1TXT,DEVMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING DEVMSGS,R5\n         L     R2,STORX2           LOAD TAPE COUNT FOR STEP\n         LA    R3,DEV1\n         BAL   R14,PCOUNT          CONVERT TAPE COUNT\n         L     R2,TAPEEXCP         LOAD TAPE EXCP COUNT FOR STEP\n         LA    R3,DEV2\n         BAL   R14,PCOUNT          CONVERT TAPE EXCP COUNT\n         L     R2,GMDASD           GET STEP DASD COUNT\n         LA    R3,DEV3\n         BAL   R14,PCOUNT          CONVERT DASD COUNT\n         L     R2,DASDEXCP         GET STEP DASD EXCP COUNT\n         LA    R3,DEV4\n         BAL   R14,PCOUNT          CONVERT DASD EXCP COUNT\n         L     R2,DASDEXCP         GET STEP DASD EXCP COUNT\n         A     R2,TAPEEXCP         ADD STEP TAPE EXCP COUNT\n         LA    R3,DEV5\n         BAL   R14,PCOUNT          CONVERT TOTAL EXCP COUNT\n         CLC   EXCPS,=C'********'  BAD EXCP COUNT?\n         BNE   DEVPRT              IF OK, PRINT OUR ACCUMULATED COUNT\n         MVC   DEV2,EXCPS          OTHERWISE, LOAD ****'S\n         MVC   DEV4,EXCPS          OTHERWISE, LOAD ****'S\n         MVC   DEV5,EXCPS          OTHERWISE, LOAD ****'S\n         MVC   EXCPS,SPACES        AND CLEAR THEM OUT\nDEVPRT   BAL   R14,MSGRTN\n         B     EXIT\n         EJECT\n***********************************************************************\n*\n*        HANDLE JOB TERMINATION CONDITIONS\n*\n***********************************************************************\nJOBTERM  MVC   WTO1TXT,STEPMSG1    MOVE ' ' MSG OVLY TO MSG BUFFER\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,STEPMSG2    MOVE '*' MSG OVLY TO MSG BUFFER\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,JOBMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         BAL   R14,MSGRTN\n*\n* GET JOB CPU TIMES, CONVERT TO PRINT CHARACTERS, DISPLAY\n*\n         CLC   SMF30CON,=H'0'      IS THERE AN ACCOUNTING SECTION?\n         BE    TAPRTN              IF NOT, SKIP THIS PART\n         LR    R4,R9               POINT REGISTER TO SMF RECORD\n         A     R4,SMF30COF         AND THEN TO PROCESSOR ACCTNG SECTION\n         USING SMF30CAS,R4\n         MVC   WTO1TXT,CPUMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING CPUMSGS,R5\n         L     R1,SMF30CPT         GET JOB TCB TIME\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   CPU1,TIMEFLD+1\n         L     R1,SMF30CPS         GET JOB SRB TIME\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   CPU2,TIMEFLD+1\n         L     R1,SMF30CPT         GET JOB TCB TIME\n         A     R1,SMF30CPS         ADD JOB SRB TIME\n         BAL   R14,PCLOCK          CALL CLOCK CONVERTER\n         MVC   CPU3,TIMEFLD+1\n         MVC   JOBMIN,TIMEFLD      STORE MINUTES\n         OC    JOBMIN,ZEROS        INCLUDE LEADING ZEROS\n         MVC   JOBSEC,TIMEFLD+5    STORE SECONDS\n         OC    JOBSEC,ZEROS        INCLUDE LEADING ZEROS\n         BAL   R14,MSGRTN\n*\n* DISPLAY MAX TAPES\n*\nTAPRTN   MVC   WTO1TXT,TAPMSG      MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING TAPMSGS,R5\n         L     R2,GMTAPES          LOAD HIGHEST TAPE COUNT FOR JOB\n         LA    R3,TAP1\n         BAL   R14,PCOUNT\n         BAL   R14,MSGRTN\n         MVC   JOBTAPE,TAP1+7      INITIALIZE FOR CLASS RECOMMENDATION\n*\n* GET SYSOUT COUNT FROM JCT, DISPLAY TOTAL SYSOUT LINES\n*\n         MVC   WTO1TXT,SYSMSG          MOVE THE MSG OVLY TO MSG BUFFER\n         LA    R5,WTO1TXT\n         USING SYSMSGS,R5\n         L     R8,CVTPTR               LOAD ADDR OF CVT POINTER\n         L     R8,0(R8)                LOAD ADDR OF NEXT/CURR TCB'S\n         L     R8,OURTCB(R8)           LOAD ADDR OF OUT TCB\n         USING TCB,R8                  ESTABLISH ADDRESSABILITY - TCB\n         L     R8,TCBJSCB              LOAD ADDR OF JSCB\n         USING IEZJSCB,R8              ESTABLISH ADDRESSABILITY - JSCB\n         L     R8,JSCBSSIB             LOAD ADDR OF LIFE-OF-JOB SSIB\n         USING SSIB,R8                 ESTABLISH ADDRESSABILITY - SSIB\n         L     R8,SSIBSUSE             LOAD ADDR OF JES2 SJB\n         USING SJB,R8                  ESTABLISH ADDRESSABILITY - SJB\n         L     R8,SJBSJB               LOAD ADDR OF JOB STEP SJB\n         LTR   R8,R8                   IS THERE ONE?\n         BZ    GETACEE                 NO, FIND ACEE FOR THIS USER\n         L     R8,SJBJCT               LOAD ADDR OF JES2 JCT\n         USING JCT,R8                  ESTABLISH ADDRESSABILITY - JCT\n         L     R2,JCTLINES             GENERATED OUTPUT LINES\n         LA    R3,SYS1\n         BAL   R14,PCOUNT\n         BAL   R14,MSGRTN\n         MVC   JOBLINE,SYS1            STORE OUTPUT LINES\n         OC    JOBLINE,ZEROS           INCLUDE LEADING ZEROS\n*\n* FIND ACEE FOR THIS USER\n*\nGETACEE  L     R8,CVTPTR              LOAD ADDRESS OF CVT POINTER\n         L     R8,0(R8)               LOAD ADDRESS OF NEXT/CURR TCB'S\n         L     R8,12(R8)              LOAD ADDRESS OF ASCB\n         USING ASCB,R8\n         L     R8,ASCBASXB\n         USING ASXB,R8                ESTABLISH ADDRESSABILITY -\n         L     R8,ASXBSENV            LOAD ADDRESS OF\n         ST    R8,ACEEADDR            SAVE ACEEADDR\n*\n* WILL WE BE DOING RACF CHECKING FOR A CLASS RECOMMENDATION?\n*\n         CLC   BADEND,=C'Y'             BAD RETURN CODE?\n         BE    EXIT                     THEN NO MESSAGE\n*\n* GET RACF PRODUCTION AND PROGRAMMING CLASSES: PROG=OPQ;PROD=123456789;\n*\nRACF10   MVC   CLASLIST,HALF01          SET NUMBER OF RESOURCE CLASSES\n         MVI   CLASLEN,BYTE06           SET CLASS LENGTH\n         MVC   CLASCNST(8),SPACES       INITIALIZE\n         MVC   CLASCNST,CLASVAL1        SET RESOURCE NAME (CLASE)\n         MVC   CLASS,=C'S'                                      (S)\n         L     R6,ACEEADDR              POINTER TO ACEE\n*                                       STATIC INFO TO DYNAMIC FORM\n         MVC   RACLIST1(INITLEN1),INITDAT1\n*                                       BUILD IN-STORAGE PROFILES\n         RACROUTE CLASS=APPLNAM,LIST=CLASLIST,ENVIR=CREATE,ACEE=(R6),  +\n               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)\n         LTR   R15,R15                  SUCCESSFUL?\n         BZ    RACF20                   NO,MUST BE RACF PROBLEM\n         ABEND 11,DUMP\nRACF20   L     R6,ACEEADDR              POINTER TO ACEE ADDRESS\n         USING ACEE,R6                  ESTABLISH ADDRESSABILITY - ACEE\n         L     R6,ACEECLCP              LOAD ADDR OF IN-STORAGE PROFILE\n         USING RACRTE,R6                ESTABLISH ADDRESSABILITY - ISP\n         L     R6,RTETREE               LOAD ADDR OF RACRNE\n         USING RACRNE,R6                ESTABLISH ADDRESSABILITY-RACRNE\n         L     R6,RNEPROF               LOAD ADDR OF RACRPE\n         USING RACRPE,R6                ESTABLISH ADDRESSABILITY-RACRPE\n         LH    R7,RPEINSOF              OFFSET TO INSTALLATION DATA\n         AR    R6,R7                    POINT REG 6 AT IT\n         USING RPEINST,R6               ESTABLISH ADDRESSABILITY-RPEINS\n         ICM   R7,B'0001',RPEINSTL      GET THE LENGTH\n         LA    R6,1(R6)                 POINT PAST LENGTH TO DATA\nRACF30   CLC   0(4,R6),=CL4'GRP='       GROUP OF CLASSES?\n         BE    RACF40                   YES, GET THEM\nRACF35   LA    R6,1(R6)                 INCREMENT R6\n         BCT   R7,RACF30                CONTINUE PARSING\n         MVC   RACLASS,SPACES           CLEAR CLASS LIST\n         B     RACF70                   ALL CLASSES READ - GO ON\nRACF40   LA    R2,4(R6)                 POINT TO CLASS DATA\n         LA    R3,RACLASS               POINT TO CLASS LIST\n         LA    R5,10                    MAXIMUM COUNT OF CLASSES\n         MVC   RACLASS,SPACES           INIT CLASS LIST\nRACF55   CLC   0(1,R2),SEMICOLN         END OF THIS TYPE CLASS?\n         BE    RACF35                   YES, CONTINUE PARSING\n         CLC   0(1,R2),SPACES           END OF DATA?\n         BE    RACF35                   YES, CONTINUE PARSING\n         CLC   JOBCLASS,0(R2)           IS THIS OUR JOB CLASS?\n         BE    RACF70                   YES, DELETE IN-STORAGE PROFILE\n         MVC   0(1,R3),0(R2)            EXTRACT CLASS\n         LA    R2,1(R2)                 ADVANCE POINTER\n         LA    R3,1(R3)                 ADVANCE POINTER\n         BCT   R5,RACF55                CONTINUE EXTRACTING\n         B     RACF35                   CONTINUE PARSING\n*\n* DELETE IN-STORAGE PROFILE\n*\nRACF70   L     R7,ACEEADDR              POINTER TO ACEE\n*                                       STATIC INFO TO DYNAMIC FORM\n         MVC   RACLIST1(INITLEN1),INITDAT1\n*                                       BUILD IN-STORAGE PROFILES\n         RACROUTE CLASS=APPLNAM,ENVIR=DELETE,ACEE=(R7),                +\n               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)\n         LTR   R15,R15                  SUCCESSFUL?\n         BZ    RACF75                   YES, BEST CLASS PROCESSING\n         ABEND 12,DUMP                  NO, MUST BE RACF PROBLEM\n*\n* IS THIS JOB RUN IN A PRODUCTION OR PROGRAMMING CLASS?  NEITHER?\n*\nRACF75   CLC   RACLASS,SPACES           OUR CLASS MEMBER OF A GROUP?\n         BE    EXIT                     NO, SKIP CLASS CHECK\n         LA    R4,RACLASS               YES, POINT REGISTER TO LIST\nRACF90   BAL   R14,RACFRTN              CHECK CLASSES TO GET BEST CLASS\n*\n*   DECIDE WHETHER TO PRINT A CLASS RECOMMENDATION\n*\nBSTST    CLC   BSTCLAS,JOBCLASS         ALREADY USING BEST CLASS?\n         BE    EXIT                     THEN NO MESSAGE\n         MVC   WTO1TXT,RECMSG           OTHERWISE, SUGGEST BETTER\n         LA    R5,WTO1TXT\n         USING RECMSGS,R5\n         MVC   REC1,BSTCLAS\n         BAL   R14,MSGRTN\n         EJECT\n***********************************************************************\n*\n* CLEAN UP AND EXITS\n*\n***********************************************************************\nEXIT     MVC   WTO1TXT,STEPMSG2    MOVE '*' MSG OVLY TO MSG BUFFER\n         BAL   R14,MSGRTN\n         MVC   WTO1TXT,STEPMSG1    MOVE ' ' MSG OVLY TO MSG BUFFER\n         BAL   R14,MSGRTN\n         CLC   SMF30STP,R30STEP    STEP TERMINATION?\n         BE    EXITR               IF SO, DON'T DO FREEMAIN\n         L     R7,JMRADDR          RESTORE REGISTER\n         L     R13,4(13)\n         L     R1,JMRUCOM\n         MVC   JMRUCOM,=F'0'       CLEAR FOR POSSIBLE REQ\n         FREEMAIN R,LV=LTOTGM,A=(R1),SP=241\n         LM    R14,R12,12(R13)\n         SLR   R1,R1               ZERO RETURN CODE\n         SLR   R15,R15             HERE, TOO\n         BSM   0,R14               RETURN\nEXITR    L     R13,4(13)\nEXITO    DS    0H\n         LM    R14,R12,12(R13)\n         SLR   R1,R1               ZERO RETURN CODE\n         SLR   R15,R15             HERE, TOO\n         BSM   0,R14               RETURN\n         SPACE 2\n***********************************************************************\n*\n* WRITE MESSAGE TO SYSTEM MESSAGE DATASET\n*\n***********************************************************************\nMSGRTN   STM   R14,R1,SAVEAR2      SAVE A FEW REGISTERS\n         ST    R12,R12FORMS        SAVE R12\n         L     R1,R12FORYS         GET THE R12 ON ENTRY TO IEFACTRT\n         LA    R0,WTO1TXT          ADDRESS OF MESSAGE\n         ST    R0,36(R1)           SAVE INTO 'SYSTEM' AREA\n         MVC   42(2,R1),=AL2(114)  LENGTH SAVE INTO 'SYSTEM' AREA\n         L     R15,=V(IEFYS)       ENTRY TO IEFYS\n         LR    R12,R1              R12 PRIMED FOR YS\n         BALR  R14,R15             GO TO IEFYS\n         L     R12,R12FORMS        RESTORE R12\n         LM    R14,R1,SAVEAR2      RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*\n*  COUNT CONVERSION ROUTINE - CONVERTS BINARY TO CHARACTER OUTPUT\n*        R2 - VALUE TO BE CONVERTED\n*        R3 - ADDR OF FIELD WHERE EBCDIC CHARACTERS ARE TO BE PUT\n*\n***********************************************************************\nPCOUNT   CVD      R2,DWORD                     CONVERT COUNT TO DECIMAL\n         MVC      EDWORK,EDMASK                MOVE IN EDIT MASK\n         ED       EDWORK,DWORD+3               CONVERT TO CHARACTER\n         MVC      0(8,R3),EDWORK+2\n         BR       R14                          RETURN TO CALLER\n         EJECT\n***********************************************************************\n*\n*  CLOCK CONVERSION ROUTINE - CONVERTS BINARY TO CHARACTER OUTPUT\n*        R0 - WORK REGISTER\n*        R1 - VALUE TO BE CONVERTED\n*        R2 - WORK REGISTER\n*        R3 - WORK REGISTER\n*        TIMEFLD - WHERE EBCDIC CHARACTERS ARE TO BE PUT\n*\n***********************************************************************\nPCLOCK   SR    R0,R0               CLEAR REGISTER\n         L     R3,ZERODATE\n         L     R2,ZERODATE\n         MVC   TIMEFLD,TIMEMASK    MOVE IN COLONS AND DOT\n         STCM  R3,B'0011',WORKDDD1 SAVE THE ENDING DAYS\n         STCM  R2,B'0011',WORKDDD0 SAVE THE STARTING DAYS\n         SRL   R3,12               MOVE THE YEAR OVER\n         O     R3,=F'15'           OR IN THE PACKED SIGN NIBBLE\n         STCM  R3,B'0011',WORKYY1  SAVE THE ENDING YEAR\n         SRL   R2,12               MOVE THE YEAR OVER\n         O     R2,=F'15'           OR IN THE PACKED SIGN NIBBLE\n         STCM  R2,B'0011',WORKYY0  SAVE THE STARTING YEAR\n         SR    R1,R0               SUBTRACT THE RAW TIME\n         BNM   GTZERO1             THIS IS NOT A NEGATIVE NUMBER\n         A     R1,HR24             CARRY 24 HOURS\n         SP    WORKDDD1,=P'1'      SUBTRACT A DAY FOR THE CARRY\n         BNZ   GTZERO1             WE DID NOT SUBTRACT ONE FROM JAN 1\n         ZAP   WORKDDD1,=P'365'    CARRY A YEAR\n         SP    WORKYY1,=P'1'       SUBTRACT A YEAR FOR THE CARRY\n         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR?\n         BNZ   GTZERO1             NO IT WASN'T\n         AP    WORKDDD1,=P'1'      ADD ONE (366 DAYS IN A LEAP YEAR)\nGTZERO1  SP    WORKDDD1,WORKDDD0   SUBTRACT DAYS\n         BNM   GTZERO2             WAS NO NEGATIVE\n         AP    WORKDDD1,=P'365'    CARRY A YEAR\n         SP    WORKYY1,=P'1'       SUBTRACT A YEAR FOR CARRY\n         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR\n         BNZ   GTZERO2             NO\n         AP    WORKDDD1,=P'1'      ADD ONE (366 DAYS IN A LEAP YEAR)\nGTZERO2  SP    WORKYY1,WORKYY0     SUBTRACT THE YEARS\n         BZ    NOLEAPYR            NO YEAR ARITHMATIC\n         BP    YEARS               MAYBE MORE THAN ONE YEAR\n         MVC   TIMEFLD,=C'----:--.--' DENOTE A NEGATIVE NUMBER\n         B     PCLKEX              RETURN\nYEARS    CP    WORKYY1,=P'1'       WE CAN ONLY HANDLE ONE YEAR\n         BE    ADD365              ADD A YEAR OF DAYS\n         MVC   TIMEFLD,=C'****:**.**' DENOTE A LARGE NUMBER\n         B     PCLKEX              RETURN\nADD365   AP    WORKDDD1,=P'365'    CARR6 A YEAR\n         TM    WORKYY0+1,B'00110000' WAS THE YEAR A LEAP YEAR?\n         BNZ   NOLEAPYR            NOPE\n         AP    WORKDDD1,=P'1'      ADD A DAY FOR LEAP YEAR\nNOLEAPYR ZAP   DWORD,WORKDDD1      GET PREPARED TO CVB\n         CVB   R3,DWORD            GET DAYS IN REGISTER\n         M     R2,HR24             MULTIPLY BY 24 HRS\n         AR    R3,R1               ADD TIME FROM SUBTRACT\n         SR    R2,R2               CLEAR FOR DIVIDE\n         D     R2,HR1              DIVIDE BY HRS\n         MVC   PREHHHH(7),=XL7'40202020202021' MOVE IN EDIT FIELD\n         LR    R1,R3               SAVE HOURS\n         MH    R1,HALF60           HOURS --> MINUTES\n         LR    R3,R2               MOVE REMAINDER FOR DIVISION\n         SR    R2,R2               CLEAR FOR DIVIDE\n         D     R2,MIN1             DIVIDE BY MINUTES\n         AR    R3,R1               MINUTES-FROM-HOURS + MINUTES\n         CVD   R3,DWORD            CONVERT MINUTES TO PACKED\n         UNPK  MMMM,DWORD+6(2)     UNPACK\n         OI    MMMM+3,X'F0'        FIX THE SIGN\n         LR    R3,R2               MOVE REMAINDER FOR DIVISION\n         SR    R2,R2               CLEAR FOR DIVISION\n         D     R2,SEC1             DIVIDE BY SECONDS\n         CVD   R3,DWORD            CONVERT SECONDS TO PACKED\n         UNPK  SS,DWORD+6(2)       UNPACK\n         OI    SS+1,X'F0'          FIX THE SIGN\n         CVD   R2,DWORD            CONVERT REMAINDER PACKED\n         UNPK  TH,DWORD+6(2)       UNPACK\n         OI    TH+1,X'F0'          FIX THE SIGN\nPCLKEX   BR    R14                 RETURN\n         EJECT\n***********************************************************************\n*\n*  RACF ROUTINE - CHECK ALL POSSIBLE CLASSES (EITHER PRODUCTION OR\n*        PROGRAMMING) TO SEE WHETHER JOB WAS RUN IN THE BEST CLASS\n*        R2 - POINTER TO INSTALLATION DATA\n*        R3 - USED FOR MESSAGE HANDLING\n*        R4 - POINTER TO CLASS IN RACPROD LIST OR RACPROG LIST\n*        R5 - USED FOR MESSAGE HANDLING, POINTER TO BEST TIME FIELDS\n*        R6 - POINTER TO KEYWORDS IN INSTALLATION DATA\n*        R7 - ACEE ADDRESS, LENGTH OF INSTALLATION DATA\n*        R8 - 6: MAX LENGTH OF TIME DATA\n*        R9 - 10: COUNT OF POSSIBLE CLASSES\n*\n***********************************************************************\nRACFRTN  ST    R9,SMFADDR               STORE REGISTER\n         ST    R14,STORX3               STORE REGISTER\n         LA    R9,10                    INIT COUNT OF POSSIBLE CLASSES\n         MVC   CLASLIST,HALF01          SET NUMBER OF RESOURCE CLASSES\n         MVI   CLASLEN,BYTE06           SET CLASS LENGTH\n         MVC   CLASCNST(8),SPACES       INITIALIZE\n         MVC   CLASCNST,CLASVAL2        SET RESOURCE NAME\nRACF000  MVC   CLASS,0(R4)              SET JOB CLASS IN RESOURCE NAME\n         L     R6,ACEEADDR              POINTER TO ACEE ADDRESS\n*                                       STATIC INFO TO DYNAMIC FORM\n         MVC   RACLIST1(INITLEN1),INITDAT1\n*                                       BUILD IN-STORAGE PROFILES\n         RACROUTE CLASS=APPLNAM,LIST=CLASLIST,ENVIR=CREATE,ACEE=(R6),  +\n               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)\n         LTR   R15,R15                  SUCCESSFUL?\n         BZ    RACF010                  NO,MUST BE RACF PROBLEM\n         L     R6,ACEEADDR              POINTER TO ACEE\n*                                       STATIC INFO TO DYNAMIC FORM\n         MVC   RACLIST1(INITLEN1),INITDAT1\n*                                       DELETE IN-STORAGE PROFILES\n         RACROUTE CLASS=APPLNAM,ENVIR=DELETE,ACEE=(R6),                +\n               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)\n         ABEND 21,DUMP\nRACF010  L     R6,ACEEADDR              POINTER TO ACEE ADDRESS\n         USING ACEE,R6                  ESTABLISH ADDRESSABILITY - ACEE\n         L     R6,ACEECLCP              LOAD ADDR OF IN-STORAGE PROFILE\n         USING RACRTE,R6                ESTABLISH ADDRESSABILITY - ISP\n         L     R6,RTETREE               LOAD ADDR OF RACRNE\n         USING RACRNE,R6                ESTABLISH ADDRESSABILITY-RACRNE\n         L     R6,RNEPROF               LOAD ADDR OF RACRPE\n         USING RACRPE,R6                ESTABLISH ADDRESSABILITY-RACRPE\n         SLR   R7,R7                    CLEAR REGISTER\n         LH    R7,RPEINSOF              OFFSET TO INSTALLATION DATA\n         AR    R6,R7                    POINT REG 6 AT IT\n         USING RPEINST,R6               ESTABLISH ADDRESSABILITY-RPEINS\n         ICM   R7,B'0001',RPEINSTL      GET THE LENGTH OF INST DATA\n         S     R7,=F'5'                 LAST 5 CHARS WON'T BE 'XXXX='\n         LA    R6,1(R6)                 POINT PAST LENGTH TO DATA\n         MVC   RACTAPE,SPACES           INITIALIZE DEFAULT TAPES\n         MVC   RACTIME,SPACES           INITIALIZE DEFAULT TIME\n         MVC   RACLINE,SPACES           INITIALIZE DEFAULT LINES\nRACF020  CLC   0(5,R6),=CL5'TAPE='      DEFAULT TAPES FOR THIS CLASS?\n         BE    RACF040                  YES, EXTRACT NUMBER OF TAPES\n         CLC   0(5,R6),=CL5'TIME='      DEFAULT TIME FOR THIS CLASS?\n         BE    RACF050                  YES, EXTRACT CPU TIME\n         CLC   0(5,R6),=CL5'LINE='      DEFAULT LINES FOR THIS CLASS?\n         BE    RACF090                  YES, EXTRACT SYSOUT LINES\nRACF030  LA    R6,1(R6)                 POINT TO MORE DATA\n         BCT   R7,RACF020               MORE DATA? CONTINUE PARSING\n         B     RACF100                  DELETE IN-STORAGE PROFILE\nRACF040  MVC   RACTAPE,5(R6)            EXTRACT DEFAULT TAPES\n         B     RACF030                  CONTINUE PARSING\nRACF050  LA    R2,5(R6)                 POINT TO TIME DATA\n         LA    R3,RACTIME               POINT TO TIME DESTINATION\n         LA    R8,6                     MAXIMUM LENGTH OF TIME DATA\nRACF060  CLC   0(1,R2),SEMICOLN         END OF TIME DATA?\n         BE    RACF030                  YES, CONTINUE PARSING\n         CLC   0(1,R2),SPACES           END OF TIME DATA?\n         BE    RACF030                  YES, CONTINUE PARSING\n         CLC   0(1,R2),RPAREN           END OF TIME DATA?\n         BE    RACF030                  YES, CONTINUE PARSING\n         CLC   0(1,R2),LPAREN           BEGINNING OF TIME DATA?\n         BE    RACF070                  POINT TO NEXT CHARACTER\n         CLC   0(1,R2),COMMA            COMMA?\n         BE    RACF070                  POINT TO NEXT CHARACTER\n         B     RACF080                  GET FIRST VALUE\nRACF070  LA    R2,1(R2)                 POINT TO NEXT CHARACTER\n         B     RACF060\nRACF080  MVC   0(1,R3),0(R2)            EXTRACT TIME VALUE\n         LA    R2,1(R2)                 INCREMENT R2\n         LA    R3,1(R3)                 INCREMENT R3\n         BCT   R8,RACF060               CONTINUE EXTRACTING\n         B     RACF030                  CONTINUE PARSING\nRACF090  MVC   RACLINE,5(R6)            EXTRACT DEFAULT LINES\n         B     RACF030                  CONTINUE PARSING\n*\n* DELETE IN-STORAGE PROFILE\n*\nRACF100  L     R7,ACEEADDR              POINTER TO ACEE\n*                                       STATIC INFO TO DYNAMIC FORM\n         MVC   RACLIST1(INITLEN1),INITDAT1\n*                                       DELETE IN-STORAGE PROFILES\n         RACROUTE CLASS=APPLNAM,ENVIR=DELETE,ACEE=(R7),                +\n               REQUEST=LIST,WORKA=RACWK,SUBPOOL=230,MF=(E,RACLIST1)\n         LTR   R15,R15                  SUCCESSFUL?\n         BZ    RACF110                  NO,MUST BE RACF PROBLEM\n         ABEND 22,DUMP\n*\n* DETERMINE BEST CLASS, IF POSSIBLE\n*\nRACF110  CLC   RACTAPE,=C'X'            UNLIMITED TAPES FOR RACF CLASS?\n         BE    RACF120                  THEN COMPARE SYSOUT LINES\n         CLC   RACTAPE,JOBTAPE          WITHIN TAPE LIMITS OF CLASS?\n         BL    RACF140                  NO, TOO MANY; TRY NEXT CLASS\nRACF120  CLC   RACLINE,JOBLINE          WITHIN LINE LIMITS OF CLASS?\n         BL    RACF140                  NO, TOO MANY; TRY NEXT CLASS\n         CLC   RACMIN,JOBMIN            WITHIN TIME LIMITS OF CLASS?\n         BL    RACF140                  NO, TOO MUCH; TRY NEXT CLASS\n         BH    RACF130                  YES, BEST CLASS SO FAR\n         CLC   RACSEC,JOBSEC            WITHIN TIME LIMITS OF CLASS?\n         BL    RACF140                  NO, TOO MUCH\nRACF130  MVC   BSTCLAS,0(R4)            BEST CLASS SO FAR\n         B     RACFRTNX                 & NOT CHECKING ANY MORE\nRACF140  LA    R4,1(R4)                 NEXT CLASS\n         CLC   0(1,R4),SPACES\n         BE    RACFRTNX                 RETURN\n         BCT   R9,RACF000\n         B     RACFRTNX                 RETURN\nRACFRTNX L     R9,SMFADDR               RESTORE REGISTER\n         L     R14,STORX3               RESTORE REGISTER\n         BR    R14                      RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PROGRAM CONSTANTS                                                  *\n*                                                                     *\n***********************************************************************\nCONSTANT DS    0D\nAPPLNAM  DC    CL8'APPL'           CLASS NAME\nR30STEP  DC    H'4'                STEP TERMINATION\nR30JOB   DC    H'5'                JOB TERMINATION\nHR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS\nHR1      DC    A(60*60*100)        1 HR IN .01 SECONDS\nMIN1     DC    A(60*100)           1 MIN IN .01 SECONDS\nSEC1     DC    A(100)              1 SEC IN .01 SECONDS\nEDMASK   DC    XL10'40202020202020202120'\nTIMEMASK DC    CL10'MMMM:SS.TH'\nDATEMASK DC    CL8'MO/DD/YY'\nJES2     DC    CL4'JES2'\n         DS    0F\nZERODATE DC    PL4'0'\nHALF01   DC    H'1'\nHALF60   DC    H'60'\nCLASVAL1 DC    C'CLASE'\nCLASVAL2 DC    C'CLASS'\nSEMICOLN DC    C';'\nSPACES   DC    CL11' '\nZEROS    DC    8C'0'\nLPAREN   DC    C'('\nRPAREN   DC    C')'\nCOMMA    DC    C','\n         EJECT\n***********************************************************************\n*                                                                     *\n*  STATIC LIST FORMS OF RACLIST                                       *\n*                                                                     *\n***********************************************************************\nINITDAT1 RACROUTE REQUEST=LIST,MF=L  LIST FORM OF RACROUTE MACRO\nINITLEN1 EQU      *-INITDAT1\n         DS       0F\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PROGRAM MESSAGES                                                   *\n*                                                                     *\n***********************************************************************\nSTEPMSG  DS    0C\n         DC    C'IEFACTRT - STEP TOTALS:'\n         DC    CL(114-(*-STEPMSG))' '\nSTEPMSG1 DS    0C\n         DC    CL114' '\nSTEPMSG2 DS    0C\n         DC    114C'*'\nJOBMSG   DS    0C\n         DC    C'IEFACTRT - JOB TOTALS:'\n         DC    CL(114-(*-JOBMSG))' '\nIDMSG    DS    0C\n         DC    C'IEFACTRT - STEP: '\n         DC    C'        '\n         DC    C'  JOB: '\n         DC    C'        '\n         DC    C'  USERID: '\n         DC    C'        '\n         DC    C'  CURRENT CLASS: '\n         DC    C' '\n         DC    CL(114-(*-IDMSG))' '\nCPUMSG   DS    0C\n         DC    C'TIME UNDER TCB: '\n         DC    C'MMM:SS.HS'\n         DC    C'  '\n         DC    C'TIME UNDER SRB: '\n         DC    C'MMM:SS.HS'\n         DC    C'  '\n         DC    C'TOTAL CPU TIME: '\n         DC    C'MMM:SS.HS'\n         DC    C' '\n         DC    CL(114-(*-CPUMSG))' '\nPAGMSG   DS    0C\n         DC    C'PAGE-INS: '\n         DC    C'        '\n         DC    C' PAGE-OUTS: '\n         DC    C'        '\n         DC    C' VIO PAGE-INS: '\n         DC    C'        '\n         DC    C' VIO PAGE-OUTS: '\n         DC    C'        '\n         DC    C' AVG WRK SET SIZE: '\n         DC    C'        '\n         DC    C'K'\n         DC    CL(114-(*-PAGMSG))' '\nTAPMSG   DS    0C\n         DC    C'MAX TAPES/STEP: '\n         DC    C'        '\n         DC    CL(114-(*-TAPMSG))' '\nDEVMSG   DS    0C\n         DC    C'TAPES: '\n         DC    C'        '\n         DC    C'  EXCP''S: '\n         DC    C'        '\n         DC    C'  DASD: '\n         DC    C'        '\n         DC    C'  EXCP''S: '\n         DC    C'        '\n         DC    C'  TOTAL EXCP''S: '\n         DC    C'        '\n         DC    CL(114-(*-DEVMSG))' '\nSYSMSG   DS    0C\n         DC    C'TOTAL SYSOUT LINES: '\n         DC    C'        '\n         DC    CL(114-(*-SYSMSG))' '\nSWPMSG   DS    0C\n         DC    C'STEP SWAP SEQUENCES: '\n         DC    C'        '\n         DC    CL(114-(*-SWPMSG))' '\nSTGMSG   DS    0C\n         DC    C'REGION REQUESTED: '\n         DC    C'        '\n         DC    C'K'\n         DC    C'  AMOUNT USED, BELOW 16 MEG: '\n         DC    C'        '\n         DC    C'K'\n         DC    C'  AMOUNT USED, ABOVE 16 MEG: '\n         DC    C'        '\n         DC    C'K'\n         DC    CL(114-(*-STGMSG))' '\nRECMSG   DS    0C\n         DC    C'THIS JOB COULD HAVE BEEN RUN IN CLASS '\n         DC    C' '\n         DC    C'   (TENTATIVE RECOMMENDATION)'\n         DC    CL(114-(*-RECMSG))' '\nBSTMSG   DS    0C\n         DC    C'GOOD CHOICE OF JOB CLASS'\n         DC    CL(114-(*-BSTMSG))' '\n         EJECT\n***********************************************************************\n*                                                                     *\n*  WORKING STORAGE / SAVE AREA                                        *\n*                                                                     *\n***********************************************************************\nDATA     DSECT\nSAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY\n         ORG   SAVE\nSAVEXX   DS    F\nSAVEBK   DS    F\nSAVEFW   DS    F\nSAVER14  DS    F\nSAVER15  DS    F\nSAVER0   DS    F\nSAVER1   DS    F\n         DS    11F\nR12FORYS DS    F\nR12FORMS DS    F\nSTORX2   DS    F\nSTORX3   DS    F\n*\nDWORD    DS    D\nBADEND   DS    CL1\nEXCPS    DS    CL8\nJOBCLASS DS    CL1\n*\nSAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA\n*\nPARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE\nPARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA\nPARMSTEP DS    F                PTR TO STEPNAME FIELD\nPARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD\nPARMJOBC DS    F                PTR TO JOB CPU TIME FIELD\nPARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS\nPARMSTPC DS    F                PTR TO STEP CPU TIME FIELD\nPARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS\nPARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER\nPARMCOND DS    F                PTR TO CONDITION CODE FIELD\nPARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN\nLPARMS   EQU   *-PARMS\nEDWORK   DC    XL10'00'\nWORKDDD1 DS    PL2\nWORKYY1  DS    PL2\nWORKDDD0 DS    PL2\nWORKYY0  DS    PL2\n         DS    C                   SPACE FOR PAD CHARACTER\nMODDYY   DS    0CL8\nMO       DS    CL2\n         DS    C\nDD       DS    CL2\n         DS    C\nYY       DS    CL2\nJULIAN   DS    CL3\nDAY      DS    CL3\nPREHHHH  DS    CL3\nTIMEFLD  DS    0CL10\nMMMM     DS    CL4\n         DS    C\nSS       DS    CL2\n         DS    C\nTH       DS    CL2\n*\nSTCPUTCB DS    F                STEP CPU TIME UNDER TCB\n*\n         DS    0F\nJOBCPU   DS    0CL6             JOB CPU TIME\nJOBMIN   DS    C'    '          JOB CPU MINUTES\nJOBSEC   DS    C'  '            JOB CPU SECONDS\nJOBTAPE  DS    C' '             JOB TAPE NUMBER\nJOBLINE  DS    C'        '      JOB SYSOUT LINES\nBSTCLAS  DS    C' '             BEST CLASS TO RUN THIS JOB IN\nWTO1TXT  DS    CL114            MESSAGE TEXT\nGMDASD   DS    F                NUMBER DASD ALLOCATIONS/STEP\nGMTAPES  DS    F                HIGHEST # OF TAPES/STEP\nDASDEXCP DS    F                DASD EXCP COUNT/STEP\nTAPEEXCP DS    F                TAPE EXCP COUNT/STEP\nACEEADDR DS    F                ADDRESS OF ACEE\nJMRADDR  DS    F\nSMFADDR  DS    F\nCLASLIST DS    0F               JOBCLASS RESOURCE FOR RACLIST\n         DS    H                NUMBER OF NAMES IN LIST\nCLASLEN  DS    AL1              LENGTH OF RESOURCE NAME (6)\nCLASCNST DS    CL5              CONSTANT VALUE OF 'CLASS'\nCLASS    DS    CL1              JOB CLASS\n         DS    CL2\n         DS    0F\nRACWK    DS    CL512            RACROUTE WORK AREA\nRACLASS  DS    CL11' '          LIST OF RACF CLASSES\nRACTAPE  DS    CL1              DEFAULT TAPES FOR CLASS\nRACTIME  DS    0CL6             DEFAULT TIME FOR CLASS\nRACMIN   DS    CL4              MAX MINUTES FOR CLASS\nRACSEC   DS    CL2              MAX SECONDS FOR CLASS\nRACLINE  DS    CL8              DEFAULT LINES FOR CLASS\nRACLIST1 DS    CL(INITLEN1)     LIST FORM OF RACROUTE MACRO\nLTOTGM   EQU   *-DATA\n         EJECT\n***********************************************************************\n*                                                                     *\n*  MAPPING DSECTS                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nIDMSGS   DSECT\n         DC    C'IEFACTRT - STEP: '\nID1      DC    C'        '\n         DC    C'  JOB: '\nID2      DC    C'        '\n         DC    C'  USERID: '\nID3      DC    C'        '\n         DC    C'  CURRENT CLASS: '\nID4      DC    C' '\n         DC    67C' '\nIDMSGLEN EQU   *-IDMSGS\n         SPACE 2\nCPUMSGS  DSECT\n         DC    C'TIME UNDER TCB: '\nCPU1     DC    C'MMM:SS.HS'\n         DC    C'  '\n         DC    C'TIME UNDER SRB: '\nCPU2     DC    C'MMM:SS.HS'\n         DC    C'  '\n         DC    C'TOTAL CPU TIME: '\nCPU3     DC    C'MMM:SS.HS'\n         DC    C' '\nCPUMLEN  EQU   *-CPUMSGS\n         SPACE 2\nPAGMSGS  DSECT\n         DC    C'PAGE-INS: '\nPAG1     DC    C'        '\n         DC    C' PAGE-OUTS: '\nPAG2     DC    C'        '\n         DC    C' VIO PAGE-INS: '\nPAG3     DC    C'        '\n         DC    C' VIO PAGE-OUTS: '\nPAG4     DC    C'        '\n         DC    C' AVG WRK SET SIZE: '\nWSS      DC    C'        '\n         DC    C'K'\nPAGMLEN  EQU   *-PAGMSGS\n         SPACE 2\nTAPMSGS  DSECT\n         DC    C'MAX TAPES/STEP: '\nTAP1     DC    C'        '\nTAPMLEN  EQU   *-TAPMSGS\n         SPACE 2\nDEVMSGS  DSECT\n         DC    C'TAPES: '\nDEV1     DC    C'        '\n         DC    C'  EXCP''S: '\nDEV2     DC    C'        '\n         DC    C'  DASD: '\nDEV3     DC    C'        '\n         DC    C'  EXCP''S: '\nDEV4     DC    C'        '\n         DC    C'  TOTAL EXCP''S: '\nDEV5     DC    C'        '\nDEVMLEN  EQU   *-DEVMSGS\n         SPACE 2\nSYSMSGS  DSECT\n         DC    C'TOTAL SYSOUT LINES: '\nSYS1     DC    C'        '\nSYSMLEN  EQU   *-SYSMSGS\n         SPACE 2\nSWPMSGS  DSECT\n         DC    C'STEP SWAP SEQUENCES: '\nSWP1     DC    C'        '\nSWPMLEN  EQU   *-SWPMSGS\n         SPACE 2\nSTGMSGS  DSECT\n         DC    C'REGION REQUESTED: '\nSTG1     DC    C'        '\n         DC    C'K'\n         DC    C'  AMOUNT USED, BELOW 16 MEG: '\nSTG2     DC    C'        '\n         DC    C'K'\n         DC    C'  AMOUNT USED, ABOVE 16 MEG: '\nSTG3     DC    C'        '\n         DC    C'K'\n         SPACE 2\nRECMSGS  DSECT\n         DC    C'THIS JOB COULD HAVE BEEN RUN IN CLASS '\nREC1     DC    C' '\n         DC    C'   (TENTATIVE RECOMMENDATION)'\nRECMLEN  EQU   *-RECMSGS\n         EJECT\n         COPY     ICHPISP          DSECT FOR RACF IN-STORAGE PROFILE\n         IFASMFR 30                SMF TYPE 30 RECORD\n         IFGRPL\n         IEFJMR                    JMR MAPS COMMON PARAMETER AREA\n         IKJTSB LIST=YES,EXT=NO\n         IKJTCB\n         IKTTSBX\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         IEZJSCB\n         IEFJSSIB\n         $BUFFER\n         $SJB\n         $TQE\n         $JCT\n         CVT\n         END   IEFACTRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUJV": {"ttr": 8707, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\"\\x01\"\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 290, "newlines": 290, "modlines": 0, "user": "DELUXE"}, "text": "IEFUJV   CSECT                          SMF JOB VALIDATION EXIT\n         SAVE  (14,12)                  SAVE THE REGISTERS\n         LR    R12,R15                  ESTABLISH ADDRESSABILITY\n         USING IEFUJV,R12               TELL THE ASSEMBLER\n         LR    R3,R1                    SAVE POINTER TO ADDR LIST IN R3\n         GETMAIN R,LV=84,SP=241         GET SAVEAREA POINTED TO BY R1\n         ST    R13,4(R1)                STOR ADDRESS OF OLD SAVE IN NEW\n         ST    R1,8(R13)                STOR ADDRESS OF NEW SAVE IN OLD\n         LR    R13,R1                   R13 NOW POINTS TO NEW SAVEAREA\n         LM    R9,R11,0(R3)             LOAD REGISTERS AS FOLLOWS\n*                                       R9  ADDRESS OF CEPL\n*                                       R10 ADDRESS OF JCL IMAGE\n*                                       R11 ADDRESS OF JCL TYPE\n         STM   R9,R11,72(R13)           STORE PARAMETER POINTERS\n         USING GOTTEN,R13               TELL ASSEMBLER HOW TO\n         USING CEPLBEGN,R9              ADDRESS THESE AREAS\n         L     R6,ADDRJCLT              R6 POINTS TO JCL TYPE DESC AREA\n         CLI   0(R6),X'01'              IS IT A JOB CARD?\n         BE    JOBROUT                  GO CHECK ACCOUNTING FIELD\n         CLI   0(R6),X'02'              IS IT AN EXEC CARD?\n         BE    EXECROUT                 GO CHECK PROGRAM VALIDITY\n         CLI   0(R6),X'04'              IS IT AN DD CARD?\n         BE    DDROUT                   GO CHECK FOR JOB/STEP CAT\n         BNE   JOBOK                    NO GO TO JOBOK\n***********************************************************************\n*         BEGINNING OF JOB CARD CHECKING\n***********************************************************************\nJOBROUT  EQU   *\n         L     R1,ADDRJCL               REG1 POINTS TO COL 1 OF CARD\n         LA    R7,10(R1)                REG7 POINTS TO COL 11 OF CARD\n         LA    R1,2(R1)                 POINTS PAST THE '//'\n*\nCHEKTSO  EQU   *                        CHECK TO SEE IF TSO OR STC\n         CLC   70(3,R1),=C'JOB'         IS THIS A JOBS JOB CARD?\n         BE    CHEKSPC                  YES, CONTINUE TO PARSE\n         BNE   JOBOK                    NO, MUST BE TSO OR STC PASS IT\nCHEKSPC  EQU   *\n         CLI   0(R1),C' '               COMPARE TO SPACE\n         BE    CHEKJOB                  CHECK FOR JOB\n         CR    R1,R7                    COL 11 YET?\n         BE    JOBOK                    WILL END WITH JCL ERROR\n         LA    R1,1(R1)                 BUMP REG 1\n         B     CHEKSPC\n*\nCHEKJOB  L     R7,ADDRJCL               GET ADDR OF JOBCARD\n         LA    R7,67(R7)                R7 POINTS TO COL 68\nCHEKLOOP CLC   0(5,R1),=C' JOB '        CHECK FOR ' JOB ' IN CARD\n         BE    PASTJOB                  BRANCH TO ACCOUNT CHECK\n         LA    R1,1(R1)                 MOVE POINTER TO NEXT COL\n         CR    R1,R7                    END OF CARD?\n         BNL   JOBOK                    MUST BE CONTINUATION CARD\n         B     CHEKLOOP\n*\nPASTJOB  LA    R1,5(R1)                 POINT PAST 'JOB '\nCHEKACCT EQU   *                        CHECK FOR ACCT # ROUTINE\n         CLI   0(R1),C' '               IS IT A SPACE?\n         BNE   ACTCHEK                  MUST BE ACCT #\n         LA    R1,1(R1)                 MOVE POINTER TO NEXT COL\n         CR    R1,R7                    HOW MUCH SPACE IS LEFT?\n         BH    CANCEL                   ACCT MUST BE 4 CHARS\n         B     CHEKACCT                 TRY AGAIN\n*\nACTCHEK  EQU   *                        VERIFY ACCT #\n         CLI   0(R1),C'('               IS IT A '('?\n         BE    NEXTCHAR                 OR\n         CLI   0(R1),X'7D'              IS IT AN APOST?\n         BE    NEXTCHAR                 KEEP GOING OTHERWISE\n         B     CHEK1ST                  GO TO START OF ACCT #\nNEXTCHAR LA    R1,1(R1)                 BUMP PAST '(' OR APOST\n         CR    R1,R7                    HOW MUCH SPACE IS LEFT?\n         BH    CANCEL                   ACCT MUST BE 4 CHARS\n*******************************************************************\n*                                       WE NOW HAVE AT LEAST 4 CHARS\n*                                       REMAINING ON THE JOB CARD FOR\n*                                       THE ACCOUNT NO AND WE ARE FOR\n*                                       SURE PROCCESSING POSITIONAL\n*                                       PARAMETER NO 1 (ACCOUNT NO)\n*        RULES FOR ACCOUNT FIELD ON DELUXE JOBS:\n*        ACCOUNT FIELD IS FOUR CHARACTERS OF THE FORM \"ABCN\".\n*        A     MUST BE AN \"M\" \"P\" \"G\" OR \"E\"\n*        B     MUST BE ALPHABETIC\n*        C     MUST BE ALPHABETIC\n*        N     MUST BE NUMERIC\n*******************************************************************\nCHEK1ST  EQU   *                        VALID 1ST CHAR IS E,G,M OR P\n         CLI   0(R1),C'E'               IS IT E ?\n         BE    CHEK2ND                  YES. CHEK SECOND CHAR\n         CLI   0(R1),C'G'               IS IT G ?\n         BE    CHEK2ND                  YES. CHEK SECOND CHAR\n         CLI   0(R1),C'M'               IS IT M ?\n         BE    CHEK2ND                  YES. CHEK SECOND CHAR\n         CLI   0(R1),C'P'               IS IT P ?\n         BE    CHEK2ND                  YES. CHEK SECOND CHAR\n         B     CANCEL                   FIRST CHAR NO GOOD\nCHEK2ND  LA    R1,1(R1)                 BUMP TO SECOND CHAR.\n         BAL   6,ALPHROUT               GO TO ALPHROUT\nCHEK3RD  LA    R1,1(R1)                 BUMP TO THIRD CHAR.\n         BAL   R6,ALPHROUT              GO TO ALPHROUT\nCHEK4TH  LA    R1,1(R1)                 BUMP TO FOURTH\n         CLI   0(R1),X'F0'              COMPARE TO ZERO\n         BL    CANCEL                   LESS THAN ZERO\n         CLI   0(R1),X'F9'              COMPARE TO NINE\n         BH    CANCEL                   MORE THAN NINE\n         B     JOBOK\n*\nALPHROUT CLI   0(R1),X'C1'              COMPARE TO A\n         BL    CANCEL                   LESS THAN A ?\n         CLI   0(R1),X'C9'              GREATER THAN I ?\n         BH    ALPH2                    TRY AGAIN\n         BR    R6                       OK.\nALPH2    CLI   0(R1),X'D1'              COMPARE TO J\n         BL    CANCEL                   LESS THAN J ?\n         CLI   0(R1),X'D9'              GREATER THAN R ?\n         BH    ALPH3                    TRY AGAIN\n         BR    R6                       OK.\nALPH3    CLI   0(R1),X'E2'              COMPARE TO S\n         BL    CANCEL                   LESS THAN S ?\n         CLI   0(R1),X'E9'              GREATER THAN Z ?\n         BH    CANCEL                   NOT ALPHABETIC\n         BR    R6                       OK.\n***********************************************************************\n*         END OF JOB CARD CHECKING\n***********************************************************************\n***********************************************************************\n*         BEGINNING OF EXEC CARD CHECKING\n***********************************************************************\nEXECROUT EQU   *\n         CLI   CEPLUID+2,X'40'          USERID SPECIFIED?\n         BE    CANCEL                   NO, CANCEL JOB\nCLASCHK1 EQU   *                        SYSTEM PROGRAMMERS ONLY CLASS S\n         CLI   CEPLJCLS,C'S'            CLASS S JOB?\n         BE    CLASCHKS                 CONTINUE\n         CLI   CEPLJCLS,C'R'            CLASS R JOB?\n         BE    CLASCHKS                 CONTINUE\n         CLI   CEPLJCLS,C'I'            CLASS I JOB?\n         BE    CLASCHKI                 CONTINUE\n         CLI   CEPLJCLS,C'J'            CLASS J JOB?\n         BE    CLASCHKI                 CONTINUE\n         B     CLASCHKX\nCLASCHKS EQU   *\n         LA    R1,SYSPTABL\n         B     CLASCHK2\nCLASCHKI EQU   *\n         LA    R1,SPECTABL\n         B     CLASCHK2\nCLASCHK2 EQU   *                        LOOP THROUGH TABLE\n         CLI   0(R1),C' '               END OF TABLE\n         BE    CANCEL\n         CLC   0(6,R1),CEPLUID+2        IN THE TABLE\n         BE    CLASCHKX                 CONTINUE\n         LA    R1,6(R1)                 NEXT TABLE ENTRY\n         B     CLASCHK2                 LOOP\nCLASCHKX EQU   *\n         L     R1,ADDRJCL               R1 PTS TO COL 1 OF CARD\n         LA    R7,66(R1)                R7 PTS TO COL 67 OF CARD\n         LA    R1,8(R1)                 R1 PTS TO COL 9 OF CARD\nEXECLOOP LR    R4,R7                    R4 HAS ADDRESS OF COL 67\n         SR    R4,R1                    R4 HAS NO OF COLS TO WORK WITH\n         EX    R4,TRTINST               EXEC TRT, R4 HAS LENGTH\n         BZ    JOBOK                    'P' NOT FOUND IN CARD\n         CLC   0(4,R1),=C'PGM='         R1 PTS TO LAST BYTE TRANSLATED\n         BE    CHECKPGM                 GO CHECK PROGRAM NAME\n         CR    R7,R1                    HOW MANY COLS HAVE BEEN TRTD?\n         BE    JOBOK                    ALL OF THEM GET OUT\n         LA    R1,1(R1)                 R1 POINTS TO NEXT COL RIGHT\n         B     EXECLOOP                 TRY AGAIN\nCHECKPGM EQU   *                        PROGRAM VALIDATION ROUTINE\n         CLC   4(3,R1),FATS             TRYING TO EXEC FATS OR FATAR?\n         BE    CHKAUTH0                 YES\n         CLC   7(3,R1),SMP              TRYING TO EXEC SMP?\n         BE    CHKAUTH1                 YES\n         CLC   4(8,R1),IOCP             TRYING TO EXEC IOCP?\n         BE    CHKAUTH1                 YES\n         CLC   4(6,R1),DSF              TRYING TO EXEC ICKDSF?\n         BE    CHKAUTH1                 YES\n         CLC   5(7,R1),SPZAP            TRYING TO EXEC SUPERZAP?\n         BE    CHKAUTH1                 YES\n         B     JOBOK                    NOT EXECUTING PROTECTED PGM\nCHKAUTH0 EQU   *\n         CLC   CEPLUID+2(6),=CL6'T56736' IS IT DASDMGMT\n         BE    JOBOK\n         B     CHKAUTH1\nCHKAUTH1 EQU   *\n         LA    R1,SPECTABL\nAUTH1    EQU   *                        LOOP THROUGH TABLE\n         CLI   0(R1),C' '               END OF TABLE?\n         BE    CANCEL                   IF SO, CANCEL\n         CLC   0(6,R1),CEPLUID+2        MATCH TABLE?\n         BE    JOBOK                    IF SO, GO AHEAD\n         LA    R1,6(R1)                 NEXT ENTRY\n         B     AUTH1                    LOOP\n***********************************************************************\n*         END OF EXEC CARD CHECKING\n***********************************************************************\n***********************************************************************\n*         BEGINNING OF DD CARD CHECKING\n***********************************************************************\nDDROUT   EQU   *\n         L     R1,ADDRJCL               REG1 POINTS TO COL 1 OF CARD\n         LA    R1,2(R1)                 POINTS PAST THE '//'\n         CLC   0(8,R1),=C'STEPCAT '     IS IT A STEPCAT\n         BE    CHKAUTH1                 YES\n         CLC   0(7,R1),=C'JOBCAT '      IS IT A JOBCAT\n         BE    CHKAUTH1                 YES\n         B     JOBOK\n***********************************************************************\n*         END OF DD CARD CHECKING\n***********************************************************************\nCANCEL   EQU   *\n         L     R1,ADDRJCL               R1 NOW HAS ADDR OF JCL IMAGE\n         MVC   8(31,R1),CANCLMSG        OVERLAY PART OF JCL IMAGE\n*                                       WITH CANCEL MESSAGE\n         LR    R1,R13                   R1 NOW HAS ADDR OF GOTTEN AREA\n         L     R13,4(R13)               R13 PTS TO PREVIOUS SAVEAREA\n         FREEMAIN R,LV=84,A=(R1),SP=241 FREE UP GOTTEN AREA\n         RETURN (14,12),RC=4            RESTORE REGS AND CANCEL JOB\nJOBOK    EQU    *\n         LR     R1,R13                  R1 NOW HAS ADDR OF GOTTEN AREA\n         L      R13,4(R13)              R13 PTS TO PREVIOUS SAVEAREA\n         FREEMAIN R,LV=84,A=(R1),SP=241 FREE UP GOTTEN AREA\n         RETURN (14,12),RC=0            RESTORE REGS AND LET JOB RUN\nTRTINST  TRT    0(0,R1),TRANTBL         TRT INST IS USED VIA EX INST\n********************** CONSTANTS *************************************\nTRANTBL  DS    0CL256                   TRANSLATE TABLE\n         DC    215X'00'\nLETTERP  DC    X'D7'                    THIS BYTE REPRESENTS A 'P'\n         DC    40X'00'                  FILL OUT TABLE\nSMP      DC    CL3'SMP'                 SYSTEM MODIFICATION PROGRAM\nFATS     DC    CL3'FAT'                 FATS OR FATAR\nIOCP     DC    CL8'ICPIOCP '            IOCP\nDSF      DC    CL6'ICKDSF'              ICKDSF\nSPZAP    DC    CL7'MASPZAP'             SUPER ZAP PROGRAM\nCANCLMSG DC    CL31' CANCELED BY INSTALLATION EXIT '  CANCEL MESSAGE\nSYSPTABL DC    CL6'T04108'   STOECKL    SYSTEM PROGRAMMERS USERIDS\n         DC    CL6'T23661'   LITTLE     FOR CLASS S CHECK\n         DC    CL6'T40839'   VERPLAETSE\nSPECTABL DC    CL6'T27611'   LOOS        FROM HERE FOR SMP, ETC.\n         DC    CL6'T53007'   REICHERT\n         DC    CL6'T53031'   KUNTZ\n         DC    CL6'T53039'   TRETTER\n         DC    CL6'T53043'   HAGSTROM\n         DC    CL6'T53090'   WICKSTROM\n         DC    CL6'T56714'   COUTURE\n         DC    CL6'T60439'   ANDERSON\n         DC    CL6'T68839'   SPATAFORE\n         DC    CL6'T68878'   HOLLINGSWORTH\n         DC    CL6'T79157'   CARLSON\n         DC    CL6'ABRJOB'\n         DC    CL6'CADJOB'\n         DC    CL6'SYSJOB'\n         DC    CL6'TPCJOB'\n         DC    CL6'      '   END OF TABLE\n         EQUATE\nGOTTEN   DSECT\nSAVEAREA DS    18F                      18 FULLWORD SAVEAREA\nADDRCEPL DS    F                        ADDRESS OF THE COMMON EXIT\n*                                       PARAMETER AREA\nADDRJCL  DS    F                        ADDRESS OF THE JCL IMAGE\nADDRJCLT DS    F                        ADDRESS OF ONE BYTE AREA\n*                                       INDICATING THE TYPE OF JCL\n*                                       STATEMENT BEING PROCESSED\n*                                       IN BINARY VALUES AS FOLLOWS:\n*                                       0  - NULL STATEMENT\n*                                       1  - JOB  STATEMENT\n*                                       2  - EXEC STATEMENT\n*                                       4  - DD   STATEMENT\n*                                       8  - PROC STATEMENT\n*                                       16 - ALL JCL CONVERTED\n*                                       32 - ALL JCL INTERPRETED AND\n*                                            AND PASSED TO EXIT IEFUJV\nCEPLBEGN DSECT                          COMMON EXIT PARAMETER AREA\nCEPLJOBN DS    CL8                      JOB NAME\nCEPLTIME DS    BL4                      TIME IN HUNDREDTHS OF A SECOND\n*                                       READER RECOGNIZED THE JOB CARD\n*                                       FOR THIS JOB\nCEPLDATE DS    PL4                      DATE READER RECOGNIZED THE JOB\n*                                       CARD FOR THIS JOB IN THE FORM:\n*                                       00YYDDDF - WHERE F IS THE SIGN\nCEPLSID  DS    CL4                      SYSTEM IDENTIFICATION\nCEPLUID  DS    CL8                      USER ID FIELD\n*                                       FOR DELUXES USE THIS FIELD IS\n*                                       BROKEN DOWN AS FOLLOWS\n*                                       BL2        ROUTE CODE\n*                                       CL6        USERID\nCEPLSTEP DS    BL1                      STEP NUMBER BEING PROCESSED\nCEPLSMFO DS    BL1                      SMF OPTIONS USED INDICATOR\nCEPLREST DS    BL1                      RESTART INDICATOR\nCEPLJCLS DS    CL1                      JOB CLASS\nCEPLUCOM DS    CL4                      USER COMMUNICATION FIELD\n         END   IEFUJV\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFUSI": {"ttr": 8713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x82\\x01\\x82\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 386, "newlines": 386, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'IEFUSI - SMF STEP INITIATION EXIT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFUSI                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME = SMF STEP INITIATION EXIT             *\n*                                                                     *\n*             FUNCTION =                                              *\n*                EXIT ALLOWS INSTALLATION TO INCREASE JOB STEP        *\n*                REGION SIZE TO A 4096K MINIMUM IF NEEDED. ALSO,      *\n*                A TABLE SCAN WILL BE PERFORMED TO KEEP '3090 -       *\n*                ONLY' LICENCED PROGRAMS FROM RUNNING ON THE 3081.    *\n*                A RACHECK WILL BE PERFORMED TO KEEP UN-AUTHORIZED    *\n*                USERS FROM EXECUTING AUTHORIZED PROGRAMS.            *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *\n*                   GETMAIN WORKAREA                                  *\n*                   SCAN 'PGMAUTH' TABLE FOR MATCH                    *\n*                       IF FOUND, RACHECK FOR APPL OF PGMAUTH         *\n*                       IF RC = 0, CONTINUE. OTHERWISE CANCEL         *\n*                   SCAN 'PGM3090' TABLE FOR MATCH                    *\n*                       IF FOUND, CHECK FOR SYSID OF ADM2.            *\n*                       SYSID = ADM2, CONTINUE. OTHERWISE CANCEL      *\n*                   IF REGION SIZE IS LESS THAN 4096K, SET REGION     *\n*                       SIZE TO 4096K                                 *\n*                   FREEMAIN WORKAREA                                 *\n*                   RESTORE REGISTERS                                 *\n*                   EXIT                                              *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  0       = NOT USED                     *\n*                    REGISTER  1       = PARAMETER LIST POINTER       *\n*                    REGISTERS 2 - 5   = NOT USED                     *\n*                    REGISTERS 6       = WORK REG / ADDR OF 'PGMNAME' *\n*                    REGISTERS 7       = ADDRESS OF 'SYSID'           *\n*                    REGISTER  8       = PARM LIST ADDRESSABILITY     *\n*                    REGISTERS 9 - 11  = NOT USED                     *\n*                    REGISTER  12      = BASE REGISTER                *\n*                    REGISTER  13      = SAVE AREA POINTER            *\n*                    REGISTER  14      = RETURN                       *\n*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *\n*                                        RETURN CODE REGISTER         *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, RETURN, EQUATE, RACCHECK,                      *\n*                GETMAIN, FREEMAIN                                    *\n*                                                                     *\n*             MAPPING MACROS USED =                                   *\n*                CVT, IEESMCA                                         *\n*                                                                     *\n*             ASSEMBLER OPTIONS = LIST,RENT                           *\n*                                                                     *\n*             LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,REFR   *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                08/01/85  WRITTEN.                             JWC.  *\n*                                                                     *\n*                01/19/87  ADD RACLIST/FRACHECK FOR PROGRAMS WHICH    *\n*                          CAN ONLY RUN ON THE 3090.            JWC.  *\n*                                                                     *\n*                07/09/87  REMOVE RACLIST/FRACHECK. ADD PGMAUTH AND   *\n*                          PGM3090 TABLES AND RACHECK.          JWC.  *\n*                                                                     *\n*                09/04/87  ADDED CHECK FOR REGION=0 AND IF TRUE       *\n*                          ALLOW ALLOCATION OF LIMIT VALUES.    MJL.  *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nIEFUSI   CSECT                         SMF STEP INITIATION EXIT\n         SAVE  (14,12),,IEFUSI_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 R12 - BASE REGISTER\n         USING IEFUSI,R12              ESTABLISH ADDRESSABILITY\n         LR    R8,R1                   PRESERVE PTR TO PARMS\n         USING SIPLBEGN,R8             ESTABLISH ADDRESSABILITY TO\n*                                      INPUT PARAMETER LIST DSECT\n         GETMAIN R,LV=WORKLEN\n*                                      GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n*                                      IN CURRENT SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  R13 - ADDRESS OF GETMAINED AREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*        PERFORM RACHECK FOR AUTHORIZED PROGRAMS\n***********************************************************************\nRACF     DS    0H\n         L     R2,SIPLPGM              ADDRESS OF PROGRAM NAME\n         LA    R3,PGMAUTH              ADDRESS TABLE OF AUTHORIZED PGMS\n         SLR   R4,R4                   CLEAR REG 4\nRACF10   DS    0H\n         CLC   SPACES,0(R3)            END OF TABLE?\n         BE    SYSID                   YES, CHECK FOR CORRECT CPU\n         IC    R4,8(R3)                GET LENGTH OF PGM\n         EX    R4,CLCPGM               AUTHORIZED PROGRAM?\n         BE    RACF20                  YES, CHECK AUTHORITY\n         LA    R3,9(R3)                POINT TO NEXT AUTHORIZED PGM\n         B     RACF10                  CONTINUE CHECKING\nRACF20   DS    0H\n         MVC   RACDYN,RACSTAT          MOVE DYNAMIC TO STATIC\n         RACHECK ENTITY=PGMAPPL,CLASS=APPL,                            +\n               MF=(E,RACDYN)\n         LTR   R15,R15                 USER AUTHORIZED?\n         BNZ   CANJOB10                NO, CANCEL JOB / ISSUE MESSAGE\n         B     SYSID                   YES, CHECK FOR CORRECT CPU\n***********************************************************************\n*        OBTAIN SYSTEM ID AND CHECK FOR 3090 PROGRAMS\n***********************************************************************\nSYSID    DS    0H\n         L     R6,CVTPTR               R6 - ADDRESS OF CVT\n         USING CVT,R6                  ESTABLISH ADDRESSABLITY TO CVT\n         L     R7,CVTSMCA              R7 - ADDRESS OF SMCA\n         USING SMCABASE,R7             ESTABLISH ADDRESSABLITY TO SMCA\n         L     R2,SIPLPGM              ADDRESS OF PROGRAM NAME\n         LA    R3,PGM3090              ADDRESS TABLE OF 3090 PGMS\n         SLR   R4,R4                   CLEAR REG 4\nSYSID10  DS    0H\n         CLC   SPACES,0(R3)            END OF TABLE?\n         BE    CHKREGN                 YES, CHECK REGION SIZE\n         IC    R4,8(R3)                GET LENGTH OF PGM\n         EX    R4,CLCPGM               3090 PROGRAM?\n         BE    SYSID20                 YES, CHECK FOR CORRECT SYSID\n         LA    R3,9(R3)                POINT TO NEXT 3090 PGM\n         B     SYSID10                 CONTINUE CHECKING\nSYSID20  DS    0H\n         CLC   ADM2,SMCASID            IS THIS THE CORRECT CPU?\n         BNE   CANJOB00                NO, ISSUE MESSAGE AND RETURN\n         B     CHKREGN                 CHECK REGION SIZE\nCLCPGM   CLC   0(0,R3),0(R2)           PROGRAM FOUND?\n***********************************************************************\n*        REGION SIZE CHECKING\n***********************************************************************\nCHKREGN  DS    0H\n         L     R4,SIPLVSM              R4 - ADDRESS OF VSM PARM LIST\n         USING VSPLBEGN,R4             ESTABLISH ADDRESSABILITY TO\n*                                      VSM PARAMETER LIST DSECT\n         CLC   VSPLREGR,ZEROMEG        REGION SIZE REQUESTED = 0?\n         BNE   REGNCONT                NO, PERFORM RACF PROCESSING\n         OI    VSPLFLAG,X'80'          TURN ON BIT 0 TO INDICATE THAT\n*                                      IEFUSI HAS SET REGION VALUES\n         B     FINISH                  WE'RE DONE\n*\nREGNCONT EQU   *\n         CLC   VSPLREGR,FOURMEG        REGION SIZE REQUESTED < 4096K?\n         BNL   FINISH                  NO, PERFORM RACF PROCESSING\n         OI    VSPLFLAG,X'80'          TURN ON BIT 0 TO INDICATE THAT\n*                                      IEFUSI HAS SET REGION VALUES\n         MVC   VSPLREGR,FOURMEG        SET REG SIZE REQUESTED TO 4096K\n         MVC   VSPLGETB,FOURMEG        SET GETMAIN LIMIT BELOW 16 MEG\n         MVC   VSPLREGB,FOURMEG        SET REGION LIMIT BELOW 16 MEG\n         B     FINISH                  WE'RE DONE\n***********************************************************************\n*        PROCESSING SHOULD BE CANCELED\n***********************************************************************\nCANJOB00 DS    0H\n         WTO   'JOB CANCELED BY SMF EXIT - IEFUSI. THIS PROGRAM MUST BE+\n                RUN ON THE 3090 CPU',ROUTCDE=(11)\n         LA    R15,4                   SET REG15 (RETURN CODE) TO X'04'\n         B     FINISH                  WE'RE DONE\nCANJOB10 DS    0H\n         WTO   'JOB CANCELED BY SMF EXIT - IEFUSI. USER NOT AUTHORIZED +\n               TO EXECUTE THIS PROGRAM',ROUTCDE=(11)\n         LA    R15,4                   SET REG15 (RETURN CODE) TO X'04'\n         B     FINISH                  WE'RE DONE\n***********************************************************************\n*        WRAP THINGS UP AND RETURN\n***********************************************************************\nFINISH   DS    0H\n         LR    R4,R15                  R4 - SAVE RETURN CODE\n         LR    R7,R13                  R7 - ADDRESS OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN R,LV=WORKLEN,A=(R7)\n*                                      FREEMAIN DYNAMIC STORAGE\n         LR    R15,R4                  R15 - RESTORE RETURN CODE\n         RETURN (14,12),,RC=(15)       RETURN\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nHALF01   DC    H'01'                   HALFWORD CONSTANT, VALUE X'01'\nFULL08   DC    F'08'                   FULLWORD CONSTANT, VALUE X'08'\nSPACES   DC    CL8' '                  END-OF-TABLE\nADM2     DC    CL4'ADM2'               SYSID\nFOURMEG  DC    A(4096*1024)            FOUR MEG REGION SIZE\nZEROMEG  DC    A(0)                    REGION=ZERO REQUESTED\nAPPL     DS    0F\n         DC    AL1(4)                  LENGTH OF CLASS NAME\n         DC    CL4'APPL'               CLASS NAME\nPGMAPPL  DC    CL8'PGMAUTH'            APPL NAME\n***********************************************************************\n*        PROGRAMS PROTECTED FROM GENERAL USE\n***********************************************************************\nPGMAUTH  DS    0F\n         DC    CL8'FATS',AL1(3)\n         DC    CL8'FATAR',AL1(4)\n         DC    CL8'GIMSMP',AL1(5)\n         DC    CL8'ICPIOCP',AL1(6)\n         DC    CL8'IOPIOCP',AL1(6)\n         DC    CL8'ICKDSF',AL1(5)\n         DC    CL8'AMASPZAP',AL1(7)\n         DC    CL8'IMASPZAP',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n         DC    CL8'        ',AL1(7)\n***********************************************************************\n*        PROGRAMS FOR THE 3090 ONLY\n***********************************************************************\nPGM3090  DS    0F\n         DC    CL8'EMG',AL1(2)\n         DC    CL8'DFS',AL1(2)\n         DC    CL8'DSQ',AL1(2)\n         DC    CL8'DSN',AL1(2)\n         DC    CL8'ACCPREJB',AL1(7)\n         DC    CL8'ADDSCPID',AL1(7)\n         DC    CL8'ATTRHELP',AL1(7)\n         DC    CL8'ATTRTABL',AL1(7)\n         DC    CL8'ATTRTBLE',AL1(7)\n         DC    CL8'BATCHPLT',AL1(7)\n         DC    CL8'BLDNDX',AL1(5)\n         DC    CL8'BLDTIER',AL1(6)\n         DC    CL8'BUFFPLOT',AL1(7)\n         DC    CL8'CADCD',AL1(4)\n         DC    CL8'CADCHR',AL1(5)\n         DC    CL8'CADCHRB',AL1(6)\n         DC    CL8'CADCHRBL',AL1(7)\n         DC    CL8'CADCHRHI',AL1(7)\n         DC    CL8'CADCHRLO',AL1(7)\n         DC    CL8'CADCLRTB',AL1(7)\n         DC    CL8'CADDIMST',AL1(7)\n         DC    CL8'CADET',AL1(4)\n         DC    CL8'CADFMTBC',AL1(7)\n         DC    CL8'CADICTON',AL1(7)\n         DC    CL8'CADMACGM',AL1(7)\n         DC    CL8'CADPARMC',AL1(7)\n         DC    CL8'CADPLGEN',AL1(7)\n         DC    CL8'CADSEL',AL1(5)\n         DC    CL8'CADSELB',AL1(6)\n         DC    CL8'CADSTAT1',AL1(7)\n         DC    CL8'CADSTAT2',AL1(7)\n         DC    CL8'CADSYMTB',AL1(7)\n         DC    CL8'CADTCF00',AL1(7)\n         DC    CL8'CMSCADIN',AL1(7)\n         DC    CL8'CREATEMP',AL1(7)\n         DC    CL8'DATADINT',AL1(7)\n         DC    CL8'DBMSGP01',AL1(7)\n         DC    CL8'DBMSGP02',AL1(7)\n         DC    CL8'DBMWALL1',AL1(7)\n         DC    CL8'DBMWALL2',AL1(7)\n         DC    CL8'DMMONCMS',AL1(7)\n         DC    CL8'DMMONTSO',AL1(7)\n         DC    CL8'DRAWINIT',AL1(7)\n         DC    CL8'DRAWRBLD',AL1(7)\n         DC    CL8'FLGREL',AL1(5)\n         DC    CL8'IHOSTAE',AL1(6)\n         DC    CL8'IMAGER',AL1(5)\n         DC    CL8'IMAGEZAP',AL1(7)\n         DC    CL8'INTSEC',AL1(5)\n         DC    CL8'NEWPLOTA',AL1(7)\n         DC    CL8'NUPLTREC',AL1(7)\n         DC    CL8'NURESTOR',AL1(7)\n         DC    CL8'PLOTSORT',AL1(7)\n         DC    CL8'PLTINDX',AL1(6)\n         DC    CL8'PRNTPLOT',AL1(7)\n         DC    CL8'PRSPEC',AL1(5)\n         DC    CL8'SCLIB',AL1(4)\n         DC    CL8'TAPEALOC',AL1(7)\n         DC    CL8'TRNFRMB',AL1(6)\n         DC    CL8'UTILITY',AL1(6)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n         DC    CL8'       ',AL1(7)\n***********************************************************************\n*        INITIATIALIZATION DATA FOR PORTION OF GETMAIN'D AREA\n***********************************************************************\nRACSTAT  RACHECK MF=L                  STATIC VERSION RACHECK LIST FORM\nRACLEN   EQU   *-RACSTAT               LENGTH OF STATIC VERSION\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\n***********************************************************************\n*        IEFUSI INPUT PARAMETER LIST\n***********************************************************************\nSIPLBEGN DSECT\nSIPLCEPL DS    F                       ADDR - COMMON SMF EXIT PARM ADDR\nSIPLSTEP DS    F                       ADDR - 8 BYTE JOB STEP NAME\nSIPLPGM  DS    F                       ADDR - 8 BYTE PROGRAM NAME\nSIPLACCT DS    F                       ADDR - JOB STEP ACCTING INFO\nSIPLVSM  DS    F                       ADDR - VSM PARAMETER LIST\nSIPLSRM  DS    F                       ADDR - PERFORMANCE GROUP NUMBER\n*                                             AND V=R FLAG\n***********************************************************************\n*        VSM PARAMETER LIST\n***********************************************************************\nVSPLBEGN DSECT\nVSPLFLAG DS    F                       VSM FLAG WORD CONTAINS:\n*\n*              BIT 0  ---------------  ON - IEFUSI SET REGION VALUES\n*                                      OFF - REGION VALUES NOT SET\n*              BIT 1  ---------------  ON - VSM NOT TO CHECK FOR AVAIL-\n*                                           ABILITY OF REQUESTED FREE\n*                                           SPACE BELOW 16 MEG LINE\n*                                      OFF - VSM IS TO CHECK FOR AVAIL-\n*                                           ABILITY OF REQUESTED FREE\n*                                           SPACE BELOW 16 MEG LINE\n*              BIT 2  ---------------  ON - VSM NOT TO CHECK FOR AVAIL-\n*                                           ABILITY OF REQUESTED FREE\n*                                           SPACE ABOVE 16 MEG LINE\n*                                      OFF - VSM IS TO CHECK FOR AVAIL-\n*                                           ABILITY OF REQUESTED FREE\n*                                           SPACE ABOVE 16 MEG LINE\n*              BITS 3-31  -----------  RESERVED\n*\nVSPLREGR DS    F                       REGION SIZE REQUESTED\n*\n*                                      ON ENTRY TO IEFUSI THE FOLLOWING\n*                                      4 WORDS ARE SET TO X'FFFFFFFF'\n*\nVSPLGETB DS    F                       GETMAIN LIMIT VALUE BELOW 16 MEG\nVSPLREGB DS    F                       REGION SIZE BELOW 16 MEG\nVSPLGETA DS    F                       GETMAIN LIMIT VALUE ABOVE 16 MEG\nVSPLREGA DS    F                       REGION SIZE ABOVE 16 MEG\n***********************************************************************\n*        COMMON SMF PARAMETER LIST\n***********************************************************************\nCEPLBEGN DSECT                         COMMON EXIT PARAMETER AREA\nCEPLJOBN DS    CL8                     JOB NAME\nCEPLTIME DS    BL4                     TIME IN HUNDREDTHS OF A SECOND\n*                                      READER RECOGNIZED THE JOB CARD\n*                                      FOR THIS JOB\nCEPLDATE DS    PL4                     DATE READER RECOGNIZED THE JOB\n*                                      CARD FOR THIS JOB IN THE FORM:\n*                                      00YYDDDF - WHERE F IS THE SIGN\nCEPLSID  DS    CL4                     SYSTEM IDENTIFICATION\nCEPLUID  DS    CL8                     USER ID FIELD\n*                                      FOR DELUXES USE THIS FIELD IS\n*                                      BROKEN DOWN AS FOLLOWS\n*                                      BL2        ROUTE CODE\n*                                      CL6        USERID\nCEPLSTEP DS    BL1                     STEP NUMBER BEING PROCESSED\nCEPLSMFO DS    BL1                     SMF OPTIONS USED INDICATOR\nCEPLREST DS    BL1                     RESTART INDICATOR\nCEPLJCLS DS    CL1                     JOB CLASS\nCEPLUCOM DS    CL4                     USER COMMUNICATION FIELD\n***********************************************************************\n*        DSECT FOR COMMUNICATIONS VECTOR TABLE\n***********************************************************************\n         CVT DSECT=YES\nIEFUSI   CSECT\n***********************************************************************\n*        DSECT FOR SMF CONTROL AREA\n***********************************************************************\n         IEESMCA\nIEFUSI   CSECT\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     IEFUSI SAVE AREA\nRACDYN   DS    CL(RACLEN)              DYNAMIC VER RACHECK LIST FORM\nWORKLEN  EQU   *-WORKAREA\n         END   IEFUSI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUTL": {"ttr": 8964, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xbd\\x00\\xbd\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 189, "newlines": 189, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'IEFUTL - DELUXE SMF USET TIME LIMIT EXIT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFUTL                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  DELUXE SMF USER TIME LIMIT EXIT     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                ALLOW TSO SESSIONS WHICH ARE EXECUTING UNDER A       *\n*                   MULTIPLE SESSION MANAGER PRODUCT TO NOT TIME      *\n*                   OUT FOR WAIT TIME EXCESSION.                      *\n*                                                                     *\n*                OPERATION =                                          *\n*                   ANALYZE SMF COMMON EXIT PARAMETER AREA.           *\n*                   IF WAIT TIME LIMIT EXCEEDED SEE IF IT IS A TSO    *\n*                      SESSION, IF NOT CANCEL THE SESSION.  IF IT IS  *\n*                      A TSO SESSION CHECK TO SEE IF THE TERMINAL     *\n*                      NAME FROM THE TSB BEGINS WITH THE CHARACTERS   *\n*                      \"DLX\". IF IT DOES NOT THEN CANCEL THE SESSION, *\n*                      OTHERWISE GRANT A 10 MINUTE EXTENSION,         *\n*                      INDEFINITELY.                                  *\n*                                                                     *\n*             NOTES =                                                 *\n*                                                                     *\n*                RESTRICTIONS = NONE                                  *\n*                                                                     *\n*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *\n*                   REGISTERS 0 TO 2  = WORK REGISTERS                *\n*                   REGISTERS 3 TO 9  = UNUSED                        *\n*                   REGISTER  10      = WORK                          *\n*                   REGISTER  11      = ADDRESSABILITY TO COMMON      *\n*                                       EXIT PARAMETER AREA           *\n*                   REGISTER  12      = ADDRESSABILITY TO IEFUTL      *\n*                                       CSECT                         *\n*                   REGISTER  13      = SAVE AREA REGISTER            *\n*                   REGISTER  14      = RETURN ADDRESS                *\n*                   REGISTER  15      = RETURN CODE                   *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, REENTRANT,             *\n*                   SUPERVISOR STATE, ENABLED                         *\n*                                                                     *\n*             ENTRY POINTS = IEFUTL (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM INITIATOR VIA MODULE IEATLEXT                *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO A LIST OF FULL WORDS       *\n*                THE FIRST OF WHICH POINTS TO THE SMF COMMON          *\n*                EXIT PARAMETER AREA MAPPED BY SMFCEPL DSECT          *\n*                                                                     *\n*             OUTPUT = REGISTER 15 - RETURN CODE                      *\n*                REGISTER 1 - TIME LIMIT EXTENSION                    *\n*                USER COMMUNICATION FIELD - EXTENSION COUNT           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                RETURN CODE = SEE FUNCTION ABOVE                     *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             MACROS = SAVE, RETURN                                   *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                                                                     *\n*      05/28/87  CHANGED EXTENSION TIME TO 50 MINUTES.  ALSO ADDED    *\n*                CODE TO CHECK FOR AND ALLOW ONLY ONE EXTENSION.  MJL *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nIEFUTL   CSECT\n         SAVE  (14,12),,IEFUTL_&SYSTIME_&SYSDATE\n         LR    R12,R15                 LOAD REGISTER 12 FROM 15\n         USING IEFUTL,R12              ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n*\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ADDRESSABILITY TO SMF PARAMETER AREA DSECT         *\n*        EVALUATE REGISTER 0 = 8 - JOB WAIT TIME EXCEEDED             *\n*                                                                     *\n***********************************************************************\n*\n         L     R11,0(R1)               LOAD POINTER TO PARAMETER AREA\n         USING SMFCEPL,R11             ESTABLISH ADDRESSABILITY TO SMF\n*                                      PARAMETER AREA DSECT\n         C     R0,FULL8                SEE IF WAIT TIME  EXCEEDED\n         BNE   CANCEL                  NO.....GO CANCEL\n*                                      TIME EXCEEDED\n*\n***********************************************************************\n*                                                                     *\n*        WAIT TIME EXCEEDED                                           *\n*           - IF NOT TSO ALLOW SESSION TO BE CANCELED                 *\n*                                                                     *\n***********************************************************************\n*\nWAITTIME DS    0H\n         TM    SMFOPT,SMFTSO           SEE IF TSO SESSION\n         BNO   CANCEL                  NO.....GO CANCEL - ONLY EXTEND\n*                                      WAIT TIME FOR TSO SESSIONS\n*\n         CLI   SMFUSERW,X'00'          CHECK TO SEE IF AN EXTENSION HAS\n         BNE   CANCEL                  ALREADY BEEN GRANTED, IF SO\n*                                      CANCEL ELSE CONTINUE CHECKING..\n         L     R10,16                  GET ADDRESS OF CVT\n         L     R10,0(R10)              GET ADDR OF TCB ADDRESS WORD\n         L     R10,12(R10)             GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R10                ESTABLISH ADDRESSABILITY TO ASCB\n         L     R10,ASCBTSB             LOAD ADDRESS OF TSB\n         USING TSB,R10                 ESTABLISH ADDRESSABILITY TO TSB\n         CLC   DLXTERM,TSBTRMID        COMPARE ON TERMINAL NAME\n         BNE   CANCEL                  IF NOT \"DLX\" THEN CANCEL\n         DROP  R10\n***********************************************************************\n*                                                                     *\n*        ALLOW JOB A 10 MINUTE EXTENSION AND NOTIFY OPERATOR          *\n*                                                                     *\n***********************************************************************\n*\n         L     R15,FULL8               INDICATE RETURN CODE OF 8 -\n*                                      EXTEND CPU TIME IN SECONDS\n         L     R1,WAIT3000             LOAD TIME EXTENSION IN SECONDS\n*                                      INTO REGISTER 1\n         MVI   SMFUSERW,X'01'          INDICATE ONE EXTENSION GRANTED\n         B     RETURN                  GO RETURN TO CALLER\n*\n***********************************************************************\n*                                                                     *\n*        ZERO REGISTER 2 TO INDICATE CANCEL                           *\n*                                                                     *\n***********************************************************************\n*\nCANCEL   DS    0H\n         SLR   R15,R15                 INDICATE RETURN CODE OF ZERO -\n*                                      CONTINUE (CANCEL)\n*\n***********************************************************************\n*                                                                     *\n*        NORMAL END PROCESSING                                        *\n*                                                                     *\n***********************************************************************\n*\nRETURN   DS    0H\n         L     R14,12(,R13)            RESTORE RETURN ADDRESS\n         LM    R2,R12,28(R13)          RESTORE REGS 2-12\n         BR    R14                     RETURN TO CALLER\n         SPACE 5\n**************************** CONSTANTS ********************************\nFULL8    DC    F'8'\nWAIT3000 DC    F'3000'\nDLXTERM  DC    CL3'DLX'\n         EJECT\n************************ DSECTS (MAPPING MACROS) **********************\nSMFCEPL  DSECT\nSMFJOBN  DS    CL8\nSMFTIME  DS    CL4\nSMFDATE  DS    CL4\nSMFSID   DS    CL4\nSMFUSID  DS    CL8\nSMFSTEP  DS    CL1\nSMFOPT   DS    CL1\nSMFTSO   EQU   X'01'\nSMFVS1   DS    CL1\nSMFRESV  DS    CL1\nSMFUSER  DS    CL4\n         ORG   SMFUSER\nSMFUSERC DS    CL1\nSMFUSERW DS    CL1\n         ORG\n         SPACE 5\n********************************* EQUATES *****************************\n         SPACE 5\n***************************** REGISTER EQUATES ************************\n         EQUATE\n         IHAASCB  LIST=YES\n         IKJTSB   LIST=YES\n         CVT   DSECT=YES,LIST=YES\n         END   IEFUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFU29": {"ttr": 8968, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00x\\x00x\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 120, "newlines": 120, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'SMF -  I E F U 2 9   EXIT'\n* DESCRIPTION: STANDARD SMF EXIT WHICH GETS CONTROL WHEN THE\n*              THE SYSTEM DETECTS 'IEE362A' MESSAGE WHEN A\n*              SWITCH OF THE RECORDING DATASETS HAS OCCURRED.\n*              WE ISSUE A COMMAND TO START AN IFASMFDP JOB\n*              BASED ON WHICH SYSID (ADM1 OR ADM2) ISSUED THE\n*              MESSAGE AND WHICH SMF DATASET (MAN1,MAN2 OR MAN3)\n*              NEEDS TO BE DUMPED.\n*\n*\n*         REGISTER USAGE\n*             R0  - STANDARD\n*             R1  - STANDARD\n*             R2  - WORK TO GAIN ACCESSIBILITY TO VARIOUS CSECTS\n*             R3  - WORK\n*             R4  - NOT USED\n*             R5  - NOT USED\n*             R6  - NOT USED\n*             R7  - NOT USED\n*             R8  - NOT USED\n*             R9  - NOT USED\n*             R10 - NOT USED\n*             R11 - NOT USED\n*             R12 - BASE REGISTER\n*             R13 - BASE REGISTER FOR WKAREA DSECT\n*             R14 - STANDARD\n*             R15 - STANDARD\n*\n*     PROGRAM LINK-EDIT VALUES\n*      AC=1,RENT,REFR,REUS -- SYS1.LPALIB\n*\n*    NOTES   : REGISTER 1 POINTS TO FULLWORD ADDRESS OF DATASET\n*              NAME\n*\n*              SVC 34 IS USED TO ISSUE THE INTERNAL START COMMAND\n*\n*-----------------------------------------------------------------\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\nIEFU29   CSECT\n         SAVE  (14,12),,IEFU29_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  SAVE ENTRY ADDRESS\n         USING IEFU29,R12               ADDRESSABILITY WITH NEW BASE\n         L     R3,0(R1)                 GET ADDRESSABILITY FOR\n         USING PLIST,R3                 SMF DATASET NAME\n         L     R0,GETAREA               SETUP FOR GETMAIN\n         GETMAIN R,LV=(0)\n         ST    R13,4(R1)                STOR ADDRESS OF OLD SAVE IN NEW\n         ST    R1,8(R13)                STOR ADDRESS OF NEW SAVE IN OLD\n         LR    R13,R1                   R13 NOW POINTS TO NEW SAVEAREA\n         USING WKAREA,R13               GAIN ADDRESSABILITY TO DSECT\n         SPACE\n         L     R2,CVTPTR               R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R2,CVTSMCA              R2 - ADDRESS OF SMCA\n         USING SMCABASE,R2             ESTABLISH ADDRESSABILITY TO SMCA\n         LA    R2,SMCASID              R2 - ADDRESS OF 4 CHAR SYSID\n         DROP  R2                      DROP SMCA ADDRESSABILITY\n         MVC   CMDAREA(4),=XL4'00180000' SET FLAG1,LENGTH AND FLAG2\n         MVC   COMMAND(L'STARTCMD),STARTCMD MOVE IN COMMAND MODEL\n         MVC   MAN(1),SMFDSN+8          MOVE IN WHICH MAN DATASET\n         MVC   SYSID(1),3(R2)          MOVE IN 4TH CHAR OF SYSID\n         XR    R0,R0                    WANT TO DO OPER CMD\n         LA    R1,CMDAREA               POINT TO THE CMD\n         SVC   34                       ISSUE THE CMD\n         SPACE\nRETURN   EQU   *\n*******************************************************************\n*                                       WITH CANCEL MESSAGE\nJOBOK    EQU    *\n         LR     R1,R13                  R1 NOW HAS ADDR OF GOTTEN AREA\n         L      R13,4(R13)              R13 PTS TO PREVIOUS SAVEAREA\n         L      R0,GETAREA              SETUP FOR FREEMAIN\n         FREEMAIN R,LV=(0),A=(1)\n         LA    15,0\n         RETURN (14,12),RC=(15)         RESTORE REGISTERS AND RETURN\n         EJECT\n*---------------------------------------------------------------------*\n*        CONSTANTS                                                    *\n*---------------------------------------------------------------------*\n         SPACE\nGETAREA  DC    0F'0',AL1(000),AL3(WKAREAL) SP=0 AND LENGTH FOR GETMAIN\n         SPACE\nSTARTCMD DC    CL20'START SMFDUMPX,MAN= '\n*--------------------------------------------------------------------*\n*        DEFINE DSECT                                                *\n*--------------------------------------------------------------------*\n         SPACE\n         LTORG\nPLIST    DSECT\nSMFDSN   DS    CL10                     SMF 10 BYTE DATASET NAME\nWKAREA   DSECT\nSAVEAREA DS    18F\n         CNOP  0,4\nCMDAREA  DS    XL4\nCOMMAND  DS    XL19\nMAN      DS    X\n         ORG   COMMAND+13\nSYSID    DS    X\n         ORG\nWKAREAL  EQU   *-WKAREA\n         CVT   DSECT=YES\n         IEESMCA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFU29R": {"ttr": 8971, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00n\\x00n\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'SMF -  I E F U 2 9   REGIONAL EXIT'\n* DESCRIPTION: STANDARD SMF EXIT WHICH GETS CONTROL WHEN THE\n*              THE SYSTEM DETECTS 'IEE362A' MESSAGE WHEN A\n*              SWITCH OF THE RECORDING DATASETS HAS OCCURRED.\n*              WE ISSUE A COMMAND TO START AN IFASMFDP JOB\n*              BASED ON WHICH SMF DATASET (MAN1,MAN2 OR MAN3)\n*              NEEDS TO BE DUMPED.\n*\n*\n*         REGISTER USAGE\n*             R0  - STANDARD\n*             R1  - STANDARD\n*             R2  - WORK TO GAIN ACCESSIBILITY TO VARIOUS CSECTS\n*             R3  - WORK\n*             R4  - NOT USED\n*             R5  - NOT USED\n*             R6  - NOT USED\n*             R7  - NOT USED\n*             R8  - NOT USED\n*             R9  - NOT USED\n*             R10 - NOT USED\n*             R11 - NOT USED\n*             R12 - BASE REGISTER\n*             R13 - BASE REGISTER FOR WKAREA DSECT\n*             R14 - STANDARD\n*             R15 - STANDARD\n*\n*     PROGRAM LINK-EDIT VALUES\n*      AC=1,RENT,REFR,REUS -- SYS1.LPALIB\n*\n*    NOTES   : REGISTER 1 POINTS TO FULLWORD ADDRESS OF DATASET\n*              NAME\n*\n*              SVC 34 IS USED TO ISSUE THE INTERNAL START COMMAND\n*\n*-----------------------------------------------------------------\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\nIEFU29   CSECT\n         SAVE  (14,12),,IEFU29_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  SAVE ENTRY ADDRESS\n         USING IEFU29,R12               ADDRESSABILITY WITH NEW BASE\n         L     R3,0(R1)                 GET ADDRESSABILITY FOR\n         USING PLIST,R3                 SMF DATASET NAME\n         L     R0,GETAREA               SETUP FOR GETMAIN\n         GETMAIN R,LV=(0)\n         ST    R13,4(R1)                STOR ADDRESS OF OLD SAVE IN NEW\n         ST    R1,8(R13)                STOR ADDRESS OF NEW SAVE IN OLD\n         LR    R13,R1                   R13 NOW POINTS TO NEW SAVEAREA\n         USING WKAREA,R13               GAIN ADDRESSABILITY TO DSECT\n         SPACE\n         MVC   CMDAREA(4),=XL4'00170000' SET FLAG1,LENGTH AND FLAG2\n         MVC   COMMAND(L'STARTCMD),STARTCMD MOVE IN COMMAND MODEL\n         MVC   MAN(1),SMFDSN+8          MOVE IN WHICH MAN DATASET\n         XR    R0,R0                    WANT TO DO OPER CMD\n         LA    R1,CMDAREA               POINT TO THE CMD\n         SVC   34                       ISSUE THE CMD\n         SPACE\nRETURN   EQU   *\n*******************************************************************\n*                                       WITH CANCEL MESSAGE\nJOBOK    EQU    *\n         LR     R1,R13                  R1 NOW HAS ADDR OF GOTTEN AREA\n         L      R13,4(R13)              R13 PTS TO PREVIOUS SAVEAREA\n         L      R0,GETAREA              SETUP FOR FREEMAIN\n         FREEMAIN R,LV=(0),A=(1)\n         LA    15,0\n         RETURN (14,12),RC=(15)         RESTORE REGISTERS AND RETURN\n         EJECT\n*---------------------------------------------------------------------*\n*        CONSTANTS                                                    *\n*---------------------------------------------------------------------*\n         SPACE\nGETAREA  DC    0F'0',AL1(000),AL3(WKAREAL) SP=0 AND LENGTH FOR GETMAIN\n         SPACE\nSTARTCMD DC    CL19'START SMFDUMP,MAN= '\n*--------------------------------------------------------------------*\n*        DEFINE DSECT                                                *\n*--------------------------------------------------------------------*\n         SPACE\n         LTORG\nPLIST    DSECT\nSMFDSN   DS    CL10                     SMF 10 BYTE DATASET NAME\nWKAREA   DSECT\nSAVEAREA DS    18F\n         CNOP  0,4\nCMDAREA  DS    XL4\nCOMMAND  DS    XL18\nMAN      DS    X\n         ORG\nWKAREAL  EQU   *-WKAREA\n         CVT   DSECT=YES\n         IEESMCA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGGPRE00": {"ttr": 8974, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00k\\x00k\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 107, "newlines": 107, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'IGGPRE00 -DF/DS ALLOCATE PRE PROCCESSING EXIT TESTER'\n*\n*        ATTRIBUTES:  RENT REUS\n*        REGISTER USAGE:\n*        R0\n*        R1    ON ENTRY, ADDRESS OF EXIT PARAMETER LIST\n*        R2    DYNAMIC AREA ADDRESSABILITY\n*        R3    EXIT PARAMETER LIST ADDRESSABILITY\n*        R4    JFCB DSECT BASE\n*        R5    UCB DSECT ADDRESSABILITY\n*        R6    WORK\n*        R7    WORK\n*        R8    WORK\n*        R9    WORK\n*        R10   WORK\n*        R11   WORK\n*        R12   PROGRAM BASE REG\n*        R13   SAVE AREA POINTER\n*        R14   RETURN ADDRESS\n*        R15   RETURN CODES: 0 = ALLOW ALLOCATE\n*                            4 = CONDITIONAL REJECTION (THIS VOLUME)\n*                            8 = UNCONDITIONAL REJECTION\n*\n*        MACROS:\n*              SAVE\n*              GETMAIN\n*              FREEMAIN\n*              RACHECK\n*              RETURN\n*              EQUATE        DELUXE REGISTER EQUATES\n*              IECIEXPL      PRE/POST PARAMETER LIST MAP\n*              IEFJFCBN      JFCB MAPPING\n*              IEFUCBOB      UCB MAPPING\n*\nIGGPRE00 CSECT\n         SAVE  (14,12),,IGGPRE00_DFDS_ALLOC_PRE_TEST_&SYSDATE_&SYSTIME\n         LR    R12,R15                  PROGRAM ADDRESSABILITY\n         USING IGGPRE00,R12             TELL ASSEMBLER\n         LR    R3,R1                    SAVE PARM LIST ADDRESS IN R2\n         USING IEXPL,R3                 TELL ASSEMBLER\n         CLI   IEXFUNC,IEXALL           IS THIS ALLOCATE?\n         BNE   RETURN                   QUICK RETURN\n         CLI   IEXFLAG,IEXVIO           IS THIS VIO REQUEST?\n         BE    RETURN                   QUICK RETURN\n         L     R4,IEXPTR1               ADDRESS OF JFCB\n         USING JFCBDSCT,R4              TELL ASSEMBLER\n         LH    R11,MAXBLKSI             MAXIMUM BLKSIZE TO R11\n         L     R5,IEXUCB                GET ADDRESS OF THE UCB\n         USING UCBCMSEG,R5              TELL ASSEMBLER\n         DROP  R3\nCHKRACF  EQU   *                        FIND OUT WHAT UNITNAME IS\n         CLI   JFCDSRG2,JFCORGAM        IS THIS VSAM?\n         BNE   NOTVSAM                  NO ELSE\n         RACHECK CLASS='APPL',ENTITY=VSAMDEFI\n         C     R15,=F'8'                NOT ALLOWED?\n         BE    NOTALOW                  FAIL REQUEST\n         B     CKVOLSER                 CHECK FOR VALID VOLUME\nNOTVSAM  EQU   *\n         CH    R11,JFCBLKSI             FOR COMPARE WITH JFCBLKSI\n         BH    CKVOLSER                 LESS OR EQUAL MAX IS OK\n         CH    R11,JFCLRECL             SEE IF LRECL IS HIGH\n         BNH   CKVOLSER                 GO SEE WHETHER RACF WILL ALLOW\n         RACHECK CLASS='APPL',ENTITY=LRGBLKSI\n         C     R15,=F'8'                NOT ALLOWED?\n         BE    NOTALOW                  FAIL REQUEST\n         DROP  R4\nCKVOLSER EQU   *\n         L     R0,DYNSIZE               DYNAMIC AREA SIZE TO R0\n         GETMAIN R,LV=(0)\n         LR    R2,R1                    DYNAMIC AREA ADDRESSABILITY\n         USING DATD,R2                  TELL ASSEMBLER\n         MVC   RACFE(RACFLEN),RACFLIST  PRIME RACHECK PARMLIST\n         RACHECK CLASS=DASDVOL,ENTITY=UCBVOLI,MF=(E,RACFE)\n         LR    R4,R15                   SAVE RETURN CODE\n         L     R0,DYNSIZE               DYNAMIC AREA SIZE TO R0\n         LR    R1,R2                    ADDRESS OF AREA TO R1\n         FREEMAIN R,LV=(0),A=(1)        FREE DYNAMIC AREA\n         DROP  R2\n         LR    R15,R4                   RETURN RETURN CODE\n         C     R15,=F'8'                NOT ALLOWED?\n         BE    NOTALOW                  FAIL REQUEST\n         DROP  R5\nRETURN   SLR   R15,R15                  SET RC=0\nRETURNX  RETURN (14,12),,RC=(15)        RETURN TO CONTROL PROGRAM\nNOTALOW  EQU   *\n         LA    R15,8                    SET RETURN CODE 8\n         LA    R15,0(R15)               CLEAR HI ORDER BIT\n         B     RETURNX                  FAIL ALLOCATION\nMAXBLKSI DC    H'23477'                 MAXIMUM BLKSIZE\nLRGBLKSI DC    CL8'LRGBLKSI'            LRGBLKSI ENTITY\nVSAMDEFI DC    CL8'VSAMDEFI'            VSAMDEFI ENTITY\nRACFLIST RACHECK MF=L\nRACFLEN  EQU   *-RACFLIST\nDASDVOL  DC    AL1(7),CL7'DASDVOL'      DASDVOL CLASS\n         CNOP  0,4\nDYNSIZE  DC    AL1(0)                   SUBPOOL\n         DC    AL3(SIZEDATD)            DYNAMIC AREA SIZE\n         LTORG\n         EQUATE\nDATD     DSECT\nRACFE    RACHECK MF=L\nSIZEDATD EQU   *-DATD                   LENGTH OF DSECT\nIEXPL    IECIEXPL DSECT=YES\nJFCBDSCT DSECT\n         IEFJFCBN\n         IEFUCBOB\n         END   IGGPRE00\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEFF10": {"ttr": 9219, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xbf\\x00\\xbf\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 191, "newlines": 191, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE CHECK PRINTERS INC. SUBMIT EXIT - IKJEFF10'\n*\n*  ATTRIBUTES:  RENT REUS REFR\n*\nIKJEFF10 CSECT\n         SAVE  (14,12),,IKJEFF10_DELUXE_SUBMIT_EXIT_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R11 AS BASE REG\n         USING IKJEFF10,R12             TELL ASSEMBLER\n         L     R11,0(,R1)               ADDRESS OF 8 WORD PLIST\n         USING IEDSECTD,R11             TELL ASSEMBLER\n         L     R9,IESUBCTP              ADDRESS OF CONTROL SWITCHES\n         USING IESUBCTD,R9              TELL ASSEMBLER\n         GETMAIN R,LV=72,SP=0           GET A SAVEAREA\n         ST    R13,4(R1)                SAVE OS SAVE AREA ADDRESS\n         ST    R1,8(R13)                STORE OUR SAVEAREA ADDR IN OS\n         LR    R13,R1                   POINT R13 AT OUR SAVE AREA\n* END OF PROLOUGE                       SAVE AREA\n         L     R10,IEEXITWD             LOAD WORKAREA ADDRESS\n         LTR   R10,R10                  CHECK TO SEE IF IT EXISTS\n         BNZ   GOTWORK1                 IT DOES SO SKIP GETMAIN\n         GETMAIN R,SP=230,LV=ENDAREA1-WRKAREA1\n         ST    R1,IEEXITWD              SAVE ADDRESS OF GOTTEN AREA\n         LR    R10,R1                   ADDRESS TO REGISTER 10\n         USING WRKAREA1,R10             ADDRESSABILITY TO WORKAREA\n         MVI   CRDUSER,X'40'            INITIALIZE\n         MVC   CRDUSER+1(7),CRDUSER     TO BLANKS\n         XC    CARDPASS(4),CARDPASS     TO HEX ZEROS\nGOTWORK1 EQU   *\n         CLI   CRDUSER,C' '             USERID FOUND YET?\n         BNE   PASSROUT                 YES GO CHECK FOR PASSWORD\nUSERROUT EQU   *\n         L     R1,IECARDP               R1 PTS TO COL 1 OF CARD\n         LA    R7,65(R1)                R7 PTS TO COL 66 OF CARD\n         LA    R1,3(R1)                 R1 PTS TO COL 4 OF CARD\nUSERCHK  EQU   *\n         LR    R4,R7                    R4 HAS ADDRESS OF COL 66\n         SR    R4,R1                    R4 HAS NO OF COLS TO WORK WITH\n         EX    R4,TRTINSTU              EXEC TRT, R4 HAS LENGTH\n         BZ    RETURN1                  'U' NOT FOUND IN CARD\n         CLC   0(5,R1),=C'USER='        R1 PTS TO LAST BYTE TRANSLATED\n         BE    LOADUSER                 GO SAVE USERID\n         CR    R7,R1                    HOW MANY COLS HAVE BEEN TRTD?\n         BE    RETURN1                  USER NOT FOUND ON CARD\n         LA    R1,1(R1)                 R1 POINTS TO NEXT COL RIGHT\n         B     USERCHK                  TRY AGAIN\nLOADUSER EQU   *                        LOAD USER INTO USER SAVE AREA\n         LA    R1,5(R1)                 BUMP PAST USER=\n         LR    R5,R1                    SAVE R1 FOR MOVE\n         L     R7,IECARDP               GET ADDRESS OF LAST POSSIBLE\n         LA    R7,70(R7)                CHARACTER IN R7\n         LA    R4,0                     R4 IS LENGTH OF MOVE\nLOADUSE1 EQU   *                        COUNT LOOP\n         CLI   0(R1),C','               END OF USERID\n         BE    LOADUSE2                 GO MOVE USERID\n         CLI   0(R1),C' '               END OF USERID\n         BE    LOADUSE2                 GO MOVE USERID\n         CR    R7,R1                    END OF CARD\n         BE    LOADUSE2                 GO MOVE USERID\n         LA    R1,1(R1)                 BUMP R1\n         LA    R4,1(R4)                 BUMP R4\n         B     LOADUSE1                 CONTINUE\nLOADUSE2 EQU   *                        MOVE USERID\n         BCTR  R4,R0                    DECREMENT FOR EXECUTE\n         EX    R4,MOVEUSER              EXECUTE MOVE LENGTH IN R4\nPASSROUT EQU   *\n         CLC   CARDPASS,=XL4'00000000'  CHECK TO SEE IF ALREADY\n         BNE   RETURN1                  FOUND, IF SO WE ARE DONE\n         L     R1,IEUSRIDP              ADDRESS OF USERID\n         CLC   CRDUSER,=CL8'SYSPGM'     SPECIAL USERID?\n         BNE   NOTSPEC                  NO CONTINUE\n         CLC   0(6,R1),=C'T27611'       MIKE LOOS\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T53031'       MARTY KUNTZ\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T53043'       NANCY HAGSTROM\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T53039'       JIM TRETTER\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T60439'       RICK ANDERSON\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T04108'       RAY STOECKL\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T56714'       BARB COUTURE\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T68875'       MARK CARON\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T68878'       LOIS HOLLINGSWORTH\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T79157'       JOHN CARLSON\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T79186'       SUE RIGGI\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T53007'       MIKE REICHERT\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T53090'       ADY WICKSTROM\n         BE    MOVEUIDS\n         CLC   0(6,R1),=C'T68839'       CRAIG SPATAFORE\n         BE    MOVEUIDS\n         B     NOTSPEC\nMOVEUIDS EQU   *\n         MVC   CRDUSER,0(R1)\n         MVC   0(6,R5),0(R1)\nNOTSPEC  EQU   *\n         CLC   CRDUSER,0(R1)            CHECK IF USER= LOGGED ON USERID\n         BNE   RETURN1                  IF NOT PASS AS IS\n         L     R1,IECARDP               R1 PTS TO COL 1 OF CARD\n         LA    R7,61(R1)                R7 PTS TO COL 62 OF CARD\n         LA    R1,3(R1)                 R1 PTS TO COL 4 OF CARD\nPASSCHK  EQU   *\n         LR    R4,R7                    R4 HAS ADDRESS OF COL 66\n         SR    R4,R1                    R4 HAS NO OF COLS TO WORK WITH\n         EX    R4,TRTINSTP              EXEC TRT, R4 HAS LENGTH\n         BZ    RETURN1                  'P' NOT FOUND IN CARD\n         CLC   0(9,R1),=C'PASSWORD='    R1 PTS TO LAST BYTE TRANSLATED\n         BE    LOADPASS                 GO SAVE PASSWORD\n         CR    R7,R1                    HOW MANY COLS HAVE BEEN TRTD?\n         BE    RETURN1                  PW NOT FOUND\n         LA    R1,1(R1)                 R1 POINTS TO NEXT COL RIGHT\n         B     PASSCHK                  TRY AGAIN\nLOADPASS EQU   *                        LOAD USER INTO USER SAVE AREA\n         LA    R1,9(R1)                 BUMP PASS PASSWORD=\n         ST    R1,CARDPASS              SAVE R1 FOR MOVE\n         L     R7,IECARDP               GET ADDRESS OF LAST POSSIBLE\n         LA    R7,70(R7)                CHARACTER IN R7\n         LA    R4,0                     R4 IS LENGTH OF MOVE\nLOADPAS1 EQU   *                        COUNT LOOP\n         CLI   0(R1),C','               END OF PASSWORD\n         BE    LOADPAS2                 GO MOVE PASSWORD\n         CLI   0(R1),C' '               END OF PASSWORD\n         BE    LOADPAS2                 GO MOVE PASSWORD\n         CR    R7,R1                    END OF CARD\n         BE    LOADPAS2                 GO MOVE PASSWORD\n         LA    R1,1(R1)                 BUMP R1\n         LA    R4,1(R4)                 BUMP R4\n         B     LOADPAS1                 CONTINUE\nLOADPAS2 EQU   *                        MOVE PASSWORD\n         BCTR  R4,R0                    CARD PASSWORD LENGTH FOR EX\n         L     R1,CARDPASS              GET ADDRESS OF PASSWORD\n         EX    R4,PASSQUES              CHECK FOR QUESTION MARKS\n         BNE   RETURN1\n         L     R3,16                    ADDRESS OF CVT\n         L     R3,0(R3)                 ADDRESS OF RCB/ASCB ADDRESSES\n         L     R3,12(R3)                ADDRESS OF CURRENT ASCB\n         L     R3,60(R3)                ADDRESS OF TSB\n*                                       TSB IS IN FETCH PROTECTED\n*                                       STORAGE SO WE NEED TO\n*                                       DO A QUICK MODESET TO ACCESS IT\n         MODESET EXTKEY=ZERO,SAVEKEY=(2)  GO TO KEY ZERO\n         LA    R3,88(R3)                ADDRESS OF TSBPSWD\n         EX    R4,PASSMOVE              MOVE TO THE CARD\n         MODESET KEYADDR=(2)            RETURN TO SAVED KEY\n* BEGINNING OF EPILOUGE\nRETURN1  EQU   *                        RETURN SECTION\n         SLR   R15,R15                  START WITH RETURN CODE 0\n         TM    IESTMTYP,IESSCON         CHECK TO SEE IF STATEMENT\n*                                       IS TO BE CONTINUED\n         BO    RETURNX                  IF SO CONTINUE ELSE\n*                                       ELSE WE ARE DONE\nRETURN2  EQU   *                        FREE WORKAREA\n         SLR   R1,R1                    ZERO REGISTER 1\n         ST    R1,IEEXITWD              ZERO ADDRESS OF GOTTEN AREA\n         LR    R1,R10                   POINT R1 AT ADDRESS OF WORKAREA\n         FREEMAIN R,A=(1),SP=230,LV=ENDAREA1-WRKAREA1\nRETURNX  EQU   *                        FREE SAVEAREA AND GET OUT\n         LR    R1,R13                   POINT R1 AT OUR SAVEAREA\n         L     R13,4(R13)               LOAD OS SAVE AREA ADDR TO R13\n         FREEMAIN R,LV=72,A=(1),SP=0    FREE SAVEAREA\n         RETURN (14,12),RC=(15)         RETURN TO OS RC IN R15\n* END OF EPILOUGE\nTRTINSTP TRT   0(0,R1),TRANTBLP         TRT INST IS USED VIA EX INST\nTRTINSTU TRT   0(0,R1),TRANTBLU         TRT INST IS USED VIA EX INST\nMOVEUSER MVC   CRDUSER(0),0(R5)         MVC INST USED TO MOVE USERID\nPASSQUES CLC   0(0,R1),QUESMARK\nPASSMOVE MVC   0(0,R1),0(R3)            MVC INST USED TO MOVE PASSWD\nQUESMARK DC    CL8'????????'            FOR TEST\nTRANTBLP DS    0CL256                   FIND EQUALS SIGN TABLE\n         DC    215X'00'\nLETTERP  DC    X'D7'                    THIS BYTE REPRESENTS A 'P'\n         DC    40X'00'                  FILL OUT TABLE\nTRANTBLU DS    0CL256                   FIND EQUALS SIGN TABLE\n         DC    228X'00'\nLETTERU  DC    X'E4'                    THIS BYTE REPRESENTS A 'U'\n         DC    27X'00'                  FILL OUT TABLE\n         LTORG\nWRKAREA1 DSECT                          BEGINNING OF WORKAREA 1\nCRDUSER  DS    CL8                      USERID FROM CARD\nCARDPASS DS    A                        ADDRESS OF CARD PASSWORD\nENDAREA1 DS    0D                       END OF WORKAREA 1\n         EQUATE                         REGISTER EQUATES\n         IKJEFFIE IETYPE=SUBMIT\n         END   IKJEFF10\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEFF53": {"ttr": 9223, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\xc6\\x02\\xc6\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 710, "newlines": 710, "modlines": 0, "user": "DELUXE"}, "text": "IKJEFF53 TITLE 'MVS/SP SYSTEM IPO SUPPLIED FIB INSTALLATION EXIT       C\n                        '\n***********************************************************************\n*/* REF  IPO1.SAMPLIB(IKJEFF53)\n*/* COMP TSO\n*/* DOC  THIS IS THE ASSEMBLER SOURCE CODE FOR THE\n*/*      SAMPLE MVS/SP SYSTEM IPO TSO OUTPUT, STATUS AND\n*/*      CANCEL EXIT ROUTINE.\n*/*\n*             MODULE NAME = IKJEFF53                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  MVS/SP SYSTEM IPO SUPPLIED FIB EXIT *\n*                FOR TSO CANCEL, OUTPUT AND STATUS COMMANDS           *\n*                                                                     *\n*             FUNCTION =                                              *\n*                VALIDITY CHECKS JOBNAME ON A CANCEL, OUTPUT OR       *\n*                STATUS FIB (FOREGROUND INITIATED BACKGROUND)         *\n*                COMMAND.  ALLOWS FOR STATUS WITH JOBNAME 'TSO'       *\n*                                                                     *\n*                OPERATION =                                          *\n*                   STATUS:  IF JOBNAME IS NOT 'TSO' RETURN TO        *\n*                   CALLER SINCE ANY JOBNAME WILL BE ALLOWED.         *\n*                   IF JOBNAME IS 'TSO' PUT OUT LIST OF USERIDS       *\n*                   WITH ADDRESS SPACE ID AND TERMINAL ADDRESS        *\n*                   OR SYMBOLIC TERMINAL NAME (TSO/VTAM).             *\n*                   RETURN TO CALLER WITH RETURN CODE OF 12 TO        *\n*                   SKIP JOBNAME SEARCH FOR 'TSO'.                    *\n*                                                                     *\n*                   OUTPUT:  FIRST CHECK IF THE USER HAS OPERATOR     *\n*                   AUTHORITY.  IF YES, ALLOW THE USER TO OUTPUT      *\n*                   ANY JOBNAME.  IF THE USER DOES NOT HAVE OPERATOR  *\n*                   AUTHORITY COMPARE THE USERID WITH THE JOBNAME     *\n*                   PASSED.  IF THE JOBNAME IS NOT THE USERID OR      *\n*                   DOES NOT START WITH THE USERID, THE JOBNAME       *\n*                   IS REJECTED BY FIRST RETURNING TO THE CALLER      *\n*                   AN ERROR MESSAGE AND A RETURN CODE REQUESTING     *\n*                   THAT THE MESSAGE BE ISSUED VIA THE PUTLINE        *\n*                   MECHANISM.  WHEN REENTERED FOR THE JOBNAME,       *\n*                   THE EXIT ISSUES A RETURN CODE REJECTING THE       *\n*                   JOBNAME.                                          *\n*                                                                     *\n*                   CANCEL:  FIRST CHECK IF THE USER HAS OPERATOR     *\n*                   AUTHORITY.  IF YES, ALLOW THE USER TO CANCEL      *\n*                   ANY JOBNAME (THE MVS SYSTEM WILL PREVENT THE      *\n*                   USER FROM CANCELLING STARTED TASKS AND TSO        *\n*                   SESSIONS).  IF THE USER DOES NOT HAVE OPERATOR    *\n*                   AUTHORITY COMPARE THE USERID WITH THE JOBNAME     *\n*                   PASSED.  IF THE JOBNAME IS NOT THE USERID PLUS    *\n*                   AT LEAST ONE CHARACTER, THE JOBNAME IS REJECTED   *\n*                   BY FIRST RETURNING TO THE CALLER AN ERROR         *\n*                   MESSAGE AND A RETURN CODE REQUESTING THAT THE     *\n*                   THAT THE MESSAGE BE ISSUED VIA THE PUTLINE        *\n*                   MECHANISM.  WHEN REENTERED FOR THE JOBNAME,       *\n*                   THE EXIT ISSUES A RETURN CODE REJECTING THE       *\n*                   JOBNAME.                                          *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER IS EBCDIC.  REASSEMBLE     *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS = USES SPKA FORM OF MODESET MACRO      *\n*                    INSTRUCTION SO MUST RUN SUPERVISOR STATE.        *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0,1     = WORK REGISTERS               *\n*                    REGISTER  2       = MODESET KEYADDR              *\n*                    REGISTER  3       = WORK REGISTER                *\n*                    REGISTERS 4       = ADDRESSABILITY TO EXIT       *\n*                                              PARAMETER LIST         *\n*                    REGISTER  5       = RETURN CODE / ASVT MAXUSERS  *\n*                    REGISTERS 6,7,8,9 = WORK REGISTERS               *\n*                    REGISTER  10      = ADDRESSABILITY TO REJECT     *\n*                                              MESSAGE GETMAINED AREA *\n*                    REGISTER  11      = ADDRESSABILITY TO GETMAINED  *\n*                                              DATA AREA              *\n*                    REGISTER  12      = ADDRESSABILITY TO IKJEFF53   *\n*                                              CSECT                  *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   'ZAP*'S)                                          *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 1K                                     *\n*                                                                     *\n*                ATTRIBUTES = PROTECT KEY 1, REENTRANT,               *\n*                   SUPERVISOR STATE                                  *\n*                                                                     *\n*             ENTRY POINTS = IKJEFF53 (ONLY ENTRY POINT)              *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   IKJEFF51:  (CANCEL OR STATUS COMMAND) VIA CALL    *\n*                   IKJCT469:  (OUTPUT COMMAND) VIA CALL              *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO PARAMETER LIST MAPPED      *\n*                BY IKJEFFIE MACRO                                    *\n*                                                                     *\n*             OUTPUT = SEE EXIT TOPICAL HEADING BELOW                 *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = AT PROGRAM END VIA BRANCH REGISTER 14    *\n*                                                                     *\n*                OUTPUT = MESSAGEP SET IN THE INPUT PARAMETER LIST.   *\n*                   IF RETURN IS FROM STATUS FOR JOBNAME 'TSO' THEN   *\n*                   RETURN CODE IS 12 AND NO MESSAGE WILL BE ISSUED.  *\n*                                                                     *\n*                RETURN CODE =                                        *\n*                   4  - ISSUE PROMPT AND RETURN REPLY   (IEPROMPT)   *\n*                   8  - ISSUE MESSAGE AND RETURN        (IEMSG)      *\n*                   12 - REJECT THIS JOB                 (IEREJECT)   *\n*                   16 - TERMINATE THIS COMMAND          (IEABORT)    *\n*                   (THIS VERSION USES ERROR CODE 8 AND 12)           *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PARMLIST, CVT, ASVT, ASCB, TSB      *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL DATA.                             *\n*                                                                     *\n*             MACROS = IKJEFFIE, FREEMAIN, GETMAIN, SAVE, TPUT, CVT,  *\n*                      IKJTSB, IKTTSBX                                *\n*                                                                     *\n*             CHANGE ACTIVITY =\n*                                                                     *\n*                COMPARE OF USERID AND JOBNAME LENGTH MOVED        CUJ*\n*                CHECK FOR INVALID JOBNAME ADDED                   INJ*\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                NO MESSAGES ARE ISSUED BY THIS MODULE UNLESS         *\n*                STATUS IS ISSUED FOR JOBNAME 'TSO'.                  *\n*                MESSAGE TEXTS ARE, HOWEVER, PASSED BACK TO THE       *\n*                CALLER IN AN AREA GETMAINED BY THIS EXIT.            *\n*                FOR CANCEL THE MESSAGE IS THAT FOUND AT LABEL        *\n*                REJTEXT1.  FOR OUTPUT THE MESSAGE IS THAT FOUND      *\n*                AT LABEL REJTEXT2.  FOR STATUS WITH JOBAME 'TSO'     *\n*                TPUT IS USED TO PUT OUT LINES OF OUTPUT WHICH        *\n*                GIVE USERID, ADDRESS SPACE ID AND TERMINAL           *\n*                ADDRESS.  A HEADER LINE IS FOUND AT LABEL            *\n*                HEADER AND A TRAILER LINE IS FOUND AT LABEL          *\n*                USERS.  IF THIS MODULE ISSUED ITS OWN PUTLINE'S OR   *\n*                PUTGET'S WITH SECOND LEVELS, IT WOULD NEED TO DO     *\n*                MODESET TO KEY 0 BEFORE ISSUING THE MESSAGE(S).      *\n*                THEN DO A MODESET BACK TO KEY 1 BEFORE RETURNING     *\n*                TO THE CALLER.                                       *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nIKJEFF53 CSECT\n         SAVE  (14,12),,IKJEFF53.IPO.&SYSTIME..&SYSDATE SAVE REGISTERS\n*                                      WITH CSECT IDENTIFIER\n         BALR  R12,0                   BRANCH AND LOAD REGISTER 12\nPSTART   DS    0H                      LABEL USED WHEN ESTABLISHING\n         USING PSTART,R12              CSECT ADDRESSABILITY\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE FOR\n*                                      GETMAIN\n         GETMAIN R,LV=(0)              ISSUE REGISTER FORM OF GETMAIN\n*                                      FOR AREA IN SUBPOOL 0\n         LR    R11,R1                  LOAD REGISTER 11 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         USING DATD,R11                ESTABLISH ADDRESSABILITY TO\n*                                      GETMAINED AREA\n         ST    R13,SAVEAREA+4          SAVE REGISTER 13 FOR SAVEAREA\n*                                      CHAINING\n         LM    R0,R1,20(R13)           RELOAD REGISTERS 0 AND 1 FROM\n*                                      PREVIOUS SAVEAREA\n         ST    R11,8(,R13)             SAVE ADDRESS OF CURRENT SAVEAREA\n         LR    R13,R11                 LOAD REGISTER 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         LR    R4,R1                   LOAD REGISTER 4 WITH POINTER TO\n*                                      PARAMETER LIST\n         USING IEPARML,R4              ESTABLISH ADDRESSABILITY TO\n*                                      PARAMETER LIST (USES\n*                                      IKJEFFIE MAPPING MACRO)\n         LA    R5,IECONTIN             INITIALIZE REGISTER 5 FOR RETURN\n*                                      CODE FOR NORMAL CASE - JOBNAME\n*                                      IS GOOD AND COMMAND SHOULD\n*                                      CONTINUE PROCESSING\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        ALWAYS DO PROCESSING                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R6,IECODEP              LOAD COMMAND CODE POINTER\n         CLI   0(R6),IECANCEL          SEE IF COMMAND IS CANCEL\n         BE    PROCESS                 YES....CONTINUE PROCESSING\n         CLI   0(R6),IEOUTPUT          SEE IF COMMAND IS OUTPUT\n         BE    PROCESS                 YES....CONTINUE PROCESSING\n         CLI   0(R6),IESTATUS          SEE IF COMMAND IS STATUS\n         BNE   ENDPROC                 NO.....DO NO PROCESSING\n*                                      IF INVALID CODE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SEE IF SECOND TIME ENTRY FOR A JOB -                         *\n*           MESSAGE POINTER NOT ZERO                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nPROCESS  DS    0H\n         MVI   TSOFLAG,INITFLAG        INITIALIZE TSOFLAG\n         L     R1,IEJOBNMP             LOAD POINTER TO JOBNAME\n         CLC   TSOSTRT,0(R1)           SEE IF JOBNAME IS 'TSOS'\n         BNE   PROC10                  NO, CHECK FOR TSOT\n         MVI   TSOFLAG,STRTFLAG        INITIALIZE TSOFLAG\n         MVC   0(4,R1),TSORESET        RESET JOBNAME TO 'TSO'\n         B     PROC20                  NO, CHECK FOR TSOT\nPROC10   DS    0H\n         CLC   TSOTERM,0(R1)           SEE IF JOBNAME IS 'TSOT'\n         BNE   PROC20                  NO, CONTINUE\n         MVI   TSOFLAG,TERMFLAG        INITIALIZE TSOFLAG\n         MVC   0(4,R1),TSORESET        RESET JOBNAME TO 'TSO'\nPROC20   DS    0H\n         L     R6,IEMSGP               LOAD MESSAGE POINTER\n         LTR   R6,R6                   SEE IF MESSAGE ISSUED FOR LAST\n*                                      ENTRY\n         BNZ   FREEMESS                YES....GO FREE MESSAGE BUFFER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        DETERMINE IF THIS IS FOR CANCEL                              *\n*           NO.....GO TO OUTPUT ROUTINE                               *\n*           YES....IF USER HAS OPERATOR AUTHORITY THEN O.K.           *\n*              ELSE CHECK IF JOBNAME IS VALID FOR CANCEL              *\n*              CANCEL NEEDS JOBNAME EQUAL TO USERID                   *\n*              PLUS AT LEAST ONE CHARACTER                            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nVALIDITY DS    0H\n         L     R6,IECODEP              LOAD COMMAND POINTER\n         CLI   0(R6),IECANCEL          SEE IF COMMAND IS CANCEL\n         BNE   OUTPUT                  NO.....GO SEE IF OUTPUT COMMAND\n         EXTRACT PSCBADDR,'S',FIELDS=PSB,MF=(E,EXTLIST)\n*                                      GET ADDRESS OF PROTECTED STEP\n*                                      CONTROL BLOCK\n         L     R1,PSCBADDR             LOAD POINTER TO PSCB\n         TM    PSCBATR1(R1),PSCBCTRL   SEE IF USER HAS OPERATOR\n*                                      AUTHORITY\n         BO    ENDPROC                 YES....GO TO END OF PROCEDURE\n*                                      O.K. TO CANCEL ANY JOBNAME\n         L     R15,IEIDLENP            LOAD USERID LENGTH POINTER\n         CLI   0(R15),0                CHECK WHETHER JOBNAME IS VALID\n         BE    BADJOBN                 JOBNAME IS INVALID IF USERID\n*                                      IS NOT AVAILABLE (LENGTH=0 FOR\n*                                      FOR TSO COMMANDS IN BACKGROUND)\n         SLR   R14,R14                 ZERO REGISTER 14\n         IC    R14,0(,R15)             INSERT USERID LENGTH INTO\n*                                      REGISTER 14 AND LOAD\n         L     R6,IENAMELP             LOAD JOBNAME LENGTH POINTER  CUJ\n         CH    R14,0(,R6)              SEE IF USERID LENGTH IS      CUJ\n*                                      SHORTER THAN JOBNAME LENGTH  CUJ\n         BNL   BADJOBN                 NO.....GO BUILD INVALID      CUJ\n*                                      JOBNAME MESSAGE              CUJ\n         L     R6,IEUSRIDP             LOAD USERID POINTER          CUJ\n         L     R1,IEJOBNMP             LOAD JOBNAME POINTER         CUJ\n         BCTR  R14,0                   DECREMENT R14 FOR            CUJ\n         EX    R14,JOBNCOMP            EXECUTE OF COMPARE           CUJ\n         BNE   BADJOBN                 NO.....GO BUILD INVALID JOBNAME\n*                                      MESSAGE\n         B     ENDPROC                 GO ACCEPT JOBNAME\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS OUTPUT COMMAND                                *\n*           NO.....GO TO STATUS ROUTINE                               *\n*           YES....IF USER HAS OPERATOR AUTHORITY THEN O.K.           *\n*              ELSE CHECK IF JOBNAME IS VALID FOR OUTPUT              *\n*              OUTPUT NEEDS JOBNAME EQUAL TO USERID OR                *\n*              EQUAL TO USERID PLUS AT LEAST ONE CHARACTER            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nOUTPUT   DS    0H\n         CLI   0(R6),IEOUTPUT          SEE IF COMMAND IS OUTPUT\n         BNE   STATUS                  NO.....GO SEE IF STATUS COMMAND\n         EXTRACT PSCBADDR,'S',FIELDS=PSB,MF=(E,EXTLIST)\n*                                      GET ADDRESS OF PROTECTED STEP\n*                                      CONTROL BLOCK\n         L     R1,PSCBADDR             LOAD POINTER TO PSCB\n         TM    PSCBATR1(R1),PSCBCTRL   SEE IF USER HAS OPERATOR\n*                                      AUTHORITY\n         BO    ENDPROC                 YES....GO TO END OF PROCEDURE\n*                                      O.K. TO OUTPUT ANY JOBNAME\n         L     R15,IEIDLENP            LOAD USERID LENGTH POINTER\n         CLI   0(R15),0                CHECK WHETHER JOBNAME IS VALID\n         BE    BADJOBN                 JOBNAME IS INVALID IF USERID\n*                                      IS NOT AVAILABLE (LENGTH=0 FOR\n*                                      FOR TSO COMMANDS IN BACKGROUND)\n         SLR   R14,R14                 ZERO REGISTER 14\n         IC    R14,0(,R15)             INSERT USERID LENGTH INTO\n*                                      REGISTER 14\n         L     R6,IENAMELP             LOAD JOBNAME LENGTH POINTER  CUJ\n         CH    R14,0(,R6)              SEE IF USERID LENGTH         CUJ\n*                                      IS EQUAL TO OR SHORTER       CUJ\n*                                      THAN JOBNAME LENGTH          CUJ\n         BH    BADJOBN                 NO.....GO BUILD INVALID      CUJ\n*                                      JOBNAME MESSAGE              CUJ\n         L     R6,IEUSRIDP             LOAD USERID POINTER          CUJ\n         L     R1,IEJOBNMP             LOAD JOBNAME POINTER         CUJ\n         BCTR  R14,0                   DECREMENT R14 FOR\n         EX    R14,JOBNCOMP            EXECUTE OF COMPARE\n         BE    ENDPROC                 EQUAL..RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        REJECT THIS INVALID JOBNAME AND BUILD INVALID JOBNAME        *\n*           MESSAGE                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nBADJOBN  DS    0H                      BUILD BAD JOBNAME MESSAGE\n         L     R0,GETMINFO             SUBPOOL 0, LENGTH DECIMAL 84\n         GETMAIN R,LV=(0)              GET MESSAGE BUFFER\n         ST    R1,IEMSGP               STORE POINTER TO MESSAGE BUFFER\n*                                      INTO PARAMETER LIST\n         LR    R10,R1                  LOAD REGISTER 10 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         USING REJMSG,R10              ESTABLISH REGISTER 10 AS BASE\n*                                      FOR REJECT MESSAGE DSECT\n         MVI   REJMSG,BLANK            INITIALIZE BUFFER WITH BLANKS\n         MVC   REJMSG+1(83),REJMSG\n         MVC   REJMLEN(2),HALF84       PUT IN MAXIMUM MESSAGE LENGTH\n         MVC   REJJOB(4),JOBWORD       PUT IN WORD 'JOB'\n         L     R1,IENAMELP             LOAD JOBNAME LENGTH POINTER\n         LH    R15,0(,R1)              LOAD JOBNAME LENGTH\n         LR    R14,R15                 LOAD REGISTER 14 WITH LENGTH\n         BCTR  R14,0                   DECREMENT REGISTER 14 FOR MOVE\n         L     R1,IEJOBNMP             LOAD JOBNAME POINTER\n         EX    R14,MOVEJOBN            INSERT THE BAD JOBNAME\n         AH    R15,HALF2               INDEX PAST BLANK AFTER JOBNAME\n         LR    R5,R15                  LOAD REGISTER 5 AS TEMPORARY\n*                                      SAVE AREA FOR REGISTER 15\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        DIFFERENT MESSAGE TEXTS FOR CANCEL AND OUTPUT                *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         L     R1,IECODEP              LOAD COMMAND POINTER\n         CLI   0(R1),IECANCEL          SEE IF COMMAND IS CANCEL\n         BNE   OUTPMESS                NO.....GO TO OUTPUT MESSAGE\n         ALR   R10,R5                  OFFSET MESSAGE IN BUFFER\n         MVC   REJSLOT-1(66),REJTEXT1  MOVE IN TEXT FOR CANCEL\n         B     SETRC                   GO SET RETURN CODE\nOUTPMESS DS    0H\n         ALR   R10,R5                  OFFSET MESSAGE IN BUFFER\n         MVC   REJSLOT-1(69),REJTEXT2  MOVE IN TEXT FOR OUTPUT\nSETRC    DS    0H\n         LA    R5,IEMSG                SET RETURN CODE TO PROMPT\n         B     ENDPROC                 GO TO RETURN\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS STATUS COMMAND                                *\n*           NO.....GO TO END OF PROCEDURE                             *\n*           YES....CHECK IF NAME IS 'TSO'                             *\n*              NO.....GO TO END OF PROCEDURE                          *\n*              YES....PUT OUT USERIDS, ASIDS, AND ADDRESSES           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSTATUS   DS    0H\n         CLI   0(R6),IESTATUS          SEE IF COMMAND IS STATUS\n         BNE   ENDPROC                 NO.....GO TO END OF PROCEDURE\n         L     R1,IEJOBNMP             LOAD POINTER TO JOBNAME\n         CLC   TSOWORD,0(R1)           SEE IF JOBNAME IS 'TSO'\n         BNE   ENDPROC                 NO.....GO TO END OF PROCEDURE\n         TM    TSOFLAG,TERMFLAG        SEE IF JOBNAME IS 'TSOT'\n         BNO   STAT20                  NO.....SKIP GETMAIN, ETC.\n         L     R0,TABLEN               LOAD REGISTER 0 WITH SIZE FOR\n*                                      GETMAIN\n         GETMAIN R,LV=(0)              ISSUE REGISTER FORM OF GETMAIN\n*                                      FOR AREA IN SUBPOOL 0\n         ST    R1,TABLADDR             SAVE ADDRESS OF TERMTABL\n         ST    R1,TABLEND              INITIALIZE TABLEND\n         ST    R1,TABLSTRT             INITIALIZE TABLSTRT\n         L     R3,TABLEN               LENGTH OF TABLE\nSTAT10   DS    0H\n         OI    0(R1),ENDKEY            INITIALIZE TO X'FF' S\n         LA    R1,1(R1)                INCREMENT R1\n         BCT   R3,STAT10               CONTINUE\nSTAT20   DS    0H\n         L     R1,IENAMELP             LOAD POINTER TO JOBNAME LENGTH\n         CLC   HALF4,0(R1)             SEE IF JOBNAME LENGTH 4 OR LESS\n         BL    ENDPROC                 NO.....GO TO END OF PROCEDURE\n         L     R15,CVTPTR              LOAD POINTER TO CVT\n         USING CVTMAP,R15              ESTABLISH ADDRESSABILITY TO CVT\n         L     R6,CVTASVT              LOAD POINTER TO ASVT\n         DROP  R15                     DROP ADDRESSABILITY TO CVT\n         USING ASVT,R6                 ESTABLISH ADDRESSABILITY TO ASVT\n         L     R5,ASVTMAXU             LOAD MAXIMUM NUMBER OF ADDRESS\n*                                      SPACES\n         LA    R6,ASVTFRST             LOAD ADDRESS OF FIRST ASVT ENTRY\n         LA    R3,0                    ZERO OUT USER COUNTER\n         TPUT  HEADER,L'HEADER         PUT OUT HEADER LINE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        GO DOWN THE ADDRESS SPACE VECTOR TABLE                       *\n*           SEE IF ADDRESS SPACE CONTROL BLOCK IS FOR A TSO USER      *\n*              YES....GET ADDRESS SPACE ID, USERID, AND PHYSICAL      *\n*                     TERMINAL ADDRESS AND OUTPUT LINE                *\n*              NO.....GO CHECK NEXT ASCB                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nASCBNEXT DS    0H\n         LTR   R5,R5                   SEE IF MAXUSER COUNTER ZERO\n         BZ    LASTASCB                YES....GO HANDLE LAST ASCB\n         BCTR  R5,0                    DECREMENT MAXUSER COUNTER\n         MVI   LINE,C' '               BLANK OUT THE OUTPUT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         LA    R6,4(R6)                LOAD ADDRESS OF NEXT ASVT ENTRY\n         L     R7,0(R6)                LOAD ADDRESS OF ACSB\n         USING ASCB,R7                 ESTABLISH ADDRESSABILITY TO ASCB\n         TM    0(R6),X'80'             SEE IF ASID IS AVAILABLE\n         BO    ASCBNEXT                YES....GO ON TO NEXT ASVT ENTRY\n         CLC   ASCBWORD,ASCBASCB       ENSURE CONTROL BLOCK IS VALID\n         BNE   ASCBNEXT                NO.....GO ON TO NEXT ASVT ENTRY\n         L     R8,ASCBTSB              LOAD ADDRESS OF TSB\n         USING TSB,R8                  ESTABLISH ADDRESSABILITY TO TSB\n         LTR   R8,R8                   SEE IF ADDRESS ZERO - NOT TSO\n         BZ    ASCBNEXT                ZERO...GO ON TO NEXT ASVT ENTRY\n         MODESET EXTKEY=ZERO,SAVEKEY=(2)  MODESET AND SAVE OLD KEY\n         TM    TSBFLG5,TSBVTAM         SEE IF THIS IS A TSO/VTAM TSB\n         BO    GETTSBX                 YES....GO GET TSB EXTENSION\n         LH    R8,TSBLINE              GET BINARY LINE ADDRESS\n         STH   R8,PACK                 STORE ADDRESS IN WORKAREA\n         UNPK  PACK+3(5),PACK(3)       UNPACK THE ADDRESS\n         MVC   LINEADDR,PACK+4         MOVE UNPACKED ADDRESS INTO LINE\n         TR    LINEADDR,TRT-240        TRANSLATE TO EBCDIC\n         B     MODEREST                GO MODESET AND RESTORE OLD KEY\nGETTSBX  DS    0H\n         L     R9,TSBEXTNT             GET ADDRESS OF TSB EXTENSION\n         USING TSBX,R9                 ESTABLISH ADDRESSABILITY TO TSBX\n         TM    TSBXFLG1,TSBXWREC       SEE IF TERMINAL AWAITING RECON\n         BNO   GETSYM                  NO.....GO GET SYMBOLIC NAME\n         MVC   LINESYM,DISCON          MOVE IN DISCON'D\n         B     MODEREST                GO MODESET AND RESTORE OLD KEY\nGETSYM   DS    0H\n         MVC   LINESYM,TSBTRMID        MOVE IN TERMINAL SYMBOLIC NAME\n         DROP  R8,R9\nMODEREST DS    0H\n         MODESET KEYADDR=(2)           MODESET AND RESTORE OLD KEY\n         L     R8,ASCBJBNS             LOAD POINTER TO JOBNAME FIELD\n         LTR   R8,R8                   SEE IF POINTER IS ZERO\n         BZ    STARTING                YES....GO MOVE IN 'STARTING'\n         TM    TSOFLAG,STRTFLAG        SEE IF JOBNAME IS 'TSOS'\n         BO    ASCBNEXT                YES, DON'T LIST THIS JOB\n         MVC   LINEUSID,0(R8)          MOVE USERID TO PRINT LINE\n         B     EDITASID                GO EDIT ASID TO EBCDIC\nSTARTING DS    0H\n         MVC   LINEUSID,STRTWORD       MOVE 'STARTING' TO PRINT LINE\nEDITASID DS    0H\n         LH    R8,36(R7)               LOAD ADDRESS SPACE ID\n         CVD   R8,PACK                 CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK              MOVE EDIT MASK TO CHAR\n         ED    CHAR,PACK+4             EDIT TO ASID TO EBCDIC\n         MVC   LINEASID,CHAR+5         MOVE THREE CHARS TO PRINT LINE\n         TM    TSOFLAG,TERMFLAG        SEE IF JOBNAME IS 'TSOT'\n         BO    SORTABLE                YES, CREATE SORTED TABLE\n         LA    R1,LINE                 LOAD POINTER TO LINE\n         TPUT  (R1),L'LINE             PUT OUT OUTPUT LINE\n         LA    R3,1(R3)                ADD 1 TO USER COUNT\n         B     ASCBNEXT                GO ON TO NEXT ASVT ENTRY\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        CREATE TABLE OF TSO USERS SORTED BY TERMINAL ID              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSORTABLE DS    0H\n         L     R2,TABLEND              ADDRESS OF NEW TABLE ENTRY\n         USING TABLENTR,R2             ESTABLISH ADDRESSABILITY\n         MVC   TABLSYM,LINESYM         LOAD VALUES\n         MVC   TABLUSID,LINEUSID           FOR THIS\n         MVC   TABLASID,LINEASID               TABLE ENTRY\n         LR    R7,R2                   ADDRESS OF NEW TABLE ENTRY\n         L     R2,TABLSTRT             ADDRESS OF LOWEST TABLE ENTRY\n         OI    SAVEPTR,ENDKEY          INITIALIZE\n         MVC   SAVEPTR+1(3),SAVEPTR        TO X'FF' S\nSORT10   DS    0H\n         CLC   TABLSYM,0(R7)           IS THIS THE PLACE?\n         BNL   SORT20                  YES, SET THE POINTER\n         CLI   TABLPTR,ENDKEY          END OF TABLE (X'FF')?\n         BE    SORT30                  YES, SET THE POINTER\n         ST    R2,SAVEPTR              SAVE CURRENT POINTER\n         L     R2,TABLPTR              POINT TO NEXT ENTRY\n         B     SORT10                  CONTINUE\nSORT20   DS    0H\n         C     R3,FULL00               FIRST TABLE ENTRY?\n         BE    SORT50                  YES, POINTER ALREADY SET\n         ST    R2,20(R7)               SET POINTER, NEW ENTRY\n         CLI   SAVEPTR,ENDKEY          BEGINNING OF TABLE (X'FF')?\n         BE    SORT40                  YES, POINTER ALREADY SET\n         L     R2,SAVEPTR              POINT AT PREVIOUS ENTRY\n         ST    R7,TABLPTR              SET POINTER FOR PREVIOUS ENTRY\n         B     SORT50                  CONTINUE\nSORT30   DS    0H\n         ST    R7,TABLPTR              SET POINTER, CURRENT ENTRY\n         B     SORT50                  CONTINUE\nSORT40   DS    0H\n         ST    R7,TABLSTRT             SET FIRST TABLE ENTRY\nSORT50   DS    0H\n         LA    R7,24(R7)               POINT TO NEXT ENTRY SLOT\n         ST    R7,TABLEND              ADDRESS OF NEW TABLE ENTRY\n         LA    R3,1(R3)                ADD 1 TO USER COUNT\n         B     ASCBNEXT                GO ON TO NEXT ASVT ENTRY\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        AT END OF ASVT CHAIN SO PUT OUT TSO USER COUNT               *\n*           AND SET RETURN CODE FOR USERID REJECT                     *\n*           TO AVOID SEARCH FOR JOBNAME 'TSO'                         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nLASTASCB DS    0H\n         TM    TSOFLAG,TERMFLAG        SEE IF JOBNAME IS 'TSOT'\n         BNO   USRCOUNT                NO, LIST USER COUNT\n         L     R2,TABLSTRT             ADDRESS OF LOWEST TABLE ENTRY\n         USING TABLENTR,R2             ESTABLISH ADDRESSABILITY\nLAST10   DS    0H\n         MVC   LINESYM,TABLSYM         LOAD VALUES\n         MVC   LINEUSID,TABLUSID           FOR THIS\n         MVC   LINEASID,TABLASID               TABLE ENTRY\n         LA    R1,LINE                 LOAD POINTER TO LINE\n         TPUT  (R1),L'LINE             PUT OUT OUTPUT LINE\n         CLI   TABLPTR,ENDKEY          END OF TABLE?\n         BE    LAST20                  YES, FREEMAIN TERMTABL\n         L     R2,TABLPTR              POINTER TO NEXT ENTRY\n         B     LAST10                  CONTINUE\nLAST20   DS    0H\n         L     R0,TABLEN               LOAD REGISTER 0 WITH SIZE FOR\n*                                      GETMAIN\n         L     R1,TABLADDR             LOAD REGISTER 1 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\nUSRCOUNT DS    0H\n         CVD   R3,PACK                 CONVERT USER COUNT TO DECIMAL\n         MVC   CHAR,EDMSK              MOVE EDIT MASK TO CHAR\n         ED    CHAR,PACK+4             CONVERT DECIAML COUNT TO EBCDIC\n         MVC   LINE(4),CHAR+4          MOVE IN COUNT\n         MVC   LINE+4(L'USERS),USERS   MOVE IN MESSAGE\n         LA    R1,LINE                 LOAD POINTER TO OUTPUT LINE\n         TPUT  (R1),L'LINE             PUT OUT COUNT MESSAGE\n         LA    R5,IEREJECT             TREAT AS IF JOBNAME REJECTED\n         B     ENDPROC                 GO TO END OF PROCEDURE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SECOND TIME ENTRY (FREE MESSAGE BUFFER)                      *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nFREEMESS DS    0H\n         L     R1,IEMSGP               LOAD POINTER TO GETMAINED AREA\n         L     R0,GETMINFO             LOAD SUBPOOL NUMBER AND LENGTH\n*                                      OF GETMAINED AREA\n         FREEMAIN  R,LV=(0),A=(1)      FREE MESSAGE BUFFER\n         SLR   R6,R6                   ZERO OUT MESSAGE POINTER ENTRY\n         ST    R6,IEMSGP               IN PARMLIST\n         LA    R5,IEREJECT             SET RETURN CODE TO 12 - DELETE\n*                                      ENTRY\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER (STATUS, CANCEL, OR OUTPUT COMMAND)         *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDPROC  DS    0H\n         L     R13,4(,R13)             RESTORE REGISTER 13\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE OF\n*                                      GETMAINED AREA\n         LR    R1,R11                  LOAD REGISTER 1 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         LR    R15,R5                  LOAD REGISTER 15 WITH RETURN\n*                                      CODE\n         L     R14,12(,R13)            LOAD REGISTER 14 WITH RETURN\n*                                      ADDRESS\n         LM    R0,R12,20(R13)          RESTORE REGISTERS\n         BR    R14                     RETURN VIA REGISTER 14\n         EJECT\n******** CONSTANTS AND DSECTS *********\nDATA     DS    0H\nJOBNCOMP CLC   0(0,R6),0(R1)\nMOVEJOBN MVC   REJSLOT(0),0(R1)\nFULL00   DC    F'00'\nHALF84   DC    H'84'\nHALF2    DC    H'2'\nHALF4    DC    H'4'\nJOBWORD  DC    CL4'JOB '\nBLANK    EQU   C' '\nDATD     DSECT\n         DS    0F\nSAVEAREA DS    18F\nSAVEREGS DS    4F\nTSOFLAG  DS    C\nEXTLIST  EXTRACT MF=L\nTABLADDR DS    F\nTABLEND  DS    F\nTABLSTRT DS    F\nSAVEPTR  DS    F\nPSCBADDR DS    F\nPSCBATR1 EQU   16\nPSCBCTRL EQU   X'80'\nPACK     DS    D\nCHAR     DS    CL8\nLINE     DS    CL26\n         ORG   LINE+1\nLINEUSID DS    CL8\n         ORG   LINE+11\nLINEASID DS    CL3\n         ORG   LINE+17\nLINEADDR DS    CL3\n         ORG   LINE+17\nLINESYM  DS    CL8\n         ORG\n         DS    0D\nENDDATD  EQU   *\nIKJEFF53 CSECT\n         DS    0F\nSIZDATD  DC    AL1(0)\n         DC    AL3(ENDDATD-DATD)\n         DS    0D\nTABLEN   DC    AL1(0)\n         DC    AL3(200*24)             200 TSO USERS\nIKJEFF53 CSECT\nTABLENTR DSECT\n         DS    0F\nTABLSYM  DS    CL8                     TERMINAL ID\nTABLUSID DS    CL8                     USER ID\nTABLASID DS    CL3                     ADDRESS SPACE ID\nTABLPTR  DS    F                       POINTER\nIKJEFF53 CSECT\nREJTEXT1 DC    CL66'REJECTED - JOBNAME MUST BE YOUR USERID PLUS AT LEASC\n               T ONE CHARACTER'\nREJTEXT2 DC    CL69'REJECTED - JOBNAME MUST BE YOUR USERID OR MUST STARC\n               T WITH YOUR USERID'\nHEADER   DC    CL26'  USERID  ASID  LINE '\nEDMSK    DC    XL8'4020202020202120'\nUSERS    DC    CL26' USERS ARE LOGGED ON'\nTRT      DC    CL16'0123456789ABCDEF'\nTSOWORD  DC    CL3'TSO'\nTSOTERM  DC    CL4'TSOT'\nTSOSTRT  DC    CL4'TSOS'\nTSORESET DC    CL4'TSO '\nASCBWORD DC    CL4'ASCB'\nSTRTWORD DC    CL8'STARTING'\nDISCON   DC    CL8'DISCON''D'\nGETMINFO DS    0F                      SUBPOOL AND LENGTH FOR GETMAIN\n*                                      OF MESSAGE AREA\nGETMSP   DC    AL1(0)\nGETMLEN  DC    AL3(84)\nPATCH    DC    8CL4'ZAP*'\nR0       EQU   00                      EQUATES FOR REGISTERS 0-15\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nENDKEY   EQU   X'FF'\nTERMFLAG EQU   X'10'\nSTRTFLAG EQU   X'01'\nINITFLAG EQU   X'00'\nREJMSG   DSECT                         DSECT FOR RETURN MESSAGE\nREJMLEN  DS    H\nREJJOB   DS    CL4\nREJSLOT  DS    CL9\n         IKJEFFIE IETYPE=OUTPUT\n         IKJTSB   LIST=YES,EXT=NO\n         IKTTSBX\n         CVT   DSECT=YES\n         IHAASVT DSECT=YES,LIST=YES\n         IHAASCB DSECT=YES,LIST=YES\n         END   IKJEFF53\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEFLD": {"ttr": 9480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "DELUXE"}, "text": "   TITLE 'DELUXE CHECK PRINTERS INC. LOGON PRE-PROMPT EXIT - IKJEFLD'\n*\n*  ATTRIBUTES:  RENT REUS REFR\n*\nIKJEFLD  CSECT\n         SAVE  (14,12),,IKJEFLD_DELUXE_LOGON_PRE_PROMPT_EXIT_&SYSDATE_&+\n               SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING IKJEFLD,R12              TELL ASSEMBLER\n         L     R5,0(,R1)                INITIALIZE REG 5 TO POINT\n         L     R5,0(,R5)                TO CONTROL SWITCHES\n         OI    2(R5),X'10'              TURN ON STORE PASSWORD IN\n*                                       TSB SWITCH\n         SLR   R15,R15                  SET RETURN CODE 0\n         RETURN (14,12),RC=(15)         RETURN TO OS RC IN R15\n         LTORG\n         EQUATE                         REGISTER EQUATES\n         END   IKJEFLD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INMRZ01": {"ttr": 9482, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xb6\\x00\\xb6\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 182, "newlines": 182, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'INMRZ01' - RECEIVE INITIALIZATION EXIT\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = INMRZ01                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = RECEIVE INITIALIZATION EXIT          *\n*                                                                     *\n*             FUNCTION =                                              *\n*                EXIT ALLOWS AUTHORIZATION CHECKING FOR USER          *\n*                IDS EXECUTING RECEIVE IN BACKGROUND.                 *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *\n*                   GET ASCB ADDRESSABILITY                           *\n*                   IF REQUEST IS FROM TSO USER,                      *\n*                     EXIT WITH RC=0                                  *\n*                   GET ASXB ADDRESSABILITY                           *\n*                   DROP ASCB ADDRESSABILITY                          *\n*                   GET ACEE ADDRESSABILITY                           *\n*                   DROP ASXB ADDRESSABILITY                          *\n*                   IF USER HAS SPECIAL ATTRIBUTE,                    *\n*                     SET BYPASS AUTHORIZATION CHECKING FLAG          *\n*                     EXIT WITH RC=0                                  *\n*                   IF USERID MATCHES RECEIVE USERID,                 *\n*                     EXIT WITH RC=0                                  *\n*                   GET DYNAMIC WORK AREA FOR RACF MACRO              *\n*                   TRY TO LOCATE USERID IN RACF FILE                 *\n*                   IF USERID FOUND,                                  *\n*                     EXIT WITH RC=4                                  *\n*                   IF USERID NOT FOUND,                              *\n*                     SET BYPASS AUTHORIZATION CHECKING FLAG          *\n*                     EXIT WITH RC=0                                  *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  1       = PARAMETER LIST POINTER       *\n*                    REGISTER  2       = ASCB AND LATER TCB           *\n*                                        ADDRESSABILITY AND           *\n*                                        WORK REGISTER                *\n*                    REGISTER  3       = ASXB AND LATER TIOT          *\n*                                        ADDRESSABILITY AND           *\n*                                        WORK REGISTER                *\n*                    REGISTERS 4 - 10  = WORK REGISTERS               *\n*                    REGISTER  11      = ACEE ADDRESSABILITY          *\n*                    REGISTER  12      = BASE REGISTER                *\n*                    REGISTER  13      = SAVE AREA POINTER            *\n*                    REGISTER  14      = RETURN ADDRESS               *\n*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *\n*                                        RETURN CODE REGISTER         *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN, ICHEINTY    *\n*                                                                     *\n*             MAPPING MACROS USED =                                   *\n*                IHAACEE       ACEE MAP                               *\n*                IHAASCB       ASCB MAP                               *\n*                IHAASXB       ASXB MAP                               *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                02/07/84  WRITTEN.      BC.                          *\n*                02/21/85  PREVENT 'JCLGRP' FROM RECEIVING.  BC.      *\n*                07/21/87  DELETED 'JCLGRP' CHECK WHICH WAS           *\n*                          CHANGED AND MOVED TO INMRZ11.     ML.      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nINMRZ01 CSECT\n         SAVE  (14,12),,INMRZ01_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING INMRZ01,R12             ESTABLISH ADDRESSABILITY\n         LR    R7,R1                   PRESERVE PTR TO PARMS\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n         L     R3,ASCBASXB             GET ADDRESS OF ASXB\n         USING ASXB,R3                 TELL ASSEMBLER\n         L     R11,ASXBSENV            GET ADDRESS OF ACEE\n         DROP  R3\n         USING ACEE,R11                ESTABLISH ADDRESSABILITY TO ACEE\n*\n*\n*  CHECK TO SEE IF THIS IS A BATCH JOB.  IF IT ISN'T, EXIT.\n*\n         L     R4,ASCBTSB              GET ADDRESS OF TSB\n         LTR   R4,R4                   IF NOT ZERO,\n         BNZ   EXIT                      THIS IS A TSO USER\n         DROP  R2\n*\n*  IF USER HAS SPECIAL ATTRIBUTE, EXIT WITHOUT FURTHER CHECKING\n*\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BNO   CHKMTCH                 IF NOT, CHECK FURTHER\n         L     R5,8(R7)                GET ADDRESS TO FLAGS\n         OI    0(R5),X'08'             SET BYPASS AUTH CHECKING FLAG\n         B     EXIT                    AND EXIT\n*\n*  IF USERID MATCHES RECEIVE USERID, EXIT WITH RC=0\n*\nCHKMTCH  EQU   *\n         L     R5,24(R7)               GET ADDRESS OF USERID FIELD\n         L     R6,28(R7)               GET ADDR OF RECEIVE USERID\n         CLC   0(8,R5),0(R6)           ARE THEY THE SAME?\n         BNE   LOCUSER                 IF NOT, CHECK FURTHER\n         B     EXIT                    IF MATCH, EXIT\n*\n*  IF USERID IS DEFINED TO RACF, EXIT WITH RC=4.  OTHERWISE,\n*    SET THE BYPASS AUTHORIZATION CHECKING FLAG AND EXIT WITH\n*    RC=0.\n*\nLOCUSER  EQU   *\n         GETMAIN R,LV=LAREA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE POINTER TO AREA\n         USING WORKAREA,R10            ESTABLISH ADDRESSABILITY\n         MVC   EXLOC(LDATA),DATA       MOVE DATA INTO WORK AREA\n         LA    R3,8                    LOAD LENGTH OF USERID\n         MVC   USERID+1(8),0(R6)       LOAD RECEIVE USERID\n         LA    R4,USERID+8             POINT TO LAST POSSIBLE CHAR\nLU10     EQU   *\n         CLI   0(R4),X'40'             LOOK FOR LAST ACTUAL CHAR IN ID\n         BNE   LU20                    WHEN FOUND, BRANCH\n         BCTR  R4,0                    MOVE POINTER BACK\n         BCT   R3,LU10                 CHECK PREVIOUS CHARACTER\nLU20     EQU   *\n         STCM  R3,B'0001',USERID\n         LA    R3,LOCAEND-LOCAREA\n         ST    R3,LOCAREA\n         ICHEINTY LOCATE,TYPE='USR',ENTRY=USERID,                      X\n               WKAREA=LOCAREA,MF=(E,EXLOC)\n         LR    R3,R15                  SAVE RETURN CODE\n         FREEMAIN R,LV=LAREA,A=(10)    FREE THE GETMAINED AREA\n         LTR   R3,R3                   USER FOUND?\n         BZ    LU30                    IF SO, BRANCH\n         L     R5,8(R7)                GET ADDRESS TO FLAGS\n         OI    0(R5),X'08'             SET BYPASS AUTH CHECKING FLAG\n         B     EXIT                    AND EXIT\nLU30     EQU   *\n         LA    R15,4                   SET RC = 4\n         B     EXITX                   AND EXIT\n*\n*  EXIT THE EXIT\n*\nEXIT     EQU   *\n         SLR   R15,R15                 SET RETURN CODE TO ZERO\nEXITX    EQU   *\n         RETURN (14,12),RC=(15)        END THE EXIT\n*\n         LTORG\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n*\n*  INITIAL DATA FOR WORK AREA\n*\nDATA    ICHEINTY LOCATE,TYPE='USR',MF=L\nLDATA   EQU  *-DATA\n*\n*  WORK AREA DESECT\n*\nWORKAREA DSECT\n*\nEXLOC   ICHEINTY LOCATE,TYPE='USR',MF=L\nUSERID  DS   AL1\n        DS   CL8\nLOCAREA DS   F\n        DS   CL24\n        DS   F\nLOCAEND EQU  *\nLAREA   EQU  *-WORKAREA\n*\n*  DSECTS\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\n*\n         END   INMRZ01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INMRZ11": {"ttr": 9729, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01V\\x01V\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 342, "newlines": 342, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'INMRZ11' - RECEIVE PRE-PROCESSING EXIT\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = INMRZ11                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = RECEIVE PRE-PROCESSING EXIT          *\n*                                                                     *\n*             FUNCTION =                                              *\n*                EXIT ALLOWS RECEIVE TO RUN IN BACKGROUND WITH        *\n*                THE EXIT REPLACING THE USER INTERACTION IN           *\n*                DETERMINING THE RECEIVING DATA SET NAME.             *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *\n*                   GET ASCB ADDRESSABILITY                           *\n*                   GET ASXB ADDRESSABILITY                           *\n*                   GET ACEE ADDRESSABILITY                           *\n*                   IF REQUEST IS FROM RACF GROUP 'JCLGRP',           *\n*                     SET DELETE DATASET BIT AND EXIT WITH RC=0       *\n*                   IF REQUEST IS FROM TSO USER,                      *\n*                     EXIT WITH RC=0                                  *\n*                   GET ADDRESS FOR BUILDING RECEIVE REPLY            *\n*                   GET ASXB ADDRESSABILITY                           *\n*                   DROP ASCB ADDRESSABILITY                          *\n*                   GET ACEE ADDRESSABILITY                           *\n*                   DROP ASXB ADDRESSABILITY                          *\n*                   GET TCB ADDRESSABILITY                            *\n*                   GET TIOT ADDRESSABILITY                           *\n*                   DROP TCB ADDRESSSABILITY                          *\n*                   SEARCH DD NAMES FOR 'SYSUT2'                      *\n*                   IF 'SYSUT2' PRESENT,                              *\n*                     GET ADDRESSABILITY TO JFCB                      *\n*                     STORE SYSUT2 DATA SET NAME IN REPLY FIELD       *\n*                     IF VOLUME PRESENT IN JFCB,                      *\n*                       IF VOLSER=SCRTCH, REPORT ERROR AND EXIT       *\n*                          WITH RC=4                                  *\n*                       ELSE, ADD VOLUME TO REPLY                     *\n*                     ADD 'OLD' OR 'MOD' INDICATOR TO REPLY           *\n*                     SET FLAG TO TELL RECEIVE TO USE THIS REPLY      *\n*                     EXIT WITH RC=0                                  *\n*                   IF 'SYSUT2' NOT PRESENT,                          *\n*                     IF 4TH CHARACTER OF USERID IS 'J' OR 'R',       *\n*                       USE 1ST 3 CHARS FOR DSNAME'S 1ST QUALIFIER    *\n*                     ELSE,                                           *\n*                       USE ENTIRE USERID FOR 1ST QUALIFIER           *\n*                     IF 2ND QUALIFIER OF XMITTED DSNAME IS 'DDNAME', *\n*                       STORE TEMPORARY DATA SET ERROR MESSAGE        *\n*                       SET FLAGS TO USE THIS ERROR MESSAGE           *\n*                       EXIT WITH RC=4                                *\n*                     SKIP THE FIRST QUALIFIER OF THE XMITTED DSNAME  *\n*                     FINISH CONSTRUCTING NEW DSNAME WITH THE REST    *\n*                     INDICATE 'NEW' ON THE REPLY                     *\n*                     SET FLAG TO TELL RECEIVE TO USE THIS REPLY      *\n*                     EXIT WITH RC=0                                  *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  1       = PARAMETER LIST POINTER       *\n*                    REGISTER  2       = ASCB AND LATER TCB           *\n*                                        ADDRESSABILITY AND           *\n*                                        WORK REGISTER                *\n*                    REGISTER  3       = ASXB AND LATER TIOT          *\n*                                        ADDRESSABILITY AND           *\n*                                        WORK REGISTER                *\n*                    REGISTERS 4 - 10  = WORK REGISTERS               *\n*                    REGISTER  11      = ACEE ADDRESSABILITY          *\n*                    REGISTER  12      = BASE REGISTER                *\n*                    REGISTER  13      = SAVE AREA POINTER            *\n*                    REGISTER  14      = RETURN ADDRESS               *\n*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *\n*                                        RETURN CODE REGISTER         *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, RETURN, EQUATE                                 *\n*                                                                     *\n*             MAPPING MACROS USED =                                   *\n*                IHAACEE       ACEE MAP                               *\n*                IHAASCB       ASCB MAP                               *\n*                IHAASXB       ASXB MAP                               *\n*                IEFJFCBN      JFCB MAP                               *\n*                IKJTCB        TCB MAP                                *\n*                IEFTIOT1      TIOT MAP                               *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                02/06/84  WRITTEN.      BC.                          *\n*                02/13/84  GENERATE ERROR MESSAGE IF VOLSER           *\n*                          OF 'SCRTCH' SPECIFIED ON SYSUT2.   BC.     *\n*                07/21/87  IF REQUEST IS FROM RACF GROUP 'JCLGRP'     *\n*                          ALLOW RECEIPT OF MESSAGES BUT              *\n*                          DISALLOW RECEIPT OF DATASETS.      ML.     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nINMRZ11 CSECT\n         SAVE  (14,12),,INMRZ11_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING INMRZ11,R12             ESTABLISH ADDRESSABILITY\n         LR    R7,R1                   PRESERVE PTR TO PARMS\n*\n*  CHECK TO SEE IF USER HAS CONNECT GROUP 'JCLGRP'.  IF SO,\n*    FAIL THE RECEIVE OF DATASETS BUT ALLOW MESSAGES.\n*\nCHKGRP   EQU   *\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n         L     R3,ASCBASXB             GET ADDRESS OF ASXB\n         USING ASXB,R3                 TELL ASSEMBLER\n         L     R11,ASXBSENV            GET ADDRESS OF ACEE\n         DROP  R3\n         USING ACEE,R11                ESTABLISH ADDRESSABILITY TO ACEE\n         CLC   ACEEGRPN,=CL8'JCLGRP'   IS USER IN JCLGRP?\n         BNE   BTCHCHK                 IF NOT, CONTINUE\n         L     R8,8(R7)                GET ADDRESS OF ACTION FLAG BYTE\n         OI    0(R8),X'02'             SET DELETE DATASETS BIT\n         B     EXIT                    AND EXIT WITH RC=0\n         DROP  R11\n*\n*  CHECK TO SEE IF THIS IS A BATCH JOB.  IF IT ISN'T, EXIT.\n*\nBTCHCHK  EQU   *\n         L     R3,ASCBTSB              GET ADDRESS OF TSB\n         LTR   R3,R3                   IF NOT ZERO,\n         BNZ   EXIT                      THIS IS A TSO USER\n*        L     R3,ASCBJBNS             GET STC/MNT/LOGON JOBNAME PTR\n*        LTR   R3,R3                   IF THIS IS ZERO THEN THIS MAY\n*        BNZ   EXIT                    BE A BATCH JOB ELSE EXIT\n*        L     R3,ASCBJBNI             GET INITIATED JOB JOBNAME PTR\n*        LTR   R3,R3                   IF THIS IS ZERO THIS IS NOT A\n*        BZ    EXIT                    BATCH JOB IT IS A STC\n*\n*     IF WE GET HERE WE ARE FAIRLY CONFIDENT THAT WE ARE RUNNING BATCH\n*\n         L     R8,44(R7)               GET ADDRESS FOR BUILDING REPLY\n         LA    R8,4(R8)                GET ADDRESS FOR ACTUAL BEGINNING\n         MVC   0(8,R8),=CL8'DATASET('  START OUT WITH DATA SET NAME\n*\n*  GET ADDRESSABILITY TO THE ACEE IN CASE USERID IS NEEDED\n*\n         L     R3,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2\n         USING ASXB,R3                 TELL ASSEMBLER\n         L     R11,ASXBSENV            GET ADDRESS OF ACEE\n         DROP  R3                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R11                ESTABLISH ADDRESSABILITY TO ACEE\n*\n*  LOOK FOR SYSUT2 DD NAME\n*\nCHKDD    EQU   *\n         L     R2,16                   POINT TO CVT\n         L     R2,0(R2)                GET ADDRESS OF TCB ADDR WORDS\n         L     R2,4(R2)                GET ADDR OF CURRENT TCB\n         USING TCB,R2                  TELL ASSEMBLER\n         L     R3,TCBTIO               GET ADDRESS OF THIS TCB'S TIOT\n         DROP  R2\n         USING TIOT1,R3                TELL ASSEMBLER\n         LA    R2,TIOELNGH             POINT TO START OF DD ENTRIES\n         DROP  R3\n         SLR   R3,R3                   CLEAR R3\nCD10     EQU   *\n         IC    R3,0(R2)                GET LENGTH OF ENTRY\n         LTR   R3,R3                   ENTRY PRESENT?\n         BZ    NEWDSN                  IF NOT, CONSTRUCT NEW DSN\n         CLC   4(8,R2),=CL8'SYSUT2'    IS IT SYSUT2?\n         BE    GETJFCB                 IF SO, GO FIND JFCB\n         AR    R2,R3                   GO TO NEXT DD ENTRY\n         B     CD10                    LOOP BACK\n*\n*  GET THE JFCB AND CONSTRUCT THE REPLY TO THE RECEIVE COMMAND\n*\nGETJFCB  EQU   *\n         SLR   R5,R5\n         ICM   R5,B'0111',12(R2)       GET ADDRESS OF JFCB PREFIX\n         LA    R5,16(R5)               GET ADDRESS OF JFCB\n         USING INFMJFCB,R5             TELL ASSEMBLER\n         MVI   8(R8),X'7D'             MOVE IN QUOTE\n         MVC   9(44,R8),JFCBDSNM       LOAD DATA SET NAME INTO REPLY\n         LA    R8,53(R8)               GET ADDR OF END OF NAME\nGJ10     EQU   *\n         BCTR  R8,0                    LOOK AT PREVIOUS CHARACTER\n         CLI   0(R8),X'40'             END OF DATA SET NAME?\n         BE    GJ10                    IF NOT, KEEP LOOKING\n         MVI   1(R8),X'7D'             MOVE IN QUOTE\n         LA    R8,2(R8)                MOVE AHEAD TO NEXT SPACE\n         CLI   JFCBVOLS,X'40'          VOLUME PRESENT?\n         BE    GJ20                    IF NOT, BRANCH\n         CLC   JFCBVOLS(6),=CL6'SCRTCH'  DOES VOLSER=SCRTCH?\n         BNE   GJ15                    IF NOT, OK\n         L     R5,16(R7)               GET ADDRESS FOR ERROR MESSAGE\n         MVC   0(L'ERRMSG2,R5),ERRMSG2 STORE ERROR MESSAGE\n         L     R8,8(R7)                GET ADDRESS TO FLAG\n         OI    0(R8),X'C0'             SET FLAG TO ISSUE MESSAGE\n         LA    R15,4                   SET A RETURN CODE OF 4\n         B     EXITX                   AND EXIT\nGJ15     EQU   *\n         MVC   0(9,R8),=C') VOLUME('   GET READY TO ADD VOLUME\n         MVC   9(6,R8),JFCBVOLS        LOAD THE VOLUME\n         LA    R8,15(R8)\nGJ20     EQU   *\n         MVC   0(2,R8),=C') '          CLOSE OFF\n         LA    R8,2(R8)\n         TM    JFCBIND2,JFCNEW         NEW DATA SET?\n         BNO   GJ30                    IF NOT, BRANCH\n         MVC   0(3,R8),=C'OLD'         INDICATE OLD SO REALLOCATE IS\n*                                      NOT ATTEMPTED\n         LA    R8,3(R8)\n         B     GJ50\nGJ30     EQU   *\n         TM    JFCBIND2,JFCMOD         MODIFY DATA SET?\n         BNO   GJ40                    IF NOT, BRANCH\n         MVC   0(3,R8),=C'MOD'         INDICATE MODIFY\n         LA    R8,3(R8)\n         B     GJ50\nGJ40     EQU   *\n         TM    JFCBIND2,JFCOLD         OLD DATA SET?\n         BNO   GJ50                    IF NOT, BRANCH\n         MVC   0(3,R8),=C'OLD'         INDICATE OLD\n         LA    R8,3(R8)\nGJ50     EQU   *\n         B     FINI\n*\n*  CONSTRUCT NEW DATA SET NAME\n*\nNEWDSN   EQU   *\n         MVI   8(R8),X'7D'             MOVE IN QUOTE\n         CLI   ACEEUSRI+3,C'R'         REGION ID?\n         BE    ND10                    IF SO, BRANCH\n         CLI   ACEEUSRI+3,C'J'         ADMIN ID?\n         BE    ND10                    IF SO, BRANCH\n         MVC   9(8,R8),ACEEUSRI        LOAD COMPLETE USERID\n         LA    R8,17(R8)               POINT TO END OF USER ID FIELD\nND05     EQU   *\n         BCTR  R8,0                    LOOK AT PREVIOUS CHARACTER\n         CLI   0(R8),X'40'             END OF USER ID?\n         BE    ND05                    IF NOT, KEEP LOOKING\n         LA    R8,1(R8)                GO TO AVAILABLE SPACE\n         B     ND20\nND10     EQU   *\n         MVC   9(3,R8),ACEEUSRI        LOAD ONLY FIRST 3 LETTERS OF ID\n         LA    R8,12(R8)\nND20     EQU   *\n         L     R9,28(R7)               GET ADDR OF TEXT UNIT PTR LIST\nND30     EQU   *\n         L     R10,0(R9)               GET ADDR OF TEXT UNIT\n         CLC   0(2,R10),=X'0002'       DATA SET NAME?\n         BE    ND40                    IF SO, GO TO IT\n         TM    0(R9),X'80'             END OF LIST?\n         BO    EXIT                    IF SO, NOW WHAT?\n         LA    R9,4(R9)                GO TO NEXT ADDR IN LIST\n         B     ND30                    AND LOOP\nND40     EQU   *\n         SLR   R3,R3\n         ICM   R3,B'0011',2(R10)       GET NUMBER OF QUALIFIERS\n         SLR   R5,R5\n         ICM   R5,B'0011',4(R10)       GET LENGTH OF FIRST QUALIFIER\n         LA    R10,6(R10)              GO TO FIRST QUALIFIER\n         AR    R10,R5                  SKIP IT\n         BCTR  R3,0                    COUNT IT\n         LTR   R3,R3                   CHECK TO SEE IF THERE'RE MORE\n         BZ    ND60                    IF NOT, BRANCH\n         LA    R5,2(R10)               GET ADDRESS OF QUALIFIER\n*\n*  IF XMITTED DATA SET IS TEMPORARY, GENERATE ERROR MESSAGE AND\n*    FORCE THEM TO USE SYSUT2 TO RECEIVE IT.\n*\n         CLC   0(6,R5),=C'DDNAME'      IS THIS A TEMPORARY DATASET?\n         BNE   ND50                    IF NOT, BRANCH\n         L     R5,16(R7)               GET ADDRESS FOR ERROR MESSAGE\n         MVC   0(L'ERRMSG1,R5),ERRMSG1 STORE ERROR MESSAGE\n         L     R8,8(R7)                GET ADDRESS TO FLAG\n         OI    0(R8),X'C0'             SET FLAG TO ISSUE MESSAGE\n         LA    R15,4                   SET A RETURN CODE OF 4\n         B     EXITX                   AND EXIT\n*\n*  FINISH CONSTUCTING NEW DATA SET NAME FROM NAME OF XMITTED FILE.\n*\nND50     EQU   *\n         SLR   R5,R5\n         ICM   R5,B'0011',0(R10)       GET LENGTH OF QUALIFIER\n         LA    R10,2(R10)\n         MVI   0(R8),C'.'              INSERT PERIOD\n         LA    R8,1(R8)\n         BCTR  R5,0                    DECREMENT LENGTH\n         MVC   0(*-*,R8),0(R10)        EXECUTED MOVE\n         EX    R5,*-6                  LOAD QUALIFIER\n         LA    R5,1(R5)                INCREMENT LENGTH\n         AR    R10,R5                  POINT TO NEXT QUALIFIER\n         AR    R8,R5\n         BCT   R3,ND50                 COUNT NUMBER OF QUALIFIERS\nND60     EQU   *\n         MVI   0(R8),X'7D'             MOVE IN QUOTE\n         MVC   1(5,R8),=C') NEW'       FINISH REPLY\n         LA    R8,6(R8)\n*\n*  UPDATE REPLY LENGTH FIELD AND SET FLAG TO TELL RECEIVE TO USE\n*    THE REPLY FIELD\n*\nFINI     EQU   *\n         L     R6,44(R7)               GET BEGINNING ADDRESS\n         SLR   R8,R6                   CALCULATE LENGTH OF REPLY\n         STH   R8,0(R6)                AND STORE IT\n         L     R8,8(R7)                ADDRESS OF FLAG BIT\n         OI    0(R8),X'08'             SET FLAG TO USE REPLY\n*\n*  EXIT THE EXIT\n*\nEXIT     EQU   *\n         SLR   R15,R15                 SET RETURN CODE TO ZERO\nEXITX    EQU   *\n         RETURN (14,12),RC=(15)        END THE EXIT\n*\n         LTORG\nERRMSG1  DS 0CL65\n         DC H'0063'\n         DC C'CREATION OF TEMPORARY DATA SET NAMES NOT SUPPORTED '\n         DC C'- USE SYSUT2'\n*\n         DS 0H\nERRMSG2  DS 0CL40\n         DC H'0038'\n         DC C'VOLSER OF SCRTCH NOT ALLOWED ON SYSUT2'\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n*\n*\n*  DSECTS\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         IEFJFCBN\n         IKJTCB\n         IEFTIOT1\n*\n         END   INMRZ11\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INMXZ01": {"ttr": 9735, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x97\\x00\\x97\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 151, "newlines": 151, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'INMXZ01' - TRANSMIT INITIALIZATION EXIT\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = INMXZ01                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = TRANSMIT INITIALIZATION EXIT         *\n*                                                                     *\n*             FUNCTION =                                              *\n*                EXIT PRVENTS MEMBERS OF JCLGRP FROM USING            *\n*                TRANSMIT.                                            *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *\n*                   GET ASCB ADDRESSABILITY                           *\n*                   GET ASXB ADDRESSABILITY                           *\n*                   DROP ASCB ADDRESSABILITY                          *\n*                   GET ACEE ADDRESSABILITY                           *\n*                   DROP ASXB ADDRESSABILITY                          *\n*                   IF USER HAS CONNECT GROUP 'JCLGRP',               *\n*                     EXIT WITH RC=4                                  *\n*                   ELSE,                                             *\n*                     EXIT WITH RC=0                                  *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  1       = PARAMETER LIST POINTER       *\n*                    REGISTER  2       = ASCB AND LATER TCB           *\n*                                        ADDRESSABILITY AND           *\n*                                        WORK REGISTER                *\n*                    REGISTER  3       = ASXB AND LATER TIOT          *\n*                                        ADDRESSABILITY AND           *\n*                                        WORK REGISTER                *\n*                    REGISTERS 4 - 10  = WORK REGISTERS               *\n*                    REGISTER  11      = ACEE ADDRESSABILITY          *\n*                    REGISTER  12      = BASE REGISTER                *\n*                    REGISTER  13      = SAVE AREA POINTER            *\n*                    REGISTER  14      = RETURN ADDRESS               *\n*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *\n*                                        RETURN CODE REGISTER         *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, RETURN, EQUATE                                 *\n*                                                                     *\n*             MAPPING MACROS USED =                                   *\n*                IHAACEE       ACEE MAP                               *\n*                IHAASCB       ASCB MAP                               *\n*                IHAASXB       ASXB MAP                               *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                02/21/85  WRITTEN.      BC.                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nINMXZ01 CSECT\n         SAVE  (14,12),,INMXZ01_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING INMXZ01,R12             ESTABLISH ADDRESSABILITY\n         LR    R7,R1                   PRESERVE PTR TO PARMS\n*\n*  CHECK TO SEE IF USER HAS CONNECT GROUP 'JCLGRP'.  IF SO,\n*    FAIL THE TRANSMIT.\n*\nCHKGRP   EQU   *\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 TELL ASSEMBLER\n         L     R3,ASCBASXB             GET ADDRESS OF ASXB\n         USING ASXB,R3                 TELL ASSEMBLER\n         L     R11,ASXBSENV            GET ADDRESS OF ACEE\n         DROP  R3\n         USING ACEE,R11                ESTABLISH ADDRESSABILITY TO ACEE\n         CLC   ACEEGRPN,=CL8'JCLGRP'   IS USER IN JCLGRP?\n         BNE   EXIT                    IF NOT, OK\n         L     R5,32(R7)               GET ADDRESS OF CHAIN\n         LA    R6,16(R5)               GET ADDRESS OF RECEIVE USERID\n         LH    R3,14(R5)               GET LENGTH OF USERID\nLOCUSER  EQU   *\n         GETMAIN R,LV=LAREA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE POINTER TO AREA\n         USING WORKAREA,R10            ESTABLISH ADDRESSABILITY\n         MVC   EXLOC(LDATA),DATA       MOVE DATA INTO WORK AREA\n         MVC   USERID+1(8),0(R6)       LOAD RECEIVE USERID\n         STCM  R3,B'0001',USERID       LOAD LENGTH OF USERID\n         LA    R3,LOCAEND-LOCAREA\n         ST    R3,LOCAREA\n         ICHEINTY LOCATE,TYPE='USR',ENTRY=USERID,                      X\n               WKAREA=LOCAREA,MF=(E,EXLOC)\n         LR    R3,R15                  SAVE RETURN CODE\n         FREEMAIN R,LV=LAREA,A=(10)    FREE THE GETMAINED AREA\n         LTR   R3,R3                   USER FOUND?\n         BZ    LU30                    IF SO, BRANCH\n         LA    R15,4                   SET RC TO FAIL TRANSMIT\n         B     EXITX                   AND EXIT\nLU30     EQU   *\n         CLI   0(R6),C'T'              DOES USERID START WITH 'T'?\n         BE    LU40                    IF SO, OK\n         LA    R15,4                   SET RC TO FAIL TRANSMIT\n         B     EXITX                   AND EXIT\nLU40     EQU   *\n         LA    R5,5                    CHECK FOR 5 NUMERICS\nLU50     EQU   *\n         LA    R6,1(R6)                GO TO NEXT CHARACTER\n         TM    0(R6),X'F0'             IS IT NUMERIC?\n         BNO   LU60                    IF NOT, BRANCH\n         BCT   R5,LU50                 KEEP CHECKING\n         B     EXIT                    ALL NUMERIC\nLU60     EQU   *\n         LA    R15,4                   SET RC TO FAIL TRANSMIT\n         B     EXITX\nEXIT     EQU   *\n         SLR   R15,R15                 SET RETURN CODE TO ZERO\nEXITX    EQU   *\n         RETURN (14,12),RC=(15)        END THE EXIT\n*\n         LTORG\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n*\n*  INITIAL DATA FOR WORK AREA\n*\nDATA     ICHEINTY LOCATE,TYPE='USR',MF=L\nLDATA    EQU  *-DATA\n*\n*  WORK AREA DSECT\n*\nWORKAREA DSECT\n*\nEXLOC    ICHEINTY LOCATE,TYPE='USR',MF=L\nUSERID   DS   AL1\n         DS   CL8\nLOCAREA  DS   F\n         DS   CL24\n         DS   F\nLOCAEND  EQU  *\nLAREA    EQU  *-WORKAREA\n*\n*\n*  DSECTS\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\n*\n         END   INMXZ01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JAFEX003": {"ttr": 9739, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xad\\x00\\xad\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 173, "newlines": 173, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JOB STATEMENT ACCOUNTING FIELD SCAN EXIT - PREAM+\n               BLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JOB STATEMENT ACCOUNTING FIELD SCAN EXIT 3        *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *\n*       ENFORCING DELUXE ACCOUNT FIELD STANDARDS WHICH ARE:          *\n*       ACCOUNT FIELD IS FOUR CHARACTERS OF THE FORM \"ABCN\".         *\n*           A     MUST BE AN \"M\" \"P\" \"G\" OR \"E\"                      *\n*           B     MUST BE ALPHABETIC                                 *\n*           C     MUST BE ALPHABETIC                                 *\n*           N     MUST BE NUMERIC                                    *\n*       IF ANY ONE OF THE ABOVE IS NOT FOLLOWED, THE JOB IS          *\n*       CANCELED WITH APPROPRIATE MESSAGE.                           *\n*                                                                    *\n*    ENTRY POINT = DLXXIT03                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0     LENGTH OF ACCOUNTING FIELD IN BYTES; IF NO            *\n*              ACCOUNTING FIELD IS SPECIFIED, THIS LENGTH IS 0       *\n*       R1     POINTER TO A 3-WORD PARAMETER LIST:                   *\n*              WORD1 (+0) - ADDR OF ACCNTING FIELD (JCTWORK IN JCT)  *\n*              WORD2 (+4) - ADDR OF EXIT FLAG BYTE, RDWFLAGX, IN PCE *\n*              WORD3 (+8) - ADDR OF JCTXWRK FIELD IN JCT             *\n*       R2-R9  N/A                                                   *\n*       R10    ADDRESS OF THE JCT                                    *\n*       R11    ADDRESS OF THE HCT                                    *\n*       R12    N/A                                                   *\n*       R13    ADDRESS OF THE HASPRDR PCE                            *\n*       R14    RETURN ADDRESS                                        *\n*       R15    ENTRY ADDRESS                                         *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-R1  N/A                                                   *\n*       R2-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH ADDITIONAL EXITS/HASPRDR PROCESSING. *\n*             =4  BYPASS EXITS. USE ACCTFLD ON JOBDEF                *\n*             =8  BYPASS HASPRSCN. COMPLETE HASPRJCS PROCESSING      *\n*             =12 CANCEL JOB. PRODUCE OUTPUT. BYPASS HASPRSCN.       *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n*    CHANGE ACTIVITY:                                                *\n*        02/02/87  WRITTEN.                                    JWC.  *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nJAFEX003 $MODULE $BUFFER,                                              +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D FOR MAPPING              +\n               $JOE,                    REQ'D BY $COMWORK              +\n               $MIT,                    REQ'D BY $MODULE               +\n               $PCE,                    HASP PROCESSOR CONTROL ELEMENT +\n               $RDRWORK,                HASP INPUT SERVICE PCE WORK    +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE JOB STATEMENT ACCOUNTING FIELD SCAN EXIT'\n         SPACE 1\n***********************************************************************\n*        JES2 - INITIALIZATION AND ADDRESSABILITY\n***********************************************************************\nDLXXIT03 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         SLR   R15,R15                  CLEAR REG 15\n         USING JCT,R10                  CLEAR REG 15\n         CLC   JOB,JCTJOBID             THIS A BATCH JOB?\n         BNE   RETURN                   NO, RETURN\n         TM    JCTUSER0+2,EXIT003       EXIT 03 PROCESSING COMPLETE?\n         BO    RETURN                   YES, RETURN\n         C     R0,FULL00                ACCOUNTING FIELD SUPPLIED?\n         BNE   ACCT00                   YES, VALIDATE JOB ACCTNG FIELDS\n         MVC   JCTXWRK,BADACCT1         ISSUE MESSAGE\n         B     CANJOB                   CANCEL JOB AND RETURN\n***********************************************************************\n*        JES2 - VALIDATE JOB ACCOUNTING FIELDS\n***********************************************************************\nACCT00   EQU   *\n         L     R2,0(R1)                 ADDR OF ACCOUNTING FIELD IN JCT\n         CLC   LPAREN,0(R2)             LEFT PARENTHESIS?\n         BNE   ACCT10                   NO, NO NEED TO INCREMENT R2\n         LA    R2,1(R2)                 POINT R2 PAST LEFT PARENTHESIS\nACCT10   EQU   *\n         CLC   CHAR_E,0(R2)             VALID 1ST CHARACTER?\n         BE    ACCT20                   YES, CHECK 2ND CHARACTER\n         CLC   CHAR_G,0(R2)             VALID 1ST CHARACTER?\n         BE    ACCT20                   YES, CHECK 2ND CHARACTER\n         CLC   CHAR_M,0(R2)             VALID 1ST CHARACTER?\n         BE    ACCT20                   YES, CHECK 2ND CHARACTER\n         CLC   CHAR_P,0(R2)             VALID 1ST CHARACTER?\n         BE    ACCT20                   YES, CHECK 2ND CHARACTER\n         MVC   JCTXWRK,BADACCT2         ISSUE MESSAGE\n         B     CANJOB                   CANCEL JOB AND RETURN\nACCT20   EQU   *\n         CLC   SCHAR1,1(R2)             VALID 2ND CHARACTER?\n         BE    ACCT30                   NO, ISSUE MESSAGE & RETURN\n         CLC   SCHAR2,1(R2)             VALID 2ND CHARACTER?\n         BE    ACCT30                   NO, ISSUE MESSAGE & RETURN\n         CLC   SCHAR3,1(R2)             VALID 2ND CHARACTER?\n         BE    ACCT30                   NO, ISSUE MESSAGE & RETURN\n         TM    1(R2),NUMERIC            VALID 2ND CHARACTER?\n         BO    ACCT30                   NO, ISSUE MESSAGE & RETURN\n         TM    1(R2),ALPHA              VALID 2ND CHARACTER?\n         BNO   ACCT30                   NO, ISSUE MESSAGE & RETURN\n         CLC   SCHAR1,2(R2)             VALID 3RD CHARACTER?\n         BE    ACCT30                   NO, ISSUE MESSAGE & RETURN\n         CLC   SCHAR2,2(R2)             VALID 3RD CHARACTER?\n         BE    ACCT30                   NO, ISSUE MESSAGE & RETURN\n         CLC   SCHAR3,2(R2)             VALID 3RD CHARACTER?\n         BE    ACCT30                   NO, ISSUE MESSAGE & RETURN\n         TM    2(R2),ALPHA              VALID 3RD CHARACTER?\n         BNO   ACCT30                   NO, ISSUE MESSAGE & RETURN\n         CLC   SCHAR4,3(R2)             VALID 4TH CHARACTER?\n         BE    ACCT40                   NO, ISSUE MESSAGE & RETURN\n         TM    3(R2),NUMERIC            VALID 4TH CHARACTER?\n         BNO   ACCT40                   NO, ISSUE MESSAGE & RETURN\n         B     RETURN                   OK, WE'RE DONE\nACCT30   EQU   *\n         MVC   JCTXWRK,BADACCT3         ISSUE MESSAGE\n         B     CANJOB                   CANCEL JOB AND RETURN\nACCT40   EQU   *\n         MVC   JCTXWRK,BADACCT4         ISSUE MESSAGE\n         B     CANJOB                   CANCEL JOB AND RETURN\n***********************************************************************\n*        JES2 - CANCEL JOB\n***********************************************************************\nCANJOB   EQU   *\n         L     R2,4(R1)                 ADDRESS OF EXIT FLAG BYTE\n         OI    0(R2),RDWXXSNC           WE'VE SUPPLIED NEXT STMT IMAGE\n         OI    JCTUSER4,BYTEFF          JOB WILL BE CANCELED IN EXIT020\n***********************************************************************\n*        JES2 - RESTORE REGISTERS AND RETURN\n***********************************************************************\nRETURN   EQU   *\n         OI    JCTUSER0+2,EXIT003       EXIT 03 PROCESSING COMPLETE\n         $RETURN RC=(R15)               RETURN TO CALLER\n***********************************************************************\n*        JES2 - FLAGS\n***********************************************************************\nEXIT003  EQU   X'02'                    EXIT 03 PROCESSING COMPLETE\nALPHA    EQU   X'C0'                    INDICATES ALPHABETIC CHAR\nNUMERIC  EQU   X'F0'                    INDICATES NUMERIC CHAR\nBYTEFF   EQU   X'FF'                    BYTE CONSTANT, VALUE X'FF'\n***********************************************************************\n*        JES2 - CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                    FULLWORD CONSTANT, VALUE X'00'\nBADACCT1 DC    CL80'//*** ERROR ***  NO ACCOUNTING FIELD SUPPLIED ON TH+\n               E JOB STATEMENT              '\nBADACCT2 DC    CL80'//*** ERROR ***  ILLEAGAL 1ST CHARACTER IN ACCOUNTI+\n               NG FIELD. (''E'',''G'',''M'',''P'')  '\nBADACCT3 DC    CL80'//*** ERROR ***  2ND AND 3RD CHARS OF JOB ACCOUNTIN+\n               G FIELD MUST BE ALPHABETIC   '\nBADACCT4 DC    CL80'//*** ERROR ***  4TH CHARACTER OF JOB ACCOUNTING FI+\n               ELD MUST BE NUMERIC          '\nJOB      DC    C'JOB'                   JCTJOBID FOR BATCH JOB\nCHAR_E   DC    C'E'                     CHARACTER CONSTANT\nCHAR_G   DC    C'G'                     CHARACTER CONSTANT\nCHAR_M   DC    C'M'                     CHARACTER CONSTANT\nCHAR_P   DC    C'P'                     CHARACTER CONSTANT\nSCHAR1   DC    C'{'                     CHARACTER CONSTANT\nSCHAR2   DC    C'}'                     CHARACTER CONSTANT\nSCHAR3   DC    C'\\'                     CHARACTER CONSTANT\nSCHAR4   DC    C'|'                     CHARACTER CONSTANT\nLPAREN   DC    C'('                     CHARACTER CONSTANT\n         LTORG\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLEX004": {"ttr": 9988, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xe9\\x00\\xe9\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 233, "newlines": 233, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JCL AND JES2 CONTROL STATEMENT SCAN - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JCL AND JES2 CONTROL STMT SCAN EXIT 4             *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *\n*       CANCELING ALL JOBS WHICH USE EITHER 'TIME=' OR               *\n*       'TIME.PROCSTEPNAME=' ON THE EXEC STATEMENT UNLESS            *\n*       PERMITTED BY RACF. ALSO, CANCELS JOBS WHICH USE              *\n*       'JOBPARM' STATEMENT, UNLESS PERMITTED BY RACF.               *\n*                                                                    *\n*    ENTRY POINT = DLXXIT04                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0     CODE INDICATING JES2 OR JCL CONTROL STATEMENT         *\n*              0 - INDICATES A JES2 CONTROL STATEMENT                *\n*              4 - INDICATES A JCL STATEMENT                         *\n*       R1     POINTER TO A 3-WORD PARAMETER LIST:                   *\n*              WORD1 (+0) - ADDR OF CNTL STMT IMAGE BUFFER           *\n*              WORD2 (+4) - ADDR OF EXIT FLAG BYTE, RDWFLAGX, IN PCE *\n*              WORD3 (+8) - ADDR OF JCTXWRK FIELD IN JCT             *\n*       R2-R9  N/A                                                   *\n*       R10    ADDRESS OF THE JCT                                    *\n*       R11    ADDRESS OF THE HCT                                    *\n*       R12    N/A                                                   *\n*       R13    ADDRESS OF THE HASPCOMM PCE                           *\n*       R14    RETURN ADDRESS                                        *\n*       R15    ENTRY ADDRESS                                         *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-R1  N/A                                                   *\n*       R2-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH ADDITIONAL EXITS/HASPRDR PROCESSING  *\n*             =4  CONTINUE WITH NORMAL HASPRDR PROCESSING            *\n*             =8  CONVERT STMT TO COMMENT(//*), BYPASS HASPRCCS      *\n*             =12 CANCEL JOB. PRODUCE OUTPUT.                        *\n*             =16 CANCEL JOB. NO OUTPUT IS PRODUCED.                 *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n*    CHANGE ACTIVITY:                                                *\n*        01/19/87  WRITTEN.                                    JWC.  *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nJCLEX004 $MODULE $BUFFER,                                              +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D FOR MAPPING              +\n               $JOE,                    REQ'D BY $COMWORK              +\n               $MIT,                    REQ'D BY $MODULE               +\n               $PCE,                    HASP PROCESSOR CONTROL ELEMENT +\n               $RDRWORK,                HASP INPUT SERVICE PCE WORK    +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE JCL AND JES2 CONTROL STATEMENT SCAN EXIT'\n         SPACE 1\n***********************************************************************\n*        JES2 - INITIALIZATION AND ADDRESSABILITY\n***********************************************************************\nDLXXIT04 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         SLR   R15,R15                  CLEAR REG 15\n         USING JCT,R10                  CLEAR REG 15\n         CLC   JOB,JCTJOBID             THIS A BATCH JOB?\n         BNE   RETURN                   NO, RETURN\n         L     R2,0(R1)                 POINT TO CNTL STMT IMAGE BUFFER\n         LA    R3,70                    MAX LENGTH OF CNTL STMT BUFFER\n         CLC   ERROR,0(R2)              SHOULD JOB BE CANCELED?\n         BE    CANJOB10                 YES, SET FLAG AND RETURN\n         C     R0,FULL00                JES2 CONTROL STATEMENT?\n         BE    JPRM00                   YES, CHECK FOR 'JOBPARM' STMT\n         CLC   COMMENT,0(R2)            COMMENT STATEMENT?\n         BE    RETURN                   YES, RETURN\n         CLC   JOBCAT,0(R2)             JOBCAT,STATEMENT?\n         BE    JOBCAT00                 YES, CHECK AUTHORIZATION\n         CLC   STEPCAT,0(R2)            STEPCAT,STATEMENT?\n         BE    STPCAT00                 YES, CHECK AUTHORIZATION\n         CLC   CONTINUE,0(R2)           CONTINUATION STATEMENT?\n         BNE   EXEC00                   NO, SCAN FOR EXEC\n         TM    JCTUSER1,CONTFLAG        THIS CONTINUATION OF EXEC STMT?\n         BNO   RETURN                   NO, RETURN\n***********************************************************************\n*        JES2 - SEARCH FOR 'TIME' PARAMETER\n***********************************************************************\nTIME00   EQU   *\n         CLC   TIME1,0(R2)              IS THIS ',TIME='?\n         BE    TIME10                   YES, CHECK FOR AUTHORITY\n         CLC   TIME2,0(R2)              IS THIS ',TIME.'?\n         BE    TIME10                   YES, CHECK FOR AUTHORITY\n         CLC   TIME3,0(R2)              IS THIS ' TIME='?\n         BE    TIME10                   YES, CHECK FOR AUTHORITY\n         CLC   TIME4,0(R2)              IS THIS ' TIME.'?\n         BE    TIME10                   YES, CHECK FOR AUTHORITY\n         CLC   TRAILCOM,0(R2)           IS THIS ', ' (TRAILING COMMA)?\n         BE    RETURN                   RETURN WITHOUT RESETTING FLAG\n         LA    R2,1(R2)                 NO, INCREMENT REG2\n         BCT   R3,TIME00                CONTINUE TO SCAN FOR 'TIME'\n         NI    JCTUSER1,NADA            RESET CONTFLAG\n         B     RETURN                   END OF EXEC STMT. NO 'TIME'.\nTIME10   EQU   *\n         TM    JCTUSER0,TIMEAUTH        DEFAULT TIME OVERRIDE ALLOWED?\n         BO    RETURN                   YES, RETURN\n         MVC   JCTXWRK,BADTIME1         ISSUE MESSAGE\n         B     CANJOB00                 CANCEL JOB AND RETURN\n***********************************************************************\n*        JES2 - DETERMINE IF 'EXEC' STATEMENT\n***********************************************************************\nEXEC00   EQU   *\n         CLC   EXEC,0(R2)               IS THIS ' EXEC '?\n         BE    EXEC10                   YES, SET CONTFLAG\n         LA    R2,1(R2)                 NO, INCREMENT REG2\n         BCT   R3,EXEC00                CONTINUE TO SCAN FOR 'EXEC'\n         B     RETURN                   RETURN, NOT AN 'EXEC' STMT\nEXEC10   EQU   *\n         OI    JCTUSER1,CONTFLAG        SET CONTFLAG\n         B     TIME00                   LOOK FOR 'TIME' PARAMETER\n***********************************************************************\n*        JES2 - SCAN '/*JOBPARM' STMT FOR 'TIME' & 'LINES' PARMS\n***********************************************************************\nJPRM00   EQU   *\n         CLC   JOBPARM,0(R2)            'JOBPARM' STATEMENT?\n         BNE   RETURN                   NO, RETURN\n         LR    R3,R2                    ADDRESS 'JOBPARM' STATEMENT\n         LA    R4,70                    MAXIMUM LENGTH OF JOBPARM\nJPRM10   EQU   *\n         CLC   TIME1,0(R3)              IS THIS ',TIME='?\n         BE    JPRM20                   YES, CHECK FOR AUTHORITY\n         CLC   TIME3,0(R3)              IS THIS ' TIME='?\n         BE    JPRM20                   YES, CHECK FOR AUTHORITY\n         CLC   TIME5,0(R3)              IS THIS ',T='?\n         BE    JPRM20                   YES, CHECK FOR AUTHORITY\n         CLC   TIME6,0(R3)              IS THIS ' T='?\n         BE    JPRM20                   YES, CHECK FOR AUTHORITY\n         CLC   LINE1,0(R3)              IS THIS ',LINES='?\n         BE    JPRM30                   YES, CHECK FOR AUTHORITY\n         CLC   LINE2,0(R3)              IS THIS ' LINES='?\n         BE    JPRM30                   YES, CHECK FOR AUTHORITY\n         CLC   LINE3,0(R3)              IS THIS ',L='?\n         BE    JPRM30                   YES, CHECK FOR AUTHORITY\n         CLC   LINE4,0(R3)              IS THIS ' L='?\n         BE    JPRM30                   YES, CHECK FOR AUTHORITY\n         LA    R3,1(R3)                 NO, INCREMENT REG 3\n         BCT   R4,JPRM10                CONTINUE TO SCAN '/*JOBPARM'\n         B     RETURN                   END OF '/*JOBPARM'; WE'RE DONE\nJPRM20   EQU   *\n         TM    JCTUSER0,TIMEAUTH        DEFAULT TIME OVERRIDE ALLOWED?\n         BO    RETURN                   YES, RETURN\n         MVC   JCTXWRK,BADTIME2         ISSUE MESSAGE\n         B     CANJOB00                 CANCEL JOB AND RETURN\nJPRM30   EQU   *\n         TM    JCTUSER0,LINEAUTH        DEFAULT TIME OVERRIDE ALLOWED?\n         BO    RETURN                   YES, RETURN\n         MVC   JCTXWRK,BADLINE          ISSUE MESSAGE\n         B     CANJOB00                 CANCEL JOB AND RETURN\n***********************************************************************\n*        JES2 - CHECK FOR '//JOBCAT' AUTHORIZATION\n***********************************************************************\nJOBCAT00 EQU   *\n         TM    JCTUSER0,JCATAUTH        '//JOBCAT' USE ALLOWED?\n         BO    RETURN                   YES, RETURN\n         MVC   JCTXWRK,BADJCAT          ISSUE MESSAGE\n         B     CANJOB00                 YES, RETURN\n***********************************************************************\n*        JES2 - CHECK FOR '//STEPCAT' AUTHORIZATION\n***********************************************************************\nSTPCAT00 EQU   *\n         TM    JCTUSER0,SCATAUTH        '//STEPCAT' USE ALLOWED?\n         BO    RETURN                   YES, RETURN\n         MVC   JCTXWRK,BADSCAT          ISSUE MESSAGE\n***********************************************************************\n*        JES2 - CANCEL JOB\n***********************************************************************\nCANJOB00 EQU   *\n         L     R2,4(R1)                 ADDRESS OF EXIT FLAG BYTE\n         OI    0(R2),RDWXXSNC           WE'VE SUPPLIED NEXT STMT IMAGE\nCANJOB10 EQU   *\n         OI    JCTUSER4,BYTEFF          JOB WILL BE CANCELED IN EXIT020\n***********************************************************************\n*        JES2 - RESTORE REGISTERS AND RETURN\n***********************************************************************\nRETURN   EQU   *\n         $RETURN RC=(R15)               RETURN TO CALLER\n***********************************************************************\n*        JES2 - FLAGS\n***********************************************************************\nNADA     EQU   X'00'                    INITIALIZATION VALUE\nTIMEAUTH EQU   X'01'                    ALLOWS 'TIME' PARM USE\nLINEAUTH EQU   X'04'                    ALLOWS UNLIMITTED LINES SYSOUT\nJCATAUTH EQU   X'08'                    ALLOWS USE OF '//JOBCAT' STMT\nSCATAUTH EQU   X'10'                    ALLOWS USE OF '//STEPCAT' STMT\nBYTEFF   EQU   X'FF'                    BYTE CONSTANT, VALUE X'FF'\nCONTFLAG EQU   X'FF'                    CONTINUATION OF EXEC STMT\n***********************************************************************\n*        JES2 - CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                    FULLWORD CONSTANT, VALUE X'00'\nCOMMENT  DC    C'//* '                  CONSTANT STATEMENT INDICATOR\nCONTINUE DC    C'// '                   CONTINUATION STMT INDICATOR\nJOBCAT   DC    C'//JOBCAT'              '//JOBCAT' STMT INDICATOR\nSTEPCAT  DC    C'//STEPCAT'             '//STPCAT' STMT INDICATOR\nJOBPARM  DC    C'/*JOBPARM '            'JOBPARM' STMT INDICATOR\nBADTIME1 DC    CL80'//*** ERROR ***  YOU ARE NOT AUTHORIZED TO USE THE +\n               ''TIME'' PARAMETER ON EXEC STMT'\nBADTIME2 DC    CL80'//*** ERROR ***  YOU ARE NOT AUTHORIZED TO USE THE +\n               ''TIME'' PARM ON ''/*JOBPARM''   '\nBADLINE  DC    CL80'//*** ERROR ***  YOU ARE NOT AUTHORIZED TO USE THE +\n               ''LINES'' PARM ON ''/*JOBPARM''  '\nBADJCAT  DC    CL80'//*** ERROR ***  YOU ARE NOT AUTHORIZED TO USE THE +\n               ''//JOBCAT'' STATEMENT           '\nBADSCAT  DC    CL80'//*** ERROR ***  YOU ARE NOT AUTHORIZED TO USE THE +\n               ''//STEPCAT'' STATEMENT          '\nERROR    DC    C'//*** ERROR ***'\nTIME1    DC    C',TIME='                TIME PARAMETER\nTIME2    DC    C',TIME.'                TIME PARAMETER\nTIME3    DC    C' TIME='                TIME PARAMETER\nTIME4    DC    C' TIME.'                TIME PARAMETER\nTIME5    DC    C',T='                   TIME PARAMETER\nTIME6    DC    C' T='                   TIME PARAMETER\nLINE1    DC    C',LINES='               LINES PARAMETER\nLINE2    DC    C' LINES='               LINES PARAMETER\nLINE3    DC    C',L='                   LINES PARAMETER\nLINE4    DC    C' L='                   LINES PARAMETER\nTRAILCOM DC    C', '                    TRAILING COMMA\nEXEC     DC    C' EXEC '                EXEC PARAMETER\nJOB      DC    C'JOB'                   INDICATES BATCH JOB\n         LTORG\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOBEX002": {"ttr": 9993, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\x06\\x02\\x06\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 518, "newlines": 518, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JOB STATEMENT SCAN EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JOB STATEMENT SCAN EXIT 2                         *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *\n*       OF SETTING A DEFAULT TIME WHICH IS DEPENDENT UPON            *\n*       JOB CLASS. IF THE USER HAS SPECIFIED A 'TIME'                *\n*       PARAMETER ON THE JOB STMT, THE JOB WILL BE CANCELED          *\n*       UNLESS THE USER HAS READ AUTHORITY TO AN APPL OF 'TIME'.     *\n*       THE EXIT ALSO CHECKS FOR READ AUTHORITY TO AN APPL OF        *\n*       'JOBPARM'. RACF AUTHORITY INFORMATION IS STORED IN THE       *\n*       JCT FOR FUTURE ACCESS BY OTHER EXITS.                        *\n*                                                                    *\n*    ENTRY POINT = DLXXIT02                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0     CODE INDICATING TYPE OF JOB STATEMENT BEING SCANNED   *\n*              0 - INDICATES AN INITIAL JOB STATEMENT IMAGE          *\n*              4 - INDICATES A SUBSEQUENT JOB CONTINUATION STATEMENT *\n*       R1     ADDRESS OF A 3-WORD PARAMETER LIST:                   *\n*              WORD1 (+0) - POINTS TO THE JOB STATEMENT IMAGE BUFFER *\n*              WORD2 (+4) - POINTS TO EXIT FLAG BYTE, RDWFLAGX, PCE  *\n*              WORD3 (+8) - POINTS TO JCTXWRK FIELD IN JCT           *\n*       R2-R9  N/A                                                   *\n*       R10    ADDRESS OF THE JCT                                    *\n*       R11    ADDRESS OF THE HCT                                    *\n*       R12    N/A                                                   *\n*       R13    ADDRESS OF THE PCE                                    *\n*       R14    RETURN ADDRESS                                        *\n*       R15    ENTRY ADDRESS                                         *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-R1  N/A                                                   *\n*       R2-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH ADDITIONAL EXITS/HASPRDR PROCESSING  *\n*             =4  CONTINUE WITH NORMAL HASPRDR PROCESSING            *\n*             =8  CANCEL JOB. PRODUCE OUTPUT.                        *\n*             =12 PURGE JOB. NO OUTPUT IS PRODUCED.                  *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n*    CHANGE ACTIVITY:                                                *\n*        01/20/87  WRITTEN.                                    JWC.  *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nJOBEX002 $MODULE $BUFFER,                                              +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D FOR MAPPING              +\n               $JOE,                    REQ'D BY $COMWORK              +\n               $MIT,                    REQ'D BY $MODULE               +\n               $PCE,                    HASP PROCESSOR CONTROL ELEMENT +\n               $RDRWORK,                HASP INPUT SERVICE PCE WORK    +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE JOB STATEMENT SCAN EXIT'\n         SPACE 1\n***********************************************************************\n*        JES2 - INITIALIZATION AND ADDRESSABILITY\n***********************************************************************\nDLXXIT02 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         SLR   R15,R15                  CLEAR REG 15\n         LR    R5,R1                    SAVE PARMLIST ADDRESS\n         USING JCT,R10                  ADDRESSABILITY TO JCT\n         USING HCT,R11                  ADDRESSABILITY TO HCT\n         CLC   JOB,JCTJOBID             THIS A BATCH JOB?\n         BNE   RETURN                   NO, RETURN\n         TM    JCTUSER0+2,EXIT002       EXIT 02 PROCESSING COMPLETED?\n         BO    RETURN                   YES, WE'RE DONE\n         C     R0,FULL00                INITIAL JOB STATEMENT?\n         BNE   PARMS000                 NO, DON'T INITIALIZE JCTUSER'S\n         MVC   JCTUSER0,FULL00          INITIALIZE JCTUSER FIELDS\n         MVC   JCTUSER1,FULL00          INITIALIZE JCTUSER FIELDS\n         MVC   JCTUSER2,FULL00          INITIALIZE JCTUSER FIELDS\n         MVC   JCTUSER3,FULL00          INITIALIZE JCTUSER FIELDS\n         MVC   JCTUSER4,FULL00          INITIALIZE JCTUSER FIELDS\n***********************************************************************\n*        JES2 - SEARCH FOR 'TIME', 'CLASS' AND/OR 'USER' PARAMETERS\n***********************************************************************\nPARMS000 EQU   *\n         SLR   R15,R15                  CLEAR REG 15\n         L     R2,0(R5)                 POINT TO JOB STMT IMAGE BUFFER\n         LA    R3,70                    MAX LENGTH OF JOB STMT BUFFER\n         LR    R4,R2                    POSITION OF LAST NON-BLANK\n         CLC   ERROR,0(R2)              SHOULD THIS JOB BE CANCELED?\n         BE    PARMS080                 YES, SET FLAG AND RETURN\nPARMS010 EQU   *\n         CLC   TIME1,0(R2)              IS THIS ',TIME='?\n         BE    PARMS030                 YES, SET TIME FLAG\n         CLC   TIME2,0(R2)              IS THIS ' TIME='?\n         BE    PARMS030                 YES, SET TIME FLAG\n         CLC   CLASS1,0(R2)             IS THIS ',CLASS='?\n         BE    PARMS040                 YES, UPDATE JCTJCLAS IN JCT\n         CLC   CLASS2,0(R2)             IS THIS ' CLASS='?\n         BE    PARMS040                 YES, UPDATE JCTJCLAS IN JCT\n         CLC   USER1,0(R2)              IS THIS ',USER='?\n         BE    PARMS050                 YES, UPDATE JCTUSEID IN JCT\n         CLC   USER2,0(R2)              IS THIS ' USER='?\n         BE    PARMS050                 YES, UPDATE JCTUSEID IN JCT\n         CLC   TRAILCOM,0(R2)           IS THIS ', ' (TRAILING COMMA)?\n         BE    RETURN                   END OF STMT, CONTINUATION NEXT\n         CLC   0(1,R2),SPACES           IS THIS ' '?\n         BE    PARMS020                 YES, DON'T CHANGE R4\n         LR    R4,R2                    REMEMBER LAST NON-BLANK\nPARMS020 EQU   *\n         LA    R2,1(R2)                 INCREMENT REG2\n         BCT   R3,PARMS010              CONTINUE TO SCAN\n         B     RACF000                  PERFORM POST JOBCARD PROCESSING\nPARMS030 EQU   *\n         TM    JCTUSER0+1,TIMEDFLT      EXIT SPECIFIED 'TIME' PARM?\n         BO    PARMS020                 CONTINUE\n         OI    JCTUSER0+1,TIMEUSER      INDICATE USER SPECIFIED PARM\n         B     PARMS020                 CONTINUE\nPARMS040 EQU   *\n         OI    JCTUSER0+1,JOBCLASS      SET FLAG\n         MVC   JCTJCLAS,7(R2)           UPDATE JOB CLASS IN JCT\n         B     PARMS020                 CONTINUE\nPARMS050 EQU   *\n         OI    JCTUSER0+1,JOBUSEID      SET FLAG\n         MVC   JCTUSEID,SPACES          INITIALIZE JCTUSEID\n         LA    R6,6(R2)                 ADDRESS OF USERID FROM JOBCARD\n         LA    R7,JCTUSEID              ADDRESS OF USERID FOR JCT\n         LA    R8,8                     MAXIMUM LENGTH OF USERID\nPARMS060 EQU   *\n         CLC   COMMA,0(R6)              END OF USERID?\n         BE    PARMS070                 YES, DETERMINE LENGTH\n         CLC   0(1,R6),SPACES           END OF USERID?\n         BE    PARMS070                 YES, DETERMINE LENGTH\n         MVC   0(1,R7),0(R6)            MOVE USERID TO JCT\n         LA    R6,1(R6)                 INCREMENT REG 6\n         LA    R7,1(R7)                 INCREMENT REG 7\n         BCT   R8,PARMS060              CONTINUE\nPARMS070 EQU   *\n         LA    R6,8                     MAXIMUM LENGTH OF USERID\n         SR    R6,R8                    ACTUAL LENGTH OF USERID\n         ST    R6,JCTUSER1              STORE LENGTH FOR FUTURE USE\n         B     PARMS020                 CONTINUE\nPARMS080 EQU   *\n         OI    JCTUSER4,BYTEFF          JOB WILL BE CANCELED IN EXIT020\n         B     RETURN                   RETURN\n***********************************************************************\n*        JES2 - PERFORM POST JOBCARD RACF PROCESSING\n***********************************************************************\nRACF000  EQU   *\n         TM    JCTUSER0+1,JOBUSEID      USER-ID SPECIFIED ON JOB STMT?\n         BO    RACF010                  YES, CHECK FOR JOB CLASS\n         MVC   JCTXWRK,BADUSER          SET ERROR MESSAGE\n         B     CANJOB10                 CANCEL JOB AND RETURN\nRACF010  EQU   *\n         TM    JCTUSER0+1,JOBCLASS      CLASS SPECIFIED ON JOB STMT?\n         BO    RACF020                  YES, GETMAIN DYNAMIC STORAGE\n         MVC   JCTXWRK,BADCLAS2         SET ERROR MESSAGE\n         B     CANJOB10                 CANCEL JOB AND RETURN\nRACF020  EQU   *\n         OI    JCTUSER0+2,EXIT002       EXIT 02 PROCESSING COMPLETE\n         LA    R0,WORKLEN               LENGTH OF GETMAIN AREA\n         $GETMAIN RC,LV=(R0),SP=230,LOC=BELOW    GETTMAIN STG FOR RACF\n         LR    R9,R1                    R9 - ADDRESS OF GETMAINED AREA\n         USING RACWORK,R9               ESTABLISH ADDRESSABILITY TO\n*                                       DYNAMIC WORKAREA\nRACF030  EQU   *\n         MVC   UID,JCTUSEID             GET USERID FOR RACINIT\n         L     R6,JCTUSER1              GET USER-ID LENGTH FROM JCT\n         STC   R6,UIDLEN                STORE IT FOR RACINIT PROCESSING\n         LA    R6,UIDLEN                USER ID AND LENGTH\n         LA    R7,ACEEADDR              ADD A WORK AREA\n         MVC   JCTXWRK,BADRACF1         SET ERROR MESSAGE\n         MVC   RACLIST2(INITLEN2),INITDAT2    MOVE STATIC TO DYNAMIC\n         RACINIT USERID=(R6),PASSCHK=NO,ENVIR=CREATE,ACEE=(R7),        +\n               SUBPOOL=230,MF=(E,RACLIST2)\n         LTR   R15,R15                  HOW DID IT GO?\n         BNZ   RACF210                  NOT SO GOOD,CANCEL JOB & RETURN\n         MVC   CLASCNST(8),SPACES       INITIALIZE\n         MVC   CLASCNST,CLASVALU        UPDATE RESOURCE NAM IN CLASLIST\n         MVC   CLASS,JCTJCLAS           UPDATE JOB CLASS IN CLASLIST\n         MVC   RACLIST1(INITLEN1),INITDAT1  MOVE STATIC TO DYNAMIC\n         LA    R6,CLASCNST              ADDRESS OF 'CLASS_' APPL\n         L     R7,ACEEADDR              ACEE ADDRESS\n         RACROUTE ENTITY=((R6)),CLASS=APPL,LOG=NOSTAT,ACEE=(R7),       +\n               REQUEST=AUTH,WORKA=RACWK,                               +\n               MF=(E,RACLIST1)          CLASS='APPL', PROFILE='CLASS_'\n         C     R15,FULL08               SKIP BRANCH TABLE?\n         BH    RACF070                  YES, ISSUE BADRACF2 MESSAGE\n         B     RACF040(R15)             CHECK RETURN CODE\nRACF040  EQU   *\n         B     RACF080                  RC = 00 USER AUTHORIZED (CLASS)\n         B     RACF050                  RC = 04 NOT PROTECTED (CLASS)\n         B     RACF060                  RC = 08 NOT AUTHORIZED (CLASS)\nRACF050  EQU   *\n         MVC   JCTXWRK,BADCLAS1         ISSUE ERROR MESSAGE\n         B     RACF210                  CANCEL JOB AND RETURN\nRACF060  EQU   *\n         MVC   JCTXWRK,BADCLAS3         ISSUE ERROR MESSAGE\n         B     RACF210                  CANCEL JOB AND RETURN\nRACF070  EQU   *\n         MVC   JCTXWRK,BADRACF2         ISSUE ERROR MESSAGE\n         B     RACF210                  CANCEL JOB AND RETURN\nRACF080  EQU   *\n         MVC   RACLIST1(INITLEN1),INITDAT1  MOVE STATIC TO DYNAMIC\n         LA    R6,TIMEAPPL              ADDRESS OF 'TIME' APPL\n         L     R7,ACEEADDR              ACEE ADDRESS\n         RACROUTE ENTITY=((R6)),CLASS=APPL,LOG=NOSTAT,ACEE=(R7),       +\n               REQUEST=AUTH,WORKA=RACWK,                               +\n               MF=(E,RACLIST1)          CLASS='APPL', PROFILE='TIME'\n         LTR   R15,R15                  AUTHORITY FOR 'TIME' PARMS?\n         BNZ   RACF090                  NO, DON'T SET FLAG IN JCT\n         OI    JCTUSER0,TIMEAUTH        SET FLAG\nRACF090  EQU   *\n         MVC   RACLIST1(INITLEN1),INITDAT1  MOVE STATIC TO DYNAMIC\n         LA    R6,TAPEAPPL              ADDRESS OF 'TAPE' APPL\n         L     R7,ACEEADDR              ACEE ADDRESS\n         RACROUTE ENTITY=((R6)),CLASS=APPL,LOG=NOSTAT,ACEE=(R7),       +\n               REQUEST=AUTH,WORKA=RACWK,                               +\n               MF=(E,RACLIST1)          CLASS='APPL', PROFILE='TAPE'\n         LTR   R15,R15                  AUTHORITY FOR UNLIMITTED TAPES?\n         BNZ   RACF100                  NO, DON'T SET FLAG IN JCT\n         OI    JCTUSER0,TAPEAUTH        SET FLAG\nRACF100  EQU   *\n         MVC   RACLIST1(INITLEN1),INITDAT1  MOVE STATIC TO DYNAMIC\n         LA    R6,LINEAPPL              ADDRESS OF 'LINE' APPL\n         L     R7,ACEEADDR              ACEE ADDRESS\n         RACROUTE ENTITY=((R6)),CLASS=APPL,LOG=NOSTAT,ACEE=(R7),       +\n               REQUEST=AUTH,WORKA=RACWK,                               +\n               MF=(E,RACLIST1)          CLASS='APPL', PROFILE='LINE'\n         LTR   R15,R15                  AUTHORITY FOR UNLIMITTED LINES?\n         BNZ   RACF110                  NO, DON'T SET FLAG IN JCT\n         OI    JCTUSER0,LINEAUTH        SET FLAG\nRACF110  EQU   *\n         MVC   RACLIST1(INITLEN1),INITDAT1  MOVE STATIC TO DYNAMIC\n         LA    R6,JCATAPPL              ADDRESS OF 'JOBCAT' APPL\n         L     R7,ACEEADDR              ACEE ADDRESS\n         RACROUTE ENTITY=((R6)),CLASS=APPL,LOG=NOSTAT,ACEE=(R7),       +\n               REQUEST=AUTH,WORKA=RACWK,                               +\n               MF=(E,RACLIST1)          CLASS='APPL', PROFILE='JOBCAT'\n         LTR   R15,R15                  AUTHORITY FOR '//JOBCAT' USE?\n         BNZ   RACF120                  NO, DON'T SET FLAG IN JCT\n         OI    JCTUSER0,JCATAUTH        SET FLAG\nRACF120  EQU   *\n         MVC   RACLIST1(INITLEN1),INITDAT1  MOVE STATIC TO DYNAMIC\n         LA    R6,SCATAPPL              ADDRESS OF 'STEPCAT' APPL\n         L     R7,ACEEADDR              ACEE ADDRESS\n         RACROUTE ENTITY=((R6)),CLASS=APPL,LOG=NOSTAT,ACEE=(R7),       +\n               REQUEST=AUTH,WORKA=RACWK,                               +\n               MF=(E,RACLIST1)          CLASS='APPL', PROFILE='STEPCAT'\n         LTR   R15,R15                  AUTHORITY FOR '//STEPCAT' USE?\n         BNZ   RACF130                  NO, DON'T SET FLAG IN JCT\n         OI    JCTUSER0,SCATAUTH        SET FLAG\nRACF130  EQU   *\n         MVC   CLASLIST,HALF01          SET NUMBER OF RESOURCE CLASSES\n         MVI   CLASLEN,BYTE06           SET CLASS LENGTH\n         MVC   CLASCNST(8),SPACES       INITIALIZE\n         MVC   CLASCNST,CLASVALU        SET RESOURCE NAME\n         MVC   CLASS,JCTJCLAS           SET JOB CLASS IN RESOURCE NAME\n         L     R7,ACEEADDR              POINTER TO ACEE ADDRESS\n         MVC   RACLIST3(INITLEN3),INITDAT3  STATIC INFO TO DYNAMIC FORM\n         RACROUTE CLASS=APPLNAM,LIST=CLASLIST,ENVIR=CREATE,ACEE=(R7),  +\n               SUBPOOL=230,REQUEST=LIST,WORKA=RACWK,                   +\n               MF=(E,RACLIST3)          BUILD IN-STORAGE PROFILES\n         LTR   R15,R15                  SUCCESSFUL?\n         BNZ   RACF050                  NO, MUST BE ILLEAGAL JOB CLASS\n         L     R6,ACEEADDR              POINTER TO ACEE ADDRESS\n         USING ACEE,R6                  ESTABLISH ADDRESSABILITY - ACEE\n         L     R6,ACEECLCP              LOAD ADDR OF INSTORAGE PROFILE\n         USING RACRTE,R6                ESTABLISH ADDRESSABILITY - ISP\n         L     R6,RTETREE               LOAD ADDR OF RACRNE\n         USING RACRNE,R6                ESTABLISH ADDRESSABILITY-RACRNE\n         L     R6,RNEPROF               LOAD ADDR OF RACRPE\n         USING RACRPE,R6                ESTABLISH ADDRESSABILITY-RACRPE\n         LH    R7,RPEINSOF              OFFSET TO INSTALLATION DATA\n         AR    R6,R7                    POINT REG 6 AT IT\n         USING RPEINST,R6               ESTABLISH ADDRESSABILITY-RPEINS\n         ICM   R7,B'0001',RPEINSTL      GET THE LENGTH\n         LA    R6,1(R6)                 POINT REG 6 AT IT\n         MVC   RACTAPE,SPACES           INITIALIZE DEFAULT TAPES\n         MVC   RACTIME,SPACES           INITIALIZE DEFAULT TIME\n         MVC   RACLINE,SPACES           INITIALIZE DEFAULT LINES\nRACF140  EQU   *\n         CLC   0(5,R6),=CL5'TAPE='      DEFAULT TAPES FOR THIS CLASS?\n         BE    RACF160                  YES, EXTRACT NUMBER OF TAPES\n         CLC   0(5,R6),=CL5'TIME='      DEFAULT TIME FOR THIS CLASS?\n         BE    RACF170                  YES, EXTRACT CPU TIME\n         CLC   0(5,R6),=CL5'LINE='      DEFAULT LINES FOR THIS CLASS?\n         BE    RACF190                  YES, EXTRACT SYSOUT LINES\nRACF150  EQU   *\n         LA    R6,1(R6)                 INCREMENT R6\n         BCT   R7,RACF140               CONTINUE PARSING\n         B     RACF200                  UPDATE JCT WITH CLASS DEFAULTS\nRACF160  EQU   *\n         MVC   RACTAPE,5(R6)            EXTRACT DEFAULT TAPES\n         B     RACF150                  CONTINUE PARSING\nRACF170  EQU   *\n         LA    R2,5(R6)                 POINT AT TIME DATA\n         LA    R3,RACTIME               POINT AT TIME DESTINATION\n         LA    R8,9                     MAXIMUM LENGTH OF TIME DATA\nRACF180  EQU   *\n         CLC   0(1,R2),SEMICOLN         END OF TIME DATA?\n         BE    RACF150                  YES, CONTINUE PARSING\n         CLC   0(1,R2),SPACES           END OF TIME DATA?\n         BE    RACF150                  YES, CONTINUE PARSING\n         MVC   0(1,R3),0(R2)            EXTRACT DEFAULT TIME\n         LA    R2,1(R2)                 INCREMENT R2\n         LA    R3,1(R3)                 INCREMENT R3\n         BCT   R8,RACF180               CONTINUE EXTRACTING\n         B     RACF150                  CONTINUE PARSING\nRACF190  EQU   *\n         MVC   RACLINE,5(R6)            EXTRACT DEFAULT LINES\n         B     RACF150                  CONTINUE PARSING\nRACF200  EQU   *\n         LA    R2,JCTUPD00              LOAD BRANCH ADDRESS\n         B     RACF220\nRACF210  EQU   *\n         LA    R2,CANJOB00              LOAD BRANCH ADDRESS\nRACF220  EQU   *\n         MVC   CLASLIST,HALF01          SET NUMBER OF RESOURCE CLASSES\n         MVI   CLASLEN,BYTE06           SET CLASS LENGTH\n         MVC   CLASCNST(8),SPACES       INITIALIZE\n         MVC   CLASCNST,CLASVALU        SET RESOURCE NAME\n         MVC   CLASS,JCTJCLAS           SET JOB CLASS IN RESOURCE NAME\n         L     R7,ACEEADDR              POINTER TO ACEE ADDRESS\n         MVC   RACLIST3(INITLEN3),INITDAT3  STATIC INFO TO DYNAMIC FORM\n         RACROUTE CLASS=APPLNAM,ENVIR=DELETE,ACEE=(R7),                +\n               SUBPOOL=230,REQUEST=LIST,WORKA=RACWK,                   +\n               MF=(E,RACLIST3)          BUILD IN-STORAGE PROFILES\n         LA    R7,ACEEADDR              POINTER TO ACEE ADDRESS\n         MVC   RACLIST2(INITLEN2),INITDAT2    MOVE STATIC TO DYNAMIC\n         RACINIT ENVIR=DELETE,ACEE=(R7),                               +\n               SUBPOOL=230,MF=(E,RACLIST2)\n         BR    R2                       BRANCH TO REGISTER ADDRESS\n***********************************************************************\n*        JES2 - UPDATE JCT WITH CLASS DEFAULTS\n***********************************************************************\nJCTUPD00 EQU   *\n         CLC   RACTAPE,SPACES           'TAPE=' FOUND?\n         BE    JCTUPD10                 NO, SET TO X'00'\n         CLC   RACTAPE,MAXTAPE          RACTAPE = 'X'\n         BE    JCTUPD20                 YES, SET TO X'FF'\n         PACK  PACKDEC,RACTAPE          TRANSLATE RACTAPE TO DECIMAL\n         CVB   R2,PACKDEC               CONVERT TO BINARY\n         ST    R2,JCTUSER2              UPDATE JCT WITH TAPE DEFAULT\n         B     JCTUPD30                 CHECK FOR 'LINE='\nJCTUPD10 EQU   *\n         MVC   JCTUSER2,FULL00          SET TO X'00'\n         B     JCTUPD30                 CHECK FOR 'LINE='\nJCTUPD20 EQU   *\n         MVC   JCTUSER2,FULL00          SET TO X'00'\n         MVI   JCTUSER2+3,BYTEFF        SET LAST BYTE TO X'FF'\n         B     JCTUPD30                 CHECK FOR 'LINE='\nJCTUPD30 EQU   *\n         CLC   RACLINE,SPACES           'LINE=' FOUND?\n         BE    JCTUPD40                 NO, SET TO '5000'\n         PACK  PACKDEC,RACLINE          TRANSLATE RACLINE TO DECIMAL\n         CVB   R2,PACKDEC               CONVERT TO BINARY\n         ST    R2,JCTUSER3              UPDATE JCT WITH LINES DEFAULT\n         B     JCTUPD50                 CHECK FOR 'TIME='\nJCTUPD40 EQU   *\n         MVC   JCTUSER3,FULL5000        SET TO '5000'\nJCTUPD50 EQU   *\n         CLC   $OWNNODE,JCTRNODE        VALIDATION ALREADY DONE?\n         BNE   JCTUPD80                 YES, PERFORM $FREMAIN\n         CLC   RACTIME,SPACES           'TIME=' FOUND?\n         BNE   JCTUPD60                 YES, CONTINUE\n         MVC   RACTIME,MINTIME          SET RACTIME TO '(,15)'\nJCTUPD60 EQU   *\n         TM    JCTUSER0+1,TIMEUSER      USER SPECIFIED PARM?\n         BNO   JCTUPD70                 NO, ADD DEFAULT TIME\n         TM    JCTUSER0,TIMEAUTH        USER ALLOWED TO SPECIFY PARM?\n         BO    JCTUPD80                 YES, PERFORM $FREMAIN\n         MVC   JCTXWRK,BADTIME          NO, ISSUE ERROR MESSAGE\n         B     CANJOB00                 CANCEL JOB AND RETURN\nJCTUPD70 EQU   *\n         OI    JCTUSER0+1,TIMEDFLT      EXIT SPECIFIED PARM\n         L     R2,4(R5)                 ADDRESS OF EXIT FLAG BYTE\n         OI    0(R2),RDWXXSNC           WE'VE SUPPLIED NEXT STMT IMAGE\n         MVC   1(2,R4),TRAILCOM         LAST STMT, ADD TRAILING COMMA\n         MVC   JCTXWRK,TIMESTMT         INITIALIZE TIME PARM JOB STMT\n         MVC   JCTXWRK+20(9),RACTIME    SET DEFAULT TIME ON JOB STMT\nJCTUPD80 EQU   *\n         LA    R0,WORKLEN               LENGTH OF GETMAIN AREA\n         LA    R1,RACWORK               ADDRESS OF GETMAIN AREA\n         $FREMAIN R,LV=(R0),A=(R1),SP=230    FREEMAIN STORAGE\n         SLR   R15,R15                  SET RETURN CODE\n         B     RETURN                   WE'RE DONE, RETURN\n***********************************************************************\n*        JES2 - CANCEL JOB\n***********************************************************************\nCANJOB00 EQU   *\n         LA    R0,WORKLEN               LENGTH OF GETMAIN AREA\n         LA    R1,RACWORK               ADDRESS OF GETMAIN AREA\n         $FREMAIN R,LV=(R0),A=(R1),SP=230    FREEMAIN STORAGE\nCANJOB10 EQU   *\n         L     R2,4(R5)                 ADDRESS OF EXIT FLAG BYTE\n         OI    0(R2),RDWXXSNC           WE'VE SUPPLIED NEXT STMT IMAGE\n         OI    JCTUSER4,BYTEFF          JOB WILL BE CANCELED IN EXIT020\n         OI    JCTUSER0+2,EXIT002       EXIT 02 PROCESSING COMPLETE\n         SLR   R15,R15                  SET RETURN CODE\n         B     RETURN                   WE'RE DONE\n***********************************************************************\n*        JES2 - RESTORE REGISTERS AND RETURN\n***********************************************************************\nRETURN   EQU   *\n         $RETURN RC=(R15)               RETURN TO CALLER\n***********************************************************************\n*        JES2 - FLAGS\n***********************************************************************\nTIMEAUTH EQU   X'01'                    ALLOWS 'TIME' PARM USE\nTAPEAUTH EQU   X'02'                    ALLOWS UNLIMITTED TAPES\nLINEAUTH EQU   X'04'                    ALLOWS UNLIMITTED LINES SYSOUT\nJCATAUTH EQU   X'08'                    ALLOWS USE OF '//JOBCAT' STMT\nSCATAUTH EQU   X'10'                    ALLOWS USE OF '//STEPCAT' STMT\nBYTE06   EQU   X'06'                    BYTE CONSTANT, VALUE X'06'\nBYTEFF   EQU   X'FF'                    BYTE CONSTANT, VALUE X'FF'\nTIMEUSER EQU   X'10'                    USER SPECIFIED 'TIME' PARAMETER\nTIMEDFLT EQU   X'20'                    EXIT SPECIFIED 'TIME' PARAMETER\nJOBUSEID EQU   X'40'                    USER SUPPLIED USER-ID\nJOBCLASS EQU   X'80'                    USER SUPPLIED CLASS\nEXIT002  EQU   X'01'                    EXIT 02 PROCESSING COMPLETE\n***********************************************************************\n*        JES2 - CONSTANTS\n***********************************************************************\nHALF01   DC    H'01'                    HALFWORD CONSTANT, VALUE X'01'\nFULL00   DC    F'00'                    FULLWORD CONSTANT, VALUE X'00'\nFULL08   DC    F'08'                    FULLWORD CONSTANT, VALUE X'08'\nFULL5000 DC    F'5000'                  FULLWORD CONSTANT, VALUE '5000'\nTIMESTMT DC    CL80'//             TIME=                               +\n                                            '    TIME PARM ON JOB STMT\nBADCLAS1 DC    CL80'//*** ERROR ***  YOU HAVE CHOSEN AN INVALID JOB CLA+\n               SS. RERUN WITH CORRECT CLASS '\nBADCLAS2 DC    CL80'//*** ERROR ***  YOU MUST SUPPLY VALID CLASS IN THE+\n                FORM OF ''CLASS='' ON JOB STMT'\nBADCLAS3 DC    CL80'//*** ERROR ***  THIS JOB IS NOT AUTHORIZED TO RUN +\n               IN THE CLASS SPECIFIED       '\nBADRACF1 DC    CL80'//*** ERROR ***  ''RACINIT'' FAILED FOR THIS USER. +\n               NOTIFY SYSTEMS PROGRAMMING     '\nBADRACF2 DC    CL80'//*** ERROR ***  ''RACROUTE'' FAILED FOR THIS USER.+\n                NOTIFY SYSTEMS PROGRAMMING   '\nBADTIME  DC    CL80'//*** ERROR ***  YOU ARE NOT AUTHORIZED TO USE THE +\n               ''TIME'' PARAMETER ON JOB STMT '\nBADUSER  DC    CL80'//*** ERROR ***  YOU MUST SUPPLY VALID USERID IN TH+\n               E FORM OF ''USER='' ON JOB STMT'\nERROR    DC    C'//*** ERROR ***'\nMINTIME  DC    CL8'(,15)'               MINIMUM TIME VALUE\nTIME1    DC    C',TIME='                TIME PARAMETER\nTIME2    DC    C' TIME='                TIME PARAMETER\nCLASS1   DC    C',CLASS='               CLASS PARAMETER\nCLASS2   DC    C' CLASS='               CLASS PARAMETER\nCLASVALU DC    C'CLASS'                 CHAR CONSTANT, VALUE 'CLASS'\nUSER1    DC    C',USER='                USER PARAMETER\nUSER2    DC    C' USER='                USER PARAMETER\nTRAILCOM DC    C', '                    TRAILING COMMA\nSPACES   DC    CL9' '                   SPACE\nCOMMA    DC    C','                     COMMA\nSEMICOLN DC    C';'                     SEMICOLIN\nMAXTAPE  DC    C'X'                     INDICATES UNLIMITED TAPES\nJOB      DC    C'JOB'                   JCTJOBID FOR BATCH JOB\nTIMEAPPL DC    CL8'TIME'                APPL OF 'TIME'\nTAPEAPPL DC    CL8'TAPE'                APPL OF 'TAPE'\nLINEAPPL DC    CL8'LINE'                APPL OF 'LINE'\nJCATAPPL DC    CL8'JOBCAT'              APPL OF 'JOBCAT'\nSCATAPPL DC    CL8'STEPCAT'             APPL OF 'STEPCAT'\nAPPL     DS    0F                       RESOURCE CLASS OF 'APPL'\n         DC    AL1(4)                   LENGTH OF CLASS NAME\nAPPLNAM  DC    CL8'APPL'                CLASS NAME\n***********************************************************************\n*        JES2 - STATIC LIST FORMS OF RACROUTE, RACINIT & RACLIST\n***********************************************************************\nINITDAT1 RACROUTE REQUEST=AUTH,MF=L     LIST FORM OF RACROUTE MACRO\nINITLEN1 EQU   *-INITDAT1\n         DS    0F\nINITDAT2 RACINIT MF=L                   LIST FORM OF RACINIT MACRO\nINITLEN2 EQU   *-INITDAT2\n         DS    0F\nINITDAT3 RACROUTE REQUEST=LIST,MF=L     LIST FORM OF RACROUTE MACRO\nINITLEN3 EQU   *-INITDAT3\n         DS    0F\n         LTORG\n**********************************************************************\n*        JES2 - DYNAMIC LIST FORMS OF RACROUTE, RACINIT & RACLIST\n**********************************************************************\nRACWORK  DSECT\nPACKDEC  DS    D                        WORK AREA FOR CVD\nACEEADDR DS    F                        ADDRESS OF ACEE\nUIDLEN   DS    AL1                      LENGTH OF USERID\nUID      DS    CL8                      USERID\nCLASLIST DS    0F                       JOBCLASS RESOURCE FOR RACLIST\n         DS    H                        NUMBER OF NAMES IN LIST\nCLASLEN  DS    AL1                      LENGTH OF RESOURCE NAME (6)\nCLASCNST DS    CL5                      CONSTANT VALUE OF 'CLASS'\nCLASS    DS    CL1                      JOB CLASS\n         DS    CL2                      NOTHING\n         DS    0F\nRACWK    DS    CL512                    RACROUTE WORK AREA\nRACTAPE  DS    CL1                      DEFAULT TAPES FOR CLASS\nRACTIME  DS    CL9                      DEFAULT TIME FOR CLASS\nRACLINE  DS    CL8                      DEFAULT LINES FOR CLASS\nRACLIST1 DS    CL(INITLEN1)             LIST FORM OF RACROUTE MACRO\nRACLIST2 DS    CL(INITLEN2)             LIST FORM OF RACINIT MACRO\nRACLIST3 DS    CL(INITLEN3)             LIST FORM OF RACROUTE MACRO\nWORKLEN  EQU   *-RACWORK\nJOBEX002 CSECT\n***********************************************************************\n*        DSECT FOR ACCESSOR ENVIRONMENT ELEMENT\n***********************************************************************\n         IHAACEE\nJOBEX002 CSECT\n***********************************************************************\n*        DSECT FOR RACF INSTORAGE PROFILE\n***********************************************************************\n         COPY  ICHPISP\nJOBEX002 CSECT\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOOEX009": {"ttr": 10246, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x94\\x00\\x94\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 148, "newlines": 148, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 JOB OUTPUT OVERFLOW EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 JOB OUTPUT OVERFLOW EXIT 9                   *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *\n*       OF EXTENDING THE ALLOWED NUMBER OF OUTPUT RECORDS            *\n*       FOR SPECIFIED JOB CLASSES WHEN THE OUTPUT ESTIMATE           *\n*       IS EXCEEDED.                                                 *\n*                                                                    *\n*    ENTRY POINT = DLXXIT09                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0     N/A                                                   *\n*       R1     ADDRESS OF THE 7-WORD PARAMETER LIST:                 *\n*              +0  JCTLINES OR JCTPUNCH VALUE                        *\n*              +4  JCTPAGES VALUE                                    *\n*              +8  JCTBYTES VALUE                                    *\n*              +12 USER'S INCREMENT FOR RECORDS                      *\n*              +16 USER'S INCREMENT FOR PAGES                        *\n*              +20 USER'S INCREMENT FOR BYTES                        *\n*              +24 OUTPUT OVERFLOW FLAG:                             *\n*                  BIT 0   = 0 (CARDS HAVE NOT EXCEEDED THE LIMIT)   *\n*                          = 1 (CARDS HAVE EXCEEDED THE ESTIMATE)    *\n*                  BIT 1   = 0 (LINES HAVE NOT EXCEEDED THE LIMIT)   *\n*                          = 1 (LINES HAVE EXCEEDED THE LIMIT)       *\n*                  BIT 2   = 0 (PAGES HAVE NOT EXCEEDED THE LIMIT)   *\n*                          = 1 (PAGES HAVE EXCEEDED THE ESTIMATE)    *\n*                  BIT 3   = 0 (BYTES HAVE NOT EXCEEDED THE LIMIT)   *\n*                          = 1 (BYTES HAVE EXCEEDED THE LIMIT)       *\n*                  BITS 4-31 N/A                                     *\n*       R2-R6  N/A                                                   *\n*       R7     ADDRESS OF THE JCT                                    *\n*       R8-R10 N/A                                                   *\n*       R11    ADDRESS OF THE SVT                                    *\n*       R12    N/A                                                   *\n*       R13    OS-STYLE 18 WORD SAVE AREA                            *\n*       R14    RETURN ADDRESS                                        *\n*       R15    ENTRY ADDRESS                                         *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0    IF THE RETURN CODE (PASSED IN R15) IS NOT 8, THE       *\n*             CONTENTS OF THIS REGISTER ARE IGNORED.  HOWEVER,       *\n*             IF THE RETURN CODE IS 8, THIS REGISTER CONTAINS        *\n*             RETURN PROCESSING FLAGS AS FOLLOWS:                    *\n*             BIT 0     = 0 TELLS JES2 TO TAKE ACTION BASED ON THE   *\n*                           VALUE CURRENTLY SPECIFIED FOR THE        *\n*                           \"EXCESSIVE OUTPUT OPTION\" AT YOUR        *\n*                           INSTALLATION.                            *\n*                       = 1 TELLS JES2 TO TAKE ACTION BASED ON THE   *\n*                           VALUE SPECIFIED FOR THE \"EXCESSIVE       *\n*                           OUTPUT OPTION\" IN BITS 24-31 FOR THIS    *\n*                           REGISTER.                                *\n*             BIT 1     = 0 TELLS JES2 TO USE THE OUTPUT OVERFLOW    *\n*                           INCREMENT SPECIFIED ON THE INT=          *\n*                           PARAMETER OF THE ESTLNCT, ESTPUN,        *\n*                           ESTPAGE, OR ESTBYTE INIT STATEMENTS.     *\n*                       = 1 TELLS JES2 TO USE THE OUTPUT OVERFLOW    *\n*                           INCREMENT SUPPLIED BY THE EXIT ROUTINE   *\n*                           IN THE PARAMETER LIST.                   *\n*             BIT 2     = 0 TELLS JES2 TO SEND THE DEFAULT ERROR     *\n*                           MESSAGE ($HASP375) TO THE OPERATOR.      *\n*                       = 1 TELLS JES2 TO SUPPRESS THE DEFAULT       *\n*                           ERROR MESSAGE.                           *\n*             BITS 3-23     N/A                                      *\n*             BITS 24-31    TELLS JES2 THE EXECUTION OPTION FOR      *\n*                           THIS EXIT CALL.  IF THIS BYTE IS ZERO    *\n*                           THEN CONTINUE PROCESSING.  IF THIS BYTE  *\n*                           IS 1 THEN ABEND (722) WITHOUT A DUMP.    *\n*                           IF THIS BYTE IS 2 THEN ABEND (722) WITH  *\n*                           A DUMP.                                  *\n*       R1-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             = 0  TELLS JES2 THAT, IF THERE ARE ANY ADDITIONAL EXIT *\n*                  ROUTINES, IT IS TO EXECUTE THE NEXT ONE.  IF      *\n*                  THERE ARE NO ADDITIONAL ROUTINES, JES2 IS TO      *\n*                  PERFORM STANDARD JOB OUTPUT OVERFLOW PROCESSING.  *\n*             = 4  TELLS JES2 TO IGNORE ANY ADDITION EXIT ROUTINES   *\n*                  ASSOCIATED WITH THIS EXIT AND TO PERFORM          *\n*                  STANDARD JOB OUTPUT OVERFLOW PROCESSING.          *\n*             = 8  TELLS JES2 TO TAKE ACTION BASED ON THE RETURN     *\n*                  PROCESSING FLAGS IN R0.                           *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $MODEND, $HASPGBL                                   *\n*                                                                    *\n*    MVS MACROS USED:                                                *\n*        GETMAIN, FREEMAIN, SAVE, RESTORE                            *\n*                                                                    *\n*                                                                    *\n*    CHANGE ACTIVITY:                                                *\n*        02/06/87  WRITTEN.                           BC.            *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nJOOEX009 $MODULE ENVIRON=USER,                                         +\n               $BUFFER,                                                +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $MIT,                    REQ'D BY $MODULE               +\n               $JCT,                    HASP JOB CONTROL TABLE MAPPING +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE JES2 JOB OUTPUT OVERFLOW EXIT '\n         SPACE 1\nDLXXIT09 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         SAVE  (14,12)                  SAVE REGISTERS\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         LR    R3,R1                    SAVE ADDRESS OF PARAMETER LIST\n         GETMAIN R,LV=72                GET SAVEAREA\n         ST    R13,4(R1)                STORE ADDR OF PREV SAVE AREA\n         ST    R1,8(R13)                STORE ADDR OF THIS SAVE AREA\n         LR    R13,R1                   LOAD R13 WITH ADDR OF THIS AREA\n         USING JCT,R7                   ADDRESSABILITY TO JCT\n         SLR   R15,R15                  SET RC = 0\n         SLR   R0,R0                    SET R0 = 0\n         TM    24(R3),X'40'             # OF EST. LINES EXCEEDED?\n         BNO   CANCEL                   IF NOT, ALLOW IT TO BE CANCELED\n         L     R5,NOLIM                 DEFAULT TO NO LIMIT\n         CLC   BATJOB,JCTJOBID          IS THIS A BATCH JOB?\n         BNE   CONT                     IF NOT, CONTINUE\n         L     R5,JCTUSER3              GET # LINES ALLOWED FOR CLASS\nCONT     EQU   *\n         L     R6,0(R3)                 GET # OF LINES USED SO FAR\n         CR    R6,R5                    COMPARE THE TWO\n         BNL   CANCEL                   IF EXCEEDED, CANCEL THE JOB\n         SR    R5,R6                    CALC. # TO ADD\n         ST    R5,12(R3)                STORE IN PARAMETER LIST\n         ICM   R0,B'1111',SETBIT1       SET BIT 1 OF R0\nRETURN   EQU   *\n         LR    R1,R13                   GET ADDR OF SAVE AREA\n         L     R13,4(R13)               RESTORE ADDR OF PREV SAVE AREA\n         ST    R0,20(R13)               STORE R0\n         FREEMAIN R,LV=72,A=(R1)        FREE PROGRAM SAVE AREA\n         RETURN (14,12),RC=8            RESTORE REGISTERS & RETURN\nCANCEL   EQU   *\n         LR    R1,R13                   GET ADDR OF SAVE AREA\n         L     R13,4(R13)               RESTORE ADDR OF PREV SAVE AREA\n         FREEMAIN R,LV=72,A=(R1)        FREE PROGRAM SAVE AREA\n         RETURN (14,12),RC=0            RESTORE REGISTERS & RETURN\n********************** CONSTANTS *************************************\nNOLIM    DC    F'9999000'               NO LIMIT FOR TSO AND STC\nSETBIT1  DC    X'E0000000'\nBATJOB   DC    C'JOB'\n         LTORG\nJOOEX009 CSECT\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTPASS": {"ttr": 10250, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00g\\x00g\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 103, "newlines": 103, "modlines": 0, "user": "DELUXE"}, "text": "LISTPASS CSECT\n         SAVE  (14,12),,*               SAVE OS  REGISTERS\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING LISTPASS,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n* END OF PROLOGUE                       SAVE AREA\n*   BEGINNING OF RACF CHECKING\n         LR    R3,R1\n         SLR   R15,R15                 START OUT WITH 0\n         RACHECK ENTITY=PROGNAME,CLASS='APPL'\n         LTR   R15,R15\n         BNZ   TERMINAT\nENDRACF  EQU   *\n*   END OF RACF CHECKING\n         LR    R1,R3\n         LTR   R1,R1\n         BZ    TERMINAT\n         L     R1,0(R1)\n         LH    R2,0(R1)\n         STCM  R2,B'0001',USERIDLT\n         BCTR  R2,R0\n         EX    R2,*+4\n         MVC   USERID(*-*),2(R1)\n*\n*  CHECKS FOR VALID DATASET NAME AND USERID COMBINATIONS:\n         BAL   R10,GETPASSW             GET PASSWORD FROM RACF\n         TPUT  PASSWD,8\n* BEGINNING OF EPILOGUE\nTERMINAT L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         SLR   R15,R15\n         RETURN (14,12),,RC=(15)        RETURN TO OS RC=R15\n* END OF EPILOGUE\n*\nGETPASSW EQU   *                        ROUTINE TO GET AND DECRYPT\n*                                       THE PASSWORD FROM THE RACF\n*                                       DATASET FOR THE USERID FOUND\n*                                       IN PREVIOUS ROUTINES\n         ICHEINTY LOCATE,TYPE='USR',ACTIONS=ACTLST,WKAREA=RACFWORK,    X\n               ENTRY=USERIDLT\n         LH    R4,RACFLNGT              GET LENGTH OF RACFFLD\n         STH   R4,PASSWDLT+2            STORE IT\n         LA    R2,RACFFLD               ADDRESS OF ENCRYPTED PASSWORD\n         L     R6,0(R2)                 GET FIRST 4 BYTES\n         L     R4,=X'F0000000'          WORK ON FIRST 4 BYTES\n         SR    R5,R5                    ZERO R5\n         LR    R8,R6                    GET FIRST 4 BYTES\n         SRL   R8,3                     SHIFT RIGHT THREE\n         XR    R6,R8                    XOR THEM\n         NR    R6,R4                    AND THEM\n         ST    R6,PASSWD                STORE FIRST 4 BITS\n         SR    R7,R7                    ZERO R7\n         LA    R1,15                    LOOP COUNTER 15 4 BIT SEGMENTS\nDECRYPT1 EQU   *\n         LM    R8,R9,0(R2)              GET ENCRYPTED PASSWORD\n         NR    R6,R4\n         NR    R7,R5\n         SRDL  R4,4\n         NR    R8,R4\n         NR    R9,R5\n         SRDL  R6,4\n         XR    R8,R6\n         XR    R9,R7\n         SLDL  R6,1\n         XR    R8,R6\n         XR    R9,R7\n         NR    R8,R4\n         NR    R9,R5\n         LR    R6,R8\n         LR    R7,R9\n         SRDL  R6,3\n         XR    R8,R6\n         XR    R9,R7\n         NR    R8,R4\n         NR    R9,R5\n         LM    R6,R7,PASSWD\n         OR    R6,R8\n         OR    R7,R9\n         STM   R6,R7,PASSWD\n         BCT   R1,DECRYPT1\n         STM   R6,R7,PASSWD\n         BR    R10                      RETURN\n*\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nPROGNAME DC    CL8'LISTPASS'\n         CNOP  0,4\nUSERIDLT DC    AL1(0)                   LENGTH OF USERID\nUSERID   DC    CL8' '                   8 BYTE USER ID FIELD\n         CNOP  0,4\nPASSWD   DC    XL8'0000000000000000'    8 BYTE PASSWORD FIELD ACTUAL\nPASSWDLT DC    F'0'                     4 BYTE PASSWORD LENGTH ACTUAL\nRACFWORK EQU   *                        WORK AREA FOR RACF MGR\n         DC    F'40'\n         DC    XL24'00'\nRACFLNGT DC    XL2'00'                  LENGTH OF FIELD RETURNED\nRACFFLD  DC    XL8'00'                  FIELD VALUE\n         DC    XL2'00'                  FILL OUT 40\nACTLST   ICHEACTN MF=L,FIELD=PASSWORD,RUN=YES\n         LTORG\n         EQUATE                         REGISTER EQUATES\n         END   LISTPASS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTSPC": {"ttr": 10253, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\x81\\x02\\x81\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 641, "newlines": 641, "modlines": 0, "user": "DELUXE"}, "text": "*          DATA SET CBT501     AT LEVEL 002 AS OF 12/30/77\n*          DATA SET CBT501     AT LEVEL 002 AS OF 12/16/75\n         TITLE 'LISTSPC - DOCUMENTATION'\n*.....................................................................*\n*.                                                                   .*\n*.   LISTSPC                                                         .*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.   1.0  GENERAL DESCRIPTION                                        .*\n*.                                                                   .*\n*.   THIS TSO COMMAND IS A MULTI-PURPOSE PROGRAM FOR LISTING         .*\n*.   THE SPACE (IN TRACKS) USED BY DATASETS AND THE FREE SPACE       .*\n*.   ON DISK VOLUMES.  IT CAN ALSO LIST THE EXTENTS AND VOLSER       .*\n*.   OF DATASETS.                                                    .*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.   2.0  COMMAND SYNTAX                                             .*\n*.                                                                   .*\n*.    LISTSPC  DATASET(DSNAME-LIST) LEVEL(INDEX-STRUCTURE)           .*\n*.             VOLUME(VOLUME-LIST) EXTENTS                           .*\n*.                                                                   .*\n*.       DATASET(DSNAME-LIST)                                        .*\n*.          -  SPECIFIES A DSNAME LIST FOR WHICH YOU DESIRE TO       .*\n*.             HAVE THE SPACE INFORMATION LISTED.  TSO DATASET       .*\n*.             NAMING CONVENTIONS APPLY FOR THE DSNAMES.             .*\n*.                                                                   .*\n*.       LEVEL(INDEX-STRUCTURE)                                      .*\n*.          -  SPECIFIES AN INDEX STRUCTURE FOR WHICH YOU DESIRE     .*\n*.             TO HAVE THE SPACE INFORMATION LISTED FOR EACH         .*\n*.             DATASET WITHIN THIS INDEX STRUCTURE.  THIS MAY        .*\n*.             BE A DSNAME CONTAINING ONE EMBEDDED ASTERISK NOT      .*\n*.             AS THE HIGH-LEVEL QUALIFIER OR IT MAY BE AN INDEX     .*\n*.             LEVEL.                                                .*\n*.                                                                   .*\n*.       VOLUME(VOLUME-LIST)                                         .*\n*.          -  IF USED WITH THE 'DATASET' PARAMETER, SPECIFIES THE   .*\n*.             VOLUME ON WHICH THE DATASET RESIDES.  NO CATALOG      .*\n*.             SEARCH WILL BE PERFORMED FOR THE DATASETS.            .*\n*.          -  IF USED AS THE ONLY PARAMETER, SPECIFIES A LIST OF    .*\n*.             VOLUMES FOR WHICH FREE SPACE INFORMATION WILL BE      .*\n*.             LISTED.                                               .*\n*.                                                                   .*\n*.       EXTENTS                                                     .*\n*.          -  SPECIFIES THAT THE VOLSER AND THE DATASET'S EXTENTS   .*\n*.             (IN A HEXADECIMAL FORMAT) WILL BE LISTED FOR EACH     .*\n*.             DATASET.                                              .*\n*.                                                                   .*\n*.     NOTE:  THE USE OF THE 'VOLUME' AND THE 'EXTENTS'              .*\n*.            PARAMETERS CAN BE RESTRICTED TO CERTAIN USERIDS        .*\n*.            THROUGH THE USE OF BIT 0 IN THE FIELD LABELED          .*\n*.            'FLAG'.                                                .*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.....................................................................*\n*.                                                                   .*\n*.   3.0  PROGRAM STRUCTURE                                          .*\n*.                                                                   .*\n*.                                                                   .*\n*.   3.0.1  INITIALIZATION                                           .*\n*.                                                                   .*\n*.   THIS SECTION BUILDS THE PARAMETER LISTS FOR PARSE AND           .*\n*.   LOCINDEX.  IT CAN, IF DESIRED, CHECK THE USERID FOR             .*\n*.   AUTHORIZATION AND SET BIT 0 OF THE FLAG FIELD IF THE USER       .*\n*.   IS AUTHORIZED.  IT THEN LINKS TO PARSE AND DETERMINES           .*\n*.   WHICH TYPE OF REQUEST IS BEING MADE.                            .*\n*.                                                                   .*\n*.                                                                   .*\n*.   3.0.2  DATASET ROUTINE                                          .*\n*.                                                                   .*\n*.   THIS ROUTINE IS ENTERED IF THE 'DATASET' PARAMETER IS           .*\n*.   SPECIFIED.  IF THE 'VOLUME' PARAMETER IS ALSO SPECIFIED,        .*\n*.   THE 'LOCATE' IS BYPASSED.  IT THEN LINKS TO THE OBTAIN AND      .*\n*.   PRINT ROUTINE.                                                  .*\n*.                                                                   .*\n*.                                                                   .*\n*.   3.0.3  LEVEL ROUTINE                                            .*\n*.                                                                   .*\n*.   THIS ROUTINE IS ENTERED IF THE 'LEVEL' PARAMETER IS SPECIFIED.  .*\n*.   IT LINKS TO LOCINDEX TO GET THE DSNAMES FOR THE INDEX           .*\n*.   STRUCTURE AND THEN LINKS TO THE OBTAIN AND PRINT ROUTINE.       .*\n*.                                                                   .*\n*.                                                                   .*\n*.   3.0.4  VOLUME ROUTINE                                           .*\n*.                                                                   .*\n*.   THIS ROUTINE IS ENTERED IF THE 'VOLUME' PARAMETER IS            .*\n*.   SPECIFIED AS THE ONLY PARAMETER.  IT 'OBTAIN'S THE FORMAT 4     .*\n*.   DSCB AND EXTRACTS CERTAIN FIELDS.  IT THEN 'OBTAIN'S ALL        .*\n*.   OF THE FORMAT 5 DSCB RECORDS AND ACCUMULATES THE FREE           .*\n*.   EXTENTS.                                                        .*\n*.                                                                   .*\n*.                                                                   .*\n*.   3.0.5  OBTAIN AND PRINT ROUTINE                                 .*\n*.                                                                   .*\n*.   THIS ROUTINE 'OBTAIN'S THE FORMAT 1 DSCB AND THE FORMAT 3       .*\n*.   DSCB (IF ONE EXISTS) FOR A DATASET AND ACCUMULATES THE          .*\n*.   EXTENTS.  IT THEN PRINTS THE DSORG, # OF ALLOCATED TRACKS,      .*\n*.   # OF UNUSED TRACKS, # OF EXTENTS, AND THE DSNAME.  IF THE       .*\n*.   'EXTENTS' KEYWORD WAS SPECIFIED, IT ALSO PRINTS THE VOLSER      .*\n*.   AND THE EXTENTS FOR THE DATASET.                                .*\n*.                                                                   .*\n*.....................................................................*\n         TITLE 'LISTSPC - LIST SPACE COMMAND'\nLISTSPC  START 0\n         STM   R14,R12,12(R13)\n         USING LISTSPC,R15\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         B     BEGIN\nSAVE     DC    18F'0'\n         DROP  R15\n         USING SAVE,R13\n         TITLE 'LISTSPC - GETMAIN AND PARSE'\nBEGIN    LR    R4,R1\n         USING CPPL,R4\n         LA    R0,LWORK            GET LENGTH OF WORK AREA\n         AH    R0,=H'4096'         GET EXTRA 4K FOR LOCINDEX WORK\n         ICM   R0,B'1000',=FL1'1'  SUBPOOL 1\n         GETMAIN R,LV=(0)\n         LR    R12,R1               SAVE ADDR OF WORK AREA\n         USING WORKAREA,R12\n         LA    R0,LOCINDXW          POINT TO LOCINDEX WORK AREA\n         ST    R0,PARM+12           SAVE ADDR IN PARM LIST\n         MVI   PARM+12,X'80'        INDICATE END OF PARM LIST\n         MVI   WXTNT+4,X'04'\n         LA    R3,WPPL             GET ADDR OF PPL\n         USING PPL,R3\n         L     R0,CPPLCBUF\n         ST    R0,PPLCBUF          SAVE ADDR OF COMMAND BUFFER\n         L     R0,CPPLUPT\n         ST    R0,PPLUPT           SAVE ADDR OF UPT\n         L     R0,CPPLPSCB\n         LR    R10,R0              GET ADDR OF USERID FROM PSCB\n         SR    R11,R11\n         IC    R11,7(R10)          GET LENGTH OF USERID\n         BCTR  R11,0\n*        CLC   0(6,R10),=C'SYSTEM'                           ** VPI **\n*        BE    AUTHRZD                                       ** VPI **\n*        CLC   0(6,R10),=C'CONSUT'                           ** VPI **\n*        BNE   LECT                                          ** VPI **\nAUTHRZD  OI    FLAG,X'80'\nLECT     L     R0,CPPLECT\n         ST    R0,PPLECT           SAVE ADDR OF ECT\n         LA    R0,CPECB\n         ST    R0,PPLECB           SAVE ADDR OF ECB\n         XC    CPECB,CPECB         CLEAR ECB\n         L     R0,=A(PARSLIST)\n         ST    R0,PPLPCL           SAVE ADDR OF PCL\n         LA    R0,WPDL\n         ST    R0,PPLANS           SAVE ADDR OF PDL AREA\n         XC    PPLUWA,PPLUWA       CLEAR UWA\n         LR    R1,R3               PASS ADDR OF PPL TO PARSE\n         LINK  EP=IKJPARS          LINK TO PARSE SERVICE ROUTINE\n         LTR   R15,R15             PARSE ERROR\n         BNZ   RETC                 YES\n         TM    PPLANS,X'FF'        PARSE ERROR\n         BO    RETC                 YES\n         DROP  R3,R4\n         L     R3,WPDL             GET ADDR OF PDL\n         USING IKJPARMD,R3\n         TM    EXTENT+1,X'01'      EXTENT SPECIFIED?\n         BZ    *+8                  NO\n         OI    FLAG,X'20'           YES, SET FLAG BIT\n         TM    DSNLIST+6,X'80'      DSNAME SPECIFIED?\n         BO    DSNRTN                YES\n         TM    LEV+6,X'80'          INDEX LEVEL SPECIFIED?\n         BO    LEVEL                 YES\n         TM    VOL+6,X'80'          VOLUME SPECIFIED?\n         BO    FREEA                 YES\n         B     EUSLO                NO PARMS - LISTS FOR USERID\n         TITLE 'LISTSPC - DATASET NAME ROUTINE'\nDSNRTN   LA    R4,DSNLIST           POINT TO DSN LIST\n         LA    R0,L'MSG1\n         LA    R1,MSG1\n         SVC   93                  TPUT HEADING\nDSNAME   L     R5,0(R4)             POINT TO DSNAME\n         LH    R6,4(R4)             GET LENGTH OF DSNAME\n         BCTR  R6,0\n         MVI   DSN1,X'40'\n         MVC   DSN1+1(43),DSN1     BLANK DSN WORK AREA\n         LA    R8,DSN1              POINT TO DSN WORK AREA\n         TM    6(R4),X'40'          DSNAME CONTAINED IN QUOTES?\n         BO    MVCDSNAM               YES\n         EX    R11,USIDMVC         MOVE USERID TO WORK AREA\n         LA    R8,1(R11,R8)        BUMP PAST USERID\n         MVI   0(R8),C'.'          MOVE PERIOD TO WORK AREA\n         LA    R8,1(0,R8)          BUMP PAST\nMVCDSNAM EX    R6,DSNMVC           MOVE DSNAME TO WORK AREA\n         MVC   VOLS,BLANKS         MOVE BLANKS TO VOLSER WORK AREA\n         TM    FLAG,X'80'          AUTHORIZED USER?\n         BZ    LOCDSN               NO\n         TM    VOL+6,X'80'         VOLUME SPECIFIED?\n         BZ    LOCDSN               NO, LOCATE DSN\n         LA    R1,VOLS             POINT TO VOLSER WORK AREA\n         L     R5,VOL              POINT TO VOLUME PARAMETER\n         LH    R6,VOL+4            GET LENGTH OF VOL PARM\n         BCTR  R6,0\n         EX    R6,MVCVOLS          MOVE VOL PARM TO VOLSER WORK AREA\n         B     BALOBTN             BYPASS LOCATE\nLOCDSN   OI    FLAG,X'10'\n         LOCATE INDS\n         LTR   R15,R15              DID IT FIND VOL SER\n         BNZ   ERR03                 NO WRITE ERROR MSG\n         NI    FLAG,X'EF'\n         MVC   VOLS(6),BUF1+6      YES - MOVE IN VOL SER\n         SPACE 2\nBALOBTN  BAL   R9,OBTNRTN          LINK TO OBTAIN AND PRINT ROUTINE\nRETDSN   L     R4,24(R4)           GET DSN LINK POINTER\n         C     R4,ENDLIST          END OF LIST?\n         BE    RETC                 YES\n         B     DSNAME               NO, GET NEXT DSNAME\n         TITLE 'LISTSPC - LEVEL ROUTINE'\nEUSLO    EQU   *\n**     FOR ENTIRE USERID LOGGED ON\n         MVC   USERID(7),0(R10)        MOVE IN USERID\n         B     GOTUS               BRANCH TO GOT USERID\n         SPACE 3\nLEVEL    EQU   *\n         L     R5,LEV              POINT TO INDEX STRUCTURE\n         LH    R6,LEV+4            GET LENGTH OF INDEX STRUCT\n         BCTR  R6,0\n         LA    R8,USERID           POINT TO WORK AREA\n         EX    R6,DSNMVC           MOVE INDEX STRUCTURE TO WORK AREA\nGOTUS    EQU   *\n         LA    R0,L'MSG1\n         LA    R1,MSG1\n         SVC   93                  TPUT HEADING\n         OI    FLAG,X'40'          SET FLAG FOR DATA SETS FOR USERID\nLOOP     EQU   *                   LOOP FOR DATASET IN USERID\n         L     R15,=V(LOCINDEX)    POINT TO EP(LOCINDEX)\n         LA    R1,PARM             POINT TO PARM LIST\n         BALR  R14,R15             GO TO LOCINDEX\n         B     *+4(R15)            BRANCH , DEP ON RETURN CODE\n         B     OK                  0-GET INFOR FOR DSN & CONT\n         B     NOUSER              4-PRINT MSG & RETRUN TO SYS\n         B     NOTDISK             8-PRINT MSG&CONTINUE\n         B     MULTIVOL            12-PRINT MSG&CONTINUE\n         B     RETC                16-FINISHED-RETURN TO SYS\n         B     RDERR               20-PRINT MSG&RETRUN TO SUS\nOK       BAL   R9,OBTNRTN          LINK TO OBTAIN AND PRINT ROUTINE\n         B     LOOP                GET NEXT DSNAME FROM LOCINDEX\n         SPACE 3\n         TITLE 'LISTSPC - VOLUME ROUTINE'\nFREEA    EQU   *\n** TO GET AVAILABLE SPACE ON PARTICULAR VOLUME\n         TM    FLAG,X'80'          AUTHORIZED USER?\n         BZ    ERRF                 NO\n         LA    R0,L'MSG4\n         LA    R1,MSG4\n         SVC   93                  TPUT HEADING\n         SPACE 2\n         LA    R4,VOL              POINT TO VOLUME LIST\nVOLLOOP  ST    R4,OBTNSAVE         SAVE ADDRESS\n         MVI   MSG2,X'40'\n         MVC   MSG2+1(75),MSG2     BLANK MESSAGE AREA\n         XC    PEXCTR,PEXCTR       CLEAR EXTENT COUNTER\n         LA    R1,VOLS             POINT TO VOLSER WORK AREA\n         L     R5,0(R4)            POINT TO VOLUME PARM\n         LH    R6,4(R4)            GET LENGTH OF VOL PARM\n         BCTR  R6,0\n         EX    R6,MVCVOLS          MOVE VOL PARM TO VOLSER WORK AREA\n         LA    R1,MSG2             POINT TO MESSAGE AREA\n         EX    R6,MVCVOLS          MOVE VOLSER TO MESSAGE AREA\n         MVI   DSN1,X'04'          MOVE 'DSN' FOR F4 DSCB...\n         MVC   DSN1+1(43),DSN1     ...INTO DSN1\n         OBTAIN SERCHCAM\n         CLI   BUF1,X'F4'          DID IT READ OK?\n         BNE   ERRF4               NO\n         MVC   VOLTKCYL(2),BUF1+20 GET NUM OF TRKS/CYL\n         MVC   VOLDSCTK+1(1),BUF1+30   GET NUM OF DSCBS PER TRK\n         MVC   VOLF4CHR(4),BUF1+63 GET CCHH OF START OF VTOC\n         MVI   VOLF4CHR+4,X'01'    F4 DSCB IS FIRST REC\n         LH    RCC,VOLF4CHR        SETUP...\n         LH    RHH,VOLF4CHR+2         DISK...\n         SR    RR,RR                     ADDRESSING...\n         IC    RR,VOLF4CHR+4\n         MVC   WXTNT(4),BUF1+63    MOVE BEGIN XTNT TO WORK AREA\n         UNPK  MSG2+29(9),WXTNT(5) UNPACK INTO MESSAGE AREA\n         TR    MSG2+29(8),TRTBL    TRANSLATE EXTENT\n         MVC   WXTNT(4),BUF1+67    MOVE END XTNT TO WORK AREA\n         UNPK  MSG2+38(9),WXTNT(5) UNPACK INTO MESSAGE AREA\n         TR    MSG2+38(8),TRTBL    TRANSLATE EXTENT\n         SR    R9,R9\n         LH    R9,BUF1+6             MOVE IN NUMBER FREE DSCB\n         CVD   R9,WKD\n         MVC   MSG2+6(6),MASKED        MOVE IN MASK\n         ED    MSG2+6(6),WKD+5         EDIT FREE DSCB\n         LH    R1,VOLNO            GET NUM VOLS PROCESSED\n         LA    R1,1(R1)            BUMP\n         STH   R1,VOLNO            REPLACE\n         LA    RR,1(RR)            BUMP RECORD PTR\n         CH    RR,VOLDSCTK         TEST FOR LAST REC ON TRK\n         BNH   VBSET               GO SET VTOCCHHR\n         LA    RR,1                RESET RR TO 1\n         LA    RHH,1(RHH)          BUMP TRK COUNTER\n         CH    RHH,VOLTKCYL        PAST END OF CYL?\n         BL    VBSET               GO SET VTOCCHHR\n         SR    RHH,RHH             ELSE SET RHH TO TRK 0\n         LA    RCC,1(RCC)          BUMP TO NEXT CYL\nVBSET    STH   RCC,VTOCCHHR        SET...\n         STH   RHH,VTOCCHHR+2         UP...\n         STC   RR,VTOCCHHR+4            VTOCCHHR\n         SR    R4,R4               ZERO COUNTER\n         SPACE 2\nPFOBT    OBTAIN SEEKCAM\n         LA    R2,1                INDICATE FIRST EXTENT\n         LA    R3,BUF1+4           POINT TO FIRST EXTENT\nPFLOOP   CLC   0(5,R3),=D'0'       LAST EXTENT?\n         BE    PFGOT               EXIT IF SO\n         MVC   HWK1(2),2(R3)       MOVE NUM CYLS TO HWD\n         LH    R1,HWK1             LOAD\n         MH    R1,VOLTKCYL         CONVERT TO TRKS\n         SR    R0,R0               ZERO R0\n         IC    R0,4(R3)            LOAD NUM TRKS\n         AR    R1,R0               ADD TRKS\n         AR    R4,R1               ACCUMULATE\n         LA    R2,1(R2)            BUMP CTR\n         CH    R2,=H'9'            NINTH EXTENT?\n         BE    PFXT9               BRANCH IF SO\n         CH    R2,=H'27'           27TH EXTNET?\n         BE    PFXT27              BRANCH IF SO\n         LA    R3,5(R3)            BUMP NORMALLY\n         B     PFLOOP              AND CONTINUE\nPFXT9    LA    R3,6(R3)            SKIP OVER F5 IF AT DSCH+44\n         B     PFLOOP              AND CONTINUE\nPFXT27   AH    R2,PEXCTR           ACCUM EXT TOTALS\n         BCTR  R2,0\n         STH   R2,PEXCTR           SAVE EXT TOTALS\n         CLC   BUF1+135(5),=D'0'   PTR TO NEXT F5?\n         BE    PFGOT               DONE. NO MORE F5\n         MVC   VTOCCHHR(5),BUF1+135\n         B     PFOBT               GO READ NEXT F5\nPFGOT    EQU   *\n         AH    R2,PEXCTR           ACCUM EXTENT TOTALS\n         CVD   R2,WKD              CONVERT NUM EXTENTS\n         MVC   MSG2+14(4),MASKED     MOVE IN MASK\n         ED    MSG2+14(4),WKD+6      EDIT NUM EXTENTS\n         CVD   R4,WKD              CONVERT NUM TRKS FREE\n         MVC   MSG2+21(6),MASKED     MOVE IN MASK\n         ED    MSG2+21(6),WKD+5      EDIT FREE TRKS\n         TPUT  MSG2,76             WRITE FREE INFO\nVOLRET   L     R4,OBTNSAVE         LOAD POINTER TO VOLUME LIST\n         L     R4,8(R4)            GET LINK POINTER\n         C     R4,ENDLIST          END OF LIST\n         BE    RETC                 YES\n         B     VOLLOOP              NO, GET NEXT VOLUME\n         TITLE 'LISTSPC - OBTAIN AND PRINT ROUTINES'\n*   READ DSCB1 AND GET SPACE\nOBTNRTN  STM   R2,R11,OBTNSAVE     SAVE CALLER'S REGISTERS\n         MVC   DSNSAVE(44),DSN1\n         MVI   DSN1,X'04'          MOVE 'DSN' FOR F4 DSCB...\n         MVC   DSN1+1(43),DSN1     ...INTO DSN1\n         OBTAIN SERCHCAM\n         CLI   BUF1,X'F4'          DID IT READ OK?\n         BNE   ERRF4               NO\n         MVC   VOLTKCYL(2),BUF1+20 GET NUM OF TRKS/CYL\n         MVC   DSN1(44),DSNSAVE\n         MVI   MSG2,X'40'\n         MVC   MSG2+1(75),MSG2     BLANK MESSAGE AREA\n         OBTAIN SERCHCAM\n         LTR   R15,R15             DID OBTAIN WORK\n         BNZ   ERR03               NO - WRITE ERROR MSG\n         SPACE 2\n         CLI   BUF1,C'1'            IS IT F1 DSCB?\n         BNE   ERR01                NOT F1\n         LA    R9,XTNTS            POINT TO EXTENTS SAVE AREA\n         LH    R6,BUF1+54          GET LAST RELATIVE TRK USED\n         CLI   BUF1+56,X'00'       IS TRK UNUSED?\n         BE    *+8                  YES\n         LA    R6,1(R6)             NO, ANOTHER TRACK\n         STH   R6,LASTTRK          SAVE LAST REL. TRK\n         MVC   DSORG,BUF1+38       SAVE DSORG\nAROUND   EQU   *\n* TEST FOR TYPE OF DSORG AND MOVE TO PRINT LINE\n         CLI   BUF1+38,X'80'        IS IT IS\n         BNE   NIS                  NO\n         MVC   MSG2+2(2),=C'IS'     YES - MOVE IN IS\n         B     GDSO                 BRANCH TO GOT DSORG\nNIS      CLI   BUF1+38,X'40'        IS IT PS\n         BNE   NPS                   NO\n         MVC   MSG2+2(2),=C'PS'      YES-MOVE IN PS\n         B     GDSO                 BRANCH TO GOT DSORG\nNPS      CLI   BUF1+38,X'20'        IS IT DA\n         BNE   NDA                   NO\n         MVC   MSG2+2(2),=C'DA'      YES - MOVE IN DA\n         B     GDSO                 BRANCH TO GOT DSORG\nNDA      CLI   BUF1+38,X'02'        IS IT PO\n         BNE   NPO                   NO\n         MVC   MSG2+2(2),=C'PO'      YES - MOVE IN PO\n         B     GDSO                 BRANCH TO DSORG\nNPO      CLI   BUF1+38,X'01'        IS IT UNMOVEABLE\n         MVC   MSG2+2(2),=C' U'      YES\nGDSO     SR    R2,R2                ZERO REG 2\n         IC    R2,BUF1+15           PICK UP NUMBER OF EXTENTS\n         LA    R3,1                 SET EXTENT COUNTER\n         SR    R4,R4                CLEAR R4 TO TRK ACCUMULATION\n         LTR   R2,R2               NO XTNTS? - GDG PATTERN. DSCB\n         BZ    VVALID               YES, BYPASS ACCUMULATE\n         LA    R5,BUF1+61           POINT TO FIRST EXTENT\nVXTLOOP  MVC   0(10,R9),0(R5)      MOVE EXTENT TO SAVE AREA\n         LA    R9,10(R9)           BUMP TO NEXT SAVE AREA\n         MVC   HWK1(2),6(R5)        MOVE HI-CYL TO HWD\n         LH    R0,HWK1              LOAD\n         MVC   HWK1(2),8(R5)        MOVE HI-TRK TO HWD\n         LH    R1,HWK1              LOAD\n         MVC   HWK1(2),2(R5)        MOVE LOW-CYL TO HWD\n         SH    R0,HWK1              SUBTRACT\n         MVC   HWK1(2),4(R5)        MOVE LOW-TRK TO HWD\n         SH    R1,HWK1              SUBTRACT\n         MH    R0,VOLTKCYL          CONVERT CYL TO TRK\n         AR    R1,R0                GET TOTAL MINUS1\n         LA    R4,1(R1,R4)          GET TOTAL AND ACCUMULATE\n         CR    R3,R2                DONE LAST EXTENT?\n         BE    VVALID               GO TO VVALID IF SO\n         LA    R3,1(R3)             BUMP TO EXTENT COUNTER\n         CH    R3,=H'4'             FOURTH EXTENT?\n         BE    VXT4                   BRANCH IF SO\n         CH    R3,=H'8'             EIGHTTH EXTENT?\n         BE   VXT8\n         LA    R5,10(R5)            ELSE BUMP EXTENT POINTER\n         B     VXTLOOP              AND GO TO NEXT EXTENT\nVXT4     MVC   VTOCCHHR(5),BUF1+91  POINT NEXT DSCH(F2 OR F3)\nVXT4OBT  OBTAIN SEEKCAM\n         CLI   BUF1+44,C'3'         IF IT F3 DSCB\n         BE    VXT4F3               BRANCH IF SO\n         MVC   VTOCCHHR(5),BUF1+135  ELSE ITS F2-POINT TO F3\n         B     VXT4OBT\nVXT4F3   LA    R5,BUF1+4            POINT TO FIRST EXTENT IN F3\n         B     VXTLOOP              CONTINUE LOOP FOR SIZE\nVXT8     LA    R5,BUF1+45           SKIP OVER F3 ID IN F3 DSCB\n         B     VXTLOOP              CONTINUE LOOP FOR SIZE\nVVALID   EQU   *\n* CONVERT SPACE ALLOC AND EDIT IN PRINT LINE\n         CVD   R4,WKD               CONVERT DEC. R4  #TRKS ALLOC\n         MVC   MSG2+5(6),MASKED      MOVE MASKED FIELD IN\n         ED    MSG2+5(6),WKD+5       EDIT  # TRKS MSG2+5\n         TM    DSORG,X'42'        IS IT PO OR PS\n         BNZ   CVDU                  YES - BRANCH\n         MVI   MSG2+17,C'*'\n         B     CVDX                 BRANCH TO EXTENT CONVERSION\nCVDU     LH    R6,LASTTRK            GET LAST RELATIVE TRACK\n         LR    R7,R4\n         SR    R7,R6                 R7 CONTAINS UNUSED SPACE\n         CVD   R7,WKD               CONVERT DEC R7\n         MVC   MSG2+12(6),MASKED      MOVE IN MASKED FIELD\n         ED    MSG2+12(6),WKD+5       EDIT # TRKD UNUSED\nCVDX     CVD   R2,WKD                   PICK UP # EXTENTS\n         MVC   MSG2+20(4),MASKED      MOVE IN MASKED FIELD\n         ED    MSG2+20(4),WKD+6      EDIT # EXTENTS USED\n         MVC   MSG2+27(44),DSN1     MOVE DSN TO PRINT LINE\n         TPUT  MSG2,76             WRITE OUT LINE\n         TM    FLAG,X'A0'          AUTHORIZED USER?\n         BNO   OBTNRET              NO\n         LA    R9,XTNTS            POINT TO EXTENT SAVE AREA\n         MVC   MSG2(6),VOLS        MOVE VOLSER TO MESSAGE AREA\nOUTLOOP  LA    R3,3                SET LOOP CONTROL\n         LA    R4,MSG2+8           POINT TO MESSAGE AREA\n         MVI   MSG2+6,X'40'\n         MVC   MSG2+7(69),MSG2+6   BLANK MESSAGE AREA\nINLOOP   MVC   WXTNT+3(1),1(R9)    MOVE EXTENT # TO WORK AREA\n         UNPK  0(2,R4),WXTNT+3(2)  UNPACK EXTENT #\n         TR    0(1,R4),TRTBL       TRANSLATE EXTENT #\n         MVC   WXTNT(4),2(R9)      MOVE BEGIN XTNT TO WORK AREA\n         UNPK  2(9,R4),WXTNT(5)    UNPACK XTNT\n         TR    2(8,R4),TRTBL       TRANSLATE EXTENT\n         MVC   WXTNT(4),6(R9)      MOVE END XTNT TO WORK AREA\n         UNPK  11(9,R4),WXTNT(5)   UNPACK XTNT\n         TR    11(8,R4),TRTBL      TRANSLATE EXTENT\n         LA    R9,10(R9)           BUMP TO NEXT EXTENT\n         LA    R4,22(R4)           BUMP MESSAGE AREA POINTER\n         BCTR  R2,0                DECREASE # EXTENTS\n         LTR   R2,R2               ANY MORE EXTENTS\n         BZ    *+8                  NO\n         BCT   R3,INLOOP           CONVERT NEXT EXTENT\n         LA    R0,L'MSG2\n         LA    R1,MSG2\n         SVC   93                  TPUT EXTENTS\n         MVC   MSG2(6),BLANKS      BLANK VOLSER\n         LTR   R2,R2               ANY MORE EXTENTS?\n         BNZ   OUTLOOP              YES\nOBTNRET  LM    R2,R11,OBTNSAVE     RELOAD CALLER'S REGISTERS\n         BR    R9                  RETURN TO CALLER\n         TITLE 'LISTSPC - EOJ AND ERROR ROUTINES'\nRETC     EQU   *\n         L     13,SAVE+4           LOAD R13 PREVIOUS SPACE AREA\n         LM    2,12,28(13)         RELOAD REGISTERS\n         L     14,12(13)           LOAD RETURN ADDRESS\n         MVI   12(13),X'FF'        INDICATE CONTROL RETURN CALLING PROG\n         BCR   15,14               RETURN TO CALLING PROGRAM\n         SPACE 3\nERR01    EQU   *\n* NO VALID COMMAND\n         TPUT  ERMSG1,18\n         B     RETC                BRANCH TO RETURN CODE\n* DATASET NAME NOT FOUND\nERR03    MVC   MSG2(L'ERMSG9),ERMSG9\n         MVC   MSG2+L'ERMSG9(44),DSN1\n         LA    R0,L'ERMSG9+44\n         LA    R1,MSG2\n         SVC   93\n         TM    FLAG,X'40'\n         BO    LOOP\n         TM    FLAG,X'10'\n         BO    RETDSN\n         B     OBTNRET\n         SPACE 3\nRDERR    MVC   MSG2(L'ERMSG8),ERMSG8\n         MVC   MSG2+L'ERMSG8(44),DSN1\n         LA    R0,L'ERMSG8+44\n         LA    R1,MSG2\n         SVC   93\n         B     LOOP                CONTINUE THRU LOOP\n         SPACE 3\nNOUSER   MVC   MSG2(L'ERMSG3),ERMSG3\n         MVC   MSG2+L'ERMSG3(44),USERID\n         LA    R0,L'ERMSG3+44\n         LA    R1,MSG2\n         SVC   93\n         B     RETC                RETURN TO SYSTEM\n         SPACE 3\nNOTDISK  MVC   MSG2(L'ERMSG6),ERMSG6\n         MVC   MSG2+L'ERMSG6(44),DSN1\n         LA    R0,L'ERMSG6+44\n         LA    R1,MSG2\n         SVC   93\n         B     LOOP                PICK UP NEXT DATASET\n         SPACE 3\nMULTIVOL MVC   MSG2(L'ERMSG7),ERMSG7\n         MVC   MSG2+L'ERMSG7(44),DSN1\n         LA    R0,L'ERMSG7+44\n         LA    R1,MSG2\n         SVC   93\n         B     LOOP                CONTINUE WITH NEXT DSN\n         SPACE 3\nERRF     EQU   *\n         TPUT  ERMSG10,20\n         B     RETC\nERRF4    EQU   *                   ERROR READING F4\n         TPUT  ERMSG11,21\n         B     VOLRET\nUSIDMVC  MVC   0(0,R8),0(R10)\nDSNMVC   MVC   0(0,R8),0(R5)\nMVCVOLS  MVC   0(0,R1),0(R5)\n         TITLE 'LISTSPC - DATA AREAS'\nENDLIST  DS    0F\n         DC    XL4'FF000000'\n* SETUP CONSTANTS\nVOLDSCTK DC    H'0'                NUM DSCH ON A TRK\nVOLF4CHR DC    XL5'00'             CCHHR OF DSCB\nVOLNO    DC    H'0'                NUM VOLUMES PROCESSED\nPEXCTR   DC    H'0'                CTR FOR TATAL NUM FREE SPACE\nLASTTRK  DC    H'0'\nDSN1     DC    CL44' '              DATASET NAME\nDSNSAVE  DC    CL44' '\nVOLS     DC    CL6' '                 VOLUME SER\nUSERID   DC    CL44' '              USERID\nFLAG     DC    X'00'\nDSORG    DC    X'00'\nBLANKS   DC    CL6' '\nBUF1     DS    0D\n         DS    265C\nTRTBL    EQU   *-240\n         DC    C'0123456789ABCDEF'\nMASKED   DC    XL6'402020202020'   MASK FIELD FOR EDIT\n         SPACE 3\n* MESSAGE TO BE PRINTED\nMSG1     DC    C'DSORG ALLOC UNUSED EXTENTS DSNAME'\nMSG2     DC    CL76' '\nMSG4     DC    C'VOLUME DSCBS EXTENTS TRACKS  VTOC'\n         SPACE 3\n* ERROR MESSAGES\nERMSG1   DC    C'NO VALID COMMAND'\nERMSG3   DC    C'INVALID LEVEL - '\nERMSG6   DC    C'DSN NOT ON DISK - '\nERMSG7   DC    C'DSN ON MULTIVOLUMES - '\nERMSG8   DC    C'ERROR READING CATALOG DSN - '\nERMSG9   DC    C'DSN NOT FOUND - '\nERMSG10  DC    C'UNSUPPORTED KEYWORD'\nERMSG11  DC    C'ERROR READING F4 DSCB'\n         EJECT\n* CAMLST FOR DSCB3\nSEEKCAM  CAMLST SEEK,VTOCCHHR,VOLS,BUF1\n         SPACE 2\n* CAMLST LOCATE DSN OV VOL SER\nINDS     CAMLST NAME,DSN1,,BUF1\n         SPACE 2\n* CAMLST FOR DSCB 1\nSERCHCAM CAMLST SEARCH,DSN1,VOLS,BUF1\n         EJECT\n* CONSTANTS AND WORK AREAS\nHWK1     DC    H'0'                HALF WORD WORK AREA\nVOLTKCYL DC    H'19'               # TRKS/CYL\nVTOCCHHR DC    XL5'0'              TRACK ADDR WORK AREA\nWKD      DC    D'0'                DOUBLE WORK WORK AREA\n         SPACE 3\n* PARM SETUP FOR GETDSN\nPARM     DC    A(USERID)           USERID ADDRESS\n         DC    A(DSN1)             DSN ADDRESS\n         DC    A(VOLS)             VOL SER ADDRESS\n         DC    A(0)                ADDRESS FOR GETMAIN\n         SPACE 3\n* EQUATE REGISTERS\n         EQUATE\nRCC      EQU   R8\nRHH      EQU   R7\nRR       EQU   R6\n         TITLE 'LISTSPC - PARSE PARAMETER LIST'\nPARSLIST IKJPARM\nDSNKYD   IKJKEYWD\n         IKJNAME 'DATASET',SUBFLD=DSNSUBF\nLEVL     IKJKEYWD\n         IKJNAME 'LEVEL',SUBFLD=LVL\nVOLUME   IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VLM\nEXTENT   IKJKEYWD\n         IKJNAME 'EXTENTS'\nDSNSUBF  IKJSUBF\nDSNLIST  IKJPOSIT DSNAME,LIST\nLVL      IKJSUBF\nLEV      IKJIDENT 'LEVEL',OTHER=ANY,MAXLNTH=44\nVLM      IKJSUBF\nVOL      IKJIDENT 'VOLUME',LIST,FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6\n         IKJENDP\n         IKJPPL\n         IKJCPPL\n         TITLE 'LISTSPC - WORK AREA'\nWORKAREA DSECT\nWPPL     DS    7A\nCPECB    DS    F\nWPDL     DS    F\nOBTNSAVE DS    10F\nXTNTS    DS    16XL10\nWXTNT    DS    CL5\n         DS    0D\nLOCINDXW EQU   *\nLWORK    EQU   *-WORKAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTSPC#": {"ttr": 10507, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "DELUXE"}, "text": ")F FUNCTION -\n    THE LISTSPC COMMAND LISTS THE TRACKS ALLOCATED, TRACKS UNUSED, AND\n    NUMBER OF EXTENTS FOR CATALOGED DISK DATA SETS, INDIVIDUALLY OR IN\n    SMALL GROUPS. IT IS MORE EFFICIENT FOR THIS KIND OF DISPLAY THAN\n    THE SPACE COMMAND SINCE IT SEARCHES FOR CATALOGED DATA SETS\n    ONLY, WHEREAS SPACE SEARCHES FOR ANY DISK-RESIDENT DATA SETS -\n    CATALOGED OR NOT.\n)X SYNTAX -\n    LISTSPC   DATASET('DSNAME-LIST')  LEVEL('INDEX-LEVEL')\n              VOLUME('VOLUME-LIST')  EXTENTS\n    REQUIRED - DATESET('DSNAME') OR LEVEL('INDEX-LEVEL') OR\n               VOLUME('VOLUME')\n    DEFAULTS - NONE\n    ALIAS    - NONE\n)O OPERANDS -\n))DATASET('DSNAME-LIST') -\n               - SPECIFIES A LIST OF DATA SET NAMES ABOUT WHICH YOU WISH\n                 TO HAVE SPACE INFORMATION DISPLAYED.\n))LEVEL('INDEX-LEVEL') -\n               - SPECIFIES AN INDEX LEVEL IN THE CATALOG FOR\n                 WHICH YOU WANT SPACE INFORMATION. THIS MAY BE\n                 A DSNAME CONTAINING ONE EMBEDDED ASTERISK.\n))VOLUME('VOLUME-LIST') -\n               - IF USED WITH THE DATASET PARAMETER, SPECIFIES THE\n                 VOLUME THE DATA SET RESIDES ON. NO CATALOG SEARCH\n                 WILL BE PERFORMED.\n                 IF SPECIFIED ALONE, SPECIFIES A LIST OF VOLUMES FOR\n                 WHICH FREE SPACE INFORMATION WILL BE PRODUCED.\n))EXTENTS      - IF SPECIFIED, THEN THE EXTENTS FOR EACH DATA SET WILL\n                 BE DISPLAYED WITH HEXADECIMAL ADDRESSES.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTVOL": {"ttr": 10753, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x015\\x015\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 309, "newlines": 309, "modlines": 0, "user": "DELUXE"}, "text": "*          DATA SET CBT500     AT LEVEL 002 AS OF 12/16/75\n         TITLE 'LISTVOL - DOCUMENTATION'\n*.....................................................................*\n*.                                                                   .*\n*.   LISTVOL                                                         .*\n*.                                                                   .*\n*        LISTVOL   LEVEL('DSNAME')|DA('DSLIST')                       *\n*                  VOL('SER')                                         *\n*        'DSNAME' IS EITHER HIGHER LEVEL QUALIFIERS OF CATALOG        *\n*                 STRUCTURE OR CONTAINS EMBEDDED ASTERISK AS          *\n*                 PART OF THE NAME.                                   *\n*        'DSLIST' IS LIST OF DATASETS.                                *\n*        'SER'    IS LEADING CHARACTERS OF VOLUME SERIAL. ONLY        *\n*                 DATASETS CATALOGED ON VOLUMES BEGINNING THUSLY      *\n*                 WILL BE LISTED.                                     *\n*              NOW THIS CODE IS BORROWED FROM THE LISTS COMMAND FROM  *\n*              SHARE, AND IS A VERY MUCH STRIPPED DOWN VERSION OF     *\n*              THAT COMMAND.                                          *\n*              THE REAL WORK IS DONE IN SUBROUTINE LOCINDEX, AND SINCE*\n*              I WROTE THAT MYSELF, I SUGGEST YOU LOOK THERE FOR      *\n*              INSIGHT INTO MVS CATALOG MANAGEMENT.                   *\n*        LEVEL CURRENT TO ALL TSO SUBJECT TO WHICH LOCINDEX YOU HAVE  *\n*                                                                     *\n*.....................................................................*\n         TITLE 'LISTVOL - LIST VOLUME COMMAND'\nLISTVOL  START 0\n         STM   R14,R12,12(R13)\n         USING LISTVOL,R15\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         B     BEGIN\nSAVE     DC    18F'0'\n         DROP  R15\n         USING SAVE,R13\n         TITLE 'LISTVOL - GETMAIN AND PARSE'\nBEGIN    LR    R4,R1\n         USING CPPL,R4\n         LA    R0,LWORK            GET LENGTH OF WORK AREA\n         AH    R0,=H'4096'         GET EXTRA 4K FOR LOCINDEX WORK\n         ICM   R0,B'1000',=FL1'1'  SUBPOOL 1\n         GETMAIN R,LV=(0)\n         LR    R12,R1               SAVE ADDR OF WORK AREA\n         USING WORKAREA,R12\n         LA    R0,LOCINDXW          POINT TO LOCINDEX WORK AREA\n         ST    R0,PARM+12           SAVE ADDR IN PARM LIST\n         MVI   PARM+12,X'80'        INDICATE END OF PARM LIST\n         MVI   WXTNT+4,X'04'\n         LA    R3,WPPL             GET ADDR OF PPL\n         USING PPL,R3\n         L     R0,CPPLCBUF\n         ST    R0,PPLCBUF          SAVE ADDR OF COMMAND BUFFER\n         L     R0,CPPLUPT\n         ST    R0,PPLUPT           SAVE ADDR OF UPT\n         L     R0,CPPLPSCB\n         LR    R10,R0              GET ADDR OF USERID FROM PSCB\n         SR    R11,R11\n         IC    R11,7(R10)          GET LENGTH OF USERID\n         BCTR  R11,0\nAUTHRZD  OI    FLAG,X'80'\nLECT     L     R0,CPPLECT\n         ST    R0,PPLECT           SAVE ADDR OF ECT\n         LA    R0,CPECB\n         ST    R0,PPLECB           SAVE ADDR OF ECB\n         XC    CPECB,CPECB         CLEAR ECB\n         L     R0,=A(PARSLIST)\n         ST    R0,PPLPCL           SAVE ADDR OF PCL\n         LA    R0,WPDL\n         ST    R0,PPLANS           SAVE ADDR OF PDL AREA\n         XC    PPLUWA,PPLUWA       CLEAR UWA\n         LR    R1,R3               PASS ADDR OF PPL TO PARSE\n         LINK  EP=IKJPARS          LINK TO PARSE SERVICE ROUTINE\n         LTR   R15,R15             PARSE ERROR\n         BNZ   RETC                 YES\n         TM    PPLANS,X'FF'        PARSE ERROR\n         BO    RETC                 YES\n         DROP  R3,R4\n         L     R3,WPDL             GET ADDR OF PDL\n         USING IKJPARMD,R3\n         TM    EXTENT+1,X'01'      EXTENT SPECIFIED?\n         BZ    *+8                  NO\n         OI    FLAG,X'20'           YES, SET FLAG BIT\n         TM    DSNLIST+6,X'80'      DSNAME SPECIFIED?\n         BO    DSNRTN                YES\n         TM    LEV+6,X'80'          INDEX LEVEL SPECIFIED?\n         BO    LEVEL                 YES\n         B     EUSLO                NO PARMS - LISTS FOR USERID\n         TITLE 'LISTVOL - DATASET NAME ROUTINE'\nDSNRTN   LA    R4,DSNLIST           POINT TO DSN LIST\n         LA    R0,L'MSG1\n         LA    R1,MSG1\n         SVC   93                  TPUT HEADING\nDSNAME   L     R5,0(R4)             POINT TO DSNAME\n         LH    R6,4(R4)             GET LENGTH OF DSNAME\n         BCTR  R6,0\n         MVI   DSN1,X'40'\n         MVC   DSN1+1(43),DSN1     BLANK DSN WORK AREA\n         LA    R8,DSN1              POINT TO DSN WORK AREA\n         TM    6(R4),X'40'          DSNAME CONTAINED IN QUOTES?\n         BO    MVCDSNAM               YES\n         EX    R11,USIDMVC         MOVE USERID TO WORK AREA\n         LA    R8,1(R11,R8)        BUMP PAST USERID\n         MVI   0(R8),C'.'          MOVE PERIOD TO WORK AREA\n         LA    R8,1(0,R8)          BUMP PAST\nMVCDSNAM EX    R6,DSNMVC           MOVE DSNAME TO WORK AREA\n         MVC   VOLS,BLANKS         MOVE BLANKS TO VOLSER WORK AREA\n         TM    FLAG,X'80'          AUTHORIZED USER?\n         BZ    LOCDSN               NO\n         TM    VOL+6,X'80'         VOLUME SPECIFIED?\n         BZ    LOCDSN               NO, LOCATE DSN\n         LA    R1,VOLS             POINT TO VOLSER WORK AREA\n         L     R5,VOL              POINT TO VOLUME PARAMETER\n         LH    R6,VOL+4            GET LENGTH OF VOL PARM\n         BCTR  R6,0\n         EX    R6,MVCVOLS          MOVE VOL PARM TO VOLSER WORK AREA\n         B     BALOBTN             BYPASS LOCATE\nLOCDSN   OI    FLAG,X'10'\n         LOCATE INDS\n         LTR   R15,R15              DID IT FIND VOL SER\n         BNZ   ERR03                 NO WRITE ERROR MSG\n         NI    FLAG,X'EF'\n         MVC   VOLS(6),BUF1+6      YES - MOVE IN VOL SER\n         SPACE 2\nBALOBTN  TPUT  VOLS,52\nRETDSN   L     R4,24(R4)           GET DSN LINK POINTER\n         C     R4,ENDLIST          END OF LIST?\n         BE    RETC                 YES\n         B     DSNAME               NO, GET NEXT DSNAME\n         TITLE 'LISTVOL - LEVEL ROUTINE'\nEUSLO    EQU   *\n**     FOR ENTIRE USERID LOGGED ON\n         MVC   USERID(7),0(R10)        MOVE IN USERID\n         B     GOTUS               BRANCH TO GOT USERID\n         SPACE 3\nLEVEL    EQU   *\n         L     R5,LEV              POINT TO INDEX STRUCTURE\n         LH    R6,LEV+4            GET LENGTH OF INDEX STRUCT\n         BCTR  R6,0\n         LA    R8,USERID           POINT TO WORK AREA\n         EX    R6,DSNMVC           MOVE INDEX STRUCTURE TO WORK AREA\nGOTUS    EQU   *\n         TM    VOL+8,X'80'\n         BZ    NVOLL\n         LA    R1,VOLZ\n         L     R5,VOL              POINT TO VOLUME PARAMETER\n         LH    R6,VOL+4            GET LENGTH OF VOL PARM\n         BCTR  R6,0\n         STH   R6,LENVOLS\n         EX    R6,MVCVOLS\nNVOLL    LA    R0,L'MSG1\n         LA    R1,MSG1\n         SVC   93                  TPUT HEADING\n         OI    FLAG,X'40'          SET FLAG FOR DATA SETS FOR USERID\nLOOP     EQU   *                   LOOP FOR DATASET IN USERID\n         L     R15,=V(LOCINDEX)    POINT TO EP(LOCINDEX)\n         LA    R1,PARM             POINT TO PARM LIST\n         BALR  R14,R15             GO TO LOCINDEX\n         B     *+4(R15)            BRANCH , DEP ON RETURN CODE\n         B     OK\n         B     NOUSER              4-PRINT MSG & RETRUN TO SYS\n         B     OK\n         B     OK\n         B     RETC                16-FINISHED-RETURN TO SYS\n         B     RDERR               20-PRINT MSG&RETRUN TO SUS\nOK       TM    VOL+6,X'80'\n         BZ    NVOL2\n         LH    R1,LENVOLS\n         EX    R1,CLCVOLS\n         BNE   LOOP\nNVOL2    TPUT  VOLS,52\n         B     LOOP                GET NEXT DSNAME FROM LOCINDEX\n         SPACE 3\n         TITLE 'LISTVOL - EOJ AND ERROR ROUTINES'\nRETC     EQU   *\n         L     13,SAVE+4           LOAD R13 PREVIOUS SPACE AREA\n         LM    2,12,28(13)         RELOAD REGISTERS\n         L     14,12(13)           LOAD RETURN ADDRESS\n         MVI   12(13),X'FF'        INDICATE CONTROL RETURN CALLING PROG\n         BCR   15,14               RETURN TO CALLING PROGRAM\n         SPACE 3\nERR01    EQU   *\n* NO VALID COMMAND\n         TPUT  ERMSG1,18\n         B     RETC                BRANCH TO RETURN CODE\n* DATASET NAME NOT FOUND\nERR03    MVC   MSG2(L'ERMSG9),ERMSG9\n         MVC   MSG2+L'ERMSG9(44),DSN1\n         LA    R0,L'ERMSG9+44\n         LA    R1,MSG2\n         SVC   93\n         TM    FLAG,X'40'\n         BO    LOOP\n         TM    FLAG,X'10'\n         B     RETDSN\n         SPACE 3\nRDERR    MVC   MSG2(L'ERMSG8),ERMSG8\n         MVC   MSG2+L'ERMSG8(44),DSN1\n         LA    R0,L'ERMSG8+44\n         LA    R1,MSG2\n         SVC   93\n         B     LOOP                CONTINUE THRU LOOP\n         SPACE 3\nNOUSER   MVC   MSG2(L'ERMSG3),ERMSG3\n         MVC   MSG2+L'ERMSG3(44),USERID\n         LA    R0,L'ERMSG3+44\n         LA    R1,MSG2\n         SVC   93\n         B     RETC                RETURN TO SYSTEM\n         SPACE 3\nERRF     EQU   *\n         TPUT  ERMSG10,20\n         B     RETC\nUSIDMVC  MVC   0(0,R8),0(R10)\nDSNMVC   MVC   0(0,R8),0(R5)\nMVCVOLS  MVC   0(0,R1),0(R5)\nCLCVOLS  CLC   VOLS(0),VOLZ\n         TITLE 'LISTVOL - DATA AREAS'\nENDLIST  DS    0F\n         DC    XL4'FF000000'\n* SETUP CONSTANTS\nVOLDSCTK DC    H'0'                NUM DSCH ON A TRK\nVOLF4CHR DC    XL5'00'             CCHHR OF DSCB\nVOLNO    DC    H'0'                NUM VOLUMES PROCESSED\nPEXCTR   DC    H'0'                CTR FOR TATAL NUM FREE SPACE\nLASTTRK  DC    H'0'\nVOLS     DC    CL6' '                 VOLUME SER\n         DC    C'  '\nDSN1     DC    CL44' '              DATASET NAME\nUSERID   DC    CL44' '              USERID\nFLAG     DC    X'00'\nDSORG    DC    X'00'\nBLANKS   DC    CL6' '\nVOLZ     DC    CL6' '\nLENVOLS  DC    H'0'\nBUF1     DS    0D\n         DS    265C\nTRTBL    EQU   *-240\n         DC    C'0123456789ABCDEF'\nMASKED   DC    XL6'402020202020'   MASK FIELD FOR EDIT\n         SPACE 3\n* MESSAGE TO BE PRINTED\nMSG1     DC    C'VOLUME  DATASET NAME             '\nMSG2     DC    CL76' '\nMSG4     DC    C'VOLUME  DATASET NAME             '\n         SPACE 3\n* ERROR MESSAGES\nERMSG1   DC    C'NO VALID COMMAND'\nERMSG3   DC    C'INVALID LEVEL - '\nERMSG8   DC    C'ERROR READING CATALOG DSN - '\nERMSG9   DC    C'DSN NOT FOUND - '\nERMSG10  DC    C'UNSUPPORTED KEYWORD'\n         LTORG\n         EJECT\n* CAMLST FOR DSCB3\nSEEKCAM  CAMLST SEEK,VTOCCHHR,VOLS,BUF1\n         SPACE 2\n* CAMLST LOCATE DSN OV VOL SER\nINDS     CAMLST NAME,DSN1,,BUF1\n         SPACE 2\n* CAMLST FOR DSCB 1\nSERCHCAM CAMLST SEARCH,DSN1,VOLS,BUF1\n         EJECT\n* CONSTANTS AND WORK AREAS\nHWK1     DC    H'0'                HALF WORD WORK AREA\nVOLTKCYL DC    H'19'               # TRKS/CYL\nVTOCCHHR DC    XL5'0'              TRACK ADDR WORK AREA\nWKD      DC    D'0'                DOUBLE WORK WORK AREA\n         SPACE 3\n* PARM SETUP FOR GETDSN\nPARM     DC    A(USERID)           USERID ADDRESS\n         DC    A(DSN1)             DSN ADDRESS\n         DC    A(VOLS)             VOL SER ADDRESS\n         DC    A(0)                ADDRESS FOR GETMAIN\n         SPACE 3\n* EQUATE REGISTERS\n         EQUATE\nRCC      EQU   R8\nRHH      EQU   R7\nRR       EQU   R6\n         TITLE 'LISTVOL - PARSE PARAMETER LIST'\nPARSLIST IKJPARM\nDSNKYD   IKJKEYWD\n         IKJNAME 'DATASET',SUBFLD=DSNSUBF\nLEVL     IKJKEYWD\n         IKJNAME 'LEVEL',SUBFLD=LVL\nVOLUME   IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VLM\nEXTENT   IKJKEYWD\n         IKJNAME 'EXTENTS'\nDSNSUBF  IKJSUBF\nDSNLIST  IKJPOSIT DSNAME,LIST\nLVL      IKJSUBF\nLEV      IKJIDENT 'LEVEL',OTHER=ANY,MAXLNTH=44\nVLM      IKJSUBF\nVOL      IKJIDENT 'VOLUME',LIST,FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6\n         IKJENDP\n         IKJPPL\n         IKJCPPL\n         TITLE 'LISTVOL - WORK AREA'\nWORKAREA DSECT\nWPPL     DS    7A\nCPECB    DS    F\nWPDL     DS    F\nOBTNSAVE DS    10F\nXTNTS    DS    16XL10\nWXTNT    DS    CL5\n         DS    0D\nLOCINDXW EQU   *\nLWORK    EQU   *-WORKAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTVOL#": {"ttr": 10759, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "DELUXE"}, "text": ")F   FUNCTION -\n   THE LISTVOL COMMAND LISTS THE VOLUMES OF CATALOGED DATASETS.\n   THE OUTPUT IS MORE COMPACT THAN LISTC VOL.\n)X  SYNTAX -\n    LISTSPC   DATASET('DSNAME-LIST')  LEVEL('INDEX-LEVEL')\n              VOLUME('VOLUME-LIST')\n    DEFAULTS - LEVEL(USERID)\n)O  OPERANDS -\n))DATASET('DSNAME-LIST')\n             - SPECIFIES A DSNAME LIST FOR WHICH YOU DESIRE TO\n               HAVE VOLUME INFORMATION LISTED.\n))LEVEL('INDEX-LEVEL')\n              - SPECIFIES AN INDEX LEVEL IN THE CATALOG FOR\n                WHICH YOU WANT VOLUME INFORMATION. THIS MAY BE\n                A DSNAME CONTAINING ONE EMBEDDED ASTERISK NOT\n                AS THE HIGHEST LEVEL QUALIFIER.\n))VOLUME('VOLSER')\n                   - QUALIFIES A LEVEL REQUEST WITH ALL\n            OR THE LEADING CHARACTERS OF THE VOLUME SERIAL\n            FOR WHICH A LISTING IS REQUESTED. ONLY DATASETS\n            CATALOGED ON VOLUMES BEGINNING WITH 'VOLSER' WILL\n            BE LISTED.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCATE": {"ttr": 10761, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x011\\x011\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 305, "newlines": 305, "modlines": 0, "user": "DELUXE"}, "text": "***********************************************************************\n*\n*        LOCATE IS A TSO COMMAND PROCESSOR USED TO LOCATE A NAMED\n*        MODULE IN EITHER THE LINK PACK AREA OR VIA THE LINK LIST.\n*        RELEVANT INFORMATION AND LOCATION IS DISPLAYED TO THE USER.\n*\n***********************************************************************\n         MACRO\n&LABEL   $PROLOG &LV=0\n.**********************************************************************\n.*\n.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY\n.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD\n.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE\n.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS\n.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:\n.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE\n.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE\n.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA\n.*                                             REG 10 IS BASE\n.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES\n.*\n.**********************************************************************\n         LCLA  &AA,&AB,&AC\n         GBLB  &PRORG\n&AC      SETA  4096\n&LABEL   CSECT\n         B     32(R15)             BRANCH AROUND\n         DC    AL1(26)\n         DC    CL8'&LABEL'         CSECT NAME\n         DC    C'-'\n         DC    CL8'&SYSDATE'       COMPILE DATE\n         DC    C'-'\n         DC    CL8'&SYSTIME'       COMPILE TIME\n         CNOP  0,4                 ALIGNMENT\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             LOAD BASE REG\n         USING &LABEL,R12          INFORM ASSEMBLER\n         AIF   (&LV GT 4023).MERR\n         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE\n         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER\n         AIF   (&LV+72 LE 256).XC2\n         AIF   (&LV+72 LE 512).XC1\n         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE\n         LR    R2,R1               SAVE POINTER IN EVEN REG\n         LA    R4,1(R1)            SET RECEIVING POINTER\n         LR    R5,R0               SET RECEIVING LENGTH\n         BCTR  R5,R0               DECREMENT LENGTH\n         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE\n         LA    R3,1                SET SENDING LENGTH\n         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'\n         AGO   .STORE\n.XC1     ANOP\n         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA\n         XC    0(256,R1),0(R1)          CLEAR SAVE AREA\n         AGO   .STORE\n.XC2     ANOP\n         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA\n.STORE   ANOP\n         ST    R13,4(R1)           SAVE BACK CHAIN\n         ST    R1,8(R13)           SET FORWARD CHAIN\n         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS\n         L     R15,16(R13)         RESTORE REG 15\n         ST    R0,16(R13)          SAVE SAVEAREA LENGTH\n         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN\n         LR    R13,R11             SET SAVEAREA POINTER\n         AIF   (N'&SYSLIST EQ 0).MEND\n         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT\n         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT\n         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG\n         DROP  R12                 DROP ASSUMED BASE REG\n         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER\n.SKIPIT  ANOP\n&AA      SETA  2\n.LOOP    ANOP\n         AIF   (&AA GT N'&SYSLIST).MEXIT\n&AB      SETA  &AA-1\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG\n         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG\n         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER\n&AC      SETA  &AC+4096\n&AA      SETA  &AA+1\n         AGO   .LOOP\n.MEXIT   ANOP\n         AIF   (&PRORG).MEX2\n         SPACE\n         $REGS\n         SPACE\n.MEX2    ANOP\n&AA      SETA  &LV+72\n         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'\n         MEXIT\n.MEND    ANOP\n         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'\n         AGO   .MEXIT\n.MERR    ANOP\n         MNOTE 12,'LV > 4023 - REQUEST IGNORED'\n         AGO   .MEXIT\n         MEND\n         MACRO\n         $REGS\n         GBLB  &PRORG\n         AIF   (&PRORG).MEX2\n&PRORG   SETB  1\n SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n SPACE\nREG0     EQU   0\nREG1     EQU   1\nREG2     EQU   2\nREG3     EQU   3\nREG4     EQU   4\nREG5     EQU   5\nREG6     EQU   6\nREG7     EQU   7\nREG8     EQU   8\nREG9     EQU   9\nREG10    EQU   10\nREG11    EQU   11\nREG12    EQU   12\nREG13    EQU   13\nREG14    EQU   14\nREG15    EQU   15\n SPACE\n.MEX2    ANOP\n       MEND\n         MACRO\n&LABEL   $EPILOG &RC\n&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS\n         L     R13,4(R13)          GET BACK CHAIN POINTER\n         L     R0,16(R13)          GET SAVEAREA LENGTH\n         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)\n         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA\n         LM    R14,R12,12(R13)     RESTORE CALLERS REGS\n         AIF   (T'&RC EQ 'O').SPEC\n         LA    R15,&RC             SET RETURN CODE\n.SPEC    ANOP\n         BR    R14                 RETURN TO CALLER\n         MEND\nLOCATE   $PROLOG\n         USING CPPL,R1        ADDRESSABILITY FOR CPPL\n         MVC   CMDUPT,CPPLUPT COPY UPT ADDRESS\n         MVC   CMDECT,CPPLECT COPY ECT ADDRESS\n         MVC   CMDCBUF,CPPLCBUF COPY ADDRESS OF COMMAND BUF\n         DROP  R1\n         LA    R1,CMDUPT      PROVIDE LIST FOR PARSE\n         LINK  EP=IKJPARS     PARSE COMMAND\n         L     R2,CMDANSR     GET POINTER TO ANSWER AREA\n         USING IKJPARMD,R2    PROVIDE ADDRESSABILITY\n         L     R1,IKJOPT      GET POINTER TO OPERAND\n         LH    R2,IKJOPT+4    GET SIZE OF OPERAND\n         DROP  R2\n         BCTR  R2,R0          DECREMENT FOR EXECUTE\n         EX    R2,MOVENAME    MOVE TO LIST FOR LOAD\n         MVC   BLDLNAME(8),NAME MOVE NAME TO BLDL LIST\n         MVC   MSG2NAME(8),NAME MOVE NAME TO MSG2\n         L     R3,16          GET CVT ADDR\n         L     R15,188(R3)    ACTIVE LPA QUEUE ADDRESS\n         L     R15,0(R15)     1ST CDE ON THE QUEUE\n         LA    R15,0(R15)     CLEAR HIGH ORDER FOR ICM\n         LTR   R15,R15        ANYTHING ON THE QUEUE?\nCDELOOP  BZ    DIRSRCH        NO, SEARCH THE LPA DIRECTORY\n         CLC   NAME,8(R15)    NAMES EQUAL?\n         BE    CDECHK         YES, FOUND\n         ICM   R15,7,1(R15)   GET NEXT CDE POINTER\n         B     CDELOOP        CHECK IT\nCDECHK   XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         USING LPDE,R15       INFORM THE ASSEMBLER\n         TM    LPDEATTR,LPDEMIN MINOR CDE?\n         BZ    CDEMAJ         NO, CONTINUE\n         L     R15,LPDEXLP    YES, COPY TRUE NAME'S CDE ADDR\n         MVC   TRUENM,LPDENAME COPY TRUE NAME\nCDEMAJ   L     R4,LPDEXLP     GET CDE EXTENT LIST ADDR\n         S     R4,=F'24'      MAKE EXTENT LIST ADDRESSABLE AS LPDE\n         B     LPTRUE         GO TO COMMON MSG ROUTINE\n         DROP  R15\nDIRSRCH  LM    R0,R1,NAME     PICK UP THE NAME\n         L     R6,352(R3)     LPA SEARCH ROUTINE ADDR\n         DS    0Y(R8,R9)      ROUTINES USES THESE REGISTERS\nSRCHLPA  BALR  R14,R6         SEARCH LPA DIRECTORY\n         B     GOTIT          IT'S THERE\n         B     NOTLPA         BRANCH IF NOT THERE\nGOTIT    XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         LR    R4,R0          PUT LPDE ADDR WHERE IT CAN DO SOME GOOD\n         USING LPDE,R4        INFORM THE ASSEMBLER\n         TM    LPDEATTR,LPDEMIN  MINOR LPDE?\n         BZ    LPTRUE         NO, PROCESS MAJOR\n         MVC   TRUENM,LPDEMJNM YES, COPY TRUE NAME\n         LM    R0,R1,LPDEMJNM PUT IT IN REGS\n         B     SRCHLPA        GET MAJOR LPDE\nLPTRUE   UNPK  LENGTH(7),LPDEXTLN+1(4) UNPACK LENGTH FOR PRINT\n         TR    LENGTH(6),TRTABLE-240 MAKE PRINTABLE\n         MVI   LENGTH+6,C' '  CLEAR GARBAGE FROM UNPACK\n         UNPK  ADDRESS(7),LPDEXTAD+1(4) UNPACK ADDRESS FOR PRINT\n         TR    ADDRESS(6),TRTABLE-240 MAKE PRINTABLE\n         MVI   ADDRESS+6,C' ' CLEAR GARBAGE FROM UNPACK\n         DROP  R4\nLPAMSG   CLI   TRUENM,C' '    IS THIS AN ALIAS?\n         BNE   TPUTA          YES, ISSUE ALIAS TPUT\n         TPUT  MSG1,LMSG1     MESSAGE WITHOUT ALIAS NAME\n         B     NOTLPA         SEE IF IN LNKLST ALSO\nTPUTA    TPUT  MSG1,LMSG1A    MESSAGE WITH ALIAS NAME\nNOTLPA   BLDL  0,LIST         LOCATE MODULE IN LINK/STEP LIB\n         LTR   R15,R15        CHECK RETURN CODE\n         BNZ   EXIT           NOT FOUND, EXIT\n         XC    RETCODE,RETCODE INDICATE MODULE FOUND\n         TM    BLDLC,X'80'    IS THIS AN ALIAS?\n         BZ    NOTALIAS       NO, MAJOR NAME\n         MVC   MODTYPE(5),=C'MINOR' INDICATE MODULE TYPE\nNOTALIAS CLI   BLDLZ,X'00'    PRIVATE LIBRARY?\n         BE    LIBDONE        YES, ALL SET\n         MVC   LIBTYPE(12),=C'JOB/STEP LIB' MODIFY MESSAGE TEXT\n         CLI   BLDLZ,X'01'    LINKLIB/LINK LIST LIBRARY?\n         BH    LIBDONE        NO, ALL SET\n         MVC   LIBTYPE(12),=C'LINKLIST LIB' MODIFY MESSAGE TEXT\n         CLI   BLDLK,X'00'    WAS IT LINKLIB ITSELF?\n         BNE   LIBDONE        NO, FILL IN CONCATINATION NUMBER\n         MVC   LIBTYPE(15),=CL15'SYS1.LINKLIB' MODIFY MESSAGE TEXT\n         B     AROUND         SKIP CONCATINATION NUMBER\nLIBDONE  SR    R1,R1          CLEAR FOR IC\n         IC    R1,BLDLK       PICK UP CONCATINATION NUMBER\n         XC    DBLWD,DBLWD    CLEAR FOR CONVERT\n         CVD   R1,DBLWD       CONVERT TO DECIMAL\n         UNPK  CONCAT(2),DBLWD+6(2) UNPACK FOR PRINT\n         OI    CONCAT+1,C'0'  MAKE PRINTABLE\n         MVI   CONCAT+2,C')'  ADD TRAILING PAREN\nAROUND   UNPK  TTR(7),BLDLTTR(4) UNPACK FOR PRINT\n         MVI   TTR+6,C' '     CLEAR LAST UNPACKED\n         TR    TTR(6),TRTABLE-240 MAKE PRINTABLE\n         TPUT  MSG2,LMSG2     ISSUE MESSAGE\nEXIT     OC    RETCODE,RETCODE ANY MESSAGE ISSUED (MODULE FOUND) ?\n         BZ    RETURN         YES, ALL DONE\n         TPUT  MSG0,LMSG0     INFORM USER\nRETURN   IKJRLSA CMDANSR      RELEASE PARSE STORAGE\n         L     R15,RETCODE    SET RETURN CODE\n         $EPILOG\nMOVENAME MVC   NAME(0),0(R1)  MOVE NAME FOR LOAD\n*-------------------------------------------------------------------\nLIST     DC    H'1',H'14'     BLDLLIST\nBLDLNAME DC    CL8' '         BLDL NAME OF MODULE\nBLDLTTR  DC    XL3'00'        TTR OF MODULE\nBLDLK    DC    X'00'          CONCATINATION NUMBER\nBLDLZ    DC    X'00'          LOCATION\nBLDLC    DC    X'00'          ENTRY TYPE\n*-------------------------------------------------------------------\nMSG0     DS    0F\n         DC    C'REQUESTED MODULE NOT FOUND IN EITHER LPA OR LNKLST'\nLMSG0    EQU   *-MSG0                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG1     DS    0F\nNAME     DC    CL8' '\n         DC    C' IS: '\nLENGTH   DC    CL6' '\n         DC    C' BYTES AT '\nADDRESS  DC    CL6' '\nLMSG1    EQU   *-MSG1                SIZE OF MESSAGE\n         DC    C' (ALIAS OF '\nTRUENM   DC    CL8' ',C')'         TRUE NAME IF GIVEN NAME IS AN ALIAS\nLMSG1A   EQU   *-MSG1                SIZE OF MESSAGE\n*-------------------------------------------------------------------\nMSG2     EQU   *\nMSG2NAME DC    CL8' '\n         DC    C' FOUND AS A '\nMODTYPE  DC    C'MAJOR NAME, AT TTR '\nTTR      DC    CL6' ',C' IN '\nLIBTYPE  DC    C'PRIVATE LIB ('\nCONCAT   DC    C'#)                '\nLMSG2    EQU   *-MSG2         SIZE OF MESSAGE\n*-------------------------------------------------------------------\nTRTABLE  DC    C'0123456789ABCDEF' TRANSLATE TABLE\nBLANKS   DC    CL81' '        BLANKS\nDBLWD    DC    D'0'           WORKAREA\nADDR     DC    F'0'           ADDRESS WORK AREA\nECB      DC    F'0'           DUMB ECB FOR PARSE\nRETCODE  DC    F'4'           RETURN CODE (AND MSG SWITCH)\nCMDANSR  DC    F'0'           PARSE ANSWER AREA POINTER\nCMDUPT   DC    F'0'           USER PROFILE TABLE POINTER\nCMDECT   DC    F'0'           ENVIRONMENT CONTROL TABLE\nCMDECB   DC    A(ECB)         ECB POINTER\nCMDPCL   DC    A(IKJPCL)      ADDRESS OF IKJPARM\nCMDANS   DC    A(CMDANSR)     PLACE TO PUT ANSWER\nCMDCBUF  DC    F'0'           POINTER TO COMMAND BUFFER\n         LTORG\nIKJPCL   IKJPARM\nIKJOPT   IKJIDENT 'MODULE NAME',MAXLNTH=8,FIRST=ALPHA,                 X\n               OTHER=ALPHANUM,PROMPT='NAME OF MODULE TO LOCATE'\n         IKJENDP\n         IKJCPPL\n         IHALPDE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOCINDEX": {"ttr": 11011, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01e\\x01e\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 357, "newlines": 357, "modlines": 0, "user": "DELUXE"}, "text": "*          DATA SET CBT502     AT LEVEL 001 AS OF 12/15/75\n*        LOCINDEX SUBROUTINE REPLACEMENT FOR MVS                        00001\n*        THIS ROUTINE SUPPORTS 'LEVEL' OPTIONS OF THE 'LISTS' COMMAND   00002\n*             AND IS USED BY OTHER YCC VARIATIONS OF THAT PROGRAM       00003\n*        FOLLOWING IS ORIGINAL LOCINDEX DESCRIPTION:                    00004\n*.....................................................................* 00005\n*.                                                                   .* 00006\n*.   LOCINDEX                                                        .* 00007\n*.                                                                   .* 00008\n*.....................................................................* 00009\n*.                                                                   .* 00010\n*.   1.0  GENERAL DESCRIPTION                                        .* 00011\n*.                                                                   .* 00012\n*.   THIS SUBROUTINE IS USED TO RETURN DSNAMES AND THE VOLSER        .* 00013\n*.   FOR A SPECIFIED INDEX STRUCTURE.  THE INDEX STRUCTURE CAN BE    .* 00014\n*.   SPECIFIED AS SEVERAL HIGH-LEVEL QUALIFIERS OR IT CAN BE A       .* 00015\n*.   DSNAME CONTAINING ONE EMBEDDED ASTERISK NOT AS THE HIGH-LEVEL   .* 00016\n*.   QUALIFIER.                                                      .* 00017\n*.                                                                   .* 00018\n*.....................................................................* 00019\n*.                                                                   .* 00020\n*.....................................................................* 00021\n*.                                                                   .* 00022\n*.   2.0  PARAMETER LIST AND RETURN CODE DESCRIPTION                 .* 00023\n*.                                                                   .* 00024\n*.   THE PARAMETER LIST IS A FOUR OR FIVE WORD LIST CONTAINING THE   .* 00025\n*.   FOLLOWING:                                                      .* 00026\n*.                                                                   .* 00027\n*.    WORD         DESCRIPTION                                       .* 00028\n*.                                                                   .* 00029\n*.      1          ADDRESS OF THE 44-BYTE FIELD CONTAINING THE       .* 00030\n*.                 INDEX STRUCTURE.                                  .* 00031\n*.      2          ADDRESS OF THE 44-BYTE FIELD INTO WHICH           .* 00032\n*.                 LOCINDEX WILL PLACE THE DSNAME.                   .* 00033\n*.      3          ADDRESS OF THE 6-BYTE FIELD INTO WHICH            .* 00034\n*.                 LOCINDEX WILL PLACE THE VOLSER OF THE DATASET.    .* 00035\n*.      4          ADDRESS OF A 4K WORK AREA TO BE USED BY           .* 00036\n*.                 LOCINDEX FOR STORING CATALOG BLOCKS.              .* 00037\n*.      5          OPTIONAL FIELD FOR THE ADDRESS OF A FULLWORD      .* 00038\n*.                 OF STORAGE ON AN INTEGRAL BOUNDARY INTO WHICH     .* 00039\n*.                 LOCINDEX WILL STORE THE RETURN CODE.              .* 00040\n*.                                                                   .* 00041\n*.   THE HIGH ORDER BIT OF THE LAST WORD OF THE PARAMETER LIST       .* 00042\n*.   MUST BE SET ON.                                                 .* 00043\n*.                                                                   .* 00044\n*.    RETURN CODE  MEANING                                           .* 00045\n*.                                                                   .* 00046\n*.         0       A DSNAME WAS FOUND AND THE DATASET RESIDES ON     .* 00047\n*.                 A DISK VOLUME.                                    .* 00048\n*.         4       THE INDEX STRUCTURE WAS NOT FOUND.                .* 00049\n*.         8       A DSNAME WAS FOUND AND THE DATASET RESIDES ON     .* 00050\n*.                 A TAPE VOLUME.                                    .* 00051\n*.        12       A DSNAME WAS FOUND BUT IT RESIDES ON MULTIPLE     .* 00052\n*.                 VOLUMES.                                          .* 00053\n*.        16       THERE ARE NO MORE DATASETS FOR THIS INDEX         .* 00054\n*.                 STRUCTURE.                                        .* 00055\n*.        20       AN I/O ERROR WAS DETECTED ON THE CATALOG.         .* 00056\n*.                                                                   .* 00057\n*.....................................................................* 00058\n*                                                                       00059\n*        THE PRIMARY DIFFERENCES BETWEEN THE MVS VERSION                00060\n*        AND THE OS VERSION ARE:                                        00061\n*              1) THE PART ABOVE THE ASTERISK IS PASSED TO VSAM         00062\n*                 GENERIC LOCATE AND WORKS HOWEVER GENERIC LOCATE       00063\n*                 LOCATE WORKS. ONLY NON-VSAM DATASETS ARE PASSED       00064\n*                 BACK TO THE CALLER.                                   00065\n*              2) THE CHARACTERS BELOW THE ASTERISK MUST APPEAR         00066\n*                 IN THE DATASET NAME ANYWHERE AFTER THE SEARCH         00067\n*                 KEY CHARACTERS. THEY MAY CONTAIN LEADING              00068\n*                 AND TRAILING PARTIAL INDEX LEVELS.                    00069\n*              3) THE AMOUNT OF STORAGE REQUIRED FOR A VSAM GENERIC     00070\n*                 LOCATE IS MUCH MORE THAN THE 4K AREA PROVIDED BY      00071\n*                 THE OS CALLER. A 24K AREA IS GETMAINED AND ITS        00072\n*                 ADDRESS IS STORED IN THE FIRST WORK OF THE 4K         00073\n*                 CALLER WORK AREA. IT IS FREEMAINED WHEN THE           00074\n*                 RETURN CODE OF 16 SIGNALS THE END OF DATASETS         00075\n*                 UNDER THIS INDEX.                                     00076\n*              5) THE 265 BYTE CAMLIST WORK AREA IS PUT IN THE          00077\n*                 CALLER PROVIDED WORK AREA AT OFFSET 4. THIS           00078\n*                 ALLOWS ACCESS TO THE COMPLETE VOLUME LIST.            00079\n         EJECT                                                          00080\nLOCINDEX CSECT                                                          00081\n         USING *,15                                                     00082\n         SAVE  (14,12),,*                                               00083\n         GETMAIN R,LV=LSECT                                             00084\n         ST    R13,4(R1)                                                00085\n         ST    R1,8(13)                                                 00086\n         LR    R12,R13                                                  00087\n         LR    R13,R1                                                   00088\n         L     R1,24(R12)                                               00089\n         BALR  R12,0                                                    00090\n         USING *,12                                                     00091\n         USING DSASECT,R13                                              00092\nR0       EQU   0                                                        00093\nR1       EQU   1                                                        00094\nR2       EQU   2                                                        00095\nR3       EQU   3                                                        00096\nR4       EQU   4                                                        00097\nR5       EQU   5                                                        00098\nR6       EQU   6                                                        00099\nR7       EQU   7                                                        00100\nR8       EQU   8                                                        00101\nR9       EQU   9                                                        00102\nR10      EQU   10                                                       00103\nR11      EQU   11                                                       00104\nR12      EQU   12                                                       00105\nR13      EQU   13                                                       00106\nR14      EQU   14                                                       00107\nR15      EQU   15                                                       00108\n         ST    R1,INPARM                                                00109\n         L     R10,12(R1)                                               00110\n         USING WORKSECT,R10                                             00111\n         L     R2,0(R1)                                                 00112\n         CLC   OINDEX,0(R2)   SAME INDEX STRUCTURE AS LAST CALL?        00113\n         BE    CAMLOC         GO GET NEXT DATASET                       00114\n         MVC   OINDEX,0(R2)                                             00115\n         SPACE 10                                                       00116\nBLDKEY   DS    0H                                                       00117\n*        THIS BLOCK ANALIZES THE NEW INDEX STRUCTURE INTO COMPONENTS    00118\n*        IT CONSTRUCTS A VSAM CATALOG GENERIC SEARCH KEY AND AN         00119\n*        OPTIONAL LOWER LEVEL QUALIFIER VERIFICATION STRING             00120\n*        ONE ASTERISK IS ALLOWED ANYWHERE BELOW THE USERID.             00121\n*        IT MAY REPRESENT ALL OR PART OF AN 'INDEX LEVEL'               00122\n*        EXITS: NORMAL TO 'GENLOC'                                      00123\n*               TO 'ERROR4' IF A SYSTAX ERROR OCCURS IN INDEX STRUCTURE 00124\n         SR    R1,R1                                                    00125\n         SR    R2,R2          CLEAR FOR TRT INSTRUCTION                 00126\n         MVI   TRTAB,0                                                  00127\n         MVC   TRTAB+1(255),TRTAB                                       00128\n         MVI   TRTAB+C' ',4                                             00129\n         MVI   TRTAB+C'*',8                                             00130\n         MVI   TRTAB+C'.',12                                            00131\n         MVC   KEY,OINDEX     COPY INDEX INPUT                          00132\n         TRT   KEY,TRTAB                                                00133\n         BZ    ERROR4         MUST BE A BLANK IN 44 CHARS               00134\n         B     *(R2)                                                    00135\n         B     USERID         C' ' MUST BE A USERID                     00136\n         B     ERROR4         C'*' ASTERISK MUST FOLLOW PERIOD          00137\n         B     COMPLEX        C'.' MUST DO FULL ANALYSIS OF STRUCTURE   00138\n         SPACE 5                                                        00139\nUSERID   DS    0H                                                       00140\n*        THIS BLOCK BUILDS SEARCH KEY FOR USERID. MUST BE <9 CHARACTERS 00141\n*        AND WE ADD A PERIOD TO IT TO INDICATE TO GENERIC LOCATE        00142\n*        THAT WE ARE INTERESTED IN THE DATASETS UNDER THE NAME AND      00143\n*        NOT THE ALIAS RECORD (CVOL POINTER) OF THE NAME ITSELF.        00144\n         MVI   0(R1),C'.'                                               00145\n         LA    R3,KEY                                                   00146\n         SR    R1,R3                                                    00147\n         CH    R1,=H'8'                                                 00148\n         BH    ERROR4                                                   00149\n         LA    R1,1(R1)                                                 00150\n         STC   R1,NAME        STORE KEY LENGTH                          00151\n         MVI   LREST,X'80'                                              00152\n         B     GENLOC                                                   00153\n* END OF USERID                                                         00154\n         SPACE 5                                                        00155\nCOMPLEX  DS    0H                                                       00156\n*        NOW WE SEARCH FOR AN IMBEDDED ASTERISK IN INDEX STRUCTURE      00157\n*        CHARACTERS ABOVE IT ARE USED AS THE GENERIC KEY.               00158\n*        CHARACTERS AFTER IT ARE USED AS THE LOWER LEVEL QUALIFIERS.    00159\n         MVI   TRTAB+C'.',0   NO LONGER INTERESTED IN PERIODS           00160\n         TRT   KEY,TRTAB                                                00161\n         BZ    ERROR4                                                   00162\n         B     *(R2)                                                    00163\n         B     ONEPART        NO ASTERISK                               00164\n         B     TWOPART                                                  00165\n         SPACE 5                                                        00166\nONEPART  MVI   LREST,X'80'                                              00167\n         LA    R3,KEY                                                   00168\n         SR    R1,R3                                                    00169\n         STH   R1,LKEY                                                  00170\n         STC   R1,NAME                                                  00171\n         B     GENLOC                                                   00172\n         SPACE 5                                                        00173\nTWOPART  DS    0H                                                       00174\n*        THIS BLOCK HANDLES THE CASE WHERE THERE IS AN EMBEDDED         00175\n*        ASTERISK IN THE INDEX LEVEL. THE CHARACTERS BELOW THE          00176\n*        ASTERISK ARE MOVED TO 'REST'. THE CHARACTERS FROM THE          00177\n*        ASTERISK ON ARE BLANKED IN 'KEY'. THE LENGTH OF THE            00178\n*        NON BLANK PART OF 'REST' LESS ONE IS SAVED IN 'LREST'          00179\n*        FOR USE IN THE LATER CLC INSTRUCTION. THE LENGTH OF            00180\n*        THE KEY IS SAVED IN 'NAME' FOR THE GENERIC LOCATE AND          00181\n*        IN 'LKEY' FOR AN INDICATION OF HOW MANY CHARS TO               00182\n*        SKIP BEFORE LOOKING IN A DSN FOR A MATCH TO 'REST'.            00183\n         LA    R3,KEY+42                                                00184\n         SR    R3,R1         GET LENGTH OF KEY ABOVE ASTERISK           00185\n         MVC   REST,=CL44' ' INITIALIZE REST                            00186\n         EX    R3,MOVREST    MOVE PART BELOW ASTERISK                   00187\n         LA    R3,1(R3)                                                 00188\n         EX    R3,BLNKEY     BLANK KEY FROM ASTERISK ON                 00189\n         SH    R3,=H'43'                                                00190\n         LPR   R3,R3         GET CHARS ABOVE ASTERISK                   00191\n         STH   R3,LKEY                                                  00192\n         STC   R3,NAME                                                  00193\n         TRT   REST,TRTAB    FIND NON-BLANK LENGTH OF REST              00194\n         B     *(R2)                                                    00195\n         B     LENRST                                                   00196\n         B     ERROR4        SORRY, ONLY ONE * PER CUSTOMER             00197\nLENRST   LA    R3,REST+1     CALCULATE LENGTH FROM ADDRESS              00198\n         SR    R1,R3            OF FIRST BLANK                          00199\n         STH   R1,LREST                                                 00200\n         B     GENLOC                                                   00201\nMOVREST  MVC   REST(0),1(R1)                                            00202\nBLNKEY   MVC   0(0,R1),=CL44' '                                         00203\n* END OF TWOPART                                                        00204\n* END OF COMPLEX                                                        00205\n* END OF BLDKEY                                                         00206\n         EJECT                                                          00207\nGENLOC   DS    0H                                                       00208\n*        THIS BLOCK ISSUES A VSAM GENERIC LOCATE TO BUILD AN IN-CORE    00209\n*        LIST OF DATASETS THAT BEGIN WITH THE SEARCH KEY                00210\n*        THERE IS NO GOOD DOCUMENTATION ON THE GENERIC                  00211\n*        LOCATE IN THE LITERATURE. SEE THE CATALOG PLM FOR              00212\n*        WHAT LITTLE THERE IS. THE FORM BELOW WAS INFERRED              00213\n*        FROM SOME FICHE AND BY INTERCEPTING SVC 26 WITH DSS.           00214\n         MVC   GENFLAG,=X'05201100'                                     00215\n         XC    GENX1,GENX1                                              00216\n         XC    GENX2,GENX2                                              00217\n         LA    R1,NAME                                                  00218\n         ST    R1,GENNAME                                               00219\n         GETMAIN R,LV=X'7FF8'                                           00220\n         ST    R1,GETADDR                                               00221\n         ST    R1,GENWORK                                               00222\n         MVC   0(4,R1),=X'7FF80004'                                     00223\n         LA    R1,GENPARM                                               00224\n         SVC   26                                                       00225\n         LTR   R15,R15                                                  00226\n         BNZ   ERROR4                                                   00227\n         L     R1,GETADDR    GET VSAM CATLG RETURN AREA                 00228\n         LA    R1,0(R1)       CLEAR HIGH BYTE                           00229\n         LH    R2,2(R1)       GET NUMBER BYTES USED                     00230\n         AR    R2,R1          ADD START ADDR                            00231\n         ST    R2,LAST        SAVE LAST BYTE ADDR                       00232\n         LA    R1,49(R1)      SKIP 4 BYTE PREFIX AND FIRST 45 BYTE ENTR 00233\n         ST    R1,NEXT        SAVE ADDR OF FIRST DSN ENTRY              00234\n* END OF GENLOC                                                         00235\n         SPACE 10                                                       00236\nCAMLOC   DS    0H                                                       00237\n*        NOW DO A REGULAR CAMLIST NAME LOCATE FOR THE NEXT NON-VSAM     00238\n*        DATASET IN THE INCORE LIST                                     00239\n         XC    CAMLST(16),CAMLST                                        00240\n         LA    R1,KEY                                                   00241\n         ST    R1,CAMLST+4                                              00242\n         LA    R1,VOLCNT                                                00243\n         ST    R1,CAMLST+12                                             00244\n         L     R1,NEXT                                                  00245\nTEST     C     R1,LAST                                                  00246\n         BNL   RET16          NO MORE DATASETS IN LIST                  00247\n         CLI   0(R1),C'A'     IS IT NON-VSAM                            00248\n         BE    S1                                                       00249\nNOGO     LA    R1,45(R1)                                                00250\n         B     TEST                                                     00251\nS1       TM    LREST,X'80'    IS THERE A LOWER QUALIFIER                00252\n         BO    S2             NO, SO GO LOCATE                          00253\n         SPACE 5                                                        00254\nTESTQUAL DS    0H                                                       00255\n*        THIS CODE LOOKS FOR THE CHARACTER STRING BELOW THE             00256\n*        ASTERISK IN THE INDEX SEARCH KEY. THIS STRING MUST             00257\n*        BE SOMEWHERE IN THE DATASET NAME BELOW THE KEY OR              00258\n*        THE NAME IS REJECTED                                           00259\n         LA    R2,1(R1)                                                 00260\n         AH    R2,LKEY        SKIP GENERIC KEY CHARS                    00261\n         LH    R3,LREST       GET # CHARS-1 IN REST                     00262\n         LA    R4,44                                                    00263\n         SR    R4,R3                                                    00264\n         SH    R4,LKEY        R4=# CHARS BELOW KEY + 1                  00265\nCOMP     EX    R3,COMPAR                                                00266\n         BE    S2                                                       00267\n         LA    R2,1(R2)                                                 00268\n         BCT   R4,COMP                                                  00269\n         B     NOGO                                                     00270\nCOMPAR   CLC   REST(0),0(R2)                                            00271\n* END OF TESTQUAL                                                       00272\n         SPACE 5                                                        00273\nS2       DS    0H                                                       00274\n*        NOW TO ISSUE NORMAL LOCATE BY NAME AND RETURN INFORMATION      00275\n*        ACCORDING TO DESCRIPTION OF PARAMETERS IN LEADING DOCUMENT     00276\n         MVC   KEY,1(R1)      COPY DSN                                  00277\n         LA    R1,45(R1)      PT TO NXT DSN                             00278\n         ST    R1,NEXT        SAVE FOR NXT TIME                         00279\n         LA    R1,CAMLST                                                00280\n         SVC   26             LOCATE BY NAME                            00281\n         L     R2,INPARM      NOW GET PASSED PARM LIST                  00282\n         LM    R2,R3,4(R2)    PICK UP 2ND & 3RD USER PARMS              00283\n         MVC   0(44,R2),KEY   SAVE DSN                                  00284\n         MVC   0(6,R3),SER    SAVE VOL                                  00285\n         TM    DEVT+2,X'20'   IS THIS DISK                              00286\n         BZ    ERROR8         NO, PASS 8 RETURN CODE                    00287\n         CLI   VOLCNT+1,1     IS IT MULTI-VOL                           00288\n         BNE   ERROR12        YES, PASS 12 RETURN CODE                  00289\n* END OF CAMLOC                                                         00290\n         SPACE 10                                                       00291\n*VARIOUS RETURNS                                                        00292\nRETN     SR    R15,R15                                                  00293\n         B     RC                                                       00294\nERROR4   LA    R15,4                                                    00295\n         B     RC                                                       00296\nERROR8   LA    R15,8                                                    00297\n         B     RC                                                       00298\nERROR12  LA    R15,12                                                   00299\n         B     RC                                                       00300\nRET16    FREEMAIN R,LV=X'7FF8',A=GETADDR                                00301\n         LA    R15,16                                                   00302\n         B     RC                                                       00303\nERROR20  LA    R15,20                                                   00304\nRC       L     R1,INPARM                                                00305\n         TM    12(R1),X'80'                                             00306\n         BO    EXIT                                                     00307\n         L     R1,16(R1)                                                00308\n         ST    R15,0(R1)                                                00309\nEXIT     L     R13,4(R13)                                               00310\n         ST    R15,16(R13)                                              00311\n         L     R1,8(R13)                                                00312\n         FREEMAIN R,LV=LSECT,A=(1)                                      00313\n         LM    R14,R12,12(R13)                                          00314\n         BR    R14                                                      00315\n         EJECT                                                          00316\nDSASECT  DSECT                                                          00317\n         DS    18A                                                      00318\nGENPARM  DS    0F            GENERIC LOCATE PARM AREA                   00319\nGENFLAG  DS    F                                                        00320\nGENNAME  DS    A                                                        00321\nGENX1    DS    A                                                        00322\nGENWORK  DS    A                                                        00323\nGENX2    DS    3A                                                       00324\nKEYLEN   DS    0H                                                       00325\n         DS    X                                                        00326\nNAME     DS    X                                                        00327\nKEY      DS    CL44                                                     00328\nINPARM   DS    A             SAVE R1 UPON ENTRY TO LOCINDEX             00329\nCAMLST   DS    4A                                                       00330\n         DS    0D                                                       00331\nLSECT    EQU   *-DSASECT                                                00332\n         SPACE 10                                                       00333\nGETSECT  DSECT               GETMAINED VSAM WORK AREA                   00334\nGETLEN   DS    H             LENGT OF AREA                              00335\nGETUSED  DS    H             AMOUNT ALLOCATED CURRENTLY TO DATA         00336\nGETENTY  DS    0CL45         FIRST ELEMENT OF DSN ARRAY                 00337\nGETTYPE  DS    C             TYPE FLAG ('A'=NONVSAM)                    00338\nGETNAME  DS    CL44          DSN                                        00339\n         SPACE 10                                                       00340\nWORKSECT DSECT               WORK AREA PASSED AS PARM                   00341\nGETADDR  DS    A             ADDRESS OF GETMAINED VSAM WORK AREA        00342\nTRTAB    DS    0CL256                                                   00343\nVOLCNT   DS    H                                                        00344\nDEVT     DS    XL4                                                      00345\nSER      DS    CL6                                                      00346\nSEQ      DS    H                                                        00347\n         DS    CL251                                                    00348\nOINDEX   DS    CL44          PREVIOUS VALUE OF FIRST PARM               00349\nREST     DS    CL44          LOW QUALIFIER COMPARE STRING               00350\nNEXT     DS    A             ADDRESS OF NEXT DSN IN INCORE TABLE        00351\nLAST     DS    A             ADDRESS OF BYTE AFTER END OF DSNLIST       00352\nLKEY     DS    H             LENGTH OF GENERIC KEY                      00353\nNOREST   DS    0B            FLAG IF 'REST' IS EMPTY                    00354\nLREST    DS    H             LENGTH OF REST                             00355\n         END                                                            00356\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LSPACE": {"ttr": 11018, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03W\\x03W\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 855, "newlines": 855, "modlines": 0, "user": "DELUXE"}, "text": "*---------------------------------------------------------------------*\n* ROUTINES TO BE ADDED: PUBLWD : SPACE FOR VOLUMES MOUNTED 'PUBLIC'   *\n*                       PRIVWD : SPACE FOR VOLUMES MOUNTED 'PRIVATE'  *\n*                       STORWD : SPACE FOR VOLUMES MOUNTED 'STORAGE'  *\n*                       VOLKYWD: SPECIFIC VOLSER OR STRING OF VOLSER  *\n*                       UCBKYWD: SPECIFIC UCB ADDRESS REQUEST         *\n*                       DEVKYWD: SPECIFIC DEV NAME REQUEST (SYSDA)    *\n*                       UCBFLAG: DISPLAY UCB FLAG DATA FOR VOLUMES    *\n*                                REQUESTED (MUST SPECIFY FLAGS KEYWD) *\n*                       SVC78:   ISSUE LSPACE SVC TO FIND SPACE ATTR  *\n*                       ERRORS:  ISSUE ALL PERTINENT ERROR MSGS       *\n*---------------------------------------------------------------------*\n         PRINT NOGEN\nLSPACE   CSECT\n         SAVE  (14,12),,LSPACE-P1-&SYSDATE-&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING LSPACE,R12              ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY ADDR 4095\n         USING LSPACE+4095,R11         ESTABLISH ADDRESSABILITY TO THE\n*                                      REST OF THE PROGRAM\n         LR    R8,R1                   PRESERVE PTR TO CPPL CNTL BLK\n         GETMAIN R,LV=LDYNAMIC         GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  PRESERVE PTR TO WORKAREA\n         ST    R13,4(R10)              STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R10,8(,R13)             STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R10                 LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         GETMAIN R,LV=GFLENGF          GETMAIN GNRLFAIL PARM LIST\n         LR    R10,R1                  R10 - PTR TO GFPARMS\n         USING GFDSECTD,R10            ADDRESSIBILITY TO GFPARMS\n         ST    R8,GFCPPLP              CPPL PTR IN PARM LST TO GNRLFAIL\n         MVC   RETNLGTH(2),HALF22      INITIALIZE RETN CODE MSG LENGTH\n         MVC   RETNEQUL,RETNEQ         INITIALIZE 'RETURN CODE ='\n         MVC   LSPCNUM,FULL01          INITIALIZED LSPCMSG\n         LA    R1,LSPCMSG                  OUTPUT LINE\n         ST    R1,LSPCADDR                     DESCRIPTOR\n         MVC   RETNNUM,FULL01          INITIALIZED RETNMSG\n         LA    R1,RETNMSG                  OUTPUT LINE\n         ST    R1,RETNADDR                     DESCRIPTOR\n         MVC   IOPB,FULL00             INIT CNTL AND TPUT OPTION FLAGS\n         EJECT\n***********************************************************************\n* BUILD PARSE PARAMETER LISTS USING COMMAND PROCESSOR PARAMETER LIST  *\n* AND INITIALIZE INPUT/OUTPUT CONTROL BLOCKS IN WORKAREA.             *\n***********************************************************************\n*                                                                     *\n         USING CPPL,R8                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARM LIST\n         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL\n         LA    R5,IOPLSECT             LOAD ADDR OF PUTLINE PARM LIST\n         USING IOPL,R5                 ESTABLISH ADDRESSABILITY TO IOPL\n         L     R1,CPPLUPT              LOAD PTR TO USER PROFILE TABLE\n*                                      FROM CPPL\n         L     R2,CPPLECT              LOAD PTR TO ENVIRONMENTAL\n*                                      CONTROL TABLE FROM CPPL\n         SLR   R3,R3                   ZERO REGISTER 3\n         ST    R3,ECB                  STORE REG AS ECB FOR PPL\n         LA    R3,ECB                  LOAD ADDRESS OF ECB\n         STM   R1,R3,PPLSECT           STORE ADDRESS OF UPT,ECT, AND\n*                                      ECB IN PPL\n         STM   R1,R3,IOPLSECT          STORE ADDRESS OT UPT, ECT, AND\n*                                      ECB IN PPL\n         LA    R3,IOPB                 LOAD ADDRESS OF PUTLINE\n*                                      PARAMETER BLOCK\n         ST    R3,IOPLIOPB             STORE IOPB ADDRESS IN IOPL\n         MVC   PPLPCL,PCLADDR          MOVE PTR TO PARAMETER CONTROL\n*                                      LIST INTO PPL\n         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO\n*                                      CONTAIN ADDRESS OF PDE RETURNED\n*                                      BY PARSE\n         ST    R2,PPLANS               STORE PTR TO RETURN ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE PTR TO CMD BUFFER INTO PPL\n         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORKAREA\n         ST    R2,PPLUWA               STORE ADDRESS IN PPL\n         DROP  R4,R5,R8                DROP ADDRESSABILITY TO CPPL,\n*                                      IOPL, AND PPL\n***********************************************************************\n* CALLTSSR TO PARSE (ENTRY POINT IKJPARS); ON RETURN PARSBACK -> PDL  *\n* HANDLE ALL ERROR CODES RETURNED BY PARS AND IF NECESSARY CALL       *\n* GENERAL FAIL SERVICE ROUTINE.                                       *\n***********************************************************************\n         CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)\n         LTR   R15,R15                 SEE IF RETURN CODE ZERO\n         BZ    GOODPARS                IF YES GO TO GOOD PARS ROUTINE\n         LR    R7,R15                  LOAD RETURN CODE FROM REG 15\n         MVC   LSPCMSG,INFMSG1         PARSE ERR TEXT TO INFO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         CVD   R7,DEC                  CONVERT RETURN CODE\n         UNPK  CONV(8),DEC(8)                AND PREPARE\n         MVZ   CONV+1(7),CONV                  FOR MESSAGE\n         MVC   RETNCODE,CONV+4                    INSERT\n         BAL   R2,PUTINFO2             ISSUE INFORMATIONAL RETN CODE\n         B     FINISH                  EXIT\n         EJECT\n***********************************************************************\n* SET UP ADDRESSABILITY TO PDL & LOAD REG 6 WITH ADDRESS OF DSNAME PDE*\n***********************************************************************\n*                                                                     *\nGOODPARS DS    0H\n         L     R9,PARSBACK             LOAD PTR TO PARS ANSWER\n         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL\n         LA    R6,VOLUMES              LOAD PTR TO DSNAME LIST\n         LA    R5,KWORD                LOAD PTR TO FLAG LIST\n         CLI   1(R5),X'00'             ARE THERE ANY KEYWORDS?\n         DROP  R9                      DROP ADDRESSABILITY TO PDL\n         BE    LDPTR                   NO, FALL THROUGH\n         MVI   FLGSW,X'FF'             YES, SET FLAG SWITCH\nLDPTR    EQU   *\n         L     R5,0(R6)                SET UP PTR TO VOLUME LIST\n         LH    R4,4(R6)                SET UP LENGTH OF VOL LIST\n         BCTR  4,0                     DECREMENT LENGTH BY ONE\n         MVC   PARMNM(8),SPACES        CLEAR PARAMETER NAME\n         EX    R4,MOVEVOL              MOVE REQUESTED NAME TO PARMNM\n         MVC   LSPCMSG,INFMSGA         MOVE 'REQUEST IS' TEXT TO MSG\n         MVC   LSPCLINE+12(8),PARMNM   MOVE PARMNM TO 'REQUEST IS:' MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n***********************************************************************\n*    STEP THROUGH SEQUENCE CHECKING FOR COMMAND PARAMETER ENTRY TYPE  *\n***********************************************************************\n*                                                                     *\n         ST    R6,PARSAVE              SAVE PARAMETER LIST POINTER\n         CLC   PARMNM(6),=C'PUBLIC'    IS REQUEST FOR 'PUBLIC' VOLUME?\n         BE    PUBLWD\n         CLC   PARMNM(7),=C'PRIVATE'   IS REQUEST FOR 'PRIVATE' VOLUME?\n         BE    PRIVWD\n         CLC   PARMNM(7),=C'STORAGE'   IS REQUEST FOR 'STORAGE' VOLUME?\n         BE    STORWD\n         B     VOLKYWD                 CHECK TO SEE IF REQUEST IS FOR\n*                                      VOLUME, UCB OR DEVICE NAME\n***********************************************************************\n*  PUBLWD      PROCESS UCB'S ASSOCIATED WITH VOLUMES MOUNTED 'PUBLIC' *\n***********************************************************************\nPUBLWD   EQU   *\n         L     R2,16                   R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R3,CVTUCBA              R3 - ADDRESS OF 1ST UCB IN CHAIN\n         USING UCBCMSEG,R3             ESTABLISH ADDRESSABILITY TO UCB\nUCBLOOP1 EQU   *\n         TM    UCBSTAB,UCBBPUB         IS VOLUME MOUNTED PUBLIC?\n         BNO   NEXTUCB1                NO, GET NEXT UCB IN THE CHAIN\n         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE?\n         BNO   NEXTUCB1                NO, GET NEXT UCB IN CHAIN\n         TM    UCBSTAT,UCBONLI         IS DEVICE ONLINE?\n         BNO   UCBOFFL1                NO, ISSUE 'XXX OFFLINE' MSG\n         MVI   REQFLG,X'11'            TURN ON PUBLIC FLAG\n         BAL   R4,SVC78                YES, GET SPACE INFORMATION\n         B     NEXTUCB1                GET NEXT UCB ADDRESS\nUCBOFFL1 EQU   *\n         MVC   LSPCMSG,INFMSGE         MOVE 'XXX OFFLINE' TEXT TO MSG\n         MVC   LSPCLINE+1(3),UCBNAME   MOVE UNIT NAME TO MESSAGE TEXT\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         MVI   REQFLG,X'11'            TURN ON PUBLIC KEYWORD FLAG\nNEXTUCB1 EQU   *\n         L     R3,UCBNXUCB             R3 - ADDR OF NEXT UCB IN CHAIN\n         LTR   R3,R3                   IS THIS THE LAST UCB IN CHAIN?\n         BNZ   UCBLOOP1                NO, PROCESS NEXT UCB IN CHAIN\n         CLC   REQFLG,PUBFLG           ANY 'PUBLIC' VOLUMES FOUND?\n         BE    CHKREQ                  YES, CHECK FOR MORE REQUESTS\n         MVC   LSPCMSG,INFMSGB         MOVE 'NO PUBLIC' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKREQ                  CHECK FOR MORE REQUESTS\n         EJECT\n***********************************************************************\n*  PRIVWD      PROCESS UCB'S ASSOCIATED WITH VOLUMES MOUNTED 'PRIVATE'*\n***********************************************************************\nPRIVWD   EQU   *\n         L     R2,16                   R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R3,CVTUCBA              R3 - ADDRESS OF 1ST UCB IN CHAIN\n         USING UCBCMSEG,R3             ESTABLISH ADDRESSABILITY TO UCB\nUCBLOOP2 EQU   *\n         TM    UCBSTAB,UCBBPRV         IS VOLUME MOUNTED PRIVATE?\n         BNO   NEXTUCB2                NO, GET NEXT UCB IN THE CHAIN\n         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE?\n         BNO   NEXTUCB2                NO, GET NEXT UCB IN CHAIN\n         TM    UCBSTAT,UCBONLI         IS DEVICE ONLINE?\n         BNO   UCBOFFL2                NO, ISSUE 'XXX OFFLINE' MSG\n         MVI   REQFLG,X'22'            TURN ON PRIVATE FLAG\n         BAL   R4,SVC78                YES, GET SPACE INFORMATION\n         B     NEXTUCB2                GET NEXT UCB ADDRESS\nUCBOFFL2 EQU   *\n         MVC   LSPCMSG,INFMSGE         MOVE 'XXX OFFLINE' TEXT TO MSG\n         MVC   LSPCLINE+1(3),UCBNAME   MOVE UNIT NAME TO MESSAGE TEXT\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         MVI   REQFLG,X'22'            TURN ON PRIVATE FLAG\nNEXTUCB2 EQU   *\n         L     R3,UCBNXUCB             R3 - ADDR OF NEXT UCB IN CHAIN\n         LTR   R3,R3                   IS THIS THE LAST UCB IN CHAIN?\n         BNZ   UCBLOOP2                NO, PROCESS NEXT UCB IN CHAIN\n         CLC   REQFLG,PRIVFLG          ANY 'PRIVATE' VOLUMES FOUND?\n         BE    CHKREQ                  YES, CHECK FOR MORE REQUESTS\n         MVC   LSPCMSG,INFMSGC         MOVE 'NO PRIVATE' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKREQ                  CHECK FOR MORE REQUESTS\n***********************************************************************\n*  STORWD      PROCESS UCB'S ASSOCIATED WITH VOLUMES MOUNTED 'STORAGE'*\n***********************************************************************\nSTORWD   EQU   *\n         L     R2,16                   R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R3,CVTUCBA              R3 - ADDRESS OF 1ST UCB IN CHAIN\n         USING UCBCMSEG,R3             ESTABLISH ADDRESSABILITY TO UCB\nUCBLOOP3 EQU   *\n         TM    UCBSTAB,UCBBSTR         IS VOLUME MOUNTED STORAGE?\n         BNO   NEXTUCB3                NO, GET NEXT UCB IN THE CHAIN\n         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE?\n         BNO   NEXTUCB3                NO, GET NEXT UCB IN CHAIN\n         TM    UCBSTAT,UCBONLI         IS DEVICE ONLINE?\n         BNO   UCBOFFL3                NO, ISSUE 'XXX OFFLINE' MSG\n         MVI   REQFLG,X'33'            TURN ON STORAGE FLAG\n         BAL   R4,SVC78                YES, GET SPACE INFORMATION\n         B     NEXTUCB3                GET NEXT UCB ADDRESS\nUCBOFFL3 EQU   *\n         MVC   LSPCMSG,INFMSGE         MOVE 'XXX OFFLINE' TEXT TO MSG\n         MVC   LSPCLINE+1(3),UCBNAME   MOVE UNIT NAME TO MESSAGE TEXT\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         MVI   REQFLG,X'33'            TURN ON STORAGE FLAG\nNEXTUCB3 EQU   *\n         L     R3,UCBNXUCB             R3 - ADDR OF NEXT UCB IN CHAIN\n         LTR   R3,R3                   IS THIS THE LAST UCB IN CHAIN?\n         BNZ   UCBLOOP3                NO, PROCESS NEXT UCB IN CHAIN\n         CLC   REQFLG,STORFLG          ANY 'STORAGE' VOLUMES FOUND?\n         BE    CHKREQ                  YES, CHECK FOR MORE REQUESTS\n         MVC   LSPCMSG,INFMSGD         MOVE 'NO STORAGE' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKREQ                  CHECK FOR MORE REQUESTS\n         EJECT\n***********************************************************************\n*  VOLKYWD     PROCESS UCB ASSOCIATED WITH GIVEN VOLUME SERIAL        *\n***********************************************************************\nVOLKYWD  EQU   *\n         L     R2,16                   R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R3,CVTUCBA              R3 - ADDRESS OF 1ST UCB IN CHAIN\n         USING UCBCMSEG,R3             ESTABLISH ADDRESSABILITY TO UCB\nUCBLOOP4 EQU   *\n         LH    R9,4(R6)                R9 - LENGTH OF PARAMETER\n         BCTR  R9,0                    DECREMENT PARM LENGTH BY ONE\n         EX    R9,COMPVOL              1ST R9 CHARS OF UCBVOLI MATCH?\n         BNE   NEXTUCB4                NO, GET NEXT UCB IN THE CHAIN\n         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE?\n         BNO   UCBKYWD                 NO, CHECK TO IF PARM IS UCB NAME\n         TM    UCBSTAT,UCBONLI         IS DEVICE ONLINE?\n         BNO   UCBOFFL4                NO, ISSUE 'XXX OFFLINE' MSG\n         MVI   REQFLG,X'04'            TURN ON VOLSER REQUEST FLAG\n         BAL   R4,SVC78                YES, GET SPACE INFORMATION\n         B     NEXTUCB4                GET NEXT UCB ADDRESS\nUCBOFFL4 EQU   *\n         MVC   LSPCMSG,INFMSGE         MOVE 'XXX OFFLINE' TEXT TO MSG\n         MVC   LSPCLINE+1(3),UCBNAME   MOVE UNIT NAME TO MESSAGE TEXT\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         MVI   REQFLG,X'04'            TURN ON VOLSER REQUEST FLAG\nNEXTUCB4 EQU   *\n         L     R3,UCBNXUCB             R3 - ADDR OF NEXT UCB IN CHAIN\n         LTR   R3,R3                   IS THIS THE LAST UCB IN CHAIN?\n         BNZ   UCBLOOP4                NO, PROCESS NEXT UCB IN CHAIN\n         CLC   REQFLG,VOLFLG           WAS THIS 'VOLUME' FOUND?\n         BE    CHKREQ                  YES, CHECK FOR MORE REQUESTS\n*                                      NO, PROCEED TO CHECK UCB NAME\n***********************************************************************\n*  UCBKYWD     PROCESS GIVEN UCB                                      *\n***********************************************************************\nUCBKYWD  EQU   *\n         L     R2,16                   R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R3,CVTUCBA              R3 - ADDRESS OF 1ST UCB IN CHAIN\n         USING UCBCMSEG,R3             ESTABLISH ADDRESSABILITY TO UCB\nUCBLOOP5 EQU   *\n         LH    R9,4(R6)                SET UP LENGTH OF PARAMETER\n         C     R9,FULL03               PARAMETER LENGTH GREATER THAN 3?\n         BH    DEVKYWD                 YES, CANNOT BE A UCB NAME\n         CLC   UCBNAME(3),PARMNM       IS THIS THE CORRECT UCB?\n         BNE   NEXTUCB5                NO, GET NEXT UCB IN THE CHAIN\n         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE?\n         BNO   NODASD                  NO, 'NOT DIRECT ACCESS DEV' MSG\n         TM    UCBSTAT,UCBONLI         IS DEVICE ONLINE?\n         BNO   UCBOFFL5                NO, ISSUE 'XXX OFFLINE' MSG\n         MVI   REQFLG,X'08'            TURN ON UCB REQUEST FLAG\n         B     SVC78                   YES, GET SPACE INFORMATION\nUCBOFFL5 EQU   *\n         MVC   LSPCMSG,INFMSGE         MOVE 'XXX OFFLINE' TEXT TO MSG\n         MVC   LSPCLINE+1(3),UCBNAME   MOVE UNIT NAME TO MESSAGE TEXT\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         MVI   REQFLG,X'08'            TURN ON UCB REQUEST FLAG\n         B     CHKREQ                  CHECK FOR MORE REQUESTS\nNEXTUCB5 EQU   *\n         L     R3,UCBNXUCB             R3 - ADDR OF NEXT UCB IN CHAIN\n         LTR   R3,R3                   IS THIS THE LAST UCB IN CHAIN?\n         BNZ   UCBLOOP5                NO, PROCESS NEXT UCB IN CHAIN\n*                                      YES, PROCEED & CHECK DEVICE NAME\n         EJECT\n***********************************************************************\n*  DEVKYWD     PROCESS UCB ASSOCIATED WITH GIVEN DEVICE NAME          *\n***********************************************************************\nDEVKYWD  EQU   *\n         MVC   UNITNAME(8),PARMNM      MOVE UNIT NAME TO UNIT TABLE\n         LA    R8,UNITABLE             R8 - ADDRESS OF UNIT TABLE\n         ST    R8,UTABLPTR             UNIT TABLE ADDR TO LINKLIST\n         LA    R9,FLAGPARM             R9 - ADDRESS OF FLAGS\n         ST    R9,FLAGSPTR             FLAG PARAMETER ADDR TO LINKLIST\n         LINK  EP=IEFEB4UV,                                            +\n               MF=(E,LINKLIST)         GET UCB ADDR LIST FOR UNIT NAME\n         LTR   R15,R15                 WAS UNIT NAME FOUND?\n         BZ    UCBEXTR                 YES, EXTRACT UCB'S FOR LSPACE\n         MVC   LSPCMSG,INFMSG3         MOVE 'NON-SUPPORTED' TEXT TO MSG\n         MVC   LSPCLINE+36(8),UNITNAME     ADD UNIT NAME TO UNSUPP MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKREQ                  CHECK FOR MORE REQUESTS\nUCBEXTR  EQU   *\n         MVI   REQFLG,X'88'            TURN ON DEVICE KEYWORD FLAG\n         L     R8,UCBLADDR             R8 - ADDRESS OF UCBLIST\n         LA    R8,4(R8)                R8 - POINT TO NUMBER OF ENTRIES\n         L     R9,0(,R8)               R9 - NUMBER OF ENTRIES (UCBLIST)\n         LA    R8,4(R8)                R8 - POINT TO FIRST UCB ADDRESS\nUCBLOOP6 EQU   *\n         L     R3,0(,R8)               R3 - ADDRESS OF UCB\n         USING UCBCMSEG,R3             ESTABLISH ADDRESSABILITY TO UCB\n         TM    UCBTBYT3,UCB3DACC       IS THIS A DIRECT ACCESS DEVICE?\n         BNO   NODASD                  NO, 'NOT DIRECT ACCESS DEV' MSG\n         TM    UCBSTAT,UCBONLI         IS DEVICE ONLINE?\n         BNO   UCBOFFL6                NO, ISSUE 'XXX OFFLINE' MSG\n         BAL   R4,SVC78                YES, GET SPACE INFORMATION\n         B     INCRINDX                GET NEXT UCB ADDRESS\nUCBOFFL6 EQU   *\n         MVC   LSPCMSG,INFMSGE         MOVE 'XXX OFFLINE' TEXT TO MSG\n         MVC   LSPCLINE+1(3),UCBNAME   MOVE UNIT NAME TO MESSAGE TEXT\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\nINCRINDX EQU   *\n         LA    R8,4(R8)                INCREMENT INDEX TO UCBLIST\n         BCT   R9,UCBLOOP6             GET NEXT UCB ADDRESS\n         B     CHKREQ                  CHECK FOR MORE REQUESTS\n***********************************************************************\n*        CALL LSPACE SVC (SVC 78) AND ISSUE SPACE MESSAGE             *\n***********************************************************************\nSVC78    EQU   *\n         ST    R3,UCBSTOR              SAVE UCB ADDR FOR TABLE SEARCH\n         LR    R0,R3                   R0 - UCB ADDR FOR LSPACE MACRO\n         LA    R1,VOLSPC               R1 - ADDRESS OF MESSAGE AREA\n         SVC   78                      ISSUE LSPACE SVC\n         LTR   R15,R15                 CHECK FOR RETURN CODE ZERO\n         BZ    PUTMSG                  IF ZERO, GO TO PUTMSG\n         LR    R7,R15                  LOAD RETURN CODE INTO REG 15\n         B     ERRORS                  GO TO CONVERT ROUTINE\n         EJECT\n***********************************************************************\n*        WRITE SPACE MESSAGE HEADER AND SPACE MESSAGE                 *\n***********************************************************************\nPUTMSG   EQU   *\n         MVC   LSPCMSG,DATMSG1         MOVE SPACE MSG HEADING TO MSG\n         MVC   LSPCLINE+5(6),UCBVOLI   MOVE VOLSER TO SPACE MSG HEADING\n         MVC   LSPCLINE(3),UCBNAME     MOVE UNIT NAME TO MSG HEADING\n         BAL   R2,PUTDATA              WRITE DATA LINE TO TERMINAL\n         MVC   LSPCMSG,DATMSG2         MOVE AREA FOR SVC78 INFO TO MSG\n         MVC   LSPCLINE+5(30),VOLSPC   SPACE INFO RETURNED BY SVC78\n         BAL   R2,PUTDATA              WRITE DATA LINE TO TERMINAL\n         CLI   FLGSW,X'FF'             WAS 'FLAGS' KEYWORD REQUESTED?\n         BNE   CHKFLGS                 NO, CHECK REQUEST TYPE FLAGS\n         EJECT\n***********************************************************************\n*        STATUS FLAG ROUTINE                                          *\n***********************************************************************\nUCBFLAG  EQU   *\n         STM   R2,R3,CHAINSAV          SAVE REGISTERS SO NEXT CODE\n         STM   R14,R15,CHAINSAV+8      DOESN'T DESTROY THEM\n         STM   R4,R5,BUFRSAV           STORE LENGTH OF PARAMETER AND\n*                                      POINTER TO PARAMETER LIST\n         MVC   LSPCMSG,DATMSG3         MOVE STATUS FLAGS HEADER TO MSG\n         BAL   R2,PUTDATA              WRITE DATA LINE TO TERMINAL\n         MVI   LSPCMSG+1,X'4C'         MOVE MESSAGE LENGTH TO MSG (76)\n         LA    R4,LSPCLINE             POINT TO MSG AREA\n         LA    R5,DATMSG5              POINT TO END OF AREA\n         L     R2,UCBSTOR              R2 - ADDRESS OF UCB\nNXTUCB   EQU   *\n         LA    R3,TABLE                R3 - INDEX TO STATUS CODE TABLE\nFLAGLOOP EQU   *\n         CLI   0(R3),X'FF'             END OF TABLE\n         BE    DONEWFLG                YES - ALL DONE\n         LR    R15,R2                  GET COPY OF UCB ADDRESS\n         SLR   R14,R14                 ZERO R14 FOR INSERT\n         IC    R14,0(R3)               GET OFFSET OF FLAG IN UCB\n         AR    R15,R14                 GET ADDRESS OF FLAG\n         IC    R14,1(R3)               GET FLAG\n         EX    R14,TEST4FLG            TEST FOR CORRECT FLAG\n         BZ    NEXTFLAG                NOT ON - LOOP\n         MVC   5(10,R4),2(R3)          MOVE IN STATUS DESCRIPTOR\n         LA    R4,12(R4)               BUMP AREA POINTER\n         CR    R4,R5                   COMPARE FOR MORE ROOM\n         BL    NEXTFLAG                LOW, PROCESS NEXT FLAG CODE\n         BAL   R2,PUTDATA              WRITE DATA LINE TO TERMINAL\n         MVI   LSPCMSG+1,X'4C'         MOVE MESSAGE LENGTH TO MSG (76)\n         LA    R4,LSPCLINE             POINT TO MSG AREA\nNEXTFLAG EQU   *\n         LA    R3,12(R3)               BUMP TO NEXT FLAG CODE\n         B     FLAGLOOP                RETURN TO TEST LOOP\nDONEWFLG EQU   *\n         BAL   R2,PUTDATA              WRITE DATA LINE TO TERMINAL\n         MVI   LSPCMSG+1,X'4C'         MOVE MESSAGE LENGTH TO MSG (76)\n         LM    R4,R5,BUFRSAV           RESTORE LENGTH OF PARAMETER\n*                                      AND POINTER TO PARAMETER LIST\n         LM    R2,R3,CHAINSAV          RESTORE REGISTERS R2, R3\n         LM    R14,R15,CHAINSAV+8      RESTORE REGISTERS R14, R15\n         EJECT\n***********************************************************************\n*        DETERMINE REQUEST TYPE AND PROCEED ACCORDINGLY               *\n***********************************************************************\nCHKFLGS  EQU   *\n         CLC   REQFLG,PUBFLG           REQUEST FOR 'PUBLIC' VOLUMES?\n         BER   R4                      YES, RETURN TO CHECK FOR MORE\n         CLC   REQFLG,PRIVFLG          REQUEST FOR 'PRIVATE' VOLUMES?\n         BER   R4                      YES, RETURN TO CHECK FOR MORE\n         CLC   REQFLG,STORFLG          REQUEST FOR 'STORAGE' VOLUMES?\n         BER   R4                      YES, RETURN TO CHECK FOR MORE\n         CLC   REQFLG,VOLFLG           WAS REQUEST FOR VOLSER?\n         BER   R4                      YES, RETURN TO CHECK FOR MORE\n         CLC   REQFLG,UCBFLG           WAS THIS A UCB REQUEST?\n         BE    CHKREQ                  YES, CHECK FOR MORE REQUESTS\n         CLC   REQFLG,DEVFLG           WAS THIS A DEV REQUEST?\n         BER   R4                      YES, RETURN TO CHECK FOR MORE\n         ABEND 123,DUMP                NONE OF THE ABOVE - ABEND\n***********************************************************************\n*        ERROR CODE CONVERSION ROUTINE                                *\n***********************************************************************\nERRORS   EQU   *\n         C     R7,RC4                  IS RETURN CODE X'04'?\n         BE    MSG04                   YES, PROCESS MSG04\n         C     R7,RC8                  IS RETURN CODE X'08'?\n         BE    MSG08                   YES, PROCESS MSG08\n         C     R7,RC12                 IS RETURN CODE X'0C'?\n         BE    MSG0C                   YES, PROCESS MSG0C\n         B     MSG0X                   NO, PROCESS 'XX' RETURN CODE\n***********************************************************************\n*        ERROR ISSUING ROUTINES                                       *\n***********************************************************************\nMSG04    EQU   *\n         MVC   LSPCMSG,INFMSG4         MOVE 'PERM I/O' TEXT TO MSG\n         MVC   LSPCLINE(3),UCBNAME     MOVE UNIT NAME TO MESSAGE\n         MVC   LSPCLINE+4(6),UCBVOLI   MOVE VOLSER TO MESSAGE\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKFLGS                 CHECK REQUEST TYPE FLAGS\nMSG08    EQU   *\n         MVC   LSPCMSG,INFMSG5         MOVE 'DASDM ERROR' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         MVC   LSPCMSG,INFMSG6         MOVE 'DASDM ERROR' TEXT TO MSG\n         MVC   LSPCLINE+3(6),UCBVOLI   MOVE VOLSER TO MESSAGE\n         MVC   LSPCLINE+11(3),UCBNAME  MOVE UNIT NAME TO MESSAGE\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKFLGS                 CHECK REQUEST TYPE FLAGS\nMSG0C    EQU   *\n         MVC   LSPCMSG,INFMSG7         MOVE 'INVALID UCB' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKFLGS                 CHECK REQUEST TYPE FLAGS\nMSG0X    EQU   *\n         MVC   LSPCMSG,INFMSG2         MOVE 'LSPACE SVC' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         CVD   R7,DEC                  CONVERT RETURN CODE\n         UNPK  CONV(8),DEC(8)                AND PREPARE\n         MVZ   CONV+1(7),CONV                  FOR MESSAGE\n         MVC   RETNCODE(4),CONV+4                 INSERT\n         BAL   R2,PUTINFO2             ISSUE INFORMATIONAL RETURN CODE\n         B     CHKFLGS                 CHECK REQUEST TYPE FLAGS\nNODASD   EQU   *\n         MVC   LSPCMSG,INFMSG8         MOVE 'NOT DIRECT' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKREQ                  CHECK FOR MORE REQUESTS\nNOSUP    EQU   *\n         MVC   LSPCMSG,INFMSG9         MOVE 'UNKNOWN DEV' TEXT TO MSG\n         BAL   R2,PUTINFO1             ISSUE INFORMATIONAL MESSAGE\n         B     CHKPDE                  CHECK FOR MORE REQUESTS\n         EJECT\n***********************************************************************\n*        PUTLINE FOR INFORMATIONAL MESSAGES                           *\n***********************************************************************\nPUTINFO1 EQU   *\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(LSPCOLD,TERM,SINGLE,INFOR),                     +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO MESSAGE\n         LTR   R15,R15                 PUTLINE OK?\n         BNZ   GNRLERR                 NO, PERFORM GNRLFAIL ROUTINE\n         MVC   LSPCLINE(72),SPACES     CLEAR MESSAGE AREA\n         BR    R2                      RETURN\n***********************************************************************\n*        PUTLINE FOR INFORMATIONAL RETURN CODES                       *\n***********************************************************************\nPUTINFO2 EQU   *\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(RETNOLD,TERM,SINGLE,INFOR),                     +\n               MF=(E,IOPLSECT)         ISSUE APPROPRIATE INFO RETN CODE\n         LTR   R15,R15                 PUTLINE OK?\n         BNZ   GNRLERR\n         MVC   RETNCODE(4),SPACES      CLEAR RETURN CODE AREA\n         BR    R2                      RETURN\n***********************************************************************\n*        PUTLINE FOR DATA TO BE DISPLAYED UPON THE TERMINAL           *\n***********************************************************************\nPUTDATA  EQU   *\n         PUTLINE PARM=IOPB,                                            +\n               OUTPUT=(LSPCMSG,TERM,SINGLE,DATA),                      +\n               MF=(E,IOPLSECT)         WRITE DATA LINE TO TERMINAL\n         LTR   R15,R15                 PUTLINE OK?\n         BNZ   GNRLERR\n         MVC   LSPCLINE(72),SPACES     CLEAR DATA LINE AREA\n         BR    R2                      RETURN\n***********************************************************************\n*        GNRLFAIL ROUTINE                                             *\n***********************************************************************\nGNRLERR  EQU   *\n         ST    R15,GFRCODE             STORE RETURN CODE FOR GNRLFAIL\n         MVC   GFCALLID(2),HALF22      ID FOR PUTLINE SERVICE ROUTINE\n         MVC   GFPGMNL(2),HALF06       PROGRAM LENGTH TO GNRLFAIL PARM\n         LA    R1,PGMNAME              R15 - ADDRESS OF PROGRAM NAME\n         ST    R1,GFPGMNP              ADDR OF PGMNAME TO GNRLFAIL PARM\n         LA    R1,GFPARMS              R1 - ADDRESS OF PARAMETER LIST\n         ST    R1,GFPADDR              STORE ADDRESS OF GFPARMS\n         LA    R1,GFPADDR              R1 - ADDR OF POINTER TO GFPARMS\n         LINK  EP=IKJEFF19,                                            +\n               MF=(E,(R1))             LINK TO GNRLFAIL TO PROCESS RC\n         LTR   R15,R15\n         BZ    FINISH\n         ABEND 405,DUMP\n         EJECT\n***********************************************************************\n*        CHECK FOR SUCCESSFUL PROCESSING OF REQUEST, ADDITIONAL       *\n*        REQUESTS. IF DONE FINISH.                                    *\n***********************************************************************\nCHKREQ   EQU   *\n         CLI   REQFLG,X'00'            HAS REQUEST BEEN PROCESSED?\n         BE    NOSUP                   NO, ISSUE APPROPRIATE MESSAGE\nCHKPDE   EQU   *\n         L     R6,PARSAVE              LOAD SAVED VOL LIST PTR\n         L     R5,8(,R6)               LOAD CHAIN FOR VOL LIST\n         C     R5,ENDCHAIN             IS IT END OF VOL LIST?\n         BE    FINISH                  IF YES CLEANUP & EXIT\n         L     R6,8(,R6)               LOAD PTR TO NEXT VOLUME\n         MVC   PARMNM,SPACES           CLEAR PARMNM AREA\n         MVC   REQFLG,ESOCODE          CLEAR REQFLG AREA\n         B     LDPTR                         AND PROCESS\n***********************************************************************\n*        CLEANUP AREAS GETMAINED FOR PARSE, PROGRAM, & GNRLFAIL       *\n*        SET RETURN CODE, RESTORE REGISTERS AND EXIT                  *\n***********************************************************************\nFINISH   EQU   *\n         LR    R2,R15                  SAVE RETURN CODE IN R2\n         IKJRLSA PARSBACK              RELEASE VIRTUAL STORAGE\n*                                          ALLOCATED BY PARSE\n         LA    R0,GFLENGF              R0 - LENGTH OF GFPARMS LIST\n         LR    R1,R10                  R1 - ADDRESS OF GFPARMS LIST\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         LA    R0,LDYNAMIC             R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         LR    R15,R2                  RETURN RETURN CODE TO R15\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n***********************************************************************\n*        EXECUTED INSTRUCTIONS                                        *\n***********************************************************************\nMOVEVOL  MVC   PARMNM(0),0(R5)         GET PARAMETER FROM CMND\nCOMPVOL  CLC   UCBVOLI(0),PARMNM       IS THIS THE CORRECT UCB?\nTEST4FLG TM    0(R15),*-*              TEST FOR FLAG\n         EJECT\n***********************************************************************\n*        UCB FLAGS TABLE                                              *\n***********************************************************************\nTABLE    DS    0H\n         DC    X'0104',CL10'NON ALLOC '  JES2,ETC\n         DC    X'0340',CL10'CHANGING  '  CHANGING STATUS\n         DC    X'0320',CL10'RESERVED  '  MOUNT STATUS - RESERVED\n         DC    X'0310',CL10'UNLOAD    '  UNLOAD PENDING\n         DC    X'0308',CL10'ALLOCATED '  ALLOCATED\n         DC    X'0304',CL10'RESIDENT  '  PERM. RESIDENT\n         DC    X'0302',CL10'SYSRES    '  SYSRES, MSTRCONS, CONS\n         DC    X'0680',CL10'DEV BUSY  '  DEVICE BUSY\n         DC    X'0640',CL10'NOT READY '  NOT READY\n         DC    X'0620',CL10'UNUSABLE  '  SUBCHANNEL UNUSABLE\n         DC    X'0610',CL10'SENSE OPER'  PENDING SENSE OP\n         DC    X'0608',CL10'START SUB '  IOS ISSUED START SUBCHANNEL\n         DC    X'0604',CL10'HALT SUB  '  IOS ISSUED HALT SUBCHANNEL\n         DC    X'0602',CL10'CLEAR SUB '  IOS ISSUED CLEAR SUBCHANNEL\n         DC    X'0601',CL10'FORCED OFF'  DEVICE FORCED OFFLINE\n         DC    X'0740',CL10'NO PATHS  '  DEV HAS NO OPERATIONAL PATHS\n         DC    X'0720',CL10'NO CONNECT'  DEV NOT CONNECTD TO SUBCHANNEL\n         DC    X'1480',CL10'ATTN PEND '  ATTENTION PENDING\n         DC    X'1440',CL10'INTERCEPT '  INTERCEPT PENDING\n         DC    X'1420',CL10'DEVICE END'  UNSOLICITED DEV END RECEIVED\n         DC    X'1408',CL10'INT REQD  '  INTRVNTN REQUIRED MSG ISSUED\n         DC    X'1404',CL10'INT MSG   '  INTRVNTN REQUIRED MSG NEEDED\n         DC    X'1401',CL10'DDR PEND  '  DDR SWITCH PENDING\n         DC    X'2210',CL10'PRIVATE   '  USE STATUS - PRIVATE\n         DC    X'2208',CL10'PUBLIC    '  USE STATUS - PUBLIC\n         DC    X'2204',CL10'STORAGE   '  USE STATUS - STORAGE\n         DC    X'FFFF',CL10'          '  END OF TABLE\n         DS    0F\n***********************************************************************\n*        GENERAL DECLARE STATEMENTS                                   *\n***********************************************************************\nPCLADDR  DC    A(PARMTAB)\nRC4      DC    F'04'\nRC8      DC    F'08'\nFULL00   DC    F'00'\nFULL01   DC    F'01'\nFULL03   DC    F'03'\nHALF06   DC    H'06'\nHALF12   DC    H'12'\nHALF22   DC    H'22'\nHALF0    DC    H'0'\nRC12     DC    X'0000000C'\nENDCHAIN DC    X'FF000000'\nFLAGPARM DC    X'1000'\nESOCODE  DC    X'00'\nVOLFLG   DC    X'04'\nUCBFLG   DC    X'08'\nDEVFLG   DC    X'88'\nPUBFLG   DC    X'11'\nPRIVFLG  DC    X'22'\nSTORFLG  DC    X'33'\nSPACES   DC    CL80' '\nRETNEQ   DC    C'RETURN CODE = '\nPGMNAME  DC    C'LSPACE'\n         EJECT\n***********************************************************************\n*        ERROR AND INFORMATIONAL MESSAGES                             *\n***********************************************************************\n*                                                                     *\nINFMSG1  DC    AL2(INFMSG1L)\n         DC    AL2(0)\n         DC    CL72'AN ERROR WAS ENCOUNTERED IN THE PARSE SERVICE ROUTI+\n               INE'\nINFMSG1L EQU   *-INFMSG1\n*\nINFMSG2  DC    AL2(INFMSG2L)\n         DC    AL2(0)\n         DC    CL72'AN ERROR WAS ENCOUNTERED IN THE LSPACE SVC ROUTINE'\nINFMSG2L EQU   *-INFMSG2\n*\nINFMSG3  DC    AL2(INFMSG3L)\n         DC    AL2(0)\n         DC    CL72'UNSUPPORTED DEVICE NAME SPECIFIED - '\nINFMSG3L EQU   *-INFMSG3\n*\nINFMSG4  DC    AL2(INFMSG4L)\n         DC    AL2(0)\n         DC    CL72'            PERMANENT I/O ERROR'\nINFMSG4L EQU   *-INFMSG4\n*\nINFMSG5  DC    AL2(INFMSG5L)\n         DC    AL2(0)\n         DC    CL72'LAST ALLOCATION ON VOLUME MADE UNDER DOS, OR A DADS+\n               M FUNCTION'\nINFMSG5L EQU   *-INFMSG5\n*\nINFMSG6  DC    AL2(INFMSG6L)\n         DC    AL2(0)\n         DC    CL72'ON VOLUME (000) HAS PREMATURELY TERMINATED AND VTOC+\n                ERRORS MAY EXIST'\nINFMSG6L EQU   *-INFMSG6\n*\nINFMSG7  DC    AL2(INFMSG7L)\n         DC    AL2(0)\n         DC    CL72'UCB NOT READY OR INVALID UCB SPECIFIED '\nINFMSG7L EQU   *-INFMSG7\n*\nINFMSG8  DC    AL2(INFMSG8L)\n         DC    AL2(0)\n         DC    CL72'NOT A DIRECT ACCESS DEVICE'\nINFMSG8L EQU   *-INFMSG8\n*\nINFMSG9  DC    AL2(INFMSG9L)\n         DC    AL2(0)\n         DC    CL72'ERROR..UNKNOWN OR INVALID DEVICE SPECIFIED'\nINFMSG9L EQU   *-INFMSG9\n*\nINFMSGA  DC    AL2(INFMSGAL)\n         DC    AL2(0)\n         DC    CL72'REQUEST IS:          '\nINFMSGAL EQU   *-INFMSGA\n         EJECT\n*\nINFMSGB  DC    AL2(INFMSGBL)\n         DC    AL2(0)\n         DC    CL72'NO PUBLIC DEVICES MOUNTED'\nINFMSGBL EQU   *-INFMSGB\n*\nINFMSGC  DC    AL2(INFMSGCL)\n         DC    AL2(0)\n         DC    CL72'NO PRIVATE DEVICES MOUNTED'\nINFMSGCL EQU   *-INFMSGC\n*\nINFMSGD  DC    AL2(INFMSGDL)\n         DC    AL2(0)\n         DC    CL72'NO STORAGE DEVICES MOUNTED'\nINFMSGDL EQU   *-INFMSGD\n*\nINFMSGE  DC    AL2(INFMSGEL)\n         DC    AL2(0)\n         DC    CL72' XXX OFFLINE'\nINFMSGEL EQU   *-INFMSGE\n*\nDATMSG1  DC    AL2(DATMSG1L)\n         DC    AL2(0)\n         DC    CL72'            CYL TRK  XTNT CYL-C TRK-C '\nDATMSG1L EQU   *-DATMSG1\n*\nDATMSG2  DC    AL2(DATMSG2L)\n         DC    AL2(0)\n         DC    CL72' '\nDATMSG2L EQU   *-DATMSG2\n*\nDATMSG3  DC    AL2(DATMSG3L)\n         DC    AL2(0)\n         DC    CL72'     STATUS FLAGS ARE:'\nDATMSG3L EQU   *-DATMSG3\n*\nDATMSG5  DC    AL2(DATMSG5L)\n         DC    AL2(0)\n         DC    CL72'END OF MSG'\nDATMSG5L EQU   *-DATMSG5\n         EJECT\n         LTORG\n***********************************************************************\n*        EQUATE STATEMENTS                                            *\n***********************************************************************\nPATCH    DC    50S(*)              GENERATE SCON'S FOR PATCH AREA\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       PARAMETER & WORK REGISTER\nR2       EQU   2                       WORK REGISTER\nR3       EQU   3                       WORK REGISTER\nR4       EQU   4                       WORK REGISTER\nR5       EQU   5                       WORK REGISTER\nR6       EQU   6                       POINTER TO POSITIONAL PARM LIST\nR7       EQU   7                       SVC78 RETURN CODE SAVE\nR8       EQU   8                       ADDR TO CPPL AND UCB-LIST\nR9       EQU   9                       WORK REGISTER\nR10      EQU   10                      ADDRESSABILITY TO GFPARMS\nR11      EQU   11                      BASE REG, EP + 4095\nR12      EQU   12                      BASE REG, EP + 0\nR13      EQU   13                      SAVE AREA ADDRESS\nR14      EQU   14                      OS LINKAGE REGISTER\nR15      EQU   15                      OS LINKAGE REG AND RETURN CODE\n         SPACE 5\n***********************************************************************\n*        DSECTS FOR PARSE CONTROL BLOCKS                              *\n***********************************************************************\n*                                                                     *\nPARMTAB  IKJPARM DSECT=IKJPARMD\nVOLUMES  IKJIDENT  VOLUME,LIST,FIRST=ALPHANUM,OTHER=ALPHANUM,CHAR,     +\n               PROMPT='VOLSER, UCB ADDR, DEVICE NAME, ''PUBLIC'', ''PRI+\n               VATE'' OR ''STORAGE'''\nKWORD    IKJKEYWD\n         IKJNAME   'FLAGS'\n         IKJENDP\n***********************************************************************\n*        DSECTS FOR OTHER CONTROL BLOCKS                              *\n***********************************************************************\n*                                                                     *\n         SPACE 5\n         TITLE 'CVT DSECT'\n         CVT   DSECT=YES\n         SPACE 5\nLSPACE   CSECT\n         TITLE 'PSA DSECT'\n         IHAPSA\n         SPACE 5\nLSPACE   CSECT\n         TITLE 'ASCB DSECT'\n         IHAASCB\n         SPACE 5\n         EJECT\nLSPACE   CSECT\n         TITLE 'LPDE DSECT'\n         IHALPDE\n         SPACE 5\nLSPACE   CSECT\n         TITLE 'JSCB DSECT'\n         IEZJSCB\n         SPACE 5\nLSPACE   CSECT\n         TITLE 'PSCB DSECT'\n         IKJPSCB\n         SPACE 5\nLSPACE   CSECT\n         TITLE 'TCB DSECT'\n         IKJTCB\n         SPACE 5\nLSPACE   CSECT\n         TITLE 'UCB DSECT'\n         IEFUCBOB\n         SPACE 5\nLSPACE   CSECT\n         IKJCPPL\nCPPLLEN  EQU   *-CPPL\n         SPACE 5\n         IKJPPL\nPPLLEN   EQU   *-PPL\n         SPACE 5\n         IKJIOPL\nIOPLLEN  EQU   *-IOPL\n         SPACE 5\n         EJECT\n***********************************************************************\n*        DSECT FOR GETMAINED WORKAREA                                 *\n***********************************************************************\n*                                                                     *\nWORKAREA DSECT\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nECB      DS    F                       EVENT CONTROL BLOCK FOR PPL\nPPLSECT  DS    0F                      PARSE PARAMETER LIST\n         ORG   PPLSECT+PPLLEN\nIOPLSECT DS    0F                      I/O PARAMETER LIST\n         ORG   IOPLSECT+IOPLLEN\nDEC      DS    D                       USED IN BINARY/PACKED CONVERSION\nCONV     DS    D                       USED IN PACKED/ZONED CONVERSION\nCHAINSAV DS    2D                      SAVE AREA FOR FOUR REGS\nBUFRSAV  DS    D                       SAVE AREA FOR TWO REGS\nUCBSTOR  DS    F                       UCB ADDRESS SAVE AREA\nPARSAVE  DS    F                       PARAMETER LIST POINTER\nPARSBACK DS    F                       ADDRESS OF PDE RETURNED BY PARSE\nGFPADDR  DS    F                       ADDRESS OF GFPARMS\nRETNCD   DS    F                       RETURN CODE DIPLAYED AT TERM\nFLGSW    DS    X                       'FLAGS' KEYWORD INDICATOR\nREQFLG   DS    X                       TYPE OF REQUEST INDICATOR\nPARMNM   DS    CL8                     PARAMETER VALUE PASSED TO LSPACE\nVOLSPC   DS    CL30                    AREA FOR INFO RETURNED BY SVC78\nLINKLIST DS    0FL2                    LIST FORMAT OF LINK MACRO\nUTABLPTR DS    F                       POINTER TO UNIT TABLE\nFLAGSPTR DS    F                       POINTER TO FLAG PARAMETER\n         DS    0F\nUNITABLE DS    0CL16                   UNIT TABLE USED BY IEFEB4UV\nUNITNAME DS    CL8                     ESOTERIC OR GENERIC UNIT NAME\nUCBLADDR DS    A                       ADDR OF 1ST UCB FROM IEFEB4UV\nATTRAREA DS    F                       NOT USED\nLSPCOLD  DS    0FL2                    LSPCMSG OUTPUT LINE DESCRIPTOR\nLSPCNUM  DS    F                       NUMBER OF LSPCMSG OUTPUT LINES\nLSPCADDR DS    F                       ADDRESS OF LSPCMSG\nLSPCMSG  DS    0CL76                   MSG SKELETON USED BY PUTLINE\nLSPCLGTH DS    2H                      LENGTH OF MESSAGE LINE (72)\nLSPCLINE DS    CL72                    MSG LINE TO BE WRITTEN TO TERM\nRETNOLD  DS    0FL2                    RETNMSG OUTPUT LINE DESCRIPTOR\nRETNNUM  DS    F                       NUMBER OF RETNMSG OUTPUT LINES\nRETNADDR DS    F                       ADDRESS OF LSPCMSG\nRETNMSG  DS    0CL22                   RETNCD SKELETON USED BY PUTLINE\nRETNLGTH DS    2H                      LENGTH OF RETURN CODE LINE (18)\nRETNEQUL DS    CL14                    AREA TO CONTAIN 'RETURN CODE ='\nRETNCODE DS    CL4                     RETURN CODE DISPLAYED UPON TERM\nIOPB     PUTLINE MF=L                  LIST FORMAT OF PUTLINE MACRO\nLDYNAMIC EQU   *-WORKAREA\n***********************************************************************\n*        DSECT FOR GETMAINED GNRLFAIL PARAMETER LIST                  *\n***********************************************************************\n*                                                                     *\n         IKJEFFGF GFDSECT=YES          GNRLFAIL MACRO PARM LIST\n         END   LSPACE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LSPACE#": {"ttr": 11523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "DELUXE"}, "text": ")F FUNCTION -\n   THE LSPACE COMMAND CAN BE USED IN TSO FOREGROUND TO DISPLAY\n   UNUSED SPACE ON DIRECT ACCESS DEVICES WHICH ARE ONLINE TO THE\n   SYSTEM. SPACE WILL BE DISPLAYED IN FORMAT OF FREE CYLS, FREE\n   TRKS, NO OF FREE EXTENTS, CONTIG CYLS AND CONTIG TRKS.\n\n)X SYNTAX -\n     LSPACE ('KEYWORD(S)')\n     A KEYWORD IS REQUIRED\n     DEFAULT - NONE\n     ALIAS   - LSPC\n\n)O KEYWORDS -\n))'VOLIST' - VOLUME SERIAL OF THE DIRECT ACCESS VOLUME FOR WHICH\n             UNUSED SPACE IS TO BE DISPLAYED.\n\n))'UCBADDR' - SPECIFY THE UCB ADDRESS OF THE VOLUME FOR WHICH UNUSED\n              SPACE IS TO BE DISPLAYED.\n\n))'DEVNAME' - SPECIFY THE DEVICE NAME(S) OF VOLUMES FOR WHICH UNUSED\n              SPACE IS TO BE DISPLAYED.\n\n))'MOUNT STATUS' - SPECIFY EITHER MOUNT STATUS OF PUBLIC, PRIVATE OR\n              STORAGE TO DISPLAY ALL DEVICES WITH THE SPECIFIED MOUNT\n              CHARACTERISTICS.\n\n))'FLAGS' - MUST BE LAST OPERAND IN COMMAND,IF SPECIFIED. WILL DISPLAY\n            UCB FLAGS FOR EACH DEVICE, I.E. BUSY, ALLOCATED, RESERVED,\n            RESIDENT.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LXD0007": {"ttr": 11525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00x\\x00x\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 120, "newlines": 120, "modlines": 0, "user": "DELUXE"}, "text": "++USERMOD(LXD0007) .\n++VER(Z038) FMID(HRF1702)\n  PRE( UZ83202 )\n   /*\n     USERMOD LXD0007 CREATED USING SMP SYSMOD INSTALL DIALOG.\n     CREATED BY: T27611\n             ON: 86/01/16  17:05\n    DESCRIPTION:\n                 UPDATE TO IBM SUPPLIED CLASS DESCRIPTOR TABLE TO\n                 CAUSE CHECKING OF THE OPER ATTRIBUTE DURING RACHECK.\n       */ .\n++ZAP(ICHRRCDX)  .\n NAME ICHRRCDX DASDVOL\n VER 0017 60\n REP 0017 20\n NAME ICHRRCDX TAPEVOL\n VER 0017 60\n REP 0017 20\n NAME ICHRRCDX TERMINAL\n VER 0017 40\n REP 0017 20\n NAME ICHRRCDX APPL\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX TIMS\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX GIMS\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX AIMS\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX TCICSTRN\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX GCICSTRN\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX PCICSPSB\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX QCICSPSB\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX GLOBAL\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX GMBR\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX DSNR\n VER 0017 40\n REP 0017 20\n NAME ICHRRCDX FACILITY\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX VMMDISK\n VER 0017 20\n REP 0017 20\n NAME ICHRRCDX VMRDR\n VER 0017 20\n REP 0017 20\n NAME ICHRRCDX VMCMD\n VER 0017 20\n REP 0017 20\n NAME ICHRRCDX VMNODE\n VER 0017 20\n REP 0017 20\n NAME ICHRRCDX VMBATCH\n VER 0017 20\n REP 0017 20\n NAME ICHRRCDX SCDMBR\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX SECDATA\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX FCICSFCT\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX HCICSFCT\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX JCICSJCT\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX KCICSJCT\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX DCICSDCT\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX ECICSDCT\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX SCICSTST\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX UCICSTST\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX MCICSPPT\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX NCICSPPT\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX ACICSPCT\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX BCICSPCT\n VER 0017 80\n REP 0017 A0\n NAME ICHRRCDX PMBR\n VER 0017 00\n REP 0017 20\n NAME ICHRRCDX PROGRAM\n VER 0017 80\n REP 0017 A0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LXD0010": {"ttr": 11528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "DELUXE"}, "text": "++USERMOD(LXD0010) .\n++VER(Z038) FMID(HJE2215)\n  PRE( UY03923,UZ44837,UZ49900,UY01248,UY02524,UZ82298)\n   /*\n     USERMOD LXD0010 CREATED USING SMP SYSMOD INSTALL DIALOG.\n     CREATED BY: T56714\n             ON: 84/11/20  14:30\n    DESCRIPTION:\n                 JES2 EXIT 255 MODIFICATION\n       */ .\n++ SRCUPD(HASPRTAM) DISTLIB(HASPSRC) .\n./ CHANGE  NAME=HASPRTAM                                                1500003\n         $EXIT 255                                                 DLX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LXD0014": {"ttr": 11530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "DELUXE"}, "text": "++USERMOD(LXD0014) .\n++VER(Z038) FMID(HJE2215)\n  PRE(UY03923,UY05966,UZ44837,UZ49900,UY01248,UZ82298,XY02621,XY02666)\n   /*\n     USERMOD LXD0014 CREATED USING SMP SYSMOD INSTALL DIALOG.\n     CREATED BY: T27611\n             ON: 85/06/26  08:44\n    DESCRIPTION:\n                 THIS USERMOD CAUSES JES2 HASPPRPU TO NOT ISSUE A PAGE\n                 EJECT CCW FOR CERTAIN REMOTES UNLESS THE PAGE EJECT\n                 IS PART OF THE ACTUAL PRINT DATASET.\n       */ .\n++SRCUPD(HASPPRPU) DISTLIB(HASPSRC) .\n./ CHANGE NAME=HASPPRPU\nDLX25401 $EXIT 254                                  **DLX**\n         LTR   R15,R15                              **DLX**\n         BNZ   DLX2540A                             **DLX**\nDLX2540A EQU   *                                    **DLX**\nDLX25402 $EXIT 254                                  **DLX**\n         LTR   R15,R15                              **DLX**\n         BNZ   DLX2540B                             **DLX**\nDLX2540B EQU   *                                    **DLX**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LXD0032": {"ttr": 11532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "DELUXE"}, "text": "++USERMOD(LXD0032) .\n++VER(Z038) FMID(HDP2230)\n   /*\n     USERMOD LXD0032 CREATED USING SMP SYSMOD INSTALL DIALOG.\n     CREATED BY: T27611\n             ON: 84/11/30  23:19\n     UPDATED BY: T27611\n             ON: 86/10/20  14:55\n     UPDATED BY: T53031\n             ON: 87/10/14  08:30\n             CHANGED FMID FROM HDP2210 TO HDP2230\n    DESCRIPTION:\n                 IGGPRE00 ALLOCATION EXIT TO CHECK FOR AND AUTHORIZE\n                 BLKSIZE GT 23476, VSAM DEFINES, AND DASDVOL.\n       */ .\n++MOD(IGGPRE00) DISTLIB(AOSD0) LKLIB(SYSPLINK) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PFKCARDS": {"ttr": 11534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02$\\x02$\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 548, "newlines": 548, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'PFKCARDS - PFK MODIFICATION PROGRAM'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = PFKCARDS                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = CONSOLE PROGRAM FUNCTION KEYS        *\n*                MODIFY AND PRINT PROGRAM.                            *\n*                                                                     *\n*             FUNCTION =                                              *\n*                THIS PROGRAM HAS THE FOLLOWING CAPABILITIES:         *\n*                                                                     *\n*                1. PROVIDES A PRINTOUT OF THE CURRENT PFK            *\n*                   DEFINITIONS FOR EACH CONSOLE.                     *\n*                2  UNLOADS THE CURRENT PFK DEFINITIONS FOR           *\n*                   EACH CONSOLE INTO A DATA SET.                     *\n*                3. MODIFIES THE PFK DEFINITIONS FOR THE CONSOLES     *\n*                   USING SYSIN DATA.                                 *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                10/24/78  WRITTEN BY BARRY GOLDBERG                  *\n*                                     SYSTEMS PROG.                   *\n*                                     TECHNICAL SUPPORT               *\n*                                     213-741-4875                    *\n*                                     AUTO CLUB OF SOUTHERN CA        *\n*                                     2601 S. FIGUEROA                *\n*                                     LOS ANGELES, CA. 90007          *\n*                02/15/85  MODIFIED TO WORK FOR MVS/XA.               *\n*                          ADDED PRINT AND UNLOAD OPTIONS.     BHC.   *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*  PRINT CURRENT PFK DEFINITIONS:                                     *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=PFKCARDS                                   *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n*  UNLOAD CURRENT PFK DEFINITIONS (SYSPRINT OPTIONAL):                *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=PFKCARDS                                   *\n*     //SYSPUNCH DD DSN=OPERID.PFK.DATA,DISP=SHR                      *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n*  LOAD NEW PFK DEFINITIONS (SYSPRINT OPTIONAL):                      *\n*                                                                     *\n*     //JOBNAME  JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,      *\n*     //         MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????         *\n*     //STEP1    EXEC  PGM=PFKCARDS                                   *\n*     //SYSIN    DD DSN=OPERID.PFK.DATA,DISP=SHR                      *\n*     //SYSPRINT DD SYSOUT=*                                          *\n*                                                                     *\n*  NOTE:  WHEN SYSPRINT IS INCLUDED WITH SYSIN, THE 'BEFORE' AND      *\n*         'AFTER' PFK DEFINITIONS WILL BE PRINTED.  ALSO, IF          *\n*         SYSPUNCH AND SYSIN ARE BOTH PRESENT, THE SYSIN WILL         *\n*         BE IGNORED.                                                 *\n*                                                                     *\n*SYSIN AND SYSPUNCH RECORD FORMAT:                                    *\n*                                                                     *\n*   COL               FUNCTION                                        *\n*                                                                     *\n*  1 - 2             CONSOLE ID FOR PFK                               *\n*  3 - 4             PFK #                                            *\n*    5               PFK CONTROL                                      *\n*                    BLANK  =  NULL PFK ENTRY                         *\n*                       N   =  NON CONVERSATIONAL                     *\n*                       Y   =  CONVERSATIONAL                         *\n*  7 - 71            THE COMMAND AS IT WOULD BE ISSUED AND IF         *\n*                     MULTIPLE, SEPARATED WITH A SEMICOLON. ALSO      *\n*                     UNDERSCORE ALLOWED (TAKES A POSITION).          *\n*   72               CONTINUATION COLUMN IF COMMAND(S) REQUIRE        *\n*                     ADDITIONAL SPACE ON ANOTHER CARD.               *\n*   CARD # 2 -                                                        *\n*   16-55            CONTINUATION OF COMMAND IF PREVIOUS CARD         *\n*                     IS NONBLANK IN COL 72.                          *\n*                                                                     *\n*NOTE :                                                               *\n*         1) MAXIMUM LENGTH OF ALL COMMANDS INCLUDING SPECIAL         *\n*               CHARACTERS AND BLANKS IS 105 CHARACTERS.              *\n*         2) THIS PROGRAM MUST RUN AUTHORIZED OR AS A SYSTEM TASK.    *\n*                                                                     *\n*EXAMPLE OF SYSIN DATA:                                               *\n*  ----+----1----+----2----+----3----+----4----+----5----+----6----+  *\n*  0101N K E,1                                                        *\n*  0102Y V 020,CONSOLE,ROUT=(1,2,3,4,5,6,8,9,10,11,12,14,15)          *\n*  0103Y S SSP98LBL.P3;S SSP97LBL.P3                                  *\n*  0104Y V 520,CONSOLE,ROUT=(1,2,3,4,5)                               *\n*  0105Y S LBLREADC.P3;S LBLREAD.P3,ID=_X                             *\n*  0106Y V 301,CONSOLE,ROUT=7,AUTH=ALL;V 300,CONSOLE,ROUT=3,AUTH=INFO *\n*  0107                                                               *\n*  0108Y S MSC1010P.P3,RUN=_X                                         *\n*  0109Y CENOUT C=A,J=_                                               *\n*  0110Y S MSC9010P.P3,RUN=_                                          *\n*  0111Y K S,DEL=RD,SEG=19,RTME=001,RNUM=19,CON=N                     *\n*  0112Y S SSP93CPY.P3,NEWVOL='SER=_CAPS'                             *\n*  0201N K E,1                                                        *\n*  0202                                                               *\n*  0203                                                               *\n*  0204Y V 020,MSTCONS                                                *\n*  0205                                                               *\n*  0206                                                               *\n*  0207Y K S,DEL=RD,SEG=19,RTME=001,RNUM=19,CON=N;K A,NONE            *\n*  0208N D A                                                          *\n*  0209N D N=SOUT                                                     *\n*  0210N D R                                                          *\n*  0211N D N                                                          *\n*  0212N K                                                            *\n*  0301N K E,1                                                        *\n*  0302Y S DUMWTR.P                                                   *\n*  0303Y S IRPT.P3;S IRPTJ.P3                                         *\n*  0304Y V 002,ONLINE;V 00E,ONLINE;V 011,ONLINE;V 010,ONLINE          *\n*  0305Y SF PRINT,002,,_;SF PRINT,00E;SF PUNCH,011                    *\n*  0306Y SF RDR,010                                                   *\n*  0307Y K S,DEL=RD,SEG=19,RTME=001,RNUM=19,CON=N;K A,NONE            *\n*  0308N D A                                                          *\n*  0309N D N                                                          *\n*  0310Y D Q;D R                                                      *\n*  0311N D N=SOUT                                                     *\n*  0312N K                                                            *\n*                                                                     *\n***********************************************************************\nPFKCARDS CSECT\n         SAVE  (14,12),,PFKCARDS_&SYSDATE_&SYSTIME\n         LR    R12,R15                   ESTABLISH R12 AS BASE REG\n         USING PFKCARDS,R12              TELL ASSEMBLER\n         ST    R13,SAVEAREA+4            SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                    SAVE IT IN R6\n         LA    R13,SAVEAREA              POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                 STORE OUR SAVEAREA ADDR IN OS\n*\n*   CHECK TO SEE WHAT DD NAMES ARE PRESENT\n*\nCHKDD    EQU   *\n         SLR   R3,R3                   CLEAR R3\n         L     R2,16                   POINT TO CVT\n         L     R2,0(R2)                GET ADDRESS OF TCB ADDR WORDS\n         L     R2,4(R2)                GET ADDR OF CURRENT TCB\n         L     R2,12(R2)               GET ADDRESS OF THIS TCB'S TIOT\n         LA    R2,24(R2)               POINT TO START OF DD ENTRIES\n         MVI   SYSINFLG,C'N'           INIT SYSIN FLAG\n         MVI   PRINTFLG,C'N'           INIT SYSPRINT FLAG\n         MVI   PUNCHFLG,C'N'           INIT SYSPUNCH FLAG\nCD10     EQU   *\n         IC    R3,0(R2)                GET LENGTH OF ENTRY\n         LTR   R3,R3                   ENTRY PRESENT?\n         BZ    OPENFILS                IF NOT, BRANCH\n         CLC   4(8,R2),=CL8'SYSIN'     IS IT SYSIN?\n         BNE   CD20                    IF NOT, BRANCH\n         MVI   SYSINFLG,C'Y'           IF SO, SET SYSIN FLAG\n         B     CD40\nCD20     EQU   *\n         CLC   4(8,R2),=CL8'SYSPRINT'  IS IT SYSPRINT?\n         BNE   CD30                    IF NOT, BRANCH\n         MVI   PRINTFLG,C'Y'           IF SO, SET PRINT FLAG\n         B     CD40\nCD30     EQU   *\n         CLC   4(8,R2),=CL8'SYSPUNCH'  IS IT SYSPUNCH?\n         BNE   CD40                    IF NOT, BRANCH\n         MVI   PUNCHFLG,C'Y'           IF SO, SET PUNCH FLAG\nCD40     EQU   *\n         AR    R2,R3                   GO TO NEXT DD ENTRY\n         B     CD10                    LOOP BACK\n*\n*   OPEN THE FILES.\n*\nOPENFILS EQU   *\n         CLI   SYSINFLG,C'Y'           SYSIN PRESENT?\n         BNE   OF10                    IF NOT, BRANCH\n         OPEN  SYSIN                   OPEN SYSIN DATA SET\nOF10     EQU   *\n         CLI   PRINTFLG,C'Y'           SYSPRINT PRESENT?\n         BNE   OF20                    IF NOT, BRANCH\n         OPEN  (SYSPRINT,OUTPUT)       OPEN SYSPRINT DATA SET\nOF20     EQU   *\n         CLI   PUNCHFLG,C'Y'           SYSPUNCH PRESENT?\n         BNE   OF30                    IF NOT, BRANCH\n         OPEN  (SYSPUNCH,OUTPUT)       OPEN SYSPUNCH DATA SET\nOF30     EQU   *\n*\n*   THIS PROGRAM MUST RUN AUTHORIZED IN KEY 0\n*\n         MODESET KEY=ZERO,MODE=SUP     GET INTO SUPERVISOR KEY 0\n*\n*   DECIDE WHAT ROUTE TO TAKE HERE.\n*\n         CLI   PUNCHFLG,C'Y'           SYSPUNCH PRESENT?\n         BE    NOSYSIN                 SKIP ANY SYSIN\n         CLI   SYSINFLG,C'Y'           SYSIN PRESENT?\n         BNE   NOSYSIN                 IF NOT, MUST BE JUST PRINT\n**********************************************************************\n*\n*   IF SYSIN IS PRESENT, READ A RECORD AND FORMAT THE PFKEY\n*     FOR STORAGE IN THE CONSOLE ADDRESS SPACE.\n*\nGETSYSIN EQU   *\n         MVI   CTLLINE,C' '             BLANK OUT IMAGE\n         MVC   CTLLINE+1(L'CTLLINE-1),CTLLINE\n         XC    CTLIND,CTLIND            AND INDICATORS\n         GET   SYSIN                    GET A RECORD\n         LR    R3,R1                    POINT TO IT\n         PACK  DBL,0(2,R3)              GET CONSOLE ID\n         CVB   R1,DBL\n         STH   R1,CONID                 AND SAVE IT\n         PACK  DBL,2(2,R3)              GET PFK NUMBER\n         CVB   R1,DBL\n         STH   R1,PFKNO                 SAVE IT FOR LATER\n         CLI   4(R3),C' '               NULL ENTRY?\n         BE    GETSYSIN                 YES, WE ARE FINISHED\n         OI    CTLIND,ACTIVE            INDICATE ACTIVE ENTRY\n         CLI   4(R3),C'N'               IS IT NON CONVERSATIONAL\n         BE    GS10                     YES\n         CLI   4(R3),C'Y'               CONVERSATIONAL\n         BNE   GS10                     TOO BAD, IGNORE\n         OI    CTLIND,CONY              SET CONVERSATIONAL BIT\nGS10     EQU   *\n         MVC   CTLLINE1,6(R3)           SET COMMAND\n         CLI   71(R3),C' '              ANY CONTINUATION?\n         BE    FINDUCM                  NO, BRANCH\n         GET   SYSIN                    GET THE NEXT RECORD\n         MVC   CTLLINE2,15(R1)          GET REST OF THE COMMAND\n*\n*   FIND THE UCM DEVICE ENTRY MAP FOR THE SPECIFIED CONSOLE.\n*\nFINDUCM  EQU   *\n         L     R10,CVTPTR               POINT TO CVT\n         USING CVT,R10\n         L     R10,CVTCUCB\n         USING UCM,R10\n         LM    R3,R5,UCMVDATA           SET TO SEARCH\n         DROP  R10\n         LH    R6,CONID                 GET CON NUMBER\nFU10     EQU   *\n         BCT   R6,FU20                  NEXT ONE?\n         B     FU30                     FOUND THE RIGHT CONSOLE\nFU20     EQU   *\n         BXLE  R3,R4,FU10               POINT TO NEXT ENTRY\n         B     GETSYSIN                 NOT HERE, IGNORE\nFU30     EQU   *\n*\n*   FIND THE RESIDENT PFK AREA FOR THE CONSOLE.\n*\n         USING UCMLIST,R3\n         ICM   R10,B'1111',UCMXB        DCM ADDRESS\n         BZ    GETSYSIN                 NOT HERE, IGNORE\n         DROP  R3\n         USING DCMADTRN,R10\n         ICM   R10,B'1111',DCMADPFK     GET PFK AREA ADDRESS\n         BZ    GETSYSIN                 NOT HERE, IGNORE\n*\n*   DEFINE THE CONSOLE ADDRESS SPACE AS THE SECONDARY ADDRESS\n*     SPACE FOR THE PROGRAM.\n*\n         ESAR  R7                       GET THE CURRENT SEC ASID\n         ST    R7,SASID                 STORE IT\n         AXSET AX=ONE                   SET TO ALLOW SSAR\n         LA    R7,CONASID               GET THE CONSOLE ASID\n         SSAR  R7                       SET SECONDARY\n*\n*   FIND THE SPECIFIC PFKEY DEFINITION IN THE PFK AREA.\n*\n         LH    R4,PFKNO                 GET PFK NUMBER\n         LA    R7,PFK#BUF\n         LA    R5,1\n         SR    R15,R15\n         MVCP  0(R5,R7),0(R10),R15      GET PFK # FROM SEC ADDR SPACE\nFINDKEY  EQU   *\n         BCT   R4,FK10                  GET ANOTHER\n         B     FK20                     BRANCH WHEN POINTER CORRECT\nFK10     EQU   *\n         LA    R10,PFKLEN(R10)          POINT TO NEXT PFKEY\n         LA    R7,PFK#BUF\n         LA    R5,1\n         SR    R15,R15\n         MVCP  0(R5,R7),0(R10),R15      GET PFK # FROM SEC ADDR SPACE\n         CLI   PFK#BUF,100              END OF PFK AREA?\n         BE    ERREXIT                  YES, NOT HERE\n         B     FINDKEY                  LOOP BACK\nFK20     EQU   *\n         CLC   PFK#BUF,PFKNO+1          IS THIS REALLY THE RIGHT ONE?\n         BNE   ERREXIT                  NO, ERROR\n*\n*   SAVE THE OLD PFK DEFINITION AND LOAD THE NEW ONE.\n*\n         LA    R5,PFKLEN-1              GET LENGTH TO MOVE\n         LA    R7,OLDPFK                POINT TO OLD PFK AREA\n         SR    R15,R15\n         MVCP  0(R5,R7),1(R10),R15      SAVE THE OLD PFK DEFINITION\n         LA    R5,PFKLEN-1              GET LENGTH TO MOVE\n         LA    R7,CTLIND                POINT TO NEW PFK DATA\n         SR    R15,R15\n         MVCS  1(R5,R10),0(R7),R15      LOAD THE NEW PFKEY\n*\n*   GET OUT OF CROSS-MEMORY MODE.\n*\n         L     R5,SASID\n         SSAR  R5\n*\n*   IF SYSPRINT PRESENT, PRINT THE OLD AND NEW PFK DEFINITIONS.\n*\nPRINTIT  EQU   *\n         CLI   PRINTFLG,C'Y'            SYSPRINT PRESENT?\n         BNE   GETSYSIN                 IF NOT, LOOP BACK FOR NEXT\n         CLC   CONID,LSTCONID           SAME CONSOLE AS BEFORE?\n         BE    PI10                     IF SO, BRANCH\n         MVC   LSTCONID,CONID           CHANGE THE LAST CONSOLE ID\n         MVC   HEADTYPE(7),=C'OLD/NEW'  LOAD HEADER TYPE\n         PUT   SYSPRINT,HEADER          OUTPUT HEADER\n         MVI   SPCNTL,C'-'              SET TO SPACE DOWN 3 LINES\nPI10     EQU   *\n         LA    R7,OLDPFK                POINT TO OLD PFK DATA\n         BAL   R8,FRMTPFK               FORMAT IT FOR PRINTING\n         MVC   SPTYPE,=CL8'OLD'         INDICATE OLD INFO\n         PUT   SYSPRINT,SPBUF           WRITE INTO SYSPRINT FILE\n         MVI   SPCNTL,C' '              MAKE SURE SET FOR SINGLE SPACE\n         LA    R7,CTLIND                POINT TO NEW PFK DATA\n         BAL   R8,FRMTPFK               FORMAT NEW PFK DEFINITION\n         MVC   SPTYPE,=CL8'NEW'         INDICATE NEW INFO\n         PUT   SYSPRINT,SPBUF           WRITE INTO SYSPRINT FILE\n         B     GETSYSIN\n*\n*   IF SOMETHING WITH RECORD NOT QUITE RIGHT, IGNORE IT.  GET OUT\n*     OF CROSS-MEMORY ADDRESSING MODE AND GO BACK FOR THE NEXT\n*     SYSIN RECORD.\n*\nERREXIT  EQU   *\n         L     R5,SASID\n         SSAR  R5\n         B     GETSYSIN\n*\n***********************************************************************\n*\n*   IF SYSPUNCH AND/OR SYSPRINT PRESENT, FIND THE PFKEY DEFINITIONS\n*     FOR ALL AVAILABLE CONSOLES, FORMAT LIKE SYSIN DATA AND\n*     OUTPUT TO SYSPUNCH AND/OR SYSPRINT.\n*\nNOSYSIN  EQU   *\n         SLR   R6,R6                    INITIALIZE R6 WITH CONSOLE ID\n         STH   R6,CONID                 STORE IT\nNS10     EQU   *\n         LH    R6,CONID                 GET LAST CONSOLE ID\n         LA    R6,1(R6)                 GO TO NEXT ONE\n         STH   R6,CONID                 SAVE IT\n         L     R10,CVTPTR               POINT TO CVT\n         USING CVT,R10\n         L     R10,CVTCUCB\n         USING UCM,R10\n         LM    R3,R5,UCMVDATA           SET TO SEARCH\n         DROP  R10\nNS20     EQU   *\n         BCT   R6,NS30                  NEXT ONE?\n         B     NS40                     GOT IT, BRANCH\nNS30     EQU   *\n         BXLE  R3,R4,NS20               TRY NEXT ONE\n         B     EOFIN                    ALL DONE, EXIT\nNS40     EQU   *\n*\n*   FIND THE RESIDENT PFK AREA FOR THIS CONSOLE.\n*\n         USING UCMLIST,R3\n         ICM   R10,B'1111',UCMXB        DCM ADDRESS\n         BZ    NS10                     NOT HERE, LOOP BACK\n         DROP  R3\n         USING DCMADTRN,R10\n         ICM   R10,B'1111',DCMADPFK     GET THE ADDRESS\n         BZ    NS10                     NOT HERE, IGNORE\n*\n*   NOW LOOP THROUGH THE PFKEY DEFINITIONS.\n*\nPFKLOOP  EQU   *\n*\n*   SET THE CONSOLE ADDRESS SPACE AS THE SECONDARY.\n*\n         ESAR  R7                       GET THE CURRENT SECONDARY\n         ST    R7,SASID                 SAVE IT\n         AXSET AX=ONE                   SET AX TO ALLOW SSAR\n         LA    R7,CONASID               GET THE CONSOLE ASID\n         SSAR  R7                       SET IT AS SEC ADDR SPACE\n*\n*   GET THE PFK DEFINITION.\n*\n         LA    R7,PFKNO+1               POINT TO PFKNO BUFFER\n         LA    R5,1                     GET LENGTH TO MOVE\n         SR    R15,R15\n         MVCP  0(R5,R7),0(R10),R15      GET THE PFK NUMBER FROM SEC\n         CLI   PFKNO+1,100              END OF PFK AREA?\n         BE    PFKEND                   YES, BRANCH TO END\n         LA    R5,PFKLEN-1              GET LENGTH TO MOVE\n         LA    R7,OLDPFK                POINT TO OLD PFK AREA\n         SR    R15,R15\n         MVCP  0(R5,R7),1(R10),R15      GET THE OLD PFK DEFINITION\n         BAL   R8,FRMTPFK               FORMAT THE PFK DATA\n*\n*   GET OUT OF SECONDARY ADDRESS SPACE MODE.\n*\n         L     R5,SASID                 GET OUT OF SECONDARY ADDR\n         SSAR  R5\n*\n*   IF SYSPRINT PRESENT, WRITE OUT THE PFK DEFINITION.\n*\n         CLI   PRINTFLG,C'Y'            SYSPRINT PRESENT?\n         BNE   PL20                     IF NOT, BRANCH\n         CLC   CONID,LSTCONID           SAME CONSOLE?\n         BE    PL10                     IF SO, BRANCH\n         MVC   LSTCONID,CONID           CHANGE LAST CONSOLE ID\n         MVC   HEADTYPE(7),=C'CURRENT'  LOAD HEADER TYPE\n         PUT   SYSPRINT,HEADER          OUTPUT THE HEADER\n         MVI   SPCNTL,C'-'              SET TO SPACE DOWN 3 LINES\nPL10     EQU   *\n         PUT   SYSPRINT,SPBUF           PRINT THE PFK DATA\n         MVI   SPCNTL,C'0'              MAKE SURE REST IS DOUBLE SPACED\nPL20     EQU   *\n*\n*   IF SYSPUNCH PRESENT, UNLOAD THE PFK DEFINITION.\n*\n         CLI   PUNCHFLG,C'Y'            SYSPUNCH PRESENT?\n         BNE   PL40                     IF NOT, BRANCH\n         MVI   PUNCHBUF,X'40'           CLEAR SYSPUNCH BUFFER\n         MVC   PUNCHBUF+1(L'PUNCHBUF-1),PUNCHBUF\n         MVC   PUNCHBUF(71),SPCONID     GET FIRST PART OF DATA\n         CLC   SPCONID+71,=CL8' '       ANY MORE DATA?\n         BE    PL30                     IF NOT,BRANCH\n         MVI   PUNCHBUF+71,C'*'         PUT IN CONTINUATION MARK\n         PUT   SYSPUNCH,PUNCHBUF        WRITE INTO SYSPUNCH FILE\n         MVI   PUNCHBUF,X'40'           CLEAR OUT AGAIN\n         MVC   PUNCHBUF+1(L'PUNCHBUF-1),PUNCHBUF\n         MVC   PUNCHBUF+15(40),SPCONID+71  GET REST OF DATA\nPL30     EQU   *\n         PUT   SYSPUNCH,PUNCHBUF        WRITE INTO SYSPUNCH FILE\n*\n*   POINT TO NEXT PFKEY AND LOOP BACK.\n*\nPL40     EQU   *\n         LA    R10,PFKLEN(R10)          POINT TO NEXT ONE\n         B     PFKLOOP                  LOOP BACK\n*\n*   GET OUT OF CROSS-MEMORY MODE AND LOOP BACK FOR NEXT CONSOLE.\n*\nPFKEND   EQU   *\n         L     R5,SASID                 GET OUT OF SECONDARY ADDR\n         SSAR  R5\n         B     NS10\n*\n*   WHEN ALL DONE, GET OUT OF KEY 0 AND CLOSE ALL FILES.\n*\nEOFIN    EQU   *\n         MODESET KEY=NZERO,MODE=PROB    GET OUT OF KEY 0\n         CLOSE (SYSIN,,SYSPRINT,,SYSPUNCH)  CLOSE ALL FILES\n         L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         SR    R15,R15                  ALWAYS A GOOD RETURN CODE\n         RETURN (14,12),RC=(15)         RETURN TO OS\n*\n*   SUBROUTINE TO FORMAT THE PFKEY DEFINITION.\n*\nFRMTPFK  EQU   *\n         MVI   SPLINE,X'40'             CLEAR OUT PRINT BUFFER\n         MVC   SPLINE+1(L'SPLINE-1),SPLINE\n         SLR   R9,R9\n         ICM   R9,B'0011',CONID         GET BINARY CONSOLE ID\n         CVD   R9,DBL                   CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,DBL               UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   SPCONID,DECNUM+6         STORE CONSOLE ID\n         ICM   R9,B'0001',PFKNO+1       GET THE PFK NUMBER\n         CVD   R9,DBL                   CONVERT TO PACKED DECIMAL\n         UNPK  DECNUM,DBL               UNPACK\n         MVZ   DECNUM+7(1),DECNUM+6     MOVE ZONE BYTE\n         MVC   SPPFKNO,DECNUM+6         STORE PFK NUMBER\n         TM    0(R7),ACTIVE             IS THIS AN ACTIVE PF KEY?\n         BNO   FP20                     IF NOT, THAT'S IT\n         MVI   SPCONV,C'N'              DEFAULT TO NON-CONVERSATIONAL\n         TM    0(R7),CONY               IS IT CONVERSATIONAL?\n         BNO   FP10                     IF NOT, BRANCH\n         MVI   SPCONV,C'Y'              INDICATE CONVERSATIONAL\nFP10     EQU   *\n         MVC   SPDATA,1(R7)             MOVE DATA INTO PRINT BUFFER\nFP20     EQU   *\n         BR    R8                       RETURN\n*\n         LTORG\n         EQUATE\nSAVEAREA DC    18F'0'                   SAVE AREA\nDBL      DS    D                        A WORK AREA\nSASID    DS    F                        SECONDARY ADDR SPACE\nCONID    DS    H                        REQUESTED CONSOLE\nLSTCONID DS    H                        LAST CONSOLE\nPFKNO    DS    H                        REQUESTED PFK NUMBER\nPFK#BUF  DS    CL1                      PFK # FROM CONSOLE ADDR SPACE\nSYSINFLG DS    CL1                      SYSIN PRESENT FLAG\nPRINTFLG DS    CL1                      SYSPRINT PRESENT FLAG\nPUNCHFLG DS    CL1                      SYSPUNCH PRESENT FLAG\nDECNUM   DS    CL8                      WORK BUFFER\nOLDPFK   DS    CL109                    CURRENT PFK DATA\n         DS    0D\n*\n*  NEW PFKEY DEFINITION\n*\nCTLIND   DS    X                        CONTROL BYTE\nACTIVE   EQU   X'80'\nCONY     EQU   X'20'                    PFK IS CONVERSATIONAL\nCTLLINE  DS    0CL108                   LENGTH OF DATA\nCTLLINE1 DS    CL65                     FIRST CARD IMAGE AMOUNT\nCTLLINE2 DS    CL40                     NEXT AMOUNT (ALLOW ONLY 105)\n         DS    CL3\n*\n*  PAGE HEADER FOR SYSPRINT DATA SET\n*\nHEADER   DS    0CL133\n         DC    CL45'1'\nHEADTYPE DC    C'_______ PF KEY DEFINITIONS FOR THE CONSOLES'\n         DC    CL45' '\n*\n*  SYSPRINT RECORD BUFFER\n*\nSPBUF    DS    0CL133                   SYSPRINT BUFFER\nSPCNTL   DS    CL1                      PRINTER CONTROL CHARACTER\nSPLINE   DS    0CL132\nSPTYPE   DS    CL8                      'CURRENT' OR 'NEW'\nSPCONID  DS    CL2                      CONSOLE ID\nSPPFKNO  DS    CL2                      PFK NUMBER\nSPCONV   DS    CL2                      CONVERSATIONAL - 'Y' OR 'N'\nSPDATA   DS    CL108                    PFK DATA\n         DS    CL10\n*\n*  SYSPUNCH RECORD BUFFER\n*\nPUNCHBUF DS    CL80\n*\n*  CONSTANTS\n*\nONE      DC    H'1'\nCONASID  EQU   7\nPFKLEN   EQU   110                      LENGTH OF A PFK ENTRY\n*\n*  DATA SET CONTROL BLOCKS\n*\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GL,EODAD=EOFIN,DSORG=PS\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,LRECL=133\nSYSPUNCH DCB   DDNAME=SYSPUNCH,MACRF=PM,DSORG=PS,RECFM=FB,LRECL=80\n*\n*  DSECTS\n*\n         CVT   DSECT=YES\n         IEECUCM FORMAT=NEW\n         IEECRDCM\n*\n         END   PFKCARDS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHONBRWS": {"ttr": 11781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xfb\\x00\\xfb\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 251, "newlines": 251, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'BROWSE DELUXE PHONE LIST'\n*        REGISTER USAGE:\n*              R0\n*              R1   STANDARD PARAMETER PASSING\n*              R2\n*              R3\n*              R4\n*              R5\n*              R6\n*              R7\n*              R8\n*              R9\n*              R10\n*              R11\n*              R12  PROGRAM BASE 1\n*              R13  SAVE AREA POINTER\n*              R14  RETURN ADDRESS\n*              R15\nPHONBRWS CSECT\n         SAVE  (14,12),,PHONBRWS_BROWSE_DELUXE_PHONE_LIST_&SYSDATE_&SYSX\n               TIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING PHONBRWS,R12             TELL ASSEMBLER\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n* END OF PROLOG                         SAVE AREA\n*        PRINT NOGEN\n         ISPCALL ('CONTROL','DISPLAY','REFRESH'),WKAREA=PARAMS,        X\n               EPADDR=ISPADDR\n         ISPCALL ('CONTROL','SPLIT','ENABLE')\n*0070068ISPEXEC  CONTROL ERRORS   RETURN\n         ISPCALL ('VDEFINE',VARLIST1,PLANT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST2,FIRSTAID,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST3,EXTENS,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST4,PAGENUM,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST5,NAME,'CHAR',40)\n         ISPCALL ('VDEFINE',VARLIST6,EXCLUDE,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST7,BUDGDEPT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST8,SUPFLAG,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLISTB,PHONORD,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLISTC,PHONSTR,'CHAR',10)\n         ISPCALL ('VDEFINE',VARLISTD,ZERRMSG,'CHAR',8)\n         ISPCALL ('VDEFINE',VARLISTE,SORTORD,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLISTF,SAVESTR,'CHAR',10)\n         ISPCALL ('TBOPEN','PHONETAB','NOWRITE','PHNTLIB')\n         B     CKOPEN(R15)\nCKOPEN   EQU   *                      ERROR OPENING PHONE TABLE?\n         B     OPENOK                 00\n         B     OPENOK                 04\n         B     CTRL                   08 TABLE DOES NOT EXIST\n         B     CTRL                   12 TABLE IN USE; ENQ FAILED\n         B     CTRL                   16 LIBRARY NOT ALLOCATED\n         B     CTRL                   20 SEVERE ERROR\nOPENOK   EQU   *                      NO ERRORS FOUND IN OPEN\n         MVC   EXTENS,=C'\u00a2\u00a2\u00a2\u00a2'\n         ISPCALL ('TBSCAN','PHONETAB','EXTENS','VARLISTE')\n         B     CKTBSCN1(R15)\nCKTBSCN1 EQU   *\n         B     DELSORT                00\n         B     DELSORT                04\n         B     NOSORT                 08 ROW DOES NOT EXIST, NO MATCH\n*                                        FOUND; CRP SET TO TOP\n         B     CTRL                   12 TABLE IS NOT OPEN\n         B     ENDTABLE               16 DATA TRUNCATION, OR\n*                                        INSUFFICIENT SPACE PROVIDED\n*                                        FOR ALL EXTENSION VAR NAMES\n         B     ENDTABLE               20 SEVERE ERROR\nNOSORT   EQU   *\n         MVI   SORTORD,C' '\n         B     TOP\nDELSORT  EQU   *\n         ISPCALL ('TBDELETE','PHONETAB')\n         BAL   R10,CKTBDLTE(R15)\nTOP      EQU   *\n         ISPCALL ('TBTOP','PHONETAB') POSITION TO TOP OF TABLE\n         BAL   R10,CKTBTOP(R15)\nSCANTAB  EQU   *\n         MVI   EXTENS,C' '\n         ISPCALL ('TBSCAN','PHONETAB','EXCLUDE',' ',' ',' ',' ',' ','NEX\n               ')\n         B     CKTBSCN2(R15)\nCKTBSCN2 EQU   *\n         B     CKEXCLUD               00\n         B     CKEXCLUD               04\n         B     EXCLDONE               08 ROW DOES NOT EXIST, NO MATCH\n*                                        FOUND; CRP SET TO TOP\n         B     CTRL                   12 TABLE IS NOT OPEN\n         B     ENDTABLE               16 DATA TRUNCATION, OR\n*                                        INSUFFICIENT SPACE PROVIDED\n*                                        FOR ALL EXTENSION VAR NAMES\n         B     ENDTABLE               20 SEVERE ERROR\nCKEXCLUD EQU  *\n         CLI   EXCLUDE,C'*'\n         BE    DELETE\n         B     SCANTAB\nDELETE   EQU   *\n         ISPCALL ('TBDELETE','PHONETAB')\n         BAL   R10,CKTBDLTE(R15)\n         B     SCANTAB\nEXCLDONE EQU   *\n         ISPCALL  ('VGET','(PHONORD,PHONSTR)','ASIS')\n         B     CKVGET(R15)\nCKVGET   EQU   *\n         B     GOODVGET               00\n         B     GOODVGET               04\n         B     ENDTABLE               08 VARIABLE NOT FOUND\n         B     GOODVGET               12\n         B     ENDTABLE               16 TRANSLATION ERROR OR DATA\n*                                        TRUNCATION\n         B     ENDTABLE               20 SEVERE ERROR\nGOODVGET EQU   *\n         CLI   PHONORD,C' '\n         BE    PHONORDN\n         B     CMPRORD\nPHONORDN EQU   *\n         MVI   PHONORD,C'N'\nCMPRORD  EQU   *\n         CLC   PHONORD,SORTORD\n         BE    SCAN\n         CLI   PHONORD,C'E'           DETERMINE SORTING ORDER\n         BE    SORTEXT\n         ISPCALL ('TBSORT','PHONETAB','(NAME,C,A,EXTENS,C,A)')\n         B     CKSORT(R15)\nSORTEXT  EQU   *\n         ISPCALL ('TBSORT','PHONETAB','(EXTENS,C,A,NAME,C,A)')\n         B     CKSORT(R15)\nCKSORT   EQU   *                      ERROR SORTING TABLE?\n         B     SCAN                   00\n         B     SCAN                   04\n         B     SCAN                   08\n         B     CTRL                   12 TABLE IS NOT OPEN\n         B     ENDTABLE               16 NUMERIC CONVERT ERROR\n         B     ENDTABLE               20 SEVERE ERROR\n***********************************************************************\nSCAN     EQU   *\n         CLC   PHONSTR,=C'          '   COMPARE PHONSTR TO SPACE\n         BE    DISPLAY                  PHONSTR NOT ENTERED\n         ISPCALL ('TBTOP','PHONETAB')   POSITION TO TOP (IN CASE\n*                                       ALREADY BEYOND PHONSTR IN\n*                                       TABLE)\n         BAL   R10,CKTBTOP(R15)\n         CLI   PHONORD,C'E'             SORTED BY EXTENSION?\n         BE    EXTORD                   YES\n         MVC   NAME(1),=C' '            SPACE OUT NAME\n         MVC   NAME+1(L'NAME-1),NAME\n         MVC   NAME(L'PHONSTR),PHONSTR  MOVE PHONSTR TO NAME\n         ISPCALL ('TBSCAN','PHONETAB','NAME',' ',' ',' ',' ',' ','GE')\n         B     CKTBSCAN(R15)\nEXTORD   EQU   *\n         MVC   EXTENS,PHONSTR\n         ISPCALL ('TBSCAN','PHONETAB','EXTENS',' ',' ',' ',' ',' ','GE'X\n               )\n         B     CKTBSCAN(R15)\nCKTBSCAN EQU   *\n         B     DISPLAY                00\n         B     DISPLAY                04\n         B     NOTFOUND               08 ROW DOES NOT EXIST, NO MATCH\n*                                        FOUND; CRP SET TO TOP\n         B     CTRL                   12 TABLE IS NOT OPEN\n         B     ENDTABLE               16 DATA TRUNCATION, OR\n*                                        INSUFFICIENT SPACE PROVIDED\n*                                        FOR ALL EXTENSION VAR NAMES\n         B     ENDTABLE               20 SEVERE ERROR\nNOTFOUND EQU   *\n         MVC   SAVESTR,PHONSTR\n         MVC   ZERRMSG,=CL8'PHN007  '\n         B     DISPLAY\n***********************************************************************\nDISPLAY  EQU   *\n         ISPCALL ('TBDISPL','PHONETAB','PHONBRWS',ZERRMSG)\n         MVC   ZERRMSG,=CL8'PHN000  '\n         B     CKTBDISP(R15)\nCKTBDISP EQU   *\n         B     SCAN                   00\n         B     SCAN                   04 THE ENTER KEY OR SCROLL\n*                                        COMMAND USED; ADDITIONAL\n*                                        DATA REMAINS TO BE STORED\n         B     ENDTABLE               08 END OR RETURN COMMAND ENTERED\n         B     ENDTABLE               12 TABLE IS NOT OPEN\n*                                        OR PANEL OR MESSAGE NOT FOUND\n         B     SCAN                   16\n         B     ENDTABLE               20 SEVERE ERROR\n***********************************************************************\nCKTBDLTE EQU   *\n         B     RETADDR                00\n         B     RETADDR                04\n         B     RETADDR                08 CRP AT TOP\n         B     CTRL                   12 TABLE IS NOT OPEN\n         B     RETADDR                16\n         B     ENDTABLE               20 SEVERE ERROR\n***********************************************************************\nCKTBTOP  EQU   *\n         B     RETADDR                00\n         B     RETADDR                04\n         B     RETADDR                08\n         B     CTRL                   12 TABLE IS NOT OPEN\n         B     RETADDR                16\n         B     ENDTABLE               20 SEVERE ERROR\n***********************************************************************\nRETADDR  BR    R10\n***********************************************************************\nENDTABLE EQU   *\n         ISPCALL ('TBEND','PHONETAB',' ',' ',' ','PHNTLIB')\nCTRL     EQU   *\n         ISPCALL ('CONTROL','SPLIT','ENABLE')\n         ISPCALL ('VRESET')\n         B     RETURN\n* BEGINNING OF EPILOG\nRETURN   EQU   *\n         ISPCALL ('SETMSG',ZERRMSG)\n         L     R13,SAVEAREA+4           LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)         RETURN TO OS, RC IN REG 15\n* END OF EPILOG\nISPADDR  DC    A(0)                  STORAGE FOR EP ADDRESS OF ISPLINK\nVARLIST1 DC    C'(PLANT)'\nVARLIST2 DC    C'(FIRSTAID)'\nVARLIST3 DC    C'(EXTENS)'\nVARLIST4 DC    C'(PAGENUM)'\nVARLIST5 DC    C'(NAME)'\nVARLIST6 DC    C'(EXCLUDE)'\nVARLIST7 DC    C'(BUDGDEPT)'\nVARLIST8 DC    C'(SUPFLAG )'\nVARLISTB DC    C'(PHONORD)'\nVARLISTC DC    C'(PHONSTR)'\nVARLISTD DC    C'(ZERRMSG)'\nVARLISTE DC    C'(SORTORD)'\nVARLISTF DC    C'(SAVESTR)'\n         CNOP  0,4                      ALIGNMENT\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nPARAMS   DC    10A(0)                   PARAMETER WORKAREA\n* TABLE VARIABLES:\nPLANT    DC    CL04' '                  BUILDING ABBR/PLANT NUMBER\nFIRSTAID DC    CL01' '                  FIRST AID FLAG\nEXTENS   DC    CL04' '                  EXTENSION NUMBER\nPAGENUM  DC    CL04' '                  PAGING NUMBER\nNAME     DC    CL40' '                  NAME/ROOM\nEXCLUDE  DC    CL01' '                  MIS035/MIS036 EXCLUSION FLAG\nBUDGDEPT DC    CL04' '                  BUDGET DEPARTMENT\nSUPFLAG  DC    CL01' '                  MIS077 SUPPRESSION FLAG\nSORTORD  DC    CL01' '                  SORTING ORDER OF TABLE\nPHONORD  DC    CL01' '                  ENTERED SORTING ORDER\nSAVEEXT  DC    CL04' '                  SAVED EXTENSION NUMBER FOR MSG\nSAVENAME DC    CL40' '                  SAVED NAME FOR MESSAGE\nPHONSTR  DC    CL10' '                  STARTING POINT\nSAVESTR  DC    CL10' '                    SAVED FOR NOT FOUND MESSAGE\nZERRMSG  DC    CL08'PHN000  '           ERROR MESSAGE ID\n***********************************************************************\n         EQUATE                         REGISTER EQUATES\n         END   PHONBRWS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHONDUMP": {"ttr": 11786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xce\\x00\\xce\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 206, "newlines": 206, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'CREATE SEQUENTIAL FILE FROM PHONE TABLE'\n*\n*        REGISTER USAGE:\n*              R0\n*              R1   STANDARD PARAMETER PASSING\n*              R2   HIGHEST RETURN CODE\n*              R3\n*              R4\n*              R5\n*              R6\n*              R7\n*              R8\n*              R9\n*              R10  RETURN ADDRESS WITHIN PROGRAM\n*              R11\n*              R12  PROGRAM BASE 1\n*              R13  SAVE AREA POINTER\n*              R14  RETURN ADDRESS\n*              R15\nPHONDUMP CSECT\n         SAVE  (14,12),,PHONDUMP_CREATE_SEQUENTIAL_FILE_FROM_PHONE_TABLX\n               E_&SYSDATE_&SYSTIME\n         LR    R12,R15                ESTABLISH R12 AS BASE REG\n         USING PHONDUMP,R12           TELL ASSEMBLER\n         ST    R13,SAVEAREA+4         SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                 SAVE IT IN R6\n         LA    R13,SAVEAREA           POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)              STORE OUR SAVEAREA ADDR IN OS\n         SR    R2,R2                  ZERO R2\n         SR    R15,R15                ZERO R15\n         ZAP   COUNT,=P'0'            ZERO COUNT OF O271C RECORDS\n* END OF PROLOG                       SAVE AREA\n*        PRINT NOGEN\n         OPEN  (SYSOUT,(OUTPUT),O271CFIL,(OUTPUT))\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         ISPCALL ('CONTROL','NONDISPL','ENTER'),WKAREA=PARAMS,         X\n               EPADDR=ISPADDR\n         ISPCALL ('CONTROL','ERRORS','RETURN')\n         ISPCALL ('VDEFINE',VARLIST1,PLANT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST2,FIRSTAID,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST3,EXTENS,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST4,PAGENUM,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST5,NAME,'CHAR',40)\n         ISPCALL ('VDEFINE',VARLIST6,EXCLUDE,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST7,BUDGDEPT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST8,SUPFLAG,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLISTA,ZERRMSG,'CHAR',8)\n         ISPCALL ('VDEFINE',VARLISTB,ZERRSM,'CHAR',24)\n         ISPCALL ('VDEFINE',VARLISTC,ZERRLM,'CHAR',80)\n         ISPCALL ('TBOPEN','PHONETAB','NOWRITE','PHNTLIB')\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKOPEN(R15)\nCKOPEN   EQU   *                      ERROR OPENING PHONE TABLE?\n         B     OPENOK                 00\n         B     OPENOK                 04\n         B     NOTFOUND               08 TABLE DOES NOT EXIST\n         B     ERROR1                 12 TABLE IN USE; ENQ FAILED\n         B     ERROR1                 16 LIBRARY NOT ALLOCATED\n         B     ERROR1                 20 SEVERE ERROR\nOPENOK   EQU   *                      NO ERRORS FOUND IN OPEN\n         ISPCALL ('TBTOP','PHONETAB') POSITION TO TOP OF TABLE\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKTBTOP(R15)\nCKTBTOP  EQU   *                      ERROR POSITIONING TO TOP?\n         B     TBTOPOK                00\n         B     TBTOPOK                04\n         B     TBTOPOK                08\n         B     ERROR1                 12 TABLE IS NOT OPEN\n         B     TBTOPOK                16\n         B     ERROR2                 20 SEVERE ERROR\nTBTOPOK  EQU   *\n         ISPCALL ('TBSKIP','PHONETAB') POSITION TO NEXT TABLE RECORD\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKSKIP1(R15)\nCKSKIP1  EQU   *                      ERROR POSITIONING TO NEXT RECORD?\n         B     NEXTREC                00\n         B     NEXTREC                04\n         B     EMPTY                  08 END OF TABLE\n         B     ERROR1                 12 TABLE NOT OPEN\n         B     ERROR2                 16 DATA TRUNCATION OR\n*                                        INSUFFICIENT SPACE PROVIDED\n*                                        FOR ALL EXTENSION VAR NAMES\n         B     ERROR2                 20 SEVERE ERROR\nNEXTREC  EQU   *\n         MVC   O271CREC,O271CREC-1    CLEAR OUTPUT RECORD\n         ISPCALL ('TBGET','PHONETAB') ACCESS TABLE RECORD\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKGET(R15)\nCKGET    EQU   *                      ERROR ACCESSING TABLE RECORD?\n         B     WRITE                  00\n         B     WRITE                  04\n         B     WRITE                  08 CRP AT TOP\n         B     ERROR1                 12 TABLE NOT OPEN\n         B     ERROR2                 16 DATA TRUNCATION OR\n*                                        INSUFFICIENT SPACE PROVIDED\n*                                        FOR ALL EXTENSION VAR NAMES\n         B     ERROR2                 20 SEVERE ERROR\nWRITE    EQU   *\n         CLC   EXTENS,=C'\u00a2\u00a2\u00a2\u00a2'\n         BE    SKIP\n         PUT   O271CFIL,O271CREC      WRITE O271C RECORD\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         AP    COUNT,=P'1'            ADD 1 TO COUNT OF O271C RECORDS\nSKIP     EQU   *\n         ISPCALL ('TBSKIP','PHONETAB') POSITION TO NEXT TABLE RECORD\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKSKIP2(R15)\nCKSKIP2  EQU   *                      ERROR POSITIONING TO NEXT RECORD?\n         B     NEXTREC                00\n         B     NEXTREC                04\n         B     NOERROR                08 END OF TABLE\n         B     ERROR1                 12 TABLE NOT OPEN\n         B     ERROR2                 16 DATA TRUNCATION OR\n*                                        INSUFFICIENT SPACE PROVIDED\n*                                        FOR ALL EXTENSION VAR NAMES\n         B     ERROR2                 20 SEVERE ERROR\n***********************************************************************\nCHECKRC  EQU   *                      SAVE HIGHEST RETURN CODE\n         CR    R2,R15                 COMPARE R15 TO SAVED RC\n         BNHR  R10                    BRANCH IF R2 NOT > R15\n         LR    R2,R15                 SAVE HIGHER RETURN CODE\n         BR    R10                    RETURN\n***********************************************************************\n         CNOP  0,4                    ALIGNMENT\nNOTFOUND EQU   *\n         PUT   SYSOUT,=CL132'PHONE TABLE DOES NOT EXIST'\n         PUT   SYSOUT,ERRMSG\n         B     CLOSFILE\nEMPTY    EQU   *\n         PUT   SYSOUT,=CL132'PHONE TABLE IS EMPTY'\n         PUT   SYSOUT,ERRMSG\n         B     CLOSETBL\nERROR1   EQU   *\n         PUT   SYSOUT,ERRMSG\n         B     CLOSFILE\nERROR2   EQU   * *\n         PUT   SYSOUT,ERRMSG\n         B     CLOSETBL\nNOERROR  EQU   *\n         PUT   SYSOUT,=CL132'END OF PHONE TABLE - NO ERRORS'\n         ED    FORMAT,COUNT\n         PUT   SYSOUT,COUNTMSG\n         B     CLOSETBL\nCOUNT    DS    P'12345'               COUNT OF O271C RECORDS\nCOUNTMSG DS    0CL132\nFORMAT   DC    X'4020206B202021'\n         DC    C' RECORDS WRITTEN TO THE O271C FILE'\n         DC    CL91' '\n         CNOP  0,4                    ALIGNMENT\nCLOSETBL EQU   *\n         ISPCALL ('TBCLOSE','PHONETAB',' ',' ',' ','PHNTLIB')\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\nCLOSFILE EQU   *\n         CLOSE   (SYSOUT,,O271CFIL)\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         ISPCALL ('VRESET')\n         B     RETURN\n* BEGINNING OF EPILOG\nRETURN   EQU   *\n         L     R13,SAVEAREA+4         LOAD OS SAVE AREA ADDR TO R13\n         LR    R15,R2                 MOVE HIGHEST RETURN CODE TO R15\n         RETURN (14,12),RC=(15)       RETURN TO OS, RC IN REG 15\n* END OF EPILOG\nISPADDR  DC    A(0)                   STORAGE FOR EP ADDRESS OF ISPLINK\nVARLIST1 DC    C'(PLANT)'\nVARLIST2 DC    C'(FIRSTAID)'\nVARLIST3 DC    C'(EXTENS)'\nVARLIST4 DC    C'(PAGENUM)'\nVARLIST5 DC    C'(NAME)'\nVARLIST6 DC    C'(EXCLUDE)'\nVARLIST7 DC    C'(BUDGDEPT)'\nVARLIST8 DC    C'(SUPFLAG )'\nVARLISTA DC    C'(ZERRMSG )'\nVARLISTB DC    C'(ZERRSM  )'\nVARLISTC DC    C'(ZERRLM  )'\n         CNOP  0,4                    ALIGNMENT\nSAVEAREA DC    18F'0'                 OUR SAVE AREA\nPARAMS   DC    7A(0)                  PARAMETER WORKAREA\n         DC    CL01' '\nO271CREC DS    0CL80\nPLANT    DC    CL04' '                BUILDING ABBR/PLANT NUMBER\n         DC    CL01' '\nFIRSTAID DC    CL01' '                FIRST AID FLAG\n         DC    CL01' '\nEXTENS   DC    CL04' '                EXTENSION NUMBER\n         DC    CL02' '\nPAGENUM  DC    CL04' '                PAGING NUMBER\n         DC    CL02' '\nNAME     DC    CL40' '                NAME/ROOM\nEXCLUDE  DC    CL01' '                MIS035/MIS036 EXCLUSION FLAG\nBUDGDEPT DC    CL04' '                BUDGET DEPARTMENT\nSUPFLAG  DC    CL01' '                MIS077 SUPPRESSION FLAG\n         DC    CL15' '\nERRMSG   DS    0CL132\nZERRMSG  DC    CL8' '\n         DC    CL2' '\nZERRSM   DC    CL24' '\n         DC    CL2' '\nZERRLM   DC    CL96' '\nO271CFIL DCB   DDNAME=O271C,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80,     X\n               BLKSIZE=6160\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=132,   X\n               BLKSIZE=6204\n***********************************************************************\n         EQUATE                       REGISTER EQUATES\n         END   PHONDUMP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHONEDIT": {"ttr": 12035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02;\\x02;\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 571, "newlines": 571, "modlines": 0, "user": "DELUXE"}, "text": "***********************************************************************\n* BECAUSE OF A BUG IN ISPF, THIS PROGRAM WILL ONLY HANDLE 1 SELECTED\n* COMMAND AT A TIME.  FIND '%' TO LOCATE BRANCHES AROUND CODE THAT WAS\n* SUPPOSE TO HANDLE MULTIPLE SELECTIONS.\n***********************************************************************\n* SAVE TABLE AFTER N SUCCESSFUL UPDATES?\n***********************************************************************\n         TITLE 'EDIT DELUXE PHONE LIST'\n*        REGISTER USAGE:\n*              R0\n*              R1   STANDARD PARAMETER PASSING\n*              R2\n*              R3\n*              R4\n*              R5\n*              R6\n*              R7\n*              R8\n*              R9\n*              R10\n*              R11  PROGRAM BASE 2\n*              R12  PROGRAM BASE 1\n*              R13  SAVE AREA POINTER\n*              R14  RETURN ADDRESS\n*              R15\nPHONEDIT CSECT\n         SAVE  (14,12),,PHONEDIT_EDIT_DELUXE_PHONE_LIST_&SYSDATE_&SYSTIX\n               ME\n         LR    R12,R15                ESTABLISH R12 AS BASE REG\n         USING PHONEDIT,R12,R11       TELL ASSEMBLER\n         LA    R11,4095(R12)          R11 SECONDARY BASE\n         LA    R11,1(R11)             4096 + R12\n         ST    R13,SAVEAREA+4         SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                 SAVE IT IN R6\n         LA    R13,SAVEAREA           POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)              STORE OUR SAVEAREA ADDR IN OS\n* END OF PROLOG                       SAVE AREA\n         PRINT NOGEN\n         ISPCALL ('CONTROL','DISPLAY','REFRESH'),WKAREA=PARAMS,        X\n               EPADDR=ISPADDR\n         ISPCALL ('CONTROL','SPLIT','DISABLE')\n         ISPCALL ('CONTROL','ERRORS','RETURN')\n         ISPCALL ('VDEFINE',VARLIST1,PLANT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST2,FIRSTAID,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST3,EXTENS,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST4,PAGENUM,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST5,NAME,'CHAR',40)\n         ISPCALL ('VDEFINE',VARLIST6,EXCLUDE,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST7,BUDGDEPT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST8,SUPFLAG,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST9,LCMD,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLISTA,ZCMD,'CHAR',48)\n         ISPCALL ('VDEFINE',VARLISTB,PHONORD,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLISTC,PHONSTR,'CHAR',10)\n         ISPCALL ('VDEFINE',VARLISTD,ZERRMSG,'CHAR',8)\n         ISPCALL ('VDEFINE',VARLISTE,SORTORD,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLISTF,ZTDSELS,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLISTG,SAVEEXT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLISTH,SAVENAME,'CHAR',40)\n         ISPCALL ('VDEFINE',VARLISTI,POSITION,'CHAR',8)\n         ISPCALL ('VDEFINE',VARLISTJ,ROWID,'CHAR',8)\n         ISPCALL ('VDEFINE',VARLISTK,SAVESTR,'CHAR',10)\n         ISPCALL ('VDEFINE',VARLISTL,LNAME,'CHAR',20)\n         ISPCALL ('VDEFINE',VARLISTM,FNAME,'CHAR',20)\n         ISPCALL ('TBOPEN','PHONETAB','WRITE','PHNTLIB')\n         B     CKOPEN(R15)\nCKOPEN   EQU   *                      CHECK RETURN CODE AFTER OPEN\n         B     GOODOPEN                 00\n         B     GOODOPEN                 04\n         B     CTRL                     08 TABLE DOES NOT EXIST\n         B     CTRL                     12 TABLE IN USE; ENQ FAILED\n         B     CTRL                     16 LIBRARY NOT ALLOCATED\n         B     CTRL                     20 SEVERE ERROR\nGOODOPEN EQU   *                      NO ERROR FOUND OPENING TABLE\n         MVC   EXTENS,=C'\u00a2\u00a2\u00a2\u00a2'        MOVE CENT SIGNS TO EXTENS\n         ISPCALL ('TBSCAN','PHONETAB','EXTENS','VARLISTE')\n*                                     SCAN FOR SORTING RECORD\n         B     CKTBSCN1(R15)\nCKTBSCN1 EQU   *                      CHECK RETURN CODE AFTER SCAN\n         B     DELSORT                  00\n         B     DELSORT                  04\n         B     TBTOP1OK                 08 SORTING RECORD NOT FOUND;\n*                                          CRP SET TO TOP\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     ENDTABLE                 16 DATA TRUNCATION, OR\n*                                          INSUFFICIENT SPACE PROVIDED\n*                                          FOR ALL EXTENSION VAR NAMES\n         B     ENDTABLE                 20 SEVERE ERROR\nDELSORT  EQU   *                      DELETE THE SORTING RECORD\n         ISPCALL ('TBDELETE','PHONETAB')\n         B     CKTBDLT1(R15)\nCKTBDLT1 EQU   *                      CHECK RETURN CODE AFTER DELETE\n         B     GOODDLT1                 00\n         B     GOODDLT1                 04\n         B     GOODDLT1                 08 CRP AT TOP\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     GOODDLT1                 16\n         B     ENDTABLE                 20 SEVERE ERROR\nGOODDLT1 EQU   *                      DELETE OK\n         ISPCALL ('TBTOP','PHONETAB') POSITION TO TOP OF TABLE\n         B     CKTBTOP1(R15)\nCKTBTOP1 EQU   *                      CHECK RETURN CODE\n         B     TBTOP1OK                 00\n         B     TBTOP1OK                 04\n         B     TBTOP1OK                 08\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     TBTOP1OK                 16\n         B     ENDTABLE                 20 SEVERE ERROR\nTBTOP1OK EQU   *                      GET PHONORD AND PHONSTR\n         ISPCALL  ('VGET','(PHONORD,PHONSTR)','ASIS')\n         B     CKVVGET(R15)\nCKVVGET  EQU   *                      CHECK RETURN CODE AFTER VGET\n         B     GOODVGET                 00\n         B     GOODVGET                 04\n         B     CLOSETBL                 08 VARIABLE NOT FOUND\n         B     GOODVGET                 12\n         B     CLOSETBL                 16 TRANSLATION ERROR OR DATA\n*                                        TRUNCATION\n         B     ENDTABLE                 20 SEVERE ERROR\nGOODVGET EQU   *\n         CLI   PHONORD,C' '           IS PHONORD SPACE?\n         BNE   CMPRORD                  NO\n         MVI   PHONORD,C'N'             YES, REPLACE WITH 'N'\nCMPRORD  EQU   *\n         CLC   PHONORD,SORTORD        IS TABLE IN DESIRED ORDER?\n         BE    SCAN                     YES, SKIP SORT ROUTINES\n         MVC   SORTORD,PHONORD          NO, SAVE FOR NEW SORT RECORD\n         CLI   PHONORD,C'E'           WANT IN EXTENSION ORDER?\n         BE    SORTEXT                  YES\n         ISPCALL ('TBSORT','PHONETAB','(NAME,C,A,EXTENS,C,A)')\n         B     CKSORT(R15)\nSORTEXT  EQU   *\n         ISPCALL ('TBSORT','PHONETAB','(EXTENS,C,A,NAME,C,A)')\n         B     CKSORT(R15)\nCKSORT   EQU   *                      CHECK RETURN CODE AFTER SORT\n         B     SCAN                     00\n         B     SCAN                     04\n         B     SCAN                     08\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     ENDTABLE                 16 NUMERIC CONVERT ERROR\n         B     ENDTABLE                 20 SEVERE ERROR\n***********************************************************************\nSCAN     EQU   *\n         CLC   PHONSTR,=C'          '   COMPARE PHONSTR TO SPACE\n         BE    DISPLAY                  PHONSTR NOT ENTERED\n         ISPCALL ('TBTOP','PHONETAB')   POSITION TO TOP IN CASE\n*                                       ALREADY BEYOND PHONSTR IN\n*                                       TABLE\n         B     CKTBTOP2(R15)\nCKTBTOP2 EQU   *                      CHECK RETURN CODE AFTER TOP\n         B     TBTOP2OK                 00\n         B     TBTOP2OK                 04\n         B     TBTOP2OK                 08\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     TBTOP2OK                 16\n         B     ENDTABLE                 20 SEVERE ERROR\nTBTOP2OK EQU   *\n         CLI   PHONORD,C'E'             SORTED BY EXTENSION?\n         BE    EXTORD                     YES\n         MVC   NAME(1),=C' '            SPACE OUT NAME\n         MVC   NAME+1(L'NAME-1),NAME\n         MVC   NAME(L'PHONSTR),PHONSTR  MOVE PHONSTR TO NAME\n         ISPCALL ('TBSCAN','PHONETAB','NAME',' ',' ',' ',' ',' ','GE')\n         B     CKTBSCAN(R15)\nEXTORD   EQU   *\n         MVC   EXTENS,PHONSTR\n         ISPCALL ('TBSCAN','PHONETAB','EXTENS',' ',' ',' ',' ',' ','GE'X\n               )\n         B     CKTBSCAN(R15)\nCKTBSCAN EQU   *                      CHECK RETURN CODE AFTER SCAN\n         B     DISPLAY                  00\n         B     DISPLAY                  04\n         B     NOTFOUND                 08 ROW DOES NOT EXIST, NO MATCH\n*                                          FOUND; CRP SET TO TOP\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     CLOSETBL                 16 DATA TRUNCATION, OR\n*                                          INSUFFICIENT SPACE PROVIDED\n*                                          FOR ALL EXTENSION VAR NAMES\n         B     ENDTABLE                 20 SEVERE ERROR\nNOTFOUND EQU   *\n         MVC   SAVESTR,PHONSTR\n         MVC   ZERRMSG,=CL8'PHN007  '\n         B     DISPLAY\n***********************************************************************\n         EJECT\n***********************************************************************\nNEXTCMD  EQU   *\n         CLC   ZTDSELS,=C'0001'       1 LINE SELECTED?\n         BE    CKISRT                   YES\n         MVI   LCMD,C' '\n         B     CKISRT                 % BRANCH AROUND CODE TO\n*                                     % HANDLE MULTIPLE SELECTIONS\n         ISPCALL ('CONTROL','DISPLAY','RESTORE')\n         ISPCALL ('TBDISPL','PHONETAB',' ',' ',' ',' ',' ',' ','POSITIOX\n               N','ROWID')\n         B     CKTBDISP(R15)\nCKISRT   EQU   *\n         CLI   SAVEISRT,C'I'          'I' ENTERED WITH LCMDS?\n         BNE   DISPLAY                  NO\n         MVI   SAVEISRT,C' '            YES, SPACE SAVEISRT\n         MVI   LCMD,C'I'              MOVE 'I' FOR PANEL HEADING\n         B     INSERT\nDISPLAY  EQU   *\n         MVI   LCMD,C' '              SPACE LINE COMMAND\n         ISPCALL ('TBDISPL','PHONETAB','PHONEDIT',ZERRMSG,' ',' ',' ','X\n                ','POSITION','ROWID')\n         MVC   ZERRMSG,=CL8'PHN000  '\n         B     CKTBDISP(R15)\nCKTBDISP EQU   *                      CHECK RETURN CODE AFTER DISPLAY\n         B     CKZCMD                   00\n         B     ADDLDATA                 04 THE ENTER KEY OR SCROLL\n*                                          COMMAND USED; ADDITIONAL\n*                                          DATA REMAINS TO BE STORED\n         B     CLOSETBL                 08 END OR RETURN ENTERED\n         B     CLOSETBL                 12 TABLE IS NOT OPEN OR PANEL\n*                                          OR MESSAGE NOT FOUND\n         B     CKZCMD                   16\n         B     ENDTABLE                 20 SEVERE ERROR\nADDLDATA EQU   *                      SAVE TBDISPL\n         B     CKZCMD                 % BRANCH AROUND CODE TO\n*                                     % HANDLE MULTIPLE SELECTIONS\n         ISPCALL ('CONTROL','DISPLAY','SAVE')\n         B     CKZCMD\nCKZCMD   EQU   *\n         CLC   SAVE,ZCMD              'SAVE' PRIMARY COMMAND?\n         BNE   CHKZCMD0                 NO\n         BAL   R10,TBSAVE               YES, GO SAVE TABLE\nCHKZCMD0 EQU   *\n         CLI   ZCMD,C'I'              'I' ENTERED AS PRIMARY COMMAND?\n         BNE   LINECMD                  NO\n         MVI   SAVEISRT,C'I'            YES, SAVE IT\n         MVI   ZCMD,C' '              SPACE ZCMD\nLINECMD  EQU   *\n         CLC   ZTDSELS,=C'0000'\n         BE    CKINSERT\n         CLI   LCMD,C'I'              'I' ENTERED AS LINE COMMAND?\n         BE    INSERT\n         CLI   LCMD,C'D'              'D' ENTERED AS LINE COMMAND?\n         BE    DELETE\n         CLI   LCMD,C'C'              'C' ENTERED AS LINE COMMAND?\n         BE    CHANGE\nCKINSERT EQU   *\n         CLI   SAVEISRT,C'I'          'I' ENTERED AS PRIMARY COMMAND?\n         BNE   SCAN\n         MVI   SAVEISRT,C' '\n         MVI   LCMD,C'I'\n         B     INSERT\n***********************************************************************\n         EJECT\n***********************************************************************\n***************** INSERT ROW ******************************************\n***********************************************************************\nINSERT   EQU   *\n         MVI   PLANT,C' '             SPACE OUT ALL FIELDS\n         MVC   PLANT+1(L'PLANT-1),PLANT\n         MVI   FIRSTAID,C' '\n         MVI   EXTENS,C' '\n         MVC   EXTENS+1(L'EXTENS-1),EXTENS\n         MVI   PAGENUM,C' '\n         MVC   PAGENUM+1(L'PAGENUM-1),PAGENUM\n         MVI   NAME,C' '\n         MVC   NAME+1(L'NAME-1),NAME\n         MVI   EXCLUDE,C' '\n         MVI   BUDGDEPT,C' '\n         MVC   BUDGDEPT+1(L'BUDGDEPT-1),BUDGDEPT\n         MVI   SUPFLAG,C' '\n         ISPCALL ('DISPLAY','PHONEADD',ZERRMSG)\n         B     CKDISPI(R15)\nCKDISPI  EQU   *                      CHECK RETURN CODE AFTER DISPLAY\n         B     DISPIOK                  00\n         B     DISPIOK                  04\n         B     IGNOREI                  08 END OR RETURN ENTERED\n         B     CLOSETBL                 12 PANEL, MESSAGE, OR CURSOR\n*                                          FIELD COULD NOT BE FOUND\n         B     CLOSETBL                 16 TRANSLATION ERROR OR DATA\n*                                          TRUNCATION\n         B     ENDTABLE                 20 SEVERE ERROR\nDISPIOK  EQU   *\n         MVC   SAVEEXT,EXTENS\n         MVC   SAVENAME,NAME\n         LA    R4,NAME                  R4 - INDEX THROUGH NAME\n         LA    R6,40                    R6 - MAXIMUM LENGTH OF NAME\nDISPI20  EQU   *\n         CLC   0(1,R4),COMMA            THIS A NAME?\n         BE    DISPI30                  YES, EXTRACT LAST NAME\n         LA    R4,1(R4)                 INCREMENT R4\n         BCT   R6,DISPI20               CHECK NEXT CHARACTER\n         B     DISPI80                  NOT A NAME; ASSUME ROOM\nDISPI30  EQU   *\n         LA    R4,NAME                  R4 - INDEX THROUGH NAME\n         LA    R5,LNAME                 R5 - INDEX THROUGH LAST NAME\n         LA    R6,20                    R6 - MAXIMUM LENGTH OF LNAME\nDISPI40  EQU   *\n         CLC   0(1,R4),COMMA            END OF LAST NAME?\n         BE    DISPI50                  YES, EXTRACT FIRST NAME\n         MVC   0(1,R5),0(R4)            MOVE NAME TO LNAME\n         LA    R4,1(R4)                 INCREMENT R4\n         LA    R5,1(R5)                 INCREMENT R5\n         BCT   R6,DISPI40               GET NEXT CHARACTER\nDISPI50  EQU   *\n         LA    R4,2(R4)                 INCREMENT R4 PAST COMMA\n         LA    R5,FNAME                 R5 - INDEX THROUGH FNAME\n         LA    R6,20                    R6 - MAXIMUM LENGTH OF FNAME\nDISPI60  EQU   *\n         CLC   0(2,R4),SPACES           END OF FIRST NAME?\n         BE    DISPI70                  YES, ADD TO TABLE\n         CLC   0(1,R4),DASH             END OF FIRST NAME?\n         BE    DISPI70                  YES, ADD TO TABLE\n         MVC   0(1,R5),0(R4)            MOVE NAME TO FNAME\n         LA    R4,1(R4)                 INCREMENT R4\n         LA    R5,1(R5)                 INCREMENT R5\n         BCT   R6,DISPI60               GET NEXT CHARACTER\nDISPI70  EQU   *\n         ISPCALL ('TBADD','PHONETAB',NAMELST1,'ORDER')\n         B     CKTBADD(R15)\nDISPI80  EQU   *\n         MVC   LNAME,ROOM              ROOM IDENTIFICATION\n         ISPCALL ('TBADD','PHONETAB',NAMELST2,'ORDER')\n         B     CKTBADD(R15)\nCKTBADD  EQU   *                      CHECK RETURN CODE AFTER ADD\n         B     GOODISRT                 00\n         B     GOODISRT                 04\n         B     GOODISRT                 08 ROW WITH KEY ALREADY EXISTS\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     GOODISRT                 16\n         B     ENDTABLE                 20 SEVERE ERROR\nGOODISRT EQU   *\n         CLC   SAVE,ZCMD               SAVE TABLE NOW?\n         BNE   DISPI10                 NO, CONTINUE\n         BAL   R10,TBSAVE              YES, GO SAVE TABLE\nDISPI10  EQU   *\n         MVC   ZERRMSG,=CL8'PHN005  '\n         B     NEXTCMD                BRANCH TO CHECK NEXT CMD\nIGNOREI  EQU   *\n         MVC   ZERRMSG,=CL8'PHN006  '\n         B     NEXTCMD\n***********************************************************************\n         EJECT\n***********************************************************************\n***************** CHANGE ROW ******************************************\n***********************************************************************\nCHANGE   EQU   *\n         MVC   OLDEXT,EXTENS\n         MVC   OLDNAME,NAME\n         ISPCALL ('DISPLAY','PHONEADD',ZERRMSG)\n         MVC   SAVEEXT,OLDEXT\n         MVC   SAVENAME,OLDNAME\n         B     CKDISPC(R15)\nCKDISPC  EQU   *                      CHECK RETURN CODE AFTER DISPLAY\n         B     DISPCOK                  00\n         B     DISPCOK                  04\n         B     IGNOREC                  08 END OR RETURN ENTERED\n         B     CLOSETBL                 12 PANEL, MESSAGE, OR CURSOR\n*                                          FIELD COULD NOT BE FOUND\n         B     CLOSETBL                 16 TRANSLATION ERROR OR DATA\n*                                          TRUNCATION\n         B     ENDTABLE                 20 SEVERE ERROR\nDISPCOK  EQU   *\n         LA    R4,NAME                  R4 - INDEX THROUGH NAME\n         LA    R6,40                    R6 - MAXIMUM LENGTH OF NAME\nDISPC20  EQU   *\n         CLC   0(1,R4),COMMA            THIS A NAME?\n         BE    DISPC30                  YES, EXTRACT LAST NAME\n         LA    R4,1(R4)                 INCREMENT R4\n         BCT   R6,DISPC20               CHECK NEXT CHARACTER\n         B     DISPC80                  NOT A NAME; ASSUME ROOM\nDISPC30  EQU   *\n         LA    R4,NAME                  R4 - INDEX THROUGH NAME\n         LA    R5,LNAME                 R5 - INDEX THROUGH LAST NAME\n         LA    R6,20                    R6 - MAXIMUM LENGTH OF LNAME\nDISPC40  EQU   *\n         CLC   0(1,R4),COMMA            END OF LAST NAME?\n         BE    DISPC50                  YES, EXTRACT FIRST NAME\n         MVC   0(1,R5),0(R4)            MOVE NAME TO LNAME\n         LA    R4,1(R4)                 INCREMENT R4\n         LA    R5,1(R5)                 INCREMENT R5\n         BCT   R6,DISPC40               GET NEXT CHARACTER\nDISPC50  EQU   *\n         LA    R4,2(R4)                 INCREMENT R4 PAST COMMA\n         LA    R5,FNAME                 R5 - INDEX THROUGH FNAME\n         LA    R6,20                    R6 - MAXIMUM LENGTH OF FNAME\nDISPC60  EQU   *\n         CLC   0(2,R4),SPACES           END OF FIRST NAME?\n         BE    DISPC70                  YES, ADD TO TABLE\n         CLC   0(1,R4),DASH             END OF FIRST NAME?\n         BE    DISPC70                  YES, ADD TO TABLE\n         MVC   0(1,R5),0(R4)            MOVE NAME TO FNAME\n         LA    R4,1(R4)                 INCREMENT R4\n         LA    R5,1(R5)                 INCREMENT R5\n         BCT   R6,DISPC60               GET NEXT CHARACTER\nDISPC70  EQU   *\n         ISPCALL ('TBPUT','PHONETAB',NAMELST1,'ORDER')\n         B     CKTBPUT(R15)\nDISPC80  EQU   *\n         MVC   LNAME,ROOM              ROOM IDENTIFICATION\n         ISPCALL ('TBPUT','PHONETAB',NAMELST2,'ORDER')\n         B     CKTBPUT(R15)\nCKTBPUT  EQU   *                      CHECK RETURN CODE AFTER TBPUT\n         B     GOODCHGE                 00\n         B     GOODCHGE                 04\n         B     GOODCHGE                 08 ROW WITH KEY ALREADY EXISTS\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     GOODCHGE                 16\n         B     ENDTABLE                 20 SEVERE ERROR\nGOODCHGE EQU   *\n         CLC   SAVE,ZCMD               SAVE TABLE NOW?\n         BNE   DISPC10                 NO, CONTINUE\n         BAL   R10,TBSAVE              YES, GO SAVE TABLE\nDISPC10  EQU   *\n         MVC   ZERRMSG,=CL8'PHN001  '\n         B     NEXTCMD\nIGNOREC  EQU   *\n         MVC   ZERRMSG,=CL8'PHN002  '\n         B     NEXTCMD\n***********************************************************************\n         EJECT\n***********************************************************************\n***************** DELETE ROW ******************************************\n***********************************************************************\nDELETE   EQU   *\n         MVC   OLDEXT,EXTENS\n         MVC   OLDNAME,NAME\n         ISPCALL ('DISPLAY','PHONEDEL',ZERRMSG,'ZCMD')\n         MVC   SAVEEXT,OLDEXT\n         MVC   SAVENAME,OLDNAME\n         B     CKDISPD(R15)\nCKDISPD  EQU   *                      CHECK RETURN CODE AFTER DISPLAY\n         B     DISPDOK                  00\n         B     DISPDOK                  04\n         B     SAVEREC                  08 END OR RETURN ENTERED\n         B     CLOSETBL                 12 PANEL, MESSAGE, OR CURSOR\n*                                          FIELD COULD NOT BE FOUND\n         B     CLOSETBL                 16 TRANSLATION ERROR OR DATA\n*                                          TRUNCATION\n         B     ENDTABLE                 20 SEVERE ERROR\nDISPDOK  EQU   *\n         CLC   SAVE,ZCMD               SAVE TABLE NOW?\n         BNE   DISPD10                 NO, CONTINUE\n         BAL   R10,TBSAVE              YES, GO SAVE TABLE\n         B     DELETE                  RE-DISPLAY PANEL\nDISPD10  EQU   *\n         CLC   ZCMD(6),=C'DELETE'\n         BNE   SAVEREC\n         ISPCALL ('TBDELETE','PHONETAB')\n         B     CKTBDLT2(R15)\nCKTBDLT2 EQU   *                      CHECK RETURN CODE AFTER DELETE\n         B     GOODDLTE                 00\n         B     GOODDLTE                 04\n         B     GOODDLTE                 08 CRP AT TOP\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     GOODDLTE                 16\n         B     ENDTABLE                 20 SEVERE ERROR\nGOODDLTE EQU   *\n         MVC   ZERRMSG,=CL8'PHN003  '\n         B     NEXTCMD\nSAVEREC  EQU   *\n         MVC   ZERRMSG,=CL8'PHN004  '\n         B     NEXTCMD\n***********************************************************************\n         EJECT\n***********************************************************************\n***********************************************************************\nENDTABLE EQU   *                      END TABLE WITHOUT SAVING\n         ISPCALL ('TBEND','PHONETAB')\n         B     CTRL\nCLOSETBL EQU   *\n         MVI   PLANT,C'\u00a2'             FILL TABLE FIELDS WITH\n         MVC   PLANT+1(L'PLANT-1),PLANT   CENT SIGNS\n         MVI   FIRSTAID,C'\u00a2'\n         MVI   EXTENS,C'\u00a2'\n         MVC   EXTENS+1(L'EXTENS-1),EXTENS\n         MVI   PAGENUM,C'\u00a2'\n         MVC   PAGENUM+1(L'PAGENUM-1),PAGENUM\n         MVI   NAME,C'\u00a2'\n         MVC   NAME+1(L'NAME-1),NAME\n         MVI   EXCLUDE,C'\u00a2'\n         MVI   BUDGDEPT,C'\u00a2'\n         MVC   BUDGDEPT+1(L'BUDGDEPT-1),BUDGDEPT\n         MVI   SUPFLAG,C'\u00a2'\n         ISPCALL ('TBADD','PHONETAB','SORTORD','ORDER')\n         B     CKTBADD2(R15)\nCKTBADD2 EQU   *                      CHECK RETURN CODE AFTER ADD\n         B     CLOSE                    00\n         B     CLOSE                    04\n         B     CLOSE                    08 ROW WITH KEY ALREADY EXISTS\n         B     CTRL                     12 TABLE IS NOT OPEN\n         B     CLOSE                    16\n         B     ENDTABLE                 20 SEVERE ERROR\nCLOSE    EQU   *\n         ISPCALL ('TBCLOSE','PHONETAB','REPLCOPY',' ',' ','PHNTLIB')\nCTRL     EQU   *\n         ISPCALL ('CONTROL','SPLIT','ENABLE')\n         ISPCALL ('VRESET')\n         B     RETURN\nTBSAVE   EQU   *\n         ISPCALL ('TBSAVE','PHONETAB','REPLCOPY',' ',' ','PHNTLIB')\n         BR    R10\n* BEGINNING OF EPILOG\nRETURN   EQU   *\n         ISPCALL ('SETMSG',ZERRMSG)\n         L     R13,SAVEAREA+4         LOAD OS SAVE AREA ADDR TO R13\n         RETURN (14,12),RC=(15)       RETURN TO OS, RC IN REG 15\n* END OF EPILOG\nISPADDR  DC    A(0)                   STORAGE FOR EP ADDRESS OF ISPLINK\nVARLIST1 DC    C'(PLANT)'\nVARLIST2 DC    C'(FIRSTAID)'\nVARLIST3 DC    C'(EXTENS)'\nVARLIST4 DC    C'(PAGENUM)'\nVARLIST5 DC    C'(NAME)'\nVARLIST6 DC    C'(EXCLUDE)'\nVARLIST7 DC    C'(BUDGDEPT)'\nVARLIST8 DC    C'(SUPFLAG )'\nVARLIST9 DC    C'(LCMD)'\nVARLISTA DC    C'(ZCMD)'\nVARLISTB DC    C'(PHONORD)'\nVARLISTC DC    C'(PHONSTR)'\nVARLISTD DC    C'(ZERRMSG)'\nVARLISTE DC    C'(SORTORD)'\nVARLISTF DC    C'(ZTDSELS)'\nVARLISTG DC    C'(SAVEEXT)'\nVARLISTH DC    C'(SAVENAME)'\nVARLISTI DC    C'(POSITION)'\nVARLISTJ DC    C'(ROWID)'\nVARLISTK DC    C'(SAVESTR)'\nVARLISTL DC    C'(LNAME)'\nVARLISTM DC    C'(FNAME)'\nNAMELST1 DS    0F\n         DC    F'02'                    NUMBER OF LIST ENTRIES\n         DC    F'00'\n         DC    CL8'LNAME'\n         DC    CL8'FNAME'\nNAMELST2 DS    0F\n         DC    F'01'                    NUMBER OF LIST ENTRIES\n         DC    F'00'\n         DC    CL8'LNAME'\n         CNOP  0,4                      ALIGNMENT\nSAVEAREA DC    18F'0'                   OUR SAVE AREA\nPARAMS   DC    11A(0)                   PARAMETER WORKAREA\nPLANT    DC    CL04' '                  BUILDING ABBR/PLANT NUMBER\nFIRSTAID DC    CL01' '                  FIRST AID FLAG\nEXTENS   DC    CL04' '                  EXTENSION NUMBER\nSAVEEXT  DC    CL04' '                  SAVED EXTENSION NUMBER FOR MSG\nOLDEXT   DC    CL04' '                  SAVED EXTENSION NUMBER FOR MSG\nPAGENUM  DC    CL04' '                  PAGING NUMBER\nNAME     DC    CL40' '                  NAME/ROOM\nLNAME    DC    CL20' '                  LAST NAME\nFNAME    DC    CL20' '                  FIRST NAME\nSAVENAME DC    CL40' '                  SAVED NAME FOR MESSAGE\nOLDNAME  DC    CL40' '                  SAVED NAME FOR MESSAGE\nEXCLUDE  DC    CL01' '                  MIS035/MIS036 EXCLUSION FLAG\nBUDGDEPT DC    CL04' '                  BUDGET DEPARTMENT\nSUPFLAG  DC    CL01' '                  MIS077 SUPPRESSION FLAG\nLCMD     DC    CL01' '                  LINE COMMAND\nZCMD     DC    CL48' '                  PRIMARY COMMAND\nSAVEISRT DC    CL01' '                  SAVED 'I' WHEN MULTIPLE SELECTS\nPHONORD  DC    CL01' '                  ENTERED SORTING ORDER\nSORTORD  DC    CL01' '                  ORDER TABLE IS SORTED IN\nPHONSTR  DC    CL10' '                  STARTING POINT\nSAVESTR  DC    CL10' '                    SAVED FOR NOT FOUND MESSAGE\nZERRMSG  DC    CL08'PHN000  '           ERROR MESSAGE ID\nCOMMA    DC    CL1','\nDASH     DC    CL1'-'\nSPACES   DC    CL2'  '\nROOM     DC    CL20'ROOM$$$$$$$$$$$$$$$$'\nSAVE     DC    CL4'SAVE'\nZTDSELS  DS    CL04'0000'               NUMBER LINE CMDS PENDING\nPOSITION DS    2F                       ROW NUMBER POINTER TO BY CRP\nROWID    DS    2F                       ORIGINAL ROW NUMBER\n***********************************************************************\n         EQUATE                         REGISTER EQUATES\n         END   PHONEDIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PHONINQ": {"ttr": 12291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03/\\x03/\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 815, "newlines": 815, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'PHONINQ - DELUXE PHONE LIST INQUIRY'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = PHONINQ                                        *\n*                                                                     *\n*        DESCRIPTIVE NAME = DELUXE PHONE LIST INQUIRY                 *\n*                                                                     *\n*        FUNCTION =                                                   *\n*              THIS PROGRAM WILL ALLOW USER TO DISPLAY ENTRIES        *\n*              FROM THE DELUXE PHONE TABLE (PHONETAB) BY SPECIFYING   *\n*              EITHER 'EXTENSION', 'PLANT', 'LASTNAME', 'FIRSTNAME',  *\n*              AND/OR 'ROOM'. THE VARIABLES, 'EXTENSION', 'PLANT',    *\n*              'LASTNAME', 'FIRSTNAME' AND 'ROOM', MAY BE INDICATED   *\n*              SPECIFICALLY (E.G., JOHNSON) OR GENERICALLY            *\n*              (E.G., JOH*).                                          *\n*                                                                     *\n*        OPERATION =                                                  *\n*              GETMAIN WORK AREAS                                     *\n*              DEFINE DIALOG VARIABLES                                *\n*              OPEN 'PHONETAB'                                        *\n*              SORT 'PHONETAB' BY NAME AND EXTENSION (IF NEEDED)      *\n*              SET CRP TO TOP OF 'PHONETAB'                           *\n*              DISPLAY SELECTION PANEL SO THAT USER MAY CHOOSE        *\n*                  SCAN ARGUMENTS                                     *\n*              PERFORM TBVCLEAR, TBSARG, TBSCAN AND TBTOP             *\n*              DISPLAY THE ROWS WHICH WERE SCANNED                    *\n*                  IF ENTER HIT, CONTINUE DISPLAY                     *\n*                  IF END HIT, FINISH                                 *\n*              CLOSE (DELETE) TEMPORARY TABLE                         *\n*              FREE GETMAIN'ED AREAS                                  *\n*              EXIT                                                   *\n*                                                                     *\n*        NOTES =                                                      *\n*                                                                     *\n*              REGISTER CONVENTIONS = STANDARD CONVENTIONS.           *\n*                  REGISTERS 0 - 11 = WORK REGISTERS                  *\n*                  REGISTER  12     = ADDRESSABILITY TO PHONINQ       *\n*                  REGISTER  13     = SAVE AREA REGISTER AND          *\n*                                     ADDRESSABILITY TO GETMAINED     *\n*                                     WORK AREA                       *\n*                  REGISTERS 14     = RETURN ADDRESS                  *\n*                  REGISTERS 15     = ENTRY POINT ADDRESS AND         *\n*                                     RETURN CODE REGISTER            *\n*                                                                     *\n*        MACROS =                                                     *\n*              GETMAIN, ISPCALL, FREEMAIN, RETURN                     *\n*                                                                     *\n*        ASSEMBLER OPTIONS = LIST,RENT                                *\n*                                                                     *\n*        LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,REFR        *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              03/04/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'PHONINQ - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'PHONINQ - INITIALIZATION SECTION'\nPHONINQ CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,PHONINQ_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING PHONINQ,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   PHNID_,DEFID            SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',DEFLIST1,EXTENS$,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST2,NAME$,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST3,LNAME$,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST4,FNAME$,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST5,EXTENS_,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST6,NAME_,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST7,LNAME_,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST8,FNAME_,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',DEFLIST9,SORTORD_,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFA                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFA    EQU   *\n         ISPCALL ('VDEFINE',DEFLISTA,PHNMSGS_,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFB                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFB    EQU   *\n         ISPCALL ('VDEFINE',DEFLISTB,PHNMSGL_,'CHAR',78)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBOPEN                  RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     PHNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     PHNERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     PHNERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN 'PHONETAB'\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   PHNID_,OPNID            SET ISPF DIALOG SERVICE\n*                                      SORT 'PHONETAB' TABLE\n         ISPCALL ('TBOPEN','PHONETAB','NOWRITE','PHNTLIB')\n         B     TBOPEN10(R15)           CHECK RETURN CODE\nTBOPEN10 EQU   *\n         B     TBTOP1                  RC = 00 (CONTINUE)\n         B     TBTOP1                  RC = 04 (CONTINUE)\n         B     PHNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - POINT TO TOP OF 'PHONETAB'\n***********************************************************************\nTBTOP1   EQU   *\n         MVC   PHNID_,TOPID            SET ISPF DIALOG SERVICE\n*                                      POSITION CRP AT TOP OF TABLE\n         ISPCALL ('TBTOP','PHONETAB')\n         B     TBTOP110(R15)           CHECK RETURN CODE\nTBTOP110 EQU   *\n         B     TBSCAN1                 RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     PHNERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - SEARCH 'PHONETAB'\n***********************************************************************\nTBSCAN1  EQU   *\n         MVC   PHNID_,SCNID            SET ISPF DIALOG SERVICE\n         MVC   EXTENS_,SORTREC         MOVE SORT REC ID TO EXTENS_\n         MVC   SORTORD_,ASTERICK       MOVE GENERIC ID TO SORTORD_\n*                                      SEARCH A TABLE\n         ISPCALL ('TBSCAN','PHONETAB','EXTENS','DEFLIST7')\n         B     TBSCN110(R15)           CHECK RETURN CODE\nTBSCN110 EQU   *\n         B     TBDELETE                RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     TBDELETE                RC = 08 (CONTINUE)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - DELETE SORT RECORD FROM 'PHONETAB'\n***********************************************************************\nTBDELETE EQU   *\n         MVC   PHNID_,DELID            SET ISPF DIALOG SERVICE\n*                                      DELETE A ROW FROM A TABLE\n         ISPCALL ('TBDELETE','PHONETAB')\n         B     TBDEL10(R15)            CHECK RETURN CODE\nTBDEL10  EQU   *\n         B     TBSORT                  RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBDELETE)\n         B     TBSORT                  RC = 08 (CONTINUE)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR TBDELETE)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - SORT 'PHONETAB' IF NEEDED\n***********************************************************************\nTBSORT   EQU   *\n         MVC   PHNID_,SRTID            SET ISPF DIALOG SERVICE\n         CLC   SORTORD_,XTENSION       NEED TO SORT BY 'NAME,EXTENS'?\n         BNE   DISPLAY                 NO, CONTINUE\n*                                      SORT 'PHONETAB' TABLE\n         ISPCALL ('TBSORT','PHONETAB','(NAME,C,A,EXTENS,C,A)')\n         B     TBSORT10(R15)           CHECK RETURN CODE\nTBSORT10 EQU   *\n         B     TBTOP2                  RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBSORT)\n         B     PHNERR08                RC = 08 (NOT VALID FOR TBSORT)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - POINT TO TOP OF 'PHONETAB'\n***********************************************************************\nTBTOP2   EQU   *\n         MVC   PHNID_,TOPID            SET ISPF DIALOG SERVICE\n*                                      POSITION CRP AT TOP OF TABLE\n         ISPCALL ('TBTOP','PHONETAB')\n         B     TBTOP210(R15)           CHECK RETURN CODE\nTBTOP210 EQU   *\n         B     DISPLAY                 RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     PHNERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION I - DISPLAY SELECTION PANEL\n***********************************************************************\nDISPLAY  EQU   *\n         MVC   PHNID_,DISID            SET ISPF DIALOG SERVICE\n         MVC   EXTENS$,VARINIT         INITIALIZE EXTENS$\n         MVC   PLANT$,VARINIT          INITIALIZE PLANT$\n         MVC   NAME$,VARINIT           INITIALIZE NAME$\n         MVC   LNAME$,VARINIT          INITIALIZE LNAME$\n         MVC   FNAME$,VARINIT          INITIALIZE FNAME$\n         MVC   PHNMSGS_,PHONERRS       INITIALIZE SHORT MESSAGE\n         MVC   PHNMSGL_,PHONERRL       INITIALIZE LONG MESSAGE\n         NI    DISPFLAG,FLAGINIT       INITIALIZE DISPLAY FLAGS\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','PHONINQ1')\n         B     DISPL10(R15)            CHECK RETURN CODE\nDISPL10  EQU   *\n         B     TBVCLEAR                RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR DISPLAY)\n         B     FINISH                  RC = 08 (CONTINUE)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR DISPLAY)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'PHONINQ - DISPLAY SECTION II'\n***********************************************************************\n*  DISPLAY SECTION II - CLEAR 'PHONETAB' VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   PHNID_,CLRID            SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR','PHONETAB')\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBSARG                  RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     PHNERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION II - DEFINE SCAN ARGUMENTS FOR 'PHONETAB'\n***********************************************************************\nTBSARG   EQU   *\n         MVC   PHNID_,ARGID            SET ISPF DIALOG SERVICE\n         MVC   EXTENS_,EXTENS$         SET EXTENS_ WITH SELECTION VALUE\n         MVC   PLANT_,PLANT$           SET PLANT_ WITH SELECTION VALUE\n         MVC   NAME_,NAME$             SET NAME_ WITH SELECTION VALUE\n         MVC   LNAME_,LNAME$           SET LNAME_ WITH SELECTION VALUE\n         MVC   FNAME_,FNAME$           SET FNAME_ WITH SELECTION VALUE\n         CLC   EXTENS_(3),SCANALL      SCAN FOR ALL EXTENSIONS?\n         BE    TBARG10                 YES, DON'T SET FLAG\n         OI    DISPFLAG,DISPEXTN       SET FLAG TO DISPLAY EXTENSION\nTBARG10  EQU   *\n         CLC   PLANT_(3),SCANALL       SCAN FOR ALL PLANTS?\n         BE    TBARG20                 YES, DON'T SET FLAG\n         OI    DISPFLAG,DISPPLNT       SET FLAG TO DISPLAY PLANT\nTBARG20  EQU   *\n         CLC   LNAME_(3),SCANALL       SCAN FOR ALL LAST NAMES?\n         BE    TBARG30                 YES, DON'T SET FLAG\n         OI    DISPFLAG,DISPLNAM       SET FLAG TO DISPLAY LAST NAME\nTBARG30  EQU   *\n         CLC   FNAME_(3),SCANALL       SCAN FOR ALL FIRST NAMES?\n         BE    TBARG40                 YES, DON'T SET FLAG\n         OI    DISPFLAG,DISPFNAM       SET FLAG TO DISPLAY FIRST NAME\nTBARG40  EQU   *\n         CLC   NAME_(3),SCANALL        SCAN FOR ALL ROOMS?\n         BE    TBARG50                 YES, DON'T SET FLAG\n         OI    DISPFLAG,DISPROOM       SET FLAG TO DISPLAY ROOM\nTBARG50  EQU   *\n         CLI   DISPFLAG,FLAGINIT       SCANALL FOR ALL VARIABLES?\n         BE    TBARGA0                 YES, SET UP FOR NORMAL SCAN\n         TM    DISPFLAG,DISPROOM       SCAN FOR ROOM?\n         BNO   TBARG70                 NO, CHECK FOR NAME SCAN\n         MVC   LNAME_,ROOM             SET LNAME_ WITH ROOM REC ID\n         CLC   ALL,NAME_               SHOULD ALL ROOMS BE DISPLAYED?\n         BNE   TBARG60                 NO, CONTINUE\n         MVC   NAME_(3),SCANALL        YES, SET UP GENERIC ALL SEARCH\nTBARG60  EQU   *\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG','PHONETAB',NAMELST2)\n         B     TBARGB0(R15)            CHECK RETURN CODE\nTBARG70  EQU   *\n         TM    DISPFLAG,DISPLNAM       SCAN FOR LAST NAME?\n         BO    TBARG80                 YES, SET UP FOR NAME SCAN\n         TM    DISPFLAG,DISPFNAM       SCAN FOR FIRST NAME?\n         BNO   TBARGA0                 NO, SET UP FOR NORMAL SCAN\nTBARG80  EQU   *\n         CLC   ALL,LNAME_              SHOULD ALL NAMES BE DISPLAYED?\n         BNE   TBARG90                 NO, CONTINUE\n         MVC   LNAME_(3),SCANALL       YES, SET UP GENERIC ALL SEARCH\n         MVC   FNAME_(3),SCANALL\nTBARG90  EQU   *\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG','PHONETAB',NAMELST1)\n         B     TBARGB0(R15)            CHECK RETURN CODE\nTBARGA0  EQU   *\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG','PHONETAB')\n         B     TBARGB0(R15)            CHECK RETURN CODE\nTBARGB0  EQU   *\n         B     TBSCAN2                 RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     PHNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION II - SEARCH 'PHONETAB' TABLE\n***********************************************************************\nTBSCAN2  EQU   *\n         MVC   PHNID_,SCNID            SET ISPF DIALOG SERVICE\n*                                      SEARCH A TABLE\n         ISPCALL ('TBSCAN','PHONETAB')\n         B     TBSCN210(R15)           CHECK RETURN CODE\nTBSCN210 EQU   *\n         B     TBTOP3                  RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     SCNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION II - SET CRP TO TOP OF 'PHONETAB' TABLE\n***********************************************************************\nTBTOP3   EQU   *\n         MVC   PHNID_,TOPID            SET ISPF DIALOG SERVICE\n*                                      POSITION CRP AT TOP OF TABLE\n         ISPCALL ('TBTOP','PHONETAB')\n         B     TBTOP310(R15)           CHECK RETURN CODE\nTBTOP310 EQU   *\n         B     TBDISPL                 RC = 00 (CONTINUE)\n         B     PHNERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     PHNERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION II - DISPLAY SELECTED TABLE INFORMATION\n***********************************************************************\nTBDISPL  EQU   *\n         MVC   PHNID_,TDSID            SET ISPF DIALOG SERVICE\n         TM    DISPFLAG,DISPROOM       DISPLAY ROOMS?\n         BO    TBDIS10                 YES, DISPLAY ROOMS\n         TM    DISPFLAG,DISPLNAM       DISPLAY LAST NAME?\n         BO    TBDIS20                 YES, DISPLAY SPECIFIC NAMES\n         TM    DISPFLAG,DISPFNAM       DISPLAY FIRST NAME?\n         BO    TBDIS20                 YES, DISPLAY SPECIFIC NAMES\n*                                      DISPLAY BOTH ROOMS & NAMES\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','PHONETAB','PHONINQ4')\n         B     TBDIS30(R15)            CHECK RETURN CODE\nTBDIS10  EQU   *\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','PHONETAB','PHONINQ3')\n         B     TBDIS30(R15)            CHECK RETURN CODE\nTBDIS20  EQU   *\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','PHONETAB','PHONINQ2')\n         B     TBDIS30(R15)            CHECK RETURN CODE\nTBDIS30  EQU   *\n         B     TBDISPL                 RC = 00 (CONTINUE)\n         B     TBDISPL                 RC = 04 (CONTINUE)\n         B     DISPLAY                 RC = 08 (CONTINUE)\n         B     PHNERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     PHNERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     PHNERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'PHONINQ - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nPHNERR04 EQU   *\n         MVC   PHNRC_,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nPHNERR08 EQU   *\n         MVC   PHNRC_,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nPHNERR12 EQU   *\n         MVC   PHNRC_,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nPHNERR16 EQU   *\n         MVC   PHNRC_,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nPHNERR20 EQU   *\n         MVC   PHNRC_,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nSCNERR08 EQU   *\n         MVC   PHNMSGS_,SCNNERRS       INITIALIZE SHORT MESSAGE\n         MVC   PHNMSGL_,SPACES         INITIALIZE LONG MESSAGE\n         LA    R4,PHNMSGL_             R4 - INDEX THROUGH LONG MESSAGE\n         LA    R6,5                    R6 - TO INDICATE MORE THAN 1\n         LA    R5,4                    R5 - TO INDICATE MORE THAN 1\n         TM    DISPFLAG,DISPEXTN       EXTENSION DISPLAY REQUEST?\n         BNO   SCNERR18                NO, CHECK FOR PLANT\n         MVC   0(9,R4),EXTEXT          MOVE EXTENSION TEXT TO LONG MSG\n         LA    R4,9(R4)                INCREMENT R4\n         MVC   0(1,R4),COMMA           MOVE COMMA TEXT TO LONG MSG\n         LA    R4,1(R4)                INCREMENT R4\n         BCTR  R6,0                    DECREMENT R6 BY ONE\nSCNERR18 EQU   *\n         TM    DISPFLAG,DISPPLNT       PLANT DISPLAY REQUEST?\n         BNO   SCNERR28                NO, CHECK FOR LAST NAME\n         MVC   0(6,R4),PLTEXT          MOVE PLANT TEXT TO LONG MSG\n         LA    R4,6(R4)                INCREMENT R4\n         MVC   0(1,R4),COMMA           MOVE COMMA TEXT TO LONG MSG\n         LA    R4,1(R4)                INCREMENT R4\n         BCTR  R6,0                    DECREMENT R6 BY ONE\nSCNERR28 EQU   *\n         TM    DISPFLAG,DISPLNAM       LAST NAME DISPLAY REQUEST?\n         BNO   SCNERR38                NO, CHECK FOR FIRST NAME\n         MVC   0(10,R4),LNTEXT         MOVE LNAME TEXT TO LONG MSG\n         LA    R4,10(R4)               INCREMENT R4\n         MVC   0(1,R4),COMMA           MOVE COMMA TEXT TO LONG MSG\n         LA    R4,1(R4)                INCREMENT R4\n         BCTR  R6,0                    DECREMENT R6 BY ONE\nSCNERR38 EQU   *\n         TM    DISPFLAG,DISPFNAM       FIRST NAME DISPLAY REQUEST?\n         BNO   SCNERR48                NO, CHECK FOR ROOM\n         MVC   0(11,R4),FNTEXT         MOVE FNAME TEXT TO LONG MSG\n         LA    R4,11(R4)               INCREMENT R4\n         MVC   0(1,R4),COMMA           MOVE COMMA TEXT TO LONG MSG\n         LA    R4,1(R4)                INCREMENT R4\n         BCTR  R6,0                    DECREMENT R6 BY ONE\nSCNERR48 EQU   *\n         TM    DISPFLAG,DISPROOM       ROOM DISPLAY REQUEST?\n         BNO   SCNERR58                NO, ADD REST OF TEXT\n         MVC   0(5,R4),RMTEXT          MOVE ROOM TEXT TO LONG MSG\n         LA    R4,5(R4)                INCREMENT R4\n         MVC   0(1,R4),COMMA           MOVE COMMA TEXT TO LONG MSG\n         LA    R4,1(R4)                INCREMENT R4\n         BCTR  R6,0                    DECREMENT R6 BY ONE\nSCNERR58 EQU   *\n         CR    R6,R5                   HAVE MORE THAN 1 BEEN REQUESTED?\n         BL    SCNERR68                YES, CONTINUE\n         BCTR  R4,0                    DECREMENT R4 BY ONE\n         MVC   0(23,R4),SINGTEXT       ONE SELECTION TEXT\n         B     MSGDISP2                YES, CONTINUE\nSCNERR68 EQU   *\n         BCTR  R4,0                    DECREMENT R4 BY ONE\n         MVC   0(34,R4),MULTTEXT       MORE THAN ONE SELECTION TEXT\n         B     MSGDISP2                YES, CONTINUE\nMSGDISP1 EQU   *\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','PHONINQ1',PHONMSG)\n         B     FINISH\nMSGDISP2 EQU   *\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','PHONINQ1',PHONMSG)\n         B     DISPLAY\n         TITLE 'PHONINQ - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n*                                      RELEASE AREA HELD BY PHONETAB\n         ISPCALL ('TBEND','PHONETAB')\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'PHONINQ - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nFLAGINIT EQU   X'00'                   DISPLAY FLAG INITIAL VALUE\nDISPEXTN EQU   X'01'                   DISPLAY FLAG - NAME DISPLAY\nDISPPLNT EQU   X'02'                   DISPLAY FLAG - ROOM DISPLAY\nDISPLNAM EQU   X'04'                   DISPLAY FLAG - ROOM AND/OR NAME\nDISPFNAM EQU   X'08'                   DISPLAY FLAG - ROOM AND/OR NAME\nDISPROOM EQU   X'10'                   DISPLAY FLAG - ROOM AND/OR NAME\n         TITLE 'PHONINQ - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nSPACES   DC    CL80' '                 SPACES\nVARINIT  DC    CL40'*                                       '\nCOMMA    DC    CL1','                  COMMA\nDASH     DC    CL1'-'                  DASH\nASTERICK DC    CL1'*'                  ASTERICK\nXTENSION DC    CL1'E'                  'PHONETAB' SORTED BY EXTENSION\nSCANALL  DC    CL3'*  '                SCAN ALL (GENERIC)\nALL      DC    CL3'ALL'                SCAN ALL OF PARTICULAR TYPE\nSORTREC  DC    CL4'\u00a2\u00a2\u00a2\u00a2'               SORT REC IDENTIFIER\nROOM     DC    CL20'ROOM$$$$$$$$$$$$$$$$'    ROOM RECORD IDENTIFIER\nPHONMSG  DC    CL8'PHON000'            ERROR MESSAGE ID\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nDELID    DC    CL8'TBDELETE'           ISPF DIALOG SERVICE (TBDELETE)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nSRTID    DC    CL8'TBSORT'             ISPF DIALOG SERVICE (TBSORT)\nTDSID    DC    CL8'TBDISPL'            ISPF DIALOG SERVICE (TBDISPL)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nEXTEXT   DC    C'EXTENSION'            TEXT FOR SCAN MESSAGE\nPLTEXT   DC    C' PLANT'               TEXT FOR SCAN MESSAGE\nLNTEXT   DC    C' LAST NAME'           TEXT FOR SCAN MESSAGE\nFNTEXT   DC    C' FIRST NAME'          TEXT FOR SCAN MESSAGE\nRMTEXT   DC    C' ROOM'                TEXT FOR SCAN MESSAGE\nSINGTEXT DC    C' selected not in table.'    TEXT FOR SCAN MESSAGE\nMULTTEXT DC    C' do not co-exist in any table row.'\nNAMELST1 DS    0F                      NAMES OF VARIABLES IN TABLE\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'LNAME'\n         DC    CL8'FNAME'\nNAMELST2 DS    0F                      NAMES OF VARIABLES IN TABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'LNAME'\nDEFLIST1 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'EXTENS#'\n         DC    CL8'PLANT#'\nDEFLIST2 DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'NAME#'\nDEFLIST3 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'LNAME#'\nDEFLIST4 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'FNAME#'\nDEFLIST5 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'EXTENS'\n         DC    CL8'PLANT'\nDEFLIST6 DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'NAME'\nDEFLIST7 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'LNAME'\nDEFLIST8 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'FNAME'\nDEFLIST9 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SORTORD'\nDEFLISTA DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'PHONMSGS'\nDEFLISTB DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'PHONMSGL'\nPHONERRS DC    CL24'PHONINQ program error.'\nPHONERRL DC    CL78'ISPF Dialog Service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\nSCNNERRS DC    CL24'No match found.'\n         TITLE 'PHONINQ - LITERAL POOL'\n         LTORG\n         TITLE 'PHONINQ - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nEXTENS$  DS    CL4                     BUILDING OR PLANT NUM (SELECTN)\nPLANT$   DS    CL4                     BUILDING OR PLANT NUM (SELECTN)\nNAME$    DS    CL40                    NAME (SELECTION)\nLNAME$   DS    CL20                    LAST NAME (SELECTION)\nFNAME$   DS    CL20                    FIRST NAME (SELECTION)\nEXTENS_  DS    CL4                     EXTENSION NUMBER (PHONETAB)\nPLANT_   DS    CL4                     BUILDING OR PLANT NUM (PHONETAB)\nNAME_    DS    CL40                    NAME (PHONETAB)\nLNAME_   DS    CL20                    LAST NAME (PHONETAB)\nFNAME_   DS    CL20                    FIRST NAME (PHONETAB)\nSORTORD_ DS    CL1                     SORTORD (PHONETAB)\nDISPFLAG DS    XL1                     DISPLAY TYPE FLAGS\nPHNMSGS_ DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nPHNMSGL_ DS    0CL78                   LONG VERSION OF ISPF ERROR MSG\n         DS    CL21\nPHNID_   DS    CL8\n         DS    CL18\nPHNRC_   DS    CL2\n         DS    CL21\nWORKLEN  EQU   *-WORKAREA\n         END   PHONINQ\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PHONLOAD": {"ttr": 12550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xe0\\x00\\xe0\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 224, "newlines": 224, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'CREATE PHONE TABLE FROM SEQUENTIAL FILE'\n*\n*        REGISTER USAGE:\n*              R0\n*              R1   STANDARD PARAMETER PASSING\n*              R2   HIGHEST RETURN CODE\n*              R3\n*              R4\n*              R5\n*              R6\n*              R7\n*              R8\n*              R9\n*              R10  RETURN ADDRESS WITHIN PROGRAM\n*              R11\n*              R12  PROGRAM BASE 1\n*              R13  SAVE AREA POINTER\n*              R14  RETURN ADDRESS\n*              R15\nPHONLOAD CSECT\n         SAVE  (14,12),,PHONLOAD_CREATE_PHONE_TABLE_FROM_SEQUENTIAL_FILX\n               E_&SYSDATE_&SYSTIME\n         LR    R12,R15                ESTABLISH R12 AS BASE REG\n         USING PHONLOAD,R12           TELL ASSEMBLER\n         ST    R13,SAVEAREA+4         SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                 SAVE IT IN R6\n         LA    R13,SAVEAREA           POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)              STORE OUR SAVEAREA ADDR IN OS\n         SR    R2,R2                  ZERO R2\n         SR    R15,R15                ZERO R15\n         ZAP   COUNT,=P'0'            ZERO COUNT OF I271C RECORDS\n* END OF PROLOG                       SAVE AREA\n*        PRINT NOGEN\n         OPEN  (SYSOUT,(OUTPUT),I271CFIL,(INPUT))\n         GET   I271CFIL,I271CREC      GET I271C RECORD\n         ISPCALL ('CONTROL','NONDISPL','ENTER'),WKAREA=PARAMS,         X\n               EPADDR=ISPADDR\n         ISPCALL ('CONTROL','ERRORS','RETURN')\n         ISPCALL ('VDEFINE',VARLIST1,PLANT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST2,FIRSTAID,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST3,EXTENS,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST4,PAGENUM,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST5,NAME,'CHAR',40)\n         ISPCALL ('VDEFINE',VARLIST6,EXCLUDE,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST7,BUDGDEPT,'CHAR',4)\n         ISPCALL ('VDEFINE',VARLIST8,SUPFLAG,'CHAR',1)\n         ISPCALL ('VDEFINE',VARLIST9,SORTORD,'CHAR',1)\n*        ISPCALL ('VDEFINE',VARLISTA,TBLNAMES,'CHAR',69)\n         ISPCALL ('VDEFINE',VARLISTB,ZERRMSG,'CHAR',8)\n         ISPCALL ('VDEFINE',VARLISTC,ZERRSM,'CHAR',24)\n         ISPCALL ('VDEFINE',VARLISTD,ZERRLM,'CHAR',80)\n         ISPCALL ('TBCREATE','PHONETAB',' ','(PLANT,FIRSTAID,EXTENS,PAGX\n               ENUM,NAME,EXCLUDE,BUDGDEPT,SUPFLAG)','WRITE','REPLACE','X\n               PHNTLIB')\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKCREATE(R15)\nCKCREATE EQU   *                      ERROR CREATING PHONE TABLE?\n         B     CREATEOK               00\n         B     DUPREPLC               04 DUPLICATE TABLE REPLACED\n         B     NOREPLAC               08 TABLE NOT REPLACED\n         B     ERRORA                 12 TABLE IN USE; ENQ FAILED\n         B     ERRORA                 16 LIBRARY NOT ALLOCATED WITH\n*                                        WRITE\n         B     ERRORA                 20 SEVERE ERROR\nDUPREPLC EQU   *\n         PUT   SYSOUT,=CL132'EXISTING PHONE TABLE WAS REPLACED'\nCREATEOK EQU   *                      NO ERRORS FOUND IN CREATE\n         ISPCALL ('TBSORT','PHONETAB','(NAME,C,A,EXTENS,C,A)')\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKSORT(R15)\nCKSORT   EQU   *                      ERROR SORTING TABLE?\n         B     NEXTREC                00\n         B     NEXTREC                04\n         B     NEXTREC                08\n         B     ERRORA                 12 TABLE IS NOT OPEN\n         B     ERRORB                 16 NUMERIC CONVERT ERROR\n         B     ERRORA                 20 SEVERE ERROR\nNEXTREC  EQU   *\n         ISPCALL ('TBADD','PHONETAB',' ','ORDER') ADD TABLE RECORD\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKTBADD(R15)\nCKTBADD  EQU   *\n         B     ADDOK                  00\n         B     ADDOK                  04\n         B     DUPREC                 08 ROW WITH KEY ALREADY EXISTS\n         B     ERRORA                 12 TABLE IS NOT OPEN\n         B     ADDOK                  16\n         B     ERRORB                 20 SEVERE ERROR\nDUPREC   EQU   *\n         PUT   SYSOUT,=CL132'DUPLICATE RECORD:'\n         PUT   SYSOUT,I271CREC\nADDOK    EQU   *\n         AP    COUNT,=P'1'            ADD 1 TO COUNT OF I271C RECORDS\n         MVC   I271CREC,I271CREC-1    CLEAR INPUT RECORD\n         GET   I271CFIL,I271CREC      GET\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     NEXTREC\n***********************************************************************\nCHECKRC  EQU   *                      SAVE HIGHEST RETURN CODE\n         CR    R2,R15                 COMPARE R15 TO SAVED RC\n         BNLR  R10                    BRANCH IF R2 NOT < R15\n         LR    R2,R15                 SAVE HIGHER RETURN CODE\n         BR    R10                    RETURN\n***********************************************************************\nNOREPLAC EQU   *\n         PUT   SYSOUT,=CL132'PHONE TABLE ALREADY EXISTS, REPLACE NOT SPX\n               ECIFIED'\n         PUT   SYSOUT,ERRMSG\n         B     CLOSFILE\nERRORA   EQU   *\n         PUT   SYSOUT,ERRMSG\n         B     CLOSFILE\nERRORB   EQU   *\n         PUT   SYSOUT,ERRMSG\n         B     ENDTABLE\nEOFRTN   EQU   *\n         CP    COUNT,=P'0'\n         BNE   NOERROR\n         PUT   SYSOUT,=CL132'I271C FILE IS EMPTY'\n         B     CLOSFILE\nNOERROR  EQU   *\n         MVI   I271CREC,C'\u00a2'\n         MVC   I271CREC+1(L'I271CREC-1),I271CREC\n         ISPCALL ('TBADD','PHONETAB','SORTORD','ORDER') ADD SORT RECORD\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CKTBADD2(R15)\nCKTBADD2 EQU   *\n         B     OK                     00\n         B     OK                     04\n         B     SRTEXSTS               08 ROW WITH KEY ALREADY EXISTS\n         B     ERRORA                 12 TABLE IS NOT OPEN\n         B     OK                     16\n         B     ERRORB                 20 SEVERE ERROR\nSRTEXSTS EQU   *\n         PUT   SYSOUT,=CL132'SORTING RECORD ALREADY EXISTS'\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     ENDTABLE\nOK       EQU   *\n         PUT   SYSOUT,=CL132'END OF PHONE TABLE - NO ERRORS'\n         ED    FORMAT,COUNT\n         PUT   SYSOUT,COUNTMSG\n         B     CLOSETBL\nCOUNT    DS    P'12345'               COUNT OF I271C RECORDS\nCOUNTMSG DS    0CL132\nFORMAT   DC    X'4020206B202021'\n         DC    C' RECORDS READ FROM THE I271C FILE'\n         DC    CL91' '\n         CNOP  0,4                    ALIGNMENT\nENDTABLE EQU   *\n         ISPCALL ('TBEND','PHONETAB')\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         B     CLOSFILE\nCLOSETBL EQU   *\n         ISPCALL ('TBCLOSE','PHONETAB',' ',' ',' ','PHNTLIB')\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\nCLOSFILE EQU   *\n         ST    R2,REG2\n         ST    R15,REG15\n         PUT   SYSOUT,RCMSG\n         CLOSE   (SYSOUT,,I271CFIL)\n         BAL   R10,CHECKRC            CHECK FOR HIGHER RETURN CODE\n         ISPCALL ('VRESET')\n         B     RETURN\n* BEGINNING OF EPILOG\nRETURN   EQU   *\n         L     R13,SAVEAREA+4         LOAD OS SAVE AREA ADDR TO R13\n         LR    R15,R2                 MOVE HIGHEST RETURN CODE TO R15\n         RETURN (14,12),RC=(15)       RETURN TO OS, RC IN REG 15\nRCMSG    DS    0CL132\n         DC    C'REG 2 = '\nREG2     DS    F\n         DC    C' REG 15 = '\nREG15    DS    F\n         DC    CL132' '\n* END OF EPILOG\nISPADDR  DC    A(0)                   STORAGE FOR EP ADDRESS OF ISPLINK\nVARLIST1 DC    C'(PLANT)'\nVARLIST2 DC    C'(FIRSTAID)'\nVARLIST3 DC    C'(EXTENS)'\nVARLIST4 DC    C'(PAGENUM)'\nVARLIST5 DC    C'(NAME)'\nVARLIST6 DC    C'(EXCLUDE)'\nVARLIST7 DC    C'(BUDGDEPT)'\nVARLIST8 DC    C'(SUPFLAG )'\nVARLIST9 DC    C'(SORTORD )'\nVARLISTB DC    C'(ZERRMSG )'\nVARLISTC DC    C'(ZERRSM  )'\nVARLISTD DC    C'(ZERRLM  )'\n*VARLISTA DC  C'(PLANT,FIRSTAID,EXTENS,PAGENUM,NAME,EXCLUDE,BUDGDEPT,SX\n*              UPFLAG,SORTORD)'\n*TBLNAMES DC    CL69' '\n         CNOP  0,4                    ALIGNMENT\nSAVEAREA DC    18F'0'                 OUR SAVE AREA\nPARAMS   DC    10A(0)                 PARAMETER WORKAREA\n         DC    CL01' '\nI271CREC DS    0CL80\nPLANT    DC    CL04' '                BUILDING ABBR/PLANT NUMBER\n         DC    CL01' '\nFIRSTAID DC    CL01' '                FIRST AID FLAG\n         DC    CL01' '\nEXTENS   DC    CL04' '                EXTENSION NUMBER\n         DC    CL02' '\nPAGENUM  DC    CL04' '                PAGING NUMBER\n         DC    CL02' '\nNAME     DC    CL40' '                NAME/ROOM\nEXCLUDE  DC    CL01' '                MIS035/MIS036 EXCLUSION FLAG\nBUDGDEPT DC    CL04' '                BUDGET DEPARTMENT\nSUPFLAG  DC    CL01' '                MIS077 SUPPRESSION FLAG\n         DC    CL15' '\nSORTORD  DC    CL01'N'\nERRMSG   DS    0CL132\nZERRMSG  DC    CL08' '\n         DC    CL02' '\nZERRSM   DC    CL24' '\n         DC    CL02' '\nZERRLM   DC    CL80' '\n         DC    CL16' '\nI271CFIL DCB   DDNAME=I271C,DSORG=PS,MACRF=(GM),RECFM=FB,LRECL=80,     X\n               BLKSIZE=6160,EODAD=EOFRTN\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=132,   X\n               BLKSIZE=6204\n***********************************************************************\n         EQUATE                       REGISTER EQUATES\n         END   PHONLOAD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFSEQ": {"ttr": 12555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x07\\xb2\\x07\\xb2\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1970, "newlines": 1970, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'CREATE SEQUENTIAL FILE OF RACF PROFILES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = RACFSEQ                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = CREATE A SEQUENTIAL FILE             *\n*                OF RACF PROFILE RECORDS.                             *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CREATES SEQUENTIAL RACF FILE FOR USE ON              *\n*                THE DB2 SYSTEM.                                      *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                01/15/86  WRITTEN.     BHC.                          *\n*                04/22/86  MODIFIED FOR RACF 1.7     BHC.             *\n*                                                                     *\n*                                                                     *\n* RUN INSTRUCTIONS:                                                   *\n*                                                                     *\n* SYSPRINT DD - MUST BE PRESENT FOR ERROR & INFORMATION MSGS          *\n*                                                                     *\n* SYSUT2 DD - SEQUENTIAL OUTPUT DATA SET (RECFM=VBS, LRECL=3076)      *\n*                                                                     *\n* SYSIN  DD  - IF PRESENT, SPECIFIES WHICH TYPES OF PROFILES          *\n*              ARE TO BE PROCESSED.                                   *\n*     EACH SYSIN RECORD BEGINS IN COLUMN 1                            *\n*     VALID SYSIN RECORDS ARE:                                        *\n*        GRP   (FOR GROUP PROFILES)                                   *\n*        USR   (FOR USER PROFILES)                                    *\n*        CON   (FOR CONNECT PROFILES)                                 *\n*        DS    (FOR DATA SET PROFILES)                                *\n*        GEN   (FOR GENERAL RESOURCE PROFILES)                        *\n*                                                                     *\n*     INVALID SYSIN RECORDS AND NUMBER OF RECORDS PROCESSED ARE       *\n*        REPORTED IN SYSPRINT.                                        *\n*     IF SYSIN IS NOT PRESENT, ALL PROFILES WILL BE PROCESSED.        *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* OUTPUT RECORDS:                                                     *\n*   DESCRIBED BY 'TYPEX' DSECTS AT END OF PROGRAM                     *\n*                                                                     *\n***********************************************************************\nRACFSEQ CSECT\n         SAVE  (14,12),,RACFSEQ_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING RACFSEQ,R12,R11,R10,R9   TELL ASSEMBLER\n         LA    R11,4095(R12)            R11 SECOND BASE\n         LA    R11,1(R11)               R12 PLUS 4096\n         LA    R10,4095(R11)            R10 THIRD BASE\n         LA    R10,1(R10)               R11 PLUS 4096\n         LA    R9,4095(R10)             R9 FOURTH BASE\n         LA    R9,1(R9)                 R10 PLUS 4096\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         PRINT NOGEN                    SAVE AREA\n**********   FIND DDNAMES THAT ARE PRESENT\n         SLR   R3,R3                    CLEAR R3\n         L     R2,16                    ADDRESS OF CVT\n         L     R2,0(R2)                 ADDRESS OF TCB ADDRESS WORDS\n         L     R2,4(R2)                 ADDRESS OF CURRENT TCB\n         L     R2,12(R2)                ADDRESS OF THIS TCBS TIOT\n         LA    R2,24(R2)                ADDRESS OF START OF DD ENTRY\n         IC    R3,0(R2)                 LENGTH OF THIS ENTRY\nFINDDD1  EQU   *\n         LTR   R3,R3\n         BZ    DONEDD\n         CLC   4(8,R2),=CL8'SYSIN'      IS IT SYSIN?\n         BE    GOTSYSIN\n         CLC   4(8,R2),=CL8'SYSPRINT'   IS IT SYSPRINT?\n         BE    GOTPRINT\n         CLC   4(8,R2),=CL8'SYSUT2'     IS IT SYSUT2?\n         BE    GOTSYS2\n         B     NEXTDD                   DONT KNOW WHY BUT TRY AGAIN\nGOTSYSIN EQU   *\n         MVI   SYSINSW,C'1'             SET SYSIN DD PRESENT\n         B     NEXTDD\nGOTPRINT EQU   *\n         MVI   PRINTSW,C'1'            SET SYSPRINT DD PRESENT\n         B     NEXTDD\nGOTSYS2  EQU   *\n         MVI   SYS2SW,C'1'             SET SYSUT2 DD PRESENT\n         B     NEXTDD\nNEXTDD   EQU   *\n         AR    R2,R3                    BUMP TO NEXT DD ENTRY\n         IC    R3,0(R2)                 GET LENGTH OF ENTRY\n         B     FINDDD1                  LOOP\nDONEDD   EQU   *\n**************       VALIDATE  DD'S\n         CLI   SYS2SW,C'1'              IF SYSUT2 DD NOT PRESENT\n         BE    *+8                       PRINT ERROR MESSAGE\n         B     ERROR01                    AND QUIT\n         CLI   PRINTSW,C'1'             IF SYSPRINT NOT PRESENT\n         BE    *+8                       PRINT ERROR MESSAGE\n         B     ERROR02A                   AND QUIT\n***************   INITIALIZE\n         MVI   PRINTER,X'40'            INITIALIZE PRINT LINE\n         MVC   PRINTER+1(131),PRINTER\n         MVC   NUMPROFS,ZEROS          INITIALIZE PROFILE COUNTER\n         MVC   RACFWORK(4),RACFLENG      STORE LENGTH OF WORK AREA\n***************   OPEN SYSPRINT\n         OPEN  (SYSPRINT,OUTPUT,SYSUT2,OUTPUT)  OPEN OUTPUT DATASETS\n***************   OPEN AND READ SYSIN\n         CLI   SYSINSW,C'1'              IS THERE A SYSIN?\n         BNE   GETGRP                    IF NOT,GO DO WHOLE FILE\n         OPEN  (SYSIN)                   OPEN SYSIN\n         LTR   R15,R15                   IF NOT OK,\n         BNZ   CLOSEX                        GET OUT\nGETSYSIN EQU   *\n         GET   SYSIN,INAREA              READ SYSIN\n         CLC   INAREA(3),=C'GRP'         IS IT A 'GRP'?\n         BE    GETGRP                    GO TO THE 'GRP' LOCATES\n         CLC   INAREA(3),=C'USR'         IS IT A 'USR'?\n         BE    GETUSR                    GO TO THE 'USR' LOCATES\n         CLC   INAREA(3),=C'CON'         IS IT A 'CON'?\n         BE    GETCON                    GO TO THE 'CON' LOCATES\n         CLC   INAREA(2),=C'DS'          IS IT A 'DS'?\n         BE    GETDS                     GO TO THE 'DS' LOCATES\n         CLC   INAREA(3),=C'GEN'         IS IT A 'GEN'?\n         BE    GETGEN                    GO TO THE 'GEN' LOCATES\n         BAL   R5,ERROR03                TELL USER ABOUT BAD SYSIN\n         B     GETSYSIN                  AND CONTINUE\n*\n*\n*************************** GET NEXT GROUP RACF PROFILE\nGETGRP   EQU   *\n         MVC   TYPE,=CL3'GRP'            SAVE PROFILE TYPE\n         MVC   NUMPROFS,ZEROS            INIT NUMBER OF PROFILES\n         MVI   DSNAME,X'40'            INITIALIZE RACF NAME AREA\n         MVC   DSNAME+1(43),DSNAME\n         MVI   DSNAMEL,X'01'           INITIALIZE RACF NAME LENGTH\nGETGRP1  EQU   *\n         ICHEINTY NEXTC,TYPE='GRP',ENTRY=DSNAMEL,                      X\n               ACTIONS=(G1,G2,G3,G4,G5,G6,G7,G8,G9,G10,G11,G12,G13,G14,X\n               G15,G16,G17,G18,G19,G20,G21,G22,G23,G24,G25,G26,G27),   X\n               WKAREA=RACFWORK\n*\n*\n         LTR   R15,R15                 IF OK,\n         BZ    PROFG                      CONTINUE\n         C     R15,=F'12'              END OF RACF GROUP PROFILES?\n         BE    ENDGRP                  IF SO, END\n         B     CLOSEX                  IF NOT, TAKE ERROR EXIT\nPROFG    EQU   *\n         LA    R2,RACFWORK             GET ADDRESS OF RACF WORK AREA\n         USING GRPFLD0,R2              ESTABLISH ADDRESSABILITY\n         LA    R6,GPVAR                POINT R6 AT LAST PART OF REC\n         LA    R3,OUTREC0              GET ADDRESS OF OUTPUT RECORD\n         USING TYPE1,R3                ESTABLISH ADDRESSABILITY\n         LA    R4,T1REST               POINT R4 AT VARIABLE OUTPUT DATA\n         MVI   T1ID,C'1'               LOAD TYPE ID\n         MVI   T1NAME,X'40'            CLEAR DATASET NAME\n         MVC   T1NAME+1(L'T1NAME-1),T1NAME\n         SR    R7,R7\n         ICM   R7,B'0001',DSNAMEL      GET LENGTH OF GROUP NAME\n         BCTR  R7,0                    DECREMENT\n         LA    R8,T1NAME\n         EX    R7,MOVNAME              LOAD GROUP NAME\n         MVC   T1VER,GPVER             LOAD VERSION\n         MVC   T1SUPGP,GPSUPGP         LOAD SUPERIOR GROUP\n         MVC   T1AUTHD,GPAUTHD         LOAD DATE GROUP CREATED\n         MVC   T1AUTHR,GPAUTHR         LOAD AUTHOR\n         MVC   T1INITC,GPINIT\n         MVC   T1UACC,GPUACC           LOAD UNIVERSAL GROUP AUTHORITY\n         MVC   T1NOTRM,GPNOTRM         LOAD FLAG\n         DROP  R2\n         MVC   T1@INST,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GG10                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T1@INST      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD INSTALLATION DATA\n         AR    R4,R7                   MOVE POINTER\nGG10     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T1@MODL,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF MODEL DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GG20                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T1@MODL      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD MODEL PROFILE NAME\n         AR    R4,R7                   MOVE POINTER\nGG20     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS05,0(R6)           LOAD RESERVED QUALIFIER\n         LA    R6,L'T1GRS05(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS06,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS06(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS07,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS07(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS08,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS08(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS09,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS09(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS10,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS10(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS11,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS11(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS12,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS12(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS13,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS13(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1GRS14,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T1GRS14(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         MVC   T1#FLD,0(R6)            LOAD FIELD COUNT\n         LA    R6,L'T1#FLD(R6)         MOVE TO NEXT FIELD\n         MVC   T1@FLD,ZEROS            ZERO OUT OFFSET\n         MVC   T1$FLD,ZEROS            ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T1#FLD,ZEROS            ANY FIELDS?\n         BE    GG30                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T1@FLD       STORE OFFSET\n         STCM  R7,B'0011',T1$FLD       STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nGG30     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         MVC   T1#SUBG,0(R6)           LOAD SUBGROUP COUNT\n         LA    R6,L'T1#SUBG(R6)        MOVE TO NEXT FIELD\n         MVC   T1@SUBG,ZEROS           ZERO OUT OFFSET\n         MVC   T1$SUBG,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T1#SUBG,ZEROS           ANY FIELDS?\n         BE    GG40                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T1@SUBG      STORE OFFSET\n         STCM  R7,B'0011',T1$SUBG      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nGG40     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1#USER,0(R6)           LOAD USER COUNT\n         LA    R6,L'T1#USER(R6)        MOVE TO NEXT FIELD\n         MVC   T1@USER,ZEROS           ZERO OUT OFFSET\n         MVC   T1$USER,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T1#USER,ZEROS           ANY USERS?\n         BE    GG50                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T1@USER      STORE OFFSET\n         STCM  R7,B'0011',T1$USER      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER DATA\n         AR    R4,R7                   MOVE POINTER\nGG50     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T1#IUSR,0(R6)           LOAD INST USER COUNT\n         LA    R6,L'T1#IUSR(R6)        MOVE TO NEXT FIELD\n         MVC   T1@IUSR,ZEROS           ZERO OUT OFFSET\n         MVC   T1$IUSR,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T1#IUSR,ZEROS           ANY INST USERS?\n         BE    GG60                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T1@IUSR      STORE OFFSET\n         STCM  R7,B'0011',T1$IUSR      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER INST DATA\n         AR    R4,R7                   MOVE POINTER\nGG60     EQU   *\n         LA    R2,OUTREC\n         SR    R4,R2                   CALCULATE LENGTH OF RECORD\n         STH   R4,OUTREC               STORE IN OUTPUT RECORD\n         BAL   R5,WRITEIT              WRITE RECORD INTO SYSUT2 FILE\n         L     R8,NUMPROFS\n         LA    R8,1(R8)                COUNT THE PROFILE\n         ST    R8,NUMPROFS\n         B     GETGRP1\nENDGRP   EQU   *\n         BAL   R5,INFOMSG              WRITE INFORMATION MESSAGE\n         CLI   SYSINSW,C'1'            SYSIN PRESENT?\n         BE    GETSYSIN                IF SO, LOOP BACK\n*************************** GET NEXT USER RACF PROFILE\nGETUSR   EQU   *\n         MVC   TYPE,=CL3'USR'          INIT PROFILE TYPE\n         MVC   NUMPROFS,ZEROS          INIT COUNTER\n         MVI   DSNAME,X'40'            INITIALIZE RACF NAME AREA\n         MVC   DSNAME+1(43),DSNAME\n         MVI   DSNAMEL,X'01'           INITIALIZE RACF NAME LENGTH\nGETUSR1  EQU   *\n         ICHEINTY NEXTC,TYPE='USR',ENTRY=DSNAMEL,                      X\n               ACTIONS=(U1,U2,U3,U4,U5,U6,U7,U8,U9,U10,U11,U12,U13,U14,X\n               U15,U16,U17,U18,U19,U20,U21,U22,U23,U24,U25,U26,U27,U28,X\n               U29,U30,U31,U32,U33,U34,U35,U36,U37,U38,U39),           X\n               WKAREA=RACFWORK\n*\n*\n         LTR   R15,R15                 IF OK,\n         BZ    PROFU                      CONTINUE\n         C     R15,=F'12'              END OF RACF GROUP PROFILES?\n         BE    ENDUSR                  IF SO, GO CLOSE AND END\n         B     CLOSEX                  IF NOT, TAKE ERROR EXIT\nPROFU    EQU   *\n         LA    R2,RACFWORK             GET ADDRESS OF RACF WORK AREA\n         USING USRFLD0,R2              ESTABLISH ADDRESSABILITY\n         LA    R6,USVAR                POINT R6 AT LAST PART OF REC\n         LA    R3,OUTREC0              GET ADDRESS OF OUTPUT RECORD\n         USING TYPE2,R3                ESTABLISH ADDRESSABILITY\n         LA    R4,T2REST               POINT R4 AT VARIABLE OUTPUT DATA\n         MVI   T2ID,C'2'               LOAD TYPE ID\n         MVI   T2NAME,X'40'            CLEAR USER\n         MVC   T2NAME+1(L'T2NAME-1),T2NAME\n         SR    R7,R7\n         ICM   R7,B'0001',DSNAMEL      GET LENGTH OF USER\n         BCTR  R7,0                    DECREMENT\n         LA    R8,T2NAME\n         EX    R7,MOVNAME              LOAD USER\n         MVC   T2VER,USVER             LOAD VERSION\n         MVC   T2AUTHD,USAUTHD         LOAD DATE USER CREATED\n         MVC   T2AUTHR,USAUTHR         LOAD AUTHOR\n         MVC   T2FLAG1,USFLAG1         LOAD FLAG\n         MVC   T2FLAG2,USFLAG2         LOAD FLAG\n         MVC   T2FLAG3,USFLAG3         LOAD FLAG\n         MVC   T2FLAG4,USFLAG4         LOAD FLAG\n         MVC   T2FLAG5,USFLAG5         LOAD FLAG\n         MVC   T2PASSI,USPASSI         LOAD PASSWORD INTERVAL\n         MVC   T2PASSD,USPASSD         LOAD DATE PASSWORD CHANGED\n         MVC   T2PGMNM,USPGMNM         LOAD NAME OF USER\n         MVC   T2DFLTG,USDFLTG         LOAD DEFAULT GROUP\n         MVC   T2LJT,USLJT             LOAD TIME LAST USED\n         MVC   T2LJD,USLJD             LOAD DATE LAST USED\n         DROP  R2\n         MVC   T2@INST,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GU10                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@INST      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD INSTALLATION DATA\n         AR    R4,R7                   MOVE POINTER\nGU10     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2UAUDIT,0(R6)          LOAD UAUDIT FLAG\n         LA    R6,L'T2UAUDIT(R6)       MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2FLAG6,0(R6)           LOAD FLAG FLAG\n         LA    R6,L'T2FLAG6(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2FLAG7,0(R6)           LOAD FLAG FLAG\n         LA    R6,L'T2FLAG7(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2FLAG8,0(R6)           LOAD FLAG FLAG\n         LA    R6,L'T2FLAG8(R6)        MOVE TO NEXT FIELD\n         MVC   T2@MAGS,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF MAGSTRIP\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GU20                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@MAGS      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD MAGSTRIP\n         AR    R4,R7                   MOVE POINTER\nGU20     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2PWDGN,0(R6)           LOAD PASSWORD GENERATION\n         LA    R6,L'T2PWDGN(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2REVCT,0(R6)           LOAD ATTEMPTS COUNT\n         LA    R6,L'T2REVCT(R6)        MOVE TO NEXT FIELD\n         MVC   T2@MODL,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF MODEL DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GU30                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@MODL      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD MODEL PROFILE NAME\n         AR    R4,R7                   MOVE POINTER\nGU30     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2SECLV,0(R6)           LOAD USER'S SECURITY LEVEL\n         LA    R6,L'T2SECLV(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2#CTGY,0(R6)           LOAD CATEGORIES COUNT\n         LA    R6,L'T2#CTGY(R6)        MOVE TO NEXT FIELD\n         MVC   T2@CTGY,ZEROS           ZERO OUT OFFSET\n         MVC   T2$CTGY,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T2#CTGY,ZEROS           ANY FIELDS?\n         BE    GU32                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@CTGY      STORE OFFSET\n         STCM  R7,B'0011',T2$CTGY      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nGU32     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T2@REVK,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF MODEL DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GU34                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@REVK      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD MODEL PROFILE NAME\n         AR    R4,R7                   MOVE POINTER\nGU34     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T2@RESM,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF MODEL DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GU36                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@RESM      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD MODEL PROFILE NAME\n         AR    R4,R7                   MOVE POINTER\nGU36     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2LOGDY,0(R6)           LOAD LOGON DAYS\n         LA    R6,L'T2LOGDY(R6)        GO TO NEXT FIELD\n         MVC   T2@LOGT,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF LOGON DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GU38                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@LOGT      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD LOGON TIME INFO\n         AR    R4,R7                   MOVE POINTER\nGU38     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2URS17,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T2URS17(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2#FLD,0(R6)            LOAD FIELD COUNT\n         LA    R6,L'T2#FLD(R6)         MOVE TO NEXT FIELD\n         MVC   T2@FLD,ZEROS            ZERO OUT OFFSET\n         MVC   T2$FLD,ZEROS            ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T2#FLD,ZEROS            ANY FIELDS?\n         BE    GU40                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@FLD       STORE OFFSET\n         STCM  R7,B'0011',T2$FLD       STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nGU40     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         MVC   T2#CLAS,0(R6)           LOAD CLASS COUNT\n         LA    R6,L'T2#CLAS(R6)        MOVE TO NEXT FIELD\n         MVC   T2@CLAS,ZEROS           ZERO OUT OFFSET\n         MVC   T2$CLAS,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T2#CLAS,ZEROS           ANY FIELDS?\n         BE    GU50                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@CLAS      STORE OFFSET\n         STCM  R7,B'0011',T2$CLAS      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nGU50     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2#COGRP,0(R6)          LOAD COGRP COUNT\n         LA    R6,L'T2#COGRP(R6)       MOVE TO NEXT FIELD\n         MVC   T2@COGRP,ZEROS          ZERO OUT OFFSET\n         MVC   T2$COGRP,ZEROS          ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF COGRP DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T2#COGRP,ZEROS          ANY COGRPS?\n         BE    GU60                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@COGRP     STORE OFFSET\n         STCM  R7,B'0011',T2$COGRP     STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD COGRP DATA\n         AR    R4,R7                   MOVE POINTER\nGU60     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T2#IUSR,0(R6)           LOAD INST USER COUNT\n         LA    R6,L'T2#IUSR(R6)        MOVE TO NEXT FIELD\n         MVC   T2@IUSR,ZEROS           ZERO OUT OFFSET\n         MVC   T2$IUSR,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T2#IUSR,ZEROS           ANY INST USERS?\n         BE    GU70                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T2@IUSR      STORE OFFSET\n         STCM  R7,B'0011',T2$IUSR      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER INST DATA\n         AR    R4,R7                   MOVE POINTER\nGU70     EQU   *\n         LA    R2,OUTREC\n         SR    R4,R2                   CALCULATE LENGTH OF RECORD\n         STH   R4,OUTREC               STORE IN OUTPUT RECORD\n         BAL   R5,WRITEIT              WRITE RECORD INTO SYSUT2 FILE\n         L     R8,NUMPROFS\n         LA    R8,1(R8)                COUNT THE PROFILE\n         ST    R8,NUMPROFS\n         B     GETUSR1\nENDUSR   EQU   *\n         BAL   R5,INFOMSG              WRITE INFORMATION MESSAGE\n         CLI   SYSINSW,C'1'            SYSIN PRESENT?\n         BE    GETSYSIN                IF SO, LOOP BACK\n*************************** GET CONNECT RACF PROFILE\nGETCON   EQU   *\n         MVC   TYPE,=CL3'CON'          INIT PROFILE TYPE\n         MVC   NUMPROFS,ZEROS          INIT COUNTER\n         MVI   DSNAME,X'40'            INITIALIZE RACF NAME AREA\n         MVC   DSNAME+1(43),DSNAME\n         MVI   DSNAMEL,X'01'           INITIALIZE RACF NAME LENGTH\nGETCON1  EQU   *\n         ICHEINTY NEXTC,TYPE='CON',ENTRY=DSNAMEL,                      X\n               ACTIONS=(C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,X\n               C15,C16,C17,C18,C19,C20,C21,C22,C23,C24,C25,C26,C27),   X\n               WKAREA=RACFWORK\n*\n*\n         LTR   R15,R15                 IF OK,\n         BZ    PROFC                      CONTINUE\n         C     R15,=F'12'              END OF RACF CONNECT PROFILES?\n         BE    ENDCON                  IF SO, GO CLOSE AND END\n         B     CLOSEX                  IF NOT, TAKE ERROR EXIT\nPROFC    EQU   *\n         LA    R2,RACFWORK             GET ADDRESS OF RACF WORK AREA\n         USING CONFLD0,R2              ESTABLISH ADDRESSABILITY\n         LA    R6,COVAR                POINT R6 AT LAST PART OF REC\n         LA    R3,OUTREC0              GET ADDRESS OF OUTPUT RECORD\n         USING TYPE3,R3                ESTABLISH ADDRESSABILITY\n         LA    R4,T3REST               POINT R4 AT VARIABLE OUTPUT DATA\n         MVI   T3ID,C'3'               LOAD TYPE ID\n         MVI   T3NAME,X'40'            CLEAR USER\n         MVC   T3NAME+1(L'T3NAME-1),T3NAME\n         SR    R7,R7\n         ICM   R7,B'0001',DSNAMEL      GET LENGTH OF USER\n         BCTR  R7,0                    DECREMENT\n         LA    R8,T3NAME\n         EX    R7,MOVNAME              LOAD USER\n         MVC   T3VER,COVER             LOAD VERSION\n         MVC   T3AUTHD,COAUTHD         LOAD DATE USER CONNECTED\n         MVC   T3AUTHR,COAUTHR         LOAD AUTHOR\n         MVC   T3LJT,COLJT             LOAD TIME LAST USED\n         MVC   T3LJD,COLJD             LOAD DATE LAST USED\n         MVC   T3UACC,COUACC           LOAD UNIVERSAL ACCESS\n         MVC   T3INITC,COINITC         LOAD # OF RACINIT'S\n         MVC   T3FLAG1,COFLAG1         LOAD FLAG\n         MVC   T3FLAG2,COFLAG2         LOAD FLAG\n         MVC   T3FLAG3,COFLAG3         LOAD FLAG\n         MVC   T3FLAG4,COFLAG4         LOAD FLAG\n         MVC   T3FLAG5,COFLAG5         LOAD FLAG\n         MVC   T3NOTRM,CONOTRM         LOAD FLAG\n         MVC   T3CRS07,COCRS07         LOAD FLAG\n         MVC   T3GRPAD,COGRPA          LOAD FLAG\n         DROP  R2\n         MVC   T3@REVK,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF REVOKE DATE\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GC02                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T3@REVK      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD REVOKE DATE\n         AR    R4,R7                   MOVE POINTER\nGC02     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3@RESM,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF RESUME DATE\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    GC04                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T3@RESM      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD RESUME DATE\n         AR    R4,R7                   MOVE POINTER\nGC04     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3CRS11,0(R6)           LOAD FLAG\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3CRS12,0(R6)           LOAD FLAG\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3CRS13,0(R6)           LOAD FLAG\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3CRS14,0(R6)           LOAD FLAG\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3CRS15,0(R6)           LOAD FLAG\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3CRS16,0(R6)           LOAD FLAG\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T3#FLD,0(R6)            LOAD FIELD COUNT\n         LA    R6,L'T3#FLD(R6)         MOVE TO NEXT FIELD\n         MVC   T3@FLD,ZEROS            ZERO OUT OFFSET\n         MVC   T3$FLD,ZEROS            ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T3#FLD,ZEROS            ANY FIELDS?\n         BE    GC10                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T3@FLD       STORE OFFSET\n         STCM  R7,B'0011',T3$FLD       STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nGC10     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         MVC   T3#IUSR,0(R6)           LOAD INST USER COUNT\n         LA    R6,L'T3#IUSR(R6)        MOVE TO NEXT FIELD\n         MVC   T3@IUSR,ZEROS           ZERO OUT OFFSET\n         MVC   T3$IUSR,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T3#IUSR,ZEROS           ANY INST USERS?\n         BE    GC20                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T3@IUSR      STORE OFFSET\n         STCM  R7,B'0011',T3$IUSR      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER INST DATA\n         AR    R4,R7                   MOVE POINTER\nGC20     EQU   *\n         LA    R2,OUTREC\n         SR    R4,R2                   CALCULATE LENGTH OF RECORD\n         STH   R4,OUTREC               STORE IN OUTPUT RECORD\n         BAL   R5,WRITEIT              WRITE RECORD INTO SYSUT2 FILE\n         L     R8,NUMPROFS\n         LA    R8,1(R8)                COUNT THE PROFILE\n         ST    R8,NUMPROFS\n         B     GETCON1\nENDCON   EQU   *\n         BAL   R5,INFOMSG              WRITE INFOMATION MESSAGE\n         CLI   SYSINSW,C'1'            SYSIN PRESENT ?\n         BE    GETSYSIN                IF SO, LOOP BACK\n*************************** GET NEXT DS RACF PROFILE\nGETDS    EQU   *\n         MVC   TYPE,=CL3'DS '          INIT PROFILE TYPE\n         MVC   NUMPROFS,ZEROS          INIT COUNTER\n         MVI   DSNAME,X'40'            INITIALIZE RACF NAME AREA\n         MVC   DSNAME+1(43),DSNAME\n         MVI   DSNAMEL,X'01'           INITIALIZE RACF NAME LENGTH\nGETDS1   EQU   *\n         TM    GENFLG,X'80'              WAS PREV RECORD GENERIC?\n         BNO   GENNO1                    IF NO, DO GENERIC=NO\n         ICHEINTY NEXTC,TYPE='DS',ENTRY=DSNAMEL,                       X\n               ACTIONS=(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,X\n               D15,D16,D17,D18,D19,D20,D21,D22,D23,D24,D25,D26,D27,D28,X\n               D29),GENERIC=UNCOND,WKAREA=RACFWORK\n         B     CHECK1\n*\nGENNO1   ICHEINTY NEXTC,TYPE='DS',ENTRY=DSNAMEL,                       X\n               ACTIONS=(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,X\n               D15,D16,D17,D18,D19,D20,D21,D22,D23,D24,D25,D26,D27,D28,X\n               D29),GENERIC=NO,WKAREA=RACFWORK\n*\nCHECK1   EQU   *\n         LTR   R15,R15                 IF OK,\n         BZ    PROFD                      CONTINUE\n         C     R15,=F'12'              END OF RACF DATA SET PROFILES?\n         BE    ENDDS                   IF SO, GO CLOSE AND END\n         B     CLOSEX                  IF NOT, TAKE ERROR EXIT\nPROFD    EQU   *\n         LA    R2,RACFWORK             GET ADDRESS OF RACF WORK AREA\n         USING DSNFLD0,R2              ESTABLISH ADDRESSABILITY\n         LA    R6,DSVAR                POINT R6 AT LAST PART OF REC\n         LA    R3,OUTREC0              GET ADDRESS OF OUTPUT RECORD\n         USING TYPE4,R3                ESTABLISH ADDRESSABILITY\n         LA    R4,T4REST               POINT R4 AT VARIABLE OUTPUT DATA\n         MVC   GENFLG,DSFLAG           SAVE TYPE CODE\n         MVI   T4ID,C'4'               LOAD TYPE ID\n         MVI   T4NAME,X'40'            CLEAR DATASET NAME\n         MVC   T4NAME+1(43),T4NAME\n         SR    R7,R7\n         ICM   R7,B'0001',DSNAMEL      GET LENGTH OF DATASET NAME\n         BCTR  R7,0                    DECREMENT\n         LA    R8,T4NAME\n         EX    R7,MOVNAME              LOAD DATASET NAME\n         MVC   T4VER,DSVER             LOAD VERSION\n         MVC   T4CREDT,DSCREDT         LOAD CREATION DATE\n         MVC   T4AUTHR,DSAUTHR         LOAD AUTHOR\n         MVC   T4UNIV,DSUNIV           LOAD UNIVERSAL ACCESS\n         MVC   T4FLAG1,DSFLAG1         LOAD FLAG1\n         MVC   T4AUDIT,DSAUDIT         LOAD AUDIT FLAG\n         MVC   T4GRPNM,DSGRPNM         LOAD GROUP NAME\n         MVC   T4DSTYP,DSDSTYP         LOAD DATA SET TYPE\n         MVC   T4LEVEL,DSLEVEL         LOAD DATA SET LEVEL\n         MVC   T4GAUDIT,DSGAUDIT       LOAD GLOBAL AUDIT FLAGS\n         DROP  R2\n         MVC   T4@INST,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    P10                     IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@INST      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD INSTALLATION DATA\n         AR    R4,R7                   MOVE POINTER\nP10      EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4AUDQS,0(R6)           LOAD AUDIT SUCCESS QUALIFIER\n         LA    R6,L'T4AUDQS(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4AUDQF,0(R6)           LOAD AUDIT FAILURE QUALIFIER\n         LA    R6,L'T4AUDQF(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4GAUDQS,0(R6)          LOAD GAUDIT SUCCESS QUALIFIER\n         LA    R6,L'T4GAUDQS(R6)       MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4GAUDQF,0(R6)          LOAD GAUDIT FAILURE QUALIFIER\n         LA    R6,L'T4GAUDQF(R6)       MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4WARN,0(R6)            LOAD WARNING FLAG\n         LA    R6,L'T4WARN(R6)         MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4SECLV,0(R6)           LOAD SECURITY LEVEL\n         LA    R6,L'T4SECLV(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4#CTGY,0(R6)           LOAD CATEGORY COUNT\n         LA    R6,L'T4#CTGY(R6)        MOVE TO NEXT FIELD\n         MVC   T4@CTGY,ZEROS           ZERO OUT OFFSET\n         MVC   T4$CTGY,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T4#CTGY,ZEROS           ANY FIELDS?\n         BE    P12                     IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@CTGY      STORE OFFSET\n         STCM  R7,B'0011',T4$CTGY      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD CATEGORY DATA\n         AR    R4,R7                   MOVE POINTER\nP12      EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T4@NTFY,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    P14                     IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@NTFY      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD NOTIFY DATA\n         AR    R4,R7                   MOVE POINTER\nP14      EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T4@RTPD,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    P16                     IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@RTPD      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD RETENTION DATA\n         AR    R4,R7                   MOVE POINTER\nP16      EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4#ACL2,0(R6)           LOAD AUTH PROGRAM COUNT\n         LA    R6,L'T4#ACL2(R6)        MOVE TO NEXT FIELD\n         MVC   T4@ACL2,ZEROS           ZERO OUT OFFSET\n         MVC   T4$ACL2,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T4#ACL2,ZEROS           ANY FIELDS?\n         BE    P18                     IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@ACL2      STORE OFFSET\n         STCM  R7,B'0011',T4$ACL2      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD AUTH PROGRAM DATA\n         AR    R4,R7                   MOVE POINTER\nP18      EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         MVC   T4#FLD,0(R6)            LOAD FIELD COUNT\n         LA    R6,L'T4#FLD(R6)         MOVE TO NEXT FIELD\n         MVC   T4@FLD,ZEROS            ZERO OUT OFFSET\n         MVC   T4$FLD,ZEROS            ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T4#FLD,ZEROS            ANY FIELDS?\n         BE    P20                     IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@FLD       STORE OFFSET\n         STCM  R7,B'0011',T4$FLD       STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nP20      EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4#USER,0(R6)           LOAD USER COUNT\n         LA    R6,L'T4#USER(R6)        MOVE TO NEXT FIELD\n         MVC   T4@USER,ZEROS           ZERO OUT OFFSET\n         MVC   T4$USER,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T4#USER,ZEROS           ANY USERS?\n         BE    P30                     IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@USER      STORE OFFSET\n         STCM  R7,B'0011',T4$USER      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER DATA\n         AR    R4,R7                   MOVE POINTER\nP30      EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T4#IUSR,0(R6)           LOAD INST USER COUNT\n         LA    R6,L'T4#IUSR(R6)        MOVE TO NEXT FIELD\n         MVC   T4@IUSR,ZEROS           ZERO OUT OFFSET\n         MVC   T4$IUSR,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T4#IUSR,ZEROS           ANY INST USERS?\n         BE    P40                     IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T4@IUSR      STORE OFFSET\n         STCM  R7,B'0011',T4$IUSR      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER INST DATA\n         AR    R4,R7                   MOVE POINTER\nP40      EQU   *\n         LA    R2,OUTREC\n         SR    R4,R2                   CALCULATE LENGTH OF RECORD\n         STH   R4,OUTREC               STORE IN OUTPUT RECORD\n         BAL   R5,WRITEIT              WRITE RECORD INTO SYSUT2 FILE\n         L     R8,NUMPROFS\n         LA    R8,1(R8)                COUNT THE PROFILE\n         ST    R8,NUMPROFS\n         B     GETDS1\nENDDS    EQU   *\n         BAL   R5,INFOMSG              WRITE INFOMATION MESSAGE\n         CLI   SYSINSW,C'1'            SYSIN PRESENT?\n         BE    GETSYSIN                IF SO, LOOP BACK\n*************************** GET NEXT GENERAL RACF PROFILE\nGETGEN   EQU   *\n         MVC   TYPE,=CL3'GEN'          INIT PROFILE TYPE\n         MVC   NUMPROFS,ZEROS          INIT COUNTER\n         L     R2,16                   GET CVT ADDRESS\n         USING CVT,R2\n         L     R8,CVTRAC               GET RACF CVT ADDRESS\n         USING RCVT,R8\n         DROP  R2\n         L     R8,RCVTCDTP             GET RACF CLASS DESCP TABLE\n         DROP  R8\nGETCLAS  EQU   *\n         SR    R2,R2\n         LH    R2,0(R8)\n         LTR   R2,R2                   END OF CLASSES?\n         BE    ENDGEN                  IF SO, END\n         MVC   GENCLASS,3(R8)          GET CLASS\n         MVC   SAVTYPE,2(R8)           SAVE ID\n         MVI   DSNAMEL,X'01'\n         MVI   DSNAME,X'40'\n         MVI   GENFLG,X'80'              DO GENERICS FIRST\n         LA    R8,32(R8)\n         ST    R8,SAVEREG              SAVE R8\nGETGEN1  EQU   *\n         TM    GENFLG,X'80'              WAS PREV RECORD GENERIC?\n         BNO   GENNO2                    IF NO, DO GENERIC=NO\n         ICHEINTY NEXTC,TYPE='GEN',ENTRY=DSNAMEL,CLASS=GENCLASS,       X\n               ACTIONS=(N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,N13,N14,X\n               N15,N16,N17,N18,N19,N20,N21,N22,N23,N24,N25,N26,N27,N28,X\n               N29,N30,N31,N32,N33,N34,N35,N36,N37,N38),               X\n               WKAREA=RACFWORK,GENERIC=UNCOND\n         LTR   R15,R15                 IF OK,\n         BZ    PROFN                      CONTINUE\n         C     R15,=F'12'              END OF RACF DATA SET PROFILES?\n         BNE   CLOSEX                  IF NOT, TAKE ERROR EXIT\n         MVI   GENFLG,X'00'            SET TO DO NON-GENERICS\n         B     GETGEN1                 AND LOOP\nGENNO2   EQU   *\n         ICHEINTY NEXTC,TYPE='GEN',ENTRY=DSNAMEL,CLASS=GENCLASS,       X\n               ACTIONS=(N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,N11,N12,N13,N14,X\n               N15,N16,N17,N18,N19,N20,N21,N22,N23,N24,N25,N26,N27,N28,X\n               N29,N30,N31,N32,N33,N34,N35,N36,N37,N38),               X\n               WKAREA=RACFWORK,GENERIC=NO\n         LTR   R15,R15                 IF OK,\n         BZ    PROFN                      CONTINUE\n         C     R15,=F'12'              END OF RACF DATA SET PROFILES?\n         BNE   CLOSEX                  IF NOT, TAKE ERROR EXIT\n         L     R8,SAVEREG              RESTORE R8\n         B     GETCLAS                 IF SO, CHECK FOR MORE CLASSES\nPROFN    EQU   *\n         LA    R2,RACFWORK             GET ADDRESS OF RACF WORK AREA\n         USING GENFLD0,R2              ESTABLISH ADDRESSABILITY\n         CLC   SAVTYPE,GNCLAST         STILL THE SAME TYPE?\n         BE    PN05                    IF SO, CONTINUE\n         L     R8,SAVEREG              RESTORE R8\n         B     GETCLAS                 AND LOOP FOR NEXT CLASS\nPN05     EQU   *\n         MVC   GENFLG,GNFLAG\n         LA    R6,GNVAR                POINT R6 AT LAST PART OF REC\n         LA    R3,OUTREC0              GET ADDRESS OF OUTPUT RECORD\n         USING TYPE5,R3                ESTABLISH ADDRESSABILITY\n         LA    R4,T5REST               POINT R4 AT VARIABLE OUTPUT DATA\n         MVI   T5ID,C'5'               LOAD TYPE ID\n         MVI   T5NAME,X'40'            CLEAR DATASET NAME\n         MVC   T5NAME+1(43),T5NAME\n         SR    R7,R7\n         ICM   R7,B'0001',DSNAMEL      GET LENGTH OF DATASET NAME\n         BCTR  R7,0                    DECREMENT\n         LA    R8,T5NAME\n         EX    R7,MOVNAME              LOAD DATASET NAME\n         MVC   T5VER,GNVER             LOAD VERSION\n         MVC   T5CLAST,GNCLAST         LOAD CLASS TYPE\n         MVC   T5CLASS,GENCLASS        LOAD CLASS\n         MVC   T5DEFDT,GNDEFD          LOAD DATE RESOURCE DEFINED\n         MVC   T5OWNER,GNOWNER         LOAD OWNER\n         MVC   T5UACC,GNUACC           LOAD UNIVERSAL ACCESS\n         MVC   T5AUDIT,GNAUDIT         LOAD AUDIT FLAG\n         MVC   T5LEVEL,GNLEVEL         LOAD RESOURCE LEVEL\n         MVC   T5GAUDIT,GNGAUD         LOAD GLOBAL AUDIT FLAGS\n         DROP  R2\n         MVC   T5@INST,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    PN10                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@INST      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD INSTALLATION DATA\n         AR    R4,R7                   MOVE POINTER\nPN10     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5AUDQS,0(R6)           LOAD AUDIT SUCCESS QUALIFIER\n         LA    R6,L'T5AUDQS(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5AUDQF,0(R6)           LOAD AUDIT FAILURE QUALIFIER\n         LA    R6,L'T5AUDQF(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5GAUDQS,0(R6)          LOAD GAUDIT SUCCESS QUALIFIER\n         LA    R6,L'T5GAUDQS(R6)       MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5GAUDQF,0(R6)          LOAD GAUDIT FAILURE QUALIFIER\n         LA    R6,L'T5GAUDQF(R6)       MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5WARN,0(R6)            LOAD WARNING FLAG\n         LA    R6,L'T5WARN(R6)         MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5RESFG,0(R6)           LOAD RESOURCE PROFILE FLAGS\n         LA    R6,L'T5RESFG(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5#VTOC,0(R6)           LOAD TVTOC COUNT\n         LA    R6,L'T5#VTOC(R6)        MOVE TO NEXT FIELD\n         MVC   T5@VTOC,ZEROS           ZERO OUT OFFSET\n         MVC   T5$VTOC,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T5#VTOC,ZEROS           ANY MEMBERS ?\n         BE    PN12                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@VTOC      STORE OFFSET\n         STCM  R7,B'0011',T5$VTOC      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD TVTOC DATA\n         AR    R4,R7                   MOVE POINTER\nPN12     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T5@NTFY,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF NOTIFY DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    PN14                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@NTFY      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD NOTIFY DATA\n         AR    R4,R7                   MOVE POINTER\nPN14     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5LOGDY,0(R6)           LOAD LOGON DAYS\n         LA    R6,L'T5LOGDY(R6)        MOVE TO NEXT FIELD\n         MVC   T5@LOGT,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF LOGON DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    PN15                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@LOGT      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD LOGON DATA\n         AR    R4,R7                   MOVE POINTER\nPN15     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T5@LOGZ,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF LOGON DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    PN16                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@LOGZ      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD LOGON DATA\n         AR    R4,R7                   MOVE POINTER\nPN16     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5#CTGY,0(R6)           LOAD CATEGORY COUNT\n         LA    R6,L'T5#CTGY(R6)        MOVE TO NEXT FIELD\n         MVC   T5@CTGY,ZEROS           ZERO OUT OFFSET\n         MVC   T5$CTGY,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T5#CTGY,ZEROS           ANY MEMBERS ?\n         BE    PN18                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@CTGY      STORE OFFSET\n         STCM  R7,B'0011',T5$CTGY      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD CATEGORY DATA\n         AR    R4,R7                   MOVE POINTER\nPN18     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5SECLV,0(R6)           LOAD SECURITY LEVEL\n         LA    R6,L'T5SECLV(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5GRS16,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T5GRS16(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5GRS17,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T5GRS17(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5GRS18,0(R6)           LOAD RESERVED FIELD\n         LA    R6,L'T5GRS18(R6)        MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5#FLD,0(R6)            LOAD FIELD COUNT\n         LA    R6,L'T5#FLD(R6)         MOVE TO NEXT FIELD\n         MVC   T5@FLD,ZEROS            ZERO OUT OFFSET\n         MVC   T5$FLD,ZEROS            ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF FIELD DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T5#FLD,ZEROS            ANY FIELDS?\n         BE    PN20                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@FLD       STORE OFFSET\n         STCM  R7,B'0011',T5$FLD       STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD FIELD DATA\n         AR    R4,R7                   MOVE POINTER\nPN20     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         MVC   T5@APPL,ZEROS           ZERO OUT OFFSET\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF APPL DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         C     R7,=F'1'                LENGTH OF '1'?\n         BE    PN30                    IF SO, NOTHING THERE\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@APPL      STORE OFFSET\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD INSTALLATION DATA\n         AR    R4,R7                   MOVE POINTER\nPN30     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5#MEMS,0(R6)           LOAD MEMBER COUNT\n         LA    R6,L'T5#MEMS(R6)        MOVE TO NEXT FIELD\n         MVC   T5@MEMS,ZEROS           ZERO OUT OFFSET\n         MVC   T5$MEMS,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T5#MEMS,ZEROS           ANY MEMBERS ?\n         BE    PN40                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@MEMS      STORE OFFSET\n         STCM  R7,B'0011',T5$MEMS      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD MEMBER DATA\n         AR    R4,R7                   MOVE POINTER\nPN40     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5#VOLS,0(R6)           LOAD VOLUME COUNT\n         LA    R6,L'T5#VOLS(R6)        MOVE TO NEXT FIELD\n         MVC   T5@VOLS,ZEROS           ZERO OUT OFFSET\n         MVC   T5$VOLS,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T5#VOLS,ZEROS           ANY VOLUMES ?\n         BE    PN50                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@VOLS      STORE OFFSET\n         STCM  R7,B'0011',T5$VOLS      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD MEMBER DATA\n         AR    R4,R7                   MOVE POINTER\nPN50     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5#USER,0(R6)           LOAD USER COUNT\n         LA    R6,L'T5#USER(R6)        MOVE TO NEXT FIELD\n         MVC   T5@USER,ZEROS           ZERO OUT OFFSET\n         MVC   T5$USER,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R6\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T5#USER,ZEROS           ANY USERS?\n         BE    PN60                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@USER      STORE OFFSET\n         STCM  R7,B'0011',T5$USER      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER DATA\n         AR    R4,R7                   MOVE POINTER\nPN60     EQU   *\n         AR    R6,R7                   MOVE TO NEXT FIELD\n         LA    R6,2(R6)                SKIP NEXT LENGTH FIELD\n         MVC   T5#IUSR,0(R6)           LOAD INST USER COUNT\n         LA    R6,L'T5#IUSR(R6)        MOVE TO NEXT FIELD\n         MVC   T5@IUSR,ZEROS           ZERO OUT OFFSET\n         MVC   T5$IUSR,ZEROS           ZERO OUT LENGTH\n         SR    R7,R7                   CLEAR R7\n         ICM   R7,B'0011',0(R6)        GET LENGTH OF INST USER DATA\n         LA    R6,2(R6)                SKIP OVER LENGTH FIELD\n         CLC   T5#IUSR,ZEROS           ANY INST USERS?\n         BE    PN70                    IF NOT, BRANCH\n         LA    R2,OUTREC0\n         LR    R8,R4\n         SR    R8,R2                   CALCULATE OFFSET\n         STCM  R8,B'1111',T5@IUSR      STORE OFFSET\n         STCM  R7,B'0011',T5$IUSR      STORE LENGTH\n         LR    R5,R7                   GET LENGTH OF DATA\n         MVCL  R4,R6                   LOAD USER INST DATA\n         AR    R4,R7                   MOVE POINTER\nPN70     EQU   *\n         LA    R2,OUTREC\n         SR    R4,R2                   CALCULATE LENGTH OF RECORD\n         STH   R4,OUTREC               STORE IN OUTPUT RECORD\n         BAL   R5,WRITEIT              WRITE RECORD INTO SYSUT2 FILE\n         L     R8,NUMPROFS\n         LA    R8,1(R8)\n         ST    R8,NUMPROFS\n         B     GETGEN1\nENDGEN   EQU   *\n         BAL   R5,INFOMSG              WRITE INFORMATION MESSAGE\n         CLI   SYSINSW,C'1'            SYSIN PRESENT ?\n         BE    GETSYSIN                IF SO, LOOP BACK\n         B     CLOSE                   ELSE, END PROGRAM\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (SYSUT2)                CLOSE THE FILE\n         CLOSE (SYSIN)\n         CLOSE (SYSPRINT)\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     RETURN\nENDIN    EQU   *\nCLOSE    EQU   *\n         CLOSE (SYSUT2)                CLOSE THE FILE\n         CLOSE (SYSIN)\n         CLOSE (SYSPRINT)\n         SR    R15,R15                 SET RETURN CODE\nRETURN   L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n***********************************************************************\n*\n*  WRITE THE OUTPUT LINE\n*\nWRITEIT  EQU   *\n         PUT   SYSUT2,OUTREC           PRINT THE LINE\n         MVI   OUTREC,X'00'            CLEAR OUTPUT AREA\n         MVC   OUTREC+1(255),OUTREC      UP TO TABLES\n         BR    R5                      RETURN\n*\nPRINTIT  EQU   *\n         PUT   SYSPRINT,PRINTER        PRINT THE LINE\n         MVI   PRINTER,X'40'           CLEAR PRINT LINE\n         MVC   PRINTER+1(131),PRINTER\n         BR    R8                      RETURN\n*\nERROR01  EQU   *\n         WTO   'RACFSEQ - SYSUT2 DD MISSING OR MISPELLED',             X\n               ROUTCDE=(11)\n         L     R15,=F'16'            SET RETURN CODE TO 16\n         B     RETURN                END\n*\nERROR02A EQU   *\n         WTO   'RACFSEQ - SYSPRINT DD MISSING OR MISPELLED',           X\n               ROUTCDE=(11)\n         L     R15,=F'16'            SET RETURN CODE TO 16\n         B     RETURN                END\n*\nERROR03  EQU   *          INVALID SYSIN\n         MVC   PRINTER+1(30),MSG03   MOVE MSG TO PRINT LINE\n         BAL   R8,PRINTIT           PRINT IT\n         MVC   PRINTER+1(80),INAREA  MOVE SYSIN RECORD TO PRINT\n         BAL   R8,PRINTIT           PRINT IT\n         BAL   R8,PRINTIT           PRINT A BLANK LINE\n         MVI   RETCODE+3,X'08'       SET RETURN CODE TO 8\n         BR    R5                    BRANCH BACK\n*\nINFOMSG  EQU   *\n         L     R8,NUMPROFS          GET NUMBER PROCESSED\n         CVD   R8,PWORK             CONVERT TO PACKED DECIMAL\n         UNPK  WORK,PWORK+3(5)      UNPACK\n         MVZ   WORK+7(1),WORK+6     MOVE ZONE BYTE\n         MVC   INFONUM,WORK         LOAD INTO MESSAGE\n         MVC   INFOTYP,TYPE         LOAD TYPE INTO MESSAGE\n         MVC   PRINTER+2(L'INFOLINE),INFOLINE   LOAD INTO PRINT BUFFER\n         BAL   R8,PRINTIT           PRINT THE LINE\n         BR    R5                   CONTINUE\n*\n***********************************************************************\n*                     CONSTANT DATA                                   *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*    THE FOLLOWING FIELDS WILL BE RETRIEVED FROM THE RACF DATA SET\n*\nG1       ICHEACTN FIELD=VERSION\nG2       ICHEACTN FIELD=SUPGROUP\nG3       ICHEACTN FIELD=AUTHDATE\nG4       ICHEACTN FIELD=AUTHOR\nG5       ICHEACTN FIELD=INITCNT\nG6       ICHEACTN FIELD=UACC\nG7       ICHEACTN FIELD=NOTRMUAC\nG8       ICHEACTN FIELD=INSTDATA\nG9       ICHEACTN FIELD=MODELNAM\nG10      ICHEACTN FIELD=GRSVFG05\nG11      ICHEACTN FIELD=GRSVFG06\nG12      ICHEACTN FIELD=GRSVFG07\nG13      ICHEACTN FIELD=GRSVFG08\nG14      ICHEACTN FIELD=GRSVFG09\nG15      ICHEACTN FIELD=GRSVFG10\nG16      ICHEACTN FIELD=GRSVFG11\nG17      ICHEACTN FIELD=GRSVFG12\nG18      ICHEACTN FIELD=GRSVFG13\nG19      ICHEACTN FIELD=GRSVFG14\nG20      ICHEACTN FIELD=FLDCNT\nG21      ICHEACTN FIELD=FIELD\nG22      ICHEACTN FIELD=SUBGRPCT\nG23      ICHEACTN FIELD=SUBGRPNM\nG24      ICHEACTN FIELD=ACLCNT\nG25      ICHEACTN FIELD=ACL\nG26      ICHEACTN FIELD=USRCNT\nG27      ICHEACTN FIELD=USERDATA\n*\nU1       ICHEACTN FIELD=VERSION\nU2       ICHEACTN FIELD=AUTHDATE\nU3       ICHEACTN FIELD=AUTHOR\nU4       ICHEACTN FIELD=FLAG1\nU5       ICHEACTN FIELD=FLAG2\nU6       ICHEACTN FIELD=FLAG3\nU7       ICHEACTN FIELD=FLAG4\nU8       ICHEACTN FIELD=FLAG5\nU9       ICHEACTN FIELD=PASSINT\nU10      ICHEACTN FIELD=PASSDATE\nU11      ICHEACTN FIELD=PGMRNAME\nU12      ICHEACTN FIELD=DFLTGRP\nU13      ICHEACTN FIELD=LJTIME\nU14      ICHEACTN FIELD=LJDATE\nU15      ICHEACTN FIELD=INSTDATA\nU16      ICHEACTN FIELD=UAUDIT\nU17      ICHEACTN FIELD=FLAG6\nU18      ICHEACTN FIELD=FLAG7\nU19      ICHEACTN FIELD=FLAG8\nU20      ICHEACTN FIELD=MAGSTRIP\nU21      ICHEACTN FIELD=PWDGEN\nU22      ICHEACTN FIELD=REVOKECT\nU23      ICHEACTN FIELD=MODELNAM\nU24      ICHEACTN FIELD=SECLEVEL\nU25      ICHEACTN FIELD=NUMCTGY\nU26      ICHEACTN FIELD=CATEGORY\nU27      ICHEACTN FIELD=REVOKEDT\nU28      ICHEACTN FIELD=RESUMEDT\nU29      ICHEACTN FIELD=LOGDAYS\nU30      ICHEACTN FIELD=LOGTIME\nU31      ICHEACTN FIELD=URSVFG17\nU32      ICHEACTN FIELD=FLDCNT\nU33      ICHEACTN FIELD=FIELD\nU34      ICHEACTN FIELD=CLCNT\nU35      ICHEACTN FIELD=CLNAME\nU36      ICHEACTN FIELD=CONGRPCT\nU37      ICHEACTN FIELD=CONGRPNM\nU38      ICHEACTN FIELD=USRCNT\nU39      ICHEACTN FIELD=USERDATA\n*\nC1       ICHEACTN FIELD=VERSION\nC2       ICHEACTN FIELD=AUTHDATE\nC3       ICHEACTN FIELD=AUTHOR\nC4       ICHEACTN FIELD=LJTIME\nC5       ICHEACTN FIELD=LJDATE\nC6       ICHEACTN FIELD=UACC\nC7       ICHEACTN FIELD=INITCNT\nC8       ICHEACTN FIELD=FLAG1\nC9       ICHEACTN FIELD=FLAG2\nC10      ICHEACTN FIELD=FLAG3\nC11      ICHEACTN FIELD=FLAG4\nC12      ICHEACTN FIELD=FLAG5\nC13      ICHEACTN FIELD=NOTRMUAC\nC14      ICHEACTN FIELD=CRSVFG07\nC15      ICHEACTN FIELD=GRPAUDIT\nC16      ICHEACTN FIELD=REVOKEDT\nC17      ICHEACTN FIELD=RESUMEDT\nC18      ICHEACTN FIELD=CRSVFG11\nC19      ICHEACTN FIELD=CRSVFG12\nC20      ICHEACTN FIELD=CRSVFG13\nC21      ICHEACTN FIELD=CRSVFG14\nC22      ICHEACTN FIELD=CRSVFG15\nC23      ICHEACTN FIELD=CRSVFG16\nC24      ICHEACTN FIELD=FLDCNT\nC25      ICHEACTN FIELD=FIELD\nC26      ICHEACTN FIELD=USRCNT\nC27      ICHEACTN FIELD=USERDATA\n*\nD1       ICHEACTN FIELD=VERSION\nD2       ICHEACTN FIELD=CREADATE\nD3       ICHEACTN FIELD=AUTHOR\nD4       ICHEACTN FIELD=UNIVACS\nD5       ICHEACTN FIELD=FLAG1\nD6       ICHEACTN FIELD=AUDIT\nD7       ICHEACTN FIELD=GROUPNM\nD8       ICHEACTN FIELD=DSTYPE\nD9       ICHEACTN FIELD=LEVEL\nD10      ICHEACTN FIELD=GAUDIT\nD11      ICHEACTN FIELD=INSTDATA\nD12      ICHEACTN FIELD=AUDITQS\nD13      ICHEACTN FIELD=AUDITQF\nD14      ICHEACTN FIELD=GAUDITQS\nD15      ICHEACTN FIELD=GAUDITQF\nD16      ICHEACTN FIELD=WARNING\nD17      ICHEACTN FIELD=SECLEVEL\nD18      ICHEACTN FIELD=NUMCTGY\nD19      ICHEACTN FIELD=CATEGORY\nD20      ICHEACTN FIELD=NOTIFY\nD21      ICHEACTN FIELD=RETPD\nD22      ICHEACTN FIELD=ACL2CNT\nD23      ICHEACTN FIELD=ACL2\nD24      ICHEACTN FIELD=FLDCNT\nD25      ICHEACTN FIELD=FIELD\nD26      ICHEACTN FIELD=ACLCNT\nD27      ICHEACTN FIELD=ACL1\nD28      ICHEACTN FIELD=USRCNT\nD29      ICHEACTN FIELD=USERDATA\n*\nN1       ICHEACTN FIELD=VERSION\nN2       ICHEACTN FIELD=CLASTYPE\nN3       ICHEACTN FIELD=DEFDATE\nN4       ICHEACTN FIELD=OWNER\nN5       ICHEACTN FIELD=UACC\nN6       ICHEACTN FIELD=AUDIT\nN7       ICHEACTN FIELD=LEVEL\nN8       ICHEACTN FIELD=GAUDIT\nN9       ICHEACTN FIELD=INSTDATA\nN10      ICHEACTN FIELD=AUDITQS\nN11      ICHEACTN FIELD=AUDITQF\nN12      ICHEACTN FIELD=GAUDITQS\nN13      ICHEACTN FIELD=GAUDITQF\nN14      ICHEACTN FIELD=WARNING\nN15      ICHEACTN FIELD=RESFLG\nN16      ICHEACTN FIELD=TVTOCCNT\nN17      ICHEACTN FIELD=TVTOC\nN18      ICHEACTN FIELD=NOTIFY\nN19      ICHEACTN FIELD=LOGDAYS\nN20      ICHEACTN FIELD=LOGTIME\nN21      ICHEACTN FIELD=LOGZONE\nN22      ICHEACTN FIELD=NUMCTGY\nN23      ICHEACTN FIELD=CATEGORY\nN24      ICHEACTN FIELD=SECLEVEL\nN25      ICHEACTN FIELD=GRSVFG16\nN26      ICHEACTN FIELD=GRSVFG17\nN27      ICHEACTN FIELD=GRSVFG18\nN28      ICHEACTN FIELD=FLDCNT\nN29      ICHEACTN FIELD=FIELD\nN30      ICHEACTN FIELD=APPLDATA\nN31      ICHEACTN FIELD=MEMCNT\nN32      ICHEACTN FIELD=MEMLST\nN33      ICHEACTN FIELD=VOLCNT\nN34      ICHEACTN FIELD=VOLSER\nN35      ICHEACTN FIELD=ACLCNT\nN36      ICHEACTN FIELD=ACL1\nN37      ICHEACTN FIELD=USRCNT\nN38      ICHEACTN FIELD=USERDATA\n*\n***********************************************************************\nSAVEAREA DS    18F\n*\nRETCODE  DS    1F'0'\n*\n         DS    1F'0'\nOUTREC   DS    XL4\nOUTREC0  DS    XL3072\n*\nINAREA   DS    CL80\n*\nSAVEREGS DS    4F\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X\n               MACRF=(PM)\n*\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=VBS,LRECL=3076,            X\n               MACRF=(PM)\n*\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),              X\n               RECFM=FB,EODAD=ENDIN\n*\nPRINTER  DS    CL132\nENDSYSIN DC    C'0'           SYSIN AT END WHEN 1\nSYSINSW  DC    C'0'           SYSIN DD -  1 PRESENT, 0 MISSING\nSYS2SW   DC    C'0'           SYSUT2 DD -  1 PRESENT, 0 MISSING\nPRINTSW  DC    C'0'           SYSPRINT -  1 PRESENT, 0 MISSING\nGENCLASS DS    CL8\nDSNAMEL  DS    XL1\nDSNAME   DS    CL44\nRACFWORK DS    XL5124\nGENFLG   DS    CL1\nTYPE     DS    CL3\nWORK     DS    CL8\nSAVTYPE  DS    AL1\nNUMPROFS DS    1F\nSAVEREG  DS    1F\nPWORK    DS    1D\n*\nRACFLENG DC    F'5120'\n*\nZEROS    DC    XL8'00'\n*\nMOVNAME  MVC   0(0,R8),DSNAME\n*\nMSG03    DC    CL34'*** FOLLOWING SYSIN RECORD INVALID'\n*\nINFOLINE DS    0CL45\n         DC    C'NUMBER OF \"'\nINFOTYP  DS    CL3\n         DC    C'\" PROFILES PROCESSED = '\nINFONUM  DS    CL8\n*\nGRPFLD0  DSECT\n         DS    CL10\nGPFLAG   DS    CL1\n         DS    CL17\n         DS    CL2\nGPVER    DS    CL1\n         DS    CL2\nGPSUPGP  DS    CL8\n         DS    CL2\nGPAUTHD  DS    CL3\n         DS    CL2\nGPAUTHR  DS    CL8\n         DS    CL2\nGPINIT   DS    CL2\n         DS    CL2\nGPUACC   DS    CL1\n         DS    CL2\nGPNOTRM  DS    CL1\nGPVAR    DS    CL256\n*\nUSRFLD0  DSECT\n         DS    CL10\nUSFLAG   DS    CL1\n         DS    CL17\n         DS    CL2\nUSVER    DS    CL1\n         DS    CL2\nUSAUTHD  DS    CL3\n         DS    CL2\nUSAUTHR  DS    CL8\n         DS    CL2\nUSFLAG1  DS    CL1\n         DS    CL2\nUSFLAG2  DS    CL1\n         DS    CL2\nUSFLAG3  DS    CL1\n         DS    CL2\nUSFLAG4  DS    CL1\n         DS    CL2\nUSFLAG5  DS    CL1\n         DS    CL2\nUSPASSI  DS    CL1\n         DS    CL2\nUSPASSD  DS    CL3\n         DS    CL2\nUSPGMNM  DS    CL20\n         DS    CL2\nUSDFLTG  DS    CL8\n         DS    CL2\nUSLJT    DS    CL4\n         DS    CL2\nUSLJD    DS    CL3\nUSVAR    DS    CL256\n*\nCONFLD0  DSECT\n         DS    CL10\nCOFLAG   DS    CL1\n         DS    CL17\n         DS    CL2\nCOVER    DS    CL1\n         DS    CL2\nCOAUTHD  DS    CL3\n         DS    CL2\nCOAUTHR  DS    CL8\n         DS    CL2\nCOLJT    DS    CL4\n         DS    CL2\nCOLJD    DS    CL3\n         DS    CL2\nCOUACC   DS    CL1\n         DS    CL2\nCOINITC  DS    CL2\n         DS    CL2\nCOFLAG1  DS    CL1\n         DS    CL2\nCOFLAG2  DS    CL1\n         DS    CL2\nCOFLAG3  DS    CL1\n         DS    CL2\nCOFLAG4  DS    CL1\n         DS    CL2\nCOFLAG5  DS    CL1\n         DS    CL2\nCONOTRM  DS    CL1\n         DS    CL2\nCOCRS07  DS    CL1\n         DS    CL2\nCOGRPA   DS    CL1\nCOVAR    DS    CL256\n*\nDSNFLD0  DSECT\n         DS    CL10\nDSFLAG   DS    CL1\n         DS    CL17\n         DS    CL2\nDSVER    DS    CL1\n         DS    CL2\nDSCREDT  DS    CL3\n         DS    CL2\nDSAUTHR  DS    CL8\n         DS    CL2\nDSUNIV   DS    CL1\n         DS    CL2\nDSFLAG1  DS    CL1\n         DS    CL2\nDSAUDIT  DS    CL1\n         DS    CL2\nDSGRPNM  DS    CL8\n         DS    CL2\nDSDSTYP  DS    CL1\n         DS    CL2\nDSLEVEL  DS    CL1\n         DS    CL2\nDSGAUDIT DS    CL1\nDSVAR    DS    CL256\n*\nGENFLD0  DSECT\n         DS    CL10\nGNFLAG   DS    CL1\n         DS    CL17\n         DS    CL2\nGNVER    DS    CL1\n         DS    CL2\nGNCLAST  DS    CL1\n         DS    CL2\nGNDEFD   DS    CL3\n         DS    CL2\nGNOWNER  DS    CL8\n         DS    CL2\nGNUACC   DS    CL1\n         DS    CL2\nGNAUDIT  DS    CL1\n         DS    CL2\nGNLEVEL  DS    CL1\n         DS    CL2\nGNGAUD   DS    CL1\nGNVAR    DS    CL256\n*\nTYPE1    DSECT          GROUP PROFILE RECORD\nT1ID     DS    CL1      NUMBER (1) CORRESPONDING TO GROUP PROFILES\nT1NAME   DS    CL44     GROUP NAME\nT1VER    DS    CL1      VERSION NUMBER\nT1SUPGP  DS    CL8      THE SUPERIOR GROUP TO THIS GROUP\nT1AUTHD  DS    CL3      THE DATE THE GROUP WAS CREATED\nT1AUTHR  DS    CL8      THE OWNER OF THE GROUP\nT1INITC  DS    CL2      RESERVED\nT1UACC   DS    CL1      THE UNIVERSAL GROUP AUTHORITY\nT1NOTRM  DS    CL1      IDENTIFIES IF USER MUST BE AUTH'D BY PERMIT\nT1@INST  DS    CL4      OFFSET TO INSTALLATION DATA\nT1@MODL  DS    CL4      OFFSET TO DATA SET MODEL PROFILE NAME\nT1GRS05  DS    CL1      RESERVED\nT1GRS06  DS    CL1      RESERVED\nT1GRS07  DS    CL1      RESERVED\nT1GRS08  DS    CL1      RESERVED\nT1GRS09  DS    CL1      RESERVED\nT1GRS10  DS    CL1      RESERVED\nT1GRS11  DS    CL1      RESERVED\nT1GRS12  DS    CL1      RESERVED\nT1GRS13  DS    CL1      RESERVED\nT1GRS14  DS    CL1      RESERVED\nT1@FLD   DS    CL4      OFFSET TO FIELD DATA\nT1$FLD   DS    CL2      TOTAL LENGTH OF FIELD DATA\nT1#FLD   DS    CL2      NUMBER OF FIELD DATA ENTRIES\nT1@SUBG  DS    CL4      OFFSET TO SUBGROUP NAMES\nT1$SUBG  DS    CL2      TOTAL LENGTH OF SUPGROUPS\nT1#SUBG  DS    CL2      NUMBER OF SUPGROUPS OF THE GROUP\nT1@USER  DS    CL4      OFFSET TO USER DATA\nT1$USER  DS    CL2      TOTAL LENGTH OF USER DATA\nT1#USER  DS    CL2      NUMBER OF USERS CONNECTED TO THE GROUP\nT1@IUSR  DS    CL4      OFFSET TO INSTALLATION USER DATA\nT1$IUSR  DS    CL2      TOTAL LENGTH OF INST USER DATA\nT1#IUSR  DS    CL2      NUMBER OF INST USER ENTRIES\nT1REST   DS    0C       VARIABLE DATA\n*\nTYPE2    DSECT          USER PROFILE RECORD\nT2ID     DS    CL1      THE NUMBER (2) CORRESPONDING TO USER PROFILES\nT2NAME   DS    CL44     USERID\nT2VER    DS    CL1      VERSION NUMBER\nT2AUTHD  DS    CL3      THE DATE THE USER WAS DEFINED TO RACF\nT2AUTHR  DS    CL8      THE OWNER OF THE USER PROFILE\nT2FLAG1  DS    CL1      ADSP ATTRIBUTE BYTE\nT2FLAG2  DS    CL1      SPECIAL ATTRIBUTE BYTE\nT2FLAG3  DS    CL1      OPERATIONS ATTRIBUTE BYTE\nT2FLAG4  DS    CL1      REVOKE ATTRIBUTE BYTE\nT2FLAG5  DS    CL1      GRPACC ATTRIBUTE BYTE\nT2PASSI  DS    CL1      INTERVAL THE USER'S PASSWORD IS IN EFFECT\nT2PASSD  DS    CL3      THE DATE THE PASSWORD WAS LAST CHANGED\nT2PGMNM  DS    CL20     THE NAME OF THE USER\nT2DFLTG  DS    CL8      THE DEFAULT GROUP ASSOCIATED WITH THE USER\nT2LJT    DS    CL4      TIME THE USER LAST ENTERED THE SYSTEM\nT2LJD    DS    CL3      DATE THE USER LAST ENTERED THE SYSTEM\nT2@INST  DS    CL4      OFFSET TO INSTALLATION DATA\nT2UAUDIT DS    CL1      WHETHER RACHECK AND RACDEF SVC'S LOGGED\nT2FLAG6  DS    CL1      AUDITOR ATTRIBUTE BYTE\nT2FLAG7  DS    CL1      WHETHER PASSWORD NEEDED\nT2FLAG8  DS    CL1      WHETHER OPERATOR ID CARD NEEDED\nT2@MAGS  DS    CL4      OFFSET TO OPERATOR IDENTIFICATION\nT2PWDGN  DS    CL1      CURRENT PASSWORD GENERATION NUMBER\nT2REVCT  DS    CL1      COUNT OF UNSUCCESSFUL PASSWORD ATTEMPTS\nT2@MODL  DS    CL4      OFFSET TO DATA SET MODEL PROFILE NAME\nT2SECLV  DS    CL1      USER'S SECURITY LEVEL\nT2@CTGY  DS    CL4      OFFSET TO LIST OF SECURITY CATEGORIES\nT2$CTGY  DS    CL2      TOTAL LENGTH OF SECURITY CATEGORIES\nT2#CTGY  DS    CL2      NUMBER OF SECURITY CATEGORIES\nT2@REVK  DS    CL4      OFFSET TO DATE USER WILL BE REVOKED\nT2@RESM  DS    CL4      OFFSET TO DATE USER WILL BE RESUMED\nT2LOGDY  DS    CL1      DAYS OF WEEK USER CAN LOGON\nT2@LOGT  DS    CL4      OFFSET TO TIME USER CAN LOGON\nT2URS17  DS    CL1      RESERVED\nT2@FLD   DS    CL4      OFFSET TO FIELD DATA\nT2$FLD   DS    CL2      TOTAL LENGTH OF FIELD DATA\nT2#FLD   DS    CL2      NUMBER OF FIELD DATA ENTRIES\nT2@CLAS  DS    CL4      OFFSET TO CLASSES\nT2$CLAS  DS    CL2      TOTAL LENGTH OF CLASS DATA\nT2#CLAS  DS    CL2      NUMBER OF CLASSES\nT2@COGRP DS    CL4      OFFSET TO GROUPS USER IS CONNECTED TO\nT2$COGRP DS    CL2      TOTAL LENGTH OF CONNECT GROUPS\nT2#COGRP DS    CL2      NUMBER OF GROUPS USER IS CONNECTED TO\nT2@IUSR  DS    CL4      OFFSET TO INSTALLATION USER DATA\nT2$IUSR  DS    CL2      TOTAL LENGTH OF INST USER DATA\nT2#IUSR  DS    CL2      NUMBER OF INST USERS\nT2REST   DS    0C       VARIABLE DATA\n*\nTYPE3    DSECT          CONNECT PROFILE RECORD\nT3ID     DS    CL1      NUMBER (3) CORRESPONDING TO CONNECT PROFILES\nT3NAME   DS    CL44     CONNECT ENTRY NAME\nT3VER    DS    CL1      VERSION NUMBER\nT3AUTHD  DS    CL3      THE DATE THE USER WAS CONNECTED TO THE GROUP\nT3AUTHR  DS    CL8      THE OWNER OF THE CONNECT ENTRY\nT3LJT    DS    CL4      TIME THAT RACINIT LAST ISSUED\nT3LJD    DS    CL3      DATE THAT RACINIT LAST ISSUED\nT3UACC   DS    CL1      DEFAULT UNIVERSAL ACCESS AUTHORITY\nT3INITC  DS    CL2      NUMBER OF RACINIT MACRO INST'S ISSUED\nT3FLAG1  DS    CL1      ADSP ATTRIBUTE BYTE\nT3FLAG2  DS    CL1      SPECIAL ATTRIBUTE BYTE\nT3FLAG3  DS    CL1      OPERATIONS ATTRIBUTE BYTE\nT3FLAG4  DS    CL1      REVOKE ATTRIBUTE BYTE\nT3FLAG5  DS    CL1      GRPACC ATTRIBUTE BYTE\nT3NOTRM  DS    CL1      IF USER MUST BE AUTORIZED BY PERMIT COMMAND\nT3CRS07  DS    CL1      RESERVED\nT3GRPAD  DS    CL1      AUDITOR ATTRIBUTE BYTE\nT3@REVK  DS    CL4      OFFSET TO DATE USER WILL BE REVOKED\nT3@RESM  DS    CL4      OFFSET TO DATE USER WILL BE RESUMED\nT3CRS11  DS    CL1      RESERVED\nT3CRS12  DS    CL1      RESERVED\nT3CRS13  DS    CL1      RESERVED\nT3CRS14  DS    CL1      RESERVED\nT3CRS15  DS    CL1      RESERVED\nT3CRS16  DS    CL1      RESERVED\nT3@FLD   DS    CL4      OFFSET TO FIELD DATA\nT3$FLD   DS    CL2      TOTAL LENGTH OF FIELD DATA\nT3#FLD   DS    CL2      NUMBER OF FIELD ENTRIES\nT3@IUSR  DS    CL4      OFFSET TO INSTALLATION USER DATA\nT3$IUSR  DS    CL2      TOTAL LENGTH OF INST USER DATA\nT3#IUSR  DS    CL2      NUMBER OF INST USER ENTRIES\nT3REST   DS    0C       VARIABLE DATA\n*\nTYPE4    DSECT          DATA SET PROFILE RECORD\nT4ID     DS    CL1      NUMBER (4) CORRESPONDING TO DATA SET PROFILES\nT4NAME   DS    CL44     NAME OF DATA SET ENTRY\nT4VER    DS    CL1      VERSION NUMBER\nT4CREDT  DS    CL3      DATE THE DATA SET INITIALLY DEFINED TO RACF\nT4AUTHR  DS    CL8      OWNER OF THE DATA SET\nT4UNIV   DS    CL1      UNIVERSAL ACCESS AUTHORITY FOR THE DATA SET\nT4FLAG1  DS    CL1      IDENTIFIES IF GROUP DATA SET\nT4AUDIT  DS    CL1      AUDIT FLAGS\nT4GRPNM  DS    CL8      CURRENT CONNECT GROUP OF USER WHO CREATED DS\nT4DSTYP  DS    CL4      IDENTIFIES AS VSAM, NON-VSAM, OR MODEL\nT4LEVEL  DS    CL1      DATA SET LEVEL\nT4GAUDIT DS    CL1      GLOBAL AUDIT FLAGS\nT4@INST  DS    CL4      OFFSET TO INSTALLATION DATA\nT4AUDQS  DS    CL1      AUDIT SUCCESS QUALIFIER\nT4AUDQF  DS    CL1      AUDIT FAILURES QUALIFIER\nT4GAUDQS DS    CL1      GLOBAL AUDIT SUCCESS QUALIFIER\nT4GAUDQF DS    CL1      GLOBAL AUDIT FAILURES QUALIFIER\nT4WARN   DS    CL1      WARNING ATTRIBUTE BYTE\nT4SECLV  DS    CL1      DATA SET SECURITY LEVEL\nT4@CTGY  DS    CL4      OFFSET TO LIST OF CATEGORIES\nT4$CTGY  DS    CL2      TOTAL LENGTH OF CATEGORIES\nT4#CTGY  DS    CL2      NUMBER OF CATEGORIES\nT4@NTFY  DS    CL4      OFFSET TO USERS TO BE NOTIFIED\nT4@RTPD  DS    CL4      OFFSET TO # OF DAYS PROTECTION PROVIDED\nT4@ACL2  DS    CL4      OFFSET TO AUTH PROGRAM INFO\nT4$ACL2  DS    CL2      TOTAL LENGTH OF AUTH PGM INFO\nT4#ACL2  DS    CL2      NUMBER OF AUTH PROGRAM INFO ENTRIES\nT4@FLD   DS    CL4      OFFSET TO FIELD DATA\nT4$FLD   DS    CL2      TOTAL LENGTH OF FIELD DATA\nT4#FLD   DS    CL2      NUMBER OF FIELD DATA ENTRIES\nT4@USER  DS    CL4      OFFSET TO AUTHORIZED USERS\nT4$USER  DS    CL2      TOTAL LENGTH OF USER DATA\nT4#USER  DS    CL2      NUMBER OF USERS AND GROUP AUTHORIZED\nT4@IUSR  DS    CL4      OFFSET TO INSTALLATION USER DATA\nT4$IUSR  DS    CL2      TOTAL LENGTH OF INST USER DATA\nT4#IUSR  DS    CL2      NUMBER OF INST USER ENTRIES\nT4REST   DS    0C       VARIABLE DATA\n*\nTYPE5    DSECT          GENERAL RESOURCE PROFILE RECORD\nT5ID     DS    CL1      NUMBER (5) CORRESPONDING TO GENERAL PROFILES\nT5NAME   DS    CL44     NAME OF ENTRY\nT5VER    DS    CL1      VERSION NUMBER\nT5CLAST  DS    CL1      CLASS TO WHICH RESOURCE BELONGS (FROM ID=)\nT5CLASS  DS    CL8      NAME OF CLASS\nT5DEFDT  DS    CL3      DATE THE RESOURCE DEFINED TO RACF\nT5OWNER  DS    CL8      THE OWNER OF THE RESOURCE\nT5UACC   DS    CL1      THE UNIVERSAL ACCESS AUTHORITY FOR THE RESOURCE\nT5AUDIT  DS    CL1      AUDIT FLAGS\nT5LEVEL  DS    CL1      RESOURCE LEVEL\nT5GAUDIT DS    CL1      GLOBAL AUDIT FLAGS\nT5@INST  DS    CL4      OFFSET TO INSTALLATION DATA\nT5AUDQS  DS    CL1      AUDIT SUCCESS QUALIFIER\nT5AUDQF  DS    CL1      AUDIT FAILURES QUALIFIER\nT5GAUDQS DS    CL1      GLOBAL AUDIT SUCCESS QUALIFIER\nT5GAUDQF DS    CL1      GLOBAL AUDIT FAILURES QUALIFIER\nT5WARN   DS    CL1      WARNING ATTRIBUTE BYTE\nT5RESFG  DS    CL1      RESOURCE PROFILE FLAGS\nT5@VTOC  DS    CL4      OFFSET TO TVTOC ENTRIES\nT5$VTOC  DS    CL2      TOTAL LENGTH OF TVTOC ENTRIES\nT5#VTOC  DS    CL2      NUMBER OF TVTOC ENTRIES\nT5@NTFY  DS    CL4      OFFSET TO USERS TO BE NOTIFIED\nT5LOGDY  DS    CL1      DAYS OF WEEK TERMINAL MAY NOT BE USED\nT5@LOGT  DS    CL4      OFFSET TO TIME TERMINAL MAY BE USED\nT5@LOGZ  DS    CL4      OFFSET TO TIME ZONE IN WHICH TERMINAL LOCATED\nT5@CTGY  DS    CL4      OFFSET TO CATEGORIES\nT5$CTGY  DS    CL2      TOTAL LENGTH OF CATEGORY ENTRIES\nT5#CTGY  DS    CL2      NUMBER OF CATEGORIES\nT5SECLV  DS    CL1      RESOURCE SECURITY LEVEL\nT5GRS16  DS    CL1      RESERVED\nT5GRS17  DS    CL1      RESERVED\nT5GRS18  DS    CL1      RESERVED\nT5@FLD   DS    CL4      OFFSET TO FIELD DATA\nT5$FLD   DS    CL2      TOTAL LENGTH OF FIELD DATA\nT5#FLD   DS    CL2      NUMBER OF FIELD DATA ENTRIES\nT5@APPL  DS    CL4      OFFSET TO APPLICATION DATA\nT5@MEMS  DS    CL4      OFFSET TO MEMBERS\nT5$MEMS  DS    CL2      TOTAL LENGTH OF MEMBER ENTRIES\nT5#MEMS  DS    CL2      NUMBER OF MEMBERS\nT5@VOLS  DS    CL4      OFFSET TO VOLUMES\nT5$VOLS  DS    CL2      TOTAL LENGTH OF VOLUME ENTRIES\nT5#VOLS  DS    CL2      NUMBER OF VOLUMES IN TAPE VOLUME SET\nT5@USER  DS    CL4      OFFSET TO AUTHORIZED USERS\nT5$USER  DS    CL2      TOTAL LENGTH OF USERS ENTRIES\nT5#USER  DS    CL2      NUMBER OF AUTHORIZED USERS\nT5@IUSR  DS    CL4      OFFSET TO INSTALLATION USER DATA\nT5$IUSR  DS    CL2      TOTAL LENGTH OF INST USER ENTRIES\nT5#IUSR  DS    CL2      NUMBER OF INST USER ENTRIES\nT5REST   DS    0C       VARIABLE DATA\n*\n         ICHPRCVT\n         CVT   DSECT=YES\n*\n         END   RACFSEQ\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFSEQ#": {"ttr": 13571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02n\\x02n\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 622, "newlines": 622, "modlines": 0, "user": "DELUXE"}, "text": "1                      RECORDS OUTPUT BY 'RACFSEQ'\n-TYPE1 - GROUP PROFILE RECORD\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n   0   0 | TYPE1LEN |    2   | RECORD LENGTH\n ---------------------------------------------------------------------------\n   2   2 | TYPE1SEG |    2   | SEGMENT DESCRIPTOR\n ---------------------------------------------------------------------------\n   4   4 | T1ID     |    1   | NUMBER (1) CORRESPONDING TO GROUP PROFILES\n ---------------------------------------------------------------------------\n   5   5 | T1NAME   |   44   | NAME OF GROUP PROFILE.\n ---------------------------------------------------------------------------\n  49  31 | T1VER    |    1   | VERSION NUMBER\n ---------------------------------------------------------------------------\n  50  32 | T1SUPGP  |    8   | THE SUPERIOR GROUP TO THIS GROUP\n ---------------------------------------------------------------------------\n  58  3A | T1AUTHD  |    3   | THE DATE THE GROUP WAS CREATED\n ---------------------------------------------------------------------------\n  61  3D | T1AUTHR  |    8   | THE OWNER OF THE GROUP\n ---------------------------------------------------------------------------\n  69  45 | T1INITC  |    2   | RESERVED\n ---------------------------------------------------------------------------\n  71  47 | T1UACC   |    1   | THE UNIVERSAL GROUP AUTHORITY\n ---------------------------------------------------------------------------\n  72  48 | T1NOTRM  |    1   | IDENTIFIES IF USER MUST BE AUTHORIZED FOR\n         |          |        |    READ TO ACCESS A TERMINAL.\n ---------------------------------------------------------------------------\n  73  49 | T1@INST  |    4   | OFFSET TO INSTALLATION DATA\n ---------------------------------------------------------------------------\n  77  4D | T1@MODL  |    4   | OFFSET TO DATA SET MODEL PROFILE NAME\n ---------------------------------------------------------------------------\n  81  51 | T1GRS05  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  82  52 | T1GRS06  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  83  53 | T1GRS07  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  84  54 | T1GRS08  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  85  55 | T1GRS09  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  86  56 | T1GRS10  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  87  57 | T1GRS11  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  88  58 | T1GRS12  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  89  59 | T1GRS13  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  90  5A | T1GRS14  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  91  5B | T1@FLD   |    4   | OFFSET TO FIELD DATA\n ---------------------------------------------------------------------------\n  95  5F | T1$FLD   |    2   | TOTAL LENGTH OF FIELD DATA\n ---------------------------------------------------------------------------\n  97  61 | T1#FLD   |    2   | NUMBER OF FIELD DATA ENTRIES\n ---------------------------------------------------------------------------\n  99  63 | T1@SUBG  |    4   | OFFSET TO SUBGROUP NAMES\n ---------------------------------------------------------------------------\n 103  67 | T1$SUBG  |    2   | TOTAL LENGTH OF SUPGROUPS\n ---------------------------------------------------------------------------\n 105  69 | T1#SUBG  |    2   | NUMBER OF SUPGROUPS OF THE GROUP\n ---------------------------------------------------------------------------\n 107  6B | T1@USER  |    4   | OFFSET TO USER DATA\n ---------------------------------------------------------------------------\n 111  6F | T1$USER  |    2   | TOTAL LENGTH OF USER DATA\n ---------------------------------------------------------------------------\n 113  71 | T1#USER  |    2   | NUMBER OF USERS CONNECTED TO THE GROUP\n ---------------------------------------------------------------------------\n 115  73 | T1@IUSR  |    4   | OFFSET TO INSTALLATION USER DATA\n ---------------------------------------------------------------------------\n 119  77 | T1$IUSR  |    2   | TOTAL LENGTH OF INST USER DATA\n ---------------------------------------------------------------------------\n 121  79 | T1#IUSR  |    2   | NUMBER OF INST USER ENTRIES\n ---------------------------------------------------------------------------\n 123  7B | T1REST   |  VAR   | VARIABLE DATA\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n0VARIABLE DATA:     (* = REPEAT GROUP)\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n T1@INST | T1INST   |  VAR   | INSTALLATION DATA (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T1@MODL | T1MODL   |  VAR   | DATA SET MODEL PROFILE NAME (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T1@FLD  | T1FLDNM  |    8   | * FIELD NAME\n         | T1FLDV   |  VAR   | * FIELD VALUE (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T1FLDFG  |    1   | * FIELD FLAG\n ---------------------------------------------------------------------------\n T1@SUBG | T1SUBNM  |    8   | * SUBGROUP NAME\n ---------------------------------------------------------------------------\n T1@USER | T1USER   |    8   | * USERID OF USER CONNECTED TO GROUP\n         | T1USERAC |    1   | * GROUP AUTHORITY FOR USER\n         | T1ACSCNT |    1   | * RESERVED\n ---------------------------------------------------------------------------\n T1@IUSR | T1IUSRNM |    8   | * INSTALLATION USER NAME\n         | T1IUSRDT |  VAR   | * INSTALLATION USER DATA (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T1IUSRFG |    1   | * INSTALLATION USER FLAG\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n1TYPE2 - USER PROFILE RECORD\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n   0   0 | TYPE2LEN |    2   | RECORD LENGTH\n ---------------------------------------------------------------------------\n   2   2 | TYPE2SEG |    2   | SEGMENT DESCRIPTOR\n ---------------------------------------------------------------------------\n   4   4 | T2ID     |    1   | THE NUMBER (2) CORRESPONDING TO USER PROFILES\n ---------------------------------------------------------------------------\n   5   5 | T2NAME   |   44   | NAME OF USER PROFILE\n ---------------------------------------------------------------------------\n  49  31 | T2VER    |    1   | VERSION NUMBER\n ---------------------------------------------------------------------------\n  50  32 | T2AUTHD  |    3   | THE DATE THE USER WAS DEFINED TO RACF\n ---------------------------------------------------------------------------\n  53  35 | T2AUTHR  |    8   | THE OWNER OF THE USER PROFILE\n ---------------------------------------------------------------------------\n  61  3D | T2FLAG1  |    1   | ADSP ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  62  3E | T2FLAG2  |    1   | SPECIAL ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  63  3F | T2FLAG3  |    1   | OPERATIONS ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  64  40 | T2FLAG4  |    1   | REVOKE ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  65  41 | T2FLAG5  |    1   | GRPACC ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  66  42 | T2PASSI  |    1   | INTERVAL THE USER'S PASSWORD IS IN EFFECT\n ---------------------------------------------------------------------------\n  67  43 | T2PASSD  |    3   | THE DATE THE PASSWORD WAS LAST CHANGED\n ---------------------------------------------------------------------------\n  70  46 | T2PGMNM  |   20   | THE NAME OF THE USER\n ---------------------------------------------------------------------------\n  90  5A | T2DFLTG  |    8   | THE DEFAULT GROUP ASSOCIATED WITH THE USER\n ---------------------------------------------------------------------------\n  98  62 | T2LJT    |    4   | TIME THE USER LAST ENTERED THE SYSTEM\n ---------------------------------------------------------------------------\n 102  66 | T2LJD    |    3   | DATE THE USER LAST ENTERED THE SYSTEM\n ---------------------------------------------------------------------------\n 105  69 | T2@INST  |    4   | OFFSET TO INSTALLATION DATA\n ---------------------------------------------------------------------------\n 109  6D | T2UAUDIT |    1   | WHETHER RACHECK AND RACDEF SVC'S LOGGED\n ---------------------------------------------------------------------------\n 110  6E | T2FLAG6  |    1   | AUDITOR ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n 111  6F | T2FLAG7  |    1   | WHETHER PASSWORD NEEDED\n ---------------------------------------------------------------------------\n 112  70 | T2FLAG8  |    1   | WHETHER OPERATOR ID CARD NEEDED\n ---------------------------------------------------------------------------\n 113  71 | T2@MAGS  |    4   | OFFSET TO OPERATOR IDENTIFICATION\n ---------------------------------------------------------------------------\n 117  75 | T2PWDGN  |    1   | CURRENT PASSWORD GENERATION NUMBER\n ---------------------------------------------------------------------------\n 118  76 | T2REVCT  |    1   | COUNT OF UNSUCCESSFUL PASSWORD ATTEMPTS\n ---------------------------------------------------------------------------\n 119  77 | T2@MODL  |    4   | OFFSET TO DATA SET MODEL PROFILE NAME\n ---------------------------------------------------------------------------\n 123  7B | T2SECLV  |    1   | USER'S SECURITY LEVEL\n ---------------------------------------------------------------------------\n 124  7C | T2@CTGY  |    4   | OFFSET TO LIST OF SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n 128  80 | T2$CTGY  |    2   | TOTAL LENGTH OF SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n 130  82 | T2#CTGY  |    2   | NUMBER OF SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n 132  84 | T2@REVK  |    4   | OFFSET TO DATE USER WILL BE REVOKED\n ---------------------------------------------------------------------------\n 136  88 | T2@RESM  |    4   | OFFSET TO DATE USER WILL BE RESUMED\n ---------------------------------------------------------------------------\n 140  8C | T2LOGDY  |    1   | DAYS OF WEEK USER CAN LOGON\n ---------------------------------------------------------------------------\n 141  8D | T2@LOGT  |    4   | OFFSET TO TIME USER CAN LOGON\n ---------------------------------------------------------------------------\n 145  91 | T2URS17  |    1   | RESERVED\n ---------------------------------------------------------------------------\n 146  92 | T2@FLD   |    4   | OFFSET TO FIELD DATA\n ---------------------------------------------------------------------------\n 150  96 | T2$FLD   |    2   | TOTAL LENGTH OF FIELD DATA\n ---------------------------------------------------------------------------\n 152  98 | T2#FLD   |    2   | NUMBER OF FIELD DATA ENTRIES\n ---------------------------------------------------------------------------\n 154  9A | T2@CLAS  |    4   | OFFSET TO CLASSES\n ---------------------------------------------------------------------------\n 158  9E | T2$CLAS  |    2   | TOTAL LENGTH OF CLASS DATA\n ---------------------------------------------------------------------------\n 160  A0 | T2#CLAS  |    2   | NUMBER OF CLASSES\n ---------------------------------------------------------------------------\n 162  A2 | T2@COGRP |    4   | OFFSET TO GROUPS USER IS CONNECTED TO\n ---------------------------------------------------------------------------\n 166  A6 | T2$COGRP |    2   | TOTAL LENGTH OF CONNECT GROUPS\n ---------------------------------------------------------------------------\n 168  A8 | T2#COGRP |    2   | NUMBER OF GROUPS USER IS CONNECTED TO\n ---------------------------------------------------------------------------\n 170  AA | T2@IUSR  |    4   | OFFSET TO INSTALLATION USER DATA\n ---------------------------------------------------------------------------\n 174  AE | T2$IUSR  |    2   | TOTAL LENGTH OF INST USER DATA\n ---------------------------------------------------------------------------\n 176  B0 | T2#IUSR  |    2   | NUMBER OF INST USERS\n ---------------------------------------------------------------------------\n 178  B2 | T2REST   |  VAR   | VARIABLE DATA\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n0VARIABLE DATA:     (* = REPEAT GROUP)\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n T2@INST | T2INST   |  VAR   | INSTALLATION DATA (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T2@MAGS | T2MAGS   |  VAR   | THE OPERATOR IDENTIFICATION ASSOCIATED WITH\n         |          |        |    THE USER (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T2@MODL | T2MODL   |  VAR   | DATA SET MODEL PROFILE NAME (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T2@CTGY | T2CTGY   |    2   | * SECURITY CATEGORY TO WHICH USER HAS ACCESS\n ---------------------------------------------------------------------------\n T2@REVK | T2REVK   |  VAR   | THE DATE THE USER WILL BE REVOKED\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T2@RESM | T2RESM   |  VAR   | THE DATE THE USER WILL BE RESUMED\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T2@LOGT | T2LOGT   |  VAR   | THE TIME OF THE DAY THE USER CAN LOGON\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T2@FLD  | T2FLDNM  |    8   | * FIELD NAME\n         | T2FLDV   |  VAR   | * FIELD VALUE (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T2FLDFG  |    1   | * FIELD FLAG\n ---------------------------------------------------------------------------\n T2@CLAS | T2SUBNM  |    8   | * CLASS IN WHICH USER IS ALLOWED TO DEFINE\n         |          |        | *    PROFILES.\n ---------------------------------------------------------------------------\n T2@COGRP| T2COGRP  |    8   | * GROUP THE USER IS CONNECTED TO\n ---------------------------------------------------------------------------\n T2@IUSR | T2IUSRNM |    8   | * INSTALLATION USER NAME\n         | T2IUSRDT |  VAR   | * INSTALLATION USER DATA (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T2IUSRFG |    1   | * INSTALLATION USER FLAG\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n1TYPE3 - CONNECT PROFILE RECORD\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n   0   0 | TYPE3LEN |    2   | RECORD LENGTH\n ---------------------------------------------------------------------------\n   2   2 | TYPE3SEG |    2   | SEGMENT DESCRIPTOR\n ---------------------------------------------------------------------------\n   4   4 | T3ID     |    1   | NUMBER (3) CORRESPONDING TO CONNECT PROFILES\n ---------------------------------------------------------------------------\n   5   5 | T3NAME   |   44   | CONNECT PROFILE NAME\n ---------------------------------------------------------------------------\n  49  31 | T3VER    |    1   | VERSION NUMBER\n ---------------------------------------------------------------------------\n  50  32 | T3AUTHD  |    3   | THE DATE THE USER WAS CONNECTED TO THE GROUP\n ---------------------------------------------------------------------------\n  53  35 | T3AUTHR  |    8   | THE OWNER OF THE CONNECT ENTRY\n ---------------------------------------------------------------------------\n  61  3D | T3LJT    |    4   | TIME THAT RACINIT LAST ISSUED\n ---------------------------------------------------------------------------\n  65  41 | T3LJD    |    3   | DATE THAT RACINIT LAST ISSUED\n ---------------------------------------------------------------------------\n  68  44 | T3UACC   |    1   | DEFAULT UNIVERSAL ACCESS AUTHORITY\n ---------------------------------------------------------------------------\n  69  45 | T3INITC  |    2   | NUMBER OF RACINIT MACRO INST'S ISSUED\n ---------------------------------------------------------------------------\n  71  47 | T3FLAG1  |    1   | ADSP ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  72  48 | T3FLAG2  |    1   | SPECIAL ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  73  49 | T3FLAG3  |    1   | OPERATIONS ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  74  4A | T3FLAG4  |    1   | REVOKE ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  75  4B | T3FLAG5  |    1   | GRPACC ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  76  4C | T3NOTRM  |    1   | IF USER MUST BE AUTHORIZE FOR READ TO\n         |          |        |    ACCESS A TERMINAL.\n ---------------------------------------------------------------------------\n  77  4D | T3CRS07  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  78  4E | T3GRPAD  |    1   | AUDITOR ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  79  4F | T3@REVK  |    4   | OFFSET TO DATE USER WILL BE REVOKED\n ---------------------------------------------------------------------------\n  83  53 | T3@RESM  |    4   | OFFSET TO DATE USER WILL BE RESUMED\n ---------------------------------------------------------------------------\n  87  57 | T3CRS11  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  88  58 | T3CRS12  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  89  59 | T3CRS13  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  90  5A | T3CRS14  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  91  5B | T3CRS15  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  92  5C | T3CRS16  |    1   | RESERVED\n ---------------------------------------------------------------------------\n  93  5D | T3@FLD   |    4   | OFFSET TO FIELD DATA\n ---------------------------------------------------------------------------\n  97  61 | T3$FLD   |    2   | TOTAL LENGTH OF FIELD DATA\n ---------------------------------------------------------------------------\n  99  63 | T3#FLD   |    2   | NUMBER OF FIELD ENTRIES\n ---------------------------------------------------------------------------\n 101  65 | T3@IUSR  |    4   | OFFSET TO INSTALLATION USER DATA\n ---------------------------------------------------------------------------\n 105  69 | T3$IUSR  |    2   | TOTAL LENGTH OF INST USER DATA\n ---------------------------------------------------------------------------\n 107  6B | T3#IUSR  |    2   | NUMBER OF INST USER ENTRIES\n ---------------------------------------------------------------------------\n 109  6D | T3REST   |  VAR   | VARIABLE DATA\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n0VARIABLE DATA:     (* = REPEAT GROUP)\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n T3@REVK | T3REVK   |  VAR   | THE DATE THE USER WILL BE REVOKED\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T3@RESM | T3RESM   |  VAR   | THE DATE THE USER WILL BE RESUMED\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T3@FLD  | T3FLDNM  |    8   | * FIELD NAME\n         | T3FLDV   |  VAR   | * FIELD VALUE (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T3FLDFG  |    1   | * FIELD FLAG\n ---------------------------------------------------------------------------\n T3@IUSR | T3IUSRNM |    8   | * INSTALLATION USER NAME\n         | T3IUSRDT |  VAR   | * INSTALLATION USER DATA (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T3IUSRFG |    1   | * INSTALLATION USER FLAG\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n1TYPE4 - DATA SET PROFILE RECORD\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n   0   0 | TYPE4LEN |    2   | RECORD LENGTH\n ---------------------------------------------------------------------------\n   2   2 | TYPE4SEG |    2   | SEGMENT DESCRIPTOR\n ---------------------------------------------------------------------------\n   4   4 | T4ID     |    1   | NUMBER (4) CORRESPONDING TO DATA SET PROFILES\n ---------------------------------------------------------------------------\n   5   5 | T4NAME   |   44   | NAME OF DATA SET PROFILE\n ---------------------------------------------------------------------------\n  49  31 | T4VER    |    1   | VERSION NUMBER\n ---------------------------------------------------------------------------\n  50  32 | T4CREDT  |    3   | DATE THE DATA SET INITIALLY DEFINED\n ---------------------------------------------------------------------------\n  53  35 | T4AUTHR  |    8   | OWNER OF THE DATA SET\n ---------------------------------------------------------------------------\n  61  3D | T4UNIV   |    1   | UNIVERSAL ACCESS AUTHORITY FOR THE DATA SET\n ---------------------------------------------------------------------------\n  62  3E | T4FLAG1  |    1   | IDENTIFIES IF DATA SET IS A GROUP DATA SET\n ---------------------------------------------------------------------------\n  63  3F | T4AUDIT  |    1   | AUDIT FLAGS\n ---------------------------------------------------------------------------\n  64  40 | T4GRPNM  |    8   | CURRENT CONNECT GROUP OF USER WHO CREATED\n         |          |        |    THIS DATA SET.\n ---------------------------------------------------------------------------\n  72  48 | T4DSTYP  |    4   | IDENTIFIES AS VSAM, NON-VSAM, OR MODEL\n ---------------------------------------------------------------------------\n  76  4C | T4LEVEL  |    1   | DATA SET LEVEL\n ---------------------------------------------------------------------------\n  77  4D | T4GAUDIT |    1   | GLOBAL AUDIT FLAGS\n ---------------------------------------------------------------------------\n  78  4E | T4@INST  |    4   | OFFSET TO INSTALLATION DATA\n ---------------------------------------------------------------------------\n  82  52 | T4AUDQS  |    1   | AUDIT SUCCESS QUALIFIER\n ---------------------------------------------------------------------------\n  83  53 | T4AUDQF  |    1   | AUDIT FAILURES QUALIFIER\n ---------------------------------------------------------------------------\n  84  54 | T4GAUDQS |    1   | GLOBAL AUDIT SUCCESS QUALIFIER\n ---------------------------------------------------------------------------\n  85  55 | T4GAUDQF |    1   | GLOBAL AUDIT FAILURES QUALIFIER\n ---------------------------------------------------------------------------\n  86  56 | T4WARN   |    1   | WARNING ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  87  57 | T4SECLV  |    1   | DATA SET SECURITY LEVEL\n ---------------------------------------------------------------------------\n  88  58 | T4@CTGY  |    4   | OFFSET TO SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n  92  5C | T4$CTGY  |    2   | TOTAL LENGTH OF SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n  94  5E | T4#CTGY  |    2   | NUMBER OF SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n  96  60 | T4@NTFY  |    4   | OFFSET TO USERS TO BE NOTIFIED\n ---------------------------------------------------------------------------\n 100  64 | T4@RTPD  |    4   | OFFSET TO # OF DAYS PROTECTION PROVIDED\n ---------------------------------------------------------------------------\n 104  68 | T4@ACL2  |    4   | OFFSET TO AUTHORIZED PROGRAM INFORMATION\n ---------------------------------------------------------------------------\n 108  6C | T4$ACL2  |    2   | TOTAL LENGTH OF AUTHORIZED PROGRAM INFO\n ---------------------------------------------------------------------------\n 110  6E | T4#ACL2  |    2   | NUMBER OF AUTHORIZED PROGRAMS ENTRIES\n ---------------------------------------------------------------------------\n 112  70 | T4@FLD   |    4   | OFFSET TO FIELD DATA\n ---------------------------------------------------------------------------\n 116  74 | T4$FLD   |    2   | TOTAL LENGTH OF FIELD DATA\n ---------------------------------------------------------------------------\n 118  76 | T4#FLD   |    2   | NUMBER OF FIELD DATA ENTRIES\n ---------------------------------------------------------------------------\n 120  78 | T4@USER  |    4   | OFFSET TO AUTHORIZED USERS AND GROUPS\n ---------------------------------------------------------------------------\n 124  7C | T4$USER  |    2   | TOTAL LENGTH OF USER DATA\n ---------------------------------------------------------------------------\n 126  7E | T4#USER  |    2   | NUMBER OF USERS AND GROUPS AUTHORIZED\n ---------------------------------------------------------------------------\n 128  80 | T4@IUSR  |    4   | OFFSET TO INSTALLATION USER DATA\n ---------------------------------------------------------------------------\n 132  84 | T4$IUSR  |    2   | TOTAL LENGTH OF INST USER DATA\n ---------------------------------------------------------------------------\n 134  86 | T4#IUSR  |    2   | NUMBER OF INST USER ENTRIES\n ---------------------------------------------------------------------------\n 136  88 | T4REST   |  VAR   | VARIABLE DATA\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n0VARIABLE DATA:     (* = REPEAT GROUP)\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n T4@INST | T4INST   |  VAR   | INSTALLATION DATA (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T2@CTGY | T2CTGY   |    2   | * SECURITY CATEGORY TO WHICH USER HAS ACCESS\n ---------------------------------------------------------------------------\n T4@NTFY | T4NTFY   |  VAR   | USER TO BE NOTIFIED WHEN ACCESS VIOLATIONS\n         |          |        |   OCCUR AGAINST A DATA SET PROTECTED BY\n         |          |        |   THIS PROFILE.\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T4@RTPD | T4RTPD   |  VAR   | THE NUMBER OF DAYS PROTECTION WILL BE\n         |          |        |   PROVIDED FOR THE DATA SET.\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T4@ACL2 | T4PROG   |    8   | * NAME OF PROGRAM CURRENTLY AUTHORIZED TO\n         |          |        | *   ACCESS THE DATA SET.\n         | T4USER   |    8   | * USERID OR GROUP\n         | T4PRGAC  |    8   | * ACCESS AUTHORITY OF THE PROGRAM\n         | T4ACSC   |    2   | * ACCESS COUNT\n         | T4VAR    |  VAR   | * RESERVED\n         |          |        | *    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T4@FLD  | T4FLDNM  |    8   | * FIELD NAME\n         | T4FLDV   |  VAR   | * FIELD VALUE (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T4FLDFG  |    1   | * FIELD FLAG\n ---------------------------------------------------------------------------\n T4@USER | T4USER   |    8   | * USER OR GROUP AUTHORIZED TO ACCESS DATA SET\n         | T4USERAC |    1   | * ACCESS AUTHORITY THE USER OR GROUP HAS FOR\n         |          |        | *    THE DATA SET.\n ---------------------------------------------------------------------------\n T4@IUSR | T4IUSRNM |    8   | * INSTALLATION USER NAME\n         | T4IUSRDT |  VAR   | * INSTALLATION USER DATA (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T4IUSRFG |    1   | * INSTALLATION USER FLAG\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n1TYPE5 - GENERAL RESOURCE PROFILE RECORD\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n   0   0 | TYPE5LEN |    2   | RECORD LENGTH\n ---------------------------------------------------------------------------\n   2   2 | TYPE5SEG |    2   | SEGMENT DESCRIPTOR\n ---------------------------------------------------------------------------\n   4   4 | T5ID     |    1   | NUMBER (5) CORRESPONDING TO GENERAL RESOURCE\n         |          |        |    PROFILE\n ---------------------------------------------------------------------------\n   5   5 | T5NAME   |   44   | NAME OF GENERAL RESOURCE PROFILE\n ---------------------------------------------------------------------------\n  49  31 | T5VER    |    1   | VERSION NUMBER\n ---------------------------------------------------------------------------\n  50  32 | T5CLAST  |    1   | CLASS TO WHICH RESOURCE BELONGS\n ---------------------------------------------------------------------------\n  51  33 | T5CLASS  |    8   | NAME OF CLASS\n ---------------------------------------------------------------------------\n  59  3B | T5DEFDT  |    3   | DATE THE RESOURCE DEFINED TO RACF\n ---------------------------------------------------------------------------\n  62  3E | T5OWNER  |    8   | THE OWNER OF THE RESOURCE\n ---------------------------------------------------------------------------\n  70  46 | T5UACC   |    1   | THE UNIVERSAL ACCESS AUTHORITY FOR RESOURCE\n ---------------------------------------------------------------------------\n  71  47 | T5AUDIT  |    1   | AUDIT FLAGS\n ---------------------------------------------------------------------------\n  72  48 | T5LEVEL  |    1   | RESOURCE LEVEL\n ---------------------------------------------------------------------------\n  73  49 | T5GAUDIT |    1   | GLOBAL AUDIT FLAGS\n ---------------------------------------------------------------------------\n  74  4A | T5@INST  |    4   | OFFSET TO INSTALLATION DATA\n ---------------------------------------------------------------------------\n  78  4E | T5AUDQS  |    1   | AUDIT SUCCESS QUALIFIER\n ---------------------------------------------------------------------------\n  79  4F | T5AUDQF  |    1   | AUDIT FAILURES QUALIFIER\n ---------------------------------------------------------------------------\n  80  50 | T5GAUDQS |    1   | GLOBAL AUDIT SUCCESS QUALIFIER\n ---------------------------------------------------------------------------\n  81  51 | T5GAUDQF |    1   | GLOBAL AUDIT FAILURES QUALIFIER\n ---------------------------------------------------------------------------\n  82  52 | T5WARN   |    1   | WARNING ATTRIBUTE BYTE\n ---------------------------------------------------------------------------\n  83  53 | T5RESFG  |    1   | RESOURCE PROFILE FLAGS\n ---------------------------------------------------------------------------\n  84  54 | T5@VTOC  |    4   | OFFSET TO TVTOC ENTRIES\n ---------------------------------------------------------------------------\n  88  58 | T5$VTOC  |    2   | TOTAL LENGTH OF TVTOC ENTRIES\n ---------------------------------------------------------------------------\n  90  5A | T5#VTOC  |    2   | NUMBER OF TVTOC ENTRIES\n ---------------------------------------------------------------------------\n  92  5C | T5@NTFY  |    4   | OFFSET TO USERS TO BE NOTIFIED\n ---------------------------------------------------------------------------\n  96  60 | T5LOGDY  |    1   | DAYS OF WEEK TERMINAL MAY NOT BE USED\n ---------------------------------------------------------------------------\n  97  61 | T5@LOGT  |    4   | OFFSET TO TIME TERMINAL MAY BE USED\n ---------------------------------------------------------------------------\n 101  65 | T5@LOGZ  |    4   | OFFSET TO TIME ZONE IN WHICH TERMINAL LOCATED\n ---------------------------------------------------------------------------\n 105  69 | T5@CTGY  |    4   | OFFSET TO SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n 109  6D | T5$CTGY  |    2   | TOTAL LENGTH OF SECURITY CATEGORIES\n ---------------------------------------------------------------------------\n 111  6F | T5#CTGY  |    2   | NUMBER OF SECURITY CATEGORY ENTRIES\n ---------------------------------------------------------------------------\n 113  71 | T5SECLV  |    1   | RESOURCE SECURITY LEVEL\n ---------------------------------------------------------------------------\n 114  72 | T5GRS16  |    1   | RESERVED\n ---------------------------------------------------------------------------\n 115  73 | T5GRS17  |    1   | RESERVED\n ---------------------------------------------------------------------------\n 116  74 | T5GRS18  |    1   | RESERVED\n ---------------------------------------------------------------------------\n 117  75 | T5@FLD   |    4   | OFFSET TO FIELD DATA\n ---------------------------------------------------------------------------\n 121  79 | T5$FLD   |    2   | TOTAL LENGTH OF FIELD DATA\n ---------------------------------------------------------------------------\n 123  7B | T5#FLD   |    2   | NUMBER OF FIELD DATA ENTRIES\n ---------------------------------------------------------------------------\n 125  7D | T5@APPL  |    4   | OFFSET TO APPLICATION DATA\n ---------------------------------------------------------------------------\n 129  81 | T5@MEMS  |    4   | OFFSET TO MEMBERS\n ---------------------------------------------------------------------------\n 133  85 | T5$MEMS  |    2   | TOTAL LENGTH OF MEMBER ENTRIES\n ---------------------------------------------------------------------------\n 135  87 | T5#MEMS  |    2   | NUMBER OF MEMBERS\n ---------------------------------------------------------------------------\n 137  89 | T5@VOLS  |    4   | OFFSET TO VOLUMES\n ---------------------------------------------------------------------------\n 141  8D | T5$VOLS  |    2   | TOTAL LENGTH OF VOLUME ENTRIES\n ---------------------------------------------------------------------------\n 143  8F | T5#VOLS  |    2   | NUMBER OF VOLUMES IN TAPE VOLUME SET\n ---------------------------------------------------------------------------\n 145  91 | T5@USER  |    4   | OFFSET TO AUTHORIZED USERS\n ---------------------------------------------------------------------------\n 149  95 | T5$USER  |    2   | TOTAL LENGTH OF USERS ENTRIES\n ---------------------------------------------------------------------------\n 151  97 | T5#USER  |    2   | NUMBER OF AUTHORIZED USERS\n ---------------------------------------------------------------------------\n 153  99 | T5@IUSR  |    4   | OFFSET TO INSTALLATION USER DATA\n ---------------------------------------------------------------------------\n 157  9D | T5$IUSR  |    2   | TOTAL LENGTH OF INST USER ENTRIES\n ---------------------------------------------------------------------------\n 159  9F | T5#IUSR  |    2   | NUMBER OF INST USER ENTRIES\n ---------------------------------------------------------------------------\n 161  A1 | T5REST   |  VAR   | VARIABLE DATA\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n0VARIABLE DATA:     (* = REPEAT GROUP)\n0OFFSETS | NAME     | LENGTH | DESCRIPTION\n ***************************************************************************\n T5@INST | T5INST   |  VAR   | INSTALLATION DATA (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T5@VTOC | T5VTSEQ  |    2   | * FILE SEQUENCE NUMBER OF TAPE DATA SET\n         | T5VTCRD  |    2   | * DATE THE DATA SET WAS CREATED\n         | T5VTFLG  |    1   | * DATA SET PROFILE FLAG\n         | T5VTDSN  |  VAR   | * THE RACF INTERNAL NAME\n         |          |        | *    FIRST BYTE = LENGTH\n         | T5VTVOL  |  VAR   | * VOLUMES ON WHICH THE TAPE DATA SET RESIDES\n         |          |        | *    FIRST BYTE = LENGTH\n         | T5VTCDS  |  VAR   | * NAME USED WHEN CREATING THE TAPE DATA SET\n         |          |        | *    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T5@NTFY | T5NTFY   |  VAR   | USER TO BE NOTIFIED WHEN ACCESS VIOLATIONS\n         |          |        |   OCCUR AGAINST RESOURCE PROTECTED BY THIS\n         |          |        |   PROFILE.\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T5@LOGT | T5LOGT   |  VAR   | THE TIME OF THE DAY THE TERMINAL MAY BE USED\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T5@LOGZ | T5LOGZ   |  VAR   | TIME ZONE IN WHICH THE TERMINAL IS LOCATED\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T5@CTGY | T5CTGY   |    2   | * SECURITY CATEGORY TO WHICH USER HAS ACCESS\n ---------------------------------------------------------------------------\n T5@FLD  | T5FLDNM  |    8   | * FIELD NAME\n         | T5FLDV   |  VAR   | * FIELD VALUE (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T5FLDFG  |    1   | * FIELD FLAG\n ---------------------------------------------------------------------------\n T5@APPL | T5APPL   |  VAR   | APPLICATION DATA (MAX=255)\n         |          |        |    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T5@MEMS | T5MEMS   |  VAR   | * RESOURCE GROUP MEMBER (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n ---------------------------------------------------------------------------\n T5@VOLS | T5VOLS   |    6   | * VOLUME SERIAL OF VOLUME IN TAPE VOLUME SET\n ---------------------------------------------------------------------------\n T5@USER | T5USER   |    8   | * USERID OR GROUP AUTHORIZED TO ACCESS THE\n         |          |        | *    DATA SET.\n         | T5USERAC |    1   | * ACCESS AUTHORITY THE USER OR GROUP HAS FOR\n         |          |        | *    THE DATA SET.\n ---------------------------------------------------------------------------\n T5@IUSR | T5IUSRNM |    8   | * INSTALLATION USER NAME\n         | T5IUSRDT |  VAR   | * INSTALLATION USER DATA (MAX=255)\n         |          |        | *    FIRST BYTE = LENGTH\n         | T5IUSRFG |    1   | * INSTALLATION USER FLAG\n ---------------------------------------------------------------------------\n ---------------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFULST": {"ttr": 13827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01'\\x01'\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 295, "newlines": 295, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'RACFULST - GEN CLIST FOR DELETING RACF USERS'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = RACFULST                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = GENERATE CLIST TO DELETE ALL         *\n*                BUT A FEW SPECIAL RACF USERS AND THEIR MODEL         *\n*                DATA SETS.                                           *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CREATES CLIST WHICH WILL ALLOW A SYSTEM              *\n*                PROGRAMMER TO DELETE ALL BUT A FEW SELECTED          *\n*                USER IDS FROM THE RACF DATA SET.  IT WILL            *\n*                ALSO DELETE THE RACF DESCRIPTIONS FOR THEIR          *\n*                ASSOCIATED MODEL DATA SETS.                          *\n*                                                                     *\n*                OPERATION =                                          *\n*                   OPEN THE SPECIFIED OUTPUT FILE (FOR CLIST)        *\n*                   LOCATE A USER IN THE RACF DATA SET AND RETRIEVE   *\n*                     ITS MODEL DATA SET NAME IF PRESENT              *\n*                   COMPARE USER ID TO SPECIAL USER IDS               *\n*                   IF MATCH, LOOP BACK TO LOCATE NEXT USER           *\n*                   IF NO MATCH, WRITE LINE TO DELETE USER ID INTO    *\n*                     THE CLIST DATA SET                              *\n*                   IF MODEL DATA SET EXISTS, WRITE LINE TO DELETE    *\n*                     IT INTO THE CLIST DATA SET                      *\n*                   LOOP TO LOCATE NEXT USER                          *\n*                   CLOSE OUTPUT FILE                                 *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2       = LINKAGE & WORK REGISTER      *\n*                    REGISTERS 4 TO 11 = WORK REGISTERS               *\n*                    REGISTER  12      = ADDRESSABILITY TO RACFULST   *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, GETMAIN, OPEN, CLOSE, ICHEINTY,                *\n*                ICHEACTN, PUT                                        *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                03/16/84  WRITTEN.      BC.                          *\n*                05/14/84  MODIFIED OUTPUT TO CLIST SO THAT MODEL     *\n*                          DATA SETS ARE DELETED BEFORE DELETING      *\n*                          THE USER.     BC.                          *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*   //JOBNAME JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,         *\n*   //        MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????            *\n*   //STEP1 EXEC  PGM=RACFULST                                        *\n*   //CLIST DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTS3,UNIT=3380,        *\n*   //         DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),                   *\n*   //         DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)                  *\n*                                                                     *\n***********************************************************************\n*\n         PRINT NOGEN\nRACFULST CSECT\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15\n         USING RACFULST,R12            ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE PTR TO WORK AREA\n         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA\n         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA\n         LR    R13,R10                 LOAD ADDR OF CURRENT SA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n*\n*  INITIALIZE THE WORK AREA.  OPEN THE CLIST OUTPUT FILE.  WRITE\n*    THE FIRST 2 LINE OF THE CLIST INTO THE OUTPUT FILE.\n*\nINIT     EQU   *\n         LA    R6,DATA                 SET UP REGISTERS FOR\n         LA    R7,MOVEL                  LONG MOVE\n         LA    R8,CDATA\n         LA    R9,MOVEL\n         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA\n         OPEN  (PRINT,OUTPUT),MF=(E,EX1) OPEN OUTPUT FILE\n         LTR   R15,R15\n         BNZ   CLOSEX\n         MVI   LINE,X'40'              INITIALIZE LINE\n         MVC   LINE+1(L'LINE-1),LINE     TO ALL SPACES\n         MVC   DLXCMD(L'FSTLINE),FSTLINE\n         BAL   R3,PRINTIT              OUTPUT FIRST LINE OF CLIST\n         MVC   DLXCMD(L'SNDLINE),SNDLINE\n         BAL   R3,PRINTIT              OUTPUT SECOND LINE OF CLIST\n         LA    R4,296                  GET LENGTH OF RACF WORK AREA\n         ST    R4,RACFWORK             STORE IN WORK AREA\n*\n*  LOOP THRU THE RACF DATA SET LOCATING ALL USERS AND THEIR MODEL\n*     DATA SETS.\n*\nGTRACF   EQU   *\n         ICHEINTY NEXT,TYPE='USR',ENTRY=USERBUF,WKAREA=RACFWORK,       X\n               ACTIONS=(ACT1),OPTIONS=(ACTION),MF=(E,EX3)\n         LTR   R15,R15                 USER FOUND?\n         BE    GR10                    IF SO, CONTINUE\n         C     R15,=F'12'              RETURN CODE 12?\n         BE    CLOSE                   IF SO, END OF USERS\n         B     CLOSEX                  ANYTHING ELSE IS AN ERROR\n*\n*  CHECK FOR USERS WHO SHOULD NOT BE DELETED.\n*\nGR10     EQU   *\n         CLC   USERID(6),=CL6'T02930'     CHECK FOR EXCEPTION ID'S\n         BE    GTRACF                    THAT SHOULD BE IGNORED\n         CLC   USERID(6),=CL6'SYSJOB'\n         BE    GTRACF\n         CLC   USERID(6),=CL6'T27611'\n         BE    GTRACF\n         CLC   USERID(6),=CL6'T56714'\n         BE    GTRACF\n         CLC   USERID(6),=CL6'T53093'\n         BE    GTRACF\n         CLC   USERID(6),=CL6'T53031'\n         BE    GTRACF\n         CLC   USERID(6),=CL6'T53043'\n         BE    GTRACF\n         CLC   USERID(6),=CL6'ABRJOB'\n         BE    GTRACF\n         CLC   USERID(6),=CL7'CICSJOB'\n         BE    GTRACF\n         CLC   USERID(6),=CL7'IBMUSER'\n         BE    GTRACF\n         CLC   USERID(6),=CL7'SERIES1'\n         BE    GTRACF\n         CLC   USERID(6),=CL3'STC'\n         BE    GTRACF\n         SLR   R8,R8\n         ICM   R8,B'0001',RACFWORK+30  MODEL DATA SET SPECIFIED?\n         LTR   R8,R8\n         BE    GR20                    IF NOT, JUST DELETE USER\n         MVC   DLXCMD,=CL8'DLXAUTHC'   CONSTRUCT THE COMMAND\n         MVC   RACFCMD,=CL2'DD'          TO DELETE THE MODEL DATA SET\n         SLR   R7,R7\n         ICM   R7,B'0001',USERBUF      GET LENGTH OF USERID\n         BCTR  R7,0                    DECREMENT LENGTH\n         EX    R7,LODUSER              LOAD USER\n         LA    R5,RPARMS               POINT TO BEGINNING OF USERID\n         BAL   R2,NXTSPC               FIND NEXT AVAILABLE SPACE\n         MVI   0(R5),C'.'              INSERT A PERIOD\n         BCTR  R8,0                    DECREMENT LENGTH\n         EX    R8,LODMODL              LOAD MODEL NAME\n         BAL   R3,PRINTIT              AND PUT INTO CLIST\nGR20     EQU   *\n         MVC   DLXCMD,=CL8'DLXAUTHC'   CONSTRUCT COMMAND\n         MVC   RACFCMD,=CL2'DU'          TO DELETE THE USER\n         SLR   R7,R7\n         ICM   R7,B'0001',USERBUF      GET LENGTH OF USERID\n         BCTR  R7,0                    DECREMENT LENGTH\n         EX    R7,LODUSER              LOAD USERID\n         BAL   R3,PRINTIT              PUT THE LINE INTO THE CLIST\n         B     GTRACF                  LOOP BACK FOR NEXT USER\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE PRINT,MF=(E,EX2)        CLOSE THE FILE\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     RETURN\nCLOSE    EQU   *                       STANDARD EXIT\n         MVC   DLXCMD(L'LSTLINE),LSTLINE\n         BAL   R3,PRINTIT              OUTPUT LAST LINE OF CLIST\n         CLOSE PRINT,MF=(E,EX2)        CLOSE THE FILE\nRETURN   L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n*\n***********************************************************************\n*                                                                     *\n*                      SUBROUTINES                                    *\n*                                                                     *\n***********************************************************************\n*\n*  SUBROUTINE TO WRITE THE OUTPUT LINE INTO THE CLIST DATA SET\n*\nPRINTIT  EQU   *\n         AP    LINE#,=P'100'           INCREMENT LINE NUMBER\n         UNPK  LINENO,LINE#            UNPACK LINE NUMBER\n         MVZ   LINENO+7(1),LINENO+6      & MOVE THE ZONE BYTE\n         LA    R5,DLXCMD\n         BAL   R2,NXTSPC               FIND END OF LINE\n         LA    R2,LINE\n         SR    R5,R2                   CALCULATE LINE LENGTH\n         STH   R5,LINE                   AND STORE\n         MVC   LINE+2(2),=X'0000'\n         PUT   PRINT,LINE              PRINT THE LINE\n         MVI   LINE,X'40'              RESET THE LINE BUFFER\n         MVC   LINE+1(L'LINE-1),LINE     TO SPACES\n         BR    R3                      RETURN\n*\n*  SUBROUTINE TO POINT TO THE NEXT DATA POSITION IN THE OUTPUT LINE.\n*\nNXTSPC   EQU   *\n         LA    R5,1(R5)                INCREMENT POINTER\n         CLC   0(4,R5),=C'    '        CHECK FOR A SPACE\n         BNE   NXTSPC                  LOOP TIL SPACE FOUND\n         BR    R2                      RETURN\n*\n***********************************************************************\n*                                                                     *\n*                     CONSTANT DATA                                   *\n*                                                                     *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         LTORG\n*\n*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA\n*\nCDATA    DS    0F\nILINE#   DC    P'00000000'\nUBUF     DC    X'08'\nUSID     DC    CL8' '\nDCB1     DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X\n               MACRF=(PM)\nLIST1    OPEN   (,),MF=L\nLIST2    CLOSE  (,),MF=L\nLIST3    ICHEINTY NEXT,TYPE='USR',ACTIONS=(ACT1),OPTIONS=(ACTION),MF=L\nINST1    MVC    RPARMS(0),USERID\nINST2    MVC    1(0,R5),RACFWORK+31\nMOVEL    EQU   *-CDATA\n*\n*    THE FOLLOWING FIELDS WILL BE RETRIEVED FROM THE RACF DATA SET\n*\nACT1     ICHEACTN FIELD=MODELNAM\n*\n*    MISCELLANEOUS CONSTANTS\n*\nFSTLINE  DC    C'PROC 0'\nSNDLINE  DC    C'CONTROL LIST NOFLUSH PROMPT MSG'\nLSTLINE  DC    C'END'\n*\n***********************************************************************\n*                                                                     *\n*                    DSECTS FOR GETMAIN'ED AREA                       *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F\n*\nLINE     DS    0CL255\n         DS    CL4\nLINENO   DS    CL8\nDLXCMD   DS    CL8\n         DS    CL1\nRACFCMD  DS    CL2\n         DS    CL1\nRPARMS   DS    CL231\n*\n         DS    0F\nRACFWORK DS    XL300\n*\nDATA     DS    0F\nLINE#    DS    P'00000000'\nUSERBUF  DS    XL1\nUSERID   DS    CL8\nPRINT    DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X\n               MACRF=(PM)\nEX1      OPEN   (,),MF=L\nEX2      CLOSE  (,),MF=L\nEX3      ICHEINTY NEXT,TYPE='USR',ACTIONS=(ACT1),OPTIONS=(ACTION),MF=L\nLODUSER  MVC    RPARMS(0),USERID\nLODMODL  MVC    1(0,R5),RACFWORK+31\n*\nLDATA    EQU   *-WORKAREA\n*\n         END   RACFULST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RMTEX254": {"ttr": 13833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00o\\x00o\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 REMOTE PAGE EJECT EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 REMOTE PAGE EJECT EXIT 254                   *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE WILL SET CHANGE THE        *\n*       STANDARD JES2 PAGE EJECT COMMANDS TO NOP CCWS FOR SPECIFIC   *\n*       REMOTE PRINTERS.                                             *\n*                                                                    *\n*    ENTRY POINT = DLXUX254                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0-3  N/A                                                    *\n*       R4-R5 CCW WORK REGISTERS                                     *\n*       R6-9  N/A                                                    *\n*       R10   JCT ADDRESSABILITY                                     *\n*       R11   HCT ADDRESSABILITY                                     *\n*       R12   EXIT ADDRESSABILITY                                    *\n*       R13   PCE ADDRESSABILITY                                     *\n*       R14   RETURN ADDRESS                                         *\n*       R15   ENTRY ADDRESS                                          *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY           *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             =0  CONTINUE WITH NORMAL $WTO PROCESSING               *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $SAVE, $RETURN, $MODEND, $HASPGBL                   *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nRMTEX254 $MODULE $BUFFER,                                              +\n               RPL,                                                    +\n               $CAT,                    REQ'D BY HCT                   +\n               $DCT,                    REQ'D BY THIS EXIT             +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D BY $CAT                  +\n               $JQE,                    REQ'D BY HCT                   +\n               $MIT,                    REQ'D BY $MODEND               +\n               $PCE                     REQ'D BY HCT\n         TITLE 'DELUXE JES2 REMOTE PAGE EJECT EXIT'\n         SPACE 1\n         USING  DCT,R1                  ESTABLISH DCT ADDRESSABILITY\n         USING  PCE,R13                 ESTABLISH PCE ADDRESSABILITY\nDLXUX254 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR     R12,R15                 SET LOCAL BASE REGISTER\n         SLR    R15,R15                 SET ZERO RETURN CODE (DEFAULT)\n         L      R1,PCEDCT               LOAD DCT ADDRESS FROM PCE\n         TM     DCTDEVTP,DCTRPR         IS THIS A REMOTE PRINTER?\n         BNO    RETURN                  IF NOT, IGNORE IT\n         LA     R6,RMTLIST              ADDRESS OF TABLE TO R6\nRMTNEXT  EQU    *\n         CLC    DCTDEVN(8),0(R6)        IS THE DEVICE IN THE TABLE\n         BE     NOEJECT                 YES, PREVENT THE EJECT\n         LA     R6,8(R6)                OTHERWISE CHECK THE NEXT ENTRY\n         CLC    0(8,R6),=CL8'        '  IS IT THE END OF THE TABLE\n         BE     RETURN                  YES, NOT FOUND GET OUT\n         B      RMTNEXT                 OTHERWISE LOOP\nNOEJECT  EQU   *\n         LA     R15,4\nRETURN   $RETURN RC=(R15)               RETURN TO CALLER\nRMTLIST  EQU   *                   LIST OF REMOTES TO PROCESS\n         DC    CL8'R30.PR1 '\n         DC    CL8'R31.PR1 '\n         DC    CL8'R32.PR1 '\n         DC    CL8'R33.PR1 '\n         DC    CL8'R34.PR1 '\n         DC    CL8'R35.PR1 '\n         DC    CL8'R38.PR1 '\n         DC    CL8'R39.PR1 '\n         DC    CL8'R41.PR1 '\n         DC    CL8'R42.PR1 '\n         DC    CL8'R43.PR1 '\n         DC    CL8'R44.PR1 '\n         DC    CL8'R45.PR1 '\n         DC    CL8'R46.PR1 '\n         DC    CL8'R47.PR1 '\n         DC    CL8'R48.PR1 '\n         DC    CL8'R49.PR1 '\n         DC    CL8'R52.PR1 '\n         DC    CL8'R57.PR1 '\n         DC    CL8'R68.PR1 '\n         DC    CL8'R69.PR1 '\n         DC    CL8'R70.PR1 '\n         DC    CL8'R71.PR1 '\n         DC    CL8'R72.PR1 '\n         DC    CL8'R73.PR1 '\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EXPANSION SLOT\n         DC    CL8'        '       EIGHT BLANKS TERMINATES THE SEARCH\n         SPACE 1\n         DROP   R1,R13                  DROP ADDRESSABILITIES\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEPEXT01": {"ttr": 13836, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\xdd\\x01\\xdd\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 477, "newlines": 477, "modlines": 0, "user": "DELUXE"}, "text": "SEPEXT01 TITLE 'JES2 USER EXIT 1 - PREAMBLE'\n************************************************************\n*        JES2 SEPARATOR PAGE EXIT\n*\n*        PURPOSE:\n*\n*\n*        ENTRY POINT =\n*\n*        INPUT REGISTORS :\n*              R0   N/A\n*              R1   ADDRESS OF PRINTER OR PUNCH DCT\n*              R2   2ND BASE REGISTER\n*              R3   ADDRESS OF BUFFER\n*              R4-6 WORK AND LINKAGE REGISTERS\n*              R7   ADDRESS OF JOE\n*              R8-9 WORK AND LINKAGE REGISTERS\n*              R10  ADDRESS OF THE JOB'S JCT\n*              R11  ADDRESS OF THE JES2 HCT\n*              R12  LOCAL BASE REGISTER\n*              R13  ADDRESS OF THE PRINTER OR PUNCH PCE\n*              R14  RETURN ADDRESS\n*              R15  ENTRY ADDRESS\n*\n*        RETURN REGISTERS :\n*              R0-14 SHOULD CONTAIN THE SAME CONTENTS AS ON ENTRY\n*              R15   CONTAINS A RETURN CODE OS FOLLOWS:\n*                   =0  JES2 WILL PRODUCE THE STANDARD SEPARATOR\n*                   =4  SAME AS 0;  BUT CALL NO OTHER EXIT ROUTINES\n*                   =8  JES2 WILL UNCONDITIONALLY NOT PRINT A SEPARATOR\n*                   =12 JES2 WILL UNCONDITIONALLY PRINT A SEPARATOR\n*\n*        JES2 MACROS USED :\n*              $ENTRY, $SAVE, $RETURN, $MODEND,\n*              $HASPGBL\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL                COPY HASP GLOBALS\nSEPEXT01       $MODULE RPL,                                            +\n               $BUFFER,                                                +\n               $CAT,                   REQUIRED BY HCT                 +\n               $DCT,                                                   +\n               $HASPEQU,               REQUIRED BY REG CONVENTIONS     +\n               $HCT,                   REQUIRED BY $SAVE,$RETURN, ETC. +\n               $JCT,                   REQUIRED BY $CAT                +\n               $JOE,                   REQUIRED TO GET SYSOUT CLASS    +\n               $JQE,                   REQUIRED BY HCT                 +\n               $MIT,                   REQUIRED BY $MODEND             +\n               $PCE,                   REQUIRED BY HCT                 +\n               $PDDB,                                                  +\n               $PPPWORK                REQUIRED TO FIND JOE\n               SPACE 1\n               TITLE  'PRINT/PUNCH SEPARATOR EXIT'\n         USING DCT,R1                  ESTABLISH DCT ADDRESSABILITY\n         USING BFPDSECT,R3             ESTABLISH BUFFER ADDRESSABILITY\n         USING JOE,R7                  ESTABLISH JOE ADDRESSABILITY\n         USING JCT,R10                 ESTABLISH JCT ADDRESSABILITY\n         USING PCE,R13                 ESTABLISH PCE ADDRESSABILITY\n               SPACE 1\nDLXXIT01 $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT\n         $SAVE                         SAVE HASPPRPU REGISTERS\n         LR    R12,R15                 SET LOCAL BASE REGISTER\n         SLR   R15,R15                 SET ZERO RETURN CODE (DEFAULT)\n         CLI   DCTDEVTP,DCTPRT         IS THIS A LOCAL PRINTER?\n         BNE   RETURN                  IF NOT, IGNORE IT\n         L     R7,PPPWKJOE             SET WORK JOE BASE\n         CLI   JOECURCL,C'G'           IS SYSOUT CLASS G?\n         BE    BEGIN                   IF YES, CONTINUE\n         CLI   JOECURCL,C'U'           IS SYSOUT CLASS U?\n         BE    BEGIN                   IF YES, CONTINUE\n         CLI   JOECURCL,C'W'           IS SYSOUT CLASS W?\n         BNE   RETURN                  IF NOT, GET OUT\nBEGIN    EQU   *\n         ST    R0,$DOUBLE              STORE START/CONT/END INDICATOR\n         SPACE 1\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES  GET A WORK BUFFER\n         LR    R3,R1                   SAVE ADDRESS OF BUFFER\n         SPACE 1\nCHKTYPE  EQU   *                       DECIDE WHICH PROCESSING -\n         L     R0,$DOUBLE              RESTORE START/CONT/END INDICATOR\n         LTR   R0,R0                   IS IT START?\n         BZ    BEGSEP                  GO PROCESS\n         CH    R0,=H'4'                IS IT CONTINUE?\n         BE    CONTSEP                 GO PROCESS\n         B     ENDSEP                  MUST BE A TRAILER.\nBEGSEP   EQU   *\n         BAL   R6,SEPPGE1              PRINT BEGINNING SEP PAGE\n         B     FORMS                   GO TO PRINT FORM\nCONTSEP  EQU   *                       CONTINUATION SEPERATOR\n         BAL   R6,SEPPGE1              PRINT CONTINUATION  PAGE\n         B     FORMS                   GO TO PRINT FORM\nENDSEP   EQU   *                       CONTINUATION SEPERATOR\n         BAL   R6,SEPPGE1              PRINT TRAILER   SEP PAGE\n         B     FREEBUF                 FREE THE BUFFER AND EXIT\nFORMS    EQU   *\n         L     R9,=V(FORMTABL)         R9 <-- ADDRESS OF FORM TABLE\n         ST    R9,PCEUSER0             SAVE BASE ADDRESS OF FORMTABL\n         BAL   R6,SENDDJDE             SEND DJDE'S TO XEROX PRINTER\n         B     FREEBUF                 FREE THE BUFFER AND EXIT\nFREEBUF  EQU   *\n         $FREEBUF (R3)\n         B     CLOSIT8                 TELL JES2 TO SUPPRESS THE SEP\nCLOSIT0  EQU   *\n         SR    R15,R15                 TELL JES2 TO PRODUCE STD SEP\n         B     RETURN\nCLOSIT4  EQU   *\n         LA    R15,4                   TELL JES2 NO OTHER EXITS TO GO\n         B     RETURN\nCLOSIT8  EQU   *\n         LA    R15,8                   TELL JES2 TO SUPPRESS THE SEP\n         B     RETURN\nCLOSIT12 EQU   *\n         LA    R15,12                  TELL JES2 TO UNCOND PRT SEP\n         B     RETURN\nSEPPGE1  EQU   *\n         MVI   BUFSTART,X'40'          BLANK OUT BUFFER\n         MVC   BUFSTART+1(132),BUFSTART BLANK OUT BUFFER\n         MVC   BUFSTART(80),DXSEP1     SEND FIRST SEPPAGE DJDE\n         BAL   R8,JG$PRPUT             SEND SEPERATOR PAGE BORDER\n         MVC   BUFSTART(80),DXSEP2     SEND SECOND SEPPAGE DJDE\n         BAL   R8,JG$PRPUT             SEND SEPERATOR PAGE BORDER\nSENDSEP2 EQU   *\n         MVI   BUFSTART,X'40'          BLANK OUT BUFFER\n         MVC   BUFSTART+1(132),BUFSTART BLANK OUT BUFFER\n         LA    R1,BUFSTART             R1 <--- ADDRESS OF PRINTLINE\n         LA    R0,80                   R0 <--- LENGTH OF PRINTLINE\n         $PRPUT DATA=(R1),LEN=(R0),WAIT=YES,COUNT=9\n         MVC   BUFSTART+13(8),JCTJOBID  MOVE JOB NUMBER\n         MVC   BUFSTART+29(8),JCTJNAME  MOVE JOB NAME\n         BAL   R8,JG$PRPUT             SEND SEPERATOR PAGE\nSENDSEP3 EQU   *\n         MVI   BUFSTART,X'40'          BLANK OUT BUFFER\n         MVC   BUFSTART+1(132),BUFSTART BLANK OUT BUFFER\n         L     R0,$DOUBLE              RESTORE START/CONT/END INDICATOR\n         LTR   R0,R0                   IS IT START?\n         BZ    SEPSTART                PRINT START OF JOB ENTRY\n         CH    R0,=H'4'                IS IT CONTINUE?\n         BE    SEPCONT                 PRINT CONTINUATION OF JOB ENTRY\n         B     SEPEND                  MUST BE A TRAILER.\nSEPSTART EQU   *\n         MVC   BUFSTART+13(12),=C'START OF JOB'\n         BAL   R8,JG$PRPUT             SEND SEPERATOR PAGE\n         B     SEPNAME                 BRANCH TO CALL EXIT\nSEPCONT  EQU   *\n         MVC   BUFSTART+13(19),=C'CONTINUATION OF JOB'\n         BAL   R8,JG$PRPUT             SEND SEPERATOR PAGE\n         B     SEPNAME                 BRANCH TO CALL EXIT\nSEPEND   EQU   *\n         MVC   BUFSTART+13(10),=C'END OF JOB'\n         BAL   R8,JG$PRPUT             SEND SEPERATOR PAGE\n         B     SEPNAME                 BRANCH TO CALL EXIT\nSEPNAME  EQU   *\n         MVI   BUFSTART,X'40'          BLANK OUT BUFFER\n         MVC   BUFSTART+1(132),BUFSTART BLANK OUT BUFFER\n         BAL   R8,JG$PRPUT             PRINT BLANK LINE\n         MVI   BUFSTART,X'40'          BLANK OUT BUFFER\n         MVC   BUFSTART+1(132),BUFSTART BLANK OUT BUFFER\n         MVC   BUFSTART+13(20),JCTPNAME  MOVE PROGRAMMER NAME\n         MVC   BUFSTART+38(4),JCTROOMN  MOVE ROOM NUMBER\n         BAL   R8,JG$PRPUT             SEND SEPERATOR PAGE\n         B     SEPEXIT                 BRANCH TO SEPARATOR EXIT\nSEPEXIT  EQU   *                       SEP PAGE EXIT\n         BR    R6                      RETURN TO CALLER\nSENDDJDE DS    0D\n         L     R1,PPPCHJOE             GET ADDRESS OF CHAR JOE\n         L     R9,PCEUSER0             GET ADDRESS OF FORMTABL BASE\n         SPACE\nSENDTEST EQU   *\n         CLC   =4X'FF',0(R9)           IF FORMS TABLE NOT OUT?\n         BNE   SENDCHCK                GET NEXT FCRTE FORM THE TABLE\n         L     R9,PCEUSER0             GO BACK TO BEGINNING OF TABLE\n         LA    R9,0(,R9)               PASS THE FORM 'STD ' BY DEFAULT\n         B     SENDDFIT                THEN VERIFY THE BACKSIDE\n         SPACE\nSENDCHCK EQU   *\n         CLC   0(4,R9),JOEFORM-JOE(R1)       IF MATCHING FCRTE FOUND?\n         BE    SENDDFIT                SEND 'DJDE TO XEROX PRINTER\n         LA    R9,16(,R9)              ELSE GET NEXT FCRTE\n         B     SENDTEST                SEE IF THE FORM MATCH\n         SPACE\nSENDDFIT EQU   *\n         L     R4,4(,R9)               R4 <-- A(DFITE)\n         LA    R4,0(,R4)            ERASE THE CONTROL BYTE\n         MVC   BUFSTART(80),0(R4)      MOVE DFITE TO THE BUFFER\n         BAL   R8,JG$PRPUT             SEND DJDE DFITE\n         SPACE\n* <<<<<<<<<<<<<<<<<<<<<\n         CLC   DCTFORMS,JOEFORM-JOE(R1)  IS PRINT FORM EQ TO JOEFORM\n         BE    SENDDVIT                  YES, THEN BYPASS WAIT MSG DJDE\n         CLC   12(1,R9),PAPERCHG         CHK CURRENT AND OLD PAPER FLAG\n         BNE   SENDWAIT                  NO ,THEN PRINT WAIT MSG DJDE\n         CLI   12(R9),X'11'              IS IT SPECIAL FORM?\n         BNE   SENDDVIT                  IF NOT THEN BYPASS WAIT MSG.\n*  <<<<<<<<<<<<<<<<<<<<\nSENDWAIT EQU   *\n         CLI   8(R9),X'00'             IS IT STANDARD PRINT FORM\n         BNE   MSG10                   NO, THEN ISSUE SPEC FORM MSG.\nSTDMSG   EQU   *\n         MVC   BUFSTART(80),JOBMSG1    MOVE MASTER JOBMSG TEXT TO BUF\n         MVC   BUFSTART+20(8),JCTJNAME-JCT(R10)       JOB LOG\n         MVC   BUFSTART+34(4),0(R9)    ADD FORM TO JOB MSG\n         B     CONTWAIT\nMSG10    EQU   *\n         CLI   8(R9),X'10'             IS IT 3-HOLE SINGLE LANDSCAPE\n         BNE   MSG11                   NO, GO ON\n         MVC   BUFSTART(80),JOBMSG2    MOVE JOBMSG TEXT TO BUFFER\n         B     CONTWAIT\nMSG11    EQU   *\n         CLI   8(R9),X'11'             IS IT 3-HOLE DUPLX LANDSCAPE\n         BNE   MSG12                   NO, GO ON\n         MVC   BUFSTART(80),JOBMSG3    MOVE JOBMSG TEXT TO BUFFER\n         B     CONTWAIT\nMSG12    EQU   *\n         CLI   8(R9),X'12'             IS IT 3-HOLE SINGLE PORTRAIT\n         BNE   MSG13                   NO, GO ON\n         MVC   BUFSTART(80),JOBMSG4    MOVE JOBMSG TEXT TO BUFFER\n         B     CONTWAIT\nMSG13    EQU   *\n         CLI   8(R9),X'13'             IS IT 3-HOLE DUPLX PORTRAIT\n         BNE   STDMSG                  NO, GO ON\n         MVC   BUFSTART(80),JOBMSG5    MOVE JOBMSG TEXT TO BUFFER\n         B     CONTWAIT\nCONTWAIT EQU   *\n         BAL   R8,JG$PRPUT             ISSUE JOBLOG MSG TO XEROX CONSL\n*  <<<<<<<<<<<<<<<<<<<<\n         SPACE\nSENDDVIT EQU   *\n*  <<<<<<<<<<<<<<<<<<<<\n         MVC   PAPERCHG(1),12(R9)      MOVE PAPER FLAG TO HOLD AREA\n         MVI   12(R9),X'00'            RESET CHANGE PAPER FLAG\n*  <<<<<<<<<<<<<<<<<<<<\n         L     R4,12(,R9)              R4 <---- A(DVITE)\n         LA    R4,0(,R4)             ADJUST FOR TABLE BASE\n         LH    R5,0(,R4)               R5 <---- A(DVITE'S)\n         LA    R4,2(,R4)               POSITION R4 TO HEAD OF DVITE\n         SPACE\nSENDFINI EQU   *\n         MVC   BUFSTART(80),0(R4)      MOVE THE DVITE TO BUFFER\n         BAL   R8,JG$PRPUT             SEND DJDE VFU IMAGE TABLE ENTRY\n         LA    R4,80(,R4)              GET NEXT DVITE\n         BCT   R5,SENDFINI             CHAIN IN NEXT DVITE\n         SPACE\nSENDEXIT EQU   *                       SENDDJDE EXIT\n         BR    R6                      RETURN TO THE CALLER\nJG$PRPUT DS    0D\n         LA    R1,BUFSTART             R1 <--- ADDRESS OF PRINTLINE\n         LA    R0,80                   R0 <--- LENGTH OF PRINTLINE\n         $PRPUT DATA=(R1),LEN=(R0),WAIT=YES\n         BR    R8                      RETURN TO CALLER\n**********************************************************************\n* +----------------------------------------------------------------+ *\n* |            PAGE SETUP MESSAGE TABLE ENTRY                      + *\n* +----------------------------------------------------------------+ *\n**********************************************************************\n         SPACE 2\nDXSEP1  DC CL80'??DJDE  FORMS=SEPPGE,FORMAT=ADL007,JDL=ADMIN,TOF=1,;'\nDXSEP2  DC CL80'??DJDE  ASSIGN=(1,1),DATA=(0,50),BOF=23,DUPLEX=NO,END;'\nJOBMSG1 DC CL80'??DJDE  OTEXT=(''-0- XXXXXXXX FORM FFFF'',WAIT),;'\nJOBMSG2 DC CL80'??DJDE  OTEXT=(''3-HOLE PUNCH SINGLE L017'',WAIT),;'\nJOBMSG3 DC CL80'??DJDE  OTEXT=(''3-HOLE PUNCH DUPLEX L018'',WAIT),;'\nJOBMSG4 DC CL80'??DJDE  OTEXT=(''3-HOLE PUNCH SINGLE P014'',WAIT),;'\nJOBMSG5 DC CL80'??DJDE  OTEXT=(''3-HOLE PUNCH DUPLEX P015'',WAIT),;'\nPAPERCHG DS    CL1                     PAPER CHANGE FLAG\n         SPACE\nRETURN   $RETURN RC=(R15)              RETURN TO CALLER\n         SPACE 1\n         DROP R1                       DROP ADDRESSABILITY OF DCT\n         DROP R3                       DROP ADDRESSABILITY OF BUF\n         DROP R7                       DROP ADDRESSABILITY OF JOE\n         DROP R13                      DROP ADDRESSABILITY OF PCE\n         $MODEND\nLTORG    DS    0D\n         LTORG\n         END\n* +----------------------------------------------------------------+ *\n* | F O R M S  C R O S S  R E F E R E N C E  T A B L E  E N T R Y  | *\n* +----------------------------------------------------------------+ *\n**********************************************************************\n*                                                                    *\n*             FORMS NAME (4 BYTES)                                   *\n*             |        COPY COUNT (1 BYTE)                           *\n*             |        | ADDRESS(DFITE) (3 BYTES)                    *\n*             |        | |      RESERVED  (1 BYTE)                   *\n*             |        | |      | RESERVED (3 BYTES)                 *\n*             |        | |      | |      PAPER CHANGE (1 BYTE)       *\n*             |        | |      | |      | ADDRESS(DVITE) (3 BYTES)  *\n*             |        | |      | |      | |                         *\n*            +|--------|-|------|-|------|-|-----+                   *\n*            |FORMNAME|NN......|DD......|II......|                   *\n*            +-----------------------------------+                   *\n**********************************************************************\n         SPACE 2\nFORMTABL CSECT\nXSTDP  DC  C'STD ',X'00',AL3(FITL01),X'00',AL3(0),X'00',AL3(VFU1)\nXL001  DC  C'L001',X'00',AL3(FITL01),X'00',AL3(0),X'00',AL3(VFU2)\nXL002  DC  C'L002',X'00',AL3(FITL02),X'00',AL3(0),X'00',AL3(VFU4)\nXL003  DC  C'L003',X'00',AL3(FITL02),X'00',AL3(0),X'00',AL3(VFU5)\nXL004  DC  C'L004',X'00',AL3(FITL03),X'00',AL3(0),X'00',AL3(VFU6)\nXL005  DC  C'L005',X'00',AL3(FITL03),X'00',AL3(0),X'00',AL3(VFU7)\nXL006  DC  C'L006',X'00',AL3(FITL04),X'00',AL3(0),X'00',AL3(VFU10)\nXL007  DC  C'L007',X'00',AL3(FITL05),X'00',AL3(0),X'00',AL3(VFU4)\nXL008  DC  C'L008',X'00',AL3(FITL05),X'00',AL3(0),X'00',AL3(VFU5)\nXL009  DC  C'L009',X'00',AL3(FITL06),X'00',AL3(0),X'00',AL3(VFU10)\nXL010  DC  C'L010',X'00',AL3(FITL06),X'00',AL3(0),X'00',AL3(VFU11)\nXL011  DC  C'L011',X'00',AL3(FITL07),X'00',AL3(0),X'00',AL3(VFU12)\nXL012  DC  C'L012',X'00',AL3(FITL07),X'00',AL3(0),X'00',AL3(VFU13)\nXL013  DC  C'L013',X'00',AL3(FITL08),X'00',AL3(0),X'00',AL3(VFU16)\nXL014  DC  C'L014',X'00',AL3(FITL08),X'00',AL3(0),X'00',AL3(VFU17)\nXL015  DC  C'L015',X'00',AL3(FITL08),X'00',AL3(0),X'00',AL3(VFU1)\nXL016  DC  C'L016',X'00',AL3(FITL08),X'00',AL3(0),X'00',AL3(VFU2)\nXL017  DC  C'L017',X'00',AL3(FITL08),X'10',AL3(0),X'11',AL3(VFU16)\nXL018  DC  C'L018',X'00',AL3(FITL08),X'11',AL3(0),X'11',AL3(VFU17)\nXP001  DC  C'P001',X'00',AL3(FITP01),X'00',AL3(0),X'00',AL3(VFU6)\nXP002  DC  C'P002',X'00',AL3(FITP01),X'00',AL3(0),X'00',AL3(VFU7)\nXP003  DC  C'P003',X'00',AL3(FITP02),X'00',AL3(0),X'00',AL3(VFU8)\nXP004  DC  C'P004',X'00',AL3(FITP02),X'00',AL3(0),X'00',AL3(VFU9)\nXP005  DC  C'P005',X'00',AL3(FITP03),X'00',AL3(0),X'00',AL3(VFU6)\nXP006  DC  C'P006',X'00',AL3(FITP03),X'00',AL3(0),X'00',AL3(VFU7)\nXP007  DC  C'P007',X'00',AL3(FITP04),X'00',AL3(0),X'00',AL3(VFU6)\nXP008  DC  C'P008',X'00',AL3(FITP05),X'00',AL3(0),X'00',AL3(VFU6)\nXP009  DC  C'P009',X'00',AL3(FITP05),X'00',AL3(0),X'00',AL3(VFU7)\nXP010  DC  C'P010',X'00',AL3(FITP06),X'00',AL3(0),X'00',AL3(VFU6)\nXP011  DC  C'P011',X'00',AL3(FITP06),X'00',AL3(0),X'00',AL3(VFU7)\nXP012  DC  C'P012',X'00',AL3(FITP07),X'00',AL3(0),X'00',AL3(VFU14)\nXP013  DC  C'P013',X'00',AL3(FITP07),X'00',AL3(0),X'00',AL3(VFU15)\nXP014  DC  C'P014',X'00',AL3(FITP01),X'12',AL3(0),X'11',AL3(VFU6)\nXP015  DC  C'P015',X'00',AL3(FITP01),X'13',AL3(0),X'11',AL3(VFU7)\nXC1A   DC  C'C1A ',X'00',AL3(FITPM1),X'00',AL3(0),X'11',AL3(VFU3)\nXC1B   DC  C'C1B ',X'00',AL3(FITPM1),X'00',AL3(0),X'11',AL3(VFU3)\nXC2    DC  C'C2  ',X'00',AL3(FITPM1),X'00',AL3(0),X'11',AL3(VFU3)\nXC3A   DC  C'C3A ',X'00',AL3(FITPM2),X'00',AL3(0),X'11',AL3(VFU3)\nXC3B   DC  C'C3B ',X'00',AL3(FITPM2),X'00',AL3(0),X'11',AL3(VFU3)\nXC3C   DC  C'C3C ',X'00',AL3(FITPM2),X'00',AL3(0),X'11',AL3(VFU3)\nXC4    DC  C'C4  ',X'00',AL3(FITPM2),X'00',AL3(0),X'11',AL3(VFU3)\nXC5A   DC  C'C5A ',X'00',AL3(FITPM2),X'00',AL3(0),X'11',AL3(VFU3)\nXC5B   DC  C'C5B ',X'00',AL3(FITPM2),X'00',AL3(0),X'11',AL3(VFU3)\nXC5C   DC  C'C5C ',X'00',AL3(FITPM2),X'00',AL3(0),X'11',AL3(VFU3)\nXT001  DC  C'T001',X'00',AL3(FITT01),X'00',AL3(0),X'00',AL3(VFU18)\nXX001  DC  C'X001',X'00',AL3(FITXICS),X'00',AL3(0),X'00',AL3(VFUXICS)\nXX002  DC  C'X002',X'00',AL3(FITXICS),X'00',AL3(0),X'11',AL3(VFUXICS)\nXDMY1  DC  C'DMY1',X'00',AL3(FITDY1),X'00',AL3(0),X'00',AL3(VFUD1)\nXDMY2  DC  C'DMY2',X'00',AL3(FITDY2),X'00',AL3(0),X'00',AL3(VFUD2)\nXDMY3  DC  C'DMY3',X'00',AL3(FITDY3),X'00',AL3(0),X'00',AL3(VFUD3)\nXDMY4  DC  C'DMY4',X'00',AL3(FITDY4),X'00',AL3(0),X'00',AL3(VFUD4)\nXDMY5  DC  C'DMY5',X'00',AL3(FITDY5),X'00',AL3(0),X'00',AL3(VFUD5)\nXDMY6  DC  C'DMY6',X'00',AL3(FITDY6),X'00',AL3(0),X'00',AL3(VFUD6)\nXDMY7  DC  C'DMY7',X'00',AL3(FITDY7),X'00',AL3(0),X'00',AL3(VFUD7)\nXDMY8  DC  C'DMY8',X'00',AL3(FITDY8),X'00',AL3(0),X'00',AL3(VFUD8)\nXDMY9  DC  C'DMY9',X'00',AL3(FITDY9),X'00',AL3(0),X'00',AL3(VFUD9)\nXFFF   DC  16X'FF'                     END-OF-TABLE\n         SPACE 2\n**********************************************************************\n* +----------------------------------------------------------------+ *\n* |            DJDE FORMS IMAGE TABLE ENTRY                        + *\n* +----------------------------------------------------------------+ *\n**********************************************************************\n         SPACE 2\nFITL01   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL001,DATA=(0,132),;'\nFITL02   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL002,DATA=(0,132),;'\nFITL03   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL003,DATA=(0,90),;'\nFITL04   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL004,DATA=(0,100),;'\nFITL05   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL005,DATA=(0,150),;'\nFITL06   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL006,DATA=(0,100),;'\nFITL07   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL007,DATA=(0,50),;'\nFITL08   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADL008,DATA=(0,132),;'\nFITP01   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADP001,DATA=(0,90),;'\nFITP02   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADP002,DATA=(0,100),;'\nFITP03   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADP003,DATA=(0,75),;'\nFITP04   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADP004,DATA=(0,75),;'\nFITP05   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADP005,DATA=(0,90),;'\nFITP06   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADP006,DATA=(0,75),;'\nFITP07   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADP007,DATA=(0,38),;'\nFITPM1   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADPIM1,DATA=(0,80),;'\nFITPM2   DC CL80'??DJDE  JDL=ADMIN,FORMAT=ADPIM2,DATA=(0,80),;'\nFITT01   DC CL80'??DJDE  JDL=ADMIN,;'\nFITXICS  DC CL80' '\nFITDY1   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY2   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY3   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY4   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY5   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY6   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY7   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY8   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\nFITDY9   DC CL80'??DJDE  JDL=ADMIN,FORMAT=DUMMY1,DATA=(0,132),;'\n         SPACE 2\n**********************************************************************\n* +----------------------------------------------------------------+ *\n* |            DJDE VFU   IMAGE TABLE ENTRY                        + *\n* +----------------------------------------------------------------+ *\n**********************************************************************\n         SPACE 2\n         DS    0D\nVFU1     DC    H'2'                    STD LANDSCAPE DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFU2     DC    H'2'                    STD LANDSCAPE DUPLEX\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFU3     DC    H'2'                    PIMS PORTRAIT DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,4),ASSIGN=(2,10),;'\n         DC    CL80'??DJDE  ASSIGN=(3,16),TOF=1,BOF=66,COPIES=1,END;'\nVFU4     DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=88,COPIES=1,END;'\nVFU5     DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=88,COPIES=1,END;'\nVFU6     DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=60,COPIES=1,END;'\nVFU7     DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=60,COPIES=1,END;'\nVFU8     DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=80,COPIES=1,END;'\nVFU9     DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=80,COPIES=1,END;'\nVFU10    DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=49,COPIES=1,END;'\nVFU11    DC    H'2'                    DMY9 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=49,COPIES=1,END;'\nVFU12    DC    H'2'                    DMY9 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=23,COPIES=1,END;'\nVFU13    DC    H'2'                    DMY9 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=23,COPIES=1,END;'\nVFU14    DC    H'2'                    DMY9 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=28,COPIES=1,END;'\nVFU15    DC    H'2'                    DMY9 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=28,COPIES=1,END;'\nVFU16    DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,6),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFU17    DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,6),DUPLEX=YES,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFU18    DC    H'2'\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD1    DC    H'2'                    DMY1 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD2    DC    H'2'                    DMY2 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD3    DC    H'2'                    DMY3 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD4    DC    H'2'                    DMY4 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD5    DC    H'2'                    DMY5 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD6    DC    H'2'                    DMY6 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD7    DC    H'2'                    DMY7 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD8    DC    H'2'                    DMY8 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUD9    DC    H'2'                    DMY9 DEFAULT\n         DC    CL80'??DJDE  ASSIGN=(1,1),DUPLEX=NO,;'\n         DC    CL80'??DJDE  TOF=1,BOF=66,COPIES=1,END;'\nVFUXICS  DC    H'1'                    DMY9 DEFAULT\n         DC    CL80' '\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLSSKEYW": {"ttr": 14087, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x05\\x07\\x05\\x07\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1287, "newlines": 1287, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'SLSSKEYW - SLSS KEYWORD DEFINITION'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = SLSSKEYW                                       *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              10/31/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'SLSSKEYW - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'SLSSKEYW - INITIALIZATION SECTION'\nSLSSKEYW CSECT\nSLSSKEYW AMODE ANY\nSLSSKEYW RMODE ANY\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,SLSSKEYW_&SYSDATE_&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING SLSSKEYW,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING SLSSKEYW+4095,R11       ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF0    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST0,SLSS,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF1                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF1    EQU   *\n         ISPCALL ('VDEFINE',NAMELST1,SCANMOD,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,SLSSERR1,'CHAR',62)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,GWORD,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,NUM,'FIXED',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,NAME1,'CHAR',60)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTX,BK1,'CHAR',9)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VGET                    RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'SLSS' VARIABLE\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTY)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     VGET20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VGET)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VGET)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVGET20   EQU   *\n         LA    R2,NAMELIST             SET UP\n         LA    R3,LENLSTX                  REGISTERS\n         LA    R4,NAMELSTX                     FOR\n         LR    R5,R3                               LONG MOVE\n         MVCL  R2,R4                   MOVE STATIC TO DYNAMIC\n         MVC   SLSSERR1,ERRMSG1        INITIALIZE MESSAGE ONE\n         MVC   SLSSERR2,ERRMSG2        INITIALIZE MESSAGE TWO\n         MVC   SLSSERR3,ERRMSG3        INITIALIZE MESSAGE THREE\n         MVC   SLSSERR4,ERRMSG4        INITIALIZE MESSAGE FOUR\n         MVC   SLSSERR5,ERRMSG5        INITIALIZE MESSAGE FIVE\n         MVC   SLSSERRX,ERRMSGX        INITIALIZE MESSAGE X\n         MVC   SLSSPRC1,PRCMSG1A       INITIALIZE MESSAGE ONE\n         MVC   SLSSPRC2,PRCMSG2        INITIALIZE MESSAGE TWO\n         MVC   SLSSPRC3,PRCMSG3        INITIALIZE MESSAGE THREE\n         MVC   SLSSPRC4,PRCMSG4        INITIALIZE MESSAGE FOUR\n         MVC   SLSSPRC5,PRCMSG5        INITIALIZE MESSAGE FIVE\n         MVC   SLSSPRCX,PRCMSGX        INITIALIZE MESSAGE X\n         MVC   SLSSWRN1,WRNMSG1        INITIALIZE MESSAGE ONE\n         MVC   SLSSWRN2,WRNMSG2        INITIALIZE MESSAGE TWO\n         MVC   SLSSWRN3,WRNMSG3        INITIALIZE MESSAGE THREE\n         MVC   SLSSWRN4,WRNMSG4        INITIALIZE MESSAGE FOUR\n         MVC   SLSSWRN5,WRNMSG5        INITIALIZE MESSAGE FIVE\n         MVC   SLSSWRNX,WRNMSGX        INITIALIZE MESSAGE X\n         MVC   SCANMOD,NO              INITIALIZE SCANMOD\n         MVC   WORKWORD,SPACES         INITIALIZE WORKWORD\n         MVC   SLSSTABL(8),SPACES      INITIALIZE LIBRARY TABLE\n         MVC   SLSSTABL,SLSS           INITIALIZE LIBRARY TABLE\n         LA    R2,SCANTABL             INDEX THROUGH TABLE\n         LA    R3,4                    MAX LENGTH OF SLSS NAME\nVGET30   EQU   *\n         CLC   0(1,R2),SPACES          INSERT SCAN HERE?\n         BE    VGET40                  YES, INSERT AND CONTINUE\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,VGET30               CONTINUE\nVGET40   EQU   *\n         MVC   0(4,R2),SCAN            INITIALIZE 2ND PART OF SCANTABL\n         SLR   R2,R2                   R2 - NUMBER OF MANUALS IN LIB\n         LA    R3,10                   R3 - MANUAL PROCESSING CKPT\n         MVC   PANEL,SLSS@WRN          IDENTIFY PANEL TO BE DISPLAYED\n         BAL   R4,DISPLAY              DISPLAY WARNING PANEL\n***********************************************************************\n*  INITIALIZATION SECTION - ERASE SCAN TABLE\n***********************************************************************\nTBERASE  EQU   *\n         MVC   ISPFSERV,ERAID          SET ISPF DIALOG SERVICE\n*                                      ERASE A TABLE\n         ISPCALL ('TBERASE',SCANTABL,'SLSSTLIB')\n         B     TBERA10(R15)            CHECK RETURN CODE\nTBERA10  EQU   *\n         B     TBCREATE                RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBERASE)\n         B     TBCREATE                RC = 08 (CONTINUE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE SCAN TABLE\n***********************************************************************\nTBCREATE EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n*                                      CREATE A TABLE\n         ISPCALL ('TBCREATE',SCANTABL,NAMELST3,NAMELST4,'WRITE','REPLAC+\n               E','SLSSTLIB')\n         B     TBCRE10(R15)            CHECK RETURN CODE\nTBCRE10  EQU   *\n         B     TBOPEN                  RC = 00 (CONTINUE)\n         B     TBOPEN                  RC = 04 (CONTINUE)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN LIBRARY TABLE\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN',SLSSTABL,'NOWRITE','SLSSTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBSKIP                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SKIP ONE ROW IN LIBRARY TABLE\n***********************************************************************\nTBSKIP   EQU   *\n         MVC   ISPFSERV,SKPID          SET ISPF DIALOG SERVICE\n*                                      MOVE ROW POINTER\n         ISPCALL ('TBSKIP',SLSSTABL)\n         B     TBSKP10(R15)            CHECK RETURN CODE\nTBSKP10  EQU   *\n         B     TBSKP20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSKIP)\n         B     TBSKP30                 RC = 08 (CONTINUE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSKP20  EQU   *\n         LA    R2,1(R2)                INCREMENT MANUAL COUNT\n         CR    R2,R3                   SHOULD WE DISPLAY PROC SCREEN\n         BNE   PARSE                   NO, PARSE MANUAL TITLE\n         LA    R3,10(R2)               R3 - VALUE OF NEXT CKPT\n         CVD   R2,CONAREA              CONVERT TO DECIMAL\n         UNPK  UNPKAREA,CONAREA+1      MAKE IT PRINTABLE\n         MVC   SLSSPRC3(4),UNPKAREA+2    MOVE TO BE DISPLAYED UPON SCRN\n         MVC   PANEL,SLSS@PRC          IDENTIFY PANEL TO BE DISPLAYED\n         BAL   R4,CONTROL              SET PROCESSING MODE\n         BAL   R4,DISPLAY              DISPLAY PROCESSING PANEL\n         B     PARSE                   PARSE MANUAL TITLE\nTBSKP30  EQU   *\n         LA    R2,1(R2)                INCREMENT MANUAL COUNT\n         CVD   R2,CONAREA              CONVERT TO DECIMAL\n         UNPK  UNPKAREA,CONAREA+1      MAKE IT PRINTABLE\n         MVC   SLSSPRC3(4),UNPKAREA+2    MOVE TO BE DISPLAYED UPON SCRN\n         MVC   SLSSPRC1,PRCMSG1B       MOVE ALTERNATE MESSAGE\n         MVC   PANEL,SLSS@PRC          MOVE DISPLAY PANEL\n         BAL   R4,DISPLAY              DISPLAY PROCESSING PANEL\n         B     TBEND                   OK, WE'RE DONE\n***********************************************************************\n*  PROCESSING SECTION - PARSE MANUAL TITLES FOR KEY WORDS\n***********************************************************************\nPARSE    EQU   *\n         LA    R5,NAME1                R5 - INDEX THRU MANUAL TITLE\n         LA    R6,WORKWORD             R6 - INDEX THRU EXTRACTED KYWD\n         LA    R7,20                   R7 - MAXIMUM LENGTH OF KYWD\n         LA    R8,180                  R8 - MAXIMUM LENGTH OF TITLE\nPARSE10  EQU   *\n         CLC   0(1,R5),PERIOD          PART OF KEYWORD?\n         BE    PARSE15                 YES, CONTINUE\n         CLC   0(1,R5),SPACES          END OF KEYWORD?\n         BE    PARSE20                 YES, UPDATE SCAN TABLE\n         CLC   0(1,R5),SPECHAR1        END OF KEYWORD?\n         BE    PARSE20                 YES, UPDATE SCAN TABLE\n         CLC   0(1,R5),SPECHAR2        END OF KEYWORD?\n         BE    PARSE20                 YES, UPDATE SCAN TABLE\n         CLC   0(1,R5),SPECHAR3        END OF KEYWORD?\n         BE    PARSE20                 YES, UPDATE SCAN TABLE\n         CLC   0(1,R5),SPECHAR4        END OF KEYWORD?\n         BE    PARSE20                 YES, UPDATE SCAN TABLE\n         TM    0(R5),ALPHANUM          IS IT ALPHA-NUMERIC?\n         BNO   PARSE20                 NO, UPDATE SCAN TABLE\nPARSE15  EQU   *\n         MVC   0(1,R6),0(R5)           MOVE KEYWORD TO WORK\n         LA    R5,1(R5)                INCREMENT R5\n         LA    R6,1(R6)                INCREMENT R6\n         BCTR  R8,0                    DECREMENT R8\n         C     R8,FULL00               END OF TITLE?\n         BE    PARSE40                 YES, WE'RE DONE\n         BCT   R7,PARSE10              CONTINUE EXTRACTION\nPARSE20  EQU   *\n         C     R7,FULL20               KEYWORD BEEN EXTRACTED?\n         BE    PARSE30                 NO, INCREMENT R5 & CONTINUE\n         CLC   A,WORKWORD              INSIGNIFICANT KEYWORD?\n         BE    PARSE30                 YES, INCREMENT R5 & CONTINUE\n         CLC   AND,WORKWORD            INSIGNIFICANT KEYWORD?\n         BE    PARSE30                 YES, INCREMENT R5 & CONTINUE\n         CLC   FOR,WORKWORD            INSIGNIFICANT KEYWORD?\n         BE    PARSE30                 YES, INCREMENT R5 & CONTINUE\n         CLC   IN,WORKWORD             INSIGNIFICANT KEYWORD?\n         BE    PARSE30                 YES, INCREMENT R5 & CONTINUE\n         CLC   OF,WORKWORD             INSIGNIFICANT KEYWORD?\n         BE    PARSE30                 YES, INCREMENT R5 & CONTINUE\n         CLC   THE,WORKWORD            INSIGNIFICANT KEYWORD?\n         BE    PARSE30                 YES, INCREMENT R5 & CONTINUE\n         CLC   TO,WORKWORD             INSIGNIFICANT KEYWORD?\n         BE    PARSE30                 YES, INCREMENT R5 & CONTINUE\n         BAL   R9,TBTOP                UPDATE SCAN TABLE\nPARSE30  EQU   *\n         MVC   WORKWORD,SPACES         CLEAR WORKWORD\n         LA    R5,1(R5)                POINT R5 PAST DELIMITER\n         LA    R6,WORKWORD             R6 - INDEX THRU EXTRACTED KYWD\n         LA    R7,20                   R7 - MAXIMUM LENGTH OF KYWD\n         BCTR  R8,0                    DECREMENT R8\n         C     R8,FULL00               END OF TITLE?\n         BNE   PARSE10                 CONTINUE PARSING\nPARSE40  EQU   *\n         CLC   WORKWORD,SPACES         ANYTHING TO USE FOR UPDATE?\n         BE    TBSKIP                  NO, GET NEXT MANUAL TO PARSE\n         BAL   R9,TBTOP                UPDATE SCAN TABLE\n         B     TBSKIP                  GET NEXT MANUAL TO PARSE\n***********************************************************************\n*  PROCESSING SECTION - CLOSE LIBRARY TABLE WITHOUT SAVING\n***********************************************************************\nTBEND    EQU   *\n         MVC   ISPFSERV,ENDID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBEND',SLSSTABL)\n         B     TBEND10(R15)            CHECK RETURN CODE\nTBEND10  EQU   *\n         B     TBCLOSE                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBEND)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBEND)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBEND)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE SCAN TABLE\n***********************************************************************\nTBCLOSE  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE TABLE\n         ISPCALL ('TBCLOSE',SCANTABL,'REPLCOPY',' ',' ','SLSSTLIB')\n         B     TBCLO10(R15)            CHECK RETURN CODE\nTBCLO10  EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'SLSSKEYW - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1)    FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'SLSSKEYW - ROUTINE SECTION'\n***********************************************************************\n*  ROUTINE SECTION - POINT TO TOP OF SCAN TABLE\n***********************************************************************\nTBTOP    EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      POINT TO TOP OF TABLE\n         ISPCALL ('TBTOP',SCANTABL)\n         B     TBTOP10(R15)            CHECK RETURN CODE\nTBTOP10  EQU   *\n         B     TBVCLEAR                RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ROUTINE SECTION - CLEAR SCAN TABLE VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR',SCANTABL)\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBSARG                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ROUTINE SECTION - DEFINE SEARCH ARGUMENT FOR SCAN TABLE\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n         MVC   GWORD,WORKWORD          SET SEARCH VALUE\n*                                      DEFINE SEARCH ARGUMENT\n         ISPCALL ('TBSARG',SCANTABL)\n         B     TBARG10(R15)            CHECK RETURN CODE\nTBARG10  EQU   *\n         B     TBSCAN                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ROUTINE SECTION - SEARCH SCAN TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH TABLE\n         ISPCALL ('TBSCAN',SCANTABL)\n         B     TBSCN10(R15)            CHECK RETURN CODE\nTBSCN10  EQU   *\n         B     TBSCN20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     TBADD                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSCN20  EQU   *\n         CLC   FULL150,NUM             MAX NUMBER OF MANUAL ID'S?\n         BER   R9                      YES, NO NEED TO UPDATE TABLE REC\n         L     R6,NUM                  R6 - NUM OF MANUAL ID'S / KYWD\n         LA    R6,1(R6)                INCREMENT\n         ST    R6,NAMELIST             NUMBER OF MANUAL ID'S\n         ST    R6,NUM                  PUT IT BACK\n         BCTR  R6,0                    DECREMENT R6\n         MH    R6,HALF09               R6 - DISPLACEMENT FOR MANUAL ID\n         LA    R7,BK1                  R7 - FIRST MANUAL ID\n         AR    R7,R6                   POINT TO NEXT OPEN SLOT\n         MVC   0(9,R7),SLSID           MANUAL ID TO EXTENS VAR LIST\n***********************************************************************\n*  ROUTINE SECTION - UPDATE A ROW IN SCAN TABLE\n***********************************************************************\nTBPUT    EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE ROW IN TABLE\n         ISPCALL ('TBPUT',SCANTABL,NAMELIST)\n         B     TBPUT10(R15)            CHECK RETURN CODE\nTBPUT10  EQU   *\n         B     TBPUT20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBPUT)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBPUT20  EQU   *\n         BR    R9                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - ADD A ROW TO SCAN TABLE\n***********************************************************************\nTBADD    EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         LA    R6,1                    R6 - NUM OF MANUAL ID'S / KYWD\n         ST    R6,NUM                  STORE IN TABLE VARIABLE\n         MVC   NAMELIST(4),NUM         NUMBER OF MANUAL ID'S\n         MVC   BK1,SLSID               MANUAL ID TO EXTENS VAR LIST\n*                                      ADD A ROW TO TABLE\n         ISPCALL ('TBADD',SCANTABL,NAMELIST)\n         B     TBADD10(R15)            CHECK RETURN CODE\nTBADD10  EQU   *\n         B     TBADD20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBADD20  EQU   *\n         BR    R9                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY PANEL\n***********************************************************************\nDISPLAY  EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY',PANEL)\n         B     DISPL10(R15)            CHECK RETURN CODE\nDISPL10  EQU   *\n         B     DISPL20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     DISPL30                 RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL20  EQU   *\n         BR    R4                      RETURN\nDISPL30  EQU   *\n         CLC   PANEL,SLSS@WRN          WARNING PANEL DISPLAYED?\n         BE    FINISH                  YES, WE CHICKENED OUT\n         CLC   PANEL,SLSS@PRC          PROCESSING PANEL DISPLAYED?\n         BER   R4                      YES, RETURN\n         CLC   PANEL,SLSS@ERR          ERROR PANEL DISPLAYED?\n         BER   R4                      YES, RETURN\n***********************************************************************\n*  ROUTINE SECTION - SET PROCESSING MODE\n***********************************************************************\nCONTROL  EQU   *\n         MVC   ISPFSERV,CONID          SET ISPF DIALOG SERVICE\n*                                      SET PROCESSING MODE\n         ISPCALL ('CONTROL','DISPLAY','LOCK')\n         B     CONTL10(R15)            CHECK RETURN CODE\nCONTL10  EQU   *\n         B     CONTL20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR CONTROL)\n         B     ISPERR08                RC = 08 (NOT VALID FOR CONTROL)\n         B     ISPERR12                RC = 12 (NOT VALID FOR CONTROL)\n         B     ISPERR16                RC = 16 (NOT VALID FOR CONTROL)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nCONTL20  EQU   *\n         BR    R4                      RETURN\n         TITLE 'SLSSKEYW - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nISPERR04 EQU   *\n         MVC   SLSSERR2+15(2),FOUR     SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR08 EQU   *\n         MVC   SLSSERR2+15(2),EIGHT    SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR12 EQU   *\n         MVC   SLSSERR2+15(2),TWELVE   SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR16 EQU   *\n         MVC   SLSSERR2+15(2),SIXTEEN  SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR20 EQU   *\n         MVC   SLSSERR2+15(2),TWENTY   SET RETURN CODE\nISPERR30 EQU   *\n         MVC   SLSSERR1+21(8),ISPFSERV     IDENTIFY ISPF SERVICE\n         MVC   PANEL,SLSS@ERR          IDENTIFY DISPLAY PANEL\n         BAL   R4,DISPLAY              DISPLAY ERROR PANEL\n         B     FINISH                  WE'RE DONE\n         TITLE 'SLSSKEYW - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nALPHANUM EQU   X'C0'                   TEST FOR ALPHA-NUMERIC CHARACTER\n         TITLE 'SLSSKEYW - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nHALF09   DC    H'09'                   HALFWORD CONSTANT, VALUE '09'\nFULL00   DC    F'00'                   FULLWORD CONSTANT, VALUE '00'\nFULL20   DC    F'20'                   FULLWORD CONSTANT, VALUE '20'\nFULL150  DC    F'150'                  FULLWORD CONSTANT, VALUE '150'\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nSPACES   DC    CL80' '                 USED FOR INITIALIZATION\nNO       DC    CL1'N'                  USED FOR INITIALIZATION\nPERIOD   DC    CL1'.'                  PARSING SPEC CHARACTER\nSPECHAR1 DC    CL1'{'                  PARSING DELIMITER\nSPECHAR2 DC    CL1'}'                  PARSING DELIMITER\nSPECHAR3 DC    CL1'\\'                  PARSING DELIMITER\nSPECHAR4 DC    CL1'|'                  PARSING DELIMITER\nA        DC    CL2'A '                 INSIGNIFICANT KEYWORD\nAND      DC    CL4'AND '               INSIGNIFICANT KEYWORD\nFOR      DC    CL4'FOR '               INSIGNIFICANT KEYWORD\nIN       DC    CL3'IN '                INSIGNIFICANT KEYWORD\nOF       DC    CL3'OF '                INSIGNIFICANT KEYWORD\nTHE      DC    CL4'THE '               INSIGNIFICANT KEYWORD\nTO       DC    CL3'TO '                INSIGNIFICANT KEYWORD\nSLSS@ERR DC    CL8'SLSS@ERR'           ERROR DISPLAY PANEL NAME\nSLSS@PRC DC    CL8'SLSS@PRC'           PROCESSING DISPLAY PANEL NAME\nSLSS@WRN DC    CL8'SLSS@WRN'           WARNING DISPLAY PANEL NAME\nSCAN     DC    CL4'SCAN'               SECOND PART OF SCANTABL\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nCONID    DC    CL8'CONTROL'            ISPF DIALOG SERVICE (CONTROL)\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nERAID    DC    CL8'TBERASE'            ISPF DIALOG SERVICE (TBERASE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nSKPID    DC    CL8'TBSKIP'             ISPF DIALOG SERVICE (TBSKIP)\nENDID    DC    CL8'TBEND'              ISPF DIALOG SERVICE (TBEND)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nPUTID    DC    CL8'TBPUT'              ISPF DIALOG SERVICE (TBPUT)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nERRMSG1  DC    CL62'ISPF DIALOG SERVICE, 12345678, ENDED.'\nERRMSG2  DC    CL62'RETURN CODE IS 12.'\nERRMSG3  DC    CL62'CONTACT SYSTEMS PROGRAMMING FOR FURTHER INFORMATION+\n               '\nERRMSG4  DC    CL62'REGARDING THIS ERROR.'\nERRMSG5  DC    CL62' '\nERRMSGX  DC    CL62'PRESS ENTER TO CONTINUE.'\nPRCMSG1A DC    CL62'KEYWORD BUILD PROCESSING.'\nPRCMSG1B DC    CL62'KEYWORD BUILD PROCESSING COMPLETED.'\nPRCMSG2  DC    CL62' '\nPRCMSG3  DC    CL62'1234 MANUALS PROCESSED.'\nPRCMSG4  DC    CL62' '\nPRCMSG5  DC    CL62' '\nPRCMSGX  DC    CL62' '\nWRNMSG1  DC    CL62'SELECTED OPTION WILL REQUIRE SEVERAL MINUTES'\nWRNMSG2  DC    CL62'TO COMPLETE. PLEASE INSURE THAT YOU WANT TO'\nWRNMSG3  DC    CL62'RUN SELECTED OPTION.'\nWRNMSG4  DC    CL62' '\nWRNMSG5  DC    CL62' '\nWRNMSGX  DC    CL62'PRESS ENTER TO CONTINUE, END KEY TO TERMINATE'\nNAMELST0 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SLSS'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SCANMOD'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 62)\n         DC    F'18'\n         DC    F'00'\n         DC    CL8'SLSSERR1'\n         DC    CL8'SLSSERR2'\n         DC    CL8'SLSSERR3'\n         DC    CL8'SLSSERR4'\n         DC    CL8'SLSSERR5'\n         DC    CL8'SLSSERRX'\n         DC    CL8'SLSSPRC1'\n         DC    CL8'SLSSPRC2'\n         DC    CL8'SLSSPRC3'\n         DC    CL8'SLSSPRC4'\n         DC    CL8'SLSSPRC5'\n         DC    CL8'SLSSPRCX'\n         DC    CL8'SLSSWRN1'\n         DC    CL8'SLSSWRN2'\n         DC    CL8'SLSSWRN3'\n         DC    CL8'SLSSWRN4'\n         DC    CL8'SLSSWRN5'\n         DC    CL8'SLSSWRNX'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'GWORD'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'NUM'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 60)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'NAME1'\n         DC    CL8'NAME2'\n         DC    CL8'NAME3'\nNAMELSTX DS    0F                      EXTENSION VARIABLES - STATIC\n         DC    F'151'\n         DC    F'00'\n         DC    CL8'BK1'\n         DC    CL8'BK2'\n         DC    CL8'BK3'\n         DC    CL8'BK4'\n         DC    CL8'BK5'\n         DC    CL8'BK6'\n         DC    CL8'BK7'\n         DC    CL8'BK8'\n         DC    CL8'BK9'\n         DC    CL8'BK10'\n         DC    CL8'BK11'\n         DC    CL8'BK12'\n         DC    CL8'BK13'\n         DC    CL8'BK14'\n         DC    CL8'BK15'\n         DC    CL8'BK16'\n         DC    CL8'BK17'\n         DC    CL8'BK18'\n         DC    CL8'BK19'\n         DC    CL8'BK20'\n         DC    CL8'BK21'\n         DC    CL8'BK22'\n         DC    CL8'BK23'\n         DC    CL8'BK24'\n         DC    CL8'BK25'\n         DC    CL8'BK26'\n         DC    CL8'BK27'\n         DC    CL8'BK28'\n         DC    CL8'BK29'\n         DC    CL8'BK30'\n         DC    CL8'BK31'\n         DC    CL8'BK32'\n         DC    CL8'BK33'\n         DC    CL8'BK34'\n         DC    CL8'BK35'\n         DC    CL8'BK36'\n         DC    CL8'BK37'\n         DC    CL8'BK38'\n         DC    CL8'BK39'\n         DC    CL8'BK40'\n         DC    CL8'BK41'\n         DC    CL8'BK42'\n         DC    CL8'BK43'\n         DC    CL8'BK44'\n         DC    CL8'BK45'\n         DC    CL8'BK46'\n         DC    CL8'BK47'\n         DC    CL8'BK48'\n         DC    CL8'BK49'\n         DC    CL8'BK50'\n         DC    CL8'BK51'\n         DC    CL8'BK52'\n         DC    CL8'BK53'\n         DC    CL8'BK54'\n         DC    CL8'BK55'\n         DC    CL8'BK56'\n         DC    CL8'BK57'\n         DC    CL8'BK58'\n         DC    CL8'BK59'\n         DC    CL8'BK60'\n         DC    CL8'BK61'\n         DC    CL8'BK62'\n         DC    CL8'BK63'\n         DC    CL8'BK64'\n         DC    CL8'BK65'\n         DC    CL8'BK66'\n         DC    CL8'BK67'\n         DC    CL8'BK68'\n         DC    CL8'BK69'\n         DC    CL8'BK70'\n         DC    CL8'BK71'\n         DC    CL8'BK72'\n         DC    CL8'BK73'\n         DC    CL8'BK74'\n         DC    CL8'BK75'\n         DC    CL8'BK76'\n         DC    CL8'BK77'\n         DC    CL8'BK78'\n         DC    CL8'BK79'\n         DC    CL8'BK80'\n         DC    CL8'BK81'\n         DC    CL8'BK82'\n         DC    CL8'BK83'\n         DC    CL8'BK84'\n         DC    CL8'BK85'\n         DC    CL8'BK86'\n         DC    CL8'BK87'\n         DC    CL8'BK88'\n         DC    CL8'BK89'\n         DC    CL8'BK90'\n         DC    CL8'BK91'\n         DC    CL8'BK92'\n         DC    CL8'BK93'\n         DC    CL8'BK94'\n         DC    CL8'BK95'\n         DC    CL8'BK96'\n         DC    CL8'BK97'\n         DC    CL8'BK98'\n         DC    CL8'BK99'\n         DC    CL8'BK100'\n         DC    CL8'BK101'\n         DC    CL8'BK102'\n         DC    CL8'BK103'\n         DC    CL8'BK104'\n         DC    CL8'BK105'\n         DC    CL8'BK106'\n         DC    CL8'BK107'\n         DC    CL8'BK108'\n         DC    CL8'BK109'\n         DC    CL8'BK110'\n         DC    CL8'BK111'\n         DC    CL8'BK112'\n         DC    CL8'BK113'\n         DC    CL8'BK114'\n         DC    CL8'BK115'\n         DC    CL8'BK116'\n         DC    CL8'BK117'\n         DC    CL8'BK118'\n         DC    CL8'BK119'\n         DC    CL8'BK120'\n         DC    CL8'BK121'\n         DC    CL8'BK122'\n         DC    CL8'BK123'\n         DC    CL8'BK124'\n         DC    CL8'BK125'\n         DC    CL8'BK126'\n         DC    CL8'BK127'\n         DC    CL8'BK128'\n         DC    CL8'BK129'\n         DC    CL8'BK130'\n         DC    CL8'BK131'\n         DC    CL8'BK132'\n         DC    CL8'BK133'\n         DC    CL8'BK134'\n         DC    CL8'BK135'\n         DC    CL8'BK136'\n         DC    CL8'BK137'\n         DC    CL8'BK138'\n         DC    CL8'BK139'\n         DC    CL8'BK140'\n         DC    CL8'BK141'\n         DC    CL8'BK142'\n         DC    CL8'BK143'\n         DC    CL8'BK144'\n         DC    CL8'BK145'\n         DC    CL8'BK146'\n         DC    CL8'BK147'\n         DC    CL8'BK148'\n         DC    CL8'BK149'\n         DC    CL8'BK150'\n         DC    CL8'SLSID'\nLENLSTX  EQU   *-NAMELSTX\nNAMELSTY DS    0F                      NAMES OF VGET VARIABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SLSS'\n         TITLE 'SLSSKEYW - LITERAL POOL'\n         LTORG\n         TITLE 'SLSSKEYW - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nCONAREA  DS    D                       WORK AREA FOR BIN/DEC CONVERSION\nUNPKAREA DS    D                       WORK AREA FOR DEC/ZONED CONVERSN\nSCANTABL DS    0F\nSLSS     DS    CL4                     LIBRARY NAME\nSCANCON  DS    CL4                     CONSTANT OF 'SCAN'\nSLSSTABL DS    CL8                     LIBRARY TABLE\nSCANMOD  DS    CL1                     SCAN TABLE MODIFICATION FLAG\nSLSSERR1 DS    CL62                    SLSS ERROR MESSAGE 1\nSLSSERR2 DS    CL62                    SLSS ERROR MESSAGE 2\nSLSSERR3 DS    CL62                    SLSS ERROR MESSAGE 3\nSLSSERR4 DS    CL62                    SLSS ERROR MESSAGE 4\nSLSSERR5 DS    CL62                    SLSS ERROR MESSAGE 5\nSLSSERRX DS    CL62                    SLSS ERROR MESSAGE X\nSLSSPRC1 DS    CL62                    SLSS PROCESSING MESSAGE 1\nSLSSPRC2 DS    CL62                    SLSS PROCESSING MESSAGE 2\nSLSSPRC3 DS    CL62                    SLSS PROCESSING MESSAGE 3\nSLSSPRC4 DS    CL62                    SLSS PROCESSING MESSAGE 4\nSLSSPRC5 DS    CL62                    SLSS PROCESSING MESSAGE 5\nSLSSPRCX DS    CL62                    SLSS PROCESSING MESSAGE X\nSLSSWRN1 DS    CL62                    SLSS WARNING MESSAGE 1\nSLSSWRN2 DS    CL62                    SLSS WARNING MESSAGE 2\nSLSSWRN3 DS    CL62                    SLSS WARNING MESSAGE 3\nSLSSWRN4 DS    CL62                    SLSS WARNING MESSAGE 4\nSLSSWRN5 DS    CL62                    SLSS WARNING MESSAGE 5\nSLSSWRNX DS    CL62                    SLSS WARNING MESSAGE X\nGWORD    DS    CL20                    SCAN TABLE KEYWORD\nWORKWORD DS    CL20                    SCAN TABLE WORKWORD\nNUM      DS    F                       NUMBER OF KEYWORD HITS IN LIB\nNAME1    DS    CL60                    LINE 1 OF MANUAL TITLE\nNAME2    DS    CL60                    LINE 2 OF MANUAL TITLE\nNAME3    DS    CL60                    LINE 3 OF MANUAL TITLE\nBK1      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK2      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK3      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK4      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK5      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK6      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK7      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK8      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK9      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK10     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK11     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK12     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK13     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK14     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK15     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK16     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK17     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK18     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK19     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK20     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK21     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK22     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK23     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK24     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK25     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK26     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK27     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK28     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK29     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK30     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK31     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK32     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK33     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK34     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK35     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK36     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK37     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK38     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK39     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK40     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK41     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK42     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK43     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK44     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK45     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK46     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK47     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK48     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK49     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK50     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK51     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK52     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK53     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK54     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK55     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK56     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK57     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK58     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK59     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK60     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK61     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK62     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK63     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK64     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK65     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK66     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK67     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK68     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK69     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK70     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK71     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK72     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK73     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK74     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK75     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK76     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK77     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK78     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK79     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK80     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK81     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK82     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK83     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK84     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK85     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK86     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK87     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK88     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK89     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK90     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK91     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK92     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK93     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK94     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK95     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK96     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK97     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK98     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK99     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK100    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK101    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK102    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK103    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK104    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK105    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK106    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK107    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK108    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK109    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK110    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK111    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK112    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK113    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK114    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK115    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK116    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK117    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK118    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK119    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK120    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK121    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK122    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK123    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK124    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK125    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK126    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK127    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK128    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK129    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK130    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK131    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK132    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK133    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK134    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK135    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK136    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK137    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK138    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK139    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK140    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK141    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK142    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK143    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK144    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK145    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK146    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK147    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK148    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK149    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK150    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nSLSID    DS    CL9                     MANUAL ID FROM LIBRARY TABLE\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nPANEL    DS    CL8                     GENERIC PANEL NAME\nNAMELIST DS    0F                      EXTENSION VARIABLES - DYNAMIC\n         DS    F'151'\n         DS    F'00'\n         DS    CL8'BK1'\n         DS    CL8'BK2'\n         DS    CL8'BK3'\n         DS    CL8'BK4'\n         DS    CL8'BK5'\n         DS    CL8'BK6'\n         DS    CL8'BK7'\n         DS    CL8'BK8'\n         DS    CL8'BK9'\n         DS    CL8'BK10'\n         DS    CL8'BK11'\n         DS    CL8'BK12'\n         DS    CL8'BK13'\n         DS    CL8'BK14'\n         DS    CL8'BK15'\n         DS    CL8'BK16'\n         DS    CL8'BK17'\n         DS    CL8'BK18'\n         DS    CL8'BK19'\n         DS    CL8'BK20'\n         DS    CL8'BK21'\n         DS    CL8'BK22'\n         DS    CL8'BK23'\n         DS    CL8'BK24'\n         DS    CL8'BK25'\n         DS    CL8'BK26'\n         DS    CL8'BK27'\n         DS    CL8'BK28'\n         DS    CL8'BK29'\n         DS    CL8'BK30'\n         DS    CL8'BK31'\n         DS    CL8'BK32'\n         DS    CL8'BK33'\n         DS    CL8'BK34'\n         DS    CL8'BK35'\n         DS    CL8'BK36'\n         DS    CL8'BK37'\n         DS    CL8'BK38'\n         DS    CL8'BK39'\n         DS    CL8'BK40'\n         DS    CL8'BK41'\n         DS    CL8'BK42'\n         DS    CL8'BK43'\n         DS    CL8'BK44'\n         DS    CL8'BK45'\n         DS    CL8'BK46'\n         DS    CL8'BK47'\n         DS    CL8'BK48'\n         DS    CL8'BK49'\n         DS    CL8'BK50'\n         DS    CL8'BK51'\n         DS    CL8'BK52'\n         DS    CL8'BK53'\n         DS    CL8'BK54'\n         DS    CL8'BK55'\n         DS    CL8'BK56'\n         DS    CL8'BK57'\n         DS    CL8'BK58'\n         DS    CL8'BK59'\n         DS    CL8'BK60'\n         DS    CL8'BK61'\n         DS    CL8'BK62'\n         DS    CL8'BK63'\n         DS    CL8'BK64'\n         DS    CL8'BK65'\n         DS    CL8'BK66'\n         DS    CL8'BK67'\n         DS    CL8'BK68'\n         DS    CL8'BK69'\n         DS    CL8'BK70'\n         DS    CL8'BK71'\n         DS    CL8'BK72'\n         DS    CL8'BK73'\n         DS    CL8'BK74'\n         DS    CL8'BK75'\n         DS    CL8'BK76'\n         DS    CL8'BK77'\n         DS    CL8'BK78'\n         DS    CL8'BK79'\n         DS    CL8'BK80'\n         DS    CL8'BK81'\n         DS    CL8'BK82'\n         DS    CL8'BK83'\n         DS    CL8'BK84'\n         DS    CL8'BK85'\n         DS    CL8'BK86'\n         DS    CL8'BK87'\n         DS    CL8'BK88'\n         DS    CL8'BK89'\n         DS    CL8'BK90'\n         DS    CL8'BK91'\n         DS    CL8'BK92'\n         DS    CL8'BK93'\n         DS    CL8'BK94'\n         DS    CL8'BK95'\n         DS    CL8'BK96'\n         DS    CL8'BK97'\n         DS    CL8'BK98'\n         DS    CL8'BK99'\n         DS    CL8'BK100'\n         DS    CL8'BK101'\n         DS    CL8'BK102'\n         DS    CL8'BK103'\n         DS    CL8'BK104'\n         DS    CL8'BK105'\n         DS    CL8'BK106'\n         DS    CL8'BK107'\n         DS    CL8'BK108'\n         DS    CL8'BK109'\n         DS    CL8'BK110'\n         DS    CL8'BK111'\n         DS    CL8'BK112'\n         DS    CL8'BK113'\n         DS    CL8'BK114'\n         DS    CL8'BK115'\n         DS    CL8'BK116'\n         DS    CL8'BK117'\n         DS    CL8'BK118'\n         DS    CL8'BK119'\n         DS    CL8'BK120'\n         DS    CL8'BK121'\n         DS    CL8'BK122'\n         DS    CL8'BK123'\n         DS    CL8'BK124'\n         DS    CL8'BK125'\n         DS    CL8'BK126'\n         DS    CL8'BK127'\n         DS    CL8'BK128'\n         DS    CL8'BK129'\n         DS    CL8'BK130'\n         DS    CL8'BK131'\n         DS    CL8'BK132'\n         DS    CL8'BK133'\n         DS    CL8'BK134'\n         DS    CL8'BK135'\n         DS    CL8'BK136'\n         DS    CL8'BK137'\n         DS    CL8'BK138'\n         DS    CL8'BK139'\n         DS    CL8'BK140'\n         DS    CL8'BK141'\n         DS    CL8'BK142'\n         DS    CL8'BK143'\n         DS    CL8'BK144'\n         DS    CL8'BK145'\n         DS    CL8'BK146'\n         DS    CL8'BK147'\n         DS    CL8'BK148'\n         DS    CL8'BK149'\n         DS    CL8'BK150'\n         DS    CL8'SLSID'\nWORKLEN  EQU   *-WORKAREA\n         END   SLSSKEYW\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLSSMAIN": {"ttr": 14600, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03\\xd9\\x03\\xd9\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 985, "newlines": 985, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'SLSSMAIN - SLSS MAINLINE DRIVER'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = SLSSMAIN                                       *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              06/02/87  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         TITLE 'SLSSMAIN - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      AN1\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         TITLE 'SLSSMAIN - INITIALIZATION SECTION'\nSLSSMAIN CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,SLSSMAIN_&SYSDATE_&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING SLSSMAIN,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING SLSSMAIN+4095,R11       ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         L     R10,0(R1)               SAVE POINTER TO PARMS\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVC   DEBUGVAR,SPACES         INITIALIZE DEBUG VARIABLE\n         LH    R1,0(R10)               GET LENGTH OF PARAMETER\n         LTR   R1,R1                   ANY PARAMETER PASSED?\n         BZ    VDEF                    NO, CONTINUE\n         LA    R1,4                    LENGTH OF 'DEBUG' - 1\n         EX    R1,MVCDEBUG             MOVE POSSIBLE DEBUG PARM\n         B     VDEF                    CONTINUE\nMVCDEBUG MVC   DEBUGVAR,2(R10)         SAVE POSSIBLE DEBUG PARM\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nVDEF     EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN','SPLIT','ENABLE'),       +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF0    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST0,CHGFLG,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF1                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF1    EQU   *\n         ISPCALL ('VDEFINE',NAMELST1,SLSSERR1,'CHAR',62)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,SLSS,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,ZUSER,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,DEBUG,'CHAR',5)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,ZMONTH,'CHAR',2)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VDEF20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVDEF20   EQU   *\n         MVC   DEBUG,DEBUGVAR          INITIALIZE DEBUG\n         MVC   ZUSER,SPACES            INITIALIZE ZUSER\n         MVC   SLSS,SPACES             INITIALIZE SLSS\n         MVC   CHGFLG,NO               INITIALIZE CHGFLG\n         MVC   SLSSERR1,SPACES         INITIALIZE SLSSERR1\n         MVC   SLSSERR2,SPACES         INITIALIZE SLSSERR2\n         MVC   SLSSERR3,SPACES         INITIALIZE SLSSERR3\n         MVC   SLSSERR4,SPACES         INITIALIZE SLSSERR4\n         MVC   SLSSERR5,SPACES         INITIALIZE SLSSERR5\n         MVC   SLSSERRX,SPACES         INITIALIZE SLSSERRX\n         MVC   NAMELST_(LNAMLSTX),NAMELSTX    INITIALIZE NAMELST_\n         MVC   NAMELST_(LNAMLST6),NAMELST6    SET NAMELST_\n         MVC   SLSSERR1,ISPMSG10       SET SLSSERR1\n         BAL   R4,VGET                 RETRIEVE 'ZUSER' VARIABLE\n         MVC   NAMELST_(LNAMLST5),NAMELST5    SET NAMELST_\n         BAL   R4,VGET                 RETRIEVE 'ZMONTH,ZDAY,ZYEAR' VAR\n         MVC   SLSSDATE,SLSSMASK       INITIALIZE SLSSDATE\n         MVC   SLSSMNTH,ZMONTH         SET MONTH\n         MVC   SLSSDAY,ZDAY            SET DAY\n         MVC   SLSSYEAR,ZYEAR          SET YEAR\n         TITLE 'SLSSMAIN - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - OPEN ADMINISTRATOR FILE\n***********************************************************************\nOPNADM00 EQU   *\n         MVC   TABLE,SLSSADM           SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   ACCESS,NOWRITE          SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG01       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         MVC   SLSSERR1,ISPMSG02       SET SLSSERR1\n         BAL   R4,TBSKIP               POINT TO NEXT ROW\n         MVC   LIBADMIN,SLSSADMN       EXTRACT LIB ADMINISTRATOR ID\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n***********************************************************************\n*  PROCESSING SECTION - OPEN SLSS CONTROL FILE\n***********************************************************************\nOPNCTL00 EQU   *\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   ACCESS,NOWRITE          SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG03       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         MVC   NAMELST_(LNAMLST7),NAMELST7    SET NAMELST_\n         MVC   SLSSERR1,ISPMSG05       SET SLSSERR1\n         BAL   R4,VPUT                 UPDATE 'CHGFLG'\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY PRIMARY MENU & PROCEED ACCORDINGLY\n***********************************************************************\nDRIVR000 EQU   *\n         SR    R3,R3                   CLEAR REG 3\n         TIME  DEC                     GET CURRENT TIME\n         ST    R0,TIME                 STORE TIME\n         MVC   TIMEWORK,TIMEMASK       MOVE IN EDIT MASK\n         ED    TIMEWORK,TIME           MAKE TIME DISPLAYABLE\n         MVC   SLSSTIME,TIMEWORK+1     MOVE TO DIALOG VARIABLE\n         MVC   SEL,SPACES              INITIALIZE SELECTION VAR\n         MVC   PANEL,SLSSPRIM          SET NAME OF PANEL\n         MVC   SLSSERR1,ISPMSG04       SET SLSSERR1\n         BAL   R4,DISPLAY              DISPLAY PRIMARY MENU\n         C     R2,FULL08               USER REQUEST TERMINATION?\n         BE    DRIVR040                YES, WE'RE DONE\n         CLC   SEL,OPTX                USER REQUEST TERMINATION?\n         BE    DRIVR040                YES, WE'RE DONE\n         CLC   SEL,OPT2                USER REQUEST PRINT FUNCTIONS?\n         BE    DRIVR030                YES, BYPASS LIBRARY SELECTION\n         CLC   SEL,OPT4                USER REQUEST ADMIN FUNCTION?\n         BE    DRIVR030                YES, BYPASS LIBRARY SELECTION\n         CLC   SEL,OPTON               USER REQUEST DEBUG FUNCTION?\n         BE    DRIVR030                YES, BYPASS LIBRARY SELECTION\n         CLC   SEL,OPTOFF              USER REQUEST UN-DEBUG FUNCTION?\n         BE    DRIVR030                YES, BYPASS LIBRARY SELECTION\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG06       SET SLSSERR1\n         BAL   R4,TBTOP                SET ROW POINTER TO TOP OF TABLE\nDRIVR010 EQU   *\n         C     R3,FULL04               USER SELECT MORE THAN ONE ROW?\n         BNE   DRIVR020                NO, DISPLAY PRIMARY MENU\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         BAL   R4,TBDUPDT              ADVANCE TABLE ROW POINTER\nDRIVR020 EQU   *\n         MVC   SL,SPACES               INITIALIZE SELECTION VAR\n         MVC   PANEL,SLSSMSTR          SET NAME OF PANEL\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG08       SET SLSSERR1\n         BAL   R4,TBDISPL              DISPLAY LIBRARY SELECTION\n         C     R3,FULL08               USER REQUEST TERMINATION?\n         BE    DRIVR000                YES, DISPLAY PRIMARY MENU\n         MVC   SLSS,CIBN               UPDATE SLSS VARIABLE\nDRIVR030 EQU   *\n         MVC   NAMELST_(LNAMLST9),NAMELST9    SET NAMELST_\n         MVC   SLSSERR1,ISPMSG05       SET SLSSERR1\n         BAL   R4,VPUT                 UPDATE VARIABLES\n         B     DRIVR100                PROCESS OPTION 1 (IF SELECTED)\nDRIVR040 EQU   *\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG09       SET SLSSERR1\n         BAL   R4,TBCLOSE              CLOSE TABLE AND SAVE\n         MVC   NAMELST_(LNAMLST7),NAMELST7    SET NAMELST_\n         MVC   SLSSERR1,ISPMSG05       SET SLSSERR1\n         B     FINISH                  WE'RE DONE\nDRIVR100 EQU   *\n         CLC   SEL,OPT1                USER REQUEST LIBRARY BROWSE?\n         BNE   DRIVR200                PROCESS OPTION 2 (IF SELECTED)\n         CLC   ZUSER,LIBADMIN          LIBRARY ADMINISTRATOR?\n         BE    DRIVR110                YES, BYPASS RACHECK\n         CLC   ZUSER,CIBOWNER          LIBRARY OWNER?\n         BE    DRIVR110                YES, BYPASS RACHECK\n         LA    R15,8                   INDICATE PGM/PARM SELECTION\n         MVC   RACFPGM_,RACFPGM        MOVE STATIC TO DYNAMIC\n         MVC   RACFPGM_+19(8),SLSSBRWS   ADD DESIRED OPTION\n         MVC   SLSSERR1,ISPMSG30       SET SLSSERR1\n         BAL   R4,SELECT               PERFORM RACHECK FOR 'SLSSBRWS'\nDRIVR110 EQU   *\n         LA    R15,0                   INDICATE CLIST SELECTION\n         MVC   SLSSCMD_,SLSSCMD        MOVE STATIC TO DYNAMIC\n         MVC   SLSSCMD_+5(8),SLSSBROW    ADD DESIRED OPTION\n         MVC   SLSSERR1,ISPMSG11       SET SLSSERR1\n         BAL   R4,SELECT               SELECT OPTION 1\n         B     DRIVR010                RE-DISPLAY PRIMARY MENU\nDRIVR200 EQU   *\n         CLC   SEL,OPT2                USER REQUEST LIBRARY PRINT?\n         BNE   DRIVR300                PROCESS OPTION 3 (IF SELECTED)\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         LA    R15,0                   INDICATE CLIST SELECTION\n         MVC   SLSSCMD_,SLSSCMD        MOVE STATIC TO DYNAMIC\n         MVC   SLSSCMD_+5(8),SLSSPRNT    ADD DESIRED OPTION\n         MVC   SLSSERR1,ISPMSG12       SET SLSSERR1\n         BAL   R4,SELECT               SELECT OPTION 2\n         MVC   ACCESS,NOWRITE          SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG03       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         B     DRIVR000                RE-DISPLAY PRIMARY MENU\nDRIVR300 EQU   *\n         CLC   SEL,OPT3                USER REQUEST KEYWORD SCAN?\n         BNE   DRIVR400                PROCESS OPTION 4 (IF SELECTED)\n         LA    R15,4                   INDICATE PGM SELECTION\n         MVC   SLSSPGM_,SLSSPGM        MOVE STATIC TO DYNAMIC\n         MVC   SLSSPGM_+4(8),SLSSSCAN    ADD DESIRED OPTION\n         MVC   SLSSERR1,ISPMSG13       SET SLSSERR1\n         BAL   R4,SELECT               SELECT OPTION 3\n         B     DRIVR010                RE-DISPLAY PRIMARY MENU\nDRIVR400 EQU   *\n         CLC   SEL,OPT4                USER REQUEST ADMIN FUNCTIONS?\n         BNE   DRIVR500                'DEBUG' OPTION ON IF REQUESTED\n         CLC   ZUSER,LIBADMIN          LIBRARY ADMINISTRATOR?\n         BE    DRIVR410                YES, BYPASS RACHECK\n         LA    R15,8                   INDICATE PGM/PARM SELECTION\n         MVC   RACFPGM_,RACFPGM        MOVE STATIC TO DYNAMIC\n         MVC   RACFPGM_+19(8),SLSSUPDT   ADD DESIRED OPTION\n         MVC   SLSSERR1,ISPMSG40       SET SLSSERR1\n         BAL   R4,SELECT               PERFORM RACHECK FOR 'SLSSUPDT'\nDRIVR410 EQU   *\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         LA    R15,0                   INDICATE CLIST SELECTION\n         MVC   SLSSCMD_,SLSSCMD        MOVE STATIC TO DYNAMIC\n         MVC   SLSSCMD_+5(8),SLSSADM     ADD DESIRED OPTION\n         MVC   SLSSERR1,ISPMSG14       SET SLSSERR1\n         BAL   R4,SELECT               SELECT OPTION 4\n         MVC   NAMELST_(LNAMLST7),NAMELST7    SET NAMELST_\n         MVC   SLSSERR1,ISPMSG10       SET SLSSERR1\n         BAL   R4,VGET                 RETRIEVE 'CHGFLG'\n         CLC   CHGFLG,COMPRESS         COMPRESS REQUESTED?\n         BE    FINISH                  YES, WE'RE DONE\n         MVC   ACCESS,NOWRITE          SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG03       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         BNE   DRIVR000                NO, RE-DISPLAY PRIMARY MENU\nDRIVR500 EQU   *\n         CLC   SEL,OPTON               USER REQUEST DEBUG ON?\n         BNE   DRIVR600                'DEBUG' OPTION OFF IF REQUESTED\n         MVC   DEBUG,DEBUGVAL          TURN DEBUG OPTION ON\n         MVC   NAMELST_(LNAMLST8),NAMELST8    SET NAMELST_\n         MVC   SLSSERR1,ISPMSG17       SET SLSSERR1\n         BAL   R4,VPUT                 UPDATE 'DEBUG'\n         B     DRIVR000                RE-DISPLAY PRIMARY MENU\nDRIVR600 EQU   *\n         CLC   SEL,OPTOFF              USER REQUEST DEBUG OFF?\n         BNE   DRIVR000                RE-DISPLAY PRIMARY MENU\n         MVC   DEBUG,SPACES            TURN DEBUG OPTION OFF\n         MVC   NAMELST_(LNAMLST8),NAMELST8    SET NAMELST_\n         MVC   SLSSERR1,ISPMSG18       SET SLSSERR1\n         BAL   R4,VPUT                 UPDATE 'DEBUG'\n         B     DRIVR000                RE-DISPLAY PRIMARY MENU\n         TITLE 'SLSSMAIN - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1)    FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'SLSSMAIN - ROUTINE SECTION'\n***********************************************************************\n*  ROUTINE SECTION - CLOSE TABLE WITHOUT SAVING\n***********************************************************************\nTBEND    EQU   *\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBEND',TABLE)\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - OPEN TABLE\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN',TABLE,ACCESS,'SLSSTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBOPN20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     TBOPN30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBOPN20  EQU   *\n         BR    R4                      RETURN\nTBOPN30  EQU   *\n         MVC   SLSSERR1,ISPMSG19       SET SLSSERR1\n         MVC   SLSSERR1+12(8),TABLE    SET TABLE NAME\n         B     ISPERR12                (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ROUTINE SECTION - MOVE ROW POINTER TO NEXT ROW\n***********************************************************************\nTBSKIP   EQU   *\n         MVC   ISPFSERV,SKPID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBSKIP',TABLE)\n         B     TBSKP10(R15)            CHECK RETURN CODE\nTBSKP10  EQU   *\n         B     TBSKP20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSKIP)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSKP20  EQU   *\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - UPDATE VARIABLES\n***********************************************************************\nVPUT     EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE DIALOG VARIABLE\n         ISPCALL ('VPUT',NAMELST_)\n         B     VPUT10(R15)             CHECK RETURN CODE\nVPUT10   EQU   *\n         B     VPUT20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVPUT20   EQU   *\n         MVC   NAMELST_(LNAMLSTX),NAMELSTX    RE-INITIALIZE NAMELST_\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - RETRIEVE VARIABLES\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELST_)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     VGET20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VGET)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VGET)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVGET20   EQU   *\n         MVC   NAMELST_(LNAMLSTX),NAMELSTX    RE-INITIALIZE NAMELST_\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY PANEL\n***********************************************************************\nDISPLAY  EQU   *\n         SR    R2,R2                   CLEAR REG 2\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY',PANEL)\n         B     DISPL10(R15)            CHECK RETURN CODE\nDISPL10  EQU   *\n         B     DISPL20                 RC = 00 (CONTINUE)\n         B     DISPL20                 RC = 04 (CONTINUE)\n         B     DISPL20                 RC = 08 (CONTINUE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL20  EQU   *\n         LR    R2,R15                  LOAD DISPLAY RETURN CODE\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY ERROR PANEL\n***********************************************************************\nDISPLERR EQU   *\n         ISPCALL ('DISPLAY',PANEL)\n         LA    R15,20                  SET RETURN CODE\n         B     FINISH                  RETURN\n***********************************************************************\n*  ROUTINE SECTION - SET ROW POINTER TO TOP OF TABLE\n***********************************************************************\nTBTOP    EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP OF TABLE\n         ISPCALL ('TBTOP',TABLE)\n         B     TBTOP10(R15)            CHECK RETURN CODE\nTBTOP10  EQU   *\n         B     TBTOP20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     TBTOP30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBTOP20  EQU   *\n         BR    R4                      RETURN\nTBTOP30  EQU   *\n         LR    R2,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R2                   RESTORE RETURN ADDRESS\n         B     TBTOP                   SET ROW POINTER TO TOP OF TABLE\n***********************************************************************\n*  ROUTINE SECTION - CLEAR TABLE VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR',TABLE)\n         B     TBVCL10(R15)            CHECK RETURN CODE\nTBVCL10  EQU   *\n         B     TBVCL20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     TBVCL30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBVCL20  EQU   *\n         BR    R4                      RETURN\nTBVCL30  EQU   *\n         LR    R2,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R2                   RESTORE RETURN ADDRESS\n         B     TBVCLEAR                CLEAR TABLE VARIABLES\n***********************************************************************\n*  ROUTINE SECTION - DEFINE SEARCH ARGUMENT\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n*                                      DEFINE SEARCH ARGUMENT\n         ISPCALL ('TBSARG',TABLE)\n         B     TBSARG10(R15)           CHECK RETURN CODE\nTBSARG10 EQU   *\n         B     TBSARG20                RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     TBSARG30                RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSARG20 EQU   *\n         BR    R4                      RETURN\nTBSARG30 EQU   *\n         LR    R2,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R2                   RESTORE RETURN ADDRESS\n         B     TBSARG                  DEFINE SEARCH ARGUMENT\n***********************************************************************\n*  ROUTINE SECTION - SEARCH TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH TABLE\n         ISPCALL ('TBSCAN',TABLE)\n         B     TBSCAN10(R15)           CHECK RETURN CODE\nTBSCAN10 EQU   *\n         B     TBSCAN20                RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     TBSCAN30                RC = 08 (CONTINUE)\n         B     TBSCAN40                RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSCAN20 EQU   *\n         BR    R4                      RETURN\nTBSCAN30 EQU   *\n         MVC   SLSSERR1,ISPMSG07       SET SLSSERR1\n         MVC   SLSSERR1+19(4),SLSS     IDENTIFY SLSS LIBRARY\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),EIGHT    IDENTIFY RETURN CODE\n         MVC   SLSSERR3,EMSG3          SET MESSAGE THREE\n         MVC   SLSSERR4,EMSG4          SET MESSAGE FOUR\n         MVC   SLSSERR5,EMSG5          SET MESSAGE FIVE\n         MVC   SLSSERRX,EMSGX          SET MESSAGE X\n         MVC   PANEL,SLSS@ERR          IDENTIFY DISPLAY PANEL\n         BAL   R4,DISPLAY              DISPLAY ERROR PANEL\n         B     DRIVR000                NOT FOUND, RE-DISPLAY\nTBSCAN40 EQU   *\n         LR    R2,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R2                   RESTORE RETURN ADDRESS\n         B     TBSCAN                  SEARCH TABLE\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY TABLE INFORMATION\n***********************************************************************\nTBDISPL  EQU   *\n         MVC   ISPFSERV,TBDID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL',TABLE,PANEL)\n         B     TBDIS10(R15)            CHECK RETURN CODE\nTBDIS10  EQU   *\n         B     TBDIS20                 RC = 00 (CONTINUE)\n         B     TBDIS20                 RC = 04 (CONTINUE)\n         B     TBDIS20                 RC = 08 (CONTINUE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBDIS20  EQU   *\n         LR    R3,R15                  SAVE RETURN CODE\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - ADVANCE TABLE ROW POINTER\n***********************************************************************\nTBDUPDT  EQU   *\n*                                      ADVANCE TABLE ROW POINTER\n         ISPCALL ('TBDISPL',TABLE)\n         LR    R3,R15                  SAVE RETURN CODE\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - SELECT A FUNCTION\n***********************************************************************\nSELECT   EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         B     SELCT10(R15)            SELECT DESIRED FUNCTION\nSELCT10  EQU   *\n         B     SELCT20                 SELECT A CLIST\n         B     SELCT30                 SELECT A PROGRAM\n         B     SELCT40                 SELECT A PROGRAM/W PARAMETER\n*                                      SELECT A FUNCTION\nSELCT20  EQU   *\n         ISPCALL ('SELECT',FULL14,SLSSCMD_)\n         B     SELCT50(R15)            CHECK RETURN CODE\nSELCT30  EQU   *\n         ISPCALL ('SELECT',FULL13,SLSSPGM_)\n         B     SELCT50(R15)            CHECK RETURN CODE\nSELCT40  EQU   *\n         ISPCALL ('SELECT',FULL28,RACFPGM_)\n         B     SELCT50(R15)            CHECK RETURN CODE\nSELCT50  EQU   *\n         B     SELCT60                 RC = 00 (CONTINUE)\n         B     SELCT60                 RC = 04 (CONTINUE)\n         B     ISPERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nSELCT60  EQU   *\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - CLOSE TABLE AND SAVE\n***********************************************************************\nTBCLOSE  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBCLOSE',TABLE,'REPLCOPY',' ',' ','SLSSTLIB')\n         B     TBCLO10(R15)            CHECK RETURN CODE\nTBCLO10  EQU   *\n         B     TBCLO20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBCLO20  EQU   *\n         BR    R4                      RETURN\n         TITLE 'SLSSMAIN - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nISPERR04 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),FOUR     IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR08 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),EIGHT    IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR12 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),TWELVE   IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR16 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),SIXTEEN  IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR20 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),TWENTY   IDENTIFY RETURN CODE\nISPERR30 EQU   *\n         MVC   SLSSERR3,EMSG3          SET MESSAGE THREE\n         MVC   SLSSERR4,EMSG4          SET MESSAGE FOUR\n         MVC   SLSSERR5,EMSG5          SET MESSAGE FIVE\n         MVC   SLSSERRX,EMSGX          SET MESSAGE X\n         MVC   PANEL,SLSS@ERR          IDENTIFY DISPLAY PANEL\n         MVC   TABLE,SLSSCNTL          SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         B     DISPLERR                DISPLAY ERROR PANEL\n         TITLE 'SLSSMAIN - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'SLSSMAIN - LITERAL POOL'\n         LTORG\n         TITLE 'SLSSMAIN - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL04   DC    F'04'                   FULLWORD CONSTANT, VALUE '04'\nFULL08   DC    F'08'                   FULLWORD CONSTANT, VALUE '08'\nFULL13   DC    F'13'                   FULLWORD CONSTANT, VALUE '13'\nFULL14   DC    F'14'                   FULLWORD CONSTANT, VALUE '14'\nFULL28   DC    F'28'                   FULLWORD CONSTANT, VALUE '28'\nYES      DC    CL1'Y'                  YES\nNO       DC    CL1'N'                  NO\nCOMPRESS DC    CL1'C'                  LIBRARY COMPRESS DESIRED\nOPTON    DC    CL1'?'                  TURN 'DEBUG' OPTION ON\nOPTOFF   DC    CL1'@'                  TURN 'DEBUG' OPTION OFF\nOPTX     DC    CL1'X'                  OPTION FROM PRIMARY MENU\nOPT1     DC    CL1'1'                  OPTION FROM PRIMARY MENU\nOPT2     DC    CL1'2'                  OPTION FROM PRIMARY MENU\nOPT3     DC    CL1'3'                  OPTION FROM PRIMARY MENU\nOPT4     DC    CL1'4'                  OPTION FROM PRIMARY MENU\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nTIMEMASK DC    X'F021207A2020'         USED TO DISPLAY / STORE TIME\nDEBUGVAL DC    CL5'DEBUG'              CHAR CONSTANT, VALUE 'DEBUG'\nSLSSMASK DC    CL8'  /  /  '           DATE MASK\nNOWRITE  DC    CL8'NOWRITE'            TABLE OPENED, NOWRITE ACCESS\nWRITE    DC    CL8'WRITE'              TABLE OPENED WRITE ACCESS\nSLSSBRWS DC    CL8'SLSSBRWS'           RACF APPL TO CONTROL BROWSE\nSLSSUPDT DC    CL8'SLSSUPDT'           RACF APPL TO CONTROL UPDATE\nSLSSADM  DC    CL8'SLSSADMN'           ADMINISTRATIVE TABLE NAME\nSLSSCNTL DC    CL8'SLSSCNTL'           CONTROL TABLE NAME\nSLSSMSTR DC    CL8'SLSSMSTR'           SLSS LIBRARY SELECTION PANEL\nSLSSPRIM DC    CL8'SLSSPRIM'           SLSS PRIMARY MENU PANEL\nSLSS@ERR DC    CL8'SLSS@ERR'           ERROR DISPLAY PANEL NAME\nSLSSBROW DC    CL8'SLSSBROW'           SLSS CLIST FOR OPTION 1\nSLSSPRNT DC    CL8'SLSSPRNT'           SLSS CLIST FOR OPTION 2\nSLSSSCAN DC    CL8'SLSSSCAN'           SLSS PGM FOR OPTION 3\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nSELID    DC    CL8'SELECT'             ISPF DIALOG SERVICE (SELECT)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nTBDID    DC    CL8'TBDISPL'            ISPF DIALOG SERVICE (TBDISPL)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nSKPID    DC    CL8'TBSKIP'             ISPF DIALOG SERVICE (TBSKIP)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nSLSSCMD  DC    CL14'CMD(%SLSS1234)'\nSLSSPGM  DC    CL13'PGM(SLSS1234)'\nRACFPGM  DC    CL28'PGM(DLXRACCK) PARM(12345678)'\nSPACES   DC    CL62' '\nISPMSG01 DC    CL62'UNABLE TO OPEN ADMINISTRATOR FILE, SLSSADMN.'\nISPMSG02 DC    CL62'UNABLE TO OBTAIN ADMINISTRATOR ID.'\nISPMSG03 DC    CL62'UNABLE TO OPEN SLSS CONTROL FILE, SLSSCNTL.'\nISPMSG04 DC    CL62'UNABLE TO DISPLAY SLSS PRIMARY MENU.'\nISPMSG05 DC    CL62'UNABLE TO UPDATE DIALOG VARIABLE(S).'\nISPMSG06 DC    CL62'UNABLE TO PROCESS CONTROL FILE, SLSSCNTL.'\nISPMSG07 DC    CL62'REQUESTED LIBRARY, 1234, DOES NOT EXIST.'\nISPMSG08 DC    CL62'UNABLE TO DISPLAY LIBRARY SELECTION PANEL.'\nISPMSG09 DC    CL62'UNABLE TO CLOSE SLSS CONTROL FILE, SLSSCNTL.'\nISPMSG10 DC    CL62'UNABLE TO RETRIEVE DIALOG VARIABLE(S).'\nISPMSG11 DC    CL62'UNABLE TO PROCESS OPTION 1 FROM PRIMARY MENU.'\nISPMSG12 DC    CL62'UNABLE TO PROCESS OPTION 2 FROM PRIMARY MENU.'\nISPMSG13 DC    CL62'UNABLE TO PROCESS OPTION 3 FROM PRIMARY MENU.'\nISPMSG14 DC    CL62'UNABLE TO PROCESS OPTION 4 FROM PRIMARY MENU.'\nISPMSG17 DC    CL62'UNABLE TO TURN ON ''DEBUG'' OPTION.'\nISPMSG18 DC    CL62'UNABLE TO TURN OFF ''DEBUG'' OPTION.'\nISPMSG19 DC    CL62'ENQ FAILED; 12345678 IN USE BY ANOTHER USER.'\nISPMSG30 DC    CL62'USER NOT AUTHORIZED TO BROWSE SLSS LIBRARIES.'\nISPMSG40 DC    CL62'USER NOT AUTHORIZED TO UPDATE SLSS LIBRARIES.'\nISPFMSG2 DC    CL62'RETURN CODE FOR ''ISPEXEC 12345678'' WAS 12.'\nEMSG3    DC    CL62'CONTACT SYSTEMS PROGRAMMING FOR FURTHER INFORMATION+\n               '\nEMSG4    DC    CL62'REGARDING THIS ERROR.'\nEMSG5    DC    CL62' '\nEMSGX    DC    CL62'PRESS ENTER TO CONTINUE.'\nNAMELST0 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'CHGFLG'\n         DC    CL8'SEL'\n         DC    CL8'SL'\n         DC    CL8'CIBSRTKY'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 62)\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'SLSSERR1'\n         DC    CL8'SLSSERR2'\n         DC    CL8'SLSSERR3'\n         DC    CL8'SLSSERR4'\n         DC    CL8'SLSSERR5'\n         DC    CL8'SLSSERRX'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'SLSS'\n         DC    CL8'CIBN'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'ZUSER'\n         DC    CL8'LIBADMIN'\n         DC    CL8'SLSSADMN'\n         DC    CL8'CIBNUMBR'\n         DC    CL8'CIBOWNER'\n         DC    CL8'SLSSDATE'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 5)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'DEBUG'\n         DC    CL8'SLSSTIME'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 2)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'ZMONTH'\n         DC    CL8'ZDAY'\n         DC    CL8'ZYEAR'\nLNAMLST5 EQU   *-NAMELST5              LENGTH OF VARIABLE LIST\nNAMELST6 DS    0F                      VGET VARIABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZUSER'\nLNAMLST6 EQU   *-NAMELST6              LENGTH OF VARIABLE LIST\nNAMELST7 DS    0F                      VGET & VPUT VARIABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'CHGFLG'\nLNAMLST7 EQU   *-NAMELST7              LENGTH OF VARIABLE LIST\nNAMELST8 DS    0F                      VPUT VARIABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'DEBUG'\nLNAMLST8 EQU   *-NAMELST8              LENGTH OF VARIABLE LIST\nNAMELST9 DS    0F                      VPUT VARIABLES\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'DEBUG'\n         DC    CL8'SLSS'\n         DC    CL8'CIBSRTKY'\n         DC    CL8'CIBNUMBR'\n         DC    CL8'LIBADMIN'\n         DC    CL8'CIBOWNER'\nLNAMLST9 EQU   *-NAMELST9              LENGTH OF VARIABLE LIST\nNAMELSTX DS    0F                      VGET / VPUT NULL LIST\n         DC    F'06'\n         DC    F'00'\n         DC    CL8' '\n         DC    CL8' '\n         DC    CL8' '\n         DC    CL8' '\n         DC    CL8' '\n         DC    CL8' '\nLNAMLSTX EQU   *-NAMELSTX              LENGTH OF VARIABLE LIST\n         TITLE 'SLSS - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nLINKRETN DS    F                       IEBCOPY RETURN CODE\nTIME     DS    F                       CURRENT TIME\nDEBUGVAR DS    CL5                     DEBUG PARAMETER\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nCONAREA  DS    D                       WORK AREA FOR BIN/DEC CONVERSION\nUNPKAREA DS    D                       WORK AREA FOR DEC/ZONED CONVERSN\nCHGFLG   DS    CL1                     LIBRARY TABLE UPDATE FLAG\nSEL      DS    CL1                     SELECTION FROM 'SLSSPRIM' PANEL\nSL       DS    CL1                     SELECTION FROM 'SLSSMSTR' PANEL\nCIBSRTKY DS    CL1                     LIBRARY SORT SEQUENCE KEY\nSLSSERR1 DS    CL62                    SLSS ERROR MESSAGE 1\nSLSSERR2 DS    CL62                    SLSS ERROR MESSAGE 2\nSLSSERR3 DS    CL62                    SLSS ERROR MESSAGE 3\nSLSSERR4 DS    CL62                    SLSS ERROR MESSAGE 4\nSLSSERR5 DS    CL62                    SLSS ERROR MESSAGE 5\nSLSSERRX DS    CL62                    SLSS ERROR MESSAGE X\nSLSS     DS    CL4                     SLSS LIBRARY ID (PANEL VAR)\nCIBN     DS    CL4                     SLSS LIBRARY ID (TABLE VAR)\nACCESS   DS    CL8                     TABLE OPEN ACCESS\nZUSER    DS    CL8                     LIBRARY USER\nLIBADMIN DS    CL8                     LIB ADMINISTRATOR (DIALOG VAR)\nSLSSADMN DS    CL8                     LIB ADMINISTRATOR (TABLE VAR)\nCIBNUMBR DS    CL8                     LIBRARY ID NUMBER\nCIBOWNER DS    CL8                     LIBRARY OWNER (TABLE VAR)\nSLSSDATE DS    0CL8                    CURRENT DATE (DIALOG VAR)\nSLSSMNTH DS    CL2                     CURRENT MONTH\n         DS    CL1                     '/'\nSLSSDAY  DS    CL2                     CURRENT DAY\n         DS    CL1                     '/'\nSLSSYEAR DS    CL2                     CURRENT YEAR\nDEBUG    DS    CL5                     DIALOG DEBUGGING FLAG\nSLSSTIME DS    CL5                     LIB CREATE/MOD TIME (DIALOG VAR)\nZMONTH   DS    CL2                     CURRENT MONTH\nZDAY     DS    CL2                     CURRENT DAY\nZYEAR    DS    CL2                     CURRENT YEAR\nTIMEWORK DS    CL6                     LIB CREATE/MOD TIME (DIALOG VAR)\nNAMELST_ DS    0F                      VGET / VPUT VARIABLES\n         DS    F'06'\n         DS    F'00'\n         DS    CL8' '\n         DS    CL8' '\n         DS    CL8' '\n         DS    CL8' '\n         DS    CL8' '\n         DS    CL8' '\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nPANEL    DS    CL8                     GENERIC PANEL NAME\nTABLE    DS    CL8                     GENERIC TABLE NAME\nSLSSCMD_ DC    CL14'CMD(%SLSS1234)'    GENERIC CLIST INVOKATION\nSLSSPGM_ DC    CL13'PGM(SLSS1234)'     GENERIC PROGRAM INVOKATION\nRACFPGM_ DC    CL28'PGM(DLXRACCK) PARM(12345678)'    GENERIC RACF PGM\nWORKLEN  EQU   *-WORKAREA\n         END   SLSSMAIN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLSSSCAN": {"ttr": 15109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x05\\x08\\x05\\x08\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1288, "newlines": 1288, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'SLSSSCAN - SLSS KEYWORD DEFINITION'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = SLSSSCAN                                       *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              11/06/86  WRITTEN.                               JWC.  *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'SLSSSCAN - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'SLSSSCAN - INITIALIZATION SECTION'\nSLSSSCAN CSECT\nSLSSSCAN AMODE ANY\nSLSSSCAN RMODE ANY\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,SLSSSCAN_&SYSDATE_&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING SLSSSCAN,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING SLSSSCAN+4095,R11       ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN','SPLIT','ENABLE'),       +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF0    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST0,SLSS,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF1                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF1    EQU   *\n         ISPCALL ('VDEFINE',NAMELST1,SLSSERR1,'CHAR',62)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,GWORD,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,NUM,'FIXED',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,NAME1,'CHAR',60)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,NUMBER,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTW,BK1,'CHAR',9)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VGET                    RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'SLSS' VARIABLE\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTX)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     INITVAL                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VGET)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VGET)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - INITIALIZE DIALOG VARIABLES\n***********************************************************************\nINITVAL  EQU   *\n         MVC   SLSSTABL,SLSS           INITIALIZE LIBRARY TABLE\n         MVC   SCANCON,SCAN            INITIALIZE 2ND PART OF SCANTABL\n         MVC   SLSSERR1,ERRMSG1        INITIALIZE MESSAGE ONE\n         MVC   SLSSERR2,ERRMSG2        INITIALIZE MESSAGE TWO\n         MVC   SLSSERR3,ERRMSG3        INITIALIZE MESSAGE THREE\n         MVC   SLSSERR4,ERRMSG4        INITIALIZE MESSAGE FOUR\n         MVC   SLSSERR5,ERRMSG5        INITIALIZE MESSAGE FIVE\n         MVC   SLSSERRX,ERRMSGX        INITIALIZE MESSAGE X\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         LA    R6,10                   R6 - MAX NUM TBOPEN ATTEMPTS\n         BAL   R2,TBOPEN               OPEN THE TABLE\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         LA    R6,10                   R6 - MAX NUM TBOPEN ATTEMPTS\n         BAL   R2,TBOPEN               OPEN THE TABLE\nINITV10  EQU   *\n         MVC   SLSSMSG,SCANMSG1        INITIALIZE SCAN MESSAGE\n         MVC   KEYW1,SPACES            INITIALIZE SCAN KEYWORD 1\n         MVC   KEYW2,SPACES            INITIALIZE SCAN KEYWORD 2\n         MVC   KEYW3,SPACES            INITIALIZE SCAN KEYWORD 3\n         MVC   KEYW4,SPACES            INITIALIZE SCAN KEYWORD 4\n         MVC   KEYW5,SPACES            INITIALIZE SCAN KEYWORD 5\n***********************************************************************\n*  PROCESSING SECTION - BUILD SCAN RESULTS TABLE\n***********************************************************************\nBLDTAB   EQU   *\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TABLE TOP\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TABLE TOP\n         MVC   PANLNAME,SLSSCAN1       SET SCAN PANEL NAME\n         BAL   R2,DISPLAY              DISPLAY ENTRY PANEL\n         BAL   R6,VERKEY10             VERIFY KEYWORD SYNTAX\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBCREATE             CREATE TEMPORARY TABLE\nBLDTAB10 EQU   *\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBVCLEAR             CLEAR SCAN TABLE VARIABLES\n         MVC   GWORD,KEYW1             SET GWORD TO SCAN KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL08         KEYWORD FOUND?\n         BE    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         CLC   SCANCODE,FULL24         KEYWORD FOUND?\n         BE    BLDTAB20                NO, CONTINUE BUILDING\n         L     R4,NUM                  R4 - NUMBER OF MANUALS / KEYW\n         LA    R5,BK1                  R5 - INDEX THROUGH MANUAL ID'S\nBLDTAB11 EQU   *\n         MVC   SCANNUM,0(R5)           MOVE TO TEMP TABLE VARIABLE\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR LIBRARY TABLE VARIABLES\n         MVC   SLSID,SCANNUM           SET SLSID TO GWORD KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL08         KEYWORD FOUND?\n         BE    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         MVC   SCANBOOK,BOOK           SET LOCATION FROM LIBRARY TABLE\n         MVC   SCANNAME,NAME1          SET MANUAL NAME FROM LIB TABLE\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBADD                ADD ROW TO TABLE\n         LA    R5,9(R5)                POINT TO NEXT MANUAL-ID\n         BCT   R4,BLDTAB11             CONTINUE\n         MVC   GWORD,KEYW1             SET GWORD TO SCAN KEYWORD\n         BAL   R2,GENCHECK             CHECK FOR GENERIC KEYWORD\n         TM    GENFLAG,YES             GENERIC KEYWORD?\n         BO    BLDTAB10                YES, CONTINUE BUILDING\nBLDTAB20 EQU   *\n         MVI   GENFLAG,NO              SET FLAG\n         MVC   TABLNAME,TEMPTAB1       RESET TEMP1 TABLE NAME\n         CLC   KEYW2,SPACES            ARE WE DONE BUILDING?\n         BE    TBSTATS                 YES, RETRIEVE NUMBER OF ROWS\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R2,TBCREATE             CREATE TEMPORARY TABLE\nBLDTAB21 EQU   *\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBVCLEAR             CLEAR SCAN TABLE VARIABLES\n         MVC   GWORD,KEYW2             SET GWORD TO SCAN KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL08         KEYWORD FOUND?\n         BE    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         CLC   SCANCODE,FULL24         KEYWORD FOUND?\n         BE    BLDTAB30                NO, CONTINUE BUILDING\n         L     R4,NUM                  R4 - NUMBER OF MANUALS / KEYW\n         LA    R5,BK1                  R5 - INDEX THROUGH MANUAL ID'S\nBLDTAB22 EQU   *\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR TEMP1 TABLE VARIABLES\n         MVC   SCANNUM,0(R5)           MOVE TO TEMP TABLE VARIABLE\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         MANUAL-ID FOUND?\n         BH    BLDTAB23                NO, CONTINUE\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR LIBRARY TABLE VARIABLES\n         MVC   SLSID,SCANNUM           SET SLSID TO GWORD KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         KEYWORD FOUND?\n         BH    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         MVC   SCANBOOK,BOOK           SET LOCATION FROM LIBRARY TABLE\n         MVC   SCANNAME,NAME1          SET MANUAL NAME FROM LIB TABLE\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R2,TBADD                ADD ROW TO TABLE\nBLDTAB23 EQU   *\n         LA    R5,9(R5)                POINT TO NEXT MANUAL-ID\n         BCT   R4,BLDTAB22             CONTINUE\n         MVC   GWORD,KEYW2             SET GWORD TO SCAN KEYWORD\n         BAL   R2,GENCHECK             CHECK FOR GENERIC KEYWORD\n         TM    GENFLAG,YES             GENERIC KEYWORD?\n         BO    BLDTAB21                YES, CONTINUE BUILDING\nBLDTAB30 EQU   *\n         MVI   GENFLAG,NO              SET FLAG\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R3,TBEND                CLOSE TEMP TABLE WITHOUT SAVING\n         MVC   TABLNAME,TEMPTAB2       RESET TEMP2 TABLE NAME\n         CLC   KEYW3,SPACES            ARE WE DONE BUILDING?\n         BE    TBSTATS                 YES, RETRIEVE NUMBER OF ROWS\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBCREATE             CREATE TEMPORARY TABLE\nBLDTAB31 EQU   *\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBVCLEAR             CLEAR SCAN TABLE VARIABLES\n         MVC   GWORD,KEYW3             SET GWORD TO SCAN KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL08         KEYWORD FOUND?\n         BE    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         CLC   SCANCODE,FULL24         KEYWORD FOUND?\n         BE    BLDTAB40                NO, CONTINUE BUILDING\n         L     R4,NUM                  R4 - NUMBER OF MANUALS / KEYW\n         LA    R5,BK1                  R5 - INDEX THROUGH MANUAL ID'S\nBLDTAB32 EQU   *\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR TEMP2 TABLE VARIABLES\n         MVC   SCANNUM,0(R5)           MOVE TO TEMP TABLE VARIABLE\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         MANUAL-ID FOUND?\n         BH    BLDTAB33                NO, CONTINUE\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR LIBRARY TABLE VARIABLES\n         MVC   SLSID,SCANNUM           SET SLSID TO GWORD KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         KEYWORD FOUND?\n         BH    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         MVC   SCANBOOK,BOOK           SET LOCATION FROM LIBRARY TABLE\n         MVC   SCANNAME,NAME1          SET MANUAL NAME FROM LIB TABLE\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBADD                ADD ROW TO TABLE\nBLDTAB33 EQU   *\n         LA    R5,9(R5)                POINT TO NEXT MANUAL-ID\n         BCT   R4,BLDTAB32             CONTINUE\n         MVC   GWORD,KEYW3             SET GWORD TO SCAN KEYWORD\n         BAL   R2,GENCHECK             CHECK FOR GENERIC KEYWORD\n         TM    GENFLAG,YES             GENERIC KEYWORD?\n         BO    BLDTAB31                YES, CONTINUE BUILDING\nBLDTAB40 EQU   *\n         MVI   GENFLAG,NO              SET FLAG\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R3,TBEND                CLOSE TEMP TABLE WITHOUT SAVING\n         MVC   TABLNAME,TEMPTAB1       RESET TEMP1 TABLE NAME\n         CLC   KEYW4,SPACES            ARE WE DONE BUILDING?\n         BE    TBSTATS                 YES, RETRIEVE NUMBER OF ROWS\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R2,TBCREATE             CREATE TEMPORARY TABLE\nBLDTAB41 EQU   *\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBVCLEAR             CLEAR SCAN TABLE VARIABLES\n         MVC   GWORD,KEYW4             SET GWORD TO SCAN KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL08         KEYWORD FOUND?\n         BE    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         CLC   SCANCODE,FULL24         KEYWORD FOUND?\n         BE    BLDTAB50                NO, CONTINUE BUILDING\n         L     R4,NUM                  R4 - NUMBER OF MANUALS / KEYW\n         LA    R5,BK1                  R5 - INDEX THROUGH MANUAL ID'S\nBLDTAB42 EQU   *\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR TEMP1 TABLE VARIABLES\n         MVC   SCANNUM,0(R5)           MOVE TO TEMP TABLE VARIABLE\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         MANUAL-ID FOUND?\n         BH    BLDTAB43                NO, CONTINUE\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR LIBRARY TABLE VARIABLES\n         MVC   SLSID,SCANNUM           SET SLSID TO GWORD KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         KEYWORD FOUND?\n         BH    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         MVC   SCANBOOK,BOOK           SET LOCATION FROM LIBRARY TABLE\n         MVC   SCANNAME,NAME1          SET MANUAL NAME FROM LIB TABLE\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R2,TBADD                ADD ROW TO TABLE\nBLDTAB43 EQU   *\n         LA    R5,9(R5)                POINT TO NEXT MANUAL-ID\n         BCT   R4,BLDTAB42             CONTINUE\n         MVC   GWORD,KEYW4             SET GWORD TO SCAN KEYWORD\n         BAL   R2,GENCHECK             CHECK FOR GENERIC KEYWORD\n         TM    GENFLAG,YES             GENERIC KEYWORD?\n         BO    BLDTAB41                YES, CONTINUE BUILDING\nBLDTAB50 EQU   *\n         MVI   GENFLAG,NO              SET FLAG\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R3,TBEND                CLOSE TEMP TABLE WITHOUT SAVING\n         MVC   TABLNAME,TEMPTAB2       RESET TEMP2 TABLE NAME\n         CLC   KEYW5,SPACES            ARE WE DONE BUILDING?\n         BE    TBSTATS                 YES, RETRIEVE NUMBER OF ROWS\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBCREATE             CREATE TEMPORARY TABLE\nBLDTAB51 EQU   *\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R2,TBVCLEAR             CLEAR SCAN TABLE VARIABLES\n         MVC   GWORD,KEYW5             SET GWORD TO SCAN KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL08         KEYWORD FOUND?\n         BE    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         CLC   SCANCODE,FULL24         KEYWORD FOUND?\n         BE    BLDTAB54                NO, WE'RE DONE BUILDING\n         L     R4,NUM                  R4 - NUMBER OF MANUALS / KEYW\n         LA    R5,BK1                  R5 - INDEX THROUGH MANUAL ID'S\nBLDTAB52 EQU   *\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR TEMP2 TABLE VARIABLES\n         MVC   SCANNUM,0(R5)           MOVE TO TEMP TABLE VARIABLE\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         MANUAL-ID FOUND?\n         BH    BLDTAB53                NO, CONTINUE\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n         BAL   R2,TBVCLEAR             CLEAR LIBRARY TABLE VARIABLES\n         MVC   SLSID,SCANNUM           SET SLSID TO GWORD KEYWORD\n         BAL   R2,TBSARG               SET SEARCH ARGUMENT & SCAN TABLE\n         CLC   SCANCODE,FULL00         KEYWORD FOUND?\n         BH    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         MVC   SCANBOOK,BOOK           SET LOCATION FROM LIBRARY TABLE\n         MVC   SCANNAME,NAME1          SET MANUAL NAME FROM LIB TABLE\n         MVC   TABLNAME,TEMPTAB1       SET TEMP1 TABLE NAME\n         BAL   R2,TBADD                ADD ROW TO TABLE\nBLDTAB53 EQU   *\n         LA    R5,9(R5)                POINT TO NEXT MANUAL-ID\n         BCT   R4,BLDTAB52             CONTINUE\n         MVC   GWORD,KEYW5             SET GWORD TO SCAN KEYWORD\n         BAL   R2,GENCHECK             CHECK FOR GENERIC KEYWORD\n         TM    GENFLAG,YES             GENERIC KEYWORD?\n         BO    BLDTAB51                YES, CONTINUE BUILDING\nBLDTAB54 EQU   *\n         MVC   TABLNAME,TEMPTAB2       SET TEMP2 TABLE NAME\n         BAL   R3,TBEND                CLOSE TEMP TABLE WITHOUT SAVING\n         MVC   TABLNAME,TEMPTAB1       RESET TEMP1 TABLE NAME\n         B     TBSTATS                 YES, RETRIEVE NUMBER OF ROWS\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE CURRENT NUMBER OF ROWS IN TEMP TABLE\n***********************************************************************\nTBSTATS  EQU   *\n         MVC   ISPFSERV,STAID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE TABLE STATISTICS\n         ISPCALL ('TBSTATS',TABLNAME,' ',' ',' ',' ',' ',' ','NUM')\n         B     TBSTA10(R15)            CHECK RETURN CODE\nTBSTA10  EQU   *\n         B     TBSTA20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSTATS)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBSTATS)\n         B     ISPERR12                RC = 12 (NOT VALID FOR TBSTATS)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSTA20  EQU   *\n         CLC   NUM,FULL00              ANYTHING FOUND?\n         BE    SCNERR08                NO, DISPLAY PANEL / MESSAGE\n         L     R2,NUM                  R2 - NUMBER OF HITS\n         CVD   R2,CONAREA              CONVERT TO DECIMAL\n         UNPK  UNPKAREA,CONAREA+1      MAKE IT PRINTABLE\n         MVC   NUMBER,UNPKAREA+2       MOVE TO BE DISPLAYED UPON SCREEN\n         BAL   R2,TBTOP                MOVE ROW POINTER TO TOP\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TEMPORARY TABLE\n***********************************************************************\nTBDISPL  EQU   *\n         MVC   ISPFSERV,TBDID          SET ISPF DIALOG SERVICE\n*                                      MOVE ROW POINTER\n         ISPCALL ('TBDISPL',TABLNAME,'SLSSCAN2')\n         B     TBDIS10(R15)            CHECK RETURN CODE\nTBDIS10  EQU   *\n         B     TBDISPL                 RC = 00 (CONTINUE)\n         B     TBDISPL                 RC = 00 (CONTINUE)\n         B     TBDIS20                 RC = 08 (CONTINUE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBDIS20  EQU   *\n         BAL   R3,TBEND                CLOSE TEMP TABLE WITHOUT SAVING\n         B     INITV10                 RETURN FOR MORE SCANNING\n         TITLE 'SLSSSCAN - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1)    FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'SLSSSCAN - ROUTINE SECTION'\n***********************************************************************\n*  ROUTINE SECTION - OPEN TABLE\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN',TABLNAME,'NOWRITE','SLSSTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBOPN20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     TBOPN30                 RC = 00 (CONTINUE)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBOPN20  EQU   *\n         BR    R2                      RETURN\nTBOPN30  EQU   *\n         BAL   R3,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n         CLC   ENDCODE,FULL00          TABLE CLOSED SUCCESSFULLY?\n         BNE   ISPERR12                NO, DISPLAY PANEL / MESSAGE\n         BCT   R6,TBOPEN               YES, TRY OPENING TABLE AGAIN\n***********************************************************************\n*  ROUTINE SECTION - POINT TO TOP OF TABLE\n***********************************************************************\nTBTOP    EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      POINT TO TOP OF TABLE\n         ISPCALL ('TBTOP',TABLNAME)\n         B     TBTOP10(R15)            CHECK RETURN CODE\nTBTOP10  EQU   *\n         B     TBTOP20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBTOP20  EQU   *\n         BR    R2                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY PANEL\n***********************************************************************\nDISPLAY  EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY',PANLNAME)\n         B     DISPL10(R15)            CHECK RETURN CODE\nDISPL10  EQU   *\n         B     DISPL20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     DISPL30                 RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL20  EQU   *\n         BR    R2                      RETURN\nDISPL30  EQU   *\n         MVC   TABLNAME,SLSSTABL       SET LIBRARY TABLE NAME\n         BAL   R3,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLNAME,SCANTABL       SET SCAN TABLE NAME\n         BAL   R3,TBEND                CLOSE TABLE WITHOUT SAVING\n         B     FINISH                  WE'RE DONE\n***********************************************************************\n*  ROUTINE SECTION - CLOSE TABLE WITHOUT SAVING\n***********************************************************************\nTBEND    EQU   *\n         MVC   ISPFSERV,ENDID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBEND',TABLNAME)\n         ST    R15,ENDCODE             STORE RETURN CODE FOR FUTURE USE\n         BR    R3                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - CLEAR TABLE VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR',TABLNAME)\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBCLR20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBCLR20  EQU   *\n         BR    R2                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DEFINE SEARCH ARGUMENT FOR TABLE SCAN\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n*                                      DEFINE SEARCH ARGUMENT\n         ISPCALL ('TBSARG',TABLNAME)\n         B     TBARG10(R15)            CHECK RETURN CODE\nTBARG10  EQU   *\n         B     TBSCAN                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ROUTINE SECTION - SEARCH TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   SCANCODE,FULL00         INITIALIZE TBSCAN RETURN CODE\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH TABLE\n         ISPCALL ('TBSCAN',TABLNAME)\n         B     TBSCN10(R15)            CHECK RETURN CODE\nTBSCN10  EQU   *\n         B     TBSCN20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     TBSCN30                 RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSCN20  EQU   *\n         BR    R2                      RETURN\nTBSCN30  EQU   *\n         ST    R15,SCANCODE            SAVE TBSCAN RETURN CODE\n         TM    GENFLAG,YES             GENERIC KEYWORD?\n         BNOR  R2                      NO, RETURN\n         MVC   SCANCODE,FULL24         SET TBSCAN RETURN CODE\n         BR    R2                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - CREATE TEMPORARY TABLE\n***********************************************************************\nTBCREATE EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n*                                      CREATE A TABLE\n         ISPCALL ('TBCREATE',TABLNAME,NAMELSTY,NAMELSTZ,'NOWRITE','REPL+\n               ACE','SLSSTLIB')\n         B     TBCRE10(R15)            CHECK RETURN CODE\nTBCRE10  EQU   *\n         B     TBCRE20                 RC = 00 (CONTINUE)\n         B     TBCRE20                 RC = 04 (CONTINUE)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBCRE20  EQU   *\n         BR    R2                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - ADD A ROW TO TABLE\n***********************************************************************\nTBADD    EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n*                                      ADD A ROW TO TABLE\n         ISPCALL ('TBADD',TABLNAME)\n         B     TBADD10(R15)            CHECK RETURN CODE\nTBADD10  EQU   *\n         B     TBADD20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     TBADD20                 RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBADD20  EQU   *\n         BR    R2                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - CHECK FOR GENERIC KEYWORD\n***********************************************************************\nGENCHECK EQU   *\n         MVI   GENFLAG,NO              SET FLAG\n         LA    R6,GWORD                R6 - INDEX THROUGH GWORD KEYWORD\n         LA    R7,20                   R7 - MAXIMUM LENGTH OF KEYWORD\nGEN10    EQU   *\n         CLC   0(1,R6),SPACES          END OF KEYWORD?\n         BER   R2                      YES, RETURN\n         CLC   0(2,R6),ASTERISK        GENERIC KEYWORD?\n         BE    GEN20                   YES, SET GENFLAG AND RETURN\n         LA    R6,1(R6)                INCREMENT R6\n         BCT   R7,GEN10                CONTINUE LOOKING FOR GENERIC\nGEN20    EQU   *\n         MVI   GENFLAG,YES             SET FLAG\n         BR    R2                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - VERIFY KEYWORD SYNTAX\n***********************************************************************\nVERKEY10 EQU   *\n         CLC   ASTERISK,KEYW1          ASTERISK ONLY SPECIFIED?\n         BNE   VERKEY20                NO, CKECK KEYW2\n         MVC   PANLNAME,SLSSCAN1       IDENTIFY DISPLAY PANEL\n         MVC   SLSSMSG,SCANMSG3        INITIALIZE SCAN MESSAGE\n         MVC   SLSSMSG+8(1),CHAR01     INITIALIZE SCAN MESSAGE\n         BAL   R2,DISPLAY              DISPLAY ERROR PANEL\n         B     VERKEY10                RE-VERIFY\nVERKEY20 EQU   *\n         CLC   ASTERISK,KEYW2          ASTERISK ONLY SPECIFIED?\n         BNE   VERKEY30                NO, CKECK KEYW3\n         MVC   PANLNAME,SLSSCAN1       IDENTIFY DISPLAY PANEL\n         MVC   SLSSMSG,SCANMSG3        INITIALIZE SCAN MESSAGE\n         MVC   SLSSMSG+8(1),CHAR02     INITIALIZE SCAN MESSAGE\n         BAL   R2,DISPLAY              DISPLAY ERROR PANEL\n         B     VERKEY20                RE-VERIFY\nVERKEY30 EQU   *\n         CLC   ASTERISK,KEYW3          ASTERISK ONLY SPECIFIED?\n         BNE   VERKEY40                NO, CKECK KEYW4\n         MVC   PANLNAME,SLSSCAN1       IDENTIFY DISPLAY PANEL\n         MVC   SLSSMSG,SCANMSG3        INITIALIZE SCAN MESSAGE\n         MVC   SLSSMSG+8(1),CHAR03     INITIALIZE SCAN MESSAGE\n         BAL   R2,DISPLAY              DISPLAY ERROR PANEL\n         B     VERKEY30                RE-VERIFY\nVERKEY40 EQU   *\n         CLC   ASTERISK,KEYW4          ASTERISK ONLY SPECIFIED?\n         BNE   VERKEY50                NO, CKECK KEYW5\n         MVC   PANLNAME,SLSSCAN1       IDENTIFY DISPLAY PANEL\n         MVC   SLSSMSG,SCANMSG3        INITIALIZE SCAN MESSAGE\n         MVC   SLSSMSG+8(1),CHAR04     INITIALIZE SCAN MESSAGE\n         BAL   R2,DISPLAY              DISPLAY ERROR PANEL\n         B     VERKEY40                RE-VERIFY\nVERKEY50 EQU   *\n         CLC   ASTERISK,KEYW5          ASTERISK ONLY SPECIFIED?\n         BNE   VERKEY60                NO, RETURN\n         MVC   PANLNAME,SLSSCAN1       IDENTIFY DISPLAY PANEL\n         MVC   SLSSMSG,SCANMSG3        INITIALIZE SCAN MESSAGE\n         MVC   SLSSMSG+8(1),CHAR05     INITIALIZE SCAN MESSAGE\n         BAL   R2,DISPLAY              DISPLAY ERROR PANEL\n         B     VERKEY50                RE-VERIFY\nVERKEY60 EQU   *\n         BR    R6                      RETURN\n         TITLE 'SLSSSCAN - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nISPERR04 EQU   *\n         MVC   SLSSERR2+15(2),FOUR     SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR08 EQU   *\n         MVC   SLSSERR2+15(2),EIGHT    SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR12 EQU   *\n         MVC   SLSSERR2+15(2),TWELVE   SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR16 EQU   *\n         MVC   SLSSERR2+15(2),SIXTEEN  SET RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR20 EQU   *\n         MVC   SLSSERR2+15(2),TWENTY   SET RETURN CODE\nISPERR30 EQU   *\n         MVC   SLSSERR1+21(8),ISPFSERV     IDENTIFY ISPF SERVICE\n         MVC   PANLNAME,SLSS@ERR       IDENTIFY DISPLAY PANEL\n         BAL   R2,DISPLAY              DISPLAY ERROR PANEL\n         B     FINISH                  WE'RE DONE\nSCNERR08 EQU   *\n         MVC   PANLNAME,SLSSCAN1       IDENTIFY DISPLAY PANEL\n         MVC   SLSSMSG,SCANMSG2        INITIALIZE SCAN MESSAGE\n         BAL   R2,DISPLAY              DISPLAY ERROR PANEL\n         B     INITV10                 RETURN FOR MORE SCANNING\n         TITLE 'SLSSSCAN - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nNO       EQU   X'00'                   NOT A GENERIC KEYWORD\nYES      EQU   X'01'                   A GENERIC KEYWORD\n         TITLE 'SLSSSCAN - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   FULLWORD CONSTANT, VALUE '00'\nFULL08   DC    F'08'                   FULLWORD CONSTANT, VALUE '08'\nFULL24   DC    F'24'                   FULLWORD CONSTANT, VALUE '24'\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nCHAR01   DC    CL1'1'                  CHARACTER CONSTANT, VALUE '1'\nCHAR02   DC    CL1'2'                  CHARACTER CONSTANT, VALUE '2'\nCHAR03   DC    CL1'3'                  CHARACTER CONSTANT, VALUE '3'\nCHAR04   DC    CL1'4'                  CHARACTER CONSTANT, VALUE '4'\nCHAR05   DC    CL1'5'                  CHARACTER CONSTANT, VALUE '5'\nASTERISK DC    CL2'* '                 GENERIC KEYWORD INDICATOR\nSPACES   DC    CL80' '                 USED FOR INITIALIZATION\nTEMPTAB1 DC    CL8'TEMPTAB1'           TEMPORARY TABLE NAME\nTEMPTAB2 DC    CL8'TEMPTAB2'           TEMPORARY TABLE NAME\nSLSS@ERR DC    CL8'SLSS@ERR'           ERROR DISPLAY PANEL NAME\nSLSSCAN1 DC    CL8'SLSSCAN1'           SCAN DISPLAY PANEL NAME\nSCAN     DC    CL4'SCAN'               SECOND PART OF SCANTABL\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nENDID    DC    CL8'TBEND'              ISPF DIALOG SERVICE (TBEND)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nTBDID    DC    CL8'TBDISPL'            ISPF DIALOG SERVICE (TBDISPL)\nSTAID    DC    CL8'TBSTATS'            ISPF DIALOG SERVICE (TBSTATS)\nERRMSG1  DC    CL62'ISPF DIALOG SERVICE, 12345678, ENDED.'\nERRMSG2  DC    CL62'RETURN CODE IS 12.'\nERRMSG3  DC    CL62'CONTACT SYSTEMS PROGRAMMING FOR FURTHER INFORMATION+\n               '\nERRMSG4  DC    CL62'REGARDING THIS ERROR.'\nERRMSG5  DC    CL62' '\nERRMSGX  DC    CL62'PRESS ENTER TO CONTINUE.'\nSCANMSG1 DC    CL62'ENTER KEYWORD(S) && PRESS ENTER TO SCAN OR END TO C+\n               ANCEL.'\nSCANMSG2 DC    CL62'NO ENTRIES FOUND.'\nSCANMSG3 DC    CL62'KEYWORD-_ MUST CONTAIN A VALUE OTHER THAN ''*'' BY +\n               ITSELF.'\nNAMELST0 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'SLSS'\n         DC    CL8'BOOK'\n         DC    CL8'SCANBOOK'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 62)\n         DC    F'07'\n         DC    F'00'\n         DC    CL8'SLSSERR1'\n         DC    CL8'SLSSERR2'\n         DC    CL8'SLSSERR3'\n         DC    CL8'SLSSERR4'\n         DC    CL8'SLSSERR5'\n         DC    CL8'SLSSERRX'\n         DC    CL8'SLSSMSG'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'GWORD'\n         DC    CL8'KEYW1'\n         DC    CL8'KEYW2'\n         DC    CL8'KEYW3'\n         DC    CL8'KEYW4'\n         DC    CL8'KEYW5'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'NUM'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 60)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'NAME1'\n         DC    CL8'SCANNAME'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'NUMBER'\nNAMELSTW DS    0F                      EXTENSION VARIABLES - STATIC\n         DC    F'152'\n         DC    F'00'\n         DC    CL8'BK1'\n         DC    CL8'BK2'\n         DC    CL8'BK3'\n         DC    CL8'BK4'\n         DC    CL8'BK5'\n         DC    CL8'BK6'\n         DC    CL8'BK7'\n         DC    CL8'BK8'\n         DC    CL8'BK9'\n         DC    CL8'BK10'\n         DC    CL8'BK11'\n         DC    CL8'BK12'\n         DC    CL8'BK13'\n         DC    CL8'BK14'\n         DC    CL8'BK15'\n         DC    CL8'BK16'\n         DC    CL8'BK17'\n         DC    CL8'BK18'\n         DC    CL8'BK19'\n         DC    CL8'BK20'\n         DC    CL8'BK21'\n         DC    CL8'BK22'\n         DC    CL8'BK23'\n         DC    CL8'BK24'\n         DC    CL8'BK25'\n         DC    CL8'BK26'\n         DC    CL8'BK27'\n         DC    CL8'BK28'\n         DC    CL8'BK29'\n         DC    CL8'BK30'\n         DC    CL8'BK31'\n         DC    CL8'BK32'\n         DC    CL8'BK33'\n         DC    CL8'BK34'\n         DC    CL8'BK35'\n         DC    CL8'BK36'\n         DC    CL8'BK37'\n         DC    CL8'BK38'\n         DC    CL8'BK39'\n         DC    CL8'BK40'\n         DC    CL8'BK41'\n         DC    CL8'BK42'\n         DC    CL8'BK43'\n         DC    CL8'BK44'\n         DC    CL8'BK45'\n         DC    CL8'BK46'\n         DC    CL8'BK47'\n         DC    CL8'BK48'\n         DC    CL8'BK49'\n         DC    CL8'BK50'\n         DC    CL8'BK51'\n         DC    CL8'BK52'\n         DC    CL8'BK53'\n         DC    CL8'BK54'\n         DC    CL8'BK55'\n         DC    CL8'BK56'\n         DC    CL8'BK57'\n         DC    CL8'BK58'\n         DC    CL8'BK59'\n         DC    CL8'BK60'\n         DC    CL8'BK61'\n         DC    CL8'BK62'\n         DC    CL8'BK63'\n         DC    CL8'BK64'\n         DC    CL8'BK65'\n         DC    CL8'BK66'\n         DC    CL8'BK67'\n         DC    CL8'BK68'\n         DC    CL8'BK69'\n         DC    CL8'BK70'\n         DC    CL8'BK71'\n         DC    CL8'BK72'\n         DC    CL8'BK73'\n         DC    CL8'BK74'\n         DC    CL8'BK75'\n         DC    CL8'BK76'\n         DC    CL8'BK77'\n         DC    CL8'BK78'\n         DC    CL8'BK79'\n         DC    CL8'BK80'\n         DC    CL8'BK81'\n         DC    CL8'BK82'\n         DC    CL8'BK83'\n         DC    CL8'BK84'\n         DC    CL8'BK85'\n         DC    CL8'BK86'\n         DC    CL8'BK87'\n         DC    CL8'BK88'\n         DC    CL8'BK89'\n         DC    CL8'BK90'\n         DC    CL8'BK91'\n         DC    CL8'BK92'\n         DC    CL8'BK93'\n         DC    CL8'BK94'\n         DC    CL8'BK95'\n         DC    CL8'BK96'\n         DC    CL8'BK97'\n         DC    CL8'BK98'\n         DC    CL8'BK99'\n         DC    CL8'BK100'\n         DC    CL8'BK101'\n         DC    CL8'BK102'\n         DC    CL8'BK103'\n         DC    CL8'BK104'\n         DC    CL8'BK105'\n         DC    CL8'BK106'\n         DC    CL8'BK107'\n         DC    CL8'BK108'\n         DC    CL8'BK109'\n         DC    CL8'BK110'\n         DC    CL8'BK111'\n         DC    CL8'BK112'\n         DC    CL8'BK113'\n         DC    CL8'BK114'\n         DC    CL8'BK115'\n         DC    CL8'BK116'\n         DC    CL8'BK117'\n         DC    CL8'BK118'\n         DC    CL8'BK119'\n         DC    CL8'BK120'\n         DC    CL8'BK121'\n         DC    CL8'BK122'\n         DC    CL8'BK123'\n         DC    CL8'BK124'\n         DC    CL8'BK125'\n         DC    CL8'BK126'\n         DC    CL8'BK127'\n         DC    CL8'BK128'\n         DC    CL8'BK129'\n         DC    CL8'BK130'\n         DC    CL8'BK131'\n         DC    CL8'BK132'\n         DC    CL8'BK133'\n         DC    CL8'BK134'\n         DC    CL8'BK135'\n         DC    CL8'BK136'\n         DC    CL8'BK137'\n         DC    CL8'BK138'\n         DC    CL8'BK139'\n         DC    CL8'BK140'\n         DC    CL8'BK141'\n         DC    CL8'BK142'\n         DC    CL8'BK143'\n         DC    CL8'BK144'\n         DC    CL8'BK145'\n         DC    CL8'BK146'\n         DC    CL8'BK147'\n         DC    CL8'BK148'\n         DC    CL8'BK149'\n         DC    CL8'BK150'\n         DC    CL8'SLSID'\n         DC    CL8'SCANNUM'\nLENLSTW  EQU   *-NAMELSTW\nNAMELSTX DS    0F                      NAME OF VGET VARIABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SLSS'\nNAMELSTY DS    0F                      TEMP TABLE KEY VARIABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SCANNUM'\nNAMELSTZ DS    0F                      TEMP TABLE NAME VARIABLES\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'SCANBOOK'\n         DC    CL8'SCANNAME'\n         TITLE 'SLSSSCAN - LITERAL POOL'\n         LTORG\n         TITLE 'SLSSSCAN - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nCONAREA  DS    D                       WORK AREA FOR BIN/DEC CONVERSION\nUNPKAREA DS    D                       WORK AREA FOR DEC/ZONED CONVERSN\nGENFLAG  DS    CL1                     GENERIC KEYWORD INDICATOR\nSCANTABL DS    0F\nSLSS     DS    CL4                     LIBRARY NAME\nSCANCON  DS    CL4                     CONSTANT OF 'SCAN'\nBOOK     DS    CL8                     LOCATION OF MANUAL\nSCANBOOK DS    CL8                     LOCATION OF MANUAL\nSLSSTABL DS    CL8                     LIBRARY TABLE\nTABLNAME DS    CL8                     GENERIC TABLE NAME\nPANLNAME DS    CL8                     GENERIC PANEL NAME\nSLSSERR1 DS    CL62                    SLSS ERROR MESSAGE 1\nSLSSERR2 DS    CL62                    SLSS ERROR MESSAGE 2\nSLSSERR3 DS    CL62                    SLSS ERROR MESSAGE 3\nSLSSERR4 DS    CL62                    SLSS ERROR MESSAGE 4\nSLSSERR5 DS    CL62                    SLSS ERROR MESSAGE 5\nSLSSERRX DS    CL62                    SLSS ERROR MESSAGE X\nSLSSMSG  DS    CL62                    SCAN DISPLAY PANEL MESSAGE\nGWORD    DS    CL20                    SCAN TABLE KEYWORD\nKEYW1    DS    CL20                    SCAN TABLE KEYWORD 1\nKEYW2    DS    CL20                    SCAN TABLE KEYWORD 2\nKEYW3    DS    CL20                    SCAN TABLE KEYWORD 3\nKEYW4    DS    CL20                    SCAN TABLE KEYWORD 4\nKEYW5    DS    CL20                    SCAN TABLE KEYWORD 5\nNUM      DS    F                       NUMBER OF KEYWORD HITS IN LIB\nSCANCODE DS    F                       RETURN CODE FROM TBSCAN\nENDCODE  DS    F                       RETURN CODE FROM TBEND\nNAME1    DS    CL60                    LINE 1 OF MANUAL TITLE\nSCANNAME DS    CL60                    LINE 1 OF MANUAL TITLE\nNUMBER   DS    CL4                     NUMBER OF KEYWORD HITS IN LIB\nBK1      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK2      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK3      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK4      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK5      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK6      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK7      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK8      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK9      DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK10     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK11     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK12     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK13     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK14     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK15     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK16     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK17     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK18     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK19     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK20     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK21     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK22     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK23     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK24     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK25     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK26     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK27     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK28     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK29     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK30     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK31     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK32     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK33     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK34     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK35     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK36     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK37     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK38     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK39     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK40     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK41     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK42     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK43     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK44     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK45     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK46     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK47     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK48     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK49     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK50     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK51     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK52     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK53     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK54     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK55     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK56     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK57     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK58     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK59     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK60     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK61     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK62     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK63     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK64     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK65     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK66     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK67     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK68     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK69     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK70     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK71     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK72     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK73     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK74     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK75     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK76     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK77     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK78     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK79     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK80     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK81     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK82     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK83     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK84     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK85     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK86     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK87     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK88     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK89     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK90     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK91     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK92     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK93     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK94     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK95     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK96     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK97     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK98     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK99     DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK100    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK101    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK102    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK103    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK104    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK105    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK106    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK107    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK108    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK109    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK110    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK111    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK112    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK113    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK114    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK115    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK116    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK117    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK118    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK119    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK120    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK121    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK122    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK123    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK124    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK125    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK126    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK127    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK128    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK129    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK130    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK131    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK132    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK133    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK134    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK135    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK136    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK137    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK138    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK139    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK140    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK141    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK142    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK143    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK144    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK145    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK146    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK147    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK148    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK149    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nBK150    DS    CL9                     MANUAL ID USED IN SCAN TABLE\nSLSID    DS    CL9                     MANUAL ID FROM LIBRARY TABLE\nSCANNUM  DS    CL9                     MANUAL ID FROM LIBRARY TABLE\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nWORKLEN  EQU   *-WORKAREA\n         END   SLSSSCAN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLSSSUBL": {"ttr": 15622, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x06`\\x06`\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1632, "newlines": 1632, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'SLSSSUBL - BUILD SLSS SUB LIBRARIES FROM ''MAIN'''\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = SLSSSUBL                                       *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              06/15/87  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'SLSSSUBL - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'SLSSSUBL - INITIALIZATION SECTION'\nSLSSSUBL CSECT\nSLSSSUBL AMODE ANY\nSLSSSUBL RMODE ANY\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,SLSSSUBL_&SYSDATE_&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING SLSSSUBL,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING SLSSSUBL+4095,R11       ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         LA    R10,4095(R11)           LOAD REG 11 WITH ENTRY + 4095\n         USING SLSSSUBL+8190,R10       ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF00   EQU   *\n         MVC   SLSSERR1,ISPMSG16       INITIALIZE MESSAGE ONE\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST0,LOC1,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF01                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF01   EQU   *\n         ISPCALL ('VDEFINE',NAMELST1,ORDSTS,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF02                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF02   EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,SLSSERR1,'CHAR',62)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF03                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF03   EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,NAME1,'CHAR',60)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF04                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF04   EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,SUBLIB,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF05                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF05   EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,LOCID,'CHAR',13)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF06                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF06   EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,SLSID,'CHAR',9)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF07                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF07   EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,SLSSVER,'CHAR',2)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF08                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF08   EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,LSTUTIM,'CHAR',5)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF09                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF09   EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,CIBJDATE,'CHAR',6)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF0A                  YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF0A   EQU   *\n         ISPCALL ('VDEFINE',NAMELSTA,CIBNAME,'CHAR',20)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VDEF20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVDEF20   EQU   *\n         BAL   R4,VGET                 RETRIEVE 'SLSSSAV' VARIABLE\n***********************************************************************\n*  PROCESSING SECTION - CREATE MEMBER LIBRARY BUILDING TABLE\n***********************************************************************\nSUBLD000 EQU   *\n         MVC   TABLE,MAINMEMS          SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG17       SET SLSSERR1\n         LA    R15,4                   SET BRANCH DISPLACEMENT\n         BAL   R4,TBCREATE             CREATE MEMBER TABLE\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   ACCESS,WRITE            SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG07       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         MVC   SLSSERR1,ISPMSG08       SET SLSSERR1\n         BAL   R4,TBTOP                SET ROW POINTER TO TOP OF TABLE\nSUBLD010 EQU   *\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG08       SET SLSSERR1\n         BAL   R4,TBVCLEAR             CLEAR TABLE VARIABLES\n         MVC   SLSSWRN1,ISPMSG18       SET SLSSWRN1\n         BAL   R4,TBSKIP               MOVE THE ROW POINTER\n         C     R15,FULL08              MEMBER LIST FOUND?\n         BNE   SUBLD020                YES, CONTINUE\n         BAL   R4,TBCLOSE              CLOSE AND SAVE TABLE\n         B     SUBLD100                CREATE SUB-LIB BUILDING TABLE\nSUBLD020 EQU   *\n         CLC   CIBN,MAIN               MAIN LIBRARY?\n         BE    SUBLD010                YES, PROCESS NEXT SUB-LIB\n         MVC   CIBSRTKY,SPACES         RE-SET LIBRARY SORT KEY\n         BAL   R4,TBMOD                UPDATE ROW IN TABLE\n         MVC   SUBLIB,CIBN             SET SUB-LIBRARY\n         LA    R2,SLB1                 INDEX THROUGH MEMBER NAMES\n         LA    R3,120                  MAX NUMBER OF MEMBERS / SUB-LIB\n         MVC   TABLE,MAINMEMS          SET NAME OF TABLE\nSUBLD030 EQU   *\n         CLC   0(8,R2),SPACES          DONE WITH THIS SUB-LIB?\n         BE    SUBLD010                YES, PROCESS NEXT SUB-LIB\n         MVC   MEMBER,0(R2)            SET MEMBER\n         MVC   SLSSERR1,ISPMSG20       SET SLSSERR1\n         BAL   R4,TBBOTTOM             SET ROW POINTER TO THE BOTTOM\n         MVC   SLSSERR1,ISPMSG20       SET SLSSERR1\n         BAL   R4,TBADD                ADD A ROW TO A TABLE\n         C     R15,FULL08              ADD OK?\n         BNE   SUBLD040                YES, CONTINUE\n         B     ISPERR08                DISPLAY ERROR PANEL\nSUBLD040 EQU   *\n         LA    R2,8(R2)                POINT TO NEXT MEMBER\n         BCT   R3,SUBLD030             CONTINUE\n         B     SUBLD010                PROCESS NEXT SUB-LIB\n***********************************************************************\n*  PROCESSING SECTION - CREATE SUB-LIBRARY BUILDING TABLE\n***********************************************************************\nSUBLD100 EQU   *\n         MVC   TABLE,SUBUILD           SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG01       SET SLSSERR1\n         LA    R15,0                   SET BRANCH DISPLACEMENT\n         BAL   R4,TBCREATE             CREATE SUBUILD TABLE\n         MVC   TABLE,MAINLOCS          SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   ACCESS,NOWRITE          SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG02       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         MVC   SLSSERR1,ISPMSG03       SET SLSSERR1\n         BAL   R4,TBTOP                SET ROW POINTER TO TOP OF TABLE\nSUBLD110 EQU   *\n         MVC   TABLE,MAINLOCS          SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG03       SET SLSSERR1\n         BAL   R4,TBVCLEAR             CLEAR TABLE VARIABLES\n         MVC   SLSSWRN1,ISPMSG04       SET SLSSWRN1\n         BAL   R4,TBSKIP               MOVE THE ROW POINTER\n         C     R15,FULL08              SUB-LIBRARY LIST FOUND?\n         BNE   SUBLD120                YES, CONTINUE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         B     SUBLD200                BEGIN BUILDING SUB-LIBRARIES\nSUBLD120 EQU   *\n         MVC   SUBID,LOCID+4           SET MANUAL ID\n         LA    R2,LOC1                 INDEX THROUGH MANUAL LOCATIONS\n         LA    R3,60                   MAX NUMBER OF LOCATIONS / MANUAL\nSUBLD130 EQU   *\n         CLC   0(8,R2),SPACES          DONE WITH THIS MANUAL ID?\n         BE    SUBLD110                YES, PROCESS NEXT MANUAL ID\n         MVC   TABLE,MAINMEMS          SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG21       SET SLSSERR1\n         BAL   R4,TBTOP                SET ROW POINTER TO TOP OF TABLE\n         BAL   R4,TBVCLEAR             CLEAR TABLE VARIABLES\n         MVC   MEMBER,0(R2)            SET MEMBER\n         BAL   R4,TBSARG               DEFINE SEARCH ARGUMENT\n         BAL   R4,TBSCAN               SEARCH A TABLE\n         C     R15,FULL08              MEMBER NAME FOUND?\n         BNE   SUBLD140                YES, CONTINUE\n         MVC   SLSSERR1,ISPMSG22       SET SLSSERR1\n         MVC   SLSSERR1+8(8),MEMBER    IDENTIFY MEMBER NAME\n         MVC   SLSSERR1+48(9),SUBID    IDENTIFY MEMBER NAME\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),EIGHT    IDENTIFY RETURN CODE\n         B     ISPERR30                WE'RE DONE\nSUBLD140 EQU   *\n         MVC   TABLE,SUBUILD           SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG05       SET SLSSERR1\n         BAL   R4,TBBOTTOM             SET ROW POINTER TO THE BOTTOM\n         MVC   SLSSERR1,ISPMSG05       SET SLSSERR1\n         BAL   R4,TBADD                ADD A ROW TO A TABLE\n         C     R15,FULL08              ADD OK?\n         BNE   SUBLD150                YES, CONTINUE\n         B     ISPERR08                DISPLAY ERROR PANEL\nSUBLD150 EQU   *\n         LA    R2,8(R2)                POINT TO NEXT SUB-LIBRARY\n         BCT   R3,SUBLD130             CONTINUE\n***********************************************************************\n*  PROCESSING SECTION - BUILD SUB-LIBRARIES FROM MAIN LIBRARY\n***********************************************************************\nSUBLD200 EQU   *\n         MVC   TABLE,SUBUILD           SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG06       SET SLSSERR1\n         BAL   R4,TBTOP                SET ROW POINTER TO TOP OF TABLE\n         MVC   TABLE,MAIN              SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   ACCESS,NOWRITE          SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG12       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         LA    R2,SLSSSAV              ADDR OF SELECTED LIBRARY OR ALL\n         CLC   ALL,SLSSSAV             ARE WE BUILDING ALL SUB-LIBS?\n         BNE   SUBLD220                NO, DON'T NEED SLSSCNTL\n         MVC   TABLE,SLSSCNTL          SET NAME OF TABLE\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   ACCESS,NOWRITE          SET TABLE OPEN ACCESS\n         MVC   SLSSERR1,ISPMSG07       SET SLSSERR1\n         BAL   R4,TBOPEN               OPEN TABLE FOR USE\n         MVC   SLSSERR1,ISPMSG08       SET SLSSERR1\n         BAL   R4,TBVCLEAR             CLEAR TABLE VARIABLES\n         MVC   CIBN,MAIN               SET CIBN\n         BAL   R4,TBSARG               DEFINE SEARCH ARGUMENT\n         BAL   R4,TBSCAN               SEARCH A TABLE\n         C     R15,FULL08              SUB-LIBRARY LIST FOUND?\n         BNE   SUBLD210                YES, CONTINUE\n         MVC   SLSSERR1,ISPMSG09       SET SLSSERR1\n         MVC   SLSSERR1+19(4),CIBN     IDENTIFY SLSS LIBRARY\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),EIGHT    IDENTIFY RETURN CODE\n         B     ISPERR30                WE'RE DONE\nSUBLD210 EQU   *\n         LA    R2,SLB1                 INDEX THROUGH SUB-LIBRARIES\n         LA    R3,120                  MAX NUMBER OF SUB-LIBRARIES\nSUBLD220 EQU   *\n         CLC   0(8,R2),SPACES          ARE WE DONE?\n         BE    SUBLD280                YES, CLOSE TABLES AND EXIT\n         MVC   SLSS,0(R2)              SET SUB-LIBRARY\n         MVC   TABLE,SPACES            CLEAR TABLE NAME\n         MVC   TABLE(4),0(R2)          SET TABLE NAME\n         MVC   SLSSERR1,ISPMSG10       SET SLSSERR1\n         MVC   SLSSERR1+17(4),SLSS     MOVE IN LIBRARY NAME\n         LA    R15,8                   BRANCH DISPLACEMENT FOR TBCREATE\n         BAL   R4,TBCREATE             CREATE NEW SLSS TABLE\n         MVC   SLSSPRC1,PMSG1          SET SLSSPRC1\n         MVC   SLSSPRC2,PMSG2          SET SLSSPRC2\n         MVC   SLSSPRC3,PMSG3          SET SLSSPRC3\n         MVC   SLSSPRC4,PMSG4          SET SLSSPRC4\n         MVC   SLSSPRC4+25(4),SLSS     MOVE IN LIBRARY NAME\n         MVC   SLSSPRC5,PMSG5          SET SLSSPRC5\n         MVC   SLSSPRCX,PMSGX          SET SLSSPRCX\n         MVC   PANEL,SLSS@PRC          SET PANEL NAME\n         MVC   SLSSERR1,ISPMSG11       SET SLSSERR1\n         MVC   CONTROL1,DISPL          SET CONTROL FUNCTION ONE\n         MVC   CONTROL2,LOCK           SET CONTROL FUNCTION TWO\n         BAL   R4,CONTROL              SET PROCESSING CONTROL FOR BUILD\n         BAL   R4,DISPLAY              DISPLAY PROCESSING PANEL\n         MVC   SUBMASK,SPACES          CLEAR SUBMASK\n         MVC   TABLE,SUBUILD           SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG06       SET SLSSERR1\n         BAL   R4,TBVCLEAR             CLEAR TABLE VARIABLES\n         MVC   SUBLIB,SLSS             SET SUBLIB\n         BAL   R4,TBSARG               DEFINE SEARCH ARGUMENT\nSUBLD230 EQU   *\n         MVC   TABLE,SUBUILD           SET NAME OF TABLE\n         BAL   R4,TBSCAN               SEARCH A TABLE\n         C     R15,FULL08              DONE WITH THIS SUB-LIBRARY?\n         BE    SUBLD250                YES, CONTINUE\n         CLC   SUBMASK,SUBID           PROCESSED ALREADY?\n         BE    SUBLD230                YES, GET NEXT\n         MVC   SUBMASK,SUBID           UPDATE SUBMASK\n         MVC   TABLE,MAIN              SET NAME OF TABLE\n         MVC   SLSSERR1,ISPMSG06       SET SLSSERR1\n         BAL   R4,TBTOP                SET ROW POINTER TO TOP OF TABLE\n         BAL   R4,TBVCLEAR             CLEAR TABLE VARIABLES\n         MVC   SLSID,SUBID             SET SLSID\n         BAL   R4,TBSARG               DEFINE SEARCH ARGUMENT\n         BAL   R4,TBSCAN               SEARCH A TABLE\n         C     R15,FULL08              MANUAL-ID FOUND?\n         BNE   SUBLD240                YES, CONTINUE\n         MVC   CONTROL1,ERRORS         SET CONTROL FUNCTION ONE\n         MVC   CONTROL2,RETURN         SET CONTROL FUNCTION TWO\n         BAL   R4,CONTROL              CLOSE TABLE WITHOUT SAVING\n         MVC   SLSSWRN1,ISPMSG13       SET SLSSERR1\n         MVC   SLSSWRN1+11(9),SLSID    IDENTIFY MANUAL-ID\n         MVC   SLSSWRN2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSWRN2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSWRN2+39(2),EIGHT    IDENTIFY RETURN CODE\n         MVC   SLSSWRN3,WMSG3          SET MESSAGE THREE\n         MVC   SLSSWRN4,WMSG4          SET MESSAGE FOUR\n         MVC   SLSSWRN5,EMSG5          SET MESSAGE FIVE\n         MVC   SLSSWRNX,EMSGX          SET MESSAGE X\n         MVC   PANEL,SLSS@WRN          IDENTIFY DISPLAY PANEL\n         BAL   R4,DISPLAY              DISPLAY ERROR PANEL\n         MVC   CONTROL1,DISPL          SET CONTROL FUNCTION ONE\n         MVC   CONTROL2,LOCK           SET CONTROL FUNCTION TWO\n         BAL   R4,CONTROL              CLOSE TABLE WITHOUT SAVING\n         B     SUBLD230                CONTINUE\nSUBLD240 EQU   *\n         MVC   TABLE,SPACES            CLEAR TABLE NAME\n         MVC   TABLE(4),SLSS           SET TABLE NAME\n         MVC   SLSSERR1,ISPMSG14       SET SLSSERR1\n         MVC   SLSSERR1+17(4),SLSS     SET SUB-LIBRARY NAME\n         BAL   R4,TBBOTTOM             SET ROW POINTER TO THE BOTTOM\n         BAL   R4,TBADD                ADD A ROW TO A TABLE\n         B     SUBLD230                CONTINUE\nSUBLD250 EQU   *\n         MVC   TABLE,SPACES            CLEAR TABLE NAME\n         MVC   TABLE(4),SLSS           SET TABLE NAME\n         MVC   SLSSERR1,ISPMSG15       SET SLSSERR1\n         MVC   SLSSERR1+29(4),SLSS     SET SUB-LIBRARY NAME\n         BAL   R4,TBCLOSE              CLOSE AND SAVE TABLE\n         LA    R7,TABLE                INDEX THROUGH TABLE\n         LA    R8,4                    MAX LENGTH OF SLSS NAME\nSUBLD260 EQU   *\n         CLC   0(1,R7),SPACES          INSERT 'ENQ' HERE?\n         BE    SUBLD270                YES, INSERT AND CONTINUE\n         LA    R7,1(R7)                INCREMENT R7\n         BCT   R8,SUBLD260             CONTINUE\nSUBLD270 EQU   *\n         MVC   0(4,R7),ENQ             SET TABLE NAME\n         MVC   SLSSERR1,ISPMSG23       SET SLSSERR1\n         MVC   SLSSERR1+17(4),SLSS     MOVE IN LIBRARY NAME\n         LA    R15,12                  BRANCH DISPLACEMENT FOR TBCREATE\n         BAL   R4,TBCREATE             CREATE NEW SLSS.ENQ TABLE\n         MVC   SLSSERR1,ISPMSG24       SET SLSSERR1\n         MVC   SLSSERR1+29(4),SLSS     SET SUB-LIBRARY NAME\n         BAL   R4,TBCLOSE              CLOSE AND SAVE TABLE\n         CLC   ALL,SLSSSAV             ARE WE BUILDING ALL SUB-LIBS?\n         BNE   SUBLD280                NO, THEN WE'RE DONE\n         LA    R2,8(R2)                POINT TO NEXT SUB-LIBRARY\n         BCT   R3,SUBLD220             CONTINUE\nSUBLD280 EQU   *\n         MVC   TABLE,MAIN              SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,SLSSCNTL          SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,MAINLOCS          SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,SUBUILD           SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,MAINMEMS          SET TABLE NAME\n         MVC   SLSSERR1,ISPMSG25       SET SLSSERR1\n         BAL   R4,TBCLOSE              CLOSE TABLE AND SAVE\n         MVC   SLSSPRC1,PMSG1          SET SLSSPRC1\n         MVC   SLSSPRC2,PMSG22         SET SLSSPRC2\n         MVC   SLSSPRC3,PMSG3          SET SLSSPRC3\n         MVC   SLSSPRC4,PMSG44         SET SLSSPRC4\n         MVC   SLSSPRC5,PMSG5          SET SLSSPRC5\n         MVC   SLSSPRCX,PMSGXX         SET SLSSPRCX\n         MVC   PANEL,SLSS@PRC          SET PANEL NAME\n         BAL   R4,DISPLAY              DISPLAY PROCESSING PANEL\n         SLR   R15,R15                 SET RETURN CODE TO ZERO\n         B     FINISH                  WE'RE DONE\n         TITLE 'SLSSSUBL - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LR    R1,R13                  ADDRESS OF WORKAREA\n         L     R13,4(R13)              ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1)   FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'SLSSSUBL - ROUTINE SECTION'\n***********************************************************************\n*  ROUTINE SECTION - RETRIEVE VARIABLES\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTI)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     VGET20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VGET)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VGET)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVGET20   EQU   *\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - CREATE NEW TABLE\n***********************************************************************\nTBCREATE EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n*                                      CREATE A NEW TABLE\n         B     TBCRE10(R15)            CREATE DESIRED TABLE\nTBCRE10  EQU   *\n         B     TBCRE20                 CREATE SUBUILD TABLE\n         B     TBCRE30                 CREATE MEMBER TABLE\n         B     TBCRE40                 CREATE SLSS TABLE\n         B     TBCRE50                 CREATE SLSS.ENQ TABLE\nTBCRE20  EQU   *\n         ISPCALL ('TBCREATE',TABLE,' ',NAMELSTE,'NOWRITE','REPLACE','SL+\n               SSTLIB')\n         B     TBCRE60(R15)            CHECK RETURN CODE\nTBCRE30  EQU   *\n         ISPCALL ('TBCREATE',TABLE,NAMELSTF,NAMELSTG,'WRITE','REPLACE',+\n               'SLSSTLIB')\n         B     TBCRE60(R15)            CHECK RETURN CODE\nTBCRE40  EQU   *\n         ISPCALL ('TBCREATE',TABLE,NAMELSTC,NAMELSTD,'WRITE','REPLACE',+\n               'SLSSTLIB')\n         B     TBCRE60(R15)            CHECK RETURN CODE\nTBCRE50  EQU   *\n         ISPCALL ('TBCREATE',TABLE,' ',NAMELSTH,'WRITE','REPLACE','SLSS+\n               TLIB')\n         B     TBCRE60(R15)            CHECK RETURN CODE\nTBCRE60  EQU   *\n         B     TBCRE70                 RC = 00 (CONTINUE)\n         B     TBCRE70                 RC = 04 (CONTINUE)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     TBCRE80                 RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBCRE70  EQU   *\n         BR    R4                      RETURN\nTBCRE80  EQU   *\n         MVC   SLSSERR1,ISPMSG19       SET SLSSERR1\n         MVC   SLSSERR1+12(8),TABLE    SET TABLE NAME\n         B     ISPERR12                (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ROUTINE SECTION - CLOSE TABLE WITHOUT SAVING\n***********************************************************************\nTBEND    EQU   *\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBEND',TABLE)\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - OPEN TABLE\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN',TABLE,ACCESS,'SLSSTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBOPN20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     TBOPN30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBOPN20  EQU   *\n         BR    R4                      RETURN\nTBOPN30  EQU   *\n         MVC   SLSSERR1,ISPMSG19       SET SLSSERR1\n         MVC   SLSSERR1+12(8),TABLE    SET TABLE NAME\n         B     ISPERR12                (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ROUTINE SECTION - SET ROW POINTER TO TOP OF TABLE\n***********************************************************************\nTBTOP    EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP OF TABLE\n         ISPCALL ('TBTOP',TABLE)\n         B     TBTOP10(R15)            CHECK RETURN CODE\nTBTOP10  EQU   *\n         B     TBTOP20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     TBTOP30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBTOP20  EQU   *\n         BR    R4                      RETURN\nTBTOP30  EQU   *\n         LR    R5,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R5                   RESTORE RETURN ADDRESS\n         B     TBTOP                   SET ROW POINTER TO TOP OF TABLE\n***********************************************************************\n*  ROUTINE SECTION - CLEAR TABLE VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR',TABLE)\n         B     TBVCL10(R15)            CHECK RETURN CODE\nTBVCL10  EQU   *\n         B     TBVCL20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     TBVCL30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBVCL20  EQU   *\n         BR    R4                      RETURN\nTBVCL30  EQU   *\n         LR    R5,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R5                   RESTORE RETURN ADDRESS\n         B     TBVCLEAR                CLEAR TABLE VARIABLES\n***********************************************************************\n*  ROUTINE SECTION - MOVE ROW POINTER TO NEXT ROW\n***********************************************************************\nTBSKIP   EQU   *\n         SLR   R5,R5                   CLEAR REG 5\n         MVC   ISPFSERV,SKPID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBSKIP',TABLE)\n         B     TBSKP10(R15)            CHECK RETURN CODE\nTBSKP10  EQU   *\n         B     TBSKP20                 RC = 00 (CONTINUE)\n         B     ISPWRN04                RC = 04 (NOT VALID FOR TBSKIP)\n         B     TBSKP20                 RC = 08 (CONTINUE)\n         B     ISPWRN12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPWRN16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPWRN20                RC = 20 (DISPLAY PANEL / MSG)\nTBSKP20  EQU   *\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - SET THE ROW POINTER TO BOTTOM\n***********************************************************************\nTBBOTTOM EQU   *\n         MVC   ISPFSERV,BOTID          SET ISPF DIALOG SERVICE\n*                                      SET THE ROW POINTER TO BOTTOM\n         ISPCALL ('TBBOTTOM',TABLE,' ',' ','NOREAD')\n         B     TBBOT10(R15)            CHECK RETURN CODE\nTBBOT10  EQU   *\n         B     TBBOT20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBBOTTOM)\n         B     TBBOT20                 RC = 08 (CONTINUE)\n         B     TBBOT30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBBOT20  EQU   *\n         BR    R4                      RETURN\nTBBOT30  EQU   *\n         LR    R5,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R5                   RESTORE RETURN ADDRESS\n         B     TBBOTTOM                SET THE ROW POINTER TO BOTTOM\n***********************************************************************\n*  ROUTINE SECTION - ADD A ROW TO A TABLE\n***********************************************************************\nTBADD    EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD',TABLE)\n         B     TBADD10(R15)            CHECK RETURN CODE\nTBADD10  EQU   *\n         B     TBADD20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     TBADD20                 RC = 08 (CONTINUE)\n         B     TBADD30                 RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBADD20  EQU   *\n         BR    R4                      RETURN\nTBADD30  EQU   *\n         LR    R5,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R5                   RESTORE RETURN ADDRESS\n         B     TBADD                   ADD A ROW TO A TABLE\n***********************************************************************\n*  ROUTINE SECTION - DEFINE SEARCH ARGUMENT\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n*                                      DEFINE SEARCH ARGUMENT\n         ISPCALL ('TBSARG',TABLE)\n         B     TBSARG10(R15)           CHECK RETURN CODE\nTBSARG10 EQU   *\n         B     TBSARG20                RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     TBSARG30                RC = 12 (CONTINUE)\n         B     ISPERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSARG20 EQU   *\n         BR    R4                      RETURN\nTBSARG30 EQU   *\n         LR    R5,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R5                   RESTORE RETURN ADDRESS\n         B     TBSARG                  DEFINE SEARCH ARGUMENT\n***********************************************************************\n*  ROUTINE SECTION - SEARCH TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         SLR   R5,R5                   CLEAR REG 5\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH TABLE\n         ISPCALL ('TBSCAN',TABLE)\n         B     TBSCAN10(R15)           CHECK RETURN CODE\nTBSCAN10 EQU   *\n         B     TBSCAN20                RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     TBSCAN20                RC = 08 (CONTINUE)\n         B     TBSCAN30                RC = 12 (CONTINUE)\n         B     TBSCAN20                RC = 16 (CONTINUE)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSCAN20 EQU   *\n         BR    R4                      RETURN\nTBSCAN30 EQU   *\n         LR    R5,R4                   SAVE RETURN ADDRESS\n         BAL   R4,TBOPEN               TRY TO OPEN TABLE\n         LR    R4,R5                   RESTORE RETURN ADDRESS\n         B     TBSCAN                  SEARCH TABLE\n***********************************************************************\n*  ROUTINE SECTION - MODIFY A ROW IN A TABLE\n***********************************************************************\nTBMOD    EQU   *\n         MVC   ISPFSERV,MODID          SET ISPF DIALOG SERVICE\n*                                      MODIFY A ROW IN A TABLE\n         ISPCALL ('TBMOD',TABLE)\n         B     TBMOD10(R15)            CHECK RETURN CODE\nTBMOD10  EQU   *\n         B     TBMOD20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBMOD)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBMOD20  EQU   *\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY PANEL\n***********************************************************************\nDISPLAY  EQU   *\n         SLR   R5,R5                   CLEAR REG 5\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY',PANEL)\n         B     DISPL10(R15)            CHECK RETURN CODE\nDISPL10  EQU   *\n         B     DISPL20                 RC = 00 (CONTINUE)\n         B     DISPL20                 RC = 04 (CONTINUE)\n         B     DISPL20                 RC = 08 (CONTINUE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL20  EQU   *\n         LR    R5,R15                  SAVE RETURN CODE\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY ERROR PANEL\n***********************************************************************\nDISPLERR EQU   *\n         ISPCALL ('DISPLAY',PANEL)\n         LA    R15,20                  SET RETURN CODE\n         B     FINISH                  RETURN\n***********************************************************************\n*  ROUTINE SECTION - SET PROCESSING MODE\n***********************************************************************\nCONTROL  EQU   *\n         MVC   ISPFSERV,CONID          SET ISPF DIALOG SERVICE\n*                                      SET PROCESSING MODE\n         ISPCALL ('CONTROL',CONTROL1,CONTROL2)\n         B     CONTL10(R15)            CHECK RETURN CODE\nCONTL10  EQU   *\n         B     CONTL20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR CONTROL)\n         B     ISPERR08                RC = 08 (NOT VALID FOR CONTROL)\n         B     ISPERR12                RC = 12 (NOT VALID FOR CONTROL)\n         B     ISPERR16                RC = 16 (NOT VALID FOR CONTROL)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nCONTL20  EQU   *\n         BR    R4                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - CLOSE TABLE AND SAVE\n***********************************************************************\nTBCLOSE  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBCLOSE',TABLE,'REPLCOPY',' ',' ','SLSSTLIB')\n         B     TBCLO10(R15)            CHECK RETURN CODE\nTBCLO10  EQU   *\n         B     TBCLO20                 RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ISPERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ISPERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBCLO20  EQU   *\n         BR    R4                      RETURN\n         TITLE 'SLSSSUBL - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nISPERR04 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),FOUR     IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR08 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),EIGHT    IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR12 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),TWELVE   IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR16 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),SIXTEEN  IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR20 EQU   *\n         MVC   SLSSERR2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),TWENTY   IDENTIFY RETURN CODE\nISPERR30 EQU   *\n         MVC   CONTROL1,ERRORS         SET CONTROL FUNCTION ONE\n         MVC   CONTROL2,RETURN         SET CONTROL FUNCTION TWO\n         BAL   R4,CONTROL              CLOSE TABLE WITHOUT SAVING\n         MVC   SLSSERR3,EMSG3          SET MESSAGE THREE\n         MVC   SLSSERR4,EMSG4          SET MESSAGE FOUR\n         MVC   SLSSERR5,EMSG5          SET MESSAGE FIVE\n         MVC   SLSSERRX,EMSGX          SET MESSAGE X\n         MVC   PANEL,SLSS@ERR          IDENTIFY DISPLAY PANEL\n         MVC   TABLE,SLSSCNTL          SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,MAIN              SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,MAINLOCS          SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,SUBUILD           SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         MVC   TABLE,MAINMEMS          SET TABLE NAME\n         BAL   R4,TBEND                CLOSE TABLE WITHOUT SAVING\n         B     DISPLERR                DISPLAY ERROR PANEL\n         TITLE 'SLSSSUBL - WARNING PROCESSING SECTION'\n***********************************************************************\n*  WARNING PROCESSING SECTION\n***********************************************************************\nISPWRN04 EQU   *\n         MVC   SLSSWRN2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSWRN2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSWRN2+39(2),FOUR     IDENTIFY RETURN CODE\n         B     ISPWRN30                DISPLAY WARNING PANEL\nISPWRN08 EQU   *\n         MVC   SLSSWRN2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSWRN2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSWRN2+39(2),EIGHT    IDENTIFY RETURN CODE\n         B     ISPWRN30                DISPLAY WARNING PANEL\nISPWRN12 EQU   *\n         MVC   SLSSWRN2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSWRN2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSWRN2+39(2),TWELVE   IDENTIFY RETURN CODE\n         B     ISPWRN30                DISPLAY WARNING PANEL\nISPWRN16 EQU   *\n         MVC   SLSSWRN2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSWRN2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSWRN2+39(2),SIXTEEN  IDENTIFY RETURN CODE\n         B     ISPWRN30                DISPLAY WARNING PANEL\nISPWRN20 EQU   *\n         MVC   SLSSWRN2,ISPFMSG2       SET MESSAGE TWO\n         MVC   SLSSWRN2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSWRN2+39(2),TWENTY   IDENTIFY RETURN CODE\nISPWRN30 EQU   *\n         MVC   SLSSWRN3,WMSG3          SET MESSAGE THREE\n         MVC   SLSSWRN4,WMSG4          SET MESSAGE FOUR\n         MVC   SLSSWRN5,EMSG5          SET MESSAGE FIVE\n         MVC   SLSSWRNX,EMSGX          SET MESSAGE X\n         MVC   PANEL,SLSS@WRN          IDENTIFY DISPLAY PANEL\n         LR    R5,R4                   SAVE RETURN ADDRESS\n         BAL   R4,DISPLAY              DISPLAY WARNING PANEL\n         BR    R5                      RETURN\n         TITLE 'SLSSSUBL - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'SLSSSUBL - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL08   DC    F'08'                   FULLWORD CONSTANT, VALUE '08'\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nSPACES   DC    CL80' '                 USED FOR INITIALIZATION\nERRORS   DC    CL8'ERRORS'             FOR CONTROL FUNCTION\nRETURN   DC    CL8'RETURN'             FOR CONTROL FUNCTION\nDISPL    DC    CL8'DISPLAY'            FOR CONTROL FUNCTION\nLOCK     DC    CL8'LOCK'               FOR CONTROL FUNCTION\nALL      DC    CL3'ALL'                BUILD ALL SUB LIBRARIES\nNOWRITE  DC    CL8'NOWRITE'            TABLE OPEN ACCESS\nWRITE    DC    CL8'WRITE'              TABLE OPEN ACCESS\nSUBUILD  DC    CL8'SUBUILD'            TABLE NAME\nMAINLOCS DC    CL8'MAINLOCS'           TABLE NAME\nMAIN     DC    CL8'MAIN'               TABLE NAME\nENQ      DC    CL4'ENQ'                FOR CREATING ENQ TABLE\nMAINMEMS DC    CL8'MAINMEMS'           TABLE NAME\nSLSSCNTL DC    CL8'SLSSCNTL'           TABLE NAME\nSLSS@ERR DC    CL8'SLSS@ERR'           ERROR DISPLAY PANEL NAME\nSLSS@PRC DC    CL8'SLSS@PRC'           PROCESSING DISPLAY PANEL NAME\nSLSS@WRN DC    CL8'SLSS@WRN'           WARNING DISPLAY PANEL NAME\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nBOTID    DC    CL8'TBBOTTOM'           ISPF DIALOG SERVICE (TBBOTTOM)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nCONID    DC    CL8'CONTROL'            ISPF DIALOG SERVICE (CONTROL)\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nSKPID    DC    CL8'TBSKIP'             ISPF DIALOG SERVICE (TBSKIP)\nENDID    DC    CL8'TBEND'              ISPF DIALOG SERVICE (TBEND)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nMODID    DC    CL8'TBMOD'              ISPF DIALOG SERVICE (TBMOD)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nISPMSG01 DC    CL62'UNABLE TO CREATE ''SUBUILD'' TABLE.'\nISPMSG02 DC    CL62'UNABLE TO OPEN LIBRARY LOCATION FILE, MAINLOCS.'\nISPMSG03 DC    CL62'UNABLE TO PROCESS LIBRARY LOCATION FILE, MAINLOCS.'\nISPMSG04 DC    CL62'UNABLE TO OBTAIN LOCATION INFORMATION FOR A MANUAL.+\n               '\nISPMSG05 DC    CL62'UNABLE TO BUILD ''SUBUILD'' TABLE.'\nISPMSG06 DC    CL62'UNABLE TO PROCESS ''SUBUILD'' TABLE.'\nISPMSG07 DC    CL62'UNABLE TO OPEN CONTROL FILE, SLSSCNTL.'\nISPMSG08 DC    CL62'UNABLE TO PROCESS CONTROL FILE, SLSSCNTL.'\nISPMSG09 DC    CL62'REQUESTED LIBRARY, 1234, DOES NOT EXIST.'\nISPMSG10 DC    CL62'UNABLE TO CREATE 1234 LIBRARY.'\nISPMSG11 DC    CL62'UNABLE TO SET CONTROL FOR BUILD PROCESSING.'\nISPMSG12 DC    CL62'UNABLE TO OPEN PRIMARY LIBRARY FILE, MAIN.'\nISPMSG13 DC    CL62'MANUAL ID, 1234-1234, NOT FOUND IN LIBRARY ''MAIN''+\n               .'\nISPMSG14 DC    CL62'UNABLE TO BUILD ''1234'' SUB-LIBRARY.'\nISPMSG15 DC    CL62'UNABLE TO CLOSE SUB-LIBRARY, 1234.'\nISPMSG16 DC    CL62'UNABLE TO DEFINE DIALOG VARIABLES.'\nISPMSG17 DC    CL62'UNABLE TO CREATE ''MAINMEMS'' TABLE.'\nISPMSG18 DC    CL62'UNABLE TO OBTAIN MEMBER INFORMATION FOR A SUB-LIBRA+\n               RY.'\nISPMSG19 DC    CL62'ENQ FAILED; 12345678 IN USE BY ANOTHER USER.'\nISPMSG20 DC    CL62'UNABLE TO BUILD ''MAINMEMS'' TABLE.'\nISPMSG21 DC    CL62'UNABLE TO PROCESS ''MAINMEMS'' TABLE.'\nISPMSG22 DC    CL62'MEMBER, 12345678, DOES NOT EXIST FOR MANUAL ID, 123+\n               456789.'\nISPMSG23 DC    CL62'UNABLE TO CREATE 1234ENQ LIBRARY.'\nISPMSG24 DC    CL62'UNABLE TO CLOSE SUB-LIBRARY, 1234ENQ.'\nISPMSG25 DC    CL62'UNABLE TO CLOSE MEM-LIBRARY, MAINMEMS.'\nISPFMSG2 DC    CL62'RETURN CODE FOR ''ISPEXEC 12345678'' WAS 12.'\nEMSG3    DC    CL62'CONTACT SYSTEMS PROGRAMMING FOR FURTHER INFORMATION+\n               '\nWMSG3    DC    CL62'PROCESSING WILL CONTINUE FOR REMAINING MANUALS.'\nWMSG4    DC    CL62' '\nEMSG4    DC    CL62'REGARDING THIS ERROR.'\nEMSG5    DC    CL62' '\nEMSGX    DC    CL62'PRESS ENTER TO CONTINUE.'\nPMSG1    DC    CL62' '\nPMSG2    DC    CL62'                   BUILDING'\nPMSG22   DC    CL62'           LIBRARY BUILD PROCESSING'\nPMSG3    DC    CL62' '\nPMSG4    DC    CL62'                 LIBRARY 1234'\nPMSG44   DC    CL62'                C O M P L E T E '\nPMSG5    DC    CL62' '\nPMSGX    DC    CL62'RUN RUN RUN ... RUN RUN'\nPMSGXX   DC    CL62'PRESS ENTER TO CONTINUE.'\nNAMELST0 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'195'\n         DC    F'00'\n         DC    CL8'LOC1'\n         DC    CL8'LOC2'\n         DC    CL8'LOC3'\n         DC    CL8'LOC4'\n         DC    CL8'LOC5'\n         DC    CL8'LOC6'\n         DC    CL8'LOC7'\n         DC    CL8'LOC8'\n         DC    CL8'LOC9'\n         DC    CL8'LOC10'\n         DC    CL8'LOC11'\n         DC    CL8'LOC12'\n         DC    CL8'LOC13'\n         DC    CL8'LOC14'\n         DC    CL8'LOC15'\n         DC    CL8'LOC16'\n         DC    CL8'LOC17'\n         DC    CL8'LOC18'\n         DC    CL8'LOC19'\n         DC    CL8'LOC20'\n         DC    CL8'LOC21'\n         DC    CL8'LOC22'\n         DC    CL8'LOC23'\n         DC    CL8'LOC24'\n         DC    CL8'LOC25'\n         DC    CL8'LOC26'\n         DC    CL8'LOC27'\n         DC    CL8'LOC28'\n         DC    CL8'LOC29'\n         DC    CL8'LOC30'\n         DC    CL8'LOC31'\n         DC    CL8'LOC32'\n         DC    CL8'LOC33'\n         DC    CL8'LOC34'\n         DC    CL8'LOC35'\n         DC    CL8'LOC36'\n         DC    CL8'LOC37'\n         DC    CL8'LOC38'\n         DC    CL8'LOC39'\n         DC    CL8'LOC40'\n         DC    CL8'LOC41'\n         DC    CL8'LOC42'\n         DC    CL8'LOC43'\n         DC    CL8'LOC44'\n         DC    CL8'LOC45'\n         DC    CL8'LOC46'\n         DC    CL8'LOC47'\n         DC    CL8'LOC48'\n         DC    CL8'LOC49'\n         DC    CL8'LOC50'\n         DC    CL8'LOC51'\n         DC    CL8'LOC52'\n         DC    CL8'LOC53'\n         DC    CL8'LOC54'\n         DC    CL8'LOC55'\n         DC    CL8'LOC56'\n         DC    CL8'LOC57'\n         DC    CL8'LOC58'\n         DC    CL8'LOC59'\n         DC    CL8'LOC60'\n         DC    CL8'SLB1'\n         DC    CL8'SLB2'\n         DC    CL8'SLB3'\n         DC    CL8'SLB4'\n         DC    CL8'SLB5'\n         DC    CL8'SLB6'\n         DC    CL8'SLB7'\n         DC    CL8'SLB8'\n         DC    CL8'SLB9'\n         DC    CL8'SLB10'\n         DC    CL8'SLB11'\n         DC    CL8'SLB12'\n         DC    CL8'SLB13'\n         DC    CL8'SLB14'\n         DC    CL8'SLB15'\n         DC    CL8'SLB16'\n         DC    CL8'SLB17'\n         DC    CL8'SLB18'\n         DC    CL8'SLB19'\n         DC    CL8'SLB20'\n         DC    CL8'SLB21'\n         DC    CL8'SLB22'\n         DC    CL8'SLB23'\n         DC    CL8'SLB24'\n         DC    CL8'SLB25'\n         DC    CL8'SLB26'\n         DC    CL8'SLB27'\n         DC    CL8'SLB28'\n         DC    CL8'SLB29'\n         DC    CL8'SLB30'\n         DC    CL8'SLB31'\n         DC    CL8'SLB32'\n         DC    CL8'SLB33'\n         DC    CL8'SLB34'\n         DC    CL8'SLB35'\n         DC    CL8'SLB36'\n         DC    CL8'SLB37'\n         DC    CL8'SLB38'\n         DC    CL8'SLB39'\n         DC    CL8'SLB40'\n         DC    CL8'SLB41'\n         DC    CL8'SLB42'\n         DC    CL8'SLB43'\n         DC    CL8'SLB44'\n         DC    CL8'SLB45'\n         DC    CL8'SLB46'\n         DC    CL8'SLB47'\n         DC    CL8'SLB48'\n         DC    CL8'SLB49'\n         DC    CL8'SLB50'\n         DC    CL8'SLB51'\n         DC    CL8'SLB52'\n         DC    CL8'SLB53'\n         DC    CL8'SLB54'\n         DC    CL8'SLB55'\n         DC    CL8'SLB56'\n         DC    CL8'SLB57'\n         DC    CL8'SLB58'\n         DC    CL8'SLB59'\n         DC    CL8'SLB60'\n         DC    CL8'SLB61'\n         DC    CL8'SLB62'\n         DC    CL8'SLB63'\n         DC    CL8'SLB64'\n         DC    CL8'SLB65'\n         DC    CL8'SLB66'\n         DC    CL8'SLB67'\n         DC    CL8'SLB68'\n         DC    CL8'SLB69'\n         DC    CL8'SLB70'\n         DC    CL8'SLB71'\n         DC    CL8'SLB72'\n         DC    CL8'SLB73'\n         DC    CL8'SLB74'\n         DC    CL8'SLB75'\n         DC    CL8'SLB76'\n         DC    CL8'SLB77'\n         DC    CL8'SLB78'\n         DC    CL8'SLB79'\n         DC    CL8'SLB80'\n         DC    CL8'SLB81'\n         DC    CL8'SLB82'\n         DC    CL8'SLB83'\n         DC    CL8'SLB84'\n         DC    CL8'SLB85'\n         DC    CL8'SLB86'\n         DC    CL8'SLB87'\n         DC    CL8'SLB88'\n         DC    CL8'SLB89'\n         DC    CL8'SLB90'\n         DC    CL8'SLB91'\n         DC    CL8'SLB92'\n         DC    CL8'SLB93'\n         DC    CL8'SLB94'\n         DC    CL8'SLB95'\n         DC    CL8'SLB96'\n         DC    CL8'SLB97'\n         DC    CL8'SLB98'\n         DC    CL8'SLB99'\n         DC    CL8'SLB100'\n         DC    CL8'SLB101'\n         DC    CL8'SLB102'\n         DC    CL8'SLB103'\n         DC    CL8'SLB104'\n         DC    CL8'SLB105'\n         DC    CL8'SLB106'\n         DC    CL8'SLB107'\n         DC    CL8'SLB108'\n         DC    CL8'SLB109'\n         DC    CL8'SLB110'\n         DC    CL8'SLB111'\n         DC    CL8'SLB112'\n         DC    CL8'SLB113'\n         DC    CL8'SLB114'\n         DC    CL8'SLB115'\n         DC    CL8'SLB116'\n         DC    CL8'SLB117'\n         DC    CL8'SLB118'\n         DC    CL8'SLB119'\n         DC    CL8'SLB120'\n         DC    CL8'BOOK'\n         DC    CL8'DATEORD'\n         DC    CL8'DATERECV'\n         DC    CL8'LSTUWHO'\n         DC    CL8'LSTUDAT'\n         DC    CL8'CRETWHO'\n         DC    CL8'CRETDAT'\n         DC    CL8'MEMBER'\n         DC    CL8'ENQU'\n         DC    CL8'CIBCDATE'\n         DC    CL8'CIBMDATE'\n         DC    CL8'CIBSDATE'\n         DC    CL8'CIBNUMBR'\n         DC    CL8'CIBOWNER'\n         DC    CL8'SLSSRTKY'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'ORDSTS'\n         DC    CL8'CIBSTABL'\n         DC    CL8'CIBSRTKY'\n         DC    CL8'CIBEXTRA'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 62)\n         DC    F'18'\n         DC    F'00'\n         DC    CL8'SLSSERR1'\n         DC    CL8'SLSSERR2'\n         DC    CL8'SLSSERR3'\n         DC    CL8'SLSSERR4'\n         DC    CL8'SLSSERR5'\n         DC    CL8'SLSSERRX'\n         DC    CL8'SLSSPRC1'\n         DC    CL8'SLSSPRC2'\n         DC    CL8'SLSSPRC3'\n         DC    CL8'SLSSPRC4'\n         DC    CL8'SLSSPRC5'\n         DC    CL8'SLSSPRCX'\n         DC    CL8'SLSSWRN1'\n         DC    CL8'SLSSWRN2'\n         DC    CL8'SLSSWRN3'\n         DC    CL8'SLSSWRN4'\n         DC    CL8'SLSSWRN5'\n         DC    CL8'SLSSWRNX'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 60)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'NAME1'\n         DC    CL8'NAME2'\n         DC    CL8'NAME3'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'SUBLIB'\n         DC    CL8'SLSS'\n         DC    CL8'CIBN'\n         DC    CL8'SLSSSAV'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 13)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'LOCID'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 9)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'SLSID'\n         DC    CL8'SUBID'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 2)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'SLSSVER'\n         DC    CL8'SLSSNUM'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 5)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'LSTUTIM'\n         DC    CL8'CRETTIM'\n         DC    CL8'CIBTIME'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 6)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'CIBJDATE'\nNAMELSTA DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'CIBNAME'\n         DC    CL8'CIBLOC1'\n         DC    CL8'CIBLOC2'\n         DC    CL8'CIBLOC3'\n         DC    CL8'CIBLOC4'\n         DC    CL8'CIBLOC5'\nNAMELSTC DS    0F                      KEYS - SLSS TABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SLSID'\nNAMELSTD DS    0F                      NAMES - SLSSTABLE\n         DC    F'33'\n         DC    F'00'\n         DC    CL8'SLSSRTKY'\n         DC    CL8'SLSSVER'\n         DC    CL8'SLSSNUM'\n         DC    CL8'NAME1'\n         DC    CL8'NAME2'\n         DC    CL8'NAME3'\n         DC    CL8'ORDSTS'\n         DC    CL8'BOOK'\n         DC    CL8'UPD'\n         DC    CL8'DATEORD'\n         DC    CL8'DATERECV'\n         DC    CL8'LSTUWHO'\n         DC    CL8'LSTUDAT'\n         DC    CL8'LSTUTIM'\n         DC    CL8'CRETWHO'\n         DC    CL8'CRETDAT'\n         DC    CL8'CRETTIM'\n         DC    CL8'UPD0'\n         DC    CL8'UPD1'\n         DC    CL8'UPD2'\n         DC    CL8'UPD3'\n         DC    CL8'UPD4'\n         DC    CL8'UPD5'\n         DC    CL8'UPD6'\n         DC    CL8'UPD7'\n         DC    CL8'UPD8'\n         DC    CL8'UPD9'\n         DC    CL8'UPDA'\n         DC    CL8'UPDB'\n         DC    CL8'UPDC'\n         DC    CL8'UPDD'\n         DC    CL8'UPDE'\n         DC    CL8'UPDF'\nNAMELSTE DS    0F                      NAMES - SUBUILD TABLE\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'SUBLIB'\n         DC    CL8'SUBID'\nNAMELSTF DS    0F                      KEYS - MEMBER TABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'MEMBER'\nNAMELSTG DS    0F                      NAMES - MEMBER TABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SUBLIB'\nNAMELSTH DS    0F                      NAMES - SLSS.ENQ TABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ENQU'\nNAMELSTI DS    0F                      NAME OF VGET VARIABLE\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SLSSSAV'\n         TITLE 'SLSSSUBL - LITERAL POOL'\n         LTORG\n         TITLE 'SLSSSUBL - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nISPFSERV DS    CL8                     ISPF DIALOG SERVICE\nACCESS   DS    CL8                     GENERIC TABLE OPEN ACCESS\nPANEL    DS    CL8                     GENERIC PANEL NAME\nTABLE    DS    CL8                     GENERIC TABLE NAME\nCONTROL1 DS    CL8                     GENERIC CONTROL FUNCTION ONE\nCONTROL2 DS    CL8                     GENERIC CONTROL FUNCTION TWO\nLOC1     DS    CL8                     MANUAL LOCATION\nLOC2     DS    CL8                     MANUAL LOCATION\nLOC3     DS    CL8                     MANUAL LOCATION\nLOC4     DS    CL8                     MANUAL LOCATION\nLOC5     DS    CL8                     MANUAL LOCATION\nLOC6     DS    CL8                     MANUAL LOCATION\nLOC7     DS    CL8                     MANUAL LOCATION\nLOC8     DS    CL8                     MANUAL LOCATION\nLOC9     DS    CL8                     MANUAL LOCATION\nLOC10    DS    CL8                     MANUAL LOCATION\nLOC11    DS    CL8                     MANUAL LOCATION\nLOC12    DS    CL8                     MANUAL LOCATION\nLOC13    DS    CL8                     MANUAL LOCATION\nLOC14    DS    CL8                     MANUAL LOCATION\nLOC15    DS    CL8                     MANUAL LOCATION\nLOC16    DS    CL8                     MANUAL LOCATION\nLOC17    DS    CL8                     MANUAL LOCATION\nLOC18    DS    CL8                     MANUAL LOCATION\nLOC19    DS    CL8                     MANUAL LOCATION\nLOC20    DS    CL8                     MANUAL LOCATION\nLOC21    DS    CL8                     MANUAL LOCATION\nLOC22    DS    CL8                     MANUAL LOCATION\nLOC23    DS    CL8                     MANUAL LOCATION\nLOC24    DS    CL8                     MANUAL LOCATION\nLOC25    DS    CL8                     MANUAL LOCATION\nLOC26    DS    CL8                     MANUAL LOCATION\nLOC27    DS    CL8                     MANUAL LOCATION\nLOC28    DS    CL8                     MANUAL LOCATION\nLOC29    DS    CL8                     MANUAL LOCATION\nLOC30    DS    CL8                     MANUAL LOCATION\nLOC31    DS    CL8                     MANUAL LOCATION\nLOC32    DS    CL8                     MANUAL LOCATION\nLOC33    DS    CL8                     MANUAL LOCATION\nLOC34    DS    CL8                     MANUAL LOCATION\nLOC35    DS    CL8                     MANUAL LOCATION\nLOC36    DS    CL8                     MANUAL LOCATION\nLOC37    DS    CL8                     MANUAL LOCATION\nLOC38    DS    CL8                     MANUAL LOCATION\nLOC39    DS    CL8                     MANUAL LOCATION\nLOC40    DS    CL8                     MANUAL LOCATION\nLOC41    DS    CL8                     MANUAL LOCATION\nLOC42    DS    CL8                     MANUAL LOCATION\nLOC43    DS    CL8                     MANUAL LOCATION\nLOC44    DS    CL8                     MANUAL LOCATION\nLOC45    DS    CL8                     MANUAL LOCATION\nLOC46    DS    CL8                     MANUAL LOCATION\nLOC47    DS    CL8                     MANUAL LOCATION\nLOC48    DS    CL8                     MANUAL LOCATION\nLOC49    DS    CL8                     MANUAL LOCATION\nLOC50    DS    CL8                     MANUAL LOCATION\nLOC51    DS    CL8                     MANUAL LOCATION\nLOC52    DS    CL8                     MANUAL LOCATION\nLOC53    DS    CL8                     MANUAL LOCATION\nLOC54    DS    CL8                     MANUAL LOCATION\nLOC55    DS    CL8                     MANUAL LOCATION\nLOC56    DS    CL8                     MANUAL LOCATION\nLOC57    DS    CL8                     MANUAL LOCATION\nLOC58    DS    CL8                     MANUAL LOCATION\nLOC59    DS    CL8                     MANUAL LOCATION\nLOC60    DS    CL8                     MANUAL LOCATION\nSLB1     DS    CL8                     SUB-LIBRARY\nSLB2     DS    CL8                     SUB-LIBRARY\nSLB3     DS    CL8                     SUB-LIBRARY\nSLB4     DS    CL8                     SUB-LIBRARY\nSLB5     DS    CL8                     SUB-LIBRARY\nSLB6     DS    CL8                     SUB-LIBRARY\nSLB7     DS    CL8                     SUB-LIBRARY\nSLB8     DS    CL8                     SUB-LIBRARY\nSLB9     DS    CL8                     SUB-LIBRARY\nSLB10    DS    CL8                     SUB-LIBRARY\nSLB11    DS    CL8                     SUB-LIBRARY\nSLB12    DS    CL8                     SUB-LIBRARY\nSLB13    DS    CL8                     SUB-LIBRARY\nSLB14    DS    CL8                     SUB-LIBRARY\nSLB15    DS    CL8                     SUB-LIBRARY\nSLB16    DS    CL8                     SUB-LIBRARY\nSLB17    DS    CL8                     SUB-LIBRARY\nSLB18    DS    CL8                     SUB-LIBRARY\nSLB19    DS    CL8                     SUB-LIBRARY\nSLB20    DS    CL8                     SUB-LIBRARY\nSLB21    DS    CL8                     SUB-LIBRARY\nSLB22    DS    CL8                     SUB-LIBRARY\nSLB23    DS    CL8                     SUB-LIBRARY\nSLB24    DS    CL8                     SUB-LIBRARY\nSLB25    DS    CL8                     SUB-LIBRARY\nSLB26    DS    CL8                     SUB-LIBRARY\nSLB27    DS    CL8                     SUB-LIBRARY\nSLB28    DS    CL8                     SUB-LIBRARY\nSLB29    DS    CL8                     SUB-LIBRARY\nSLB30    DS    CL8                     SUB-LIBRARY\nSLB31    DS    CL8                     SUB-LIBRARY\nSLB32    DS    CL8                     SUB-LIBRARY\nSLB33    DS    CL8                     SUB-LIBRARY\nSLB34    DS    CL8                     SUB-LIBRARY\nSLB35    DS    CL8                     SUB-LIBRARY\nSLB36    DS    CL8                     SUB-LIBRARY\nSLB37    DS    CL8                     SUB-LIBRARY\nSLB38    DS    CL8                     SUB-LIBRARY\nSLB39    DS    CL8                     SUB-LIBRARY\nSLB40    DS    CL8                     SUB-LIBRARY\nSLB41    DS    CL8                     SUB-LIBRARY\nSLB42    DS    CL8                     SUB-LIBRARY\nSLB43    DS    CL8                     SUB-LIBRARY\nSLB44    DS    CL8                     SUB-LIBRARY\nSLB45    DS    CL8                     SUB-LIBRARY\nSLB46    DS    CL8                     SUB-LIBRARY\nSLB47    DS    CL8                     SUB-LIBRARY\nSLB48    DS    CL8                     SUB-LIBRARY\nSLB49    DS    CL8                     SUB-LIBRARY\nSLB50    DS    CL8                     SUB-LIBRARY\nSLB51    DS    CL8                     SUB-LIBRARY\nSLB52    DS    CL8                     SUB-LIBRARY\nSLB53    DS    CL8                     SUB-LIBRARY\nSLB54    DS    CL8                     SUB-LIBRARY\nSLB55    DS    CL8                     SUB-LIBRARY\nSLB56    DS    CL8                     SUB-LIBRARY\nSLB57    DS    CL8                     SUB-LIBRARY\nSLB58    DS    CL8                     SUB-LIBRARY\nSLB59    DS    CL8                     SUB-LIBRARY\nSLB60    DS    CL8                     SUB-LIBRARY\nSLB61    DS    CL8                     SUB-LIBRARY\nSLB62    DS    CL8                     SUB-LIBRARY\nSLB63    DS    CL8                     SUB-LIBRARY\nSLB64    DS    CL8                     SUB-LIBRARY\nSLB65    DS    CL8                     SUB-LIBRARY\nSLB66    DS    CL8                     SUB-LIBRARY\nSLB67    DS    CL8                     SUB-LIBRARY\nSLB68    DS    CL8                     SUB-LIBRARY\nSLB69    DS    CL8                     SUB-LIBRARY\nSLB70    DS    CL8                     SUB-LIBRARY\nSLB71    DS    CL8                     SUB-LIBRARY\nSLB72    DS    CL8                     SUB-LIBRARY\nSLB73    DS    CL8                     SUB-LIBRARY\nSLB74    DS    CL8                     SUB-LIBRARY\nSLB75    DS    CL8                     SUB-LIBRARY\nSLB76    DS    CL8                     SUB-LIBRARY\nSLB77    DS    CL8                     SUB-LIBRARY\nSLB78    DS    CL8                     SUB-LIBRARY\nSLB79    DS    CL8                     SUB-LIBRARY\nSLB80    DS    CL8                     SUB-LIBRARY\nSLB81    DS    CL8                     SUB-LIBRARY\nSLB82    DS    CL8                     SUB-LIBRARY\nSLB83    DS    CL8                     SUB-LIBRARY\nSLB84    DS    CL8                     SUB-LIBRARY\nSLB85    DS    CL8                     SUB-LIBRARY\nSLB86    DS    CL8                     SUB-LIBRARY\nSLB87    DS    CL8                     SUB-LIBRARY\nSLB88    DS    CL8                     SUB-LIBRARY\nSLB89    DS    CL8                     SUB-LIBRARY\nSLB90    DS    CL8                     SUB-LIBRARY\nSLB91    DS    CL8                     SUB-LIBRARY\nSLB92    DS    CL8                     SUB-LIBRARY\nSLB93    DS    CL8                     SUB-LIBRARY\nSLB94    DS    CL8                     SUB-LIBRARY\nSLB95    DS    CL8                     SUB-LIBRARY\nSLB96    DS    CL8                     SUB-LIBRARY\nSLB97    DS    CL8                     SUB-LIBRARY\nSLB98    DS    CL8                     SUB-LIBRARY\nSLB99    DS    CL8                     SUB-LIBRARY\nSLB100   DS    CL8                     SUB-LIBRARY\nSLB101   DS    CL8                     SUB-LIBRARY\nSLB102   DS    CL8                     SUB-LIBRARY\nSLB103   DS    CL8                     SUB-LIBRARY\nSLB104   DS    CL8                     SUB-LIBRARY\nSLB105   DS    CL8                     SUB-LIBRARY\nSLB106   DS    CL8                     SUB-LIBRARY\nSLB107   DS    CL8                     SUB-LIBRARY\nSLB108   DS    CL8                     SUB-LIBRARY\nSLB109   DS    CL8                     SUB-LIBRARY\nSLB110   DS    CL8                     SUB-LIBRARY\nSLB111   DS    CL8                     SUB-LIBRARY\nSLB112   DS    CL8                     SUB-LIBRARY\nSLB113   DS    CL8                     SUB-LIBRARY\nSLB114   DS    CL8                     SUB-LIBRARY\nSLB115   DS    CL8                     SUB-LIBRARY\nSLB116   DS    CL8                     SUB-LIBRARY\nSLB117   DS    CL8                     SUB-LIBRARY\nSLB118   DS    CL8                     SUB-LIBRARY\nSLB119   DS    CL8                     SUB-LIBRARY\nSLB120   DS    CL8                     SUB-LIBRARY\nBOOK     DS    CL8                     BINDER NUMBER\nDATEORD  DS    CL8                     DATE MANUAL ORDERED\nDATERECV DS    CL8                     DATE MANUAL RECEIVED\nLSTUWHO  DS    CL8                     LAST PERSON TO UPDATE ENTRY\nLSTUDAT  DS    CL8                     DATE MANUAL ENTRY UPDATED\nCRETWHO  DS    CL8                     PERSON WHO CREATED ENTRY\nCRETDAT  DS    CL8                     DATE MANUAL ENTRY CREATED\nMEMBER   DS    CL8                     MEMBER NAME (MEMBER)\nENQU     DS    CL8                     ENQ USER\nCIBCDATE DS    CL8                     LIBRARY CREATION DATE\nCIBMDATE DS    CL8                     LIBRARY MODIFICATION DATE\nCIBSDATE DS    CL8                     LIBRARY SORT DATE\nCIBNUMBR DS    CL8                     LIBRARY NUMBER\nCIBOWNER DS    CL8                     LIBRARY OWNER ID\nSLSSRTKY DS    CL8                     SORT KEY (LAST 8 CHAR OF MAN ID)\nORDSTS   DS    CL1                     ON-ORDER STATUS\nCIBSTABL DS    CL1                     I DON'T KNOW\nCIBSRTKY DS    CL1                     LIBRARY SORT KEY\nCIBEXTRA DS    CL1                     I DON'T KNOW\nSLSSERR1 DS    CL62                    SLSS ERROR MESSAGE 1\nSLSSERR2 DS    CL62                    SLSS ERROR MESSAGE 2\nSLSSERR3 DS    CL62                    SLSS ERROR MESSAGE 3\nSLSSERR4 DS    CL62                    SLSS ERROR MESSAGE 4\nSLSSERR5 DS    CL62                    SLSS ERROR MESSAGE 5\nSLSSERRX DS    CL62                    SLSS ERROR MESSAGE X\nSLSSPRC1 DS    CL62                    SLSS PROCESSING MESSAGE 1\nSLSSPRC2 DS    CL62                    SLSS PROCESSING MESSAGE 2\nSLSSPRC3 DS    CL62                    SLSS PROCESSING MESSAGE 3\nSLSSPRC4 DS    CL62                    SLSS PROCESSING MESSAGE 4\nSLSSPRC5 DS    CL62                    SLSS PROCESSING MESSAGE 5\nSLSSPRCX DS    CL62                    SLSS PROCESSING MESSAGE X\nSLSSWRN1 DS    CL62                    SLSS WARNING MESSAGE 1\nSLSSWRN2 DS    CL62                    SLSS WARNING MESSAGE 2\nSLSSWRN3 DS    CL62                    SLSS WARNING MESSAGE 3\nSLSSWRN4 DS    CL62                    SLSS WARNING MESSAGE 4\nSLSSWRN5 DS    CL62                    SLSS WARNING MESSAGE 5\nSLSSWRNX DS    CL62                    SLSS WARNING MESSAGE X\nNAME1    DS    CL60                    LINE 1 OF MANUAL TITLE\nNAME2    DS    CL60                    LINE 2 OF MANUAL TITLE\nNAME3    DS    CL60                    LINE 3 OF MANUAL TITLE\nSUBLIB   DS    CL4                     LIBRARY NAME (SUBUILD)\nSLSS     DS    CL4                     LIBRARY TABLE NAME\nCIBN     DS    CL4                     LIBRARY NAME (TABLE KEY)\nSLSSSAV  DS    CL4                     LIBRARY TO BUILD OR 'ALL'\nLOCID    DS    CL13                    MANUAL/LOCATION ID\nSLSID    DS    CL9                     MANUAL ID FOR LIBRARY TABLE\nSUBID    DS    CL9                     MANUAL ID FOR TEMPORARY TABLE\nSLSSVER  DS    CL2                     MANUAL VERSION NUMBER\nSLSSNUM  DS    CL2                     NUMBER OF MANUALS\nLSTUTIM  DS    CL5                     TIME ENTRY LAST UPDATED\nCRETTIM  DS    CL5                     TIME ENTRY WAS CREATED\nCIBTIME  DS    CL5                     LIBRARY UPDATE TIME\nCIBJDATE DS    CL6                     LIBRARY UPDATE DATE (JULIAN)\nCIBNAME  DS    CL20                    LIBRARY OWNER NAME\nCIBLOC1  DS    CL20                    LIBRARY LOCATION 1\nCIBLOC2  DS    CL20                    LIBRARY LOCATION 2\nCIBLOC3  DS    CL20                    LIBRARY LOCATION 3\nCIBLOC4  DS    CL20                    LIBRARY LOCATION 4\nCIBLOC5  DS    CL20                    LIBRARY LOCATION 5\nSUBMASK  DS    CL13                    SUBID/SUBLIB MASK\nWORKLEN  EQU   *-WORKAREA\n         END   SLSSSUBL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SLSSVEFY": {"ttr": 16387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x9b\\x01\\x9b\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 411, "newlines": 411, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'SLSSVEFY - SLSS VERIFY TITLES OF NEW MANUALS'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = SLSSVEFY                                       *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              08/13/87  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         TITLE 'SLSSVEFY - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      AN1\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         TITLE 'SLSSVEFY - INITIALIZATION SECTION'\nSLSSVEFY CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,SLSSVEFY_&SYSDATE_&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING SLSSVEFY,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n* XX     LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n* XX     USING SLSSVEFY+4095,R11       ESTABLISH ADDRESSABILITY TO\n* XX                                   REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nVDEF     EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN','SPLIT','ENABLE'),       +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF0    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST0,NAME1,'CHAR',60)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF1                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF1    EQU   *\n         ISPCALL ('VDEFINE',NAMELST1,SLSSERR1,'CHAR',62)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VDEF20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVDEF20   EQU   *\n         MVC   SLSSERR1,SPACES         INITIALIZE SLSSERR1\n         MVC   SLSSERR2,SPACES         INITIALIZE SLSSERR2\n         MVC   SLSSERR3,SPACES         INITIALIZE SLSSERR3\n         MVC   SLSSERR4,SPACES         INITIALIZE SLSSERR4\n         MVC   SLSSERR5,SPACES         INITIALIZE SLSSERR5\n         MVC   SLSSERRX,SPACES         INITIALIZE SLSSERRX\n         MVC   SLSSERR1,ISPMSG02       SET SLSSERR1\n         BAL   R5,VGET                 RETRIEVE 'NAME1','NAME2','NAME3'\n         TITLE 'SLSSVEFY - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - VERIFY TITLE OF MANUAL\n***********************************************************************\nVERIFY00 EQU   *\n         LA    R2,NAME1                INDEX INTO MANUAL TITLES\n         LA    R3,WORKNAM1             INDEX INTO WORK MANUAL TITLES\n         LA    R4,180                  MAX LENGTH OF TITLE\nVERIFY10 EQU   *\n         CLC   AMPER,0(R2)             DID WE ENTER A '&' IN TITLE?\n         BE    VERIFY20                YES, CHANGE IT TO 'AND'\n         MVC   0(1,R3),0(R2)           NO, MOVE TITLE TO WORK\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R3,1(R3)                INCREMENT R3\n         BCT   R4,VERIFY10             CONTINUE\n         B     VERIFY30                COPY WORK TITLE TO TITLE\nVERIFY20 EQU   *\n         MVC   0(3,R3),AND             MOVE IN 'AND'\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R3,3(R3)                INCREMENT R3\n         S     R4,FULL02               DECREMENT DIFFERENCE 'AND' - '&'\n         BCT   R4,VERIFY10             CONTINUE\nVERIFY30 EQU   *\n         MVC   NAME1,WORKNAM1          REPLACE NAME1 OF TITLE\n         MVC   NAME2,WORKNAM2          REPLACE NAME2 OF TITLE\n         MVC   NAME3,WORKNAM3          REPLACE NAME3 OF TITLE\n         MVC   SLSSERR1,ISPMSG01       SET SLSSERR1\n         BAL   R5,VPUT                 UPDATE 'CHGFLG'\n         TITLE 'SLSSVEFY - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKLEN,A=(1)    FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'SLSSVEFY - ROUTINE SECTION'\n***********************************************************************\n*  ROUTINE SECTION - UPDATE VARIABLES\n***********************************************************************\nVPUT     EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE DIALOG VARIABLE\n         ISPCALL ('VPUT',NAMELST0)\n         B     VPUT10(R15)             CHECK RETURN CODE\nVPUT10   EQU   *\n         B     VPUT20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVPUT20   EQU   *\n         BR    R5                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - RETRIEVE VARIABLES\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELST0)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     VGET20                  RC = 00 (CONTINUE)\n         B     ISPERR04                RC = 04 (NOT VALID FOR VGET)\n         B     ISPERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ISPERR12                RC = 12 (NOT VALID FOR VGET)\n         B     ISPERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     ISPERR20                RC = 20 (DISPLAY PANEL / MSG)\nVGET20   EQU   *\n         BR    R5                      RETURN\n***********************************************************************\n*  ROUTINE SECTION - DISPLAY ERROR PANEL\n***********************************************************************\nDISPLERR EQU   *\n         ISPCALL ('DISPLAY',PANEL)\n         LA    R15,20                  SET RETURN CODE\n         B     FINISH                  RETURN\n         TITLE 'SLSSVEFY - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nISPERR04 EQU   *\n         MVC   SLSSERR2,EMSG2          SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),FOUR     IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR08 EQU   *\n         MVC   SLSSERR2,EMSG2          SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),EIGHT    IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR12 EQU   *\n         MVC   SLSSERR2,EMSG2          SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),TWELVE   IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR16 EQU   *\n         MVC   SLSSERR2,EMSG2          SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),SIXTEEN  IDENTIFY RETURN CODE\n         B     ISPERR30                DISPLAY ERROR PANEL\nISPERR20 EQU   *\n         MVC   SLSSERR2,EMSG2          SET MESSAGE TWO\n         MVC   SLSSERR2+25(8),ISPFSERV IDENTIFY ISPF SERVICE\n         MVC   SLSSERR2+39(2),TWENTY   IDENTIFY RETURN CODE\nISPERR30 EQU   *\n         MVC   SLSSERR3,EMSG3          SET MESSAGE THREE\n         MVC   SLSSERR4,EMSG4          SET MESSAGE FOUR\n         MVC   SLSSERR5,EMSG5          SET MESSAGE FIVE\n         MVC   SLSSERRX,EMSGX          SET MESSAGE X\n         MVC   PANEL,SLSS@ERR          IDENTIFY DISPLAY PANEL\n         B     DISPLERR                DISPLAY ERROR PANEL\n         TITLE 'SLSSVEFY - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'SLSSVEFY - LITERAL POOL'\n         LTORG\n         TITLE 'SLSSVEFY - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL02   DC    F'02'                   FULLWORD CONSTANT, VALUE '02'\nSPACES   DC    CL80' '                 SPACES\nAMPER    DC    CL1'&&'                 &\nAND      DC    CL3'AND'                AND\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nSLSS@ERR DC    CL8'SLSS@ERR'           ERROR DISPLAY PANEL NAME\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nISPMSG01 DC    CL62'UNABLE TO UPDATE DIALOG VARIABLE(S).'\nISPMSG02 DC    CL62'UNABLE TO RETRIEVE DIALOG VARIABLE(S).'\nEMSG2    DC    CL62'RETURN CODE FOR ''ISPEXEC 12345678'' WAS 12.'\nEMSG3    DC    CL62'CONTACT SYSTEMS PROGRAMMING FOR FURTHER INFORMATION+\n               '\nEMSG4    DC    CL62'REGARDING THIS ERROR.'\nEMSG5    DC    CL62' '\nEMSGX    DC    CL62'PRESS ENTER TO CONTINUE.'\nNAMELST0 DS    0F                      NAMES OF VARIABLES (LENGTH 60)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'NAME1'\n         DC    CL8'NAME2'\n         DC    CL8'NAME3'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 62)\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'SLSSERR1'\n         DC    CL8'SLSSERR2'\n         DC    CL8'SLSSERR3'\n         DC    CL8'SLSSERR4'\n         DC    CL8'SLSSERR5'\n         DC    CL8'SLSSERRX'\n         TITLE 'SLSS - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nNAME1    DS    CL60                    TITLE LINE 1 OF MANUAL\nNAME2    DS    CL60                    TITLE LINE 2 OF MANUAL\nNAME3    DS    CL60                    TITLE LINE 3 OF MANUAL\nWORKNAM1 DS    CL60                    WORK TITLE LINE 1 OF MANUAL\nWORKNAM2 DS    CL60                    WORK TITLE LINE 2 OF MANUAL\nWORKNAM3 DS    CL60                    WORK TITLE LINE 3 OF MANUAL\nSLSSERR1 DS    CL62                    SLSS ERROR MESSAGE 1\nSLSSERR2 DS    CL62                    SLSS ERROR MESSAGE 2\nSLSSERR3 DS    CL62                    SLSS ERROR MESSAGE 3\nSLSSERR4 DS    CL62                    SLSS ERROR MESSAGE 4\nSLSSERR5 DS    CL62                    SLSS ERROR MESSAGE 5\nSLSSERRX DS    CL62                    SLSS ERROR MESSAGE X\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nPANEL    DS    CL8                     GENERIC PANEL NAME\nWORKLEN  EQU   *-WORKAREA\n         END   SLSSVEFY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMFSEL": {"ttr": 16394, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xc9\\x00\\xc9\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 201, "newlines": 201, "modlines": 0, "user": "DELUXE"}, "text": "****************************** SMFSEL *********************************\n*                                                                     *\n*  THIS PROGRAM COPIES ONE SMF HISTORY TAPE TO ANOTHER BUT ALLOWS     *\n*  SELECTION  BY DATE (JULIAN) AND TIME (MILITARY 24 HR CLOCK) .      *\n*  IT ALSO WILL ALLOW REBLOCKING OF THE DATA.                         *\n*  DDNAMES:    SYSUT1 - INPUT SMF FILE                                *\n*              SYSUT2 - OUTPUT SMF FILE                               *\n*               SYSIN - CONTROL STATEMENTS                            *\n*            SYSPRINT - MESSAGE DATA SET                              *\n*                                                                     *\n* THERE MUST BE 2 CONTROL CARDS WITH THE FOLLOWING FORMAT:            *\n*  CARD1 IS THE DATE SELECTION CARD AND CARD2 IS THE TIME SELECTION   *\n*        CARD.  ALL DATES AND TIMES ARE INCLUSIVE.                    *\n*  COLS   ----+----1----+----2----+----3                              *\n*  CARD1  YYDDD,YYDDD                                                 *\n*   THE FIRST DATE IS THE BEGINNING DATE AND THE SECOND IS THE ENDING *\n*   DATE. THE COMMA IS REQUIRED.                                      *\n*  CARD2  HHMMSS,HHMMSS                                               *\n*   THE FIRST TIME IS THE BEGINNING TIME AND THE SECOND IS THE ENDING *\n*   TIME. THE COMMA IS REQUIRED.                                      *\n*                                                                     *\n*   FOR EXAMPLE IF YOU WISHED TO SELECT ALL SMF RECORDS BETWEEN       *\n*   9:35 AM AND 1:40 PM ON JANUARY 4TH THRU 7TH 1981 YOU WOULD CODE:  *\n*                                                                     *\n*  COLS   ----+----1----+----2----+----3                              *\n*  CARD1  81004,81007                                                 *\n*  CARD2  093500,134000                                               *\n*                                                                     *\n*  YOU MAY SELECT ALL TIMES OR ALL DATES BY CODEING \"ALL\" IN          *\n*  COLUMNS 1 - 3 OF EITHER THE DATE CARD OR THE TIME CARD.            *\n*  CODEING \"ALL\" ON BOTH CARDS GIVES A FULL COPY.                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'SMFSEL - SMF RECORD DATE AND TIME SELECTIVE COPY '\nSMFSEL   CSECT\n         STM   R14,R12,12(R13)\n         LR    R11,R15\n         USING SMFSEL,R11\n         ST    R13,SAVEAREA+4\n         LR    R6,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R6)\n* END OF PROLOUGE\n         MVI   OUTREC,C' '\n         MVC   OUTREC+1(132),OUTREC\n         MVI   CTLCHAR,C'1'\n         OPEN  (SMFINT,,SMFOUT,(OUTPUT),CNTRLIN,,CNTRLOUT,(OUTPUT))\n         USING  SMFRCD0,R5\n         LA    R9,SMFINT\n         USING IHADCB,R9\n         SR    R6,R6\n         SR    R7,R7\n         PUT   SMFOUT\n         ST    R1,SAVE1\n         GET   CNTRLIN,INREC\n         MVC   OUTREC+1(80),INREC\n         PUT   CNTRLOUT,OUTREC\n         MVI   OUTREC,C' '\n         MVC   OUTREC+1(132),OUTREC\n         CLC   INREC(3),=CL3'ALL'\n         BNE   NOTALLD\n         MVI   ALLDATES,C'1'\n         B     NEXTCARD\nNOTALLD  PACK  DATEHI(4),INREC+6(5)\n         PACK  DATELOW(4),INREC(5)\n         OI    DATEHI+3,X'0F'\n         OI    DATELOW+3,X'0F'\n         CLI   INREC+5,C','\n         BNE   BADCARD\nNEXTCARD GET   CNTRLIN,INREC\n         MVC   OUTREC+1(80),INREC\n         PUT   CNTRLOUT,OUTREC\n         MVI   OUTREC,C' '\n         MVC   OUTREC+1(132),OUTREC\n         CLC   INREC(3),=CL3'ALL'\n         BNE   NOTALLT\n         MVI   ALLTIMES,C'1'\n         B     COPYSMF\nNOTALLT  EQU   *\n         CLI   INREC+6,C','\n         BNE   BADCARD\n         MVC   TIMEHOLD(6),INREC\n         BAL   R10,TIMEB\n         MVC   TIMELOW,TIME\n         MVC   TIMEHOLD(6),INREC+7\n         BAL   R10,TIMEB\n         MVC   TIMEHI,TIME\nCOPYSMF  GET   SMFINT\n         LR    R5,R1   SAVE BUFFER ADDRESS\n         A     R6,=F'1'\n         CLI   ALLDATES,C'1'\n         BE    CHECKT\n         CLC   SMF0DTE,DATELOW\n         BL    COPYSMF\n         CLC   SMF0DTE,DATEHI\n         BH    COPYSMF\nCHECKT   CLI   ALLTIMES,C'1'\n         BE    WRITEIT\n         CLC   SMF0TME,TIMELOW\n         BL    COPYSMF\n         CLC   SMF0TME,TIMEHI\n         BH    COPYSMF\nWRITEIT  EQU   *\n         L     R4,SAVE1                 GET ADDRESS OF OUTPUT BUFFER\n         LR    R2,R5                    GET ADDRESS OF INPUT BUFFER\n         SR    R3,R3                    CLEAR R3\n         SR    R5,R5                            AND R5 (COUNT FIELD)\n         LH    R3,DCBLRECL              LOAD COUNT IN R3\n         LR    R5,R3                                     AND R5\n         LA    R5,0(R5)                 ZERO HI ORDER BIT\n         MVCL  R4,R2                    MOVE 0(R4,R5),0(R2,R3)\n*                                       MVC  D1(L1,B1),D2(L2,B2)\n         L     R1,SAVE1                 RESTORE R1\n         PUT   SMFOUT\n         ST    R1,SAVE1\n         A     R7,=F'1'\n         B     COPYSMF\nCLOSEIT  EQU   *\n         CLOSE (SMFINT,,SMFOUT,,CNTRLIN,,CNTRLOUT)\n* BEGINNING OF EPILOUGE\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)\n         RETURN RC=0\n* END OF EPILOUGE\nBADCARD  EQU   *\n         MVC   OUTREC+1(L'BADMSG),BADMSG\n         PUT   CNTRLOUT,OUTREC\n         B     CLOSEIT\nEOF      EQU   *\n         MVI   OUTREC,C' '\n         MVC   OUTREC+1(132),OUTREC\n         CVD   R6,WORK\n         UNPK  WORK2,WORK+4(4)\n         OI    WORK2+7,X'F0'\n         MVC   RECIN,WORK2+1\n         MVC   OUTREC+1(32),RECINMSG\n         PUT   CNTRLOUT,OUTREC\n         MVI   OUTREC,C' '\n         MVC   OUTREC+1(132),OUTREC\n         CVD   R7,WORK\n         UNPK  WORK2,WORK+4(4)\n         OI    WORK2+7,X'F0'\n         MVC   RECOUT,WORK2+1\n         MVC   OUTREC+1(35),RECOTMSG\n         PUT   CNTRLOUT,OUTREC\n         B     CLOSEIT\nCARDEOF  MVC   OUTREC+1(L'CARDMSG),CARDMSG\n         PUT   CNTRLOUT,OUTREC\n         B     CLOSEIT\nTIMEB    EQU   *                      CONVERT TIME HHMMSS TO BINARY\n*                                     BINARY VALUE IN 100THS OF SECONDS\n         PACK  WORK,TIMEHOLD(2)       PACK HOURS\n         MP    WORK,=P'3600'          CONVERT HOURS TO SECONDS\n         ZAP   WORK2,WORK             ZERO AND ADD TO WORK2\n         PACK  WORK,TIMEHOLD+2(2)     PACK MINUTES\n         MP    WORK,=P'60'            CONVERT MINUTES TO SECONDS\n         AP    WORK2,WORK             ADD TO WORK2\n         PACK  WORK,TIMEHOLD+4(2)     PACK SECONDS\n         AP    WORK2,WORK             ADD TO WORK2\n         MP    WORK2,=P'100'          CONVERT SECONDS TO 100THS OF SECS\n         CVB   R8,WORK2               CONVERT TO BINARY\n         ST    R8,TIME                STORE BINARY VALUE IN FULLWORD\n         BR    R10                    RETURN\nSAVEAREA DC    18F'0'\nSAVE1    DS    F\nWORK     DS    D\nWORK2    DS    D\nDATE     DS    F\nTIME     DS    F\nTIMEHOLD DS    CL6\nINREC    DS    CL80\nCARDMSG  DC    C'PREMATURE EOF ON SYSIN'\nBADMSG   DC    C'ABOVE CONTROL CARD IN ERROR'\nRECINMSG DS    0CL32\n         DC    C'NUMBER OF RECORDS READ = '\nRECIN    DC    CL7' '\nRECOTMSG DS    0CL35\n         DC    C'NUMBER OF RECORDS WRITTEN = '\nRECOUT   DC    CL7' '\nOUTREC   DS    0CL133\nCTLCHAR  DS    CL1\nPRINTREC DS    CL132\nALLDATES DC    CL1'0'\nALLTIMES DC    CL1'0'\nTIMELOW  DS    F\nTIMEHI   DS    F\nDATELOW  DS    F\nDATEHI   DS    F\n         LTORG\n         PRINT NOGEN\nSMFINT   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=EOF,BFTEK=A\nSMFOUT   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PL,BFTEK=A\nCNTRLIN  DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GM,LRECL=80,BLKSIZE=80,     X\n               RECFM=FB,EODAD=CARDEOF\nCNTRLOUT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA,  X\n               BLKSIZE=133\n         DCBD  DSORG=LR\nRECDEF   DSECT\nRECS     IFASMFR (0)\n         EQUATE\n         END   SMFSEL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSTEM": {"ttr": 16643, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01G\\x01G\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 327, "newlines": 327, "modlines": 0, "user": "DELUXE"}, "text": " TITLE 'S Y S T E M   C O N F I G U R A T I O N   D I S P L A Y'\n*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*\n*                                                                     *\n*  SYSTEM IS THE OS/MVS VERSION OF THE SYSTEM CONFIGURATION DISPLAY   *\n*     COMMAND.  IT SHOWS A TSO USER THE OPERATING SYSTEM, RELEASE,    *\n*     SYSTEM ID, SERIAL NUMBER(S), MAIN STORAGE SIZE(ONLINE), IPL     *\n*     DATE, TIME, IPL VOLUME SERIAL NUMBER AND IPL ADDRESS.  IN AN    *\n*     UP ENVIRONMENT CHECKS TO SEE WHICH PROCESSOR IS ON-LINE AND     *\n*     FINDS THE SERIAL NUMBER OF THAT PROCESSOR.  IN AN MP ENVIRON-   *\n*     MENT CHECKS FOR BOTH CPU SERIAL NUMBERS.  SYSTEM ID IS GOTTEN   *\n*     FROM THE SMF COMMUNICATION WORK AREA(SMCA).                     *\n*                                                                     *\n* EXAMPLE-                                                            *\n*                                                                     *\n*   M P   I P L E D                                                   *\n*                                                                     *\n*   MVS R03.8  M168  14336K IPL'D FROM RES38B ON ADDRESS 222          *\n*      IPL DATE 82.131 IPL TIME 19:37:50                              *\n*      CPU NUMBER   0   SERIAL NUMBER 012345 CPU TYPE 0168            *\n*      CPU NUMBER   1   SERIAL NUMBER 123456 CPU TYPE 0168            *\n*                                                                     *\n*   C P U   0   I P L E D                                             *\n*                                                                     *\n*   MVS R03.8  M168  14336K IPL'D FROM RES38B ON ADDRESS 222          *\n*      IPL DATE 82.131 IPL TIME 19:37:50                              *\n*      CPU NUMBER   0   SERIAL NUMBER 012345 CPU TYPE 0168            *\n*                                                                     *\n*   C P U   1   I P L E D  (HALF-DUPLEX MODE)                         *\n*                                                                     *\n*   MVS R03.8  M168  14336K IPL'D FROM RES38B ON ADDRESS 222          *\n*      IPL DATE 82.131 IPL TIME 19:37:50                              *\n*      CPU NUMBER   1   SERIAL NUMBER 123456 CPU TYPE 0168            *\n*                                                                     *\n*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*\n         MACRO\n&L       JVDEQU &O\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n.*\n         MEND\n         MACRO\n&LABEL   JVDENTER &BASE=(11),&REGS=(14,12),&ID=,&VERSION=,             C\n               &DSA=72,&ORIGIN=*,&CFL=YES\n.*\n         LCLC  &EPID,&BASR,&START\n.*\n.BEGIN   AIF   ('&LABEL' EQ '').IDT\n.*\n         SPACE\n&LABEL   DS    0H\n         ENTRY &LABEL\n         SPACE\n.*\n.IDT     AIF   (T'&ID EQ 'O').IDD\n&EPID    SETC  '&ID'\n         AGO   .VER\n.IDD     AIF   ('&LABEL' EQ '').IDC\n&EPID    SETC  '&LABEL'\n         AGO   .VER\n.IDC     ANOP\n&EPID    SETC  '&SYSECT'\n.VER     AIF   (T'&VERSION EQ 'O').GEN\n&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'\n         MNOTE *,'       &EPID'\n.*\n.GEN     ANOP\n&BASR    SETC  '&BASE(1)'\n.*\n&START   SETC  '&ORIGIN'\n         AIF   ('&ORIGIN' NE '@').START\n&START   SETC  '&SYSECT'\n.START   AIF   ('&ORIGIN' EQ '*').HERE\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         BALR  &BASR,0\n         LA    14,*-&ORIGIN\n         SLR   &BASR,14\n         LR    2,13\n         SPACE\n.*\n         AGO   .GETDSA\n.HERE    ANOP\n.*\n         USING &START,&BASR\n         SAVE  &REGS,,&EPID\n         LR    &BASR,15\n         LR    2,13\n         SPACE\n.*\n.GETDSA  AIF   ('&DSA' EQ '0').NOCFL\n.*\n         LA    3,&DSA\n         GETMAIN R,LV=(3)\n         ST    3,0(1)\n         ST    13,4(1)\n         LR    13,1\n.*\n         AIF   ('&CFL' EQ 'NO').NOCFL\n.*\n         ST    1,8(2)\n.*\n.NOCFL   ANOP\n.*\n         LM    14,04,12(2)\n         SPACE\n.*\n         MEND\n         MACRO\n&LABEL   JVDLEAVE &REGS=(14,12),&RC=,&DSA=\n.*\n         LCLC  &L\n.*\n         AIF   ('&DSA' EQ '0').NODSA\n.*\n&LABEL   LH    0,2(13)\n         LR    1,13\n         L     13,4(13)\n.*\n         AIF   ('&RC' NE '(15)').FREE\n.*\n         LR    2,15\n.*\n.FREE    ANOP\n.*\n         FREEMAIN R,LV=(0),A=(1)\n.*\n.RCCHK   AIF   ('&RC' EQ '').NORC\n         AIF   ('&RC' NE '(15)').RTRN\n.*\n         LR    15,2\n.*\n         AGO   .RTRNN\n.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC\n.*\n         LR    15,&RC(1)\n.*\n.RTRNN   ANOP\n.*\n&L       RETURN &REGS,RC=(15)\n         SPACE\n.*\n         MEXIT\n.RTRNC   ANOP\n.*\n&L       RETURN &REGS,RC=&RC\n         SPACE\n.*\n         MEXIT\n.NORC    ANOP\n.*\n&L       RETURN &REGS\n         SPACE\n.*\n         MEXIT\n.NODSA   ANOP\n&L       SETC  '&LABEL'\n         AGO   .RCCHK\n.*\n         MEND\n         SPACE 2\nSYSTEM   CSECT\n         SPACE\n         JVDENTER DSA=(DSAEND-DSAWRK),VERSION=&SYSPARM\n         USING    DSAWRK,R13\n         EJECT\n         L     R10,CVTPTR\n         USING CVT,R10\n         L     R3,CVTSYSAD\n         LA    R5,0(R10)\n         S     R5,F8\n         MVC   MSG1(MSG1END-MSG1),MASK1\n         MVC   BRLSE,4(R5)\n         MVC   BLEVL,6(R5)\n         LA    R15,16\n         IC    R14,CVTDCB\n         N     R14,VSMASK\n         SRL   R14,1\n         L     R9,CVTRLSTG   SIZE OF ACTUAL REAL STORAGE ONLINE\n         CVD   R9,DWD\n         ED    BCORE,DWD+5\n         MVC   BIPLV,UCBVOLI-UCBOB(R3)\n         L     R12,CVTSMCA   LOAD ADDRESS OF SMF COMMUNICATION AREA\n         MVC   BMODL,16(R12)\n         MVC   BIPLDEV,UCBNAME-UCBOB(R3) UNIT ADDRESS OF IPL DEVICE\n         LA    R7,MSG1END-MSG1\n         TPUT  MSG1,(R7)\n         SPACE\n         MVC   MSG1A(MSG1AEND-MSG1A),MASK1B\n         ED    BDATE,341(R12) GET IPL DATE SMCAIDTE+1\n         L     R9,336(R12)    GET IPL TIME SCMAITME\n         BAL   R2,TIMECNVT    GO CONVERT TIME TO HH:MM:SS\n         LA    R7,MSG1AEND-MSG1A PUT IPL DATE AND TIME MESSAGE\n         TPUT  MSG1A,(R7)\n         EJECT\n         L     R6,CVTPCCAT\n         LA    R2,16           LOAD NUMBER OF POSSIBLE CPUS\nSER#LOOP EQU   *\n         MVC   MSG2(MSG2END-MSG2),MASK2  MOVE IN MESSAGE MASKS\n         L     R4,0(R6)        POINTER TO CPU SERIAL NUMBER\n         LTR   R4,R4           IS THIS CPU ON-LINE\n         BZ    NOPROC          THIS PROCESSOR NOT ONLINE\n         MVC   BSNUM,4+2(R4)   PCCACPID\n         MVC   CPUTYPE,12(R4)  PCCACPID  CPU TYPE\n         LH    R9,16(R4)       GET PHYSICAL CPU NUMBER\n         CVD   R9,DWD          MAKE IT PRINTABLE\n         MVC   CPU#,CPUMASK    MOVE IN MASK FOR CPU NUMBER\n         ED    CPU#,DWD+6      MOVE IN PHYSICAL CPU NUMBER\n         LA    R7,MSG2END-MSG2 LOAD ADDRESS OF THE MESSAGE\n         TPUT  MSG2,(R7)\nNOPROC   LA    R6,4(R6)        POINT TO NEXT CPU POINTER\n         BCT   R2,SER#LOOP     GO GET NEXT SERIAL NUMBER\n         SPACE\n         JVDLEAVE\n         EJECT\n*  SUBROUTINE TO CONVERT TIME IN SEC TO HH:MM:SS\n*        INPUT - R9=TIME IN SEC\n*\nTIMECNVT EQU   *\n         ST    R9,TIMESAVE     * SAVE TIME FOR OTHER CALCULATIONS\n         SLR   R8,R8           * ZERO WORK REG FOR DIVIDE\n         D     R8,=F'360000'   * GET HOURS FOR PRINTING\n         LR    R1,R9           * SAVE HOURS FOR FURTHER PROCESSING\n         CVD   R9,DWD          * CONVERT TO DECIMAL\n         UNPK  BTIME(2),DWD    * UNPACK HOURS\n         OI    BTIME+1,X'F0'   * MAKE IT PRINTABLE\n         L     R9,TIMESAVE     * RELOAD TIME\n         SR    R8,R8           * ZERO FOR DIVIDE\n         D     R8,=F'6000'     * GET TOTAL NUMBER OF MINUTES\n         LR    R0,R9           * SAVE TOTAL NUMBER OF MINUTES\n         LR    R9,R1           * RELOAD HOURS\n         SR    R8,R8           * ZERO OUT FOR DIVIDE\n         M     R8,=F'60'       * MULTIPLY HOURS BY 60 FOR MINUTES\n         LR    R8,R0           * RELOAD TOTAL NUMBER OF MINUTES\n         SR    R8,R9           * GET NUMBER OF MINUTES\n         CVD   R8,DWD          * CONVERT TO DECIMAL\n         UNPK  BTIME+3(2),DWD  * UNPACK MINUTES\n         OI    BTIME+4,X'F0'   * MAKE IT PRINTABLE\n         LR    R9,R0           * RELOAD TOTAL NUMBER OF MINUTES\n         SR    R8,R8           * GET NUMBER OF MINUTES\n         M     R8,=F'60'       * CONVERT MINUTES TO SECONDS\n         M     R8,=F'100'      * CONVERT SECONDS TO THOUSANDS\n         LR    R0,R9           * SAVE SECONDS IN THOUSANDS\n         LR    R9,R1           * RELOAD HOURS\n         M     R8,=F'60'       * CONVERT HOURS TO SECONDS\n         M     R8,=F'60'       * CONVERT MINUTES TO SECONDS\n         M     R8,=F'100'      * CONVERT SECONDS TO THOUSANDS\n         CVD   R9,DWD          * CONVERT TO DECIMAL\n         UNPK  BTIME+6(2),DWD  * UNPACK SECONDS\n         OI    BTIME+7,X'F0'   * MAKE IT PRINTABLE\n         BR    R2\n         EJECT\nVSMASK   DC    F'2'\nF8       DC    F'8'\nCPUMASK  DC    X'40202120'\nMASK1    DC    C'MVS R03.0A 1234 '\n         DC    X'402020202120',C'K '\nMASK1A   DC    C'IPL''D FROM ABCDEF ON '\n         DC    C'ADDRESS 123'\nMASK1B   DC    C'   IPL DATE 12.345'\n         ORG   MASK1B+L'MASK1B-6\n         DC    X'2120',C'.',X'202020'\nMASK1C   DC    C' IPL TIME 12:34:56'\nMASK2    DC    C'   CPU NUMBER   0   SERIAL NUMBER 123456'\n         DC    C' CPU TYPE 1234'\n         LTORG\n         EJECT\nDSAWRK   DSECT\nSSA      DS   18F\nTIMESAVE DS   F\nMSG1     EQU  *\nBTYPE    DS   CL5\nBRLSE    DS   CL2\n         DS   C'.'\nBLEVL    DS   CL2\n         DS   C' '\nBMODL    DS   CL4\n         DS   C' '\nBCORE    DS    ZL6\n         DS    C'K IPL''D FROM '\nBIPLV    DS    CL6\n         DS    C' ON '\n         DS    C'ADDRESS '\nBIPLDEV  DS    CL3\nMSG1END  EQU   *\nMSG1A    EQU   *\n         DS    C'   IPL DATE '\nBDATE    DS    C'74.305'\n         DS    C' IPL TIME '\nBTIME    DS    C'12:34:56'\nMSG1AEND EQU   *\nMSG2     EQU   *\n         DS    C'   CPU NUMBER'\nCPU#     DS    CL4\n         DS    C'   SERIAL NUMBER '\nBSNUM    DS    CL6\n         DS    C' CPU TYPE '\nCPUTYPE  DS    CL4\nMSG2END  EQU   *\nDWD      DS    D\nDSAEND   EQU   *\n         SPACE\n         JVDEQU\n         EJECT\n         EJECT\nCVT      DSECT\n         CVT   LIST=YES\n         EJECT\n         IEFUCBOB\n         SPACE 2\n         END   SYSTEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMCTABC": {"ttr": 16649, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03\\xda\\x03\\xda\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 986, "newlines": 986, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TMCTABC - CREATE TMC TABLE FROM SEQ INPUT'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = TMCTABC                                   *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                03/26/86  WRITTEN.                              JWC. *\n*                                                                     *\n*                04/09/86  CHANGE AFTER ALLOWING FOR DSNB'S.     JWC. *\n*                                                                     *\n*                12/12/86  CORRECT CATALOG DETERMINATION PART.   JWC. *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'TMCTABC - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'TMCTABC - INITIALIZATION SECTION'\nTMCTABC CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,TMCTABC_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING TMCTABC,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH EXTENDED ENTRY\n         USING TMCTABC+4095,R11        EXTEND ADDRESSABILITY\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         LA    R4,DATA                 SET UP\n         LA    R5,DATALEN                  REGISTERS\n         LA    R6,INITDATA                     FOR\n         LA    R7,DATALEN                          LONG MOVE\n         MVCL  R4,R6                   INITIALIZE PART GETMAINED AREA\n         MVC   TMCMSG,SPACES           INITIALIZE ERROR MESSAGE\n         MVC   FINDFLGS,FLAGS1         INITIALIZE FLAGS FOR LOCATE\n         LA    R4,TMCDSN               R4 - ADDRESS OF DATA SET NAME\n         ST    R4,FINDDSN              STORE IN CAMLIST FOR LOCATE\n         SR    R4,R4                   CLEAR REG 4\n         ST    R4,FINDVOL              INITIALIZE FINDVOL\n         LA    R4,WORK                 R4 - ADDR - WORK AREA FOR LOCATE\n         ST    R4,FINDWORK             MOVE INTO FINDSN\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n         MVC   REGID,NONE              SET REIONAL IDENTIFIER\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST2,TMCDSN,'CHAR',44)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,TMCVOL,'CHAR',6)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBCREAT$                RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR VDEF)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (NOT VALID FOR VDEF)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE ADMIN TABLE\n***********************************************************************\nTBCREAT$ EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID$            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB$',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE$10(R15)           CHECK RETURN CODE\nTBCRE$10 EQU   *\n         B     TBCREAT1                RC = 00 (CONTINUE)\n         B     TBCREAT1                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 1 TABLE\n***********************************************************************\nTBCREAT1 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID1            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB1',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE110(R15)           CHECK RETURN CODE\nTBCRE110 EQU   *\n         B     TBCREAT2                RC = 00 (CONTINUE)\n         B     TBCREAT2                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 2 TABLE\n***********************************************************************\nTBCREAT2 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID2            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB2',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE210(R15)           CHECK RETURN CODE\nTBCRE210 EQU   *\n         B     TBCREAT3                RC = 00 (CONTINUE)\n         B     TBCREAT3                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 3 TABLE\n***********************************************************************\nTBCREAT3 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID3            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB3',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE310(R15)           CHECK RETURN CODE\nTBCRE310 EQU   *\n         B     TBCREAT4                RC = 00 (CONTINUE)\n         B     TBCREAT4                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 4 TABLE\n***********************************************************************\nTBCREAT4 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID4            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB4',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE410(R15)           CHECK RETURN CODE\nTBCRE410 EQU   *\n         B     TBCREAT5                RC = 00 (CONTINUE)\n         B     TBCREAT5                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 5 TABLE\n***********************************************************************\nTBCREAT5 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID5            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB5',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE510(R15)           CHECK RETURN CODE\nTBCRE510 EQU   *\n         B     TBCREAT6                RC = 00 (CONTINUE)\n         B     TBCREAT6                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 6 TABLE\n***********************************************************************\nTBCREAT6 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID6            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB6',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE610(R15)           CHECK RETURN CODE\nTBCRE610 EQU   *\n         B     TBCREAT7                RC = 00 (CONTINUE)\n         B     TBCREAT7                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 7 TABLE\n***********************************************************************\nTBCREAT7 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID7            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB7',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE710(R15)           CHECK RETURN CODE\nTBCRE710 EQU   *\n         B     TBCREAT8                RC = 00 (CONTINUE)\n         B     TBCREAT8                RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION 8 TABLE\n***********************************************************************\nTBCREAT8 EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID8            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTAB8',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCRE810(R15)           CHECK RETURN CODE\nTBCRE810 EQU   *\n         B     TBCREATP                RC = 00 (CONTINUE)\n         B     OPEN                    RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE REGION P TABLE\n***********************************************************************\nTBCREATP EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGIDP            SET REIONAL IDENTIFIER\n*                                      CREATE A NEW TABLE\n         ISPCALL ('TBCREATE','TMCTABP',' ',NAMELST1,'WRITE','REPLACE','+\n               TMCTLIB')\n         B     TBCREP10(R15)           CHECK RETURN CODE\nTBCREP10 EQU   *\n         B     OPEN                    RC = 00 (CONTINUE)\n         B     OPEN                    RC = 04 (TABLE WILL BE REPLACED)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN 'UCC.ONE.TMC'\n***********************************************************************\nOPEN     EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n         MVC   REGID,NONE              SET REIONAL IDENTIFIER\n         OPEN  (INPUT,INPUT),MF=(E,OPENLST_)\n         B     OPEN10(R15)             CHECK RETURN CODE\nOPEN10   EQU   *\n         B     GETREC                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (PRINT ERROR MESSAGE)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n         TITLE 'TMCTABC - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - GET RECORD FROM TMC AND EXTRACT TABLE INFO\n***********************************************************************\nGETREC   EQU   *\n         GET   INPUT                   GET RECORD FROM TMC\n         MVC   TMCDSN,0(R1)            EXTRACT DATA SET NAME FROM TMC\n         MVC   TMCVOL,44(R1)           EXTRACT VOLUME SERIAL FROM TMC\n         LA    R2,VALIDSNR             R2 - INDEX THRU VALID REG DSN'S\nGETREC10 EQU   *\n         CLC   0(3,R2),SPACES          END OF REGIONAL DSN TABLE?\n         BE    GETREC20                YES, PREPARE TO CHECK ADMIN TABL\n         CLC   0(3,R2),TMCDSN          VALID DATA SET NAME?\n         BE    REGBRNCH                YES, CONTINUE\n         LA    R2,3(R2)                INCREMENT R2\n         B     GETREC10                CHECK NEXT TABLE ENTRY\nGETREC20 EQU   *\n         LA    R2,VALIDSN$             R2 - INDEX THRU VALIDSN$\n         LH    R3,0(R2)                R3 - LENGTH OF QUALIFIER\n         LA    R4,2(R2)                R4 - POINTER TO QUALIFIER\n         BCTR  R3,0                    DECREMENT LENGTH FOR 'EX'\nGETREC30 EQU   *\n         CLC   0(8,R2),SPACES          END OF TABLE?\n         BE    GETREC                  YES, INVALID DSN\n         LA    R5,TBADD$               R5 - BRANCH ADDR AFTER LOCATE\n         EX    R3,DSNCLC               COMPARE TABLE AND TMCDSN\n         BE    LOCATE                  YES, CONTINUE\n         LA    R2,10(R2)               INCREMENT R2\n         LH    R3,0(R2)                R3 - LENGTH OF QUALIFIER\n         LA    R4,2(R2)                R4 - POINTER TO QUALIFIER\n         BCTR  R3,0                    DECREMENT LENGTH FOR 'EX'\n         B     GETREC30                CHECK NEXT TABLE ENTRY\nDSNCLC   CLC   TMCDSN(0),0(R4)         VALID DSN?\n***********************************************************************\n*  PROCESSING SECTION - DETERMINE WHICH TABLE TO BE UPDATED\n***********************************************************************\nREGBRNCH EQU   *\n         LA    R2,TMCDSN               R2 - INDEX THROUGH DATA SET NAME\n         LA    R3,44                   R3 - MAXIMUM LENGTH OF DSN\n         LA    R5,TBADD$               R5 - BRANCH ADDR AFTER LOCATE\nREGBR10  EQU   *\n         CLC   0(1,R2),SPACES          END OF DSN?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         CLC   0(1,R2),PERIOD          END OF FIRST QUALIFIER?\n         BE    REGBR15                 YES, GO LOOK FOR SECOND\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,REGBR10              CONTINUE\n         B     LOCATE                  SEE IF DSN CATALOGED\nREGBR15  EQU   *\n         LA    R2,1(R2)                POINT TO START OF NEXT QUALIFIER\nREGBR20  EQU   *\n         CLC   0(1,R2),SPACES          END OF DSN?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         CLC   0(1,R2),PERIOD          END OF SECOND QUALIFIER?\n         BE    REGBR25                 YES, GO DETERMINE TABLE UPDATE\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,REGBR20              CONTINUE\n         B     LOCATE                  SEE IF DSN CATALOGED\nREGBR25  EQU   *\n         LA    R2,1(R2)                POINT TO START OF NEXT QUALIFIER\n         CLC   0(1,R2),REG$            THIS AN ADMIN DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD1               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG1            THIS AN REG1 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD2               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG2            THIS AN REG2 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD3               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG3            THIS AN REG3 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD4               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG4            THIS AN REG4 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD5               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG5            THIS AN REG5 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD6               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG6            THIS AN REG6 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD7               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG7            THIS AN REG7 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD8               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REG8            THIS AN REG8 DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADDP               R5 - BRANCH ADDR AFTER LOCATE\n         CLC   0(1,R2),REGP            THIS AN REGP DATA SET?\n         BE    LOCATE                  YES, SEE IF DSN CATALOGED\n         LA    R5,TBADD$               R5 - BRANCH ADDR AFTER LOCATE\n***********************************************************************\n*  PROCESSING SECTION - VERIFY THAT DSN IS CATALOGED\n***********************************************************************\nLOCATE   EQU   *\n         LOCATE FINDSN                 IS DSN CATALOGED?\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNZ   GETREC                  IF NON-ZERO, GET NEXT RECORD\n         SLR   R2,R2                   CLEAR R2\n         LH    R2,WORK                 R2 - NUMBER OF VOLS DSN RESIDES\n         LA    R3,WORK+2               R3 - INDEX THROUGH WORK AREA\nLOCATE10 EQU   *\n         CLC   TMCVOL,4(R3)            THIS THE VOL WE'RE LOOKING FOR?\n         BER   R5                      YES, ADD TO CORRECT TABLE\n         LA    R3,12(R3)               NO, POINT TO NEXT ENTRY\n         BCT   R2,LOCATE10             CONTINUE LOOKING\n         B     GETREC                  GET NEXT RECORD\n***********************************************************************\n*  PROCESSING SECTION - UPDATE ADMIN TABLE\n***********************************************************************\nTBADD$   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID$            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB$')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 1 TABLE\n***********************************************************************\nTBADD1   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID1            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB1')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 2 TABLE\n***********************************************************************\nTBADD2   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID2            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB2')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 3 TABLE\n***********************************************************************\nTBADD3   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID3            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB3')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 4 TABLE\n***********************************************************************\nTBADD4   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID4            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB4')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 5 TABLE\n***********************************************************************\nTBADD5   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID5            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB5')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 6 TABLE\n***********************************************************************\nTBADD6   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID6            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB6')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 7 TABLE\n***********************************************************************\nTBADD7   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID7            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB7')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION 8 TABLE\n***********************************************************************\nTBADD8   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID8            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTAB8')\n         B     TBADD10(R15)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE REGION P TABLE\n***********************************************************************\nTBADDP   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGIDP            SET REIONAL IDENTIFIER\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','TMCTABP')\n         B     TBADD10(R15)\nTBADD10  EQU   *\n         B     GETREC                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBADD)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE ADMIN TABLE\n***********************************************************************\nTBCLSE$  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID$            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB$','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO$10(R15)\nTBCLO$10 EQU   *\n         B     TBCLSE1                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 1 TABLE\n***********************************************************************\nTBCLSE1  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID1            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB1','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO110(R15)\nTBCLO110 EQU   *\n         B     TBCLSE2                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 2 TABLE\n***********************************************************************\nTBCLSE2  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID2            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB2','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO210(R15)\nTBCLO210 EQU   *\n         B     TBCLSE3                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 3 TABLE\n***********************************************************************\nTBCLSE3  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID3            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB3','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO310(R15)\nTBCLO310 EQU   *\n         B     TBCLSE4                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 4 TABLE\n***********************************************************************\nTBCLSE4  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID4            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB4','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO410(R15)\nTBCLO410 EQU   *\n         B     TBCLSE5                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 5 TABLE\n***********************************************************************\nTBCLSE5  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID5            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB5','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO510(R15)\nTBCLO510 EQU   *\n         B     TBCLSE6                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 6 TABLE\n***********************************************************************\nTBCLSE6  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID6            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB6','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO610(R15)\nTBCLO610 EQU   *\n         B     TBCLSE7                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 7 TABLE\n***********************************************************************\nTBCLSE7  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID7            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB7','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO710(R15)\nTBCLO710 EQU   *\n         B     TBCLSE8                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION 8 TABLE\n***********************************************************************\nTBCLSE8  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGID8            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTAB8','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLO810(R15)\nTBCLO810 EQU   *\n         B     TBCLSEP                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE REGION P TABLE\n***********************************************************************\nTBCLSEP  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n         MVC   REGID,REGIDP            SET REIONAL IDENTIFIER\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE','TMCTABP','REPLCOPY',' ',' ','TMCTLIB')\n         B     TBCLOP10(R15)\nTBCLOP10 EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n         TITLE 'TMCTABC - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nERR04    EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR08    EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR12    EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR16    EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR20    EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         OPEN  (OUTPUT,OUTPUT),MF=(E,OPENLST_)  OPEN OUTPUT\n         MVC   TMCMSG,TMCERR           SET ERROR MESSAGE\n         MVC   TMCMSG+22(8),ISPFSERV   SET ISPF DIALOG SERVICE\n         MVC   TMCMSG+48(2),ISPFRC     SET DIALOG SERVICE RETURN CODE\n         MVC   TMCMSG+99(5),REGID      SET REGIONAL IDENTIFIER\n         PUT   OUTPUT,TMCMSG           PRINT ERROR MESSAGE\n         CLOSE OUTPUT,MF=(E,CLOSLST_)  CLOSE OUTPUT\n         TITLE 'TMCTABC - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         CLOSE INPUT,MF=(E,CLOSLST_)   CLOSE INPUT\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'TMCTABC - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nSCRATCH  EQU   X'04'                   TMFLAG1 - TAPE LISTED SCR LIST\nDELETED  EQU   X'02'                   TMFLAG1 - VOL DELETED FROM LIB\nDSNB     EQU   X'FF'                   1ST BYTE DSN-DATA SET NAME BLOCK\n         TITLE 'TMCTABC - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFLAGS1   DS    0F                      FLAGS FOR LOCATE\n         DC    AL1(68)\n         DC    AL1(0)\n         DC    AL1(0)\n         DC    AL1(0)\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nOPNID    DC    CL8'OPEN'               DATA SET OPEN\nNONE     DC    CL5'NONE '              NO REGION BEING PROCESSED\nREGID$   DC    CL5'ADMIN'              ADMIN\nREGID1   DC    CL5'REG-1'              REGION 1\nREGID2   DC    CL5'REG-2'              REGION 2\nREGID3   DC    CL5'REG-3'              REGION 3\nREGID4   DC    CL5'REG-4'              REGION 4\nREGID5   DC    CL5'REG-5'              REGION 5\nREGID6   DC    CL5'REG-6'              REGION 6\nREGID7   DC    CL5'REG-7'              REGION 7\nREGID8   DC    CL5'REG-8'              REGION 8\nREGIDP   DC    CL5'REG-P'              REGION P\nREG$     DC    CL1'$'                  ADMIN\nREG1     DC    CL1'A'                  REGION 1\nREG2     DC    CL1'B'                  REGION 2\nREG3     DC    CL1'C'                  REGION 3\nREG4     DC    CL1'D'                  REGION 4\nREG5     DC    CL1'E'                  REGION 5\nREG6     DC    CL1'F'                  REGION 6\nREG7     DC    CL1'G'                  REGION 7\nREG8     DC    CL1'H'                  REGION 8\nREGP     DC    CL1'P'                  REGION P\nVALIDSNR DS    0F                      VALID REGIONAL DSN'S\n         DC    CL3'AOE'                AOE DATA SET\n         DC    CL3'BIL'                BIL DATA SET\n         DC    CL3'CAR'                CAR DATA SET\n         DC    CL3'INV'                INV DATA SET\n         DC    CL3'LED'                LED DATA SET\n         DC    CL3'MAS'                MAS DATA SET\n         DC    CL3'MIS'                MIS DATA SET\n         DC    CL3'PAY'                PAY DATA SET\n         DC    CL3'PER'                PER DATA SET\n         DC    CL3'PRD'                PRD DATA SET\n         DC    CL3'REF'                REF DATA SET\n         DC    CL3'SLS'                SLS DATA SET\n         DC    CL3'SUP'                SUP DATA SET\n         DC    CL3'TFI'                TFI DATA SET\n         DC    CL3'VAL'                VAL DATA SET\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\n         DC    CL3' '                  DUMMY DSN'S\nVALIDSN$ DS    0F                      VALID ADMIN DSN'S\n         DC    H'04'                   LENGTH OF QUALIFIER\n         DC    CL8'DLX1'               DLX1 DATA SET (ADMIN ONLY)\n         DC    H'03'                   LENGTH OF QUALIFIER\n         DC    CL8'DSV'                DSV DATA SET (ADMIN ONLY)\n         DC    H'05'                   LENGTH OF QUALIFIER\n         DC    CL8'FICHE'              FICHE DATA SET (ADMIN ONLY)\n         DC    H'02'                   LENGTH OF QUALIFIER\n         DC    CL8'MD'                 MD DATA SET (ADMIN ONLY)\n         DC    H'03'                   LENGTH OF QUALIFIER\n         DC    CL8'OFF'                OFF DATA SET (ADMIN ONLY)\n         DC    H'05'                   LENGTH OF QUALIFIER\n         DC    CL8'VIDEO'              VIDEO DATA SET (ADMIN ONLY)\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\n         DC    H'00'                   LENGTH OF QUALIFIER\n         DC    CL8' '                  DUMMY DSN'S\nPERIOD   DC    CL1'.'                  PERIOD\nSPACES   DC    CL133' '                SPACES\nTMCERR   DC    CL133' ISPF DIALOG SERVICE, 12345678, ENDED WITH RC = 00+\n               . NOTIFY SYSTEMS PROGRAMMING. PROCESSING WAS FOR 12345.'\n*                                      ERROR MESSAGE TEXT\nNAMELST1 DS    0F                      NAMES OF VARIABLES IN TABLE\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'TMCDSN'\n         DC    CL8'TMCVOL'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 44)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCDSN'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 6)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCVOL'\n         TITLE 'TMCTABC - LITERAL POOL'\n         LTORG\n***********************************************************************\n*        INITIALIZATION DATA FOR PART OF GETMAINED AREA\n***********************************************************************\nINITDATA DS    0F\nDCBIN    DCB   DDNAME=TMCIN,DSORG=PS,MACRF=(GL),EODAD=TBCLSE$\nDCBOUT   DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST  OPEN  (,),MF=L            STATIC LIST FORM OF OPEN MACRO\nCLOSLST  CLOSE (,),MF=L            STATIC LIST FORM OF CLOSE MACRO\nDATALEN  EQU   *-INITDATA\n         TITLE 'TMCTABC - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nFINDSN   DS    0F                      CAMLIST FOR LOCATE\nFINDFLGS DS    A                       FLAGS FOR LOCATE\nFINDDSN  DS    A                       ADDR OF DSN FOR LOCATE\nFINDVOL  DS    A                       HEX ZERO'S - NOT USED\nFINDWORK DS    A                       ADDR OF WORK AREA FOR LOCATE\nWORK     DS    40D                     BUFFER FOR LOCATE\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nTMCDSN   DS    CL44                    DATA SET NAME FROM TMC\nTMCVOL   DS    CL6                     VOLSER FROM TMC\nTMCMSG   DS    CL133                   ERROR MESSAGE\nISPFSERV DS    CL8                     ISPF DIALOG SERVICE\nISPFRC   DS    CL2                     ISPF DIALOG SERVICE RETURN CODE\nREGID    DS    CL5                     REGIONAL IDENTIFIER\nDATA     DS    0F\nINPUT    DCB   DDNAME=TMCIN,DSORG=PS,MACRF=(GL),EODAD=TBCLSE$\nOUTPUT   DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST_ OPEN  (,),MF=L            DYNAMIC LIST FORM OF OPEN MACRO\nCLOSLST_ CLOSE (,),MF=L            DYNAMIC LIST FORM OF CLOSE MACRO\nWORKLEN  EQU   *-WORKAREA\n         END   TMCTABC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TMCTAB0": {"ttr": 17157, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02s\\x02s\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 627, "newlines": 627, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TMCTAB0 - TABLE SELECTION'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = TMCTAB0                                   *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                03/27/86  WRITTEN.      JWC.                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'TMCTAB0 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'TMCTAB0 - INITIALIZATION SECTION'\nTMCTAB0 CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,TMCTAB0_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING TMCTAB0,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVC   SELCTFLG,NO             'DO NOT DISPLAY SELECTION PANEL'\n***********************************************************************\n*  INITIALIZATION SECTION - BUILD SVC 99 REQUEST BLOCK\n***********************************************************************\nBLDS99RB EQU   *\n         LA    R7,WORKAREA+NONRBLEN    POINT TO S99RBP DSECT\n         USING S99RBP,R7               ESTABLISH ADDRESSABILITY\n         LA    R8,S99RBPTR+4           POINT TO S99RB DSECT\n         ST    R8,S99RBPTR             HAVE RBPTR POINT TO S99RB\n         OI    S99RBPTR,S99RBPND       TURN ON HIGH ORDER BIT - RBPTR\n         USING S99RB,R8                ESTABLISH ADDRESSABILITY\n         XC    S99RB(RBLEN),S99RB      ZERO OUT REQUEST BLOCK\n         MVI   S99RBLN,RBLEN           LENGTH OF RB IN LENGTH FIELD\n         MVI   S99VERB,S99VRBAL        INDICATE ALLOCATION VERB FUNCTN\n***********************************************************************\n*  INITIALIZATION SECTION - BUILD TEXT UNIT POINTER LIST\n***********************************************************************\nTMCTUP   EQU   *\n         LA    R9,S99RB+RBLEN          START OF TEXT UNIT POINTER LIST\n         USING S99TUPL,R9              ESTABLISH ADDRESSABILITY FOR\n*                                      TEXT UNIT POINTERS\n         ST    R9,S99TXTPP             STORE ADDR OF TUP LIST IN RB\n         LA    R10,TMCDD               GET ADDRESS OF FIRST TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,TMCDSN              GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,TMCSTAT             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         OI    S99TUPTR,S99TUPLN       TURN ON HIGH-ORDER BIT\n*                                      IN LAST TUP LIST ENTRY\n***********************************************************************\n*  INITIALIZATION SECTION - ALLOCATE / DE-ALLOCATE (SVC 99)\n***********************************************************************\nDYNALLOC EQU   *\n         LR    R1,R7                   R1 - ADDR OF REQUEST BLOCK PTR\n         DYNALLOC                      INVOKE SVC 99 TO PROCESS REQUEST\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,TMCTAB,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,TMCNAM,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,TMCREG,'CHAR',5)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,TMCMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,TMCMSGL,'CHAR',78)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBLACC                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR VDEF)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (NOT VALID FOR VDEF)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'TMCTAB0 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - DETERMINE TABLE ACCESS BASED ON REGION\n***********************************************************************\nTBLACC   EQU   *\n         L     R2,CVTPTR               R2 - ADDRESS OF CVT\n         L     R2,0(R2)                R2 - PTR TO FOUR WORD ADDR  LIST\n         L     R2,12(R2)               R2 - ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 ESTABLISH ADDRESSABILITY TO ASCB\n         L     R2,ASCBASXB             R2 - ADDRESS OF ASXB\n         USING ASXB,R2                 ESTABLISH ADDRESSABILITY TO ASXB\n         L     R2,ASXBSENV             R2 - ADDRESS OF ACEE\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         MVC   TMCUSR,ACEEUSRI         GET USERID FOR TABLE\n         MVC   TMCGRP,ACEEGRPN         GET GROUP NAME FOR TABLE\n         MVC   TMCNAM,UNKNOWN          INITIALIZE USER NAME\n         L     R3,ACEEUNAM             GET ADDRESS OF USER NAME\n         SR    R4,R4                   CLEAR REG 4\n         ICM   R4,B'0001',0(R3)        GET LENGTH OF USER NAME\n         LA    R3,1(R3)                POINT R3 TO START OF USER NAME\n         C     R4,FULL00               IS NAME PRESENT?\n         BE    TBLACC10                NO, NO NAME PRESENT\n         MVC   TMCNAM,SPACES           INITIALIZE TMCNAM TO SPACES\n         BCTR  R4,0                    DECREMENT BY 1\n         EX    R4,MVCNAME              GET USER NAME FOR TABLE\nTBLACC10 EQU   *\n         TM    ACEEFLG1,ACEESPEC       USER HAVE SPECIAL ATTRIBUTE?\n         BO    DISPLAY                 YES, APPROPRIATE VARS IN POOL\n         CLC   JCLGRP,ACEEGRPN         MEMBER OF JCLGRP?\n         BE    DISPLAY                 YES, APPROPRIATE VARS IN POOL\n         CLC   REG1,ACEEGRPN+4         REGION 1 OPERATOR?\n         BNE   TBLACC20                NO, CHECK FOR REGION 2\n         MVC   TMCREG,REGID1           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB1          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACC20 EQU   *\n         CLC   REG2,ACEEGRPN+4         REGION 2 OPERATOR?\n         BNE   TBLACC30                NO, CHECK FOR REGION 3\n         MVC   TMCREG,REGID2           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB2          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACC30 EQU   *\n         CLC   REG3,ACEEGRPN+4         REGION 3 OPERATOR?\n         BNE   TBLACC40                NO, CHECK FOR REGION 4\n         MVC   TMCREG,REGID3           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB3          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACC40 EQU   *\n         CLC   REG4,ACEEGRPN+4         REGION 4 OPERATOR?\n         BNE   TBLACC50                NO, CHECK FOR REGION 5\n         MVC   TMCREG,REGID4           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB4          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACC50 EQU   *\n         CLC   REG5,ACEEGRPN+4         REGION 5 OPERATOR?\n         BNE   TBLACC60                NO, CHECK FOR REGION 6\n         MVC   TMCREG,REGID5           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB5          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACC60 EQU   *\n         CLC   REG6,ACEEGRPN+4         REGION 6 OPERATOR?\n         BNE   TBLACC70                NO, CHECK FOR REGION 7\n         MVC   TMCREG,REGID6           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB6          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACC70 EQU   *\n         CLC   REG7,ACEEGRPN+4         REGION 7 OPERATOR?\n         BNE   TBLACC80                NO, CHECK FOR REGION 8\n         MVC   TMCREG,REGID7           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB7          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACC80 EQU   *\n         CLC   REG8,ACEEGRPN+4         REGION 8 OPERATOR?\n         BNE   TBLACCP0                NO, CHECK FOR PASCAL\n         MVC   TMCREG,REGID8           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTAB8          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nTBLACCP0 EQU   *\n         CLC   REGP,ACEEGRPN+4         PASCAL OPERATOR?\n         BNE   BADUSER                 NO, USER IS NOT AUTHORIZED\n         MVC   TMCREG,REGIDP           SET REIONAL IDENTIFIER\n         MVC   TMCTAB,TMCTABP          SET REIONAL TABLE NAME\n         B     VPUT                    YES, APPROPRIATE VARS IN POOL\nMVCNAME  MVC   TMCNAM(0),0(R3)         GET USER NAME FOR TABLE\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY PANEL TMCDIS00\n***********************************************************************\nDISPLAY  EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n         MVC   SELCTFLG,YES            'DISPLAY SELECTION PANEL'\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('DISPLAY','TMCDIS00')\n         B     DISP10(R15)             CHECK RETURN CODE\nDISP10   EQU   *\n         B     VPUT                    RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR DISPLAY)\n         B     FINISH                  RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (NOT VALID FOR DISPLAY)\n         B     ERR16                   RC = 16 (NOT VALID FOR DISPLAY)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE TMCUSR, TMCNAM, TMCGRP, TMCTAB & TMCREG\n***********************************************************************\nVPUT     EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('VPUT',NAMELST6,'ASIS')\n         B     VPUT10(R15)             CHECK RETURN CODE\nVPUT10   EQU   *\n         B     SELECT                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR VPUT)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (NOT VALID FOR VPUT)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SELECT PROGRAM TMCTAB1\n***********************************************************************\nSELECT   EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('SELECT',FULL12,PGMNAME)    DISPLAY REGIONAL TBL\n         B     SELCT10(R15)            CHECK RETURN CODE\nSELCT10  EQU   *\n         B     SELCT20                 RC = 00 (CONTINUE)\n         B     SELCT20                 RC = 04 (CONTINUE)\n         B     ERR08                   RC = 08 (NOT VALID FOR SELECT)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\nSELCT20  EQU   *\n         CLC   SELCTFLG,YES            RE-DISPLAY SELECTION PANEL?\n         BE    DISPLAY                 YES\n         B     FINISH                  NO\n         TITLE 'TMCTAB0 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nERR04    EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR08    EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR12    EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR16    EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR20    EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   TMCMSGS,TMCERR0S        SET SHORT ERROR MESSAGE\n         MVC   TMCMSGL,TMCERR0L        SET LONG ERROR MESSAGE\n         MVC   TMCMSGL+21(8),ISPFSERV  SET ISPF DIALOG SERVICE\n         MVC   TMCMSGL+47(2),ISPFRC    SET DIALOG SERVICE RETURN CODE\n         ISPCALL ('DISPLAY','TMCDIS01',TMCMSG)    DISPLAY ERROR MSG\n         B     FINISH                  DONE\nBADUSER  EQU   *\n         MVC   TMCMSGS,TMCERR1S        SET SHORT ERROR MESSAGE\n         MVC   TMCMSGL,TMCERR1L        SET LONG ERROR MESSAGE\n         MVC   TMCMSGS+5(8),TMCUSR     ADD USERID\n         MVC   TMCMSGL+5(8),TMCGRP     ADD USERID\n         ISPCALL ('DISPLAY','TMCDIS01',TMCMSG)    DISPLAY ERROR MSG\n         TITLE 'TMCTAB0 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'TMCTAB0 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'TMCTAB0 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   FULLWORD CONSTANT VALUE '00'\nFULL12   DC    F'12'                   FULLWORD CONSTANT VALUE '12'\nFULL15   DC    F'15'                   FULLWORD CONSTANT VALUE '15'\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nTMCMSG   DC    CL8'TMC000'             'GENERIC' MESSAGE ID\nPANELNAM DC    C'PANEL(TMCDIS00)'      SELECTION PANEL\nPGMNAME  DC    C'PGM(TMCTAB1)'         SELECTION PANEL\nUNKNOWN  DC    CL20'UNKNOWN'           THIS USER HAS NO NAME\nJCLGRP   DC    CL6'JCLGRP'             GROUP NAME OF JCLGRP\nNO       DC    CL3'NO '                'DO NOT DISPLAY SELECTION PANEL'\nYES      DC    CL3'YES'                'DISPLAY SELECTION PANEL'\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nSELID    DC    CL8'SELECT'             ISPF DIALOG SERVICE (SELECT)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nREGID$   DC    CL5'ADMIN'              ADMIN\nREG1     DC    CL1'1'                  REGION 1\nREG2     DC    CL1'2'                  REGION 2\nREG3     DC    CL1'3'                  REGION 3\nREG4     DC    CL1'4'                  REGION 4\nREG5     DC    CL1'5'                  REGION 5\nREG6     DC    CL1'6'                  REGION 6\nREG7     DC    CL1'7'                  REGION 7\nREG8     DC    CL1'8'                  REGION 8\nREGP     DC    CL1'P'                  PASCAL\nREGID1   DC    CL5'REG-1'              REGION 1\nREGID2   DC    CL5'REG-2'              REGION 2\nREGID3   DC    CL5'REG-3'              REGION 3\nREGID4   DC    CL5'REG-4'              REGION 4\nREGID5   DC    CL5'REG-5'              REGION 5\nREGID6   DC    CL5'REG-6'              REGION 6\nREGID7   DC    CL5'REG-7'              REGION 7\nREGID8   DC    CL5'REG-8'              REGION 8\nREGIDP   DC    CL5'REG-P'              REGION 8\nTMCTAB$  DC    CL8'TMCTAB$'            ADMIN TABLE NAME\nTMCTAB1  DC    CL8'TMCTAB1'            REGION 1 TABLE NAME\nTMCTAB2  DC    CL8'TMCTAB2'            REGION 2 TABLE NAME\nTMCTAB3  DC    CL8'TMCTAB3'            REGION 3 TABLE NAME\nTMCTAB4  DC    CL8'TMCTAB4'            REGION 4 TABLE NAME\nTMCTAB5  DC    CL8'TMCTAB5'            REGION 5 TABLE NAME\nTMCTAB6  DC    CL8'TMCTAB6'            REGION 6 TABLE NAME\nTMCTAB7  DC    CL8'TMCTAB7'            REGION 7 TABLE NAME\nTMCTAB8  DC    CL8'TMCTAB8'            REGION 8 TABLE NAME\nTMCTABP  DC    CL8'TMCTABP'            PASCAL TABLE NAME\nSPACES   DC    CL80' '                 SPACES\nTMCERR0S DC    CL24'TMCTAB0 program error.  '\nTMCERR0L DC    CL78'ISPF dialog service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\n*                                      ERROR MESSAGE TEXT 0\nTMCERR1S DC    CL24'User 12345678 invalid.  '\nTMCERR1L DC    CL78'User 12345678 not permitted to use this service.   +\n                                          '\n*                                      ERROR MESSAGE TEXT 1\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'TMCTAB'\n         DC    CL8'TMCUSR'\n         DC    CL8'TMCGRP'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCNAM'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 5)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCREG'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCMSGS'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCMSGL'\nNAMELST6 DS    0F                      NAMES OF VARIABLES IN POOL\n         DC    F'05'\n         DC    F'00'\n         DC    CL8'TMCTAB'\n         DC    CL8'TMCREG'\n         DC    CL8'TMCUSR'\n         DC    CL8'TMCGRP'\n         DC    CL8'TMCNAM'\nNAMELST7 DS    0F                      NAMES OF VARIABLES IN POOL\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'TMCUSR'\n         DC    CL8'TMCGRP'\n         DC    CL8'TMCNAM'\n         TITLE 'TMCTAB0 - TEXT UNIT DEFINITIONS'\n***********************************************************************\n*              TMCTLIB DATA SET ALLOCATION TEXT UNITS\n*     TMCTLIB  DD  DSN=TSO.TMC.TMCTLIB,DISP=SHR\n***********************************************************************\nTMCDD    DC    AL2(DALDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    CL8'TMCTLIB '\nTMCDSN   DC    AL2(DALDSNAM)           DSNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'000F'\n         DC    CL15'TSO.TMC.TMCTLIB'\nTMCSTAT  DC    AL2(DALSTATS)           DATA SET STATUS SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'08'\n         TITLE 'TMCTAB0 - DSECTS'\n***********************************************************************\n*        DSECT FOR COMMUNICATIONS VECTOR TABLE\n***********************************************************************\n         CVT DSECT=YES\n         EJECT\nTMCTAB0  CSECT\n***********************************************************************\n*        DSECT FOR ADDRESS SPACE CONTROL BLOCK\n***********************************************************************\n         IHAASCB DSECT=YES\n         EJECT\nTMCTAB0  CSECT\n***********************************************************************\n*        DSECT FOR ADDRESS SPACE EXTENSION BLOCK\n***********************************************************************\n         IHAASXB DSECT=YES\n         EJECT\nTMCTAB0  CSECT\n***********************************************************************\n*        DSECT FOR ACCESSOR ENVIRONMENT ELEMENT\n***********************************************************************\n         IHAACEE\n         EJECT\nTMCTAB0  CSECT\n         TITLE 'TMCTAB0 - SVC99 TEXT UNIT MNEMONICS'\n***********************************************************************\n*        IEFZB4D2 - SVC99 TEXT UNIT MNEMONICS\n***********************************************************************\n         IEFZB4D2\nTMCTAB0  CSECT\n         TITLE 'TMCTAB0 - LITERAL POOL'\n         LTORG\n         TITLE 'TMCTAB0 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nTMCTAB   DS    CL8                     REGIONAL TABLE NAME\nTMCUSR   DS    CL8                     USERID OF PERSON DELETING TAPE\nTMCGRP   DS    CL8                     GROUP OF PERSON DELETING TAPE\nTMCNAM   DS    CL20                    NAME OF PERSON DELETING TAPE\nTMCREG   DS    CL5                     REGIONAL IDENTIFIER\nTMCMSGS  DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nTMCMSGL  DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nISPFSERV DS    CL8                     ISPF DIALOG SERVICE\nISPFRC   DS    CL2                     ISPF DIALOG SERVICE RETURN CODE\nSELCTFLG DS    CL3                     DISPLAY SELECTION PANEL\nNONRBEND EQU   *\n***********************************************************************\n*        IEFZB4D0 - SVC99 SYMBOLIC NAMES\n***********************************************************************\n         IEFZB4D0\nRBLEN    EQU   (S99RBEND-S99RB)        LENGTH OF RB\nNONRBLEN EQU   (NONRBEND-WORKAREA)     LENGTH OF NON-RB DATA\nS99RBTOT EQU   (RBLEN+25*4)            LEN OF RB + 25 TEXT UNIT ADDRS\nWORKLEN  EQU   (S99RBTOT+NONRBLEN)     TOTAL LENGTH OF DYNAMIC WORKAREA\n         END   TMCTAB0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TMCTAB1": {"ttr": 17413, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\xf7\\x02\\xf7\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 759, "newlines": 759, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TMCTAB1 - DISPLAY AND UPDATE TMC TABLE'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = TMCTAB1                                   *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                03/27/86  WRITTEN.      JWC.                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'TMCTAB1 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'TMCTAB1 - INITIALIZATION SECTION'\nTMCTAB1 CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,TMCTAB1_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING TMCTAB1,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVC   TMCMSGS,SPACES          INITIALIZE TMCMSGS\n         MVC   TMCMSGL,SPACES          INITIALIZE TMCMSGL\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,TMCDSN,'CHAR',44)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,TMCVOL,'CHAR',6)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,TMCUSR,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,TMCNAM,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,TMCDEL,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,ZTDSELS,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,TMCREG,'CHAR',5)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,TMCMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,TMCMSGL,'CHAR',78)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFA                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFA    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTA,SAVTOPB,'FIXED',4)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VGET                    RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR VDEF)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (NOT VALID FOR VDEF)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - GET TMCGRP, TMCNAM, TMCREG, TMCTAB & TMCUSR\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE VARIABLES FROM TABLE\n         ISPCALL ('VGET',NAMELSTC,'ASIS')\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     VGET20                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR VGET)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\nVGET20   EQU   *\n         MVC   SAVNAM,TMCNAM           SAVE TMCNAM FOR FUTURE\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN TMCTAB TABLE\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN',TMCTAB,'WRITE','TMCTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBDISPL1                RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBOPEN)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'TMCTAB1 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TABLE\n***********************************************************************\nTBDISPL1 EQU   *\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY A TABLE\n         ISPCALL ('TBDISPL',TMCTAB,'TMCDIS01')\n         B     TBDIS110(R15)           CHECK RETURN CODE\nTBDIS110 EQU   *\n         B     CHKZCMD                 RC = 00 (CONTINUE)\n         B     CHKZCMD                 RC = 04 (CONTINUE)\n         B     CHKSELS1                RC = 08 (CONTINUE)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBDISPL)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CHECK FOR 'LOCATE' PRIMARY COMMAND\n***********************************************************************\nCHKZCMD  EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         MVC   SAVLOC,SPACES           INITIALIZE SAVLOC\n         LA    R2,ZCMD                 R2 - INDEX THROUGH ZCMD\n         LA    R3,44                   R3 - MAXIMUM LENGTH OF ZCMD\n         LA    R5,SAVLOC               R5 - INDEX THROUGH SAVLOC\nCHKZCMD1 EQU   *\n         LA    R4,2                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(2,R2),LOCATE1         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,3                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(3,R2),LOCATE2         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,4                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(4,R2),LOCATE3         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,5                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(5,R2),LOCATE4         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,6                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(6,R2),LOCATE5         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,7                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(7,R2),LOCATE6         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         CLC   0(1,R2),SPACES          ANY OTHER CHARACTER ENTERED?\n         BNE   CHKLCMD                 YES, UNSUPPORTED COMMAND\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD1             CONTINUE\n         B     CHKLCMD                 CHECK FOR LINE COMMAND\nCHKZCMD2 EQU   *\n         AR    R2,R4                   POINT R2 PAST LOCATE COMMAND\nCHKZCMD3 EQU   *\n         CLC   0(1,R2),SPACES          START OF LOCATE DATA?\n         BNE   CHKZCMD4                YES, EXTRACT DATA AND SAVE\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD3             CONTINUE\n         B     CHKLCMD                 NOTHING TO LOCATE\nCHKZCMD4 EQU   *\n         CLC   0(1,R2),SPACES          END OF LOCATE DATA?\n         BE    CHKZCMD5                YES, ADD ASTERICK ON END\n         MVC   0(1,R5),0(R2)           EXTRACT LOCATE DATA\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R3,CHKZCMD4             CONTINUE\n         B     CHKLCMD                 CHECK LINE COMMANDS\nCHKZCMD5 EQU   *\n         MVC   0(1,R5),ASTERICK        ADD ASTERICK ON END\n         B     CHKLCMD                 CHECK LINE COMMANDS\n***********************************************************************\n*  PROCESSING SECTION - END OR RETURN ENTERED. CHECK FOR SELECTED ROWS\n***********************************************************************\nCHKSELS1 EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         CLC   ZTDSELS,CHAR00          ANY ROWS SELECTED?\n         BE    TBCLOSE                 NO, SAVE TABLE\n         B     CHKLCMD                 YES, CHECK LINE COMMAND(S)\nCHKSELS2 EQU   *\n         CLC   ZTDSELS,CHAR01          SELECTED ROWS PROCESSED?\n         BE    TBCLOSE                 YES, SAVE TABLE\n***********************************************************************\n*  PROCESSING SECTION - CHECK FOR LINE COMMAND(S)\n***********************************************************************\nCHKLCMD  EQU   *\n         CLC   ZTDSELS,CHAR00          ANY LINES SELECTED?\n         BE    CHKLOC                  NO, PROCESS LOCATE COMMAND\n         CLC   ZTDSELS,CHAR01          ONE LINE SELECTED?\n         BNE   CHKLCMD2                NO, PROCESS MULTIPLE LINES\n         CLC   LCMD,SCRATCH            SCRATCH PROCESS SELECTED?\n         BNE   CHKLCMD1                NO, CHECK FOR RESTORE COMMAND\n         BAL   R10,TBPUT1              YES, ADD EXTENSION VARIABLES\n         B     CHKLOC                  PROCESS LOCATE COMMAND\nCHKLCMD1 EQU   *\n         CLC   LCMD,RESTORE            RESTORE PROCESS SELECTED?\n         BNE   CHKLOC                  NO, PROCESS LOCATE COMMAND\n         BAL   R10,TBPUT2              YES, UPDATE WITH NO EXTENSION\n         B     CHKLOC                  PROCESS LOCATE COMMAND\nCHKLCMD2 EQU   *\n         CLC   LCMD,SCRATCH            SCRATCH PROCESS SELECTED?\n         BNE   CHKLCMD3                NO, CHECK FOR RESTORE COMMAND\n         BAL   R10,TBPUT1              YES, ADD EXTENSION VARIABLES\n         B     TBDISPL2                DISPLAY TABLE TO PROCESS\nCHKLCMD3 EQU   *\n         CLC   LCMD,RESTORE            RESTORE PROCESS SELECTED?\n         BNE   TBDISPL2                NO, DISPLAY TABLE TO PROCESS\n         BAL   R10,TBPUT2              YES, UPDATE WITH NO EXTENSION\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TABLE  TO PROCESS LINE COMMAND\n***********************************************************************\nTBDISPL2 EQU   *\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL',TMCTAB)\n         B     TBDIS210(R15)           CHECK RETURN CODE\nTBDIS210 EQU   *\n         B     CHKLCMD                 RC = 00 (CONTINUE)\n         B     CHKLCMD                 RC = 04 (CONTINUE)\n         B     CHKSELS2                RC = 08 (CONTINUE)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBDISPL)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - PROCESS LOCATE DATA\n***********************************************************************\nCHKLOC   EQU   *\n         CLC   SAVLOC,SPACES           ANYTHING TO LOCATE?\n         BNE   TBTOP2                  YES, ATTEMPT TO LOCATE\n         BAL   R11,TBTOP1              NO, RE-POSITION CRP\n         B     TBDISPL1                RE-DISPLAY TABLE\n***********************************************************************\n*  PROCESSING SECTION - SET CRP TO TOP OF TABLE\n***********************************************************************\nTBTOP2   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP',TMCTAB)\n         B     TBTOP210(R15)           CHECK RETURN CODE\nTBTOP210 EQU   *\n         B     TBVCLEAR                RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBTOP)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBTOP)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBTOP)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLEAR 'TMCTAB' VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR',TMCTAB)\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBSARG                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - DEFINE SCAN ARGUMENTS FOR 'TMCTAB'\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n         MVC   TMCDSN,SAVLOC           SET TMCDSN WITH SELECTION VALUE\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG',TMCTAB)\n         B     TBARG10(R15)            CHECK RETURN CODE\nTBARG10  EQU   *\n         B     TBSCAN                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBSARG)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBSARG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION II - SEARCH 'TMCTAB' TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH A TABLE\n         ISPCALL ('TBSCAN',TMCTAB)\n         B     TBSCN10(R15)            CHECK RETURN CODE\nTBSCN10  EQU   *\n         B     TBDISPL1                RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBSCAN)\n         B     SCNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE 'TMCTAB' TABLE\n***********************************************************************\nTBCLOSE  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE A TABLE\n         ISPCALL ('TBCLOSE',TMCTAB,'REPLCOPY',' ',FULL10,'TMCTLIB')\n         B     TBCLO10(R15)\nTBCLO10  EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBCLOSE)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBCLOSE)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'TMCTAB1 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nERR04    EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR08    EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR12    EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR16    EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR20    EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\nMSGDISP1 EQU   *\n         MVC   TMCMSGS,TMCERR0S        SET SHORT ERROR MESSAGE\n         MVC   TMCMSGL,TMCERR0L        SET LONG ERROR MESSAGE\n         MVC   TMCMSGL+21(8),ISPFSERV  SET ISPF DIALOG SERVICE\n         MVC   TMCMSGL+47(2),ISPFRC    SET DIALOG SERVICE RETURN CODE\n         ISPCALL ('DISPLAY','TMCDIS01',TMCMSG)    DISPLAY ERROR MSG\n         B     FINISH                  DONE\nSCNERR08 EQU   *\n         MVC   TMCMSGS,SPACES          INITIALIZE TMCMSGS\n         MVC   TMCMSGL,SPACES          INITIALIZE TMCMSGL\n         MVC   TMCMSGL(1),QUOTE        MOVE LEADING QUOTE TO MESSAGE\n         MVC   TMCMSGL+1(44),SAVLOC    MOVE IN LOCATION DATA\n         LA    R2,TMCMSGL              R2 - INDEX THROUGH SAVLOC\n         LA    R3,45                   R3 - MAXIMUM LENGTH\nSCNERR18 EQU   *\n         CLC   0(1,R2),ASTERICK        END OF LOCATION DATA\n         BE    SCNERR28                YES, ADD TRAILING QUOTE, ETC.\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,SCNERR18             CONTINUE\nSCNERR28 EQU   *\n         MVC   TMCMSGS,TMCERR1S        ISPF SHORT MESSAGE\n         MVC   0(21,R2),TMCERR1L       ADD TRAILING QUOTE, ETC.\n         BAL   R11,TBTOP1              RE-POSITION CRP\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n         ISPCALL ('TBDISPL',TMCTAB,'TMCDIS01',TMCMSG)\n         B     SCNERR38(R15)           CHECK RETURN CODE\nSCNERR38 EQU   *\n         B     CHKZCMD                 RC = 00 (CONTINUE)\n         B     CHKZCMD                 RC = 04 (CONTINUE)\n         B     CHKSELS1                RC = 08 (CONTINUE)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBDISPL)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'TMCTAB1 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n***********************************************************************\n*  PROCESSING SECTION - ADD EXTENSION VARIABLS TO TABLE\n***********************************************************************\nTBPUT1   EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n         MVC   TMCNAM,SAVNAM           RESTORE TMCNAM\n         MVC   TMCDEL,TMCDEL1          MOVE STATIC TO DYNAMIC\n*                                      UPDATE A ROW IN A TABLE\n         ISPCALL ('TBPUT',TMCTAB,NAMELSTB)\n         B     TBPUT10(R15)            CHECK RETURN CODE\n***********************************************************************\n*  PROCESSING SECTION - REMOVE EXTENSION VARIABLS FROM TABLE\n***********************************************************************\nTBPUT2   EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE A ROW IN A TABLE\n         ISPCALL ('TBPUT',TMCTAB)\n         B     TBPUT10(R15)            CHECK RETURN CODE\nTBPUT10  EQU   *\n         BR    R10                     RC = 00 (CONTINUE)\n         DS    0F                      SET TO FULLWORD BOUNDARY\n         B     ERR04                   RC = 04 (NO VALID FOR TBPUT)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SET CRP TO TOP OF TABLE\n***********************************************************************\nTBTOP1   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP',TMCTAB)\n         B     TBTOP110(R15)           CHECK RETURN CODE\nTBTOP110 EQU   *\n         B     TBSKIP                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBTOP)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBTOP)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBTOP)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RESET ROWID    OF TABLE\n***********************************************************************\nTBSKIP   EQU   *\n         MVC   ISPFSERV,SKPID          SET ISPF DIALOG SERVICE\n*                                      RESET ROWID\n         ISPCALL ('TBSKIP',TMCTAB,SAVTOPB)\n         B     TBSKP10(R15)            CHECK RETURN CODE\nTBSKP10  EQU   *\n         BR    R11                     RC = 00 (CONTINUE)\n         DS    0F                      FORCE FULLWORD BOUNDARY\n         B     ERR04                   RC = 04 (NOT VALID FOR TBSKIP)\n         B     ERR08                   RC = 08 (DISPLAY PANEL / MSG)\n         B     ERR12                   RC = 12 (DISPLAY PANEL / MSG)\n         B     ERR16                   RC = 16 (DISPLAY PANEL / MSG)\n         B     ERR20                   RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'TMCTAB1 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'TMCTAB1 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL10   DC    F'10'                   FULLWORD CONSTANT VALUE '10'\nCHAR00   DC    CL4'0000'               CHARACTER CONSTANT VALUE '0000'\nCHAR01   DC    CL4'0001'               CHARACTER CONSTANT VALUE '0001'\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nTDSID    DC    CL8'TBDISPL'            ISPF DIALOG SERVICE (TBDISPL)\nPUTID    DC    CL8'TBPUT'              ISPF DIALOG SERVICE (TBPUT)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nSKPID    DC    CL8'TBSKIP'             ISPF DIALOG SERVICE (TBSKIP)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nTMCMSG   DC    CL8'TMC000'             'GENERIC' MESSAGE ID\nLOCATE1  DC    CL2'L '                 LOCATE COMMAND IDENTIFIER\nLOCATE2  DC    CL3'LO '                LOCATE COMMAND IDENTIFIER\nLOCATE3  DC    CL4'LOC '               LOCATE COMMAND IDENTIFIER\nLOCATE4  DC    CL5'LOCA '              LOCATE COMMAND IDENTIFIER\nLOCATE5  DC    CL6'LOCAT '             LOCATE COMMAND IDENTIFIER\nLOCATE6  DC    CL7'LOCATE '            LOCATE COMMAND IDENTIFIER\nTMCDEL1  DC    CL1'X'                  FLAG ON DELETED TAPE RECORDS\nRESTORE  DC    CL1'R'                  REMOVE FROM SCRATCH PROCESSING\nSCRATCH  DC    CL1'S'                  ADD TO SCRATCH PROCESSING\nASTERICK DC    CL1'*'                  ASTERICK\nQUOTE    DC    CL1''''                 QUOTE\nSPACES   DC    CL80' '                 SPACES\nTMCERR0S DC    CL24'TMCTAB1 program error.  '\nTMCERR0L DC    CL78'ISPF dialog service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\n*                                      ERROR MESSAGE TEXT 0\nTMCERR1S DC    CL24'Not found in table.'\nTMCERR1L DC    CL21''' not found in table.'\n*                                      ERROR MESSAGE TEXT 1\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 44)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'TMCDSN'\n         DC    CL8'ZCMD'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 6)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'TMCVOL'\n         DC    CL8'ZTDTOP'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'TMCUSR'\n         DC    CL8'TMCGRP'\n         DC    CL8'TMCTAB'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCNAM'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'TMCDEL'\n         DC    CL8'LCMD'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTDSELS'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 5)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCREG'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCMSGS'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCMSGL'\nNAMELSTA DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SAVTOPB'\nNAMELSTB DS    0F                      EXTENSION VARIABLES\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'TMCUSR'\n         DC    CL8'TMCGRP'\n         DC    CL8'TMCNAM'\n         DC    CL8'TMCDEL'\nNAMELSTC DS    0F                      VARIABLES IN VGET LIST\n         DC    F'05'\n         DC    F'00'\n         DC    CL8'TMCGRP'\n         DC    CL8'TMCNAM'\n         DC    CL8'TMCREG'\n         DC    CL8'TMCTAB'\n         DC    CL8'TMCUSR'\n         TITLE 'TMCTAB1 - LITERAL POOL'\n         LTORG\n         TITLE 'TMCTAB1 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nTMCDSN   DS    CL44                    DATA SET NAME FROM TMC\nZCMD     DS    CL44                    PRIMARY COMMAND\nTMCVOL   DS    CL6                     VOLSER FROM TMC\nZTDTOP   DS    CL6                     ZTDTOP\nTMCUSR   DS    CL8                     USERID OF PERSON DELETING TAPE\nTMCGRP   DS    CL8                     GROUP OF PERSON DELETING TAPE\nTMCTAB   DS    CL8                     REGIONAL TABLE NAME\nTMCNAM   DS    CL20                    NAME OF PERSON DELETING TAPE\nTMCDEL   DS    CL1                     FLAG ON DELETED TAPE RECORDS\nLCMD     DS    CL1                     LINE COMMAND\nZTDSELS  DS    CL4                     ZTDSELS\nTMCREG   DS    CL5                     REGIONAL IDENTIFIER\nTMCMSGS  DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nTMCMSGL  DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nISPFSERV DS    CL8                     ISPF DIALOG SERVICE\nISPFRC   DS    CL2                     ISPF DIALOG SERVICE RETURN CODE\nSAVTOPB  DS    F                       SAVE ZTDTOP (BINARY)\nSAVTOPD  DS    D                       SAVE ZTDTOP (PACKED DECIMAL)\nSAVLOC   DS    CL44                    LOCATE COMMAND DATA SAVE\nSAVNAM   DS    CL20                    SAVE NAME AFTER VGET (FOR TBPUT)\nSAVDSN   DS    CL44                    SAVE DSN PRIOR TO LOCATE\nSAVVOL   DS    CL6                     SAVE VOL PRIOR TO LOCATE\nWORKLEN  EQU   *-WORKAREA\n         END   TMCTAB1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TMCTAB2": {"ttr": 17671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x026\\x026\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 566, "newlines": 566, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TMCTAB2 - CREATE IDCAMS SYSIN TO DELETE SELECTED TAPE D+\n               ATA SETS'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = TMCTAB2                                   *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                03/31/86  WRITTEN.      JWC.                         *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'TMCTAB2 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'TMCTAB2 - INITIALIZATION SECTION'\nTMCTAB2 CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,TMCTAB2_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING TMCTAB2,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         LA    R4,DATA                 SET UP\n         LA    R5,DATALEN                  REGISTERS\n         LA    R6,INITDATA                     FOR\n         LA    R7,DATALEN                          LONG MOVE\n         MVCL  R4,R6                   INITIALIZE PART GETMAINED AREA\n         MVC   TMCMSG,SPACES           INITIALIZE ERROR MESSAGE\n         MVC   IDCAMR1_,IDCAMR1        MOVE STATIC TO DYNAMIC IDCAMR1_\n         MVC   IDCAMR2_,IDCAMR2        MOVE STATIC TO DYNAMIC IDCAMR2_\n         SR    R2,R2                   R2 - BRANCH TABLE INDEX\n         LA    R3,4                    R3 - LENGTH OF FULLWORD\n         LA    R4,TBOPEN               R4 - 1ST PROCESSING OPTION\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n         MVC   REGID,NONE              SET REIONAL IDENTIFIER\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,TMCDSN,'CHAR',44)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,TMCGRP,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,TMCNAM,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,TMCDEL,'CHAR',1)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     OPEN                    RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR VDEF)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (NOT VALID FOR VDEF)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN '&&IDCAM'\n***********************************************************************\nOPEN     EQU   *\n         MVC   ISPFSERV,OPNID1         SET ISPF DIALOG SERVICE\n         MVC   REGID,NONE              SET REIONAL IDENTIFIER\n         OPEN  (OUTPUT1,OUTPUT),MF=(E,OPENLST_)\n         B     OPEN10(R15)             CHECK RETURN CODE\nOPEN10   EQU   *\n         B     INITVAL                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (PRINT ERROR MESSAGE)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n         TITLE 'TMCTAB2 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - INITIALIZE TABLE VARIABLES\n***********************************************************************\nINITVAL  EQU   *\n         MVC   TMCDSN,SPACES           INITIALIZE TMCDSN\n         MVC   TMCVOL,SPACES           INITIALIZE TMCVOL\n         MVC   TMCGRP,SPACES           INITIALIZE TMCGRP\n         MVC   TMCNAM,SPACES           INITIALIZE TMCNAM\n         MVC   TMCUSR,SPACES           INITIALIZE TMCUSR\n         MVC   TMCDEL,TMCDEL1          INITIALIZE TMCDEL\n         MVC   IDCAMR1_+9(44),SPACES   INITIALIZE DSN OF IDCAMS REC 1\n         MVC   IDCAMR2_+10(8),SPACES       USERID OF IDCAMS REC 2\n         MVC   IDCAMR2_+20(8),SPACES       GROUP NAME OF IDCAMS REC 2\n         MVC   IDCAMR2_+30(20),SPACES      USER NAME OF IDCAMS REC 2\n         B     INIT00(R2)              R2 - BRANCH TABLE INDEX\nINIT00   EQU   *\n         B     INIT$0                  INITIALIZE VARS FOR ADMIN TABLE\n         B     INIT10                  INITIALIZE VARS FOR REG-1 TABLE\n         B     INIT20                  INITIALIZE VARS FOR REG-2 TABLE\n         B     INIT30                  INITIALIZE VARS FOR REG-3 TABLE\n         B     INIT40                  INITIALIZE VARS FOR REG-4 TABLE\n         B     INIT50                  INITIALIZE VARS FOR REG-5 TABLE\n         B     INIT60                  INITIALIZE VARS FOR REG-6 TABLE\n         B     INIT70                  INITIALIZE VARS FOR REG-7 TABLE\n         B     INIT80                  INITIALIZE VARS FOR REG-8 TABLE\n         B     INITP0                  INITIALIZE VARS FOR REG-P TABLE\nINIT$0   EQU   *\n         MVC   TMCTAB,REGTAB$          ADMIN TABLE NAME\n         MVC   REGID,REGID$            ADMIN REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT10   EQU   *\n         MVC   TMCTAB,REGTAB1          REGION 1 TABLE NAME\n         MVC   REGID,REGID1            REGION 1 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT20   EQU   *\n         MVC   TMCTAB,REGTAB2          REGION 2 TABLE NAME\n         MVC   REGID,REGID2            REGION 2 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT30   EQU   *\n         MVC   TMCTAB,REGTAB3          REGION 3 TABLE NAME\n         MVC   REGID,REGID3            REGION 3 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT40   EQU   *\n         MVC   TMCTAB,REGTAB4          REGION 4 TABLE NAME\n         MVC   REGID,REGID4            REGION 4 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT50   EQU   *\n         MVC   TMCTAB,REGTAB5          REGION 5 TABLE NAME\n         MVC   REGID,REGID5            REGION 5 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT60   EQU   *\n         MVC   TMCTAB,REGTAB6          REGION 6 TABLE NAME\n         MVC   REGID,REGID6            REGION 6 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT70   EQU   *\n         MVC   TMCTAB,REGTAB7          REGION 7 TABLE NAME\n         MVC   REGID,REGID7            REGION 7 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINIT80   EQU   *\n         MVC   TMCTAB,REGTAB8          REGION 8 TABLE NAME\n         MVC   REGID,REGID8            REGION 8 REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\nINITP0   EQU   *\n         MVC   TMCTAB,REGTABP          REGION P TABLE NAME\n         MVC   REGID,REGIDP            REGION P REGIONAL IDENTIFIER\n         BR    R4                      CONTINUE\n***********************************************************************\n*  PROCESSING SECTION - OPEN A TABLE\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID2         SET ISPF DIALOG SERVICE\n         LA    R4,TBVCLEAR             R4 - 2ND PROCESSING OPTION\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN',TMCTAB,'NOWRITE','TMCTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBVCLEAR                RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBOPEN)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - CLEAR TABLE VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR',TMCTAB)\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBSARG                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - DEFINE SCAN ARGUMENTS\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG',TMCTAB,NAMELST4)\n         B     TBARG10(R15)            CHECK RETURN CODE\nTBARG10  EQU   *\n         B     TBSCAN                  RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBSARG)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBSARG)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - SEARCH A TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH A TABLE\n         ISPCALL ('TBSCAN',TMCTAB)\n         B     TBSCN10(R15)            CHECK RETURN CODE\nTBSCN10  EQU   *\n         B     PUT                     RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBSCAN)\n         B     TBEND                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n***********************************************************************\n*  PROCESSING SECTION - PUT '&&IDCAM' RECORDS\n***********************************************************************\nPUT      EQU   *\n         MVC   IDCAMR1_+9(44),TMCDSN   MOVE DSN TO IDCAMS RECORD 1\n         PUT   OUTPUT1,IDCAMR1_        WRITE REC 1 TO OUTPUT FILE\n         MVC   IDCAMR2_+10(8),TMCUSR   MOVE USERID TO IDCAMS RECORD 2\n         MVC   IDCAMR2_+20(8),TMCGRP   MOVE GRPNAM TO IDCAMS RECORD 2\n         MVC   IDCAMR2_+30(20),TMCNAM  MOVE USRNAM TO IDCAMS RECORD 2\n         PUT   OUTPUT1,IDCAMR2_        WRITE REC 2 TO OUTPUT FILE\n         B     INITVAL                 RC = 00 (CONTINUE)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE A TABLE  WITHOUT SAVING\n***********************************************************************\nTBEND    EQU   *\n         MVC   ISPFSERV,ENDID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBEND',TMCTAB)\n         B     TBEND10(R15)            CHECK RETURN CODE\nTBEND10  EQU   *\n         B     TBEND20                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (NOT VALID FOR TBEND)\n         B     ERR08                   RC = 08 (NOT VALID FOR TBEND)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (NOT VALID FOR TBEND)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\nTBEND20  EQU   *\n         LA    R4,TBOPEN               R4 - 1ST PROCESSING OPTION\n         AR    R2,R3                   INCREMENT BRANCH INDEX\n         C     R2,FULL36               ALL REGIONAL TABLES PROCESSED?\n         BNH   INITVAL                 NO, CONTINUE\n         B     FINISH                  YES, WE'RE DONE\n         TITLE 'TMCTAB2 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nERR04    EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR08    EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR12    EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR16    EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR20    EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         OPEN  (OUTPUT2,OUTPUT),MF=(E,OPENLST_)  OPEN ERROR OUTPUT\n         MVC   TMCMSG,TMCERR           SET ERROR MESSAGE\n         MVC   TMCMSG+22(8),ISPFSERV   SET ISPF DIALOG SERVICE\n         MVC   TMCMSG+48(2),ISPFRC     SET DIALOG SERVICE RETURN CODE\n         MVC   TMCMSG+99(5),REGID      SET REGIONAL IDENTIFIER\n         PUT   OUTPUT2,TMCMSG          PRINT ERROR MESSAGE\n         CLOSE OUTPUT2,MF=(E,CLOSLST_)     CLOSE OUTPUT\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBEND',TMCTAB)\n         B     FINISH\n         TITLE 'TMCTAB2 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         CLOSE OUTPUT1,MF=(E,CLOSLST_)     CLOSE OUTPUT\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'TMCTAB2 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'TMCTAB2 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL36   DC    F'36'                   FULLWORD CONSTANT, VALUE '36'\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nENDID    DC    CL8'TBEND'              ISPF DIALOG SERVICE (TBEND)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nOPNID1   DC    CL8'OPEN'               DATA SET OPEN\nOPNID2   DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nNONE     DC    CL5'NONE '              NO REGION BEING PROCESSED\nREGID$   DC    CL5'ADMIN'              ADMIN\nREGID1   DC    CL5'REG-1'              REGION 1\nREGID2   DC    CL5'REG-2'              REGION 2\nREGID3   DC    CL5'REG-3'              REGION 3\nREGID4   DC    CL5'REG-4'              REGION 4\nREGID5   DC    CL5'REG-5'              REGION 5\nREGID6   DC    CL5'REG-6'              REGION 6\nREGID7   DC    CL5'REG-7'              REGION 7\nREGID8   DC    CL5'REG-8'              REGION 8\nREGIDP   DC    CL5'REG-P'              REGION P\nREGTAB$  DC    CL8'TMCTAB$'            ADMIN TABLE\nREGTAB1  DC    CL8'TMCTAB1'            REGION 1 TABLE\nREGTAB2  DC    CL8'TMCTAB2'            REGION 2 TABLE\nREGTAB3  DC    CL8'TMCTAB3'            REGION 3 TABLE\nREGTAB4  DC    CL8'TMCTAB4'            REGION 4 TABLE\nREGTAB5  DC    CL8'TMCTAB5'            REGION 5 TABLE\nREGTAB6  DC    CL8'TMCTAB6'            REGION 6 TABLE\nREGTAB7  DC    CL8'TMCTAB7'            REGION 7 TABLE\nREGTAB8  DC    CL8'TMCTAB8'            REGION 8 TABLE\nREGTABP  DC    CL8'TMCTABP'            REGION P TABLE\nTMCDEL1  DC    CL1'X'                  INDICATES DELETION OF TAPE DSN\nSPACES   DC    CL133' '                SPACES\nTMCERR   DC    CL133' ISPF DIALOG SERVICE, 12345678, ENDED WITH RC = 00+\n               . NOTIFY SYSTEMS PROGRAMMING. PROCESSING WAS FOR 12345.'\n*                                      ERROR MESSAGE TEXT\nIDCAMR1  DC    CL80'  DELETE 123456789.123456789.123456789.123456789.12+\n               34 NOSCRATCH -'         IDCAMS SYSIN RECORD 1 (STATIC)\nIDCAMR2  DC    CL80'      /*  12345678  12345678  123456789.123456789. +\n                */'                    IDCAMS SYSIN RECORD 2 (STATIC)\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 44)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCDSN'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'TMCGRP'\n         DC    CL8'TMCUSR'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCNAM'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'TMCDEL'\n         TITLE 'TMCTAB2 - LITERAL POOL'\n         LTORG\n***********************************************************************\n*        INITIALIZATION DATA FOR PART OF GETMAINED AREA\n***********************************************************************\nINITDATA DS    0F\nDCBOUT1  DCB   DDNAME=IDCAMOUT,DSORG=PS,MACRF=(PM)\nDCBOUT2  DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST  OPEN  (,),MF=L            STATIC LIST FORM OF OPEN MACRO\nCLOSLST  CLOSE (,),MF=L            STATIC LIST FORM OF CLOSE MACRO\nDATALEN  EQU   *-INITDATA\n         TITLE 'TMCTAB2 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nTMCDSN   DS    CL44                    DATA SET NAME FROM TMC\nTMCVOL   DS    CL6                     VOLSER FROM TMC\nTMCGRP   DS    CL8                     GROUP NAME\nTMCUSR   DS    CL8                     USERID\nTMCNAM   DS    CL20                    USER NAME\nTMCDEL   DS    CL1                     INDICATES DELETION OF TAPE DSN\nTMCTAB   DS    CL8                     NAME OF TABLE TO PROCESS\nTMCMSG   DS    CL133                   ERROR MESSAGE\nISPFSERV DS    CL8                     ISPF DIALOG SERVICE\nISPFRC   DS    CL2                     ISPF DIALOG SERVICE RETURN CODE\nREGID    DS    CL5                     REGIONAL IDENTIFIER\nIDCAMR1_ DS    CL80'  DELETE 123456789.123456789.123456789.123456789.12+\n               34 NOSCRATCH -'         IDCAMS SYSIN RECORD 1 (DYNAMIC)\nIDCAMR2_ DS    CL80'      /*  12345678  12345678  123456789.123456789. +\n                */'                    IDCAMS SYSIN RECORD 2 (DYNAMIC)\nDATA     DS    0F\nOUTPUT1  DCB   DDNAME=IDCAMOUT,DSORG=PS,MACRF=(PM)\nOUTPUT2  DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST_ OPEN  (,),MF=L            DYNAMIC LIST FORM OF OPEN MACRO\nCLOSLST_ CLOSE (,),MF=L            DYNAMIC LIST FORM OF CLOSE MACRO\nWORKLEN  EQU   *-WORKAREA\n         END   TMCTAB2\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TMCTAB3": {"ttr": 17927, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xae\\x00\\xae\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 174, "newlines": 174, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TMCTAB3 - EXTRACT ACTIVE DATA SETS FROM TMC'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = TMCTAB3                                   *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                04/09/86  WRITTEN.                              JWC. *\n*                                                                     *\n*                10/27/86  FIX INCORRECT HANDLING OF DSNB'S.     JWC. *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'TMCTAB3 - INITIALIZATION SECTION'\nTMCTAB3 CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,TMCTAB3_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING TMCTAB3,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         LA    R4,DATA                 SET UP\n         LA    R5,DATALEN                  REGISTERS\n         LA    R6,INITDATA                     FOR\n         LA    R7,DATALEN                          LONG MOVE\n         MVCL  R4,R6                   INITIALIZE PART GETMAINED AREA\n         MVC   TMCMSG,SPACES           INITIALIZE ERROR MESSAGE\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN 'UCC.ONE.TMC', '&&TMOUT'\n***********************************************************************\nOPEN     EQU   *\n         OPEN  (INPUT,INPUT),MF=(E,OPENLST_)     OPEN TMCIN\n         LTR   R15,R15                 RETURN CODE ZERO?\n         BZ    OPEN10                  YES, OPEN TMCOUT\n         B     OPEN20(R15)             NO, PROCESS ERROR\nOPEN10   EQU   *\n         OPEN  (OUTPUT1,OUTPUT),MF=(E,OPENLST_)  OPEN TMCOUT\n         B     OPEN20(R15)             CHECK RETURN CODE\nOPEN20   EQU   *\n         B     PROCESS                 RC = 00 (CONTINUE)\n         B     ERR04                   RC = 04 (PRINT ERROR MESSAGE)\n         B     ERR08                   RC = 08 (PRINT ERROR MESSAGE)\n         B     ERR12                   RC = 12 (PRINT ERROR MESSAGE)\n         B     ERR16                   RC = 16 (PRINT ERROR MESSAGE)\n         B     ERR20                   RC = 20 (PRINT ERROR MESSAGE)\n         TITLE 'TMCTAB3 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - GET RECORD FROM TMC, EXTRACT INFO & WRITE\n***********************************************************************\nPROCESS  EQU   *\n         GET   INPUT                   GET RECORD FROM TMC\n         LR    R2,R1                   SAVE R1\n         TM    0(R2),DSNB              DATA SET NAME BLOCK?\n         BO    PROC10                  YES, PROCESS DSNB\n         TM    131(R2),SCRATCH         TAPE LISTED ON SCRATCH LIST?\n         BO    PROCESS                 YES, GET ANOTHER RECORD\n         TM    131(R2),DELETED         VOLUME DELETED FROM LIBRARY?\n         BO    PROCESS                 YES, GET ANOTHER RECORD\n         MVC   TMCDSN,0(R2)            EXTRACT DATA SET NAME FROM TMC\n         MVC   TMCVOL,71(R2)           EXTRACT VOLUME SERIAL FROM TMC\n         B     PROC30                  WRITE RECORD TO TMCOUT\nPROC10   EQU   *\n         MVC   TMCDSN,9(R2)            EXTRACT DATA SET NAME FROM DSNB\n         MVC   TMCVOL,1(R2)            EXTRACT VOLUME SERIAL FROM DSNB\n         CLC   FULL00,TMCDSN           DATA SET NAME PRESENT?\n         BE    PROC20                  NO, GET ANOTHER RECORD\n         PUT   OUTPUT1,TMCREC          WRITE RECORD TO TMCOUT\nPROC20   EQU   *\n         MVC   TMCDSN,109(R2)          EXTRACT DATA SET NAME FROM DSNB\n         MVC   TMCVOL,101(R2)          EXTRACT VOLUME SERIAL FROM DSNB\n         CLC   FULL00,TMCDSN           DATA SET NAME PRESENT?\n         BE    PROCESS                 NO, GET ANOTHER RECORD\nPROC30   EQU   *\n         PUT   OUTPUT1,TMCREC          WRITE RECORD TO TMCOUT\n         B     PROCESS                 INITIALIZE TMCDSN & TMCVOL\n         TITLE 'TMCTAB3 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nERR04    EQU   *\n         MVC   RETNCOD,FOUR            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR08    EQU   *\n         MVC   RETNCOD,EIGHT           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR12    EQU   *\n         MVC   RETNCOD,TWELVE          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR16    EQU   *\n         MVC   RETNCOD,SIXTEEN         SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nERR20    EQU   *\n         MVC   RETNCOD,TWENTY          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         OPEN  (OUTPUT2,OUTPUT),MF=(E,OPENLST_)  OPEN ERROUT\n         MVC   TMCMSG,TMCERR           SET ERROR MESSAGE\n         MVC   TMCMSG+47(2),RETNCOD    SET DIALOG SERVICE RETURN CODE\n         PUT   OUTPUT2,TMCMSG          PRINT ERROR MESSAGE\n         CLOSE OUTPUT2,MF=(E,CLOSLST_)    CLOSE ERROUT\n         TITLE 'TMCTAB3 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         CLOSE INPUT,MF=(E,CLOSLST_)   CLOSE INPUT\n         CLOSE OUTPUT1,MF=(E,CLOSLST_)    CLOSE TMCOUT\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'TMCTAB3 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nSCRATCH  EQU   X'04'                   TMFLAG1 - TAPE LISTED SCR LIST\nDELETED  EQU   X'02'                   TMFLAG1 - VOL DELETED FROM LIB\nDSNB     EQU   X'FF'                   1ST BYTE DSN-DATA SET NAME BLOCK\n         TITLE 'TMCTAB3 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   FULLWORD CONSTANT; VALUE '00'\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nSPACES   DC    CL133' '                SPACES\nTMCERR   DC    CL133' UNABLE TO OPEN ''UCC.ONE.TMC''. RETURN CODE = 00.+\n               NOTIFY SYSTEMS PROGRAMMING.'\n*                                      ERROR MESSAGE TEXT\n         TITLE 'TMCTAB3 - LITERAL POOL'\n         LTORG\n***********************************************************************\n*        INITIALIZATION DATA FOR PART OF GETMAINED AREA\n***********************************************************************\nINITDATA DS    0F\nDCBIN    DCB   DDNAME=TMCIN,DSORG=PS,MACRF=(GL),EODAD=FINISH\nDCBOUT1  DCB   DDNAME=TMCOUT,DSORG=PS,MACRF=(PM)\nDCBOUT2  DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST  OPEN  (,),MF=L            STATIC LIST FORM OF OPEN MACRO\nCLOSLST  CLOSE (,),MF=L            STATIC LIST FORM OF CLOSE MACRO\nDATALEN  EQU   *-INITDATA\n         TITLE 'TMCTAB3 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nTMCMSG   DS    CL133                   ERROR MESSAGE\nTMCREC   DS    0CL80                   TMC OUTPUT RECORDS\nTMCDSN   DS    CL44                    DATA SET NAME FROM TMC\nTMCVOL   DS    CL6                     VOLSER FROM TMC\n         DS    CL30\nRETNCOD  DS    CL2                     ISPF DIALOG SERVICE RETURN CODE\nDATA     DS    0F\nINPUT    DCB   DDNAME=TMCIN,DSORG=PS,MACRF=(GL),EODAD=FINISH\nOUTPUT1  DCB   DDNAME=TMCOUT,DSORG=PS,MACRF=(PM)\nOUTPUT2  DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST_ OPEN  (,),MF=L            DYNAMIC LIST FORM OF OPEN MACRO\nCLOSLST_ CLOSE (,),MF=L            DYNAMIC LIST FORM OF CLOSE MACRO\nWORKLEN  EQU   *-WORKAREA\n         END   TMCTAB3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TXTEX006": {"ttr": 17931, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\x12\\x02\\x12\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 530, "newlines": 530, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'DELUXE JES2 INTERNAL TEXT SCAN EXIT - PREAMBLE'\n**********************************************************************\n*                                                                    *\n*           DELUXE JES2 INTERNAL TEXT SCAN EXIT 6                    *\n*                                                                    *\n*    PURPOSE:                                                        *\n*       THE EXIT AS IMPLEMENTED AT DELUXE HAS THE PURPOSE            *\n*       OF CHECKING THE NUMBER OF TAPE ALLOCATIONS PER STEP          *\n*       AND CANCELING JOBS WHICH EXCEED THE NUMBER ALLOWED.          *\n*                                                                    *\n*    ENTRY POINT = DLXXIT06                                          *\n*                                                                    *\n*    INPUT (REGISTERS):                                              *\n*       R0     A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *\n*              0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *\n*                 TO AN INTERNAL TEXT IMAGE                          *\n*              4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *\n*                 JOB HAS BEEN CONVERTED TO INTERNAL TEXT            *\n*       R1     ADDRESS OF A 4-WORD PARAMETER LIST                    *\n*              +0  ADDRESS OF A 16-BYTE WORK AREA AVAILABLE TO THE   *\n*                  INSTALLATION                                      *\n*              +4  IF THE CODE PASSED IN R0 IS 0, THIS WORD POINTS   *\n*                  TO THE ADDRESS OF THE LAST SINGLE INTERNAL TEXT   *\n*                  IMAGE CONVERTED FROM A JCL STATEMENT.  IF THE     *\n*                  CODE PASSED IN R0 IS 4, THIS WORD CONTAINS THE    *\n*                  ADDRESS OF THE CONVERTER'S RETURN CODE.           *\n*              +8  ADDRESS OF THE DTE                                *\n*              +12 ADDRESS OF THE JCT                                *\n*       R2-R10 N/A                                                   *\n*       R11    ADDRESS OF THE HCT                                    *\n*       R12    N/A                                                   *\n*       R13    OS-STYLE 18 WORD SAVE AREA                            *\n*       R14    RETURN ADDRESS                                        *\n*       R15    ENTRY ADDRESS                                         *\n*                                                                    *\n*    RETURN (REGISTERS);                                             *\n*       R0     A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *\n*              0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *\n*                 TO AN INTERNAL TEXT IMAGE                          *\n*              4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *\n*                 JOB HAS BEEN CONVERTED TO INTERNAL TEXT            *\n*       R1     ADDRESS OF A 4-WORD PARAMETER LIST                    *\n*              +0  ADDRESS OF A 16-BYTE WORK AREA AVAILABLE TO THE   *\n*                  INSTALLATION                                      *\n*              +4  IF THE CODE PASSED IN R0 IS 0, THIS WORD POINTS   *\n*                  TO THE ADDRESS OF THE LAST SINGLE INTERNAL TEXT   *\n*                  IMAGE CONVERTED FROM A JCL STATEMENT.  IF THE     *\n*                  CODE PASSED IN R0 IS 4, THIS WORD CONTAINS THE    *\n*                  ADDRESS OF THE CONVERTER'S RETURN CODE.           *\n*              +8  ADDRESS OF THE DTE                                *\n*              +12 ADDRESS OF THE JCT                                *\n*       R2-R10 N/A                                                   *\n*       R11    ADDRESS OF THE HCT                                    *\n*       R12    N/A                                                   *\n*       R13    OS-STYLE 18 WORD SAVE AREA                            *\n*       R14    RETURN ADDRESS                                        *\n*       R15   CONTAINS A RETURN CODE AS FOLLOWS:                     *\n*             = 0  TELLS JES2 THAT, IF THERE ARE ANY ADDITIONAL EXIT *\n*                  ROUTINES, IT IS TO EXECUTE THE NEXT ONE.  IF      *\n*                  THERE ARE NO ADDITIONAL ROUTINES, JES2 IS TO      *\n*                  CONTINUE WITH NORMAL JES2 PROCESSING.             *\n*             = 4  TELLS JES2 TO IGNORE ANY ADDITION EXIT ROUTINES   *\n*                  ASSOCIATED WITH THIS EXIT AND TO CONTINUE WITH    *\n*                  NORMAL JES2 PROCESSING.                           *\n*             = 8  TELLS JES2 TO BYPASS EXECUTION AND CANCEL THE     *\n*                  JOB; THE JOB IS QUEUED FOR OUTPUT RATHER THAN     *\n*                  FOR EXECUTION.                                    *\n*                                                                    *\n*    JES2 MACROS USED:                                               *\n*        $ENTRY, $MODEND, $HASPGBL,$HCT,$IOB,$SIT,$TEXT,$KEYS        *\n*                                                                    *\n*    MVS MACROS USED:                                                *\n*        GETMAIN, FREEMAIN, SAVE, RESTORE                            *\n*                                                                    *\n*                                                                    *\n*    CHANGE ACTIVITY:                                                *\n*        02/06/87  WRITTEN.                             BC.          *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nTXTEX006 $MODULE ENVIRON=SUBTASK,                                      +\n               $BUFFER,                                                +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $MIT,                    REQ'D BY $MODULE               +\n               $JCT,                    HASP JOB CONTROL TABLE MAPPING +\n               $HCT,                    HASP CONTROL TABLE MAPPING     +\n               $PCE,                    HASP PCE DSECT                 +\n               TEXT,                    MVS TEXT DSECT                 +\n               KEYS,                    MVS TEXT KEYS EQUATES          +\n               WPL,                     MVS WPL DSECT                  +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'DELUXE JES2 INTERNAL TEXT SCAN EXIT '\n         SPACE 1\nDLXXIT06 $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         SAVE  (14,12)                  SAVE REGISTERS\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         LTR   R2,R0                    SAVE CODE\n         BNE   RETURNX                  IF NE 0, THEN SKIP EXIT\n         LR    R3,R1                    SAVE ADDRESS OF PARAMETER LIST\n         USING PARMLIST,R3              SET ADDRESSABILITY\n         L     R4,USERADDR              GET ADDR OF USER WORK AREA\n         USING USERAREA,R4              SET ADDRESSABILITY\n***********************************************************************\n*        SEE IF THERE'S A REASON TO TAKE THIS EXIT\n***********************************************************************\n         TM    USERFLAG,X'80'           SHOULD THIS EXIT CONTINUE?\n         BO    RETURNX                  IF NOT, RETURN\n         GETMAIN R,LV=LDATA             GET SAVEAREA\n         ST    R13,4(R1)                SAVE OLD ADDR IN NEW\n         ST    R1,8(R13)                SAVE NEW ADDR IN OLD\n         LR    R13,R1                   LOAD R13 WITH CURRENT ADDR\n         USING WORKAREA,R13             SET ADDRESSABILITY\n         MVC   DATA(MOVEL),CDATA        INIT DATA IN AREA\n         LA    R6,DSN                   SET UP CAMLST PARAMETERS\n         ST    R6,LOCLIST+4               ADDR OF DATASET NAME\n         LA    R6,LOCAREA\n         ST    R6,LOCLIST+12              ADDR OF WORK BUFFER\n         L     R7,JCTADDR               GET ADDR OF JCT\n         USING JCT,R7                   ADDRESSABILITY TO JCT\n***********************************************************************\n*        MAKE SURE IT'S A BATCH JOB\n***********************************************************************\n         CLC   BATJOB,JCTJOBID          IS THIS A BATCH JOB ?\n         BE    CONT                     IF SO, CONTINUE\n         OI    USERFLAG,X'80'           ELSE, NO REASON TO GO THRU EXIT\n         B     RETURN\n***********************************************************************\n*        IF UNLIMITED TAPES ALLOWED, DON'T BOTHER WITH THIS EXIT\n***********************************************************************\nCONT     EQU   *\n         TM    JCTUSER0,X'02'          UNLIMITED TAPES?\n         BO    NOLIM                   IF SO, BRANCH\n         CLI   JCTUSER2+3,X'FF'        UNLIMITED TAPES?\n         BNE   CHKTEXT                 IF NOT, BRANCH\nNOLIM    EQU   *\n         OI    USERFLAG,X'80'          NO REASON TO GO THRU EXIT\n         B     RETURN\n***********************************************************************\n*        IF EXEC STATEMENT, INITIALIZE TAPE COUNTER\n***********************************************************************\nCHKTEXT  EQU   *\n         L     R8,TEXTADDR              GET ADDR OF TEXT IMAGE\n         USING TEXT,R8                  SET ADDRESSABILITY\n         TM    STRINDCS,EXECSTR         EXEC STATEMENT?\n         BNO   CHKTYPE                  NO, CONTINUE\n         MVI   TAPECNT,X'00'            IF SO, INITIALIZE TAPE COUNTER\n         B     RETURN                   AND RETURN\n***********************************************************************\n*        CONTINUE PROCESSING ONLY DD STATEMENTS\n***********************************************************************\nCHKTYPE  EQU   *\n         TM    STRINDCS,DDSTR           IS THIS A DD STATEMENT?\n         BNO   RETURN                   IF NOT, FORGET IT\nDDCARD   EQU   *\n         TM    STRDINDC,DTXDDNM         DDNAME= STATEMENT?\n         BO    RETURN                   YES, BYPASS\n         TM    STRDINDC,DTXDYNAM        DYNAM STATEMENT?\n         BO    RETURN                   YES, BYPASS\n         TM    STRDINDC,DTXSYSIN        INPUT SPOOL FILE?\n         BO    RETURN                   YES, BYPASS\n         TM    STRDINDC,DTXDUMMY        DUMMY STATEMENT?\n         BO    RETURN                   YES, BYPASS\n         TM    STRDINDC,DTXSYOUT        SYSOUT STATEMENT?\n         BO    RETURN                   YES, BYPASS\nDDSTART  EQU   *\n         LA    R9,STRDKEY               LOAD START OF TRUE TEXT\n         ST    R9,SAVEADDR              SAVE THE ADDRESS\nDDPARM   EQU   *\n         CLI   0(R9),ENDK               END OF TEXT STRING?\n         BE    DDEND                    YES, END\n***********************************************************************\n*        CHECK FOR DATASET NAME\n***********************************************************************\nDDSNAME  EQU   *\n         CLI   0(R9),DSNAMEK            SEE IF DSNAME KEY\n         BNE   DUNIT                    NO, BRANCH\n         SLR   R10,R10                  CLEAR R10\n         ICM   R10,B'0001',2(R9)        LOAD LENGTH OF DSN\n         BZ    DDLOOP                   IF ZERO, BRANCH\n         BNM   DSNSTD                   HIGH BIT NOT ON, STANDARD DSN\n         CLI   4(R9),C'*'               IF 1ST CHAR = *, REFERBACK\n         BE    DDLOOP                   IF SO, IGNORE\n***********************************************************************\n*        DSNAME PROBABLY A GDG\n***********************************************************************\nDSNGDG   EQU   *\n         N     R10,=X'FFFFFF7F'         CLEAR HIGH BIT IF BYTE\n         CH    R10,=H'2'                MAKE SURE THERE ARE 2 SUBPARMS\n         BNE   DDLOOP                   IF NOT, SKIP IT\n         LA    R5,3(R9)                 LOAD ADDR OF 1ST ENTRY\n         IC    R10,0(R5)                LOAD LENGTH OF 1ST ENTRY\n         CH    R10,=H'35'               SEE IF MAX LENGTH EXCEEDED\n         BH    DDLOOP                   IF SO, SKIP IT\n         BCTR  R10,0                    DEC FOR MACHINE LENGTH\n         EX    R10,MOVEDSN1             MOVE INTO DSNAME FIELD\n         LA    R10,1(R10)               INC TO TRUE LENGTH\n         LA    R5,1(R10,R5)             INC TO 2ND ENTRY\n         LA    R6,DSNAME                GET ADDR OF DSNAME FIELD\n         AR    R6,R10                   GET ADDR FOR GEN #\n         LR    R15,R10                  SAVE LENGTH OF 1ST PART DSN\n         ICM   R10,B'0001',0(R5)        GET LENGTH OF 2ND PART DSN\n         BZ    DDLOOP                   IF NOTHING THERE, SKIP IT\n         AR    R15,R10                  ADD LENGTHS TOGETHER\n         CH    R15,=H'42'               SEE IF TOTAL LENGTH EXCEEDS MAX\n         BH    DDLOOP                   IF SO, SKIP IT\n         LA    R15,2(R15)               ADD ON THE PARENS\n         STCM  R15,B'0001',LDSNAME      STORE THE WHOLE LENGTH\n         MVI   0(R6),C'('               OPEN PARENS\n         LA    R6,1(R6)                 GO TO NEXT POSITION\n         BCTR  R10,0                    DEC FOR MACHINE LENGTH\n         EX    R10,MOVEDSN2             MOVE GEN # TO DSNAME\n         LA    R6,1(R10,R6)             INC TO END OF DSNAME FIELD\n         MVI   0(R6),C')'               CLOSE PARENS\n         B     DDLOOP                   GO GET NEXT ENTRY\n***********************************************************************\n*        DSNAME PROBABLY STANDARD\n***********************************************************************\nDSNSTD   EQU   *\n         CH    R10,=H'44'               CHECK LENGTH OF DSN\n         BH    RETURN                   IF > 44, SKIP IT\n         STCM  R10,B'0001',LDSNAME      STORE THE DSN LENGTH\n         CLC   3(8,R9),=CL8'NULLFILE'   SEE IF DSN=NULLFILE\n         BE    RETURN                   IF SO, SKIP IT\n         BCTR  R10,0                    DEC FOR MACHINE LENGTH\n         EX    R10,MOVEDSN              MOVE DSN TO TEMP ENTRY\n         B     DDLOOP\n***********************************************************************\n*        CHECK FOR UNIT PARAMETER\n***********************************************************************\nDUNIT    EQU   *\n         CLI   0(R9),UNITK              SEE IF UNIT= KEYWORD\n         BNE   DAFF                     NO,BRANCH\n         SLR   R5,R5                    CLEAR R5\n         ICM   R5,B'0001',1(R9)         GET NUMBER OF POS SUBPARAMS\n         BZ    DDLOOP                   ZERO, NO POS SUBPARAMS\n         LA    R9,2(R9)                 LOAD START OF POS SUBPARAMS\n         SLR   R10,R10                  CLEAR R10\n         ICM   R10,B'0001',0(R9)        GET LENGTH OF SUBPARAM\n         CH    R10,=H'3'                IS IT AN ABSOLUTE ADDRESS?\n         BNE   DUNIT10                  IF NOT, CONTINUE\n         CLI   1(R9),C'0'               DOES IT START WITH 0?\n         BE    DUNIT10                  IF SO, CONTINUE\n         CLI   1(R9),C'8'               DOES IT START WITH 8?\n         BE    DUNIT10                  IF SO, CONTINUE\n         CLI   1(R9),C'A'               DOES IT START WITH A?\n         BNE   CANJOB1                  IF NOT, CANCEL THE JOB\nDUNIT10  EQU   *\n         LTR   R10,R10                  IS LENGTH 0?\n         BZ    DUNIT20                  IF SO, SKIP IT\n         BCTR  R10,0                    DEC FOR MACHINE LENGTH\n         EX    R10,MOVEUNIT             MOVE UNIT TO TEMP ENTRY\n         LA    R10,1(R10)               INC FOR ORIGINAL LENGTH\nDUNIT20  EQU   *\n         LA    R9,1(R10,R9)             INC TO NEXT ENTRY\n         BCT   R5,DUNIT1                IF NOT ZERO, PROCESS UNIT COUNT\n         B     DDLOOP                   ELSE, DONE WITH UNIT=\n***********************************************************************\n*        CHECK FOR UNIT COUNT\n***********************************************************************\nDUNIT1   EQU   *\n         LR    R5,R9                    SAVE POINTER TO UNIT COUNT\n         ICM   R10,B'0001',0(R9)        GET LENGTH OF UNIT COUNT\n         LTR   R10,R10                  CHECK FOR ZERO\n         BE    DDLOOP                   IF SO, SKIP IT\n         LA    R9,1(R9)\nDUNIT30  EQU   *\n         CLI   0(R9),C'0'               SEE IF NUMERIC\n         BL    DDLOOP                   IF NOT, SKIP IT\n         CLI   0(R9),C'9'               SEE IF NUMERIC\n         BH    DDLOOP                   IF NOT, SKIP IT\n         LA    R9,1(R9)                 CONTINUE TO CHECK\n         BCT   R10,DUNIT30              LOOP TIL DONE\n         LR    R9,R5                    RESTORE R9\n         ICM   R10,B'0001',0(R9)        GET LENGTH OF UNIT COUNT\n         BCTR  R10,0                    DEC FOR MACHINE LENGTH\n         EX    R10,PACKIT               PACK UNIT COUNT\n         LA    R10,1(R10)               INC FOR ORIGINAL LENGTH\n         CVB   R5,DOUBLE                CONVERT TO BINARY\n         ST    R5,UNITCT                SAVE UNIT COUNT\n         B     DDLOOP\n***********************************************************************\n*        DD UNIT=AFF\n***********************************************************************\nDAFF     EQU   *\n         CLI   0(R9),AFFMK              SEE IF UNIT=AFF= KEY\n         BNE   DDLOOP                   IF NOT, BRANCH\n         MVC   UNIT(8),=CL8'IGNORE'     IF SO, IGNORE THE UNIT\n         B     DDLOOP\n***********************************************************************\n*        END OF DD PARAMETER - INC POINTER TO THE NEXT ONE\n***********************************************************************\nDDLOOP   EQU   *\n         L     R9,SAVEADDR              RESTORE START ADDRESS\n         SLR   R5,R5                    CLEAR R5\n         LA    R9,1(R9)                 INC PAST KEYWORD\n         ICM   R5,B'0001',0(R9)         GET SUBPARM COUNT\n         BNZ   DDLOOP1                  IF SOME, BRANCH\n         LA    R9,1(R9)                 ELSE, INC PAST COUNT\n         B     DDLOOP5                  AND GET OUT\nDDLOOP1  EQU   *\n         LA    R9,1(R9)                 INC PAST COUNT\nDDLOOP2  EQU   *\n         SLR   R6,R6                    CLEAR R6\n         ICM   R6,B'0001',0(R9)         GET PARAMETER LENGTH\n         BNM   DDLOOP3                  IF HIGH BIT NOT ON, ONLY 1\n         N     R6,=X'FFFFFF7F'          TURN OFF HIGH BIT\n         LA    R9,1(R9)                 INC PAST CONTROL BYTE\n         B     DDLOOP4                  AND BRANCH\nDDLOOP3  EQU   *\n         LA    R6,1                     SET PARM COUNT TO 1\nDDLOOP4  EQU   *\n         SLR   R10,R10                  CLEAR R10\n         ICM   R10,B'0001',0(R9)        GET PARM LENGTH\n         LA    R9,1(R10,R9)             INC PAST PARM\n         BCT   R6,DDLOOP4               LOOP TIL PARMS PROCESSED\n         BCT   R5,DDLOOP2               LOOP TIL PARMS PROCESSED\nDDLOOP5  EQU   *\n         ST    R9,SAVEADDR              SAVE NEW ADDRESS\n         B     DDPARM                   CONTINUE\n***********************************************************************\n*        END OF DD STATEMENT, CHECK FOR TAPE\n***********************************************************************\nDDEND    EQU   *\n         CLC   UNIT,=CL8' '             WAS A UNIT SPECIFIED?\n         BE    LOCATE                   NOPE, MUST DO A LOCATE\n         CLC   UNIT(4),=CL4'TAPE'       IS THE UNIT A TAPE?\n         BE    COUNTAPE                 IF SO, GO COUNT IT\n         CLC   UNIT(2),=CL2'34'         CHECK FOR 34XX ALSO\n         BE    COUNTAPE                 IF SO, GO COUNT IT\n         B     RETURN                   ELSE, TAKE NORMAL RETURN\n***********************************************************************\n*        UNIT NOT SPECIFIED, TRY A LOCATE ON THE DATASET NAME\n***********************************************************************\nLOCATE   EQU   *\n         MVC   DSN,DSNAME               SAVE THE DATA SET NAME\n         LOCATE LOCLIST                 TRY THE LOCATE\n         LTR   R15,R15                  SUCCESSFUL?\n         BNZ   LOCGDG                   IF NOT, TRY A GENERIC LOCATE\nFOUND    EQU   *\n         CLC   LOCAREA(2),=H'0'         ANY VOLUME ENTRIES?\n         BE    RETURN                   IF NOT, FORGET IT\n         CLI   LOCAREA+6,X'00'          MAKE SURE THERE IS A VOLSER\n         BE    RETURN                   IF NOT, VSAM LIED\n         TM    LOCAREA+4,X'80'          TAPE UNIT?\n         BO    COUNTAPE                 YES, GO COUNT IT\n         B     RETURN                   ELSE, FORGET IT\n***********************************************************************\n*        LOCATE FAILED, TRY SUPERLOCATE FOR A GDG\n***********************************************************************\nLOCGDG   EQU   *\n         SLR   R2,R2                    CLEAR R2 FOR TAPE COUNTER\n         GETMAIN R,LV=5000              GET WORK AREA FOR GEN LOCATE\n         ST    R1,GENWORK               SAVE THE ADDRESS\n         ST    R1,GENADDR               ALSO SAVE IT FOR LATER\n         MVC   GENFLAG,=X'05201100'     SET UP FLAG FOR INITIAL LOCATE\n         XC    GENX1,GENX1              CLEAR OUT 3RD WORD\n         XC    GENX2,GENX2              CLEAR OUT 5TH WORD\n         LA    R6,LDSNAME               GET ADDR OF GENERIC NAME\n         ST    R6,GENNAME               STORE IT\n         L     R6,GENADDR               GET ADDR OF GENERIC WORK AREA\n         MVC   0(4,R6),=X'13880004'     INIT THE WORK BUFFER LENGTH\n         LA    R1,GENPARM               LOAD PARAMETER ADDRESS\n         SVC   26                       DO THE GENERIC LOCATE\n         LTR   R15,R15                  CHECK FOR ERRORS\n         BZ    LOCGDG0                  IF NOT, CONTINUE\n         B     ENDGDG                   ELSE, FORGET IT\n***********************************************************************\n*        NOW DO LOCATES ON EACH GDG\n***********************************************************************\nLOCGDG0  EQU   *\n         LH    R8,2(R6)                 LOAD LENGTH OF AREA\n         SH    R8,=H'4'                 SUBTRACT LENGTH OF PREFIX\n         SRDA  R8,32                    SHIFT TO ODD REGISTER OF PAIR\n         D     R8,=F'45'                DIVIDE BY LENGTH OF EACH ENTRY\n         LTR   R5,R9                    TEST NUMBER OF DSNAMES RETURNED\n         BZ    ENDGDG                   IF NONE, FORGET IT\n         BM    ENDGDG                   IF NEGATIVE, FORGET IT\n         LA    R6,4(R6)                 POINT TO FIRST DSNAME\nLOCGDG1  EQU   *\n         CLI   0(R6),C'A'               IS THIS A GDG?\n         BNE   NEXTENT                  IF NOT, SKIP IT\n         SLR   R9,R9                    CLEAR R9\n         IC    R9,LDSNAME               LOAD BASE DSN LENGTH\n         LA    R9,2(R9,R6)              POINT PAST TYPE, BASE, AND '.'\n         CLI   0(R9),C'G'               POSSIBLE GDG?\n         BNE   NEXTENT                  NOPE\n         CLI   5(R9),C'V'               POSSIBLE GDG?\n         BNE   NEXTENT                  NOPE\n         CLI   8(R9),C' '               POSSIBLE GDG?\n         BNE   NEXTENT                  NOPE\n         MVC   DOUBLE,0(R9)             SAVE DSN SUFFIX\n         OC    DOUBLE,GDGMASK           TEST NUMERIC POSITIONS\n         CLC   DOUBLE,0(R9)             SEE IF CHANGED\n         BNE   NEXTENT                  YEP, NOT A GDG\n         MVC   DSNAME,1(R6)             GET THE COMPLETE DATASET NAME\n         MVC   DSN,1(R6)                GET THE COMPLETE DATASET NAME\n         LOCATE LOCLIST                 DO THE LOCATE\n         LTR   R15,R15                  CHECK FOR ERRORS\n         BZ    LOCGDG2                  IF NONE, CONTINUE\n         B     NEXTENT                  AND CONTINUE\nLOCGDG2  EQU   *\n         CLC   LOCAREA(2),=H'0'         ANY VOLUME ENTRIES?\n         BE    NEXTENT                  NOPE, FORGET IT\n         CLI   LOCAREA+6,X'00'          MAKE SURE THERE'S A VOLSER\n         BE    NEXTENT                  THERE ISN'T, SO FORGET IT\n         TM    LOCAREA+4,X'80'          TAPE UNIT?\n         BNO   NEXTENT                  IF NOT, CONTINUE WITH NEXT ONE\n         LA    R2,1(R2)                 COUNT THE TAPE UNIT\nNEXTENT  EQU   *\n         LA    R6,45(R6)                GO TO THE NEXT DATASET NAME\n         BCT   R5,LOCGDG1               LOOP THRU NAMES\nENDGDG   EQU   *\n         L     R1,GENADDR               GET ADDR FOR FREEMAIN\n         FREEMAIN R,LV=5000,A=(R1)      FREE GENERIC LOCATE AREA\n         ST    R2,UNITCT                SET THE TAPE UNIT COUNT\n         LTR   R2,R2                    ANY TAPES TO BE COUNTED?\n         BE    RETURN                   IF NOT, FORGET IT\n***********************************************************************\n*        COUNT TAPES (IF ANY) AND CHECK FOR MAX EXCEEDED\n***********************************************************************\nCOUNTAPE EQU   *\n         L     R10,UNITCT               GET UNIT COUNT\n         LTR   R10,R10                  ANYTHING THERE?\n         BNZ   COUNTAP1                 IF SO, OK\n         LA    R10,1                    ELSE, SET TO 1\nCOUNTAP1 EQU   *\n         SLR   R5,R5                    CLEAR R5\n         ICM   R5,B'0001',TAPECNT       GET CURRENT TAPE COUNTER\n         AR    R5,R10                   COUNT ANOTHER ONE (OR MORE)\n         STCM  R5,B'0001',TAPECNT       RESET TAPE COUNT\n         SLR   R6,R6                    CLEAR R6\n         ICM   R6,B'0001',JCTUSER2+3    GET MAX TAPES ALLOWED\n         CR    R5,R6                    MAX TAPES EXCEEDED?\n         BNH   RETURN                   IF NOT, TAKE NORMAL RETURN\n***********************************************************************\n*        CANCEL IF MAX TAPES PER STEP EXCEEDED\n***********************************************************************\nCANJOB0  EQU   *\n         MVC   WTOLIST(LWTO0),WTO0      WRITE ERROR TO LOG\n         $$WTO WTOLIST\n         B     CANJOB                   CANCEL JOB\n***********************************************************************\n*        CANCEL IF DEVICE ADDRESS SPECIFIED\n***********************************************************************\nCANJOB1  EQU   *\n         MVC   WTOLIST(LWTO1),WTO1      WRITE ERROR TO LOG\n         $$WTO WTOLIST\nCANJOB   EQU   *\n         OI    USERFLAG,X'80'           DON'T TAKE THIS EXIT ANYMORE\n         LR    R1,R13                   GET ADDR OF SAVE AREA\n         L     R13,4(R13)               RESTORE ADDR OF PREV SAVE AREA\n         FREEMAIN R,LV=LDATA,A=(R1)     FREE PROGRAM SAVE AREA\n         RETURN (14,12),RC=8            RESTORE REGISTERS & RETURN\nRETURN   EQU   *\n         LR    R1,R13                   GET ADDR OF SAVE AREA\n         L     R13,4(R13)               RESTORE ADDR OF PREV SAVE AREA\n         FREEMAIN R,LV=LDATA,A=(R1)     FREE PROGRAM SAVE AREA\nRETURNX  EQU   *\n         RETURN (14,12),RC=0            RESTORE REGISTERS & RETURN\n********************** CONSTANTS *************************************\n* DATA TO BE USED TO INIT PART OF THE GETMAIN'ED AREA\nCDATA    DS    0F\nLIST1    CAMLST NAME,*,,*\nIUNITCT  DC    F'0'\nIDSNAME  DC    CL44' '\nIUNIT    DC    CL8' '\nMOVEL    EQU   *-CDATA\n*\n         LTORG\n* OTHER CONSTANTS\nBATJOB   DC    CL3'JOB'\nGDGMASK  DC    C'G0000V00'\nMOVEDSN  MVC   DSNAME(0),3(R9)\nMOVEDSN1 MVC   DSNAME(0),1(R5)\nMOVEDSN2 MVC   0(0,R6),1(R5)\nMOVEUNIT MVC   UNIT(0),1(R9)\nPACKIT   PACK  DOUBLE,1(0,R9)\nWTO0     WTO   '$EXIT006 MAX TAPES PER STEP EXCEEDED FOR THIS JOB CLASSX\n                - JOB WILL BE CANCELED',ROUTCDE=(11),MF=L\nLWTO0    EQU   *-WTO0\nWTO1     WTO   '$EXIT006 SPECIFIC UNIT ADDRESS NOT ALLOWED - JOB WILL BX\n               E CANCELED',ROUTCDE=(11),MF=L\nLWTO1    EQU   *-WTO1\n*\n***********************  DSECTS  *************************************\n*  DSECT FOR GETMAIN'ED AREA\nWORKAREA DSECT\nSAVEAREA DS    18F               SAVE AREA\nSAVEADDR DS    F                 SAVE TEXT ADDRESS\nGENADDR  DS    A                 ADDR OF WORK AREA FOR GENERIC LOCATE\nDOUBLE   DS    D                 DOUBLE WORD FOR CONVERT TO BINARY\nWTOLIST  DS    CL120             *** MUST START ON A FULL WORD ***\nLDSNAME  DS    X               / DATASET NAME LENGTH \\\nDSN      DS    CL44            \\    DATASET NAME     /\nLOCAREA  DS    XL265             WORK AREA FOR LOCATE\n*\nGENPARM  DS    0F                PARAMETERS FOR GENERIC LOCATE\nGENFLAG  DS    F\nGENNAME  DS    A\nGENX1    DS    A\nGENWORK  DS    A\nGENX2    DS    A\n*\n* DATA IN GETMAIN'ED AREA TO BE INITIALIZED\nDATA     DS    0F\nLOCLIST  DS    XL16\nUNITCT   DS    F\nDSNAME   DS    CL44\nUNIT     DS    CL8\n*\nLDATA    EQU   *-WORKAREA\n* END OF GETMAIN'ED AREA\n*\n* DSECT FOR THE 4-WORD PARAMETER LIST\nPARMLIST DSECT\nUSERADDR DS    F\nTEXTADDR DS    F\nDTEADDR  DS    F\nJCTADDR  DS    F\n*\n* DSECT FOR THE 16-BYTE USER AREA\nUSERAREA DSECT\nUSERFLAG DS    XL1\nTAPECNT  DS    XL1\n         DS    XL14\n*\nTXTEX006 CSECT\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCS4245": {"ttr": 18184, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'UCS5 IMAGE TABLE FOR 4245 PRINTER'\n***********************************************************************\nUCS5     CSECT\n         IGGUCS5\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNITMAP": {"ttr": 18186, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02-\\x02-\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 557, "newlines": 557, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TSO COMMAND TO MAP UNIT NAMES AND DEVICES'\n**********************************************************************\n*                                                                    *\n*  NAME      -   UNITMAP                                             *\n*                                                                    *\n*  FUNCTION  -   MAP UNIT NAMES FROM UCB INFORMATION                 *\n*                                                                    *\n*  DATE      -   03/08/85                                            *\n*                                                                    *\n*  AUTHOR    -   J. CARLSON                                          *\n*                                                                    *\n*  SYSTEM    -   MVS/XA ONLY                                         *\n*                                                                    *\n*  OUTPUT    -   UNITNAME - CUU,CUU,CUU                              *\n*                                                                    *\n*  ATTRIB    -   RE-ENTRANT, RE-USABLE  & REFRESHABLE                *\n*                                                                    *\n*  DSECTS    -   CVT,IEFUCBOB,IKJCPPL,IKJECT,IKJPPL,IKJIOPL          *\n*                                                                    *\n*  LOGIC     -                                                       *\n*               WHEN A UNITNAME IS GIVEN, ALL DEVICE ADDRESSES       *\n*               ASSOCIATED WITH THE UNITNAME WILL BE LISTED.         *\n*                                                                    *\n*               WHEN NO UNITNAME IS GIVEN, ALL DEVICE ADDRESSES      *\n*               IN THE UCB CHAIN WILL BE LISTED. EACH GROUP OF       *\n*               16 DEVICE ADDRESSES (OR LESS) WILL BE PRECEDED       *\n*               WITH THE GENERIC UNITNAME ASSOCIATED WITH THE GROUP. *\n*                                                                    *\n*  REGS      -                                                       *\n*              R0 - R2     -   WORK REGISTERS                        *\n*              R3          -   WORK REGISTER & UCB ADDRESS           *\n*              R4          -   WORK REGISTER & PARM LENGTH           *\n*              R5          -   WORK REG & NUMBER DEV ADDR PER LINE   *\n*              R6          -   POINTER TO PARAMETER PASSED           *\n*              R7          -   BAL RETURN ADDRESS                    *\n*              R8          -   WORK REGISTER & INDEX INTO UCB LIST   *\n*              R9          -   WORK REG & NO. OF ENTRIES IN UCB LIST *\n*              R10         -   INDEX INTO CHANUCB OUTPUT LINE        *\n*              R11         -   SECOND BASE ADDRESS                   *\n*              R12         -   FIRST BASE ADDRESS                    *\n*              R13         -   ADDRESS OF PROGRAM SAVE AREA          *\n*              R14         -   RETURN ADDRESS                        *\n*              R15         -   ENTRY ADDRESS AND RETURN CODE         *\n*                                                                    *\n* INSTALL    -   ASSEMBLE UNITMAP                                    *\n*                LINK UNITMAP                                        *\n*                PLACE UNITMAP IN LINKLIST LIBRARY                   *\n**********************************************************************\n         PRINT NOGEN\n         EJECT\nUNITMAP  CSECT\n***********************************************************************\n*  ESTABLISH STANDARD LINKAGE CONVENTIONS\n***********************************************************************\n         SAVE  (14,12),,UNITMAP_&SYSDATE_&SYSTIME\n*                                      SAVE CALLER'S REGISTERS\n         LR    R12,R15                 R12 - UNITMAP BASE REGISTER\n         USING UNITMAP,R12             ESTABLISH UNITMAP ADDRESSABILITY\n         LA    R11,4095(R12)           R11 - ENTRY ADDRESS + 4095\n         USING UNITMAP+4095,R11        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         LR    R8,R1                   PRESERVE POINTER TO CPPL\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORK AREA\n         ST    R13,4(R1)               STORE ADDR OF PREVIOUS SAVE AREA\n         ST    R1,8(R13)               STORE ADDR OF CURRENT SAVE AREA\n*                                      IN PREVIOUS SAVE AREA\n         LR    R13,R1                  R13 - ADDR OF CURRENT SAVE AREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVC   UNITNAME(8),SPACES      INITIALIZE UNITNAME\n         MVC   CHANLINE(72),SPACES     INITIALIZE CHANNEL LINE\n         MVC   UNITNUM,FULL01          INITIALIZE NUMBER OF OUTPUT\n*                                      LINES IN INFORMATIONAL MESSAGE\n         LA    R1,UNITMSG              R1 - ADDR OF UNITMSG FOR\n         ST    R1,UNITADDR             UNITMSG OUTPUT DESCRIPTOR LINE\n         MVI   HITFLG,X'FF'            ASSUME SOMETHING WILL PRINT\n         EJECT\n***********************************************************************\n*  BUILD PARSE PARAMETER LISTS USING COMMAND PROCESSOR PARAMETER LIST\n*  AND INITIALIZE INPUT / OUTPUT CONTROL BLOCKS IN WORKAREA\n***********************************************************************\n         USING CPPL,R8                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARM LIST\n         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL\n         LA    R5,IOPLSECT             LOAD ADDR OF PUTLINE PARM LIST\n         USING IOPL,R5                 ESTABLISH ADDRESSABILITY TO IOPL\n         L     R1,CPPLUPT              R1 - ADDR OF USER PROFILE TABLE\n*                                      FROM CPPL\n         L     R2,CPPLECT              R2 - ADDR OF ENVIRONMENTAL\n*                                      CONTROL TABLE FROM CPPL\n         SLR   R3,R3                   ZERO REGISTER 3\n         ST    R3,ECB                  CLEAR ECB USING R3\n         LA    R3,ECB                  R3 - ADDRESS OF ECB\n         STM   R1,R3,PPLSECT           STORE UPT, ECT AND ECB IN PPL\n         STM   R1,R3,IOPLSECT          STORE UPT, ECT AND ECB IN IOPL\n         LA    R3,IOPB                 LOAD ADDR OF PUTLINE PARM BLOCK\n         ST    R3,IOPLIOPB             STORE IOPB ADDRESS IN IOPL\n         MVC   PPLPCL,PCLADDR          ADDRESS OF PARAMETER CONTROL\n*                                      LIST INTO PPL\n         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO\n*                                      CONTAIN ADDRESS OF PDE\n*                                      RETURNED BY PARSE\n         ST    R2,PPLANS               STORE ADDR OF PDE INTO PPL\n         MVC   PPLCBUF,CPPLCBUF        MOVE PTR TO CMD BUFFER INTO PPL\n         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORK AREA\n         ST    R2,PPLUWA               STORE ADDRESS INTO PPL\n*                                      IOPL AND PPL\n         L     R4,CPPLECT              LOAD ADDRESS OF ECT\n         USING ECT,R4                  ESTABLISH ADDRESSABILITY TO ECT\n         TM    ECTSWS,ECTNOPD          ANY OPERANDS?\n         DROP  R4,R5,R8                DROP ADDRESSABILITY TO CPPL,\n         BO    UCBCHAIN                NO, BYPASS PARSE\n         SPACE\n***********************************************************************\n*  CALLTSSR TO PARSE (ENTRY POINT IKJPARS); ON RETURN PARSBACK -> PDL\n*  HANDLE ALL ERROR CODES RETURNED BY PARSE AND IF NECESSARY CALL\n*  GENERAL FAIL SERVICE ROUTINE\n***********************************************************************\n         MVI   HITFLG,X'00'            IF PARSING, ASSUME NOTHING\n         CALLTSSR EP=IKJPARS,                                          X\n               MF=(E,PPLSECT)\n         LTR   R15,R15                 WAS PARSE SUCCESSFUL?\n         BZ    UCBLIST                 YES, CONTINUE\n         MVC   UNITMSG,UNTMSG0         MOVE PARSE ERROR MSG TO UNITMSG\n         BAL   R7,PUTMSG               WRITE MESSAGE TO TERMINAL\n         B     EXIT                    RETURN\n         EJECT\n***********************************************************************\n*  FIND UCB'S ASSOCIATED WITH GENERIC OR ESOTERIC UNIT NAMES PROVIDED\n***********************************************************************\nUCBLIST  EQU   *\n         L     R1,PARSBACK             R1 - POINTER TO PARSE ANSWER\n         USING PDL,R1                  ESTABLISH ADDRESABILITY TO PDL\n         L     R6,UNITPTR              R6 - PTR TO UNIT NAME PROVIDED\n         LH    R4,UNITLEN              R4 - LEN OF UNIT NAME PROVIDED\n         BCTR  R4,0                    DECREMENT LENGTH BY ONE\n         EX    R4,MOVEUNIT\n         LA    R8,UNITABLE             R8 - ADDRESS OF UNIT TABLE\n         ST    R8,UTABLPTR             UNIT TABLE ADDR TO LINKLIST\n         LA    R9,FLAGPARM             R9 - ADDRESS OF FLAGS\n         ST    R9,FLAGSPTR             FLAG PARAMETER ADDR TO LINKLIST\n         LINK  EP=IEFEB4UV,                                            X\n               MF=(E,LINKLIST)         GET UCB ADDR LIST FOR UNIT NAME\n         LTR   R15,R15                 WAS UNIT NAME FOUND?\n         BZ    UCBEXTR                 YES, EXTRACT INFO FOR DISPLAY\n         MVC   UNITMSG,UNTMSG1         MOVE 'NOT FOUND' TEXT TO MESSAGE\n         BAL   R7,PUTMSG               ISSUE MESSAGE TO TERMINAL\n         B     EXIT                    BYE-BYE\nUCBEXTR  EQU   *\n         L     R8,UCBLADDR             R8 - ADDRESS OF UCBLIST\n         LA    R8,4(R8)                R8 - POINT TO NUMBER OF ENTRIES\n         L     R9,0(,R8)               R9 - NUMBER OF ENTRIES UCBLIST\n         LA    R8,4(R8)                R8 - POINT TO FIRST UCB ADDRESS\n         LA    R10,CHANUCBS            R10 - INDEX INTO CHANUCBS LINE\n         L     R3,0(,R8)               R3 - ADDRESS OF UCB\n         USING UCB,R3                  ESTABLISH ADDRESSABILITY TO UCB\n         MVC   CHANLGRP(2),UCBNAME     ESTABLISH CHANNEL GROUP\n         LA    R5,16                   R5 - MAX NUMBER OF UCB'S / LINE\n         BAL   R7,CHEKTYP              RETRIEVE GENERIC DEVICE TYPE\nUCBLOOP1 EQU   *\n         MVC   0(3,R10),UCBNAME        MOVE UCBNAME TO OUTPUT LINE\n         BCTR  R9,0                    DECREMENT TOTAL NUMBER (R9)\n*                                      UCB'S TO BE LISTED\n         C     R9,FULL00               HAVE ALL UCB'S BEEN PROCESSED?\n         BNE   MOVEUCB1                NO, MOVE THE NEXT TO OUTPUT LINE\n         LA    R7,EXIT                 YES, R7-RETURN ADDR FROM PUTDATA\n         B     PUTDATA                 WRITE LAST LINE TO TERMINAL\nMOVEUCB1 EQU   *\n         LA    R10,4(R10)              INCREMENT INDEX INTO CHANUCBS\n         LA    R8,4(R8)                INCREMENT INDEX INTO UBC LIST\n         L     R3,0(,R8)               R3 - ADDRESS OF UCB\n         USING UCB,R3                  ESTABLISH ADDRESSABILITY TO UCB\n         CLC   CHANLGRP(2),UCBNAME     IS THIS A NEW CHANNEL GROUP\n         BNE   NEWLINE1                YES, PREPARE A NEW OUTPUT LINE\n         BCT   R5,UCBLOOP1             PROCESS NEXT UCB\n         LA    R7,UCBLOOP1             R7 - RETURN ADDR FROM CHEKTYP\n         B     PUTDATA                 YES, DISPLAY UCB INFORMATION\nNEWLINE1 EQU   *\n         BAL   R7,PUTDATA              WRITE OUTPUT LINE TO TERMINAL\n         LA    R7,UCBLOOP1             R7 - RETURN ADDR FROM CHEKTYP\n         B     CHEKTYP                 GET GENERIC DEVICE TYPE FOR LINE\n         EJECT\n***********************************************************************\n*  LIST ALL UCB'S FOUND IN THE UCB CHAIN\n***********************************************************************\nUCBCHAIN EQU   *\n         L     R2,16                   R2 - ADDRESS OF CVT\n         USING CVT,R2                  ESTABLISH ADDRESSABILITY TO CVT\n         L     R3,CVTUCBA              R3 - ADDRESS OF 1ST UCB IN CHAIN\n         USING UCB,R3                  ESTABLISH ADDRESSABILITY TO UCB\n         MVC   CHANLGRP(2),UCBNAME     ESTABLISH CHANNEL GROUP\n         LA    R5,16                   R5 - MAX NUMBER OF UCB'S / LINE\n         LA    R10,CHANUCBS            R10 - INDEX INTO CHANUCBS LINE\n         BAL   R7,CHEKTYP              RETRIEVE GENERIC DEVICE TYPE\nUCBLOOP2 EQU   *\n         CLC   CHANLGRP(2),UCBNAME     IS THIS A NEW CHANNEL GROUP\n         BNE   NEWLINE2                YES, PREPARE A NEW OUTPUT LINE\n         C     R5,FULL00               MAX UCB'S PER LINE BEEN REACHED?\n         BE    NEWLINE2                YES, PREPARE A NEW OUTPUT LINE\nMOVEUCB2 EQU   *\n         BCTR  R5,0                    DECREMENT MAX NO. UCB'S / LINE\n         MVC   0(3,R10),UCBNAME        MOVE UCBNAME TO OUTPUT LINE\n         LA    R10,4(R10)              INCREMENT INDEX INTO CHANUCBS\n         L     R3,UCBNXUCB             R3 - ADDR OF NEXT UCB IN CHAIN\n         LTR   R3,R3                   IS THIS THE END OF UCB CHAIN?\n         BZ    LASTLINE                YES, PREPARE OUTPUT LAST LINE\n         USING UCB,R3                  ESTABLISH ADDRESSABILITY TO UCB\n         B     UCBLOOP2                PROCESS NEXT UCB\nNEWLINE2 EQU   *\n         BAL   R7,PUTDATA              WRITE OUTPUT LINE TO TERMINAL\n         LA    R7,UCBLOOP2             R7 - RETURN ADDR FROM CHEKTYP\n         B     CHEKTYP                 GET GENERIC DEVICE TYPE FOR LINE\nLASTLINE EQU   *\n         LA    R7,EXIT                 R7 - RETURN ADDR FROM CHEKTYP\n         B     PUTDATA                 WRITE LAST LINE TO TERMINAL\n         EJECT\n***********************************************************************\n*  EXTRACT GENERIC DEVICE TYPE\n***********************************************************************\nCHEKTYP  EQU   *\n         CLI   UCBTBYT3,UCB3TAPE       IS THIS UCB FOR A TAPE DEVICE?\n         BE    TAPEDEV                 YES, PROCESS AS A TAPE DEVICE\n         CLI   UCBTBYT3,UCB3DACC       IS THIS UCB FOR A DISK DEVICE?\n         BE    DISKDEV                 YES, PROCESS AS A DISK DEVICE\n         CLI   UCBTBYT3,UCB3DISP       IS THIS UCB FOR A DISPLAY DEV?\n         BE    DISPDEV                 YES, PROCESS AS A DISPLAY DEV\n         CLI   UCBTBYT3,UCB3UREC       IS THIS UCB FOR A UNIT REC DEV?\n         BE    URECDEV                 YES, PROCESS AS A UNIT REC DEV\n         CLI   UCBTBYT3,UCB3COMM       IS THIS UCB FOR COMMUNICATIONS?\n         BE    COMMDEV                 YES, PROCESS AS COMMUNICATIONS\n         MVC   CHANUNIT,=C'??????  '   UNKNOWN DEVICE TYPE\n         BR    R7                      RETURN\nTAPEDEV  EQU   *\n         TM    UCBTBYT4,TA3480         IS THIS A 3480 TAPE DEVICE?\n         BNO   TAPED1                  NO, CHECK FOR 3400\n         MVC   CHANUNIT,=C'3480      ' YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nTAPED1   EQU   *\n         TM    UCBTBYT4,TA3400         IS THIS A 3400 TAPE DEVICE?\n         BNOR  R7                      NO, LEAVE CHANUNIT FIELD BLANK\n         MVC   CHANUNIT,=C'3400    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\n         EJECT\nDISKDEV  EQU   *\n         TM    UCBTBYT4,DA3380         IS THIS A 3380 DISK DEVICE?\n         BNO   DISKD1                  NO, CHECK FOR 3330 MODEL 11\n         MVC   CHANUNIT,=C'3380    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nDISKD1   EQU   *\n         TM    UCBTBYT4,DA3330_1       IS THIS A 3330 MOD 11 DEVICE?\n         BNO   DISKD2                  NO, CHECK FOR 3375\n         MVC   CHANUNIT,=C'3330-1  '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nDISKD2   EQU   *\n         TM    UCBTBYT4,DA3375         IS THIS A 3375 DISK DEVICE?\n         BNO   DISKD3                  NO, CHECK FOR 3350\n         MVC   CHANUNIT,=C'3375    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nDISKD3   EQU   *\n         TM    UCBTBYT4,DA3350         IS THIS A 3350 DISK DEVICE?\n         BNO   DISKD4                  NO, CHECK FOR 3340\n         MVC   CHANUNIT,=C'3350    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nDISKD4   EQU   *\n         TM    UCBTBYT4,DA3340         IS THIS A 3340 DISK DEVICE?\n         BNO   DISKD5                  NO, CHECK FOR 3330 MOD 1 OR 2\n         MVC   CHANUNIT,=C'3340    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nDISKD5   EQU   *\n         TM    UCBTBYT4,DA3330         THIS A 3330 MOD 1 OR 2 DEVICE?\n         BNO   DISKD6                  NO, CHECK FOR 2305\n         MVC   CHANUNIT,=C'3330    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nDISKD6   EQU   *\n         TM    UCBTBYT4,DA2305         IS THIS A 2305 DISK DEVICE?\n         BNOR  R7                      NO, LEAVE CHANUNIT FIELD BLANK\n         MVC   CHANUNIT,=C'2305-2  '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nDISPDEV  EQU   *\n         TM    UCBTBYT4,GR3270         IS THIS A 3270 TYPE DISPLAY?\n         BNOR  R7                      NO, LEAVE CHANUNIT FIELD BLANK\n         MVC   CHANUNIT,=C'3270    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\n         EJECT\nURECDEV  EQU   *\n         TM    UCBTBYT4,UR3838         IS THIS A 3838 UNIT REC DEVICE?\n         BNO   URECD1                  NO, CHECK FOR 3540\n         MVC   CHANUNIT,=C'3838    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD1   EQU   *\n         TM    UCBTBYT4,UR3540         IS THIS A 3540 UNIT REC DEVICE?\n         BNO   URECD2                  NO, CHECK FOR 3851\n         MVC   CHANUNIT,=C'3540    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD2   EQU   *\n         TM    UCBTBYT4,UR3851         IS THIS A 3851 UNIT REC DEVICE?\n         BNO   URECD3                  NO, CHECK FOR 3890\n         MVC   CHANUNIT,=C'3851    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD3   EQU   *\n         TM    UCBTBYT4,UR3890         IS THIS A 3890 UNIT REC DEVICE?\n         BNO   URECD4                  NO, CHECK FOR 3800\n         MVC   CHANUNIT,=C'3890    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD4   EQU   *\n         TM    UCBTBYT4,UR3800         IS THIS A 3800 UNIT REC DEVICE?\n         BNO   URECD5                  NO, CHECK FOR 3525\n         MVC   CHANUNIT,=C'3800    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD5   EQU   *\n         TM    UCBTBYT4,UR3525         IS THIS A 3525 UNIT REC DEVICE?\n         BNO   URECD6                  NO, CHECK FOR 3203\n         MVC   CHANUNIT,=C'3525    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD6   EQU   *\n         TM    UCBTBYT4,UR3203_4       IS THIS A 3203 UNIT REC DEVICE?\n         BNO   URECD7                  NO, CHECK FOR 3211\n         MVC   CHANUNIT,=C'3203-4  '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD7   EQU   *\n         TM    UCBTBYT4,UR3211         IS THIS A 3211 UNIT REC DEVICE?\n         BNO   URECD8                  NO, CHECK FOR 1403\n         MVC   CHANUNIT,=C'3211    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD8   EQU   *\n         TM    UCBTBYT4,UR1403         IS THIS A 1403 UNIT REC DEVICE?\n         BNO   URECD9                  NO, CHECK FOR 3505\n         MVC   CHANUNIT,=C'1403    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nURECD9   EQU   *\n         TM    UCBTBYT4,UR3505         IS THIS A 3505 UNIT REC DEVICE?\n         BNOR  R7                      NO, LEAVE CHANUNIT FIELD BLANK\n         MVC   CHANUNIT,=C'3505    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\n         EJECT\nCOMMDEV  EQU   *\n         TM    UCBTBYT4,CE3791L        IS THIS A 3791L COMMUN DEVICE?\n         BNO   COMMD1                  NO, CHECK FOR 3705\n         MVC   CHANUNIT,=C'3791L   '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nCOMMD1   EQU   *\n         TM    UCBTBYT4,CE3705         IS THIS A 3705 COMMUN DEVICE?\n         BNO   COMMD2                  NO, CHECK FOR 2955\n         MVC   CHANUNIT,=C'3705    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nCOMMD2   EQU   *\n         TM    UCBTBYT4,CE2955         IS THIS A 2955 COMMUN DEVICE?\n         BNO   COMMD3                  NO, CHECK FOR 2703\n         MVC   CHANUNIT,=C'2955    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nCOMMD3   EQU   *\n         TM    UCBTBYT4,CE2703         IS THIS A 2703 COMMUN DEVICE?\n         BNO   COMMD4                  NO, CHECK FOR 2701\n         MVC   CHANUNIT,=C'2703    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nCOMMD4   EQU   *\n         TM    UCBTBYT4,CE2701         IS THIS A 2701 COMMUN DEVICE?\n         BNO   COMMD5                  NO, CHECK FOR 2702\n         MVC   CHANUNIT,=C'2701    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\nCOMMD5   EQU   *\n         TM    UCBTBYT4,CE2702         IS THIS A 2702 COMMUN DEVICE?\n         BNOR  R7                      NO, LEAVE CHANUNIT FIELD BLANK\n         MVC   CHANUNIT,=C'2702    '   YES, INITIALIZE CHANUNIT FIELD\n         BR    R7                      RETURN\n         EJECT\n***********************************************************************\n*  WRITE  INFORMATIONAL MESSAGE\n***********************************************************************\nPUTMSG   EQU   *\n         PUTLINE PARM=IOPB,                                            X\n               OUTPUT=(UNITOLD,TERM,SINGLE,INFOR),                     X\n               MF=(E,IOPLSECT)         ISSUE INFORMATIONAL OR ERROR MSG\n         MVC   UNITMSG+4(72),SPACES    CLEAR MESSAGE AREA\n         LTR   R15,R15                 CHECK PUTLINE RETURN CODE\n         BZR   R7                      ZERO? YES, RETURN\n         ABEND 405,DUMP                NO, ABEND AND DUMP\n         SPACE\n***********************************************************************\n*  WRITE  DATA LINE TO TERMINAL\n***********************************************************************\nPUTDATA  EQU   *\n         MVC   UNITLGTH(2),HALF76      LENGTH OF DATA MESSAGE\n         MVC   UNITLINE(72),CHANLINE   MOVE CHANNEL LINE TO UNITMSG\n         PUTLINE PARM=IOPB,                                            X\n               OUTPUT=(UNITMSG,TERM,SINGLE,DATA),                      X\n               MF=(E,IOPLSECT)         ISSUE INFORMATIONAL OR ERROR MSG\n         MVC   UNITMSG+4(72),SPACES    CLEAR MESSAGE AREA\n         MVC   CHANLINE(72),SPACES     CLEAR CHANNEL LINE\n         MVC   CHANLGRP(2),UCBNAME     CHANLGRP - CHANNEL GRP INDICATE\n         LA    R10,CHANUCBS            R10 - INDEX INTO CHANUCBS LINE\n         LA    R5,16                   R5 - MAX NUMBER OF UCB'S / LINE\n         LTR   R15,R15                 CHECK PUTLINE RETURN CODE\n         BZR   R7                      ZERO? YES, RETURN\n         ABEND 406,DUMP                NO, ABEND AND DUMP\n         SPACE\n***********************************************************************\n*  CLEAN UP AREAS GETMAINED BY PARSE AND UNITMAP,\n*  SET RETURN CODE, RESTORE REGISTERS AND EXIT\n***********************************************************************\nEXIT     EQU   *\n         LR    R2,R15                  R2 - PRESERVE RETURN CODE\n         IKJRLSA PARSBACK              RELEASE PARSE WORK AREA\n         LA    R0,WORKLEN              R0 - LENGTH OF DYNAMIC WORK AREA\n         LR    R1,R13                  R1 - ADDR OF DYNAMIC WORK AREA\n         L     R13,4(R13)              R13 - ADDR OF CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE DYNAMIC WORK AREA\n         LR    R15,R2                  RESTORE RETURN ADDRESS\n         RETURN (14,12),,RC=(15)       RESTORE REGISTERS AND RETURN\n         DS   0H\nLINEPTR  DS   F                        CURRENT PRINT LINE POINTER\nLINE     DS   CL74                     PRINT LINE\n         SPACE\n***********************************************************************\n*  EXECUTED INSTUCTIONS\n***********************************************************************\nMOVEUNIT MVC   UNITNAME(0),0(R6)       GET PARAMETER FROM COMMAND\n         EJECT\n***********************************************************************\n*  REGISTER EQUATES AND GENERIC DEVICE TABLE\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*                                      TABLE OF GENERIC DEVICE NAMES\nUR3505   EQU   X'06'                   3505 CARD READER       (3505  )\nUR1403   EQU   X'08'                   1403 OR 1404 PRINTER   (1403  )\nUR3211   EQU   X'09'                   3211 PRINTER           (3211  )\nUR3203_4 EQU   X'0B'                   3203 PRINTER MOD 5     (3203-4)\nUR3525   EQU   X'0C'                   3525 CARD PUNCH        (3525  )\nUR3800   EQU   X'0E'                   3800 PRINTING SUBSYS   (3800  )\nUR3890   EQU   X'16'                   3890 DOC PROCESSOR     (3890  )\nUR3851   EQU   X'42'                   3851 MASS STORAGE      (3851  )\nUR3540   EQU   X'44'                   3540                   (3540  )\nUR3838   EQU   X'4C'                   3838 ARRAY PROCESSOR   (3838  )\nTA3400   EQU   X'03'                   3400 SERIES TAPE UNITS (3400  )\nTA3480   EQU   X'80'                   3480 SERIES TAPE UNITS (3480  )\nDA2305   EQU   X'07'                   2305 FIXED HEAD STOR   (2305-2)\nDA3330   EQU   X'09'                   3330 DISK MODEL 1 OR 2 (3330  )\nDA3340   EQU   X'0A'                   3340 DISK              (3340  )\nDA3350   EQU   X'0B'                   3350 DISK MOD A2,B2,C2 (3350  )\nDA3375   EQU   X'0C'                   3375 DISK              (3375  )\nDA3330_1 EQU   X'0D'                   3330 DISK MODEL 11     (3330-1)\nDA3380   EQU   X'0E'                   3380 DISK              (3380  )\nGR3270   EQU   X'09'                   3277,3278,3279 DISPLAY (3270  )\nCE2702   EQU   X'01'                   2702 CNTL UNIT         (2702  )\nCE2701   EQU   X'02'                   2701 CNTL UNIT         (2701  )\nCE2703   EQU   X'03'                   2703 CNTL UNIT         (2703  )\nCE2955   EQU   X'04'                   2955 CNTL UNIT         (2955  )\nCE3705   EQU   X'05'                   3704/3705 CNTL UNITS   (3705  )\nCE3791L  EQU   X'F1'                   3791 LOGICAL CNTL UNIT (3791L )\n         EJECT\n***********************************************************************\n*  PARSE PARAMETERS\n***********************************************************************\nPARSE    DS   0F\nPARSPARM DC   7A(0)\nPARSECB  DC   F'0'\nPARSANS  DC   A(0)\nPCL      IKJPARM DSECT=PDL\nUNIT     IKJIDENT 'UNITNAME',FIRST=ANY,OTHER=ANY,MAXLNTH=8\n         IKJENDP\nPDL      DSECT\n         ORG   UNIT\nUNITPTR  DS    A\nUNITLEN  DS    H\n         SPACE\n***********************************************************************\n*  MAPPING MACROS\n***********************************************************************\n         CVT  DSECT=YES,PREFIX=NO      CVT\nUNITMAP  CSECT\n         IKJCPPL                       CPPL\nUNITMAP  CSECT\n         IKJECT                        ECT\nUNITMAP  CSECT\n         IKJPPL                        PPL\nPPLLEN   EQU   *-PPL\nUNITMAP  CSECT\n         IKJIOPL                       IOPL\nIOPLLEN  EQU   *-IOPL\nUNITMAP  CSECT\nUCB      DSECT\n         IEFUCBOB LIST=YES             UCB\nUNITMAP  CSECT\n         SPACE\n***********************************************************************\n*  GENERAL DECLARE STATEMENTS\n***********************************************************************\nPCLADDR  DC    A(PCL)\nFULL00   DC    F'0'\nFULL01   DC    F'1'\nHALF76   DC    H'76'\nFLAGPARM DC    X'1000'\nSPACES   DC    CL80' '\n         SPACE\n***********************************************************************\n*  INFORMATIONAL AND ERROR MESSAGES\n***********************************************************************\nUNTMSG0  DC    AL2(UNTMSG0L)\n         DC    AL2(0)\n         DC    CL72'UNITMAP TERMINATED - PARSE ERROR'\nUNTMSG0L EQU   *-UNTMSG0\nUNTMSG1  DC    AL2(UNTMSG1L)\n         DC    AL2(0)\n         DC    CL72'UNIT NAME NOT FOUND IN THE ELIGIBLE DEVICE TABLE'\nUNTMSG1L EQU   *-UNTMSG1\n         EJECT\n***********************************************************************\n*  DYNAMIC WORKAREA OBTAINED BY GETMAIN\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     UNITMAP REGISTER SAVE AREA\nECB      DS    F                       EVENT CONTROL BLOCK FOR PPL\nPARSBACK DS    F                       POINTER TO PDE RETURNED BY PARSE\nFULLWORK DS    F                       USED IN BINARY/PACKED CONVERSION\nDEC      DS    D                       USED IN BINARY/PACKED CONVERSION\nCONV     DS    D                       USED IN BINARY/PACKED CONVERSION\nHITFLG   DS    X                       PRINT FLAG\nPPLSECT  DS    0F                      PARSE PARAMETER LIST\n         ORG   PPLSECT+PPLLEN\nIOPLSECT DS    0F                      I/O PARAMETER LIST\n         ORG   IOPLSECT+IOPLLEN\nLINKLIST DS    0FL2                    LIST FORMAT OF LINK MACRO\nUTABLPTR DS    F                       POINTER TO UNIT TABLE\nFLAGSPTR DS    F                       POINTER TO FLAG PARAMETER\n         DS    0F\nUNITABLE DS    0CL16                   UNIT TABLE USED BY IEFEB4UV\nUNITNAME DS    CL8                     ESOTERIC OR GENERIC UNIT NAME\nUCBLADDR DS    A                       ADDR OF UCB LIST FROM IEFEB4UV\nATTRAREA DS    F                       UCB ATTRIBUTE AREA (NOT USED)\nUNITOLD  DS    0FL2                    UNITMSG OUTPUT LINE DESCRIPTOR\nUNITNUM  DS    F                       NUMBER OF UNITMSG OUTPUT LINES\nUNITADDR DS    F                       ADDRESS OF UNITMSG\nUNITMSG  DS    0CL76                   INFORMATIONAL OR ERROR MESSAGE\nUNITLGTH DS    2H                      LENGTH OF MESSAGE (76)\nUNITLINE DS    CL72                    MESSAGE TEXT\nCHANLGRP DS    CL2                     CHANNEL GROUP INDICATOR\nCHANLINE DS    0CL72                   CHANNEL STRING INFORMATION\nCHANUNIT DS    CL8                     GENERIC OR ESOTERIC UNIT NAME\nCHANUCBS DS    CL64                    UCB NAMES (UP TO 16)\nIOPB     PUTLINE MF=L                  LIST FORM OF PUTLINE MACRO\nWORKLEN  EQU   *-WORKAREA              LENGTH OF DYNAMIC WORK AREA\n         END   UNITMAP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNTMAP#1": {"ttr": 18439, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x00\\x01\\x00\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 256, "newlines": 256, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TSO COMMAND TO MAP UNIT NAMES AND DEVICES'\n**********************************************************************\n*                                                                    *\n*  NAME      -   UNITMAP                                             *\n*                                                                    *\n*  FUNCTION  -   MAP UNIT NAMES FROM EDT                             *\n*                                                                    *\n*  VERSION   -   2.0                                                 *\n*                                                                    *\n*  DATE      -   12/30/80                                            *\n*                                                                    *\n*  AUTHOR    -   C. LYONS                                            *\n*                                                                    *\n*  SYSTEM    -   MVS 3.8 AND MVS/SE2                                 *\n*                                                                    *\n*  OUTPUT    -   UNITNAME - CUU,CUU,CUU                              *\n*                                                                    *\n*  ATTRIB    -   NON-REUSABLE                                        *\n*                                                                    *\n*  MACROS    -   FULLSAVE,FULLRTRN                                   *\n*                                                                    *\n*  DSECTS    -   CVT,IEFJESCT,IEFUCBOB,EDT,IKJCPPL,IKJECT,IKJPPL     *\n*                                                                    *\n*  LOGIC     -                                                       *\n*                                                                    *\n*               DO I TO # UNIT NAMES;                                *\n*                DO J TO # GENERIC DEVICE TYPES WITHIN A UNIT NAME;  *\n*                 DO K TO # GROUPS WITHIN A GENERIC DEVICE TYPE;     *\n*                  DO L TO # UCBS WITHIN A GROUP;                    *\n*                   PRINT UNITNAME,DEVICE ADDRESS;                   *\n*                  END L;                                            *\n*                 END K;                                             *\n*                END J;                                              *\n*               END I;                                               *\n*                                                                    *\n*  REGS      -                                                       *\n*              R0,R1       -   WORK                                  *\n*              R2,R15      -   WORK                                  *\n*              R3          -   # UNIT NAMES                          *\n*              R4          -   LENGTH OF A UNIT NAME ENTRY           *\n*              R5          -   A(CURRENT UNIT NAME ENTRY)            *\n*              R6          -   # GENERICS WITHIN UNIT NAME           *\n*              R7          -   A(FIRST GENERIC ENTRY)                *\n*              R8          -   # GROUPS WITHIN A GENERIC             *\n*              R9          -   A(FIRST GROUP ENTRY POINTER)          *\n*              R10         -   A(FIRST GROUP ENTRY)                  *\n*              R11         -   # UCBS WITHIN A GROUP                 *\n*              R14         -   A(FIRST UCB ENTRY)                    *\n*                                                                    *\n* INSTALL    -   ASSEMBLE UNITMAP                                    *\n*                LINK UNITMAP                                        *\n*                PLACE UNITMAP IN LINKLIST LIBRARY                   *\n**********************************************************************\nUNITMAP  CSECT\n         REGS  R                       REGISTER EQUATES\n         FULLSAVE RENT=NO              ENTRANCE CONVENTIONS\n         MVI   HITFLG,X'FF'            ASSUME SOMETHING WILL PRINT\n         LR    R3,R1                   SAVE CPPL ADDR\n         USING CPPL,R3\n         L     R4,CPPLECT              ECT\n         USING ECT,R4\n         TM    ECTSWS,ECTNOPD          ANY OPERANDS?\n         BO    SCANEDT                 NO, BYPASS PARSE\n         MVI   HITFLG,X'00'            IF PARSING, ASSUME NOTHING\n         LA    R4,PARSPARM                         WILL PRINT\n         USING PPL,R4                  BUILD PARSE PARAMETER LIST\n         MVC   PPLUPT,CPPLUPT\n         MVC   PPLECT,CPPLECT\n         MVC   PPLCBUF,CPPLCBUF\n         DROP  R3\n         LA    R1,PARSECB\n         ST    R1,PPLECB\n         L     R1,=A(PCL)\n         ST    R1,PPLPCL\n         LA    R1,PARSANS\n         ST    R1,PPLANS\n         CALLTSSR EP=IKJPARS,MF=(E,(R4))\n         DROP  R4\n         L     R1,PARSANS             CHECK IF PARSE OK\n         LTR   R1,R1\n         BP    SCANEDT\n         LA    R1,=CL40'UNITMAP TERMINATED - PARSE ERROR'\n         LA    R0,40\n         TPUT  (1),(0),R\n         B     EXIT\n*\n*  FIND THE EDT'S LOOKUP SECTION; GET # UNIT NAMES\n*\nSCANEDT  L     R2,CVTPTR               CVT\n         USING CVT,R2\n         L     R2,CVTJESCT             JESCT\n         USING JESCT,R2\n         L     R2,JESEDT               EDT\n         USING EDTHEAD,R2\n         L     R1,LOOKPTR              LOOKUP SECTION\n         DROP  R2\n         USING LOOKSEC,R1\n         L     R3,LOOK#ENT             # UNIT ENTRIES\n         L     R4,LOOKLENT             L'ENTRY\n         LA    R5,LOOKUNIT             ->UNITNAME\n         DROP  R1\n*\n*  DO I TO # UNIT NAMES;\n*\nUPUT     L     R1,PARSANS\n         LTR   R1,R1\n         BZ    NOPARSE\n         USING PDL,R1                  SEE IF UNITNAME SEARCH INDEX\n         L     R15,UNITPTR                SATISFIED.\n         LH    R2,UNITLEN\n         BCTR  R2,0\n         EX    R2,CHKUNIT\n         BNE   NOPUT\n         MVI   HITFLG,X'FF'            SAY INDEX SATISFIED\n         DROP  R1\nNOPARSE  MVI   LINE,C' '               CLEAR PRINT LINE\n         MVC   LINE+1(L'LINE-1),LINE\n         MVC   LINE(8),0(R5)           MOVE UNIT NAME\n         LA    R1,LINE+9               UPDATE LINE POINTER\n         ST    R1,LINEPTR\n         USING LOOKUNIT,R5\n         L     R6,LOOK#GEN             # GENERICS WITHIN THIS UNIT\n         L     R7,LOOKGPTR             ->FIRST GENERIC ENTRY\n         DROP  R5\n         USING GENSEC,R7\n*\n*  DO J TO # GENERIC DEVICE TYPES WITHIN A UNIT NAME;\n*\nUGEN     L     R8,GEN#GRP              # GROUPS WITHIN GENERIC\n         L     R9,GENGPTR              ->FIRST GROUP POINTER\n         DROP  R7\n         USING GPTRSEC,R9\n*\n*  DO K TO # DEVICE GROUPS WITHIN A GENERIC DEVICE TYPE;\n*\nUGRP     L     R10,GPTRGRP             ->GROUP SECTION\n         DROP  R9\n         USING GRPSEC,R10\n         L     R11,GRP#UCB             # UCBS WITHIN GROUP\n         L     R14,GRPOUCB             ->FIRST UCB OFFSET\n         DROP  R10\n*\n*  DO L TO # UCBS WITHIN A DEVICE GROUP;\n*\nUCB      LH    R15,0(0,R14)            GET UCB OFFSET\n         SLL   R15,1                   X 2\n         L     R1,CVTPTR               CVT\n         USING CVT,R1\n         L     R1,CVTILK2              ->UCB LOOKUP TABLE\n         LH    R1,0(R15,R1)            UCB ADDRESS\n         USING UCBCMSEG,R1\n         LA    R15,UCBNAME             ->DEVICE ADDRESS\n         DROP  R1\n*\n*  BUILD A PRINT LINE\n*\n         L     R1,LINEPTR              LINE FILLED?\n         LA    R0,LINE+71\n         CR    R1,R0\n         BH    PUTIT                   YES, PUT LINE\n         MVC   0(3,R1),0(R15)\n         LA    R1,4(0,R1)              NO, MOVE DEVICE ADDR\n         ST    R1,LINEPTR                  AND UPDATE LINE POINTER\n         B     NEXTUCB                 GET NEXT UCB\nPUTIT    LR    R2,R15                  SAVE ->DEVICE ADDRESS\n         TPUT  LINE,74                 PRINT FILLED LINE\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE   CLEAR LINE\n         LA    R1,LINE+13\n         ST    R1,LINEPTR              UPDATE LINE POINTER\n         MVC   LINE+9(3),0(R2)         MOVE WHAT WOULDN'T FIT\n*\n*  END L;\n*\nNEXTUCB  LA    R14,2(0,R14)            NEXT UCB OFFSET\n         BCT   R11,UCB                 LOOP THROUGH UCBS\n*\n*  END K;\n*\n         LA    R9,4(0,R9)              NEXT GROUP ENTRY\n         BCT   R8,UGRP                 LOOP THROUGH GROUPS\n*\n*  END J;\n*\n         LA    R7,12(0,R7)             NEXT GENERIC ENTRY\n         BCT   R6,UGEN                 LOOP THROUGH GENERIC ENTRIES\n         LA    R1,LINE+75              SEE IF A NON-FILLED LINE\n         C     R1,LINEPTR                  STILL NEEDS TO BE PRINTED.\n         BE    NOPUT                       IF SO,\n         TPUT  LINE,74                           PRINT IT.\n*\n*  END I;\n*\nNOPUT    LA    R5,0(R4,R5)             NEXT ENTRY\n         BCT   R3,UPUT                 LOOP THROUGH UNITNAME ENTRIES\n         CLI   HITFLG,X'FF'            ANYTHING PRINTED?\n         BE    EXIT\n         LA    R1,=CL40'NO UNIT NAMES SATISFY SEARCH CRITERIA'\n         LA    R0,40\n         TPUT  (1),(0),R\n         SPACE 2\nEXIT     IKJRLSA PARSANS               RELEASE PARSE WORK AREA\n         FULLRTRN RENT=NO              EXIT\n         SPACE 2\n         DS   0H\nCHKUNIT  CLC  0(*-*,R15),0(R5)         CMP CURR UNIT TO OPERAND\nLINEPTR  DS   F                        CURRENT PRINT LINE POINTER\nLINE     DS   CL74                     PRINT LINE\nHITFLG   DC   X'0'                     PRINT FLAG\n*\n*  PARSE PARAMETERS\n*\nPARSE    DS   0F\nPARSPARM DC   7A(0)\nPARSECB  DC   F'0'\nPARSANS  DC   A(0)\nPCL      IKJPARM DSECT=PDL\nUNIT     IKJIDENT 'UNITNAME',FIRST=ANY,OTHER=ANY,MAXLNTH=8\n         IKJENDP\n         TITLE 'DSECTS'\nPDL      DSECT\n         ORG   UNIT\nUNITPTR  DS    A\nUNITLEN  DS    H\n         CVT  DSECT=YES,PREFIX=NO      CVT\n         IKJCPPL                       CPPL\n         IKJECT                        ECT\n         IKJPPL                        PPL\n         IEFJESCT                      JESCT\n         IEFUCBOB                      UCB\nEDT      DSECT                         ELIGIBLE DEVICE TABLE\nEDTHEAD  EQU   *                       EDT HEADER\nLOOKPTR  DS    A                       ->LOOKUP SECTION\n         ORG   EDT\nLOOKSEC  EQU   *                       LOOKUP SECTION\nLOOK#ENT DS    F                       # ENTRIES\nLOOKLENT DS    F                       LENGTH OF AN ENTRY\nLOOKUNIT DS    CL8                     UNIT NAME\nLOOKVAL  DS    F                       LOOKUP VALUE\nLOOKMPTR DS    A                       ->GROUP MASK ENTRY\nLOOK#GEN DS    F                       # GENERICS\nLOOKGPTR DS    A                       ->GENERIC SECTION\n         ORG   EDT\nGENSEC   EQU   *                       GENERIC SECTION\nGENDEV   DS    XL4                     GENERIC DEVICE TYPE\nGEN#GRP  DS    F                       # GROUPS\nGENGPTR  DS    A                       ->FIRST GROUP POINTER\n         ORG   EDT\nGPTRSEC  EQU   *                       GROUP POINTER TABLE\nGPTRGRP  DS    A                       ->FIRST GROUP ENTRY\n         ORG   EDT\nGRPSEC   EQU   *                       GROUP SECTION ENTRY\nGRPID    DS    F                       GROUP ID\nGRP#UCB  DS    F                       # UCBS\nGRPOUCB  DS    A                       ->FIRST UCB ENTRY\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USERLIST": {"ttr": 18689, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x01\\x04\\x01\\x04\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 260, "newlines": 260, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'CREATE SEQUENTIAL FILE OF RACF USER PROFILES'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = USERLIST                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = CREATE A SEQUENTIAL FILE             *\n*                OF RACF USERS AND THEIR DEFAULT GROUPS.              *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CREATES SEQUENTIAL RACF FILE FOR USE IN              *\n*                CREATING THE IEAICS00 IN SYS1.PARMLIB.               *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                07/10/86  WRITTEN.     BHC.                          *\n*                                                                     *\n*                                                                     *\n* RUN INSTRUCTIONS:                                                   *\n*                                                                     *\n* SYSPRINT DD - MUST BE PRESENT FOR ERROR & INFORMATION MSGS          *\n*                                                                     *\n* SYSUT2 DD - SEQUENTIAL OUTPUT DATA SET (RECFM=FB, LRECL=80)         *\n*                                                                     *\n***********************************************************************\nUSERLIST CSECT\n         SAVE  (14,12),,USERLIST_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15                  ESTABLISH R12 AS BASE REG\n         USING USERLIST,R12,R11         TELL ASSEMBLER\n         LA    R11,4095(R12)\n         LA    R11,1(R11)\n         ST    R13,SAVEAREA+4           SAVE OS SAVE AREA ADDRESS\n         LR    R6,R13                   SAVE IT IN R6\n         LA    R13,SAVEAREA             POINT R13 AT OUR SAVE AREA\n         ST    R13,8(R6)                STORE OUR SAVEAREA ADDR IN OS\n         PRINT NOGEN                    SAVE AREA\n**********   FIND DDNAMES THAT ARE PRESENT\n         SLR   R3,R3                    CLEAR R3\n         L     R2,16                    ADDRESS OF CVT\n         L     R2,0(R2)                 ADDRESS OF TCB ADDRESS WORDS\n         L     R2,4(R2)                 ADDRESS OF CURRENT TCB\n         L     R2,12(R2)                ADDRESS OF THIS TCBS TIOT\n         LA    R2,24(R2)                ADDRESS OF START OF DD ENTRY\n         IC    R3,0(R2)                 LENGTH OF THIS ENTRY\nFINDDD1  EQU   *\n         LTR   R3,R3\n         BZ    DONEDD\n         CLC   4(8,R2),=CL8'SYSPRINT'   IS IT SYSPRINT?\n         BE    GOTPRINT\n         CLC   4(8,R2),=CL8'SYSUT2'     IS IT SYSUT2?\n         BE    GOTSYS2\n         B     NEXTDD                   DONT KNOW WHY BUT TRY AGAIN\nGOTPRINT EQU   *\n         MVI   PRINTSW,C'1'            SET SYSPRINT DD PRESENT\n         B     NEXTDD\nGOTSYS2  EQU   *\n         MVI   SYS2SW,C'1'             SET SYSUT2 DD PRESENT\n         B     NEXTDD\nNEXTDD   EQU   *\n         AR    R2,R3                    BUMP TO NEXT DD ENTRY\n         IC    R3,0(R2)                 GET LENGTH OF ENTRY\n         B     FINDDD1                  LOOP\nDONEDD   EQU   *\n**************       VALIDATE  DD'S\n         CLI   SYS2SW,C'1'              IF SYSUT2 DD NOT PRESENT\n         BE    *+8                       PRINT ERROR MESSAGE\n         B     ERROR01                    AND QUIT\n         CLI   PRINTSW,C'1'             IF SYSPRINT NOT PRESENT\n         BE    *+8                       PRINT ERROR MESSAGE\n         B     ERROR02A                   AND QUIT\n***************   INITIALIZE\n         MVI   PRINTER,X'40'            INITIALIZE PRINT LINE\n         MVC   PRINTER+1(131),PRINTER\n         MVC   NUMPROFS,ZEROS          INITIALIZE PROFILE COUNTER\n         MVC   RACFWORK(4),RACFLENG      STORE LENGTH OF WORK AREA\n         MVI   OUTREC,X'40'            CLEAR OUTPUT AREA\n         MVC   OUTREC+1(L'OUTREC-1),OUTREC\n***************   OPEN SYSPRINT\n         OPEN  (SYSPRINT,OUTPUT,SYSUT2,OUTPUT)  OPEN OUTPUT DATASETS\n***************   OPEN AND READ SYSIN\n*************************** GET NEXT USER RACF PROFILE\nGETUSR   EQU   *\n         MVC   TYPE,=CL3'USR'          INIT PROFILE TYPE\n         MVC   NUMPROFS,ZEROS          INIT COUNTER\n         MVI   DSNAME,X'40'            INITIALIZE RACF NAME AREA\n         MVC   DSNAME+1(43),DSNAME\n         MVC   DSNAME(2),=CL2'T0'      INITIALIZE RACF NAME AREA\n         MVI   DSNAMEL,X'02'           INITIALIZE RACF NAME LENGTH\nGETUSR1  EQU   *\n         ICHEINTY NEXTC,TYPE='USR',ENTRY=DSNAMEL,                      X\n               ACTIONS=(U1,U2),                                        X\n               WKAREA=RACFWORK\n*\n*\n         LTR   R15,R15                 IF OK,\n         BZ    PROFU                      CONTINUE\n         C     R15,=F'12'              END OF RACF GROUP PROFILES?\n         BE    ENDUSR                  IF SO, GO CLOSE AND END\n         B     CLOSEX                  IF NOT, TAKE ERROR EXIT\nPROFU    EQU   *\n         LA    R2,RACFWORK             GET ADDRESS OF RACF WORK AREA\n         USING USRFLD0,R2              ESTABLISH ADDRESSABILITY\n         LA    R3,OUTREC               GET ADDRESS OF OUTPUT RECORD\n         USING TYPE2,R3                ESTABLISH ADDRESSABILITY\n         MVI   T2NAME,X'40'            CLEAR USER\n         MVC   T2NAME+1(L'T2NAME-1),T2NAME\n         SR    R7,R7\n         ICM   R7,B'0001',DSNAMEL      GET LENGTH OF USER\n         BCTR  R7,0                    DECREMENT\n         LA    R8,T2NAME\n         EX    R7,MOVNAME\n         MVC   T2PGMNM,USPGMNM         LOAD NAME OF USER\n         MVC   T2DFLTG,USDFLTG         LOAD DEFAULT GROUP\nGU70     EQU   *\n         BAL   R5,WRITEIT              WRITE RECORD INTO SYSUT2 FILE\n         L     R8,NUMPROFS\n         LA    R8,1(R8)                COUNT THE PROFILE\n         ST    R8,NUMPROFS\n         CLC   DSNAME(6),=CL6'T99999'  LAST USER PROCESSED?\n         BNE   GETUSR1                 IF NOT, CONTINUE\nENDUSR   EQU   *\n         BAL   R5,INFOMSG              WRITE INFORMATION MESSAGE\n         B     CLOSE                   ELSE, END PROGRAM\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (SYSUT2)                CLOSE THE FILE\n         CLOSE (SYSPRINT)\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     RETURN\nENDIN    EQU   *\nCLOSE    EQU   *\n         CLOSE (SYSUT2)                CLOSE THE FILE\n         CLOSE (SYSPRINT)\n         SR    R15,R15                 SET RETURN CODE\nRETURN   L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n***********************************************************************\n*\n*  WRITE THE OUTPUT LINE\n*\nWRITEIT  EQU   *\n         PUT   SYSUT2,OUTREC           PRINT THE LINE\n         MVI   OUTREC,X'40'            CLEAR OUTPUT AREA\n         MVC   OUTREC+1(L'OUTREC-1),OUTREC\n         BR    R5                      RETURN\n*\nPRINTIT  EQU   *\n         PUT   SYSPRINT,PRINTER        PRINT THE LINE\n         MVI   PRINTER,X'40'           CLEAR PRINT LINE\n         MVC   PRINTER+1(131),PRINTER\n         BR    R8                      RETURN\n*\nERROR01  EQU   *\n         WTO   'USERLIST - SYSUT2 DD MISSING OR MISPELLED',            X\n               ROUTCDE=(11)\n         L     R15,=F'16'            SET RETURN CODE TO 16\n         B     RETURN                END\n*\nERROR02A EQU   *\n         WTO   'USERLIST - SYSPRINT DD MISSING OR MISPELLED',          X\n               ROUTCDE=(11)\n         L     R15,=F'16'            SET RETURN CODE TO 16\n         B     RETURN                END\n*\nINFOMSG  EQU   *\n         L     R8,NUMPROFS          GET NUMBER PROCESSED\n         CVD   R8,PWORK             CONVERT TO PACKED DECIMAL\n         UNPK  WORK,PWORK+3(5)      UNPACK\n         MVZ   WORK+7(1),WORK+6     MOVE ZONE BYTE\n         MVC   INFONUM,WORK         LOAD INTO MESSAGE\n         MVC   INFOTYP,TYPE         LOAD TYPE INTO MESSAGE\n         MVC   PRINTER+2(L'INFOLINE),INFOLINE   LOAD INTO PRINT BUFFER\n         BAL   R8,PRINTIT           PRINT THE LINE\n         BR    R5                   CONTINUE\n*\n***********************************************************************\n*                     CONSTANT DATA                                   *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*    THE FOLLOWING FIELDS WILL BE RETRIEVED FROM THE RACF DATA SET\n*\n*\nU1       ICHEACTN FIELD=PGMRNAME\nU2       ICHEACTN FIELD=DFLTGRP\n*\n***********************************************************************\nSAVEAREA DS    18F\n*\nRETCODE  DS    1F'0'\n*\n         DS    1F'0'\nOUTREC   DS    CL80\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,LRECL=132,            X\n               MACRF=(PM)\n*\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=FB,LRECL=80,               X\n               MACRF=(PM)\n*\nPRINTER  DS    CL132\nSYS2SW   DC    C'0'           SYSUT2 DD -  1 PRESENT, 0 MISSING\nPRINTSW  DC    C'0'           SYSPRINT -  1 PRESENT, 0 MISSING\nDSNAMEL  DS    XL1\nDSNAME   DS    CL44\nRACFWORK DS    XL3076\nTYPE     DS    CL3\nWORK     DS    CL8\nNUMPROFS DS    1F\nPWORK    DS    1D\n*\nRACFLENG DC    F'3072'\n*\nZEROS    DC    XL8'00'\n*\nMOVNAME  MVC   0(0,R8),DSNAME\n*\nINFOLINE DS    0CL45\n         DC    C'NUMBER OF \"'\nINFOTYP  DS    CL3\n         DC    C'\" PROFILES PROCESSED = '\nINFONUM  DS    CL8\n*\n*\nUSRFLD0  DSECT\n         DS    CL30\nUSPGMNM  DS    CL20\n         DS    CL2\nUSDFLTG  DS    CL8\n*\n*\nTYPE2    DSECT          USER PROFILE RECORD\nT2NAME   DS    CL8      USERID\nT2PGMNM  DS    CL20     THE NAME OF THE USER\nT2DFLTG  DS    CL8      THE DEFAULT GROUP ASSOCIATED WITH THE USER\n*\n         ICHPRCVT\n         CVT   DSECT=YES\n*\n         END   USERLIST\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRADD1": {"ttr": 18694, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x06\\xcb\\x06\\xcb\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1739, "newlines": 1739, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRADD1 - DELUXE USER REGISTRATION (ADD A USER)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRADD1                                        *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              04/30/86  WRITTEN.                               JWC.  *\n*                                                                     *\n*              05/06/86  ADD 'OWNER', 'DFLTGRP' VERIFICATION.   JWC.  *\n*                                                                     *\n*              05/08/86  ADD REGIONS.                           JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRADD1 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRADD1 - INITIALIZATION SECTION'\nUSRADD1  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRADD1_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRADD1,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING USRADD1+4095,R11        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         LA    R10,4095(R11)           LOAD REG 11 WITH ENTRY + 4095\n         USING USRADD1+8190,R10        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVI   ADDFLAG,OFF             INITIALIZE ADDFLAG\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,NAME,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,RACFATT,'CHAR',12)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,USERDATA,'CHAR',70)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,ROOM,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,CNCTGRP1,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,SELCT,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,TSODEST0,'CHAR',14)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,ZTEMPF,'CHAR',44)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFA                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFA    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTA,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFB                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFB    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTB,USERMSGL,'CHAR',78)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFC                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFC    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTF,ZLLGJOB1,'CHAR',80)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFD                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFD    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST$,TSOMAXR$,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFE                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFE    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST1,TSOMAXR1,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFF                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFF    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST2,TSOMAXR2,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFG                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFG    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST3,TSOMAXR3,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFH                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFH    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST4,TSOMAXR4,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFI                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFI    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST5,TSOMAXR5,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFJ                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFJ    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST6,TSOMAXR6,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFK                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFK    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST7,TSOMAXR7,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFL                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFL    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST8,TSOMAXR8,'CHAR',8)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN 'USERTAB'\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN','USERTAB','WRITE','USRTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBCREATE                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE FILE TAILORING TABLE\n***********************************************************************\nTBCREATE EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n*                                      CREATE A TABLE\n         ISPCALL ('TBCREATE','USRADD',' ',NAMELSTC,'WRITE','REPLACE')\n         B     TBCRE10(R15)            CHECK RETURN CODE\nTBCRE10  EQU   *\n         B     INITVAL                 RC = 00 (CONTINUE)\n         B     INITVAL                 RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'USRADD1 - PROCESSING SECTION'\n***********************************************************************\n*  INITIALIZATION SECTION - INITIALIZE TABLE VALUES\n***********************************************************************\nINITVAL  EQU   *\n         MVC   OWNER,SPACES            INITIALIZATION\n         MVC   DFLTGRP,SPACES          INITIALIZATION\n         MVC   RACFATT0,SPACES         INITIALIZATION\n         MVC   RACFATT1,SPACES         INITIALIZATION\n         MVC   RACFATT2,SPACES         INITIALIZATION\n         MVC   RACFATT3,SPACES         INITIALIZATION\n         MVC   RACFATT4,SPACES         INITIALIZATION\n         MVC   RACFATT5,SPACES         INITIALIZATION\n         MVC   REVOKE,NONE             INITIALIZATION\n         MVC   RESUME,NONE             INITIALIZATION\n         MVC   USERDATA,SPACES         INITIALIZATION\n         MVC   NCCFUSER,NO             INITIALIZATION\n         MVC   TSOUSER,NO              INITIALIZATION\n         MVC   ROOM,SPACES             INITIALIZATION\n         MVC   AUTHORTY,SPACES         INITIALIZATION\n         MVC   UACC,SPACES             INITIALIZATION\n         MVC   CNCTGRP1,SPACES         INITIALIZATION\n         MVC   NCCFPROF,NCCFINIT       INITIALIZATION\nINITV10  EQU   *\n         MVC   USERID,SPACES           INITIALIZATION\n         MVC   NAME,SPACES             INITIALIZATION\n         MVC   LNAME,SPACES            INITIALIZATION\n         MVC   FNAME,SPACES            INITIALIZATION\n         MVC   EXTENS,SPACES           INITIALIZATION\n         MVC   TSOMAXR,SPACES          INITIALIZATION\n         MVC   TSODEST,SPACES          INITIALIZATION\n         MVC   TSONAM0,SPACES          INITIALIZATION\n         MVC   TSOSIZ0,SPACES          INITIALIZATION\n         MVC   TSOUNT0,SPACES          INITIALIZATION\n         MVC   TSOATT0,NOACCT          INITIALIZATION\n         MVC   TSOATT1,NOJCL           INITIALIZATION\n         MVC   TSOATT2,NOMOUNT         INITIALIZATION\n         MVC   TSOATT3,NOOPER          INITIALIZATION\n         MVC   TSOMAXR$,SPACES         INITIALIZATION\n         MVC   TSODEST$,SPACES         INITIALIZATION\n         MVC   TSONAM0$,SPACES         INITIALIZATION\n         MVC   TSOSIZ0$,SPACES         INITIALIZATION\n         MVC   TSOUNT0$,SPACES         INITIALIZATION\n         MVC   TSONAM1$,SPACES         INITIALIZATION\n         MVC   TSOSIZ1$,SPACES         INITIALIZATION\n         MVC   TSOUNT1$,SPACES         INITIALIZATION\n         MVC   TSONAM2$,SPACES         INITIALIZATION\n         MVC   TSOSIZ2$,SPACES         INITIALIZATION\n         MVC   TSOUNT2$,SPACES         INITIALIZATION\n         MVC   TSOATT0$,SPACES         INITIALIZATION\n         MVC   TSOATT1$,SPACES         INITIALIZATION\n         MVC   TSOATT2$,SPACES         INITIALIZATION\n         MVC   TSOATT3$,SPACES         INITIALIZATION\n         MVC   TSOMAXR1,SPACES         INITIALIZATION\n         MVC   TSODEST1,SPACES         INITIALIZATION\n         MVC   TSONAM01,SPACES         INITIALIZATION\n         MVC   TSOSIZ01,SPACES         INITIALIZATION\n         MVC   TSOUNT01,SPACES         INITIALIZATION\n         MVC   TSONAM11,SPACES         INITIALIZATION\n         MVC   TSOSIZ11,SPACES         INITIALIZATION\n         MVC   TSOUNT11,SPACES         INITIALIZATION\n         MVC   TSONAM21,SPACES         INITIALIZATION\n         MVC   TSOSIZ21,SPACES         INITIALIZATION\n         MVC   TSOUNT21,SPACES         INITIALIZATION\n         MVC   TSOATT01,SPACES         INITIALIZATION\n         MVC   TSOATT11,SPACES         INITIALIZATION\n         MVC   TSOATT21,SPACES         INITIALIZATION\n         MVC   TSOATT31,SPACES         INITIALIZATION\n         MVC   TSOMAXR2,SPACES         INITIALIZATION\n         MVC   TSODEST2,SPACES         INITIALIZATION\n         MVC   TSONAM02,SPACES         INITIALIZATION\n         MVC   TSOSIZ02,SPACES         INITIALIZATION\n         MVC   TSOUNT02,SPACES         INITIALIZATION\n         MVC   TSONAM12,SPACES         INITIALIZATION\n         MVC   TSOSIZ12,SPACES         INITIALIZATION\n         MVC   TSOUNT12,SPACES         INITIALIZATION\n         MVC   TSONAM22,SPACES         INITIALIZATION\n         MVC   TSOSIZ22,SPACES         INITIALIZATION\n         MVC   TSOUNT22,SPACES         INITIALIZATION\n         MVC   TSOATT02,SPACES         INITIALIZATION\n         MVC   TSOATT12,SPACES         INITIALIZATION\n         MVC   TSOATT22,SPACES         INITIALIZATION\n         MVC   TSOATT32,SPACES         INITIALIZATION\n         MVC   TSOMAXR3,SPACES         INITIALIZATION\n         MVC   TSODEST3,SPACES         INITIALIZATION\n         MVC   TSONAM03,SPACES         INITIALIZATION\n         MVC   TSOSIZ03,SPACES         INITIALIZATION\n         MVC   TSOUNT03,SPACES         INITIALIZATION\n         MVC   TSONAM13,SPACES         INITIALIZATION\n         MVC   TSOSIZ13,SPACES         INITIALIZATION\n         MVC   TSOUNT13,SPACES         INITIALIZATION\n         MVC   TSONAM23,SPACES         INITIALIZATION\n         MVC   TSOSIZ23,SPACES         INITIALIZATION\n         MVC   TSOUNT23,SPACES         INITIALIZATION\n         MVC   TSOATT03,SPACES         INITIALIZATION\n         MVC   TSOATT13,SPACES         INITIALIZATION\n         MVC   TSOATT23,SPACES         INITIALIZATION\n         MVC   TSOATT33,SPACES         INITIALIZATION\n         MVC   TSOMAXR4,SPACES         INITIALIZATION\n         MVC   TSODEST4,SPACES         INITIALIZATION\n         MVC   TSONAM04,SPACES         INITIALIZATION\n         MVC   TSOSIZ04,SPACES         INITIALIZATION\n         MVC   TSOUNT04,SPACES         INITIALIZATION\n         MVC   TSONAM14,SPACES         INITIALIZATION\n         MVC   TSOSIZ14,SPACES         INITIALIZATION\n         MVC   TSOUNT14,SPACES         INITIALIZATION\n         MVC   TSONAM24,SPACES         INITIALIZATION\n         MVC   TSOSIZ24,SPACES         INITIALIZATION\n         MVC   TSOUNT24,SPACES         INITIALIZATION\n         MVC   TSOATT04,SPACES         INITIALIZATION\n         MVC   TSOATT14,SPACES         INITIALIZATION\n         MVC   TSOATT24,SPACES         INITIALIZATION\n         MVC   TSOATT34,SPACES         INITIALIZATION\n         MVC   TSOMAXR5,SPACES         INITIALIZATION\n         MVC   TSODEST5,SPACES         INITIALIZATION\n         MVC   TSONAM05,SPACES         INITIALIZATION\n         MVC   TSOSIZ05,SPACES         INITIALIZATION\n         MVC   TSOUNT05,SPACES         INITIALIZATION\n         MVC   TSONAM15,SPACES         INITIALIZATION\n         MVC   TSOSIZ15,SPACES         INITIALIZATION\n         MVC   TSOUNT15,SPACES         INITIALIZATION\n         MVC   TSONAM25,SPACES         INITIALIZATION\n         MVC   TSOSIZ25,SPACES         INITIALIZATION\n         MVC   TSOUNT25,SPACES         INITIALIZATION\n         MVC   TSOATT05,SPACES         INITIALIZATION\n         MVC   TSOATT15,SPACES         INITIALIZATION\n         MVC   TSOATT25,SPACES         INITIALIZATION\n         MVC   TSOATT35,SPACES         INITIALIZATION\n         MVC   TSOMAXR6,SPACES         INITIALIZATION\n         MVC   TSODEST6,SPACES         INITIALIZATION\n         MVC   TSONAM06,SPACES         INITIALIZATION\n         MVC   TSOSIZ06,SPACES         INITIALIZATION\n         MVC   TSOUNT06,SPACES         INITIALIZATION\n         MVC   TSONAM16,SPACES         INITIALIZATION\n         MVC   TSOSIZ16,SPACES         INITIALIZATION\n         MVC   TSOUNT16,SPACES         INITIALIZATION\n         MVC   TSONAM26,SPACES         INITIALIZATION\n         MVC   TSOSIZ26,SPACES         INITIALIZATION\n         MVC   TSOUNT26,SPACES         INITIALIZATION\n         MVC   TSOATT06,SPACES         INITIALIZATION\n         MVC   TSOATT16,SPACES         INITIALIZATION\n         MVC   TSOATT26,SPACES         INITIALIZATION\n         MVC   TSOATT36,SPACES         INITIALIZATION\n         MVC   TSOMAXR7,SPACES         INITIALIZATION\n         MVC   TSODEST7,SPACES         INITIALIZATION\n         MVC   TSONAM07,SPACES         INITIALIZATION\n         MVC   TSOSIZ07,SPACES         INITIALIZATION\n         MVC   TSOUNT07,SPACES         INITIALIZATION\n         MVC   TSONAM17,SPACES         INITIALIZATION\n         MVC   TSOSIZ17,SPACES         INITIALIZATION\n         MVC   TSOUNT17,SPACES         INITIALIZATION\n         MVC   TSONAM27,SPACES         INITIALIZATION\n         MVC   TSOSIZ27,SPACES         INITIALIZATION\n         MVC   TSOUNT27,SPACES         INITIALIZATION\n         MVC   TSOATT07,SPACES         INITIALIZATION\n         MVC   TSOATT17,SPACES         INITIALIZATION\n         MVC   TSOATT27,SPACES         INITIALIZATION\n         MVC   TSOATT37,SPACES         INITIALIZATION\n         MVC   TSOMAXR8,SPACES         INITIALIZATION\n         MVC   TSODEST8,SPACES         INITIALIZATION\n         MVC   TSONAM08,SPACES         INITIALIZATION\n         MVC   TSOSIZ08,SPACES         INITIALIZATION\n         MVC   TSOUNT08,SPACES         INITIALIZATION\n         MVC   TSONAM18,SPACES         INITIALIZATION\n         MVC   TSOSIZ18,SPACES         INITIALIZATION\n         MVC   TSOUNT18,SPACES         INITIALIZATION\n         MVC   TSONAM28,SPACES         INITIALIZATION\n         MVC   TSOSIZ28,SPACES         INITIALIZATION\n         MVC   TSOUNT28,SPACES         INITIALIZATION\n         MVC   TSOATT08,SPACES         INITIALIZATION\n         MVC   TSOATT18,SPACES         INITIALIZATION\n         MVC   TSOATT28,SPACES         INITIALIZATION\n         MVC   TSOATT38,SPACES         INITIALIZATION\n         MVC   TSODEST0,SPACES         INITIALIZATION\n         MVC   TSOMAXR0,SPACES         INITIALIZATION\n         MVC   RACF$,YES               INITIALIZATION\n         MVC   RACF1,NO                INITIALIZATION\n         MVC   RACF2,NO                INITIALIZATION\n         MVC   RACF3,NO                INITIALIZATION\n         MVC   RACF4,NO                INITIALIZATION\n         MVC   RACF5,NO                INITIALIZATION\n         MVC   RACF6,NO                INITIALIZATION\n         MVC   RACF7,NO                INITIALIZATION\n         MVC   RACF8,NO                INITIALIZATION\n         MVC   TSO$,NO                 INITIALIZATION\n         MVC   TSO1,NO                 INITIALIZATION\n         MVC   TSO2,NO                 INITIALIZATION\n         MVC   TSO3,NO                 INITIALIZATION\n         MVC   TSO4,NO                 INITIALIZATION\n         MVC   TSO5,NO                 INITIALIZATION\n         MVC   TSO6,NO                 INITIALIZATION\n         MVC   TSO7,NO                 INITIALIZATION\n         MVC   TSO8,NO                 INITIALIZATION\n         MVC   USRADD_,SKELNAM$        INITIALIZATION\n         LA    R5,SKELNAM$             INITIALIZATION\n         MVC   PANLNAM,PANLNAMA        INITIALIZATION\n         LA    R6,DISPL230             INITIALIZATION\n         MVC   SELCT,SPACES            INITIALIZATION\n         MVC   SUB,NO                  INITIALIZATION\n         MVC   SUBCMD2,SUBCMD1         MOVE STATIC INFO TO DYNAMIC\n         MVC   VERCMD2,VERCMD1         MOVE STATIC INFO TO DYNAMIC\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY RACF DATA ENTRY PANEL\n***********************************************************************\nDISPLAY1 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRADD1')\n         B     DISPL110(R15)           CHECK RETURN CODE\nDISPL110 EQU   *\n         B     SELECT1                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (DISPLAY PANEL / MSG)\n         B     TBCLOSE1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SELECT CMD VERUSGRP TO VERIFY OWNER & DFLTGRP\n***********************************************************************\nSELECT1 EQU    *\n         CLC   SAVOWN,OWNER            OWNER ALREADY BEEN VERIFIED?\n         BNE   SELCT110                NO, CONTINUE\n         CLC   SAVGRP,DFLTGRP          DFLTGRP ALREADY BEEN VERIFIED?\n         BNE   SELCT110                NO, CONTINUE\n         B     VGET120                 SKIP VERIFICATION\nSELCT110 EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         MVC   VERCMD2+13(8),OWNER     MOVE OWNER TO VERUSGRP COMMAND\n         MVC   VERCMD2+22(8),DFLTGRP   MOVE DFLTGRP TO VERUSGRP COMMAND\n*                                      EXECUTE CLIST\n         ISPCALL ('SELECT',FULL31,VERCMD2)\n         B     SELCT120(R15)           CHECK RETURN CODE\nSELCT120 EQU   *\n         B     VGET1                   RC = 00 (CONTINUE)\n         B     VGET1                   RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'OWNVER' & 'GRPVER'\n***********************************************************************\nVGET1    EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTE)\n         B     VGET110(R15)            CHECK RETURN CODE\nVGET110  EQU   *\n         B     VGET120                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nVGET120  EQU   *\n         CLC   OWNVER,VALID            VALID RACF OWNER SPECIFIED?\n         BNE   VALIDERR                NO, DISPLAY PANEL / MESSAGE\n         MVC   SAVOWN,OWNER            SAVE VALID OWNER\n         CLC   GRPVER,VALID            VALID RACF GROUP SPECIFIED?\n         BNE   VALIDERR                NO, DISPLAY PANEL / MESSAGE\n         MVC   SAVGRP,DFLTGRP          SAVE VALID DEFAULT GROUP\n         CLC   TSOUSER,YES             THIS A TSO USER?\n         BNE   VGET130                 NO, CHECK NCCF\n         BAL   R9,DISPLAY2             DISPLAY TSO DATA ENTRY PANEL\nVGET130  EQU   *\n         CLC   NCCFUSER,YES            THIS AN NCCF USER?\n         BNE   BLDVARS                 RE-DISPLAY RACF DATA ENTRY PANEL\n         BAL   R9,DISPLAY3             DISPLAY NCCF DATA ENTRY PANEL\n***********************************************************************\n*  PROCESSING SECTION - BUILD NAME, ROOM, CNCTGRP1,\n*                       NCCFPROF, TSODEST0 & TSOMAXR0\n***********************************************************************\nBLDVARS  EQU   *\n         MVI   ADDFLAG,ON              TURN ON ADDFLAG\n         MVC   NAME,FNAME              MOVE FIRST NAME TO NAME\n         CLC   LNAME,SPACES            IS THERE A LAST NAME?\n         BE    BLDVAR40                NO, BUILD ROOM\n         LA    R2,NAME                 R2 - INDEX THROUGH NAME\n         LA    R3,LNAME                R3 - INDEX THROUGH LAST NAME\n         LA    R4,20                   R4 - MAXIMUM NAME LENGTH\nBLDVAR10 EQU   *\n         CLC   0(2,R2),SPACES          END OF FIRST NAME?\n         BE    BLDVAR20                YES, ADD LAST NAME\n         LA    R2,1(R2)                NO, INCREMENT R2\n         BCT   R4,BLDVAR10                 AND CONTINUE\n         B     BLDVAR40                NO ROOM FOR LAST NAME\nBLDVAR20 EQU   *\n         LA    R2,1(R2)                POINT TO LOCATION FOR LNAME\n         BCTR  R4,0                    DECREMENT R4\nBLDVAR30 EQU   *\n         MVC   0(1,R2),0(R3)           MOVE LNAME TO NAME\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R3,1(R3)                    INCREMENT R3\n         BCT   R4,BLDVAR30                     AND CONTINUE\nBLDVAR40 EQU   *\n         CLC   ROOM#,USERDATA          IS THERE A ROOM NUMBER?\n         BNE   BLDVAR50                NO, BUILD CNCTGRP1\n         MVC   ROOM,USERDATA+5         MOVE ROOM NUMBER TO VARIABLE\nBLDVAR50 EQU   *\n         LA    R2,CNCTGRP1             R2 - INDEX THROUGH CNCTGRP1\n         MVC   0(8,R2),DFLTGRP         MOVE DEFAULT GROUP\n         LA    R2,8(R2)                POINT TO NEXT SLOT\n         MVC   0(8,R2),AUTHORTY        MOVE AUTHORITY\n         LA    R2,8(R2)                POINT TO NEXT SLOT\n         MVC   0(8,R2),UACC            MOVE UNIVERSAL ACCESS\n         LA    R2,8(R2)                POINT TO NEXT SLOT\n         MVC   0(8,R2),REVOKE          MOVE REVOKE DATE\n         LA    R2,8(R2)                POINT TO NEXT SLOT\n         MVC   0(8,R2),RESUME          MOVE RESUME DATE\nBLDVAR60 EQU   *\n         CLC   NCCFUSER,YES            THIS AN NCCF USER?\n         BNE   BLDVAR70                NO, BUILD TSODEST0\n         MVC   NCCFPROF+5(1),SELCT     YES, FINISH NCCF PROFILE NAME\nBLDVAR70 EQU   *\n         CLC   NODEST,TSODEST          DESTINATION SPECIFIED?\n         BE    BLDVAR80                NO, BUILD TSOMAXR0\n         MVC   TSODEST0(5),DEST#       MOVE 'DEST('\n         MVC   TSODEST0+5(8),TSODEST   MOVE TSODEST\n         MVC   TSODEST0+13(1),CLOPAREN MOVE ')'\n         B     BLDVAR90                NO, BUILD TSOMAXR0\nBLDVAR80 EQU   *\n         MVC   TSODEST0(8),TSODEST\nBLDVAR90 EQU   *\n         CLC   NOLIM,TSOMAXR           MAXSIZE SPECIFIED?\n         BE    BLDVARA0                NO, SET ROW POINTER FOR\n         MVC   TSOMAXR0(8),MAXSIZE#    MOVE 'MAXSIZE('\n         MVC   TSOMAXR0+8(5),TSOMAXR   MOVE TSOMAXR\n         MVC   TSOMAXR0+13(1),CLOPAREN MOVE ')'\n         B     TBADD1\nBLDVARA0 EQU   *\n         MVC   TSOMAXR0(8),TSOMAXR\n***********************************************************************\n*  PROCESSING SECTION - ADD A USER TO THE USER TABLE\n***********************************************************************\nTBADD1   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','USERTAB',' ','ORDER')\n         B     TBADD110(R15)           CHECK RETURN CODE\nTBADD110 EQU   *\n         B     TBADD2                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     ADDERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - ADD A USER TO THE FILE TAILORING TABLE\n***********************************************************************\nTBADD2   EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','USRADD')\n         B     TBADD210(R15)           CHECK RETURN CODE\nTBADD210 EQU   *\n         B     INITV10                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBADD)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE USER TABLE (USERTAB)\n***********************************************************************\nTBCLOSE1 EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE TABLE\n         ISPCALL ('TBCLOSE','USERTAB','REPLCOPY',' ',' ','USRTLIB')\n         B     TBCLO110(R15)           CHECK RETURN CODE\nTBCLO110 EQU   *\n         B     TBCLOSE2                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE FILE TAILORING TABLE (USRADD)\n***********************************************************************\nTBCLOSE2 EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE TABLE\n         ISPCALL ('TBCLOSE','USRADD','REPLCOPY')\n         B     TBCLO210(R15)           CHECK RETURN CODE\nTBCLO210 EQU   *\n         B     VGET2                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'ZLLGJOB1' & 'ZLLGJOB2'\n***********************************************************************\nVGET2    EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTF)\n         B     VGET210(R15)            CHECK RETURN CODE\nVGET210  EQU   *\n         B     FTOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - OPEN TEMPORARY FILE TAILORING FILE\n***********************************************************************\nFTOPEN   EQU   *\n         MVC   ISPFSERV,FTOID          SET ISPF DIALOG SERVICE\n         TM    ADDFLAG,ON              ANY DATA PROCESSED?\n         BNO   TBERASE                 NO, ERASE FILE TAILORING TABLE\n*                                      OPEN TEMP FILE TAILORING FILE\n         ISPCALL ('FTOPEN','TEMP')\n         B     FTOPN10(R15)            CHECK RETURN CODE\nFTOPN10  EQU   *\n         B     FTINCL                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTOPEN)\n         B     FTINCL                  RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - INCLUDE SKELETON FOR FILE TAILORING\n***********************************************************************\nFTINCL   EQU   *\n         MVC   ISPFSERV,FTIID          SET ISPF DIALOG SERVICE\n*                                      INCLUDE SKELETON FOR TAILORING\n         ISPCALL ('FTINCL',USRADD_)\n         B     FTINC10(R15)            CHECK RETURN CODE\nFTINC10  EQU   *\n         B     FTCLOSE                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTINCL)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE TEMPORARY FILE\n***********************************************************************\nFTCLOSE  EQU   *\n         MVC   ISPFSERV,FTCID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TEMP FILE TAILORING FILE\n         ISPCALL ('FTCLOSE')\n         B     FTCLO10(R15)            CHECK RETURN CODE\nFTCLO10  EQU   *\n         B     VGET3                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTCLOSE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'ZTEMPF'\n***********************************************************************\nVGET3    EQU   *\n         CLC   SUB,NO                  REGIONAL FILE TAILORING?\n         BE    SELCT220                NO, PROCESS NEXT REGION\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELST9)\n         B     VGET310(R15)            CHECK RETURN CODE\nVGET310  EQU   *\n         B     SELECT2                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SELECT CMD ZTEMPF TO DEFINE USER(S)\n***********************************************************************\nSELECT2 EQU    *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         MVC   SUBCMD2+11(44),ZTEMPF   NO, MOVE ZTEMPF TO SUBCMD\n         ISPCALL ('SELECT',FULL56,SUBCMD2)\n         B     SELCT210(R15)           CHECK RETURN CODE\nSELCT210 EQU   *\n         B     SELCT220                RC = 00 (CONTINUE)\n         B     SELCT220                RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSELCT220 EQU   *\n         CLC   0(8,R5),SKELNAM8        ARE WE DONE?\n         BE    TBERASE                 YES, ERASE TABLE\n         LA    R5,8(R5)                POINT TO NEXT SKELETON NAME\n         MVC   USRADD_,0(R5)           MOVE IT INTO USRADD_\n         MVC   SUB,NO                  RE-SET SUB\n         B     FTOPEN                  CONTINUE WITH FILE TAILORING\n***********************************************************************\n*  PROCESSING SECTION - ERASE FILE TAILORING TABLE (USRADD)\n***********************************************************************\nTBERASE  EQU   *\n         MVC   ISPFSERV,ERAID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBERASE','USRADD')\n         B     TBERA10(R15)            CHECK RETURN CODE\nTBERA10  EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBERASE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TSO DATA ENTRY PANEL\n***********************************************************************\nDISPLAY2 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY',PANLNAM)\n         B     DISPL210(R15)           CHECK RETURN CODE\nDISPL210 EQU   *\n         B     DISPL220                RC = 00 (CONTINUE)\n         B     DISPL220                RC = 04 (CONTINUE)\n         B     DISPL2D0                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL220 EQU   *\n         BR    R6                      BRANCH TO REGNL TSO\nDISPL230 EQU   *\n         MVC   TSO$,YES                ADD TO ADMIN 'SYS1.UADS'\n         MVC   TSOMAXR$,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST$,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM0$,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ0$,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT0$,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT0$,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT1$,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT2$,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT3$,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL240 EQU   *\n         CLC   TSO1,YES                ADD TO REG 1 'SYS1.UADS'?\n         BNE   DISPL250                NO, CHECK REG 2\n         LA    R6,DISPL245             R6 - RETURN ADDRESS\n         MVC   REGID,REG1              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL245 EQU   *\n         MVC   TSOMAXR1,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST1,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM01,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ01,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT01,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT01,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT11,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT21,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT31,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL250 EQU   *\n         CLC   TSO2,YES                ADD TO REG 2 'SYS1.UADS'?\n         BNE   DISPL260                NO, CHECK REG 3\n         LA    R6,DISPL255             R6 - RETURN ADDRESS\n         MVC   REGID,REG2              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL255 EQU   *\n         MVC   TSOMAXR2,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST2,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM02,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ02,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT02,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT02,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT12,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT22,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT32,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL260 EQU   *\n         CLC   TSO3,YES                ADD TO REG 3 'SYS1.UADS'?\n         BNE   DISPL270                NO, CHECK REG 4\n         LA    R6,DISPL265             R6 - RETURN ADDRESS\n         MVC   REGID,REG3              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL265 EQU   *\n         MVC   TSOMAXR3,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST3,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM03,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ03,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT03,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT03,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT13,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT23,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT33,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL270 EQU   *\n         CLC   TSO4,YES                ADD TO REG 4 'SYS1.UADS'?\n         BNE   DISPL280                NO, CHECK REG 5\n         LA    R6,DISPL275             R6 - RETURN ADDRESS\n         MVC   REGID,REG4              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL275 EQU   *\n         MVC   TSOMAXR4,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST4,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM04,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ04,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT04,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT04,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT14,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT24,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT34,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL280 EQU   *\n         CLC   TSO5,YES                ADD TO REG 5 'SYS1.UADS'?\n         BNE   DISPL290                NO, CHECK REG 6\n         LA    R6,DISPL285             R6 - RETURN ADDRESS\n         MVC   REGID,REG5              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL285 EQU   *\n         MVC   TSOMAXR5,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST5,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM05,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ05,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT05,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT05,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT15,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT25,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT35,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL290 EQU   *\n         CLC   TSO6,YES                ADD TO REG 6 'SYS1.UADS'?\n         BNE   DISPL2A0                NO, CHECK REG 7\n         LA    R6,DISPL295             R6 - RETURN ADDRESS\n         MVC   REGID,REG6              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL295 EQU   *\n         MVC   TSOMAXR6,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST6,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM06,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ06,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT06,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT06,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT16,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT26,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT36,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL2A0 EQU   *\n         CLC   TSO7,YES                ADD TO REG 7 'SYS1.UADS'?\n         BNE   DISPL2B0                NO, CHECK REG 8\n         LA    R6,DISPL2A5             R6 - RETURN ADDRESS\n         MVC   REGID,REG7              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL2A5 EQU   *\n         MVC   TSOMAXR7,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST7,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM07,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ07,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT07,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT07,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT17,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT27,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT37,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL2B0 EQU   *\n         CLC   TSO8,YES                ADD TO REG 8 'SYS1.UADS'?\n         BNE   DISPL2C0                NO, CHECK LNAME\n         LA    R6,DISPL2B5             R6 - RETURN ADDRESS\n         MVC   REGID,REG8              SET REGIONAL ID\n         MVC   PANLNAM,PANLNAMB        SET TSO ADD PANEL NAME\n         B     DISPLAY2                DISPLAY ENTRY PANEL\nDISPL2B5 EQU   *\n         MVC   TSOMAXR8,TSOMAXR        INSERT INFORMATION FROM PANEL\n         MVC   TSODEST8,TSODEST        INSERT INFORMATION FROM PANEL\n         MVC   TSONAM08,TSONAM0        INSERT INFORMATION FROM PANEL\n         MVC   TSOSIZ08,TSOSIZ0        INSERT INFORMATION FROM PANEL\n         MVC   TSOUNT08,TSOUNT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT08,TSOATT0        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT18,TSOATT1        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT28,TSOATT2        INSERT INFORMATION FROM PANEL\n         MVC   TSOATT38,TSOATT3        INSERT INFORMATION FROM PANEL\nDISPL2C0 EQU   *\n         BR    R9                      RETURN\nDISPL2D0 EQU   *\n         CLC   TSO$,YES                TSO USER ADDED?\n         BER   R9                      YES, RETURN\n         MVC   TSOUSER,NO              NO, DON'T ADD TSO USER\n         BR    R9                      RETURN\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY NCCF DATA ENTRY PANEL\n***********************************************************************\nDISPLAY3 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRADD3')\n         B     DISPL310(R15)           CHECK RETURN CODE\nDISPL310 EQU   *\n         B     SELECT3                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (DISPLAY PANEL / MSG)\n         B     DISPL320                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL320 EQU   *\n         BR    R9                      RETURN\n***********************************************************************\n*  PROCESSING SECTION - SELECT PGM 'USRADD2' TO ADD NCCF USER\n***********************************************************************\nSELECT3 EQU    *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         ISPCALL ('CONTROL','DISPLAY','SAVE')    SAVE LOGICAL SCREEN\n*                                      SELECT PROGRAM FOR EXECUTION\n         ISPCALL ('SELECT',FULL12,USRADD2)    SELECT 'USRADD2'\n         B     SELCT310(R15)           CHECK RETURN CODE\nSELCT310 EQU   *\n         B     SELCT320                RC = 00 (CONTINUE)\n         B     SELCT320                RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSELCT320 EQU   *\n         ISPCALL ('CONTROL','DISPLAY','RESTORE')    RESTORE SCREEN\n         BR    R9                      RETURN\n         TITLE 'USRADD1 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,USERERRL       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV    SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRADD1',USERMSG)\n         B     FINISH\nADDERR08 EQU   *\n         MVC   USERMSGS,ADDERRS        SET SHORT MESSAGE\n         MVC   USERMSGL,ADDERRL        SET LONG MESSAGE\n         MVC   USERMSGL(8),USERID      MOVE USERID TO MESSAGE\n         MVC   USERMSGL+52(3),NCCFUSER MOVE NCCF USER INDICATION\n         MVC   USERMSGL+68(3),TSOUSER  MOVE TSO USER INDICATION\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRADD1',USERMSG)\n         B     INITV10\nVALIDERR EQU   *\n         MVC   USERMSGS,VERERRS        SET SHORT MESSAGE\n         MVC   USERMSGL,VERERRL        SET LONG MESSAGE\n         MVC   USERMSGL+6(8),OWNER     MOVE OWNER TO MESSAGE\n         MVC   USERMSGL+18(8),OWNVER   MOVE 'VALID' OR 'INVALID' TO MSG\n         MVC   USERMSGL+42(8),DFLTGRP  MOVE DFLTGRP TO MESSAGE\n         MVC   USERMSGL+54(8),GRPVER   MOVE 'VALID' OR 'INVALID' TO MSG\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRADD1',USERMSG)\n         B     DISPLAY1\n         TITLE 'USRADD1 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRADD1 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nOFF      EQU   X'00'                   NO USERS HAVE BEEN ADDED\nON       EQU   X'10'                   USER(S) HAVE BEEN ADDED\n         TITLE 'USRADD1 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   FULLWORD CONSTANT VALUE '00'\nFULL01   DC    F'01'                   FULLWORD CONSTANT VALUE '01'\nFULL12   DC    F'12'                   FULLWORD CONSTANT VALUE '12'\nFULL15   DC    F'15'                   FULLWORD CONSTANT VALUE '15'\nFULL31   DC    F'31'                   FULLWORD CONSTANT VALUE '31'\nFULL56   DC    F'56'                   FULLWORD CONSTANT VALUE '56'\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nDEST#    DC    CL5'DEST('              INDICATE SYSOUT DEST\nMAXSIZE# DC    CL8'MAXSIZE('           INDICATE MAXIMUM REGION SIZE\nROOM#    DC    CL5'ROOM='              INDICATE ROOM NUMBER\nNCCFINIT DC    CL8'DPF30'              NCCF PROFILE NAME PREFIX\nNODEST   DC    C'NODEST'               INDICATES NO TSO SYSOUT DEST\nNOLIM    DC    C'NOLIM'                INDICATES 'MAXSIZE' PARM UNUSED\nACCT     DC    CL8'ACCT'               TSO ACCT ATTRIBUTE\nNOACCT   DC    CL8'NOACCT'             TSO NOACCT ATTRIBUTE\nJCL      DC    CL8'JCL'                TSO JCL ATTRIBUTE\nNOJCL    DC    CL8'NOJCL'              TSO NOJCL ATTRIBUTE\nMOUNT    DC    CL8'MOUNT'              TSO MOUNT ATTRIBUTE\nNOMOUNT  DC    CL8'NOMOUNT'            TSO NOMOUNT ATTRIBUTE\nOPER     DC    CL8'OPER'               TSO OPER ATTRIBUTE\nNOOPER   DC    CL8'NOOPER'             TSO NOOPER ATTRIBUTE\nNONE     DC    CL8'NONE'               INITIALIZE REVOKE & RESUME\nNO       DC    CL1'N'                  INDICATE NOT TSO OR NCCF USER\nYES      DC    CL1'Y'                  INDICATE TSO OR NCCF USER\nVALID    DC    CL8'VALID'              INDICATE OWNER/DFLTGRP VALID\nINVALID  DC    CL8'INVALID'            INDICATE OWNER/DFLTGRP INVALID\nCLOPAREN DC    CL1')'                  CLOSING PARENTHESIS\nQUOTE    DC    CL1''''                 QUOTE\nZERO     DC    CL1'0'                  CHAR CONSTANT VALUE '0'\nUSERMSG  DC    CL8'USER000'            GENERIC USER MESSAGE\nUSRADD2  DC    C'PGM(USRADD2)'         FUNTION CALLED FROM USRADD1\nSUBCMD1  DC    CL56'CMD(SUBMIT                                         +\n                    )'\nVERCMD1  DC    CL31'CMD(VERUSGRP 12345678 12345678)'\nPANLNAMA DC    CL8'USRADD2A'           ADMIN TSO ADD PANEL\nPANLNAMB DC    CL8'USRADD2B'           REGNL TSO ADD PANEL\nSKELNAM$ DC    CL8'USRADD$'            ADMIN SKELETON\nSKELNAM1 DC    CL8'USRADD1'            REGION 1 SKELETON\nSKELNAM2 DC    CL8'USRADD2'            REGION 2 SKELETON\nSKELNAM3 DC    CL8'USRADD3'            REGION 3 SKELETON\nSKELNAM4 DC    CL8'USRADD4'            REGION 4 SKELETON\nSKELNAM5 DC    CL8'USRADD5'            REGION 5 SKELETON\nSKELNAM6 DC    CL8'USRADD6'            REGION 6 SKELETON\nSKELNAM7 DC    CL8'USRADD7'            REGION 7 SKELETON\nSKELNAM8 DC    CL8'USRADD8'            REGION 8 SKELETON\nREG1     DC    CL4'REG1'               REGION 1 ID\nREG2     DC    CL4'REG2'               REGION 2 ID\nREG3     DC    CL4'REG3'               REGION 3 ID\nREG4     DC    CL4'REG4'               REGION 4 ID\nREG5     DC    CL4'REG5'               REGION 5 ID\nREG6     DC    CL4'REG6'               REGION 6 ID\nREG7     DC    CL4'REG7'               REGION 7 ID\nREG8     DC    CL4'REG8'               REGION 8 ID\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nERAID    DC    CL8'TBERASE'            ISPF DIALOG SERVICE (TBERASE)\nFTCID    DC    CL8'FTCLOSE'            ISPF DIALOG SERVICE (FTCLOSE)\nFTIID    DC    CL8'FTINCL'             ISPF DIALOG SERVICE (FTINCL)\nFTOID    DC    CL8'FTOPEN'             ISPF DIALOG SERVICE (FTOPEN)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nSELID    DC    CL8'SELECT'             ISPF DIALOG SERVICE (SELECT)\nUSERERRS DC    CL24'USRADD1 program error.  '\nUSERERRL DC    CL78'ISPF Dialog Service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\nADDERRS  DC    CL24'User already exists.    '\nADDERRL  DC    CL78'12345678 already exists as a RACF user. NCCF User =+\n                123; TSO User = 123.      '\nVERERRS  DC    CL24'Invalid OWNER or DFLTGRP'\nVERERRL  DC    CL78'Owner 12345678 is 12345678. Default Group 12345678 +\n               is 12345678.               '\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'19'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'REVOKE'\n         DC    CL8'RESUME'\n         DC    CL8'AUTHORTY'\n         DC    CL8'UACC'\n         DC    CL8'NCCFPROF'\n         DC    CL8'TSONAM0'\n         DC    CL8'TSOSIZ0'\n         DC    CL8'TSOUNT0'\n         DC    CL8'TSODEST'\n         DC    CL8'TSOMAXR'\n         DC    CL8'TSOATT0'\n         DC    CL8'TSOATT1'\n         DC    CL8'TSOATT2'\n         DC    CL8'TSOATT3'\n         DC    CL8'OWNVER'\n         DC    CL8'GRPVER'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'NAME'\n         DC    CL8'LNAME'\n         DC    CL8'FNAME'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 10)\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'RACFATT4'\n         DC    CL8'RACFATT5'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 70)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERDATA'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'ROOM'\n         DC    CL8'EXTENS'\n         DC    CL8'REGID'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'CNCTGRP1'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'22'\n         DC    F'00'\n         DC    CL8'SELCT'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'NCCFUSER'\n         DC    CL8'TSOUSER'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'SUB'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 14)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'TSODEST0'\n         DC    CL8'TSOMAXR0'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 44)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTEMPF'\nNAMELSTA DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELSTB DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELSTC DS    0F                      NAMES OF VARIABLES FT TABLE\n         DC    F'37'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'NAME'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'AUTHORTY'\n         DC    CL8'UACC'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'USERDATA'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'TSONAM0'\n         DC    CL8'TSOSIZ0'\n         DC    CL8'TSOUNT0'\n         DC    CL8'TSODEST0'\n         DC    CL8'TSOMAXR0'\n         DC    CL8'TSOATT0'\n         DC    CL8'TSOATT1'\n         DC    CL8'TSOATT2'\n         DC    CL8'TSOATT3'\nNAMELSTE DS    0F                      NAMES OF VERUSGRP CLIST VARS\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'OWNVER'\n         DC    CL8'GRPVER'\nNAMELSTF DS    0F                      NAMES OF VARIABLES (LENGTH 80)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'ZLLGJOB1'\n         DC    CL8'ZLLGJOB2'\nNAMLIST$ DS    0F                      NAMES OF EXTENSION VARIABLES $\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR$'\n         DC    CL8'TSODEST$'\n         DC    CL8'TSONAM0$'\n         DC    CL8'TSOSIZ0$'\n         DC    CL8'TSOUNT0$'\n         DC    CL8'TSONAM1$'\n         DC    CL8'TSOSIZ1$'\n         DC    CL8'TSOUNT1$'\n         DC    CL8'TSONAM2$'\n         DC    CL8'TSOSIZ2$'\n         DC    CL8'TSOUNT2$'\n         DC    CL8'TSOATT0$'\n         DC    CL8'TSOATT1$'\n         DC    CL8'TSOATT2$'\n         DC    CL8'TSOATT3$'\nNAMLIST1 DS    0F                      NAMES OF EXTENSION VARIABLES 1\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR1'\n         DC    CL8'TSODEST1'\n         DC    CL8'TSONAM01'\n         DC    CL8'TSOSIZ01'\n         DC    CL8'TSOUNT01'\n         DC    CL8'TSONAM11'\n         DC    CL8'TSOSIZ11'\n         DC    CL8'TSOUNT11'\n         DC    CL8'TSONAM21'\n         DC    CL8'TSOSIZ21'\n         DC    CL8'TSOUNT21'\n         DC    CL8'TSOATT01'\n         DC    CL8'TSOATT11'\n         DC    CL8'TSOATT21'\n         DC    CL8'TSOATT31'\nNAMLIST2 DS    0F                      NAMES OF EXTENSION VARIABLES 2\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR2'\n         DC    CL8'TSODEST2'\n         DC    CL8'TSONAM02'\n         DC    CL8'TSOSIZ02'\n         DC    CL8'TSOUNT02'\n         DC    CL8'TSONAM12'\n         DC    CL8'TSOSIZ12'\n         DC    CL8'TSOUNT12'\n         DC    CL8'TSONAM22'\n         DC    CL8'TSOSIZ22'\n         DC    CL8'TSOUNT22'\n         DC    CL8'TSOATT02'\n         DC    CL8'TSOATT12'\n         DC    CL8'TSOATT22'\n         DC    CL8'TSOATT32'\nNAMLIST3 DS    0F                      NAMES OF EXTENSION VARIABLES 3\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR3'\n         DC    CL8'TSODEST3'\n         DC    CL8'TSONAM03'\n         DC    CL8'TSOSIZ03'\n         DC    CL8'TSOUNT03'\n         DC    CL8'TSONAM13'\n         DC    CL8'TSOSIZ13'\n         DC    CL8'TSOUNT13'\n         DC    CL8'TSONAM23'\n         DC    CL8'TSOSIZ23'\n         DC    CL8'TSOUNT23'\n         DC    CL8'TSOATT03'\n         DC    CL8'TSOATT13'\n         DC    CL8'TSOATT23'\n         DC    CL8'TSOATT33'\nNAMLIST4 DS    0F                      NAMES OF EXTENSION VARIABLES 4\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR4'\n         DC    CL8'TSODEST4'\n         DC    CL8'TSONAM04'\n         DC    CL8'TSOSIZ04'\n         DC    CL8'TSOUNT04'\n         DC    CL8'TSONAM14'\n         DC    CL8'TSOSIZ14'\n         DC    CL8'TSOUNT14'\n         DC    CL8'TSONAM24'\n         DC    CL8'TSOSIZ24'\n         DC    CL8'TSOUNT24'\n         DC    CL8'TSOATT04'\n         DC    CL8'TSOATT14'\n         DC    CL8'TSOATT24'\n         DC    CL8'TSOATT34'\nNAMLIST5 DS    0F                      NAMES OF EXTENSION VARIABLES 5\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR5'\n         DC    CL8'TSODEST5'\n         DC    CL8'TSONAM05'\n         DC    CL8'TSOSIZ05'\n         DC    CL8'TSOUNT05'\n         DC    CL8'TSONAM15'\n         DC    CL8'TSOSIZ15'\n         DC    CL8'TSOUNT15'\n         DC    CL8'TSONAM25'\n         DC    CL8'TSOSIZ25'\n         DC    CL8'TSOUNT25'\n         DC    CL8'TSOATT05'\n         DC    CL8'TSOATT15'\n         DC    CL8'TSOATT25'\n         DC    CL8'TSOATT35'\nNAMLIST6 DS    0F                      NAMES OF EXTENSION VARIABLES 6\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR6'\n         DC    CL8'TSODEST6'\n         DC    CL8'TSONAM06'\n         DC    CL8'TSOSIZ06'\n         DC    CL8'TSOUNT06'\n         DC    CL8'TSONAM16'\n         DC    CL8'TSOSIZ16'\n         DC    CL8'TSOUNT16'\n         DC    CL8'TSONAM26'\n         DC    CL8'TSOSIZ26'\n         DC    CL8'TSOUNT26'\n         DC    CL8'TSOATT06'\n         DC    CL8'TSOATT16'\n         DC    CL8'TSOATT26'\n         DC    CL8'TSOATT36'\nNAMLIST7 DS    0F                      NAMES OF EXTENSION VARIABLES 7\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR7'\n         DC    CL8'TSODEST7'\n         DC    CL8'TSONAM07'\n         DC    CL8'TSOSIZ07'\n         DC    CL8'TSOUNT07'\n         DC    CL8'TSONAM17'\n         DC    CL8'TSOSIZ17'\n         DC    CL8'TSOUNT17'\n         DC    CL8'TSONAM27'\n         DC    CL8'TSOSIZ27'\n         DC    CL8'TSOUNT27'\n         DC    CL8'TSOATT07'\n         DC    CL8'TSOATT17'\n         DC    CL8'TSOATT27'\n         DC    CL8'TSOATT37'\nNAMLIST8 DS    0F                      NAMES OF EXTENSION VARIABLES 8\n         DC    F'15'\n         DC    F'00'\n         DC    CL8'TSOMAXR8'\n         DC    CL8'TSODEST8'\n         DC    CL8'TSONAM08'\n         DC    CL8'TSOSIZ08'\n         DC    CL8'TSOUNT08'\n         DC    CL8'TSONAM18'\n         DC    CL8'TSOSIZ18'\n         DC    CL8'TSOUNT18'\n         DC    CL8'TSONAM28'\n         DC    CL8'TSOSIZ28'\n         DC    CL8'TSOUNT28'\n         DC    CL8'TSOATT08'\n         DC    CL8'TSOATT18'\n         DC    CL8'TSOATT28'\n         DC    CL8'TSOATT38'\n         TITLE 'USRADD1 - LITERAL POOL'\n         LTORG\n         TITLE 'USRADD1 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nADDFLAG  DS    C                       FLAG SET WHEN USER ADDED\nSUBCMD2  DS    CL56'CMD(SUBMIT                                         +\n                    )'\nVERCMD2  DS    CL31'CMD(VERUSGRP 12345678 12345678)'\nUSERID   DS    CL8                     RACF USER ID\nOWNER    DS    CL8                     RACF OWNER\nDFLTGRP  DS    CL8                     RACF DFLTGRP\nREVOKE   DS    CL8                     RACF REVOKE DATE\nRESUME   DS    CL8                     RACF RESUME DATE\nAUTHORTY DS    CL8                     RACF AUTHORTY\nUACC     DS    CL8                     RACF UACC\nNCCFPROF DS    CL8                     NCCF PROFILE NAME\nTSONAM0  DS    CL8                     TSO PROC NAME\nTSOSIZ0  DS    CL8                     TSO PROC REGION SIZE\nTSOUNT0  DS    CL8                     TSO PROC UNIT NAME\nTSODEST  DS    CL8                     TSO SYSOUT DESTINATION\nTSOMAXR  DS    CL8                     TSO PROC MAXIMUM REGION SIZE\nTSOATT0  DS    CL8                     TSO ACCT / NOACCT ATTRIBUTE\nTSOATT1  DS    CL8                     TSO JCL / NOJCL ATTRIBUTE\nTSOATT2  DS    CL8                     TSO MOUNT / NOMOUNT ATTRIBUTE\nTSOATT3  DS    CL8                     TSO OPER / NOOPER ATTRIBUTE\nOWNVER   DS    CL8                     VERIFY OWNER AS RACF USER/GROUP\nGRPVER   DS    CL8                     VERIFY DFLTGRP AS RACF GROUP\nTSOMAXR$ DS    CL8                     MAXIMUM REGION SIZE\nTSODEST$ DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM0$ DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ0$ DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT0$ DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM1$ DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ1$ DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT1$ DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM2$ DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ2$ DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT2$ DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT0$ DS    CL8                     OPER / NOOPER\nTSOATT1$ DS    CL8                     ACCT / NOACCT\nTSOATT2$ DS    CL8                     JCL / NOJCL\nTSOATT3$ DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR1 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST1 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM01 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ01 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT01 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM11 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ11 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT11 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM21 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ21 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT21 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT01 DS    CL8                     OPER / NOOPER\nTSOATT11 DS    CL8                     ACCT / NOACCT\nTSOATT21 DS    CL8                     JCL / NOJCL\nTSOATT31 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR2 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST2 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM02 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ02 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT02 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM12 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ12 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT12 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM22 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ22 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT22 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT02 DS    CL8                     OPER / NOOPER\nTSOATT12 DS    CL8                     ACCT / NOACCT\nTSOATT22 DS    CL8                     JCL / NOJCL\nTSOATT32 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR3 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST3 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM03 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ03 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT03 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM13 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ13 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT13 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM23 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ23 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT23 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT03 DS    CL8                     OPER / NOOPER\nTSOATT13 DS    CL8                     ACCT / NOACCT\nTSOATT23 DS    CL8                     JCL / NOJCL\nTSOATT33 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR4 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST4 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM04 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ04 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT04 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM14 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ14 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT14 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM24 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ24 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT24 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT04 DS    CL8                     OPER / NOOPER\nTSOATT14 DS    CL8                     ACCT / NOACCT\nTSOATT24 DS    CL8                     JCL / NOJCL\nTSOATT34 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR5 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST5 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM05 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ05 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT05 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM15 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ15 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT15 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM25 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ25 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT25 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT05 DS    CL8                     OPER / NOOPER\nTSOATT15 DS    CL8                     ACCT / NOACCT\nTSOATT25 DS    CL8                     JCL / NOJCL\nTSOATT35 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR6 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST6 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM06 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ06 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT06 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM16 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ16 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT16 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM26 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ26 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT26 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT06 DS    CL8                     OPER / NOOPER\nTSOATT16 DS    CL8                     ACCT / NOACCT\nTSOATT26 DS    CL8                     JCL / NOJCL\nTSOATT36 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR7 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST7 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM07 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ07 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT07 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM17 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ17 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT17 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM27 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ27 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT27 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT07 DS    CL8                     OPER / NOOPER\nTSOATT17 DS    CL8                     ACCT / NOACCT\nTSOATT27 DS    CL8                     JCL / NOJCL\nTSOATT37 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR8 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST8 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM08 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ08 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT08 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM18 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ18 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT18 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM28 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ28 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT28 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT08 DS    CL8                     OPER / NOOPER\nTSOATT18 DS    CL8                     ACCT / NOACCT\nTSOATT28 DS    CL8                     JCL / NOJCL\nTSOATT38 DS    CL8                     MOUNT / NOMOUNT\nUSRADD_  DS    CL8                     GENERIC SKELETON NAME\nPANLNAM  DS    CL8                     GENERIC TSO ADD PANEL NAME\nNAME     DS    CL20                    USER NAME\nLNAME    DS    CL20                    USER LAST NAME\nFNAME    DS    CL20                    USER FIRST NAME\nRACFATT  DS    0CL72                   NCCF PROFILE (COMMAND AUTHORITY)\nRACFATT0 DS    CL12                    RACF SPECIAL / NOSPECIAL ATTR\nRACFATT1 DS    CL12                    RACF OPERATIONS / NOOPERATIONS\nRACFATT2 DS    CL12                    RACF AUDITOR / NOAUDITOR\nRACFATT3 DS    CL12                    RACF ATTRIBUTE\nRACFATT4 DS    CL12                    RACF ATTRIBUTE\nRACFATT5 DS    CL12                    RACF ATTRIBUTE\nUSERDATA DS    CL70                    RACF USERDATA\nROOM     DS    CL4                     USER'S ROOM NUMBER\nEXTENS   DS    CL4                     USER'S PHONE EXTENSION\nREGID    DS    CL4                     REGONAL ID\nCNCTGRP1 DS    CL40                    RACF CONNECT GROUP INFO\nSELCT    DS    CL1                     DETERMINE NCCF PROFILE\nRACF$    DS    CL1                     CREATE RACF PROFILE IN REGION 1\nRACF1    DS    CL1                     CREATE RACF PROFILE IN REGION 1\nRACF2    DS    CL1                     CREATE RACF PROFILE IN REGION 2\nRACF3    DS    CL1                     CREATE RACF PROFILE IN REGION 3\nRACF4    DS    CL1                     CREATE RACF PROFILE IN REGION 4\nRACF5    DS    CL1                     CREATE RACF PROFILE IN REGION 5\nRACF6    DS    CL1                     CREATE RACF PROFILE IN REGION 6\nRACF7    DS    CL1                     CREATE RACF PROFILE IN REGION 7\nRACF8    DS    CL1                     CREATE RACF PROFILE IN REGION 8\nNCCFUSER DS    CL1                     INDICATES ADD NCCF USER\nTSOUSER  DS    CL1                     INDICATES ADD TSO USER\nTSO$     DS    CL1                     CREATE TSO ACCOUNT REC AT ADMIN\nTSO1     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 1\nTSO2     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 2\nTSO3     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 3\nTSO4     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 4\nTSO5     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 5\nTSO6     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 6\nTSO7     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 7\nTSO8     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 8\nSUB      DS    CL1                     INDICATES REGIONAL JOB TO SUBMIT\nTSODEST0 DS    CL14                    TSO ACCOUNT CMD (SYSOUT DEST)\nTSOMAXR0 DS    CL14                    TSO ACCOUNT CMD (MAXSIZE)\nZTEMPF   DS    CL44                    FILE TAILORING TEMPORARY FILE\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nZLLGJOB1 DS    CL80                    JOB CARD 1 FROM OPTION 0.2\nZLLGJOB2 DS    CL80                    JOB CARD 2 FROM OPTION 0.2\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nSAVOWN   DS    CL8                     VERIFY OWNER AS RACF USER/GROUP\nSAVGRP   DS    CL8                     VERIFY DFLTGRP AS RACF GROUP\nWORKLEN  EQU   *-WORKAREA\n         END   USRADD1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRBROWS": {"ttr": 19460, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x06F\\x06F\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1606, "newlines": 1606, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRBROWS - DELUXE USER LIST INQUIRY'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRBROWS                                       *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              03/12/86  WRITTEN.                               JWC.  *\n*                                                                     *\n*              03/21/86  BREAK INTO MODULES. ADD NCCF           JWC.  *\n*                                                                     *\n*              03/25/86  ADD TSO.                               JWC.  *\n*                                                                     *\n*              04/28/86  ADD LOCATE.                            JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRBROWS - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRBROWS - INITIALIZATION SECTION'\nUSRBROWS CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRBROWS_&SYSDATE_&SYSTIME   SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRBROWS,R12            ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING USRBROWS+4095,R11       ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST0,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST1,NAME,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,RACFATT,'CHAR',12)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,USERDATA,'CHAR',70)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,LCMD,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,ZTDSELS,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,USERMSGL,'CHAR',78)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,SAVTOPB,'FIXED',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFA                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFA    EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,CGROUP1,'CHAR',72)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFB                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFB    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTA,CNCTGRP1,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFC                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFC    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTB,ZTDTOP,'CHAR',6)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFD                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFD    EQU   *\n         ISPCALL ('VDEFINE',NAMLIST$,TSOMAXR$,'CHAR',8)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN 'USERTAB'\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN 'USERTAB' TABLE\n         ISPCALL ('TBOPEN','USERTAB','NOWRITE','USRTLIB')\n         B     TBOPEN10(R15)           CHECK RETURN CODE\nTBOPEN10 EQU   *\n         B     TBTOP1                  RC = 00 (CONTINUE)\n         B     TBTOP1                  RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - POINT TO TOP OF 'USERTAB'\n***********************************************************************\nTBTOP1   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      POSITION CRP AT TOP OF TABLE\n         ISPCALL ('TBTOP','USERTAB')\n         B     TBTOP110(R15)           CHECK RETURN CODE\nTBTOP110 EQU   *\n         B     TBTOP120                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBTOP120 EQU   *\n         MVC   INQUIRY,SPACES          INITIALIZE INQUIRY FLAG\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         TITLE 'USRBROWS - DISPLAY SECTION I - USER INFORMATION'\n***********************************************************************\n*  DISPLAY SECTION I - DISPLAY SELECTED TABLE INFORMATION\n***********************************************************************\nTBDISPL1 EQU   *\n         BAL   R8,RESTORE              RESTORE LOGICAL SCREEN\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n         CLC   INQUIRY,CONTINUE        INQUIRY SELECTED?\n         BE    TBDIS110                YES, USE PANEL 'USRBROW2'\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','USERTAB','USRBROW1')\n         B     TBDIS120(R15)           CHECK RETURN CODE\nTBDIS110 EQU   *\n         ISPCALL ('TBDISPL','USERTAB','USRBROW2')\n         B     TBDIS120(R15)           CHECK RETURN CODE\nTBDIS120 EQU   *\n         B     TBDIS130                RC = 00 (CONTINUE)\n         B     TBDIS130                RC = 04 (CONTINUE)\n         B     TBDIS140                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBDIS130 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKZCMD                 RC = 04 (CONTINUE)\nTBDIS140 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKSELS1                RC = 08 (CONTINUE)\n***********************************************************************\n*  DISPLAY SECTION I - CHECK FOR 'LOCATE' & 'I' PRIMARY COMMAND\n***********************************************************************\nCHKZCMD  EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         MVC   SAVLOC,SPACES           INITIALIZE SAVLOC\n         MVC   LOCATE,SPACES           INITIALIZE LOCATE FLAG\n         LA    R2,ZCMD                 R2 - INDEX THROUGH ZCMD\n         LA    R3,40                   R3 - MAXIMUM LENGTH OF ZCMD\n         LA    R5,SAVLOC               R5 - INDEX THROUGH SAVLOC\nCHKZCMD1 EQU   *\n         LA    R4,2                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(2,R2),LOCATE1         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,3                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(3,R2),LOCATE2         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,4                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(4,R2),LOCATE3         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,5                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(5,R2),LOCATE4         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,6                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(6,R2),LOCATE5         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,7                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(7,R2),LOCATE6         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         CLC   0(2,R2),INQUIRE         INQUIRY SELECTED?\n         BE    CHKZCMD6                YES, SET INQUIRY FLAG\n         CLC   0(1,R2),SPACES          ANY OTHER CHARACTER ENTERED?\n         BNE   CHKLCMD                 YES, UNSUPPORTED COMMAND\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD1             CONTINUE\n         B     CHKLCMD                 CHECK FOR LINE COMMAND\nCHKZCMD2 EQU   *\n         AR    R2,R4                   POINT R2 PAST LOCATE COMMAND\nCHKZCMD3 EQU   *\n         CLC   0(1,R2),SPACES          START OF LOCATE DATA?\n         BNE   CHKZCMD4                YES, EXTRACT DATA AND SAVE\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD3             CONTINUE\n         B     CHKLCMD                 NOTHING TO LOCATE\nCHKZCMD4 EQU   *\n         CLC   0(1,R2),SPACES          END OF LOCATE DATA?\n         BE    CHKZCMD5                YES, ADD ASTERICK ON END\n         MVC   0(1,R5),0(R2)           EXTRACT LOCATE DATA\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R3,CHKZCMD4             CONTINUE\n         B     CHKLCMD                 CHECK LINE COMMANDS\nCHKZCMD5 EQU   *\n         MVC   0(1,R5),ASTERICK        ADD ASTERICK ON END\n         MVC   LOCATE,YES              SET LOCATE FLAG\n         MVC   INQUIRY,SPACES          RESET INQUIRY FLAG\n         B     CHKLCMD                 CHECK LINE COMMANDS\nCHKZCMD6 EQU   *\n         MVC   INQUIRY,YES             SET INQUIRY FLAG\n         B     CHKLCMD                 CHECK LINE COMMANDS\n***********************************************************************\n*  DISPLAY SECTION I - END OR RETURN ENTERED. CHECK FOR SELECTED ROWS\n***********************************************************************\nCHKSELS1 EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         CLC   ZTDSELS,CHAR00          ANY ROWS SELECTED?\n         BE    FINISH                  NO, WE'RE FINISHED\n         B     CHKLCMD                 YES, CHECK LINE COMMAND(S)\nCHKSELS2 EQU   *\n         CLC   ZTDSELS,CHAR01          SELECTED ROWS PROCESSED?\n         BE    FINISH                  YES, WE'RE FINISHED\n***********************************************************************\n*  DISPLAY SECTION I - CHECK LINE COMMAND\n***********************************************************************\nCHKLCMD  EQU   *\n         CLC   ZTDSELS,CHAR00          NO LINES SELECTED?\n         BE    CHKLOC                  CORRECT, PROCESS 'LOCATE' CMD\n         CLC   ZTDSELS,CHAR01          ONE LINE SELECTED?\n         BNE   CHKLCMD3                MORE, PROCESS\n         CLC   LCMD,RACF               DISPLAY RACF PROFILE?\n         BNE   CHKLCMD1                NO, CHECK FOR NCCF PROFILE\n         BAL   R9,TBGET                DISPLAY USER'S RACF PROFILE\n         B     CHKLOC                  PROCESS 'LOCATE' COMMAND\nCHKLCMD1 EQU   *\n         CLC   LCMD,NCCF               DISPLAY NCCF PROFILE?\n         BNE   CHKLCMD2                NO, CHECK FOR TSO USER DATA\n         LA    R9,CHKLOC               R9 - ADDRESS TO RETURN TO\n         CLC   NCCFUSER,YES            DOES USER HAVE NCCF PROFILE?\n         BNE   MSGDISP2                NO, DISPLAY MESSAGE\n         BAL   R9,VPUT2                YES, DISPLAY USER'S NCCF PROFILE\n         B     CHKLOC                  PROCESS 'LOCATE' COMMAND\nCHKLCMD2 EQU   *\n         CLC   LCMD,TSO                DISPLAY TSO USER DATA?\n         BNE   CHKLOC                  NO, PROCESS 'LOCATE' COMMAND\n         LA    R9,CHKLOC               R9 - ADDRESS TO RETURN TO\n         CLC   TSOUSER,YES             DOES USER HAVE TSO ACCOUNT DATA?\n         BNE   MSGDISP3                NO, DISPLAY MESSAGE\n         BAL   R9,TBGET                DISPLAY USER'S TSO DATA\n         B     CHKLOC                  PROCESS 'LOCATE' COMMAND\nCHKLCMD3 EQU   *\n         CLC   LCMD,RACF               DISPLAY RACF PROFILE?\n         BNE   CHKLCMD4                NO, CHECK NCCF REQUEST\n         BAL   R9,TBGET                YES, DISPLAY USER'S RACF PROFILE\n         B     TBDISPL2                DISPLAY TO PROCESS LCMD\nCHKLCMD4 EQU   *\n         CLC   LCMD,NCCF               DISPLAY NCCF PROFILE?\n         BNE   CHKLCMD5                NO, CHECK TSO REQUEST\n         LA    R9,TBDISPL2             R9 - ADDRESS TO RETURN TO\n         CLC   NCCFUSER,YES            DOES USER HAVE NCCF PROFILE?\n         BNE   MSGDISP2                NO, DISPLAY MESSAGE\n         BAL   R9,VPUT2                YES, DISPLAY USER'S NCCF PROFILE\n         B     TBDISPL2                DISPLAY TO PROCESS LCMD\nCHKLCMD5 EQU   *\n         CLC   LCMD,TSO                DISPLAY TSO USER DATA?\n         BNE   TBDISPL2                NO, DISPLAY TO PROCESS LCMD\n         LA    R9,TBDISPL2             R9 - ADDRESS TO RETURN TO\n         CLC   TSOUSER,YES             DOES USER HAVE TSO ACCOUNT DATA?\n         BNE   MSGDISP3                NO, DISPLAY MESSAGE\n         BAL   R9,TBGET                YES, DISPLAY USER'S TSO DATA\n***********************************************************************\n*  DISPLAY SECTION I - DISPLAY TABLE TO PROCESS LCMD\n***********************************************************************\nTBDISPL2 EQU   *\n         BAL   R8,RESTORE              RESTORE LOGICAL SCREEN\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','USERTAB')\n         B     TBDIS210(R15)           CHECK RETURN CODE\nTBDIS210 EQU   *\n         B     TBDIS220                RC = 00 (CONTINUE)\n         B     TBDIS220                RC = 04 (CONTINUE)\n         B     TBDIS230                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBDIS220 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKLCMD                 RC = 04 (CONTINUE)\nTBDIS230 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKSELS2                RC = 08 (CONTINUE)\n***********************************************************************\n*  DISPLAY SECTION I - PROCESS LOCATE & INQUIRE DATA\n***********************************************************************\nCHKLOC   EQU   *\n         CLC   LOCATE,YES              ANYTHING TO LOCATE?\n         BE    TBTOP2                  YES, ATTEMPT TO LOCATE\n         CLC   INQUIRY,YES             INQUIRY REQUESTED?\n         BE    TBTOP2                  YES, PERFORM INQUIRY\n         B     TBDISPL1                RE-DISPLAY TABLE\n***********************************************************************\n*  DISPLAY SECTION I - SET CRP TO TOP OF TABLE\n***********************************************************************\nTBTOP2   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP','USERTAB')\n         B     TBTOP210(R15)           CHECK RETURN CODE\nTBTOP210 EQU   *\n         B     TBVCLEAR                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION I - CLEAR 'USERTAB' VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR','USERTAB')\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBCLR20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBCLR20  EQU   *\n         CLC   LOCATE,YES              LOCATE OR INQUIRE?\n         BNE   VPUT1                   INQUIRE, DISPLAY INQUIRY PANELS\n         MVC   USERID,SAVLOC           SET USERID WITH LOCATE VALUE\n         B     TBSARG                  DEFINE SCAN ARGUMENTS\n***********************************************************************\n*  DISPLAY SECTION II - UPDATE VARIABLES\n***********************************************************************\nVPUT1    EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('VPUT',NAMELSTF,'ASIS')\n         B     VPUT110(R15)            CHECK RETURN CODE\nVPUT110  EQU   *\n         B     SELECT                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION II - SELECT PROGRAM 'USRINQ'\n***********************************************************************\nSELECT   EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n*                                      SELECT A FUNCTION\n         ISPCALL ('SELECT',FULL11,USRINQ)     SELECT 'USRINQ'\n         B     SELCT10(R15)            CHECK RETURN CODE\nSELCT10  EQU   *\n         B     SELCT20                 RC = 00 (CONTINUE)\n         B     SELCT20                 RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSELCT20  EQU   *\n***********************************************************************\n*  DISPLAY SECTION II - RETRIEVE VARIABLES FROM 'USRINQ'\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      SELECT A FUNCTION\n         ISPCALL ('VGET',NAMELSTF)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     VGET20                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nVGET20   EQU   *\n         CLC   TSOUSER,YES             TSO INQUIRY?\n         BNE   TBSARG                  NO, DEFINE SCAN ARGUMENTS\n         CLC   TSO$,YES                ADMIN TSO INQUIRY\n         BNE   VGET30                  CHECK REGION 1\n         MVC   TSOMAXR$,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST$,TSODEST        UPDATE DEST\n         MVC   TSOATT0$,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT1$,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT2$,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT3$,TSOATT3        UPDATE OPER / NOOPER\nVGET30   EQU   *\n         CLC   TSO1,YES                REG 1 TSO INQUIRY\n         BNE   VGET40                  CHECK REGION 2\n         MVC   TSOMAXR1,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST1,TSODEST        UPDATE DEST\n         MVC   TSOATT01,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT11,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT21,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT31,TSOATT3        UPDATE OPER / NOOPER\nVGET40   EQU   *\n         CLC   TSO2,YES                REG 2 TSO INQUIRY\n         BNE   VGET50                  CHECK REGION 3\n         MVC   TSOMAXR2,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST2,TSODEST        UPDATE DEST\n         MVC   TSOATT02,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT12,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT22,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT32,TSOATT3        UPDATE OPER / NOOPER\nVGET50   EQU   *\n         CLC   TSO3,YES                REG 3 TSO INQUIRY\n         BNE   VGET60                  CHECK REGION 4\n         MVC   TSOMAXR3,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST3,TSODEST        UPDATE DEST\n         MVC   TSOATT03,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT13,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT23,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT33,TSOATT3        UPDATE OPER / NOOPER\nVGET60   EQU   *\n         CLC   TSO4,YES                REG 4 TSO INQUIRY\n         BNE   VGET70                  CHECK REGION 5\n         MVC   TSOMAXR4,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST4,TSODEST        UPDATE DEST\n         MVC   TSOATT04,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT14,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT24,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT34,TSOATT3        UPDATE OPER / NOOPER\nVGET70   EQU   *\n         CLC   TSO5,YES                REG 5 TSO INQUIRY\n         BNE   VGET80                  CHECK REGION 6\n         MVC   TSOMAXR5,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST5,TSODEST        UPDATE DEST\n         MVC   TSOATT05,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT15,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT25,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT35,TSOATT3        UPDATE OPER / NOOPER\nVGET80   EQU   *\n         CLC   TSO6,YES                REG 6 TSO INQUIRY\n         BNE   VGET90                  CHECK REGION 7\n         MVC   TSOMAXR6,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST6,TSODEST        UPDATE DEST\n         MVC   TSOATT06,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT16,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT26,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT36,TSOATT3        UPDATE OPER / NOOPER\nVGET90   EQU   *\n         CLC   TSO7,YES                REG 7 TSO INQUIRY\n         BNE   VGETA0                  CHECK REGION 8\n         MVC   TSOMAXR7,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST7,TSODEST        UPDATE DEST\n         MVC   TSOATT07,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT17,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT27,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT37,TSOATT3        UPDATE OPER / NOOPER\nVGETA0   EQU   *\n         CLC   TSO8,YES                REG 8 TSO INQUIRY\n         BNE   TBSARG                  DEFINE SCAN ARGUMENTS\n         MVC   TSOMAXR8,TSOMAXR        UPDATE MAX REG\n         MVC   TSODEST8,TSODEST        UPDATE DEST\n         MVC   TSOATT08,TSOATT0        UPDATE ACCT / NOACCT\n         MVC   TSOATT18,TSOATT1        UPDATE JCL / NOJCL\n         MVC   TSOATT28,TSOATT2        UPDATE MOUNT / NOMOUNT\n         MVC   TSOATT38,TSOATT3        UPDATE OPER / NOOPER\n***********************************************************************\n*  DISPLAY SECTION I - DEFINE SCAN ARGUMENTS FOR 'USERTAB'\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG','USERTAB')\n         B     TBARG10(R15)            CHECK RETURN CODE\nTBARG10  EQU   *\n         B     TBSCAN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION I - SEARCH 'USERTAB' TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH A TABLE\n         ISPCALL ('TBSCAN','USERTAB')\n         B     TBSCN10(R15)            CHECK RETURN CODE\nTBSCN10  EQU   *\n         B     TBSCN20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     TBSCN40                 RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSCN20  EQU   *\n         CLC   LOCATE,YES              'LOCATE' ATTEMPTED?\n         BNE   TBSCN30                 NO, SET INQUIRY FLAG\n         MVC   LOCATE,CONTINUE         CONTINUE AFTER LOCATE\n         B     TBDISPL1                RETURN\nTBSCN30  EQU   *\n         MVC   INQUIRY,CONTINUE        CONTINUE AFTER INQUIRE\n         B     TBDISPL1                RETURN\nTBSCN40  EQU   *\n         CLC   LOCATE,YES              'LOCATE' ATTEMPTED?\n         BE    LOCERR08                YES, ISSUE APPROPRIATE MESSAGE\n         B     INQERR08                NO, ISSUE MESSAGE FOR INQUIRY\n         TITLE 'USRBROWS - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION - ISPF DIALOG SERVICE ERRORS\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   USERMSGS,USRERR0S       SET SHORT MESSAGE\n         MVC   USERMSGL,USRERR0L       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRBROW1',USERMSG)\n         B     FINISH\n***********************************************************************\n*  ERROR PROCESSING SECTION - NON-NCCF USER INFORMATION MESSAGE\n***********************************************************************\nMSGDISP2 EQU   *\n         MVC   USERMSGS,USRERR1S       SET SHORT MESSAGE\n         MVC   USERMSGL,USRERR1L       SET LONG MESSAGE\n         MVC   USERMSGS(8),USERID      SET USERID IN SHORT MSG\n         MVC   USERMSGL+7(8),USERID    SET USERID IN LONG MSG\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRBROW1',USERMSG)\n         BR    R9                      RETURN\n***********************************************************************\n*  ERROR PROCESSING SECTION - NON-TSO  USER INFORMATION MESSAGE\n***********************************************************************\nMSGDISP3 EQU   *\n         MVC   USERMSGS,USRERR2S       SET SHORT MESSAGE\n         MVC   USERMSGL,USRERR2L       SET LONG MESSAGE\n         MVC   USERMSGS(8),USERID      SET USERID IN SHORT MSG\n         MVC   USERMSGL+7(8),USERID    SET USERID IN LONG MSG\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRBROW1',USERMSG)\n         BR    R9                      RETURN\n***********************************************************************\n*  ERROR PROCESSING SECTION - USER NOT FOUND ERROR ('LOCATE' COMMAND)\n***********************************************************************\nLOCERR08 EQU   *\n         MVC   USERMSGS,SPACES         INITIALIZE USERMSGS\n         MVC   USERMSGL,SPACES         INITIALIZE USERMSGL\n         MVC   USERMSGL(1),QUOTE       MOVE LEADING QUOTE TO MESSAGE\n         MVC   USERMSGL+1(40),SAVLOC   MOVE IN LOCATION DATA\n         LA    R2,USERMSGL             R2 - INDEX THROUGH SAVLOC\n         LA    R3,41                   R3 - MAXIMUM LENGTH\nLOCERR18 EQU   *\n         CLC   0(1,R2),ASTERICK        END OF LOCATION DATA\n         BE    LOCERR28                YES, ADD TRAILING QUOTE, ETC.\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,LOCERR18             CONTINUE\nLOCERR28 EQU   *\n         MVC   USERMSGS,USRERR3S       ISPF SHORT MESSAGE\n         MVC   0(21,R2),USRERR3L       ADD TRAILING QUOTE, ETC.\n         BAL   R9,TBTOP3               RE-POSITION CRP\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n         ISPCALL ('TBDISPL','USERTAB','USRBROW1',USERMSG)\n         B     LOCERR38(R15)           CHECK RETURN CODE\nLOCERR38 EQU   *\n         B     LOCERR48                RC = 00 (CONTINUE)\n         B     LOCERR48                RC = 04 (CONTINUE)\n         B     CHKSELS1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nLOCERR48 EQU   *\n         LA    R9,TBDISPL1             R9 - RETURN ADDRESS\n         B     TBTOP3\n***********************************************************************\n*  ERROR PROCESSING SECTION - INQUIRY SCAN ERROR\n***********************************************************************\nINQERR08 EQU   *\n         MVC   USERMSGS,USRERR4S       SET SHORT MESSAGE\n         MVC   USERMSGL,USRERR4L       SET LONG MESSAGE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRBROW1',USERMSG)\n         LA    R9,TBDISPL1             R9 - RETURN ADDRESS\n***********************************************************************\n*  ERROR PROCESSING SECTION - SET CRP TO TOP OF TABLE\n***********************************************************************\nTBTOP3   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP','USERTAB')\n         B     TBTOP310(R15)           CHECK RETURN CODE\nTBTOP310 EQU   *\n         B     TBSKIP                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ERROR PROCESSING SECTION - RESET ROWID\n***********************************************************************\nTBSKIP   EQU   *\n         MVC   ISPFSERV,SKPID          SET ISPF DIALOG SERVICE\n*                                      RESET ROWID\n         ISPCALL ('TBSKIP','USERTAB',SAVTOPB)\n         B     TBSKP10(R15)            CHECK RETURN CODE\nTBSKP10  EQU   *\n         B     TBSKP20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSKIP)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSKP20  EQU   *\n         MVC   LOCATE,SPACES           RESET 'LOCATE' FLAG\n         MVC   INQUIRY,SPACES          RESET 'INQUIRE' FLAG\n         MVC   SAVLOC,SPACES           RESET SAVLOC\n         BR    R9                      RETURN\n         TITLE 'USRBROWS - DISPLAY SECTION II - RACF PROFILE INFORMATIO+\n               N'\n***********************************************************************\n*  DISPLAY SECTION II - RETRIEVE A ROW FROM A TABLE\n***********************************************************************\nTBGET    EQU   *\n         MVC   ISPFSERV,TBGID          SET ISPF DIALOG SERVICE\n         CLC   LCMD,TSO                TSO ACCOUNT DISPLAY REQUESTED?\n         BE    TBGET20                 YES, SKIP CNCTGRP CLEAR\n         LA    R2,CNCTGRP1             R2 - INDEX THRU CNCTGRPS (INPUT)\n         LA    R3,CGROUP1              R3 - INDEX THRU CGROUPS (OUTPUT)\n         LA    R4,15                   R4 - MAX NUM OF CONNECT GROUPS\nTBGET10  EQU   *\n         MVC   0(40,R2),SPACES         CLEAR THIS CNCTGRP\n         MVC   0(72,R3),SPACES         CLEAR THIS CGROUP\n         LA    R2,40(R2)               INCREMENT R2\n         LA    R3,72(R3)               INCREMENT R3\n         BCT   R4,TBGET10              CLEAR NEXT CNCTGRP\nTBGET20  EQU   *\n*                                      RETRIEVE A ROW FROM A TABLE\n         ISPCALL ('TBGET','USERTAB')\n         B     TBGET30(R15)            CHECK RETURN CODE\nTBGET30  EQU   *\n         B     TBGET40                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBGET40  EQU   *\n         CLC   LCMD,RACF               RACF PROFILE REQUESTED?\n         BE    DISPLAY1                YES, DISPLAY USER'S RACF PROFILE\n         B     DISPLAY2                NO, DISPLAY USER'S TSO ACCOUNT\n***********************************************************************\n*  DISPLAY SECTION II - DISPLAY USER'S RACF PROFILE\n***********************************************************************\nDISPLAY1 EQU   *\n         LA    R2,CNCTGRP1             R2 - INDEX THRU CNCTGRPS (INPUT)\n         LA    R3,CGROUP1              R3 - INDEX THRU CGROUPS (OUTPUT)\n         LR    R4,R2                   R4 - INDEX THRU CNCTGRPS\n         LR    R5,R3                   R5 - INDEX THRU CGROUPS\n         LA    R6,15                   R6 - MAX NUM OF CONNECT GROUPS\nDISPL110 EQU   *\n         CLC   0(8,R2),SPACES          ARE WE DONE WITH THIS USER?\n         BE    DISPL120                YES, DISPLAY\n         MVC   0(8,R3),0(R2)           MOVE GROUP NAME\n         LA    R2,8(R2)                INCREMENT R2\n         LA    R3,18(R3)               INCREMENT R3\n         MVC   0(7,R3),0(R2)           MOVE GROUP AUTHORITY\n         LA    R2,8(R2)                INCREMENT R2\n         LA    R3,17(R3)               INCREMENT R3\n         MVC   0(7,R3),0(R2)           MOVE GROUP UACC\n         LA    R2,8(R2)                INCREMENT R2\n         LA    R3,14(R3)               INCREMENT R3\n         MVC   0(8,R3),0(R2)           MOVE REVOKE DATE\n         LA    R2,8(R2)                INCREMENT R2\n         LA    R3,15(R3)               INCREMENT R3\n         MVC   0(8,R3),0(R2)           MOVE RESUME DATE\n         LA    R4,40(R4)               POINT TO NEXT CNCTGRP\n         LA    R5,72(R5)               POINT TO NEXT CGROUP\n         LR    R2,R4                   R2 - INDEX THRU CNCTGRP\n         LR    R3,R5                   R3 - INDEX THRU CGROUP\n         BCT   R6,DISPL110             PROCESS NEXT CNCTGRP\nDISPL120 EQU   *\n         MVC   MESSAGE,SPACES          INITIALIZE MESSAGE\n         CLC   CGROUPB,SPACES          MORE THAN TEN CONNECT GROUPS?\n         BE    DISPL130                NO, CONTINUE\n         MVC   MESSAGE,MSGTEXT         'ADDITIONAL CONNECT GROUP' MSG\nDISPL130 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRRACF1')\n         B     DISPL140(R15)           CHECK RETURN CODE\nDISPL140 EQU   *\n         B     DISPL150                RC = 00 (CONTINUE)\n         B     DISPL150                RC = 04 (CONTINUE)\n         B     DISPL170                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL150 EQU   *\n         CLC   CGROUPB,SPACES          MORE THAN TEN CONNECT GROUPS?\n         BE    DISPL130                NO, RE-DISPLAY RACF INFO\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRRACF2')\n         B     DISPL160(R15)           CHECK RETURN CODE\nDISPL160 EQU   *\n         B     DISPL150                RC = 00 (CONTINUE)\n         B     DISPL150                RC = 04 (CONTINUE)\n         B     DISPL130                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL170 EQU   *\n         LA    R2,CNCTGRP1             R2 - INDEX THRU CNCTGRPS (INPUT)\n         LA    R3,CGROUP1              R3 - INDEX THRU CGROUPS (OUTPUT)\n         LA    R4,15                   R4 - MAX NUM OF CONNECT GROUPS\nDISPL180 EQU   *\n         MVC   0(40,R2),SPACES         CLEAR THIS CNCTGRP\n         MVC   0(72,R3),SPACES         CLEAR THIS CGROUP\n         LA    R2,40(R2)               INCREMENT R2\n         LA    R3,72(R3)               INCREMENT R3\n         BCT   R4,DISPL180             CLEAR NEXT CNCTGRP\n         BR    R9                      RETURN\n***********************************************************************\n*  DISPLAY SECTION II - DISPLAY USER'S TSO ACCOUNT(S)\n***********************************************************************\nDISPLAY2 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRTSO1')\n         B     DISPL210(R15)           CHECK RETURN CODE\nDISPL210 EQU   *\n         B     DISPL220                RC = 00 (CONTINUE)\n         B     DISPL220                RC = 04 (CONTINUE)\n         B     DISPL240                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL220 EQU   *\n         ISPCALL ('DISPLAY','USRTSO2')\n         B     DISPL230(R15)           CHECK RETURN CODE\nDISPL230 EQU   *\n         B     DISPL220                RC = 00 (CONTINUE)\n         B     DISPL220                RC = 04 (CONTINUE)\n         B     DISPLAY2                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL240 EQU   *\n         BR    R9                      RETURN\n***********************************************************************\n*  DISPLAY SECTION II - UPDATE 'USERID', 'NAME' & 'NCCFPROF'\n***********************************************************************\nVPUT2    EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('VPUT',NAMELSTC,'ASIS')\n         B     VPUT210(R15)            CHECK RETURN CODE\nVPUT210  EQU   *\n         B     VPUT220                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nVPUT220  EQU   *\n         ISPCALL ('SELECT',FULL12,USRNCCF)     SELECT 'USRNCCF'\n         BR    R9                      RETURN\n***********************************************************************\n*  DISPLAY SECTION II - SAVE LOGICAL SCREEN\n***********************************************************************\nSAVE     EQU   *\n         MVC   ISPFSERV,CTLID          SET ISPF DIALOG SERVICE\n*                                      SAVE LOGICAL SCREEN\n         ISPCALL ('CONTROL','DISPLAY','SAVE')\n         B     SAVE10(R15)             CHECK RETURN CODE\nSAVE10   EQU   *\n         B     SAVE20                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR CONTROL)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR CONTROL)\n         B     USRERR16                RC = 16 (NOT VALID FOR CONTROL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSAVE20   EQU   *\n         BR    R8                      RETURN\n***********************************************************************\n*  DISPLAY SECTION II - RESTORE LOGICAL SCREEN\n***********************************************************************\nRESTORE  EQU   *\n         MVC   ISPFSERV,CTLID          SET ISPF DIALOG SERVICE\n*                                      RESTORE LOGICAL SCREEN\n         ISPCALL ('CONTROL','DISPLAY','RESTORE')\n         B     REST10(R15)             CHECK RETURN CODE\nREST10   EQU   *\n         B     REST20                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR CONTROL)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR CONTROL)\n         B     USRERR16                RC = 16 (NOT VALID FOR CONTROL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nREST20   EQU   *\n         BR    R8                      RETURN\n         TITLE 'USRBROWS - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n*                                      RELEASE AREA HELD BY USERTAB\n         ISPCALL ('TBCLOSE','USERTAB',' ',' ',' ','USRTLIB')\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRBROWS - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'USRBROWS - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL11   DC    F'11'                   FULLWORD CONSTANT VALUE '11'\nFULL12   DC    F'12'                   FULLWORD CONSTANT VALUE '12'\nFULL14   DC    F'14'                   FULLWORD CONSTANT VALUE '14'\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nINQUIRE  DC    CL2'I '                 INQUIRY COMMAND IDENTIFIER\nLOCATE1  DC    CL2'L '                 LOCATE COMMAND IDENTIFIER\nLOCATE2  DC    CL3'LO '                LOCATE COMMAND IDENTIFIER\nLOCATE3  DC    CL4'LOC '               LOCATE COMMAND IDENTIFIER\nLOCATE4  DC    CL5'LOCA '              LOCATE COMMAND IDENTIFIER\nLOCATE5  DC    CL6'LOCAT '             LOCATE COMMAND IDENTIFIER\nLOCATE6  DC    CL7'LOCATE '            LOCATE COMMAND IDENTIFIER\nCHAR00   DC    CL4'0000'               CHARACTER CONSTANT; VALUE '0000'\nCHAR01   DC    CL4'0001'               CHARACTER CONSTANT; VALUE '0001'\nRACF     DC    CL1'R'                  INDICATE RACF PROFILE DISPLAY\nNCCF     DC    CL1'N'                  INDICATE NCCF PROFILE DISPLAY\nTSO      DC    CL1'T'                  INDICATE TSO DATA DISPLAY\nASTERICK DC    CL8'*       '           ASTERICK\nQUOTE    DC    CL1''''                 QUOTE\nYES      DC    CL1'Y'                  YES\nCONTINUE DC    CL1'C'                  CONTINUE INQUIRY\nUSERMSG  DC    CL8'USER000'            'GENERIC' MESSAGE ID\nUSRINQ   DC    C'PGM(USRINQ)'          FUNCTION CALLED FROM USRBROWS\nUSRNCCF  DC    C'PGM(USRNCCF)'         FUNCTION CALLED FROM USRBROWS\nUSRTSO1  DC    C'PANEL(USRTSO1)'       SELECTION PANEL FROM USRBROWS\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nTDSID    DC    CL8'TBDISPL'            ISPF DIALOG SERVICE (TBDISPL)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nTBGID    DC    CL8'TBGET'              ISPF DIALOG SERVICE (TBGET)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSKPID    DC    CL8'TBSKIP'             ISPF DIALOG SERVICE (TBSKIP)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nSELID    DC    CL8'SELECT'             ISPF DIALOG SERVICE (SELECT)\nCTLID    DC    CL8'CONTROL'            ISPF DIALOG SERVICE (CONTROL)\nUSRERR0S DC    CL24'USRBROWS program error.'\nUSRERR0L DC    CL78'ISPF Dialog Service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\nUSRERR1S DC    CL24'12345678 not NCCF user. '\nUSRERR1L DC    CL78'User - 12345678 - is not an NCCF user. There is no +\n               NCCF information to display'\nUSRERR2S DC    CL24'12345678 not TSO user.  '\nUSRERR2L DC    CL78'User - 12345678 - is not a TSO user. There is no TS+\n               O information to display.  '\nUSRERR3S DC    CL24'Not found in table.'\nUSRERR3L DC    CL21''' not found in table.'\nUSRERR4S DC    CL24'Not found in table.'\nUSRERR4L DC    CL78'Information to be inquired upon does not co-exist i+\n               n any table row.           '\n*                                      MESSAGE TEXT 1\nMSGTEXT  DC    CL72'Press ENTER key to view additional connect groups'\nNAMELST0 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'10'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'TSOID'\n         DC    CL8'TSOMAXR'\n         DC    CL8'TSODEST'\n         DC    CL8'TSOATT0'\n         DC    CL8'TSOATT1'\n         DC    CL8'TSOATT2'\n         DC    CL8'TSOATT3'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'NAME'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 12)\n         DC    F'06'\n         DC    F'00'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'RACFATT4'\n         DC    CL8'RACFATT5'\n         DC    CL8'RACFATT6'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 70)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERDATA'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'12'\n         DC    F'00'\n         DC    CL8'LCMD'\n         DC    CL8'NCCFUSER'\n         DC    CL8'TSOUSER'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'TSONUM'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTDSELS'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SAVTOPB'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 72)\n         DC    F'16'\n         DC    F'00'\n         DC    CL8'CGROUP1'\n         DC    CL8'CGROUP2'\n         DC    CL8'CGROUP3'\n         DC    CL8'CGROUP4'\n         DC    CL8'CGROUP5'\n         DC    CL8'CGROUP6'\n         DC    CL8'CGROUP7'\n         DC    CL8'CGROUP8'\n         DC    CL8'CGROUP9'\n         DC    CL8'CGROUPA'\n         DC    CL8'CGROUPB'\n         DC    CL8'CGROUPC'\n         DC    CL8'CGROUPD'\n         DC    CL8'CGROUPE'\n         DC    CL8'CGROUPF'\n         DC    CL8'MESSAGE'\nNAMELSTA DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'16'\n         DC    F'00'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'ZCMD'\nNAMELSTB DS    0F                      NAMES OF VARIABLES (LENGTH 6)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTDTOP'\nNAMELSTC DS    0F                      NAMES OF VARIABLES\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'NAME'\n         DC    CL8'NCCFPROF'\nNAMELSTE DS    0F                      NAMES OF VARIABLES\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'TSOID'\n         DC    CL8'NAME'\nNAMELSTF DS    0F                      NAMES OF USRINQ VARIABLES\n         DC    F'38'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'FNAME'\n         DC    CL8'LNAME'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'ROOM'\n         DC    CL8'EXTENS'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'TSOMAXR'\n         DC    CL8'TSODEST'\n         DC    CL8'TSOATT0'\n         DC    CL8'TSOATT1'\n         DC    CL8'TSOATT2'\n         DC    CL8'TSOATT3'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'TSOUSER'\n         DC    CL8'NCCFPROF'\n         DC    CL8'NCCFUSER'\nNAMLIST$ DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'135'\n         DC    F'00'\n         DC    CL8'TSOMAXR$'\n         DC    CL8'TSODEST$'\n         DC    CL8'TSONAM0$'\n         DC    CL8'TSOSIZ0$'\n         DC    CL8'TSOUNT0$'\n         DC    CL8'TSONAM1$'\n         DC    CL8'TSOSIZ1$'\n         DC    CL8'TSOUNT1$'\n         DC    CL8'TSONAM2$'\n         DC    CL8'TSOSIZ2$'\n         DC    CL8'TSOUNT2$'\n         DC    CL8'TSOATT0$'\n         DC    CL8'TSOATT1$'\n         DC    CL8'TSOATT2$'\n         DC    CL8'TSOATT3$'\n         DC    CL8'TSOMAXR1'\n         DC    CL8'TSODEST1'\n         DC    CL8'TSONAM01'\n         DC    CL8'TSOSIZ01'\n         DC    CL8'TSOUNT01'\n         DC    CL8'TSONAM11'\n         DC    CL8'TSOSIZ11'\n         DC    CL8'TSOUNT11'\n         DC    CL8'TSONAM21'\n         DC    CL8'TSOSIZ21'\n         DC    CL8'TSOUNT21'\n         DC    CL8'TSOATT01'\n         DC    CL8'TSOATT11'\n         DC    CL8'TSOATT21'\n         DC    CL8'TSOATT31'\n         DC    CL8'TSOMAXR2'\n         DC    CL8'TSODEST2'\n         DC    CL8'TSONAM02'\n         DC    CL8'TSOSIZ02'\n         DC    CL8'TSOUNT02'\n         DC    CL8'TSONAM12'\n         DC    CL8'TSOSIZ12'\n         DC    CL8'TSOUNT12'\n         DC    CL8'TSONAM22'\n         DC    CL8'TSOSIZ22'\n         DC    CL8'TSOUNT22'\n         DC    CL8'TSOATT02'\n         DC    CL8'TSOATT12'\n         DC    CL8'TSOATT22'\n         DC    CL8'TSOATT32'\n         DC    CL8'TSOMAXR3'\n         DC    CL8'TSODEST3'\n         DC    CL8'TSONAM03'\n         DC    CL8'TSOSIZ03'\n         DC    CL8'TSOUNT03'\n         DC    CL8'TSONAM13'\n         DC    CL8'TSOSIZ13'\n         DC    CL8'TSOUNT13'\n         DC    CL8'TSONAM23'\n         DC    CL8'TSOSIZ23'\n         DC    CL8'TSOUNT23'\n         DC    CL8'TSOATT03'\n         DC    CL8'TSOATT13'\n         DC    CL8'TSOATT23'\n         DC    CL8'TSOATT33'\n         DC    CL8'TSOMAXR4'\n         DC    CL8'TSODEST4'\n         DC    CL8'TSONAM04'\n         DC    CL8'TSOSIZ04'\n         DC    CL8'TSOUNT04'\n         DC    CL8'TSONAM14'\n         DC    CL8'TSOSIZ14'\n         DC    CL8'TSOUNT14'\n         DC    CL8'TSONAM24'\n         DC    CL8'TSOSIZ24'\n         DC    CL8'TSOUNT24'\n         DC    CL8'TSOATT04'\n         DC    CL8'TSOATT14'\n         DC    CL8'TSOATT24'\n         DC    CL8'TSOATT34'\n         DC    CL8'TSOMAXR5'\n         DC    CL8'TSODEST5'\n         DC    CL8'TSONAM05'\n         DC    CL8'TSOSIZ05'\n         DC    CL8'TSOUNT05'\n         DC    CL8'TSONAM15'\n         DC    CL8'TSOSIZ15'\n         DC    CL8'TSOUNT15'\n         DC    CL8'TSONAM25'\n         DC    CL8'TSOSIZ25'\n         DC    CL8'TSOUNT25'\n         DC    CL8'TSOATT05'\n         DC    CL8'TSOATT15'\n         DC    CL8'TSOATT25'\n         DC    CL8'TSOATT35'\n         DC    CL8'TSOMAXR6'\n         DC    CL8'TSODEST6'\n         DC    CL8'TSONAM06'\n         DC    CL8'TSOSIZ06'\n         DC    CL8'TSOUNT06'\n         DC    CL8'TSONAM16'\n         DC    CL8'TSOSIZ16'\n         DC    CL8'TSOUNT16'\n         DC    CL8'TSONAM26'\n         DC    CL8'TSOSIZ26'\n         DC    CL8'TSOUNT26'\n         DC    CL8'TSOATT06'\n         DC    CL8'TSOATT16'\n         DC    CL8'TSOATT26'\n         DC    CL8'TSOATT36'\n         DC    CL8'TSOMAXR7'\n         DC    CL8'TSODEST7'\n         DC    CL8'TSONAM07'\n         DC    CL8'TSOSIZ07'\n         DC    CL8'TSOUNT07'\n         DC    CL8'TSONAM17'\n         DC    CL8'TSOSIZ17'\n         DC    CL8'TSOUNT17'\n         DC    CL8'TSONAM27'\n         DC    CL8'TSOSIZ27'\n         DC    CL8'TSOUNT27'\n         DC    CL8'TSOATT07'\n         DC    CL8'TSOATT17'\n         DC    CL8'TSOATT27'\n         DC    CL8'TSOATT37'\n         DC    CL8'TSOMAXR8'\n         DC    CL8'TSODEST8'\n         DC    CL8'TSONAM08'\n         DC    CL8'TSOSIZ08'\n         DC    CL8'TSOUNT08'\n         DC    CL8'TSONAM18'\n         DC    CL8'TSOSIZ18'\n         DC    CL8'TSOUNT18'\n         DC    CL8'TSONAM28'\n         DC    CL8'TSOSIZ28'\n         DC    CL8'TSOUNT28'\n         DC    CL8'TSOATT08'\n         DC    CL8'TSOATT18'\n         DC    CL8'TSOATT28'\n         DC    CL8'TSOATT38'\n         TITLE 'USRBROWS - LITERAL POOL'\n         LTORG\n         TITLE 'USRBROWS - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nSAVTOPB  DS    F                       SAVE ZTDTOP (BINARY)\nSAVTOPD  DS    D                       SAVE ZTDTOP (FIXED DECIMAL)\nUSERID   DS    CL8                     USER ID\nOWNER    DS    CL8                     OWNER GROUP\nDFLTGRP  DS    CL8                     DEFAULT-GROUP\nTSOID    DS    CL8                     'SYS1.UADS' ID\nTSOMAXR  DS    CL8                     WORK MAXIMUM REGION SIZE\nTSODEST  DS    CL8                     WORK TSO DEFAULT SYSOUT DEST\nTSOATT0  DS    CL8                     WORK ACCT / NOACCT\nTSOATT1  DS    CL8                     WORK JCL / NOJCL\nTSOATT2  DS    CL8                     WORK MOUNT / NOMOUNT\nTSOATT3  DS    CL8                     WORK OPER / NOOPER\nTSOMAXR$ DS    CL8                     MAXIMUM REGION SIZE\nTSODEST$ DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM0$ DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ0$ DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT0$ DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM1$ DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ1$ DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT1$ DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM2$ DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ2$ DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT2$ DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT0$ DS    CL8                     OPER / NOOPER\nTSOATT1$ DS    CL8                     ACCT / NOACCT\nTSOATT2$ DS    CL8                     JCL / NOJCL\nTSOATT3$ DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR1 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST1 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM01 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ01 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT01 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM11 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ11 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT11 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM21 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ21 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT21 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT01 DS    CL8                     OPER / NOOPER\nTSOATT11 DS    CL8                     ACCT / NOACCT\nTSOATT21 DS    CL8                     JCL / NOJCL\nTSOATT31 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR2 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST2 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM02 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ02 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT02 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM12 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ12 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT12 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM22 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ22 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT22 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT02 DS    CL8                     OPER / NOOPER\nTSOATT12 DS    CL8                     ACCT / NOACCT\nTSOATT22 DS    CL8                     JCL / NOJCL\nTSOATT32 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR3 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST3 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM03 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ03 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT03 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM13 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ13 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT13 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM23 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ23 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT23 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT03 DS    CL8                     OPER / NOOPER\nTSOATT13 DS    CL8                     ACCT / NOACCT\nTSOATT23 DS    CL8                     JCL / NOJCL\nTSOATT33 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR4 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST4 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM04 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ04 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT04 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM14 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ14 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT14 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM24 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ24 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT24 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT04 DS    CL8                     OPER / NOOPER\nTSOATT14 DS    CL8                     ACCT / NOACCT\nTSOATT24 DS    CL8                     JCL / NOJCL\nTSOATT34 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR5 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST5 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM05 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ05 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT05 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM15 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ15 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT15 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM25 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ25 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT25 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT05 DS    CL8                     OPER / NOOPER\nTSOATT15 DS    CL8                     ACCT / NOACCT\nTSOATT25 DS    CL8                     JCL / NOJCL\nTSOATT35 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR6 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST6 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM06 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ06 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT06 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM16 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ16 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT16 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM26 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ26 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT26 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT06 DS    CL8                     OPER / NOOPER\nTSOATT16 DS    CL8                     ACCT / NOACCT\nTSOATT26 DS    CL8                     JCL / NOJCL\nTSOATT36 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR7 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST7 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM07 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ07 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT07 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM17 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ17 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT17 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM27 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ27 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT27 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT07 DS    CL8                     OPER / NOOPER\nTSOATT17 DS    CL8                     ACCT / NOACCT\nTSOATT27 DS    CL8                     JCL / NOJCL\nTSOATT37 DS    CL8                     MOUNT / NOMOUNT\nTSOMAXR8 DS    CL8                     MAXIMUM REGION SIZE\nTSODEST8 DS    CL8                     TSO DEFAULT SYSOUT DESTINATION\nTSONAM08 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ08 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT08 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM18 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ18 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT18 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSONAM28 DS    CL8                     LOGON PROCEDURE NAME\nTSOSIZ28 DS    CL8                     REGION SIZE SPECIFIED IN PROC\nTSOUNT28 DS    CL8                     ESOTERIC GROUP UNIT NAME\nTSOATT08 DS    CL8                     OPER / NOOPER\nTSOATT18 DS    CL8                     ACCT / NOACCT\nTSOATT28 DS    CL8                     JCL / NOJCL\nTSOATT38 DS    CL8                     MOUNT / NOMOUNT\nNAME     DS    CL20                    USER NAME\nRACFATT  DS    0CL72                   USER ATTRIBUTES (UP TO 6)\nRACFATT1 DS    CL12\nRACFATT2 DS    CL12\nRACFATT3 DS    CL12\nRACFATT4 DS    CL12\nRACFATT5 DS    CL12\nRACFATT6 DS    CL12\nUSERDATA DS    CL70                    INSTALLATION-DATA\nLCMD     DS    CL1                     LINE COMMAND\nNCCFUSER DS    CL1                     NCCF USER INDICATOR\nTSOUSER  DS    CL1                     TSO USER INDICATOR\nTSO$     DS    CL1                     TSO USER INDICATOR REG$\nTSO1     DS    CL1                     TSO USER INDICATOR REG1\nTSO2     DS    CL1                     TSO USER INDICATOR REG2\nTSO3     DS    CL1                     TSO USER INDICATOR REG3\nTSO4     DS    CL1                     TSO USER INDICATOR REG4\nTSO5     DS    CL1                     TSO USER INDICATOR REG5\nTSO6     DS    CL1                     TSO USER INDICATOR REG6\nTSO7     DS    CL1                     TSO USER INDICATOR REG7\nTSO8     DS    CL1                     TSO USER INDICATOR REG8\nTSONUM   DS    CL1                     REGIONAL TSO ACCOUNT SELECTION\nZTDSELS  DS    CL4                     ZTDSELS\nZTDTOP   DS    CL6                     ZTDTOP\nCGROUP1  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP2  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP3  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP4  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP5  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP6  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP7  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP8  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUP9  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUPA  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUPB  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUPC  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUPD  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUPE  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nCGROUPF  DS    CL72                    CONNECT GROUP INFO (EXPANDED)\nMESSAGE  DS    CL72                    'ADDITIONAL CONNECT GROUPS' MSG\nCNCTGRP1 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP2 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP3 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP4 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP5 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP6 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP7 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP8 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRP9 DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRPA DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRPB DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRPC DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRPD DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRPE DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nCNCTGRPF DS    CL40                    CONNECT GROUP INFO (ORIGINAL)\nZCMD     DS    CL40                    PRIMARY COMMAND\nSAVUSRID DS    CL8                     SAVE USERID BEFORE TBVCLEAR\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nISPFSERV DS    CL8                     ISPF DIALOG SERVICE NAME\nISPFRC   DS    CL2                     ISPF SERVICE RETURN CODE\nINQUIRY  DS    CL1                     INQUIRE REQUEST FLAG\nLOCATE   DS    CL1                     LOCATE REQUEST FLAG\nSAVLOC   DS    CL40                    LOCATE COMMAND DATA SAVE\nWORKLEN  EQU   *-WORKAREA\n         END   USRBROWS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRDEL1": {"ttr": 19977, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03\\xec\\x03\\xec\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1004, "newlines": 1004, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRDEL1 - DELUXE USER REGISTRATION (DELETE A USER)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRDEL1                                        *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              05/27/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRDEL1 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRDEL1 - INITIALIZATION SECTION'\nUSRDEL1  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRDEL1_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRDEL1,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING USRDEL1+4095,R11        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVI   DELFLAG,OFF             INITIALIZE DELFLAG\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,NCCFUSER,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,ZTEMPF,'CHAR',44)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,USERMSGL,'CHAR',78)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,SAVTOPB,'FIXED',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,ZTDTOP,'CHAR',6)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,ZCMD,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,ZTDSELS,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFA                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFA    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTA,ZLLGJOB1,'CHAR',80)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN 'USERTAB'\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN','USERTAB','WRITE','USRTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBCREATE                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE FILE TAILORING TABLE\n***********************************************************************\nTBCREATE EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n*                                      CREATE A TABLE\n         ISPCALL ('TBCREATE','USRDEL',' ',NAMELSTX,'WRITE','REPLACE')\n         B     TBCRE10(R15)            CHECK RETURN CODE\nTBCRE10  EQU   *\n         B     INITVAL                 RC = 00 (CONTINUE)\n         B     INITVAL                 RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - INITIALIZE TABLE VALUES\n***********************************************************************\nINITVAL  EQU   *\n         MVC   USERID,SPACES           INITIALIZATION\n         MVC   NCCFUSER,NO             INITIALIZATION\n         MVC   TSOUSER,NO              INITIALIZATION\n         MVC   NCCFPROF,NCCFINIT       INITIALIZATION\n         MVC   USRDEL_,SKELNAM$        INITIALIZATION\n         MVC   SELCT,SPACES            INITIALIZATION\n         MVC   RACF$,NO                INITIALIZATION\n         MVC   RACF1,NO                INITIALIZATION\n         MVC   RACF2,NO                INITIALIZATION\n         MVC   RACF3,NO                INITIALIZATION\n         MVC   RACF4,NO                INITIALIZATION\n         MVC   RACF5,NO                INITIALIZATION\n         MVC   RACF6,NO                INITIALIZATION\n         MVC   RACF7,NO                INITIALIZATION\n         MVC   RACF8,NO                INITIALIZATION\n         MVC   TSO$,NO                 INITIALIZATION\n         MVC   TSO1,NO                 INITIALIZATION\n         MVC   TSO2,NO                 INITIALIZATION\n         MVC   TSO3,NO                 INITIALIZATION\n         MVC   TSO4,NO                 INITIALIZATION\n         MVC   TSO5,NO                 INITIALIZATION\n         MVC   TSO6,NO                 INITIALIZATION\n         MVC   TSO7,NO                 INITIALIZATION\n         MVC   TSO8,NO                 INITIALIZATION\n         MVC   SUB,NO                  INITIALIZATION\n         MVC   SUBCMD2,SUBCMD1         MOVE STATIC INFO TO DYNAMIC\n         LA    R6,SKELNAM$             R6 - INDEX THRU SKELETON NAMES\n         TITLE 'USRDEL1 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TABLE INFORMATION\n***********************************************************************\nTBDISPL1 EQU   *\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','USERTAB','USRDEL')\n         B     TBDIS110(R15)           CHECK RETURN CODE\nTBDIS110 EQU   *\n         B     CHKZCMD                 RC = 00 (CONTINUE)\n         B     CHKZCMD                 RC = 04 (CONTINUE)\n         B     CHKSELS1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CHECK FOR 'LOCATE' PRIMARY COMMAND\n***********************************************************************\nCHKZCMD  EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         MVC   SAVLOC,SPACES           INITIALIZE SAVLOC\n         LA    R2,ZCMD                 R2 - INDEX THROUGH ZCMD\n         LA    R3,40                   R3 - MAXIMUM LENGTH OF ZCMD\n         LA    R5,SAVLOC               R5 - INDEX THROUGH SAVLOC\nCHKZCMD1 EQU   *\n         LA    R4,2                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(2,R2),LOCATE1         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,3                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(3,R2),LOCATE2         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,4                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(4,R2),LOCATE3         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,5                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(5,R2),LOCATE4         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,6                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(6,R2),LOCATE5         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,7                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(7,R2),LOCATE6         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         CLC   0(1,R2),SPACES          ANY OTHER CHARACTER ENTERED?\n         BNE   CHKLCMD                 YES, UNSUPPORTED COMMAND\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD1             CONTINUE\n         B     CHKLCMD                 CHECK FOR LINE COMMAND\nCHKZCMD2 EQU   *\n         AR    R2,R4                   POINT R2 PAST LOCATE COMMAND\nCHKZCMD3 EQU   *\n         CLC   0(1,R2),SPACES          START OF LOCATE DATA?\n         BNE   CHKZCMD4                YES, EXTRACT DATA AND SAVE\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD3             CONTINUE\n         B     CHKLCMD                 NOTHING TO LOCATE\nCHKZCMD4 EQU   *\n         CLC   0(1,R2),SPACES          END OF LOCATE DATA?\n         BE    CHKZCMD5                YES, ADD ASTERICK ON END\n         MVC   0(1,R5),0(R2)           EXTRACT LOCATE DATA\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R3,CHKZCMD4             CONTINUE\n         B     CHKLCMD                 CHECK LINE COMMANDS\nCHKZCMD5 EQU   *\n         MVC   0(1,R5),ASTERICK        ADD ASTERICK ON END\n         B     CHKLCMD                 CHECK LINE COMMANDS\n***********************************************************************\n*  PROCESSING SECTION - CHECK LINE COMMAND\n***********************************************************************\nCHKLCMD  EQU   *\n         CLC   ZTDSELS,CHAR00          NO LINES SELECTED?\n         BE    CHKLOC                  CORRECT, PROCESS 'LOCATE' CMD\n         CLC   ZTDSELS,CHAR01          ONE LINE SELECTED?\n         BNE   CHKLCMD1                MORE, PROCESS\n         MVI   DELFLAG,ON              TURN ON DELFLAG\n         BAL   R10,TBGET               RETRIEVE INFO FOR USER DELETED\n         B     CHKLOC                  PROCESS 'LOCATE' COMMAND\nCHKLCMD1 EQU   *\n         MVI   DELFLAG,ON              TURN ON DELFLAG\n         BAL   R10,TBGET               RETRIEVE INFO FOR USER DELETED\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TABLE TO PROCESS LCMD\n***********************************************************************\nTBDISPL2 EQU   *\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','USERTAB')\n         B     TBDIS210(R15)           CHECK RETURN CODE\nTBDIS210 EQU   *\n         B     CHKLCMD                 RC = 00 (CONTINUE)\n         B     CHKLCMD                 RC = 04 (CONTINUE)\n         B     CHKSELS2                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - PROCESS LOCATE DATA\n***********************************************************************\nCHKLOC   EQU   *\n         CLC   SAVLOC,SPACES           ANYTHING TO LOCATE?\n         BNE   TBTOP1                  YES, ATTEMPT TO LOCATE\n         B     TBDISPL1                RE-DISPLAY TABLE\n***********************************************************************\n*  PROCESSING SECTION - SET CRP TO TOP OF TABLE\n***********************************************************************\nTBTOP1   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP','USERTAB')\n         B     TBTOP110(R15)           CHECK RETURN CODE\nTBTOP110 EQU   *\n         B     TBVCLEAR                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLEAR 'USERTAB' VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR','USERTAB')\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBSARG                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - DEFINE SCAN ARGUMENTS FOR 'USERTAB'\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n         MVC   USERID,SAVLOC           SET USERID WITH SELECTION VALUE\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG','USERTAB')\n         B     TBARG10(R15)            CHECK RETURN CODE\nTBARG10  EQU   *\n         B     TBSCAN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SEARCH 'USERTAB' TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH A TABLE\n         ISPCALL ('TBSCAN','USERTAB')\n         B     TBSCN10(R15)            CHECK RETURN CODE\nTBSCN10  EQU   *\n         B     TBDISPL1                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     SCNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - END OR RETURN ENTERED. CHECK FOR SELECTED ROWS\n***********************************************************************\nCHKSELS1 EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         CLC   ZTDSELS,CHAR00          ANY ROWS SELECTED?\n         BE    TBCLOSE1                NO, WE'RE FINISHED\n         B     CHKLCMD                 YES, CHECK LINE COMMAND(S)\nCHKSELS2 EQU   *\n         CLC   ZTDSELS,CHAR01          SELECTED ROWS PROCESSED?\n         BE    TBCLOSE1                YES, WE'RE FINISHED\n         B     CHKLCMD                 NO, CHECK LINE COMMAND(S)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE INFO FROM TABLE FOR SELECTED USER\n***********************************************************************\nTBGET   EQU    *\n         MVC   ISPFSERV,TBGID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE ROW FROM TABLE\n         ISPCALL ('TBGET','USERTAB')\n         B     TBGET10(R15)            CHECK RETURN CODE\nTBGET10  EQU   *\n         B     TBADD                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - ADD A USER TO THE FILE TAILORING TABLE\n***********************************************************************\nTBADD    EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','USRDEL')\n         B     TBADD10(R15)            CHECK RETURN CODE\nTBADD10  EQU   *\n         B     TBDELETE                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBADD)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - DELETE USER FROM USER TABLE (USERTAB)\n***********************************************************************\nTBDELETE EQU   *\n         MVC   ISPFSERV,DELID          SET ISPF DIALOG SERVICE\n*                                      DELETE A ROW FROM A TABLE\n         ISPCALL ('TBDELETE','USERTAB')\n         B     TBDEL10(R15)            CHECK RETURN CODE\nTBDEL10  EQU   *\n         B     TBDEL20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBDELETE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDELETE)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBDEL20  EQU   *\n         BR    R10                     RETURN\n***********************************************************************\n*  PROCESSING SECTION - CLOSE USER TABLE (USERTAB)\n***********************************************************************\nTBCLOSE1 EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE TABLE\n         ISPCALL ('TBCLOSE','USERTAB','REPLCOPY',' ',' ','USRTLIB')\n         B     TBCLO110(R15)           CHECK RETURN CODE\nTBCLO110 EQU   *\n         B     TBCLOSE2                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE FILE TAILORING TABLE (USRDEL)\n***********************************************************************\nTBCLOSE2 EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE TABLE\n         ISPCALL ('TBCLOSE','USRDEL','REPLCOPY')\n         B     TBCLO210(R15)           CHECK RETURN CODE\nTBCLO210 EQU   *\n         B     VGET1                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'ZLLGJOB1' & 'ZLLGJOB2'\n***********************************************************************\nVGET1    EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTA)\n         B     VGET110(R15)            CHECK RETURN CODE\nVGET110  EQU   *\n         B     FTOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - OPEN TEMPORARY FILE TAILORING FILE\n***********************************************************************\nFTOPEN   EQU   *\n         MVC   ISPFSERV,FTOID          SET ISPF DIALOG SERVICE\n         TM    DELFLAG,ON              ANY DATA PROCESSED?\n         BNO   TBERASE                 NO, ERASE FILE TAILORING TABLE\n*                                      OPEN TEMP FILE TAILORING FILE\n         ISPCALL ('FTOPEN','TEMP')\n         B     FTOPN10(R15)            CHECK RETURN CODE\nFTOPN10  EQU   *\n         B     FTINCL                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTOPEN)\n         B     FTINCL                  RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - INCLUDE SKELETON FOR FILE TAILORING\n***********************************************************************\nFTINCL   EQU   *\n         MVC   ISPFSERV,FTIID          SET ISPF DIALOG SERVICE\n*                                      INCLUDE SKELETON FOR TAILORING\n         ISPCALL ('FTINCL',USRDEL_)\n         B     FTINC10(R15)            CHECK RETURN CODE\nFTINC10  EQU   *\n         B     FTCLOSE                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTINCL)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE TEMPORARY FILE\n***********************************************************************\nFTCLOSE  EQU   *\n         MVC   ISPFSERV,FTCID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TEMP FILE TAILORING FILE\n         ISPCALL ('FTCLOSE')\n         B     FTCLO10(R15)            CHECK RETURN CODE\nFTCLO10  EQU   *\n         B     VGET2                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTCLOSE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'ZTEMPF'\n***********************************************************************\nVGET2    EQU   *\n         CLC   SUB,NO                  REGIONAL FILE TAILORING?\n         BE    SELCT120                NO, PROCESS NEXT REGION\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELST3)\n         B     VGET210(R15)            CHECK RETURN CODE\nVGET210  EQU   *\n         B     SELECT1                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SELECT CMD ZTEMPF TO DEFINE USER(S)\n***********************************************************************\nSELECT1  EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         MVC   SUBCMD2+11(44),ZTEMPF   NO, MOVE ZTEMPF TO SUBCMD\n         ISPCALL ('SELECT',FULL56,SUBCMD2)\n         B     SELCT110(R15)           CHECK RETURN CODE\nSELCT110 EQU   *\n         B     SELCT120                RC = 00 (CONTINUE)\n         B     SELCT120                RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSELCT120 EQU   *\n         CLC   0(8,R6),SKELNAM8        ARE WE DONE?\n         BE    TBERASE                 YES, ERASE TABLE\n         LA    R6,8(R6)                POINT TO NEXT SKELETON NAME\n         MVC   USRDEL_,0(R6)           MOVE IT INTO USRDEL_\n         MVC   SUB,NO                  RE-SET SUB\n         B     FTOPEN                  CONTINUE WITH FILE TAILORING\n***********************************************************************\n*  PROCESSING SECTION - ERASE FILE TAILORING TABLE (USRDEL)\n***********************************************************************\nTBERASE  EQU   *\n         MVC   ISPFSERV,ERAID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBERASE','USRDEL')\n         B     TBERA10(R15)            CHECK RETURN CODE\nTBERA10  EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBERASE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'USRDEL1 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,USERERRL       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV    SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRDEL',USERMSG)\n         B     FINISH\n***********************************************************************\n*  ERROR PROCESSING SECTION - USER NOT FOUND ERROR ('LOCATE' COMMAND)\n***********************************************************************\nSCNERR08 EQU   *\n         MVC   USERMSGS,SPACES         INITIALIZE USERMSGS\n         MVC   USERMSGL,SPACES         INITIALIZE USERMSGL\n         MVC   USERMSGL(1),QUOTE       MOVE LEADING QUOTE TO MESSAGE\n         MVC   USERMSGL+1(40),SAVLOC   MOVE IN LOCATION DATA\n         LA    R2,USERMSGL             R2 - INDEX THROUGH SAVLOC\n         LA    R3,41                   R3 - MAXIMUM LENGTH\nSCNERR18 EQU   *\n         CLC   0(1,R2),ASTERICK        END OF LOCATION DATA\n         BE    SCNERR28                YES, ADD TRAILING QUOTE, ETC.\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,SCNERR18             CONTINUE\nSCNERR28 EQU   *\n         MVC   USERMSGS,USRERR1S       ISPF SHORT MESSAGE\n         MVC   0(21,R2),USRERR1L       ADD TRAILING QUOTE, ETC.\n         BAL   R10,TBTOP2              RE-POSITION CRP\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n         ISPCALL ('TBDISPL','USERTAB','USRDEL',USERMSG)\n         B     SCNERR38(R15)           CHECK RETURN CODE\nSCNERR38 EQU   *\n         B     SCNERR48                RC = 00 (CONTINUE)\n         B     SCNERR48                RC = 04 (CONTINUE)\n         B     CHKSELS1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSCNERR48 EQU   *\n         LA    R10,TBDISPL1            R10 - RETURN ADDRESS\n***********************************************************************\n*  ERROR PROCESSING SECTION - SET CRP TO TOP OF TABLE (AFTER 'LOCATE')\n***********************************************************************\nTBTOP2   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP','USERTAB')\n         B     TBTOP210(R15)           CHECK RETURN CODE\nTBTOP210 EQU   *\n         B     TBSKIP                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ERROR PROCESSING SECTION - RESET ROWID (AFTER 'LOCATE')\n***********************************************************************\nTBSKIP   EQU   *\n         MVC   ISPFSERV,SKPID          SET ISPF DIALOG SERVICE\n*                                      RESET ROWID\n         ISPCALL ('TBSKIP','USERTAB',SAVTOPB)\n         B     TBSKP10(R15)            CHECK RETURN CODE\nTBSKP10  EQU   *\n         B     TBSKP20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSKIP)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSKP20  EQU   *\n         BR    R10                     RC = 00 (CONTINUE)\n         TITLE 'USRDEL1 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRDEL1 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nOFF      EQU   X'00'                   NO USERS HAVE BEEN ADDED\nON       EQU   X'10'                   USER(S) HAVE BEEN ADDED\n         TITLE 'USRDEL1 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL12   DC    F'12'                   FULLWORD CONSTANT VALUE '12'\nFULL56   DC    F'56'                   FULLWORD CONSTANT VALUE '56'\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nLOCATE1  DC    CL2'L '                 LOCATE COMMAND IDENTIFIER\nLOCATE2  DC    CL3'LO '                LOCATE COMMAND IDENTIFIER\nLOCATE3  DC    CL4'LOC '               LOCATE COMMAND IDENTIFIER\nLOCATE4  DC    CL5'LOCA '              LOCATE COMMAND IDENTIFIER\nLOCATE5  DC    CL6'LOCAT '             LOCATE COMMAND IDENTIFIER\nLOCATE6  DC    CL7'LOCATE '            LOCATE COMMAND IDENTIFIER\nCHAR00   DC    CL4'0000'               CHARACTER CONSTANT VALUE '0000'\nCHAR01   DC    CL4'0001'               CHARACTER CONSTANT VALUE '0001'\nNCCFINIT DC    CL8'DPF30'              NCCF PROFILE NAME PREFIX\nNO       DC    CL1'N'                  INDICATE NOT TSO OR NCCF USER\nYES      DC    CL1'Y'                  INDICATE TSO OR NCCF USER\nASTERICK DC    CL1'*'                  ASTERICK\nQUOTE    DC    CL1''''                 QUOTE\nUSERMSG  DC    CL8'USER000'            GENERIC USER MESSAGE\nUSRDEL2  DC    C'PGM(USRDEL2)'         FUNTION CALLED FROM USRDEL1\nSUBCMD1  DC    CL56'CMD(SUBMIT                                         +\n                    )'\nSKELNAM$ DC    CL8'USRDEL$'            ADMIN SKELETON\nSKELNAM1 DC    CL8'USRDEL1'            REGION 1 SKELETON\nSKELNAM2 DC    CL8'USRDEL2'            REGION 2 SKELETON\nSKELNAM3 DC    CL8'USRDEL3'            REGION 3 SKELETON\nSKELNAM4 DC    CL8'USRDEL4'            REGION 4 SKELETON\nSKELNAM5 DC    CL8'USRDEL5'            REGION 5 SKELETON\nSKELNAM6 DC    CL8'USRDEL6'            REGION 6 SKELETON\nSKELNAM7 DC    CL8'USRDEL7'            REGION 7 SKELETON\nSKELNAM8 DC    CL8'USRDEL8'            REGION 8 SKELETON\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nERAID    DC    CL8'TBERASE'            ISPF DIALOG SERVICE (TBERASE)\nFTCID    DC    CL8'FTCLOSE'            ISPF DIALOG SERVICE (FTCLOSE)\nFTIID    DC    CL8'FTINCL'             ISPF DIALOG SERVICE (FTINCL)\nFTOID    DC    CL8'FTOPEN'             ISPF DIALOG SERVICE (FTOPEN)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nSELID    DC    CL8'SELECT'             ISPF DIALOG SERVICE (SELECT)\nTBGID    DC    CL8'TBGET'              ISPF DIALOG SERVICE (TBGET)\nDELID    DC    CL8'TBDELETE'           ISPF DIALOG SERVICE (TBDELETE)\nTDSID    DC    CL8'TBDISPL'            ISPF DIALOG SERVICE (TBDISPL)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nSKPID    DC    CL8'TBSKIP'             ISPF DIALOG SERVICE (TBSKIP)\nUSERERRS DC    CL24'USRDEL1 program error.  '\nUSERERRL DC    CL78'ISPF Dialog Service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\nUSRERR1S DC    CL24'Not found in table.'\nUSRERR1L DC    CL21''' not found in table.'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'NCCFPROF'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'21'\n         DC    F'00'\n         DC    CL8'NCCFUSER'\n         DC    CL8'TSOUSER'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'SUB'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 44)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTEMPF'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SAVTOPB'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 6)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTDTOP'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZCMD'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTDSELS'\nNAMELSTA DS    0F                      NAMES OF VARIABLES (LENGTH 80)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'ZLLGJOB1'\n         DC    CL8'ZLLGJOB2'\nNAMELSTX DS    0F                      NAMES OF VARS (FILE TAILORING)\n         DC    F'19'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         TITLE 'USRDEL1 - LITERAL POOL'\n         LTORG\n         TITLE 'USRDEL1 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nSAVTOPB  DS    F                       SAVE ZTDTOP (BINARY)\nSAVTOPD  DS    D                       SAVE ZTDTOP (FIXED DECIMAL)\nDELFLAG  DS    C                       FLAG SET WHEN USER DELETED\nSUBCMD2  DS    CL56'CMD(SUBMIT                                         +\n                    )'\nUSERID   DS    CL8                     RACF USER ID\nNCCFPROF DS    CL8                     NCCF PROFILE NAME\nUSRDEL_  DS    CL8                     GENERIC SKELETON NAME\nSELCT    DS    CL1                     DETERMINE NCCF PROFILE\nNCCFUSER DS    CL1                     INDICATES ADD NCCF USER\nTSOUSER  DS    CL1                     INDICATES ADD TSO USER\nTSO$     DS    CL1                     CREATE TSO ACCOUNT REC AT ADMIN\nTSO1     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 1\nTSO2     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 2\nTSO3     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 3\nTSO4     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 4\nTSO5     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 5\nTSO6     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 6\nTSO7     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 7\nTSO8     DS    CL1                     CREATE TSO ACCOUNT REC IN REG 8\nRACF$    DS    CL1                     CREATE RACF PROFILE IN REGION 1\nRACF1    DS    CL1                     CREATE RACF PROFILE IN REGION 1\nRACF2    DS    CL1                     CREATE RACF PROFILE IN REGION 2\nRACF3    DS    CL1                     CREATE RACF PROFILE IN REGION 3\nRACF4    DS    CL1                     CREATE RACF PROFILE IN REGION 4\nRACF5    DS    CL1                     CREATE RACF PROFILE IN REGION 5\nRACF6    DS    CL1                     CREATE RACF PROFILE IN REGION 6\nRACF7    DS    CL1                     CREATE RACF PROFILE IN REGION 7\nRACF8    DS    CL1                     CREATE RACF PROFILE IN REGION 8\nSUB      DS    CL1                     INDICATES REGIONAL JOB TO SUBMIT\nZTDSELS  DS    CL4                     ZTDSELS\nZTDTOP   DS    CL6                     ZTDTOP\nZTEMPF   DS    CL44                    FILE TAILORING TEMPORARY FILE\nZCMD     DS    CL40                    ZCMD\nSAVLOC   DS    CL40                    SAVE LOCATE COMMAND\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nZLLGJOB1 DS    CL80                    JOB CARD 1 FROM OPTION 0.2\nZLLGJOB2 DS    CL80                    JOB CARD 2 FROM OPTION 0.2\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nWORKLEN  EQU   *-WORKAREA\n         END   USRDEL1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRDEL2": {"ttr": 20486, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00|\\x00|\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 124, "newlines": 124, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRDEL2 - DELUXE USER REGISTRATION (DELETE A USER)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRDEL2                                        *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              05/27/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRDEL2 - INITIALIZATION SECTION'\nUSRDEL2  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRDEL2_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRDEL2,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         LA    R4,DATA                 SET UP\n         LA    R5,DATALEN                  REGISTERS\n         LA    R6,INITDATA                     FOR\n         LA    R7,DATALEN                          LONG MOVE\n         MVCL  R4,R6                   INITIALIZE PART GETMAINED AREA\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN '&&LISTC' & '&&DELET'; WRITE 1ST REC\n***********************************************************************\nOPEN     EQU   *\n         OPEN  (LISTCIN,INPUT),MF=(E,OPENLST_)    OPEN 'LISTC' INPUT\n         OPEN  (DELETOUT,OUTPUT),MF=(E,OPENLST_)  OPEN 'DELETE' OUTPUT\n         MVC   DELETREC,SPACES         INITIALIZE DELETREC\n         MVC   DELETREC,PROC           MOVE 'PROC 0'\n         PUT   DELETOUT,DELETREC       WRITE DELETE RECORD\n         MVC   DELETREC,CONTROL        MOVE 'CONTROL LIST'\n         PUT   DELETOUT,DELETREC       WRITE DELETE RECORD\n         MVC   DELETREC,PROFILE        MOVE 'PROFILE NOPREFIX'\n         PUT   DELETOUT,DELETREC       WRITE DELETE RECORD\n         MVC   DELETREC,SPACES         INITIALIZE DELETREC\n         MVC   DELETREC(7),DELETLIT    MOVE 'DELETE ' TO DELETREC\n         TITLE 'USRDEL2 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - CREATE 'DELETE' STMTS USING 'LISTC' INPUT\n***********************************************************************\nDELETE   EQU   *\n         GET   LISTCIN                 GET LISTC RECORD\n         CLC   LISTC#,0(R1)            ARE WE READY TO START?\n         BNE   DELETE                  NO, GET NEXT RECORD\n         GET   LISTCIN                 GET LISTC RECORD\nDELET10  EQU   *\n         CLC   INCAT#,5(R1)            VALID RECORD?\n         BE    DELET20                 NO, SKIP THIS RECORD\n         CLC   DASHES,12(R1)           VALID RECORD?\n         BNE   DELET20                 NO, SKIP THIS RECORD\n         MVC   DELETNAM,16(R1)         MOVE DSN TO DELETE RECORD\n         PUT   DELETOUT,DELETREC       WRITE DELETE RECORD\nDELET20  EQU   *\n         GET   LISTCIN                 GET LISTC RECORD\n         MVC   DELETNAM,SPACES         INITIALIZE DELETNAM\n         B     DELET10                 PROCESS IT\n         TITLE 'USRDEL2 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         CLOSE LISTCIN,MF=(E,CLOSLST_)    CLOSE INPUT\n         CLOSE DELETOUT,MF=(E,CLOSLST_)    CLOSE INPUT\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRDEL2 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'USRDEL2 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nSPACES   DC    CL80' '                 SPACES\nPROC     DC    CL80'PROC 0'            TO INITIALIZE DELETREC\nCONTROL  DC    CL80'CONTROL LIST'      TO INITIALIZE DELETREC\nPROFILE  DC    CL80'PROFILE NOPREFIX'  TO INITIALIZE DELETREC\nDELETLIT DC    CL7'DELETE '            TO INITIALIZE DELETREC\nLISTC#   DC    CL6'LISTC '             BEGINNING OF LISTC OUTPUT\nINCAT#   DC    CL7'IN-CAT '            INDICATES UNUSED INFORMATION\nDASHES   DC    CL4'--- '               INDICATES VALID INFORMATION\n         TITLE 'USRDEL2 - LITERAL POOL'\n         LTORG\n***********************************************************************\n*        INITIALIZATION DATA FOR PART OF GETMAINED AREA\n***********************************************************************\nINITDATA DS    0F\nDCBIN1   DCB   DDNAME=LISTCIN,DSORG=PS,MACRF=(GL),EODAD=FINISH\nDCBOUT   DCB   DDNAME=DELETOUT,DSORG=PS,MACRF=(PM)\nOPENLST  OPEN  (,),MF=L            STATIC LIST FORM OF OPEN MACRO\nCLOSLST  CLOSE (,),MF=L            STATIC LIST FORM OF CLOSE MACRO\nDATALEN  EQU   *-INITDATA\n         TITLE 'USRDEL2 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nDELETREC DS    0CL80\n         DS    CL07                    'DELETE '\nDELETNAM DS    CL44                    DSN TO BE DELETED\n         DS    CL29\nDATA     DS    0F\nLISTCIN  DCB   DDNAME=LISTCIN,DSORG=PS,MACRF=(GL),EODAD=FINISH\nDELETOUT DCB   DDNAME=DELETOUT,DSORG=PS,MACRF=(PM)\nOPENLST_ OPEN  (,),MF=L            DYNAMIC LIST FORM OF OPEN MACRO\nCLOSLST_ CLOSE (,),MF=L            DYNAMIC LIST FORM OF CLOSE MACRO\nWORKLEN  EQU   *-WORKAREA\n         END   USRDEL2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USRDEL3": {"ttr": 20489, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x03Q\\x03Q\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 849, "newlines": 849, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRDEL3 - DELUXE USER REGISTRATION (DELETE A USER)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRDEL3                                        *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              05/27/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRDEL3 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRDEL3 - INITIALIZATION SECTION'\nUSRDEL3  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRDEL3_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRDEL3,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           ESTABLISH ADDITIONAL BASE REG\n         USING USRDEL3+4095,R11        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         LA    R4,DATA                 SET UP\n         LA    R5,DATALEN                  REGISTERS\n         LA    R6,INITDATA                     FOR\n         LA    R7,DATALEN                          LONG MOVE\n         MVCL  R4,R6                   INITIALIZE PART GETMAINED AREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,ICHUTRB1,'FIXED',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,ICHUTCOD,'FIXED',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,ICHUTDAT,'CHAR',52)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,USERMSGL,'CHAR',78)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBCREATE                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE TEMPORARY TABLE FOR ICHUT100 PROCESS\n***********************************************************************\nTBCREATE EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n*                                      CREATE A TABLE\n         ISPCALL ('TBCREATE','USRDEL',NAMELST6,NAMELST7,'NOWRITE','REPL+\n               ACE')\n         B     TBCRE10(R15)            CHECK RETURN CODE\nTBCRE10  EQU   *\n         B     OPEN                    RC = 00 (CONTINUE)\n         B     OPEN                    RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN '&&ICHUT' & '&&RACF'\n***********************************************************************\nOPEN     EQU   *\n         OPEN  (ICHUTIN,INPUT),MF=(E,OPENLST_)    OPEN 'ICHUT100' INPUT\n         OPEN  (RACFOUT,OUTPUT),MF=(E,OPENLST_)   OPEN 'RACF' OUTPUT\n         MVC   RACFCMD,PROFILE         MOVE 'PROFILE NOPREFIX'\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n***********************************************************************\n*  INITIALIZATION SECTION - INITIALIZE TABLE VALUES\n***********************************************************************\nINITVAL  EQU   *\n         MVC   ICHUTRB1,FULL00         RELATIVE BLOCK ADDRESS FOR REC\n         MVC   ICHUTRB2,FULL00         RBA OF NEXT RECORD IN CHAIN\n         MVC   ICHUTCOD,FULL00         RECORD TYPE CODE\n         MVC   ICHUTDAT,SPACES         RACF INFORMATION DATA\n         MVC   RACFCMD,SPACES          GENERIC RACF COMMAND\n         SR    R2,R2                   R2 - USED TO SET ICHUTRB1 VALUES\n         TITLE 'USRDEL3 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - PROCESS ICHUT100 WORK DATA SET\n***********************************************************************\nICHUT    EQU   *\n         GET   ICHUTIN                 GET INPUT RECORD\n         ST    R2,ICHUTRB1             STORE CURRENT RBA\n         MVC   ICHUTRB2+1(3),0(R1)     STORE CHAINING RBA\n         MVC   ICHUTCOD,3(R1)          STORE RECORD TYPE CODE\n         MVC   ICHUTDAT,4(R1)          STORE RACF INFORMATION DATA\n         LA    R2,1(R2)                INCREMENT R2\n***********************************************************************\n*  PROCESSING SECTION - ADD A USER TO THE TEMPORARY TABLE\n***********************************************************************\nTBADD    EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n*                                      ADD A ROW TO A TABLE\n         ISPCALL ('TBADD','USRDEL')\n         B     TBADD10(R15)            CHECK RETURN CODE\nTBADD10  EQU   *\n         B     ICHUT                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBADD)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - INITIAL VALUES FOR TABLE SEARCH\n***********************************************************************\nICHUTEND EQU   *\n         MVC   ICHUTRB1,FULL00         INITIALIZE KEY TO POINT TO TOP\n         MVI   USERSCAN,ON             INDICATE INITIAL SCAN FOR USERID\n         SR    R7,R7                   R7 - KEEP TRACK PROCESSED USERS\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE INFO FROM TABLE FOR SELECTED RBA\n***********************************************************************\nTBGET    EQU   *\n         MVC   ISPFSERV,TBGID          SET ISPF DIALOG SERVICE\n*                                      EXECUTE CLIST\n         ISPCALL ('TBGET','USRDEL')\n         B     TBGET10(R15)            CHECK RETURN CODE\nTBGET10  EQU   *\n         B     BLDCMD                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - BUILD RACF COMMANDS USING INFO FROM TABLE\n***********************************************************************\nBLDCMD   EQU   *\n         SR    R3,R3                   ZERO R3\n         ICM   R3,B'0001',ICHUTCOD     EXTRACT TYPE CODE FROM TABLE\n         SLL   R3,2(0)                 MULTIPLY BY FOUR FOR BRANCHING\n         B     BLDCMD0(R3)             BRANCH ACCORDING TO TYPE CODE\nBLDCMD0  EQU   *\n         B     BLDCMD00                CODE TYPE X'00'\n         B     BLDCMD01                CODE TYPE X'01'\n         B     BLDCMD02                CODE TYPE X'02'\n         B     BLDCMD03                CODE TYPE X'03'\n         B     BLDCMD04                CODE TYPE X'04'\n         B     BLDCMD05                CODE TYPE X'05'\n         B     BLDCMD06                CODE TYPE X'06'\n         B     BLDCMD07                CODE TYPE X'07'\n         B     BLDCMD08                CODE TYPE X'08'\n         B     BLDCMD09                CODE TYPE X'09'\n         B     BLDCMD0A                CODE TYPE X'0A'\n         B     BLDCMD0B                CODE TYPE X'0B'\n         B     BLDCMD0C                CODE TYPE X'0C'\n         B     BLDCMD0D                CODE TYPE X'0D'\n         B     BLDCMD0E                CODE TYPE X'0E'\n         B     BLDCMD0F                CODE TYPE X'0F'\n         B     BLDCMD10                CODE TYPE X'10'\n         B     BLDCMD11                CODE TYPE X'11'\n         B     BLDCMD12                CODE TYPE X'12'\n         B     BLDCMD13                CODE TYPE X'13'\n         B     BLDCMD14                CODE TYPE X'14'\nBLDCMD00 EQU   *\n         B     MSGDISP2                ILLEAGAL RECORD TYPE CODE\nBLDCMD01 EQU   *\n         C     R7,ICHUTRB1             USER BEEN PROCESSED?\n         BE    BLDC011                 NO, SET USERID & ICHUTRB1\n         L     R4,ICHUTRB1             R4 - RBA OF CURRENT RECORD\n         LA    R4,1(R4)                INCREMENT R4\n         ST    R4,ICHUTRB1             R4 - RBA OF NEXT RECORD\n         B     TBGET\nBLDC011  EQU   *\n         MVI   USERSCAN,OFF            INDICATE NOT SCANNING FOR USER\n         MVC   USERID,ICHUTDAT         OBTAIN USER-ID\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD02 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD03 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD04 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD05 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,ALGCMD          SET RACF COMMAND TO 'ALTGROUP'\n         MVC   RACFCMD+10(8),ICHUTDAT  MOVE GROUP NAME TO RACF COMMAND\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD06 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,RECMD           SET RACF COMMAND TO 'REMOVE'\n         MVC   RACFCMD+8(8),USERID     MOVE USERID TO RACF COMMAND\n         MVC   RACFCMD+24(8),ICHUTDAT  MOVE GROUP NAME TO RACF COMMAND\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD07 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,DUCMD           SET RACF COMMAND TO 'DELUSER'\n         MVC   RACFCMD+9(8),USERID     USERID DELETED FROM RACF\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         MVC   RACFCMD,DELCMD1         SET RACF COMMAND TO 'DELETE'\n         MVC   RACFCMD+7(8),USERID     USERID DELETED FROM RACF\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         MVC   RACFCMD,DELCMD2         SET RACF COMMAND TO 'DELETE'\n         MVC   RACFCMD+7(8),USERID     USERID DELETED FROM RACF\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         MVC   ICHUTRB1,FULL00         INITIALIZE KEY TO POINT TO TOP\n         MVI   USERSCAN,ON             INDICATE INITIAL SCAN FOR USERID\n         LA    R7,1(R7)                R7 - KEEP TRACK PROCESSED USERS\n         B     TBGET\nBLDCMD08 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD09 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD0A EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD0B EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,DDCMD           SET RACF COMMAND TO 'DELDSD'\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         LA    R4,RACFCMD              R4 - INDEX THROUGH RACF COMMAND\n         LA    R4,8(R4)                POSITION FOR DSN ENTRY\n         LA    R5,ICHUTDAT             R5 - INDEX THROUGH RACF PROF NAM\n         LA    R6,52                   R6 - MAXIMUM LENGTH OF ICHUTDAT\nBLDC0B1  EQU   *\n         CLC   0(2,R5),SPACES          END OF PROFILE NAME?\n         BE    BLDC0B2                 YES, CONTINUE NON-GENERIC\n         CLC   0(4,R5),GENERIC#        END OF PROFILE NAME?\n         BE    BLDC0B3                 YES, CONTINUE GENERIC\n         MVC   0(1,R4),0(R5)           MOVE PROFILE NAME TO RACF CMD\n         LA    R4,1(R4)                INCREMENT R4\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R6,BLDC0B1              CONTINUE TO MOVE PROFILE\n         B     MSGDISP2                THIS SHOULD NEVER BE EXECUTED\nBLDC0B2  EQU   *\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         B     BLDC0B4                 WRITE RACF COMMAND TO DATA SET\nBLDC0B3  EQU   *\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         LA    R4,2(R4)                INCREMENT R4\n         MVC   0(7,R4),GENERIC         INDICATE GENERIC PROFILE\nBLDC0B4  EQU   *\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         B     TBGET\nBLDCMD0C EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,ALDCMD          SET RACF COMMAND TO 'ALTDSD'\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         LA    R4,RACFCMD              R4 - INDEX THROUGH RACF COMMAND\n         LA    R4,8(R4)                POSITION FOR DSN ENTRY\n         LA    R5,ICHUTDAT             R5 - INDEX THROUGH RACF PROF NAM\n         LA    R6,52                   R6 - MAXIMUM LENGTH OF ICHUTDAT\nBLDC0C1  EQU   *\n         CLC   0(2,R5),SPACES          END OF PROFILE NAME?\n         BE    BLDC0C2                 YES, CONTINUE NON-GENERIC\n         CLC   0(4,R5),GENERIC#        END OF PROFILE NAME?\n         BE    BLDC0C3                 YES, CONTINUE GENERIC\n         MVC   0(1,R4),0(R5)           MOVE PROFILE NAME TO RACF CMD\n         LA    R4,1(R4)                INCREMENT R4\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R6,BLDC0C1              CONTINUE TO MOVE PROFILE\n         B     MSGDISP2                THIS SHOULD NEVER BE EXECUTED\nBLDC0C2  EQU   *\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         B     BLDC0C4                 WRITE RACF COMMAND TO DATA SET\nBLDC0C3  EQU   *\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         LA    R4,2(R4)                INCREMENT R4\n         MVC   0(7,R4),GENERIC         INDICATE GENERIC PROFILE\nBLDC0C4  EQU   *\n         LA    R4,8(R4)                INCREMENT R4\n         MVC   0(11,R4),OWNER#         INDICATE NEW OWNER (SYS1)\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         B     TBGET\nBLDCMD0D EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,PECMD           SET RACF COMMAND TO 'PERMIT'\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         LA    R4,RACFCMD              R4 - INDEX THROUGH RACF COMMAND\n         LA    R4,7(R4)                POSITION FOR DSN ENTRY\n         LA    R5,ICHUTDAT             R5 - INDEX THROUGH RACF PROF NAM\n         LA    R6,52                   R6 - MAXIMUM LENGTH OF ICHUTDAT\nBLDC0D1  EQU   *\n         CLC   0(2,R5),SPACES          END OF PROFILE NAME?\n         BE    BLDC0D3                 YES, CONTINUE NON-GENERIC\n         CLC   0(4,R5),GENERIC#        END OF PROFILE NAME?\n         BE    BLDC0D2                 YES, CONTINUE GENERIC\n         MVC   0(1,R4),0(R5)           MOVE PROFILE NAME TO RACF CMD\n         LA    R4,1(R4)                INCREMENT R4\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R6,BLDC0D1              CONTINUE TO MOVE PROFILE\n         B     MSGDISP2                THIS SHOULD NEVER BE EXECUTED\nBLDC0D2  EQU   *\n         LA    R4,1(R4)                INCREMENT R4\n         MVC   0(7,R4),GENERIC         INDICATE GENERIC PROFILE\n         LA    R4,7(R4)                INCREMENT R4\nBLDC0D3  EQU   *\n         LA    R4,1(R4)                INCREMENT R4\n         MVC   0(3,R4),ID#             MOVE 'ID' KEYWORD\n         LA    R4,3(R4)                INCREMENT R4\n         MVC   0(8,R4),USERID          USERID DELETED FROM ACCESS LIST\n         LA    R4,8(R4)                INCREMENT R4\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         LA    R4,2(R4)                INCREMENT R4\n         MVC   0(6,R4),DELETE          INDICATE DELETE FROM ACCESS LIST\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         B     TBGET                   WRITE RACF COMMAND TO DATA SET\nBLDCMD0E EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD0F EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,RALTCMD         SET RACF COMMAND TO 'RALTER'\n         MVC   RACFCMD+7(8),ICHUTDAT   MOVE CLASS NAME TO RACF COMMAND\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         LA    R4,RACFCMD              R4 - INDEX THROUGH RACF COMMAND\n         LA    R4,17(R4)               POSITION FOR DSN ENTRY\n         LA    R5,ICHUTDAT             R5 - INDEX THROUGH RACF PROF NAM\n         LA    R5,9(R5)                POSITION FOR DSN ENTRY\n         LA    R6,43                   R6 - MAXIMUM LENGTH OF ICHUTDAT\nBLDC0F1  EQU   *\n         CLC   0(1,R5),SPACES          END OF PROFILE NAME?\n         BE    BLDC0F2                 YES, CONTINUE NON-GENERIC\n         MVC   0(1,R4),0(R5)           MOVE PROFILE NAME TO RACF CMD\n         LA    R4,1(R4)                INCREMENT R4\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R6,BLDC0F1              CONTINUE TO MOVE PROFILE\n         B     MSGDISP2                THIS SHOULD NEVER BE EXECUTED\nBLDC0F2  EQU   *\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         LA    R4,2(R4)                INCREMENT R4\n         MVC   0(11,R4),OWNER#         INDICATE NEW OWNER (SYS1)\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         B     TBGET\nBLDCMD10 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,PECMD           SET RACF COMMAND TO 'PERMIT'\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         LA    R4,RACFCMD              R4 - INDEX THROUGH RACF COMMAND\n         LA    R4,7(R4)                POSITION FOR DSN ENTRY\n         LA    R5,ICHUTDAT             R5 - INDEX THROUGH RACF PROF NAM\n         LA    R5,9(R5)                POSITION FOR DSN ENTRY\n         LA    R6,43                   R6 - MAXIMUM LENGTH OF ICHUTDAT\nBLDC101  EQU   *\n         CLC   0(3,R5),SPACES          END OF PROFILE NAME?\n         BE    BLDC102                 YES, CONTINUE NON-GENERIC\n         CLC   0(4,R5),GENERIC#        END OF PROFILE NAME?\n         BE    BLDC103                 YES, CONTINUE GENERIC\n         MVC   0(1,R4),0(R5)           MOVE PROFILE NAME TO RACF CMD\n         LA    R4,1(R4)                INCREMENT R4\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R6,BLDC101              CONTINUE TO MOVE PROFILE\n         B     MSGDISP2                THIS SHOULD NEVER BE EXECUTED\nBLDC102  EQU   *\n         LA    R4,1(R4)                INCREMENT R4\n         MVC   0(6,R4),CLASS#          INDICATE CLASS OF PROFILE\n         LA    R4,6(R4)                INCREMENT R4\n         LA    R5,ICHUTDAT             R5 - ADDRESS OF CLASS NAME\n         MVC   0(8,R4),0(R5)           MOVE CLASS NAME TO RACF COMMAND\n         LA    R4,8(R4)                INCREMENT R4\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         LA    R4,2(R4)                INCREMENT R4\n         B     BLDC104                 ADD 'ID(USERID)' & 'DELETE'\nBLDC103  EQU   *\n         MVC   0(6,R4),CLASS#          INDICATE CLASS OF PROFILE\n         LA    R4,6(R4)                INCREMENT R4\n         LA    R5,ICHUTDAT             R5 - ADDRESS OF CLASS NAME\n         MVC   0(8,R4),0(R5)           MOVE CLASS NAME TO RACF COMMAND\n         LA    R4,8(R4)                INCREMENT R4\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         LA    R4,2(R4)                INCREMENT R4\n         MVC   0(7,R4),GENERIC         INDICATE GENERIC PROFILE\n         LA    R4,8(R4)                INCREMENT R4\nBLDC104  EQU   *\n         MVC   0(3,R4),ID#             MOVE 'ID' KEYWORD\n         LA    R4,3(R4)                INCREMENT R4\n         MVC   0(8,R4),USERID          USERID DELETED FROM ACCESS LIST\n         LA    R4,8(R4)                INCREMENT R4\n         MVC   0(1,R4),CLOPAREN        MOVE CLOSING PARENTHESIS\n         LA    R4,2(R4)                INCREMENT R4\n         MVC   0(6,R4),DELETE          INDICATE DELETE FROM ACCESS LIST\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         B     TBGET\nBLDCMD11 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   RACFCMD,COCMD           SET RACF COMMAND TO 'CONNECT'\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         LA    R4,RACFCMD              R4 - INDEX THROUGH RACF COMMAND\n         LA    R4,9(R4)                POSITION FOR USERID ENTRY\n         LA    R5,ICHUTDAT             R5 - INDEX THROUGH RACF PROF NAM\n         LA    R6,20                   R6 - MORE THAN ENOUGH SPACE FOR\n*                                           USERID, GROUP NAME AND '/'\nBLDC111  EQU   *\n         CLC   0(1,R5),SLASH           END OF USERID?\n         BE    BLDC112                 YES, CONTINUE\n         MVC   0(1,R4),0(R5)           MOVE USERID TO RACF CMD\n         LA    R4,1(R4)                INCREMENT R4\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R6,BLDC111              CONTINUE TO MOVE USERID\n         B     MSGDISP2                THIS SHOULD NEVER BE EXECUTED\nBLDC112  EQU   *\n         LA    R4,RACFCMD              R4 - INDEX THROUGH RACF COMMAND\n         LA    R4,25(R4)               POSITION FOR GROUP NAME ENTRY\n         LA    R5,1(R5)                INCREMENT R5\n         BCTR  R6,0                    DECREMENT R6\nBLDC113  EQU   *\n         CLC   0(1,R5),SPACES          END OF GROUP NAME?\n         BE    BLDC114                 YES, CONTINUE\n         MVC   0(1,R4),0(R5)           MOVE GROUP NAME TO RACF CMD\n         LA    R4,1(R4)                INCREMENT R4\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R6,BLDC113              CONTINUE TO MOVE GROUP NAME\n         B     MSGDISP2                THIS SHOULD NEVER BE EXECUTED\nBLDC114  EQU   *\n         PUT   RACFOUT,RACFCMD         WRITE RACF COMMAND TO DATA SET\n         B     TBGET\nBLDCMD12 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD13 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\nBLDCMD14 EQU   *\n         CLI   USERSCAN,ON             INITIAL SCAN FOR USER?\n         BE    TBEND                   YES, NO USERS LEFT (DONE)\n         MVC   ICHUTRB1,ICHUTRB2       OBTAIN RBA OF NEXT RECORD\n         B     TBGET\n***********************************************************************\n*  PROCESSING SECTION - CLOSE TEMPORARY TABLE (USRDEL)\n***********************************************************************\nTBEND    EQU   *\n         MVC   ISPFSERV,ENDID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TEMPORARY TABLE\n         ISPCALL ('TBEND','USRDEL')\n         B     TBEND10(R15)            CHECK RETURN CODE\nTBEND10  EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'USRDEL3 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         OPEN  (ERROUT,OUTPUT),MF=(E,OPENLST_)    OPEN ERROR OUTPUT\n         MVC   USERMSG,USERERR         SET SHORT MESSAGE\n         MVC   USERMSG+22(8),ISPFSERV     SET ISPF DIALOG SERVICE\n         MVC   USERMSG+48(2),ISPFRC    SET DIALOG SERVICE RETURN CODE\n         PUT   ERROUT,USERMSG          WRITE ERROR MESSAGE\n         CLOSE ERROUT,MF=(E,CLOSLST_)  CLOSE ERROR OUTPUT\n         B     FINISH\nMSGDISP2 EQU   *\n         OPEN  (ERROUT,OUTPUT),MF=(E,OPENLST_)    OPEN ERROR OUTPUT\n         MVC   USERMSG,BLDERR          SET SHORT MESSAGE\n         PUT   ERROUT,USERMSG          WRITE ERROR MESSAGE\n         CLOSE ERROUT,MF=(E,CLOSLST_)  CLOSE ERROR OUTPUT\n         TITLE 'USRDEL3 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         CLOSE ICHUTIN,MF=(E,CLOSLST_)    CLOSE ICHUT100 INPUT\n         CLOSE RACFOUT,MF=(E,CLOSLST_)    CLOSE RACF COMMAND OUTPUT\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRDEL3 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nOFF      EQU   X'00'                   NO USERS HAVE BEEN ADDED\nON       EQU   X'10'                   USER(S) HAVE BEEN ADDED\nCODE01   EQU   X'01'                   ICHUT100 RECORD CODE\nCODE05   EQU   X'05'                   ICHUT100 RECORD CODE\nCODE06   EQU   X'06'                   ICHUT100 RECORD CODE\nCODE07   EQU   X'07'                   ICHUT100 RECORD CODE\nCODE0B   EQU   X'0B'                   ICHUT100 RECORD CODE\nCODE0C   EQU   X'0C'                   ICHUT100 RECORD CODE\nCODE0D   EQU   X'0D'                   ICHUT100 RECORD CODE\nCODE0F   EQU   X'0F'                   ICHUT100 RECORD CODE\nCODE10   EQU   X'10'                   ICHUT100 RECORD CODE\nCODE11   EQU   X'11'                   ICHUT100 RECORD CODE\n         TITLE 'USRDEL3 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   FULLWORD CONSTANT VALUE '00'\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nCLOPAREN DC    CL1')'                  CLOSING PARENTHESIS\nSLASH    DC    CL1'/'                  SLASH\nCLASS#   DC    CL6'CLASS('             CLASS OF PROFILE\nDELETE   DC    CL6'DELETE'             INDICATES DELETE FROM ACCES LIST\nGENERIC# DC    CL4' (G)'               INDICATES A GENERIC PROFILE\nGENERIC  DC    CL7'GENERIC'            INDICATES A GENERIC PROFILE\nID#      DC    CL3'ID('                ID TO BE DELETED ACCESS LIST\nOWNER#   DC    CL11'OWNER(SYS1)'       NEW OWNER OF PROFILE\nPROFILE  DC    CL80'PROFILE NOPREFIX'  INITIAL TSO STATEMENT\nALGCMD   DC    CL80'ALTGROUP (12345678) OWNER(SYS1)                    +\n                                            '\nRECMD    DC    CL80'REMOVE (12345678) GROUP(12345678) OWNER(SYS1)      +\n                                            '\nDDCMD    DC    CL80'DELDSD (                                           +\n                                            '\nALDCMD   DC    CL80'ALTDSD (                                           +\n                                            '\nPECMD    DC    CL80'PERMIT                                             +\n                                            '\nRALTCMD  DC    CL80'RALTER 12345678 (                                  +\n                                            '\nCOCMD    DC    CL80'CONNECT (        ) GROUP(        ) OWNER(SYS1)     +\n                                            '\nDUCMD    DC    CL80'DELUSER (12345678)                                 +\n                                            '\nDELCMD1  DC    CL80'DELETE 12345678 ALIAS CAT(CATALOG.MVSICFM.VMVSCAT) +\n                                            '\nDELCMD2  DC    CL80'DELETE 12345678 ALIAS CAT(CATALOG.MVSICFM.VMVSCTB) +\n                                            '\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nENDID    DC    CL8'TBEND'              ISPF DIALOG SERVICE (TBEND)\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nTBGID    DC    CL8'TBGET'              ISPF DIALOG SERVICE (TBGET)\nUSERERR  DC    CL80' ISPF DIALOG SERVICE, 12345678, ENDED WITH RC = 00.+\n                                            '    ERROR MESSAGE TEXT\nBLDERR   DC    CL80' ERROR OCCURRED BUILDING RACF COMMAND STATEMENTS.  +\n                                            '    ERROR MESSAGE TEXT\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'ICHUTRB1'\n         DC    CL8'ICHUTRB2'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ICHUTCOD'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 52)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ICHUTDAT'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELST6 DS    0F                      NAME OF KEY TABLE VARIABLES\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ICHUTRB1'\nNAMELST7 DS    0F                      NAME OF TABLE VARIABLES\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'ICHUTRB2'\n         DC    CL8'ICHUTCOD'\n         DC    CL8'ICHUTDAT'\n         TITLE 'USRDEL3 - LITERAL POOL'\n         LTORG\n***********************************************************************\n*        INITIALIZATION DATA FOR PART OF GETMAINED AREA\n***********************************************************************\nINITDATA DS    0F\nDCBIN    DCB   DDNAME=ICHUTIN,DSORG=PS,MACRF=(GL),EODAD=ICHUTEND\nDCBOUT1  DCB   DDNAME=RACFOUT,DSORG=PS,MACRF=(PM)\nDCBOUT2  DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST  OPEN  (,),MF=L            STATIC LIST FORM OF OPEN MACRO\nCLOSLST  CLOSE (,),MF=L            STATIC LIST FORM OF CLOSE MACRO\nDATALEN  EQU   *-INITDATA\n         TITLE 'USRDEL3 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nUSERSCAN DS    AL1                     INDICATES SCAN FOR NEW USER\nUSERID   DS    CL8                     ID OF USER BEING DELETED\nRACFCMD  DS    CL80                    GENERIC RACF COMMAND\nUSERMSG  DS    CL80                    ERROR MESSAGE TEXT\nICHUTRB1 DS    F                       RELATIVE BLOCK ADDRESS FOR REC\nICHUTRB2 DS    F                       RBA OF NEXT RECORD IN CHAIN\nICHUTCOD DS    AL1                     RECORD TYPE CODE\nICHUTDAT DS    CL52                    RACF INFORMATION DATA\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nDATA     DS    0F\nICHUTIN  DCB   DDNAME=ICHUTIN,DSORG=PS,MACRF=(GL),EODAD=ICHUTEND\nRACFOUT  DCB   DDNAME=RACFOUT,DSORG=PS,MACRF=(PM)\nERROUT   DCB   DDNAME=ERROUT,DSORG=PS,MACRF=(PM)\nOPENLST_ OPEN  (,),MF=L            DYNAMIC LIST FORM OF OPEN MACRO\nCLOSLST_ CLOSE (,),MF=L            DYNAMIC LIST FORM OF CLOSE MACRO\nWORKLEN  EQU   *-WORKAREA\n         END   USRDEL3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRINQ": {"ttr": 20995, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x020\\x020\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 560, "newlines": 560, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRINQ - DELUXE USER REGISTRATION (UPDATE A USER)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRINQ                                         *\n*                                                                     *\n*        CHANGE ACTIVITY:                                             *\n*              06/25/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRINQ - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRINQ - INITIALIZATION SECTION'\nUSRINQ   CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRINQ_&SYSDATE_&SYSTIME     SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRINQ,R12              ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,FNAME,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,RACFATT0,'CHAR',12)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,RACF$,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,ROOM,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,USERMSGL,'CHAR',78)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VGET                    RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  DISPLAY SECTION II - RETRIEVE VARIABLES\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      SELECT A FUNCTION\n         ISPCALL ('VGET',NAMELSTX)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     DISPLAY1                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - DISPLAY INQUIRY SELECTION PANEL\n***********************************************************************\nDISPLAY1 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRINQ1')\n         B     DISPL110(R15)           CHECK RETURN CODE\nDISPL110 EQU   *\n         B     DISPL120                RC = 00 (CONTINUE)\n         B     DISPL120                RC = 04 (CONTINUE)\n         B     VPUT                    RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL120 EQU   *\n         CLC   SELCT,RACF              RACF SELECTED?\n         BE    DISPLAY2                YES, DISPLAY RACF ENTRY PANEL\n         CLC   SELCT,TSO               TSO SELECTED?\n         BE    DISPLAY3                YES, DISPLAY TSO ENTRY PANEL\n         B     DISPLAY4                DISPLAY NCCF ENTRY PANEL\n***********************************************************************\n*  INITIALIZATION SECTION - DISPLAY RACF ENTRY PANEL\n***********************************************************************\nDISPLAY2 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRINQ2')\n         B     DISPL210(R15)           CHECK RETURN CODE\nDISPL210 EQU   *\n         B     DISPLAY2                RC = 00 (CONTINUE)\n         B     DISPLAY2                RC = 04 (CONTINUE)\n         B     DISPLAY1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - DISPLAY TSO ENTRY PANEL\n***********************************************************************\nDISPLAY3 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRINQ3')\n         B     DISPL310(R15)           CHECK RETURN CODE\nDISPL310 EQU   *\n         B     DISPLAY3                RC = 00 (CONTINUE)\n         B     DISPLAY3                RC = 04 (CONTINUE)\n         B     DISPLAY1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - DISPLAY NCCF ENTRY PANEL\n***********************************************************************\nDISPLAY4 EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRINQ4')\n         B     DISPL410(R15)           CHECK RETURN CODE\nDISPL410 EQU   *\n         B     DISPLAY4                RC = 00 (CONTINUE)\n         B     DISPLAY4                RC = 04 (CONTINUE)\n         B     DISPLAY1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE VARIABLES IN POOL\n***********************************************************************\nVPUT     EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('VPUT',NAMELSTX)\n         B     VPUT10(R15)             CHECK RETURN CODE\nVPUT10   EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'USRINQ - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,USERERRL       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV    SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRINQ1',USERMSG)\n         B     FINISH\n         TITLE 'USRINQ - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRINQ - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'USRINQ - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nRACF     DC    CL1'1'                  INDICATES RACF ENTRY PANEL\nTSO      DC    CL1'2'                  INDICATES TSO ENTRY PANEL\nNCCF     DC    CL1'3'                  INDICATES NCCF ENTRY PANEL\nUSERMSG  DC    CL8'USER000'            GENERIC USER MESSAGE\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nUSERERRS DC    CL24'USRINQ PROGRAM ERROR. '\nUSERERRL DC    CL78'ISPF Dialog Service, 12345678, Ended with RC = 00. +\n               Notify Systems Programming.'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'10'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'TSOMAXR'\n         DC    CL8'TSODEST'\n         DC    CL8'TSOATT0'\n         DC    CL8'TSOATT1'\n         DC    CL8'TSOATT2'\n         DC    CL8'TSOATT3'\n         DC    CL8'NCCFPROF'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'FNAME'\n         DC    CL8'LNAME'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 12)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'21'\n         DC    F'00'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'TSOUSER'\n         DC    CL8'NCCFUSER'\n         DC    CL8'SELCT'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'ROOM'\n         DC    CL8'EXTENS'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELSTX DS    0F                      NAMES OF VPUT VARIABLES\n         DC    F'38'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'FNAME'\n         DC    CL8'LNAME'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'ROOM'\n         DC    CL8'EXTENS'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'TSOMAXR'\n         DC    CL8'TSODEST'\n         DC    CL8'TSOATT0'\n         DC    CL8'TSOATT1'\n         DC    CL8'TSOATT2'\n         DC    CL8'TSOATT3'\n         DC    CL8'TSO$'\n         DC    CL8'TSO1'\n         DC    CL8'TSO2'\n         DC    CL8'TSO3'\n         DC    CL8'TSO4'\n         DC    CL8'TSO5'\n         DC    CL8'TSO6'\n         DC    CL8'TSO7'\n         DC    CL8'TSO8'\n         DC    CL8'TSOUSER'\n         DC    CL8'NCCFPROF'\n         DC    CL8'NCCFUSER'\n         TITLE 'USRINQ - LITERAL POOL'\n         LTORG\n         TITLE 'USRINQ - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nUSERID   DS    CL8                     RACF USER ID\nOWNER    DS    CL8                     RACF OWNER\nDFLTGRP  DS    CL8                     RACF DFLTGRP\nTSOMAXR  DS    CL8                     TSO PROC MAXIMUM REGION\nTSODEST  DS    CL8                     TSO DEFAULT DESTINATION\nTSOATT0  DS    CL8                     ACCT / NOACCT TSO ATTRIBUTE\nTSOATT1  DS    CL8                     JCL / NOJCL TSO ATTRIBUTE\nTSOATT2  DS    CL8                     MOUNT / NOMOUNT TSO ATTRIBUTE\nTSOATT3  DS    CL8                     OPER / NOOPER TSO ATTRIBUTE\nNCCFPROF DS    CL8                     NCCF PROFILE NAME\nFNAME    DS    CL20                    USER'S FIRST NAME\nLNAME    DS    CL20                    USER'S LAST NAME\nRACFATT0 DS    CL12                    SPECIAL / NOSPECIAL RACF ATTR\nRACFATT1 DS    CL12                    OPERATIONS / NOOPERATIONS RACF\nRACFATT2 DS    CL12                    AUDITOR / NOAUDITOR RACF ATTR\nRACFATT3 DS    CL12                    REVOKED INDICATION\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nRACF$    DS    CL1                     ADMIN RACF USER\nRACF1    DS    CL1                     REG 1 RACF USER\nRACF2    DS    CL1                     REG 2 RACF USER\nRACF3    DS    CL1                     REG 3 RACF USER\nRACF4    DS    CL1                     REG 4 RACF USER\nRACF5    DS    CL1                     REG 5 RACF USER\nRACF6    DS    CL1                     REG 6 RACF USER\nRACF7    DS    CL1                     REG 7 RACF USER\nRACF8    DS    CL1                     REG 8 RACF USER\nTSO$     DS    CL1                     ADMIN TSO USER\nTSO1     DS    CL1                     REG 1 TSO USER\nTSO2     DS    CL1                     REG 2 TSO USER\nTSO3     DS    CL1                     REG 3 TSO USER\nTSO4     DS    CL1                     REG 4 TSO USER\nTSO5     DS    CL1                     REG 5 TSO USER\nTSO6     DS    CL1                     REG 6 TSO USER\nTSO7     DS    CL1                     REG 7 TSO USER\nTSO8     DS    CL1                     REG 8 TSO USER\nTSOUSER  DS    CL1                     THIS IS A TSO USER\nNCCFUSER DS    CL1                     THIS IS A NCCF USER\nSELCT    DS    CL1                     SELECTION - RACF, TSO, NCCF\nROOM     DS    CL4                     ROOM NUMBER\nEXTENS   DS    CL4                     PHONE EXTENSION\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nWORKLEN  EQU   *-WORKAREA\n         END   USRINQ\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRNCCF": {"ttr": 21249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\xd3\\x02\\xd3\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 723, "newlines": 723, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRNCCF - DELUXE USER LIST INQUIRY (NCCF PROFILE)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRNCCF                                        *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              03/21/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRNCCF - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRNCCF - INITIALIZATION SECTION'\nUSRNCCF  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRNCCF_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRNCCF,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,NAME,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,MSGRECVR,'CHAR',3)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,OPCLASS,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,USERMSGL,'CHAR',78)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     INITVAL                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - INIT 'NAME', 'USERID', 'NCCFPROF',\n*                           'CTL', 'MSGRECVR', & 'OPCLASS1-6'\n***********************************************************************\nINITVAL  EQU   *\n         MVC   NAME,SPACES             INITIALIZATION\n         MVC   USERID,SPACES           INITIALIZATION\n         MVC   NCCFPROF,SPACES         INITIALIZATION\n         MVC   CTL,SPACES              INITIALIZATION\n         MVC   MSGRECVR,NO             INITIALIZATION\n         MVC   OPCLASS(6),SPACES       INITIALIZATION\n         MVC   NCCFBLK,FULL00          INITIALIZATION\n         MVC   NCCFLREC,FULL00         INITIALIZATION\n         MVC   NCCFDATA,FULL00         INITIALIZATION\n         LA    R2,DATA                 SET UP\n         LA    R3,DATALEN                  REGISTERS\n         LA    R4,INITDATA                     FOR\n         LA    R5,DATALEN                          LONG MOVE\n         MVCL  R2,R4                   INITIALIZE PART GETMAINED AREA\n         MVI   FREEFLAG,OFF            INDICATE ALLOCATION\n         BAL   R3,BLDS99RB             DYNAMICALLY ALLOCATE NCCFLIB\n         OPEN  (NCCFLIB,INPUT),MF=(E,OPENLST_)  OPEN PDS\n         MVI   FREEFLAG,ON             SET FLAG FOR DE-ALLOCATION\n***********************************************************************\n*  INITIALIZATION SECTION - RETRIEVE 'NAME', 'USERID' & 'NCCFPROF'\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE VARIABLES\n         ISPCALL ('VGET',NAMELST7,'ASIS')\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     GETBLOCK                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN 'BLKSIZE' OF STORAGE\n***********************************************************************\nGETBLOCK EQU   *\n         LA    R2,NCCFLIB              R2 - ADDRESS OF NCCFLIB DCB\n         USING IHADCB,R2               ESTABLISH ADDRESSABILITY TO DCB\n         SLR   R3,R3                   CLEAR R3\n         LH    R3,DCBLRECL             R3 - LRECL OF PDS\n         ST    R3,NCCFLREC             STORE LRECL FOR FUTURE USE\n         LH    R3,DCBBLKSI             R3 - BLOCKSIZE OF PDS\n         ST    R3,NCCFBLK              STORE BLOCKSIZE FOR FUTURE USE\n         BCTR  R3,0                    DECREMENT REG 3\n         GETMAIN R,LV=(R3)             GETMAIN DYNAMIC STORAGE\n         ST    R1,NCCFDATA             STORE ADDR OF STORAGE FOR FUTURE\n         MVI   0(R1),OFF               INITIALIZE\n         LR    R2,R1                       GETMAINED\n         LA    R2,1(R2)                        BLOCKSIZE\n         LR    R4,R1                               TO HEX\n         LR    R5,R3                                   ZEROS\n         MVCL  R2,R4                   LONG MOVE\n***********************************************************************\n*  INITIALIZATION SECTION - FIND PROFILE IN 'NCCF.V2R2M0.SPANLIB'\n***********************************************************************\nFIND     EQU   *\n         LA    R5,NCCFLIB              R5 - ADDRESS OF PDS DCB\n         LA    R6,NCCFPROF             R6 - ADDR OF PDS MEMBER\n         FIND  (R5),(R6),D             POINT TO MEMBER FOR READ\n         B     FINDCODE(R15)           BRANCH ACCORDING TO RETURN CODE\nFINDCODE B     READ                    SUCCESSFUL EXECUTION\n         B     FINDER04                MEMBER NAME NOT FOUND\n         B     FINDER08                PERM I/O ERROR\n***********************************************************************\n*  INITIALIZATION SECTION - EXTRACT DATA FROM NCCF PROFILE\n***********************************************************************\nREAD     EQU   *\n         LA    R6,PDSDECB_             R6 - ADDRESS OF DECB\n         L     R7,NCCFDATA             R7 - ADDR TO STORE MEMBER LINE\n         READ  (R6),SF,(R5),(R7),MF=E    READ A RECORD FROM MEMBER\n         CHECK (R6),DSORG=ALL            WAIT FOR COMPLETION OF READ\n         LR    R6,R7                   R6 - ADDR OF END OF DATA BLOCK\n         A     R6,NCCFBLK              POINT PAST END OF BLOCK\n         LR    R9,R7                   R9 - ADDR OF BEGINING OF LINE\nREAD10   EQU   *\n         CR    R6,R7                   END OF BLOCK?\n         BNH   READ                    YES, GET ANOTHER ONE\n         LR    R8,R7                   R8 - TEST FOR OVERFLOW\n         A     R8,NCCFLREC             ENOUGH ROOM\n         CR    R6,R8                       FOR ONE LRECL?\n         BNL   READ20                  YES, TREAT AS NORMAL\n         LR    R8,R6                   R8 - LENGTH TO END\n         SR    R8,R7                        OF DATA BLOCK\n         B     READ30                  CONTINUE\nREAD20   EQU   *\n         L     R8,NCCFLREC             R8 - LOGICAL RECORD LENGTH\nREAD30   EQU   *\n         CLC   0(1,R9),ASTERICK        COMMENT CARD?\n         BE    READ50                  YES, SKIP IT\nREAD40   EQU   *\n         CLC   0(8,R9),=CL8'MSGRECVR'  MESSAGE RECEIVER?\n         BE    READ60                  YES, PROCESS IT\n         CLC   0(3,R9),=CL3'CTL'       CONTROL?\n         BE    READ70                  YES, PROCESS IT\n         CLC   0(7,R9),=CL7'OPCLASS'   OPCLASS?\n         BE    READ80                  YES, PROCESS IT\n         LA    R9,1(R9)                INCREMENT R7\n         BCT   R8,READ40               CONTINUE\nREAD50   EQU   *\n         A     R7,NCCFLREC             POINT R7 TO NEXT LINE\n         LR    R9,R7                   POINT R9 TO NEXT LINE\n         B     READ10                  CONTINUE\nREAD60   EQU   *\n         LA    R9,9(R9)                POINT R9 TO 'MSGRECVR' VALUE\n         CLC   0(3,R9),YES             IS VALUE YES?\n         BNE   READ40                  NO, CONTINUE TO PROCESS CARD\n         MVC   MSGRECVR,YES            YES, SET 'MSGRECVR' VALUE\n         LA    R9,4(R9)                POINT R9 PAST 'MSGRECVR' VALUE\n         B     READ40                  CONTINUE TO PROCESS CARD\nREAD70   EQU   *\n         LA    R9,4(R9)                POINT R9 TO 'CTL' VALUE\n         MVC   CTL,0(R9)               SET 'CTL' VALUE\n         B     READ50                  GET NEXT CARD\nREAD80   EQU   *\n         LA    R9,8(R9)                POINT R9 TO 'OPCLASS' VALUE(S)\nREAD90   EQU   *\n         CLC   0(1,R9),SPACES          END OF 'OPCLASS' VALUES?\n         BE    DISPLAY                 YES, DONE WITH THIS PROFILE\n         CLC   0(1,R9),COMMA           BETWEEN CHARACTERS?\n         BE    READ98                  YES, INCREMENT R9\nREAD91   EQU   *\n         CLC   0(1,R9),CHAR1           OPCLASS 1 SPECIFIED?\n         BNE   READ92                  NO, CHECK OPCLASS 2\n         MVC   OPCLASS1,ASTERICK       SET 'OPCLASS1' VALUE\n         B     READ98                  INCREMENT R9\nREAD92   EQU   *\n         CLC   0(1,R9),CHAR2           OPCLASS 2 SPECIFIED?\n         BNE   READ93                  NO, CHECK OPCLASS 3\n         MVC   OPCLASS2,ASTERICK       SET 'OPCLASS2' VALUE\n         B     READ98                  INCREMENT R9\nREAD93   EQU   *\n         CLC   0(1,R9),CHAR3           OPCLASS 3 SPECIFIED?\n         BNE   READ95                  NO, CHECK OPCLASS 5\n         MVC   OPCLASS3,ASTERICK       SET 'OPCLASS3' VALUE\n         B     READ98                  INCREMENT R9\nREAD95   EQU   *\n         CLC   0(1,R9),CHAR5           OPCLASS 5 SPECIFIED?\n         BNE   READ96                  NO, CHECK OPCLASS 6\n         MVC   OPCLASS5,ASTERICK       SET 'OPCLASS5' VALUE\n         B     READ98                  INCREMENT R9\nREAD96   EQU   *\n         CLC   0(1,R9),CHAR6           OPCLASS 6 SPECIFIED?\n         BNE   READ98                  NO, INCREMENT R9\n         MVC   OPCLASS6,ASTERICK       SET 'OPCLASS6' VALUE\nREAD98   EQU   *\n         LA    R9,1(R9)                INCREMENT R9\n         B     READ90                  CONTINUE\n         TITLE 'USRNCCF - DISPLAY SECTION I - USER''S NCCF PROFILE  INF+\n               ORMATION'\n***********************************************************************\n*  DISPLAY SECTION I - DISPLAY USER'S NCCF PROFILE\n***********************************************************************\nDISPLAY  EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRNCCF')\n         B     DISPL10(R15)            CHECK RETURN CODE\nDISPL10  EQU   *\n         B     DISPLAY                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (DISPLAY PANEL / MSG)\n         B     DISPL20                 RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL20  EQU   *\n         LA    R3,FINISH               R3 - LOAD RETURN ADDRESS\n         B     BLDS99RB                DE-ALLOCATE DATA SET\n         TITLE 'USRNCCF - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nDYNERR04 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,DYNERRL        SET LONG MESSAGE\n         MVC   USERMSGL+56(2),FOUR        SET DYNALLOC RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nDYNERR08 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,DYNERRL        SET LONG MESSAGE\n         MVC   USERMSGL+56(2),EIGHT       SET DYNALLOC RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nDYNERR12 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,DYNERRL        SET LONG MESSAGE\n         MVC   USERMSGL+56(2),TWELVE      SET DYNALLOC RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP2                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP2                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP2                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP2                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP2                DISPLAY PANEL WITH MESSAGE\nFINDER04 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,PDSERR4L       SET LONG MESSAGE\n         MVC   USERMSGL+14(8),NCCFPROF    SET NCCF PROFILE NAME\n         B     MSGDISP1                DISPLAY ERROR MESSAGE\nFINDER08 EQU   *\n         C     R0,FULL00               CHECK REASON CODE\n         BNE   FINDER18                INSUFFICIENT VIRTUAL STORAGE\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,PDSER18L       SET LONG MESSAGE\n         MVC   USERMSGL+44(8),NCCFPROF    SET NCCF PROFILE NAME\n         B     MSGDISP1                DISPLAY ERROR MESSAGE\nFINDER18 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,PDSER28L       SET LONG MESSAGE\n         MVC   USERMSGL+51(8),NCCFPROF    SET NCCF PROFILE NAME\nMSGDISP1 EQU   *\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRNCCF',USERMSG)\n         CLI   FREEFLAG,ON             ERROR DURING DE-ALLOCATION?\n         BE    FINISH                  YES, FINISH\n         MVI   FREEFLAG,ON             NO, SET FLAG FOR DE-ALLOCATION\n         LA    R3,FINISH               R3 - ADDRESS FOR RETURN\n         B     BLDS99RB                DE-ALLOCATE FILE BEFORE FINISH\nMSGDISP2 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,USERERRL       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV    SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRNCCF',USERMSG)\n         TITLE 'USRNCCF - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         CLC   NCCFBLK,FULL00          WAS FILE ALLOCATED?\n         BNE   FINISH10                NO, NO NEED FOR FREEMAIN\n         L     R0,NCCFBLK              R0 - LENGTH OF WORKAREA\n         L     R1,NCCFDATA             R1 - ADDRESS OF WORKAREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\nFINISH10 EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRNCCF - DYNAMIC ALLOCATION / DE-ALLOCATION'\n***********************************************************************\n*  DYNAMIC ALLOCATION/DE-ALLOCATION - BUILD SVC 99 REQUEST BLOCK\n***********************************************************************\nBLDS99RB EQU   *\n         LA    R7,WORKAREA+NONRBLEN    POINT TO S99RBP DSECT\n         USING S99RBP,R7               ESTABLISH ADDRESSABILITY\n         LA    R8,S99RBPTR+4           POINT TO S99RB DSECT\n         ST    R8,S99RBPTR             HAVE RBPTR POINT TO S99RB\n         OI    S99RBPTR,S99RBPND       TURN ON HIGH ORDER BIT - RBPTR\n         USING S99RB,R8                ESTABLISH ADDRESSABILITY\n         XC    S99RB(RBLEN),S99RB      ZERO OUT REQUEST BLOCK\n         MVI   S99RBLN,RBLEN           LENGTH OF RB IN LENGTH FIELD\n         CLI   FREEFLAG,ON             DO WE NEED TO DEALLOCATE FILE?\n         BNE   BLDS99AL                NO, ALLOCATION VERB FUNCTION\n         MVI   S99VERB,S99VRBUN        INDICATE DEALLOCATION VERB\n         CLOSE NCCFLIB,MF=(E,CLOSLST_)   CLOSE PDS\n         B     NCCFTUP                 BUILD TEXT UNIT POINTER LIST\nBLDS99AL DS    0H\n         MVI   S99VERB,S99VRBAL        INDICATE ALLOCATION VERB FUNCTN\n***********************************************************************\n*  DYNAMIC ALLOCATION/DE-ALLOCATION - BUILD TEXT UNIT POINTER LIST\n***********************************************************************\nNCCFTUP  EQU   *\n         LA    R9,S99RB+RBLEN          START OF TEXT UNIT POINTER LIST\n         USING S99TUPL,R9              ESTABLISH ADDRESSABILITY FOR\n*                                      TEXT UNIT POINTERS\n         ST    R9,S99TXTPP             STORE ADDR OF TUP LIST IN RB\n         CLI   FREEFLAG,ON             DO WE NEED TO DEALLOCATE FILE?\n         BNE   NCCFTU10                NO, BUILD TUP FOR ALLOCATION\n         LA    R10,UNDD                GET ADDRESS OF FIRST TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,UNALLOC             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         B     DYNALLOC                DE-ALLOCATE DATA SET\nNCCFTU10 EQU   *\n         LA    R10,NCCFDD              GET ADDRESS OF FIRST TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,NCCFDSN             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,NCCFSTAT            GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n***********************************************************************\n*  DYNAMIC ALLOCATION/DE-ALLOCATION - ALLOCATE / DE-ALLOCATE (SVC 99)\n***********************************************************************\nDYNALLOC EQU   *\n         OI    S99TUPTR,S99TUPLN       TURN ON HIGH-ORDER BIT\n*                                      IN LAST TUP LIST ENTRY\n         LR    R1,R7                   R1 - ADDR OF REQUEST BLOCK PTR\n         DYNALLOC                      INVOKE SVC 99 TO PROCESS REQUEST\n         B     DYNALL10(R15)           BRANCH ACCORDING TO RETURN CODE\nDYNALL10 EQU   *\n         B     DYNALL20                RC = 00 (CONTINUE)\n         B     DYNERR04                RC = 04 (DISPLAY PANEL / MSG)\n         B     DYNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     DYNERR12                RC = 12 (DISPLAY PANEL / MSG)\nDYNALL20 EQU   *\n         BR    R3                      RC = 00 (CONTINUE)\n         TITLE 'USRNCCF - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nOFF      EQU   X'00'                   DATA SET DE-ALLOCATION FLAG OFF\nON       EQU   X'01'                   DATA SET DE-ALLOCATION FLAG ON\n         TITLE 'USRNCCF - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL00   DC    F'00'                   FULLWORD CONSTANT VALUE '00'\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nASTERICK DC    CL1'*'                  ASTERICK\nYES      DC    CL3'YES'                INDICATE MESSAGE RECEIVER\nNO       DC    CL3'NO '                INDICATE NOT MESSAGE RECEIVER\nCOMMA    DC    CL1','                  COMMA\nCHAR1    DC    CL1'1'                  CHAR CONSTANT VALUE '1'\nCHAR2    DC    CL1'2'                  CHAR CONSTANT VALUE '2'\nCHAR3    DC    CL1'3'                  CHAR CONSTANT VALUE '3'\nCHAR5    DC    CL1'5'                  CHAR CONSTANT VALUE '5'\nCHAR6    DC    CL1'6'                  CHAR CONSTANT VALUE '6'\nUSERMSG  DC    CL8'USER000'\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nUSERERRS DC    CL24'USRNCCF program error.'\nUSERERRL DC    CL78'ISPF Dialog Service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\nPDSERR4L DC    CL78'NCCF profile, 12345678 not found in system library.+\n               Notify Systems Programming.'\nPDSER18L DC    CL78'Permanent I/O error accessing NCCF profile, 1234567+\n               8. Notify Systems.         '\nPDSER28L DC    CL78'Insufficient storage error accessing NCCF profile, +\n               12345678. Notify Systems.  '\nDYNERRL  DC    CL78'Error allocating NCCF profile library. DYNALLOC has+\n                RC = 00. NOTIFY SYSTEMS.  '\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'NCCFPROF'\n         DC    CL8'CTL'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'NAME'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 3)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'MSGRECVR'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'05'\n         DC    F'00'\n         DC    CL8'OPCLASS1'\n         DC    CL8'OPCLASS2'\n         DC    CL8'OPCLASS3'\n         DC    CL8'OPCLASS5'\n         DC    CL8'OPCLASS6'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELST7 DS    0F                      NAMES OF VARIABLES\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'NAME'\n         DC    CL8'NCCFPROF'\n         TITLE 'USRNCCF - TEXT UNIT DEFINITIONS'\n***********************************************************************\n*              NCCF PROFILE DATA SET ALLOCATION TEXT UNITS\n*     NCCFLIB  DD  DSN=NCCF.V2R2M0.SPANLIB,DISP=SHR\n***********************************************************************\nNCCFDD   DC    AL2(DALDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    C'NCCFLIB '\nNCCFDSN  DC    AL2(DALDSNAM)           DSNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0013'\n         DC    C'NCCF.V2R2M0.SPANLIB'\nNCCFSTAT DC    AL2(DALSTATS)           DATA SET STATUS SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'08'\n***********************************************************************\n*              NCCF PROFILE DATA SET DE-ALLOCATION TEXT UNITS\n***********************************************************************\nUNDD     DC    AL2(DUNDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    CL8'NCCFLIB'\nUNALLOC  DC    AL2(DUNUNALC)           UNALLOC OPTION SPECIFICATION\n         DC    X'0000'\n         TITLE 'USRNCCF - INITIALIZATION DATA FOR GETMAINED AREA'\n***********************************************************************\n*        INITIALIZATION DATA FOR PART OF GETMAINED AREA\n***********************************************************************\nINITDATA DS    0F\nDCBMEM   DCB   DDNAME=NCCFLIB,DSORG=PO,MACRF=(R),EODAD=DISPLAY\nOPENLST  OPEN  (,),MF=L                STATIC LIST FORM OF OPEN MACRO\nCLOSLST  CLOSE (,),MF=L                STATIC LIST FORM OF CLOSE MACRO\nREADLST  READ  PDSDECB,SF,MF=L         STATIC LIST FORM OF READ MACRO\nDATALEN  EQU   *-INITDATA\n         TITLE 'USRNCCF - LITERAL POOL'\n         LTORG\n         TITLE 'USRNCCF - SVC99 TEXT UNIT MNEMONICS'\n***********************************************************************\n*        IEFZB4D2 - SVC99 TEXT UNIT MNEMONICS\n***********************************************************************\n         IEFZB4D2\n         TITLE 'USRNCCF - DSECT FOR DATA CONTROL BLOCK'\n***********************************************************************\n*        DSECT FOR DATA CONTROL BLOCK\n***********************************************************************\n         DCBD  DSORG=PO,DEVD=DA\nUSRNCCF  CSECT\n         TITLE 'USRNCCF - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nNCCFBLK  DS    F                       PDS BLOCK SIZE\nNCCFLREC DS    F                       PDS LOGICAL RECORD LENGTH\nNCCFDATA DS    F                       STORAGE OF ONE BLOCK OF PDS DATA\nFREEFLAG DS    C                       INDICATE DATA SET DE-ALLOCATION\nUSERID   DS    CL8                     USER ID\nNCCFPROF DS    CL8                     NCCF PROFILE NAME\nCTL      DS    CL8                     NCCF PROFILE (CONTROL)\nNAME     DS    CL20                    USER NAME\nMSGRECVR DS    CL3                     NCCF PROFILE (MESSAGE RECEIVER)\nOPCLASS  DS    0CL5                    NCCF PROFILE (COMMAND AUTHORITY)\nOPCLASS1 DS    CL1\nOPCLASS2 DS    CL1\nOPCLASS3 DS    CL1\nOPCLASS5 DS    CL1\nOPCLASS6 DS    CL1\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nDATA     DS    0F\nNCCFLIB  DCB   DDNAME=NCCFLIB,DSORG=PO,MACRF=(R),EODAD=DISPLAY\nOPENLST_ OPEN  (,),MF=L                DYNAMIC LIST FORM OF OPEN MACRO\nCLOSLST_ CLOSE (,),MF=L                DYNAMIC LIST FORM OF CLOSE MACRO\nREADLST_ READ  PDSDECB_,SF,MF=L        DYNAMIC LIST FORM OF READ MACRO\nNONRBEND EQU   *\n***********************************************************************\n*        IEFZB4D0 - SVC99 SYMBOLIC NAMES\n***********************************************************************\n         IEFZB4D0\nRBLEN    EQU   (S99RBEND-S99RB)        LENGTH OF RB\nNONRBLEN EQU   (NONRBEND-WORKAREA)     LENGTH OF NON-RB DATA\nS99RBTOT EQU   (RBLEN+25*4)            LEN OF RB + 25 TEXT UNIT ADDRS\nWORKLEN  EQU   (S99RBTOT+NONRBLEN)     LEN OF RB + 25 TEXT UNIT ADDRS\n*                                      & ALL NEEDED FOR DYNALLOC\n         END   USRNCCF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRUPD1": {"ttr": 21508, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x04\\xfa\\x04\\xfa\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1274, "newlines": 1274, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRUPD1 - DELUXE USER REGISTRATION (UPDATE A USER)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRUPD1                                        *\n*                                                                     *\n*        CHANGE ACTIVITY:                                             *\n*              06/03/86  WRITTEN.                               JWC.  *\n*                                                                     *\n*              08/05/86  TSO & NCCF SPECIFICATIONS REMOVED.     JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRUPD1 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRUPD1 - INITIALIZATION SECTION'\nUSRUPD1  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRUPD1_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRUPD1,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING USRUPD1+4095,R11        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,FNAME,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,RACFATT0,'CHAR',12)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,USERDATA,'CHAR',70)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,RACF$,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,ROOM,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,CNCTGRP1,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,USERMSGL,'CHAR',78)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFA                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFA    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTA,SAVTOPB,'FIXED',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFB                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFB    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTB,ZTDTOP,'CHAR',6)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFC                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFC    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTC,ZTEMPF,'CHAR',44)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFD                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFD    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTD,ZLLGJOB1,'CHAR',80)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN 'USERTAB'\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN','USERTAB','WRITE','USRTLIB')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     INITVAL                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - INITIALIZE DIALOG VARIABLES\n***********************************************************************\nINITVAL  EQU   *\n         MVC   SELCT,SPACES            INITIALIZATION\n         MVC   USRUPD_,SKELNAM$        INITIALIZATION\n         MVC   SUB,NO                  INITIALIZATION\n         MVI   UPDFLAG,OFF             INITIALIZATION\n         MVC   SUBCMD2,SUBCMD1         MOVE STATIC INFO TO DYNAMIC\n         MVC   UPDCMD2,UPDCMD1         MOVE STATIC INFO TO DYNAMIC\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TABLE INFORMATION\n***********************************************************************\nTBDISPL1 EQU   *\n         BAL   R8,RESTORE              RESTORE LOGICAL SCREEN\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','USERTAB','USRUPD1')\n         B     TBDIS110(R15)           CHECK RETURN CODE\nTBDIS110 EQU   *\n         B     TBDIS120                RC = 00 (CONTINUE)\n         B     TBDIS120                RC = 04 (CONTINUE)\n         B     TBDIS130                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBDIS120 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKZCMD                 CHECK PRIMARY CMD FOR 'LOCATE'\nTBDIS130 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKSELS1                CHECK FOR LINES TO PROCESS\n***********************************************************************\n*  PROCESSING SECTION - CHECK FOR 'LOCATE' PRIMARY COMMAND\n***********************************************************************\nCHKZCMD  EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         MVC   SAVLOC,SPACES           INITIALIZE SAVLOC\n         LA    R2,ZCMD                 R2 - INDEX THROUGH ZCMD\n         LA    R3,40                   R3 - MAXIMUM LENGTH OF ZCMD\n         LA    R5,SAVLOC               R5 - INDEX THROUGH SAVLOC\nCHKZCMD1 EQU   *\n         LA    R4,2                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(2,R2),LOCATE1         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,3                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(3,R2),LOCATE2         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,4                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(4,R2),LOCATE3         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,5                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(5,R2),LOCATE4         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,6                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(6,R2),LOCATE5         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         LA    R4,7                    R4 - AMOUNT TO SKIP PAST LOCATE\n         CLC   0(7,R2),LOCATE6         LOCATE COMMAND ENTERED?\n         BE    CHKZCMD2                YES, SAVE LOCATE DATA\n         CLC   0(1,R2),SPACES          ANY OTHER CHARACTER ENTERED?\n         BNE   CHKLCMD                 YES, UNSUPPORTED COMMAND\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD1             CONTINUE\n         B     CHKLCMD                 CHECK FOR LINE COMMAND\nCHKZCMD2 EQU   *\n         AR    R2,R4                   POINT R2 PAST LOCATE COMMAND\nCHKZCMD3 EQU   *\n         CLC   0(1,R2),SPACES          START OF LOCATE DATA?\n         BNE   CHKZCMD4                YES, EXTRACT DATA AND SAVE\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,CHKZCMD3             CONTINUE\n         B     CHKLCMD                 NOTHING TO LOCATE\nCHKZCMD4 EQU   *\n         CLC   0(1,R2),SPACES          END OF LOCATE DATA?\n         BE    CHKZCMD5                YES, ADD ASTERICK ON END\n         MVC   0(1,R5),0(R2)           EXTRACT LOCATE DATA\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R5,1(R5)                INCREMENT R5\n         BCT   R3,CHKZCMD4             CONTINUE\n         B     CHKLCMD                 CHECK LINE COMMANDS\nCHKZCMD5 EQU   *\n         MVC   0(1,R5),ASTERICK        ADD ASTERICK ON END\n         B     CHKLCMD                 CHECK LINE COMMANDS\n***********************************************************************\n*  PROCESSING SECTION - CHECK LINE COMMAND\n***********************************************************************\nCHKLCMD  EQU   *\n         CLC   ZTDSELS,CHAR00          NO LINES SELECTED?\n         BE    CHKLOC                  CORRECT, PROCESS 'LOCATE' CMD\n         CLC   ZTDSELS,CHAR01          ONE LINE SELECTED?\n         BNE   CHKLCMD1                MORE, PROCESS\n         CLC   LCMD,SELECT             LINE BEEN SELECTED?\n         BNE   CHKLOC                  NO, PROCESS 'LOCATE' CMD\n         MVI   UPDFLAG,ON              TURN ON UPDFLAG\n         BAL   R8,TBGET                RETRIEVE INFO FOR UPDATED USER\n         B     CHKLOC                  PROCESS 'LOCATE' COMMAND\nCHKLCMD1 EQU   *\n         CLC   LCMD,SELECT             LINE BEEN SELECTED?\n         BNE   TBDISPL2                NO, PROCESS LCMD\n         MVI   UPDFLAG,ON              TURN ON UPDFLAG\n         BAL   R8,TBGET                RETRIEVE INFO FOR UPDATED USER\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY TABLE TO PROCESS LCMD\n***********************************************************************\nTBDISPL2 EQU   *\n         BAL   R8,RESTORE              RESTORE LOGICAL SCREEN\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n*                                      DISPLAY TABLE INFORMATION\n         ISPCALL ('TBDISPL','USERTAB')\n         B     TBDIS210(R15)           CHECK RETURN CODE\nTBDIS210 EQU   *\n         B     TBDIS220                RC = 00 (CONTINUE)\n         B     TBDIS220                RC = 04 (CONTINUE)\n         B     TBDIS230                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBDIS220 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKLCMD                 CHECK FOR LINE COMMAND\nTBDIS230 EQU   *\n         BAL   R8,SAVE                 SAVE LOGICAL SCREEN\n         B     CHKSELS2                CHECK FOR LINES TO PROCESS\n***********************************************************************\n*  PROCESSING SECTION - PROCESS LOCATE DATA\n***********************************************************************\nCHKLOC   EQU   *\n         CLC   SAVLOC,SPACES           ANYTHING TO LOCATE?\n         BNE   TBTOP1                  YES, ATTEMPT TO LOCATE\n         B     TBDISPL1                RE-DISPLAY TABLE\n***********************************************************************\n*  PROCESSING SECTION - SET CRP TO TOP OF TABLE\n***********************************************************************\nTBTOP1   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP','USERTAB')\n         B     TBTOP110(R15)           CHECK RETURN CODE\nTBTOP110 EQU   *\n         B     TBVCLEAR                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLEAR 'USERTAB' VARIABLES\n***********************************************************************\nTBVCLEAR EQU   *\n         MVC   ISPFSERV,CLRID          SET ISPF DIALOG SERVICE\n*                                      CLEAR TABLE VARIABLES\n         ISPCALL ('TBVCLEAR','USERTAB')\n         B     TBCLR10(R15)            CHECK RETURN CODE\nTBCLR10  EQU   *\n         B     TBSARG                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBVCLEAR)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBVCLEAR)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBVCLEAR)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - DEFINE SCAN ARGUMENTS FOR 'USERTAB'\n***********************************************************************\nTBSARG   EQU   *\n         MVC   ISPFSERV,ARGID          SET ISPF DIALOG SERVICE\n         MVC   USERID,SAVLOC           SET USERID WITH SELECTION VALUE\n*                                      DEFINE SCAN ARGUMENTS\n         ISPCALL ('TBSARG','USERTAB')\n         B     TBARG10(R15)            CHECK RETURN CODE\nTBARG10  EQU   *\n         B     TBSCAN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSARG)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBSARG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SEARCH 'USERTAB' TABLE\n***********************************************************************\nTBSCAN   EQU   *\n         MVC   ISPFSERV,SCNID          SET ISPF DIALOG SERVICE\n*                                      SEARCH A TABLE\n         ISPCALL ('TBSCAN','USERTAB')\n         B     TBSCN10(R15)            CHECK RETURN CODE\nTBSCN10  EQU   *\n         B     TBDISPL1                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSCAN)\n         B     SCNERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - END OR RETURN ENTERED. CHECK FOR SELECTED ROWS\n***********************************************************************\nCHKSELS1 EQU   *\n         PACK  SAVTOPD,ZTDTOP          TRANSLATE ZTDTOP TO DECIMAL\n         CVB   R2,SAVTOPD              CONVERT TO BINARY\n         ST    R2,SAVTOPB              SAVE FOR FUTURE USE\n         CLC   ZTDSELS,CHAR00          ANY ROWS SELECTED?\n         BE    TBCLOSE                 NO, WE'RE FINISHED\n         B     CHKLCMD                 YES, CHECK LINE COMMAND(S)\nCHKSELS2 EQU   *\n         CLC   ZTDSELS,CHAR01          SELECTED ROWS PROCESSED?\n         BE    TBCLOSE                 YES, WE'RE FINISHED\n         B     CHKLCMD                 NO, CHECK LINE COMMAND(S)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE INFO FROM TABLE FOR SELECTED USER\n***********************************************************************\nTBGET   EQU    *\n         MVC   ISPFSERV,TBGID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE ROW FROM TABLE\n         ISPCALL ('TBGET','USERTAB')\n         B     TBGET10(R15)            CHECK RETURN CODE\nTBGET10  EQU   *\n         B     VPUT                    RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'USRUPD1 - PROCESSING SECTION'\n***********************************************************************\n*  PROCESSING SECTION - UPDATE VARIABLES IN POOL\n***********************************************************************\nVPUT     EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('VPUT',NAMELSTY)\n         B     VPUT10(R15)             CHECK RETURN CODE\nVPUT10   EQU   *\n         B     SELECT1                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SELECT PROGRAM USRUPD2\n***********************************************************************\nSELECT1  EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         ISPCALL ('SELECT',FULL12,USRUPD2)    SELECT 'USRUPD2'\n         B     SELCT110(R15)           CHECK RETURN CODE\nSELCT110 EQU   *\n         B     VGET1                   RC = 00 (CONTINUE)\n         B     VGET1                   RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE UPDATED VARIABLES FROM POOL\n***********************************************************************\nVGET1    EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTY)\n         B     VGET110(R15)            CHECK RETURN CODE\nVGET110  EQU   *\n         B     TBPUT                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - UPDATE TABLE WITH RACF INFORMATION\n***********************************************************************\nTBPUT    EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n         ISPCALL ('TBPUT','USERTAB',' ','ORDER')\n         B     TBPUT10(R15)            CHECK RETURN CODE\nTBPUT10  EQU   *\n         B     TBPUT20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBPUT)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBPUT20  EQU   *\n         BR    R8                      RETURN\n***********************************************************************\n*  PROCESSING SECTION - CLOSE USER TABLE (USERTAB)\n***********************************************************************\nTBCLOSE  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE TABLE\n         ISPCALL ('TBCLOSE','USERTAB','REPLCOPY',' ',' ','USRTLIB')\n         B     TBCLO10(R15)            CHECK RETURN CODE\nTBCLO10  EQU   *\n         B     TBCLO20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBCLO20  EQU   *\n         LA    R4,SKELNAM$             R4 - INDEX THRU SKELETON NAMES\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'ZLLGJOB1' & 'ZLLGJOB2'\n***********************************************************************\nVGET2    EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTD)\n         B     VGET210(R15)            CHECK RETURN CODE\nVGET210  EQU   *\n         B     FTOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - OPEN TEMPORARY FILE TAILORING FILE\n***********************************************************************\nFTOPEN   EQU   *\n         MVC   ISPFSERV,FTOID          SET ISPF DIALOG SERVICE\n         TM    UPDFLAG,ON              ANY DATA PROCESSED?\n         BNO   TBERASE                 NO, ERASE FILE TAILORING TABLE\n*                                      OPEN TEMP FILE TAILORING FILE\n         ISPCALL ('FTOPEN','TEMP')\n         B     FTOPN10(R15)            CHECK RETURN CODE\nFTOPN10  EQU   *\n         B     FTINCL                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTOPEN)\n         B     FTINCL                  RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - INCLUDE SKELETON FOR FILE TAILORING\n***********************************************************************\nFTINCL   EQU   *\n         MVC   ISPFSERV,FTIID          SET ISPF DIALOG SERVICE\n*                                      INCLUDE SKELETON FOR TAILORING\n         ISPCALL ('FTINCL',USRUPD_)\n         B     FTINC10(R15)            CHECK RETURN CODE\nFTINC10  EQU   *\n         B     FTCLOSE                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTINCL)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE TEMPORARY FILE\n***********************************************************************\nFTCLOSE  EQU   *\n         MVC   ISPFSERV,FTCID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TEMP FILE TAILORING FILE\n         ISPCALL ('FTCLOSE')\n         B     FTCLO10(R15)            CHECK RETURN CODE\nFTCLO10  EQU   *\n         B     VGET3                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR FTCLOSE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'ZTEMPF'\n***********************************************************************\nVGET3    EQU   *\n         CLC   SUB,NO                  REGIONAL FILE TAILORING?\n         BE    SELCT320                NO, PROCESS NEXT REGION\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTC)\n         B     VGET310(R15)            CHECK RETURN CODE\nVGET310  EQU   *\n         B     SELECT3                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SELECT CMD ZTEMPF TO DEFINE USER(S)\n***********************************************************************\nSELECT3 EQU    *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         MVC   SUBCMD2+11(44),ZTEMPF   NO, MOVE ZTEMPF TO SUBCMD\n         ISPCALL ('SELECT',FULL56,SUBCMD2)\n         B     SELCT310(R15)           CHECK RETURN CODE\nSELCT310 EQU   *\n         B     SELCT320                RC = 00 (CONTINUE)\n         B     SELCT320                RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSELCT320 EQU   *\n         CLC   0(8,R4),SKELNAM8        ARE WE DONE?\n         BE    TBERASE                 YES, ERASE TABLE\n         LA    R4,8(R4)                POINT TO NEXT SKELETON NAME\n         MVC   USRUPD_,0(R4)           MOVE IT INTO USRUPD_\n         MVC   SUB,NO                  RE-SET SUB\n         B     FTOPEN                  CONTINUE WITH FILE TAILORING\n***********************************************************************\n*  PROCESSING SECTION - ERASE FILE TAILORING TABLE (USRUPD)\n***********************************************************************\nTBERASE  EQU   *\n         MVC   ISPFSERV,ERAID          SET ISPF DIALOG SERVICE\n*                                      CLOSE TABLE WITHOUT SAVING\n         ISPCALL ('TBERASE','USRUPD')\n         B     TBERA10(R15)            CHECK RETURN CODE\nTBERA10  EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBERASE)\n         B     FINISH                  RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SAVE LOGICAL SCREEN\n***********************************************************************\nSAVE     EQU   *\n         MVC   ISPFSERV,CTLID          SET ISPF DIALOG SERVICE\n*                                      SAVE LOGICAL SCREEN\n         ISPCALL ('CONTROL','DISPLAY','SAVE')\n         B     SAVE10(R15)             CHECK RETURN CODE\nSAVE10   EQU   *\n         B     SAVE20                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR CONTROL)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR CONTROL)\n         B     USRERR16                RC = 16 (NOT VALID FOR CONTROL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSAVE20   EQU   *\n         BR    R8                      RETURN\n***********************************************************************\n*  PROCESSING SECTION - RESTORE LOGICAL SCREEN\n***********************************************************************\nRESTORE  EQU   *\n         MVC   ISPFSERV,CTLID          SET ISPF DIALOG SERVICE\n*                                      RESTORE LOGICAL SCREEN\n         ISPCALL ('CONTROL','DISPLAY','RESTORE')\n         B     REST10(R15)             CHECK RETURN CODE\nREST10   EQU   *\n         B     REST20                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR CONTROL)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR CONTROL)\n         B     USRERR16                RC = 16 (NOT VALID FOR CONTROL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nREST20   EQU   *\n         BR    R8                      RETURN\n         TITLE 'USRUPD1 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,USERERRL       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV    SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRUPD1',USERMSG)\n         B     FINISH\n***********************************************************************\n*  ERROR PROCESSING SECTION - USER NOT FOUND ERROR ('LOCATE' COMMAND)\n***********************************************************************\nSCNERR08 EQU   *\n         MVC   USERMSGS,SPACES         INITIALIZE USERMSGS\n         MVC   USERMSGL,SPACES         INITIALIZE USERMSGL\n         MVC   USERMSGL(1),QUOTE       MOVE LEADING QUOTE TO MESSAGE\n         MVC   USERMSGL+1(40),SAVLOC   MOVE IN LOCATION DATA\n         LA    R2,USERMSGL             R2 - INDEX THROUGH SAVLOC\n         LA    R3,41                   R3 - MAXIMUM LENGTH\nSCNERR18 EQU   *\n         CLC   0(1,R2),ASTERICK        END OF LOCATION DATA\n         BE    SCNERR28                YES, ADD TRAILING QUOTE, ETC.\n         LA    R2,1(R2)                INCREMENT R2\n         BCT   R3,SCNERR18             CONTINUE\nSCNERR28 EQU   *\n         MVC   USERMSGS,USRERR1S       ISPF SHORT MESSAGE\n         MVC   0(21,R2),USRERR1L       ADD TRAILING QUOTE, ETC.\n         BAL   R8,TBTOP2               RE-POSITION CRP\n         MVC   ISPFSERV,TDSID          SET ISPF DIALOG SERVICE\n         ISPCALL ('TBDISPL','USERTAB','USRUPD1',USERMSG)\n         B     SCNERR38(R15)           CHECK RETURN CODE\nSCNERR38 EQU   *\n         B     SCNERR48                RC = 00 (CONTINUE)\n         B     SCNERR48                RC = 04 (CONTINUE)\n         B     CHKSELS1                RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBDISPL)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nSCNERR48 EQU   *\n         LA    R8,TBDISPL1             R8 - RETURN ADDRESS\n***********************************************************************\n*  ERROR PROCESSING SECTION - SET CRP TO TOP OF TABLE (AFTER 'LOCATE')\n***********************************************************************\nTBTOP2   EQU   *\n         MVC   ISPFSERV,TOPID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO TOP\n         ISPCALL ('TBTOP','USERTAB')\n         B     TBTOP210(R15)           CHECK RETURN CODE\nTBTOP210 EQU   *\n         B     TBSKIP                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBTOP)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBTOP)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (NOT VALID FOR TBTOP)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  ERROR PROCESSING SECTION - RESET ROWID (AFTER 'LOCATE')\n***********************************************************************\nTBSKIP   EQU   *\n         MVC   ISPFSERV,SKPID          SET ISPF DIALOG SERVICE\n*                                      RESET ROWID\n         ISPCALL ('TBSKIP','USERTAB',SAVTOPB)\n         B     TBSKP10(R15)            CHECK RETURN CODE\nTBSKP10  EQU   *\n         B     TBSKP20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBSKIP)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBSKP20  EQU   *\n         BR    R8                      RC = 00 (CONTINUE)\n         TITLE 'USRUPD1 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRUPD1 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\nON       EQU   X'10'                   USER(S) HAVE BEEN UPDATED\nOFF      EQU   X'00'                   USER(S) HAVE NOT BEEN UPDATED\n         TITLE 'USRUPD1 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL12   DC    F'12'                   FULLWORD CONSTANT VALUE '12'\nFULL56   DC    F'56'                   FULLWORD CONSTANT VALUE '56'\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nLOCATE1  DC    CL2'L '                 LOCATE COMMAND IDENTIFIER\nLOCATE2  DC    CL3'LO '                LOCATE COMMAND IDENTIFIER\nLOCATE3  DC    CL4'LOC '               LOCATE COMMAND IDENTIFIER\nLOCATE4  DC    CL5'LOCA '              LOCATE COMMAND IDENTIFIER\nLOCATE5  DC    CL6'LOCAT '             LOCATE COMMAND IDENTIFIER\nLOCATE6  DC    CL7'LOCATE '            LOCATE COMMAND IDENTIFIER\nNO       DC    CL1'N'                  NO\nYES      DC    CL1'Y'                  YES\nASTERICK DC    CL1'*'                  ASTERICK\nQUOTE    DC    CL1''''                 QUOTE\nCHAR00   DC    CL4'0000'               CHARACTER CONSTANT VALUE '0000'\nCHAR01   DC    CL4'0001'               CHARACTER CONSTANT VALUE '0001'\nSELECT   DC    CL1'S'                  USERID HAS BEEN SELECTED\nUSERMSG  DC    CL8'USER000'            GENERIC USER MESSAGE\nUSRUPD2  DC    C'PGM(USRUPD2)'         FUNTION CALLED FROM USRUPD1\nSUBCMD1  DC    CL56'CMD(SUBMIT                                         +\n                    )'\nUPDCMD1  DC    CL56'CMD(EXEC ''                                        +\n                    )'\nSKELNAM$ DC    CL8'USRUPD$'            ADMIN SKELETON\nSKELNAM1 DC    CL8'USRUPD1'            REGION 1 SKELETON\nSKELNAM2 DC    CL8'USRUPD2'            REGION 2 SKELETON\nSKELNAM3 DC    CL8'USRUPD3'            REGION 3 SKELETON\nSKELNAM4 DC    CL8'USRUPD4'            REGION 4 SKELETON\nSKELNAM5 DC    CL8'USRUPD5'            REGION 5 SKELETON\nSKELNAM6 DC    CL8'USRUPD6'            REGION 6 SKELETON\nSKELNAM7 DC    CL8'USRUPD7'            REGION 7 SKELETON\nSKELNAM8 DC    CL8'USRUPD8'            REGION 8 SKELETON\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nERAID    DC    CL8'TBERASE'            ISPF DIALOG SERVICE (TBERASE)\nFTCID    DC    CL8'FTCLOSE'            ISPF DIALOG SERVICE (FTCLOSE)\nFTIID    DC    CL8'FTINCL'             ISPF DIALOG SERVICE (FTINCL)\nFTOID    DC    CL8'FTOPEN'             ISPF DIALOG SERVICE (FTOPEN)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nSELID    DC    CL8'SELECT'             ISPF DIALOG SERVICE (SELECT)\nTBGID    DC    CL8'TBGET'              ISPF DIALOG SERVICE (TBGET)\nTDSID    DC    CL8'TBDISPL'            ISPF DIALOG SERVICE (TBDISPL)\nTOPID    DC    CL8'TBTOP'              ISPF DIALOG SERVICE (TBTOP)\nCLRID    DC    CL8'TBVCLEAR'           ISPF DIALOG SERVICE (TBVCLEAR)\nARGID    DC    CL8'TBSARG'             ISPF DIALOG SERVICE (TBSARG)\nSCNID    DC    CL8'TBSCAN'             ISPF DIALOG SERVICE (TBSCAN)\nSKPID    DC    CL8'TBSKIP'             ISPF DIALOG SERVICE (TBSKIP)\nCTLID    DC    CL8'CONTROL'            ISPF DIALOG SERVICE (CONTROL)\nUSERERRS DC    CL24'USRUPD1 program error.  '\nUSERERRL DC    CL78'ISPF Dialog Service, 12345678, Ended with RC = 00. +\n               Notify Systems Programming.'\nUSRERR1S DC    CL24'Not found in table.     '\nUSRERR1L DC    CL21''' not found in table.'\nMSGTEXT  DC    CL72'Press ENTER key to view additional connect groups'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'80'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'REVOKE'\n         DC    CL8'RESUME'\n         DC    CL8'CGRP1'\n         DC    CL8'CAUTH1'\n         DC    CL8'CUACC1'\n         DC    CL8'CREV1'\n         DC    CL8'CRES1'\n         DC    CL8'CGRP2'\n         DC    CL8'CAUTH2'\n         DC    CL8'CUACC2'\n         DC    CL8'CREV2'\n         DC    CL8'CRES2'\n         DC    CL8'CGRP3'\n         DC    CL8'CAUTH3'\n         DC    CL8'CUACC3'\n         DC    CL8'CREV3'\n         DC    CL8'CRES3'\n         DC    CL8'CGRP4'\n         DC    CL8'CAUTH4'\n         DC    CL8'CUACC4'\n         DC    CL8'CREV4'\n         DC    CL8'CRES4'\n         DC    CL8'CGRP5'\n         DC    CL8'CAUTH5'\n         DC    CL8'CUACC5'\n         DC    CL8'CREV5'\n         DC    CL8'CRES5'\n         DC    CL8'CGRP6'\n         DC    CL8'CAUTH6'\n         DC    CL8'CUACC6'\n         DC    CL8'CREV6'\n         DC    CL8'CRES6'\n         DC    CL8'CGRP7'\n         DC    CL8'CAUTH7'\n         DC    CL8'CUACC7'\n         DC    CL8'CREV7'\n         DC    CL8'CRES7'\n         DC    CL8'CGRP8'\n         DC    CL8'CAUTH8'\n         DC    CL8'CUACC8'\n         DC    CL8'CREV8'\n         DC    CL8'CRES8'\n         DC    CL8'CGRP9'\n         DC    CL8'CAUTH9'\n         DC    CL8'CUACC9'\n         DC    CL8'CREV9'\n         DC    CL8'CRES9'\n         DC    CL8'CGRPA'\n         DC    CL8'CAUTHA'\n         DC    CL8'CUACCA'\n         DC    CL8'CREVA'\n         DC    CL8'CRESA'\n         DC    CL8'CGRPB'\n         DC    CL8'CAUTHB'\n         DC    CL8'CUACCB'\n         DC    CL8'CREVB'\n         DC    CL8'CRESB'\n         DC    CL8'CGRPC'\n         DC    CL8'CAUTHC'\n         DC    CL8'CUACCC'\n         DC    CL8'CREVC'\n         DC    CL8'CRESC'\n         DC    CL8'CGRPD'\n         DC    CL8'CAUTHD'\n         DC    CL8'CUACCD'\n         DC    CL8'CREVD'\n         DC    CL8'CRESD'\n         DC    CL8'CGRPE'\n         DC    CL8'CAUTHE'\n         DC    CL8'CUACCE'\n         DC    CL8'CREVE'\n         DC    CL8'CRESE'\n         DC    CL8'CGRPF'\n         DC    CL8'CAUTHF'\n         DC    CL8'CUACCF'\n         DC    CL8'CREVF'\n         DC    CL8'CRESF'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'FNAME'\n         DC    CL8'LNAME'\n         DC    CL8'NAME'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 12)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 70)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERDATA'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'12'\n         DC    F'00'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'SELCT'\n         DC    CL8'LCMD'\n         DC    CL8'SUB'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'03'\n         DC    F'00'\n         DC    CL8'ROOM'\n         DC    CL8'EXTENS'\n         DC    CL8'ZTDSELS'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'16'\n         DC    F'00'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'ZCMD'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELSTA DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'SAVTOPB'\nNAMELSTB DS    0F                      NAMES OF VARIABLES (LENGTH 6)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTDTOP'\nNAMELSTC DS    0F                      NAMES OF VARIABLES (LENGTH 44)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'ZTEMPF'\nNAMELSTD DS    0F                      NAMES OF VARIABLES (LENGTH 80)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'ZLLGJOB1'\n         DC    CL8'ZLLGJOB2'\nNAMELSTY DS    0F                      NAMES OF VPUT VARIABLES\n         DC    F'39'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'FNAME'\n         DC    CL8'LNAME'\n         DC    CL8'NAME'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'REVOKE'\n         DC    CL8'RESUME'\n         DC    CL8'USERDATA'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'EXTENS'\n         DC    CL8'ROOM'\n         TITLE 'USRUPD1 - LITERAL POOL'\n         LTORG\n         TITLE 'USRUPD1 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nSAVTOPB  DS    F                       SAVE ZTDTOP (BINARY)\nSAVTOPD  DS    D                       SAVE ZTDTOP (FIXED DECIMAL)\nUPDFLAG  DS    C                       FLAG SET WHEN USER DELETED\nSUBCMD2  DS    CL56'CMD(SUBMIT                                         +\n                    )'\nUPDCMD2  DS    CL56'CMD(EXEC ''                                        +\n                    )'\nUSERID   DS    CL8                     RACF USER ID\nOWNER    DS    CL8                     RACF OWNER\nDFLTGRP  DS    CL8                     RACF DFLTGRP\nREVOKE   DS    CL8                     RACF REVOKE DATE\nRESUME   DS    CL8                     RACF RESUME DATE\nCNCTGRP1 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP1    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH1   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC1   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV1    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES1    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP2 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP2    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH2   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC2   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV2    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES2    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP3 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP3    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH3   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC3   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV3    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES3    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP4 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP4    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH4   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC4   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV4    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES4    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP5 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP5    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH5   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC5   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV5    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES5    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP6 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP6    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH6   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC6   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV6    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES6    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP7 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP7    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH7   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC7   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV7    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES7    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP8 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP8    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH8   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC8   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV8    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES8    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP9 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP9    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH9   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC9   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV9    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES9    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPA DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPA    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHA   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCA   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVA    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESA    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPB DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPB    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHB   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCB   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVB    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESB    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPC DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPC    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHC   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCC   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVC    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESC    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPD DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPD    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHD   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCD   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVD    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESD    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPE DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPE    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHE   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCE   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVE    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESE    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPF DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPF    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHF   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCF   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVF    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESF    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nZCMD     DS    CL40                    ZCMD\nFNAME    DS    CL20                    USER'S FIRST NAME\nLNAME    DS    CL20                    USER'S LAST NAME\nNAME     DS    CL20                    USER'S NAME\nRACFATT0 DS    CL12                    SPECIAL / NOSPECIAL RACF ATTR\nRACFATT1 DS    CL12                    OPERATIONS / NOOPERATIONS RACF\nRACFATT2 DS    CL12                    AUDITOR / NOAUDITOR RACF ATTR\nRACFATT3 DS    CL12                    INDICATES REVOKED USER\nUSERDATA DS    CL70                    RACF USER DEFINED DATA\nRACF$    DS    CL1                     ADMIN SYSTEM USER\nRACF1    DS    CL1                     REG 1 SYSTEM USER\nRACF2    DS    CL1                     REG 2 SYSTEM USER\nRACF3    DS    CL1                     REG 3 SYSTEM USER\nRACF4    DS    CL1                     REG 4 SYSTEM USER\nRACF5    DS    CL1                     REG 5 SYSTEM USER\nRACF6    DS    CL1                     REG 6 SYSTEM USER\nRACF7    DS    CL1                     REG 7 SYSTEM USER\nRACF8    DS    CL1                     REG 8 SYSTEM USER\nSELCT    DS    CL1                     SELCTION FROM 'USRUPD1' PANEL\nLCMD     DS    CL1                     LINE COMMAND\nSUB      DS    CL1                     INDICATES REGIONAL JOB TO SUBMIT\nROOM     DS    CL4                     USER'S ROOM NUMBER\nEXTENS   DS    CL4                     USER'S PHONE EXTENSION\nZTDSELS  DS    CL4                     ZTDSELS\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nZLLGJOB1 DS    CL80                    JOB CARD 1 FROM OPTION 0.2\nZLLGJOB2 DS    CL80                    JOB CARD 2 FROM OPTION 0.2\nUSRUPD_  DS    CL8                     GENERIC SKELETON NAME\nZTDTOP   DS    CL6                     ZTDTOP\nSAVLOC   DS    CL40                    SAVE LOCATE COMMAND\nZTEMPF   DS    CL44                    FILE TAILORING TEMPORARY FILE\nMESSAGE  DS    CL72                    'ADDITIONAL CONNECT GROUPS' MSG\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nWORKLEN  EQU   *-WORKAREA\n         END   USRUPD1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRUPD2": {"ttr": 22021, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x05m\\x05m\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1389, "newlines": 1389, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRUPD2 - DELUXE USER REGISTRATION (UPDATE RACF INFO)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRUPD2                                        *\n*                                                                     *\n*        CHANGE ACTIVITY:                                             *\n*              07/16/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRUPD2 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRUPD2 - INITIALIZATION SECTION'\nUSRUPD2  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRUPD2_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRUPD2,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING USRUPD2+4095,R11        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         MVC   VERCMD2,VERCMD1         MOVE STATIC INFO TO DYNAMIC\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,FNAME,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,RACFATT0,'CHAR',12)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,USERDATA,'CHAR',70)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,RACF$,'CHAR',1)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,ROOM,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,UPDCGRP1,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,USERMSGL,'CHAR',78)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     VGET1                   RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE UPDATED VARIABLES FROM POOL\n***********************************************************************\nVGET1    EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTY)\n         B     VGET110(R15)            CHECK RETURN CODE\nVGET110  EQU   *\n         B     DISPLAY                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - DISPLAY CURRENT RACF PROFILE INFO\n***********************************************************************\nDISPLAY  EQU   *\n         MVC   ISPFSERV,DISID          SET ISPF DIALOG SERVICE\n         MVC   UPDOWNR,OWNER           INITIALIZATION\n         MVC   UPDDFLT,DFLTGRP         INITIALIZATION\n         MVC   UPDREV,REVOKE           INITIALIZATION\n         MVC   UPDRES,RESUME           INITIALIZATION\n         MVC   UPDLNAM,LNAME           INITIALIZATION\n         MVC   UPDFNAM,FNAME           INITIALIZATION\n         MVC   UPDRAT0,RACFATT0        INITIALIZATION\n         MVC   UPDRAT1,RACFATT1        INITIALIZATION\n         MVC   UPDRAT2,RACFATT2        INITIALIZATION\n         MVC   UPDRACF$,RACF$          INITIALIZATION\n         MVC   UPDRACF1,RACF1          INITIALIZATION\n         MVC   UPDRACF2,RACF2          INITIALIZATION\n         MVC   UPDRACF3,RACF3          INITIALIZATION\n         MVC   UPDRACF4,RACF4          INITIALIZATION\n         MVC   UPDRACF5,RACF5          INITIALIZATION\n         MVC   UPDRACF6,RACF6          INITIALIZATION\n         MVC   UPDRACF7,RACF7          INITIALIZATION\n         MVC   UPDRACF8,RACF8          INITIALIZATION\n         MVC   UPDDATA,USERDATA        INITIALIZATION\n         MVC   UPDEXT,EXTENS           INITIALIZATION\n         MVC   UPDCGRP1,CNCTGRP1       INITIALIZATION\n         MVC   UPDCGRP2,CNCTGRP2       INITIALIZATION\n         MVC   UPDCGRP3,CNCTGRP3       INITIALIZATION\n         MVC   UPDCGRP4,CNCTGRP4       INITIALIZATION\n         MVC   UPDCGRP5,CNCTGRP5       INITIALIZATION\n         MVC   UPDCGRP6,CNCTGRP6       INITIALIZATION\n         MVC   UPDCGRP7,CNCTGRP7       INITIALIZATION\n         MVC   UPDCGRP8,CNCTGRP8       INITIALIZATION\n         MVC   UPDCGRP9,CNCTGRP9       INITIALIZATION\n         MVC   UPDCGRPA,CNCTGRPA       INITIALIZATION\n         MVC   UPDCGRPB,CNCTGRPB       INITIALIZATION\n         MVC   UPDCGRPC,CNCTGRPC       INITIALIZATION\n         MVC   UPDCGRPD,CNCTGRPD       INITIALIZATION\n         MVC   UPDCGRPE,CNCTGRPE       INITIALIZATION\n         MVC   UPDCGRPF,CNCTGRPF       INITIALIZATION\n         MVC   FIELD,=CL8'ZCMD'        INITIALIZE FIELD\n         MVC   MESSAGE,SPACES          INITIALIZE MESSAGE\n         CLC   UPDGRPA,SPACES          MORE THAN TEN CONNECT GROUPS?\n         BE    DISPL10                 NO, CONTINUE\n         MVC   MESSAGE,MSGTEXT         'ADDITIONAL CONNECT GROUP' MSG\nDISPL10  EQU   *\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRUPD3A',' ',FIELD)\n         B     DISPL20(R15)            CHECK RETURN CODE\nDISPL20  EQU   *\n         B     DISPL30                 RC = 00 (CONTINUE)\n         B     DISPL30                 RC = 04 (CONTINUE)\n         B     VERIFY                  RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nDISPL30  EQU   *\n         MVC   FIELD,=CL8'ZCMD'        INITIALIZE FIELD\n         CLC   UPDGRPA,SPACES          MORE THAN TEN CONNECT GROUPS?\n         BE    DISPL10                 NO, RE-DISPLAY RACF INFO\n*                                      DISPLAY PANEL\n         ISPCALL ('DISPLAY','USRUPD3B',' ',FIELD)\n         B     DISPL40(R15)            CHECK RETURN CODE\nDISPL40  EQU   *\n         B     DISPL30                 RC = 00 (CONTINUE)\n         B     DISPL30                 RC = 04 (CONTINUE)\n         B     DISPL10                 RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - VERIFY DIALOG VARIABLES\n***********************************************************************\nVERIFY   EQU   *\n         CLC   UPDOWNR,OWNER           OWNER UPDATED?\n         BE    VEFY005                 NO, CHECK REVOKE DATE\n         MVC   VERCMD2+13(8),UPDOWNR   MOVE UPDOWNR TO VERUSGRP COMMAND\n         BAL   R9,SELECT1              VERIFY OWNER NAME\n         CLC   OWNVER,VALID            OWNER VALID?\n         BE    VEFY005                 YES, CHECK REVOKE DATE\n         MVC   USERMSGS,USRM00S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM00L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDOWNR'     SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY005  EQU   *\n         MVC   REVFLAG,UNCHNG          INITIALIZE REVFLAG\n         CLC   UPDREV,REVOKE           REVOKE DATE UPDATED?\n         BE    VEFY030                 NO CHECK RESUME DATE\n         MVC   REVFLAG,REVOKED         SET REVFLAG\n         CLC   UPDREV,UPDRES           REVOKE DATE VALID?\n         BNE   VEFY010                 YES, CONTINUE CHECKING\n         MVC   USERMSGS,USRM01S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM01L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDREV'      SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY010  EQU   *\n         CLC   UPDREV,SPACES           REVOKE DATE ERASED?\n         BE    VEFY020                 YES, CONTINUE CHECKING\n         CLC   UPDREV,TODAY            TODAY'S DATE ENTERED?\n         BH    VEFY020                 NO, CONTINUE CHECKING\n         MVC   USERMSGS,USRM02S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM02L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDREV'      SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY020  EQU   *\n         CLC   RACFATT3(8),REVOKED     USER ALREADY REVOKED?\n         BNE   VEFY030                 NO, CHECK RESUME DATE\n         MVC   USERMSGS,USRM03S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM03L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDREV'      SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY030  EQU   *\n         MVC   RESFLAG,UNCHNG          INITIALIZE RESFLAG\n         CLC   UPDRES,RESUME           RESUME DATE UPDATED?\n         BE    VEFY060                 NO CHECK DEFAULT GROUP\n         MVC   RESFLAG,RESUMED         SET RESFLAG\n         CLC   UPDRES,SPACES           RESUME DATE ERASED?\n         BE    VEFY050                 YES, CONTINUE CHECKING\n         CLC   UPDRES,TODAY            TODAY'S DATE ENTERED?\n         BH    VEFY040                 NO, CONTINUE CHECKING\n         MVC   USERMSGS,USRM04S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM04L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDRES'      SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY040  EQU   *\n         CLC   UPDREV,SPACES           REVOKE DATE ERASED?\n         BE    VEFY060                 YES, CHECK DEFAULT GROUP\n         CLC   REVFLAG,REVOKED         REVOKE DATE ENTERED?\n         BNE   VEFY050                 YES, CONTINUE CHECKING\n         MVC   USERMSGS,USRM05S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM05L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDRES'      SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY050  EQU   *\n         CLC   RACFATT3(8),REVOKED     USER ALREADY REVOKED?\n         BE    VEFY060                 YES, CHECK DEFAULT GROUP\n         MVC   USERMSGS,USRM06S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM06L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDRES'      SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY060  EQU   *\n         CLC   UPDDFLT,DFLTGRP         DEFAULT GROUP UPDATED?\n         BE    VEFY090                 NO, CHECK CONNECT GROUPS\n         CLC   UPDDFLT,SPACES          REMOVAL ATTEMPTED?\n         BNE   VEFY070                 NO, CONTINUE CHECKING\n         MVC   USERMSGS,USRM07S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM07L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDDFLT'     SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY070  EQU   *\n         CLC   UPDDFLT,UPDGRP1         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP2         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP3         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP4         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP5         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP6         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP7         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP8         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRP9         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRPA         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRPB         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRPC         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRPD         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRPE         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         CLC   UPDDFLT,UPDGRPF         VALID CONNECT GROUP?\n         BE    VEFY080                 YES, VERIFY DEFAULT GROUP\n         MVC   USERMSGS,USRM08S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM08L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDDFLT'     SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY080  EQU   *\n         MVC   VERCMD2+22(8),UPDDFLT   MOVE UPDDFLT TO VERUSGRP COMMAND\n         BAL   R9,SELECT1              VERIFY OWNER NAME\n         CLC   GRPVER,VALID            GROUP VALID?\n         BE    VEFY090                 CHECK CONNECT GROUPS\n         MVC   USERMSGS,USRM10S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM10L        SET LONG MESSAGE\n         MVC   FIELD,=CL8'UPDDFLT'     SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY090  EQU   *\n         LA    R2,UPDCGRP1             R2 - INDEX THRU UPDCGRP'S\n         LA    R3,CNCTGRP1             R3 - INDEX THRU CNCTGRP'S\n         LA    R4,UPDNAMES             R4 - INDEX THRU UPDNAMES\n         LA    R5,15                   R5 - MAX NUMBER OF CNCTGRP'S\nVEFY100  EQU   *\n         CLC   0(40,R2),0(R3)          CONNECT GROUP UPDATED?\n         BE    VEFY180                 NO, CHECK NEXT CONNECT GROUP\n         CLC   0(8,R2),SPACES          REMOVAL ATTEMPTED?\n         BNE   VEFY110                 NO, CONTINUE CHECKING\n         CLC   0(8,R3),UPDDFLT         CONNECT GROUP DEFAULT GROUP?\n         BNE   VEFY180                 NO, CHECK NEXT CONNECT GROUP\n         MVC   USERMSGS,USRM07S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM07L        SET LONG MESSAGE\n         MVC   FIELD,0(R4)             SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY110  EQU   *\n         CLC   0(8,R2),0(R3)           CONNECT GROUP UPDATED?\n         BE    VEFY120                 NO, CHECK REVOKE DATE\n         MVC   VERCMD2+22(8),0(R2)     MOVE UPDCGRP TO VERUSGRP COMMAND\n         BAL   R9,SELECT1              VERIFY GROUP NAME\n         CLC   GRPVER,VALID            CONNECT GROUP VALID?\n         BE    VEFY120                 YES, CHECK REVOKE DATE\n         MVC   USERMSGS,USRM09S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM09L        SET LONG MESSAGE\n         MVC   FIELD,0(R4)             SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY120  EQU   *\n         MVC   REVFLAG,UNCHNG          INITIALIZE REVFLAG\n         CLC   24(8,R2),24(R3)         REVOKE DATE UPDATED?\n         BE    VEFY150                 NO CHECK RESUME DATE\n         MVC   REVFLAG,REVOKED         SET REVFLAG\n         CLC   24(8,R2),32(R2)         REVOKE DATE VALID?\n         BNE   VEFY130                 YES, CONTINUE CHECKING\n         MVC   USERMSGS,USRM01S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM01L        SET LONG MESSAGE\n         MVC   FIELD,24(R4)            SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY130  EQU   *\n         CLC   24(8,R2),SPACES         REVOKE DATE ERASED?\n         BE    VEFY140                 YES, CONTINUE CHECKING\n         CLC   24(8,R2),TODAY          TODAY'S DATE ENTERED?\n         BH    VEFY140                 NO, CONTINUE CHECKING\n         MVC   USERMSGS,USRM02S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM02L        SET LONG MESSAGE\n         MVC   FIELD,24(R4)            SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY140  EQU   *\n         CLC   RACFATT3(8),REVOKED     USER ALREADY REVOKED?\n         BNE   VEFY150                 NO, CHECK RESUME DATE\n         MVC   USERMSGS,USRM03S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM03L        SET LONG MESSAGE\n         MVC   FIELD,24(R4)            SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY150  EQU   *\n         MVC   RESFLAG,UNCHNG          INITIALIZE RESFLAG\n         CLC   32(8,R2),32(R3)         RESUME DATE UPDATED?\n         BE    VEFY180                 NO, CHECK NEXT CONNECT GROUP\n         MVC   RESFLAG,RESUMED         SET RESFLAG\n         CLC   32(8,R2),SPACES         RESUME DATE ERASED?\n         BE    VEFY160                 YES, CONTINUE CHECKING\n         CLC   32(8,R2),TODAY          TODAY'S DATE ENTERED?\n         BH    VEFY160                 NO, CONTINUE CHECKING\n         MVC   USERMSGS,USRM04S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM04L        SET LONG MESSAGE\n         MVC   FIELD,32(R4)            SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY160  EQU   *\n         CLC   24(8,R2),SPACES         REVOKE DATE ERASED?\n         BE    VEFY180                 YES, CHECK NEXT CONNECT GROUP\n         CLC   REVFLAG,REVOKED         REVOKE DATE ENTERED?\n         BNE   VEFY170                 NO, CONTINUE CHECKING\n         MVC   USERMSGS,USRM05S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM05L        SET LONG MESSAGE\n         MVC   FIELD,32(R4)            SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY170  EQU   *\n         CLC   RACFATT3(8),REVOKED     USER ALREADY REVOKED?\n         BE    VEFY180                 YES, CHECK NEXT CONNECT GROUP\n         MVC   USERMSGS,USRM06S        SET SHORT MESSAGE\n         MVC   USERMSGL,USRM06L        SET LONG MESSAGE\n         MVC   FIELD,32(R4)            SET FIELD POSITION\n         B     VEFY200                 ISSUE MESSAGE\nVEFY180  EQU   *\n         LA    R2,40(R2)               R2 - INDEX THRU UPDCGRP'S\n         LA    R3,40(R3)               R3 - INDEX THRU CNCTGRP'S\n         LA    R4,40(R4)               R4 - INDEX THRU UPDNAMES\n         BCT   R5,VEFY100              VERIFY NEXT CONNECT GROUP\n         B     VPUT                    UPDATE VARIABLES IN POOL\nVEFY200  EQU   *\n*                                      DISPLAY PANEL / MSG\n         ISPCALL ('DISPLAY','USRUPD3A',USERMSG,FIELD)\n         B     VEFY210(R15)            CHECK RETURN CODE\nVEFY210  EQU   *\n         B     DISPL30                 RC = 00 (CONTINUE)\n         B     DISPL30                 RC = 04 (CONTINUE)\n         B     VEFY220                 RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nVEFY220  EQU   *\n         MVC   UPDOWNR,OWNER           RESET UPDATED VARIABLES\n         MVC   UPDDFLT,DFLTGRP\n         MVC   UPDREV,REVOKE\n         MVC   UPDRES,RESUME\n         MVC   UPDLNAM,LNAME\n         MVC   UPDFNAM,FNAME\n         MVC   UPDRAT0,RACFATT0\n         MVC   UPDRAT1,RACFATT1\n         MVC   UPDRAT2,RACFATT2\n         MVC   UPDRACF$,RACF$\n         MVC   UPDRACF1,RACF1\n         MVC   UPDRACF2,RACF2\n         MVC   UPDRACF3,RACF3\n         MVC   UPDRACF4,RACF4\n         MVC   UPDRACF5,RACF5\n         MVC   UPDRACF6,RACF6\n         MVC   UPDRACF7,RACF7\n         MVC   UPDRACF8,RACF8\n         MVC   UPDDATA,USERDATA\n         MVC   UPDEXT,EXTENS\n         MVC   UPDCGRP1,CNCTGRP1\n         MVC   UPDCGRP2,CNCTGRP2\n         MVC   UPDCGRP3,CNCTGRP3\n         MVC   UPDCGRP4,CNCTGRP4\n         MVC   UPDCGRP5,CNCTGRP5\n         MVC   UPDCGRP6,CNCTGRP6\n         MVC   UPDCGRP7,CNCTGRP7\n         MVC   UPDCGRP8,CNCTGRP8\n         MVC   UPDCGRP9,CNCTGRP9\n         MVC   UPDCGRPA,CNCTGRPA\n         MVC   UPDCGRPB,CNCTGRPB\n         MVC   UPDCGRPC,CNCTGRPC\n         MVC   UPDCGRPD,CNCTGRPD\n         MVC   UPDCGRPE,CNCTGRPE\n         MVC   UPDCGRPF,CNCTGRPF\n         B     FINISH\n***********************************************************************\n*  PROCESSING SECTION - SELECT CMD VERUSGRP TO VERIFY OWNER & DFLTGRP\n***********************************************************************\nSELECT1  EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n*                                      EXECUTE CLIST\n         ISPCALL ('SELECT',FULL31,VERCMD2)\n         B     SELCT110(R15)           CHECK RETURN CODE\nSELCT110 EQU   *\n         B     VGET2                   RC = 00 (CONTINUE)\n         B     VGET2                   RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE 'OWNVER' & 'GRPVER'\n***********************************************************************\nVGET2    EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE DIALOG VARIABLE\n         ISPCALL ('VGET',NAMELSTA)\n         B     VGET210(R15)            CHECK RETURN CODE\nVGET210  EQU   *\n         B     VGET220                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nVGET220  EQU   *\n         MVC   VERCMD2,VERCMD1         MOVE STATIC INFO TO DYNAMIC\n         BR    R9                      RETURN\n***********************************************************************\n*  PROCESSING SECTION - UPDATE VARIABLES IN POOL\n***********************************************************************\nVPUT     EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('VPUT',NAMELSTX)\n         B     VPUT10(R15)             CHECK RETURN CODE\nVPUT10   EQU   *\n         B     SELECT2                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - SELECT PROGRAM USRUPD3\n***********************************************************************\nSELECT2  EQU   *\n         MVC   ISPFSERV,SELID          SET ISPF DIALOG SERVICE\n         ISPCALL ('SELECT',FULL12,USRUPD3)    SELECT 'USRUPD3'\n         B     SELCT210(R15)           CHECK RETURN CODE\nSELCT210 EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     FINISH                  RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (NOT VALID FOR SELECT)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n         TITLE 'USRUPD2 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,USERERRL       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV    SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRUPD3A',USERMSG)\n         TITLE 'USRUPD2 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRUPD2 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'USRUPD2 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nFULL12   DC    F'12'                   FULLWORD CONSTANT VALUE '12'\nFULL31   DC    F'31'                   FULLWORD CONSTANT VALUE '31'\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nVALID    DC    CL8'VALID'              INDICATE OWNER/GROUP VALID\nINVALID  DC    CL8'INVALID'            INDICATE OWNER/GROUP INVALID\nUNCHNG   DC    CL8'UNCHANGD'           REVFLAG AND/OR RESFLAG UNCHANGED\nREVOKED  DC    CL8'REVOKED'            REVFLAG UPDATED\nRESUMED  DC    CL8'RESUMED'            RESFLAG UPDATED\nUSERMSG  DC    CL8'USER000'            GENERIC USER MESSAGE\nUSRUPD3  DC    C'PGM(USRUPD3)'         FUNTION CALLED FROM USRUPD2\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nDISID    DC    CL8'DISPLAY'            ISPF DIALOG SERVICE (DISPLAY)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nSELID    DC    CL8'SELECT'             ISPF DIALOG SERVICE (SELECT)\nVERCMD1  DC    CL31'CMD(VERUSGRP 12345678 12345678)'\nUSERERRS DC    CL24'USRUPD2 program error.  '\nUSERERRL DC    CL78'ISPF Dialog Service, 12345678, ended with RC = 00. +\n               Notify Systems Programming.'\nUSRM00S  DC    CL24'OWNER not defined       '\nUSRM00L  DC    CL78'OWNER is not a RACF defined user or group.         +\n                                          '\nUSRM01S  DC    CL24'Invalid REVOKE date     '\nUSRM01L  DC    CL78'REVOKE date must not be the same as RESUME date.   +\n                                          '\nUSRM02S  DC    CL24'Invalid REVOKE date     '\nUSRM02L  DC    CL78'REVOKE date must be in the future.                 +\n                                          '\nUSRM03S  DC    CL24'Invalid REVOKE date     '\nUSRM03L  DC    CL78'User already revoked.                              +\n                                          '\nUSRM04S  DC    CL24'Invalid RESUME date     '\nUSRM04L  DC    CL78'RESUME date must be in the future.                 +\n                                          '\nUSRM05S  DC    CL24'Invalid RESUME date     '\nUSRM05L  DC    CL78'RESUME date and REVOKE date must not be entered at +\n               the same time.             '\nUSRM06S  DC    CL24'Invalid RESUME date     '\nUSRM06L  DC    CL78'User not revoked.                                  +\n                                          '\nUSRM07S  DC    CL24'Removal not allowed     '\nUSRM07L  DC    CL78'User may not be removed from Default Group.        +\n                                          '\nUSRM08S  DC    CL24'Invalid Default Group   '\nUSRM08L  DC    CL78'User is not connected to this group.               +\n                                          '\nUSRM09S  DC    CL24'Invalid Connect Group   '\nUSRM09L  DC    CL78'Connect Group is not defined to RACF.              +\n                                          '\nUSRM10S  DC    CL24'Invalid Default Group   '\nUSRM10L  DC    CL78'Default Group is not defined to RACF.              +\n                                          '\nMSGTEXT  DC    CL72'Press ENTER key to view additional connect groups'\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'162'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'OWNER'\n         DC    CL8'UPDOWNR'\n         DC    CL8'DFLTGRP'\n         DC    CL8'UPDDFLT'\n         DC    CL8'REVOKE'\n         DC    CL8'UPDREV'\n         DC    CL8'RESUME'\n         DC    CL8'UPDRES'\nUPDNAMES DC    CL8'UPDGRP1'\n         DC    CL8'UPDAUTH1'\n         DC    CL8'UPDUACC1'\n         DC    CL8'UPDREV1'\n         DC    CL8'UPDRES1'\n         DC    CL8'UPDGRP2'\n         DC    CL8'UPDAUTH2'\n         DC    CL8'UPDUACC2'\n         DC    CL8'UPDREV2'\n         DC    CL8'UPDRES2'\n         DC    CL8'UPDGRP3'\n         DC    CL8'UPDAUTH3'\n         DC    CL8'UPDUACC3'\n         DC    CL8'UPDREV3'\n         DC    CL8'UPDRES3'\n         DC    CL8'UPDGRP4'\n         DC    CL8'UPDAUTH4'\n         DC    CL8'UPDUACC4'\n         DC    CL8'UPDREV4'\n         DC    CL8'UPDRES4'\n         DC    CL8'UPDGRP5'\n         DC    CL8'UPDAUTH5'\n         DC    CL8'UPDUACC5'\n         DC    CL8'UPDREV5'\n         DC    CL8'UPDRES5'\n         DC    CL8'UPDGRP6'\n         DC    CL8'UPDAUTH6'\n         DC    CL8'UPDUACC6'\n         DC    CL8'UPDREV6'\n         DC    CL8'UPDRES6'\n         DC    CL8'UPDGRP7'\n         DC    CL8'UPDAUTH7'\n         DC    CL8'UPDUACC7'\n         DC    CL8'UPDREV7'\n         DC    CL8'UPDRES7'\n         DC    CL8'UPDGRP8'\n         DC    CL8'UPDAUTH8'\n         DC    CL8'UPDUACC8'\n         DC    CL8'UPDREV8'\n         DC    CL8'UPDRES8'\n         DC    CL8'UPDGRP9'\n         DC    CL8'UPDAUTH9'\n         DC    CL8'UPDUACC9'\n         DC    CL8'UPDREV9'\n         DC    CL8'UPDRES9'\n         DC    CL8'UPDGRPA'\n         DC    CL8'UPDAUTHA'\n         DC    CL8'UPDUACCA'\n         DC    CL8'UPDREVA'\n         DC    CL8'UPDRESA'\n         DC    CL8'UPDGRPB'\n         DC    CL8'UPDAUTHB'\n         DC    CL8'UPDUACCB'\n         DC    CL8'UPDREVB'\n         DC    CL8'UPDRESB'\n         DC    CL8'UPDGRPC'\n         DC    CL8'UPDAUTHC'\n         DC    CL8'UPDUACCC'\n         DC    CL8'UPDREVC'\n         DC    CL8'UPDRESC'\n         DC    CL8'UPDGRPD'\n         DC    CL8'UPDAUTHD'\n         DC    CL8'UPDUACCD'\n         DC    CL8'UPDREVD'\n         DC    CL8'UPDRESD'\n         DC    CL8'UPDGRPE'\n         DC    CL8'UPDAUTHE'\n         DC    CL8'UPDUACCE'\n         DC    CL8'UPDREVE'\n         DC    CL8'UPDRESE'\n         DC    CL8'UPDGRPF'\n         DC    CL8'UPDAUTHF'\n         DC    CL8'UPDUACCF'\n         DC    CL8'UPDREVF'\n         DC    CL8'UPDRESF'\n         DC    CL8'CGRP1'\n         DC    CL8'CAUTH1'\n         DC    CL8'CUACC1'\n         DC    CL8'CREV1'\n         DC    CL8'CRES1'\n         DC    CL8'CGRP2'\n         DC    CL8'CAUTH2'\n         DC    CL8'CUACC2'\n         DC    CL8'CREV2'\n         DC    CL8'CRES2'\n         DC    CL8'CGRP3'\n         DC    CL8'CAUTH3'\n         DC    CL8'CUACC3'\n         DC    CL8'CREV3'\n         DC    CL8'CRES3'\n         DC    CL8'CGRP4'\n         DC    CL8'CAUTH4'\n         DC    CL8'CUACC4'\n         DC    CL8'CREV4'\n         DC    CL8'CRES4'\n         DC    CL8'CGRP5'\n         DC    CL8'CAUTH5'\n         DC    CL8'CUACC5'\n         DC    CL8'CREV5'\n         DC    CL8'CRES5'\n         DC    CL8'CGRP6'\n         DC    CL8'CAUTH6'\n         DC    CL8'CUACC6'\n         DC    CL8'CREV6'\n         DC    CL8'CRES6'\n         DC    CL8'CGRP7'\n         DC    CL8'CAUTH7'\n         DC    CL8'CUACC7'\n         DC    CL8'CREV7'\n         DC    CL8'CRES7'\n         DC    CL8'CGRP8'\n         DC    CL8'CAUTH8'\n         DC    CL8'CUACC8'\n         DC    CL8'CREV8'\n         DC    CL8'CRES8'\n         DC    CL8'CGRP9'\n         DC    CL8'CAUTH9'\n         DC    CL8'CUACC9'\n         DC    CL8'CREV9'\n         DC    CL8'CRES9'\n         DC    CL8'CGRPA'\n         DC    CL8'CAUTHA'\n         DC    CL8'CUACCA'\n         DC    CL8'CREVA'\n         DC    CL8'CRESA'\n         DC    CL8'CGRPB'\n         DC    CL8'CAUTHB'\n         DC    CL8'CUACCB'\n         DC    CL8'CREVB'\n         DC    CL8'CRESB'\n         DC    CL8'CGRPC'\n         DC    CL8'CAUTHC'\n         DC    CL8'CUACCC'\n         DC    CL8'CREVC'\n         DC    CL8'CRESC'\n         DC    CL8'CGRPD'\n         DC    CL8'CAUTHD'\n         DC    CL8'CUACCD'\n         DC    CL8'CREVD'\n         DC    CL8'CRESD'\n         DC    CL8'CGRPE'\n         DC    CL8'CAUTHE'\n         DC    CL8'CUACCE'\n         DC    CL8'CREVE'\n         DC    CL8'CRESE'\n         DC    CL8'CGRPF'\n         DC    CL8'CAUTHF'\n         DC    CL8'CUACCF'\n         DC    CL8'CREVF'\n         DC    CL8'CRESF'\n         DC    CL8'TODAY'\n         DC    CL8'OWNVER'\n         DC    CL8'GRPVER'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'05'\n         DC    F'00'\n         DC    CL8'FNAME'\n         DC    CL8'UPDFNAM'\n         DC    CL8'LNAME'\n         DC    CL8'UPDLNAM'\n         DC    CL8'NAME'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 12)\n         DC    F'07'\n         DC    F'00'\n         DC    CL8'RACFATT0'\n         DC    CL8'UPDRAT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'UPDRAT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'UPDRAT2'\n         DC    CL8'RACFATT3'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 70)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'USERDATA'\n         DC    CL8'UPDDATA'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'18'\n         DC    F'00'\n         DC    CL8'RACF$'\n         DC    CL8'UPDRACF$'\n         DC    CL8'RACF1'\n         DC    CL8'UPDRACF1'\n         DC    CL8'RACF2'\n         DC    CL8'UPDRACF2'\n         DC    CL8'RACF3'\n         DC    CL8'UPDRACF3'\n         DC    CL8'RACF4'\n         DC    CL8'UPDRACF4'\n         DC    CL8'RACF5'\n         DC    CL8'UPDRACF5'\n         DC    CL8'RACF6'\n         DC    CL8'UPDRACF6'\n         DC    CL8'RACF7'\n         DC    CL8'UPDRACF7'\n         DC    CL8'RACF8'\n         DC    CL8'UPDRACF8'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'ROOM'\n         DC    CL8'UPDROOM'\n         DC    CL8'EXTENS'\n         DC    CL8'UPDEXT'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'30'\n         DC    F'00'\n         DC    CL8'UPDCGRP1'\n         DC    CL8'UPDCGRP2'\n         DC    CL8'UPDCGRP3'\n         DC    CL8'UPDCGRP4'\n         DC    CL8'UPDCGRP5'\n         DC    CL8'UPDCGRP6'\n         DC    CL8'UPDCGRP7'\n         DC    CL8'UPDCGRP8'\n         DC    CL8'UPDCGRP9'\n         DC    CL8'UPDCGRPA'\n         DC    CL8'UPDCGRPB'\n         DC    CL8'UPDCGRPC'\n         DC    CL8'UPDCGRPD'\n         DC    CL8'UPDCGRPE'\n         DC    CL8'UPDCGRPF'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'CNCTGRPF'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELSTA DS    0F                      NAMES OF VERUSGRP CLIST VARS\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'OWNVER'\n         DC    CL8'GRPVER'\nNAMELSTX DS    0F                      NAMES OF VPUT VARIABLES\n         DC    F'66'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'FNAME'\n         DC    CL8'UPDFNAM'\n         DC    CL8'LNAME'\n         DC    CL8'UPDLNAM'\n         DC    CL8'NAME'\n         DC    CL8'OWNER'\n         DC    CL8'UPDOWNR'\n         DC    CL8'DFLTGRP'\n         DC    CL8'UPDDFLT'\n         DC    CL8'RACFATT0'\n         DC    CL8'UPDRAT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'UPDRAT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'UPDRAT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'REVOKE'\n         DC    CL8'UPDREV'\n         DC    CL8'RESUME'\n         DC    CL8'UPDRES'\n         DC    CL8'USERDATA'\n         DC    CL8'UPDDATA'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'UPDCGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'UPDCGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'UPDCGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'UPDCGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'UPDCGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'UPDCGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'UPDCGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'UPDCGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'UPDCGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'UPDCGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'UPDCGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'UPDCGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'UPDCGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'UPDCGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'UPDCGRPF'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'EXTENS'\n         DC    CL8'UPDEXT'\n         DC    CL8'ROOM'\n         DC    CL8'UPDROOM'\nNAMELSTY DS    0F                      NAMES OF VGET VARIABLES\n         DC    F'39'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'FNAME'\n         DC    CL8'LNAME'\n         DC    CL8'NAME'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'REVOKE'\n         DC    CL8'RESUME'\n         DC    CL8'USERDATA'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'EXTENS'\n         DC    CL8'ROOM'\n         TITLE 'USRUPD2 - LITERAL POOL'\n         LTORG\n         TITLE 'USRUPD2 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nVERCMD2  DS    CL31'CMD(VERUSGRP 12345678 12345678)'\nUSERID   DS    CL8                     RACF USER ID\nOWNER    DS    CL8                     RACF OWNER\nUPDOWNR  DS    CL8                     RACF OWNER\nDFLTGRP  DS    CL8                     RACF DFLTGRP\nUPDDFLT  DS    CL8                     RACF DFLTGRP\nREVOKE   DS    CL8                     RACF REVOKE DATE\nUPDREV   DS    CL8                     RACF REVOKE DATE\nRESUME   DS    CL8                     RACF RESUME DATE\nUPDRES   DS    CL8                     RACF RESUME DATE\nUPDCGRP1 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP1  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH1 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC1 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV1  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES1  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP2 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP2  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH2 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC2 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV2  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES2  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP3 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP3  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH3 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC3 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV3  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES3  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP4 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP4  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH4 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC4 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV4  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES4  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP5 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP5  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH5 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC5 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV5  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES5  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP6 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP6  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH6 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC6 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV6  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES6  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP7 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP7  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH7 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC7 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV7  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES7  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP8 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP8  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH8 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC8 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV8  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES8  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP9 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP9  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH9 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC9 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV9  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES9  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPA DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPA  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHA DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCA DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVA  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESA  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPB DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPB  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHB DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCB DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVB  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESB  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPC DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPC  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHC DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCC DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVC  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESC  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPD DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPD  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHD DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCD DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVD  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESD  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPE DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPE  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHE DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCE DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVE  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESE  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPF DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPF  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHF DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCF DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVF  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESF  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP1 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP1    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH1   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC1   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV1    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES1    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP2 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP2    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH2   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC2   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV2    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES2    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP3 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP3    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH3   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC3   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV3    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES3    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP4 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP4    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH4   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC4   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV4    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES4    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP5 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP5    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH5   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC5   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV5    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES5    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP6 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP6    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH6   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC6   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV6    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES6    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP7 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP7    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH7   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC7   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV7    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES7    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP8 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP8    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH8   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC8   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV8    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES8    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP9 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP9    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH9   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC9   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV9    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES9    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPA DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPA    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHA   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCA   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVA    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESA    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPB DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPB    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHB   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCB   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVB    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESB    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPC DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPC    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHC   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCC   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVC    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESC    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPD DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPD    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHD   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCD   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVD    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESD    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPE DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPE    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHE   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCE   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVE    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESE    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPF DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPF    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHF   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCF   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVF    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESF    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nTODAY    DS    CL8                     TODAY'S DATE (FROM USRUPD3A PNL)\nOWNVER   DS    CL8                     VERIFY OWNER AS RACF USER/GROUP\nGRPVER   DS    CL8                     VERIFY GROUP AS RACF GROUP\nFNAME    DS    CL20                    USER'S FIRST NAME\nUPDFNAM  DS    CL20                    USER'S FIRST NAME\nLNAME    DS    CL20                    USER'S LAST NAME\nUPDLNAM  DS    CL20                    USER'S LAST NAME\nNAME     DS    CL20                    USER'S NAME\nRACFATT0 DS    CL12                    SPECIAL / NOSPECIAL RACF ATTR\nUPDRAT0  DS    CL12                    SPECIAL / NOSPECIAL RACF ATTR\nRACFATT1 DS    CL12                    OPERATIONS / NOOPERATIONS RACF\nUPDRAT1  DS    CL12                    OPERATIONS / NOOPERATIONS RACF\nRACFATT2 DS    CL12                    AUDITOR / NOAUDITOR RACF ATTR\nUPDRAT2  DS    CL12                    AUDITOR / NOAUDITOR RACF ATTR\nRACFATT3 DS    CL12                    INDICATES REVOKED USER\nUSERDATA DS    CL70                    RACF USER DEFINED DATA\nUPDDATA  DS    CL70                    RACF USER DEFINED DATA\nRACF$    DS    CL1                     ADMIN SYSTEM USER\nUPDRACF$ DS    CL1                     ADMIN SYSTEM USER\nRACF1    DS    CL1                     REG 1 SYSTEM USER\nUPDRACF1 DS    CL1                     REG 1 SYSTEM USER\nRACF2    DS    CL1                     REG 2 SYSTEM USER\nUPDRACF2 DS    CL1                     REG 2 SYSTEM USER\nRACF3    DS    CL1                     REG 3 SYSTEM USER\nUPDRACF3 DS    CL1                     REG 3 SYSTEM USER\nRACF4    DS    CL1                     REG 4 SYSTEM USER\nUPDRACF4 DS    CL1                     REG 4 SYSTEM USER\nRACF5    DS    CL1                     REG 5 SYSTEM USER\nUPDRACF5 DS    CL1                     REG 5 SYSTEM USER\nRACF6    DS    CL1                     REG 6 SYSTEM USER\nUPDRACF6 DS    CL1                     REG 6 SYSTEM USER\nRACF7    DS    CL1                     REG 7 SYSTEM USER\nUPDRACF7 DS    CL1                     REG 7 SYSTEM USER\nRACF8    DS    CL1                     REG 8 SYSTEM USER\nUPDRACF8 DS    CL1                     REG 8 SYSTEM USER\nROOM     DS    CL4                     USER'S ROOM NUMBER\nUPDROOM  DS    CL4                     USER'S ROOM NUMBER\nEXTENS   DS    CL4                     USER'S PHONE EXTENSION\nUPDEXT   DS    CL4                     USER'S PHONE EXTENSION\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nMESSAGE  DS    CL72                    'ADDITIONAL CONNECT GROUPS' MSG\nFIELD    DS    CL8                     CURSOR POSITION FIELD\nRESFLAG  DS    CL8                     RESUME UPDATE FLAG\nREVFLAG  DS    CL8                     REVOKE UPDATE FLAG\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nWORKLEN  EQU   *-WORKAREA\n         END   USRUPD2\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USRUPD3": {"ttr": 22535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x04\\x80\\x04\\x80\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 1152, "newlines": 1152, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'USRUPD3 - DELUXE USER REGISTRATION (UPDATE A USER)'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = USRUPD3                                        *\n*                                                                     *\n*        CHANGE ACTIVITY:                                             *\n*              06/19/86  WRITTEN.                               JWC.  *\n*                                                                     *\n***********************************************************************\n         EJECT\n         TITLE 'USRUPD3 - ISPCALL MACRO'\n         MACRO\n&LBL     ISPCALL &LIST,        CALL PARAMETERS                         +\n               &EP=ISPLINK,                                            +\n               &LISTLBL=,      LABEL FOR PARAMETER LIST (NON-REENT)    +\n               &EPADDR=,       LABEL FOR ADDRESS OF EP OF ISPLINK      +\n               &WKAREA=,       TO BUILD CALL LIST (REENTERANT CODE)    +\n               &WKREG=,        WORK REGISTER (DEFAULT 1)               +\n               &TRACE=         'OFF' OR BIT FOR TRACE MODE\n.*  ONCE WKAREA, WKREG, AND TRACE ARE SPECIFIED, THEY ARE USED IN ALL\n.*  SUBSEQUENT OCCURRENCES OF THIS MACRO, UNLESS THE PARAMETER IS\n.*  EXPLICITLY CODED.\n.*  NOTE: FIRST 4 BYTES OF WKAREA ARE USED TO STORE NUMERIC VALUES,\n.*  WHICH ARE PRIMARILY LENGTH FIELDS.\n         LCLA  &S,&T,&U,&TRCEMSK\n         LCLB  &NUMSW\n         LCLC  &NDX,&WKAR,&WKRG,&WKEP\n         GBLC  &ISPRREG,&ISPRAR,&ISPTRC1,&ISPEP\n         GBLA  &ISPTRC2\n&NDX     SETC  '&SYSNDX'\n&S       SETA  1               SUBSCRIPT FOR GOING THRU &LIST\n***********************************************************************\n         AIF   (T'&LBL NE 'O').L1\n*                  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n         AGO   .L2\n.L1      ANOP\n&LBL     DS    0H  ISPCALL  -  INVOKE ISPF DIALOG SERVICES      ISPCALL\n.L2      ANOP\n         AIF   (T'&LIST NE 'O').A1\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE PROVIDED ***'\n         AGO   .EXIT\n.A1      AIF   ('&LIST'(1,1) EQ '(').CHKTRCE\n         MNOTE 12,'*** ISPCALL PARAMETERS MUST BE ENCLOSED IN PARENTHES+\n               ES ***'\n         AGO   .EXIT\n.****************** ANALYZE \"TRACE\" PARAMETER *************************\n.CHKTRCE AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' NE '').TRCE4\n         AIF   (T'&TRACE EQ 'O' AND '&ISPTRC1' EQ '').TRCEOFF\n         AIF   ('&TRACE'(1,1) EQ '(').TRCEON\n         AIF   ('&TRACE' EQ 'OFF').TRCEOFF\n         MNOTE 12,'*** INVALID TRACE PARAMETERS ***'\n         AGO   .EXIT\n.TRCEON  AIF   (T'&TRACE(2) EQ 'N').TRCE2\n.TRCE8   MNOTE 12,'*** TRACE BIT (2ND PARAMETER) MUST BE 0 - 7 ***'\n         AGO   .EXIT\n.TRCE2   AIF   (&TRACE(2) GE 0 OR &TRACE(2) LE 7).TRCE3\n         AGO   .TRCE8\n.TRCE3   ANOP\n&ISPTRC1 SETC  '&TRACE(1)'     SET GLOBAL VARIABLE\n&ISPTRC2 SETA  &TRACE(2)       SET GLOBAL VARIABLE\n.TRCE4   ANOP\n&U       SETA  0\n&TRCEMSK SETA  255\n&T       SETA  128\n.TRCE5   AIF   (&U GT 7).CHKREG\n         AIF   (&ISPTRC2 NE &U).TRCE7\n.TRCE6   ANOP\n&U       SETA  &U+1\n&T       SETA  &T/2\n         AGO   .TRCE5\n.TRCE7   ANOP\n&TRCEMSK SETA  &TRCEMSK-&T\n         AGO   .TRCE6\n.TRCEOFF ANOP\n&ISPTRC1 SETC  ''              SET GLOBAL VARIABLE\n.****************** ANALYZE \"WKREG\" PARAMETER *************************\n.CHKREG  AIF   (T'&WKREG EQ 'O').A2\n&ISPRREG SETC  '&WKREG'        SET GLOBAL VARIABLE\n.A2      AIF   ('&ISPRREG' EQ '').A3\n&WKRG    SETC  '&ISPRREG'\n         AGO   .CHKAREA\n.A3      ANOP\n&ISPRREG SETC  '1'             SET GLOBAL VARIABLE\n         AGO   .A2\n.****************** SEE IF USING PROVIDED WORKAREA ********************\n.CHKAREA AIF   (T'&WKAREA NE 'O' OR '&ISPRAR' NE '').RENT\n         AIF   (T'&LISTLBL EQ 'O').B1\n&WKAR    SETC  '&LISTLBL'\n         AGO   .B2\n.B1      ANOP\n&WKAR    SETC  'ISPC&NDX'      LABEL FOR MACRO WORKAREA\n.B2      ANOP\n&T       SETA  4*(N'&LIST+1)   LENGTH OF MACRO WORKAREA\n         B     &WKAR.+&T             BRANCH AROUND DATA         ISPCALL\n&T       SETA  N'&LIST+1\n&WKAR    DC    &T.F'0'               PARAMETER LIST             ISPCALL\n.******************** BUILD PARAMETER LIST ****************************\n.LOOP    AIF   (&S GT N'&LIST).ENDLOOP\n         AIF   ('&LIST(&S)'(1,1) EQ '''').C1 TEST FOR LITERAL\n         AIF   (T'&LIST(&S) EQ 'N').NUM      TEST FOR NUMERIC\n         AIF   ('&LIST(&S)'(1,1) EQ '(').REG TEST FOR REG NOTATION\n         LA    &WKRG,&LIST(&S)       LOAD DATA ADDR             ISPCALL\n.ST      ANOP\n&T       SETA  4*&S\n         ST    &WKRG,&WKAR.+&T       STORE IN PARAM LIST        ISPCALL\n         AIF   ('&ISPTRC1' EQ '' OR &S GT 1).C3           TRACE\n         TM    &ISPTRC1,&TRCEMSK     IS TRACE BIT ON?     TRACE ISPCALL\n         BZ    ISPT&NDX                                   TRACE ISPCALL\n         AIF   ('&WKRG' EQ '1' OR '&WKRG' EQ 'R1').C4     TRACE\n         LR    1,&WKRG               LOAD SRVC NAME ADDR  TRACE ISPCALL\n         EJECT\n.C4      AIF   ('&LIST(&S)'(1,1) EQ '''').C5 LITERAL?     TRACE\n         LA    0,8                   LOAD LENGTH          TRACE ISPCALL\n         AGO   .C6                                        TRACE\n.C5      ANOP                                             TRACE\n&U       SETA  K'&LIST(&S)-2   LENGTH OF SERVICE NAME     TRACE\n         LA    0,&U                  LOAD LENGTH          TRACE ISPCALL\n.C6      ANOP                                             TRACE\n         SVC   93                    ISSUE TPUT SVC       TRACE ISPCALL\nISPT&NDX EQU   *                                          TRACE ISPCALL\n.C3      ANOP\n&S       SETA  &S+1\n         AGO   .LOOP\n.C1      AIF   (&S EQ 1).C2    SPF SERVICE NAME - LENGTH IS OK\n&T       SETA  K'&LIST(&S)-2\n         AIF   (&T GT 7).C2    LENGTH 8 OR GREATER IS OK\n&T       SETA  &T+1            ADD FOR ONE BLANK\n         LA    &WKRG,=CL&T.&LIST(&S) LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.C2      ANOP\n         LA    &WKRG,=C&LIST(&S)     LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.NUM     AIF   (&NUMSW).NUM2\n.*  NOTE: SPF WILL MODIFY LENGTH FIELDS, SO THEY CANNOT BE IN\n.*  REENTERANT CODE.\n         MVC   &WKAR.(4),=F'&LIST(&S)'                                 +\n                                     MOVE NUMERIC VALUE         ISPCALL\n&NUMSW   SETB  1\n         AGO   .LA\n.NUM2    MNOTE 12,'*** ONLY ONE NUMERIC ALLOWED PER ISPCALL MACRO - LIS+\n               T ITEM &S --&LIST(&S)-- IS SECOND OCCURRENCE ***'\n         AGO   .EXIT\n.LA      ANOP\n         LA    &WKRG,&WKAR           LOAD DATA ADDR             ISPCALL\n         AGO   .ST\n.REG     ANOP\n&T       SETA  4*&S\n         ST    &LIST(&S),&WKAR.+&T                              ISPCALL\n         AGO   .C3\n.******************** USING PROVIDED WORKAREA *************************\n.RENT    AIF   (T'&WKAREA EQ 'O').RENT2\n&ISPRAR  SETC  '&WKAREA'       SET GLOBAL VARIABLE\n.RENT2   ANOP\n&WKAR    SETC  '&ISPRAR'\n         AGO   .LOOP\n         EJECT\n.****************** GENERATE STATEMENTS FOR CALL **********************\n.ENDLOOP ANOP\n         OI    &WKAR.+&T,X'80'       TURN ON VL BIT             ISPCALL\n.*       LA    1,&WKAR.+4                                       ISPCALL\n.*       L     15,=V(&EP)                                       ISPCALL\n.*       BALR  14,15                                            ISPCALL\n         AIF   (T'&EPADDR EQ 'O').EP2\n&ISPEP   SETC  '&EPADDR'\n         LOAD  EP=ISPLINK\n         ST    R0,&ISPEP\n.EP2     ANOP\n&WKEP    SETC  '&ISPEP'\n         L     15,&WKEP\n         LA    1,&WKAR.+4\n         CALL  (15)\n.EXIT    ANOP\n***********************************************************************\n         SPACE 2\n         MEND\n         EJECT\n         TITLE 'USRUPD3 - INITIALIZATION SECTION'\nUSRUPD3  CSECT\n***********************************************************************\n*  INITIALIZATION SECTION - GETMAIN WORKAREA AND SAVE AREA CHAINING\n***********************************************************************\n         SAVE  (14,12),,USRUPD3_&SYSDATE_&SYSTIME    SAVE REGISTERS\n         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS\n         USING USRUPD3,R12             ESTABLISH ADDRESSABILITY TO\n*                                      PROGRAM CSECT\n         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY + 4095\n         USING USRUPD3+4095,R11        ESTABLISH ADDRESSABILITY TO\n*                                      REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC WORKAREA\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n***********************************************************************\n*  INITIALIZATION SECTION - SET DIALOG CONTROL, DEFINE VARIABLES\n***********************************************************************\nCONTROL  EQU   *\n*                                      SET DIALOG CONTROL\n         ISPCALL ('CONTROL','ERRORS','RETURN'),                        +\n               WKAREA=PARMS,                                           +\n               EPADDR=ISPADDR\nVDEF1    EQU   *\n         MVC   ISPFSERV,DEFID          SET ISPF DIALOG SERVICE\n*                                      DEFINE VARIABLES\n         ISPCALL ('VDEFINE',NAMELST1,USERID,'CHAR',8)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF2                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF2    EQU   *\n         ISPCALL ('VDEFINE',NAMELST2,FNAME,'CHAR',20)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF3                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF3    EQU   *\n         ISPCALL ('VDEFINE',NAMELST3,RACFATT0,'CHAR',12)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF4                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF4    EQU   *\n         ISPCALL ('VDEFINE',NAMELST4,USERDATA,'CHAR',70)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF5                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF5    EQU   *\n         ISPCALL ('VDEFINE',NAMELST5,ROOM,'CHAR',4)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF6                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF6    EQU   *\n         ISPCALL ('VDEFINE',NAMELST6,CNCTGRP1,'CHAR',40)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF7                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF7    EQU   *\n         ISPCALL ('VDEFINE',NAMELST7,USERMSGS,'CHAR',24)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF8                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF8    EQU   *\n         ISPCALL ('VDEFINE',NAMELST8,USERMSGL,'CHAR',78)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEF9                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF9    EQU   *\n         ISPCALL ('VDEFINE',NAMELST9,UPDCMD,'CHAR',80)\n         LTR   R15,R15                 DEFINE SUCCESSFUL?\n         BZ    VDEFA                   YES, CONTINUE DEFINE\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEFA    EQU   *\n         ISPCALL ('VDEFINE',NAMELSTA,RACF$,'CHAR',1)\n         B     VDEF10(R15)             CHECK RETURN CODE\nVDEF10   EQU   *\n         B     TBOPEN                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VDEF)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VDEF)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - OPEN FILE TAILORING TABLE (USRUPD)\n***********************************************************************\nTBOPEN   EQU   *\n         MVC   ISPFSERV,OPNID          SET ISPF DIALOG SERVICE\n*                                      OPEN A TABLE\n         ISPCALL ('TBOPEN','USRUPD','WRITE')\n         B     TBOPN10(R15)            CHECK RETURN CODE\nTBOPN10  EQU   *\n         B     TBBOTTOM                RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBOPEN)\n         B     TBCREATE                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - SET CRP TO BOTTOM OF TABLE (USRUPD)\n***********************************************************************\nTBBOTTOM EQU   *\n         MVC   ISPFSERV,BOTID          SET ISPF DIALOG SERVICE\n*                                      SET ROW POINTER TO BOTTOM\n         ISPCALL ('TBBOTTOM','USRUPD')\n         B     TBBOT10(R15)            CHECK RETURN CODE\nTBBOT10  EQU   *\n         B     VGET                    RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBBOTTOM)\n         B     VGET                    RC = 08 (CONTINUE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  INITIALIZATION SECTION - CREATE FILE TAILORING TABLE\n***********************************************************************\nTBCREATE EQU   *\n         MVC   ISPFSERV,CREID          SET ISPF DIALOG SERVICE\n*                                      CREATE A TABLE\n         ISPCALL ('TBCREATE','USRUPD',' ',NAMELSTB,'WRITE','REPLACE')\n         B     TBCRE10(R15)            CHECK RETURN CODE\nTBCRE10  EQU   *\n         B     VGET                    RC = 00 (CONTINUE)\n         B     VGET                    RC = 04 (CONTINUE)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - RETRIEVE VARIABLES FOR RACF UPDATE\n***********************************************************************\nVGET     EQU   *\n         MVC   ISPFSERV,GETID          SET ISPF DIALOG SERVICE\n*                                      RETRIEVE VARIABLES\n         ISPCALL ('VGET',NAMELSTX)\n         B     VGET10(R15)             CHECK RETURN CODE\nVGET10   EQU   *\n         B     BLDRAC                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VGET)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VGET)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - BUILD RACF COMMANDS TO UPDATE USER PROFILE\n***********************************************************************\nBLDRAC   EQU   *\n         MVC   RTFLAG,RACF             INDICATES RACF CMD PROCESSING\n         MVC   EXTENS,UPDEXT           UPDATE EXTENSION\n         CLC   FNAME,UPDFNAM           UPDATE FIRST NAME?\n         BE    BLDRAC10                NO, CHECK LAST NAME\n         MVC   FNAME,UPDFNAM           YES, UPDATE FNAME\n         CLC   LNAME,UPDLNAM           UPDATE LAST NAME?\n         BE    BLDRAC20                NO, BUILD NAME\n         MVC   LNAME,UPDLNAM           YES, UPDATE LNAME\n         B     BLDRAC20                BUILD NAME\nBLDRAC10 EQU   *\n         CLC   LNAME,UPDLNAM           UPDATE LAST NAME?\n         BE    BLDRAC70                NO, CHECK OWNER CHANGE\n         MVC   LNAME,UPDLNAM           YES, UPDATE LNAME\nBLDRAC20 EQU   *\n         MVC   NAME,FNAME              MOVE FNAME TO NAME\n         LA    R3,NAME                 R3 - INDEX THROUGH NAME\n         LA    R4,20                   R4 - MAXIMUM LENGTH OF NAME\nBLDRAC30 EQU   *\n         CLC   0(2,R3),SPACES          END OF NAME?\n         BE    BLDRAC40                YES, ADD LAST NAME\n         LA    R3,1(R3)                INCREMENT R3\n         BCT   R4,BLDRAC30             CONTINUE\nBLDRAC40 EQU   *\n         LA    R2,LNAME                R2 - INDEX THROUGH FIRST NAME\n         LA    R3,1(R3)                R3 - INDEX THROUGH NAME\n         BCTR  R4,0                    DECREMENT R4\nBLDRAC50 EQU   *\n         CLC   0(1,R2),SPACES          END OF LNAME?\n         BE    BLDRAC60                YES, BUILD RACF 'ALTUSER' CMD\n         MVC   0(1,R3),0(R2)           MOVE LNAME TO NAME\n         LA    R2,1(R2)                INCREMENT R2\n         LA    R3,1(R3)                INCREMENT R3\n         BCT   R4,BLDRAC50             CONTINUE\nBLDRAC60 EQU   *\n         MVC   UPDCMD,ALUCMD1          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+25(20),NAME      MOVE NAME TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRAC70 EQU   *\n         CLC   OWNER,UPDOWNR           OWNER BEEN UPDATED?\n         BE    BLDRAC80                NO, CHECK DFLTGRP CHANGE\n         MVC   UPDCMD,ALUCMD2          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+25(8),OWNER      MOVE OWNER TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRAC80 EQU   *\n         CLC   DFLTGRP,UPDDFLT         DFLTGRP BEEN UPDATED?\n         BE    BLDRAC90                NO, CHECK RACFATT0 CHANGE\n         MVC   DFLTGRP,UPDDFLT         YES, UPDATE DFLTGRP\n         MVC   UPDCMD,COCMD1           MOVE 'CONNECT' CMD TO UPDCMD\n         MVC   UPDCMD+4(8),USERID      MOVE USERID TO 'CONNECT' CMD\n         MVC   UPDCMD+20(8),DFLTGRP    MOVE DFLTGRP TO 'CONNECT' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\n         MVC   UPDCMD,ALUCMD3          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+27(8),DFLTGRP    MOVE DFLTGRP TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRAC90 EQU   *\n         CLC   RACFATT0,UPDRAT0        RACFATT0 BEEN UPDATED?\n         BE    BLDRACA0                NO, CHECK RACFATT1 CHANGE\n         MVC   UPDCMD,ALUCMD4          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+19(12),RACFATT0  MOVE RACFATT0 TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRACA0 EQU   *\n         CLC   RACFATT1,UPDRAT1        RACFATT1 BEEN UPDATED?\n         BE    BLDRACB0                NO, CHECK RACFATT2 CHANGE\n         MVC   RACFATT1,UPDRAT1        YES, UPDATE RACFATT1\n         MVC   UPDCMD,ALUCMD4          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+19(12),RACFATT1  MOVE RACFATT1 TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRACB0 EQU   *\n         CLC   RACFATT2,UPDRAT2        RACFATT2 BEEN UPDATED?\n         BE    BLDRACC0                NO, CHECK REVOKE CHANGE\n         MVC   RACFATT2,UPDRAT2        YES, UPDATE RACFATT2\n         MVC   UPDCMD,ALUCMD4          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+19(12),RACFATT2  MOVE RACFATT2 TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRACC0 EQU   *\n         CLC   UPDREV,REVOKE           REVOKE DATE UPDATED?\n         BE    BLDRACD0                NO, CHECK RESUME DATE\n         CLC   UPDREV,SPACES           REVOKE DATE ENTERED?\n         BNE   BLDRC10                 YES, SET UP ALTUSER COMMAND\n         MVC   REVOKE,NONE             YES, UPDATE REVOKE\n         MVC   RACFATT3,REVOKED        YES, UPDATE RACFATT3\n         MVC   UPDCMD,ALUCMD8          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\n         B     BLDRACD0                CHECK RESUME DATE\nBLDRC10  EQU   *\n         MVC   REVOKE,UPDREV           YES, UPDATE REVOKE\n         MVC   UPDCMD,ALUCMD5          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+26(8),REVOKE     MOVE REVOKE TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRACD0 EQU   *\n         CLC   UPDRES,RESUME           RESUME DATE UPDATED?\n         BE    BLDRACE0                NO, CHECK USERDATA\n         CLC   UPDRES,SPACES           RESUME DATE ENTERED?\n         BNE   BLDRD10                 YES, SET UP ALTUSER COMMAND\n         MVC   RESUME,NONE             YES, UPDATE RESUME\n         MVC   RACFATT3,SPACES         YES, UPDATE RACFATT3\n         MVC   UPDCMD,ALUCMD9          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\n         B     BLDRACE0                CHECK USERDATA\nBLDRD10  EQU   *\n         MVC   RESUME,UPDRES           YES, UPDATE RESUME\n         MVC   UPDCMD,ALUCMD6          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+9(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+26(8),RESUME     MOVE RESUME TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRACE0 EQU   *\n         CLC   USERDATA,UPDDATA        USERDATA BEEN UPDATED?\n         BE    BLDRACF0                NO, CHECK CNCTGRP1 CHANGE\n         MVC   USERDATA,UPDDATA        YES, UPDATE USERDATA\n         CLC   USERDATA(5),ROOM#       ROOM BEEN UPDATED?\n         BNE   BLDRE10                 NO, SET UP ALTUSER COMMAND\n         MVC   ROOM,USERDATA+5         UPDATE ROOM\nBLDRE10  EQU   *\n         MVC   UPDCMD,ALUCMD7          MOVE 'ALTUSER' CMD TO UPDCMD\n         MVC   UPDCMD+5(8),USERID      MOVE USERID TO 'ALTUSER' CMD\n         MVC   UPDCMD+21(54),USERDATA  MOVE USERDATA TO 'ALTUSER' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRACF0 EQU   *\n         LA    R2,UPDCGRP1             R2 - INDEX THRU UPDCGRP'S\n         LA    R3,CNCTGRP1             R3 - INDEX THRU CNCTGRP'S\n         LA    R4,15                   R4 - MAX NUMBER OF CNCTGRPS\nBLDRACG0 EQU   *\n         CLC   0(40,R3),0(R2)          CONNECT GROUP INFO UPDATED?\n         BE    BLDRACH0                NO, CHECK NEXT CONNECT GROUP\n         CLC   0(8,R2),SPACES          CONNECT GROUP REMOVED?\n         BNE   BLDRG10                 NO, CHECK FOR CHANGE\n         MVC   UPDCMD,RECMD1           MOVE 'REMOVE' CMD TO UPDCMD\n         MVC   UPDCMD+8(8),USERID      MOVE USERID TO 'REMOVE' CMD\n         MVC   UPDCMD+24(8),0(R3)      MOVE GROUP TO 'REMOVE' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\n         B     BLDRACH0                CHECK NEXT CONNECT GROUP\nBLDRG10  EQU   *\n         CLC   0(8,R3),0(R2)           CONNECT GROUP CHANGED?\n         BE    BLDRG20                 NO, SET UP COCMD2\n         CLC   0(8,R3),SPACES          CONNECT GROUP ADDED?\n         BE    BLDRG20                 YES, SET UP COCMD2\n         MVC   UPDCMD,RECMD1           MOVE 'REMOVE' CMD TO UPDCMD\n         MVC   UPDCMD+8(8),USERID      MOVE USERID TO 'REMOVE' CMD\n         MVC   UPDCMD+24(8),0(R3)      MOVE GROUP TO 'REMOVE' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRG20  EQU   *\n         MVC   UPDCMD,COCMD2           MOVE 'CONNECT' CMD TO UPDCMD\n         MVC   UPDCMD+4(8),USERID      MOVE USERID TO 'CONNECT' CMD\n         MVC   UPDCMD+20(8),0(R2)      MOVE GROUP TO 'CONNECT' CMD\n         MVC   UPDCMD+52(7),8(R2)      MOVE AUTHORITY TO 'CONNECT' CMD\n         MVC   UPDCMD+66(7),16(R2)     MOVE UACC TO 'CONNECT' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\n         CLC   24(8,R2),24(R3)         REVOKE DATE UPDATED?\n         BE    BLDRG30                 NO, CHECK FOR NEW CONNECT GROUP\n         CLC   24(8,R2),SPACES         REVOKE DATE ENTERED?\n         BNE   BLDRG40                 YES, SET UP CONNECT COMMAND\n         MVC   24(8,R2),NONE           UPDATE REVOKE DATE\n         MVC   UPDCMD,COCMD5           MOVE 'CONNECT' CMD TO UPDCMD\n         MVC   UPDCMD+4(8),USERID      MOVE USERID TO 'CONNECT' CMD\n         MVC   UPDCMD+20(8),0(R2)      MOVE GROUP TO 'CONNECT' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\n         B     BLDRG50                 CHECK RESUME DATE\nBLDRG30  EQU   *\n         CLC   0(8,R3),SPACES          CONNECT GROUP ADDED?\n         BNE   BLDRG50                 NO, CHECK RESUME DATE\n         MVC   24(8,R2),NONE           UPDATE REVOKE DATE\n         B     BLDRG50                 CHECK RESUME DATE\nBLDRG40  EQU   *\n         MVC   UPDCMD,COCMD3           MOVE 'CONNECT' CMD TO UPDCMD\n         MVC   UPDCMD+4(8),USERID      MOVE USERID TO 'CONNECT' CMD\n         MVC   UPDCMD+20(8),0(R2)      MOVE GROUP TO 'CONNECT' CMD\n         MVC   UPDCMD+49(8),24(R2)     MOVE REVOKE TO 'CONNECT' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRG50  EQU   *\n         CLC   32(8,R2),32(R3)         RESUME DATE UPDATED?\n         BE    BLDRG60                 NO, CHECK FOR NEW CONNECT GROUP\n         CLC   32(8,R2),SPACES         RESUME DATE ENTERED?\n         BNE   BLDRG70                 YES, SET UP CONNECT COMMAND\n         MVC   32(8,R2),NONE           UPDATE RESUME DATE\n         MVC   UPDCMD,COCMD6           MOVE 'CONNECT' CMD TO UPDCMD\n         MVC   UPDCMD+4(8),USERID      MOVE USERID TO 'CONNECT' CMD\n         MVC   UPDCMD+20(8),0(R2)      MOVE GROUP TO 'CONNECT' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\n         B     BLDRACH0                CHECK NEXT CONNECT GROUP\nBLDRG60  EQU   *\n         CLC   0(8,R3),SPACES          CONNECT GROUP ADDED?\n         BNE   BLDRACH0                NO, CHECK NEXT CONNECT GROUP\n         MVC   32(8,R2),NONE           UPDATE RESUME DATE\n         B     BLDRACH0                CHECK NEXT CONNECT GROUP\nBLDRG70  EQU   *\n         MVC   UPDCMD,COCMD4           MOVE 'CONNECT' CMD TO UPDCMD\n         MVC   UPDCMD+4(8),USERID      MOVE USERID TO 'CONNECT' CMD\n         MVC   UPDCMD+20(8),0(R2)      MOVE GROUP TO 'CONNECT' CMD\n         MVC   UPDCMD+49(8),32(R2)     MOVE RESUME TO 'CONNECT' CMD\n         BAL   R8,TBADD                ADD RECORD TO TABLE\nBLDRACH0 EQU   *\n         LA    R2,40(R2)               R2 - INDEX THRU UPDCGRP'S\n         LA    R3,40(R3)               R3 - INDEX THRU CNCTGRP'S\n         BCT   R4,BLDRACG0             CONTINUE WITH NEXT GROUP\nBLDRACI0 EQU   *\n         LA    R2,CNCTGRP1             R2 - INDEX THRU CNCTGRP'S\n         LA    R3,15                   R3 - MAX NUMBER OF CNCTGRP'S\nBLDRI10  EQU   *\n         MVC   0(40,R2),SPACES         INITIALIZE CNCTGRP\n         LA    R2,40(R2)               INCREMENT R2\n         BCT   R3,BLDRI10              CONTINUE\n         LA    R2,CNCTGRP1             R2 - INDEX THRU CNCTGRP'S\n         LA    R3,UPDCGRP1             R3 - INDEX THRU UPDCGRP'S\n         LA    R4,15                   R4 - MAX NUMBER OF CNCTGRP'S\nBLDRI20  EQU   *\n         CLC   0(8,R3),SPACES          CONNECT GROUP REMOVED?\n         BE    BLDRI30                 YES, DON'T UPDATE CNCTGRP\n         MVC   0(40,R2),0(R3)          UPDATE CNCTGRP\n         LA    R2,40(R2)               INCREMENT R2\nBLDRI30  EQU   *\n         LA    R3,40(R3)               INCREMENT R3\n         BCT   R4,BLDRI20              CONTINUE\n***********************************************************************\n*  PROCESSING SECTION - UPDATE VARIABLES IN POOL\n***********************************************************************\nVPUT     EQU   *\n         MVC   ISPFSERV,PUTID          SET ISPF DIALOG SERVICE\n*                                      UPDATE VARIABLES IN POOL\n         ISPCALL ('VPUT',NAMELSTY)\n         B     VPUT10(R15)             CHECK RETURN CODE\nVPUT10   EQU   *\n         B     TBCLOSE                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR VPUT)\n         B     USRERR08                RC = 08 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (NOT VALID FOR VPUT)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - CLOSE FILE TAILORING TABLE (USRUPD)\n***********************************************************************\nTBCLOSE  EQU   *\n         MVC   ISPFSERV,CLOID          SET ISPF DIALOG SERVICE\n*                                      CLOSE AND SAVE TABLE\n         ISPCALL ('TBCLOSE','USRUPD','REPLCOPY')\n         B     TBCLO10(R15)            CHECK RETURN CODE\nTBCLO10  EQU   *\n         B     FINISH                  RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBCLOSE)\n         B     USRERR08                RC = 08 (NOT VALID FOR TBCLOSE)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\n***********************************************************************\n*  PROCESSING SECTION - ADD A RECORD TO FILE TAILORING TABLE\n***********************************************************************\nTBADD    EQU   *\n         MVC   ISPFSERV,ADDID          SET ISPF DIALOG SERVICE\n*                                      ADD A RECORD TO THE TABLE\n         ISPCALL ('TBADD','USRUPD')\n         B     TBADD10(R15)            CHECK RETURN CODE\nTBADD10  EQU   *\n         B     TBADD20                 RC = 00 (CONTINUE)\n         B     USRERR04                RC = 04 (NOT VALID FOR TBADD)\n         B     USRERR08                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR12                RC = 12 (DISPLAY PANEL / MSG)\n         B     USRERR16                RC = 16 (DISPLAY PANEL / MSG)\n         B     USRERR20                RC = 20 (DISPLAY PANEL / MSG)\nTBADD20  EQU   *\n         BR    R8                      RETURN\n         TITLE 'USRUPD3 - ERROR PROCESSING SECTION'\n***********************************************************************\n*  ERROR PROCESSING SECTION\n***********************************************************************\nUSRERR04 EQU   *\n         MVC   ISPFRC,FOUR             SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR08 EQU   *\n         MVC   ISPFRC,EIGHT            SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR12 EQU   *\n         MVC   ISPFRC,TWELVE           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR16 EQU   *\n         MVC   ISPFRC,SIXTEEN          SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nUSRERR20 EQU   *\n         MVC   ISPFRC,TWENTY           SET RETURN CODE\n         B     MSGDISP1                DISPLAY PANEL WITH MESSAGE\nMSGDISP1 EQU   *\n         MVC   USERMSGS,USERERRS       SET SHORT MESSAGE\n         MVC   USERMSGL,USERERRL       SET LONG MESSAGE\n         MVC   USERMSGL+21(8),ISPFSERV    SET ISPF DIALOG SERVICE\n         MVC   USERMSGL+47(2),ISPFRC   SET DIALOG SERVICE RETURN CODE\n*                                      DISPLAY SELECTION PANEL\n         ISPCALL ('DISPLAY','USRUPD3A',USERMSG)\n         B     FINISH\n         TITLE 'USRUPD3 - CLOSING SECTION'\n***********************************************************************\n*  CLOSING SECTION - FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS\n***********************************************************************\nFINISH   EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)              R13 - ADDR CALLER'S SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED VIRTUAL STORAGE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         TITLE 'USRUPD3 - REGISTER EQUATES'\n***********************************************************************\n*  REGISTER EQUATES\n***********************************************************************\n         EQUATE\n         TITLE 'USRUPD3 - DATA CONSTANTS'\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\nSPACES   DC    CL80' '                 SPACES\nFOUR     DC    CL2'04'                 RETURN CODE OF '04'\nEIGHT    DC    CL2'08'                 RETURN CODE OF '08'\nTWELVE   DC    CL2'12'                 RETURN CODE OF '12'\nSIXTEEN  DC    CL2'16'                 RETURN CODE OF '16'\nTWENTY   DC    CL2'20'                 RETURN CODE OF '20'\nRACF     DC    CL1'R'                  INDICATES RACF COMMAND\nROOM#    DC    C'ROOM='                USED WITH REVOKE & RESUME\nNONE     DC    CL8'NONE'               USED WITH REVOKE & RESUME\nREVOKED  DC    CL12'REVOKED'           RACFATT3 VALUE IF USER REVOKED\nUSERMSG  DC    CL8'USER000'            GENERIC USER MESSAGE\nADDID    DC    CL8'TBADD'              ISPF DIALOG SERVICE (TBADD)\nCLOID    DC    CL8'TBCLOSE'            ISPF DIALOG SERVICE (TBCLOSE)\nCREID    DC    CL8'TBCREATE'           ISPF DIALOG SERVICE (TBCREATE)\nDEFID    DC    CL8'VDEFINE'            ISPF DIALOG SERVICE (VDEFINE)\nGETID    DC    CL8'VGET'               ISPF DIALOG SERVICE (VGET)\nOPNID    DC    CL8'TBOPEN'             ISPF DIALOG SERVICE (TBOPEN)\nPUTID    DC    CL8'VPUT'               ISPF DIALOG SERVICE (VPUT)\nBOTID    DC    CL8'TBBOTTOM'           ISPF DIALOG SERVICE (TBBOTTOM)\nUSERERRS DC    CL24'USRUPD3 Program Error. '\nUSERERRL DC    CL78'ISPF Dialog Service, 12345678, Ended with RC = 00. +\n               Notify Systems Programming.'\nALUCMD1  DC    CL80'ALTUSER (12345678) NAME(''123456789.123456789.'')  +\n                                              '\nALUCMD2  DC    CL80'ALTUSER (12345678) OWNER(12345678)                 +\n                                            '\nALUCMD3  DC    CL80'ALTUSER (12345678) DFLTGRP(12345678)               +\n                                            '\nALUCMD4  DC    CL80'ALTUSER (12345678) 123456789.12                    +\n                                            '\nALUCMD5  DC    CL80'ALTUSER (12345678) REVOKE(12345678)                +\n                                            '\nALUCMD6  DC    CL80'ALTUSER (12345678) RESUME(12345678)                +\n                                            '\nALUCMD7  DC    CL80'ALU (12345678) DATA(''123456789.123456789.123456789+\n               .123456789.123456789.1234'')   '\nALUCMD8  DC    CL80'ALTUSER (12345678) REVOKE                          +\n                                            '\nALUCMD9  DC    CL80'ALTUSER (12345678) RESUME                          +\n                                            '\nCOCMD1   DC    CL80'CO (12345678) GROUP(12345678) OWNER(SYS1)          +\n                                            '\nCOCMD2   DC    CL80'CO (12345678) GROUP(12345678) OWNER(SYS1) AUTHORITY+\n               (1234567) UACC(1234567)      '\nCOCMD3   DC    CL80'CO (12345678) GROUP(12345678) OWNER(SYS1) REVOKE(12+\n               345678)                      '\nCOCMD4   DC    CL80'CO (12345678) GROUP(12345678) OWNER(SYS1) RESUME(12+\n               345678)                      '\nCOCMD5   DC    CL80'CO (12345678) GROUP(12345678) OWNER(SYS1) REVOKE   +\n                                            '\nCOCMD6   DC    CL80'CO (12345678) GROUP(12345678) OWNER(SYS1) RESUME   +\n                                            '\nRECMD1   DC    CL80'REMOVE (12345678) GROUP(12345678)                  +\n                                            '\nNAMELST1 DS    0F                      NAMES OF VARIABLES (LENGTH 8)\n         DC    F'09'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'OWNER'\n         DC    CL8'UPDOWNR'\n         DC    CL8'DFLTGRP'\n         DC    CL8'UPDDFLT'\n         DC    CL8'REVOKE'\n         DC    CL8'UPDREV'\n         DC    CL8'RESUME'\n         DC    CL8'UPDRES'\nNAMELST2 DS    0F                      NAMES OF VARIABLES (LENGTH 20)\n         DC    F'05'\n         DC    F'00'\n         DC    CL8'FNAME'\n         DC    CL8'UPDFNAM'\n         DC    CL8'LNAME'\n         DC    CL8'UPDLNAM'\n         DC    CL8'NAME'\nNAMELST3 DS    0F                      NAMES OF VARIABLES (LENGTH 12)\n         DC    F'07'\n         DC    F'00'\n         DC    CL8'RACFATT0'\n         DC    CL8'UPDRAT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'UPDRAT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'UPDRAT2'\n         DC    CL8'RACFATT3'\nNAMELST4 DS    0F                      NAMES OF VARIABLES (LENGTH 70)\n         DC    F'02'\n         DC    F'00'\n         DC    CL8'USERDATA'\n         DC    CL8'UPDDATA'\nNAMELST5 DS    0F                      NAMES OF VARIABLES (LENGTH 4)\n         DC    F'04'\n         DC    F'00'\n         DC    CL8'ROOM'\n         DC    CL8'UPDROOM'\n         DC    CL8'EXTENS'\n         DC    CL8'UPDEXT'\nNAMELST6 DS    0F                      NAMES OF VARIABLES (LENGTH 40)\n         DC    F'30'\n         DC    F'00'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'UPDCGRP1'\n         DC    CL8'UPDCGRP2'\n         DC    CL8'UPDCGRP3'\n         DC    CL8'UPDCGRP4'\n         DC    CL8'UPDCGRP5'\n         DC    CL8'UPDCGRP6'\n         DC    CL8'UPDCGRP7'\n         DC    CL8'UPDCGRP8'\n         DC    CL8'UPDCGRP9'\n         DC    CL8'UPDCGRPA'\n         DC    CL8'UPDCGRPB'\n         DC    CL8'UPDCGRPC'\n         DC    CL8'UPDCGRPD'\n         DC    CL8'UPDCGRPE'\n         DC    CL8'UPDCGRPF'\nNAMELST7 DS    0F                      NAMES OF VARIABLES (LENGTH 24)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGS'\nNAMELST8 DS    0F                      NAMES OF VARIABLES (LENGTH 78)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'USERMSGL'\nNAMELST9 DS    0F                      NAMES OF VARIABLES (LENGTH 80)\n         DC    F'01'\n         DC    F'00'\n         DC    CL8'UPDCMD'\nNAMELSTA DS    0F                      NAMES OF VARIABLES (LENGTH 1)\n         DC    F'10'\n         DC    F'00'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'RTFLAG'\nNAMELSTB DS    0F                      NAMES OF FT TABLE VARIABLES\n         DC    F'11'\n         DC    F'00'\n         DC    CL8'UPDCMD'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'RTFLAG'\nNAMELSTX DS    0F                      NAMES OF VGET VARIABLES\n         DC    F'66'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'FNAME'\n         DC    CL8'UPDFNAM'\n         DC    CL8'LNAME'\n         DC    CL8'UPDLNAM'\n         DC    CL8'NAME'\n         DC    CL8'OWNER'\n         DC    CL8'UPDOWNR'\n         DC    CL8'DFLTGRP'\n         DC    CL8'UPDDFLT'\n         DC    CL8'RACFATT0'\n         DC    CL8'UPDRAT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'UPDRAT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'UPDRAT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'REVOKE'\n         DC    CL8'UPDREV'\n         DC    CL8'RESUME'\n         DC    CL8'UPDRES'\n         DC    CL8'USERDATA'\n         DC    CL8'UPDDATA'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'UPDCGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'UPDCGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'UPDCGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'UPDCGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'UPDCGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'UPDCGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'UPDCGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'UPDCGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'UPDCGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'UPDCGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'UPDCGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'UPDCGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'UPDCGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'UPDCGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'UPDCGRPF'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'EXTENS'\n         DC    CL8'UPDEXT'\n         DC    CL8'ROOM'\n         DC    CL8'UPDROOM'\nNAMELSTY DS    0F                      NAMES OF VPUT VARIABLES\n         DC    F'39'\n         DC    F'00'\n         DC    CL8'USERID'\n         DC    CL8'FNAME'\n         DC    CL8'LNAME'\n         DC    CL8'NAME'\n         DC    CL8'OWNER'\n         DC    CL8'DFLTGRP'\n         DC    CL8'RACFATT0'\n         DC    CL8'RACFATT1'\n         DC    CL8'RACFATT2'\n         DC    CL8'RACFATT3'\n         DC    CL8'REVOKE'\n         DC    CL8'RESUME'\n         DC    CL8'USERDATA'\n         DC    CL8'CNCTGRP1'\n         DC    CL8'CNCTGRP2'\n         DC    CL8'CNCTGRP3'\n         DC    CL8'CNCTGRP4'\n         DC    CL8'CNCTGRP5'\n         DC    CL8'CNCTGRP6'\n         DC    CL8'CNCTGRP7'\n         DC    CL8'CNCTGRP8'\n         DC    CL8'CNCTGRP9'\n         DC    CL8'CNCTGRPA'\n         DC    CL8'CNCTGRPB'\n         DC    CL8'CNCTGRPC'\n         DC    CL8'CNCTGRPD'\n         DC    CL8'CNCTGRPE'\n         DC    CL8'CNCTGRPF'\n         DC    CL8'RACF$'\n         DC    CL8'RACF1'\n         DC    CL8'RACF2'\n         DC    CL8'RACF3'\n         DC    CL8'RACF4'\n         DC    CL8'RACF5'\n         DC    CL8'RACF6'\n         DC    CL8'RACF7'\n         DC    CL8'RACF8'\n         DC    CL8'EXTENS'\n         DC    CL8'ROOM'\n         TITLE 'USRUPD3 - LITERAL POOL'\n         LTORG\n         TITLE 'USRUPD3 - DYNAMIC WORK AREA'\n***********************************************************************\n*  DYNAMIC WORK AREA\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     PROGRAM SAVE AREA\nISPADDR  DS    A                       ADDRESS OF EP TO ISPLINK\nPARMS    DS    7A                      PARM LIST FOR CALL\nUSERID   DS    CL8                     RACF USER ID\nOWNER    DS    CL8                     RACF OWNER\nUPDOWNR  DS    CL8                     RACF OWNER\nDFLTGRP  DS    CL8                     RACF DFLTGRP\nUPDDFLT  DS    CL8                     RACF DFLTGRP\nREVOKE   DS    CL8                     RACF REVOKE DATE\nUPDREV   DS    CL8                     RACF REVOKE DATE\nRESUME   DS    CL8                     RACF RESUME DATE\nUPDRES   DS    CL8                     RACF RESUME DATE\nCNCTGRP1 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP1    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH1   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC1   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV1    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES1    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP2 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP2    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH2   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC2   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV2    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES2    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP3 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP3    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH3   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC3   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV3    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES3    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP4 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP4    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH4   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC4   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV4    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES4    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP5 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP5    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH5   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC5   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV5    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES5    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP6 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP6    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH6   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC6   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV6    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES6    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP7 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP7    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH7   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC7   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV7    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES7    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP8 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP8    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH8   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC8   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV8    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES8    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRP9 DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRP9    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTH9   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACC9   DS    CL8                     USER'S CONNECT GROUP UACC\nCREV9    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRES9    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPA DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPA    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHA   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCA   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVA    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESA    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPB DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPB    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHB   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCB   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVB    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESB    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPC DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPC    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHC   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCC   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVC    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESC    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPD DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPD    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHD   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCD   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVD    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESD    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPE DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPE    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHE   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCE   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVE    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESE    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nCNCTGRPF DS    0CL40                   USER'S CONNECT GROUP INFORMATION\nCGRPF    DS    CL8                     USER'S CONNECT GROUP NAME\nCAUTHF   DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nCUACCF   DS    CL8                     USER'S CONNECT GROUP UACC\nCREVF    DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nCRESF    DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP1 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP1  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH1 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC1 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV1  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES1  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP2 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP2  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH2 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC2 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV2  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES2  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP3 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP3  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH3 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC3 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV3  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES3  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP4 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP4  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH4 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC4 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV4  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES4  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP5 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP5  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH5 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC5 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV5  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES5  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP6 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP6  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH6 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC6 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV6  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES6  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP7 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP7  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH7 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC7 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV7  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES7  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP8 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP8  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH8 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC8 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV8  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES8  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRP9 DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRP9  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTH9 DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACC9 DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREV9  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRES9  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPA DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPA  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHA DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCA DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVA  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESA  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPB DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPB  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHB DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCB DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVB  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESB  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPC DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPC  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHC DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCC DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVC  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESC  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPD DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPD  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHD DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCD DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVD  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESD  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPE DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPE  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHE DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCE DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVE  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESE  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nUPDCGRPF DS    0CL40                   USER'S CONNECT GROUP NAME\nUPDGRPF  DS    CL8                     USER'S CONNECT GROUP NAME\nUPDAUTHF DS    CL8                     USER'S CONNECT GROUP AUTHORITY\nUPDUACCF DS    CL8                     USER'S CONNECT GROUP UACC\nUPDREVF  DS    CL8                     USER'S CONNECT GROUP REVOKE DATE\nUPDRESF  DS    CL8                     USER'S CONNECT GROUP RESUME DATE\nFNAME    DS    CL20                    USER'S FIRST NAME\nUPDFNAM  DS    CL20                    USER'S FIRST NAME\nLNAME    DS    CL20                    USER'S LAST NAME\nUPDLNAM  DS    CL20                    USER'S LAST NAME\nNAME     DS    CL20                    USER'S NAME\nRACFATT0 DS    CL12                    SPECIAL / NOSPECIAL RACF ATTR\nUPDRAT0  DS    CL12                    SPECIAL / NOSPECIAL RACF ATTR\nRACFATT1 DS    CL12                    OPERATIONS / NOOPERATIONS RACF\nUPDRAT1  DS    CL12                    OPERATIONS / NOOPERATIONS RACF\nRACFATT2 DS    CL12                    AUDITOR / NOAUDITOR RACF ATTR\nUPDRAT2  DS    CL12                    AUDITOR / NOAUDITOR RACF ATTR\nRACFATT3 DS    CL12                    REVOKED INDICATION\nUSERDATA DS    CL70                    RACF USER DEFINED DATA\nUPDDATA  DS    CL70                    RACF USER DEFINED DATA\nROOM     DS    CL4                     USER'S ROOM NUMBER\nUPDROOM  DS    CL4                     USER'S ROOM NUMBER\nEXTENS   DS    CL4                     USER'S PHONE EXTENSION\nUPDEXT   DS    CL4                     USER'S PHONE EXTENSION\nUSERMSGS DS    CL24                    SHORT VERSION OF ISPF ERROR MSG\nUSERMSGL DS    CL78                    LONG VERSION OF ISPF ERROR MSG\nUPDCMD   DS    CL80                    UPDATING COMMAND\nRACF$    DS    CL1                     ADMIN RACF USER\nRACF1    DS    CL1                     REG 1 RACF USER\nRACF2    DS    CL1                     REG 2 RACF USER\nRACF3    DS    CL1                     REG 3 RACF USER\nRACF4    DS    CL1                     REG 4 RACF USER\nRACF5    DS    CL1                     REG 5 RACF USER\nRACF6    DS    CL1                     REG 6 RACF USER\nRACF7    DS    CL1                     REG 7 RACF USER\nRACF8    DS    CL1                     REG 8 RACF USER\nRTFLAG   DS    CL1                     INDICATES RACF OR TSO COMMAND\nISPFSERV DS    CL8                     ISPF SERVICE ROUTINE ID\nISPFRC   DS    CL2                     ISPF SERVICE ROUTINE RETURN CODE\nWORKLEN  EQU   *-WORKAREA\n         END   USRUPD3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VFYGROUP": {"ttr": 23046, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00h\\x00h\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 104, "newlines": 104, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'VFYGROUP - VERIFY PGM GROUP MEMBER'\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = VFYGROUP                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME = VERIFY PGM GROUP MEMBER              *\n*                                                                     *\n*             FUNCTION =                                              *\n*                VERIFY THAT THE USER IS A MEMBER OF THE              *\n*                PGM GROUP.                                           *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SAVE REGISTERS AND ESTABLISH ADDRESSABILITY       *\n*                   GET ASCB ADDRESSABILITY                           *\n*                   GET ASXB ADDRESSABILITY                           *\n*                   DROP ASCB ADDRESSABILITY                          *\n*                   GET ACEE ADDRESSABILITY                           *\n*                   DROP ASXB ADDRESSABILITY                          *\n*                   GET CGRP ADDRESSABILITY                           *\n*                   SEARCH TABLE OF GROUP NAMES FOR 'PGM'             *\n*                   IF 'PGM' NOT FOUND, SET RC=8                      *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  1       = PARAMETER LIST POINTER       *\n*                    REGISTER  2       = ASCB AND LATER ACEE\n*                                        ADDRESSABILITY               *\n*                    REGISTER  3       = WORK REGISTER                *\n*                    REGISTER  4       = UNUSED                       *\n*                    REGISTER  5       = ASXB ADDRESSABILITY          *\n*                    REGISTERS 6 - 9   = WORK REGISTERS               *\n*                    REGISTERS 10 - 11 = UNUSED                       *\n*                    REGISTER  12      = BASE REGISTER                *\n*                    REGISTER  13      = SAVE AREA POINTER            *\n*                    REGISTER  14      = RETURN ADDRESS               *\n*                    REGISTER  15      = ENTRY POINT ADDRESS AND      *\n*                                        RETURN CODE REGISTER         *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, RETURN, EQUATE                                 *\n*                                                                     *\n*             MAPPING MACROS USED =                                   *\n*                IHAACEE       ACEE MAP                               *\n*                IHAASCB       ASCB MAP                               *\n*                IHAASXB       ASXB MAP                               *\n*                ICHPCGRP      CGRP MAP (INCORRECT SINCE 1.6)         *\n*                                                                     *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                11/04/83  WRITTEN.      BC.                          *\n*                07/11/84  MODIFIED FOR RACF 1.6 CGRP MACRO.    BC.   *\n*                08/13/84  CORRECT ICHPCGRP MACRO IS IN               *\n*                            SYS1.AMACLIB.  CHANGED PROGRAM           *\n*                            BACK TO USE THE ICHPCGRP DSECT.    BC.   *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nVFYGROUP CSECT\n         SAVE  (14,12),,VFYGROUP_DELUXE_CHECK_&SYSDATE_&SYSTIME\n         LR    R12,R15\n         USING VFYGROUP,R12            ESTABLISH ADDRESSABILITY\n         L     R2,16                   GET ADDRESS OF CVT\n         L     R2,0(R2)                GET ADDR OF TCB ADDRESS WORD\n         L     R2,12(R2)               GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R2                 ESTABLISH ADDRESSABILITY TO ASCB\n         L     R5,ASCBASXB             GET ADDRESS OF ASXB\n         DROP  R2                      DROP ASCB ADDRESSABILITY\n         USING ASXB,R5                 ESTABLISH ADDRESSABILITY TO ASXB\n         L     R2,ASXBSENV             GET ADDRESS OF ACEE\n         DROP  R5                      DROP ASXB ADDRESSABILITY\n         USING ACEE,R2                 ESTABLISH ADDRESSABILITY TO ACEE\n         L     R5,ACEECGRP             GET ADDRESS OF CGRP\n         DROP  R2                      DROP ACEE ADDRESSABILITY\n         USING CGRP,R5                 ESTABLISH ADDRESSABILITY TO CGRP\n         LA    R2,CGRPENT              GET ADDR OF BEG OF GROUP NAMES\n         SLR   R3,R3                   CLEAR OUT REGISTER 3\n         ICM   R3,B'0011',CGRPNUM      GET MAXIMUM # OF ENTRIES\n         SLR   R15,R15                 CLEAR OUT REGISTER 15\nCHKGRP   EQU   *\n         CLC   0(4,R2),=CL4'PGM'       MEMBER OF PGM GROUP?\n         BE    EXIT                    IF SO, EXIT WITH 0 RETURN CODE\n         LA    R2,L'CGRPENT(R2)        GO TO NEXT ENTRY\n         BCT   R3,CHKGRP               AND LOOP\n         LA    R15,8                   IF NO MATCH, SET RCODE TO 8\nEXIT     EQU   *\n         RETURN (14,12),RC=(15)\n         LTORG\n*\n*  REGISTER EQUATES\n*\n         EQUATE\n*\n*\n*  DSECTS\n*\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         ICHPCGRP\n*\n         END   VFYGROUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHERE": {"ttr": 23049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x012\\x012\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 306, "newlines": 306, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TSO WHERE COMMAND'\n**********************************************************************\n*  NAME        -   WHERE                                             *\n*                                                                    *\n*  FUNCTION    -   TO DISPLAY ALL THE LOCATIONS (VOLSERS) OF A       *\n*                  TAPE OR DISK DATASET                              *\n*                                                                    *\n*  VERSION     -   MVS/XA ONLY                                       *\n*                                                                    *\n*  DATE        -   12/30/80 - REVISED TO ELIMINATE PROTECTION STATUS *\n*              -   03/11/85 - REMOVED NON-IBM MACROS                 *\n*              -   03/11/85 - ALTERED UCB ACCESS TO BE RUN UNDER XA  *\n*                                                                    *\n*  INPUT       -   R1->CPPL                                          *\n*                                                                    *\n*  OUTPUT      -   CATALOG INFORMATION   VOLSER  TYPE SEQ #          *\n*                  VTOC    INFORMATION   VOLSER  TYPE SEQ #          *\n*                                                                    *\n*  ENTRY       -   CSECT WHERE AS ATTACHED BY TMP AS A CP            *\n*                                                                    *\n*  ATTRIBUTES  -   REENTRANT, REUSABLE & REFRESHABLE                 *\n*                                                                    *\n*  LOGIC       -   1. EXTRACT OPERAND FROM CIB                       *\n*                  2. EXTRACT CATALOG INFORMATION VIA LOCATE         *\n*                  3. EXTRACT VTOC INFORMATION VIA OBTAIN            *\n*                  4. OUTPUT RESULTS TO TERMINAL USER                *\n*                                                                    *\n*  ERRORS      -   INVALID OPERAND  -ONE OF THE FOLLOWING:           *\n*                                      1. OPERAND LENGTH = 0         *\n*                                      2. OPERAND LENGTH > 44        *\n*                                                                    *\n*  AUTHOR      -   C. LYONS - 10/78                                  *\n*                                                                    *\n*  MACROS      -   LOCATE, TPUT, OBTAIN                              *\n*                                                                    *\n*  DSECTS      -   NONE                                              *\n*                                                                    *\n*  SYNTAX      -   WHERE  DSNAME                                     *\n*                                 -IF DSN NOT IN QUOTES,             *\n*                                 THEN USERID PREFIXED               *\n*                                                                    *\n*  INSTALL     -   ASSEMBLE WHERE                                    *\n*                  LINK WHERE                                        *\n*                  PLACE WHERE IN LINKLIST LIBRARY OR PLPA           *\n**********************************************************************\nWHERE    CSECT\n**********************************************************************\n*  GENERAL REGISTER EQUATES\n**********************************************************************\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         PRINT NOGEN\n         DS    0H                  ALLIGN FOR FOLLOWING USING STMT\n         SAVE  (14,12),,WHERE_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                  SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         USING WHERE,R12           ESTABLISH ADDRESSABILITY\n         LA    R11,4095(R12)       R11 - ENTRY ADDRESS + 4095\n         USING WHERE+4095,R11      ESTABLISH ADDRESSABILITY TO\n*                                  REST OF PROGRAM\n         GETMAIN R,LV=WORKLEN      GET MAIN DYNAMIC WORK AREA\n         ST    R13,4(R1)           SAVE ADDRESS OF CALLER'S SAVEAREA\n         ST    R1,8(R13)           ESTABLISH BACKWARD POINTER\n         LR    R0,R1               SAVE ADDRESS TO PROGRAM SAVEAREA\n         LR    R1,R13              ADDR OF CALLER'S SAVEAREA TO R1\n         LR    R13,R0              R13 - ADDRESS OF PROGRAM SAVEAREA\n         LM    0,1,20(R1)          RESTORE R0/R1 FROM CALLER'S SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n*\n*  INITIALIZE FINDSN, VOLCHK, CATLINE  & VTOCLINE\n*\n         MVC   FINDFLGS,FLAGS1         FLAGS INDICATING FUNCTION\n         LA    R3,DSN                  ADDRESS OF DSN\n         ST    R3,FINDDSN                 STORED IN FINDSN\n         SLR   R3,R3                   CLEAR REGISTER 3\n         ST    R3,FINDVOL                 AND FINDVOL\n         LA    R3,WORK                 ADDRESS OF WORK\n         ST    R3,FINDWORK                STORED IN FINDSN\n         MVC   VOLFLGS,FLAGS2          FLAGS INDICATING FUNCTION\n         LA    R3,DSN                  ADDRESS OF DSN\n         ST    R3,VOLDSN                  STORED IN VOLCHK\n         LA    R3,VOLSER               ADDRESS OF VOLSER\n         ST    R3,VOLVOL                  STORED IN VOLCHK\n         LA    R3,WORK                 ADDRESS OF WORK\n         ST    R3,VOLWORK                 STORED IN VOLCHK\n         MVC   CATLINE(55),SPACES      INITIALIZE CATLINE\n         MVC   VTOCLINE(55),SPACES     INITIALIZE VTOCLINE\n         MVC   DSN(44),SPACES          INITIALIZE DSN\n         MVC   VOLSER(6),SPACES        INITIALIZE VOLSER\n*\n*  EXTRACT OPERAND FROM CIB\n*\n         L     R3,0(0,R1)          R3->CIB\n         LA    R9,4                GET OPERAND LENGTH\n         AH    R9,2(0,R3)          CIB  =\n         LH    R7,0(0,R3)                +0  = TOTAL LENGTH\n         LA    R3,0(R9,R3)               +2  = COMMAND LENGTH\n         SR    R7,R9                     +4  = COMMAND\n         BZ    ERROR                     +N  = OPERAND(S)\n         LA    R9,44               R7=L'OPERAND\n         CR    R7,R9               IF R7 > 44 THEN GO TO ERROR\n         BH    ERROR\n         BCTR  R7,0                R7=R7-1\n         EX    R7,ALTCHAR          CIB=UPPERCASE(CIB_OPERAND)\n         CLI   0(R3),C''''         QUOTES SPECIFIED?\n         BNE   NOQUOTES            NO, THEN PREFIX USERID\n         LA    R9,0(R7,R3)         END OF DSN\n         CLI   0(R9),C''''         MATCHING QUOTE\n         BNE   BADEND              NO, ASSUME ENDING QUOTE\n         BCTR  R7,0                GET\nBADEND   BCTR  R7,0                   LENGTH FOR MOVE\n         EX    R7,MOVEDSN\n         B     LOCATE              CHECK CATALOG\nNOQUOTES L     R9,16               CVT\n         L     R9,0(0,R9)          TCB WORDS\n         L     R9,4(0,R9)          TCB\n         L     R9,X'B4'(0,R9)      JSCB\n         L     R9,X'108'(0,R9)     PSCB\n         SR    R10,R10\n         IC    R10,7(0,R9)         L'USERID\n         LR    R15,R10\n         AR    R15,R7              GET COMBINED LENGTH\n         LA    R14,42              ACCOUNT FOR R7 AND PERIOD\n         CR    R15,R14\n         BH    ERROR               CONSTRUCTED DSN MUST BE < = 44\n         LA    R15,DSN(R10)        PAST USERID.\n         BCTR  R10,0\n         EX    R10,*+4\n         MVC   DSN(*-*),0(R9)      MOVE USERID\n         MVI   0(R15),C'.'\n         EX    R7,*+4              MOVE REMAINDER\n         MVC   1(*-*,R15),0(R3)\n*\n*  EXTRACT CATALOG INFORMATION VIA LOCATE SVC\n*\nLOCATE   LOCATE FINDSN\n         LR    R3,R15              SAVE CONDITION CODE\n         TPUT  DSN,44              PRINT DSN\n         TPUT  BLANKS,1            PRINT BLANK LINE\n         LTR   R3,R3               CHECK LOCATE CONDITION CODE\n         BNZ   UCBS                IF RC NE 0 THEN GO TO UCBS\n         MVI   HITSW,1             SAY DATASET FOUND\n         TPUT  CATHEAD,55          DISPLAY HEADING\n         LH    R3,WORK             GET NUMBER OF VOLUMES\n         LA    R4,WORK+2           -> FIRST 12 BYTE ENTRY\nCATVOLS  TM    2(R4),X'20'         DASD?  - CHECK DEVCODE\n         BZ    TYPE80\n         MVC   DEVTYP,DASD         SAY DASD IF SO\n         B     MOVEVOL\nTYPE80   MVC   DEVTYP,TAPE         SAY TAPE IF SO\nMOVEVOL  MVC   CVOL(6),4(R4)       MOVE VOLSER TO DISPLAY LINE\n         MVC   SEQNUM(1),11(R4)    GET SEQUENCE NUMBER (ASSUME < 9)\n         OI    SEQNUM,X'F0'        CONVERT TO DISPLAY\n         TPUT  CATLINE,55          DISPLAY ON TERMINAL\n         LA    R4,12(0,R4)         NEXT ENTRY\n         BCT   R3,CATVOLS          LOOP THROUGH ALL ENTRIES\n         CLC   DEVTYP,DASD         WAS IT DASD?\n         BNE   EXIT                NO, EXIT\n*\n*  EXTRACT VTOC INFORMATION - OBTAIN FROM ALL ONLINE DA VOLS\n*\nUCBS     SR    R5,R5               R5=0\n         L     R1,16               R1->CVT\n         USING CVT,R1              ESTABLISH ADDRESSABILITY TO CVT\n         L     R3,CVTUCBA          R3->1ST UCB IN CHAIN OF UCB'S\n         DROP  R1\n         USING UCB,R3              ESTABLISH ADDRESSABILITY TO UCB\nUCBSCAN  EQU   *\n         TM    UCBTBYT3,UCB3DACC   IS DEVICE DIRECT ACCESS?\n         BZ    NEXTUCB             IF DEVICE NE DA THEN GO TO NEXTUCB\n         TM    UCBSTAT,UCBONLI     IS DEVICE ONLINE?\n         BZ    NEXTUCB             IF DEVICE OFFLINE GO TO NEXTUCB\n         TM    UCBVOLI,X'FF'       IS A VOLUME MOUNTED?\n         BZ    NEXTUCB             IF NO VOLUME MOUNTED GO TO NEXTUCB\n         CR    R3,R5               ALTERNATE CHANNEL CONSIDERATION?\n         BNH   NEXTUCB             YES, OMIT THIS UCB\n         MVC   VOLSER,UCBVOLI      VOLSER=UCB_VOLSER\n         OBTAIN VOLCHK             SEARCH VOLUME FOR DSN\n         BXH   R15,R15,NEXTUCB     IF RC NE 0 THEN GO TO NEXTUCB\n         SR    R1,R1\n         CR    R5,R1               SEE IF HEADING DESIRED\n         BNE   NOHEAD              IF R5 NE 0 THEN NO HEADING\n         TPUT  BLANKS,1            BLANK LINE\n         TPUT  VTOCHEAD,70         VTOC HEADING\nNOHEAD   LR    R5,R3               SAVE FOR NEXT COMPARISON\n         MVI   HITSW,1             SAY DATASET FOUND\n         MVC   VSEQ(1),WORK+8      GET SEQ NUM FROM F1 DSCB\n         OI    VSEQ,X'F0'          CONVERT TO DISPLAY (ASSUME < 9)\n         LA    R2,8                DETERMINE DATA SET ORGANIZATION\n         IC    R1,WORK+38          GET DS1DSORG\n         SLL   R1,24               ISOLATE BIT FLAGS\nFLAGTEST LTR   R1,R1               TEST FOR FLAG ON OR OFF\n         BM    FLAGON              IF R1 NEGATIVE, FLAG ON\n         SLL   R1,1                LOOK AT NEXT FLAG\n         BCT   R2,FLAGTEST         ASSUME MUTUAL EXCLUSIVITY\n         MVC   DSORG,=C'UK'        IF WE GET HERE, NO FLAG WAS SET\n         B     PRINT               DISPLAY ON TERMINAL\nFLAGON   BCTR R2,0                 GET INDEX\n         MH    R2,=H'6'            GET DISPLACEMENT\n         EX    R0,DSTABLE(R2)      PERFORM PROPER MOVE\nPRINT    TPUT  VTOCLINE,55         DISPLAY\nNEXTUCB  EQU   *\n         L     R3,UCBNXUCB         R3->NEXT UCB IN UCB CHAIN\n         LTR   R3,R3               IS THIS THE LAST UCB IN THE CHAIN?\n         BZ    EXIT                YES, FINISH\n         USING UCB,R3              ESTABLISH ADDRESSABILITY TO UCB\n         B     UCBSCAN\nERROR    TPUT  ERRMSG,30           DISPLAY INVALID OPERAND\n         B     FIN                 TERMINATE\nEXIT     CLI   HITSW,1             WAS DATASET FOUND?\n         BE    FIN                 YES, TERMINATE\n         TPUT  NOLOC,30            SAY DATASET CAN NOT BE LOCATED\nFIN      EQU   *\n         LA    R0,WORKLEN              R0 - LENGTH OF WORKAREA\n         LR    R1,R13                  R1 - ADDRESS OF WORKAREA\n         L     R13,4(R13)          RESTORE ADDR OF CALLER'S SAVEAREA\n         FREEMAIN R,LV=(0),A=(1)\n         LA    R15,0               SET RETURN CODE\n         RETURN (14,12),,RC=(15)       RESTORE REGISTERS AND RETURN\n         TITLE 'PARAMETER LISTS AND CONSTANTS'\nALTCHAR  OC    0(*-*,R3),BLANKS          TO FORCE UPPER CASE\nMOVEDSN  MVC   DSN(*-*),1(R3)            TO EXTRACT DATASET NAME\nBLANKS   DC    CL44' '                   CONSTANT OF BLANKS\nSPACES   DC    CL80' '                   CONSTANT OF SPACES\nERRMSG   DC    CL30'INVALID OPERAND'     BAD INPUT MESSAGE\nNOLOC    DC    CL30'DATASET NOT FOUND'   CAN'T FIND MESSAGE\nCATHEAD  DC    CL55'CATALOG INFORMATION:      VOLSER  TYPE  SEQUENCE NU$\n               MBER'\nVTOCHEAD DC    CL55'VTOC    INFORMATION:      VOLSER  TYPE  SEQUENCE NU$\n               MBER'\nDASD     DC    CL4'DASD'                 DASD TYPE CONSTANT\nTAPE     DC    CL4'TAPE'                 TAPE TYPE CONSTANT\nFLAGS1   DS    0F                        FLAGS FOR LOCATE\n         DC    AL1(68)\n         DC    AL1(0)\n         DC    AL1(0)\n         DC    AL1(0)\nFLAGS2   DS    0F                        FLAGS FOR OBTAIN\n         DC    AL1(193)\n         DC    AL1(0)\n         DC    AL1(0)\n         DC    AL1(0)\n*\n*  MAPPING MACROS\n*\n         CVT   DSECT=YES,PREFIX=NO\nWHERE    CSECT\nUCB      DSECT\n         IEFUCBOB LIST=YES\nWHERE    CSECT\nDSTABLE  MVC   DSORG,=C'UM'              X'01' = UNMOVABLE\n         MVC   DSORG,=C'P0'              X'02' = PARTITIONED\n         MVC   DSORG,=C'MQ'              X'03' = QTAM MESSAGE QUEUE\n         MVC   DSORG,=C'CQ'              X'04' = QTAM MESSAGE QUEUE\n         MVC   DSORG,=C'CX'              X'10' = BTAM OR QTAM LINE\n         MVC   DSORG,=C'DA'              X'20' = DIRECT ACCESS\n         MVC   DSORG,=C'PS'              X'40' = PHYSICAL SEQUENTIAL\n         MVC   DSORG,=C'IS'              X'80' = INDEXED SEQUENTIAL\nWORKAREA DSECT\nSAVEAREA DS    18F                     WHERE SAVE AREA\nDSN      DS    CL44                    HOLDS DATA SET NAME\nHITSW    DS    X                       TO INDICATE DATASET FOUND\nCATLINE  DS    CL55                    CATALOG DETAIL LINE\n         ORG   CATLINE+26\nCVOL     DS    CL6                     VOLSER\n         ORG   CATLINE+34\nDEVTYP   DS    CL4                     DEVICE TYPE\n         ORG   CATLINE+46\nSEQNUM   DS    CL1                     SEQUENCE NUMBER\n         ORG\nVTOCLINE DS    CL55                    VTOC DETAIL LINE\n         ORG   VTOCLINE+26\nVOLSER   DS    CL6                     VOLSER\n         ORG   VTOCLINE+35\nDSORG    DS    CL2                     DATASET ORGANIZATION\n         ORG   VTOCLINE+46\nVSEQ     DS    CL1                     SEQUENCE NUMBER\n         ORG\nWORK     DS    40D                     BUFFER FOR LOCATE AND OBTAIN\nFINDSN   DS    0F                      CAMLST FOR LOCATE\nFINDFLGS DS    A                       FLAGS FOR LOCATE\nFINDDSN  DS    A                       ADDR OF DSN FOR LOCATE\nFINDVOL  DS    A                       HEX ZERO'S - NOT USED\nFINDWORK DS    A                       ADDR OF WORK AREA FOR LOCATE\nVOLCHK   DS    0F                      CAMLST FOR OBTAIN\nVOLFLGS  DS    A                       FLAGS FOR OBTAIN\nVOLDSN   DS    A                       ADDR OF DSN FOR OBTAIN\nVOLVOL   DS    A                       ADDR OF VOLSER FOR OBTAIN\nVOLWORK  DS    A                       ADDR OF WORK AREA FOR OBTAIN\nWORKLEN  EQU   *-WORKAREA              LENGTH OF DYNAMIC WORKAREA\n         END   WHERE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHERE#1": {"ttr": 23300, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x00\\xd0\\x00\\xd0\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 208, "newlines": 208, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'TSO WHERE COMMAND'\n**********************************************************************\n*  NAME        -   WHERE                                             *\n*                                                                    *\n*  FUNCTION    -   TO DISPLAY ALL THE LOCATIONS (VOLSERS) OF A       *\n*                  TAPE OR DISK DATASET                              *\n*                                                                    *\n*  VERSION     -   1.0 FOR MVS 3.8 AND MVS/SE2                       *\n*                                                                    *\n*  DATE        -   12/30/80 - REVISED TO ELIMINATE PROTECTION STATUS *\n*                                                                    *\n*  INPUT       -   R1->CPPL                                          *\n*                                                                    *\n*  OUTPUT      -   CATALOG INFORMATION   VOLSER  TYPE SEQ #          *\n*                  VTOC    INFORMATION   VOLSER  TYPE SEQ #          *\n*                                                                    *\n*  ENTRY       -   CSECT WHERE AS ATTACHED BY TMP AS A CP            *\n*                                                                    *\n*  ATTRIBUTES  -   NON-REUSABLE                                      *\n*                                                                    *\n*  LOGIC       -   1. EXTRACT OPERAND FROM CIB                       *\n*                  2. EXTRACT CATALOG INFORMATION VIA LOCATE         *\n*                  3. EXTRACT VTOC INFORMATION VIA OBTAIN            *\n*                  4. OUTPUT RESULTS TO TERMINAL USER                *\n*                                                                    *\n*  ERRORS      -   INVALID OPERAND  -ONE OF THE FOLLOWING:           *\n*                                      1. OPERAND LENGTH = 0         *\n*                                      2. OPERAND LENGTH > 44        *\n*                                                                    *\n*  AUTHOR      -   C. LYONS - 10/78                                  *\n*                                                                    *\n*  MACROS      -   FULLSAVE,LOCATE,TPUT,OBTAIN,FULLRTRN,CAMLST       *\n*                                                                    *\n*  DSECTS      -   NONE                                              *\n*                                                                    *\n*  SYNTAX      -   WHERE  DSNAME                                     *\n*                                 -IF DSN NOT IN QUOTES,             *\n*                                 THEN USERID PREFIXED               *\n*                                                                    *\n*  INSTALL     -   ASSEMBLE WHERE                                    *\n*                  LINK WHERE                                        *\n*                  PLACE WHERE IN LINKLIST LIBRARY OR PLPA           *\n**********************************************************************\nWHERE    CSECT\n         REGS  R\n         FULLSAVE RENT=NO\n*\n*  EXTRACT OPERAND FROM CIB\n*\n         L     R3,0(0,R1)          R3->CIB\n         LA    R9,4                GET OPERAND LENGTH\n         AH    R9,2(0,R3)          CIB  =\n         LH    R7,0(0,R3)                +0  = TOTAL LENGTH\n         LA    R3,0(R9,R3)               +2  = COMMAND LENGTH\n         SR    R7,R9                     +4  = COMMAND\n         BZ    ERROR                     +N  = OPERAND(S)\n         LA    R9,44               R7=L'OPERAND\n         CR    R7,R9               IF R7 > 44 THEN GO TO ERROR\n         BH    ERROR\n         BCTR  R7,0                R7=R7-1\n         EX    R7,ALTCHAR          CIB=UPPERCASE(CIB_OPERAND)\n         CLI   0(R3),C''''         QUOTES SPECIFIED?\n         BNE   NOQUOTES            NO, THEN PREFIX USERID\n         LA    R9,0(R7,R3)         END OF DSN\n         CLI   0(R9),C''''         MATCHING QUOTE\n         BNE   BADEND              NO, ASSUME ENDING QUOTE\n         BCTR  R7,0                GET\nBADEND   BCTR  R7,0                   LENGTH FOR MOVE\n         EX    R7,MOVEDSN\n         B     LOCATE              CHECK CATALOG\nNOQUOTES L     R9,16               CVT\n         L     R9,0(0,R9)          TCB WORDS\n         L     R9,4(0,R9)          TCB\n         L     R9,X'B4'(0,R9)      JSCB\n         L     R9,X'108'(0,R9)     PSCB\n         SR    R10,R10\n         IC    R10,7(0,R9)         L'USERID\n         LR    R15,R10\n         AR    R15,R7              GET COMBINED LENGTH\n         LA    R14,42              ACCOUNT FOR R7 AND PERIOD\n         CR    R15,R14\n         BH    ERROR               CONSTRUCTED DSN MUST BE < = 44\n         LA    R15,DSN(R10)        PAST USERID.\n         BCTR  R10,0\n         EX    R10,*+4\n         MVC   DSN(*-*),0(R9)      MOVE USERID\n         MVI   0(R15),C'.'\n         EX    R7,*+4              MOVE REMAINDER\n         MVC   1(*-*,R15),0(R3)\n*\n*  EXTRACT CATALOG INFORMATION VIA LOCATE SVC\n*\nLOCATE   LOCATE FINDSN\n         LR    R3,R15              SAVE CONDITION CODE\n         TPUT  DSN,44              PRINT DSN\n         TPUT  BLANKS,1            PRINT BLANK LINE\n         LTR   R3,R3               CHECK LOCATE CONDITION CODE\n         BNZ   UCBS                IF RC NE 0 THEN GO TO UCBS\n         MVI   HITSW,1             SAY DATASET FOUND\n         TPUT  CATHEAD,55          DISPLAY HEADING\n         LH    R3,WORK             GET NUMBER OF VOLUMES\n         LA    R4,WORK+2           -> FIRST 12 BYTE ENTRY\nCATVOLS  TM    2(R4),X'20'         DASD?  - CHECK DEVCODE\n         BZ    TYPE80\n         MVC   DEVTYP,DASD         SAY DASD IF SO\n         B     MOVEVOL\nTYPE80   MVC   DEVTYP,TAPE         SAY TAPE IF SO\nMOVEVOL  MVC   CVOL(6),4(R4)       MOVE VOLSER TO DISPLAY LINE\n         MVC   SEQNUM(1),11(R4)    GET SEQUENCE NUMBER (ASSUME < 9)\n         OI    SEQNUM,X'F0'        CONVERT TO DISPLAY\n         TPUT  CATLINE,55          DISPLAY ON TERMINAL\n         LA    R4,12(0,R4)         NEXT ENTRY\n         BCT   R3,CATVOLS          LOOP THROUGH ALL ENTRIES\n         CLC   DEVTYP,DASD         WAS IT DASD?\n         BNE   EXIT                NO, EXIT\n*\n*  EXTRACT VTOC INFORMATION - OBTAIN FROM ALL ONLINE DA VOLS\n*\nUCBS     SR    R5,R5               R5=0\n         L     R1,16               R1->CVT\n         L     R3,40(0,R1)         R3->UCB_LOOKUP_TABLE\nUCBSCAN  LH    R4,0(0,R3)          R4->UCB\n         LTR   R4,R4\n         BZ    NEXTUCB             IF R4 EQ 0 THEN GO TO NEXTUCB\n         BM    EXIT                IF R4 LT 0 THEN GO TO EXIT\n         TM    X'12'(R4),X'20'\n         BZ    NEXTUCB             IF DEVICE NE DA THEN GO TO NEXTUCB\n         TM    X'3'(R4),X'80'\n         BZ    NEXTUCB             IF DEVICE OFFLINE GO TO NEXTUCB\n         TM    X'1C'(R4),X'FF'\n         BZ    NEXTUCB             IF NO VOLUME MOUNTED GO TO NEXTUCB\n         CR    R4,R5               ALTERNATE CHANNEL CONSIDERATION?\n         BNH   NEXTUCB             YES, OMIT THIS UCB\n         MVC   VOLSER,28(R4)       VOLSER=UCB_VOLSER\n         OBTAIN VOLCHK             SEARCH VOLUME FOR DSN\n         BXH   R15,R15,NEXTUCB     IF RC NE 0 THEN GO TO NEXTUCB\n         SR    R1,R1\n         CR    R5,R1               SEE IF HEADING DESIRED\n         BNE   NOHEAD              IF R5 NE 0 THEN NO HEADING\n         TPUT  BLANKS,1            BLANK LINE\n         TPUT  VTOCHEAD,70         VTOC HEADING\nNOHEAD   LR    R5,R4               SAVE FOR NEXT COMPARISON\n         MVI   HITSW,1             SAY DATASET FOUND\n         MVC   VSEQ(1),WORK+8      GET SEQ NUM FROM F1 DSCB\n         OI    VSEQ,X'F0'          CONVERT TO DISPLAY (ASSUME < 9)\n         LA    R2,8                DETERMINE DATA SET ORGANIZATION\n         IC    R1,WORK+38          GET DS1DSORG\n         SLL   R1,24               ISOLATE BIT FLAGS\nFLAGTEST LTR   R1,R1               TEST FOR FLAG ON OR OFF\n         BM    FLAGON              IF R1 NEGATIVE, FLAG ON\n         SLL   R1,1                LOOK AT NEXT FLAG\n         BCT   R2,FLAGTEST         ASSUME MUTUAL EXCLUSIVITY\n         MVC   DSORG,=C'UK'        IF WE GET HERE, NO FLAG WAS SET\n         B     PRINT               DISPLAY ON TERMINAL\nFLAGON   BCTR R2,0                 GET INDEX\n         MH    R2,=H'6'            GET DISPLACEMENT\n         EX    R0,DSTABLE(R2)      PERFORM PROPER MOVE\nPRINT    TPUT  VTOCLINE,55         DISPLAY\nNEXTUCB  LA    R3,2(0,R3)          R3->NEXT UCB_LOOKUP_TABLE ENTRY\n         B     UCBSCAN             LOOP THROUGH UCBS\nERROR    TPUT  ERRMSG,30           DISPLAY INVALID OPERAND\n         B     FIN                 TERMINATE\nEXIT     CLI   HITSW,1             WAS DATASET FOUND?\n         BE    FIN                 YES, TERMINATE\n         TPUT  NOLOC,30            SAY DATASET CAN NOT BE LOCATED\nFIN      FULLRTRN RENT=NO\n         TITLE 'PARAMETER LISTS AND CONSTANTS'\nFINDSN   CAMLST NAME,DSN,,WORK           CAMLST FOR LOCATE\nVOLCHK   CAMLST SEARCH,DSN,VOLSER,WORK   CAMLST FOR OBTAIN\nALTCHAR  OC    0(*-*,R3),BLANKS          TO FORCE UPPER CASE\nMOVEDSN  MVC   DSN(*-*),1(R3)            TO EXTRACT DATASET NAME\nHITSW    DC    X'0'                      TO INDICATE DATASET FOUND\nBLANKS   DC    CL44' '                   CONSTANT OF BLANKS\nERRMSG   DC    CL30'INVALID OPERAND'     BAD INPUT MESSAGE\nNOLOC    DC    CL30'DATASET NOT FOUND'   CAN'T FIND MESSAGE\nDSN      DC    CL44' '                   HOLDS DATA SET NAME\nCATHEAD  DC    CL55'CATALOG INFORMATION:      VOLSER  TYPE  SEQUENCE NU$\n               MBER'\nVTOCHEAD DC    CL55'VTOC    INFORMATION:      VOLSER  TYPE  SEQUENCE NU$\n               MBER'\nCATLINE  DC    CL55' '                   CATALOG DETAIL LINE\n         ORG   CATLINE+26\nCVOL     DS    CL6                       VOLSER\n         ORG   CATLINE+34\nDEVTYP   DS    CL4                       DEVICE TYPE\n         ORG   CATLINE+46\nSEQNUM   DS    CL1                       SEQUENCE NUMBER\n         ORG\nVTOCLINE DC    CL55' '                   VTOC DETAIL LINE\n         ORG   VTOCLINE+26\nVOLSER   DS    CL6                       VOLSER\n         ORG   VTOCLINE+35\nDSORG    DS    CL2                       DATASET ORGANIZATION\n         ORG   VTOCLINE+46\nVSEQ     DS    CL1                       SEQUENCE NUMBER\n         ORG\nDASD     DC    CL4'DASD'                 DASD TYPE CONSTANT\nTAPE     DC    CL4'TAPE'                 TAPE TYPE CONSTANT\nWORK     DS    40D                       BUFFER FOR LOCATE AND OBTAIN\nDSTABLE  MVC   DSORG,=C'UM'              X'01' = UNMOVABLE\n         MVC   DSORG,=C'P0'              X'02' = PARTITIONED\n         MVC   DSORG,=C'MQ'              X'03' = QTAM MESSAGE QUEUE\n         MVC   DSORG,=C'CQ'              X'04' = QTAM MESSAGE QUEUE\n         MVC   DSORG,=C'CX'              X'10' = BTAM OR QTAM LINE\n         MVC   DSORG,=C'DA'              X'20' = DIRECT ACCESS\n         MVC   DSORG,=C'PS'              X'40' = PHYSICAL SEQUENTIAL\n         MVC   DSORG,=C'IS'              X'80' = INDEXED SEQUENTIAL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XRXALLOC": {"ttr": 23304, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x873O\\x00\\x873O\\x12\\x00\\x02\\x02\\x02\\x02\\x00\\x00\\xc4\\xc5\\xd3\\xe4\\xe7\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-11-30T00:00:00", "modifydate": "1987-11-30T12:00:00", "lines": 514, "newlines": 514, "modlines": 0, "user": "DELUXE"}, "text": "         TITLE 'XRXALLOC - DYNAMIC SYSOUT DATA SET ALLOCATION'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = XRXALLOC                                       *\n*                                                                     *\n*        DESCRIPTIVE NAME = DYNAMIC SYSOUT DATA SET ALLOCATION        *\n*                                                                     *\n*        FUNCTION =                                                   *\n*              ALLOW USER TO SPECIFY FORMS NUMBER, DDNAME AND         *\n*              THE NUMBER OF COPIES PRINTED OF A SYSOUT DATA          *\n*              SET TO BE DYNAMICALLY ALLOCATED THROUGH TSO.           *\n*              IF NO DDNAME IS SPECIFIED, 'SYSPRINT' WILL BE          *\n*              USED. IF NO FORM NAME IS SPECIFIED, A FORM OF          *\n*              'STD' WILL BE USED. IF THE NUMBER OF COPIES IS         *\n*              NOT SPECIFIED, '1' WILL BE USED. THIS SYSOUT           *\n*              DATA SET WILL ALSO RETAIN A SYSOUT CLASS OF 'G'        *\n*              AND A SYSOUT DESTINATION OF 'ADMIN'. THE PRIMARY       *\n*              USE FOR THIS COMMAND PROCESSOR WILL BE ALLOCATING      *\n*              SYSOUT DATA SETS TO BE PRINTED ON THE XEROX 9700       *\n*              PRINTING SYSTEM.                                       *\n*              USER MAY SPECIFY 'REUSE' WHEN USING COMMAND TO         *\n*              FREE THE DDNAME IF IT IS ALREADY IN USE.               *\n*                                                                     *\n*        OPERATION =                                                  *\n*              SAVE REGISTERS AND ESTABLISH ADDRESSABILITY            *\n*              GETMAIN DYNAMIC STORAGE                                *\n*              GET KEYWORD VALUES FROM PARSE                          *\n*              IF DDNAME KEYWORD IS SPECIFIED, PUT VALUE INTO         *\n*                  SOUTDDNM TEXT UNIT (FOR DYNALLOC MACRO)            *\n*              IF FORM KEYWORD IS SPECIFIED, PUT VALUE INTO           *\n*                  SOUTFMNM TEXT UNIT (FOR DYNALLOC MACRO)            *\n*              IF COPY KEYWORD IS SPECIFIED, PUT VALUE INTO           *\n*                  SOUTCOPY TEXT UNIT (FOR DYNALLOC MACRO)            *\n*              IF REUSE KEYWORD IS SPECIFIED:                         *\n*                  BUILD SVC 99 REQUEST BLOCK FOR UNALLOCATION        *\n*                  BUILD TEXT UNIT POINTER LIST FOR DDNAME TO FREE    *\n*                  DEALLOCATE DATA SET USING DYNALLOC MACRO           *\n*              BUILD SVC 99 REQUEST BLOCK FOR DYNAMIC ALLOCATION      *\n*              BUILD TEXT UNIT POINTER LIST FOR SYSOUT DATASET        *\n*              ALLOCATE DATA SET USING DYNALLOC MACRO                 *\n*              FREEMAIN DYNAMIC STORAGE                               *\n*              RESTORE REGISTERS                                      *\n*              RETURN                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        NOTES =                                                      *\n*                                                                     *\n*              REGISTER CONVENTIONS = STANDARD CONVENTIONS.           *\n*                  REGISTER  0      = NOT USED                        *\n*                  REGISTER  1 - 2  = WORK REGISTERS                  *\n*                  REGISTER  3      = WORK REG & PARSE ADDRESSABILITY *\n*                  REGISTER  4      = WORK REG & KEYWORD ADDRESS      *\n*                  REGISTER  5      = WORK REG & KEYWORD VALUE        *\n*                  REGISTER  6      = WORK REG & KEYWORD LENGTH       *\n*                  REGISTER  7      = WORK REG & ADDR OF S99RBP       *\n*                  REGISTER  8      = ADDRESS OF REQUEST BLOCK        *\n*                  REGISTER  9      = ADDRESS OF TEXT UNIT PTR LIST   *\n*                  REGISTER  10     = ADDRESS OF CURRENT TEXT UNIT    *\n*                  REGISTER  11     = ADDRESS OF GNRLFAIL PARM LIST   *\n*                  REGISTER  12     = BASE REGISTER                   *\n*                  REGISTER  13     = SAVE AREA POINTER               *\n*                  REGISTER  14     = RETURN ADDRESS                  *\n*                  REGISTER  15     = ENTRY POINT ADDRESS             *\n*                                                                     *\n*        MACROS =                                                     *\n*              SAVE, RETURN, EQUATE, GETMAIN, FREEMAIN, CALLTSSR,     *\n*              IKJRLSA, DYNALLOC                                      *\n*                                                                     *\n*        MAPPING MACROS USED =                                        *\n*              IKJEFFGF, IKJCPPL, IKJPARM, IKJPPL, IEFZB4D0,          *\n*              IEFZB4D2, CVT, IKJIOPL                                 *\n*                                                                     *\n*        ASSEMBLER OPTIONS = LIST,RENT                                *\n*                                                                     *\n*        LINKAGE EDITOR OPTIONS = LET,LIST,XREF,RENT,REUS,REFR        *\n*                                                                     *\n*        COMMAND FORMAT =                                             *\n*+-------------------------------------------------------------------+*\n*+      XRXALLOC DDNAME(SYSPRINT) FORM(STD) COPY(001) (REUSE)        +*\n*+-------------------------------------------------------------------+*\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*              02/03/86  WRITTEN.                               JWC.  *\n*                                                                     *\n*              03/05/86  ADD 'COPY' KEYWORD.                    JWC.  *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        INITIALIZATION\n***********************************************************************\nXRXALLOC CSECT                         BEGINING OF PROGRAM\n         SAVE  (14,12),,XRXALLOC_DELUXE_CHECK_&SYSDATE_&SYSTIME\n*                                      SAVE REGISTERS\n         LR    R12,R15                 SET UP ADDRESSABILITY\n         USING XRXALLOC,R12            SET UP BASE REG\n         LR    R3,R1                   PRESERVE POINTER TO CPPL\n***********************************************************************\n*        GETMAIN DYNAMIC STORAGE\n***********************************************************************\nGETMAIN  DS    0H\n         GETMAIN R,LV=WORKLEN          GETMAIN DYNAMIC STORAGE\n         ST    R13,4(R1)               STORE ADDRESS PREVIOUS SAVEAREA\n         ST    R1,8(R13)               STORE ADDRESS OF CURRENT\n*                                      SAVEAREA IN PREVIOUS SAVEAREA\n         LR    R13,R1                  LOAD REG 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO\n*                                      DYNAMIC WORKAREA\n         GETMAIN R,LV=GFLENGF          GETMAIN GNRLFAIL PARM LIST\n         LR    R11,R1                  R11 - POINTER TO GFPARMS\n         USING GFDSECTD,R11            ADDRESSABILITY TO GFPARMS\n         ST    R3,GFCPPLP              CPPL PTR IN PARM LST TO GNRLFAIL\n         ST    R3,CPPLADDR             PRESERVE POINTER TO CPPL\n         MVC   SOUTDDNM(LSOUTDD),SOUTDD    INITIALIZE DD NAME TEXT UNIT\n         MVC   SOUTFMNM(LSOUTFM),SOUTFORM   INITIALIZE FORM TEXT UNIT\n         MVC   SOUTCPNM(LSOUTCP),SOUTCOPY   INITIALIZE COPY TEXT UNIT\n         MVI   RUSEFLAG,OFF            INITIALIZE DATA SET REUSE FLAG\n***********************************************************************\n*        BUILD PARSE PARAMETER LISTS USING COMMAND PROCESSOR\n*            PARAMETER LIST AND INITIALIZE INPUT/OUTPUT CONTROL\n*            BLOCKS IN WORKAREA\n***********************************************************************\nBLDPARSE DS    0H\n         L     R7,CPPLADDR             LOAD ADDRESS OF CPPL\n         USING CPPL,R7                 ESTABLISH ADDRESSABILITY TO CPPL\n         LA    R2,PPLSECT              LOAD ADDRESS OF PARSE PARM LIST\n         USING PPL,R2                  ESTABLISH ADDRESSABILITY TO PPL\n         LA    R3,IOPLSECT             LOAD ADDRESS OF I/O PARM LIST\n         USING IOPL,R3                 ESTABLISH ADDRESSABILITY TO IOPL\n         L     R4,CPPLUPT              LOAD PTR TO USER PROFILE TABLE\n*                                      FROM CPPL\n         L     R5,CPPLECT              LOAD PTR TO ENVIRONMENTAL\n*                                      CONTROL TABLE FROM CPPL\n         SLR   R6,R6                   ZERO REGISTER 7\n         ST    R6,ECB                  STORE REG AS ECB FOR PPL\n         LA    R6,ECB                  LOAD ADDRESS OF ECB\n         STM   R4,R6,PPLSECT           STORE ADDRESS OF UPT,ECT, AND\n*                                      ECB IN PPL\n         STM   R4,R6,IOPLSECT          STORE ADDRESS OF UPT,ECT, AND\n*                                      ECB IN IOPL\n         LA    R3,IOPB                 LOAD ADDRESS OF PUTLINE\n*                                      PARAMETER BLOCK\n         ST    R3,IOPLIOPB             STORE IOPB ADDRESS IN IOPL\n         MVC   PPLPCL,PCLADDR          MOVE PTR TO PARAMETER CONTROL\n*                                      LIST INTO PPL\n         LA    R4,PARSBACK             LOAD ADDRESS OF FULLWORD TO\n*                                      CONTAIN ADDRESS OF PDE RETURNED\n*                                      BY PARSE\n         ST    R4,PPLANS               STORE PTR TO RETURN ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE PTR TO CMD BUFFER INTO PPL\n         LA    R4,PPLUWA               LOAD ADDRESS OF USER WORKAREA\n         ST    R4,PPLUWA               STORE ADDRESS IN PPL\n         DROP  R3,R7,R2                DROP ADDRESSABILITY TO IOPL,\n*                                      CPPL AND PPL\n***********************************************************************\n*        CALLTSSR TO PARSE; ON RETURN PARSBACK ---> PDL\n*        USE GNRLFAIL SERVICE ROUTINE TO HANDLE ALL ERROR CODES\n***********************************************************************\nCALLTSSR DS    0H\n         CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)\n         LTR   R15,R15                 SEE IF RETURN CODE ZERO\n         BZ    PDLADDR                 YES, CONTINUE PROCESSING\n         C     R15,FULL04              IS PARSE RCODE = X'04'?\n         BE    SETABEND                YES, SET GFCALLID = GFABEND\n         C     R15,FULL20              IS PARSE RCODE = X'20'?\n         BE    SETABEND                YES, SET GFCALLID = GFABEND\n         MVI   GFCALLID+1,GFPARSE      PARSE SERVICE ROUTINE ERROR\n         B     GNRLFAIL                PROCESS ERROR CODE\nSETABEND DS    0H\n         MVI   GFCALLID+1,GFABEND      ISSUE ABEND MESSAGE\n***********************************************************************\n*        GENERAL FAIL SERVICE ROUTINE\n***********************************************************************\nGNRLFAIL DS    0H\n         ST    R15,GFRCODE             STORE RETURN CODE FOR GNRLFAIL\n         MVC   GFPGMNL(2),HALF08       PROGRAM LENGTH TO GNRLFAIL PARM\n         LA    R2,PGMNAME              R2 - ADDRESS OF PROGRAM NAME\n         ST    R2,GFPGMNP              ADDR OF PGMNAME TO GNRLFAIL PARM\n         LA    R2,GFPARMS              R2 - ADDRESS OF PARAMETER LIST\n         ST    R2,GFPADDR              STORE ADDRESS OF GFPARMS\n         LA    R2,GFPADDR              R2 - ADDR OF POINTER TO GFPARMS\n         LINK  EP=IKJEFF19,                                            +\n               MF=(E,(R2))             LINK TO GNRLFAIL TO PROCESS RC\n         LTR   R15,R15                 GNRLFAIL PROCESS OK?\n         BZ    FINISH                  YES, FREE STORAGE AND RETURN\n         ABEND 111                     OH NO! GNRLFAIL FAILED!!!\n***********************************************************************\n*        SET UP ADDRESSABILITY TO PDL\n***********************************************************************\nPDLADDR  DS    0H\n         L     R3,PARSBACK             LOAD PTR TO PARS ANSWER\n         USING IKJPARMD,R3             ESTABLISH ADDRESSABILITY TO PDL\n***********************************************************************\n*        CHECK VALUE OF 'DDNAME' KEYWORD\n***********************************************************************\nDDPARM   DS    0H\n         LA    R4,DDNAME               LOAD PTR TO DDNAME KEYWORD\n         CLI   1(R4),X'00'             'NAME' KEYWORD ENTERED?\n         BE    FORMPARM                NO, CHECK FOR FORM NAME\n         LA    R4,DDNAM                LOAD POINTER TO DD NAME ADDRESS\n         L     R5,0(R4)                SET UP PTR TO DD NAME\n         LH    R6,4(R4)                SET UP LENGTH OF DD NAME\n         BCTR  R6,0                    DECREMENT LENGTH BY ONE\n         MVC   DDNM(8),SPACES          CLEAR DD NAME\n         EX    R6,MVCDD                MOVE REQUESTED PARM TO DD NAME\n***********************************************************************\n*        CHECK VALUE OF 'FORM' KEYWORD\n***********************************************************************\nFORMPARM DS    0H\n         LA    R4,FORM                 LOAD PTR TO FORM KEYWORD\n         CLI   1(R4),X'00'             'FORM' KEYWORD ENTERED?\n         BE    COPYPARM                NO, CHECK FOR COPY PARM\n         LA    R4,FORMNAM              LOAD POINTER TO FORM NAME ADDR\n         L     R5,0(R4)                SET UP PTR TO FORM NAME\n         LH    R6,4(R4)                SET UP LENGTH OF FORM NAME\n         BCTR  R6,0                    DECREMENT LENGTH BY ONE\n         MVC   FMNM(4),SPACES          CLEAR FORM NAME\n         EX    R6,MVCFORM              MOVE REQUESTED PARM TO FORM NAME\n***********************************************************************\n*        CHECK VALUE OF 'COPY' KEYWORD\n***********************************************************************\nCOPYPARM DS    0H\n         LA    R4,COPY                 LOAD PTR TO COPY KEYWORD\n         CLI   1(R4),X'00'             'COPY' KEYWORD ENTERED?\n         BE    RUSEPARM                NO, CHECK FOR REUSE PARM\n         LA    R4,COPYNUM              LOAD POINTER TO COPY NUMBR ADDR\n         L     R5,0(R4)                SET UP PTR TO COPY NUMBER\n         MVC   COPYNM(1),3(R5)         MOVE REQUESTED PARM TO COPY NUM\n         CLI   COPYNM,X'00'            ZERO COPIES REQUESTED?\n         BNE   RUSEPARM                NO, CHECK FOR REUSE PARM\n         OI    COPYNM,X'01'            YES, SET TO DEFAULT\n***********************************************************************\n*        CHECK FOR PRESENCE OF 'REUSE'  KEYWORD\n***********************************************************************\nRUSEPARM DS    0H\n         LA    R4,REUSE                LOAD PTR TO REUSE KEYWORD\n         CLI   1(R4),X'00'             'REUSE' KEYWORD ENTERED?\n         BE    BLDS99RB                NO, BUILD SVC 99 REQUEST BLOCK\n         MVI   RUSEFLAG,ON             YES, DATA SET MUST BE DEALLOC'D\n***********************************************************************\n*        BUILD SVC 99 REQUEST BLOCK FOR DYNAMIC ALLOCATION/DEALLOCATION\n***********************************************************************\nBLDS99RB DS    0H\n         LA    R7,WORKAREA+NONRBLEN    POINT TO S99RBP DSECT\n         USING S99RBP,R7               ESTABLISH ADDRESSABILITY\n         LA    R8,S99RBPTR+4           POINT TO S99RB DSECT\n         ST    R8,S99RBPTR             HAVE RBPTR POINT TO S99RB\n         OI    S99RBPTR,S99RBPND       TURN ON HIGH ORDER BIT - RBPTR\n         USING S99RB,R8                ESTABLISH ADDRESSABILITY\n         XC    S99RB(RBLEN),S99RB      ZERO OUT REQUEST BLOCK\n         MVI   S99RBLN,RBLEN           LENGTH OF RB IN LENGTH FIELD\n         CLI   RUSEFLAG,ON             DO WE NEED TO DEALLOCATE FILE?\n         BNE   BLDS99AL                NO, ALLOCATION VERB FUNCTION\n         MVI   S99VERB,S99VRBUN        INDICATE DEALLOCATION VERB\n         B     SOUTUP                  BUILD TEXT UNIT POINTER LIST\nBLDS99AL DS    0H\n         MVI   S99VERB,S99VRBAL        INDICATE ALLOCATION VERB FUNCTN\n***********************************************************************\n*        BUILD TEXT UNIT POINTER LIST FOR SYSOUT DATA SET\n***********************************************************************\nSOUTUP   DS    0H\n         LA    R9,S99RB+RBLEN          START OF TEXT UNIT POINTER LIST\n         USING S99TUPL,R9              ESTABLISH ADDRESSABILITY FOR\n*                                      TEXT UNIT POINTERS\n         ST    R9,S99TXTPP             STORE ADDR OF TUP LIST IN RB\n         CLI   RUSEFLAG,ON             DO WE NEED TO DEALLOCATE?\n         BNE   SOUTUPAL                NO, BUILD TUP FOR ALLOCATION\n         MVC   SOUTDDNM(4),UNDD        SET DEALLOCATION TEXT UNIT\n         LA    R10,SOUTDDNM            GET ADDRESS OF FIRST TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,UNALLOC             GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         B     DYNALLOC                DEALLOCATE DATA SET\nSOUTUPAL DS    0H\n         LA    R10,SOUTDDNM            GET ADDRESS OF FIRST TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,SOUTCLAS            GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,SOUTDEST            GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,SOUTPERM            GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,SOUTFMNM            GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n         LA    R9,S99TUPL+4            GET ADDR OF NEXT TUP LIST ENTRY\n         LA    R10,SOUTCPNM            GET ADDRESS OF NEXT TEXT UNIT\n         ST    R10,S99TUPTR            AND STORE IT IN THE TUP LIST\n***********************************************************************\n*        ALLOCATE / UNALLOCATE DATA SET NAME USING DYNALLOC (SVC 99)\n***********************************************************************\nDYNALLOC DS    0H\n         OI    S99TUPTR,S99TUPLN       TURN ON HIGH-ORDER BIT\n*                                      IN LAST TUP LIST ENTRY\n         LR    R1,R7                   R1 - ADDR OF REQUEST BLOCK PTR\n         DYNALLOC                      INVOKE SVC 99 TO PROCESS REQUEST\n         CLI   RUSEFLAG,ON             DO WE NEED TO ALLOCATE NOW?\n         BNE   CHKRETN                 NO, CHECK DYNALLOC RETURN CODE\n         MVI   RUSEFLAG,OFF            TURN OF DATA SET REUSE FLAG\n         MVC   SOUTDDNM(4),SOUTDD      RESET TEXT UNIT FOR ALLOCATION\n         B     BLDS99RB                GO BUILD SVC 99 REQUEST BLOCK\nCHKRETN  DS    0H\n         LTR   R15,R15                 SUCCESSFUL ALLOCATION?\n         BZ    FINISH                  YES, RETURN\n         ST    R8,DFS99RBP             STORE ADDRESS OF FAILING SVC99\n*                                      REQUEST BLOCK IN DAIRFAIL DSECT\n         ST    R15,DYNARETN            STORE SVC99 RETURN CODE\n         LA    R2,DYNARETN             R2 - PTR TO SVC99 RETURN CODE\n         ST    R2,DFRCP                STORE ADDR OF SVC99 RETURN CODE\n*                                      CODE IN DAIRFAIL DSECT\n         MVC   IKJEFF02,FULL00         MSG WRITER ROUTINE (NOT KNOWN)\n         LA    R2,IKJEFF02             R2 - PTR TO MSG WRITER ROUTINE\n         ST    R2,DFJEFF02             STORE ADDR OF PTR TO MSG WRITER\n*                                      ROUTINE IN DAIRFAIL DSECT\n         OI    DFID,X'00'              INDICATE ISSUE PUTLINE\n         OI    DFID+1,DFSVC99          INDICATE SVC99 ERROR\n         LA    R2,DFID                 R2 - ADDR OF 2 BYTE CALLER ID\n         ST    R2,DFIDP                STORE ADDRESS OF CALLER\n*                                      IDENTIFIER IN DAIRFAIL DSECT\n         L     R2,CPPLADDR             R2 - ADDRESS OF CPPL\n         ST    R2,DFCPPLP              STORE ADDRESS OF CPPL\n*                                      IN DAIRFAIL DSECT\n         MVC   DFBUFP,FULL00           ADDR MSG TEXT BUFFERS (NOT USED)\n         LINK  EP=IKJEFF18,                                            +\n               MF=(E,DFPARMS)          EXECUTE DAIRFAIL ROUTINE\n         LTR   R15,R15                 DAIRFAIL FINISH SUCCESSFULLY?\n         BZ    FINISH                  YES, RETURN\n         ABEND 222                     OH NO! DAIRFAIL FAILED!!!\n***********************************************************************\n*        CLEANUP AREAS GETMAINED FOR PARSE, DLXJCTUP AND GNRLFAIL\n*        SET RETURN CODE, RESTORE REGISTERS AND RETURN\n***********************************************************************\nFINISH   DS    0H\n         LR    R3,R15                  R3 - SAVE RETURN CODE\n         IKJRLSA PARSBACK              RELEASE VIRTUAL STORAGE\n*                                      ALLOCATED BY PARSE\n         LR    R4,R11                  R4 - ADDRESS OF GFPARMS LIST\n         FREEMAIN R,LV=GFLENGF,A=(R4)    FREEMAIN DYNAMIC STORAGE\n         LR    R4,R13                  R4 - ADDR OF DYNAMIC WORKAREA\n         L     R13,4(R13)              RESTORE REGISTER 13\n         FREEMAIN R,LV=WORKLEN,A=(R4)    FREEMAIN DYNAMIC STORAGE\n         LR    R15,R3                  R15 - RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n***********************************************************************\n*        EXECUTED STATEMENT(S)\n***********************************************************************\nMVCDD    MVC   DDNM(0),0(R5)           GET DD NAME FROM COMMAND\nMVCFORM  MVC   FMNM(0),0(R5)           GET FORM NAME FROM COMMAND\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nPCLADDR  DC    A(PARMTAB)\nFULL00   DC    F'00'                   FULLWORD CONSTANT; VALUE '00'\nFULL04   DC    F'04'                   FULLWORD CONSTANT; VALUE '04'\nFULL20   DC    F'20'                   FULLWORD CONSTANT; VALUE '20'\nHALF08   DC    H'08'                   HALFWORD CONSTANT; VALUE '08'\nPGMNAME  DC    CL8'XRXALLOC'           PROGRAM NAME USED BY GNRLFAIL\nSPACES   DC    CL8' '                  DDNAME & FORMNAME INITIALIZATION\n***********************************************************************\n*              SYSOUT DATA SET ALLOCATION TEXT UNITS\n*     SYSPRINT DD  SYSOUT=(G,,STD),COPIES=1\n***********************************************************************\nSOUTDD   DC    AL2(DALDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    C'SYSPRINT'\nLSOUTDD  EQU   *-SOUTDD                LENGTH OF SYSOUT DDNAME\nSOUTCLAS DC    AL2(DALSYSOU)           SYSOUT CLASS SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    C'G'\nSOUTDEST DC    AL2(DALSUSER)           SYSOUT CLASS SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    CL8'ADMIN'\nSOUTPERM DC    AL2(DALPERMA)           SYSOUT CLASS SPECIFICATION\n         DC    X'0000'\nSOUTFORM DC    AL2(DALSFMNO)           SYSOUT FORM NUMBER SPECIFICATION\n         DC    X'0001'\n         DC    X'0004'\n         DC    C'STD '\nLSOUTFM  EQU   *-SOUTFORM              LENGTH OF SYSOUT FORM NAME\nSOUTCOPY DC    AL2(DALCOPYS)           SYSOUT COPIES SPECIFICATION\n         DC    X'0001'\n         DC    X'0001'\n         DC    X'01'\nLSOUTCP  EQU   *-SOUTCOPY              LENGTH OF SYSOUT COPIES\n***********************************************************************\n*              SYSOUT DATA SET UNALLOCATION TEXT UNITS\n***********************************************************************\nUNDD     DC    AL2(DUNDDNAM)           DDNAME SPECIFICATION\n         DC    X'0001'\n         DC    X'0008'\n         DC    C'SYSPRINT'\nUNALLOC  DC    AL2(DUNUNALC)           UNALLOC OPTION SPECIFICATION\n         DC    X'0000'\n***********************************************************************\n*        DSECT FOR COMMUNICATIONS VECTOR TABLE\n***********************************************************************\n         CVT DSECT=YES\nXRXALLOC CSECT\n***********************************************************************\n*        DSECT FOR GETMAINED GNRLFAIL PARAMETER LIST\n***********************************************************************\n         IKJEFFGF GFDSECT=YES\nXRXALLOC CSECT\n***********************************************************************\n*        DSECT FOR COMMAND PROCESSOR PARAMETER LIST\n***********************************************************************\n         IKJCPPL\nXRXALLOC CSECT\n***********************************************************************\n*        DSECT FOR PARSE PARAMETER LIST\n***********************************************************************\n         IKJPPL\nPPLLEN   EQU   *-PPL\nXRXALLOC CSECT\n***********************************************************************\n*        DSECT FOR INPUT/OUTPUT PARAMETER LIST\n***********************************************************************\n         IKJIOPL\nIOPLLEN  EQU   *-IOPL\nXRXALLOC CSECT\n***********************************************************************\n*        DSECTS FOR PARSE CONTROL BLOCKS\n***********************************************************************\nPARMTAB  IKJPARM DSECT=IKJPARMD\nDDNAME   IKJKEYWD\n         IKJNAME 'D',ALIAS=('DD','DDNAM','DDNAME','FILE'),             +\n               SUBFLD=DDSUB\nFORM     IKJKEYWD\n         IKJNAME 'F',ALIAS=('FORM'),SUBFLD=FORMSUB\nCOPY     IKJKEYWD\n         IKJNAME 'C',ALIAS=('COPY'),SUBFLD=COPYSUB\nREUSE    IKJKEYWD\n         IKJNAME 'REUSE'\nDDSUB    IKJSUBF\nDDNAM    IKJIDENT 'SYSOUT DDNAME',MAXLNTH=8,FIRST=ALPHA,               +\n               OTHER=ALPHANUM,PROMPT='SYSOUT DDNAME',CHAR,             +\n               HELP=('DDNAME OF SYSOUT DATA SET TO BE ALLOCATED')\nFORMSUB  IKJSUBF\nFORMNAM  IKJIDENT 'SYSOUT FORM NAME',MAXLNTH=4,FIRST=ALPHANUM,         +\n               OTHER=ALPHANUM,PROMPT='SYSOUT FORM NAME',CHAR,          +\n               HELP=('FORM NAME OF SYSOUT DATA SET TO BE ALLOCATED')\nCOPYSUB  IKJSUBF\nCOPYNUM  IKJIDENT 'NUMBER OF SYSOUT COPIES',MAXLNTH=3,FIRST=NUMERIC,   +\n               OTHER=NUMERIC,PROMPT='NUMBER OF SYSOUT COPIES',INTEG,   +\n               HELP=('NUMBER OF COPIES OF SYSOUT DATA SET')\n         IKJENDP\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         EQUATE\nOFF      EQU   X'00'                   DATA SET REUSE OPTION OFF\nON       EQU   X'01'                   DATA SET REUSE OPTION ON\n         LTORG                         LTORG NEEDED FOR ADDRESSABILITY\n***********************************************************************\n*        IEFZB4D2 - SVC99 TEXT UNIT MNEMONICS\n***********************************************************************\n         IEFZB4D2\n         LTORG\n***********************************************************************\n*        DYNAMIC STORAGE AREA\n***********************************************************************\nWORKAREA DSECT\n         DS    0F\nSAVEAREA DS    18F                     XRXALLOC SAVE AREA\nECB      DS    F                       EVENT CONTROL BLOCK FOR PPL\nPARSBACK DS    F                       ADDRESS OF PDE RETURNED BY PARSE\nGFPADDR  DS    F                       ADDRESS OF GFPARMS\nCPPLADDR DS    F                       ADDRESS OF CPPL\nIKJEFF02 DS    F                       PTR MSG WRITER ROUTINE (UNKNOWN)\nDYNARETN DS    F                       SVC99 RETURN CODE\nDFID     DS    H                       DAIRFAIL CALLER IDENTIFIER\nRUSEFLAG DS    C                       INDICATE DATA SET ALLOCATION\nPPLSECT  DS    0F                      PARSE PARAMETER LIST\n         ORG   PPLSECT+PPLLEN\nIOPLSECT DS    0F                      INPUT OUTPUT PARAMETER LIST\n         ORG   IOPLSECT+IOPLLEN\nSOUTDDNM DS    0F                      DDNAME SPECIFICATION\n         DS    AL2(DALDDNAM)\n         DS    X'0001'\n         DS    X'0008'\nDDNM     DS    CL8'SYSPRINT'\nSOUTFMNM DS    0F\n         DS    AL2(DALSFMNO)           SYSOUT FORM NUMBER SPECIFICATION\n         DS    X'0001'\n         DS    X'0004'\nFMNM     DS    CL4'STD '\nSOUTCPNM DS    0F\n         DS    AL2(DALCOPYS)           SYSOUT COPIES SPECIFICATION\n         DS    X'0001'\n         DS    X'0001'\nCOPYNM   DS    X'01'\nIOPB     PUTLINE MF=L                  LIST FORMAT OF PUTLINE MACRO\n         IKJEFFDF DFDSECT=NO,DFDSEC2=NO    DAIRFAIL MAPPING MACRO\nNONRBEND EQU   *\n***********************************************************************\n*        IEFZB4D0 - SVC99 SYMBOLIC NAMES\n***********************************************************************\n         IEFZB4D0\nRBLEN    EQU   (S99RBEND-S99RB)        LENGTH OF RB\nNONRBLEN EQU   (NONRBEND-WORKAREA)     LENGTH OF NON-RB DATA\nS99RBTOT EQU   (RBLEN+25*4)            LEN OF RB + 25 TEXT UNIT ADDRS\nWORKLEN  EQU   (S99RBTOT+NONRBLEN)     LEN OF RB + 25 TEXT UNIT ADDRS\n*                                      & ALL NEEDED FOR DYNALLOC\n         END   XRXALLOC            END OF PROGRAM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT053/FILE053.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT053", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}