{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011757000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE329.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE329.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0b\\x05'", "DS1TRBAL": "b'\\x89\\xdc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02y\\x00\\x0b\\x02z\\x00\\x07\\x00\\x0c'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x11O\\x00\\x98\\x11O#7\\x01a\\x01a\\x00\\x00\\xe3\\xc5\\xc4\\xf0\\xf1\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-04-24T00:00:00", "modifydate": "1998-04-24T23:37:00", "lines": 353, "newlines": 353, "modlines": 0, "user": "TED013"}, "text": "JES2 EXIT 6 AT SCE\n------------------\n\nApril 24, 1998\n\nThis doc describes the JES2 exit 6 (converter exit) in use at\nSouthern California Edison Co.  Originally obtained before my\ntime from John V. Hooper at Northwestern Bank, it's been modified\nheavily over the years to do the things we've needed.\n\nPlease remember that the code is specifically tailored to our\nenvironment, and would never work as-is for anyone else.  Still, it\nmay provide chunks of code someone may want to copy and modify for\ntheir own use.\n\nAlso remember that this code was modified under pressure, as I\nassume all production code is.  I did most of the mods myself over\nmany years, and was happy enough when the code worked - not caring too\nmuch how elegant, concise, or efficient the code might be.  I'm\ncertainly not a JES2 or Assembler expert, but when something works,\nwhat can you say? :)\n\nGood Luck!\nTom Brennan\n\nSouthern California Edison Co.\n2255 Walnut Grove Ave.\nRosemead, CA   91770\n626-302-7212\nbrennatg@sce.com  or  tombrennan@earthlink.net\n\nOr yell at me in the bit.listserv.ibm-main newsgroup - a great place\nfor people like me to listen to the real experts.\n\n\n=======================================================================\n\n\nThis code is free for anyone to use or copy, as long as you don't\nhold me or SCE responsible for any outcome (but you knew that already)\n\n\n=======================================================================\n\nBackground Notes About the SCE Environment\n------------------------------------------\n\n Datagroups\n ----------\n\n   At SCE we have an 8 byte 'datagroup name' that is associated\n   with a particular group of users.  Originally designed before SMS\n   to group user data on a specific set of volumes, it evolved to\n   include a lot more information about the user group - including\n   the computer system the group belongs to, what catalogs they\n   use, and even the job classes associated with the group.\n\n Catalogs\n --------\n\n   In the 80's we seemed to be buying or upgrading machines every\n   other month, so we were often moving user groups (their dasd)\n   from one system to another.  We found the easiest method to do\n   this was by pre-import-connecting catalogs in the datagroup onto\n   all our computer systems (no dasd was shared at SCE at that\n   time), and then defining each alias of the 'home' system on all\n   systems.  This way, when moving groups all we had to do was vary\n   dasd off one system, and on to another.  The catalog pointers were\n   already setup if we did our jobs right.  The reason I mention\n   this is because there is code in exit 6 to support some problems\n   caused by those 'dummy' catalog alias.\n\n ACF2 or RACF ?\n --------------\n\n   The exit originally used ACF2 to verify the user's ability to\n   do certain 'protected' JCL functions.  Later this code was\n   changed to use either ACF2 or RACF (depending on what was\n   running) and after that, only RACF.  You'll probably see\n   remnants of ACF2 names throughout the code and comments, although\n   only RACF code really remains.  Clean up?  What's that?\n\n Integrity and Security\n ----------------------\n\n   This code is not perfect, and doesn't have to be at SCE.  If\n   it fails to see tapes in the jobstream and places a tape\n   job into a non-tape class (for example), nobody will be\n   admonished.  As long as it catches 98% of the tape jobs, we are\n   in pretty good shape.  Same philosophy goes for the RACF\n   protected items.\n\n Other notes\n -----------\n\n   The exit is passed data from our exit 4 (through the JCT user\n   fields), makes use of our CSA datagroup table, calls SLS code for\n   tape location information, calls RACF for access information, etc.\n   Obviously all this code will have to be removed or altered for\n   your own environment.\n\n\n=======================================================================\n\nWhat Does Our Exit 6 Do For Us?\n-------------------------------\n\n  o  Selects an appropriate job class, based on the following items:\n\n      -  the datagroup name passed to us by exit 4\n      -  the original CLASS= card (some classes are not altered)\n      -  the number of tapes used in the job\n      -  the estimated CPU time the job will use\n      -  other stuff - I forgot!\n\n  o  Enforces a few JCL standards, such as:\n\n      -  accounting information\n\n  o  Limits (by RACF) ability to use certain JCL items:\n\n      -  production datagroup names\n      -  production job and sysout classes\n      -  time=1440\n      -  tape retention over 120 days\n      -  programs such as AMASPZAP (leftover from long ago)\n      -  tape robot usage (the silos)\n      -  jobcat and stepcat\n\n  o  Creates /*SETUP messages for each tape that is not already\n     in the silo.\n\n  o  Displays a summary of job steps, including:\n\n      - step and proc name\n      - number of tapes used by this step\n      - estimated time for this step\n      - region size for this step\n\n  o  For TSO and STC's, this exit calls a routine to gather\n     the room number, programmer name, and accounting string,\n     and move them into the JCT.  Also adds the datagroup name\n     as the 10th accounting field, so it's available in the\n     ACT for later use by any program.\n\n  o  Checked each non-new dataset name in the job to make sure\n     that the catalog for the high-level-index was online to\n     the system converting the job.  With our unusual (abnormal?)\n     idea of dummy aliases on all systems, this helped eliminate\n     a lot of catalog dasd mount requests when a user typed a\n     high-level belonging to another system.\n\n  o  The exit also (unfortunately) must check simple items like\n     the length of step names and dataset names, because it needs\n     to put these items in a table.  Errors in these lengths result\n     in errors from Exit 6, which can be confusing to users who\n     normally get a real JES2 error message for those mistakes.\n\n\n=======================================================================\n\nStrange Things I Did When Testing\n---------------------------------\n\n  o  I remember IPLing each time I made a code change until one\n     of the senior programmers mentioned all I needed was an\n     LLA refresh (our lmod is in linklist) and a JES2 hot start.\n     As we say in Los Angeles - duh...\n\n  o  I never could get an IF per trap to match with code loaded\n     into the JES2 address space.  Instead I used Omegamon to\n     cross-memory-zap some zeros at appropriate places in the\n     running code, and examine the resulting 0C1 dumps.  Don't\n     do this if the boss is watching though.  :)\n\n  o  I had a few assembler variables that would change the code\n     to include some debugging features.  They are:\n\n       &TRACE=YES/NO\n\n         I replaced strategic \"label DS 0H\" statements with\n         a \"label LABEL\" macro statement.  With TRACE=YES, these\n         would expand into a WTO to show me where the exit is\n         at.  Not for the faint of heart or the short on\n         WTO buffer's - but you get the idea.\n\n       &ESTAE=YES/NO\n\n         This program has an ESTAE routine, as recommended by\n         the IBM doc.  But I don't think it really needs one.\n         The converter runs under it's own TCB and I believe\n         everything our exit does is 'cleanupable' by RTM.\n         Turn it off if you use the zero-zap debugging method.\n         And consider removing it if you don't do anything in your\n         exit that RTM can't clean up.\n\n       &TEST=YES/NO\n\n         This is (by far) the strangest of my development\n         methods.  When TEST=YES, certain assembled items are\n         bypassed or replaced with code that works under TSO.\n         I then made a driver program that would call the\n         exit6 code under TSO TEST, passing parameters to\n         simulate a call from JES2.  I had to supply a JCT\n         and other control blocks that the exit needed, but\n         of course only the fields the exit looked at needed\n         to be filled in those blocks.\n\n         Internal text from various test jobs was gathered by\n         turning INPUT ON in SDSF and printing the visible\n         internal text to a dataset read by the driver program.\n\n         Am I crazy?  I think this proves it!  But running the\n         exit under TEST saved countless hours of 0C1 zaps\n         and JES2 restarts when working on the more complicated\n         code.  Plus, I could work this way during the day and\n         without the risk of a secondary JES.\n\n\n=======================================================================\n\nDescriptions of Selected Code Areas\n-----------------------------------\n\nWell, if you've read this far I guess you must be at least a little\nbit interested in the code we use.  Maybe I can help out a bit by\ngoing over a few spots in the program and describing what that area\ndoes, what I think it does, or just give some general comments:\n\nMainline Code\n-------------\n\n Label     Description\n --------  -----------------------------------------------------------\n\n EXIT6     Ok, ok.  The program uses 3 base registers.  Before MVS\n           I worked with microprocessors, and I never heard of this\n           4K segment problem.  My solution was to just keep adding\n           base registers until I ran out.  I figure I can add\n           about 12 more still.\n\n CHKFAIL   Exit 6 is passed internal text a line at a time.  If\n           there was a problem and we're going to cancel the job\n           anyway, we don't bother counting tapes or checking\n           anything else.  Kind of like the old compilers that\n           would give you one error only at each run.  Don't ask\n           me why we did it this way.  I don't remember.\n\n GETMAIN   Get some storage and divide it up into separate areas.\n           At one level of this program, I did a getmain for 32k,\n           then goofed and freemain'ed only 3k. Each job submission\n           left 29K in the JES2 address space.  I think that's when\n           I learned that RTM cleaned up nicely after a production\n           JES2 hot start (lucky for me!)\n\n           The getmain is done once per job, and the address saved\n           in a JCT user field.\n\n CHECKJCT  All sorts of nice bits are passed to the exit to indicate\n           where we are in the current job processing and what kind\n           of statement we are looking at.\n\n JOBCARD   A large section that checks the jobcard info, etc.  One\n           advantage exit 6 has over other JCL scan exit points is\n           that the entire card (including continuation) is converted\n           to a single line of internal text.  Much easier to parse,\n           but we still have to parse.\n\n EXECARD   This section checks EXEC card info, such as step time\n           and region size.  Also, an EXEC entry is placed into a large\n           table so we can refer back to it if needed.  I believe\n           most of this referback code came from the original writer.\n           Thank you wherever you are.  As with the job card,\n           items requiring special authority will check RACF.\n\n JDTCARD   I believe this section gets called for OUTPUT cards, which\n           could be used to indicate sysout class.  We check for this\n           and make sure the user has the appropriate RACF auth to\n           use that class.\n\n DDCARD    By far the largest section of code, this handles all the\n           DD parms we are interested in, checks RACF authority to\n           those items, LOCATE's dataset names as needed, issues\n           /*SETUP card WTO's, etc. etc.\n\n PROCARD   Handles PROC cards.  Not much to do other than check a\n           couple of items and save the entry in the large table\n           for later reference.\n\n EOF       At this point we are done with the job stream, and we\n           can look things over and set the job class, print\n           summary lines to the joblog, etc.\n\n ENDOFIT   Clean up any mess we made and return to JES2\n\n\nSubroutines of Note\n-------------------\n\n REFBACK   Mostly unmodified from the original code, this section\n           searches the table we create of exec cards, dd cards,\n           etc, when there's some kind of dataset referback.\n\n SETUP     Handles automatic tape /*SETUP processing\n\n CATLOC    Makes sure that the catalog for the dataset we are\n           checking is online to this system.  This code is needed\n           because of the way we duplicated aliases on all systems,\n           even though the catalog is only available on one system.\n           I doubt if anyone but us needs this code, and the\n           associated UCBSEAR search routine.\n\n UCBSEAR   Obviously this code has been bypassed - probably about\n           the time UCB's became dynamic.  But you can get an idea\n           of the trouble we had to go to because of our datagrouping\n           methods.\n\n GETDGN    This routing is passed an 8 character datagroup name and\n           returns lots of data associated with that datagroup,\n           including a jobclass list (used for jobclass selection).\n           Of course, this only works at SCE.\n\n SCECHECK  Both these routines call RACF to init and check\n RACFINIT  authorization to various items.  As you can see sometimes\n           I used SAF routines (RACROUTE) and other times called\n           RACF directly (RACINIT).  Who knows why - probably because\n           I was learning the macros at the time.  Should I go back\n           and fix it?  Nawww!  Not until we get Top Secret.\n\n ACCOUNT   Adds parms from RACF to account information in JCT.\n           Mostly this was used so TSO and STC tasks would have\n           some decent routing identification on their sysout.\n\n TSORTN    Called for TSU's and STC's to gather and store\n           account and routing info.\n\n\n=======================================================================\n\nThat's it!\n----------\n\nThe rest you can determine from the code itself, if you are\ninterested.  Hopefully, this example may save you some time and show\nyou how to do a few things during JES2 exit 6 converter processing.\n\nAnd it may also show you a few things NOT to do!  :)\n\nGood luck with your exit coding!\nTom Brennan\n\n\n**************************** Bottom of Data ***********************************\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT6": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x98\\x11O\\x00\\x98\\x11O#B\\x15w\\x15}\\x15w\\xe3\\xc5\\xc4\\xf0\\xf1\\xf3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1998-04-24T00:00:00", "modifydate": "1998-04-24T23:42:00", "lines": 5495, "newlines": 5501, "modlines": 5495, "user": "TED013"}, "text": "//*********************************************************************\n//*     ASSEMBLE JES2 EXIT 6\n//*********************************************************************\n//*\n//ASM EXEC HLASMCL,PARM.ASM='OBJECT,NODECK,XREF(SHORT),USING(WARN(0))',\n//         PARM.LKED='LIST,LET,XREF'\n//ASM.SYSLIB DD DSN=OSR24.SMPE.MVST100.SMPMTS,DISP=SHR\n//           DD DSN=OSR24.SMPE.MVST100.SMPSTS,DISP=SHR\n//           DD DSN=OSR24.SYS1.SHASMAC,DISP=SHR\n//           DD DSN=TED000.MACLIB,DISP=SHR\n//           DD DSN=TED000.INSTALL.HSC.SLSMAC,DISP=SHR\n//           DD DSN=SYS1.MACLIB,DISP=SHR\n//           DD DSN=SYS1.AMODGEN,DISP=SHR\n//LKED.SYSLMOD DD DSN=USERID.T.LOAD(SCEX006),DISP=SHR\n//ASM.SYSIN  DD *\n         TITLE 'JES2 EXIT 6 - JOBCLASSING EXIT'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                   J E S 2   E X I T   6\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n         TITLE 'JES2 EXIT 6 - CHANGES'\n**********************************************************************\n*                           C H A N G E S\n*---------------------------------------------------------------------\n* 03/01/85 - ADDED CODE TO VALIDATE SYSOUT CLASS CHARACTER. MUST BE A\n*            A-Z OR 0-9 CHARACTER BEFORE CALLING ACF VALIDATION.\n*                     CHANGES DENOTED BY TGB01     T.BRENNAN\n*---------------------------------------------------------------------\n* 03/05/85 - TOOK OUT TSO MESSAGE CODE SO THAT 120 DAY TAPE RETENTION\n*            IS NOW ENFORCED.\n*                     CHANGES DENOTED BY TGB02     T.BRENNAN\n*---------------------------------------------------------------------\n* 03/29/85 - ADDED CODE TO PRINT BETTER MESSAGE INDICATING THAT THE\n*            LOGINID RECORD WAS NOT OBTAINABLE.\n*                     CHANGES DENOTED BY TGB03     T.BRENNAN\n*---------------------------------------------------------------------\n* 03/29/85 - SET JCTUSER3 TO X'01' AT JOBERROR LABEL, SO THAT WE\n*            WILL NOT PROCESS ANY FURTHER IF AN ERROR OCCURS.\n*                     CHANGES DENOTED BY TGB04     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/04/85 - IF JCT TYPRUN=SCAN OR TYPRUN=COPY BITS ARE SET THEN WE\n*            BYPASS EXIT6 PROCESSING COMPLETELY.\n*                     CHANGES DENOTED BY TGB05     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/08/85 - IN ESTAE EXIT, SET JCTUSER3 TO X'01' SO EXIT 6 WILL\n*            NOT TRY TO GETMAIN AGAIN AFTER ABENDING\n*                     CHANGES DENOTED BY TGB06     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/11/85 - ADDED 'LABEL' MACRO TO HELP DEBUGGING. SEE MACRO\n*            COMMENTS FOR HOW TO USE IT.\n*                     CHANGES DENOTED BY TGB07     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/11/85 - CREATED SEPARATE ENTRY FOR MESSAGES SO THIS PROGRAM\n*            WOULD ASSEMBLE WITHOUT MORE BASE REGISTERS.\n*                     CHANGES DENOTED BY TGB08     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/15/85 - ADDED CODE TO GET ROOM NUMBER AND PROGRAMMER NAME FOR\n*            TSO JOBS (FROM ACF 'UMAIL' AND NAME)\n*            (CURRENTLY NOT ACTIVE)\n*                     CHANGES DENOTED BY TGB09     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/23/85 - ADDED HIGH-LEVEL INDEX TABLE TO 'CATLOC' ROUTINE SO THAT\n*            WE DON'T NEED TO CHECK TO SEE IF A CATALOG IS ONLINE\n*            MORE THAN ONCE.\n*                     CHANGES DENOTED BY TGB10     T.BRENNAN\n*---------------------------------------------------------------------\n*    SMP PTF = JX00624 CONTAINS ALL MODIFICATIONS ABOVE\n*---------------------------------------------------------------------\n* 06/18/85 - REWROTE THE ACF2 INTERFACE TO CALL A SEPARATE ENTRY\n*            POINT AND TO IGNORE THE NON-CANCEL FLAG, AND OTHER\n*            ACF RELATED CHANGES.\n*                     CHANGES DENOTED BY TGB11     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/05/85 - ELIMINATED DUPLICATE CODE, MADE CODE EASIER TO WORK WITH\n*            AND DEBUG, CREATED TSO TEST DRIVER ROUTINE, AMONG OTHER\n*            THINGS. TO MANY CHANGES TO HAVE A 'TGB' IDENTIFIER.\n*                                                  T.BRENNAN\n*---------------------------------------------------------------------\n* 07/05/85 - ADDED CODE TO PRINT ACF2 MESSAGE IF LOGONID IS NOT\n*            AVAILABLE.\n*                     CHANGES DENOTED BY TGB12     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/05/85 - ADDED CODE TO FIX BUG IN EXPDT CODE - (YEAR WRAP)\n*            ALSO SET RETPD AND EXPDT CODE TO USE DECBIN SUBROUTINE\n*                     CHANGES DENOTED BY TGB13     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/05/85 - MODIFIED STEP MESSAGE CODE TO PRINT REGION SIZE CORRECTLY\n*            (IN K OR M) AND IF LESS THAN 1 K PRINT 1K (NOT 0K)\n*                     CHANGES DENOTED BY TGB14     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/05/85 - ADDED CODE SO THAT JOBS WILL STILL BE SUBMITTED IF ACF\n*            IS NOT ACTIVE, OR THE EXIT6 TABLE CANNOT BE LOADED\n*                     CHANGES DENOTED BY TGB15     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/05/85 - ADDED CODE SO THAT 'OSSG' CAN SUBMIT JOBS THAT WILL\n*            BYPASS EXIT6 IN AN EMERGENCY.\n*                     CHANGES DENOTED BY TGB16     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/05/85 - ADDED 'SYSOUT' LOOKASIDE BUFFER SO THAT SYSOUT CLASS ONLY\n*            NEEDS TO CALL ACF ONCE FOR VALIDATION.\n*                     CHANGES DENOTED BY TGB17     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/08/85 - TOOK OUT SOME CODE SO THAT VOL=REF= WORKS EVEN IF THE\n*            VOLSER WAS NOT SPECIFIED ON THE REFERENCED DDNAME.\n*                     CHANGES DENOTED BY TGB18     T.BRENNAN\n*---------------------------------------------------------------------\n* 09/18/85 - ADDED CODE TO OBTAIN DATAGROUP NAME FROM ACF2 AND XEQ CARD\n*            AND CREATE 10TH ACCOUNT SUBPARM IN INTERNAL TEXT\n*                     CHANGES DENOTED BY TGB19     T.BRENNAN\n*---------------------------------------------------------------------\n********* SMP PTF = JX00626 CONTAINS ALL MODIFICATIONS ABOVE\n*---------------------------------------------------------------------\n* 10/16/85 - PUT DUMMY DD PROCESSING BACK IN (IT GOT TAKEN OUT\n*            SOMEHOW).\n*                     CHANGES DENOTED BY TGB20     T.BRENNAN\n*---------------------------------------------------------------------\n********* SMP PTF = JX00627 CONTAINS ALL MODIFICATIONS ABOVE\n*---------------------------------------------------------------------\n* 11/06/85 - REWORKED RETPD AND EXPDT PROCESSING TO CHECK ACF\n*            RESOURCE RULE 'R-MSC-RETPD'\n*                     CHANGES DENOTED BY TGB21     T.BRENNAN\n*---------------------------------------------------------------------\n* 11/06/85 - FIXED PROBLEM WITH EXIT6 CONTINUING PROCESSING EVEN IF\n*            THE CONVERTER GOT AN ERROR (AND CAUSING AN 0C4)\n*                     CHANGES DENOTED BY TGB22     T.BRENNAN\n*---------------------------------------------------------------------\n* 11/06/85 - MODIFIED TO USE SCE COMMON DATAGROUP NAME LOOKUP ROUTINE\n*            'SCEDGLKP' RATHER THAN EXIT6 TABLE.\n*                     CHANGES DENOTED BY TGB23     T.BRENNAN\n*---------------------------------------------------------------------\n* 11/21/85 - FIXED LOCATE PROBLEM. DATASETS WITH MEMBER NAMES WERE\n*            BEING TREATED LIKE GDG'S (A GENERIC LOCATE WAS DONE)\n*                     CHANGES DENOTED BY TGB24     T.BRENNAN\n*---------------------------------------------------------------------\n* 11/21/85 - MODIFIED LOCATE TO LOOK AT ONLY THE (+0) GDG DATASET IF\n*            NO GDG OFFSET WAS GIVEN.\n*                     CHANGES DENOTED BY TGB25     T.BRENNAN\n*---------------------------------------------------------------------\n* 12/02/85 - ADDED CODE TO PRINT USERID WHEN USER IS UNAUTORIZED FOR\n*            A CERTAIN FUNCTION.\n*                     CHANGES DENOTED BY TGB26     T.BRENNAN\n*---------------------------------------------------------------------\n* 12/19/85 - ADDED CODE TO CHECK FOR 3 POS PARMS ON JOBCARD BEFORE\n*            MODIFYING THE INTERNAL TEXT - CONTIUATION OF FIX TGB22\n*                     CHANGES DENOTED BY TGB27     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/01/88 - INCLUDED THE FOLLOWING CHANGES:\n*            MODIFICATIONS FOR JES2 2.1.5\n*            ADD ROOM # AND OTHER INFO TO STARTED TASK JCT'S\n*            PROC  'TIME' OVERRIDES - ETIMES\n*            ROOM # CHEKING PROBLEM\n*            ACF2 4.1.2 - USE JOBNAME FOR TSO & STC     S.CHUCHEV\n*---------------------------------------------------------------------\n********* SMP PTF = JX00654 CONTAINS ALL MODIFICATIONS ABOVE\n*---------------------------------------------------------------------\n* 12/22/88 - MODIFIED FOR ACF2 OR RACF - AND ALTERED TO USE USERID\n*            FROM JCTJNAME OR NJE HEADER INSTEAD OF JCTUSER5\n*          - CHANGED BLDSMF FIELD TO BLDAUTH (DGNAME AUTH)\n*          - ADDED UNIT=3480 TO UNIT TABLE\n*                     CHANGES DENOTED BY TGB28     T.BRENNAN\n*---------------------------------------------------------------------\n* 05/16/89 - FIXED TO USE ANY AVAILABLE ACEE INST FIELDS IN ACFINIT\n*                     CHANGES DENOTED BY TGB29     T.BRENNAN\n*---------------------------------------------------------------------\n* 09/18/89 - MODIFIED TO USE THE $NHDGET MACRO TO OBTAIN THE\n*            LOCATION OF THE JES2 SECTION OF THE NJE HEADER.\n*            TH1S CHANGE WILL MAKE EXIT UPWARD AND DOWNWARD\n*            COMPATIBLE BETWEEN JES2 2.2.1 AND 3.1.1\n*                     CHANGES DENOTED BY RWS01     R.SEIDEL\n*---------------------------------------------------------------------\n* 01/15/90 - FIXED PROBLEM WITH JOB/STEP TIME CALCULATION\n*                     CHANGES DENOTED BY TGB30     T.BRENNAN\n*---------------------------------------------------------------------\n* 01/22/90 - FIXED SYSOUT LOOKASIDE LOGIC TO WORK EVEN IF ACCESS FAILS\n*                     CHANGES DENOTED BY TGB31     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/30/90 - REMOVED LINES WHICH CAUSED TAPE COUNT PROBLEMS\n*                     CHANGES DENOTED BY TGB32     T.BRENNAN\n*---------------------------------------------------------------------\n* 05/23/90 - ADDED RACF RULE CHECK FOR UNIT=TAPEK (ROBOT TAPE UNITS)\n*                     CHANGES DENOTED BY TGB33     T.BRENNAN\n*---------------------------------------------------------------------\n* 01/30/91 - ADDED CHECK FOR GROUP=STARTASK, USER=UCC7.  IF SO, THEN\n*            A /*JOBFROM IS SUMULATED.\n*            (TEMP SUPPORT FOR USERID PROPAGATION FROM A STC)\n*                     CHANGES DENOTED BY TGB34     T.BRENNAN\n*---------------------------------------------------------------------\n* 03/29/91 - ALLOWED 8 CHARACTER JOB ACCOUNT NUMBER (FOR SDGE JOBS)\n*                     CHANGES DENOTED BY TGB35     T.BRENNAN\n*---------------------------------------------------------------------\n* 04/11/91 - MODIFIED TO IGNORE PRODUCTION JOB CLASS IF USER IS NOT\n*            AUTHORIZED, RATHER THAN CANCELLING THE JOB.\n*                     CHANGES DENOTED BY TGB36     T.BRENNAN\n*---------------------------------------------------------------------\n* 05/28/91 - FIXED BUG IN TAPE COUNT PROCESSING THAT WAS MAKING BLANK\n*            VOLSER'S LOOK LIKE REFERBACKS AND NOT COUNTING THEM\n*                     CHANGES DENOTED BY TGB37     T.BRENNAN\n*---------------------------------------------------------------------\n* 11/15/91 - MOVED ROOM#/PGMR NAME ACCOUNT STUFF TO EXIT4\n*            GET USERID FROM JCTUSER4/5 (EXIT 4 PUTS IT THERE)\n*            BECAUSE NJE HEADER IS NOT AVAILBLE IN EXIT6 FOR 4.2.0\n*            ALSO ADDED RACF ERROR MESSAGES\n*            ALSO MODIFIED CODE FOR NEW TIME= VALUES\n*            ALSO ALLOWED NEW IF/THEN/ELSE/ENDIF STATEMENTS\n*                     CHANGES DENOTED BY TGB38      T.BRENNAN\n*---------------------------------------------------------------------\n* 04/08/92 - ADDED CHECK TO DSNAME PROCESSING TO CHECK FOR SUB PARMS\n*                     CHANGES DENOTED BY TGB39     T.BRENNAN\n*---------------------------------------------------------------------\n* 01/06/93 - WITH JES2 4.3, JOBCARD WAS NOT BEING SENT TO EXIT6 WHEN\n*            THE JOBNAME WAS LONGER THAN 8 CHARACTERS, SO CODE WAS\n*            ADDED TO PREVENT PROCESSING UNLESS JOBCARD WAS SEEN.\n*                     CHANGES DENOTED BY TGB40     T.BRENNAN\n*---------------------------------------------------------------------\n* 03/02/93 - COPIED ROOM NUMBER FROM INTERNAL TEXT TO FIELD JCTROOMN\n*            IN THE JCT.  WITH FIXES APPLIED (LEVEL 49.4) THIS FIELD\n*            WAS NOT BEING UPDATED, CAUSING PRINT DISTRIBUTION PRBLEMS.\n*                     CHANGES DENOTED BY TGB41     T.BRENNAN\n*---------------------------------------------------------------------\n* 10/19/93 - ADDED RACF CHECK FOR TAPEKR AND TAPE9R UNITS\n*                     CHANGES DENOTED BY TGB42     T.BRENNAN\n*---------------------------------------------------------------------\n* 07/21/94 - TEMPORARILY REMOVED UCB CODE\n*                     CHANGES DENOTED BY TGB43     T.BRENNAN\n*---------------------------------------------------------------------\n* 11/18/94 - OBTAIN USERID FROM JCTJUSID INSTEAD OF FROM JCTUSER4\n*            PASSED FROM EXIT4. UPDATED JCTPNAME, JCTROOM, AND\n*            JCTROOMN SINCE THAT CODE WAS REMOVED FROM EXIT4.\n*            REMOVED ANY ACF CODE.\n*---------------------------------------------------------------------\n* 06/08/96 - T.BRENNAN - ADDED CODE FOR AUTOMATIC TAPE SETUP      TGB45\n*---------------------------------------------------------------------\n* 10/09/97 - T.BRENNAN - MODIFIED TO IGNORE MIGRATE TAPES         TGB46\n*---------------------------------------------------------------------\n* 01/24/98 - T.BRENNAN - REMOVED CODE THAT UPDATES JQEJCLAS       TGB47\n*---------------------------------------------------------------------\n* 03/23/98 - T.BRENNAN - ONLY PRINT ONE SETUP OF A PARTICULAR VOL TGB48\n*---------------------------------------------------------------------\n**********************************************************************\n         TITLE 'JES2 EXIT 6 - DOCUMENTATION'\n**********************************************************************\n*\n*    ENVIRONMENT   MVS SP 2.1.3           LEVEL 8502\n*                  JES2 FOR SP 1.3.4      LEVELSET 8501\n*                  ACF2 4.0 (SKK INC.)\n*\n*    THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER\n*    TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE\n*    THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.\n*\n*    VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES\n*    WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND\n*    FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN\n*    CODE TO THE JES2 CONVERTER SUB-TASK.\n*\n*    THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS\n*    PROCESSING. JES2 PASSES EACH INTERNAL TEXT STATEMENT\n*    TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION. THE\n*    EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE\n*    COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING\n*    JOB CLASS. THE ACB FOR THE MESSAGE DATA SET IS IN THE\n*    PCE WORK AREA AND CAN BE USED TO ISSUE ERROR MESSAGES\n*    TO THE JOB MESSAGE PORTION OF THE LISTING.\n*\n*    ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO\n*    SYNTAX CHECKING. CHECKING IS MADE FOR KEYWORD VALUES,\n*    BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD. IE.,\n*    50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL\n*    NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED\n*    THROUGH THE CONVERTER. THESE ERRORS WILL BE CAUGHT BY\n*    THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT\n*    THIS EXIT MUST PROCESS THEM. CURRENTLY, ALL ERRORS OF\n*    THIS TYPE WILL ISSUE A MESSAGE TO THE EFFECT OF AN INTERNAL\n*    ERROR AND FLUSH THE JOB.\n*\n*        WRITTEN BY:\n*                        JOHN V. HOOPER\n*                        NORTHWESTERN BANK\n*                        P.O. BOX 310\n*                        NORTH WILKESBORO, N.C. 28674\n*\n*\n**********************************************************************\n*\n*   TYPICAL REGISTER USAGE:\n*\n*     NOTE: REGISTERS FLAGGED WITH '*' SHOULD PROBABLY NOT BE USED\n*           FOR ANOTHER PURPOSE WITHOUT SAVING AND RESTORING.\n*\n*       R0:   TEMP (CONTAINS EXIT 6 INFO ON ENTRY)\n*\n*       R1:   TEMP (POINTS TO EXIT 6 PARMS ON ENTRY)\n*\n*    *  R2:   GENERALLY POINTS TO THE CURRENT POSITION IN THE INTERNAL\n*             TEXT STRING. BUMPED ALONG AS NEEDED TO PARSE TEXT.\n*             SOMETIMES USED AS POINTER TO THE JCT.\n*\n*       R3:   GENERALLY USED TO GET THE LENGTH OF A TEXT PARM.\n*\n*       R4:   GENERALLY USED AS A SUBPARM COUNTER\n*\n*       R5:   GENERAL WORK REGISTER, SOMTIMES USED AS SUBPARM POINTER.\n*             RETURN ADDRESS FOR SOME SUBROUTINES\n*\n*    *  R6:   POINTER TO THE START OF INTERNAL TEXT FIELD\n*             (PASSED TO EXIT6 BY JES2)\n*             POINTER TO RPL IN MSG I/O ROUTINES\n*\n*    *  R7:   POINTER INTO LARGE EXIT 6 SAVE TABLE.\n*\n*       R8:   PCE POINTER (FOR A SHORT TIME)\n*             BASE REGISTER IN ESTAE ROUTINE\n*\n*       R9:   WORK REGISTER\n*\n*    *  R10:  THIRD BASE REGISTER\n*\n*    *  R11:  SECOND BASE REGISTER\n*\n*    *  R12:  FIRST BASE REGISTER\n*\n*    *  R13:  POINTER TO MAIN WORK AREA.\n*             ALSO USED WITHIN SOME SUBROUTINES SUCH AS 'UCBSEAR'\n*             (AFTER SAVING THE WORKAREA ADDRESS FIRST)\n*\n*       R14:  GENERALLY USED AS A SUBROUTINE LINKAGE REGISTER\n*             (DO NOT ALTER IN A SUBROUTINE)\n*\n*       R15:  GENERALLY USED AS A RETURN CODE REGISTER, OR A MESSAGE\n*             CODE FOR THE ERROR ROUTINE (ERRORTN)\n*\n**********************************************************************\n*\n**********************************************************************\n*                 JES2 CONTROL BLOCK USAGE\n**********************************************************************\n*\n*  JCT  -   JCTUSER1 - JCTUSER2    8 BYTE XEQ DATAGROUP NAME PASSED TO\n*                                  THIS PGM FROM EXIT 4\n*\n*           JCTUSER3               1 BYTE OF FLAGS USED BY SCE EXITS\n*\n*                                  X'80'    EXIT 4 SAW A /*DEFER CARD\n*                                  X'40'    USED BY EXIT 4\n*                                  X'20'    USED BY EXIT 4\n*                                  X'10'    USED BY EXIT 4\n*                                  X'04'    AUTO SETUP FOR TAPES  TGB45\n*                                  X'02'    JOBCARD WAS SEEN ALREADY\n*                                  X'01'    EXIT 6 HAS FAILED\n*\n*                                  RIGHT 3 BYTES UNUSED AT PRESENT\n*\n*           JCTUSERB               ADDRESS OF THE EXIT6 WORKAREA\n*\n**********************************************************************\n         TITLE  'JES2 EXIT 6 - ASSEMBLY VARIABLES'\n**********************************************************************\n*              SET CONDITIONAL ASSEMBLY VARIABLES\n**********************************************************************\n*\n*  TYPICALLY - FOR PRODUCTION SETUP   TRACE=NO  TEST=NO  ESTAE=YES\n*              FOR TSO TESTING SET    TRACE=YES TEST=YES ESTAE=NO\n*\n**********************************************************************\n*\n         GBLC &TRACE\n&TRACE   SETC 'NO'         DEBUGGING WTO OR TPUT TRACE\n         GBLC &TEST\n&TEST    SETC 'NO'         SETUP FOR TSO TEST RUN\n         GBLC &ESTAE\n&ESTAE   SETC 'YES'        ESTAE PROCESSING\n*\n         TITLE 'JES2 EXIT 6 - INLINE MACROS'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                    I N L I N E   M A C R O S\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n         EJECT\n***************************************************************** TGB07\n*                         MACRO LABEL                             TGB07\n***************************************************************** TGB07\n*                                                                 TGB07\n* USE THIS MACRO INSTEAD OF 'LABEL DS 0H' IN PLACES THAT REQUIRE  TGB07\n* TRACING DURING DEBUGGING. SET GLBL VARIABLE 'TRACE' TO 'YES' IF TGB07\n* TRACING IS NEEDED, AND 'NO' IF NOT.                             TGB07\n*                                                                 TGB07\n* THE WORKAREA MUST BE ADDRESSABLE WHEN USING THIS MACRO.         TGB07\n*                                                                 TGB07\n***************************************************************** TGB07\n*                                                                 TGB07\n         MACRO                                                    TGB07\n&NAME    LABEL ,                                                  TGB07\n&NAME    DS   0H                                                  TGB07\n         GBLC &TRACE                                              TGB07\n         AIF  ('&TRACE' NE 'YES').NOLABL                          TGB07\n         STM  R15,R2,LABELSV                                      TGB07\n         L    R15,LABELA                                          TGB07\n         BASR R2,R15                                              TGB07\n         DC   CL8'&NAME'                                          TGB07\n         LM   R15,R2,LABELSV                                      TGB07\n.NOLABL  ANOP                                                     TGB07\n         MEND                                                     TGB07\n*\n***************************************************************** TGB11\n*                       MACRO SCECHK                              TGB11\n***************************************************************** TGB11\n*                                                                 TGB11\n* USE THIS MACRO TO CALL RACF FOR A RESOURCE VALIDATION.          TGB11\n*                                                                 TGB11\n*    EXAMPLE:   (NAME)  SCECHK KEY,NAME,LEN                       TGB11\n*                                                                 TGB11\n*          KEY = ADDRESS OF 4 BYTE RESOURCE KEY (=C'RMSG')        TGB11\n*          NAME = ADDRESS OF 'N' BYTE RESOURCE NAME (=C'TIME')    TGB11\n*          LEN  = LENGTH OF RESOURCE NAME (4 IN THIS EXAMPLE)     TGB11\n*                                                                 TGB11\n*       RESULT:   CC = 0 , USER IS AUTHORIZED FOR RESOURCE        TGB11\n*                 CC \u00ac 0 , USER IS NOT AUTHORIZED                 TGB11\n*                                                                 TGB11\n***************************************************************** TGB11\n*                                                                 TGB11\n         MACRO                                                    TGB11\n&LABEL   SCECHK &KEY,&NAME,&L                                     TGB11\n&LABEL   MVC   RACFKEY,&KEY           MOVE KEY TO KEY AREA        TGB11\n         MVC   RACFNAME,BLANKS        CLEAR NAME AREA             TGB11\n         MVC   RACFNAME(&L),&NAME     MOVE NAME TO NAME AREA      TGB11\n         BAS   R14,SCECHECK                                       TGB11\n         MEND                                                     TGB11\n*\n         EJECT\n**********************************************************************\n*                           MACRO XWTO\n**********************************************************************\n*\n*  USE THIS MACRO TO ISSUE A $$WTO OR A NORMAL WTO DEPENDING ON THE\n*  STATE OF GLOBAL VARIABLE &TEST.\n*\n*  EXAMPLE:    (NAME)  XWTO  LIST,LEN\n*\n*          'LIST' IS THE ADDRESS OF WTO LIST FORM\n*          'LEN' IS LENGTH OF WTO LIST FORM\n*\n**********************************************************************\n*\n         MACRO\n&LABEL   XWTO  &LIST,&LEN\n         GBLC  &TEST\n         AIF   ('&TEST' EQ 'NO').NOTSO2\n&LABEL   TPUT  &LIST+4,&LEN-4\n         MEXIT\n.NOTSO2  ANOP\n         L     R1,HCTADDR          POINT TO HCT TO GET COM CHAR\n         USING HCT,R1              AND USE\n&LABEL   MVC   WTOLIST(&LEN),&LIST MOVE MESSAGE TO WTO AREA\n         $$WTO WTOLIST             ISSUE JES2 STYLE WTO\n         DROP  R1\n         MEND\n*\n         TITLE 'JES2 EXIT 6 - JES2 CONTROL BLOCKS, ETC.'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***            E X I T   6   E X E C U T A B L E   C O D E\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n         EJECT\n**********************************************************************\n*                       HASP CONTROL BLOCKS\n**********************************************************************\n*\n         COPY  $HASPGBL\nSCEX006  $MODULE SYSP=(GEN,GEN,NODATA,NOGEN,NOGEN),                    X\n               ENVIRON=SUBTASK,                                        X\n               CVT,                                                    X\n               DEB,                                                    X\n               KEYS,                                                   X\n               TEXT,                                                   X\n               WPL,                                                    X\n               RPL,                                                    X\n               SDWA,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $CAT,                                                   X\n               $PCE,                                                   X\n               $BUFFER,                                                X\n               $JQE,                                                   X\n               $JCT,                                                   X\n               $MIT,                                                   X\n               $NHD,                                                   X\n               $DTECNV,                                                X\n               $TQE,                                                   X\n               $DTE,                                                   X\n               $XECB,                                                  X\n               $ERA,                                                   X\n               $PADDR,                                                 X\n               $CNVWORK\n*\n         DROP  ,           DROP ALL USINGS SPECIFIED IN DSECT'S\n*\n         TITLE 'JES2 EXIT 6 - ENTRY POINT'\n**********************************************************************\n*\n*                J E S 2    E N T R Y    P O I N T\n*\n**********************************************************************\n*\nEXIT6    $ENTRY  BASE=(R12,R11,R10)\n         SAVE  (14,12)        SAVE CALLERS REGISTERS\n         LR    R9,R1          SAVE PARM ADDRESS FOR LATER\n*\n         L     R2,12(R1)      SAVE JCT ADDRESS\n         USING JCT,R2         SET ADDRESSABILITY TO JCT\n*\n         L     R6,4(R1)       LOAD ADDRESS OF INTERNAL TEXT RECORD\n         USING TEXT,R6        SET ADDRESSABILITY TO TEXT RECORD\n*\n         LR    R3,R11         SAVE HCT ADDRESS\n*\n         LR    R4,R0          SAVE REG 0\n*\n         LR    R12,R15        ESTABLISH BASE REGISTER\n         LA    R11,2048(R12)   SET SECOND\n         LA    R11,2048(R11)    BASE REGISTER\n         LA    R10,2048(R11)   SET THIRD\n         LA    R10,2048(R10)    BASE REGISTER\n*\n**********************************************************************\n*        DO NOT PROCESS JOBS WITH TYPRUN=SCAN OR TYPRUN=COPY\n**********************************************************************\n*\n         TM    JCTJOBFL,JCTTSCAN+JCTTCOPY  JOB FOR SCAN OR COPY?  TGB05\n         BZ    CHKJOB                      NO -  CHECK FOR JOBS   TGB05\nRETURN0  SLR   R15,R15                    YES - CLEAR RETURN CODE TGB05\n         B     RETURN                      AND RETURN             TGB05\n*\n**********************************************************************\n*              CALL TSORTN IF THIS IS AN STC OR TSU\n**********************************************************************\n*\nCHKJOB   DS    0H\n         TM    JCTJOBFL,JCTBATCH  IS THIS A BATCH JOB?\n         BO    CHKFAIL            YES  CONTINUE\n         BAS   R7,TSORTN          NO - CALL TSO ROUTINE           TGB09\n         B     RETURN0        RETURN ZERO EVEN IF ERROR OCCURRED  TGB09\n*\n**********************************************************************\n*          CHECK TO SEE IF WE HAVE FAILED THE JOB ALREADY\n**********************************************************************\n*\nCHKFAIL  DS    0H\n         TM    JCTUSER3,X'01'     HAS JOB BEEN FAILED BY EXIT ?\n         LA    R15,8              (SET RC 8)\n         BO    RETURN             YES - GO BACK TO JES2, IGNORE TEXT\n*\n**********************************************************************\n*           SEE IF WE SHOULD GETMAIN A WORK AREA OR NOT\n**********************************************************************\n*\nNOBYPASS DS    0H\n         ICM   R1,15,JCTUSERB GET WORK AREA ADDRESS\n         BNZ   NOGET          NOT ZERO - DON'T DO ANOTHER GETMAIN\n*\n         TITLE 'JES2 EXIT 6 - GETMAIN'\n**********************************************************************\n*\n*                         G E T M A I N\n*\n**********************************************************************\n*\n* NOTE: THE WORKAREA ARE OBTAINED AS ONE LARGE WORKAREA, TOO LARGE TO\n*       BE ADDRESSED BY A SINGLE REGISTER. DURING THE PROGRAM THE\n*       MAIN 'WORKAREA' IS POINTED TO BY REGISTER 13, AND ANY 'SUB'\n*       WORKAREAS ARE POINTED TO BY ADDRESSES THAT CAN BE FOUND\n*       WITHIN THE MAIN WORKAREA (OFF OF R13).\n*\n**********************************************************************\n*\nGETMAIN  DS    0H\n*\n         L     R0,GETLEN      GET LENGTH OF WORKAREA\n         GETMAIN R,LV=(0)     GET THE STORAGE\n         LR    R5,R1          SAVE ADDRESS FOR THE MOMENT\n*\n**********************************************************************\n*                CLEAR GETMAINED AREA TO ZEROS\n**********************************************************************\n*\n         LR    R0,R1          SETUP FOR CLEAR\n         L     R1,GETLEN      SETUP FOR CLEAR\n         SLR   R15,R15        SETUP FOR CLEAR\n         MVCL  R0,R14         CLEAR ENTIRE AREA TO ZEROS\n*\n**********************************************************************\n*          ESTABLISH ADDRESSABILITY TO NEW WORK AREA\n**********************************************************************\n*\n         ST    R13,4(R5)      SAVE OLD ADDRESS IN NEW SAVE AREA\n         ST    R5,8(R13)      SAVE NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R5         POINT TO NEW SAVE AREA\n         ST    R13,JCTUSERB   SAVE GETMAINED ADDRESS IN JCT\n         USING WORKAREA,R13   USE MAIN WORKAREA\n*\n**********************************************************************\n*               FIGURE OUT SUB WORK AREA ADDRESSES\n**********************************************************************\n*\n* NOTE: DOING THINGS THIS WAY SAVES DOING MULTIPLE GETMAINS\n*       BUT RESULTS IN THE SAME THING\n*\n**********************************************************************\n*\n         LR    R1,R13                    GET ADDRESS OF WORKAREA\n         A     R1,=A(RACFAREA-WORKAREA)  FIGURE SUB AREA ADDRESS\n         ST    R1,RACFWORK               SAVE SUB AREA ADDRESS\n*\n         LR    R1,R13                    GET ADDRESS OF WORKAREA\n         A     R1,=A(INDXAREA-WORKAREA)  FIGURE SUB AREA ADDRESS\n         ST    R1,INDXTABL               SAVE SUB AREA ADDRESS\n*\n         LR    R1,R13                    GET ADDRESS OF WORKAREA\n         A     R1,=A(SUBAREA-WORKAREA)   FIGURE SUB AREA ADDRESS\n         ST    R1,SUBTABLE               SAVE SUB AREA ADDRESS\n*\n         LR    R1,R13                    GET ADDRESS OF WORKAREA\n         A     R1,=A(DGNWAREA-WORKAREA)  FIGURE SUB AREA ADDRESS\n         ST    R1,DGNWORK                SAVE SUB AREA ADDRESS\n*\n         LR    R1,R13                    GET ADDRESS OF WORKAREA\n         A     R1,=A(DGNRAREA-WORKAREA)  FIGURE SUB AREA ADDRESS\n         ST    R1,DGNRETN                SAVE SUB AREA ADDRESS\n*\n         LR    R1,R13                    GET ADDRESS OF WORKAREA TGB48\n         A     R1,=A(SETAREA-WORKAREA)   FIGURE SETUP AREA ADDR  TGB48\n         ST    R1,SETTABLE               SAVE SETUP AREA ADDRESS TGB48\n         MVI   0(R1),X'FF'               MARK END OF TABLE       TGB48\n*\n**********************************************************************\n*            INIT CERTAIN ADDRESSES IN THE WORK AREA\n**********************************************************************\n*\n         ST    R2,JCTADDR     SAVE JCT ADDRESS                    TGB04\n         ST    R6,TEXTSTAR    SAVE TEXT STARTING ADDRESS          TGB04\n         ST    R3,HCTADDR     SAVE HCT ADDRESS                    TGB04\n*\n         LA    R15,MSGRPL     LOAD OUTPUT RPL ADDRESS             TGB04\n         ST    R15,OUTRPL     SAVE OUTPUT RPL ADDRESS             TGB04\n         LA    R1,CODAREA\n         ST    R1,POINTER\n*\n         AIF   ('&TEST' EQ 'YES').NODTE\n*\n         L     R8,8(R9)       GET DTE ADDRESS\n         ST    R8,DTEADDR     SAVE FOR LATER MAYBE\n         USING DTE,R8         SET ADDRESSABILITY DTE\n         LA    R15,DCNVMSG    LOAD OUTPUT ACB ADDRESS\n         ST    R15,OUTACB     SAVE OUTPUT ACB ADDRESS             TGB04\n         DROP  R8             DROP ADDR TO DTE\n.NODTE   ANOP\n*\n         DROP  R2             DONE WITH JCT FOR NOW\n*\n**********************************************************************\n*                    LOAD EXIT 6 CLASS TABLE\n**********************************************************************\n*\n*  A PRE-ASSEMBLED TABLE CONTAINING A LIST OF JOBCLASSES NOT TO   TGB23\n*  BE CHANGED                                                     TGB23\n*\n**********************************************************************\n*\n         LA    R1,EX6TABLE    POINT TO TABLE NAME\n         LA    R5,LOADERR     POINT TO ERROR ROUTINE\n         LOAD  EPLOC=(1),ERRET=(5)   LOAD CLASS TABLE\n         ST    R0,EXCPTAB     SAVE ADDRESS OF EXCEPTION TABLE     TGB23\nGOTTAB   DS    0H                                                 TGB15\n*\n*                                                                 TGB45\n***************************************************************** TGB45\n*               LOAD ADDRESS OF HSC LOOKUP ROUTINE                TGB45\n***************************************************************** TGB45\n*                                                                 TGB45\n         L     R2,JCTADDR     LOAD JCT ADDRESS                    TGB45\n         USING JCT,R2         SET ADDRESSABILITY TO JCT           TGB45\n*                                                                 TGB45\n         TM    JCTUSER3,X'04'          AUTO SET UP (FROM EXIT 4)  TGB45\n         BNO   NOHSC                   NO - NO HSC NEEDED         TGB45\n         MVC   SLSXCAL,=F'0'           INDICATE NO ROUTINE FOUND  TGB45\n         LOAD  EP=SLSXCAL,ERRET=NOHSC TRY TO LOAD SCE CODE        TGB45\n         ST    R0,SLSXCAL              SAVE ADDRESS FOR LATER     TGB45\n         OI    FLAGS,FSETUP            INDICATE SETUP AUTO        TGB45\nNOHSC    DS    0H                                                 TGB45\n*                                                                 TGB45\n         DROP  R2                                                 TGB45\n         B     DOESTAE                 BRANCH AROUND ENTRY STUFF\n*\n**********************************************************************\n*             ESTABLISH ADDRESSABILITY TO WORKAREA\n**********************************************************************\n*\nNOGET    ST    R13,4(R1)      SAVE OLD SAVE ADDR IN NEW SAVE AREA\n         ST    R1,8(R13)      SAVE NEW SAVE ADDR IN OLD SAVE AREA\n*\n         LR    R13,R1         POINT TO WORKAREA FOR ENTIRE PROGRAM\n         USING WORKAREA,R13   SET ADDRESSABILITY\n*\n         TITLE 'JES2 EXIT 6 - ESTAE'\n**********************************************************************\n*                   ESTABLISH ESTAE ENVIRONMENT\n**********************************************************************\n*\nDOESTAE  LABEL\n*\n         AIF   ('&ESTAE' EQ 'NO').NOESTAE\n         MVC   ESTAEL(LESTAEL),ESTAE INITIALIZE ESTAE LIST FORM\n         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS\n         LA    R1,STAERTRY    LOAD ADDRESS OF STAERTRY\n         ST    R1,RETRY       SAVE IN WORKAREA\n         LA    R1,ESTAEL      LOAD ADDRESS OF ESTAE LIST FORM\n         ESTAE STAEXIT,CT,PARAM=(13),XCTL=NO,PURGE=NONE,ASYNCH=NO,     X\n               RECORD=YES,TERM=NO,MF=(E,(1))\n.NOESTAE ANOP\n*\n         TITLE 'JES2 EXIT 6 - CHECK FOR LAST LINE OF INTERNAL TEXT'\n**********************************************************************\n*          SEE IF THIS WE ARE FINISHED WITH THIS JOB'S TEXT\n**********************************************************************\n*\n         LTR   R4,R4          LAST LINE OF TEXT ALREADY PROCESSED ?\n         BNZ   EOF            YES - FINISH UP PROCESSING FOR JOB\n*\n         TITLE 'JES2 EXIT 6 - CHECK CONVERTER ERRORS'\n**********************************************************************\n*         SEE IF WE SHOULD BOTHER PROCESSING ANY FURTHER\n**********************************************************************\n*\nCHECKJCT LABEL\n         TM    STRJINDC,JTXJOBFL  HAS JOB BEEN FAILED BY CONVERTER ?\n         BNO   RECORD1            NO - THEN CONTINUE PROCESSING\n         TM    STRINDCS,JOBSTR    IS THIS A JOB CARD ?\n         BO    JOBERR1            YES - THEN QUIT EXIT6 PROCESSING\n*\n         TITLE 'JES2 EXIT 6 - CHECK FOR LAST STATEMENT OF A GROUP'\n**********************************************************************\n*\n*    WE MUST DETERMINE IF THE CURRENT STATEMENT IS THE LAST\n*    STATEMENT FOR THE STEP. IF THE STATEMENT IS A DD STATEMENT\n*    AND IT IS THE LAST STATEMENT OF THE STEP, THE TEXT INDICATOR\n*    WILL REFLECT LAST STATEMENT OF THE STEP. IF, HOWEVER, THE\n*    CURRENT STATEMENT IS AN EXEC STATEMENT AND IT HAS NO DD\n*    STATEMENTS, THIS INDICATOR WILL NOT BE ON, SO WE HAVE TO\n*    CHECK FOR THIS CONDITION ALSO.\n*\n**********************************************************************\n*\nRECORD1  LABEL\n*\n         L     R2,JCTADDR     LOAD JCT ADDRESS\n         USING JCT,R2         SET ADDRESSABILITY TO JCT\n*\n         L     R7,SUBTABLE       POINT TO SUB TABLE\n         USING SAVTABLE,R7       SET ADDRESSABILITY\n*\n         TM    STRINDCS,LASTSTMT LAST STMT FOR STEP?\n         BO    RECORD3           YES, BRANCH\n         TM    STRINDCS,EXECSTR  EXEC STMT?\n         BNO   RECORD2           NO, BRANCH\n         TM    STREINDC,ETXNODD  STEP HAS NO DD STMTS?\n         BO    RECORD3           TRUE, ALSO LAST STMT FOR STEP\n*\n**********************************************************************\n*        AT THIS POINT THE STMT IS NOT THE LAST STMT FOR STEP\n**********************************************************************\n*\nRECORD2  NI    FLAGS,NOT-ENDSTEP TURN OFF LAST STMT IND\n         B     RECORD4        GET OUT\n*\n**********************************************************************\n*        AT THIS POINT THE STMT IS THE LAST STMT FOR STEP\n**********************************************************************\n*\nRECORD3  OI    FLAGS,ENDSTEP  TURN ON LAST STMT IND\nRECORD4  TM    STRINDCS,JOBSTR JOB STATEMENT?\n         BO    JOBCARD        YES, BRANCH\n         TM    JCTUSER3,X'02' JOBCARD SEEN YET ?                  TGB40\n         BO    RECORD5        YES - CONTINUE                      TGB40\n         LA    R15,3          NO  - SOME KIND OF JOBCARD ERROR    TGB40\n         B     JOBERR2        DO ERROR STUFF AND GET NEXT CARD    TGB40\nRECORD5  TM    STRINDCS,EXECSTR EXEC STATEMENT?                   TGB40\n         BO    EXECARD        YES, BRANCH\n         TM    STRINDCS,DDSTR DD STATEMENT?\n         BO    DDCARD         YES, BRANCH\n         TM    STRINDCS,PROCSTR PROC STATEMENT?\n         BO    GETNEXT        YES, BRANCH\n         TM    STRINDCS,JDVBSTR JDT DEFINED STATEMENT?\n         BO    JDTCARD        YES, BRANCH\n         B     GETNEXT        NO  - JUST GO GET NEXT CARD         TGB38\n*\n         TITLE 'JES2 EXIT 6 - JOB CARD PROCESSING'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                       J O B C A R D\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n*\n*    THE TEXT OF THE JOBCARD IS AS FOLLOWS:\n*        1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF\n*        2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS\n*        3)  3 BYTES OF MISCELLANEOUS INDICATORS\n*        4)  1 BYTE INDICATOR X'B4' INDICATING JOB POS PARAMS\n*        5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS\n*              1ST POS PARAM IS JOBNAME\n*              2ND POS PARAM IS ACCT PARAM LIST\n*              3RD POS PARAM IS PGMR NAME\n*        5A) JOBNAME PRECEDED BY A 1 BYTE LENGTH FIELD\n*        5B) HASP ACCOUNTING PARAMETERS PRECEDED BY A\n*            1 BYTE LENGTH FIELD LOOKS LIKE THE FOLLOWING\n*            THE 1ST HALF BYTE IS '8' IF MORE THAN 1 ACCT ENTRY\n*            IF MORE THAN 1 ACCT ENTRY -\n*            THE 2ND HALF BYTE IS THE NUMBER OF ACCT ENTRIES\n*            FOLLOWED BY A VARIABLE LENGTH LIST OF HASP PARAMETERS\n*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD\n*            IF ONLY 1 ACCT ENTRY -\n*            THE 2ND HALF BYTE IS THE LENGTH OF THE ACCT ENTRY\n*            FOLLOWED BY THE ACCOUNTING ENTRY\n*        5C) PGMR NAME PRECEDED BY A 1 BYTE LENGTH FIELD\n*        6)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS\n*            EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF\n*            POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF\n*            SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD\n*            WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER\n*            POSITIONAL PARAMETER.\n*\n**********************************************************************\n*\nJOBCARD  LABEL\n         OI    JCTUSER3,X'02'   SHOW WE HAVE SEEN JOBCARD         TGB40\n*\n**********************************************************************\n*        INITIALIZE ENTRY IN TABLE SINCE ONE MUST ALWAYS BE CREATED\n**********************************************************************\n*\nJOBINIT  DS    0H\n         MVI   ENTRYTYP,TYPJOB SET TO JOB ENTRY\n         MVI   JENTRY,C' '    BLANK FIRST BYTE OF JOB INFO\n         MVC   JENTRY+1(30),JENTRY BLANK ENTIRE JOB INFO\n         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY IN TABLE\n         ST    R7,FIRSTENT    SAVE ADDR OF FIRST ENTRY IN TABLE\n         XC    CLASSFLD,CLASSFLD ZERO DETERMINED JOB CLASS\n         XC    MAXTIME,MAXTIME CLEAR MAXIMUM CPU TIME\n         XC    EXECTIME,EXECTIME  CLEAR SETP CPU TIME\n*\n**********************************************************************\n*         INITIALIZE MSG HANDLER PARAMETERS ON FIRST ENTRY\n**********************************************************************\n*\n         LA    R15,1          SET REG TO 1\n         ST    R15,CARDNO     SET CARD COUNT TO 1\n         XC    MSGCOUNT,MSGCOUNT ZERO MESSAGE COUNTER\n         XC    RESOURCE,RESOURCE CLEAR JES2 RESOURCES\n         MVI   INCLASS,C'A'   SET INPUT DEFAULT CLASS TO 'A'\n*\n         EJECT\n***************************************************************** TGB11\n*                    INIT FOR RACF PROCESSING                     TGB11\n***************************************************************** TGB11\n*                                                                 TGB11\n         L     R2,JCTADDR          POINT TO JCT FOR RACFINIT      TGB11\n         MVC   USERID,JCTJUSID     GET USERID                     TGB38\n         L     R5,RACFWORK         POINT TO RACF WORK AREA        TGB11\n         BAS   R14,RACFINIT        CALL RACF INIT ROUTINE         TGB11\n         BNZ   RACFERR             ERROR\n*\n***************************************************************** TGB27\n*      CHECK FOR VALID POSITINAL PARMS BEFORE MODIFYING TEXT      TGB27\n***************************************************************** TGB27\n*                                                                 TGB27\n         CLI   7(R6),3             ARE THERE 3 POS PARMS ?        TGB27\n         BNE   GOTACCT             NO - SKIP ACCOUNT ADDITIONS    TGB27\n         TM    JOBIND,JOBFAIL      HAS JOB BEEN FAILED ?\n         BO    GOTACCT             YES - SKIP ACCOUNT ADDITION\n*\n***************************************************************** TGB19\n*      OBTAIN DATAGROUP NAME AND ADD TO ACCOUNT (SUBPARM 10)      TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\n         LA    R1,PROCTXT          BORROW PROC WORK AREA          TGB19\n         L     R2,JCTADDR          POINT TO JCT                   TGB19\n         BAS   R14,ACCOUNT         CALL ACCOUNT MOD ROUTINE       TGB19\n         AIF   ('&TEST' EQ 'YES').NOERR9\n         BZ    GOTACCT             OK - CONTINUE                  TGB19\n         LA    R15,9               SETUP ERROR NUMBER             TGB19\n         BAL   R14,ERRORTN         INDICATE TOO MANY SUBPARMS     TGB19\n.NOERR9  ANOP\n*\nGOTACCT  DS    0H\n*                                                                 TGB19\n***************************************************************** TGB23\n*   FIGURE OUT WHICH DATAGROUP NAME TO USE FOR CLASS SELECTION    TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n*  IF XEQ CARD WAS PASSED FROM EXIT 4 (JCTUSER1,2) USE IT FIRST   TGB23\n*  IF RACF DATAGROUP NAME IS THERE, USE IT NEXT                   TGB23\n*  IF NEITHER ABOVE IS THERE, MAKE UP 'SYSX' BASED ON SMF ID      TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n         L     R2,JCTADDR          POINT TO JCT                   TGB23\n         USING JCT,R2              R2 POINTS TO JCT               TGB23\n*                                                                 TGB23\n         MVC   DGNNAME,JCTUSER1    ASSUME XEQ CARD                TGB23\n         CLI   JCTUSER1,0          ANY XEQ CARD ?                 TGB23\n         BNE   GOTNAME             YES - WE GOT IT                TGB23\n*                                                                 TGB23\n         MVC   DGNNAME,DGROUP      ASSUME RACF DATAGROUP IS THERE TGB28\n         CLI   DGROUP,C' '         ANY DATAGROUP ?                TGB28\n         BNE   GOTNAME             YES - WE GOT IT                TGB23\n*                                                                 TGB23\n         MVC   DGNNAME,=CL8'SYSA'  SETUP FOR DEFAULT GROUP        TGB23\n         L     R1,16               POINT TO CVT                   TGB23\n         ICM   R1,15,X'C4'(R1)     POINT TO SMF CONTROL AREA      TGB23\n         BZ    GOTNAME             SORRY - NO SMF HERE            TGB23\n         MVC   DGNNAME+3(1),19(R1) GET THIS SYSTEMS SMF ID        TGB23\n*                                                                 TGB23\nGOTNAME  DS    0H                                                 TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*        OBTAIN CLASS TABLE AND VALIDATE DATAGROUP NAME           TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n         BAS   R5,GETDGN           LOOKUP DATAGROUP NAME          TGB23\n*                                                                 TGB23\n         L     R8,DGNRETN          POINT TO RETURN AREA           TGB23\n         USING DGTABLE,R8          R8 POINTS TO DGN AREA          TGB23\n*                                                                 TGB23\n         TM    BLDAFLG,BLDAUTH     IS AUTH REQUIRED ?             TGB28\n         BNO   DGNAUTH             NO  - ALL USERS AUTHORIZED     TGB23\n         SCECHK =C'RDGN',DGNNAME,8 CHECK AUTHORIZATION            TGB23\n         BZ    DGNAUTH             OK -  USER AUTHORIZED          TGB23\n*                                                                 TGB23\n         LA    R15,41              ERROR - NOT AUTHORIZED         TGB23\n         BAS   R14,ERRORTN         CALL ERROR ROUTINE             TGB23\n*                                                                 TGB23\nDGNAUTH  DS    0H                                                 TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*          OBTAIN NEW CLASS TABLE FOR DEFERRED JOBS               TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n         TM    JCTUSER3,X'80'      IS DEFER BIT SET (FROM EXIT 4) TGB23\n         BNO   NODEFER             NO  - JOB IS NOT DEFERRED      TGB23\n*                                                                 TGB23\n         MVC   DGNNAME,=CL8'DEFERA' SETUP DEFAULT DEFER NAME      TGB23\n         MVC   DGNNAME+5(1),BLDSYS+3  BASE IT ON DGN SYSID        TGB23\n         BAS   R5,GETDGN           GET NEW DEFERRED TABLE         TGB23\n*                                                                 TGB23\nNODEFER  DS    0H                                                 TGB23\n*                                                                 TGB23\n         DROP  R2                  DROP JCT                       TGB23\n         DROP  R8                  DROP DGTABLE                   TGB23\n*\n         EJECT\n**********************************************************************\n*\n*    START SCAN OF JOB CARD POSITIONAL PARAMETERS\n*        1ST POS PARAM IS ACCT NUMBER UNLESS ONLY 1 ENTRY\n*        2ND POS PARAM IS BIN LOC UNLESS ONLY 2 ENTRIES\n*        3RD POS PARAM IS EST TIME UNLESS ONLY 3 ENTRIES\n*        LAST ENTRY IS ALWAYS PROGRAMMER NAME\n*\n**********************************************************************\n*\nJOBSTART LABEL\n*\n         XC    LASTEXEC,LASTEXEC NO PREVIOUS EXEC CARD\n         LA    R2,STRJKEY     LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\n         LA    R2,1(R2)       INCR PAST JOB POSITIONAL PARM KEYWORD\n         SLR   R15,R15        CLEAR REGISTER FOR IC\n         IC    R15,0(R2)      LOAD NUMBER OF POS SUBPARAMS\n         CH    R15,=H'3'      SEE IF THREE (JOBNAME, ACCT, PRMRNAME)\n         LA    R15,42         SET ERROR NUMBER\n         BNE   JOBERR         AND INDICATE ERROR\n*\nJOBCK1   LA    R2,1(R2)       INCR PAST NUM OF POS SUBPARAMS\nJOBNM    SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)     LOAD JOB NAME LENGTH\n         BZ    JOBNM2         LENGTH ZERO, DO NOT MOVE\n         CH    R3,=H'8'       SEE IF LENGTH > 8\n         BNH   JOBNM3         NO, CONTINUE\n         LA    R15,3          SET ERROR NUMBER\n         B     JOBERR         BYPASS FIELDS\nJOBNM3   BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE1       MOVE JOB NAME TO SAVE TABLE\n         LA    R3,1(R3)       RESTORE LENGTH\nJOBNM2   LA    R2,1(R3,R2)    INCREMENT PAST JOB NAME\n*\nJOBACT   SLR   R4,R4          CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)     INSERT CONTROL BYTE\n         BNM   JOBACT1        HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT\n         CH    R4,=H'2'       COMPARE TO 2\n         BL    JOBACT1        ONLY ONE PARAMETER, ISSUE MESSAGE\n         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE\n         B     JOBACT2        BRANCH\nJOBACT1  SLR   R3,R3          CLEAR LENGTH COUNT\n         LA    R15,35         SET ERROR NUMBER\n         B     JOBERR         BYPASS FIELDS\n*\nMOVE1    MVC   JNAME(0),1(R2) ********* EXECUTED *********\n*\n         EJECT\n**********************************************************************\n*\n*    WE ARE CHECKING THE ACCOUNTING FIELDS FOR FORMATTING\n*    ERRORS. THE LENGTH OF THE ACCOUNT NUMBER IS 10, & ROOM NUM\n*    4. ACCOUNT NUMBER AND ROOM NUMBER ARE REQUIRED, AND MUST\n*    BE ALPHANUMERIC. PROGRAMMER NAME IS ALSO REQUIRED, AND\n*    MUST BE 20 BYTES OR LESS.\n*\n**********************************************************************\n*\nJOBACT2  ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH\n         BNZ   JOBACT2A       NOT ZERO, BRANCH\n         LA    R15,35         SET ERROR NUMBER\n         BAL   R14,ERRORTN    GO ISSUE ERROR MSG\n         B     JOBACT13       BYPASS ACCT NUM\n*\n**********************************************************************\n*         CHECK THE LENGTH OF THE ACCOUNT NUMBER FOR 10.\n**********************************************************************\n*\nJOBACT2A CH    R3,=H'10'      COMPARE LENGTH TO 10\n         BE    JOBACT3        ACCT LENGTH = 10, BRANCH\n         CH    R3,=H'8'       COMPARE LENGTH TO 8                 TGB35\n         BE    JOBACT3        ACCT LENGTH = 8, BRANCH             TGB35\n         LA    R15,4          SET ERROR NUMBER\n         B     JOBERR         BYPASS FIELDS\n*\nMOVE2    MVC   JACCTNO(0),1(R2)    *********** EXECUTED ************\nMOVE16   MVC   JACCT(0),1(R2)      *********** EXECUTED ************\n*\n*\nJOBACT3  BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE2       MOVE ACCT NUM TO SAVE TABLE\n         EX    R3,MOVE16      MOVE ACCT NUM TO WORK AREA\n         LA    R3,1(R3)       RESTORE LENGTH\n         STC   R3,JACCTLEN    SAVE LENGTH OF ACCT NUM\n*\n**********************************************************************\n*               CHECK ACCOUNT NUMBER FOR ALPHANUMERIC\n**********************************************************************\n*\n         LA    R1,1(R2)       POINT TO ACCOUNT NUMBER\n         LR    R5,R3          GET LENGTH OF FIELD                 TGB35\n*\nJOBACT5  BAL   R14,ALPHANUM   SEE IF ALPHANUMERIC\n         BNZ   JOBACT7        NO - NOT ALPHA\n         LA    R1,1(R1)       INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R5,JOBACT5     LOOP UNTIL DONE\n         B     JOBACT8        GO CHECK REST OF ACCOUNTING FIELD\n*\nJOBACT7  LA    R15,36         SET ERROR NUMBER\n         BAL   R14,ERRORTN    GO ISSUE ERROR MSG\n*\n**********************************************************************\n*        CHECK ROOM NUMBER FOR LENGTH OF 4 AND ALPHANUMERIC.\n**********************************************************************\n*\nJOBACT8  LA    R2,1(R3,R2)    INCREMENT PAST ACCOUNT NUMBER\n         ICM   R3,1,0(R2)     LOAD LENGTH OF ROOM NUMBER\n         BNZ   JOBACT9        NOT ZERO, BRANCH\n         LA    R15,35         SET ERROR NUMBER\n         B     JOBERR         GO ISSUE ERROR MESSAGE  NEW\n*\nJOBACT9  CH    R3,=H'4'       COMPARE LENGTH TO 4\n         BE    JOBACT9A       ROOM NUMBER = 4, BRANCH\n         LA    R15,18         SET ERROR NUMBER\n         BAL   R14,ERRORTN    GO ISSUE ERROR MSG\n         B     JOBACT13       SKIP ALPHANUMERIC TEST\n*\nJOBACT9A LA    R1,1(R2)       POINT TO ROOM NUMBER\n         L     R15,JCTADDR    POINT TO JCT                        TGB41\n         USING JCT,R15        AND USE                             TGB41\n         MVC   JCTROOMN,0(R1) MOVE ROOM NUMBER TO JCT             TGB41\n         DROP  R15                                                TGB41\n         LA    R5,4           SET LENGTH OF FIELD\nJOBACT10 BAL   R14,ALPHANUM   SEE IF ALPHANUMERIC\n         BNZ   JOBACT12       NO - NOT ALPHA\n         LA    R1,1(R1)       INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R5,JOBACT10    LOOP UNTIL DONE\n         B     JOBACT13       GO CHECK REST OF ACCOUNTING FIELD\n*\nJOBACT12 LA    R15,37         SET ERROR NUMBER\n         BAL   R14,ERRORTN    GO ISSUE ERROR MSG\n*\nJOBACT13 S     R4,=F'2'       DECREMENT FOR TWO PARMS ALREADY PASSED\nJOBACT14 LA    R2,1(R3,R2)    INCREMENT PAST PARM\n         ICM   R3,1,0(R2)     LOAD LENGTH OF NEXT PARM\n         LTR   R4,R4          TEST FOR ZERO\n         BZ    JOBPGMR        YES, GO HANDLE PROGRAMMER NAME\n         BCTR  R4,0           DECREMENT COUNTER\n         B     JOBACT14       LOOP UNTIL PROCESSED ALL ACCT FIELDS\n*\n**********************************************************************\n*                   SAVE THE PROGRAMMER NAME\n**********************************************************************\n*\nJOBPGMR  ICM   R3,1,0(R2)     LOAD PGMR NAME LENGTH\n         BNZ   JOBPGMR1       NO, CONTINUE\n         LA    R15,6          SET ERROR NUMBER\n         B     JOBERR         BYPASS FIELDS\n*\nJOBPGMR1 CH    R3,=H'20'      SEE IF LENGTH > 20\n         BNH   JOBPGMR2       NO, CONTINUE\n         LA    R15,5          SET ERROR NUMBER\n         B     JOBERR         BYPASS FIELDS\n*\nJOBPGMR2 CH    R3,=H'10'      SEE IF LENGTH > 10\n         BNH   PGMR10         IF NOT > 10, OK\n         LH    R3,=H'10'      MAKE LENGTH = 10\n*\nPGMR10   BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE3       MOVE PGMR NAME TO SAVE TABLE\n         ICM   R3,1,0(R2)     RELOAD PGMR NAME LENGTH\n         CLC   20(2,R2),=X'0080'\n         BNE   JOBLOOP\n         OI    JOBIND,X'20'\n         B     JOBLOOP        BYPASS FIELDS\n*\nMOVE3    MVC   JPGMRNM(0),1(R2)    *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*\n*    WE ARE LOOKING FOR INVALID KEYWORDS OR KEYWORDS HAVING\n*    ILLEGAL VALUES OR OTHER THAN DEFAULT\n*\n*    KEYWORD ENTRIES ARE NORMALLY AS FOLLOWS:\n*        1)      1 BYTE HEX KEYWORD\n*        2)      1 BYTE NUMBER OF SUBPARAMETERS\n*        3)      LIST OF POSITIONAL SUBPARAMETERS EACH PRECEDED BY A\n*            1 BYTE LENGTH FIELD\n*    THERE ARE OCCASIONS WHEN THE POSITIONAL SUBPARAMETERS WILL\n*    HAVE POSITIONAL SUBPARAMETERS THEMSELVES\n*    THIS WILL BE FLAGGED IN THE LENGTH FIELD FOR THAT SUBPARAM\n*    BY A HIGH ORDER BIT IN THE FIELD.      IN THIS CASE, THIS IS NOT\n*    A LENGTH FIELD, BUT A COUNT OF SUBPARAMETERS, WHICH WILL BE\n*    A LIST OF PARAMETERS, EACH PRECEDED BY A 1 BYTE LENGTH FIELD.\n*    THUS THE ENTRY FOR A SUBPARAMETER WITH SUBPARAMETERS WILL\n*    APPEAR AS FOLLOWS:\n*        1)      A 1 BYTE NUMBER OF SUBPARAMS AS INDICATED BY A\n*            HIGH ORDER BIT\n*        2)      A LIST OF SUBPARAMETERS EACH PRECEDED BY A 1 BYTE\n*            LENGTH FIELD\n*\n**********************************************************************\n*\nJOBPARMS CLI   0(R2),ENDK     END OF TEXT STRING?????\n         BNE   JCLASS         NO, BRANCH\n*\n**********************************************************************\n*        CHECK FOR ADDRSP=REAL WITH REGION>256K\n**********************************************************************\n*\n*  THERE IS A LOOPHOLE HERE, WHAT IF REGION HAS NOT BEEN SPECIFIED YET\n*\n         TM    JOBIND,JOBADDR SEE IF ADDRSP=REAL WAS SPECIFIED\n         BNO   GETNEXT        NO, BYPASS CHECK\n         LH    R15,REGION     GET REGION SIZE\n         CH    R15,=H'256'    CHECK FOR REGION>256K\n         BNH   GETNEXT        LESS THAN 256K, OK\n         LA    R15,7          SET ERROR NUMBER\n         B     GETERR         ERROR\n*\n**********************************************************************\n*                           JOB CLASS\n**********************************************************************\n*\n* NOTE: FOR SOME REASON - WE ONLY CHECK RACF AUTHORITY ON JOB\n*       CLASSES IN THE EX6TABLE. WATCH OUT FOR THIS.\n*\n**********************************************************************\n*\nJCLASS   CLI   0(R2),CLASSJK  SEE IF CLASS=KEY\n         BNE   JMSG           NO, BRANCH\n*\n         MVC   INCLASS,3(R2)  SAVE INPUT CLASS\n*\n**********************************************************************\n*       DETERMINE IF JOB WAS SUBMITTED IN A PRODUCTION JOBCLASS\n*         - IF SO, VALIDATE AUTHORITY\n*         - FAIL JOB IF NOT AUTH\n**********************************************************************\n*\n         L     R3,EXCPTAB          GET ADDRESS OF EXCEPTION TABLE\nEXCEPT1  CLI   0(R3),X'FF'         END OF TABLE ?\n         BE    JOBLOOP             YES, BYPASS VALIDATION AND GET OUT\n         CLC   INCLASS,0(R3)       IS THIS AN EXCEPTION ?\n         BE    JCLASS1             YES, GO VALIDATE\n         LA    R3,1(R3)            INCREMENT BY 1 BYTE\n         B     EXCEPT1             LOOP\n*\nJCLASS1  SCECHK =C'RJCL',INCLASS,1 VALIDATE THE SUBMISSION        TGB11\n         BZ    JCLASS2             ERROR                          TGB36\n         LA    R15,38              SET ERROR NUMBER               TGB36\n         MVC   SAVEIND,JOBIND      SAVE CURRENT ERROR FLAG        TGB36\n         BAS   R14,ERRORTN         CALL ERROR ROUTINE             TGB36\n         MVC   JOBIND,SAVEIND      RESTORE ERROR FLAG             TGB36\n         B     JOBLOOP             GET NEXT JOB PARM              TGB36\n*\nJCLASS2  OI    JOBIND,JOBPROD      AUTHORIZED, TURN ON PRODUCTION FLAG\n         B     JOBLOOP             GO GET NEXT PARAMETER\n*\n         EJECT\n**********************************************************************\n*                         MESSAGE CLASS\n**********************************************************************\n*\nJMSG     CLI   0(R2),MSGCLAJK SEE IF MSGCLASS=KEY\n         BNE   JADDR          NO, BRANCH\n*\n         MVC   JMSGCLAS,3(R2) SAVE MSG CLASS\n*\n         SCECHK =C'RMSG',JMSGCLAS,1 VALIDATE THE MSGCLASS         TGB11\n         LA    R15,39              SET ERROR NUMBER\n         BNZ   JOBERR              ERROR\n*\n         EJECT\n**********************************************************************\n*                          JOB ADDRSPC\n**********************************************************************\n*\nJADDR    CLI   0(R2),ADRSPJK  SEE IF ADDRSPC= KEY\n         BNE   JESTIME        NO, BRANCH\n*\n         CLC   3(4,R2),=C'REAL'  IS REAL SPECIFIED ?\n         BNE   JOBLOOP        NO,  BYPASS FIELD\n         OI    JOBIND,JOBADDR SET FLAG, REAL STORAGE REQUESTED\n         B     JOBLOOP\n*\n         EJECT\n**********************************************************************\n*                             JOB TIME\n**********************************************************************\n*\nJESTIME  CLI   0(R2),TIMEJK   SEE IF TIME= KEY\n         BNE   JREGN          NO, BRANCH\n*\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR\n         SLR   R4,R4          CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)     INSERT NUMBER OF SUBPARAMETERS\n         BZ    JOBLOOP        NONE, IGNORE\n         MVC   MAXTIME,=F'1'  SET DEFAULT CPU TIME\n         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE\n*                                                                 TGB38\n         CLI   0(R2),7        7 BYTE PARM ?                       TGB38\n         BNE   JESTIME0       NO  - CONTINUE                      TGB38\n         CLC   =C'MAXIMUM',1(R2) TIME=MAXIMUM ?                   TGB38\n         BNE   JESTIME1       NO  - CONTINUE                      TGB38\n         L     R1,=F'357912'  YES - GET MAX TIME IN SECONDS       TGB38\n         B     JESTIME2       AND CONTINUE                        TGB38\nJESTIME1 CLC   =C'NOLIMIT',1(R2) TIME=NOLIMIT ?                   TGB38\n         BNE   JESTIME0       NO  - GO TRY DEC CONVERSION         TGB38\n         L     R1,=F'1440'    YES - THEN SET TIME=1440            TGB38\n         OI    JOBIND,JOBT1440  SET BIT ALSO                      TGB38\n         B     JESTIME2       AND CONTINUE                        TGB38\nJESTIME0 DS    0H                                                 TGB38\n         CLI   0(R2),6        IS TIME OVER 6 CHARACTERS ?         TGB38\n         BH    JESTIME7       YES - ERROR                         TGB38\n         BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    JESTIME2       NO PARM - TRY SECONDS\n         BNZ   JESTIME4       NOT NUMERIC - ERROR\n*\n         CH    R1,=H'0'       SEE IF ZERO\n         BE    JESTIME2       ZERO, ONLY SECONDS ENTERED, GET'EM\n         CH    R1,=H'1440'    SEE IF TIME = 1440\n         BNE   JESTIME2       NO, CHECK FOR SECONDS\n         OI    JOBIND,JOBT1440 INDICATE TIME=1440 SPECIFIED\n*\nJESTIME2 M     R0,=F'60'      CONVERT TO SECONDS\n         ST    R1,MAXTIME     SAVE CPU TIME\n         CH    R4,=H'2'       SECONDS ?\n         BNE   JESTIME5       NO, GET OUT\n         SLR   R3,R3          CLEAR FOR ICM\n         ICM   R3,1,0(R2)     RELOAD LENGTH OF MINUTES\n         LA    R2,1(R3,R2)    INCREMENT PAST MINUTES\n*\n         BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    JESTIME5       NO PARM - CHECK FOR 1440\n         BNZ   JESTIME4       NOT NUMERIC - ERROR\n*\n         CH    R1,=H'0'       SEE IF ZERO\n         BE    JOBLOOP        YES, BAIL OUT\n*\n         L     R0,MAXTIME     RETRIEVE MINUTES\n         AR    R0,R1          ADD SECONDS\n         ST    R0,MAXTIME     PUT IT BACK\n*\n**********************************************************************\n*             CALL SCECHK TO VALIDATE TIME=1440 AUTH.\n**********************************************************************\n*\nJESTIME5 TM    JOBIND,JOBT1440     WAS TIME=1440 SPECIFIED ?\n         BNO   JOBLOOP             NO, SKIP CHECK\n*\n         SCECHK =C'RMSC',=C'TIME',4  VALIDATE TIME=1440           TGB11\n         LA    R15,40              SET ERROR NUMBER\n         BNZ   JOBERR              ERROR\n         B     JOBLOOP             GO GET NEXT PARM\n*\nJESTIME4 LA    R15,8               SET ERROR NUMBER\n         B     JOBERR\n*\nJESTIME7 LA    R15,49              SET ERROR NUMBER\n         B     JOBERR\n*\n         EJECT\n**********************************************************************\n*                           JOB REGION\n**********************************************************************\n*\nJREGN    CLI   0(R2),REGINJK  SEE IF REGION= KEY\n         BNE   JOBLOOP        NO, GET OUT\n*\n         LA    R2,2(R2)       INCREMENT PAST KEY, & NO OF FIELDS\n*\n         BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    JOBLOOP        NO PARM - DO NOTHING\n         LA    R15,29         SET ERROR NUMBER\n         BNZ   JOBERR         NOT NUMERIC - ERROR\n*\n         STH   R1,REGION      STORE REGION SIZE IN TABLE\n         B     JOBLOOP        GET OUT\n*\n         EJECT\n**********************************************************************\n*\n*    THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING\n*    PROCESSED. NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR\n*    FIELD IS A COUNT OF SUBPARAMETERS. FOLLOWING THE COUNT\n*    WILL BE A LENGTH OR DESCRIPTOR FIELD. IF THE HIGH ORDER\n*    BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF\n*    SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.\n*    IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY\n*    A LENGTH FIELD FOR THE FIRST SUBPARAMETER. IF THE HIGH\n*    ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A\n*    SINGLE SUBPARAMETER.\n*                                                                 TGB12\n*    NOTE: IF ENTERED AT 'JOBERR', R15 MUST CONTAIN AN ERROR MSG  TGB12\n*          NUMBER.                                                TGB12\n*                                                                 TGB12\n**********************************************************************\n*\nJOBERR   BAS   R14,ERRORTN    CALL ERROR MESSAGE ROUTINE          TGB12\n*\nJOBLOOP  LABEL\n         L     R2,PARMADDR    RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5          CLEAR REGISTER FOR ICM\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)     LOAD SUBPARAMETER COUNT\n         BNZ   JOBLOOP1       OK, BRANCH INTO ROUTINE\n         LA    R2,1(R2)       NONE, INCREMENT PAST COUNT\n         B     JOBLOOP5       AND GET OUT OF ROUTINE\nJOBLOOP1 LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR\nJOBLOOP2 SLR   R4,R4          CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)     LOAD PARAMETER LENGTH\n         BNM   JOBLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE\n         B     JOBLOOP4       BRANCH\nJOBLOOP3 LA    R4,1           SET PARAM COUNT TO 1\nJOBLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)    INCREMENT PAST PARM\n         BCT   R4,JOBLOOP4    LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,JOBLOOP2    LOOP UNTIL PROCESSED ALL PARMS\nJOBLOOP5 ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\n         B     JOBPARMS       CONTINUE\n*\nJOBERR2  BAS   R14,ERRORTN    CALL ERROR MESSAGE ROUTINE          TGB40\n         B     GETNEXT        AND IGNORE THIS CARD                TGB40\n*\n*\n         TITLE 'JES2 EXIT 6 - EXEC CARD PROCESSING'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                       E X E C C A R D\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n*\n*    THE TEXT OF THE EXEC CARD TEXT IS AS FOLLOWS\n*        1)      2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF\n*        2)      1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS\n*        3)      1 BYTE OF MISCELLANEOUS INDICATORS\n*        4)      1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN\n*        5)      1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS\n*            THE 1ST POS PARAMETER IS THE STEP NAME\n*            ALL OTHER POS PARAMETERS WILL BE IGNORED\n*        6)      VARIABLE LENGTH LIST OF EXEC POS PARAMETERS\n*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD\n*        7)      VARIABLE LENGTH LIST OF KEYWORD PARAMETERS\n*            EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF\n*            POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF\n*            SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD\n*            WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER\n*            POSITIONAL PARAMETER.\n*\n**********************************************************************\n*\nEXECARD  LABEL\n*\n**********************************************************************\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO\n**********************************************************************\n*\nEXECUPDT L     R7,LASTEXEC     LOAD ADDR OF LAST EXEC ENTRY\n         LTR   R7,R7           SEE IF ADDR = 0\n         BZ    EUPDT1          IF ZERO, NO UPDATE\n         MVC   ETAPES,TAPECNT  MOVE STEP TAPE UNIT CNT TO TABLE\n         MVC   ETIMES,EXECTIME MOVE STEP TIME TO TABLE\n         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT\n         XC    LASTEXEC,LASTEXEC ZERO ADDR OF LAST EXEC ENTRY\nEUPDT1   TM    STREINDC,ETXPRCV STATEMENT INVOKE A PROCEDURE?\n         BO    PROCARD        YES, BRANCH\n*\n**********************************************************************\n*               INITIALIZE NEW STEP ENTRY IN TABLE\n**********************************************************************\n*\nEXECINIT LH    R15,ENTCOUNT   LOAD TABLE ENTRY COUNT\n         LA    R15,1(R15)     ADD 1 TO COUNT\n         CH    R15,MAXENTS    SEE IF MAXIMUM REACHED\n         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT\n         STH   R15,ENTCOUNT   STORE NEW ENTRY COUNT\n         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY IN TABLE\n         LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY\n         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY IN TABLE\n         ST    R7,LASTEXEC    SAVE ADDR OF LAST EXEC ENTRY\n         MVI   ENTRYTYP,TYPEXEC SET TO EXEC ENTRY\n         MVI   EENTRY,C' ' BLANK 1ST BYTE OF EXEC INFO\n         MVC   EENTRY+1(23),EENTRY BLANK MOST OF EXEC INFO\n         XC    ELIBIND(7),ELIBIND ZERO REST OF EXEC INFO\n         LH    R3,REGION      GET REGION FROM JOB CARD\n         CH    R3,=H'256'     GREATER THAN STEP DEFAULT?\n         BNH   EX1            NO, SET STEP DEFAULT\n         STH   R3,EREGION     YES, SET STEP REGION SAME AS JOB\n         B     EX2\nEX1      MVC   EREGION,=H'256' SET DEFAULT REGION SIZE TO 256K\nEX2      TM    STREINDC,ETXPROC STATEMENT FROM A PROC??\n         BNO   EINIT1         NO, BRANCH\n         MVC   EJSTEP,SAVEPROC MOVE JOB STEP NAME TO TABLE\nEINIT1   TM    STREINDC,ETXSTPLB STEP HAVE STEPLIB DD??\n         BNO   EINIT2         NO, BRANCH\n         OI    ELIBIND,ESTEPLIB SET INDICATOR IN TABLE\nEINIT2   TM    JOBIND,JOBLIB  DOES JOB HAVE JOBLIB??\n         BNO   EXECSTAR       NO, BRANCH\n         OI    ELIBIND,EJOBLIB SET INDICATOR IN TABLE\nEXECSTAR MVC   ECARDNO,CARDNO SAVE CARD NUMBER OF THIS STATEMENT\n         LA    R2,STREKEY     LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\nEXECPARM CLI   0(R2),ENDK     END OF TEXT STRING?????\n         BE    PROCSEAR       YES, GO SEE IF FROM A PROC\n*\n         EJECT\n**********************************************************************\n*                          EXEC STEPNAME\n**********************************************************************\n*\nESTEPN   CLI   0(R2),EXECK    SEE IF STEPNAME KEY\n         BNE   EPGM           NO, BRANCH\n*\n         SLR   R4,R4          CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)     LOAD NUMBER OF SUBPARAMS\n         BZ    EXELOOP        ZERO, NO STEP NAME\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)     LOAD LENGTH OF 1ST POS SUBPARAM\n         BZ    EXELOOP        ZERO, NO STEP NAME, BRANCH\n         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED\n         BNH   ESTEPN2        NO, CONTINUE\n         LA    R15,11         SET ERROR NUMBER\n         B     EXECERR        GET OUT\n*\nESTEPN2  BCTR  R3,0           MAKE MACHINE LENGTH\n         TM    STREINDC,ETXPROC STATEMENT FROM A PROC\n         BO    ESTEPN1        YES, THEN NAME IS PROC STEP NAME\n         EX    R3,MOVE5       MOVE NAME TO JOBSTEP NAME\n         B     EXELOOP        BRANCH\n*\nMOVE5    MVC   EJSTEP(0),3(R2)     *********** EXECUTED ************\n*\nESTEPN1  EX    R3,MOVE6       MOVE NAME TO PROCSTEP NAME\n         B     EXELOOP        BRANCH\n*\nMOVE6    MVC   EPSTEP(0),3(R2)     *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*                         EXEC PGM\n**********************************************************************\n*\nEPGM     CLI   0(R2),PGMEK    SEE IF PGM= KEY\n         BNE   EREGN          NO, BRANCH\n*\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)     LOAD LENGTH OF PGM NAME\n         BZ    EXELOOP        ZERO, NULL, BRANCH\n         BM    EXELOOP        HIGH BIT ON, REFERBACK, IGNORE\n         CH    R3,=H'8'       SEE IF LENGTH > 8\n         LA    R15,12         (SET ERROR NUMBER)\n         BH    EXECERR        YES - ERROR\n*\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE7       MOVE PGM NAME TO TABLE\n*\n**********************************************************************\n*          CALL SCECHK TO VALIDATE SUPER ZAP AUTHORITY\n**********************************************************************\n*\n         CLC   =C'IMASPZAP',3(R2) ZAP PGM NAME ?\n         BE    EPGM1          YES, VALIDATE AUTHORITY\n         CLC   =C'AMASPZAP',3(R2) ZAP NAME ?\n         BNE   EXELOOP        NO, GET OUT\n*\nEPGM1    SCECHK =C'RMSC',=C'ZAP',3 VALIDATE THE SUBMISSION        TGB11\n         LA    R15,10              SET ERROR NUMBER\n         BNZ   EXECERR             ERROR\n         B     EXELOOP             GET OUT\n*\nMOVE7    MVC   EPGMNM(0),3(R2)     *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*                          EXEC REGION\n**********************************************************************\n*\nEREGN    CLI   0(R2),REGINEEK SEE IF REGION= KEY\n         BNE   EREGN@         NO, BRANCH\n*\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)     LOAD SUBPARAMETER COUNT\n         BZ    EXELOOP        NO SUBPARAMETERS, BRANCH\n         LA    R2,1(R2)       INCREMENT PAST NUMBER OF FIELDS\n*\nEREGN0   ICM   R3,1,0(R2)     LOAD LENGTH OF REGION PARAM\n         BZ    EXELOOP        ZERO, NULL, BRANCH\n         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED\n         LA    R15,13         (SET ERROR NUMBER)\n         BH    EXECERR        YES - ERROR\n*\n         LA    R15,0(R3,R2)   POINT TO LAST CHAR OF REGION SIZE\n         CLI   0(R15),C'K'    END IN 'K'\n         BNE   EREGN5         NO, BRANCH\n         BCTR  R3,0           REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'\n         B     EREGN1         SKIP CHECK FOR MEGABYTES\n*\nEREGN5   CLI   0(R15),C'M'    END IN 'M'\n         BNE   EREGN1         NO, BRANCH\n         BCTR  R3,0           REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONM REMEMBER REGION SIZE IN 'M'\n*\nEREGN1   BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    EREGN1         NO PARM - WE TESTED THIS ALREADY\n         LA    R15,14         SET ERROR NUMBER\n         BNZ   EXECERR        ERROR\n*\n         TM    ELIBIND,EREGIONK+EREGIONM    WAS A LETTER SPECIFIED ?\n         BNZ   EREGN3         YES - BRANCH\n         SRA   R1,10          DIVIDE BY 1024 FOR 'K' VALUE\n         BNZ   EREGN3         NOT ZERO - USE IT                   TGB14\n         LA    R1,1           ZERO - SHOW 1K USED MINIMUM         TGB14\nEREGN3   STH   R1,EREGION     STORE REGION SIZE IN TABLE\n         B     EXELOOP        BRANCH\n*\n         EJECT\n**********************************************************************\n*                         EXEC REGION.\n**********************************************************************\n*\nEREGN@   CLI 0(R2),REGINPEK SEE IF REGION. KEY\n         BNE   ETIME          NO, BRANCH\n*\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD\n         SLR   R4,R4          ZERO REGISTER\n         ICM   R4,1,0(R2)     LOAD NUMBER OF SUBPARAMS\n         LA    R15,13         (SET ERROR NUMBER)\n         BZ    EXECERR        ZERO - ERROR\n*\n         CH    R4,=H'2'       CHECK NUMBER OF SUBPARAMS\n         BH    EXECERR        > 2 - ERROR\n*\n         LA    R2,1(R2)       INCREMENT PAST NUMBER OF SUBPARAMETERS\n         SLR   R3,R3          ZERO REGISTER\n         ICM   R3,1,0(R2)     LOAD LENGTH OF STEPNAME\n         BZ    EXECERR        ZERO - ERROR\n*\n         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED\n         BH    EXECERR        YES - ERROR\n*\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,COMPARE3    SEE IF OVERRIDE FOR CURRENT STEP\n         BNE   EXELOOP        NO, GET OUT\n*\n         LA    R2,2(R2,R3)    SET REG TO START OF 2ND PARAM\n         B     EREGN0         BRANCH INTO MIDDLE OF EREGN ROUTINE\n*\nCOMPARE3 CLC   1(0,R2),EPSTEP      *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*                            EXEC TIME\n**********************************************************************\n*\nETIME    CLI   0(R2),TIMEEEK  SEE IF TIME= KEY\n         BNE   ETIME@         NO, BRANCH\n*\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR\n         SLR   R1,R1          CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)     LOAD NUMBER OF SUBPARAMETERS\n         BZ    EXELOOP        ZERO, IGNORE\n*\n         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE\n*\nETIME0   CLI   0(R2),7        7 BYTE PARM ?                       TGB38\n         BNE   ETIMEX0        NO  - CONTINUE                      TGB38\n         CLC   =C'MAXIMUM',1(R2) TIME=MAXIMUM ?                   TGB38\n         BNE   ETIMEX1        NO  - CONTINUE                      TGB38\n         L     R1,=F'357912'  YES - GET MAX TIME IN SECONDS       TGB38\n         B     ETIME2         AND CONTINUE                        TGB38\nETIMEX1  CLC   =C'NOLIMIT',1(R2) TIME=NOLIMIT ?                   TGB38\n         BNE   ETIMEX0        NO  - GO TRY DEC CONVERSION         TGB38\n         L     R1,=F'1440'    YES - THEN SET TIME=1440            TGB38\n         OI    JOBIND,EXEC1440  SET BIT ALSO                      TGB38\n         B     ETIME2         AND CONTINUE                        TGB38\nETIMEX0  DS     0H                                                TGB38\n         CLI   0(R2),6        IS TIME OVER 6 CHARACTERS ?         TGB38\n         BH    ETIMEX7        YES - ERROR                         TGB38\n*                                                                 TGB38\n         BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    ETIME2         NO PARM - GO TRY NEXT\n         BNZ   ETIME4         ERROR\n*\n         CH    R1,=H'1440'    SEE IF TIME = 1440\n         BNE   ETIME2         NO, CHECK FOR SECONDS\n         OI    JOBIND,EXEC1440 INDICATE TIME=1440 SPECIFIED\n*\nETIME2   M     R0,=F'60'      CONVERT TO SECONDS\n         ST    R1,EXECTIME    SAVE CPU TIME\n         CH    R3,=H'2'       SECONDS GIVEN ?\n         BNE   ETIME5         NO, GET OUT\n         SLR   R4,R4          CLEAR FOR ICM\n         ICM   R4,1,0(R2)     RELOAD LENGTH OF MINUTES\n         LA    R2,1(R4,R2)    INCREMENT PAST MINUTES\n*\n         BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    ETIME5         NO PARM - GO VALIDATE AUTH\n         BNZ   ETIME4         ERROR\n*\n         L     R0,EXECTIME    RETRIEVE MINUTES\n         AR    R0,R1          ADD SECONDS\n         ST    R0,EXECTIME    PUT IT BACK\n*\nETIME5   L     R0,EXECTIME         RETRIEVE STEP TIME IN SECONDS\n         C     R0,MAXEXEC          COMPARE TO MAX STEP TIME SPECIFIED\n         BNH   ETIME6              LOWER, LEAVE MAXEXEC ALONE\n         ST    R0,MAXEXEC          HIGHER, STORE NEW VALUE\n*\nETIME6   TM    JOBIND,EXEC1440     WAS TIME=1440 SPECIFIED ON EXEC ?\n         BNO   EXELOOP             NO, GET OUT\n         TM    JOBIND,JOBT1440     WAS TIME=1440 SPECIFIED ON JOB ?\n         BO    EXELOOP             YES, AUTHORIZED FROM JOB CARD\n*\n         SCECHK =C'RMSC',=C'TIME',4 VALIDATE THE SUBMISSION       TGB11\n         LA    R15,16              SET ERROR NUMBER\n         BNZ   EXECERR             ERROR\n         B     EXELOOP             GO GET NEXT PARM\n*\nETIME4   LA    R15,51              SET ERROR NUMBER\n         B     EXECERR             GET OUT\n*\nETIMEX7  LA    R15,49              SET ERROR NUMBER\n         B     EXECERR             GET OUT\n*\n         EJECT\n**********************************************************************\n*                         EXEC TIME.\n**********************************************************************\n*\nETIME@   CLI 0(R2),TIMEPEK SEE IF TIME. KEY\n         BNE   EADDR          NO, BRANCH\n*\n         SLR   R3,R3          ZERO WORK REG\n         SLR   R4,R4          ZERO WORK REG\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD\n         ICM   R3,1,0(R2)     LOAD NUMBER OF SUBPARAMS\n         BZ    EXELOOP        NO SUBPARAMS, BRANCH\n         CH    R3,=H'3'       SEE IF MORE THAN 3 SUBPARAMS\n         LA    R15,15         (SET ERROR NUMBER)\n         BH    EXECERR        YES - ERROR\n*\n         LA    R2,1(R2)       INCREMENT PAST NUMBER OF SUBPARAMETERS\n         CH    R3,=H'2'       SEE IF AT LEAST 2 SUBPARAMS\n         BL    EXELOOP        ONLY ONE, IGNORE STEPNAME\n         ICM   R4,1,0(R2)     LOAD LENGTH OF STEPNAME\n         BZ    EXELOOP        NO STEPNAME, BRANCH\n         CH    R4,=H'8'       SEE IF MAX LENGTH EXCEEDED\n         BH    EXECERR        YES - ERROR\n*\n         BCTR  R4,0           MAKE MACHINE LENGTH\n         EX    R4,COMPARE3    SEE IF CORRECT STEPNAME\n         BNE   EXELOOP        NO, GET OUT\n*\n         LA    R2,2(R2,R4)    LOAD ADDR OF 2ND SUBPARAM\n         BCTR  R3,0           DROP STEPNAME FROM SUBPARM COUNTER\n         B     ETIME0         BRANCH TO MIDDLE OF ETIME ROUTINE\n*\n         EJECT\n**********************************************************************\n*                 EXEC ADDRSPC OR EXEC ADDRSPC.\n**********************************************************************\n*\nEADDR    CLI   0(R2),ADRSPEEK SEE IF ADDRSPC= KEY\n         BE    EADDR0         YES - BRANCH\n         CLI   0(R2),ADRSPPEK SEE IF ADDRSPC. KEY\n         BNE   EDPRTY         NO\n*\nEADDR0   CLC   3(4,R2),=C'REAL'  IS REAL STORAGE REQUESTED ?\n         BNE   EXELOOP        NO, CONTINUE\n         OI    JOBIND,EXADDR  YES, SET FLAG\n         B     EXELOOP        GET OUT\n*\n         EJECT\n**********************************************************************\n*                   EXEC DPRTY OR EXEC DPRTY.\n**********************************************************************\n*\nEDPRTY   CLI   0(R2),SDPEEK        SEE IF  DPRTY= KEY\n         BE    EDPRTY0             YES - BRANCH\n         CLI   0(R2),SDPPEK        SEE IF  DPRTY. KEY\n         BNE   EXELOOP             NO\n*\nEDPRTY0  SCECHK =C'RMSC',=C'DPRTY',5 VALIDATE AUTHORITY           TGB11\n         LA    R15,19              SET ERROR NUMBER\n         BNZ   EXECERR             ERROR\n         B     EXELOOP             OK\n*\n         EJECT\n**********************************************************************\n*\n*    THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING\n*    PROCESSED. NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR\n*    FIELD IS A COUNT OF SUBPARAMETERS. FOLLOWING THE COUNT\n*    WILL BE A LENGTH OR DESCRIPTOR FIELD. IF THE HIGH ORDER\n*    BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF\n*    SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.\n*    IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY\n*    A LENGTH FIELD FOR THE FIRST SUBPARAMETER. IF THE HIGH\n*    ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A\n*    SINGLE SUBPARAMETER.\n*                                                                 TGB12\n*   NOTE: ENTER AT LABEL 'EXECERR' WILL ISSUE MESSAGE NUMBER      TGB12\n*         (PRE-LOADED INTO R15)                                   TGB12\n*                                                                 TGB12\n**********************************************************************\n*\nEXECERR  BAS   R14,ERRORTN    ISSUE ERROR MESSAGE                 TGB12\n*\nEXELOOP  LABEL\n         L     R2,PARMADDR    RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5          CLEAR REGISTER FOR ICM\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)     LOAD SUBPARAMETER COUNT\n         BNZ   EXELOOP1       OK, BRANCH INTO ROUTINE\n         LA    R2,1(R2)       NONE, INCREMENT PAST COUNT\n         B     EXELOOP5       AND GET OUT OF ROUTINE\nEXELOOP1 LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR\nEXELOOP2 SLR   R4,R4          CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)     LOAD PARAMETER LENGTH\n         BNM   EXELOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE\n         B     EXELOOP4       BRANCH\nEXELOOP3 LA    R4,1           SET PARAM COUNT TO 1\nEXELOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)    INCREMENT PAST PARM\n         BCT   R4,EXELOOP4    LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,EXELOOP2    LOOP UNTIL PROCESSED ALL PARMS\nEXELOOP5 ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\n         B     EXECPARM       CONTINUE\n*\n         EJECT\n**********************************************************************\n*\n*    THIS ROUTINE WILL INCREMENT THRU THE OUTPUT JCL CARD\n*    PARAMETERS. NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR\n*    FIELD IS A COUNT OF SUBPARAMETERS. FOLLOWING THE COUNT\n*    WILL BE A LENGTH. THIS IS THE LENGTH OF THE KEYWORD.\n*    FOLLOWING THE KEYWORD WILL BE A LENGTH OF THE SUBPARM\n*    VALUE, FOLLOWED BY THE SUBPARM VALUE ITSELF. THIS IS\n*    FOLLOWED BY THE LENGTH OF THE NEXT SUBPARM, AND SO ON.\n*    THE KEYWORD DESCRIPTOR FOR THE OUTPUT VERB IS X'BE'.\n*    THE KEYWORD DESCRIPTOR FOR ALL SUBPARMS IS X'1A'.\n*    THE END OF THE STRING IS FLAGGED BY X'FE'.\n*\n**********************************************************************\n*\nJDTCARD  DS    0H\n*\nJDTLOOP  LA    R2,STRSKEY     POINT TO TEXT STRING\nJDTLOOP1 CLI   0(R2),X'FE'    END OF STRING ?\n         BE    GETNEXT        YES, GO GET ANOTHER STATEMENT\n         SLR   R5,R5          CLEAR REGISTER FOR ICM\n         ICM   R5,1,1(R2)     LOAD SUBPARAMETER COUNT\n         BNZ   JDTLOOP2       OK, BRANCH INTO ROUTINE\n         B     GETNEXT        AND GET OUT OF ROUTINE\nJDTLOOP2 LA    R2,2(R2)       INCREMENT PAST KEYWORD DESCR\nJDTLOOP3 SLR   R3,R3          CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH\n         CH    R3,=H'5'       IS KEYWORD 5 BYTES LONG ?\n         BNE   JDTCARD1       NO, CONTINUE\n         CLC   1(5,R2),=C'CLASS'  IS IT THE CLASS KEYWORD ?\n         BE    JDTCARD3       YES, GO PROCESS\nJDTCARD1 LA    R2,1(R3,R2)    INCREMENT PAST PARM\n         BCT   R5,JDTLOOP3    LOOP UNTIL PROCESSED ALL PARMS\n         B     JDTLOOP1       LOOP UNTIL PROCESSED ALL PARMS\nJDTCARD2 B     GETNEXT        GO GET ANOTHER STATEMENT\nJDTCARD3 LA    R2,1(R3,R2)    INCREMENT PAST CLASS KEYWORD\n         CLI   1(R2),C'*'     ASTERISK ?\n         BE    GETNEXT        YES, CHECKED ON JOB CARD, GET OUT\n*\n         LA    R1,1(R2)            POINT TO CHARACTER TO CHECK    TGB01\n         BAL   R14,ALPHANUM        CHECK CHARACTER AT (R1)        TGB01\n         LA    R15,52              SET ERROR NUMBER               TGB01\n         BNZ   GETERR              ERROR - NOT ALPHANUMERIC       TGB01\n*\n         SCECHK =C'RMSG',1(R2),1   CHECK SYSOUT AUTH              TGB11\n         BZ    GETNEXT             IF OK - CONTINUE ON WITHOUT ERROR\n         LA    R15,44              SET ERROR NUMBER\n         B     GETERR              ERROR\n*\n         TITLE 'JES2 EXIT 6 - DD CARD PROCESSING'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                       D D     C A R D\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n*\n*    THE TEXT OF THE DD CARD TEXT IS AS FOLLOWS\n*        1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF\n*        2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS\n*        3)  1 BYTE OF MISCELLANEOUS INDICATORS\n*        4)  1 BYTE INDICATOR X'6E' INDICATING DD POS INFORMATION\n*        5)  1 BYTE NUMBER OF DD POSITIONAL PARAMETERS\n*            THE 1ST POS PARAMETER IS THE DDNAME IF PRESENT\n*            ALL OTHER POS PARAMETERS WILL BE IGNORED\n*        6)  VARIABLE LENGTH LIST OF DD POS PARAMETERS\n*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD\n*        7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS\n*            EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF\n*            POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF\n*            SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD\n*            WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER\n*            POSITIONAL PARAMETER.\n*\n**********************************************************************\n*\nDDCARD   LABEL\n*\n         TM    STRDINDC,DTXDDNM  SEE IF DD DDNAME= STATEMENT\n         BO    GETNEXT           YES, BYPASS\n         TM    STRDINDC,DTXDYNAM SEE IF DD DYNAM STATEMENT\n         BO    GETNEXT           YES, BYPASS\n         TM    STRDINDC,DTXSYSIN SEE IF DD INPUT SPOOL FILE\n         BO    GETNEXT           YES, BYPASS\n*\n**********************************************************************\n*        INITIALIZE TEMPORARY ENTRY WHICH WILL BE USED\n*        IF PRIV OR TAPE UNIT\n**********************************************************************\n*\n         XC    UNITIND,UNITIND ZERO UNIT TYPE IND\n         XC    DISPIND,DISPIND ZERO DISP IND\n         MVI   UNITCOUN,X'01' SET DEFAULT UNIT COUNT TO 1\n         MVI   TENTRY,C' '    BLANK FIRST BYTE OF TEMP ENTRY\n         MVC   TENTRY+1(52),TENTRY BLANK ENTIRE TEMP ENTRY\n         XC    TTYPE,TTYPE    ZERO TEMPORARY UNIT TYPE\n         XC    TVOLSER,TVOLSER ZERO TEMP 1ST VOLSER\nDDSTART  LA    R2,STRDKEY     LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\nDDPARM   CLI   0(R2),ENDK     END OF TEXT STRING??\n         BE    DDEND          YES, GO CHECK FOR UPDATE\n*\n         EJECT\n**********************************************************************\n*                           DD DDNAME\n**********************************************************************\n*\nDDDNAME  CLI   0(R2),DDK      SEE IF DDNAME KEY\n         BNE   DDDUMMY        NO, BRANCH                          TGB20\n*\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)     LOAD NUMBER OF SUBPARAMS\n         BZ    DDLOOP         ZERO, NO SUBPARAMS\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)     LOAD LENGTH OF DDNAME\n         BZ    DDLOOP         YES, CONCATINATED DD, LOOP\n         CH    R3,=H'8'       SEE IF MAX LENGTH EXCEEDED\n         LA    R15,20         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE8       MOVE DDNAME TO TEMP ENTRY\n         B     DDLOOP         GO GET NEXT PARAM\n*\nMOVE8    MVC   TDDN(0),3(R2)       *********** EXECUTED ************\n*\n         EJECT                                                    TGB20\n******************************************************************TGB20\n*                           DD DUMMY                              TGB20\n******************************************************************TGB20\n*                                                                 TGB20\nDDDUMMY  CLI   0(R2),DUMMK    SEE IF DUMMY KEY                    TGB20\n         BNE   DDSNAME        NO, BRANCH                          TGB20\n         B     GETNEXT        DUMMY STATEMENTS ARE IGNORED        TGB20\n*                                                                 TGB20\n         EJECT\n**********************************************************************\n*                         DD DSNAME\n**********************************************************************\n*\nDDSNAME  CLI   0(R2),DSNAMEK  SEE IF DSNAME KEY\n         BNE   DDISP          NO, BRANCH\n*\n         CLI   1(R2),0        ANY DSNAME PARM HERE ?              TGB39\n         BE    DDISP          NO, BRANCH                          TGB39\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)     LOAD LENGTH OF DSN\n         BZ    DDLOOP         ZERO, NULL, BRANCH\n         BNM   DSNSTD         HIGH BIT NOT ON, STANDARD DSN\n         CLI   4(R2),C'*'     SEE IF 1ST PARAM = * (REFERBACK)\n         BE    DSNREFBK       YES, REFERBACK\n*\nDSNPDS   LA    R4,3(R2)       LOAD ADDR OF LENGTH OF 1ST PARM\n         SLR   R3,R3          CLEAR R3\n         ICM   R3,1,0(R4)     LOAD LENGTH OF 1ST PARM\n         LA    R4,2(R3,R4)    BUMP TO 1ST CHAR OF 2ND PARM\n         CLI   0(R4),C'-'     MINUS SIGN ?\n         BE    DSNPDS3        YES - MUST BE A GDG\n         CLI   0(R4),C'+'     PLUS SIGN  ?\n         BE    DSNPDS3        YES - MUST BE A GDG\n         CLI   0(R4),C'0'     LESS THAN 0 ?\n         BL    DSNPDS1        YES - MUST BE A PDS\n         CLI   0(R4),C'9'     LESS THAN OR = 9 ?\n         BNH   DSNPDS3        YES - MUST BE A GDG\n*\nDSNPDS1  LA    R4,3(R2)       LOAD ADDR OF LENGTH OF 1ST PARM\n         SLR   R3,R3          CLEAR R3\n         ICM   R3,1,0(R4)     LOAD LENGTH OF DSN\n         CH    R3,=H'44'      SEE OF MAX LENGTH EXCEEDED\n         LA    R15,22         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         MVC   TDSN,BLANKS    CLEAR AREA FOR VARIABLE MVC         TGB24\n         EX    R3,MOVE14      MOVE DSN TO TEMP ENTRY\n         B     DDLOOP         GOT DSNAME                          TGB24\n*\nMOVE14   MVC   TDSN(0),1(R4)       *********** EXECUTED ************\n*\n**********************************************************************\n*       DSNAME LOOKS LIKE A GDG - MOVE OFFSET TO END OF DSNAME\n**********************************************************************\n*\nDSNPDS3  SLR   R3,R3          CLEAR R3\n         ICM   R3,1,2(R2)     LOAD PARAM COUNT BYTE TO R3\n         N     R3,=X'0000007F' TURN OFF HIGH ORDER BIT\n         CH    R3,=H'2'       SEE IF TWO SUBPARAMS\n         LA    R15,21         SET ERROR NUMBER\n         BNE   DDERR          NO - ERROR\n*\n         LA    R4,3(R2)       LOAD ADDR OF START OF 1ST ENTRY\n         IC    R3,0(R4)       LOAD LENGTH OF 1ST ENTRY\n         CH    R3,=H'35'      SEE IF MAX LENGTH EXCEEDED\n         LA    R15,23         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE14      MOVE 1ST PART DSN TO TEMP ENTRY\n         LA    R3,1(R3)       MAKE TRUE LENGTH AGAIN\n         LA    R4,1(R3,R4)    INCREMENT TO 2ND ENTRY\n         LA    R5,TDSN        LOAD ADDR OF TEMPORARY DSN\n         AR    R5,R3          LOAD ADDR WITHIN TDSN FOR GEN #\n         LR    R0,R3          SAVE LENGTH OF 1ST PART DSN\n         ICM   R3,1,0(R4)     LOAD LENGTH OF 2ND PART DSN\n         LA    R15,21         SET ERROR NUMBER\n         BZ    DDERR          YES - ERROR\n*\n         AR    R0,R3          ADD NEW LENGTH OF 2ND PART TO 1ST\n         CH    R0,=H'42'      SEE IF TOTAL LENGTH EXCEEDS MAX\n         LA    R15,23         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         MVI   0(R5),C'('     PUT PARENS FOR GEN #\n         LA    R5,1(R5)       INCREMENT TO START TRUE GEN #\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE15      MOVE GEN # TO TDSN\n         LA    R5,1(R3,R5)    INCREMENT TO END OF TDSN FIELD\n         MVI   0(R5),C')'     FINISH PARENS FOR GEN #\n         B     DDLOOP         GO GET NEXT ENTRY\n*\nMOVE15   MVC   0(0,R5),1(R4)       *********** EXECUTED ************\n*\n**********************************************************************\n*                  DSNAME PROBABLY A REFERBACK\n**********************************************************************\n*\nDSNREFBK BAL   R14,REFBACK    GO TO REFERBACK RTN\n         MVC   TDSN,REFDSN    SAVE REFERBACK DSNAME\n         B     DDLOOP         GO GET NEXT ENTRY\n*\n**********************************************************************\n*                    DSNAME PROBABLY STANDARD\n**********************************************************************\n*\nDSNSTD   CH    R3,=H'44'      SEE IF > MAX LENGTH\n         LA    R15,22         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         CLC   3(8,R2),=C'NULLFILE' SEE IF DSN=NULLFILE\n         BE    GETNEXT        YES, DUMMY, IGNORE STATEMENT\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE9       MOVE DSN TO TEMP ENTRY\n         B     DDLOOP         GO GET NEXT ENTRY\n*\nMOVE9    MVC   TDSN(0),3(R2)       *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*                         DD DISP\n**********************************************************************\n*\nDDISP    CLI   0(R2),DISPK    SEE IF DISP= KEYWORD\n         BNE   DUNIT          NO, BRANCH\n         SLR   R4,R4          CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)     LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP         ZERO, NULL, BRANCH\n         LA    R2,2(R2)       LOAD START ADDR OF SUBPARAMS\n         CH    R4,=H'3'       SEE IF NUMBER > 3\n         LA    R15,23         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         SLR   R5,R5          ZERO WORK REG\nDSPLOO1  LA    R5,1(R5)       ADD 1 TO COUNTER\n         CR    R5,R4          SEE IF ALL PROCESSED\n         BH    DISPCHK        YES, GO CHECK RESULTS\n         SLR   R3,R3          ZERO WORK REG\n         IC    R3,0(R2)       LOAD LEN OF PARAM\n         CH    R5,=H'1'       SEE IF 1ST PARAM\n         BE    DSPLOO2        YES, BRANCH TO PROCESS\n         CH    R5,=H'2'       SEE IF 2ND PARAM\n         BE    DSPLOO7        YES, BRANCH TO PROCESS\n         B     DSPLOO9        BRANCH TO PROCESS\n*\n***********************************************************************\n*                      FIRST DISP PARAMETER\n**********************************************************************\n*\nDSPLOO2  LTR   R3,R3          SEE IF LENGTH = 0\n         BZ    DSPLOO3        YES, GO SET TO NEW\n         CLC   1(3,R2),=C'NEW' SEE IF NEW\n         BNE   DSPLOO4        NO, BRANCH\nDSPLOO3  OI    DISPIND,NEW    SET TO NEW\n         B     DSPLOO14       GO GET NEXT\nDSPLOO4  CLC   1(3,R2),=C'SHR' SEE IF SHR\n         BNE   DSPLOO5        NO, BRANCH\n         OI    DISPIND,SHR    SET TO SHR\n         B     DSPLOO14       GO GET NEXT\nDSPLOO5  CLC   1(3,R2),=C'OLD' SEE IF OLD\n         BNE   DSPLOO6        NO, MUST BE \"MOD\", BRANCH\n         OI    DISPIND,OLD    SET TO OLD\n         B     DSPLOO14       GO GET NEXT\nDSPLOO6  OI    DISPIND,MOD    SET TO MOD\n         B     DSPLOO14       GO GET NEXT\n*\n**********************************************************************\n*                     SECOND DISP PARAMETER\n**********************************************************************\n*\nDSPLOO7  LTR   R3,R3          SEE IF LENGTH = 0\n         BNZ   DSPLOO9        NOT ZERO, NO DEFAULT\n         TM    DISPIND,OLD    SEE IF OLD\n         BO    DSPLOO8        YES, GO SET DEFAULT TO KEEP\n         TM    DISPIND,SHR    SEE IF SHR\n         BO    DSPLOO8        YES, GO SET DEFAULT TO KEEP\n         TM    DISPIND,MOD    SEE IF MOD\n         BO    DSPLOO8        YES, GO SET DEFAULT TO KEEP\n         OI    DISPIND,DELETE SET DEFAULT TO DELETE FOR \"NEW\"\n         B     DSPLOO14       GO GET NEXT\nDSPLOO8  OI    DISPIND,KEEP   SET TO KEEP\n         B     DSPLOO14       GO GET NEXT\n*\n**********************************************************************\n*                     THIRD DISP PARAMETER\n**********************************************************************\n*\nDSPLOO9  LTR   R3,R3          SEE IF LENGTH = 0\n         BZ    DSPLOO14       YES, USE DEFAULT OF PREVIOUS PARAMETER\n         CLC   1(4,R2),=C'KEEP' SEE IF KEEP\n         BNE   DSPLOO10       NO, BRANCH\n         OI    DISPIND,KEEP   SET TO KEEP\n         B     DSPLOO14       GO GET NEXT\nDSPLOO10 CLC   1(4,R2),=C'PASS' SEE IF PASS\n         BNE   DSPLOO11       NO, BRANCH\n         OI    DISPIND,PASS   SET TO PASS\n         B     DSPLOO14       GO GET NEXT\nDSPLOO11 CLC   1(5,R2),=C'CATLG' SEE IF CATLG\n         BNE   DSPLOO12       NO, BRANCH\n         OI    DISPIND,CATLG  SET TO CATLG\n         B     DSPLOO14       GO GET NEXT\nDSPLOO12 CLC   1(6,R2),=C'DELETE' SEE IF DELETE\n         BNE   DSPLOO13       NO, GO SET TO \"UNCATLG\"\n         OI    DISPIND,DELETE SET TO DELETE\n         B     DSPLOO14       GO GET NEXT\nDSPLOO13 OI    DISPIND1,UNCATLG SET TO UNCATLG\nDSPLOO14 LA    R2,1(R3,R2)    INCREMENT TO NEXT ENTRY\n         B     DSPLOO1        LOOP\n*\n**********************************************************************\n*     CHECK RESULTS OF PROCESSING ALL DISP PARAMETERS\n*     IF ONLY 1 DISP PARAMETER WAS ENTERED, THE DEFAULT\n*     FOR THE SECOND PARAMETER MUST BE DETERMINED.\n**********************************************************************\n*\nDISPCHK  CH    R4,=H'1'       SEE IF ONLY 1 ENTRY\n         BNE   DISPEND        NO, DO NOT SET DEFAULT\n         TM    DISPIND,OLD    SEE IF OLD\n         BO    DISPCHK2       YES, BRANCH\n         TM    DISPIND,SHR    SEE IF SHR\n         BO    DISPCHK2       YES, BRANCH\n         TM    DISPIND,MOD    SEE IF MOD\n         BO    DISPCHK2       YES, BRANCH\n*\n**********************************************************************\n*                   DISP=NEW  DEFAULT TO DELETE\n**********************************************************************\n*\nDISPCHK1 OI    DISPIND,DELETE SET TO DELETE\n         B     DISPEND        GET OUT\n*\n**********************************************************************\n*              DISP=OLD, MOD, OR SHR  DEFAULT TO KEEP\n**********************************************************************\n*\nDISPCHK2 OI    DISPIND,KEEP   SET TO KEEP\nDISPEND  B     DDLOOP         GO GET NEXT PARAM\n*\n         EJECT\n**********************************************************************\n*                          DD UNIT\n**********************************************************************\n*\nDUNIT    CLI   0(R2),UNITK    SEE IF UNIT= PARAM\n         BNE   DAFF           NO, BRANCH\n*\n         ICM   R4,1,1(R2)     GET NUMBER OF POS SUBPARAMS\n         BZ    DDLOOP         ZERO, NO POS SUBPARAMS\n         CH    R4,=H'3'       SEE IF NUMBER > 3\n         LA    R15,24         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         LA    R2,2(R2)       LOAD START OF POS PARAMS\n         SLR   R5,R5          ZERO WORK REG\n*\n**********************************************************************\n*    LOOP ON NUMBER OF PARAMETERS.  NOTE THAT THE FIRST\n*    PARAMETER (UNITNAME) AND THE SECOND PARAMETER (UNIT\n*    COUNT) ARE ALL WE ARE INTERESTED IN.\n**********************************************************************\n*\nUNITLOO1 LA    R5,1(R5)       ADD 1 TO COUNT\n         CR    R5,R4          SEE IF PROCESSED ALL SUBPARAMS\n         BH    DDLOOP         YES, GO GET NEXT PARM\n         SLR   R3,R3          ZERO WORK REG\n         ICM   R3,1,0(R2)     LOAD LENGTH OF SUBPARAM\n         BZ    UNITLOO2       ZERO, GO GET NEXT SUBPARAM\n         CH    R3,=H'8'       SEE IF LENGTH > 8\n         LA    R15,24         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         CH    R5,=H'1'       SEE IF 1ST POS SUBP\n         BE    UNITNM1        YES, BRANCH\n         CH    R5,=H'2'       SEE IF 2ND POS SUBP\n         BE    UNITCT         YES, BRANCH\n         B     UNITLOO2       ANYTHING ELSE NOT WANTED\nUNITNM1  DS    0H\n*\n***************************************************************** TGB33\n*              CHECK FOR ROBOT TAPE UNIT AUTHORITY                TGB33\n***************************************************************** TGB33\n*                                                                 TGB33\n         CLC   =C'TAPEK',1(R2)  TAPEK UNIT ?                      TGB33\n         BNE   UNITNM1A       NO  - SKIP THE RACF CHECK           TGB33\n         SCECHK =C'RMSC',=C'TAPEK',5    CHECK FOR TAPEK AUTH      TGB33\n         LA    R15,54         (SET ERROR NUMBER)                  TGB33\n         BNZ   DDERR          NO AUTH - ERROR                     TGB33\nUNITNM1A DS    0H                                                 TGB33\n*\n***************************************************************** TGB42\n*              CHECK FOR REMOTE TAPE UNIT AUTHORITY               TGB42\n***************************************************************** TGB42\n*                                                                 TGB42\n         CLC   =C'TAPE9R',1(R2)  TAPEK UNIT ?                     TGB42\n         BE    UNITNM1B       YES - CHECK RACF AUTH               TGB42\n         CLC   =C'TAPEKR',1(R2)  TAPEK UNIT ?                     TGB42\n         BNE   UNITNM1C       NO  - SKIP THE RACF CHECK           TGB42\nUNITNM1B SCECHK =C'RMSC',=C'TAPER',5    CHECK FOR TAPEK AUTH      TGB42\n         LA    R15,55         (SET ERROR NUMBER)                  TGB42\n         BNZ   DDERR          NO AUTH - ERROR                     TGB42\nUNITNM1C DS    0H                                                 TGB42\n*\n**********************************************************************\n*                    PROCESS UNIT NAME\n**********************************************************************\n*\n         SLR   R15,R15        CLEAR REG 15\n         LA    R1,DEVTABLE    LOAD ADDR OF DEV TABLE\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         CH    R3,=H'2'       POSSIBLE ABSOLUTE ALLOC(CUU)?\n         BNE   UNITNM2        NO, CHK FOR CLASS DEVICES\n         CLI   1(R2),C'0'     CHAN NOS  NUMERIC?\n         BL    UNITNM2        NO, CAN'T BE DEDICATED DEVICE\n         OI    RESOURCE+1,DEDICATE YES, ADD 'DEDICATE' RESOURCE\n*\n**********************************************************************\n*        SEARCH THE DEVICE TABLE FOR A MATCH ON UNIT NAME TO\n*        DETERMINE THE ATTRIBUTES OF THE UNIT NAME.\n**********************************************************************\n*\nUNITNM2  CLI   1(R1),X'00'    SEE IF END OF TABLE\n         BE    UNITNM3        YES, BRANCH\n         IC    R15,1(R1)      INSERT LENGTH OF UNIT NAME\n         EX    R15,COMPARE2   SEE IF UNIT NAME MATCH\n         BE    UNITNM3        YES, BRANCH\n         LA    R1,10(R1)      INCREMENT TO NEXT ENTRY\n         B     UNITNM2        LOOP\n*\nCOMPARE2 CLC   1(0,R2),2(R1)       *********** EXECUTED ************\n*\nUNITNM3  LA    R3,1(R3)       MAKE ORIG LENGTH\n         OC    UNITIND,0(R1)  'OR' IN THE UNIT TYPE BITS\n         B     UNITLOO2       GO PROCESS NEXT POS PARAM\n*\nUNITCT   CLI   1(R2),C'P'     PARALLEL MOUNTING?\n         BNE   UNITCT1        NO, BRANCH\n         MVI   UNITCOUN,C'P'  SET UNIT COUNT TO 'P'\n         B     UNITLOO2\n*\n**********************************************************************\n*                      PROCESS UNIT COUNT\n**********************************************************************\n*\nUNITCT1  BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    UNITLOO2       NO PARM - TRY NEXT\n         LA    R15,25         SET ERROR CODE\n         BNZ   DDERR          NOT NUMERIC - ERROR\n*\n         STC   R1,UNITCOUN    SAVE UNIT COUNT\n*\nUNITLOO2 LA    R2,1(R3,R2)    INCREMENT TO NEXT ENTRY\n         B     UNITLOO1       GO PROCESS NEXT SUBPARAM\n*\n         EJECT\n**********************************************************************\n*                       DD UNIT=AFF\n**********************************************************************\n*\nDAFF     CLI   0(R2),AFFMK    SEE IF UNIT=AFF= KEY\n         BNE   DVOL           NO, BRANCH\n*\n         MVI   REFERBCK,C' '  BLANK START OF REFERBACK WORK AREA\n         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE FIELD\n         LA    R2,2(R2)       LOAD ADDR OF AFF FIELD\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)     LOAD LENGTH OF DDNAME\n         BZ    DDLOOP         YES, GO PROCESS NEXT PARAM\n         CH    R3,=H'8'       SEE IF LENGTH > 8\n         LA    R15,24         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE10      MOVE DDNAME TO REFERBACK FIELD\n         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY\n         MVI   UNITIND,UNITFND SET UNIT FOUND IND\nAFFLOOP  LA    R7,ENTLEN(R7) INCREMENT TO NEXT DD ENTRY\n         CLI   ENTRYTYP,TYPEND END OF TABLE?\n         BE    AFFEND         YES, BRANCH\n         CLC   REFDDN,DDDN    MATCH DDNAME?\n         BE    AFFOUND        YES, BRANCH\n         B     AFFLOOP        LOOP\nAFFOUND  OC    UNITIND,DTYPE SET UNIT TYPE FROM PREV\n         OI    UNITIND,AFF    TURN ON FOUND BY AFF IND\nAFFEND   B     DDLOOP         GO PROCESS NEXT ENTRY\n*\nMOVE10   MVC   REFDDN(0),1(R2)     *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*                            DD VOL\n**********************************************************************\n*\nDVOL     CLI   0(R2),VOLUMEK  SEE IF VOL= KEYWORD\n         BNE   DSER           NO, BRANCH\n*\n         ICM   R4,1,1(R2)     LOAD NUM OF SUBPARAMS\n         BZ    DDLOOP         YES, GO GET NEXT PARAM\n         CH    R4,=H'4'       SEE IF AT LEAST 4 PARAMS\n         BL    DDLOOP         LESS THAN 4, NONE NEEDED\n         LA    R15,26         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n**********************************************************************\n*            WE NEED ONLY THE 4TH PARAM (VOL COUNT)\n**********************************************************************\n*\n         SR    R5,R5          ZERO WORK REG\n         LA    R2,2(R2)       LOAD START OF SUBPARAMS\nVOLOOP1  LA    R5,1(R5)       ADD 1 TO COUNTER\n         SLR   R3,R3          CLEAR REG FOR IC\n         IC    R3,0(R2)       LOAD LENGTH OF SUBPARAM\n         CH    R5,=H'4'       SEE IF 4TH PARAM\n         BL    VOLOOP3        LESS THAN 4, GO GET NEXT\n         BH    DDLOOP         GREATER THAN 4, GET OUT\n*\n         CH    R3,=H'8'       SEE IF LENGTH > 8\n         LA    R15,26         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         BAL   R14,DECBIN     CONVERT PARM TO BINARY\n         BM    DDLOOP         NO PARM - TRY NEXT\n         LA    R15,27         SET ERROR CODE\n         BNZ   DDERR          NOT NUMERIC - ERROR\n*\n         STC   R1,VOLCNT      SAVE VOL CNT\n*\nVOLOOP3  LA    R2,1(R3,R2)    INCRMENT TO NEXT POS SUBPARAM\n         B     VOLOOP1        LOOP\n*\n         EJECT\n**********************************************************************\n*                           DD VOL=SER\n**********************************************************************\n*\nDSER     CLI   0(R2),SERMK    SEE IF VOL=SER= KEYWORD\n         BNE   DREF           NO, BRANCH\n*\n**********************************************************************\n*    ALL WE NEED IS THE NUMBER OF VOL/SER'S\n*    AND THE 1ST VOLSER IN THE LIST IF PRESENT\n**********************************************************************\n*\n         ICM   R4,1,1(R2)     LOAD NUMBER OF SUBPARAMS\n         STC   R4,SERCNT      SAVE NUMBER OF VOL/SER'S\n         BZ    DDLOOP         ZERO SUBPARAMS, GET OUT\n         ICM   R3,1,2(R2)     LOAD LEN OF 1ST VOLSER\n         BZ    DDLOOP         NULL VOLSER, GET OUT\n         CH    R3,=H'6'       SEE IF MAX LEN EXCEEDED\n         LA    R15,28         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE13      MOVE 1ST VOLSER TO SAVE\n         B     DDLOOP         GO GET NEXT PARAM\n*\nMOVE13   MVC   TVOLSER(0),3(R2)    *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*                          DD VOL=REF\n**********************************************************************\n*\nDREF     CLI   0(R2),REFMK    SEE IF VOL=REF= KEYWORD\n         BNE   DLABEL         NO, BRANCH\n*\n         SLR   R4,R4          CLEAR REG FOR ICM\n         ICM   R4,1,2(R2)     LOAD 'LENGTH' OF REFERBACK\n         BZ    DDLOOP         ZERO LENGTH, NULL, BRANCH\n         BP    DREF00         HIGH BIT NOT ON, NOT A REFERBACK\n         BAL   R14,REFBACK    GO TO REFERBACK ROUTINE\n         OI    UNITIND,UNITFND SET UNIT FOUND IND\n         OC    UNITIND,REFUNIT SAVE UNIT OF PREV DD\n         MVC   TVOLSER,REFVOL SAVE REFERBACK VOLSER\n         B     DDLOOP         GO GET NEXT PARAM\n*\n**********************************************************************\n*    AT THIS POINT, THE REFERBACK IS PROBABLY TO A CATALOGED\n*    DATA SET.\n**********************************************************************\n*\nDREF00   CH    R4,=H'44'      SEE IF LENGTH OF DSNAME EXCEEDS MAX\n         LA    R15,34         SET ERROR NUMBER\n         BH    DDERR          YES - ERROR\n*\n         MVC   LDSN,BLANKS    BLANK DSNAME\n         BCTR  R4,0           MAKE MACHINE LENGTH\n         EX    R4,MOVE17      MOVE DSNAME TO SAVE\n         L     R7,FIRSTENT    LOAD START OF TABLE\n         LA    R7,ENTLEN(R7)  INCREMENT PAST JOB ENTRY\nDREF01   CLI   ENTRYTYP,TYPEDD  SEE IF DD ENTRY\n         BE    DREF02         YES, GO SEE IF MATCH\n         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE\n         BE    HILEVEL1       NOT FOUND, GO CHECK CATALOG\n         B     DREF03         LOOP\nDREF02   CLC   DDSN,3(R2)     SEE IF SAME DSNAME\n         BE    DREF04         YES, CHARGE FOR THE DSNAME\nDREF03   LA    R7,ENTLEN(R7)  INCREMENT TO NEXT DD ENTRY\n         B     DREF01         LOOP UNTIL DONE\nDREF04   OI    UNITIND,UNITFND SET UNIT FOUND IND\n         OC    UNITIND,DTYPE  SAVE UNIT TYPE FROM TABLE\n         MVC   TVOLSER,DVOLSER SAVE VOLSER FROM TABLE\n         B     DDLOOP         GO GET NEXT PARAM\n*\nMOVE17   MVC   LDSN(0),3(R2)       *********** EXECUTED ************\n*\n**********************************************************************\n*                    SEE IF CATALOG IS MOUNTED\n**********************************************************************\n*\nHILEVEL1 BAL   R5,CATLOC          GO GET CATALOG VOLSER\n         LTR   R15,R15            TEST RETURN CODE\n         BZ    DREF05             CATALOG ONLINE - DO FULL LOCATE TGB10\n         LA    R15,33             SET ERROR NUMBER\n         B     DDERR              ERROR\n*\n**********************************************************************\n*                    TRY TO LOCATE THE DATASET\n**********************************************************************\n*                                                                 TGB24\n*  NOTE: WHY IS THERE NO GDG TEST HERE ???                        TGB24\n*\nDREF05   BAL   R5,LOCATE      GO READ CATALOG\n         LTR   R15,R15        TEST RETURN CODE\n         BNZ   DDLOOP         NOT CATALOGED, IGNORE IT\n*\n         CLC   CAMLCNT,=H'0'  ANY VOLUME ENTRIES?\n         BE    DDLOOP         NO, IGNORE IT\n         CLI   CAMVOL,X'00'   MAKE USER THAT THERE IS A VOLSER\n         BE    DDLOOP         NO, VSAM LIED AGAIN, IGNORE THIS ENTRY\n         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT\n         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG\n         CLC   TVOLSER,=C'MIGRAT'      HSM MIGRATION ?            TGB46\n         BE    DDLOOP                  YES - GO GET NEXT PARM     TGB46\n         TM    UCBTYP3,X'80'  TAPE UNIT?\n         BNO   DDLOOP         NO - GO GET NEXT PARM\n         OI    UNITIND,TAPE   YES - TURN ON TAPE IND\n         B     DDLOOP         GO GET NEXT PARAM\n*\n         EJECT\n**********************************************************************\n*                         DD LABEL\n**********************************************************************\n*\nDLABEL   CLI   0(R2),LABELK   SEE IF LABEL= KEYWORD\n         BNE   DRETPD         NO, BRANCH\n*\n         B     DDLOOP         OVERRIDE TO BYPASS LABEL PROCESSING\n         SLR   R4,R4          CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)     LOAD NUMBER SUBPARAMS\n         CH    R4,=H'2'       SEE IF AT LEAST 2 SUBPARAMETERS\n         BL    DDLOOP         NO, BRANCH\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)     LOAD LENGTH OF FIRST SUBPARAM\n         LA    R2,3(R3,R2)    LOAD START ADDR OF SECOND SUBPARAMETER\n         ICM   R3,1,0(R2)     LOAD LENGTH OF SECOND SUBPARAM\n         B     DDLOOP\n*\n**********************************************************************\n*\n*        DD LABEL=RETPD\n*           - LIMIT RETENTION PERIOD TO 120 DAYS\n*           - PRODUCTION JOBS EXEMPTED\n*\n**********************************************************************\n*\nDRETPD   CLI   0(R2),RETPDMK  LABEL = RETPD ?\n         BNE   DEXPDT         NO, BRANCH\n*\n         SLR   R3,R3          CLEAR FOR ICM                       TGB13\n         ICM   R3,1,1(R2)     GET SUBPARM COUNT                   TGB13\n         BZ    DDLOOP         NO PARMS - CONTINUE WITH DD CARD    TGB13\n         LA    R2,2(R2)       SKIP PAST KEY AND PARM COUNT        TGB13\n         BAL   R14,DECBIN     CONVERT RETPD TO BINARY             TGB13\n         BM    DDLOOP         NO PARM - IGNORE RETPD              TGB13\n         BNZ   DDLOOP         NOT NUMERIC - LET JES2 HANDLE IT    TGB13\n*                                                                 TGB13\n         CH    R1,=H'120'     IS RETPD GREATER THAN 120 DAYS ?    TGB13\n         BNH   DDLOOP         NO - KEEP GOING                     TGB21\n*                                                                 TGB21\n         SCECHK =C'RMSC',=C'RETPD',5    CHECK FOR RETPD AUTH      TGB21\n         BZ     DDLOOP        AUTHORIZED - IGNORE RETPD           TGB21\n*\n         LA    R15,45         (SET ERROR NUMBER)                  TGB13\n         B     DDERR          YES - ERROR                         TGB21\n*\n**********************************************************************\n*\n*        DD LABEL=EXPDT\n*           - LIMIT EXPDT TO 120 DAYS FROM CURRENT DATE\n*           - COMPARE IS FOR 121 SINCE LEAP YEAR CHECK IS NOT MADE\n*           - EXPDT=98000 IS OK (TMS SPECIAL EXPDT)\n*\n**********************************************************************\n*\nDEXPDT   CLI   0(R2),EXPDTMK  SEE IF LABEL=EXPDT KEYWORD\n         BNE   DSYSOUT        NO, BRANCH\n*\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,1(R2)     LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP         NONE - CONTINUE WITH DD CARD\n         ICM   R3,1,2(R2)     LOAD LENGTH OF FIRST SUBPARAM\n         CH    R3,=H'5'       SEE IF LENGTH = 5\n         BNE   DDLOOP         NO - LET JES2 FAIL BAD DATE\n*                                                                 TGB13\n         LA    R2,2(R2)       SKIP PAST KEY AND PARM COUNT\n         BAL   R14,DECBIN     CONVERT TO PACKED                   TGB13\n         BM    DDLOOP         NO PARM - IGNORE THIS ONE           TGB13\n         BNZ   DDLOOP         NOT NUMERIC - LET JES2 FAIL IT      TGB13\n*                                                                 TGB13\n         C     R1,=F'98000'   IS EXPDT = 98000 ? (TMS)            TGB13\n         BE    DDLOOP         YES - ALLOW THIS ONE                TGB13\n*                                                                 TGB13\n         TIME  DEC            GET DATE IN R1, PD FORMAT\n         STCM  R1,7,PDDATE    STORE DATE\n*                                                                 TGB13\n         CLC   DOUBLE+5(1),PDDATE ARE YEARS THE SAME ?            TGB13\n         BE    DEXPDT1        YES - THEN SUBTRACT WILL WORK OK    TGB13\n         AP    PDDATE,=P'635' FIX UP DATE FOR SUBTRACT            TGB13\n*                                                                 TGB13\nDEXPDT1  SP    DOUBLE+5(3),PDDATE SUB CURRENT DATE FROM EXPDT\n         CP    DOUBLE+5(3),=P'121' GREATER THAN 121 ?\n         BNH   DDLOOP         NO  - ALLOW EXPDT\n*\n         SCECHK =C'RMSC',=C'RETPD',5    CHECK FOR RETPD AUTH      TGB21\n         BZ     DDLOOP        AUTHORIZED - IGNORE EXPDT           TGB21\n*\n         LA    R15,46         SET ERROR NUMBER\n         B     DDERR          ERROR\n*\n         EJECT\n**********************************************************************\n*    DD SYSOUT\n*       IF SYSOUT = * OR (, THEN IT REFERRED BACK TO THE\n*       MESSAGE CLASS WHICH IS CHECKED ON THE JOB CARD, AND\n*       DOES NOT NEED TO BE RE-CHECKED HERE\n*        ADDED SYSOUT CLASS LOOKASIDE BUFFER (SYSTABLE)           TGB17\n**********************************************************************\n*\nDSYSOUT  CLI   0(R2),SYSOUTK  SEE IF SYSOUT= KEYWORD\n         BNE   DDLOOP         NO, BRANCH\n*\n         SLR   R4,R4          CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)     LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP         NONE, BRANCH\n         CLI   3(R2),C'*'     IS SYSOUT=*\n         BE    DDLOOP         YES, SKIP RACF CHECK\n         CLI   3(R2),X'00'    IS SYSOUT=(,\n         BE    DDLOOP         YES, SKIP RACF CHECK\n*\n         LA    R1,3(R2)       POINT TO CHARACTER TO CHECK         TGB01\n         BAL   R14,ALPHANUM   CHECK CHARACTER AT (R1)             TGB01\n         LA    R15,52         (SET ERROR NUMBER)\n         BNZ   DDERR          ERROR - NOT ALPHANUMERIC\n*\n         LA    R15,50         SET ERROR NUMBER                    TGB31\n         SLR   R3,R3          CLEAR FOR IC                        TGB17\n         IC    R3,3(R2)       GET SYSOUT CLASS CHARACTER          TGB17\n         SH    R3,=X'00C1'    CONVERT TO TABLE INDEX              TGB17\n         LA    R3,SYSTABLE(R3) CONVERT TO TABLE ADDRESS           TGB17\n         CLI   0(R3),X'01'    HAS CLASS BEEN CHECKED OK ALREADY?  TGB31\n         BE    DDLOOP         YES - WE ARE DONE HERE              TGB31\n         CLI   0(R3),X'02'    HAS CLASS BEEN CHECKED BAD ?        TGB31\n         BE    DDERR          YES - ERROR                         TGB31\n*\n         SCECHK =C'RMSG',3(R2),1   VALIDATE THE SUBMISSION        TGB31\n         LA    R15,50         SET ERROR NUMBER\n         BNZ   DSYSOUT1       ERROR - SET FLAG AND DISALLOW       TGB31\n         MVI   0(R3),X'01'    SET FLAG SHOWING CLASS IS OK        TGB17\n         B     DDLOOP         CONTINUE WITH DD CARD               TGB17\nDSYSOUT1 MVI   0(R3),X'02'    SET FLAG SHOWING CLASS IS NOT OK    TGB31\n         B     DDERR          AND INDICATE ERROR                  TGB31\n*                                                                 TGB31\n         EJECT\n**********************************************************************\n*\n*    THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING\n*    PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR\n*    FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT\n*    WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER\n*    BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF\n*    SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.\n*    IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY\n*    A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH\n*    ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A\n*    SINGLE SUBPARAMETER.\n*\n**********************************************************************\n*\nDDERR    BAL   R14,ERRORTN    CALL ERROR ROUTINE                  TGB12\n*\nDDLOOP   LABEL\n         L     R2,PARMADDR    RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5          CLEAR REGISTER FOR ICM\n         LA    R2,1(R2)       INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)     LOAD SUBPARAMETER COUNT\n         BNZ   DDLOOP1        OK, BRANCH INTO ROUTINE\n         LA    R2,1(R2)       NONE, INCREMENT PAST COUNT\n         B     DDLOOP5        AND GET OUT OF ROUTINE\nDDLOOP1  LA    R2,1(R2)       INCREMENT PAST KEYWORD DESCR\nDDLOOP2  SLR   R4,R4          CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)     LOAD PARAMETER LENGTH\n         BNM   DDLOOP3        HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(R2)       INCREMENT PAST CONTROL BYTE\n         B     DDLOOP4        BRANCH\nDDLOOP3  LA    R4,1           SET PARAM COUNT TO 1\nDDLOOP4  SLR   R3,R3          CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)     LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)    INCREMENT PAST PARM\n         BCT   R4,DDLOOP4     LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,DDLOOP2     LOOP UNTIL PROCESSED ALL PARMS\nDDLOOP5  ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\n         B     DDPARM         CONTINUE\n*\n         EJECT\n**********************************************************************\n*\n*   END OF SINGLE DD CARD PROCESSING - AT THIS POINT WE DO:\n*\n*   1) TRY TO OBTAIN UNIT INFO IF 'UNIT=' WAS NOT SPECIFIED\n*         A) TRY TO FIND DDNAME PREVIOUSLY IN THE TABLE\n*         B) IF NOT FOUND - ISSUE LOCATE MACRO FOR THE DATASET\n*         C) IF NOT FOUND - ASSUME GDG NAME AND ADD '(0)' TO DATASET\n*                           AND TRY TO LOCATE AGAIN.\n*         D) IF NOT FOUND AFTER ALL THIS, ASSUME DATASET IS NOT TAPE\n*\n*   2) IF UNIT=TAPE:\n*         A) IF UNIT=AFF, DO NOT ADD TO TAPE DRIVE COUNT\n*         B) IF VOLSER WAS USED PREV IN THIS STEP, DO NOT ADD TO CNT\n*         C) CHECK AUTH FOR USE OF JOBCAT/STEPCAT\n*            (THIS REALLY SHOULD HAVE BEEN DONE IN DD PROCESSING)\n*\n**********************************************************************\n*\n**********************************************************************\n*              SEE IF NAME TABLE MAINTAINED BY THIS EXIT\n**********************************************************************\n*\nDDEND    DS    0H                                                 TGB45\n         TM    UNITIND,AFF             UNIT=AFF= ?                TGB45\n         BNO   DDEND1                  NO  - CONTINUE             TGB45\n         TM    FLAGS,FSETUP            SETUP AUTO ?               TGB45\n         BO    DDEND60                 YES - FORCE LOCATE         TGB45\nDDEND1   CLI   UNITIND,X'00'  SEE IF UNIT HAS BEEN DETERMINED     TGB45\n         BNE   DDEND150       YES, BRANCH\n*\n**********************************************************************\n*          SEARCH THE DSNAME TABLE MAINTAINED BY THIS EXIT\n**********************************************************************\n*\n         L     R7,FIRSTENT    POINT TO EXIT6 TABLE\n*\nDDEND50  LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY\n         CLI   ENTRYTYP,TYPEND END OF TABLE?\n         BE    DDEND60        YES, GO CHECK CATALOG\n         TM    ENTRYTYP,TYPEDD DD ENTRY?\n         BNO   DDEND50        NO, LOOP\n         CLC   DDSN,TDSN      DSN MATCH?\n         BNE   DDEND50        NO, LOOP\n         OC    UNITIND,DTYPE  SAVE UNIT INFO\n         MVC   TVOLSER,DVOLSER SAVE VOLSER INFO\n         B     DDEND150       GET OUT\n*\n**********************************************************************\n*          DSNAME NOT YET IN TABLE - WE NEED TO LOCATE\n**********************************************************************\n*\nDDEND60  DS    0H\n         TM    STRDINDC,DTXSYOUT SEE IF DD OUTPUT SPOOL FILE\n         BO    DDEND150       YES, NO NEED TO CAMLST\n*\n**********************************************************************\n*        MAKE SURE CATALOG IS MOUNTED BEFORE TRYING TO LOCATE\n**********************************************************************\n*\n         MVC   LDSN,TDSN          SETUP NAME FOR LOCATE\n         BAL   R5,CATLOC          GO GET CATALOG VOLSER\n         LTR   R15,R15            TEST RETURN CODE\n         BZ    DDEND65            CATALOG ONLINE - DO FULL LOCATE TGB10\n         LA    R15,33             SET ERROR NUMBER\n         BAL   R14,ERRORTN        GO ISSUE ERROR MESSAGE\n         B     GETNEXT\n*\n**********************************************************************\n*               ISSUE LOCATE FOR THE DATASET NAME\n**********************************************************************\n*\nDDEND65  DS    0H\n         BAL   R5,LOCATE      GO READ CATALOG\n         LTR   R15,R15        TEST RETURN CODE\n         BZ    DDEND70        ZERO, BRANCH\n*\n****************************************************************  TGB24\n*            CHECK FOR GDG WITHOUT AN INDEX                       TGB24\n****************************************************************  TGB24\n*                                                                 TGB24\n         CH    R15,=H'8'      POSSIBLY A GDG NAME WITH NO INDEX?\n         BNE   DDEND150       NO - ASSUME DATASET IS NOT TAPE\n*\n****************************************************************  TGB24\n*         ADD (0) TO GDG NAME AND TRY TO LOCATE AGAIN             TGB24\n****************************************************************  TGB24\n*                                                                 TGB24\n         LA    R5,LDSN        POINT TO DSNAME AREA                TGB24\n         LA    R4,44          LENGTH OF DSNAME AREA               TGB24\nDDENDA1  CLI   0(R5),C' '     FIND THE BLANK                      TGB24\n         BE    DDENDA2        FOUND - END OF DSNAME               TGB24\n         LA    R5,1(R5)       ADD 1 TO POINTER                    TGB24\n         BCT   R4,DDENDA1     LOOP UNTIL END OF DSNAME            TGB24\nDDENDA2  CH    R4,=H'8'       ROOM FOR GDG NAME ?                 TGB24\n         BL    DDEND150       NO - ASSUME DSNAME NOT FOUND        TGB24\n         MVC   0(3,R5),=C'(0)'  MOVE GDG INDEX TO DSNAME          TGB24\n*                                                                 TGB24\n         BAL   R5,LOCATE      TRY AGAIN ON GDG NAME WITH INDEX    TGB24\n         LTR   R15,R15        TEST RETURN CODE                    TGB24\n         BNZ   DDEND150       NOT FOUND - ASSUME NON-TAPE         TGB24\n*                                                                 TGB24\n****************************************************************  TGB24\n*            CHECK WORKAREA RETURNED FROM LOCATE                  TGB24\n****************************************************************  TGB24\n*                                                                 TGB24\nDDEND70  CLC   CAMLCNT,=H'0'  ANY VOLUME ENTRIES?\n         BE    DDEND150       NO, BRANCH\n         CLI   CAMVOL,X'00'   MAKE USER THAT THERE IS A VOLSER\n         BE    DDEND150       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY\n         MVC   VOLCNT,CAMLCNT+1 SAVE VOLUME COUNT\n         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG\n         CLC   TVOLSER,=C'MIGRAT'      HSM MIGRATION ?            TGB46\n         BE    DDEND150                YES - GO GET NEXT PARM     TGB46\n         TM    UCBTYP3,X'80'  TAPE UNIT?\n         BNO   DDEND150       NO, BYPASS ROUTINES\n         OI    UNITIND,TAPE   TURN ON TAPE IND\n         BAS   R5,SETUP                GO DO SETUP WORK           TGB45\n\n**********************************************************************\n*    PROCESS ONLY DD STATEMENTS WHICH ARE FOR MOUNTABLE\n*    DEVICES.\n*    TEST FOR 'UNITONDD' IS TO CHECK FOR DATASETS WHERE DISK UNIT\n*    WAS SPECIFIED ON DD STMT., BUT DSN MAY NOT HAVE BEEN CATA-\n*    LOGED, BUT WAS PASSED TO SUBSEQUENT STEPS.  WE MUST SAVE THE\n*    DD INFO IN TABLE TO SEARCH LATER.\n**********************************************************************\n*\nDDEND150 TM    UNITIND,TAPE   IS THIS A TAPE DD?\n         BO    DDEND160       YES, BRANCH\n*TGB32   TM    UNITIND,UNITONDD  WAS UNIT OTHER THAN TAPE SPECIFIED?\n*TGB32   BNO   DDEND240       NO, DO NOT SAVE DD INFO\n*TGB32   TM    DISPIND,PASS   WAS DISP=PASS SPECIFIED?\n*TGB32   BO    DDEND230       YES, SAVE DD INFO FOR LATER STEP\n         B     DDEND240       GO CHECK FOR JOBCAT/STEPCAT\n*\n**********************************************************************\n*    IF THE UNIT WAS DETERMINED BY UNIT=AFF, DO NOT CHARGE\n*    FOR THE DEVICE BUT SAVE THE TABLE ENTRY FOR POSSIBLE\n*    REFERBACKS BY SUBSEQUENT STATEMENTS.\n**********************************************************************\n*\nDDEND160 TM    UNITIND,AFF    UNIT=AFF DD STATEMENT\n         BO    DDEND230       YES, DO NOT ADD TO UNIT COUNTS\n         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY\n*\n**********************************************************************\n*    SEE IF THE VOLSER WAS USED PREVIOUSLY IN THIS STEP.\n*    IF SO, DO NOT CHARGE FOR THE DEVIDE BUT AGAIN SAVE THE\n*    TABLE ENTRY FOR POSSIBLE REFERBACKS BY FOLLOWING\n*    STATEMENTS.\n**********************************************************************\n*\nDDEND170 LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY\n         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE\n         BE    DDEND180       YES, NO MATCH, BRANCH\n         CLI   DVOLSER,0      ANY VOLUME SUPPLIED ?               TGB37\n         BE    DDEND170       NO - SKIP THIS ENTRY                TGB37\n         CLC   TVOLSER,DVOLSER SEE IF VOLSER ALREADY REFERENCED\n         BE    DDEND230       YES, DO NOT CHARGE FOR IT\n         B     DDEND170       LOOP\n*\n**********************************************************************\n*    IF PARALLEL MOUNTING WAS REQUESTED, CHARGE THE GREATER\n*    OF THE DEVICES SPECIFIED BY THE UNITCOUNT FIELD OR THE\n*    NUMBER OF VOLUMES.\n**********************************************************************\n*\nDDEND180 CLI   UNITCOUN,C'P'  SEE IF PARALLEL MOUNTING\n         BE    DDEND190       YES, BRANCH\n         MVC   ADDCOUNT,UNITCOUN MOVE UNIT COUNT TO COMMON\n         B     DDEND210       BRANCH\nDDEND190 CLC   VOLCNT,SERCNT COMPARE VOL COUNT & SERIAL CNT\n         BL    DDEND200       SERIAL COUNT GREATER\n         MVC   ADDCOUNT,VOLCNT MOVE VOLUME COUNT TO COMMON\n         B     DDEND210       BRANCH\nDDEND200 MVC   ADDCOUNT,SERCNT MOVE SERIAL COUNT TO COMMON\n*\n**********************************************************************\n*        ADD THE DEVICE COUNT TO THE APPROPRIATE ACCUMULATOR.\n**********************************************************************\n*\nDDEND210 SLR   R15,R15        ZERO WORK REG\n         IC    R15,ADDCOUNT   MOVE UNIT COUNT TO REG\n         TM    UNITIND,TAPE   IS THIS A TAPE DD?\n         BO    DDEND220       YES, BRANCH\n         B     DDEND230       SKIP PRIVATE MOUNT\n         AH    R15,PRIVCNT    ADD RUNNING COUNT TO THIS ONE\n         STH   R15,PRIVCNT    SAVE NEW RUNNING COUNT\n         B     DDEND230       BRANCH\nDDEND220 AH    R15,TAPECNT    ADD RUNNING COUNT TO THIS ONE\n         STH   R15,TAPECNT    SAVE NEW RUNNING COUNT\n*\n**********************************************************************\n*    SAVE THE CURRENT TEMPORARY ENTRY SINCE IT SPECIFIES A\n*    MOUNTABLE DEVICE TYPE.\n**********************************************************************\n*\nDDEND230 OC    TTYPE,UNITIND  SAVE UNIT INFO\n         LH    R14,ENTCOUNT   LOAD TABLE ENTRY COUNT\n         LA    R14,1(R14)     ADD 1 TO COUNT\n         CH    R14,MAXENTS    SEE IF MAXIMUM REACHED\n         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT\n         STH   R14,ENTCOUNT   STORE NEW ENTRY COUNT\n         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY\n         LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY\n         MVI   ENTRYTYP,TYPEDD SET ENTRY TO DD\n         MVC   DENTRY,TENTRY  MOVE TEMPORARY ENTRY TO TABLE\n         MVC   DVOLSER,TVOLSER MOVE TEMP VOLSER TO TABLE\n         MVC   DTYPE,UNITIND  SAVE UNIT INDICATOR\n         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY\n*\n**********************************************************************\n*    IF THE DD STATEMENT IS FOR A JOBCAT OR STEPCAT, CHECK AUTH\n**********************************************************************\n*\nDDEND240 CLC   TDDN,=CL8'JOBCAT' SEE IF JOBCAT DD\n         BE    DDEND250       YES, BRANCH\n         CLC   TDDN,=CL8'STEPCAT' SEE IF STEPCAT DD\n         BNE   GETNEXT        NO - GO GET NEXT CARD\n*\n         SCECHK =C'RMSC',=C'STEPCAT',7  CHECK AUTH                TGB11\n         BZ    GETNEXT             IF SO - CONTINUE ON WITHOUT ERROR\n         LA    R15,47              SET ERROR NUMBER\n         B     GETERR              ERROR\n*\nDDEND250 SCECHK =C'RMSC',=C'JOBCAT',6  CHECK AUTH                 TGB11\n         BZ    GETNEXT             OK - CONTINUE\n         LA    R15,43              SET ERROR NUMBER\n         B     GETERR              ERROR\n*\n***********************************************************************\n*    IF THE DD STATEMENT IS FOR A STEPCAT, THE JOB MUST BE AUTHORIZED\n***********************************************************************\n*\n         TITLE 'JES2 EXIT 6 - PROC CARD PROCESSING'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                     P R O C     C A R D\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n*\n*    THE TEXT OF THE EXEC CARD WHICH CALLS A PROC IS AS FOLLOWS\n*        1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF\n*        2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS\n*        3)  1 BYTE OF MISCELLANEOUS INDICATORS\n*        4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN\n*        5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS\n*            THE 1ST POS PARAMETER IS THE JOB STEP NAME\n*            THE 2ND POS PARAMETER IS THE PROC NAME\n*        6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS\n*            EACH PRECEDED BY A 1 BYTE LENGTH FIELD\n*        7)  THE REST OF THE RECORD WILL BE IGNORED\n*\n*    THE TEXT OF THE PROC CARD WILL BE SAVED FOR SUBSEQUENT\n*    EXEC CARD PROCESSING.  THE STEP NAME WILL BE SAVED FROM\n*    THE PROC CARD AND AND A POINTER SAVED TO THE START OF\n*    THE FIRST KEYWORD PARM.  AFTER THE NORMAL EXEC CARD HAS\n*    BEEN PROCESSED, THE PROC CARD TEXT WILL BE PROCESSED\n*    WHICH WILL OVERRIDE ANY PREVIOUSLY PROCESSED PARAMETERS\n*    ON THE EXEC CARD.\n*\n*    SAVE THE ENTIRE TEXT OF THE EXECUTE STATEMENT WHICH\n*    CALLS A PROCEDURE SO THAT ALL PROC OVERRIDES MAY BE\n*    PROCESSED.\n*\n**********************************************************************\n*\nPROCARD  LABEL\n*\nPROCSTAR LR    R4,R6          SAVE ADDRESS OF CURRENT RECORD\n         LH    R5,STRLTH      LOAD LENGTH OF TEXT RECORD\n         CH    R5,=H'512'     SEE IF LENGTH EXCEEDS 512 BYTES\n         LA    R15,30         SET ERROR NUMBER\n         BH    GETERR         YES - ERROR\n         LA    R0,PROCTXT     LOAD ADDR OF TEXT SAVE AREA\n         LR    R1,R5          LET REG 1 ALSO CONTAIN THE LENGTH\n         MVCL  R0,R4          MOVE TEXT STRING TO SAVE\n         LA    R6,PROCTXT     POINT TO START OF COPIED TEXT\n         LA    R2,STREKEY     LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\n         LA    R2,1(R2)       INCR PAST EXEC POS IND\n         SLR   R4,R4          CLEAR REG FOR ICM\n         ICM   R4,1,0(R2)     LOAD NUMBER OF SUBPARAMETERS\n         BNZ   PROCEND1       NOT ZERO, BRANCH\n         LA    R2,1(R2)       ZERO, INCREMENT PAST COUNT\n         B     PROCEND3       GET OUT\n*\n**********************************************************************\n*                    SAVE THE PROC STEP NAME\n**********************************************************************\n*\nPROCEND1 LA    R2,1(R2)       INCREMENT PAST COUNT\n         MVI   SAVEPROC,C' '  MOVE BLANK TO 1ST POS SAVE\n         MVC   SAVEPROC+1(7),SAVEPROC BLANK ENTIRE STEP NAME SAVE\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)     LOAD LENGTH OF JOB STEP NAME\n         BZ    PROCEND2       IF ZERO, NO JOB STEP NAME\n         CH    R3,=H'8'       SEE IF LENGTH > 8\n         LA    R15,31         SET ERROR NUMBER\n         BH    GETERR         YES - ERROR\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVE4       MOVE STEP NAME TO SAVE AREA\nPROCEND2 ICM   R3,1,0(R2)     LOAD LENGTH OF SUBPARAMETER\n         LA    R2,1(R3,R2)    INCREMENT TO NEXT SUBPARAMETER\n         BCT   R4,PROCEND2    LOOP UNTIL DONE\n*\n**********************************************************************\n*        SAVE POINTER TO THE FIRST KEYWORD ON THE STATEMENT\n**********************************************************************\n*\nPROCEND3 ST    R2,PROCTEXT    SAVE ADDRESS OF FIRST KEYWORD PARM\n         B     GETNEXT        GET OUT\n*\nMOVE4    MVC   SAVEPROC(0),1(R2)   *********** EXECUTED ************\n*\n         EJECT\n**********************************************************************\n*\n*    IF THE CURRENT EXECUTE STATEMENT IS FROM A PROCEDURE,\n*    LOAD THE ADDRESS OF THE PREVIOUS STATEMENT WHICH CALLED\n*    THE PROCEDURE AND RETURN TO THE EXECUTE CARD PROCESSOR\n*    TO PROCESS THE OVERRIDES WHICH MAY HAVE BEEN ENTERED\n*    ON THAT STATEMENT.\n*\n**********************************************************************\n*\nPROCSEAR TM    STREINDC,ETXPROC STATEMENT FROM A PROCEDURE?\n         BNO   PROC1          NO, GET OUT\n         XI    PROCIND,X'01'  FLIP-FLOP SWITCH\n         BZ    PROC1          NOW ZERO, ALREADY PROCESSED PROC TEXT\n         L     R2,PROCTEXT    LOAD ADDR OF PROC TEXT\n         ST    R2,PARMADDR    SAVE START OF PARAMETER ADDRESS\n         B     EXECPARM       GO PROCESS ADDITIONAL TEXT\n*\nPROC1    TM    JOBIND,EXADDR  WAS ADDRSP=REAL SPECIFIED ?\n         BNO   GETNEXT        NO, BAIL OUT\n         LH    R15,EREGION\n         CH    R15,=H'256'    YES, IS REGION > 256K\n         BNH   GETNEXT        NO, OK\n         LA    R15,7          SET MESSAGE NUMBER\n         B     GETERR         ERROR\n*\n         TITLE 'JES2 EXIT 6 - LAST LINE OF TEXT PROCESSING'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***               L A S T    L I N E    O F    T E X T\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n*\n**********************************************************************\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO\n**********************************************************************\n*\nEOF      LABEL\n*\n         TM    JOBIND,JOBFAIL  WAS JOB FAILED BY EXIT?\n         BO    JOBERROR        YES, BRANCH\n*\n         L     R7,LASTEXEC     LOAD ADDR OF LAST EXEC ENTRY\n         LTR   R7,R7           SEE IF ADDR = 0\n         BZ    EOF1            IF ZERO, NO UPDATE, BRANCH\n         MVC   ETAPES,TAPECNT  MOVE STEP TAPE UNIT CNT TO TABLE\n         MVC   ETIMES,EXECTIME MOVE STEP TIME TO TABLE\n         MVC   EPRIVS,PRIVCNT  MOVE STEP PRIV UNIT CNT TO TABLE\n         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT\n         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT\n*\n**********************************************************************\n*\n*    THIS ROUTINE SEARCHES THE TABLE SAVED FOR JOB, EXEC AND DD\n*    ENTRIES TO DETERMINE THE MAXIMUM RESOURCES USED BY THE JOB\n*    THIS INFORMATION WILL BE USED TO COMPARE AGAINST A CLASS\n*    TABLE TO DETERMINE THE CLASS WHICH SHOULD BE SET FOR THE JOB.\n*\n**********************************************************************\n*\nEOF3     MVC   STEPM,MSG0     INITIALIZE STEP MESSAGE\n         MVC   JOBM,MSG1      INITIALIZE JOB CLASS MESSAGE\n         MVC   JOBMSG(10),BLANKS BLANK MESSAGE PREFIX\n         XC    MAXTAPE,MAXTAPE ZERO MAX FIELD\n         XC    MAXPRIV,MAXPRIV ZERO MAX FIELD\n         XC    MAXTOTAL,MAXTOTAL ZERO MAX FIELD\n         XC    MAXREGN,MAXREGN ZERO MAX FIELD\n         XC    MAXEXEC,MAXEXEC ZERO MAX STEP CPU TIME\n         L     R7,FIRSTENT    LOAD START OF TABLE\n         CLC   ENTLEN(2,R7),=H'0' SEE IF ONLY JOB ENTRY\n         BE    JOBERROR       ZEROS, NO OTHER ENTRIES, FLUSH JOB\n*\nEOFLOOP1 CLI   ENTRYTYP,TYPJOB SEE IF JOB ENTRY\n         BE    EOFLOOP2       YES, BRANCH\n         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY\n         BE    EOFEXEC        YES, BRANCH\n         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE\n         BE    EOF1           YES, BRANCH                         TGB30\n         B     EOFLOOP2       LOOP\n*\n**********************************************************************\n*    PRODUCE A STEP RESOURCE STATISTICS MESSAGE FOR EACH STEP\n*    TO BE WRITTEN TO THE JES2 MESSAGE DATA SET.\n**********************************************************************\n*\nEOFEXEC  L     R4,ECARDNO     LOAD CARD NUMBER\n         CVD   R4,DOUBLE      CONVERT CARD NUMBER TO PACKED\n         MVC   STEPMSG-1(11),PREFIX MOVE MSG PREFIX TO MESSAGE\n         ED    STEPMSG-1(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX\n         MVC   STEPM+8(8),EJSTEP   MOVE JOB STEP TO MESSAGE\n         MVC   STEPM+17(8),EPSTEP  MOVE PROC STEP TO MESSAGE\n         LH    R4,ETAPES      LOAD NUMBER OF TAPES FOR STEP\n         LA    R1,STEPM+32    POINT TO OUTPUT POSITION            TGB38\n         MVC   0(5,R1),BLANKS CLEAR AREA                          TGB38\n         CVD   R4,DOUBLE      CONVERT TAPES TO PACKED             TGB38\n         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38\n         LH    R4,EREGION     LOAD REGION SIZE FOR STEP\n         LA    R1,STEPM+63    POINT TO OUTPUT POSITION            TGB38\n         MVC   0(6,R1),BLANKS CLEAR AREA                          TGB38\n         CVD   R4,DOUBLE      CONVERT TAPES TO PACKED             TGB38\n         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38\n         MVI   0(R1),C'K'     ASSUME REGION IS IN K               TGB14\n         TM    ELIBIND,EREGIONM   REGION IN MEGABYTES ?\n         BNO   EOFEXEC2       NO, CONTINUE\n         MVI   0(R1),C'M'     MOVE MEGABYTE INDICATOR TO MESSAGE\nEOFEXEC2 L     R5,ETIMES      LOAD STEP TIME\n         C     R5,MAXEXEC     BIGGEST TIME SO FAR?\n         BNH   EOFEXEC3       NO - DO NOT SAVE\n         ST    R5,MAXEXEC     YES - SAVE IN MAX EXEC FIELD\nEOFEXEC3 CLC   MAXTIME,=F'0'  JOBTIME NOT SPECIFIED OR ZERO?\n         BE    EOFEXEC4       NO - THEN PRINT EXEC TIME\n         C     R5,MAXTIME     EXEC TIME GREATER THAN JOBTIME ?\n         BL    EOFEXEC4       NO - THEN PRINT EXEC TIME\n         L     R5,MAXTIME     ELSE PRINT JOB TIME\nEOFEXEC4 DS    0H                                                 TGB38\n         LA    R1,STEPM+44    POINT TO TIME AREA IN MSG           TGB38\n         MVC   0(11,R1),BLANKS MOVE SPACES TO TIME AREA           TGB38\n         C     R5,=AL4(1440*60) NOLIMIT ?                         TGB38\n         BNE   EOFEXC4A       NO  - CONTINUE                      TGB38\n         MVC   0(7,R1),=C'NOLIMIT' YES - SHOW AMOUNT              TGB38\n         B     EOFEXEC9                                           TGB38\nEOFEXC4A C     R5,=AL4(357912*60)  MAXIMUM ?                      TGB38\n         BNE   EOFEXC4B       NO  - CONTINUE                      TGB38\n         MVC   0(7,R1),=C'MAXIMUM' YES - SHOW AMOUNT              TGB38\n         B     EOFEXEC9                                           TGB38\nEOFEXC4B SLR   R4,R4          CLEAR FOR DIVIDE                    TGB38\n         D     R4,=F'60'      DIVIDE TO GET MINUTES AND SECONDS   TGB38\n         LTR   R4,R4          ANY SECONDS ?                       TGB38\n         BE    EOFEXEC5       NO  - DON'T USE PARENS              TGB38\n         MVI   0(R1),C'('     OPEN PAREN                          TGB38\n         LA    R1,1(R1)       BUMP PAST PAREN                     TGB38\nEOFEXEC5 LTR   R5,R5          ANY MINUTES ?                       TGB38\n         BE    EOFEXEC6       NO  - GO DO SECONDS                 TGB38\n         CVD   R5,DOUBLE      CONVERT MINUTES TO PACKED           TGB38\n         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38\n         LTR   R4,R4          ANY SECONDS ?                       TGB38\n         BZ    EOFEXEC9       NO  - ALL DONE                      TGB38\nEOFEXEC6 MVI   0(R1),C','     MOVE A COMMA                        TGB38\n         LA    R1,1(R1)       BUMP PAST COMMA                     TGB38\n         CVD   R4,DOUBLE      CONVERT SECONDS TO PACKED           TGB38\n         BAS   R14,EOFSUB     MOVE NUMBER TO (R1)                 TGB38\n         MVI   0(R1),C')'     AND CLOSE PAREN                     TGB38\nEOFEXEC9 DS    0H                                                 TGB38\n*\n         LA    R15,STEPMSG    LOAD ADDRESS OF STEP MESSAGE\n         BAL   R14,MSGRTN     GO PUT MESSAGE TO JES MESSAGE DATA SET\n*\n**********************************************************************\n*    COMPARE THE RESOURCES USED BY THIS STEP TO THE MAXIMUM\n*    RESOURCES USED BY PREVIOUS STEPS.  RETAIN THE GREATER\n*    OF THE NUMBER OF RESOURCES.\n**********************************************************************\n*\nEOFCONT1 CLC   ETAPES,MAXTAPE COMPARE STEP TAPES TO PREV MAX\n         BNH   EOFEXEC1       NOT GREATER, BRANCH\n         MVC   MAXTAPE,ETAPES MAKE CURR COUNT NEW COUNT\nEOFEXEC1 LH    R4,ETAPES      ADD NUMBER OF TAPES\n         CH    R4,MAXTOTAL    COMPARE STEP TOT CNT TO PREV MAX\n         BNH   EOFLOOP2       NOT GREATER, BRANCH\n         STH   R4,MAXTOTAL    MADE CURR TOTAL CNT NEW MAX\nEOFLOOP2 LA    R7,ENTLEN(R7)  INCREMENT TO NEXT ENTRY\n         B     EOFLOOP1       LOOP\n*\n**********************************************************************\n*\n*    IF MAXTIME FILLED IN FROM JOB CARD, USE IT FOR JOBCLASS\n*    DETERMINATION\n*    OTHERWISE, USE MAX TIME FROM EXEC CARD(S)\n*    USE THIS TIME FOR JOBCLASS DETERMINATION.\n*    IF BOTH ARE ZERO, USE 30 MINUTES (1800 SEC).\n*\n**********************************************************************\n*\nEOF1     L     R3,MAXTIME     GET TIME FROM JOB CARD\n         CH    R3,=H'0'       ZERO ?\n         BNE   EOFSCAN        NO, USE IT\n         L     R3,MAXEXEC     GET MAX STEP TIME\nEOF2     ST    R3,MAXTIME     STORE FOR JOBCLASS DETERMINATION\n*\nEOFSCAN  CLC   MAXTAPE,=H'0'  SEE IF ANY TAPES\n         BE    EOFLJOB        NO TAPES, GO GET OUT\n         OI    RESOURCE,TAPES TURN ON TAPES RESOURCE\nEOFPACK  CLC   MAXPRIV,=H'0'  SEE IF ANY PRIV\n         BE    EOFLJOB        NO, BRANCH\n         OI    RESOURCE,USERPACK TURN ON USERPACK RESOURCE\nEOFLJOB  CLC   MAXTIME,=F'15' SEE IF CPU TIME > 15\n         B     CLASSEAR       NO, BRANCH ** OVERRIDE **\n         OI    RESOURCE+1,LONGJOB TURN ON LONGJOB RESOURCE\n*\n         EJECT\n**********************************************************************\n*\n*    THIS ROUTINE SEARCHES THE APPROPRIATE CLASS TABLES FOR\n*    MATCHES ON RESOURCES USED TO DETERMINE THE CORRECT CLASS\n*    FOR A JOB.  NOTE THAT EACH GROUP (TEST, PRODUCTION,\n*    OPERATIONS, AND TECH SUPPORT HAVE CLASSES WHICH MAY BE\n*    SPECIFIED IN ORDER TO BYPASS THE TABLES OR USED TO SINGLE\n*    THREAD A SERIES OF JOBS BECAUSE THERE WILL ONLY BE ONE\n*    INITIATOR SET TO THAT CLASS.\n*\n**********************************************************************\n*\nCLASSEAR TM    JOBIND,JOBPROD SEE IF PRODUCTION JOB\n         BO    NOCHANGE       YES, NO CHANGE OF CLASS\n*\n**********************************************************************\n*    SCAN THE APPROPRIATE CLASS TABLE FOR THE CLASS WHICH\n*    MATCHES THE RESOURCES USED BY THE JOB.\n**********************************************************************\n*\n         L     R1,DGNRETN     POINT TO DGTABLE                    TGB23\n         USING DGTABLE,R1     R1 POINTS TO DGTABLE                TGB23\n         AH    R1,BLDCLSOF    POINT TO CLASS TABLE PORTION        TGB23\n         DROP  R1             DROP DGTABLE                        TGB23\n         USING CLSSECT,R1     R1 POINTS TO CLASS TABLE            TGB23\n*                                                                 TGB23\nEOFSCAN1 TM    CLSFLAG,CLSEND END OF TABLE ?                      TGB23\n         BO    LASTCLAS       YES - THEN LAST ENTRY               TGB23\n*                                                                 TGB23\nEOFSCAN2 CLC   MAXTAPE,CLSTAPE MATCH TAPE COUNT                   TGB23\n         BH    EOFSCAN3        TAPES EXCEED TABLE, KEEP LOOKING   TGB23\n         CLC   MAXTIME,CLSTIME MATCH MAXIMUM CPU TIME             TGB23\n         BH    EOFSCAN3        TIME EXCEEDS TABLE, KEEP LOOKING   TGB23\nLASTCLAS MVC   CLASSFLD,CLSLASS MOVE CLASS TO SAVE AREA           TGB23\n         B     SETCLASS       GET OUT OF SEARCH                   TGB23\n*                                                                 TGB23\nEOFSCAN3 LA    R1,CLSLEN(R1)  INCREMENT TO NEXT ENTRY             TGB23\n         B     EOFSCAN1       LOOP                                TGB23\n*\nSETCLASS MVC   JOBM+21(1),CLASSFLD MOVE NEW CLASS TO MESSAGE\n         LA    R15,JOBMSG     LOAD ADDRESS OF JOB CLASS MESSAGE\n         BAL   R14,MSGRTN     GO WRITE MESSAGE TO JES MESSAGE DATA SET\n*\nCLEAR    DS    0H\n         CLI   CLASSFLD,C'A'  TEST NEW CLASS\n         BNL   CHGCLASS       NEW, GO RESET TO NEW CLASS\nDEFAULT  MVI   CLASSFLD,C'A'  SET NEW CLASS TO 'A'\n*\n         TITLE 'JES2 EXIT 6 - SET NEW CLASS FOR JOB'\n**********************************************************************\n*\n*              S E T     T H E    N E W    C L A S S\n*\n**********************************************************************\n*\nCHGCLASS LABEL                CHANGE THE JOB CLASS\n*\n* NOTE: THE FOLLOWING JQEJCLAS MODIFICATION CAUSED PROBLEMS WITH  TGB47\n*       JES2 2.4, SO IT WAS REMOVED                               TGB47\n*                                                                 TGB47\n*        AIF   ('&TEST' EQ 'YES').NOJQE                           TGB47\n*        L     R8,DTEADDR     GET ADDRESS OF DTE                  TGB47\n*        USING DTE,R8         EST ADDR TO DTE                     TGB47\n*        L     R8,DTEPCE      GET PCE ADDRESS                     TGB47\n*        DROP  R8             DROP ADDRESSABILITY TO DTE          TGB47\n*        USING PCE,R8         SET ADDRESSABILITY TO PCE           TGB47\n*        L     R8,PCEJQE      GET JQE ADDRESS                     TGB47\n*        DROP  R8             DROP PCE                            TGB47\n*        USING JQE,R8         SET ADDRESSABILITY TO JQE           TGB47\n*        MVC   JQEJCLAS,CLASSFLD CHANGE CLASS IN JQE              TGB47\n*        DROP  R8             DROP ADDRESSABILITY TO JQE          TGB47\n*.NOJQE   ANOP                                                    TGB47\n*                                                                 TGB47\n         L     R2,JCTADDR     LOAD JCT ADDRESS\n         USING JCT,R2         SET ADDRESSABILITY TO JCT\n         MVC   JCTJCLAS,CLASSFLD CHANGE CLASS IN JCT\n         MVC   JCTCLASS,CLASSFLD CHANGE CLASS IN JCT\n*\nNOCHANGE XC    RETCODE,RETCODE SET RETURN CODE TO ZERO\n         TM    JOBIND,JOBFAIL WAS JOB FAILED BY EXIT?\n         BNO   ENDOFIT        NO  BRANCH\n         DROP  R2             DROP JCT\n*\n**********************************************************************\n*   JOBERROR - PRINT ERROR MSG, FLUSH JOB, NO MORE EXIT 6 PROCESSING\n**********************************************************************\n*\nJOBERROR LABEL\n         XWTO  WTO960,LWTO960   WRITE ERROR MESSAGE\n*\n**********************************************************************\n*   JOBERR1 -  FLUSH JOB, NO MORE EXIT 6 PROCESSING, NO WTO MSG\n**********************************************************************\n*\nJOBERR1  LA    R15,8            SET JOB FAIL RETURN CODE\n         ST    R15,RETCODE      AND SAVE IT\n*\n**********************************************************************\n*   JOBERR0 -  NO MORE EXIT 6 PROCESSING, JOB IS NOT FLUSHED\n**********************************************************************\n*\nJOBERR0  L     R2,JCTADDR       GET ADDRESS OF JCT                TGB04\n         USING JCT,R2           SET ADDRESSABILITY TO JCT\n         OI    JCTUSER3,X'01'   MAKE SURE WE DON'T RE-ENTER EXIT  TGB04\n         DROP  R2               DROP JCT\n*\n         TITLE 'JES2 EXIT 6 - CLEAN UP AND EXIT TO JES'\n**********************************************************************\n*\n*                        C L E A N    U P\n*\n**********************************************************************\n*\nENDOFIT  LABEL                END OF EXIT 6\n*\n***************************************************************** TGB28\n*                          DELETE ACEE                            TGB28\n***************************************************************** TGB28\n*                                                                 TGB28\n         MVC   DELELST(DELELSTL),DELECON                          TGB28\n         LA    R9,ACEEADR                                         TGB28\n         RACINIT ENVIR=DELETE,ACEE=(9),MF=(E,DELELST)             TGB28\n*\n**********************************************************************\n*                      DELETE EXIT6 TABLE\n**********************************************************************\n*\n         LA    R4,EX6TABLE  POINT TO TABLE NAME\n         DELETE EPLOC=(4)     DELETE EX6TABLE\n*\n***************************************************************** TGB45\n*                      DELETE HSC CODE                            TGB45\n***************************************************************** TGB45\n*                                                                 TGB45\n         ICM   R15,15,SLSXCAL          ANYBODY THERE ?            TGB45\n         BZ    NOHSCD                  NO - SKIP DELETE           TGB45\n         DELETE EP=SLSXCAL             DELETE IT                  TGB45\nNOHSCD   DS    0H                                                 TGB45\n*                                                                 TGB45\n**********************************************************************\n*                    REMOVE ESTAE ROUTINE\n**********************************************************************\n*\n         AIF   ('&ESTAE' EQ 'NO').NOESTA1\n         LA    R1,ESTAEL      LOAD ADDRESS OF ESTAE LIST FORM\n         ESTAE 0,MF=(E,(1))   CANCEL ESTAE ENVIRONMENT\n.NOESTA1 ANOP\n*\n**********************************************************************\n*                  SAVE CERTAIN ADDRESSES FOR LATER\n**********************************************************************\n*\n         L     R2,JCTADDR     LOAD ADDRESS OF JCT\n         USING JCT,R2         USE JCT FOR A MOMENT\n         L     R3,RETCODE     SAVE RETURN CODE\n*\n**********************************************************************\n*                       FREE THE WORK AREA\n**********************************************************************\n*\n         L     R0,GETLEN      LOAD FREEMAIN SIZE\n         LR    R1,R13         SAVE WORKAREA ADDRESS\n         L     R13,4(R13)     RESTORE ORIG REG 13\n         FREEMAIN R,LV=(0),A=(1)\n         XC    JCTUSERB,JCTUSERB CLEAR WORKAREA POINTER IN PCE\n         DROP  R2\n*\n         LR    R15,R3         SET RETURN CODE\nRETURN   RETURN (14,12),RC=(15) GO BACK TO JES2\n*\n***************************************************************** TGB38\n* EOFSUB - SUBROUTINE TO FORMAT THE TIME PARMS TO OUTPUT          TGB38\n***************************************************************** TGB38\n*                                                                 TGB38\nEOFSUB   UNPK  NUMBER,DOUBLE+4(4) CONVERT TO EBCDIC NUMBERS       TGB38\n         OI    NUMBER+6,C'0'  DROP SIGN BITS                      TGB38\n         LA    R15,NUMBER     POINT TO NUMBER START               TGB38\n         MVI   NUMBER+7,C' '  MARK END OF NUMBER                  TGB38\nEOFSUB1  CLI   0(R15),C' '    END OF NUMBER ?                     TGB38\n         BE    EOFSUB3        YES - WE ARE DONE HERE              TGB38\n         CLI   0(R15),C'0'    LEADING ZERO ?                      TGB38\n         BNE   EOFSUB2        NO  - THEN GO MOVE IT               TGB38\n         LA    R15,1(R15)     YES - POINT TO NEXT DIGIT           TGB38\n         B     EOFSUB1        AND CONTINUE                        TGB38\nEOFSUB2  MVC   0(1,R1),0(R15) MOVE A BYTE                         TGB38\n         LA    R15,1(R15)     POINT TO NEXT BYTE                  TGB38\n         LA    R1,1(R1)       POINT TO NEXT TARGET BYTE           TGB38\n         CLI   0(R15),C' '    END OF STRING ?                     TGB38\n         BNE   EOFSUB2        NO  - THEN GO MOVE ANOTHER BYTE     TGB38\n         BR    R14            YES - THEN RETURN                   TGB38\nEOFSUB3  MVI   0(R1),C'0'     MOVE A ZERO                         TGB38\n         LA    R1,1(R1)       BUMP POINTER                        TGB38\n         BR    R14            AND RETURN                          TGB38\n*                                                                 TGB38\n         EJECT\n**********************************************************************\n*        RETURN TO JES REQUESTING THE NEXT INTERNAL TEXT STATEMENT\n**********************************************************************\n*\n*  NOTE: GETMAINED AREA IS NOT FREED\n*\n**********************************************************************\n*\nGETERR   BAL   R14,ERRORTN    CALL ERROR ROUTINE                  TGB12\n*\nGETNEXT  LABEL\n*\n         L     R4,CARDNO      LOAD CARD NUMBER FIELD\n         LA    R4,1(R4)       ADD 1 TO CARD NUMBER\n         ST    R4,CARDNO      STORE NEW CARD NUMBER\n         XC    RETCODE,RETCODE SET RETURN CODE TO ZERO\n*\n         AIF   ('&ESTAE' EQ 'NO').NOESTA2\n         LA    R1,ESTAEL      LOAD ADDRESS OF ESTAE LIST FORM\n         ESTAE 0,MF=(E,(1))   CANCEL ESTAE ENVIRONMENT\n.NOESTA2 ANOP\n*\n         L     R13,4(R13)     RESTORE ORIG REG 13\n         SLR   R15,R15        SET RETURN CODE TO ZERO\n         B     RETURN         GO BACK TO JES2\n*\n         DROP  R6             DROP TEXT STRING\n*\n         TITLE 'JES2 EXIT 6 - ERROR ROUTINES'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                  E R R O R   R O U T I N E S\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n         EJECT\n**********************************************************************\n*\n*                          T B L F U L L\n*\n*        THE INTERNAL DD TABLE IS FULL.  ISSUE THE APPROPRIATE\n*        MESSAGE AND EXIT WITH A JCL ERROR.\n*\n*        HOPEFULLY THIS WILL NEVER HAPPEN, BUT IF IT DOES, WE SHOULD\n*        CHANGE THIS ROUTINE TO DO A GETMAIN, RATHER THAN CANCEL\n*        THE JOB\n*\n**********************************************************************\n*\nTBLFULL  LABEL\n*\n         XWTO  WTO964,LWTO964 WRITE ERROR MESSAGE\n         B     JOBERROR       EXIT WITH A SEVERE ERROR\n*\n         EJECT                                                    RWS01\n***************************************************************** TGB28\n*                                                                 TGB28\n*                         R A C F E R R                           TGB28\n*                                                                 TGB28\n*             GET MESSAGE BASED ON RACINIT ERROR CODE             TGB28\n*                                                                 TGB28\n***************************************************************** TGB28\n*                                                                 TGB28\nRACFERR  LA    R15,48                  GET MESSAGE CODE           TGB28\n         BAL   R14,ERRORTN             ISSUE MESSAGE              TGB28\n         B     JOBERROR                ERROR                      TGB28\n*                                                                 TGB28\n         EJECT\n**********************************************************************\n*\n*                          L O A D E R R\n*\n*        CLASS TABLE WAS NOT LOADED.  ISSUE THE APPROPRIATE\n*        MESSAGES AND EXIT WITH A JCL ERROR.\n*\n**********************************************************************\n*\nLOADERR  LABEL\n         XWTO  WTO962,LWTO962 WRITE ERROR MESSAGE TO OPERATOR\n         LA    R0,DEFTABLE    POINT TO DEFAULT TABLE              TGB23\n         ST    R0,EXCPTAB     AND SAVE ADDRESS                    TGB23\n         B     GOTTAB         MAKE LIKE WE GOT TABLE\n*\n         EJECT\n**********************************************************************\n*\n*                          S T A E X I T\n*\n*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN\n*        THE EXIT.  THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE\n*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM\n*        RESOLUTION.  RETRY WILL BE ATTEMPTED FOR ALL ABENDS\n*        WHICH WILL JUST SET THE JOB CLASS TO \"A\" AND TERMINATE.\n*        NOTE THAT THERE IS A RECURSION CHECK TO PROTECT FROM\n*        ABEND LOOPS.\n*\n**********************************************************************\n*\nSTAEXIT  DS    0H\n         SAVE  (14,12)        SAVE REGISTERS\n         LR    R8,R15         SET NEW BASE ADDR\n         USING STAEXIT,R8     USE BASE\n         LA    R4,12\n         CLR   R0,R4          SEE IF CORE AVAILABLE\n         BE    STAENO-STAEXIT(R8)  NO, BRANCH\n*\n         L     R2,0(R1)       LOAD PARAMETER ADDRESS\n         L     R11,STAEREGS+64-WORKAREA(R2)   RESTORE HCT ADDRESS\n         LA    R3,STAESAVE-WORKAREA(R2) LOAD ADDRESS OF NEW SAVE\n         ST    R3,8(R13)      SAVE NEW SAVE ADDRESS IN OLD\n         ST    R13,4(R3)      SAVE OLD SAVE ADDRESS IN NEW\n         LR    R13,R3         SET NEW SAVE ADDRESS\n         LR    R3,R1          SAVE SDWA ADDRESS\n         WTO   '$HASP911 JES2 EXIT6 ABEND',ROUTCDE=(2),DESC=(4)\n         CLI   RECURS-WORKAREA(R2),X'FF'   SEE IF RECURSIVE ABEND\n         BE    STAENO-STAEXIT(R8)  YES, TELL ABEND NOT TO RETRY\n*\n         AIF   ('&TEST' EQ 'YES').NOSDUMP\n         SDUMP HDR='JES2 EXIT6 CONVERTER TIME ESTAE'\n.NOSDUMP ANOP\n*\n         L     R13,4(R13)     RESTORE ORIGINAL REG 13\n         LR    R1,R3          RESTORE SDWA ADDRESS\n         L     R5,RETRY-WORKAREA(R2)  LOAD RETRY ADDRESS\n         SETRP REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X\n               RETADDR=(5)\nSTAENO   DS    0H\n         L     R2,0(R1)       GET PARM ADDRESS\n         L     R0,RETRY-WORKAREA(R2)  LOAD RETRY ADDRESS\n         LA    R15,4          SET RETURN CODE TO RETRY\n         BR    R14            GO RETRY\n*\n         DROP  R8\n*\n**********************************************************************\n*\n*                          S T A E R T R Y\n*\n*        RESTORE ORIGINAL REGISTERS AND GET OUT\n*\n**********************************************************************\n*\nSTAERTRY LR    R13,R1         RESTORE GETMAINED AREA ADDRESS\n         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS\n         L     R1,JCTADDR     GET ADDRESS OF JCT                  TGB06\n         USING JCT,R1         AND USE ITS MAP                     TGB06\n         OI    JCTUSER3,X'01' SHOW WE SHOULD NOT RETURN TO EXIT   TGB06\n         DROP  R1                                                 TGB06\n         CLI   RECURS,X'FF'   SEE IF RECURSIVE ABEND\n         BE    NOCHANGE       YES, GET OUT AS QUICKLY AS POSSIBLE\n         MVI   RECURS,X'FF'   SET RECURSIVE ABEND INDICATOR\n         B     CLEAR          GET OUT\n*\n         TITLE 'JES2 EXIT 6 - INTERNAL SUBROUTINES'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                    S U B R O U T I N E S\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n         EJECT\n**********************************************************************\n*\n*                        E R R O R T N\n*\n*        THIS ROUTINE WILL WRITE A MESSAGE TO THE JES MESSAGE DATA\n*        SET USING THE INDEX INTO THE MESSAGE TABLE PASSED BY\n*        REGISTER 15 TO THE ROUTINE AND USE THE CARDNO FOR THE\n*        STATEMENT NUMBER IN THE MESSAGE PREFIX.\n*\n**********************************************************************\n*\n         PUSH  USING\nERRORTN  STM   R14,R12,SAVEREGS SAVE REGISTERS\n         L     R6,OUTRPL      GET BASE FOR RPL\n         USING IFGRPL,R6      SET ADDRESSABILITY\n         LR    R2,R15         SAVE ERROR NUMBER\n         BCTR  R2,0           MAKE ERROR NUMBER REL TO ZERO\n         MH    R2,=H'90'      MULTIPLY BY 90 FOR OFFSET\n         L     R3,CARDNO      LOAD CARD NUMBER\n         CVD   R3,DOUBLE      CONVERT CARD NUMBER TO PACKED\n         L     R4,MSGCOUNT    LOAD MESSAGE COUNTER\n         LTR   R4,R4          SEE IF FIRST MESSAGE\n         BNZ   MSGOUT         NO, DO NOT PUT HEADERS\n         MVC   BUFFER,HEADER1 MOVE HEADER LINE1 TO JES2 BUFFER\n         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET\n         MVC   BUFFER,HEADER2 MOVE HEADER LINE2 TO JES2 BUFFER\n         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET\nMSGOUT   LA    R4,1(R4)       ADD 1 TO MESSAGE COUNT\n         ST    R4,MSGCOUNT    SAVE MESSAGE COUNTER\n         MVC   MSGPREF,PREFIX MOVE MSG PREFIX TO JES2 BUFFER\n         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX\n         L     R3,=V(MESSAGES) LOAD ADDR OF MESSAGE TABLE         TGB08\n         AR    R3,R2          ADD OFFSET OF MSG TO TBL ADDR\n         MVC   MSGTEXT,0(R3)  MOVE PROPER MSG TO JES2 BUFFER\n         CLC   =C'SCE038W',MSGTEXT                                TGB36\n         BNE   MSGOUTB                                            TGB36\n         MVC   MSGTEXT+77(1),INCLASS                              TGB36\nMSGOUTB  CLC   =C'USERID XXXXXXX',MSGTEXT+8                       TGB26\n         BNE   MSGOUTA        NOT A SPECIAL MESSAGE               TGB26\n         MVC   MSGTEXT+15(7),USERID    MOVE USERID TO MESSAGE     TGB28\nMSGOUTA  CLC   =C'SCE048E',MSGTEXT                                TGB38\n         BNE   MSGOUTC        NOT A SPECIAL MESSAGE               TGB38\n         MVC   MSGTEXT+46(40),RACFMSG  MOVE RACFMSG TO MESSAGE    TGB38\nMSGOUTC  BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET            TGB26\n         OI    JOBIND,JOBFAIL TURN ON JOB FAILED IND\nMSGOUT1  LM    R14,R12,SAVEREGS RESTORE REGISTERS\n         BR    R14            RETURN TO CALLER\n*\n         DROP  R6\n*\n         EJECT\n**********************************************************************\n*\n*                          M S G R T N\n*\n*        THIS ROUTINE WILL WRITE THE MESSAGE WHICH IS POINTED TO\n*        BY REGISTER 15 TO THE JES MESSAGE DATA SET.\n*\n**********************************************************************\n*\nMSGRTN   STM   R14,R12,SAVEREGS SAVE REGISTERS\n         LR    R2,R15         SAVE BUFFER ADDRESS\n         L     R6,OUTRPL      GET BASE FOR RPL\n         USING IFGRPL,R6      SET ADDRESSABILITY\n         L     R3,CARDNO      LOAD CARD NUMBER\n         CVD   R3,DOUBLE      CONVERT CARD NUMBER TO PACKED\n         L     R4,MSGCOUNT    LOAD MESSAGE COUNTER\n         LTR   R4,R4          SEE IF FIRST MESSAGE\n         BNZ   MSGRTN1        NO, DO NOT PUT HEADERS\n         MVC   BUFFER,HEADER1 MOVE HEADER LINE1 TO JES2 BUFFER\n         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET\n         MVC   BUFFER,HEADER2 MOVE HEADER LINE2 TO JES2 BUFFER\n         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET\nMSGRTN1  LA    R4,1(R4)       ADD 1 TO MESSAGE COUNT\n         ST    R4,MSGCOUNT    SAVE MESSAGE COUNTER\n         MVC   BUFFER,0(R2)   MOVE MESSAGE FROM BUFFER\n         BAL   R5,PUTMSG      GO WRITE TO MSG DATA SET\n         LM    R14,R12,SAVEREGS RESTORE REGISTERS\n         BR    R14            RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n*\n*                          P U T M S G\n*\n*       WRITE 'BUFFER' TO JES MESSAGE DATA SET OR DO A TPUT TO\n*       TSO TERMINAL IF '&TEST' = 'YES'\n*\n**********************************************************************\n*\nPUTMSG   DS    0H\n*\n         AIF   ('&TEST' EQ 'YES').DOTPUT\n*\n         MVI   RPLREQ,RPLPUT  OPERATION TO BE A PUT\n         L     R0,OUTACB      LOAD OUTPUT ACB ADDRESS\n         ST    R0,RPLDACB     SET IN ACB POINTER IN RPL\n         LA    R0,BUFFER      LOAD ADDR OF BUFFER\n         ST    R0,RPLAREA     POINT TO BUFFER\n         XC    RPLARG(4),RPLARG ZERO FIELD\n         MVI   RPLOPT1,RPLSEQ OPERATION TO BE SEQUENTIAL\n         MVI   RPLOPT2,X'00'  ZERO FIELD\n         LA    R0,100         LOAD MESSAGE LENGTH\n         ST    R0,RPLRLEN     STORE MESSAGE LENGTH\n         XC    RPLBUFL(4),RPLBUFL ZERO FIELD\n         XC    RPLDDDD(4),RPLDDDD ZERO FIELD\n         ST    R13,PUTSAVE+72 SAVE SAVE AREA POINTER\n         LA    R13,PUTSAVE    SAVE AREA FOR ACCESS METHOD\n         LA    R1,IFGRPL      LOAD ADDR OF RPL\n         PUT   RPL=(1)        WRITE TO MESSAGE DATA SET\n         L     R13,72(R13)    RESTORE SAVE AREA POINTER\n         LTR   R15,R15        TEST RETURN CODE\n         BNZ   MSGERROR       BAD, GO BAG JOB\n         BR    R5             RETURN TO CALLER\n*\nMSGERROR XWTO  WTO963,LWTO963 WRITE ERROR MESSAGE\n         B     JOBERROR       GET OUT\n         DROP  R6\n*\n         AGO   .TSOEND\n.DOTPUT  ANOP\n         TPUT  BUFFER,BUFFERL\n         BR    R5\n.TSOEND  ANOP\n*\n         EJECT\n***********************************************************************\n*\n*                           D E C B I N\n*\n*        CONVERT NUMERIC STRING TO BINARY\n*\n*        IN:   R2 POINTS TO A STRING CONSISTING OF:\n*                  1) A SINGLE BUTE LENGTH OF STRING\n*                  2) THE STRING ITSELF\n*\n*        OUT:  R15 = X'FFFFFFFF' (MINUS)    STRING LENGTH IS ZERO\n*              R15 NOT ZERO                 STRING NOT NUMERIC\n*              R15 = 0                      RESULT IS IN R1\n*                                           AND IN 'DOUBLE' (PACKED)\n*\n*        NOTE: PSW CC IS PRESET TO REFLECT CONTENTS OF R15\n*\n*        USES: R0, R1, R15,  RETURN TO R14\n*\n***********************************************************************\n*\nDECBIN   SLR   R0,R0          CLEAR FOR IC\n         ICM   R0,1,0(R2)     GET LENGTH OF STRING\n         BZ    DECBINM        ZERO - SET MINUS CC\n         SLR   R15,R15        CLEAR COUNTER\n         LA    R1,1(R2)       POINT TO STRING\n*\nDECBIN1  CLI   0(R1),C'0'     IS IT LESS THAN ZERO ?\n         BL    DECBIN2        YES - NOT NUMERIC\n         CLI   0(R1),C'9'     IS IT GREATER THAN NINE ?\n         BH    DECBIN2        YES - NOT NUMERIC\n*\n         LA    R15,1(R15)     BUMP UP NUM COUNT\n         LA    R1,1(R1)       POINT TO NEXT DIGIT\n         BCT   R0,DECBIN1     CONTINUE\n*\nDECBIN2  LTR   R15,R15        ANY DIGITS FOUND ?\n         BZ    DECBINP        NO  - SET CC TO NOT ZERO\n*\n         BCTR  R15,0          BUMP DOWN FOR PACK\n         EX    R15,PACKD      PACK INTO DOUBLEWORD\n         CVB   R1,DOUBLE      CONVERT TO BINARY\n         SLR   R15,R15        SET ZERO RETURN CODE\nDECBINR  LTR   R15,R15        SETUP PSW CC\n         BR    R14            RETURN\n*\nPACKD    PACK  DOUBLE,1(0,R2)      *********** EXECUTED ************\n*\nDECBINP  LA    R15,8          SET POSITIVE RETURN CODE\n         B     DECBINR\n*\nDECBINM  SLR   R15,R15        SET NEGATIVE RETURN CODE\n         BCTR  R15,0\n         SLR   R1,R1          SET RESULT TO ZERO\n         B     DECBINR\n*\n         EJECT\n***************************************************************** TGB01\n*                                                                 TGB01\n*                       A L P H A N U M                           TGB01\n*                                                                 TGB01\n*        RETURN CC = 0 IF BYTE POINTED TO BY R1 IS ALPHANUMERIC   TGB01\n*        (A-Z OR 0-9) AND CC <> 0 IF NOT. ALL REGISTERS BUT R15   TGB01\n*        REMAIN UNCHANGED. RETURN IS TO R14, RETURN CODE IS IN    TGB01\n*        R15 AND PSW CC IS PRESET.                                TGB01\n*                                                                 TGB01\n***************************************************************** TGB01\n*                                                                 TGB01\nALPHANUM SLR   R15,R15        ASSUME GOOD CONDITION CODE          TGB01\n         CLI   0(R1),X'C1'    LESS THAN 'A' ?                     TGB01\n         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01\n         CLI   0(R1),X'CA'    LESS THAN 'I'+1 ?                   TGB01\n         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01\n         CLI   0(R1),X'D1'    LESS THAN 'J' ?                     TGB01\n         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01\n         CLI   0(R1),X'DA'    LESS THAN 'R'+1 ?                   TGB01\n         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01\n         CLI   0(R1),X'E2'    LESS THAN 'S' ?                     TGB01\n         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01\n         CLI   0(R1),X'EA'    LESS THAN 'Z'+1 ?                   TGB01\n         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01\n         CLI   0(R1),X'F0'    LESS THAN '0' ?                     TGB01\n         BL    ALPHANU1       YES - NOT ALPHANUMERIC              TGB01\n         CLI   0(R1),X'FA'    LESS THAN '9'+1 ?                   TGB01\n         BL    ALPHANU2       YES - ALPHANUMERIC                  TGB01\nALPHANU1 LA    R15,8          NO  - MUST BE NON-ALPHANUMERIC      TGB01\nALPHANU2 LTR   R15,R15        SET PSW CONDITION CODE              TGB01\n         BR    R14            RETURN                              TGB01\n*\n         EJECT\n**********************************************************************\n*\n*                      R E F B A C K\n*\n*    THIS ROUTINE HANDLES DSN AND VOLSER REFERBACKS.  THE SAVE\n*    TABLE WILL BE SEARCHED FROM THE BEGINNING FOR JOBSTEP AND/OR\n*    PROCSTEP ENTRY AND THEN WITHIN THE DD ENTRIES FOR THAT STEP.\n*    IF THE ENTRY IS FOUND, THE UNIT AND DSNAME INFORMATION WILL\n*    BE SAVED, IF NOT, A RETURN IS MADE TO THE CALLING RTN.\n*\n**********************************************************************\n*\nREFBACK  SLR   R3,R3          CLEAR WORK REGISTER\n         SLR   R4,R4          CLEAR WORK REGISTER\n         SLR   R5,R5          CLEAR WORK REGISTER\n         IC    R5,2(R2)       LOAD NUMBER OF DSN SUBPARAMETERS\n         N     R5,=X'0000007F' 'AND' OUT THE HIGH ORDER BIT\n         LA    R2,3(R2)       LOAD START OF REFBK ENTRIES\n         CLI   0(R2),X'01'    SEE IF LEN OF 1ST POS = 1\n         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE\n         CLI   1(R2),C'*'     SEE IF REFERBACK\n         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE\n         CH    R5,=H'4'       SEE IF NUMBER PARAMS > 4\n         BNH   *+16           NO, CONTINUE\n         LA    R15,32         SET ERROR NUMBER\n         BAL   R14,ERRORTN    GO ISSUE ERROR MSG\n         B     DDLOOP         GET OUT\n         MVI   REFERBCK,C' '  BLANK START OF REFBACK WORK AREA\n         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE WORK AREA\n         XC    REFUNIT,REFUNIT ZERO REFERBACK UNIT FEEDBACK\n         XC    REFVOL,REFVOL  ZERO REFERBACK VOLSER FIELD\n         MVI   REFDSN,C' '    BLANK ENTIRE\n         MVC   REFDSN+1(43),REFDSN  REFERBACK DSNAME FIELD\nREFLOOP1 LA    R4,1(R4)       ADD 1 TO COUNT\n         CR    R4,R5          SEE IF COUNT EXCEEDED\n         BH    REFSEAR        YES, GO SEARCH BACK\n         ICM   R3,1,0(R2)     LOAD LENGTH OF ENTRY\n         BNZ   *+16           NOT ZERO, OK\n         LA    R15,32         SET ERROR NUMBER\n         BAL   R14,ERRORTN    GO ISSUE ERROR MSG\n         B     DDLOOP         GET OUT\n         CH    R3,=H'8'       SEE IF LENGTH > 8\n         BNH   *+16           NO, CONTINUE\n         LA    R15,32         SET ERROR NUMBER\n         BAL   R14,ERRORTN    GO ISSUE ERROR MSG\n         B     DDLOOP         GET OUT\n         BCTR  R3,0           MAKE MACHINE LENGTH\n         CH    R4,=H'1'       SEE IF 1ST ENTRY\n         BE    REFLOOP2       YES, IGNORE\n         CH    R4,=H'2'       SEE IF 2ND ENTRY\n         BE    REF#2          YES, GO PROCESS IT\n         CH    R4,=H'3'       SEE IF 3RD ENTRY\n         BE    REF#3          YES, GO PROCESS IT\n*        THIS MUST BE THE 4TH ENTRY\nREF#4    EX    R3,MOVE10      MOVE DDN TO SEARCH FIELD\n         B     REFLOOP2       BRANCH\nREF#3    CH    R5,=H'3'       SEE IF ONLY 3 ENTRIES\n         BE    REF#3B         YES, MUST BE DDNAME\n*\n*        IF NOT DDNAME, MUST BE PROCSTEP NAME\n*\nREF#3A   EX    R3,MOVE11      MOVE ENTRY TO PSTEP ENTRY\n         B     REFLOOP2       BRANCH\nREF#3B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME\n         B     REFLOOP2       BRANCH\nREF#2    CH    R5,=H'2'       SEE IF ONLY 2 ENTRIES\n         BE    REF#2B         ONLY 2, MUST BE DDNAME\n*        IF 3 OR 4 ENTRIES, THIS ENTRY MUST BE FOR JOBSTEP\nREF#2A   EX    R3,MOVE12      MOVE ENTRY TO JSTEP\n         B     REFLOOP2       BRANCH\nREF#2B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME\nREFLOOP2 LA    R2,2(R3,R2)    INCREMENT TO NEXT ENTRY\n         B     REFLOOP1       LOOP\n*\nMOVE11   MVC   REFPSTEP(0),1(R2)   *********** EXECUTED ************\nMOVE12   MVC   REFJSTEP(0),1(R2)   *********** EXECUTED ************\n*\nREFSEAR  L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC CARD\n*\n*        IF REFERBACK WITHIN CURRENT STEP, THIS ADDR WILL BE\n*        USED FOR START OF SEARCH\n*\n         CLI   REFJSTEP,C' '  SEE IF JSTEP PART OF SEARCH\n         BE    REFSEAR5       NO, SAME STEP WE ARE IN\n         CLI   REFPSTEP,C' '  SEE IF PROCSTEP PART OF SEARCH\n         BE    REFSEAR1       BLANK, NO PROCSTEP\n         LA    R3,15          SET COMPARE LENGTH FOR JS & PS\n         B     REFSEAR2       BRANCH\nREFSEAR1 LA    R3,7           SET COMPARE LENGTH FOR JS ONLY\nREFSEAR2 L     R7,FIRSTENT    LOAD START OF TABLE\nREFSEAR3 LA    R7,ENTLEN(R7) INCREMENT PAST JOB ENTRY\n         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY\n         BE    REFSEAR4       YES, GO COMPARE\n         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE\n         BE    REFNO          NOT FOUND, PROBABLE JCL ERROR, EXIT\n         B     REFSEAR3       LOOP\nREFSEAR4 EX    R3,COMPARE1    SEE IF RIGHT STEP\n         BE    REFSEAR5       YES, GO SEARCH FOR DDNAME\n         B     REFSEAR3       LOOP FOR NEXT ENTRY\nREFSEAR5 LA    R7,ENTLEN(R7) INCREMENT TO NEXT DD ENTRY\n         TM    ENTRYTYP,TYPEDD SEE IF DD ENTRY\n         BNO   REFNO          DDNAME NOT FOUND, EXIT\nREFSEAR6 CLC   REFDDN,DDDN    MATCH DDNAME????\n         BNE   REFSEAR5       NO, LOOP FOR NEXT DD\nREFOUND  MVC   REFDSN(L'DDSN),DDSN SAVE DSNAME\n         MVC   REFUNIT,DTYPE  SAVE UNIT INFO\n         MVC   REFVOL,DVOLSER SAVE VOLSER INFO\nREFNO    BR    R14            RETURN\n*\nCOMPARE1 CLC   REFERBCK(0),EENTRY  *********** EXECUTED ************\n*\n         EJECT                                                    TGB45\n***************************************************************** TGB45\n*                                                                 TGB45\n*                         S E T U P                               TGB45\n*                                                                 TGB45\n*        DO AUTOMATIC TAPE SETUP WORK                             TGB45\n*                                                                 TGB45\n***************************************************************** TGB45\n*                                                                 TGB45\n*------- SEE IF A '/*SETUP AUTO' CARD WAS TYPED ***************** TGB45\n*                                                                 TGB45\nSETUP    DS    0H                                                 TGB45\n         TM    UCBTYP3,X'80'           TAPE UNIT?                 TGB45\n         BNOR  R5                      NO - JUST RETURN           TGB45\n         L     R2,JCTADDR              LOAD JCT ADDRESS           TGB45\n         USING JCT,R2                  SET ADDRESSABILITY TO JCT  TGB45\n         TM    JCTUSER3,X'04'          AUTO SETUP REQUESTED ?     TGB45\n         BNOR  R5                      NO  - JUST RETURN          TGB45\n         MVC   SETJNAME,JCTJNAME       GET JOB NAME FOR MESSAGES  TGB45\n         DROP  R2                                                 TGB45\n*                                                                 TGB45\n*------- MESSAGE LOOP ------------------------------------------- TGB45\n*                                                                 TGB45\n         LA    R2,LOCAREA              POINT TO LOCATE AREA       TGB45\n         LH    R4,0(R2)                GET NUMBER OF VOLSERS      TGB45\n         LA    R2,6(R2)                POINT TO FIRST VOLSER      TGB45\nSETUP1   LA    R3,5                    5 VOLSERS PER MESSAGE      TGB45\n         MVC   SETMSG,SETMSGC          GET SETUP MSG WTO CONSTANT TGB45\n         MVC   SETMSG+13(8),SETJNAME   GET JOB NAME               TGB45\n         LA    R8,SETMSG+22            POINT WITHIN SETUP WTO     TGB45\nSETUP2   LTR   R4,R4                   ANY MORE VOLSERS ?         TGB45\n         BZ    SETUP3                  NO  - WE ARE DONE          TGB45\n*                                                                 TGB48\n*------- SKIP IF VOLSER WAS ALREADY SEEN ------------------------ TGB48\n*                                                                 TGB48\n         L     R15,SETTABLE            POINT TO SETUP TABLE START TGB48\nSETUP2A  CLI   0(R15),X'FF'            END OF TABLE ?             TGB48\n         BE    SETUP2B                 YES - NOT FOUND            TGB48\n         CLC   0(6,R2),0(R15)          VOLSER MATCH ?             TGB48\n         BE    SETUP6                  YES - SKIP THIS VOLSER     TGB48\n         LA    R15,6(R15)              NO  - POINT TO NEXT VOLSER TGB48\n         B     SETUP2A                 AND KEEP LOOKING           TGB48\n*                                                                 TGB48\nSETUP2B  MVC   0(6,R15),0(R2)          NOT FOUND - ADD TO TABLE   TGB48\n         MVI   6(R15),X'FF'            MARK NEW END OF TABLE      TGB48\n*                                                                 TGB48\n*------- SEE IF VOLSER IS IN THE SILO OR NOT -------------------- TGB45\n*                                                                 TGB45\n         L     R15,SLSXCAL             GET CALL ADDRESS           TGB45\n         LTR   R15,R15                 ANYTHING THERE ?           TGB45\n         BZ    SETUP7                  NO  - DON'T CALL SLS       TGB45\n         MVC   SLSREQ(256),SLSREQC     MOVE CONSTANT TO WORK AREA TGB45\n         MVC   SLSREQ+256(SLSREQCL-256),SLSREQC+256 MOVE THE REST TGB45\n         SLSXREQ QVOLUME,MF=(E,SLSREQ),OPTION=SYNCH,VOLSER=(2),   TGB45X\n               XCALADR=SLSXCAL                                    TGB45\n         LTR   R15,R15                 OK CALL ?                  TGB45\n         BNZ   SETUP7                  NO  - SHOW VOL FOR SETUP   TGB45\n         LR    R9,R1                   POINT TO SLX AREA          TGB45\n         USING SLX,R9                  AND USE                    TGB45\n         CLI   SLXCMDRC,SLXROK         DID QUERY WORK OK ?        TGB45\n         BNE   SETUP7                  NO  - SHOW VOL FOR SETUP   TGB45\n         A     R9,SLXXVOLO             POINT TO VOLUME AREA       TGB45\n         USING SLXSVOL,R9              AND USE                    TGB45\n         TM    SLXVSTA,SLXVILB         VOLSER IN A SILO ?         TGB45\n         BNO   SETUP7                  NO  - SHOW VOL FOR SETUP   TGB45\nSETUP6   BCTR  R4,R0                   YES - BUMP VOL CNT DOWN 1  TGB45\n         LA    R2,12(R2)               POINT TO NEXT VOLSER       TGB45\n         B     SETUP2                  AND LOOP                   TGB45\n*                                                                 TGB45\n*------- NOT IN SILO - ADD VOLSER TO MESSAGE -------------------- TGB45\n*                                                                 TGB45\nSETUP7   MVC   0(6,R8),0(R2)           MOVE A VOLSER              TGB45\n         CLI   UCBTYP4,X'81'           3490 DRIVE ?               TGB45\n         BNE   SETUP8                  NO  - MESSAGE IS COMPLETE  TGB45\n         MVI   6(R8),C'*'              YES - ADD SILO INDICATOR   TGB45\nSETUP8   LA    R8,8(R8)                BUMP MESSAGE POINTER       TGB45\n         LA    R2,12(R2)               BUMP LOCAREA POINTER       TGB45\n         BCTR  R4,0                    BUMP DOWN                  TGB45\n         BCT   R3,SETUP2               AND CONTINUE FOR 6 VOLSERS TGB45\n         LA    R1,SETMSG               POINT TO SETUP MESSAGE     TGB45\n         WTO   MF=(E,(1))              SEND IT OUT                TGB45\n         B     SETUP1                  AND LOOK FOR MORE VOLSERS  TGB45\n*                                                                 TGB45\nSETUP3   CH    R3,=H'5'                ANY VOLSERS TO SHOW ?      TGB45\n         BE    SETUP4                  NO  - SKIP LAST WTO        TGB45\n         LA    R1,SETMSG               POINT TO SETUP MESSAGE     TGB45\n         WTO   MF=(E,(1))              SEND IT OUT                TGB45\n         OI    JOBIND2,AUTOHOLD        SHOW WE NEED TO HOLD JOB   TGB45\nSETUP4   DS    0H                                                 TGB45\n*                                                                 TGB45\n*------- SET SETUP AND HOLD FLAGS IF NEEDED --------------------- TGB45\n*                                                                 TGB45\n         TM    JOBIND2,AUTOHOLD        SHOULD WE HOLD THIS JOB ?  TGB45\n         BNO   SETUP9                  NO  - WE ARE DONE          TGB45\n         L     R2,JCTADDR     LOAD JCT ADDRESS                    TGB45\n         USING JCT,R2         SET ADDRESSABILITY TO JCT           TGB45\n         OI    JCTJBOPT,JCTSETUP                                  TGB45\n         OI    JCTJBOPT,JCTTHOLD                                  TGB45\n         DROP  R2                                                 TGB45\nSETUP9   BR    R5                                                 TGB45\n*                                                                 TGB45\n         EJECT\n**********************************************************************\n*\n*                         L O C A T E\n*\n*        ISSUE THE LOCATE MACRO TO OBTAIN THE REQUESTED UNIT TYPE\n*        AND VOLSER INFORMATION.\n*\n**********************************************************************\n*\nLOCATE   LA    R15,68         LOAD OPTION VALUE\n         SLL   R15,24         SHIFT OPTION TO HIGH BYTE\n         ST    R15,CAMLST     STORE INTO CAMLST AREA\n         LA    R15,LDSN       LOAD ADDR OF DSN\n         ST    R15,CAMLST+4   STORE INTO CAMLST AREA\n         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA\n         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA\n         LA    R15,LOCAREA    LOAD ADDR OF LOCATE WORK AREA\n         ST    R15,CAMLST+12  STORE INTO CAMLST AREA\n         LOCATE CAMLST        READ CATALOG\n         BR    R5             RETURN TO CALLER\n*\n         EJECT\n**********************************************************************\n*\n*                     C A T A L O G    L O C A T E\n*\n*        ISSUE THE LOCATE MACRO TO OBTAIN THE VOLSER FOR A GIVEN\n*        HIGH LEVEL INDEX.  THE UCB SEARCH ROUTINE WILL THEN BE\n*        BRANCH ENTERED TO DETERMINE IF THE CATALOG IS ONLINE TO\n*        THIS SYSTEM.\n*                                                                 TGB10\n*        TO SAVE LOCATES ON THE HIGH LEVEL INDEX, A LOOKASIDE     TGB10\n*        BUFFER IS USED. CATLOC NOW CALLS UCBSEAR DIRECTLY.       TGB10\n*\n*        IN:  LDSN CONTAINS FULL DATASET NAME.                    TGB24\n*\n**********************************************************************\n*                                                                 TGB10\nCATLOC   LABEL                                                    TGB10\n         STM   R3,R5,CATSAVE  SAVE REGISTERS WE MUST USE          TGB10\n*\nCATLOCA  SR    R5,R5              CLEAR CHAR COUNT                TGB24\n         LA    R4,LDSN            POINT TO DSN                    TGB24\n         LA    R3,8               MUST SEE DOT WITHIN 8 CHARS     TGB24\n*                                                                 TGB24\nCATLOCB  CLI   0(R4),C'.'         PERIOD ?                        TGB24\n         BE    CATLOCC            YES - THEN MOVE IT              TGB24\n         LA    R4,1(R4)           BUMP ALONG                      TGB24\n         LA    R5,1(R5)           COUNT CHARACTERS IN HI LEVEL    TGB24\n         BCT   R3,CATLOCB         CONTINUE IF NOT 8 CHARS YET     TGB24\n*                                                                 TGB24\nCATLOCC  MVC   HLINDEX,BLANKS     CLEAR HI LEVEL NAME             TGB24\n         BCTR  R5,0               MAKE MACHINE LENGTH             TGB24\n         EX    R5,CATMOVE         STORE HI LEVEL INDEX            TGB24\n*\n         L     R3,INDXTABL    GET ADDRESS OF INDEX TABLE          TGB10\n         LA    R4,INDXMAX     GET MAX NUMBER OF TABLE ENTRIES     TGB10\n*                                                                 TGB10\nCATLOC1  CLI   0(R3),0        ARE WE AT END OF TABLE ?            TGB10\n         BE    CATLOC3        YES - THEN ENTRY IS NOT FOUND       TGB10\n         CLC   0(INDXLEN,R3),HLINDEX  COMPARE INDEX TO TABLE      TGB10\n         BE    CATLOC4        FOUND - DON'T BOTHER WITH LOCATE    TGB10\n         LA    R3,INDXLEN(R3) ELSE TRY NEXT ENTRY IN TABLE        TGB10\n         BCT   R4,CATLOC1     IF THERE IS ONE                     TGB10\n*\nCATLOC3  DS    0H                                                 TGB10\n         MVC   HLI,HLINDEX    SAVE INDEX SINCE LOCATE RUINS IT    TGB10\n         LA    R15,68         LOAD OPTION VALUE\n         SLL   R15,24         SHIFT OPTION TO HIGH BYTE\n         ST    R15,CAMLST     STORE INTO CAMLST AREA\n         LA    R15,HLINDEX    LOAD ADDR OF DSN\n         ST    R15,CAMLST+4   STORE INTO CAMLST AREA\n         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA\n         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA\n         LA    R15,LOCAREA    LOAD ADDR OF LOCATE WORK AREA\n         ST    R15,CAMLST+12  STORE INTO CAMLST AREA\n         LOCATE CAMLST        READ CATALOG\n         LTR   R15,R15        IS ALIAS DEFINED ?                  TGB10\n         BNZ   CATLOC4        NO -  COULD BE IN MASTER CATALOG    TGB10\n         BAS   R5,UCBSEAR     CALL UCB SEARCH ROUTINE             TGB10\n         LTR   R15,R15        IS CATALOG ONLINE ?                 TGB10\n         BNZ   CATLOC5        NO  - RETURN NON-ZERO RETURN CODE   TGB10\n         LTR   R4,R4          IS THERE ROOM IN TABLE TO ADD ?     TGB10\n         BZ    CATLOC4        NO  - THEN DO NOT ADD TO TABLE      TGB10\nCATLOC2  DS    0H                                                 TGB10\n         MVC   0(INDXLEN,R3),HLI  ADD INDEX TO TABLE              TGB10\nCATLOC4  SLR   R15,R15        CLEAR RETURN CODE                   TGB10\nCATLOC5  LM    R3,R5,CATSAVE  RESTORE REGISTERS                   TGB10\n         BR    R5             RETURN TO CALLER\n*\nCATMOVE  MVC   HLINDEX(0),LDSN     ****** EXECUTED ******         TGB24\n*\n         EJECT\n**********************************************************************\n*\n*                         U C B S E A R\n*\n*        SEARCH THE SYSTEM UCBS TO SEE IF THE REQUESTED CATALOG\n*        IS MOUNTED. IF NOT, RETURN WITH A NON-ZERO IN R15, WHICH\n*        WILL CAUSE THE JOB TO BE FAILED, SINCE AT LEAST ONE DATA-\n*        SET REQUESTED VIA THE CATALOG CANNOT BE ACCESSED.\n*\n**********************************************************************\n*\nUCBSEAR  DS    0H\n*\n         SLR   R15,R15                                            TGB43\n         BR    R5                                                 TGB43\n*\n         STM   R0,R14,SAVEREGS SAVE REGISTERS\n         L     R3,CVTPTR      GET CVT ADDRESS\n         USING CVTMAP,R3      SET ADDR TO CVT\n         XC    UCBWORK,UCBWORK  CLEAR UCB WORKAREA\n         LA    R1,UCBWORK     GET ADDRESS OF UCB WORKAREA\n         ST    R1,PARMWA      STORE ADDR IN PARMLIST\n         LA    R1,DEVCLASS    GET ADDRESS OF DEVCLASS BYTE AREA\n         ST    R1,PARMDEVT    STORE IN PARMLIST\n         MVI   DEVCLASS,UCB3DACC\n         LA    R1,UCBADDR     GET ADDR OF AREA TO STORE UCB ADDRESS\n         ST    R1,PARMUCB     STORE IN PARMLIST\n         LA    R1,PARMLUCB    PUT PARMLIST ADDR IN R1\n         USING UCBOB,R2       SET UP ADDR TO UCB\nUCBSEAR1 DS    0H\n         L     R15,CVTUCBSC   GET SCAN SERVICE ADDRESS\n         BALR  R14,R15        GO TO SCAN SERVICE\n*\n         LTR   R15,R15        HAS UCB BEEN FOUND ?\n         BNZ   UCBSEAR2       NO - END OF SEARCH, EXIT WITH ERROR\n         L     R2,UCBADDR     LOAD UCB ADDRESS\n         CLC   UCBVOLI,CAMVOL IS THIS IT ?\n         BNE   UCBSEAR1       NO - TRY AGAIN\n         TM    UCBSTAT,UCBONLI  IS VOLUME ONLINE ?\n         BO    UCBSEAR3       YES - GO BACK AND LOOK UP DATASET\nUCBSEAR2 LA    R15,4          SET R15 NON-ZERO\nUCBSEAR3 LM    R0,R14,SAVEREGS RESTORE REGISTERS\n         BR    R5             RETURN TO CALLER\n*\n         DROP  R2             DROP UCBOB\n         DROP  R3             DROP CVTMAP\n*\n***************************************************************** TGB23\n*                                                                 TGB23\n*                       G E T D G N                               TGB23\n*                                                                 TGB23\n*       CALL SCEDGLKP TO LOOKUP DATAGROUP NAME TABLE FOR US       TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n*  IN:  DGNNAME = DATAGROUP NAME TO LOOKUP                        TGB23\n*       DGNWORK   POINTS TO A 1024 BYTE WORK AREA                 TGB23\n*       DGNRETN   POINTS TO A 1024 BYTE TABLE RETURN AREA         TGB23\n*       R5      = RETURN ADDRESS                                  TGB23\n*                                                                 TGB23\n*  OUT: R15 = N/A   DO NOT CHECK RC                               TGB23\n*                                                                 TGB23\n*  NOTE: DGN RETURN AREA IS ALWAYS FILLED WITH A VALID            TGB23\n*        'DGTABLE'. IF SCEDGLKP FAILS, A DEFAULT TABLE IS         TGB23\n*        PUT THERE BY THIS CODE.                                  TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\nGETDGN   DS    0H                                                 TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*              SETUP FOR CALL TO SCEDGLKP                         TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n         OC    DGNNAME,BLANKS      MAKE DGNAME UPPER CASE         TGB23\n         LA    R1,DGNNAME          POINT TO DATAGROUP NAME        TGB23\n         ST    R1,DGNPARM+0        SAVE IN PARMLIST               TGB23\n         LA    R1,DGNLEN           POINT TO LENGTH AREA           TGB23\n         ST    R1,DGNPARM+8        SAVE IN PARMLIST               TGB23\n         OI    DGNPARM+12,X'80'    MARK LAST PARM                 TGB23\n         LA    R1,DGNRETNL         GET LENGTH OF RETURN AREA      TGB23\n         STH   R1,DGNLEN           AND SAVE AS A PARM             TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*                     CALL LOOKUP PGM                             TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n         LA    R1,DGNPARM          POINT TO LOOKUP PARMS          TGB23\n         LINK  EP=SCEDGLKP,ERRET=GETDGND                          TGB23\n         LTR   R15,R15             LOOKUP OK ?                    TGB23\n         BZR   R5                  YES - RETURN                   TGB23\n*                                                                 TGB23\n*        CH    R15,=H'4'           MIGHT BE JUST A RELOAD ?       TGB23\n         BNE   GETDGND             NO  - FIX UP DEFAULT           TGB23\n         CH    R0,=H'4'            JUST A RELOAD ?                TGB23\n         BER   R5                  YES - RETURN                   TGB23\n*                                                                 TGB23\nGETDGND  XWTO  WTO965,LWTO965                                     TGB23\n         L     R1,DGNRETN          POINT TO DGN RETURN AREA       TGB23\n         MVC   0(DEFTABL,R1),DEFTAB   MOVE IN DEFAULT TABLE       TGB23\n         BR    R5                  RETURN                         TGB23\n*                                                                 TGB23\n         EJECT                                                    TGB11\n***************************************************************** TGB11\n*                                                                 TGB11\n*                     A C F C H E C K                             TGB11\n*                                                                 TGB11\n*            CHECK RACF RESOURCE RULE AUTHORITY                   TGB11\n*                                                                 TGB11\n***************************************************************** TGB11\n*                                                                 TGB11\n*  CALL USING MACRO 'SCECHK' (DESCRIBED ABOVE IN MACROS)          TGB11\n*                                                                 TGB11\n* RACF ---------------------------------------------------------  TGB28\n*                                                                 TGB28\n*  IN:  USERID PREVIOUSLY SETUP                                   TGB28\n*                                                                 TGB28\n*  OUT: R15 = 0    USER IS AUTHORIZED FOR RESOURCE                TGB28\n*       R15 \u00ac 0    USER IS NOT AUTHORIZED FOR RESOURCE            TGB28\n*                                                                 TGB28\n*    ALL REGISTERS RESTORED BUT R0,R1,R15                         TGB11\n*                                                                 TGB11\n***************************************************************** TGB11\n*                                                                 TGB11\nSCECHECK DS    0H                                                 TGB11\n*                                                                 TGB11\n         L     R5,RACFWORK         POINT TO WORK AREA             TGB11\n         USING RACFAREA,R5         AND USE                        TGB11\n         STM   R2,R14,RACFSAVE     SAVE REGISTERS                 TGB11\n         MVC   RNAME,BLANKS            CLEAR PROFILE NAME         TGB28\n         MVC   RNAME(7),=C'$EXIT6.'    PUT IN $EXIT6              TGB28\n         MVC   RNAME+7(3),RACFKEY+1    GET KEY                    TGB28\n         MVC   RNAME+10(2),=C'.#'      AND TYPE DELIMITER         TGB28\n         MVC   RNAME+12(20),RACFNAME   AND TYPE                   TGB28\n         MVC   CHEKLST(CHEKLSTL),CHEKCON                          TGB28\n         LA    R2,RACWORK              POINT TO WORK AREA         TGB28\n         LA    R4,CLASNAME             POINT TO 'FACILITY'        TGB28\n         LA    R8,RNAME                POINT TO PROFILE NAME      TGB28\n         L     R9,ACEEADR              POINT TO USER'S ACEE       TGB28\n         RACROUTE REQUEST=AUTH,ENTITY=((8)),CLASS=(4),            TGB28X\n               ATTR=UPDATE,WORKA=(2),MSGSUPP=YES,                 TGB28X\n               RELEASE=1.8,ACEE=(9),MF=(E,CHEKLST)                TGB28\n         CH    R15,=H'4'               OK OR NOT FOUND ?          TGB28\n         BNH   RACFRET0                YES - RETURN OK            TGB28\n         B     RACFRET                 ERROR                      TGB28\n*                                                                 TGB28\n         DROP  R5                  DROP RACFWORK                  TGB11\n*                                                                 TGB11\n         DROP  R7        DROP SAVE TABLE ADDRESS                  TGB11\n         DROP  R13       DROP MAIN WORK AREA                      TGB11\n*                                                                 TGB11\n         EJECT                                                    TGB11\n***************************************************************** TGB11\n*                                                                 TGB11\n*                          A C F I N I T                          TGB11\n*                                                                 TGB11\n*  INITIALIZE FOR RACF PROCESSING                                 TGB28\n*                                                                 TGB11\n***************************************************************** TGB11\n*\n*  IN:  R5 POINTS TO RACF WORK AREA\n*       R2 POINTS TO JCT\n*                                                                 TGB28\n* RACF ---------------------------------------------------------  TGB28\n*                                                                 TGB28\n*      1) UMAIL, DGROUP, AND PNAME ARE OBTAINED FROM THE          TGB28\n*         USER'S ACEE (VIA RACINIT). THE ACEE IS SAVED.           TGB28\n*         ACCT FIELD IS SET TO 'EXIT600000'                       TGB28\n*                                                                 TGB11\n*   ALL REGISTERS RESTORED BUT R0, R1, R15                        TGB11\n*                                                                 TGB11\n*  NOTE: PSW CC REFLECTS THE CONTENTS OF R15 AT RETURN            TGB11\n*                                                                 TGB11\n*        RACINIT MUST NOT ADDRESS MAIN WORK AREA SINCE TSORTN     TGB11\n*        ALSO CALLS IT.                                           TGB11\n*                                                                 TGB28\n***************************************************************** TGB11\n*                                                                 TGB11\nRACFINIT DS    0H                                                 TGB11\n*                                                                 TGB11\n         USING RACFAREA,R5         USE RACF WORK AREA             TGB11\n         USING JCT,R2              USE JCT\n         STM   R2,R14,RACFSAVE     SAVE REGISTERS                 TGB11\n*                                                                 TGB11\n***************************************************************** TGB28\n*                  GET USERID INTO PROPER FORMAT                  TGB28\n***************************************************************** TGB28\n*                                                                 TGB28\n         LA    R1,USERID               POINT TO USERID            TGB28\n         MVI   USERID+8,C' '           SET END MARK               TGB28\nRACF0    LA    R1,1(R1)                POINT TO NEXT CHAR         TGB28\n         CLI   0(R1),C' '              IS IT A SPACE ?            TGB28\n         BNE   RACF0                   NO  - KEEP LOOKING         TGB28\n         LA    R8,USERID               YES - SET TO GET LENGTH    TGB28\n         SR    R1,R8                   GET LENGTH                 TGB28\n         STC   R1,USERIDL              AND SAVE IN RACF FORMAT    TGB28\n*                                                                 TGB28\n***************************************************************** TGB28\n*                   CALL RACINIT TO GET ACEE                      TGB28\n***************************************************************** TGB28\n*                                                                 TGB28\n         MVC   INITLST(INITLSTL),INITCON                          TGB28\n         LA    R8,USERIDL              POINT TO USERID (LEN)      TGB28\n         LA    R9,ACEEADR              POINT TO ACEE ADDRESS AREA TGB28\n         RACINIT ENVIR=CREATE,USERID=(8),ACEE=(9),PASSCHK=NO,     TGB28X\n               MF=(E,INITLST)                                     TGB28\n         LTR   R15,R15                 IS IT OK ?                 TGB28\n         BZ    RACFOK                  YES                        TGB28\n         L     R1,=V(RACFMSGS)         POINT TO RACF MESSAGES     TGB06\n         CH    R15,=H'40'              RC WITHIN MSG RANGE ?      TGB38\n         BH    RACFM1                  NO  - USE DEFAULT          TGB38\n         MH    R15,=H'10'              USE AS INDEX INTO LIST     TGB06\n         AR    R1,R15                  ADD RETURN CODE INDEX      TGB06\nRACFM1   MVC   RACFMSG,0(R1)           GET RACF MESSAGE           TGB06\n         B     RACFERR2                AND ERROR                  TGB38\nRACFOK   DS    0H                                                 TGB06\n*                                                                 TGB28\n***************************************************************** TGB28\n*                   GET FIELDS FROM THE ACEE                      TGB28\n***************************************************************** TGB28\n*                                                                 TGB28\n         L     R1,ACEEADR              GET ACEE                   TGB28\n         USING ACEE,R1                 AND USE                    TGB28\n         L     R4,ACEEUNAM             POINT TO USER NAME         TGB28\n         SLR   R3,R3                   CLEAR FOR IC               TGB28\n         IC    R3,0(R4)                GET LENGTH (+1)            TGB28\n         BCTR  R3,0                    BUMP DOWN LENGTH FIELD     TGB28\n         BCTR  R3,0                    BUMP DOWN FOR IC           TGB28\n         EX    R3,MOVENAME             GET NAME                   TGB28\n*                                                                 TGB28\n         L     R1,ACEEINST             POINT TO INSTALL DATA      TGB28\n         LA    R9,1(R1)                POINT TO INSTDATA          TGB28\n         USING SCERACDS,R9             AND USE                    TGB28\n         CLI   0(R1),RACDGRP-SCERACDS+L'RACDGRP                   TGB29\n         BL    RACFOK1                 NO  - SKIP ALL THIS        TGB29\n         MVC   DGROUP,RACDGRP          GET DATAGROUP              TGB28\n         CLI   0(R1),RACROOM-SCERACDS+L'RACROOM                   TGB29\n         BL    RACFOK1                 NO  - SKIP ALL THIS        TGB29\n         MVC   UMAIL,RACROOM           GET ROOM NUMBER            TGB28\n         DROP  R9                                                 TGB28\n*                                                                 TGB28\nRACFOK1  DS    0H                                                 TGB28\n         MVC   ACCT,=C'EXIT600000'                                TGB28\n         TM    JCTPNAME,NOT-C' '       ANY PROGRAMMER NAME ?\n         BNZ   RACFSET1                YES - SKIP\n         MVC   JCTPNAME,PNAME          NO  - SCOOT IN FROM RACF\nRACFSET1 TM    JCTROOM,NOT-C' '        ANY ROOM NUMBER ?\n         BNZ   RACFRET0                NO  - SKIP\n         MVC   JCTROOM(4),UMAIL\n         MVC   JCTROOM+4(4),BLANKS\n         MVC   JCTROOMN,UMAIL\n         B     RACFRET0            AND RETURN0                    TGB28\n*                                                                 TGB11\nMOVENAME MVC   PNAME(0),1(R4)          ====== EXECUTED ======     TGB01\n*\nRACFRET0 SLR   R15,R15\nRACFRET  LM    R2,R14,RACFSAVE\n         LTR   R15,R15\n         BR    R14\n*\nRACFERR2 LA    R15,8\n         B     RACFRET\n*\n         DROP  R2                  DROP JCT                       TGB11\n         DROP  R5                  DROP RACFWORK                  TGB11\n*\n         EJECT                                                    TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\n*                     A C C O U N T                               TGB19\n*                                                                 TGB19\n*      OBTAIN DATAGROUP NAME AND INSERT INTO ACCOUNT FIELD        TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\n*  IN:  R1 POINTS TO A TEMP 256 BYTE WORK AREA                    TGB19\n*       R2 POINTS TO THE JCT                                      TGB19\n*       R5 POINTS TO THE RACF WORKAREA                            TGB19\n*       R6 POINTS TO THE INTERNAL TEXT STRING PASSED BY JES2      TGB19\n*                                                                 TGB19\n*  OUT: RC = 0  ACCOUNT FIELD IS MODIFIED                         TGB19\n*       RC = 8  MORE THAN 9 PARMS ALREADY SPECIFIED - SORRY       TGB19\n*                                                                 TGB19\n*       RACF ACCOUNT NUMBER IS ADDED IF SUBPARM 1 IS NOT THERE    TGB19\n*       RACF ROOM NUMBER IS ADDED IF SUBPARM 2 IS NOT THERE       TGB19\n*       RACF DATAGROUP NAME IS ADDED IF SUBPARM 10 IS NOT THERE   TGB19\n*       RACF PROGRAMMER NAME IS ADDED IF POS PARM 3 IS NOT THERE  TGB19\n*                                                                 TGB19\n*       JCT DATAGROUP NAME (PASSED BY EXIT 4 IN JCTUSER1) WILL BE TGB19\n*       USED. IF NOT AVAILABLE, THEN RACF DATAGROUP NAME IS USED. TGB19\n*                                                                 TGB19\n*  USES:  R0  - WORK                                              TGB19\n*         R1  - POINT TO TEMP WORK AREA                           TGB19\n*         R2  - JCT POINTER                                       TGB19\n*         R3  - SUBPARM DOWN COUNTER                              TGB19\n*         R4  - NEW TEXT AREA POINTER                             TGB19\n*         R5  - POINTER TO RACF WORK AREA                         TGB19\n*         R6  - TEXT POINTER                                      TGB19\n*         R8  - SUBPARM UP COUNTER                                TGB19\n*         R9  - OLD TEXT AREA POINTER                             TGB19\n*         R14 - RETURN ADDRESS                                    TGB19\n*         R15 - WORK                                              TGB19\n*                                                                 TGB19\n*    ALL REGISTERS RESTORED BUT R0,R1,R15                         TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\nACCOUNT  DS    0H                                                 TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*               MAKE SURE THERE ARE POSITIONAL PARMS              TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\n         USING RACFAREA,R5         R5 POINTS TO RACF LIDREC       TGB19\n         STM   R2,R14,RACFSAVE     SAVE REGISTERS                 TGB19\n*                                                                 TGB19\n         CLI   6(R6),X'B4'         ANY POS PARMS ?                TGB19\n         BNE   ACCRET0             NO  - JUST RETURN              TGB19\n         CLI   7(R6),X'00'         ANY JOB NAME ?                 TGB19\n         BE    ACCRET0             NO  - JUST RETURN              TGB19\n*                                                                 TGB19\n         USING JCT,R2              R2 POINTS TO JCT               TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*                   INIT FOR ACCOUNT PROCESSING                   TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\nACCINIT  XC    0(256,R1),0(R1)     CLEAR TEMP TEXT WORK AREA      TGB19\n         MVC   0(7,R1),0(R6)       COPY FIRST 7 BYTES TO TMP AREA TGB19\n         LA    R4,7(R1)            POINT TO TEMP TEXT WORK AREA   TGB19\n         MVI   0(R4),3             FORCE 3 POS PARMS              TGB19\n         LA    R4,1(R4)            POINT TO JOBNAME AREA          TGB19\n         LA    R9,8(R6)            POINT TO OLD RECORD JOBNAME    TGB19\n         BAS   R14,ACCMOVE         COPY JOBNAME TO NEW RECORD     TGB19\n*                                                                 TGB19\n         MVI   0(R4),X'8A'         INDICATE 10 ACCT SUBPARMS      TGB19\n         LA    R4,1(R4)            BUMP PAST COUNT                TGB19\n         CLI   7(R6),1             ANY MORE POS PARMS ?           TGB19\n         BH    ACCSUB1             YES - PROCESS THEM             TGB19\n         SLR   R3,R3               NO  - INDICATE NO SUBPARMS     TGB19\n         B     ACCSUB3             AND PROCESS                    TGB19\n*                                                                 TGB19\nACCSUB1  SLR   R3,R3               CLEAR FOR ICM                  TGB19\n         ICM   R3,1,0(R9)          GET SUBPARM COUNT OR PARM LENGTHGB19\n         BM    ACCSUB2             MINUS - THEN THERE ARE SUBPARMSTGB19\n         LA    R3,1                SET SUBPARM DOWN COUNTER TO 1  TGB19\n         B     ACCSUB3             DON'T POINT PAST SUBPARM LENGTHTGB19\n*                                                                 TGB19\nACCSUB2  N     R3,=X'0000007F'     CLEAR SUBPARM INDICATOR        TGB19\n         LA    R15,8               ASSUME ERROR CONDITION         TGB19\n         CH    R3,=H'9'            MORE THAN 9 SUBPARMS ?         TGB19\n         BH    ACCRET              YES - RETURN WITH ERROR FLAG   TGB19\n         LA    R9,1(R9)            POINT PAST SUBPARM COUNT       TGB19\nACCSUB3  SLR   R8,R8               INIT SUBPARM UP COUNTER        TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*                   LOOP THROUGH ACCOUNT SUBPARMS                 TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\nACCSUB4  LA    R8,1(R8)            ADD 1 TO SUBPARM UP COUNT      TGB19\n         CH    R8,=H'10'           ARE WE DONE WITH SUBPARMS ?    TGB19\n         BH    ACCSUB5             YES                            TGB19\n         LTR   R3,R3               DO WE HAVE SUBPARM TO COPY ?   TGB19\n         BZ    ACCSUB6             NO - THEN FILL IN IF POSSIBLE  TGB19\n         BAS   R14,ACCMOVE         COPY THIS ACCOUNT FIELD        TGB19\n         BCTR  R3,0                BUMP DOWN ACCOUNT FIELD COUNT  TGB19\n         B     ACCSUB4             AND LOOP TO NEXT ACCOUNT FIELD TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*          ADD ACCOUNT SUBPARMS SUPPLIED BY RACF AND XEQ          TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\nACCSUB6  CH    R8,=H'1'            IS THIS THE ACCOUNT NUMBER ?   TGB19\n         BE    ACCSUBA             YES                            TGB19\n         CH    R8,=H'2'            IS THIS THE ROOM NUMBER ?      TGB19\n         BE    ACCSUBR             YES                            TGB19\n         CH    R8,=H'10'           IS THIS THE DATAGROUP NAME     TGB19\n         BE    ACCSUBD             YES                            TGB19\n         MVI   0(R4),0             SET SUBPARM TO ZERO LENGTH     TGB19\n         LA    R4,1(R4)            POINT PAST SUBPARM             TGB19\n         B     ACCSUB4             LOOP TO NEXT ACCOUNT FIELD     TGB19\n*                                                                 TGB19\nACCSUBA  MVI   0(R4),10            SET LENGTH OF ACCOUNT NUMBER   TGB19\n         MVC   1(10,R4),ACCT       MOVE ACCOUNT NUMBER TO TEXT    TGB28\n         LA    R4,11(R4)           BUMP PAST SUBPARM              TGB19\n         B     ACCSUB4             CONTINUE LOOP                  TGB19\n*                                                                 TGB19\nACCSUBR  MVI   0(R4),4             SET LENGTH OF ROOM NUMBER      TGB19\n         MVC   1(4,R4),UMAIL       MOVE ROOM NUMBER TO TEXT       TGB28\n         LA    R4,5(R4)            BUMP PAST SUBPARM              TGB19\n         B     ACCSUB4             CONTINUE LOOP                  TGB19\n*                                                                 TGB19\nACCSUBD  MVI   0(R4),16            SET LENGTH OF DATAGROUP        TGB19\n         MVC   1(8,R4),DGROUP      MOVE RACF DATAGROUP TO TEXT    TGB28\n         MVC   9(8,R4),JCTUSER1    MOVE XEQ DATAGROUP TO TEXT     TGB19\n         CLC   1(8,R4),ZEROS       IS RACF ZEROS ?                TGB19\n         BNE   ACCSUBD1            NO  - LEAVE AS IS              TGB19\n         MVC   1(8,R4),BLANKS      YES - THEN MAKE IT BLANKS      TGB19\nACCSUBD1 CLC   9(8,R4),ZEROS       IS XEQ ZEROS ?                 TGB19\n         BNE   ACCSUBD2            NO  - LEAVE AS IS              TGB19\n         MVC   9(8,R4),BLANKS      YES - THEN MAKE IT BLANKS      TGB19\nACCSUBD2 LA    R4,17(R4)           BUMP PAST SUBPARM              TGB19\n         B     ACCSUB4             CONTINUE LOOP                  TGB19\n*                                                                 TGB19\nACCSUBP  MVI   0(R4),20            SET LENGTH OF PGM NAME         TGB19\n         MVC   1(20,R4),PNAME      MOVE NAME TO TEXT              TGB28\n         LA    R4,21(R4)           BUMP PAST PARM                 TGB19\n         B     ACCCOPY             COPY REST OF TEXT              TGB19\n*                                                                 TGB19\nACCSUB5  CLI   7(R6),2             IS THERE A PROGRAMMER NAME ?   TGB19\n         BNH   ACCSUBP             NO  - THEN ADD IT ALSO         TGB19\n         BAS   R14,ACCMOVE         YES - MOVE IT                  TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*               COPY THE REMAINDER OF THE ORIGINAL TEXT           TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\nACCCOPY  LH    R14,0(R6)           GET LENGTH OF OLD TEXT         TGB19\n         LA    R14,0(R14,R6)       POINT TO END OF TEXT           TGB19\n         SR    R14,R9              GET LENGTH OF TEXT TO COPY     TGB19\n         EX    R14,ACCMOVEX        MOVE REMAINDER OF TEXT         TGB19\n         AR    R4,R14              POINT TO END OF NEW TEXT       TGB19\n         SR    R4,R1               GET NEW LENGTH OF RECORD       TGB19\n         STH   R4,0(R1)            SAVE NEW LENGTH                TGB19\n         EX    R4,ACCCOPYX         COPY BACK TO TEXT BUFFER       TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*                      ACCOUNT RETURN                             TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\nACCRET0  SLR   R15,R15             CLEAR RETURN CODE              TGB19\nACCRET   LM    R2,R14,RACFSAVE     RESTORE REGISTERS              TGB19\n         LTR   R15,R15             SETUP CC CODE                  TGB19\n         BR    R14                 RETURN                         TGB19\n*                                                                 TGB19\n***************************************************************** TGB19\n*           SUBROUTINE TO COPY A SINGLE PARM OR SUBPARM           TGB19\n***************************************************************** TGB19\n*                                                                 TGB19\nACCMOVE  SLR   R15,R15             CLEAR FOR IC                   TGB19\n         IC    R15,0(R9)           GET LENGTH OF OLD PARM         TGB19\n         EX    R15,ACCMOVEX        MOVE THE PARM TO NEW REC       TGB19\n         LA    R9,1(R15,R9)        POINT PAST PARM IN OLD REC     TGB19\n         LA    R4,1(R15,R4)        POINT PAST PARM IN NEW REC     TGB19\n         BR    R14                 RETURN                         TGB19\n*                                                                 TGB19\nACCMOVEX MVC   0(0,R4),0(R9)       ******** EXECUTED ********     TGB19\nACCCOPYX MVC   0(0,R6),0(R1)       ******** EXECUTED ********     TGB19\n*                                                                 TGB19\n         DROP  R2                  DROP JCT ADDRESS               TGB19\n         DROP  R5                  DROP RACF WORK AREA            TGB19\n*\n         EJECT                                                    TGB09\n***************************************************************** TGB09\n*                                                                 TGB09\n*                         T S O R T N                             TGB09\n*                                                                 TGB09\n*  IN:  R2 POINTS TO JCT                                          TGB09\n*       R3 POINTS TO HCT                                          TGB09\n*       R4 IS EOF FLAG FROM JES2                                  TGB09\n*       R6 POINTS TO THE INTERNAL TEXT STRING PASSED BY JES2      TGB09\n*       R7 IS RETURN ADDRESS                                      TGB09\n*                                                                 TGB09\n*  OUT: RC = NA                                                   TGB09\n*                                                                 TGB09\n*  NOTES: 1) THIS SUBROUTINE MODIFYS THE INTERNAL TEXT            TGB09\n*         2) THIS ROUTINE GETS ITS OWN STORAGE AREA               TGB09\n*         3) ROOM NUMBER AND PROGRAMMER NAME ARE NOT MOVED TO     TGB09\n*            JCT UNTIL EOF ON TEXT BECAUSE OF CHECKPOINT PROBLEMS TGB09\n*                                                                 TGB09\n*    ALL REGISTERS RESTORED BUT R0,R1,R15                         TGB09\n*                                                                 TGB09\n***************************************************************** TGB09\n*                                                                 TGB09\n***************************************************************** TGB09\n*                OBTAIN THE TSO WORKAREA                          TGB09\n***************************************************************** TGB09\n*                                                                 TGB09\n         USING TEXT,R6                                            TGB09\n*                                                                 TGB09\nTSORTN   LTR   R4,R4               EOF ON INTERNAL TEXT ?         TGB09\n         BNZR  R7                  YES - SORRY NO TEXT PASSED     TGB09\n*                                                                 TGB09\n         TM    STRINDCS,JOBSTR     IS THIS THE TSO JOB CARD ?     TGB09\n         BNOR  R7                  NO  - JUST RETURN              TGB09\n*                                                                 TGB09\n         GETMAIN RC,LV=TSOWAL      GET TSORTN WORK AREA           TGB09\n         LTR   R15,R15             COULD WE GET THE AREA ?        TGB09\n         BNZR  R7                  NO  - JUST RETURN OK           TGB09\n*                                                                 TGB09\n         LR    R9,R1               GET ADDRESS OF WORK AREA       TGB09\n         USING TSOWA,R9            USE TSO WORK AREA              TGB09\n*                                                                 TGB09\n***************************************************************** TGB09\n*                CLEAR GETMAINED AREA TO ZEROS                    TGB09\n***************************************************************** TGB09\n*                                                                 TGB09\n         LR    R0,R1          SETUP FOR CLEAR                     TGB09\n         L     R1,=A(TSOWAL)  SETUP FOR CLEAR                     TGB09\n         SLR   R15,R15        SETUP FOR CLEAR                     TGB09\n         MVCL  R0,R14         CLEAR ENTIRE AREA TO ZEROS          TGB09\n*                                                                 TGB09\n***************************************************************** TGB09\n*               CALL RACFINIT TO GET LIDREC                       TGB09\n***************************************************************** TGB09\n*                                                                 TGB09\n         USING JCT,R2              USE JCT                        TGB28\n         LA    R5,TSORACF          POINT TO TSO RACF WORK AREA    TGB09\n         USING RACFAREA,R5         AND USE RACF AREA              TGB09\n         MVC   USERID,JCTJNAME     USERID SAME AS JOB NAME        TGB28\n         BAS   R14,RACFINIT        CALL RACFINIT                  TGB09\n         BNZ   TSOFREE             ERROR - GO FREE WORKAREA       TGB09\n*                                                                 TGB09\n***************************************************************** TGB09\n*             CALL ACCOUNT TO UPDATE ACCOUNT FIELDS               TGB09\n***************************************************************** TGB09\n*                                                                 TGB09\n         LA    R1,TSORACFW         POINT TO 256 BYTE WORK AREA    TGB09\n         BAS   R14,ACCOUNT         CALL ACCOUNT                   TGB09\n*                                                                 TGB09\n***************************************************************** TGB09\n*                   FREE WORK AREA                                TGB09\n***************************************************************** TGB09\n*                                                                 TGB09\nTSOFREE  FREEMAIN RC,LV=TSOWAL,A=(9) FREE THE WORK AREA           TGB09\n         BR    R7                  AND RETURN                     TGB09\n*                                                                 TGB09\n         DROP  R9                  DROP TSO WORK AREA             TGB09\n         DROP  R5                  DROP RACF AREA                 TGB09\n         DROP  R6                  DROP TEXT                      TGB09\n         DROP  R2                  DROP JCT                       TGB28\n*\n         AIF    ('&TRACE' NE 'YES').NOLAB3                        TGB07\n***************************************************************** TGB07\n*                      LABEL ROUTINE ENTRY                        TGB07\n***************************************************************** TGB07\n*                                                                 TGB07\n         USING WORKAREA,R13         USE MAIN WORK AREA            TGB07\nLABELRT  DS    0H                                                 TGB07\n         ENTRY LABELRT                                            TGB07\n         USING LABELRT,R15          SET ADDRESSABILTY             TGB07\n         MVC   LABELWTA,LABELWT     MOVE WTO TO WORK AREA         TGB07\n         MVC   LABELWTA+17(8),0(R2) MOVE LABEL NAME TO WTO LIST   TGB07\n         XWTO  LABELWTA,LABELWTL    ISSUE THE WTO                 TGB07\n         LA    R2,8(R2)             SET RETURN ADDRESS            TGB07\n         BR    R2                   AND RETURN                    TGB07\n         DROP  R15                                                TGB07\nLABELWT  WTO   '$EXIT 6 - AT XXXXXXXX',ROUTCDE=(11),DESC=(6),MF=L TGB07\nLABELWTL EQU   *-LABELWT                                          TGB07\n         DROP  R13                  DROP MAIN WORK AREA           TGB07\n*                                                                 TGB07\n.NOLAB3  ANOP                                                     TGB07\n*                                                                 TGB07\n         TITLE 'JES2 EXIT 6 - CONSTANTS'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                       C O N S T A N T S\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n         EJECT\n**********************************************************************\n*                         WTO MESSAGES\n**********************************************************************\n*\n         $MID  960\nWTO960   WTO   '&MID.JOB TERMINATED BY STANDARDS ENFORCEMENT EXIT',    X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO960  EQU   *-WTO960\n*\n         $MID  961\nWTO961   WTO   '&MID.**** UNUSED MESSAGE ****                          X\n                  ',ROUTCDE=(2),DESC=(4),MF=L\nLWTO961  EQU   *-WTO961\n*\n         $MID  962\nWTO962   WTO   '&MID.EX6TABLE LOAD ERROR. DEFAULTS OF ''FGHKOPQW'' WILLX\n                BE USED',ROUTCDE=(2),DESC=(4),MF=L\nLWTO962  EQU   *-WTO962\n*\n         $MID  963\nWTO963   WTO   '&MID.PUT TO JOB MESSAGE DATA SET FAILED',              X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO963  EQU   *-WTO963\n*\n         $MID  964\nWTO964   WTO   '&MID.MAXIMUM ENTRIES IN INTERNAL TABLE EXCEEDED',      X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO964  EQU   *-WTO964\n*\n         $MID  965\nWTO965   WTO   '&MID.DATAGROUP LOOKUP FAILURE - DEFAULT TABLE WILL BE UX\n               SED',ROUTCDE=(2),DESC=(4),MF=L\nLWTO965  EQU   *-WTO965\n*\nSETMSGC  WTO   '$HASP103 XXXXXXXX                                      X\n                     ',ROUTCDE=(5),MF=L                           TGB45\nSETMSGCL EQU   *-SETMSGC                                          TGB45\n*                                                                 TGB45\nSLSREQC  SLSXREQ MF=L                                             TGB45\nSLSREQCL EQU   *-SLSREQC                                          TGB45\n*                                                                 TGB45\n         EJECT\n**********************************************************************\n*                           LITERALS\n**********************************************************************\n*\n         LTORG\n*\n         EJECT\n**********************************************************************\n*                      TABLES USED BY EXIT\n**********************************************************************\n*\n**********************************************************************\n*        FORMAT OF TABLE IS AS FOLLOWS\n*        1)  A 1 BYTE UNIT ATTRIBUTE TYPE\n*            X'00'  UNIMPORTANT DEVICE TYPE\n*            X'02'  TAPE DEVICE\n*            X'04'  PRIVATE MOUNT DISK DEVICE\n*            X'08'  VIO\n*            X'40'  OTHER THAN TAPE\n*        2)  A 1 BYTE MACHINE LENGTH OF ENTRY\n*        3)  AN 8 BYTE FIELD CONTAINING THE DEVICE NAME LEFT JUSTIFIED\n**********************************************************************\n*\nDEVTABLE DS    0H              DEVICE NAME TABLE\n         DC    X'02',X'03',CL8'TAPE'     TAPE\n         DC    X'02',X'04',CL8'TAPE9'    TAPE\n         DC    X'02',X'04',CL8'TAPED'    TAPE\n         DC    X'02',X'04',CL8'TAPEK'    TAPE                     TGB33\n         DC    X'02',X'04',CL8'TAPEKR'   TAPE                     TGB42\n         DC    X'02',X'04',CL8'TAPE9R'   TAPE                     TGB42\n         DC    X'02',X'03',CL8'3400'     TAPE\n         DC    X'02',X'03',CL8'3480'     TAPE                     TGB28\n         DC    X'40',9X'00'    END OF TABLE\n*\n***************************************************************** TGB23\n*        DEFAULT CLASS TABLE IF EX4TABLE CANNOT BE LOADED         TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n* NOTE: IF YOU CHANGE THIS TABLE, ALSO CHANGE MESSAGE 'WTO962'    TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\nDEFTABLE DC    C'FGHKOPQW',X'FF'                                  TGB23\n*\n         EJECT\n**********************************************************************\n*                     MISCELLANEOUS CONSTANTS\n**********************************************************************\n*\nZEROS    DC    XL16'0'        16 BYTES OF BINARY ZEROS\nBLANKS   DC    44C' '         CONSTANT STRING OF BLANKS\nEDMASK   DC    X'402020202120' EDIT MASK FOR MESSAGES\nMAXENTS  DC    Y(SUBTLEN/ENTLEN) MAX ENTRIES IN EXIT6 TABLE\nEX6TABLE DC    CL8'EX6TABLE'  EXIT 6 TABLE NAME\nCLASNAME DC    X'8',C'FACILITY' RACF RESOURCE CLASS NAME          TGB28\n*\nGETLEN   DC    A(GETSIZE)     SIZE OF ENTIRE GETMAIN AREA\n*\n**********************************************************************\n*                         LIST MACROS\n**********************************************************************\n*\nESTAE    ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\n*\nINITCON  RACINIT ENVIR=CREATE,PASSCHK=NO,MF=L                     TGB28\nDELECON  RACINIT ENVIR=DELETE,MF=L                                TGB28\nCHEKCON  RACROUTE REQUEST=AUTH,RELEASE=1.8,MSGSUPP=YES,MF=L       TGB28\n*\n         AIF   ('&TRACE' NE 'YES').NOLAB1                         TGB07\n***************************************************************** TGB07\n*                  LABEL MACRO ROUTINE ADDRESS                    TGB07\n***************************************************************** TGB07\n*                                                                 TGB07\nLABELA   DC    V(LABELRT)          ADDRESS OF LABEL ROUTINE ENTRY TGB07\n.NOLAB1  ANOP                                                     TGB07\n*                                                                 TGB07\n***************************************************************** TGB23\n*                        DEFAULT CLASS TABLE                      TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n* NOTE: THIS TABLE SHOULD CHANGE WHENEVER DSECT 'DGTABLE' IS      TGB23\n*       CHANGED. MAYBE I CAN GET ASSG TO HAVE AN OPTION TO USE    TGB23\n*       THE MACRO TO CREATE THIS DEFAULT TABLE.                   TGB23\n*                                                                 TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\nDEFTAB   DC    Y(DEFTABL)                                         TGB23\n         DC    CL8'TECDA'                                         TGB23\n         DC    CL8' '                                             TGB23\n         DC    X'40'                                              TGB23\n         DC    CL8'SYSDA'                                         TGB23\n         DC    CL40'DEFAULT EXIT6 TABLE'                          TGB23\n         DC    CL4'SYSA'                                          TGB23\n         DC    CL8'RSMD3'                                         TGB23\n         DC    CL6'SYS1'                                          TGB23\n         DS    XL8                                                TGB23\n         DS    XL1                                                TGB23\n         DC    Y(DEFTABC-DEFTAB)                                  TGB23\nDEFTABC  DC    F'15',H'0',C'A',X'0'                               TGB23\n         DC    F'45',H'0',C'B',X'0'                               TGB23\n         DC    F'180',H'0',C'C',X'0'                              TGB23\n         DC    F'600',H'0',C'D',X'0'                              TGB23\n         DC    X'7FFFFFFF',H'0',C'E',X'0'                         TGB23\n         DC    F'15',H'2',C'0',X'0'                               TGB23\n         DC    F'45',H'2',C'1',X'0'                               TGB23\n         DC    F'180',H'2',C'2',X'0'                              TGB23\n         DC    F'300',H'2',C'3',X'0'                              TGB23\n         DC    X'7FFFFFFF',H'2',C'4',X'0'                         TGB23\n         DC    F'180',X'7FFF',C'5',X'0'                           TGB23\n         DC    F'600',X'7FFF',C'6',X'0'                           TGB23\n         DC    X'7FFFFFFF',X'7FFF',C'7',X'80'                     TGB23\nDEFTABL  EQU   *-DEFTAB                                           TGB23\n*                                                                 TGB23\n         TITLE 'JES2 EXIT 6 - MESSAGES'\n**********************************************************************\n*                        NON-ERROR MESSAGES\n**********************************************************************\n*\nMSG0     DC    CL90'SCE100I XXXXXXXX XXXXXXXX TAPES=XXXXX  TIME=(XXXXXXX\n               ,XX) REGION=XXXXX'                                 TGB38\nMSG1     DC    CL90'SCE101I CLASS SET TO X'\n*\nHEADER1  DC    CL100' STMT NO. MESSAGE'\nHEADER2  DC    CL100'-                '\nPREFIX   DS    0CL11          NORMAL MESSAGE PREFIX\n         DC    X'402020202120',CL5' '\n*\n         EJECT\n**********************************************************************\n*                          ERROR MESSAGES\n**********************************************************************\n*\n*  NOTE: MESSAGES ARE A SEPARATE ENTRY POINT, SINCE PROGRAM IS TOO\n*        LARGE ALREADY\n*\n**********************************************************************\n*\nMESSAGES DS    0H                                                 TGB08\n         ENTRY MESSAGES       MESSAGE TABLE                       TGB08\n*\nM1       DC    CL90'SCE001I INTERNAL ERROR - INVALID TEXT STATEMENT TYPX\n               E DETECTED                             '\nM2       DC    CL90'SCE002E JOBNAME, ACCOUNTING INFORMATION, OR PROGRAMX\n                MER NAME MISSING ON THE JOB CARD      '\nM3       DC    CL90'SCE003I LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARX\n               ACTERS                                 '\nM4       DC    CL90'SCE004E INVALID LENGTH OF THE ACCOUNT NUMBER       X\n                                                      '\nM5       DC    CL90'SCE005I LENGTH OF PROGRAMMER NAME FIELD ON THE JOB X\n               CARD EXCEEDS MAXIMUM OF 20 CHARACTERS  '\nM6       DC    CL90'SCE006E PROGRAMMER NAME MISSING FROM JOB CARD      X\n                                                      '\nM7       DC    CL90'SCE007E ADDRSP=REAL GREATER THAN 256K NOT ALLOWED  X\n                                                      '\nM8       DC    CL90'SCE008I TIME VALUE IS NOT NUMERIC                  X\n                                                      '\nM9       DC    CL90'SCE009E MORE THAN 9 ACCOUNT FIELD SUB PARAMETERS SPX\n               ECIFIED ON THE JOB CARD                '\nM10      DC    CL90'SCE010E USERID XXXXXXX UNAUTHORIZED FOR USE OF SUPEX\n               RZAP                                   '\nM11      DC    CL90'SCE011I LENGTH OF THE STEP NAME ON THE EXECUTE CARDX\n                EXCEEDS MAXIMUM OF 8 CHARACTERS       '\nM12      DC    CL90'SCE012I LENGTH OF THE PROGRAM NAME ON THE EXECUTE CX\n               ARD EXCEEDS MAXIMUM OF 8 CHARACTERS    '\nM13      DC    CL90'SCE013I INVALID FORMAT FOR THE REGION PARAMETER ON X\n               THE EXECUTE CARD                       '\nM14      DC    CL90'SCE014I REGION SIZE ON THE EXECUTE CARD IS NOT NUMEX\n               RIC                                    '\nM15      DC    CL90'SCE015I INVALID FORMAT FOR THE TIME PARAMETER ON THX\n               E EXECUTE CARD                         '\nM16      DC    CL90'SCE016E USERID XXXXXXX UNAUTHORIZED FOR USE OF TIMEX\n               =1440 ON THE EXECUTE CARD              '\nM17      DC    CL90'SCE017E SYSTEM ERROR - RESUBMIT LATER              X\n                                                      '\nM18      DC    CL90'SCE018E ROOM NUMBER ON THE JOB CARD IS NOT 4 BYTES X\n               LONG                                   '\nM19      DC    CL90'SCE019E USERID XXXXXXX UNAUTHORIZED FOR USE OF THE X\n               DPRTY KEYWORD ON THE EXECUTE CARD      '\nM20      DC    CL90'SCE020I LENGTH OF THE DDNAME ON THE DD CARD EXCEEDSX\n                MAXIMUM OF 8 CHARACTERS               '\nM21      DC    CL90'SCE021I INVALID FORMAT FOR THE DSNAME PARAMETER ON X\n               THE DD CARD                            '\nM22      DC    CL90'SCE022I LENGTH OF THE DSNAME ON THE DD CARD EXCEEDSX\n                MAXIMUM OF 44 CHARACTERS              '\nM23      DC    CL90'SCE023I LENGTH OF GDG NAME ON THE DD CARD EXCEEDES X\n               35 CHARACTERS                          '\nM24      DC    CL90'SCE024I INVALID FORMAT FOR THE UNIT PARAMETER ON THX\n               E DD CARD                              '\nM25      DC    CL90'SCE025I UNIT COUNT WITHIN THE UNIT PARAMETER ON THEX\n                DD CARD IS NOT NUMERIC                '\nM26      DC    CL90'SCE026I INVALID FORMAT FOR THE VOLUME PARAMETER ON X\n               THE DD CARD                            '\nM27      DC    CL90'SCE027I VOLUME COUNT WITHIN THE VOLUME PARAMETER ONX\n                THE DD CARD IS NOT NUMERIC            '\nM28      DC    CL90'SCE028I LENGTH OF THE VOLSER PARAMETER(S) ON THE DDX\n                CARD EXCEEDS MAXIMUM OF 6 CHARACTERS  '\nM29      DC    CL90'SCE029E REGION SIZE ON THE JOB CARD IS NOT NUMERIC X\n                                                      '\nM30      DC    CL90'SCE030I INTERNAL ERROR - LENGTH OF THE INTERNAL TEXX\n               T OF AN EXECUTE CARD EXCEEDS 512 CHARS '\nM31      DC    CL90'SCE031I LENGTH OF THE PROC STEP NAME ON THE EXECUTEX\n                CARD EXCEEDS MAXIMUM OF 8 CHARACTERS  '\nM32      DC    CL90'SCE032I INVALID FORMAT FOR THE REFERBACK SUBPARAMETX\n               ER ON THE DD CARD                      '\nM33      DC    CL90'SCE033E CATALOG FOR THIS DATASET IS NOT MOUNTED ON X\n               THIS SYSTEM                            '\nM34      DC    CL90'SCE034I THE LENGTH OF THE DSNAME ON A VOLUME REFERBX\n               ACK EXCEEDS A MAXIMUM OF 44 CHARACTERS '\nM35      DC    CL90'SCE035E THE REQUIRED ACCOUNTING FIELD ON THE JOB CAX\n               RD WAS NOT SPECIFIED                   '\nM36      DC    CL90'SCE036E ACCOUNT NUMBER IS NOT ALPHANUMERIC         X\n                                                      '\nM37      DC    CL90'SCE037E ROOM NUMBER ON JOB CARD IS NOT ALPHANUMERICX\n                                                      '\nM38      DC    CL90'SCE038W USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX\n               ODUCTION JOBCLASS - CLASS=X IGNORED    '\nM39      DC    CL90'SCE039E USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX\n               ODUCTION MESSAGE CLASS ON JOB CARD     '\nM40      DC    CL90'SCE040E USERID XXXXXXX UNAUTHORIZED FOR USE OF TIMEX\n               =1440 ON THE JOB CARD                           '\nM41      DC    CL90'SCE041E USERID XXXXXXX UNAUTHORIZED FOR USE OF DATAX\n               GROUP NAME SPECIFIED ON /*XEQ CARD     '\nM42      DC    CL90'SCE042E MORE THAN 2 POSITIONAL PARAMETERS ON THE JOX\n               B CARD                                 '\nM43      DC    CL90'SCE043E USERID XXXXXXX UNAUTHORIZED FOR USE OF A JOX\n               BCAT DD STATEMENT                       '\nM44      DC    CL90'SCE044E USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX\n               ODUCTION SYSOUT CLASS                   '\nM45      DC    CL90'SCE045E USERID XXXXXXX UNAUTHORIZED FOR A RETENTIONX\n                PERIOD OF OVER 120 DAYS                '\nM46      DC    CL90'SCE046E USERID XXXXXXX UNAUTHORIZED FOR AN EXPIRATIX\n               ON DATE OF OVER 120 DAYS                '\nM47      DC    CL90'SCE047E USERID XXXXXXX UNAUTHORIZED FOR USE OF A STX\n               EPLIB DD STATEMENT                      '\nM48      DC    CL90'SCE048E USERID XXXXXXX - RACF RACINIT ERROR - XXXXXX\n               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX     '          TGB28\nM49      DC    CL90'SCE049E TIME PARAMETER IS TOO MANY CHARACTERS.     X\n                                                       '\nM50      DC    CL90'SCE050E USERID XXXXXXX UNAUTHORIZED FOR USE OF A PRX\n               ODUCTION SYSOUT CLASS                   '\nM51      DC    CL90'SCE051E TIME VALUE ON THE EXECUTE CARD IS NOT NUMERX\n               IC                                      '\nM52      DC    CL90'SCE052E SYSOUT CLASS CHARACTER IS NOT ALPHANUMERIC X\n                                                       '          TGB01\nM53      DC    CL90'SCE053E USERID XXXXXXX - **** UNUSED MESSAGE ****  X\n                                                       '          TGB03\nM54      DC    CL90'SCE054E USERID XXXXXXX UNAUTHORIZED FOR USE OF UNITX\n               =TAPEK                                  '          TGB33\nM55      DC    CL90'SCE054E USERID XXXXXXX UNAUTHORIZED FOR USE OF UNITX\n               =TAPE9R OR UNIT=TAPEKR                  '          TGB42\n*                                                                 TGB38\nRACFMSGS CSECT                                                    TGB38\n         DC    CL40'UNKNOWN ERROR FROM RACF'                      TGB38\n         DC    CL40'USERID PROFILE NOT DEFINED'                   TGB38\n         DC    CL40'PASSWORD IS NOT AUTHORIZED'                   TGB38\n         DC    CL40'PASSWORD HAS EXPIRED'                         TGB38\n         DC    CL40'NEW PASSWORD IS INVALID'                      TGB38\n         DC    CL40'USER IS NOT DEFINED TO GROUP'                 TGB38\n         DC    CL40'FAILED BY INSTALLATION EXIT'                  TGB38\n         DC    CL40'USER ACCESS HAS BEEN REVOKED'                 TGB38\n         DC    CL40'RACF IS NOT ACTIVE'                           TGB38\n         DC    CL40'USER ACCESS HAS BEEN REVOKED'                 TGB38\n         DC    CL40'GROUP ACCESS HAS BEEN REVOKED'                TGB38\n*                                                                 TGB38\n         TITLE 'JES2 EXIT 6 - END OF EXIT 6 CSECT'\n**********************************************************************\n*                   END OF EXIT6 CSECT\n**********************************************************************\n*\n         $MODEND\n*\n         TITLE 'JES2 EXIT 6 - DSECTS'\n**********************************************************************\n**********************************************************************\n**********************************************************************\n***\n***\n***\n***\n***                          D S E C T S\n***\n***\n***\n***\n**********************************************************************\n**********************************************************************\n**********************************************************************\n         EJECT\n**********************************************************************\n*                   WORKAREA FOR JOBS\n**********************************************************************\n*\nWORKAREA DSECT\n*\n**********************************************************************\n*                           SAVE AREAS\n**********************************************************************\n*\nSAVEAREA DS    18F            NEW SAVE AREA\nSAVEREGS DS    18F            ROUTINE REGISTER SAVE AREA\nSTAEREGS DS    18F            REGISTERS FOR ESTAE RECOVERY\nSTAESAVE DS    18F            SAVE AREA FOR ESTAE ROUTINE\nPUTSAVE  DS    19F            PUT SAVE AREA\nCATSAVE  DS    3F             CATLOC SAVE AREA                    TGB10\n*\n**********************************************************************\n*                 POINTERS TO EXTENDED WORK AREAS\n**********************************************************************\n*\nRACFWORK DS    F              ADDRESS OF RACF WORK AREA\nINDXTABL DS    F              ADDRESS OF INDEX TABLE              TGB10\nSUBTABLE DS    F              ADDRESS OF AREA FOR JCL STMT TABLE\nSETTABLE DS    F              ADDRESS OF AREA FOR SETUP VOL LIST  TGB48\n*\n**********************************************************************\n*                           ADDRESSES\n**********************************************************************\n*\nEXCPTAB  DS    F              ADDRESS OF EXCEPTION TABLE (EX6TABLE)\nSLSXCAL  DS    F              ADDRESS OF HSC LOOKUP ROUTINE       TGB45\n*\nJCTADDR  DS    F              ADDRESS OF JCT\nHCTADDR  DS    F              ADDRESS OF HCT\nDTEADDR  DS    F              ADDRESS OF DTE\n*\nRETRY    DS    F              ADDRESS OF STAERTRY\nTEXTSTAR DS    F              ADDRESS OF INTERNAL TEXT\n*\n***************************************************************** TGB23\n*                     DGN LOOKUP FIELDS                           TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\nDGNNAME  DS    CL8            DATAGROUP NAME LOOKUP AREA          TGB23\nDGNLEN   DS    H              LENGTH OF RETURN AREA               TGB23\n*                                                                 TGB23\nDGNPARM  DS    0F             PARMLIST FOR DGN LOOKUP             TGB23\n         DS    A              POINTER TO DGNNAME                  TGB23\nDGNRETN  DS    A              POINTER TO RETURN AREA              TGB23\n         DS    A              POINTER TO DGNLEN                   TGB23\nDGNWORK  DS    A              POINTER TO WORK AREA FOR SCEDGLKP   TGB23\n         DS    A              RESERVED                            TGB23\n*\n**********************************************************************\n*                           MISCELLANEOUS\n**********************************************************************\n*\nNOT      EQU   X'FF'          GENERAL 'NOT' FOR FLAGS\n*\nDOUBLE   DS    D              DOUBLE WORD FOR PACK & CVB\nFIRSTENT DS    F              SAVE AREA FOR FIRST SAVE TABLE ENTRY\nLASTENT  DS    F              SAVE AREA FOR LAST SAVE TABLE ENTRY\nLASTEXEC DS    F              ADDR OF LAST EXEC TABLE ENTRY\nPROCTEXT DS    F              ADDR OF SAVED KEYWORD TEXT FROM PROC STMT\nRETCODE  DS    F              SAVE AREA FOR RETURN CODE\n*\nTAPECNT  DS    H              COUNT OF TAPE UNITS USED IN STEP\nPRIVCNT  DS    H              COUNT OF PRIV UNITS USED IN STEP\nENTCOUNT DS    H              NUMBER OF ACTIVE ENTRIES IN TABLE\n*\nUNITCOUN DS    X              COUNT OF UNITS FOR THIS DD\nPROCIND  DS    X              PROCESS PROCEDURE TEXT INDICATOR\n*\nSAVEPROC DS    CL8            STEPNAME WHICH CALLS PROC\nPDDATE   DS    PL3            3 BYTE AREA FOR PD DATE FROM TIME MACRO\n*\nJOBIND   DS    X              JOB RELATED INDICATORS\nJOBLIB   EQU   X'01'          JOB HAD A JOBLIB STMT\nJOBFAIL  EQU   X'02'          JOB FAILED EXIT TESTING\nJOBADDR  EQU   X'04'          JOB SPECIFIED ADDRSP=REAL ON JOB CARD\nJOBT1440 EQU   X'08'          JOB SPECIFIED TIME=1440\nEXADDR   EQU   X'10'          JOB SPECIFIEC ADDRSP=REAL ON EXEC CARD\nJOBPROD  EQU   X'20'          JOB IS A PRODUCTION JOB\nEXEC1440 EQU   X'40'          TIME=1440 SPECIFIED ON EXEC CARD\nJOBOPER  EQU   X'80'          JOB IS A OPERATIONS JOB\n*\nJOBIND2  DS    X              JOB RELATED INDICATORS\nPGM      EQU   X'01'          JOB SPECIFIED SPECIAL PROGRAM NAME\nAUTOHOLD EQU   X'02'          SET IF JOB HELD BY AUTOMATIC SETUP\n*\nDISPIND  DS    X              DD ENTRY DISPOSITION\nNEW      EQU   X'01'          DISP=NEW\nOLD      EQU   X'02'          DISP=OLD\nSHR      EQU   X'04'          DISP=SHR\nMOD      EQU   X'08'          DISP=MOD\nCATLG    EQU   X'10'          STEP COMPLETION DISP=CATLG\nPASS     EQU   X'20'          STEP COMPLETION DISP=PASS\nKEEP     EQU   X'40'          STEP COMPLETION DISP=KEEP\nDELETE   EQU   X'80'          STEP COMPLETION DISP=DELETE\n*\nDISPIND1 DS    X              DD ENTRY DISPOSITION\nUNCATLG  EQU   X'01'          STEP COMPLETION DISP=UNCATLG\n*\nUNITIND  DS    X              DD ENTRY UNIT TYPE\nTAPE     EQU   X'02'          UNIT USED WAS A TAPE\nPRIV     EQU   X'04'          UNIT USED WAS A PRIV DISK PACK\nVIO      EQU   X'08'          UNIT WAS VIO\nAFF      EQU   X'10'          UNIT WAS DETERMINED BY AFF\nUNITGDG  EQU   X'20'          UNIT TYPE(S) FROM GDG PROCESSING\nUNITONDD EQU   X'40'          UNIT SPECIFIED ON DD, BUT WASN'T TAPE\nUNITFND  EQU   X'80'          UNIT TYPE HAS BEEN FOUND\n*\nJACCT    DS    CL14           ACCOUNT NUMBER (1ST ACCT INFO FIELD)\n*\nTENTRY   DS    0CL53          TEMPORARY DD TEXT TABLE ENTRY\nTDDN     DS    CL8            TEMP DDNAME\nTTYPE    DS    C              TEMP UNIT TYPE\nTDSN     DS    CL44           TEMP DSN (FULL)\n*\nTVOLSER  DS    CL6            TEMP 1ST VOLSER OF DATA SET\nLDSN     DS    CL44           DSNAME USED BY LOCATE\nHLINDEX  DS    CL44           HI LEVEL INDEX FOR CATALOG LOCATE\nHLI      DS    CL8            HI LEVEL SAVE AREA                  TGB10\nSAVEIND  DS    X              TEMPORARY SAVE AREA FOR JOBIND      TGB36\n*\nREFERBCK DS    0CL25          REFERBACK WORK AREA\nREFJSTEP DS    CL8            REFERBACK JOBSTEP NAME\nREFPSTEP DS    CL8            REFERBACK PROCSTEP NAME\nREFDDN   DS    CL8            REFERBACK DDNAME\nREFUNIT  DS    C              REFERBACK PREV UNIT TYPE\nREFDSN   DS    CL44           REFERBACK DSN\nREFVOL   DS    CL6            REFERBACK PREF DD 1ST VOLSER\n*\nVOLCNT   DS    XL1            VOLUME COUNT FROM UNIT=\nSERCNT   DS    XL1            SERIAL COUNT FROM VOL=SER=\nADDCOUNT DS    XL1            WILL CONTAIN # OF UNITS FOR DD\nRECURS   DS    CL1            RECURSIVE ABEND INDICATOR\nREGION   DS    H              REGION SIZE FROM JOB CARD\n*\nCARDNO   DS    F              CARD NUMBER FOR MSG ROUTINE\nMSGCOUNT DS    F              MESSAGE COUNT FOR MSG ROUTINE\nOUTRPL   DS    F              ADDR OF OUTPUT RPL\nOUTACB   DS    F              ADDR OF JOB MESSAGE DATASET ACB\nPARMADDR DS    F              ADDR OF START OF CURRENT TEXT ENTRY\n*\nMAXTAPE  DS    H              MAX TAPES PER STEP USED\nMAXPRIV  DS    H              MAX PRIVS PER STEP USED\nMAXTOTAL DS    H              MAX TOTAL DEVICES PER STEP USED\nMAXREGN  DS    H              MAX STEP REGION SIZE\nMAXTIME  DS    F              MAXIMUM CPU TIME IN SECONDS\nEXECTIME DS    F              CPU TIME FROM EXECUTE CARD\nMAXEXEC  DS    F              MAXIMUM STEP CPU TIME IN SECONDS\n*\nRESOURCE DS    XL2            JES2 RESOURCES\n*              RESOURCE - BYTE ZERO(0)\nTESTING  EQU   X'80'          JES2 'TESTING' RESOURCE\nPROD     EQU   X'40'          JES2 'PROD'  RESOURCE\nTAPES    EQU   X'20'          JES2 'TAPES' RESOURCE\nUSERPACK EQU   X'08'          JES2 'USERPACK' RESOURCE\nP1401    EQU   X'02'          JES2 '1401' RESOURCE\n*              RESOURCE - BYTE ONE(1)\nPCICS    EQU   X'80'                   JES2 'CICS' RESOURCE\nP7074    EQU   X'40'                   JES2 '7074' RESOURCE\nPXMIT    EQU   X'20'                   JES2 'XMIT'/'COMTEN' RESOURCE\nLONGJOB  EQU   X'08'                   JES2 'LONGJOB' RESOURCE\nDEDICATE EQU   X'04'                   JES2 'DEDICATE' RESOURCE\n*\nCLASSFLD DS    C              CLASS AS DETERMINED FROM TABLE\nINCLASS  DS    C              CLASS FROM JOB TEXT RECORD\nJMSGCLAS DS    C              MESSAGE CLASS FROM JOB CARD\nDEFDPRTY DS    XL2            MAX DPRTY VALUE ALLOWED AFTER AUTH CHECK\n*\nPOINTER  DS    F\nCODAREA  DS    CL256\n*\nSETMSG   DS    CL(SETMSGCL)                                       TGB45\nSLSREQ   DS    CL(SLSREQCL)                                       TGB45\nSETJNAME DS    CL8                                                TGB45\n*                                                                 TGB45\n         AIF   ('&TRACE' NE 'YES').NOLAB2                         TGB07\n***************************************************************** TGB07\n*                     LABEL MACRO WORK AREA                       TGB07\n***************************************************************** TGB07\n*                                                                 TGB07\nLABELSV  DS    4F'0'               LABEL ROUTINE SAVE AREA        TGB07\nLABELWTA DS    CL(LABELWTL)        WTO WORK AREA                  TGB07\n.NOLAB2  ANOP                                                     TGB07\n*\n***************************************************************** TGB17\n*                  SYSOUT LOOK-ASIDE TABLE                        TGB17\n***************************************************************** TGB17\n*                                                                 TGB17\nSYSTABLE DS    CL(57)         TABLE LENGTH = X'F9'-C'C1'          TGB17\n*                                                                 TGB17\n**********************************************************************\n*                           CAMLIST\n**********************************************************************\n*\n         DS    0D\nCAMLST   CAMLST NAME,TDSN,,LOCAREA LOCATE PARAM AREA\n*\n**********************************************************************\n*                         LOCATE AREA\n**********************************************************************\n*\n         DS    0D\nLOCAREA  DS    0CL266         LOCATE CAMLST WORK AREA\nCAMLCNT  DS    H              VOLUMES IN LIST\nCAMLUNIT DS    0CL4           UNIT TYPE FOR 1ST VOLUME\nUCBTYP1  DS    CL1            UCB TYPE BYTE 1\nUCBTYP2  DS    CL1            UCB TYPE BYTE 2\nUCBTYP3  DS    CL1            UCB TYPE BYTE 3\nUCBTYP4  DS    CL1            UCB TYPE BYTE 4\nCAMVOL   DS    CL6            1ST VOLSER IN DATA SET\n         DS    CL254          REST OF WORK AREA\n*\n**********************************************************************\n*         PARMLIST AND WORKAREA FOR UCBSEARCH ROUTINE\n**********************************************************************\n*\nPARMLUCB DS     3F             PARMLIST MAPPING\n         ORG   PARMLUCB\nPARMWA   DS    F              ADDRESS OF 100 BYTE WORKAREA\nPARMDEVT DS    F              ADDR OF BYTE FOR DEV TYPE SEARCH\nPARMUCB  DS    F              ADDR OF WORD TO CONTAIN UCBADDR\n*\nDEVCLASS DS    CL1            DEVICE CLASS TO BE SEARCHED\nUCBADDR  DS    F              ADDRESS OF THE UCB\n*\n         DS    0D\nUCBWORK  DS    CL100          IOSVSUCB WORKAREA\n*\n**********************************************************************\n*                     STEP MESSAGE WORK AREA\n**********************************************************************\n*\n         DS    CL1            EDIT FILL CHAR FOR MSG PREFIX\nSTEPMSG  DS    0CL100         STEP RESOURCE MESSAGE\n         DS    CL10           MESSAGE PREFIX\nSTEPM    DC    CL90' '        MESSAGE AREA                        TGB38\nNUMBER   DC    CL7' ',C' '    NUMBER CONVERSION WORK AREA         TGB38\n*\n**********************************************************************\n*                       JOB MESSAGE WORK AREA\n**********************************************************************\n*\n         DS    CL1            EDIT FILL CHAR FOR MSG PREFIX\nJOBMSG   DS    0CL100         JOB CLASS MESSAGE\n         DS    CL10           MESSAGE PREFIX\nJOBM     DC    CL90'SCE000I CLASS SET TO X                             X\n                                                      '\n**********************************************************************\n*                      ERROR MESSAGE WORK AREA\n**********************************************************************\n*\nMSGPREF  DS    0CL11          ERROR MESSAGE PREFIX\n         DS    C              EDIT FILL CHARACTER\nBUFFER   DS    0CL100         JES2 MESSAGE AREA\n         DS    CL10           REST OF MESSAGE PREFIX\nMSGTEXT  DS    CL90           TEXT OF ERROR MESSAGE\nBUFFERL  EQU   *-BUFFER       LENGTH OF BUFFER\nMSGRPL   DS    19F            SKELETON RPL FOR OUTPUT MSG DATA SET\nWTOLIST  DS    CL120          SET WTO LIST FORM\nPROCTXT  DS    CL512          SAVE AREA FOR PROC CARD TEXT\n*\n**********************************************************************\n*                          ESTAE LIST\n**********************************************************************\n*\nESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\nLESTAEL  EQU   *-ESTAEL\n*\n***********************************************************************\n***********************************************************************\n*                       RACF - SUB WORK AREA\n***********************************************************************\n***********************************************************************\n*\nRACFAREA DS    0D\n*\nRACFSAVE DS    13F            SAVE AREA FOR RACF ROUTINES, ACCOUNT\n*\n         DS    0D\nRACFKEY  DS    CL4            RACF RESOURCE KEY TEMP AREA\nRACFNAME DS    CL44           RACF RESOURCE NAME TEMP AREA\n*\nFLAGS    DS    X              END OF FILE INDICATORS\nENDSTEP  EQU   X'01'          LAST STATEMENT OF STEP IND\nFSETUP   EQU   X'02'          SETUP AUTO                          TGB45\n*\nACEEADR  DS    A              ACEE ADDRESS                        TGB28\nACCT     DS    CL10           ACCOUNT                             TGB28\nUMAIL    DS    CL4            LOCATION                            TGB28\nDGROUP   DS    CL8            DATAGROUP                           TGB28\nPNAME    DS    CL20           PROGRAMMER NAME                     TGB28\nUSERIDL  DS    X              USERID IN RACF FORMAT               TGB28\nUSERID   DS    CL8,C          USERID AND ROOM FOR ENDING SPACE    TGB28\nRNAME    DS    CL44           RESOURCE NAME                       TGB28\n*                                                                 TGB28\nHEXCODE  DS    CL8,C                                              TGB28\nRC       DS    F,X                                                TGB28\n*                                                                 TGB28\nINITLST  RACINIT ENVIR=CREATE,PASSCHK=NO,MF=L                     TGB28\nINITLSTL EQU   *-INITLST                                          TGB28\nDELELST  RACINIT ENVIR=DELETE,MF=L                                TGB28\nDELELSTL EQU   *-DELELST                                          TGB28\nCHEKLST  RACROUTE REQUEST=AUTH,RELEASE=1.8,MF=L                   TGB28\nCHEKLSTL EQU   *-CHEKLST                                          TGB28\n*\nRACFMSG  DS    CL40                    MESSAGE AREA               TGB38\nRACWORK  DS    CL512\n*\nRACFARL  EQU    *-RACFAREA      LENGTH OF RACF AREA\n*\n***********************************************************************\n***********************************************************************\n*                CATALOG LOOKASIDE - SUB WORK AREA\n***********************************************************************\n***********************************************************************\n*\nINDXAREA DS    0D\n         DS    CL(INDXTLEN)      INDEX TABLE\n*\nINDXTLEN EQU   1024              INDEX TABLE LENGTH               TGB10\nINDXLEN  EQU   8                 LENGTH OF INDEX ENTRY            TGB10\nINDXMAX  EQU   INDXTLEN/INDXLEN  MAX ENTRIES IN TABLE             TGB10\n*\n***************************************************************** TGB23\n***************************************************************** TGB23\n*           DATAGROUP LOOKUP AREAS - SUB WORK AREA                TGB23\n***************************************************************** TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\nDGNWAREA DS    0D                                                 TGB23\n         DS    CL(1024)          SCEDGLKP WORK AREA               TGB23\n*                                                                 TGB23\nDGNRAREA DS    0D                                                 TGB23\n         DS    CL(1024)          SCEDGLKP RETURN AREA             TGB23\nDGNRETNL EQU   *-DGNRAREA        LENGTH OF RETURN AREA            TGB23\n*                                                                 TGB23\n***********************************************************************\n***********************************************************************\n*                  EXIT 6 TABLE - SUB WORK AREA\n***********************************************************************\n***********************************************************************\n*\nSUBAREA  DS    0D\n         DS    CL(SUBTLEN)       EXIT 6 TABLE WORK AREA\n*\nSUBTLEN  EQU   32768             LENGTH OF EXIT 6 TABLE\n*\n***********************************************************************\n***********************************************************************\n*              SETUP VOLSER LIST - SUB WORK AREA\n***********************************************************************\n***********************************************************************\n*\nSETAREA  DS    0D                                                 TGB48\n         DS    CL(SETTLEN)       EXIT 6 TABLE WORK AREA           TGB48\n*                                                                 TGB48\nSETTLEN  EQU   4096              LENGTH OF SETUP VOLSER LIST      TGB48\n*\n**********************************************************************\n*                        END OF WORKAREA\n**********************************************************************\n*\nGETSIZE  EQU   *-WORKAREA     LENGTH OF WORK AREA\n*\n         EJECT\n**********************************************************************\n*\n*    THIS TABLE HAS 3 ENTRY TYPES\n*        THE 1ST ENTRY IN THE TABLE WILL BE FOR THE JOB CARD\n*        THE 2ND ENTRY IN THE TABLE WILL BE FOR THE 1ST EXEC CARD\n*        FOLLOWING THE EXEC ENTRY WILL BE ANY DD ENTRIES FOR THE\n*        STEP WHICH PASS OR CATLG PRIVATE DISK PACKS OR TAPES\n*        THE EXEC CARD ENTRY AND SUBSEQUENT DD ENTRIES WILL BE\n*        REPEATED FOR ALL STEPS OF THE JOB.\n*\n**********************************************************************\n*\nSAVTABLE DSECT\n*\nENTLEN   EQU   40             LENGTH OF EACH TABLE ENTRY\nENTRYTYP DS    C              TABLE ENTRY TYPE\nTYPEND   EQU   0              SIGNIFIES END OF TABLE\nTYPJOB   EQU   1              SIGNIFIES A JOB ENTRY\nTYPEXEC  EQU   2              SIGNIFIES AN EXEC ENTRY\nTYPEDD   EQU   4              SIGNIFIES A DD ENTRY\n*\n**********************************************************************\n*                            J O B\n**********************************************************************\n*\nJENTRY   DS    0CL39          JOB STATEMENT ENTRY\nJNAME    DS    CL8            JOB NAME\nJPGMRNM  DS    CL10           PROGRAMMER NAME (1ST 10 BYTES ONLY)\nJACCTNO  DS    CL10           ACCOUNT NUMBER (1ST ACCT INFO FIELD)\nJACCTLEN DS    C              ACCOUNT NUMBER LENGTH\n         ORG   JENTRY\n*\n**********************************************************************\n*                           E X E C\n**********************************************************************\n*\nEENTRY   DS    0CL39          EXEC STATEMENT ENTRY\nEJSTEP   DS    CL8            JOB STEP NAME\nEPSTEP   DS    CL8            PROC STEP NAME\nEPGMNM   DS    CL8            PGM NAME\nELIBIND  DS    X              STEP FLAGS\nESTEPLIB EQU   X'01'          STEPLIB PRESENT\nEJOBLIB  EQU   X'02'          JOBLIB PRESENT\nEREGIONK EQU   X'04'          REGION SPECIFIED IN 'K'\nEREGIONM EQU   X'08'          REGION SPECIFIED IN 'M'\nEREGION  DS    H              STEP REGION SIZE\nETAPES   DS    H              TAPE UNITS USED IN STEP\nEPRIVS   DS    H              PRIV UNITS USED IN STEP\nECARDNO  DS    F              CARD NUMBER OF THIS STATEMENT\nETIMES   DS    F              STEP EXEC TIME\n         ORG   JENTRY\n*\n**********************************************************************\n*                             D D\n**********************************************************************\n*\nDENTRY   DS    0CL39          DD STATEMENT ENTRY\nDDDN     DS    CL8            DDNAME\nDTYPE    DS    C              TYPE OF UNIT FOR THIS FILE\nDTAPE    EQU   2              UNIT = TAPE\nDPRIV    EQU   4              UNIT = PRIV OR PRIV-1\nDDSN     DS    CL24           DSN FOR THIS FILE (1ST 24 CHARS ONLY)\nDVOLSER  DS    CL6            FIRST VOL/SER OF DATA SET\n*                                                                 TGB45\n         EJECT                                                    TGB45\n***************************************************************** TGB45\n*                           HSC DSECT                             TGB45\n***************************************************************** TGB45\n*                                                                 TGB45\n         SLSXREQM                                                 TGB45\n*                                                                 TGB45\n***********************************************************************\n*                           RACF DSECTS\n***********************************************************************\n*\n         SCERACDS                                                 TGB28\n         IHAACEE                                                  TGB28\n*\n**********************************************************************\n*                      IOSVSUCB CONTROL BLOCKS\n**********************************************************************\n*\n         PRINT NOGEN\n         IEFUCBOB\n         PRINT GEN\n*\n***************************************************************** TGB23\n*                  SCE DATAGROUP LOOKUP TABLE                     TGB23\n***************************************************************** TGB23\n*                                                                 TGB23\n         DGTABLE TYPE=DSECT   LOOK IN TED000.MACLIB FOR THIS ONE  RWS01\n*                                                                 TGB23\n         EJECT\n**********************************************************************\n*\n*                  GETMAINED WORKAREA FOR TSU'S\n*\n**********************************************************************\n*                                                                 TGB09\nTSOWA    DSECT                                                    TGB09\nTSORACFW DS    CL256          256 BYTE WORK AREA FOR ACCOUNT      TGB09\nTSOSAVE  DS    2F             SAVE AREA FOR BASE REGISTERS        TGB09\nTSORACF  DS    CL(RACFARL)    RACF WORK AREA FOR TSO              TGB09\nTSOWAL   EQU   *-TSOWA        LENGTH OF TSO WORK AREA             TGB09\n*                                                                 TGB09\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT329/FILE329.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT329", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}