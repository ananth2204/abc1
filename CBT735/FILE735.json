{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012704000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE735.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE735.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\n'", "DS1TRBAL": "b'm\\n'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x05\\x00\\x08\\x05\\x05\\x00\\x0b\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x03\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:03:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-471"}, "text": "REGULAR CBT TAPE - VERSION 471    FILE:  735\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT471.FILE735\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 779 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/09/06    09:03:41    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE735": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x03\\x00\\x06\\x00\\x06\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:03:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "CBT-471"}, "text": "//***FILE 735 is from Tom Barthold and contains some very handy     *   FILE 735\n//*           ISPF edit macros.                                     *   FILE 735\n//*                                                                 *   FILE 735\n//*           email:  Thomas_Barthold@ml.com                        *   FILE 735\n//*                   TBarthold@comcast.net                         *   FILE 735\n//*                                                                 *   FILE 735\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALIGN": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x00\\xb5\\x00\\xb5\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 181, "newlines": 181, "modlines": 0, "user": "TOMBART"}, "text": "/* REXX                                                             */\n/*                                                                  */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)                 */\n/*                                                                  */\n/*  PREREQUISITE: MACRO ALIGNP MUST BE INSTALLED                    */\n/*                (UNLESS YOU COMMENT OUT REFERENCE TO ALIGNP)      */\n/*                                                                  */\n/*  THIS MACRO ALIGNS THE \"TO\" IN \"MOVE\" STATEMENTS IN COBOL PGMS.  */\n/*  THIS ALSO HANDLES ALIGNING THE \"TO\" IN \"ADD\" AND \"GO TO\" STMTS  */\n/*  ALSO THE \"THRU\" IN PERFORM STATEMENTS ARE ALIGNED BY EXECUTING  */\n/*  MACRO ALIGNP.                                                   */\n/*  YOU CAN COMMENT OUT THE CALL TO ALIGNP IF DESIRED               */\n/*  YOU SHOULD BLOCK OUT THE LINES TO BE AFFECTED WITH \"CC\"         */\n/*  IN YOUR COBOL PROGRAM, THEN TYPE \"ALIGN\" ON THE COMMAND LINE    */\n/*  ALL OTHER STATEMENTS ARE UNAFFECTED                             */\n/*                                                                  */\n/********************************************************************/\n     NEST=SYSVAR('SYSNEST')\n     IF NEST = 'NO' THEN\n       DO\n        \"ISREDIT MACRO NOPROCESS\"\n        \"ISREDIT PROCESS RANGE C\"\n        END\n\n     \"ISREDIT (DID) = DATASET\"\n      EPOS = INDEX(DID,'COBOL')\n      IF EPOS = 0 THEN\n        DO\n         @MSG = ,\n         'THIS IS NOT A COBOL LIBRARY - USE ALIGNEZ FOR EASYTRIEVE'\n         ZEDLMSG = @MSG\n        \"ISPEXEC SETMSG MSG(ISRZ001)\"\n        EXIT\n        END\n\n     \"ISPEXEC VGET (@ALIGN) PROFILE\"\n      IF (@ALIGN \u00bc= 'Y') THEN\n        DO\n         @MSG = ,\n         'THIS MACRO NOW ALIGNS:\"ADD\",\"GO TO\" AND \"PERFORM\" STMTS ALSO'\n         ZEDLMSG = @MSG\n        \"ISPEXEC SETMSG MSG(ISRZ001)\"\n        @ALIGN = 'Y'\n        \"ISPEXEC VPUT (@ALIGN) PROFILE\"\n        END\n\n     \"ISREDIT (CMD) = RANGE_CMD\"\n  /*                            */\n     \"ISREDIT NUMBER ON STD COBOL\"\n     \"ISREDIT (FIRST)=LINENUM .ZFRANGE\"\n     \"ISREDIT (LAST) =LINENUM .ZLRANGE\"\n      CNT=LAST-FIRST+1\n      MAXPOS=0\n      FIL = '                                                  '\n      BLANK = ' '\n/*                                                    */\n      IF CMD \u00bc= 'C' THEN\n         DO\n           SAY 'NO \"C\" LINE COMMANDS USED'\n           EXIT\n         END\n\n/* IDENTIFY LINES WITH WORDS \"MOVE/ADD/GO\" AND \"TO\" IN THEM.         */\n/* STRIP THE WORDS OUT AND PUT LINE BACK TOGETHER WITH JUST ONE      */\n/* BLANK BETWEEN WORDS                                               */\n/*                                                                   */\n      ANYP = 0\n      CUR=FIRST\n      DO WHILE CUR \u00bc> LAST\n        \"ISREDIT (LV) = LINE\" CUR\n        WPOS = WORDPOS('TO',LV)\n        MPOS = WORDPOS('MOVE',LV)\n        IF MPOS = 0 THEN\n           MPOS = WORDPOS('ADD',LV)\n        IF MPOS = 0 THEN\n           MPOS = WORDPOS('GO',LV)\n        PPOS = WORDPOS('PERFORM',LV)\n        ANYP = ANYP + PPOS\n        IF WPOS > 0 & MPOS > 0 THEN\n        DO\n          TWORD = 0\n          RRC = 0\n          FSTWPOS = WORDINDEX(LV,1)\n          BLK=SUBSTR(FIL,1,FSTWPOS-1)\n          DO WHILE RRC = 0\n             TWORD = TWORD + 1\n             XWORD.TWORD = SUBWORD(LV,TWORD,1)\n             IF XWORD.TWORD \u00bc> ' ' THEN RRC = 1\n          END\n          LDATA=BLK\n          SAVETWORD = TWORD\n          TWORD = 1\n          DO WHILE TWORD < SAVETWORD\n             LDATA=LDATA||XWORD.TWORD||BLANK\n             TWORD=TWORD+1\n          END\n/*        SAY 'LDATA=' LDATA */\n          'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */\n        END\n        CUR = CUR + 1\n     END\n\n/*                                                                   */\n/* FIND THE RIGHTMOST POSITION OF THE WORD \"TO\" IN ALL THE LINES     */\n/*                                                                   */\n      CUR=FIRST\n      DO WHILE CUR \u00bc> LAST\n        \"ISREDIT (LV) = LINE\" CUR\n        WPOS = WORDPOS('TO',LV)\n        MPOS = WORDPOS('MOVE',LV)\n        IF MPOS = 0 THEN\n           MPOS = WORDPOS('ADD',LV)\n        IF MPOS = 0 THEN\n           MPOS = WORDPOS('GO',LV)\n        IF WPOS > 0 & MPOS > 0 THEN\n        DO\n          CPOS = WORDINDEX(LV,WPOS)\n          IF CPOS > MAXPOS THEN\n             MAXPOS = CPOS\n        END\n        CUR = CUR + 1\n     END\n/*                                                                   */\n/* SPLIT LINES INTO 2 SECTIONS:                                      */\n/* 1) FROM THE \"MOVE/ADD/GO\" UP TO THE WORD \"TO\"                     */\n/* 2) FROM THE \"TO\"   UP TO THE END OF THE LINE                      */\n/* 3) PUT LINE BACK TOGETHER WITH THE \"TO\" AT THE RIGHTMOST          */\n/*    POSITION FOUND ABOVE                                           */\n/* 4) IF THE LINE IS TOO LONG TEXT SPLIT IT INTO TWO LINES           */\n/*                                                                   */\n      CUR=FIRST\n /*   TRACE ALL */\n      DO WHILE CUR \u00bc> LAST\n        \"ISREDIT (LV) = LINE\" CUR\n        WPOS = WORDPOS('TO',LV)\n        MPOS = WORDPOS('MOVE',LV)\n        IF MPOS = 0 THEN\n           MPOS = WORDPOS('ADD',LV)\n        IF MPOS = 0 THEN\n           MPOS = WORDPOS('GO',LV)\n        IF TSPLIT = 'Y' THEN\n            DO\n              TSPLIT = 'N'\n              LV = '  '||LV\n              LDATA=LV\n/*           \"ISPEXEC VPUT (CUR LDATA) SHARED\"*/\n             'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */\n            END\n        IF WPOS > 0 & MPOS > 0 THEN\n        DO\n          CPOS = WORDINDEX(LV,WPOS)\n          XFROM=LEFT(LV,CPOS-2)\n          XTO=SUBSTR(LV,CPOS+3,65-CPOS)\n          XP = MAXPOS - CPOS\n          BLK=SUBSTR(FIL,1,XP)\n          LDATA =  XFROM||BLK \"TO\" XTO\n/*       \"ISPEXEC VPUT (CUR LDATA) SHARED\" */\n         IF LENGTH(LDATA) > 66 THEN\n            LEND = LENGTH(LDATA) - 66\n         IF LENGTH(LDATA) > 66 & SUBSTR(LDATA,67,LEND) \u00bc> ' ' THEN\n            'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */\n         IF LENGTH(LDATA) < 67 THEN\n            'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */\n         IF LENGTH(LDATA) > 66 & SUBSTR(LDATA,67,LEND) > ' ' THEN\n            DO\n               WPOS = WORDPOS('TO',LV)\n               CPOS = WORDINDEX(LV,WPOS)\n               \"ISREDIT TSPLIT \" CUR CPOS-1\n               TSPLIT = 'Y'\n               LAST=LAST+1\n            END\n        END\n        CUR = CUR + 1\n     END\n     IF ANYP > 0 THEN\n        ALIGNP\n/*   LOGIT ALIGN  */\n\n    \"ISREDIT RESET\"\n    \"ISREDIT RENUM STD COBOL\"\n     EXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALIGNP": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x00}\\x00}\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 125, "newlines": 125, "modlines": 0, "user": "TOMBART"}, "text": "/* REXX */\n/*                                                                  */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)                 */\n/*                                                                  */\n/*  THIS MACRO ALIGNS THE \"THRU\" IN \"PERFORM\" STATEMENTS            */\n/*  YOU SHOULD BLOCK OUT THE LINES TO BE AFFECTED WITH \"CC\"         */\n/*  ONLY \"PERFORM\" STATEMENTS ARE AFFECTED                          */\n/*                                                                  */\n/*  THIS MACRO IS CALLED FROM \"ALIGN\" MACRO TOO.                    */\n/*                                                                  */\n/********************************************************************/\n     NEST=SYSVAR('SYSNEST')\n     IF NEST = 'NO' THEN\n       DO\n        \"ISREDIT MACRO NOPROCESS\"\n        \"ISREDIT PROCESS RANGE C\"\n        END\n\n     \"ISREDIT (CMD) = RANGE_CMD\"\n  /*                            */\n     \"ISREDIT NUMBER ON STD COBOL\"\n     \"ISREDIT (FIRST)=LINENUM .ZFRANGE\"\n     \"ISREDIT (LAST) =LINENUM .ZLRANGE\"\n      CNT=LAST-FIRST+1\n      MAXPOS=0\n      FIL = '                                                  '\n      BLANK = ' '\n/*                                                    */\n      IF CMD \u00bc= 'C' THEN\n         DO\n           SAY 'NO \"C\" LINE COMMANDS USED'\n           EXIT\n         END\n\n      CUR=FIRST\n      DO WHILE CUR \u00bc> LAST\n        \"ISREDIT (LV) = LINE\" CUR\n        WPOS = WORDPOS('THRU',LV)\n        MPOS = WORDPOS('PERFORM',LV)\n        IF WPOS > 0 & MPOS > 0 THEN\n        DO\n          TWORD = 0\n          RRC = 0\n          FSTWPOS = WORDINDEX(LV,1)\n          BLK=SUBSTR(FIL,1,FSTWPOS-1)\n          DO WHILE RRC = 0\n             TWORD = TWORD + 1\n             XWORD.TWORD = SUBWORD(LV,TWORD,1)\n             IF XWORD.TWORD \u00bc> ' ' THEN RRC = 1\n          END\n          LDATA=BLK\n          SAVETWORD = TWORD\n          TWORD = 1\n          DO WHILE TWORD < SAVETWORD\n             LDATA=LDATA||XWORD.TWORD||BLANK\n             TWORD=TWORD+1\n          END\n/*        SAY 'LDATA=' LDATA */\n         \"ISPEXEC VPUT (CUR LDATA) SHARED\"\n         ALIGN2\n        END\n        CUR = CUR + 1\n     END\n\n      CUR=FIRST\n      DO WHILE CUR \u00bc> LAST\n        \"ISREDIT (LV) = LINE\" CUR\n        WPOS = WORDPOS('THRU',LV)\n        MPOS = WORDPOS('PERFORM',LV)\n        IF WPOS > 0 & MPOS > 0 THEN\n        DO\n          CPOS = WORDINDEX(LV,WPOS)\n          IF CPOS > MAXPOS THEN\n             MAXPOS = CPOS\n        END\n        CUR = CUR + 1\n     END\n/*                                                    */\n      CUR=FIRST\n /*   TRACE ALL */\n      DO WHILE CUR \u00bc> LAST\n        \"ISREDIT (LV) = LINE\" CUR\n        WPOS = WORDPOS('THRU',LV)\n        MPOS = WORDPOS('PERFORM',LV)\n        IF TSPLIT = 'Y' THEN\n            DO\n              TSPLIT = 'N'\n              LV = '  '||LV\n              LDATA=LV\n             \"ISPEXEC VPUT (CUR LDATA) SHARED\"\n             ALIGN2\n            END\n        IF WPOS > 0 & MPOS > 0 THEN\n        DO\n          CPOS = WORDINDEX(LV,WPOS)\n          XFROM=LEFT(LV,CPOS-2)\n          XTO=SUBSTR(LV,CPOS+5,65-CPOS)\n          XP = MAXPOS - CPOS\n          BLK=SUBSTR(FIL,1,XP)\n          LDATA =  XFROM||BLK \"THRU\" XTO\n         \"ISPEXEC VPUT (CUR LDATA) SHARED\"\n         IF LENGTH(LDATA) > 66 THEN\n            LEND = LENGTH(LDATA) - 66\n         IF LENGTH(LDATA) > 66 & SUBSTR(LDATA,67,LEND) \u00bc> ' ' THEN\n            ALIGN2\n         IF LENGTH(LDATA) < 67 THEN\n            ALIGN2\n         IF LENGTH(LDATA) > 66 & SUBSTR(LDATA,67,LEND) > ' ' THEN\n            DO\n               WPOS = WORDPOS('THRU',LV)\n               CPOS = WORDINDEX(LV,WPOS)\n               \"ISREDIT TSPLIT \" CUR CPOS-1\n               TSPLIT = 'Y'\n               LAST=LAST+1\n            END\n        END\n        CUR = CUR + 1\n     END\n\n     IF NEST = 'NO' THEN\n        LOGIT ALIGNP\n\n    \"ISREDIT RESET\"\n    \"ISREDIT RENUM STD COBOL\"\n     EXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FLIPM": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x00`\\x00`\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "TOMBART"}, "text": "      ISREDIT MACRO NOPROCESS\n      ISREDIT PROCESS RANGE C\n      ISREDIT (CMD) = RANGE_CMD\n  /***************************************************************/\n  /*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)            */\n  /***************************************************************/\n  /* THIS MACRO IS INTENDED FOR USE IN COBOL PROGRAMS.           */\n  /* IT REVERSES MOVE STATEMENTS THAT ARE BLOCKED OUT BY         */\n  /* \"CC\" LINE COMMANDS. THE MOVE STATEMENT MUST BE COMPLETE ON  */\n  /* ONE LINE.                                                   */\n  /*     E.G. MOVE FIELD1 (SUB) TO FIELD2 (SUB) BECOMES          */\n  /*          MOVE FIELD2 (SUB) TO FIELD1 (SUB)                  */\n  /* MACRO ALIGN IS CALLED FROM THIS MACRO                       */\n  /* YOU CAN COMMENT OUT THE CALL TO ALIGN IF DESIRED            */\n  /***************************************************************/\n\n      IF &CMD NE &STR(C) THEN +\n         DO\n           WRITE 'NO \"C\" LINE COMMANDS USED'\n           WRITE 'BLOCK OUT LINES WITH CC'\n           EXIT\n         END\n\n      ISREDIT NUMBER ON COBOL\n      ISREDIT (FIRST)=LINENUM .ZFRANGE\n      ISREDIT (LAST) =LINENUM .ZLRANGE\n      SET &CNT=&LAST-&FIRST+1\n      SET &CUR=&FIRST\n      DO WHILE &CUR \u00bc> &LAST\n         ISREDIT (LV) = LINE &CUR\n         SET &F=1\n         SET &T=4\n         DO UNTIL &SUBSTR(&F:&T,&LV)=&STR(MOVE) | &F > 62\n            SET &F=&F+1\n            SET &T=&F+3\n         END\n         IF &F > 62 THEN GOTO ENDLINE\n         SET &MLB=&STR()\n         SET &ML =&F-6\n         DO WHILE &ML > 0\n            SET &MLB=&STR(&MLB.&STR( ))\n            SET &ML = &ML-1\n         END\n         SET &F=&F+4\n         SET &T=&T+4\n         DO UNTIL &SUBSTR(&F:&F,&LV)\u00bc=&STR( ) | &F > 62\n            SET &F=&F+1\n         END\n         IF &F > 62 THEN GOTO ENDLINE\n         SET &FROM=&STR( )\n         SET &F=&F-1\n         SET &T=&F+3\n         DO UNTIL &SUBSTR(&F:&T,&LV)=&STR( TO ) | &F > 62\n            SET &FROM=&STR(&FROM.&SUBSTR(&F:&F,&LV))\n            SET &F=&F+1\n            SET &T=&F+3\n         END\n         IF &F > 62 THEN GOTO ENDLINE\n         SET &F=&F+4\n         SET &T=&F+4\n         DO UNTIL &SUBSTR(&F:&F,&LV)\u00bc=&STR( ) | &F > 66\n            SET &F=&F+1\n         END\n         IF &F > 66 THEN GOTO ENDLINE\n         SET &F=&F-1\n         SET &TO=&STR( )\n         DO UNTIL &F>66\n            SET &TO=&STR(&TO.&SUBSTR(&F:&F,&LV))\n            SET &F=&F+1\n         END\n         SET &LF=&LENGTH(&STR(&FROM))\n         SET &LT=&LENGTH(&STR(&TO))\n         DO WHILE &SUBSTR(&LF:&LF,&FROM)=&STR( )\n            SET &LF=&LF-1\n         END\n         DO WHILE &SUBSTR(&LT:&LT,&TO)=&STR( )\n            SET &LT=&LT-1\n            IF &LT=0 THEN GOTO ENDLINE\n         END\n         SET &PER=&STR( )\n         IF &SUBSTR(&LT:&LT,&TO)=&STR(.) THEN +\n            DO\n              SET &LT=&LT-1\n              SET &PER=&STR(.)\n            END\n         SET &FR=&STR(&SUBSTR(2:&LF,&FROM))\n         SET &T =&STR(&SUBSTR(1:&LT,&TO))\n         SET LDATA = &STR(     &MLB.MOVE&T TO&FR&PER)\n         ISREDIT LINE &CUR = (LDATA)\nENDLINE: SET &CUR=&CUR+1\n     END\n/**  LOGIT FLIPM */\n     ALIGN\n     ISREDIT RESET\n     ISREDIT RENUM STD COBOL\n     EXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FNOT": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x00A\\x00A\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "TOMBART"}, "text": "/* REXX                                                             */\n/*                                                                  */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)                 */\n/*                                                                  */\n/*                                                                  */\n/*  THIS MACRO FINDS LINES WITH VARIABLE X AND NOT WITH VARIABLE Y  */\n/*                                                                  */\n/*  E.G. FNOT PERFORM THRU                                          */\n/*       (WILL FIND  A LINE WITH THE WORD \"PERFORM\" AND             */\n/*        NOT WITH THE WORD \"THRU\")                                 */\n/*                                                                  */\n\"ISREDIT MACRO (@X @Y) NOPROCESS       \"\n\nIF (@X = '') & (@Y = '') THEN\n   DO\n     \"ISPEXEC VGET (@X) SHARED\"\n     \"ISPEXEC VGET (@Y) SHARED\"\n   END\n\nIF (@X = '') & (@Y = '') THEN\n   DO\n     SAY 'NO VARIABLES ENTERED'\n     SAY 'FNOT MACRO TERMINATED '\n     EXIT\n   END\n\n@X = TRANSLATE(@X)\n@Y = TRANSLATE(@Y)\n\n\"ISPEXEC VPUT (@X) SHARED\"\n\"ISPEXEC VPUT (@Y) SHARED\"\n\n @LX = LENGTH(@X)\n @LY = LENGTH(@Y)\n\n\"ISREDIT (@LASTONE) = LINENUM\" .ZLAST\n\"ISREDIT (@CURLINE) = LINENUM\" .ZCSR\n @FOUND = N\n @CURLINE = @CURLINE + 2\n\nDO WHILE @CURLINE \u00bc> @LASTONE\n   \"ISREDIT (@LV) = LINE\" @CURLINE\n   @LV = TRANSLATE(@LV)\n   @S1 = INDEX(@LV,SUBSTR(@X,1,@LX))\n   @S2 = INDEX(@LV,SUBSTR(@Y,1,@LY))\n   IF (@S1 > 0) & (@S2 \u00bc> 0) THEN\n     DO\n        @FOUND = Y\n        ZPF13 = FNOT\n        \"ISPEXEC VPUT (ZPF13) PROFILE\"\n         @MSG = 'FOUND LINE WITH' @X ' AND NOT WITH ' @Y\n         ZEDLMSG = @MSG\n        \"ISPEXEC SETMSG MSG(ISRZ001)\"\n        \"ISREDIT LOCATE\" @CURLINE\n        \"ISREDIT UP 1\"\n         LEAVE\n     END\n   @CURLINE = @CURLINE + 1\nEND\nIF @FOUND = N THEN\n   DO\n      ZEDLMSG = \"LITERAL NOT FOUND\"\n      \"ISPEXEC SETMSG MSG(ISRZ001)\"\n   END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "F1": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x00n\\x00n\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "TOMBART"}, "text": "/* REXX                                                        */\n/*                                                             */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)            */\n/*                                                             */\n/*                                                             */\n/*  THIS MACRO FINDS LINES WITH ANY OF THE 4 VARIABLES ENTERED */\n/*  YOU CAN ENTER 1, 2, 3 OR 4 VARIABLES                       */\n/*                                                             */\n/*  E.G. F1 MOVE PERFORM                                       */\n/*       (WILL FIND A LINE WITH THE WORD \"MOVE\" OR \"PERFORM\"   */\n/*       AFTER ENTERING THIS YOU CAN JUST PRESS PF13 TO REPEAT */\n/*       FIND THE SAME VARIABLES OR ENTER F1 WITH NO           */\n/*       VARIABLES TO CONTINUE SEARCHING FOR THE ORIGINAL      */\n/*       VARIABLES ENTERED.                                    */\n/*                                                             */\n/***************************************************************/\n\"ISREDIT MACRO (@A @B @C @D) NOPROCESS        \"\n/*                                                             */\nIF (@A = '') & (@B = '') &(@C = '') & (@D = '' ) THEN\n   DO\n     \"ISPEXEC VGET (@A) SHARED\"\n     \"ISPEXEC VGET (@B) SHARED\"\n     \"ISPEXEC VGET (@C) SHARED\"\n     \"ISPEXEC VGET (@D) SHARED\"\n   END\n\nIF (@A = '') & (@B = '') &(@C = '') & (@D = '' ) THEN\n   DO\n     SAY 'NO VARIABLES ENTERED'\n     SAY 'F1 MACRO TERMINATED '\n     EXIT\n   END\n\n\"ISPEXEC VPUT (@A) SHARED\"\n\"ISPEXEC VPUT (@B) SHARED\"\n\"ISPEXEC VPUT (@C) SHARED\"\n\"ISPEXEC VPUT (@D) SHARED\"\n\n@A = TRANSLATE(@A)\n@B = TRANSLATE(@B)\n@C = TRANSLATE(@C)\n@D = TRANSLATE(@D)\n\n/*                                                         */\n\"ISREDIT (@LASTONE) = LINENUM\" .ZLAST\n\"ISREDIT (@CURLINE) = LINENUM\" .ZCSR\n\n @LA = LENGTH(@A)\n @LB = LENGTH(@B)\n @LC = LENGTH(@C)\n @LD = LENGTH(@D)\n\n@FOUND = N\n@CURLINE = @CURLINE + 2\n\nDO WHILE @CURLINE \u00bc> @LASTONE\n   \"ISREDIT (@LV) = LINE\" @CURLINE\n   @LV = TRANSLATE(@LV)\n   @SA = INDEX(@LV,SUBSTR(@A,1,@LA))\n\n   IF @B = '' THEN\n      @SB = 0\n   ELSE;\n     DO\n        @SB = INDEX(@LV,SUBSTR(@B,1,@LB))\n     END\n\n   IF @C = '' THEN\n      @SC = 0\n   ELSE;\n     DO\n        @SC = INDEX(@LV,SUBSTR(@C,1,@LC))\n     END\n\n   IF @D = '' THEN\n      @SD = 0\n   ELSE;\n     DO\n        @SD = INDEX(@LV,SUBSTR(@D,1,@LD))\n     END\n\n   IF (@SA > 0) | (@SB > 0) | (@SC > 0) | (@SD > 0) THEN\n     DO\n         @FOUND = Y\n         ZPF13 = F1\n        \"ISPEXEC VPUT (ZPF13) PROFILE\"\n         @MSG = 'FOUND'\n         IF @SA > 0 THEN\n            @MSG = @MSG @A\n         IF @SB > 0 THEN\n            @MSG = @MSG  @B\n         IF @SC > 0 THEN\n            @MSG = @MSG  @C\n         IF @SD > 0 THEN\n            @MSG = @MSG  @D\n         @MSG = @MSG '    ('@A  @B  @C  @D')'\n         ZEDLMSG = @MSG\n         \"ISPEXEC SETMSG MSG(ISRZ001)\"\n        \"ISREDIT LOCATE\" @CURLINE\n        \"ISREDIT UP 1\"\n         LEAVE\n     END\n   @CURLINE = @CURLINE + 1\nEND\n\nIF @FOUND = N THEN\n   DO\n      ZEDLMSG = \"LITERALS NOT FOUND\"\n      \"ISPEXEC SETMSG MSG(ISRZ001)\"\n   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "F3": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x00j\\x00j\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 106, "newlines": 106, "modlines": 0, "user": "TOMBART"}, "text": "/*****************************************************************/\n/* REXX                                                          */\n/*                                                               */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)              */\n/*                                                               */\n/*                                                               */\n/*  THIS MACRO FINDS LINESWITH VARIABLE @X AND VARIABLE @Y       */\n/*                         AND VARIABLE @Z                       */\n/*                                                               */\n/*  THIS MACRO FINDS LINES WITH ALL OF THE 3 VARIABLES ENTERED   */\n/*  YOU CAN ENTER 1, 2, OR 3 VARIABLES                           */\n/*                                                               */\n/*  E.G. F3   THRU PERFORM                                       */\n/*       (WILL FIND  A LINE WITH THE WORDS \"THRU\" AND \"PERFORM\"  */\n/*                                     AND \"EXIT\"                */\n/*       AFTER ENTERING THIS YOU CAN JUST PRESS PF13 TO REPEAT   */\n/*       FIND THE SAME VARIABLES OR ENTER F3 WITH NO             */\n/*       VARIABLES TO CONTINUE SEARCHING FOR THE ORIGINAL        */\n/*       VARIABLES ENTERED.                                      */\n/*****************************************************************/\n\n\"ISREDIT MACRO (@X @Y @Z) NOPROCESS    \"\n\n\nIF (@X = \"\") & (@Y = \"\") & (@Z = \"\") THEN\n   DO\n     \"ISPEXEC VGET (@X) SHARED\"\n     \"ISPEXEC VGET (@Y) SHARED\"\n     \"ISPEXEC VGET (@Z) SHARED\"\n   END\n\nIF (@X = '') & (@Y = '') & (@Z = '') THEN\n   DO\n     SAY 'NO VARIABLES ENTERED'\n     SAY 'F3 MACRO TERMINATED '\n     EXIT\n   END\n\n\"ISPEXEC VPUT (@X) SHARED\"\n\"ISPEXEC VPUT (@Y) SHARED\"\n\"ISPEXEC VPUT (@Z) SHARED\"\n\n@X = TRANSLATE(@X)\n@Y = TRANSLATE(@Y)\n@Z = TRANSLATE(@Z)\n\n\"ISREDIT (@LASTONE) = LINENUM\" .ZLAST\n\"ISREDIT (@CURLINE) = LINENUM\" .ZCSR\n\n @LX = LENGTH(@X)\n @LY = LENGTH(@Y)\n @LZ = LENGTH(@Z)\n@FOUND = Y\n@CURLINE = @CURLINE + 2\n\nDO WHILE @FOUND = 'Y'\n   \"ISREDIT FIND \" @X\n   IF RC = 0 THEN\n      DO\n         \"ISREDIT (@CURLINE) = LINENUM\" .ZCSR\n         \"ISREDIT (@LV) = LINE\" @CURLINE\n          @LV = TRANSLATE(@LV)\n          IF @Y = '' THEN\n             @S2 = 0\n          ELSE;\n            DO\n               @S2 = INDEX(@LV,SUBSTR(@Y,1,@LY))\n/*             SAY 'LV  ' @LV\n               SAY ' S2 ' @S2 */\n            END\n          IF @Z = '' THEN\n             @S3 = 0\n          ELSE;\n            DO\n               @S3 = INDEX(@LV,SUBSTR(@Z,1,@LZ))\n            END\n\n/*        SAY ' S2 ' @S2 'Y ' @Y ' S3 ' @S3 ' Z ' @Z */\n          IF (((@S2 > 0) | (@Y = ''))  & ,\n             ((@S3 > 0) | (@Z = ''))) THEN\n            DO\n               @FOUND = Y\n               ZPF13 = F3\n               \"ISPEXEC VPUT (ZPF13) PROFILE\"\n                @MSG = 'FOUND'\n                @MSG = @MSG  @X\n                IF @S2 > 0 THEN\n                   @MSG = @MSG  @Y\n                IF @S3 > 0 THEN\n                   @MSG = @MSG  @Z\n                ZEDLMSG = @MSG\n               \"ISPEXEC SETMSG MSG(ISRZ001)\"\n               \"ISREDIT LOCATE\" @CURLINE\n               \"ISREDIT UP 1\"\n                LEAVE\n            END\n      END\n   ELSE\n    @FOUND = N\nEND\nIF @FOUND = N THEN\n   DO\n      ZEDLMSG = \"LITERALS NOT FOUND\"\n      \"ISPEXEC SETMSG MSG(ISRZ001)\"\n   END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KOPY": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "TOMBART"}, "text": "ISREDIT MACRO NOPROCESS (NEWNAME)\n/*********************************************************************/\n/*                                                                   */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)                  */\n/*                                                                   */\n/*   THIS MACRO COPIES THE MEMBER YOU ARE CURRENTLY EDITING          */\n/*   TO A ANOTHER MEMBER (NAME SPECIFIED BY YOU) AND PUTS YOU INTO   */\n/*   EDIT IN THE NEW MEMBER.                                         */\n/*   WHILE IN EDIT, TYPE \"KOPY MEMNAME\"                              */\n/*********************************************************************/\nIF &NEWNAME = &STR() THEN +\n   DO\n      SET &ZEDLMSG = &STR(NEWNAME IS REQUIRED)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT\n   END\nISREDIT CREATE &NEWNAME .ZFIRST  .ZLAST\nIF &LASTCC \u00bc= 0 THEN +\n   DO\n      SET &ZEDLMSG = &STR(NEWNAME ALREADY EXISTS)\n      ISPEXEC SETMSG MSG(ISRZ001)\n      EXIT\n   END\nISREDIT EDIT &NEWNAME\nISREDIT CANCEL\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LIT": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x06\\x00\\x9f\\x01\\x06\\x00\\x9f\\t\\x00\\x004\\x004\\x00\\x00\\xe3\\xd6\\xd4\\xc2\\xc1\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-01-09T00:00:00", "modifydate": "2006-01-09T09:00:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "TOMBART"}, "text": "       ISREDIT MACRO\n/********************************************************************/\n/*                                                                  */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)                 */\n/*                                                                  */\n/*     THIS MACRO COMPUTES THE SIZE OF A LITERAL ON THE LINE WHERE   */\n/*     THE CURSOR IS                                                 */\n/*                                                                   */\n/*    'THIS IS EASIER IF YOU SET IT UP AS A PFKEY FUNCTION'          */\n/*                                                                   */\n/*    TYPE THE COMMAND 'LIT' IN THE COMMAND LINE AND PLACE THE       */\n/*    CURSOR ON A LINE THAT CONTAINS A LITERAL (ENCLOSED WITH        */\n/*    SINGLE QUOTES).  PRESS ENTER.                                  */\n/*                                                                   */\n/*    THIS MACRO WILL DISPLAY THE LENGTH OF THE LITERAL.             */\n/*                                                                   */\n/********************************************************************/\n       ISREDIT (OLD) = LINE .ZCSR\n       ISREDIT (NUM) = LINENUM .ZCSR\n       IF &NUM \u00bc> 3 THEN EXIT\n\n       SET &CUR=1\n       SET &CHR=X\n       DO WHILE &STR(&CHR) \u00bc= &STR(')\n          SET &CHR = &SUBSTR(&CUR:&CUR,&STR(&OLD))\n          SET &CUR = &CUR + 1\n          IF &CUR > 72 THEN +\n             DO\n               SET &ZEDLMSG = &STR(LITERAL NOT FOUND)\n               GO TO ENDIT\n             END\n       END\n       SET &BEG = &CUR\n       SET &CUR = &CUR + 1\n       DO UNTIL &STR(&CHR) = &STR(')\n          SET &CHR = &SUBSTR(&CUR:&CUR,&STR(&OLD))\n          SET &CUR = &CUR + 1\n          IF &CUR > 72 THEN +\n             DO\n               SET &ZEDLMSG = &STR(LITERAL NOT FOUND)\n               GO TO ENDIT\n             END\n       END\n       SET &END = &CUR - 1\n       SET &LEN = &END - &BEG\n       WRITE 'LITERAL LENGTH = &LEN.'\n       SET &ZEDLMSG = &STR(LITERAL LENGTH = &LEN.)\n/*     ISREDIT FIND PREV 'PIC' */\n       ISPEXEC SETMSG MSG(ISRZ001)\n       EXIT CODE(0)\nENDIT: ISPEXEC SETMSG MSG(ISRZ001)\n       EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT735/FILE735.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT735", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}