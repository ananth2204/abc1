/* REXX                                                             */
/*                                                                  */
/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)                 */
/*                                                                  */
/*  PREREQUISITE: MACRO ALIGNP MUST BE INSTALLED                    */
/*                (UNLESS YOU COMMENT OUT REFERENCE TO ALIGNP)      */
/*                                                                  */
/*  THIS MACRO ALIGNS THE "TO" IN "MOVE" STATEMENTS IN COBOL PGMS.  */
/*  THIS ALSO HANDLES ALIGNING THE "TO" IN "ADD" AND "GO TO" STMTS  */
/*  ALSO THE "THRU" IN PERFORM STATEMENTS ARE ALIGNED BY EXECUTING  */
/*  MACRO ALIGNP.                                                   */
/*  YOU CAN COMMENT OUT THE CALL TO ALIGNP IF DESIRED               */
/*  YOU SHOULD BLOCK OUT THE LINES TO BE AFFECTED WITH "CC"         */
/*  IN YOUR COBOL PROGRAM, THEN TYPE "ALIGN" ON THE COMMAND LINE    */
/*  ALL OTHER STATEMENTS ARE UNAFFECTED                             */
/*                                                                  */
/********************************************************************/
     NEST=SYSVAR('SYSNEST')
     IF NEST = 'NO' THEN
       DO
        "ISREDIT MACRO NOPROCESS"
        "ISREDIT PROCESS RANGE C"
        END

     "ISREDIT (DID) = DATASET"
      EPOS = INDEX(DID,'COBOL')
      IF EPOS = 0 THEN
        DO
         @MSG = ,
         'THIS IS NOT A COBOL LIBRARY - USE ALIGNEZ FOR EASYTRIEVE'
         ZEDLMSG = @MSG
        "ISPEXEC SETMSG MSG(ISRZ001)"
        EXIT
        END

     "ISPEXEC VGET (@ALIGN) PROFILE"
      IF (@ALIGN ¼= 'Y') THEN
        DO
         @MSG = ,
         'THIS MACRO NOW ALIGNS:"ADD","GO TO" AND "PERFORM" STMTS ALSO'
         ZEDLMSG = @MSG
        "ISPEXEC SETMSG MSG(ISRZ001)"
        @ALIGN = 'Y'
        "ISPEXEC VPUT (@ALIGN) PROFILE"
        END

     "ISREDIT (CMD) = RANGE_CMD"
  /*                            */
     "ISREDIT NUMBER ON STD COBOL"
     "ISREDIT (FIRST)=LINENUM .ZFRANGE"
     "ISREDIT (LAST) =LINENUM .ZLRANGE"
      CNT=LAST-FIRST+1
      MAXPOS=0
      FIL = '                                                  '
      BLANK = ' '
/*                                                    */
      IF CMD ¼= 'C' THEN
         DO
           SAY 'NO "C" LINE COMMANDS USED'
           EXIT
         END

/* IDENTIFY LINES WITH WORDS "MOVE/ADD/GO" AND "TO" IN THEM.         */
/* STRIP THE WORDS OUT AND PUT LINE BACK TOGETHER WITH JUST ONE      */
/* BLANK BETWEEN WORDS                                               */
/*                                                                   */
      ANYP = 0
      CUR=FIRST
      DO WHILE CUR ¼> LAST
        "ISREDIT (LV) = LINE" CUR
        WPOS = WORDPOS('TO',LV)
        MPOS = WORDPOS('MOVE',LV)
        IF MPOS = 0 THEN
           MPOS = WORDPOS('ADD',LV)
        IF MPOS = 0 THEN
           MPOS = WORDPOS('GO',LV)
        PPOS = WORDPOS('PERFORM',LV)
        ANYP = ANYP + PPOS
        IF WPOS > 0 & MPOS > 0 THEN
        DO
          TWORD = 0
          RRC = 0
          FSTWPOS = WORDINDEX(LV,1)
          BLK=SUBSTR(FIL,1,FSTWPOS-1)
          DO WHILE RRC = 0
             TWORD = TWORD + 1
             XWORD.TWORD = SUBWORD(LV,TWORD,1)
             IF XWORD.TWORD ¼> ' ' THEN RRC = 1
          END
          LDATA=BLK
          SAVETWORD = TWORD
          TWORD = 1
          DO WHILE TWORD < SAVETWORD
             LDATA=LDATA||XWORD.TWORD||BLANK
             TWORD=TWORD+1
          END
/*        SAY 'LDATA=' LDATA */
          'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */
        END
        CUR = CUR + 1
     END

/*                                                                   */
/* FIND THE RIGHTMOST POSITION OF THE WORD "TO" IN ALL THE LINES     */
/*                                                                   */
      CUR=FIRST
      DO WHILE CUR ¼> LAST
        "ISREDIT (LV) = LINE" CUR
        WPOS = WORDPOS('TO',LV)
        MPOS = WORDPOS('MOVE',LV)
        IF MPOS = 0 THEN
           MPOS = WORDPOS('ADD',LV)
        IF MPOS = 0 THEN
           MPOS = WORDPOS('GO',LV)
        IF WPOS > 0 & MPOS > 0 THEN
        DO
          CPOS = WORDINDEX(LV,WPOS)
          IF CPOS > MAXPOS THEN
             MAXPOS = CPOS
        END
        CUR = CUR + 1
     END
/*                                                                   */
/* SPLIT LINES INTO 2 SECTIONS:                                      */
/* 1) FROM THE "MOVE/ADD/GO" UP TO THE WORD "TO"                     */
/* 2) FROM THE "TO"   UP TO THE END OF THE LINE                      */
/* 3) PUT LINE BACK TOGETHER WITH THE "TO" AT THE RIGHTMOST          */
/*    POSITION FOUND ABOVE                                           */
/* 4) IF THE LINE IS TOO LONG TEXT SPLIT IT INTO TWO LINES           */
/*                                                                   */
      CUR=FIRST
 /*   TRACE ALL */
      DO WHILE CUR ¼> LAST
        "ISREDIT (LV) = LINE" CUR
        WPOS = WORDPOS('TO',LV)
        MPOS = WORDPOS('MOVE',LV)
        IF MPOS = 0 THEN
           MPOS = WORDPOS('ADD',LV)
        IF MPOS = 0 THEN
           MPOS = WORDPOS('GO',LV)
        IF TSPLIT = 'Y' THEN
            DO
              TSPLIT = 'N'
              LV = '  '||LV
              LDATA=LV
/*           "ISPEXEC VPUT (CUR LDATA) SHARED"*/
             'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */
            END
        IF WPOS > 0 & MPOS > 0 THEN
        DO
          CPOS = WORDINDEX(LV,WPOS)
          XFROM=LEFT(LV,CPOS-2)
          XTO=SUBSTR(LV,CPOS+3,65-CPOS)
          XP = MAXPOS - CPOS
          BLK=SUBSTR(FIL,1,XP)
          LDATA =  XFROM||BLK "TO" XTO
/*       "ISPEXEC VPUT (CUR LDATA) SHARED" */
         IF LENGTH(LDATA) > 66 THEN
            LEND = LENGTH(LDATA) - 66
         IF LENGTH(LDATA) > 66 & SUBSTR(LDATA,67,LEND) ¼> ' ' THEN
            'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */
         IF LENGTH(LDATA) < 67 THEN
            'ISREDIT LINE 'CUR' = (LDATA)' /* ALIGN2 */
         IF LENGTH(LDATA) > 66 & SUBSTR(LDATA,67,LEND) > ' ' THEN
            DO
               WPOS = WORDPOS('TO',LV)
               CPOS = WORDINDEX(LV,WPOS)
               "ISREDIT TSPLIT " CUR CPOS-1
               TSPLIT = 'Y'
               LAST=LAST+1
            END
        END
        CUR = CUR + 1
     END
     IF ANYP > 0 THEN
        ALIGNP
/*   LOGIT ALIGN  */

    "ISREDIT RESET"
    "ISREDIT RENUM STD COBOL"
     EXIT
