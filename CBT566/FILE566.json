{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012351000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 4291378, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 22, "INMDSNAM": "CBT.V500.FILE566.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 4291378, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 4291378, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE566.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00D\\x04'", "DS1TRBAL": "b'\\xa0\\n'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x045\\x00\\x02\\x049\\x00\\n\\x00E'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00(\\x01\\x19!O\\x01\\x19!O\\x15!\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:21:28", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  566\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE566\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 101 MEMBERS COUNTED; CUMULATIVE SIZE IS 39,843 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/02/19    15:21:28    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$READ": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x02\\x10_\\x01\\x02\\x10_\\x13Y\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-04-15T00:00:00", "modifydate": "2002-04-15T13:59:47", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBASS"}, "text": " MOST OF THESE PROGRAMS WERE WRITTEN BY ME, K.M. (SAM) BASS.\n WHILE AT EITHER\n   OCCIDENTAL PETROLEUM INC IN HOUSTON, TEXAS\n   MCLANE COMPANY IN TEMPLE, TEXAS\n SEVERAL WERE WRITTEN BY MARK GOTO OR CO-AUTHORED AT\n   OCCIDENTAL PETROLEUM INC IN HOUSTON, TEXAS\n SOME BY DAVID ALLEN WEAVER\n   OCCIDENTAL PETROLEUM INC IN HOUSTON, TEXAS\n SOME OFF OF THE SHARE/CBT MODS TAPE, THEN MODIFIED BY K.M. (SAM ) BASS\n AS NOTED IN THE SOURCE.\n\n THERE ARE SEVERAL MEMBERS AS NOTED IN $$INDEX THAT REQUIRE AN\n AUTHORIZTION   SVC OR TO BE APF AUTHORIZED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01\\x11\\x08\\x1f\\x01\\x11\\x08?\\x10X\\x00.\\x00,\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-22T00:00:00", "modifydate": "2011-03-24T10:58:10", "lines": 46, "newlines": 44, "modlines": 0, "user": "KBASS"}, "text": "#ASMALL  JCL TO ASSEMBLE ALL SOURCE MEMBERS\n$CALL    TSO COMMAND TO INVOKE LINKLIST PROGRAMS\nAPFLIST  TSO COMMAND TO LIST DATASETS IN APF LIST\nCONNECT  MACRO\nCOPYTP   PROGRAM TO COPY TAPE OR MAP A TAPE\nCOPYTPX  PROGRAM TO COPY TAPE OR MAP A TAPE (SUPPORT 256K)\nLPALIST  ALTERNATE ENTRY IN LNKLIST THAT DISPLAY LPA DATASET LIST\nDSCATNAM SUBROUTINE TO RETURN CATALOG NAME FOR AN CATALOG ALIAS\nDSCPPL   SUBROUTINE TO BUILD A CPPL IF CALLED AS NON-TSO COMMAND\nDSDSM08  SCAN CATALOG LOOKING FOR DSNS CATALOGED ON WRONG VOLUME\nDSUNARC  RECALL ALL MIGRATED DATASETS FOR JOB WHEN USED AS 1ST STEP\nDSWTO    SUBROUTINE TO ISSUE WTO (COBOL CALLABLE)\nDSWTOMSG SUBROUTINE TO ISSUE WTOR (COBOL CALLABLE)\nDUMPASCB TSO COMMAND TO DUMP ASCB\nDUMPCSCB TSO COMMAND TO DUMP CSCB\nDUMPJCT  TSO COMMAND TO DUMP JCT (OS)\nDUMPLWA  TSO COMMAND TO DUMP LWA\nDUMPPCCB TSO COMMAND TO DUMP PCCB\nDUMPPPT  TSO COMMAND TO DUMP PPT  (AUTHORIZED SVC REQUIRED)\nDUMPPRB  TSO COMMAND TO DUMP PRD\nDUMPSCT  TSO COMMAND TO DUMP SCT\nDUMPTCT  TSO COMMAND TO DUMP TCT\nDUMPTIOT TSO COMMAND TO DUMP TIOT\nDUMPTSB  TSO COMMAND TO DUMP TSB  (AUTHORIZED SVC REQUIRED)\nDYNAM    SUBROUTINE FOR SVC 99, COBOL CALLABLE, NOW IS AMODE=31\nDYNAMDOC DYNAM DOC\nFIXDSCB  MODIFIES, RENAMES, SCRATCH DATASETS THAT ARE ALLOCATED\n         (AUTHORIZED SVC REQUIRED).\nFIXDSCB2 MODIFIES, RENAMES, SCRATCH DATASETS THAT ARE ALLOCATED MVS 3.8\n         (MUST BE APF AUTHORIZED).\nGENPARM  TAKES PARM FIELDS AND WRITES TO //PARM DDNAME  RECFM=FB,80\nKMBAPFLB ADDS DATASET TO APFLIST (AUTHORIZED SVC REQUIRED).\nLNKLIST  TSO COMMAND TO LIST LNKLIST DATASETS\nLPALIST  ALTERNATE ENTRY IN LNKLIST THAT DISPLAY LPA DATASET LIST\nMVSAREAS MACRO FOR DUMP... MEMBERS\nPRTDUMP  MACRO FOR DUMP... MEMBERS\nRELEASE  MACRO\nSQAMON   MONITORS CSA AND SQA CHANGES (REQ APF AUTHORIZED).\nSTPCOND  SENDS WTO TO JOB SUBMITTOR ABOUT STEP COND CODES, USE AS LAST\nSWAREQ   SUBROUTINE TO CONVERT SWA ADDRESS TO REAL ADDRESSES\nWAITTIME WAITS PARM='NNN' SECONDS\nWLMREXX  EXEC TO READ WLM PDS AND BUILD SAS CODE TO LOAD INTO SAS DBASE\nZAPDSCB  TSO FULL SCREEN DATASET ATTRIBUTE ZAPPER\n         (AUTHORIZED SVC REQUIRED).\nZAPDSCB2 TSO FULL SCREEN DATASET ATTRIBUTE ZAPPER ESA 4.3 AND BELOW\n         (AUTHORIZED SVC REQUIRED).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x01\\x02(?\\x01\\x02(?\\x07H\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-10T00:00:00", "modifydate": "2002-10-10T07:48:17", "lines": 26, "newlines": 26, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: CBT File 566 for Sam Bass\nDate: Wed, 9 Oct 2002 10:17:30 -0500\nFrom: Sam Bass <SBass@mclaneco.com>\nTo: \"'sbgolob@att.net'\"       <sbgolob@att.net>\nCC: 'Sam Knutson' <sam@knutson.org>\n\nSam Golob\nI have added a new utility call WLMREXX.\n\nIt reads the WLM PDS and creates SAS code to build a SAS database\nwith the data from the WLM PDS.  It does not have any hard coded\nnames except the WLM PDS name and the SAS output dataset.  It\ngets the member names via the ISPF LM function and then reads the\ndata via the ISPF TB functions.\n\nNow all we need is someone to write the SAS reports for it.\n\nHere is my Zipped, tso xmitted file for my source to be put on\nthe CBT site.\n<<CBT566.zip>>\n\nSam Bass\n\nbass@vvm.com\nsam@kmbass.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE02": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00S\\x01\\x076\\x1f\\x01\\x17\\x01/\\x128\\x00}\\x00y\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-12-27T00:00:00", "modifydate": "2017-01-12T12:38:53", "lines": 125, "newlines": 121, "modlines": 0, "user": "SBGOLOB"}, "text": "This is the current record of correspondence with the\nauthor/modifier, concerning the CONSOLE program, whose\nname has been changed to SPY.\n(SG - 12/27/2007)\n\n-----------------------------------------------------------------\n\nSubject:    UPDATE console/spy program.\nFrom:       \"Sam Bass\" <Sam.Bass@mclaneco.com>\nDate:       Wed, 26 Dec 2007 16:06:48 -0600\nTo:         \"Sam Golob\" <sbgolob@cbttape.org>\n\nHi Sam,\n\nI have updated the console/spy once again.\n\nInternally I have called it SPY since that is what my users are\nused to.\n\nI have fixed some bugs in this release.\n\nI am now authorized only when I need to be.\n\nI use STORAGE OBTAIN and STORAGE RELEASE and with BNDRY=PAGE now.\n\nI fixed the AXRES, AXFRE, AXSET, and AREXT to always free the\nAXLIST if an AXRES has been done.\n\nI found something interesting here.\n\nIf you call it CONS, have it APF authorized in IKJTSO00 and in a\nLNKLIST library and do not use the 'special svc' and use it under\nISPF, then at logoff time it gets an ABEND S378.  Weird!  Changed\nit to SPY and it works fine!\n\nSam Bass\n\n254-541-7350\n\nSr z/OS Systems Specialist\n\n-----Original Message-----\nFrom: Sam Bass\nSent: Friday, August 03, 2007 2:46 PM\nTo: 'Sam Golob'\nSubject: RE: new console/spy program that allow you to look at\n             consoles bigger that 24x80\n\n\n\nHi Sam,\n\n\n\nI found a major bug in the code when switching screen sizes.  It\nlocks up the session.\n\n\n\nHere is a new copy.\n\nI checked auto-update and it works.\n\nI tested it on a TSO as mod-2, mod-3, mod-4, mod-5, in ISPF and READY.\n\nSorry for extra work on updating this again so soon.\n\nThanks again,\n\nSam Bass\n\n254-771-7212\n\nSr z/OS Systems Specialist\n\n\n\n-----Original Message-----\nFrom: Sam Golob \u00ddmailto:sbgolob@cbttape.org\u00a8\nSent: Friday, August 03, 2007 8:47 AM\nTo: Sam Bass\nSubject: Re: new console/spy program that allow you to look at\n             consoles bigger that 24x80\n\nHi Sam,\n\n   OK.  I got it done.  Please check File 566 on Updates on\n   www.cbttape.org.  Thanks for your good work.  A lot of people\n   can use it.\n\n   Nice talking to you today.\n\n   All the best......\n\nSam\n\nSam Bass wrote:\n\nHi Sam,\n\nI installed some new PC consoles via the OS/Console support in\nthe z/9** series.\n\nI make all of my consoles 3278-5E, so my old SPY program dies\nmiserably.\n\nI downloaded CBT025, program=CONS390 and went to work on it.\n\nIt supports 'any' console model even odd stuff like 54x132.\n\nHere is my working copy, although I don't think the AUTOUPDATE\nworks.\n\nMy current CBTTAPE stuff is on file=566\n\nCan you add this program to it?\n\n <<console.xmi>>  <<console.asm>>\n\nSam Bass\n\n254-771-7212\n\nSr z/OS Systems Specialist\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE03": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00\\x10\\x01\\x17\\x08\\x1f\\x01\\x17\\x08\\x1f#\\x03\\x00'\\x009\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "2017-03-22T00:00:00", "modifydate": "2017-03-22T23:03:10", "lines": 39, "newlines": 57, "modlines": 0, "user": "SBGOLOB"}, "text": "      The DUMP**** members of this pds were fixed\n            to use PUTLINE output under TSO\n ------------------------------------------------------\nThis note concerns the DUMP**** programs here, to dump the\ncontents of control blocks, so you can easily see what you\nhave in them.  Most of them have been modified to use PUTLINE\noutput, so that you can trap their output and scroll up and\ndown.\n\nPrograms called DUMP**** which were NOT fixed are:\nDUMPPPT and DUMPPRB.  I think the rest of them were fixed.\n\nOld versions of the DUMP**** programs end with the letter O,\nin their member names.\n\nTo facilitate trapping the output of these commands, I have\nincluded in this pds, some trapping execs, which were mostly\nwritten by Mark Zelden.  Their names are:\n\nTSOB - Trap and ISPF Browse the output.\nTSOE - Trap and ISPF Edit the output.\nTSOV - Trap and ISPF View the output.\nTSOR - Trap and TSO REVIEW the output.  (REVIEW source\n        (modules beginning with REV****) is on CBT File 134.\n        REVIEW load modules are on CBT File 135.  Don't forget\n        to copy all their aliases.  REVIEW is a TSO browser\n        that can work either in TSO READY mode, or under\n        TSO ISPF).\n\nIf you want to assemble the old versions of the DUMP****\nprograms that were not fixed for PUTLINE, then use members\nending with the letter \"O\" and -----\n\n   rename the member PRTDUMPT back to PRTDUMP before\n   assembling.\n\nGood Luck.     Sam Golob - March 2017\n               sbgolob@cbttape.org   or  sbgolob@att.net\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CALL": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x000\\x01\\x11\\x08/\\x01\\x11\\x08/\\x11\\x06\\x03^\\x03^\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2011-03-23T11:06:30", "lines": 862, "newlines": 862, "modlines": 0, "user": "KBASS"}, "text": "$CALL    TITLE '--  $CALL -- COMMAND TO INVOKE LINKLIST PROGRAMS.'\n*  HKJ$CALL:\n*\n*              CHANGE RECORD:\n*\n*        SJB   FIX UNALLOCATION ERROR MESSAGE\n*\n*\n*\n*\n*    FUNCTION: TO PROVIDE AN INTERFACE TO TRADITIONAL BATCH\n*        PROGRAMS WITH STANDARD O.S. PARAMETER REQUIREMENTS\n*        WITHOUT REQUIRING THE CALLER TO KNOW IN WHAT LIBRARY\n*        THE CALLED PROGRAM RESIDES.  IT IS ASSUMED THAT THE\n*        PROGRAM CAN BE FOUND SOMEWHERE IN THE LINK LIST\n*        OR IN A LIBRARY SPECIFIED ON THE $CALL COMMAND.\n*        $CALL IS ENTERED WITH AUTHORIZATION CODE OF 1.\n*        IT THEN MODESETS IN SUPERVISOR STATE AND TURNS OFF\n*        JSCBAUTH WHICH CHANGES THE AUTHORIZATION CODE TO ZERO.\n*        IF A LIBRARY IS SPECIFIED ON THE COMMAND, THE ATTACH WILL\n*        BE PERFORMED IN ROUTINE #CALL WICH IS REACHED VIA SYNCH\n*        AND RUNS IN PROBLEM PROGRAM STATE.\n*        IF A LIBRARY IS NOT SPECIFIED THE ATTACH WILL BE DONE IN\n*        SUPERVISOR STATE WITH RSAPF=YES SPECIFIED.\n*\n* SYNTAX:    $CALL 'PROGRAM' 'PARAMETERS' LIB('DSLIST') CP\n* REQUIRED:  'PROGRAM'\n* WHERE:      'PROGRAM' - NAME OF PROGRAM TO BE ATTACHED\n*              'PARAMETERS' - PARAMETERS TO BE PASSED TO PROGRAM\n*                             IF CP IS SPECIFIED (SEE BELOW) THIS\n*                             STRING IS ASSUMED TO BE THE REMAINDER\n*                             OF THE COMMAND BUFFER FOR THE COMMAND\n*                             PROCESSOR BEING ATTACHED.\n*                             (LIMIT OF 100 CHARACTERS)\n*              LIB('DSLIST') - LIST OF LOAD LIBRARY PDS'S TO BE\n*                              USED FOR DCB IN ATTACH OF PROGRAM\n*                              AND AS A TASKLIB FOR ATTACHED PROGRAM.\n*                              (LIMIT OF 16)\n*              CP - THE PROGRAM NAME IS A COMMAND PROCESSOR AND\n*                   REQUIRES A CPPL (COMMAND PROCESSOR PARAMETER LIST)\n*                   BE PASSED TO IT.\n*\n*\n         EJECT\n         MACRO\n&LABEL   BADNEWS &TEXT,&THERE\n         LCLC  &C\n&C       SETC  '&THERE'\n         AIF   ('&THERE' NE '').GO\n&C       SETC  'ERRX&SYSNDX'\n.GO      ANOP\n&LABEL   LA    0,L'ERRM&SYSNDX\n         LA    1,ERRM&SYSNDX\n         TPUT  (1),(0),R\n         B     &C\nERRM&SYSNDX DC C&TEXT\n         AIF   ('&THERE' NE '').STOP\nERRX&SYSNDX DS 0H\n.STOP    ANOP\n         MEND\n         EJECT\nHKJ$CALL CSECT\n         SPACE 2\n*  REGISTER DEFINITIONS\n         SPACE\nRDATA    EQU   R11\nRBASE    EQU   R12\nRSAVE    EQU   R13\nRLINK    EQU   R14\n         EJECT\n*  INITIALIZE AND PREPARE TO PARSE COMMAND\n         SPACE\n         SAVE  (14,12)\n         LR    RBASE,R15\n         USING HKJ$CALL,RBASE\n         LR    R2,R1            CPPL ADDRESS TO R2\n         USING  CPPL,R2\n         GETMAIN  R,LV=DYNLEN,SP=1\n         SPACE 2\n*\n*        CLEAR THE WORK AREA TO ALL ZEROS\n*\n         LR    RDATA,R1       SAVE DATA AREA ADDRESS\n         USING HKJ$DATA,RDATA\n         L     R14,MAXL       LOAD THE MAXIMUM LENGTH FOR XC\n         BCTR  R14,0          DECREMENT THE LENGTH FOR XC\n         LA    R3,DYNLEN      LOAD THE SIZE OF THE AREA\nCOMPARE  C     R3,MAXL        COMPARE LENGTH WITH MAXIMUM FOR XC\n         BL    FINISH         BRANCH IF LESS OR EQUALE'\n         EX    R14,CLEARWRK   CLEAR THE NEXT AREA\n         A     R1,MAXL        INCREMENT THE STARTING ADDRESS\n         S     R3,MAXL        DECREMENT THE LENGTH LEFT\n         B     COMPARE        GO DO THE NEXT SEGMENT\nFINISH   DS    0H\n         LTR   R3,R3          IS REG 3 ZERO\n         BZ    SKIPFIN        BRANCH IF SO\n         BCTR  R3,0           FIX THE LENGTH FOR FINAL CLEAR\n         EX    R3,CLEARWRK    FINISH THE LAST SEGMENT\n         B     SKIPFIN\nSKIPFIN  EQU   *\n         ST    RDATA,8(RSAVE)      CHAIN SAVE AREAS\n         ST    RSAVE,4(RDATA)\n         LR    RSAVE,RDATA\n         MVC   $CPPL+4(12),4(R2) COPY CPPL INTO WORKAREA\n         LA    R1,$CBUFF      GET INTERNAL COMMAND BUFFER\n         ST    R1,$CPPL       STORE IN INTERNAL CPPL\n         MVC   DYNPARM,CPPLUPT  COPY PARAM POINTERS\n         MVC   DYNPARM+4,CPPLECT    FROM CPPL INTO WORK AREA\n         MVC   DYNATTL(ATCHLEN),ATCHMODL SET UP ATTACH WORK AREA\n         LA    R0,DYNCPECB      POINT TO ECB\n         ST    R0,DYNPARM+8     ALSO SAVE POINTER\n         LA    R1,DYNPARM       ADDRESS PARAM LIST\n         USING PPL,R1\n         L     R0,PCLADDR       GET PARSE PCL POINTER\n         ST    R0,PPLPCL        STORE IN PARAM LIST\n         LA    R0,DYNPARSD      POINT TO ANSWER SLOT\n         ST    R0,PPLANS        ALSO STORE FOR PARSE\n         MVC   PPLCBUF,CPPLCBUF  COPY COMMAND BUFFER POINTER\n         DROP  R1,R2\n         SPACE 2\n*  LINK TO PARSE ROUTINE AND ANALYZE RESULT\n         SPACE\n         LINK  EP=IKJPARS,MF=(E,(1))\n         B     PARSCHCK(R15)\nPARSCHCK DS    0H\n         B     PARSEOK  00 - PARSE SUCCESSFUL\n         B     NOPROMPT 04 - UNABLE TO PROMPT\n         B     PARSEXT  08 - ATTENTION\n         B     BADPARM  0C - INVALID PARAMS\n         B     BADGMAIN 10 - NO MEMORY\n         B     BADPARM  14\n         B     BADPARM  18\n         EJECT\n*\n*  PARSE SUCCESSFUL -- SET UP ENVIRONMENT AND ATTACH PROGRAM\n*\n         SPACE 3\nPARSEOK  DS    0H\n         L     R2,DYNPARSD    GET PARSE ANSWER POINTER\n         USING IKJPARMD,R2\n         CLI   LIBS+1,1\n         BNE   NOKILLA        IF NO LIB DO NOT KILL AUTHORIZATION\n         DROP  R2\n*        CHECK IF AUTHORIZED\n         TESTAUTH FCTN=1,STATE=YES,KEY=YES,RBLEVEL=1\n         LTR   R15,R15        TEST IF AUTHORIZED\n         BNZ   NOKILLA        SKIP MODESET IF NOT AUTHORIZED\n*        GET SUPERVISOR STATE / KEY ZERO TO TURN OFF APF AUTHORIZATION\n         SPACE 1\n         MODESET MODE=SUP,KEY=ZERO\n         SPACE 1\n         L     R1,16          GET CVT ADDRESS\n         L     R1,CVTTCBP-CVTMAP(R1) GET TCB DOUBLE WORD ADDRESS\n         L     R1,4(R1)       GET CURRENT TCB ADDRESS\n         L     R1,TCBJSCB-TCB(R1) GET JSCB ADDRESS\n         USING IEZJSCB,R1     ADDRESS JSCB\n         NI    JSCBOPTS,AUTHOFF\n         DROP  R1\n         SPACE 3\nNOKILLA  DS    0H\n         LA    R1,DYNPARM       ADDRESS PARSE PARM LIST\n         USING PPL,R1\n         L     R5,PPLECT\n         DROP  R1\n         USING ECT,R5\n         L     R2,DYNPARSD    GET PARSE ANSWER POINTER\n         USING IKJPARMD,R2\n         CLI   CP+1,1         COMMAND PROCESSOR BEING CALLED?\n         BNE   FINDPARM       LOOK FOR A PARM IF NOT CP\n         MVI   $CBFCMD,C' '\n         MVC   $CBFCMD+1(99),$CBFCMD\n         L     R3,PROGRAM     GET CMD NAME ADDRESS\n         LH    R4,PROGRAM+4   GET IT'S LENGTH\n         BCTR  R4,0           CUT BY 1\n         EX    R4,MOVECMD     MOVE TO CMD BUFFER\n         LA    R3,8\n         STH   R3,$CBFOFF     SET OFFSET\n         L     R3,PARMS       GET CMD PARM ADDRESS\n         LH    R4,PARMS+4     GET ITS LENGTH\n         C     R4,NINE2       GREATER THAN 92\n         BH    TOOLONG        BRANCH IF SO\n         LTR   R4,R4            IS IT ZERO\n         BZ    NOCMDPRM\n         BCTR  R4,0           CUT BY 1\n         EX    R4,MOVEPARM\nNOCMDPRM DS    0H\n         LH    R3,PARMS+4     GET PARM LENGTH AGAIN\n         LA    R3,12(R3)      BUMP BY 12\n         STH   R3,$CBFLEN     SET CMD BUFFER LEN\n         B     ALLSET\nFINDPARM DS    0H\n         L     R3,PARMS         GET PARAMETER STRING POINTER\n         LH    R4,PARMS+4\n         LA    R0,2(,R4)\n         GETMAIN  R,LV=(0)\n         ST    R1,DYNPARMX      STORE PROGRAM PARM POINTER\n         OI    DYNPARMX,X'80'   INDICATE END OF PARAM LIST\n         STH   R4,0(,R1)        STORE LENGTH OF PARM STRING\n         LTR   R4,R4            TEST FOR STRING OMITTED OR NULL\n         BZ    ALLSET           SKIP STRING COPY IF SO\n         C     R4,HUNDRED     GREATER THAN 100\n         BH    TOOLONG\n         BCTR  R4,0\n         EX    R4,PARMMVC       COPY PARM STRING FOR PROGRAM\nALLSET   DS    0H\n         MVC   DYNPCMD,ECTPCMD  SAVE THIS COMMAND NAME\n         MVI   ECTPCMD,C' '   CLEAR PROGRAM NAME SLOT\n         MVC   ECTPCMD+1(7),ECTPCMD\n         L     R3,PROGRAM\n         LH    R4,PROGRAM+4\n         C     R4,EIGHT       GREATER THAN 8\n         BH    BADNAME\n         CLI   0(R3),C'$'     START WITH $\n         BE    OKNAME\n         CLI   0(R3),C'#'     START WITH #\n         BE    OKNAME\n         CLI   0(R3),C'@'     START WITH @\n         BE    OKNAME\n         CLI   0(R3),C'A'     LESS THAN A\n         BL    BADNAME\n         CLI   0(R3),C'Z'     GREATER THAN Z\n         BH    BADNAME\nOKNAME   DS    0H\n         BCTR  R4,0\n         EX    R4,PROGMVC\n         CLI   LIBS+1,1       WAS A LIB LIST SPECIFIEC\n         BE    SETLIB         GO SET UP THE TASKLIB IF SO\n         EJECT\nCHECKCP  DS    0H\n         CLI   CP+1,1         COMMAND PROCESSOR BEING CALLED?\n         BNE   NOTCP          SKIP IF NOT\n         LA    R1,$CPPL       LOAD CPPL POINTER FOR CP.\n         B     YESCP\nNOTCP    DS    0H\n         LA    R1,DYNPARMX      SET UP PARM LIST POINTER\nYESCP    DS    0H\n         CLI   LIBS+1,1       WAS A LIBLIST SPECIFIED\n         BNE   NOTASK         SKIP IT NOT\n         LA    R2,ECTPCMD       POINT TO PROGRAM NAME\n         ST    R2,PEPLOC\n         ST    R1,PARMHOLD    SAVE PARM REG\n         LR    R1,RDATA       LOAD POINTER TO WORK AREA\n         L     R15,V#CALL     LOAD ADDRESS OF #CALL ROUTINE\n         SYNCH (15)           GO TO #CALL TO DO ATTACH\n         B     EXTRETRN       BRANCH AROUND INTERNAL ATTACH\nNOTASK   DS    0H\n         LA    R2,ECTPCMD       POINT TO PROGRAM NAME\n         LA    R3,DYNRETN       POINT TO NEW TASK ECB\n         XR    R4,R4            CLEAR DCB REG\n         ATTACH  EPLOC=(2),ECB=(3),MF=(E,(1)),SF=(E,DYNATTL),DCB=(4),  X\n               TASKLIB=(4)      RSAPF=YES\n         ST    R1,DYNATCB        SAVE ATTATCHED TCB POINTER\n         WAIT  ECB=(3)           WAIT FOR TASK TO TERMINATE\n         LA    R1,DYNATCB        POINT TO TCB ADDRESS\n         DETACH  (1)             RELEASE USER TASK\nEXTRETRN DS    0H\n         L     R2,DYNPARSD    RELOAD PARSE ANSWER POINTER\n         MVC   ECTPCMD,DYNPCMD   CHANGE COMMAND NAME BACK\n         CLI   CP+1,1         WAS IT A CP\n         BE    NOPARMF        IF SO NO PARM AREA TO FREE\n         L     R1,DYNPARMX       RETREIVE USER PARM POINTER\n         LH    R4,0(R1)          GET LENGTH OF PARM FIELD\n         LA    R0,2(,R4)         ADD LENGTH TO STRING LENGTH\n         FREEMAIN  R,LV=(0),A=(1)    RELEASE PARM FIELD\nNOPARMF  DS    0H\n         CLI   LIBS+1,1       WAS THERE A TASKLIB\n         BNE   HKJ$EXIT       SKIP IF NOT\n         SPACE 3\n         B     DROPLIBS       GO DROP THE LIBRARY\n         SPACE 3\n*  EXIT ROUTINES\n         SPACE\nPARSEXT  ST    R15,DYNRETN   STORE RETURN CODE\nHKJ$EXIT IKJRLSA DYNPARSD\n         L     R2,DYNRETN    LOAD RETURN CODE\n         LR    R1,RSAVE\n         L     RSAVE,4(RSAVE) BACK UP SAVE CHAIN\n         FREEMAIN  R,LV=DYNLEN,A=(1),SP=1\n         LR    15,R2         SET RETURN CODE REGISTER\n         RETURN  (14,12),RC=(15)\n         EJECT\n*\n*        SET UP THE TASKLIB FROM THE LIST OF DATA SETS\n*\n         SPACE 3\nSETLIB   DS    0H\n*\n*        INITIALIZE THE WORK AREA USING DATA MODELS\n*\n         SPACE 3\n         MVC   TASKDA08,DA08MODL INITIALIZE THE DAIR PARAMETER BLOCKS\n         MVC   TASKDA0C,DA0CMODL\n         MVC   TASKDA10,DA10MODL\n         MVC   TASKDA18,DA18MODL\n         LA    R1,TASKDSNB    GET ADDRESS OF DSNAME BUFFER\n         ST    R1,DA08PDSN    STORE IN DAIR ALLOCATION BLOCK\n         SPACE 2\n*        INITIALIZE THE DAIR PARAMETER LIST\n         MVC   DAPLUPT,$CPPL+4  MOVE IN UPT ADDRESS\n         MVC   DAPLECT,$CPPL+12 MOVE IN ECT ADDRESS\n         MVC   DAPLPSCB,$CPPL+8  MVE IN PSCB ADDRESS\n         LA    R1,TASKECB     PICK ECB ADDRS\n         ST    R1,DAPLECB     STORE IN DAPL\n         SPACE 2\n*        INITIALIZE THE DAIRFAIL PARM LIST\n         LA    R1,TASKJF02    GET ADDRESS OF ZERO HOLDER\n         ST    R1,DFJEFF02    STORE IN DAIRFAIL PARM LIST\n         SPACE 2\n*        INITIALIZE THE MACRO REMOTE PARAMETER LIST\n         MVC   TASKOPEN,OPENMODL INITIALIZE THE OPEN PARAMETER LIST\n         MVC   TASKLINK,LINKMODL INITIALIZE THE LINK PARAMETER LIST\n         MVC   TASKDCB,DCBMODL   INITIALIZE THE DCB\n         SPACE 2\n         LA    R1,LIBLISTX    GET ADDRS OF FIRST DSNAME PDE\n         ST    R1,NEXTDSN     STORE IN WORK AREA\n         EJECT\n*\n*        PICK UP DATA SET NAMES\n*\n         SPACE 3\nNEXTDS   DS    0H\n         L     R7,NEXTDSN     PICK UP NEXT DSN PDE ADDRS\n         LA    R7,0(R7)       CLEAR HI-ORDER BYTE\n         LTR   R7,R7          CHECK FOR END OF LIST\n         BZ    EODLIST        BRANCH IF SO\n         LH    R1,DA0CNUMB    PICK UP # OF DATA SETS\n         LA    R1,1(R1)       BUMP IT\n         CH    R1,=H'16'      GREATER THAN 16\n         BH    TOOMANY\n         STH   R1,DA0CNUMB    STORE IT BACK\n         L     R0,24(R7)      PICK UP NEXT DSN PDE POINTER\n         ST    R0,NEXTDSN     STORE IT FOR LATER\n         L     R1,0(R7)       PICK UP DSN ADDRS\n         LH    R15,4(R7)     PICK UP DSN LENGTH\n         STH   R15,DSNLEN    STORE IN CASE OF NO ADDITIONS\n         MVC   DSNAME,BLANKS  CLEAR THE DSNAME BUFFER\n         BCTR  R15,0         DECR LENGTH FOR EXECUTED INST\n         EX    R15,MOVEDSN   MOVE THE DSNAME TO BUFFER\n         SPACE 2\n*\n*        THE DATA SET NAME MUST NOW BE QUALIFIED WITH '.LOAD' IF\n*        THE FOLLOWING CONDITIONS ARE MET:\n*             1. THE DATA SET NAME WAS NOT ENTERED IN QUOTES.\n*             2. THE DATA SET NAME ENTERED IS NOT 'LOAD'.\n*             3. IT IS NOT ALLREADY QUALIFIED WITH '.LOAD'.\n*\n         SPACE 1\n         TM    6(R7),X'40'    WAS IT QUOTED?\n         BO    ALLOCATE       BRANCH IF SO\n         LA    R1,DSNAME      GET DSNAME ADDRESS\n         LR    R14,R1         SAVE IT\nQBMPLOOP DS    0H             LOOP TO COUNT OFF PREFIX\n         CLI   0(R1),C'.'     END OF PREFIX?\n         BE    OUTBMP         BRANCH IF SO\n         LA    R1,1(R1)       INCREMENT TO NEXT CHARACTER\n         B     QBMPLOOP       GO EXAMINE NEXT CHARACTER\nMOVEDSN  MVC   DSNAME(R15),0(R1) (EXECUTED DATA SET NAME MOVER)\nOUTBMP   DS    0H\n         LA    R1,1(R1)       BUMP PAST PERIOD\n         LR    R3,R1          SAVE PAST PREFIX ADDRESS\n         SR    R1,R14         COMPUTE PREFIX LENGTH\n         LH    R15,DSNLEN     LOAD DSNAME LENGTH\n         SR    R15,R1         COMPUTE UN-PREFIXED LENGTH\n         CH    R15,=H'4'     RIGHT LENGTH FOR 'LOAD'\n         BL    QUALIFY        NO - TO SHORT, GO QUALIFY\n         BH    CHECKQ         NO - GO CHECK FOR QUALIFIER\n         CLC   0(4,R3),=C'LOAD' IS IT 'LOAD'\n         BNE   QUALIFY        NO - GO TO DO QUALIFY\n         B     ALLOCATE       DSNAME IS 'LOAD', GO DO ALLOCATION\nCHECKQ   DS    0H\n         S     R15,=F'5'     EXAMINE QUALIFIER IF PRESENT\n         BNP   QUALIFY        IF TOO SHORT THEN NEEDS QUALIFIER!\n         AR    R3,R15        POINT TO LAST 5 CHARACTERS IN NAME\n         CLC   0(5,R3),=C'.LOAD' IS QUALIFIER LOAD?\n         BE    ALLOCATE\nQUALIFY  DS    0H\n         LH    R15,DSNLEN    RELOAD LENGTH\n         CH    R15,=Y(44-5)  WILL QUALIFIER FIT?\n         BE    ALLOCATE       TRY ASIS IF NOT\n         LA    R1,DSNAME(R15) POINT TO END\n         MVC   0(5,R1),=C'.LOAD' APPEND QUALIFIER\n         LA    R15,5(R15)   INCREMENT LENGTH\n         STH   R15,DSNLEN    STORE IN DSNAME BUFFER\n         XC    TASKECB,TASKECB CLEAR THE ECB\n*\n*        ALLOCATE THE DATA SET\n*\nALLOCATE DS    0H\n         LA    R1,TASKDA08\n         ST    R1,DAPLDAPB    STORE ALLOCATION BLOCK ADDRS IN DAPL\n         CALLTSSR EP=IKJDAIR,MF=(E,TASKDAPL) CALL DAIR TO ALLOCATE\n         LTR   R15,R15      TEST RETURN CODE\n         BZ    DAIROK01       SKIP BRANCH TO DAIRFAIL\n         BAL   RLINK,DAIREROR GO HANDLE DAIR ERROR\n         LA    R15,12\n         B     PARSEXT\nDAIROK01 DS    0H\n         CLI   DA08DSO,X'02'  MAKE SURE IT'S PARTITIONED\n         BNE   BADDSORG\n         SPACE 2\n*\n*        PICK UP DDNAME AND OPEN THE DATA SET\n*        TO CHECK THE RECORD FORMAT (MUST BE U)\n*\n         LA    R3,TASKDCB\n         USING IHADCB,R3      ADDRESS DCB\n         MVC   DCBDDNAM,DA08DDN MOVE DDNAME TO DCB\n         OPEN  ((3),INPUT),MF=(E,TASKOPEN) OPEN THE DATA SET\n         TM    DCBOFLGS,DCBOFOPN CHECK OPEN FOR SUCCESSFUL\n         BZ    BADOPEN\n         CLI   DCBRECFM,X'C0' MAKE SURE IT'S RECFM=U\n         BNE   BADRECFM       BRANCH IF NOT\n         CLOSE ((3)),MF=(E,TASKOPEN) CLOSE THE DATA SET\n         DROP  R3\n         EJECT\n*\n*        SAVE DDNAME AND BLANK IT OUT IN DA08 BLOCK\n*\n         SPACE 3\n         LH    R15,DA0CNUMB  PICK UP DATA SET COUNT\n         BCTR  R15,0         DROP BY 1\n         SLL   R15,3         SHIFT LEFT BY 3 TO MULTIPLY BY 8\n         LA    R1,DA0CDDN     PICK UP FIRST DDNAME PLACE ADDRS\n         AR    R1,R15        OFFSET TO NEXT BLANK ONE\n         MVC   0(8,R1),DA08DDN MOVE IN DDNAME FROM ALLOCATION BLOCK\n         MVC   DA08DDN,BLANKS BLANK OUT DDNAME IN BLOCK\n         LTR   R15,R15        FIRST DDNAME?\n         BNZ   NEXTDS\n         MVC   DA10DDN,0(R1)  SAVE FIRST DDNAME IN DECONCAT BLOCK\n         B     NEXTDS         GO DO THE NEXT DATA SET\n         EJECT\n*\n*        ALL DATA SETS HAVE BEEN CHECKED AND ALLOCATED.\n*        NOW CONCATENATE THEM UNDER DDNAME TASKLIB.\n*\n         SPACE 3\nEODLIST  DS    0H\n         CLC   DA0CNUMB,=H'1' IF ONLY 1 DS SKIP CONCATENATION.\n         BE    DOOPEN\n         XC    TASKECB,TASKECB CLEAR THE ECB\n         LA    R1,TASKDA0C    GET ADDRESS OF DAIR CONCATENATION BLOCK\n         ST    R1,DAPLDAPB STORE IN PARM LIST\n         CALLTSSR EP=IKJDAIR,MF=(E,TASKDAPL) CALL DAIR\n         LTR   R15,R15\n         BZ    DOOPEN         SKIP DAIRFAIL IF GOOD\n         BAL   RLINK,DAIREROR\n         B     HKJ$EXIT\n         EJECT\n*\n*        OPEN THE TASKLIB DCB\n*\n         SPACE 3\nDOOPEN   DS    0H\n         LA    R3,TASKDCB     GET ADDRESS OF DCB\n         USING IHADCB,R3      ADDRESS IT\n         MVC   DCBDDNAM,DA0CDDN MOVE DDNAME FROM CONCAT BLOCK\n*        OPEN THE TASKLIB DCB\n         OPEN ((3),INPUT),MF=(E,TASKOPEN)\n         TM    DCBOFLGS,DCBOFOPN TEST THE OPEN\n         BZ    BADTASK\n         B     CHECKCP\n         DROP  R3\n         EJECT\n*\n*        FREE THE TASKLIB DATASET LIST\n*\n         SPACE 3\nDROPLIBS DS    0H\n         CLOSE (TASKDCB),MF=(E,TASKOPEN)\n         CLC   DA0CNUMB,=H'1' IF ONLY 1 SKIP DECONCATENATION\n         BE    DEALCOLD\n         XC    TASKECB,TASKECB\n         LA    R1,TASKDA10    LOAD ADDRESS OF DECONCAT BLOCK\n         ST    R1,DAPLDAPB    STORE IN DAIR PARM LIST\n         CALLTSSR EP=IKJDAIR,MF=(E,TASKDAPL) CALL DAIR\n         LTR   R15,R15      CHECK RETURN CODE\n         BZ    DEALCOLD       SKIP IF GOOD\n         BAL   RLINK,DAIREROR GO HANDLE THE ERROR\n         B     HKJ$EXIT\n         EJECT\n*\n*        DEALLOCATE THE OLD DATA SET LIST\n*\nDEALCOLD DS    0H\n         LA    R15,12\n         LH    R4,DA0CNUMB    PICK UP NUMBER OF DDNAMES\n         LA    R3,DA0CDDN     PICK UP ADDRESS OF FIRST DDNAME\n         LA    R1,TASKDA18    PICK UP ADDRESS OF DEALLOCATION BLOCK\n         ST    R1,DAPLDAPB    STORE IN DAIR PARM LIST\n         SPACE 3\nDOLDLOOP DS    0H\n         XC    TASKECB,TASKECB CLEAR THE ECB\n         MVC   DA18DDN,0(R3)  MOVE IN DDNAME\n         LA    R3,8(R3)       POINT AT NEXT DDNAME (IF ANY)\n         CALLTSSR EP=IKJDAIR,MF=(E,TASKDAPL) CALL DAIR\n         LTR   R15,R15        CHECK RETURN CODE\n         BNZ   DODAIRER       GO DO DAIR ERROR THING\n         TM    DA18FLG,X'80'  TEST FLAG BIT IN DAPB\n         BNO   GOODUNAL\nDODAIRER DS    0H\n         BAL   RLINK,DAIREROR\nGOODUNAL DS    0H\n         BCT   R4,DOLDLOOP    GO DO THE NEXT DDNAME                 SJB\n         B     HKJ$EXIT\n         EJECT\n*\n*        BEGIN ERROR ROUTINES\n*\n         SPACE 3\n         PRINT NOGEN\n*        INVALID PARSE PARAMETERS\n         SPACE 1\nBADPARM  BADNEWS 'INVALID PARSE PARAMETERS SPECIFIED'\n         LA    R15,12\n         B     PARSEXT\n         SPACE 3\n*        UNABLE TO PROMPT USER\n         SPACE 1\nNOPROMPT BADNEWS 'UNABLE TO PROMPT.  $CALL ABORTED.'\n         LA    R15,12\n         B     PARSEXT\n         SPACE 3\n*        PARM TOO LONG\n         SPACE 1\nTOOLONG  BADNEWS 'PARM SPECIFIED IS TOO LONG.  $CALL ABORTED.'\n         LA    R15,12\n         B     PARSEXT\n         SPACE 3\n*        INVALID MODULE NAME\n         SPACE 1\nBADNAME  BADNEWS 'INVALID PROGRAM NAME SPECIFIED.'\n         LA    R15,12\n         B     PARSEXT\n         SPACE 3\n*        NO CORE FOR PARSE.\n         SPACE 1\nBADGMAIN BADNEWS 'NOT ENOUGH CORE FOR PARSE.'\n         LA    R15,12\n         B     PARSEXT\n         SPACE 3\n*        TOO MANY DATA SETS SPECIFIED.\n         SPACE 1\nTOOMANY  BADNEWS 'TOO MANY DATA SETS SPECIFIED.  COMMAND IGNORED.'\nFREEALL  DS    0H             FREE THE ALLOCATED DATA SETS\n         LH    R3,DA0CNUMB    PICK UP NUMBER OF DDNAMES\n         LA    R3,DA0CDDN     PICK UP ADDRESS OF FIRST DDNAME\n         LA    R1,TASKDA18    PICK UP ADDRESS OF DEALLOCATION BLOCK\n         ST    R1,DAPLDAPB    STORE IN DAIR PARM LIST\nFREELOOP DS    0H\n         XC    TASKECB,TASKECB CLEAR THE ECB\n         MVC   DA18DDN,0(R3)  MOVE IN DDNAME\n         LA    R3,8(R3)       POINT AT NEXT DDNAME (IF ANY)\n         CALLTSSR EP=IKJDAIR,MF=(E,TASKDAPL) CALL DAIR\n         BCT   R4,FREELOOP    GO DO THE NEXT DDNAME\n         LA    R15,12\n         B     PARSEXT\n         SPACE 3\n*        BAD OPEN DURING DATA SET CHECKOUT\n         SPACE 1\nBADOPEN  BADNEWS 'OPEN FAILURE.  $CALL ABORTED.'\n         LA    R15,12\n         B     PARSEXT\n         SPACE 3\n*        INVALID DATA SET ORGANIZATION\n         SPACE 1\nBADDSORG BADNEWS 'DATA SET IS NOT PARTITIONED.  $CALL ABORTED.'\n         B     FREEALL\n         SPACE 3\n*        INVALID RECORD FORMAT\n         SPACE 1\nBADRECFM BADNEWS 'DATA SET IS NOT RECORD FORMAT U.  $CALL ABORTED.'\n         CLOSE ((3)),MF=(E,TASKOPEN) CLOSE THE DATA SET\n         B     FREEALL\n         SPACE 3\n*        BAD OPEN FOR TASKLIB DCB PROPER.\n         SPACE 1\nBADTASK  BADNEWS 'OPEN FAILURE FOR TASKLIB.  $CALL ABORTED.'\n         CLC   DA0CNUMB,=H'1' IF ONLY 1 SKIP DECONCATENATION\n         BE    FREEALL\n         XC    TASKECB,TASKECB\n         LA    R1,TASKDA10    LOAD ADDRESS OF DECONCAT BLOCK\n         ST    R1,DAPLDAPB    STORE IN DAIR PARM LIST\n         CALLTSSR EP=IKJDAIR,MF=(E,TASKDAPL) CALL DAIR\n         LTR   R15,R15      CHECK RETURN CODE\n         BNZ   DAIREROR       BRANCH IF ERROR\n         B     FREEALL\n         PRINT GEN\n         EJECT\n*\n*        DAIR ERROR ROUTINE\n*\n         SPACE 3\nDAIREROR DS    0H\n*        INITIALIZE THE DAIRFAIL PARM LIST\n         LA    R1,TASKDFRC    GET ADDRESS OF RETURN CODE HOLDER\n         ST    R1,DFRCP       STORE IN DAIRFAIL PARM LIST\n         LA    R1,TASKDAPL    GET ADDRESS OF DAIR PARM LIST\n         ST    R1,DFDAPLP     STORE INTO DAIR FAIL PARM LIST\n         ST    R15,TASKDFRC   STORE RETURN CODE IN DAIRFAIL RC HOLDER\n         LA    R1,DFSWITCH    PICK UP ADDRESS OF SWITCH BYTES\n         ST    R1,DFIDP       STORE IN DAIRFAIL PARM LIST\n         LINK EP=IKJEFF18,MF=(E,TASKDFPL),SF=(E,TASKLINK)\n         SPACE 3\n         BR    RLINK          RETURN TO CALLER\n         EJECT\n*\n*   PARSE VALIDITY CHECK FOR DSNAMES\n*\n         SPACE 3\nDSNCHECK DS    0H\n         USING DSNCHECK,R15\n         L     R1,0(,R1)           LOAD PDE ADDR\n         TM    6(R1),X'80'         MAKE SURE NAME IS PRESENT\n         BZ    DSNBAD\n         SLR   R15,R15\n         BR    R14\nDSNBAD   LA    R15,4\n         BR    R14\n         DROP  R15\n         EJECT\n*\n*        EXECUTED INSTRUCTIONS AND CONSTANTS.\n*\n         SPACE 3\nCLEARWRK XC    0(0,R1),0(R1)\nMAXL     DC    F'256'\nHUNDRED  DC    F'100'\nNINE2    DC    F'92'\nEIGHT    DC    F'8'\nBLANKS   DC    CL80' '\nDFSWITCH DC    X'0001'        DAIRFAIL SWITCH BYTES\nPCLADDR  DC    V(HKJ$PCL)\nPROGMVC  MVC   ECTPCMD(0),0(R3)\nPARMMVC  MVC   2(0,R1),0(R3)\nMOVECMD  MVC   $CBFCMD(0),0(R3)\nMOVEPARM MVC   $CBFPARM(0),0(R3)\nV#CALL   DC    V(HKJ#CALL)\nAUTHOFF  EQU   B'11111110'\n         EJECT\n*\n*        DATA MODELS\n*\n         SPACE 3\n         PRINT NOGEN\nDA08MODL DC    AL2(8,0,0,0),A(0),CL24' '\n         DC    4A(0),CL16' ',4AL1(8),AL3(0),X'00',CL8' '\nDA08MLEN EQU   *-DA08MODL\n         SPACE 2\nDA0CMODL DC    AL2(12,0,0,0,0,0),CL128' '\nDA0CMLEN EQU   *-DA0CMODL\n         SPACE 2\nDA10MODL DC    AL2(16,0,0,0),CL8' '\nDA10MLEN EQU   *-DA10MODL\n         SPACE 2\nDA18MODL DC    AL2(24,0,0,0),A(0),CL18' ',AL1(0,16),A(0,0)\nDA18MLEN EQU   *-DA18MODL\n         SPACE 2\nOPENMODL OPEN (,INPUT),MF=L\nOPENLEN  EQU   *-OPENMODL\n         SPACE 2\nDCBMODL  DCB   DDNAME=TASKLIB,MACRF=R,DSORG=PO,BLKSIZE=19069\nDCBLEN   EQU   *-DCBMODL\nLINKMODL LINK ,SF=L\nLINKLEN  EQU   *-LINKMODL\nATCHMODL ATTACH SHSPV=78,SF=L\nATCHLEN  EQU   *-LINKMODL\n         LTORG\n         EJECT\n*  HKJ#CALL:\n*\n*    FUNCTION: TO PROVIDE A MEANS OF ATTACHING PROGRAMS FROM\n*        USER LIBRARIES WITHOUT ABENDING WITH A 306-C.\n*        THIS MODULE PERFORMS ONLY THE ATTACH.  ALL OTHER WORK\n*        IS DONE BY $CALL (HKJ$CALL).\n*        NOTE: THIS MODULE IS ENTERED VIA SYNCH AND RUNS IN\n*              PROBLEM PROGRAM STATE.\n*        WHEN CONTROL IS RECIEVED FROM $CALL THE APF BIT\n*        IN THE JSCBOPTS FIELD HAS BEEN TURNED OFF BY $CALL\n*        THUS THIS MODULE FUNCTIONS AS NON AUTHORIZED EVEN THOUGH\n*        IT IS LINK-EDITED WITH HKJ$CALL UNDER AN APF OF 1.\n*\nHKJ#CALL CSECT\n*  INITIALIZE AND PREPARE TO PERFORM ATTACH\n         SPACE\n         SAVE  (14,12)\n         LR    RBASE,R15\n         USING HKJ#CALL,RBASE\n         LR    RDATA,R1       ADDRESS WORK AREA\n         USING HKJ$DATA,RDATA\n         SPACE 3\n*        CHAIN SAVE AREAS\n         LA    R1,SAVE2       GET ADDRESS OF SECOND LOAD SAVE AREA\n         ST    R1,8(RSAVE)    BACK CHAIN\n         ST    RSAVE,4(R1)    FORWARD CHAIN\n         LR    RSAVE,R1       LOAD NEW SAVE AREA POINTER\n*        SETUP FOR THE ATTACH\n         SPACE 3\n         L     R1,PARMHOLD    GET PARM REG\n         LA    R4,TASKDCB     GET ADDRESS OF DCB (ALLREADY OPEN)\n         L     R2,PEPLOC        POINT TO PROGRAM NAME\n         LA    R3,DYNRETN       POINT TO NEW TASK ECB\n         ATTACH  EPLOC=(2),ECB=(3),MF=(E,(1)),SF=(E,DYNATTL),          X\n               DCB=(4),TASKLIB=(4)     ,RSAPF=YES\n         ST    R1,DYNATCB        SAVE ATTATCHED TCB POINTER\n         WAIT  ECB=(3)           WAIT FOR TASK TO TERMINATE\n         LA    R1,DYNATCB        POINT TO TCB ADDRESS\n         DETACH  (1)             RELEASE USER TASK\n         L     R13,4(R13)    BACK UP SAVE CHAIN\n         RETURN  (14,12),RC=(15)\n         EJECT\nHKJ$PCL  IKJPARM\nPROGRAM  IKJIDENT  'PROGRAM NAME',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,C\n               PROMPT='PROGRAM NAME',                                  C\n               HELP='NAME OF PROGRAM TO BE CALLED'\nPARMS    IKJPOSIT  QSTRING,                                            C\n               HELP='PARAMETERS TO BE PASSED TO THE CALLED PROGRAM'\nCP       IKJKEYWD\n         IKJNAME 'CP'\nLIBS     IKJKEYWD\n         IKJNAME 'LIB',SUBFLD=LIBLIST\nLIBLIST  IKJSUBF\nLIBLISTX IKJPOSIT DSNAME,LIST,USID,VALIDCK=DSNCHECK,                   X\n               PROMPT='DATA SET NAME(S)',                              X\n               HELP=('NAME OF DATA SET(S) TO BE USED AS A TASKLIB')\n         IKJENDP\n         EJECT\n*  DYNAMIC WORK AREA MAPPING\n         SPACE\nHKJ$DATA DSECT\nSAVE1    DS    18F                 SAVE AREA FOR $CALL\nSAVE2    DS    18F                 SAVE AREA FOR #CALL\nDYNPARM  DS    7F\nDYNPARMX DS    F\nDYNCPECB DS    F\nDYNPARSD DS    F\nDYNRETN  DS    F\nDYNATCB  DS    F\nPARMHOLD DS    F\nPEPLOC   DS    F\n$CPPL    DS    4F             CP CPPL\n#ECB     DS    F              #CALL ECB FOR ATTACH\n#TCB     DS    F              #CALL TCB HOLDER FOR ATTACH\n$CBUFF   DS    0CL104\n$CBFLEN  DS    CL2\n$CBFOFF  DS    CL2\n$CBFCMD  DS    CL8\n$CBFPARM DS    CL92\nDYNATTL  ATTACH  SHSPV=78,SF=L\nDYNPCMD  DS    CL8\nDYNBUFF  DS    CL24\n         DS    0D\n         SPACE 2\nTASKDCB  DS    CL(DCBLEN)     DCB FOR TASKLIB\n         SPACE 2\nTASKDA08 DS    0CL(DA08MLEN)  DAIR ALLOCATION BLOCK\nDA08CD   DS    X'0008'\nDA08FLG  DS    CL2\nDA08DARC DS    CL2\nDA08CTRC DS    CL2\nDA08PDSN DS    A(0)\nDA08DDN  DS    CL8' '\nDA08UNIT DS    CL8' '\nDA08SER  DS    CL8' '\nDA08BLK  DS    A(0)\nDA08PQTY DS    A(0)\nDA08SQTY DS    A(0)\nDA08DQTY DS    A(0)\nDA08MNM  DS    CL8' '\nDA08PDSW DS    CL8' '\nDA08DSP1 DS    X'08'          SHR\nDA08DSP2 DS    X'08'          KEEP\nDA08DSP3 DS    X'08'          KEEP\nDA08CTL  DS    X'08'          FULLY QUALIFIED\n         DS    X'000000'      RESERVED\nDA08DSO  DS    X'00'          MUST BE X'02' AFTER ALLOCATION\nDA08ALN  DS    CL8' '\nDA08LEN  EQU   *-TASKDA08\n         SPACE 2\n         DS    0F             ALIGN TO FULL WORD\nTASKDA0C DS    0CL(DA0CMLEN)  DAIR CONCANTENATION BLOCK\nDA0CCD   DS    X'000C'\nDA0CFLG  DS    CL2\nDA0CDARC DS    CL2\n         DS    X'0000'        RESERVED\nDA0CNUMB DS    CL2            NUMBER OF DDNAMES (DATA SETS)\n         DS    X'0000'        RESERVED\nDA0CDDN  DS    16CL8' '       DDNAME LIST\nDA0CLEN  EQU   *-TASKDA0C\n         SPACE 2\n         DS    0F             ALIGN TO FULL WORD\nTASKDA10 DS    0CL(DA10MLEN)  DAIR DECONCATENATION BLOCK\nDA10DC   DS    X'0010'\nDA10FLG  DS    CL2\nDA10DARC DS    CL2\n         DS    X'0000'        RESERVED\nDA10DDN  DS    CL8'TASKLIB '\nDA10LEN  EQU   *-TASKDA10\n         SPACE 2\n         DS    0F             ALIGN TO FULL WORD\nTASKDA18 DS    0CL(DA18MLEN)  DAIR DEALLOCATION (FREEING) BLOCK\nDA18CD   DS    X'0018'\nDA18FLG  DS    CL2\nDA18DARC DS    CL2\nDA18CTRC DS    CL2\nDA18PDSN DS    A(0)\nDA18DDN  DS    CL8' '\nDA18MNM  DS    CL8' '\nDA18SCLS DS    CL2' '\nDA18DSP2 DS    X'08'          KEEP\nDA18CTL  DS    X'10'\n         DS    A(0,0)         RESERVED\nDA18LEN  EQU   *-TASKDA18\n         SPACE 2\n         DS    0F             ALIGN TO FULL WORD\nTASKOPEN DS    CL(OPENLEN)\nTASKLINK DS    CL(LINKLEN)\n         SPACE 2\nTASKECB  DS    F              TASK ECB\nNEXTDSN  DS    F              NEXT DATA SET PDE POINTER\n         SPACE 2\nTASKDAPL DS    0CL20          DAIR PARAMETER LIST\nDAPLUPT  DS    A\nDAPLECT  DS    A\nDAPLECB  DS    A\nDAPLPSCB DS    A\nDAPLDAPB DS    A\n         SPACE 2\nDAPLLEN  EQU   *-TASKDAPL\n         SPACE 2\nTASKDFPL DS    0CL16          DAIRFAIL PARAMETER LIST\nDFDAPLP  DS    A\nDFRCP    DS    A\nDFJEFF02 DS    A\nDFIDP    DS    A\nDFPLLEN  EQU   *-TASKDFPL\n         SPACE 2\n         DS    0F\nTASKDSNB DS    0CL46          DSNAME BUFFER\nDSNLEN   DS    H              DSNAME LENGTH\nDSNAME   DS    CL44           DSNAME PROPER\n         SPACE 1\nTASKDFRC DS    A              DAIRFAIL RETURN CODE HOLDER\nTASKJF02 DS    A              DUMMY ADDRESS (ALLWAYS ZERO)\n         SPACE 2\nDYNLEN   EQU   *-HKJ$DATA\n         SPACE 5\n         IKJCPPL\n         SPACE 5\n         IKJPPL\n         SPACE 5\n         IKJECT\n         SPACE 5\n         CVT   DSECT=YES\n         SPACE 5\n         IKJTCB\n         SPACE 5\n         IEZJSCB\n         SPACE 5\n         DCBD  DEVD=DA,DSORG=PO\n         SPACE 5\n         YREGS ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$CMD": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x008\\x01\\x02\\x15\\x0f\\x01\\x02\\x15\\x0f\\x08%\\x00\\x99\\x00\\x99\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-30T00:00:00", "modifydate": "2002-05-30T08:25:38", "lines": 153, "newlines": 153, "modlines": 0, "user": "KBASS"}, "text": "PROC 0 DEBUG LIST DUMP INIT\nGLOBAL A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,+\n       B1,B2,B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,B13,B14,B15,B16,B17,B18\nCONTROL MAIN,NOFLUSH,MSG,PROMPT\nCONTROL END(ENDO)   PROMPT NOLIST NOCONLIST NOSYMLIST\n  IF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST PROMPT MSG\n  IF &LIST  = LIST  THEN CONTROL LIST\n /*  THIS CLIST ORIGINALLY WAS WRITTEN TO ALLOW THE USER TO SEE THE   */\n /*  RETURN CODE FOR THE LAST COMMAND ISSUED IN TSO.  THIS CLIST      */\n /*  HAS BEEN ENHANCED SINCE ITS BEGINNING.  BELOW IS A LIST OF       */\n /*  THE SUB-COMMANDS SUPPORTED.                                      */\n /*                                                                   */\n /*COMMAND  FUNCTION                                                  */\n /*   .     REDISPLAY THE LAST COMMAND EXECUTED                       */\n /*   .X    EXECUTE   THE COMMAND 'X' AND DO NOT SAVE AS LAST COMMAND */\n /*   ,X    CONCAT    'X' TO THE TO THE LAST COMMAND                  */\n /*   /     ERASE     THE SCREEN                                      */\n /*   /X    ERASE     AND EXECUTE THE COMMAND 'X'                     */\n /*   //    TERMINATE $CMD                                            */\n /*   ..    INTERRUPT $CMD (UNDER SPF, $CMD WILL STILL BE ACTIVE.     */\n /*                                                                   */\n  ERROR GOTO EXITS\n  IF &INIT = INIT THEN +\n    DO\n      SMPUT /C.W H(I) O(1)/\n/*    %SMTIME 8                                                       */\n    ENDO\n/*TERM CL(/)                                                          */\n/*ERASE                                                               */\n  ERROR OFF\n  FREE ATTR(SYSINYY)\n  ATTR SYSINYY RECFM(V B) LRECL(255) BLKSIZE(3120)\n  ALLOC F(SYSINXX) DA(*) REUSE USING(SYSINYY)\n  OPENFILE SYSINXX\n  ERROR GOTO EXITS\n  SET &OLD = &NRSTR(/ST)\n  SET &NEW =\n  SET &LASTCC =\n  SET &SAVE = 0\n  SET &CONT = NO\n  SET &AMP = &&\n  WRITE ==>> ENTER // TO TERMINATE\nLUUP: +\n  WRITE ==>> ENTER COMMAND\nLOOP: +\n  SET &INPUT =\n  GETFILE SYSINXX\n  /*  CHECK TO SEE IF IT IS A REDISPLAY                          */\n  IF &NRSTR(&SYSINXX) = &NRSTR(.) THEN +\n    DO\n      WRITE &NRSTR(&OLD)&STR(           /*)\n      GOTO LUUP\n    ENDO\n  /*  CHECK TO SEE IF TO TERMINATE                               */\n  IF &NRSTR(&SYSINXX) = &NRSTR(//) THEN GOTO EXITS\n  /*  CHECK TO SEE IF IT IS NULL                                 */\n  IF &NRSTR(&SYSINXX) = THEN +\n    SET &INPUT = &NRSTR(&OLD)\n  ELSE +\n    SET &INPUT = &NRSTR(&SYSINXX)\n  /*  CHECK TO SEE IF IT IS NULL LINE IS TO BE ISSUED            */\n  IF &NRSTR(&SYSINXX) = ; THEN +\n    DO\n      SET &NEW   =\n      GOTO CHK\n    ENDO\n  ELSE   /* NOTHING */\nCHK0: +\n  IF &LENGTH(&NRSTR(&SYSINXX)) >= 1 THEN +\n    DO\n      IF &NRSTR(&SYSINXX) = &NRSTR(>) THEN +\n        GOTO LUUP\n      IF &NRSTR(&SYSINXX) < &NRSTR( ) THEN +\n        GOTO LUUP\n    ENDO\n  SET &LEN = &LENGTH(&NRSTR(&INPUT))\n  IF &LEN >= 1 THEN +\n    DO\n      IF &SUBSTR(&LEN:&LEN,&NRSTR(&INPUT)) = &NRSTR(-) && +\n         &LEN > 1 THEN +\n        DO\n          IF &CONT = YES THEN +\n            SET &NEW = &NRSTR(&NEW)&SUBSTR(1:&LEN-1,&NRSTR(&INPUT))\n          ELSE +\n            SET &NEW = &SUBSTR(1:&LEN-1,&NRSTR(&INPUT))\n          SET &CONT = YES\n          GOTO LOOP\n        ENDO\n      ELSE +\n        IF &CONT = YES THEN +\n          DO\n            SET &NEW = &NRSTR(&NEW)&SUBSTR(1:&LEN,&NRSTR(&INPUT))\n            SET &CONT = NO\n            SET &INPUT = &NRSTR(&NEW)\n            SET &LEN = &LENGTH(&NRSTR(&INPUT))\n          ENDO\n        ELSE +\n          SET &NEW = &NRSTR(&INPUT)\n      IF &SUBSTR(1:1,&NRSTR(&NEW)) = &NRSTR(,) THEN +\n        DO\n          IF &LEN = 1 THEN +\n            SET &NEW = &NRSTR(&OLD)\n          ELSE +\n            SET &NEW = &NRSTR(&OLD)&SUBSTR(2:&LEN,&NRSTR(&INPUT))\n          SET &LEN = &LENGTH(&NRSTR(&NEW))\n          SET &INPUT = &NRSTR(&NEW)\n        ENDO\n        ELSE   /* NOTHING */\n        IF &SUBSTR(1:1,&NRSTR(&NEW)) = &NRSTR(/) THEN +\n          DO\n            ERASE\n            IF &LEN = 1 THEN GOTO LUUP\n            SET &ERASE = 1\n            SET &NEW = &SUBSTR(2:&LEN,&NRSTR(&NEW))\n            SET &LEN = &LEN - 1\n          ENDO\n        ELSE   /* NOTHING */\n      IF &SUBSTR(1:1,&NRSTR(&NEW)) = &NRSTR(.) THEN +\n        DO\n          SET &SAVE = 0\n          SET &NEW = &SUBSTR(2:&LEN,&NRSTR(&NEW))\n          SET &LEN = &LEN - 1\n        ENDO\n      ELSE +\n        SET &SAVE = 1\n    ENDO\n  ELSE +\n    SET &NEW = &NRSTR(&INPUT)\nCHK: +\n  IF &SAVE = 1 THEN +\n    DO\n      SET &OLD = &NRSTR(&INPUT)\n      WRITE &NRSTR(&OLD)\n    ENDO\n  ELSE +\n      WRITE &NRSTR(&NEW)\n  ERROR GOTO CMD1\n  SET &AB = &SUBSTR(1:1,&NRSTR(&NEW))\n  IF  &NRSTR(&AB) = &NRSTR(&AMP) THEN +\n    WRITE &NEW\n  ELSE +\n    DO\n      ERROR OFF\n      &NRSTR(&NEW)\n    ENDO\nCMD1: +\n  SET &LSTCC = &LASTCC\n  ERROR OFF\n  WRITE $CMD              RC = &LSTCC         ... &SYSDATE, &SYSTIME\n  ERROR GOTO EXITS\n  GOTO LOOP\nEXITS: +\n  ERROR OFF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#ASMALL": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00%\\x01\\x11\\x08/\\x01\\x17\\x08\\x1f\"D\\x00K\\x00H\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2017-03-22T22:44:25", "lines": 75, "newlines": 72, "modlines": 0, "user": "SBGOLOB"}, "text": "//KMBASM   JOB SYS1,'SAM_BASS',NOTIFY=&SYSUID,REGION=6M,\n//         MSGCLASS=X,CLASS=A\n/*JOBPARM  T=999,L=9,K=0\n//*------- -----------------------------------------------------------\n//ASMKMB   PROC MBR=NONE,\n//           ASM='KBASS.PERM.CBTTAPE.SOURCE'\n//ASM      EXEC  PGM=ASMA90,COND=(4,LT),\n// PARM=('TERM,DECK,NOOBJECT,NOTEST,BATCH',\n//        'SYSPARM(NONE)'),\n//         REGION=5M\n//SYSUT1   DD DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(2,1),RLSE)\n//SYSPUNCH DD DSN=&&OBJ,DISP=(NEW,PASS),SPACE=(TRK,(10,10),RLSE),\n//         UNIT=SYSALLDA,\n//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSPRINT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSLIB   DD DSN=SYS1.MODGEN,DISP=SHR\n//         DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=&ASM,DISP=SHR\n//SYSLIN   DD DUMMY,DCB=BLKSIZE=80\n//SYSGO    DD DUMMY,DCB=BLKSIZE=80\n//SYSIN    DD DSN=&ASM.(&MBR),DISP=SHR\n//*------- -----------------------------------------------------------\n//LK1      EXEC PGM=IEWL,COND=(4,LT),\n//         PARM='LIST,MAP,LET'\n//SYSUT1   DD  UNIT=VIO,SPACE=(3120,(9999,9999))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=KBASS.PERM.CBTTAPE.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=KBASS.PERM.CBTTAPE.LOAD(&MBR)\n//SYSLIN   DD  DISP=(OLD,DELETE),DSN=*.ASM.SYSPUNCH\n//*------- -----------------------------------------------------------\n//         PEND\n//*------- -----------------------------------------------------------\n//*------- SUBROUTINES------------------------------------------------\n//*------- -----------------------------------------------------------\n//SB1      EXEC ASMKMB,MBR=SWAREQ  MUST BE FIRST\n//SB1      EXEC ASMKMB,MBR=DYNAM\n//SB1      EXEC ASMKMB,MBR=DSCATNAM\n//SB1      EXEC ASMKMB,MBR=DSCPPL\n//SB1      EXEC ASMKMB,MBR=RTAPE\n//SB1      EXEC ASMKMB,MBR=RTAPE2\n//*------- -----------------------------------------------------------\n//*------- PROGRAMS   ------------------------------------------------\n//*------- -----------------------------------------------------------\n//SB1      EXEC ASMKMB,MBR=$CALL\n//SB1      EXEC ASMKMB,MBR=APFLIST\n//SB1      EXEC ASMKMB,MBR=COPYTP\n//SB1      EXEC ASMKMB,MBR=COPYTPX\n//SB1      EXEC ASMKMB,MBR=DSDSM08\n//SB1      EXEC ASMKMB,MBR=DSUNARC\n//SB1      EXEC ASMKMB,MBR=DSWTO\n//SB1      EXEC ASMKMB,MBR=DSWTOMSG\n//SB1      EXEC ASMKMB,MBR=DUMPASCO     (OLD VERSIONS OF DUMP PGMS)\n//SB1      EXEC ASMKMB,MBR=DUMPCSCO\n//SB1      EXEC ASMKMB,MBR=DUMPJCTO\n//SB1      EXEC ASMKMB,MBR=DUMPLWAO\n//SB1      EXEC ASMKMB,MBR=DUMPPCCO\n//SB1      EXEC ASMKMB,MBR=DUMPPPT\n//SB1      EXEC ASMKMB,MBR=DUMPPRBO\n//SB1      EXEC ASMKMB,MBR=DUMPSCTO\n//SB1      EXEC ASMKMB,MBR=DUMPTCTO\n//SB1      EXEC ASMKMB,MBR=DUMPTIOO\n//SB1      EXEC ASMKMB,MBR=DUMPTSBO\n//SB1      EXEC ASMKMB,MBR=FIXDSCB\n//*B1      EXEC ASMKMB,MBR=FIXDSCB2 FOR NON-Z/OS\n//SB1      EXEC ASMKMB,MBR=GENPARM\n//SB1      EXEC ASMKMB,MBR=KMBAPFLB\n//SB1      EXEC ASMKMB,MBR=LNKLIST  HAS LPALIST AS ALIAS\n//SB1      EXEC ASMKMB,MBR=SPY\n//SB1      EXEC ASMKMB,MBR=SQAMON\n//SB1      EXEC ASMKMB,MBR=STPCOND\n//SB1      EXEC ASMKMB,MBR=WAITTIME\n//SB1      EXEC ASMKMB,MBR=ZAPDSCB\n//*B1      EXEC ASMKMB,MBR=ZAPDSCB2 FOR NON-Z/OS\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE566": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00#\\x01\\x19!O\\x01\\x19!O\\x15!\\x00\\xa4\\x00\\xa4\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:21:23", "lines": 164, "newlines": 164, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 566 is from Sam Bass and contains a collection of his     *   FILE 566\n//*           utilities.                                            *   FILE 566\n//*                                                                 *   FILE 566\n//*      (Remark from Sam Golob:  They are very good...!!!)         *   FILE 566\n//*                                                                 *   FILE 566\n//*           email   :  vendors@kmbass.com                         *   FILE 566\n//*                                                                 *   FILE 566\n//*           web site:  http://www.kmbass.com                      *   FILE 566\n//*                                                                 *   FILE 566\n//*   Added member DUMPLIB which is an XMIT-format load library     *   FILE 566\n//*   containing the DUMP**** load modules, most of which were      *   FILE 566\n//*   enabled for PUTLINE output.  This will make it easier to      *   FILE 566\n//*   deploy the DUMP**** programs, by just copying the load        *   FILE 566\n//*   to a library accessible to your TSO session.                  *   FILE 566\n//*                                                                 *   FILE 566\n//*   See member $$NOTE03 for further information about these       *   FILE 566\n//*   programs.                                                     *   FILE 566\n//*                                                                 *   FILE 566\n//*   CLISTS member added.                                          *   FILE 566\n//*                                                                 *   FILE 566\n//*   A short description of the utilities follows:                 *   FILE 566\n//*                                                                 *   FILE 566\n//*      #ASMALL  JCL to assemble all source members                *   FILE 566\n//*                                                                 *   FILE 566\n//*      APFLIST  TSO command to list datasets in APF List          *   FILE 566\n//*               (Converted to PUTLINE outpup - old version is     *   FILE 566\n//*                kept here as member APFLIST0)                    *   FILE 566\n//*                                                                 *   FILE 566\n//*      CONSOLE  TSO console display program                       *   FILE 566\n//*        (SPY)  Name for the new version of the CONSOLE program   *   FILE 566\n//*                                                                 *   FILE 566\n//*      COPYTPX, which is assembled with RTAPE2, is a tape copy    *   FILE 566\n//*               utility that can copy tapes with blocksize up     *   FILE 566\n//*               to 256K.  Use it with a parm of J, to force the   *   FILE 566\n//*               output tape's volser to match the SYSUT2 volser   *   FILE 566\n//*               in the JCL.  Otherwise, the program just makes    *   FILE 566\n//*               a 'xerox copy' of the input tape, with the same   *   FILE 566\n//*               volser.  RTAPE2 is a called routine that does     *   FILE 566\n//*               the actual tape I/O.                              *   FILE 566\n//*                                                                 *   FILE 566\n//*      LNKLIST  TSO command to list datasets in the Link List     *   FILE 566\n//*                                                                 *   FILE 566\n//*      DSCATNAM Subroutine to return catalog name for an          *   FILE 566\n//*               catalog alias                                     *   FILE 566\n//*                                                                 *   FILE 566\n//*      DSCPPL   Subroutine to build a CPPL if called as           *   FILE 566\n//*               non-TSO command                                   *   FILE 566\n//*                                                                 *   FILE 566\n//*      DSDSM08  Scan catalog looking for dsns cataloged on        *   FILE 566\n//*               wrong volume                                      *   FILE 566\n//*                                                                 *   FILE 566\n//*      DSUNARC  RECALL all migrated datasets for job when used    *   FILE 566\n//*               as 1st step                                       *   FILE 566\n//*                                                                 *   FILE 566\n//*      DSWTO    Subroutine to issue WTO (COBOL callable)          *   FILE 566\n//*                                                                 *   FILE 566\n//*      DSWTOMSG Subroutine to issue WTOR (COBOL callable)         *   FILE 566\n//*                                                                 *   FILE 566\n//*      --------------------------------------------------------   *   FILE 566\n//*                                                                 *   FILE 566\n//*      Most of the DUMP**** commands were fixed to give PUTLINE   *   FILE 566\n//*      output, so their output can be trapped and Browsed or      *   FILE 566\n//*      Edited or Viewed or REVIEWed.  The execs TSOB, TSOE,       *   FILE 566\n//*      TSOV and TSOR from Mark Zelden have been included here     *   FILE 566\n//*      for this purpose, or you may use the SYSOUTTRAP-ing tool   *   FILE 566\n//*      of your choice.                                            *   FILE 566\n//*                                                                 *   FILE 566\n//*      To assemble the modules fixed for PUTLINE, you must        *   FILE 566\n//*      include in SYSLIB, a library containing the EPUTL member,  *   FILE 566\n//*      the APUT member, and the modified PRTDUMP member.  To      *   FILE 566\n//*      assemble the old modules, you should rename the PRTDUMPT   *   FILE 566\n//*      member to PRTDUMP and assemble the old versions of the     *   FILE 566\n//*      source.                                                    *   FILE 566\n//*                                                                 *   FILE 566\n//*      Sample assembly and linkedit jobs for the fixed modules    *   FILE 566\n//*      have been included with $ in their names (obvious).        *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPASCB TSO command to dump ASCB                          *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPCSCB TSO command to dump CSCB                          *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPJCT  TSO command to dump JCT (os)                      *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPLWA  TSO command to dump LWA                           *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPPCCB TSO command to dump PCCB                          *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPPPT  TSO command to dump PPT entries to the console.   *   FILE 566\n//*                                       (not fixed for PUTLINE)   *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPPRB  TSO command to dump PRB (not fixed for PUTLINE)   *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPSCT  TSO command to dump SCT                           *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPTCT  TSO command to dump TCT                           *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPTIOT TSO command to dump TIOT                          *   FILE 566\n//*                                                                 *   FILE 566\n//*      DUMPTSB  TSO command to dump TSB                           *   FILE 566\n//*                                                                 *   FILE 566\n//*      --------------------------------------------------------   *   FILE 566\n//*                                                                 *   FILE 566\n//*      DYNAM    Subroutine for SVC 99, COBOL callable, now is     *   FILE 566\n//*               AMODE=31                                          *   FILE 566\n//*                                                                 *   FILE 566\n//*      DYNAMDOC DYNAM doc                                         *   FILE 566\n//*                                                                 *   FILE 566\n//*      FIXDSCB  Modifies, renames, scratch datasets that are      *   FILE 566\n//*               allocated (authorized SVC required).              *   FILE 566\n//*                                                                 *   FILE 566\n//*      FIXDSCB2 Modifies, renames, scratch datasets that are      *   FILE 566\n//*               allocated mvs 3.8 (must be APF authorized).       *   FILE 566\n//*                                                                 *   FILE 566\n//*      GENPARM  Takes PARM fields and writes to //PARM ddname     *   FILE 566\n//*               RECMF=FB,80                                       *   FILE 566\n//*                                                                 *   FILE 566\n//*      KMBAPFLB Adds dataset to APFlist (authorized SVC           *   FILE 566\n//*               required).                                        *   FILE 566\n//*                                                                 *   FILE 566\n//*      LNKLIST  TSO command to list lnklist datasets              *   FILE 566\n//*                                                                 *   FILE 566\n//*      LPALIST  TSO command to list lpalst  datasets              *   FILE 566\n//*               (Fixed to display LPA-defined copy of dataset     *   FILE 566\n//*               and compare to cataloged copy of the dataset.)    *   FILE 566\n//*                                                                 *   FILE 566\n//*      MVSAREAS MACRO for dump... members                         *   FILE 566\n//*                                                                 *   FILE 566\n//*      PRTDUMP  MACRO for dump... members                         *   FILE 566\n//*                                                                 *   FILE 566\n//*      SQAMON   Monitors CSA and SQA changes (req APF             *   FILE 566\n//*               authorized).                                      *   FILE 566\n//*                                                                 *   FILE 566\n//*      STPCOND  Sends wto to job submittor about step cond        *   FILE 566\n//*               codes, use as last step in job                    *   FILE 566\n//*                                                                 *   FILE 566\n//*      SWAREQ   Subroutine to convert SWA address to real         *   FILE 566\n//*               addresses                                         *   FILE 566\n//*                                                                 *   FILE 566\n//*      WAITTIME Waits PARM='nnn' seconds                          *   FILE 566\n//*                                                                 *   FILE 566\n//*      WLMREXX  Reads WLM PDS and build SAS code that will load   *   FILE 566\n//*               each ISPF table into a SAS database.  Now we need *   FILE 566\n//*               someone to write some SAS reports for it.         *   FILE 566\n//*                                                                 *   FILE 566\n//*  >>>   The WLMREXX now needs someone to write some              *   FILE 566\n//*  >>>   SAS reports to make WLM settings to easily be            *   FILE 566\n//*  >>>   understood.                                              *   FILE 566\n//*                                                                 *   FILE 566\n//*  >>>   (We're soliciting volunteers - if you write reports      *   FILE 566\n//*  >>>   for yourself, which use this material, please send       *   FILE 566\n//*  >>>   the source code to Sam Golob  sbgolob@cbttape.org ,      *   FILE 566\n//*  >>>   so I can add them to the contents of this file.          *   FILE 566\n//*  >>>   Thanks in advance for your help.....)                    *   FILE 566\n//*                                                                 *   FILE 566\n//*      ZAPDSCB  TSO full screen dataset attribute zapper          *   FILE 566\n//*               (authorized SVC eliminated. needs AUTHCMD         *   FILE 566\n//*               entry in IKJTSOxx parmlib table instead)          *   FILE 566\n//*                                                                 *   FILE 566\n//*      ZAPDSCB# TSO HELP member for ZAPDSCB. IT IS IMPORTANT      *   FILE 566\n//*               TO READ THIS....!!! (explanation of prefix)       *   FILE 566\n//*                                                                 *   FILE 566\n//*      ZAPDSCB2 TSO full screen dataset attribute zapper          *   FILE 566\n//*               ESA 4.3 and below (authorized SVC required).      *   FILE 566\n//*                                                                 *   FILE 566\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "APFLIST": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00A\\x01\\x02\\x10_\\x01\\x18\\x00?\\x15\\x07\\x02*\\x00\\xcf\\x00\\x00\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-04-15T00:00:00", "modifydate": "2018-01-03T15:07:41", "lines": 554, "newlines": 207, "modlines": 0, "user": "PUTLINE"}, "text": "*--------------------------------------------------------------------*\n*            TSO COMMAND TO LIST OUT THE APF LIBRARIES               *\n*                                                                    *\n*                 SUPPORTS DYNAMIC APF DEFINITIONS                   *\n*                                                                    *\n* ATTRIB:      AMODE31 RMODE24 RENT REUSE                            *\n*                                                                    *\n* WRITTEN BY:  K.M. (SAM) BASS (SBASS,SJB,KBASS,KMB)                 *\n*                                                                    *\n*              CONVERTED TO PUTLINE OUTPUT  (S.GOLOB - 03/21/2011)   *\n*                                                                    *\n* FLAGS:       'M'     MUST BE MISCATALOGED                          *\n*              '?'     DATASET MISSING                               *\n*--------------------------------------------------------------------*\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\nAPFLIST  AMODE 31\nAPFLIST  RMODE 24\nAPFLIST  CSECT\n         SAVE  (14,12),T,APFLIST_&SYSDATC._&SYSTIME.\n         LR    R12,R15\n         USING APFLIST,R12\n         L     R0,=A(WORKLEN)\n         GETMAIN RU,LV=(0),LOC=BELOW\n         ST    R1,8(,R13)          STORE OUR SAVE AREA\n         LR    R2,R1\n         LR    R3,R0               ZERO\n         SLR   R15,R15               AREA\n         MVCL  R2,R14              ...\n*\n         ST    R13,4(,R1)          SAVE THEIR'S IN OUR'S\n         LR    R13,R1\n         USING WORK,R13\n*\n         L     R3,X'10'\n         USING CVT,R3\n         L     R4,CVTAUTHL         @ OF APF TABLE\n         CL    R4,=X'7FFFF001'     IS IT DYNAMIC\n         BE    DYNAMIC              YES\n         CL    R4,=X'00000000'     IS IT DYNAMIC\n         BE    DYNAMIC              YES\nSTATIC   DS    0H\n         MVC   WTYPE,=CL7'STATIC'\n         LH    R5,0(,R4)           GET # OF ENTRIES\n         LA    R4,2(,R4)           PASSED PREFIX\n         LR    R1,R5\n         SPACE 2\n         BAL   R9,TITLES\n         SPACE 2\n*--------------------------------------------------------------------*\n*              STATIC APF LIBRARIES                                  *\n*--------------------------------------------------------------------*\nSTATIC10 DS    0H\n         SR    R2,R2\n         IC    R2,0(R4)            GET THIS LENGTH\n         ST    R2,WDSNLEN          LENGTH OF DSN\n*\n         MVC   WDSNAME,BLANKS      BLANK DSNAME\n         SH    R2,=H'7'            -1 -LENGTH(VOL)\n         BNP   EXIT\n         MVC   WDSNAME(0),7(R4)\n         EX    R2,*-6              MOVE IN DSNAME\n*\n         MVC   WDSNVOL,1(R4)       MOVE IN VOLSER\n         MVI   WDSNSMS,C' '\n*\n         BAL   R9,MSGRTN\n*\n         LA    R4,1(,R4)           PASSED AL1(ENTLEN)\n         AL    R4,WDSNLEN          PASSED TOTAL LENGTH\n         BCT   R5,STATIC10\n         B     EXIT\n*--------------------------------------------------------------------*\n*              DYNAMIC APF                                           *\n*--------------------------------------------------------------------*\nDYNAMIC  DS    0H\n         MVC   WTYPE,=CL7'DYNAMIC'\n         CSVAPF REQUEST=LIST,ANSAREA=WCSVWORK,ANSLEN==A(WCSVWRKL),     X\n               MF=(E,WCSVAPF)\n         LTR   R15,R15\n         BNZ   DYNERR\n         LA    R4,WCSVWORK\n         USING APFHDR,R4\n         L     R5,APFH#REC         # OF ENTRIES RETURNED\n         L     R6,APFHOFF          OFFSET TO FIRST APFE\n         DROP  R4\n         ALR   R4,R6               ADDRESS OF 1ST APFE\n         USING APFE,R4\n         SPACE 1\n         LR    R1,R5\n         BAL   R9,TITLES\n         SPACE 1\nDYN00100 DS    0H\n         MVC   WDSNVOL,APFEVOLUME\n         MVC   WDSNAME,APFEDSNAME\n         MVI   WDSNSMS,C' '        ASSUME NON-SMS\n         TM    APFEFLAGS,APFESMS   IS IT SMS\n         BZ    DYN00120             NO\n         MVI   WDSNSMS,C'Y'         YES, SET FLAG\nDYN00120 DS    0H\n         BAL   R9,MSGRTN\n         AH    R4,APFELEN          POINT AT NEXT ENTRY\n         BCT   R5,DYN00100\n         B     EXIT\n*--------------------------------------------------------------------*\n*              TITLE ROUTINE       BAL  R9,TITLES  R1=NUMBER         *\n*--------------------------------------------------------------------*\nTITLES   DS    0H\n         CVD   R1,WDEC\n         OI    WDEC+7,X'0F'\n         MVC   WMSG,TITLE1\n         MVC   WMSG+11(4),=X'40202021'\n         ED    WMSG+11(4),WDEC+6\n         MVC   WMSG+16(7),WTYPE\n         APUT  WMSG,L'WMSG\n         APUT  TITLE2,L'TITLE2\n         ZAP   WDSNUM,=P'1'\n         BR    R9\n*--------------------------------------------------------------------*\n*              MESSAGE ROUTINE     BAL   R9,MSGRTM                   *\n*--------------------------------------------------------------------*\nMSGRTN   DS    0H\n         MVC   WMSG,BLANKS\n         MVC   WMSG+$NUM(4),=X'40202120'\n         ED    WMSG+$NUM(4),WDSNUM\n         MVC   WMSG+$APFVOL(06),WDSNVOL\n         MVC   WMSG+$SMS(1),WDSNSMS\n         MVC   WMSG+$DSN(44),WDSNAME\n*--------------------------------------------------------------------*\n*              ISSUE LOCATE TO FIND VOLSER OF DATASET                *\n*--------------------------------------------------------------------*\n         MVI   WCAMWRK2,X'FF'\n         MVC   WCAMWRK2+1(255),WCAMWRK2\n         XC    WCAMLST,WCAMLST     ZERO WCAMLST\n         MVC   WCAMLST(4),=XL4'44000000' LOCATE PARMS\n         LA    R0,WDSNAME\n         ST    R0,WCAMLST+4        @ OF DATASET\n         LA    R0,WCAMWRK\n         ST    R0,WCAMLST+12       @ OF WCAMLST WORK AREA\n         SPACE 1\n         LA    R1,WCAMLST\nLOCATE   SVC   26                  LOCATE DATASET\n         MVC   WMSG+$CATVOL(6),WCAMWRK+6\n         SPACE 1\n         MVI   WMSG+$FLAG,C' '\n         CLC   WDSNVOL,WMSG+$CATVOL\n         BE    APF00160\n         MVI   WMSG+$FLAG,C'?'\n         TM    WMSG+$CATVOL,X'BF'  ZERO OR BLANK CATVOL\n         BE    APF00160\n         SPACE 1\n         CLC   =C'*SMS*',WDSNVOL   IS IT *SMS* TYPE\n         BNE   APF00140             NO\n         CLI   WDSNSMS,C'Y'        IS IT REALLY SMS MANAGED\n         BNE   APF00140             NO, THEN 'M'\n         MVI   WMSG+$FLAG,C' '      YES, BLANK FLAG\n         B     APF00160\nAPF00140 DS    0H\n         MVI   WMSG+$FLAG,C'M'     MUST BE MISCATALOGED\nAPF00160 DS    0H\n         SPACE 1\n         APUT  WMSG,L'WMSG\nAPF00180 DS    0H\n         AP    WDSNUM,=P'1'\n         BR    R9\n*--------------------------------------------------------------------*\n*              RETURNS                                               *\n*--------------------------------------------------------------------*\nDYNERR   DS    0H\nEXIT     DS    0H\n         LR    R1,R13\n         L     R13,4(,R13)\n         L     R0,=A(WORKLEN)\n         FREEMAIN RU,A=(1),LV=(0)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              D A T A   A R E A S                                   *\n*--------------------------------------------------------------------*\n$NUM     EQU   1\n$APFVOL  EQU   6,6\n$CATVOL  EQU   $APFVOL+7,6\n$FLAG    EQU   $CATVOL+7,1\n$SMS     EQU   $FLAG+3,1\n$DSN     EQU   $SMS+3,44\nTITLE1   DC    CL72'*** LIST OF XXX ....... APF LIBRARIES ***'\nTITLE2   DC    CL72'  ### APFVOL CATVOL F SMS DSNAME......'\nBLANKS   DC    CL72' '\n         LTORG ,\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DS    9D\nWDEC     DS    2D'0'\nWDSNUM   DS    PL2'0'\nWDSNLEN  DS    A(0)\nWDSNAME  DS    CL44' '\nWDSNVOL  DS    CL6' '\nWDSNSMS  DS    CL1' '\nWTYPE    DS    CL7' '\nWMSG     DS    CL72' '\n         DS    0D                  ALIGNMENT\nWCAMLST  DS    XL256'0',0D\nWCAMWRK  DS    XL256'00',0D\nWCAMWRK2 DS    XL256'00',0D        NEEDED FOR WCAMWRK OVERLAY\nWCSVAPFX CSVAPF MF=(L,WCSVAPF)\nWCSVWORK DS    (1000)CL60\nWCSVWRKL EQU   *-WCSVWORK\n         DS    0D\nWORKLEN  EQU   *-WORK\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\n         CVT   DSECT=YES,LIST=NO\n         CSVAPFAA ,\n         YREGS  ,\n         END   ,\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APFLIST0": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x01\\x00\\x05\\x9f\\x01\\x11\\x08/\\x10V\\x00\\xe5\\x00\\xc6\\x00\\x01\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-28T00:00:00", "modifydate": "2011-03-23T10:56:53", "lines": 229, "newlines": 198, "modlines": 1, "user": "TPUT"}, "text": "APFLIST  AMODE 31\nAPFLIST  RMODE 24\nAPFLIST  CSECT\n*--------------------------------------------------------------------*\n*              LIST OUT THE APF LIBRARIES                            *\n*              SUPPORTS DYNAMIC APF DEFINITIONS                      *\n*                                                                    *\n* ATTRIB:      AMODE31 RMODE24 REENTRANT                             *\n*                                                                    *\n* WRITTEN BY:  SAM BASS                                              *\n*                                                                    *\n* FLAGS:       'M'     MUST BE MISCATALOGED                          *\n*              '?'     DATASET MISSING                               *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SAVE  (14,12),T,APFLIST_&SYSDATC._&SYSTIME.\n         LR    R12,R15\n         USING APFLIST,R12\n         L     R0,=A(WORKLEN)\n         GETMAIN RU,LV=(0),LOC=BELOW\n         ST    R1,8(,R13)          STORE OUR SAVE AREA\n         LR    R2,R1\n         LR    R3,R0               ZERO\n         SLR   R15,R15               AREA\n         MVCL  R2,R14              ...\n*\n         ST    R13,4(,R1)          SAVE THEIR'S IN OUR'S\n         LR    R13,R1\n         USING WORK,R13\n*\n         L     R3,X'10'\n         USING CVT,R3\n         L     R4,CVTAUTHL         @ OF APF TABLE\n         CL    R4,=X'7FFFF001'     IS IT DYNAMIC\n         BE    DYNAMIC              YES\n         CL    R4,=X'00000000'     IS IT DYNAMIC\n         BE    DYNAMIC              YES\nSTATIC   DS    0H\n         MVC   WTYPE,=CL7'STATIC'\n         LH    R5,0(,R4)           GET # OF ENTRIES\n         LA    R4,2(,R4)           PASSED PREFIX\n         LR    R1,R5\n         SPACE 2\n         BAL   R9,TITLES\n         SPACE 2\n*--------------------------------------------------------------------*\n*              STATIC APF LIBRARIES                                  *\n*--------------------------------------------------------------------*\nSTATIC10 DS    0H\n         SR    R2,R2\n         IC    R2,0(R4)            GET THIS LENGTH\n         ST    R2,WDSNLEN          LENGTH OF DSN\n*\n         MVC   WDSNAME,BLANKS      BLANK DSNAME\n         SH    R2,=H'7'            -1 -LENGTH(VOL)\n         BNP   EXIT\n         MVC   WDSNAME(0),7(R4)\n         EX    R2,*-6              MOVE IN DSNAME\n*\n         MVC   WDSNVOL,1(R4)       MOVE IN VOLSER\n         MVI   WDSNSMS,C' '\n*\n         BAL   R9,MSGRTN\n*\n         LA    R4,1(,R4)           PASSED AL1(ENTLEN)\n         AL    R4,WDSNLEN          PASSED TOTAL LENGTH\n         BCT   R5,STATIC10\n         B     EXIT\n*--------------------------------------------------------------------*\n*              DYNAMIC APF                                           *\n*--------------------------------------------------------------------*\nDYNAMIC  DS    0H\n         MVC   WTYPE,=CL7'DYNAMIC'\n         CSVAPF REQUEST=LIST,ANSAREA=WCSVWORK,ANSLEN==A(WCSVWRKL),     X\n               MF=(E,WCSVAPF)\n         LTR   R15,R15\n         BNZ   DYNERR\n         LA    R4,WCSVWORK\n         USING APFHDR,R4\n         L     R5,APFH#REC         # OF ENTRIES RETURNED\n         L     R6,APFHOFF          OFFSET TO FIRST APFE\n         DROP  R4\n         ALR   R4,R6               ADDRESS OF 1ST APFE\n         USING APFE,R4\n         SPACE 1\n         LR    R1,R5\n         BAL   R9,TITLES\n         SPACE 1\nDYN00100 DS    0H\n         MVC   WDSNVOL,APFEVOLUME\n         MVC   WDSNAME,APFEDSNAME\n         MVI   WDSNSMS,C' '        ASSUME NON-SMS\n         TM    APFEFLAGS,APFESMS   IS IT SMS\n         BZ    DYN00120             NO\n         MVI   WDSNSMS,C'Y'         YES, SET FLAG\nDYN00120 DS    0H\n         BAL   R9,MSGRTN\n         AH    R4,APFELEN          POINT AT NEXT ENTRY\n         BCT   R5,DYN00100\n         B     EXIT\n*--------------------------------------------------------------------*\n*              TITLE ROUTINE       BAL  R9,TITLES  R1=NUMBER         *\n*--------------------------------------------------------------------*\nTITLES   DS    0H\n         CVD   R1,WDEC\n         OI    WDEC+7,X'0F'\n         MVC   WMSG,TITLE1\n         MVC   WMSG+11(4),=X'40202021'\n         ED    WMSG+11(4),WDEC+6\n         MVC   WMSG+16(7),WTYPE\n*\n         LA    R0,L'WMSG           *** LIST OF 268 DYNAMIC APF LIBRARI\n         LA    R1,WMSG\n         BAL   R10,PUTMSG\n*\n         LA    R0,L'TITLE2         ### APFVOL CATVOL F SMS DSNAME\n         LA    R1,TITLE2\n         BAL   R10,PUTMSG\n*\n         ZAP   WDSNUM,=P'1'\n         BR    R9\n*--------------------------------------------------------------------*\n*              MESSAGE ROUTINE     BAL   R9,MSGRTM                   *\n*--------------------------------------------------------------------*\nMSGRTN   DS    0H\n         MVC   WMSG,BLANKS\n         MVC   WMSG+$NUM(4),=X'40202120'\n         ED    WMSG+$NUM(4),WDSNUM\n         MVC   WMSG+$APFVOL(06),WDSNVOL\n         MVC   WMSG+$SMS(1),WDSNSMS\n         MVC   WMSG+$DSN(44),WDSNAME\n*--------------------------------------------------------------------*\n*              ISSUE LOCATE TO FIND VOLSER OF DATASET                *\n*--------------------------------------------------------------------*\n         MVI   WCAMWRK2,X'FF'\n         MVC   WCAMWRK2+1(255),WCAMWRK2\n         XC    WCAMLST,WCAMLST     ZERO WCAMLST\n         MVC   WCAMLST(4),=XL4'44000000' LOCATE PARMS\n         LA    R0,WDSNAME\n         ST    R0,WCAMLST+4        @ OF DATASET\n         LA    R0,WCAMWRK\n         ST    R0,WCAMLST+12       @ OF WCAMLST WORK AREA\n         SPACE 1\n         LA    R1,WCAMLST\nLOCATE   SVC   26                  LOCATE DATASET\n         MVC   WMSG+$CATVOL(6),WCAMWRK+6\n         SPACE 1\n         MVI   WMSG+$FLAG,C' '\n         CLC   WDSNVOL,WMSG+$CATVOL\n         BE    APF00160\n         MVI   WMSG+$FLAG,C'?'\n         TM    WMSG+$CATVOL,X'BF'  ZERO OR BLANK CATVOL\n         BE    APF00160\n         SPACE 1\n         CLC   =C'*SMS*',WDSNVOL   IS IT *SMS* TYPE\n         BNE   APF00140             NO\n         CLI   WDSNSMS,C'Y'        IS IT REALLY SMS MANAGED\n         BNE   APF00140             NO, THEN 'M'\n         MVI   WMSG+$FLAG,C' '      YES, BLANK FLAG\n         B     APF00160\nAPF00140 DS    0H\n         MVI   WMSG+$FLAG,C'M'     MUST BE MISCATALOGED\nAPF00160 DS    0H\n         SPACE 1\n         LA    R0,L'WMSG\n         LA    R1,WMSG\n         BAL   R10,PUTMSG\nAPF00180 DS    0H\n         AP    WDSNUM,=P'1'\n         BR    R9\n*--------------------------------------------------------------------*\n*              PUTMSG              BAL   R10,PUTMSG                  *\n*--------------------------------------------------------------------*\nPUTMSG   DS    0H\n         TPUT  (1),(0),R\n         MVC   WMSG,BLANKS\n         BR    R10\n*--------------------------------------------------------------------*\n*              RETURNS                                               *\n*--------------------------------------------------------------------*\nDYNERR   DS    0H\nEXIT     DS    0H\n         LR    R1,R13\n         L     R13,4(,R13)\n         L     R0,=A(WORKLEN)\n         FREEMAIN RU,A=(1),LV=(0)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              D A T A   A R E A S                                   *\n*--------------------------------------------------------------------*\n$NUM     EQU   1\n$APFVOL  EQU   6,6\n$CATVOL  EQU   $APFVOL+7,6\n$FLAG    EQU   $CATVOL+7,1\n$SMS     EQU   $FLAG+3,1\n$DSN     EQU   $SMS+3,44\nTITLE1   DC    CL72'*** LIST OF XXX ....... APF LIBRARIES ***'\nTITLE2   DC    CL72'  ### APFVOL CATVOL F SMS DSNAME......'\nBLANKS   DC    CL72' '\n         LTORG ,\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DS    9D\nWDEC     DS    2D'0'\nWDSNUM   DS    PL2'0'\nWDSNLEN  DS    A(0)\nWDSNAME  DS    CL44' '\nWDSNVOL  DS    CL6' '\nWDSNSMS  DS    CL1' '\nWTYPE    DS    CL7' '\nWMSG     DS    CL72' '\n         DS    0D                  ALIGNMENT\nWCAMLST  DS    XL256'0',0D\nWCAMWRK  DS    XL256'00',0D\nWCAMWRK2 DS    XL256'00',0D        NEEDED FOR WCAMWRK OVERLAY\nWCSVAPFX CSVAPF MF=(L,WCSVAPF)\nWCSVWORK DS    (1000)CL60\nWCSVWRKL EQU   *-WCSVWORK\n         DS    0D\nWORKLEN  EQU   *-WORK\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\n         CVT   DSECT=YES,LIST=NO\n         CSVAPFAA ,\n         YREGS  ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APUT": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01\\x17\\x08\\x1f\\x01\\x17\\x08\\x1f\\x147\\x00\\x8c\\x00\\x8c\\x00\\x00\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-03-22T00:00:00", "modifydate": "2017-03-22T14:37:15", "lines": 140, "newlines": 140, "modlines": 0, "user": "PUTLINE"}, "text": "* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLISTS": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t8\\x02[\\x02[\\x00\\x00\\xd3\\xc9\\xc2\\xd9\\xc1\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:38:00", "lines": 603, "newlines": 603, "modlines": 0, "user": "LIBRARY"}, "text": "./ ADD NAME=GREGJULN 0103-10091-11081-1339-00020-00024-00020-KBASS\nPROC 1 DATEGREG DEBUG LIST\nGLOBAL JULIAN\n /*-------------------------------------------------------------*/\n /* CONVERT GREGORIAN DATE TO JULIAN                            */\n /*         MM/DD/YY          11.035                            */\n /*-------------------------------------------------------------*/\nIF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST PROMPT MSG\nIF &LIST  = LIST  THEN CONTROL LIST\nSET &MO = &SUBSTR(1:2,&NRSTR(&DATEGREG))\nSET &DY = &SUBSTR(4:5,&NRSTR(&DATEGREG))\nSET &YR = &SUBSTR(7:8,&NRSTR(&DATEGREG))\nSET &OFFSET = &SUBSTR((&MO-1)*3+1:(&MO-1)*3+3,+\n    &STR(000031059090120151181212243273304334))\nIF &YR//4 = 0 && &MO > 2 THEN +\n    SET &OFFSET = &OFFSET + 1\nSET &DAY = &OFFSET + &DY\nIF &DAY < 100 THEN SET &DAY = &NRSTR(0&DAY)\nIF &DAY < 10  THEN SET &DAY = &NRSTR(0&DAY)\nSET &JULIAN = &YR..&DAY\nWRITE &DATEGREG = &JULIAN\n./ ADD NAME=HSML     0105-09044-11081-1317-00018-00105-00017-KBASS\n /*-- Rexx -----------------------------------------------------*/\n /*  This issues HSEND LIST with parameter                      */\n /*  After ARC0140I displayed press enter, it will browse output*/\n /*-------------------------------------------------------------*/\n   parse upper arg cmd\n   job = MVSVAR('SYMDEF',JOBNAME );\n   TEMPDSN=\"'\"USERID()\".TEMP.\"job\".hsmlist'\";\n     XMSG=MSG(\"OFF\");\n     \"DELETE \"TEMPDSN;\n     XMSG=MSG(XMSG);\n   \"hsend list \" cmd \"ods(\"TEMPDSN\")\";\n   say \"press enter after ARC0140I LIST COMPLETED\";\n   pull;\n   if sysdsn(TEMPDSN) = \"OK\" then ,\n     \"ISPEXEC view   DATASET(\"TEMPDSN\")\";\n    XMSG=MSG(\"OFF\");\n    \"DELETE \"TEMPDSN;\n    XMSG=MSG(XMSG);\n./ ADD NAME=HSMQ     0105-07044-11081-1318-00108-00097-00018-KBASS\n /*-- Rexx -----------------------------------------------------*/\n /*  This issues HSEND Query with parameter                     */\n /*  The output will appear in browse                           */\n /*-------------------------------------------------------------*/\n   parse upper arg cmd\n      hsmid = 'HSM'\n      mdisp=sysvar(soldisp)\n      cname=sysvar('SYSUID')||1;\n      \"consprof soldisplay(no)\"\n      \"console activate name(\"cname\")\";\n      address console  \"CART HSM \";\n\n      j = 0\n      n = 0\n      msghsm = 0\n\n      address console \"F \"hsmid\",Q \" cmd\n      do while msghsm = 0                        /* 11 */\n         msghsm = getmsg('resp.','SOL','HSM',,05)\n         if msghsm = 0 then do                   /* 10 */\n             n = n+1\n             do i = 1 to resp.0                 /* 9 */\n                k = i+j\n                wto.k = resp.i\n             end                                /* 9 */\n           j = j+resp.0\n       end                                     /* 10 */\n\n     end                                        /* 11 */\n\n     \"console deactivate\"\n     \"consprof soldisplay(\"mdisp\")\"\n     count=j\n     newl. = \"\";\n     j=0;\n /*-------------------------------------------------------------*/\n /*  reformat line(s) to remove the (CONT.) to make a long line */\n /*-------------------------------------------------------------*/\n\n     do i = 1 to count;\n       a1 = word(wto.i,1);\n       a2 = word(wto.i,2);\n       if a1 = 'ARC0101I' then iterate;\n       i1 = index(wto.i,'(CONT.)');\n       if i1 > 0  then do;\n        newl.j = newl.j||substr(wto.i,i1+7)||\" \";\n       end;\n       else do;\n        j=j+1;\n        newl.j = wto.i;\n       end;\n     end;\n     newl.0 = j;\n\n /*-------------------------------------------------------------*/\n /*  reformat to make multiple lines, one task per line         */\n /*-------------------------------------------------------------*/\n     newll. =\"\"\n     j=0;\n     do i = 1 to newl.0\n       if word(newl.i,1) = 'ARC0161I'  |,\n          word(newl.i,1) = 'ARC0162I'  then do;\n         j=j+1;\n         newll.j = strip(newl.i,\"B\");\n         iterate;\n       end;\n       i1=1;\n /*-------------------------------------------------------------*/\n /*   look for the ',' and make a new line                      */\n /*-------------------------------------------------------------*/\n       x=newl.i;\n       do while i1 > 0;\n         x = strip(x,\"B\");\n         i1 = index(x,',');\n         if i1 > 0 then do;\n           j=j+1;\n           if substr(word(x,1),1,3) = 'ARC' then indent=\"\";\n           else                                  indent=\"         \";\n           y = substr(x,1,i1-1);\n           i3 = 0;\n           if index(y,\"(\") > 0 then do;\n             i3 = index(x,\")\");\n             i1 = i3+1;\n           end;\n           newll.j = indent||substr(x,1,i1-1);\n           x = substr(x,i1+1);\n         end;\n       end; /* do while */\n       if strip(x,\"B\") \u00ac= \"\" then do;\n         j=j+1;\n         if substr(word(x,1),1,3) = 'ARC' then indent=\"\";\n         else                                  indent=\"         \";\n         newll.j = indent||x;\n       end;\n     end; /* do loop */\n     newll.0 = j;\n /*  do i = 1 to newll.0        */\n /*    say newll.i;             */\n /*  end                        */\n     TEMPDSN=\"'\"||SYSVAR(SYSUID)||\".TEMP.HSMQ'\";\n     XMSG=MSG(\"OFF\");\n     \"DEL \"TEMPDSN;\n     XMSG=MSG(XMSG);\n     \"ALLOC F(NEWL) DA(\"TEMPDSN\") NE SPACE(10 10) TRACKS RECFM(F B)\",\n       \"LRECL(120) reuse\" ;\n     \"EXECIO * DISKW NEWL (STEM NEWLL. FINIS)\";\n     \"ISPEXEC view   DATASET(\"TEMPDSN\")\";\n     \"FREE DA(\"TEMPDSN\")\";\n./ ADD NAME=JULNGREG 0101-01310-11081-1340-00035-00031-00004-KBASS\nPROC 1 DATEJULN DEBUG LIST\nGLOBAL GREG\n /*-------------------------------------------------------------*/\n /* CONVERT JULIAN DATE TO GREGORIAN                            */\n /*         11.035         MM/DD/YY                             */\n /*-------------------------------------------------------------*/\nIF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST PROMPT MSG\nIF &LIST  = LIST  THEN CONTROL LIST\n  SET &STRDAY=&STR(000031059090120151181212243273304334365)\n  SET &STRMON=&STR(   JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC)\n  SET &I = 0\n  SET &OFFSET = 0\n  SET &YR = &EVAL(&SUBSTR(1:2,&NRSTR(&DATEJULN)))\n  IF &SUBSTR(3:3,&NRSTR(&DATEJULN)) = &NRSTR(.) THEN +\n    SET &DY = &EVAL(&SUBSTR(4:6,&NRSTR(&DATEJULN)))\n  ELSE +\n    SET &DY = &EVAL(&SUBSTR(3:5,&NRSTR(&DATEJULN)))\n  IF &YR//4 = 0 && &DY >= 60 THEN +\n    SET &OFFSET = 1\n  IF &DY > &EVAL(&SUBSTR(12*3+1:12*3+3,&STRDAY))+&OFFSET THEN DO\n    WRITE *** DAY(&DY) IS TOO LARGE ***\n    EXIT CODE(12)\n  END\n LOOP: +\n  SET &I = &I+1\n  SET &J = &I*3+1\n  SET &LDAY = &EVAL(&SUBSTR(&J:&J+2,&STRDAY))+&OFFSET\n  IF &LDAY < &DY THEN GOTO LOOP\n  SET &MO = &SUBSTR(&J:&J+2,&STRMON)\n  IF &LDAY <= 60 THEN SET &OFFSET = 0\n  SET &DAY = &DY-&EVAL(&SUBSTR(&J-3:&J-1,&STRDAY))-&OFFSET\n  IF &DAY < 10 THEN SET &DAY = &NRSTR(0&DAY)\n  IF &YR < 10 THEN SET &YR  = &NRSTR(0&YR)\n  SET &GREG = &MO&STR(/)&DAY&STR(/)&YR\n  WRITE &DATEJULN = &GREG\n./ ADD NAME=LOCK     0100-11081-11081-1341-00012-00012-00000-KBASS\nCONTROL MAIN NOFLUSH\n /*-------------------------------------------------------------*/\n /* LOCK YOUR TERMINAL UP WITH PASSWORD                         */\n /*-------------------------------------------------------------*/\nATTN GOTO RD\nWRITENR ENTER PASSWORD ?\nREAD PSWD\nRD: +\nWRITE READY\nREAD VAR\nIF &VAR = &PSWD THEN EXIT\nGOTO RD\n./ ADD NAME=MASSREN  0103-00126-11081-1343-00086-00088-00006-KBASS\nPROC 2 FROMQUAL TOQUAL CAT(0) NOPROMPT NOHLQ REUSE REN DEBUG LIST\nCONTROL MAIN NOFLUSH,MSG\nGLOBAL CATNAME\n /*-------------------------------------------------------------*/\n /* THIS WILL MASS RENAME A HLQ (1 OR MORE LEVELS) TO ANOTHER   */\n /* HLQ                                                         */\n /*-------------------------------------------------------------*/\nIF &DEBUG = DEBUG THEN CONTROL LIST SYMLIST CONLIST PROMPT MSG\nIF &LIST  = LIST  THEN CONTROL LIST\n  IF &SUBSTR(1:1,&FROMQUAL) = &NRSTR(') THEN DO\n    SET &L = &LENGTH(&STR(&FROMQUAL)\n    SET &FROMQUAL = &SUBSTR(2:&L-1,&STR(&FROMQUAL))\n  END\n  SET &CCAT =\n  IF &CAT \u00ac= 0 THEN DO\n    %CATCNVT &CAT\n    SET &CCAT = CAT('&CATNAME')\n  END\n  IF &NOPROMPT \u00ac= NOPROMPT THEN DO\nASK: +\n    WRITE ==>> ARE YOU SURE YOU WANT TO RENAME ALL DATASETS UNDER\n    WRITENR ==>> &FROMQUAL USERID TO &TOQUAL Y/N?\n    READ &ANS\n    IF &ANS = N THEN +\n      EXIT CODE(16)\n    IF &ANS \u00ac= Y THEN +\n      GOTO ASK\n    PROF NOMSG\n  END\n      ALLOC F(LISTCAT) NEW REUSE  SP(20 20) TRACK UNIT(SYSDA) -\n                 RECFM(V B A) LRECL(125) BLKSIZE(6129)\n    PROF   MSG\n  IF &REUSE = REUSE THEN GOTO XREU\n  CONTROL MAIN NOFLUSH\n/*LISTCAT ENT('&FROMQUAL.') OUTFILE(LISTCAT) &CCAT\n  LISTCAT LEVEL(&FROMQUAL.) OUTFILE(LISTCAT) &CCAT\nXREU: +\n  OPENFILE LISTCAT\n  CONTROL LIST MAIN NOFLUSH\n  SET &HILVL = 1\n  IF &NOHLQ \u00ac= &STR(HLQ) THEN DO\n    IF &SYSINDEX(.,&STR(&FROMQUAL)) \u00ac= 0 THEN DO\n      ALTER &STR(')&FROMQUAL&STR(') +\n        NEWNAME(&STR(')&TOQUAL&STR(')) &CCAT\n      WRITE   ==>> RENAME RC=&LASTCC\n      SET &HILVL = 0\n      CONTROL NOLIST\n    END\n  END\n  ERROR GOTO EXITS\n  ATTN  GOTO EXITS\n  CONTROL FLUSH\nLOOP: +\n  GETFILE LISTCAT\n  SET &LEN = &LENGTH(&NRSTR(&LISTCAT))\n  IF &LEN < 20 THEN +\n    GOTO LOOP\n  IF &SUBSTR(2:8,&NRSTR(&LISTCAT)) \u00ac= &STR(NONVSAM) AND +\n     &SUBSTR(2:8,&NRSTR(&LISTCAT)) \u00ac= &STR(CLUSTER) AND +\n     &SUBSTR(2:8,&NRSTR(&LISTCAT)) \u00ac= &STR(PATH --) AND +\n     &SUBSTR(2:8,&NRSTR(&LISTCAT)) \u00ac= &STR(AIX ---) AND +\n     &SUBSTR(2:8,&NRSTR(&LISTCAT)) \u00ac= &STR(DATA --) AND +\n     &SUBSTR(2:8,&NRSTR(&LISTCAT)) \u00ac= &STR(INDEX -) THEN +\n    GOTO LOOP\n  SET &SYSDVAL = &SUBSTR(18:&LEN,&NRSTR(&LISTCAT))\n  READDVAL OLDDSN\n  SET &DLEN = &LENGTH(&NRSTR(&OLDDSN))\n  SET &OLDULEN = &LENGTH(&FROMQUAL)\n  SET &NEWULEN = &LENGTH(&TOQUAL)\n  SET &NEWDSN = &TOQUAL.&SUBSTR(&OLDULEN+1:&DLEN,&NRSTR(&OLDDSN))\n  CONTROL LIST\n  IF &REN = REN THEN +\n    RENAME &STR(')&OLDDSN&STR(') +\n      &STR(')&NEWDSN&STR(')\n  ELSE +\n    ALTER &STR(')&OLDDSN&STR(') +\n      NEWNAME(&STR(')&NEWDSN&STR(')) &CCAT\n\n  WRITE   ==>> RENAME RC=&LASTCC\n  CONTROL NOLIST\n  GOTO LOOP\nEXITS: +\n  ERROR OFF\n  CLOSFILE LISTCAT\n  PROF NOMSG\n  FREE F(LISTCAT) ATTR(VBA)\n./ ADD NAME=WLMREXX  0103-02275-11081-1344-00317-00024-00014-KBASS\n /* REXX */\n /********************************************************************/\n /********************************************************************/\n /*                                                                  */\n /* REXX EXEC:  WLMREXX                                              */\n /*                                                                  */\n /********************************************************************/\n /*                                                                  */\n /* AUTHOR: K.M. (SAM) BASS                                          */\n /*          SAM@KMBASS.COM                                          */\n /*                                                                  */\n /********************************************************************/\n /*  PURPOSE:                                                        */\n /*  REXX EXEC TO READ THE WLM ISPF TABLE PDS AND EXTRACT THE        */\n /*  NAMES OF THE TABLES, THE KEYS AND VARIABLE NAMES AND            */\n /*  GENERATE SAS CODE TO LOAD THE WLM INTO A SAS DATABASE           */\n /********************************************************************/\n /*                                                                  */\n /*   K.M. (SAM) BASS     PROVIDES THIS PROGRAM \"AS IS\" WITHOUT      */\n /*   WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,  */\n /*   BUT NOT LIMITED TO, THE DOCUMENTATION, THE FUNCTIONS, THE      */\n /*   TECHNICAL ACCURACY OR PERFORMANCE OF THE PROGRAM.              */\n /*                                                                  */\n /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/\n /*--->                   AT YOUR OWN RISKS.                     <---*/\n /*                                                                  */\n /*   ALL USERS ARE EXPECTED TO INSPECT, EVALUATE AND MAKE FINAL     */\n /*   DECISION CAREFULLY AS TO THE USEFULNESS OF THIS PROGRAM IN     */\n /*   HIS/HER OWN INSTALLATION.                                      */\n /*                                                                  */\n /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/\n /*--->                   AT YOUR OWN RISKS.                     <---*/\n /*                                                                  */\n /*   ACCEPTANCE AND USE OF THIS PROGRAM AUTOMATICALLY RELEASES      */\n /*   K.M. (SAM) BASS     FROM LIABILITY FOR ANY PROBLEMS CAUSED     */\n /*   BY THE USE OF THIS PROGRAM.                                    */\n /*                                                                  */\n /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/\n /*--->                   AT YOUR OWN RISKS.                     <---*/\n /*                                                                  */\n /*                                                                  */\n /********************************************************************/\n MAINLINE:\n /*-------------------------------------------------------------*/\n /*  JCL TO BUILD THE SAS TABLES IS AS FOLLOWS                  */\n /* //SASJOB   JOB 1,WLMREXX,NOTIFY=&SYSUID,REGION=4M,          */\n /* //         CLASS=X,MSGCLASS=X,MSGLEVEL=(1,1)                */\n /* //*------- ----------------------------------------------*/ */\n /* //DELETE   EXEC PGM=IDCAMS                                  */\n /* //SYSPRINT DD  SYSOUT=*                                     */\n /* //SYSIN    DD  *                                            */\n /*  DELETE    YOUR.MXG.WLM                                     */\n /*  SET       MAXCC=0                                          */\n /* //*------- ----------------------------------------------*/ */\n /* //S1       EXEC SAS                                         */\n /* //PDB      DD  DISP=(NEW,CATLG),DSN=YOUR.MXG.WLM,           */\n /* //          SPACE=(CYL,(1,1)),UNIT=(SYSDA,1)                */\n /* //SYSIN    DD DISP=SHR,DSN=KBASS.PERM.SAS(WLMDATA)          */\n /*-------------------------------------------------------------*/\n /*-------------------------------------------------------------*/\n /*  WLMDEF IS THE INPUT PDS CONTAINING THE WLM DEFINITIONS     */\n /*  SASOUT IS THE OUTPUT FILE THAT WILL CONTAIN THE GENERATED  */\n /*         SAS CODE                                            */\n /*-------------------------------------------------------------*/\n WLMDEF=\"'SYS1.WLMDEF'\";\n SASOUT=\"'KBASS.PERM.SAS(WLMDATA)'\";\n \"ISPEXEC CONTROL ERRORS RETURN\"\n     CALL INITIAL;\n     CALL READMBRS;\n     CALL TBQUERY;\n     CALL GETROWS;\n     CALL CLEANUP;\n     EXIT\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* INITIAL                                                     */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nINITIAL:\nRETURN;\n\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* READ MEMBERS                                                */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nREADMBRS:\n \"ALLOC F(WLMDEF) DA(\"WLMDEF\") SHR REUSE\";\n IF RC > 0 THEN DO;\n   SAY \"WLMDEF ALLOCATION ERROR = \"RC;\n   EXIT CODE(12);\n END;\n \"ISPEXEC LMINIT DATAID(IDWLM) DDNAME(WLMDEF) ENQ(SHR)\"\n IF RC > 0 THEN DO;\n   SAY \"WLMDEF LMINIT     ERROR = \"RC;\n   EXIT CODE(12);\n END;\n \"ISPEXEC LMOPEN DATAID(\"IDWLM\") OPTION(INPUT)\"\n IF RC > 0 THEN DO;\n   SAY \"WLMDEF LMOPEN     ERROR = \"RC;\n   EXIT CODE(12);\n END;\n /*-------------------------------------------------------------*/\n /* READ THROUGH THE WLM PDS AND GET THE MEMBERS NAMES AND      */\n /* STORE THEM IN MBRS.IMBR                                     */\n /*-------------------------------------------------------------*/\n MEMBER=\"\";\n \"ISPEXEC LMMLIST DATAID(\"IDWLM\") OPTION(LIST) MEMBER(MEMBER)\"\n LRC=RC;\n IMBR=0;\n DO UNTIL(LRC>0);\n   IMBR=IMBR+1;\n   MBR.IMBR=MEMBER;\n   \"ISPEXEC LMMLIST DATAID(\"IDWLM\") OPTION(LIST) MEMBER(MEMBER)\"\n   LRC=RC;\n END;\n MBR.0=IMBR;\n \"ISPEXEC LMCLOSE DATAID(\"IDWLM\")\"\n \"ISPEXEC LMMLIST DATAID(\"IDWLM\") OPTION(FREE)\"\n \"ISPEXEC LMFREE DATAID(\"IDWLM\")\"\n \"FREE F(WLMDEF)\";\nRETURN;\n\n\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* TBDISPLAY                                                   */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nTBQUERY:\n \"ISPEXEC LIBDEF WLMDEF DATASET  ID(\"WLMDEF\")\"\n /*-------------------------------------------------------------*/\n /* GO THROUGH EACH OF THE TABLE NAMES GENERATED BY 'READMBRS'  */\n /* AND DO A TBQUERY TO GET THE 'KEY NAMES' AND THE COUNT ',    */\n /* 'VARIABLE NAMES' AND THE COUNT, AND A COUNT OF THE ROWS     */\n /*-------------------------------------------------------------*/\n DO IMBR = 1 TO MBR.0;\n   \"ISPEXEC TBOPEN \"MBR.IMBR\" NOWRITE LIBRARY(WLMDEF)\"\n   \"ISPEXEC TBQUERY \"MBR.IMBR\" KEYS(KEYS) NAMES(NAMES) \",\n            \"ROWNUM(NUMROWS) KEYNUM(NUMKEYS) NAMENUM(NUMNAMES)\";\n /*SAY MBR.IMBR NUMROWS NUMKEYS NUMNAMES KEYS;    */\n /*SAY \"       \" NAMES;                           */\n   KEYS.IMBR=KEYS;\n   NAMES.IMBR=NAMES;\n   NUMROWS.IMBR=NUMROWS;\n   NUMKEYS.IMBR=NUMKEYS;\n   NUMNAMES.IMBR=NUMNAMES;\n   \"ISPEXEC TBCLOSE \"MBR.IMBR\"      LIBRARY(WLMDEF)\"\n END;\nRETURN;\n\n\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* GETROWS                                                     */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nGETROWS:\n /*-------------------------------------------------------------*/\n /* THIS GENERATES TWO STEM VARIABLES                           */\n /* FMT.* IS THE SAS CODE TO INITIALIZE THE SAS TABLES          */\n /* SAS.* IS THE SAS CODE TO PUT DATA IN THE SAS TABLES         */\n /* II IS THE COUNTER FOR SAS.*                                 */\n /* JJ IS THE COUNTER FOR FMT.*                                 */\n /*-------------------------------------------------------------*/\n \"ISPEXEC LIBDEF WLMDEF DATASET  ID(\"WLMDEF\")\"\n   II=0;\n   JJ=0;\n   II=II+1; SAS.II=\"OPTIONS USER=PDB;\";\n   JJ=JJ+1; FMT.JJ=\"OPTIONS USER=PDB;\";\n DO IMBR = 1 TO MBR.0;\n   SAY \"PROCESSING TABLE \" MBR.IMBR;\n   \"ISPEXEC TBOPEN \"MBR.IMBR\" NOWRITE LIBRARY(WLMDEF)\"\n   \"ISPEXEC TBTOP \"MBR.IMBR;\n   SAY \"TABLE \"MBR.IMBR\" KEYS \" KEYS.IMBR; /**/\n   SAY \"TABLE \"MBR.IMBR\" NAMES \" NAMES.IMBR; /**/\n /*-------------------------------------------------------------*/\n /* KEYS.IMBR HAS A LIST OF VARIABLE GOTTEN FROM TBQUERY IN THE */\n /* FORM  ' (KEY1 KEY2 KEY3 ... KEYN)'                          */\n /*-------------------------------------------------------------*/\n /* LETS STRIP OFF THE ( ) AND THEN                             */\n /* PARSE EACH VARIABLE NAME INTO ZK.J                          */\n /* I KNOW, I COULD HAVE USED WORDS() AND WORD() FUNCTION...    */\n /*-------------------------------------------------------------*/\n   PARSE UPPER VAR KEYS.IMBR \"(\" XKEYS \")\";\n   XXKEYS=XKEYS;\n   DO J = 1 TO NUMKEYS.IMBR;\n     PARSE UPPER VAR XKEYS ZK.J XKEYS;\n   END;\n /*-------------------------------------------------------------*/\n /* NAMES.IMBR HAS A LIST OF VARIABLE GOTTEN FROM TBQUERY IN THE*/\n /* FORM  ' (VAR1 VAR2 VAR3 ... VARN)'                          */\n /*-------------------------------------------------------------*/\n /* LETS STRIP OFF THE ( ) AND THEN                             */\n /* PARSE EACH VARIABLE NAME INTO ZN.J                          */\n /*-------------------------------------------------------------*/\n   PARSE UPPER VAR NAMES.IMBR \"(\" XNAMES \")\";\n   XXNAMES=XNAMES;\n   XXVARS = XXKEYS||' '||XXNAMES;\n   DO J = 1 TO NUMNAMES.IMBR;\n     PARSE UPPER VAR XNAMES ZN.J XNAMES;\n   END;\n /*-------------------------------------------------------------*/\n /* GENERATE DATA MBR.IMBR (KEEP= ....); FOR SAS DATA STEP      */\n /* GENERATE DATA MBR.IMBR (KEEP= ....); FOR THE FMT DATA STEP  */\n /*-------------------------------------------------------------*/\n    II=II+1; SAS.II=\"DATA \"||MBR.IMBR||\" (KEEP=\";\n    JJ=JJ+1; FMT.JJ=\"DATA \"||MBR.IMBR||\" (KEEP=\";\n    DO IWORD = 1 TO WORDS(XXVARS);\n      II=II+1; SAS.II=\"                 \"WORD(XXVARS,IWORD);\n      JJ=JJ+1; FMT.JJ=\"                 \"WORD(XXVARS,IWORD);\n    END\n    II=II+1; SAS.II=\");\";\n    JJ=JJ+1; FMT.JJ=\");\";\n /*-------------------------------------------------------------*/\n /* GENERATE SET  MBR.IMBR (NULL TABLE) THAT HAS THE VARIABLE LENGS*/\n /*-------------------------------------------------------------*/\n    II=II+1; SAS.II=\" SET \"||MBR.IMBR||\";\";\n\n /*-------------------------------------------------------------*/\n /*  GET THE KEY  VARIABLES AND THEIR VALUE                     */\n /*  ALSO SAVE THE MAX LENGTH OF EACH KEYS VARIABLE IN LENK.IMBR.K */\n /*  I USE THE INTERPRET TO TAKE THE VARIABLE NAME IN ZK.K AND  */\n /*  INDIRECT ACCESS THE DATA ASSOCIATED WITH THE VARIABLE      */\n /*  NAME OF THE COLUMN.                                        */\n /*  SO IT IS LIKE  B=INDIRECT(ZK.K)                            */\n /*  BUILDS   VAR1 = 'VAR1.DATA.VALUE';                         */\n /*-------------------------------------------------------------*/\n   IF NUMROWS.IMBR > 0 THEN DO ;\n     DO J = 1 TO NUMROWS.IMBR;\n    \"ISPEXEC TBSKIP \"MBR.IMBR;\n      IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;\n       IF J = 1 THEN LENK.IMBR.K=0;\n       INTERPRET \"B=\"ZK.K;\n       IF INDEX(B,\"'\") > 0 THEN CALL QUOTES B ;\n       II=II+1; SAS.II = ZK.K||\"= '\"||TRANSLATE(B,' ','00'X)||\"';\";\n       C= \"'\"||B||\"'\";\n       LENK.IMBR.K=MAX(LENK.IMBR.K,LENGTH(C));\n      END;\n      LEN.ZN.IMBR=0;\n /*-------------------------------------------------------------*/\n /*  GET THE NAME VARIABLES AND THEIR VALUE                     */\n /*  ALSO SAVE THE MAX LENGTH OF EACH VARIABLE IN LENN.IMBR.K   */\n /*-------------------------------------------------------------*/\n      IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;\n       IF J = 1 THEN LENN.IMBR.K=0;\n       INTERPRET \"B=\"ZN.K;\n       IF INDEX(B,\"'\") > 0 THEN CALL QUOTES B ;\n       II=II+1; SAS.II = ZN.K||\"= '\"||TRANSLATE(B,' ','00'X)||\"';\";\n       C= \"'\"||B||\"'\";\n       LENN.IMBR.K=MAX(LENN.IMBR.K,LENGTH(C));\n      END;\n       II=II+1;SAS.II=\"OUTPUT;\";\n     END;\n /*-------------------------------------------------------------*/\n /*  NOW THAT WE HAVE FINISHED GENERATING ALL OF THE ROWS FOR   */\n /*  THIS TABLE, LETS BUILD THE FORMAT STATEMENTS FOR EACH OF   */\n /*  THE VARIABLES THAT WAS GENERATED BY THE STEP ABOVE         */\n /*-------------------------------------------------------------*/\n     IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;\n       JJ=JJ+1;FMT.JJ=\"INFORMAT \"||ZK.K||\" $\"||LENK.IMBR.K||\".;\";\n     END;\n     IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;\n       JJ=JJ+1;FMT.JJ=\"INFORMAT \"||ZN.K||\" $\"||LENN.IMBR.K||\".;\";\n     END;\n     IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;\n       JJ=JJ+1;FMT.JJ=ZK.K||\"=\"||\"'';\";\n     END;\n     IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;\n       JJ=JJ+1;FMT.JJ=ZN.K||\"=\"||\"'';\";\n     END;\n     II=II+1;SAS.II=\"RUN;\";\n /*-------------------------------------------------------------*/\n /*  GENERATE THE PROC SORT IF THERE ARE ANY KEYS               */\n /*-------------------------------------------------------------*/\n     IF NUMKEYS.IMBR > 0 THEN DO;\n       II=II+1; SAS.II = \"PROC SORT DATA=\"||MBR.IMBR||\";\"\n       II=II+1; SAS.II = \" BY \"||XXKEYS||\";\";\n     END;\n   SAS.0=II; /* SET THE NUMBER OF ROWS */\n   FMT.0=JJ; /* SET THE NUMBER OF ROWS */\n   END;\n END;\n \"ALLOC F(SASOUT) DA(\"SASOUT\") SHR REUSE\";\n \"EXECIO * DISKW SASOUT (STEM FMT.     )\";\n \"EXECIO * DISKW SASOUT (STEM SAS. FINIS)\";\n \"FREE  F(SASOUT)\";\nRETURN;\n /*-------------------------------------------------------------*/\n /* CALL QUOTES STRING;                                         */\n /* ROUTINE TO REPLACE A SINGLE QUOTE (') AND CONVERT IT TO     */\n /* TWO SINGLE QUOTES ('')                                      */\n /*-------------------------------------------------------------*/\nQUOTES:\n ARG B;\n IQ = INDEX(B,\"'\",1);\n IQLAST = LENGTH(B);\n DO WHILE (IQ >0 & IQ <= IQLAST);\n   IF SUBSTR(B,IQ,2) = \"''\" THEN DO;\n     IQ=IQ+2;\n   END;\n   ELSE DO;\n     IF SUBSTR(B,IQ,1) = \"'\" THEN DO;\n       B=INSERT(\"'\",B,IQ,1);\n       IQLAST = LENGTH(B);\n       IQ=IQ+1; /* POINT TO NEWLY INSERTED QUOTE */\n     END; /* IF SUBSTR(B,IQ1,1) = \"'\" */\n     IQ=IQ+1;  /* NEXT CHAR */\n   END;\n     IQ = INDEX(B,\"'\",IQ);\n END;  /* DO WHILE */\nRETURN;\n /*-------------------------------------------------------------*/\n /* CLEANUP                                                     */\n /*-------------------------------------------------------------*/\nCLEANUP:\nRETURN;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONNECT": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t9\\x00h\\x00h\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:39:00", "lines": 104, "newlines": 104, "modlines": 0, "user": "KBASS"}, "text": "         MACRO\n&NAME    CONNECT  &L,&D,&CPPL=NO,&BASE=,&PARM=,&CLEAR=,&LI=LA,&R0=,    W\n               &MODESET=,&SAVE=YES,&ID=,&ENTRY=,&ENTREG=R15,           W\n               &SP=0,                                          01/06/78W\n               &REGSAVE='R14,R12,12(R13)'                      04/12/77\n.*\n.*       THIS MACRO GENERATES CSECT START-UP LINKAGE.\n.*\n.*                                                             01/06/78\n.*  CHANGES:                                                   01/06/78\n.*                                                             01/06/78\n.*       01/06/78 - ADD &SP (SUBPOOL SUPPORT)                  01/06/78\n.*       10/25/78 - RDN ALTER SUBPOOL FOR SAM BASS AND # SUBSYS10/25/78\n.*                                                             01/06/78\n         LCLA  &I,&J,&K,&N,&R                                  04/12/77\n         LCLC  &CNAME,&XRNAME                                  04/12/77\n         LCLC  &SPIDLBL                                        01/06/78\n&CNAME   SETC  '&SYSECT'\n         AIF   (T'&ENTRY EQ 'O').XANOP1\n&CNAME   SETC  '&ENTRY(1)'\n.XANOP1  ANOP\n&N       SETA  N'&BASE\n         AIF   (T'&ID EQ 'O').XIDLEN\n&K       SETA  K'&ID-2\n&K       SETA  ((&K+1)/2)*2\n.XIDLEN  ANOP\n&I       SETA  &K+28\n&NAME    B     &I.(,&ENTREG)            BRANCH AROUND ID       05/24/77\n         DC    FL1'23'                  ID LENGTH\n         DC    CL9'&CNAME'              CSECT NAME\n         DC    CL8'&SYSDATE'            ASSEMBLY DATE\n         AIF   ('&SP(1)' NE '0' AND T'&SP(2) EQ 'O').SUBPOL1   10/25/78\n         DC    CL6' &SYSTIME'           ASSEMBLY TIME\n         AGO   .SUBPOL2                                        01/06/78\n.SUBPOL1 ANOP                                                  01/06/78\n         DC    CL5'&SYSTIME'            ASSEMBLY TIME          01/06/78\n&SPIDLBL SETC  'SPID&SYSNDX'                                   01/06/78\n&SPIDLBL DC    AL1(&SP)                 SPECIFIED SUBPOOL      01/06/78\n.SUBPOL2 ANOP                                                  01/06/78\n         AIF   (T'&ID EQ 'O').XSAVE\n         DC    CL&K&ID\n.XSAVE   AIF   ('&SAVE' EQ 'NO').XBASECK\n&R       SETA  K'&REGSAVE-2                                    04/12/77\n&XRNAME  SETC  '&REGSAVE'(2,&R)                                04/12/77\n         STM   &XRNAME                  SAVE ALL REGISTERS     04/12/77\n.XBASECK AIF   (&N EQ 0).XCPPL\n         LR    &BASE(1),&ENTREG         INITIALIZE BASE REGISTER\n         USING &CNAME,&BASE(1)\n         AIF   (&N LE 1).XCPPL\n&I       SETA  2\n.XBASE   ANOP\n&J       SETA  &I-1\n         LA    &BASE(&I),2048(&BASE(&J))\n         LA    &BASE(&I),2048(&BASE(&I))\n&K       SETA  &J*4096\n         USING &CNAME+&K,&BASE(&I)\n&I       SETA  &I+1\n         AIF   (&I LE &N).XBASE\n.XCPPL   AIF   ('&CPPL' EQ 'NO').XPARM\n         LR    &CPPL,R1                 CPPL ADDRESS\n         USING CPPL,&CPPL\n         AGO   .XMODE\n.XPARM   AIF   (T'&PARM EQ 'O').XREG0\n         LR    &PARM(1),R1              SAVE PARAMETER REGISTER\n         AIF   (N'&PARM NE 2).XREG0\n         USING &PARM(2),&PARM(1)        DSECT ADDRESSABILITY\n.XREG0   AIF   (T'&R0 EQ 'O').XMODE\n         LR    &R0,R0\n.XMODE   AIF   (T'&MODESET EQ 'O').XWORK\n         MODESET MF=(E,&MODESET)\n.XWORK   AIF   ('&SAVE' EQ 'NO').MEND   QUIT IF SAVE=NO\n         AIF   ('&SAVE' EQ 'YES').XGETM IF SAVE=YES, THEN GETMAIN\n         LA    R15,&SAVE                LOAD UP ADDRESS OF SAVE AREA\n         ST    R13,4(R15)               START CHAINING SAVE AREAS\n         ST    R15,8(R13)               FINISH CHAINING\n         LR    R13,R15                  NEW SAVE AREA ADDRESS\n         AGO   .MEND                    WE IS ALL THRU......\n.XGETM   AIF   (T'&L EQ 'O').MEND\n         &LI   R0,&L\n         AIF   (&SP EQ 0).SUBPOL3                              10/25/78\n         AIF   (T'&SP(2) EQ 'O').SUBPOL4                       10/25/78\n         ICM   R0,B'1000',&SP(2)        OBTAIN FROM CALLER     10/25/78\n         AGO   .SUBPOL3                                        10/25/78\n.SUBPOL4 ANOP                                                  10/25/78\n         ICM   R0,B'1000',&SPIDLBL      INSERT SUBPOOL ID      01/06/78\n.SUBPOL3 ANOP                                                  01/06/78\n         GETMAIN R,LV=(0)               OBTAIN WORKAREA/SAVEAREA\n         ST    R13,4(R1)                CONNECT SAVEAREAS\n         ST    R1,8(R13)\n         LR    R13,R1\n         AIF   (T'&D EQ 'O').XCLEAR\n         USING &D,R13\n.XCLEAR  AIF   (T'&CLEAR EQ 'O').MEND\n         XC    0(4,R13),0(R13)\n         LA    R0,8(R13)\n         AIF   ('&LI' EQ 'LA').XCLA\n         &LI   R1,&L\n         S     R1,=F'8'\n         AGO   .XCLB\n.XCLA    LA    R1,&L-8\n.XCLB    SLR   R14,R14\n         SLR   R15,R15\n         MVCL  R0,R14                   ZERO WORKAREA\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONSOLE": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00#\\x01\\x07!_\\x01\\x076\\x1f\\x108\\x05:\\x056\\x00\\x05\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2007-08-03T00:00:00", "modifydate": "2007-12-27T10:38:23", "lines": 1338, "newlines": 1334, "modlines": 5, "user": "SBGOLOB"}, "text": "         PUNCH ' ORDER CONSOLE(P)'\n*******************************************************************\n* ------------------------------------------------------------------- *\n* NOTE: THE NEWER VERSION OF THIS PROGRAM IN THIS PDS, IS CALLED SPY. *\n* ------------------------------------------------------------------- *\n*******************************************************************\n*                                                                 *\n*            D I S C L A I M E R    S E C T I O N                 *\n*                                                                 *\n*******************************************************************\n*                                                                 *\n* THIS MATERIAL HAS BEEN USED SUCCESSFULLY & TO THE BEST OF OUR   *\n* KNOWLEDGE  THEY  ARE  OPERATIONAL, HOWEVER  NO  WARRANTY        *\n* IS MADE TO THE ACCURACY OF THE PROGRAMS OR RELATED MATERIAL AND *\n* NO RESPONSIBILITY IS ASSUMED  FOR ANY MODIFICATION  DIRECTLY OR *\n* INDIRECTLY  CAUSED BY  THEIR USE.  IT IS THE USERS              *\n* RESPONSIBILITY  TO  EVALUATE THE  USEFULLNESS  OF THE  MATERIAL *\n* SUPPLIED .                                                      *\n*                                                                 *\n* WE DO NOT GUARANTEE TO  KEEP ANY  MATERIAL PROVIDED  UP TO DATE *\n* NOR DO WE GUARANTEE TO  PROVIDE ANY  CORRECTIONS OR  EXTENSIONS *\n* DESCRIBED BY THE USER OR  CORRECTIONS OR EXTENSIONS MADE IN THE *\n* FUTURE .                                                        *\n*                                                                 *\n*******************************************************************\n***********************************************************************\n*        FOR AUTHORIZATION - INSERT GROUPS OR *USER INTO THE AUTHNAME *\n*        TABLE.                                                       *\n*                                                                     *\n*        F AUTHNAME LAST                                              *\n*                                                                     *\n*        DISPLAY MVS CONSOLE DISPLAY WITH AUTOMATIC REFRESH OF SCREEN *\n*        TO PRESENT A CONSOLE APPEARANCE.                             *\n*                                                                     *\n*        USED THE BASIC CROSS MEMORY CONSOLE BUFFER READ FROM THE     *\n*        CDF PROGRAM ON THE SHARE TAPE, AND MODIFIED TO A COMMAND     *\n*        PROCESSOR HIGHLIGHTING THE HIGHLIGHTED MESSAGES - P.MURPHY   *\n*                                                                     *\n***********************************************************************\n* ORIG.  FROM CBTTAPE.ORG FILE 025  TU SERVICES  PGM=CONS390          *\n***********************************************************************\n*        UPDATE LOG                                                   *\n***********************************************************************\n* 08/02/2007 KMB1-SAM BASS - MCLANE CO.                               *\n*        HEAVILY MODIFIED.                                            *\n*                                                                     *\n*  1.    I CHOSE THIS CONSOLE/SPY PROGRAM SINCE IT HAD THE BASIC      *\n*        STRUCTURE IN PLACE TO SUPPORT 3270 MODELS 2,3,4,5.           *\n*        BUT IT ONLY COULD LOOK AT MOD-2 CONSOLES.                    *\n*        I TOOK IT TO THE NEXT LEVEL AND NOW IT WILL WORK WITH        *\n*        ALL CONSOLE SIZES UP TO 54X132.                              *\n*        IF THE CONSOLE IS BIGGER THAN THE TERMINAL THEN I TRUNCATE   *\n*        THE WIDTH AND LOP OFF THE TOP LINES.  I DID NOT FEEL LIKE    *\n*        DOING THE PAGING THING LIKE SOME OF THE CONSOLE/SPY PROGRAMS.*\n* 2.     I ALWAYS CHOOSE THE ALTERNATE SIZE (HOPEFULLY IT IS LARGER   *\n*        THAN THE PRIMARY).  MAYBE I SHOULD TEST WHICH IS LARGER!     *\n* 3.     I CHANGED THE SECURITY ENTRIES TO BE RACF GROUPS INSTEAD OF  *\n*        USERIDS.  I DO STILL SUPPORT USERIDS BY HAVING \"*USERID\".    *\n* 4.     I INCLUDED THE IPL VOLSER IN ADDITION TO THE IPL UCB         *\n* 5.     I TRIED MY BEST TO REMOVE HARD CODED OFFSETS TO DATA AREAS   *\n*        AND LENGTHS TO MOVE DATA.                                    *\n*                                                                     *\n*                                                                     *\n*              VVV --------------- VVVVVVVVVVVVVVVVVVVVVVV            *\n***********************************************************************\n$AUTHSVC EQU   XXX                 CHANGE TO YOUR AUTH SVC\nCONSOLE  AMODE 31\nCONSOLE  RMODE 24\nCONSOLE  CSECT\n         SAVE  (14,12),T,CONSOLE_MCLANE_&SYSDATC._&SYSTIME.\n         LR    R11,R15            LOAD ADDRESS OF ENTRY POINT\n         LA    R12,2048(,R11)     ADDRESS OF NEXT BASE REGISTER\n         LA    R12,2048(,R12)     ADDRESS OF NEXT BASE REGISTER\n         USING CONSOLE,R11,R12    R12 BASE REGISTER\n         LR    R2,R1\n         GETMAIN R,LV=WORKLENG\n         LR    R3,R1\n         ST    R13,4(R3)      SAVE THE CALLER'S R13\n         ST    R3,8(,R13)\n         LR    R13,R3\n         USING WORKAREA,R13\n*--------------------------------------------------------------------*\n*              INITIALIZE                                            *\n*--------------------------------------------------------------------*\n         MVI   BLANKS,X'40'\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS\n         MVI   CONSFLAG,X'00'\n         MVI   USERFLAG,X'00'\n         MVI   CNSLFLAG,X'00'\n         MVI   THRUFLAG,X'00'\n         MVI   ISSUFLAG,X'00'\n         MVC   CMDLINE,BLANKS\n*--------------------------------------------------------------------*\n*              USE RACF GROUP TO VALIDATE WHETHER THIS USER IS       *\n*              ALLOWED TO USE THIS PROGRAM                           *\n*--------------------------------------------------------------------*\n*        MVI   VIPFLG,0            RESET VIP FLAG                  KMB1\n*                                                                  KMB1\n*        CHECK THE RACF GROUP TO VERIFY VIP                        KMB1\n*                                                                  KMB1\n         L     R15,PSAAOLD-PSA         LOAD A(ASCB)                KMB1\n         L     R15,ASCBASXB-ASCB(,R15)    A(ASXB) AND              KMB1\n         L     R15,ASXBSENV-ASXB(,R15)       A(ACEE)               KMB1\n         LTR   R15,R15                 ACEE AVAILABLE?             KMB1\n         BZ    EXIT                    NO -- CONTINUE              KMB1\n         MVC   USERID,BLANKS       BLANK OUT USERID                KMB1\n         MVC   USERID(7),ASXBUSER-ASXB(R15) GET USERID             KMB1\n         SLR   R2,R2                   CLEAR THE REGISTER AND      KMB1\n         LA    R3,ACEEGRPN-ACEE(,R15)  LOAD GROUP  ADDRESS         KMB1\n*--------------------------------------------------------------------*\n*              SCAN TABLE TO VERIFY                                  *\n*--------------------------------------------------------------------*\n         LA    R8,AUTHNAME         LOAD ADDR OF AUTHORIZED NAME    KMB1\nAUTHLOOP CLI   0(R8),X'FF'         END OF AUTHNAME TABLE?          KMB1\n         BE    EXIT                YES, GET OUT                    KMB1\n         CLC   0(8,R8),0(R3)       SEE IF RACF GROUP IN TABLE      KMB1\n         BE    AUTHED              YES, GO DO IT                   KMB1\n         CLI   0(R8),C'*'          IS THIS A USER ENTRY?           KMB1\n         BNE   AUTH0100            NO                              KMB1\n         CLC   1(7,R8),USERID      IS THIS USER IN THE TABLE       KMB1\n         BE    AUTHED              YES                             KMB1\nAUTH0100 DS    0H                                                  KMB1\n         LA    R8,8(,R8)           INCREMENT TO NEXT TABLE ENTR    KMB1\n         B     AUTHLOOP            LOOP UNTIL DONE                 KMB1\nAUTHED   DS    0H                                                  KMB1\n*        MVI   VIPFLG,X'FF'        YES, SUPER USER                 KMB1\n*\n*                                                               KMB1\n*  SETUP STAX FOR ATTENTION INTERRUPTIONS                       KMB1\n*                                                               KMB1\n         MVI   ATTNFLG,0                                        KMB1\n         LA    R3,STAXLIST         R3 = ADDRESS OF STAX LIST    KMB1\n         STAX  ATTNEXIT,MF=(E,(3)) ATTN EXIT TRAP               KMB1\n         SPACE 3                                                KMB1\n*\n         MVI   AUTOFLAG,X'00' AUTO MODE FLAG\n         MVI   RESHOWFL,X'00' RESHOW INDICATOR\n         MVI   MOD5FLAG,X'00' FLAG FOR MOD 5\n         MVI   SCREEN,X'C3' WCC\n         XC    CLEAR(CLEARLEN),CLEAR ZERO TPUT CLEARSCRN AREA   KMB1\n         MVC   CLEAR(CLEARLEN),CLR  CLEAR SCREEN CONTROL CHARS  KMB1\n*--------------------------------------------------------------------*\n*              GET TERMINAL ROW/COLS ON ENTRY                        *\n*              GET TERMINAL PRIMARY AND ALTERNATE SIZES              *\n*              SET TERMINAL TO ALTERNATE SIZES                       *\n*--------------------------------------------------------------------*\n         GTSIZE ,                                               KMB1\n         LTR   R0,R0              DISPLAY DEVICE?               KMB1\n         BZ    FREESKIP           YES, GO FREE AND RETURN       KMB1\n         ST    R0,TERMOROW         SAVE TERM ROWS               KMB1\n         ST    R1,TERMOCOL         AND TERM COLUMNS             KMB1\n*                                                               KMB1\n         LA    R2,PRMSIZE                                       KMB1\n         LA    R3,ALTSIZE          GET PRIM/ALT SIZES           KMB1\n         GTTERM PRMSZE=(2),ALTSZE=(3),MF=(E,WGTTERM)            KMB1\n         SLR   R1,R1                                            KMB1\n         IC    R1,ALTSIZE          ALT SIZE ROWS 1 BYTE         KMB1\n         ST    R1,ALTSZROW                                      KMB1\n         IC    R1,ALTSIZE+1        ALT SIZE COLS 1 BYTE         KMB1\n         ST    R1,ALTSZCOL                                      KMB1\nSETSIZE  STSIZE LINELOC=ALTSZROW,SIZELOC=ALTSZCOL               KMB1\n         GTSIZE\n         LTR   R0,R0              DISPLAY DEVICE?\n         BZ    FREESKIP           YES, GO FREE AND RETURN\n         STH   R0,TERMROWS         SAVE TERM ROWS               KMB1\n         STH   R1,TERMCOLS         AND TERM COLUMNS             KMB1\n*\n         CH    R1,EIGHTY          80 CHAR LINES\n         BNE   CHEKM5             NO, SET MODE 2\n         CH    R0,FORTY3          MOD 4?\n         BE    SETM4              YES, BRANCH\n         CH    R0,THIRTY2         MOD 3?\n         BE    SETM3              YES, BRANCH\nSETM2    DS    0H\n*        TPUT  MOD2,3\n*        TGET  REPLY,50\n         LA    R3,24              22 LINES PER SCREEN\n         MVC   CURSOR,=X'5CF0'    ROW 24 COL 2\n         MVC   ENDOFSCR,=X'5D7F'    ROW 24 COL 80\n         B     PROCESS\nCHEKM5   CH    R0,=H'27'          27 LINES?\n         BNE   SETM2\n         CH    R1,=H'132'         132 WIDTH?\n         BNE   SETM2\nSETM5    LA    R3,27              27 LINES PER SCREEN\n         MVI   MOD5FLAG,X'FF'\n         MVC   ENDOFSCR,=X'F76B'  ROW 27 COL 132\n         MVC   CURSOR,=X'F5E8'    ROW 27 COL 1 IC\n         B     PROCESS\nSETM3    LA    R3,32              22 LINES PER SCREEN\n         MVC   ENDOFSCR,=X'E77E'  ROW 32 COL 80\n         MVC   CURSOR,=X'E6F0'    ROW 32 COL 2 IC\n         B     PROCESS\nSETM4    LA    R3,43              22 LINES PER SCREEN\nPROCESS  ST    R3,NUMLINES\n         MVI   HELPFLAG,X'00'\n         MVI   CMDFLAG,X'00'\n*--------------------------------------------------------------------*\n*              FIND CONSOLE'S ADDRESS SPACE AND SAVE ASID            *\n*--------------------------------------------------------------------*\n         LA    R1,16\n         L     R1,0(R1)\n         USING CVT,R1\n         L     R1,CVTASVT\n         DROP  R1\n         USING ASVT,R1\n         L     R5,ASVTMAXU\n         LA    R15,ASVTENTY-4\nASVTLOOP BCTR  R5,0\n         LTR   R5,R5\n         BZ    CONABEND\n         LA    R15,4(,R15)\n         ICM   R6,15,0(R15)\n         BM    ASVTLOOP\n         USING ASCB,R6\n         ICM   R7,15,ASCBJBNS\n         BZ    ASVTLOOP\n         CLC   =C'CONSOLE',0(R7)\n         BNE   ASVTLOOP\n         SR    R1,R1\n         LH    R1,ASCBASID\n         DROP  R1,R6\nSTORECON DS    0H\n         ST    R1,CONSASID\n         BAL   R3,AUTHRIZ\n*--------------------------------------------------------------------*\n*              GET THE AX FOR THE CONSOLE ASID                       *\n*--------------------------------------------------------------------*\n         AXRES AXLIST=AXLIST      RESERVE AN AX\n         L     R1,CONSASID        'CONSOLE' ASID\n         AXEXT ASID=(1)           EXTRACT AX OF 'CONSOLE'IN R0\n         AXSET AX=(0)             SET OUR AX TO THAT OF CONSOLE\n         B     SHOWCONS\n*--------------------------------------------------------------------*\n*              EXIT POINT                                            *\n*--------------------------------------------------------------------*\nAXFREE   DS    0H\n         AXFRE AXLIST=AXLIST\n         BAL   R3,UNAUTH\nSHOWRTRN DS    0H\nFREESKIP DS    0H\n*\n         STSIZE LINELOC=TERMOROW,SIZELOC=TERMOCOL ORIGINAL SIZE KMB1\n         TPUT  CLRSCN,CLRSCNLN,FULLSCR  CLEAR/ERASE ALTERNATE   KMB1\n         STLINENO LINE=1\n         STFSMODE OFF\n         STTMPMD OFF\n*\nEXIT     DS    0H\n         LR    R3,R13\n         L     R13,SAVEAREA+4 RESTORE THE CALLER'S R13\n         FREEMAIN RC,A=(3),LV=WORKLENG\n         SR    R15,R15\n         RETURN (14,12),RC=(15)\n         EJECT\n*--------------------------------------------------------------------*\n*              BEGINNING OF PROCESS                                  *\n*              SET TO FULL SCREEN MODE                               *\n*--------------------------------------------------------------------*\nSHOWCONS DS    0H\n         STFSMODE ON,INITIAL=YES  FULL SCREEN MODE ON\n         STTMPMD ON\n         TPUT  CLRSCN,CLRSCNLN,FULLSCR  CLEAR/ERASE ALTERNATE   KMB1\n*---------------------------------------------------------------------*\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*---------------------------------------------------------------------*\nBLDUCMS  L     R4,16              R4 = ADDR OF CVT\n         USING CVT,R4\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         DROP  R4\n         USING UCM,R4\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB\n         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB\n         LR    R5,R4              BASE\n         S     R5,=F'4'           R5 = ADDR OF FIRST UCM PREFIX\n         USING UCMPRFX,R5\n         TM    UCMSFLG1,UCMSYSE   NO CONSOLES?\n         BO    CONABEND           YES\n         DROP  R5\n         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY\n         XR    R2,R2              R2 = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R5,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB\n         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)\n         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY\n         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?\n         BL    UCMLOOP            NOPE; KEEP GOING\nUCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND\n         CLI   CNSLFLAG,X'FF'\n         BNE   SETMAST\n         MVC   CONSOLD,CONSCURR\n         L     R4,CONSCURR\n         LA    R4,1(,R4)\n         B     MASTSCAN\n         DROP  R4\n*---------------------------------------------------------------------*\n*        SCAN THE UCM FOR THE MASTER CONSOLE AS THE DEFAULT           *\n*---------------------------------------------------------------------*\nSETMAST  SR    R4,R4\n         ST    R4,CONSCURR\nMASTSCAN LA    R5,UCMTAB          SET POINTER TO UCM ADDRESS TABLE\nCKNUMUCM CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   MASTCONT           NO, CONTINUE\n         CLI   CNSLFLAG,X'FF'\n         BNE   CONCHECK\n         CLI   THRUFLAG,X'FF'\n         BE    NOCONS\n         MVI   THRUFLAG,X'FF'\n         SR    R4,R4              START W/ FIRST ENTRY\n         B     MASTCONT\n*\n*              ERROR IF NO CONSOLES FOUND\n*\nCONABEND EQU   *\nNOCONS   TPUT  MSGNO2,43\n         TPUT  CLEAR,CLEARLEN,FULLSCR                           KMB1\n         B     AXFREE\nMSGNO2   DC    CL43'ALL CONSOLES OFFLINE, GOING TO MASTER TRACE'\n         SPACE 3\nCONCHECK MVI   CNSLFLAG,X'FF'\n         MVI   THRUFLAG,X'FF'\n         B     SETMAST\n*\n*              HERE IS THE SCAN FOR THE MASTER\n*\nMASTCONT SLL   R4,2               MAKE CONSOLE NUMBER TABLE INDEX\n         LA    R5,0(R5,R4)        SET POINTER TO UCM ADDRESS SLOT\n         L     R5,0(0,R5)         SET POINTER TO UCM\n         LTR   R5,R5\n         BZ    NEXT\n         USING UCMLIST,R5         TELL ASSEMBLER ABOUT UCM\n         CLI   CNSLFLAG,X'FF'\n         BE    SKIPMSTR\n         TM    UCMDIDCS,UCMAHERE  ON THIS SYSTEM?\n         BZ    NEXT               NO ? BRANCH\n         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?\n         BNZ   ACTIVCHK           YES ? FOUND THE MASTER CONSOLE ..\n         B     NEXT\nSKIPMSTR EQU   *\n         TM    UCMDIDCS,UCMAHERE  ON THIS SYSTEM?\n         BZ    NEXT               NO ? BRANCH\n         TM    UCMDISP1,UCMDISPC  GRAPHICS\n         BZ    NEXT\nACTIVCHK TM    UCMATR,UCMUF       ACTIVE?\n         BNZ   MASTFND\nNEXT     SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE\n         LA    R4,1(0,R4)         SET POINTER TO NEXT CONSOLE\n         B     MASTSCAN           CONTINUE MASTER CONSOLE SCAN LOOP\nMASTFND  SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE\n         ST    R4,CONSCURR        SET VALID CONSOLE NUMBER (MASTER)\n         DROP  R5                 DONT NEED UCM ADDRESSABILITY NOW\nNEXTPAGE LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\n         ICM   R4,15,CONSCURR     R4 = CONSOLE TO BE DISPLAYED\n         BZ    WRTERR4            WE HAVE NO CONSOLE ZERO (MASTER)\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   GETUCM             NO, CONTINUE\nRESETCN  L     R4,CONSOLD         RESET TO OLD CONSOLE\n         ST    R4,CONSCURR        AND SAVE IT\nGETUCM   SLL   R4,2               MULTIPLY BY 4\n         LA    R5,0(R5,R4)        R5 = ADDR OF ADDR OF UCM\n         L     R5,0(0,R5)         R5 = ADDR OF UCM\n         USING UCMLIST,R5\n         L     R6,UCMXB           R6 = ADDR OF RDCM\n         ST    R6,UCMTABX\n         LTR   R6,R6              IS THIS A GRAPHICS CONSOLE?\n         BP    GRAPHICS           YES\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\nWRTERR4  DS    0H\n         B     RESETCN            RESET THE CONSOLE NUMBER\nGRAPHICS EQU   *\n         L     R6,UCMFEXTP        UCM FIXED EXTENSION\n         USING UCMEFEXT,R6        ADDRESSABILITY\n         MVC   USER,UCMEFCNM      LOGON ID\n         DROP  R6\nAUTHDONE EQU   *\n         MVC   CONSOLD,CONSCURR\n         MVC   HEADING,HEADING1\n***********************************************************************\n*    FOR SYSH UNCOMMENT THE FOLLOWING 2 LINES TO LOOK AT ALTERNATE    *\n***********************************************************************\n*        CLI   CONSFLAG,X'FF'\n*        BNE   CNSLSW\n         CLI   ISSUFLAG,X'FF'\n         BNE   CONSINIT\n         MVC   HEADING+45(18),NOTISSUD\n         MVI   ISSUFLAG,X'00'\nCONSINIT MVI   CNSLFLAG,X'00'\n*        BAL   R3,AUTHRIZ\n*--------------------------------------------------------------------*\n*              SET SSAR TO THE CONSOLE ASID                          *\n*--------------------------------------------------------------------*\n         L     R1,CONSASID        'CONSOLE' ASID\n         SSAR  R1                 SET 'CONSOLE' AS SECONDARY\n         PRINT ON,GEN\n         SLR   R0,R0              SECONDARY KEY\n         L     R6,UCMTABX\n         LA    R1,4               TRUE LENGTH\n         MVCP  RDCM(R1),0(R6),R0  ADDRESS OF PAGEABLE DCM (DCMADTRN)\n         LA    R1,1\n         MVCP  TYPE(R1),15(R6),R0  ATTRIB DCMDEVTY  X'14' = EXTENDED\n*UCMECOLR EQU   X'10'               USABLE FOR EXTENDED COLOR\n*UCMEXTDS EQU   X'04'               DEVICE SUPPORTS EXTENDED DATA\n         L     R7,RDCM\n         USING STRTDCM,R7\n         LA    R1,2                                             KMB1\n         MVCP  CONROW(R1),DCMMSGAL-STRTDCM(R7),R0               KMB1\n         LA    R1,2                                             KMB1\n         MVCP  CONCOL(R1),DCMCORLN-STRTDCM(R7),R0               KMB1\n*--------------------------------------------------------------------*\n*              SET EXECUTED MVC LENGTH FROM CONSOLE TO TERM BUFFER   *\n*--------------------------------------------------------------------*\n         LH    R1,CONCOL           CONSOLE COLUMNS              KMB1\n         TM    TYPE,X'14'          IS IT EXTENDED?\n         BO    COLEXT02            YES\nCOLEXT01 DS    0H\n         SH    R1,=H'07' 6(SBA) +1 FOR EXECUTED MVC'S LATER     KMB1\n         B     COLEXT03\nCOLEXT02 DS    0H                  EXTENDED\n         SH    R1,=H'13' 12(EXTSBA) +1 FOR EXECUTED MVC'S       KMB1\n         B     COLEXT03\nCOLEXT03 DS    0H                                               KMB1\n         STH   R1,CONCOLM6         FOR EXECUTED MVC'S LATER     KMB1\n*--------------------------------------------------------------------*\n*              SET THE CONSOLE BUFFER MOVE LENGTH TO THE MINIMUM     *\n*              OF THE CONSOLE WIDTH OR THE TERMINAL WIDTH-2          *\n*--------------------------------------------------------------------*\n         LH    R0,TERMCOLS         MAX TERMINAL WIDTH           KMB1\n         SH    R0,=H'1'            -1 FOR EXECUTE               KMB1\n         STH   R0,TERMMOVE         MAX MOVE                     KMB1\n         CLR   R1,R0               IS CONSOLE > TERM            KMB1\n         BH    COLEXT04            YEP                          KMB1\n         STH   R1,TERMMOVE         NOPE, MOVE CONS LEN TO TERM  KMB1\nCOLEXT04 DS    0H\n*        DC    H'1'\n*                                                               KMB1\n         SLR   R0,R0\n         LA    R1,L'LASTLINE      TRUE LENGTH\n         MVCP  LASTLINE(R1),DCMINPUT-STRTDCM(R7),R0\n         LA    R1,L'SIBPTR\n         SLR   R0,R0              SET STORAGE KEY\n         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO CONSOLE BFR\n         LA    R1,2\n         MVCP  HEADING+8(R1),DCMDEL-STRTDCM(R7),R0   ROLL DELETE VAL\n         MVCP  RTME(R1),DCMRTME-STRTDCM(R7),R0       RTME\n         MVCP  RNUM(R1),DCMDL-STRTDCM(R7),R0         RNUM\n         LA    R1,4\n         MVCP  CONL(R1),DCMLSCRN-STRTDCM(R7),R0 @ OF LAST CONS LINE\n*\n         L     R8,SIBPTR         R8 = ADDR OF CONSOLE IMAGE\n         LA    R1,4                                             KMB1\n         MVCP  SCNL(R1),DCMWTBUF-STRTDCM(R7),R0                 KMB1\n         L     R5,SCNL             @ OF LAST BYTE OF SCREEN+1   KMB1\n*                                  AND ADDRESS OF INPUT AREA    KMB1\n         SR    R5,R8               GET LENGTH OF CONSOLE BFR    KMB1\n         TM    TYPE,X'14'        SUPPORT EXTENDED COLOR/DATASTREAM?\n         BO    EXTLNGTH          YES, BRANCH\n         LA    R5,06(,R5)          SIX BYTES FOR SBA\n         B     REGLNGTH\nEXTLNGTH DS    0H\n         LA    R5,12(,R5)          SIX BYTES FOR EXT SBA\nREGLNGTH ST    R5,CONL             SAVE IT\n*--------------------------------------------------------------------*\n*              MOVE THE COMPLETE CONSOLE BUFFERS TO BUF    AREA      *\n*--------------------------------------------------------------------*\n*\n*              R5 IS LENGTH OF CONSOLE DISPLAY\n*              R8 IS POINTER TO FIRST BYTE OF CONSOLE DISPLAY\n*\n         LA    R4,SCREEN           MY BUF\n         AL    R4,=A(SCRLEN)       POINT TO BUF (FOLLOWS SCREEN KMB1\nMOVEBUFF DS    0H\n         TM    TYPE,X'14'          SUPPORT EXTENDED COLOR/DATASTREAM?\n         BO    MOVEL\n         SH    R8,=H'06'           BACK UP TO THE SBA\n         B     RESUMMOV\nMOVEL    SH    R8,=H'12'           BACK UP TO THE EXT SBA\nRESUMMOV SLR   R0,R0               RESET THE KEY\nMVCPLOOP DS    0H\n         MVCP  0(R5,R4),0(R8),R0 LOOP THRU THE CONSOLE BUFFER\n         BZ    GOTITALL\n         AL    R8,=F'256'        MAX LEN ALLOWED\n         AL    R4,=F'256'        MAX LEN ALLOWED\n         SL    R5,=F'256'        MAX LEN ALLOWED\n         B     MVCPLOOP\n*---------------------------------------------------------------------*\n*        IN ORDER TO ISSUE SVCS THE PRIMARY AND                       *\n*        SECONDARY ADDRSPC MUST BE THE SAME                           *\n*---------------------------------------------------------------------*\nGOTITALL DS    0H\n         EPAR  R1                EXTRACT PRIMARY ASN\n         SSAR  R1\n*        BAL   R3,UNAUTH\n         DROP  R5,R7\n         LA    R3,SCREEN         SET POINTER TO FIRST LINE OF BUF\n         AL    R3,=A(SCRLEN)       POINT TO BUF                 KMB1\n*\n         LA    R9,HEADING+10\n         CLI   HEADING+9,C' '\n         BNE   RDMODE\n         LA    R9,HEADING+9\n*\n*              INSERT RTME=\n*\nRDMODE   MVC   0(6,R9),RTMEC\n         SR    R5,R5\n         LH    R5,RTME\n         CVD   R5,DOUBLWD\n         MVC   WORKLINE(5),PATTERN1\n         ED    WORKLINE(5),DOUBLWD+5\n         MVC   6(4,R9),WORKLINE+1\n         CLI   9(R9),C'0'\n         BE    PUTBLNK\n         MVC   7(2,R9),=C'1/'\n         B     PUTRNUM\n*\n*              INSERT RNUM=\n*\nPUTBLNK  MVI   9(R9),C' '\nPUTRNUM  MVC   10(6,R9),RNUMC\n         SR    R5,R5\n         IC    R5,RNUM+1\n         CVD   R5,DOUBLWD\n         MVC   WORKLINE(5),PATTERN1\n         ED    WORKLINE(5),DOUBLWD+5\n         MVC   16(3,R9),WORKLINE+2\n*\n*              INSERT TIME\n*\n         TIME  DEC\n         ST    R0,WORK\n         MVI   WORK+3,X'0C'\n         UNPK  DOUBLWD(7),WORK(4)\n         LA    R9,HEADING+36\n         MVC   0(2,R9),DOUBLWD\n         MVC   3(2,R9),DOUBLWD+2\n         MVC   6(2,R9),DOUBLWD+4\n         MVC   28(8,R9),USER\n         MVC   10(10,R9),BLANKS\n*\n         AGO   .NOTEST\n         UNPK  WORK(3),TYPE(2)     DISPLAY CONSOLE ATTRIBUTES\n         TR    WORK(2),JHEX-240\n         MVC   HEADING+47(2),WORK\n.NOTEST  ANOP\n*--------------------------------------------------------------------*\n*              INSERT ROW,COL MAX  DISPLAY                           *\n*--------------------------------------------------------------------*\n         LH    R1,CONROW           GET NUMBER OF ROWS           KMB1\n         CVD   R1,DOUBLWD          CONVERT TO DECIMAL           KMB1\n         MVC   HEADING+55(4),=X'40212020' SHOW 3 DIGITS         KMB1\n         ED    HEADING+55(4),DOUBLWD+6    AND DO IT.            KMB1\n         MVI   HEADING+59,C','                                  KMB1\n*                                                               KMB1\n         LH    R1,CONCOL           GET NUMBER OF COLS           KMB1\n         SH    R1,=H'4'            ASSUME NON-EXTENDED          KMB1\n         TM    TYPE,X'14'          IS THIS EXTENDED             KMB1\n         BZ    SIZE20               NOPE                        KMB1\n         SH    R1,=H'6'             EXTENDED                    KMB1\nSIZE20   DS    0H                                               KMB1\n         CVD   R1,DOUBLWD          CONVERT TO DECIMAL           KMB1\n         MVC   HEADING+60(4),=X'F0212020' SHOW 3 DIGITS         KMB1\n         ED    HEADING+60(4),DOUBLWD+6    AND DO IT.            KMB1\n         MVC   HEADING+60(4),HEADING+61                         KMB1\n         MVI   HEADING+63,C' '                                  KMB1\n*\n         CLI   AUTOFLAG,X'FF'\n         BNE   FIRSTL\n         MVC   10(10,R9),=C'AUTOUPDATE'\n         EJECT ,\n*--------------------------------------------------------------------*\n*              CALCULATE THE IF THE NUMBER OF CONSOLE LINES WILL     *\n*              FIT ON THE USERS TERMINAL                             *\n*              USER'S TERMINAL CAN HOLD 2 MORE LINES THAN THE CONSOLE*\n*              CAN FOR THE SAME TERM SIZE                            *\n*              SO IF THE CONSOLE LINES IS > TERMINAL ADD 2 TO        *\n*              DIFFERENCE                                            *\n*--------------------------------------------------------------------*\n*\n*              R3 HAS CONSOLE BUFFER START\n*\nFIRSTL   LH    R9,TERMROWS         NUMBER OF LINES ON TERMINAL  KMB1\n         BCTR  R9,0                -1 LEAVE ROOM FOR CMD LINE   KMB1\n         ST    R9,NUMLINES\n*\n         LH    R5,CONROW           NUM ROWS ON CONSOLE\n         ST    R5,CONL             SAVE IT\n         LA    R5,2(,R5)           +2 FOR SIZE DIFFERENCE\n         CR    R9,R5               IS TERM >= CONSOLE LINES+2\n         BNL   FIRSTL1              YES\n*              CONSOLE BIGGER THAN TERMINAL\n         LH    R5,CONROW           NUM ROWS ON CONSOLE\n         SR    R5,R9               HOW MANY TOO BIG\n         LA    R5,2(,R5)           +2 FOR SIZE DIFFERENCE\n         LH    R1,CONROW\n         SR    R1,R5               SUBSTRACT OFF THAT MANY\n         ST    R1,CONL             SAVE IT\n*\n*              NOW ADJUST STARTING CONSOLE ROW FOR THAT DIFFERENCE\n*              R5=# OF CONSOLE LINES TO SKIP\n*\n         LH    R1,CONCOL           GET CONSOLE WIDTH\n         SLR   R4,R4               ZERO FOR MULTIPLY REGISTER\n         MR    R4,R1               GET BYTE OFFSET INTO CONSOLE\n         LA    R3,0(R5,R3)         ADJUST CONSOLE STARTING PLACE\n*--------------------------------------------------------------------*\n*              BUILD THE FIRST LINE                                  *\n*--------------------------------------------------------------------*\n         L     R9,NUMLINES       NUMBER OF LINES ON PROG TERMINAL\n         BCTR  R9,0                -1 SINCE HEADING DONE\nFIRSTL1  DS    0H\n         LA    R5,SCREEN+1            ADDRESS OF FIRST LINE\n         LA    R6,PAGEDEF             LINES TO BE DISPLAYED\n*        AP    HEADING(2),HEADING(2)\n         CLI   MOD5FLAG,X'FF'         MOD 5?\n         BNE   NOTMOD5\n         LA    R6,PAGEDEF5\nNOTMOD5  L     R1,CONL             GET CONSOLE LINES TO DISPLAY\n         ST    R6,SBALIST          SAVE OFF SBA LIST.           KMB1\n         SR    R10,R10\n         MVC   0(5,R5),0(R6)       MOVE IN FIRST TERMINAL SBA\n         MVC   5(79,R5),HEADING    MOVE IN HEADING.\n*\n*              INSERT CONSOLE NUMBER\n*\n         SR    R15,R15\n         IC    R15,CONSCURR+3\n         CVD   R15,DOUBLWD\n         MVC   WORKLINE(4),=X'40212020'\n         ED    WORKLINE(4),DOUBLWD+6\n         MVC   78(2,R5),WORKLINE+2\n*\n         LA    R5,84(,R5)          NEXT TERM BUFFER ADDRESS\n         LA    R10,85(,R10)        TPUT LENGTH (INCL. WCC)\n         LA    R6,5(,R6)           NEXT TERMINAL SBA\n*\n         CLI   HELPFLAG,X'FF'         HELP?\n         BNE   MOVESTUP\n*--------------------------------------------------------------------*\n*              DISPLAY HELP STUFF                                    *\n*--------------------------------------------------------------------*\n         MVC   0(5,R5),0(R6)\n         MVC   5(79,R5),BLANKS\n         LA    R5,84(,R5)             INCREMENT\n         LA    R6,05(,R6)             INCREMENT\n         MVC   0(5,R5),0(R6)\n         LA    R1,HEADING1\n         MVC   5(79,R5),80(R1)\n         LA    R5,84(,R5)             INCREMENT\n         LA    R6,5(,R6)              INCREMENT\n         MVC   0(5,R5),0(R6)\n         LA    R1,80(,R1)\n         MVC   5(79,R5),80(R1)\n         LA    R5,84(,R5)             INCREMENT\n         LA    R6,5(,R6)              INCREMENT\n         MVC   0(5,R5),0(R6)\n         MVC   5(79,R5),160(R1)\n         LA    R5,84(,R5)             INCREMENT\n         LA    R6,5(,R6)              INCREMENT\n         MVC   0(5,R5),0(R6)\n         MVC   5(79,R5),240(R1)\n         LA    R5,84(,R5)             INCREMENT\n         LA    R6,5(,R6)              INCREMENT\n         LA    R10,420(,R10)\n         CLI   USERFLAG,X'FF'\n         BNE   SPACLOOP\n         MVC   0(5,R5),0(R6)\n         MVI   4(R5),X'E8'          HILITE\n         MVC   5(79,R5),320(R1)\n         LA    R5,84(,R5)             INCREMENT\n*        LA    R6,5(,R6)              INCREMENT\n         LA    R10,84(,R10)\n         B     SPACLOOP\n         EJECT ,\nMOVESTUP LR    R15,R5\n***********************************************************************\n*                                                                     *\n* THE CONSOLES WITH EXTENDED DATASTREAMS HAVE THE FOLLOWING FORMATS:  *\n* (THE TYPE WILL HAVE EXTENDED COLOR AND DATASTREAM TURNED ON - X'14')*\n*                                                                     *\n* REF GA23-0059 DATASTREAM PROGRAMMERS REFERENCE                      *\n*                                                                     *\n* 1100002903C0E442F4410040  (THEN 4 BLANKS AND THE LINE)              *\n*                                                                     *\n* 11 SBA FOR 0000 THE FIRST LINE  OR 0050 2ND LINE ETC - 110000       *\n* 2903 - SFE START FIELD EXTENDED FORMAT (29) WITH 03 EXTENDED FIELDS *\n* C0E4 - FIELD ATRIBUTE      E4 - PROT DISPLAY                        *\n* 42F4 - 42 FOREGROUND COLOR F4 IS GREEN F1 IS BLUE F3 PINK ETC       *\n* 4100 - 41 EXTENDED HIGHLIGHTING 00 MEANS DEFAULT F1 BLINK F4 UNDERSC*\n*        F2 REVERSE VIDEO  F0 NORMAL (PER 3270 FIELD ATTRIBUTE)       *\n*                                                                     *\n* THE CONSOLES WITHOUT EXTENDED DATASTREAM HAVE THE FOLLOWING FORMATS:*\n*                                                                     *\n* 11404028E440              (THEN 1 BLANK  AND THE LINE)              *\n*                                                                     *\n* 11 SBA FOR 4040 THE FIRST LINE                                      *\n* 28 ATTRIBUTE CHAR E4 PROT DISPLAY                                   *\n*                                                                     *\n* TOTAL LENGTH NON-EXTENDED 84, EXTENDED DISPLAY LENGTH IS 90         *\n*                                                                     *\n***********************************************************************\n*        R1    HAS NUMBER OF LINES TO MOVE FROM CONSOLE BUFFER\n*        R3    CONSOLE BUFFER\n*        R5    TERMINAL BUFFER\n*        R6    TERMINAL SBA ADDRESSES\n*        R15   TERMINAL BUFFER\nMOVELOOP EQU   *\n         CLI   CLRFLAG,X'FF'\n         BE    MVIT\n         TM    TYPE,X'14'             EXTENDED FORMAT?\n         BZ    COMP2                  NO - USE OTHER DISPLACEMENT\n         CLC   5(74,R15),11(R3)       HAS THIS LINE CHANGED?\n         BNE   SETMOVE\n         CLC   4(1,R15),06(R3)        ATTRIBUTE BYTE CHANGED?\n         BE    SKPMV                  NO NEED SENDING DOWN THE LINE\n         B     SETMOVE\nCOMP2    CLC   5(74,R15),5(R3)        HAS THIS LINE CHANGED?\n         BNE   SETMOVE\n         CLC   4(1,R15),04(R3)        ATTRIBUTE BYTE CHANGED?\n         BE    SKPMV                  NO NEED SENDING DOWN THE LINE\nSETMOVE  MVI   CLRFLAG,X'FF'          SCREEN HAS CHANGED FROM HERE DOWN\nMVIT     MVC   0(4,R5),0(R6)       MOVE IN SBA TO TERM BUFFER\nCKMVIT   TM    TYPE,X'14'          EXTENDED FORMAT?\n         BZ    MVIT2               NO - USE OTHER DISPLACEMENT\n*              EXTENDED                                         KMB1\n         MVC   4(1,R5),06(R3)      ATTRIBUTE BYTE\n         LH    R2,TERMMOVE         TERM MVC LEN -1              KMB1\n         MVC   6(00,R5),12(R3)     MOVE LINE OF PRINT           KMB1\n         EX    R2,*-6              MOVE IT IN.                  KMB1\n         B     MVIT3\n*              NON-EXTENDED                                     KMB1\nMVIT2    EQU   *\n         MVC   4(1,R5),04(R3)      ATTRIBUTE BYTE\n         LH    R2,TERMMOVE         NUM COLS -6 OR -12           KMB1\n         MVC   6(00,R5),6(R3)      MOVE LINE OF PRINT           KMB1\n         EX    R2,*-6              MOVE IT IN.                  KMB1\nMVIT3    DS    0H                                               KMB1\n         MVI   5(R5),C' '                                       KMB1\n         LH    R2,TERMMOVE         NUM COLS -6 OR -12           KMB1\n         OC    6(00,R5),BLANKS     MAKE SURE NO CONTROL CHR     KMB1\n         EX    R2,*-6              OC THE WHOLE THING           KMB1\n         LA    R5,1+6(R2,R5)       NEXT LINE                    KMB1\n         LA    R10,1+6(R2,R10)     LENGTH OF TPUT               KMB1\nSKPMV    LA    R6,05(,R6)          NEXT TERMINAL SBA\n         LH    R2,CONCOL           CONSOLE WIDTH (INCL SBA).    KMB1\n         ALR   R3,R2               CONSOLE BUFFER               KMB1\n         ALR   R15,R2              CONSOLE                      KMB1\n         BCT   R1,MOVELOOP         LOOP\n         MVI   CLRFLAG,X'00'\n*--------------------------------------------------------------------*\n*              FIND THE LAST LINE OF THE TERMINAL SBA                *\n*--------------------------------------------------------------------*\nSPACLOOP DS    0H\n         LH    R1,TERMROWS         NUMBER OF ROWS ON TERM       KMB1\n         BCTR  R1,0                -1 RELATIVE TO 0             KMB1\n         MH    R1,=H'5'            LENGTH OF EACH SBA           KMB1\n         L     R6,SBALIST          GET LIST OF SBA WE ARE USING KMB1\n         ALR   R6,R1               POINT TO LAST SBA ON TERM    KMB1\n*--------------------------------------------------------------------*\n*              ADD IN THE COMMAND LINE                               *\n*--------------------------------------------------------------------*\n         MVC   0(5,R5),0(R6)       LINE ADDRESS\n         MVI   4(R5),X'C8'         UNPROT, HILITE               KMB1\n         MVI   5(R5),X'13'         INSERT CURSOR\n*--------------------------------------------------------------------*\n*              NOW BLANK OUT COMMAND LINE                            *\n*--------------------------------------------------------------------*\n         LH    R2,TERMMOVE         NUMBER COLS -6               KMB1\n         MVC   6(00,R5),BLANKS        LAST LINE IS INPUT LINE   KMB1\n         EX    R2,*-6              MOVE BLANKS                  KMB1\n*--------------------------------------------------------------------*\n*              CHECK FLAGS                                           *\n*--------------------------------------------------------------------*\n         CLI   HELPFLAG,X'FF'\n         BE    GOAHEAD2\n         CLI   IPLFLAG,X'FF'\n         BE    GOAHEAD2\n         CLI   AUTOFLAG,X'FF'\n         BE    AUTOROLL\nGOAHEAD  DS    0H\n         CLI   RESHOWFL,X'FF'\n         BNE   GOAHEAD2\n         MVI   4(R5),X'C9'  X'C9'  UNPROT, HILITE,MDT           KMB1\n         MVI   RESHOWFL,X'00'\n         MVC   6(72,R5),CMDLINE+4\n         B     GOAHEAD3\nGOAHEAD2 DS    0H                                               KMB1\nGOAHEAD3 MVI   CMDFLAG,X'00'\n         LH    R2,TERMMOVE                                      KMB1\n         LA    R10,1+6(R2,R10)     TERM SCREEN LENGTH           KMB1\n*        LA    R10,84(,R10)\n         LR    R0,R10\n         LA    R1,SCREEN              ADDRESS OF SCREEN\n         TPUT  (1),(0),FULLSCR        TPUT\n         MVC   REPLY,BLANKS           CLEAR\nTGET1    TGET  REPLY,84,ASIS,WAIT     INPUT\n         MVI   HELPFLAG,X'00'\n         CLI   ATTNFLG,0                                        KMB1\n         BNE   AXFREE                                           KMB1\n         B     CHEKOUT\n*--------------------------------------------------------------------*\n*              AUTOROLL AREA                                         *\n*--------------------------------------------------------------------*\nAUTOROLL EQU   *\n         LA    R1,SCREEN              ADDRESS OF SCREEN\n         CLI   RESHOWFL,X'FF'\n         BNE   GOAHEAD5\n         MVI   RESHOWFL,X'00'\n         MVC   6(72,R5),CMDLINE+4\n         MVC   REPLY,BLANKS\n         LA    R10,72(,R10)\n         B     GOAHEAD5\n*OAHEAD4 S     R0,=F'79'\nGOAHEAD5 CLI   CMDFLAG,X'FF'\n         BNE   AUTOTPUT\n         MVC   0(5,R5),0(R6)          LINE ADDRESS\n         MVI   4(R5),X'C8'         UNPROT, HILITE               KMB1\n         MVI   5(R5),X'13'            INSERT CURSOR\n         MVI   CMDFLAG,X'00'\nAUTOTPUT LA    R0,5(,R10)\n*        LR    R0,R10\n         TPUT  (1),(0),FULLSCR\n         TGET  REPLY,70,ASIS,NOWAIT\n         STIMER WAIT,BINTVL=TIMER\n*--------------------------------------------------------------------*\n*              WHAT ACTION (AID) KEY WAS PRESSED                     *\n*--------------------------------------------------------------------*\n*                                                               KMB1\n*        60    NO AID                                           KMB1\n*        7D    ENTER                                            KMB1\n*        F1-F9 PF1  - PF9                                       KMB1\n*        7A-7C PF10 - PF12                                      KMB1\n*        C1-C9 PF13 - PF21                                      KMB1\n*        4A-4C PF22 - PF24                                      KMB1\n*        6C    PA1                                              KMB1\n*        6E    PA2                                              KMB1\n*        6B    PA3                                              KMB1\n*        6D    CLEAR                                            KMB1\n*                                                               KMB1\nCHEKOUT  CLI   REPLY,X'7D'         ENTER\n         BE    GOTSTUFF\n         NI    REPLY,X'0F'\n         CLI   REPLY,X'01'         PFK 01\n         BE    HELP\n         CLI   REPLY,X'02'         PFK 02\n         BE    AUTOSTOP\n         CLI   REPLY,X'03'         PFK 03\n         BE    CHEKAUTO\n         CLI   REPLY,X'04'         PFK 04\n         BE    AUTOON\n         CLI   REPLY,X'05'         PFK 05\n         BE    CNSLSW\n         CLI   REPLY,X'06'         PFK 06\n         BE    RESHOW\n         CLI   REPLY,X'07'         PFK 07\n         BE    MTT\n         CLI   REPLY,X'08'         PFK 08\n         BE    AUTO10\n         CLI   REPLY,X'09'         PFK 09\n         BE    AUTO2\n*        CLI   REPLY,X'0A'         PFK 10\n*        BE    OMON\n         CLI   REPLY,X'0B'         PFK 11\n         BE    AUTO4\n         CLI   REPLY,X'0C'         PFK 12\n         BE    IPLINFO\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nNOTIFY   MVI   CLRFLAG,X'FF'\n         MVI   CMDFLAG,X'FF'\n         B     AUTHDONE\nCHEKAUTO CLI   AUTOFLAG,X'FF'\n         BNE   AXFREE\n         MVI   AUTOFLAG,X'00'\n         B     AUTHDONE\nCNSLSW   MVI   CNSLFLAG,X'FF'\n         MVI   REPLY,X'00'\n         MVI   CONSFLAG,X'FF'\n         MVI   THRUFLAG,X'00'\n         MVI   CLRFLAG,X'FF'\n*\n*              CLEAR OUR BUF AREA\n*\n         LA    R0,SCREEN\n         AL    R0,=A(SCRLEN)       POINT TO BUF                 KMB1\n         L     R1,=A(BUFLEN)       GET BUF LENGTH               KMB1\n         SLR   R14,R14                                          KMB1\n         L     R15,=A(X'40000000')                              KMB1\n         MVCL  R0,R14                                           KMB1\n         B     SHOWCONS\nRESHOW   MVI   RESHOWFL,X'FF'\n         B     AUTHDONE\n*--------------------------------------------------------------------*\n*              IPLINFO                                               *\n*--------------------------------------------------------------------*\nIPLINFO  MVC   WORKLINE,BLANKS\n         MVC   WORKLINE+10(46),MESSAGE\n         LA    R1,16              HEX 10\n         L     R2,0(R1)           ADDRESS OV CVT\n         USING CVT,R2\n         L     R3,CVTSMCA         ADDRESS OF SMF CONTROL AREA\n         L     R1,CVTSYSAD\n*\n*              IPL UNIT AND VOLSER\n*\n         MVC   WORKLINE+65(6),UCBVOLI-UCBOB(R1)                 KMB1\n         MVI   WORKLINE+71,C'='                                 KMB1\n         UNPK  WORKLINE+72(5),UCBCHAN-UCBOB(3,R1)               KMB1\n         TR    WORKLINE+72(4),JHEX-240                          KMB1\n         MVI   WORKLINE+76,C' '                                 KMB1\n         USING SMCABASE,R3\n         MVC   IPLDATE,SMCAIDTE   IPL DATE\n         MVC   IPLTIME,SMCAITME   IPL TIME\n         DROP  R3\n*\n*              CLPA=YES/NO\n*\n         L     R3,CVTASMVT\n         TM    1(R3),X'08'     CLPA?\n         BNZ   NOCLPA             1 MEANS A QUICK START - NO CLPA WAS\n         MVC   WORKLINE+57(3),=C'YES'\n         B     DATEEDIT\nNOCLPA   MVC   WORKLINE+57(3),=C'NO '\n*\n*              DATE/TIME OF IPL\n*\nDATEEDIT DS    0H                                               KMB1\n         UNPK  DOUBLWD(5),IPLDATE+1(3)                          KMB1\n         MVC   WORKLINE+31(2),DOUBLWD                           KMB1\n         MVI   WORKLINE+33,C'.'                                 KMB1\n         MVC   WORKLINE+34(3),DOUBLWD+2                         KMB1\n         DROP  R2\n         L     R6,IPLTIME\n         SRDA  R6,32(0)\n         L     R3,THREE60\n         DR    R6,R3\n         CVD   R7,DOUBLWD\n         MVC   WORK(4),=X'40212020'\n         ED    WORK(4),DOUBLWD+6\n         MVC   WORKLINE+43(2),WORK+2\n         SRDA  R6,32              SHIFT REMAINDER\n         L     R3,SIXTY\n         DR    R6,R3\n         CVD   R7,DOUBLWD\n         MVC   WORK(4),=X'F0212020'\n         ED    WORK(4),DOUBLWD+6\n         MVC   WORKLINE+46(2),WORK+2\n         LA    R5,SCREEN+1            ADDRESS OF FIRST LINE\n         LA    R6,PAGEDEF             LINES TO BE DISPLAYED\n         LA    R10,85\n         CLI   MOD5FLAG,X'FF'\n         BNE   NONMOD5\n         LA    R6,PAGEDEF5\nNONMOD5  L     R9,NUMLINES\n         BCTR  R9,0\n         MVC   0(5,R5),0(R6)\n         MVC   5(79,R5),WORKLINE\n         LA    R5,84(,R5)             INCREMENT\n         LA    R6,05(,R6)             INCREMENT\n         BCTR  R9,0\n         TPUT  CLEAR,CLEARLEN,FULLSCR                           KMB1\n         MVI   IPLFLAG,X'FF'\n         TCLEARQ INPUT\n         B     SPACLOOP\n*\n*              MTT  HUH????\n*\nMTT      DS    0H\n         B     AUTHDONE\n*--------------------------------------------------------------------*\n*              DISPLAY HELP                                          *\n*--------------------------------------------------------------------*\nHELP     MVI   HELPFLAG,X'FF'\n         MVI   AUTOFLAG,X'00'\n         TPUT  CLEAR,CLEARLEN,FULLSCR                           KMB1\n         MVI   CLRFLAG,X'FF'\n         B     FIRSTL\nAUTOON   MVC   TIMER,ONE\n         CLI   USERFLAG,X'FF'\n         BE    AUTO2\n         B     AUTOSET\nAUTO2    MVC   TIMER,THREE\n         B     AUTOSET\nAUTO4    MVC   TIMER,FIVE\nAUTOSET  MVI   AUTOFLAG,X'FF'\n         MVC   5(72,R5),BLANKS\n         MVI   REPLY,X'00'\n         B     AUTHDONE\nAUTO10   MVC   TIMER,=F'990'            APP 10 SECS\n         B     AUTOSET\nAUTOSTOP MVI   AUTOFLAG,X'00'\n         B     AUTHDONE\nSKIPALL  MVI   ISSUFLAG,X'FF'\n         B     AUTHDONE\n*--------------------------------------------------------------------*\n*              ENTER PRESSED                                         *\n*--------------------------------------------------------------------*\nGOTSTUFF DS    0H\n         CLI   REPLY+6,C'>'        IS IT NOTIFY MESSAGE?\n         BE    NOTIFY              THEN EXIT\n         OC    REPLY+6(74),BLANKS  ALL INPUT UPPER CASE\n         CLC   REPLY+6(70),BLANKS  COMMAND AREA IS SPACES?\n         BE    AUTHDONE            THEN A COMMAND WAS NOT ENTERED\n         MVC   CMDLINE(4),CMDFMT\n         MVC   CMDLINE+4(72),REPLY+6\n         MVC   REPLY,BLANKS\n         CLI   CMDLINE+4,C'Z'      IS IT END,\n         BE    CHEKAUTO            THEN EXIT\n         CLI   CMDLINE+4,C'X'      IS IT END,\n         BE    CHEKAUTO            THEN EXIT\n         CLC   CMDLINE+4(3),=C'END' IS IT END,\n         BE    AXFREE               THEN EXIT\nGOTCMD   DS    0H\n         TPUT  CLEAR,CLEARLEN,FULLSCR                           KMB1\n         MVI   CLRFLAG,X'FF'\nLOGLINE  MVC   WTOCMD(100),WTOLIST\n         MVC   WTOCMD+8(72),CMDLINE+4\n         CLI   USERFLAG,X'FF'\n         BNE   ISSUOK\nISSUCK   CLC   PJES2,CMDLINE+4\n         BE    HELP\n         CLC   PQ,CMDLINE+4\n         BE    HELP\n         CLC   $P,CMDLINE+4\n         BE    HELP\n         CLC   PQ(3),CMDLINE+4\n         BE    HELP\n         CLC   CMDLINE+4(1),PQ        SHOULD START WITH $\n         BNE   HELP\nISSUOK   MVC   WTOCMD+78(4),USERID\n         LA    R7,WTOCMD\n         WTL   MF=(E,(R7))\n*OWTO    BAL   R3,AUTHRIZ\nNOWTO    EQU   *\n         SLR   R0,0                 CLEAR REG 0\n         L     R0,CONSCURR\nISSUE    LA    R1,CMDLINE          GET ADDRESS OF COMMAND I SMF\n         SVC   34                  ISSUE COMMAND VIA SVC 34\n*S       STIMER WAIT,BINTVL==A(50)\n         MVI   CMDFLAG,X'FF'\n         B     AUTHDONE\nAUTHRIZ  STAX  DEFER=YES\n         LA    R1,=C'AUTH'\n         SVC   $AUTHSVC\n         MODESET MF=(E,SUPRMOD)  GET INTO SUPV STATE AND KEY ZERO\n         BR    R3                ****************************\nUNAUTH   DS    0H\n         MODESET MF=(E,PROBMOD)\n         LA    R1,=C'NONE'\n         SVC   $AUTHSVC\n         STAX  DEFER=NO\n         BR    R3\n***********************************************************************\n*                          A T T N E X I T                            *\n*                                                                     *\n*         TRAP USERS ATTENTION INTERRUPTS AND FLAG FOR RESET          *\n***********************************************************************\nATTNEXIT DS    0H                  ESTABLISH\n         MVI   ATTNFLG,X'FF'       SET ATTN FLAG\n         BR    R14                 RETURN TO CALLER\n         EJECT\n         LTORG\n*---------------------------------------------------------------------*\n*                         C O N S T A N T S                           *\n*---------------------------------------------------------------------*\nCMDFMT   DC    Y(76),Y(00)            LENGTH OF COMMAND\nMESSAGE  DC    CL46'LAST SYSTEM IPL DATE YY.DDD TIME HH:MM  CLPA ='\nPATTERN1 DC    XL5'2120202020'\nTHREE60  DC    F'360000'\nSIXTY    DC    F'6000'\nAXLIST   DC    H'1',H'0'           AXRES PARMLIST\n         CNOP  0,8\n*---------------------------------------------------------------------*\n*               327X SCREEN CLEAR CONTROL CHARACTERS                  *\n*---------------------------------------------------------------------*\n*LR      DC    X'7E'              EWA\n*\nCLRSCN   EQU   *                                                KMB1\n         DC    X'277EC3'           ERASE WRITE ALTERNATE        KMB1\nCLRSCNLN EQU   *-CLRSCN                                         KMB1\n*\nCLR      DC    X'C3'               WCC - FREE KEYBOARD/RESET MDT\n         DC    X'114040'           SBA TO ROW 1, COL 1\n         DC    X'3C'               REPEAT TO ADDRESS\nCLREOSCN DC    X'F56F' ENDOFSCR    FILL SCREEN WITH NULLS F56F=R43 C80\n         DC    X'00'               REPEAT NULLS\n         DC    X'11'               SBA\nCLRCSR   DC    X'F460' CURSOR      ROW 43 COL 2\n         DC    X'00'               ATTRIBUTE\n         DC    X'13'               INSERT CURSOR\nCLRLEN   EQU   *-CLR\n*\nONE      DC    A(175)              1.75 SECOND\nFIVE     DC    A(444)              5 SECONDS\nTHREE    DC    A(220)              3 SECONDS\nTEN      DC    F'10'\nNUMBEROR DC    XL4'000000F0'\nCHAROR   DC    XL4'000000C0'\nHEXZIP   DC    2F'0000000000000000'\n         DS    0F\nWTOLIST  WTL   '                                                       X\n                                       CONSOLE',MF=L\n         DS    0F\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L\nPROBMOD  MODESET KEY=NZERO,MF=L\nSTAXLIST STAX  ATTNEXIT,MF=L                                    KMB1\nAUTHNAME DS    0CL8                                             KMB1\n         DC    CL8'SYS1'                                        KMB1\n         DC    CL8'STGMGT'                                      KMB1\n         DC    CL8'DB2MGT'                                      KMB1\n         DC    CL8'SYSOPER'                                     KMB1\n         DC    CL8'OPER2'                                       KMB1\n         DC    CL8'*USER '                                      KMB1\nAUTHNEND DC    8XL1'FF'                                         KMB1\nHEXFS    DC    XL4'FFFFFFFF'\nJHEX     DC    C'0123456789ABCDEF'          HEX DIGIT CONVERSION\nPJES2    DC    CL7'$PJES2 '\nPQ       DC    CL8'$PQ,ALL '\n$P       DC    CL8'$P      '\nRTMEC    DC    CL6',RTME='\nRNUMC    DC    CL6',RNUM='\nMOD2     DC    CL3'***'\nFORTY3   DC    H'43'\nTHIRTY2  DC    H'32'\nEIGHTY   DC    H'80'\nPAGEDEF  DC    X'1140401DE8'          ROW  1   COL  1\n         DC    X'11C1501DC4'          ROW  2   COL  1\n         DC    X'11C2601DC4'          ROW  3   COL  1\n         DC    X'11C3F01DC4'          ROW  4   COL  1\n         DC    X'11C5401DC4'          ROW  5   COL  1\n         DC    X'11C6501DC4'          ROW  6   COL  1\n         DC    X'11C7601DC4'          ROW  7   COL  1\n         DC    X'11C8F01DC4'          ROW  8   COL  1\n         DC    X'114A401DC4'          ROW  9   COL  1\n         DC    X'114B501DC4'          ROW 10   COL  1\n         DC    X'114C601DC4'          ROW 11   COL  1\n         DC    X'114DF01DC4'          ROW 12   COL  1\n         DC    X'114F401DC4'          ROW 13   COL  1\n         DC    X'1150501DC4'          ROW 14   COL  1\n         DC    X'11D1601DC4'          ROW 15   COL  1\n         DC    X'11D2F01DC4'          ROW 16   COL  1\n         DC    X'11D4401DC4'          ROW 17   COL  1\n         DC    X'11D5501DC4'          ROW 18   COL  1\n         DC    X'11D6601DC4'          ROW 19   COL  1\n         DC    X'11D7F01DC4'          ROW 20   COL  1\n         DC    X'11D9401DC4'          ROW 21   COL  1\n         DC    X'115A501DC4'          ROW 22   COL  1\n         DC    X'115B601DC4'          ROW 23   COL  1\n         DC    X'115CF01DC4'          ROW 24   COL  1\n         DC    X'115E401DC4'          ROW 25   COL  1\n         DC    X'115F501DC4'          ROW 26   COL  1\n         DC    X'1160601DC4'          ROW 27   COL  1\n         DC    X'1161F01DC4'          ROW 28   COL  1\n         DC    X'11E3401DC4'          ROW 29   COL  1\n         DC    X'11E4501DC4'          ROW 30   COL  1\n         DC    X'11E5601DC4'          ROW 31   COL  1\n         DC    X'11E6F01DC4'          ROW 32   COL  1\n         DC    X'11E8401DC4'          ROW 33   COL  1\n         DC    X'11E9501DC4'          ROW 34   COL  1\n         DC    X'116A601DC4'          ROW 35   COL  1\n         DC    X'116BF01DC4'          ROW 36   COL  1\n         DC    X'116D401DC4'          ROW 37   COL  1\n         DC    X'116E501DC4'          ROW 38   COL  1\n         DC    X'116F601DC4'          ROW 39   COL  1\n         DC    X'11F0F01DC4'          ROW 40   COL  1\n         DC    X'11F2401DC4'          ROW 41   COL  1\n         DC    X'11F3501DC4'          ROW 42   COL  1\n         DC    X'11F4601DC8'          ROW 43   COL  1\nPAGEDEF5 DC    X'1140401DE8'          ROW  1   COL  1 MODEL 5\n         DC    X'11C2C41DE4'          ROW  2   COL  1\n         DC    X'11C4C81DE4'          ROW  3   COL  1\n         DC    X'11C64C1DE4'          ROW  4   COL  1\n         DC    X'11C8501DE4'          ROW  5   COL  1\n         DC    X'114AD41DE4'          ROW  6   COL  1\n         DC    X'114CD81DE4'          ROW  7   COL  1\n         DC    X'114E5C1DE4'          ROW  8   COL  1\n         DC    X'1150601DE4'          ROW  9   COL  1\n         DC    X'11D2E41DE4'          ROW 10   COL  1\n         DC    X'11D4E81DE4'          ROW 11   COL  1\n         DC    X'11D66C1DE4'          ROW 12   COL  1\n         DC    X'11D8F01DE4'          ROW 13   COL  1\n         DC    X'115AF41DE4'          ROW 14   COL  1\n         DC    X'115CF81DE4'          ROW 15   COL  1\n         DC    X'115E7C1DE4'          ROW 16   COL  1\n         DC    X'1161401DE4'          ROW 17   COL  1\n         DC    X'11E3C41DE4'          ROW 18   COL  1\n         DC    X'11E5C81DE4'          ROW 19   COL  1\n         DC    X'11E74C1DE4'          ROW 20   COL  1\n         DC    X'11E9501DE4'          ROW 21   COL  1\n         DC    X'116BD41DE4'          ROW 22   COL  1\n         DC    X'116DD81DE4'          ROW 23   COL  1\n         DC    X'116F5C1DE4'          ROW 24   COL  1\n         DC    X'11F1601DE4'          ROW 25   COL  1\n         DC    X'11F3E41DE4'          ROW 26   COL  1\n         DC    X'11F5E81DE4'          ROW 27   COL  1\nNOTISSUD DC    CL18'COMMAND NOT ISSUED'\nHEADING1 DC    CL80'K S,DEL=                            99:99:99       X\n                             CONSOLE XX    '\nHELPMSG1 DC    CL80'PF-1   THIS DISPLAY         PF-2  STOP AUTO UPDATE X\n                 PF-3   END                '\nHELPMSG2 DC    CL80'PF-4   AUTO UPDATE 1 SEC    PF-5  ALTERNATE CONSOLEX\n                 PF-6   RESHOW LAST COMMAND'\nHELPMSG3 DC    CL80'PF-7                        PF-8  AUTO UPDATE 10 SEX\n               C PF-9   AUTO UPDATE 4 SEC  '\nHELPMSG4 DC    CL80'PF-10  NOT DEFINED          PF-11 AUTO UPDATE 2 SECX\n                 PF-12  IPL INFO           '\n         DC    CL80'****   ONLY JES2 COMMANDS ARE AUTHORIZED FOR THIS UX\n               SERID         ****          '\nWORKAREA DSECT\nSAVEAREA DS    18F\nUCMTABX  DS    F                   @ OF FIX DCM (IEERDCM)\nRDCM     DS    F                   @ OF PAGEABLE DCM (IEECDCM/IEETDCM)\nWORKLINE DS    CL80\nREPLY    DS    CL132\nBLANKS   DS    CL132\nCMDLINE  DS    CL132\nHEADING  DS    CL80\nSIBPTR   DS    F                   PRT TO SCREEN IMAGE BUFFER\nUCMTAB   DS    F\n         DS    48F                PROVIDE SPACE FOR 48 UCM ADDRESSES\nUCMTABE  EQU   *\nNUMUCMS  DS    H\nCONSOLD  DS    F                   PREVIOUS CONSOLE NUMBER\n         SPACE 5\nCLEAR    DS    XL1                WCC - CLEAR SCREEN\n         DS    XL3                SBA TO ROW 1, COL 1\nCLEARLEN EQU   *-CLEAR                                          KMB1\n         DS    XL1                IC AND REPEAT TO ADDRESS\nENDOFSCR DS    XL2                SBA TO ROW XX, COL YY\n         DS    XL2                FILL SCREEN WITH NULLS\nCURSOR   DS    XL2                SBA TO ROW 1, COL 1\n         DS    XL2                INSERT CURSOR\n*LEARLEN EQU   *-CLEAR\nLASTLINE DS    CL255' '           OPERATORS COMMAND INPUT LINE\nCONNUM   DS    CL2' 1'            CONSOLE NUMBER\nCTYPE    DS    CL4' '\nMASTER   DS    CL8' '             MASTER CONSOLE\nSYS      DS    CL4' '             SYS  AUTHORIZATION\nIO       DS    CL4' '             I/O  AUTHORIZATION\nCONS     DS    CL5' '             CONS AUTHORIZATION\n         DS    CL3' '\n*NIT     DS    CL4' '             UNIT ADDR OF CONSOLE\nTIME     DS    CL3' '             SECONDS REMAINING ON TIMER\nSLASH    DS    CL1'/'\nPAUSE    DS    CL3'1.0'           DELAY IN SECONDS\n         DS    CL2' '\nAREAA    DS    XL1\nCNSLFLAG DS    XL1\nTHRUFLAG DS    XL1\nAUTOFLAG DS    XL1\nISSUFLAG DS    XL1\nRESHOWFL DS    XL1\nHELPFLAG DS    XL1\nUSERFLAG DS    XL1\nCONSFLAG DS    XL1\nCLRFLAG  DS    XL1\nIPLFLAG  DS    XL1\nMOD5FLAG DS    XL1\nCMDFLAG  DS    XL1\nATTNFLG  DS    XL1                                              KMB1\nCONSCURR DS    F                   CONSOLE TO BE LOOKED AT\nCONSASID DS    F                   'CONSOLE' ASID FOR CMS\nNUMLINES DS    F\nCONL     DS    F\nSCNL     DS    F                                                KMB1\nWGTTERM  GTTERM PRMSZE=0,ALTSZE=0,MF=L                          KMB1\nSBALIST  DS    A                   WHICH SBA LIST TO USE        KMB1\nTERMOROW DS    A                   ORIGINAL TERM ROWS           KMB1\nTERMOCOL DS    A                   ORIGINAL TERM COLS           KMB1\nALTSZROW DS    A                   ALTERNATE ROW SIZE           KMB1\nALTSZCOL DS    A                   ALTERNATE COL SIZE           KMB1\nPRMSIZE  DS    H                   PRIMARY SIZE                 KMB1\nALTSIZE  DS    H                   ALTERNATE SIZE               KMB1\nTERMROWS DS    H                   TERMINAL ROWS                KMB1\nTERMCOLS DS    H                   TERMINAL COLUMNS             KMB1\nTERMMOVE DS    H                   MAX DATA TO MOVE             KMB1\nCONROW   DS    H                   NUM DISPLAY ROWS ON CONSOLE  KMB1\nCONCOL   DS    H                   NUM COLUMNS ON CONSOLE & SBA KMB1\nCONROWM2 DS    H                   NOT USED                     KMB1\nCONCOLM6 DS    H                   LEN OF CONSOLE DATA-1        KMB1\nTIMER    DS    F\nRTME     DS    H\nRNUM     DS    H\nUSER     DS    CL8            CONSOLE NAME\nTYPE     DS    CL1\nUSERID   DS    CL7\nTABAREA  DS    CL77\nSELCODE  DS    CL3            LINE SELECTION CODE\nSELSAVE  DS    CL3            LINE SELECTION CODE SAVE AREA\nWORK     DS    D\nDOUBLWD  DS    D\nIPLDATE  DS    F\nIPLTIME  DS    F\nWTOCMD   DS    CL104\nSCREEN   DS    XL1                 WCC - TERMINAL' SCREEN\n         DS    27CL142                                          KMB1\n         DS    CL124     EXTRA FOR MOD5\nSCRLEN   EQU   *-SCREEN\nBUF      DS    60CL142             CONSOLE SCREEN               KMB1\nBUFLEN   EQU   *-BUF\nWORKLENG EQU   *-WORKAREA\n         PRINT NOGEN\n         TITLE '*** TSO USER PROFILE TABLE DSECT ***'\n         IKJUPT                    TSO USER PROFILE TABLE\n         TITLE '*** COMMUNICATION VECTOR TABLE ***'\n         CVT   DSECT=YES\n         TITLE '*** J S C B ***'\n         IEZJSCB\n         TITLE '*** T  C  B ***'\n         IKJTCB DSECT=YES\n         TITLE '*** RDCM DSECT ***'\n         IEECRDCM\n         TITLE '*** TDCM DSECT ***'\n         PRINT GEN\nIEETDCM  DSECT ,\n         IEECDCM\n         PRINT   GEN\n         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***'\n         IEECUCM FORMAT=NEW,LIST=YES                            KMB1\n         PRINT  NOGEN\n         IHAASVT\n         TITLE '*** ADDRESS SPACE CONTROL BLOCK ***'\n         IHAASCB\n         TITLE '*** TSB DSECT ***'\n         IKJTSB LIST=YES\n         TITLE '*** CHAIN     ***'\n         IEECHAIN\n         IEESMCA\n         IHAASXB                   ASXB ---------                  KMB1\n         IHAPSA                    PSA  ---------                  KMB1\n         IHAACEE                   ACEE ---------                  KMB1\n         IEFUCBOB PREFIX=YES\n         YREGS ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPYTP": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x16\\x00\\x985_\\x01\\x11\\x08/\\x10W\\x01T\\x00\\xcd\\x00\\x9d\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1998-12-21T00:00:00", "modifydate": "2011-03-23T10:57:16", "lines": 340, "newlines": 205, "modlines": 157, "user": "KBASS"}, "text": "COPYTP#  TITLE ' PROGRAM TO  COPY TAPE TO TAPE SEVERAL FILES'\n*--------------------------------------------------------------------*\n*        COPY TAPE TO TAPE, MIRROR  IMAGE                            *\n*        THIS WILL COPY TAPES THAT NO OTHER UTILITY WILL             *\n*        SUPPORTS 64K BLKSIZE                                        *\n* SJB3   CHECK TO SEE IF SYSUT2 IS DD DUMMY (MAPTAPE) AND NEVER  CALL*\n*              WTAPE                                                 *\n*--------------------------------------------------------------------*\n*    //SB1      EXEC PGM=COPYTP  ,PARM='003'\n*    //STEPLIB  DD  DISP=SHR,DSN=KBASS.PERM.LOAD\n*    //SYSPRINT DD  SYSOUT=*\n*    //SYSUT1   DD  DSN=&&I1,DISP=(OLD,PASS),UNIT=CTAPE1,\n*    //             VOL=(,RETAIN,SER=201226),\n*    //             LABEL=(1,BLP,EXPDT=98000)\n*    //SYSUT2   DD  DSN=&&O1,DISP=(NEW,PASS),UNIT=CTAPE1,\n*    //             VOL=(,RETAIN,SER=XX1226),\n*    //             LABEL=(1,BLP,EXPDT=98000)\n*--------------------------------------------------------------------*\n*        CAN BE USED TO MAP A TAPE VIA SYSUT2 DD DUMMY               *\n*--------------------------------------------------------------------*\n*\n         MACRO\n&L       CNVT  &FLD,&EMASK,&LENGTH,&OFF\n&L       CVD   R0,DEC\n         OI    DEC+7,X'0F'\n         MVC   &FLD.(&LENGTH),&EMASK\n         ED    &FLD.(&LENGTH),DEC+&OFF\n         MEND\n*        PRINT NOGEN\n&MAXERR  SETA  0100                MAX IS 4096, USING LA\n         EJECT\nCOPYTP   CSECT\n         CONNECT LSIZE,WORK,BASE=R12,PARM=R11,LI=L                  SJB\n         ENTRY COPYTP\n         LR    R1,R11                                               SJB\n         L     R1,0(,R1)           ADDR OF PARM\n         LH    R2,0(,R1)           LENGTH OF PARM\n         CH    R2,=H'5'            SEE IF MORE THAN 3 DIG\n         BH    BAD\n         CH    R2,=H'0'            SEE IF NO PARM\n         BH    OK\n         L     R11,=F'99999'\n         B     OK2\nBAD      WTO   'COPYTP - PARM FIELD ERROR'\n         ABEND 2\nOK       DS    0H\n         BCTR  R2,0                     DECR BY 1 FOR PACK\nPK       PACK  DEC(8),2(*-*,R1)         PACK NUMBER\n         EX    R2,PK\n         CVB   R11,DEC                  CONVERT IT TO BINARY\n         LTR   R11,R11                  MAKE SURE ITS POSITIVE\n         BNP   BAD\nOK2      DS    0H\n         MVI   FLAG,0                                           SJB3\n         CALL  OPENT,(ONE,ONE)          OPEN SYSUT1 FOR INPUT\n*--------------------------------------------------------------------*\n*              CHECK TO SEE IF SYSUT2 IS DD DUMMY (MAPTAPE)          *\n*        IF SO THEN SET $NULL2 AND NEVER CALL WTAPE                  *\n*--------------------------------------------------------------------*\n         DEVTYPE =CL8'SYSUT2',DEC                                  SJB3\n         CLC   DEC,=F'0'                 IS A DD DUMMY             SJB3\n         BNE   XOPEN2                                              SJB3\n         OI    FLAG,$NULL2                                         SJB3\n         B     XOPEN2A                                             SJB3\nXOPEN2   DS    0H                                                  SJB3\n         CALL  OPENT,(TWO,TWO)          OPEN SYSUT2 FOR OUTPUT\nXOPEN2A  DS    0H                                                  SJB3\n         OPEN  (PTR,(OUTPUT))           STATITICS FILE\n*\n         PUT   PTR,TITL1\n         PUT   PTR,TITL2\n         MVC   TMIN,NINES               MIN BLOCK/TAPE = 999999\n         MVC   TMAX,ZERO                MAX BLOCK/TAPE = 0\n         LA    R3,0                     # BLOCKS/TAPE = 0\n         LA    R8,0                     # FILES  DONE = 0\n*\nLOOP     LA    R4,0                     # BLOCKS/FILE = 0\n         LA    R8,1(,R8)                COUNT # FILES DONE\n*\n         MVC   MIN,NINES                MIN BLOCK/FILE = 999999\n         MVC   MAX,ZERO                 MAX BLOCK/FILE = 0\n*\nLOOP1    LA    R6,&MAXERR               ERROR COUNTER\n*\nLOOP2    LA    R2,BUF                   READ TAPE\n         CALL  RTAPE,(ONE,(2),BYTES)    READ TAPE\n         C     R15,FOUR                 EOF?\n         BE    EOF                          YES\n         C     R15,EIGHT                ERR?\n         BNE   RGOOD                        NOPE\n         LA    R1,=CL8'READ'       SAY WHERE THE ERR CAME FROM  SJB5\n         BAL   R14,ERR                  YES, GOTO ERR ROUTINE\n         B     LOOP2                    TRY READ AGAIN\nRGOOD    DS    0H\n         CLC   =C'VOL1',BUF\n         BE    RGVOL1\n         CLC   =C'HDR1',BUF\n         BE    RGDSN1\n         CLC   =C'HDR2',BUF\n         BE    RGDSN2\n         CLC   =C'EOF1',BUF\n         BE    RGDSN3F\n         CLC   =C'EOV1',BUF        ONLY OF DSN SPANS VOLUMES\n         BE    RGDSN3V\n         B     RG0100\nRGVOL1   DS    0H                  VOL1 FOUND\n         MVC   VOLSER,BUF+04\n         B     RG0100\nRGDSN1   DS    0H                  HDR1 FOUND\n         MVC   DSNAM,BUF+04        LAST 17 BYTES OF DSN\n         B     RG0100\nRGDSN2   DS    0H                  HDR2 FOUND\n         MVC   RECFM+0(1),BUF+04   RECFM-1\n         MVC   RECFM+1(1),BUF+38   RECFM-2\n         MVI   RECFM+2,C'/'\n         MVC   LRECL,BUF+10        LRECL\n         MVI   LRECL+5,C'/'\n         MVC   BLKSZ,BUF+05        BLKSIZE\n         MVC   JOBSTEP,BUF+17      JOB-STEP\n         B     RG0100\nRGDSN3V  DS    0H                  EOV1 FOUND (DSN SPANS VOLUMES)\n         MVC   VOLSER(3),=C'EOV'\n         B     RGDSN3\nRGDSN3F  DS    0H                  EOF1 FOUND\n         MVC   VOLSER(3),=C'EOF'\n*--------------------------------------------------------------------*\n*              ADD CREATION DATE  CYYDDD WHERE C=B(1900), =0(2000)   *\n*--------------------------------------------------------------------*\n         MVC   DSNAM,BLANKS\n         MVC   DSNAM+9+0(2),=C'19'\n         CLI   BUF+41,C'0'         BLANK IS 1900, 0=2000, 1=2100\n         BL    CRDT0100            NO\n         MVC   DSNAM+9+0(2),=C'20'\n         OC    DSNAM+9+1(1),BUF+41 MAKE IT 20, 21, 22 ETC.\nCRDT0100 DS    0H\n         MVC   DSNAM+9+2(2),BUF+42 MOVE IN YY\n         MVI   DSNAM+9+4,C'.'      .\n         MVC   DSNAM+9+5(3),BUF+44 MOVE IN DDD\n*--------------------------------------------------------------------*\n*              ADD DATE AND TIME TO THE EOF LINE WHERE JOBSTEP IS    *\n*--------------------------------------------------------------------*\n         TIME  DEC                 R0=HHMMSSTT R1=0CYYDDDF\n         STM   R0,R1,DEC2          DEC2(0-3)=TIME, DEC2(4-7)=DATE\n         TR    DEC2+4(1),TRANCENT  CNVT 00 TO 19, 01 TO 20 ETC\n         OI    DEC2+4+3,X'0F'      ZONE IT.\n         UNPK  JOBSTEP+00+00(05),DEC2+4+0(3) YYYY\n         MVI   JOBSTEP+00+04,C'.'                .\n         UNPK  JOBSTEP+05+00(03),DEC2+4+2(2)      DDD\n*                 DEC2+4           TIME=HHMMSSTT\n         UNPK  JOBSTEP+09+00(03),DEC2+0+0(2)  HH\n         MVI   JOBSTEP+09+02,C':'               :\n         UNPK  JOBSTEP+09+03(03),DEC2+0+1(2)     MM\n         MVI   JOBSTEP+09+05,C':'                  :\n         UNPK  JOBSTEP+09+06(03),DEC2+0+2(2)        SS\n         MVI   JOBSTEP+09+08,C' '\nRGDSN3   DS    0H\n         CLC   =C'0000',BUF+76       IS IT ALL ZEROS?\n         BE    RGDSN3A\n         MVC   BLKSZ-04(04),BUF+76 MOVE IN TOP 4 BYTES OF #BLKS\nRGDSN3A  DS    0H\n         MVC   BLKSZ(06),BUF+54 MOVE IN LAST 6 BYTES OF IT\nRG0100   DS    0H\n         MVI   EOT,X'00'           TURN OFF EOT                    SJB\n         MVI   IOERROR,X'00'       TURN OFF IOERROR FOR THIS REC   SJB3\n         LA    R3,1(,R3)                # BLOCKS/TAPE\n         LA    R4,1(,R4)                # BLOCKS/FILE\n         L     R5,BYTES                 # BYTES/BLOCK\n*\n*    CHECK FOR MIN NUMBER OF  BYTES IN ONE BLOCK AND TOTAL\n*\n         C     R5,MIN                NEW MIN BLOCK/FILE\n         BNL   MAXCHECK                NOPE\n         ST    R5,MIN                SAVE NEW MIN/FILE\n         C     R5,TMIN               NEW MIN BLOCK/TAPE\n         BNL   MAXCHECK                NOPE\n         ST    R5,TMIN               SAVE NEW MIN/TAPE\n*\n*    CHECK FOR MAX NUMBER OF  BYTES IN ONE BLOCK AND TOTAL\n*\nMAXCHECK C     R5,MAX                 NEW MAX BLOCK/FILE\n         BNH   WRITE                    NOPE\n         ST    R5,MAX                 SAVE NEW MAX/FILE\n         C     R5,TMAX                NEW MAX BLOCK/TAPE\n         BNH   WRITE                    NOPE\n         ST    R5,TMAX                SAVE NEW MAX/TAPE\n*\nWRITE    LA    R2,BUF                  WRITE TAPE\n         TM    FLAG,$NULL2         IS SYSUT2 DD DUMMY?          SJB3\n         BO    LOOP1               YES, DON'T WRITE             SJB3\n         CALL  WTAPE,(TWO,(2),BYTES)   WRITE TAPE\n         C     R15,FOUR                ERR?\n         BNE   LOOP1                       NOPE\n         LA    R1,=CL8'WRITE'      SAY WHERE THE ERR CAME FROM  SJB5\n         BAL   R14,ERR                 GO ERR ROUTINE\n         ABEND 1,DUMP\n         B     WRITE\n*\nEOF      DS    0H\n         TM    FLAG,$NULL2         IS SYSUT2 DD DUMMY?          SJB3\n         BO    EOF2                YES, DON'T WRITE             SJB3\n         CALL  WTMARK,(TWO)            PUT EOF ON OUTPUT TAPE\nEOF2     DS    0H                                               SJB3\n         CLI   EOT,X'FF'           SECOND EOT\n         BE    ENDTAPE             YES,GO TERM\n         CLC   =C'EOV1',BUF        EOT? (ONLY OF DSN SPANS VOLS)\n         BE    ENDTAPE             YES, END OF TAPE\n*\nEOFO     DS    0H\n         MVI   EOT,X'FF'           INDICATE EOF\n         BAL   R9,REPORT\n         BCT   R11,LOOP                ALL OF FILES DONE?\nENDTAPE  CALL  CLOSET,(ONE)                YES,CLOSE THEM ALL\n         TM    FLAG,$NULL2         IS SYSUT2 DD DUMMY?          SJB3\n         BO    EOT2                YES, DON'T WRITE             SJB3\n         CALL  CLOSET,(TWO)\nEOT2     DS    0H                                               SJB3\n         MVC   MIN,TMIN\n         MVC   MAX,TMAX\n         LR    R4,R3\n         MVI   EOJ,X'FF'              END OF JOB FLAG\n         BAL   R9,REPORT\n         CLOSE (PTR)\n         RELEASE LSIZE,RC=0,LI=L       BYE\n*\nREPORT   DS    0H\n         TM    EOJ,X'FF'\n         BZ    NOTEOJ\n         PUT   PTR,TITL4               PRINT DASHES\n         MVC   FILEN,BLANKS\n         B     REPEOJ\n*\nNOTEOJ   LR    R0,R8\n         CNVT  DEC2,MASK1,6,5      R0=INPUT,\n         MVC   FILEN,DEC2+1\nREPEOJ   DS    0H\n*\n         LR    R0,R4\n         CNVT  BLKREAD,MASK2,12,3\n*\n         L     R0,MIN\n         CNVT  MINBLK,MASK3,7,5\n*\n         L     R0,MAX\n         CNVT  MAXBLK,MASK3,7,5\n         PUT   PTR,TITL3\n         MVC   VOLSER(VOLSERLN),BLANKS\n         BR    R9\n*\nERR      DS    0H\n         ST    R14,SAVER142\n         CLI   IOERROR,X'00'       IOERROR ON SAME REC 2ND TIME SJB3\n         BNE   ERRDIE                YES\n*\n         MVC   ERRTASK,0(R1)       MOVE IN WHERE ERR CAME FROM  SJB5\n         LR    R0,R4\n         CNVT  ERRBLK,MASK2,12,3\n         PUT   PTR,ERRMSG\n*\n         BCT   R6,ERRET            DECREMENT MAX ERROR COUNT\n         LA    R6,&MAXERR\n         MVC   FSREC,=F'1'                                      SJB\n         CALL  FSREC,(ONE,FSREC)   SKIP ONE RECORD\n         CLC   FSREC,=F'1'         SKIP RECORD FAILED           SJB4\n         BE    ERRDIE              RIGHT, GO DIE                SJB4\n         MVI   IOERROR,X'FF'\n         B     ERRET\nERRDIE   DS    0H                  IOERROR 2ND TIME ON RECORD   SJB3\n         ABEND 101                                              SJB3\nERRET    DS    0H\n         L     R14,SAVER142\n         BR    R14\nFSREC    DC    F'1'                                                 SJB\nDEC      DS    D\nDEC2     DS    D\n         LTORG\nSAVER14  DC    F'0'\nSAVER142 DC    F'0'\nBYTES    DC    F'0'\nZERO     DC    F'0'\nONE      DC    F'1'\nTWO      DC    F'2'\nFOUR     DC    F'4'\nEIGHT    DC    F'8'\nNINES    DC    F'999999'\nMIN      DC    F'0'\nMAX      DC    F'0'\nTMIN     DC    F'0'\nTMAX     DC    F'0'\n*\nTITL1    DC   CL133'1       NUMBER OF      LENGTH OF       LENGTH OF  '\nTITL2    DC   CL133' FILE  BLOCKS READ   SHORTEST BLOCK  LONGEST BLOCK X\n               VOLSER RF/LRECL/BLKSZ DSNAME-17         JOB-STEP'\nTITL3    DC    CL133' '\n         ORG   TITL3\nFILEN    DC    CL5' '\nFILL1    DC    CL1' '\nBLKREAD  DC    CL12' '\nFILL2    DC    CL9' '\nMINBLK   DC    CL7' '\nFILL3    DC    CL9' '\nMAXBLK   DS    CL7' '\n         DS    C' '\nVOLSER   DC    CL6' ',C' '\nRECFM    DC    CL2' ',C' '\nLRECL    DC    CL5' ',C' '\nBLKSZ    DC    CL5' ',C' '\nDSNAM    DC    CL17' ',C' '\nJOBSTEP  DC    CL17' '\nVOLSERLN EQU   *-VOLSER\n         ORG   TITL3+133\nTITL4    DS    0CL133\n         DC    52CL1'-',CL81' '\nERRMSG   DC    CL133' '\n         ORG   ERRMSG\n         DC    C'**** ERROR ON BLOCK # '\nERRBLK   DC    CL12' '\n         DC    C' **** DOING A '\nERRTASK  DC    CL8' '\n         ORG   ERRMSG+133\nTRANCENT DC    X'19202122'         CENTURY CONVERT 0=19, 1=20,  ETC\nMASK1    DC    X'402020202120'\nMASK2    DC    X'402020206B2020206B202120'\nMASK3    DC    X'4020206B202120'\n*\nFLAG     DC    X'00'                                              SJB3\n$NULL2   EQU   X'80'               SYSUT2 IS \"DD  DUMMY\" MAPTAPE  SJB3\nEOJ      DC    X'00'\nEOT      DC    X'00'\nIOERROR  DC    X'00'\nBLANKS   DC    CL133' '\n         PRINT NOGEN\nPTR      DCB   DDNAME=SYSPRINT,MACRF=(PM),LRECL=133,RECFM=FBA,         X\n               BLKSIZE=3990,DSORG=PS,BUFNO=2\nLSIZE    DC    A(LWORK)                                             SJB\nWORK     DSECT                                                      SJB\nSAVEA    DS    9D                                                   SJB\nBUF      DS    (X'FFFF')C,C                                         SJB\nLWORK    EQU   *-WORK                                               SJB\n         YREGS                                                      SJB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPYTPX": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00T\\x01\\x00\\x19_\\x01\\x18\\x05\\x8f\\x112\\x01\\xa3\\x00\\xd7\\x01\\xa3\\xc3\\xc2\\xe3\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2000-07-13T00:00:00", "modifydate": "2018-02-27T11:32:54", "lines": 419, "newlines": 215, "modlines": 419, "user": "CBTUSER"}, "text": "         PUNCH ' ORDER COPYTP(P)'\n         PUNCH ' ORDER RTAPE2(P)'\nCOPYTP#  TITLE ' PROGRAM TO  COPY TAPE TO TAPE SEVERAL FILES'\n* ----------------------------------------------------------\n* ATTRIBUTES NORENT, AMODE=24, RMODE=24---------------------\n* ----------------------------------------------------------\n*--------------------------------------------------------------------*\n*        COPY TAPE TO TAPE, MIRROR  IMAGE                            *\n*        THIS WILL COPY TAPES THAT NO OTHER UTILITY WILL !           *\n*        SUPPORTS 256K BLKSIZE                                       *\n* SJB3   CHECK TO SEE IF SYSUT2 IS DD DUMMY (MAPTAPE) AND NEVER  CALL*\n*              WTAPE                                                 *\n* KBASS  0517-11    GOT RID OF CONNECT/RELEASE MACROS                *\n* KBASS  0517-11    MOVED MOST MODIFED DATA TO DYNAMIC STORAGE       *\n*--------------------------------------------------------------------*\n*    //SB1      EXEC PGM=COPYTP  ,PARM='003'\n*    //STEPLIB  DD  DISP=SHR,DSN=KBASS.PERM.LOAD\n*    //SYSPRINT DD  SYSOUT=*\n*    //SYSUT1   DD  DSN=&&I1,DISP=(OLD,PASS),UNIT=CTAPE1,\n*    //             VOL=(,RETAIN,SER=201226),\n*    //             LABEL=(1,BLP,EXPDT=98000)\n*    //SYSUT2   DD  DSN=&&O1,DISP=(NEW,PASS),UNIT=CTAPE1,\n*    //             VOL=(,RETAIN,SER=XX1226),\n*    //             LABEL=(1,BLP,EXPDT=98000)\n*--------------------------------------------------------------------*\n*        CAN BE USED TO MAP A TAPE VIA SYSUT2 DD DUMMY               *\n*--------------------------------------------------------------------*\n*\n* SINGLE FILE, SINGLE VOLUME\n* |VOL1|HDR1|HDR2|TM|          FILE-A |TM|EOF1|EOF2|TM|TM ...\n*\n* SINGLE FILE, MULTI  VOLUME\n* |VOL1|HDR1|HDR2|TM| 1ST PART FILE-A |TM|EOV1|EOV2|TM ...\n* |VOL1|HDR1|HDR2|TM| 2ND PART FILE-A |TM|EOV1|EOV2|TM ...\n* |VOL1|HDR1|HDR2|TM| LASTPART FILE-A |TM|EOF1|EOF2|TM|TM ...\n*\n*\n         MACRO\n&L       CNVT  &FLD,&EMASK,&LENGTH,&OFF\n&L       CVD   R0,WDEC\n         OI    WDEC+7,X'0F'\n         MVC   &FLD.(&LENGTH),&EMASK\n         ED    &FLD.(&LENGTH),WDEC+&OFF\n         MEND\n*        PRINT NOGEN\n&MAXERR  SETA  0010                MAX IS 4096, USING LA\n         EJECT\nCOPYTP   CSECT\nCOPYTP   AMODE 24\nCOPYTP   RMODE 24\n         ENTRY COPYTP\n         SAVE  (14,12),T,COPYTPX_&SYSDATC._&SYSTIME.\n         LR    R12,R15\n         USING COPYTP,R12\n         LR    R11,R1\n*--------------------------------------------------------------------*\n*              GET STORAGE AND CHAIN SAVE AREAS                      *\n*--------------------------------------------------------------------*\n         STORAGE OBTAIN,SP=1,LENGTH=LWORK                       0517-11\n         LR    R3,R1                                            0517-11\n         ST    R13,4(,R3)          SAVE THE CALLER'S R13        0517-11\n         ST    R3,8(,R13)                                       0517-11\n         LR    R13,R3                                           0517-11\n         USING WORK,R13                                         0517-11\n         XC    WCLEAR1(WCLEAR1L),WCLEAR1 CLEAR SOME STORAGE     0517-11\n         LR    R1,R11                                               SJB\n*--------------------------------------------------------------------*\n*              PROCESS PARM FIELD TO SEE IF NNN FILES TO COPY THERE  *\n*--------------------------------------------------------------------*\n         L     R1,0(,R1)           ADDR OF PARM\n         LH    R2,0(,R1)           LENGTH OF PARM\n         MVI   VOLOPT,0            SET OPTION J OFF                CBT1\n         CH    R2,=H'0'            IF NO PERM                      CBT1\n         BE    PARMJX                SKIP CHECK FOR PARM=J         CBT1\n         CLI   2(R1),C'J'          IF PARM BEGINS WITH 'J'         CBT1\n         BNE   PARMJX                THEN                          CBT1\n         MVI   VOLOPT,1              SET OPTION J                  CBT1\n         L     R11,NINES             SET R11 TO NINES              CBT1\n         CH    R2,=H'1'              IF NOTHING FOLLOWS J          CBT1\n         BE    OK2                     USE NINES                   CBT1\n         CLI   3(R1),C','            IF NO COMMA AFTER J           CBT1\n         BNE   BAD                     BAD PARM                    CBT1\n         LA    R1,2(,R1)             ADJUST R1 BY +2               CBT1\n         SH    R2,=H'2'              ADJUST R2 BY -2               CBT1\nPARMJX   DS    0H                                                  CBT1\n         CH    R2,=H'5'            SEE IF MORE THAN 3 DIG\n         BH    BAD\n         CH    R2,=H'0'            SEE IF NO PARM\n         BH    OK\n         L     R11,NINES\n         B     OK2\nBAD      WTO   'COPYTP - PARM FIELD ERROR'\n         ABEND 2\nOK       DS    0H\n         BCTR  R2,0                     DECR BY 1 FOR PACK\nPK       PACK  WDEC(8),2(*-*,R1)        PACK NUMBER\n         EX    R2,PK\n         CVB   R11,WDEC                 CONVERT IT TO BINARY\n         LTR   R11,R11                  MAKE SURE ITS POSITIVE\n         BNP   BAD\nOK2      DS    0H\n         MVI   WFLAG,0                                             SJB3\n         CALL  OPENT,(ONE,ONE),MF=(E,WCALL) OPEN SYSUT1 FOR INPUT\n*--------------------------------------------------------------------*\n*              CHECK TO SEE IF SYSUT2 IS DD DUMMY (MAPTAPE)          *\n*        IF SO THEN SET $NULL2 AND NEVER CALL WTAPE                  *\n*--------------------------------------------------------------------*\n         DEVTYPE =CL8'SYSUT2',WDEC                                 SJB3\n         CLC   WDEC,=F'0'                IS A DD DUMMY             SJB3\n         BNE   XOPEN2                                              SJB3\n         OI    WFLAG,$NULL2                                        SJB3\n         B     XOPEN2A                                             SJB3\nXOPEN2   DS    0H                                                  SJB3\n         CLI   VOLOPT,0                                            CBT1\n         BE    DUPEVOL                                             CBT1\n         CALL  OPENT,(TWO,THR),MF=(E,WCALL) OPEN SYSUT2 FOR OUTPUT CBT1\n         B     XOPEN2A                                             CBT1\nDUPEVOL  DS    0H                                                  CBT1\n         CALL  OPENT,(TWO,TWO),MF=(E,WCALL) OPEN SYSUT2 FOR OUTPUT\nXOPEN2A  DS    0H                                                  SJB3\n         OPEN  (PTR,(OUTPUT))           STATITICS FILE\n*\n         PUT   PTR,TITL1\n         PUT   PTR,TITL2\n         MVC   WTMIN,NINES              MIN BLOCK/TAPE = 999999\n         MVC   WTMAX,ZERO               MAX BLOCK/TAPE = 0\n         LA    R3,0                     # BLOCKS/TAPE = 0\n         LA    R8,0                     # FILES  DONE = 0\n*\nLOOP     LA    R4,0                     # BLOCKS/FILE = 0\n         LA    R8,1(,R8)                COUNT # FILES DONE\n*\n         MVC   WBMIN,NINES              MIN BLOCK/FILE = 999999\n         MVC   WBMAX,ZERO               MAX BLOCK/FILE = 0\n*\nLOOP1    LA    R6,&MAXERR               ERROR COUNTER\n         TM    WFLAG,$EOV1              WAS LAST READ AN EOV1?\n         BO    EOF                       YES\n*\nLOOP2    LA    R2,WBUF                  READ TAPE\n         CALL  RTAPE2,(ONE,(2),WBYTES),MF=(E,WCALL) READ TAPE\n         C     R15,FOUR                 EOF?\n         BE    EOF                          YES\n         C     R15,EIGHT                ERR?\n         BNE   RGOOD                        NOPE\n         LA    R1,=CL8'READ'       SAY WHERE THE ERR CAME FROM  SJB5\n         BAL   R14,ERR                  YES, GOTO ERR ROUTINE\n         B     LOOP2                    TRY READ AGAIN\nRGOOD    DS    0H\n         CLC   =C'VOL1',WBUF\n         BE    RGVOL1\n         CLC   =C'HDR1',WBUF\n         BE    RGDSN1\n         CLC   =C'HDR2',WBUF\n         BE    RGDSN2\n         CLC   =C'EOF1',WBUF\n         BE    RGDSN3F\n         CLC   =C'EOV1',WBUF       ONLY IF DSN SPANS VOLUMES\n         BE    RGDSN3V\n         B     RG0100\nRGVOL1   DS    0H                  VOL1 FOUND\n         MVC   VOLSER,WBUF+04\n         B     RG0100\nRGDSN1   DS    0H                  HDR1 FOUND\n         MVC   DSNAM,WBUF+04       LAST 17 BYTES OF DSN\n         B     RG0100\nRGDSN2   DS    0H                  HDR2 FOUND\n         MVC   RECFM+0(1),WBUF+04  RECFM-1\n         MVC   RECFM+1(1),WBUF+38  RECFM-2\n         MVI   RECFM+2,C'/'\n         MVC   LRECL,WBUF+10       LRECL\n         MVI   LRECL+5,C'/'\n         MVC   BLKSZ,WBUF+05       BLKSIZE\n         MVC   JOBSTEP,WBUF+17     JOB-STEP\n         B     RG0100\nRGDSN3V  DS    0H                  EOV1 FOUND (DSN SPANS VOLUMES)\n         MVC   VOLSER(6),=CL6'EOV'\n         OI    WFLAG,$EOV1         SET EOV1 FLAG\n         B     RGDSN3F2\nRGDSN3F  DS    0H                  EOF1 FOUND\n         MVC   VOLSER(6),=CL6'EOF'\nRGDSN3F2 DS    0H\n*--------------------------------------------------------------------*\n*              ADD CREATION DATE  CYYDDD WHERE C=B(1900), =0(2000)   *\n*--------------------------------------------------------------------*\n         MVC   DSNAM,BLANKS\n         MVC   DSNAM+9+0(2),=C'19'\n         CLI   WBUF+41,C'0'        BLANK IS 1900, 0=2000, 1=2100\n         BL    CRDT0100            NO\n         MVC   DSNAM+9+0(2),=C'20'\n         OC    DSNAM+9+1(1),WBUF+41 MAKE IT 20, 21, 22 ETC.\nCRDT0100 DS    0H\n         MVC   DSNAM+9+2(2),WBUF+42 MOVE IN YY\n         MVI   DSNAM+9+4,C'.'      .\n         MVC   DSNAM+9+5(3),WBUF+44 MOVE IN DDD\n*--------------------------------------------------------------------*\n*              ADD DATE AND TIME TO THE EOF LINE WHERE JOBSTEP IS    *\n*--------------------------------------------------------------------*\n         TIME  DEC                 R0=HHMMSSTT R1=0CYYDDDF\n         STM   R0,R1,WDEC2         WDEC2(0-3)=TIME, WDEC2(4-7)=DATE\n         TR    WDEC2+4(1),TRANCENT CNVT 00 TO 19, 01 TO 20 ETC\n         OI    WDEC2+4+3,X'0F'     ZONE IT.\n         UNPK  JOBSTEP+00+00(05),WDEC2+4+0(3) YYYY\n         MVI   JOBSTEP+00+04,C'.'                .\n         UNPK  JOBSTEP+05+00(03),WDEC2+4+2(2)     DDD\n*                 WDEC2+4          TIME=HHMMSSTT\n         UNPK  JOBSTEP+09+00(03),WDEC2+0+0(2) HH\n         MVI   JOBSTEP+09+02,C':'               :\n         UNPK  JOBSTEP+09+03(03),WDEC2+0+1(2)    MM\n         MVI   JOBSTEP+09+05,C':'                  :\n         UNPK  JOBSTEP+09+06(03),WDEC2+0+2(2)       SS\n         MVI   JOBSTEP+09+08,C' '\nRGDSN3   DS    0H\n         CLC   =C'0000',WBUF+76      IS IT ALL ZEROS?\n         BE    RGDSN3A\n         MVC   BLKSZ-04(04),WBUF+76 MOVE IN TOP 4 BYTES OF #BLKS\nRGDSN3A  DS    0H\n         MVC   BLKSZ(06),WBUF+54 MOVE IN LAST 6 BYTES OF IT\nRG0100   DS    0H\n         MVI   WEOT,X'00'          TURN OFF EOT                    SJB\n         MVI   WIOERROR,X'00'      TURN OFF IOERROR FOR THIS REC   SJB3\n         LA    R3,1(,R3)                # BLOCKS/TAPE\n         LA    R4,1(,R4)                # BLOCKS/FILE\n         L     R5,WBYTES                # BYTES/BLOCK\n*\n*    CHECK FOR MIN NUMBER OF BYTES IN ONE BLOCK AND TOTAL\n*\n         C     R5,WBMIN              NEW MIN BLOCK/FILE\n         BNL   MAXCHECK                NOPE\n         ST    R5,WBMIN              SAVE NEW MIN/FILE\n         C     R5,WTMIN              NEW MIN BLOCK/TAPE\n         BNL   MAXCHECK                NOPE\n         ST    R5,WTMIN              SAVE NEW MIN/TAPE\n*\n*    CHECK FOR MAX NUMBER OF BYTES IN ONE BLOCK AND TOTAL\n*\nMAXCHECK C     R5,WBMAX               NEW MAX BLOCK/FILE\n         BNH   WRITE                    NOPE\n         ST    R5,WBMAX               SAVE NEW MAX/FILE\n         C     R5,WTMAX               NEW MAX BLOCK/TAPE\n         BNH   WRITE                    NOPE\n         ST    R5,WTMAX               SAVE NEW MAX/TAPE\n*\nWRITE    LA    R2,WBUF                 WRITE TAPE\n         TM    WFLAG,$NULL2        IS SYSUT2 DD DUMMY?          SJB3\n         BO    LOOP1               YES, DON'T WRITE             SJB3\n         CALL  WTAPE,(TWO,(2),WBYTES),MF=(E,WCALL) WRITE TAPE\n         C     R15,FOUR                ERR?\n         BNE   LOOP1                       NOPE\n         LA    R1,=CL8'WRITE'      SAY WHERE THE ERR CAME FROM  SJB5\n         BAL   R14,ERR                 GO ERR ROUTINE\n         ABEND 1,DUMP\n         B     WRITE\n*\nEOF      DS    0H\n         TM    WFLAG,$NULL2        IS SYSUT2 DD DUMMY?          SJB3\n         BO    EOF2                YES, DON'T WRITE             SJB3\n         CALL  WTMARK,(TWO),MF=(E,WCALL) PUT EOF ON OUTPUT TAPE\nEOF2     DS    0H                                               SJB3\n         CLI   WEOT,X'FF'          SECOND EOT\n         BE    ENDTAPE             YES,GO TERM\n*\nEOFO     DS    0H\n         MVI   WEOT,X'FF'          INDICATE EOF\n         BAL   R9,REPORT\n*\n         TM    WFLAG,$EOV1         ONLY 1 EOF AFTER THE EOV\n         BO    ENDTAPE              YES, END OF TAPE\n*\n         BCT   R11,LOOP                ALL OF FILES DONE?\n*\nENDTAPE  CALL  CLOSET,(ONE),MF=(E,WCALL) YES,CLOSE THEM ALL\n         TM    WFLAG,$NULL2        IS SYSUT2 DD DUMMY?          SJB3\n         BO    EOT2                YES, DON'T WRITE             SJB3\n         CALL  CLOSET,(TWO),MF=(E,WCALL)\nEOT2     DS    0H                                               SJB3\n         MVC   WBMIN,WTMIN\n         MVC   WBMAX,WTMAX\n         LR    R4,R3\n         MVI   WEOJ,X'FF'             END OF JOB FLAG\n         BAL   R9,REPORT\n*\n         CLOSE (PTR)\n         LR    R1,R13                                           0517-11\n         L     R13,4(,R13)                                      0517-11\n         STORAGE RELEASE,SP=1,LENGTH=LWORK,ADDR=(1)             0517-11\n         RETURN (14,12),RC=0           BYE                      0517-11\n*\nREPORT   DS    0H\n         CLI   WEOJ,X'FF'\n         BNE   NOTEOJ\n         PUT   PTR,TITL4               PRINT DASHES\n         MVC   FILEN,BLANKS\n         B     REPEOJ\n*\nNOTEOJ   LR    R0,R8\n         CNVT  WDEC2,MASK1,6,5     R0=INPUT,\n         MVC   FILEN,WDEC2+1\nREPEOJ   DS    0H\n*\n         LR    R0,R4\n         CNVT  BLKREAD,MASK2,12,3\n*\n         L     R0,WBMIN\n         CNVT  MINBLK,MASK3,10,4\n*\n         L     R0,WBMAX\n         CNVT  MAXBLK,MASK3,10,4\n         PUT   PTR,TITL3\n         MVC   VOLSER(VOLSERLN),BLANKS\n         BR    R9\n*\nERR      DS    0H\n         ST    R14,WSAVR142\n         CLI   WIOERROR,X'00'      IOERROR ON SAME REC 2ND TIME SJB3\n         BNE   ERRDIE                YES\n*\n         MVC   ERRTASK,0(R1)       MOVE IN WHERE ERR CAME FROM  SJB5\n         LR    R0,R4\n         CNVT  ERRBLK,MASK2,12,3\n         PUT   PTR,ERRMSG\n*\n         BCT   R6,ERRET            DECREMENT MAX ERROR COUNT\n         LA    R6,&MAXERR\n         MVC   WFSREC,=F'1'                                     SJB\n         CALL  FSREC,(ONE,WFSREC),MF=(E,WCALL) SKIP ONE RECORD\n         CLC   WFSREC,=F'1'        SKIP RECORD FAILED           SJB4\n         BE    ERRDIE              RIGHT, GO DIE                SJB4\n         MVI   WIOERROR,X'FF'\n         B     ERRET\nERRDIE   DS    0H                  IOERROR 2ND TIME ON RECORD   SJB3\n         ABEND 101                                              SJB3\nERRET    DS    0H\n         L     R14,WSAVR142\n         BR    R14\n         LTORG\n*--------------------------------------------------------------------*\n*              NON MODIFIED VARIABLES                                *\n*--------------------------------------------------------------------*\nZERO     DC    F'0'\nONE      DC    F'1'\nTWO      DC    F'2'\nTHR      DC    F'3'                                                CBT1\nFOUR     DC    F'4'\nEIGHT    DC    F'8'\nNINES    DC    F'99999999'\nBLANKS   DC    CL133' '\n*\n*--------------------------------------------------------------------*\n*                  MODIFIED VARIABLES (NON-REENTRANT)                *\n*--------------------------------------------------------------------*\nTITL1    DC   CL133'1       NUMBER OF      LENGTH OF       LENGTH OF  '\nTITL2    DC   CL133' FILE  BLOCKS READ   SHORTEST BLOCK  LONGEST BLOCK X\n               VOLSER RF/LRECL/BLKSZ      DSNAME-17         JOB-STEP'\nTITL3    DC    CL133' '\n         ORG   TITL3\nFILEN    DC    CL5' '\nFILL1    DC    CL1' '\nBLKREAD  DC    CL12' '\nFILL2    DC    CL7' '\nMINBLK   DC    CL10' '\nFILL3    DC    CL5' '\nMAXBLK   DS    CL10' '\n         DS    C' '\nVOLSER   DC    CL6' ',C' '\nRECFM    DC    CL2' ',C' '\nLRECL    DC    CL5' ',C' '\nBLKSZ    DC    CL10' ',C' '\nDSNAM    DC    CL17' ',C' '\nJOBSTEP  DC    CL17' '\nVOLSERLN EQU   *-VOLSER\n         ORG   TITL3+133\nTITL4    DS    0CL133\n         DC    52CL1'-',CL81' '\nERRMSG   DC    CL133' '\n         ORG   ERRMSG\n         DC    C'**** ERROR ON BLOCK # '\nERRBLK   DC    CL12' '\n         DC    C' **** DOING A '\nERRTASK  DC    CL8' '\n         ORG   ERRMSG+133\nTRANCENT DC    X'19202122'         CENTURY CONVERT 0=19, 1=20,  ETC\nMASK1    DC    X'402020202120'\nMASK2    DC    X'402020206B2020206B202120'\nMASK3    DC    X'40206B2020206B202120'\nVOLOPT   DC    AL1(0)                                              CBT1\n*\n         PRINT NOGEN\nPTR      DCB   DDNAME=SYSPRINT,MACRF=(PM),LRECL=133,RECFM=FBA,         X\n               BLKSIZE=3990,DSORG=PS,BUFNO=2\n*--------------------------------------------------------------------*\n*              DYNAMIC AREA                                          *\n*--------------------------------------------------------------------*\nWORK     DSECT                                                      SJB\nSAVEA    DS    9D                                                   SJB\nWDEC     DS    D                                                0517-11\nWDEC2    DS    D                                                0517-11\nWCLEAR1  EQU   *                                                0517-11\nWSAVR14  DC    F'0'                                             0517-11\nWSAVR142 DC    F'0'                                             0517-11\nWFSREC   DC    F'0'                                             0517-11\nWBYTES   DC    F'0'                                             0517-11\nWBMIN    DC    F'0'                                             0517-11\nWBMAX    DC    F'0'                                             0517-11\nWTMIN    DC    F'0'                                             0517-11\nWTMAX    DC    F'0'                                             0517-11\nWCALL    DC    6F'0'                                            0517-11\nWFLAG    DC    X'00'                                              SJB3\n$NULL2   EQU   X'80'               SYSUT2 IS \"DD  DUMMY\" MAPTAPE  SJB3\n$EOV1    EQU   X'40'               EOV1 HAS BEEN FOUND            SJB3\nWEOJ     DC    X'00'                                            0517-11\nWEOT     DC    X'00'                                            0517-11\nWIOERROR DC    X'00'                                            0517-11\nWCLEAR1L EQU   *-WCLEAR1                                        0517-11\nWBUF     DS    256CL1024                                            SJB\nWBUFFLN  EQU   *-WBUF\nLWORK    EQU   *-WORK                                               SJB\n         YREGS ,                                                    SJB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPYTPX$": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00G\\x01\\x11\\x14?\\x01\\x18\\x05?\\x14\\x19\\x00\\x1e\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2011-05-23T00:00:00", "modifydate": "2018-02-22T14:19:47", "lines": 30, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT496.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(COPYTPX)\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM(RTAPE2)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB496566\n SETCODE AC(0)\n NAME    COPYTPX(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSCATNAM": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x000\\x00\\x97 /\\x00\\x97 /\\x11&\\x00t\\x00r\\x00\\x03\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-07-21T00:00:00", "modifydate": "1997-07-21T11:26:30", "lines": 116, "newlines": 114, "modlines": 3, "user": "KBASS"}, "text": "***********************************************************************\n* ENVIRONMENT - OS/VS                                                 *\n* PURPOSE     -  RETURN TO THE CALLER THE CATALOG IN WHICH THE        *\n*                HIGH LEVEL QUALIFER EXIST IN.                        *\n*                                                                     *\n*        INPUT :  R1 POINTS TO  A(HILVLQUAL)  CL8       INPUT         *\n*                               A( CATNAME )  CL44      OUTPUT        *\n*                               A( ERRMSG  )  CL80      OUTPUT        *\n*                                                                     *\n*        OUTPUT: R15 = 0  VALID HIGH LEVEL QUALIFER                   *\n*                         CATNAME RETURNED IN CALLERS AREA @ +4       *\n*                    > 0  HIGH LEVEL QUALIFER NOT FOUND               *\n*                         ERRMSG RETURNED IN CALLERS AREA @ +8        *\n*                                                                     *\n* ATTR: RENT, REUS                                                    *\n*                                                                     *\n***********************************************************************\nDSCATNAM AMODE 31\nDSCATNAM RMODE 24\nDSCATNAM CSECT\n         SAVE  (14,12),T,*         SAVE REGS\n         LR    R12,R15\n         USING DSCATNAM,R12\n         LR    R11,R1              GET PARAMETERS\n         STORAGE OBTAIN,LENGTH=WORKLEN,SP=1\n         ST    R1,8(,R13)          CHAIN TO PREVIOUS\n         ST    R13,4(,R1)          CHAIN PREV TO OURS\n         LR    R13,R1              SET UP OUR SAVE\n         USING WORK,R13\n         SPACE 3\n         USING CATPARM,R11\n*--------------------------------------------------------------------*\n*              GET CATALOG NAME FROM ALIAS ENTRY                     *\n*--------------------------------------------------------------------*\n         XC    WORKAREA,WORKAREA\n         MVC   WCAMLST(CAMLSTLN),CAMLST\n         L     R1,CATNAME          @ OF OUTPUT CATNAME\n         L     R2,CATALIAS         @ OF INPUT ALIAS\n         MVC   0(44,R1),BLANKS     BLANK CATNAME\n         MVC   0(8,R1),0(R2)       MOVE IN ALIAS\n*\n         L     R1,CATNAME          @ OF ALIAS / AFTER=CATNAME\n         ST    R1,WCAMLST+4\n         LA    R1,WORKAREA         @ OF LOCATE OUTPUT AREA\n         ST    R1,WCAMLST+12\n         LA    R1,WCAMLST          @ OF CAMLST\n         LOCATE (1)                SET CATNAME FROM ALIAS\n         LTR   R15,R15             OK?\n         BNZ   ERRCAT               NO, ERROR\n         SPACE 3\nRETURN   DS    0H\n         LR    R1,R13\n         LR    R2,R15\n         L     R13,4(,R13)            RESTORE LINK REG\n         STORAGE RELEASE,LENGTH=WORKLEN,ADDR=(1),SP=1\n         LR    R15,R2\n         RETURN (14,12),T,RC=(15)     RETURN TO CALLER\n*--------------------------------------------------------------------*\n*              ERRORS                                                *\n*--------------------------------------------------------------------*\nERRCAT   DS    0H\n         L     R1,CATMSG           @ OF MESSAGE AREA\n         L     R2,CATALIAS         @ OF ALIAS NAME\n         MVC   0(80,R1),BLANKS     BLANKS MESSAGE AREA\n         MVC   0(L'CATERR01,R1),CATERR01 MOVE IN OUR MESSAGE\n         MVC   4(8,R1),0(R2)       MOVE IN ALIAS NAME\n         LA    R15,8               SET RETURN CODE\n         B     RETURN\n         SPACE 3\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nCAMLST   CAMLST NAME,2,,4\nCAMLSTLN EQU   *-CAMLST\nCATERR01 DC    C'*** XXXXXXXX UNKNOWN ALIAS ***'\nBLANKS   DC    CL80' '\n         LTORG ,\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DC    9D'0'\nWCAMLST  CAMLST NAME,2,,4\nWORKAREA DC    XL256'00'           WORK AREA FOR LOCATE\nWDEC     DC    2D'0'\nWORKLEN  EQU   *-WORK\n         SPACE 3\n*--------------------------------------------------------------------*\n*              PARAMETER DSECT                                       *\n*--------------------------------------------------------------------*\nCATPARM  DSECT ,\nCATALIAS DS    A\nCATNAME  DS    A\nCATMSG   DS    A\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER EQUATES                                      *\n*--------------------------------------------------------------------*\n*\nR0       EQU   0\nR1       EQU   1                     PARAMETER LIST\nR2       EQU   2                     BASE REGISTER 1\nR3       EQU   3                     BASE REGISTER 2\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6                     DECIMAL CONVERSION WORK REGISTER\nR7       EQU   7\nR8       EQU   8                     MAXIMUM NUMBER OF LINES PER PAGE\nR9       EQU   9                     NUMBER OF LINES PRINTED\nR10      EQU   10                    LINE COUNT INCREMENTOR\nR11      EQU   11\nR12      EQU   12                    BRANCH AND LINK REGISTER\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSCPPL": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x11\\x08/\\x01\\x11\\x08/\\x10V\\x01M\\x01M\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2011-03-23T10:56:03", "lines": 333, "newlines": 333, "modlines": 0, "user": "KBASS"}, "text": "*---------------------------------------------------------------------*\n*        PROGRAM ID - DSCPPL - FIND/BUILD TSO CPPL                    *\n*                                  RENT,REUS                          *\n*        PURPOSE :                                                    *\n*                                                                     *\n*              BUILD A TSO CPPL IF R1 POINTS TO A PROGRAM             *\n*              PARM FROM TSO 'CALL' OR JCL 'EXEC'                     *\n*                                                                     *\n*                                                                     *\n*        INPUT                                                        *\n*              R1  = @ OF TSO CPPL OR PARM FROM TSO 'CALL' OR         *\n*                      JCL 'EXEC' CARD.                               *\n*              R15 = @ OF PROCESS ENTRY POINT                         *\n*                                                                     *\n*        OUTPUT                                                       *\n*              R1  = @ OF CPPL                                        *\n*              R15 = 0  IF INPUT R1 WAS A CPPL                        *\n*                  = 4  IF INPUT R1 WAS A PARM                        *\n*                  = 8 ????                                           *\n*                                                                     *\n*                                                                     *\n*    REGISTER AND LINKAGE CONVENTION:                                 *\n*      R11 - R1                                                       *\n*      R12 - BASE REGISTER FOR THIS PROGRAM                           *\n*      R13 - SAVE AREA                                                *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\nDSCPPL   CSECT\n         SAVE  (14,12),T,DSCPPL_&SYSDATC._&SYSTIME\n         LR    R12,R15\n         USING DSCPPL,R12\n         LR    R11,R1              PARAM\n         GETMAIN R,LV=LWORK\n         ST    R13,4(,R1)\n*        ST    R1,8(,R13)          DONT CHAIN OURS IN\n         LR    R13,R1\n         LR    R9,R11              PARAM USED AS CPPL\n         LTR   R11,R11             PARAM\n         BZ    CPL01100            IF ZERO, GO BUILD CPPL\n         SPACE 3\n         USING WRKDSECT,R10\n         USING CPPL,R9             CPPL USING\n         USING CBUF,R8             CBUF USING\n         USING UPT,R7              UPT  USING\n         USING PSCB,R6             PSCB USING\n         USING ECT,R5              ECT  USING\n         TM    CPPLCBUF,X'80'      IF ON, ASSUME PARAM.\n         BO    CPL01100            YES, PARAM, GO BUILD CPPL\n*--------------------------------------------------------------------*\n*              DO FUTHER CHECKS TO VERIFY R1 POINTS TO CPPL          *\n*--------------------------------------------------------------------*\n         CLC   CPPLCBUF,=F'0'      CBUF @ ZERO\n         BE    CPL01100\n         CLC   CPPLUPT,=F'0'       UPT @ ZERO\n         BE    CPL01100\n         CLC   CPPLPSCB,=F'0'      PSCB @ ZERO\n         BE    CPL01100\n         CLC   CPPLECT,=F'0'       ECT @ ZERO\n         BE    CPL01100\n*\n         L     R8,CPPLCBUF\n         CLC   CBUFLEN,=H'256'     BUFFER LENGTH > 256\n         BNL   CPL01100\n         NC    CBUFOFF,=X'7FFF'\n         NC    CBUFLEN,=X'7FFF'\n         CLC   CBUFOFF,CBUFLEN     OFFSET >= BUFFER LEN\n         BNL   CPL01100\n*\n         B     EXITCPPL            MUST BE A CPPL\n         EJECT ,\n*--------------------------------------------------------------------*\n*              NO CPPL PASSED TO ROUTINE                             *\n*--------------------------------------------------------------------*\nCPL01000 DS    0H                  PARAM PASSED\nCPL01100 DS    0H                  SOMETHING PASSED\n         GETMAIN R,LV=WRKDLEN,SP=1\n         LR    R10,R1              @ OF WRK DSECT\n         MVC   WRKLEN,=A(WRKDLEN)  SAVE LENGTH OF GETMAIN\n         SPACE 3\n         LR    R0,R10              @ OF WRK DSECT\n         LA    R1,WRKDLEN          LENGTH OF WRK DSECT\n         XR    R14,R14\n         XR    R15,R15\n         MVCL  R0,R14              ZERO WRK DSECT\n         SPACE 3\n*--------------------------------------------------------------------*\n*              FIND LWA TO GET PSCB AND ECT ADDRESS                  *\n*--------------------------------------------------------------------*\n         LA    R9,WRKCPPL          CPPL\n         SPACE 3\n         L     R4,PSAAOLD-PSA(R0)       GET ASCB ADDRESS\n         ICM   R4,15,ASCBASXB-ASCB(R4)  GET ASXB ADDRESS\n         BZ    CPL02000                 BIF ZERO\n         SPACE 1\n         ICM   R4,15,ASXBLWA-ASXB(R4)   GET LWA ADDRESS\n         BZ    CPL02000                 BIF ZERO\n         LA    R4,0(,R4)           CLEAR HI-ORDER BYTE\n         USING LWA,R4\n         SPACE 1\n         C     R4,LWAPPTR          TEST IF VALAID LWA PTR\n         BNE   CPL02000            BIF NOT EQUAL\n         SPACE 1\n         CLC   LWALWA,=CL8'   LWA  ' LWA CONTROL BLOCK ID\n         BNE   CPL02000            BIF NOT EQUAL\n         SPACE 3\n         ICM   R6,15,LWAPSCB       GET PSCB ADDRESS\n         BZ    CPL01120            BIF ZERO\n         ST    R6,CPPLPSCB         STORE PSCB ADDRESS\n         OI    WRKFLAG,WRK$TSO     MUST BE TSO\n         SPACE 2\nCPL01120 DS    0H\n         ICM   R5,15,LWAECT        GET ECT  ADDRESS\n         BZ    CPL01130            BIF ZERO\n         ST    R5,CPPLECT          STORE ECT ADDRESS\n         OI    WRKFLAG,WRK$TSO     MUST BE TSO\n         DROP  R4                  DROP LWA\nCPL01130 DS    0H\nCPL02000 DS    0H\n*--------------------------------------------------------------------*\n*              BUILD CPPL                                            *\n*--------------------------------------------------------------------*\n         LA    R8,WRKCBUF\n         ST    R8,CPPLCBUF         CBUF ADDRESS\n         BAL   R14,BLDCBUF         GO BUILD CBUF\n         SPACE 2\n         SPACE 2\n         ICM   R6,15,CPPLPSCB      PSCB PRESENT\n         BNZ   CPL02100            YES,\n         LA    R6,WRKPSCB          PSCB\n         ST    R6,CPPLPSCB         OUR PSCB\n         BAL   R14,BLDPSCB         GO BUILD PSCB\n         SPACE 2\nCPL02100 DS    0H                  REG5\n         SPACE 2\n         ICM   R5,15,CPPLECT       ECT PRESENT\n         BNZ   CPL02200            YES,\n         LA    R5,WRKECT           ECT\n         ST    R5,CPPLECT          OUR ECT\n         BAL   R14,BLDECT          GO BUILD ECT\n         SPACE 2\nCPL02200 DS    0H                  REG7\n         SPACE 2\n*                                  UPT BUILD AFTER PSCB\n         ICM   R7,15,CPPLUPT       UPT PRESENT IN CPPL\n         BNZ   CPL02300            YES, NEXT\n*\n         ICM   R7,15,PSCBUPT       UPT PRESENT IN PSCB\n         BZ    CPL02210            NOPE, GO BUILD\n*\n         STCM  R7,15,CPPLUPT       STORE UPT IN CPPL\n         B     CPL02300\nCPL02210 DS    0H\n         LA    R7,WRKUPT\n         ST    R7,CPPLUPT          UPT  ADDRESS\n         BAL   R14,BLDUPT          GO BUILD UPT\nCPL02300 DS    0H\n*\n         B     EXITPARM\n         SPACE 3\nEXITPARM DS    0H\n         TM    WRKFLAG,WRK$TSO     IS IT TSO\n         BO    EXITP100             YES, EXIT\n         LA    R2,UPT\n         LA    R3,ECT\n         LA    R4,WRKECB\n         MVC   WRKSTK,STK\n         STM   R2,R4,WRKIOPL\n         LA    R0,WRKSTK\n         ST    R0,WRKIOPL+12\n         SPACE 2\n         STACK ENVIRON=CREATE,                                         X\n               MF=(E,WRKIOPL)      CREATE ENVIRONMENT\nEXITP100 DS    0H\n         LA    R1,WRKCPPL\n         L     R13,4(,R13)\n         LM    R14,R15,12(R13)     RESTORE REGISTERS\n         LM    R2,R12,28(R13)      RESTORE REGISTERS\n         LA    R15,4\n         BR    R14\nEXITCPPL DS    0H\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN R,LV=LWORK,A=(1)\n         RETURN (14,12),RC=0\n         EJECT\n*--------------------------------------------------------------------*\n*              BUILD CBUF                                            *\n*--------------------------------------------------------------------*\nBLDCBUF  DS    0H\n         TM    0(R11),X'80'        POSSIBLE PARM\n         BZ    CBUF0200            NOPE\n         L     R2,0(R11)           GET @ OF POSSIBLE LENGTH\n         SR    R1,R1               ZERO FOR ICM\n         ICM   R1,3,0(R2)          GET LENGTH\n         BZ    CBUF0200            BIF 0 LENGTH\n         CH    R1,=H'256'          MAX LENGTH = 256\n         BH    CBUF0200            > MAX\n         SPACE 3\n         LA    R0,4(,R1)\n         STCM  R0,3,CBUFLEN        STORE LENGTH + 4\n         XC    CBUFOFF,CBUFOFF     ZERO OFFSET\n         BCTR  R1,0                -1 FOR EX\n         MVC   CBUFFER(*-*),2(R2)  DUMMY MOVE\n         EX    R1,*-6              MOVE IN DATA\n         BR    R14\n         SPACE 3\nCBUF0200 DS    0H\n         MVC   CBUFLEN,=H'5'\n         XC    CBUFOFF,CBUFOFF\n         MVI   CBUFFER,C' '\n         BR    R14\n         SPACE 3\n*--------------------------------------------------------------------*\n*              BUILD UPT                                             *\n*--------------------------------------------------------------------*\nBLDUPT   DS    0H\n         MVC   UPTPREFX,PSCBUSER\n         MVC   UPTPREFL,PSCBUSRL\n         BR    R14\n*--------------------------------------------------------------------*\n*              BUILD PSCB                                            *\n*--------------------------------------------------------------------*\nBLDPSCB  DS    0H\n         TM    WRKFLAG,WRK$TSO     IS THIS TSO\n         BO    PSCB0100            YES\n         L    1,16           POINT AT CVT\n         L    1,0(1)         POINT AT TCB\n         L    1,4(1)         POINT AT TCBNEXT\n         L    1,12(1)        POINT AT TIOT\n         MVC   WRKJOBN(24),0(1)  MOVE JOB/STEP INFORMATION TO &JOB\n         MVC   PSCBUSER(7),WRKJOBN MOVE IN JOBNAME AS USERID\nPSCB0100 DS    0H\n         LA    R1,7\n         LA    R2,PSCBUSER+6       @ OF LAST BYTE\nPSCB0110 TM    0(R2),X'BF'         ZERO OR BLANK\n         BNZ   PSCB0120             YES\n         BCTR  R2,0                 NO, +1\n         BCT   R1,PSCB0110         LOOP\nPSCB0120 DS    0H\n         STC   R1,PSCBUSRL         SAVE LENGTH\n         SPACE 1\n         MVC   PSCBGPNM,=CL8'SYSALLDA'\n         SPACE 1\n         MVI   PSCBATR1,PSCBJCL\n         SPACE 1\n         MVC   PSCBSUBH(4),=CL4'AAAA'\n         SPACE 1\n         MVC   PSCBDEST,=CL8'LOCAL'\n         SPACE 1\n         LA    R0,WRKRLGB          RELOGON BUFFER\n         ST    R0,PSCBRLGB\n         SPACE 1\n         LA    R0,WRKUPT           UPT ADDRESS\n         ST    R0,PSCBUPT\n         SPACE 1\n         MVC   PSCBUPTL,=AL2(UPTDLEN) LENGTH OF UPT\n         BR    R14\n*--------------------------------------------------------------------*\n*              BUILD ECT                                             *\n*--------------------------------------------------------------------*\nBLDECT   DS    0H\n         BR    R14\n*--------------------------------------------------------------------*\n*              DATA                                                  *\n*--------------------------------------------------------------------*\nSTK      STACK MF=L\nSTKLEN   EQU   *-STK\n         LTORG ,\nWORK     DSECT\nSAVE     DS    9D\nLWORK    EQU   *-WORK\n         EJECT\nWRKDSECT DSECT\nWRKLEN   DS    F\nWRKCPPL  DS    CL(CPPLDLEN)        CPPL\n         DS    0F\nWRKCBUF  DS    CL(CBUFDLEN)        CBUF\n         DS    0F\nWRKUPT   DS    CL(UPTDLEN)         UPT\n         DS    0F\nWRKPSCB  DS    CL(PSCBDLEN)        PSCB\n         DS    0F\nWRKECT   DS    CL(ECTDLEN)         ECT\n         DS    0F\nWRKRLGB  DS    CL(RLGBDLEN)        RLGB\n         DS    0F\nWRKIOPL  DS    4F\n         DS    0F\nWRKSTK   DS    CL(STKLEN)\nWRKECB   DS    A\nWRKFLAG  DS    X\nWRK$TSO  EQU   X'80'\nWRKJOBN  DS    CL24\n         DS    0F\nWRKDLEN  EQU   *-WRKDSECT          WORK LENGTH\n         EJECT\n         IKJCPPL ,\nCPPLDLEN EQU   *-CPPL\n         SPACE 3\nCBUF     DSECT ,\nCBUFLEN  DS    H                   TOTAL LENGTH OF BUFFER AREA\nCBUFOFF  DS    H                   OFFSET TO START OF OPERANDS\nCBUFFER  DS    CL256               COMMAND BUFFER TEXT\nCBUFDLEN EQU   *-CBUF\n         SPACE 3\n         IKJUPT ,                  USER PROFILE TABLE\nUPTDLEN  EQU   *-UPT\n         SPACE 3\n         IKJPSCB ,                 PROTECTED STEP CONTROL BLOCK\nPSCBDLEN EQU   *-PSCB\n         SPACE 3\n         IKJECT ,                  TSO EVENT CONTROL TABLE\nECTDLEN  EQU   *-ECT\n         SPACE 3\n         IKJRLGB ,                 TSO RELOGON BUFFER\nRLGBDLEN EQU   *-RLGB\n         SPACE 3\nLWA      DSECT\nLWAPPTR  EQU   LWA+X'00',4         @ OF LWA\nLWALWA   EQU   LWA+X'04',8         '   LWA  '\nLWAPSCB  EQU   LWA+X'18',4         @ OF PSCB\nLWAECT   EQU   LWA+X'20',4         @ OF ECT\n         PRINT NOGEN\n         SPACE 3\n         IHAASCB ,\n         SPACE 3\n         IHAASXB ,\n         SPACE 3\n         IHAPSA  ,\n         YREGS  ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSDSM08": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x11\\x08/\\x01\\x11\\x08/\\x11\\x08\\x06\\x19\\x06\\x19\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2011-03-23T11:08:45", "lines": 1561, "newlines": 1561, "modlines": 0, "user": "KBASS"}, "text": "***********************************************************************\n* ENVIRONMENT - OS/VS                                                 *\n* PURPOSE     -  PERFORM LISTCAT FUNCTION WITH SVC26 TO RETRIEVE THE  *\n*                VOLUME SERIAL THAT A DATA SET RESIDES ON IN ORDER TO *\n*                PERFORM AN OBTAIN ON THE DSCB TO SEE IF IT REALLY    *\n*                EXISTS.                                              *\n*                                                                     *\n*                THIS SHOULD BE USED WHEN RECOVERING FROM A           *\n*                HEAD CRASH TO BE SURE YOU GOT ALL THE DATASETS       *\n*                                                                     *\n* ATTRIBUTES:    NORENT, REUS, NOT AUTHORIZED                         *\n*                AMODE=24, RMODE=24                                   *\n*                                                                     *\n***********************************************************************\n* MODS   CODE  TO X-REF CATALOG-DEVTYPE AND VOLSER-DEVTYPE            *\n***********************************************************************\n*    //KBDSM083 JOB 1,KBASS,NOTIFY=KBASS,REGION=4M,\n*    //         CLASS=X,MSGCLASS=X,MSGLEVEL=(1,1)\n*    /*JOBPARM  T=99,L=999\n*    //*------- -\n*    //STEPDS1   EXEC PGM=DSDSM08,PARM=ALL  (ALL/OPEN  DFLT=MISSING)\n*    //STEPLIB   DD DISP=SHR,DSN=KBASS.PERM.LOAD\n*    //PRINTER1  DD SYSOUT=*\n*    //VOLUMES   DD *    LIST OF LIMITING VOLUMES OR NONE\n*    $NOCAND                       DONT LIST CANDIDATES\n*    $MIGR                              LIST MIGRATED DSN\n*    $TAPE                              LIST TAPES.\n*    PRD043\n*    //READER1   DD *    LIST OF CATALOGS TO READ\n*    FAICF.USER.CATALOG\n*    /*\n*                                                                     *\n***********************************************************************\n*        CHANGE LOG:                                                  *\n*        10SEP92 STARTED WORK ON THIS PROGRAM                         *\n*        31DEC92 ADDED $NOCAND, FIXED GDG BASE PRINT                  *\n*        19JAN93 ADDED $MIGR                                          *\n*        26JAN93 ADDED $START=                                        *\n*        27JUL95 ADDED ALIAS CHECK                                    *\n*                                                                     *\n***********************************************************************\n         MACRO\n&LABEL   GENFPL &NAME,&N=1,&NEXT=0\n         LCLA  &CNT\n         MNOTE *,'************* GENERATION OF FIELD NAME DICT ENTRY ---X\n               &NAME *******'\nF&LABEL  DC    0F'0',AL1(&N),XL3'00',A(0) FIELD  ENTRY\n         DC    A(C&SYSNDX)  POINT TO FIELD NAME\nN&LABEL  DC    A(&NEXT)  CHAIN TO NEXT FIELD\nL&LABEL  DC    A(0)  LENGTH OF RETURNED FIELD\nP&LABEL  DC    A(0)  POINTER TO RETURNED FIELD\n&CNT     SETA  &N\n         AIF   (&CNT EQ 1).END\n&CNT     SETA  (&CNT-1)*2\n         DC    &CNT.A(0,0)  ADDITIONAL RETURN FIELDS\n.END     ANOP\nC&SYSNDX DC    CL8'&NAME'  FIELD NAME\n         SPACE 2\n         MEND\nDSDSM08  AMODE 24\nDSDSM08  RMODE 24\nDSDSM08  CSECT\n         SAVE  (14,12),T,*         SAVE REGS\n         LR    R12,R15\n         LA    R11,2048(,R12)\n         LA    R11,2048(,R11)\n         USING DSDSM08,R12,R11\n         SPACE 3\n*--------------------------------------------------------------------*\n*              GETMAIN WORKING STORAGE AND CHAIN SAVE AREAS          *\n*--------------------------------------------------------------------*\n         LR    R2,R1               SAVE PARM ADDR\n         GETMAIN R,LV=WORKLEN,SP=0\n         LR    R10,R1\n         USING WORK,R10\n         LR    R14,R1\n         LR    R15,R0\n         SLR   R1,R1\n         MVCL  R14,R0              ZERO GETMAINED AREA\n         ST    R2,WPARM            SAVE PARM ADDRESS\n         LA    R0,SAVEAREA         OUR SAVE\n         ST    R0,8(,R13)          CHAIN TO PREVIOUS\n         ST    R13,SAVEAREA+4      CHAIN PREV TO OURS\n         LA    R13,SAVEAREA        SET UP OUR SAVE\n         SPACE 3\n         GETMAIN R,LV=WSTKTBLL,SP=0\n         ST    R1,WSTKTBL@\n         LR    R14,R1\n         LR    R15,R0\n         SLR   R1,R1\n         MVCL  R14,R0              ZERO GETMAINED AREA\n         MVC   0(4,R13),=C'WORK'\n*--------------------------------------------------------------------*\n*              INITIALIZATION                                        *\n*--------------------------------------------------------------------*\n         MVI   BLINE,C' '\n         MVC   BLINE+1(L'BLINE-1),BLINE\n         MVI   DASH,C'-'\n         MVC   DASH+1(L'DASH-1),DASH\n         SPACE 1\n*--------------------------------------------------------------------*\n*              MOVE REAL TO WORK                                     *\n*--------------------------------------------------------------------*\n         L     R1,=A(MVCTBL)\nINIT0100 DS    0H\n         CLC   =F'0',0(R1)\n         BE    INIT0190\n         LM    R2,R4,0(R1)         FROM ADDR,LEN,TO OFFSET\n         ALR   R4,R10              ADD WORK REG\n         BCTR  R3,0\n         EX    R3,INITMVC\n         LA    R1,MVCTLEN(,R1)\n         B     INIT0100\nINITMVC  MVC   0(0,R4),0(R2)\nINIT0190 DS    0H\n         SPACE 1\n*--------------------------------------------------------------------*\n*              INIT STACK, OBTAIN,  CTG AND ETC                      *\n*--------------------------------------------------------------------*\n         MVI   WFLAG1,0\n         ZAP   WSTKNUM,=P'0'\n         L     R1,WSTKTBL@         @ OF DSN @ STACK\n         ST    R1,WSTKTOP\n         ST    R1,WSTKCURR\n         SPACE 1\n         LA    R1,OBTDSN           @ OF OBT DSN\n         LA    R2,OBTVOL           @ OF OBT VOL\n         LA    R3,DS1AREA          @ OF DS1 WORK AREA\n         STM   R1,R3,DSCBCAM+4\n         SPACE 1\n         LA    R1,WCTGENT          @ OF WCTGENT\n         LA    R2,WCTGCAT          @ OF WCTGCAT\n         LA    R3,WCTGWA           @ OF WCTGWA\n         STM   R1,R3,CPL1ENT\n         SPACE 1\n         MVC   LMULTI,=A(MTYPELN)\n         MVC   PMULTI,=A(MTYPES)\n         SPACE 1\n*\n*--------------------------------------------------------------------*\n*              DO OPENS                                              *\n*--------------------------------------------------------------------*\n         OPEN  (WDCBCARD,(INPUT)),MF=(E,WOPEN)   OPEN FILES\n         TM    WDCBCARD+X'30',X'10' DID IT OPEN\n         BZ    ERRCARD\n         OPEN  (WDCBPRT,(OUTPUT)),MF=(E,WOPEN)\n         TM    WDCBPRT+X'30',X'10'  DID IT OPEN\n         BZ    ERRPRT\n         SPACE 3\n         DEVTYPE =CL8'VOLUMES',WDEC\n         LTR   R15,R15\n         BNZ   OPEN0200\n         OPEN  (WDCBVOL,(INPUT)),MF=(E,WOPEN)\n         TM    WDCBVOL+X'30',X'10' DID IT OPEN OK\n         BZ    OPEN0200             NO, SKIP VOLUMES\n         BAL   R14,GETVOLS\n         SPACE 2\nOPEN0200 DS    0H\n         L     R2,WPARM\n         L     R2,0(,R2)           GET PARM\n         LH    R1,0(,R2)\n         C     R1,=F'3'            BIG ENOUGH\n         BL    PARM0190             NO\n         CLC   =C'ALL',2(R2)       IS IT ALL\n         BNE   PARM0120\n         OI    WFLAG1,$1ALL\n         B     PARM0190\nPARM0120 DS    0H\n         CLC   =C'OPE',2(R2)       IS IT ALL\n         BNE   PARM0140\n         OI    WFLAG1,$1OPEN\n         B     PARM0190\nPARM0140 DS    0H\nPARM0190 DS    0H\n*--------------------------------------------------------------------*\n*                                                                    *\n*              SCAN UCB GET MAKE VOLSER-DEVTYPE TABLE                *\n*                                                                    *\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*              GET NUMBER OF DASD UCB GENNED                         *\n*              TO GET VOL-DEVT TABLE SIZE                            *\n*--------------------------------------------------------------------*\n         UCBINFO DEVCOUNT,COUNT=WDEVCNT,DEVCLASS=DASD,                 X\n               RETCODE=WDEVRETC,RSNCODE=WDEVRSNC,                      X\n               MF=(E,WUCBINFO)\n         LTR   R15,R15\n         BZ    INFO0100\n         WTO   'DSDSM UCBINFO FAILED',ROUTCDE=11\n         ABEND 1\nINFO0100 DS    0H\n         L     R0,WDEVCNT\n         MH    R0,=Y(6+4)          L'VOLSER+L'DEVTYPE\n         GETMAIN R,LV=(0)\n         ST    R1,WVOLTBL@\n         ST    R0,WVOLTBSZ\n         L     R0,WVOLTBL@\n         L     R1,WVOLTBSZ\n         SLR   R15,R15\n         MVCL  R0,R14              ZERO VOLSER-DEVTYPE AREA\n*--------------------------------------------------------------------*\n*              CALL UCBSCAN TO FIND ALL DASD VOLUMES                 *\n*--------------------------------------------------------------------*\n         XC    WUCBSVCW,WUCBSVCW            ZERO WORK AREA\n         MVC   WUCBDCEL,=H'128'\n         L     R3,WVOLTBL@         @ OF VOL-DEVT TABLE\n         USING VOLDEVT,R3\nVOLSLOOP DS    0H\n         UCBSCAN COPY,UCBAREA=WUCBCOPY,WORKAREA=WUCBSVCW,              X\n               DEVCLASS=DASD,DEVNCHAR=WUCBDEVN,                        X\n               CMXTAREA=WUCBMXT,DCEAREA=WUCBDCE,DCELEN=WUCBDCEL,       X\n               DYNAMIC=YES,RANGE=ALL,                                  X\n               MF=(E,WUCBSCAN)\n         LTR   R15,R15             END OF UCB TABLE?\n         BZ    VOLSOK               YES, GO RETURN\n         C     R15,=F'12'          BAD PROB\n         BL    READCARD             NO\n         WTO   'DSDSM RC > 8',ROUTCDE=11\n         ABEND 2\nVOLSOK   DS    0H\n         LA    R4,WUCBCOPY\n         USING UCBOB,R4\n         CLI   UCBVOLI,X'00'       IS THERE A VOLSER?\n         BE    VOLSLOOP             NO, SKIP OVER ENTRY\n         MVC   VOLDVOL,UCBVOLI     MOVE IN VOLSER\n         MVC   VOLDUNIT,UCBTYP     MOVE IN UCBTYPE (DEVTYPE)\n         LA    R3,VOLDLEN(,R3)     NEXT ENTRY\n         DROP  R3\n         B     VOLSLOOP\n*--------------------------------------------------------------------*\n*              RESET VARIABLES FOR EACH CATALOG INPUT                *\n*--------------------------------------------------------------------*\nREADCARD DS    0H\n         ZAP   WNUMCAT,=P'0'\n         ZAP   WNUMPROC,=P'0'\n         ZAP   WNUMMISS,=P'0'\n         ZAP   WNUMMIGR,=P'0'\n         ZAP   WNUMTRKA,=P'0'\n         ZAP   WNUMTRKU,=P'0'\n         ZAP   WNUMDEVT,=P'0'\n         GET   WDCBCARD,CARDREC       GET THE DIVISION\n         CLI   CARDREC,C' '        BLANK IN COL 1\n         BE    READCARD             YES\n         CLI   CARDREC,C'*'        COMMENT\n         BE    READCARD             YES\n         MVC   WCTGCAT,CARDREC        MOVE IN CAT NAME\n*\n         MVC   D1,BLINE\n         MVC   D1NAME(15),=C'   *** CATALOG='\n         MVC   D1NAME+15(44),CARDREC\n         PUT   WDCBPRT,D1\n         SPACE 2\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\n         MVC   D1,BLINE\n         MVC   D1NAME(14),=CL(14)'DATASET NAME'\n         MVC   D1VOL(6),=CL(6)'VOLUME'\n         MVC   D1STAT(8),=CL(8)'STATUS'\n         MVC   D1OPEN(6),=CL(6)'OPEN?'\n         MVC   D1EXT(4),=CL(4)' EXT'\n         MVC   D1TYPE(8),=CL(8)'DSN-TYPE'\n         MVC   D1TRKA(6),=CL(6)'TRK-AL'\n         MVC   D1TRKU(6),=CL(6)'TRK-US'\n         PUT   WDCBPRT,D1\n         MVC   D1,BLINE\n         MVC   D1NAME,DASH\n         MVC   D1VOL,DASH\n         MVC   D1STAT,DASH\n         MVC   D1OPEN,DASH\n         MVC   D1EXT,DASH\n         MVC   D1TYPE,DASH\n         MVC   D1TRKA,DASH\n         MVC   D1TRKU,DASH\n         PUT   WDCBPRT,D1\n         MVC   D1,BLINE\n         MVC   WALIASPV,BLINE\n         SPACE 3\n         XC    WDSENT,WDSENT       SET TO START FROM BEGINNING\n         MVI   WDSENT+43,X'01'\n         TM    WFLAG1,$1START\n         BZ    EXSVC26\n         MVC   WDSENT,WSTART\n         B     EXSVC26             GO ISSUE SVC26\nREADLOOP DS    0H\n         CLC   =C'WORK',0(R13)     CHECK FOR OVERLAYS\n         BNE   ABEND001\n         BAL   R14,STKPOP          POP NEW ENTRY INTO WDSENT\n         LTR   R15,R15             GET AN ENTRY\n         BZ    EXSVC26              YES\nREADLP02 DS    0H\n         SR    R7,R7                  CLEAR REGISTER\n         IC    R7,WDSENT43            MOVE IN LAST BYTE OF WDSENT\n         LA    R7,1(R7)               ADD 1 TO IT\n         STC   R7,WDSENT43            MOVE IT BACK IN\n         CLI   WDSENT43,X'FF'\n         BE    ABEND002\nEXSVC26  DS    0H\n         LA    R1,WDSENT           @ OF DSN\n         BAL   R14,CATREAD\n         C     R15,=F'4'\n         BL    BINGO               RC = 0\n         BE    READCARD            RC = 4  SVC  26 ERROR\n         C     R15,=F'10'\n         BE    CATERRX             RC = 10 SVC  26 ERROR\n         C     R15,=F'12'\n         BE    READCARD            RC = 12 SVC  26 ERROR\n         C     R15,=F'16'\n         BE    READLOOP            RC = 16 SVC  26 ERROR\n         B     STATS               RC = 8  END OF CATALOG REACHED\nCATERRX  DS    0H\n*--------------------------------------------------------------------*\n*              CATALOG ERROR, SET ALIAS AND INCREMENT AS NEXT SRCH   *\n*--------------------------------------------------------------------*\n         MVC   WDSENT,BLINE\n         MVC   WDSENT(08),WALIAS\n         LA    R1,WDSENT+7\n         TRT   WDSENT(8),TRTDLM\n         BZ    CATERRX1\n         MVI   0(R1),C'$'          LESS THAT 7 CHARS\n         B     READLOOP\nCATERRX1 DS    0H                  FULL 8 CHAR\n         SLR   R1,R1\n         IC    R1,WDSENT+7         INCR\n         LA    R1,1(,R1)            LAST\n         STC   R1,WDSENT+7           BYTE\n         B     READLOOP\nSTATS    DS    0H\n         MVC   D1,BLINE\n         PUT   WDCBPRT,D1\n         LA    R2,D1NAME\n         USING ST01,R2\n         MVC   ST01CAT,STX1CAT\n         MVC   ST01PROC,STX1PROC\n         MVC   ST01MISS,STX1MISS\n         MVC   ST01DEVT,STX1DEVT\n         MVC   ST01MIGR,STX1MIGR\n         MVC   ST01TRKA,STX1TRKA\n         MVC   ST01TRKU,STX1TRKU\n         PUT   WDCBPRT,D1\n         DROP  R2\n         SPACE 2\n         MVC   D1NAME(L'D1-1),DASH\n         PUT   WDCBPRT,D1\n         SPACE 2\n         MVC   D1,BLINE\n         MVC   D1NAME(ST01LEN),ST01\n         LA    R2,D1NAME\n         USING ST01,R2\n         MVC   ST01CAT,=X'4020202020202120'\n         MVC   ST01PROC,=X'4020202020202120'\n         MVC   ST01MISS,=X'4020202020202120'\n         MVC   ST01DEVT,=X'4020202020202120'\n         MVC   ST01MIGR,=X'4020202020202120'\n         MVC   ST01TRKA(15),=X'4020206B2020206B2020206B202120'\n         MVC   ST01TRKU(15),=X'4020206B2020206B2020206B202120'\n         ED    ST01CAT,WNUMCAT\n         ED    ST01PROC,WNUMPROC\n         ED    ST01MISS,WNUMMISS\n         ED    ST01DEVT,WNUMDEVT\n         ED    ST01MIGR,WNUMMIGR\n         ED    ST01TRKA,WNUMTRKA\n         ED    ST01TRKU,WNUMTRKU\n         PUT   WDCBPRT,D1\n         MVC   D1,BLINE\n         PUT   WDCBPRT,D1\n         DROP  R2\n         B     READCARD\n         SPACE 2\nBINGO    DS    0H\n*--------------------------------------------------------------------*\n*              FIND HILEVEL QUALIFIER (ALIAS)                        *\n*              CHECK IF ALIAS IS KNOWN TO MASTER CATALOG             *\n*--------------------------------------------------------------------*\n         MVC   WALIAS,BLINE\n         LA    R1,8\n         LA    R2,WDSENT\n         LA    R3,WALIAS\nBINGO10  DS    0H\n         CLI   0(R2),C' '\n         BE    BINGO20\n         CLI   0(R2),C'.'\n         BE    BINGO20\n         MVC   0(1,R3),0(R2)\n         LA    R2,1(,R2)\n         LA    R3,1(,R3)\n         BCT   R1,BINGO10\nBINGO20  DS    0H\n         CLC   =C'DSICF',WALIAS    CATALOG NAME\n         BE    BINGO30              YES\n         CLC   =C'CATALOG',WALIAS  CATALOG NAME\n         BE    BINGO30              YES\n         CLC   WALIAS,WALIASPV\n         BE    BINGO30\n         MVC   WALIASPV,WALIAS\n*--------------------------------------------------------------------*\n*              CALL DSCATNAM TO CHECK ALIAS                          *\n*--------------------------------------------------------------------*\n         LA    R1,WALIAS           ALIAS TO CHECK\n         LA    R2,WALIASCT         RETURNED CATALOG\n         LA    R3,D2               RETURNED ERROR MSG\n         STM   R1,R3,WCALL\n         LA    R1,WCALL\n         L     R15,=V(DSCATNAM)\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    BINGO30\n         CLC   WALIAS,WALIASCT     IS ALIAS RETURNED AS CATNAME\n         BE    BINGO30              YES, THEN IN MASTER\n         MVC   D1,BLINE\n         MVC   D1(50),=CL50' @@@ ALIAS=XXXXXXXX IS UNKNOWN IN CAT='\n         MVC   D1+11(8),WALIAS\n         MVC   D1+38(44),WCTGCAT\n         PUT   WDCBPRT,D1\nBINGO30  DS    0H\n         AP    WNUMCAT,=P'1'\n         MVI   WFLAG2,0\n*--------------------------------------------------------------------*\n*              DO SPECIAL PROCESSING IF GDG                          *\n*--------------------------------------------------------------------*\n         CLI   WDSENTT,C'B'        GDG BASE\n         BE    READLOOP             YES, DEFER PRINT\n*--------------------------------------------------------------------*\n*              FOUND AN ENTRY, INITIALIZE DATA                       *\n*--------------------------------------------------------------------*\n         MVC   WVOLSER,BLINE\n         MVC   D1,BLINE\n         MVC   D1NAME,WDSENT       MOVE IN DATASET\n         MVC   D1VOL,=CL8'??????'\n         MVC   D1STAT,=CL8'??????'\n*--------------------------------------------------------------------*\n*              DETERMINE ENTYPE                                      *\n*--------------------------------------------------------------------*\n*\n         LA    R1,DSNTYPE          DSN TYPE TABLE\n         LA    R2,DSNTYPE#          AND # OF ENTRIES\nTYPE0100 DS    0H\n         CLC   0(1,R1),WDSENTT     DOES THIS MATCH\n         BE    TYPE0200             YES\n         LA    R1,DSNTYPEL(,R1)     NO, NEXT ENTRY\n         BCT   R2,TYPE0100         AND LOOP\n         MVC   D1TYPE,=CL13'UNKNOWN'\n         B     TYPE0220\nTYPE0200 DS    0H\n         MVC   D1TYPE,2(R1)        THIS IS IT\nTYPE0220 DS    0H\n*--------------------------------------------------------------------*\n*              DETERMINE IF DSN OPEN                                 *\n*--------------------------------------------------------------------*\n*\n         NI    WFLAG2,255-$2OPEN\n         ICM   R1,15,POPENIND      DSN TYPE TABLE\n         BZ    OPEN0800\n         L     R2,POPENIND         DSN TYPE TABLE\n         CLI   0(R2),X'FF'         IS IT OPEN\n         BE    OPEN0800             NO\n         TM    0(R2),X'80'         IS IT OPEN\n         BZ    OPEN0800             NO\n         MVC   D1OPEN,=CL6'OPEN'\n         OI    WFLAG2,$2OPEN\nOPEN0800 DS    0H\n*--------------------------------------------------------------------*\n*              WAS IT OPEN, NO GET  NEXT CATALOG ENTRY               *\n*--------------------------------------------------------------------*\n         TM    WFLAG1,$1OPEN       OPEN ONLY\n         BZ    OPEN0820             NO\n         TM    WFLAG2,$2OPEN        YES, IS IT OPEN\n         BZ    READLOOP             NO, GET NEXT ONE\nOPEN0820 DS    0H\n*--------------------------------------------------------------------*\n*              GET VOLSERS FOR THIS DSN ,                            *\n*--------------------------------------------------------------------*\nVOLS     DS    0H\n         XC    WNUMVOL,WNUMVOL\n         L     R9,LCATVOL          LENGTH OF CATVOL2\n         L     R6,PCATVOL          @ OF CATVOL2\n         LTR   R9,R9               ANY VOLSERS\n         BZ    PRINTIT              NO\n         SLR   R8,R8\n         D     R8,=A(CTVLLEN)      DIVIDE BY ENTRY LENGTH\n         ST    R9,WNUMVOL\n*--------------------------------------------------------------------*\n*              LOOP LABEL FOR MULTI-VOLUME DATASETS                  *\n*--------------------------------------------------------------------*\nVOLLOOP  DS    0H\n         MVC   D1EXT,BLINE\n         MVC   D1TRKA,BLINE\n         MVC   D1TRKU,BLINE\n         USING CTVL,R6\n         MVC   WVOLSER,CTVLVOL     MOVE IN VOLSER\n         MVC   WVOLDEVT,CTVLUNIT   MOVE IN UNIT TYPE\n         NI    WFLAG2,255-$2MISS   TURN OF MISSING FLAG\n*--------------------------------------------------------------------*\n*              SCAN VOLUME TABLE,  TO LIMIT VOLSER SEARCH            *\n*--------------------------------------------------------------------*\n         TM    WFLAG1,$1VOLS       ANY VOLUMES IN TABLE\n         BZ    VOL0200              NO, DO THEM ALL\n         LA    R2,VOLTBL\n         LA    R3,VOLTBL#\nVOL0100  DS    0H\n         CLC   WVOLSER,0(R2)       IS IT OUR VOLUME\n         BE    VOL0200              YES\n         LA    R2,VOLTBLLN(,R2)     NO, NEXT ENTRY\n         BCT   R3,VOL0100          AND LOOP\n         B     PRINT80             NOT FOUND, NEXT DSN PLEASE\nVOL0200  DS    0H\n*\n*--------------------------------------------------------------------*\n*              DETERMINE VOLSER STATUS                               *\n*--------------------------------------------------------------------*\n         LTR   R9,R9               IS VOLSER THERE\n         BZ    PRINTIT              NO\n*\n         NI    WFLAG2,255-$2MIGR   SET NOT MIGRATED\n         NI    WFLAG2,255-$2TAPE   SET NOT TAPE\n         CLC   WVOLSER,=C'MIGRAT'  IS IT MIGRATED\n         BNE   VOL0260              NO\n         OI    WFLAG2,$2MIGR\n         AP    WNUMMIGR,=P'1'\n         TM    WFLAG1,$1MIGR       DOES HE WANT MIGRATED DSN\n         BZ    PRINT90              NO, THEN NEXT\nVOL0260  DS    0H                  HERE IF OK OR WANTS MIGRATED\n*\n         TM    WFLAG2,$2MIGR       IS IT MIGRATED\n         BO    VOL0265              YES\n         TM    CTVLUNIT+2,X'80'    IS IT TAPE\n         BZ    VOL0262              NO\n         OI    WFLAG2,$2TAPE       THIS IS TAPE\nVOL0262  DS    0H\n         TM    WFLAG1,$1TAPE       IS TAPE OK\n         BO    VOL0265              YES, PROCESS\n         TM    WFLAG2,$2TAPE       DON'T WANT TAPE AND IS TAPE\n         BO    PRINT90              YES, DON'T PRINT\nVOL0265  DS    0H                  HERE IF OK OR WANTS MIGRATED\n*\n         TM    CTVLSTAT,CTVLSASS   IS IT A ASSOCIATE VOL\n         BO    PRINT80              YES, SKIP\n         TM    CTVLSTAT,CTVLSCAN   IS IT A CANDIDATE VOL\n         BO    VOL0280              YES\n         SPACE 1\nVOL0270  DS    0H                  HERE ONLY IF WE PROCESS IT\n         AP    WNUMPROC,=P'1'\n         MVC   D1VOL,WVOLSER\n         MVC   D1STAT,=CL8'OK'\n         TM    WFLAG2,$2MIGR       IS IT MIGRATED\n         BO    PRINTIT              YES, OK\n         SPACE 1\n         B     VOL0400\nVOL0280  DS    0H\n         MVC   D1VOL,WVOLSER\n         TM    WFLAG1,$1NOCAND     DOES WE WANT CANDIDATES\n         BO    PRINT90\n         MVC   D1STAT,=CL8'CAND.'\n         MVC   D1OPEN,BLINE\n         B     PRINTIT\nVOL0290  DS    0H\nVOL0400  DS    0H\n*--------------------------------------------------------------------*\n*              GET NUMBER OF EXTENTS                                 *\n*--------------------------------------------------------------------*\n*\n         TM    WFLAG2,$2TAPE       IS THIS A TAPE\n         BO    PRINTIT              YES\n         CLI   WDSENTT,C'A'        ALIEN (NONVSAM)\n         BE    EXT0800              YES\n         ICM   R1,15,LNOEXT        EXTENTS RETURNED\n         BZ    EXT0800              NO\n         ICM   R1,15,PNOEXT        EXTENTS RETURNED\n         BZ    EXT0800              NO\n         L     R2,WNUMVOL          MAX NUM VOLS\n         SR    R2,R9                - VOLINDEX\n         ALR   R1,R2               INDEX INTO EXTENT NUMBER TBL\n         CLI   0(R1),X'FF'         IS IT NONVSAM/CANIDATE\n         BE    EXT0800\n         SLR   R2,R2\n         IC    R2,0(,R1)           GET EXTENT NUMBERS\n         CVD   R2,WDEC\n         MVC   D1EXT(4),=X'40202120'\n         ED    D1EXT(4),WDEC+6\nEXT0800  DS    0H\n*--------------------------------------------------------------------*\n*              GET NUMBER OF TRACKS                                  *\n*--------------------------------------------------------------------*\n*\nTRKA0000 DS    0H\n         TM    WFLAG2,$2PRTDSN     PRINTED THIS DSN YET\n         BO    TRKA0800             YES\n         CLI   WDSENTT,C'A'        ALIEN (NONVSAM)\n         BE    TRKA0800             YES\n*\n         ICM   R14,15,LITYPEXT\n         BZ    TRKA0800\n         ICM   R15,15,PITYPEXT\n         BZ    TRKA0800\n         ICM   R4,15,LTRBAEXT      TRBAEXT RETURNED\n         BZ    TRKA0800             NO\n         ICM   R5,15,PTRBAEXT      TRBAEXT RETURNED\n         BZ    TRKA0800             NO\n         CL    R4,=A(8)            TOO SHORT\n         BL    TRKA0800             YES, BYPASS\n         SLR   R1,R1               ZERO TOTAL TRACKS\nTRKA0100 DS    0H\n         LH    R2,0(,R5)           THIS SECTION LENGTH\n         LTR   R2,R2\n         BZ    TRKA0200\n         LA    R5,2(,R5)           PASSED LENGTH\n         S     R4,=A(2)\nTRKA0120 DS    0H\n$TRBAEXB EQU   X'02',4             CCHHR BEGIN\n$TRBAEXE EQU   X'06',4             CCHHR END\n$TRBATRK EQU   X'0A',2             # OF TRACKS\n$TRBALEN EQU   X'14'\n         CLI   0(R15),X'80'        IS THIS DATA WITHIN INDEX\n         BE    TRKA0180\n         AH    R1,$TRBATRK(,R5)    + TRKS THIS EXTENT\n         LA    R5,$TRBALEN(,R5)    NEXT EXTENT\n         LA    R15,1(,R15)\nTRKA0180 DS    0H\n         S     R4,=A($TRBALEN)     - THIS EXTENT LENGTH\n         BNP   TRKA0200\n         S     R2,=A($TRBALEN)     - THIS SUB-ENTRY\n         BP    TRKA0120\n         B     TRKA0100\nTRKA0200 DS    0H\n         ST    R1,WTRKALLO\n         CVD   R1,WDEC\n         AP    WNUMTRKA,WDEC\n         MVC   D1TRKA(6),=X'402020202120'\n         ED    D1TRKA(6),WDEC+5\n*--------------------------------------------------------------------*\n*              NOW CALCULATE PERCENT USED                            *\n*--------------------------------------------------------------------*\nTRKU000  DS    0H\n         LA    R1,0\n         ICM   R0,15,LHURBADS      LENGTH\n         BZ    TRKU400\n         ICM   R5,15,PHURBADS      HI USED RBA\n         BZ    TRKU400\n         ICM   R0,15,LHARBADS      LENGTH\n         BZ    TRKU400\n         ICM   R7,15,PHARBADS      @ OF HI ALLOC RBA\n         BZ    TRKU400\n         L     R0,0(,R5)           GET HI USED RBA\n         L     R2,0(,R7)           GET HI ALLOCATED RBA\n*--------------------------------------------------------------------*\n*              IF HI=USED THEN SET USED=ALLOCATED TRACKS             *\n*--------------------------------------------------------------------*\n*\n         L     R1,WTRKALLO\n         CLR   R0,R2               HI = USED\n         BE    TRKU400              YES\n*\n         ICM   R15,15,LDSATTR      IS THIS A PAGESPACE\n         BZ    TRKU002\n         ICM   R15,15,PDSATTR\n         BZ    TRKU002\n         L     R1,WTRKALLO\n         CLC   =X'4022',0(R15)     IF PAGESPACE THEN\n         BE    TRKU400              USED = ALLOC\nTRKU002  DS    0H\n*\n*--------------------------------------------------------------------*\n*              IF ALLOCATED OR USED RBA = 0; THEN ZERO TRACKS        *\n*--------------------------------------------------------------------*\n         LA    R1,0\n         CL    R2,=A(0)            ALLOCATED = 0\n         BE    TRKU400              YES\n         CL    R0,=A(0)            USED = 0\n         BE    TRKU400              YES\n*\n*        CL    R0,=A(X'000FFFFF')  IS USED REAL BIG\n*        BL    TRKU0010             NO\n*        SRL   R0,10               DOWN SHIFT\n*        SRL   R2,10               DOWN SHIFT\n*        B     TRKU100\nTRKU010  DS    0H\n         CL    R2,=A(X'7FFFFFFF')  IS ALLOCATED REAL BIG\n         BL    TRKU020              NO\n         SRL   R0,1                DOWN SHIFT TO MAKE POSITIVE\n         SRL   R2,1                DOWN SHIFT TO MAKE POSITIVE\n         B     TRKU100\nTRKU020  DS    0H\nTRKU100  DS    0H\nTRKU200  DS    0H\n         SRDL  R0,32               SHIFT TO R1\n         M     R0,=A(1000)\n         DR    R0,R2               GET PERCENT USED\n         B     TRKU300\n*\nTRKU300  DS    0H                  R1 = PERCENT USED\n         SLR   R0,R0\n         M     R0,WTRKALLO         TIME # TRACKS\n         D     R0,=A(1000)         CONVERT BACK\n         LTR   R0,R0               REMAINDER = 0\n         BNZ   TRKU320              NO\n         ICM   R15,15,0(R5)        GET USED RBA\n         BZ    TRKU340              IF ZERO BYPASS\nTRKU320  DS    0H\n         LA    R1,1(,R1)           ROUND UP\nTRKU340  DS    0H\nTRKU400  DS    0H\n         CVD   R1,WDEC\n         AP    WNUMTRKU,WDEC\n         MVC   D1TRKU(6),=X'402020202120'\n         ED    D1TRKU(6),WDEC+5\nTRKA0800 DS    0H\n         DROP  R6\n*--------------------------------------------------------------------*\n*              DO THE OBTAIN                                         *\n*--------------------------------------------------------------------*\nOBTAIN   DS    0H\n         TM    WFLAG2,$2TAPE       IS IT ON TAPE\n         BO    PRINTIT              YES, SKIP OBTAIN\n         MVC   OBTDSN(44),WDSENT       GET THE FILENAME\n         MVC   OBTVOL(6),WVOLSER       GET THE VOLUME\n         SR    R15,R15                 CLEAR REG 15\n         OBTAIN DSCBCAM                GET THE DSCB\n         LTR   R15,R15                 IS IT GOOD?\n         BNZ   OBT0900                 BOO BOO\n*--------------------------------------------------------------------*\n*              SCAN VOL-DEVT TABLE TO MAKE SURE CATALOG MATCHES      *\n*              THE REAL DEVTYPE                                      *\n*--------------------------------------------------------------------*\n         USING VOLDEVT,R3\n         L     R3,WVOLTBL@         @ OF VOL-DEVTYPE TABLE\n         L     R4,WDEVCNT          COUNT OF DASD\nOBT0100  DS    0H\n         CLI   VOLDVOL,0           END OF TABLE\n         BE    PRINTIT              YES\n         CLC   VOLDVOL,WVOLSER     IS THIS OUR VOLSER\n         BNE   OBT0190              NO, NEXT ENTRY\n         CLC   VOLDUNIT+3(1),WVOLDEVT+3  DOES THE DEVICE TYPE MATCH\n         BE    PRINTIT\n         MVC   D1STAT(9),=CL9'V-XX,C-XX'\n         UNPK  WDEC(3),VOLDUNIT+3(2) VOLUME DEVTYPE\n         TR    WDEC(2),TRANS-240\n         MVC   D1STAT+2(2),WDEC\n         UNPK  WDEC(3),WVOLDEVT+3(2)  CATALOG DEVTYPE\n         TR    WDEC(2),TRANS-240\n         MVC   D1STAT+7(2),WDEC\n         AP    WNUMDEVT,=P'1'\n         OI    WFLAG2,$2MISS       TREAT AS MISSING\n         B     PRINTIT\nOBT0190  DS    0H\n         LA    R3,VOLDLEN(,R3)     NEXT ENTRY\n         BCT   R4,OBT0100          AND LOOP\n         WTO   'DSDSM VOLSER NOT IN VOLDEVT TABLE',ROUTCDE=11\n         DROP  R3\nOBT0900  DS    0H\n         MVC   D1STAT,=CL8'MISSING'\n         OI    WFLAG2,$2MISS\n         AP    WNUMMISS,=P'1'\n*--------------------------------------------------------------------*\n*              PRINT RECORD                                          *\n*--------------------------------------------------------------------*\nPRINTIT  DS    0H\n*\nPRINT10  DS    0H\n         TM    WFLAG1,$1OPEN       PRINT OPEN ONLY\n         BZ    PRINT15              NO\n         TM    WFLAG2,$2OPEN        YES, IS IT OPEN\n         BO    PRINT20              YES, THEN PRINT\nPRINT15  DS    0H\n         TM    WFLAG1,$1ALL        PRINT ALL\n         BO    PRINT20              YES\n         TM    WFLAG2,$2MISS       ONLY PRINT MISSING, IS IT\n         BO    PRINT20              YES, THEN PRINT\n*\n         B     PRINT80             FAILED PRINT TEST\n         SPACE 3\nPRINT20  DS    0H\n         TM    WFLAG2,$2PRTDSN     PRINTED THIS DSN YET\n         BZ    PRINT30              NO\n         MVI   D1NAME,C' '\n         MVC   D1NAME+1,WDSENT\n         B     PRINT40\nPRINT30  DS    0H                  1ST PRINT OF DSN\n         TM    WFLAG3,$3STKOFF     COMING FROM STACK\n         BZ    PRINT40              NO\n         CLI   WGDGNAME,C' '       ALREADY PRINTED IT\n         BE    PRINT40\n*--------------------------------------------------------------------*\n*              DO SPECIAL GDG BASE PROCESSING                        *\n*--------------------------------------------------------------------*\n         MVC   D2,BLINE\n         MVC   D2+(D1NAME-D1)(L'D1NAME),WGDGNAME\n         MVC   D2+(D1TYPE-D1)(L'D1TYPE),GDGTYPE+2\n         MVC   D2+(D1STAT-D1)(2),=C'OK'\n         SPACE 1\n         L     R1,WGDGNUM\n         CVD   R1,WDEC\n         MVC   D2+(D1OPEN-D1)(4),=X'40202120'\n         ED    D2+(D1OPEN-D1)(4),WDEC+6\n         SPACE 1\n         ICM   R2,15,PGDGLIM\n         BZ    PRINT35\n         SLR   R1,R1\n         IC    R1,0(R2)\n         CVD   R1,WDEC\n         MVC   D2+(D1EXT-D1)(4),=X'40202120'\n         ED    D2+(D1EXT-D1)(4),WDEC+6\nPRINT35  DS    0H\n         ICM   R2,15,PGDGATTR\n         BZ    PRINT39\n         MVC   D2+(D1TRKA-D1)(L'D1TRKA),=C'NOEMP '\n         MVC   D2+(D1TRKU-D1)(L'D1TRKU),=C'NOSCR '\n         TM    0(R2),X'80'         IS IT EMPTY FLAG\n         BZ    PRINT36              NO\n&TRKALN  SETA  L'D1TRKA\n&TRKULN  SETA  L'D1TRKU\n         MVC   D2+(D1TRKA-D1)(&TRKALN),=CL&TRKALN.'  EMP'\nPRINT36  DS    0H\n         TM    0(R2),X'40'         IS IT SCRATCH FLAG\n         BZ    PRINT39              NO\n         MVC   D2+(D1TRKU-D1)(&TRKULN),=CL&TRKULN.'  SCR'\nPRINT39  DS    0H\n         SPACE 1\n         MVI   WGDGNAME,C' '\n         PUT   WDCBPRT,D2\nPRINT40  DS    0H                  NTH PRINT OF DSN\n         OI    WFLAG2,$2PRTDSN     WE PRINTED THIS DSN\n         PUT   WDCBPRT,D1             WRITE THE DETAIL-LINE\nPRINT80  DS    0H\n*--------------------------------------------------------------------*\n*              LOOP THRU ALL VOLSERS                                 *\n*--------------------------------------------------------------------*\n         LTR   R9,R9               NO VOLSER ENTRIES\n         BZ    PRINT90              YES, BYPASS\n         LA    R6,CTVLLEN(,R6)     NEXT CATVOL ENTRY\n         BCT   R9,VOLLOOP          AND LOOP\nPRINT90  DS    0H\n         B     READLOOP               GO GET ANOTHER RECORD\nENDOFJOB DS    0H\n         TM    WDCBPRT+X'30',X'10' WAS IT OPENED\n         BZ    ENDJ100\n         CLOSE WDCBPRT,MF=(E,WCLOSE)  CLOSE THE PRINTER\nENDJ100  DS    0H\n         TM    WDCBCARD+X'30',X'10' WAS IT OPENED\n         BZ    ENDJ110\n         CLOSE WDCBCARD,MF=(E,WCLOSE) CLOSE THE READER FILE\nENDJ110  DS    0H\nRETURN   DS    0H\n         L     R1,WVOLTBL@\n         L     R0,WVOLTBSZ\n         FREEMAIN R,LV=(0),A=(1)\n         L     R1,WSTKTBL@\n         FREEMAIN R,LV=WSTKTBLL,A=(1),SP=0\n         LR    R1,R10\n         L     R13,SAVEAREA+4         RESTORE LINK REG\n         FREEMAIN R,LV=WORKLEN,A=(1),SP=0\n         RETURN (14,12),T,RC=(15)     RETURN TO CALLER\nABEND001 DS    0H\n         ABEND 1,DUMP\nABEND002 DS    0H\n         ABEND 2,DUMP\nERRCARD  DS    0H\n         WTO   'DSDSM08 READER1 DD MISSING',ROUTCDE=11\n         B     ABEND001\nERRPRT   DS    0H\n         WTO   'DSDSM08 PRINTER1 DD MISSING',ROUTCDE=11\n         B     ABEND001\n*--------------------------------------------------------------------*\n*              ERRORS                                                *\n*--------------------------------------------------------------------*\nERROBT   DS    0H\n*\n         CVD   R15,WDEC\n         OI    WDEC+7,X'0F'\n         MVC   OBTWTO+8+10(4),MASK3\n         ED    OBTWTO+8+10(4),WDEC+6\n         MVC   OBTWTO+8+18(06),WVOLSER\n         MVC   OBTWTO+8+27(44),WDSENT\nOBTWTO   WTO   'OBTAIN RC= XXX, V=VVVVVV,D=                            X\n                                   ',ROUTCDE=11\n         B     READLOOP\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              SUBROUTINE SECTION                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nGETVOLS  DS    0H\n*--------------------------------------------------------------------*\n*              GET VOLUME LIST     BAL   R14,GETVOLS                 *\n*--------------------------------------------------------------------*\n         STM   R14,R12,12(R13)\n         LA    R1,72(,R13)\n         ST    R1,8(,R13)\n         ST    R13,4(,R1)\n         LR    R13,R1\n         SPACE 2\n         MVC   D1NAME(50),=CL50'   *** VOLUMES TO BE SELECTED ***'\n         PUT   WDCBPRT,D1\n         MVC   D1,BLINE\n         PUT   WDCBPRT,D1\n         LA    R8,VOLTBL           1ST VOLUME ENTRY\n         LA    R9,VOLTBL#          # OF VOLUME ENTRIES\nGETV0100 DS    0H\n         LA    R4,60               MAX BLANK COLUMES\n         GET   WDCBVOL             GET RECORD\n         LR    R3,R1\nGETV0120 DS    0H\n         CLI   0(R3),C' '          SCAN FOR 1ST NON-BLANK\n         BNE   GETV0140            GOT IT\n         LA    R3,1(,R3)           NEXT CHAR\n         BCT   R4,GETV0120         LOOP\n         B     GETV0100\nGETV0140 DS    0H\n         CLI   0(R3),C'*'          COMMENT\n         BE    GETV0100             YES\n         SPACE 3\n         S     R4,=F'1'\n         BM    GETV0100\n         LR    R1,R3               COPY START\n         XC    WTRT(256),WTRT\n         MVI   WTRT+C' ',4         STOP ON BLANK\n         EX    R4,GETVTRT\n         SR    R1,R3\n         S     R1,=F'1'\n         BNP   GETV0100\n         MVC   D1,BLINE            PRINT INPUT RECORD\n         EX    R1,GETMVC           MOVE IN DATA\n         PUT   WDCBPRT,D1           AND PRINT\n         SPACE 3\n         CLC   =C'$NOCAND',0(R3)   PARM OF NOCAND\n         BNE   GETV0150             NO\n         OI    WFLAG1,$1NOCAND      YES, SET IT\n         B     GETV0100\nGETVTRT  TRT   0(0,R3),WTRT\nGETMVC   MVC   D1NAME+07(00),0(R3)\nGETV0150 DS    0H\n         CLC   =C'$MIGR',0(R3)     PARM OF MIGRATE\n         BNE   GETV0160             NO\n         OI    WFLAG1,$1MIGR        YES, SET IT\n         B     GETV0100\nGETV0160 DS    0H\n         CLC   =C'$START=',0(R3)   PARM OF START=\n         BNE   GETV0170             NO\n         OI    WFLAG1,$1START       YES, SET IT\n         LA    R3,7(,R3)\n         MVC   WSTART,BLINE\n         LA    R0,44\n         LR    R1,R3               SCAN TILL BLANK\nGETV0162 DS    0H\n         CLI   0(R1),C' '          IS IT BLANK YET\n         BE    GETV0168             YES\n         LA    R1,1(,R1)            NO, INCR\n         BCT   R0,GETV0162         AND LOOP\nGETV0168 DS    0H\n         SR    R1,R3               GET DSN PREFIX LENGTH\n         S     R1,=F'1'            -1 MOVE EXECUTE\n         BZ    GETV0170\nMVCSTART MVC   WSTART(0),0(R3)     MOVE IN START\n         EX    R1,MVCSTART\n         B     GETV0100\n*\nGETV0170 DS    0H\n         CLC   =C'$TAPE',0(R3)     PARM OF MIGRATE\n         BNE   GETV0179             NO\n         OI    WFLAG1,$1TAPE        YES, SET IT\n         B     GETV0100\nGETV0179 DS    0H\n*--------------------------------------------------------------------*\n*              MUST BE A VOLSER                                      *\n*--------------------------------------------------------------------*\nGETV0200 DS    0H\n         MVC   0(6,R8),0(R3)       MOVE IN VOLSER\n         SPACE 1\n         OI    WFLAG1,$1VOLS       WE GOT VOLUMES\n*\n         LA    R8,VOLTBLLN(,R8)    NEXT ENTRY\n         BCT   R9,GETV0100         AND LOOP\n         WTO   'DSM08001 VOLUME TABLE OVERFLOW',ROUTCDE=11\nGETVEOF  DS    0H\n         CLOSE WDCBVOL,MF=(E,WCLOSE)\n         TM    WFLAG1,$1VOLS\n         BO    GVOLRC00\n         MVC   D1,BLINE\n         MVC   D1NAME+07(6),=CL6'*ALL*'\n         PUT   WDCBPRT,D1\n         MVC   D1,BLINE\n         B     GVOLRC00\nGVOLRC00 DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         SPACE 3\nCATREAD  DS    0H\n*--------------------------------------------------------------------*\n*              READ CATALOG        BAL   R14,CATREAD                 *\n*                                  R1 =  DSNAME                      *\n*--------------------------------------------------------------------*\n         STM   R14,R12,12(R13)\n         LA    R14,72(,R13)\n         ST    R13,4(,R14)\n         ST    R14,8(,R13)\n         LR    R13,R14\n         SPACE 3\n         MVC   WCTGENT,0(R1)\n*--------------------------------------------------------------------*\n*              RE-INITIALIAZE CTGWA                                  *\n*              FOR FULL SEARCH                                       *\n*--------------------------------------------------------------------*\nCATR0000 DS    0H\n         LA    R0,WCTGWA\n         L     R1,=A($WCTGWAL)\n         SR    R15,R15\n*        MVCL  R0,R14\n         MVC   WCTGWA,=AL2($WCTGWAL,0)\n         MVI   CPL1#PL,CPL1@PLN    NUMBER OF ENTRIES IN PL\n         SLR   R1,R1\n         IC    R1,CPL1#PL\n         LA    R2,CPL1@PL\n         S     R1,=F'1'\n         BNP   CATR0120\nCATR0100 DS    0H\n         LA    R2,4(,R2)           SKIP MULTITYP\n         L     R3,0(,R2)\n         MVC   LENTNAME-FENTNAME(8,R3),=D'0' ZERO LENGTH AND PTR\n         BCT   R1,CATR0100\nCATR0120 DS    0H\n*--------------------------------------------------------------------*\n*              CALL CATALOG                                          *\n*--------------------------------------------------------------------*\n         LA    R1,CTGPL01             POINT TO CPL1\n         SR    R0,R0                  CLEAR R0\nCAT26    SVC   26                     EXECUTE SVC26\nCAT26A   LTR   R15,R15\n*        BNZ   CATERR99\n         SPACE 2\n         CLC   CTGPL01+20(2),=XL2'0'  ANY FEEDBACK?\n         BE    CATR0200                NO, GOT ONE\n         CLC   CTGPL01+20(2),=C'AH'   UNKNOWN CATALOG\n         BE    CATERR                  YES, GOT ONE\n         CLC   CTGPL01+20(2),=C'FE'   UNKNOWN CATALOG PARM\n         BE    CATERR2                 YES, GOT ONE\n         CLC   CTGPL01+20(2),=C'EG'   END OF CATALOG\n         BE    CATRRC08                YES,\n         CLC   CTGPL01+20(2),=C'FT'   RACF PROTECTED DSN\n         BE    CATRRC12                YES,\n         CLC   CTGPL01+20(2),=C'H2'   VVDS VOLUME UNAVAILABLE\n         BE    CATR0200                YES,\n         B     CATERR99\nCATR0200 DS    0H\n         L     R1,PENTYPE\n         MVC   WDSENTT,0(R1)       COPY ENTYPE\n*\n         MVC   WDSENT,BLINE        BLANK IT OUT\n         ICM   R1,15,LENTNAME\n         BNP   CATRRC00\n         L     R2,PENTNAME\n         MVC   WCTGENT,0(R2)\n         MVC   WDSENT,0(R2)\n*\n         LA    R1,WDSENT           DSNAME @\n*        BAL   R14,STKPUSH         STACK PUSH\n         CLI   WDSENTT,C'B'        IS IT A GDG BASE\n         BE    CATR1000             YES\n         B     CATRRC00\n*\nCATR1000 DS    0H                  GDG BASE FOUND\n*--------------------------------------------------------------------*\n*              COPY GDGNAME TO GDGTBL                                *\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*              PUSH @ OF EACH DSN ON STACK                           *\n*--------------------------------------------------------------------*\n         MVC   WGDGNAME,WDSENT     COPY GDGNAME\n         L     R2,LGDGNAME         LENGTH OF GDGNAME FIELDS\n         LTR   R2,R2\n         BZ    CATRRC00\n         SRDL  R2,32               SHIFT TO R3\n         D     R2,=F'49'           AND GET # OF ENTRIES\n*              R3 = QUOTIENT\n         ST    R3,WGDGNUM\n         L     R1,PGDGNAME\n         LA    R1,1(,R1)           POINT PASSED ENTTYPE\nCATR1210 DS    0H                  R1 = DSNAME\n         BAL   R14,STKPUSH         PUSH ON STACK\nCATR1220 DS    0H\n         LA    R1,49(,R1)          NEXT ENTRY\n         BCT   R3,CATR1210\nCATRRCH2 DS    0H                  VVDS VOLUME MISSING\n         LA    R15,0\n         B     CATRRCXX\nCATRRC00 DS    0H\n         LA    R15,0\n         B     CATRRCXX\nCATRRC04 DS    0H\n         LA    R15,4\n         B     CATRRCXX\nCATRRC08 DS    0H                  END OF CATALOG\n         LA    R15,8\n         B     CATRRCXX\nCATRRC12 DS    0H                  END OF CATALOG\n         LA    R15,12\n         B     CATRRCXX\nCATRRC16 DS    0H                  RECOVERABLE DSN ERROR\n         LA    R15,16\n         B     CATRRCXX\nCATRRCXX DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=(15)\n*--------------------------------------------------------------------*\n*              SVC   26 ERROR                                        *\n*--------------------------------------------------------------------*\nCATERR   DS    0H\n         MVC   D1,BLINE               CLEAR THE DETAIL LINE\n         MVC   D1+2(40),=CL40'  *** UNKNOWN CATALOG ***'\n         PUT   WDCBPRT,D1             WRITE BAD RETURN MESSAGE\n         B     CATRRC04\nCATERR2  DS    0H\n         MVC   D1,BLINE               CLEAR THE DETAIL LINE\n         MVC   D1+2(40),=CL40'  *** UNKNOWN CATALOG PARAMETER *** '\n         PUT   WDCBPRT,D1             WRITE BAD RETURN MESSAGE\n         B     CATRRC08\nCATERR99 DS    0H\n         LR    R2,R0\n         MVC   D1,BLINE               CLEAR THE DETAIL LINE\n         MVC   D1+1(2),CTGPL01+20     MOVE IN FEED BACK CODE\n         MVC   D1+5(46),=CL46'BAD RC=XXX RSN=XXX FROM SVC 26 - PREVIOUS.\n                DSN='\n*\n         CVD   R15,WDEC            RC=\n         OI    WDEC+7,X'0F'\n         UNPK  D1+5+7(3),WDEC+6(2)\n*\n         CVD   R2,WDEC             RSN=\n         OI    WDEC+7,X'0F'\n         UNPK  D1+5+15(3),WDEC+6(2)\n*\n         MVC   D1+5+46(44),WDSENT\n         PUT   WDCBPRT,D1             WRITE BAD RETURN MESSAGE\n         SPACE 1\n         ICM   R1,15,LENTNAME\n         BZ    CATERR98\n         MVC   D1,BLINE               CLEAR THE DETAIL LINE\n         L     R2,PENTNAME\n         MVC   D1+5(46),=CL46'                                  CURRENT.\n                DSN='\n         MVC   D1+5+46(44),0(R2)\nCATERR98 DS    0H\n         SR    R15,R15                CLEAR REG 15\n         LA    R15,10                 SET RETURN CODE TO 10\n         B     CATRRCXX\n         SPACE 3\nSTKPUSH  DS    0H\n*--------------------------------------------------------------------*\n*              PUSH ENTRY ON STACK BAL   R14,STKPUSH                 *\n*              INPUT               R1 =  @ OF DSNAME                 *\n*--------------------------------------------------------------------*\n         STM   R14,R12,12(R13)\n         SPACE 3\n         L     R2,WSTKCURR         @ OF CURRENT\n         CLI   0(R2),0             IS CURRENT DATA = 0\n         BE    SPUSH100             YES, DONT INCR\n         LA    R2,44(,R2)          NEXT STACK ADDR\nSPUSH100 DS    0H\n         MVC   0(44,R2),0(R1)      SAVE IN @ OF DSN\n         ST    R2,WSTKCURR         NEW CURRENT ENTRY\n         MVI   44(R2),0            ZERO NEXT ENTRY\n         AP    WSTKNUM,=P'1'\n         RETURN (14,12),RC=0\n         SPACE 3\nSTKPOP   DS    0H\n*--------------------------------------------------------------------*\n*              POP ENTRY FROM STAC K   BAL R14,STKPOP                *\n*              OUTPUT              WDSENT =    DSNAME                *\n*--------------------------------------------------------------------*\n         STM   R14,R12,12(R13)\n         SPACE 3\n         CP    WSTKNUM,=P'0'\n         BE    SPOPRC04\n         L     R2,WSTKCURR\n         MVC   WDSENT,0(R2)        COPY DSNAME\n         MVI   0(R2),0             ZERO THIS ENTRY\n         C     R2,WSTKTOP          ARE WE AT THE TOP\n         BE    SPOPRC00             YES\n         SL    R2,=F'44'           BACK UP 4\n         ST    R2,WSTKCURR         AND SAVE\nSPOPRC00 DS    0H\n         SP    WSTKNUM,=P'1'\n         OI    WFLAG3,$3STKOFF     GETTING FROM STACK\n         LA    R15,0\nSPOPRCXX DS    0H\n         RETURN (14,12),RC=(15)\nSPOPRC04 DS    0H\n         NI    WFLAG3,255-$3STKOFF NOT FROM STACK\n         ZAP   WSTKNUM,=P'0'\n         LA    R15,4\n         B     SPOPRCXX\n         EJECT\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\n*\nDSCBCAM  CAMLST SEARCH,2,3,4\n*\nMASK3    DC    X'40202120'             MASK - ZZZ\nTRANS    DC    C'0123456789ABCDEF'\n*\nDSNTYPE  DS    0H\n         DC    CL15'A NONVSAM'\nDSNTYPEL EQU   *-DSNTYPE\n         DC    CL15'B GDG BASE'\n         DC    CL15'D VSAM DATA'\n         DC    CL15'I VSAM INDEX'\n         DC    CL15'G AIX'\nGDGTYPE  DC    CL15'H GDG NAME'\n         DC    CL15'C CLUSTER'\nDSNTYPE# EQU   (*-DSNTYPE)/DSNTYPEL\nTRTDLM   DC    256AL1(0)\n         ORG   TRTDLM+C' '\n         DC    AL1(4)\n         ORG   TRTDLM+C'.'\n         DC    AL1(8)\n         ORG   ,\n*\n*****    BEGINNING OF SVC26 PARAMETER LIST\n*\nCTGPL01  DS    0F\n         DC    B'00000110'     0      SVC26 OPTION 1\n         DC    B'00010001'     1      SVC26 OPTION 2\n         DC    B'10000001'     2      SVC26 OPTION 3\n         DC    B'00000000'     3      SVC26 OPTION 4\nCPL1ENT  DC    AL4(0) WCTGENT  4      ADDRESS OF DATA SET NAME\nCPL1CAT  DC    AL4(0) WCTGCAT  8      ADDRESS OF CATALOG NAME\nCPL1WA   DC    AL4(0) WCTGWA   12     ADDRESS OF WORK AREA\n         DC    B'00100001'     16     DO LISTCAT FUNCTION\n         DC    B'00000000'     17     ?????\nCPL1ENTT DC    X'FF'           18     TYPE OF CAT REC\nCPL1#PL  DC    AL1(CPL1@PLN)   19     NUMBER OF CTGFIELD'S\n         DC    AL2(0)          20     FEED BACK AREA(NOT SUPERL)\n         DC    AL2(0)          22     SUPERLOCATE FLAGS\n         DC    AL4(0)          24     ADDRESS OF JSCB\nCPL1@PL  EQU   *\n         DC    AL4(FMULTI)            MULTI\n         DC    AL4(FENTNAME)          ENTNAME\n         DC    AL4(FENTYPE)           ENTYPE\n         DC    AL4(FCATVOL)           CATVOL\n         DC    AL4(FOPENIND)          OPENIND\n         DC    AL4(FGDGNAME)          GDGNAMES\n         DC    AL4(FGDGLIM)           GDGLIMIT\n         DC    AL4(FGDGATTR)          GDGATTR\n         DC    AL4(FNOEXT)            NOEXTNT # OF EXTENTS\n         DC    AL4(FITYPEXT)          EXTENT TYPE\n         DC    AL4(FTRBAEXT)          TRKS-EXT INFO\n         DC    AL4(FHURBADS)          HI USED RBA\n         DC    AL4(FHARBADS)          HI ALLOC RBA\n         DC    AL4(FDSATTR)           DSATTR\nCPL1@PLN EQU   (*-CPL1@PL)/4\n*\n*****    END OF SVC26 PARAMETER LIST\n*\n*\n*****    BEGINNING OF FIELD(S) TO BE RETURNED BY SVC26 INTO WCTGWA\n*\nMULTI    GENFPL MULTITYP,N=5       MAX LABEL LENGTH=7\nENTNAME  GENFPL ENTNAME\nENTYPE   GENFPL ENTYPE\nOPENIND  GENFPL OPENIND\nCATVOL   GENFPL CATVOL2\nGDGNAME  GENFPL GDGNAME\nGDGLIM   GENFPL GDGLIMIT\nGDGATTR  GENFPL GDGATTR\nNOEXT    GENFPL NOEXTNT\nITYPEXT  GENFPL ITYPEXT\nTRBAEXT  GENFPL TRBAEXT\nHURBADS  GENFPL HURBADS\nHARBADS  GENFPL HARBADS\nDSATTR   GENFPL DSATTR\n*\n*****    END OF FIELD(S) TO BE RETURNED BY SVC26 INTO WCTGWA\n*\n*\n*****    END OF SVC26 USER WORK AREA\n*\n*\nMTYPES   DC    Y(L'MTYPELST)       INFO FOR\nMTYPELST DC    C'ABDHI'              MULTITYP\nMTYPES#  EQU   *-MTYPELST              # OF FIELDS\nMTYPELN  EQU   *-MTYPES                LENGTH OF MTYPES\n*\n*\n*\n         LTORG ,\n*--------------------------------------------------------------------*\n*              THIS MUST BE THE LAST THING BEFORE DSECTS             *\n*              DUE TO A USING ON STATS,                              *\n*--------------------------------------------------------------------*\nSTX1CAT  DC    CL(L'ST01CAT)' ENTRIES'\nSTX1PROC DC    CL(L'ST01PROC)' PRINTED'\nSTX1MISS DC    CL(L'ST01MISS)' MISSING'\nSTX1DEVT DC    CL(L'ST01DEVT)' BAD-DEV'\nSTX1MIGR DC    CL(L'ST01MIGR)' MIGRATE'\nSTX1TRKA DC    CL(L'ST01TRKA)' TRKS ALLOCATED'\nSTX1TRKU DC    CL(L'ST01TRKU)'      TRKS USED'\nST01     DS    0C\n         DC    C' ## '\nST01CAT  DC    C' NNNNNNN'\n         DC    C'  '\nST01PROC DC    C' NNNNNNN'\n         DC    C'  '\nST01MISS DC    C' NNNNNNN'\n         DC    C'  '\nST01DEVT DC    C' NNNNNNN'\n         DC    C'  '\nST01MIGR DC    C' NNNNNNN'\n         DC    C'  '\nST01TRKA DC    C' NNN,NNN,NNN,NNN '\n         DC    C'  '\nST01TRKU DC    C' NNN,NNN,NNN,NNN '\nST01LEN  EQU   *-ST01\n         SPACE 2\nMVCTBL   DS    0F\n         DC    A(XOPEN,XOPENL,WOPEN-WORK)\nMVCTLEN  EQU   *-MVCTBL\n         DC    A(XCLOSE,XCLOSEL,WCLOSE-WORK)\n         DC    A(XDCBCARD,XDCBL,WDCBCARD-WORK)\n         DC    A(XDCBPRT,XDCBL,WDCBPRT-WORK)\n         DC    A(XDCBVOL,XDCBL,WDCBVOL-WORK)\n         DC    A(0)\n*\nXOPEN    OPEN  (0),MF=L\nXOPENL   EQU   *-XOPEN\n*\nXCLOSE   OPEN  (0),MF=L\nXCLOSEL  EQU   *-XCLOSE\n*\nXDCBCARD DCB   DSORG=PS,MACRF=GM,DDNAME=READER1,EODAD=ENDOFJOB,        X\n               RECFM=FB,LRECL=80\nXDCBL    EQU   *-XDCBCARD\n*\nXDCBPRT  DCB   DSORG=PS,MACRF=PM,DDNAME=PRINTER1,                      X\n               RECFM=FBA,LRECL=133\n*\nXDCBVOL  DCB   DSORG=PS,MACRF=GL,DDNAME=VOLUMES,EODAD=GETVEOF,         X\n               RECFM=FB,LRECL=80\n*\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\n*\nSAVEAREA DS    (5*9)D                 SAVE AREA FOR CALLING PGM REGS\n*\nBLINE    DS    CL133' '            FILLED IN BY INITIALIZATION\nDASH     DS    CL133'-'            \"\"\n*--------------------------------------------------------------------*\n*              INPUT CARD AREA                                       *\n*--------------------------------------------------------------------*\nCARDREC  DS    0CL80\nCARDDIV  DS    CL2\n         DS    CL78\n*--------------------------------------------------------------------*\n*              PRINT RECORD                                          *\n*--------------------------------------------------------------------*\nD1       DS    0CL133\n         DS    C' '\nD1NAME   DS    CL44' '              DATA SET NAME\n         DS    CL2' '               CONTINUE CHARACTER\nD1VOL    DS    CL6' '\n         DS    CL1' '\nD1STAT   DS    CL8' '\n         DS    CL1' '\nD1OPEN   DS    CL6' '\n         DS    CL1' '\nD1EXT    DS    CL4' '\n         DS    CL1' '\nD1TYPE   DS    CL(DSNTYPEL-2)' '\n         DS    CL1' '\nD1TRKA   DS    CL6' '              TRACK ALLOC\n         DS    CL1' '\nD1TRKU   DS    CL6' '              TRACK USED\n         DS    CL1' '\n         DS    CL(133-(*-D1))' '\nD2       DS    CL133' '\n*--------------------------------------------------------------------*\n*              OBTAIN WORK AREAS                                     *\n*--------------------------------------------------------------------*\n*\nOBTDSN   DS    CL44                    PLACE FOR DSNAME\nOBTVOL   DS    CL6                     PLACE FOR VOLUME ID\n*\nDS1AREA  DS    0CL256 --+              PLACE FOR DSCB INFO\n         DS    CL31     |              FILLER\nDS1REFDT DS    CL3      |              DATE FILE WAS LAST REFERENCED\n         DS    CL4      |              FILLER\nDS1DSORG DS    CL2      |              DATASET ORGANIZATION\n         DS    CL9      |              FILLER\nDS1PTIND DS    CL1      |              PROTECTION INDICATOR\n         DS    CL90     |              FILLER\nDS1PTIN1 DS    CL1      |              PROTECTION INDICATOR\nDS1PTIN2 DS    CL1      |              OPEN INDICATOR\n         DS    0D       V              WDEC ALIGN\n         DS    CL(L'DS1AREA-(*-DS1AREA)) FILL OUT WORK AREA\n*--------------------------------------------------------------------*\n*              VOLUME INCLUSION TABLE                                *\n*--------------------------------------------------------------------*\n*\nVOLTBL   DS    0F\n         DS    50CL6' '\nVOLTBLLN EQU   6\nVOLTBL#  EQU   (*-VOLTBL)/VOLTBLLN\n*\n*\nWDEC     DS    2D'0'\nWPARM    DS    A\nWVOLSER  DS    CL6' '\nWVOLDEVT DS    CL4' '\nWNUMTRKA DS    PL6'0'              11 DIGITS\nWNUMTRKU DS    PL6'0'              11 DIGITS\nWNUMCAT  DS    PL4'0'               7 DIGITS\nWNUMPROC DS    PL4'0'               7 DIGITS\nWNUMMISS DS    PL4'0'               7 DIGITS\nWNUMMIGR DS    PL4'0'               7 DIGITS\nWNUMDEVT DS    PL4'0'               7 DIGITS\nWNUMVOL  DS    A(0)\nWTRKALLO DS    F\nWCALL    DS    5F\nWALIAS   DS    CL8\nWALIASPV DS    CL8\nWALIASCT DS    CL44\nWSTART   DS    CL44' '\n*\n*--------------------------------------------------------------------*\n*              FLAGS                                                 *\n*--------------------------------------------------------------------*\nWFLAG1   DS    X'00'               FLAG 1 OPTIONS\n$1ALL    EQU   X'80'                DO ALL DSN, NOT JUST MISSING\n$1OPEN   EQU   X'40'                ONLY SHOW OPEN DSN\n$1VOLS   EQU   X'20'                VOLUMES READ IN\n$1NOCAND EQU   X'10'                NO CANDIDATE VOLUMES\n$1MIGR   EQU   X'08'                PRINT MIGRATED DSN\n$1START  EQU   X'04'                START=\n$1TAPE   EQU   X'02'                $TAPE OK\n*\nWFLAG2   DS    X'00'               FLAG 2 LOCAL FOR BINGO\n$2PRTDSN EQU   X'80'                PRINTED THIS DSN ALREADY\n$2MISS   EQU   X'40'                MISSING VOLSER\n$2OPEN   EQU   X'20'                IS THIS DSN OPEN\n$2MIGR   EQU   X'08'                IS THIS DSN MIGRATED\n$2TAPE   EQU   X'04'                THIS IS ON TAPE, NOT MIGRATED\n*\nWFLAG3   DS    X'00'               FLAG 3 GLOBAL\n$3STKOFF EQU   X'80'                THIS ENTRY OFF OF STACK\n*\nWSTKNUM  DS    A\nWSTKCURR DS    A\nWSTKTOP  DS    A\nWSTKTBL@ DS    A\nWSTKTBLL EQU   256*45\nWTRT     DS    256X'00'\n*--------------------------------------------------------------------*\n*              SVC 26 DATA AREA                                      *\n*--------------------------------------------------------------------*\nWDSENTT  DS    CL1' '               ENTYPE\nWDSENT   DS    CL44' '              DATA SET NAME\nWDSENT43 EQU   WDSENT+43            LAST BYTE OF DATA SET NAME\nWCTGENT  DS    CL44' '              CTG DSNAME\nWCTGCAT  DS    CL44' '              CTG CATNAME\nWGDGNAME DS    CL44' '              CURRENT/LAST GDGNAME\nWGDGNUM  DS    A                    CURRENT GDG USED\n*--------------------------------------------------------------------*\n*              DCB AREA                                              *\n*--------------------------------------------------------------------*\n         DS    0F\nWOPEN    DS    CL(XOPENL),0F\nWCLOSE   DS    CL(XCLOSEL),0F\nWDCBCARD DS    CL(XDCBL),0F\nWDCBPRT  DS    CL(XDCBL),0F\nWDCBVOL  DS    CL(XDCBL),0F\n*--------------------------------------------------------------------*\n*              UCBINFO WORK AREA                                     *\n*--------------------------------------------------------------------*\n         DS    0A                           VOLS OPERAND SUB-FIELDS\nWVOLTBL@ DS    A\nWVOLTBSZ DS    A\nWDEVCNT  DS    A                   DEVICE COUNT\nWDEVRETC DS    A                   RETURN CODE\nWDEVRSNC DS    A                   REASON CODE\n         UCBINFO MF=(L,WUCBINFO,0D)\n*--------------------------------------------------------------------*\n*              UCBSCAN WORK AREA                                     *\n*--------------------------------------------------------------------*\n         DS    0A                           VOLS OPERAND SUB-FIELDS\nWUCBSVCW DS    0F'0',XL100                  UCBSCAN WORK AREA\nWUCBMXT  DS    CL32' '                      UCBSCAN CMXTAREA\nWUCBDEVN DS    CL4                          DEVNAME\nWUCBDCEL DS    H'128'                       UCBSCAN DCELEN=128\nWUCBDCE  DS    CL128' '                     UCBSCAN DCEAREA\nWUCBCOPY DS    0F'0',CL64                   COPY OF RETURNED UCB\n         DS    CL64                         JUST IN CASE\n         UCBSCAN MF=(L,WUCBSCAN,0D)\n*--------------------------------------------------------------------*\n*              SVC 26 WORK AREA                                      *\n*--------------------------------------------------------------------*\n*\n*        DEFINITION OF AMDSB (PAGES 167-168 DIAGNOSES REFERENCE)\n*        SAME  ORDER AS IN CTGPL01\n*\n$WCTGWAL EQU   13000\nWCTGWA   DS    0D\n         DS    AL2($WCTGWAL)       LENGTH OF WORK AREA\n         DS    AL2(0)              LENGTH OF WORK AREA USED\n         DS    ($WCTGWAL-(*-WCTGWA))C\n         SPACE 3\nWORKLEN  EQU   *-WORK\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CATVOL2 RETURNED AREA                                 *\n*--------------------------------------------------------------------*\nCTVL     DSECT\nCTVLID   DS    AL2                 VOLUME NUMBER\nCTVLUNIT DS    XL4                 UNIT TYPE\nCTVLVOL  DS    CL6                 VOLSER\nCTVLFOX  DS    XL2                 X'FFFF'\nCTVLSTAT DS    X                   VOLSER STAT\nCTVLSPRI EQU   X'80'                VOLSTAT = PRIME\nCTVLSCAN EQU   X'40'                VOLSTAT = CANDIDATE\nCTVLSBAS EQU   X'02'                VOLSTAT = BASE\nCTVLSASS EQU   X'01'                VOLSTAT = ASSOCIATE\nCTVLFLGS DS    XL1                 OTHER FLAGS\nCTVLLEN  EQU   *-CTVL\n*\n*--------------------------------------------------------------------*\n*              VOLDEVT DSECT                                         *\n*--------------------------------------------------------------------*\nVOLDEVT  DSECT\nVOLDVOL  DS    CL6                 VOLSER\nVOLDUNIT DS    XL4                 UNIT TYPE\nVOLDLEN  EQU   *-VOLDEVT\n*--------------------------------------------------------------------*\n*              IBM DSECTS                                            *\n*--------------------------------------------------------------------*\n*              UCB   - IOS UNIT CONTROL BLOCK\n         PRINT NOGEN\n*UCB     DSECT\n         IEFUCBOB PREFIX=YES\n         PRINT GEN\n*--------------------------------------------------------------------*\n*              REGISTER EQUATES                                      *\n*--------------------------------------------------------------------*\n*\nR0       EQU   0\nR1       EQU   1                     PARAMETER LIST\nR2       EQU   2                     BASE REGISTER 1\nR3       EQU   3                     BASE REGISTER 2\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6                     DECIMAL CONVERSION WORK REGISTER\nR7       EQU   7\nR8       EQU   8                     MAXIMUM NUMBER OF LINES PER PAGE\nR9       EQU   9                     NUMBER OF LINES PRINTED\nR10      EQU   10                    LINE COUNT INCREMENTOR\nR11      EQU   11\nR12      EQU   12                    BRANCH AND LINK REGISTER\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   DSDSM08\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSUNARC": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00I\\x00\\x97#/\\x01\\x11\\x08/\\x10W\\x02\\xe0\\x02\\x08\\x00\\xd1\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1997-08-20T00:00:00", "modifydate": "2011-03-23T10:57:49", "lines": 736, "newlines": 520, "modlines": 209, "user": "KBASS"}, "text": "         PUNCH ' ORDER DSUNARC(P)'\nDSUNARC  TITLE 'ISSUE HSM RECALL FOR ARCHIVED DATASETS IN JOB'\n&GEN     SETC  'GEN'\n*--------------------------------------------------------------------*\n*        FUNCTION:                                                   *\n*              TO SCAN SIOT, RETREIVE ALL DATASET NAMES AND          *\n*              ISSUE RECALL TO HSM IF DSN IS ARCHIVED                *\n*                                                                    *\n*        USAGE:                                                      *\n*              PUT THIS AS THE FIRST STEP IN THE JOB WITH NO         *\n*              DDNAMES.                                              *\n*              //DSUNARC   EXEC PGM=DSUNARC                          *\n*                                                                    *\n*        ATTRIBUTE: RENT                                             *\n*                   AMODE=31 RMODE=24                                *\n*              ARCH MACROS MUST HAVE DATA BELOW 16M LINE             *\n*                                                                    *\n*        REGS ON INPUT:                                              *\n*                                                                    *\n*              R1  ='WAIT' OR 'ABEND'                                *\n*                                                                    *\n*        REGS ON OUTPUT:                                             *\n*                                                                    *\n*              R15 = 0 ALL RECALLED                                  *\n*                  = ABEND 901, 902                                  *\n*                                                                    *\n*        REGS USAGE:                                                 *\n*                                                                    *\n*              R5  = OS SIOT                                         *\n*              R6  = OS SCT                                          *\n*              R7  = OS JCT                                          *\n*              R8  = TBLDSECT                                        *\n*              R9  = BAL REG                                         *\n*              R10 = JFCB IN DSN00000-DSN00090                       *\n*              R11 = LOCAL WORK AREA                                 *\n*              R12 = BASE1                                           *\n*              R13 = SAVE AREA                                       *\n*                                                                    *\n*--------------------------------------------------------------------*\n* 08/22/97 KBASS ADDED RELATIVE GDG (-1) AND WHOLE GDG BASE SUPPORT  *\n*                ALSO NOW BUILD TBL ENTRIES FROM A 32K BUFFER SO I   *\n*                DO NOT HAVE TO SCAN JFCB/CATALOG TWICE              *\n* 09/09/98 KMB1  HDELETE MUST BE DISP=(MOD,DELETE)                   *\n* 11/16/00 KMB2  LOOP BACK THRU DATASETS TO SEE IF STILL ARCHIVED    *\n*                AND ONLY RECALL/WAIT ON THE FIRST ONE ON RETRY      *\n*--------------------------------------------------------------------*\nDSUNARC  CSECT\nDSUNARC  AMODE 31\nDSUNARC  RMODE 24\n         SAVE (14,12),T,DSUNARC_&SYSDATC._&SYSTIME\n         LR    R12,R15\n         USING DSUNARC,R12\n         USING TBLDSECT,R8\n         LR    R10,R1              COPY PARM\n*\n*--------------------------------------------------------------------*\n*              GETMAIN AN ZERO LOCAL AREA                            *\n*--------------------------------------------------------------------*\n         L     R0,=A(LWASIZE)\n         STORAGE OBTAIN,LENGTH=(0),SP=LWASP,BNDRY=PAGE,LOC=BELOW\n         USING LWAMAP,R11\n         LR    R11,R1\n         LR    R1,R0\n         LR    R0,R11\n         SLR   R14,R14\n         SLR   R15,R15\n         MVCL  R0,R14              ZERO MEMORY\n*--------------------------------------------------------------------*\n*              CHAIN SAVE AREAS                                      *\n*--------------------------------------------------------------------*\n         LR    R1,R11\n         LA    R0,LWASAVE#-1\nSAVELP   DS    0H\n         ST    R13,4(,R1)\n         LR    R13,R1\n         LA    R1,72(,R1)\n         ST    R1,8(,R13)\n         BCT   R0,SAVELP\n         LR    R13,R11\n         MVC   0(4,R13),=C'QZQZ'\n*--------------------------------------------------------------------*\n*              ANALYZE PARM FIELD                                    *\n*--------------------------------------------------------------------*\n         L     R1,4(,R13)\n         L     R1,X'18'(,R1)       RESTORE R1\n         ICM   R2,15,0(R1)         @ OF PARM\n         BZ    NOPARM\n         LH    R14,0(,R2)          LENGTH OF PARM\n         C     R14,=F'5'           ROOM FOR 'ABEND'\n         BL    NOPARM\n         CLC   =C'ABEND',2(R2)     IS IT ABEND\n         BNE   NOPARM\n         OI    LWAFLAG,$ABEND\nNOPARM   DS    0H\n         MVC   LWALOOPS,=F'10'     MAX # OF LOOPS THRU CODE     KMB2\n*--------------------------------------------------------------------*\n*              RETRY LOOP                                            *\n*--------------------------------------------------------------------*\nRETRY    DS    0H                                               KMB2\n         NI    LWAFLAG,$ABEND+$RETRY TURN OFF ALL BUT THESE     KMB2\n         XC    LWACLEAR(LWACLRLN),LWACLEAR CLEAR WORK AREA      KMB2\n         SPACE 1                                                KMB2\nCOUNT    DS    0H\n*--------------------------------------------------------------------*\n*              FIND JCT                                              *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   ACTIVE TCB\n         L     R2,TCBJSCB-TCB(,R2) GET JSCB\n         L     R2,JSCBACT-JSCB(,R2) GET ACTIVE JSCB\n         L     R1,JSCBJCT-JSCB(,R2) GET OS/JCT\n*                                  *--------------------------- *\n         BAL   R9,SWAREQ           * R1 = SVA   ..FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   ALLDONE             * R1 = CONVERTED SVA, NOPREF *\n*                                  *--------------------------- *\n         LR    R7,R1\n*--------------------------------------------------------------------*\n*              LOOK AT JCT                                           *\n*--------------------------------------------------------------------*\n         USING JCTDSECT,R7         ADDR OF JCT IN R7 VIA INPUT\n         SR    R1,R1               ZERO FOR ICM\n         ICM   R1,7,JCTSSTR        GET SCT SVA\n         BZ    ALLDONE\nNEWSCT   DS    0H\n*                                  *--------------------------- *\n         BAL   R9,SWAREQ           * R1 = SVA   ..FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   DONESTEP            * R1 = CONVERTED SVA, NOPREF * KMB2\n*                                  *--------------------------- *\n         LR    R6,R1               SCT, NO PREFIX RETURNED\n*--------------------------------------------------------------------*\n*              LOOK AT SCT                                           *\n*--------------------------------------------------------------------*\n         USING SCTDSECT,R6         MAKE ADDRESSABLE\n         ICM   R1,7,SCTFSIOT       ADDR OF FIRST SIOT\n         BZ    NEXTSTEP            NO DDNAMES THIS STEP, CHECK NEXT\nNEWSIOT  DS    0H\n         XC    LWAVOL,LWAVOL\n         NI    LWAFLAG,255-$GDG\n         ZAP   LWAGDG,=P'+0'\n*                                  *--------------------------- *\n         BAL   R9,SWAREQ           * R1 = SVA   ..FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   NEXTSTEP            * R1 = CONVERTED SVA, NOPREF *\n*                                  *--------------------------- *\n         LR    R5,R1\n*--------------------------------------------------------------------*\n*              SCAN SIOT FOR DATASET                                 *\n*--------------------------------------------------------------------*\n         USING SIOTDSCT,R5         MAKE SIOT ADDRESSABLE\nNEWSIOTA DS    0H\n         SR    R1,R1               CLEAR FOR ICM\n         ICM   R1,B'0111',SCTPJFCB GET JFCB ADDR\n*                                  *--------------------------- *\n         BAL   R9,SWAREQ           * R1 = SVA   ..FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   NEXTSIOT            * R1 = CONVERTED SVA, NOPREF *\n*                                  *--------------------------- *\n         LR    R10,R1\n         USING JFCB,R10\n         TM    JFCBTSDM,JFCSDS     SYSIN/SYSOUT OR SUBSUS=\n         BO    NEXTSIOT             YES\n*                                                               *\n         MVC   LWADSN,JFCB         COPY DATASET NAME\n         MVI   LWADSN+L'LWADSN,C' ' 45TH CHAR BLANK FOR CAMLST\n         MVC   LWADSN2,LWADSN      SAVE ORIGINAL DSN FROM JCL\n*--------------------------------------------------------------------*\n*              CHECK IF GDG(***) SPECIFIED                           *\n*--------------------------------------------------------------------*\n         TM    JFCBIND1,JFCGDG     IS THIS A GDG(***) DSN\n         BZ    DSN00090              NO\nDSN00020 DS    0H\n*--------------------------------------------------------------------*\n*              RELATIVE GDG FOUND ADD (-000) TO DSN                  *\n*--------------------------------------------------------------------*\n         LA    R1,LWADSN\n         LA    R2,44-9\n         LA    R3,JFCBELNM         RELATIVE GDG NUMBER\nDSN00025 DS    0H                  FIND END OF DATASET\n         CLI   0(R1),C'('          STRANGE, THIS SHOULD NOT OCCUR\n         BE    DSN00090             YES, NEXT DSN FROM JCL\n         CLI   0(R1),C' '          FIND FIRST BLANK\n         BE    DSN00030             YES\n         LA    R1,1(,R1)           NEXT CHAR\n         BCT   R2,DSN00025         AND LOOP\n         B     NEXTSIOT            DID NOT FIND IT\nDSN00030 DS    0H                  ADD (NNN)\n         MVI   0(R1),C'('\n         LA    R1,1(,R1)\n         LA    R2,7\nDSN00035 DS    0H\n         CLI   0(R3),C' '          END OF RELATIVE GDG NUMBER\n         BE    DSN00040             YES\n         MVC   0(1,R1),0(R3)       MOVE IN GDG NUMBER\n         LA    R1,1(,R1)           NEXT DSN CHAR\n         LA    R3,1(,R3)           NEXT GDG NUMBER\n         BCT   R2,DSN00035\nDSN00040 DS    0H\n         MVI   0(R1),C')'          CLOSE OUT GDG NAME\nDSN00090 DS    0H\n         B     DSN00100            DONT CHECK TEMP DSN STUFF\n         DROP  R10\n*--------------------------------------------------------------------*\n*              CHECK FOR TEMPORARY DSN                               *\n*--------------------------------------------------------------------*\n         CLC   =C'SYS',LWADSN      POSSIBLE\n         BNE   DSN00100\n         CLI   LWADSN+3,C'0'       >= SYS0\n         BL    DSN00100             NO\n         CLI   LWADSN+3,C'9'       <= SYS9\n         BH    DSN00100             NO\n         CLC   =C'.T',LWADSN+8      TEMPORARY\n         BNE   DSN00100\n         CLC   =C'.RA',LWADSN+16     DATASET\n         BNE   DSN00100\n         B     NEXTSIOT            YES\nDSN00100 DS    0H\n         SPACE 1\n         CLC   =C'NULLFILE',LWADSN IS IT NULLFILE\n         BE    NEXTSIOT             YES, SKIP IT\n*\nDSNGDG00 DS    0H\n         SPACE 1\n         CLC   =C'KBASS.TEST.X',LWADSN\n         BNE   KB001\n         MVC   LWAWTO(WTO100L),WTO100\n         MVC   LWAWTO+4(44),LWADSN\n         WTO   ,MF=(E,LWAWTO)\nKB001    DS    0H\n         LA    R0,LWAWORK\n         LA    R1,LWAWORKL\n         SLR   R15,R15\n         MVCL  R0,R14              ZERO LWAWORK\n*\n         LA    R1,LWALOC1\n         MVC   0(LOCATEL,R1),LOCATE\n*\n         LA    R0,LWADSN           DSNAME FOR LOCATE\n         ST    R0,4(,R1)\n         LA    R0,LWAWORK          ANSWER AREA FOR LOCATE\n         ST    R0,12(,R1)\n*--------------------------------------------------------------------*\n*              LOCATE DATASET VIA CATALOG                            *\n*--------------------------------------------------------------------*\n         CATALOG (1)\n*\n         ST    R15,LWACATRC\n*\n         L     R15,LWACATRC\n         LTR   R15,R15             FOUND IT\n         BZ    DSN00180             YES\n         CL    R15,=F'8'           RC=8, POSSIBLE GDG\n         BNE   NEXTSIOT             NO\n*--------------------------------------------------------------------*\n*              IF RC=8 AND WAS A GDG THEN GET NEXT JCL DSN           *\n*--------------------------------------------------------------------*\n         TM    LWAFLAG,$GDG        PROCESSING\n         BO    NEXTSIOT             IF WAS A GDG, NEXT SIOT\n*--------------------------------------------------------------------*\n*              LETS SEE IF JCL DSN IS A GDG BASE                     *\n*              BUILD (-000) ONTO DATASET                             *\n*--------------------------------------------------------------------*\n         OI    LWAFLAG,$GDG\nDSNGDG10 DS    0H\n         CP    LWAGDG,=P'+255'     ARE WE PASSED MAX GDG LIMIT\n         BH    NEXTSIOT             YES\n         MVC   LWADSN,LWADSN2      RESTORE ORIGINAL DSN FROM JCL\n         LA    R1,LWADSN\n         LA    R2,44-9\nDSNGDG15 DS    0H\n         CLI   0(R1),C'('          GDG OR PDS\n         BE    NEXTSIOT             YES, NEXT DSN FROM JCL\n         CLI   0(R1),C' '\n         BE    DSNGDG20\n         LA    R1,1(,R1)\n         BCT   R2,DSNGDG15\n         B     NEXTSIOT\nDSNGDG20 DS    0H\n         MVC   0(2,R1),=C'(-'\n         UNPK  2(3,R1),LWAGDG\n         OC    2(3,R1),=C'000'     MAKE SURE ALL NUMERIC\n         MVI   2+3(R1),C')'\n         AP    LWAGDG,=P'+1'\n         B     DSNGDG00\n*--------------------------------------------------------------------*\n*              CHECK VOLSER='MIGRAT'                                 *\n*--------------------------------------------------------------------*\nDSN00180 DS    0H\n         MVC   LWAVOL,LWAWORK+6\n         SPACE 1\n         CLC   XARCHIVE,LWAVOL     IS IT ARCHIVED\n         BNE   DSN00200             NO\n         SPACE 2\n         BAL   R9,DSNADD\n         C     R15,=F'4'           DATASET ALREADY THERE\n         BE    DSN00200             YES\n         SPACE 3\nDSN00200 DS    0H\n         TM    LWAFLAG,$GDG        ARE WE DOING SPECIAL GDG NAMES\n         BZ    NEXTSIOT             NO\n         B     DSNGDG10\n*--------------------------------------------------------------------*\n*              DATASET IS ARCHIVED                                   *\n*--------------------------------------------------------------------*\n         SPACE 2\nNEXTSIOT DS    0H\n         ICM   R1,B'0111',SCTPSIOT GET NEXT SIOT\n         BNZ   NEWSIOT\nNEXTSTEP DS    0H                  NEXT STEP ROUTINE\n         ICM   R1,7,SCTANSCT       GET ADDR OF NEXT STEP (SCT)\n         BZ    DONESTEP            THATS ALL OF THE STEPS IF 0\n         B     NEWSCT              GO PROCESS NEXT STEP (SCT)\n         EJECT\n*--------------------------------------------------------------------*\n*              ALL DONE SCANNING,  NOW UNARC                         *\n*--------------------------------------------------------------------*\nDONESTEP DS    0H\nTABL0000 DS    0H\n*--------------------------------------------------------------------*\n*              TABLE OF DSN NOW BUILT                                *\n*              EITHER 1) DELETE FROM ARCHIVE IF DISP=(MOD,DELETE) KMB1\n*              OR     2) RECALL IT                                   *\n*--------------------------------------------------------------------*\n         L     R8,LWATTOP          TOP TABLE ADDRESS\nTABL0100 DS    0H\n         LTR   R8,R8               TEST TABLE ENTRY ADDRESS\n         BZ    FINISH               ZERO, THEN CALL W/WAIT\n         CLI   TBLDSN,0            IS THEN ENTRY ZERO\n         BE    FINISH               YES, CALL W/WAIT\n         TM    LWAFLAG,$RETRY      IS THIS A RETRY              KMB2\n         BO    CALLWAIT             YES, ONLY RECALL ONE & WAIT KMB2\n*\n         SPACE 1\n         CLI   TBLFLAG,C'D'        IS IT DELETE\n         BNE   TABL0200             NO, UNARC\n*--------------------------------------------------------------------*\n*              DISP=(...,DELETE),  THEREFORE JUST DELETE IT          *\n*--------------------------------------------------------------------*\n         MVC   LWAWTO(WTO101L),WTO101\n         MVC   LWAWTO+WTO1011(44),TBLDSN\n         WTO   ,MF=(E,LWAWTO)      ISSUE MESSAGE\n         SPACE 2\n         MVC   LWADSN,TBLDSN\n         ARCHDEL DSN=LWADSN,WKAREA=LWAWORK,WAIT=YES,PURGE=YES\n         LTR   R15,R15\n         BZ    TABL0800\n         SPACE 2\n         BAL   R9,HSMRETCD         DISPLAY RETURN CODE\n         B     TABL0800\n*--------------------------------------------------------------------*\n*              RECALL IT                                             *\n*--------------------------------------------------------------------*\nTABL0200 DS    0H\n         MVC   LWADSN,TBLDSN\n         MVC   LWAWTO(WTO100L),WTO100\n         MVC   LWAWTO+WTO1001(44),LWADSN\n         WTO   ,MF=(E,LWAWTO)      ISSUE MESSAGE\n         SPACE 1\n         CL    R8,LWATBLST         THE LAST NON-DELETED ENTRY\n         BE    CALLWAIT             YES, DO WAIT\n         SLR   R15,R15\n         MVC   LWADSN,TBLDSN\n         ARCHRCAL DSN=LWADSN,WKAREA=LWAWORK,WAIT=NO\n         B     RECALLRC\n*\nCALLWAIT DS    0H                  WAIT IF THIS IS LAST ENTRY\n         WTO   'UNARC102 WAITING FOR LAST HRECALL',ROUTCDE=11\n         SLR   R15,R15\n         L     R0,LWATBUF1\n         L     R1,LWATBUFC\n         MVC   LWADSN,TBLDSN\n         ARCHRCAL DSN=LWADSN,WKAREA=LWAWORK,WAIT=YES\nRECALLRC DS    0H\n         LTR   R15,R15             ALL OK\n         BZ    TABL0800             YES\n         BAL   R9,HSMRETCD         DISPLAY RETURN CODE\n         B     FINISH\nTABL0800 DS    0H\n         L     R8,TBLNEXT          NEXT ENTRY\n         B     TABL0100\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              SUBROUTINES                                           *\n*                                                                    *\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*              ADD DSN TO TABLE                                      *\n*--------------------------------------------------------------------*\nDSNADD   DS    0H\n         SPACE 3\n         ICM   R1,15,LWATBUF1      1ST BUFFER GOTTEN YET\n         BNZ   DSNA0020             YES\n         L     R0,=A(TBLBUFSZ)\n         STORAGE OBTAIN,LENGTH=(0),SP=LWASP,BNDRY=PAGE,LOC=ANY\n         ST    R1,LWATBUF1         1ST BUFFER\n         ST    R1,LWATBUFC         SAVE CURRENT BUFFER\n*\n         LR    R0,R1               ZERO\n         L     R1,=A(TBLBUFSZ)      TABLE\n         SLR   R15,R15               BUFFER\n         MVCL  R0,R14                 AREA\n*\n         L     R1,LWATBUF1         1ST BUFFER\n         USING BUFFER,R1\n         L     R0,=A(TBLBUFSZ)\n         ALR   R0,R1\n         ST    R0,BUFFEND          SAVE END OF TABLE\n         XC    BUFFNEXT,BUFFNEXT   ZERO NEXT BLOCK CHAIN\n         LA    R0,BUFFENT          @ FOR 1ST TBL ENTRY\n         ST    R0,LWATBLA          SET CURRENT TBL ENTRY\n         ST    R0,LWATTOP          SET TOP TBL ENTRY\n         DROP  R1\nDSNA0020 DS    0H\n*--------------------------------------------------------------------*\n*              REAL DSN ADD PART                                     *\n*--------------------------------------------------------------------*\nDSNA0100 DS    0H\n*\n         L     R1,LWATTOP          @ OF CURRENT ENTRY\n         MVI   LWADEL,0            PRESET DELETE FLAG=NO\n         TM    SCTSDISP,SIOTDLET   IS IT DELETE\n         BZ    DSNA0110             NO\n         TM    SCTSBYT3,SCTSMOD    IS IT MOD                    KMB1\n         BZ    DSNA0110             NO                          KMB1\n         MVI   LWADEL,C'D'         IS IT DELETE\nDSNA0110 DS    0H\n         LR    R8,R1\n         SPACE 1\nDSNA0200 DS    0H\n         CLI   TBLDSN,0            1ST FREE ENTRY\n         BE    DSNA0300             YES, ADD DATASET\n         CLC   TBLDSN,LWADSN       IS NEW DATASET ALREADY THERE\n         BNE   DSNA0220             NO, CHECK NEXT ENTRY\n         B     DSNARC00             YES, DUPLICATE DATASET\n         SPACE 1\nDSNA0220 DS    0H\n         ICM   R1,15,TBLNEXT       ALREADY CHAINED\n         BNZ   DSNA0110             YES\n*\n         LA    R2,TBLLEN(,R8)      R8 POINTS TO PREV ENTRY\n         L     R1,LWATBUFC         CURRENT BUFFER\n         USING BUFFER,R1\n         CL    R2,BUFFEND          ROOM FOR THIS ON\n         BNL   DSNA0230             NO\n*\n         ST    R2,TBLNEXT          CHAIN IN NEW ENTRY\n         LR    R8,R2               POINT AT NEW ENTRY\n         B     DSNA0300            GO ADD ENTRY\n*\n         DROP  R1\n*\nDSNA0230 DS    0H\n*--------------------------------------------------------------------*\n*              ADD NEW BUFFER      R8 STILL POINTS AT LAST ENTRY     *\n*--------------------------------------------------------------------*\n         L     R0,=A(TBLBUFSZ)\n         STORAGE OBTAIN,LENGTH=(0),SP=LWASP,BNDRY=PAGE,LOC=ANY\n         L     R2,LWATBUFC         OLD CURRENT BUFFER\n         ST    R1,BUFFNEXT-BUFFER(,R2) CHAIN NEW BUFF TO OLD\n         ST    R1,LWATBUFC         NEW CURRENT BUFFER\n*\n         LR    R0,R1               ZERO\n         L     R1,=A(TBLBUFSZ)      TABLE\n         SLR   R15,R15               BUFFER\n         MVCL  R0,R14                 AREA\n*\n         L     R1,LWATBUFC         CURRENT BUFFER\n         USING BUFFER,R1\n         L     R0,=A(TBLBUFSZ)\n         ALR   R0,R1\n         ST    R0,BUFFEND          SAVE END OF TABLE\n         XC    BUFFNEXT,BUFFNEXT   ZERO NEXT BLOCK CHAIN\n         LA    R0,BUFFENT          @ FOR 1ST TBL ENTRY\n         ST    R0,LWATBLA\n         ST    R0,TBLNEXT          R8 STILL POINTS AT LAST ENTRY\n         DROP  R1                   CHAINS OLD TO NEW TBL ENTRY\n         L     R8,LWATBLA          POINT AT NEW ENTRY\n         B     DSNA0300            GO ADD ENTRY\n*--------------------------------------------------------------------*\n*              END OF TABLE SEARCH , JUST ADD IT                     *\n*--------------------------------------------------------------------*\nDSNA0300 DS    0H\n         MVC   TBLDSN,LWADSN       COPY DSNAME\n         MVC   TBLFLAG,LWADEL      MOVE IN DELETE FLAG\n         CLI   TBLFLAG,C'D'        IS DSN TO BE DELETED\n         BE    DSNA0380             YES\n         ST    R8,LWATBLST         LAST RECALL ENTRY\nDSNA0380 DS    0H\nDSNARC00 DS    0H\n         SLR   R15,R15\n         BR    R9\n*--------------------------------------------------------------------*\n*              HSM RETURN CODE CHECKER                               *\n*--------------------------------------------------------------------*\nHSMRETCD DS    0H\n         LA    R1,HSMTBL#\n         LA    R2,HSMTBL\nHSMR0100 DS    0H\n         CL    R15,0(,R2)          IS THIS OUT RETURN CODE\n         BE    HSMR0500             YES\n         LA    R2,HSMTBLEN(,R2)     NO, NEXT ENTRY\n         BCT   R1,HSMR0100         LOOP\n         SPACE 1\n         MVC   LWAWTO(HSM999LN),HSMRC999\n         CVD   R15,LWADEC\n         MVC   LWAWTO+HSM99901(8),=X'4020202020202120'\n         ED    LWAWTO+HSM99901(8),LWADEC+4\n         WTO   ,MF=(E,LWAWTO)      I JUST DONT KNOW\n         BR    R9\nHSMR0500 DS    0H\n         L     R2,4(,R2)           @ OF WTO\n         WTO   ,MF=(E,(R2))\n         BR    R9\n         SPACE 2\nHSMTBL   DC    A(100),A(HSMRC100)  HSM NOT UP\nHSMTBLEN EQU   *-HSMTBL            ARC11NNN* MESSAGES\n         DC    A(002),A(HSMRC002)  NOT MIGRATED\n         DC    A(069),A(HSMRC069)  ADRDSSU FAILED\n         DC    A(074),A(HSMRC074)  RECALL HELD\n         DC    A(095),A(HSMRC095)  OPERATOR REPLIED NO\n         DC    A(400),A(HSMRC400)  INVALID REQUEST\n         DC    A(402),A(HSMRC402)  DATASET NOT FOUND\n         DC    A(403),A(HSMRC403)  DATASET WAS * OR BLANK\n         DC    A(806),A(HSMRC806)  LINK ERROR\n         PRINT NOGEN\nHSMTBL#  EQU   (*-HSMTBL)/HSMTBLEN END OF TABLE\n         SPACE 2\nHSMRC002 WTO   'UNARC9002 DATASET NOT MIGRATED',                       X\n               ROUTCDE=11,MF=L\nHSMRC069 WTO   'UNARC9069 DFHSM ADRDSSU FAILURE, PROBABLY TOO LARGE',  X\n               ROUTCDE=11,MF=L\nHSMRC074 WTO   'UNARC9074 DFHSM RECALL PROBABLY HELD',                 X\n               ROUTCDE=11,MF=L\nHSMRC095 WTO   'UNARC9095 DFHSM OPERATOR REPLIED NO TO MOUNT',         X\n               ROUTCDE=11,MF=L\nHSMRC100 WTO   'UNARC9100 DFHSM IS NOT RUNNING',                       X\n               ROUTCDE=11,MF=L\nHSMRC400 WTO   'UNARC9400 DFHSM INVALID REQUEST',                      X\n               ROUTCDE=11,MF=L\nHSMRC402 WTO   'UNARC9402 DFHSM DATASET LOCATE FAILED',                X\n               ROUTCDE=11,MF=L\nHSMRC403 WTO   'UNARC9403 DFHSM DATASET WAS \"*\" OR BLANK',             X\n               ROUTCDE=11,MF=L\nHSMRC806 WTO   'UNARC9806 DFHSM LINK ERROR',                           X\n               ROUTCDE=11,MF=L\nHSMRC999 WTO   'UNARC9999 DFHSM UNKNOWN RETURN CODE = XXXXXXXX   ',    X\n               ROUTCDE=11,MF=L\nHSM999LN EQU   *-HSMRC999\nHSM99901 EQU   4+38,8              OFFSET TO RETURN CODE\n         SPACE 3\n*--------------------------------------------------------------------*\n*              SWAREQ CONVERT      BAL   R9,SWAREQ                   *\n*              INPUT               R1=SVA ADDR  ..FFFFFF FORMAT      *\n*              OUTPUT              R1=REAL ADDR ..FFFFFF FORMAT      *\n*                                  DOES NOT POINT TO PREFIX          *\n*              MODIFIES REGS       R15,R0,R1                         *\n*--------------------------------------------------------------------*\nSWAREQ   DS    0H\n         XC    WEPA,WEPA\n         LA    R15,WEPA\n         ST    R15,WEPAP\n         STCM  R1,7,SWVA-ZB505(R15) PUT SVA ..FFFFFF INTO FFFFFF00\n         SWAREQ FCODE=RL,EPA=WEPAP,UNAUTH=YES,MF=(E,WSWA)\n         LTR   R15,R15\n         BNZR  R9\n         SPACE 3\n         LA    R15,WEPA\n         L     R1,SWBLKPTR-ZB505(,R15) GET HIGH SVA\n         LA    R15,0\n         BR    R9\n         PRINT &GEN\n         SPACE 3\n*--------------------------------------------------------------------*\n*              ERROR EXITS                                           *\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*              ALL DONE                                              *\n*--------------------------------------------------------------------*\nALLDONE  DS    0H\n*--------------------------------------------------------------------*\n*              CLEAN HOUSE                                           *\n*--------------------------------------------------------------------*\nFINISH   DS    0H\n         ICM   R1,15,LWATBUF1      GET FIRST TBL BUFFER ADDR\nFINISH2  DS    0H\n         LTR   R1,R1\n         BZ    FINISH10            IF ZERO BYPASS\n         L     R2,0(,R1)           NEXT BUFFER\n         L     R0,=A(TBLBUFSZ)\n         STORAGE RELEASE,ADDR=(1),LENGTH=(0),SP=LWASP\n         LR    R1,R2\n         B     FINISH2             FREE ALL THE TABLE BUFFERS\nFINISH10 DS    0H\n*--------------------------------------------------------------------*\n*              LOOP BACK THRU TO SEE IF SOME ARE STILL ARCHIVED      *\n*--------------------------------------------------------------------*\n         L     R8,LWATTOP          TOP TABLE ADDRESS            KMB2\n         LTR   R8,R8               ANY ENTRIES?                 KMB2\n         BZ    EXIT                 NO, THEN WE ARE DONE        KMB2\n*                                                               KMB2\n         L     R1,LWALOOPS         GET RETRY COUNTER            KMB2\n         S     R1,=F'1'            -1                           KMB2\n         BM    EXIT                IF <= 0 THEN EXIT            KMB2\n         ST    R1,LWALOOPS         SAVE NEW VALUE               KMB2\n         OI    LWAFLAG,$RETRY      INDICATE THIS IS A RETRY     KMB2\n         B     RETRY                                            KMB2\n*--------------------------------------------------------------------*\n*              EXIT ALL DONE                                         *\n*--------------------------------------------------------------------*\n*\nEXIT     DS    0H\n         L     R13,4(,R13)\n         L     R0,=A(LWASIZE)\n         LR    R1,R11\n         STORAGE RELEASE,ADDR=(1),LENGTH=(0),SP=LWASP\n         RETURN (14,12),RC=0\n         SPACE 3\n         EJECT\n*--------------------------------------------------------------------*\n*              CONSTANTS                                             *\n*--------------------------------------------------------------------*\n         LTORG ,\nXARCHIVE DC    CL6'MIGRAT'\n         SPACE 3\nLOCATE   CAMLST NAME,2,,4\nLOCATEL  EQU   *-LOCATE\n         SPACE 1\nWTO100   WTO   'UNARC100 SCHEDULING HRECALL FOR    ..                  X\n                                                             ',        X\n               MF=L,ROUTCDE=(11)\nWTO1001  EQU   4+35,44\nWTO100L  EQU   *-WTO100\n         SPACE 1\nWTO101   WTO   'UNARC101 DISP=(,DELETE) HDELETE OF ..                  X\n                                                             ',        X\n               MF=L,ROUTCDE=(11)\nWTO1011  EQU   4+35,44\nWTO101L  EQU   *-WTO101\n         PRINT NOGEN\n         SPACE 3\n         PRINT &GEN\nBLANKS   DC    CL256' '\n*\n         EJECT ,\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        LOCAL WORK AREA MAPPING                                  *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nLWAMAP   DSECT\nLWASAVE# EQU   20\nLWASAVE  DS    (9*LWASAVE#)D\nLWADEC   DS    2D\nLWAWTO   DS    CL(WTO100L),0F\nLWALOC1  DS    XL(LOCATEL),0F\nLWAREC   DS    CL80\n*                                  AREA TO CLEAR BETWEEN LOOPS  KMB2\nLWACLEAR EQU   *                                                KMB2\nLWATBUF1 DS    A                   1ST TABLE BUFFER\nLWATBUFC DS    A                   CURRENT TABLE BUFFER\nLWATTOP  DS    F                   1ST TABLE ENTRY\nLWATBLA  DS    A                   CURRENT TABLE ENTRY\nLWATBLST DS    A                   LAST 'D' ENTRY\nLWACATRC DS    F\nLWACLRLN EQU   *-LWACLEAR                                       KMB2\n*                           END OF AREA TO CLEAR BETWEEN LOOPS  KMB2\nLWALOOPS DS    F                   MAX # OF LOOPS               KMB2\nLWADSN   DS    CL44,C\nLWAVOL   DS    CL6\nLWADSN2  DS    CL44\nLWATBLQ  DS    CL46\nLWAGDG   DS    PL2\nLWAFLAG  DS    X\n$ABEND   EQU   X'80'\n$RETRY   EQU   X'40'\n$COUNTED EQU   X'20'\n$FINISH  EQU   X'10'\n$GDG     EQU   X'08'\nLWADEL   DS    X                   TEMPORARY DELETE FLAG\nWEPAP    DS    A\nWEPA     DS    CL(ZB505LEN),0F'0'\nWSWA     SWAREQ MF=L\n         DS    D\nLWAWORK  DS    XL264               LOCATE/ARCH WORK AREA\nLWAWORKL EQU   *-LWAWORK           LENGTH OF LOCATE WORK AREA\nLWASIZE  EQU   *-LWAMAP\nLWASP    EQU   1\n         EJECT\n*--------------------------------------------------------------------*\n*              DSECTS - LOCAL                                        *\n*--------------------------------------------------------------------*\nBUFFER   DSECT\nBUFFNEXT DS    A\nBUFFEND  DS    A\nBUFFPRFL EQU   *-BUFFER\nBUFFENT  EQU   *\n*\nTBLDSECT DSECT\nTBLNEXT  DS    A\nTBLDSN   DS    CL44\nTBLFLAG  DS    C\n         DS    0F                  ALIGN TO FULL WORD\nTBLLEN   EQU   *-TBLDSECT\nTBLNUM   EQU   ((32768-BUFFPRFL)/TBLLEN)       # ENTRIES IN 32768\nTBLBUFSZ EQU   BUFFPRFL+(TBLLEN*TBLNUM) GETMAIN SIZE\n         EJECT\n*--------------------------------------------------------------------*\n*              DSECTS - SYSTEM                                       *\n*--------------------------------------------------------------------*\n         PRINT NOGEN\n         SPACE 5\n         IKJTCB                    TCB\n         SPACE 5\n         IHAPSA                    PSA\n         SPACE 5\nJFCB     DSECT\n         IEFJFCBN LIST=YES         JFCB\n         SPACE 5\nJSCB     EQU   IEZJSCB\n         IEZJSCB                   JSCB\nJCTDSECT DSECT\n         IEFAJCTB                  OS JCT DSECT\n         SPACE 5\nSCTDSECT DSECT\n         IEFASCTB                  OS SCT DSECT\n         SPACE 5\nSIOTDSCT DSECT\n         IEFASIOT                  SIOT DSECT\n         SPACE 5\n         IEFZB505 LOCEPAX=YES\nZB505LEN EQU   *-ZB505\n         PRINT NOGEN\n         CVT   DSECT=YES           NEEDED BY SWAREQ MACRO\n         IEFJESCT TYPE=DSECT       NEEDED BY SWAREQ MACRO\n         PRINT GEN\n         YREGS  ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSWTO": {"ttr": 3848, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t@\\x00Q\\x00Q\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:40:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "KBASS"}, "text": "***********************************************************************\n* TIME - COBOL SUBROUTINE TO ISSUE  MSG TO CONSOLE                    *\n* ENVIRONMENT - OS/VS                                                 *\n* PURPOSE - ACCEPT 1 PARAMETER FROM COBOL PROGRAM:                    *\n*        1 - 80 BYTE INPUT FIELD                                      *\n*    EXAMPLE:                                                         *\n*        01  WORK-AREA.                                               *\n*            02 MSG PIC X(80).                                        *\n*                 *   *   *      .                                    *\n*        CALL  'DSWTO' USING MSG.                                     *\n*              OR                                                     *\n*        CALL  W-DSWTO USING MSG.                                     *\n*                 *   *   *      .                                    *\n***********************************************************************\n*        ATTRIBUTES:                                                  *\n*              REENTRANT,REUSABLE                                     *\n*              AMODE=31,RMODE=24                                      *\n***********************************************************************\n*        CHANGE LOG:                                                  *\n*        16AUG93 KBASS - RMODE=24 AND SET AMODE=31 IN PROGRAM         *\n***********************************************************************\nDSWTO    CSECT\nDSWTO    RMODE 24                                               16AUG93\nDSWTO    AMODE 31\n         SAVE  (14,12),T,DSWTO_&SYSDATC._&SYSTIME\n         LR    R12,R15\n         USING DSWTO,R12            ADDRESS OUR BASE\n         LR    R11,R1              SAVE PARM ADDRESS\n         GETMAIN RU,LOC=BELOW,LV=WORKLEN,SP=1\n*\n         ST    R1,8(,R13)          CHAIN\n         ST    R13,4(,R1)           SAVE AREAS\n         LR    R13,R1                TOGETHER\n         USING WORK,R13             ADDRESS OUR BASE\n         L     R1,=A(X'80000000'+AM31)                          16AUG93\n         BSM   R0,R1                                            16AUG93\nAM31     DS    0H\n         L     R6,0(,R11)           GET ADDRESS OF STORAGE AREA\n         MVC   XWTO,WTO\n         MVC   XWTO+4(80),0(R6)\n         WTO   ,MF=(E,XWTO)\nRETURN   DS    0H                   RESTORE LINK REG\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=WORKLEN,A=(1),SP=1\n         RETURN (14,12),T,RC=0      RETURN TO CALLER\n         ORG   *-2                 BACK UP OVER BR  R14         16AUG93\n         BSM   R0,R14              RETURN IN CALLERS AMODE      16AUG93\n*--------------------------------------------------------------------*\n*              DATA AREA                                             *\n*--------------------------------------------------------------------*\nWTO      WTO   '                                                       X\n                                               ',ROUTCDE=11,MF=L\nWTOL     EQU   *-WTO\n*--------------------------------------------------------------------*\n*              WORK AREA MAPPING                                     *\n*--------------------------------------------------------------------*\nWORK     DSECT\nSAVEAREA DS    18F\nXWTO     DS    CL(WTOL)\nWORKLEN  EQU   *-WORK\n*--------------------------------------------------------------------*\n*              EQUATES                                               *\n*--------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   DSWTO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSWTOMSG": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x00\\x973\\x9f\\x00\\x973\\x9f\\x11\\x13\\x00\\\\\\x00\\\\\\x00\\x01\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-12-05T00:00:00", "modifydate": "1997-12-05T11:13:20", "lines": 92, "newlines": 92, "modlines": 1, "user": "KBASS"}, "text": "***********************************************************************\n*        STANDALONE PROGRAM TO ISSUE A WTO TO CONSOLE                 *\n*                                                                     *\n*        //WTO   EXEC PGM=DSWTOPGM,PARM='XXXXXX YOUR WTO MSG'         *\n*                                                                     *\n***********************************************************************\n*        ATTRIBUTES:                                                  *\n*              REENTRANT,REUSABLE                                     *\n*              AMODE=31,RMODE=24                                      *\n***********************************************************************\n*        CHANGE LOG:                                                  *\n*        16AUG93 KBASS - RMODE=24 AND SET AMODE=31 IN PROGRAM         *\n***********************************************************************\nDSWTOMSG CSECT\nDSWTOMSG RMODE 24                                               16AUG93\nDSWTOMSG AMODE 31\n         SAVE  (14,12),T,DSWTOMSG_&SYSDATC._&SYSTIME\n         LR    R12,R15\n         USING DSWTOMSG,R12         ADDRESS OUR BASE\n         LR    R11,R1              SAVE PARM ADDRESS\n         GETMAIN RU,LOC=BELOW,LV=WORKLEN,SP=1\n*\n         ST    R1,8(,R13)          CHAIN\n         ST    R13,4(,R1)           SAVE AREAS\n         LR    R13,R1                TOGETHER\n         USING WORK,R13             ADDRESS OUR BASE\n         L     R1,=A(X'80000000'+AM31)                          16AUG93\n         BSM   R0,R1                                            16AUG93\nAM31     DS    0H\n         L     R6,0(,R11)           GET ADDRESS OF STORAGE AREA\n         LH    R7,0(,R6)\n         CH    R7,=Y(WTOL-8)\n         BL    LENOK\n         LH    R7,=Y(WTOL-8)\nLENOK    DS    0H\n         SH    R7,=H'1'\n         BNP   RETURN\n         MVC   XWTO,WTO\nMVMSG    MVC   XWTO+4(*-*),2(R6)\n         EX    R7,MVMSG\n         LA    R7,1(,R7)           GET BACK REAL LENGTH\n*--------------------------------------------------------------------*\n*              SET WTO UP TO BE EXACT LENGTH OF PARM                 *\n*--------------------------------------------------------------------*\n         LA    R1,XWTO+4(R7)       POINT AT END+1 OF REAL DATA\n         MVC   0(4,R1),XWTO+WTOL-4 MOVE IN\n         LA    R7,4(,R7)           INCLUDE HEADER LENGTH\n         STH   R7,XWTO             SAVE IN WTO\n         WTO   ,MF=(E,XWTO)\nRETURN   DS    0H                   RESTORE LINK REG\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=WORKLEN,A=(1),SP=1\n         RETURN (14,12),T,RC=0      RETURN TO CALLER\n         ORG   *-2                 BACK UP OVER BR  R14         16AUG93\n         BSM   R0,R14              RETURN IN CALLERS AMODE      16AUG93\n*--------------------------------------------------------------------*\n*              DATA AREA                                             *\n*--------------------------------------------------------------------*\n*                       1         2         3         4         5\n*              12345678901234567890123456789012345678901234567890123456\nWTO      WTO  '                                                        X\n                                                           ',          X\n               ROUTCDE=11,MF=L\nWTOL     EQU   *-WTO\n*--------------------------------------------------------------------*\n*              WORK AREA MAPPING                                     *\n*--------------------------------------------------------------------*\nWORK     DSECT\nSAVEAREA DS    18F\nXWTO     DS    CL(WTOL)\nWORKLEN  EQU   *-WORK\n*--------------------------------------------------------------------*\n*              EQUATES                                               *\n*--------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   DSWTOMSG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPASC$": {"ttr": 3854, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x004\\x01\\x126O\\x01\\x17\\x08\\x1f\\x17\\x10\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T17:10:34", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPASCB)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPASCB\n SETSSI  CB495566\n ENTRY   DUMPASCB\n NAME    DUMPASCB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPASCB": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\x11\\x08/\\x01\\x17\\x08\\x1f\\x17\\x10\\x00r\\x00q\\x00\\x01\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2017-03-22T17:10:06", "lines": 114, "newlines": 113, "modlines": 1, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*--------------------------------------------------------------------*\n*              $$SUB MACRO         NEEDED BY PRTDUMP                 *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPASCB TITLE 'DUMPASCB - '\nDUMPASCB AMODE 31\nDUMPASCB RMODE 24\nDUMPASCB CSECT\n         SAVE  (14,12),T,'DUMPASCB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPASCB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET ASCB ADDRESS                                      *\n*--------------------------------------------------------------------*\nASCBLEN  EQU   ASCBEND-ASCB\n         L     R2,PSAANEW-PSA(0)   GET ASCB ADDRESS\n         LR    R4,R2               GET ASCB\n         LA    R0,ASCBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,ASCBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET ASCBX ADDRESS                                     *\n*--------------------------------------------------------------------*\nASXBLEN  EQU   ASXBEND-ASXB\n         L     R4,ASCBASXB-ASCB(,R4) ASXB ADDR\n         LA    R0,ASXBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         MVI   MSG1+18,C'X'        MAKE IT ASXB\n         MVI   MSG2+18,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,ASXBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nMSG1     WTO   '*** DUMP OF ASCB - LENGTH=XXXX/XXX ***',MF=L,          X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF ASCB ***',MF=L,ROUTCDE=11\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         LTORG ,\n         MVSAREAS ASCB=YES,                                            X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPASCO": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x11\\x08/\\x01\\x11\\x08/\\x11\\x10\\x00q\\x00q\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2011-03-23T11:10:56", "lines": 113, "newlines": 113, "modlines": 0, "user": "TPUT"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*--------------------------------------------------------------------*\n*              $$SUB MACRO         NEEDED BY PRTDUMP                 *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPASCB TITLE 'DUMPASCB - '\nDUMPASCB AMODE 31\nDUMPASCB RMODE 24\nDUMPASCB CSECT\n         SAVE  (14,12),T,'DUMPASCB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPASCB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET ASCB ADDRESS                                      *\n*--------------------------------------------------------------------*\nASCBLEN  EQU   ASCBEND-ASCB\n         L     R2,PSAANEW-PSA(0)   GET ASCB ADDRESS\n         LR    R4,R2               GET ASCB\n         LA    R0,ASCBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,ASCBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET ASCBX ADDRESS                                     *\n*--------------------------------------------------------------------*\nASXBLEN  EQU   ASXBEND-ASXB\n         L     R4,ASCBASXB-ASCB(,R4) ASXB ADDR\n         LA    R0,ASXBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         MVI   MSG1+18,C'X'        MAKE IT ASXB\n         MVI   MSG2+18,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,ASXBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nMSG1     WTO   '*** DUMP OF ASCB - LENGTH=XXXX/XXX ***',MF=L,          X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF ASCB ***',MF=L,ROUTCDE=11\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         LTORG ,\n         MVSAREAS ASCB=YES,                                            X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPCSC$": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\"\\x01\\x126O\\x01\\x17\\x08\\x1f\\x19X\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T19:58:22", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPCSCB)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPCSCB\n SETSSI  CB495566\n ENTRY   DUMPCSCB\n NAME    DUMPCSCB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPCSCB": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x11\\x08O\\x01\\x17\\x08\\x1f\\x19W\\x00{\\x00z\\x00\\x01\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2017-03-22T19:57:26", "lines": 123, "newlines": 122, "modlines": 1, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*--------------------------------------------------------------------*\n*              $$SUB MACRO         NEEDED BY PRTDUMP                 *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPCSCB TITLE 'DUMPCSCB - '\nDUMPCSCB AMODE 31\nDUMPCSCB RMODE 24\nDUMPCSCB CSECT\n         SAVE  (14,12),T,'DUMPCSCB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPCSCB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET CSCB ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R2,PSAAOLD-PSA(0)   GET ASCB ADDRESS\n         L     R2,ASCBCSCB-ASCB(,R2) GET CSCB ADDRESS\nCSCBLOOP DS    0H\n         LR    R4,R2               GET CSCB\n         CLC   =CL8'INIT',CHKEY-CSCB(R4)\n         BNE   CSCBOUT\n*        ICM   R2,15,CHPTR-CSCB(R4)\n*        BNZ   CSCBLOOP\nCSCBOUT  DS    0H\n         LA    R0,CSCBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,CSCBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET CSCX ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R4,CHCSCXP-CSCB(,R4) GET CSCX ADDRESS\n         LA    R0,CSCXLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         MVI   MSG1+19,C'X'        MAKE IT CSCX\n         MVI   MSG2+19,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,CSCXLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nMSG1     WTO   '*** DUMP OF CSCB - LENGTH=XXXX/XXX ***',MF=L,          X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF CSCB ***',MF=L,ROUTCDE=11\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               CSCB=YES,                                               X\n               PSA=YES,                                                X\n               LISTGEN=YES\nCSCB     DSECT\nCSCBLEN  EQU   *-CSCB\nCSCX     DSECT\nCSCXLEN  EQU   *-CSCX\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPCSCO": {"ttr": 4108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t@\\x00z\\x00z\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:40:00", "lines": 122, "newlines": 122, "modlines": 0, "user": "TPUT"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*--------------------------------------------------------------------*\n*              $$SUB MACRO         NEEDED BY PRTDUMP                 *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPCSCB TITLE 'DUMPCSCB - '\nDUMPCSCB AMODE 31\nDUMPCSCB RMODE 24\nDUMPCSCB CSECT\n         SAVE  (14,12),T,'DUMPCSCB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPCSCB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET CSCB ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R2,PSAAOLD-PSA(0)   GET ASCB ADDRESS\n         L     R2,ASCBCSCB-ASCB(,R2) GET CSCB ADDRESS\nCSCBLOOP DS    0H\n         LR    R4,R2               GET CSCB\n         CLC   =CL8'INIT',CHKEY-CSCB(R4)\n         BNE   CSCBOUT\n*        ICM   R2,15,CHPTR-CSCB(R4)\n*        BNZ   CSCBLOOP\nCSCBOUT  DS    0H\n         LA    R0,CSCBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,CSCBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET CSCX ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R4,CHCSCXP-CSCB(,R4) GET CSCX ADDRESS\n         LA    R0,CSCXLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2\n         MVI   MSG1+19,C'X'        MAKE IT CSCX\n         MVI   MSG2+19,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,CSCXLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nMSG1     WTO   '*** DUMP OF CSCB - LENGTH=XXXX/XXX ***',MF=L,          X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF CSCB ***',MF=L,ROUTCDE=11\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               CSCB=YES,                                               X\n               PSA=YES,                                                X\n               LISTGEN=YES\nCSCB     DSECT\nCSCBLEN  EQU   *-CSCB\nCSCX     DSECT\nCSCXLEN  EQU   *-CSCX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPJCT": {"ttr": 4111, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00)\\x01\\x11\\x08O\\x01\\x17\\x08\\x1f\\x15\\x15\\x00\\xa2\\x00\\xa0\\x00\\x04\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2017-03-22T15:15:29", "lines": 162, "newlines": 160, "modlines": 4, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPJCT  TITLE 'DUMPJCT - '\nDUMPJCT  CSECT\n         SAVE  (14,12),T,'DUMPJCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPJCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET JCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCBOLD ADDR\n         L     R3,TCBJSCB-TCB(,R2) GET JSCB ADDRESS\n         L     R3,JSCBACT-JSCB(,R3) GET JCT     ADDRESS\n         L     R1,JSCBJCT-JSCB(,R3) GET JCT     ADDRESS\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SL    R4,=F'16'           BACK UP TO PREFIX\n         SPACE 1\n         LA    R1,MSG0\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R4               PRINT JCT PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R4,16(,R4)          POINT PASSED PREFIX\n         LA    R0,JCTLNGTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,JCTLNGTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET JCTX ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R1,JCTJCTX-JCT(,R4) GET JCTX\n         SRL   R1,8                SHIFT DOWN\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SL    R4,=F'16'\n         SPACE 1\n         LA    R1,MSG0\n         MVI   MSG0+19,C'X'\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R4               PRINT JCTX PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R4,16(,R4)          POINT PASSED PREFIX\n         LA    R0,JCTXLNTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         MVI   MSG1+19,C'X'\n         MVI   MSG2+19,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,JCTXLNTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\nRETURN   DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              ERROR EXITS                                           *\n*--------------------------------------------------------------------*\nSWAERROR WTO   '*** SWAREQ ERROR ***',                                 X\n               ROUTCDE=11\n         B     RETURN\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG0     WTO   '*** DUMP OF JCT  PREFIX',MF=L,                         X\n               ROUTCDE=11\nMSG1     WTO   '*** DUMP OF JCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF JCT  ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS JSCB=YES,                                            X\n               TCB=YES,                                                X\n               JCT=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n         COPY  SWAREQA\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPJCT$": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x13\\x01\\x126O\\x01\\x17\\x08\\x1f\\x15\\t\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T15:09:13", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPJCT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPJCT\n SETSSI  CB495566\n ENTRY   DUMPJCT\n NAME    DUMPJCT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPJCTO": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t@\\x00\\xa0\\x00\\xa0\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:40:00", "lines": 160, "newlines": 160, "modlines": 0, "user": "TPUT"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPJCT  TITLE 'DUMPJCT - '\nDUMPJCT  CSECT\n         SAVE  (14,12),T,'DUMPJCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPJCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET JCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCBOLD ADDR\n         L     R3,TCBJSCB-TCB(,R2) GET JSCB ADDRESS\n         L     R3,JSCBACT-JSCB(,R3) GET JCT     ADDRESS\n         L     R1,JSCBJCT-JSCB(,R3) GET JCT     ADDRESS\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SL    R4,=F'16'           BACK UP TO PREFIX\n         SPACE 1\n         LA    R1,MSG0\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R4               PRINT JCT PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R4,16(,R4)          POINT PASSED PREFIX\n         LA    R0,JCTLNGTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,JCTLNGTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET JCTX ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R1,JCTJCTX-JCT(,R4) GET JCTX\n         SRL   R1,8                SHIFT DOWN\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SL    R4,=F'16'\n         SPACE 1\n         LA    R1,MSG0\n         MVI   MSG0+19,C'X'\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R4               PRINT JCTX PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R4,16(,R4)          POINT PASSED PREFIX\n         LA    R0,JCTXLNTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         MVI   MSG1+19,C'X'\n         MVI   MSG2+19,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,JCTXLNTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\nRETURN   DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              ERROR EXITS                                           *\n*--------------------------------------------------------------------*\nSWAERROR WTO   '*** SWAREQ ERROR ***',                                 X\n               ROUTCDE=11\n         B     RETURN\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG0     WTO   '*** DUMP OF JCT  PREFIX',MF=L,                         X\n               ROUTCDE=11\nMSG1     WTO   '*** DUMP OF JCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF JCT  ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS JSCB=YES,                                            X\n               TCB=YES,                                                X\n               JCT=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPLCT": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\x02)\\x7f\\x01\\x17\\x08\\x1f \\x02\\x00h\\x00g\\x00\\x01\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-10-24T00:00:00", "modifydate": "2017-03-22T20:02:42", "lines": 104, "newlines": 103, "modlines": 1, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPLCT  TITLE 'DUMPLCT - '\nDUMPLCT CSECT\n         SAVE  (14,12),T,'DUMPLCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPLCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET LCT ADDRESS                                       *\n*--------------------------------------------------------------------*\nNOINIT   DS    0H\n         L     R2,PSATOLD-PSA(0)\n         L     R2,TCBTCT-TCB(,R2)\n         ICM   R4,15,TCTLCTAD-SMFTCT(R2)\n         BZ    RETURN\n         LA    R0,LENLCT           PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\nCKMVS    DS    0H\n         LA    R0,LENLCT           PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\nRETURN   DS    0H\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF LCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF LCT ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               LCT=YES,                                                X\n               TCB=YES,                                                X\n               TCT=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\nLENLCT   EQU   IEFEND-LCT\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPLCT$": {"ttr": 4365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x05\\x01\\x126O\\x01\\x17\\x08\\x1f \\x01\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T20:01:05", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPLCT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPLCT\n SETSSI  CB495566\n ENTRY   DUMPLCT\n NAME    DUMPLCT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPLCTO": {"ttr": 4367, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x06\\x01\\x02)\\x7f\\x01\\x02)\\x7f\\x15V\\x00g\\x00g\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-24T00:00:00", "modifydate": "2002-10-24T15:56:06", "lines": 103, "newlines": 103, "modlines": 0, "user": "TPUT"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPLCT  TITLE 'DUMPLCT - '\nDUMPLCT CSECT\n         SAVE  (14,12),T,'DUMPLCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPLCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET LCT ADDRESS                                       *\n*--------------------------------------------------------------------*\nNOINIT   DS    0H\n         L     R2,PSATOLD-PSA(0)\n         L     R2,TCBTCT-TCB(,R2)\n         ICM   R4,15,TCTLCTAD-SMFTCT(R2)\n         BZ    RETURN\n         LA    R0,LENLCT           PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\nCKMVS    DS    0H\n         LA    R0,LENLCT           PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\nRETURN   DS    0H\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF LCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF LCT ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               LCT=YES,                                                X\n               TCB=YES,                                                X\n               TCT=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\nLENLCT   EQU   IEFEND-LCT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPLIB": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01\\x17\\x08\\x1f\\x01\\x17\\x08\\x1f#U\\x01;\\x01;\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-03-22T00:00:00", "modifydate": "2017-03-22T23:55:32", "lines": 315, "newlines": 315, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "DUMPLWA": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x13\\x01\\x11\\x08O\\x01\\x17\\x08\\x1f\\x14S\\x00d\\x00a\\x00\\x19\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2017-03-22T14:53:13", "lines": 100, "newlines": 97, "modlines": 25, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPLWA  TITLE 'DUMPLWA - '\nDUMPLWA  CSECT\nDUMPLWA  AMODE 31\nDUMPLWA  RMODE 24\n         SAVE  (14,12),T,'DUMPLWA_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPLWA,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET LWA ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSAAOLD-PSA(0)   GET ASCB ADDRESS\n         L     R3,ASCBASXB-ASCB(,R2) GET ASXB ADDRESS\n         L     R4,ASXBLWA-ASXB(,R3) GET ASXBLWA ADDRESS\n         LA    R0,LENLWA           PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\nCKMVS    DS    0H\n         LA    R0,LENLWA           PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF LWA - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF LWA ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               LWA=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPLWA$": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x10\\x01\\x126O\\x01\\x17\\x08\\x1f\\x142\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T14:32:10", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPLWA)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPLWA\n SETSSI  CB495566\n ENTRY   DUMPLWA\n NAME    DUMPLWA(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPLWAO": {"ttr": 4620, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t@\\x00a\\x00a\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xc1\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:40:00", "lines": 97, "newlines": 97, "modlines": 0, "user": "KBASA24"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPLWA  TITLE 'DUMPLWA - '\nDUMPLWA CSECT\n         SAVE  (14,12),T,'DUMPLWA_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPLWA,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET LWA ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSAAOLD-PSA(0)   GET ASCB ADDRESS\n         L     R3,ASCBASXB-ASCB(,R2) GET ASXB ADDRESS\n         L     R4,ASXBLWA-ASXB(,R3) GET ASXBLWA ADDRESS\n         LA    R0,LENLWA           PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\nCKMVS    DS    0H\n         LA    R0,LENLWA           PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF LWA - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF LWA ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               LWA=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPLWA1": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01\\x11\\x08O\\x01\\x135?\\x15D\\x00c\\x00a\\x00\\x17\\xe3\\xd7\\xe4\\xe3\\xc1\\xf3\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2013-12-19T15:44:20", "lines": 99, "newlines": 97, "modlines": 23, "user": "TPUTA31"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPLWA  TITLE 'DUMPLWA - '\nDUMPLWA  CSECT\nDUMPLWA  AMODE 31\nDUMPLWA  RMODE 24\n         SAVE  (14,12),T,'DUMPLWA_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPLWA,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET LWA ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSAAOLD-PSA(0)   GET ASCB ADDRESS\n         L     R3,ASCBASXB-ASCB(,R2) GET ASXB ADDRESS\n         L     R4,ASXBLWA-ASXB(,R3) GET ASXBLWA ADDRESS\n         LA    R0,LENLWA           PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\nCKMVS    DS    0H\n         LA    R0,LENLWA           PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF LWA - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF LWA ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               LWA=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPPCC$": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x08\\x01\\x126O\\x01\\x17\\x08\\x1f \\x11\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T20:11:08", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPPCCB)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPPCCB\n SETSSI  CB495566\n ENTRY   DUMPPCCB\n NAME    DUMPPCCB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPPCCB": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01\\x05\\x1f\\x01\\x17\\x08\\x1f \\x10\\x00m\\x00l\\x00\\x01\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-02-20T00:00:00", "modifydate": "2017-03-22T20:10:00", "lines": 109, "newlines": 108, "modlines": 1, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPPCCB TITLE 'DUMPPCCB - '\nDUMPPCCB AMODE 31\nDUMPPCCB RMODE 24\nDUMPPCCB CSECT\n         SAVE  (14,12),T,'DUMPPCCB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPPCCB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET PCCB ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCB ADDRESS\n         L     R3,TCBJSCB-TCB(,R2) GET JSCB ADDRESS\n         L     R4,JSCBPCC-JSCB(,R3) GET PCCB ADDRESS\n         USING PCCB,R4\n         LA    R0,PCCBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2   DECIMAL LENGTH\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240  HEX LENGTH\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\nLOOP     DS    0H\n         LA    R0,PCCBLEN          PICK UP ENTRY LENGTH\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         ICM   R4,15,PCCNEXTP      GET NEXT ONE IF THERE\n         BNZ   LOOP\nENDPCCB  DS    0H\n         LA    R0,PCCBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF PCCB - LENGTH=XXXX/XXX ***',MF=L,          X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF PCCB ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS JSCB=YES,                                            X\n               TCB=YES,                                                X\n               PCCB=YES,                                               X\n               PSA=YES,                                                X\n               LISTGEN=YES\nPCCB     EQU   IEFPCCB\nIEFPCCB  DSECT\nPCCBLEN  EQU   *-PCCB\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPPCCO": {"ttr": 4873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x006\\x01\\x01\\x05\\x1f\\x01\\x01\\x05\\x1f\\x147\\x00l\\x00l\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-20T00:00:00", "modifydate": "2001-02-20T14:37:36", "lines": 108, "newlines": 108, "modlines": 0, "user": "TPUT"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPPCCB TITLE 'DUMPPCCB - '\nDUMPPCCB AMODE 31\nDUMPPCCB RMODE 24\nDUMPPCCB CSECT\n         SAVE  (14,12),T,'DUMPPCCB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPPCCB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET PCCB ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCB ADDRESS\n         L     R3,TCBJSCB-TCB(,R2) GET JSCB ADDRESS\n         L     R4,JSCBPCC-JSCB(,R3) GET PCCB ADDRESS\n         USING PCCB,R4\n         LA    R0,PCCBLEN          PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+30(4),DEC+08+2   DECIMAL LENGTH\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+35(3),DEC+8+1\n         TR    MSG1+35(3),TRANS-240  HEX LENGTH\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\nLOOP     DS    0H\n         LA    R0,PCCBLEN          PICK UP ENTRY LENGTH\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         ICM   R4,15,PCCNEXTP      GET NEXT ONE IF THERE\n         BNZ   LOOP\nENDPCCB  DS    0H\n         LA    R0,PCCBLEN          PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF PCCB - LENGTH=XXXX/XXX ***',MF=L,          X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF PCCB ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS JSCB=YES,                                            X\n               TCB=YES,                                                X\n               PCCB=YES,                                               X\n               PSA=YES,                                                X\n               LISTGEN=YES\nPCCB     EQU   IEFPCCB\nIEFPCCB  DSECT\nPCCBLEN  EQU   *-PCCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPPPT": {"ttr": 4876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x009\\x00\\x97\\x13/\\x01\\x17\\x08\\x1f %\\x00~\\x00~\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1997-05-12T00:00:00", "modifydate": "2017-03-22T20:25:39", "lines": 126, "newlines": 126, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE 'DUMPPPT - Show all entries in Current PPT'\nDUMPPPT  CSECT                     Module entry point\nDUMPPPT  AMODE 31\nDUMPPPT  RMODE ANY\n*\n* Body of non-reentrant module which prints program names in the PPT\n*\n         STM   14,12,12(13)            Standard module linkage\n         LR    12,15\n         USING DUMPPPT,12\n         ST    13,SAVEAREA+4\n         LR    2,13\n         LA    13,SAVEAREA\n         ST    13,8(,2)\n*\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >                             We're authorized. Go Key 0.\n         MODESET MODE=SUP,KEY=ZERO     Need supervisor state, key 0/1\n*\n* Set up for looking at PPT entries\n*\n         LA    2,PPTENT                Point to copy of PPT entry\n         USING PPTENTRY,2              Set up addressability\n         XC    SCNTOKEN,SCNTOKEN       Clear token\nNEWLINE  DS    0H\n         LA    3,TEXT1\n         MVC   TEXT1,=CL80' '\n*\nLOOP     DS    0H                      Loop getting PPT entries\n         IEFPPSCN REQUEST=NEXT,TOKEN=SCNTOKEN,PPTINFO=PPTE\n         LTR   15,15                   Check whether entry was returned\n         BNZ   ENDLOOP\n         MVC   0(8,3),PPTNAME          Copy program name to message\n*--------------------------------------------------------------------*\n*              GET ATTRIBUTES                                        *\n*--------------------------------------------------------------------*\n         LA    R3,9(,R3)           POINT TO FIRST ATTR SPOT\n         LA    R10,PPTATTRI\nLOOPATTR DS    0H\n         CLI   0(R10),X'FF'        ATTR DONE?\n         BE    ATTRDONE\n         IC    R15,0(R10)          GET TEST BIT\n         EX    R15,ATTRTM          TM    PPTBYTE1,*-*\n         BZ    ATTR0800\nATTR0100 DS    0H\n         MVC   00(08,R3),1(R10)    MOVE IN ATTR TEXT\n         TM    0(R10),PPTSKEY      IS THIS KEY\n         BZ    ATTR0200\n         IC    R15,PPTKEY          GET PPTKEY\n         SRL   R15,4                SHIFT DOWN TO LOW DIGIT\n         STC   R15,04(,R3)         PUT IN MESSAGE\n         OI    04(R3),X'F0'        MAKE DISPLAYABLE\n         TR    04(1,R3),TRANS-240\nATTR0200 DS    0H\nATTR0800 DS    0H\n         LA    R3,09(,R3)\n         LA    R10,PPTATTLN(,R10)  NEXT PPT ATTRIB\n         B     LOOPATTR\nATTRTM   TM    PPTBYTE1,0          EXECUTED TEST PPT FLAG BYTE\nATTRDONE DS    0H\n         WTO   TEXT=ENTRYTXT,ROUTCDE=11\n         B     NEWLINE                 Get next entry, if any\n*\nENDLOOP  DS    0H                      Finished with PPT\n         WTO   TEXT=ENTRYTXT\n         IEFPPSCN REQUEST=END,TOKEN=SCNTOKEN\n         MODESET MODE=PROB,KEY=NZERO   Return to problem state\n*        LA    1,=C'NONE'\n*        SVC   242\n*\n*  Return to the calling program with the return code last passed by\n*  IEFPPSCN.\n*\nGOBACKX  DS    0H\n         L     13,SAVEAREA+4           Return linkage\n         L     14,12(,13)\n         LM    0,12,20(13)\n         BR    14\nNOTAUTH  DS    0H\n         WTO   TEXT=ERRORTXT,ROUTCDE=11\n         B     GOBACKX\nPPTATTRI DS    0CL09               FIRST BYTE OF PROPERTIES\n         DC    X'80',CL08'NOCANCEL'\nPPTATTLN EQU   *-PPTATTRI\n         DC    X'40',CL08'KEY(X)' KEY IN PPTKEY\n         DC    X'20',CL08'NONSWAP'\n         DC    X'10',CL08'PRIV'\n         DC    X'08',CL08'SYST'\n         DC    X'04',CL08'NODSI'\n         DC    X'02',CL08'PASS'\n         DC    32X'FF'\nTRANS    DC    C'0123456789ABCDEF'\n*\n****          LOCAL STORAGE DEFINITIONS         ****\nSCNTOKEN DC    A(0)                    PPT SCAN TOKEN\nPPTE     DC    AL2(L'PPTENTRY)         LENGTH OF A PPT ENTRY\nPPTENT   DS    CL(L'PPTENTRY)          PPT ENTRY RETURN AREA\nSAVEAREA DC    18F'0'\nSAVE14T1 DS    5F\nTEXTM    DC    CL80' '\n*\n*  THE FOLLOWING AREAS ARE USED TO PRINT THE PROGRAM NAME WITHIN THE\n*  PPT.  ADDITIONAL FORMATTING IS REQUIRED TO MAKE ALL THE\n*  INFORMATION READABLE.\n*\nENTLEN   EQU   9\nENTRYTXT DS    0F                      AREA FOR PRINTING\nTEXTL    DC    Y(L'TEXT1)              MESSAGE LENGTH\nTEXT1    DC    CL80' '\nERRORTXT DS    0F                      AREA FOR PRINTING\nTERRL    DC    Y(L'TERR1)              MESSAGE LENGTH\nTERR1    DC    CL40'DUMPPPT Program must be Authorized'\n*\n*  THE FOLLOWING MAPPING MACROS ARE REQUIRED FOR THE IEFPPSCN MACRO.\n*\n         CVT DSECT=YES\n         IEFJESCT\n         IEFZB610\n         YREGS ,\n         END   DUMPPPT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DUMPPPT$": {"ttr": 4879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00B\\x01\\x00\\x04\\x8f\\x01\\x17\\x08\\x1f )\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2017-03-22T20:29:42", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPPPT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB495566\n SETCODE AC(1)\n NAME    DUMPPPT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPPRB": {"ttr": 4881, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\t\\x01\\x11\\x08/\\x01\\x17\\x08\\x1f!(\\x00\\x1c\\x00\\x1a\\x00\\x00\\xe3\\xe2\\xd6\\xc3\\xd4\\xc4@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2017-03-22T21:28:09", "lines": 28, "newlines": 26, "modlines": 0, "user": "TSOCMD"}, "text": "*   TSO COMMAND VERSION\nDUMPPRB  AMODE 31\nDUMPPRB  RMODE 24\nDUMPPRB  CSECT\n         SAVE  (14,12),T,DUMPPRB_&SYSDATC._&SYSTIME.\n         LR    R12,R15\n         USING DUMPPRB,R12\n         LA    R1,SAVE\n         ST    R1,8(,R13)\n         ST    R13,4(,R1)\n         LR    R13,R1\n         L     R1,X'21C'           PSATOLD - GET TCB\n         ICM   R2,15,0(R1)         TCBRB   - GET PRB\n         BZ    EXIT\n         ICM   R3,15,X'C'(R2)      GET CDE ADDRESS\n         BZ    EXIT\nLOOP     DS    0H\n         MVC   MSG1(8),8(R3)       MOVE IN PROGRAM NAME\n         TPUT  MSG1,L'MSG1\n         ICM   R3,15,0(R3)         GET NEXT CDE\n         BNZ   LOOP\nEXIT     DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nSAVE     DS    9D\nMSG1     DC    C'........ PROGRAM'\n         YREGS  ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPPRB$": {"ttr": 4883, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00V\\x01\\x126O\\x01\\x17\\x08\\x1f!\\x10\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T21:10:56", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPPRB)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPPRB\n SETSSI  CB495566\n ENTRY   DUMPPRB\n NAME    DUMPPRB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPPRBO": {"ttr": 5122, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00D\\x01\\x11\\x08/\\x01\\x17\\x08\\x1f!\\x19\\x00\\x1b\\x00\\x1a\\x00\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2017-03-22T21:19:44", "lines": 27, "newlines": 26, "modlines": 1, "user": "SBGOLOB"}, "text": "*   WTO VERSION FROM SAM BASS\nDUMPPRB  AMODE 31\nDUMPPRB  RMODE 24\nDUMPPRB  CSECT\n         SAVE  (14,12),T,DUMPPRB_&SYSDATC._&SYSTIME.\n         LR    R12,R15\n         USING DUMPPRB,R12\n         LA    R1,SAVE\n         ST    R1,8(,R13)\n         ST    R13,4(,R1)\n         LR    R13,R1\n         L     R1,X'21C'           PSATOLD - GET TCB\n         ICM   R2,15,0(R1)         TCBRB   - GET PRB\n         BZ    EXIT\n         ICM   R3,15,X'C'(R2)      GET CDE ADDRESS\n         BZ    EXIT\nLOOP     DS    0H\n         MVC   MSG1+8(8),8(R3)     MOVE IN PROGRAM NAME\nMSG1     WTO   '........ PROGRAM',ROUTCDE=11\n         ICM   R3,15,0(R3)         GET NEXT CDE\n         BNZ   LOOP\nEXIT     DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nSAVE     DS    9D\n         YREGS  ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPSCT": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Y\\x01\\x11\\x08O\\x01\\x17\\x08\\x1f!0\\x00\\xbe\\x00\\xbc\\x00\\x04\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2017-03-22T21:30:59", "lines": 190, "newlines": 188, "modlines": 4, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPSCT  TITLE 'DUMPSCT - '\nDUMPSCT  CSECT\n         SAVE  (14,12),T,'DUMPSCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPSCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET JCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCBOLD ADDR\n         L     R3,TCBJSCB-TCB(,R2) GET JSCB ADDRESS\n         L     R3,JSCBACT-JSCB(,R3) GET JSCBACT ADDRESS\n         L     R1,JSCBJCT-JSCB(,R3) GET JCT     ADDRESS\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SPACE 1\n*--------------------------------------------------------------------*\n*              GET SCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n*        LA    R4,16(,R4)          BUMP PASS PREFIX\n         L     R1,JCTSDKAD-JCT(,R4) GET SCT SVA ADDRESS\n         SRL   R1,8                PUT IN LOW BYTES\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SPACE 1\nSCTLOOP  DS    0H\n         SL    R4,=F'16'           BACK UP TO PREFIX\n         MVI   MSG1+19,C' '\n         MVI   MSG2+19,C' '\n         LA    R1,MSG0\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R4               PRINT SCT PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R4,16(,R4)          POINT PASSED PREFIX\n         LA    R0,SCTLNGTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,SCTLNGTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET SCTX ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R1,SCTXBTTR-SCT(,R4) GET SCTX\n         SRL   R1,8                SHIFT DOWN\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R5,R1               *--------------------------- *\n         SL    R5,=F'16'           BACK UP TO PREFIX\n         SPACE 1\n         LA    R1,MSG0\n         MVI   MSG0+19,C'X'\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R5               PRINT JCTX PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R5,16(,R5)          POINT PASSED PREFIX\n         LA    R0,SCTXLNTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         MVI   MSG1+19,C'X'\n         MVI   MSG2+19,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         SPACE 1\n         LR    R1,R5\n         BAL   R14,PRTDUMP\n         LA    R0,SCTXLNTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         SPACE 3\n         L     R1,SCTANSCT-SCT(,R4) NEXT SCT ENTRY\n         SRL   R1,8                SHIFT DOWN\n         LTR   R1,R1\n         BZ    DUMPRC00\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LTR   R4,R1               *--------------------------- *\n         B     SCTLOOP\n*\nDUMPRC00 DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              ERRORS                                                *\n*--------------------------------------------------------------------*\nSWAERROR DS    0H\n         WTO   '*** SWAREQ ERROR ***',MF=L,ROUTCDE=11\n         B     DUMPRC00\n*--------------------------------------------------------------------*\n*              WTOS                                                  *\n*--------------------------------------------------------------------*\nMSG0     WTO   '*** DUMP OF SCT  PREFIX',MF=L,                         X\n               ROUTCDE=11\nMSG1     WTO   '*** DUMP OF SCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF SCT  ***',MF=L,ROUTCDE=11\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS JSCB=YES,                                            X\n               TCB=YES,                                                X\n               JCT=YES,                                                X\n               SCT=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n         COPY  SWAREQA\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPSCT$": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00V\\x01\\x126O\\x01\\x17\\x08\\x1f!)\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T21:29:56", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPSCT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPSCT\n SETSSI  CB495566\n ENTRY   DUMPSCT\n NAME    DUMPSCT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPSCTO": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\tA\\x00\\xbc\\x00\\xbc\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:41:00", "lines": 188, "newlines": 188, "modlines": 0, "user": "TPUT"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPSCT  TITLE 'DUMPSCT - '\nDUMPSCT  CSECT\n         SAVE  (14,12),T,'DUMPSCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPSCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET JCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCBOLD ADDR\n         L     R3,TCBJSCB-TCB(,R2) GET JSCB ADDRESS\n         L     R3,JSCBACT-JSCB(,R3) GET JSCBACT ADDRESS\n         L     R1,JSCBJCT-JSCB(,R3) GET JCT     ADDRESS\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SPACE 1\n*--------------------------------------------------------------------*\n*              GET SCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n*        LA    R4,16(,R4)          BUMP PASS PREFIX\n         L     R1,JCTSDKAD-JCT(,R4) GET SCT SVA ADDRESS\n         SRL   R1,8                PUT IN LOW BYTES\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n         SPACE 1\nSCTLOOP  DS    0H\n         SL    R4,=F'16'           BACK UP TO PREFIX\n         MVI   MSG1+19,C' '\n         MVI   MSG2+19,C' '\n         LA    R1,MSG0\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R4               PRINT SCT PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R4,16(,R4)          POINT PASSED PREFIX\n         LA    R0,SCTLNGTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R0,SCTLNGTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              GET SCTX ADDRESS                                      *\n*--------------------------------------------------------------------*\n         L     R1,SCTXBTTR-SCT(,R4) GET SCTX\n         SRL   R1,8                SHIFT DOWN\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R5,R1               *--------------------------- *\n         SL    R5,=F'16'           BACK UP TO PREFIX\n         SPACE 1\n         LA    R1,MSG0\n         MVI   MSG0+19,C'X'\n         BAL   R14,PRTDMSG\n         LA    R0,16\n         LR    R1,R5               PRINT JCTX PREFIX\n         BAL   R14,PRTDUMP\n         SPACE 1\n         LA    R5,16(,R5)          POINT PASSED PREFIX\n         LA    R0,SCTXLNTH         PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1+29(4),DEC+08+2\n         MVI   MSG1+19,C'X'\n         MVI   MSG2+19,C'X'\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1+34(3),DEC+8+1\n         TR    MSG1+34(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         SPACE 1\n         LR    R1,R5\n         BAL   R14,PRTDUMP\n         LA    R0,SCTXLNTH         PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         SPACE 3\n         L     R1,SCTANSCT-SCT(,R4) NEXT SCT ENTRY\n         SRL   R1,8                SHIFT DOWN\n         LTR   R1,R1\n         BZ    DUMPRC00\n         SPACE 1\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LTR   R4,R1               *--------------------------- *\n         B     SCTLOOP\n*\nDUMPRC00 DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              ERRORS                                                *\n*--------------------------------------------------------------------*\nSWAERROR DS    0H\n         WTO   '*** SWAREQ ERROR ***',MF=L,ROUTCDE=11\n         B     DUMPRC00\n*--------------------------------------------------------------------*\n*              WTOS                                                  *\n*--------------------------------------------------------------------*\nMSG0     WTO   '*** DUMP OF SCT  PREFIX',MF=L,                         X\n               ROUTCDE=11\nMSG1     WTO   '*** DUMP OF SCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG2     WTO   '*** END  OF SCT  ***',MF=L,ROUTCDE=11\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS JSCB=YES,                                            X\n               TCB=YES,                                                X\n               JCT=YES,                                                X\n               SCT=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTCT": {"ttr": 5134, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Q\\x01\\x11\\x08O\\x01\\x17\\x08\\x1f!4\\x00d\\x00c\\x00\\x01\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2017-03-22T21:34:51", "lines": 100, "newlines": 99, "modlines": 1, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*--------------------------------------------------------------------*\n*              $$SUB MACRO         NEEDED BY PRTDUMP                 *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPTCT  TITLE 'DUMPTCT - '\nDUMPTCT  AMODE 31\nDUMPTCT  RMODE 24\nDUMPTCT  CSECT\n         SAVE  (14,12),T,'DUMPTCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPTCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET TCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCB ADDRESS\n         L     R2,TCBTCT-TCB(R2)   GET TCT ADDRESS\n         LR    R4,R2               GET TCB\n         LA    R0,TCTBIG           PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1DEC(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1HEX(3),DEC+8+1\n         TR    MSG1HEX(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\nCKMVS    DS    0H\n         LA    R0,TCTBIG           PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF TCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG1DEC  EQU   MSG1+29,4\nMSG1HEX  EQU   MSG1+34,3\nMSG2     WTO   '*** END  OF TCT ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS TCT=YES,                                             X\n               TCB=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTCT$": {"ttr": 5137, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00%\\x01\\x126O\\x01\\x17\\x08\\x1f!5\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T21:35:25", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPTCT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPTCT\n SETSSI  CB495566\n ENTRY   DUMPTCT\n NAME    DUMPTCT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTCTO": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\tA\\x00c\\x00c\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:41:00", "lines": 99, "newlines": 99, "modlines": 0, "user": "KBASS"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n*--------------------------------------------------------------------*\n*              $$SUB MACRO         NEEDED BY PRTDUMP                 *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPTCT  TITLE 'DUMPTCT - '\nDUMPTCT  AMODE 31\nDUMPTCT  RMODE 24\nDUMPTCT  CSECT\n         SAVE  (14,12),T,'DUMPTCT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPTCT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET TCT ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSATOLD-PSA(0)   GET TCB ADDRESS\n         L     R2,TCBTCT-TCB(R2)   GET TCT ADDRESS\n         LR    R4,R2               GET TCB\n         LA    R0,TCTBIG           PICK UP ENTRY LENGTH\n         CVD   R0,DEC\n         MVC   DEC+08(6),=X'402020202120'\n         ED    DEC+08(6),DEC+5\n         MVC   MSG1DEC(4),DEC+08+2\n         ST    R0,DEC\n         UNPK  DEC+8(05),DEC+2(3)\n         MVC   MSG1HEX(3),DEC+8+1\n         TR    MSG1HEX(3),TRANS-240\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LR    R1,R4\n         BAL   R14,PRTDUMP\nCKMVS    DS    0H\n         LA    R0,TCTBIG           PICK UP ENTRY LENGTH\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF TCT - LENGTH=XXXX/XXX ***',MF=L,           X\n               ROUTCDE=11\nMSG1DEC  EQU   MSG1+29,4\nMSG1HEX  EQU   MSG1+34,3\nMSG2     WTO   '*** END  OF TCT ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DS    (4*9)D'0'\nDEC      DS    2D\nTRANS    DC    C'0123456789ABCDEF'\n         SPACE 2\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS TCT=YES,                                             X\n               TCB=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTIO$": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00T\\x01\\x126O\\x01\\x17\\x08\\x1f!9\\x00\\x1c\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T21:39:54", "lines": 28, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5)),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPTIOT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPTIOT\n SETSSI  CB495566\n ENTRY   DUMPTIOT\n NAME    DUMPTIOT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTIOO": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x11\\x01\\x11\\x08/\\x01\\x11\\x08/\\x11\\x12\\x00O\\x00O\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2011-03-23T11:12:11", "lines": 79, "newlines": 79, "modlines": 0, "user": "TPUT"}, "text": "&GEN     SETC  'GEN'\n*--------------------------------------------------------------------*\n*              PROGRAM TO DUMP TIOT                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPTIOT TITLE 'DUMPTIOT - PRODUCE A DUMP OF THE TIOT'\nDUMPTIOT CSECT\n         SAVE  (14,12),T,'DUMPTIOT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPTIOT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n         LR    R2,R3              SAVE ANY PARM POINTER\n         EXTRACT TIOTADRS,FIELDS=(TIOT) GET TIOT ADDRESS\n         L     R4,TIOTADRS         PICK UP TIOT ADDRESS\n         USING TIOT,R4             ADDRESS TIOT\n         MVC   MSG1+21(8),0(R4)\n         MVC   MSG1+30(8),8(R4)\n         MVC   MSG1+39(8),16(R4)\n         TPUT  MSG1,L'MSG1\n         LA    R3,TIOENTRY\n         USING TIOENTRY,R3         ADDRESS TIOT\n         B     LOOPVOL\n         DROP  R4\nLOOPVOL  DS    0H\n         CLI   TIOELNGH,0          END OF TIOT?\n         BE    CKMVS               GO CHECK FOR MVS SYSTEM\n         XR    R0,R0               CLEAR INDEX REG\n         IC    R0,TIOELNGH         PICK UP ENTRY LENGTH\n         LA    R1,TIOELNGH\n         BAL   R14,PRTDUMP\n         XR    R1,R1               CLEAR INDEX REG\n         IC    R1,TIOELNGH         PICK UP ENTRY LENGTH\n         LA    R3,0(R1,R3)         BUMP TO NEXT TIOT ENTRY\n         B     LOOPVOL             CONTINUE SEARCH\nCKMVS    DS    0H\n         TPUT  =CL40'*** END OF TIOT ***',40\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              MESSAGES                                              *\n*--------------------------------------------------------------------*\nMSG1     DC    CL70'*** DUMP OF TIOT FOR XXXXXXXX XXXXXXXX XXXXXXXX ***X\n               '\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DC    (4*9)D'0'\nTIOTADRS DC    A(0)\n         LTORG ,\n         SPACE 2\n*--------------------------------------------------------------------*\n*              COPY IN PRTDUMP                                       *\n*--------------------------------------------------------------------*\n         COPY  PRTDUMP\n         PRINT GEN\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nTIOT     DSECT ,\n         IEFTIOT1\n         YREGS  ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTIOT": {"ttr": 5385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x07\\x01\\x11\\x08/\\x01\\x17\\x08\\x1f!A\\x00P\\x00O\\x00\\x03\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2017-03-22T21:41:07", "lines": 80, "newlines": 79, "modlines": 3, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n*--------------------------------------------------------------------*\n*              PROGRAM TO DUMP TIOT                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPTIOT TITLE 'DUMPTIOT - PRODUCE A DUMP OF THE TIOT'\nDUMPTIOT CSECT\n         SAVE  (14,12),T,'DUMPTIOT_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPTIOT,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n         LR    R2,R3              SAVE ANY PARM POINTER\n         EXTRACT TIOTADRS,FIELDS=(TIOT) GET TIOT ADDRESS\n         L     R4,TIOTADRS         PICK UP TIOT ADDRESS\n         USING TIOT,R4             ADDRESS TIOT\n         MVC   MSG1+21(8),0(R4)\n         MVC   MSG1+30(8),8(R4)\n         MVC   MSG1+39(8),16(R4)\n         APUT  MSG1,L'MSG1\n         LA    R3,TIOENTRY\n         USING TIOENTRY,R3         ADDRESS TIOT\n         B     LOOPVOL\n         DROP  R4\nLOOPVOL  DS    0H\n         CLI   TIOELNGH,0          END OF TIOT?\n         BE    CKMVS               GO CHECK FOR MVS SYSTEM\n         XR    R0,R0               CLEAR INDEX REG\n         IC    R0,TIOELNGH         PICK UP ENTRY LENGTH\n         LA    R1,TIOELNGH\n         BAL   R14,PRTDUMP\n         XR    R1,R1               CLEAR INDEX REG\n         IC    R1,TIOELNGH         PICK UP ENTRY LENGTH\n         LA    R3,0(R1,R3)         BUMP TO NEXT TIOT ENTRY\n         B     LOOPVOL             CONTINUE SEARCH\nCKMVS    DS    0H\n         APUT  =CL40'*** END OF TIOT ***',40\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              MESSAGES                                              *\n*--------------------------------------------------------------------*\nMSG1     DC    CL70'*** DUMP OF TIOT FOR XXXXXXXX XXXXXXXX XXXXXXXX ***X\n               '\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DC    (4*9)D'0'\nTIOTADRS DC    A(0)\n         LTORG ,\n         SPACE 2\n*--------------------------------------------------------------------*\n*              COPY IN PRTDUMP                                       *\n*--------------------------------------------------------------------*\n         COPY  PRTDUMP\n         PRINT GEN\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nTIOT     DSECT ,\n         IEFTIOT1\n         YREGS  ,\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTSB": {"ttr": 5388, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x05\\x01\\x11\\x08/\\x01\\x17\\x08\\x1f\" \\x00\\x88\\x00o\\x00 \\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2017-03-22T22:20:05", "lines": 136, "newlines": 111, "modlines": 32, "user": "PUTLINE"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*     THIS VERSION DOES NOT USE AN SVC TO AUTHORIZE.                  *\n*     THIS PROGRAM MUST BE LISTED IN THE IKJEFTE2 TABLE (AUTHCMD)     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPTSB  TITLE 'DUMPTSB - '\nDUMPTSB  CSECT\n*UMPTSB  AMODE 31\n*UMPTSB  RMODE 24\n         SAVE  (14,12),T,'DUMPTSB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPTSB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET TSB ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSAAOLD-PSA(0)   GET ASCB ADDRESS\n         L     R4,ASCBTSB-ASCB(,R2) GET ASXBTSB ADDRESS\n*--------------------------------------------------------------------*\n*              AUTHORIZATION WITH AN SVC                             *\n*--------------------------------------------------------------------*\n*        LA    R1,=C'AUTH'\n*        SVC   245\n*--------------------------------------------------------------------*\n*         AUTHORIZATION WITHOUT AN SVC - AUTHCMD IN PARMLIB          *\n*--------------------------------------------------------------------*\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >                             We're authorized. Go Key 0.\n         MODESET MODE=SUP,KEY=ZERO\nMODEON   DS    0H\n*--------------------------------------------------------------------*\n*              DUMP TSB                                              *\n*--------------------------------------------------------------------*\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LA    R0,TSBEND-TSB       PICK UP ENTRY LENGTH\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              DUMP TSBX                                             *\n*--------------------------------------------------------------------*\n         LA    R1,MSG3\n         BAL   R14,PRTDMSG\n         L     R4,TSBEXTNT-TSB(,R4)\n         LA    R0,TSBXEND-TSBX     PICK UP ENTRY LENGTH\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R1,MSG4\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              AND EXIT                                              *\n*--------------------------------------------------------------------*\n         MODESET MODE=PROB,KEY=NZERO\n*--------------------------------------------------------------------*\n*        DE-AUTH USING AN SVC                                        *\n*--------------------------------------------------------------------*\nENDPGM   DS    0H\n*        SLR   R1,R1                 WE ARE NOT USING THE SVC\n*        SVC   245\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\nNOTAUTH  DS    0H\n         APUT  MSG5,L'MSG5\n         B     ENDPGM\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF TSB ***',MF=L,ROUTCDE=11\nMSG2     WTO   '*** END  OF TSB ***',MF=L,ROUTCDE=11\nMSG3     WTO   '*** DUMP OF TSBX ***',MF=L,ROUTCDE=11\nMSG4     WTO   '*** END  OF TSBX ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DC    (4*9)D'0'\nSAVE14T1 DS    2D\nMSG5     DC    C'DUMPTSB Program is not Authorized'\n         DS    0F\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               TSB=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n         COPY  EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DUMPTSB$": {"ttr": 5391, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00)\\x01\\x126O\\x01\\x17\\x08\\x1f\"\\x06\\x00\\x1d\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2012-12-29T00:00:00", "modifydate": "2017-03-22T22:06:29", "lines": 29, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD),REGION=0M\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(DUMPTSB)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DUMPTSB\n SETSSI  CB495566\n ENTRY   DUMPTSB\n SETCODE AC(1)\n NAME    DUMPTSB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPTSBO": {"ttr": 5393, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00@\\x01\\x11\\x08/\\x01\\x11\\x08/\\x11\\x14\\x00n\\x00o\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2011-03-23T11:14:40", "lines": 110, "newlines": 111, "modlines": 0, "user": "KBASS"}, "text": "&GEN     SETC  'GEN'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\n         SPACE 3\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n         EJECT\nDUMPTSB  TITLE 'DUMPTSB - '\nDUMPTSB  CSECT\n*UMPTSB  AMODE 31\n*UMPTSB  RMODE 24\n         SAVE  (14,12),T,'DUMPTSB_&SYSDATC._&SYSTIME.'\n         LR    R12,R15            POINT BASE REGISTER TO ENTRY POINT\n         USING DUMPTSB,R12\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n*--------------------------------------------------------------------*\n*              GET TSB ADDRESS                                       *\n*--------------------------------------------------------------------*\n         L     R2,PSAAOLD-PSA(0)   GET ASCB ADDRESS\n         L     R4,ASCBTSB-ASCB(,R2) GET ASXBTSB ADDRESS\n         LA    R1,=C'AUTH'\n         SVC   245\n         MODESET MODE=SUP,KEY=ZERO\nMODEON   DS    0H\n*--------------------------------------------------------------------*\n*              DUMP TSB                                              *\n*--------------------------------------------------------------------*\n         LA    R1,MSG1\n         BAL   R14,PRTDMSG\n         LA    R0,TSBEND-TSB       PICK UP ENTRY LENGTH\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R1,MSG2\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              DUMP TSBX                                             *\n*--------------------------------------------------------------------*\n         LA    R1,MSG3\n         BAL   R14,PRTDMSG\n         L     R4,TSBEXTNT-TSB(,R4)\n         LA    R0,TSBXEND-TSBX     PICK UP ENTRY LENGTH\n         LR    R1,R4\n         BAL   R14,PRTDUMP\n         LA    R1,MSG4\n         BAL   R14,PRTDMSG\n*--------------------------------------------------------------------*\n*              AND EXIT                                              *\n*--------------------------------------------------------------------*\n         MODESET MODE=PROB,KEY=NZERO\n         SLR   R1,R1\n         SVC   245\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              WTO MESSAGES                                          *\n*--------------------------------------------------------------------*\nMSG1     WTO   '*** DUMP OF TSB ***',MF=L,ROUTCDE=11\nMSG2     WTO   '*** END  OF TSB ***',MF=L,ROUTCDE=11\nMSG3     WTO   '*** DUMP OF TSBX ***',MF=L,ROUTCDE=11\nMSG4     WTO   '*** END  OF TSBX ***',MF=L,ROUTCDE=11\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSAVEAREA DC    (4*9)D'0'\n         COPY  PRTDUMP\n         PRINT GEN\n         MVSAREAS ASCB=YES,                                            X\n               TSB=YES,                                                X\n               PSA=YES,                                                X\n               LISTGEN=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNAM": {"ttr": 5634, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x15\\x00\\x97\\x12\\x1f\\x01\\x11\\x08/\\x10U\\x04\\xff\\x04\\x9e\\x04\\xff\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-05-01T00:00:00", "modifydate": "2011-03-23T10:55:15", "lines": 1279, "newlines": 1182, "modlines": 1279, "user": "KBASS"}, "text": "         TITLE 'DYNAMIC ALLOCATION INTERFACE'\n*--------------------------------------------------------------------*\n*CHANGES : AMODE31 CHANGE CODE TO USE AMODE31                        *\n*          AM31A   01/09/98 FIX USING GETMAIN ADDR TOP BYTE          *\n*          AM31B   01/13/98 MAKE ALL COMPARES, ADD, SUBTRACT LOGICAL *\n*                  AND DO SOME 'LA ' TO REMOVE HI BIT FOR COMPARES   *\n*                  AND TO REMOVE AL3 ADDRESS IN VALUINDX             *\n*--------------------------------------------------------------------*\n*\n*   CREATE A VERB TABLE ENTRY\n*\n         MACRO\n         VENT  &VERB,&NUMBER\n         LCLA  &LABEL\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    AL1(&NUMBER)\n#&LABEL  DC    C'&VERB'\n         MEND\n         SPACE 3\n*\n*   CREATE A KEYWORD TABLE ENTRY\n*   &KEYWORD  - THE DYNAM KEYWORD\n*   &UAL      - THE DYNAM KEYWORD UNAMBIGOUS LENGTH\n*   &KEY      - THE SVC99 TEXT UNIT KEY\n*   &PARM     - THE SVC99 TEXT UNIT PARM\n*   &PARMLEN  - THE SVC99 TEXT UNIT PARM LENGTH\n*\n         MACRO\n         KENT  &KEYWORD,&UAL,&KEY,&PARM,&PARMLEN\n         GBLA  &OFFSET\n         LCLA  &LABEL\n         LCLC  &LEN\n&LEN     SETC  '0'\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    X'&UAL'\n         AIF   (T'&PARM EQ 'O').NOPARM\n         AIF   ('&PARM' NE 'SUBTABLE').KENT003\n         DC    AL1(&OFFSET+240)\n&OFFSET  SETA  &OFFSET+1\n&LEN     SETC  '1'\n         AGO   .KENT001\n.KENT003 ANOP\n         DC    X'&PARM'\n&LEN     SETC  '1'\n         AGO   .KENT001\n.NOPARM  ANOP\n         DC    AL1(0)\n.KENT001 ANOP\n         AIF   (T'&PARMLEN EQ 'O').KENT002\n&LEN     SETC  '&PARMLEN'\n.KENT002 ANOP\n         DC    AL1(&LEN)\n         DC    AL2(&KEY)\n#&LABEL  DC    C'&KEYWORD'\n         MEND\n         EJECT\n*\n*   CREATE A KEYWORD HASH TABLE ENTRY\n*\n         MACRO\n         BEGIN &CHAR\nBEGIN&CHAR DS  0X\n         MEND\n         SPACE 3\n*\n*   CREATE THE KEYWORD TABLE HASH INDEX\n*\n         MACRO\n         INDEX\nKYWDINDX DS    0F                 ALIGN ON FULLWORD BOUNDARY\n         DC    A(BEGINA)\n         DC    A(BEGINB)\n         DC    A(BEGINC)\n         DC    A(BEGIND)\n         DC    A(BEGINE)\n         DC    A(BEGINF)\n         DC    A(BEGING)\n         DC    A(BEGINH)\n         DC    A(BEGINI)\n         DC    7A(0)\n         DC    A(BEGINJ)\n         DC    A(BEGINK)\n         DC    A(BEGINL)\n         DC    A(BEGINM)\n         DC    A(BEGINN)\n         DC    A(BEGINO)\n         DC    A(BEGINP)\n         DC    A(BEGINQ)\n         DC    A(BEGINR)\n         DC    8A(0)\n         DC    A(BEGINS)\n         DC    A(BEGINT)\n         DC    A(BEGINU)\n         DC    A(BEGINV)\n         DC    A(BEGINW)\n         DC    A(BEGINX)\n         DC    A(BEGINY)\n         DC    A(BEGINZ)\n         MEND\n         EJECT\n*\n*   BEGIN A NEW SUBTABLE\n*   SET COUNT OF # OF ENTRIES FOR PREVIOUS SUBTABLE\n*   REMEMBER ENTRY POINT\n*\n         MACRO\n         BEGINSUB                 &SUBNAME\n         GBLC  &SUBLIST(30)       LIST OF SUBTABLE ENTRIES\n         GBLA  &SUBCT(30)         LIST OF SUBTABLE ENTRY COUNTS\n         GBLA  &SUBINDX           CURRENT SUBTABLE\n         GBLA  &SUBSENT           # ENTRIES IN CURRENT SUBTABLE\n         AIF   (&SUBINDX EQ 0).SUB0001 FIRST INVOCATION\n&SUBCT(&SUBINDX) SETA &SUBSENT\n&SUBSENT SETA  0\n.SUB0001 ANOP\n&SUBINDX SETA  &SUBINDX+1\n&SUBLIST(&SUBINDX) SETC '&SUBNAME'\n&SUBNAME DS    0X\n         MEND\n         SPACE 3\n*\n*   ADD LAST SUBTABLE DEFINITION TO SUBTABLE LIST\n*\n         MACRO\n         ENDSUB\n         GBLA  &SUBCT(30)\n         GBLA  &SUBINDX\n         GBLA  &SUBSENT\n&SUBCT(&SUBINDX) SETA &SUBSENT\n         MEND\n         EJECT\n*\n*       GENERATE THE INDEX FOR ALL SUBTABLES\n*\n         MACRO\n&LABEL   SUBINDEX\n         GBLC  &SUBLIST(30)\n         GBLA  &SUBCT(30)\n         GBLA  &SUBINDX\n         LCLA  &X\n         AIF   (&SUBINDX LE 15).NOERR\n         MNOTE 16,'ONLY 16 SUBTABLES PERMITTED'\n.NOERR   ANOP\n&LABEL   DS    0F\n.LOOP    ANOP\n         AIF   (&X EQ &SUBINDX).#1\n&X       SETA  &X+1\n         DC    AL1(&SUBCT(&X)),AL3(0),AL4(&SUBLIST(&X))\n         AGO   .LOOP\n.#1      ANOP\n         MEND\n         SPACE 3\n*\n*   BUILD AN ENTRY IN A SUBTABLE\n*\n         MACRO\n         SENT  &KEY,&VALUE\n         GBLA  &SUBSENT\n         LCLA  &LABEL\n&SUBSENT SETA  &SUBSENT+1\n&LABEL   SETA  &SYSNDX\n         DC    AL1(L'#&LABEL)\n         DC    XL2'&VALUE'\n#&LABEL  DC    C'&KEY'\n         MEND\n         EJECT\n*\n*   BUILD A TABLE USED TO BUILD A DICB\n*\n         MACRO\n&LABEL   DICBTAB1\n&LABEL   DS    0H\n         DC    X'000400010008',XL8'00' DDNAME\n         DC    X'00050001002C',XL44'00' DSNAME\n         DC    X'000600010008',XL8'00' MEMBER NAME\n         DC    X'000700010001',X'00' STATUS\n         DC    X'000800010001',X'00' DISPOSITION\n         DC    X'000900010001',X'00'  CONDITIONAL DISPOSITION\n         DC    X'000A00010002',XL2'00' DSORG\n         DC    X'000B00010002',XL2'00' LIMIT SPECIFICATION\n         DC    X'000C00010001',X'00' ATTRIBUTE SPECIFICATION\n         DC    X'000D00010001',X'00' LAST ENTRY SPECIFICATION\n         DC    X'000E00010001',X'00' DATA SET TYPE\n         MEND\n         MACRO\n&LABEL   DICBTAB2\n&LABEL   DS    0H\n         DC    X'005500010008',XL8'00' DDNAME\n         DC    X'00560001002C',XL44'00' DSNAME\n         DC    X'005700010002',XL2'00' DSORG\n         DC    X'005D00010006',XL6'00' VOLSER\n         MEND\n         EJECT\n***********************************************************************\n*\n*   THIS ROUTINE PROVIDES AN INTERFACE BETWEEN A HIGH LEVEL\n*   LANGUAGE SUCH AS FORTRAN, PL/1 OR COBOL, AND THE OPERATING\n*   SYSTEM DYNAMIC ALLOCATION ROUTINES.\n*\n*   INSTALLATION: UNIVERSITY OF MANITOBA COMPUTER CENTRE\n*   AUTHOR:       GERRY DUECK\n*   DATE WRITTEN: SUMMER 1978\n*   MODS:         ADDITION OF ALLOCR VERB.\n*                 LOTS OF MUCKING ABOUT TO MAKE THIS PROGRAM\n*                 CONSISTENT WITH ITS DOCUMENATION.\n*                   ROD ZAZUBEK FEB 1979\n*   DOCUMENTATION: COMPLETE DOCUMENTATION ON THE USE OF DYNAM IS\n*                  AVAILABLE IN SYS4.DOCUMENT.TEXT(DYNAM)\n*   ATTRIBUTES:   RENT\n*   HINTS:        PUT THIS PROGRAM SOMEWHERE IN THE LINK LIST.\n*\n*   PARAMETERS\n*      1 - WORK AREA. THE FIRST WORD OF THIS WORK AREA MUST CONTAIN\n*          THE LENGTH OF THE AREA. A MINIMUM OF 100 BYTES IS REQUIRED.\n*          IF THE LENGTH IS ZERO, AND 'INIT' IS NOT SPECIFIED (SEE\n*          PARM 2) THEN A WORK AREA IS OBTAINED AND USED FOR THIS\n*          CALL ONLY. THE WORKAREA IS FREED BEFORE RETURNING TO THE\n*          CALLER.\n*      2 - REQUEST VERB. THIS FIELD IS DELIMITED BY A BLANK.\n*          IF THE REQUEST VERB IS 'INIT' THEN ALL THIS CALL\n*          DOES IS TO ALLOCATE A WORK AREA FOR SUBSEQUENT\n*          CALLS. IF THE VERB IS 'END' THEN THIS WORK AREA\n*          IS FREED.\n*      3 AND SUBSEQUENT PARAMETERS.\n*        - CHARACTER STRINGS CONSISTING OF KEYWORD/VALUE PAIRS\n*          SEPARATED BY '=' AND DELIMITED BY ' ', ';'.\n*          END OF STRING IS DETERMINED BY ';'\n*          END OF LIST IS INDICATED BY THE HIGH ORDER BIT OF\n*          THE PARAMETER ADDRESS.\n*      AT LEAST 3 PARAMETERS ARE ASSUMED FOR ALL VERBS OTHER THAN\n*      'INIT' AND 'END'\n*\n*   WORK AREA.\n*      THE WORK AREA CONTAINS 5 SECTIONS:\n*         - WORK AREA CONTROL BLOCK.\n*         - DAIRFAIL PARAMETER LIST.\n*         - DYNAMIC ALLOCATION REQUEST BLOCK.\n*         - TEXT UNITS.\n*         - TEXT POINTERS.\n*      THE TEXT POINTERS ARE STACKED AT THE BOTTOM OF THE WORK AREA.\n*      THE TEXT UNITS ARE HEAPED AFTER THE REQUEST BLOCK.\n*\n*  ENTRY OPTIONS:\n*     IF VERB = 'INIT' THEN\n*        GET WORK AREA\n*        PLACE ADDRESS IN PARM 1\n*        OI  WORD POINTED TO BY PARM 1 TO X'80' TO INDICATE     AM31A\n*           THAT THIS IS A GETMAINED AREA\n*        RETURN\n*     ELSE IF VERB = 'END' THEN\n*        FREE THE AREA POINTED TO BY PARM ONE\n*        RETURN\n*     ELSE IF PARM 1 = 0 THEN\n*        GETMAIN AREA\n*        OI  WORD POINTED TO BY PARM 1 TO X'80' TO INDICATE     AM31A\n*           THAT THIS IS A GETMAINED AREA                       AM31A\n*        OI X'80' IN WALEN TO IND. IT IS TO BE FREED ON EXIT    AM31A\n*        PERFORM ALLOCATION\n*        FREMAIN AREA\n*        RETURN\n*     ELSE IF WORK OF 1ST BYTE OF PARM 1 IS X'80' THEN          AM31A\n*        DEREFENCE WORK AREA POINTER\n*        PERFORM COMMAND\n*     ELSE\n*        PERFORM COMMAND USING USER SUPPLIED WORK AREA\n*\n*   THREE TABLES ARE USED TO BUILD TEXT UNITS FOR SVC99.\n*\n*   VERB TABLE:\n*      THERE ARE ONLY 7 VERBS USED BY SVC99, AND SINCE SOME OF\n*      THESE ARE INFORMATION VERBS (IE THEY RETURN INFO) THEY ARE\n*      NOT SUPPORTED BY THIS INTERFACE SINCE THERE IS NO TRIVIAL\n*      MEANS OF RETURNING INFORMATION TO THE CALLER. THE VERB MUST\n*      BE AT LEAST AS LONG AS THE LENGTH SPECIFIED IN ITS CORRESONDING\n*      TABLE ENTRY. ACCESS TO THIS TABLE IS BY LINEAR SEARCH AND THE\n*      RESULT IS A ONE BYTE FIELD CONTAINING THE VERB CODE. TABLE\n*      ENTRIES ARE OF VARIABLE LENGTH WITH THE FIRST BYTE CONTAINING\n*      THE LENGTH OF THE VARIABLE PART. THE LENGTH OVERHEAD IS 2.\n*\n*   KEYWORD TABLE:\n*      THE KEYWORD TABLE IS VERY LONG, AND THE ENTRIES ARE VARIABLE\n*      LENGTH SO A BINARY SEARCH IS OUT OF THE QUESTION (UNLESS YOU\n*      HAD A TAG POINTING TO EACH TABLE ENTRY -- HMMMMM...) AND A\n*      LINEAR SEARCH IS TOO SLOW. A PRIMITIVE HASH TABLE IS USED\n*      IN WHICH THERE IS AN ENTRY FOR EVERY LETTER AND A POINTER\n*      TO THE FIRST KEYWORD TABLE ENTRY WHOSE KEYWORD STARTS WITH\n*      THAT LETTER. THE KEYWORD TABLE IS SORTED ALPHABETICALLY\n*      AND THE HASH TABLE IS BUILT BY INSERTING A BEGIN MACRO\n*      EVERY TIME A CHANGE IN FIRST LETTER OCCURS. WHEN PERFORMING\n*      A SEARCH ON THIS TABLE, COMPARISONS ARE MADE TO THE LENGTH\n*      OF THE KEYWORD SPECIFIED BY THE USER. WHEN A MATCH IS FOUND,\n*      THE LENGTH OF THE KEYWORD IS COMPARED TO THE MINIMUM LENGTH\n*      SPECIFIED IN THE TABLE ENTRY. IT MUST BE AT LEAST THIS LONG\n*      IN ORDER TO BE UNAMBIGOUS.\n*\n*   KEYWORD SUBTABLE:\n*     SOME OF THE ENTRIES IN THE KEYWORD TABLE REQUIRE MORE INFORMATION\n*      AND FOR THESE A POINTER TO A SUBTABLE IS SUPPLIED. THIS POINTER\n*      IS AN INDEX INTO ANOTHER TABLE MUCH LIKE THE HASH TABLE AND IS\n*      ONLY ONE BYTE, SO ONLY 16 SUBTABLES CAN OCCUR.\n*\n*   BUILDING A TEXT UNIT:\n*      AFTER FINDING THE KEYWORD IN THE KEYWORD TABLE, A VARIETY\n*      OF EVENTS CAN OCCUR. THIS IS BECAUSE IBM IN ITS INFINITE\n*      WISDOM CANNOT DECIDE ON A SIMPLE STRUCTURE FOR TEXT UNITS.\n*      SOME HAVE PARAMETERS THAT ARE PLI TYPE CHAR VAR, SOME ARE\n*      VARIABLE LENGTH BINARY VALUES, SOME HAVE NO PARAMETERS, ETC.\n*      THE FOLLOWING ALGORITHM IS USED TO BUILD THE TEXT UNIT:\n*\n*      IF THE USER SUPPLIED A PARM THEN\n*         IF A NON ZERO LENGTH IS SPECIFIED IN THE KEYWORD TABLE THEN\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH BINARY VALUE\n*         ELSE\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH STRING VALUE\n*      ELIF THE PARM VALUE SUPPLIED IN THE KEYWORD TABLE IS >= X'F0'\n*         CREATE A TEXT UNIT USING THE LENGTH AND VALUE SUPPLIED\n*         IN THE SUBTABLE ENTRY CORRESSPONDING TO THE USER SUPPLIED\n*         VALUE\n*      ELSE\n*         CREATE A TEXT UNIT USING A LENGTH OF 1 AND THE VALUE\n*         SUPPLIED IN THE KEYWORD TABLE\n*\n*      THIS ALGORITHM WORKS WELL ENOUGH EXCEPT FOR TWO KLUGES:\n*      CONCATENATION AND MULTI-VALUED KEYWORDS SUCH AS RECFM.\n*\n*      FOR CONCATENATION, THE TEXT UNIT MUST CONTAIN A VARIABLE\n*      NUMBER OF VARIABLE LENGTH CHARACTER STRINGS SHOVED TOGETHER.\n*      IF A ',' OCCURS AFTER A VALUE,THEN THE NEXT VALUE IS SCANNED AND\n*      CONCATENATED TO THE CURRENT ONE. THIS ASSUMES THAT THE TEXT UNIT\n*      IS ONE FOR WHICH CONCATENATED STRINGS ARE REQUIRED. IT IS UP TO\n*      THE USER TO SUPPLY CORRECT DATA.\n*\n*      FOR THE SPECIAL KEYWORDS RECFM AND OPTCD, EACH LETTER OF THE\n*      VALUE IS INDIVIDUALLY LOOKED UP IN THE SUBTABLE AND THE VALUE\n*      THUS OBTAINED IS OR'ED WITH THE VALUE ALREADY IN THE TEXT UNIT.\n*      IE RECFM=FBA = X'80' | X'10' | X'04' = X'94'\n*\n*   RETURN CODES AND DIAGNOSTICS:\n*      IF THE RETURN CODE FROM SVC99 IS NOT ZERO THEN A PARAMETER\n*      BLOCK FOR DAIRFAIL IS BUILT. DAIRFAIL IS CALLED AND THE\n*      DIAGNOSTIC THAT IT GENERATES IS WRITTEN TO THE JOB LOG (WTP).\n*\n*      THE INTERFACE ALSO HAS ITS OWN RETURNS CODES FOR ERRORS IS\n*      DETECTS IN THE USERS PARAMETER LIST. THESE START AT 4 HIGHER\n*      THAN THE RETURN CODES FROM SVC99.\n*\n*      THE RETURN CODE IS RETURNED BOTH IN REGISTER 15 AND IN THE\n*      SECOND WORD OF THE WORKAREA, IF IT STILL EXISTS AT THE END\n*      OF THE ROUTINE.\n*\n*   SVC99 RETURN CODES (SEE SPL:JOB MANAGEMENT PAGE 34)\n*      00 SUCCESSFULL COMPLETION\n*      04 ENVIRONMENT, RESOURCE FAILURE, SYSTEM ROUTINE\n*      08 REQUEST DENIED BY INSTALLATION VALIDATION ROUTINE\n*      12 INVALID PARAMETER LIST\n*\n*   INTERFACE RETURN CODES\n*      16 INVALID VERB\n*      20 INVALID KEYWORD\n*      24 WORK AREA OVERFLOW\n*      28 VALUE NOT FOUND IN SUBTABLE: INVALID VALUE\n*\n***********************************************************************\n         EJECT\nWORKAREA DSECT\nWALEN    DS    F                  LENGTH OF WORK AREA\nWAS99RC  DS    A                  VALUE OF RETURN CODE FROM SVC 99\nWADWORD  DS    D                  DOUBLE WORD FOR PACKS\nWABOTTOM DS    A                  END OF WORK AREA\nWAKYSTRT DS    A                  START OF KEYWORD\nWAVALAD  DS    A                  START OF VALUE\nWAVBSTRT DS    A                  START OF VERB\nWAS99RB  DS    A                  POINTER TO REQUEST BLOCK\nWADFID   DS    XL2                CALLER IDENTIFIER FOR DAIR FAIL\nWADFDSCT DS    A                  ADDR OF DSECT FOR CALLING DAIR FAIL\nWAZEROES DS    A                  ADDRESS OF IKJEFF02\nWALASTTU DS    A                  ADDRESS OF END OF LAST TEXT UNIT\nWAALLOCR DS    XL1                IS THIS AN ALLOCR VERB\nWATRUE   EQU   X'FF'\nWASAVE   DS    18F                SAVE AREA FOR DAIRFAIL\nWAEND    EQU   *                  END OF DSECT\n         SPACE 1\nVERBTABL DSECT\nVTVLEN   DS    X                  LENGTH OF VERB\nVTVERB   DS    X                  VERB CODE\nVTVSTR   DS    0C                 VERB STRING\nVTVEND   EQU   *\n         SPACE 1\nKYWDTABL DSECT\nKYWDLEN  DS    X                  KEYWORD LENGTH\nKYWDMIN  DS    X                  MINIMUM UNAMBIGOUS LENGTH\nKYWDPARM DS    X                  SPECIAL PARAMETER\nKYNOPARM EQU   X'00'              FLAGS NO PARM\nKYWDPMLN DS    X                  LENGTH OF PARM IF FIXED LENGTH\nKYWDKEY  DS    2X                 KEYWORD KEY\nKYWDSTRG DS    0C                 KEYWORD STRING\n         ORG   KYWDPARM\nKYWDSUBT DS    X                  FLAG A SUBTABLE FOR THIS ENTRY\nKYWDSUBF EQU   X'F0'              FLAGS A SUBTABLE\n         ORG\n         SPACE 1\nVALUTABL DSECT\nVALULEN  DS    X                  LENGTH OF STRING IN THIS ENTRY\nVALUPARM DS    2X                 PARAMETER VALUE FOR TEXT UNIT\nVALUSTRG DS    0C                 ENTRY STRING\n         SPACE 1\nCHAR     DSECT\nCH       DS    C\n         EJECT\nDICB1    DSECT\nDIDDN    DS    XL14               DDNAME\nDIDSN    DS    XL50               DSNAME\nDIMEM    DS    XL14               MEMBER NAME\nDISTAT   DS    XL7                STATUS\nDIDISP   DS    XL7                NORMAL DISPOSITION\nDICDISP  DS    XL7                CONDITIONAL DISPOSITION\nDIDSORG  DS    XL8                DSORG\nDILIMIT  DS    XL8                NUMBER RESOURCES TO BE FREED\nDIATTR   DS    XL7                ATTRIBUTE SPECIFICATION\nDILAST   DS    XL7                LAST ENTRY SPECIFICATION\nDITYPE   DS    XL7                DATA SET TYPE (DUMMY,TERMINAL,OTHER)\nDILEN1   EQU   *-DICB1\nDICB2    DSECT\nDIDDN2   DS    XL14\nDIDSN2   DS    XL50\nDIDSORG2 DS    XL8\nDIVOL2   DS    XL12\nDILEN2   EQU   *-DICB2\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJEFFDF DFDSECT=YES\n         EJECT\n@WA      EQU   11                 BASE ADDRESS FOR WORK AREA\n@RB      EQU   10                 BASE ADDRESS FOR REQUEST BLOCK\n@TP      EQU   9                  BASE ADDRESS FOR TEXT POINTERS\n@TU      EQU   8                  TEXT UNIT\n@CH      EQU   7                  POINTER INTO PARM STRING\n@VTE     EQU   6                  VERB TABLE ENTRY\n@KTE     EQU   6                  KEYWORD TABLE ENTRY\nLENGTH   EQU   5\n@DF      EQU   5                  BASE ADDRESS FOR DFDSECT\n         SPACE 1\nDYNAM    AMODE 31\nDYNAM    RMODE 24\nDYNAM    CSECT\n         USING DYNAM,12            ADDRESSIBILITY FOR CSECT\n         SAVE  (14,12),,DYNAM_&SYSDATC._&SYSTIME.\n         LR    R12,R15            GET BASE FOR CSECT\n         L     R15,=A(X'80000000'+AM31)                         AMODE31\n         BSM   R2,R15              SET AMODE31                  AMODE31\nAM31     DS    0H                                               AMODE31\n         SPACE 1\n         USING WORKAREA,@WA       ADDRESSIBILITY FOR WORK AREA\n         USING S99RB,@RB          ADDRESSIBILITY FOR REQUEST BLOCK\n         USING S99TUPL,@TP        ADDRESSIBILITY FOR TEXT POINTERS\n         USING S99TUNIT,@TU       ADDRESSIBILITY FOR TEXT UNITS\n         USING CHAR,@CH\n         USING VERBTABL,@VTE      ADDRESSIBILITY FOR VERB TABLE\n         USING DFDSECTD,@DF       ADDRESSIBILITY FOR DAIRFAIL DSECT\n         SPACE 1\n*\n*              CALL DYNAM (WORK,\"VERB \",...) WORK IS LEN+DATA\n*\n*              CALL DYNAM (WORK,'INIT ')  WORK IS ONE WORD, DYNAM GETM\n*              CALL DYNAM (WORK,\"VERB \",...) \"DO YOUR THING\"\n*              CALL DYNAM (WORK,'END  ')       FREE DYNAM WORKAREA\n*\n*              CALL DYNAM (0,\"VERB \", ...)  DYNAM DOES GETM/FREEM\n*                                           FOR EVERY REQUEST (SLOW)\n*\n*--------------------------------------------------------------------*\n*                                                                    *\n*        IF DYNAM DOES GETMAIN, IT LOOKS LIKE THIS                   *\n*CALLER                                                              *\n*        R1 -> A(FULL),A(C'INIT ') OR                                *\n*           -> A(0)                THEN                              *\n*              GETMAIN STORAGE, SAVE ADDRESS IN 'FULL'               *\n*INTERNAL                                                            *\n*        R1 ->  +-----+-------+                                      *\n*               |PARM1|PARM2..|                                      *\n*               +--V--+-------+                                      *\n*        +---------+                                                 *\n*        |                         CALL WORD IS REPLACED WITH        *\n*        |      +-+-----------+    GETMAIN ADDRESS                   *\n*        +--->  |1|CALLER WORD|--->+  TURN TOP BIT ON TO IND         *\n*               +-+-----------+    |  'INIT ' CALL                   *\n*                       +----------+                                 *\n*                       |                                            *\n*                    +--V--+                                         *\n*                    | LEN | IF A(0) PASSED, TOP BIT IN LEN IS       *\n*                    |+DATA|       TURNED ON                         *\n*                    |     |                                         *\n*                    +-----+                                         *\n*--------------------------------------------------------------------*\n*\n**   DECODE ENTRY OPTIONS\n*\n         L     R2,4(,R1)           ADDRESS OF VERB\n         CLC   0(4,R2),=C'INIT'\n         BE    INITCODE\n         CLC   0(3,R2),=C'END'\n         BE    ENDCODE\n*\n         L     @WA,0(,R1)          ADDRESS OF WORK AREA\n         LA    @WA,0(,@WA)         CLEAR HI BIT                 AM31B\n         OC    WALEN,WALEN         IS @ OF F'0' IN PARM1\n         BNZ   WORKGOT              NOPE\n*                                  YES, GETM/FREEM ON EACH CALL AM31A\n$GETMAIN EQU   2048\n         LR    R2,R1               SAVE R1\n         GETMAIN RU,LV=$GETMAIN,LOC=ANY\n         L     R3,0(,R2)           ADDR OF PARM 1\n         LA    R1,0(,R1)           CLEAR HI BIT                 AM31B\n         ST    R1,0(,R3)           SAVE ADDRESS\n*--------------------------------------------------------------------*\n*              IF DYNAM GETS MEMORY, TURN ON HI-BIT OF THEN 1ST WORD *\n*              PASSED TO DYNAM TO INDICATE DYNAM GOT THE MEMORY      *\n*              AND THAT THIS IS A POINTER TO THE WORKAREA            *\n*--------------------------------------------------------------------*\n         OI    0(R3),X'80'         INDICATE DYNAM DID GETMAIN   AM31A\n         L     @WA,0(,R3)          GET ADDRESS\n         LA    R3,$GETMAIN         LENGTH OF WORKAREA\n         ST    R3,WALEN            SET LENGTH\n*--------------------------------------------------------------------*\n*              IF WORD OF 1ST PARM IS F'0', THEN DYNAM GETMAINS AND  *\n*              FREEMAINS THE MEMORY ON EVERY CALL.  TURN ON THE HI   *\n*              BIT OF THEN 1ST WORD IN WORKAREA (WALEN)              *\n*              WE HAVE TO DO SOME EXTRA 'LA ' WHEN USING THIS FIELD  *\n*              OR THE LENGTH WOULD BE NEGATIVE                       *\n*--------------------------------------------------------------------*\n         OI    WALEN,X'80'         INDICATE @ F'0' IN PARM 1    AM31A\n         LR    R1,R2               RESTORE R1\n         B     WORKSET\n*\nWORKGOT  TM    0(@WA),X'80'        DID DYNAM GETMAIN MEMORY     AM31A\n         BZ    WORKSET              NO,  USER SUPPLIED AREA\n         L     @WA,0(,@WA)         YES, REFERENCE IT            AM31A\n         LA    @WA,0(,@WA)         CLEAR HI BIT                 AM31B\nWORKSET  DS    0H\n*\n**   SET UP WORK AREA\n*\n         L     @TP,WALEN           SAVE LENGTH AROUND MVCL CLEAR\n         LR    R2,@WA              ADDRESS OF WORK AREA\n         LR    R3,@TP              LENGTH\n         LA    R3,0(,R3)           CLEAR HI BIT                 AM31A\n         LR    R4,R2               FROM ADDR FOR ZAP\n         XR    R5,R5\n         MVCL  R2,R4               ZAP WORK AREA\n*\n         LR    R15,R13             ADDR OF CALLERS SAVE\n         LA    R13,WASAVE\n         ST    R13,8(R15)          FORE LINK\n         ST    R15,4(R13)          BACK LINK\n         ST    @TP,WALEN           RESTORE LENGTH BACK INTO WALEN\n         LA    @TP,0(,@TP)         CLEAR HI BIT FOR '0' ENTRY   AM31A\n*\n         LA    @TP,0(@TP,@WA)      + ADDRESS = END OF WORK AREA AM31B\n         ST    @TP,WABOTTOM\n         LA    @RB,WAEND           BEGINNING OF REQUEST BLOCK\n         ST    @RB,WADFDSCT        ADDRESS OF DFDSECTD\n         LA    @RB,DFLEN(@RB)      POINT PAST DFDSECTD\n         ST    @RB,WAS99RB         ADDRESS OF REQUEST BLOCK\n         LA    @TU,S99RBEND        BEGINNING OF TEXT UNIT HEAP\n         MVI   S99RBLN,X'14'       LENGTH OF RB\n*\n**  EXAMINE THE VERB PARAMETER\n*\n         L     @CH,4(,R1)          GET SECOND PARM\n         LA    @VTE,VERBTAB        FIRST ENTRY IN VERB TABLE\n         SR    R2,R2\nVERBLOOP DS    0H\n         CL    @VTE,VERBTEND       END OF TABLE?                AM31B\n         BE    FAILVERB            YES, VERB NOT FOUND\n         XR    R2,R2               ZERO IC WORD                 AM31B\n         IC    R2,VTVLEN           GET LENGTH OF VERB\n         BCTR  R2,0                LESS 1\n         EX    R2,VERBCLC          MATCH?\n         BE    VERBPOOL            YES\n         LA    @VTE,VTVSTR+1(R2)   GET NEXT ENTRY\n         B     VERBLOOP\nVERBCLC  CLC   VTVSTR,CH\nVERBPOOL DS    0H\n         CLC   CH(6),=C'ALLOCR'    VERB = ALLOCR?\n         BNE   VERBEND\n         MVI   WAALLOCR,WATRUE     SET ALLOCR FLAG\nVERBEND  DS    0H\n         MVC   S99VERB,VTVERB      MOVE IN VERB CODE\n*\n*  SCAN OFF KEYWORD PARAMETERS.\n*\n         TM    4(R1),X'80'         END OF PARM LIST?            AMODE31\n         BO    FAILKEY              YES                         AMODE31\n         LA    R1,8(,R1)           POINT TO THIRD PARAMETER\n         CLI   S99VERB,S99VRBIN    VERB = INFO?\n         BE    RETINFO             YUP\n         CLI   WAALLOCR,WATRUE     VERB = ALLOCR?\n         BE    RETALLOC\n         B     PARMLOOP            NOPE, START LOOP\n*\n**   SET UP THE TEXT UNITS FOR DYNAMIC INFORMATION RETRIEVAL\n**   THIS IS FOR THE INFO AND ALLOCR VERBS\n*\nRETINFO  DS    0H\n         LA    R2,DILEN1(@TU)      POINT TO END OF DICB\n         MVC   0(DILEN1,@TU),DICBS1 MOVE IN MODEL TEXT UNITS\n         B     RETLOOP\nRETALLOC DS    0H\n         LA    R2,DILEN2(@TU)      POINT TO END OF DICB2\n         MVC   0(DILEN2,@TU),DICBS2 MOVE IN MODEL TEXT UNITS\nRETLOOP  DS    0H\n         SL    @TP,=F'4'           POINT TO TUPTR ENTRY         AMODE31\n         ST    @TU,S99TUPTR        SET POINTER\n         LH    R3,S99TULNG         GET LENGTH OF PARM FIELD\n         LA    @TU,S99TUPAR(R3)    POINT TO NEXT TEXT UNIT\n         CLR   @TU,R2              END OF DICB?                 AM31B\n         BNE   RETLOOP\n         TM    0(R1),X'80'         LAST PARM?                   AMODE31\n         BO    PARMPOOL            YES                          AMODE31\n         LA    R1,4(,R1)           POINT TO NEXT PARM\nPARMLOOP DS    0H\n         L     @CH,0(,R1)          GET ADDRESS OF STRING\n         LA    @CH,0(,@CH)         ZERO TOP BYTE OR BIT\nSTRINGLP DS    0H                  START OF STRING LOOP\nSTRING01 DS    0H\n         CLI   CH,C';'             END OF STRING\n         BE    STRINGPL            YES, GOTO END OF STRING LOOP\n         CLI   CH,C','             COMMA?\n         BE    STRING02\n         CLI   CH,C' '             BLANK?\n         BNE   STRING03\nSTRING02 LA    @CH,1(,@CH)         GET NEXT CHAR\n         B     STRING01\nSTRING03 DS    0H\n         LA    R2,15               LENGTH OF LONGEST KEYWORD\n         ST    @CH,WAKYSTRT        SAVE START ADDRESS\nKEYSLOOP DS    0H\n         CLI   CH,C'='             END OF KEYWORD?\n         BE    KEYSPOOL\n         CLI   CH,C','\n         BE    KEYSPOOL\n         CLI   CH,C';'\n         BE    KEYSPOOL\n         CLI   CH,C' '\n         BE    KEYSPOOL\n         LA    @CH,1(,@CH)         GET NEXT CHAR\n         BCT   R2,KEYSLOOP\n         B     FAILKEY            KEY WORD FAILED\n         USING KYWDTABL,@KTE      ADDRESSIBILITY FOR KEY WORD TABLE\nKEYSPOOL DS    0H\n*\n** KEYWORD - SCAN OFF AND LOOK UP A KEYWORD\n*\nKEYWORD  DS    0H\n         L     R3,WAKYSTRT        GET FIRST CHR IN WORD\n         CLI   0(R3),C'A'\n         BL    FAILKEY            INVALID KEYWORD\n         CLI   0(R3),C'Z'\n         BH    FAILKEY            INVALID KEYWORD\n         XR    R2,R2               ZERO IC WORD                 AM31B\n         IC    R2,0(R3) GET FIRST CHAR\n         SL    R2,=A(C'A')         SUBTRACT OFF VALUE OF 'A'    AMODE31\n         SLL   R2,2                TIMES 4\n         L     @KTE,KYWDINDX(R2)   GET ADDRESS OF FIRST ENTRY WITH\n*                                  SAME FIRST LETTER\n         LR    LENGTH,@CH\n         SL    LENGTH,WAKYSTRT     LENGTH OF KEYWORD            AMODE31\n         BCT   LENGTH,KEYLOOP      LESS ONE FOR EXECUTE\n         B     FAILKEY\nKEYLOOP  DS    0H\n         CLC   KYWDSTRG(1),0(R3)   CHECK FIRST CHAR\n         BNE   FAILKEY             NO LONGER IN CORRECT PART OF TABLE\n         EX    LENGTH,KEYCLC       COMPARE KEYWORD TO ENTRY\n         BE    KEYPOOL\n         XR    R2,R2               ZERO IC WORD                 AM31B\n         IC    R2,KYWDLEN          GET LENGTH OF ENTRY\n         LA    @KTE,KYWDSTRG(R2)   GET NEXT ENTRY\n         B     KEYLOOP\nKEYCLC   CLC   KYWDSTRG,0(R3)\nKEYPOOL  DS    0H\n         XR    R2,R2               ZERO IC WORD                 AM31B\n         IC    R2,KYWDMIN          GET MIMINUM UNAMBIGOUS LEN\n         LA    LENGTH,1(,LENGTH)   LENGTH :=+ 1\n         CLR   LENGTH,R2           CHECK LENGTH                 AM31B\n         BL    FAILKEY             KEY WORD TOO SHORT\n         MVC   S99TUKEY,KYWDKEY\n         LA    R4,S99TULNG         ADDRESS OF LENGTH FIELD\n         ST    R4,WALASTTU         SAVE IT\n         CLI   CH,C'='             DID THE USER SUPPLY A PARM\n         BNE   SPECPARM            IF NOT, THEN PARM IS IN TABLE\nVALUNEXT DS    0H\n         LA    @CH,1(,@CH)         POINT PAST '='\n         ST    @CH,WAVALAD\nVALULOOP DS    0H\n         CLI   CH,C' '             BLANK?\n         BE    VALUPOOL            YES, END OF VALUE\n         CLI   CH,C','             COMMA?\n         BE    VALUPOOL            YES, END OF VALUE\n         CLI   CH,C';'             SEMI?\n         BE    VALUPOOL            YES, END OF VALUE\n         LA    @CH,1(,@CH)         GET NEXT VALUE\n         B     VALULOOP\nVALUPOOL DS    0H\n         LR    LENGTH,@CH\n         SL    LENGTH,WAVALAD      LENGTH OF VALUE              AMODE31\n         L     R4,WALASTTU\n         STH   LENGTH,0(,R4)       SAVE LENGTH\n         BCTR  LENGTH,0\n         LTR   LENGTH,LENGTH                                    AMODE31\n         BM    TEXTNUM             DONT MOVE VALUE IF NULL\n         L     R3,WAVALAD          GET START OF VALUE\n         CLI   KYWDSUBT,KYWDSUBF   IS THERE A SUBTABLE?\n         BNL   SUBTLKUP             YES\n         CLI   KYWDPMLN,KYNOPARM   IS THERE A LENGTH SUPPLIED?\n         BNE   CONVALUE\n         L     R4,WALASTTU\n         LA    R4,2(,R4)           POINT TO PARAMETER FIELD\n         EX    LENGTH,VALUEMVC\n         B     TEXTNUM\nVALUEMVC MVC   R0(0,R4),0(R3)\nSUBTLKUP DS    0H\n@SUBT    EQU   4\n*\n**   R3 POINTS TO VALUE\n**   R2 # OF ENTRIES IN SUBTABLE\n**   R15 USED FOR IC,STC\n*\n         XR    R15,R15             ZERO IC WORD\n         XR    R2,R2               ZERO IC WORD\n         IC    R2,KYWDSUBT         GET SUBTABLE INDEX POINTER\n         N     R2,=F'15'           GET RID OF FLAG BITS\n         SLL   R2,3                TIMES 8 @@4\n         L     @SUBT,VALUINDX+4(R2) ADDR OF SUBTABLE\n         USING VALUTABL,@SUBT     ADDRESSIBILITY FOR SUBTABLE ENTRIES\n         IC    R2,VALUINDX(R2)     # ENTRIES IN SUBTABLE\n         CLC   KYWDSTRG(5),=C'RECFM' SPECIAL CASE FOR RECFM\n         BE    SPECCASE\n         CLC   KYWDSTRG(5),=C'OPTCD' AND FOR OPTION CODE\n         BE    SPECCASE\nSUBTLOOP DS    0H\n         EX    LENGTH,SUBTCLC      COMPARE ENTRIES\n         BE    SUBTPOOL            ENTRY FOUND\n         IC    R15,VALULEN         GET LENGTH OF THIS ENTRY     AM31B\n         LA    @SUBT,VALUSTRG(R15) GET NEXT ENTRY\n         BCT   R2,SUBTLOOP        REPEAT IF NOT AT END OF TABLE\n         B     FAILVALU\nSUBTPOOL DS    0H\n         LA    LENGTH,1(LENGTH)   LENGTH +:= 1\n         CLR   LENGTH,R15         CORRECT VALUE LENGTH          AM31B\n         BNE   FAILVALU\n         XR    R2,R2               ZERO IC WORD                 AM31B\n         IC    R2,KYWDPMLN        GET PARM LENGTH\n         STC   R2,S99TULNG+1      SAVE IT IN TEXT UNIT\n         IC    R2,CONVMASK(R2)    GET STCM MASK\n         ICM   R3,3,VALUPARM      GET VALUE\n         EX    R2,CONVSTCM        STCM R3,CONVMASK(R2),S99TUPAR\n         B     TEXTNUM\nSUBTCLC  CLC   VALUSTRG,0(R3)\n*\n**   THIS CODE HANDLES THE SPECIAL CASE FOR KEYWORDS THAT CAN HAVE\n**   MORE THAN ONE VALUE SPECIFIED. EG 'RECFM=FBA'.\n**   THE INDIVIDUAL VALUES ARE OR'ED TOGETHER\n*\nSPECCASE DS    0H\n         LR    R0,@SUBT           SAVE ADDR OF START OF SUBTABLE\n         LR    R15,R2             SAVE # SUBTABLE ENTRIES\n         L     @CH,WAVALAD        POINT TO FIRST VALUE\n         LA    LENGTH,1(LENGTH)   CORRECT LENGTH\nSPECLOOP DS    0H\n         CLC   CH,VALUSTRG        COMPARE CHAR WITH VALUE STRING\n         BE    SPECPOOL           FOUND\n         LA    @SUBT,VALUSTRG+1   NEXT ENTRY\n         BCT   R2,SPECLOOP        REPEAT WITH NEW ENTRY\n         B     FAILVALU           NO MORE ENTRIES LEFT\nSPECPOOL DS    0H\n         OC    S99TUPAR(1),VALUPARM+1\n         LA    @CH,CH+1           NEXT CHAR IN USER SUPPLIED VALUE\n         LR    @SUBT,R0           RESTORE SUBTABLE ADDR\n         LR    R2,R15             RESTORE SUBTABLE ENTRY COUNT\n         BCT   LENGTH,SPECLOOP\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH\n         B     TEXTNUM            FINISHED\n*\n**   SUPPLY THE PARAMETER VALUE FOR THE TEXT UNIT FROM THE KEYWRD TABLE\n*\nSPECPARM DS    0H\n         CLI   KYWDPARM,KYNOPARM  IS THERE A SPECIAL PARM?\n         BE    TEXTFINI\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH\n         MVC   S99TUPAR(1),KYWDPARM MOVE IN SPECIAL PARM\n         B     TEXTNUM\n*\n**   THE USER SUPPLIED VALUE IS TO BE CONVERTED TO BINARY AND RIGHT\n**   JUSTIFIED IN A FIELD WHOSE LENGTH IS SUPPLIED IN THE KEYWORD TABLE\n*\nCONVALUE DS    0H\n         LA    R2,WADWORD-1+L'WADWORD POINT 1 BYTE BEFOR END OF WADWORD\n         SR    R2,LENGTH          POINT TO CORRECT ADDR FOR MVC\n         XC    WADWORD,WADWORD\n         EX    LENGTH,CONVMVC     MOVE VALUE\n         PACK  WADWORD,WADWORD    CONVERT TO PACKED DECIMAL\n         CVB   R3,WADWORD         CONVERT TO BINARY\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN KYWDPARM\n         XR    R2,R2               ZERO IC WORD\n         IC    R2,S99TULNG+1      GET SPECIAL PARM\n         IC    R2,CONVMASK(R2)    SET BYTE 2 FOR STCM INST\n         EX    R2,CONVSTCM        STCM R3,MASK(2),S99TUPAR\n         B     TEXTNUM\nCONVMVC  MVC   0(0,R2),0(R3)\nCONVSTCM STCM  0,0,S99TUPAR\nCONVMASK DC    X'303133373F'\n*\n**   SET THE NUMBER FIELD IN THE TEXTUNIT\n*\nTEXTNUM  DS    0H\n         LH    R2,S99TUNUM        NUMBER OF KEYS IN THIS TEXT UNIT\n         LA    R2,1(R2)           + ONE\n         STH   R2,S99TUNUM        SAVE IT\n         CLI   CH,C','            IS THERE ANOTHER PARAMETER?\n         BNE   TEXTFINI           NO\n         L     R4,WALASTTU        ADDRESF OF LENGTH FIELD FOR LAST TU\n         AH    R4,0(R4)           ADD LENGTH OF PARAMETER\n         LA    R4,2(R4)           + 2 FOR LENGTH FIELD\n         ST    R4,WALASTTU        = ADDRESS OF NEXT LENGTH FIELD\n         B     VALUNEXT           PROCESS NEXT VALUE\n*\n**   COMLETE THE TEXT UNIT.\n**   CHECK FOR WAORK AREA OVERFLOW.\n**   ADD A NEW POINTER THE THE TEXTPOINTERS\n*\nTEXTFINI DS    0H\n         L     R2,WALASTTU        ADDRESS OF LENGTH FIELD\n         AH    R2,0(2)            + LENGTH OF PARM\n         LA    R2,2(2)            + TWO FOR LENGTH FIELD\n         SL    @TP,=F'4'          POINT TO NEW TEXT POINTER     AMODE31\n         CLR   R2,@TP             CHECK FOR OVERFLOW            AM31B\n         BH    FAILOVFL           WORKAREA OVERFLOW\n         ST    @TU,S99TUPTR       SAVE ADDR OF TU\n         LR    @TU,R2             POINT TO NEW TEXT UNIT\n         B     STRINGLP\nSTRINGPL DS    0H                 END OF STRING LOOP\n         TM    0(R1),X'80'        LAST PARM?                    AMODE31\n         BO    PARMPOOL           YES                           AMODE31\n         LA    R1,4(R1)           POINT TO NEXT PARM\n         B     PARMLOOP\nPARMPOOL DS    0H\n         EJECT\n         ST    @TP,S99TXTPP       SET TEXT POINTER FIELD IN RB\n         L     @TP,WABOTTOM       GET END OF WORKAREA\n         SL    @TP,=F'4'          POINT TO LAST PARM            AMODE31\n         OI    S99TUPTR,S99TUPLN  SET LAST TP FLAG              AMODE31\n         LA    R1,WAS99RB         GET ADDR OF REQUEST BLOCK\n         OI    0(R1),S99RBPND     TURN ON FIRST BIT OF S99RBP\nSVC99    DYNALLOC                 CALL DYNAMIC ALLOCATION RTN\n         LTR   R15,R15\n         BNE   DAIRFAIL\n         CLI   S99VERB,S99VRBIN   VERB = INFO?\n         BE    INFODECO           YES, DECODE IT\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?\n         BE    INFODECO\n         B     RETURN\nDAIRFAIL DS    0H\n         L     @DF,WADFDSCT       ADDRESS OF DFDSECT\n         ST    @RB,DFS99RBP       ADDRESS OF SVC99 REQUEST BLOCK\n         MVC   WADWORD(4),4(@RB)   MOVE IN S99ERROR AND S99INFO     SJB\n*                                  INTO 3RD WORD OF WORKAREA        SJB\n         ST    R15,WAS99RC        SVC 99 RETURN CODE\n         LA    R2,WAS99RC         GET ADDR OF IT\n         ST    R2,DFRCP\n         LA    R2,WADFID          ADDR OF DIFD\n         ST    R2,DFIDP\n         MVI   WADFID,DFWTP       SPECIFY WRITE TO PROGRAMMER\n         MVI   WADFID+1,DFSVC99   FROM SVC 99\n         LA    R2,WAZEROES\n         ST    R2,DFJEFF02        ADDR OF ADDR OF IKJEFF02 (NOT KNOWN)\n         LR    R1,@DF\n         LINK  EP=IKJEFF18        CALL DAIRFAIL\n         L     R15,WAS99RC        RESTORE RETURN CODE\n         B     RETURN\n         EJECT\n*\n**   INITIALIZATION CODE\n*\nINITCODE DS    0H\n         LR    R2,R1\n         GETMAIN R,LV=$GETMAIN    GETMAIN AREA\n         L     R3,0(,R2)          ADDRESS OF PARM ONE\n         LA    R1,0(,R1)           CLEAR HI BIT                 AM31B\n         ST    R1,0(,R3)          SAVE ADDRESS IN CALLERS WORD\n*--------------------------------------------------------------------*\n*              IF DYNAM GETS MEMORY, TURN ON HI-BIT OF THEN 1ST WORD *\n*              PASSED TO DYNAM TO INDICATE DYNAM GOT THE MEMORY      *\n*              AND THAT THIS IS A POINTER TO THE WORKAREA            *\n*--------------------------------------------------------------------*\n         OI    0(R3),X'80'         INDICATE 'INIT ' CALL        AM31A\n         L     R3,0(,R3)          POINT TO AREA\n         LA    R4,$GETMAIN        LENGTH\n         ST    R4,0(,R3)          SET LENGTH\n         XR    R15,R15            SET RC\n         XC    4(4,R3),4(R3)      ZERO WAS99RC\n         LM    R14,R12,12(R13)    RESTORE REGS\n         XR    R15,R15            SET RETURN CODE\n         XR    R0,R0\n         BSM   R0,R14             RETURN WITH RIGHT AMODE       AMODE31\nENDCODE  DS    0H\n         LR    R2,R1              SAVE REG 1\n         L     R3,0(,R1)          ADDRESS OF PARM 1\n         L     R3,0(,R3)          ADDRESS TO BE FREED\n         L     R4,0(,R3)          LENGTH TO BE FREED\n         LA    R3,0(,R3)           CLEAR HI-BIT                 AM31B\n         LA    R4,0(,R4)           CLEAR HI-BIT                 AM31B\n         FREEMAIN R,A=(3),LV=(4)\n         LM    R14,R12,12(R13)    RESTORE REGS\n         XR    R15,R15            SET RETURN CODE\n         XR    R0,R0\n         BSM   R0,R14             RETURN WITH RIGHT AMODE       AMODE31\n         EJECT\n*\n**   DECODE INFO RETURNED BY SVC99\n*\nINFODECO DS    0H\n         L     R1,4(,R13)\n         L     R1,24(,R1)          RECOVER R1\n         L     R1,8(,R1)           POINT TO THIRD PARM\n         L     @TU,S99TUPTR        POINT TO FIRST TEXT UNIT\n         CLI   WAALLOCR,WATRUE     VERB = ALLOCR?\n         BE    INFO1\n         LA    R0,DILEN1(@TU)      POINT TO END OF DICB\n         LA    R4,DICBS1           ADDRESS OF DICB MODEL\n         B     INFO2\nINFO1    DS    0H\n         LA    R0,DILEN2(@TU)      POINT TO END OF DICB\n         LA    R4,DICBS2           ADDRESS OF DICB MODEL\nINFO2    DS    0H\nINFOLOOP DS    0H\n         LH    R3,S99TULNG         GET LENGTH\n         BCTR  R3,0                LESS ONE FOR EXECUTE\n         LTR   R3,R3\n         BL    INFOLEN\n         EX    R3,INFOMVC\nINFOLEN  LH    R3,S99TULNG-S99TUNIT(,R4) GET MAX PARM LENGTH\n         AR    R1,R3              POINT TO NEXT INFO PARM\n         LA    @TU,S99TUPAR(R3)   NEXT TEXT UNIT\n         LA    R4,S99TUPAR-S99TUNIT(R3,4) NEXT TEXT UNIT IN MODEL\n         CLR   @TU,R0             END OF INFO TU'S?             AM31B\n         BNE   INFOLOOP\n         XR    R15,R15            SET RETURN CODE\n         B     RETURN\nINFOMVC  MVC   0(0,R1),S99TUPAR\nINFOMVCB MVC   0(0,R1),BLANKS\n         SPACE 3\nFAILVERB DS    0H\n         LA    R15,16\n         B     RETURN\nFAILKEY  DS    0H\n         LA    R15,20\n         B     RETURN\nFAILVALU DS    0H\n         LA    R15,28\n         B     RETURN\nFAILOVFL DS    0H\n         LA    R15,24\n         B     RETURN\n         EJECT\nRETURN   DS    0H\n         ST    R15,WAS99RC         RETURN CODE\n         L     R13,4(,R13)         RESTORE SAVEAREA ADDR\n         ST    R15,16(,R13)        SET RETURN CODE\n         L     R1,24(,R13)         RESTORE R1\n         L     R1,0(,R1)           ADDR OF PARM 1\n*--------------------------------------------------------------------*\n*              IF WORD POINTED TO BY THE 1ST PARAMETER HAS HI   AM31A*\n*              BIT ON, THEN DYNAM GETMAINED MEMORY AND THIS IS  AM31A*\n*              THE ADDRESS OF THAT MEMORY AND NOT THE FIRST     AM31A*\n*              WORK OF THE WORKAREA.                            AM31A*\n*              THEREFORE IF NOT ON, THIS IS CALLERS WORKAREA    AM31A*\n*--------------------------------------------------------------------*\n         TM    0(R1),X'80'         GOTTEN BY DYNAM              AM31A\n         BZ    RETURN01             NO                          AM31A\nRETURN0  LR    R2,R1               SAVE R1                      AM31A\n         L     R1,0(,R1)           ADDR TO BE FREED             AM31A\n*--------------------------------------------------------------------*\n*              IF FIRST BIT  IN WORKAREA (XALEN) IS ON          AM31A*\n*              THEN USER CALLED US  WITH A F'0' LENGTH, DYNAM   AM31A*\n*              IS TO FREE MEMORY AT EVERY EXIT                  AM31A*\n*              IF NOT ON, THE WORKAREA WAS GOTTEN VIA 'INIT '   AM31A*\n*--------------------------------------------------------------------*\n         TM    0(R1),X'80'         DOES FLAG SAY TO FREEMAIN    AM31A\n         BZ    RETURN01             NO, NOT TO BE FREED         AM31A\n         LA    R1,0(,R1)           CLEAR HI BIT                 AM31B\n         XC    0(4,R1),0(R1)       SET PARM 1 TO ZEROES\n         FREEMAIN R,LV=$GETMAIN,A=(1)\n         LR    R1,R2               RESTORE R1\n         XC    0(4,R1),0(R1)       SET PARM 1 TO ZEROES\nRETURN01 DS    0H\n         LM    R14,R12,12(R13)     RESTORE REGS\n         LR    R0,R15              SET RETURN CODE IN R0\n         BSM   R0,R14              RETURN WITH RIGHT AMODE      MCLANE\n         EJECT\n         PRINT NOGEN\n         INDEX\nVERBTAB  DS    0H                  AL1(VERBLEN),AL1(S99KEY),C'VERB'\n         VENT  ALLOC,S99VRBAL\n         VENT  ALLOCR,S99VRBAL\n         VENT  UNALLOC,S99VRBUN\n         VENT  CONCAT,S99VRBCC\n         VENT  UNCONCAT,S99VRBDC\n         VENT  REMOVE,S99VRBRI\n         VENT  DDALLOC,S99VRBDN\n         VENT  INFO,S99VRBIN\nVERBMARK DS    0X\nVERBTEND DC    A(VERBMARK)\n         SPACE 1\nKYWDTAB  DS    0H\n         BEGIN A\n         KENT  ABE,3,DALEROPT,20\n         KENT  ACC,3,DALEROPT,80\n         KENT  AL,2,DALLABEL,40\n         KENT  ALIGNMENT,3,DALFCBAV,08\n         KENT  ALX,3,DALSPFRM,02\n         KENT  AUL,3,DALLABEL,48\n         BEGIN B\n         KENT  BLKSIZE,3,DALBLKSZ,,2\n         KENT  BLOCK,3,DALBLKLN,,3\n         KENT  BLP,3,DALLABEL,10\n         KENT  BUFALN,4,DALBFALN,SUBTABLE\n         KENT  BUFIN,4,DALBUFIN,,2\n         KENT  BUFL,4,DALBUFL,,2\n         KENT  BUFMAX,4,DALBUFMX,,1\n         KENT  BUFNO,4,DALBUFNO,,1\n         KENT  BUFOFF,5,DALBUFOF,,1\n         KENT  BUFOUT,5,DALBUFOU,,1\n         KENT  BUFRQ,4,DALBUFRQ,,1\n         KENT  BUFSZ,4,DALBUFSZ,,2\n         KENT  BUFTEK,4,DALBFTEK,SUBTABLE\n         BEGIN C\n         KENT  CATLG,2,DALNDISP,02\n         KENT  CCATLG,2,DALCDISP,02\n         KENT  CDELETE,2,DALCDISP,04\n         KENT  CHARSET,2,DALUVRFY\n         KENT  CKEEP,2,DALCDISP,08\n         KENT  CLOSE,2,DALCLOSE\n         KENT  CODE,3,DALCODE,SUBTABLE\n         KENT  CONTIG,3,DALSPFRM,08\n         KENT  CONVERT,4,DALCNVRT\n         KENT  COPIES,3,DALCOPYS,,1\n         KENT  CUNCATLG,2,DALCDISP,01\n         KENT  CYL,2,DALCYL\n         BEGIN D\n         KENT  DCBDD,5,DALDCBDD\n         KENT  DCBDS,5,DALDCBDS\n         KENT  DDNAME,2,DALDDNAM\n         KENT  DELETE,2,DALNDISP,04\n         KENT  DIRECTORY,2,DALDIR,,3\n         KENT  DSNAME,3,DALDSNAM\n         KENT  DSORG,3,DALDSORG,SUBTABLE,2\n         KENT  DSSEQ,3,DALDSSEQ,,2\n         KENT  DUMMY,2,DALDUMMY\n         KENT  D1600,5,DALDEN,C3\n         KENT  D6250,5,DALDEN,D3\n         KENT  D800,4,DALDEN,83\n         BEGIN E\n         KENT  EXPIRY,1,DALEXPDT\n         BEGIN F\n         KENT  F,1,DALRECFM,80\n         KENT  FA,2,DALRECFM,84\n         KENT  FAS,3,DALRECFM,8C\n         KENT  FB,2,DALRECFM,C0\n         KENT  FBA,3,DALRECFM,C4\n         KENT  FBAS,4,DALRECFM,9C\n         KENT  FBM,3,DALRECFM,C2\n         KENT  FBMS,4,DALRECFM,8A\n         KENT  FBS,3,DALRECFM,98\n         KENT  FM,2,DALRECFM,82\n         KENT  FMS,3,DALRECFM,8A\n         KENT  FOLDMODE,3,DALUFOLD\n         KENT  FORMS,3,DALFCBIM\n         KENT  FS,2,DALRECFM,88\n         BEGIN G\n         BEGIN H\n         KENT  HOLD,1,DALSHOLD\n         BEGIN I\n         KENT  INPUT,1,DALINOUT,40\n         BEGIN J\n         BEGIN K\n         KENT  KEEP,3,DALNDISP,08\n         KENT  KEYLEN,3,DALKYLEN,,1\n         BEGIN L\n         KENT  LIMCT,2,DALLIMCT,,3\n         KENT  LRECL,2,DALLRECL,,2\n         KENT  LTM,2,DALLABEL,21\n         BEGIN M\n         KENT  MEMBER,2,DALMEMBR\n         KENT  MOD,3,DALSTATS,02\n         KENT  MODE,4,DALMODE,SUBTABLE\n         KENT  MSVGP,2,DALMSVGP\n         KENT  MXIG,2,DALSPFRM,04\n         BEGIN N\n         KENT  NCP,2,DALNCP,,1\n         KENT  NEW,3,DALSTATS,04\n         KENT  NEWCLASS,4,DUNOVCLS\n         KENT  NEWHOLD,4,DUNOVSHQ\n         KENT  NEWNOHOLD,4,DUNOVSNH\n         KENT  NEWREMOTE,4,DUNOVSUS\n         KENT  NL,2,DALLABEL,01\n         KENT  NSL,3,DALLABEL,04\n         BEGIN O\n         KENT  OLD,3,DALSTATS,01\n         KENT  OPTCD,2,DALOPTCD,SUBTABLE\n         KENT  OUTLIM,4,DALOUTLM,,3\n         KENT  OUTPUT,3,DALINOUT,80\n         BEGIN P\n         KENT  PARALLEL,3,DALPARAL\n         KENT  PASSREAD,5,DALPASPR,10\n         KENT  PASSWORD,6,DALPASSW\n         KENT  PASSWRITE,6,DALPASPR,30\n         KENT  PERMANENT,2,DALPERMA\n         KENT  PERMCONCAT,5,DCCPERMC\n         KENT  PRIMARY,4,DALPRIME,,3\n         KENT  PRIVATE,4,DALPRIVT\n         KENT  PRTSP,3,DALPRTSP,SUBTABLE\n         BEGIN Q\n         KENT  QNAME,1,DALQNAME\n         BEGIN R\n         KENT  RECFM,3,DALRECFM,SUBTABLE\n         KENT  RELNO,3,DINRELNO,,2\n         KENT  REMOTE,3,DALSUSER\n         KENT  REMOVE,5,DUNREMOV\n         KENT  RETENTION,3,DALRETPD,,2\n         KENT  RLSE,2,DALRLSE\n         KENT  ROUND,2,DALROUND\n         BEGIN S\n         KENT  SECONDARY,3,DALSECND,,3\n         KENT  SHR,2,DALSTATS,08\n         KENT  SKP,2,DALEROPT,40\n         KENT  SL,2,DALLABEL,02\n         KENT  SUL,3,DALLABEL,08\n         KENT  SYSOFORM,5,DALSFMNO\n         KENT  SYSOPROG,5,DALSPGNM\n         KENT  SYSOUT,5,DALSYSOU\n         BEGIN T\n         KENT  TERMFILE,2,DALTERM\n         KENT  TRK,3,DALTRK\n         KENT  TRTCH,3,DALTRTCH,SUBTABLE\n         BEGIN U\n         KENT  U,1,DALRECFM,C0\n         KENT  UCS,2,DALUCS\n         KENT  UNALLOC,3,DUNUNALC\n         KENT  UNCATLG,3,DALNDISP,01\n         KENT  UNICOUNT,4,DALUNCNT,,1\n         KENT  UNIT,4,DALUNIT\n         BEGIN V\n         KENT  V,1,DALRECFM,40\n         KENT  VA,2,DALRECFM,44\n         KENT  VAS,3,DALRECFM,4C\n         KENT  VB,2,DALRECFM,50\n         KENT  VBA,3,DALRECFM,64\n         KENT  VBAS,4,DALRECFM,5C\n         KENT  VBM,3,DALRECFM,62\n         KENT  VBMS,4,DALRECFM,5A\n         KENT  VBS,3,DALRECFM,58\n         KENT  VERIFY,2,DALFCBAV,04\n         KENT  VM,2,DALRECFM,42\n         KENT  VMS,3,DALRECFM,4A\n         KENT  VOLUME,3,DALVLSER\n         KENT  VOLCOUNT,4,DALVLCNT,,1\n         KENT  VOLREF,4,DALVLRDS\n         KENT  VOLSEQ,4,DALVLSEQ,,2\n         KENT  VS,2,DALRECFM,48\n         BEGIN W\n         BEGIN X\n         BEGIN Y\n         BEGIN Z\nKYWDMARK DS    0X\nKYWDTEND DC    A(KYWDMARK)\n         BEGINSUB BFALN           OFFSET 00\n         SENT  F,01\n         SENT  D,02\n         BEGINSUB BFTEK           OFFSET 04\n         SENT  D,08\n         SENT  E,10\n         SENT  R,20\n         SENT  S,40\n         SENT  A,60\n         BEGINSUB CODE\n         SENT  T,02\n         SENT  A,04\n         SENT  C,08\n         SENT  B,10\n         SENT  F,20\n         SENT  I,40\n         SENT  N,80\n         BEGINSUB DSORG\n         SENT  TQ,0020\n         SENT  TX,0040\n         SENT  GS,0080\n         SENT  PO,0200\n         SENT  MQ,0400\n         SENT  CQ,0800\n         SENT  CX,1000\n         SENT  DA,2000\n         SENT  PS,4000\n         SENT  POU,0300\n         SENT  DAU,2100\n         SENT  PSU,4100\n         SENT  TCAM,0004\n         SENT  VSAM,0008\n         BEGINSUB MODE\n         SENT  E,40\n         SENT  C,80\n         SENT  ER,50\n         SENT  EO,60\n         SENT  CR,90\n         SENT  CO,A0\n         BEGINSUB OPTCD           OFFSET 04\n         SENT  R,01\n         SENT  T,02\n         SENT  Z,04\n         SENT  A,08\n         SENT  Q,08\n         SENT  F,10\n         SENT  H,10\n         SENT  O,10\n         SENT  C,20\n         SENT  E,20\n         SENT  B,40\n         SENT  U,40\n         SENT  W,80\n         BEGINSUB PRTSP\n         SENT  0,01\n         SENT  1,09\n         SENT  2,11\n         SENT  3,19\n         BEGINSUB RECFM\n         SENT  M,02\n         SENT  R,02\n         SENT  A,04\n         SENT  G,04\n         SENT  S,08\n         SENT  B,10\n         SENT  D,20\n         SENT  T,20\n         SENT  V,40\n         SENT  F,80\n         SENT  U,C0\n         BEGINSUB TRTCH\n         SENT  C,13\n         SENT  E,23\n         SENT  T,3B\n         SENT  ET,2B\n         ENDSUB\n         PRINT GEN\nVALUINDX SUBINDEX\nDICBS1   DICBTAB1\nDICBS2   DICBTAB2\n         LTORG ,\nBLANKS   DC    CL256' '\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYNAMDOC": {"ttr": 6147, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01\\x03\\x02\\x0f\\x01\\x03\\x02\\x0f\\x082\\x021\\x021\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-01-20T00:00:00", "modifydate": "2003-01-20T08:32:36", "lines": 561, "newlines": 561, "modlines": 0, "user": "KBASS"}, "text": "1\n-\n-\n-\n0                                     DYNAM\n+                                     _____\n-\n                           Dynamic Allocation Interface\n-\n           INTRODUCTION\n+          INTRODUCTION\n+          ____________\n0             DYNAM provides an interface between a high level language\n           such as COBOL or PLI, and SVC 99, the system dynamic alloca-\n           tion  routine.    It  allows  the  user  to  acquire  system\n           resources as the need arises and  free them when they are no\n           longer required.  DYNAM  takes  simple parameters consisting\n           of character strings and translates them into the text units\n           required by  SVC 99.   In addition,   a special  information\n           retrieval function can be called to provide all the informa-\n           tion available about a particular allocation.  This informa-\n           tion is returned in a fixed format data structure.  For more\n           information about SVC 99 refer to the IBM manual:\n0               OS/VS2 MVS SYSTEM PROGRAMMING LIBRARY: JOB MANAGEMENT\n                    GC28-0627-2\n-\n           WORK AREA\n+          WORK AREA\n+          ____ ____\n0             The first parameter to DYNAM is a workarea.   This worka-\n           rea can be supplied  by the user or can be  obtained for the\n           user by DYNAM. If obtained by DYNAM it can be used by subse-\n           quent calls to DYNAM and freed later, or can be acquired and\n           freed on the same call.\n0             If the user supplies a work  area,  the first word of the\n           work area must contain the length in bytes.\n0                (FORTRAN)\n                     INTEGER WORK(500)/2000/\n                     CALL DYNAM (WORK, . . .)\n                 (PLI)\n                     DCL 1 WORKAREA,\n                       2 WA_LENGTH   FIXED BIN (31) INIT (2000),\n                       2 FILLER      CHAR (2000);\n                     CALL DYNAM (WORK, . . .)\n-\n0                                     - 1 -\n1\n-\n-                (COBOL)\n                     01  WORK.\n                         02  WORK-LEN  PIC S9(9) COMP SYNC VALUE +2000.\n                         02  WORK-AREA PIC X(2000).\n                     . . .\n                     CALL 'DYNAM' USING WORK . . .\n0             If DYNAM is to supply its own work area, this can be done\n           explicitly by coding:\n0               DCL WORK    FIXED BIN(31) INIT(0);\n                CALL DYNAM (WORK, 'INIT')\n0             WORK then becomes  a reference to the  acquired work area\n           and must  be specified on all  subsequent calls to  DYNAM as\n           the first parameter.  The workarea can later be free by cod-\n           ing:\n0               CALL DYNAM (WORK, 'END')\n0             If dynam is to acquire a  workarea to be used only during\n           one invocation,  the workarea is implicitly acquired by cod-\n           ing:\n0               CALL DYNAM (0, . . .)\n0             This is  used when the  programmer only wants  to perform\n           one dynamic allocation and then continue with his program.\n-\n           OPERATIONS\n+          OPERATIONS\n+          __________\n0             The second parameter to DYNAM describes the operation you\n           wish to perform.    There are two different  types of opera-\n           tions:  those  that have to  do with dynamic  allocation and\n           those that have to do with the interface itself.\n0               Interface Operations\n                INIT     - aquire a work area\n                END      - free the work area previously acquired by INIT\n0               Allocation Operations\n                ALLOC     - allocate a dataset\n                UNALLOC   - unallocate a dataset\n                CONCAT    - concatenate 2 or more DD names\n                UNCONCAT  - unconcatenate previously concatenated DD names.\n                REMOVE    - remove in-use attribute\n                DDALLOC   - allocate a DD name\n                INFO      - retrieve information about an allocation\n-\n-                                     - 2 -\n1\n-\n-          OPERANDS\n+          OPERANDS\n+          ________\n0             The  third  and  subsequent  parameters  supply  operands\n           needed to perform dynamic allocation.  Only one operand par-\n           ameter is required  but it is sometimes convenient  to use a\n           larger number, for example when obtaining allocation parame-\n           ters from  a user  at a terminal  in an  interactive manner.\n           Normal OS linkage  conventions flag the last  parameter in a\n           parameter list so a variable  number of parameters is easily\n           allowed if the high level host language supports it. Operand\n           parameters must be delimited on the right by a semicolon.\n0             Operands consist of a keyword and an optional value.   if\n           a value  is present it is  separated from the keyword  by an\n           equals (=)  sign.  Operands are separated from each other by\n           one of more spaces and an operand string is delimited on the\n           right by  a semicolon.    If a  keyword requires  a list  of\n           values, the values in the list are separated by a comma.\n0             Keywords may be  abbreviated by specifying enough  of the\n           keyword so that it is unambiguous.  In cases where an entire\n           keyword is  the same as  the first  few letters of  a longer\n           keyword, ambiguity is resolved by picking the first keyword.\n           In describing  DYNAM keywords below the  unambiguous portion\n           of the keyword is written in uppercase.\n0             An attempt has  been made to minimize the  number of key-\n           words that require values.\n-\n           ALLOC\n+          ALLOC\n+          _____\n0             This operation is equivalent to dataset allocation during\n           job step  initialization;  the  parameter list  to DYNAM  is\n           equivalent to a DD statement.   You  can request most of the\n           JCL services that you can code on a DD statement.   In addi-\n           tion you can  specify dataset passwords which do  not have a\n           JCL equivalent.   The following is  a list of JCL parameters\n           and the equivalent DYNAM keyword.\n0               DD card parameter      DYNAM keyword\n+               __ ____ _________      _____ _______\n                COPIES=num             COPies=num\n                DCB=(*.ddname)         DCBDD=ddname\n                DCB=(dsname)           DCBDS=dsname\n                DCB=(BLKSIZE=num)      BLKsize=num\n                DCB=(BUFALN=key)       BUFAln=key  (key = D|F)\n                DCB=(BUFIN=num)        BUFIN=num\n                DCB=(BUFL=num)         BUFL=num\n                DCB=(BUFMAX=num)       BUFMAX=num\n                DCB=(BUFNO=num)        BUFNo=num\n                DCB=(BUFOFF=num)       BUFOFf=num\n                DCB=(BUFOUT=num)       BUFOUt=num\n                DCB=(BUFRQ=num)        BUFRq=num\n0                                     - 3 -\n1\n-\n-               DCB=(BUFSIZE=num)      BUFSize=num\n                DCB=(BUFTEK=key)       BUFTEK=key  (key = A|E|R|S)\n                DCB=(CODE=key)         CODe=key  (key = A|B|C|F|I|N|T)\n                DCB=(DEN=2)            D800\n                DCB=(DEN=3)            D1600\n                DCB=(DEN=4)            D6250\n                DCB=(DIAGNS=TRACE)     TRAce\n                DCB=(DSORG=key)        DSORG=key  (key = CX|DA|DAU|GS|\n                                                         PO|PS|PSU|TQ|\n                                                         TX|TCAM|VSAM)\n                DCB=(EROPT=ABE)        ABE\n                DCB=(EROPT=ACC)        ACC\n                DCB=(EROPT=SKP)        SKp\n                DCB=(KEYLEN=num)       KEYlen=num\n                DCB=(LIMCT=num)        LImct=num\n                DCB=(LRECL=num)        LRecl=num\n                DCB=(MODE=key)         MODE=key  (key = C|CO|CR|E|EO|ER)\n                DCB=(NCP=num)          NCP=num\n                DCB=(OPTCD=key)        OPTCD=key  (see note 1 below)\n                DCB=(PRTSP=key)        PRTsp=key  (key = 0|1|2|3)\n                DCB=(RECFM=key)        RECFM=key  (see note 2 below)\n                DCB=(RECFM=F)          F\n                DCB=(RECFM=FA)         FA\n                DCB=(RECFM=FAS)        FAS\n                DCB=(RECFM=FB)         FB\n                DCB=(RECFM=FBA)        FBA\n                DCB=(RECFM=FBAS)       FBAS\n                DCB=(RECFM=FBM)        FBM\n                DCB=(RECFM=FBS)        FBMS\n                DCB=(RECFM=FM)         FM\n                DCB=(RECFM=FMS)        FMS\n                DCB=(RECFM=FS)         FS\n                DCB=(RECFM=U)          U\n                DCB=(RECFM=V)          V\n                DCB=(RECFM=VA)         VA\n                DCB=(RECFM=VAS)        VAS\n                DCB=(RECFM=VB)         VB\n                DCB=(RECFM=VBA)        VBA\n                DCB=(RECFM=VBAS)       VBAS\n                DCB=(RECFM=VBM)        VBM\n                DCB=(RECFM=VBMS)       VBMS\n                DCB=(RECFM=VBS)        VBS\n                DCB=(RECFM=VM)         VM\n                DCB=(RECFM=VMS)        VMS\n                DCB=(RECFM=VS)         VS\n                DCB=(STACK=num)        STACK=num\n                DCB=(TRTCH=key)        TRTch=key  (key = C|E|ET|T)\n                DISP=(MOD)             MOD\n                DISP=(NEW)             NEW\n                DISP=(OLD)             OLD\n                DISP=(SHR)             SHr\n                DISP=(,CATLG)          CAtlg\n                DISP=(,DELETE)         DElete\n                DISP=(,KEEP)           KEEp\n0                                     - 4 -\n1\n-\n-               DISP=(,UNCATLG)        UNCatlg\n                DISP=(,,CATLG)         CCatlg\n                DISP=(,,DELETE)        CDelete\n                DISP=(,,KEEP)          CKeep\n                DISP=(,,UNCATLG)       CUncatlg\n                DSN=...(name)          NAME=name\n                DSN=dsname             DSN=dsname\n                DUMMY                  DUMMY\n                FCB=(name)             FORms=name\n                FCB=(,ALIGN)           ALIgn\n                FCB=(,VERIFY)          VERIFYF\n                FREE=CLOSE             CLose\n                HOLD=YES               Hold\n                LABEL=(num)            DSSeq=num\n                LABEL=(EXPDT=yyddd)    Expdt=yyddd\n                LABEL=(RETPD=num)      RETpd=num\n                LABEL=(,AL)            AL\n                LABEL=(,AUL)           AUL\n                LABEL=(,BLP)           BLP\n                LABEL=(,LTM)           LTM\n                LABEL=(,NL)            NL\n                LABEL=(,NSL)           NSL\n                LABEL=(,SL)            SL\n                LABEL=(,SUL)           SUL\n                LABEL=(,,IN)           Input\n                LABEL=(,,NOPWREAD)     PASSWRite\n                LABEL=(,,OUT)          OUTput\n                LABEL=(,,PASSWORD)     PASSRead\n                MSVGP=name             MSVGP=name\n                OUTLIM=num             OUTLim=num\n                QNAME=name             QNAME=name\n                SPACE=(num)            BLOck=num\n                SPACE=(CYL)            CYL\n                SPACE=(TRK)            TRK\n                SPACE=(,(num))         PRIMary=num\n                SPACE=(,(,num))        SECondary=num\n                SPACE=(,(,,num))       DIRectory=num\n                SPACE=(,,RLSE)         RLse\n                SPACE=(,,,ALX)         ALX\n                SPACE=(,,,CONTIG)      CONtig\n                SPACE=(,,,MXIG)        MXIG\n                SPACE=(,,,,ROUND)      ROund\n                SYSOUT=name            SYSOUt=name\n                SYSOUT=(,name)         SYSOUProg=name\n                SYSOUT=(,,name)        SYSOUForms=name\n                TERM=TS                TErmfile\n                UCS=(,FOLD)            FOLdmode\n                UCS=(,,VERIFY)         VERIFYC\n                UNIT=name              UNIT=name\n                UNIT=(,num)            UNICount=num\n                UNIT=(,P)              PARallel\n                VOL=(,,num)            VOLSeq=num\n                VOL=(,,,num)           VOLCount=num\n                VOL=(,,,,REF=name)     VOLRef=name\n0                                     - 5 -\n1\n-\n-               VOL=(,,,,SER=(name))   VOLume=name\n                VOL=(PRIVATE)          PRIVate\n0               note 1:  For a complete listing of possible values\n                for the  OPTCD parameter refer  to the  IBM manual\n                OS/VS2 JCL.\n0               note 2:  In  addition to the stand  alone keywords\n                for Fixed, Undefined,  and Variable record formats\n                others may  be coded by  using the  RECFM=key key-\n                word.   For  a complete listing  refer to  the IBM\n                manual OS/VS2 JCL.\n0               Others                 DYNAM keyword\n+               ______                 _____ _______\n                DDNAME on DD card      DD=name\n                PASSWORD               PASSWOrd=password\n                /*ROUTE dest           REMOTE=dest\n                assign the permanently\n                allocated attribute to\n                this resource          PERManent\n                assign the convertible\n                attribute to this\n                resource               CONVert\n0               note:  For a complete  explaination of the perman-\n                ently  allocated  attribute  and  the  convertible\n                attribute refer to SPL: JOB MANAGEMENT.\n-\n           ALLOCR\n+          ALLOCR\n+          ______\n0             This operation is the same  as ALLOC except that informa-\n           tion about the  allocation is to be returned  to the caller.\n           The  third parameter  to DYNAM  is  a data  area into  which\n           information is to be placed.  The fourth and subsequent par-\n           ameters are the same as  the third and subsequent parameters\n           for the ALLOC operation.\n0             The information data area has the following format:\n0               DCL 1 RETURN_AREA UNALIGNED,\n                  2 DDNAME          CHAR (8),\n                  2 DSNAME          CHAR (44),\n                  2 DSORG           BIT (16),\n                  2 VOLSER          CHAR (6);\n0               DDNAME, DSNAME, and VOLSER are self explanatory.\n                DSORG is one of:\n                    x'0000' - dsorg cannot be determined\n                    x'0004' - TR\n                    x'0008' - VSAM\n                    X'0020' - TQ\n                    X'0040' - TX\n0                                     - 6 -\n1\n-\n-                   X'0080' - GS\n                    X'0200' - PO\n                    X'0300' - POU\n                    X'0400' - MQ\n                    X'0800' - CQ\n                    X'1000' - CX\n                    X'2000' - DA\n                    X'2100' - DAU\n                    X'4000' - PS\n                    X'4100' - PSU\n                    X'8000' - IS\n                    X'8100' - ISU\n-\n           UNALLOC\n+          UNALLOC\n+          _______\n0             This operation unallocates a dataset  by DD name or data-\n           set name.  The following is a list of JCL parameters and the\n           equivalent DYNAM keyword.\n0               DD card parameter      DYNAM keyword\n+               __ ____ _________      _____ _______\n                DISP=(,CATLG)          CAtlg\n                DISP=(,DELETE)         DElete\n                DISP=(,KEEP)           KEEp\n                DISP=(,UNCATLG)        UNCatlg\n                DSN=...(name)          NAME=name\n                DSN=dsname             DSN=dsname\n0               Others                 DYNAM keyword\n+               ______                 _____ _______\n                DDNAME on DD card      DD=name\n                change SYSOUT class    NEWClass=name\n                put SYSOUT output\n                into the hold queue    NEWHold\n                take SYSOUT output\n                out of the hold queue  NEWNohold\n                change SYSOUT\n                routing                NEWRemote=name\n                unallocate the\n                resource even if\n                permanently allocated  UNAlloc\n                remove the in-use\n                attribute even if\n                permanently allocated  REMOVe\n-\n           CONCAT AND UNCONCAT\n+          CONCAT AND UNCONCAT\n+          ______ ___ ________\n0             These two operations concatenate  and unconcatenate data-\n           sets.  The datasets can only be identified by using DD names\n           of datasets currently  allocated so therefore the  only key-\n           word needed in the third parameter to DYNAM is DD=name.   To\n-                                     - 7 -\n1\n-\n-          concatentate  you  provide   a  list  of  DD   names,   e.g.\n           DD=SYSLIB,FILE2,FILE3.   The contenation  is then identified\n           by the  first DD name in  the list.   To  unconcatenate just\n           provide DD=name.\n-\n           INFO\n+          INFO\n+          ____\n0             This operation requests information retrieval.  The third\n           parameter to  DYNAM is  a data  area into  which information\n           will be placed.    The fourth and subsequent  parameters are\n           operands that  specify the allocations about  which informa-\n           tion is to be retrieved.\n0             The information data area has the following format:\n0               DCL 1 INFORMATION UNALIGNED,\n                  2 DDNAME        CHAR (8),\n                  2 DSNAME        CHAR (44),\n                  2 MEMBER        CHAR (8),\n                  2 STATUS        BIT (8),\n                  2 DISP          BIT (8),\n                  2 COND_DISP     BIT (8),\n                  2 DSORG         BIT (16),\n                  2 LIMIT         FIXED BIN (15),\n                  2 ATTRIBUTE     BIT (8),\n                  2 LAST_ENTRY    BIT (8),\n                  2 TYPE          BIT (8);\n0               DDNAME DSNAME and MEMBER are self explanatory.  If\n                no member is allocated then the contents of MEMBER\n                will be unchanged.\n                STATUS,  DISP  and COND_DISP are the  same respec-\n                tively as those  specified in the DISP  operand in\n                JCL.\n                STATUS is one of:\n                    X'01' - OLD\n                    X'02' - MOD\n                    X'04' - NEW\n                    X'08' - SHR\n                DISP is one of:\n                    X'01' - UNCATLG\n                    X'02' - CATLG\n                    X'04' - DELETE\n                    X'08' - KEEP\n                    X'10' - PASS\n                COND_DISP is one of:\n                    X'01' - UNCATLG\n                    X'02' - CATLG\n                    X'04' - DELETE\n                    X'08' - KEEP\n                DSORG is one of:\n                    x'0000' - dsorg cannot be determined\n0                                     - 8 -\n1\n-\n-                   x'0004' - TR\n                    x'0008' - VSAM\n                    X'0020' - TQ\n                    X'0040' - TX\n                    X'0080' - GS\n                    X'0200' - PO\n                    X'0300' - POU\n                    X'0400' - MQ\n                    X'0800' - CQ\n                    X'1000' - CX\n                    X'2000' - DA\n                    X'2100' - DAU\n                    X'4000' - PS\n                    X'4100' - PSU\n                    X'8000' - IS\n                    X'8100' - ISU\n                LIMIT is  the number of  allocations that  must be\n                freed before a new allocation can be made.\n                ATTRIBUTE is one of:\n                    X'80' - permanently concatenated attribute\n                    X'40' - in-use attribute\n                    X'20' - permanently allocated attribute\n                    X'10' - convertible attribute\n                    X'08' - dynamically allocated attribute\n                LAST_ENTRY indicates if this is  the last entry in\n                the list of allocations for  this job.  It has the\n                values:\n                    X'80' - if last entry\n                    X'00' - otherwise\n                TYPE is one of:\n                    X'80' - DUMMY data set\n                    X'40' - terminal\n                    X'00' - otherwise\n0             The following DYNAM keywords are supported:\n0               Purpose               DYNAM keyword\n+               _______               _____ _______\n                select an allocation\n                by DD name            DD=name\n                select an allocation\n                by DSN name           DSN=name\n                select an allocation\n                by a relative number  RELNO=num\n-\n           EXCEPTIONAL CONDITIONS\n+          EXCEPTIONAL CONDITIONS\n+          ___________ __________\n0             DYNAM returns a  condition code in registers 15  and 0 as\n           well as in  the second word of  the workarea if one  is pro-\n           vided.   The  use of register 15  allows a COBOL  program to\n           interrogate the return code through the COBOL special regis-\n           ter RETURN-CODE and allows the same  for PLI through the use\n-                                     - 9 -\n1\n-\n-          of  the pseudo  function PLIRETV.    The use  of register  0\n           allows FORTRAN and  PASCAL to call DYNAM as  a function that\n           returns an integer result.  If  the actual allocation fails,\n           then messages are written to the job log and the return code\n           from SVC 99 is returned to the user.  If DYNAM itself fails,\n           then the return code is a DYNAM return code.\n0               SVC 99 Return Codes\n                  00 successful allocation\n                  04 environment, resource, or system routine failure\n                  08 request denied by installation validation routine\n                  12 invalid SVC 99 parameter list\n                DYNAM Return Codes\n                  16 invalid verb (parameter 2)\n                  20 invalid keyword (parameter 3)\n                  24 work area overflow\n                  28 invalid value keyword\n-\n           EXAMPLES\n+          EXAMPLES\n+          ________\n0          1) In PLI allocate a new dataset:\n                DCL WORK    FIXED BIN(31) INIT(0);\n                DCL PLIRETV BUILTIN;\n                DCL DYNAM   ENTRY OPTIONS (ASSEMBLER,RETCODE);\n                FETCH DYNAM;\n                CALL DYNAM(WORK, 'INIT ');\n                CALL DYNAM(WORK, 'ALLOC ', 'DSN=USERID.DATA NEW CATLG;',\n                                           'VOL=USER01;',\n                                           'TRK PRIMARY=1 SECONDARY=1;',\n                                           'LRECL=80 BLKSIZE=6080 FB;')\n                IF PLIRETV = 0 THEN\n                    code to execute upon success of allocation\n                ELSE\n                    code to execute upon failure of allocation\n0          2) In COBOL allocate an exsisting dataset to ddname SYSIN:\n                01  DY-STUFF.\n                    02  DY-WORK         PIC S9(9) COMP SYNC VALUE +0.\n                    02  DY-WORK         PIC X(5) VALUE 'INIT '.\n                    02  DY-ALLOC        PIC X(6) VALUE 'ALLOC '.\n                    02  DY-TEXT         PIC X(100).\n                    . . .\n                PROCEDURE DIVISION.\n                    CALL 'DYNAM' USING DY-WORK DY-INIT.\n                    . . .\n                    MOVE 'DSN=A0011.AA.T999D DD=SYSIN SHR;' TO\n                         DY-TEXT.\n                    CALL 'DYNAM' USING DY-WORK DY-ALLOC DY-TEXT.\n                    IF RETURN-CODE = ZERO THEN\n                        whatever\n                    ELSE\n                        do something to recover gracefully.\n0                                     - 10 -\n1\n-\n-          3) In PLI allocate a concatenation:\n                . . .\n                CALL DYNAM(WORK, 'INIT ');\n                . . .\n                CALL DYNAM(WORK, 'ALLOC ', 'DSN=SYS1.USERLINK;',\n                                           'DD=SYSLIB SHR;');\n                CALL DYNAM(WORK, 'ALLOC ', 'DSN=SYS1.LINKUMW;',\n                                           'DD=FILE2 SHR;');\n                CALL DYNAM(WORK, 'CONCAT ', 'DD=SYSLIB,FILE2;');\n0          4)    Other  sample programs are  available in a  PDS called\n           SYS4.DYNAM.SAMPLES.  The programs included are:\n0                DYASM    - an assembler program to test DYNAM\n                 DYLISTA  - an assembler program to list allocated datasets\n                 DYCOB    - a cobol program that allocates cobol datasets\n                 DYPLI    - a pli program to test DYNAM\n                 DYFORT   - a fortran program\n-\n           LANGAUGE CONSIDERATIONS\n+          LANGAUGE CONSIDERATIONS\n+          ________ ______________\n0             In PLI remember to put in:\n                 DCL DYNAM  ENTRY OPTIONS(ASM,RETCODE);\n                 FETCH DYNAM;  /* JUST FETCH DYNAM ONCE */\n0             In FORTRAN  and PASCAL remember  to link edit  DYNAM into\n           the load module you wish to produce.  This is done by adding\n           SYS1.LINKUMW to the  SYSLIB datasets at link  edit or loader\n           time.\n-\n-\n-\n-\n-\n-\n-\n-\n                                      - 11 -\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EPUTL": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00Q\\x01\\x185/\\x01\\x19!O\\x129\\x00\\xcb\\x00\\xcb\\x00\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2018-12-18T00:00:00", "modifydate": "2019-08-02T12:39:51", "lines": 203, "newlines": 203, "modlines": 1, "user": "SBGOLOB"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*  CLEANED A BIT  . . . 08/17\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATER  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUMENTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFORE R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nR3       EQU   3                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\n         DS    0D\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   R14,R12,12(R13)    SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES,SP=0       RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    R1,8(,R13)         OUR SAVE AREA POINTER\n         ST    R13,4(,R1)         POINTER TO CALLER'S SAVE AREA\n         LR    R13,R1             @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(,R13)        POINT TO CALLER'S RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 RC IF BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 RC IF BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(,RML)              MESSAGE LENGTH\n         STH   R15,PUTLEN               PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(,R2)       @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(,R2)               REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    R2,R13                   @OUR SAVE AREA\n         LR    R3,R15                   SAVE RETURN CODE\n         L     R13,4(,R13)              @CALLER'S SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,R3                   RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLER'S REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIXDSCB": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00W\\x01\\x01\\x18_\\x01\\x11\\x08/\\x11 \\r\\x0f\\r\\x0c\\r\\x0f\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-07-04T00:00:00", "modifydate": "2011-03-23T11:20:57", "lines": 3343, "newlines": 3340, "modlines": 3343, "user": "KBASS"}, "text": "         MACRO\n&L       $AUTHON\n&L       LA    R1,=C'AUTH'\n         SVC   245\n         MEND\n         MACRO\n&L       $AUTHOFF\n&L       LA    R1,=C'NONE'\n         SVC   245\n         MEND\n**********************************************************************\n*                                                                     *\n*        ATTR: NORENT, REUSE                                          *\n*                                                                     *\n*                       F I X D S C B                                 *\n*                                                                     *\n*     THIS IS A SYSTEM PROGRAMMER UTILITY PROGRAM DESIGNED            *\n*     TO FACILITATE THE MODIFICATION (OR REPAIR) OF DATA SET          *\n*     CONTROL BLOCKS (DSCB'S).  THIS PROGRAM DOES NOT DO              *\n*     ANY TYPE OF SECURITY VALIDATION.  CHANGES ARE MADE TO           *\n*     THE DSCB'S AS REQUESTED, WITHOUT REGARD TO THEIR                *\n*     CORRECTNESS OR APPLICABILITY TO THE SPECIFIC DATASET.           *\n*     TO SOME PERSONS (AUDITORS OR SECURITY TYPES IN PARTICULAR)      *\n*     THIS PROGRAM WILL REPRESENT ONE BIG INTEGRITY EXPOSURE.         *\n*     SOME MEANS MUST BE FOUND TO CONTROL THE AVAILABILITY            *\n*     AND USE OF THIS UTILITY.  THIS RESPONSIBILITY IS LEFT           *\n*     TO THE INDIVIDUAL SHOP TO IMPLEMENT.                            *\n*                                                                     *\n*     AUTHOR: DAVID ALAN WEAVER                                       *\n*             AMDAHL SYSTEMS ENGINEER                                 *\n*             HOUSTON LIGHTING & POWER                                *\n*                                                                     *\n*     DATE WRITTEN: NOVEMBER, 1979                                    *\n*                                                                     *\n*     RELEASE LEVEL 1.0                                               *\n*                                                                     *\n*     MODIFICATION RECORD:                                            *\n*                                                                     *\n*   MODIFIED: SAM BASS   (SJB)                                        *\n*             OCCIDENTAL PETROLEUM INC                                *\n*             BMC SOFTWARE                                            *\n*             MCLANE CO. INC                                          *\n*                                                                     *\n*     DATE    INITIALS      MODIFICATION                              *\n*   12/15/79    DAW         CHANGED TO RUN UNDER TSO AS A CP          *\n*   01/01/80    DAW         CHANGED TO REQUIRE OPER STATUS UNDER TSO  *\n*   06/29/84    SJB         CHANGE TO EXCLUDE INDEXED VTOCS AND FIX   *\n*                           DYNAMIC ALLOCATION.                       *\n*   04/29/88    SJB         CHANGE TO USE CVAF MACROS AND WORK  WITH  *\n*                           INDEX VTOCS                               *\n*   08/13/90    SJB         FIX DISASTER ERROR AFTER ENTERING A       *\n*                           NON-EXISTING DATASET NAME                 *\n*   08/13/90    SJB         ADDED RESERVE/DEQ LOGIC                   *\n*   08/01/91    SJB         ADDED SUPPORT FOR ALL NUMBER VOLSERS      *\n*                           INSERT  A 'V' AHEAD OF VOLSER             *\n*   09/12/91    SJB         ADDED RACFON AND RACFOFF COMMANDS         *\n*   03/18/92    SJB         ADDED DEQUE IF READDSCB ERROR             *\n*   03/18/92    SJB         ADDED ESTAE TO TURN OFF AUTHORIZATION     *\n*   05/08/92    SJB         MOVED VOLSTAT BACK INTO RIGHT PLACE       *\n*                           FIXED READDSCB NOT SETTING ERROR RET      *\n*   03/23/2011  SJB         Z/OS 1.9 DOES NOT HAVE CHUCMP (CHRSV3)    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* OPERATION: FIXDSCB MUST BE LINKEDITED WITH AN AUTHORIZATION         *\n*            CODE OF 1 AND PLACED IN AN AUTHORIZED LIBRARY.           *\n*                                                                     *\n*            FIXDSCB OPERATES IN ONE OF THREE MODES: BATCH, TSO, OR   *\n*            STARTED TASK.  WHEN EXECUTED AS A BATCH PROGRAM          *\n*            ALL I/O IS HANDLED THROUGH SYSIN/SYSPRINT DD             *\n*            CARDS.  WHEN EXECUTED AS A STARTED TASK ALL I/O          *\n*            IS DONE VIA WTO/WTOR THROUGH THE STARTING CONSOLE.       *\n*            WHEN EXECUTED AS A TSO COMMAND PROCESSOR ALL I/O         *\n*            IS DONE VIA TPUT/TGET TO THE TSO SESSION.                *\n*            NOTE: UNDER MVS, IF FIXDSCB IS TO BE USED UNDER TSO      *\n*                  THE NAME IT IS LINKEDITED UNDER MUST BE ADDED      *\n*                  TO THE COMMAND AUTHORIZATION TABLE (IKJEFTE2)      *\n*                  IN THE TMP (IKJEFT02).  SEE THE SPL: TSO FOR       *\n*                  DETAILS ABOUT USING AUTHORIZED COMMANDS UNDER      *\n*                  TSO.                                               *\n*                                                                     *\n*            IF AN EXECUTION PARAMETER OF \"TEST\" IS SUPPLIED          *\n*            DURING ANY EXECUTION OF FIXDSCB, NO MODIFICATIONS        *\n*            WILL BE APPLIED TO ANY DSCB.  THE PROGRAM WILL           *\n*            SIMPLY RUN THROUGH IT'S LOGIC.                           *\n*                                                                     *\n*            ALL PRIMARY COMMANDS (SEE BELOW) MUST SUPPLY             *\n*            A DATASET NAME AND THE VOLUME SERIAL ON WHICH            *\n*            IT RESIDES.  THIS CRITERIA WAS CHOSEN OVER CATALOG       *\n*            SEARCHES TO AVOID THE ACCIDENTAL MODIFICATION OF         *\n*            A DSCB OF THE SAME NAME ON ANOTHER VOLUME THAN           *\n*            INTENDED IF THE CATALOG POINTS SOMEWHERE ELSE.           *\n*            THE THEORY IS: IF YOU KNOW IT NEEDS TO BE FIXED          *\n*                           THEN YOU BETTER KNOW WHERE IT IS.         *\n*                                                                     *\n*            FIXDSCB WILL OPERATE UNDER SVS OR MVS.                   *\n*            WHEN USED UNDER MVS SOME ADDITIONAL FLEXIBILITY IS       *\n*            GAINED BY THE FACT THAT FIXDSCB WILL DYNAMICALLY ALLO-   *\n*            CATE THE SPECIFIED VOLUME IF IT CANNOT FIND A REFER-     *\n*            ENCE TO IT IN THE TIOT.  THIS ALLOWS A VERY SIMPLE       *\n*            PROC TO BE USED FOR STARTED TASK.  UNDER SVS YOU WILL    *\n*            HAVE TO INCLUDE AN ANYNAME DD CARD FOR EACH VOLUME       *\n*            YOU INTEND TO MODIFY.  FOR MVS BATCH USAGE, IT IS        *\n*            SUGGESTED THAT YOU INCLUDE AN ANYNAME DD CARD FOR        *\n*            EACH VOLUME TO BE MODIFIED TO SAVE THE OVERHEAD OF       *\n*            ALLOCATING THEM DYNAMICALLY.                             *\n*                                                                     *\n*            NOTE: IT IS ENTIRELY POSSIBLE (USING THIS UTILITY)       *\n*                  TO RENAME A DATSET TO A NAME WHICH ALREADY         *\n*                  EXIST ON THE PACK.  CAUTION SHOULD BE USED         *\n*                  WHEN DOING RENAMES TO SEE THAT THIS CONDITION      *\n*                  DOES NOT ARISE.                                    *\n*                  SUBNOTE: THIS \"FLAW\" WAS LEFT IN INTENTIONALLY.    *\n*                           I LEAVE IT TO YOUR IMAGINATION JUST HOW   *\n*                           IT COULD BE EXPLOITED CONSTRUCTIVELY.     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        A WORD OR TWO ABOUT THE SCRATCH COMMAND:                     *\n*                                                                     *\n*          THE SCRATCH PRIMARY COMMAND IS EXECUTED IN A RATHER        *\n*          UNIQUE WAY.  THE DATASET IS FIRST RENAMED TO A SPECIAL     *\n*          NAME (FIXDSCB.SCRATCH.DATASET) AND ANY EXPIRATION DATE     *\n*          AND PASSWORD FLAGS ARE SET TO ZERO.  THE RENAMED           *\n*          DATASET IS THEN SCRATCHED VIA THE SCRATCH SVC.             *\n*          THIS PROCEDURE FACILITATES SCRATCHING DATASETS WHICH       *\n*          MAY HAVE THE SAME NAME AS A DATASET WHICH IS OPEN          *\n*          (AND THUS ENQUED) ON ANOTHER PACK (SUCH AS SYS1.LINKLIB).  *\n*          THIS ALSO MAKES IT POSSIBLE TO SCRATCH A DATASET           *\n*          WHICH IS REALLY OPEN BY SOME OTHER TASK SO BE VERY         *\n*          CAUTIOUS IN USING THIS COMMAND.                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n* FIXDSCB PROGRAM INFORMATION:                                        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: TO MODIFY A DATASETS DSCB ACCORDING TO SUPPLIED           *\n*           COMMANDS.  SUPPORTED FUNCTIONS ARE:                       *\n*                                                                     *\n*           RENAME .......... RENAME A DATASET TO A NEWNAME           *\n*           PROTECT ......... TURN ON A DSCB'S PASSWORD BITS          *\n*           RACFON  ......... TURN ON A DSCB'S RACF BIT               *\n*           RACFOFF ......... TURN OFF A DSCB'S RACF BIT              *\n*           SETNOPWR ........ TURN ON A DSCB'S NOPASSWORD READ ENABLE *\n*           UNLOCK .......... TURN OFF A DSCB'S PASSWORD&RACF BIT S   *\n*           RENEW ........... RESET CREATION DATE TO CURRENT DATE     *\n*           EXPIRE .......... SWAP CREATION AND EXPIRATION DATES      *\n*           EXTEND .......... SET EXPIRATION DATE TO 99:365           *\n*           ZEROEXPD ........ SET EXPIRATION DATE TO 00:000           *\n*           SCRATCH ......... DELETE SPECIFIED DATASET                *\n*                                                                     *\n*           IN ADDITION TO THESE FUNCTIONS A NAME DEFINITION CARD     *\n*           FOLLOWED BY SUBCOMMAND CARDS PERTAINING TO THAT           *\n*           DATASET MAY BE ENTERED.  VALID SUBCOMMANDS ARE:           *\n*                                                                     *\n*           RECFM ........... RESET RECORD FORMAT TO THAT SPECIFIED   *\n*           LRECL ........... RESET LRECL TO SPECIFIED VALUE          *\n*           BLKSIZE ......... RESET BLKSIZE TO SPECIFIED VALUE        *\n*           DSORG ........... RESET DSORG TO THAT SPECIFIED           *\n*           KEYL ............ RESET KEY LENGTH TO THAT SPECIFIED      *\n*           RKP ............. RESET RELATIVE KEY POSITION             *\n*           OPTCODE ......... RESET OPTCODE VALUE (SEE JCL MANUAL)    *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*    COMMAND FORMATS ARE AS FOLLOWS:                                  *\n*                                                                     *\n* INPUT IS FREE FORM RESTRICTED ONLY THAT COMMANDS MAY BEGIN IN       *\n* COLUMN 1 OR AFTER AND SUBCOMMANDS OF THE NAME COMMAND MUST BEGIN    *\n* IN COLUMN 2 OR AFTER.                                               *\n* THE KEYWORDS VOLUME, DSNAME, AND NEWNAME MAY APPEAR IN ANY ORDER.   *\n*                                                                     *\n* AT LEAST ON KEYWORD MUST APPEAR ON THE COMMAND CARD.  COMMAND       *\n* CARDS MAY BE CONTINUED ONTO A NEW CARD. CONTINUE CARDS ARE          *\n* FREE FORMAT (COL 1-71 MAY BE USED). EMBEDDED BLANKS MAY NOT         *\n* APPEAR IN THE KEYWORD STRINGS.  COMMENTS MAY BE ENTERED ON          *\n* COMMAND CARDS BY SEPERATING THEM FROM ANY VALUES BY AT LEAST        *\n* ONE BLANK.  COMMENT CARDS MAY BE CODED BY PLACING AN ASTERISK       *\n* IN COLUMN 1.  COMMENT CARDS MAY APPEAR ANYWHERE IN THE INPUT        *\n* STREAM.                                                             *\n* NOTE: COLUMN 72 MUST CONTAIN A BLANK AT ALL TIMES                   *\n*                                                                     *\n* CARD FORMATS:                                                       *\n* RENEW   VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* RACFON  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* RACFOFF VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* PROTECT VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* UNLOCK  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* EXPIRE  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* EXTEND  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* RENAME  VOLUME=XXXXXX,DSNAME=DATASET-NAME,NEWNAME=NEW-DATASET-NAME  *\n* SCRATCH VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* NAME    VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n*     WHERE:                                                          *\n*     XXXXXX IS THE DASD VOLUME SERIAL THAT CONTAINS THE              *\n*     DATASET (DSCB) TO BE MODIFIED.                                  *\n*     DATASET-NAME IS THE NAME OF THE DATA SET (DSCB) TO              *\n*     BE MODIFIED.                                                    *\n*     NEW-DATASET-NAME IS THE NEW NAME TO BE ASSIGNED TO THE          *\n*     DATASET SPECIFIED BY THE DSNAME KEYWORD (RENAME COMMAND ONLY).  *\n*                                                                     *\n*        KEYWORDS MAY BE ABBREVIATED AS FOLLOWS:                      *\n*                                                                     *\n*           DSNAME - DSN OR D                                         *\n*           VOLUME - VOL OR V                                         *\n*           NEWNAME- NEWN OR N                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n* NAME COMMAND: SUBCOMMAND SPECIFICATIONS                             *\n*                                                                     *\n* NAME   VOLUME=XXXXXX,DSNAME=DATASET-NAME  (SEE ABOVE)               *\n*       NOTE: THE NAME CARD DEFINES A DATASET DSCB TO BE WORKED ON.   *\n*             ALL MODIFICATION CARDS THAT FOLLOW IT PERTAIN TO THAT   *\n*             DATASET UNTIL ANOTHER PRIMARY COMMAND IS ENCOUNTERED    *\n*             (RENEW, SCRATCH, EXPIRE, ETC...) OR AN END-OF-FILE      *\n*             OCCURS.                                                 *\n*                                                                     *\n*  LRECL=XXXXX    (WHERE XXXXX IS THE DESIRED LRECL)                  *\n*  BLKSIZE=XXXXX  (WHERE XXXXX IS THE DESIRED BLOCK SIZE)             *\n*  RECFM=XXXXX    (WHERE XXXXX IS THE DESIRED RECORD FORMAT)          *\n*                 (SEE RECFMTAB FOR SUPPORTED RECFM VALUES)           *\n*  DSORG=XXX      (WHERE XXX IS THE DESIRED DATASET ORGANIZATION)     *\n*                 (CAUTION: NO CHECKING IS DONE!)                     *\n*                 (SEE DSORGTAB FOR SUPPORTED DSORG VALUES)           *\n*  KEYL=XXX       (WHERE XXX IS THE DESIRED KEY LENGTH)               *\n*  RKP=XXX        (WHERE XXX IS THE DESIRED RELATIVE KEY POSITION)    *\n*  OPTCODE=X      (WHERE X IS THE DESIRED OPTCODE LETTER)             *\n*                                                                     *\n*             ONLY ONE DSNAME SUBCOMMAND IS ALLOWED PER CARD.         *\n*             IF A PARTICULAR SUBCOMMAND IN ENTERED MORE THAN         *\n*             ONCE THE LAST OCCURENCE OF THE SUBCOMMAND WILL          *\n*             BE THE ONE USED.  IF AN ERROR OCCURS DURING PROCESSING  *\n*             OF ANY SUBCOMMAND THE ENTIRE SUBCOMMAND SET             *\n*             FOR THE CURRENT NAME COMMAND WILL BE DISCARDED.         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*     R0 ..... LOCAL USAGE                                            *\n*     R1 ..... LOCAL USAGE                                            *\n*     R2 ..... LOCAL USAGE                                            *\n*     R3 ..... LOCAL USAGE                                            *\n*     R4 ..... LOCAL USAGE                                            *\n*     R5 ..... POINTER TO CARD KEYWORDS (SCAN POINTER)                *\n*     R6 ..... BAL TO CARD SCAN LOGIC (COMCARD)                       *\n*     R7 ..... ADDRESS TO BUFLIST                                     *\n*     R8 ..... ADDRESS CVAF PARAMETER                                 *\n*     R9 ..... ADDRESS DSCB DSCBAREA                                  *\n*     R10 ..... PROGRAM BASE REGISTER 1                               *\n*     R11 ..... PROGRAM BASE REGISTER 2                               *\n*     R12 ..... PROGRAM BASE REGISTER 3                               *\n*     R13 ..... SAVE AREA CHAIN POINTER                               *\n*     R14 ..... RETURN REG                                            *\n*     R15 ..... ENTRY REG                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\nBLANK    EQU   C' '\nASTERISK EQU   C'*'\nCOMMA    EQU   C','\nEQUAL    EQU   C'='\nLINES1   EQU   C' '\nLINES2   EQU   C'0'\nSIGN     EQU   X'F0'\nHEXZERO  EQU   X'00'\nHEXFOUR  EQU   X'04'\nFULLMASK EQU   X'FF'\n         SPACE 3\n*--------------------------------------------------------------------*\n*              MSGEXIT  MACRO                                        *\n*--------------------------------------------------------------------*\n*        PRINT  OFF\n         MACRO\n&NAME    MSGEXIT &SPMSG=,&MSG=,&RETURN=,&ABEND=,&RC=8\n         LCLC  &ERRID\n         LCLC  &NAMEX\n         AIF   ('&SPMSG' NE '').MSGOK\n         AIF   ('&MSG' NE '').MSGOK\n         MNOTE 8,'** ERROR - NO MESSAGE NUMBER SPECIFIED.'\n         MEXIT\n.MSGOK   ANOP\n         AIF   ('&RETURN' NE '' OR '&ABEND' NE '').RETOK\n         MNOTE 8,'** ERROR - NO RETURN LABEL OR ABEND CODE SPECIFIED.'\n         MEXIT\n.RETOK   ANOP\n         AIF   ('&NAME' NE '').NAMEOK\n&ERRID   SETC  'ERROR&MSG'\n         AGO   .IDSET\n.NAMEOK  ANOP\n&ERRID   SETC  '&NAME'\n.IDSET   ANOP\n&ERRID   DS    0H\n         ST    R15,RCSAVE\n         AIF   ('&RC' EQ '').NORC\n         AIF   ('&MSG' EQ '').SPRC\n         LA    R0,&RC\n         ST    R0,FUNCRC\n         C     R0,HIGHRC\n         BL    MSGRC&MSG\n         ST    R0,HIGHRC\nMSGRC&MSG DS   0H\n         AGO   .NORC\n.SPRC    ANOP\n&NAMEX   SETC  'SPRC'.'&SYSNDX'\n         LA    R0,&RC\n         ST    R0,FUNCRC\n         C     R0,HIGHRC\n         BL    &NAMEX\n         ST    R0,HIGHRC\n&NAMEX    DS   0H\n.NORC    ANOP\n         AIF   ('&SPMSG' NE '').DOSP\n         LA    R1,&MSG\n         STH   R1,MPLNUM\n         XC    MPLSPADR,MPLSPADR\n         AGO   .DUMPX\n.DOSP    ANOP\n         LA    R1,&SPMSG\n         ST    R1,MPLSPADR\n         XC    MPLNUM,MPLNUM\n.DUMPX   ANOP\n         BAL   R14,MSGOUT\n         AIF   ('&RETURN' EQ '').GODUMP\n         B     &RETURN\n         MEXIT\n.GODUMP  ANOP\n         ABEND &ABEND,DUMP\n         MEXIT\n         MEND\n         PRINT ON\n*--------------------------------------------------------------------*\n*              MSGSETUP MACRO                                        *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n         MSGSETUP &TEXT\n         LCLC  &SEQ\n&SEQ     SETC  'MSG'.'&SYSNDX'\nMSGTABLE CSECT\n         DC    A(&SEQ)            ADDRESS OF MESSAGE BUFFER\nMSGTEXT  CSECT\n&SEQ     DS    0F\n         DC    AL2(&SEQ.L)        LENGTH OF TEXT\n         DC    X'4000'            MCS FLAGS FOR WTO\n&SEQ.B   DC    C&TEXT\n&SEQ.L   EQU   *-&SEQ             LENGTH OF WTO MESSAGE SETUP\n         MEND\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$ERR MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$ERR\n&I       SETA  &SYSNDX\n&L       LTR   R15,R15             ANY ERROS\n         BZ    $ER&I.A              NO\n         LR    R14,R0               YES\n         BR    R14                 GOTO ERROR\n$ER&I.A  DS    0H\n         MEND\n         PRINT ON\n         EJECT\nFIXDSCB  TITLE 'FIXDSCB - A DSCB MODIFICATION UTILITY.'\nFIXDSCB  AMODE 31\nFIXDSCB  RMODE 24\nFIXDSCB  CSECT\n         SAVE  (14,12),T,'FIXDSCB_&SYSDATC._&SYSTIME.'\n         LR    R10,R15            POINT BASE REGISTER TO ENTRY POINT\n         LA    R11,2048(R10)      SET UP\n         LA    R11,2048(R11)          SECOND BASE REG\n         LA    R12,2048(R11)      SET UP\n         LA    R12,2048(R12)          THIRD BASE REG\n         USING FIXDSCB,R10,R11,R12 ESTABLISH BASE REGISTERS\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n         LR    R2,R1              SAVE ANY PARM POINTER\n         EXTRACT TSOWORD,FIELDS=(TSO) CHECK FOR TSO SESSION\n         L     R1,TSOWORD         PICK UP BYTE ADDRESS\n         TM    0(R1),X'80'        IS TSO SESSION BIT ON?\n         BO    SETUPTSO           BRANCH IF SO\n         SPACE 3\n*--------------------------------------------------------------------*\n*        EXECUTION IS BATCH OR STARTED TASK                          *\n*--------------------------------------------------------------------*\n         SPACE 3\n         LTR   R2,R2              IS ANY PARM PRESENT\n         BZ    NOPARM             BRANCH IF NOT\n         L     R1,0(R2)           LOAD PARM POINTER\n         LH    R2,0(R1)           PICK UP PARM LEN\n         LTR   R2,R2              IS LEN ZERO\n         BZ    NOPARM             BRANCH IF SO\n         C     R2,FOUR            IS LENGTH = 5\n         BNE   ERROR27            BRANCH IF NOT\n         CLC   TESTPARM,2(R1)     IS PARM 'TEST'\n         BNE   ERROR27            BRANCH IF NOT\n         OI    MASTFLAG,TESTONLY\n         B     NOPARM\n         SPACE 3\n*--------------------------------------------------------------------*\n*        EXECUTION IS AS A TSO COMMAND PROCESSOR                     *\n*--------------------------------------------------------------------*\n         SPACE 3\nSETUPTSO DS    0H\n         STAX  DEFER=YES          DISALLOW ATTENTION INTERRUPTS\n         OI    IOFLAG,TSOSESS     MARK AS TSO SESSION\n         OI    MPLIOF,TSOSESS     FLAG MPL AS WTO I/O REQUIRED\n         LR    R1,R2\n         LA    R15,72(,R13)\n         ST    R15,8(,R13)         PRECHAIN 1 SAVE AREA\n         ST    R13,4(,R15)         PRECHAIN 1 SAVE AREA\n         L     R15,=V(DSCPPL)\n         BALR  R14,R15\n         LR    R2,R1\n         ST    R2,CPPLHOLD        SAVE CPPL POINTER\n         USING CPPL,R2            ADDRESS COMMAND PROCESSOR PARM LIST\n         L     R1,CPPLPSCB        GET PSCB ADDRESS\n         USING PSCB,R1\n         TM    PSCBATR1,PSCBCTRL  DOES USER HAVE OPER AUTHORITY?\n         BNO   ERROR37            GET OUT IF NOT                    SJB\n         DROP  R1\n         L     R3,CPPLCBUF        PICK UP ADDRESS OF COMMAND BUFFER\n         USING CMDBUFR,R3         ADDRESS COMMAND BUFFER\n         LH    R1,CMDBLEN         PICK UP BUFFER LENGTH\n         S     R1,FOUR            DROP BY 4\n         CH    R1,CMDBOFF         COMPARE TO OFFSET\n*                                 IF LEN-4=OFFSET THEN NO PARMETERS\n*                                 SPECIFIED\n         BE    NOPARM\n         LH    R1,CMDBOFF         PICK UP OFFSET VALUE\n         LA    R1,4(R1,R3)        COMPUTE FIRST PARM ADDRESS\n         OC    0(4,R1),BLANKS     SHIFT TO UPPERCASE\n         TM    0(R1),X'BF'         ZERO OR BLANK\n         BE    NOPARM               YES, NOPARM\n         CLC   TESTPARM,0(R1)     IS PARM \"TEST\"\n         BNE   ERROR27            BRANCH TO ERROR IF NOT\n         OI    MASTFLAG,TESTONLY\n         B     NOPARM\n         DROP  R2\n         DROP  R3\n         EJECT\n*--------------------------------------------------------------------*\n*        INITIALIZE FOR RUN                                          *\n*--------------------------------------------------------------------*\n         SPACE 3\nNOPARM   DS    0H\n         L     R2,=A(ESTAEX)\n         ESTAE (2),CT,                                          SJB    X\n               TERM=YES,MF=(E,ESTAE)                            SJB\n         $AUTHON                                                SJB\n         MODESET KEY=ZERO,MODE=SUP\n         L     R1,X'21C'           PSAOLD (TCB)\n         L     R1,X'B4'(R1)        TCBJSCB\n         L     R1,X'15C'(R1)       JSCBACT\n         OI    X'F3'(R1),X'80'     JSCBPASS\n         MODESET KEY=NZERO,MODE=PROB                            SJB\n         SPACE 3\n         L     R1,CVTPTR          GET ADDRESS OF CVT\n         S     R1,PREFIXL         BACKUP TO START OF PREFIX\n         USING CVTFIX,R1          ADDRESS CVT AT PREFIX\n         CLC   CVTNUMB,MVSCODE    IS THIS AN MVS SYSTEM\n         BNE   NONMVS             SKIP IF NOT\n         OI    MASTFLAG,MVSSYS    TURN ON MVS FLAG\n         DROP  R1\nNONMVS   DS    0H\n         TM    IOFLAG,TSOSESS     IS THIS A TSO SESSION\n         BO    MESSAG33           BRANCH IF SO\n         SPACE 1\n         XR    R1,R1\n         USING PSA,R1             ADDRESS PSA\n         L     R1,PSAAOLD         GET OLD ASCB ADDRESS\n         DROP  R1\n         USING ASCB,R1            ADDRESS OUR ASCB\n         L     R1,ASCBCSCB        GET CSCB ADDRESS\n         DROP  R1\n         USING CHAIN,R1           ADDRESS CSCB\n*        CLI   CHUCMP,HEXZERO     IS THIS FROM A CONSOLE (STARTED TASK)\n*        BE    NOCON              BRANCH IF NOT\n         B     NOCON              Z/OS 1.9 DOESNOT HAVE CHUCMP\n         OI    IOFLAG,CONSOLE     FLAG AS CONSOLE I/O REQUIRED\n         OI    MPLIOF,CONSOLE     FLAG MPL AS WTO I/O REQUIRED\n*        MVC   CONID,CHUCMP       SAVE CONSOLE ID\n         MVC   MPLCON,CONID       SAVE CONSOLE ID IN MPL\n         B     MESSAG33           DO NOT OPEN SYSIN/SYSPRINT FOR IO\nNOCON    DS    0H\n         OPEN  (SYSIN,INPUT)\n         OPEN  (SYSPRINT,OUTPUT)\n         DROP  R1\n         EJECT\n*--------------------------------------------------------------------*\n*        GET A COMMAND CARD AND PARSE IT FOR KEYWORDS                *\n*--------------------------------------------------------------------*\n         SPACE 3\nLOOP1    DS    0H\n         NI    FLAG2,255-($ALTER)\n         BAL   R14,DEQUE           BE SURE WE ARE NOT RESERVED 08/13/90\n         BAL   R5,CARDIN\nLOOP2    DS    0H\n         MVI   MSGCC,LINES2       SET CARRIAGE CONTROL\n         BAL   R14,PUTBLANK       GO PRINT BLANK LINE\n         BAL   R14,PUTCARD        GO PRINT CARD\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    LOOP1              SKIP IF SO\n         BAL   R14,SKIPB          SKIP LEADING BLANKS ON CARD\n         LTR   R5,R5              IS CARD ALL BLANKS\n         BZ    LOOP1              BRANCH IF SO\n         XC    FUNCRC,FUNCRC      ZERO OUT FUNCTION RETURN CODE\n         MVI   DSCBNAME,BLANK     SET DSN TO OMMITTED\n         MVI   VOLUME,BLANK       SET VOL TO OMMITTED\n         MVI   COMFLAG,HEXZERO    SET COMMAND CARD FLAG TO ZEROS\n         SPACE 1\n         BAL   R6,COMCARD         PICK APART THE COMMAND CARD\n         SPACE 1\n         TM    MASTFLAG,COMBADF   WAS COMMAND INVALID\n         BO    ERROR5\n         SPACE 3\n*--------------------------------------------------------------------*\n*        CHECK THAT ALL REQUIRED KEYWORDS WERE SPECIFIED             *\n*--------------------------------------------------------------------*\n         SPACE 3\n         L     R1,CURRENTF        LOAD CURRENT FUNCTION TABLE ADRS\n         L     R1,COMTRKWL(R1)    PICK UP RKW LIST ADRS\n         LTR   R1,R1              IS RKW ADRS ZERO (NO KEYWORDS REQRD)\n         BZ    LOOPVGO            GET OUT OF LOOP IF SO\n         L     R4,0(R1)           PICK UP FIRST KWT ADRS\n         XR    R2,R2              CLEAR REGS FOR OR\n         XR    R3,R3              CLEAR REGS FOR OR\n         IC    R3,COMFLAG         PICK UP COMMAND FLAG\nLOOPRKW  DS    0H\n         LTR   R4,R4              IS KWT ADRS ZERO\n         BZ    LOOPVGO            END OF KW TESTING IF SO\n         IC    R2,4(R4)           PICK UP REQUIRED FLAG MASK\n         NR    R2,R3              TEST FOR KW SPECIFIED\n         BZ    LOOPRERR           BRANCH IF OMMITTED\n         LA    R1,4(R1)           BUMP TO NEXT RKW ADRS IN LIST\n         L     R4,0(R1)           PICK UP NEXT KWT ADRS\n         B     LOOPRKW            CONTINUE\nLOOPRERR DS    0H\n         L     R2,4(R4)           PICK ERROR ROUTINE ADRS\n         BR    R2                 BRANCH TO ERROR ROUTINE\n         EJECT\n*--------------------------------------------------------------------*\n*        COMMAND CHECKED OUT OK                                      *\n*                                                                    *\n*        FIND A DD IN TIOT THAT MATCHES VOLUME REQUESTED             *\n*        NOTE: WE MUST EXTRACT TIOT ADDRESS EACH TIME                *\n*              SINCE IT MIGHT CHANGE DUE TO DYNAMIC ALLOCATION.      *\n*--------------------------------------------------------------------*\n*\n         SPACE 3\nLOOPVGO  DS    0H\n         TM    VTOCDCB+(DCBOFLGS-IHADCB),DCBOFOPN IS IT OPEN\n         BZ    LOOPVGO2             NO, SKIP CLOSE\n         CLOSE (VTOCDCB)\nLOOPVGO2 DS    0H\n         CLI   VOLUME,BLANK        IS A VOLUME PRESENT\n         BE    NOVOL               SKIP IF NOT\n         EXTRACT TIOTADRS,FIELDS=(TIOT) GET TIOT ADDRESS\n         L     R1,TIOTADRS         PICK UP TIOT ADDRESS\n         USING TIOT,R1             ADDRESS TIOT\n         LA    R1,TIOENTRY\n         DROP  R1\n         USING TIOENTRY,R1         ADDRESS TIOT\nLOOPVOL  DS    0H\n         CLI   TIOELNGH,0          END OF TIOT?\n         BE    CKMVS               GO CHECK FOR MVS SYSTEM\n         SPACE 1\n         CLC   TIOEDDNM,=XL8'00'   ZERO  DDNAME                09/11/91\n         BE    CKMVS                YES, END OF TIOT           09/11/91\n         TM    TIOESTTA,TIOSLTYP   FREED TIOT ENTRY            09/11/91\n         BO    VOLINCR              YES, SKIP ENTRY            09/11/91\n         CLI   TIOEDDNM,C' '       IS IT DDNAME BLANKS(CONCAT) 08/13/90\n         BE    VOLINCR              YES, BYPASS                08/13/90\n         SPACE 1\n         L     R2,TIOESTTB         PICK UP TIOT ENTRY UCB ADDRESS\n         N     R2,=A(X'00FFFFFF')    CLEAR HIGH BYTE\n         BZ    VOLINCR\n         USING UCBCMSEG,R2         ADDRESS UCB\n         CLC   VOLUME,UCBVOLI      VOLUME MATCH\n         BE    FOUNDV              BRANCH IF SO\nVOLINCR  DS    0H                                              08/13/90\n         LR    R14,R15             SAVE LAST TIOT FOR DEBUGGING\n         LR    R15,R1              SAVE LAST TIOT FOR DEBUGGING\n         XR    R3,R3               CLEAR INDEX REG\n         IC    R3,TIOELNGH         PICK UP ENTRY LENGTH\n         LA    R1,0(R3,R1)         BUMP TO NEXT TIOT ENTRY\n         B     LOOPVOL             CONTINUE SEARCH\n         SPACE 2\nFOUNDV   DS    0H\n         ST    R2,UCBADDR          SAVE UCB ADDR FOR CVAF\n         MVC   VOLUNIT,UCBTYP      SAVE UNIT TYPE IN FOR LATER\n         DROP  R2\n         LA    R2,VTOCDCB          @ OF DCB\n         USING IHADCB,R2\n         MVC   DCBDDNAM,TIOEDDNM   MOVE IN DDNAME\n         B     VTOCCHK             CHECK VTOC\n         DROP  R1,R2\n         SPACE 3\nCKMVS    DS    0H\n*--------------------------------------------------------------------*\n*        CHECK FOR MVS OPERATING SYSTEM                              *\n*        IF MVS THEN DYNAMICALLY  ALLOCATE VOLUME REQUIRED           *\n*--------------------------------------------------------------------*\n         TM    MASTFLAG,MVSSYS     IS THIS MVS\n         BO    ALOCDYN              YES,ALLOCATE DYNAMICALLY\n         SPACE 1\n         TM    IOFLAG,TSOSESS      IS THIS A TSO SESSION\n         BO    ALOCDAIR            GO ALLOCATE WITH DAIR IF SO\n         B     ERROR29             CANNOT DYNAMICALLY ALLOCATE\n         SPACE 3\nALOCDYN  DS    0H\n         XC    S99F1,S99F1         CLEAR SVC 99 R11 FLAG1\n         XC    S99F2,S99F2         CLEAR SVC 99 R11 FLAG2\n         LA    R1,S99RBPTR         LOAD ADDRESS OF R11 POINTER\n         DYNALLOC\n         LTR   R15,R15             CHECK SVC 99 RETURN CODES\n         BNZ   DYNERROR            BRANCH IF BAD\n         CLC   S99ERROR,ZERO       CHECK ERROR CODE\n         BNE   DYNERROR            BRANCH IF BAD\n         B     LOOPVGO             GO RESCAN TIOT\n         SPACE 3\nVTOCCHK  DS    0H\n*--------------------------------------------------------------------*\n*              FOUND UCB, SEE IF IT IS INDEXED                       *\n*--------------------------------------------------------------------*\n         L     R2,UCBADDR          SAVE UCB ADDR FOR CVAF\n         NI    FLAG2,255-$INDEX    TURN OFF INDEX FLAG         06/29/84\n         MVC   CVAFFUNC,=CL20'VTOC-INDEXED'                    05/08/92\n         CVAFTST UCB=(R2)          ENTER CHECK FOR INDEXED VTOC\n         C     15,=F'8'            CHECK IF INDEXED VTOC\n         BL    VTOCOS              IF NOT INDEX, SKIP          06/29/84\n         BE    VTOCIX\n         ST    R15,FUNCRC          SAVE AS FUNCTION RETURN CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG8R1,DOUBLE\n         OI    SPMG8R1+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP8               ERROR\nVTOCIX   DS    0H\n         OI    FLAG2,$INDEX        INDICATE INDEX VTOC IN USE  06/29/84\nVTOCOS   DS    0H\n         B     GETJFCB             GO GET THE VTOC DCB JFCB\n         SPACE 3\n*--------------------------------------------------------------------*\n*        GET THE JFCB FOR THE DD FOUND AND OPEN THE VTOC             *\n*--------------------------------------------------------------------*\n         SPACE 3\nGETJFCB  DS    0H\n         RDJFCB (VTOCDCB,(UPDAT))  GET THE JFCB\n         LTR   R15,R15             DID WE REALLY GET IT ??\n         BNZ   ERROR1               NO\n         LA    R1,JFCBAREA         GET ADDRESS OF INTERNAL JFCB\n         USING JFCBDSCT,R1         ADDRESS JFCB\n         MVI   JFCBDSNM,HEXFOUR    FIX UP THE DSNAME\n         MVC   JFCBDSNM+1(43),JFCBDSNM          OF THE VTOC\n         OI    JFCBTSDM,JFCNWRIT   DO NOT MERGE BACK\n         OI    JFCBOPS1+4,JFCBMOD  FLAG JFCB AS MODIFIED\n         DROP  R1                  DROP JFCB ADDRESSABILITY\n         OPEN  (VTOCDCB,(UPDAT)),TYPE=J  OPEN THE VTOC\n         LA    R1,VTOCDCB          PICK UP DCB ADDRESS\n         USING IHADCB,R1           ADDRESS DCB\n         TM    DCBOFLGS,DCBOFOPN   DID OPEN WORK\n         BNO   ERROR31             BRANCH IF NOT\n         SPACE 1\n         L     R2,DCBDEBAD         DEBADDR\n         N     R2,=A(X'00FFFFFF')\n         LA    R2,DEBBASND-DEBBASIC(R2)\n         L     R2,DEBUCBAD-DEBDASD(R2) UCB ADDR\n         N     R2,=A(X'00FFFFFF')\n         ST    R2,UCBADDR          SAVE UCB ADDR FOR CVAF\n         DROP  R1\n         SPACE 2\n         CLI   DSCBNAME,BLANK      DSNAME BLANK\n         BE    NODSN                YES, SKIP\n         SPACE 3\n*--------------------------------------------------------------------*\n*        READ THE DSCB FOR DATASET FROM VTOC VIA CVAF READ           *\n*--------------------------------------------------------------------*\n         SPACE 3\n         LA    R9,DSCBAREA\n         USING DSCB,R9             ADDRESS DSCB\n         LA    R8,WCVAF\n         USING CVPL,R8             ADDRESS CVPL AREA\n         SPACE 3\n         BAL   R14,READDSCB\nCVAFTST1 DS    0H\n         $$ERR ,\n         OI    FLAG2,$CVAFDIR      CVAFDIR DONE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        FIND THE ADDRESS OF THE ROUTINE TO PROCESS THE COMMAND      *\n*        IN THE COMMAND TABLE.                                       *\n*--------------------------------------------------------------------*\n*\n         SPACE 3\nNODSN    DS    0H\nNOVOL    DS    0H\n         L     R2,CURRENTF         RELOAD FUNCTION TABLE ADDRESS\n         L     R2,COMTADR(R2)      GET ADDRESS OF COMMAND ROUTINE\n         BR    R2\n         EJECT\n*--------------------------------------------------------------------*\n*              COMMAND EXECUTION\n*--------------------------------------------------------------------*\n*\n*        RENEW THE CREATION DATE TO TODAYS DATE\n*\n*--------------------------------------------------------------------*\n         SPACE 3\nRENEW    DS    0H\n         TIME  DEC                 GET THE TIME AND DATE\n         MVC   THYMEOYR,PACK8ZRO   ZERO OUT THE YEAR\n         MVC   DAYTHYME,PACK8ZRO   ZERO OUT THE DAY\n         STH   R1,DAYTHYME+6       CONVERT TO USABLE FORMAT\n         SRL   R1,8\n         IC    R1,MASKC0\n         SRL   R1,R4\n         STH   R1,THYMEOYR+6\n         CVB   R1,DAYTHYME\n         ST    R1,DAYTHYME+4\n         CVB   R1,THYMEOYR\n         ST    R1,THYMEOYR+4\n         MVC   DS1CREDT(1),THYMEOYR+7    MOVE IN YEAR\n         MVC   DS1CREDT+1(2),DAYTHYME+6  MOVE IN DAY OF YEAR\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SWAP THE CREATION AND EXPIRATION DATE FIELDS                *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nEXPIRE   XC    DS1CREDT,DS1EXPDT  INVERT\n         XC    DS1EXPDT,DS1CREDT         TWO\n         XC    DS1CREDT,DS1EXPDT              FIELDS\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE EXPIRATION DATE TO 00:000                           *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nZEROEXPD DS    0H\n         MVC   DS1EXPDT,ZERODATE\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE EXPIRATION DATE TO 99:365                           *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nEXTEND   DS    0H\n         MVC   DS1EXPDT,MAXDATE\n         B     DSCBWRIT\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE RACF BIT ON                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nRACFON   OI    DS1DSIND,DS1IND40   RACF ON\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE RACF BIT ON                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nRACFOFF  NI    DS1DSIND,FULLMASK-DS1IND40 TURN OFF RACF BIT\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE PASSWORD PROTECTION BITS FOR FULL PROTECTION        *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nPROTECT  OI    DS1DSIND,DS1IND10\n         NI    DS1DSIND,FULLMASK-DS1IND04\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE PASSWORD PROTECTION BITS FOR READ ONLY ACCESS       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nSETNOPWR OI    DS1DSIND,DS1IND10\n         OI    DS1DSIND,DS1IND04\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE PASSWORD PROTECTION BIT OFF                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nUNLOCK   NI    DS1DSIND,FULLMASK-DS1IND10  OS PASSWORD PROTECT\n         NI    DS1DSIND,FULLMASK-DS1IND04  OS R/W PASSWORD\n         NI    DS1DSIND,FULLMASK-DS1IND40  RACF                 SJB\n         B     DSCBWRIT\n         SPACE  3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        CHANGE THE DSNAME TO A NEW NAME                             *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nRENAME   DS    0H\n         OI    FLAG2,$ALTER\n         MVC   DS1DSNAM,NEWNAME    ADD NEWDSN INDX\n         BAL   R14,ADDVIR\n         $$ERR ,\n         SPACE 3\n         MVC   DS1DSNAM,DSCBNAME   DEL OLDDSN INDX\n         BAL   R14,DELVIR\n         $$ERR ,\n         SPACE 3\n         MVC   DS1DSNAM,NEWNAME    MOVE NEWNAME INTO DSCB1\n         BAL   R14,WRITDSCB\n         $$ERR ,\n         B     CLOSEX              JUST AFTER DSCBWRIT\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*        PERFORM SCRATCH REQUEST                                     *\n*                                                                    *\n*        LOGIC: DATASET IS RENAMED TO 'FIXDSCB.SCRATCH.DATASET',     *\n*               ANY PASSWORD PROTECTION BITS ARE TURNED OFF,         *\n*               AND THE EXPIRATION DATE IS RESET TO ZERO.            *\n*               THE MODIFIED DATASET IS THEN DELETED VIA             *\n*               A SCRATCH SVC.                                       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nSCRATCH  DS    0H\n         OI    FLAG2,$ALTER\n         MVC   DS1DSNAM,TEMPNAME  MOVE TEMPNAME TO DSCB\n         NI    DS1DSIND,FULLMASK-DS1IND10 TURN OFF ANY\n         NI    DS1DSIND,FULLMASK-DS1IND04        PASSWORD BITS\n         NI    DS1DSIND,FULLMASK-DS1IND40  RACF                 SJB\n         MVC   DS1EXPDT,ZERODATE  SET EXPDT TO ZERO\n         TM    MASTFLAG,TESTONLY  IS THIS A TEST\n         BO    MESSAG28           SKIP IF SO\n         SPACE 1\n         XR    R0,R0               ZERO REG 0 FOR SCRATCH (NO UCB)\n         SCRATCH SCRLIST          SCRATCH ANY REMAINING TEMP DATASET\n         SPACE 3\n         MVC   DS1DSNAM,TEMPNAME   IX ADD TEMPNAME\n         BAL   R14,ADDVIR\n         $$ERR ,                   EXPECTS R0 = ERROR RETURN ADDR\n         SPACE 3\n         MVC   DS1DSNAM,DSCBNAME   IX DELETE DSCBNAME\n         BAL   R14,DELVIR\n         $$ERR ,                   EXPECTS R0 = ERROR RETURN ADDR\n         SPACE 3\n         MVC   DS1DSNAM,TEMPNAME   RENAME TO TEMPNAME\n         BAL   R14,WRITDSCB\n         $$ERR ,                   EXPECTS R0 = ERROR RETURN ADDR\n         CLOSE VTOCDCB             CLOSE VTOC\n         BAL   R14,DEQUE           DEQUE BEFORE SCRATCH        08/13/90\n         SPACE 1\n         XR    R0,R0               ZERO REG 0 FOR SCRATCH (NO UCB)\n         SCRATCH SCRLIST           ISSUE SCRATCH REQ. TEMPNAME\n         SPACE 1\n         LTR   R15,R15             SCRATCH WORK OK\n         BZ    FUNCMSG             BRANCH IF SO\n         SPACE 1\n*--------------------------------------------------------------------*\n*              IF SCRATCH FAILED PRINT A MESSAGE AND ABEND           *\n*--------------------------------------------------------------------*\nSCRFAIL  DS    0H\n         ST    R15,FUNCRC          SAVE AS FUNCTION RETURN CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG2R1,DOUBLE\n         OI    SPMG2R1+3,SIGN      MAKE SIGN PRINTABLE\n         LH    R15,VOLSTAT         PICK UP REASON CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG2R2,DOUBLE\n         OI    SPMG2R2+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP2              GO PRINT SPECIAL MESSAGE\n         EJECT\n*--------------------------------------------------------------------*\n*        PROCESS NAME SUBCOMMANDS                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nNAME     DS    0H\n         B     ERROR35             WRITE 'RESERVED' MSG AND GOTO NAME2\nNAME2    DS    0H\n         OI    MASTFLAG,GETSUBC    FLAG GET AS SUBCOMMAND REQUEST\n         BAL   R14,GETACARD        GO GET A SUBCOMMAND CARD\n         NI    MASTFLAG,FULLMASK-GETSUBC TURN OFF SUBC REQUEST FLAG\n         BAL   R14,SKIPB           SKIP LEADING BLANKS ON SUBCOMMAND\n         LTR   R5,R5               ALL BLANKS (IMPOSSIBLE)\n         BZ    NAME                SKIP IF SO\n         LA    R2,SUBTABLE         GET ADDRESS OF SUBCOMMAND TABLE\nSUBTCK   DS    0H\n         CLI   0(R2),BLANK         END OF TABLE?\n         BE    SUBTPRIM            BRANCH IF SO\n         L     R3,SUBTSCL(R2)      LOAD LENGTH OF SUBCOMMAND\n         BCTR  R3,0                DROP FOR EXECUTE\n         EX    R3,SUBCTEST         TEST FOR SUBCOMMAND\n         BNE   SUBTNO\n*--------------------------------------------------------------------*\n*              PRINT VALID SUBCOMMAND CARD                           *\n*--------------------------------------------------------------------*\n         MVI   MSGCC,LINES1        SET CARRIAGE CONTROL\n         BAL   R14,PUTCARD\n         L     R2,SUBTADR(R2)      LOAD ADDRESS OF ROUTINE\n         BR    R2\nSUBTNO   DS    0H\n         LA    R2,SUBTLEN(R2)      BUMP TO NEXT ENTRY\n         B     SUBTCK\n         SPACE  3\n*--------------------------------------------------------------------*\n*        CHECK IF UNKNOWN SUBCOMMAND IS REALLY A PRIMARY COMMAND     *\n*--------------------------------------------------------------------*\n         SPACE 1\nSUBTPRIM DS    0H\n         OI    MASTFLAG,PARTSCAN  SET FOR COMMAND SCAN ONLY\n         BAL   R6,COMCARD\n         NI    MASTFLAG,FULLMASK-PARTSCAN TURN OFF PARTSCAN FLAG\n         TM    MASTFLAG,COMBADF WAS COMMAND INVALID\n         BO    ERROR9\n         LA    R2,COMTABLE        GET ADDRESS OF COMMAND TABLE\nSUBTPRM2 DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    SUBTBAD            MUST BE BAD SUBCOMMAND\n         CLC   COMMAND2,0(R2)     IS THIS A PRIMARY COMMAND\n         BE    SUBTPRMF           YES, GET OUT OF LOOP\n         LA    R2,COMTLEN(R2)     BUMP TO NEXT EXTRY\n         B     SUBTPRM2\nSUBTPRMF DS    0H\n         OI    MASTFLAG,PRIMEND   FLAG NAME ENDED BY PRIMARY COMMAND\n         B     DSCBWRIT\nSUBTBAD  DS    0H\n*--------------------------------------------------------------------*\n*              PRINT INVALID SUBCOMMAND CARD                         *\n*--------------------------------------------------------------------*\n         MVI   MSGCC,LINES1       SET CARRIAGE CONTROL\n         BAL   R14,PUTCARD\n         B     ERROR9\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE OPTCODE TO THAT SPECIFIED                         *\n*--------------------------------------------------------------------*\n         SPACE 1\nOPTCODE  DS    0H\n         LA    R5,7(R5)           SKIP PAST OPTCODE KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF OPTCODE\n         MVC   OPTCODEH(1),0(R5) MOVE OPTCODE TO HOLDER\n         LA    R2,OPTCODET        GET ADDRESS OF OPTCODE TABLE\nOPTCODEL DS   0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR34            ERROR IF SO\n         CLC   OPTCODEH,0(R2)     OPTCODE MATCH TABLE ENTRY\n         BE    OPTCODEF           BRANCH IF SO\n         LA    R2,OPTCLEN(R2)     BUMP TO NEXT ENTRY\n         B     OPTCODEL\nOPTCODEF DS  0H\n         MVC   DS1OPTCD,OPTCMASK(R2) MOVE MASK BYTE TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*--------------------------------------------------------------------*\n*        RESET THE LRECL TO THE SPECIFIED VALUE                      *\n*--------------------------------------------------------------------*\n         SPACE 1\nLRECL    DS    0H\n         LA    R5,5(R5)           SKIP PAST LRECL KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF LRECL\nLRECLL1  DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    LRECLEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     LRECLL1            CONTINUE\n         SPACE 1\nLRECLEND DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,LRECLPCK        PACK THE LRECL VALUE\n         CVB   R3,DOUBLE          CONVERT LRECL TO BINARY\n         C     R3,BIGLRECL        IS LRECL TOO BIG\n         BH    ERROR10            BRANCH IF SO\n         STH   R3,DS1LRECL        STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE BLKSIZE TO THE SPECIFIED VALUE                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nBLKSIZE  DS    0H\n         LA    R5,7(R5)           SKIP PAST BLKSIZE KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF BLKSIZE\nBLKSZL1  DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    BLKSZEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     BLKSZL1            CONTINUE\n         SPACE 1\nBLKSZEND DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,BLKSZPCK        PACK THE BLKSIZE VALUE\n         CVB   R3,DOUBLE          CONVERT BLKSIZE TO BINARY\n         C     R3,BIGLRECL        IS BLKSIZE TOO BIG\n         BH    ERROR11            BRANCH IF SO\n         STH   R3,DS1BLKL         STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE RECORD FORMAT TO THAT SPECIFIED                   *\n*--------------------------------------------------------------------*\n         SPACE 1\nRECFM    DS    0H\n         LA    R5,5(R5)           SKIP PAST RECFM KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RECMF\n         MVC   RECFMH(5),0(R5)    MOVE RECFM TO HOLDER\n         LA    R2,RECFMTAB        GET ADDRESS OF RECFM TABLE\nRECFMLP  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR21            ERROR IF SO\n         CLC   RECFMH,0(R2)       RECFM MATCH TABLE ENTRY\n         BE    RECFMFND           BRANCH IF SO\n         LA    R2,RECFMLEN(R2)    BUMP TO NEXT ENTRY\n         B     RECFMLP\nRECFMFND DS    0H\n         MVC   DS1RECFM,RECFMASK(R2) MOVE MASK BYTE TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n         EJECT\n*--------------------------------------------------------------------*\n*        RESET THE DSORG TO THAT SPECIFIED                           *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSORG    DS    0H\n         LA    R5,5(R5)           SKIP PAST DSORG KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RECMF\n         MVC   DSORGH(5),0(R5)    MOVE DSORG TO HOLDER\n         LA    R2,DSORGTAB        GET ADDRESS OF DSORG TABLE\nDSORGLP  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR22            ERROR IF SO\n         CLC   DSORGH,0(R2)       DSORG MATCH TABLE ENTRY\n         BE    DSORGFND           BRANCH IF SO\n         LA    R2,DSORGLEN(R2)    BUMP TO NEXT ENTRY\n         B     DSORGLP\nDSORGFND DS    0H\n         MVC   DS1DSORG(2),3(R2)  MOVE DSORG MASK TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE KEYL TO THE SPECIFIED VALUE                       *\n*--------------------------------------------------------------------*\n         SPACE 1\nKEYL     DS    0H\n         LA    R5,4(R5)           SKIP PAST KEYL KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF KEYL\nKEYLL1   DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    KEYLEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     KEYLL1             CONTINUE\n         SPACE 1\nKEYLEND  DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,KEYLPCK         PACK THE KEYL VALUE\n         CVB   R3,DOUBLE          CONVERT KEYL TO BINARY\n         C     R3,BIGKEYL         IS KEYL TOO BIG\n         BH    ERROR23            BRANCH IF SO\n         STC   R3,DS1KEYL         STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE RELATIVE KEY POSITION TO THE SPECIFIED VALUE      *\n*--------------------------------------------------------------------*\n         SPACE 1\nRKP      DS    0H\n         LA    R5,3(R5)           SKIP PAST RKP KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RKP\nRKPL1    DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    RKPEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     RKPL1              CONTINUE\n         SPACE 1\nRKPEND   DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,RKPPCK          PACK THE RKP VALUE\n         CVB   R3,DOUBLE          CONVERT RKP TO BINARY\n         C     R3,BIGRKP          IS RKP TOO BIG\n         BH    ERROR24            BRANCH IF SO\n         STCM  R3,3,DS1RKP        STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        END THE NAME SUBCOMMAND SET                                 *\n*--------------------------------------------------------------------*\n         SPACE 3\nENDNAME  DS    0H\n         EJECT ,\n*--------------------------------------------------------------------*\n*              REWRITE THE DSCB/VIER                                 *\n*--------------------------------------------------------------------*\nDSCBWRIT DS    0H\n         SPACE 1\n         BAL   R14,WRITDSCB\n         $$ERR ,\n         SPACE 1\nCLOSEX   DS    0H                  ALSO ENTERED VIA ERRORMSG\n         TM    VTOCDCB+(DCBOFLGS-IHADCB),DCBOFOPN IS IT OPEN\n         BZ    CLOSEX2              NO, SKIP CLOSE\n         CLOSE (VTOCDCB)\nCLOSEX2  DS    0H\n         BAL   R14,DEQUE                                       08/13/90\n         SPACE 3\n*--------------------------------------------------------------------*\n*        ISSUE THE FUNCTION COMPLETED MESSAGE                        *\n*--------------------------------------------------------------------*\n         SPACE 3\nFUNCMSG  DS    0H\n         BAL   R14,RLSEVIER\n         SPACE 3\n         CLC   FUNCRC,ZERO        WAS COMMAND SUCCESSFUL\n         BE    MESSAG32           PRINT MESSAGE IF SO\nFUNCMSG2 DS    0H\n         L     R1,FUNCRC\n         CVD   R1,DOUBLE\n         UNPK  SPMG0R,DOUBLE\n         OI    SPMG0R+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP0\nFUNCMEND DS    0H\n         NI    MASTFLAG,FULLMASK-COMBADF TURN OFF ANY BAD COMMAND FLAG\n         TM    MASTFLAG,GETSUBC   DID EODAD OCCUR DURING SUBC PRCS\n         BO    CLOSE2             GET OUT IF SO\n         TM    MASTFLAG,PRIMEND   WAS A PRIMARY COMMAND FOUND\n         BNO   LOOP1              BRANCH IF NOT\n         NI    MASTFLAG,FULLMASK-PRIMEND TURN OFF FLAG\n         B     LOOP2               GOTO LOOP2\n         EJECT\n*--------------------------------------------------------------------*\n*        CLOSE THE FILES AND TERMINATE                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nEND      DS    0H\nCLOSE    DS    0H\nCLOSE01  DS    0H\n         TM    MASTFLAG,GETSUBC    WAS GET FOR A SUBCOMMAND\n         BZ    CLOSE1               NO\n         BAL   R14,WRITDSCB\n         B     FUNCMSG\nCLOSE1   DS    0H\n         TM    MASTFLAG,CARD2TRY  WAS GET FOR A CONTINUATION CARD\n         BO    ERROR25            BRANCH IF SO\nCLOSE2   DS    0H\n         L     R1,HIGHRC\n         C     R1,FUNCRC\n         BH    GOTRC\n         L     R1,FUNCRC\nGOTRC    DS    0H\n         CVD   R1,DOUBLE\n         UNPK  SPMG1R,DOUBLE\n         OI    SPMG1R+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP1             GO PRINT SPECIAL MESSAGE\nCLOSEND  DS    0H\n         TM    IOFLAG,CONSOLE     CONSOLE I/O USED\n         BO    RETURN\n         TM    IOFLAG,TSOSESS     TSO I/O USED\n         BO    RETURN\n         CLOSE SYSIN\n         CLOSE SYSPRINT\nRETURN   DS    0H\n         $AUTHON                                                SJB\n         MODESET KEY=ZERO,MODE=SUP\n         L     R1,X'21C'           PSAOLD (TCB)\n         L     R1,X'B4'(R1)        TCBJSCB\n         L     R1,X'15C'(R1)       JSCBACT\n         NI    X'F3'(R1),255-X'80' JSCBPASS\n         MODESET KEY=NZERO,MODE=PROB\n         $AUTHOFF                                               SJB\n         L     R15,HIGHRC         GET RETURN CODE\n         L     13,SAVEAREA+4      POINT TO CALLERS SAVEAREA\n         RETURN (14,12),T,RC=(15) STANDARD RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        SET UP SPECIAL MESSAGE FOR DYNAMIC ALLOCATION FAILURE       *\n*--------------------------------------------------------------------*\n         SPACE 3\nDYNERROR DS    0H\n         ST    R15,DYNRETC        STORE RETURN CODE IN HOLDER\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX R12\n         SPACE 1\n         STCM  R15,15,SPMG3R1     STORE IN MESSAGE\n         LH    R15,S99ERROR       PICK UP ERROR CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG3R2     STORE IN MESSAGE\n         LH    R15,S99INFO        PICK UP INFORMATION CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG3R3     STORE IN MESSAGE\n         MVI   DFFLAGS+1,X'32'    FLAG AS SVC99 REQUEST\n         LA    R1,S99RB\n         ST    R1,DFS99RB         STORE SVC 99 R11 ADDRS IN DF BLOCK\n         LA    R1,DFS99RB         GET ADDRESS OF DF PARM BLOCK\n         LINK  EP=IKJEFF18\n         LTR   R15,R15            EXTRACT WORK OK\n         BZ    DOS99ER\n         XC    DFBUFL1(2),DFBUFL1 CLEAR BUFFER LENGTH OF DF MSG\n         XC    DFBUFL2(2),DFBUFL2 CLEAR BUFFER LENGTH OF DF MSG\n         B     ERROR12\nDOS99ER  DS    0H\n         MVI   DFBUF01,X'40'      SET DF BUFFERS INTO WTO FORMAT\n         MVI   DFBUF01+1,X'00'\n         MVI   DFBUF02,X'40'\n         MVI   DFBUF02+1,X'00'\n         B     ERROR12\n         EJECT\n*--------------------------------------------------------------------*\n*        PARSE A COMMAND CARD FOR KEYWORDS                           *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMCARD  DS    0H\n         MVC   COMMAND,BLANKS     BLANK OUT COMMAND NAME HOLDER\n         MVC   COMMAND2,BLANKS    BLANK OUT COMMAND NAME HOLDER\n         LR    R3,R5              GET START OF CARD\n         LA    R4,9               SET MAX COMMAND NAME LENGTH\nCOMCLOOP DS    0H\n         CLI   0(R3),BLANK        BLANK?\n         BE    COMCEND            YES, END OF COMMAND NAME\n         CLI   0(R3),EQUAL        INVALID =?\n         BE    COMBAD             YES, FLAG AS BAD\n         LA    R3,1(R3)           BUMP TO NEXT CARD COLUMN\n         BCT   R4,COMCLOOP\n         B     COMBAD             GO FLAG AS BAD\nCOMCEND  DS    0H\n         LA    R4,1(R3)           SAVE ADDRESS OF NEXT BYTE\n         SR    R3,R5              SUBTRACT TO GEN COMMAND LENGTH\n         ST    R3,COMLEN          SAVE LENGTH OF COMMAND\n         BCTR  R3,0               DROP FOR EXECUTE\n         TM    MASTFLAG,PARTSCAN  COMMAND SCAN ONLY?\n         BO    COMMOVE2\n         EX    R3,COMMOVE         MOVE IN COMMAND NAME\n         B     COMPRECK\n         SPACE 1\nCOMMOVE2 DS    0H\n         EX    R3,COM2MOVE        MOVE IN COMMAND NAME\n         BR    R6\n         SPACE 1\nCOMBAD   DS    0H\n         OI    MASTFLAG,COMBADF SET BAD COMMAND FLAG\n         BR    R6\n         SPACE 3\n*\n*        CHECK THE COMMAND VERB FOR ONE THAT WE RECOGNIZE.\n*\n         SPACE 3\nCOMPRECK DS    0H                 SEARCH FOR A KEYWORD AFTER COMMAND\n         LA    R2,COMTABLE        GET ADDRESS OF COMMAND TABLE\nCOMPREF  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    COMBAD             ERROR IF SO\n         CLC   COMMAND,0(R2)      IS THIS THE COMMAND\n         BE    COMKEYSR           YES, GET OUT OF LOOP\n         LA    R2,COMTLEN(R2)     BUMP TO NEXT EXTRY\n         B     COMPREF\n         SPACE 3\n*\n*        SEARCH THE CARD FOR KEYWORDS\n*\n         SPACE 3\nCOMKEYSR DS    0H\n         ST    R2,CURRENTF        SAVE TABLE ENTRY ADDRESS\n         LA    R1,71              LOAD TOTAL CARD LENGTH - 1\n         S     R1,COMLEN          SUBTRACT OFF COMMAND LENGTH\nCOMKEYSX DS    0H                 SEARCH FOR A KEYWORD AFTER COMMAND\n*                                 ONLY KEYWORDS ALLOWED ARE:\n*                                   DSNAME=, DSN=, D=\n*                                   VOLUME=, VOL=, V=\n*                                   NEWNAME=, NEWN=, NN=, N=\n*\n         SPACE 1\n         LR    R5,R4              SAVE ADDRESS OF POSSIBLE KEYW START\n         CLI   0(R4),BLANK        BLANK?\n         BNE   COMCKWT            NO\n         LA    R4,1(R4)           BUMP TO NEXT COL\n         BCT   R1,COMKEYSX\n         SPACE 1\n*        THE REST OF THE CARD WAS BLANK.  IS THIS AN ERROR?\n         L     R2,COMTRKWL(R2)    PICK UP KWT LIST ADDRESS\n         LTR   R2,R2              IS IT ZERO (NO KEYWORDS REQUIRED)\n         BZR   R6                 RETURN IF SO\n         B     ERROR38            ERROR IF NOT\n         SPACE 3\n*\n*        TEST IF ANY OF THE REQUIRED KEYWORDS MATCHE THE KEYWORD FOUND\n*\n         SPACE 3\nCOMCKWT  DS    0H\n         L     R2,COMTRKWL(R2)    PICK UP REQUIRED KEYWORD LIST ADRS\n         LTR   R2,R2              ANY KEYWORDS REQUIRED\n         BZ    COMCOPTS           CHECK FOR OPTIONAL KEYWORDS\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         STM   R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\nCOMCKEY  DS    0H\n         LM    R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\nCOMCKEY2 DS    0H\n         LTR   R3,R3              IS NEXT KWT ADDRESS ZERO\n         BZ    COMCOPTS           GO LOOK FOR OPTIONAL KEYWORDS\n         L     R14,0(R3)          PICK UP RTN ADDRESS\n         LA    R3,8(R3)           BUMP TO LIST PROPER\n         XR    R1,R1              CLEAR REG 1 FOR LENGTH\nCOMCKEYL DS    0H\n         IC    R1,0(R3)           PICK UP LENGTH\n         LTR   R1,R1              END OF KWT\n         BNZ   COMCKEYM           BRANCH IF NOT\n         LA    R2,4(R2)           BUMP TO NEXT KWT SLOT\n         L     R3,0(R2)           PICK UP NEXT KWT ADDRESS\n         B     COMCKEY2           PROCESS NEXT KWT\nCOMCKEYM DS    0H\n         BCTR  R1,0               DROP FOR EXECUTE\n         EX    R1,KEYWTEST        COMPARE FOR KEYWORD MATCH\n         BNE   COMCNOM            BRANCH TO ROUTINE IF MATCH\n         L     R2,CURRENTF        RELOAD CURRENT FUNCTION TABLE ADRS\n         L     R2,COMTRKWL(R2)    RESER RKW LIST TO START\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         BR    R14                BRANCH TO ROUTINE\nCOMCNOM  DS    0H\n         LA    R3,2(R1,R3)        BUMP TO NEXT ENTRY IN KWT\n         B     COMCKEYL\n         SPACE 5\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SINCE THE KEYWORD DOES NOT MATCH A REQUIRED KEYWORD         *\n*        SEE IF IT MAY BE AN OPTIONAL KEYWORD.                       *\n*                                                                    *\n*        NOTE: NO OPTIONAL KEYWORDS ARE DEFINED IN THIS RELEASE.     *\n*              THIS FACILITY WAS BUILT IN FOR FUTURE COMPATIBILITY   *\n*              TO ANY NEW FUNCTIONS.                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMCOPTS DS    0H\n         L     R2,CURRENTF        PICK UP CURRENT TABLE ENTRY ADRS\n         L     R2,COMTOKWL(R2)    PICK UP OPTIONAL KEYWORD LIST ADRS\n         LTR   R2,R2              IS IT ZERO (NO OPTIONAL KEYWORDS)\n         BZ    ERROR20            ERROR IF SO\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\nCOMOKEY  DS    0H\nCOMOKEY2 DS    0H\n         LTR   R3,R3              IS NEXT KWT ADDRESS ZERO\n         BZ    ERROR20            BAD KEYWORD IF SO\n         L     R14,0(R3)          PICK UP RTN ADDRESS\n         LA    R3,8(R3)           BUMP TO LIST PROPER\n         XR    R1,R1              CLEAR REG 1 FOR LENGTH\nCOMOKEYL DS    0H\n         IC    R1,0(R3)           PICK UP LENGTH\n         LTR   R1,R1              END OF KWT\n         BNZ   COMOKEYM           BRANCH IF NOT\n         LA    R2,4(R2)           BUMP TO NEXT KWT SLOT\n         L     R3,0(R2)           PICK UP NEXT KWT ADDRESS\n         B     COMOKEY2           PROCESS NEXT KWT\nCOMOKEYM DS    0H\n         BCTR  R1,0               DROP FOR EXECUTE\n         EX    R1,KEYWTEST        COMPARE FOR KEYWORD MATCH\n         BNE   COMONOM            BRANCH TO ROUTINE IF MATCH\n         L     R2,CURRENTF        RELOAD CURRENT FUNCTION TABLE ADRS\n         L     R2,COMTOKWL(R2)    RESER OKW LIST TO START\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         STM   R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\n         BR    R14                BRANCH TO ROUTINE\nCOMONOM  DS    0H\n         LA    R3,2(R1,R3)        BUMP TO NEXT ENTRY IN KWT\n         B     COMOKEYL\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PROCESS THE DSNAME KEYWORD                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMDSN   DS    0H\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,DSNKEY     HAS DSN ALLREADY BEEN SPECIFIED\n         BO    ERROR13            BRANCH IF SO\n         OI    COMFLAG,DSNKEY     FLAG DSN AS SPECIFIED\n         LR    R3,R5              LOAD START OF DSNAME\n         MVI   DSCBNAME,BLANK     BLANK OUT DSNAME HOLDER\n         MVC   DSCBNAME+1(43),DSCBNAME\nCOMDSNBL DS    0H\n         CLI   0(R3),BLANK        END OF DSNAME\n         BE    COMDSNE            YES\n         CLI   0(R3),COMMA        END OF DSNAME\n         BE    COMDSNE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMDSNBL\nCOMDSNE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE DSN LENGTH\n         C     R3,FOURFOUR        LONGER THAN 44?\n         BH    ERROR14            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR14            BRANCH IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,DSNMOVE         MOVE IN DSNAME\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n         BNE   COMCKEY            BRANCH IF NOT\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R14,GETACARD       GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PROCESS THE VOLUME KEYWORD                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMVOL   DS    0H                 PROCESS VOL KEYWORD\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,VOLKEY     HAS VOL ALLREADY BEEN SPECIFIED\n         BO    ERROR15            BRANCH IF SO\n         OI    COMFLAG,VOLKEY     FLAG VOL AS SPECIFIED\n         LR    R3,R5              LOAD START OF VOLSER\n         MVC   VOLUME,BLANKS      BLANK OUT VOLSER HOLDER\nCOMVOLBL DS    0H\n         CLI   0(R3),BLANK        END OF VOLUME\n         BE    COMVOLE            YES\n         CLI   0(R3),COMMA        END OF VOLUME\n         BE    COMVOLE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMVOLBL\nCOMVOLE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE VOL LENGTH\n         C     R3,SIX             LONGER THAN 6?\n         BH    ERROR16            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR16            BRANCH IF SO                 05/08/92\n         C     R3,=F'6'           LESS THAN ONE                05/08/92\n         BH    ERROR16            BRANCH IF SO                 05/08/92\n         MVC   S99DDLEN(2),=H'7'   VVOLSER                        SJB\n         MVC   S99DSLEN(2),=H'9'   &&VVOLSER                      SJB\n         MVC   DAIRDSNB(2),=H'9'   &&VVOLSER                      SJB\n         STH   R3,S99VLEN         SAVE LENGTH IN VOLSER TEXT UNIT\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,VOLMOVE         MVC   VOLUME(0),0(R5)\n         MVC   VOL,VOLUME          MOVE INTO VOL                  SJB\n         MVC   S99VTEXT(6),VOL     SVC99 VOLSER TU                SJB\n         MVC   DA08SER(6),VOL      DAIR VOLSER TU                 SJB\n         MVC   DA08DDN(7),VVOL     DAIR DDNAME TU VVOLSER         SJB\n         MVC   DAIRDSNV(7),VVOL    DAIR DSNAME TU VVOLSER         SJB\n         MVC   S99DDTXT(7),VVOL    MOVE IN DDNAME VVOLSER         SJB\n         MVC   S99DSNAM(7),VVOL    MOVE IN DSNAME VVOLSER PART    SJB\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n*                                 (IF BLANK AFTER COMMA THEN MUST BE\n*                                  CONTINUED ON NEXT CARD.)\n         BNE   COMCKEY\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R14,GETACARD       GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PROCESS THE NEWNAME KEYWORD (VALID FOR RENAME COMMAND ONLY) *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMNEWN  DS    0H                 PROCESS NEW KEYWORD\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,NEWNKEY    HAS NEW ALLREADY BEEN SPECIFIED\n         BO    ERROR17            BRANCH IF SO\n         OI    COMFLAG,NEWNKEY    FLAG NEW AS SPECIFIED\n         LR    R3,R5              LOAD START OF NEWNAME\n         MVI   NEWNAME,BLANK      BLANK OUT NEWNAME HOLDER\n         MVC   NEWNAME+1(43),NEWNAME\nCOMNEWBL DS    0H\n         CLI   0(R3),BLANK        END OF NEWNAME\n         BE    COMNEWE            YES\n         CLI   0(R3),COMMA        END OF NEWNAME\n         BE    COMNEWE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMNEWBL\nCOMNEWE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE NEW LENGTH\n         C     R3,FOURFOUR        LONGER THAN 44?\n         BH    ERROR19            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR19            BRANCH IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,NEWNMOVE        MOVE IN NEWNAME\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n         BNE   COMCKEY            BRANCH IF NOT\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R14,GETACARD       GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         EJECT\n*--------------------------------------------------------------------*\n*        GET A NEW CARD (REQUIRED CONTINUATION CARD)                 *\n*--------------------------------------------------------------------*\n         SPACE 3\nGETACARD DS    0H\n         $$SUB ,\nGCARD100 DS    0H\n         OI    MASTFLAG,CARD2TRY  FLAG AS CARD2 TRY FOR EODAD\n         BAL   R5,CARDIN          GET ANOTHER CARD\n         NI    MASTFLAG,FULLMASK-CARD2TRY TURN OFF CARD2 FLAG\n         BAL   R14,SKIPB          CHECK FOR ALL BLANKS\n         LTR   R5,R5              ALL BLANKS?\n         BNZ   GCARD200           SKIP IF NOT\n         BAL   R14,PUTCARD        PRINT BLANK CARD\n         B     GCARD100           GET ANOTHER CARD\nGCARD200 DS    0H\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    GCARDPRT           PRINT IF SO\n         TM    MASTFLAG,GETSUBC   LOOKING FOR A SUBCOMMAND\n         BNO   GCARDPRT           GO PRINT IF NOT (CONTINUATION CARD)\n         CLI   CARD,BLANK         COULD IT BE A VALID SUBCOMMAND CARD\n         BE    GETRCXX            RETURN TO CALLER IF SO\n         OI    MASTFLAG,PRIMEND   MARK NAME SET ENDED BY PRIMARY\n         NI    MASTFLAG,FULLMASK-GETSUBC TURN OFF SUBCOMMAND FLAG\n         BAL   R14,WRITDSCB\n         B     GETRC00\nGCARDPRT DS    0H\n         MVI   MSGCC,LINES1       SET CARRIAGE CONTROL\n         BAL   R14,PUTCARD\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    GCARD100           SKIP IF SO\nGCARD400 DS    0H\n         BAL   R14,SKIPB          GO SKIP THE BLANKS\n         LTR   R5,R5              ALL BLANK?\n         BZ    GCARD100           GET ANOTHER CARD IF SO\nGETRC00  DS    0H\nGETRCXX  DS    0H\n         L     R13,4(,R13)         PREV SAVE\n         ST    R5,X'28'(,R13)      STORE R5\n         RETURN (14,12),RC=0\n         SPACE 3\n*--------------------------------------------------------------------*\n*        GET A CONTROL CARD FROM SOMEWHERE (TSO, SYSIN, OR CONSOLE)  *\n*              BAL  R5,CARDIN                                        *\n*--------------------------------------------------------------------*\n         SPACE 3\nCARDIN   DS    0H\n         TM    IOFLAG,CONSOLE     CONSOLE I/O REQUIRED\n         BO    DOCONIO            BRANCH IF SO\n         TM    IOFLAG,TSOSESS     TPUT/TGET TSO I/O REQUIRED\n         BO    DOTSIO             BRANCH IF SO\n         GET   SYSIN,CARD         GET A CARD FROM SYSIN DD\n         BR    R5                 RETURN TO CALLER\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROL CARDS ARE OBTAINED FROM STARTING CONSOLE            *\n*--------------------------------------------------------------------*\n         SPACE 3\nDOCONIO  DS    0H\n         XC    WTORECB,WTORECB    CLEAR ECB\n         IC    R0,CONID           PICK UP CONSOLE IDENTIFIER\n         MVI   CARD,C' '          BLANK OUT REPLY HOLDER\n         MVC   CARD+1(79),CARD\n         TM    IOFLAG,CONTINUE    IS THIS A CONTINUE CARD\n         BO    DOCONT             BRANCH IF SO\n*--------------------------------------------------------------------*\n*        ENTER CONSOLE PROMPT FOR CONTROL CARD                       *\n*--------------------------------------------------------------------*\n         LA    R1,CARDMSGW        PICK UP MSG BUFFER ADDRESS\n         WTOR  MF=(E,(1))\n         B     DOWAIT\nDOCONT   DS    0H\n*--------------------------------------------------------------------*\n*        ENTER CONSOLE PROMPT FOR CONTINUATION OF CONTROL CARD\n*--------------------------------------------------------------------*\n         LA    R1,CONTMSGW        PICK UP MSG BUFFER ADDRESS\n         WTOR  MF=(E,(1))\n         SPACE 1\nDOWAIT   DS    0H\n         WAIT  ECB=WTORECB\n         OC    CARD,UPMASK        SHIFT TO UPPERCASE\n         BR    R5\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROL CARDS ARE OBTAINED FROM TSO CONSOLE\n*--------------------------------------------------------------------*\n         SPACE 3\nDOTSIO   DS    0H\n         MVI   CARD,C' '          BLANK OUT REPLY HOLDER\n         MVC   CARD+1(79),CARD\n         TM    IOFLAG,CONTINUE    IS THIS A CONTINUE CARD\n         BO    DOTSCONT           BRANCH IF SO\n*--------------------------------------------------------------------*\n*        ENTER TSO PROMPT FOR CONTROL CARD                           *\n*--------------------------------------------------------------------*\n         TPUT  CARDMSG,CARDMSGL\n         B     DOTSTGET\nDOTSCONT DS    0H\n*--------------------------------------------------------------------*\n*        ENTER CONSOLE PROMPT FOR CONTINUATION OF CONTROL CARD       *\n*--------------------------------------------------------------------*\n         TPUT  CONTMSG,CONTMSGL\n         SPACE 1\nDOTSTGET DS    0H\n         STAX  DEFER=NO           ALLOW ATTENTION INTERRUPTS\n         TGET  CARD,80            GET A CONTROL CARD\n         STAX  DEFER=YES          DISALLOW ATTENTION INTERRUPTS\n         OC    CARD,UPMASK        FOLD TO UPPERCASE\n         BR    R5\n         EJECT\n*--------------------------------------------------------------------*\n*        SKIP LEADING BLANKS ON CARDS                                *\n*              BAL  R14,SKIPB                                        *\n*--------------------------------------------------------------------*\n         SPACE 3\nSKIPB    DS    0H\n         LA    R5,CARD\n         LA    R1,72              LOAD COUNT MAX\nSKIPLOOP DS    0H                 SEARCH FOR FIRST NON-BLANK COL\n         CLI   0(R5),BLANK        BLANK\n         BNE   SKIPEND            BRANCH IF NOT\n         LA    R5,1(R5)           BUMP TO NEXT COL\n         BCT   R1,SKIPLOOP\n         LA    R5,0               INDICATED TOTALLY BLANK\nSKIPEND  DS    0H\n         BR    R14                RETURN TO CALLER\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PRINT CARD IMAGE                                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nPUTCARD  DS    0H\n         $$SUB ,\n         TM    IOFLAG,CONSOLE     ARE WE ON A CONSOLE\n         BO    PUTC900            DO NOT ECHO CARD BACK IF SO\n         TM    IOFLAG,TSOSESS     ARE WE A TSO SESSION\n         BO    PUTC900            DO NOT ECHO CARD BACK IF SO\n         MVI   MSGLINE,BLANK      BLANK OUT MESSAGE LINE\n         MVC   MSGLINE+1(131),MSGLINE\n         MVC   MSGLINE(80),CARD   MOVE CARD IMAGE TO MESSAGE LINE\n         PUT   SYSPRINT,MSGBUFFR  PRINT CARD IMAGE\nPUTC900  DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         SPACE 5\n*--------------------------------------------------------------------*\n*        PRINT A BLANK LINE                                          *\n*              BAL  R14,PUTBLANK                                     *\n*--------------------------------------------------------------------*\n         SPACE 3\nPUTBLANK DS    0H\n         $$SUB ,\n         TM    IOFLAG,CONSOLE     ARE WE ON A CONSOLE\n         BO    PUTB900            DO NOT PUT BLANK LINES IF SO\n         TM    IOFLAG,TSOSESS     ARE WE A TSO SESSION\n         BO    PUTB900            DO NOT PUT BLANK LINES IF SO\n         MVI   MSGLINE,BLANK      BLANK OUT MESSAGE LINE\n         MVC   MSGLINE+1(131),MSGLINE\n         PUT   SYSPRINT,MSGBUFFR  PRINT A BLANK LINE\nPUTB900  DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\n*--------------------------------------------------------------------*\n*        PRINT MESSAGE                                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nMSGOUT   DS    0H\n         $$SUB\n         STH   R1,MPLNUM\n         LA    R1,MPL\n         L     R15,VMSG\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    MSGOUTXX\n         ABEND 777,DUMP\nMSGOUTXX DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        THIS PORTION OF CODE TAKES THE HEX RETURN CODE IN REG 15    *\n*        AND CONVERTS IT TO INTEGER BINARY.                          *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nFIXDIGIT DS    0H\n         $$SUB\n         LA    R1,RCWORD+3             GET ADDRESS OF END OF WORK WORD\n         LR    R14,R15                 TRANSFER R12 TO WORK REG\n         LA    R4,4                    LOAD NUMBER OF BYTES IN R12\nFIXDLOOP DS    0H\n         SRDL  R14,4                   SHIFT 4 BITS TO R2\n         SRL   R15,28                  SHIFT R3 BITS TO LOW END\n         STC   R15,0(R1)               STORE IN BYTE IN WORK AREA\n         BCTR  R1,0                    BACK UP WORD POINTER\n         BCT   R4,FIXDLOOP             DO NEXT BYTE\n         SPACE 3\n         TR    RCWORD,FIXTABLE         TRANSLATE TO PRINTABLE HEX\n         SPACE 3\n         L     R15,RCWORD              RELOAD RETURN CODE (PRINTABLE)\n         L     R13,4(,R13)\n         RETURN (14,12),RC=(15)\n         EJECT ,\n*--------------------------------------------------------------------*\n*        ALLOCATE THE VOLUME FOR TSO SESSION USING DAIR              *\n*                                                                    *\n*        NOTE: DAIR IS USED INSTEAD OF SVC 99 TO MAINTAIN            *\n*              NON-MVS COMPATIBILITY.                                *\n*--------------------------------------------------------------------*\n         SPACE 3\nALOCDAIR DS    0H\n         XC    DECB,DECB          CLEAR DAIR ECB\n         L     R2,CPPLHOLD\n         USING CPPL,R2 ADDRESS CPPL\n         LA    R1,DAPLIST\n         USING DAPL,R1\n         MVC   DAPLUPT,CPPLUPT    MOVE IN UPT ADDRESS\n         MVC   DAPLECT,CPPLECT    MOVE IN ECT ADDRESS\n         MVC   DAPLPSCB,CPPLPSCB  MOVE IN PSCB ADDRESS\n         LINK  EP=IKJDAIR         INVOKE DAIR\n         LTR   R15,R15            DAIR WORK\n         BZ    LOOPVGO            BRANCH SO\n         SPACE 3\n*--------------------------------------------------------------------*\n*        SET UP SPECIAL MESSAGE FOR DAIR ALLOCATION FAILURE          *\n*--------------------------------------------------------------------*\n         SPACE 3\nDAIREROR DS    0H\n         ST    R15,DYNRETC        STORE DAIR RETURN CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT        GO FIX R12\n         SPACE 1\n         STCM  R15,15,SPMG4R1     STORE IN MESSAGE\n         LH    R15,DA08DARC       PICK UP ERROR CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT        GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG4R2     STORE IN MESSAGE\n         LH    R15,DA08CTRC       PICK UP CATALOG CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG4R3     STORE IN MESSAGE\n         MVI   DFFLAGS+1,X'01'    FLAG AS SVC99 REQUEST\n         LA    R1,DA08CD          PICK UP DAIR 08 BLOCK\n         ST    R1,DFDAPLP         STORE DAIR R11 ADDRS IN DF BLOCK\n         LA    R1,DFDAPLP         GET ADDRESS OF DF PARM BLOCK\n         LINK  EP=IKJEFF18\n         LTR   R15,R15            EXTRACT WORK OK\n         BZ    DODAIRER\n         XC    DFBUFL1(2),DFBUFL1 CLEAR BUFFER LENGTH OF DF MSG\n         XC    DFBUFL2(2),DFBUFL2 CLEAR BUFFER LENGTH OF DF MSG\n         B     ERROR39\nDODAIRER DS    0H\n         MVI   DFBUF01,X'40'      SET DF BUFFERS INTO WTO FORMAT\n         MVI   DFBUF01+1,X'00'\n         MVI   DFBUF02,X'40'\n         MVI   DFBUF02+1,X'00'\n         B     ERROR39\n         DROP  R2\n         DROP  R1\n         EJECT\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              READ A DSCB                                           *\n*        R15=  0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nREADDSCB DS    0H\n         $$SUB ,\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         MVC   WCVAF(CVAFL),CVAF\n         SPACE 1\n         XC    BUFLIST(BFLHLN+BFLELN),BUFLIST   ZERO BUFFERLIST\n         OI    BFLHFL,BFLHDSCB     RETURN DSCBS NOT VIRS\n         MVI   BFLHNOE,1           1 BUFFER\n         MVI   BFLELTH,DSCBLTH2    BUFFER LEGNTH\n         LA    R0,DS1FMTID\n         ST    R0,BFLEBUF          @ OF BUFFER\n         OI    BFLEFL,BFLECHR      RETURN CCHHR\n         SPACE 1\n         BAL   R14,DEQUE                                       08/13/90\n         PRINT NOGEN                                           08/13/90\n         RESERVE (SYSVTOC,VOLUME,E,6,SYSTEMS),UCB=UCBADDR      08/13/90\n         PRINT GEN                                             08/13/90\n         LTR   R15,R15                                         08/13/90\n         BNZ   RDSCBRES                                        08/13/90\n         OI    FLAG2,$RESERVE                                  08/13/90\n         MVC   DS1DSNAM,DSCBNAME\n         L     R2,UCBADDR          UCB ADDR\n         MVC   CVAFFUNC,=CL20'DSCB-READ'                       05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=READ,                                          X\n               DSN=DS1DSNAM,       READ OUR DSN                        X\n               UCB=(R2),                                               X\n               BUFLIST=BUFLIST,                                        X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         SPACE 3\n         CL    R15,=F'4'           CVAF TO DSN OK\n         BL    RDSCBR00             YES,\n         BH    RDSCBRNN             NO, CVAF ERROR\n         USING CVPL,R1\n         CLI   CVSTAT,STAT001      DATASET NOT FOUND\n         BE    RDSCBR04             YES, DSN NOT FOUND\n         B     RDSCBRNN            OTHER CVAF ERROR\n         DROP  R1\nRDSCBR00 DS    0H\n         B     RDSCRC00\nRDSCBR04 DS    0H                  DSN NOT FOUND\n         LA    R0,ERROR2           MESSAGE TO WRITE\n         B     RDSCRCXX\nRDSCBRNN DS    0H                  OTHER ERRORS\n         LA    R0,ERROR3           MESSAGE TO WRITE\n         B     RDSCRCXX\nRDSCBRES DS    0H                  RESERVE FAILED\n         LA    R0,ERROR44          MESSAGE TO WRITE\n         B     RDSCRCXX\n         DROP  R7\n         SPACE 3\nRDSCRC00 DS    0H\n         SLR   R15,R15             ZERO RC\n         SLR   R0,R0               ZERO ERROR                  05/08/92\nRDSCRCXX DS    0H\n         L     R5,4(,R13)                                      05/08/92\n         STM   R15,R0,X'10'(R5)    SAVE R15,R0 INTO SAVEAREA   05/08/92\n         BAL   R14,DEQUE           DEQUE IF ERROR               3/18/92\n         L     R13,4(,R13)\n         RETURN (14,12)            REG15 AND R0 PRESET         05/08/92\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              WRITE A DSCB                                          *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nWRITDSCB DS    0H\n         $$SUB ,\n         SPACE 1\n         TM    FLAG2,$ALTER\n         BO    WDSC0100            YES\n         CLC   COMMAND,COMNAME    NAME SUBCOMMAND SET?\n         BNE   WDSC0100           BRANCH IF NOT\n         TM    COMFLAG,REWRITE    WAS DSCB MODIFIED\n         BNO   WDSCRC30           DO NOT WRITE IT IF NOT\nWDSC0100 DS    0H\n         TM    MASTFLAG,TESTONLY  IS THIS A TEST\n         BO    WDSCRC28           SKIP IF SO\n         SPACE 1\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         SPACE 1\n         LA    R0,DS1DSNAM\n         ST    R0,BFLEBUF          @ OF BUFFER\n         SPACE 1\n         MVI   BFLELTH,DSCBLTH     140 LENGTH\n         OI    BFLHFL,BFLHDSCB     RETURN DSCBS NOT VIRS\n         MVI   BFLHNOE,1           1 BUFFER\n         OI    BFLEFL,BFLECHR      RETURN CCHHR\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'DSCB-WRITE'                      05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=WRITE,UCB=(R2),                                X\n               BUFLIST=BUFLIST,    BUFLIST                             X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   WDSCRC04\n         B     WDSCRC00\n         SPACE 3\nWDSCRC04 DS    0H\n         LA    R0,ERROR4           CVAF DSCB WRITE FAILED\n         B     WDSCRCXX\nWDSCRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     WDSCRCXX\nWDSCRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     WDSCRCXX\n         SPACE 3\nWDSCRC00 DS    0H\n         SLR   R15,R15             ZERO\nWDSCRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                  BAL  R14,DEQUE                    *\n*--------------------------------------------------------------------*\nDEQUE    DS    0H                                              08/13/90\n         TM    FLAG2,$RESERVE                                  08/13/90\n         BZ    DEQ0100                                         08/13/90\n         DEQ   (SYSVTOC,VOLUME,6,SYSTEMS),UCB=UCBADDR          08/13/90\n         NI    FLAG2,255-$RESERVE                              08/13/90\nDEQ0100  DS    0H                                              08/13/90\n         BR    R14                 RETURN                      08/13/90\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              WRITE A VIER                                          *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nWRITVIER DS    0H\n         $$SUB ,\n         SPACE 1\n         CLC   COMMAND,COMNAME     NAME SUBCOMMAND SET?\n         BNE   WVIR0100            BRANCH IF NOT\n         TM    COMFLAG,REWRITE     WAS DSCB MODIFIED\n         BNO   WVIRRC30            DO NOT WRITE IT IF NOT\nWVIR0100 DS    0H\n         TM    MASTFLAG,TESTONLY   IS THIS A TEST\n         BO    WVIRRC28            SKIP IF SO\n         SPACE 1\n         L     R7,CVIRCDS          @ OF VIER BUFFER LIST\n         USING BUFLIST,R7\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'VIER-WRITE'                      05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=WRITE,UCB=(R2),                                X\n               BUFLIST=(R7),       BRANCH ENTER                        X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   WVIRRC04\n         B     WVIRRC00\n         SPACE 3\nWVIRRC04 DS    0H\n*--------------------------------------------------------------------*\n*              WRITE VIER FAILED PRINT A MESSAGE                     *\n*--------------------------------------------------------------------*\n         ST    R15,FUNCRC          SAVE AS FUNCTION RETURN CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG9R1,DOUBLE\n         OI    SPMG9R1+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP9\nWVIRERR  DS    0H\n         LA    R0,ERROR4           CVAF DSCB WRITE FAILED\n         B     WVIRRCXX\nWVIRRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     WVIRRCXX\nWVIRRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     WVIRRCXX\n         SPACE 3\nWVIRRC00 DS    0H\n         SLR   R15,R15             ZERO\nWVIRRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              DELETE A DSN INDEX                                    *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nDELVIR   DS    0H\n         $$SUB ,\n         SPACE 1\n         TM    FLAG2,$INDEX        IS THIS INDEX VTOC\n         BZ    DELVRC00             NO\n         TM    FLAG2,$ALTER        ALTER DSNAME\n         BZ    DELVRC00             NO\nDELV0100 DS    0H\n         TM    MASTFLAG,TESTONLY   IS THIS A TEST\n         BO    DELVRC28            SKIP IF SO\n         SPACE 1\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'INDEX-DELETE'                    05/08/92\n         PRINT NOGEN\n         CVAFDSM ACCESS=IXDLT,UCB=(R2), DELETE DSN INDEX               X\n               DSN=DS1DSNAM,       DSNAME                              X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   DELVRC04\n         BAL   R14,WRITVIER\n         LTR   R15,R15\n         BNZ   ADDVRCXX\n         B     DELVRC00\n         SPACE 3\nDELVRC04 DS    0H\n         LA    R0,ERROR4           CVAFDSM FAILED\n         B     DELVRCXX\nDELVRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     DELVRCXX\nDELVRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     DELVRCXX\n         SPACE 3\nDELVRC00 DS    0H\n         SLR   R15,R15             ZERO\nDELVRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              ADD A DSN INDEX                                       *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nADDVIR   DS    0H\n         $$SUB ,\n         SPACE 1\n         TM    FLAG2,$INDEX        IS THIS INDEX VTOC\n         BZ    ADDVRC00             NO\n         TM    FLAG2,$ALTER        ALTER DSNAME\n         BZ    ADDVRC00             NO\nADDV0100 DS    0H\n         TM    MASTFLAG,TESTONLY   IS THIS A TEST\n         BO    ADDVRC28            SKIP IF SO\n         SPACE 1\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'VIER-ADD'                        05/08/92\n         PRINT NOGEN\n         CVAFDSM ACCESS=IXADD,UCB=(R2), ADD DSN INDEX                  X\n               DSN=DS1DSNAM,       DSNAME                              X\n               ARG=BFLEARG,        CCHHR                               X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   ADDVRC04\n         BAL   R14,WRITVIER\n         LTR   R15,R15\n         BNZ   ADDVRCXX\n         B     ADDVRC00\n         SPACE 3\nADDVRC04 DS    0H\n         LA    R0,ERROR4           CVAFDSM FAILED\n         B     ADDVRCXX\nADDVRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     ADDVRCXX\nADDVRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     ADDVRCXX\n         SPACE 3\nADDVRC00 DS    0H\n         SLR   R15,R15             ZERO\nADDVRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         SPACE 3\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              ADD A DSN INDEX                                       *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nRLSEVIER DS    0H\n         $$SUB ,\n         TM    FLAG2,$CVAFDIR      CVAFDIR DONE\n         BZ    RLSE900              NO\n         L     R2,UCBADDR          UCB ADDR\n         MVC   CVAFFUNC,=CL20'VIER-RLSE'                       05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=RLSE,UCB=(R2),                                 X\n               BUFLIST=0,          RELEASE AREAS                       X\n               IOAREA=NOKEEP,                                          X\n               IXRCDS=NOKEEP,                                          X\n               MAPRCDS=NO,                                             X\n               BRANCH=(YES,PGM),                                       X\n               MF=(E,WCVAF)\n         PRINT GEN\nRLSE900  DS    0H\n         L     R13,4(,R13)         PREV SAVE\n         RETURN (14,12),RC=0\n         EJECT ,\n         EJECT\n*--------------------------------------------------------------------*\n*        INFORMATION AND ERROR MESSAGE NODE POINTS\n*--------------------------------------------------------------------*\n         PRINT NOGEN\n         SPACE 1\n*--------------------------------------------------------------------*\n*\n* A MESSAGE NODE IS BUILT BY THE MSGEXIT MACRO.\n*        IT MACRO REQUIRES THE SEQUENCE NUMBER OF\n*        THE MESSAGE TO BE PRINTED, A RETURN LABEL OR ABEND\n*        CODE (BUT NOT BOTH), AND AN OPTIONAL RETURN CODE.\n*        THE RETURN CODE DEFAULTS TO 8 AND SETS THE FUNCTION\n*        IN PROGRESS RETURN CODE.\n*\n*--------------------------------------------------------------------*\n         SPACE 1\n* SPECIAL EXECUTION MESSAGES (RETURN CODES, ETC.)\nMSGSP0   MSGEXIT SPMSG=SPMG0WTO,RETURN=FUNCMEND,RC=\nMSGSP1   MSGEXIT SPMSG=SPMG1WTO,RETURN=CLOSEND,RC=\nMSGSP2   MSGEXIT SPMSG=SPMG2WTO,RETURN=ERROR36,RC=\nMSGSP3   MSGEXIT SPMSG=SPMG3WTO,RETURN=MSGSP5\nMSGSP4   MSGEXIT SPMSG=SPMG4WTO,RETURN=MSGSP5\nMSGSP5   MSGEXIT SPMSG=SPMG5WTO,RETURN=MSGSP6\nMSGSP6   MSGEXIT SPMSG=SPMG6WTO,RETURN=CLOSEX\nMSGSP8   MSGEXIT SPMSG=SPMG8WTO,RETURN=CLOSEND,RC=\nMSGSP9   MSGEXIT SPMSG=SPMG9WTO,RETURN=WVIRERR,RC=\n         SPACE 1\n* NORMAL EXECUTION MESSAGES\nMESSAG28 MSGEXIT MSG=28,RETURN=CLOSEX,RC=0\nMESSAG32 MSGEXIT MSG=32,RETURN=FUNCMSG2,RC=0\nMESSAG33 MSGEXIT MSG=33,RETURN=LOOP1,RC=0\nMESSAG35 MSGEXIT MSG=35,RETURN=NAME2,RC=0\nERROR28  EQU   MESSAG28\nERROR32  EQU   MESSAG32\nERROR33  EQU   MESSAG33\nERROR35  EQU   MESSAG35\n         SPACE 1\n* ERROR AND EXCEPTION MESSAGES\nERROR1   MSGEXIT MSG=1,ABEND=991\nERROR2   MSGEXIT MSG=2,RETURN=CLOSEX   DSN NOT FOUND\nERROR3   MSGEXIT MSG=3,ABEND=998       CVAF READ\nERROR4   MSGEXIT MSG=4,ABEND=999       CVAF WRITE\nERROR5   MSGEXIT MSG=5,RETURN=CLOSEX\nERROR6   MSGEXIT MSG=6,RETURN=CLOSEX\nERROR7   MSGEXIT MSG=7,RETURN=CLOSEX\nERROR8   MSGEXIT MSG=8,RETURN=CLOSEX\nERROR9   MSGEXIT MSG=9,RETURN=NAME\nERROR10  MSGEXIT MSG=10,RETURN=CLOSEX\nERROR11  MSGEXIT MSG=11,RETURN=CLOSEX\nERROR12  MSGEXIT MSG=12,RETURN=MSGSP3,RC=\nERROR13  MSGEXIT MSG=13,RETURN=CLOSEX\nERROR14  MSGEXIT MSG=14,RETURN=CLOSEX\nERROR15  MSGEXIT MSG=15,RETURN=CLOSEX\nERROR16  MSGEXIT MSG=16,RETURN=CLOSEX\nERROR17  MSGEXIT MSG=17,RETURN=CLOSEX\nERROR18  MSGEXIT MSG=18,RETURN=CLOSEX\nERROR19  MSGEXIT MSG=19,RETURN=CLOSEX\nERROR20  MSGEXIT MSG=20,RETURN=CLOSEX\nERROR21  MSGEXIT MSG=21,RETURN=CLOSEX\nERROR22  MSGEXIT MSG=22,RETURN=CLOSEX\nERROR23  MSGEXIT MSG=23,RETURN=CLOSEX\nERROR24  MSGEXIT MSG=24,RETURN=CLOSEX\nERROR25  MSGEXIT MSG=25,RETURN=ERROR26\nERROR26  MSGEXIT MSG=26,RETURN=CLOSE2\nERROR27  MSGEXIT MSG=27,RETURN=CLOSE,RC=12\n*MSG28   USED  ABOVE\nERROR29  MSGEXIT MSG=29,RETURN=CLOSEX\nERROR30  MSGEXIT MSG=30,RETURN=CLOSEX,RC=4\nERROR31  MSGEXIT MSG=31,ABEND=992\n*MSG32   USED  ABOVE\n*MSG33   USED  ABOVE\nERROR34  MSGEXIT MSG=34,RETURN=CLOSEX\n*MSG35   USED  ABOVE\nERROR36  MSGEXIT MSG=36,ABEND=997\nERROR37  MSGEXIT MSG=37,RETURN=CLOSE,RC=12\nERROR38  MSGEXIT MSG=38,RETURN=CLOSEX\nERROR39  MSGEXIT MSG=39,RETURN=MSGSP4,RC=\nERROR40  MSGEXIT MSG=40,RETURN=MSGSP4,RC=\nERROR41  MSGEXIT MSG=41,RETURN=CLOSEX     CVAF VIER DSN NOT FOUND\nERROR42  MSGEXIT MSG=42,ABEND=998         CVAF VIER READ FAILURE\nERROR43  MSGEXIT MSG=43,ABEND=999         CVAF VIER WRITE FAILURE\nERROR44  MSGEXIT MSG=44,ABEND=944         RESERVE FAILED\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MESSAGES                                              *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SPECIAL MESSAGES (REQUIRE RETURN CODES OR MODIFICATION)     *\n*                                                                    *\n*          SPECIAL MESSAGES ARE CONSTRUCTED AS A VALID WTO           *\n*          REMOTE PARAMETER LIST (MF=L).  SPECIAL MESSAGES           *\n*          ARE PRINTED VIA THE 'SPMG' PARAMETER OF THE               *\n*          MSGEXIT MACRO.                                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\n         PRINT GEN\n         SPACE 1\nSPMG0WTO DS    0F                 MESSAGE 0 WTO FORMAT\n         DC    AL2(SPMG0L)\n         DC    X'4000'\nSPMG0    DC    C' FDB9998I **** FUNCTION PROCESSING COMPLETE.  RETURN CX\n               ODE IS '\nSPMG0R   DC    CL4'0000'\n         DC    C'.'\nSPMG0L   EQU   *-SPMG0WTO\n         SPACE 2\nSPMG1WTO DS    0F                 MESSAGE 1 WTO FORMAT\n         DC    AL2(SPMG1L)\n         DC    X'4000'\nSPMG1    DC    C' FDB9999I **** ALL PROCESSABLE FUNCTIONS COMPLETE.  HIX\n               GHEST RETURN ENCOUNTERED WAS '\nSPMG1R   DC    CL4'0000'\n         DC    C'.'\nSPMG1L   EQU   *-SPMG1WTO\n         SPACE 2\nSPMG2WTO DS    0F                 MESSAGE 2 WTO FORMAT\n         DC    AL2(SPMG2L)\n         DC    X'4000'\nSPMG2    DC    C' FDB9997D **** DISASTER - SCRATCH FAILED AFTER DUMMY RX\n               ENAME.  SCRATCH RETURN CODE = '\nSPMG2R1  DC    CL4'0000'\n         DC    C'.  REASON CODE = '\nSPMG2R2  DC    CL4'0000'\n         DC    C'.'\nSPMG2L   EQU   *-SPMG2WTO\n         SPACE 2\nSPMG3WTO DS    0F                 MESSAGE 3 WTO FORMAT\n         DC    AL2(SPMG3L)\n         DC    X'4000'\nSPMG3    DC    C' FDB9996D **** ERROR - RETURN CODE = '\nSPMG3R1  DC    CL4'0000'\n         DC    C',  ERROR CODE = '\nSPMG3R2  DC    CL4'0000'\n         DC    C',  INFORMATION CODE= '\nSPMG3R3  DC    CL4'0000'\n         DC    C'.'\nSPMG3L   EQU   *-SPMG3WTO\n         SPACE 2\nSPMG4WTO DS    0F                 MESSAGE 4 WTO FORMAT\n         DC    AL2(SPMG4L)\n         DC    X'4000'\nSPMG4    DC    C' FDB9995D **** ERROR - RETURN CODE = '\nSPMG4R1  DC    CL4'0000'\n         DC    C',  ERROR CODE = '\nSPMG4R2  DC    CL4'0000'\n         DC    C',  CATALOG CODE= '\nSPMG4R3  DC    CL4'0000'\n         DC    C'.'\nSPMG4L   EQU   *-SPMG4WTO\n         SPACE 2\nSPMG8WTO DS    0F                  MESSAGE 4 WTO FORMAT\n         DC    AL2(SPMG8L),X'4000'\nSPMG8    DC    C' FDB9995D **** ERROR - CVAFTST    FAILED, RETURN CODE=X\n               '\nSPMG8R1  DC    CL4'0000'\nSPMG8L   EQU   *-SPMG8WTO\n         SPACE 2\nSPMG9WTO DS    0F                  MESSAGE 4 WTO FORMAT\n         DC    AL2(SPMG9L),X'4000'\nSPMG9    DC    C' FDB9994D **** ERROR - WRITE VIER FAILED, RETURN CODE=X\n               '\nSPMG9R1  DC    CL4'0000'\nSPMG9L   EQU   *-SPMG9WTO\n         SPACE 2\n         EJECT\n*--------------------------------------------------------------------*\n*              SPECIAL WTOR MESSAGE BUFFERS                          *\n*--------------------------------------------------------------------*\n         SPACE 3\nCARDMSGW DS    0F                 CARD MESSAGE WTOR FORMAT HEADDER\n         DC    AL1(80)            REPLY LENGTH\n         DC    AL3(CARD)          ADDRESS IF REPLY BUFFER\n         DC    A(WTORECB)         ADDRESS OF EVENT CONTROL BLOCK\n         DC    AL2(CARDMSGL)      LENGTH OF MESSAGE\n         DC    X'4000'            MCS FLAGS\nCARDMSG  DC    C' FDB9990R **** ENTER FIXDSCB CONTROL CARD'\nCARDMSGL EQU   *-CARDMSG\nCONTMSGW DS    0F                 CONT MESSAGE WTOR FORMAT HEADDER\n         DC    AL1(80)            REPLY LENGTH\n         DC    AL3(CARD)          ADDRESS IF REPLY BUFFER\n         DC    A(WTORECB)         ADDRESS OF EVENT CONTROL BLOCK\n         DC    AL2(CONTMSGL)      LENGTH OF MESSAGE\n         DC    X'4000'            MCS FLAGS\nCONTMSG  DC    C' FDB9991R **** CONTINUE FIXDSCB CONTROL CARD'\nCONTMSGL EQU   *-CONTMSG\n         EJECT\n*--------------------------------------------------------------------*\n*        REMOTELY EXECUTED INSTRUCTIONS\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMMOVE  MVC   COMMAND(0),0(R5)   MOVE IN COMMAND NAME (EXECUTED)\nCOM2MOVE MVC   COMMAND2(0),0(R5)  MOVE IN COMMAND NAME (EXECUTED)\nDSNMOVE  MVC   DSCBNAME(0),0(R5)  MOVE IN DSNAME       (EXECUTED)\nNEWNMOVE MVC   NEWNAME(0),0(R5)   MOVE IN NEW DSNAME   (EXECUTED)\nVOLMOVE  MVC   VOLUME(0),0(R5)    MOVE IN VOLSER       (EXECUTED)\nRECMOVE  MVC   RECFMH(0),0(R5)    MOVE IN RECORD FORMAT(EXECUTED)\nLRECLPCK PACK  DOUBLE,0(0,R5)     PACK IN LRECL VALUE  (EXECUTED)\nBLKSZPCK EQU   LRECLPCK           PACK IN BLKSIZE VALUE(EXECUTED)\nRKPPCK   EQU   LRECLPCK           PACK IN RKP VALUE    (EXECUTED)\nKEYLPCK  EQU   LRECLPCK           PACK IN KEYL VALUE   (EXECUTED)\nSUBCTEST CLC   0(0,R2),0(R5)      TEST FOR SUBCOMMAND  (EXECUTED)\nKEYWTEST CLC   1(0,R3),0(R5)      TEST FOR KEYWORD     (EXECUTED)\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CONSTANTS                                             *\n*--------------------------------------------------------------------*\n         SPACE 3\nZERO     DC    F'0'\nONE      DC    F'1'\nFOUR     DC    F'4'\nSIX      DC    F'6'\nFOURFOUR DC    F'44'\nBIGLRECL DC    F'32768'\nBIGKEYL  DC    F'255'\nPREFIXL  DC    F'256'\nBIGRKP   DC    F'32767'\nVMSG     DC    V(FIXDMSGR)\nUPMASK   DC    CL80' '            MASK FOR UPPERCASE CONVERSION\nTESTPARM DC    CL4'TEST'\nBLANKS   DC    CL8' '\nPACK8ZRO DC    PL8'0'\nSCRTCH   DC    CL8'SCRATCH'\nCOMNAME  DC    CL8'NAME'\nMVSCODE  DC    C'03'\nMAXDATE  DC    X'63016D'          DATE = 99:365 (IN HEX)\nZERODATE DC    X'000000'          DATE = 00:000 (IN HEX)\nMASKC0   DC    X'C0'\n*--------------------------------------------------------------------*\n*        TRANSLATION TABLE FOR MAKING RETURN CODES PRINTABLE HEX.    *\n*--------------------------------------------------------------------*\n         SPACE 1\nFIXTABLE DS    0F\n         DC    C'0123456789ABCEF'                              05/08/92\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              DYNAMIC DATA AREAS                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 2\nSAVEAREA DC    (6*9)D'0'           BLOCK OF SAVE AREAS\nSAVEREGS DC    9D'0'\nMPL      DS    0F\nMPLMTT   DC    A(MSGTABLE)        ADDRESS OF MESSAGE TABLE\nMPLDCB   DC    A(SYSPRINT)        ADDRESS OF DCB\nMPLSPADR DC    A(0)               ADDRESS OF SPECIAL MESSAGE\nMPLNUM   DC    H'0'               MESSAGE NUMBER TO BE PRINTED\nMPLIOF   DC    X'0'               MPL I/O FLAG\nMPLCON   DC    X'0'               MPL CONSOLE ID\nCARD     DC    CL80' '            INPUT CARD IMAGE\nHIGHRC   DC    F'0'               HIGHEST RETURN CODE ENCOUNTERED\nFUNCRC   DC    F'0'               CURRENT FUNCTION RETURN CODE\nTSOWORD  DS    A                  ADDRESS OF EXTRACTED TSO INDICATOR\nTIOTADRS DS    A                  EXTRACTED TIOT ADDRESS\nCPPLHOLD DS    A                  TSO CPPL ADDRESS\nTHYMEOYR DC    D'0'               YEAR COMPUTATION HOLDER\nDAYTHYME DC    D'0'               DAY COMPUTATION HOLDER\nDOUBLE   DC    D'0'               PACKING WORD\nCURRENTF DC    F'0'               ADDRESS OF CURRENT FUNCTION T/ENTRY\nCOMLEN   DC    F'0'               LENGTH OF COMMAND\nCOMMAND  DC    CL8' '             CURRENT COMMAND\nCOMMAND2 DC    CL8' '             POSSIBLE NEW COMMAND DURING NAME\nRECFMH   DC    CL5' '             RECORD FORMAT HOLDER\nOPTCODEH DC    C' '               OPT CODE HOLDER\nDSORGH   DC    CL3' '             DATASET ORGANIZATION HOLDER\nNEWNAME  DC    CL44' '            NEW DATASET NAME HOLDER\nDSCBNAME DS    CL44\nTEMPNAME DC    CL44'FIXDSCB.SCRATCH.DATASET'\nSYSVTOC  DC    CL8'SYSVTOC'\n         SPACE 1\n* MASTER FLAG FOR ENTIRE RUN\nMASTFLAG DC    X'00'\nTESTONLY EQU   X'80'  THIS RUN IS A TEST ONLY (NO REWRITE OF DSCB'S)\nCARD2TRY EQU   X'40'  THIS GET FOR A CONTINUATION OR SUBCOMMAND CARD\nGETSUBC  EQU   X'20'  THIS GET FOR A SUBCOMMAND CARD\nPRIMEND  EQU   X'10'  PRIMARY ENCOUNTERED DURING SUBCOMMAND PROCESSING\nPARTSCAN EQU   X'08'  SCAN CARD FOR COMMAND ONLY\nCOMBADF  EQU   X'04'  SCANNED COMMAND CONTAINED AN = SIGN\nMVSSYS   EQU   X'02'  SYSTEM IS AN MVS RELEASE (SVC 99 AVAILABLE)\n         SPACE 1\n* FUNCTION FLAG FOR ONE FUNCTION REQUEST\nCOMFLAG  DC    X'00'\nDSNKEY   EQU   X'80'  THE DSN KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nVOLKEY   EQU   X'40'  THE VOLUME KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nNEWNKEY  EQU   X'20'  THE NEWNAME KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nREWRITE  EQU   X'01'  THE DSCB HAS BEEN MODIFIED AND MUST BE WRITTEN\n         SPACE 1\n* I/O TYPE INDICATOR FLAG\nIOFLAG   DC    X'00'\nCONSOLE  EQU   X'80'  ALL I/O MUST BE WTO/WTOR TO STARTING CONSOLE\nCONTINUE EQU   X'40'  CONTINUE CARD REQUIRED\nTSOSESS  EQU   X'20'  ALL I/O MUST BE TPUT/TGET TO TSO\n         SPACE 1\nFLAG2    DC    X'00'                                           06/29/84\n$INDEX   EQU   X'80'               INDEX VTOC IN USE           06/29/84\n$CVAFDIR EQU   X'40'               CVAFDIR ISSUES\n$ALTER   EQU   X'20'               ALTERING DATASET NAME\n$RESERVE EQU   X'10'               RESERVE DONE                08/13/90\n         DS    0F\nEXITLIST DC    X'87',AL3(JFCBAREA) READ JFCB EXIT\n*\nJFCBAREA DS    0D,CL176           INTERNAL JFCB AREA\nDSCBAREA DS    0D,148C            OBTAIN WORK AREA\nVIERAREA DS    0D,CL(VXHRLEN)\n*\nESTAE    ESTAE ,CT,PARAM=0,                                     SJB    X\n               TERM=YES,MF=L                                    SJB\nESTAEL   EQU   *-ESTAE                                          SJB\n*\nVOLIST   DC    H'1'         ----+  14 BYTES                    05/08/92\nVOLUNIT  DC    X'00000000'      |  VOLUME UNIT TYPE FROM UCB   05/08/92\nVOLUME   DC    CL6' '           |  VOLSER (BLANKS FOR DDNAME STUFF\nVOLSTAT  DC    H'0'         <<--+  SCRATCH STATUS CODE         05/08/92\n*\nVVOL     DC    C'V',CL6' '\nVOL      EQU   VVOL+1,6\n*\nRCSAVE   DC    F'0'               SAVE AREA FOR REG 15 DURING MSG RTNS\nRCWORD   DC    F'0'               WORK WORD FOR R12 FIXING FOR PRINT\nCVAFFUNC DC    CL20' '                                         05/08/92\nMSGBUFFR DS    0CL133\nMSGCC    DC    C' '\nMSGLINE  DC    CL132' '\nCONID    DC    X'00'    CONSOLE ID FOR STARTED TASK I/O VIA WTO\nWTORECB  DC    F'0'     ECB FOR WTOR REPLY WAIT\nDECB     DC    F'0'     ECB FOR DAIR\nVTOCDDN  DC    CL8' '\nUCBADDR  DC    F'0'\nDAIRDSNB DC    H'9'\n         DC    X'5050'\nDAIRDSNV DC    CL42' '\n         EJECT ,\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MACRO EXPANSIONS                                      *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\n*--------------------------------------------------------------------*\n*        REMOTE CAMLIST MACRO EXPANSION                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0D\nDSCBADDR CAMLST SEARCH,DSCBNAME,VOLUME,DSCBAREA\n         SPACE 1\n         DC    5D'0'\nSCRLIST  CAMLST SCRATCH,TEMPNAME,,VOLIST\n         DC    5D'0'\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CVAF AREAS                                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nWBUFDSCB DC    0CL(BUFLEN)' ',(BUFLEN)X'00'\n         SPACE 3\nCVAF     CVAFDIR MF=L,             CVAFDIR VIR                  XXXXXXXX\n               MAPRCDS=YES,                                     XXXXXXXX\n               IOAREA=KEEP,                                     XXXXXXXX\n               IXRCDS=KEEP\nCVAFL EQU      *-CVAF              LENGTH\nWCVAF DC       0CL(CVAFL)' ',(CVAFL)X'00'\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DATA CONTROL BLOCKS (DCB'S)                                 *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\nVTOCDCB  DCB   MACRF=(E),DSORG=DA,DDNAME=DDNAME,EXLST=EXITLIST\nSYSPRINT DCB   MACRF=(PM),DDNAME=SYSPRINT,RECFM=FBA,LRECL=133,         X\n               BLKSIZE=1330,DSORG=PS\nSYSIN    DCB   MACRF=(GM),DDNAME=SYSIN,DSORG=PS,EODAD=CLOSE\n         PRINT GEN\n*--------------------------------------------------------------------*\n*        LITERALS (IF ANY)                                           *\n*--------------------------------------------------------------------*\n         SPACE 3\n         LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION (DAIR08) CONTROL BLOCK\n*--------------------------------------------------------------------*\n         SPACE 3\nDAPLIST  DS    0F\n         DC    A(0,0)\n         DC    A(DECB)\n         DC    A(0)\n         DC    A(DAIR08)\n         SPACE 3\nDAIR08   DS    0F\nDA08CD   DC    X'0008'\nDA08FLG  DC    X'0000'\nDA08DARC DC    X'0000'\nDA08CTRC DC    X'0000'\nDA08PDSN DC    A(DAIRDSNB)\nDA08DDN  DC    CL8' '\nDA08UNIT DC    CL8'SYSALLDA'\nDA08SER  DC    CL6' '\n         DC    CL2' '\nDA08BLK  DC    A(80)\nDA08PQTY DC    A(1)\nDA08SQTY DC    A(0)\nDA08DQTY DC    A(0)\nDA08MNM  DC    CL8' '\nDA08PSWD DC    CL8' '\nDA08DSP1 DC    X'04'\nDA08DSP2 DC    X'04'\nDA08DSP3 DC    X'04'\nDA08CTL  DC    X'40'\nDA08RSV  DC    AL3(0)\nDA08DSO  DC    X'00'\nDA08ALN  DC    CL8' '\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION (SVC 99) CONTROL BLOCKS                  *\n*--------------------------------------------------------------------*\n         SPACE 3\n         DS    0F                 MOVE TO FULL WORD BOUNDARY\nS99RBPTR DC    X'80',AL3(S99RB)   SVC 99 REQUEST BLOCK POINTER\n         SPACE 1\nS99RB    DS    0F                 SVC 99 REQUEST BLOCK\n         DC    AL1(20)            R11 LENGTH\n         DC    AL1(01)            VERB 01 = DSNAME ALLOCATION (TEMP)\nS99F1    DC    AL2(0)             FLAGS1\nS99ERROR DC    AL2(0)             ERROR CODES\nS99INFO  DC    AL2(0)             INFORMATION CODES\n         DC    A(S99TUPL)         TEXT UNIT POINTER LIST\n         DC    A(0)               RESERVED\nS99F2    DC    A(0)               FLAGS2\n         SPACE 1\nS99TUPL  DS    0F                 SVC 99 TEXT UNIT POINTER LIST\n         DC    A(S99DSN)          DSNAME TEXT UNIT\n         DC    A(S99DDN)          DDNAME TEXT UNIT\n         DC    A(S99VOL)          VOLUME TEXT UNIT\n         DC    A(S99DSTAT)        DATASET STATUS TEXT UNIT\n         DC    A(S99DISP)         DATASET DISPOSITION\n         DC    A(S99UNIT)         UNIT NAME TEXT UNIT\n         DC    A(S99TRACK)        DATASET TRACK TEXT UNIT\n         DC    A(S99SPACE)        DATASET SPACE TEXT UNIT\n         DC    X'80',AL3(0)       END OF LIST\n         SPACE 1\nS99DSN   DS    0F                 VOLUME TEXT UNIT\nS99DSKEY DC    X'0002'\nS99DS#   DC    X'0001'\nS99DSLEN DC    X'0009'\nS99DSTXT DC    X'5050'            TEMPORARY DSN=&&VVOLSER\nS99DSNAM DC    CL7' '\n         SPACE 1\nS99DDN   DS    0F                 DDNAME TEXT UNIT\nS99DDKEY DC    X'0001'\nS99DD#   DC    X'0001'\nS99DDLEN DC    X'0008'\nS99DDTXT DC    CL8' '\n         SPACE 1\nS99VOL   DS    0F                 VOLUME TEXT UNIT\nS99VKEY  DC    X'0010'\nS99V#    DC    X'0001'\nS99VLEN  DC    X'0006'\nS99VTEXT DC    CL6' '\n         SPACE 1\nS99DSTAT DS    0F                 DS STATUS TEXT UNIT\nS99DKEY  DC    X'0004'\nS99D#    DC    X'0001'\nS99DLEN  DC    X'0001'\nS99DTEXT DC    X'01'              DISP = (OLD,...)\n         SPACE 1\nS99DISP  DS    0F                 DISP=  (...,DELETE)\nS99DIKEY DC    X'0005'\nS99DI#   DC    X'0001'\nS99DILEN DC    X'0001'\nS99DITXT DC    X'04'\n         SPACE 1\nS99UNIT  DS    0F                 UNIT NAME TEXT UNIT\nS99UKEY  DC    X'0015'\nS99U#    DC    X'0001'\nS99ULEN  DC    X'0008'\nS99UTEXT DC    CL8'SYSALLDA'\n         SPACE 1\nS99TRACK DS    0F                 SPACE TYPE TEXT UNIT\nS99TKEY  DC    X'0007'\nS99T#    DC    X'0000'\n         SPACE 1\nS99SPACE DS    0F                 SPACE AMOUNT TEXT UNIT\nS99SPKEY DC    X'000A'\nS99SP#   DC    X'0001'\nS99SPLEN DC    X'0003'\nS99SPTXT DC    X'000000'          1 UNIT (TRACK)\n         EJECT\n*\n*        DAIRFAIL PARAMETER BLOCKS\n*\n         SPACE 3\nDFS99RB  DC    A(0)\nDFDAPLP  EQU   DFS99RB\nDFRCP    DC    A(DYNRETC)\nDFJEFF02 DC    A(ZERO)\nDFIDP    DC    A(DFFLAGS)\nDFCPPLP  DC    A(0)\nDFBUFFP  DC    A(DFBUFS)\nDYNRETC  DC    A(0)\nDFFLAGS  DC    X'4000'\nDFBUFS   DS    0F\nDFFLMSG  EQU   *\nDFBUFL1  DC    AL2(0)\nDFBUF01  DC    AL2(0)\nDFBUFT1  DC    CL251' '\nDFSLMSG  DS    0F\nDFBUFL2  DC    AL2(0)\nDFBUF02  DC    AL2(0)\nDFBUFT2  DC    CL251' '\nSPMG5WTO EQU   DFFLMSG            USE DF BUFFER FOR MESSAGE 5\nSPMG6WTO EQU   DFSLMSG            USE DF BUFFER FOR MESSAGE 6\n         EJECT\n         SPACE 3\n*--------------------------------------------------------------------*\n*        COMMAND TABLE                                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMTABLE DS    0F\n         DC    CL8'RENEW'                  RENEW COMMAND\nCOMTADR  EQU   *-COMTABLE         ADDRESS OF COMMAND ROUTINE\n         DC    A(RENEW)\nCOMTRKWL EQU   *-COMTABLE\n         DC    A(RKWLIST1)        ADDRESS OF REQUIRED KWT LIST\nCOMTOKWL EQU   *-COMTABLE\n         DC    A(0)               ADDRESS OF OPTIONAL KWT LIST\nCOMTLEN  EQU   *-COMTABLE         LENGTH OF A TABLE ENTRY\n         DC    CL8'RACFON ',A(RACFON),A(RKWLIST1),A(0)\n         DC    CL8'RACFOFF',A(RACFOFF),A(RKWLIST1),A(0)\n         DC    CL8'PROTECT',A(PROTECT),A(RKWLIST1),A(0)\n         DC    CL8'SETNOPWR',A(SETNOPWR),A(RKWLIST1),A(0)\n         DC    CL8'UNLOCK',A(UNLOCK),A(RKWLIST1),A(0)\n         DC    CL8'EXPIRE',A(EXPIRE),A(RKWLIST1),A(0)\n         DC    CL8'EXTEND',A(EXTEND),A(RKWLIST1),A(0)\n         DC    CL8'ZEROEXPD',A(ZEROEXPD),A(RKWLIST1),A(0)\n         DC    CL8'RENAME',A(RENAME),A(RKWLIST2),A(0)\n         DC    CL8'NAME',A(NAME),A(RKWLIST1),A(0)\n         DC    CL8'SCRATCH',A(SCRATCH),A(RKWLIST1),A(0)\n         DC    CL8'END',A(END),A(0),A(0)\n         DC    C' '               END OF TABLE\n         EJECT\n*--------------------------------------------------------------------*\n*        KEYWORD TABLES                                              *\n*                                                                    *\n*       A KWT IS A TABLE THAT DESCRIBES A KEYWORD AND ALL ACCEPTABLE *\n*       ABREVIATIONS OF IT.                                          *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nKWTDSN   DC    A(COMDSN)          ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(DSNKEY)        FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR6)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(7)             LENGTH\n         DC    C'DSNAME='         KEYWORD\n         DC    AL1(4)             LENGTH\n         DC    C'DSN='            ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'D='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\nKWTVOL   DC    A(COMVOL)          ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(VOLKEY)        FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR7)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(7)             LENGTH\n         DC    C'VOLUME='         KEYWORD\n         DC    AL1(4)             LENGTH\n         DC    C'VOL='            ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'V='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\nKWTNEWN  DC    A(COMNEWN)         ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(NEWNKEY)       FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR8)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(8)             LENGTH\n         DC    C'NEWNAME='        KEYWORD\n         DC    AL1(5)             LENGTH\n         DC    C'NEWN='           ABREVIATION\n         DC    AL1(3)             LENGTH\n         DC    C'NN='             ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'N='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RKWLIST'S ARE LIST OF REQUIRED KWT FOR A FUNCTION           *\n*--------------------------------------------------------------------*\n         SPACE 3\nRKWLIST1 DS    0H\n         DC    A(KWTDSN)\n         DC    A(KWTVOL)\n         DC    A(0)\n         SPACE 3\nRKWLIST2 DS    0H\n         DC    A(KWTDSN)\n         DC    A(KWTVOL)\n         DC    A(KWTNEWN)\n         DC    A(0)\n         SPACE 3\n*--------------------------------------------------------------------*\n*       SUBCOMMAND TABLE                                             *\n*--------------------------------------------------------------------*\n        SPACE 3\nSUBTABLE DS    0F\n         DC    CL8'LRECL'                  LRECL CHANGE\nSUBTADR  EQU   *-SUBTABLE         ADDRESS OF PROCESSING ROUTINE\n         DC    A(LRECL)\nSUBTSCL  EQU   *-SUBTABLE         LENGTH OF THE SUBCOMMAND NAME\n         DC    A(5)\nSUBTLEN  EQU   *-SUBTABLE         LENGTH OF A SUBC TABLE ENTRY\n         DC    CL8'BLKSIZE',A(BLKSIZE,7)   CHANGE BLKSIZE\n         DC    CL8'DSORG',A(DSORG,5)       RESET DSORG\n         DC    CL8'RECFM',A(RECFM,5)       RESET RECORD FORMAT\n         DC    CL8'KEYL',A(KEYL,4)         RESET KEY LENGTH\n         DC    CL8'RKP',A(RKP,3)           RESET REL KEY POSITION\n         DC    CL8'OPTCODE',A(OPTCODE,7)   RESET OPTCODE\n         DC    CL8'ENDNAME',A(ENDNAME,7)   END NAME SUBCOMMAND LIST\n         DC    C' '               END OF TABLE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        OPTCODE TABLE                                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nOPTCODET DS    0H\nOPTW     EQU   X'80'\nOPTU     EQU   X'40'\nOPTC     EQU   X'20'\nOPTH     EQU   X'10'\nOPTO     EQU   X'10'\nOPTQ     EQU   X'08'\nOPTZ     EQU   X'04'\nOPTT     EQU   X'02'\nOPTJ     EQU   X'01'\n         DC    C'W'\nOPTCMASK EQU   *-OPTCODET         OFFSET TO MASK BYTE IN ENTRY\n         DC    AL1(OPTW)          WRITE VALIDITY CHECK (DASD)\nOPTCLEN  EQU   *-OPTCODET\n         DC    C'U',AL1(OPTU)     ALLOW DATA CHECK (INVALID CHAR)\n         DC    C'C',AL1(OPTC)     CHAINED SCHEDULING\n         DC    C'H',AL1(OPTH)     OCR HOPPER ENPTY EXIT?\n         DC    C'O',AL1(OPTO)     OCR ON-LINE CORRECTION\n         DC    C'Q',AL1(OPTQ)     ASCII TRANSLATION REQUIRED\n         DC    C'Z',AL1(OPTZ)     REDUCED ERROR RECOVERY\n         DC    C'T',AL1(OPTT)     USER TOTALING\n         DC    C'J',AL1(OPTJ)     DYNAMIC SELECT OF TRANSLATE TAB\n         DC    C' '               END OF TABLE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DATASET ORGANIZATION TABLE                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\nDSORGTAB DS    0H\nISAM     EQU   X'8000'\nPHYSEQ   EQU   X'4000'\nDIRECT   EQU   X'2000'\nPDS      EQU   X'0200'\nUNMOVE   EQU   X'0100'\nVSAM     EQU   X'0008'\n         DC    CL3'PS ',AL2(PHYSEQ)\nDSORGLEN EQU   *-DSORGTAB\n         DC    CL3'PSU',AL2(PHYSEQ+UNMOVE)\n         DC    CL3'DA ',AL2(DIRECT)\n         DC    CL3'DAU',AL2(DIRECT+UNMOVE)\n         DC    CL3'IS ',AL2(ISAM)\n         DC    CL3'ISU',AL2(ISAM+UNMOVE)\n         DC    CL3'PO ',AL2(PDS)\n         DC    CL3'POU',AL2(PDS+UNMOVE)\n         DC    CL3'VS ',AL2(VSAM)\n         DC    C' '\n         EJECT\n*--------------------------------------------------------------------*\n*        RECORD FORMAT TABLE                                         *\n*--------------------------------------------------------------------*\n         SPACE 3\nRECFMTAB DS    0H\nFIXED    EQU   X'80'\nVARIABLE EQU   X'40'\nUNDEFINE EQU   X'C0'\nTOVRFLOW EQU   X'20'\nBLOCKED  EQU   X'10'\nFSTANDRD EQU   X'08'\nVSPANNED EQU   X'08'\nASACC    EQU   X'04'\nMCHCC    EQU   X'02'\n         DC    CL5'U    '\nRECFMASK EQU   *-RECFMTAB         OFFSET TO MASK BYTE IN ENTRY\n         DC    AL1(UNDEFINE)\nRECFMLEN EQU   *-RECFMTAB\n         DC    CL5'UT   ',AL1(UNDEFINE+TOVRFLOW)\n         DC    CL5'UA   ',AL1(UNDEFINE+ASACC)\n         DC    CL5'UM   ',AL1(UNDEFINE+MCHCC)\n         DC    CL5'UTA  ',AL1(UNDEFINE+TOVRFLOW+ASACC)\n         DC    CL5'UTM  ',AL1(UNDEFINE+TOVRFLOW+MCHCC)\n         DC    CL5'F    ',AL1(FIXED)\n         DC    CL5'FB   ',AL1(FIXED+BLOCKED)\n         DC    CL5'FS   ',AL1(FIXED+FSTANDRD)\n         DC    CL5'FT   ',AL1(FIXED+TOVRFLOW)\n         DC    CL5'FBS  ',AL1(FIXED+BLOCKED+FSTANDRD)\n         DC    CL5'FBT  ',AL1(FIXED+BLOCKED+TOVRFLOW)\n         DC    CL5'FBST ',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW)\n         DC    CL5'FA   ',AL1(FIXED+ASACC)\n         DC    CL5'FBA  ',AL1(FIXED+BLOCKED+ASACC)\n         DC    CL5'FSA  ',AL1(FIXED+FSTANDRD+ASACC)\n         DC    CL5'FTA  ',AL1(FIXED+TOVRFLOW+ASACC)\n         DC    CL5'FBSA ',AL1(FIXED+BLOCKED+FSTANDRD+ASACC)\n         DC    CL5'FBTA ',AL1(FIXED+BLOCKED+TOVRFLOW+ASACC)\n         DC    CL5'FBSTA',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW+ASACC)\n         DC    CL5'FM   ',AL1(FIXED+MCHCC)\n         DC    CL5'FBM  ',AL1(FIXED+BLOCKED+MCHCC)\n         DC    CL5'FSM  ',AL1(FIXED+FSTANDRD+MCHCC)\n         DC    CL5'FTM  ',AL1(FIXED+TOVRFLOW+MCHCC)\n         DC    CL5'FBSM ',AL1(FIXED+BLOCKED+FSTANDRD+MCHCC)\n         DC    CL5'FBTM ',AL1(FIXED+BLOCKED+TOVRFLOW+MCHCC)\n         DC    CL5'FBSTM',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW+MCHCC)\n         DC    CL5'V    ',AL1(VARIABLE)\n         DC    CL5'VB   ',AL1(VARIABLE+BLOCKED)\n         DC    CL5'VS   ',AL1(VARIABLE+VSPANNED)\n         DC    CL5'VT   ',AL1(VARIABLE+TOVRFLOW)\n         DC    CL5'VBS  ',AL1(VARIABLE+BLOCKED+VSPANNED)\n         DC    CL5'VBT  ',AL1(VARIABLE+BLOCKED+TOVRFLOW)\n         DC    CL5'VBST ',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW)\n         DC    CL5'VA   ',AL1(VARIABLE+ASACC)\n         DC    CL5'VBA  ',AL1(VARIABLE+BLOCKED+ASACC)\n         DC    CL5'VSA  ',AL1(VARIABLE+VSPANNED+ASACC)\n         DC    CL5'VTA  ',AL1(VARIABLE+TOVRFLOW+ASACC)\n         DC    CL5'VBSA ',AL1(VARIABLE+BLOCKED+VSPANNED+ASACC)\n         DC    CL5'VBTA ',AL1(VARIABLE+BLOCKED+TOVRFLOW+ASACC)\n         DC    CL5'VBSTA',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW+ASACC)\n         DC    CL5'VM   ',AL1(VARIABLE+MCHCC)\n         DC    CL5'VBM  ',AL1(VARIABLE+BLOCKED+MCHCC)\n         DC    CL5'VSM  ',AL1(VARIABLE+VSPANNED+MCHCC)\n         DC    CL5'VTM  ',AL1(VARIABLE+TOVRFLOW+MCHCC)\n         DC    CL5'VBSM ',AL1(VARIABLE+BLOCKED+VSPANNED+MCHCC)\n         DC    CL5'VBTM ',AL1(VARIABLE+BLOCKED+TOVRFLOW+MCHCC)\n         DC    CL5'VBSTM',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW+MCHCC)\n         DC    C' '\n         EJECT\n*--------------------------------------------------------------------*\n*        ERROR MESSAGE TABLE CSECTS\n*--------------------------------------------------------------------*\n         SPACE  3\n         PRINT NOGEN\nERRMSG1  MSGSETUP   ' FDB0001D **** DISASTER - READ OF JFCB FAILED.'\nERRMSG2  MSGSETUP   ' FDB0002E **** ERROR - CVAF FAILURE.    DATA SET NX\n               OT FOUND ON VOLUME SPECIFIED.  CHECK FOR SPELLING ERRORSX\n               .'\nERRMSG3  MSGSETUP   ' FDB0003D **** DISASTER - CVAF READ FAILED.  RUN AX\n               BORTED.'\nERRMSG4  MSGSETUP   ' FDB0004D **** DISASTER - CVAF WRITE FAILED.  RUN X\n                ABORTED.'\nERRMSG5  MSGSETUP   ' FDB0005E **** ERROR - UNKNOWN COMMAND SPECIFIED. X\n                THIS CONTROL CARD IGNORED.'\nERRMSG6  MSGSETUP   ' FDB0006E **** ERROR - DATASET NAME NOT SPECIFIED.X\n                 COMMAND NOT EXECUTED.'\nERRMSG7  MSGSETUP   ' FDB0007E **** ERROR - VOLUME SERIAL NUMBER NOT SPX\n               ECIFIED.  COMMAND NOT EXECUTED.'\nERRMSG8  MSGSETUP   ' FDB0008E **** ERROR - NEW DATASET NAME NOT SPECIFX\n               ED ON RENAME REQUEST.  COMMAND NOT EXECUTED.'\nERRMSG9  MSGSETUP   ' FDB0009E **** ERROR - UNKNOWN SUBCOMMAND FOR NAMEX\n               .  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG10 MSGSETUP   ' FDB0010E **** ERROR - INVALID LOGICAL RECORD LENGX\n               TH SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG11 MSGSETUP   ' FDB0011E **** ERROR - INVALID BLOCK SIZE SPECIFIEX\n               D.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG12 MSGSETUP   ' FDB0012E **** ERROR - VOLUME SPECIFIED NOT REFEREX\n               NCED IN A DD CARD AND DYNAMIC ALLOCATION ATTEMPT FAILED.X\n                 COMMAND NOT EXECUTED.'\nERRMSG13 MSGSETUP   ' FDB0013E **** ERROR - DATASET NAME SPECIFIED MULTX\n               PLE TIMES.  COMMAND NOT EXECUTED.'\nERRMSG14 MSGSETUP   ' FDB0014E **** ERROR - INVALID DATA SET NAME SPECIX\n               FIED.  COMMAND NOT EXECUTED.'\nERRMSG15 MSGSETUP   ' FDB0015E **** ERROR - VOLUME SERIAL SPECIFIED MULX\n               TIPLE TIMES.  COMMAND NOT EXECUTED.'\nERRMSG16 MSGSETUP   ' FDB0016E **** ERROR - INVALID VOLUME SERIAL NUMBEX\n               R SPECIFIED.  COMMAND NOT EXECUTED.'\nERRMSG17 MSGSETUP   ' FDB0017E **** ERROR - NEW DATASET NAME KEYWORD SPX\n               ECIFIED MULTIPLE TIMES.  COMMAND NOT EXECUTED.'\n*\nERRMSG18 MSGSETUP   ' FDB0018E **** ERROR - '  AVAILIABLE MESSAGE\n*\nERRMSG19 MSGSETUP   ' FDB0019E **** ERROR - INVALID NEW DATASET NAME SPX\n               ECIFIED FOR RENAME COMMAND.  COMMAND NOT EXECUTED.'\nERRMSG20 MSGSETUP   ' FDB0020E **** ERROR - UNKNOWN KEYWORD DETECTED ONX\n                COMMAND CARD.  COMMAND NOT EXECUTED.'\nERRMSG21 MSGSETUP   ' FDB0021E **** ERROR - INVALID RECORD FORMAT SPECIX\n               FIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG22 MSGSETUP   ' FDB0022E **** ERROR - INVALID DATA SET ORGANIZATIX\n               ON SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG23 MSGSETUP   ' FDB0023E **** ERROR - INVALID KEY LENGTH SPECIFIEX\n               D.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG24 MSGSETUP   ' FDB0024E **** ERROR - INVALID RELATIVE KEY POSITIX\n               ON SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG25 MSGSETUP   ' FDB0025E **** ERROR - UNEXPECTED END-OF-FILE OCCUX\n               RRED DURING CONTINUATION CARD PROCESSING.'\nERRMSG26 MSGSETUP   ' FDB0026E      LAST COMMAND WAS NOT EXECUTED.'\nERRMSG27 MSGSETUP   '0FDB0027E **** ERROR - INVALID EXECUTION PARAMETERX\n                SPECIFIED.  \"TEST\" IS THE ONLY VALID PARM.  RUN ABORTEDX\n                .'\nMSG28    MSGSETUP   ' FDB0028I **** NOTE:  TEST RUN ONLY.  DSCB WILL NOX\n               T BE REWRITTEN TO VTOC ON VOLUME.'\nERRMSG29 MSGSETUP   ' FDB0029E **** ERROR - VOLUME SERIAL REQUESTED NOTX\n                REFERENCED IN A JCL STATEMENT.  COMMAND NOT EXECUTED.'\nERRMSG30 MSGSETUP   ' FDB0030I **** NOTE:  NO MODIFICATIONS WERE MADE TX\n               O THE DSCB FOR THIS DATASET.  DSCB NOT REWRITTEN.'\nERRMSG31 MSGSETUP   ' FDB0031D **** DISASTER - OPEN FAILED FOR VTOC OF X\n               VOLUME SPECIFIED.  POSSIBLE DISASTEROUS ERROR.  RUN ABORX\n               ED.'\nMSG32    MSGSETUP   ' FDB0032I **** COMMAND EXECUTED SUCCESSFULLY.'\nMSG33    MSGSETUP   ' FDB0033I **** REPLY END TO TERMINATE FIXDSCB.'\nERRMSG34 MSGSETUP   ' FDB0034E **** ERROR - INVALID OPTCODE SPECIFIED. X\n                ENTIRE NAME SUBCOMMAND SET IGNORED.'\nMSG35    MSGSETUP   ' FDB0035W **** VTOC IS RESERVED, EXIT AS SOON AS PX\n               OSSIBLE. ****'\nERRMSG36 MSGSETUP   ' FDB0036D **** DATASET SPECIFIED HAS BEEN LEFT RENX\n               AMED TO \"FIXDSCB.SCRATCH.DATASET\".  RUN ABORTED.'\nERRMSG37 MSGSETUP   ' FDB0037E **** ERROR - OPER STATUS REQUIRED TO USEX\n                FIXDSCB UNDER TSO.  RUN TERMINATED.'\nERRMSG38 MSGSETUP   ' FDB0038E **** ERROR - AT LEAST ONE KEYWORD MUST OX\n               CCUR ON THE COMMAND CARD.  COMMAND IGNORED.'\nERRMSG39 MSGSETUP   ' FDB0039E **** ERROR - VOLUME SPECIFIED NOT REFEREX\n               NCED IN A DD CARD AND TSO DAIR FAILED.  COMMAND NOT EXECX\n               UTED.'\nERRMSG40 MSGSETUP   ' FDB0040E **** ERROR - VOLUME IS INDEXED, SCRATCH X\n               OR RENAME NOT ALLOWED.'\nERRMSG41 MSGSETUP   ' FDB0041E **** ERROR - CVAF VIER FAILURE. DATASET X\n               NOT FOUND ON VOLUME SPECIFIED. CHECK FOR SPELLING ERRORSX\n               .'\nERRMSG42 MSGSETUP   ' FDB0042D **** DISASTER - CVAF VIER FAILED.  RUN AX\n               BORTED.'\nERRMSG43 MSGSETUP   ' FDB0043D **** DISASTER - CVAF VIER WRITE FAILED. X\n                RUN ABORTED.'\nERRMSG44 MSGSETUP   ' FDB0044D RESERVE OF VOLUME FAILED, RUN ABORTED.'\nERRMSG45 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG46 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG47 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG48 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG49 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG50 MSGSETUP   ' '           DUMMY MESSAGE\n         PRINT GEN\n         SPACE 3\n         DROP R10,R11,R12\n         DROP R9\n         SPACE 5\n*--------------------------------------------------------------------*\n*              ESTAE ROUTINE TO CATCH ABENDS                         *\n*--------------------------------------------------------------------*\nESTAEX   DS    0H\n         USING ESTAEX,R15\n         C     R0,=F'12'           IS SDWA AVAILABLE?\n         BE    ESTAEXI3             NO, GO PROCESS\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15\n         DROP  R15\n         USING ESTAEX,R12\n         USING SDWA,R1\n*--------------------------------------------------------------------*\n*              SDWA WITHOUT RETRY                                    *\n*--------------------------------------------------------------------*\nESTAEXI2 DS    0H\n         $AUTHOFF\n         L     R1,X'18'(,R13)\n         SETRP REGS=(14,12),                PERCOLATE ABEND           ..\n               DUMP=YES\n         DROP  ,\n         SPACE 3\n*--------------------------------------------------------------------*\n*              NO SDWA                                               *\n*--------------------------------------------------------------------*\nESTAEXI3 DS    0H                           ESTAE EXIT ROUTINE\n         USING ESTAEX,R15\n         $AUTHOFF\n         L     R1,X'18'(,R13)\n         SLR   R15,R15                      SET ABEND CODE\n         BR    R14                          RETURN\n         DROP  ,\n         LTORG ,\n         TITLE 'FIXDMSGR - SYSPRINT/WTO/TPUT MESSAGE INTERFACE'\nFIXDMSGR CSECT\n*--------------------------------------------------------------------*\n*\n*        FUNCTION: TO BUILD THE PROPER CONTROL BLOCKS AND TO USE\n*                  THE PUT OR WTO I/O ROUTINES TO PRINT A MESSAGE.\n*\n*        INPUT   : REG. 1 CONTAINS THE ADDRESS OF THE MESSAGE\n*                  PARAMETER LIST\n*                  OFFSET LENGTH DESCRIPTION\n*                  +0     4      MESSAGE TABLE ADDRESS\n*                  +4     4      DCB ADDRESS\n*                  +8     4      ADDRESS OF ANY SPECIAL MESSAGE\n*                  +12    2      MESSAGE NUMBER\n*                  +14    1      I/O FLAG (SYSPRINT, WTO, OR TSO)\n*                  +15    1      CONSOLE ID (FOR WTO)\n*\n*                MESSAGE TABLE FORMAT:\n*                  A LIST OF FULL-WORDS CONTAINING THE ADDRESS OF\n*                  THE MESSAGE BUFFERS.\n*\n*                SPECIAL MESSAGES:\n*                  SPECIAL MESSAGES ARE MESSAGES WHICH HAVE BEEN\n*                  MODIFIED AND DO NOT EXIST IN THE NORMAL MESSAGE\n*                  TABLE.  IF THE SPECIAL MESSAGE POINTER IS NON-\n*                  ZERO THEN THAT MESSAGE IS USED INSTEAD OF LOOKING\n*                  UP A MESSAGE IN THE TABLE.  SPECIAL MESSAGES MUST\n*                  BE CONSTRUCTED IN THE FORM OF A VALID WTO BUFFER.\n*                  EXAMPLE:\n*                     SPMG    DC   AL2(LENGTH OF TEXT + 4)\n*                             DC   X'4000'       WTO FLAGS\n*                             DC   C'TEXT'\n*\n*--------------------------------------------------------------------*\n         EJECT\n*--------------------------------------------------------------------*\n*        INITIALIZATION\n*--------------------------------------------------------------------*\n         SAVE  (14,12)            SAVE CALLER'S REGS.\n         LR    R12,R15\n         USING FIXDMSGR,R12       ADDRESS CSECT\n         LR    R2,R1              PICK UP MESSAGE PARAM. LIST ADDR.\n         USING MPLDSECT,R2        ADDRESS PARM LIST\n         GETMAIN R,LV=LWASIZE,SP=LWASP OBTAIN LOCAL WORK AREA\n         XC    0(LWASIZE,R1),0(R1)\n         ST    R13,4(,R1)         CHAIN\n         ST    R1,8(,R13)           SAVE\n         LR    R13,R1                  AREAS\n         USING LWAMAP,R13         ADDRESS WORK AREA\n*--------------------------------------------------------------------*\n*        INITIALIZE LOCAL WORK AREA\n*--------------------------------------------------------------------*\n         SPACE 1\n         LA    R11,0              PRESET R12 TO ZERO\n         L     R3,MPLSPADD        PICK UP ADDRESS OF POSSIBLE SP MSG\n         LTR   R3,R3              ANY SPECIFIED?\n         BNZ   DOSPMG             BRANCH IF SO\n         L     R5,MPLMTTD         PICK UP MESSAGE TABLE ADDR.\n         LH    R4,MPLNUMD         PICK UP MESSAGE NUMBER\n         LTR   R4,R4              MESSAGE NUM SPECIFIED?\n         BZ    ERRORXIT           BRANCH IF NOT\n         BCTR  R4,0\n         SLL   R4,2               COMPUTE TABLE INDEX\n         L     R3,0(R4,R5)        PICK UP MESSAGE BUFFER ADDR.\nDOSPMG   DS    0H\n         LH    R1,0(R3)           PICK UP LINE LENGTH\n         LTR   R1,R1              LENGTH 0?\n         BE    NOCLOSE            THEN GET OUT.  NO MESSAGE TO PRINT\n         XC    MPLSPADD,MPLSPADD  ZERO OUT SPECIAL MESSAGE POINTER\n         TM    MPLIOFD,CONSOLE    ARE WE A STARTED TASK\n         BO    DOWTOIO            USE WTO TYPE I/O IF SO\n         TM    MPLIOFD,TSOSESS    ARE WE A TSO SESSION\n         BO    DOTSOIO            USE TPUT TYPE I/O IF SO\n         L     R6,MPLDCBD         PICK UP DCB ADDRESS\n         USING IHADCB,R6          ADDRESS DCB\n         TM    DCBOFLGS,DCBOFOPN  IS DCB OPEN\n         BO    DCBOPEN            BRANCH IF SO\n         OI    LWAFLAG,OPENHERE   FLAG AS OPENED HERE\n         OPEN  ((6),OUTPUT)       OPEN IT UP\n         TM    DCBOFLGS,DCBOFOPN  DID IT WORK\n         BZ    ERROROPN           BRANCH IF NOT\nDCBOPEN  DS    0H\n         DROP  R6\n         SPACE 1\nPUTOUT   DS    0H\n         MVI   LWALINE,BLANK      BLANK OUT LINE BUFFER\n         MVC   LWALINE+1(132),LWALINE\n         LH    R1,0(R3)           PICK UP LINE LENGTH\n         S     R1,FIVE            DROP FOR EXECUTED INST AND FOR\n*                                 WTO HEADDER OMISSION\n         EX    R1,LINEMOVE        MOVE TO BUFFER\n         PUT   (6),LWALINE\n         SPACE 1\nEXITROUT DS    0H\n         TM    LWAFLAG,OPENHERE\n         BNO   NOCLOSE\n         CLOSE ((6))              WE OPENED IT SO WE CLOSE IT\n         B     NOCLOSE\n         EJECT ,\n*--------------------------------------------------------------------*\n*        DO WTO TO STARTING CONSOLE\n*--------------------------------------------------------------------*\n         SPACE 3\nDOWTOIO  DS    0H\n         IC    R0,MPLCOND         PICK UP CONSOLE ID\n         LR    R1,R3              POINTER TO WTO MESSAGE AREA IN LIST\n         WTO   MF=(E,(1))         EXECUTE\n         B     NOCLOSE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DO TPUT TO TSO SESSION\n*--------------------------------------------------------------------*\n         SPACE 3\nDOTSOIO  DS    0H\n         LH    R0,0(R3)           PICK UP MESSAGE LENGTH\n         S     R0,MPLFOUR         DROP BY FOUR (COMPENSATE FOR HEADER)\n         LA    R1,4(R3)           PICK UP MESSAGE TEXT ADDRESS\n         O     R1,TPUTFLAG        SET IN FLAGS\n         LA    R15,0              SET UID POINTER TO ZERO\n         TPUT  (1),(0),R          EXECUTE TPUT\n         B     NOCLOSE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DI-INITIALIZE AND EXIT\n*--------------------------------------------------------------------*\n         SPACE 3\nNOCLOSE  DS    0H\n         XC    LWAFLAG,LWAFLAG    ZERO OUT THE FLAGS\n         XC    MPLNUMD,MPLNUMD    ZERO MSG NUMBER\n         LR    R1,R13             LOAD PARAMETER REG. 1\n         L     R13,4(,R13)        RESTORE CALLER'S SAVE REG.\n         FREEMAIN R,LV=LWASIZE,SP=LWASP,A=(1) FREE LOCAL WORK AREA\n         LR    R15,R11            LOAD RETURN CODE\n         RETURN (14,12),RC=(15)   RETURN TO CALLER\nERRORXIT DS    0H\n         LA    R11,20             INDICATE INVALID PARAMETER LIST\n         B     NOCLOSE\nERROROPN DS    0H\n         LA    R11,24             INDICATE OPEN FAILURE\n         B     NOCLOSE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        LOCAL CONSTANTS AND EXECUTED INSTRUCTIONS                   *\n*--------------------------------------------------------------------*\n         SPACE 1\nTPUTFLAG DC    F'0'               TPUT FLAGS\nMPLFOUR  DC    F'4'\nFIVE     DC    F'5'\nLINEMOVE MVC   LWALINE(0),4(R3)\n         LTORG ,\n         SPACE 3\n         TITLE 'FIXDSCB - DSECTS'\n*--------------------------------------------------------------------*\n*        LOCAL WORK AREA MAPPING\n*--------------------------------------------------------------------*\n         SPACE 1\nLWAMAP   DSECT\n         DS    18F                REG. SAVE AREA\nLWALINE  DS    CL133\nLWAFLAG  DS    X\nOPENHERE EQU   X'80'              DCB SUPPLIED OPENED LOCALLY\nLWASIZE  EQU   *-LWAMAP\nLWASP    EQU   1\n         SPACE 3\n*--------------------------------------------------------------------*\n*        TSO COMMAND BUFFER MAPPING DSECT (CBUFF)\n*--------------------------------------------------------------------*\n         SPACE 1\nCMDBUFR  DSECT\nCMDBLEN  DS    H\nCMDBOFF  DS    H\nCMDBTEXT DS    C\n         SPACE 3\n*--------------------------------------------------------------------*\n*        MESSAGE PARAMETER LIST MAPPING DSECT (MPL)\n*--------------------------------------------------------------------*\n         SPACE 1\nMPLDSECT DSECT\nMPLMTTD  DS    A\nMPLDCBD  DS    A\nMPLSPADD DS    A\nMPLNUMD  DS    H\nMPLIOFD  DS    C\nMPLCOND  DS    C\n         SPACE 3\n*--------------------------------------------------------------------*\n*        FORMAT 1 DSCB MAPPING DSECT\n*--------------------------------------------------------------------*\n         SPACE 3\nDSCB     DSECT\n         IECSDSL1 1\n         DS    0F\nDSCBLTH  EQU   *-DSCB              FULL DSCB LENGTH\nDSCBLTH2 EQU   *-DS1FMTID           MINUS DSNAME LENGTH\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CVAF MAPPINGS\n*--------------------------------------------------------------------*\nICVVIER  ICVVIER\n         SPACE 3\nCVPL     ICVAFPL ,\n         SPACE 3\nBUFLIST  DSECT ,\n         ICVAFBFL DSECT=NO         GEN 2 AREAS TOGETHER\nBUFLEN   EQU   *-BUFLIST\n*--------------------------------------------------------------------*\n*        EXTERNAL DATA AREA MAPPING DSECTS\n*--------------------------------------------------------------------*\n         SPACE 3\n         PRINT NOGEN\nJFCBDSCT DSECT\n         IEFJFCBN\nJFCBMOD  EQU   X'80'\n         SPACE 1\n         DCBD DSORG=XE,DEVD=DA\n         SPACE 1\n         PRINT GEN\nTIOT     DSECT ,\n         IEFTIOT1\n         PRINT GEN\n         SPACE 1\n         IEFUCBOB\n         SPACE 1\n         IHAPSA\n         SPACE 1\n         IEECHAIN\n         SPACE 1\n         IKJDAPL\n         SPACE 1\n         IKJPSCB\n         SPACE 1\n         IKJCPPL\n         SPACE 1\n         IHAASCB\n         SPACE 1\n         IEZDEB\n         SPACE 1\n         IHASDWA ,\n         SPACE 1\n         CVT DSECT=YES,PREFIX=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FIXDSCB$": {"ttr": 7688, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x05\\x01\\x02\\x10_\\x01\\x02(/\\tI\\x00x\\x00x\\x00\\x00\\xe2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-04-15T00:00:00", "modifydate": "2002-10-09T09:49:05", "lines": 120, "newlines": 120, "modlines": 0, "user": "SBASS"}, "text": "//KMBFDSCB JOB (1,BASS),'SAM_BASS',NOTIFY=&SYSUID,\n//         MSGCLASS=X,CLASS=A\n/*JOBPARM  T=999,L=9\n//*------- -----------------------------------------------------------\n//*********************************************************************\n//*                                                                   *\n//* FIXDSCB PROGRAM INFORMATION:                                      *\n//*                                                                   *\n//*                                                                   *\n//* FUNCTION: TO MODIFY A DATASETS DSCB ACCORDING TO SUPPLIED         *\n//*         COMMANDS.  SUPPORTED FUNCTIONS ARE:                       *\n//*                                                                   *\n//*         RENAME .......... RENAME A DATASET TO A NEWNAME           *\n//*         PROTECT ......... TURN ON A DSCB'S PASSWORD BITS          *\n//*         SETNOPWR ........ TURN ON A DSCB'S NOPASSWORD READ ENABLE *\n//*         UNLOCK .......... TURN OFF A DSCB'S PASSWORD BITS         *\n//*         RENEW ........... RESET CREATION DATE TO CURRENT DATE     *\n//*         EXPIRE .......... SWAP CREATION AND EXPIRATION DATES      *\n//*         EXTEND .......... SET EXPIRATION DATE TO 99:365           *\n//*         ZEROEXPD ........ SET EXPIRATION DATE TO 00:000           *\n//*         SCRATCH ......... DELETE SPECIFIED DATASET                *\n//*                                                                   *\n//*         IN ADDITION TO THESE FUNCTIONS A NAME DEFINITION CARD     *\n//*         FOLLOWED BY SUBCOMMAND CARDS PERTAINING TO THAT           *\n//*         DATASET MAY BE ENTERED.  VALID SUBCOMMANDS ARE:           *\n//*                                                                   *\n//*         RECFM ........... RESET RECORD FORMAT TO THAT SPECIFIED   *\n//*         LRECL ........... RESET LRECL TO SPECIFIED VALUE          *\n//*         BLKSIZE ......... RESET BLKSIZE TO SPECIFIED VALUE        *\n//*         DSORG ........... RESET DSORG TO THAT SPECIFIED           *\n//*         KEYL ............ RESET KEY LENGTH TO THAT SPECIFIED      *\n//*         RKP ............. RESET RELATIVE KEY POSITION             *\n//*         OPTCODE ......... RESET OPTCODE VALUE (SEE JCL MANUAL)    *\n//*                                                                   *\n//*********************************************************************\n//*********************************************************************\n//*                                                                   *\n//*  COMMAND FORMATS ARE AS FOLLOWS:                                  *\n//*                                                                   *\n//* INPUT IS FREE FORM RESTRICTED ONLY THAT COMMANDS MAY BEGIN IN     *\n//* COLUMN 1 OR AFTER AND SUBCOMMANDS OF THE NAME COMMAND MUST BEGIN  *\n//* IN COLUMN 2 OR AFTER.                                             *\n//* THE KEYWORDS VOLUME, DSNAME, AND NEWNAME MAY APPEAR IN ANY ORDER. *\n//*                                                                   *\n//* AT LEAST ON KEYWORD MUST APPEAR ON THE COMMAND CARD. COMMAND      *\n//* CARDS MAY BE CONTINUED ONTO A NEW CARD. CONTINUE CARDS ARE        *\n//* FREE FORMAT (COL 1-71 MAY BE USED). EMBEDDED BLANKS MAY NOT       *\n//* APPEAR IN THE KEYWORD STRINGS. COMMENTS MAY BE ENTERED ON         *\n//* COMMAND CARDS BY SEPERATING THEM FROM ANY VALUES BY AT LEAST      *\n//* ONE BLANK. COMMENT CARDS MAY BE CODED BY PLACING AN ASTERISK      *\n//* IN COLUMN 1. COMMENT CARDS MAY APPEAR ANYWHERE IN THE INPUT       *\n//* STREAM.                                                           *\n//* NOTE: COLUMN 72 MUST CONTAIN A BLANK AT ALL TIMES                 *\n//*                                                                   *\n//* CARD FORMATS:                                                     *\n//* RENEW VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n//* PROTECT VOLUME=XXXXXX,DSNAME=DATASET-NAME                         *\n//* UNLOCK VOLUME=XXXXXX,DSNAME=DATASET-NAME                          *\n//* EXPIRE VOLUME=XXXXXX,DSNAME=DATASET-NAME                          *\n//* EXTEND VOLUME=XXXXXX,DSNAME=DATASET-NAME                          *\n//* RENAME VOLUME=XXXXXX,DSNAME=DATASET-NAME,NEWNAME=NEW-DATASET-NAME *\n//* SCRATCH VOLUME=XXXXXX,DSNAME=DATASET-NAME                         *\n//* NAME  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n//*   WHERE:                                                          *\n//*   XXXXXX IS THE DASD VOLUME SERIAL THAT CONTAINS THE              *\n//*   DATASET (DSCB) TO BE MODIFIED.                                  *\n//*   DATASET-NAME IS THE NAME OF THE DATA SET (DSCB) TO              *\n//*   BE MODIFIED.                                                    *\n//*   NEW-DATASET-NAME IS THE NEW NAME TO BE ASSIGNED TO THE          *\n//*   DATASET SPECIFIED BY THE DSNAME KEYWORD (RENAME COMMAND ONLY).  *\n//*                                                                   *\n//*      KEYWORDS MAY BE ABBREVIATED AS FOLLOWS:                      *\n//*                                                                   *\n//*         DSNAME - DSN OR D                                         *\n//*         VOLUME - VOL OR V                                         *\n//*         NEWNAME- NEWN OR N                                        *\n//*                                                                   *\n//*********************************************************************\n//*********************************************************************\n//*                                                                   *\n//* NAME COMMAND: SUBCOMMAND SPECIFICATIONS                           *\n//*                                                                   *\n//* NAME VOLUME=XXXXXX,DSNAME=DATASET-NAME  (SEE ABOVE)               *\n//*     NOTE: THE NAME CARD DEFINES A DATASET DSCB TO BE WORKED ON.   *\n//*           ALL MODIFICATION CARDS THAT FOLLOW IT PERTAIN TO THAT   *\n//*           DATASET UNTIL ANOTHER PRIMARY COMMAND IS ENCOUNTERED    *\n//*           (RENEW, SCRATCH, EXPIRE, ETC...) OR AN END-OF-FILE      *\n//*           OCCURS.                                                 *\n//*                                                                   *\n//* LRECL=XXXXX   (WHERE XXXXX IS THE DESIRED LRECL)                  *\n//* BLKSIZE=XXXXX (WHERE XXXXX IS THE DESIRED BLOCK SIZE)             *\n//* RECFM=XXXXX   (WHERE XXXXX IS THE DESIRED RECORD FORMAT)          *\n//*               (SEE RECFMTAB FOR SUPPORTED RECFM VALUES)           *\n//* DSORG=XXX     (WHERE XXX IS THE DESIRED DATASET ORGANIZATION)     *\n//*               (CAUTION: NO CHECKING IS DONE!)                     *\n//*               (SEE DSORGTAB FOR SUPPORTED DSORG VALUES)           *\n//* KEYL=XXX      (WHERE XXX IS THE DESIRED KEY LENGTH)               *\n//* RKP=XXX       (WHERE XXX IS THE DESIRED RELATIVE KEY POSITION)    *\n//* OPTCODE=X     (WHERE X IS THE DESIRED OPTCODE LETTER)             *\n//*                                                                   *\n//*           ONLY ONE DSNAME SUBCOMMAND IS ALLOWED PER CARD.         *\n//*           IF A PARTICULAR SUBCOMMAND IN ENTERED MORE THAN         *\n//*           ONCE THE LAST OCCURENCE OF THE SUBCOMMAND WILL          *\n//*           BE THE ONE USED.  IF AN ERROR OCCURS DURING PROCESSING  *\n//*           OF ANY SUBCOMMAND THE ENTIRE SUBCOMMAND SET             *\n//*           FOR THE CURRENT NAME COMMAND WILL BE DISCARDED.         *\n//*                                                                   *\n//*                                                                   *\n//*********************************************************************\n//S010     EXEC PGM=FIXDSCB\n//STEPLIB  DD  DISP=SHR,DSN=KBASS.PERM.LOAD\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSIN    DD  *\nSCRATCH V=SYSRES,D=SYS1.COB2LIB\n//\nRENAME V=PRD045,D=KBASS.PERM.ASM,N=KBASS.PERM.ASM.OLD\nRENAME V=PRD045,D=KBASS.PERM.ASM.NEW,N=KBASS.PERM.ASM\nRENAME V=PRD045,D=DS.PERM.LINK,N=DS.PERM.LINK.OLD\nRENAME V=PRD045,D=DS.PERM.LINK.NEW,N=DS.PERM.LINK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIXDSCB1": {"ttr": 7691, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00)\\x01\\x010\\x9f\\x01\\x010\\x9f\\x139\\r\\x02\\r\\x02\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-11-05T00:00:00", "modifydate": "2001-11-05T13:39:29", "lines": 3330, "newlines": 3330, "modlines": 0, "user": "KBASS"}, "text": "**********************************************************************\n*                                                                     *\n*        ATTR: NORENT, REUSE, AC(1)                                   *\n*                                                                     *\n*                       F I X D S C B                                 *\n*                                                                     *\n*     THIS IS A SYSTEM PROGRAMMER UTILITY PROGRAM DESIGNED            *\n*     TO FACILITATE THE MODIFICATION (OR REPAIR) OF DATA SET          *\n*     CONTROL BLOCKS (DSCB'S).  THIS PROGRAM DOES NOT DO              *\n*     ANY TYPE OF SECURITY VALIDATION.  CHANGES ARE MADE TO           *\n*     THE DSCB'S AS REQUESTED, WITHOUT REGARD TO THEIR                *\n*     CORRECTNESS OR APPLICABILITY TO THE SPECIFIC DATASET.           *\n*     TO SOME PERSONS (AUDITORS OR SECURITY TYPES IN PARTICULAR)      *\n*     THIS PROGRAM WILL REPRESENT ONE BIG INTEGRITY EXPOSURE.         *\n*     SOME MEANS MUST BE FOUND TO CONTROL THE AVAILABILITY            *\n*     AND USE OF THIS UTILITY.  THIS RESPONSIBILITY IS LEFT           *\n*     TO THE INDIVIDUAL SHOP TO IMPLEMENT.                            *\n*                                                                     *\n*     AUTHOR: DAVID ALAN WEAVER                                       *\n*             AMDAHL SYSTEMS ENGINEER                                 *\n*             HOUSTON LIGHTING & POWER                                *\n*                                                                     *\n*     DATE WRITTEN: NOVEMBER, 1979                                    *\n*                                                                     *\n*     RELEASE LEVEL 1.0                                               *\n*                                                                     *\n*     MODIFICATION RECORD:                                            *\n*                                                                     *\n*   MODIFIED: SAM BASS   (SJB)                                        *\n*             OCCIDENTAL PETROLEUM INC                                *\n*             BMC SOFTWARE                                            *\n*             MCLANE CO. INC                                          *\n*                                                                     *\n*     DATE    INITIALS      MODIFICATION                              *\n*   12/15/79    DAW         CHANGED TO RUN UNDER TSO AS A CP          *\n*   01/01/80    DAW         CHANGED TO REQUIRE OPER STATUS UNDER TSO  *\n*   06/29/84    SJB         CHANGE TO EXCLUDE INDEXED VTOCS AND FIX   *\n*                           DYNAMIC ALLOCATION.                       *\n*   04/29/88    SJB         CHANGE TO USE CVAF MACROS AND WORK  WITH  *\n*                           INDEX VTOCS                               *\n*   08/13/90    SJB         FIX DISASTER ERROR AFTER ENTERING A       *\n*                           NON-EXISTING DATASET NAME                 *\n*   08/13/90    SJB         ADDED RESERVE/DEQ LOGIC                   *\n*   08/01/91    SJB         ADDED SUPPORT FOR ALL NUMBER VOLSERS      *\n*                           INSERT  A 'V' AHEAD OF VOLSER             *\n*   09/12/91    SJB         ADDED RACFON AND RACFOFF COMMANDS         *\n*   03/18/92    SJB         ADDED DEQUE IF READDSCB ERROR             *\n*   03/18/92    SJB         ADDED ESTAE TO TURN OFF AUTHORIZATION     *\n*   05/08/92    SJB         MOVED VOLSTAT BACK INTO RIGHT PLACE       *\n*                           FIXED READDSCB NOT SETTING ERROR RET      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* OPERATION: FIXDSCB MUST BE LINKEDITED WITH AN AUTHORIZATION         *\n*            CODE OF 1 AND PLACED IN AN AUTHORIZED LIBRARY.           *\n*                                                                     *\n*            FIXDSCB OPERATES IN ONE OF THREE MODES: BATCH, TSO, OR   *\n*            STARTED TASK.  WHEN EXECUTED AS A BATCH PROGRAM          *\n*            ALL I/O IS HANDLED THROUGH SYSIN/SYSPRINT DD             *\n*            CARDS.  WHEN EXECUTED AS A STARTED TASK ALL I/O          *\n*            IS DONE VIA WTO/WTOR THROUGH THE STARTING CONSOLE.       *\n*            WHEN EXECUTED AS A TSO COMMAND PROCESSOR ALL I/O         *\n*            IS DONE VIA TPUT/TGET TO THE TSO SESSION.                *\n*            NOTE: UNDER MVS, IF FIXDSCB IS TO BE USED UNDER TSO      *\n*                  THE NAME IT IS LINKEDITED UNDER MUST BE ADDED      *\n*                  TO THE COMMAND AUTHORIZATION TABLE (IKJEFTE2)      *\n*                  IN THE TMP (IKJEFT02).  SEE THE SPL: TSO FOR       *\n*                  DETAILS ABOUT USING AUTHORIZED COMMANDS UNDER      *\n*                  TSO.                                               *\n*                  OR IKJTSO00 (AUTHORIZED COMMANDS)                  *\n*                                                                     *\n*            IF AN EXECUTION PARAMETER OF \"TEST\" IS SUPPLIED          *\n*            DURING ANY EXECUTION OF FIXDSCB, NO MODIFICATIONS        *\n*            WILL BE APPLIED TO ANY DSCB.  THE PROGRAM WILL           *\n*            SIMPLY RUN THROUGH IT'S LOGIC.                           *\n*                                                                     *\n*            ALL PRIMARY COMMANDS (SEE BELOW) MUST SUPPLY             *\n*            A DATASET NAME AND THE VOLUME SERIAL ON WHICH            *\n*            IT RESIDES.  THIS CRITERIA WAS CHOSEN OVER CATALOG       *\n*            SEARCHES TO AVOID THE ACCIDENTAL MODIFICATION OF         *\n*            A DSCB OF THE SAME NAME ON ANOTHER VOLUME THAN           *\n*            INTENDED IF THE CATALOG POINTS SOMEWHERE ELSE.           *\n*            THE THEORY IS: IF YOU KNOW IT NEEDS TO BE FIXED          *\n*                           THEN YOU BETTER KNOW WHERE IT IS.         *\n*                                                                     *\n*            FIXDSCB WILL OPERATE UNDER SVS OR MVS.                   *\n*            WHEN USED UNDER MVS SOME ADDITIONAL FLEXIBILITY IS       *\n*            GAINED BY THE FACT THAT FIXDSCB WILL DYNAMICALLY ALLO-   *\n*            CATE THE SPECIFIED VOLUME IF IT CANNOT FIND A REFER-     *\n*            ENCE TO IT IN THE TIOT.  THIS ALLOWS A VERY SIMPLE       *\n*            PROC TO BE USED FOR STARTED TASK.  UNDER SVS YOU WILL    *\n*            HAVE TO INCLUDE AN ANYNAME DD CARD FOR EACH VOLUME       *\n*            YOU INTEND TO MODIFY.  FOR MVS BATCH USAGE, IT IS        *\n*            SUGGESTED THAT YOU INCLUDE AN ANYNAME DD CARD FOR        *\n*            EACH VOLUME TO BE MODIFIED TO SAVE THE OVERHEAD OF       *\n*            ALLOCATING THEM DYNAMICALLY.                             *\n*                                                                     *\n*            NOTE: IT IS ENTIRELY POSSIBLE (USING THIS UTILITY)       *\n*                  TO RENAME A DATSET TO A NAME WHICH ALREADY         *\n*                  EXIST ON THE PACK.  CAUTION SHOULD BE USED         *\n*                  WHEN DOING RENAMES TO SEE THAT THIS CONDITION      *\n*                  DOES NOT ARISE.                                    *\n*                  SUBNOTE: THIS \"FLAW\" WAS LEFT IN INTENTIONALLY.    *\n*                           I LEAVE IT TO YOUR IMAGINATION JUST HOW   *\n*                           IT COULD BE EXPLOITED CONSTRUCTIVELY.     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        A WORD OR TWO ABOUT THE SCRATCH COMMAND:                     *\n*                                                                     *\n*          THE SCRATCH PRIMARY COMMAND IS EXECUTED IN A RATHER        *\n*          UNIQUE WAY.  THE DATASET IS FIRST RENAMED TO A SPECIAL     *\n*          NAME (FIXDSCB.SCRATCH.DATASET) AND ANY EXPIRATION DATE     *\n*          AND PASSWORD FLAGS ARE SET TO ZERO.  THE RENAMED           *\n*          DATASET IS THEN SCRATCHED VIA THE SCRATCH SVC.             *\n*          THIS PROCEDURE FACILITATES SCRATCHING DATASETS WHICH       *\n*          MAY HAVE THE SAME NAME AS A DATASET WHICH IS OPEN          *\n*          (AND THUS ENQUED) ON ANOTHER PACK (SUCH AS SYS1.LINKLIB).  *\n*          THIS ALSO MAKES IT POSSIBLE TO SCRATCH A DATASET           *\n*          WHICH IS REALLY OPEN BY SOME OTHER TASK SO BE VERY         *\n*          CAUTIOUS IN USING THIS COMMAND.                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n* FIXDSCB PROGRAM INFORMATION:                                        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: TO MODIFY A DATASETS DSCB ACCORDING TO SUPPLIED           *\n*           COMMANDS.  SUPPORTED FUNCTIONS ARE:                       *\n*                                                                     *\n*           RENAME .......... RENAME A DATASET TO A NEWNAME           *\n*           PROTECT ......... TURN ON A DSCB'S PASSWORD BITS          *\n*           RACFON  ......... TURN ON A DSCB'S RACF BIT               *\n*           RACFOFF ......... TURN OFF A DSCB'S RACF BIT              *\n*           SETNOPWR ........ TURN ON A DSCB'S NOPASSWORD READ ENABLE *\n*           UNLOCK .......... TURN OFF A DSCB'S PASSWORD&RACF BIT S   *\n*           RENEW ........... RESET CREATION DATE TO CURRENT DATE     *\n*           EXPIRE .......... SWAP CREATION AND EXPIRATION DATES      *\n*           EXTEND .......... SET EXPIRATION DATE TO 99:365           *\n*           ZEROEXPD ........ SET EXPIRATION DATE TO 00:000           *\n*           SCRATCH ......... DELETE SPECIFIED DATASET                *\n*                                                                     *\n*           IN ADDITION TO THESE FUNCTIONS A NAME DEFINITION CARD     *\n*           FOLLOWED BY SUBCOMMAND CARDS PERTAINING TO THAT           *\n*           DATASET MAY BE ENTERED.  VALID SUBCOMMANDS ARE:           *\n*                                                                     *\n*           RECFM ........... RESET RECORD FORMAT TO THAT SPECIFIED   *\n*           LRECL ........... RESET LRECL TO SPECIFIED VALUE          *\n*           BLKSIZE ......... RESET BLKSIZE TO SPECIFIED VALUE        *\n*           DSORG ........... RESET DSORG TO THAT SPECIFIED           *\n*           KEYL ............ RESET KEY LENGTH TO THAT SPECIFIED      *\n*           RKP ............. RESET RELATIVE KEY POSITION             *\n*           OPTCODE ......... RESET OPTCODE VALUE (SEE JCL MANUAL)    *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*    COMMAND FORMATS ARE AS FOLLOWS:                                  *\n*                                                                     *\n* INPUT IS FREE FORM RESTRICTED ONLY THAT COMMANDS MAY BEGIN IN       *\n* COLUMN 1 OR AFTER AND SUBCOMMANDS OF THE NAME COMMAND MUST BEGIN    *\n* IN COLUMN 2 OR AFTER.                                               *\n* THE KEYWORDS VOLUME, DSNAME, AND NEWNAME MAY APPEAR IN ANY ORDER.   *\n*                                                                     *\n* AT LEAST ON KEYWORD MUST APPEAR ON THE COMMAND CARD.  COMMAND       *\n* CARDS MAY BE CONTINUED ONTO A NEW CARD. CONTINUE CARDS ARE          *\n* FREE FORMAT (COL 1-71 MAY BE USED). EMBEDDED BLANKS MAY NOT         *\n* APPEAR IN THE KEYWORD STRINGS.  COMMENTS MAY BE ENTERED ON          *\n* COMMAND CARDS BY SEPERATING THEM FROM ANY VALUES BY AT LEAST        *\n* ONE BLANK.  COMMENT CARDS MAY BE CODED BY PLACING AN ASTERISK       *\n* IN COLUMN 1.  COMMENT CARDS MAY APPEAR ANYWHERE IN THE INPUT        *\n* STREAM.                                                             *\n* NOTE: COLUMN 72 MUST CONTAIN A BLANK AT ALL TIMES                   *\n*                                                                     *\n* CARD FORMATS:                                                       *\n* RENEW   VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* RACFON  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* RACFOFF VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* PROTECT VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* UNLOCK  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* EXPIRE  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* EXTEND  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* RENAME  VOLUME=XXXXXX,DSNAME=DATASET-NAME,NEWNAME=NEW-DATASET-NAME  *\n* SCRATCH VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* NAME    VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n*     WHERE:                                                          *\n*     XXXXXX IS THE DASD VOLUME SERIAL THAT CONTAINS THE              *\n*     DATASET (DSCB) TO BE MODIFIED.                                  *\n*     DATASET-NAME IS THE NAME OF THE DATA SET (DSCB) TO              *\n*     BE MODIFIED.                                                    *\n*     NEW-DATASET-NAME IS THE NEW NAME TO BE ASSIGNED TO THE          *\n*     DATASET SPECIFIED BY THE DSNAME KEYWORD (RENAME COMMAND ONLY).  *\n*                                                                     *\n*        KEYWORDS MAY BE ABBREVIATED AS FOLLOWS:                      *\n*                                                                     *\n*           DSNAME - DSN OR D                                         *\n*           VOLUME - VOL OR V                                         *\n*           NEWNAME- NEWN OR N                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n* NAME COMMAND: SUBCOMMAND SPECIFICATIONS                             *\n*                                                                     *\n* NAME   VOLUME=XXXXXX,DSNAME=DATASET-NAME  (SEE ABOVE)               *\n*       NOTE: THE NAME CARD DEFINES A DATASET DSCB TO BE WORKED ON.   *\n*             ALL MODIFICATION CARDS THAT FOLLOW IT PERTAIN TO THAT   *\n*             DATASET UNTIL ANOTHER PRIMARY COMMAND IS ENCOUNTERED    *\n*             (RENEW, SCRATCH, EXPIRE, ETC...) OR AN END-OF-FILE      *\n*             OCCURS.                                                 *\n*                                                                     *\n*  LRECL=XXXXX    (WHERE XXXXX IS THE DESIRED LRECL)                  *\n*  BLKSIZE=XXXXX  (WHERE XXXXX IS THE DESIRED BLOCK SIZE)             *\n*  RECFM=XXXXX    (WHERE XXXXX IS THE DESIRED RECORD FORMAT)          *\n*                 (SEE RECFMTAB FOR SUPPORTED RECFM VALUES)           *\n*  DSORG=XXX      (WHERE XXX IS THE DESIRED DATASET ORGANIZATION)     *\n*                 (CAUTION: NO CHECKING IS DONE!)                     *\n*                 (SEE DSORGTAB FOR SUPPORTED DSORG VALUES)           *\n*  KEYL=XXX       (WHERE XXX IS THE DESIRED KEY LENGTH)               *\n*  RKP=XXX        (WHERE XXX IS THE DESIRED RELATIVE KEY POSITION)    *\n*  OPTCODE=X      (WHERE X IS THE DESIRED OPTCODE LETTER)             *\n*                                                                     *\n*             ONLY ONE DSNAME SUBCOMMAND IS ALLOWED PER CARD.         *\n*             IF A PARTICULAR SUBCOMMAND IN ENTERED MORE THAN         *\n*             ONCE THE LAST OCCURENCE OF THE SUBCOMMAND WILL          *\n*             BE THE ONE USED.  IF AN ERROR OCCURS DURING PROCESSING  *\n*             OF ANY SUBCOMMAND THE ENTIRE SUBCOMMAND SET             *\n*             FOR THE CURRENT NAME COMMAND WILL BE DISCARDED.         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*     R0 ..... LOCAL USAGE                                            *\n*     R1 ..... LOCAL USAGE                                            *\n*     R2 ..... LOCAL USAGE                                            *\n*     R3 ..... LOCAL USAGE                                            *\n*     R4 ..... LOCAL USAGE                                            *\n*     R5 ..... POINTER TO CARD KEYWORDS (SCAN POINTER)                *\n*     R6 ..... BAL TO CARD SCAN LOGIC (COMCARD)                       *\n*     R7 ..... ADDRESS TO BUFLIST                                     *\n*     R8 ..... ADDRESS CVAF PARAMETER                                 *\n*     R9 ..... ADDRESS DSCB DSCBAREA                                  *\n*     R10 ..... PROGRAM BASE REGISTER 1                               *\n*     R11 ..... PROGRAM BASE REGISTER 2                               *\n*     R12 ..... PROGRAM BASE REGISTER 3                               *\n*     R13 ..... SAVE AREA CHAIN POINTER                               *\n*     R14 ..... RETURN REG                                            *\n*     R15 ..... ENTRY REG                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*--------------------------------------------------------------------*\n*              REGISTER AND OTHER EQUATES                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\nBLANK    EQU   C' '\nASTERISK EQU   C'*'\nCOMMA    EQU   C','\nEQUAL    EQU   C'='\nLINES1   EQU   C' '\nLINES2   EQU   C'0'\nSIGN     EQU   X'F0'\nHEXZERO  EQU   X'00'\nHEXFOUR  EQU   X'04'\nFULLMASK EQU   X'FF'\n         SPACE 3\n*--------------------------------------------------------------------*\n*              MSGEXIT  MACRO                                        *\n*--------------------------------------------------------------------*\n*        PRINT  OFF\n         MACRO\n&NAME    MSGEXIT &SPMSG=,&MSG=,&RETURN=,&ABEND=,&RC=8\n         LCLC  &ERRID\n         LCLC  &NAMEX\n         AIF   ('&SPMSG' NE '').MSGOK\n         AIF   ('&MSG' NE '').MSGOK\n         MNOTE 8,'** ERROR - NO MESSAGE NUMBER SPECIFIED.'\n         MEXIT\n.MSGOK   ANOP\n         AIF   ('&RETURN' NE '' OR '&ABEND' NE '').RETOK\n         MNOTE 8,'** ERROR - NO RETURN LABEL OR ABEND CODE SPECIFIED.'\n         MEXIT\n.RETOK   ANOP\n         AIF   ('&NAME' NE '').NAMEOK\n&ERRID   SETC  'ERROR&MSG'\n         AGO   .IDSET\n.NAMEOK  ANOP\n&ERRID   SETC  '&NAME'\n.IDSET   ANOP\n&ERRID   DS    0H\n         ST    R15,RCSAVE\n         AIF   ('&RC' EQ '').NORC\n         AIF   ('&MSG' EQ '').SPRC\n         LA    R0,&RC\n         ST    R0,FUNCRC\n         C     R0,HIGHRC\n         BL    MSGRC&MSG\n         ST    R0,HIGHRC\nMSGRC&MSG DS   0H\n         AGO   .NORC\n.SPRC    ANOP\n&NAMEX   SETC  'SPRC'.'&SYSNDX'\n         LA    R0,&RC\n         ST    R0,FUNCRC\n         C     R0,HIGHRC\n         BL    &NAMEX\n         ST    R0,HIGHRC\n&NAMEX    DS   0H\n.NORC    ANOP\n         AIF   ('&SPMSG' NE '').DOSP\n         LA    R1,&MSG\n         STH   R1,MPLNUM\n         XC    MPLSPADR,MPLSPADR\n         AGO   .DUMPX\n.DOSP    ANOP\n         LA    R1,&SPMSG\n         ST    R1,MPLSPADR\n         XC    MPLNUM,MPLNUM\n.DUMPX   ANOP\n         BAL   R14,MSGOUT\n         AIF   ('&RETURN' EQ '').GODUMP\n         B     &RETURN\n         MEXIT\n.GODUMP  ANOP\n         ABEND &ABEND,DUMP\n         MEXIT\n         MEND\n         PRINT ON\n*--------------------------------------------------------------------*\n*              MSGSETUP MACRO                                        *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n         MSGSETUP &TEXT\n         LCLC  &SEQ\n&SEQ     SETC  'MSG'.'&SYSNDX'\nMSGTABLE CSECT\n         DC    A(&SEQ)            ADDRESS OF MESSAGE BUFFER\nMSGTEXT  CSECT\n&SEQ     DS    0F\n         DC    AL2(&SEQ.L)        LENGTH OF TEXT\n         DC    X'4000'            MCS FLAGS FOR WTO\n&SEQ.B   DC    C&TEXT\n&SEQ.L   EQU   *-&SEQ             LENGTH OF WTO MESSAGE SETUP\n         MEND\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$SUB MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$SUB\n&L       STM   R14,R12,12(R13)     SAVE REGS\n         LA    R14,72(,R13)        NEXT SAVE\n         ST    R14,8(,R13)         CHAIN\n         ST    R13,4(,R14)          SAVE\n         LR    R13,R14             NEW SAVE\n         MEND\n         PRINT ON\n*--------------------------------------------------------------------*\n*              $$ERR MACRO                                           *\n*--------------------------------------------------------------------*\n         PRINT OFF\n         MACRO\n&L       $$ERR\n&I       SETA  &SYSNDX\n&L       LTR   R15,R15             ANY ERROS\n         BZ    $ER&I.A              NO\n         LR    R14,R0               YES\n         BR    R14                 GOTO ERROR\n$ER&I.A  DS    0H\n         MEND\n         PRINT ON\n         EJECT\nFIXDSCB  TITLE 'FIXDSCB - A DSCB MODIFICATION UTILITY.'\nFIXDSCB  CSECT\n         SAVE  (14,12),T,'FIXDSCB_&SYSDATC._&SYSTIME.'\n         LR    R10,R15            POINT BASE REGISTER TO ENTRY POINT\n         LA    R11,2048(R10)      SET UP\n         LA    R11,2048(R11)          SECOND BASE REG\n         LA    R12,2048(R11)      SET UP\n         LA    R12,2048(R12)          THIRD BASE REG\n         USING FIXDSCB,R10,R11,R12 ESTABLISH BASE REGISTERS\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    R13,SAVEAREA+4     POINTER TO CALLERS SAVEAREA\n         ST    R2,8(R13)          POINTER TO CALLED SAVEAREA\n         LR    R13,R2             STANDARD POINTER TO SAVEAREA\n         LR    R2,R1              SAVE ANY PARM POINTER\n         EXTRACT TSOWORD,FIELDS=(TSO) CHECK FOR TSO SESSION\n         L     R1,TSOWORD         PICK UP BYTE ADDRESS\n         TM    0(R1),X'80'        IS TSO SESSION BIT ON?\n         BO    SETUPTSO           BRANCH IF SO\n         SPACE 3\n*--------------------------------------------------------------------*\n*        EXECUTION IS BATCH OR STARTED TASK                          *\n*--------------------------------------------------------------------*\n         SPACE 3\n         LTR   R2,R2              IS ANY PARM PRESENT\n         BZ    NOPARM             BRANCH IF NOT\n         L     R1,0(R2)           LOAD PARM POINTER\n         LH    R2,0(R1)           PICK UP PARM LEN\n         LTR   R2,R2              IS LEN ZERO\n         BZ    NOPARM             BRANCH IF SO\n         C     R2,FOUR            IS LENGTH = 5\n         BNE   ERROR27            BRANCH IF NOT\n         CLC   TESTPARM,2(R1)     IS PARM 'TEST'\n         BNE   ERROR27            BRANCH IF NOT\n         OI    MASTFLAG,TESTONLY\n         B     NOPARM\n         SPACE 3\n*--------------------------------------------------------------------*\n*        EXECUTION IS AS A TSO COMMAND PROCESSOR                     *\n*--------------------------------------------------------------------*\n         SPACE 3\nSETUPTSO DS    0H\n         STAX  DEFER=YES          DISALLOW ATTENTION INTERRUPTS\n         OI    IOFLAG,TSOSESS     MARK AS TSO SESSION\n         OI    MPLIOF,TSOSESS     FLAG MPL AS WTO I/O REQUIRED\n         LR    R1,R2\n         LA    R15,72(,R13)\n         ST    R15,8(,R13)         PRECHAIN 1 SAVE AREA\n         ST    R13,4(,R15)         PRECHAIN 1 SAVE AREA\n         L     R15,=V(DSCPPL)\n         BALR  R14,R15\n         LR    R2,R1\n         ST    R2,CPPLHOLD        SAVE CPPL POINTER\n         USING CPPL,R2            ADDRESS COMMAND PROCESSOR PARM LIST\n         L     R1,CPPLPSCB        GET PSCB ADDRESS\n         USING PSCB,R1\n         TM    PSCBATR1,PSCBCTRL  DOES USER HAVE OPER AUTHORITY?\n         BNO   ERROR37            GET OUT IF NOT                    SJB\n         DROP  R1\n         L     R3,CPPLCBUF        PICK UP ADDRESS OF COMMAND BUFFER\n         USING CMDBUFR,R3         ADDRESS COMMAND BUFFER\n         LH    R1,CMDBLEN         PICK UP BUFFER LENGTH\n         S     R1,FOUR            DROP BY 4\n         CH    R1,CMDBOFF         COMPARE TO OFFSET\n*                                 IF LEN-4=OFFSET THEN NO PARMETERS\n*                                 SPECIFIED\n         BE    NOPARM\n         LH    R1,CMDBOFF         PICK UP OFFSET VALUE\n         LA    R1,4(R1,R3)        COMPUTE FIRST PARM ADDRESS\n         OC    0(4,R1),BLANKS     SHIFT TO UPPERCASE\n         TM    0(R1),X'BF'         ZERO OR BLANK\n         BE    NOPARM               YES, NOPARM\n         CLC   TESTPARM,0(R1)     IS PARM \"TEST\"\n         BNE   ERROR27            BRANCH TO ERROR IF NOT\n         OI    MASTFLAG,TESTONLY\n         B     NOPARM\n         DROP  R2\n         DROP  R3\n         EJECT\n*--------------------------------------------------------------------*\n*        INITIALIZE FOR RUN                                          *\n*--------------------------------------------------------------------*\n         SPACE 3\nNOPARM   DS    0H\n         L     R2,=A(ESTAEX)\n         ESTAE (2),CT,                                          SJB    X\n               TERM=YES,MF=(E,ESTAE)                            SJB\n         $AUTHON                                                SJB\n         MODESET KEY=ZERO,MODE=SUP\n         L     R1,X'21C'           PSAOLD (TCB)\n         L     R1,X'B4'(R1)        TCBJSCB\n         L     R1,X'15C'(R1)       JSCBACT\n         OI    X'F3'(R1),X'80'     JSCBPASS\n         MODESET KEY=NZERO,MODE=PROB                            SJB\n         SPACE 3\n         L     R1,CVTPTR          GET ADDRESS OF CVT\n         S     R1,PREFIXL         BACKUP TO START OF PREFIX\n         USING CVTFIX,R1          ADDRESS CVT AT PREFIX\n         CLC   CVTNUMB,MVSCODE    IS THIS AN MVS SYSTEM\n         BNE   NONMVS             SKIP IF NOT\n         OI    MASTFLAG,MVSSYS    TURN ON MVS FLAG\n         DROP  R1\nNONMVS   DS    0H\n         TM    IOFLAG,TSOSESS     IS THIS A TSO SESSION\n         BO    MESSAG33           BRANCH IF SO\n         SPACE 1\n         XR    R1,R1\n         USING PSA,R1             ADDRESS PSA\n         L     R1,PSAAOLD         GET OLD ASCB ADDRESS\n         DROP  R1\n         USING ASCB,R1            ADDRESS OUR ASCB\n         L     R1,ASCBCSCB        GET CSCB ADDRESS\n         DROP  R1\n         USING CHAIN,R1           ADDRESS CSCB\n         CLI   CHUCMP,HEXZERO     IS THIS FROM A CONSOLE (STARTED TASK)\n         BE    NOCON              BRANCH IF NOT\n         OI    IOFLAG,CONSOLE     FLAG AS CONSOLE I/O REQUIRED\n         OI    MPLIOF,CONSOLE     FLAG MPL AS WTO I/O REQUIRED\n         MVC   CONID,CHUCMP       SAVE CONSOLE ID\n         MVC   MPLCON,CONID       SAVE CONSOLE ID IN MPL\n         B     MESSAG33           DO NOT OPEN SYSIN/SYSPRINT FOR IO\nNOCON    DS    0H\n         OPEN  (SYSIN,INPUT)\n         OPEN  (SYSPRINT,OUTPUT)\n         DROP  R1\n         EJECT\n*--------------------------------------------------------------------*\n*        GET A COMMAND CARD AND PARSE IT FOR KEYWORDS                *\n*--------------------------------------------------------------------*\n         SPACE 3\nLOOP1    DS    0H\n         NI    FLAG2,255-($ALTER)\n         BAL   R14,DEQUE           BE SURE WE ARE NOT RESERVED 08/13/90\n         BAL   R5,CARDIN\nLOOP2    DS    0H\n         MVI   MSGCC,LINES2       SET CARRIAGE CONTROL\n         BAL   R14,PUTBLANK       GO PRINT BLANK LINE\n         BAL   R14,PUTCARD        GO PRINT CARD\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    LOOP1              SKIP IF SO\n         BAL   R14,SKIPB          SKIP LEADING BLANKS ON CARD\n         LTR   R5,R5              IS CARD ALL BLANKS\n         BZ    LOOP1              BRANCH IF SO\n         XC    FUNCRC,FUNCRC      ZERO OUT FUNCTION RETURN CODE\n         MVI   DSCBNAME,BLANK     SET DSN TO OMMITTED\n         MVI   VOLUME,BLANK       SET VOL TO OMMITTED\n         MVI   COMFLAG,HEXZERO    SET COMMAND CARD FLAG TO ZEROS\n         SPACE 1\n         BAL   R6,COMCARD         PICK APART THE COMMAND CARD\n         SPACE 1\n         TM    MASTFLAG,COMBADF   WAS COMMAND INVALID\n         BO    ERROR5\n         SPACE 3\n*--------------------------------------------------------------------*\n*        CHECK THAT ALL REQUIRED KEYWORDS WERE SPECIFIED             *\n*--------------------------------------------------------------------*\n         SPACE 3\n         L     R1,CURRENTF        LOAD CURRENT FUNCTION TABLE ADRS\n         L     R1,COMTRKWL(R1)    PICK UP RKW LIST ADRS\n         LTR   R1,R1              IS RKW ADRS ZERO (NO KEYWORDS REQRD)\n         BZ    LOOPVGO            GET OUT OF LOOP IF SO\n         L     R4,0(R1)           PICK UP FIRST KWT ADRS\n         XR    R2,R2              CLEAR REGS FOR OR\n         XR    R3,R3              CLEAR REGS FOR OR\n         IC    R3,COMFLAG         PICK UP COMMAND FLAG\nLOOPRKW  DS    0H\n         LTR   R4,R4              IS KWT ADRS ZERO\n         BZ    LOOPVGO            END OF KW TESTING IF SO\n         IC    R2,4(R4)           PICK UP REQUIRED FLAG MASK\n         NR    R2,R3              TEST FOR KW SPECIFIED\n         BZ    LOOPRERR           BRANCH IF OMMITTED\n         LA    R1,4(R1)           BUMP TO NEXT RKW ADRS IN LIST\n         L     R4,0(R1)           PICK UP NEXT KWT ADRS\n         B     LOOPRKW            CONTINUE\nLOOPRERR DS    0H\n         L     R2,4(R4)           PICK ERROR ROUTINE ADRS\n         BR    R2                 BRANCH TO ERROR ROUTINE\n         EJECT\n*--------------------------------------------------------------------*\n*        COMMAND CHECKED OUT OK                                      *\n*                                                                    *\n*        FIND A DD IN TIOT THAT MATCHES VOLUME REQUESTED             *\n*        NOTE: WE MUST EXTRACT TIOT ADDRESS EACH TIME                *\n*              SINCE IT MIGHT CHANGE DUE TO DYNAMIC ALLOCATION.      *\n*--------------------------------------------------------------------*\n*\n         SPACE 3\nLOOPVGO  DS    0H\n         TM    VTOCDCB+(DCBOFLGS-IHADCB),DCBOFOPN IS IT OPEN\n         BZ    LOOPVGO2             NO, SKIP CLOSE\n         CLOSE (VTOCDCB)\nLOOPVGO2 DS    0H\n         CLI   VOLUME,BLANK        IS A VOLUME PRESENT\n         BE    NOVOL               SKIP IF NOT\n         EXTRACT TIOTADRS,FIELDS=(TIOT) GET TIOT ADDRESS\n         L     R1,TIOTADRS         PICK UP TIOT ADDRESS\n         USING TIOT,R1             ADDRESS TIOT\n         LA    R1,TIOENTRY\n         DROP  R1\n         USING TIOENTRY,R1         ADDRESS TIOT\nLOOPVOL  DS    0H\n         CLI   TIOELNGH,0          END OF TIOT?\n         BE    CKMVS               GO CHECK FOR MVS SYSTEM\n         SPACE 1\n         CLC   TIOEDDNM,=XL8'00'   ZERO  DDNAME                09/11/91\n         BE    CKMVS                YES, END OF TIOT           09/11/91\n         TM    TIOESTTA,TIOSLTYP   FREED TIOT ENTRY            09/11/91\n         BO    VOLINCR              YES, SKIP ENTRY            09/11/91\n         CLI   TIOEDDNM,C' '       IS IT DDNAME BLANKS(CONCAT) 08/13/90\n         BE    VOLINCR              YES, BYPASS                08/13/90\n         SPACE 1\n         L     R2,TIOESTTB         PICK UP TIOT ENTRY UCB ADDRESS\n         N     R2,=A(X'00FFFFFF')    CLEAR HIGH BYTE\n         BZ    VOLINCR\n         USING UCBCMSEG,R2         ADDRESS UCB\n         CLC   VOLUME,UCBVOLI      VOLUME MATCH\n         BE    FOUNDV              BRANCH IF SO\nVOLINCR  DS    0H                                              08/13/90\n         LR    R14,R15             SAVE LAST TIOT FOR DEBUGGING\n         LR    R15,R1              SAVE LAST TIOT FOR DEBUGGING\n         XR    R3,R3               CLEAR INDEX REG\n         IC    R3,TIOELNGH         PICK UP ENTRY LENGTH\n         LA    R1,0(R3,R1)         BUMP TO NEXT TIOT ENTRY\n         B     LOOPVOL             CONTINUE SEARCH\n         SPACE 2\nFOUNDV   DS    0H\n         ST    R2,UCBADDR          SAVE UCB ADDR FOR CVAF\n         MVC   VOLUNIT,UCBTYP      SAVE UNIT TYPE IN FOR LATER\n         DROP  R2\n         LA    R2,VTOCDCB          @ OF DCB\n         USING IHADCB,R2\n         MVC   DCBDDNAM,TIOEDDNM   MOVE IN DDNAME\n         B     VTOCCHK             CHECK VTOC\n         DROP  R1,R2\n         SPACE 3\nCKMVS    DS    0H\n*--------------------------------------------------------------------*\n*        CHECK FOR MVS OPERATING SYSTEM                              *\n*        IF MVS THEN DYNAMICALLY  ALLOCATE VOLUME REQUIRED           *\n*--------------------------------------------------------------------*\n         TM    MASTFLAG,MVSSYS     IS THIS MVS\n         BO    ALOCDYN              YES,ALLOCATE DYNAMICALLY\n         SPACE 1\n         TM    IOFLAG,TSOSESS      IS THIS A TSO SESSION\n         BO    ALOCDAIR            GO ALLOCATE WITH DAIR IF SO\n         B     ERROR29             CANNOT DYNAMICALLY ALLOCATE\n         SPACE 3\nALOCDYN  DS    0H\n         XC    S99F1,S99F1         CLEAR SVC 99 R11 FLAG1\n         XC    S99F2,S99F2         CLEAR SVC 99 R11 FLAG2\n         LA    R1,S99RBPTR         LOAD ADDRESS OF R11 POINTER\n         DYNALLOC\n         LTR   R15,R15             CHECK SVC 99 RETURN CODES\n         BNZ   DYNERROR            BRANCH IF BAD\n         CLC   S99ERROR,ZERO       CHECK ERROR CODE\n         BNE   DYNERROR            BRANCH IF BAD\n         B     LOOPVGO             GO RESCAN TIOT\n         SPACE 3\nVTOCCHK  DS    0H\n*--------------------------------------------------------------------*\n*              FOUND UCB, SEE IF IT IS INDEXED                       *\n*--------------------------------------------------------------------*\n         L     R2,UCBADDR          SAVE UCB ADDR FOR CVAF\n         NI    FLAG2,255-$INDEX    TURN OFF INDEX FLAG         06/29/84\n         MVC   CVAFFUNC,=CL20'VTOC-INDEXED'                    05/08/92\n         CVAFTST UCB=(R2)          ENTER CHECK FOR INDEXED VTOC\n         C     15,=F'8'            CHECK IF INDEXED VTOC\n         BL    VTOCOS              IF NOT INDEX, SKIP          06/29/84\n         BE    VTOCIX\n         ST    R15,FUNCRC          SAVE AS FUNCTION RETURN CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG8R1,DOUBLE\n         OI    SPMG8R1+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP8               ERROR\nVTOCIX   DS    0H\n         OI    FLAG2,$INDEX        INDICATE INDEX VTOC IN USE  06/29/84\nVTOCOS   DS    0H\n         B     GETJFCB             GO GET THE VTOC DCB JFCB\n         SPACE 3\n*--------------------------------------------------------------------*\n*        GET THE JFCB FOR THE DD FOUND AND OPEN THE VTOC             *\n*--------------------------------------------------------------------*\n         SPACE 3\nGETJFCB  DS    0H\n         RDJFCB (VTOCDCB,(UPDAT))  GET THE JFCB\n         LTR   R15,R15             DID WE REALLY GET IT ??\n         BNZ   ERROR1               NO\n         LA    R1,JFCBAREA         GET ADDRESS OF INTERNAL JFCB\n         USING JFCBDSCT,R1         ADDRESS JFCB\n         MVI   JFCBDSNM,HEXFOUR    FIX UP THE DSNAME\n         MVC   JFCBDSNM+1(43),JFCBDSNM          OF THE VTOC\n         OI    JFCBTSDM,JFCNWRIT   DO NOT MERGE BACK\n         OI    JFCBOPS1+4,JFCBMOD  FLAG JFCB AS MODIFIED\n         DROP  R1                  DROP JFCB ADDRESSABILITY\n         OPEN  (VTOCDCB,(UPDAT)),TYPE=J  OPEN THE VTOC\n         LA    R1,VTOCDCB          PICK UP DCB ADDRESS\n         USING IHADCB,R1           ADDRESS DCB\n         TM    DCBOFLGS,DCBOFOPN   DID OPEN WORK\n         BNO   ERROR31             BRANCH IF NOT\n         SPACE 1\n         L     R2,DCBDEBAD         DEBADDR\n         N     R2,=A(X'00FFFFFF')\n         LA    R2,DEBBASND-DEBBASIC(R2)\n         L     R2,DEBUCBAD-DEBDASD(R2) UCB ADDR\n         N     R2,=A(X'00FFFFFF')\n         ST    R2,UCBADDR          SAVE UCB ADDR FOR CVAF\n         DROP  R1\n         SPACE 2\n         CLI   DSCBNAME,BLANK      DSNAME BLANK\n         BE    NODSN                YES, SKIP\n         SPACE 3\n*--------------------------------------------------------------------*\n*        READ THE DSCB FOR DATASET FROM VTOC VIA CVAF READ           *\n*--------------------------------------------------------------------*\n         SPACE 3\n         LA    R9,DSCBAREA\n         USING DSCB,R9             ADDRESS DSCB\n         LA    R8,WCVAF\n         USING CVPL,R8             ADDRESS CVPL AREA\n         SPACE 3\n         BAL   R14,READDSCB\nCVAFTST1 DS    0H\n         $$ERR ,\n         OI    FLAG2,$CVAFDIR      CVAFDIR DONE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        FIND THE ADDRESS OF THE ROUTINE TO PROCESS THE COMMAND      *\n*        IN THE COMMAND TABLE.                                       *\n*--------------------------------------------------------------------*\n*\n         SPACE 3\nNODSN    DS    0H\nNOVOL    DS    0H\n         L     R2,CURRENTF         RELOAD FUNCTION TABLE ADDRESS\n         L     R2,COMTADR(R2)      GET ADDRESS OF COMMAND ROUTINE\n         BR    R2\n         EJECT\n*--------------------------------------------------------------------*\n*              COMMAND EXECUTION\n*--------------------------------------------------------------------*\n*\n*        RENEW THE CREATION DATE TO TODAYS DATE\n*\n*--------------------------------------------------------------------*\n         SPACE 3\nRENEW    DS    0H\n         TIME  DEC                 GET THE TIME AND DATE\n         MVC   THYMEOYR,PACK8ZRO   ZERO OUT THE YEAR\n         MVC   DAYTHYME,PACK8ZRO   ZERO OUT THE DAY\n         STH   R1,DAYTHYME+6       CONVERT TO USABLE FORMAT\n         SRL   R1,8\n         IC    R1,MASKC0\n         SRL   R1,R4\n         STH   R1,THYMEOYR+6\n         CVB   R1,DAYTHYME\n         ST    R1,DAYTHYME+4\n         CVB   R1,THYMEOYR\n         ST    R1,THYMEOYR+4\n         MVC   DS1CREDT(1),THYMEOYR+7    MOVE IN YEAR\n         MVC   DS1CREDT+1(2),DAYTHYME+6  MOVE IN DAY OF YEAR\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SWAP THE CREATION AND EXPIRATION DATE FIELDS                *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nEXPIRE   XC    DS1CREDT,DS1EXPDT  INVERT\n         XC    DS1EXPDT,DS1CREDT         TWO\n         XC    DS1CREDT,DS1EXPDT              FIELDS\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE EXPIRATION DATE TO 00:000                           *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nZEROEXPD DS    0H\n         MVC   DS1EXPDT,ZERODATE\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE EXPIRATION DATE TO 99:365                           *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nEXTEND   DS    0H\n         MVC   DS1EXPDT,MAXDATE\n         B     DSCBWRIT\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE RACF BIT ON                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nRACFON   OI    DS1DSIND,DS1IND40   RACF ON\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE RACF BIT ON                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nRACFOFF  NI    DS1DSIND,FULLMASK-DS1IND40 TURN OFF RACF BIT\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE PASSWORD PROTECTION BITS FOR FULL PROTECTION        *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nPROTECT  OI    DS1DSIND,DS1IND10\n         NI    DS1DSIND,FULLMASK-DS1IND04\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE PASSWORD PROTECTION BITS FOR READ ONLY ACCESS       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nSETNOPWR OI    DS1DSIND,DS1IND10\n         OI    DS1DSIND,DS1IND04\n         B     DSCBWRIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SET THE PASSWORD PROTECTION BIT OFF                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nUNLOCK   NI    DS1DSIND,FULLMASK-DS1IND10  OS PASSWORD PROTECT\n         NI    DS1DSIND,FULLMASK-DS1IND04  OS R/W PASSWORD\n         NI    DS1DSIND,FULLMASK-DS1IND40  RACF                 SJB\n         B     DSCBWRIT\n         SPACE  3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        CHANGE THE DSNAME TO A NEW NAME                             *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nRENAME   DS    0H\n         OI    FLAG2,$ALTER\n         MVC   DS1DSNAM,NEWNAME    ADD NEWDSN INDX\n         BAL   R14,ADDVIR\n         $$ERR ,\n         SPACE 3\n         MVC   DS1DSNAM,DSCBNAME   DEL OLDDSN INDX\n         BAL   R14,DELVIR\n         $$ERR ,\n         SPACE 3\n         MVC   DS1DSNAM,NEWNAME    MOVE NEWNAME INTO DSCB1\n         BAL   R14,WRITDSCB\n         $$ERR ,\n         B     CLOSEX              JUST AFTER DSCBWRIT\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*        PERFORM SCRATCH REQUEST                                     *\n*                                                                    *\n*        LOGIC: DATASET IS RENAMED TO 'FIXDSCB.SCRATCH.DATASET',     *\n*               ANY PASSWORD PROTECTION BITS ARE TURNED OFF,         *\n*               AND THE EXPIRATION DATE IS RESET TO ZERO.            *\n*               THE MODIFIED DATASET IS THEN DELETED VIA             *\n*               A SCRATCH SVC.                                       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nSCRATCH  DS    0H\n         OI    FLAG2,$ALTER\n         MVC   DS1DSNAM,TEMPNAME  MOVE TEMPNAME TO DSCB\n         NI    DS1DSIND,FULLMASK-DS1IND10 TURN OFF ANY\n         NI    DS1DSIND,FULLMASK-DS1IND04        PASSWORD BITS\n         NI    DS1DSIND,FULLMASK-DS1IND40  RACF                 SJB\n         MVC   DS1EXPDT,ZERODATE  SET EXPDT TO ZERO\n         TM    MASTFLAG,TESTONLY  IS THIS A TEST\n         BO    MESSAG28           SKIP IF SO\n         SPACE 1\n         XR    R0,R0               ZERO REG 0 FOR SCRATCH (NO UCB)\n         SCRATCH SCRLIST          SCRATCH ANY REMAINING TEMP DATASET\n         SPACE 3\n         MVC   DS1DSNAM,TEMPNAME   IX ADD TEMPNAME\n         BAL   R14,ADDVIR\n         $$ERR ,                   EXPECTS R0 = ERROR RETURN ADDR\n         SPACE 3\n         MVC   DS1DSNAM,DSCBNAME   IX DELETE DSCBNAME\n         BAL   R14,DELVIR\n         $$ERR ,                   EXPECTS R0 = ERROR RETURN ADDR\n         SPACE 3\n         MVC   DS1DSNAM,TEMPNAME   RENAME TO TEMPNAME\n         BAL   R14,WRITDSCB\n         $$ERR ,                   EXPECTS R0 = ERROR RETURN ADDR\n         CLOSE VTOCDCB             CLOSE VTOC\n         BAL   R14,DEQUE           DEQUE BEFORE SCRATCH        08/13/90\n         SPACE 1\n         XR    R0,R0               ZERO REG 0 FOR SCRATCH (NO UCB)\n         SCRATCH SCRLIST           ISSUE SCRATCH REQ. TEMPNAME\n         SPACE 1\n         LTR   R15,R15             SCRATCH WORK OK\n         BZ    FUNCMSG             BRANCH IF SO\n         SPACE 1\n*--------------------------------------------------------------------*\n*              IF SCRATCH FAILED PRINT A MESSAGE AND ABEND           *\n*--------------------------------------------------------------------*\nSCRFAIL  DS    0H\n         ST    R15,FUNCRC          SAVE AS FUNCTION RETURN CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG2R1,DOUBLE\n         OI    SPMG2R1+3,SIGN      MAKE SIGN PRINTABLE\n         LH    R15,VOLSTAT         PICK UP REASON CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG2R2,DOUBLE\n         OI    SPMG2R2+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP2              GO PRINT SPECIAL MESSAGE\n         EJECT\n*--------------------------------------------------------------------*\n*        PROCESS NAME SUBCOMMANDS                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nNAME     DS    0H\n         B     ERROR35             WRITE 'RESERVED' MSG AND GOTO NAME2\nNAME2    DS    0H\n         OI    MASTFLAG,GETSUBC    FLAG GET AS SUBCOMMAND REQUEST\n         BAL   R14,GETACARD        GO GET A SUBCOMMAND CARD\n         NI    MASTFLAG,FULLMASK-GETSUBC TURN OFF SUBC REQUEST FLAG\n         BAL   R14,SKIPB           SKIP LEADING BLANKS ON SUBCOMMAND\n         LTR   R5,R5               ALL BLANKS (IMPOSSIBLE)\n         BZ    NAME                SKIP IF SO\n         LA    R2,SUBTABLE         GET ADDRESS OF SUBCOMMAND TABLE\nSUBTCK   DS    0H\n         CLI   0(R2),BLANK         END OF TABLE?\n         BE    SUBTPRIM            BRANCH IF SO\n         L     R3,SUBTSCL(R2)      LOAD LENGTH OF SUBCOMMAND\n         BCTR  R3,0                DROP FOR EXECUTE\n         EX    R3,SUBCTEST         TEST FOR SUBCOMMAND\n         BNE   SUBTNO\n*--------------------------------------------------------------------*\n*              PRINT VALID SUBCOMMAND CARD                           *\n*--------------------------------------------------------------------*\n         MVI   MSGCC,LINES1        SET CARRIAGE CONTROL\n         BAL   R14,PUTCARD\n         L     R2,SUBTADR(R2)      LOAD ADDRESS OF ROUTINE\n         BR    R2\nSUBTNO   DS    0H\n         LA    R2,SUBTLEN(R2)      BUMP TO NEXT ENTRY\n         B     SUBTCK\n         SPACE  3\n*--------------------------------------------------------------------*\n*        CHECK IF UNKNOWN SUBCOMMAND IS REALLY A PRIMARY COMMAND     *\n*--------------------------------------------------------------------*\n         SPACE 1\nSUBTPRIM DS    0H\n         OI    MASTFLAG,PARTSCAN  SET FOR COMMAND SCAN ONLY\n         BAL   R6,COMCARD\n         NI    MASTFLAG,FULLMASK-PARTSCAN TURN OFF PARTSCAN FLAG\n         TM    MASTFLAG,COMBADF WAS COMMAND INVALID\n         BO    ERROR9\n         LA    R2,COMTABLE        GET ADDRESS OF COMMAND TABLE\nSUBTPRM2 DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    SUBTBAD            MUST BE BAD SUBCOMMAND\n         CLC   COMMAND2,0(R2)     IS THIS A PRIMARY COMMAND\n         BE    SUBTPRMF           YES, GET OUT OF LOOP\n         LA    R2,COMTLEN(R2)     BUMP TO NEXT EXTRY\n         B     SUBTPRM2\nSUBTPRMF DS    0H\n         OI    MASTFLAG,PRIMEND   FLAG NAME ENDED BY PRIMARY COMMAND\n         B     DSCBWRIT\nSUBTBAD  DS    0H\n*--------------------------------------------------------------------*\n*              PRINT INVALID SUBCOMMAND CARD                         *\n*--------------------------------------------------------------------*\n         MVI   MSGCC,LINES1       SET CARRIAGE CONTROL\n         BAL   R14,PUTCARD\n         B     ERROR9\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE OPTCODE TO THAT SPECIFIED                         *\n*--------------------------------------------------------------------*\n         SPACE 1\nOPTCODE  DS    0H\n         LA    R5,7(R5)           SKIP PAST OPTCODE KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF OPTCODE\n         MVC   OPTCODEH(1),0(R5) MOVE OPTCODE TO HOLDER\n         LA    R2,OPTCODET        GET ADDRESS OF OPTCODE TABLE\nOPTCODEL DS   0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR34            ERROR IF SO\n         CLC   OPTCODEH,0(R2)     OPTCODE MATCH TABLE ENTRY\n         BE    OPTCODEF           BRANCH IF SO\n         LA    R2,OPTCLEN(R2)     BUMP TO NEXT ENTRY\n         B     OPTCODEL\nOPTCODEF DS  0H\n         MVC   DS1OPTCD,OPTCMASK(R2) MOVE MASK BYTE TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*--------------------------------------------------------------------*\n*        RESET THE LRECL TO THE SPECIFIED VALUE                      *\n*--------------------------------------------------------------------*\n         SPACE 1\nLRECL    DS    0H\n         LA    R5,5(R5)           SKIP PAST LRECL KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF LRECL\nLRECLL1  DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    LRECLEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     LRECLL1            CONTINUE\n         SPACE 1\nLRECLEND DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,LRECLPCK        PACK THE LRECL VALUE\n         CVB   R3,DOUBLE          CONVERT LRECL TO BINARY\n         C     R3,BIGLRECL        IS LRECL TOO BIG\n         BH    ERROR10            BRANCH IF SO\n         STH   R3,DS1LRECL        STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE BLKSIZE TO THE SPECIFIED VALUE                    *\n*--------------------------------------------------------------------*\n         SPACE 1\nBLKSIZE  DS    0H\n         LA    R5,7(R5)           SKIP PAST BLKSIZE KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF BLKSIZE\nBLKSZL1  DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    BLKSZEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     BLKSZL1            CONTINUE\n         SPACE 1\nBLKSZEND DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,BLKSZPCK        PACK THE BLKSIZE VALUE\n         CVB   R3,DOUBLE          CONVERT BLKSIZE TO BINARY\n         C     R3,BIGLRECL        IS BLKSIZE TOO BIG\n         BH    ERROR11            BRANCH IF SO\n         STH   R3,DS1BLKL         STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE RECORD FORMAT TO THAT SPECIFIED                   *\n*--------------------------------------------------------------------*\n         SPACE 1\nRECFM    DS    0H\n         LA    R5,5(R5)           SKIP PAST RECFM KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RECMF\n         MVC   RECFMH(5),0(R5)    MOVE RECFM TO HOLDER\n         LA    R2,RECFMTAB        GET ADDRESS OF RECFM TABLE\nRECFMLP  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR21            ERROR IF SO\n         CLC   RECFMH,0(R2)       RECFM MATCH TABLE ENTRY\n         BE    RECFMFND           BRANCH IF SO\n         LA    R2,RECFMLEN(R2)    BUMP TO NEXT ENTRY\n         B     RECFMLP\nRECFMFND DS    0H\n         MVC   DS1RECFM,RECFMASK(R2) MOVE MASK BYTE TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n         EJECT\n*--------------------------------------------------------------------*\n*        RESET THE DSORG TO THAT SPECIFIED                           *\n*--------------------------------------------------------------------*\n         SPACE 1\nDSORG    DS    0H\n         LA    R5,5(R5)           SKIP PAST DSORG KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RECMF\n         MVC   DSORGH(5),0(R5)    MOVE DSORG TO HOLDER\n         LA    R2,DSORGTAB        GET ADDRESS OF DSORG TABLE\nDSORGLP  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR22            ERROR IF SO\n         CLC   DSORGH,0(R2)       DSORG MATCH TABLE ENTRY\n         BE    DSORGFND           BRANCH IF SO\n         LA    R2,DSORGLEN(R2)    BUMP TO NEXT ENTRY\n         B     DSORGLP\nDSORGFND DS    0H\n         MVC   DS1DSORG(2),3(R2)  MOVE DSORG MASK TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE KEYL TO THE SPECIFIED VALUE                       *\n*--------------------------------------------------------------------*\n         SPACE 1\nKEYL     DS    0H\n         LA    R5,4(R5)           SKIP PAST KEYL KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF KEYL\nKEYLL1   DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    KEYLEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     KEYLL1             CONTINUE\n         SPACE 1\nKEYLEND  DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,KEYLPCK         PACK THE KEYL VALUE\n         CVB   R3,DOUBLE          CONVERT KEYL TO BINARY\n         C     R3,BIGKEYL         IS KEYL TOO BIG\n         BH    ERROR23            BRANCH IF SO\n         STC   R3,DS1KEYL         STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RESET THE RELATIVE KEY POSITION TO THE SPECIFIED VALUE      *\n*--------------------------------------------------------------------*\n         SPACE 1\nRKP      DS    0H\n         LA    R5,3(R5)           SKIP PAST RKP KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RKP\nRKPL1    DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    RKPEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     RKPL1              CONTINUE\n         SPACE 1\nRKPEND   DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,RKPPCK          PACK THE RKP VALUE\n         CVB   R3,DOUBLE          CONVERT RKP TO BINARY\n         C     R3,BIGRKP          IS RKP TOO BIG\n         BH    ERROR24            BRANCH IF SO\n         STCM  R3,3,DS1RKP        STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        END THE NAME SUBCOMMAND SET                                 *\n*--------------------------------------------------------------------*\n         SPACE 3\nENDNAME  DS    0H\n         EJECT ,\n*--------------------------------------------------------------------*\n*              REWRITE THE DSCB/VIER                                 *\n*--------------------------------------------------------------------*\nDSCBWRIT DS    0H\n         SPACE 1\n         BAL   R14,WRITDSCB\n         $$ERR ,\n         SPACE 1\nCLOSEX   DS    0H                  ALSO ENTERED VIA ERRORMSG\n         TM    VTOCDCB+(DCBOFLGS-IHADCB),DCBOFOPN IS IT OPEN\n         BZ    CLOSEX2              NO, SKIP CLOSE\n         CLOSE (VTOCDCB)\nCLOSEX2  DS    0H\n         BAL   R14,DEQUE                                       08/13/90\n         SPACE 3\n*--------------------------------------------------------------------*\n*        ISSUE THE FUNCTION COMPLETED MESSAGE                        *\n*--------------------------------------------------------------------*\n         SPACE 3\nFUNCMSG  DS    0H\n         BAL   R14,RLSEVIER\n         SPACE 3\n         CLC   FUNCRC,ZERO        WAS COMMAND SUCCESSFUL\n         BE    MESSAG32           PRINT MESSAGE IF SO\nFUNCMSG2 DS    0H\n         L     R1,FUNCRC\n         CVD   R1,DOUBLE\n         UNPK  SPMG0R,DOUBLE\n         OI    SPMG0R+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP0\nFUNCMEND DS    0H\n         NI    MASTFLAG,FULLMASK-COMBADF TURN OFF ANY BAD COMMAND FLAG\n         TM    MASTFLAG,GETSUBC   DID EODAD OCCUR DURING SUBC PRCS\n         BO    CLOSE2             GET OUT IF SO\n         TM    MASTFLAG,PRIMEND   WAS A PRIMARY COMMAND FOUND\n         BNO   LOOP1              BRANCH IF NOT\n         NI    MASTFLAG,FULLMASK-PRIMEND TURN OFF FLAG\n         B     LOOP2               GOTO LOOP2\n         EJECT\n*--------------------------------------------------------------------*\n*        CLOSE THE FILES AND TERMINATE                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nEND      DS    0H\nCLOSE    DS    0H\nCLOSE01  DS    0H\n         TM    MASTFLAG,GETSUBC    WAS GET FOR A SUBCOMMAND\n         BZ    CLOSE1               NO\n         BAL   R14,WRITDSCB\n         B     FUNCMSG\nCLOSE1   DS    0H\n         TM    MASTFLAG,CARD2TRY  WAS GET FOR A CONTINUATION CARD\n         BO    ERROR25            BRANCH IF SO\nCLOSE2   DS    0H\n         L     R1,HIGHRC\n         C     R1,FUNCRC\n         BH    GOTRC\n         L     R1,FUNCRC\nGOTRC    DS    0H\n         CVD   R1,DOUBLE\n         UNPK  SPMG1R,DOUBLE\n         OI    SPMG1R+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP1             GO PRINT SPECIAL MESSAGE\nCLOSEND  DS    0H\n         TM    IOFLAG,CONSOLE     CONSOLE I/O USED\n         BO    RETURN\n         TM    IOFLAG,TSOSESS     TSO I/O USED\n         BO    RETURN\n         CLOSE SYSIN\n         CLOSE SYSPRINT\nRETURN   DS    0H\n         $AUTHON                                                SJB\n         MODESET KEY=ZERO,MODE=SUP\n         L     R1,X'21C'           PSAOLD (TCB)\n         L     R1,X'B4'(R1)        TCBJSCB\n         L     R1,X'15C'(R1)       JSCBACT\n         NI    X'F3'(R1),255-X'80' JSCBPASS\n         MODESET KEY=NZERO,MODE=PROB\n         $AUTHOFF                                               SJB\n         L     R15,HIGHRC         GET RETURN CODE\n         L     13,SAVEAREA+4      POINT TO CALLERS SAVEAREA\n         RETURN (14,12),T,RC=(15) STANDARD RETURN\n         EJECT\n*--------------------------------------------------------------------*\n*        SET UP SPECIAL MESSAGE FOR DYNAMIC ALLOCATION FAILURE       *\n*--------------------------------------------------------------------*\n         SPACE 3\nDYNERROR DS    0H\n         ST    R15,DYNRETC        STORE RETURN CODE IN HOLDER\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX R12\n         SPACE 1\n         STCM  R15,15,SPMG3R1     STORE IN MESSAGE\n         LH    R15,S99ERROR       PICK UP ERROR CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG3R2     STORE IN MESSAGE\n         LH    R15,S99INFO        PICK UP INFORMATION CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG3R3     STORE IN MESSAGE\n         MVI   DFFLAGS+1,X'32'    FLAG AS SVC99 REQUEST\n         LA    R1,S99RB\n         ST    R1,DFS99RB         STORE SVC 99 R11 ADDRS IN DF BLOCK\n         LA    R1,DFS99RB         GET ADDRESS OF DF PARM BLOCK\n         LINK  EP=IKJEFF18\n         LTR   R15,R15            EXTRACT WORK OK\n         BZ    DOS99ER\n         XC    DFBUFL1(2),DFBUFL1 CLEAR BUFFER LENGTH OF DF MSG\n         XC    DFBUFL2(2),DFBUFL2 CLEAR BUFFER LENGTH OF DF MSG\n         B     ERROR12\nDOS99ER  DS    0H\n         MVI   DFBUF01,X'40'      SET DF BUFFERS INTO WTO FORMAT\n         MVI   DFBUF01+1,X'00'\n         MVI   DFBUF02,X'40'\n         MVI   DFBUF02+1,X'00'\n         B     ERROR12\n         EJECT\n*--------------------------------------------------------------------*\n*        PARSE A COMMAND CARD FOR KEYWORDS                           *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMCARD  DS    0H\n         MVC   COMMAND,BLANKS     BLANK OUT COMMAND NAME HOLDER\n         MVC   COMMAND2,BLANKS    BLANK OUT COMMAND NAME HOLDER\n         LR    R3,R5              GET START OF CARD\n         LA    R4,9               SET MAX COMMAND NAME LENGTH\nCOMCLOOP DS    0H\n         CLI   0(R3),BLANK        BLANK?\n         BE    COMCEND            YES, END OF COMMAND NAME\n         CLI   0(R3),EQUAL        INVALID =?\n         BE    COMBAD             YES, FLAG AS BAD\n         LA    R3,1(R3)           BUMP TO NEXT CARD COLUMN\n         BCT   R4,COMCLOOP\n         B     COMBAD             GO FLAG AS BAD\nCOMCEND  DS    0H\n         LA    R4,1(R3)           SAVE ADDRESS OF NEXT BYTE\n         SR    R3,R5              SUBTRACT TO GEN COMMAND LENGTH\n         ST    R3,COMLEN          SAVE LENGTH OF COMMAND\n         BCTR  R3,0               DROP FOR EXECUTE\n         TM    MASTFLAG,PARTSCAN  COMMAND SCAN ONLY?\n         BO    COMMOVE2\n         EX    R3,COMMOVE         MOVE IN COMMAND NAME\n         B     COMPRECK\n         SPACE 1\nCOMMOVE2 DS    0H\n         EX    R3,COM2MOVE        MOVE IN COMMAND NAME\n         BR    R6\n         SPACE 1\nCOMBAD   DS    0H\n         OI    MASTFLAG,COMBADF SET BAD COMMAND FLAG\n         BR    R6\n         SPACE 3\n*\n*        CHECK THE COMMAND VERB FOR ONE THAT WE RECOGNIZE.\n*\n         SPACE 3\nCOMPRECK DS    0H                 SEARCH FOR A KEYWORD AFTER COMMAND\n         LA    R2,COMTABLE        GET ADDRESS OF COMMAND TABLE\nCOMPREF  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    COMBAD             ERROR IF SO\n         CLC   COMMAND,0(R2)      IS THIS THE COMMAND\n         BE    COMKEYSR           YES, GET OUT OF LOOP\n         LA    R2,COMTLEN(R2)     BUMP TO NEXT EXTRY\n         B     COMPREF\n         SPACE 3\n*\n*        SEARCH THE CARD FOR KEYWORDS\n*\n         SPACE 3\nCOMKEYSR DS    0H\n         ST    R2,CURRENTF        SAVE TABLE ENTRY ADDRESS\n         LA    R1,71              LOAD TOTAL CARD LENGTH - 1\n         S     R1,COMLEN          SUBTRACT OFF COMMAND LENGTH\nCOMKEYSX DS    0H                 SEARCH FOR A KEYWORD AFTER COMMAND\n*                                 ONLY KEYWORDS ALLOWED ARE:\n*                                   DSNAME=, DSN=, D=\n*                                   VOLUME=, VOL=, V=\n*                                   NEWNAME=, NEWN=, NN=, N=\n*\n         SPACE 1\n         LR    R5,R4              SAVE ADDRESS OF POSSIBLE KEYW START\n         CLI   0(R4),BLANK        BLANK?\n         BNE   COMCKWT            NO\n         LA    R4,1(R4)           BUMP TO NEXT COL\n         BCT   R1,COMKEYSX\n         SPACE 1\n*        THE REST OF THE CARD WAS BLANK.  IS THIS AN ERROR?\n         L     R2,COMTRKWL(R2)    PICK UP KWT LIST ADDRESS\n         LTR   R2,R2              IS IT ZERO (NO KEYWORDS REQUIRED)\n         BZR   R6                 RETURN IF SO\n         B     ERROR38            ERROR IF NOT\n         SPACE 3\n*\n*        TEST IF ANY OF THE REQUIRED KEYWORDS MATCHE THE KEYWORD FOUND\n*\n         SPACE 3\nCOMCKWT  DS    0H\n         L     R2,COMTRKWL(R2)    PICK UP REQUIRED KEYWORD LIST ADRS\n         LTR   R2,R2              ANY KEYWORDS REQUIRED\n         BZ    COMCOPTS           CHECK FOR OPTIONAL KEYWORDS\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         STM   R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\nCOMCKEY  DS    0H\n         LM    R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\nCOMCKEY2 DS    0H\n         LTR   R3,R3              IS NEXT KWT ADDRESS ZERO\n         BZ    COMCOPTS           GO LOOK FOR OPTIONAL KEYWORDS\n         L     R14,0(R3)          PICK UP RTN ADDRESS\n         LA    R3,8(R3)           BUMP TO LIST PROPER\n         XR    R1,R1              CLEAR REG 1 FOR LENGTH\nCOMCKEYL DS    0H\n         IC    R1,0(R3)           PICK UP LENGTH\n         LTR   R1,R1              END OF KWT\n         BNZ   COMCKEYM           BRANCH IF NOT\n         LA    R2,4(R2)           BUMP TO NEXT KWT SLOT\n         L     R3,0(R2)           PICK UP NEXT KWT ADDRESS\n         B     COMCKEY2           PROCESS NEXT KWT\nCOMCKEYM DS    0H\n         BCTR  R1,0               DROP FOR EXECUTE\n         EX    R1,KEYWTEST        COMPARE FOR KEYWORD MATCH\n         BNE   COMCNOM            BRANCH TO ROUTINE IF MATCH\n         L     R2,CURRENTF        RELOAD CURRENT FUNCTION TABLE ADRS\n         L     R2,COMTRKWL(R2)    RESER RKW LIST TO START\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         BR    R14                BRANCH TO ROUTINE\nCOMCNOM  DS    0H\n         LA    R3,2(R1,R3)        BUMP TO NEXT ENTRY IN KWT\n         B     COMCKEYL\n         SPACE 5\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SINCE THE KEYWORD DOES NOT MATCH A REQUIRED KEYWORD         *\n*        SEE IF IT MAY BE AN OPTIONAL KEYWORD.                       *\n*                                                                    *\n*        NOTE: NO OPTIONAL KEYWORDS ARE DEFINED IN THIS RELEASE.     *\n*              THIS FACILITY WAS BUILT IN FOR FUTURE COMPATIBILITY   *\n*              TO ANY NEW FUNCTIONS.                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMCOPTS DS    0H\n         L     R2,CURRENTF        PICK UP CURRENT TABLE ENTRY ADRS\n         L     R2,COMTOKWL(R2)    PICK UP OPTIONAL KEYWORD LIST ADRS\n         LTR   R2,R2              IS IT ZERO (NO OPTIONAL KEYWORDS)\n         BZ    ERROR20            ERROR IF SO\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\nCOMOKEY  DS    0H\nCOMOKEY2 DS    0H\n         LTR   R3,R3              IS NEXT KWT ADDRESS ZERO\n         BZ    ERROR20            BAD KEYWORD IF SO\n         L     R14,0(R3)          PICK UP RTN ADDRESS\n         LA    R3,8(R3)           BUMP TO LIST PROPER\n         XR    R1,R1              CLEAR REG 1 FOR LENGTH\nCOMOKEYL DS    0H\n         IC    R1,0(R3)           PICK UP LENGTH\n         LTR   R1,R1              END OF KWT\n         BNZ   COMOKEYM           BRANCH IF NOT\n         LA    R2,4(R2)           BUMP TO NEXT KWT SLOT\n         L     R3,0(R2)           PICK UP NEXT KWT ADDRESS\n         B     COMOKEY2           PROCESS NEXT KWT\nCOMOKEYM DS    0H\n         BCTR  R1,0               DROP FOR EXECUTE\n         EX    R1,KEYWTEST        COMPARE FOR KEYWORD MATCH\n         BNE   COMONOM            BRANCH TO ROUTINE IF MATCH\n         L     R2,CURRENTF        RELOAD CURRENT FUNCTION TABLE ADRS\n         L     R2,COMTOKWL(R2)    RESER OKW LIST TO START\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         STM   R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\n         BR    R14                BRANCH TO ROUTINE\nCOMONOM  DS    0H\n         LA    R3,2(R1,R3)        BUMP TO NEXT ENTRY IN KWT\n         B     COMOKEYL\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PROCESS THE DSNAME KEYWORD                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMDSN   DS    0H\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,DSNKEY     HAS DSN ALLREADY BEEN SPECIFIED\n         BO    ERROR13            BRANCH IF SO\n         OI    COMFLAG,DSNKEY     FLAG DSN AS SPECIFIED\n         LR    R3,R5              LOAD START OF DSNAME\n         MVI   DSCBNAME,BLANK     BLANK OUT DSNAME HOLDER\n         MVC   DSCBNAME+1(43),DSCBNAME\nCOMDSNBL DS    0H\n         CLI   0(R3),BLANK        END OF DSNAME\n         BE    COMDSNE            YES\n         CLI   0(R3),COMMA        END OF DSNAME\n         BE    COMDSNE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMDSNBL\nCOMDSNE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE DSN LENGTH\n         C     R3,FOURFOUR        LONGER THAN 44?\n         BH    ERROR14            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR14            BRANCH IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,DSNMOVE         MOVE IN DSNAME\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n         BNE   COMCKEY            BRANCH IF NOT\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R14,GETACARD       GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PROCESS THE VOLUME KEYWORD                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMVOL   DS    0H                 PROCESS VOL KEYWORD\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,VOLKEY     HAS VOL ALLREADY BEEN SPECIFIED\n         BO    ERROR15            BRANCH IF SO\n         OI    COMFLAG,VOLKEY     FLAG VOL AS SPECIFIED\n         LR    R3,R5              LOAD START OF VOLSER\n         MVC   VOLUME,BLANKS      BLANK OUT VOLSER HOLDER\nCOMVOLBL DS    0H\n         CLI   0(R3),BLANK        END OF VOLUME\n         BE    COMVOLE            YES\n         CLI   0(R3),COMMA        END OF VOLUME\n         BE    COMVOLE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMVOLBL\nCOMVOLE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE VOL LENGTH\n         C     R3,SIX             LONGER THAN 6?\n         BH    ERROR16            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR16            BRANCH IF SO                 05/08/92\n         C     R3,=F'6'           LESS THAN ONE                05/08/92\n         BH    ERROR16            BRANCH IF SO                 05/08/92\n         MVC   S99DDLEN(2),=H'7'   VVOLSER                        SJB\n         MVC   S99DSLEN(2),=H'9'   &&VVOLSER                      SJB\n         MVC   DAIRDSNB(2),=H'9'   &&VVOLSER                      SJB\n         STH   R3,S99VLEN         SAVE LENGTH IN VOLSER TEXT UNIT\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,VOLMOVE         MVC   VOLUME(0),0(R5)\n         MVC   VOL,VOLUME          MOVE INTO VOL                  SJB\n         MVC   S99VTEXT(6),VOL     SVC99 VOLSER TU                SJB\n         MVC   DA08SER(6),VOL      DAIR VOLSER TU                 SJB\n         MVC   DA08DDN(7),VVOL     DAIR DDNAME TU VVOLSER         SJB\n         MVC   DAIRDSNV(7),VVOL    DAIR DSNAME TU VVOLSER         SJB\n         MVC   S99DDTXT(7),VVOL    MOVE IN DDNAME VVOLSER         SJB\n         MVC   S99DSNAM(7),VVOL    MOVE IN DSNAME VVOLSER PART    SJB\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n*                                 (IF BLANK AFTER COMMA THEN MUST BE\n*                                  CONTINUED ON NEXT CARD.)\n         BNE   COMCKEY\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R14,GETACARD       GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PROCESS THE NEWNAME KEYWORD (VALID FOR RENAME COMMAND ONLY) *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMNEWN  DS    0H                 PROCESS NEW KEYWORD\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,NEWNKEY    HAS NEW ALLREADY BEEN SPECIFIED\n         BO    ERROR17            BRANCH IF SO\n         OI    COMFLAG,NEWNKEY    FLAG NEW AS SPECIFIED\n         LR    R3,R5              LOAD START OF NEWNAME\n         MVI   NEWNAME,BLANK      BLANK OUT NEWNAME HOLDER\n         MVC   NEWNAME+1(43),NEWNAME\nCOMNEWBL DS    0H\n         CLI   0(R3),BLANK        END OF NEWNAME\n         BE    COMNEWE            YES\n         CLI   0(R3),COMMA        END OF NEWNAME\n         BE    COMNEWE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMNEWBL\nCOMNEWE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE NEW LENGTH\n         C     R3,FOURFOUR        LONGER THAN 44?\n         BH    ERROR19            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR19            BRANCH IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,NEWNMOVE        MOVE IN NEWNAME\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n         BNE   COMCKEY            BRANCH IF NOT\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R14,GETACARD       GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         EJECT\n*--------------------------------------------------------------------*\n*        GET A NEW CARD (REQUIRED CONTINUATION CARD)                 *\n*--------------------------------------------------------------------*\n         SPACE 3\nGETACARD DS    0H\n         $$SUB ,\nGCARD100 DS    0H\n         OI    MASTFLAG,CARD2TRY  FLAG AS CARD2 TRY FOR EODAD\n         BAL   R5,CARDIN          GET ANOTHER CARD\n         NI    MASTFLAG,FULLMASK-CARD2TRY TURN OFF CARD2 FLAG\n         BAL   R14,SKIPB          CHECK FOR ALL BLANKS\n         LTR   R5,R5              ALL BLANKS?\n         BNZ   GCARD200           SKIP IF NOT\n         BAL   R14,PUTCARD        PRINT BLANK CARD\n         B     GCARD100           GET ANOTHER CARD\nGCARD200 DS    0H\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    GCARDPRT           PRINT IF SO\n         TM    MASTFLAG,GETSUBC   LOOKING FOR A SUBCOMMAND\n         BNO   GCARDPRT           GO PRINT IF NOT (CONTINUATION CARD)\n         CLI   CARD,BLANK         COULD IT BE A VALID SUBCOMMAND CARD\n         BE    GETRCXX            RETURN TO CALLER IF SO\n         OI    MASTFLAG,PRIMEND   MARK NAME SET ENDED BY PRIMARY\n         NI    MASTFLAG,FULLMASK-GETSUBC TURN OFF SUBCOMMAND FLAG\n         BAL   R14,WRITDSCB\n         B     GETRC00\nGCARDPRT DS    0H\n         MVI   MSGCC,LINES1       SET CARRIAGE CONTROL\n         BAL   R14,PUTCARD\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    GCARD100           SKIP IF SO\nGCARD400 DS    0H\n         BAL   R14,SKIPB          GO SKIP THE BLANKS\n         LTR   R5,R5              ALL BLANK?\n         BZ    GCARD100           GET ANOTHER CARD IF SO\nGETRC00  DS    0H\nGETRCXX  DS    0H\n         L     R13,4(,R13)         PREV SAVE\n         ST    R5,X'28'(,R13)      STORE R5\n         RETURN (14,12),RC=0\n         SPACE 3\n*--------------------------------------------------------------------*\n*        GET A CONTROL CARD FROM SOMEWHERE (TSO, SYSIN, OR CONSOLE)  *\n*              BAL  R5,CARDIN                                        *\n*--------------------------------------------------------------------*\n         SPACE 3\nCARDIN   DS    0H\n         TM    IOFLAG,CONSOLE     CONSOLE I/O REQUIRED\n         BO    DOCONIO            BRANCH IF SO\n         TM    IOFLAG,TSOSESS     TPUT/TGET TSO I/O REQUIRED\n         BO    DOTSIO             BRANCH IF SO\n         GET   SYSIN,CARD         GET A CARD FROM SYSIN DD\n         BR    R5                 RETURN TO CALLER\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROL CARDS ARE OBTAINED FROM STARTING CONSOLE            *\n*--------------------------------------------------------------------*\n         SPACE 3\nDOCONIO  DS    0H\n         XC    WTORECB,WTORECB    CLEAR ECB\n         IC    R0,CONID           PICK UP CONSOLE IDENTIFIER\n         MVI   CARD,C' '          BLANK OUT REPLY HOLDER\n         MVC   CARD+1(79),CARD\n         TM    IOFLAG,CONTINUE    IS THIS A CONTINUE CARD\n         BO    DOCONT             BRANCH IF SO\n*--------------------------------------------------------------------*\n*        ENTER CONSOLE PROMPT FOR CONTROL CARD                       *\n*--------------------------------------------------------------------*\n         LA    R1,CARDMSGW        PICK UP MSG BUFFER ADDRESS\n         WTOR  MF=(E,(1))\n         B     DOWAIT\nDOCONT   DS    0H\n*--------------------------------------------------------------------*\n*        ENTER CONSOLE PROMPT FOR CONTINUATION OF CONTROL CARD\n*--------------------------------------------------------------------*\n         LA    R1,CONTMSGW        PICK UP MSG BUFFER ADDRESS\n         WTOR  MF=(E,(1))\n         SPACE 1\nDOWAIT   DS    0H\n         WAIT  ECB=WTORECB\n         OC    CARD,UPMASK        SHIFT TO UPPERCASE\n         BR    R5\n         EJECT\n*--------------------------------------------------------------------*\n*        CONTROL CARDS ARE OBTAINED FROM TSO CONSOLE\n*--------------------------------------------------------------------*\n         SPACE 3\nDOTSIO   DS    0H\n         MVI   CARD,C' '          BLANK OUT REPLY HOLDER\n         MVC   CARD+1(79),CARD\n         TM    IOFLAG,CONTINUE    IS THIS A CONTINUE CARD\n         BO    DOTSCONT           BRANCH IF SO\n*--------------------------------------------------------------------*\n*        ENTER TSO PROMPT FOR CONTROL CARD                           *\n*--------------------------------------------------------------------*\n         TPUT  CARDMSG,CARDMSGL\n         B     DOTSTGET\nDOTSCONT DS    0H\n*--------------------------------------------------------------------*\n*        ENTER CONSOLE PROMPT FOR CONTINUATION OF CONTROL CARD       *\n*--------------------------------------------------------------------*\n         TPUT  CONTMSG,CONTMSGL\n         SPACE 1\nDOTSTGET DS    0H\n         STAX  DEFER=NO           ALLOW ATTENTION INTERRUPTS\n         TGET  CARD,80            GET A CONTROL CARD\n         STAX  DEFER=YES          DISALLOW ATTENTION INTERRUPTS\n         OC    CARD,UPMASK        FOLD TO UPPERCASE\n         BR    R5\n         EJECT\n*--------------------------------------------------------------------*\n*        SKIP LEADING BLANKS ON CARDS                                *\n*              BAL  R14,SKIPB                                        *\n*--------------------------------------------------------------------*\n         SPACE 3\nSKIPB    DS    0H\n         LA    R5,CARD\n         LA    R1,72              LOAD COUNT MAX\nSKIPLOOP DS    0H                 SEARCH FOR FIRST NON-BLANK COL\n         CLI   0(R5),BLANK        BLANK\n         BNE   SKIPEND            BRANCH IF NOT\n         LA    R5,1(R5)           BUMP TO NEXT COL\n         BCT   R1,SKIPLOOP\n         LA    R5,0               INDICATED TOTALLY BLANK\nSKIPEND  DS    0H\n         BR    R14                RETURN TO CALLER\n         SPACE 3\n*--------------------------------------------------------------------*\n*        PRINT CARD IMAGE                                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nPUTCARD  DS    0H\n         $$SUB ,\n         TM    IOFLAG,CONSOLE     ARE WE ON A CONSOLE\n         BO    PUTC900            DO NOT ECHO CARD BACK IF SO\n         TM    IOFLAG,TSOSESS     ARE WE A TSO SESSION\n         BO    PUTC900            DO NOT ECHO CARD BACK IF SO\n         MVI   MSGLINE,BLANK      BLANK OUT MESSAGE LINE\n         MVC   MSGLINE+1(131),MSGLINE\n         MVC   MSGLINE(80),CARD   MOVE CARD IMAGE TO MESSAGE LINE\n         PUT   SYSPRINT,MSGBUFFR  PRINT CARD IMAGE\nPUTC900  DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         SPACE 5\n*--------------------------------------------------------------------*\n*        PRINT A BLANK LINE                                          *\n*              BAL  R14,PUTBLANK                                     *\n*--------------------------------------------------------------------*\n         SPACE 3\nPUTBLANK DS    0H\n         $$SUB ,\n         TM    IOFLAG,CONSOLE     ARE WE ON A CONSOLE\n         BO    PUTB900            DO NOT PUT BLANK LINES IF SO\n         TM    IOFLAG,TSOSESS     ARE WE A TSO SESSION\n         BO    PUTB900            DO NOT PUT BLANK LINES IF SO\n         MVI   MSGLINE,BLANK      BLANK OUT MESSAGE LINE\n         MVC   MSGLINE+1(131),MSGLINE\n         PUT   SYSPRINT,MSGBUFFR  PRINT A BLANK LINE\nPUTB900  DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\n*--------------------------------------------------------------------*\n*        PRINT MESSAGE                                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nMSGOUT   DS    0H\n         $$SUB\n         STH   R1,MPLNUM\n         LA    R1,MPL\n         L     R15,VMSG\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    MSGOUTXX\n         ABEND 777,DUMP\nMSGOUTXX DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*        THIS PORTION OF CODE TAKES THE HEX RETURN CODE IN REG 15    *\n*        AND CONVERTS IT TO INTEGER BINARY.                          *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nFIXDIGIT DS    0H\n         $$SUB\n         LA    R1,RCWORD+3             GET ADDRESS OF END OF WORK WORD\n         LR    R14,R15                 TRANSFER R12 TO WORK REG\n         LA    R4,4                    LOAD NUMBER OF BYTES IN R12\nFIXDLOOP DS    0H\n         SRDL  R14,4                   SHIFT 4 BITS TO R2\n         SRL   R15,28                  SHIFT R3 BITS TO LOW END\n         STC   R15,0(R1)               STORE IN BYTE IN WORK AREA\n         BCTR  R1,0                    BACK UP WORD POINTER\n         BCT   R4,FIXDLOOP             DO NEXT BYTE\n         SPACE 3\n         TR    RCWORD,FIXTABLE         TRANSLATE TO PRINTABLE HEX\n         SPACE 3\n         L     R15,RCWORD              RELOAD RETURN CODE (PRINTABLE)\n         L     R13,4(,R13)\n         RETURN (14,12),RC=(15)\n         EJECT ,\n*--------------------------------------------------------------------*\n*        ALLOCATE THE VOLUME FOR TSO SESSION USING DAIR              *\n*                                                                    *\n*        NOTE: DAIR IS USED INSTEAD OF SVC 99 TO MAINTAIN            *\n*              NON-MVS COMPATIBILITY.                                *\n*--------------------------------------------------------------------*\n         SPACE 3\nALOCDAIR DS    0H\n         XC    DECB,DECB          CLEAR DAIR ECB\n         L     R2,CPPLHOLD\n         USING CPPL,R2 ADDRESS CPPL\n         LA    R1,DAPLIST\n         USING DAPL,R1\n         MVC   DAPLUPT,CPPLUPT    MOVE IN UPT ADDRESS\n         MVC   DAPLECT,CPPLECT    MOVE IN ECT ADDRESS\n         MVC   DAPLPSCB,CPPLPSCB  MOVE IN PSCB ADDRESS\n         LINK  EP=IKJDAIR         INVOKE DAIR\n         LTR   R15,R15            DAIR WORK\n         BZ    LOOPVGO            BRANCH SO\n         SPACE 3\n*--------------------------------------------------------------------*\n*        SET UP SPECIAL MESSAGE FOR DAIR ALLOCATION FAILURE          *\n*--------------------------------------------------------------------*\n         SPACE 3\nDAIREROR DS    0H\n         ST    R15,DYNRETC        STORE DAIR RETURN CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT        GO FIX R12\n         SPACE 1\n         STCM  R15,15,SPMG4R1     STORE IN MESSAGE\n         LH    R15,DA08DARC       PICK UP ERROR CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT        GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG4R2     STORE IN MESSAGE\n         LH    R15,DA08CTRC       PICK UP CATALOG CODE\n         SPACE 1\n         BAL   R14,FIXDIGIT       GO FIX IT\n         SPACE 1\n         STCM  R15,15,SPMG4R3     STORE IN MESSAGE\n         MVI   DFFLAGS+1,X'01'    FLAG AS SVC99 REQUEST\n         LA    R1,DA08CD          PICK UP DAIR 08 BLOCK\n         ST    R1,DFDAPLP         STORE DAIR R11 ADDRS IN DF BLOCK\n         LA    R1,DFDAPLP         GET ADDRESS OF DF PARM BLOCK\n         LINK  EP=IKJEFF18\n         LTR   R15,R15            EXTRACT WORK OK\n         BZ    DODAIRER\n         XC    DFBUFL1(2),DFBUFL1 CLEAR BUFFER LENGTH OF DF MSG\n         XC    DFBUFL2(2),DFBUFL2 CLEAR BUFFER LENGTH OF DF MSG\n         B     ERROR39\nDODAIRER DS    0H\n         MVI   DFBUF01,X'40'      SET DF BUFFERS INTO WTO FORMAT\n         MVI   DFBUF01+1,X'00'\n         MVI   DFBUF02,X'40'\n         MVI   DFBUF02+1,X'00'\n         B     ERROR39\n         DROP  R2\n         DROP  R1\n         EJECT\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              READ A DSCB                                           *\n*        R15=  0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nREADDSCB DS    0H\n         $$SUB ,\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         MVC   WCVAF(CVAFL),CVAF\n         SPACE 1\n         XC    BUFLIST(BFLHLN+BFLELN),BUFLIST   ZERO BUFFERLIST\n         OI    BFLHFL,BFLHDSCB     RETURN DSCBS NOT VIRS\n         MVI   BFLHNOE,1           1 BUFFER\n         MVI   BFLELTH,DSCBLTH2    BUFFER LEGNTH\n         LA    R0,DS1FMTID\n         ST    R0,BFLEBUF          @ OF BUFFER\n         OI    BFLEFL,BFLECHR      RETURN CCHHR\n         SPACE 1\n         BAL   R14,DEQUE                                       08/13/90\n         PRINT NOGEN                                           08/13/90\n         RESERVE (SYSVTOC,VOLUME,E,6,SYSTEMS),UCB=UCBADDR      08/13/90\n         PRINT GEN                                             08/13/90\n         LTR   R15,R15                                         08/13/90\n         BNZ   RDSCBRES                                        08/13/90\n         OI    FLAG2,$RESERVE                                  08/13/90\n         MVC   DS1DSNAM,DSCBNAME\n         L     R2,UCBADDR          UCB ADDR\n         MVC   CVAFFUNC,=CL20'DSCB-READ'                       05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=READ,                                          X\n               DSN=DS1DSNAM,       READ OUR DSN                        X\n               UCB=(R2),                                               X\n               BUFLIST=BUFLIST,                                        X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         SPACE 3\n         CL    R15,=F'4'           CVAF TO DSN OK\n         BL    RDSCBR00             YES,\n         BH    RDSCBRNN             NO, CVAF ERROR\n         USING CVPL,R1\n         CLI   CVSTAT,STAT001      DATASET NOT FOUND\n         BE    RDSCBR04             YES, DSN NOT FOUND\n         B     RDSCBRNN            OTHER CVAF ERROR\n         DROP  R1\nRDSCBR00 DS    0H\n         B     RDSCRC00\nRDSCBR04 DS    0H                  DSN NOT FOUND\n         LA    R0,ERROR2           MESSAGE TO WRITE\n         B     RDSCRCXX\nRDSCBRNN DS    0H                  OTHER ERRORS\n         LA    R0,ERROR3           MESSAGE TO WRITE\n         B     RDSCRCXX\nRDSCBRES DS    0H                  RESERVE FAILED\n         LA    R0,ERROR44          MESSAGE TO WRITE\n         B     RDSCRCXX\n         DROP  R7\n         SPACE 3\nRDSCRC00 DS    0H\n         SLR   R15,R15             ZERO RC\n         SLR   R0,R0               ZERO ERROR                  05/08/92\nRDSCRCXX DS    0H\n         L     R5,4(,R13)                                      05/08/92\n         STM   R15,R0,X'10'(R5)    SAVE R15,R0 INTO SAVEAREA   05/08/92\n         BAL   R14,DEQUE           DEQUE IF ERROR               3/18/92\n         L     R13,4(,R13)\n         RETURN (14,12)            REG15 AND R0 PRESET         05/08/92\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              WRITE A DSCB                                          *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nWRITDSCB DS    0H\n         $$SUB ,\n         SPACE 1\n         TM    FLAG2,$ALTER\n         BO    WDSC0100            YES\n         CLC   COMMAND,COMNAME    NAME SUBCOMMAND SET?\n         BNE   WDSC0100           BRANCH IF NOT\n         TM    COMFLAG,REWRITE    WAS DSCB MODIFIED\n         BNO   WDSCRC30           DO NOT WRITE IT IF NOT\nWDSC0100 DS    0H\n         TM    MASTFLAG,TESTONLY  IS THIS A TEST\n         BO    WDSCRC28           SKIP IF SO\n         SPACE 1\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         SPACE 1\n         LA    R0,DS1DSNAM\n         ST    R0,BFLEBUF          @ OF BUFFER\n         SPACE 1\n         MVI   BFLELTH,DSCBLTH     140 LENGTH\n         OI    BFLHFL,BFLHDSCB     RETURN DSCBS NOT VIRS\n         MVI   BFLHNOE,1           1 BUFFER\n         OI    BFLEFL,BFLECHR      RETURN CCHHR\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'DSCB-WRITE'                      05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=WRITE,UCB=(R2),                                X\n               BUFLIST=BUFLIST,    BUFLIST                             X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   WDSCRC04\n         B     WDSCRC00\n         SPACE 3\nWDSCRC04 DS    0H\n         LA    R0,ERROR4           CVAF DSCB WRITE FAILED\n         B     WDSCRCXX\nWDSCRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     WDSCRCXX\nWDSCRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     WDSCRCXX\n         SPACE 3\nWDSCRC00 DS    0H\n         SLR   R15,R15             ZERO\nWDSCRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                  BAL  R14,DEQUE                    *\n*--------------------------------------------------------------------*\nDEQUE    DS    0H                                              08/13/90\n         TM    FLAG2,$RESERVE                                  08/13/90\n         BZ    DEQ0100                                         08/13/90\n         DEQ   (SYSVTOC,VOLUME,6,SYSTEMS),UCB=UCBADDR          08/13/90\n         NI    FLAG2,255-$RESERVE                              08/13/90\nDEQ0100  DS    0H                                              08/13/90\n         BR    R14                 RETURN                      08/13/90\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              WRITE A VIER                                          *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nWRITVIER DS    0H\n         $$SUB ,\n         SPACE 1\n         CLC   COMMAND,COMNAME     NAME SUBCOMMAND SET?\n         BNE   WVIR0100            BRANCH IF NOT\n         TM    COMFLAG,REWRITE     WAS DSCB MODIFIED\n         BNO   WVIRRC30            DO NOT WRITE IT IF NOT\nWVIR0100 DS    0H\n         TM    MASTFLAG,TESTONLY   IS THIS A TEST\n         BO    WVIRRC28            SKIP IF SO\n         SPACE 1\n         L     R7,CVIRCDS          @ OF VIER BUFFER LIST\n         USING BUFLIST,R7\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'VIER-WRITE'                      05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=WRITE,UCB=(R2),                                X\n               BUFLIST=(R7),       BRANCH ENTER                        X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   WVIRRC04\n         B     WVIRRC00\n         SPACE 3\nWVIRRC04 DS    0H\n*--------------------------------------------------------------------*\n*              WRITE VIER FAILED PRINT A MESSAGE                     *\n*--------------------------------------------------------------------*\n         ST    R15,FUNCRC          SAVE AS FUNCTION RETURN CODE\n         CVD   R15,DOUBLE\n         UNPK  SPMG9R1,DOUBLE\n         OI    SPMG9R1+3,SIGN      MAKE SIGN PRINTABLE\n         B     MSGSP9\nWVIRERR  DS    0H\n         LA    R0,ERROR4           CVAF DSCB WRITE FAILED\n         B     WVIRRCXX\nWVIRRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     WVIRRCXX\nWVIRRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     WVIRRCXX\n         SPACE 3\nWVIRRC00 DS    0H\n         SLR   R15,R15             ZERO\nWVIRRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              DELETE A DSN INDEX                                    *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nDELVIR   DS    0H\n         $$SUB ,\n         SPACE 1\n         TM    FLAG2,$INDEX        IS THIS INDEX VTOC\n         BZ    DELVRC00             NO\n         TM    FLAG2,$ALTER        ALTER DSNAME\n         BZ    DELVRC00             NO\nDELV0100 DS    0H\n         TM    MASTFLAG,TESTONLY   IS THIS A TEST\n         BO    DELVRC28            SKIP IF SO\n         SPACE 1\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'INDEX-DELETE'                    05/08/92\n         PRINT NOGEN\n         CVAFDSM ACCESS=IXDLT,UCB=(R2), DELETE DSN INDEX               X\n               DSN=DS1DSNAM,       DSNAME                              X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   DELVRC04\n         BAL   R14,WRITVIER\n         LTR   R15,R15\n         BNZ   ADDVRCXX\n         B     DELVRC00\n         SPACE 3\nDELVRC04 DS    0H\n         LA    R0,ERROR4           CVAFDSM FAILED\n         B     DELVRCXX\nDELVRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     DELVRCXX\nDELVRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     DELVRCXX\n         SPACE 3\nDELVRC00 DS    0H\n         SLR   R15,R15             ZERO\nDELVRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              ADD A DSN INDEX                                       *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nADDVIR   DS    0H\n         $$SUB ,\n         SPACE 1\n         TM    FLAG2,$INDEX        IS THIS INDEX VTOC\n         BZ    ADDVRC00             NO\n         TM    FLAG2,$ALTER        ALTER DSNAME\n         BZ    ADDVRC00             NO\nADDV0100 DS    0H\n         TM    MASTFLAG,TESTONLY   IS THIS A TEST\n         BO    ADDVRC28            SKIP IF SO\n         SPACE 1\n         LA    R7,WBUFDSCB\n         USING BUFLIST,R7\n         SPACE 1\n         L     R2,UCBADDR          UCB ADDR\n         SPACE 1\n         MVC   CVAFFUNC,=CL20'VIER-ADD'                        05/08/92\n         PRINT NOGEN\n         CVAFDSM ACCESS=IXADD,UCB=(R2), ADD DSN INDEX                  X\n               DSN=DS1DSNAM,       DSNAME                              X\n               ARG=BFLEARG,        CCHHR                               X\n               BRANCH=(YES,PGM),   BRANCH ENTER                        X\n               MF=(E,WCVAF)\n         PRINT GEN\n         LTR   R15,R15\n         BNZ   ADDVRC04\n         BAL   R14,WRITVIER\n         LTR   R15,R15\n         BNZ   ADDVRCXX\n         B     ADDVRC00\n         SPACE 3\nADDVRC04 DS    0H\n         LA    R0,ERROR4           CVAFDSM FAILED\n         B     ADDVRCXX\nADDVRC28 DS    0H                  MSG=28\n         LA    R0,ERROR28\n         LA    R15,32\n         B     ADDVRCXX\nADDVRC30 DS    0H                  MSG=30\n         LA    R0,ERROR30\n         LA    R15,32\n         B     ADDVRCXX\n         SPACE 3\nADDVRC00 DS    0H\n         SLR   R15,R15             ZERO\nADDVRCXX DS    0H\n         L     R13,4(,R13)\n         ST    R0,X'14'(,R13)      RESET R0\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         DROP  R7\n         SPACE 3\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO:                                        *\n*              ADD A DSN INDEX                                       *\n*        R15 = 0 OK                                                  *\n*        R15\u00ac= 0 ERROR                                               *\n*              R0 = ERROR MESSAGE                                    *\n*--------------------------------------------------------------------*\nRLSEVIER DS    0H\n         $$SUB ,\n         TM    FLAG2,$CVAFDIR      CVAFDIR DONE\n         BZ    RLSE900              NO\n         L     R2,UCBADDR          UCB ADDR\n         MVC   CVAFFUNC,=CL20'VIER-RLSE'                       05/08/92\n         PRINT NOGEN\n         CVAFDIR ACCESS=RLSE,UCB=(R2),                                 X\n               BUFLIST=0,          RELEASE AREAS                       X\n               IOAREA=NOKEEP,                                          X\n               IXRCDS=NOKEEP,                                          X\n               MAPRCDS=NO,                                             X\n               BRANCH=(YES,PGM),                                       X\n               MF=(E,WCVAF)\n         PRINT GEN\nRLSE900  DS    0H\n         L     R13,4(,R13)         PREV SAVE\n         RETURN (14,12),RC=0\n         EJECT ,\n         EJECT\n*--------------------------------------------------------------------*\n*        INFORMATION AND ERROR MESSAGE NODE POINTS\n*--------------------------------------------------------------------*\n         PRINT NOGEN\n         SPACE 1\n*--------------------------------------------------------------------*\n*\n* A MESSAGE NODE IS BUILT BY THE MSGEXIT MACRO.\n*        IT MACRO REQUIRES THE SEQUENCE NUMBER OF\n*        THE MESSAGE TO BE PRINTED, A RETURN LABEL OR ABEND\n*        CODE (BUT NOT BOTH), AND AN OPTIONAL RETURN CODE.\n*        THE RETURN CODE DEFAULTS TO 8 AND SETS THE FUNCTION\n*        IN PROGRESS RETURN CODE.\n*\n*--------------------------------------------------------------------*\n         SPACE 1\n* SPECIAL EXECUTION MESSAGES (RETURN CODES, ETC.)\nMSGSP0   MSGEXIT SPMSG=SPMG0WTO,RETURN=FUNCMEND,RC=\nMSGSP1   MSGEXIT SPMSG=SPMG1WTO,RETURN=CLOSEND,RC=\nMSGSP2   MSGEXIT SPMSG=SPMG2WTO,RETURN=ERROR36,RC=\nMSGSP3   MSGEXIT SPMSG=SPMG3WTO,RETURN=MSGSP5\nMSGSP4   MSGEXIT SPMSG=SPMG4WTO,RETURN=MSGSP5\nMSGSP5   MSGEXIT SPMSG=SPMG5WTO,RETURN=MSGSP6\nMSGSP6   MSGEXIT SPMSG=SPMG6WTO,RETURN=CLOSEX\nMSGSP8   MSGEXIT SPMSG=SPMG8WTO,RETURN=CLOSEND,RC=\nMSGSP9   MSGEXIT SPMSG=SPMG9WTO,RETURN=WVIRERR,RC=\n         SPACE 1\n* NORMAL EXECUTION MESSAGES\nMESSAG28 MSGEXIT MSG=28,RETURN=CLOSEX,RC=0\nMESSAG32 MSGEXIT MSG=32,RETURN=FUNCMSG2,RC=0\nMESSAG33 MSGEXIT MSG=33,RETURN=LOOP1,RC=0\nMESSAG35 MSGEXIT MSG=35,RETURN=NAME2,RC=0\nERROR28  EQU   MESSAG28\nERROR32  EQU   MESSAG32\nERROR33  EQU   MESSAG33\nERROR35  EQU   MESSAG35\n         SPACE 1\n* ERROR AND EXCEPTION MESSAGES\nERROR1   MSGEXIT MSG=1,ABEND=991\nERROR2   MSGEXIT MSG=2,RETURN=CLOSEX   DSN NOT FOUND\nERROR3   MSGEXIT MSG=3,ABEND=998       CVAF READ\nERROR4   MSGEXIT MSG=4,ABEND=999       CVAF WRITE\nERROR5   MSGEXIT MSG=5,RETURN=CLOSEX\nERROR6   MSGEXIT MSG=6,RETURN=CLOSEX\nERROR7   MSGEXIT MSG=7,RETURN=CLOSEX\nERROR8   MSGEXIT MSG=8,RETURN=CLOSEX\nERROR9   MSGEXIT MSG=9,RETURN=NAME\nERROR10  MSGEXIT MSG=10,RETURN=CLOSEX\nERROR11  MSGEXIT MSG=11,RETURN=CLOSEX\nERROR12  MSGEXIT MSG=12,RETURN=MSGSP3,RC=\nERROR13  MSGEXIT MSG=13,RETURN=CLOSEX\nERROR14  MSGEXIT MSG=14,RETURN=CLOSEX\nERROR15  MSGEXIT MSG=15,RETURN=CLOSEX\nERROR16  MSGEXIT MSG=16,RETURN=CLOSEX\nERROR17  MSGEXIT MSG=17,RETURN=CLOSEX\nERROR18  MSGEXIT MSG=18,RETURN=CLOSEX\nERROR19  MSGEXIT MSG=19,RETURN=CLOSEX\nERROR20  MSGEXIT MSG=20,RETURN=CLOSEX\nERROR21  MSGEXIT MSG=21,RETURN=CLOSEX\nERROR22  MSGEXIT MSG=22,RETURN=CLOSEX\nERROR23  MSGEXIT MSG=23,RETURN=CLOSEX\nERROR24  MSGEXIT MSG=24,RETURN=CLOSEX\nERROR25  MSGEXIT MSG=25,RETURN=ERROR26\nERROR26  MSGEXIT MSG=26,RETURN=CLOSE2\nERROR27  MSGEXIT MSG=27,RETURN=CLOSE,RC=12\n*MSG28   USED  ABOVE\nERROR29  MSGEXIT MSG=29,RETURN=CLOSEX\nERROR30  MSGEXIT MSG=30,RETURN=CLOSEX,RC=4\nERROR31  MSGEXIT MSG=31,ABEND=992\n*MSG32   USED  ABOVE\n*MSG33   USED  ABOVE\nERROR34  MSGEXIT MSG=34,RETURN=CLOSEX\n*MSG35   USED  ABOVE\nERROR36  MSGEXIT MSG=36,ABEND=997\nERROR37  MSGEXIT MSG=37,RETURN=CLOSE,RC=12\nERROR38  MSGEXIT MSG=38,RETURN=CLOSEX\nERROR39  MSGEXIT MSG=39,RETURN=MSGSP4,RC=\nERROR40  MSGEXIT MSG=40,RETURN=MSGSP4,RC=\nERROR41  MSGEXIT MSG=41,RETURN=CLOSEX     CVAF VIER DSN NOT FOUND\nERROR42  MSGEXIT MSG=42,ABEND=998         CVAF VIER READ FAILURE\nERROR43  MSGEXIT MSG=43,ABEND=999         CVAF VIER WRITE FAILURE\nERROR44  MSGEXIT MSG=44,ABEND=944         RESERVE FAILED\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MESSAGES                                              *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*        SPECIAL MESSAGES (REQUIRE RETURN CODES OR MODIFICATION)     *\n*                                                                    *\n*          SPECIAL MESSAGES ARE CONSTRUCTED AS A VALID WTO           *\n*          REMOTE PARAMETER LIST (MF=L).  SPECIAL MESSAGES           *\n*          ARE PRINTED VIA THE 'SPMG' PARAMETER OF THE               *\n*          MSGEXIT MACRO.                                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\n         PRINT GEN\n         SPACE 1\nSPMG0WTO DS    0F                 MESSAGE 0 WTO FORMAT\n         DC    AL2(SPMG0L)\n         DC    X'4000'\nSPMG0    DC    C' FDB9998I **** FUNCTION PROCESSING COMPLETE.  RETURN CX\n               ODE IS '\nSPMG0R   DC    CL4'0000'\n         DC    C'.'\nSPMG0L   EQU   *-SPMG0WTO\n         SPACE 2\nSPMG1WTO DS    0F                 MESSAGE 1 WTO FORMAT\n         DC    AL2(SPMG1L)\n         DC    X'4000'\nSPMG1    DC    C' FDB9999I **** ALL PROCESSABLE FUNCTIONS COMPLETE.  HIX\n               GHEST RETURN ENCOUNTERED WAS '\nSPMG1R   DC    CL4'0000'\n         DC    C'.'\nSPMG1L   EQU   *-SPMG1WTO\n         SPACE 2\nSPMG2WTO DS    0F                 MESSAGE 2 WTO FORMAT\n         DC    AL2(SPMG2L)\n         DC    X'4000'\nSPMG2    DC    C' FDB9997D **** DISASTER - SCRATCH FAILED AFTER DUMMY RX\n               ENAME.  SCRATCH RETURN CODE = '\nSPMG2R1  DC    CL4'0000'\n         DC    C'.  REASON CODE = '\nSPMG2R2  DC    CL4'0000'\n         DC    C'.'\nSPMG2L   EQU   *-SPMG2WTO\n         SPACE 2\nSPMG3WTO DS    0F                 MESSAGE 3 WTO FORMAT\n         DC    AL2(SPMG3L)\n         DC    X'4000'\nSPMG3    DC    C' FDB9996D **** ERROR - RETURN CODE = '\nSPMG3R1  DC    CL4'0000'\n         DC    C',  ERROR CODE = '\nSPMG3R2  DC    CL4'0000'\n         DC    C',  INFORMATION CODE= '\nSPMG3R3  DC    CL4'0000'\n         DC    C'.'\nSPMG3L   EQU   *-SPMG3WTO\n         SPACE 2\nSPMG4WTO DS    0F                 MESSAGE 4 WTO FORMAT\n         DC    AL2(SPMG4L)\n         DC    X'4000'\nSPMG4    DC    C' FDB9995D **** ERROR - RETURN CODE = '\nSPMG4R1  DC    CL4'0000'\n         DC    C',  ERROR CODE = '\nSPMG4R2  DC    CL4'0000'\n         DC    C',  CATALOG CODE= '\nSPMG4R3  DC    CL4'0000'\n         DC    C'.'\nSPMG4L   EQU   *-SPMG4WTO\n         SPACE 2\nSPMG8WTO DS    0F                  MESSAGE 4 WTO FORMAT\n         DC    AL2(SPMG8L),X'4000'\nSPMG8    DC    C' FDB9995D **** ERROR - CVAFTST    FAILED, RETURN CODE=X\n               '\nSPMG8R1  DC    CL4'0000'\nSPMG8L   EQU   *-SPMG8WTO\n         SPACE 2\nSPMG9WTO DS    0F                  MESSAGE 4 WTO FORMAT\n         DC    AL2(SPMG9L),X'4000'\nSPMG9    DC    C' FDB9994D **** ERROR - WRITE VIER FAILED, RETURN CODE=X\n               '\nSPMG9R1  DC    CL4'0000'\nSPMG9L   EQU   *-SPMG9WTO\n         SPACE 2\n         EJECT\n*--------------------------------------------------------------------*\n*              SPECIAL WTOR MESSAGE BUFFERS                          *\n*--------------------------------------------------------------------*\n         SPACE 3\nCARDMSGW DS    0F                 CARD MESSAGE WTOR FORMAT HEADDER\n         DC    AL1(80)            REPLY LENGTH\n         DC    AL3(CARD)          ADDRESS IF REPLY BUFFER\n         DC    A(WTORECB)         ADDRESS OF EVENT CONTROL BLOCK\n         DC    AL2(CARDMSGL)      LENGTH OF MESSAGE\n         DC    X'4000'            MCS FLAGS\nCARDMSG  DC    C' FDB9990R **** ENTER FIXDSCB CONTROL CARD'\nCARDMSGL EQU   *-CARDMSG\nCONTMSGW DS    0F                 CONT MESSAGE WTOR FORMAT HEADDER\n         DC    AL1(80)            REPLY LENGTH\n         DC    AL3(CARD)          ADDRESS IF REPLY BUFFER\n         DC    A(WTORECB)         ADDRESS OF EVENT CONTROL BLOCK\n         DC    AL2(CONTMSGL)      LENGTH OF MESSAGE\n         DC    X'4000'            MCS FLAGS\nCONTMSG  DC    C' FDB9991R **** CONTINUE FIXDSCB CONTROL CARD'\nCONTMSGL EQU   *-CONTMSG\n         EJECT\n*--------------------------------------------------------------------*\n*        REMOTELY EXECUTED INSTRUCTIONS\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMMOVE  MVC   COMMAND(0),0(R5)   MOVE IN COMMAND NAME (EXECUTED)\nCOM2MOVE MVC   COMMAND2(0),0(R5)  MOVE IN COMMAND NAME (EXECUTED)\nDSNMOVE  MVC   DSCBNAME(0),0(R5)  MOVE IN DSNAME       (EXECUTED)\nNEWNMOVE MVC   NEWNAME(0),0(R5)   MOVE IN NEW DSNAME   (EXECUTED)\nVOLMOVE  MVC   VOLUME(0),0(R5)    MOVE IN VOLSER       (EXECUTED)\nRECMOVE  MVC   RECFMH(0),0(R5)    MOVE IN RECORD FORMAT(EXECUTED)\nLRECLPCK PACK  DOUBLE,0(0,R5)     PACK IN LRECL VALUE  (EXECUTED)\nBLKSZPCK EQU   LRECLPCK           PACK IN BLKSIZE VALUE(EXECUTED)\nRKPPCK   EQU   LRECLPCK           PACK IN RKP VALUE    (EXECUTED)\nKEYLPCK  EQU   LRECLPCK           PACK IN KEYL VALUE   (EXECUTED)\nSUBCTEST CLC   0(0,R2),0(R5)      TEST FOR SUBCOMMAND  (EXECUTED)\nKEYWTEST CLC   1(0,R3),0(R5)      TEST FOR KEYWORD     (EXECUTED)\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CONSTANTS                                             *\n*--------------------------------------------------------------------*\n         SPACE 3\nZERO     DC    F'0'\nONE      DC    F'1'\nFOUR     DC    F'4'\nSIX      DC    F'6'\nFOURFOUR DC    F'44'\nBIGLRECL DC    F'32768'\nBIGKEYL  DC    F'255'\nPREFIXL  DC    F'256'\nBIGRKP   DC    F'32767'\nVMSG     DC    V(FIXDMSGR)\nUPMASK   DC    CL80' '            MASK FOR UPPERCASE CONVERSION\nTESTPARM DC    CL4'TEST'\nBLANKS   DC    CL8' '\nPACK8ZRO DC    PL8'0'\nSCRTCH   DC    CL8'SCRATCH'\nCOMNAME  DC    CL8'NAME'\nMVSCODE  DC    C'03'\nMAXDATE  DC    X'63016D'          DATE = 99:365 (IN HEX)\nZERODATE DC    X'000000'          DATE = 00:000 (IN HEX)\nMASKC0   DC    X'C0'\n*--------------------------------------------------------------------*\n*        TRANSLATION TABLE FOR MAKING RETURN CODES PRINTABLE HEX.    *\n*--------------------------------------------------------------------*\n         SPACE 1\nFIXTABLE DS    0F\n         DC    C'0123456789ABCEF'                              05/08/92\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              DYNAMIC DATA AREAS                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 2\nSAVEAREA DC    (6*9)D'0'           BLOCK OF SAVE AREAS\nSAVEREGS DC    9D'0'\nMPL      DS    0F\nMPLMTT   DC    A(MSGTABLE)        ADDRESS OF MESSAGE TABLE\nMPLDCB   DC    A(SYSPRINT)        ADDRESS OF DCB\nMPLSPADR DC    A(0)               ADDRESS OF SPECIAL MESSAGE\nMPLNUM   DC    H'0'               MESSAGE NUMBER TO BE PRINTED\nMPLIOF   DC    X'0'               MPL I/O FLAG\nMPLCON   DC    X'0'               MPL CONSOLE ID\nCARD     DC    CL80' '            INPUT CARD IMAGE\nHIGHRC   DC    F'0'               HIGHEST RETURN CODE ENCOUNTERED\nFUNCRC   DC    F'0'               CURRENT FUNCTION RETURN CODE\nTSOWORD  DS    A                  ADDRESS OF EXTRACTED TSO INDICATOR\nTIOTADRS DS    A                  EXTRACTED TIOT ADDRESS\nCPPLHOLD DS    A                  TSO CPPL ADDRESS\nTHYMEOYR DC    D'0'               YEAR COMPUTATION HOLDER\nDAYTHYME DC    D'0'               DAY COMPUTATION HOLDER\nDOUBLE   DC    D'0'               PACKING WORD\nCURRENTF DC    F'0'               ADDRESS OF CURRENT FUNCTION T/ENTRY\nCOMLEN   DC    F'0'               LENGTH OF COMMAND\nCOMMAND  DC    CL8' '             CURRENT COMMAND\nCOMMAND2 DC    CL8' '             POSSIBLE NEW COMMAND DURING NAME\nRECFMH   DC    CL5' '             RECORD FORMAT HOLDER\nOPTCODEH DC    C' '               OPT CODE HOLDER\nDSORGH   DC    CL3' '             DATASET ORGANIZATION HOLDER\nNEWNAME  DC    CL44' '            NEW DATASET NAME HOLDER\nDSCBNAME DS    CL44\nTEMPNAME DC    CL44'FIXDSCB.SCRATCH.DATASET'\nSYSVTOC  DC    CL8'SYSVTOC'\n         SPACE 1\n* MASTER FLAG FOR ENTIRE RUN\nMASTFLAG DC    X'00'\nTESTONLY EQU   X'80'  THIS RUN IS A TEST ONLY (NO REWRITE OF DSCB'S)\nCARD2TRY EQU   X'40'  THIS GET FOR A CONTINUATION OR SUBCOMMAND CARD\nGETSUBC  EQU   X'20'  THIS GET FOR A SUBCOMMAND CARD\nPRIMEND  EQU   X'10'  PRIMARY ENCOUNTERED DURING SUBCOMMAND PROCESSING\nPARTSCAN EQU   X'08'  SCAN CARD FOR COMMAND ONLY\nCOMBADF  EQU   X'04'  SCANNED COMMAND CONTAINED AN = SIGN\nMVSSYS   EQU   X'02'  SYSTEM IS AN MVS RELEASE (SVC 99 AVAILABLE)\n         SPACE 1\n* FUNCTION FLAG FOR ONE FUNCTION REQUEST\nCOMFLAG  DC    X'00'\nDSNKEY   EQU   X'80'  THE DSN KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nVOLKEY   EQU   X'40'  THE VOLUME KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nNEWNKEY  EQU   X'20'  THE NEWNAME KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nREWRITE  EQU   X'01'  THE DSCB HAS BEEN MODIFIED AND MUST BE WRITTEN\n         SPACE 1\n* I/O TYPE INDICATOR FLAG\nIOFLAG   DC    X'00'\nCONSOLE  EQU   X'80'  ALL I/O MUST BE WTO/WTOR TO STARTING CONSOLE\nCONTINUE EQU   X'40'  CONTINUE CARD REQUIRED\nTSOSESS  EQU   X'20'  ALL I/O MUST BE TPUT/TGET TO TSO\n         SPACE 1\nFLAG2    DC    X'00'                                           06/29/84\n$INDEX   EQU   X'80'               INDEX VTOC IN USE           06/29/84\n$CVAFDIR EQU   X'40'               CVAFDIR ISSUES\n$ALTER   EQU   X'20'               ALTERING DATASET NAME\n$RESERVE EQU   X'10'               RESERVE DONE                08/13/90\n         DS    0F\nEXITLIST DC    X'87',AL3(JFCBAREA) READ JFCB EXIT\n*\nJFCBAREA DS    0D,CL176           INTERNAL JFCB AREA\nDSCBAREA DS    0D,148C            OBTAIN WORK AREA\nVIERAREA DS    0D,CL(VXHRLEN)\n*\nESTAE    ESTAE ,CT,PARAM=0,                                     SJB    X\n               TERM=YES,MF=L                                    SJB\nESTAEL   EQU   *-ESTAE                                          SJB\n*\nVOLIST   DC    H'1'         ----+  14 BYTES                    05/08/92\nVOLUNIT  DC    X'00000000'      |  VOLUME UNIT TYPE FROM UCB   05/08/92\nVOLUME   DC    CL6' '           |  VOLSER (BLANKS FOR DDNAME STUFF\nVOLSTAT  DC    H'0'         <<--+  SCRATCH STATUS CODE         05/08/92\n*\nVVOL     DC    C'V',CL6' '\nVOL      EQU   VVOL+1,6\n*\nRCSAVE   DC    F'0'               SAVE AREA FOR REG 15 DURING MSG RTNS\nRCWORD   DC    F'0'               WORK WORD FOR R12 FIXING FOR PRINT\nCVAFFUNC DC    CL20' '                                         05/08/92\nMSGBUFFR DS    0CL133\nMSGCC    DC    C' '\nMSGLINE  DC    CL132' '\nCONID    DC    X'00'    CONSOLE ID FOR STARTED TASK I/O VIA WTO\nWTORECB  DC    F'0'     ECB FOR WTOR REPLY WAIT\nDECB     DC    F'0'     ECB FOR DAIR\nVTOCDDN  DC    CL8' '\nUCBADDR  DC    F'0'\nDAIRDSNB DC    H'9'\n         DC    X'5050'\nDAIRDSNV DC    CL42' '\n         EJECT ,\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MACRO EXPANSIONS                                      *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\n*--------------------------------------------------------------------*\n*        REMOTE CAMLIST MACRO EXPANSION                              *\n*--------------------------------------------------------------------*\n         SPACE 1\n         DS    0D\nDSCBADDR CAMLST SEARCH,DSCBNAME,VOLUME,DSCBAREA\n         SPACE 1\n         DC    5D'0'\nSCRLIST  CAMLST SCRATCH,TEMPNAME,,VOLIST\n         DC    5D'0'\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CVAF AREAS                                            *\n*--------------------------------------------------------------------*\n         SPACE 3\nWBUFDSCB DC    0CL(BUFLEN)' ',(BUFLEN)X'00'\n         SPACE 3\nCVAF     CVAFDIR MF=L,             CVAFDIR VIR                  XXXXXXXX\n               MAPRCDS=YES,                                     XXXXXXXX\n               IOAREA=KEEP,                                     XXXXXXXX\n               IXRCDS=KEEP\nCVAFL EQU      *-CVAF              LENGTH\nWCVAF DC       0CL(CVAFL)' ',(CVAFL)X'00'\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DATA CONTROL BLOCKS (DCB'S)                                 *\n*--------------------------------------------------------------------*\n         SPACE 1\n         PRINT NOGEN\nVTOCDCB  DCB   MACRF=(E),DSORG=DA,DDNAME=DDNAME,EXLST=EXITLIST\nSYSPRINT DCB   MACRF=(PM),DDNAME=SYSPRINT,RECFM=FBA,LRECL=133,         X\n               BLKSIZE=1330,DSORG=PS\nSYSIN    DCB   MACRF=(GM),DDNAME=SYSIN,DSORG=PS,EODAD=CLOSE\n         PRINT GEN\n*--------------------------------------------------------------------*\n*        LITERALS (IF ANY)                                           *\n*--------------------------------------------------------------------*\n         SPACE 3\n         LTORG\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION (DAIR08) CONTROL BLOCK\n*--------------------------------------------------------------------*\n         SPACE 3\nDAPLIST  DS    0F\n         DC    A(0,0)\n         DC    A(DECB)\n         DC    A(0)\n         DC    A(DAIR08)\n         SPACE 3\nDAIR08   DS    0F\nDA08CD   DC    X'0008'\nDA08FLG  DC    X'0000'\nDA08DARC DC    X'0000'\nDA08CTRC DC    X'0000'\nDA08PDSN DC    A(DAIRDSNB)\nDA08DDN  DC    CL8' '\nDA08UNIT DC    CL8'SYSALLDA'\nDA08SER  DC    CL6' '\n         DC    CL2' '\nDA08BLK  DC    A(80)\nDA08PQTY DC    A(1)\nDA08SQTY DC    A(0)\nDA08DQTY DC    A(0)\nDA08MNM  DC    CL8' '\nDA08PSWD DC    CL8' '\nDA08DSP1 DC    X'04'\nDA08DSP2 DC    X'04'\nDA08DSP3 DC    X'04'\nDA08CTL  DC    X'40'\nDA08RSV  DC    AL3(0)\nDA08DSO  DC    X'00'\nDA08ALN  DC    CL8' '\n         EJECT\n*--------------------------------------------------------------------*\n*        DYNAMIC ALLOCATION (SVC 99) CONTROL BLOCKS                  *\n*--------------------------------------------------------------------*\n         SPACE 3\n         DS    0F                 MOVE TO FULL WORD BOUNDARY\nS99RBPTR DC    X'80',AL3(S99RB)   SVC 99 REQUEST BLOCK POINTER\n         SPACE 1\nS99RB    DS    0F                 SVC 99 REQUEST BLOCK\n         DC    AL1(20)            R11 LENGTH\n         DC    AL1(01)            VERB 01 = DSNAME ALLOCATION (TEMP)\nS99F1    DC    AL2(0)             FLAGS1\nS99ERROR DC    AL2(0)             ERROR CODES\nS99INFO  DC    AL2(0)             INFORMATION CODES\n         DC    A(S99TUPL)         TEXT UNIT POINTER LIST\n         DC    A(0)               RESERVED\nS99F2    DC    A(0)               FLAGS2\n         SPACE 1\nS99TUPL  DS    0F                 SVC 99 TEXT UNIT POINTER LIST\n         DC    A(S99DSN)          DSNAME TEXT UNIT\n         DC    A(S99DDN)          DDNAME TEXT UNIT\n         DC    A(S99VOL)          VOLUME TEXT UNIT\n         DC    A(S99DSTAT)        DATASET STATUS TEXT UNIT\n         DC    A(S99DISP)         DATASET DISPOSITION\n         DC    A(S99UNIT)         UNIT NAME TEXT UNIT\n         DC    A(S99TRACK)        DATASET TRACK TEXT UNIT\n         DC    A(S99SPACE)        DATASET SPACE TEXT UNIT\n         DC    X'80',AL3(0)       END OF LIST\n         SPACE 1\nS99DSN   DS    0F                 VOLUME TEXT UNIT\nS99DSKEY DC    X'0002'\nS99DS#   DC    X'0001'\nS99DSLEN DC    X'0009'\nS99DSTXT DC    X'5050'            TEMPORARY DSN=&&VVOLSER\nS99DSNAM DC    CL7' '\n         SPACE 1\nS99DDN   DS    0F                 DDNAME TEXT UNIT\nS99DDKEY DC    X'0001'\nS99DD#   DC    X'0001'\nS99DDLEN DC    X'0008'\nS99DDTXT DC    CL8' '\n         SPACE 1\nS99VOL   DS    0F                 VOLUME TEXT UNIT\nS99VKEY  DC    X'0010'\nS99V#    DC    X'0001'\nS99VLEN  DC    X'0006'\nS99VTEXT DC    CL6' '\n         SPACE 1\nS99DSTAT DS    0F                 DS STATUS TEXT UNIT\nS99DKEY  DC    X'0004'\nS99D#    DC    X'0001'\nS99DLEN  DC    X'0001'\nS99DTEXT DC    X'01'              DISP = (OLD,...)\n         SPACE 1\nS99DISP  DS    0F                 DISP=  (...,DELETE)\nS99DIKEY DC    X'0005'\nS99DI#   DC    X'0001'\nS99DILEN DC    X'0001'\nS99DITXT DC    X'04'\n         SPACE 1\nS99UNIT  DS    0F                 UNIT NAME TEXT UNIT\nS99UKEY  DC    X'0015'\nS99U#    DC    X'0001'\nS99ULEN  DC    X'0008'\nS99UTEXT DC    CL8'SYSALLDA'\n         SPACE 1\nS99TRACK DS    0F                 SPACE TYPE TEXT UNIT\nS99TKEY  DC    X'0007'\nS99T#    DC    X'0000'\n         SPACE 1\nS99SPACE DS    0F                 SPACE AMOUNT TEXT UNIT\nS99SPKEY DC    X'000A'\nS99SP#   DC    X'0001'\nS99SPLEN DC    X'0003'\nS99SPTXT DC    X'000000'          1 UNIT (TRACK)\n         EJECT\n*\n*        DAIRFAIL PARAMETER BLOCKS\n*\n         SPACE 3\nDFS99RB  DC    A(0)\nDFDAPLP  EQU   DFS99RB\nDFRCP    DC    A(DYNRETC)\nDFJEFF02 DC    A(ZERO)\nDFIDP    DC    A(DFFLAGS)\nDFCPPLP  DC    A(0)\nDFBUFFP  DC    A(DFBUFS)\nDYNRETC  DC    A(0)\nDFFLAGS  DC    X'4000'\nDFBUFS   DS    0F\nDFFLMSG  EQU   *\nDFBUFL1  DC    AL2(0)\nDFBUF01  DC    AL2(0)\nDFBUFT1  DC    CL251' '\nDFSLMSG  DS    0F\nDFBUFL2  DC    AL2(0)\nDFBUF02  DC    AL2(0)\nDFBUFT2  DC    CL251' '\nSPMG5WTO EQU   DFFLMSG            USE DF BUFFER FOR MESSAGE 5\nSPMG6WTO EQU   DFSLMSG            USE DF BUFFER FOR MESSAGE 6\n         EJECT\n         SPACE 3\n*--------------------------------------------------------------------*\n*        COMMAND TABLE                                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nCOMTABLE DS    0F\n         DC    CL8'RENEW'                  RENEW COMMAND\nCOMTADR  EQU   *-COMTABLE         ADDRESS OF COMMAND ROUTINE\n         DC    A(RENEW)\nCOMTRKWL EQU   *-COMTABLE\n         DC    A(RKWLIST1)        ADDRESS OF REQUIRED KWT LIST\nCOMTOKWL EQU   *-COMTABLE\n         DC    A(0)               ADDRESS OF OPTIONAL KWT LIST\nCOMTLEN  EQU   *-COMTABLE         LENGTH OF A TABLE ENTRY\n         DC    CL8'RACFON ',A(RACFON),A(RKWLIST1),A(0)\n         DC    CL8'RACFOFF',A(RACFOFF),A(RKWLIST1),A(0)\n         DC    CL8'PROTECT',A(PROTECT),A(RKWLIST1),A(0)\n         DC    CL8'SETNOPWR',A(SETNOPWR),A(RKWLIST1),A(0)\n         DC    CL8'UNLOCK',A(UNLOCK),A(RKWLIST1),A(0)\n         DC    CL8'EXPIRE',A(EXPIRE),A(RKWLIST1),A(0)\n         DC    CL8'EXTEND',A(EXTEND),A(RKWLIST1),A(0)\n         DC    CL8'ZEROEXPD',A(ZEROEXPD),A(RKWLIST1),A(0)\n         DC    CL8'RENAME',A(RENAME),A(RKWLIST2),A(0)\n         DC    CL8'NAME',A(NAME),A(RKWLIST1),A(0)\n         DC    CL8'SCRATCH',A(SCRATCH),A(RKWLIST1),A(0)\n         DC    CL8'END',A(END),A(0),A(0)\n         DC    C' '               END OF TABLE\n         EJECT\n*--------------------------------------------------------------------*\n*        KEYWORD TABLES                                              *\n*                                                                    *\n*       A KWT IS A TABLE THAT DESCRIBES A KEYWORD AND ALL ACCEPTABLE *\n*       ABREVIATIONS OF IT.                                          *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 3\nKWTDSN   DC    A(COMDSN)          ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(DSNKEY)        FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR6)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(7)             LENGTH\n         DC    C'DSNAME='         KEYWORD\n         DC    AL1(4)             LENGTH\n         DC    C'DSN='            ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'D='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\nKWTVOL   DC    A(COMVOL)          ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(VOLKEY)        FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR7)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(7)             LENGTH\n         DC    C'VOLUME='         KEYWORD\n         DC    AL1(4)             LENGTH\n         DC    C'VOL='            ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'V='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\nKWTNEWN  DC    A(COMNEWN)         ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(NEWNKEY)       FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR8)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(8)             LENGTH\n         DC    C'NEWNAME='        KEYWORD\n         DC    AL1(5)             LENGTH\n         DC    C'NEWN='           ABREVIATION\n         DC    AL1(3)             LENGTH\n         DC    C'NN='             ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'N='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\n*--------------------------------------------------------------------*\n*        RKWLIST'S ARE LIST OF REQUIRED KWT FOR A FUNCTION           *\n*--------------------------------------------------------------------*\n         SPACE 3\nRKWLIST1 DS    0H\n         DC    A(KWTDSN)\n         DC    A(KWTVOL)\n         DC    A(0)\n         SPACE 3\nRKWLIST2 DS    0H\n         DC    A(KWTDSN)\n         DC    A(KWTVOL)\n         DC    A(KWTNEWN)\n         DC    A(0)\n         SPACE 3\n*--------------------------------------------------------------------*\n*       SUBCOMMAND TABLE                                             *\n*--------------------------------------------------------------------*\n        SPACE 3\nSUBTABLE DS    0F\n         DC    CL8'LRECL'                  LRECL CHANGE\nSUBTADR  EQU   *-SUBTABLE         ADDRESS OF PROCESSING ROUTINE\n         DC    A(LRECL)\nSUBTSCL  EQU   *-SUBTABLE         LENGTH OF THE SUBCOMMAND NAME\n         DC    A(5)\nSUBTLEN  EQU   *-SUBTABLE         LENGTH OF A SUBC TABLE ENTRY\n         DC    CL8'BLKSIZE',A(BLKSIZE,7)   CHANGE BLKSIZE\n         DC    CL8'DSORG',A(DSORG,5)       RESET DSORG\n         DC    CL8'RECFM',A(RECFM,5)       RESET RECORD FORMAT\n         DC    CL8'KEYL',A(KEYL,4)         RESET KEY LENGTH\n         DC    CL8'RKP',A(RKP,3)           RESET REL KEY POSITION\n         DC    CL8'OPTCODE',A(OPTCODE,7)   RESET OPTCODE\n         DC    CL8'ENDNAME',A(ENDNAME,7)   END NAME SUBCOMMAND LIST\n         DC    C' '               END OF TABLE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        OPTCODE TABLE                                               *\n*--------------------------------------------------------------------*\n         SPACE 3\nOPTCODET DS    0H\nOPTW     EQU   X'80'\nOPTU     EQU   X'40'\nOPTC     EQU   X'20'\nOPTH     EQU   X'10'\nOPTO     EQU   X'10'\nOPTQ     EQU   X'08'\nOPTZ     EQU   X'04'\nOPTT     EQU   X'02'\nOPTJ     EQU   X'01'\n         DC    C'W'\nOPTCMASK EQU   *-OPTCODET         OFFSET TO MASK BYTE IN ENTRY\n         DC    AL1(OPTW)          WRITE VALIDITY CHECK (DASD)\nOPTCLEN  EQU   *-OPTCODET\n         DC    C'U',AL1(OPTU)     ALLOW DATA CHECK (INVALID CHAR)\n         DC    C'C',AL1(OPTC)     CHAINED SCHEDULING\n         DC    C'H',AL1(OPTH)     OCR HOPPER ENPTY EXIT?\n         DC    C'O',AL1(OPTO)     OCR ON-LINE CORRECTION\n         DC    C'Q',AL1(OPTQ)     ASCII TRANSLATION REQUIRED\n         DC    C'Z',AL1(OPTZ)     REDUCED ERROR RECOVERY\n         DC    C'T',AL1(OPTT)     USER TOTALING\n         DC    C'J',AL1(OPTJ)     DYNAMIC SELECT OF TRANSLATE TAB\n         DC    C' '               END OF TABLE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DATASET ORGANIZATION TABLE                                  *\n*--------------------------------------------------------------------*\n         SPACE 3\nDSORGTAB DS    0H\nISAM     EQU   X'8000'\nPHYSEQ   EQU   X'4000'\nDIRECT   EQU   X'2000'\nPDS      EQU   X'0200'\nUNMOVE   EQU   X'0100'\nVSAM     EQU   X'0008'\n         DC    CL3'PS ',AL2(PHYSEQ)\nDSORGLEN EQU   *-DSORGTAB\n         DC    CL3'PSU',AL2(PHYSEQ+UNMOVE)\n         DC    CL3'DA ',AL2(DIRECT)\n         DC    CL3'DAU',AL2(DIRECT+UNMOVE)\n         DC    CL3'IS ',AL2(ISAM)\n         DC    CL3'ISU',AL2(ISAM+UNMOVE)\n         DC    CL3'PO ',AL2(PDS)\n         DC    CL3'POU',AL2(PDS+UNMOVE)\n         DC    CL3'VS ',AL2(VSAM)\n         DC    C' '\n         EJECT\n*--------------------------------------------------------------------*\n*        RECORD FORMAT TABLE                                         *\n*--------------------------------------------------------------------*\n         SPACE 3\nRECFMTAB DS    0H\nFIXED    EQU   X'80'\nVARIABLE EQU   X'40'\nUNDEFINE EQU   X'C0'\nTOVRFLOW EQU   X'20'\nBLOCKED  EQU   X'10'\nFSTANDRD EQU   X'08'\nVSPANNED EQU   X'08'\nASACC    EQU   X'04'\nMCHCC    EQU   X'02'\n         DC    CL5'U    '\nRECFMASK EQU   *-RECFMTAB         OFFSET TO MASK BYTE IN ENTRY\n         DC    AL1(UNDEFINE)\nRECFMLEN EQU   *-RECFMTAB\n         DC    CL5'UT   ',AL1(UNDEFINE+TOVRFLOW)\n         DC    CL5'UA   ',AL1(UNDEFINE+ASACC)\n         DC    CL5'UM   ',AL1(UNDEFINE+MCHCC)\n         DC    CL5'UTA  ',AL1(UNDEFINE+TOVRFLOW+ASACC)\n         DC    CL5'UTM  ',AL1(UNDEFINE+TOVRFLOW+MCHCC)\n         DC    CL5'F    ',AL1(FIXED)\n         DC    CL5'FB   ',AL1(FIXED+BLOCKED)\n         DC    CL5'FS   ',AL1(FIXED+FSTANDRD)\n         DC    CL5'FT   ',AL1(FIXED+TOVRFLOW)\n         DC    CL5'FBS  ',AL1(FIXED+BLOCKED+FSTANDRD)\n         DC    CL5'FBT  ',AL1(FIXED+BLOCKED+TOVRFLOW)\n         DC    CL5'FBST ',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW)\n         DC    CL5'FA   ',AL1(FIXED+ASACC)\n         DC    CL5'FBA  ',AL1(FIXED+BLOCKED+ASACC)\n         DC    CL5'FSA  ',AL1(FIXED+FSTANDRD+ASACC)\n         DC    CL5'FTA  ',AL1(FIXED+TOVRFLOW+ASACC)\n         DC    CL5'FBSA ',AL1(FIXED+BLOCKED+FSTANDRD+ASACC)\n         DC    CL5'FBTA ',AL1(FIXED+BLOCKED+TOVRFLOW+ASACC)\n         DC    CL5'FBSTA',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW+ASACC)\n         DC    CL5'FM   ',AL1(FIXED+MCHCC)\n         DC    CL5'FBM  ',AL1(FIXED+BLOCKED+MCHCC)\n         DC    CL5'FSM  ',AL1(FIXED+FSTANDRD+MCHCC)\n         DC    CL5'FTM  ',AL1(FIXED+TOVRFLOW+MCHCC)\n         DC    CL5'FBSM ',AL1(FIXED+BLOCKED+FSTANDRD+MCHCC)\n         DC    CL5'FBTM ',AL1(FIXED+BLOCKED+TOVRFLOW+MCHCC)\n         DC    CL5'FBSTM',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW+MCHCC)\n         DC    CL5'V    ',AL1(VARIABLE)\n         DC    CL5'VB   ',AL1(VARIABLE+BLOCKED)\n         DC    CL5'VS   ',AL1(VARIABLE+VSPANNED)\n         DC    CL5'VT   ',AL1(VARIABLE+TOVRFLOW)\n         DC    CL5'VBS  ',AL1(VARIABLE+BLOCKED+VSPANNED)\n         DC    CL5'VBT  ',AL1(VARIABLE+BLOCKED+TOVRFLOW)\n         DC    CL5'VBST ',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW)\n         DC    CL5'VA   ',AL1(VARIABLE+ASACC)\n         DC    CL5'VBA  ',AL1(VARIABLE+BLOCKED+ASACC)\n         DC    CL5'VSA  ',AL1(VARIABLE+VSPANNED+ASACC)\n         DC    CL5'VTA  ',AL1(VARIABLE+TOVRFLOW+ASACC)\n         DC    CL5'VBSA ',AL1(VARIABLE+BLOCKED+VSPANNED+ASACC)\n         DC    CL5'VBTA ',AL1(VARIABLE+BLOCKED+TOVRFLOW+ASACC)\n         DC    CL5'VBSTA',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW+ASACC)\n         DC    CL5'VM   ',AL1(VARIABLE+MCHCC)\n         DC    CL5'VBM  ',AL1(VARIABLE+BLOCKED+MCHCC)\n         DC    CL5'VSM  ',AL1(VARIABLE+VSPANNED+MCHCC)\n         DC    CL5'VTM  ',AL1(VARIABLE+TOVRFLOW+MCHCC)\n         DC    CL5'VBSM ',AL1(VARIABLE+BLOCKED+VSPANNED+MCHCC)\n         DC    CL5'VBTM ',AL1(VARIABLE+BLOCKED+TOVRFLOW+MCHCC)\n         DC    CL5'VBSTM',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW+MCHCC)\n         DC    C' '\n         EJECT\n*--------------------------------------------------------------------*\n*        ERROR MESSAGE TABLE CSECTS\n*--------------------------------------------------------------------*\n         SPACE  3\n         PRINT NOGEN\nERRMSG1  MSGSETUP   ' FDB0001D **** DISASTER - READ OF JFCB FAILED.'\nERRMSG2  MSGSETUP   ' FDB0002E **** ERROR - CVAF FAILURE.    DATA SET NX\n               OT FOUND ON VOLUME SPECIFIED.  CHECK FOR SPELLING ERRORSX\n               .'\nERRMSG3  MSGSETUP   ' FDB0003D **** DISASTER - CVAF READ FAILED.  RUN AX\n               BORTED.'\nERRMSG4  MSGSETUP   ' FDB0004D **** DISASTER - CVAF WRITE FAILED.  RUN X\n                ABORTED.'\nERRMSG5  MSGSETUP   ' FDB0005E **** ERROR - UNKNOWN COMMAND SPECIFIED. X\n                THIS CONTROL CARD IGNORED.'\nERRMSG6  MSGSETUP   ' FDB0006E **** ERROR - DATASET NAME NOT SPECIFIED.X\n                 COMMAND NOT EXECUTED.'\nERRMSG7  MSGSETUP   ' FDB0007E **** ERROR - VOLUME SERIAL NUMBER NOT SPX\n               ECIFIED.  COMMAND NOT EXECUTED.'\nERRMSG8  MSGSETUP   ' FDB0008E **** ERROR - NEW DATASET NAME NOT SPECIFX\n               ED ON RENAME REQUEST.  COMMAND NOT EXECUTED.'\nERRMSG9  MSGSETUP   ' FDB0009E **** ERROR - UNKNOWN SUBCOMMAND FOR NAMEX\n               .  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG10 MSGSETUP   ' FDB0010E **** ERROR - INVALID LOGICAL RECORD LENGX\n               TH SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG11 MSGSETUP   ' FDB0011E **** ERROR - INVALID BLOCK SIZE SPECIFIEX\n               D.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG12 MSGSETUP   ' FDB0012E **** ERROR - VOLUME SPECIFIED NOT REFEREX\n               NCED IN A DD CARD AND DYNAMIC ALLOCATION ATTEMPT FAILED.X\n                 COMMAND NOT EXECUTED.'\nERRMSG13 MSGSETUP   ' FDB0013E **** ERROR - DATASET NAME SPECIFIED MULTX\n               PLE TIMES.  COMMAND NOT EXECUTED.'\nERRMSG14 MSGSETUP   ' FDB0014E **** ERROR - INVALID DATA SET NAME SPECIX\n               FIED.  COMMAND NOT EXECUTED.'\nERRMSG15 MSGSETUP   ' FDB0015E **** ERROR - VOLUME SERIAL SPECIFIED MULX\n               TIPLE TIMES.  COMMAND NOT EXECUTED.'\nERRMSG16 MSGSETUP   ' FDB0016E **** ERROR - INVALID VOLUME SERIAL NUMBEX\n               R SPECIFIED.  COMMAND NOT EXECUTED.'\nERRMSG17 MSGSETUP   ' FDB0017E **** ERROR - NEW DATASET NAME KEYWORD SPX\n               ECIFIED MULTIPLE TIMES.  COMMAND NOT EXECUTED.'\n*\nERRMSG18 MSGSETUP   ' FDB0018E **** ERROR - '  AVAILIABLE MESSAGE\n*\nERRMSG19 MSGSETUP   ' FDB0019E **** ERROR - INVALID NEW DATASET NAME SPX\n               ECIFIED FOR RENAME COMMAND.  COMMAND NOT EXECUTED.'\nERRMSG20 MSGSETUP   ' FDB0020E **** ERROR - UNKNOWN KEYWORD DETECTED ONX\n                COMMAND CARD.  COMMAND NOT EXECUTED.'\nERRMSG21 MSGSETUP   ' FDB0021E **** ERROR - INVALID RECORD FORMAT SPECIX\n               FIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG22 MSGSETUP   ' FDB0022E **** ERROR - INVALID DATA SET ORGANIZATIX\n               ON SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG23 MSGSETUP   ' FDB0023E **** ERROR - INVALID KEY LENGTH SPECIFIEX\n               D.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG24 MSGSETUP   ' FDB0024E **** ERROR - INVALID RELATIVE KEY POSITIX\n               ON SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG25 MSGSETUP   ' FDB0025E **** ERROR - UNEXPECTED END-OF-FILE OCCUX\n               RRED DURING CONTINUATION CARD PROCESSING.'\nERRMSG26 MSGSETUP   ' FDB0026E      LAST COMMAND WAS NOT EXECUTED.'\nERRMSG27 MSGSETUP   '0FDB0027E **** ERROR - INVALID EXECUTION PARAMETERX\n                SPECIFIED.  \"TEST\" IS THE ONLY VALID PARM.  RUN ABORTEDX\n                .'\nMSG28    MSGSETUP   ' FDB0028I **** NOTE:  TEST RUN ONLY.  DSCB WILL NOX\n               T BE REWRITTEN TO VTOC ON VOLUME.'\nERRMSG29 MSGSETUP   ' FDB0029E **** ERROR - VOLUME SERIAL REQUESTED NOTX\n                REFERENCED IN A JCL STATEMENT.  COMMAND NOT EXECUTED.'\nERRMSG30 MSGSETUP   ' FDB0030I **** NOTE:  NO MODIFICATIONS WERE MADE TX\n               O THE DSCB FOR THIS DATASET.  DSCB NOT REWRITTEN.'\nERRMSG31 MSGSETUP   ' FDB0031D **** DISASTER - OPEN FAILED FOR VTOC OF X\n               VOLUME SPECIFIED.  POSSIBLE DISASTEROUS ERROR.  RUN ABORX\n               ED.'\nMSG32    MSGSETUP   ' FDB0032I **** COMMAND EXECUTED SUCCESSFULLY.'\nMSG33    MSGSETUP   ' FDB0033I **** REPLY END TO TERMINATE FIXDSCB.'\nERRMSG34 MSGSETUP   ' FDB0034E **** ERROR - INVALID OPTCODE SPECIFIED. X\n                ENTIRE NAME SUBCOMMAND SET IGNORED.'\nMSG35    MSGSETUP   ' FDB0035W **** VTOC IS RESERVED, EXIT AS SOON AS PX\n               OSSIBLE. ****'\nERRMSG36 MSGSETUP   ' FDB0036D **** DATASET SPECIFIED HAS BEEN LEFT RENX\n               AMED TO \"FIXDSCB.SCRATCH.DATASET\".  RUN ABORTED.'\nERRMSG37 MSGSETUP   ' FDB0037E **** ERROR - OPER STATUS REQUIRED TO USEX\n                FIXDSCB UNDER TSO.  RUN TERMINATED.'\nERRMSG38 MSGSETUP   ' FDB0038E **** ERROR - AT LEAST ONE KEYWORD MUST OX\n               CCUR ON THE COMMAND CARD.  COMMAND IGNORED.'\nERRMSG39 MSGSETUP   ' FDB0039E **** ERROR - VOLUME SPECIFIED NOT REFEREX\n               NCED IN A DD CARD AND TSO DAIR FAILED.  COMMAND NOT EXECX\n               UTED.'\nERRMSG40 MSGSETUP   ' FDB0040E **** ERROR - VOLUME IS INDEXED, SCRATCH X\n               OR RENAME NOT ALLOWED.'\nERRMSG41 MSGSETUP   ' FDB0041E **** ERROR - CVAF VIER FAILURE. DATASET X\n               NOT FOUND ON VOLUME SPECIFIED. CHECK FOR SPELLING ERRORSX\n               .'\nERRMSG42 MSGSETUP   ' FDB0042D **** DISASTER - CVAF VIER FAILED.  RUN AX\n               BORTED.'\nERRMSG43 MSGSETUP   ' FDB0043D **** DISASTER - CVAF VIER WRITE FAILED. X\n                RUN ABORTED.'\nERRMSG44 MSGSETUP   ' FDB0044D RESERVE OF VOLUME FAILED, RUN ABORTED.'\nERRMSG45 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG46 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG47 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG48 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG49 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG50 MSGSETUP   ' '           DUMMY MESSAGE\n         PRINT GEN\n         SPACE 3\n         DROP R10,R11,R12\n         DROP R9\n         SPACE 5\n*--------------------------------------------------------------------*\n*              ESTAE ROUTINE TO CATCH ABENDS                         *\n*--------------------------------------------------------------------*\nESTAEX   DS    0H\n         USING ESTAEX,R15\n         C     R0,=F'12'           IS SDWA AVAILABLE?\n         BE    ESTAEXI3             NO, GO PROCESS\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15\n         DROP  R15\n         USING ESTAEX,R12\n         USING SDWA,R1\n*--------------------------------------------------------------------*\n*              SDWA WITHOUT RETRY                                    *\n*--------------------------------------------------------------------*\nESTAEXI2 DS    0H\n         $AUTHOFF\n         L     R1,X'18'(,R13)\n         SETRP REGS=(14,12),                PERCOLATE ABEND           ..\n               DUMP=YES\n         DROP  ,\n         SPACE 3\n*--------------------------------------------------------------------*\n*              NO SDWA                                               *\n*--------------------------------------------------------------------*\nESTAEXI3 DS    0H                           ESTAE EXIT ROUTINE\n         USING ESTAEX,R15\n         $AUTHOFF\n         L     R1,X'18'(,R13)\n         SLR   R15,R15                      SET ABEND CODE\n         BR    R14                          RETURN\n         DROP  ,\n         LTORG ,\n         TITLE 'FIXDMSGR - SYSPRINT/WTO/TPUT MESSAGE INTERFACE'\nFIXDMSGR CSECT\n*--------------------------------------------------------------------*\n*\n*        FUNCTION: TO BUILD THE PROPER CONTROL BLOCKS AND TO USE\n*                  THE PUT OR WTO I/O ROUTINES TO PRINT A MESSAGE.\n*\n*        INPUT   : REG. 1 CONTAINS THE ADDRESS OF THE MESSAGE\n*                  PARAMETER LIST\n*                  OFFSET LENGTH DESCRIPTION\n*                  +0     4      MESSAGE TABLE ADDRESS\n*                  +4     4      DCB ADDRESS\n*                  +8     4      ADDRESS OF ANY SPECIAL MESSAGE\n*                  +12    2      MESSAGE NUMBER\n*                  +14    1      I/O FLAG (SYSPRINT, WTO, OR TSO)\n*                  +15    1      CONSOLE ID (FOR WTO)\n*\n*                MESSAGE TABLE FORMAT:\n*                  A LIST OF FULL-WORDS CONTAINING THE ADDRESS OF\n*                  THE MESSAGE BUFFERS.\n*\n*                SPECIAL MESSAGES:\n*                  SPECIAL MESSAGES ARE MESSAGES WHICH HAVE BEEN\n*                  MODIFIED AND DO NOT EXIST IN THE NORMAL MESSAGE\n*                  TABLE.  IF THE SPECIAL MESSAGE POINTER IS NON-\n*                  ZERO THEN THAT MESSAGE IS USED INSTEAD OF LOOKING\n*                  UP A MESSAGE IN THE TABLE.  SPECIAL MESSAGES MUST\n*                  BE CONSTRUCTED IN THE FORM OF A VALID WTO BUFFER.\n*                  EXAMPLE:\n*                     SPMG    DC   AL2(LENGTH OF TEXT + 4)\n*                             DC   X'4000'       WTO FLAGS\n*                             DC   C'TEXT'\n*\n*--------------------------------------------------------------------*\n         EJECT\n*--------------------------------------------------------------------*\n*        INITIALIZATION\n*--------------------------------------------------------------------*\n         SAVE  (14,12)            SAVE CALLER'S REGS.\n         LR    R12,R15\n         USING FIXDMSGR,R12       ADDRESS CSECT\n         LR    R2,R1              PICK UP MESSAGE PARAM. LIST ADDR.\n         USING MPLDSECT,R2        ADDRESS PARM LIST\n         GETMAIN R,LV=LWASIZE,SP=LWASP OBTAIN LOCAL WORK AREA\n         XC    0(LWASIZE,R1),0(R1)\n         ST    R13,4(,R1)         CHAIN\n         ST    R1,8(,R13)           SAVE\n         LR    R13,R1                  AREAS\n         USING LWAMAP,R13         ADDRESS WORK AREA\n*--------------------------------------------------------------------*\n*        INITIALIZE LOCAL WORK AREA\n*--------------------------------------------------------------------*\n         SPACE 1\n         LA    R11,0              PRESET R12 TO ZERO\n         L     R3,MPLSPADD        PICK UP ADDRESS OF POSSIBLE SP MSG\n         LTR   R3,R3              ANY SPECIFIED?\n         BNZ   DOSPMG             BRANCH IF SO\n         L     R5,MPLMTTD         PICK UP MESSAGE TABLE ADDR.\n         LH    R4,MPLNUMD         PICK UP MESSAGE NUMBER\n         LTR   R4,R4              MESSAGE NUM SPECIFIED?\n         BZ    ERRORXIT           BRANCH IF NOT\n         BCTR  R4,0\n         SLL   R4,2               COMPUTE TABLE INDEX\n         L     R3,0(R4,R5)        PICK UP MESSAGE BUFFER ADDR.\nDOSPMG   DS    0H\n         LH    R1,0(R3)           PICK UP LINE LENGTH\n         LTR   R1,R1              LENGTH 0?\n         BE    NOCLOSE            THEN GET OUT.  NO MESSAGE TO PRINT\n         XC    MPLSPADD,MPLSPADD  ZERO OUT SPECIAL MESSAGE POINTER\n         TM    MPLIOFD,CONSOLE    ARE WE A STARTED TASK\n         BO    DOWTOIO            USE WTO TYPE I/O IF SO\n         TM    MPLIOFD,TSOSESS    ARE WE A TSO SESSION\n         BO    DOTSOIO            USE TPUT TYPE I/O IF SO\n         L     R6,MPLDCBD         PICK UP DCB ADDRESS\n         USING IHADCB,R6          ADDRESS DCB\n         TM    DCBOFLGS,DCBOFOPN  IS DCB OPEN\n         BO    DCBOPEN            BRANCH IF SO\n         OI    LWAFLAG,OPENHERE   FLAG AS OPENED HERE\n         OPEN  ((6),OUTPUT)       OPEN IT UP\n         TM    DCBOFLGS,DCBOFOPN  DID IT WORK\n         BZ    ERROROPN           BRANCH IF NOT\nDCBOPEN  DS    0H\n         DROP  R6\n         SPACE 1\nPUTOUT   DS    0H\n         MVI   LWALINE,BLANK      BLANK OUT LINE BUFFER\n         MVC   LWALINE+1(132),LWALINE\n         LH    R1,0(R3)           PICK UP LINE LENGTH\n         S     R1,FIVE            DROP FOR EXECUTED INST AND FOR\n*                                 WTO HEADDER OMISSION\n         EX    R1,LINEMOVE        MOVE TO BUFFER\n         PUT   (6),LWALINE\n         SPACE 1\nEXITROUT DS    0H\n         TM    LWAFLAG,OPENHERE\n         BNO   NOCLOSE\n         CLOSE ((6))              WE OPENED IT SO WE CLOSE IT\n         B     NOCLOSE\n         EJECT ,\n*--------------------------------------------------------------------*\n*        DO WTO TO STARTING CONSOLE\n*--------------------------------------------------------------------*\n         SPACE 3\nDOWTOIO  DS    0H\n         IC    R0,MPLCOND         PICK UP CONSOLE ID\n         LR    R1,R3              POINTER TO WTO MESSAGE AREA IN LIST\n         WTO   MF=(E,(1))         EXECUTE\n         B     NOCLOSE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DO TPUT TO TSO SESSION\n*--------------------------------------------------------------------*\n         SPACE 3\nDOTSOIO  DS    0H\n         LH    R0,0(R3)           PICK UP MESSAGE LENGTH\n         S     R0,MPLFOUR         DROP BY FOUR (COMPENSATE FOR HEADER)\n         LA    R1,4(R3)           PICK UP MESSAGE TEXT ADDRESS\n         O     R1,TPUTFLAG        SET IN FLAGS\n         LA    R15,0              SET UID POINTER TO ZERO\n         TPUT  (1),(0),R          EXECUTE TPUT\n         B     NOCLOSE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        DI-INITIALIZE AND EXIT\n*--------------------------------------------------------------------*\n         SPACE 3\nNOCLOSE  DS    0H\n         XC    LWAFLAG,LWAFLAG    ZERO OUT THE FLAGS\n         XC    MPLNUMD,MPLNUMD    ZERO MSG NUMBER\n         LR    R1,R13             LOAD PARAMETER REG. 1\n         L     R13,4(,R13)        RESTORE CALLER'S SAVE REG.\n         FREEMAIN R,LV=LWASIZE,SP=LWASP,A=(1) FREE LOCAL WORK AREA\n         LR    R15,R11            LOAD RETURN CODE\n         RETURN (14,12),RC=(15)   RETURN TO CALLER\nERRORXIT DS    0H\n         LA    R11,20             INDICATE INVALID PARAMETER LIST\n         B     NOCLOSE\nERROROPN DS    0H\n         LA    R11,24             INDICATE OPEN FAILURE\n         B     NOCLOSE\n         SPACE 3\n*--------------------------------------------------------------------*\n*        LOCAL CONSTANTS AND EXECUTED INSTRUCTIONS                   *\n*--------------------------------------------------------------------*\n         SPACE 1\nTPUTFLAG DC    F'0'               TPUT FLAGS\nMPLFOUR  DC    F'4'\nFIVE     DC    F'5'\nLINEMOVE MVC   LWALINE(0),4(R3)\n         LTORG ,\n         SPACE 3\n         TITLE 'FIXDSCB - DSECTS'\n*--------------------------------------------------------------------*\n*        LOCAL WORK AREA MAPPING\n*--------------------------------------------------------------------*\n         SPACE 1\nLWAMAP   DSECT\n         DS    18F                REG. SAVE AREA\nLWALINE  DS    CL133\nLWAFLAG  DS    X\nOPENHERE EQU   X'80'              DCB SUPPLIED OPENED LOCALLY\nLWASIZE  EQU   *-LWAMAP\nLWASP    EQU   1\n         SPACE 3\n*--------------------------------------------------------------------*\n*        TSO COMMAND BUFFER MAPPING DSECT (CBUFF)\n*--------------------------------------------------------------------*\n         SPACE 1\nCMDBUFR  DSECT\nCMDBLEN  DS    H\nCMDBOFF  DS    H\nCMDBTEXT DS    C\n         SPACE 3\n*--------------------------------------------------------------------*\n*        MESSAGE PARAMETER LIST MAPPING DSECT (MPL)\n*--------------------------------------------------------------------*\n         SPACE 1\nMPLDSECT DSECT\nMPLMTTD  DS    A\nMPLDCBD  DS    A\nMPLSPADD DS    A\nMPLNUMD  DS    H\nMPLIOFD  DS    C\nMPLCOND  DS    C\n         SPACE 3\n*--------------------------------------------------------------------*\n*        FORMAT 1 DSCB MAPPING DSECT\n*--------------------------------------------------------------------*\n         SPACE 3\nDSCB     DSECT\n         IECSDSL1 1\n         DS    0F\nDSCBLTH  EQU   *-DSCB              FULL DSCB LENGTH\nDSCBLTH2 EQU   *-DS1FMTID           MINUS DSNAME LENGTH\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CVAF MAPPINGS\n*--------------------------------------------------------------------*\nICVVIER  ICVVIER\n         SPACE 3\nCVPL     ICVAFPL ,\n         SPACE 3\nBUFLIST  DSECT ,\n         ICVAFBFL DSECT=NO         GEN 2 AREAS TOGETHER\nBUFLEN   EQU   *-BUFLIST\n*--------------------------------------------------------------------*\n*        EXTERNAL DATA AREA MAPPING DSECTS\n*--------------------------------------------------------------------*\n         SPACE 3\n         PRINT NOGEN\nJFCBDSCT DSECT\n         IEFJFCBN\nJFCBMOD  EQU   X'80'\n         SPACE 1\n         DCBD DSORG=XE,DEVD=DA\n         SPACE 1\n         PRINT GEN\nTIOT     DSECT ,\n         IEFTIOT1\n         PRINT GEN\n         SPACE 1\n         IEFUCBOB\n         SPACE 1\n         IHAPSA\n         SPACE 1\n         IEECHAIN\n         SPACE 1\n         IKJDAPL\n         SPACE 1\n         IKJPSCB\n         SPACE 1\n         IKJCPPL\n         SPACE 1\n         IHAASCB\n         SPACE 1\n         IEZDEB\n         SPACE 1\n         IHASDWA ,\n         SPACE 1\n         CVT DSECT=YES,PREFIX=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FIXDSCB2": {"ttr": 9220, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x19/\\x01\\x01\\x19/\\x14\\x06\\n;\\n;\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-07-11T00:00:00", "modifydate": "2001-07-11T14:06:00", "lines": 2619, "newlines": 2619, "modlines": 0, "user": "KBASS"}, "text": "***********************************************************************\n*        WILL  WORK ON MVS 3.8                                        *\n***********************************************************************\n*                                                                     *\n*                       F I X D S C B                                 *\n*                                                                     *\n*     THIS IS A SYSTEM PROGRAMMER UTILITY PROGRAM DESIGNED            *\n*     TO FACILITATE THE MODIFICATION (OR REPAIR) OF DATA SET          *\n*     CONTROL BLOCKS (DSCB'S).  THIS PROGRAM DOES NOT DO              *\n*     ANY TYPE OF SECURITY VALIDATION.  CHANGES ARE MADE TO           *\n*     THE DSCB'S AS REQUESTED, WITHOUT REGUARD TO THEIR               *\n*     CORRECTNESS OR APPLICABILITY TO THE SPECIFIC DATASET.           *\n*     TO SOME PERSONS (AUDITORS OR SECURITY TYPES IN PARTICULAR)      *\n*     THIS PROGRAM WILL REPRESENT ONE BIG INTEGRITY EXPOSURE.         *\n*     SOME MEANS MUST BE FOUND TO CONTROL THE AVAILABILITY            *\n*     AND USE OF THIS UTILITY.  THIS RESPONSIBILITY IS LEFT           *\n*     TO THE INDIVIDUAL SHOP TO IMPLEMENT.                            *\n*                                                                     *\n*     AUTHOR: DAVID ALAN WEAVER                                       *\n*             AMDAHL SYSTEMS ENGINEER                                 *\n*             HOUSTON LIGHTING & POWER                                *\n*                                                                     *\n*     DATE WRITTEN: NOVEMBER, 1979                                    *\n*                                                                     *\n*     RELEASE LEVEL 1.0                                               *\n*                                                                     *\n*     MODIFICATION RECORD:                                            *\n*                                                                     *\n*     DATE    INITIALS      MODIFICATION                              *\n*   12/15/79    DAW         CHANGED TO RUN UNDER TSO AS A CP          *\n*   01/01/80    DAW         CHANGED TO REQUIRE OPER STATUS UNDER TSO  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* OPERATION: FIXDSCB MUST BE LINKEDITED WITH AN AUTHORIZATION         *\n*            CODE OF 1 AND PLACED IN AN AUTHORIZED LIBRARY.           *\n*                                                                     *\n*            FIXDSCB OPERATES IN ONE OF THREE MODES: BATCH, TSO, OR   *\n*            STARTED TASK.  WHEN EXECUTED AS A BATCH PROGRAM          *\n*            ALL I/O IS HANDLED THROUGH SYSIN/SYSPRINT DD             *\n*            CARDS.  WHEN EXECUTED AS A STARTED TASK ALL I/O          *\n*            IS DONE VIA WTO/WTOR THROUGH THE STARTING CONSOLE.       *\n*            WHEN EXECUTED AS A TSO COMMAND PROCESSOR ALL I/O         *\n*            IS DONE VIA TPUT/TGET TO THE TSO SESSION.                *\n*            NOTE: UNDER MVS, IF FIXDSCB IS TO BE USED UNDER TSO      *\n*                  THE NAME IT IS LINKEDITED UNDER MUST BE ADDED      *\n*                  TO THE COMMAND AUTHORIZATION TABLE (IKJEFTE2)      *\n*                  IN THE TMP (IKJEFT02).  SEE THE SPL: TSO FOR       *\n*                  DETAILS ABOUT USING AUTHORIZED COMMANDS UNDER      *\n*                  TSO.                                               *\n*                                                                     *\n*            IF AN EXECUTION PARAMETER OF \"TEST\" IS SUPPLIED          *\n*            DURING ANY EXECUTION OF FIXDSCB, NO MODIFICATIONS        *\n*            WILL BE APPLIED TO ANY DSCB.  THE PROGRAM WILL           *\n*            SIMPLY RUN THROUGH IT'S LOGIC.                           *\n*                                                                     *\n*            ALL PRIMARY COMMANDS (SEE BELOW) MUST SUPPLY             *\n*            A DATASET NAME AND THE VOLUME SERIAL ON WHICH            *\n*            IT RESIDES.  THIS CRITERIA WAS CHOSEN OVER CATALOG       *\n*            SEARCHES TO AVOID THE ACCIDENTAL MODIFICATION OF         *\n*            A DSCB OF THE SAME NAME ON ANOTHER VOLUME THAN           *\n*            INTENDED IF THE CATALOG POINTS SOMEWHERE ELSE.           *\n*            THE THEORY IS: IF YOU KNOW IT NEEDS TO BE FIXED          *\n*                           THEN YOU BETTER KNOW WHERE IT IS.         *\n*                                                                     *\n*            FIXDSCB WILL OPERATE UNDER SVS OR MVS.                   *\n*            WHEN USED UNDER MVS SOME ADDITIONAL FLEXIBILITY IS       *\n*            GAINED BY THE FACT THAT FIXDSCB WILL DYNAMICALLY ALLO-   *\n*            CATE THE SPECIFIED VOLUME IF IT CANNOT FIND A REFER-     *\n*            ENCE TO IT IN THE TIOT.  THIS ALLOWS A VERY SIMPLE       *\n*            PROC TO BE USED FOR STARTED TASK.  UNDER SVS YOU WILL    *\n*            HAVE TO INCLUDE AN ANYNAME DD CARD FOR EACH VOLUME       *\n*            YOU INTEND TO MODIFY.  FOR MVS BATCH USAGE, IT IS        *\n*            SUGGESTED THAT YOU INCLUDE AN ANYNAME DD CARD FOR        *\n*            EACH VOLUME TO BE MODIFIED TO SAVE THE OVERHEAD OF       *\n*            ALLOCATING THEM DYNAMICALLY.                             *\n*                                                                     *\n*            NOTE: IT IS ENTIRELY POSSIBLE (USING THIS UTILITY)       *\n*                  TO RENAME A DATSET TO A NAME WHICH ALREADY         *\n*                  EXIST ON THE PACK.  CAUTION SHOULD BE USED         *\n*                  WHEN DOING RENAMES TO SEE THAT THIS CONDITION      *\n*                  DOES NOT ARISE.                                    *\n*                  SUBNOTE: THIS \"FLAW\" WAS LEFT IN INTENTIONALLY.    *\n*                           I LEAVE IT TO YOUR IMAGINATION JUST HOW   *\n*                           IT COULD BE EXPLOITED CONSTRUCTIVELY.     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        A WORD OR TWO ABOUT THE SCRATCH COMMAND:                     *\n*                                                                     *\n*          THE SCRATCH PRIMARY COMMAND IS EXECUTED IN A RATHER        *\n*          UNIQUE WAY.  THE DATASET IS FIRST RENAMED TO A SPECIAL     *\n*          NAME (FIXDSCB.SCRATCH.DATASET) AND ANY EXPIRATION DATE     *\n*          AND PASSWORD FLAGS ARE SET TO ZERO.  THE RENAMED           *\n*          DATASET IS THEN SCRATCHED VIA THE SCRATCH SVC.             *\n*          THIS PROCEDURE FACILITATES SCRATCHING DATASETS WHICH       *\n*          MAY HAVE THE SAME NAME AS A DATASET WHICH IS OPEN          *\n*          (AND THUS ENQUED) ON ANOTHER PACK (SUCH AS SYS1.LINKLIB).  *\n*          THIS ALSO MAKES IT POSSIBLE TO SCRATCH A DATASET           *\n*          WHICH IS REALLY OPEN BY SOME OTHER TASK SO BE VERY         *\n*          CAUTIOUS IN USING THIS COMMAND.                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* FIXDSCB PROGRAM INFORMATION:                                        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: TO MODIFY A DATASETS DSCB ACCORDING TO SUPPLIED           *\n*           COMMANDS.  SUPPORTED FUNCTIONS ARE:                       *\n*                                                                     *\n*           RENAME .......... RENAME A DATASET TO A NEWNAME           *\n*           PROTECT ......... TURN ON A DSCB'S PASSWORD BITS          *\n*           SETNOPWR ........ TURN ON A DSCB'S NOPASSWORD READ ENABLE *\n*           UNLOCK .......... TURN OFF A DSCB'S PASSWORD BITS         *\n*           RENEW ........... RESET CREATION DATE TO CURRENT DATE     *\n*           EXPIRE .......... SWAP CREATION AND EXPIRATION DATES      *\n*           EXTEND .......... SET EXPIRATION DATE TO 99:365           *\n*           ZEROEXPD ........ SET EXPIRATION DATE TO 00:000           *\n*           SCRATCH ......... DELETE SPECIFIED DATASET                *\n*                                                                     *\n*           IN ADDITION TO THESE FUNCTIONS A NAME DEFINITION CARD     *\n*           FOLLOWED BY SUBCOMMAND CARDS PERTAINING TO THAT           *\n*           DATASET MAY BE ENTERED.  VALID SUBCOMMANDS ARE:           *\n*                                                                     *\n*           RECFM ........... RESET RECORD FORMAT TO THAT SPECIFIED   *\n*           LRECL ........... RESET LRECL TO SPECIFIED VALUE          *\n*           BLKSIZE ......... RESET BLKSIZE TO SPECIFIED VALUE        *\n*           DSORG ........... RESET DSORG TO THAT SPECIFIED           *\n*           KEYL ............ RESET KEY LENGTH TO THAT SPECIFIED      *\n*           RKP ............. RESET RELATIVE KEY POSITION             *\n*           OPTCODE ......... RESET OPTCODE VALUE (SEE JCL MANUAL)    *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*    COMMAND FORMATS ARE AS FOLLOWS:                                  *\n*                                                                     *\n* INPUT IS FREE FORM RESTRICTED ONLY THAT COMMANDS MAY BEGIN IN       *\n* COLUMN 1 OR AFTER AND SUBCOMMANDS OF THE NAME COMMAND MUST BEGIN    *\n* IN COLUMN 2 OR AFTER.                                               *\n* THE KEYWORDS VOLUME, DSNAME, AND NEWNAME MAY APPEAR IN ANY ORDER.   *\n*                                                                     *\n* AT LEAST ON KEYWORD MUST APPEAR ON THE COMMAND CARD.  COMMAND       *\n* CARDS MAY BE CONTINUED ONTO A NEW CARD. CONTINUE CARDS ARE          *\n* FREE FORMAT (COL 1-71 MAY BE USED). EMBEDDED BLANKS MAY NOT         *\n* APPEAR IN THE KEYWORD STRINGS.  COMMENTS MAY BE ENTERED ON          *\n* COMMAND CARDS BY SEPERATING THEM FROM ANY VALUES BY AT LEAST        *\n* ONE BLANK.  COMMENT CARDS MAY BE CODED BY PLACING AN ASTERISK       *\n* IN COLUMN 1.  COMMENT CARDS MAY APPEAR ANYWHERE IN THE INPUT        *\n* STREAM.                                                             *\n* NOTE: COLUMN 72 MUST CONTAIN A BLANK AT ALL TIMES                   *\n*                                                                     *\n* CARD FORMATS:                                                       *\n* RENEW   VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* PROTECT VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* UNLOCK  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* EXPIRE  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* EXTEND  VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* RENAME  VOLUME=XXXXXX,DSNAME=DATASET-NAME,NEWNAME=NEW-DATASET-NAME  *\n* SCRATCH VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n* NAME    VOLUME=XXXXXX,DSNAME=DATASET-NAME                           *\n*     WHERE:                                                          *\n*     XXXXXX IS THE DASD VOLUME SERIAL THAT CONTAINS THE              *\n*     DATASET (DSCB) TO BE MODIFIED.                                  *\n*     DATASET-NAME IS THE NAME OF THE DATA SET (DSCB) TO              *\n*     BE MODIFIED.                                                    *\n*     NEW-DATASET-NAME IS THE NEW NAME TO BE ASSIGNED TO THE          *\n*     DATASET SPECIFIED BY THE DSNAME KEYWORD (RENAME COMMAND ONLY).  *\n*                                                                     *\n*        KEYWORDS MAY BE ABBREVIATED AS FOLLOWS:                      *\n*                                                                     *\n*           DSNAME - DSN OR D                                         *\n*           VOLUME - VOL OR V                                         *\n*           NEWNAME- NEWN OR N                                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* NAME COMMAND: SUBCOMMAND SPECIFICATIONS                             *\n*                                                                     *\n* NAME   VOLUME=XXXXXX,DSNAME=DATASET-NAME  (SEE ABOVE)               *\n*       NOTE: THE NAME CARD DEFINES A DATASET DSCB TO BE WORKED ON.   *\n*             ALL MODIFICATION CARDS THAT FOLLOW IT PERTAIN TO THAT   *\n*             DATASET UNTIL ANOTHER PRIMARY COMMAND IS ENCOUNTERED    *\n*             (RENEW, SCRATCH, EXPIRE, ETC...) OR AN END-OF-FILE      *\n*             OCCURS.                                                 *\n*                                                                     *\n*  LRECL=XXXXX    (WHERE XXXXX IS THE DESIRED LRECL)                  *\n*  BLKSIZE=XXXXX  (WHERE XXXXX IS THE DESIRED BLOCK SIZE)             *\n*  RECFM=XXXXX    (WHERE XXXXX IS THE DESIRED RECORD FORMAT)          *\n*                 (SEE RECFMTAB FOR SUPPORTED RECFM VALUES)           *\n*  DSORG=XXX      (WHERE XXX IS THE DESIRED DATASET ORGANIZATION)     *\n*                 (CAUTION: NO CHECKING IS DONE!)                     *\n*                 (SEE DSORGTAB FOR SUPPORTED DSORG VALUES)           *\n*  KEYL=XXX       (WHERE XXX IS THE DESIRED KEY LENGTH)               *\n*  RKP=XXX        (WHERE XXX IS THE DESIRED RELATIVE KEY POSITION)    *\n*  OPTCODE=X      (WHERE X IS THE DESIRED OPTCODE LETTER)             *\n*                                                                     *\n*             ONLY ONE DSNAME SUBCOMMAND IS ALLOWED PER CARD.         *\n*             IF A PARTICULAR SUBCOMMAND IN ENTERED MORE THAN         *\n*             ONCE THE LAST OCCURENCE OF THE SUBCOMMAND WILL          *\n*             BE THE ONE USED.  IF AN ERROR OCCURS DURING PROCESSING  *\n*             OF ANY SUBCOMMAND THE ENTIRE SUBCOMMAND SET             *\n*             FOR THE CURRENT NAME COMMAND WILL BE DISCARDED.         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*     R0 ..... LOCAL USAGE                                            *\n*     R1 ..... LOCAL USAGE                                            *\n*     R2 ..... LOCAL USAGE                                            *\n*     R3 ..... LOCAL USAGE                                            *\n*     R4 ..... LOCAL USAGE                                            *\n*     R5 ..... POINTER TO CARD KEYWORDS (SCAN POINTER)                *\n*     R6 ..... BAL TO CARD SCAN LOGIC (COMCARD)                       *\n*     R7 ..... BAL TO SIMPLE COMMON ROUTINES (SKIPB, PUTCARD, ..ETC)  *\n*     R8 ..... BAL TO CARD FETCH ROUTINE (GETACARD)                   *\n*     R9 ..... ADDRESS DSCB WORKAREA                                  *\n*     RA ..... PROGRAM BASE REGISTER 1                                *\n*     RB ..... PROGRAM BASE REGISTER 2                                *\n*     RC ..... PROGRAM BASE REGISTER 3                                *\n*     RD ..... SAVE AREA CHAIN POINTER                                *\n*     RE ..... RETURN REG                                             *\n*     RF ..... ENTRY REG                                              *\n*                                                                     *\n***********************************************************************\n         EJECT\n         MACRO\n&NAME    MSGEXIT &SPMSG=,&MSG=,&RETURN=,&ABEND=,&RC=8\n         LCLC  &ERRID\n         LCLC  &NAMEX\n         AIF   ('&SPMSG' NE '').MSGOK\n         AIF   ('&MSG' NE '').MSGOK\n         MNOTE 8,'** ERROR - NO MESSAGE NUMBER SPECIFIED.'\n         MEXIT\n.MSGOK   ANOP\n         AIF   ('&RETURN' NE '' OR '&ABEND' NE '').RETOK\n         MNOTE 8,'** ERROR - NO RETURN LABEL OR ABEND CODE SPECIFIED.'\n         MEXIT\n.RETOK   ANOP\n         AIF   ('&NAME' NE '').NAMEOK\n&ERRID   SETC  'ERROR&MSG'\n         AGO   .IDSET\n.NAMEOK  ANOP\n&ERRID   SETC  '&NAME'\n.IDSET   ANOP\n&ERRID   DS    0H\n         ST    RF,RCSAVE\n         AIF   ('&RC' EQ '').NORC\n         AIF   ('&MSG' EQ '').SPRC\n         LA    R0,&RC\n         ST    R0,FUNCRC\n         C     R0,HIGHRC\n         BL    MSGRC&MSG\n         ST    R0,HIGHRC\nMSGRC&MSG DS   0H\n         AGO   .NORC\n.SPRC    ANOP\n&NAMEX   SETC  'SPRC'.'&SYSNDX'\n         LA    R0,&RC\n         ST    R0,FUNCRC\n         C     R0,HIGHRC\n         BL    &NAMEX\n         ST    R0,HIGHRC\n&NAMEX    DS   0H\n.NORC    ANOP\n         AIF   ('&SPMSG' NE '').DOSP\n         LA    R1,&MSG\n         STH   R1,MPLNUM\n         XC    MPLSPADR,MPLSPADR\n         AGO   .DUMPX\n.DOSP    ANOP\n         LA    R1,&SPMSG\n         ST    R1,MPLSPADR\n         XC    MPLNUM,MPLNUM\n.DUMPX   ANOP\n         BAL   R7,MSGOUT\n         AIF   ('&RETURN' EQ '').GODUMP\n         B     &RETURN\n         MEXIT\n.GODUMP  ANOP\n         ABEND &ABEND,DUMP\n         MEXIT\n         MEND\n         EJECT\n         MACRO\n         MSGSETUP &TEXT\n         LCLC  &SEQ\n&SEQ     SETC  'MSG'.'&SYSNDX'\nMSGTABLE CSECT\n         DC    A(&SEQ)            ADDRESS OF MESSAGE BUFFER\nMSGTEXT  CSECT\n&SEQ     DS    0F\n         DC    AL2(&SEQ.L)        LENGTH OF TEXT\n         DC    X'4000'            MCS FLAGS FOR WTO\n&SEQ.B   DC    C&TEXT\n&SEQ.L   EQU   *-&SEQ             LENGTH OF WTO MESSAGE SETUP\n         MEND\nFIXDSCB  TITLE 'FIXDSCB - A DSCB MODIFICATION UTILITY.'\nFIXDSCB  CSECT\n         SAVE  (14,12),T,*        SAVE REGS\n         LR    RA,RF              POINT BASE REGISTER TO ENTRY POINT\n         LA    RB,2048(RA)        SET UP\n         LA    RB,2048(RB)            SECOND BASE REG\n         LA    RC,2048(RB)        SET UP\n         LA    RC,2048(RC)            THIRD BASE REG\n         USING FIXDSCB,RA,RB,RC   ESTABLISH BASE REGISTERS\n         LA    R2,SAVEAREA        POINT TO SAVEAREA\n         ST    RD,SAVEAREA+4      POINTER TO CALLERS SAVEAREA\n         ST    R2,8(RD)           POINTER TO CALLED SAVEAREA\n         LR    RD,R2              STANDARD POINTER TO SAVEAREA\n         LR    R2,R1              SAVE ANY PARM POINTER\n         EXTRACT TSOWORD,FIELDS=(TSO) CHECK FOR TSO SESSION\n         L     R1,TSOWORD         PICK UP BYTE ADDRESS\n         TM    0(R1),X'80'        IS TSO SESSION BIT ON?\n         BO    SETUPTSO           BRANCH IF SO\n         EJECT\n*\n*        EXECUTION IS BATCH OR STARTED TASK\n*\n         SPACE 3\n         LTR   R2,R2              IS ANY PARM PRESENT\n         BZ    NOPARM             BRANCH IF NOT\n         L     R1,0(R2)           LOAD PARM POINTER\n         LH    R2,0(R1)           PICK UP PARM LEN\n         LTR   R2,R2              IS LEN ZERO\n         BZ    NOPARM             BRANCH IF SO\n         C     R2,FOUR            IS LENGTH = 5\n         BNE   ERROR27            BRANCH IF NOT\n         CLC   TESTPARM,2(R1)     IS PARM 'TEST'\n         BNE   ERROR27            BRANCH IF NOT\n         OI    MASTFLAG,TESTONLY\n         B     NOPARM\n         EJECT\n*\n*        EXECUTION IS AS A TSO COMMAND PROCESSOR\n*\n         SPACE 3\nSETUPTSO DS    0H\n         STAX  DEFER=YES          DISALLOW ATTENTION INTERRUPTS\n         OI    IOFLAG,TSOSESS     MARK AS TSO SESSION\n         OI    MPLIOF,TSOSESS     FLAG MPL AS WTO I/O REQUIRED\n         ST    R2,CPPLHOLD        SAVE CPPL POINTER\n         USING CPPL,R2            ADDRESS COMMAND PROCESSOR PARM LIST\n         L     R1,CPPLPSCB        GET PSCB ADDRESS\n         USING PSCB,R1\n         TM    PSCBATR1,PSCBCTRL  DOES USER HAVE OPER AUTHORITY?\n         BNO   ERROR36            GET OUT IF NOT\n         DROP  R1\n         L     R3,CPPLCBUF        PICK UP ADDRESS OF COMMAND BUFFER\n         USING CMDBUFR,R3         ADDRESS COMMAND BUFFER\n         LH    R1,CMDBLEN         PICK UP BUFFER LENGTH\n         S     R1,FOUR            DROP BY 4\n         CH    R1,CMDBOFF         COMPARE TO OFFSET\n*                                 IF LEN-4=OFFSET THEN NO PARMETERS\n*                                 SPECIFIED\n         BE    NOPARM\n         LH    R1,CMDBOFF         PICK UP OFFSET VALUE\n         LA    R1,4(R1,R3)        COMPUTE FIRST PARM ADDRESS\n         OC    0(4,R1),BLANKS     SHIFT TO UPPERCASE\n         CLC   TESTPARM,0(R1)     IS PARM \"TEST\"\n         BNE   ERROR27            BRANCH TO ERROR IF NOT\n         OI    MASTFLAG,TESTONLY\n         B     NOPARM\n         DROP  R2\n         DROP  R3\n         EJECT\n*\n*        INITIALIZE FOR RUN\n*\n         SPACE 3\nNOPARM   DS    0H\n         L     R1,CVTPTR          GET ADDRESS OF CVT\n         S     R1,PREFIXL         BACKUP TO START OF PREFIX\n         USING CVTFIX,R1          ADDRESS CVT AT PREFIX\n         CLC   CVTNUMB,MVSCODE    IS THIS AN MVS SYSTEM\n         BNE   NONMVS             SKIP IF NOT\n         OI    MASTFLAG,MVSSYS    TURN ON MVS FLAG\n         DROP  R1\nNONMVS   DS    0H\n         TM    IOFLAG,TSOSESS     IS THIS A TSO SESSION\n         BO    MESSAG33           BRANCH IF SO\n         SPACE 1\n         XR    R1,R1\n         USING PSA,R1             ADDRESS PSA\n         L     R1,PSAAOLD         GET OLD ASCB ADDRESS\n         DROP  R1\n         USING ASCB,R1            ADDRESS OUR ASCB\n         L     R1,ASCBCSCB        GET CSCB ADDRESS\n         DROP  R1\n         USING CHAIN,R1           ADDRESS CSCB\n         CLI   CHUCMP,HEXZERO     IS THIS FROM A CONSOLE (STARTED TASK)\n         BE    NOCON              BRANCH IF NOT\n         OI    IOFLAG,CONSOLE     FLAG AS CONSOLE I/O REQUIRED\n         OI    MPLIOF,CONSOLE     FLAG MPL AS WTO I/O REQUIRED\n         MVC   CONID,CHUCMP       SAVE CONSOLE ID\n         MVC   MPLCON,CONID       SAVE CONSOLE ID IN MPL\n         B     MESSAG33           DO NOT OPEN SYSIN/SYSPRINT FOR IO\nNOCON    DS    0H\n         OPEN  (SYSIN,INPUT)\n         OPEN  (SYSPRINT,OUTPUT)\n         DROP  R1\n         EJECT\n*\n*        GET A COMMAND CARD AND PARSE IT FOR KEYWORDS\n*\n         SPACE 3\nLOOP1    DS    0H\n         BAL   R5,CARDIN\nLOOP2    DS    0H\n         MVI   MSGCC,LINES3       SET CARRIAGE CONTROL\n         BAL   R7,PUTBLANK        GO PRINT BLANK LINE\n         BAL   R7,PUTCARD         GO PRINT CARD\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    LOOP1              SKIP IF SO\n         BAL   R7,SKIPB           SKIP LEADING BLANKS ON CARD\n         LTR   R5,R5              IS CARD ALL BLANKS\n         BZ    LOOP1              BRANCH IF SO\n         XC    FUNCRC,FUNCRC      ZERO OUT FUNCTION RETURN CODE\n         MVI   DSCBNAME,BLANK     SET DSN TO OMMITTED\n         MVI   VOLUME,BLANK       SET VOL TO OMMITTED\n         MVI   COMFLAG,HEXZERO    SET COMMAND CARD FLAG TO ZEROS\n         BAL   R6,COMCARD         PICK APART THE COMMAND CARD\n         TM    MASTFLAG,COMBADF   WAS COMMAND INVALID\n         BO    ERROR5\n         EJECT\n*\n*        CHECK THAT ALL REQUIRED KEYWORDS WERE SPECIFIED\n*\n         SPACE 3\n         L     R1,CURRENTF        LOAD CURRENT FUNCTION TABLE ADRS\n         L     R1,COMTRKWL(R1)    PICK UP RKW LIST ADRS\n         LTR   R1,R1              IS RKW ADRS ZERO (NO KEYWORDS REQRD)\n         BZ    LOOPVGO            GET OUT OF LOOP IF SO\n         L     R4,0(R1)           PICK UP FIRST KWT ADRS\n         XR    R2,R2              CLEAR REGS FOR OR\n         XR    R3,R3              CLEAR REGS FOR OR\n         IC    R3,COMFLAG         PICK UP COMMAND FLAG\nLOOPRKW  DS    0H\n         LTR   R4,R4              IS KWT ADRS ZERO\n         BZ    LOOPVGO            END OF KW TESTING IF SO\n         IC    R2,4(R4)           PICK UP REQUIRED FLAG MASK\n         NR    R2,R3              TEST FOR KW SPECIFIED\n         BZ    LOOPRERR           BRANCH IF OMMITTED\n         LA    R1,4(R1)           BUMP TO NEXT RKW ADRS IN LIST\n         L     R4,0(R1)           PICK UP NEXT KWT ADRS\n         B     LOOPRKW            CONTINUE\nLOOPRERR DS    0H\n         L     R2,4(R4)           PICK ERROR ROUTINE ADRS\n         BR    R2                 BRANCH TO ERROR ROUTINE\n         EJECT\n*\n*        FIND A DD IN TIOT THAT MATCHES VOLUME REQUESTED\n*        NOTE: WE MUST EXTRACT TIOT ADDRESS EACH TIME\n*              SINCE IT MIGHT CHANGE DUE TO DYNAMIC ALLOCATION.\n*\n         SPACE 3\nLOOPVGO  DS    0H\n         CLI   VOLUME,BLANK       IS A VOLUME PRESENT\n         BE    NOVOL              SKIP IF NOT\n         EXTRACT TIOTADRS,FIELDS=(TIOT) GET TIOT ADDRESS\n         L     R1,TIOTADRS        PICK UP TIOT ADDRESS\n         USING TIOT1,R1           ADDRESS TIOT\n         XR    R3,R3              CLEAR INDEX REG\nLOOPVOL  DS    0H\n         L     R2,TIOESTTB        PICK UP TIOT ENTRY UCB ADDRESS\n         USING UCBCMSEG,R2        ADDRESS UCB\n         CLC   VOLUME,UCBVOLI     VOLUME MATCH\n         BE    FOUNDV             BRANCH IF SO\n         IC    R3,TIOELNGH        PICK UP ENTRY LENGTH\n         LA    R1,0(R3,R1)        BUMP TO NEXT TIOT ENTRY\n         CLI   TIOELNGH,HEXZERO   END OF TIOT?\n         BE    CKMVS              GO CHECK FOR MVS SYSTEM\n         B     LOOPVOL            CONTINUE SEARCH\n         SPACE 2\nFOUNDV   DS    0H\n         MVC   VOLUNIT,UCBTYP     SAVE UNIT TYPE IN FOR LATER\n         DROP  R2                 DROP ADDRESSABILITY TO UCB\n         LA    R2,XDAPDCB         GET ADDRESS OF VTOC DCB\n         USING IHADCB,R2          ADDRESS XDAP DCB\n         MVC   DCBDDNAM,TIOEDDNM  MOVE IN DDNAME\n         B     GETJFCB            GO GET THE XDAP DCB JFCB\n         DROP  R2                 DROP ADDRESSABILITY TO DCB\n         DROP  R1                 DROP ADDRESSABILITY TO TIOT\n         EJECT\n*\n*        CHECK FOR MVS OPERATING SYSTEM\n*        IF MVS THEN DYNAMICALLY  ALLOCATE VOLUME REQUIRED\n*\n         SPACE 3\nCKMVS    DS    0H\n         TM    MASTFLAG,MVSSYS    IS THIS MVS\n         BO    ALOCDYN            ALLOCATE DYNAMICALLY\n         TM    IOFLAG,TSOSESS     IS THIS A TSO SESSION\n         BO    ALOCDAIR           GO ALLOCATE WITH DAIR IF SO\n         B     ERROR29            CANNOT DYNAMICALLY ALLOCATE\n         SPACE 3\nALOCDYN  DS    0H\n         XC    S99F1,S99F1        CLEAR SVC 99 RB FLAG1\n         XC    S99F2,S99F2        CLEAR SVC 99 RB FLAG2\n         LA    R1,S99RBPTR        LOAD ADDRESS OF RB POINTER\n         DYNALLOC\n         LTR   RF,RF              CHECK SVC 99 RETURN CODES\n         BNZ   DYNERROR           BRANCH IF BAD\n         CLC   S99ERROR,ZERO      CHECK ERROR CODE\n         BNE   DYNERROR           BRANCH IF BAD\n         B     SETDDN\n         EJECT\n*\n*        SET UP SPECIAL MESSAGE FOR DYNAMIC ALLOCATION FAILURE\n*\n         SPACE 3\nDYNERROR DS    0H\n         ST    RF,DYNRETC         STORE RETURN CODE IN HOLDER\n         BAL   R7,FIXDIGIT        GO FIX RC\n         STCM  RF,15,SPMSG3R1     STORE IN MESSAGE\n         LH    RF,S99ERROR        PICK UP ERROR CODE\n         BAL   R7,FIXDIGIT        GO FIX IT\n         STCM  RF,15,SPMSG3R2     STORE IN MESSAGE\n         LH    RF,S99INFO         PICK UP INFORMATION CODE\n         BAL   R7,FIXDIGIT        GO FIX IT\n         STCM  RF,15,SPMSG3R3     STORE IN MESSAGE\n         MVI   DFFLAGS+1,X'32'    FLAG AS SVC99 REQUEST\n         LA    R1,S99RB\n         ST    R1,DFS99RB         STORE SVC 99 RB ADDRS IN DF BLOCK\n         LA    R1,DFS99RB         GET ADDRESS OF DF PARM BLOCK\n         LINK  EP=IKJEFF18\n         LTR   RF,RF              EXTRACT WORK OK\n         BZ    DOS99ER\n         XC    DFBUFL1(2),DFBUFL1 CLEAR BUFFER LENGTH OF DF MSG\n         XC    DFBUFL2(2),DFBUFL2 CLEAR BUFFER LENGTH OF DF MSG\n         B     ERROR12\nDOS99ER  DS    0H\n         MVI   DFBUF01,X'40'      SET DF BUFFERS INTO WTO FORMAT\n         MVI   DFBUF01+1,X'00'\n         MVI   DFBUF02,X'40'\n         MVI   DFBUF02+1,X'00'\n         B     ERROR12\n         EJECT\n*\n*        ALLOCATE THE VOLUME FOR TSO SESSION USING DAIR\n*\n*        NOTE: DAIR IS USED INSTEAD OF SVC 99 TO MAINTAIN\n*              NON-MVS COMPATIBILITY.\n*\n         SPACE 3\nALOCDAIR DS    0H\n         XC    DECB,DECB          CLEAR DAIR ECB\n         L     R2,CPPLHOLD\n         USING CPPL,R2 ADDRESS CPPL\n         LA    R1,DAPLIST\n         USING DAPL,R1\n         MVC   DAPLUPT,CPPLUPT    MOVE IN UPT ADDRESS\n         MVC   DAPLECT,CPPLECT    MOVE IN ECT ADDRESS\n         MVC   DAPLPSCB,CPPLPSCB  MOVE IN PSCB ADDRESS\n         LINK  EP=IKJDAIR         INVOKE DAIR\n         LTR   RF,RF              DAIR WORK\n         BZ    SETDDN             BRANCH SO\n         EJECT\n*\n*        SET UP SPECIAL MESSAGE FOR DAIR ALLOCATION FAILURE\n*\n         SPACE 3\nDAIREROR DS    0H\n         ST    RF,DYNRETC         STORE DAIR RETURN CODE\n         BAL   R7,FIXDIGIT        GO FIX RC\n         STCM  RF,15,SPMSG4R1     STORE IN MESSAGE\n         LH    RF,DA08DARC        PICK UP ERROR CODE\n         BAL   R7,FIXDIGIT        GO FIX IT\n         STCM  RF,15,SPMSG4R2     STORE IN MESSAGE\n         LH    RF,DA08CTRC        PICK UP CATALOG CODE\n         BAL   R7,FIXDIGIT        GO FIX IT\n         STCM  RF,15,SPMSG4R3     STORE IN MESSAGE\n         MVI   DFFLAGS+1,X'01'    FLAG AS SVC99 REQUEST\n         LA    R1,DA08CD          PICK UP DAIR 08 BLOCK\n         ST    R1,DFDAPLP         STORE DAIR RB ADDRS IN DF BLOCK\n         LA    R1,DFDAPLP         GET ADDRESS OF DF PARM BLOCK\n         LINK  EP=IKJEFF18\n         LTR   RF,RF              EXTRACT WORK OK\n         BZ    DODAIRER\n         XC    DFBUFL1(2),DFBUFL1 CLEAR BUFFER LENGTH OF DF MSG\n         XC    DFBUFL2(2),DFBUFL2 CLEAR BUFFER LENGTH OF DF MSG\n         B     ERROR39\nDODAIRER DS    0H\n         MVI   DFBUF01,X'40'      SET DF BUFFERS INTO WTO FORMAT\n         MVI   DFBUF01+1,X'00'\n         MVI   DFBUF02,X'40'\n         MVI   DFBUF02+1,X'00'\n         B     ERROR39\n         DROP  R2\n         DROP  R1\n         EJECT\n*\n*        SET UP THE DDNAME IN THE DCB\n*\n         SPACE 3\nSETDDN   DS    0H\n         LA    R2,XDAPDCB         GET ADDRESS OF DCB\n         USING IHADCB,R2          ADDRESS IT\n         MVC   DCBDDNAM,BLANKS    BLANK OUT DDNAME\n         MVC   DCBDDNAM(6),VOLUME MAKE VOLSER DDNAME ALSO\n         DROP  R2                 DROP DCB ADDRESSABILITY\n         CLC   COMMAND,SCRTCH     IS THIS A SCRATCH COMMAND\n         BE    LOOPVGO            IF SO, GO BACK THROUGH TIOT VOLUME\n*                                 SEARCH TO PICK UP UCB DEVICE TYPE\n         EJECT\n*\n*        GET THE JFCB FOR THE DD FOUND AND OPEN THE VTOC\n*\n         SPACE 3\nGETJFCB  DS    0H\n         RDJFCB (XDAPDCB,(UPDAT)) GET THE JFCB\n         LTR   RF,RF              DID WE REALLY GET IT ??\n         BNZ   ERROR1\n         LA    R1,JFCBAREA        GET ADDRESS OF INTERNAL JFCB\n         USING JFCBDSCT,R1        ADDRESS JFCB\n         MVI   JFCBDSNM,HEXFOUR   FIX UP THE DSNAME\n         MVC   JFCBDSNM+1(43),JFCBDSNM          OF THE VTOC\n         OI    JFCBTSDM,JFCNWRIT  DO NOT MERGE BACK\n         OI    JFCBOPS1+4,JFCBMOD FLAG JFCB AS MODIFIED\n         DROP  R1                 DROP JFCB ADDRESSABILITY\n         OPEN  (XDAPDCB,(UPDAT)),TYPE=J  OPEN THE VTOC\n         LA    R1,XDAPDCB         PICK UP DCB ADDRESS\n         USING IHADCB,R1          ADDRESS DCB\n         TM    DCBOFLGS,DCBOFOPN  DID OPEN WORK\n         BNO   ERROR31            BRANCH IF NOT\n         DROP  R1\n         EJECT\n*\n*        FIND THE CCHHR OF THE DATASETS DSCB IN THE VTOC VIA OBTAIN\n*\n         SPACE 3\nNOVOL    DS    0H\n         CLI   DSCBNAME,BLANK     IS A VOLUME PRESENT\n         BE    NODSN              SKIP IF NOT\n         OBTAIN DSCBADDR          GET CCHHR OF DSCB\n         LTR   RF,RF              DID WE GET IT ???\n         BNZ   ERROR2\n         EJECT\n*\n*        READ THE DSCB FOR DATASET FROM VTOC VIA XDAP READ\n*\n         SPACE 3\n         MVC   XDAPBLRF+3(5),WORKAREA+96  LOAD CCHHR FOR XDAP I/O\n         PRINT NOGEN\n         XDAP  XDAPRECB,RI,XDAPDCB,WORKAREA,140,(WORKAREA,44),XDAPBLRF\n         PRINT GEN\n         WAIT  ECB=XDAPRECB       ISSUE THE WAIT FOR XDAP I/O\n         CLI   XDAPRECB,XDAPGOOD  WAS THE READ SUCCESSFUL ???\n         BNE   ERROR3\n         LA    R9,WORKAREA        GET ADDRESS OF DSCB WORKAREA\n         USING DSCB,R9            ADDRESS DSCB\n         EJECT\n*\n*        FIND THE ADDRESS OF THE ROUTINE TO PROCESS THE COMMAND\n*        IN THE COMMAND TABLE.\n*\n         SPACE 3\nNODSN    DS    0H\n         L     R2,CURRENTF        RELOAD FUNCTION TABLE ADDRESS\n         L     R2,COMTADR(R2)     GET ADDRESS OF COMMAND ROUTINE\n         BR    R2\n         EJECT\n*\n*        RENEW THE CREATION DATE TO TODAYS DATE\n*\n         SPACE 3\nRENEW    DS    0H\n         TIME  DEC                GET THE TIME AND DATE\n         MVC   THYMEOYR,PACK8ZRO  ZERO OUT THE YEAR\n         MVC   DAYTHYME,PACK8ZRO  ZERO OUT THE DAY\n         STH   R1,DAYTHYME+6      CONVERT TO USABLE FORMAT\n         SRL   R1,8\n         IC    R1,MASKC0\n         SRL   R1,R4\n         STH   R1,THYMEOYR+6\n         CVB   R1,DAYTHYME\n         ST    R1,DAYTHYME+4\n         CVB   R1,THYMEOYR\n         ST    R1,THYMEOYR+4\n         MVC   DS1CREDT(1),THYMEOYR+7    MOVE IN YEAR\n         MVC   DS1CREDT+1(2),DAYTHYME+6  MOVE IN DAY OF YEAR\n         B     WRITDSCB\n         EJECT\n*\n*        SWAP THE CREATION AND EXPIRATION DATE FIELDS\n*\n         SPACE 1\nEXPIRE   XC    DS1CREDT,DS1EXPDT  INVERT\n         XC    DS1EXPDT,DS1CREDT         TWO\n         XC    DS1CREDT,DS1EXPDT              FIELDS\n         B     WRITDSCB\n         SPACE 3\n*\n*        SET THE EXPIRATION DATE TO 00:000\n*\n         SPACE 1\nZEROEXPD DS    0H\n         MVC   DS1EXPDT,ZERODATE\n         B     WRITDSCB\n         SPACE 3\n*\n*        SET THE EXPIRATION DATE TO 99:365\n*\n         SPACE 1\nEXTEND   DS    0H\n         MVC   DS1EXPDT,MAXDATE\n         B     WRITDSCB\n         EJECT\n*\n*        SET THE PASSWORD PROTECTION BITS FOR FULL PROTECTION\n*\n         SPACE 1\nPROTECT  OI    DS1DSIND,DS1IND10\n         NI    DS1DSIND,FULLMASK-DS1IND04\n         B     WRITDSCB\n         SPACE 3\n*\n*        SET THE PASSWORD PROTECTION BITS FOR READ ONLY ACCESS ALLOWED\n*\n         SPACE 1\nSETNOPWR OI    DS1DSIND,DS1IND10\n         OI    DS1DSIND,DS1IND04\n         B     WRITDSCB\n         SPACE 3\n*\n*        SET THE PASSWORD PROTECTION BIT OFF\n*\n         SPACE 1\nUNLOCK   NI    DS1DSIND,FULLMASK-DS1IND10\n         NI    DS1DSIND,FULLMASK-DS1IND04\n         B     WRITDSCB\n         EJECT\n*\n*        CHANGE THE DSNAME TO A NEW NAME\n*\n         SPACE 1\nRENAME   DS    0H\n         MVC   DS1DSNAM,NEWNAME\n         B     WRITDSCB\n         EJECT\n*\n*        PERFORM SCRATCH REQUEST\n*\n*        LOGIC: DATASET IS RENAMED TO 'FIXDSCB.SCRATCH.DATASET',\n*               ANY PASSWORD PROTECTION BITS ARE TURNED OFF,\n*               AND THE EXPIRATION DATE IS RESET TO ZERO.\n*               THE MODIFIED DATASET IS THEN DELETED VIA\n*               A SCRATCH SVC.\n*\n         SPACE 1\nSCRATCH  DS    0H\n         MVC   DS1DSNAM,TEMPNAME  MOVE TEMPNAME TO DSCB\n         NI    DS1DSIND,FULLMASK-DS1IND10 TURN OFF ANY\n         NI    DS1DSIND,FULLMASK-DS1IND04        PASSWORD BITS\n         MVC   DS1EXPDT,ZERODATE  SET EXPDT TO ZERO\n         TM    MASTFLAG,TESTONLY  IS THIS A TEST\n         BO    MESSAG28           SKIP IF SO\n         SCRATCH SCRLIST          SCRATCH ANY REMAINING TEMP DATASET\n         PRINT NOGEN\n         XDAP  XDAPWSCR,WI,XDAPDCB,WORKAREA,140,(WORKAREA,44),XDAPBLRF\n         PRINT GEN\n         SPACE 3\n*\n*        WAIT FOR RENAME TO COMPLETE AND THEN SCRATCH THE\n*        RENAMED DATASET.\n*\n         SPACE 1\n         WAIT  ECB=XDAPWSCR       ISSUE WAIT FOR XDAP I/O\n         CLI   XDAPWSCR,XDAPGOOD  WAS IT SUCCESSFUL ??\n         BNE   ERROR35            IF NOT GET OUT.\n         CLOSE XDAPDCB            CLOSE VTOC\n         XR    R0,R0              ZERO REG 0 FOR SCRATCH (NO UCB)\n         SCRATCH SCRLIST          ISSUE SCRATCH REQUEST\n         LTR   RF,RF              SCRATCH WORK OK\n         BZ    FUNCMSG            BRANCH IF SO\n         SPACE 1\n* IF SCRATCH FAILED PRINT A MESSAGE AND ABEND\n         ST    RF,FUNCRC          SAVE AS FUNCTION RETURN CODE\n         CVD   RF,DOUBLE\n         UNPK  SPMSG2R1,DOUBLE\n         OI    SPMSG2R1+3,SIGN    MAKE SIGN PRINTABLE\n         LH    RF,VOLSTAT         PICK UP REASON CODE\n         CVD   RF,DOUBLE\n         UNPK  SPMSG2R2,DOUBLE\n         OI    SPMSG2R2+3,SIGN    MAKE SIGN PRINTABLE\n         B     MSGSP2             GO PRINT SPECIAL MESSAGE\n         EJECT\n*\n*        PROCESS NAME SUBCOMMANDS\n*\n         SPACE 3\nNAME     DS    0H\n         OI    MASTFLAG,GETSUBC   FLAG GET AS SUBCOMMAND REQUEST\n         BAL   R8,GETACARD        GO GET A SUBCOMMAND CARD\n         NI    MASTFLAG,FULLMASK-GETSUBC TURN OFF SUBC REQUEST FLAG\n         BAL   R7,SKIPB           SKIP LEADING BLANKS ON SUBCOMMAND\n         LTR   R5,R5              ALL BLANKS (IMPOSSIBLE)\n         BZ    NAME               SKIP IF SO\n         LA    R2,SUBTABLE        GET ADDRESS OF SUBCOMMAND TABLE\nSUBTCK   DS    0H\n         CLI   0(R2),BLANK        END OF TABLE?\n         BE    SUBTPRIM           BRANCH IF SO\n         L     R3,SUBTSCL(R2)     LOAD LENGTH OF SUBCOMMAND\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,SUBCTEST        TEST FOR SUBCOMMAND\n         BNE   SUBTNO\n* PRINT VALID SUBCOMMAND CARD\n         MVI   MSGCC,LINES1       SET CARRIAGE CONTROL\n         BAL   R7,PUTCARD\n         L     R2,SUBTADR(R2)     LOAD ADDRESS OF ROUTINE\n         BR    R2\nSUBTNO   DS    0H\n         LA    R2,SUBTLEN(R2)     BUMP TO NEXT ENTRY\n         B     SUBTCK\n         EJECT\n*\n*        CHECK IF UNKNOWN SUBCOMMAND IS REALLY A PRIMARY COMMAND\n*\n         SPACE 1\nSUBTPRIM DS    0H\n         OI    MASTFLAG,PARTSCAN  SET FOR COMMAND SCAN ONLY\n         BAL   R6,COMCARD\n         NI    MASTFLAG,FULLMASK-PARTSCAN TURN OFF PARTSCAN FLAG\n         TM    MASTFLAG,COMBADF WAS COMMAND INVALID\n         BO    ERROR9\n         LA    R2,COMTABLE        GET ADDRESS OF COMMAND TABLE\nSUBTPRM2 DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    SUBTBAD            MUST BE BAD SUBCOMMAND\n         CLC   COMMAND2,0(R2)     IS THIS A PRIMARY COMMAND\n         BE    SUBTPRMF           YES, GET OUT OF LOOP\n         LA    R2,COMTLEN(R2)     BUMP TO NEXT EXTRY\n         B     SUBTPRM2\nSUBTPRMF DS    0H\n         OI    MASTFLAG,PRIMEND   FLAG NAME ENDED BY PRIMARY COMMAND\n         B     WRITDSCB\nSUBTBAD  DS    0H\n*        PRINT INVALID SUBCOMMAND CARD\n         MVI   MSGCC,LINES1       SET CARRIAGE CONTROL\n         BAL   R7,PUTCARD\n         B     ERROR9\n         EJECT\n*\n*        RESET THE LRECL TO THE SPECIFIED VALUE\n*\n         SPACE 1\nLRECL    DS    0H\n         LA    R5,5(R5)           SKIP PAST LRECL KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF LRECL\nLRECLL1  DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    LRECLEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     LRECLL1            CONTINUE\n         SPACE 1\nLRECLEND DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,LRECLPCK        PACK THE LRECL VALUE\n         CVB   R3,DOUBLE          CONVERT LRECL TO BINARY\n         C     R3,BIGLRECL        IS LRECL TOO BIG\n         BH    ERROR10            BRANCH IF SO\n         STH   R3,DS1LRECL        STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*\n*        RESET THE BLKSIZE TO THE SPECIFIED VALUE\n*\n         SPACE 1\nBLKSIZE  DS    0H\n         LA    R5,7(R5)           SKIP PAST BLKSIZE KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF BLKSIZE\nBLKSZL1  DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    BLKSZEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     BLKSZL1            CONTINUE\n         SPACE 1\nBLKSZEND DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,BLKSZPCK        PACK THE BLKSIZE VALUE\n         CVB   R3,DOUBLE          CONVERT BLKSIZE TO BINARY\n         C     R3,BIGLRECL        IS BLKSIZE TOO BIG\n         BH    ERROR11            BRANCH IF SO\n         STH   R3,DS1BLKL         STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*\n*        RESET THE RECORD FORMAT TO THAT SPECIFIED\n*\n         SPACE 1\nRECFM    DS    0H\n         LA    R5,5(R5)           SKIP PAST RECFM KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RECMF\n         MVC   RECFMH(5),0(R5)    MOVE RECFM TO HOLDER\n         LA    R2,RECFMTAB        GET ADDRESS OF RECFM TABLE\nRECFMLP  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR21            ERROR IF SO\n         CLC   RECFMH,0(R2)       RECFM MATCH TABLE ENTRY\n         BE    RECFMFND           BRANCH IF SO\n         LA    R2,RECFMLEN(R2)    BUMP TO NEXT ENTRY\n         B     RECFMLP\nRECFMFND DS    0H\n         MVC   DS1RECFM,RECFMASK(R2) MOVE MASK BYTE TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*\n*        RESET THE OPTCODE TO THAT SPECIFIED\n*\n         SPACE 1\nOPTCODE  DS    0H\n         LA    R5,7(R5)           SKIP PAST OPTCODE KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF OPTCODE\n         MVC   OPTCODEH(1),0(R5)  MOVE OPTCODE TO HOLDER\n         LA    R2,OPTCODET        GET ADDRESS OF OPTCODE TABLE\nOPTCODEL DS   0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR34            ERROR IF SO\n         CLC   OPTCODEH,0(R2)     OPTCODE MATCH TABLE ENTRY\n         BE    OPTCODEF           BRANCH IF SO\n         LA    R2,OPTCLEN(R2)     BUMP TO NEXT ENTRY\n         B     OPTCODEL\nOPTCODEF DS  0H\n         MVC   DS1OPTCD,OPTCMASK(R2) MOVE MASK BYTE TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*\n*        RESET THE DSORG TO THAT SPECIFIED\n*\n         SPACE 1\nDSORG    DS    0H\n         LA    R5,5(R5)           SKIP PAST DSORG KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RECMF\n         MVC   DSORGH(5),0(R5)    MOVE DSORG TO HOLDER\n         LA    R2,DSORGTAB        GET ADDRESS OF DSORG TABLE\nDSORGLP  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    ERROR22            ERROR IF SO\n         CLC   DSORGH,0(R2)       DSORG MATCH TABLE ENTRY\n         BE    DSORGFND           BRANCH IF SO\n         LA    R2,DSORGLEN(R2)    BUMP TO NEXT ENTRY\n         B     DSORGLP\nDSORGFND DS    0H\n         MVC   DS1DSORG(1),3(R2)  MOVE DSORG MASK TO DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*\n*        RESET THE KEYL TO THE SPECIFIED VALUE\n*\n         SPACE 1\nKEYL     DS    0H\n         LA    R5,4(R5)           SKIP PAST KEYL KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF KEYL\nKEYLL1   DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    KEYLEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     KEYLL1             CONTINUE\n         SPACE 1\nKEYLEND  DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,KEYLPCK         PACK THE KEYL VALUE\n         CVB   R3,DOUBLE          CONVERT KEYL TO BINARY\n         C     R3,BIGKEYL         IS KEYL TOO BIG\n         BH    ERROR23            BRANCH IF SO\n         STC   R3,DS1KEYL         STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*\n*        RESET THE RELATIVE KEY POSITION TO THE SPECIFIED VALUE\n*\n         SPACE 1\nRKP      DS    0H\n         LA    R5,3(R5)           SKIP PAST RKP KEYWORD\n         CLI   0(R5),EQUAL        IS IT AN = SIGN\n         BNE   ERROR9             SKIP IF NOT\n         LA    R5,1(R5)           SKIP THE =\n         LR    R3,R5              SAVE START OF RKP\nRKPL1    DS    0H\n         CLI   0(R3),BLANK        END OF NUMBER\n         BE    RKPEND\n         LA    R3,1(R3)           BUMP TO NEXT COL\n         B     RKPL1              CONTINUE\n         SPACE 1\nRKPEND   DS    0H\n         SR    R3,R5              CALCULATE LENGTH\n         C     R3,ONE             IS IT ZERO\n         BL    NAME               SKIP CARD IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,RKPPCK          PACK THE RKP VALUE\n         CVB   R3,DOUBLE          CONVERT RKP TO BINARY\n         C     R3,BIGRKP          IS RKP TOO BIG\n         BH    ERROR24            BRANCH IF SO\n         STCM  R3,3,DS1RKP        STORE IN DSCB\n         OI    COMFLAG,REWRITE    FLAG DSCB TO BE REWRITTEN\n         B     NAME               GO BACK FOR ANOTHER CARD\n         EJECT\n*\n*        END THE NAME SUBCOMMAND SET\n*\n         SPACE 3\nENDNAME  DS    0H\n         SPACE 5\n*\n*        WRITE THE DSCB BACK OUT\n*\n         SPACE 3\nWRITDSCB DS    0H\n         CLC   COMMAND,COMNAME    NAME SUBCOMMAND SET?\n         BNE   WRITEIT            BRANCH IF NOT\n         TM    COMFLAG,REWRITE    WAS DSCB MODIFIED\n         BNO   ERROR30            DO NOT WRITE IT IF NOT\nWRITEIT  DS    0H\n         TM    MASTFLAG,TESTONLY  IS THIS A TEST\n         BO    MESSAG28           SKIP IF SO\n         PRINT NOGEN\n         XDAP  XDAPWECB,WI,XDAPDCB,WORKAREA,140,(WORKAREA,44),XDAPBLRF\n         PRINT GEN\n         EJECT\n*\n*        WAIT FOR DSCB WRITE TO COMPLETE AND THEN CLOSE VTOC,\n*        PRINT MESSAGE, AND RETURN FOR A NEW COMMAND.\n*\n         SPACE 3\n         WAIT  ECB=XDAPWECB       ISSUE WAIT FOR XDAP I/O\n         CLI   XDAPWECB,XDAPGOOD  WAS IT SUCCESSFUL ??\n         BNE   ERROR4             IF NOT GET OUT.\n         SPACE 1\nCLOSEX   DS    0H\n         CLOSE XDAPDCB\n         EJECT\n*\n*        ISSUE THE FUNCTION COMPLETED MESSAGE\n*\n         SPACE 3\nFUNCMSG  DS    0H\n         CLC   FUNCRC,ZERO        WAS COMMAND SUCCESSFUL\n         BE    MESSAG32           PRINT MESSAGE IF SO\nFUNCMSG2 DS    0H\n         L     R1,FUNCRC\n         CVD   R1,DOUBLE\n         UNPK  SPMSG0R,DOUBLE\n         OI    SPMSG0R+3,SIGN     MAKE SIGN PRINTABLE\n         B     MSGSP0\nFUNCMEND DS    0H\n         NI    MASTFLAG,FULLMASK-COMBADF TURN OFF ANY BAD COMMAND FLAG\n         TM    MASTFLAG,GETSUBC   DID EODAD OCCUR DURING SUBC PRCS\n         BO    CLOSE2             GET OUT IF SO\n         TM    MASTFLAG,PRIMEND   WAS A PRIMARY COMMAND FOUND\n         BNO   LOOP1              BRANCH IF NOT\n         NI    MASTFLAG,FULLMASK-PRIMEND TURN OFF FLAG\n         B     LOOP2              GO PROCESS ENCOUNTERED COMMAND\n         EJECT\n*\n*        CLOSE THE FILES AND TERMINATE\n*\n         SPACE 3\nEND      DS    0H\nCLOSE    DS    0H\n         TM    MASTFLAG,GETSUBC   WAS GET FOR A SUBCOMMAND\n         BO    WRITDSCB           GO FINISH NAME COMMAND IF SO\n         TM    MASTFLAG,CARD2TRY  WAS GET FOR A CONTINUATION CARD\n         BO    ERROR25            BRANCH IF SO\nCLOSE2   DS    0H\n         L     R1,HIGHRC\n         C     R1,FUNCRC\n         BH    GOTRC\n         L     R1,FUNCRC\nGOTRC    DS    0H\n         CVD   R1,DOUBLE\n         UNPK  SPMSG1R,DOUBLE\n         OI    SPMSG1R+3,SIGN     MAKE SIGN PRINTABLE\n         B     MSGSP1             GO PRINT SPECIAL MESSAGE\nCLOSEND  DS    0H\n         TM    IOFLAG,CONSOLE     CONSOLE I/O USED\n         BO    RETURN\n         TM    IOFLAG,TSOSESS     TSO I/O USED\n         BO    RETURN\n         CLOSE SYSIN\n         CLOSE SYSPRINT\nRETURN   DS    0H\n         L     RF,HIGHRC          GET RETURN CODE\n         L     13,SAVEAREA+4      POINT TO CALLERS SAVEAREA\n         RETURN (14,12),T,RC=(15) STANDARD RETURN\n         EJECT\n*\n*        PARSE A COMMAND CARD FOR KEYWORDS\n*\n         SPACE 3\nCOMCARD  DS    0H\n         MVC   COMMAND,BLANKS     BLANK OUT COMMAND NAME HOLDER\n         MVC   COMMAND2,BLANKS    BLANK OUT COMMAND NAME HOLDER\n         LR    R3,R5              GET START OF CARD\n         LA    R4,9               SET MAX COMMAND NAME LENGTH\nCOMCLOOP DS    0H\n         CLI   0(R3),BLANK        BLANK?\n         BE    COMCEND            YES, END OF COMMAND NAME\n         CLI   0(R3),EQUAL        INVALID =?\n         BE    COMBAD             YES, FLAG AS BAD\n         LA    R3,1(R3)           BUMP TO NEXT CARD COLUMN\n         BCT   R4,COMCLOOP\n         B     COMBAD             GO FLAG AS BAD\nCOMCEND  DS    0H\n         LA    R4,1(R3)           SAVE ADDRESS OF NEXT BYTE\n         SR    R3,R5              SUBTRACT TO GEN COMMAND LENGTH\n         ST    R3,COMLEN          SAVE LENGTH OF COMMAND\n         BCTR  R3,0               DROP FOR EXECUTE\n         TM    MASTFLAG,PARTSCAN  COMMAND SCAN ONLY?\n         BO    COMMOVE2\n         EX    R3,COMMOVE         MOVE IN COMMAND NAME\n         B     COMPRECK\n         SPACE 1\nCOMMOVE2 DS    0H\n         EX    R3,COM2MOVE        MOVE IN COMMAND NAME\n         BR    R6\n         SPACE 1\nCOMBAD   DS    0H\n         OI    MASTFLAG,COMBADF SET BAD COMMAND FLAG\n         BR    R6\n         EJECT\n*\n*        CHECK THE COMMAND VERB FOR ONE THAT WE RECOGNIZE.\n*\n         SPACE 3\nCOMPRECK DS    0H                 SEARCH FOR A KEYWORD AFTER COMMAND\n         LA    R2,COMTABLE        GET ADDRESS OF COMMAND TABLE\nCOMPREF  DS    0H\n         CLI   0(R2),BLANK        END OF TABLE\n         BE    COMBAD             ERROR IF SO\n         CLC   COMMAND,0(R2)      IS THIS THE COMMAND\n         BE    COMKEYSR           YES, GET OUT OF LOOP\n         LA    R2,COMTLEN(R2)     BUMP TO NEXT EXTRY\n         B     COMPREF\n         EJECT\n*\n*        SEARCH THE CARD FOR KEYWORDS\n*\n         SPACE 3\nCOMKEYSR DS    0H\n         ST    R2,CURRENTF        SAVE TABLE ENTRY ADDRESS\n         LA    R1,71              LOAD TOTAL CARD LENGTH - 1\n         S     R1,COMLEN          SUBTRACT OFF COMMAND LENGTH\nCOMKEYSX DS    0H                 SEARCH FOR A KEYWORD AFTER COMMAND\n*                                 ONLY KEYWORDS ALLOWED ARE:\n*                                   DSNAME=, DSN=, D=\n*                                   VOLUME=, VOL=, V=\n*                                   NEWNAME=, NEWN=, NN=, N=\n*\n         SPACE 1\n         LR    R5,R4              SAVE ADDRESS OF POSSIBLE KEYW START\n         CLI   0(R4),BLANK        BLANK?\n         BNE   COMCKWT            NO\n         LA    R4,1(R4)           BUMP TO NEXT COL\n         BCT   R1,COMKEYSX\n         SPACE 1\n*        THE REST OF THE CARD WAS BLANK.  IS THIS AN ERROR?\n         L     R2,COMTRKWL(R2)    PICK UP KWT LIST ADDRESS\n         LTR   R2,R2              IS IT ZERO (NO KEYWORDS REQUIRED)\n         BZR   R6                 RETURN IF SO\n         B     ERROR38            ERROR IF NOT\n         EJECT\n*\n*        TEST IF ANY OF THE REQUIRED KEYWORDS MATCHE THE KEYWORD FOUND\n*\n         SPACE 3\nCOMCKWT  DS    0H\n         L     R2,COMTRKWL(R2)    PICK UP REQUIRED KEYWORD LIST ADRS\n         LTR   R2,R2              ANY KEYWORDS REQUIRED\n         BZ    COMCOPTS           CHECK FOR OPTIONAL KEYWORDS\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         STM   R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\nCOMCKEY  DS    0H\n         LM    R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\nCOMCKEY2 DS    0H\n         LTR   R3,R3              IS NEXT KWT ADDRESS ZERO\n         BZ    COMCOPTS           GO LOOK FOR OPTIONAL KEYWORDS\n         L     RE,0(R3)           PICK UP RTN ADDRESS\n         LA    R3,8(R3)           BUMP TO LIST PROPER\n         XR    R1,R1              CLEAR REG 1 FOR LENGTH\nCOMCKEYL DS    0H\n         IC    R1,0(R3)           PICK UP LENGTH\n         LTR   R1,R1              END OF KWT\n         BNZ   COMCKEYM           BRANCH IF NOT\n         LA    R2,4(R2)           BUMP TO NEXT KWT SLOT\n         L     R3,0(R2)           PICK UP NEXT KWT ADDRESS\n         B     COMCKEY2           PROCESS NEXT KWT\nCOMCKEYM DS    0H\n         BCTR  R1,0               DROP FOR EXECUTE\n         EX    R1,KEYWTEST        COMPARE FOR KEYWORD MATCH\n         BNE   COMCNOM            BRANCH TO ROUTINE IF MATCH\n         L     R2,CURRENTF        RELOAD CURRENT FUNCTION TABLE ADRS\n         L     R2,COMTRKWL(R2)    RESER RKW LIST TO START\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         BR    RE                 BRANCH TO ROUTINE\nCOMCNOM  DS    0H\n         LA    R3,2(R1,R3)        BUMP TO NEXT ENTRY IN KWT\n         B     COMCKEYL\n         EJECT\n*\n*        SINCE THE KEYWORD DOES NOT MATCH A REQUIRED KEYWORD\n*        SEE IF IT MAY BE AN OPTIONAL KEYWORD.\n*\n*        NOTE: NO OPTIONAL KEYWORDS ARE DEFINED IN THIS RELEASE.\n*              THIS FACILITY WAS BUILT IN FOR FUTURE COMPATIBILITY\n*              TO ANY NEW FUNCTIONS.\n*\n         SPACE 3\nCOMCOPTS DS    0H\n         L     R2,CURRENTF        PICK UP CURRENT TABLE ENTRY ADRS\n         L     R2,COMTOKWL(R2)    PICK UP OPTIONAL KEYWORD LIST ADRS\n         LTR   R2,R2              IS IT ZERO (NO OPTIONAL KEYWORDS)\n         BZ    ERROR20            ERROR IF SO\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\nCOMOKEY  DS    0H\nCOMOKEY2 DS    0H\n         LTR   R3,R3              IS NEXT KWT ADDRESS ZERO\n         BZ    ERROR20            BAD KEYWORD IF SO\n         L     RE,0(R3)           PICK UP RTN ADDRESS\n         LA    R3,8(R3)           BUMP TO LIST PROPER\n         XR    R1,R1              CLEAR REG 1 FOR LENGTH\nCOMOKEYL DS    0H\n         IC    R1,0(R3)           PICK UP LENGTH\n         LTR   R1,R1              END OF KWT\n         BNZ   COMOKEYM           BRANCH IF NOT\n         LA    R2,4(R2)           BUMP TO NEXT KWT SLOT\n         L     R3,0(R2)           PICK UP NEXT KWT ADDRESS\n         B     COMOKEY2           PROCESS NEXT KWT\nCOMOKEYM DS    0H\n         BCTR  R1,0               DROP FOR EXECUTE\n         EX    R1,KEYWTEST        COMPARE FOR KEYWORD MATCH\n         BNE   COMONOM            BRANCH TO ROUTINE IF MATCH\n         L     R2,CURRENTF        RELOAD CURRENT FUNCTION TABLE ADRS\n         L     R2,COMTOKWL(R2)    RESER OKW LIST TO START\n         L     R3,0(R2)           PICK UP FIRST KWT ADDRS\n         STM   R2,R3,SAVEREGS     SAVE REGS FOR NEXT PASS\n         BR    RE                 BRANCH TO ROUTINE\nCOMONOM  DS    0H\n         LA    R3,2(R1,R3)        BUMP TO NEXT ENTRY IN KWT\n         B     COMOKEYL\n         EJECT\n*\n*        PROCESS THE DSNAME KEYWORD\n*\n         SPACE 3\nCOMDSN   DS    0H\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,DSNKEY     HAS DSN ALLREADY BEEN SPECIFIED\n         BO    ERROR13            BRANCH IF SO\n         OI    COMFLAG,DSNKEY     FLAG DSN AS SPECIFIED\n         LR    R3,R5              LOAD START OF DSNAME\n         MVI   DSCBNAME,BLANK     BLANK OUT DSNAME HOLDER\n         MVC   DSCBNAME+1(43),DSCBNAME\nCOMDSNBL DS    0H\n         CLI   0(R3),BLANK        END OF DSNAME\n         BE    COMDSNE            YES\n         CLI   0(R3),COMMA        END OF DSNAME\n         BE    COMDSNE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMDSNBL\nCOMDSNE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE DSN LENGTH\n         C     R3,FOURFOUR        LONGER THAN 44?\n         BH    ERROR14            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR14            BRANCH IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,DSNMOVE         MOVE IN DSNAME\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n         BNE   COMCKEY            BRANCH IF NOT\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R8,GETACARD        GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         EJECT\n*\n*        PROCESS THE VOLUME KEYWORD\n*\n         SPACE 3\nCOMVOL   DS    0H                 PROCESS VOL KEYWORD\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,VOLKEY     HAS VOL ALLREADY BEEN SPECIFIED\n         BO    ERROR15            BRANCH IF SO\n         OI    COMFLAG,VOLKEY     FLAG VOL AS SPECIFIED\n         LR    R3,R5              LOAD START OF VOLSER\n         MVC   VOLUME,BLANKS      BLANK OUT VOLSER HOLDER\nCOMVOLBL DS    0H\n         CLI   0(R3),BLANK        END OF VOLUME\n         BE    COMVOLE            YES\n         CLI   0(R3),COMMA        END OF VOLUME\n         BE    COMVOLE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMVOLBL\nCOMVOLE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE VOL LENGTH\n         C     R3,SIX             LONGER THAN 6?\n         BH    ERROR16            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR16            BRANCH IF SO\n         STH   R3,S99DDLEN        SAVE LENGTH IN DDNAME TEXT UNIT\n         STH   R3,S99VLEN         SAVE LENGTH IN VOLSER TEXT UNIT\n         LA    R1,2(R3)           BUMP BY 2 FOR DSN LENGTH\n         STH   R1,S99DSLEN        STORE IN DSN TEXT UNIT LENGTH\n         STH   R1,DAIRDSNB        STORE IN DAIR DSN BUFFER LENGTH\n         MVC   DA08DDN,BLANKS     BLANK OUT DDNAME IN DAPB\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,VOLMOVE         MOVE IN VOLUME\n         EX    R3,VOLMOVE2        MOVE IN VOLUME (TO DDNAME TEXT UNIT)\n         EX    R3,VOLMOVE3        MOVE IN VOLUME (TO VOLSER TEXT UNIT)\n         EX    R3,VOLMOVE4        MOVE IN VOLUME (TO DSNAME TEXT UNIT)\n         EX    R3,VOLMOVE5        MOVE IN VOLUME (TO DAIR BLOCK AS SER)\n         EX    R3,VOLMOVE6        MOVE IN VOLUME (TO DAIR BLOCK AS DSN)\n         EX    R3,VOLMOVE7        MOVE IN VOLUME (TO DAIR BLOCK AS DDN)\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n*                                 (IF BLANK AFTER COMMA THEN MUST BE\n*                                  CONTINUED ON NEXT CARD.)\n         BNE   COMCKEY\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R8,GETACARD        GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         EJECT\n*\n*        PROCESS THE NEWNAME KEYWORD (VALID FOR RENAME COMMAND ONLY)\n*\n         SPACE 3\nCOMNEWN  DS    0H                 PROCESS NEW KEYWORD\n         LA    R5,1(R1,R5)        BUMP PAST KEYWORD\n         TM    COMFLAG,NEWNKEY    HAS NEW ALLREADY BEEN SPECIFIED\n         BO    ERROR17            BRANCH IF SO\n         OI    COMFLAG,NEWNKEY    FLAG NEW AS SPECIFIED\n         LR    R3,R5              LOAD START OF NEWNAME\n         MVI   NEWNAME,BLANK      BLANK OUT NEWNAME HOLDER\n         MVC   NEWNAME+1(43),NEWNAME\nCOMNEWBL DS    0H\n         CLI   0(R3),BLANK        END OF NEWNAME\n         BE    COMNEWE            YES\n         CLI   0(R3),COMMA        END OF NEWNAME\n         BE    COMNEWE            YES\n         LA    R3,1(R3)           CONTINUE\n         B     COMNEWBL\nCOMNEWE  DS    0H\n         LR    R2,R3              SAVE POINTER\n         SR    R3,R5              COMPUTE NEW LENGTH\n         C     R3,FOURFOUR        LONGER THAN 44?\n         BH    ERROR19            BRANCH IF SO\n         C     R3,ONE             LESS THAN ONE\n         BL    ERROR19            BRANCH IF SO\n         BCTR  R3,0               DROP FOR EXECUTE\n         EX    R3,NEWNMOVE        MOVE IN NEWNAME\n         LR    R5,R2              RESTORE TO NEXT POSSIBLE POSITION\n         CLI   0(R5),BLANK        END OF STRING\n         BER   R6                 RETURN IF SO\n         LA    R5,1(R5)           BUMP TO NEXT CHAR\n         CLI   0(R5),BLANK        NEW CARD REQUIRED?\n         BNE   COMCKEY            BRANCH IF NOT\n         OI    IOFLAG,CONTINUE    MARK AS CONTINUE\n         BAL   R8,GETACARD        GO GET ONE IF SO\n         NI    IOFLAG,FULLMASK-CONTINUE TURN OFF CONT FLAG\n         B     COMCKEY            GO LOOK FOR ANOTHER KEYWORD\n         EJECT\n*\n*        GET A NEW CARD (REQUIRED CONTINUATION CARD)\n*\n         SPACE 3\nGETACARD DS    0H\n         OI    MASTFLAG,CARD2TRY  FLAG AS CARD2 TRY FOR EODAD\n         BAL   R5,CARDIN          GET ANOTHER CARD\n         NI    MASTFLAG,FULLMASK-CARD2TRY TURN OFF CARD2 FLAG\n         BAL   R7,SKIPB           CHECK FOR ALL BLANKS\n         LTR   R5,R5              ALL BLANKS?\n         BNZ   GETCKAS            SKIP IF NOT\n         BAL   R7,PUTCARD         PRINT BLANK CARD\n         B     GETACARD           GET ANOTHER CARD\nGETCKAS  DS    0H\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    GETPRINT           PRINT IF SO\n         TM    MASTFLAG,GETSUBC   LOOKING FOR A SUBCOMMAND\n         BNO   GETPRINT           GO PRINT IF NOT (CONTINUATION CARD)\n         CLI   CARD,BLANK         COULD IT BE A VALID SUBCOMMAND CARD\n         BER   R8                 RETURN TO CALLER IF SO\n         OI    MASTFLAG,PRIMEND   MARK NAME SET ENDED BY PRIMARY\n         NI    MASTFLAG,FULLMASK-GETSUBC TURN OFF SUBCOMMAND FLAG\n         B     WRITDSCB\nGETPRINT DS    0H\n         MVI   MSGCC,LINES1       SET CARRIAGE CONTROL\n         BAL   R7,PUTCARD\n         CLI   CARD,ASTERISK      COMMENT CARD?\n         BE    GETACARD           SKIP IF SO\nGETON    DS    0H\n         BAL   R7,SKIPB           GO SKIP THE BLANKS\n         LTR   R5,R5              ALL BLANK?\n         BZ    GETACARD           GET ANOTHER CARD IF SO\n         BR    R8                 RETURN TO CALLER\n         EJECT\n*\n*        GET A CONTROL CARD FROM SOMEWHERE (TSO, SYSIN, OR CONSOLE)\n*\n         SPACE 3\nCARDIN   DS    0H\n         TM    IOFLAG,CONSOLE     CONSOLE I/O REQUIRED\n         BO    DOCONIO            BRANCH IF SO\n         TM    IOFLAG,TSOSESS     TPUT/TGET TSO I/O REQUIRED\n         BO    DOTSIO             BRANCH IF SO\n         GET   SYSIN,CARD         GET A CARD FROM SYSIN DD\n         BR    R5                 RETURN TO CALLER\n         EJECT\n*\n*        CONTROL CARDS ARE OBTAINED FROM STARTING CONSOLE\n*\n         SPACE 3\nDOCONIO  DS    0H\n         XC    WTORECB,WTORECB    CLEAR ECB\n         IC    R0,CONID           PICK UP CONSOLE IDENTIFIER\n         MVI   CARD,C' '          BLANK OUT REPLY HOLDER\n         MVC   CARD+1(79),CARD\n         TM    IOFLAG,CONTINUE    IS THIS A CONTINUE CARD\n         BO    DOCONT             BRANCH IF SO\n*        ENTER CONSOLE PROMPT FOR CONTROL CARD\n         LA    R1,CARDMSGW        PICK UP MSG BUFFER ADDRESS\n         WTOR  MF=(E,(1))\n         B     DOWAIT\nDOCONT   DS    0H\n*        ENTER CONSOLE PROMPT FOR CONTINUATION OF CONTROL CARD\n         LA    R1,CONTMSGW        PICK UP MSG BUFFER ADDRESS\n         WTOR  MF=(E,(1))\n         SPACE 1\nDOWAIT   DS    0H\n         WAIT  ECB=WTORECB\n         OC    CARD,UPMASK        SHIFT TO UPPERCASE\n         BR    R5\n         EJECT\n*\n*        CONTROL CARDS ARE OBTAINED FROM TSO CONSOLE\n*\n         SPACE 3\nDOTSIO   DS    0H\n         MVI   CARD,C' '          BLANK OUT REPLY HOLDER\n         MVC   CARD+1(79),CARD\n         TM    IOFLAG,CONTINUE    IS THIS A CONTINUE CARD\n         BO    DOTSCONT           BRANCH IF SO\n*        ENTER TSO PROMPT FOR CONTROL CARD\n         TPUT  CARDMSG,CARDMSGL\n         B     DOTSTGET\nDOTSCONT DS    0H\n*        ENTER CONSOLE PROMPT FOR CONTINUATION OF CONTROL CARD\n         TPUT  CONTMSG,CONTMSGL\n         SPACE 1\nDOTSTGET DS    0H\n         STAX  DEFER=NO           ALLOW ATTENTION INTERRUPTS\n         TGET  CARD,80            GET A CONTROL CARD\n         STAX  DEFER=YES          DISALLOW ATTENTION INTERRUPTS\n         OC    CARD,UPMASK        FOLD TO UPPERCASE\n         BR    R5\n         EJECT\n*\n*        SKIP LEADING BLANKS ON CARDS\n*\n         SPACE 3\nSKIPB    DS    0H\n         LA    R5,CARD\n         LA    R1,72              LOAD COUNT MAX\nSKIPLOOP DS    0H                 SEARCH FOR FIRST NON-BLANK COL\n         CLI   0(R5),BLANK        BLANK\n         BNE   SKIPEND            BRANCH IF NOT\n         LA    R5,1(R5)           BUMP TO NEXT COL\n         BCT   R1,SKIPLOOP\n         LA    R5,0               INDICATED TOTALLY BLANK\nSKIPEND  DS    0H\n         BR    R7                 RETURN TO CALLER\n         EJECT\n*\n*        PRINT CARD IMAGE\n*\n         SPACE 3\nPUTCARD  DS    0H\n         TM    IOFLAG,CONSOLE     ARE WE ON A CONSOLE\n         BOR   R7                 DO NOT ECHO CARD BACK IF SO\n         TM    IOFLAG,TSOSESS     ARE WE A TSO SESSION\n         BOR   R7                 DO NOT ECHO CARD BACK IF SO\n         MVI   MSGLINE,BLANK      BLANK OUT MESSAGE LINE\n         MVC   MSGLINE+1(131),MSGLINE\n         MVC   MSGLINE(80),CARD   MOVE CARD IMAGE TO MESSAGE LINE\n         PUT   SYSPRINT,MSGBUFFR  PRINT CARD IMAGE\n         BR    R7\n         SPACE 5\n*\n*        PRINT A BLANK LINE\n*\n         SPACE 3\nPUTBLANK DS    0H\n         TM    IOFLAG,CONSOLE     ARE WE ON A CONSOLE\n         BOR   R7                 DO NOT PUT BLANK LINES IF SO\n         TM    IOFLAG,TSOSESS     ARE WE A TSO SESSION\n         BOR   R7                 DO NOT PUT BLANK LINES IF SO\n         MVI   MSGLINE,BLANK      BLANK OUT MESSAGE LINE\n         MVC   MSGLINE+1(131),MSGLINE\n         PUT   SYSPRINT,MSGBUFFR  PRINT A BLANK LINE\n         BR    R7\n         EJECT\n*\n*        PRINT MESSAGE\n*\n         SPACE 3\nMSGOUT   DS    0H\n         STH   R1,MPLNUM\n         LA    R1,MPL\n         L     RF,VMSG\n         BALR  RE,RF\n         LTR   RF,RF\n         BZR   R7\n         ABEND 777,DUMP\n         EJECT\n*\n*        THIS PORTION OF CODE TAKES THE HEX RETURN CODE IN REG 15\n*        AND CONVERTS IT TO INTEGER BINARY.\n*\n         SPACE 3\nFIXDIGIT DS    0H\n         LA    R1,RCWORD+3             GET ADDRESS OF END OF WORK WORD\n         LR    RE,RF                   TRANSFER RC TO WORK REG\n         LA    R4,4                    LOAD NUMBER OF BYTES IN RC\nFIXDLOOP DS    0H\n         SRDL  RE,4                    SHIFT 4 BITS TO R2\n         SRL   RF,28                   SHIFT R3 BITS TO LOW END\n         STC   RF,0(R1)                STORE IN BYTE IN WORK AREA\n         BCTR  R1,0                    BACK UP WORD POINTER\n         BCT   R4,FIXDLOOP             DO NEXT BYTE\n         SPACE 3\n         TR    RCWORD,FIXTABLE         TRANSLATE TO PRINTABLE HEX\n         SPACE 3\n         L     RF,RCWORD               RELOAD RETURN CODE (PRINTABLE)\n         BR    R7                      RETURN TO CALLER\n         SPACE 3\n*\n*        TRANSLATION TABLE FOR MAKING RETURN CODES PRINTABLE HEX.\n*\n         SPACE 3\nFIXTABLE DS    0F\n         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         EJECT\n*\n*        INFORMATION AND ERROR MESSAGE NODE POINTS\n*\n         PRINT NOGEN\n         SPACE 1\n*\n* A MESSAGE NODE IS BUILT BY THE MSGEXIT MACRO.\n*        IT MACRO REQUIRES THE SEQUENCE NUMBER OF\n*        THE MESSAGE TO BE PRINTED, A RETURN LABEL OR ABEND\n*        CODE (BUT NOT BOTH), AND AN OPTIONAL RETURN CODE.\n*        THE RETURN CODE DEFAULTS TO 8 AND SETS THE FUNCTION\n*        IN PROGRESS RETURN CODE.\n*\n         SPACE 1\n* SPECIAL EXECUTION MESSAGES (RETURN CODES, ETC.)\nMSGSP0   MSGEXIT SPMSG=SPMG0WTO,RETURN=FUNCMEND,RC=\nMSGSP1   MSGEXIT SPMSG=SPMG1WTO,RETURN=CLOSEND,RC=\nMSGSP2   MSGEXIT SPMSG=SPMG2WTO,RETURN=ERROR36,RC=\nMSGSP3   MSGEXIT SPMSG=SPMG3WTO,RETURN=MSGSP5\nMSGSP4   MSGEXIT SPMSG=SPMG4WTO,RETURN=MSGSP5\nMSGSP5   MSGEXIT SPMSG=SPMG5WTO,RETURN=MSGSP6\nMSGSP6   MSGEXIT SPMSG=SPMG6WTO,RETURN=FUNCMSG\n         SPACE 1\n* NORMAL EXECUTION MESSAGES\nMESSAG28 MSGEXIT MSG=28,RETURN=CLOSEX,RC=0\nMESSAG32 MSGEXIT MSG=32,RETURN=FUNCMSG2,RC=0\nMESSAG33 MSGEXIT MSG=33,RETURN=LOOP1,RC=0\n         SPACE 1\n* ERROR AND EXCEPTION MESSAGES\nERROR1   MSGEXIT MSG=1,ABEND=991\nERROR2   MSGEXIT MSG=2,RETURN=FUNCMSG\nERROR3   MSGEXIT MSG=3,ABEND=998\nERROR4   MSGEXIT MSG=4,ABEND=999\nERROR5   MSGEXIT MSG=5,RETURN=FUNCMSG\nERROR6   MSGEXIT MSG=6,RETURN=FUNCMSG\nERROR7   MSGEXIT MSG=7,RETURN=FUNCMSG\nERROR8   MSGEXIT MSG=8,RETURN=FUNCMSG\nERROR9   MSGEXIT MSG=9,RETURN=NAME\nERROR10  MSGEXIT MSG=10,RETURN=FUNCMSG\nERROR11  MSGEXIT MSG=11,RETURN=FUNCMSG\nERROR12  MSGEXIT MSG=12,RETURN=MSGSP3,RC=\nERROR13  MSGEXIT MSG=13,RETURN=FUNCMSG\nERROR14  MSGEXIT MSG=14,RETURN=FUNCMSG\nERROR15  MSGEXIT MSG=15,RETURN=FUNCMSG\nERROR16  MSGEXIT MSG=16,RETURN=FUNCMSG\nERROR17  MSGEXIT MSG=17,RETURN=FUNCMSG\nERROR18  MSGEXIT MSG=18,RETURN=FUNCMSG\nERROR19  MSGEXIT MSG=19,RETURN=FUNCMSG\nERROR20  MSGEXIT MSG=20,RETURN=FUNCMSG\nERROR21  MSGEXIT MSG=21,RETURN=FUNCMSG\nERROR22  MSGEXIT MSG=22,RETURN=FUNCMSG\nERROR23  MSGEXIT MSG=23,RETURN=FUNCMSG\nERROR24  MSGEXIT MSG=24,RETURN=FUNCMSG\nERROR25  MSGEXIT MSG=25,RETURN=ERROR26\nERROR26  MSGEXIT MSG=26,RETURN=CLOSE2\nERROR27  MSGEXIT MSG=27,RETURN=CLOSE,RC=12\nERROR29  MSGEXIT MSG=29,RETURN=FUNCMSG\nERROR30  MSGEXIT MSG=30,RETURN=CLOSEX,RC=4\nERROR31  MSGEXIT MSG=31,ABEND=992\nERROR34  MSGEXIT MSG=34,RETURN=FUNCMSG\nERROR35  MSGEXIT MSG=35,ABEND=999\nERROR36  MSGEXIT MSG=36,ABEND=997\nERROR37  MSGEXIT MSG=37,RETURN=CLOSE,RC=12\nERROR38  MSGEXIT MSG=38,RETURN=FUNCMSG\nERROR39  MSGEXIT MSG=39,RETURN=MSGSP4,RC=\n         EJECT\n*\n*        SPECIAL MESSAGES (REQUIRE RETURN CODES OR MODIFICATION)\n*\n*          SPECIAL MESSAGES ARE CONSTRUCTED AS A VALID WTO\n*          REMOTE PARAMETER LIST (MF=L).  SPECIAL MESSAGES\n*          ARE PRINTED VIA THE 'SPMSG' PARAMETER OF THE\n*          MSGEXIT MACRO.\n*\n         SPACE 3\n         PRINT GEN\n         SPACE 1\nSPMG0WTO DS    0F                 MESSAGE 0 WTO FORMAT\n         DC    AL2(SPMSG0L)\n         DC    X'4000'\nSPMSG0   DC    C' FDB9998I **** FUNCTION PROCESSING COMPLETE.  RETURN CX\n               ODE IS '\nSPMSG0R  DC    CL4'0000'\n         DC    C'.'\nSPMSG0L  EQU   *-SPMG0WTO\n         SPACE 2\nSPMG1WTO DS    0F                 MESSAGE 1 WTO FORMAT\n         DC    AL2(SPMSG1L)\n         DC    X'4000'\nSPMSG1   DC    C' FDB9999I **** ALL PROCESSABLE FUNCTIONS COMPLETE.  HIX\n               GHEST RETURN ENCOUNTERED WAS '\nSPMSG1R  DC    CL4'0000'\n         DC    C'.'\nSPMSG1L  EQU   *-SPMG1WTO\n         SPACE 2\nSPMG2WTO DS    0F                 MESSAGE 2 WTO FORMAT\n         DC    AL2(SPMSG2L)\n         DC    X'4000'\nSPMSG2   DC    C' FDB9997D **** DISASTER - SCRATCH FAILED AFTER DUMMY RX\n               ENAME.  SCRATCH RETURN CODE = '\nSPMSG2R1 DC    CL4'0000'\n         DC    C'.  REASON CODE = '\nSPMSG2R2 DC    CL4'0000'\n         DC    C'.'\nSPMSG2L  EQU   *-SPMG2WTO\n         SPACE 2\nSPMG3WTO DS    0F                 MESSAGE 3 WTO FORMAT\n         DC    AL2(SPMSG3L)\n         DC    X'4000'\nSPMSG3   DC    C' FDB9996D **** ERROR - RETURN CODE = '\nSPMSG3R1 DC    CL4'0000'\n         DC    C',  ERROR CODE = '\nSPMSG3R2 DC    CL4'0000'\n         DC    C',  INFORMATION CODE= '\nSPMSG3R3 DC    CL4'0000'\n         DC    C'.'\nSPMSG3L  EQU   *-SPMG3WTO\n         SPACE 2\nSPMG4WTO DS    0F                 MESSAGE 4 WTO FORMAT\n         DC    AL2(SPMSG4L)\n         DC    X'4000'\nSPMSG4   DC    C' FDB9995D **** ERROR - RETURN CODE = '\nSPMSG4R1 DC    CL4'0000'\n         DC    C',  ERROR CODE = '\nSPMSG4R2 DC    CL4'0000'\n         DC    C',  CATALOG CODE= '\nSPMSG4R3 DC    CL4'0000'\n         DC    C'.'\nSPMSG4L  EQU   *-SPMG4WTO\n         SPACE 2\n         EJECT\n*\n*        SPECIAL WTOR MESSAGE BUFFERS\n*\n         SPACE 3\nCARDMSGW DS    0F                 CARD MESSAGE WTOR FORMAT HEADDER\n         DC    AL1(80)            REPLY LENGTH\n         DC    AL3(CARD)          ADDRESS IF REPLY BUFFER\n         DC    A(WTORECB)         ADDRESS OF EVENT CONTROL BLOCK\n         DC    AL2(CARDMSGL)      LENGTH OF MESSAGE\n         DC    X'4000'            MCS FLAGS\nCARDMSG  DC    C' FDB9990R **** ENTER FIXDSCB CONTROL CARD'\nCARDMSGL EQU   *-CARDMSG\nCONTMSGW DS    0F                 CONT MESSAGE WTOR FORMAT HEADDER\n         DC    AL1(80)            REPLY LENGTH\n         DC    AL3(CARD)          ADDRESS IF REPLY BUFFER\n         DC    A(WTORECB)         ADDRESS OF EVENT CONTROL BLOCK\n         DC    AL2(CONTMSGL)      LENGTH OF MESSAGE\n         DC    X'4000'            MCS FLAGS\nCONTMSG  DC    C' FDB9991R **** CONTINUE FIXDSCB CONTROL CARD'\nCONTMSGL EQU   *-CONTMSG\n         EJECT\n*\n*        REMOTELY EXECUTED INSTRUCTIONS\n*\n         SPACE 3\nCOMMOVE  MVC   COMMAND(0),0(R5)   MOVE IN COMMAND NAME (EXECUTED)\nCOM2MOVE MVC   COMMAND2(0),0(R5)  MOVE IN COMMAND NAME (EXECUTED)\nDSNMOVE  MVC   DSCBNAME(0),0(R5)  MOVE IN DSNAME       (EXECUTED)\nNEWNMOVE MVC   NEWNAME(0),0(R5)   MOVE IN NEW DSNAME   (EXECUTED)\nVOLMOVE  MVC   VOLUME(0),0(R5)    MOVE IN VOLSER       (EXECUTED)\nVOLMOVE2 MVC   S99DDTXT(0),0(R5)  MOVE IN VOLSER       (EXECUTED)\nVOLMOVE3 MVC   S99VTEXT(0),0(R5)  MOVE IN VOLSER       (EXECUTED)\nVOLMOVE4 MVC   S99DSNAM(0),0(R5)  MOVE IN VOLSER       (EXECUTED)\nVOLMOVE5 MVC   DA08SER(0),0(R5)   MOVE IN VOLSER       (EXECUTED)\nVOLMOVE6 MVC   DAIRDSNV(0),0(R5)  MOVE IN VOLSER       (EXECUTED)\nVOLMOVE7 MVC   DA08DDN(0),0(R5)   MOVE IN VOLSER       (EXECUTED)\nRECMOVE  MVC   RECFMH(0),0(R5)    MOVE IN RECORD FORMAT(EXECUTED)\nLRECLPCK PACK  DOUBLE,0(0,R5)     PACK IN LRECL VALUE  (EXECUTED)\nBLKSZPCK EQU   LRECLPCK           PACK IN BLKSIZE VALUE(EXECUTED)\nRKPPCK   EQU   LRECLPCK           PACK IN RKP VALUE    (EXECUTED)\nKEYLPCK  EQU   LRECLPCK           PACK IN KEYL VALUE   (EXECUTED)\nSUBCTEST CLC   0(0,R2),0(R5)      TEST FOR SUBCOMMAND  (EXECUTED)\nKEYWTEST CLC   1(0,R3),0(R5)      TEST FOR KEYWORD     (EXECUTED)\n         EJECT\n*\n*        REGISTER AND OTHER EQUATES\n*\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         SPACE 2\nBLANK    EQU   C' '\nASTERISK EQU   C'*'\nCOMMA    EQU   C','\nEQUAL    EQU   C'='\nLINES1   EQU   C' '\nLINES3   EQU   C'3'\nSIGN     EQU   X'F0'\nXDAPGOOD EQU   X'7F'\nHEXZERO  EQU   X'00'\nHEXFOUR  EQU   X'04'\nFULLMASK EQU   X'FF'\n         EJECT\n*\n*        REMOTE CAMLIST MACRO EXPANSION\n*\n         SPACE 3\nDSCBADDR CAMLST SEARCH,DSCBNAME,VOLUME,WORKAREA\n         SPACE 1\nSCRLIST  CAMLST SCRATCH,TEMPNAME,,VOLIST\n         EJECT\n*\n*        DATA CONTROL BLOCKS (DCB'S)\n*\n         SPACE 3\n         PRINT NOGEN\nXDAPDCB  DCB   MACRF=(E),DSORG=DA,DDNAME=DDNAME,EXLST=EXITLIST\nSYSPRINT DCB   MACRF=(PM),DDNAME=SYSPRINT,RECFM=FBA,LRECL=133,         X\n               BLKSIZE=1330,DSORG=PS\nSYSIN    DCB   MACRF=(GM),DDNAME=SYSIN,DSORG=PS,EODAD=CLOSE\n         PRINT GEN\n         EJECT\n*\n*        DYNAMIC DATA AREAS\n*\n         SPACE 2\nSAVEAREA DC    9D'0'\nSAVEREGS DC    9D'0'\nMPL      DS    0F\nMPLMTT   DC    A(MSGTABLE)        ADDRESS OF MESSAGE TABLE\nMPLDCB   DC    A(SYSPRINT)        ADDRESS OF DCB\nMPLSPADR DC    A(0)               ADDRESS OF SPECIAL MESSAGE\nMPLNUM   DC    H'0'               MESSAGE NUMBER TO BE PRINTED\nMPLIOF   DC    X'0'               MPL I/O FLAG\nMPLCON   DC    X'0'               MPL CONSOLE ID\nCARD     DC    CL80' '            INPUT CARD IMAGE\nHIGHRC   DC    F'0'               HIGHEST RETURN CODE ENCOUNTERED\nFUNCRC   DC    F'0'               CURRENT FUNCTION RETURN CODE\nTSOWORD  DS    A                  ADDRESS OF EXTRACTED TSO INDICATOR\nTIOTADRS DS    A                  EXTRACTED TIOT ADDRESS\nCPPLHOLD DS    A                  TSO CPPL ADDRESS\nTHYMEOYR DC    D'0'               YEAR COMPUTATION HOLDER\nDAYTHYME DC    D'0'               DAY COMPUTATION HOLDER\nDOUBLE   DC    D'0'               PACKING WORD\nCURRENTF DC    F'0'               ADDRESS OF CURRENT FUNCTION T/ENTRY\nCOMLEN   DC    F'0'               LENGTH OF COMMAND\nCOMMAND  DC    CL8' '             CURRENT COMMAND\nCOMMAND2 DC    CL8' '             POSSIBLE NEW COMMAND DURING NAME\nRECFMH   DC    CL5' '             RECORD FORMAT HOLDER\nOPTCODEH DC    C' '               OPT CODE HOLDER\nDSORGH   DC    CL3' '             DATASET ORGANIZATION HOLDER\nNEWNAME  DC    CL44' '            NEW DATASET NAME HOLDER\n         SPACE 1\n* MASTER FLAG FOR ENTIRE RUN\nMASTFLAG DC    X'00'\nTESTONLY EQU   X'80'  THIS RUN IS A TEST ONLY (NO REWRITE OF DSCB'S)\nCARD2TRY EQU   X'40'  THIS GET FOR A CONTINUATION OR SUBCOMMAND CARD\nGETSUBC  EQU   X'20'  THIS GET FOR A SUBCOMMAND CARD\nPRIMEND  EQU   X'10'  PRIMARY ENCOUNTERED DURING SUBCOMMAND PROCESSING\nPARTSCAN EQU   X'08'  SCAN CARD FOR COMMAND ONLY\nCOMBADF  EQU   X'04'  SCANNED COMMAND CONTAINED AN = SIGN\nMVSSYS   EQU   X'02'  SYSTEM IS AN MVS RELEASE (SVC 99 AVAILABLE)\n         SPACE 1\n* FUNCTION FLAG FOR ONE FUNCTION REQUEST\nCOMFLAG  DC    X'00'\nDSNKEY   EQU   X'80'  THE DSN KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nVOLKEY   EQU   X'40'  THE VOLUME KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nNEWNKEY  EQU   X'20'  THE NEWNAME KEYWORD HAS BEEN ENCOUNTERED IN SCAN\nREWRITE  EQU   X'01'  THE DSCB HAS BEEN MODIFIED AND MUST BE WRITTEN\n         SPACE 1\n* I/O TYPE INDICATOR FLAG\nIOFLAG   DC    X'00'\nCONSOLE  EQU   X'80'  ALL I/O MUST BE WTO/WTOR TO STARTING CONSOLE\nCONTINUE EQU   X'40'  CONTINUE CARD REQUIRED\nTSOSESS  EQU   X'20'  ALL I/O MUST BE TPUT/TGET TO TSO\n         SPACE 1\n         DS    0F\nEXITLIST DC    X'87',AL3(JFCBAREA) READ JFCB EXIT\n         DS    0D\nJFCBAREA DS    CL176              INTERNAL JFCB AREA\nWORKAREA DS    0D                 OBTAIN WORK AREA\n         DS    148C\nDSCBNAME DS    CL44\nVOLIST   DS    0CL12\n         DC    H'1'\nVOLUNIT  DC    X'00000000'\nVOLUME   DC    CL6' '\nVOLSTAT  DC    H'0'\nXDAPBLRF DC    XL8'0000000000000000'\nRCSAVE   DC    F'0'               SAVE AREA FOR REG 15 DURING MSG RTNS\nRCWORD   DC    F'0'               WORK WORD FOR RC FIXING FOR PRINT\nMSGBUFFR DS    0CL133\nMSGCC    DC    C' '\nMSGLINE  DC    CL132' '\nCONID    DC    X'00'    CONSOLE ID FOR STARTED TASK I/O VIA WTO\nWTORECB  DC    F'0'     ECB FOR WTOR REPLY WAIT\nDECB     DC    F'0'     ECB FOR DAIR\nTEMPNAME DC    CL44'FIXDSCB.SCRATCH.DATASET'\nDAIRDSNB DC    H'8'\n         DC    X'5050'\nDAIRDSNV DC    CL42' '\n         EJECT\n*\n*        MESSAGE EXTENSION ROUTINE MESSAGES\n*\n         SPACE 3\n         EJECT\n*\n*        DYNAMIC ALLOCATION (DAIR08) CONTROL BLOCK\n*\n         SPACE 3\nDAPLIST  DS    0F\n         DC    A(0,0)\n         DC    A(DECB)\n         DC    A(0)\n         DC    A(DAIR08)\n         SPACE 3\nDAIR08   DS    0F\nDA08CD   DC    X'0008'\nDA08FLG  DC    X'0000'\nDA08DARC DC    X'0000'\nDA08CTRC DC    X'0000'\nDA08PDSN DC    A(DAIRDSNB)\nDA08DDN  DC    CL8' '\nDA08UNIT DC    CL8'SYSDA'\nDA08SER  DC    CL6' '\n         DC    CL2' '\nDA08BLK  DC    A(80)\nDA08PQTY DC    A(1)\nDA08SQTY DC    A(0)\nDA08DQTY DC    A(0)\nDA08MNM  DC    CL8' '\nDA08PSWD DC    CL8' '\nDA08DSP1 DC    X'04'\nDA08DSP2 DC    X'04'\nDA08DSP3 DC    X'04'\nDA08CTL  DC    X'40'\nDA08RSV  DC    AL3(0)\nDA08DSO  DC    X'00'\nDA08ALN  DC    CL8' '\n         EJECT\n*\n*        DYNAMIC ALLOCATION (SVC 99) CONTROL BLOCKS\n*\n         SPACE 3\n         DS    0F                 MOVE TO FULL WORD BOUNDARY\nS99RBPTR DC    X'80',AL3(S99RB)   SVC 99 REQUEST BLOCK POINTER\n         SPACE 1\nS99RB    DS    0F                 SVC 99 REQUEST BLOCK\n         DC    AL1(20)            RB LENGTH\n         DC    AL1(01)            VERB 01 = DSNAME ALLOCATION (TEMP)\nS99F1    DC    AL2(0)             FLAGS1\nS99ERROR DC    AL2(0)             ERROR CODES\nS99INFO  DC    AL2(0)             INFORMATION CODES\n         DC    A(S99TUPL)         TEXT UNIT POINTER LIST\n         DC    A(0)               RESERVED\nS99F2    DC    A(0)               FLAGS2\n         SPACE 1\nS99TUPL  DS    0F                 SVC 99 TEXT UNIT POINTER LIST\n         DC    A(S99DSN)          DSNAME TEXT UNIT\n         DC    A(S99DDN)          DDNAME TEXT UNIT\n         DC    A(S99VOL)          VOLUME TEXT UNIT\n         DC    A(S99DSTAT)        DATASET STATUS TEXT UNIT\n         DC    A(S99DISP)         DATASET DISPOSITION\n         DC    A(S99UNIT)         UNIT NAME TEXT UNIT\n         DC    A(S99TRACK)        DATASET TRACK TEXT UNIT\n         DC    A(S99SPACE)        DATASET SPACE TEXT UNIT\n         DC    X'80',AL3(0)       END OF LIST\n         SPACE 1\nS99DSN   DS    0F                 VOLUME TEXT UNIT\nS99DSKEY DC    X'0002'\nS99DS#   DC    X'0001'\nS99DSLEN DC    X'0002'\nS99DSTXT DC    X'5050'            TEMPORARY DSN=&&VOLSER\nS99DSNAM DC    CL6' '\n         SPACE 1\nS99DDN   DS    0F                 VOLUME TEXT UNIT\nS99DDKEY DC    X'0001'\nS99DD#   DC    X'0001'\nS99DDLEN DC    X'0008'\nS99DDTXT DC    CL8' '\n         SPACE 1\nS99VOL   DS    0F                 VOLUME TEXT UNIT\nS99VKEY  DC    X'0010'\nS99V#    DC    X'0001'\nS99VLEN  DC    X'0006'\nS99VTEXT DC    CL6' '\n         SPACE 1\nS99DSTAT DS    0F                 DS STATUS TEXT UNIT\nS99DKEY  DC    X'0004'\nS99D#    DC    X'0001'\nS99DLEN  DC    X'0001'\nS99DTEXT DC    X'04'              DISP = OLD\n         SPACE 1\nS99DISP  DS    0F                 VOLUME TEXT UNIT\nS99DIKEY DC    X'0005'\nS99DI#   DC    X'0001'\nS99DILEN DC    X'0001'\nS99DITXT DC    X'04'\n         SPACE 1\nS99UNIT  DS    0F                 UNIT NAME TEXT UNIT\nS99UKEY  DC    X'0015'\nS99U#    DC    X'0001'\nS99ULEN  DC    X'0005'\nS99UTEXT DC    C'SYSDA'\n         SPACE 1\nS99TRACK DS    0F                 SPACE TYPE TEXT UNIT\nS99TKEY  DC    X'0007'\nS99T#    DC    X'0000'\n         SPACE 1\nS99SPACE DS    0F                 SPACE AMOUNT TEXT UNIT\nS99SPKEY DC    X'000A'\nS99SP#   DC    X'0001'\nS99SPLEN DC    X'0003'\nS99SPTXT DC    X'000001'          1 UNIT (TRACK)\n         EJECT\n*\n*        DAIRFAIL PARAMETER BLOCKS\n*\n         SPACE 3\nDFS99RB  DC    A(0)\nDFDAPLP  EQU   DFS99RB\nDFRCP    DC    A(DYNRETC)\nDFJEFF02 DC    A(ZERO)\nDFIDP    DC    A(DFFLAGS)\nDFCPPLP  DC    A(0)\nDFBUFFP  DC    A(DFBUFS)\nDYNRETC  DC    A(0)\nDFFLAGS  DC    X'4000'\nDFBUFS   DS    0F\nDFFLMSG  EQU   *\nDFBUFL1  DC    AL2(0)\nDFBUF01  DC    AL2(0)\nDFBUFT1  DC    CL251' '\nDFSLMSG  DS    0F\nDFBUFL2  DC    AL2(0)\nDFBUF02  DC    AL2(0)\nDFBUFT2  DC    CL251' '\nSPMG5WTO EQU   DFFLMSG            USE DF BUFFER FOR MESSAGE 5\nSPMG6WTO EQU   DFSLMSG            USE DF BUFFER FOR MESSAGE 6\n         EJECT\n*\n*        CONSTANTS\n*\n         SPACE 3\nZERO     DC    F'0'\nONE      DC    F'1'\nFOUR     DC    F'4'\nSIX      DC    F'6'\nFOURFOUR DC    F'44'\nBIGLRECL DC    F'32768'\nBIGKEYL  DC    F'255'\nPREFIXL  DC    F'256'\nBIGRKP   DC    F'32767'\nVMSG     DC    V(FIXDMSGR)\nUPMASK   DC    CL80' '            MASK FOR UPPERCASE CONVERSION\nTESTPARM DC    CL4'TEST'\nBLANKS   DC    CL8' '\nPACK8ZRO DC    PL8'0'\nSCRTCH   DC    CL8'SCRATCH'\nCOMNAME  DC    CL8'NAME'\nMVSCODE  DC    C'03'\nMAXDATE  DC    X'63016D'          DATE = 99:365 (IN HEX)\nZERODATE DC    X'000000'          DATE = 00:000 (IN HEX)\nMASKC0   DC    X'C0'\n         EJECT\n*\n*        COMMAND TABLE\n*\n         SPACE 3\nCOMTABLE DS    0F\n         DC    CL8'RENEW'                  RENEW COMMAND\nCOMTADR  EQU   *-COMTABLE         ADDRESS OF COMMAND ROUTINE\n         DC    A(RENEW)\nCOMTRKWL EQU   *-COMTABLE\n         DC    A(RKWLIST1)        ADDRESS OF REQUIRED KWT LIST\nCOMTOKWL EQU   *-COMTABLE\n         DC    A(0)               ADDRESS OF OPTIONAL KWT LIST\nCOMTLEN  EQU   *-COMTABLE         LENGTH OF A TABLE ENTRY\n         DC    CL8'PROTECT',A(PROTECT),A(RKWLIST1),A(0)\n         DC    CL8'SETNOPWR',A(SETNOPWR),A(RKWLIST1),A(0)\n         DC    CL8'UNLOCK',A(UNLOCK),A(RKWLIST1),A(0)\n         DC    CL8'EXPIRE',A(EXPIRE),A(RKWLIST1),A(0)\n         DC    CL8'EXTEND',A(EXTEND),A(RKWLIST1),A(0)\n         DC    CL8'ZEROEXPD',A(ZEROEXPD),A(RKWLIST1),A(0)\n         DC    CL8'RENAME',A(RENAME),A(RKWLIST2),A(0)\n         DC    CL8'NAME',A(NAME),A(RKWLIST1),A(0)\n         DC    CL8'SCRATCH',A(SCRATCH),A(RKWLIST1),A(0)\n         DC    CL8'END',A(END),A(0),A(0)\n         DC    C' '               END OF TABLE\n         EJECT\n*\n*        KEYWORD TABLES\n*\n*       A KWT IS A TABLE THAT DESCRIBES A KEYWORD AND ALL ACCEPTABLE\n*       ABREVIATIONS OF IT.\n*\n         SPACE 3\nKWTDSN   DC    A(COMDSN)          ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(DSNKEY)        FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR6)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(7)             LENGTH\n         DC    C'DSNAME='         KEYWORD\n         DC    AL1(4)             LENGTH\n         DC    C'DSN='            ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'D='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\nKWTVOL   DC    A(COMVOL)          ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(VOLKEY)        FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR7)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(7)             LENGTH\n         DC    C'VOLUME='         KEYWORD\n         DC    AL1(4)             LENGTH\n         DC    C'VOL='            ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'V='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         SPACE 3\nKWTNEWN  DC    A(COMNEWN)         ADRS OF ROUTINE TO HANDLE KEYWORD\n         DC    AL1(NEWNKEY)       FLAG THAT INDICATES KW SUPPLIED\n         DC    AL3(ERROR8)        ADRS OF ERROR RTN IF KW OMITTED\n         DC    AL1(8)             LENGTH\n         DC    C'NEWNAME='        KEYWORD\n         DC    AL1(5)             LENGTH\n         DC    C'NEWN='           ABREVIATION\n         DC    AL1(3)             LENGTH\n         DC    C'NN='             ABREVIATION\n         DC    AL1(2)             LENGTH\n         DC    C'N='              ABREVIATION\n         DC    AL1(0)             END OF KWT\n         EJECT\n*\n*        RKWLIST'S ARE LIST OF REQUIRED KWT FOR A FUNCTION\n*\n         SPACE 3\nRKWLIST1 DS    0H\n         DC    A(KWTDSN)\n         DC    A(KWTVOL)\n         DC    A(0)\n         SPACE 3\nRKWLIST2 DS    0H\n         DC    A(KWTDSN)\n         DC    A(KWTVOL)\n         DC    A(KWTNEWN)\n         DC    A(0)\n         SPACE 3\n*\n*        OKWLIST'S ARE LIST OF OPTIONAL KWT FOR A FUNCTION\n*\n         SPACE 3\n*        NO OKW'S ARE IN USE AT THIS TIME\n         SPACE 3\n         EJECT\n*\n*       SUBCOMMAND TABLE\n*\n        SPACE 3\nSUBTABLE DS    0F\n         DC    CL8'LRECL'                  LRECL CHANGE\nSUBTADR  EQU   *-SUBTABLE         ADDRESS OF PROCESSING ROUTINE\n         DC    A(LRECL)\nSUBTSCL  EQU   *-SUBTABLE         LENGTH OF THE SUBCOMMAND NAME\n         DC    A(5)\nSUBTLEN  EQU   *-SUBTABLE         LENGTH OF A SUBC TABLE ENTRY\n         DC    CL8'BLKSIZE',A(BLKSIZE,7)   CHANGE BLKSIZE\n         DC    CL8'DSORG',A(DSORG,5)       RESET DSORG\n         DC    CL8'RECFM',A(RECFM,5)       RESET RECORD FORMAT\n         DC    CL8'KEYL',A(KEYL,4)         RESET KEY LENGTH\n         DC    CL8'RKP',A(RKP,3)           RESET REL KEY POSITION\n         DC    CL8'OPTCODE',A(OPTCODE,7)   RESET OPTCODE\n         DC    CL8'ENDNAME',A(ENDNAME,7)   END NAME SUBCOMMAND LIST\n         DC    C' '               END OF TABLE\n         EJECT\n*\n*        RECORD FORMAT TABLE\n*\n         SPACE 3\nRECFMTAB DS    0H\nFIXED    EQU   X'80'\nVARIABLE EQU   X'40'\nUNDEFINE EQU   X'C0'\nTOVRFLOW EQU   X'20'\nBLOCKED  EQU   X'10'\nFSTANDRD EQU   X'08'\nVSPANNED EQU   X'08'\nASACC    EQU   X'04'\nMCHCC    EQU   X'02'\n         DC    CL5'U    '\nRECFMASK EQU   *-RECFMTAB         OFFSET TO MASK BYTE IN ENTRY\n         DC    AL1(UNDEFINE)\nRECFMLEN EQU   *-RECFMTAB\n         DC    CL5'UT   ',AL1(UNDEFINE+TOVRFLOW)\n         DC    CL5'UA   ',AL1(UNDEFINE+ASACC)\n         DC    CL5'UM   ',AL1(UNDEFINE+MCHCC)\n         DC    CL5'UTA  ',AL1(UNDEFINE+TOVRFLOW+ASACC)\n         DC    CL5'UTM  ',AL1(UNDEFINE+TOVRFLOW+MCHCC)\n         DC    CL5'F    ',AL1(FIXED)\n         DC    CL5'FB   ',AL1(FIXED+BLOCKED)\n         DC    CL5'FS   ',AL1(FIXED+FSTANDRD)\n         DC    CL5'FT   ',AL1(FIXED+TOVRFLOW)\n         DC    CL5'FBS  ',AL1(FIXED+BLOCKED+FSTANDRD)\n         DC    CL5'FBT  ',AL1(FIXED+BLOCKED+TOVRFLOW)\n         DC    CL5'FBST ',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW)\n         DC    CL5'FA   ',AL1(FIXED+ASACC)\n         DC    CL5'FBA  ',AL1(FIXED+BLOCKED+ASACC)\n         DC    CL5'FSA  ',AL1(FIXED+FSTANDRD+ASACC)\n         DC    CL5'FTA  ',AL1(FIXED+TOVRFLOW+ASACC)\n         DC    CL5'FBSA ',AL1(FIXED+BLOCKED+FSTANDRD+ASACC)\n         DC    CL5'FBTA ',AL1(FIXED+BLOCKED+TOVRFLOW+ASACC)\n         DC    CL5'FBSTA',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW+ASACC)\n         DC    CL5'FM   ',AL1(FIXED+MCHCC)\n         DC    CL5'FBM  ',AL1(FIXED+BLOCKED+MCHCC)\n         DC    CL5'FSM  ',AL1(FIXED+FSTANDRD+MCHCC)\n         DC    CL5'FTM  ',AL1(FIXED+TOVRFLOW+MCHCC)\n         DC    CL5'FBSM ',AL1(FIXED+BLOCKED+FSTANDRD+MCHCC)\n         DC    CL5'FBTM ',AL1(FIXED+BLOCKED+TOVRFLOW+MCHCC)\n         DC    CL5'FBSTM',AL1(FIXED+BLOCKED+FSTANDRD+TOVRFLOW+MCHCC)\n         DC    CL5'V    ',AL1(VARIABLE)\n         DC    CL5'VB   ',AL1(VARIABLE+BLOCKED)\n         DC    CL5'VS   ',AL1(VARIABLE+VSPANNED)\n         DC    CL5'VT   ',AL1(VARIABLE+TOVRFLOW)\n         DC    CL5'VBS  ',AL1(VARIABLE+BLOCKED+VSPANNED)\n         DC    CL5'VBT  ',AL1(VARIABLE+BLOCKED+TOVRFLOW)\n         DC    CL5'VBST ',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW)\n         DC    CL5'VA   ',AL1(VARIABLE+ASACC)\n         DC    CL5'VBA  ',AL1(VARIABLE+BLOCKED+ASACC)\n         DC    CL5'VSA  ',AL1(VARIABLE+VSPANNED+ASACC)\n         DC    CL5'VTA  ',AL1(VARIABLE+TOVRFLOW+ASACC)\n         DC    CL5'VBSA ',AL1(VARIABLE+BLOCKED+VSPANNED+ASACC)\n         DC    CL5'VBTA ',AL1(VARIABLE+BLOCKED+TOVRFLOW+ASACC)\n         DC    CL5'VBSTA',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW+ASACC)\n         DC    CL5'VM   ',AL1(VARIABLE+MCHCC)\n         DC    CL5'VBM  ',AL1(VARIABLE+BLOCKED+MCHCC)\n         DC    CL5'VSM  ',AL1(VARIABLE+VSPANNED+MCHCC)\n         DC    CL5'VTM  ',AL1(VARIABLE+TOVRFLOW+MCHCC)\n         DC    CL5'VBSM ',AL1(VARIABLE+BLOCKED+VSPANNED+MCHCC)\n         DC    CL5'VBTM ',AL1(VARIABLE+BLOCKED+TOVRFLOW+MCHCC)\n         DC    CL5'VBSTM',AL1(VARIABLE+BLOCKED+VSPANNED+TOVRFLOW+MCHCC)\n         DC    C' '\n         EJECT\n*\n*        OPTCODE TABLE\n*\n         SPACE 3\nOPTCODET DS    0H\nOPTW     EQU   X'80'\nOPTU     EQU   X'40'\nOPTC     EQU   X'20'\nOPTH     EQU   X'10'\nOPTO     EQU   X'10'\nOPTQ     EQU   X'08'\nOPTZ     EQU   X'04'\nOPTT     EQU   X'02'\nOPTJ     EQU   X'01'\n         DC    C'W'\nOPTCMASK EQU   *-OPTCODET         OFFSET TO MASK BYTE IN ENTRY\n         DC    AL1(OPTW)          WRITE VALIDITY CHECK (DASD)\nOPTCLEN  EQU   *-OPTCODET\n         DC    C'U',AL1(OPTU)     ALLOW DATA CHECK (INVALID CHAR)\n         DC    C'C',AL1(OPTC)     CHAINED SCHEDULING\n         DC    C'H',AL1(OPTH)     OCR HOPPER ENPTY EXIT?\n         DC    C'O',AL1(OPTO)     OCR ON-LINE CORRECTION\n         DC    C'Q',AL1(OPTQ)     ASCII TRANSLATION REQUIRED\n         DC    C'Z',AL1(OPTZ)     REDUCED ERROR RECOVERY\n         DC    C'T',AL1(OPTT)     USER TOTALING\n         DC    C'J',AL1(OPTJ)     DYNAMIC SELECT OF TRANSLATE TAB\n         DC    C' '               END OF TABLE\n         EJECT\n*\n*        DATASET ORGANIZATION TABLE\n*\n         SPACE 3\nDSORGTAB DS    0H\nISAM     EQU   X'80'\nPHYSEQ   EQU   X'40'\nDIRECT   EQU   X'20'\nPDS      EQU   X'02'\nUNMOVE   EQU   X'01'\n         DC    CL3'PS ',AL1(PHYSEQ)\nDSORGLEN EQU   *-DSORGTAB\n         DC    CL3'PSU',AL1(PHYSEQ+UNMOVE)\n         DC    CL3'DA ',AL1(DIRECT)\n         DC    CL3'DAU',AL1(DIRECT+UNMOVE)\n         DC    CL3'IS ',AL1(ISAM)\n         DC    CL3'ISU',AL1(ISAM+UNMOVE)\n         DC    CL3'PO ',AL1(PDS)\n         DC    CL3'POU',AL1(PDS+UNMOVE)\n         DC    C' '\n         EJECT\n*\n*        LITERALS (IF ANY)\n*\n         SPACE 3\n         LTORG\n         EJECT\n*\n*        ERROR MESSAGE TABLE CSECTS\n*\n         SPACE  3\n         PRINT NOGEN\nERRMSG1  MSGSETUP   ' FDB0001D **** DISASTER - READ OF JFCB FAILED.'\nERRMSG2  MSGSETUP   ' FDB0002E **** ERROR - OBTAIN FAILURE.  DATA SET NX\n               OT FOUND ON VOLUME SPECIFIED.  CHECK FOR SPELLING ERRORSX\n               .'\nERRMSG3  MSGSETUP   ' FDB0003D **** DISASTER - XDAP READ FAILED.  RUN AX\n               BORTED.'\nERRMSG4  MSGSETUP   ' FDB0004D **** DISASTER - XDAP WRITE FAILED.  RUN X\n                ABORTED.'\nERRMSG5  MSGSETUP   ' FDB0005E **** ERROR - UNKNOWN COMMAND SPECIFIED. X\n                THIS CONTROL CARD IGNORED.'\nERRMSG6  MSGSETUP   ' FDB0006E **** ERROR - DATASET NAME NOT SPECIFIED.X\n                 COMMAND NOT EXECUTED.'\nERRMSG7  MSGSETUP   ' FDB0007E **** ERROR - VOLUME SERIAL NUMBER NOT SPX\n               ECIFIED.  COMMAND NOT EXECUTED.'\nERRMSG8  MSGSETUP   ' FDB0008E **** ERROR - NEW DATASET NAME NOT SPECIFX\n               ED ON RENAME REQUEST.  COMMAND NOT EXECUTED.'\nERRMSG9  MSGSETUP   ' FDB0009E **** ERROR - UNKNOWN SUBCOMMAND FOR NAMEX\n               .  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG10 MSGSETUP   ' FDB0010E **** ERROR - INVALID LOGICAL RECORD LENGX\n               TH SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG11 MSGSETUP   ' FDB0011E **** ERROR - INVALID BLOCK SIZE SPECIFIEX\n               D.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG12 MSGSETUP   ' FDB0012E **** ERROR - VOLUME SPECIFIED NOT REFEREX\n               NCED IN A DD CARD AND DYNAMIC ALLOCATION ATTEMPT FAILED.X\n                 COMMAND NOT EXECUTED.'\nERRMSG13 MSGSETUP   ' FDB0013E **** ERROR - DATASET NAME SPECIFIED MULTX\n               PLE TIMES.  COMMAND NOT EXECUTED.'\nERRMSG14 MSGSETUP   ' FDB0014E **** ERROR - INVALID DATA SET NAME SPECIX\n               FIED.  COMMAND NOT EXECUTED.'\nERRMSG15 MSGSETUP   ' FDB0015E **** ERROR - VOLUME SERIAL SPECIFIED MULX\n               TIPLE TIMES.  COMMAND NOT EXECUTED.'\nERRMSG16 MSGSETUP   ' FDB0016E **** ERROR - INVALID VOLUME SERIAL NUMBEX\n               R SPECIFIED.  COMMAND NOT EXECUTED.'\nERRMSG17 MSGSETUP   ' FDB0017E **** ERROR - NEW DATASET NAME KEYWORD SPX\n               ECIFIED MULTIPLE TIMES.  COMMAND NOT EXECUTED.'\n*\nERRMSG18 MSGSETUP   ' FDB0018E **** ERROR - '  AVAILIABLE MESSAGE\n*\nERRMSG19 MSGSETUP   ' FDB0019E **** ERROR - INVALID NEW DATASET NAME SPX\n               ECIFIED FOR RENAME COMMAND.  COMMAND NOT EXECUTED.'\nERRMSG20 MSGSETUP   ' FDB0020E **** ERROR - UNKNOWN KEYWORD DETECTED ONX\n                COMMAND CARD.  COMMAND NOT EXECUTED.'\nERRMSG21 MSGSETUP   ' FDB0021E **** ERROR - INVALID RECORD FORMAT SPECIX\n               FIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG22 MSGSETUP   ' FDB0022E **** ERROR - INVALID DATA SET ORGANIZATIX\n               ON SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG23 MSGSETUP   ' FDB0023E **** ERROR - INVALID KEY LENGTH SPECIFIEX\n               D.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG24 MSGSETUP   ' FDB0024E **** ERROR - INVALID RELATIVE KEY POSITIX\n               ON SPECIFIED.  ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG25 MSGSETUP   ' FDB0025E **** ERROR - UNEXPECTED END-OF-FILE OCCUX\n               RRED DURING CONTINUATION CARD PROCESSING.'\nERRMSG26 MSGSETUP   ' FDB0026E      LAST COMMAND WAS NOT EXECUTED.'\nERRMSG27 MSGSETUP   '0FDB0027E **** ERROR - INVALID EXECUTION PARAMETERX\n                SPECIFIED.  \"TEST\" IS THE ONLY VALID PARM.  RUN ABORTEDX\n                .'\nMSG28    MSGSETUP   ' FDB0028I **** NOTE:  TEST RUN ONLY.  DSCB WILL NOX\n               T BE REWRITTEN TO VTOC ON VOLUME.'\nERRMSG29 MSGSETUP   ' FDB0029E **** ERROR - VOLUME SERIAL REQUESTED NOTX\n                REFERENCED IN A JCL STATEMENT.  COMMAND NOT EXECUTED.'\nERRMSG30 MSGSETUP   ' FDB0030I **** NOTE:  NO MODIFICATIONS WERE MADE TX\n               O THE DSCB FOR THIS DATASET.  DSCB NOT REWRITTEN.'\nERRMSG31 MSGSETUP   ' FDB0031D **** DISASTER - OPEN FAILED FOR VTOC OF X\n               VOLUME SPECIFIED.  POSSIBLE DISASTEROUS ERROR.  RUN ABORX\n               ED.'\nMSG32    MSGSETUP   ' FDB0032I **** COMMAND EXECUTED SUCCESSFULLY.'\nMSG33    MSGSETUP   ' FDB0033I **** REPLY END TO TERMINATE FIXDSCB.'\nERRMSG34 MSGSETUP   ' FDB0034E **** ERROR - INVALID OPTCODE SPECIFIED. X\n                ENTIRE NAME SUBCOMMAND SET IGNORED.'\nERRMSG35 MSGSETUP   ' FDB0035D **** DISASTER - XDAP WRITE FAILED DURINGX\n                DUMMY RENAME FOR SCRATCH REQUEST.  RUN ABORTED.'\nERRMSG36 MSGSETUP   ' FDB0036D **** DATASET SPECIFIED HAS BEEN LEFT RENX\n               AMED TO \"FIXDSCB.SCRATCH.DATASET\".  RUN ABORTED.'\nERRMSG37 MSGSETUP   ' FDB0037E **** ERROR - OPER STATUS REQUIRED TO USEX\n                FIXDSCB UNDER TSO.  RUN TERMINATED.'\nERRMSG38 MSGSETUP   ' FDB0038E **** ERROR - AT LEAST ONE KEYWORD MUST OX\n               CCUR ON THE COMMAND CARD.  COMMAND IGNORED.'\nERRMSG39 MSGSETUP   ' FDB0039E **** ERROR - VOLUME SPECIFIED NOT REFEREX\n               NCED IN A DD CARD AND TSO DAIR FAILED.  COMMAND NOT EXECX\n               UTED.'\nERRMSG40 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG41 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG42 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG43 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG44 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG45 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG46 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG47 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG48 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG49 MSGSETUP   ' '           DUMMY MESSAGE\nERRMSG50 MSGSETUP   ' '           DUMMY MESSAGE\n         PRINT GEN\n         SPACE 3\n         DROP RA,RB,RC\n         DROP R9\n         TITLE 'FIXDMSGR - SYSPRINT/WTO/TPUT MESSAGE INTERFACE'\nFIXDMSGR CSECT\n*\n*        FUNCTION: TO BUILD THE PROPER CONTROL BLOCKS AND TO USE\n*                  THE PUT OR WTO I/O ROUTINES TO PRINT A MESSAGE.\n*\n*        INPUT   : REG. 1 CONTAINS THE ADDRESS OF THE MESSAGE\n*                  PARAMETER LIST\n*                  OFFSET LENGTH DESCRIPTION\n*                  +0     4      MESSAGE TABLE ADDRESS\n*                  +4     4      DCB ADDRESS\n*                  +8     4      ADDRESS OF ANY SPECIAL MESSAGE\n*                  +12    2      MESSAGE NUMBER\n*                  +14    1      I/O FLAG (SYSPRINT, WTO, OR TSO)\n*                  +15    1      CONSOLE ID (FOR WTO)\n*\n*                MESSAGE TABLE FORMAT:\n*                  A LIST OF FULL-WORDS CONTAINING THE ADDRESS OF\n*                  THE MESSAGE BUFFERS.\n*\n*                SPECIAL MESSAGES:\n*                  SPECIAL MESSAGES ARE MESSAGES WHICH HAVE BEEN\n*                  MODIFIED AND DO NOT EXIST IN THE NORMAL MESSAGE\n*                  TABLE.  IF THE SPECIAL MESSAGE POINTER IS NON-\n*                  ZERO THEN THAT MESSAGE IS USED INSTEAD OF LOOKING\n*                  UP A MESSAGE IN THE TABLE.  SPECIAL MESSAGES MUST\n*                  BE CONSTRUCTED IN THE FORM OF A VALID WTO BUFFER.\n*                  EXAMPLE:\n*                     SPMSG   DC   AL2(LENGTH OF TEXT + 4)\n*                             DC   X'4000'       WTO FLAGS\n*                             DC   C'TEXT'\n*\n         EJECT\n*\n*        INITIALIZATION\n*\n         SAVE  (14,12)            SAVE CALLER'S REGS.\n         LR    RC,RF\n         USING FIXDMSGR,RC        ADDRESS CSECT\n         LR    R2,R1              PICK UP MESSAGE PARAM. LIST ADDR.\n         USING MPLDSECT,R2        ADDRESS PARM LIST\n         GETMAIN R,LV=LWASIZE,SP=LWASP OBTAIN LOCAL WORK AREA\n         XC    0(LWASIZE,R1),0(R1)\n         ST    RD,4(,R1)          CHAIN\n         ST    R1,8(,RD)            SAVE\n         LR    RD,R1                   AREAS\n         USING LWAMAP,RD          ADDRESS WORK AREA\n*        INITIALIZE LOCAL WORK AREA\n         SPACE 1\n         LA    RB,0               PRESET RC TO ZERO\n         L     R3,MPLSPADD        PICK UP ADDRESS OF POSSIBLE SP MSG\n         LTR   R3,R3              ANY SPECIFIED?\n         BNZ   DOSPMSG            BRANCH IF SO\n         L     R5,MPLMTTD         PICK UP MESSAGE TABLE ADDR.\n         LH    R4,MPLNUMD         PICK UP MESSAGE NUMBER\n         LTR   R4,R4              MESSAGE NUM SPECIFIED?\n         BZ    ERRORXIT           BRANCH IF NOT\n         BCTR  R4,0\n         SLL   R4,2               COMPUTE TABLE INDEX\n         L     R3,0(R4,R5)        PICK UP MESSAGE BUFFER ADDR.\nDOSPMSG  DS    0H\n         LH    R1,0(R3)           PICK UP LINE LENGTH\n         LTR   R1,R1              LENGTH 0?\n         BE    NOCLOSE            THEN GET OUT.  NO MESSAGE TO PRINT\n         XC    MPLSPADD,MPLSPADD  ZERO OUT SPECIAL MESSAGE POINTER\n         TM    MPLIOFD,CONSOLE    ARE WE A STARTED TASK\n         BO    DOWTOIO            USE WTO TYPE I/O IF SO\n         TM    MPLIOFD,TSOSESS    ARE WE A TSO SESSION\n         BO    DOTSOIO            USE TPUT TYPE I/O IF SO\n         L     R6,MPLDCBD         PICK UP DCB ADDRESS\n         USING IHADCB,R6          ADDRESS DCB\n         TM    DCBOFLGS,DCBOFOPN  IS DCB OPEN\n         BO    DCBOPEN            BRANCH IF SO\n         OI    LWAFLAG,OPENHERE   FLAG AS OPENED HERE\n         OPEN  ((6),OUTPUT)       OPEN IT UP\n         TM    DCBOFLGS,DCBOFOPN  DID IT WORK\n         BZ    ERROROPN           BRANCH IF NOT\nDCBOPEN  DS    0H\n         DROP  R6\n         SPACE 1\nPUTOUT   DS    0H\n         MVI   LWALINE,BLANK      BLANK OUT LINE BUFFER\n         MVC   LWALINE+1(132),LWALINE\n         LH    R1,0(R3)           PICK UP LINE LENGTH\n         S     R1,FIVE            DROP FOR EXECUTED INST AND FOR\n*                                 WTO HEADDER OMISSION\n         EX    R1,LINEMOVE        MOVE TO BUFFER\n         PUT   (6),LWALINE\n         SPACE 1\nEXITROUT DS    0H\n         TM    LWAFLAG,OPENHERE\n         BNO   NOCLOSE\n         CLOSE ((6))              WE OPENED IT SO WE CLOSE IT\n         B     NOCLOSE\n         EJECT\n*\n*        DO WTO TO STARTING CONSOLE\n*\n         SPACE 3\nDOWTOIO  DS    0H\n         IC    R0,MPLCOND         PICK UP CONSOLE ID\n         LR    R1,R3              POINTER TO WTO MESSAGE AREA IN LIST\n         WTO   MF=(E,(1))         EXECUTE\n         B     NOCLOSE\n         EJECT\n*\n*        DO TPUT TO TSO SESSION\n*\n         SPACE 3\nDOTSOIO  DS    0H\n         LH    R0,0(R3)           PICK UP MESSAGE LENGTH\n         S     R0,MPLFOUR         DROP BY FOUR (COMPENSATE FOR HEADER)\n         LA    R1,4(R3)           PICK UP MESSAGE TEXT ADDRESS\n         O     R1,TPUTFLAG        SET IN FLAGS\n         LA    RF,0               SET UID POINTER TO ZERO\n         TPUT  (1),(0),R          EXECUTE TPUT\n         B     NOCLOSE\n         EJECT\n*\n*        DI-INITIALIZE AND EXIT\n*\n         SPACE 3\nNOCLOSE  DS    0H\n         XC    LWAFLAG,LWAFLAG    ZERO OUT THE FLAGS\n         XC    MPLNUMD,MPLNUMD    ZERO MSG NUMBER\n         LR    R1,RD              LOAD PARAMETER REG. 1\n         L     RD,4(,RD)          RESTORE CALLER'S SAVE REG.\n         FREEMAIN R,LV=LWASIZE,SP=LWASP,A=(1) FREE LOCAL WORK AREA\n         LR    RF,RB              LOAD RETURN CODE\n         RETURN (14,12),RC=(15)   RETURN TO CALLER\nERRORXIT DS    0H\n         LA    RB,20              INDICATE INVALID PARAMETER LIST\n         B     NOCLOSE\nERROROPN DS    0H\n         LA    RB,24              INDICATE OPEN FAILURE\n         B     NOCLOSE\n         EJECT\n*\n*        LOCAL CONSTANTS AND EXECUTED INSTRUCTIONS\n*\n         SPACE 1\nTPUTFLAG DC    F'0'               TPUT FLAGS\nMPLFOUR  DC    F'4'\nFIVE     DC    F'5'\nLINEMOVE MVC   LWALINE(0),4(R3)\n         SPACE 3\n*\n*        LOCAL WORK AREA MAPPING\n*\n         SPACE 1\nLWAMAP   DSECT\n         DS    18F                REG. SAVE AREA\nLWALINE  DS    CL133\nLWAFLAG  DS    X\nOPENHERE EQU   X'80'              DCB SUPPLIED OPENED LOCALLY\nLWASIZE  EQU   *-LWAMAP\nLWASP    EQU   1\n         SPACE 3\n*\n*        TSO COMMAND BUFFER MAPPING DSECT (CBUFF)\n*\n         SPACE 1\nCMDBUFR  DSECT\nCMDBLEN  DS    H\nCMDBOFF  DS    H\nCMDBTEXT DS    C\n         SPACE 3\n*\n*        MESSAGE PARAMETER LIST MAPPING DSECT (MPL)\n*\n         SPACE 1\nMPLDSECT DSECT\nMPLMTTD  DS    A\nMPLDCBD  DS    A\nMPLSPADD DS    A\nMPLNUMD  DS    H\nMPLIOFD  DS    C\nMPLCOND  DS    C\n         EJECT\n*\n*        FORMAT 1 DSCB MAPPING DSECT\n*\n         SPACE 3\nDSCB     DSECT\n         IECSDSL1 1\n         EJECT\n*\n*        EXTERNAL DATA AREA MAPPING DSECTS\n*\n         SPACE 3\n         PRINT NOGEN\nJFCBDSCT DSECT\n         IEFJFCBN\nJFCBMOD  EQU   X'80'\n         SPACE 1\n         DCBD DSORG=XE,DEVD=DA\n         SPACE 1\n         IEFTIOT1\n         SPACE 1\n         IEFUCBOB\n         SPACE 1\n         IHAPSA\n         SPACE 1\n         IEECHAIN\n         SPACE 1\n         IKJDAPL\n         SPACE 1\n         IKJPSCB\n         SPACE 1\n         IKJCPPL\n         SPACE 1\n         IHAASCB\n         SPACE 1\n         CVT DSECT=YES,PREFIX=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GENPARM": {"ttr": 10246, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00@\\x00\\x99\\x04\\x1f\\x01\\x11\\x08/\\x11#\\x00R\\x00Q\\x00R\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-10T00:00:00", "modifydate": "2011-03-23T11:23:40", "lines": 82, "newlines": 81, "modlines": 82, "user": "KBASS"}, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*  PURPOSE:    COPY PARM='..' TO //PARM   DD   DATASET               *\n*                                                                    *\n*  ATTR:       RENT REUSE AMODE31 RMODE24                            *\n*                                                                    *\n*--------------------------------------------------------------------*\nGENPARM  AMODE 31\nGENPARM  RMODE 24\nGENPARM  CSECT\n         SAVE  (14,12),T,MCLANE_&SYSDATE._&SYSTIME.\n         LR    R12,R15\n         USING GENPARM,R12\n         LR    R11,R1              SAVE PARM ADDR\n         GETMAIN R,LV=WLEN\n         XC    0(WLENX,R1),0(R1)   ZERO WORK AREA\n*\n         ST    R1,8(,R13)           SAVE\n         ST    R13,4(,R1)            AREAS\n         LR    R13,R1              TOGETHER\n         USING WORK,R13\n*--------------------------------------------------------------------*\n*              INITIALIZE REENTRANT AREAS                            *\n*--------------------------------------------------------------------*\n         MVC   WOPEN,OPEN          MODEL OPEN\n         MVC   WDCB,PARMDCB        MODEL DCB\n*\n         OPEN  (WDCB,(OUTPUT)),MF=(E,WOPEN)\n         TM    WDCB+X'30',X'10'    DID IT OPEN\n         BZ    ABEND1               NO\n         L     R11,0(,R11)         GET PARM ADDR\n         LTR   R11,R11             IS IT ZERO\n         BZ    ABEND2               YES, ABEND\n         LH    R10,0(,R11)         GET LENGTH\n         LTR   R10,R10             IS IT <= 0\n         BNP   ABEND2               YES, ABEND\n         C     R10,=F'80'          IS PARM > 80\n         BNH   PARMOK               NO\n         L     R10,=F'80'           YES, SET TO 80\nPARMOK   DS    0H\n         BCTR  R10,0               -1 FOR EXECUTE\n         MVC   WDATA,BLANKS        CLEAR FOR MOVE\n         EX    R10,MVCPARM         MOVE IN DATA\n         PUT   WDCB,WDATA          PUT IT OUT\n         CLOSE (WDCB),MF=(E,WOPEN) CLOSE UP AND GO HOME\n         SPACE 1\n         LR    R1,R13\n         L     R13,4(,R13)         PREV SAVE\n         FREEMAIN R,LV=WLEN,A=(1)\n         SPACE 1\n         RETURN (14,12),RC=0       BYE\n         SPACE 1\nMVCPARM  MVC   WDATA(0),2(R11)\n         SPACE 1\nABEND1   DS    0H\n         WTO   'GENPARM1 PARM DDNAME OPEN ERROR',ROUTCDE=11\n         ABEND 1\nABEND2   DS    0H\n         WTO   'GENPARM2 PARM IS MISSING',ROUTCDE=11\n         ABEND 2\n*--------------------------------------------------------------------*\n*              DATA                                                  *\n*--------------------------------------------------------------------*\n         LTORG ,\nBLANKS   DC    CL256' '\nOPEN     OPEN  (0,(OUTPUT)),MF=L\nPARMDCB  DCB   DDNAME=PARM,DSORG=PS,DEVD=DA,MACRF=PM,                  X\n               RECFM=FB\nDCBLEN   EQU   *-PARMDCB\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DS    9D\nWDCB     DS    CL(DCBLEN),0F\nWOPEN    DS    F\nWLENX    EQU   *-WORK\nWDATA    DS    CL256' '\n         DS    0D\nWLEN     EQU   *-WORK\n         YREGS ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGC0024B": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x007\\x00\\x88\\x03\\x9f\\x01\\x11\\x08O\\x01\\x02\\x00=\\x00*\\x00\"\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1988-02-08T00:00:00", "modifydate": "2011-03-25T01:02:37", "lines": 61, "newlines": 42, "modlines": 34, "user": "SBGOLOB"}, "text": "         TITLE 'SUPERVISOR CALL 242 (ACQUIRE/RELINQUISH AUTHORIZATION)'\nIGC0024B CSECT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n* INPUT PARAMTERS                                                     *\n*                                                                     *\n* R1 - MUST CONTAIN 'AUTH' TO TURN AUTHORIZATION ON                   *\n* R1 - MUST CONTAIN 'NONE' TO TURN AUTHORIZATION OFF                  *\n*                                                                     *\n*      TO CALL THE SVC --                                             *\n*        L     R1,=C'AUTH'                                            *\n*        L     R1,=C'NONE'       FOLLOWED BY                          *\n*        SVC   242                                                    *\n*                                                                     *\n*    YOU CAN PUT EXTRA SECURITY IN HERE AS YOU WISH........           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR8       EQU   8\nR12      EQU   12\nR14      EQU   14\n         SPACE 2\n         BALR  R12,0              LOAD R12\n         USING *,R12               & ESTABLISH AS BASE.\n         B     LOADJSCB\n         DC    C'IGC0024B'\n         DC    C' '\n         DC    C'&SYSDATE'\n         DC    C' '\n         DC    C'&SYSTIME'\nFF       DC    X'FFFFFFFF'        FOR FLIPPING BITS.\n         DC    C' '\nLOADJSCB DS    0H\n         L     R2,180(,R4)        LOAD R2 WITH ADDRESS OF JSCB.\n         L     R8,FF              PREPARE FOR BIT FLIPPING.\n         XR    R1,R8              FLIP BITS.\n         C     R1,CODEON          WAS CODE PASSED TO TURN ON?\n         BE    AUTHON             YES. DO AUTHORIZATION.\n         C     R1,CODEOFF         WAS CODE PASSED TO TURN OFF?\n         BE    AUTHOFF            YES. TURN OFF AUTHORIZATION.\n         B     EXIT               NEITHER. NO ACTION.\nAUTHON   DS    0H\n         OI    236(R2),X'01'      SET AUTHORIZATION BIT.\n         B     EXIT               GO EXIT.\n         SPACE 1\nAUTHOFF  DS    0H\n         NI    236(R2),X'FE'      RESET AUTHORIZATION BIT.\n         SPACE 1\nEXIT     DS    0H\n         BR    R14                -EXIT.\n         SPACE 1\nCODEON   DC    X'3E1B1C37'        AUTH XORED\nCODEOFF  DC    X'2A292A3A'        NONE XORED\n         SPACE 1\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KMBAPFBD": {"ttr": 10251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x17\\x17o\\x01\\x17\\x17o\\x13X\\x00\\xf8\\x00\\xf8\\x00\\x00\\xd6\\xd3\\xc4\\xc5\\xd9@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-06-25T00:00:00", "modifydate": "2017-06-25T13:58:37", "lines": 248, "newlines": 248, "modlines": 0, "user": "OLDER"}, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*              THIS PROGRAM REBUILDS THE APFLIST BY READING          *\n*              //APFLIST   DD  DISP=SHR,DSN=SYS1.PARMLIB(IEAAPF**)   *\n*                                                                    *\n*              THIS IS USED ONLY WHEN SOMEBODY CLOBBERS THE APFLIST  *\n*              THIS ONLY WORKS WITH STATIC APF LIST                  *\n*                                   ------ --- ----                  *\n*        NON-REENTRANT                                               *\n*        AMODE=31, RMODE=24 (FOR THOSE SYSTEMS WITH MVS XA)          *\n*                                                                    *\n*        R7 = NEW SQA APF LIST ADDRESS                               *\n*        R8 = APF TOTAL LENGTH (TO GETMAIN)                          *\n*        R9 = APF INTERNAL TABLE                                     *\n*        R10= APF NUMBER OF ENTIES                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nKMBAPFBD CSECT\nKMBAPFBD AMODE 31\nKMBAPFBD RMODE 24\n         LR    R12,R15\n         USING KMBAPFBD,R12\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         LA    R13,SAVE+8\n         OPEN  (APFLIST,(INPUT))\n         TM    APFLIST+X'30',X'10' DID IT OPEN\n         BZ    APFERR01             NO, ERROR\n         XC    APFDATA(256),APFDATA ZERO OUT FIRST 256 BYTES\n         LA    R9,APFDATA\n         SPACE 3\n         USING APFDSECT,R9\n         L     R1,X'10'\n         USING CVT,R1\n         ICM   R15,15,X'30'(R1)    CVTSYSAD\n         BZ    SETUP800\n         MVC   VOLIPL,X'1C'(R15)   MOVE IN SYSRES VOLSER\n         DROP  R1\nSETUP800 DS    0H\n         LA    R10,0               # OF ENTRIES\n         LA    R8,2                TOTAL LENGTH\nREAD     DS    0H\n*--------------------------------------------------------------------*\n*              PROCESS SPECIAL APF TABLE                             *\n*--------------------------------------------------------------------*\n         C     R10,=A(APFTBL#-1)   END OF TABLE\n         BH    READ0050             YES, TO APFLIST\n         LA    R1,APFTBL            NO, GET TABLE\n         LR    R0,R10              ENTRIES\n         MH    R0,=H'80'           TIMES ENTRYLENGTH\n         AR    R1,R0               ADD TO APFTBL ADDR\n         MVC   44(6,R1),VOLIPL     MOVE IN IPL VOLSER\n         B     READ0060\nREAD0050 DS    0H\n*--------------------------------------------------------------------*\n*              PROCESS APFLIST                                       *\n*--------------------------------------------------------------------*\n         GET   APFLIST\nREAD0060 DS    0H\n         ST    R1,CARDADDR\n         LR    R2,R1\n         LA    R0,71(,R1)          COLUMN 72\n         ST    R0,CARDEND          SAVE IT\n         LA    R10,1(,R10)          ENTRY NUMBER\n         LA    R9,APFXLEN(,R9)     POINT AT NEXT TABLE ENTRY\n         MVI   APFLEN,0\nREAD0100 DS    0H                  GET DSNAME\n         MVC   APFDSN,BLANKS\n         L     R0,CARDEND          PASS TERM ADDR\n         LR    R1,R2               PASS SCAN START ADDR\n         BAL   R14,SCAN\n         LTR   R15,R15\n         BNZ   APFERR02            BAD DSN\n         LR    R4,R0               LENGTH\n         LR    R1,R1               DSNAME ADDR\n         LA    R2,0(R1,R4)         POINT PASSED DSN\n         BCTR  R4,0\n         EX    R4,MOVEDSN\n         LA    R4,1+6(,R4)         DSNLEN+VOLLEN\n         STC   R4,APFLEN\n         LA    R8,1(R4,R8)         ADD TO TOTAL LENGTH\n         SPACE 1\nREAD0200 DS    0H                  SCAN FOR VOLSER\n         MVC   APFVOL,BLANKS\n         L     R0,CARDEND          PASS TERM ADDR\n         LR    R1,R2               PASS SCAN START ADDR\n         BAL   R14,SCAN\n         LTR   R15,R15\n         BNZ   APFERR03            BAD VOLSER\n         LR    R4,R0               LENGTH\n         LR    R1,R1               VOLSER ADDR\n         BCTR  R4,0                -1\n         EX    R4,MOVEVOL\n         SPACE 3\n         B     READ\nMOVEDSN  MVC   APFDSN(*-*),0(R1)\nMOVEVOL  MVC   APFVOL(*-*),0(R1)\n*--------------------------------------------------------------------*\n*                                                                    *\n*              BUILD TABLE IN SQA                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nBUILD    DS    0H\n         LA    R1,=C'AUTH'\n         SVC   245\n         MODESET KEY=ZERO,MODE=SUP\n         GETMAIN RU,SP=245,LV=(R8)\n         LR    R7,R1               COPY ADDR\n         STH   R10,0(,R1)          SAVE # OF APF ENTRIES\n         LA    R1,2(,R1)           POINT PASSED # OF ENTRIES\n         LA    R9,APFDATA\n         B     BLD0200\nBLD0100  DS    0H\n         LA    R9,APFXLEN(,R9)     NEXT ENTRY IN TABLE\n         CLI   0(R9),0             IF LENGHT = 0 THEN DONE.\n         BZ    BLD0300              YEP\nBLD0200  DS    0H\n         SR    R2,R2\n         IC    R2,APFLEN           APFLEN-1\nBLDMVC   MVC   0(*-*,R1),APFLEN    MOVE ENTRY (LEN,DSN,VOL)\n         EX    R2,BLDMVC\n         LA    R1,1(R1,R2)         INCR TO NEXT SLOT IN SQA\n         B     BLD0100\nBLD0300  DS    0H\n         SPACE 2\n         L     R1,X'10'\n         USING CVT,R1\n         L     R2,CVTAUTHL         OLD NAME\nABEND    DS    0H\n         ST    R7,CVTAUTHL         @ OF APF TABLE\n         DROP  R1\n         MODESET KEY=NZERO,MODE=PROB\n         LA    R1,=C'NONE'\n         SVC   245\n         WTO   'APFB000I *** APF TABLE REBUILT ***',                   X\n               ROUTCDE=11,DESC=2\n         ST    R2,DEC\n         UNPK  BLDWTO2+30(9),DEC(5)\n         TR    BLDWTO2+30(8),TRANS-240\n         MVI   BLDWTO2+38,C' '\nBLDWTO2  WTO   'APFB000I *** OLD ADDR=XXXXXXXX ***',                   X\n               ROUTCDE=11,DESC=2\n         ST    R7,DEC\n         UNPK  BLDWTO3+30(9),DEC(5)\n         TR    BLDWTO3+30(8),TRANS-240\n         MVI   BLDWTO3+38,C' '\nBLDWTO3  WTO   'APFB000I *** NEW ADDR=XXXXXXXX ***',                   X\n               ROUTCDE=11,DESC=2\n         $EXIT RC=0\nAPFRC08  DS    0H\n         $EXIT RC=8\n*--------------------------------------------------------------------*\n*              ERROR EXITS                                           *\n*--------------------------------------------------------------------*\nAPFERR01 DS    0H\n         WTO   'APFB001E APFLIST OPEN ERROR',                          X\n               ROUTCDE=11,DESC=2\n         B     APFRC08\nAPFERR02 DS    0H\n         WTO   'APFB002E BAD DSNAME ENTRY IN IEAAPF** ON RECORD:',     X\n               ROUTCDE=11,DESC=2\n         L     R1,CARDADDR\n         MVC   APFCARD+8(80),0(R1)\n         WTO   ,MF=(E,APFCARD)\n         B     APFRC08\nAPFERR03 DS    0H\n         WTO   'APFB003E BAD VOLSER ENTRY IN IEAAPF** ON RECORD:',     X\n               ROUTCDE=11,DESC=2\n         L     R1,CARDADDR\n         MVC   APFCARD+8(80),0(R1)\n         WTO   ,MF=(E,APFCARD)\n         B     APFRC08\nAPFCARD  WTO   '0123456789012345678901234567890123456789012345678901234X\n               5678901234567890123456789          ',                   X\n               ROUTCDE=11,DESC=2,MF=L\n         B     APFRC08\n         EJECT ,\n*--------------------------------------------------------------------*\n*              SCAN FOR DATA       BAL   R14,SCAN                    *\n*                 INPUT            R0 = SCAN ENDING ADDR             *\n*                                  R1 = SCAN ADDR                    *\n*                 OUTPUT           R0 = SCAN LENGTH                  *\n*                                  R1 = SCAN BEGINNING ADDR          *\n*--------------------------------------------------------------------*\nSCAN     DS    0H\n         LR    R15,R1              SAVE BEGINNING ADDR\n         SPACE 1\nSCAN0100 DS    0H                  SCAN FOR NONBLANK\n         CLI   0(R1),C' '          IS IT BLANK\n         BNE   SCAN0180             NO, NEXT SCAN\n         LA    R1,1(,R1)           NEXT CHAR.\n         CR    R1,R0               PASSED END\n         BH    SCANRC08             YES, ERROR\n         B     SCAN0100            LOOP\n         SPACE 1\nSCAN0180 DS    0H                  SCAN FOR BLANK OR COMMA\n         LR    R15,R1              SAVE 1ST NONBLANK ADDR\nSCAN0200 DS    0H                  SCAN FOR BLANK OR COMMA\n         SPACE 1\n         CLI   0(R1),C' '          TERMINATOR\n         BE    SCAN0280             YES\n         CLI   0(R1),C','          TERMINATOR\n         BE    SCAN0280             YES\n         LA    R1,1(,R1)           NEXT CHAR.\n         CR    R1,R0               PASSED END\n         BH    SCANRC08             YES, ERROR\n         B     SCAN0200\nSCAN0280 DS    0H\n         SPACE 1\nSCAN0300 DS    0H\n         LR    R0,R1\n         SR    R0,R15              LENGTH\n         BZ    SCANRC08             ERROR IF <= 0\n         LR    R1,R15              BEGINNING ADDR\n         LA    R15,0               PASSED PREFIX\n         BR    R14\nSCANRC08 DS    0H\n         LA    R15,8               ERROR\n         BR    R14\n         SPACE 2\nAPFTBL   DS    0H\n         DC    CL44'SYS1.LINKLIB',CL6'******',CL30' '\n         DC    CL44'SYS1.SVCLIB ',CL6'******',CL30' '\nAPFTBLND EQU   *\nAPFTBL#  EQU   (APFTBLND-APFTBL)/80\n         SPACE 2\nDEC      DC    2D'0'\nCARDADDR DC    A(0)\nCARDEND  DC    A(0)\nTRANS    DC    C'0123456789ABCDEF'\nVOLIPL   DC    CL6' '\nBLANKS   DC    CL72' '\nAPFLIST  DCB   DDNAME=APFLIST,DSORG=PS,RECFM=FB,LRECL=80,              X\n               EODAD=BUILD,MACRF=(GL)\nSAVE     DS    18F\n         LTORG ,\nAPFDATA  DS    512XL(1+44+6)'00'\n         LTORG ,\nAPFDSECT DSECT ,\nAPFLEN   DS    X\nAPFDSN   DS    CL44\nAPFVOL   DS    CL6\n         DS    0F\nAPFXLEN  EQU   *-APFDSECT\n         SPACE 3\n         CVT   DSECT=YES,LIST=NO\n         YREGS ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KMBAPFLB": {"ttr": 10499, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x02\\x00\\x97\\x19o\\x01\\x11\\tO\\x11\\x17\\x02\\xf1\\x02b\\x02\\xf1\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1997-07-15T00:00:00", "modifydate": "2011-04-04T11:17:02", "lines": 753, "newlines": 610, "modlines": 753, "user": "KBASS"}, "text": "         MACRO\n&L       AUTH  &ONOFF\n         AIF   ('&ONOFF' NE 'ON').OFF\n         LA    R1,=X'3E1B1C37'     'AUTH' XC WITH FFFFFFFF\n         XC    0(4,R1),=X'FFFFFFFF'\n         SVC   245\n         XC    0(4,R1),=X'FFFFFFFF'\n         MEXIT\n.OFF     ANOP\n         SLR   R1,R1\n         SVC   245\n         MEND\n*--------------------------------------------------------------------*\n*                                                                    *\n*              THIS PROGRAM WILL ADD A DATASET TO THE APF LIST       *\n*              THAT IS POINTED TO BY THE APFLIB DDNAME               *\n*                                                                    *\n*    //KMBAPFAU JOB (1),KBASS,NOTIFY=&SYSUID,REGION=4M,              *\n*    //         CLASS=X,MSGCLASS=X,MSGLEVEL=(1,1)                    *\n*    /*JOBPARM  T=99,L=999                                           *\n*    //*------- ----------------------------------------             *\n*    //SB1      EXEC PGM=KMBAPFLB                                    *\n*    //STEPLIB  DD  DISP=SHR,DSN=KBASS.PERM.LOAD                     *\n*    //APFLIB   DD  DISP=SHR,DSN=SYS2.BBDB2.BBLINK                   *\n*                                                                    *\n*--------------------------------------------------------------------*\n*        ADDED DYNAMIC APF SUPPORT                                   *\n*                                                                    *\n* KBASS1 04/04/2011 ADDED 'REMOVE' PARAMETER TO REMOVE AN APF LIBRARY*\n*    //SB1      EXEC PGM=KMBAPFLB,PARM='REMOVE'                      *\n*--------------------------------------------------------------------*\nKMBAPFLB AMODE 31\nKMBAPFLB RMODE 24\nKMBAPFLB CSECT\n         USING KMBAPFLB,R12\n         SAVE  (14,12),T,KMBAPFLB_&SYSDATC._&SYSTIME\n         LR    R12,R15\n         LR    R11,R1              SAVE PARM ADDRESS\n         L     R2,=A(SAVEAREA)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         USING DATAAREA,R10\n         L     R10,=A(DATAAREA)\n         AUTH  ON\n         L     R15,=A(OPEN)        OPEN APFLIB\n         BALR  R14,R15\n         LTR   R15,R15             OK\n         BNZ   ERROPEN              NO, EXIT\n*--------------------------------------------------------------------*\n*              CHECK PARM TO SEE IF IT IS 'REMOVE'                   *\n*--------------------------------------------------------------------*\n         SLR   R15,R15\n         L     R1,0(,R11)\n         ICM   R15,3,0(R1)         GET HALF WORK LENGTH\n         BZ    NOTREMOV            NO PARM\n         CH    R15,=H'6'           IS LENGTH CORRECT\n         BNE   NOTREMOV            NO\n         CLC   =C'REMOVE',2(R1)    IS IT 'REMOVE'\n         BNE   NOTREMOV            NO\n         OI    WFLAG,$REMOVE\nNOTREMOV DS    0H\n         SPACE 2\n*--------------------------------------------------------------------*\n*              FIND APF TABLE, IF DYNAMIC THEN $DYN IS SET (AND EXIT)*\n*--------------------------------------------------------------------*\n         L     R15,=A(GETAPFAD)\n         BALR  R14,R15                     STD LINKAGE\n         LTR   R15,R15\n         BNZ   BADTABLE\n         SPACE 2\n         TM    WFLAG,$DYN          DID WE FIND APF IS DYANMIC TABLE\n         BO    DYNAMIC              YES,\n         SPACE 2\n*--------------------------------------------------------------------*\n*              THIS IS THE NON-DYNAMIC APF CODE                      *\n*--------------------------------------------------------------------*\nAPFOK    L     R15,=A(SEARCH)      IS IT ALREADY THERE\n         BALR  R14,R15\n         CH    R15,H4               ALREADY THERE\n         BE    DSNNOK\n         CH    R15,H8               APF TABLE FULL\n         BE    APFFULL\n         BH    BADTABLE             BAD TABLE\n         SPACE 2\n         L     R15,=A(GETMAIN)     GET NEW STORAGE\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   GETMFAIL\n         SPACE 2\n         L     R15,=A(ASKIFOK)     ASK IT ITS OK TO ADD\n         BALR  R14,R15\n         LTR   R15,R15             OK TO ADD\n         BNZ   DENIED               NO, EXIT\n         SPACE 2\n         L     R15,=A(BUILDNEW)\n         BALR  R14,R15                     STD LINKAGE\n         SPACE 2\n         L     R15,=A(STIMER)      STIMER\n         BALR  R14,R15\n         SPACE 2\n         L     R15,=A(FREEMAIN)    FREEMAIN OLD ENTRY\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   MAINRCXX\n         SPACE 2\nAPFADDED DS    0H\n         MVC   APFL001D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL001 THE FOLLOWING DATASET SUCCESSFULLY ADDED',D), X\n               ('APFL001 TO SYSTEM APFTABLE',D),                       X\n               ('APFL001 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL001D EQU   *-2-44,44\n         XR    R15,R15\n         B     MAINRCXX\n*--------------------------------------------------------------------*\n*              APF DATASET REMOVED                              040411\n*--------------------------------------------------------------------*\nAPFREMOV DS    0H                                               040411\n         MVC   APFL002D,APFDSN                                  040411\n         XR    R0,R0               THIS MUST BE HERE            040411\n         WTO   ('APFL002 THE FOLLOWING DSN SUCCESSFULLY REMOVED',D),   X\n               ('APFL002 FROM SYSTEM APFTABLE',D),                     X\n               ('APFL002 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)                                     040411\nAPFL002D EQU   *-2-44,44                                        040411\n         XR    R15,R15                                          040411\n         B     MAINRCXX                                         040411\n         EJECT ,\n*--------------------------------------------------------------------*\n*              APFLIB OPEN FAILED                                    *\n*--------------------------------------------------------------------*\nERROPEN  DS    0H\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL230 APFLIB DD MISSING OR INCORRECT, CORRECT ',D), X\n               ('APFL230 AND RESUBMIT JOB',DE),                        X\n               ROUTCDE=(11)\n         LA    R15,16\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              MESSED UP APFTABLE                                    *\n*--------------------------------------------------------------------*\nBADTABLE DS    0H\n         MVC   APFL240D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL240 THE FOLLOWING DATA SET NOT ADDED TO',D),      X\n               ('APFL240 APFTABLE DUE TO UNKNOWN TABLE FORMAT',D),     X\n               ('APFL240 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL240D EQU   *-2-44,44\n         LA    R15,20\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              DSN ALREADY IN APFTABLE                               *\n*--------------------------------------------------------------------*\nDSNNOK   DS    0H\n         MVC   APFL250D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL250 THE FOLLOWING DATASET IS ALREADY',D),         X\n               ('APFL250 IN APFTABLE. REQUEST REJECTED',D),            X\n               ('APFL250 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL250D EQU   *-2-44,44\n         LA    R15,24\n         B     MAINRCXX\n*--------------------------------------------------------------------*\n*              GETMAIN FAILURE                                       *\n*--------------------------------------------------------------------*\nGETMFAIL MVC   APFL260D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL260 THE FOLLOWING DATASET NOT ADDED TO ',D),      X\n               ('APFL260 APFTABLE DUE TO INSUFFICENT SPACE',D),        X\n               ('APFL260 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL260D EQU   *-2-44,44\n         LA    R15,12\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              APFTABLE IS FULL                                      *\n*--------------------------------------------------------------------*\nAPFFULL  DS    0H\n         MVC   APFL270D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL270 THE FOLLOWING DATASET NOT ADDED TO ',D),      X\n               ('APFL270 APFTABLE DUE TO APF TABLE ALREADY FULL',D),   X\n               ('APFL270 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL270D EQU   *-2-44,44\n         LA    R15,24\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              OPERATOR DENIED REQUEST                               *\n*--------------------------------------------------------------------*\nDENIED   MVC   APFL280D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL280 THE FOLLOWING DATASET NOT ADDED TO ',D),      X\n               ('APFL280 APFTABLE DUE TO OPERATOR DENIAL',D),          X\n               ('APFL280 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL280D EQU   *-2-44,44\n         LA    R15,8\n         B     MAINRCXX\n*--------------------------------------------------------------------*\n*              DSN TO REMOVE NOT IN TABLE                            *\n*--------------------------------------------------------------------*\nREMDSNER DS    0H\n         MVC   APFL290D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL290 THE DATASET TO REMOVE FROM APFTABLE',D),      X\n               ('APFL290 NOT PRESENT. REQUEST REJECTED',D),            X\n               ('APFL290 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL290D EQU   *-2-44,44\n         LA    R15,24\n         B     MAINRCXX\n*--------------------------------------------------------------------*\n*              MAIN RETURN EXIT                                      *\n*--------------------------------------------------------------------*\nMAINRCXX DS    0H\n         LR    R2,R15              SAVE RC\n         AUTH  OFF                  GET UNAUTHORIZED\n*\n         TM    WFLAG,$ENQ          ENQ BEING HELD\n         BZ    MAINRCX1\n         DEQ   (ENQMAJ,ENQMIN,7,SYSTEM)\n         NI    WFLAG,255-$ENQ      TURN OFF ENQ\nMAINRCX1 DS    0H\n*\n         LR    R15,R2              RESTORE RC\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              DYNAMIC PROCESSING                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDYNAMIC  DS    0H\n         CSVAPF REQUEST=QUERY,DSNAME=APFDSN,                           X\n               VOLTYPE=ANY,VOLUME=APFVOL,                              X\n               MF=(E,WCSVAPF)\n         TM    WFLAG,$REMOVE       IS IT 'REMOVE                040411\n         BO    DYNREM00             YES                         040411\n         C     R15,=A(4)\n         BL    DSNNOK              DSN ALREADY THERE\n         BE    DYNADD\n         B     DYNERR\nDYNREM00 DS    0H                                               040411\n         C     R15,=A(4)                                        040411\n         BL    DYNREM10            DSN THERE, YES WE CAN REMOVE 040411\n         BE    REMDSNER            IF NOT THERE, WE CANNOT      040411\n         B     DYNERR                                           040411\n*--------------------------------------------------------------------*\n*              ADD THE DATASET                                       *\n*--------------------------------------------------------------------*\nDYNADD   DS    0H\n         CSVAPF REQUEST=ADD,DSNAME=APFDSN,                             X\n               VOLTYPE=ANY,VOLUME=APFVOL,                              X\n               MF=(E,WCSVAPF)\n         C     R15,=A(4)\n         BE    DSNNOK              DSN ALREADY THERE\n         BL    APFADDED\nDYNERR   DS    0H\n         MVC   APFL310D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL310 THE FOLLOW IN DATASET NOT ADDED TO ',D),      X\n               ('APFL310 APFTABLE DUE TO APF PARAM ERROR',D),          X\n               ('APFL310 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL310D EQU   *-2-44,44\n         LA    R15,24\n         B     MAINRCXX\n*--------------------------------------------------------------------*\n*              REMOVE THE DATASET                               040411\n*--------------------------------------------------------------------*\nDYNREM10 DS    0H                                               040411\n         CSVAPF REQUEST=DELETE,DSNAME=APFDSN,                          X\n               VOLTYPE=ANY,VOLUME=APFVOL,                              X\n               MF=(E,WCSVAPF)\n         C     R15,=A(4)                                        040411\n         BL    APFREMOV                                         040411\n*\n         MVC   APFL320D,APFDSN                                  040411\n         XR    R0,R0               THIS MUST BE HERE            040411\n         WTO   ('APFL320 THE FOLLOW IN DATASET WAS NOT REMOVED',D),    X\n               ('APFL320 FROM THE APFTABLE              ',D),          X\n               ('APFL320 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)                                     040411\nAPFL320D EQU   *-2-44,44                                        040411\n         LA    R15,24                                           040411\n         B     MAINRCXX                                         040411\n         LTORG ,\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              OPEN APFLIB AND GET DSNAME AND LENGTH                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nOPEN     DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         LA    R9,APFJFCB\n         OPEN  (APFLIB,(INPUT))\n         SPACE 2\n         RDJFCB (APFLIB)\n         LTR   R15,R15\n         BNZ   OPENRC04\n         SPACE 2\n         MVC   APFDSN,0(R9)        MOVE IN DSN\n         MVC   APFVOL,118(R9)      MOVE IN VOLSER\n         CLOSE (APFLIB)            CLOSE\n         SPACE 2\n         TRT   APFDSN,TRTTBL       FIND 1ST BLANK\n         BZ    OPEN0300\n         S     R1,=A(APFDSN)       MINUS @ OF APFDSN\n         STC   R1,APFDSNL          SAVE LENGTH\n         B     OPENRCXX\nOPEN0300 MVI   APFDSNL,X'2C'       SET DSN LEN = 44\n         B     OPENRCXX\nOPENRC04 CLOSE (APFLIB)                    PARM SET BRCH\n         LA    R15,4\nOPENRCXX L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nTRTTBL   DC    256X'0'\n         ORG   TRTTBL+C' '\n         DC    X'04'\n         ORG   TRTTBL+256\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              GET OLD APFTABLE ADDRESS                              *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nGETAPFAD DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         ENQ   (ENQMAJ,ENQMIN,E,7,SYSTEM)\n         OI    WFLAG,$ENQ\n         L     R11,X'10'                   CVT ADDRESS\n         MVC   APFOTBL@(4),CVTAUTHL-CVT(R11)\n         CLC   APFOTBL@,=X'7FFFF001' DYNAMIC IN EFFECT\n         BE    GAPFDYN                YES\n         CLI   APFOTBL@,X'00'\n         BE    GAPFRC00\n         LA    R15,4\n         B     GAPFRCXX\nGAPFRC00 DS    0H\n         LA    R15,0\nGAPFRCXX DS    0H\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nGAPFDYN  DS    0H\n         OI    WFLAG,$DYN\n         B     GAPFRC00\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              SCAN APFTABLE TO SEE IF DSN ALREADY THERE             *\n*                                                                    *\n*--------------------------------------------------------------------*\nSEARCH   DS    0H\n         USING *,R12\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         XR    R15,R15\n         SPACE 3\n         L     R9,APFOTBL@\n         LA    R8,2(,R9)           POINT TO 1ST ENTRY\n         XR    R6,R6\n         IC    R6,1(,R9)             255 ENTRY SUPPORT\n*        LH    R6,0(,R9)           > 255 ENTRY SUPPORT          *KMB*\n         CH    R6,H255             MAX ENTRIES\n         BH    SRCHRC08              255 ENTRY SUPPORT\n         B     SRCH0200                                         *KMB*\n         SPACE 2\n*--------------------------------------------------------------------*\n*              SCAN THRU APF TABLE                                   *\n*--------------------------------------------------------------------*\nSRCH0200 XR    R7,R7\n         IC    R7,0(,R8)           ENTRY LENGTH\n         CH    R7,=H'50'           IS IT VALID LENGTH\n         BH    SRCHRC12             NO, ERROR\n         SH    R7,H7               -L'DSNL-L'VOLSER\n         MVC   SAVEDSN(44),BLANKS\n         EX    R7,MVCDSN1\n         MVC   SAVEVOL,1(R8)       MOVE IN VOLSER\n         CLC   SAVEVOL(50),APFVOL  IS IT THE SAME\n         BE    SRCHRC04             YES,\n         LA    R8,8(R7,R8)          NO, NEXT ENTRY\n         BCT   R6,SRCH0200         LOOP\n         ST    R8,APFOTBLE         SAVE CURRENT END OF APFTBLE\n         XR    R15,R15\n         B     SRCHEXIT\n         SPACE 2\nSRCHRC12 DS    0H\n         LA    R15,12              BAD ENTRIES\n         B     SRCHEXIT\nSRCHRC08 DS    0H\n         LA    R15,8               MAX ENTRIES\n         B     SRCHEXIT\nSRCHRC04 LA    R15,4               DATASET ALREADY THERE\nSRCHEXIT L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nMVCDSN1  MVC   SAVEDSN(*-*),7(R8)\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              GETMAIN NEW APFTABLE                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nGETMAIN  DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         L     R15,=A(ADDLEN)\n         BALR  R14,R15                     STD LINKAGE\n         L     R2,NEWAPFLN\n         MODESET KEY=ZERO,MODE=SUP\n         GETMAIN RC,LV=(2),SP=245\n         ST    R1,NEWAPF@\n         STH   R15,GETMRETC\n         MODESET KEY=NZERO,MODE=PROB\n         XR    R15,R15\n         CLC   GETMRETC(2),ZERO\n         BNH   GETMRCXX\n         LA    R15,4\nGETMRCXX L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ADD NEW DSN ENTRY LENTH TO CURRENT TABLE LENGTH       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nADDLEN   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         L     R2,APFOTBLE         GET END OF TABLE\n         S     R2,APFOTBL@         MINUS BEGINNING\n         XR    R3,R3\n         IC    R3,APFDSNL          GET DSN LENGTH\n         LA    R2,7(R2,R3)         ADD LENGTH+VOLSER TO DSNLEN\n         ST    R2,NEWAPFLN         NEW ENTRY LENGTH\n         SPACE 1\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ASK IF OK TO ADD DSNAME TO APFTABLE                   *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nASKIFOK  EQU   *\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n*\n*              PUT WTOR HERE TO ASK IF OK\n*\n         XR    R0,R0\nASKRC00  XR    R15,R15\nASKRCXX  L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              BUILD NEW APFTABLE                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nBUILDNEW DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         L     R15,=A(MOVEAPF)\n         BALR  R14,R15                     STD LINKAGE\n         L     R15,=A(ADDDSN)\n         BALR  R14,R15                     STD LINKAGE\n         L     R15,=A(UPDCVT)\n         BALR  R14,R15                     STD LINKAGE\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MOVE CURRENT APFTABLE TO NEW TABLE                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nMOVEAPF  DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         L     R9,APFOTBL@         OLD TABLE ADDRESS\n         L     R2,NEWAPF@          NEW TABLE ADDRESS\n         L     R3,NEWAPFLN         NEW TABLE LENGTH\n         LR    R4,R9\n*        XR    R6,R6               THIS SEEMS\n*        IC    R6,0(,R9)             TO DO\n*        SLL   R6,3                 NOTHING\n         L     R5,APFOTBLE         OLD TABLE END\n         SR    R5,R9               MINUS BEGINNING\n         MODESET KEY=ZERO,MODE=SUP\n         SPACE 1\n         MVCL  R2,R4               MOVE CURRENT APF TO NEW\n         SPACE 1\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 2\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ADD NEW ENTRY TO NEW TABLE                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nADDDSN   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         XR    R15,R15\n         L     R9,NEWAPF@\n         L     R8,APFOTBLE         OLD TABLE END\n         S     R8,APFOTBL@         MINUS BEGINNING = OLD LENGTH\n         AR    R8,R9               POINT AT END OF NEW\n         IC    R6,APFDSNL          ADD IN\n         LA    R6,6(,R6)            NEW\n         STC   R6,APFDSNL            DSN ENTRY\n         MODESET KEY=ZERO,MODE=SUP\n         EX    R6,ADDMVC1          MOVE IN NEW DSN TO END OF TBL\n         L     R2,NEWAPFLN\n         SLR   R2,R2\n*        LH    R2,0(,R9)           > 255 ENTRY SUPPORT          *KMB*\n         LH    R2,0(,R9)             255 ENTRY SUPPORT          *KMB*\n         LA    R2,1(,R2)\n*        STH   R2,0(,R9)           > 255 ENTRY SUPPORT          *KMB*\n         STC   R2,1(,R9)             255 ENTRY SUPPORT          *KMB*\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 2\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nADDMVC1  MVC   0(0,R8),APFDSNL\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              INSERT NEW APFTABLE IN CVT                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nUPDCVT   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         MODESET KEY=ZERO,MODE=SUP\n         SPACE 2                   USE COMPARE AND SWAP\n         L     R11,X'10'           CVT ADDRESS\n         L     R1,CVTAUTHL-CVT(,R11)\n         L     R2,NEWAPF@\nUPDC0120 CS    R1,R2,CVTAUTHL-CVT(R11)\n         BC    4,UPDC0120          ITS CHANGED\n         SPACE 2\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 2\n         TM    WFLAG,$ENQ          ENQ BEING HELD\n         BZ    UPDC0140\n         DEQ   (ENQMAJ,ENQMIN,7,SYSTEM)\n         NI    WFLAG,255-$ENQ      TURN OFF ENQ\nUPDC0140 DS    0H\n         SPACE 2\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              STIMER                                                *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nSTIMER   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         STIMER REAL,DINTVL=INTVL\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              FREEMAIN OLD APFTABLE                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nFREEMAIN DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         XR    R15,R15\n         L     R2,APFOTBL@\n         L     R3,APFOTBLE\n         SR    R3,R2\n         MODESET KEY=ZERO,MODE=SUP\n         FREEMAIN RC,LV=(3),A=(2),SP=245\n         STH   R15,GETMRETC\n         MODESET KEY=NZERO,MODE=PROB\n         XR    R15,R15\n         CLC   GETMRETC(2),ZERO\n         BNH   FREERCXX\n         LA    R15,4\nFREERCXX L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DC    F'0'\n         DROP  R12\nDATAAREA EQU   *\nINTVL    DC    C'00000500'\nENQMAJ   DC    CL8'KMBAPFQ'\nENQMIN   DC    CL7'APFLIST'\nAPFOTBL@ DC    F'0'\nAPFOTBLE DC    F'0'\nNEWAPF@  DC    F'0'\nNEWAPFLN DC    F'0'\nGETMRETC DC    H'0'\nBLANKS   DC    CL44' '\nWFLAG    DC    AL1(0)\n$ENQ     EQU   X'80'               ENQ IS BEING HELD\n$DYN     EQU   X'40'               DYNAMIC IN USE\n$REMOVE  EQU   X'20'               REMOVE DSN FROM APFTABLE\nSAVETBL  DC    0XL50'00'  --+\nSAVEVOL  DC    XL6'0'       |\nSAVEDSN  DC    XL44'00'   <-+\nAPFDSNL  DC    X'00'    ---+       KEEP\nAPFVOL   DC    CL6' '      |        THESE\nAPFDSN   DC    CL44' '  <--+         TOGETHER\nAPFEXLST DC    0F'0',X'87',AL3(APFJFCB)\nAPFJFCB  DC    XL176'00'\nAPFLIB   DCB   DDNAME=APFLIB,DSORG=PO,EXLST=APFEXLST,MACRF=(R)\n         LTORG ,\nH4       DC    H'0004'\nH8       DC    H'0008'\nH7       DC    H'0007'\nH255     DC    H'0255'\nZERO     DC    F'0'\nSAVEAREA DS    (5*9)D'0'\nWCSVAPFX CSVAPF MF=(L,WCSVAPF)\n         DROP  R10\n         YREGS\n*--------------------------------------------------------------------*\n*              DSECT                                                 *\n*--------------------------------------------------------------------*\n         CVT   DSECT=YES,LIST=NO\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KMBAPFLO": {"ttr": 10757, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00D\\x00\\x97\\x19o\\x01\\x11\\x08/\\x11$\\x02\\x8a\\x02b\\x02\\x8a\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-07-15T00:00:00", "modifydate": "2011-03-23T11:24:44", "lines": 650, "newlines": 610, "modlines": 650, "user": "KBASS"}, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*              THIS PROGRAM WILL ADD A DATASET TO THE APF LIST       *\n*              THAT IS POINTED TO BY THE APFLIB DDNAME               *\n*                                                                    *\n*--------------------------------------------------------------------*\n*        ADDED DYNAMIC APF SUPPORT                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nKMBAPFLB AMODE 31\nKMBAPFLB RMODE 24\nKMBAPFLB CSECT\n         USING KMBAPFLB,R12\n         SAVE  (14,12),T,KMBAPFLB_&SYSDATC._&SYSTIME\n         LR    R12,R15\n         L     R2,=A(SAVEAREA)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         USING DATAAREA,R10\n         L     R10,=A(DATAAREA)\n         LA    R1,=C'AUTH'\n         SVC   245\n         L     R15,=A(OPEN)        OPEN APFLIB\n         BALR  R14,R15\n         LTR   R15,R15             OK\n         BNZ   ERROPEN              NO, EXIT\n         SPACE 2\n         L     R15,=A(GETAPFAD)\n         BALR  R14,R15                     STD LINKAGE\n         LTR   R15,R15\n         BNZ   BADTABLE\n         TM    WFLAG,$DYN\n         BO    DYNAMIC\n         SPACE 2\nAPFOK    L     R15,=A(SEARCH)      IS IT ALREADY THERE\n         BALR  R14,R15\n         CH    R15,H4               ALREADY THERE\n         BE    DSNNOK\n         CH    R15,H8               APF TABLE FULL\n         BE    APFFULL\n         BH    BADTABLE             BAD TABLE\n         SPACE 2\n         L     R15,=A(GETMAIN)     GET NEW STORAGE\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   GETMFAIL\n         SPACE 2\n         L     R15,=A(ASKIFOK)     ASK IT ITS OK TO ADD\n         BALR  R14,R15\n         LTR   R15,R15             OK TO ADD\n         BNZ   DENIED               NO, EXIT\n         SPACE 2\n         L     R15,=A(BUILDNEW)\n         BALR  R14,R15                     STD LINKAGE\n         SPACE 2\n         L     R15,=A(STIMER)      STIMER\n         BALR  R14,R15\n         SPACE 2\n         L     R15,=A(FREEMAIN)    FREEMAIN OLD ENTRY\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   MAINRCXX\n         SPACE 2\nAPFADDED DS    0H\n         MVC   APFL001D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL001 THE FOLLOW IN DATASET SUCCESSFULLY ADDED',D), X\n               ('APFL001 TO SYSTEM APFTABLE',D),                       X\n               ('APFL001 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL001D EQU   *-2-44,44\n         XR    R15,R15\n         B     MAINRCXX\n         EJECT ,\n*--------------------------------------------------------------------*\n*              APFLIB OPEN FAILED                                    *\n*--------------------------------------------------------------------*\nERROPEN  DS    0H\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL230 APFLIB DD MISSING OR INCORRECT, CORRECT ',D), X\n               ('APFL230 AND RESUBMIT JOB',DE),                        X\n               ROUTCDE=(11)\n         LA    R15,16\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              MESSED UP APFTABLE                                    *\n*--------------------------------------------------------------------*\nBADTABLE DS    0H\n         MVC   APFL240D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL240 THE FOLLOWING DATA SET NOT ADDED TO',D),      X\n               ('APFL240 APFTABLE DUE TO UNKNOWN TABLE FORMAT',D),     X\n               ('APFL240 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL240D EQU   *-2-44,44\n         LA    R15,20\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              DSN ALREADY IN APFTABLE                               *\n*--------------------------------------------------------------------*\nDSNNOK   DS    0H\n         MVC   APFL250D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL250 THE FOLLOW IN DATASET IS ALREADY',D),         X\n               ('APFL250 IN APFTABLE. REQUEST REJECTED',D),            X\n               ('APFL250 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL250D EQU   *-2-44,44\n         LA    R15,24\n         B     MAINRCXX\n*--------------------------------------------------------------------*\n*              GETMAIN FAILURE                                       *\n*--------------------------------------------------------------------*\nGETMFAIL MVC   APFL260D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL260 THE FOLLOWING DATASET NOT ADDED TO ',D),      X\n               ('APFL260 APFTABLE DUE TO INSUFFICENT SPACE',D),        X\n               ('APFL260 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL260D EQU   *-2-44,44\n         LA    R15,12\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              APFTABLE IS FULL                                      *\n*--------------------------------------------------------------------*\nAPFFULL  DS    0H\n         MVC   APFL270D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL270 THE FOLLOW IN DATASET NOT ADDED TO ',D),      X\n               ('APFL270 APFTABLE DUE TO APF TABLE ALREADY FULL',D),   X\n               ('APFL270 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL270D EQU   *-2-44,44\n         LA    R15,24\n         B     MAINRCXX\n         SPACE 2\n*--------------------------------------------------------------------*\n*              OPERATOR DENIED REQUEST                               *\n*--------------------------------------------------------------------*\nDENIED   MVC   APFL280D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL280 THE FOLLOWING DATASET NOT ADDED TO ',D),      X\n               ('APFL280 APFTABLE DUE TO OPERATOR DENIAL',D),          X\n               ('APFL280 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL280D EQU   *-2-44,44\n         LA    R15,8\n         B     MAINRCXX\n*--------------------------------------------------------------------*\n*              MAIN RETURN EXIT                                      *\n*--------------------------------------------------------------------*\nMAINRCXX DS    0H\n         LR    R2,R15              SAVE RC\n         LA    R1,=C'NONE'          GET\n         SVC   245                   UNAUTHORIZED\n*\n         TM    WFLAG,$ENQ          ENQ BEING HELD\n         BZ    MAINRCX1\n         DEQ   (ENQMAJ,ENQMIN,7,SYSTEM)\n         NI    WFLAG,255-$ENQ      TURN OFF ENQ\nMAINRCX1 DS    0H\n*\n         LR    R15,R2              RESTORE RC\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              DYNAMIC PROCESSING                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\nDYNAMIC  DS    0H\n         CSVAPF REQUEST=QUERY,DSNAME=APFDSN,                           X\n               VOLTYPE=ANY,VOLUME=APFVOL,                              X\n               MF=(E,WCSVAPF)\n         C     R15,=A(4)\n         BL    DSNNOK              DSN ALREADY THERE\n         BE    DYNADD\n         B     DYNERR\nDYNADD   DS    0H\n         CSVAPF REQUEST=ADD,DSNAME=APFDSN,                             X\n               VOLTYPE=ANY,VOLUME=APFVOL,                              X\n               MF=(E,WCSVAPF)\n         C     R15,=A(4)\n         BE    DSNNOK              DSN ALREADY THERE\n         BL    APFADDED\nDYNERR   DS    0H\n         MVC   APFL310D,APFDSN\n         XR    R0,R0               THIS MUST BE HERE\n         WTO   ('APFL310 THE FOLLOW IN DATASET NOT ADDED TO ',D),      X\n               ('APFL310 APFTABLE DUE TO APF PARAM ERROR',D),          X\n               ('APFL310 DSN:                                          X\n                 ',DE),                                                X\n               ROUTCDE=(11)\nAPFL310D EQU   *-2-44,44\n         LA    R15,24\n         B     MAINRCXX\n         LTORG ,\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              OPEN APFLIB AND GET DSNAME AND LENGTH                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nOPEN     DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         LA    R9,APFJFCB\n         OPEN  (APFLIB,(INPUT))\n         SPACE 2\n         RDJFCB (APFLIB)\n         LTR   R15,R15\n         BNZ   OPENRC04\n         SPACE 2\n         MVC   APFDSN,0(R9)        MOVE IN DSN\n         MVC   APFVOL,118(R9)      MOVE IN VOLSER\n         CLOSE (APFLIB)            CLOSE\n         SPACE 2\n         TRT   APFDSN,TRTTBL       FIND 1ST BLANK\n         BZ    OPEN0300\n         S     R1,=A(APFDSN)       MINUS @ OF APFDSN\n         STC   R1,APFDSNL          SAVE LENGTH\n         B     OPENRCXX\nOPEN0300 MVI   APFDSNL,X'2C'       SET DSN LEN = 44\n         B     OPENRCXX\nOPENRC04 CLOSE (APFLIB)                    PARM SET BRCH\n         LA    R15,4\nOPENRCXX L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nTRTTBL   DC    256X'0'\n         ORG   TRTTBL+C' '\n         DC    X'04'\n         ORG   TRTTBL+256\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              GET OLD APFTABLE ADDRESS                              *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nGETAPFAD DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         ENQ   (ENQMAJ,ENQMIN,E,7,SYSTEM)\n         OI    WFLAG,$ENQ\n         L     R11,X'10'                   CVT ADDRESS\n         MVC   APFOTBL@(4),CVTAUTHL-CVT(R11)\n         CLC   APFOTBL@,=X'7FFFF001' DYNAMIC IN EFFECT\n         BE    GAPFDYN                YES\n         CLI   APFOTBL@,X'00'\n         BE    GAPFRC00\n         LA    R15,4\n         B     GAPFRCXX\nGAPFRC00 DS    0H\n         LA    R15,0\nGAPFRCXX DS    0H\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nGAPFDYN  DS    0H\n         OI    WFLAG,$DYN\n         B     GAPFRC00\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              SCAN APFTABLE TO SEE IF DSN ALREADY THERE             *\n*                                                                    *\n*--------------------------------------------------------------------*\nSEARCH   DS    0H\n         USING *,R12\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         XR    R15,R15\n         SPACE 3\n         L     R9,APFOTBL@\n         LA    R8,2(,R9)           POINT TO 1ST ENTRY\n         XR    R6,R6\n*        IC    R6,1(,R9)\n         LH    R6,0(,R9)                                        *KMB*\n         CH    R6,H255             MAX ENTRIES\n         B     SRCH0200                                         *KMB*\n         B     SRCHRC08\n         SPACE 2\n*--------------------------------------------------------------------*\n*              SCAN THRU APF TABLE                                   *\n*--------------------------------------------------------------------*\nSRCH0200 XR    R7,R7\n         IC    R7,0(,R8)           ENTRY LENGTH\n         CH    R7,=H'50'           IS IT VALID LENGTH\n         BH    SRCHRC12             NO, ERROR\n         SH    R7,H7               -L'DSNL-L'VOLSER\n         MVC   SAVEDSN(44),BLANKS\n         EX    R7,MVCDSN1\n         MVC   SAVEVOL,1(R8)       MOVE IN VOLSER\n         CLC   SAVEVOL(50),APFVOL  IS IT THE SAME\n         BE    SRCHRC04             YES,\n         LA    R8,8(R7,R8)          NO, NEXT ENTRY\n         BCT   R6,SRCH0200         LOOP\n         ST    R8,APFOTBLE         SAVE CURRENT END OF APFTBLE\n         XR    R15,R15\n         B     SRCHEXIT\n         SPACE 2\nSRCHRC12 DS    0H\n         LA    R15,12              BAD ENTRIES\n         B     SRCHEXIT\nSRCHRC08 DS    0H\n         LA    R15,8               MAX ENTRIES\n         B     SRCHEXIT\nSRCHRC04 LA    R15,4               DATASET ALREADY THERE\nSRCHEXIT L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nMVCDSN1  MVC   SAVEDSN(*-*),7(R8)\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              GETMAIN NEW APFTABLE                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nGETMAIN  DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         L     R15,=A(ADDLEN)\n         BALR  R14,R15                     STD LINKAGE\n         L     R2,NEWAPFLN\n         MODESET KEY=ZERO,MODE=SUP\n         GETMAIN RC,LV=(2),SP=245\n         ST    R1,NEWAPF@\n         STH   R15,GETMRETC\n         MODESET KEY=NZERO,MODE=PROB\n         XR    R15,R15\n         CLC   GETMRETC(2),ZERO\n         BNH   GETMRCXX\n         LA    R15,4\nGETMRCXX L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ADD NEW DSN ENTRY LENTH TO CURRENT TABLE LENGTH       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nADDLEN   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         L     R2,APFOTBLE         GET END OF TABLE\n         S     R2,APFOTBL@         MINUS BEGINNING\n         XR    R3,R3\n         IC    R3,APFDSNL          GET DSN LENGTH\n         LA    R2,7(R2,R3)         ADD LENGTH+VOLSER TO DSNLEN\n         ST    R2,NEWAPFLN         NEW ENTRY LENGTH\n         SPACE 1\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ASK IF OK TO ADD DSNAME TO APFTABLE                   *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nASKIFOK  EQU   *\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n*\n*              PUT WTOR HERE TO ASK IF OK\n*\n         XR    R0,R0\nASKRC00  XR    R15,R15\nASKRCXX  L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              BUILD NEW APFTABLE                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nBUILDNEW DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         L     R15,=A(MOVEAPF)\n         BALR  R14,R15                     STD LINKAGE\n         L     R15,=A(ADDDSN)\n         BALR  R14,R15                     STD LINKAGE\n         L     R15,=A(UPDCVT)\n         BALR  R14,R15                     STD LINKAGE\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MOVE CURRENT APFTABLE TO NEW TABLE                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nMOVEAPF  DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         L     R9,APFOTBL@         OLD TABLE ADDRESS\n         L     R2,NEWAPF@          NEW TABLE ADDRESS\n         L     R3,NEWAPFLN         NEW TABLE LENGTH\n         LR    R4,R9\n*        XR    R6,R6               THIS SEEMS\n*        IC    R6,0(,R9)             TO DO\n*        SLL   R6,3                 NOTHING\n         L     R5,APFOTBLE         OLD TABLE END\n         SR    R5,R9               MINUS BEGINNING\n         MODESET KEY=ZERO,MODE=SUP\n         SPACE 1\n         MVCL  R2,R4               MOVE CURRENT APF TO NEW\n         SPACE 1\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 2\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              ADD NEW ENTRY TO NEW TABLE                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nADDDSN   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         XR    R15,R15\n         L     R9,NEWAPF@\n         L     R8,APFOTBLE         OLD TABLE END\n         S     R8,APFOTBL@         MINUS BEGINNING = OLD LENGTH\n         AR    R8,R9               POINT AT END OF NEW\n         IC    R6,APFDSNL          ADD IN\n         LA    R6,6(,R6)            NEW\n         STC   R6,APFDSNL            DSN ENTRY\n         MODESET KEY=ZERO,MODE=SUP\n         EX    R6,ADDMVC1          MOVE IN NEW DSN TO END OF TBL\n         L     R2,NEWAPFLN\n         LH    R2,0(,R9)                                        *KMB*\n         LA    R2,1(,R2)\n         STH   R2,0(,R9)                                        *KMB*\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 2\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\nADDMVC1  MVC   0(0,R8),APFDSNL\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              INSERT NEW APFTABLE IN CVT                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nUPDCVT   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         SPACE 2\n         MODESET KEY=ZERO,MODE=SUP\n         SPACE 2                   USE COMPARE AND SWAP\n         L     R11,X'10'           CVT ADDRESS\n         L     R1,CVTAUTHL-CVT(,R11)\n         L     R2,NEWAPF@\nUPDC0120 CS    R1,R2,CVTAUTHL-CVT(R11)\n         BC    4,UPDC0120          ITS CHANGED\n         SPACE 2\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE 2\n         TM    WFLAG,$ENQ          ENQ BEING HELD\n         BZ    UPDC0140\n         DEQ   (ENQMAJ,ENQMIN,7,SYSTEM)\n         NI    WFLAG,255-$ENQ      TURN OFF ENQ\nUPDC0140 DS    0H\n         SPACE 2\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n*--------------------------------------------------------------------*\n*                                                                    *\n*              STIMER                                                *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nSTIMER   DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         STIMER REAL,DINTVL=INTVL\n         XR    R15,R15\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DROP  R12\n         SPACE 3\n*--------------------------------------------------------------------*\n*                                                                    *\n*              FREEMAIN OLD APFTABLE                                 *\n*                                                                    *\n*--------------------------------------------------------------------*\n         USING *,R12\nFREEMAIN DS    0H\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         LA    R2,72(R13)\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         XR    R15,R15\n         L     R2,APFOTBL@\n         L     R3,APFOTBLE\n         SR    R3,R2\n         MODESET KEY=ZERO,MODE=SUP\n         FREEMAIN RC,LV=(3),A=(2),SP=245\n         STH   R15,GETMRETC\n         MODESET KEY=NZERO,MODE=PROB\n         XR    R15,R15\n         CLC   GETMRETC(2),ZERO\n         BNH   FREERCXX\n         LA    R15,4\nFREERCXX L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)              RESTORE REGS\n         BR    R14                         EXIT\n         DC    F'0'\n         DROP  R12\nDATAAREA EQU   *\nINTVL    DC    C'00000500'\nENQMAJ   DC    CL8'KMBAPFQ'\nENQMIN   DC    CL7'APFLIST'\nAPFOTBL@ DC    F'0'\nAPFOTBLE DC    F'0'\nNEWAPF@  DC    F'0'\nNEWAPFLN DC    F'0'\nGETMRETC DC    H'0'\nBLANKS   DC    CL44' '\nWFLAG    DC    AL1(0)\n$ENQ     EQU   X'80'               ENQ IS BEING HELD\n$DYN     EQU   X'40'               DYNAMIC IN USE\nSAVETBL  DC    0XL50'00'  --+\nSAVEVOL  DC    XL6'0'       |\nSAVEDSN  DC    XL44'00'   <-+\nAPFDSNL  DC    X'00'    ---+       KEEP\nAPFVOL   DC    CL6' '      |        THESE\nAPFDSN   DC    CL44' '  <--+         TOGETHER\nAPFEXLST DC    0F'0',X'87',AL3(APFJFCB)\nAPFJFCB  DC    XL176'00'\nAPFLIB   DCB   DDNAME=APFLIB,DSORG=PO,EXLST=APFEXLST,MACRF=(R)\n         LTORG ,\nH4       DC    H'0004'\nH8       DC    H'0008'\nH7       DC    H'0007'\nH255     DC    H'0255'\nZERO     DC    F'0'\nSAVEAREA DS    (5*9)D'0'\nWCSVAPFX CSVAPF MF=(L,WCSVAPF)\n         DROP  R10\n         YREGS\n*--------------------------------------------------------------------*\n*              DSECT                                                 *\n*--------------------------------------------------------------------*\n         CVT   DSECT=YES,LIST=NO\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LNKLIST": {"ttr": 11014, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x11\\x08\\x1f\\x01\\x11\\x08/\\x10W\\x01\\x01\\x00\\xa9\\x00&\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2011-03-22T00:00:00", "modifydate": "2011-03-23T10:57:00", "lines": 257, "newlines": 169, "modlines": 38, "user": "KBASS"}, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*              PROGRAM TO LIST LINKLIST DATASETS AND ITS VOLSER      *\n*                   OR TO LIST LPA      DATASETS AND ITS VOLSER      *\n*                                                                    *\n*        ATTRIBUTES: AMODE31 RMODE24 REENTRANT                       *\n*                                                                    *\n* WRITTEN BY:  SAM BASS                                              *\n*                                                                    *\n*        KBASS: 03/22/2011 ADDED SUPPORT FOR DYNAMIC LNKLIST DSNS    *\n*                                                                    *\n* NOTE:  IF THIS WAS LINKEDITED WITH AN OLDER RELEASE OF BINDER      *\n*        YOU WILL HAVE TO DELETE THE LPALIST ALIAS BEFORE YOU        *\n*        LINKEDIT THIS MEMBER.                                       *\n*                                                                    *\n*--------------------------------------------------------------------*\nLNKLIST  AMODE 31\nLNKLIST  RMODE 24\nLNKLIST  CSECT\n         SAVE  (14,12),T,'LNK/LPA-LIST_&SYSDATC._&SYSTIME.'\n         LA    R1,1\n         B     START-LNKLIST(R15)\n         ENTRY LPALIST\nLPALIST  DS    0H\n         STM   R14,R12,12(R13)\n         LA    R1,2\n         B     START-LPALIST(R15)\nSTART    DS    0H\n         BALR  R12,0               SET BASE REG\n         LA    R0,*-LNKLIST         AND RESET IT\n         SLR   R12,R0                TO BEGINNING OF PROGRAM\n         USING LNKLIST,R12\n         LR    R11,R1              SAVE FUNCTION\n*\n         L     R0,=A(WORKLEN)\n         STORAGE OBTAIN,LENGTH=(0),LOC=BELOW,SP=1\n         ST    R1,8(,R13)          STORE OUR SAVE AREA\n         LR    R2,R1\n         LR    R3,R0               ZERO\n         SLR   R15,R15               AREA\n         MVCL  R2,R14              ...\n*\n         ST    R13,4(,R1)          SAVE THEIR'S IN OUR'S\n         LR    R13,R1\n         USING WORK,R13\n         MVC   WREC,BLANKS\n*\n         STC   R11,WFUNCT\n         CLI   WFUNCT,1            IS IT LNKLIST\n         BE    LINK                 YES\n         CLI   WFUNCT,2            IS IT LPALIST\n         BE    LPA                  YES\n         ABEND 1                    NO, UNSUPPORTED ENTRY\n*--------------------------------------------------------------------*\n*              LINKLIST                                              *\n*--------------------------------------------------------------------*\nLINK     DS    0H\n         L     R2,X'10'            CVT\n         USING CVT,R2\n         L     R3,CVTLLTA          LNKLIST TABLE POINTER\n         LA    R0,30\n         LA    R1,=CL30'*** LINK LIST DATA SETS ***'\n         BAL   R9,PUTMSG\n         TM    CVTOSLV1,CVTDYNL    DYNAMIC LNKLIST?\n         BO    LINKDYN\n         DROP  R2\n         CLC   =C'LLT',0(R3)       IS IT REALLY LLT\n         BE    LLTOK\n         LA    R0,31\n         LA    R1,=CL31'*** LINK LIST TABLE INVALID ***'\n         BAL   R9,PUTMSG\n         B     RETURN\n*--------------------------------------------------------------------*\n* 03/11/2011   DYNAMIC LINKLIST SUPPORT                              *\n*--------------------------------------------------------------------*\nLINKDYN  DS    0H\n         ZAP   WDSNUM,=P'0'        ZERO COUNTER\n         CSVDYNL REQUEST=LIST,ANSAREA=WCSVWORK,ANSLEN==A(WCSVWRKL),    X\n               MF=(E,WCSVLNK)\n         LTR   R15,R15\n         BNZ   DYNERR\n*\n         LA    R4,WCSVWORK\n         USING DLAAHDR,R4          LINKLIST SET\n         L     R5,DLAAH#LS         NUMBER OF DLAALS ENTRIES\n         L     R6,DLAAHFIRSTLSADDR ADDRESS TO FIRST DLAA\n         DROP  R4\n*\n         USING DLAALS,R6\nLNKDY100 DS    0H\n         TM    DLAALSFLAGS,DLAALSWASCURRENT IS THIS CURRENT LNKLIST?\n         BO    LNKDY190\n         L     R6,DLAALSNEXTADDR\n         BCT   R5,LNKDY100\n         B     RETURN              NONE FOUND\nLNKDY190 DS    0H                  GET LNKLIST DATASETS\n         MVC   WLNKNAM,DLAALSNAME\n         MVC   WREC+$DSN(8),=CL8'DYNAMIC'\n         MVC   WREC+$DSN+9(16),WLNKNAM\n         LA    R0,30\n         LA    R1,WREC\n         BAL   R9,PUTMSG\n         LH    R5,DLAALS#DS        NUMBER OF DLAADS ENTRIES\n         L     R6,DLAALSFIRSTDSADDR FIRST DLAADS FOR THIS DLAALS\n         DROP  R6\n*\nLNKDY210 DS    0H\n         USING DLAADS,R6\n         MVC   WDSNVOL,DLAADSVOLID\n         MVC   WDSNAME,BLANKS\n         LH    R2,DLAADSNAMELEN    DS LENGTH\n         S     R2,=F'1'\n         MVC   WDSNAME(0),DLAADSNAME\n         EX    R2,*-6               FOR REAL\n         MVC   WREC+$VOL(06),WDSNVOL\n         MVC   WREC+$DSN(44),WDSNAME\n         TM    DLAADSFLAGS,DLAADSAPF IS IT APF?\n         BZ    LNKDY220            NO\n         MVC   WREC+$APF(3),=C'APF'\nLNKDY220 DS    0H\n         TM    DLAADSFLAGS,DLAADSSMSMANAGED IS IT SMS\n         BZ    LNKDY230            NO\n         MVC   WREC+$SMS(3),=C'SMS'\nLNKDY230 DS    0H\n\n         MVC   WREC+$OFF(4),=X'F0212020'\n         ED    WREC+$OFF(4),WDSNUM\n         MVI   WREC+$OFF,C'+'\n         LA    R0,70\n         LA    R1,WREC\n         BAL   R9,PUTMSG\n         L     R6,DLAADSNEXTADDR\n         AP    WDSNUM,=P'1'        ADD 1 TO DSN COUNT\n         BCT   R5,LNKDY210\n         B     RETURN\n         DROP  R6\n*--------------------------------------------------------------------*\n*              LPALIST                                               *\n*--------------------------------------------------------------------*\nLPA      DS    0H\n         L     R2,X'10'            CVT\n         USING CVT,R2\n         L     R2,CVTSMEXT\n         DROP  R2\n         USING CVTVSTGX,R2\n         L     R3,CVTEPLPS         LPALIST TABLE POINTER\n         DROP  R2\n         LA    R0,30\n         LA    R1,=CL30'*** LIST OF LPA DATASETS ***'\n         BAL   R9,PUTMSG\n         CLC   =C'LPAT',0(R3)      IS IT REALLY LPA TABLE\n         BE    LLTOK\n         LA    R0,30\n         LA    R1,=CL30'*** LPA LIST TABLE INVALID ***'\n         BAL   R9,PUTMSG\n         B     RETURN\nLLTOK    DS    0H\n         SPACE 1\n         ZAP   WDSNUM,=P'0'        ZERO COUNTER\n         LA    R3,4(,R3)           BYPASS 'LLT '\n         L     R4,0(,R3)           GET NUMBER OF ENTRIES\n         LA    R5,4(,R3)           POINT AT ENTRIES\n*--------------------------------------------------------------------*\n*              LOOP THRU LLT TO GET EACH DATASET                     *\n*--------------------------------------------------------------------*\nLOOP     DS    0H\n         SLR   R2,R2\n         IC    R2,0(,R5)           ENTRY LENGTH\n         S     R2,=F'1'\n         MVC   WREC+$DSN(0),1(R5)  MOVE IN DSN\n         EX    R2,*-6               FOR REAL\n*--------------------------------------------------------------------*\n*              ISSUE LOCATE TO FIND VOLSER OF DATASET                *\n*--------------------------------------------------------------------*\n         MVI   WCAMWRK2,X'FF'\n         MVC   WCAMWRK2+1(255),WCAMWRK2\n         XC    WCAMLST,WCAMLST     ZERO WCAMLST\n         MVC   WCAMLST(4),=XL4'44000000' LOCATE PARMS\n         LA    R0,WREC+$DSN\n         ST    R0,WCAMLST+4        @ OF DATASET\n         LA    R0,WCAMWRK\n         ST    R0,WCAMLST+12       @ OF WCAMLST WORK AREA\n         SPACE 1\n         LA    R1,WCAMLST\nLOCATE   SVC   26                  LOCATE DATASET\n         SPACE 1\n         MVC   WREC+$OFF(4),=X'F0212020'\n         ED    WREC+$OFF(4),WDSNUM\n         MVI   WREC+$OFF,C'+'\n         MVC   WREC+$VOL(6),WCAMWRK+6\n         LA    R0,L'WREC\n         LA    R1,WREC\n         BAL   R9,PUTMSG\n         LA    R5,1+44(,R5)        POINT AT NEXT ENTRY\n         AP    WDSNUM,=P'1'        ADD ONE TO COUNTER\n         BCT   R4,LOOP\nRETURN   DS    0H\n         L     R0,=A(WORKLEN)\n         LR    R1,R13\n         L     R13,4(,R13)\n         STORAGE RELEASE,LENGTH=(0),ADDR=(1),SP=1\n         RETURN (14,12),RC=0\nDYNERR   DS    0H\n         LA    R0,30\n         LA    R1,=CL30'LNKLST04 DYNAMIC LNKLIST ERROR'\n         BAL   R9,PUTMSG\n         B     RETURN\n*--------------------------------------------------------------------*\n*              PUTMSG              BAL   R9,PUTMSG                   *\n*--------------------------------------------------------------------*\nPUTMSG   DS    0H\n         TPUT  (1),(0),R\n         MVC   WREC,BLANKS\n         BR    R9\n*--------------------------------------------------------------------*\n*              DATA AREA                                             *\n*--------------------------------------------------------------------*\n         LTORG ,\n$OFF     EQU   1        ---+       OFFSETS INTO WREC FOR PRINT\n$VOL     EQU   6           |\n$DSN     EQU   $VOL+7,44   |\n$APF     EQU   $DSN+45,3   |\n$SMS     EQU   $APF+4,3 <--+\nBLANKS   DC    CL80' '\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DS    9D\nWREC     DC    CL80' '\nWDSNUM   DC    PL2'0'\nWFUNCT   DC    X'0'\n         DS    0D                  ALIGNMENT\nWDEC     DS    2D'0'\nWWDSNUM  DS    PL2'0'\nWLNKNAM  DS    CL16' '             LNKLIST SET NAME\nWDSNAME  DS    CL44' '\nWDSNVOL  DS    CL6' '\n         DS    0D                  ALIGNMENT\nWCAMLST  DS    XL256'00',0D\nWCAMWRK  DS    XL256'00',0D\nWCAMWRK2 DS    XL256'00',0D        NEEDED FOR WCAMWRK OVERLAY\nWCSVLNKX CSVDYNL MF=(L,WCSVLNK)\nWCSVWORK DS    (1000)CL60\nWCSVWRKL EQU   *-WCSVWORK\n         DS    0D\nWORKLEN  EQU   *-WORK\n         PRINT NOGEN\n         YREGS\n         CVT   DSECT=YES\n         PRINT GEN\n         CSVDLAA DSECT=YES,LIST=YES\n         END   ,\n         PUNCH ' ENTRY LNKLIST '\n         PUNCH ' ALIAS LPALIST     '\n         PUNCH ' NAME  LNKLIST(R)  '\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPALIST": {"ttr": 11019, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00V\\x01\\x135?\\x01\\x135?\\x10'\\x01\\xf8\\x01\\xf8\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-12-19T00:00:00", "modifydate": "2013-12-19T10:27:56", "lines": 504, "newlines": 504, "modlines": 0, "user": "KBASS"}, "text": "          PUNCH ' ORDER LPALIST'\n          PUNCH ' ENTRY LPALIST'\n***********************************************************************\n* WRITTEN BY K.M. (SAM) BASS (SBASS,SJB,KBASS,KMB)                    *\n***********************************************************************\n*--------------------------------------------------------------------*\n*                                                                    *\n*              PROGRAM TO LIST LPALIST DATASET AND ITS VOLSER        *\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\n*                                                                    *\n*                                                                    *\n* SBASS  2013/13/18 CHANGED DISPLAY TO INCLUDE VOLSER FROM LPAT PER  *\n*        CODE FROM SAM GOLOB (2013/12/18)                            *\n* SGOLOB 2013/13/18 ADDED THE APUT(PUTLINE) ROUTINES INSTEAD OF TPUT *\n*                                                                    *\n*              *** LIST OF LPA DATASETS     ***                      *\n*              *** MISMATCH V VOLSER IF \"*\" ***                      *\n*                NUM VOLLPA * VOLCAT DSNAME                          *\n*               +000 S1BR11   S1BR11 SYS1.LPALIB                     *\n*               +001 S1BR11   S1BR11 SYS1.SORTLPA                    *\n*               +002 S1BR11   S1BR11 SYS1.SICELPA                    *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*--------------------------------------------------------------------*\n*@@            LPALIST CODE                                          *\n*--------------------------------------------------------------------*\nLPALIST  CSECT\nLPALIST  AMODE 31\nLPALIST  RMODE 24\n         SAVE  (14,12),T,'LPALIST_&SYSDATC._&SYSTIME.'\n         LR    R12,R15\n         USING LPALIST,R12\n         LR    R11,R1              SAVE PARM ADDR (NOT USED)\n*--------------------------------------------------------------------*\n*              GET DYNAMIC STORAGE                                   *\n*--------------------------------------------------------------------*\n         GETMAIN R,LV=LWORK,SP=1\n         LR    R2,R1               SAVE STORAGE ADDR\n         LR    R15,R0\n         LR    R14,R1\n         SLR   R1,R1\n         MVCL  R14,R0              ZERO GETMAIN\n*\n         ST    R13,4(,R2)           SET PREV SAVE\n         ST    R2,8(,R13)           SET NEXT SAVE\n         LR    R13,R2\n         USING WORK,R13\n*--------------------------------------------------------------------*\n*              GET CVT                                               *\n*--------------------------------------------------------------------*\n         L     R2,X'10'            CVT\n         USING CVT,R2\n         L     R2,CVTSMEXT\n         DROP  R2\n         USING CVTVSTGX,R2\n         L     R3,CVTEPLPS         LPALIST TABLE POINTER\n         DROP  R2\n         CLC   =C'LPAT',0(R3)      IS IT REALLY LPA TABLE\n         BE    LLTOK\n         APUT  =CL60'*** LPA LIST TABLE INVALID ***',60\n         B     RETURN\nLLTOK    DS    0H\n         SPACE 1\n         APUT  =CL60'*** LIST OF LPA DATASETS     ***',60\n         APUT  =CL60'*** MISMATCH V VOLSER IF \"*\" ***',60\n         APUT  =CL60'  NUM VOLLPA * VOLCAT DSNAME',60\n         ZAP   DSNNUM,=P'0'        ZERO COUNTER\n         LA    R3,4(,R3)           BYPASS 'LPAT'\n         L     R4,0(,R3)           GET NUMBER OF ENTRIES\n         LA    R5,4(,R3)           POINT AT ENTRIES\n*--------------------------------------------------------------------*\n*        BEGIN FROM SAM GOLOB GET  VOLSER FROM LPAT                  *\n*--------------------------------------------------------------------*\n         XR    R6,R6               CLEAR REGISTER\n         XR    R7,R7               CLEAR REGISTER\n         LR    R7,R4               LOAD NUMBER OF ENTRIES TO MULTIPLY\n         M     R6,=F'45'           MULTIPLY BY SIZE OF EACH ENTRY\n         AR    R7,R5               POINT TO VOLSER TABLE THAT IS\n*                                    PAST THE DSN TABLE IN LPAT.\n*--------------------------------------------------------------------*\n*        END   FROM SAM GOLOB GET  VOLSER FROM LPAT                  *\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*              LOOP THRU LLT TO GET EACH DATASET                     *\n*--------------------------------------------------------------------*\nLOOP     DS    0H\n         SLR   R2,R2\n         IC    R2,0(,R5)           ENTRY LENGTH\n         MVC   REC,BLANKS\n         S     R2,=F'1'\n         MVC   REC+$DSN(0),1(R5)   MOVE IN DSN\n         EX    R2,*-6               FOR REAL\n         MVC   REC+$VOL1(6),0(R7)  MOVE IN VOLSER FROM 2ND TABL GOLOB\n*--------------------------------------------------------------------*\n*              ISSUE LOCATE TO FIND VOLSER OF DATASET                *\n*--------------------------------------------------------------------*\n         MVI   CAMWORK2,X'FF'\n         MVC   CAMWORK2+1(255),CAMWORK2\n         XC    CAMLIST,CAMLIST     ZERO CAMLIST\n         MVC   CAMLIST(4),=XL4'44000000' LOCATE PARMS\n         LA    R0,REC+$DSN\n         ST    R0,CAMLIST+4        @ OF DATASET\n         LA    R0,CAMWORK\n         ST    R0,CAMLIST+12       @ OF CAMLIST WORK AREA\n         SPACE 1\n         LA    R1,CAMLIST\nLOCATE   SVC   26                  LOCATE DATASET\n         SPACE 1\n         MVC   REC+$OFF(4),=X'F0212020'\n         ED    REC+$OFF(4),DSNNUM\n         MVI   REC+$OFF,C'+'\n         MVC   REC+$VOL2(6),CAMWORK+6\n*\n         CLC   REC+$VOL1(6),REC+$VOL2\n         BE    VOLCHK1\n         MVI   REC+$VOL1+7,C'*'\nVOLCHK1  DS    0H\n*\n         APUT  REC,L'REC\n         LA    R5,1+44(,R5)        POINT AT NEXT ENTRY\n         LA    R7,6(,R7)           POINT AT NEXT VOLSER         SGOLOB\n         AP    DSNNUM,=P'1'\n         BCT   R4,LOOP\nRETURN   DS    0H\n         LR    R3,R15\n         LR    R10,R13\n         L     R13,4(,R13)\n         FREEMAIN R,LV=LWORK,A=(10),SP=1\n         LR    R15,R3\n         RETURN (14,12),RC=(15)\n*--------------------------------------------------------------------*\n*              DATA AREA                                             *\n*--------------------------------------------------------------------*\n         LTORG ,\n$OFF     EQU   1\n$VOL1    EQU   6\n$VOL2    EQU   $VOL1+9\n$DSN     EQU   $VOL2+7\nBLANKS   DC    CL80' '\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DC    9D'0'\nCAMLIST  DC    XL256'0'\n         DS    0D                  ALIGNMENT\nCAMWORK  DC    XL256'00'\nCAMWORK2 DC    XL256'00'\n         DS    0D\nREC      DC    CL80' '\nDSNNUM   DC    PL2'0'\n         DS    0D                  ALIGNMENT\nLWORK    EQU   *-WORK\n         PRINT NOGEN\n         YREGS\n         CVT   DSECT=YES\n         END   LPALIST\n*--------------------------------------------------------------------*\n*@@            EPUTL ROUTINES                                        *\n*--------------------------------------------------------------------*\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         DROP  ,\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LPALIST$": {"ttr": 11273, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00T\\x01\\x07\"\\x7f\\x01\\x135?\\x15S\\x00\\x1d\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2007-08-15T00:00:00", "modifydate": "2013-12-19T15:53:54", "lines": 29, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT488.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT488.FILE566(LPALIST)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   LPALIST\n SETCODE AC(1)\n SETSSI  CB488566\n NAME    LPALIST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPALISTO": {"ttr": 11275, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x15\\x01\\x02\\x10_\\x01\\x02(/\\tI\\x00m\\x00m\\x00\\x00\\xe2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-04-15T00:00:00", "modifydate": "2002-10-09T09:49:15", "lines": 109, "newlines": 109, "modlines": 0, "user": "SBASS"}, "text": "***********************************************************************\n* WRITTEN BY K.M. (SAM) BASS (SBASS,SJB,KBASS,KMB)                    *\n***********************************************************************\n*--------------------------------------------------------------------*\n*                                                                    *\n*              PROGRAM TO LIST LPALIST DATASET AND ITS VOLSER        *\n*                                                                    *\n*--------------------------------------------------------------------*\nLPALIST  CSECT\nLPALIST  AMODE 31\nLPALIST  RMODE 24\n         SAVE  (14,12),T,'LPALIST_&SYSDATC._&SYSTIME.'\n         LR    R12,R15\n         USING LPALIST,R12\n         LA    R0,SAVE             @ OF NEW SAVE\n         ST    R13,SAVE+4           SET PREV SAVE\n         ST    R0,8(,R13)           SET NEXT SAVE\n         LR    R13,R0\n*--------------------------------------------------------------------*\n*              GET CVT                                               *\n*--------------------------------------------------------------------*\n         L     R2,X'10'            CVT\n         USING CVT,R2\n         L     R2,CVTSMEXT\n         DROP  R2\n         USING CVTVSTGX,R2\n         L     R3,CVTEPLPS         LPALIST TABLE POINTER\n         DROP  R2\n         TPUT  =CL60'*** LIST OF LPA DATASETS ***',60\n         CLC   =C'LPAT',0(R3)      IS IT REALLY LPA TABLE\n         BE    LLTOK\n         TPUT  =CL60'*** LPA LIST TABLE INVALID ***',60\n         B     RETURN\nLLTOK    DS    0H\n         GETMAIN R,LV=LWORK,SP=1\n         LR    R10,R1\n         USING WORK,R10\n         LR    R15,R0\n         LR    R14,R1\n         SLR   R1,R1\n         MVCL  R14,R0              ZERO GETMAIN\n         SPACE 1\n         ZAP   DSNNUM,=P'0'        ZERO COUNTER\n         LA    R3,4(,R3)           BYPASS 'LPAT'\n         L     R4,0(,R3)           GET NUMBER OF ENTRIES\n         LA    R5,4(,R3)           POINT AT ENTRIES\n*--------------------------------------------------------------------*\n*              LOOP THRU LLT TO GET EACH DATASET                     *\n*--------------------------------------------------------------------*\nLOOP     DS    0H\n         SLR   R2,R2\n         IC    R2,0(,R5)           ENTRY LENGTH\n         MVC   REC,BLANKS\n         S     R2,=F'1'\n         MVC   REC+$DSN(0),1(R5)   MOVE IN DSN\n         EX    R2,*-6               FOR REAL\n*--------------------------------------------------------------------*\n*              ISSUE LOCATE TO FIND VOLSER OF DATASET                *\n*--------------------------------------------------------------------*\n         MVI   CAMWORK2,X'FF'\n         MVC   CAMWORK2+1(255),CAMWORK2\n         XC    CAMLIST,CAMLIST     ZERO CAMLIST\n         MVC   CAMLIST(4),=XL4'44000000' LOCATE PARMS\n         LA    R0,REC+$DSN\n         ST    R0,CAMLIST+4        @ OF DATASET\n         LA    R0,CAMWORK\n         ST    R0,CAMLIST+12       @ OF CAMLIST WORK AREA\n         SPACE 1\n         LA    R1,CAMLIST\nLOCATE   SVC   26                  LOCATE DATASET\n         SPACE 1\n         MVC   REC+$OFF(4),=X'F0212020'\n         ED    REC+$OFF(4),DSNNUM\n         MVI   REC+$OFF,C'+'\n         MVC   REC+$VOL(6),CAMWORK+6\n         TPUT  REC,L'REC\n         LA    R5,1+44(,R5)        POINT AT NEXT ENTRY\n         AP    DSNNUM,=P'1'\n         BCT   R4,LOOP\nRETURN   DS    0H\n         FREEMAIN R,LV=LWORK,A=(10),SP=1\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n*--------------------------------------------------------------------*\n*              DATA AREA                                             *\n*--------------------------------------------------------------------*\n         LTORG ,\n$OFF     EQU   1\n$VOL     EQU   6\n$DSN     EQU   $VOL+7\nBLANKS   DC    CL80' '\nSAVE     DC    9D'0'\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nWORK     DSECT\nCAMLIST  DC    XL256'0'\n         DS    0D                  ALIGNMENT\nCAMWORK  DC    XL256'00'\nCAMWORK2 DC    XL256'00'\n         DS    0D\nREC      DC    CL80' '\nDSNNUM   DC    PL2'0'\n         DS    0D                  ALIGNMENT\nLWORK    EQU   *-WORK\n         PRINT NOGEN\n         YREGS\n         CVT   DSECT=YES\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MVSAREAS": {"ttr": 11521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x17\\x01\\x01\\x05\\x1f\\x01\\x050\\x9f!\\x10\\x02>\\x022\\x00\\r\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-02-20T00:00:00", "modifydate": "2005-11-05T21:10:17", "lines": 574, "newlines": 562, "modlines": 13, "user": "KBASS"}, "text": "         MACRO\n&NAME    MVSAREAS  &LISTGEN=NO,&ALL=NO,                                X\n               &ASCB=NO,                                               X\n               &ACEE=NO,                                               X\n               &ASVT=NO,                                               X\n               &CDE=NO,                                                X\n               &CIB=NO,                                                X\n               &CPPL=NO,                                               X\n               &CSCB=NO,                                               X\n               &CSOA=NO,                                               X\n               &CSPL=NO,                                               X\n               &CVT=NO,                                                X\n               &DAIR=NO,                                               X\n               &DCB=NO,                                                X\n               &DEB=NO,                                                X\n               &DSAB=NO,                                               X\n               &DYNAL=NO,                                              X\n               &ECT=NO,                                                X\n               &FRR=NO,                                                X\n               &GDA=NO,                                                X\n               &IOB=NO,                                                X\n               &IOPL=NO,                                               X\n               &JCT=NO,                                                X\n               &JESCT=NO,                                              X\n               &JFCB=NO,                                               X\n               &JMR=NO,                                                X\n               &JSCB=NO,                                               X\n               &LCT=NO,                                                X\n               &LWA=NO,                                                X\n               &PCCB=NO,                                               X\n               &PDS=NO,                                                X\n               &PGPB=NO,                                               X\n               &PPL=NO,                                                X\n               &PSA=NO,                                                X\n               &PSAE=NO,                                               X\n               &PSCB=NO,                                               X\n               &PTPB=NO,                                               X\n               &RB=NO,                                                 X\n               &SCT=NO,                                                X\n               &SDWA=NO,                                               X\n               &SMCA=NO,                                               X\n               &SRB=NO,                                                X\n               &SSCT=NO,                                               X\n               &SSIB=NO,                                               X\n               &SSOB=NO,                                               X\n               &STPL=NO,                                               X\n               &SVT=NO,                                                X\n               &TCB=NO,                                                X\n               &TCT=NO,                                                X\n               &TEXT=NO,                                               X\n               &TIOT=NO,                                               X\n               &TSO=NO,                                                X\n               &TSB=NO,                                                X\n               &TSVT=NO,           TSO VECTOR TABLE (CVTTVT)           X\n               &UCB=NO,                                                X\n               &UCM=NO,                                                X\n               &UPT=NO,                                                X\n               &WQE=NO,                                                X\n               &WSAVT=NO\n         LCLB  &FLAG,&LFLAG,&TSOFLAG\n&FLAG    SETB  ('&ALL' EQ 'YES')\n&LFLAG   SETB  ('&LISTGEN' EQ 'YES')\n&TSOFLAG SETB  ('&TSO' EQ 'YES')\n         PUSH  PRINT\n         AIF   (&LFLAG).GEN0000\n         PRINT NOGEN\n.GEN0000 ANOP\n.*\n.*\n         AIF   (&FLAG).PSA\n         AIF   ('&PSA' NE 'YES').NOPSA\n.PSA     ANOP\n         MNOTE 'IHAPSA   -- MVS PSA D-SECT'\n         IHAPSA LIST=&LISTGEN\n.NOPSA   ANOP\n.*\n         AIF   (&FLAG).PSAE\n         AIF   ('&PSAE' NE 'YES').NOPSAE\n.PSAE    ANOP\n         MNOTE 'IHAPSAE   -- MVS PSAE D-SECT'\n         IHAPSAE LIST=&LISTGEN\n.NOPSAE  ANOP\n.*\n.*\n         AIF   (&FLAG).CVT\n         AIF   ('&CVT' NE 'YES').NOCVT\n.CVT     ANOP\n         MNOTE 'CVT      -- MVS CVT D-SECT'\n         CVT   LIST=&LISTGEN,SYS=AOS2,OPTIONS=(NOSLICE,INTERVAL,0),    C\n               TSO=YES,PREFIX=NO,FLAG=00,FLAGB=00,PATCH=NO,            C\n               REAL=0,DSECT=YES,RPS=YES,CVTTZ=0,CTLFLGS=00,            C\n               LOADBAL=NO,CBMRTN=NO,WARN=0,STORAGE=0\nCVTDSECT EQU   CVT                 ALTERNATE NAME FOR DSECT\n         MNOTE 'IHAECVT  -- MVS CVT EXTENTED D-SECT'\n         IHAECVT DSECT=YES,LIST=&LISTGEN\n.NOCVT   ANOP\n.*\n.*\n         AIF   (&FLAG).ASVT\n         AIF   ('&ASVT' NE 'YES').NOASVT\n.ASVT    ANOP\n         MNOTE 'IHAASVT  -- MVS ASVT D-SECT'\n         IHAASVT\n.NOASVT  ANOP\n.*\n.*\n         AIF   (&FLAG).ASCB\n         AIF   ('&ASCB' NE 'YES').NOASCB\n.ASCB    ANOP\n         MNOTE 'IHAASCB  -- MVS ASCB D-SECT'\n         IHAASCB LIST=&LISTGEN\n         MNOTE 'IHAASXB  -- MVS ASXB D-SECT'\n         IHAASXB LIST=&LISTGEN\n.NOASCB  ANOP\n.*\n.*\n         AIF   (&FLAG).ACEE\n         AIF   ('&ACEE' NE 'YES').NOACEE\n.ACEE    ANOP\n         MNOTE 'IHAACEE  -- MVS ACEE D-SECT'\n         IHAACEE\n.NOACEE  ANOP\n.*\n.*\n         AIF   (&FLAG).GDA\n         AIF   ('&GDA' NE 'YES').NOGDA\n.GDA     ANOP\n         MNOTE 'IHAGDA   -- MVS GDA D-SECT'\n         IHAGDA\n.NOGDA   ANOP\n.*\n.*\n         AIF   (&FLAG).TCB\n         AIF   ('&TCB' NE 'YES').NOTCB\n.TCB     ANOP\n         MNOTE 'IKJTCB   -- MVS TCB D-SECT'\n         IKJTCB  LIST=&LISTGEN,SYS=AOS2,DSECT=YES\nTCBDSECT EQU   TCB\n.NOTCB   ANOP\n.*\n.*\n         AIF   (&FLAG).TCT\n         AIF   ('&TCT' NE 'YES').NOTCT\n.TCT     ANOP\n         MNOTE 'IEFTCT   -- MVS TCT D-SECT'\n         IEFTCT  DSECT=YES\nTCTDSECT EQU   SMFTCT\n.NOTCT   ANOP\n.*\n         AIF   (&FLAG).TSB\n         AIF   ('&TSB' NE 'YES').NOTSB\n.TSB     ANOP\n         MNOTE 'IKJTSB   -- MVS TSB D-SECT'\n         IKJTSB  LIST=&LISTGEN,EXT=YES\nTSBDSECT EQU   TSB\n.NOTSB   ANOP\n.*\n.*\n         AIF   (&FLAG).RB\n         AIF   ('&RB' NE 'YES').NORB\n.RB      ANOP\n         MNOTE 'IHARB    -- MVS RB D-SECT'\n         IHARB\n.NORB    ANOP\n.*\n.*\n         AIF   (&FLAG).CDE\n         AIF   ('&CDE' NE 'YES').NOCDE\n.CDE     ANOP\n         MNOTE 'IHACDE   -- MVS CDE D-SECT'\n         IHACDE\n.NOCDE   ANOP\n.*\n.*\n         AIF   (&FLAG).SRB\n         AIF   ('&SRB' NE 'YES').NOSRB\n.SRB     ANOP\n         MNOTE 'IHASRB   -- MVS SRB D-SECT'\n         IHASRB\n.NOSRB   ANOP\n.*\n.*\n         AIF   (&FLAG).FRR\n         AIF   ('&FRR' NE 'YES').NOFRR\n.FRR     ANOP\n         MNOTE 'IHAFRRS  -- MVS FRR D-SECT'\n         IHAFRRS\n.NOFRR   ANOP\n.*\n.*\n         AIF   (&FLAG).SDWA\n         AIF   ('&SDWA' NE 'YES').NOSDWA\n.SDWA    ANOP\n         MNOTE 'IHASDWA  -- MVS SDWA D-SECT'\n         IHASDWA\n.NOSDWA  ANOP\n.*\n.*\n         AIF   (&FLAG).SMCA\n         AIF   ('&SMCA' NE 'YES').NOSMCA\n.SMCA    ANOP\n         MNOTE 'IEESMCA  -- MVS SMCA D-SECT'\n         IEESMCA\n.NOSMCA  ANOP\n.*\n.*\n         AIF   (&FLAG).WQE\n         AIF   ('&WQE' NE 'YES').NOWQE\n.WQE     ANOP\n         MNOTE 'IHAWQE   -- MVS WQE D-SECT'\n         IHAWQE\n.NOWQE   ANOP\n.*\n.*\n         AIF   (&FLAG).UCM\n         AIF   ('&UCM' NE 'YES').NOUCM\n.UCM     ANOP\n         MNOTE 'IEECUCM  -- MVS UCM D-SECT'\nUCM      DSECT\n         IEECUCM  REPLY=1,BUFFERS=1,MCS=,                              C\n               EXIT=,MASTCON=,HARDCDE=,OLDWCDE=,                       C\n               HARDCPY=(SYSLOG,NOCMDS,NOHCPY),                         C\n               FORMAT=OLD,SYS=AOS2,DSECT=YES\nUCMDSECT EQU   UCM                 ALTERNATE NAME FOR DSECT\n.NOUCM   ANOP\n.*\n.*\n         AIF   (&FLAG).DCB\n         AIF   ('&DCB' NE 'YES').NODCB\n.DCB     ANOP\n         MNOTE 'IHADCB   -- MVS DCB D-SECT'\n         DCBD DSORG=PS\n.NODCB   ANOP\n.*\n.*\n         AIF   (&FLAG).DEB\n         AIF   ('&DEB' NE 'YES').NODEB\n.DEB     ANOP\n         MNOTE 'IEZDEB   -- MVS DEB D-SECT'\n         IEZDEB LIST=&LISTGEN\n.NODEB   ANOP\n.*\n.*\n         AIF   (&FLAG).DSAB\n         AIF   ('&DSAB' NE 'YES').NODSAB\n.DSAB    ANOP\n         MNOTE 'IHADSAB   -- MVS DSAB D-SECT'\n         IHADSAB\n.NODSAB  ANOP\n.*\n.*\n         AIF   (&FLAG).TSVT\n         AIF   ('&TSVT' NE 'YES').NOTSVT\n.TSVT    ANOP\n         MNOTE 'TSVT -- MVS/TSO TSVT D-SECT'\n         IKJTSVT\n.NOTSVT  ANOP\n.*\n.*\n         AIF   (&FLAG).UCB\n         AIF   ('&UCB' NE 'YES').NOUCB\n.UCB     ANOP\n         MNOTE 'IEFUCBOB -- MVS UCB D-SECT'\n         TITLE 'IEFUCBOB -- MVS UCB D-SECT'\nUCBDSECT DSECT\n         IEFUCBOB\n         TITLE 'IECUCBCX -- MVS UCB TAPE  '\n         IECUCBCX\n.NOUCB   ANOP\n.*\n.*\n         AIF   (&FLAG).IOB\n         AIF   ('&IOB' NE 'YES').NOIOB\n.IOB     ANOP\n         MNOTE 'IEZIOB   -- MVS IOB D-SECT'\n         IEZIOB\nIOBSIZE  EQU   (IOBEXTEN-IOBSTDRD)+L'IOBSEEK\n.NOIOB   ANOP\n.*\n.*\n         AIF   (&FLAG).JSCB\n         AIF   ('&JSCB' NE 'YES').NOJSCB\n.JSCB    ANOP\n         MNOTE 'IEZJSCB  -- MVS JSCB D-SECT'\n         IEZJSCB\nJSCB     EQU   IEZJSCB\n.NOJSCB  ANOP\n.*\n.*\n         AIF   (&FLAG).LCT\n         AIF   ('&LCT' NE 'YES').NOLCT\n.LCT     ANOP\n         MNOTE 'IEFALLCT - MVS LCT D-SECT'\nLCT      DSECT ,\n         IEFALLCT ,\nLCTDSECT EQU   LCT\n.NOLCT   ANOP\n.*\n.*\n         AIF   (&FLAG).LWA\n         AIF   ('&LWA' NE 'YES').NOLWA\n.LWA     ANOP\n         MNOTE 'IEFLWA  -- MVS LWA D-SECT'\n         IKJEFLWA\n.NOLWA   ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).CPPL\n         AIF   ('&CPPL' NE 'YES').NOCPPL\n.CPPL    ANOP\n         MNOTE 'IKJCPPL  -- MVS/TSO CPPL D-SECT'\n         IKJCPPL\nCPPLSIZE EQU   *-CPPL\n.NOCPPL  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).DAIR\n         AIF   ('&DAIR' NE 'YES').NODAIR\n.DAIR    ANOP\n         MNOTE 'IKJDAPL  -- MVS/TSO DAPL D-SECT'\n         IKJDAPL\nDAPLSIZE EQU   *-DAPL\n         MNOTE 'IKJDAP2C -- MVS/TSO/DAIR DAPB2C D-SECT'\n         IKJDAP2C\n.NODAIR  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).CSOA\n         AIF   ('&CSOA' NE 'YES').NOCSOA\n.CSOA    ANOP\n         MNOTE 'IKJCSOA  -- MVS/TSO CSOA D-SECT'\n         IKJCSOA\nCSOASIZE EQU   *-CSOA\n.NOCSOA  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).CSPL\n         AIF   ('&CSPL' NE 'YES').NOCSPL\n.CSPL    ANOP\n         MNOTE 'IKJCSPL  -- MVS/TSO CSPL D-SECT'\n         IKJCSPL\nCSPLSIZE EQU   *-CSPL\n.NOCSPL  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).ECT\n         AIF   ('&ECT' NE 'YES').NOECT\n.ECT     ANOP\n         MNOTE 'IKJECT   -- MVS/TSO ECT D-SECT'\n         IKJECT\nECTSIZE  EQU   *-ECT\n.NOECT   ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).IOPL\n         AIF   ('&IOPL' NE 'YES').NOIOPL\n.IOPL    ANOP\n         MNOTE 'IKJIOPL  -- MVS/TSO IOPL D-SECT'\n         IKJIOPL\nIOPLSIZE EQU   *-IOPL\n.NOIOPL  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).PGPB\n         AIF   ('&PGPB' NE 'YES').NOPGPB\n.PGPB    ANOP\n         MNOTE 'IKJPGPB  -- MVS/TSO PGPB D-SECT'\n         IKJPGPB\nPGPBSIZE EQU   *-PGPB\n.NOPGPB  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).PPL\n         AIF   ('&PPL' NE 'YES').NOPPL\n.PPL     ANOP\n         MNOTE 'IKJPPL   -- MVS/TSO PPL D-SECT'\n         IKJPPL\nPPLSIZE  EQU   *-PPL\n.NOPPL   ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).PTPB\n         AIF   ('&PTPB' NE 'YES').NOPTPB\n.PTPB    ANOP\n         MNOTE 'IKJPTPB  -- MVS/TSO PTPB D-SECT'\n         IKJPTPB\nPTPBSIZE EQU   *-PTPB\n.NOPTPB  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).STPL\n         AIF   ('&STPL' NE 'YES').NOSTPL\n.STPL    ANOP\n         MNOTE 'IKJSTPL  -- MVS/TSO STPL D-SECT'\n         IKJSTPL\nSTPLSIZE EQU   *-STPL\n.NOSTPL  ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).UPT\n         AIF   ('&UPT' NE 'YES').NOUPT\n.UPT     ANOP\n         MNOTE 'IKJUPT   -- MVS/TSO UPT D-SECT'\n         IKJUPT\n.NOUPT   ANOP\n.*\n.*\n         AIF   (&FLAG  OR  &TSOFLAG).PSCB\n         AIF   ('&PSCB' NE 'YES').NOPSCB\n.PSCB    ANOP\n         MNOTE 'IKJPSCB  -- MVS PSCB D-SECT'\n         IKJPSCB\n.NOPSCB  ANOP\n.*\n.*\n         AIF   (&FLAG).CSCB\n         AIF   ('&CSCB' NE 'YES').NOCSCB\n.CSCB    ANOP\n         MNOTE 'IEECHAIN -- MVS CSCB D-SECT'\nCSCB     DSECT\n         IEECHAIN\n.NOCSCB  ANOP\n.*\n.*\n         AIF   (&FLAG).CIB\n         AIF   ('&CIB' NE 'YES').NOCIB\n.CIB     ANOP\n         MNOTE 'IEZCIB   -- MVS CIB D-SECT'\nCIBDSECT DSECT\n         IEZCIB\n.NOCIB   ANOP\n.*\n.*\n         AIF   (&FLAG).JFCB\n         AIF   ('&JFCB' NE 'YES').NOJFCB\n.JFCB    ANOP\n         MNOTE 'IEFJFCBN -- MVS JFCB D-SECT'\nJFCB     DSECT\n         IEFJFCBN LIST=&LISTGEN\n.NOJFCB  ANOP\n.*\n.*\n         AIF   (&FLAG).JMR\n         AIF   ('&JMR' NE 'YES').NOJMR\n.JMR     ANOP\n         MNOTE 'IEFJMR  -- MVS JMR D-SECT'\n         IEFJMR\n.NOJMR   ANOP\n.*\n.*\n         AIF   (&FLAG).TIOT\n         AIF   ('&TIOT' NE 'YES').NOTIOT\n.TIOT    ANOP\n         MNOTE 'IEFTIOT1 -- MVS TIOT D-SECT'\nTIOT     DSECT\n         IEFTIOT1\n.NOTIOT  ANOP\n.*\n.*\n         AIF   (&FLAG).WSAVT\n         AIF   ('&WSAVT' NE 'YES').NOWSAVT\n.WSAVT   ANOP\n         MNOTE 'IHAWSAVT -- MVS WSAVT D-SECT'\n         IHAWSAVT CLASS=GLOBAL\n.NOWSAVT ANOP\n.*\n.*\n         AIF   (&FLAG).TEXT\n         AIF   ('&TEXT' NE 'YES').NOTEXT\n.TEXT    ANOP\n         MNOTE 'IEFTXTFT -- MVS INTERNAL TEXT STRING FORMATS D-SECT'\n         IEFTXTFT\n         MNOTE 'IEFVKEYS -- MVS INTERNAL TEXT KEYS D-SECT'\n         IEFVKEYS\n.NOTEXT  ANOP\n.*\n.*\n         AIF   (&FLAG).JCT\n         AIF   ('&JCT' NE 'YES').NOJCT\n.JCT     ANOP\n         MNOTE 'IEFAJCTB -- MVS JCT D-SECT'\nJCT      DSECT\n         IEFAJCTB\nJCTDSECT DSECT\n         MNOTE 'IEFJCTX  -- MVS JCTX D-SECT'\nJCTX     DSECT\n         IEFJCTX\nJCTXDSCT DSECT\n.NOJCT   ANOP\n         AIF   (&FLAG).SCT\n         AIF   ('&SCT' NE 'YES').NOSCT\n.SCT     ANOP\n         MNOTE 'IEFASCTB -- MVS SCT D-SECT'\nSCT      DSECT\n         IEFASCTB\nSCTDSECT DSECT\n         MNOTE 'IEFSCTX  -- MVS SCTX D-SECT'\nSCTX     EQU   SCTXIN\n         IEFSCTX\nSCTXDSCT DSECT\n.NOSCT   ANOP\n.*\n.*\n         AIF   (&FLAG).JESCT\n         AIF   ('&JESCT' NE 'YES').NOJESCT\n.JESCT   ANOP\n         MNOTE 'IEFJESCT -- MVS JESCT D-SECT'\n         IEFJESCT\nJESCTSIZ EQU   *-JESCT                 SIZE OF THE JESCT DSECT\n.NOJESCT ANOP\n.*\n.*\n         AIF   (&FLAG).SSCT\n         AIF   ('&SSCT' NE 'YES').NOSSCT\n.SSCT    ANOP\n         MNOTE 'IEFJSCVT -- MVS SSCVT (SSCT) D-SECT'\n         IEFJSCVT\n.NOSSCT  ANOP\n.*\n.*\n         AIF   (&FLAG).SSIB\n         AIF   ('&SSIB' NE 'YES').NOSSIB\n.SSIB    ANOP\n         MNOTE 'IEFJSSIB -- MVS SSIB D-SECT'\n         IEFJSSIB\n.NOSSIB  ANOP\n.*\n.*\n         AIF   (&FLAG).SSOB\n         AIF   ('&SSOB' NE 'YES').NOSSOB\n.SSOB    ANOP\n         MNOTE 'IEFJSSOB -- MVS SSOB D-SECT'\n         IEFJSSOB\n.NOSSOB  ANOP\n.*\n.*\n         AIF   (&FLAG).SVT\n         AIF   ('&SRB' EQ 'YES').SVT\n         AIF   ('&SVT' NE 'YES').NOSVT\n.SVT     ANOP\n         MNOTE 'IHASVT   -- MVS SVT D-SECT'\n         IHASVT LIST=&LISTGEN\n.NOSVT   ANOP\n.*\n.*\n         AIF   (&FLAG).PDS\n         AIF   ('&PDS' NE 'YES').NOPDS\n.PDS     ANOP\n         MNOTE 'IHAPDS   -- MVS PDS D-SECT'\n         IHAPDS\n.NOPDS   ANOP\n.*\n.*\n         AIF   (&FLAG).PCCB\n         AIF   ('&PCCB' NE 'YES').NOPCCB\n.PCCB    ANOP\n         MNOTE 'IEFPCCB   -- MVS PCCB D-SECT'\n         IEFPCCB\n.NOPCCB  ANOP\n.*\n.*\n         AIF   (&FLAG).DYNAL\n         AIF   ('&DYNAL' NE 'YES').NODYNAL\n.DYNAL   ANOP\n         MNOTE 'IEFZB4D0 -- MVS DYNAMIC ALLOCATION BLOCKS D-SECT'\n         IEFZB4D0\n         MNOTE 'IEFZB4D2 -- MVS DYNAMIC ALLOCATION TEXT STRINGS'\n         IEFZB4D2\n.NODYNAL ANOP\n.*\n.*\n         POP   PRINT\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTDUMP": {"ttr": 11777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x17\\x01\\x11\\x08O\\x01\\x17\\x08\\x1f\\x14V\\x00\\x94\\x00\\x93\\x00\\x03\\xd7\\xe4\\xe3\\xd3\\xc9\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2017-03-22T14:56:17", "lines": 148, "newlines": 147, "modlines": 3, "user": "PUTLINE"}, "text": "* - - - - - - - - NEEDS APUT MEMBER IN ASM SYSLIB  - - - - - - - - - *\n         SPACE 2\n*--------------------------------------------------------------------*\n*              PRINT OUT DATA IN DUMP FORMAT                         *\n*                R1 = DATA                                           *\n*                R0 = LENGTH                                         *\n*--------------------------------------------------------------------*\nPRTDUMP  DS    0H\n         $$SUB ,\n         SPACE 1\n         LR    R2,R0\n         LR    R5,R1               @ OF DATA\n         LA    R9,0                OFFSET\nPRTD0100 DS    0H\n         LTR   R2,R2               CHECK LENGTH\n         BNP   PRTD0900             EXIT\n         MVC   PRTDREC,PRTDBLKS\n         LA    R4,16               MAX DISPLAY LENGTH\n         CLR   R4,R2               IS MAX DISPLAY LENGTH < DATA\n         BL    *+6                  YES\n         LR    R4,R2                NO, COPY WHATS LEFT\n         BCTR  R4,0                -1\n         SPACE 2\n         LA    R14,PRTDREC+53      CHAR DATA\n         LA    R15,PRTDREC+16      HEX DATA\n         MVC   0(*-*,R14),0(R5)    MOVE IN CHAR DATA\n         EX    R4,*-6               MOVE IT\n         LA    R4,1(,R4)           LENGTH\n         LA    R1,0(R14,R4)        END OF OUTPUT AREA\n         MVI   0(R1),C'*'          MOVE IN ENDING *\n         LA    R3,4                # OF 4 BYTE ENTRIES\nPRTD0200 DS    0H\n         LR    R6,R4\n         CL    R6,=F'4'            IS LENGTH < 4\n         BL    PRTD0220             YES\n         LA    R6,4                NO, SET MAX UNPK LENGTH\n         SPACE 1\nPRTD0220 DS    0H                  CREATE UNPK LENGTH BYTE\n         LR    R7,R6               COPY UNPK INPUT LENGTH\n         SLL   R7,1                2*LENGTH (UNPK OUTPUT LENGTH)\n         LR    R1,R7               COPY OUTPUT LENGTH\n         SLL   R1,4                MOVE UP A NIBBLE\n         OR    R1,R6               OR IN INPUT UNPK LENGTH('OI')\nPRTD0240 DS    0H\n         EX    R1,PRTDUNPK         UNPK 0(0,R15),0(0,R14)\n         MVI   8(R15),C' '\n         TR    0(8,R15),PRTDHEXT-240\n         LA    R15,9(,R15)         INCR HEX OUTPUT AREA\n         LA    R14,4(,R14)         INCR CHAR OUTPUT AREA\n         S     R4,=F'4'            INCR # OF BYTES DONE\n         BNP   PRTD0800\n         BCT   R3,PRTD0200         LOOP\nPRTD0800 DS    0H\n         ST    R5,PRTDDEC          COPY ADDRESS\n         UNPK  PRTDREC+00(9),PRTDDEC(5) UNPK ADDRESS\n         TR    PRTDREC+00(8),PRTDHEXT-240 TRANSLATE X'FA'S TO X'F0'S\n         MVI   PRTDREC+08,C' '     BLANK\n         ST    R9,PRTDDEC          COPY OFFSET\n         UNPK  PRTDREC+10(5),PRTDDEC+2(3) UNPK ADDRESS\n         TR    PRTDREC+10(4),PRTDHEXT-240 TRANSLATE X'FA'S TO X'F0'S\n         MVI   PRTDREC+09,C'+'     +\n         MVI   PRTDREC+14,C' '     BLANK\n         SPACE 1\n         TR    PRTDREC+53(16),PRTDXLAT TRANSLATE TO PRINTABLE\n         MVI   PRTDREC+52,C'*'\n         LA    R1,PRTDWTO\n         BAL   R14,PRTDMSG\n*\n         LA    R1,16               DISPLAY LENGTH\n         SR    R2,R1               LENGTH  - DISPLAY LENGTH\n         AR    R5,R1               ADDRESS + DSPLAY LENGTH,\n         AR    R9,R1               OFFSET  + DSPLAY LENGTH,\n         B     PRTD0100\n         SPACE 2\nPRTD0900 DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nPRTDUNPK UNPK  0(0,R15),0(0,R14)\n         LTORG ,\n         DROP  R12\n*--------------------------------------------------------------------*\n*              DUMP PRINT ROUTINE                                    *\n*--------------------------------------------------------------------*\nPRTDMSG  DS    0H\n         STM   R14,R12,12(R13)     SAVE REGS\n         BALR  R12,0\n         USING *,R12\n         LA    R15,72(,R13)\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         SPACE 1\n         LR    R11,R1\n         TM    PRTDFLG1,PRTD1INT\n         BO    PRTDM190\n         OI    PRTDFLG1,PRTD1INT\n         EXTRACT PRTDDEC,FIELDS=(TSO) CHECK FOR TSO SESSION\n         L     R1,PRTDDEC         PICK UP BYTE ADDRESS\n         TM    0(R1),X'80'        IS TSO SESSION BIT ON?\n         BZ    PRTDM110\n         OI    PRTDFLG1,PRTD1TSO\nPRTDM110 DS    0H\nPRTDM190 DS    0H\n         TM    PRTDFLG1,PRTD1TSO\n         BO    PRTDM200\n         WTO   ,MF=(E,(R11))\n         B     PRTDMXIT\nPRTDM200 DS    0H\n         SPACE 1\n         LH    R0,0(,R11)\n         SH    R0,=H'4'\n         LA    R1,4(,R11)\n         APUT  (1),(0)\nPRTDMXIT DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n         SPACE 2\nPRTDXLAT DS    0F\n         DC    CL16'................'                     00-0F\n         DC    CL16'................'                     10-1F\n         DC    CL16'................'                     20-2F\n         DC    CL16'................'                     30-3F\n         DC    CL16' .........\\.<(+|'                     40-4F\n         DC    CL16'&&.........!$*);\u00ac'                    50-5F\n         DC    CL16'-/.........,%_>?'                     60-6F\n         DC    CL16'..........:#@''=\"'                    70-7F\n         DC    XL16'4B8182838485868788894B4B4B4B4B4B'     80-8F\n         DC    XL16'4B9192939495969798994B4B4B4B4B4B'     90-9F\n         DC    XL16'4BA1A2A3A4A5A6A7A8A94B4B4B4B4B4B'     A0-AF\n         DC    CL16'................'                     B0-BF\n         DC    CL16'{ABCDEFGHI......'                     C0-CF\n         DC    CL16'}JKLMNOPQR......'                     D0-DF\n         DC    CL16'\\.STUVWXYZ......'                     E0-EF\n         DC    CL16'0123456789......'                     F0-FF\n*\nPRTDHEXT DC    C'0123456789ABCDEF'\nPRTDDEC  DC    2D'0'\nPRTDBLKS DC    CL80' '\nPRTDWTO  WTO   '                                                       X\n                                                          ',           X\n               ROUTCDE=11,MF=L\nPRTDREC  EQU   PRTDWTO+4,80\nPRTDFLG1 DC    X'0'\nPRTD1INT EQU   X'80'\nPRTD1TSO EQU   X'40'\n         LTORG ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRTDUMPT": {"ttr": 11781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t9\\x00\\x93\\x00\\x93\\x00\\x00\\xe3\\xd7\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:39:00", "lines": 147, "newlines": 147, "modlines": 0, "user": "TPUT"}, "text": "         SPACE 2\n*--------------------------------------------------------------------*\n*              PRINT OUT DATA IN DUMP FORMAT                         *\n*                R1 = DATA                                           *\n*                R0 = LENGTH                                         *\n*--------------------------------------------------------------------*\nPRTDUMP  DS    0H\n         $$SUB ,\n         SPACE 1\n         LR    R2,R0\n         LR    R5,R1               @ OF DATA\n         LA    R9,0                OFFSET\nPRTD0100 DS    0H\n         LTR   R2,R2               CHECK LENGTH\n         BNP   PRTD0900             EXIT\n         MVC   PRTDREC,PRTDBLKS\n         LA    R4,16               MAX DISPLAY LENGTH\n         CLR   R4,R2               IS MAX DISPLAY LENGTH < DATA\n         BL    *+6                  YES\n         LR    R4,R2                NO, COPY WHATS LEFT\n         BCTR  R4,0                -1\n         SPACE 2\n         LA    R14,PRTDREC+53      CHAR DATA\n         LA    R15,PRTDREC+16      HEX DATA\n         MVC   0(*-*,R14),0(R5)    MOVE IN CHAR DATA\n         EX    R4,*-6               MOVE IT\n         LA    R4,1(,R4)           LENGTH\n         LA    R1,0(R14,R4)        END OF OUTPUT AREA\n         MVI   0(R1),C'*'          MOVE IN ENDING *\n         LA    R3,4                # OF 4 BYTE ENTRIES\nPRTD0200 DS    0H\n         LR    R6,R4\n         CL    R6,=F'4'            IS LENGTH < 4\n         BL    PRTD0220             YES\n         LA    R6,4                NO, SET MAX UNPK LENGTH\n         SPACE 1\nPRTD0220 DS    0H                  CREATE UNPK LENGTH BYTE\n         LR    R7,R6               COPY UNPK INPUT LENGTH\n         SLL   R7,1                2*LENGTH (UNPK OUTPUT LENGTH)\n         LR    R1,R7               COPY OUTPUT LENGTH\n         SLL   R1,4                MOVE UP A NIBBLE\n         OR    R1,R6               OR IN INPUT UNPK LENGTH('OI')\nPRTD0240 DS    0H\n         EX    R1,PRTDUNPK         UNPK 0(0,R15),0(0,R14)\n         MVI   8(R15),C' '\n         TR    0(8,R15),PRTDHEXT-240\n         LA    R15,9(,R15)         INCR HEX OUTPUT AREA\n         LA    R14,4(,R14)         INCR CHAR OUTPUT AREA\n         S     R4,=F'4'            INCR # OF BYTES DONE\n         BNP   PRTD0800\n         BCT   R3,PRTD0200         LOOP\nPRTD0800 DS    0H\n         ST    R5,PRTDDEC          COPY ADDRESS\n         UNPK  PRTDREC+00(9),PRTDDEC(5) UNPK ADDRESS\n         TR    PRTDREC+00(8),PRTDHEXT-240 TRANSLATE X'FA'S TO X'F0'S\n         MVI   PRTDREC+08,C' '     BLANK\n         ST    R9,PRTDDEC          COPY OFFSET\n         UNPK  PRTDREC+10(5),PRTDDEC+2(3) UNPK ADDRESS\n         TR    PRTDREC+10(4),PRTDHEXT-240 TRANSLATE X'FA'S TO X'F0'S\n         MVI   PRTDREC+09,C'+'     +\n         MVI   PRTDREC+14,C' '     BLANK\n         SPACE 1\n         TR    PRTDREC+53(16),PRTDXLAT TRANSLATE TO PRINTABLE\n         MVI   PRTDREC+52,C'*'\n         LA    R1,PRTDWTO\n         BAL   R14,PRTDMSG\n*\n         LA    R1,16               DISPLAY LENGTH\n         SR    R2,R1               LENGTH  - DISPLAY LENGTH\n         AR    R5,R1               ADDRESS + DSPLAY LENGTH,\n         AR    R9,R1               OFFSET  + DSPLAY LENGTH,\n         B     PRTD0100\n         SPACE 2\nPRTD0900 DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\nPRTDUNPK UNPK  0(0,R15),0(0,R14)\n         LTORG ,\n         DROP  R12\n*--------------------------------------------------------------------*\n*              DUMP PRINT ROUTINE                                    *\n*--------------------------------------------------------------------*\nPRTDMSG  DS    0H\n         STM   R14,R12,12(R13)     SAVE REGS\n         BALR  R12,0\n         USING *,R12\n         LA    R15,72(,R13)\n         ST    R15,8(,R13)\n         ST    R13,4(,R15)\n         LR    R13,R15\n         SPACE 1\n         LR    R11,R1\n         TM    PRTDFLG1,PRTD1INT\n         BO    PRTDM190\n         OI    PRTDFLG1,PRTD1INT\n         EXTRACT PRTDDEC,FIELDS=(TSO) CHECK FOR TSO SESSION\n         L     R1,PRTDDEC         PICK UP BYTE ADDRESS\n         TM    0(R1),X'80'        IS TSO SESSION BIT ON?\n         BZ    PRTDM110\n         OI    PRTDFLG1,PRTD1TSO\nPRTDM110 DS    0H\nPRTDM190 DS    0H\n         TM    PRTDFLG1,PRTD1TSO\n         BO    PRTDM200\n         WTO   ,MF=(E,(R11))\n         B     PRTDMXIT\nPRTDM200 DS    0H\n         SPACE 1\n         LH    R0,0(,R11)\n         SH    R0,=H'4'\n         LA    R1,4(,R11)\n         TPUT  (1),(0)\nPRTDMXIT DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n         SPACE 2\nPRTDXLAT DS    0F\n         DC    CL16'................'                     00-0F\n         DC    CL16'................'                     10-1F\n         DC    CL16'................'                     20-2F\n         DC    CL16'................'                     30-3F\n         DC    CL16' .........\\.<(+|'                     40-4F\n         DC    CL16'&&.........!$*);\u00ac'                    50-5F\n         DC    CL16'-/.........,%_>?'                     60-6F\n         DC    CL16'..........:#@''=\"'                    70-7F\n         DC    XL16'4B8182838485868788894B4B4B4B4B4B'     80-8F\n         DC    XL16'4B9192939495969798994B4B4B4B4B4B'     90-9F\n         DC    XL16'4BA1A2A3A4A5A6A7A8A94B4B4B4B4B4B'     A0-AF\n         DC    CL16'................'                     B0-BF\n         DC    CL16'{ABCDEFGHI......'                     C0-CF\n         DC    CL16'}JKLMNOPQR......'                     D0-DF\n         DC    CL16'\\.STUVWXYZ......'                     E0-EF\n         DC    CL16'0123456789......'                     F0-FF\n*\nPRTDHEXT DC    C'0123456789ABCDEF'\nPRTDDEC  DC    2D'0'\nPRTDBLKS DC    CL80' '\nPRTDWTO  WTO   '                                                       X\n                                                          ',           X\n               ROUTCDE=11,MF=L\nPRTDREC  EQU   PRTDWTO+4,80\nPRTDFLG1 DC    X'0'\nPRTD1INT EQU   X'80'\nPRTD1TSO EQU   X'40'\n         LTORG ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RELEASE": {"ttr": 11785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\x08O\\x01\\x11\\x08O\\t9\\x006\\x006\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-25T00:00:00", "modifydate": "2011-03-25T09:39:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "KBASS"}, "text": "         MACRO\n&NAME    RELEASE &L,&RC=0,&LI=LA,&WORKREG=R14,&FREE=YES,       05/08/77W\n               &SP=0                                           01/06/78\n.*\n.*       RELEASE UNDOES WHAT CONNECT DID.  I.E., IT FREEMAINS\n.*       ANY SAVEAREA AFTER DISCONNECTING IT, RESTORES REGISTERS,\n.*       AND RETURNS.\n.*\n.*  CHANGES:                                                   05/08/77\n.*                                                             05/08/77\n.*       05/08/77 - ADD &WORKREG,&FREE,AND CHECK &RC           05/08/77\n.*       05/25/77 - FIXUP CODE FROM 05/08/77 TO SET RC         05/25/77\n.*       01/06/78 - ADD &SP (SUBPOOL SUPPORT)                  01/06/78\n.*                                                             05/08/77\n         LCLB  &CODE                                           05/08/77\n&CODE    SETB  ('&RC' EQ '(15)' OR '&RC' EQ '(R15)')           05/08/77\n&CODE    SETB  (&CODE OR '&RC' EQ '(0)' OR '&RC' EQ '(R0)')    05/08/77\n&CODE    SETB  (&CODE OR '&RC' EQ '(1)' OR '&RC' EQ '(R1)')    05/08/77\n         AIF   ('&FREE' EQ 'NO').XNAME                         05/08/77\n         AIF   (T'&L EQ 'O').XNOFREE\n.XNAME   ANOP                                                  05/08/77\n&NAME    LR    R1,R13\n         L     R13,4(R13)\n         XC    8(4,R13),8(R13)\n         AIF   ('&L' EQ 'NOFREE' OR '&FREE' EQ 'NO').XRC       05/08/77\n         AIF   (NOT &CODE).XLI                                 05/08/77\n         LR    &WORKREG,&RC(1)          SAVE RETURN CODE       05/08/77\n.XLI     &LI   R0,&L                    WORKAREA LENGTH\n         AIF   (&SP EQ 0).SUBPOL9                              01/06/78\n         B     *+6                    BR. AROUND SUBPOOL       01/06/78\n         DC    AL1(&SP),X'00'         SPECIFIED SUBPOOL & FILL 01/06/78\n         ICM   R0,B'1000',*-2         INSERT SPECIFIED SUBPOOL 01/06/78\n.SUBPOL9 ANOP                                                  01/06/78\n         FREEMAIN R,LV=(0),A=(1)\n         AIF   (NOT &CODE).XRC                                 05/25/77\n         LR    R15,&WORKREG             SET THE RETURN CODE    05/08/77\n         AGO   .XRC\n.XNOFREE AIF   (T'&NAME EQ 'O').XRC\n&NAME    DS    0H\n.XRC     AIF   (T'&RC NE 'O').RCHK\n         LM    R14,R12,12(R13)\n         BR    R14\n         MEXIT\n.RCHK    AIF   ('&RC' EQ '0').RLA\n         AIF   ('&RC'(1,1) NE '(').RLA\n         AIF   ('&RC(1)' EQ '15' OR '&RC(1)' EQ 'R15').RETURN  05/08/77\n         AIF   (&CODE).RETURN                                  06/01/77\n         LR    R15,&RC(1)\n         AGO   .RETURN\n.RLA     LA    R15,&RC\n.RETURN  L     R14,12(R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RTAPE": {"ttr": 11787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x19\\x00\\x97$\\x1f\\x01\\x11\\x08/\\x10X\\x01\\x8c\\x01~\\x00\\x1c\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1997-08-29T00:00:00", "modifydate": "2011-03-23T10:58:19", "lines": 396, "newlines": 382, "modlines": 28, "user": "KBASS"}, "text": "         TITLE ' TAPE UTILITY SUBROUTINES CALLABLE FROM FORTRAN'\n*--------------------------------------------------------------------*\n*        WRTTEN BY SAM BASS ABOUT 1974                               *\n*        ORIGINALLY WRITTEN TO BE CALLED FROM FORTRAN.               *\n*        THIS SUPPORTS 64K BLOCKS                                    *\n*--------------------------------------------------------------------*\n* CALL   RTAPE(K,BUF,N,&99,&999)       READ       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = INPUT ARRAY\n*        N   = NUMBER OF BYTES READ   R15 = 0  GOOD READ\n*        &99   = EOF LABEL            R15 = 4  EOF  READ\n*        &999   = ERR EXIT LABEL      R15 = 8  ERR ON READ\n* ----------------------------------------------------------\n* CALL   WTAPE(K,BUF,N,&9999)          WRITE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = OUTPUT ARRAY\n*        N = NUMBER OF BYTES TO WRITE R15 = 0  GOOD WRITE\n*        &9999  = ERR EXIT LABEL      R15 = 4  ERR ON WRITE\n* ----------------------------------------------------------\n* CALL   OPENT(K,L)                    OPEN       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n* CALL   CLOSET(K,L)                   CLOSE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n* CALL   RWTAPE(K)                     REWIND     TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   SFILE(K)                      SKIP       FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   FSREC(K,N)                    FORWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT)  (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n* CALL   BSREC(K,N)                    BACKWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT) (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n* CALL   FSFILE(K)                     FORWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   BSFILE(K)                     BACKWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   WTMARK(K)                     WRITE TAPE MARK\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n*\n*\n*        IF K = 1 THEN  THE SUBROUTINES DOES ITS PROCESSING FROM\n*              DDNAME = \"SYSUT1\"      EX.\n*\n*//GO.SYSUT1 DD VOL=SER=SYSUT1,UNIT=TAPE,DISP=OLD,LABEL=(1,NL)\n*\n*        IF K = 2 THEN  THE SUBROUTINES DOES ITS PROCESSING FROM\n*              DDNAME = \"SYSUT2\"      EX.\n*\n*//GO.SYSUT2 DD VOL=SER=SYSUT2,UNIT=TAPE,DISP=OLD,LABEL=(1,NL)\n         EJECT\n         MACRO\n&LABEL   EEXCP &CMD\n&LABEL   ST    5,GCCW              STORE IN DATA AREA ADDR.\n         MVI   GCCW,&CMD           MOVE IN COMMAND BYTE\n         STH   6,GCCW+6            MOVE IN NUMBER OF BYTES\n         TM     48(2),X'10'        IS TAPE OPEN?\n         BO    *+14                BIF YES\n         LA    1,TOPENP               NO ...\n         LA    15,OPENT            ADDR OF OPENT\n         BALR  14,15               GO OPEN IT\n*        EXCP  WIOB\n         EXCP  WIOB                DO IT\n         XC    ECB,ECB\n*        WAIT  ECB=ECB\n         WAIT  ECB=ECB             WAIT FOR COMPLETION\n         LA    15,0                SET RETURN CODE\n         MEND\n         MACRO\n&LABEL   SAVEIT &ENTRY\n&LABEL   SAVE  (14,12),T,&ENTRY\n         BALR  10,0\n         USING *,10\n         AIF   ('&ENTRY' NE 'OPENT').NOPENT\n         ST    13,SAVEOT+4\n         LA    5,SAVEOT\n         AGO   .GOPENT\n.NOPENT  ANOP\n         ST    13,SAVE+4\n         LA    5,SAVE\n.GOPENT  ANOP\n         ST    5,8(13)\n         LR    13,5\n         MEND\n         MACRO\n&LABEL   RESTORE\n&LABEL   L     13,SAVE+4\n         L     14,12(13)\n         LM    0,12,20(13)\n         MVI   12(13),X'FF'\n         MEND\n         MACRO\n&LABEL   TAPEDCB\n&LABEL   L     5,0(2)\n         ST    5,TT\n         LA    2,SYSUT1\n         C     5,F1\n         BE    *+8\n         LA    2,SYSUT2\n         ST    2,DCBA\n         XC    WIOB(WIOBLEN),WIOB                               SJBA\n         MVC   WIOB+21(3),DCBA+1   IOBECBPB\n         MVI   WIOB,X'42'          IOBCFLG1 UN RELATED FLAG\n         MVC   WIOB+5(3),ECBA      IOBCECB+1\n         MVC   WIOB+17(3),GCCWA    ADDR OF CHANNEL PROGRAM\n         XC    ECB(4),ECB\n         MEND\n         EJECT\nRTAPE    CSECT\n* CALL   RTAPE(K,BUF,N,&99,&999)       READ       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = INPUT ARRAY\n*        N   = NUMBER OF BYTES READ   R15 = 0  GOOD READ\n*        &99   = EOF LABEL            R15 = 4  EOF  READ\n*        &999   = ERR EXIT LABEL      R15 = 8  ERR ON READ\n* ----------------------------------------------------------\n         ENTRY WTAPE,OPENT,CLOSET,RWTAPE,SFILE,FSREC\n         ENTRY BSREC,FSFILE,BSFILE,WTMARK\n         SAVEIT RTAPE\n         LM    R2,R4,0(R1)\n         TAPEDCB\n         LR    R5,R3\n         L     R6,F64K             64K-1 LENGTH\n         MVI   GCCW+4,X'20'        TURN OFF CHAINING\n         EEXCP X'02'               READ IT\n         MVI   GCCW+4,X'60'        TURN ON  CHAINING\n         TM    ECB,X'7F'           ERR? X'7F' = GOOD            SJB2\n         BO    RDOK                BIF  YES                     SJB2\n         TM    ECB,X'41'           ERR? CHANNEL PROGRAM ERROR?  SJB2\n         BNO   RDERR                NO, NOT TAPEMARK            SJB2\n         TM    WIOB+12,X'02' @@    ERROR\n         BO    RDERR                YES, ERROR\n         TM    WIOB+12,X'0D' @@    EOF?\n         BO    RDEOF                YES, EOF\n         B     RDERR                NO, ERROR\nRDOK     DS    0H\n         LH    R6,WIOB+14          RESIDUAL\n         SLL   R6,16               CLEAR HIGH ORDER HALF WORD\n         SRL   R6,16               ...\n         L     R7,F64K             ORIGINAL BYTE  COUNT\n         SR    R7,R6               ORIGINAL - RESIDUAL\n         ST    R7,0(R4)            AND SAVE IT\n         B     RDRET\nRDEOF    LA    R15,4\n         B     *+8\nRDERR    LA    R15,8\n         LA    R7,0\n         ST    R7,0(4)\nRDRET    RESTORE\n         BR    14\n         EJECT\nWTAPE    SAVEIT  WTAPE\n* CALL   WTAPE(K,BUF,N,&9999)          WRITE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = OUTPUT ARRAY\n*        N = NUMBER OF BYTES TO WRITE R15 = 0  GOOD WRITE\n*        &9999  = ERR EXIT LABEL      R15 = 4  ERR ON WRITE\n* ----------------------------------------------------------\n         LM    2,4,0(1)\n         L     4,0(4)\n         TAPEDCB\n         C     5,F1                IS THIS SYSUT1                   SJB\n         BNE   WDUMMT2             YES                              SJB\n         TM    FLAG,$NULL1         IS THIS A DD DUMMY               SJB\n         BO    WDUMM1                                               SJB\n         B     WNOTDUM                                              SJB\nWDUMMT2  DS    0H                                                   SJB\n         TM    FLAG,$NULL2         IS THIS A DD DUMMY               SJB\n         BO    WDUMM1                                               SJB\nWNOTDUM  DS    0H                                                   SJB\n         LA    5,2                 SET FOR OUTPUT OPEN\n         ST    5,TT+4\n         LR    5,3\n         LR    6,4                 NUMBER OF BYTES TO WRITE\n         EEXCP X'01'               WRITE IT\n         TM    ECB,X'7F'           IS WRITE GOOD\n         BO    *+8                 YES\n         LA    15,4\nWDUMM1   LA    5,1                 RESET OPEN FLAG FOR INPUT\n         ST    5,TT+4\n         RESTORE\n         BR    14\n         EJECT\nRWTAPE   SAVEIT RWTAPE\n* CALL   RWTAPE(K)                     REWIND     TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n         L     2,0(1)\n         TAPEDCB\n         LA    5,DUM\n         LA    6,1\n         EEXCP X'07'               REWIND TAPE\n         RESTORE\n         BR    14\n         EJECT\nFSREC    SAVEIT FSREC\n* CALL   FSREC(K,N)                    FORWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT)  (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n         LM    2,3,0(1)\n         L     4,0(3)\n         TAPEDCB\n         C     4,F0\n         BNH   FSRET\n         LA    5,DUM\n         LA    6,1\nFSREE    EEXCP X'37'               FOWARD SPACE REC\n         TM    WIOB+12,X'03'       EOF?\n         BM    *+8\n         BCT   4,FSREE             DO N TIMES\n         ST    4,0(3)\nFSRET    RESTORE\n         BR    14\n         EJECT\nBSREC    SAVEIT BSREC\n* CALL   BSREC(K,N)                    BACKWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT) (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n         LM    2,3,0(1)\n         L     4,0(3)\n         TAPEDCB\n         C     4,F0\n         BNH   BSRET\n         LA    5,DUM\n         LA    6,1\nBSREE    EEXCP X'27'               BACKWARD SPACE REC\n         TM    WIOB+12,X'03'       EOF?\n         BM    *+8\n         BCT   4,BSREE             DO N TIMES\n         ST    4,0(3)\nBSRET    RESTORE\n         BR    14\n         EJECT\nFSFILE SAVEIT FSFILE\n* CALL   FSFILE(K)                     FORWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\nSFILE    EQU   FSFILE\n         L     2,0(1)\n         TAPEDCB\n         LA    5,DUM\n         LA    6,1\n         EEXCP X'3F'               FOWARD SPACE FILE\n         RESTORE\n         BR    14\n         EJECT\nBSFILE   SAVEIT BSFILE\n* CALL   BSFILE(K)                     BACKWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n         L     2,0(1)\n         TAPEDCB\n         LA    5,DUM\n         LA    6,1\n         EEXCP X'2F'               BACKWARD SPACE FILE\n         RESTORE\n         BR    14\n         EJECT\nWTMARK   SAVEIT WTMARK\n* CALL   WTMARK(K)                     WRITE TAPE MARK\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n         L     2,0(1)\n         TAPEDCB\n         C     5,F1                IS THIS SYSUT1                   SJB\n         BNE   WTDUMM2             YES                              SJB\n         TM    FLAG,$NULL1         IS THIS A DD DUMMY               SJB\n         BO    WTEOF                                                SJB\n         B     WTNOTDUM                                             SJB\nWTDUMM2  DS    0H                                                   SJB\n         TM    FLAG,$NULL2         IS THIS A DD DUMMY               SJB\n         BO    WTEOF                                                SJB\nWTNOTDUM DS    0H                                                   SJB\n         LA    5,DUM\n         LA    6,1\n         EEXCP X'1F'               WRITE TAPE MARK\nWTEOF    RESTORE\n         BR    14\n         EJECT\nOPENT    SAVEIT OPENT\n* CALL   OPENT(K,L)                    OPEN       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n         LM    2,3,0(1)\n         TAPEDCB\n         MVI   WIOB,X'42'          TURN ON UN RELATED FLAG\n         MVC   WIOB+5(3),ECBA\n         MVC   WIOB+17(3),GCCWA    ADDR OF CHANNEL PROGRAM\n         LA    5,1\n         STH   5,WIOB+28           BLOCK INCREMENT\n         L     4,0(3)\n         C     4,F1\n         BNE   OT2\n         DEVTYPE CSYSUT1,DEVD1                                      SJB\n         CLC   DEVD1,=F'0'               IS A DD DUMMY              SJB\n         BNE   XOPEN1                                               SJB\n         OI    FLAG,$NULL1                                          SJB\n         B     OTRET                                                SJB\nXOPEN1   DS    0H                                                   SJB\n         OPEN  ((2),INPUT)\n         B     OTRET\nOT2      DS    0H                                                   SJB\n         DEVTYPE CSYSUT2,DEVD2                                      SJB\n         CLC   DEVD2,=F'0'               IS A DD DUMMY              SJB\n         BNE   XOPEN2                                               SJB\n         OI    FLAG,$NULL2                                          SJB\n         B     OTRET                                                SJB\nXOPEN2   DS    0H                                                   SJB\n         OPEN  ((2),OUTPUT)\nOTRET    L     13,SAVEOT+4\n         RETURN (14,12),RC=0\n         EJECT\nCLOSET   SAVEIT CLOSET\n* CALL   CLOSET(K,L)                   CLOSE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n         L     2,0(1)\n         TAPEDCB\n         CLOSE ((2),REWIND)\n         RESTORE\n         LA    15,0\n         BR    14\n         EJECT\nWIOB     DC    4D'0'\nWIOBLEN  EQU   *-WIOB                                           SJBA\nGCCW     CCW   X'03',DUM,X'60',1\n         CCW   X'03',DUM,X'20',1   DUMMY\nSAVE     DS    18F\nSAVEOT   DS    18F\nF0       DC    F'0'\nF1       DC    F'1'\nF32760   DC    F'32760'\nFFFF     DC    X'FFFF'\nF64K     DC    A(X'0000FFFF')\nTOPENP   DC    A(TT)\n         DC    A(TT+4)\nTT       DC    F'1'\n         DC    F'1'\nDCBA     DC    F'0'\nECB      DC    F'0'\nECBA     DC    AL3(ECB)\nGCCWA    DC    AL3(GCCW)\nDUM      DS    C\nFLAG     DC    X'00'                                                SJB\n$NULL1   EQU   X'80'                                                SJB\n$NULL2   EQU   X'40'                                                SJB\nCSYSUT1  DC    CL8'SYSUT1'                                          SJB\nCSYSUT2  DC    CL8'SYSUT2'                                          SJB\nDEVD1    DC    F'0'                                                 SJB\nDEVD2    DC    F'0'                                                 SJB\nXJFCB1   DS    0F                                                   SJB\n         DC    X'87'                                                SJB\n         DC    AL3(JFCB1)                                           SJB\nXJFCB2   DS    0F                                                   SJB\n         DC    X'87'                                                SJB\n         DC    AL3(JFCB2)                                           SJB\nJFCB1    DC    0F'0',CL176' '                                       SJB\nJFCB2    DC    0F'0',CL176' '                                       SJB\n         EJECT\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,RECFM=U,BUFNO=2,                 X\n               OPTCD=Z,EXLST=XJFCB1,                                   X\n               DEVD=TA,EODAD=RDEOF,MACRF=(E),BUFOFF=0\n         EJECT\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=U,BUFNO=2,                 X\n               OPTCD=Z,EXLST=XJFCB2,                                   X\n               DEVD=TA,EODAD=RDEOF,MACRF=(E),BUFOFF=0\n         YREGS ,                                                    SJB\n         IEZIOB ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RTAPE2": {"ttr": 12037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x00@\\x00\\x97$\\x1f\\x01\\x18\\x05\\x8f\\x00\\x07\\x02E\\x01|\\x02E\\xc3\\xc2\\xe3\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "1997-08-29T00:00:00", "modifydate": "2018-02-27T00:07:40", "lines": 581, "newlines": 380, "modlines": 581, "user": "CBTUSER"}, "text": "         TITLE ' TAPE UTILITY SUBROUTINES CALLABLE FROM FORTRAN'\n* ----------------------------------------------------------\n* ATTRIBUTES NORENT, AMODE=24, RMODE=24---------------------\n* ----------------------------------------------------------\n* CALL   RTAPE(K,BUF,N,&99,&999)       READ       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = INPUT ARRAY\n*        N   = NUMBER OF BYTES READ   R15 = 0  GOOD READ\n*        &99   = EOF LABEL            R15 = 4  EOF  READ\n*        &999   = ERR EXIT LABEL      R15 = 8  ERR ON READ\n* ----------------------------------------------------------\n* CALL   WTAPE(K,BUF,N,&9999)          WRITE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = OUTPUT ARRAY\n*        N = NUMBER OF BYTES TO WRITE R15 = 0  GOOD WRITE\n*        &9999  = ERR EXIT LABEL      R15 = 4  ERR ON WRITE\n* ----------------------------------------------------------\n* CALL   OPENT(K,L)                    OPEN       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n* CALL   CLOSET(K,L)                   CLOSE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n* CALL   RWTAPE(K)                     REWIND     TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   SFILE(K)                      SKIP       FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   FSREC(K,N)                    FORWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT)  (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n* CALL   BSREC(K,N)                    BACKWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT) (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n* CALL   FSFILE(K)                     FORWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   BSFILE(K)                     BACKWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n* CALL   WTMARK(K)                     WRITE TAPE MARK\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n*\n*\n*        IF K = 1 THEN  THE SUBROUTINES DOES ITS PROCESSING FROM\n*              DDNAME = \"SYSUT1\"      EX.\n*\n*//GO.SYSUT1 DD VOL=SER=SYSUT1,UNIT=TAPE,DISP=OLD,LABEL=(1,NL)\n*\n*        IF K = 2 THEN  THE SUBROUTINES DOES ITS PROCESSING FROM\n*              DDNAME = \"SYSUT2\"      EX.\n*\n*//GO.SYSUT2 DD VOL=SER=SYSUT2,UNIT=TAPE,DISP=OLD,LABEL=(1,NL)\n* ------------------------------------------------------------------*\n*              CHANGES                                              *\n*KBASS   0519-11 CHECK SYSUT1 AND SYSUT2 TO SEE IF TAPE             *\n*KBASS   0524-11 PROPERLY HANDLE RESIDUAL BYTE COUNT (IOBCSW CCW@)  *\n*KBASS   0823-12 TEST TO SEE IF 3490 TAPE, IF SO USE 64K MAX CCWS   *\n* ------------------------------------------------------------------*\n         EJECT\n         MACRO\n&LABEL   EEXCP &CCW,&D=,&L=\n&LABEL   DS    0H                  MOVE CCWS INTO WORK AREA\n&IX      SETC  'EX&SYSNDX.'\n*\n*              USES R14-R1 AND R9\n*\n         BAL   R9,TAPEDCB          SETS CURRDCBT\n         ICM   R15,15,CURRDCBT     GET CURRENT DCB TABLE\n         BZ    &IX.CURR\n.*\n         L     R1,$DDFLAG(R15)     GET @ CURRENT FLAGS\n         MVI   ECB,X'7F'           PRESET GOOD I/O IF DUMMY\n         TM    0(R1),$NULL         IS IT DD DUMMY ?\n         BO    &IX.EXIT\n         XC    ECB,ECB             CLEAR ECB\n         XC    WIOB(WIOBLN),WIOB   CLEAR WIOB\n         L     R1,$DDDCB(,R15)     GET @ CURR DCB\n         TM    48(R1),X'10'        IS TAPE OPEN?\n         BZ    &IX.D                NO, ABEND\n.*       $DROP R1,R15\n         MVI   WIOB,X'02'          TURN ON UN RELATED FLAG\n         MVC   WIOB+05(3),ECBA     AL3(ECB)\n         MVC   WIOB+17(3),=AL3(CCWS) CCW\n         STCM  R1,B'0111',WIOB+21  MOVE IN DCB ADDR\n.*\n         MVC   CCWS(&CCW.LN),&CCW  MOVE CCWS INTO WORK AREA\n         AIF   ('&CCW' EQ 'CCWRDL' OR '&CCW' EQ 'CCWWRL').CCWL\n         AIF   ('&CCW' EQ 'CCWRDN' OR '&CCW' EQ 'CCWWRN').CCWN\n         AGO   .CCWOK              ONLY R/W CCWS NEED DATA/LEN CHNGED\n.CCWL    ANOP\n.CCWN    ANOP\n         LA    R0,&CCW.LN/8        NUMBER OF CCWS IN CHAIN\n.*             THIS TEST FOR 64K MAX TAPE DRIVES (3490)         0823-12\n.*             IF SO IT USES THE SHORTER &CCW REMOVING THE L    0823-12\n         L     R15,CURRDCBT        GET CURRENT DCBT             0823-12\n         L     R15,$DDFLAG(,R15)   GET FLAGS                    0823-12\n         TM    0(R15),$64KMAX      IS THE 64K MAX DRIVE (3490)  0823-12\n         BZ    &IX.0                NO, USE LONG CCWS           0823-12\n&NORMAL  SETC  '&CCW'(1,5).'N'\n         MVC   CCWS(&NORMAL.LN),&NORMAL MOVE CCWS 64K           0823-12\n         LA    R0,&NORMAL.LN/8     64K NUMBER OF CCWS IN CHAIN  0823-12\n&IX.0    DS    0H                                               0823-12\n         LA    R15,CCWS            LIST OF CCWS\n&IX.A    DS    0H\n         LR    R14,&L              LENGTH\n         CL    R14,F64K            IS CURRENT LEN > 64K\n         BL    *+8                  NO, THEN USE IT\n         L     R14,F64K             YES, USE 64K\n         STCM  &D,B'0111',1(R15)   STORE IN DATA AREA ADDR.\n         STCM  R14,B'0011',6(R15)  MOVE IN NUMBER OF BYTES\n         S     &L,F64K             CURRENT LEN - 64K\n         BNP   &IX.B               NOTHING LEFT TO MOVE\n         AL    &D,F64K             INCR DATA AREA\n         LA    R15,8(,R15)         NEXT CCW IN CHAIN\n         BCT   R0,&IX.A\n         B     &IX.B\n&IX.B    DS    0H\n         MVI   4(R15),$SLI         TURN OFF CHAINING\n&IX.C    DS    0H\n.CCWOK   ANOP\n*        DC    H'1'\n*        EXCP  WIOB\n         EXCP  WIOB                DO IT\n*        WAIT  ECB=ECB\n         WAIT  ECB=ECB             WAIT FOR COMPLETION\n&IX.EXIT DS    0H\n         LA    R15,0               SET RETURN CODE\n         B     &IX.RET\n&IX.NULL DS    0H\n         MVI   ECB,X'7F'\n         B     &IX.RET\n&IX.D    DS    0H\n         WTO   'RTAPE DCB NOT OPEN ',ROUTCDE=11\n         ABEND 1\n&IX.CURR DS    0H\n         WTO   'RTAPE CURRDCBT ZERO',ROUTCDE=11\n         ABEND 1\n&IX.RET  DS    0H\n         MEND\n         MACRO\n&LABEL   SAVEIT &ENTRY\n&LABEL   SAVE  (14,12),T,&ENTRY\n         BALR  12,0\n         USING *,12\n         AIF   ('&ENTRY' NE 'OPENT').NOPENT\n         ST    R13,SAVEOT+4\n         LA    R5,SAVEOT\n         AGO   .GOPENT\n.NOPENT  ANOP\n         ST    R13,SAVE+4\n         LA    R5,SAVE\n.GOPENT  ANOP\n         ST    R5,8(R13)\n         LR    R13,R5\n         MEND\n         MACRO\n&LABEL   RESTORE\n&LABEL   L     R13,SAVE+4\n         L     R14,12(R13)\n         LM    0,12,20(R13)\n         MVI   12(R13),X'FF'\n         MEND\n         EJECT\nRTAPE2   CSECT\nRTAPE2   AMODE 24\nRTAPE2   RMODE 24\nRTAPE    EQU   RTAPE2\n* CALL   RTAPE(K,BUF,N,&99,&999)       READ       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = INPUT ARRAY\n*        N   = NUMBER OF BYTES READ   R15 = 0  GOOD READ\n*        &99   = EOF LABEL            R15 = 4  EOF  READ\n*        &999   = ERR EXIT LABEL      R15 = 8  ERR ON READ\n* ----------------------------------------------------------\n         ENTRY WTAPE,OPENT,CLOSET,RWTAPE,SFILE,FSREC\n         ENTRY BSREC,FSFILE,BSFILE,WTMARK\n         USING PARMS,R10\n         SAVEIT RTAPE\n         LR    R10,R1              PARM ADDRESS\n         LM    R2,R4,PARMS         DCB + BUFF + LEN\n         LR    R5,R3               COPY BUFFER ADDR\n         L     R6,=A(256*1024)     256K-1 LENGTH\n         EEXCP CCWRDL,D=R5,L=R6    READ IT\n         TM    WIOB+12,X'0D'       EOF?\n         BO    RDEOF               BIF YES\n         CLI   WIOB+04,X'41'       CHANNEL PROGRAM ERROR?\n         BNE   RDCHK2               NO, CHECK AGAIN\n         TM    WIOB+13,X'40'       INCORRECT LENGTH (SHORT RECORD)\n         BO    RTOK                 YES, THEN OK\nRDCHK2   DS    0H\n         TM    WIOB+12,X'02'       ERR?\n         BO    RDERR               BIF YES\n         TM    ECB,X'7F'           X'7F' = GOOD\n         BNO   RDERR                NO,  ERROR\nRTOK     DS    0H\n         LA    R15,0\n*--------------------------------------------------------------------*\n*              CALCULATE BYTES READ                                  *\n*        SUM UP THE CCW-LEN FOR EACH CCW,  IOB+9 IS LAST CCW+1(AL3)  *\n*        THEN SUBSTRACT THE RESIDUAL BYTE COUNT (IOB+14  AL2)        *\n*IOBCSW+1 THE FIRST THREE BYTES ARE THE VIRTUAL ADDRESS POINTING     *\n*        AFTER THE LAST-EXECUTED CCW IN YOUR CHANNEL PROGRAM         *\n*--------------------------------------------------------------------*\n*IOBCSW  DS    0CL7 -    LOW-ORDER SEVEN BYTES OF THE LAST CSW THAT\n*                        REFLECTS THE STATUS FOR THIS REQUEST\n         SLR   R0,R0\n         LA    R1,CCWS\n         N     R1,=A(X'00FFFFFF')  TURN OFF HI BYTE.            0524-11\n         L     R2,WIOB+8           GET LAST CCW+1\n         N     R2,=A(X'00FFFFFF')  TURN OFF HI BYTE.\nRTBYTE   DS    0H\n         SLR   R15,R15\n         ICM   R15,B'0011',6(R1)   GET BYTE COUNT FROM CCW\n         ALR   R0,R15              SUM UP BYTE COUNTS.\n         CL    R2,=A(0)            IS IOBCCW LAST RD ZERO       0524-11\n         BE    RTABEND              YES, BAD CCW ADDRESS        0524-11\n         LA    R1,8(,R1)           POINT TO NEXT CCW\n         CLR   R1,R2               AT WE AT THE LAST CCW+1?\n         BL    RTBYTE               NO,ADD UP NEXT CCW BYTE COUNT\nRTSHORT  DS    0H\n         SLR   R1,R1\n         ICM   R1,B'0011',WIOB+14  GET RESIDUAL BYTE COUNT\n         SLR   R0,R1                SUBSTRACT FROM TOTAL\n         L     R1,PARMLEN\n         ST    R0,0(,R1)           AND SAVE IT\n         LA    R15,0\n         B     RDRET\nRDEOF    DS    0H\n         LA    R15,4\n         LA    R0,0\n         L     R1,PARMLEN          GET LENGTH DATA AREA\n         ST    R0,0(,R1)            SET IT TO ZERO\n         B     RDRET\nRDERR    DS    0H\n         LA    R15,8\nRDERR2   LA    R0,0\n         L     R1,PARMLEN          GET LENGTH DATA AREA\n         ST    R0,0(,R1)            SET IT TO ZERO\nRDRET    DS    0H\n         RESTORE\n         BR    R14\nRTABEND  DC    H'0'\n         EJECT\nWTAPE    SAVEIT  WTAPE\n* CALL   WTAPE(K,BUF,N,&9999)          WRITE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        BUF   = OUTPUT ARRAY\n*        N = NUMBER OF BYTES TO WRITE R15 = 0  GOOD WRITE\n*        &9999  = ERR EXIT LABEL      R15 = 4  ERR ON WRITE\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         LM    R2,R4,PARMS         @ OF DCB,DATA,LEN\n         CLI   WROTE1,0            IF FIRST WRITE                  CBT1\n         BNE   NOTVOL1               THEN                          CBT1\n         MVI   WROTE1,1              NEXT TIME NOT FIRST WRITE     CBT1\n         CLC   0(4,R3),=C'VOL1'      IF IT'S A VOLUME LABEL        CBT1\n         BNE   NOTVOL1               AND                           CBT1\n         CLC   HOWOPEN,=F'3'         OPENED WITH OPTION 3          CBT1\n         BNE   NOTVOL1               THEN                          CBT1\n         MVC   4(6,R3),JFCB2+118     CHANGE VOLUME LABEL           CBT1\nNOTVOL1  DS    0H                                                  CBT1\n         L     R4,0(,R4)           LENGTH\n         LR    R5,R3\n         LR    R6,R4               NUMBER OF BYTES TO WRITE\n         EEXCP CCWWRL,D=R5,L=R6    WRITE IT\n         TM    ECB,X'7F'           IS WRITE GOOD\n         BO    *+8                 YES\n         LA    R15,4\n         RESTORE\n         BR    R14\n         EJECT\nRWTAPE   SAVEIT RWTAPE\n* CALL   RWTAPE(K)                     REWIND     TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         EEXCP CCWRW\n         RESTORE\n         BR    R14\n         EJECT\nFSREC    SAVEIT FSREC\n* CALL   FSREC(K,N)                    FORWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT)  (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         LM    R2,R3,PARMS         DCB & SKIP #\n         L     R4,0(R3)            FILES TO SKIP\n         C     R4,F0\n         BNH   FSRET\nFSREE    DS    0H                  FOWARD SPACE REC\n         EEXCP CCWFSR\n         TM    WIOB+12,X'03'       EOF?\n         BM    *+8\n         BCT   R4,FSREE            DO N TIMES\n         ST    R4,0(R3)\nFSRET    RESTORE\n         BR    R14\n         EJECT\nBSREC    SAVEIT BSREC\n* CALL   BSREC(K,N)                    BACKWARD-SPACE   RECORD\n*        K   = 1 OR 2 (WHICH TAPE)\n*        N   = NUMBER OF REC (INPUT) (MUST BE A VARIABLE)\n*            = NUMBER OF REC (OUTPUT) NOT PROCESSED\n*              BECAUSE OF EOF\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         LM    R2,R3,PARMS         DCB & SKIP #\n         L     R4,0(R3)            RECORDS TO BACKSPACE\n         C     R4,F0\n         BNH   BSRET\nBSREE    DS    0H                  BACKWARD SPACE REC\n         EEXCP CCWBSR\n         TM    WIOB+12,X'03'       EOF?\n         BM    *+8\n         BCT   R4,BSREE            DO N TIMES\n         ST    R4,0(R3)\nBSRET    RESTORE\n         BR    R14\n         EJECT\nFSFILE SAVEIT FSFILE\n* CALL   FSFILE(K)                     FORWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\nSFILE    EQU   FSFILE\n         LR    R10,R1              PARM ADDRESS\n         EEXCP CCWFSF              FOWARD SPACE FILE\n         RESTORE\n         BR    R14\n         EJECT\nBSFILE   SAVEIT BSFILE\n* CALL   BSFILE(K)                     BACKWARD-SPACE   FILE\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         EEXCP CCWBSF              BACKWARD SPACE FILE\n         RESTORE\n         BR    R14\n         EJECT\nWTMARK   SAVEIT WTMARK\n* CALL   WTMARK(K)                     WRITE TAPE MARK\n*        K   = 1 OR 2 (WHICH TAPE)\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         EEXCP CCWWTM              WRITE TAPE MARK\nWTEOF    RESTORE\n         BR    R14\n         EJECT\nOPENT    SAVEIT OPENT\n* CALL   OPENT(K,L)                    OPEN       TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         BAL   R9,TAPEDCB          SET CURRENT DCBT\n         L     R2,CURRDCBT         GET CURRENT DCBT\n         L     R3,$DDDCB(,R2)      GET DCB\n         L     R4,$DDFLAG(,R2)     GET FLAGS\n         L     R5,PARMOPEN         @ OF PARMOPEN 1 OR 2\n         DEVTYPE $DDNAM(R2),DEVDT\n         CLC   DEVD1,=F'0'               IS A DD DUMMY\n         BNE   XOPEN1\n         OI    0(R4),$NULL         YES IT IS DD DUMMY\n         B     OTRET                EXIT THE OPEN.\nXOPEN1   DS    0H\n         CLC   F1,0(R5)            OPEN FOR INPUT?\n         BE    OPENIN\n         CLC   F2,0(R5)            OPEN FOR OUTPUT?\n         BE    OPENOUT\n         CLC   F3,0(R5)            OPEN FOR OUTPUT WITH NEW VOL1   CBT1\n         BE    OPENOUT                                             CBT1\n         B     OPENERR\nOPENIN   DS    0H\n         OI    0(R4),$INPUT\n         MVC   DEVD1,DEVDT         COPY DEVTYPE                 0519-11\n         TM    DEVD1+02,X'80'      IS THIS TAPE                 0519-11\n         BZ    NOTTAPE1            NO                           0519-11\n         CLC   =X'8081',DEVD1+2    IS THIS A 3490?              0823-12\n         BNE   OPENINA              NO                          0823-12\n         OI    0(R4),$64KMAX       YES, SET 64K MAX             0823-12\nOPENINA  DS    0H\n         OPEN  ((3),INPUT)\n         B     OTRET\nOPENOUT  DS    0H\n         OI    0(R4),$OUTPUT\n         MVC   DEVD2,DEVDT         COPY DEVTYPE                 0519-11\n         TM    DEVD2+02,X'80'      IS THIS TAPE                 0519-11\n         BZ    NOTTAPE2            NO                           0519-11\n         MVC   HOWOPEN,0(R5)       SAVE 2 OR 3                     CBT1\n         MVI   WROTE1,0            NEXT WRITE WILL BE FIRST WRITE  CBT1\n         RDJFCB ((3))                                              CBT1\n         OPEN  ((3),OUTPUT)\n         B     OTRET\nOTRET    L     R13,SAVEOT+4\n         RETURN (14,12),RC=0\nOPENERR  DS    0H\n         WTO   'RTAPE, INVALID OPEN DCB NUMBER',ROUTCDE=11\n         ABEND 4\nNOTTAPE1 DS    0H                                               0519-11\n         WTO   'RTAPE SYSUT1 NOT TAPE',ROUTCDE=11               0519-11\n         ABEND 101\nNOTTAPE2 DS    0H                                               0519-11\n         WTO   'RTAPE SYSUT2 NOT TAPE',ROUTCDE=11               0519-11\n         ABEND 102\n         EJECT\nCLOSET   SAVEIT CLOSET\n* CALL   CLOSET(K,L)                   CLOSE      TAPE\n*        K   = 1 OR 2 (WHICH TAPE)\n*        L   = 1 FOR INPUT\n*        L   = 2 FOR OUTPUT\n* ----------------------------------------------------------\n         LR    R10,R1              PARM ADDRESS\n         BAL   R9,TAPEDCB\n         L     R2,CURRDCBT         GET CURRENT DCBT\n         L     R3,$DDDCB(,R2)      GET DCB\n         L     R4,$DDFLAG(,R2)     GET FLAGS\n         TM    0(R4),$INPUT+$OUTPUT OPENED AT ALL?\n         BZ    CLOSERET\n         CLOSE ((3),REWIND)\nCLOSERET DS    0H\n         RESTORE\n         LA    R15,0\n         BR    R14\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*              INTERNAL ROUTINES                                     *\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*--------------------------------------------------------------------*\n*              TAPEDCB  SET CURRDCBT                                 *\n*--------------------------------------------------------------------*\n         DROP  R12\nTAPEDCB  DS    0H\n         BALR  R11,0\n         USING *,R11\n         XC    CURRDCBT,CURRDCBT\n         L     R1,PARMDCB\n         CLC   F1,0(R1)            IS IT SYSUT1\n         BE    TAPEUT10             YES\n         CLC   F2,0(R1)            IS IT SYSUT2\n         BE    TAPEUT20             YES\n         WTO   'RTAPE DCB VALID IN VALID',ROUTCDE=11\n         ABEND 2\nTAPEUT10 DS    0H\n         LA    R0,DDUT1\n         ST    R0,CURRDCBT\n         BR    R9\nTAPEUT20 DS    0H\n         LA    R0,DDUT2\n         ST    R0,CURRDCBT\n         BR    R9\n         DROP  R11\n         EJECT\n*--------------------------------------------------------------------*\n*              DATA                                                  *\n*--------------------------------------------------------------------*\nSAVE     DS    18F\nSAVEOT   DS    18F\nF0       DC    F'0'\nF1       DC    F'1'\nF2       DC    F'2'\nF3       DC    F'3'                                                CBT1\nHOWOPEN  DC    F'0'                                                CBT1\nWROTE1   DC    F'0'                                                CBT1\nFFFF     DC    X'FFFF',AL2(0)\nF64K     DC    A(X'0000FFFF')\n*\nCURRDCBT DC    A(0)                POINTS TO CURRENT DDUT BELOW\n$DDNAM   EQU   0\n$DDFLAG  EQU   8\n$DDDCB   EQU   12\n*\nNOTES    DC    CL32'64K VERSION'\nDDUT1    DC    CL8'SYSUT1',A(FLAG1),A(SYSUT1)\nDDUT2    DC    CL8'SYSUT2',A(FLAG2),A(SYSUT2)\n*\nFLAG1    DC    X'00'\nFLAG2    DC    X'00'\n$NULL    EQU   X'80'\n$INPUT   EQU   X'40'\n$OUTPUT  EQU   X'20'\n$64KMAX  EQU   X'10'\nDUM      DS    C\n*--------------------------------------------------------------------*\n*              CCW AND IOB                                           *\n*--------------------------------------------------------------------*\n         DC    0D'0',CL8'IOB HERE'\nWIOB     DC    7D'0'\nWIOBLN   EQU   *-WIOB\n         DC    0D'0',CL8'CCW HERE'\nCCWS     DC    8D'0'               WORKING CCWS\nECB      DC    F'0'\nECBA     DC    AL3(ECB),X'00'\n*\nWDEC     DC    2D'0'               WORKING STORAGE\nDEVDT    DC    F'0'                DEVTYPE FOR GENERIC DEVTYPE  0519-11\nDEVD1    DC    F'0'                DEVTYPE FOR SYSUT1           0519-11\nDEVD2    DC    F'0'                DEVTYPE FOR SYSUT2\u00a2          0519-11\n*\nXJFCB1   DC    0F'0',X'87',AL3(JFCB1)\nXJFCB2   DC    0F'0',X'87',AL3(JFCB2)\nJFCB1    DC    0F'0',CL176' '\nJFCB2    DC    0F'0',CL176' '\n         EJECT\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,RECFM=U,BUFNO=2,                 X\n               OPTCD=Z,EXLST=XJFCB1,  DCBE=SYSUT1E,                    X\n               DEVD=TA,EODAD=RDEOF,MACRF=(E),BUFOFF=0\nSYSUT1E  DCBE  BLKSIZE=256*1024\n         EJECT\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,RECFM=U,BUFNO=2,                 X\n               OPTCD=Z,EXLST=XJFCB2,  DCBE=SYSUT2E,                    X\n               DEVD=TA,EODAD=RDEOF,MACRF=(E),BUFOFF=0\nSYSUT2E  DCBE  BLKSIZE=256*1024\n         LTORG ,\n         DROP  ,\n$DC      EQU   X'80'               DATA CHAINING\n$CC      EQU   X'40'               COMMAND CHAINING\n$SLI     EQU   X'20'               SUPPRESS LENGTH INDICATOR\n*              CMD  ,BUFFER ADDR ,FLGS    ,LENGTH\n         USING BUF1,R9\nCCWRDN   CCW   X'02',65535*0,$DC+$SLI,X'FFFF' READ NORMAL\n         CCW   X'00',65535*0,$SLI,X'0001'     READ NORMAL\nCCWRDNLN EQU   *-CCWRDN\nCCWWRN   CCW   X'01',65535*0,$DC+$SLI,X'FFFF' WRITE NORMAL\n         CCW   X'00',65535*0,$SLI,X'0001'     WRITE NORMAL\nCCWWRNLN EQU   *-CCWWRN\nCCWRDL   CCW   X'02',65535*0,$DC+$SLI,X'FFFF' READ LARGE\n         CCW   X'00',65535*1,$DC+$SLI,X'FFFF'\n         CCW   X'00',65535*2,$DC+$SLI,X'FFFF'\n         CCW   X'00',65535*3,$DC+$SLI,X'FFFF'\n         CCW   X'00',65535*4,$SLI,4\nCCWRDLLN EQU   *-CCWRDL\nCCWWRL   CCW   X'01',65535*0,$DC+$SLI,X'FFFF' WRITE LARGE\n         CCW   X'00',65535*1,$DC+$SLI,X'FFFF'\n         CCW   X'00',65535*2,$DC+$SLI,X'FFFF'\n         CCW   X'00',65535*3,$DC+$SLI,X'FFFF'\n         CCW   X'00',65535*4,$SLI,4\nCCWWRLLN EQU   *-CCWWRL\nCCWRW    CCW   X'07',DUM,$SLI,1    REWIND TAPE\nCCWRWLN  EQU   *-CCWRW\nCCWWTM   CCW   X'1F',DUM,$SLI,1    WRITE TAPE MARK\nCCWWTMLN EQU   *-CCWWTM\nCCWFSF   CCW   X'3F',DUM,$SLI,1    FOWARD SPACE FILE\nCCWFSFLN EQU   *-CCWFSF\nCCWBSF   CCW   X'2F',DUM,$SLI,1    BACK SPACE FILE\nCCWBSFLN EQU   *-CCWBSF\nCCWFSR   CCW   X'37',DUM,$SLI,1    FOWARD SPACE RECORD\nCCWFSRLN EQU   *-CCWFSR\nCCWBSR   CCW   X'27',DUM,$SLI,1    BACK SPACE RECORD\nCCWBSRLN EQU   *-CCWBSR\nBUF1     DS    X\n         EJECT ,\n*--------------------------------------------------------------------*\n*              DSECTS                                                *\n*--------------------------------------------------------------------*\nPARMS    DSECT ,\nPARMDCB  DS    A        DCB        @ -> F'1' OR F'2'\nPARMDATA DS    A        READ/WRITE @ OF BUFFER\nPARMOPEN EQU   PARMDATA OPEN       @ -> F'1' INPUT, F'2' OUTPUT\nPARMSKIP EQU   PARMDATA FSR/BSR    @ -> COUNT OF RECORDS TO SKIP\nPARMLEN  DS    A        READ/WRITE @ OF LENGTH\n*\n         IEZIOB DSECT=YES\n         YREGS ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SPY": {"ttr": 12293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x16\\x00\\x97 _\\x01\\x104\\x1f\\x12H\\x05^\\x04\\xbd\\x05^\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1997-07-24T00:00:00", "modifydate": "2010-12-07T12:48:16", "lines": 1374, "newlines": 1213, "modlines": 1374, "user": "KBASS"}, "text": "         MACRO\n&L       SBASET &ROW=R14,&COL=R15\n         PUSH  PRINT\n         PRINT NOGEN\n         LR    R14,R9              ROW NUMBER                   KMB1\n         LA    R15,1               COL NUMBER (ALWAYS 1)        KMB1\n         BAL   R4,SBACALC          CALL ROUTINE                 KMB1\n         MVC   0(5,R5),=X'1140401DC4' MODEL SBA/SF              KMB1\n         MVC   1(2,R5),SBACMD      MOVE IN CALCULATED SBA       KMB1\n         LA    R9,1(,R9)           POINT TO NEXT ROW            KMB1\n         POP   PRINT\n         MEND  ,\n         PUNCH ' ORDER SPY(P)'\n         PUNCH ' SETCODE AC(1)'\n*******************************************************************\n*                                                                 *\n*            D I S C L A I M E R    S E C T I O N                 *\n*                                                                 *\n*******************************************************************\n*                                                                 *\n* THIS MATERIAL HAS BEEN USED SUCCESSFULLY & TO THE BEST OF OUR   *\n* KNOWLEDGE  THEY  ARE  OPERATIONAL, HOWEVER  NO  WARRANTY        *\n* IS MADE TO THE ACCURACY OF THE PROGRAMS OR RELATED MATERIAL AND *\n* NO RESPONSIBILITY IS ASSUMED  FOR ANY MODIFICATION  DIRECTLY OR *\n* INDIRECTLY  CAUSED BY  THEIR USE.  IT IS THE USERS              *\n* RESPONSIBILITY  TO  EVALUATE THE  USEFULLNESS  OF THE  MATERIAL *\n* SUPPLIED .                                                      *\n*                                                                 *\n* WE DO NOT GUARANTEE TO  KEEP ANY  MATERIAL PROVIDED  UP TO DATE *\n* NOR DO WE GUARANTEE TO  PROVIDE ANY  CORRECTIONS OR  EXTENSIONS *\n* DESCRIBED BY THE USER OR  CORRECTIONS OR EXTENSIONS MADE IN THE *\n* FUTURE .                                                        *\n*                                                                 *\n*******************************************************************\n***********************************************************************\n*        FOR AUTHORIZATION - INSERT GROUPS OR *USER INTO THE AUTHNAME *\n*        TABLE.                                                       *\n*                                                                     *\n*        F AUTHNAME LAST                                              *\n*                                                                     *\n*        DISPLAY MVS CONSOLE DISPLAY WITH AUTOMATIC REFRESH OF SCREEN *\n*        TO PRESENT A CONSOLE APPEARANCE.                             *\n*                                                                     *\n*        USED THE BASIC CROSS MEMORY CONSOLE BUFFER READ FROM THE     *\n*        CDF PROGRAM ON THE SHARE TAPE, AND MODIFIED TO A COMMAND     *\n*        PROCESSOR HIGHLIGHTING THE HIGHLIGHTED MESSAGES - P.MURPHY   *\n*                                                                     *\n***********************************************************************\n* ORIG.  FROM CBTTAPE.ORG FILE 025  TU SERVICES  PGM=CONS390          *\n***********************************************************************\n*        UPDATE LOG                                                   *\n***********************************************************************\n* 08/02/2007 KMB1-SAM BASS - MCLANE CO.                               *\n*        HEAVILY MODIFIED.                                            *\n*                                                                     *\n*  1.    I CHOSE THIS CONSOLE/SPY PROGRAM SINCE IT HAD THE BASIC      *\n*        STRUCTURE IN PLACE TO SUPPORT 3270 MODELS 2,3,4,5.           *\n*        BUT IT ONLY COULD LOOK AT MOD-2 CONSOLES.                    *\n*        I TOOK IT TO THE NEXT LEVEL AND NOW IT WILL WORK WITH        *\n*        ALL CONSOLE SIZES UP TO 54X132.                              *\n*        IF THE CONSOLE IS BIGGER THAN THE TERMINAL THEN I TRUNCATE   *\n*        THE WIDTH AND LOP OFF THE TOP LINES.  I DID NOT FEEL LIKE    *\n*        DOING THE PAGING THING LIKE SOME OF THE CONSOLE/SPY PROGRAMS.*\n* 2.     I ALWAYS CHOOSE THE ALTERNATE SIZE (HOPEFULLY IT IS LARGER   *\n*        THAN THE PRIMARY).  MAYBE I SHOULD TEST WHICH IS LARGER!     *\n* 3.     I CHANGED THE SECURITY ENTRIES TO BE RACF GROUPS INSTEAD OF  *\n*        USERIDS.  I DO STILL SUPPORT USERIDS BY HAVING \"*USERID\".    *\n* 4.     I INCLUDED THE IPL VOLSER IN ADDITION TO THE IPL UCB         *\n* 5.     I TRIED MY BEST TO REMOVE HARD CODED OFFSETS TO DATA AREAS   *\n*        AND LENGTHS TO MOVE DATA.                                    *\n*                                                                     *\n* 08/06/2007 KMB1-SAM BASS - MCLANE CO. SBASS@MCLANECO.COM            *\n*                                                                     *\n* 1.     CHANGED TO GENERATE THE SBA DYNAMICALLY SO THIS CAN SUPPORT  *\n*          ANY SIZE TSO TERMINAL                                      *\n* 2.     SUPPORTS 14-BIT SBA TO SUPPORT LARGE TERMINAL SIZES          *\n*          IF  ROW*COL > 4096                                         *\n* 3.     ALLOW 'P' OR 'A' TO BE PASSED TO PROGRAM TO FORCE            *\n*          PRIMARY OR ALTERNATE TERMINAL SCREEN SIZE.                 *\n*                                                                     *\n* 07/06/2009 ZOS19-SAM BASS - MCLANE CO. SBASS@MCLANECO.COM           *\n* 1.     CHANGED TO SUPPORT Z/OS 1.9, WILL ONLY COMPILE WITH Z/OS 1.9 *\n*          AND  ABOVE                                                 *\n* KMB2   CHANGED TO SUPPORT Z/OS 1.9, CONVERTED 'SVC 34' TO MGCRE     *\n*                                                                     *\n*                                                                     *\n*              VVV --------------- VVVVVVVVVVVVVVVVVVVVVVV            *\n***********************************************************************\n$AUTHOK  EQU   0                   0= NO SVC, 1=USE AUTH SVC    KMB1\n$AUTHSVC EQU   999                 CHANGE TO YOUR AUTH SVC      KMB1\nSPY      AMODE 31\nSPY      RMODE 24\nSPY      CSECT\n         SAVE  (14,12),T,SPY_MCLANE_&SYSDATC._&SYSTIME.\n         LR    R11,R15            LOAD ADDRESS OF ENTRY POINT\n         LA    R12,2048(,R11)     ADDRESS OF NEXT BASE REGISTER\n         LA    R12,2048(,R12)     ADDRESS OF NEXT BASE REGISTER\n         USING SPY,R11,R12        R12 BASE REGISTER\n         LR    R2,R1\n         GETMAIN R,LV=WORKLENG,SP=1\n         LR    R3,R1\n         ST    R13,4(,R3)          SAVE THE CALLER'S R13\n         ST    R3,8(,R13)\n         LR    R13,R3\n         USING WORKAREA,R13\n*--------------------------------------------------------------------*\n*              INITIALIZE                                            *\n*--------------------------------------------------------------------*\n         MVI   BLANKS,X'40'\n         MVC   BLANKS+1(L'BLANKS-1),BLANKS\n         MVI   CONSFLAG,X'00'\n         MVI   USERFLAG,X'00'\n         MVI   CNSLFLAG,X'00'\n         MVI   THRUFLAG,X'00'\n         MVI   ISSUFLAG,X'00'\n         MVC   CMDLINE,BLANKS\n         MVC   AXLIST(4),=Y(1,0)   INITIALIZE AXLIST            KMB1\n         MVC   WMGCRE(MGCRELN),MGCRE INITIAL MGCRE              KMB2\n         MVI   WFLAG2,0                                         KMB1\n*--------------------------------------------------------------------*\n*              CHECK TO SEE IT 'P' OR 'A' WAS PASSED TO TELL US      *\n*              TO USE PRIMARY OR ALTERNATE TERMINAL SIZE             *\n*--------------------------------------------------------------------*\n         TM    0(R2),X'80'          IS THIS PARM?               KMB1\n         BZ    CHKCPPL             NOPE                         KMB1\n         L     R1,0(,R2)           GET PARM/CPPL                KMB1\n         OI    2(R1),C' '          UPPERCASE                    KMB1\n         CLI   2(R1),C'P'          USE PRIMARY?                 KMB1\n         BE    PARM80P                                          KMB1\n         CLI   2(R1),C'A'          USE ALTERNATE?               KMB1\n         BE    PARM80A                                          KMB1\n         B     PARM99                                           KMB1\nCHKCPPL  DS    0H                                               KMB1\n         L     R1,0(,R2)           GET CPPLBUF                  KMB1\n         LH    R15,2(,R1)          GET PARAMETER OFFSET         KMB1\n         LA    R1,4(R15,R1)        POINT TO PARM                KMB1\n         OI    0(R1),C' '          UPPERCASE                    KMB1\n         CLI   0(R1),C'P'          USE PRIMARY?                 KMB1\n         BE    PARM80P                                          KMB1\n         CLI   0(R1),C'A'          USE ALTERNATE?               KMB1\n         BE    PARM80A                                          KMB1\n         B     PARM99                                           KMB1\nPARM80P  DS    0H                                               KMB1\n         OI    WFLAG2,$2PRIM       SET TO USE PRIMARY SIZE      KMB1\n         B     PARM99                                           KMB1\nPARM80A  DS    0H                                               KMB1\n         OI    WFLAG2,$2ALT        SET TO USE ALTERNATE SIZE    KMB1\nPARM99   DS    0H                                               KMB1\n*--------------------------------------------------------------------*\n*              USE RACF GROUP TO VALIDATE WHETHER THIS USER IS       *\n*              ALLOWED TO USE THIS PROGRAM                           *\n*--------------------------------------------------------------------*\n*        MVI   VIPFLG,0            RESET VIP FLAG                  KMB1\n*                                                                  KMB1\n*        CHECK THE RACF GROUP TO VERIFY VIP                        KMB1\n*                                                                  KMB1\n         L     R15,PSAAOLD-PSA         LOAD A(ASCB)                KMB1\n         L     R15,ASCBASXB-ASCB(,R15)    A(ASXB) AND              KMB1\n         L     R15,ASXBSENV-ASXB(,R15)       A(ACEE)               KMB1\n         LTR   R15,R15                 ACEE AVAILABLE?             KMB1\n         BZ    EXIT                    NO -- CONTINUE              KMB1\n         MVC   USERID,BLANKS       BLANK OUT USERID                KMB1\n         MVC   USERID(7),ASXBUSER-ASXB(R15) GET USERID             KMB1\n         SLR   R2,R2                   CLEAR THE REGISTER AND      KMB1\n         LA    R3,ACEEGRPN-ACEE(,R15)  LOAD GROUP  ADDRESS         KMB1\n*--------------------------------------------------------------------*\n*              SCAN TABLE TO VERIFY                                  *\n*--------------------------------------------------------------------*\n         LA    R8,AUTHNAME         LOAD ADDR OF AUTHORIZED NAME    KMB1\nAUTHLOOP CLI   0(R8),X'FF'         END OF AUTHNAME TABLE?          KMB1\n         BE    EXIT                YES, GET OUT                    KMB1\n         CLC   0(8,R8),0(R3)       SEE IF RACF GROUP IN TABLE      KMB1\n         BE    AUTHED              YES, GO DO IT                   KMB1\n         CLI   0(R8),C'*'          IS THIS A USER ENTRY?           KMB1\n         BNE   AUTH0100            NO                              KMB1\n         CLC   1(7,R8),USERID      IS THIS USER IN THE TABLE       KMB1\n         BE    AUTHED              YES                             KMB1\nAUTH0100 DS    0H                                                  KMB1\n         LA    R8,8(,R8)           INCREMENT TO NEXT TABLE ENTR    KMB1\n         B     AUTHLOOP            LOOP UNTIL DONE                 KMB1\nAUTHED   DS    0H                                                  KMB1\n*        MVI   VIPFLG,X'FF'        YES, SUPER USER                 KMB1\n*\n*                                                               KMB1\n*  SETUP STAX FOR ATTENTION INTERRUPTIONS                       KMB1\n*                                                               KMB1\n         MVI   ATTNFLG,0                                        KMB1\n         LA    R3,STAXLIST         R3 = ADDRESS OF STAX LIST    KMB1\n         STAX  ATTNEXIT,MF=(E,(3)) ATTN EXIT TRAP               KMB1\n         SPACE 3                                                KMB1\n*\n         MVI   AUTOFLAG,X'00' AUTO MODE FLAG\n         MVI   RESHOWFL,X'00' RESHOW INDICATOR\n         MVI   SCREEN,X'C3' WCC\n         XC    CLEAR(CLEARLEN),CLEAR ZERO TPUT CLEARSCRN AREA   KMB1\n         MVC   CLEAR(CLEARLEN),CLR  CLEAR SCREEN CONTROL CHARS  KMB1\n*--------------------------------------------------------------------*\n*              GET TERMINAL ROW/COLS ON ENTRY                        *\n*              GET TERMINAL PRIMARY AND ALTERNATE SIZES              *\n*              SET TERMINAL TO ALTERNATE SIZES                       *\n*--------------------------------------------------------------------*\n         GTSIZE ,                                               KMB1\n         LTR   R0,R0              DISPLAY DEVICE?               KMB1\n         BZ    FREESKIP           YES, GO FREE AND RETURN       KMB1\n         ST    R0,TERMOROW         SAVE TERM ROWS               KMB1\n         ST    R1,TERMOCOL         AND TERM COLUMNS             KMB1\n*                                                               KMB1\n         LA    R2,PRMSIZE                                       KMB1\n         LA    R3,ALTSIZE          GET PRIM/ALT SIZES           KMB1\n         GTTERM PRMSZE=(2),ALTSZE=(3),MF=(E,WGTTERM)            KMB1\n         SLR   R1,R1                                            KMB1\n         IC    R1,PRMSIZE          PRM SIZE ROWS 1 BYTE         KMB1\n         ST    R1,PRMSZROW                                      KMB1\n         IC    R1,PRMSIZE+1        PRM SIZE COLS 1 BYTE         KMB1\n         ST    R1,PRMSZCOL                                      KMB1\n*                                                               KMB1\n         IC    R1,ALTSIZE          ALT SIZE ROWS 1 BYTE         KMB1\n         ST    R1,ALTSZROW                                      KMB1\n         IC    R1,ALTSIZE+1        ALT SIZE COLS 1 BYTE         KMB1\n         ST    R1,ALTSZCOL                                      KMB1\n*                                                               KMB1\n         TM    WFLAG2,$2PRIM       USE PRIMARY                  KMB1\n         BZ    SETALT                                           KMB1\nSETPRIM  STSIZE LINELOC=PRMSZROW,SIZELOC=PRMSZCOL               KMB1\n         B     SETSIZE9                                         KMB1\nSETALT   STSIZE LINELOC=ALTSZROW,SIZELOC=ALTSZCOL               KMB1\nSETSIZE9 DS    0H                                               KMB1\n         GTSIZE ,\n         LTR   R0,R0              DISPLAY DEVICE?\n         BZ    FREESKIP           YES, GO FREE AND RETURN\n         STH   R0,TERMROWS         SAVE TERM ROWS               KMB1\n         STH   R1,TERMCOLS         AND TERM COLUMNS             KMB1\n         B     PROCESS                                          KMB1\n*\nPROCESS  DS    0H\n         MVI   HELPFLAG,X'00'\n         MVI   CMDFLAG,X'00'\n*--------------------------------------------------------------------*\n*              DETERMINE IF WE SHOULD USE 14-BIT SBA                 *\n*--------------------------------------------------------------------*\n         LH    R0,TERMROWS                                      KMB1\n         MH    R0,TERMCOLS                                      KMB1\n         C     R0,=F'4096'                                      KMB1\n         BL    NO14BIT                                          KMB1\n         OI    WFLAG2,$2USE14      USE 14 BIT SBA               KMB1\nNO14BIT  DS    0H                                               KMB1\n*--------------------------------------------------------------------*\n*              FIND CONSOLE'S ADDRESS SPACE AND SAVE ASID            *\n*--------------------------------------------------------------------*\n         LA    R1,16\n         L     R1,0(R1)\n         USING CVT,R1\n         L     R1,CVTASVT\n         DROP  R1\n         USING ASVT,R1\n         L     R5,ASVTMAXU\n         LA    R15,ASVTENTY-4\nASVTLOOP BCTR  R5,0\n         LTR   R5,R5\n         BZ    CONABEND\n         LA    R15,4(,R15)\n         ICM   R6,15,0(R15)\n         BM    ASVTLOOP\n         USING ASCB,R6\n         ICM   R7,15,ASCBJBNS\n         BZ    ASVTLOOP\n         CLC   =C'CONSOLE',0(R7)\n         BNE   ASVTLOOP\n         SR    R1,R1\n         ICM   R1,3,ASCBASID\n         DROP  R1,R6\nSTORECON DS    0H\n         ST    R1,CONSASID\n         BAL   R3,AUTHRIZ\n*--------------------------------------------------------------------*\n*              GET THE AX FOR THE CONSOLE ASID                       *\n*--------------------------------------------------------------------*\n         MVC   AXLIST(2),=H'1'\n         CLC   AXLIST+02(2),=H'0'  IS THERE A PREVIOUS AXLIST?\n         BZ    AXNEW\n         AXFRE AXLIST=AXLIST\nAXNEW    DS    0H\n         AXRES AXLIST=AXLIST      RESERVE AN AX\n         L     R1,CONSASID        'CONSOLE' ASID\n         AXEXT ASID=(1)           EXTRACT AX OF 'CONSOLE'IN R0\n         AXSET AX=(0)             SET OUR AX TO THAT OF CONSOLE\n         BAL   R3,UNAUTH\n         B     SHOWCONS\n*--------------------------------------------------------------------*\n*              EXIT POINT                                            *\n*--------------------------------------------------------------------*\nAXFREE   DS    0H\n         CLC   AXLIST+02(2),=H'0'  IS THERE A PREVIOUS AXLIST?\n         BZ    AXFREE2\n         AXFRE AXLIST=AXLIST\nAXFREE2  DS    0H\nSHOWRTRN DS    0H\nFREESKIP DS    0H\n*\n         STSIZE LINELOC=TERMOROW,SIZELOC=TERMOCOL ORIGINAL SIZE KMB1\n         TPUT  CLRALT,CLRALTLN,FULLSCR  CLEAR/ERASE ALTERNATE   KMB1\n         STLINENO LINE=1\n         STFSMODE OFF\n         STTMPMD OFF\n*\nEXIT     DS    0H\n         LR    R3,R13\n         L     R13,SAVEAREA+4 RESTORE THE CALLER'S R13\n         FREEMAIN RC,A=(3),LV=WORKLENG,SP=1\n         SR    R15,R15\n         RETURN (14,12),RC=(15)\n         EJECT\n*--------------------------------------------------------------------*\n*              BEGINNING OF PROCESS                                  *\n*              SET TO FULL SCREEN MODE                               *\n*--------------------------------------------------------------------*\nSHOWCONS DS    0H\n         STFSMODE ON,INITIAL=YES  FULL SCREEN MODE ON\n         STTMPMD ON\n         TM    WFLAG2,$2PRIM                                    KMB1\n         BZ    SHOW0100                                         KMB1\n         TPUT  CLRPRM,CLRPRMLN,FULLSCR  CLEAR/ERASE PRIMARY     KMB1\n         B     SHOW0900                                         KMB1\nSHOW0100 DS    0H                                               KMB1\n         TPUT  CLRALT,CLRALTLN,FULLSCR  CLEAR/ERASE ALTERNATE   KMB1\nSHOW0900 DS    0H                                               KMB1\n*---------------------------------------------------------------------*\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*---------------------------------------------------------------------*\nBLDUCMS  L     R4,16              R4 = ADDR OF CVT\n         USING CVT,R4\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         DROP  R4\n         USING UCM,R4\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB\n         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB\n         LR    R5,R4              BASE\n         S     R5,=F'4'           R5 = ADDR OF FIRST UCM PREFIX\n         USING UCMPRFX,R5\n         TM    UCMSFLG1,UCMSYSE   NO CONSOLES?\n         BO    CONABEND           YES\n         DROP  R5\n         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY\n         XR    R2,R2              R2 = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R5,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB\n         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)\n         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY\n         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?\n         BL    UCMLOOP            NOPE; KEEP GOING\nUCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND\n         CLI   CNSLFLAG,X'FF'\n         BNE   SETMAST\n         MVC   CONSOLD,CONSCURR\n         L     R4,CONSCURR\n         LA    R4,1(,R4)\n         B     MASTSCAN\n         DROP  R4\n*---------------------------------------------------------------------*\n*        SCAN THE UCM FOR THE MASTER CONSOLE AS THE DEFAULT           *\n*---------------------------------------------------------------------*\nSETMAST  SR    R4,R4\n         ST    R4,CONSCURR\nMASTSCAN LA    R5,UCMTAB          SET POINTER TO UCM ADDRESS TABLE\nCKNUMUCM CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   MASTCONT           NO, CONTINUE\n         CLI   CNSLFLAG,X'FF'\n         BNE   CONCHECK\n         CLI   THRUFLAG,X'FF'\n         BE    NOCONS\n         MVI   THRUFLAG,X'FF'\n         SR    R4,R4              START W/ FIRST ENTRY\n         B     MASTCONT\n*\n*              ERROR IF NO CONSOLES FOUND\n*\nCONABEND EQU   *\nNOCONS   TPUT  MSGNO2,43\n         TPUT  CLEAR,CLEARLEN,FULLSCR                           KMB1\n         B     AXFREE\nMSGNO2   DC    CL43'ALL CONSOLES OFFLINE, GOING TO MASTER TRACE'\n         SPACE 3\nCONCHECK MVI   CNSLFLAG,X'FF'\n         MVI   THRUFLAG,X'FF'\n         B     SETMAST\n*\n*              HERE IS THE SCAN FOR THE MASTER\n*\nMASTCONT SLL   R4,2               MAKE CONSOLE NUMBER TABLE INDEX\n         LA    R5,0(R5,R4)        SET POINTER TO UCM ADDRESS SLOT\n         L     R5,0(0,R5)         SET POINTER TO UCM\n         LTR   R5,R5\n         BZ    NEXT\n         USING UCMLIST,R5         TELL ASSEMBLER ABOUT UCM\n         CLI   CNSLFLAG,X'FF'\n         BE    SKIPMSTR\n         TM    UCMDIDCS,UCMAHERE  ON THIS SYSTEM?\n         BZ    NEXT               NO ? BRANCH\n         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?\n         BNZ   ACTIVCHK           YES ? FOUND THE MASTER CONSOLE ..\n         B     NEXT\nSKIPMSTR EQU   *\n         TM    UCMDIDCS,UCMAHERE  ON THIS SYSTEM?\n         BZ    NEXT               NO ? BRANCH\n         TM    UCMDISP1,UCMDISPC  GRAPHICS\n         BZ    NEXT\nACTIVCHK TM    UCMATR,UCMUF       ACTIVE?\n         BNZ   MASTFND\nNEXT     SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE\n         LA    R4,1(0,R4)         SET POINTER TO NEXT CONSOLE\n         B     MASTSCAN           CONTINUE MASTER CONSOLE SCAN LOOP\nMASTFND  SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE\n         ST    R4,CONSCURR        SET VALID CONSOLE NUMBER (MASTER)\n         DROP  R5                 DONT NEED UCM ADDRESSABILITY NOW\nNEXTPAGE LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\n         ICM   R4,15,CONSCURR     R4 = CONSOLE TO BE DISPLAYED\n         BZ    WRTERR4            WE HAVE NO CONSOLE ZERO (MASTER)\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   GETUCM             NO, CONTINUE\nRESETCN  L     R4,CONSOLD         RESET TO OLD CONSOLE\n         ST    R4,CONSCURR        AND SAVE IT\nGETUCM   SLL   R4,2               MULTIPLY BY 4\n         LA    R5,0(R5,R4)        R5 = ADDR OF ADDR OF UCM\n         L     R5,0(0,R5)         R5 = ADDR OF UCM\n         USING UCMLIST,R5\n         L     R6,UCMXB           R6 = ADDR OF RDCM\n         ST    R6,UCMTABX\n         LTR   R6,R6              IS THIS A GRAPHICS CONSOLE?\n         BP    GRAPHICS           YES\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\nWRTERR4  DS    0H\n         B     RESETCN            RESET THE CONSOLE NUMBER\nGRAPHICS EQU   *\n         L     R6,UCMFEXTP        UCM FIXED EXTENSION\n         USING UCMEFEXT,R6        ADDRESSABILITY\n         MVC   USER,UCMEFCNM      LOGON ID\n         DROP  R6\nAUTHDONE EQU   *\n         MVC   CONSOLD,CONSCURR\n         MVC   HEADING,HEADING1\n***********************************************************************\n*    FOR SYSH UNCOMMENT THE FOLLOWING 2 LINES TO LOOK AT ALTERNATE    *\n***********************************************************************\n*        CLI   CONSFLAG,X'FF'\n*        BNE   CNSLSW\n         CLI   ISSUFLAG,X'FF'\n         BNE   CONSINIT\n         MVC   HEADING+45(18),NOTISSUD\n         MVI   ISSUFLAG,X'00'\nCONSINIT MVI   CNSLFLAG,X'00'\n*        BAL   R3,AUTHRIZ                                       KMB1\n*--------------------------------------------------------------------*\n*              SET SSAR TO THE CONSOLE ASID                          *\n*--------------------------------------------------------------------*\n         L     R1,CONSASID        'CONSOLE' ASID\n         SSAR  R1                 SET 'CONSOLE' AS SECONDARY\n         PRINT ON,GEN\n         SLR   R0,R0              SECONDARY KEY\n         L     R6,UCMTABX\n         LA    R1,4               TRUE LENGTH\n         MVCP  RDCM(R1),0(R6),R0  ADDRESS OF PAGEABLE DCM (DCMADTRN)\n         LA    R1,1\n         MVCP  TYPE(R1),15(R6),R0  ATTRIB DCMDEVTY  X'14' = EXTENDED\n*UCMECOLR EQU   X'10'               USABLE FOR EXTENDED COLOR\n*UCMEXTDS EQU   X'04'               DEVICE SUPPORTS EXTENDED DATA\n         L     R7,RDCM\n         USING STRTDCM,R7\n         LA    R1,2                                             KMB1\n         MVCP  CONROW(R1),DCMMSGAL-STRTDCM(R7),R0               KMB1\n         LA    R1,2                                             KMB1\n         MVCP  CONCOL(R1),DCMCORLN-STRTDCM(R7),R0               KMB1\n*--------------------------------------------------------------------*\n*              SET EXECUTED MVC LENGTH FROM CONSOLE TO TERM BUFFER   *\n*--------------------------------------------------------------------*\n         LH    R1,CONCOL           CONSOLE COLUMNS              KMB1\n         TM    TYPE,X'14'          IS IT EXTENDED?\n         BO    COLEXT02            YES\nCOLEXT01 DS    0H\n         SH    R1,=H'07' 6(SBA) +1 FOR EXECUTED MVC'S LATER     KMB1\n         B     COLEXT03\nCOLEXT02 DS    0H                  EXTENDED\n         SH    R1,=H'13' 12(EXTSBA) +1 FOR EXECUTED MVC'S       KMB1\n         B     COLEXT03\nCOLEXT03 DS    0H                                               KMB1\n         STH   R1,CONCOLM6         FOR EXECUTED MVC'S LATER     KMB1\n*--------------------------------------------------------------------*\n*              SET THE CONSOLE BUFFER MOVE LENGTH TO THE MINIMUM     *\n*              OF THE CONSOLE WIDTH OR THE TERMINAL WIDTH-2          *\n*--------------------------------------------------------------------*\n         LH    R0,TERMCOLS         MAX TERMINAL WIDTH           KMB1\n         SH    R0,=H'1'            -1 FOR EXECUTE               KMB1\n         STH   R0,TERMMOVE         MAX MOVE                     KMB1\n         CLR   R1,R0               IS CONSOLE > TERM            KMB1\n         BH    COLEXT04            YEP                          KMB1\n         STH   R1,TERMMOVE         NOPE, MOVE CONS LEN TO TERM  KMB1\nCOLEXT04 DS    0H\n*                                                               KMB1\n         SLR   R0,R0\n         LA    R1,L'LASTLINE      TRUE LENGTH\n         MVCP  LASTLINE(R1),DCMINPUT-STRTDCM(R7),R0\n         LA    R1,L'SIBPTR\n         SLR   R0,R0              SET STORAGE KEY\n         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO CONSOLE BFR\n         LA    R1,2\n         MVCP  HEADING+8(R1),DCMDEL-STRTDCM(R7),R0   ROLL DELETE VAL\n         MVCP  RTME(R1),DCMRTME-STRTDCM(R7),R0       RTME\n         MVCP  RNUM(R1),DCMDL-STRTDCM(R7),R0         RNUM\n         LA    R1,4\n         MVCP  CONL(R1),DCMLSCRN-STRTDCM(R7),R0 @ OF LAST CONS LINE\n*\n         L     R8,SIBPTR         R8 = ADDR OF CONSOLE IMAGE\n         LA    R1,4                                             KMB1\n         MVCP  SCNL(R1),DCMWTBUF-STRTDCM(R7),R0                 KMB1\n         L     R5,SCNL             @ OF LAST BYTE OF SCREEN+1   KMB1\n*                                  AND ADDRESS OF INPUT AREA    KMB1\n         SR    R5,R8               GET LENGTH OF CONSOLE BFR    KMB1\n         TM    TYPE,X'14'        SUPPORT EXTENDED COLOR/DATASTREAM?\n         BO    EXTLNGTH          YES, BRANCH\n         LA    R5,06(,R5)          SIX BYTES FOR SBA\n         B     REGLNGTH\nEXTLNGTH DS    0H\n         LA    R5,12(,R5)          SIX BYTES FOR EXT SBA\nREGLNGTH ST    R5,CONL             SAVE IT\n*--------------------------------------------------------------------*\n*              MOVE THE COMPLETE CONSOLE BUFFERS TO BUF    AREA      *\n*--------------------------------------------------------------------*\n*\n*              R5 IS LENGTH OF CONSOLE DISPLAY\n*              R8 IS POINTER TO FIRST BYTE OF CONSOLE DISPLAY\n*\n         LA    R4,SCREEN           MY BUF\n         AL    R4,=A(SCRLEN)       POINT TO BUF (FOLLOWS SCREEN KMB1\nMOVEBUFF DS    0H\n         TM    TYPE,X'14'          SUPPORT EXTENDED COLOR/DATASTREAM?\n         BO    MOVEL\n         SH    R8,=H'06'           BACK UP TO THE SBA\n         B     RESUMMOV\nMOVEL    SH    R8,=H'12'           BACK UP TO THE EXT SBA\nRESUMMOV SLR   R0,R0               RESET THE KEY\nMVCPLOOP DS    0H\n         MVCP  0(R5,R4),0(R8),R0 LOOP THRU THE CONSOLE BUFFER\n         BZ    GOTITALL\n         AL    R8,=F'256'        MAX LEN ALLOWED\n         AL    R4,=F'256'        MAX LEN ALLOWED\n         SL    R5,=F'256'        MAX LEN ALLOWED\n         B     MVCPLOOP\n*---------------------------------------------------------------------*\n*        IN ORDER TO ISSUE SVCS THE PRIMARY AND                       *\n*        SECONDARY ADDRSPC MUST BE THE SAME                           *\n*---------------------------------------------------------------------*\nGOTITALL DS    0H\n         EPAR  R1                EXTRACT PRIMARY ASN\n         SSAR  R1\n         BAL   R3,UNAUTH                                        KMB1\n         DROP  R5,R7\n         LA    R3,SCREEN         SET POINTER TO FIRST LINE OF BUF\n         AL    R3,=A(SCRLEN)       POINT TO BUF                 KMB1\n*\n         LA    R9,HEADING+10\n         CLI   HEADING+9,C' '\n         BNE   RDMODE\n         LA    R9,HEADING+9\n*\n*              INSERT RTME=\n*\nRDMODE   MVC   0(6,R9),RTMEC\n         SR    R5,R5\n         LH    R5,RTME\n         CVD   R5,DOUBLWD\n         MVC   WORKLINE(5),PATTERN1\n         ED    WORKLINE(5),DOUBLWD+5\n         MVC   6(4,R9),WORKLINE+1\n         CLI   9(R9),C'0'\n         BE    PUTBLNK\n         MVC   7(2,R9),=C'1/'\n         B     PUTRNUM\n*\n*              INSERT RNUM=\n*\nPUTBLNK  MVI   9(R9),C' '\nPUTRNUM  MVC   10(6,R9),RNUMC\n         SR    R5,R5\n         IC    R5,RNUM+1\n         CVD   R5,DOUBLWD\n         MVC   WORKLINE(5),PATTERN1\n         ED    WORKLINE(5),DOUBLWD+5\n         MVC   16(3,R9),WORKLINE+2\n*\n*              INSERT TIME\n*\n         TIME  DEC\n         ST    R0,WORK\n         MVI   WORK+3,X'0C'\n         UNPK  DOUBLWD(7),WORK(4)\n         LA    R9,HEADING+36\n         MVC   0(2,R9),DOUBLWD\n         MVC   3(2,R9),DOUBLWD+2\n         MVC   6(2,R9),DOUBLWD+4\n         MVC   28(8,R9),USER\n         MVC   10(10,R9),BLANKS\n*\n         AGO   .NOTEST\n         UNPK  WORK(3),TYPE(2)     DISPLAY CONSOLE ATTRIBUTES\n         TR    WORK(2),JHEX-240\n         MVC   HEADING+47(2),WORK\n.NOTEST  ANOP\n*--------------------------------------------------------------------*\n*              INSERT ROW,COL MAX  DISPLAY                           *\n*--------------------------------------------------------------------*\n         LH    R1,CONROW           GET NUMBER OF ROWS           KMB1\n         CVD   R1,DOUBLWD          CONVERT TO DECIMAL           KMB1\n         MVC   HEADING+55(4),=X'40212020' SHOW 3 DIGITS         KMB1\n         ED    HEADING+55(4),DOUBLWD+6    AND DO IT.            KMB1\n         MVI   HEADING+59,C','                                  KMB1\n*                                                               KMB1\n         LH    R1,CONCOL           GET NUMBER OF COLS           KMB1\n         SH    R1,=H'4'            ASSUME NON-EXTENDED          KMB1\n         TM    TYPE,X'14'          IS THIS EXTENDED             KMB1\n         BZ    SIZE20               NOPE                        KMB1\n         SH    R1,=H'6'             EXTENDED                    KMB1\nSIZE20   DS    0H                                               KMB1\n         CVD   R1,DOUBLWD          CONVERT TO DECIMAL           KMB1\n         MVC   HEADING+60(4),=X'F0212020' SHOW 3 DIGITS         KMB1\n         ED    HEADING+60(4),DOUBLWD+6    AND DO IT.            KMB1\n         MVC   HEADING+60(4),HEADING+61                         KMB1\n         MVI   HEADING+63,C' '                                  KMB1\n*\n         CLI   AUTOFLAG,X'FF'\n         BNE   FIRSTL\n         MVC   10(10,R9),=C'AUTOUPDATE'\n         EJECT ,\n*--------------------------------------------------------------------*\n*              CALCULATE THE IF THE NUMBER OF CONSOLE LINES WILL     *\n*              FIT ON THE USERS TERMINAL                             *\n*              USER'S TERMINAL CAN HOLD 2 MORE LINES THAN THE CONSOLE*\n*              CAN FOR THE SAME TERM SIZE                            *\n*              SO IF THE CONSOLE LINES IS > TERMINAL ADD 2 TO        *\n*              DIFFERENCE                                            *\n*--------------------------------------------------------------------*\n*\n*              R3 HAS CONSOLE BUFFER START\n*\nFIRSTL   LH    R9,TERMROWS         NUMBER OF LINES ON TERMINAL  KMB1\n         BCTR  R9,0                -1 LEAVE ROOM FOR CMD LINE   KMB1\n*\n         LH    R5,CONROW           NUM ROWS ON CONSOLE\n         ST    R5,CONL             SAVE IT\n         LA    R5,2(,R5)           +2 FOR SIZE DIFFERENCE\n         CR    R9,R5               IS TERM >= CONSOLE LINES+2\n         BNL   FIRSTL1              YES\n*              CONSOLE BIGGER THAN TERMINAL\n         LH    R5,CONROW           NUM ROWS ON CONSOLE\n         SR    R5,R9               HOW MANY TOO BIG\n         LA    R5,2(,R5)           +2 FOR SIZE DIFFERENCE\n         LH    R1,CONROW\n         SR    R1,R5               SUBSTRACT OFF THAT MANY\n         ST    R1,CONL             SAVE IT\n*\n*              NOW ADJUST STARTING CONSOLE ROW FOR THAT DIFFERENCE\n*              R5=# OF CONSOLE LINES TO SKIP\n*\n         LH    R1,CONCOL           GET CONSOLE WIDTH\n         SLR   R4,R4               ZERO FOR MULTIPLY REGISTER\n         MR    R4,R1               GET BYTE OFFSET INTO CONSOLE\n         LA    R3,0(R5,R3)         ADJUST CONSOLE STARTING PLACE\n*--------------------------------------------------------------------*\n*              BUILD THE FIRST LINE                                  *\n*--------------------------------------------------------------------*\nFIRSTL1  DS    0H\n         LA    R5,SCREEN+1            ADDRESS OF FIRST LINE\n*        AP    HEADING(2),HEADING(2)\nNOTMOD5  L     R1,CONL             GET CONSOLE LINES TO DISPLAY\n         LA    R9,1                SBASETROW                    KMB1\n         SR    R10,R10\n         SBASET ,                  MOVE IN FIRST TERMINAL SBA   KMB1\n         LH    R2,TERMMOVE                                      KMB1\n         MVC   6(00,R5),BLANKS                                  KMB1\n         EX    R2,*-6                                           KMB1\n         MVC   5(79,R5),HEADING    MOVE IN HEADING.\n*\n*              INSERT CONSOLE NUMBER\n*\n         SR    R15,R15\n         IC    R15,CONSCURR+3\n         CVD   R15,DOUBLWD\n         MVC   WORKLINE(4),=X'40212020'\n         ED    WORKLINE(4),DOUBLWD+6\n         MVC   78(2,R5),WORKLINE+2\n*\n*        LA    R5,84(,R5)          NEXT TERM BUFFER ADDRESS\n*        LA    R10,85(,R10)        TPUT LENGTH (INCL. WCC)\n         LH    R2,TERMMOVE         GET TERM MOVE LENGTH-1       KMB1\n         LA    R5,1+6(R2,R5)        NEXT TERM BUFFER ADDR       KMB1\n         LA    R10,2+6(R2,R10)      SET NEW TERM TPUT LENGTH    KMB1\n*KMB1    LA    R6,5(,R6)           NEXT TERMINAL SBA\n*\n         CLI   HELPFLAG,X'FF'         HELP?\n         BNE   MOVESTUP\n*--------------------------------------------------------------------*\n*              DISPLAY HELP STUFF                                    *\n*--------------------------------------------------------------------*\n         LA    R9,1                SBASETROW                    KMB1\n         SBASET ,                                               KMB1\n         MVC   5(79,R5),BLANKS\n         LA    R5,84(,R5)             INCREMENT\n         SBASET ,                                               KMB1\n         LA    R1,HELPMSG1         HELP LINE 1\n         MVC   5(79,R5),00(R1)\n         LA    R5,84(,R5)             INCREMENT\n         SBASET ,                                               KMB1\n         MVC   5(79,R5),80(R1)\n         LA    R5,84(,R5)             INCREMENT\n         SBASET ,                                               KMB1\n         MVC   5(79,R5),160(R1)     HELP LINE 3\n         LA    R5,84(,R5)             INCREMENT\n         SBASET ,                                               KMB1\n         MVC   5(79,R5),240(R1)     HELP LINE 4\n         LA    R5,84(,R5)             INCREMENT\n         LA    R10,420(,R10)       84*5\n         CLI   USERFLAG,X'FF'\n         BNE   SPACLOOP\n         B     SPACLOOP\n         EJECT ,\nMOVESTUP LR    R15,R5\n         LA    R9,2                SBASETROW                    KMB1\n***********************************************************************\n*                                                                     *\n* THE CONSOLES WITH EXTENDED DATASTREAMS HAVE THE FOLLOWING FORMATS:  *\n* (THE TYPE WILL HAVE EXTENDED COLOR AND DATASTREAM TURNED ON - X'14')*\n*                                                                     *\n* REF GA23-0059 DATASTREAM PROGRAMMERS REFERENCE                      *\n*                                                                     *\n* 1100002903C0E442F4410040  (THEN 4 BLANKS AND THE LINE)              *\n*                                                                     *\n* 11 SBA FOR 0000 THE FIRST LINE  OR 0050 2ND LINE ETC - 110000       *\n* 2903 - SFE START FIELD EXTENDED FORMAT (29) WITH 03 EXTENDED FIELDS *\n* C0E4 - FIELD ATRIBUTE      E4 - PROT DISPLAY                        *\n* 42F4 - 42 FOREGROUND COLOR F4 IS GREEN F1 IS BLUE F3 PINK ETC       *\n* 4100 - 41 EXTENDED HIGHLIGHTING 00 MEANS DEFAULT F1 BLINK F4 UNDERSC*\n*        F2 REVERSE VIDEO  F0 NORMAL (PER 3270 FIELD ATTRIBUTE)       *\n*                                                                     *\n* THE CONSOLES WITHOUT EXTENDED DATASTREAM HAVE THE FOLLOWING FORMATS:*\n*                                                                     *\n* 11404028E440              (THEN 1 BLANK  AND THE LINE)              *\n*                                                                     *\n* 11 SBA FOR 4040 THE FIRST LINE                                      *\n* 28 ATTRIBUTE CHAR E4 PROT DISPLAY                                   *\n*                                                                     *\n* TOTAL LENGTH NON-EXTENDED 84, EXTENDED DISPLAY LENGTH IS 90         *\n*                                                                     *\n***********************************************************************\n*        R1    HAS NUMBER OF LINES TO MOVE FROM CONSOLE BUFFER\n*        R3    CONSOLE BUFFER\n*        R5    TERMINAL BUFFER\n*        R6    TERMINAL SBA ADDRESSES\n*        R9    CURRENT ROW NUMBER\n*        R15   TERMINAL BUFFER\nMOVELOOP EQU   *\n         CLI   CLRFLAG,X'FF'\n         BE    MVIT\n         TM    TYPE,X'14'             EXTENDED FORMAT?\n         BZ    COMP2                  NO - USE OTHER DISPLACEMENT\n         CLC   5(74,R5),11(R3)        HAS THIS LINE CHANGED?\n         BNE   SETMOVE\n         CLC   4(1,R5),06(R3)         ATTRIBUTE BYTE CHANGED?\n         BE    SKPMV                  NO NEED SENDING DOWN THE LINE\n         B     SETMOVE\nCOMP2    CLC   5(74,R5),5(R3)         HAS THIS LINE CHANGED?\n         BNE   SETMOVE\n         CLC   4(1,R5),04(R3)         ATTRIBUTE BYTE CHANGED?\n         BE    SKPMV                  NO NEED SENDING DOWN THE LINE\nSETMOVE  MVI   CLRFLAG,X'FF'          SCREEN HAS CHANGED FROM HERE DOWN\nMVIT     DS    0H\n         SBASET ,                                               KMB1\nCKMVIT   TM    TYPE,X'14'          EXTENDED FORMAT?\n         BZ    MVIT2               NO - USE OTHER DISPLACEMENT\n*              EXTENDED                                         KMB1\n         MVC   4(1,R5),06(R3)      ATTRIBUTE BYTE\n         LH    R2,TERMMOVE         TERM MVC LEN -1              KMB1\n         MVC   6(00,R5),12(R3)     MOVE LINE OF PRINT           KMB1\n         EX    R2,*-6              MOVE IT IN.                  KMB1\n         B     MVIT3\n*              NON-EXTENDED                                     KMB1\nMVIT2    EQU   *\n         MVC   4(1,R5),04(R3)      ATTRIBUTE BYTE\n         LH    R2,TERMMOVE         NUM COLS -6 OR -12           KMB1\n         MVC   6(00,R5),6(R3)      MOVE LINE OF PRINT           KMB1\n         EX    R2,*-6              MOVE IT IN.                  KMB1\nMVIT3    DS    0H                                               KMB1\n         MVI   5(R5),C' '                                       KMB1\n         LH    R2,TERMMOVE         NUM COLS -6 OR -12           KMB1\n         OC    6(00,R5),BLANKS     MAKE SURE NO CONTROL CHR     KMB1\n         EX    R2,*-6              OC THE WHOLE THING           KMB1\n         LA    R5,1+6(R2,R5)       NEXT LINE                    KMB1\n         LA    R10,1+6(R2,R10)     LENGTH OF TPUT               KMB1\n         B     MOVINCR                                          KMB1\nSKPMV    DS    0H\n         LA    R9,1(,R9)           +1 SINCE WE SKIPPED SBASET   KMB1\nMOVINCR  DS    0H                                               KMB1\n         LH    R2,CONCOL           CONSOLE WIDTH (INCL SBA).    KMB1\n         ALR   R3,R2               CONSOLE BUFFER               KMB1\n         ALR   R15,R2              CONSOLE                      KMB1\n         BCT   R1,MOVELOOP         LOOP\n         MVI   CLRFLAG,X'00'\n*--------------------------------------------------------------------*\n*              FIND THE LAST LINE OF THE TERMINAL SBA                *\n*--------------------------------------------------------------------*\nSPACLOOP DS    0H\n*--------------------------------------------------------------------*\n*              ADD IN THE COMMAND LINE                               *\n*--------------------------------------------------------------------*\n         LH    R9,TERMROWS         SBASETROW TO LAST ROW        KMB1\n         SBASET ,                  LINE ADDRESS                 KMB1\n         MVI   4(R5),X'C8'         UNPROT, HILITE               KMB1\n         MVI   5(R5),X'13'         INSERT CURSOR\n*--------------------------------------------------------------------*\n*              NOW BLANK OUT COMMAND LINE                            *\n*--------------------------------------------------------------------*\n         LH    R2,TERMMOVE         NUMBER COLS -6               KMB1\n         MVC   6(00,R5),BLANKS        LAST LINE IS INPUT LINE   KMB1\n         EX    R2,*-6              MOVE BLANKS                  KMB1\n*--------------------------------------------------------------------*\n*              CHECK FLAGS                                           *\n*--------------------------------------------------------------------*\n         CLI   HELPFLAG,X'FF'\n         BE    GOAHEAD2\n         CLI   IPLFLAG,X'FF'\n         BE    GOAHEAD2\n         CLI   AUTOFLAG,X'FF'\n         BE    AUTOROLL\nGOAHEAD  DS    0H\n         CLI   RESHOWFL,X'FF'\n         BNE   GOAHEAD2\n         MVI   4(R5),X'C9'  X'C9'  UNPROT, HILITE,MDT           KMB1\n         MVI   RESHOWFL,X'00'\n         MVC   6(72,R5),CMDCMD                                  KMB2\n         B     GOAHEAD3\nGOAHEAD2 DS    0H                                               KMB1\nGOAHEAD3 MVI   CMDFLAG,X'00'\n         LH    R2,TERMMOVE         GET TERM MVC LENGTH          KMB1\n         LA    R10,1+6(R2,R10)     TERM SCREEN LENGTH           KMB1\n*        LA    R10,84(,R10)\n         LR    R0,R10\n         LA    R1,SCREEN              ADDRESS OF SCREEN\n         TPUT  (1),(0),FULLSCR        TPUT\n         LA    R1,1                SET CURRENT ROW              KMB1\n         MVC   REPLY,BLANKS           CLEAR\nTGET1    TGET  REPLY,84,ASIS,WAIT     INPUT\n         MVI   HELPFLAG,X'00'\n         CLI   ATTNFLG,0                                        KMB1\n         BNE   AXFREE                                           KMB1\n         B     CHEKOUT\n*--------------------------------------------------------------------*\n*              AUTOROLL AREA                                         *\n*--------------------------------------------------------------------*\nAUTOROLL EQU   *\n         LA    R1,SCREEN              ADDRESS OF SCREEN\n         CLI   RESHOWFL,X'FF'\n         BNE   GOAHEAD5\n         MVI   RESHOWFL,X'00'\n         MVC   6(72,R5),CMDCMD                                  KMB2\n         MVC   REPLY,BLANKS\n         LA    R10,72(,R10)\n         B     GOAHEAD5\n*OAHEAD4 S     R0,=F'79'\nGOAHEAD5 CLI   CMDFLAG,X'FF'\n         BNE   AUTOTPUT\n         LH    R9,TERMROWS         SBASETROW TO LAST ROW        KMB1\n         SBASET ,                     LINE ADDRESS              KMB1\n         MVI   4(R5),X'C8'         UNPROT, HILITE               KMB1\n         MVI   5(R5),X'13'            INSERT CURSOR\n         MVI   CMDFLAG,X'00'\nAUTOTPUT LA    R0,5(,R10)\n         LR    R0,R10\n         TPUT  (1),(0),FULLSCR\n         TGET  REPLY,70,ASIS,NOWAIT\n         STIMER WAIT,BINTVL=TIMER\n*--------------------------------------------------------------------*\n*              WHAT ACTION (AID) KEY WAS PRESSED                     *\n*--------------------------------------------------------------------*\n*                                                               KMB1\n*        60    NO AID                                           KMB1\n*        7D    ENTER                                            KMB1\n*        F1-F9 PF1  - PF9                                       KMB1\n*        7A-7C PF10 - PF12                                      KMB1\n*        C1-C9 PF13 - PF21                                      KMB1\n*        4A-4C PF22 - PF24                                      KMB1\n*        6C    PA1                                              KMB1\n*        6E    PA2                                              KMB1\n*        6B    PA3                                              KMB1\n*        6D    CLEAR                                            KMB1\n*                                                               KMB1\nCHEKOUT  CLI   REPLY,X'7D'         ENTER\n         BE    GOTSTUFF\n         NI    REPLY,X'0F'\n         CLI   REPLY,X'01'         PFK 01\n         BE    HELP\n         CLI   REPLY,X'02'         PFK 02\n         BE    AUTOSTOP\n         CLI   REPLY,X'03'         PFK 03\n         BE    CHEKAUTO\n         CLI   REPLY,X'04'         PFK 04\n         BE    AUTOON\n         CLI   REPLY,X'05'         PFK 05\n         BE    CNSLSW\n         CLI   REPLY,X'06'         PFK 06\n         BE    RESHOW\n         CLI   REPLY,X'07'         PFK 07\n         BE    MTT\n         CLI   REPLY,X'08'         PFK 08\n         BE    AUTO10\n         CLI   REPLY,X'09'         PFK 09\n         BE    AUTO2\n*        CLI   REPLY,X'0A'         PFK 10\n*        BE    OMON\n         CLI   REPLY,X'0B'         PFK 11\n         BE    AUTO4\n         CLI   REPLY,X'0C'         PFK 12\n         BE    IPLINFO\n*--------------------------------------------------------------------*\n*                                                                    *\n*--------------------------------------------------------------------*\nNOTIFY   MVI   CLRFLAG,X'FF'\n         MVI   CMDFLAG,X'FF'\n         B     AUTHDONE\nCHEKAUTO CLI   AUTOFLAG,X'FF'\n         BNE   AXFREE\n         MVI   AUTOFLAG,X'00'\n         B     AUTHDONE\nCNSLSW   MVI   CNSLFLAG,X'FF'\n         MVI   REPLY,X'00'\n         MVI   CONSFLAG,X'FF'\n         MVI   THRUFLAG,X'00'\n         MVI   CLRFLAG,X'FF'\n*\n*              CLEAR OUR BUF AREA\n*\n         LA    R0,SCREEN\n         AL    R0,=A(SCRLEN)       POINT TO BUF                 KMB1\n         L     R1,=A(BUFLEN)       GET BUF LENGTH               KMB1\n         SLR   R14,R14                                          KMB1\n         L     R15,=A(X'40000000')                              KMB1\n         MVCL  R0,R14                                           KMB1\n         B     SHOWCONS\nRESHOW   MVI   RESHOWFL,X'FF'\n         B     AUTHDONE\n*--------------------------------------------------------------------*\n*              IPLINFO                                               *\n*--------------------------------------------------------------------*\nIPLINFO  MVC   WORKLINE,BLANKS\n         LA    R9,1                SBASETROW                    KMB1\n         MVC   WORKLINE+10(46),MESSAGE\n         LA    R1,16              HEX 10\n         L     R2,0(R1)           ADDRESS OF CVT\n         USING CVT,R2\n         L     R3,CVTSMCA         ADDRESS OF SMF CONTROL AREA\n         L     R1,CVTSYSAD\n*\n*              IPL UNIT AND VOLSER\n*\n         MVC   WORKLINE+65(6),UCBVOLI-UCBOB(R1)                 KMB1\n         MVI   WORKLINE+71,C'='                                 KMB1\n         UNPK  WORKLINE+72(5),UCBCHAN-UCBOB(3,R1)               KMB1\n         TR    WORKLINE+72(4),JHEX-240                          KMB1\n         MVI   WORKLINE+76,C' '                                 KMB1\n         USING SMCABASE,R3\n         MVC   IPLDATE,SMCAIDTE   IPL DATE\n         MVC   IPLTIME,SMCAITME   IPL TIME\n         DROP  R3\n*\n*              CLPA=YES/NO\n*\n         L     R3,CVTASMVT\n         TM    1(R3),X'08'     CLPA?\n         BNZ   NOCLPA             1 MEANS A QUICK START - NO CLPA WAS\n         MVC   WORKLINE+57(3),=C'YES'\n         B     DATEEDIT\nNOCLPA   MVC   WORKLINE+57(3),=C'NO '\n*\n*              DATE/TIME OF IPL\n*\nDATEEDIT DS    0H                                               KMB1\n         UNPK  DOUBLWD(5),IPLDATE+1(3)                          KMB1\n         MVC   WORKLINE+31(2),DOUBLWD                           KMB1\n         MVI   WORKLINE+33,C'.'                                 KMB1\n         MVC   WORKLINE+34(3),DOUBLWD+2                         KMB1\n         DROP  R2\n         L     R6,IPLTIME\n         SRDA  R6,32(0)\n         L     R3,THREE60\n         DR    R6,R3\n         CVD   R7,DOUBLWD\n         MVC   WORK(4),=X'40212020'\n         ED    WORK(4),DOUBLWD+6\n         MVC   WORKLINE+43(2),WORK+2\n         SRDA  R6,32              SHIFT REMAINDER\n         L     R3,SIXTY\n         DR    R6,R3\n         CVD   R7,DOUBLWD\n         MVC   WORK(4),=X'F0212020'\n         ED    WORK(4),DOUBLWD+6\n         MVC   WORKLINE+46(2),WORK+2\n         LA    R5,SCREEN+1            ADDRESS OF FIRST LINE\n         LA    R10,85\n         LA    R9,1                SBASETROW                    KMB1\n         SBASET ,                                               KMB1\n         MVC   5(79,R5),WORKLINE\n         LA    R5,84(,R5)             INCREMENT\n         LA    R6,05(,R6)             INCREMENT\n         TPUT  CLEAR,CLEARLEN,FULLSCR                           KMB1\n         MVI   IPLFLAG,X'FF'\n         TCLEARQ INPUT\n         B     SPACLOOP\n*\n*              MTT  HUH????\n*\nMTT      DS    0H\n         B     AUTHDONE\n*--------------------------------------------------------------------*\n*              DISPLAY HELP                                          *\n*--------------------------------------------------------------------*\nHELP     DS    0H\n         LA    R9,1                SBASETROW                    KMB1\n         MVI   HELPFLAG,X'FF'\n         MVI   AUTOFLAG,X'00'\n         TPUT  CLRALT,CLRALTLN,FULLSCR                          KMB1\n         MVI   CLRFLAG,X'FF'\n         B     FIRSTL\nAUTOON   MVC   TIMER,ONE\n         CLI   USERFLAG,X'FF'\n         BE    AUTO2\n         B     AUTOSET\nAUTO2    MVC   TIMER,THREE\n         B     AUTOSET\nAUTO4    MVC   TIMER,FIVE\nAUTOSET  MVI   AUTOFLAG,X'FF'\n         MVC   5(72,R5),BLANKS\n         MVI   REPLY,X'00'\n         B     AUTHDONE\nAUTO10   MVC   TIMER,=F'990'            APP 10 SECS\n         B     AUTOSET\nAUTOSTOP MVI   AUTOFLAG,X'00'\n         B     AUTHDONE\nSKIPALL  MVI   ISSUFLAG,X'FF'\n         B     AUTHDONE\n*--------------------------------------------------------------------*\n*              ENTER PRESSED                                         *\n*--------------------------------------------------------------------*\nGOTSTUFF DS    0H\n         CLI   REPLY+6,C'>'        IS IT NOTIFY MESSAGE?\n         BE    NOTIFY              THEN EXIT\n         OC    REPLY+6(74),BLANKS  ALL INPUT UPPER CASE\n         CLC   REPLY+6(70),BLANKS  COMMAND AREA IS SPACES?\n         BE    AUTHDONE            THEN A COMMAND WAS NOT ENTERED\n*        MVC   CMDLINE(4),CMDFMT   Y(76),Y(0),CL72              KMB2\n         MVC   CMDLINE(2),CMDFMT   MGCRE Y(76),CL74             KMB2\n         MVC   CMDCMD(72),REPLY+6                               KMB2\n         MVC   REPLY,BLANKS\n         CLI   CMDCMD,C'Z'         IS IT END,                   KMB2\n         BE    CHEKAUTO            THEN EXIT\n         CLI   CMDCMD,C'X'         IS IT END,                   KMB2\n         BE    CHEKAUTO            THEN EXIT\n         CLC   CMDCMD(3),=C'END' IS IT END,                     KMB2\n         BE    AXFREE               THEN EXIT\nGOTCMD   DS    0H\n         TPUT  CLEAR,CLEARLEN,FULLSCR                           KMB1\n         MVI   CLRFLAG,X'FF'\nLOGLINE  MVC   WTOCMD(100),WTOLIST\n         MVC   WTOCMD+8(72),CMDCMD                              KMB2\n         CLI   USERFLAG,X'FF'\n         BNE   ISSUOK\nISSUCK   CLC   PJES2,CMDCMD                                     KMB2\n         BE    HELP\n         CLC   PQ,CMDCMD                                        KMB2\n         BE    HELP\n         CLC   $P,CMDCMD                                        KMB2\n         BE    HELP\n         CLC   PQ(3),CMDCMD                                     KMB2\n         BE    HELP\n         CLC   CMDCMD(1),PQ           SHOULD START WITH $       KMB2\n         BNE   HELP\nISSUOK   MVC   WTOCMD+78(4),USERID\n         LA    R7,WTOCMD\n         WTL   MF=(E,(R7))\nNOWTO    DS    0H\n         BAL   R3,AUTHRIZ\n         SLR   R0,0                 CLEAR REG 0\n         L     R0,CONSCURR\nISSUE    LA    R2,CMDLINE          GET ADDRESS OF COMMAND I SMF\n         MGCRE TEXT=(2),CONSNAME=USER,MF=(E,WMGCRE)\n*S       STIMER WAIT,BINTVL==A(50)\n         MVI   CMDFLAG,X'FF'\n         B     AUTHDONE\n*--------------------------------------------------------------------*\n*              SUBROUTINE TO CONVERT ROW,COL TO SBA                  *\n*        BAL   R3,SBACALC                                            *\n*        INPUT R14=ROW, R15=COL                                      *\n*        OUTPUT SBACMD 2 BYTE SBA                                    *\n*        SUPPORTS 12 AND 14 BIT SBA                                  *\n*--------------------------------------------------------------------*\nSBACALC  DS    0H\n         BCTR  R14,0          ROW  -1, MAKE RELATIVE TO ZERO    KMB1\n         BCTR  R15,0          COL  -1, MAKE RELATIVE TO ZERO    KMB1\n         MH    R14,TERMCOLS        ROW * COLUMN                 KMB1\n         AR    R15,R14              + COLUMN                    KMB1\n*                                                               KMB1\n         TM    WFLAG2,$2USE14      USE 14 BIT?                  KMB1\n         BO    SBA14                YES                         KMB1\n*                                                               KMB1\n         SLL   R15,2               MOVE 2 BITS INTO LEFT BYTE   KMB1\n         STCM  R15,B'0010',SBACMD  SAVE INTO FIRST BYTE         KMB1\n         SRL   R15,2               SHIFT BACK TO ORIGINAL       KMB1\n         STCM  R15,B'0001',SBACMD+1 SAVE RIGHT DIGIT            KMB1\n         NC    SBACMD(2),=X'3F3F'  REMOVE TOP 2 BITS FROM DIGIT KMB1\n         TR    SBACMD(2),TBL3270   TRANSLATE                    KMB1\n         BR    R4                                               KMB1\nSBA14    DS    0H                                               KMB1\n         STCM  R15,B'0011',SBACMD  PUT OFFSET IN SBA            KMB1\n         NC    SBACMD(2),=X'3FFF'  REMOVE TOP 2 BITS FROM DIGIT KMB1\n         BR    R4\n*--------------------------------------------------------------------*\n*              AUTHORIZE SUBROUTINE                                  *\n*--------------------------------------------------------------------*\nAUTHRIZ  STAX  DEFER=YES\n         AIF   ($AUTHOK EQ 0).NOSVC01\n         LA    R1,=C'AUTH'\n         SVC   $AUTHSVC\n.NOSVC01 ANOP\n         MODESET MF=(E,SUPRMOD)  GET INTO SUPV STATE AND KEY ZERO\n         BR    R3                ****************************\n*--------------------------------------------------------------------*\n*              UNAUTHORIZE SUBROUTINE                                *\n*--------------------------------------------------------------------*\nUNAUTH   DS    0H\n         MODESET MF=(E,PROBMOD)\n         AIF   ($AUTHOK EQ 0).NOSVC02\n         LA    R1,=C'NONE'\n         SVC   $AUTHSVC\n.NOSVC02 ANOP\n         STAX  DEFER=NO\n         BR    R3\n***********************************************************************\n*                          A T T N E X I T                            *\n*                                                                     *\n*         TRAP USERS ATTENTION INTERRUPTS AND FLAG FOR RESET          *\n***********************************************************************\nATTNEXIT DS    0H                  ESTABLISH\n         MVI   ATTNFLG,X'FF'       SET ATTN FLAG\n         BR    R14                 RETURN TO CALLER\n         EJECT\n         LTORG\n*---------------------------------------------------------------------*\n*                         C O N S T A N T S                           *\n*---------------------------------------------------------------------*\n*CMDFMT  DC    Y(76),Y(00)            LENGTH OF COMMAND         KMB2\nCMDFMT   DC    Y(76)                  LENGTH OF COMMAND         KMB2\nMESSAGE  DC    CL46'LAST SYSTEM IPL DATE YY.DDD TIME HH:MM  CLPA ='\nPATTERN1 DC    XL5'2120202020'\nTHREE60  DC    F'360000'\nSIXTY    DC    F'6000'\n         CNOP  0,8\n*---------------------------------------------------------------------*\n*               327X SCREEN CLEAR CONTROL CHARACTERS                  *\n*---------------------------------------------------------------------*\n*LR      DC    X'7E'              EWA\n*\nCLRALT   EQU   *                                                KMB1\n         DC    X'277EC3'           ERASE WRITE ALTERNATE        KMB1\nCLRALTLN EQU   *-CLRALT                                         KMB1\nCLRPRM   EQU   *                                                KMB1\n         DC    X'27F5C3'           ERASE WRITE                  KMB1\nCLRPRMLN EQU   *-CLRPRM                                         KMB1\n*\nCLR      DC    X'C3'               WCC - FREE KEYBOARD/RESET MDT\n         DC    X'114040'           SBA TO ROW 1, COL 1\n         DC    X'3C'               REPEAT TO ADDRESS\nCLREOSCN DC    X'F56F' ENDOFSCR    FILL SCREEN WITH NULLS F56F=R43 C80\n         DC    X'00'               REPEAT NULLS\n         DC    X'11'               SBA\nCLRCSR   DC    X'F460' CURSOR      ROW 43 COL 2\n         DC    X'00'               ATTRIBUTE\n         DC    X'13'               INSERT CURSOR\nCLRLEN   EQU   *-CLR\n*\nONE      DC    A(175)              1.75 SECOND\nFIVE     DC    A(444)              5 SECONDS\nTHREE    DC    A(220)              3 SECONDS\nTEN      DC    F'10'\nNUMBEROR DC    XL4'000000F0'\nCHAROR   DC    XL4'000000C0'\nHEXZIP   DC    2F'0000000000000000'\n         DS    0F\nWTOLIST  WTL   '                                                       X\n                                       CONSOLE',MF=L\n         DS    0F\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L\nPROBMOD  MODESET KEY=NZERO,MF=L\nMGCRE    MGCRE  MF=L                                            KMB2\nMGCRELN  EQU    *-MGCRE                                         KMB2\nAUTHNAME DS    0CL8                                             KMB1\n         DC    CL8'SYS1'                                        KMB1\n         DC    CL8'STGMGT'                                      KMB1\n         DC    CL8'DB2MGT'                                      KMB1\n         DC    CL8'SYSOPER'                                     KMB1\n         DC    CL8'OPER2'                                       KMB1\n         DC    CL8'SECURITY'                                    KMB1\n         DC    CL8'*USER '                                      KMB1\nAUTHNEND DC    8XL1'FF'                                         KMB1\nHEXFS    DC    XL4'FFFFFFFF'\nJHEX     DC    C'0123456789ABCDEF'          HEX DIGIT CONVERSION\nPJES2    DC    CL7'$PJES2 '\nPQ       DC    CL8'$PQ,ALL '\n$P       DC    CL8'$P      '\nRTMEC    DC    CL6',RTME='\nRNUMC    DC    CL6',RNUM='\nTBL3270  DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'              KMB1\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'              KMB1\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'              KMB1\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'              KMB1\nNOTISSUD DC    CL18'COMMAND NOT ISSUED'\nHEADING1 DC    CL80'K S,DEL=                            99:99:99       X\n                             CONSOLE XX    '\nHELPMSG1 DC    CL80'PF-1   THIS DISPLAY         PF-2  STOP AUTO UPDATE X\n                 PF-3   END                '\nHELPMSG2 DC    CL80'PF-4   AUTO UPDATE 1 SEC    PF-5  ALTERNATE CONSOLEX\n                 PF-6   RESHOW LAST COMMAND'\nHELPMSG3 DC    CL80'PF-7                        PF-8  AUTO UPDATE 10 SEX\n               C PF-9   AUTO UPDATE 4 SEC  '\nHELPMSG4 DC    CL80'PF-10  NOT DEFINED          PF-11 AUTO UPDATE 2 SECX\n                 PF-12  IPL INFO           '\n         DC    CL80'****   ONLY JES2 COMMANDS ARE AUTHORIZED FOR THIS UX\n               SERID         ****          '\nWORKAREA DSECT\nSAVEAREA DS    18F\nUCMTABX  DS    F                   @ OF FIX DCM (IEERDCM)\nRDCM     DS    F                   @ OF PAGEABLE DCM (IEECDCM/IEETDCM)\nWORKLINE DS    CL80\nREPLY    DS    CL132\nBLANKS   DS    CL132\nCMDLINE  DS    CL132\nCMDCMD   EQU   CMDLINE+2                                        KMB2\nHEADING  DS    CL80\nSIBPTR   DS    F                   PRT TO SCREEN IMAGE BUFFER\nUCMTAB   DS    F -----+\n         DS    48F    |           PROVIDE SPACE FOR 48 UCM ADDRESSES\nUCMTABE  EQU   *  <---+\nAXLIST   DC    H'1',H'0'           AXRES PARMLIST\nNUMUCMS  DS    H\nCONSOLD  DS    F                   PREVIOUS CONSOLE NUMBER\n         SPACE 5\nCLEAR    DS    XL1                WCC - CLEAR SCREEN\n         DS    XL3                SBA TO ROW 1, COL 1\nCLEARLEN EQU   *-CLEAR                                          KMB1\n         DS    XL1                IC AND REPEAT TO ADDRESS\nENDOFSCR DS    XL2                SBA TO ROW XX, COL YY\n         DS    XL2                FILL SCREEN WITH NULLS\nCURSOR   DS    XL2                SBA TO ROW 1, COL 1\n         DS    XL2                INSERT CURSOR\n*LEARLEN EQU   *-CLEAR\nLASTLINE DS    CL255' '           OPERATORS COMMAND INPUT LINE\nCONNUM   DS    CL2' 1'            CONSOLE NUMBER\nCTYPE    DS    CL4' '\nMASTER   DS    CL8' '             MASTER CONSOLE\nSYS      DS    CL4' '             SYS  AUTHORIZATION\nIO       DS    CL4' '             I/O  AUTHORIZATION\nCONS     DS    CL5' '             CONS AUTHORIZATION\n         DS    CL3' '\n*NIT     DS    CL4' '             UNIT ADDR OF CONSOLE\nTIME     DS    CL3' '             SECONDS REMAINING ON TIMER\nSLASH    DS    CL1'/'\nPAUSE    DS    CL3'1.0'           DELAY IN SECONDS\n         DS    CL2' '\nAREAA    DS    XL1\nCNSLFLAG DS    XL1\nTHRUFLAG DS    XL1\nAUTOFLAG DS    XL1\nISSUFLAG DS    XL1\nRESHOWFL DS    XL1\nHELPFLAG DS    XL1\nUSERFLAG DS    XL1\nCONSFLAG DS    XL1\nCLRFLAG  DS    XL1\nIPLFLAG  DS    XL1\nCMDFLAG  DS    XL1\nATTNFLG  DS    XL1                                              KMB1\nWFLAG2   DS    XL1                 FLAGS 2                      KMB1\n$2PRIM   EQU   X'80'               USE PRIMARY                  KMB1\n$2ALT    EQU   X'40'               USE ALTERNATE SIZE           KMB1\n$2USE14  EQU   X'20'               USE 14 BIT SBA               KMB1\nCONSCURR DS    F                   CONSOLE TO BE LOOKED AT\nCONSASID DS    F                   'CONSOLE' ASID FOR CMS\nCONL     DS    F\nSCNL     DS    F                                                KMB1\nWMGCRE   MGCRE  MF=L                                            KMB2\nWGTTERM  GTTERM PRMSZE=0,ALTSZE=0,MF=L                          KMB1\nTERMOROW DS    A                   ORIGINAL TERM ROWS           KMB1\nTERMOCOL DS    A                   ORIGINAL TERM COLS           KMB1\nPRMSZROW DS    A                   PRIMARY   ROW SIZE           KMB1\nPRMSZCOL DS    A                   PRIMARY   COL SIZE           KMB1\nALTSZROW DS    A                   ALTERNATE ROW SIZE           KMB1\nALTSZCOL DS    A                   ALTERNATE COL SIZE           KMB1\nPRMSIZE  DS    H                   PRIMARY SIZE                 KMB1\nALTSIZE  DS    H                   ALTERNATE SIZE               KMB1\nTERMROWS DS    H                   TERMINAL ROWS                KMB1\nTERMCOLS DS    H                   TERMINAL COLUMNS             KMB1\nTERMMOVE DS    H                   MAX DATA TO MOVE             KMB1\nCONROW   DS    H                   NUM DISPLAY ROWS ON CONSOLE  KMB1\nCONCOL   DS    H                   NUM COLUMNS ON CONSOLE & SBA KMB1\nCONCOLM6 DS    H                   LEN OF CONSOLE DATA-1        KMB1\nSBACMD   DS    XL2'0000'           CURRENT SBA                  KMB1\nTIMER    DS    F\nRTME     DS    H\nRNUM     DS    H\nUSER     DS    CL8            CONSOLE NAME\nTYPE     DS    CL1\nUSERID   DS    CL7\nTABAREA  DS    CL77\nSELCODE  DS    CL3            LINE SELECTION CODE\nSELSAVE  DS    CL3            LINE SELECTION CODE SAVE AREA\nWORK     DS    D\nDOUBLWD  DS    D\nIPLDATE  DS    F\nIPLTIME  DS    F\nSTAXLIST STAX  ATTNEXIT,MF=L                                    KMB1\nWTOCMD   DS    CL104\nSCREEN   DS    XL1                 WCC - TERMINAL' SCREEN\n         DS    27CL142                                          KMB1\n         DS    CL124     EXTRA FOR MOD5\nSCRLEN   EQU   *-SCREEN\nBUF      DS    60CL142             CONSOLE SCREEN               KMB1\nBUFLEN   EQU   *-BUF\nWORKLENG EQU   *-WORKAREA\n         PRINT NOGEN\n         TITLE '*** TSO USER PROFILE TABLE DSECT ***'\n         IKJUPT                    TSO USER PROFILE TABLE\n         TITLE '*** COMMUNICATION VECTOR TABLE ***'\n         CVT   DSECT=YES\n         TITLE '*** J S C B ***'\n         IEZJSCB\n         TITLE '*** T  C  B ***'\n         IKJTCB DSECT=YES\n         TITLE '*** RDCM DSECT ***'\n*        IEECRDCM                                               ZOS19\n         IEERDCM                                                ZOS19\n         TITLE '*** TDCM DSECT ***'\n         PRINT GEN\n*IEETDCM DSECT ,                                                ZOS19\n*        IEECDCM                                                ZOS19\nSTRTDCM  EQU   DCMSTRT                                          ZOS19\n         IEETDCM                   ,                            ZOS19\n         PRINT   GEN\n         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***'\n         IEECUCM FORMAT=NEW,LIST=YES                            KMB1\nUCMSYSE  EQU   BIT4                                             ZOS19\nUCMDISPA EQU   BIT0                                             ZOS19\n         PRINT  NOGEN\n         IHAASVT\n         TITLE '*** ADDRESS SPACE CONTROL BLOCK ***'\n         IHAASCB\n         TITLE '*** TSB DSECT ***'\n         IKJTSB LIST=YES\n         TITLE '*** CHAIN     ***'\n         IEECHAIN\n         IEESMCA\n         IHAASXB                   ASXB ---------                  KMB1\n         IHAPSA                    PSA  ---------                  KMB1\n         IHAACEE                   ACEE ---------                  KMB1\n         IEFUCBOB PREFIX=YES\n         YREGS ,\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SQAMON": {"ttr": 12807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x02\\x14?\\x01\\x02\\x14?\\x16B\\x01A\\x01A\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-23T00:00:00", "modifydate": "2002-05-23T16:42:35", "lines": 321, "newlines": 321, "modlines": 0, "user": "KBASS"}, "text": "         PUNCH ' SETCODE AC(1) '\n*--------------------------------------------------------------------*\n*              PROGRAM TO MONITOR SQA AND CSA SIZE                   *\n*              MUST RUN V=R                                          *\n*              WRITE MESSAGE IF SQA/ESQA CHANGES ANY                 *\n*                               CSA CHANGES BY  12K OR               *\n*                              ECSA CHANGES BY 100K OR               *\n*                               CSA/ECSA FREE IS < 50K               *\n*              PARM=NN  2 DIGIT NUMBER FOR SLEEP TIME IN SECONDS     *\n*--------------------------------------------------------------------*\nSQAMON   AMODE 31\nSQAMON   CSECT\n         SAVE  (14,12)\n         LR    R12,R15             BASE REG\n         USING SQAMON,R12\n         ST    R13,SAVE+4          SAVE AREA\n         LA    R13,SAVE               CONVENTIONS\n         L     R1,0(0,R1)          PARM ADDR\n         SPACE 2\n         MVZ   TIME+4(2),2(R1)     CHECK PARM FOR NUMERIC\n         CLC   TIME+4(2),=C'00'    PARM NUMERIC\n         BNE   ABEND               NO, GO ABEND\n         MVC   TIME+4(2),2(R1)     MOVE IN 2 DIGIT SECONDS\n         MVC   ABND(1),4(R1)       SET ABEND IND\n*        LA    R1,=C'AUTH'\n*        SVC   245\nMODESET  MODESET KEY=ZERO,MODE=SUP\n         USING CVT,R4\n         L     R4,16               CVT ADDR\n         L     R4,CVTGDA           GDA ADDR\n         DROP  R4\n         USING GDA,R4\n         SPACE 3\nEXTRACT  EXTRACT MODIFY,FIELDS=COMM\n         L     R2,MODIFY           POINT AT MODIFY FIELD.\n         LA    R8,4(R2)            GET CIB ADDRESS IN R8.\n         CLC   =F'0',0(R8)         STARTED FROM CONSOLE?\n         BE    GETCIB              YES: SKIP FREE.\n         QEDIT ORIGIN=(R8)         NO:  FREE CIB.\n         SPACE 3\nGETCIB   EQU   *                   HERE TO GET CIB.\n         QEDIT ORIGIN=(R8),CIBCTR=1 GET CIB FOR STOP/MODIFY.\n         MVC   ECBLIST,0(R2)       SET ECB ADDRESS.\n         OI    ECBLIST,X'80'\n         SPACE 3\nDQESTART DS    0H\n         L     R9,GDACSASZ         CSA SIZE\n         SL    R9,GDACSACV         MINUS CSA CONVERTED TO SQA\n         ST    R9,CSASZ1           CSA SIZE\n         MVC   SQASPILL,GDACSACV   SQA SPILLAGE\n         SPACE 1\n         L     R9,GDAECSAS         ECSA SIZE\n         ST    R9,CSASZ2           ECSA SIZE\n         SPACE 1\n         L     R3,GDASQASZ         SQA SIZE\n         A     R3,GDACSACV         ADD CSA CONVERTED TO SQA\n         ST    R3,SQASZ1\n         SPACE 1\n         L     R3,GDAESQAS         ESQA SIZE\n         ST    R3,SQASZ2           ESQA SIZE\n         SPACE 1\nDQELOOP  DS    0H\n         SPACE 3\n*--------------------------------------------------------------------*\n*              SUM UP FREE CSA                                       *\n*--------------------------------------------------------------------*\n         SPACE 1                                                    SJB\nCSA10000 DS    0H\n         L     R10,GDAFBQCF        1ST CSA FBQE                     SJB\n         USING FBQE,R10                                             SJB\n         SLR   R11,R11             CLEAR COUNTER                    SJB\nCSA10100 DS    0H                  NEXT FBQE                        SJB\n         A     R11,FBQESIZE        OK, ADD IT IN                    SJB\n         C     R10,GDAFBQCL        IS THIS THE LAST ONE             SJB\n         BE    CSA10800             YES                             SJB\n         L     R10,FBQENEXT        NEXT CSA FBQE\n         LTR   R10,R10             DONE\n         BNZ   CSA10100             NO                              SJB\nCSA10800 DS    0H\n         ST    R11,CSAFREE1\n         SPACE 1\nCSA20000 DS    0H\n         L     R10,GDAEFBCF        1ST CSA FBQE                     SJB\n         USING FBQE,R10                                             SJB\n         SLR   R11,R11             CLEAR COUNTER                    SJB\nCSA20100 DS    0H                  NEXT FBQE                        SJB\n         A     R11,FBQESIZE        OK, ADD IT IN                    SJB\n         C     R10,GDAEFBCL        IS THIS THE LAST ONE             SJB\n         BE    CSA20800             YES                             SJB\n         L     R10,FBQENEXT        NEXT CSA FBQE\n         LTR   R10,R10             DONE\n         BNZ   CSA20100             NO                              SJB\nCSA20800 DS    0H\n         ST    R11,CSAFREE2\n         SPACE 3\nPWAIT    L     R7,ECBLIST          POINT TO ECB.\n         MVI   FLAG,X'00'          ZERO FLAG                        SJB\n         TM    0(R7),X'40'         COMPLETED?\n         BO    MODIFIED            YES: GO SEE WHAT THEY WANT.\n*                                                                   SJB\nSQACHK   DS    0H\n         CLC   SQASZ1,SQASZO1      SIZE CHANGE YET\n         BE    SQACHK2              NO                              SJB\n         BAL   R2,SQADIS1          YES, GO DISPLAY SQA SIZE         SJB\nSQACHK2  DS    0H\n         CLC   SQASZ2,SQASZO2      SIZE CHANGE YET\n         BE    SQACHK3              NO                              SJB\n         BAL   R2,SQADIS2          YES, GO DISPLAY SQA SIZE         SJB\nSQACHK3  DS    0H\n*                                                                   SJB\nCSACHK1  DS    0H                  GET OLD CSAFREE1                 SJB\n         CLC   CSAFREE1,=A(50*1024) IS IT <= 50K                    SJB\n         BNH   CSACHK1D            YES, DISPLAY                     SJB\n         L     R1,CSAFREO1         GET OLD CSAFREE1                 SJB\n         S     R1,CSAFREE1         GET THE DIFFERENCE  OLD-NEW      SJB\n         LPR   R1,R1               GET ABSOLUTE                     SJB\n         C     R1,=A(12*1024)      >= 12K DIFFERENCE                SJB\n         BL    CSACHK2             NO, GO WAIT                      SJB\nCSACHK1D BAL   R2,CSADIS1          YES, GO DISPLAY CSA SIZE         SJB\n*                                                                   SJB\n*                                                                   SJB\nCSACHK2  DS    0H                  GET OLD CSAFREE2                 SJB\n         CLC   CSAFREE2,=A(50*1024) IS IT <= 50K                    SJB\n         BNH   CSACHK2D            YES, DISPLAY                     SJB\n         L     R1,CSAFREO2         GET OLD CSAFREE2                 SJB\n         S     R1,CSAFREE2         GET THE DIFFERENCE  OLD-NEW      SJB\n         LPR   R1,R1               GET ABSOLUTE                     SJB\n         C     R1,=A(100*1024)     >=100K DIFFERENCE                SJB\n         BL    CSACHK3             NO, GO WAIT                      SJB\nCSACHK2D BAL   R2,CSADIS2          YES, GO DISPLAY CSA SIZE         SJB\n*                                                                   SJB\nCSACHK3  TM    FLAG,$DISPLAY       WAS A DISPLAY DONE               SJB\n         BO    ECBCHK              YES                              SJB\n         B     WAIT                GO WAIT                          SJB\n*                                                                   SJB\n         SPACE 3\nMODIFIED L     R8,MODIFY           GET POINTER IN R8.\n         L     R2,4(R8)            POINT AT CIB.\n         USING CIBDSECT,R2         GET ADDRESSABILITY TO CIB.\n         TM    CIBVERB,CIBMODFY    NO:  MODIFY?\n         BO    MODFY               YES: CHECK IT.\n         TM    CIBVERB,CIBSTOP     NO:  STOP?\n         BO    EOJ                 YES: GO STOP.\n         SPACE 3\n         ABEND 99,DUMP             SHOULD NEVER GET HERE.\n         SPACE 3\nMODFY    CLC   =CL4'SIZE',CIBDATA  SIZE REQESTED?\n         NOP   INVAL               YES: OK.\n         BAL   R2,SQADIS1          DISPLAY SQA                      SJB\n         BAL   R2,SQADIS2          DISPLAY ESQA                     SJB\n         BAL   R2,CSADIS1          DISPLAY CSA                      SJB\n         BAL   R2,CSADIS2          DISPLAY ECSA                     SJB\n         B     ECBCHK                                               SJB\nINVAL    MVC   INVALID+8+9(4),CIBDATA MOVE REPLY INTO MESSAGE.\nINVALID  WTO   'SQAMON - XXXX IS AN INVALID REQUEST.',                 X\n               ROUTCDE=(1,11),DESC=3\n         B     RESETCIB\n         SPACE 3\nECBCHK   L     R7,ECBLIST          POINT TO ECB.\n         TM    0(R7),X'40'         POSTED\n         BZ    ABNDCHK             NO WTOR\n         SPACE 3\nRESETCIB LA    R8,4(R8)            BUMP POINTER.\n         L     R1,0(R8)            ADDRESS OF CIB IN REG1.\n         QEDIT ORIGIN=(R8),BLOCK=(R1) RELEASE LAST CIB AREA.\n         SPACE 3\nWAIT     STIMER WAIT,DINTVL=TIME     WAIT 10 SECS\n         B     DQESTART            CHECK SQA SIZE AGAIN\n         EJECT\nSQADIS1  DS    0H\n         L     R3,SQASZ1           SET NEW SQA SIZE\n         ST    R3,SQASZO1\n         SRL   R3,10               DIVIDE BY 1024\n         CVD   R3,DOUBLE           CONVERT SIZE TO DECIMAL\n         MVC   SQAWTO1+27(8),=X'4020212020202020'\n         ED    SQAWTO1+27(8),DOUBLE+4\n         L     R3,SQASPILL         SQA SPILLAGE INTO CSA\n         SRL   R3,10               DIVIDE BY 1024\n         CVD   R3,DOUBLE           CONVERT SIZE TO DECIMAL\n         MVC   SQAWTO1+44(8),=X'4020212020202020'\n         ED    SQAWTO1+44(8),DOUBLE+4\nSQAWTO1  WTO   'SQAMON - SQA SIZE - XXXXXXXK; SPILL= XXXXXXXK',        X\n               ROUTCDE=(1,11),DESC=3\n         OI    FLAG,$DISPLAY       INDICATE DISPLAY DONE            SJB\n         BR    R2                                                   SJB\n         SPACE 1\nSQADIS2  DS    0H\n         L     R3,SQASZ2           SET NEW SQA SIZE\n         ST    R3,SQASZO2          SET NEW SQA SIZE\n         SRL   R3,10               DIVIDE BY 1024\n         CVD   R3,DOUBLE           CONVERT SIZE TO DECIMAL\n         MVC   SQAWTO2+27(8),=X'4020212020202020'\n         ED    SQAWTO2+27(8),DOUBLE+4\nSQAWTO2  WTO   'SQAMON -ESQA SIZE - XXXXXXXK',                         X\n               ROUTCDE=(1,11),DESC=3\n         SPACE 1\n         OI    FLAG,$DISPLAY       INDICATE DISPLAY DONE            SJB\n         BR    R2                                                   SJB\n         EJECT\n*--------------------------------------------------------------------*\n*              DISPLAY CSA1 SIZE   BAL   R2,CSADIS1                  *\n*--------------------------------------------------------------------*\nCSADIS1  DS    0H                  SET NEW CSA SIZE                 SJB\n         L     R11,CSAFREE1\n         ST    R11,CSAFREO1        SET NEW CSA SIZE\n         SRL   R11,10              DIVIDE BY 1024                   SJB\n         CVD   R11,DOUBLE          CONVERT SIZE TO DECIMAL          SJB\n         MVC   CSAWTO1+27(8),=X'4020212020202020'                   SJB\n         ED    CSAWTO1+27(8),DOUBLE+4                               SJB\n         SPACE 1\n         L     R0,CSASZ1           TOTAL-SQASPILL\n         LR    R3,R0\n         SRL   R3,10               DIVIDE BY 1024\n         SL    R0,CSAFREE1         - FREE = USED\n         SRL   R0,10               DIVIDE BY 1024\n         MH    R0,=H'10000'        100.00%\n         SRDA  R0,32               MOVE TO R1\n         DR    R0,R3               DIVIDE BY CSASZ1\n         CVD   R1,DOUBLE           CONVERT SIZE TO DECIMAL          SJB\n         MVC   CSAWTO1+44(7),=X'402021204B2020'                     SJB\n         ED    CSAWTO1+44(7),DOUBLE+5                               SJB\nCSAWTO1  WTO   'SQAMON - CSA FREE - XXXXXXXK; USED = XXX.XX% ',        X\n               ROUTCDE=(1,11),DESC=3                                SJB\n         OI    FLAG,$DISPLAY       INDICATE DISPLAY DONE            SJB\n         BR    R2\n         SPACE 1                                                    SJB\n*--------------------------------------------------------------------*\n*              DISPLAY CSA2 SIZE   BAL   R2,CSADIS2                  *\n*--------------------------------------------------------------------*\nCSADIS2  DS    0H                  SET NEW CSA SIZE                 SJB\n         L     R11,CSAFREE2\n         ST    R11,CSAFREO2        SET NEW CSA SIZE\n         SRL   R11,10              DIVIDE BY 1024                   SJB\n         CVD   R11,DOUBLE          CONVERT SIZE TO DECIMAL          SJB\n         MVC   CSAWTO2+27(8),=X'4020212020202020'                   SJB\n         ED    CSAWTO2+27(8),DOUBLE+4                               SJB\n         SPACE 1\n         L     R0,CSASZ2           TOTAL-SQASPILL\n         LR    R3,R0\n         SRL   R3,10               DIVIDE BY 1024\n         SL    R0,CSAFREE2         - FREE = USED\n         SRL   R0,10               DIVIDE BY 1024\n         MH    R0,=H'10000'        100.00%\n         SRDA  R0,32               MOVE TO R1\n         DR    R0,R3               DIVIDE BY CSASZ1\n         CVD   R1,DOUBLE           CONVERT SIZE TO DECIMAL          SJB\n         MVC   CSAWTO2+44(7),=X'402021204B2020'                     SJB\n         ED    CSAWTO2+44(7),DOUBLE+5                               SJB\nCSAWTO2  WTO   'SQAMON -ECSA FREE - XXXXXXXK; USED = XXX.XX% ',        X\n               ROUTCDE=(1,11),DESC=3                                SJB\n         SPACE 1                                                    SJB\n         OI    FLAG,$DISPLAY       INDICATE DISPLAY DONE            SJB\n         BR    R2                                                   SJB\n         EJECT\nABEND    ABEND 77\n         SPACE 3\nABNDCHK  CLI   ABND,C'S'           SLIP TRAP ABEND REQUESTED\n         BNE   WAIT                NO, CONTINUE\n         L     R1,=X'C0073000'     TAKE ABEND\n         SVC   13\n         SPACE 3\nEOJ      DS    0H\n         MODESET KEY=NZERO,MODE=PROB\n*        LA    R1,=C'NONE'\n*        SVC   245\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n         EJECT\n         LTORG\nSAVE     DS    18F\n         DS    0D\nDOUBLE   DC    2F'0'\n*                01234567'\n*TIME            HHMMSSTH'\nTIME     DC    C'00000010'          .1 SECONDS\nCSAFREE1 DC    F'0'                CSA FREE                         SJB\nCSAFREE2 DC    F'0'                ECSA FREE                        SJB\nCSAFREO1 DC    F'0'                OLD CSA FREE                     SJB\nCSAFREO2 DC    F'0'                OLD ECSA FREE                    SJB\nCSASZ1   DC    F'0'                CSA SIZE                         SJB\nCSASZ2   DC    F'0'                ECSA SIZE                        SJB\nSQASPILL DC    F'0'                SPILLAGE INTO CSA\nSQASZO1  DC    F'0'                OLD SQA SIZE\nSQASZO2  DC    F'0'                OLD ESQA SIZE\nSQASZ1   DC    F'0'                SQA SIZE\nSQASZ2   DC    F'0'                ESQA SIZE\nMODIFY   DS    F\nECBLIST  DC    A(0)\nWTORECB  DC    X'40000000'\nREPLY    DC    CL4' '\nABND     DC    C' '\nFLAG     DC    X'00'                                                SJB\n$DISPLAY EQU   X'80'                                                SJB\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         DSECT\nCIBDSECT IEZCIB\n         EJECT                                                      SJB\n         IHAGDA                                                     SJB\n         EJECT                                                      SJB\n         IHADQE                                                     SJB\n         EJECT                                                      SJB\n         IHAFBQE                                                    SJB\n         PRINT NOGEN\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STPCOND": {"ttr": 13059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x04\\x00\\x98\\x11\\x1f\\x01\\x11\\x08/\\x10Y\\x02\\x10\\x01\\xfd\\x00\"\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-04-21T00:00:00", "modifydate": "2011-03-23T10:59:04", "lines": 528, "newlines": 509, "modlines": 34, "user": "KBASS"}, "text": "*        PUNCH ' SETCODE AC(1) '\n*--------------------------------------------------------------------*\n*        STPCOND : SCANS ALL STEPS, EXTRACTS CONDITION CODES         *\n*                  SENDS COND CODES TO TSO USER AND/OR BRODCAST      *\n*                                                                    *\n*        //STPCOND  EXEC PGM=STPCOND,PARM=USERID                     *\n*              IF PARM FIELD IS MISSING, IT USES RACF USERID OF      *\n*              THE JOB, IF NONE FOUND, THEN ERROR.                   *\n*                                                                    *\n*        ATTRIBUTES: RENT, REUS                                      *\n*                                                                    *\n*        WRITTEN BY: SAM BASS                                        *\n*        CHANGE LOG: 90/06/15 RACF USERID CHECK                      *\n*                    94/02/10 SAM  BASS - USE SWAREQ                 *\n*                                                                    *\n* NOTES: NEEDS  SYS1.MACLIB AND SYS1.MODGEN                          *\n*                                                                    *\n*--------------------------------------------------------------------*\nSTPCOND  TITLE '     STEP CONDITION CODE DRIVER PROGRAM'\nSTPCOND  AMODE 31\nSTPCOND  RMODE 24\nSTPCOND  CSECT\n         SAVE  (14,12),T,STPCOND_&SYSDATC._&SYSTIME\n         USING STPCOND,R12\n         LR    R12,R15\n         LR    R10,R1\n         STORAGE OBTAIN,SP=1,LENGTH=LWORK,LOC=BELOW\n         ST    R1,8(,R13)\n         ST    R13,4(,R1)\n         LR    R13,R1\n         USING WORK,R13\n*\n         LA    R0,8(,R1)           ZERO GOTTEN STORAGE\n         LA    R1,LWORK-8\n         LA    R15,0\n         MVCL  R0,R14              ZERO WORK AREA\n         SPACE 2\n         MVC   LWAWTO1(WTO1L),WTO1 MOVE IN WTO\n         MVC   LWACALL1(CALL1L),CALL1 MOVE IN CALL\n         MVC   LWAXTRC1(XTRC1L),XTRC1  MOVE IN CALL\n         LA    R1,LWAMSG           LOAD UP PARAMETER\n         ST    R1,LWAMSGA          STORE IT\n         OI    LWAMSGA,X'80'       LAST ENTRY FLAG\n         EJECT\n         L     R1,0(,R10)          GET PARM ADDR\n         LH    R2,0(,R1)           GET LENGTH\n         LTR   R2,R2               IS THERE A PARM?\n         BNP   TRYRACF             NO -- CONTINUE\n         CL    R2,=F'7'            SEE IF LENGTH IS 7\n         BH    ERROR2              GREATER THAN 7\n         LA    R3,2(,R1)           LOAD A(USERID)\n         B     PARMOK                 AND CONTINUE\n         SPACE 2\n*--------------------------------------------------------------------*\n*  SINCE NO PARAMETER WAS SPECIFIED, ATTEMPT TO SEND MESSAGES        *\n*  TO THE \"OWNING\" USER (AS VIEWED BY THE SECURITY SYSTEM).          *\n*--------------------------------------------------------------------*\nTRYRACF  DS    0H                                                   DBL\n         L     R15,PSAAOLD-PSA         LOAD A(ASCB)                 DBL\n         L     R15,ASCBASXB-ASCB(,R15)    A(ASXB) AND               DBL\n         L     R15,ASXBSENV-ASXB(,R15)       A(ACEE)                DBL\n         LTR   R15,R15                 ACEE AVAILABLE?             RACF\n         BZ    ERROR1                  NO -- CONTINUE              RACF\n         SLR   R2,R2                   CLEAR THE REGISTER AND      RACF\n         IC    R2,ACEEUSRL-ACEE(,R15)     INSERT USERID LENGTH     RACF\n         LA    R3,ACEEUSRI-ACEE(,R15)  LOAD USERID ADDRESS AND     RACF\n         B     PARMOK                     CONTINUE PROCESSING      RACF\n         SPACE 2\nERROR1   DS    0H\n         WTO   'USERID NOT ON PARM=  ',ROUTCDE=11\n         B     ERRRET\n         SPACE 2\nERROR2   DS    0H\n         WTO   'USERID > 7 CHARACTERS',ROUTCDE=11\n         B     ERRRET\n         SPACE 2\nERRRET   DS    0H\n         LR    R1,R13\n         L     R13,4(,R13)\n         STORAGE RELEASE,SP=1,ADDR=(1),LENGTH=LWORK\n         RETURN (14,12),RC=4\n         EJECT\nPARMOK   DS    0H                  R2 =LENGTH, R3= @ OF USERID\n         MVC   LWAUSER,=CL8' '\n         ST    R2,LWAUSERL\n         BCTR  R2,0                -1 FOR MOVE\n         MVC   LWAUSER(0),0(R3)    MOVE IN USERID\n         EX    R2,*-6              MOVE ALL OF IT\nPARMOK1  DS    0H\n         MVI   LWAFLAG,X'00'       CLEAR FLAG\n         TESTAUTH FCTN=1,STATE=YES,RBLEVEL=1\n         LTR   R15,R15\n         BNZ   NOTAUTH             NOT AUTHORIZED\n         OI    LWAFLAG,$AUTH\nNOTAUTH  DS    0H\n*--------------------------------------------------------------------*\n*              MAIN STEP LOOP                                        *\n*--------------------------------------------------------------------*\n         L     R1,PSATNEW-PSA      GET TCB NEW\n         L     R1,TCBJSCB-TCB(,R1) GET JSCB\n         L     R1,JSCBACT-JSCB(,R1) GET JSCB ACTIVE\n         L     R1,JSCBJCT-JSCB(,R1) GET JCT SVA  00FFFFFF\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R4,R1               *--------------------------- *\n*\n         USING JCTDSECT,R4\n         USING SCTDSECT,R5\n         ICM   R1,B'0111',JCTSDKAD GET SCT SVA\n         BZ    ERR2\n         LA    R10,0\nSCTLOOP  DS    0H                  R1 = SVA OF SCT 00FFFFFF FMT\n         LA    R10,1(,R10)         ADD 1 TO STEP\n         CL    R10,=F'256'         MAX STEPS = 255\n*        BNL   RETURN1\n         SPACE 1                   R1 = SVA OF SCT\n         L     R15,=V(SWAREQ)      *--------------------------- *\n         BALR  R14,R15             * R1 = SVA   00FFFFFF FMT    *\n         LTR   R15,R15             * CALL SWAREQ TO CONVERT SVA *\n         BNZ   SWAERROR            * R1 = CONVERTED SVA, NOPREF *\n         LR    R5,R1               *--------------------------- *\n*\n         MVC   $JOBN(8),JCTJNAME  MOVE IN JOBNAME\n         MVC   $PROCN(8),SCTSCLPC MOVE IN PROC NAME\n         MVC   $STEPN(8),SCTSNAME MOVE IN STEP NAME\nSTEPNLST DS    0H\n         ICM   R1,B'0111',SCTANSCT IS THIS THE LAST STEP\n         BZ    LASTSTEP             YES, DONT PROCESS LAST STEP\n         TM    SCTCATCT+2+4,X'C0'  HAS THIS STEP FINISHED\n         BO    STEPOK               YES\n         B     NEXTSTEP\n*\nSTEPOK   DS    0H\n         XR    R1,R1               CLEAR R1\n         ICM   R1,B'0011',SCTSEXEC MOVE IN STEP.COND.CODE/PARM LEN\n         ST    R1,LWARC            MOVE IN STEP.COND.CODE\n*\n         TM    SCTABCND,SCTABEND   DID THIS STEP ABEND\n         BZ    NOABEND             NOPE\n         MVC   LWARC,JCTACODE      YES, MOVE IN POSSIBLE ABND CODE\nNOABEND  DS    0H\n*\n         XR    R1,R1               CLEAR R1\n         IC    R1,SCTSNUMB         IC IN STEP NUMBER\n         ST    R1,LWASTEP          SAVE STEP NUMBER\n*\n         CLC   LWAHIRC,LWARC       IS THIS ONE HIGHER\n         BH    HIRC10               NO\n         MVC   LWAHIRC,LWARC        YES\n         MVC   LWAHISTP,LWASTEP     YES\nHIRC     DS    0H\n         TM    LWAFLAG,$HIGH\n         BZ    HIRC10\n         MVC   LWARC,LWAHIRC       HERE ONLY IF LAST STEP\n         MVC   $STEP#(4),BLANKS\n         MVC   $HIGHRC(18),=CL(18)' -- HIGHEST RC --'\n         MVC   LWASTEP,LWAHISTP\nHIRC10   DS    0H\n*\n         L     R1,LWASTEP          LOAD UP STEP #\n         CVD   R1,LWADEC           CONVERT TO LWADEC\n         MVC   $STEP#(4),=X'40212020'\n         ED    $STEP#(4),LWADEC+6  PUT IT IN\n*\n         TM    LWARC,X'80'         ABEND\n         BO    ABEND\n*--------------------------------------------------------------------*\n*              SIMPLE RC=                                            *\n*--------------------------------------------------------------------*\n         L     R1,LWARC            LOAD UP STEP RC\n         N     R1,=A(X'00000FFF')  SET MAX RC=4095\n         CVD   R1,LWADEC\n         MVC   WORKAREA(6),=X'F02120202020'\n         ED    WORKAREA(6),LWADEC+5\n         MVC   $STEPRC+1(4),WORKAREA+2\n         MVI   $STEPRC,C' '\n         B     RCFILL\n*--------------------------------------------------------------------*\n*              ABENDS                                                *\n*--------------------------------------------------------------------*\nABEND    DS    0H\n         L     R1,LWARC            LOAD UP STEP RC\n         N     R1,=A(X'00FFF000')  SEE IF SYS ABEND\n         LTR   R1,R1\n         BNZ   ABENDS              SYSTEM ABENDD\n         B     ABENDU              USER ABEND\n         SPACE 2\n*--------------------------------------------------------------------*\n*              SYSTEM ABEND                                          *\n*--------------------------------------------------------------------*\nABENDS   DS    0H                  R1 POINT AT ABEND\n         SRL   R1,4*3              MOVE TO LOW 3 NIBBLES\n         ST    R1,LWADEC+4\n         UNPK  $STEPRC+1(5),LWADEC+6(3) UNPK IT\n         TR    $STEPRC+1(4),TRANS-240 TRANSLATE IT\n         MVI   $STEPRC+5,C' '\n         MVI   $STEPRC,C'S'        USER THEN\n         MVI   $STEPRC+1,C' '\n         B     RCFILL\n         SPACE 2\n*--------------------------------------------------------------------*\n*              USER ABEND                                            *\n*--------------------------------------------------------------------*\nABENDU   DS    0H\n         L     R1,LWARC            LOAD UP STEP RC\n         N     R1,=A(X'00000FFF')  ISOLATE USER ABEND\n         CVD   R1,LWADEC\n         MVC   WORKAREA(6),=X'F02021202020'\n         ED    WORKAREA(6),LWADEC+5\n         MVC   $STEPRC+1(4),WORKAREA+2\n         MVI   $STEPRC,C'U'\n         B     RCFILL\n*--------------------------------------------------------------------*\n*              PUT '.USERID,' IN FRONT OF MESSAGE IN LWAMSGT         *\n*              (THIS NOT USED NOW)                                   *\n*--------------------------------------------------------------------*\nRCFILL   DS    0H\n         MVI   LWAMSGT,C' '        BLANK IT OUT\n         MVC   LWAMSGT+1(L'LWAMSGT-1),LWAMSGT ...\n         LA    R9,LWAMSGT\n         MVI   0(R9),C'.'\n         LA    R9,1(,R9)           POINT PASSED '.'\n         L     R2,LWAUSERL         USERID LENGTH\n         BCTR  R2,0                -1\n         MVC   0(*-*,R9),LWAUSER   MOVE\n         EX    R2,*-6                USERID IN\n         LA    R9,1(R2,R9)         POINT PASSED USERID\n         MVI   0(R9),C','\n         LA    R9,1(,R9)           POINT PASSED ','\n         MVC   0($MSGL,R9),$MSGBEG MOVE IN MESSAGE FROM WTO MSG\n         MVC   LWAMSG(2),=AL2(L'LWAMSGT)\n*--------------------------------------------------------------------*\n*              GET DATE                                              *\n*--------------------------------------------------------------------*\n         TIME  DEC\n         ST    R1,LWAJULN\n         LA    R1,LWAJULN\n         BAL   R14,JULNGREG\n         MVC   $DATE,LWAGREG\n*--------------------------------------------------------------------*\n*              PUT OUT WTO/TPUT                                      *\n*--------------------------------------------------------------------*\n         TM    LWAFLAG,$HIGH+$AUTH AUTHORIZED AND 'HIGHEST RC'\n         BO    NOTIFY               YES\n         WTO   MF=(E,LWAWTO1)\n         TPUT  $MSGBEG,$MSGL,EDIT,NOWAIT,NOHOLD,USERIDL=LWAUSER\n         B     NEXTSTEP\nNOTIFY   DS    0H                  HERE ONLY IF SENDING LAST MSG\n         BAL   R14,SENDMSG         GO SEND MSG VIA NOTIFY\n         B     RETURN2\nNEXTSTEP DS    0H\n         ICM   R1,B'0111',SCTANSCT GET NEXT SCT ADDRESS\n         BZ    RETURN1\n         B     SCTLOOP\n*\nLASTSTEP DS    0H\nRETURN1  DS    0H\n         TM    LWAFLAG,$HIGH\n         BO    RETURN2\n         OI    LWAFLAG,$HIGH\n         B     HIRC\nRETURN2  DS    0H\n         LR    R1,R13\n         L     R13,4(,R13)\n         STORAGE RELEASE,SP=1,ADDR=(1),LENGTH=LWORK\n         RETURN (14,12),RC=0\nERR2     DS    0H\n         WTO   'STPCND JCT NOT FOUND',ROUTCDE=11\n         B     RETURN2\nSWAERROR DS    0H\n         WTO   'STPCND SWAREQ ERROR',ROUTCDE=11\n         B     RETURN2\n         EJECT\n*--------------------------------------------------------------------*\n*              DATE SUBROUTINE                                       *\n*--------------------------------------------------------------------*\n         SPACE 3\n*--------------------------------------------------------------------*\n*              CONVERT JULNGREG DATE TO GREGORIAN                    *\n*--------------------------------------------------------------------*\nJULNGREG DS    0H\n*--------------------------------------------------------------------*\n*              R1 = DATE IN YYDDDF FORMAT                            *\n*--------------------------------------------------------------------*\n         STM   R14,R12,LWASAVE2+12\n         LR    R7,R1\n         ZAP   LWADEC(8),=P'0'\n         MVO   LWADEC+6(2),1(1,R7)\n         OI    LWADEC+7,X'0F'\n         CVB   R1,LWADEC\n         ST    R1,LWAFYY\n         SPACE 1\n*--------------------------------------------------------------------*\n*              DETERMINE IF LEAP YEAR                                *\n*--------------------------------------------------------------------*\n         NI    LWAFLAG,255-$LEAP\n         SPACE 1\n         L     R1,LWAFYY\n         SLR   R0,R0\n         D     R0,=F'4'            LEAP YEAR\n         LTR   R0,R0               ANY REMAINDER\n         BNZ   JULN0100             NO, NOT LEAP\n         OI    LWAFLAG,$LEAP       SET LEAP YEAR\n         B     JULN0100\n*\n         SPACE 3\nJULN0100 DS    0H\n         ZAP   LWADEC,=P'0'\n         MVC   LWADEC+6(2),2(R7)   MOVE IN DDDF PORTION\n         OI    LWADEC+7,X'0F'\n         CVB   R1,LWADEC\n         ST    R1,LWAFDDD\n         SPACE 2\n*--------------------------------------------------------------------*\n*              DETERMINE MONTH AND DAY OF MONTH                      *\n*--------------------------------------------------------------------*\n         LA    R0,12               # OF MONTHS\n         LA    R1,1                WHICH MONTH\n         LA    R2,DAYSNMTH         DAYS IN MONTH TABLE\n         LA    R3,0                SUM REG\n         SPACE 2\nJULN0120 DS    0H\n         LR    R15,R3              SAVE PREV SUM\n         AH    R3,0(,R2)\n         TM    LWAFLAG,$LEAP       LEAP YEAR\n         BZ    JULN0130             NO\n         CL    R1,=F'2'            FEBRUARY\n         BNE   JULN0130             NO\n         LA    R3,1(,R3)            YES +1\nJULN0130 DS    0H\n         C     R3,LWAFDDD          IN THIS MONTH\n         BNL   JULN0180            >=\n         LR    R15,R3\n         LA    R1,1(,R1)           NEXT MONTH INDEX\n         LA    R2,2(,R2)           NEXT MONTH IN TABLE\n         BCT   R0,JULN0120\n         BCTR  R1,0                -1 (13 MONTH)\nJULN0180 DS    0H\n         ST    R1,LWAFMM           SAVE MONTH\n         LR    R3,R15              # DAYS TO START OF MONTH\n         L     R1,LWAFDDD          GET JULIAN DATE\n         SR    R1,R3                - 1ST DAY OF MONTH\n         ST    R1,LWAFDD           DAY OF MONTH\n         SPACE 3\n*--------------------------------------------------------------------*\n*              GOT YY=LWAFYY, MM=LWAFMM, DD=LWAFDD                   *\n*--------------------------------------------------------------------*\nJULN0200 DS    0H\n         MVC   LWAGREG,BLANKS\n         SPACE 1\n         L     R1,LWAFMM           # OF MONTH\n         CVD   R1,LWADEC\n         OI    LWADEC+7,X'0F'\n         UNPK  LWADEC+8(03),LWADEC+6(2)\n         MVC   LWAGMM(2),LWADEC+9\n         MVI   LWAGMM+2,C'/'\n         SPACE 1\n         L     R1,LWAFDD           DAY OF MONTH\n         CVD   R1,LWADEC\n         OI    LWADEC+7,X'0F'\n         UNPK  LWADEC+8(03),LWADEC+6(2)\n         MVC   LWAGDD(2),LWADEC+9\n         MVI   LWAGDD+2,C'/'\n         SPACE 1\n         L     R1,LWAFYY           YEAR\n         CVD   R1,LWADEC\n         OI    LWADEC+7,X'0F'\n         UNPK  LWADEC+8(03),LWADEC+6(2)\n         MVC   LWAGYY(2),LWADEC+9\n         MVI   LWAGYY+2,C' '\n         SPACE 1\n         B     JULNRC00\nJULNRC00 DS    0H\n         LM    R14,R12,LWASAVE2+12\n         BR    R14\n         SPACE 1\nDAYSNMTH DC    H'031,028,031,030,031,030'\n         DC    H'031,031,030,031,030,031'\nDAYSNMTHL EQU  *-DAYSNMTH\n         EJECT\n*--------------------------------------------------------------------*\n*              ISSUE SEND COMMAND                                    *\n*--------------------------------------------------------------------*\nSENDMSG  DS    0H\n         STM   R14,R12,LWASAVE2+12\n         TM    LWAFLAG,$AUTH\n         BZ    SMSGRET\n         MVC   SENDBFR,BLANKS\n         LA    R1,L'SENDBFR\n         SLL   R1,16               MOVE TO HI HALF\n         ST    R1,SENDMLEN         SAVE LENGTH AND FLAGS\n         SPACE 2\n         LA    R2,SENDBFR          BUILD SEND AROUND MSG\n         MVC   0(07,R2),=C'SEND ''+'\n         LA    R2,7(,R2)\n         MVC   0($MSGL,R2),$MSGBEG MOVE IN MSG\n         LA    R2,$MSGL(,R2)\n         MVC   0(08,R2),=C''',USER=('\n         LA    R2,8(,R2)\n         MVC   0(7,R2),LWAUSER\n         LA    R3,8\nSEND100  DS    0H\n         CLI   0(R2),C' '          FIND END OF\n         BE    SEND120              USERID\n         LA    R2,1(,R2)           NEXT CHAR\n         BCT   R3,SEND100\nSEND120  DS    0H\n         MVC   0(08,R2),=C'),LOGON '  END PAREN.\n         LA    R1,$MSGBEG\n*        MODESET KEY=ZERO          GET KEY ZERO FOR MGCR\n         LA    R1,SENDMLEN         SET UP PARM. LIST ADDR.\n         SLR   R0,R0               SET OPERATION CODE\n         SVC   34                  ISSUE MGCR SVC\n*        MODESET KEY=NZERO         GET KEY ZERO FOR MGCR\nSMSGRET  DS    0H\n         LM    R14,R12,LWASAVE2+12\n         SLR   R15,R15             ZERO RETURN CODE\n         BR    R14\n         EJECT\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\n         DC    0D'0'\nCALL1    CALL  ,(,),VL,MF=L CALL STPCND\nCALL1L   EQU   *-CALL1\n         SPACE 2\nXTRC1    EXTRACT 0,'S',FIELDS=(TIOT),MF=L\nXTRC1L   EQU   *-XTRC1\n         SPACE 2\n*               0         1         2         3         4         5\n*               0123456789012345678901234567890123456789012345678901234\nWTO1     WTO   '  ###  JJJJJJJJ.PPPPPPPP.SSSSSSSS  MM/DD/YY  RC=ZXXXX  .\n               ',DESC=7,ROUTCDE=(11),MF=L\nWTO1L    EQU   *-WTO1\n$MSGL    EQU   WTO1L-4-4\n$MSGBEG  EQU   LWAWTO1+4,$MSGL\n$STEP#   EQU   LWAWTO1+4+01,4\n$JOBN    EQU   LWAWTO1+4+07,8\n$PROCN   EQU   LWAWTO1+4+16,8\n$STEPN   EQU   LWAWTO1+4+25,8\n$DATE    EQU   LWAWTO1+4+35,8\n$STEPRC  EQU   LWAWTO1+4+48,4\n$HIGHRC  EQU   $PROCN-1,18\n         SPACE 2\nTRANS    DC    C'0123456789ABCDEF'\nBLANKS   DC    CL120' '\n         SPACE 2\n         DC    0D'0'\n         LTORG ,\n         DC    0D'0'\n         EJECT\nWORK     DSECT\nLWASAVE1 DC    18F'0'\nLWASAVE2 DC    18F'0'\nLWADEC   DC    D'0'\n         DC    D'0'\n         SPACE 2\nLWASTEP  DC    F'0'                STEP #\nLWARC    DC    F'0'                STEP RC\nLWASEND  DC    A(0)                LOADED PGM ADDR\nLWAHIRC  DC    F'0'                HIGHEST RC\nLWAHISTP DC    F'0'                HIGHEST RC STEP #\nLWACALL1 DC    CL(CALL1L)' '       CALL STPCND\n         SPACE 2\nWORKAREA DC    CL10' '\nLWAWTO1  DC    CL(WTO1L)' '        WTO\nLWAMSGA  DC    F'0'\n         CNOP  2,4\nLWAMSG   DC    0CL($MSGL+10+2)' '\n         DC    H'0'\nLWAMSGT  DC    CL($MSGL+10)' '     MSG\n         SPACE 1\nSENDWA   DC    0D'0'\nSENDMLEN DC    H'0'                MGCR PREFIX AND TEXT LENGTH\nSENDMFLG DC    H'0'                MGCR FLAGS (SET TO ZERO)\nSENDBFR  DC    CL(120)' '          MGCR TEXT AREA\nSENDWL   EQU   *-SENDWA            DSECT LENGTH\n         SPACE 1\nLWAFLAG  DC    XL1'00'\n$LEAP    EQU   X'01'\n$HIGH    EQU   X'02'\n$AUTH    EQU   X'04'\nLWAUSERL DC    F'0'\nLWAUSER  DC    CL8' '\n         SPACE 1\nLWAFYY   DC    F'0'                YEAR\nLWAFDDD  DC    F'0'                JULIAN DAY\nLWAFMM   DC    F'0'                MONTH\nLWAFDD   DC    F'0'                DAY OF MONTH\nLWAJULN  DC    F'0'                00YYDDDF\n         SPACE 1\nLWAGREG  DC    0CL(LWAGREGL)' '    GREG. DATE\nLWAGMM   DC    CL2' ',C'/'         |\nLWAGDD   DC    CL2' ',C'/'         |\nLWAGYY   DC    CL2' ',C' '         |\nLWAGREGL EQU   *-LWAGMM            |\n         DC    F'0'\nLWAXTRC1 DC    CL(XTRC1L)' '\nLWATIOT  DC    F'0'\n         DC    0D'0'\nLWORK    EQU   *-WORK\n         EJECT\n*--------------------------------------------------------------------*\n*              IBM DSECTS                                            *\n*--------------------------------------------------------------------*\n         IKJTCB  ,                 TCB\n         SPACE 3                   ----------------\n         IEZJSCB ,                 JSCB\nJSCB     EQU   IEZJSCB\n         SPACE 3                   ----------------\nJCTDSECT DSECT\n         IEFAJCTB                  JCT\n         SPACE 3                   ----------------\nSCTDSECT DSECT\n         IEFASCTB                  SCT\n         SPACE 3                   ----------------\n         IHAPSA                    PSA                             RACF\n         SPACE 3                   ----------------\n         IHAASCB                   ASCB                            RACF\n         SPACE 3                   ----------------\n         IHAASXB                   ASXB                            RACF\n         SPACE 3                   ----------------\n         IHAACEE                   ACEE                            RACF\n         SPACE 3                   ----------------\n         YREGS\n         END   STPCOND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SWAREQ": {"ttr": 13313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x10\\x01\\x02\\tO\\x01\\x11\\x08/\\x10S\\x00q\\x00q\\x00\\x01\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-04-04T00:00:00", "modifydate": "2011-03-23T10:53:10", "lines": 113, "newlines": 113, "modlines": 1, "user": "KBASS"}, "text": "*--------------------------------------------------------------------*\n*              ROUTINE TO CONVERT  SWA SVA'S TO READ ADDRESSES       *\n*--------------------------------------------------------------------*\n*                  INPUT           R1 =  SVA @/TOKEN;FMT=00NNNNNN    *\n*                  OUTPUT          R1 =  CONVERTED SVA, NOPREFIX     *\n*                                  R15 = 0  ALL OK                   *\n*                                  R15 = 12 SWAREQ ERROR             *\n*                                  R15 = 20 GETMAIN ERROR            *\n*--------------------------------------------------------------------*\n*        WRITTEN BY:   SAM BASS                                      *\n*--------------------------------------------------------------------*\n*        ATTRIBUTES:  RENT,REUS, RMODE=24, AMODE=31                  *\n*--------------------------------------------------------------------*\nSWAREQ   RMODE 24\nSWAREQ   AMODE 31\nSWAREQ   CSECT\n         SAVE  (14,12),T,SWAREQ_&SYSDATC._&SYSTIME.\n         LR    R11,R1\n         LR    R12,R15\n         USING SWAREQ,R12\n         SPACE 2\n         LTR   R1,R1\n         BNZ   GETSVA\n         RETURN (14,12),RC=0\nGETSVA   DS    0H\n         L     R15,=A(X'80000000'+SWAR0100)\n         BSM   R0,R15              SET TO AMODE 31\nSWAR0100 DS    0H\n         SPACE 2\n         GETMAIN RC,LV=LWORK,SP=1,LOC=ANY\n         LTR   R15,R15\n         BNZ   SWARC20\n         SPACE 1\n         ST    R1,8(,R13)          CHAIN FWD\n         ST    R13,4(,R1)          CHAIN PREV\n         LR    R13,R1\n         USING WORK,R13\nSWAR0200 DS    0H\n         LA    R7,WEPA\n         ST    R7,WEPAP\n         USING ZB505,R7\n         XC    WEPA,WEPA\n         STCM  R11,7,SWVA          PUT SVA 00FFFFFF INTO FFFFFF00\n         SWAREQ FCODE=RL,EPA=WEPAP,UNAUTH=YES,MF=(E,WSWA)\n         LTR   R15,R15\n         BNZ   SWAR0900\n         SPACE 3\n         L     R1,SWBLKPTR         @ OF HIGH SVA\n         DROP  R7\n         LA    R15,0\n         SPACE 3\nSWARCXX  DS    0H                  R1,R15 MUST BE SAVED\n         L     R14,4(,R13)         RESTORE PREV SAVE ADDR\n         ST    R1,X'18'(,R14)      SET R1\n         LR    R1,R13\n         L     R13,4(,R13)         RESTORE PREV SAVE ADDR\n         ST    R15,X'10'(,R13)     SAVE RETURN CODE\n         FREEMAIN RU,LV=LWORK,A=(R1),SP=1 FREE STORAGE\n         LM    R14,R12,12(R13)     RESTORE REGS\n         BSM   R0,R14              AND RETURN\n*--------------------------------------------------------------------*\n*              GETMAIN ERROR                                         *\n*--------------------------------------------------------------------*\nSWARC20  DS    0H                  GETMAIN ERROR\n         LM    R14,R12,12(R13)     RESTORE REGS\n         LA    R1,0\n         LA    R15,20\n         BSM   R0,R14              AND RETURN\n*--------------------------------------------------------------------*\n*              SWAREQ ERROR                                          *\n*--------------------------------------------------------------------*\nSWAR0900 DS 0H                     ERROR\n         ST    R15,WDEC+8\n         UNPK  WDEC(5),WDEC+8+2(3)\n         TR    WDEC(4),TRANS-240\n         MVC   WWTO(SWARWTOL),SWARWTO\n         MVC   WWTO+MSG11(4),WDEC+0\n         WTO   ,MF=(E,WWTO)\n         SLR   R1,R1\n         LA    R15,12\n         B     SWARCXX\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSWARWTO  WTO   'SWAREQ10 SWAREQ ERROR, RC=0000 HEX',                   X\n               ROUTCDE=11,MF=L\nMSG11    EQU   30,5\nSWARWTOL EQU   *-SWARWTO\nTRANS    DC    C'01234567890ABCDEF'\n         LTORG ,\n*--------------------------------------------------------------------*\n*              D S E C T S                                           *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DS    9D\nWDEC     DS    2D\nWEPAP    DS    A\nWEPA     DS    CL(ZB505LEN),0F'0'\nWSWA     SWAREQ MF=L\nWWTO     DS    CL(SWARWTOL),0F'0'\nLWORK    EQU   *-WORK\n         SPACE 3\n*--------------------------------------------------------------------*\n*        MVS   D S E C T S                                           *\n*--------------------------------------------------------------------*\n         IEFZB505 LOCEPAX=YES\nZB505LEN EQU   *-ZB505\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEFJESCT TYPE=DSECT\n         PRINT GEN\n         YREGS  ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SWAREQA": {"ttr": 13316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x10\\x01\\x02\\tO\\x01\\x11\\x08/\\x10S\\x00q\\x00q\\x00\\x01\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-04-04T00:00:00", "modifydate": "2011-03-23T10:53:10", "lines": 113, "newlines": 113, "modlines": 1, "user": "KBASS"}, "text": "*--------------------------------------------------------------------*\n*              ROUTINE TO CONVERT  SWA SVA'S TO READ ADDRESSES       *\n*--------------------------------------------------------------------*\n*                  INPUT           R1 =  SVA @/TOKEN;FMT=00NNNNNN    *\n*                  OUTPUT          R1 =  CONVERTED SVA, NOPREFIX     *\n*                                  R15 = 0  ALL OK                   *\n*                                  R15 = 12 SWAREQ ERROR             *\n*                                  R15 = 20 GETMAIN ERROR            *\n*--------------------------------------------------------------------*\n*        WRITTEN BY:   SAM BASS                                      *\n*--------------------------------------------------------------------*\n*        ATTRIBUTES:  RENT,REUS, RMODE=24, AMODE=31                  *\n*--------------------------------------------------------------------*\nSWAREQ   RMODE 24\nSWAREQ   AMODE 31\nSWAREQ   CSECT\n         SAVE  (14,12),T,SWAREQ_&SYSDATC._&SYSTIME.\n         LR    R11,R1\n         LR    R12,R15\n         USING SWAREQ,R12\n         SPACE 2\n         LTR   R1,R1\n         BNZ   GETSVA\n         RETURN (14,12),RC=0\nGETSVA   DS    0H\n         L     R15,=A(X'80000000'+SWAR0100)\n         BSM   R0,R15              SET TO AMODE 31\nSWAR0100 DS    0H\n         SPACE 2\n         GETMAIN RC,LV=LWORK,SP=1,LOC=ANY\n         LTR   R15,R15\n         BNZ   SWARC20\n         SPACE 1\n         ST    R1,8(,R13)          CHAIN FWD\n         ST    R13,4(,R1)          CHAIN PREV\n         LR    R13,R1\n         USING WORK,R13\nSWAR0200 DS    0H\n         LA    R7,WEPA\n         ST    R7,WEPAP\n         USING ZB505,R7\n         XC    WEPA,WEPA\n         STCM  R11,7,SWVA          PUT SVA 00FFFFFF INTO FFFFFF00\n         SWAREQ FCODE=RL,EPA=WEPAP,UNAUTH=YES,MF=(E,WSWA)\n         LTR   R15,R15\n         BNZ   SWAR0900\n         SPACE 3\n         L     R1,SWBLKPTR         @ OF HIGH SVA\n         DROP  R7\n         LA    R15,0\n         SPACE 3\nSWARCXX  DS    0H                  R1,R15 MUST BE SAVED\n         L     R14,4(,R13)         RESTORE PREV SAVE ADDR\n         ST    R1,X'18'(,R14)      SET R1\n         LR    R1,R13\n         L     R13,4(,R13)         RESTORE PREV SAVE ADDR\n         ST    R15,X'10'(,R13)     SAVE RETURN CODE\n         FREEMAIN RU,LV=LWORK,A=(R1),SP=1 FREE STORAGE\n         LM    R14,R12,12(R13)     RESTORE REGS\n         BSM   R0,R14              AND RETURN\n*--------------------------------------------------------------------*\n*              GETMAIN ERROR                                         *\n*--------------------------------------------------------------------*\nSWARC20  DS    0H                  GETMAIN ERROR\n         LM    R14,R12,12(R13)     RESTORE REGS\n         LA    R1,0\n         LA    R15,20\n         BSM   R0,R14              AND RETURN\n*--------------------------------------------------------------------*\n*              SWAREQ ERROR                                          *\n*--------------------------------------------------------------------*\nSWAR0900 DS 0H                     ERROR\n         ST    R15,WDEC+8\n         UNPK  WDEC(5),WDEC+8+2(3)\n         TR    WDEC(4),TRANS-240\n         MVC   WWTO(SWARWTOL),SWARWTO\n         MVC   WWTO+MSG11(4),WDEC+0\n         WTO   ,MF=(E,WWTO)\n         SLR   R1,R1\n         LA    R15,12\n         B     SWARCXX\n*--------------------------------------------------------------------*\n*              DATA AREAS                                            *\n*--------------------------------------------------------------------*\nSWARWTO  WTO   'SWAREQ10 SWAREQ ERROR, RC=0000 HEX',                   X\n               ROUTCDE=11,MF=L\nMSG11    EQU   30,5\nSWARWTOL EQU   *-SWARWTO\nTRANS    DC    C'01234567890ABCDEF'\n         LTORG ,\n*--------------------------------------------------------------------*\n*              D S E C T S                                           *\n*--------------------------------------------------------------------*\nWORK     DSECT\nWSAVE    DS    9D\nWDEC     DS    2D\nWEPAP    DS    A\nWEPA     DS    CL(ZB505LEN),0F'0'\nWSWA     SWAREQ MF=L\nWWTO     DS    CL(SWARWTOL),0F'0'\nLWORK    EQU   *-WORK\n         SPACE 3\n*--------------------------------------------------------------------*\n*        MVS   D S E C T S                                           *\n*--------------------------------------------------------------------*\n         IEFZB505 LOCEPAX=YES\nZB505LEN EQU   *-ZB505\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEFJESCT TYPE=DSECT\n         PRINT GEN\n         YREGS  ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOB": {"ttr": 13319, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"BROWSE DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOE": {"ttr": 13321, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"EDIT   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOR": {"ttr": 13323, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/**************************************************/\n/* NOTE:  Use of this EXEC requires the REVIEW    */\n/*        command from CBT file 134 or 135.       */\n/**************************************************/\n/* REVIEW command output.  This has an advantage  */\n/* over TSOE/TSOB/TSOV in that it works under     */\n/* native TSO (TSO READY) without ISPF.           */\n/**************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(SYSALLDA) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress TSO     \"REVIEW       \"||ddnm||\"    FILE\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOV": {"ttr": 13325, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00I\\x01\\x07\\x11\\x7f\\x01\\x11&O\\x01\\x03\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2011-09-21T01:03:49", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/****************************************************/\n/* There is really no advantage to using TSOV over  */\n/* TSOE since a temporary data set is used, but     */\n/* to complete the TSO* set of EXECs - here it is.  */\n/****************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"VIEW   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WAITTIME": {"ttr": 13327, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x11\\x08/\\x01\\x11\\x08/\\x11%\\x00R\\x00R\\x00\\x00\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-03-23T00:00:00", "modifydate": "2011-03-23T11:25:07", "lines": 82, "newlines": 82, "modlines": 0, "user": "KBASS"}, "text": "*---------------------------------------------------------------\n*              THIS PROGRAM WILL WAIT A SPECIFIC NUMBER OF\n*              SECONDS PASSED IN THE PARM FIELD\n*              FOR A MAX OF 999 SECONDS\n*---------------------------------------------------------------\n*        ATTRIBUTES: REENTRANT, REUSABLE\n*                    AMODE=31, RMODE=24\n*---------------------------------------------------------------\n*              FROM COBOL\n*              WAIT-LEN IS TWO BYTE BINARY (INTEGER)\n*              WAIT-SEC IS 3 BYTE CHAR NUMBER.\n*        1 WAIT-PARM\n*          5 WAIT-LEN PIC 9(4) VALUE 3\n*          5 WAIT-SEC PIC X(3) VALUE '010'.\n*\n*        CALL WAITTIME USING WAIT-PARM.\n*---------------------------------------------------------------\nWAITTIME RMODE 24\nWAITTIME AMODE 31\nWAITTIME CSECT ,\n         SAVE  (14,12),T,*\n         LR    R12,R15\n         USING WAITTIME,R12\n         LR    R11,R1\n         STORAGE OBTAIN,LENGTH=LWORK,SP=1\n         ST    R1,8(,R13)          OURS INTO CALLERS\n         ST    R13,4(,R1)          CALLERS INTO OURS\n         LR    R13,R1              COPY NEW R13\n         USING WORK,R13\n*--------------------------------------------------------------------*\n*              GET PARM ###                                          *\n*--------------------------------------------------------------------*\n         L     R2,0(,R11)          GET PARAM ADDR\n         LH    R3,0(R2)\n         LTR   R3,R3               IS ANYTHING THERE\n         BNP   EXIT\n         C     R3,=F'3'            > THREE CHARACTERS\n         BH    EXIT12               YES, ERROR\n         BCTR  R3,0                -1\n         EX    R3,MOVE             MOVE INTO WDEC\n         SPACE 1\nPACK0000 EX    R3,PACK\n         SPACE 1\n         CVB   R1,WTIME            CONVERT TO BINARY\n         MH    R1,=H'100'          CONVERT TO HUNDRETH OF SEC.\n         LA    R1,1(,R1)           +1 IN CASE ITS ZERO\n         ST    R1,WINTVL           SAVE\n         STIMER WAIT,BINTVL=WINTVL WAIT\nEXIT     DS    0H\n         LA    R15,0\n         B     EXITXX\nEXIT12   DS    0H\n         WTO   'WAITTIME PARM FIELD LARGER THAN 3 DIGITS',      XXXXXXXX\n               ROUTCDE=11\n         LA    R15,12\n         B     EXITXX\nEXITXX   DS    0H\n         LR    R5,R15\n         LR    R1,R13\n         L     R13,4(,R13)\n         STORAGE RELEASE,LENGTH=LWORK,ADDR=(1),SP=1\n         LR    R15,R5\n         RETURN (14,12),RC=(15)\n         ORG   *-2                 BACKUP OVER BR  14\n         BSM   0,R14\n*--------------------------------------------------------------------*\n*        STATIC DATA AREAS                                           *\n*--------------------------------------------------------------------*\nMOVE     MVC   WDEC(0),2(R2)\nPACK     PACK  WTIME(8),WDEC(0)\n         LTORG ,\n*--------------------------------------------------------------------*\n*        DSECTS                                                      *\n*--------------------------------------------------------------------*\nWORK     DSECT ,\nWSAVE    DS    9D\nWDEC     DC    2D'0'\nWTIME    DC    2D'0'\nWINTVL   DC    F'0'\nLWORK    EQU   *-WORK\n         YREGS\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WLMREXX": {"ttr": 13330, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x01\\x02(/\\x01\\x02(/\\tH\\x01\\x14\\x01\\x14\\x00\\x00\\xe2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-10-09T00:00:00", "modifydate": "2002-10-09T09:48:13", "lines": 276, "newlines": 276, "modlines": 0, "user": "SBASS"}, "text": " /* REXX */\n /********************************************************************/\n /*                                                                  */\n /* REXX EXEC:  WLMREXX                                              */\n /*                                                                  */\n /********************************************************************/\n /*                                                                  */\n /* AUTHOR: K.M. (SAM) BASS                                          */\n /*         BITS@KMBASS.COM                                          */\n /*                                                                  */\n /********************************************************************/\n /*  PURPOSE:                                                        */\n /*  REXX EXEC TO READ THE WLM ISPF TABLE PDS AND EXTRACT THE        */\n /*  NAMES OF THE TABLES, THE KEYS AND VARIABLE NAMES AND            */\n /*  GENERATE SAS CODE TO LOAD THE WLM INTO A SAS DATABASE           */\n /********************************************************************/\n /*                                                                  */\n /*   K.M. (SAM) BASS     PROVIDES THIS PROGRAM \"AS IS\" WITHOUT      */\n /*   WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,  */\n /*   BUT NOT LIMITED TO, THE DOCUMENTATION, THE FUNCTIONS, THE      */\n /*   TECHNICAL ACCURACY OR PERFORMANCE OF THE PROGRAM.              */\n /*                                                                  */\n /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/\n /*--->                   AT YOUR OWN RISKS.                     <---*/\n /*                                                                  */\n /*   ALL USERS ARE EXPECTED TO INSPECT, EVALUATE AND MAKE FINAL     */\n /*   DECISION CAREFULLY AS TO THE USEFULNESS OF THIS PROGRAM IN     */\n /*   HIS/HER OWN INSTALLATION.                                      */\n /*                                                                  */\n /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/\n /*--->                   AT YOUR OWN RISKS.                     <---*/\n /*                                                                  */\n /*   ACCEPTANCE AND USE OF THIS PROGRAM AUTOMATICALLY RELEASES      */\n /*   K.M. (SAM) BASS     FROM LIABILITY FOR ANY PROBLEMS CAUSED     */\n /*   BY THE USE OF THIS PROGRAM.                                    */\n /*                                                                  */\n /*--->    PLEASE UNDERSTAND THAT YOU ARE USING THIS PROGRAM     <---*/\n /*--->                   AT YOUR OWN RISKS.                     <---*/\n /*                                                                  */\n /*                                                                  */\n /********************************************************************/\n MAINLINE:\n /*-------------------------------------------------------------*/\n /*  JCL TO BUILD THE SAS TABLES IS AS FOLLOWS                  */\n /* //SASJOB   JOB 1,WLMREXX,NOTIFY=&SYSUID,REGION=4M,          */\n /* //         CLASS=X,MSGCLASS=X,MSGLEVEL=(1,1)                */\n /* //*------- ----------------------------------------------*/ */\n /* //DELETE   EXEC PGM=IDCAMS                                  */\n /* //SYSPRINT DD  SYSOUT=*                                     */\n /* //SYSIN    DD  *                                            */\n /*  DELETE    YOUR.MXG.WLM                                     */\n /*  SET       MAXCC=0                                          */\n /* //*------- ----------------------------------------------*/ */\n /* //S1       EXEC SAS                                         */\n /* //PDB      DD  DISP=(NEW,CATLG),DSN=YOUR.MXG.WLM,           */\n /* //          SPACE=(CYL,(1,1)),UNIT=(SYSDA,1)                */\n /* //SYSIN    DD DISP=SHR,DSN=KBASS.PERM.SAS(WLMDATA)          */\n /*-------------------------------------------------------------*/\n /*-------------------------------------------------------------*/\n /*  WLMDEF IS THE INPUT PDS CONTAINING THE WLM DEFINITIONS     */\n /*  SASOUT IS THE OUTPUT FILE THAT WILL CONTAIN THE GENERATED  */\n /*         SAS CODE                                            */\n /*-------------------------------------------------------------*/\n WLMDEF=\"'KBASS.PERM.WLMDEF'\";\n SASOUT=\"'KBASS.PERM.SAS(WLMDATA)'\";\n \"ISPEXEC CONTROL ERRORS RETURN\"\n     CALL INITIAL;\n     CALL READMBRS;\n     CALL TBQUERY;\n     CALL GETROWS;\n     CALL CLEANUP;\n     EXIT\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* INITIAL                                                     */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nINITIAL:\nRETURN;\n\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* READ MEMBERS                                                */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nREADMBRS:\n \"ISPEXEC LMINIT DATAID(IDWLM) DATASET(\"WLMDEF\") ENQ(SHR)\"\n \"ISPEXEC LMOPEN DATAID(\"IDWLM\") OPTION(INPUT)\"\n /*-------------------------------------------------------------*/\n /* READ THROUGH THE WLM PDS AND GET THE MEMBERS NAMES AND      */\n /* STORE THEM IN MBRS.IMBR                                     */\n /*-------------------------------------------------------------*/\n MEMBER=\"\";\n \"ISPEXEC LMMLIST DATAID(\"IDWLM\") OPTION(LIST) MEMBER(MEMBER)\"\n LRC=RC;\n IMBR=0;\n DO UNTIL(LRC>0);\n   IMBR=IMBR+1;\n   MBR.IMBR=MEMBER;\n   \"ISPEXEC LMMLIST DATAID(\"IDWLM\") OPTION(LIST) MEMBER(MEMBER)\"\n   LRC=RC;\n END;\n MBR.0=IMBR;\n \"ISPEXEC LMCLOSE DATAID(\"IDWLM\")\"\n \"ISPEXEC LMMLIST DATAID(\"IDWLM\") OPTION(FREE)\"\n \"ISPEXEC LMFREE DATAID(\"IDWLM\")\"\nRETURN;\n\n\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* TBDISPLAY                                                   */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nTBQUERY:\n \"ISPEXEC LIBDEF WLMDEF DATASET  ID(\"WLMDEF\")\"\n /*-------------------------------------------------------------*/\n /* GO THROUGH EACH OF THE TABLE NAMES GENERATED BY 'READMBRS'  */\n /* AND DO A TBQUERY TO GET THE 'KEY NAMES' AND THE COUNT ',    */\n /* 'VARIABLE NAMES' AND THE COUNT, AND A COUNT OF THE ROWS     */\n /*-------------------------------------------------------------*/\n DO IMBR = 1 TO MBR.0;\n   \"ISPEXEC TBOPEN \"MBR.IMBR\" NOWRITE LIBRARY(WLMDEF)\"\n   \"ISPEXEC TBQUERY \"MBR.IMBR\" KEYS(KEYS) NAMES(NAMES) \",\n            \"ROWNUM(NUMROWS) KEYNUM(NUMKEYS) NAMENUM(NUMNAMES)\";\n /*SAY MBR.IMBR NUMROWS NUMKEYS NUMNAMES KEYS; */\n /*SAY \"       \" NAMES;                     */\n   KEYS.IMBR=KEYS;\n   NAMES.IMBR=NAMES;\n   NUMROWS.IMBR=NUMROWS;\n   NUMKEYS.IMBR=NUMKEYS;\n   NUMNAMES.IMBR=NUMNAMES;\n   \"ISPEXEC TBCLOSE \"MBR.IMBR\"      LIBRARY(WLMDEF)\"\n END;\nRETURN;\n\n\n /*=============================================================*/\n /*-------------------------------------------------------------*/\n /* GETROWS                                                     */\n /*-------------------------------------------------------------*/\n /*=============================================================*/\nGETROWS:\n /*-------------------------------------------------------------*/\n /* THIS GENERATES TWO STEM VARIABLES                           */\n /* FMT.* IS THE SAS CODE TO INITIALIZE THE SAS TABLES          */\n /* SAS.* IS THE SAS CODE TO PUT DATA IN THE SAS TABLES         */\n /* II IS THE COUNTER FOR SAS.*                                 */\n /* JJ IS THE COUNTER FOR FMT.*                                 */\n /*-------------------------------------------------------------*/\n \"ISPEXEC LIBDEF WLMDEF DATASET  ID(\"WLMDEF\")\"\n   II=0;\n   JJ=0;\n   II=II+1; SAS.II=\"OPTIONS USER=PDB;\";\n   JJ=JJ+1; FMT.JJ=\"OPTIONS USER=PDB;\";\n DO IMBR = 1 TO MBR.0;\n   SAY \"PROCESSING TABLE \" MBR.IMBR;\n   \"ISPEXEC TBOPEN \"MBR.IMBR\" NOWRITE LIBRARY(WLMDEF)\"\n   \"ISPEXEC TBTOP \"MBR.IMBR;\n   SAY \"TABLE \"MBR.IMBR\" KEYS \" KEYS.IMBR; /**/\n   SAY \"TABLE \"MBR.IMBR\" NAMES \" NAMES.IMBR; /**/\n /*-------------------------------------------------------------*/\n /* KEYS.IMBR HAS A LIST OF VARIABLE GOTTEN FROM TBQUERY IN THE */\n /* FORM  ' (KEY1 KEY2 KEY3 ... KEYN)'                          */\n /*-------------------------------------------------------------*/\n /* LETS STRIP OFF THE ( ) AND THEN                             */\n /* PARSE EACH VARIABLE NAME INTO ZK.J                          */\n /* I KNOW, I COULD HAVE USED WORDS() AND WORD() FUNCTION...    */\n /*-------------------------------------------------------------*/\n   PARSE UPPER VAR KEYS.IMBR \"(\" XKEYS \")\";\n   XXKEYS=XKEYS;\n   DO J = 1 TO NUMKEYS.IMBR;\n     PARSE UPPER VAR XKEYS ZK.J XKEYS;\n   END;\n /*-------------------------------------------------------------*/\n /* NAMES.IMBR HAS A LIST OF VARIABLE GOTTEN FROM TBQUERY IN THE*/\n /* FORM  ' (VAR1 VAR2 VAR3 ... VARN)'                          */\n /*-------------------------------------------------------------*/\n /* LETS STRIP OFF THE ( ) AND THEN                             */\n /* PARSE EACH VARIABLE NAME INTO ZN.J                          */\n /*-------------------------------------------------------------*/\n   PARSE UPPER VAR NAMES.IMBR \"(\" XNAMES \")\";\n   XXNAMES=XNAMES;\n   XXVARS = XXKEYS||' '||XXNAMES;\n   DO J = 1 TO NUMNAMES.IMBR;\n     PARSE UPPER VAR XNAMES ZN.J XNAMES;\n   END;\n /*-------------------------------------------------------------*/\n /* GENERATE DATA MBR.IMBR (KEEP= ....); FOR SAS DATA STEP      */\n /* GENERATE DATA MBR.IMBR (KEEP= ....); FOR THE FMT DATA STEP  */\n /*-------------------------------------------------------------*/\n    II=II+1; SAS.II=\"DATA \"||MBR.IMBR||\" (KEEP=\";\n    JJ=JJ+1; FMT.JJ=\"DATA \"||MBR.IMBR||\" (KEEP=\";\n    DO IWORD = 1 TO WORDS(XXVARS);\n      II=II+1; SAS.II=\"                 \"WORD(XXVARS,IWORD);\n      JJ=JJ+1; FMT.JJ=\"                 \"WORD(XXVARS,IWORD);\n    END\n    II=II+1; SAS.II=\");\";\n    JJ=JJ+1; FMT.JJ=\");\";\n /*-------------------------------------------------------------*/\n /* GENERATE SET  MBR.IMBR (NULL TABLE) THAT HAS THE VARIABLE LENGS*/\n /*-------------------------------------------------------------*/\n    II=II+1; SAS.II=\" SET \"||MBR.IMBR||\";\";\n\n /*-------------------------------------------------------------*/\n /*  GET THE KEY  VARIABLES AND THEIR VALUE                     */\n /*  ALSO SAVE THE MAX LENGTH OF EACH KEYS VARIABLE IN LENK.IMBR.K */\n /*  I USE THE INTERPRET TO TAKE THE VARIABLE NAME IN ZK.K AND  */\n /*  INDIRECT ACCESS THE DATA ASSOCIATED WITH THE VARIABLE      */\n /*  NAME OF THE COLUMN.                                        */\n /*  SO IT IS LIKE  B=INDIRECT(ZK.K)                            */\n /*  BUILDS   VAR1 = 'VAR1.DATA.VALUE';                         */\n /*-------------------------------------------------------------*/\n   IF NUMROWS.IMBR > 0 THEN DO ;\n     DO J = 1 TO NUMROWS.IMBR;\n    \"ISPEXEC TBSKIP \"MBR.IMBR;\n      IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;\n       IF J = 1 THEN LENK.IMBR.K=0;\n       INTERPRET \"B=\"ZK.K;\n       II=II+1; SAS.II = ZK.K||\"= '\"||TRANSLATE(B,' ','00'X)||\"';\";\n       C= \"'\"||B||\"'\";\n       LENK.IMBR.K=MAX(LENK.IMBR.K,LENGTH(C));\n      END;\n      LEN.ZN.IMBR=0;\n /*-------------------------------------------------------------*/\n /*  GET THE NAME VARIABLES AND THEIR VALUE                     */\n /*  ALSO SAVE THE MAX LENGTH OF EACH VARIABLE IN LENN.IMBR.K   */\n /*-------------------------------------------------------------*/\n      IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;\n       IF J = 1 THEN LENN.IMBR.K=0;\n       INTERPRET \"B=\"ZN.K;\n       II=II+1; SAS.II = ZN.K||\"= '\"||TRANSLATE(B,' ','00'X)||\"';\";\n       C= \"'\"||B||\"'\";\n       LENN.IMBR.K=MAX(LENN.IMBR.K,LENGTH(C));\n      END;\n       II=II+1;SAS.II=\"OUTPUT;\";\n     END;\n /*-------------------------------------------------------------*/\n /*  NOW THAT WE HAVE FINISHED GENERATING ALL OF THE ROWS FOR   */\n /*  THIS TABLE, LETS BUILD THE FORMAT STATEMENTS FOR EACH OF   */\n /*  THE VARIABLES THAT WAS GENERATED BY THE STEP ABOVE         */\n /*-------------------------------------------------------------*/\n     IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;\n       JJ=JJ+1;FMT.JJ=\"INFORMAT \"||ZK.K||\" $\"||LENK.IMBR.K||\".;\";\n     END;\n     IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;\n       JJ=JJ+1;FMT.JJ=\"INFORMAT \"||ZN.K||\" $\"||LENN.IMBR.K||\".;\";\n     END;\n     IF NUMKEYS.IMBR > 0 THEN DO K = 1 TO NUMKEYS.IMBR;\n       JJ=JJ+1;FMT.JJ=ZK.K||\"=\"||\"'';\";\n     END;\n     IF NUMNAMES.IMBR > 0 THEN DO K = 1 TO NUMNAMES.IMBR;\n       JJ=JJ+1;FMT.JJ=ZN.K||\"=\"||\"'';\";\n     END;\n     II=II+1;SAS.II=\"RUN;\";\n /*-------------------------------------------------------------*/\n /*  GENERATE THE PROC SORT IF THERE ARE ANY KEYS               */\n /*-------------------------------------------------------------*/\n     IF NUMKEYS.IMBR > 0 THEN DO;\n       II=II+1; SAS.II = \"PROC SORT DATA=\"||MBR.IMBR||\";\"\n       II=II+1; SAS.II = \" BY \"||XXKEYS||\";\";\n     END;\n   SAS.0=II; /* SET THE NUMBER OF ROWS */\n   FMT.0=JJ; /* SET THE NUMBER OF ROWS */\n   END;\n END;\n \"ALLOC F(SASOUT) DA(\"SASOUT\") SHR REUSE\";\n \"EXECIO * DISKW SASOUT (STEM FMT.     )\";\n \"EXECIO * DISKW SASOUT (STEM SAS. FINIS)\";\n \"FREE  F(SASOUT)\";\nRETURN;\n /*-------------------------------------------------------------*/\n /* CLEANUP                                                     */\n /*-------------------------------------------------------------*/\nCLEANUP:\nRETURN;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZAPDSCB": {"ttr": 13573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x17\\x18_\\x01\\x17\\x18_\\x00@\\tE\\tE\\x00\\x00\\xe2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2017-07-04T00:00:00", "modifydate": "2017-07-04T00:40:00", "lines": 2373, "newlines": 2373, "modlines": 0, "user": "SBASS"}, "text": "          PUNCH ' SETCODE AC(1) '\n*--------------------------------------------------------------------*\n*        DON'T KNOW WHO WROTE THIS ORIGINALLY                        *\n*        FULL  SCREEN VTOC ZAPPER.                                   *\n*--------------------------------------------------------------------*\n***********************************************************************\n* MODIFIED BY K.M. (SAM) BASS (SBASS,SJB,KBASS,KMB)                   *\n* KMB1 2017/07/03 support 21th century dates                          *\n***********************************************************************\n* This version does not need the authorization SVC, but it needs to   *\n* be entered in the IKJTSOxx PARMLIB AUTHCMD list.  If you want an    *\n* easier way to do TSO authorizations, see CBT Files 185 and 797.     *\n* You'll be surprised at what is available to the sysprog..... (SBG)  *\n***********************************************************************\n$ATH$    EQU   242                 AUTHORIZATION SVC\n*--------------------------------------------------------------------*\n*        MSSG    MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n&MSGNAME MSSG  &DATA,&REPLN,&PREFIX=YES\n         LCLC  &FN\n         LCLA  &FL\n         AIF   (T'&DATA NE 'O').IN0100\n         MNOTE 8,'DATA NOT SUPPLIED IN ''MSSG'' GENERATION, EXPANSION T$\n               ERMINATED'\n         MEXIT\n.IN0100  ANOP\n         AIF   (T'&MSGNAME EQ 'O').IN0200\n&FN      SETC  '&MSGNAME'\n         AGO   .IN0300\n.IN0200  MNOTE 4,'MAP NAME NOT SPECIFIED, DEFAULT NAME GENERATED'\n&FN      SETC  'MSSG&SYSNDX'            GENERATE DEFAULT NAME\n.IN0300  ANOP\n         AIF   ('&DATA'(1,1) EQ '''').IN0400     FIRST CHAR A (')?\n         MNOTE 8,'CHARACTER STRING MUST BEGIN AND END WITH A QUOTE - EX$\n               PANSION TERMINATED'\n         MEXIT\n.IN0400  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0500  IS REPLY LENGTH SUPPLIED?\n         AIF   (T'&REPLN EQ 'N').IN0500  IS REPLY LENGTH NUMERIC?\n         MNOTE 8,'''REPLY LENGTH'' VALUE IS NOT NUMERIC - EXPANSION TER$\n               MINATED'\n         MEXIT\n.IN0500  ANOP\n&FN      DS    0H                      ALIGN ON HALFWORD\n&FL      SETA  K'&DATA-2               DEFAULT TO LENGTH OF LITERAL\n&FL      SETA  (((&FL+1)/2)*2)         ROUND TO HALF WORD LENGTH\n         AIF   ('&PREFIX' NE 'YES').IN0550   BYPASS AL2 IF NOT DESIRED\n         DC    AL2(&FL)                LENGTH OF TEXT - ROUNDED TO 2\n.IN0550  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0600  IS REPLY LENGTH SUPPLIED?\n         DC    AL2(&REPLN)             LENGTH OF REPLY EXPECTED\n.IN0600  ANOP\n         DC    CL&FL&DATA\n         MEND\n*--------------------------------------------------------------------*\n*        $KEYS   MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n         $KEYS\n         GBLB  &KEYDEF\n         AIF   (&KEYDEF).MEX2\n&KEYDEF  SETB  1\nPFKEY01  EQU   X'F1'                   EQUATE FOR PFKEY01\nPFKEY02  EQU   X'F2'                   EQUATE FOR PFKEY02\nPFKEY03  EQU   X'F3'                   EQUATE FOR PFKEY03\nPFKEY04  EQU   X'F4'                   EQUATE FOR PFKEY04\nPFKEY05  EQU   X'F5'                   EQUATE FOR PFKEY05\nPFKEY06  EQU   X'F6'                   EQUATE FOR PFKEY06\nPFKEY07  EQU   X'F7'                   EQUATE FOR PFKEY07\nPFKEY08  EQU   X'F8'                   EQUATE FOR PFKEY08\nPFKEY09  EQU   X'F9'                   EQUATE FOR PFKEY09\nPFKEY10  EQU   X'7A'                   EQUATE FOR PFKEY10\nPFKEY11  EQU   X'7B'                   EQUATE FOR PFKEY11\nPFKEY12  EQU   X'7C'                   EQUATE FOR PFKEY12\n         SPACE\nPFKEY13  EQU   X'C1'                   EQUATE FOR PFKEY13\nPFKEY14  EQU   X'C2'                   EQUATE FOR PFKEY14\nPFKEY15  EQU   X'C3'                   EQUATE FOR PFKEY15\nPFKEY16  EQU   X'C4'                   EQUATE FOR PFKEY16\nPFKEY17  EQU   X'C5'                   EQUATE FOR PFKEY17\nPFKEY18  EQU   X'C6'                   EQUATE FOR PFKEY18\nPFKEY19  EQU   X'C7'                   EQUATE FOR PFKEY19\nPFKEY20  EQU   X'C8'                   EQUATE FOR PFKEY20\nPFKEY21  EQU   X'C9'                   EQUATE FOR PFKEY21\nPFKEY22  EQU   X'4A'                   EQUATE FOR PFKEY22\nPFKEY23  EQU   X'4B'                   EQUATE FOR PFKEY23\nPFKEY24  EQU   X'4C'                   EQUATE FOR PFKEY24\n         SPACE\nPA1KEY   EQU   X'6C'                   EQUATE FOR PA1KEY\nPA2KEY   EQU   X'6E'                   EQUATE FOR PA2KEY\nPA3KEY   EQU   X'6B'                   EQUATE FOR PA3KEY\nCLEAR    EQU   X'6D'                   EQUATE FOR CLEAR\nENTER    EQU   X'7D'                   EQUATE FOR ENTER\n.MEX2    ANOP\n         MEND\n*--------------------------------------------------------------------*\n*        $FLD    MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n.*\n.*       KMB   CHANGED &ENTS AND &CURSOR AIFS TO NOT USE TRUE/FALSE\n.*\n&FLDNAME $FLD  &OPTN=2,&LENGTH=,&POS=,&LOC=,&FILL=,                    $\n               &ATR=(SKIP),&INITIAL=,&TYPE=,&EQU=,&VALUES=,            $\n               &MODEL='3276-2',&OPERATN=,&BUFFTAB=NO\n         GBLA  &TLEN               ALGREBRAIC WORK FIELD              *\n         GBLA  &ARG                3270 ATTRIBUTE CHAR RESOLUTION     *\n         GBLA  &MTYPE              TYPE REQUEST                       *\n         GBLA  &CURSOR             CURSOR POSITION                    *\n         GBLA  &OPT                PROCESS OPTION INDICATOR           *\n         GBLA  &PREVPOS            PREVIOUS POSITION                  *\n         GBLA  &LINES              NUMBER OF LINES PER PAGE           *\n         GBLA  &COLS               NUMBER OF COLUMNS PER LINE         *\n         GBLC  &MOD1               TYPE OF CRT BEING USED   32XX      *\n         GBLC  &MOD2               MODEL OF CRT BEING USED      -N    *\n         GBLA  &SCRSIZE            TOTAL AREA OF SCREEN               *\n         GBLA  &GLENGTH            FIELD LENGTH                       *\n         GBLA  &EPOS               FIELD ENDING POSITION              *\n         GBLA  &NLOC               CURRENT FIELD LOCATION             *\n         GBLA  &PLOC               PREVIOUS (NEXT) LOCATION           *\n         GBLB  &MAP                FIRST TIME CONDITION SWITCH        *\n         GBLB  &DEFAULT            INITIAL = USER DEFAULT DATA        *\n         GBLB  &DATAIND            DATA FIELD INDICATOR               *\n         GBLB  &PEN                ATR = DET                          *\n         GBLB  &KEYED              ATR = UNPROT                       *\n         GBLB  &IC                 ATR = IC                           *\n         GBLB  &NUMERIC            NUMERIC FIELD INDICATOR\n         GBLB  &SEQ                FIELDS OUT OF SEQUENCE IND         *\n         GBLB  &SKIP               1 IF ATR = SKIP, 0 ALL OTHERS      *\n         GBLB  &PROT               1 IF ATR = PROT, 0 ALL OTHERS      *\n.*       GBLC  &DEVICE             DIVICE TYPE INDICATOR              *\n         GBLC  &FN                 FIELD NAME                         *\n         GBLC  &ATRC               3270 ATTRIBUTE CHARACTER           *\n         LCLA  &REQ                REPLY REQUIRED INDICATOR           *\n         LCLA  &FPOS               FIELD POSITION                     *\n         LCLA  &FLAG               FIELD DESCRIPTOR FLAG              *\n         LCLC  &FILLCHR            FILLER USED INSTEAD OF INITIAL     *\n         GBLC  &GFILL              TYPE=INIT SPECIFICATION OF FILL    *\n         LCLC  &OPER               TYPE OF READ/WRITE OPERATION       *\n         LCLB  &ABORT              ABORT INDICATOR                    *\n         LCLB  &X(10),&XON\n         LCLA  &COUNT,&INDEX,&HIGH,&A,&B,&C\n         LCLA  &Y(10)\n         LCLA  &XAXIS                  X AXIS BUFFER ADDRESS          *\n         LCLA  &YAXIS                  Y AXIS BUFFER ADDRESS          *\n         LCLC  &XCHAR                  X AXIS CHARACTER               *\n         LCLC  &YCHAR                  Y AXIS CHARACTER               *\n         GBLC  &ADDRCHR                ADDRESS CHARACTER STRING       *\n         GBLB  &DOCSW                  DOCUMENTATION PRINT SWITCH     *\n         GBLC  &MAPNAME                NAME OF THIS $FLD MAP          *\n.************************ BUFFER TABLE ENTRIES ************************\n         GBLB  &BUFFTB                 BUFFER ADDRESS TABLE REQUESTED *\n.*       TO CHANGE NUMBER OF ENTRIES, CHANGE THE SUBSCRIPT VALUE      *\n.*             HERE AND THE SETA VALUE FOR &ENTS                      *\n         GBLA  &ENTLEN(256)            BUFFER ENTRY LENGTH - 1        *\n         GBLA  &ENTVCN(256)            NUMBER OF VALUES PER ENTRY     *\n         GBLC  &ENTOFF(256)            BUFFER ENTRY OFFSET            *\n         GBLC  &ENTRBA(256)            BUFFER ENTRY RBA               *\n         GBLC  &ENTVAL(768)            BUFFER ENTRY VALUES 3/ENTRY    *\n         GBLA  &ENTMAX                 MAXIMUM BUFFER ENTRIES         *\n         GBLA  &ENTS                   NUMBER OF BUFFER ENTRIES       *\n         GBLA  &VALCNT                 NUMBER OF TOTAL 'VALUES' ENTRIES\n         LCLA  &LSTCNT                 NUMBER OF ENTRIES PROCESSED    *\n         LCLA  &TCNT1                  WORK COUNTER                   *\n         LCLC  &FNM                    NAME TO BE USED ON DS          *\n.**********************************************************************\n.* *     ANALYZE OPERANDS                                           * *\n.**********************************************************************\n         AIF   (&MAP).IN0100                FIRST TIME THRU ???       @\n         AIF   (T'&TYPE EQ 'O').ERR140      MUST SUPPLY TYPE          *\n         AIF   ('&TYPE' EQ 'INIT').IN0005   MUST SUPPLY INIT FIRST    *\n.ERR140  MNOTE 4,'''INIT'' MUST BE SPECIFIED FOR FIRST INVOCATION OF TH$\n               IS MACRO'                     ERROR IF NOT             *\n.IN0005  ANOP                          HERE AFTER MNOTE               *\n&MAP     SETB  1                        SET ON FIRST TIME THRU        @\n.*       CHANGE THIS SETA IF CHANGING MAXIMUM SUBSCRIPT VALUE         *\n&ENTMAX  SETA  256                      MAXIMUM BUFFER ENTRIES        @\n&VALCNT  SETA  0                        RESET VALUE COUNTER           @\n&MTYPE   SETA  0                        RESET MAY INDICATOR           *\n&PREVPOS SETA  0                        RESET PREVIOUS POS INDICATOR  *\n&SKIP    SETB  1                        INITIALIZE SKIP INDICATOR     *\n&PLOC    SETA  1                        INITIALIZE LOCATION COUNTER   *\n&ADDRCHR SETC  'Z40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F50D1D2D3D4D5D6D7D8D95A$\n               5B5C5D5E5F6061E2E3E4E5E6E7E8E96A6B6C6D6E6FF0F1F2F3F4F5F6$\n               F7F8F97A7B7C7D7E7F'\n.*             THE Z AT THE BEGINNING OF THE TABLE IS TO OFFSET THE   *\n.*       MULTIPLICATION BY 2. THE OFFSET INTO THE TABLE IS BASED ON   *\n.*       AN INITIAL VALUE OF ONE (1) NOT ZERO (0).                    *\n.**********************************************************************\n.MOD000  ANOP                          HERE TO VERIFY CTR             *\n         AIF   (T'&MODEL EQ 'O').ERR160      WAS MODEL SUPPLIED       *\n         AIF   (K'&MODEL LT 6).ERR160       IS ALL OF IT THERE        *\n         AIF   ('&MODEL'(1,1) EQ '''').MOD010 IS IT WITHIN QUOTES     *\n&MOD1    SETC  '&MODEL'(1,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(6,1)             SET UP CRT MODEL             *\n         AGO   .MOD020                      BYPASS FOLLOWING          *\n.MOD010  ANOP                          HERE TO PROCESS QUOTES         *\n&MOD1    SETC  '&MODEL'(2,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(7,1)             SET UP CRT MODEL             *\n.MOD020  AIF   (&MOD1 EQ 3275 OR &MOD1 EQ 3277).MOD030                *\n         AIF   (&MOD1 EQ 3276 OR &MOD1 EQ 3278).MOD040                *\n.ERR180  MNOTE 8,'MODEL=&MODEL NOT ACCEPTABLE TO THIS MACRO'          *\n         MEXIT\n.MOD030  ANOP                          HERE FOR 3275'S                *\n         AIF   (&MOD2 EQ 2).MOD050     LARGE SCREEN                   *\n         AIF   (&MOD2 NE 1).ERR180     NOT SMALL SCREEN               *\n&LINES   SETA  12                      SET ROWS                       *\n&COLS    SETA  40                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD050  ANOP                          HERE FOR 3277'S                *\n&LINES   SETA  24                      SET ROWS                       *\n&COLS    SETA  80                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD040  ANOP                          HERE FOR NEW DEVICES           *\n&COLS    SETA  80                      ALL HAVE 80 COLUMNS            *\n         AIF   (&MOD2 EQ 1).MOD060     SMALL SCREEN CRT               *\n         AIF   (&MOD2 EQ 2).MOD070     LARGE SCREEN CRT               *\n         AIF   (&MOD2 EQ 3).MOD080     BIG SCREEN CRT                 *\n         AIF   (&MOD2 NE 4).ERR180     BIGGIE SCREEN CRT              *\n&LINES   SETA  43                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD060  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  12                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD070  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  24                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD080  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  32                      SET ROWS                       *\n.MOD090  ANOP                          HERE WHEN ROWS & COLS DEFINED  *\n&SCRSIZE SETA  &COLS*&LINES            DEFINE MAXIMUM SCREENSIZE      *\n         AIF   (T'&OPTN EQ 'O').IN0010  IS OPTION GIVEN ???           *\n&OPT     SETA  &OPTN                    YES, SAVE VALUE               *\n.**********************************************************************\n         AGO   .IN0020                  CONTINUE                      *\n.IN0010  ANOP                           SUBSTITUTE OPTION VALUE       *\n&OPT     SETA  2                           DOCUMENTATION ONLY         *\n.**********************************************************************\n.IN0020  ANOP                           TEST IF DOCUMENTATION REQ.    *\n         AIF   (T'&FILL EQ 'O').IN0030  IS OPTION GIVEN ???           *\n&GFILL   SETC  '&FILL'                  SET FILL CHARACTER\n.IN0030  ANOP\n***********************************************************************\n MNOTE *,'        OPTIONS IN EFFECT-----------    '\n MNOTE *,'                                        '\n MNOTE *,'                 ROWS........ &LINES    '\n MNOTE *,'                 COLUMNS..... &COLS     '\n MNOTE *,'                 CHARACTERS.. &SCRSIZE  '\n***********************************************************************\n         SPACE\n         AIF   (&DOCSW).IN0050     HAS DOCUMENTATION PRINTED ONCE?    *\n&DOCSW   SETB  1                   SET DOCUMEMTATION PRINTED FLAG     *\n***********************************************************************\n*     MAP GENERATION PARAMETERS, THEIR USE AND DEFAULTS               *\n*                                                                     *\n*     INITIAL ENTRY (MUST BE GIVEN TO SET VARIOUS OPTIONS)            *\n*                                                                     *\n*        MAP   OPTN=1,MODEL='32XX-N',TYPE=INIT,BUFFTAB=XXX            *\n*                                                                     *\n*           MODEL  TO SPECIFY THE TERMINAL TYPE (AND SCREEN SIZE),    *\n*                  THE DEFAULT IS SET TO 24 ROWS, AND 80 COLUMNS PER  *\n*                  ROW. MAXIMUM IS 43 BY 80. THE ACCEPTABLE VALUES    *\n*                  AND THEIR GENERATED SCREEN SIZES ARE AS FOLLOWS:   *\n*                                                                     *\n*      MODEL ROWS COLS CHARS         MODEL ROWS COLS CHARS            *\n*                                   3276-1  12   80    960            *\n*     3275-1  12   40    480        3276-2  24   80   1920            *\n*     3275-2  24   80   1920        3276-3  32   80   2560            *\n*                                   3276-4  43   80   3440            *\n*                                                                     *\n*                                   3278-1  12   80    960            *\n*     3277-1  12   40    480        3278-2  24   80   1920            *\n*     3277-2  24   80   1920        3278-3  32   80   2560            *\n*                                   3278-4  43   80   3440            *\n*                                                                     *\n*           OPTN   THIS PARAMETER IS USED TO SET ONE OF THE           *\n*                  FOLLOWING OPTIONS.......                           *\n*                                                                     *\n*                        OPTN=1  - DOCUMENTATION GENERATION.          *\n*                        OPTN=2  - DOCUMENTATION & DATA DECLARATION.  *\n*                                                                     *\n*              NOTE: (TYPE=INIT AND MODEL=32NN-N MUST BE SPECIFIED TO *\n*                      PREVENT MNOTE ERRORS FOR DOCUMENTATION ONLY.)  *\n*                                                                     *\n*           OPERATN THIS PRAMETER IS USED TO SPECIFY THE TYPE OF      *\n*                   OPERATION TO BE USED. THE ACCEPTABLE VALUES ARE:  *\n*                                                                     *\n*               READ     -  FULL BUFFER READ                          *\n*               READMOD  -  READ MODIFIED FIELDS ONLY                 *\n*                                                                     *\n*               WRITE    -  WRITE / WITHOUT ERASE OPERATION           *\n*               WRITERAS -  WRITE / ERASE ALL FIELDS                  *\n*               WRITERUP -  WRITE / ERASE UNPROTECTED FIELDS ONLY     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        BUFFTAB=XXX      THIS ENTRY MAY BE USED TO GENERATE A TABLE  *\n*               OF ALL USER MODIFIABLE ENTRIES IN THIS MAP. THIS TABLE*\n*               CONTAINS AN ENTRY FOR EACH OF THE FOLLOWING:          *\n*                                                                     *\n*        BUFFER ADDRESS - THE BUFFER ADDRESS OF AS GENERATED BY THIS  *\n*                         MAP. NOTE: ONLY MODIFIABLE FIELDS ARE       *\n*                         PROCESSED.                                  *\n*        OFFSET         - THE OFFSET OF THIS FIELD FROM THE BEGINNING *\n*                         OF THIS FIELD MAP.                          *\n*        LENGTH         - THE LENGTH OF THIS FIELD, LESS ONE BYTE.    *\n*                                                                     *\n*        THE VALID OPTIONS AND WHEN THE ARE USED ARE AS FOLLOWS:      *\n*                                                                     *\n*        NO    -  USED WITH 'TYPE=INIT' TO BYPASS TABLE GENERATION.   *\n*                 THIS IS THE DEFAULT VALUE.                          *\n*        YES   -  USED WITH 'TYPE=INIT' TO REQUEST TABLE GENERATION.  *\n*                                                                     *\n*              ADDITIONALLY, YOU MAY SPECIFY PARAMETERS TO BE         *\n*        INCLUDED IN THE GENERATION OF THIS TABLE. THEY MAY BE PASSED *\n*        VIA THE PARAMETER 'VALUES'. AN EXAMPLE OF HOW THIS PARAMETER *\n*        IS USED IS DISPLAYED BELOW. NOTE: TWO RESTRICTIONS EXIST.    *\n*        THEY ARE: 1) A MAXIMUM OF THREE ENTRIES ARE ALLOWED PER $FLD *\n*        SPECIFICATION, AND 2) THIS VALUE IS ALLOWABLE ONLY ON FIELDS *\n*        THAT ARE FLAGGED AS MODIFIABLE BY THE USER. ALSO, YOU ARE    *\n*        RESPONSIBLE FOR MAINTAINING ALIGNMENT. THE BASIC TABLE IS SIX*\n*        (6) BYTES LONG AND IS INITIATED ON A FULLWORD BOUNDARY.      *\n*                                                                     *\n*      FSTART  $FLD   TYPE=INIT,BUFFTAB=YES                           *\n*      FIELD1  $FLD   POS=(10,30),INITIAL='.....',ATR=IC,             *\n*                     VALUES=(X'01',X'4E',A(PARAM))                   *\n*      FTABLE  $FLD   TYPE=FINAL                                      *\n*                                                                     *\n*        THIS WOULD GENERATE A BUFFER ADDRESS TABLE AS FOLLOWS:       *\n*                                                                     *\n*FTABLE  DS    0F                                                     *\n*        DC    XL2'4B6E'               BUFF ADDR OF CURRENT ENTRY     *\n*        DC    AL2(FIELD1-FSTART)      OFFSET TO CURRENT ENTRY        *\n*        DC    AL2(4)                  LENGTH OF CURRENT ENTRY - 1    *\n*        DC    X'01'                   VALUES PARAMETER               *\n*        DC    X'4E'                   VALUES PARAMETER               *\n*        DC    A(PARAM)                VALUES PARAMETER               *\n*                                                                     *\n*        NOTE: THIS TABLE IS A MULTIPLE OF 4 BYTES. (USER CONTROLLED) *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*     FIELD LAYOUT ENTRIES (ONE PER FIELD)                            *\n*                                                                     *\n*        $FLD  POS=(10,1),ATR=(SKIP),INITIAL='A',LOC=NNN,TYPE=REQ     *\n*                                    LENGTH=1                         *\n*                                                                     *\n*           POS    TO SPECIFY ROW AND COLUMN NUMBERS. TRY NOT TO      *\n*                  USE ROW 24, IT IS USED BY THE SYSTEM.              *\n*                                                                     *\n*           ATR    THIS PARAMETER IS USED TO DEFINE THE DATA FIELD    *\n*                  ATTRIBUTE CHARACTERISTICS.                         *\n*                                                                     *\n* ATR=(SKIP)  PROTECTED FIELD       *  ATR=(BRT)  HIGH INTENSITY FIELD*\n* ATR=(PROT)  PROTECTED FIELD       *  ATR=(DRK)  NON-DISPLAY FIELD   *\n* ATR=(UNPR)  MODIFIABLE FIELD      *  ATR=(MDT)  MODIFIED DATA TAG ON*\n* ATR=(NUM)   NUMERIC DATA ONLY     *  ATR=(IC)   INSERT CURSOR       *\n* ATR=(DET)   LIGHT PEN DETECTALBE  *  ATR=(NORM) NORMAL INTENSITY    *\n*                                                                     *\n*             DO NOT USE THE FOLLOWING COMBINATIONS.......            *\n*           ATR=(SKIP,UNPR)                 ATR=(DRK,NORM)            *\n*           ATR=(PROT,UNPR)                 ATR=(SKIP,IC)             *\n*           ATR=(DET,DRK)                   ATR=(PROT,IC)             *\n*           ATR=(BRT,DRK)                   ATR=(PROT,NUM)            *\n*           ATR=(BRT,NORM)                                            *\n*                                                                     *\n*           LENGTH TO SPECIFY LENGTH OF FIELD WHEN 'INITIAL' IS       *\n*                  NOT GIVEN. DO NOT USE WHEN INITIAL VALUE IS        *\n*                  GIVEN.                                             *\n*           INITIAL USED TO DECLARE CONSTANT SCREEN DATA. THIS        *\n*                  SHOULD ALWAYS BE USED TO SHOW THE TYPE OF DATA     *\n*                  TO BE DISPLAYED.                                   *\n*           LOC    THIS PARAMETER IS USED TO DEFINE THE RELATIVE      *\n*                  LOCATION OF THE DATA FIELD WITHIN THE USER AREA.   *\n*                  DO NOT SPECIFY ON ANY OTHER THAN INPUT DATA.       *\n*           TYPE   TYPE=INIT IS REQUIRED FIRST TIME THRU TO SET UP    *\n*                  INITIAL VALUES AND DOCUMENTATION PRINT.            *\n*                  TYPE=FINAL IS NEEDED TO TERMINATE THE CURRENT      *\n*                  MAP AND TO INSERT ANY CURSOR SPECIFIED.            *\n*                                                                     *\n*      FTABLE  $FLD   TYPE=FINAL,EQU=XXXXXX                           *\n*                                                                     *\n*        TYPE=FINAL  CAUSES THE INSERT CURSOR STRING TO BE PLACED     *\n*                    AT THE END OF THE FIELD DEFINITION. THIS POSITION*\n*                    IS REQUIRED FOR TCAM.                            *\n*        EQU=XXXXX   WILL GENERATE AN EQU, WITH XXXXX AS THE NAME,    *\n*                    WITH THE LENGTH OF THIS DISPLAY AS THE VALUE.    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n.IN0050  ANOP\n         AIF   (&OPT EQ 1).MAPXIT          EXIT IF DOCUMENTATION ONLY *\n         AIF   (&OPT EQ 2).IN0055          CONTINUE IF VALID OPTION   *\n         MNOTE 4,'INVALID OPTION SPECIFIED, OPTION=2 ASSUMED'\n.IN0055  ANOP\n         AIF   ('&BUFFTAB'(1,1) EQ 'N').IN0057    BUFFER TABLE REQ?\n         AIF   ('&BUFFTAB'(1,1) NE 'Y').ERR200    IF NOT, ERROR\n&BUFFTB  SETB  1                       YES, INDICATE SO\n&ENTS    SETA  0                       RESET ENTRY COUNT\n.IN0057  ANOP\n.*  &FLDNAME CSECT                                                    *\n         AIF   (T'&FLDNAME EQ 'O').IN0060\n&FN      SETC  '&FLDNAME'              GENERATE DEFAULT NAME\n         AGO   .IN0065\n.IN0060  ANOP\n         AIF   (NOT &BUFFTB).IN0065     BYPASS IF BUFFTAB NOT REQUESTED\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.IN0065  ANOP\n&FN      DS    0F                                                     *\n&FPOS    SETA  4\n&MAPNAME SETC  '&FN'                   SAVE MAP NAME\n         AIF   (T'&OPERATN EQ 'O').MAPXIT    IF OMITTED, BYPASS REST  *\n         AIF   ('&OPERATN'(1,4) EQ 'READ').IN0080  GO TO READ         *\n         AIF   ('&OPERATN'(1,5) EQ 'WRITE').IN0070  CHECK TYPE        *\n         MNOTE 8,'TYPE OF OPERATION SPECIFIED IS UNACCEPTABLE'\n         MEXIT\n.IN0070  ANOP\n         AIF   ('&OPERATN'(5,4) EQ 'ERAS').IN0072  ERASE WRITE        *\n         AIF   ('&OPERATN'(5,4) EQ 'ERUN').IN0074  ERASE UNPROT       *\n&OPER    SETC  'F1'                    DEFAULT TO NORMAL WRITE        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0072  ANOP\n&OPER    SETC  'F5'                    DEFAULT TO WRITE ERASE         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0074  ANOP\n&OPER    SETC  '6F'                    DEFAULT TO ERASE UNPROT        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0080  ANOP                          HERE FOR READ OPERATIONS       *\n         AIF   ('&OPERATN'(5,3) EQ 'MOD').IN0082  READ MODIFY         *\n&OPER    SETC  'F2'                    DEFAULT TO NORMAL READ         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0082  ANOP                          HERE FOR READ MODIFIED         *\n&OPER    SETC  'F6'                    DEFAULT TO READ MODIFIED       *\n.IN0090  ANOP\n         DC    XL3'27&OPER.C1'                                        *\n         AGO   .MAPXIT                  EXIT ON FIRST TIME THRU       *\n.**********************************************************************\n.IN0100  ANOP                           BYPASS AFTER FIRST TIME THRU  *\n         AIF   (&MTYPE EQ 2).ERR010     ERROR IF PREV. ENTRY FINAL    @\n         AIF   (T'&TYPE EQ 'O').IN0110  IS THIS FINAL ENTRY ???       @\n         AIF   ('&TYPE' NE 'FINAL').ERR150   REPLY REQUIRED ???       *\n&MTYPE   SETA  2                        YES, SET INDICATOR            @\n         AGO   .FI0000                  GO PROCESS FINAL ENTRY        @\n.IN0110  ANOP                           SET UP FIELD NAME             @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF LENGTH/INITIAL OPERAND              *\n.**********************************************************************\n         AIF   (T'&LENGTH EQ 'O').LG0010 LENGTH NOT GIVEN             5\n&GLENGTH SETA  &LENGTH                 SET FIELD LENGTH               @\n         AGO   .LG0030                 BYPASS LENGTH SUBSTITUTION     @\n.LG0010  ANOP                          USE LENGTH OF DEFAULT VALUE    @\n         AIF   (T'&INITIAL EQ 'O').LG0020 IF NOT GIVEN DEFAULT TO ONE 5\n         AIF   ('&INITIAL'(1,1) NE '''').ERR070 YES, FIRST CHAR A (') ?\n&GLENGTH SETA  K'&INITIAL-2            DEFAULT TO LENGTH OF LITERAL   @\n&DEFAULT SETB  1                        YES, SET DEFAULT GLOBAL       @\n         AGO   .LG0030                 END OF LENGTH GENERATION       5\n.LG0020  ANOP                          LENGTH DEFAULT SETUP           5\n&GLENGTH SETA  1                       DEFAULT TO LENGTH OF ONE       @\n.LG0030  ANOP                          VALIDATE LENGTH VALUE ASSIGNED 5\n.*       AIF   (&GLENGTH GT 256).ERR020 TOO LONG   DELETED BY LGN 7906*\n         AIF   (&GLENGTH LT 1).ERR020  NOT LONG ENOUGH                @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF FILL OPERAND                        *\n.**********************************************************************\n         AIF   (T'&FILL NE 'O').FILL10  IS OPTION GIVEN ???           *\n&FILLCHR SETC  '&GFILL'                 SET FILL CHARACTER\n         AGO   .FILL20\n.FILL10  ANOP\n&FILLCHR SETC  '&FILL'                  SET FILL CHARACTER\n.FILL20  ANOP\n.PO0000  ANOP                          END OF FIELD LENGTH PARAMETER  @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF POS OPERAND                         *\n.**********************************************************************\n         AIF   (T'&POS EQ 'O').ERR030  IS POS = NULL ?                @\n&FPOS    SETA  &POS(1)                                                @\n         AIF   (N'&POS LT 2).PO0020    ACTUAL POSITIONS SPECIFIED ??? @\n         AIF   (&POS(1) LT 1 OR &POS(1) GT &LINES).ERR030 LINE VALID ?\n         AIF   (&POS(2) LT 1 OR &POS(2) GT &COLS).ERR030  YES, COL   ?\n&FPOS    SETA  (((&POS(1)-1)*(&COLS))+(&POS(2)-1)) YES, CONVERT IT    @\n         AGO   .PO0030                                                @\n.PO0020  ANOP                                                         @\n         AIF   (&FPOS-&EPOS GT 0).PO0030    WILL FIELD OVERLAP?       *\n         MNOTE 4,'POSITION ADJUSTED TO PREVENT FIELD OVERLAY'         *\n&FPOS    SETA  &EPOS+1                 PREVIOUS ENDING POS + ONE      *\n         AGO   .PO0040                 BYPASS FOLLOWING CODE          *\n.PO0030  ANOP\n         AIF   (&SKIP).PO0040          WAS PREV FIELD ATR = SKIP  ???\n         AIF   (&FPOS-&EPOS EQ 1).PO0040 IF ONLY ONE BYTE --          *\n         DC    X'1D7C'                 CAUSE SKIP FROM LAST FIELD     *\n.PO0040  ANOP                          GAP FIELD GENERATION RETURN PT\n&EPOS    SETA  (&FPOS+&GLENGTH)             CALCULATE ENDING POSITION *\n         AIF   (&SCRSIZE LT &EPOS).ERR080 OUTSIDE OF PAGE ?           *\n.PO0060  ANOP                         NO, END OF POSITION OPERAND     @\n         AIF   (&FPOS GE &PREVPOS).PO0070  ARE FIELDS IN SEQUENCE ?   @\n&SEQ     SETB  1                      NO, SET OUT OF SEQUENCE IND     @\n         AGO   .ERR170                THEN TERMINATE THIS EXPANSION   @\n.PO0070  ANOP                         YES, BYPASS OUT OF SEQ IND      @\n&PREVPOS SETA  &FPOS                  SET NEW PREVIOUS POSITION       @\n.AT0000  ANOP                      END OF POSITION AND SEQUENCE CHECK @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF  ATR  OPERAND                       *\n.**********************************************************************\n&ATRC    SETC  '40'                INITIALIZE 3270 ATTRIBUTE CHAR     @\n&SKIP    SETB  0                   RESET SKIP OPTION                  @\n&PROT    SETB  0                   RESET PROT OPTION                  @\n&INDEX   SETA  1\n&HIGH    SETA  10\n&IC      SETB  0\n&ARG     SETA  0\n         AIF   (T'&ATR EQ 'O').AT0040\n.AT0010  ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT &HIGH).ERR100\n         AIF   ('&ATR(&INDEX)'(1,2) EQ '**SKIPROUNPNUMDETBRTDRKMDTIC NO*\n               R'(3*&COUNT,2)).AT0030\n         AGO   .AT0010\n.AT0020  ANOP\n         AIF   (&INDEX EQ N'&ATR).AT0050\n&INDEX   SETA  &INDEX+1\n&COUNT   SETA  0\n         AGO   .AT0010\n.*\n.*  SET X MATRIX FOR CHARACTER DISPLACEMENT.\n.*\n.AT0030  ANOP\n&XON     SETB  1\n&X(&COUNT) SETB 1\n&Y(&COUNT) SETA &INDEX\n         AGO   .AT0020\n.AT0040  ANOP\n&X(1)    SETB  1\n&XON     SETB  1\n.*\n.*  ANALYZE THE MATRIX\n.*\n.AT0050  ANOP\n         AIF   (&XON).AT0060\n&X(1)    SETB  1\n.AT0060  ANOP\n.*\n.*  OUTPUT ANALYSIS.\n.*\n&A       SETA  1                       SKIP\n&B       SETA  3                       UNPROTECTED\n         AIF   (&X(1) AND &X(3)).ERR110  SKIP/UNPROTECTED ???\n&A       SETA  2                       PROTECT\n         AIF   (&X(2) AND &X(3)).ERR110  PROTECTED/UNPROTECTED\n&A       SETA  5                       SELECTER PEN DETECTABLE\n&B       SETA  7                       DARK (NON-DETECTABLE)\n         AIF   (&X(5) AND &X(7)).ERR110  DETECTABLE/DARK ???\n&A       SETA  6                       BRIGHT\n         AIF   (&X(6) AND &X(7)).ERR110  BRIGHT/DARK ???\n&B       SETA  10                      NORMAL\n         AIF   (&X(6) AND &X(10)).ERR110  BRIGHT/NORMAL ???\n&A       SETA  7                       DARK\n         AIF   (&X(7) AND &X(10)).ERR110    DARK/NORMAL ???\n         AIF   (&X(1) AND &X(9)).ERR120     SKIP/IC ???\n         AIF   (&X(2) AND &X(9)).ERR120     PROT/IC ???\n         AIF   (&X(2) AND &X(4)).ERR130     PROT/NUM ???\n.*\n.*  SET ATTRIBUTE BITS\n.*\n.AT0070  ANOP\n&NUMERIC SETB  (&X(4))             SET NUMERIC FIELD INDICATOR\n&X(2)    SETB  (&X(1) OR &X(2))    PROT IF SKIP.\n&X(4)    SETB  (&X(1) OR &X(4))    NUM IF SKIP\n&X(5)    SETB  (&X(7) OR (&X(5) AND NOT &X(6))) SET IF DARK OR LGHT PEN\n&X(6)    SETB  (&X(7) OR &X(6))    BRT IF DARK.\n&IC      SETB  (&X(9))             IC IF REQUESTED\n&ARG     SETA  (32*&X(2)+16*&X(4)+4*&X(5)+8*&X(6)+&X(8))\n&KEYED   SETB  (&X(3))             FLAG AS KEYABLE IF UNPROTECTED.\n&PROT    SETB  (&X(2) OR &X(1))    SET TO ONE IF ATR = PROT OR SKIP\n&SKIP    SETB  (&X(1))             SET TO ONE IF ATR = SKIP\n         AGO   .AT0100\n.AT0090  ANOP\n&X(&C)   SETB  0                   CLEAR\n&C       SETA  &C+1                DOWN\n         AIF   (&C LT 11).AT0090   X TABLE.\n         AGO   .AT0070\n.AT0100  ANOP                          END OF ATR ANALYSIS\n         AIF   (T'&FLDNAME EQ 'O').AT0110 FIELD NAME OMITTED          @\n&FN      SETC  '&FLDNAME'(1,8)          USE FIRST 8 CHAR FOR NAME     @\n&DATAIND SETB  ('&FN' NE '')       INDICATE DATA ITEM (LABEL)         @\n         AGO   .AT0120                  BYPASS NEXT TEST              @\n.AT0110  ANOP                           FIELD NAME BYPASS             @\n         AIF   ((NOT &BUFFTB) OR (&SKIP) OR (&PROT)).AT0120\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n         AIF   (NOT &SKIP).AT0110\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.AT0120  ANOP\n.**********************************************************************\n.*       CONVERT THE BINARY  ATR  TO A VALID 3270 TRANSMITTABLE CHAR  *\n.**********************************************************************\n&ATRC    SETC  '&ADDRCHR'((&ARG+1)*2,2) SELECT ATTRIBUTE CHARACTER    *\n.DE0000  ANOP                           END OF ATTRIBUTE CONVERSION   @\n.**********************************************************************\n.*       DATA DECLARATION GENERATION                                  *\n.**********************************************************************\n.LO0000  ANOP                           END OF JUSTIFY PARAMETER      @\n.**********************************************************************\n.*       SET CURRENT OUTPUT FIELD LOCATION COUNTER                    *\n.**********************************************************************\n         AIF   (NOT &DATAIND).LO0020    BYPASS FOR NON DATA FIELDS    *\n         AIF   (T'&LOC EQ 'O').LO0010   LOCATION NOT GIVEN, USE DEFAULT\n&NLOC    SETA  &LOC                     SET CURRENT LOCATION COUNTER  *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n         AGO   .LO0020                  CONTINUE                      *\n.LO0010  ANOP                           DEFAULT TO CURRENT COUNT      *\n&NLOC    SETA  &PLOC                    USE PREVIOUS COUNT            *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n.LO0020  ANOP                           END OF LOCATION COUNT SETUP   *\n         AGO   .GN0010                  GO TO FIELD GENERATION        @\n.GN0000  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE SKIP (END OF LINE) FIELD ENTRY                      *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    CL1'0'              FIELD ATTRIBUTE                    @\n*---------------------------------------------------------------------*\n         AGO   .PO0030\n.GN0010  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE FIELD ENTRY                                         *\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD CHARACTER              *\n         DC    XL1'&ATRC'          FIELD ATTRIBUTE                    *\n         AIF   (NOT &DEFAULT).GN0050  IS INITIAL = DEFAULT DATA ?     @\n&FN      DC    CL&GLENGTH.&INITIAL\n         AGO   .GN0060             GO TO NEXT OPTION                  *\n.GN0050  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n&FN      DS    0CL&GLENGTH\n         DC    &GLENGTH.XL1'&FILLCHR.'\n.GN0060  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n***********************************************************************\n         AIF   (((NOT &KEYED) AND (&CURSOR NE 0)) OR (NOT &IC)).GN0070\n&CURSOR  SETA  &FPOS+1             UPDATE CURSOR POSITION             @\n.GN0070  ANOP                      END OF FIELD GENERATION            @\n         AIF   (((NOT &BUFFTB) AND (NOT &KEYED)) OR (&PROT)).MAPXIT\n&FPOS    SETA  &FPOS+1                 BUMP TO ACTUAL FIELD\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&ENTS    SETA  &ENTS+1                 BUMP ENTRY COUNT\n&ENTRBA(&ENTS)  SETC  '&XCHAR&YCHAR'   SET RBA\n&ENTLEN(&ENTS)  SETA  &GLENGTH-1       SET LENGTH-1\n&ENTOFF(&ENTS)  SETC  '&FN-&MAPNAME'   DEFINE OFFSET FOR ADCON\n&ENTVCN(&ENTS)  SETA  0                INSURE UNUSED IS ZERO\n         AIF    (T'&VALUES EQ 'O').MAPXIT\n.GN0080  ANOP\n         AIF   (&ENTVCN(&ENTS) EQ 3).MAPXIT\n&ENTVCN(&ENTS)  SETA &ENTVCN(&ENTS)+1  BUMP COUNTER\n&VALCNT         SETA &VALCNT+1         BUMP COUNTER\n&ENTVAL(&VALCNT) SETC '&VALUES(&ENTVCN(&ENTS))' MOVE PARAMETER\n         AIF   (&ENTVCN(&ENTS) LT N'&VALUES).GN0080\n.MAPXIT  ANOP                      END OF FIELD GENERATION            @\n&FN      SETC  ''                  INITIALIZE FLDNAME GLOBAL          @\n&DEFAULT SETB  0                   INITIALIZE DEFAULT DATA GLOBAL     @\n&DATAIND SETB  0                   INITIALIZE DATA (FIELD) INDICATOR  @\n&PEN     SETB  0                   INITIALIZE PEN DETECTABLE GLOBL    @\n&IC      SETB  0                   INITIALIZE INSERT CURSOR GLOBAL    @\n&KEYED   SETB  0                   INIT UNPROTECTED FIELD GLOBAL      @\n&NUMERIC SETB  0                   INITIALIZE NUMERIC FIELD GLOBAL    @\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.***     GENERATE FINAL DSECT AND ADDRESS TABLES                    ***\n.**********************************************************************\n.FI0000  ANOP                      FINAL ENTRIES                      @\n         AIF   ((&SKIP) OR (&PROT)).FI0010  WAS PREV FIELD ATR = SKIP *\n&EPOS    SETA  &EPOS+1                 BUMP BY ONE TO MISS PREV FIELD *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD INDICATOR              *\n         DC    XL1'F0'             FIELD ATTRIBUTE\n***********************************************************************\n.FI0010  ANOP                                                         *\n&MAP     SETB  0                        SET OFF AFTER FINAL           @\n.**********************************************************************\n         AIF   (&CURSOR EQ 0).FI0020    NO CURSOR!                KMB\n*              SET CURSOR POSITION                                    *\n&XAXIS   SETA  (&CURSOR/64+1)\n&YAXIS   SETA  (&CURSOR-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&FN      SETC  ''\n         AIF   (T'&FLDNAME EQ 'O').CR0000      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,5)          SET DEFAULT VALUE\n&FNM     SETC  'CSR'                    SET DEFAULT VALUE\n&FN      SETC  '&FN&FNM'                SET DEFAULT VALUE\n.CR0000 ANOP\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n&FN      DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'13'             INSERT CURSOR INDICATOR            *\n&CURSOR  SETA  0                       RESET CURSOR POSITION          *\n***********************************************************************\n.FI0020  ANOP\n         AIF   (T'&EQU EQ 'O').FI0040\n&FN      SETC  '&EQU'\n&FN      EQU   *-&MAPNAME\n.FI0040  ANOP\n         AIF   ((NOT &BUFFTB) OR (&ENTS EQ 0)).MEXIT              KMB\n.**********************************************************************\n         AIF   (T'&FLDNAME NE 'O').FI0100      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,4)          SET DEFAULT VALUE\n&FN      SETC  '&FN&SYSNDX'             SET DEFAULT VALUE\n         AGO   .FI0110                 GO PROCESS NEXT ONE\n.FI0100 ANOP\n&FN      SETC  '&FLDNAME'              USE NAME SPECIFIED INSTEAD\n.FI0110 ANOP\n         EJECT\n***********************************************************************\n*              THIS TABLE IS GENERATED FOR THE USER WHEN A MAP OF ALL *\n*        MODIFIABLE ENTRIES IN A '$FLD' LIST IS REQUIRED. THIS MAP    *\n*        CONTAINS THE FOLLOWING ENTRIES:                              *\n*                                                                     *\n*    XL2(....)       THE BUFFER ADDRESS OF THIS FIELD                 *\n*    AL2(..)         THE OFFSET INTO THE MAP, OF THIS FIELD           *\n*    AL2(..)         THE LENGTH-1 OF THIS FIELD                       *\n*                                                                     *\n***********************************************************************\n         CNOP  2,4                     ALIGN ON HALFWORD BOUND\n         DC    H'&ENTS'                TOTAL NUMBER OF ENTRIES\n&FN      DS    0F                      LISTING OF BUFFER ADDRESS TABLE\n.FI0120 ANOP\n&LSTCNT  SETA  &LSTCNT+1               BUMP ENTRY LSTCNT\n         AIF   ((&LSTCNT GT &ENTS) OR (&LSTCNT GT &ENTMAX)).FIEXIT\n         DC    XL2'&ENTRBA(&LSTCNT)'   BUFF ADDR OF CURRENT ENTRY\n         DC    AL2(&ENTOFF(&LSTCNT))   OFFSET OF CURRENT ENTRY\n         DC    H'&ENTLEN(&LSTCNT)'     LENGTH OF CURRENT ENTRY - 1\n         AIF   (&ENTVCN(&LSTCNT) EQ 0).FI0120\n.FI0130 ANOP\n&TCNT1   SETA  &TCNT1+1\n         DC    &ENTVAL(&TCNT1)         VALUES PARAMETER\n         AIF   (&TCNT1 LT &ENTVCN(&LSTCNT)).FI0130\n         AGO   .FI0120                 GO PROCESS NEXT ONE\n.FIEXIT ANOP\n         MNOTE *,'BEG-FIEXIT'\n&TCNT1   SETA  (K'&FLDNAME)\n         AIF   (&TCNT1 LE 6).FIEX01\n&TCNT1   SETA  6\n.FIEX01  ANOP\n&FILLCHR SETC  '&FN'\n&FN      SETC  '&FILLCHR'(1,&TCNT1)\n&FNM     SETC  'EL'\n&FN      SETC   '&FN&FNM'\n&FN      EQU   ((*-&FILLCHR)/&ENTS)    LENGTH OF EACH ENTRY\n         DC    X'FFFF'                 END OF TABLE\n         SPACE\n&ENTS    SETA  0                       RESET ENTRY COUNT\n***********************************************************************\n.MEXIT   ANOP                          HERE TO EXIT MACRO             *\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.* *     MNOTE STATEMENTS                                           * *\n.**********************************************************************\n.ERR010  ANOP                           TYPE IN ERROR                 @\n         MNOTE 12,'TYPE = FINAL IS PREVIOUSLY SPECIFIED,'             @\n         AGO   .MAPXIT                  TERMINATE                     @\n         MEXIT                     MACRO EXIT                         @\n.ERR020  ANOP                      LENGTH OPERAND ERROR ENTRY         @\n         MNOTE 12,'INVALID LENGTH OPERAND IS SPECIFIED,'              @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID LENGTH OPERAND IS REQUIRED.'\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .MAPXIT                 TERMINATE GENERATION           @\n.ERR030  ANOP                      POS OPERAND ERROR ENTRY            @\n         MNOTE 12,'INVALID POS OPERAND IS SPECIFIED,'                 @\n.ERR055  ANOP                      POS OPERAND MNOTE ENTRY            @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID POS OPERAND IS REQUIRED WITH MAP MACRO.'      @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .AT0000             GO TO POS OPERAND COMPLETION       @\n.ERR070  ANOP                      INITIAL OPERAND ERROR ENTRY        @\n         MNOTE 8,'INVALID INITIAL OPERAND IS SPECIFIED,'              @\n         MNOTE *,'DEFAULT DATA MUST BE ENCLOSED IN QUOTES,'           @\n         MNOTE *,'INITIAL OPERAND IS IGNORED.'                        @\n         AGO   .LG0020             GO TO INITIAL OPERAND BYPASS       @\n.ERR080  ANOP                      FIELD SPECIFICATION ERROR ENTRY    @\n         MNOTE 8,'FIELD IS DEFINED OUTSIDE OF THE SIZE OPERAND'       @\n         MNOTE *,'MACRO REQUEST IS IGNORED.'                          @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .PO0020             GO TO PAGE SIZE BYPASS             @\n.ERR100  ANOP                      ATR PARAMETER ERROR ENTRY\n         MNOTE 4,'INVALID ATTRIBUTE PARAMETER IS SPECIFIED,'\n         MNOTE *,'ATR = &ATR(&INDEX) IS IGNORED.'\n         AGO   .AT0020             GO TO CHECK INDEX\n.ERR110  ANOP                      INCOMPATIBLE ATR OP ERROR\n&A       SETA  &Y(&A)              SET PARAMETER INDEX VALUE\n&B       SETA  &Y(&B)              SET PARAMETER INDEX VALUE\n         MNOTE 4,'&ATR(&A) AND &ATR(&B) ARE INCOMPATIBLE PARAMETERS,'\n         MNOTE *,'ATR = &ATR(&A) IS IGNORED,'\n         MNOTE *,'ATR = &ATR(&B) IS IGNORED,'\n         MNOTE *,'ATR = SKIP IS ASSUMED BY DEFAULT.'\n&X(1)    SETB  1                   SKIP DEFAULT.\n&C       SETA  2                   SET C FOR CLEARING X TABLE.\n         AGO   .AT0090\n.ERR120  ANOP                      ATR = IC ERROR ENTRY\n         MNOTE *,'ATR = IC IS REQUESTED FOR PROTECTED FIELD'\n         AGO   .AT0070\n.ERR130  ANOP                      ATR = PROT AND NUM ERROR\n         MNOTE *,'ATR = PROT AND NUM ALSO IMPLIES THE SKIP PARAMETER'\n         AGO   .AT0070\n.ERR150  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALID TYPE SPECIFIED'                             *\n.ERR160  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MODEL OPERAND IS REQUIRED && MINIMUM LENGTH IS 6'   *\n         MEXIT\n.ERR170  ANOP                          HERE FOR ERROR                 *\n         MNOTE 16,'SEQUENCE ERROR ENCOUNTERED, EXPANSION TERMINATED'  *\n         MEXIT\n.ERR200  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALIB ''BUFFTAB'' SPECIFICATION'                  *\n         MEXIT\n.ERR190  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION'          *\n         MEXIT\n         MEND\n*--------------------------------------------------------------------*\n*        $AUTHON MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n&L       $AUTHON\n&L       XR    R1,R1\n         SVC   $ATH$\n         MEND\n*--------------------------------------------------------------------*\n*        $AUTHOFF MACRO                                              *\n*--------------------------------------------------------------------*\n         MACRO\n&L       $AUTHOFF\n&L       LA    R1,4\n         SVC   $ATH$\n         MEND\nZAPDSCB  TITLE 'THIS PROGRAM WILL ALLOW THE USER THE ABILITY TO MODIFY A\n                DSCB'\n*--------------------------------------------------------------------*\n*        DON'T KNOW WHO WROTE THIS ORIGINALLY                        *\n*        FULL  SCREEN VTOC ZAPPER.                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\n* CHANGE LOG:                                                        *\n* SAM BASS   (KBASS)                                                 *\n* BMC SOFTWARE INC                                                   *\n* MCLANE CO. INC.                                                    *\n*                                                                    *\n*         KBASS ONLY ALLOW GROUP OF SYS1 TO DO THIS                  *\n* 21DEC94 KBASS ADD OPTCD DISPLAY                                    *\n* 30OCT95 KBASS USE UCBLOOK MACRO TO SUPPORT DYNAMIC DASD            *\n*--------------------------------------------------------------------*\nZAPDSCB  AMODE 31\nZAPDSCB  RMODE 24\nZAPDSCB  CSECT\n         SAVE  (14,12),,ZAPDSCB.&SYSDATE..&SYSTIME.\n         LR    R11,R15                 LOAD PGM'S BASE REG\n         USING ZAPDSCB,R11\n         LA    R14,SAVEAREA            A(MY SAVEAREA)\n         ST    R14,8(,R13)             UPDATE FORWARD POINTER\n         ST    R13,4(,R14)             UPDATE BACKWARD POINTER\n         LR    R13,R14                 AND LOAD MY SAVEAREA BASE\n         USING SAVEAREA,R13,R12            AND DEFINE SAME TO ASSEMBLER\n         LA    R12,2048(,R13)          COMPUTE SECOND\n         LA    R12,2048(,R12)                  BASE REG ADDRESS\n         LR    R2,R1                   SAVE CPPL ADDRESS\n*        $AUTHON\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   BADBOY              NOT ZERO, TELL NOT AUTHORIZED.\nKZ       MODESET KEY=ZERO\n***********************************************************************\n*        INITIALIZE                                                   *\n***********************************************************************\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         SPACE\n***********************************************************************\n*        LOCATE THE USER'S ASCB AND SAVE THE USERID                   *\n***********************************************************************\n         L     R15,PSAAOLD-PSA(00)     A(PSA ASCB)\n         L     R15,ASCBASXB-ASCB(R15)  A(ASXB)\n         L     R15,ASXBSENV-ASXB(R15)  A(ASCB)\n         CLC   =C'SYS1',ACEEGRPN-ACEE(R15)    CHECK RACF GROUP\n         BE    OKUSER\n         CLC   =C'SY3TEAM',ACEEGRPN-ACEE(R15) CHECK RACF GROUP\n         BE    OKUSER\n         B     BADBOY\nOKUSER   DS 0H\n         MVC   USERID,ACEEUSER-ACEE(R15)    COPY THE USERID\n         MVC   DEFCSRAD,DSCBPCSR       SAVE INITIAL CURSOR BUFF ADDR\n         SPACE\n***********************************************************************\n*        INITIATE FULL SCREEN PROCESSING                              *\n***********************************************************************\n         STFSMODE ON,INITIAL=YES       INITIATE FULL SCREEN PROCESSING\n         EJECT\n***********************************************************************\n*        SETUP THE CVAF HEADER AND BUFFER LISTS                       *\n***********************************************************************\n         XC    CVAFBUF(BFLHLN+BFLELN),CVAFBUF       RESET BUFFER HEADER\n         OI    BFLHFL,BFLHDSCB         INDICATE READ DSCB'S\n         MVI   BFLHNOE,1               NUMBER OF BUFFER LIST ENTRIES\n         LA    R15,DS1FMTID            A(DSCB DATA AREA)\n         ST    R15,BFLEBUF                 AND UPDATE BUFFER LIST\n         MVI   BFLELTH,LDSCB-44        LENGTH OF DATA AREA (DSCB-44)\n         SPACE\n***********************************************************************\n*        COPY THE DATA SET NAME FROM THE COMMAND BUFFER TO THE DATA   *\n* SET NAME FIELD ON THE PANEL ADDING THE USER ID, IF NECESSARY        *\n***********************************************************************\n         L     R2,CPPLCBUF-CPPL(R2)    LOAD COMMAND BUFFER ADDRESS\n         SLR   R3,R3                   CLEAR WORK REGISTER\n         SLR   R4,R4                   CLEAR WORK REGISTER\n         ICM   R3,B'0011',0(R2)        LENGTH OF COMMAND BUFFER\n         ICM   R4,B'0011',2(R2)        OFFSET TO FIRST OPERAND\n         SR    R3,R4                   COMPUTE LENGTH OF OPERAND\n         SPACE\n         SH    R3,=H'04'                   AND DECREMENT FOR LENGTH FLD\n         BP    CPPL010                 DATA SET NAME SUPPLIED?\n         LA    R15,DSNAMEER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                    GO PROCESS ERROR MESSAGE\n         SPACE\nCPPL010  DS    0H\n         CH    R3,=H'46'               LENGTH GREATER THAN MAX?\n         BNH   CPPL020                     NO, BYPASS DEFAULT\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         B     PROCEMSG                    YES, GENERATE ERROR MESSAGE\n         SPACE\nCPPL020  DS    0H\n         STH   R3,LDSNAME                  SAVE LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR EXECUTE\n         LA    R4,4(R2,R4)             ADDRESS DATA SET NAME\n         EX    R3,EXOCINPT             CONVERT TO UPPER CASE\n         EJECT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R15,PDSNAME             A(PANEL DSNAME)\n         LA    R14,DS1DSNAM            A(DSCB DSNAME)\n         CLI   0(R4),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   NOQUOTES                    NO, DO NOT PROCESS QUOTES\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         LA    R4,1(,R4)                   YES, BYPASS FIRST QUOTE\n         BCTR  R3,00                       DECREMENT FOR FIRST QUOTE\n         STH   R3,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR LAST QUOTE\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         B     DSNMOVED\n         SPACE\nEXMVCPDS OC    0(0,R15),0(R4)          MOVE IN DATA SET NAME\nEXMVCDS1 OC    0(0,R14),0(R4)          MOVE IN DATA SET NAME\nPDSUSERI MVC   0(0,R15),USERIDI        MOVE IN USERID\nDS1USERI MVC   0(0,R14),USERIDI        MOVE IN USERID\nEXOCINPT OC    0(0,R4),ALLBLANK        EXECUTED OC\n         SPACE\nNOQUOTES DS    0H\n         SLR   R1,R1                   CLEAR WORK REG\n         IC    R1,USERIDL              AL2(LENGTH OF USERID)\n         SPACE\n         LA    R5,2(,R1)               USERID + DELIMITER + BCTR OFFSET\n         AR    R5,R3                       + LENGTH OF DSNAME\n         STH   R5,LDSNAME              SAVE COMPUTED LENGTH OF DSNAME\n         CH    R5,=H'46'               IS DSNAME GT FIELD LENGTH?\n         BNH   DSN010                      NO, CONTINUE PROCESSING\n         LA    R15,DSNLNGER                YES, PROVIDE FOR ERROR MSG\n         B     PROCEMSG                      AND DISPLAY SAME\n         SPACE\nDSN010   DS    0H\n         BCTR  R1,0                        DECREMENT FOR EXECUTE\n         MVI   0(R15),C''''            MOVE IN A QUOTE\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R1,DS1USERI             MOVE USERID TO DSNAME\n         EX    R1,PDSUSERI             MOVE USERID TO DSNAME\n         LA    R14,1(R1,R14)               AND ADJUST FOR SAME\n         LA    R15,1(R1,R15)               AND ADJUST FOR SAME\n         MVI   0(R14),C'.'             MOVE IN A DELIMITER\n         MVI   0(R15),C'.'             MOVE IN A DELIMITER\n         LA    R14,1(,R14)                 AND ADJUST FOR SAME\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         LA    R15,1(R3,R15)               AND ADJUST FOR SAME\n         MVI   0(R15),C''''            MOVE IN A QUOTE\nDSNMOVED DS    0H\n         EJECT\n***********************************************************************\n*        LOCATE THE DATA SET CATALOG ENTRY                            *\n***********************************************************************\nLOCATELP DS    0H                      LOCATE LOOP\n         MVC   LOCWORK(256),ALLZEROS         CLEAR FIRST HALF OF WORK\n         XC    LOCWORK+256(256),ALLZEROS     CLEAR LAST HALF OF WORK\n         MVC   PVOLSER,ALLZEROS        CLEAR VOLSER FIELD\n         LOCATE DSNLOC                 LOCATE DATA SET\n         LTR   R15,R15                 WAS DATA SET FOUND?\n         BZ    LOC010                      YES, BYPASS ERROR MESAGE\n         LA    R15,DSNLOCER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\nLOC010   DS    0H\n         MVC   PVOLSER,LOCWORK+6       SAVE VOL SER\n         SPACE\n***********************************************************************\n*        USING THE UCB LOOKUP PROCESS, LOCATE THE UCB ASSOCIATED WITH *\n*  THE VOLUME SERIAL NUMBER RETRIEVED FORM THE LOCATE PROCESS.        *\n***********************************************************************\nUCBLKPLP DS    0H                      UCB LOOKUP LOOP\n         OC    UCBTOKEN,UCBTOKEN                                30OCT95\n         BZ    UCBPIN10                                         30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X\n               MF=(E,XUCBPIN)                                   30OCT95\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         MODESET MODE=PROB                                      30OCT95\nUCBPIN10 DS    0H                                               30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBLOOK VOLSER=PVOLSER,UCBPTR=UCBADDR,                 30OCT95X\n               PIN,                                             30OCT95X\n               PTOKEN=UCBTOKEN,                                 30OCT95X\n               TEXT==CL58'ZAPDSCB IN PROGESS',                  30OCT95X\n               DYNAMIC=YES,RANGE=ALL,LOC=ANY,                   30OCT95X\n               MF=(E,XUCBLOOK)                                  30OCT95\n         LR    R5,R15                  UCB ADDR RETURNED?       30OCT95\n         MODESET MODE=PROB                                      30OCT95\n         LTR   R15,R5                  UCB ADDR RETURNED?       30OCT95\n         BZ    CHECKUCB                 NO, ERROR               30OCT95\n         SPACE 1                                                30OCT95\nUCBMSG   DS    0H                                               30OCT95\n         LA    R15,UCBERMSG            A(VOL SER MISSING ERROR MESSAGE)\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\n         SPACE\n         USING UCBOB,15\nCHECKUCB DS    0H                      CHECK FOR MATCHING VOLSER\n         L     R15,UCBADDR             A(UCB ADDRESS)           30OCT95\n         CLC   PVOLSER,UCBVOLI         MATCHING VOLSER?\n         BNE   UCBMSG                   NO, ERROR               30OCT95\n         SPACE\n         OI    MISCFLAG,NSHARED        DEFAULT TO NON-SHARED DASD\n         TM    UCBTBYT2,UCBRR          IS IT ACTUALLY SHARED?\n         BZ    UCB010                      NO, BYPASS RESET\n         NI    MISCFLAG,255-NSHARED        YES, RESET NON-SHARED FLAG\nUCB010   DS    0H\n         DROP  15\n         EJECT\n***********************************************************************\n*        DETERMINE WHAT TYPE OF ENQ TO USE.  SYSTEM OR SYSTEMS        *\n***********************************************************************\n         LA    R1,MODELENQ             A('SYSTEM' ENQ LIST)\n         TM    MISCFLAG,NSHARED        IS DASD DEVICE SHARED?\n         BO    ENQ010                      NO, USED DEFAULT ADDRESS\n         LA    R1,MODESENQ             A('SYSTEMS' ENQ LIST)\nENQ010   DS    0H\n         LA    R2,DS1DSNAM             A(RNAME FOR ENQ)\n         LH    R3,LDSNAME              LOAD LENGTH OF DSNAME\n         SPACE\n***********************************************************************\n*        DETERMINE IF THE DATA SET IS AVAILABLE.                      *\n***********************************************************************\n         NI    MISCFLAG,255-ENQUEUE    RESET ENQUEUE BIT\n         ENQ   (,(R2),,(R3),),MF=(E,(1))\n         SPACE\n         LTR   R15,R15                 IS RESOURCE AVAILABLE?\n         BZ    ENQ020                      YES, PROCESS DATA SET\n         OI    MISCFLAG,ENQUEUE            NO, INDICATE SAME\nENQ020   DS    0H\n***********************************************************************\n*        READ THE DSCB INTO STORAGE                                   *\n***********************************************************************\n         L     R2,UCBADDR              LOAD UCB ADDRESS\n         CVAFDIR ACCESS=READ,UCB=(R2),MF=(E,CVAFREQ),BRANCH=(YES,PGM), $\n               BUFLIST=CVAFBUF\n         LTR   R15,R15                 WAS READ SUCCESSFUL?\n         BZ    CREATDTE                    YES, PROCESS DSCB\n         B     CVAFPROC                    NO, PROCESSER ERROR RETURN\n         EJECT\n***********************************************************************\n*        COPY DATE FIELDS INTO THE PANEL                              *\n***********************************************************************\nCREATDTE SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1CREDT            INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PCREDT(2),DWORD             AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1CREDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PCREDT+2(3),DWORD           AND MOVE TO TARGET FIELD\n         SPACE\nREFDATE  SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1REFD             INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD(2),DWORD              AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1REFD+1   INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD+2(3),DWORD            AND MOVE TO TARGET FIELD\n         SPACE\nEXPIRDAT SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1EXPDT            INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT(2),DWORD             AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1EXPDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT+2(3),DWORD           AND MOVE TO TARGET FIELD\n         EJECT\n***********************************************************************\n*        COPY DSORG INTO PANEL                                        *\n***********************************************************************\n         MVC   PDSORG,ALLZEROS         CLEAR FIELD\n         TM    DS1DSORG,DS1DSGIS       INDEXED SEQUENTIAL?\n         BZ    DSORG010                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'IS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG010 TM    DS1DSORG,DS1DSGPS       PHYSICAL SEQUENTIAL?\n         BZ    DSORG020                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG020 TM    DS1DSORG,DS1DSGDA       DIRECT ORGANIZATION?\n         BZ    DSORG030                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'DA'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG030 TM    DS1DSORG,DS1DSGPO       PARTITIONED ORGANIZATION?\n         BZ    DSORG040                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PO'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG040 TM    DS1DSORG+1,DS1ORGAM     VSAM?\n         BZ    TESTUNMV                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'AM'            YES, INDICATE SAME\nTESTUNMV DS    0H\n         TM    DS1DSORG,DS1DSGU        UNMOVEABLE DATA SET?\n         BZ    DSORG060                    NO, BYPASS MOVE\n         MVI   PDSORG+2,C'U'               YES, INDICATE SAME\nDSORG060 DS    0H\n         EJECT\n***********************************************************************\n*        COPY RECFM TO PANEL                                          *\n***********************************************************************\n         MVC   PRECFM,ALLZEROS         CLEAR FIELD\n         TM    DS1RECFM,DS1RECFU       UNDEFINED LENGTH RECORDS?\n         BNO   RECFM010                    NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'U'                 YES,INDICATE SAME\n         B     PROCLREC                    GO PROCESS LRECL\nRECFM010 TM    DS1RECFM,DS1RECFF       FIXED LENGTH RECORDS?\n         BZ    RECFM020                    NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'F'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\nRECFM020 TM    DS1RECFM,DS1RECFV       VARIABLE LENGTH RECORDS?\n         BZ    CHCKBLCK                    NO\n         MVI   PRECFM,C'V'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\nCHCKBLCK DS    0H\n         LA    R14,PRECFM+1            LOAD TARGET ADDRESS\n         TM    DS1RECFM,DS1RECFB       BLOCKED RECORDS?\n         BZ    RECFM030                    NO, CHECK SPANNED/STANDARD\n         MVI   0(R14),C'B'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\nRECFM030 TM    DS1RECFM,DS1RECFS       SPANNED/STANDARD?\n         BZ    RECFM040                    NO, PROCESS PRINT CC\n         MVI   0(R14),C'S'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\nRECFM040 TM    DS1RECFM,DS1RECFA       ANSI CONTROL CHARS?\n         BZ    RECFM050                    NO, PROCESS PRINT CC\n         MVI   0(R14),C'A'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\n         B     PROCLREC\nRECFM050 TM    DS1RECFM,DS1RECMC       MACHINE CONTROL CHARS?\n         BZ    RECFM060                    NO, PROCESS LRECL\n         MVI   0(R14),C'M'                 YES, INDICATE SAME\nRECFM060 DS    0H\n         EJECT\n***********************************************************************\n*        COPY LRECL, BLOCKSIZE, KEY LENGTH AND RKP TO PANEL           *\n***********************************************************************\nPROCLREC DS    0H\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         ICM   R15,B'0011',DS1LRECL    LOAD THE LRECL\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PLRECL,DWORD                AND MOVE TO TARGET\n         SPACE\n         ICM   R15,B'0011',DS1BLKL     LOAD THE BLOCK SIZE\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15              INSURE PROPER SIGN\n         UNPK  PBLKL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         IC    R15,DS1KEYL             LOAD THE KEY LENGTH\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PKEYL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         ICM   R15,B'0011',DS1RKP      LOAD THE RELATIVE KEY POSITION\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PRKP,DWORD                  AND MOVE TO TARGET FIELD\n         SPACE\n***********************************************************************\n*        COPY LAST USED TRACK AND BLOCK INTO PANEL                    *\n***********************************************************************\n         ICM   R15,B'1110',DS1LSTAR    LOAD LSTAR INTO REG\n         LA    R1,6                    BYTES TO PROCESS\n         LA    R2,PLSTAR               A(TARGET FIELD)\nLSTARLP  DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LSTARLP              LOOP FOR NEXT FOUR BITS\n         TR    PLSTAR,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY TRACK BALANCE INTO PANEL                                *\n***********************************************************************\n         ICM   R15,B'1100',DS1TRBAL    LOAD LSTAR INTO REG\n         LA    R1,4                    BYTES TO PROCESS\n         LA    R2,PTRBAL               A(TARGET FIELD)\nLTRBAL   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LTRBAL               LOOP FOR NEXT FOUR BITS\n         TR    PTRBAL,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY SMS INDICATORS INTO PANEL                               *\n***********************************************************************\n         ICM   R15,B'1000',DS1SMSFG    LOAD SMS INDICATORS\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,PSMSIND              A(TARGET FIELD)\nLSMSIND  DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LSMSIND              LOOP FOR NEXT FOUR BITS\n         TR    PSMSIND,TRTAB           TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY DATA SET INDICATORS INTO PANEL                          *\n***********************************************************************\n         ICM   R15,B'1000',DS1DSIND    LOAD DS INDICATORS\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,PDSIND               A(TARGET FIELD)\nLDSIND   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LDSIND               LOOP FOR NEXT FOUR BITS\n         TR    PDSIND,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY OPTCD    INDICATORS INTO PANEL                          *\n***********************************************************************\n         ICM   R15,B'1000',DS1OPTCD    LOAD OPTCD\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,OPTCDE               A(TARGET FIELD)\nLOPTCD   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LOPTCD               LOOP FOR NEXT FOUR BITS\n         TR    OPTCDE,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY SECONDARY ALLOCATION INFO INTO PANEL                    *\n***********************************************************************\n         TM    DS1SCAL1,DS1CYL         IS IT CYLINDER ALLOCATION?\n         BNO   SEC0010                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'C'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0010  TM    DS1SCAL1,DS1TRK         IS IT TRACK ALLOCATION?\n         BNO   SEC0020                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'T'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0020  TM    DS1SCAL1,DS1AVR         IS IT BLOCK ALLOCATION?\n         BNO   SEC0030                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'B'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0030  TM    DS1SCAL1,DS1AVRND       IS IT BLOCK ROUND ALLOC?\n         BNO   SEC0040                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'R'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0040  TM    DS1SCAL1,255            IS IT ABSOLUTE ALLOCATION?\n         BNZ   SCALLAMT                    NO, PROCESS SECONDARY AMOUNT\n         MVI   PSCAL1,C'A'                 YES, INDICATE SAME\n         SPACE\nSCALLAMT DS    0H\n         SLR   R15,R15                 CLEAR WORK REG\n         ICM   R15,B'0111',DS1SCAL3    INSERT SECONDARY AMOUNT\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PSCAL3,DWORD                AND COPY INTO TARGET AREA\n         TM    MISCFLAG,ENQUEUE        IS DATA SET AVAILABLE?\n         BZ    TPUTPANL                    YES, PROCESS IT\n         LA    R15,ENQERMSG                NO, INFORM TERMINAL OPER\n         SPACE\n***********************************************************************\n*        COPY ERROR MESSAGE ONTO PANEL - R15 ADDRESSES THE ERROR MSG  *\n***********************************************************************\nPROCEMSG DS    0H                      POS, MOVE MESSAGE TO PANEL\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R14,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R2,L'PERRMSG                LENGTH OF SAME\n         LH    R1,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R1,R2                   GREATER THAN MAXIMUM?\n         BNH   MSG010                      NO, CONTINUE\n         LR    R1,R2                       YES, LOAD MAXIMUM LENGTH\nMSG010   DS    0H\n         SR    R2,R1                   COMPUTE REMAINDER\n         BNP   MSG020                  BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R2,1                    DIVIDE BY TWO\n         LA    R14,0(R2,R14)           CENTER ERROR MESSAGE\nMSG020   DS    0H\n         BCTR  R1,00                   DECREMENT FOR EXECUTE\n         EX    R1,MVCERMSG             MOVE ERROR MESSAGE\n         EJECT\n***********************************************************************\n*        DISPLAY PANEL                                                *\n***********************************************************************\nTPUTPANL DS    0H\n         LA    R0,LPDSCBL              A(LENGTH OF PANEL)\n         LA    R1,DSCBPANL             A(DSCB PANEL)\n         TPUT  (1),(0),FULLSCR         WRITE PANEL TO TERMINAL\n         SPACE\n***********************************************************************\n*        RETRIEVE USER'S INPUT                                        *\n***********************************************************************\n         XC    INPUT(256),INPUT              CLEAR FIRST HALF OF WORK\n         XC    INPUT+256(256),INPUT+256      CLEAR LAST HALF OF WORK\n         LA    R0,L'INPUT              A(LENGTH OF INPUT AREA)\n         LA    R1,INPUT                A(INPUT AREA)\n         TGET  (1),(0),ASIS            GET INPUT FROM TERMINAL\n         SPACE\n         CLI   INPUT,PA2KEY            REDISPLAY REQUESTED?\n         BE    TPUTPANL                    YES, REDISPLAY\n         SPACE\n         CLI   INPUT,PFKEY03           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         CLI   INPUT,PFKEY15           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         SPACE\n         MVC   DSCBPCSR,DEFCSRAD       RESET IC TO DEFAULT CUSOR ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR ERROR MESSAGE\n         LR    R5,R1                   SAVE LENGTH OF TGET DATA\n         LA    R4,INPUT                PRELOAD DATA ADDRESS\n         NI    MISCFLAG,NSHARED+ENQUEUE    RESET ALL BUT REQ'D BITS\n         EJECT\n***********************************************************************\n*        PROCESS INPUT KEYED IN BY USER                               *\n*        INPUT REGS:                                                  *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*        OUTPUT REGS:                                                 *\n*              REG 00 CONTAINS THE ACTUAL LENGTH OF KEYED INPUT DATA  *\n*              REG 01 CONTAINS THE ADDRESS OF KEYED INPUT DATA        *\n*              REG 02 CONTAINS THE LENGTH -1 OF KEYED INPUT DATA      *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*              REG 06 CONTAINS THE ADDR OF THE MATCHING BUFFTAB ENTRY *\n*              REG 07 CONTAINS THE LENGTH OF A BUFFTAB ENTRY          *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*        LOCATE NEXT INPUT FIELD, LENGTH AND MATCHING TABLE ENTRY     *\n***********************************************************************\nINPUT000 DS    0H                      HERE TO PROCESS INPUT DATA\n         LA    R6,PDSCBL-2             A(HALFWORD COUNT OF ENTRIES)\n         LA    R7,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R15,TABLE000            A(INPUT DEPROCESSOR)\n         BASR  R14,R15                 PROCESS INPUT DATA\n         B     INPUT200                ALL DATA PROCESSED\n         SPACE\n         LTR   R6,R6                   MATCHING ENTRY?\n         BNZ   INPUT100                YES, PROCESS IT\n*  POSSIBLE ERROR AT THIS POINT  WHAT TO DO, WHAT TO DO?\n         B     INPUT000                NO BUFFTAB ENTRY, PROCESS NEXT\n         SPACE\n***********************************************************************\n*        RESET ATTRIBUTE BYTE TO NORMAL INTENSITY, UNPROTECTED        *\n***********************************************************************\nINPUT100 DS    0H                      HERE TO PROCESS INPUT DATA\n         LH    R15,2(,R6)              LOAD FIELD OFFSET\n         LA    R15,DSCBPANL(R15)           AND ADDRESS FIELD\n         BCTR  R15,00                  BACK UP TO THE ATTRIBUTE\n         NI    0(R15),64               AND OFF HIGHLIGHT ATTRIBUTE\n         SPACE\n***********************************************************************\n*     LOAD A(ROUTINE) TO PROCESS DATA AND BASR. (IF NOT ERASE INPUT)  *\n***********************************************************************\n         LTR   R0,R0                   ERASE EOF INPUT FIELD?\n         BNP   INPUT000                YES, GET NEXT FIELD\n         EX    R2,INPUTOC              INSURE UPPER CASE\n         LH    R15,6(,R6)              Y(OFFSET INTO ROUTINE TBL)\n         SLL   R15,2                       MULTIPLY BY 4\n         L     R15,TABTABLE(R15)       A(ROUTINE TO DEPROCESS INPUT)\n         BASR  R14,R15                     AND CALL SAME\n         B     INPUT000\n         SPACE 2\nINPUTOC  OC    0(0,R1),ALLBLANK        CONVERT TO UPPER CASE\n         EJECT\n***********************************************************************\n*        TEST FOR MODIFIED FILED(S) AND PROCESS ACCORDINGLY           *\n***********************************************************************\nINPUT200 DS    0H                      HERE AFTER END-OF-INPUT\n         TM    MISCFLAG,IPTDSNAM+IPTVOL  EITHER FIELDS MODIFIED?\n         BZ    INPUT300                    NO, CHECK FOR MODIFIED DSCB\n         BAS   R10,RSETATTR                YES, RESET ALL ATTRIBUTES\n         BAS   R10,CVAFRLSE                YES, RELEASE CVAF BUFFERS\n         TM    MISCFLAG,IPTVOL         VOLUME SERIAL MODIFIED?\n         BO    UCBLKPLP                    YES, GO LOOKUP UCB\n         TM    MISCFLAG,IPTDSNAM       DSNAME MODIFIED?\n         BO    LOCATELP                    YES, GO LOCATED DATA SET\nINPUT300 DS    0H\n         TM    MISCFLAG,IPTERROR       WAS THERE AN ERROR?\n         BO    TPUTPANL                    GO DISPLAY A MESSAGE\n         TM    MISCFLAG,DSCBMOD        WAS THE DSCB MODIFIED?\n         LA    R15,WHATTODO                NO, PROMPT TERM OP FOR INPUT\n         BZ    PROCEMSG                    GO DISPLAY A MESSAGE\n***********************************************************************\n*        REWEITE THE DSCB INTO THE VTOC                               *\n***********************************************************************\n         CVAFDIR ACCESS=WRITE,MF=(E,CVAFREQ),BRANCH=(YES,PGM)\n         LTR   R15,R15                 WAS WRITE SUCCESSFUL?\n         BNZ   CVAFPROC                    NO, GO LOAD IN ERROR MESSAGE\n         LA    R15,DSCBMSG1                YES, ADDRESS SUCCESSFUL MSG\n         B     PROCEMSG                REDISPLAY PANEL\n         EJECT\nENDDSNS  DS    0H\n***********************************************************************\n*        TERMINATE FULL SCREEN PROCESSING                             *\n***********************************************************************\n         STLINENO LINE=1               SET NEXT LINE TO 1\n         SPACE\n         STFSMODE OFF                  RESET FROM FULL SCREEN PROCESS\n         SPACE\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\n         BAS   R10,CVAFRLSE            RELEASE CVAF BUFFERS\n         SPACE\n***********************************************************************\n*        TERMINATE PROGRAM                                            *\n***********************************************************************\nRETURN   DS    0H\n*        $AUTHOFF\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   RETNAUTH            NOT ZERO, TELL NOT AUTHORIZED.\nNZ       MODESET KEY=NZERO\nRETNAUTH DS    0H\n         L     R13,4(,R13)             RESTORE BACKWARD POINTER\n         RETURN (14,12),T,RC=0\n         SPACE\nBADBOY   DS    0H\n         TPUT  =CL50'YOU ARE NOT ALLOWED TO USE THIS',50\n         B     RETURN\nMVCERMSG MVC   0(0,R14),2(R15)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET NAME.          *\n*   NOTE: IF A DATA SET NAME IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR VOLSER, WILL BE IGNORED.                  *\n***********************************************************************\nIDSNAME  DS    0H\n         OI    MISCFLAG,IPTDSNAM       INDICATE DSN HAS BEEN INPUT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R10,PDSNAME             A(PANEL DSNAME)\n         LA    R9,DS1DSNAM             A(DSCB DSNAME)\n         CLI   0(R1),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   IDSN100                     NO, DO NOT PROCESS QUOTES\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         LA    R1,1(,R1)                   YES, BYPASS FIRST QUOTE\n         BCTR  R2,00                       DECREMENT FOR FIRST QUOTE\n         STH   R2,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R2,00                       DECREMENT FOR LAST QUOTE\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         BR    R14\nIDSNMVC2 MVC   0(0,R10),0(R1)          MOVE IN DATA SET NAME\nIDSNMVC3 MVC   0(0,R9),0(R1)           MOVE IN DATA SET NAME\nIDSNMVC4 MVC   0(0,R10),USERIDI        MOVE IN USERID\nIDSNMVC5 MVC   0(0,R9),USERIDI         MOVE IN USERID\n         SPACE\nIDSN100  DS    0H\n         SLR   R8,R8                   CLEAR WORK REG\n         IC    R8,USERIDL              AL1(LENGTH OF USERID)\n         SPACE\n         LA    R15,1(,R8)              USERID + DELIMITER\n         AR    R15,R0                      + LENGTH OF DSNAME\n         STH   R15,LDSNAME             SAVE COMPUTED LENGTH OF DSNAME\n         CH    R15,=H'46'              IS DSNAME GT FIELD LENGTH?\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         BH    FLDERROR                    YES, GENERATE ERROR MESSAGE\n         SPACE\n         BCTR  R8,0                        DECREMENT FOR EXECUTE\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R8,IDSNMVC5             MOVE USERID TO DSNAME\n         EX    R8,IDSNMVC4             MOVE USERID TO DSNAME\n         LA    R9,1(R8,R9)                 AND ADJUST FOR SAME\n         LA    R10,1(R8,R10)               AND ADJUST FOR SAME\n         MVI   0(R9),C'.'              MOVE IN A DELIMITER\n         MVI   0(R10),C'.'             MOVE IN A DELIMITER\n         LA    R9,1(,R9)                   AND ADJUST FOR SAME\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         LA    R10,1(R2,R10)               AND ADJUST FOR SAME\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         BR    R14\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A VOLUME SERIAL NUMBER.            *\n*   NOTE: IF A VOLUME SERIAL IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR DATA SET NAME, WILL BE IGNORED.           *\n***********************************************************************\nIVOLSER  DS    0H\n         OI    MISCFLAG,IPTVOL         INDICATE VOLSER ENTERED\n         MVC   PVOLSER,ALLZEROS        CLEAR TARGET FIELD\n         EX    R2,IVOLMVC                  AND MOVE IN VOLSER\n         BR    R14\nIVOLMVC  MVC   PVOLSER(0),0(R1)        EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED CREATION DATE.          *\n***********************************************************************\nICREDT   DS    0H\n         MVC   PCREDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ICREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         CH    R15,=H'50'              IF > 50 THEN 1900'S       KMB1\n         BH    ICRE010                  YES, LEAVE ALONE         KMB1\n         LA    R15,100(,R15)           MAKE IT 21TH CENTURY      KMB1\nICRE010  DS    0H                                                KMB1\n         STC   R15,DS1CREDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1CREDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK CREATION DATE\n         UNPK  PCREDT,DWORD                AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nICREMVC1 MVC   PCREDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED REFERENCE DATE.         *\n***********************************************************************\nIREFD    DS    0H\n         MVC   PREFD,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IREFMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         CH    R15,=H'50'              IF > 50 THEN 1900'S       KMB1\n         BH    IREF010                  YES, LEAVE ALONE         KMB1\n         LA    R15,100(,R15)           MAKE IT 21TH CENTURY      KMB1\nIREF010  DS    0H                                                KMB1\n         STC   R15,DS1REFD                 AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1REFD+1       AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK REFERENCE DATE\n         UNPK  PREFD,DWORD                 AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nIREFMVC1 MVC   PREFD(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED EXPIRATION DATE.        *\n***********************************************************************\nIEXPDT   DS    0H\n         MVC   PEXPDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IEXPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         CH    R15,=H'50'              IF > 50 THEN 1900'S        KMB1\n         BH    IEXP010                  YES, LEAVE ALONE          KMB1\n         LA    R15,100(,R15)           MAKE IT 21TH CENTURY       KMB1\nIEXP010  DS    0H                                                 KMB1\n         STC   R15,DS1EXPDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1EXPDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK EXPIRATION DATE\n         UNPK  PEXPDT,DWORD                AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nIEXPMVC1 MVC   PEXPDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET ORGINAZATION.  *\n***********************************************************************\nIDSORG   DS    0H\n         MVC   PDSORG,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IDSOMVC1             MOVE INTO PANEL\n         CH    R0,=H'2'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BL    FLDERROR                    NO, REDISPLAY SCREEN\n         LA    R8,DSORGTAB             A(DSORG TABLE)\n         LA    R9,DSORGCNT             A(ENTRY COUNT OF SAME)\nIDSORG00 DS    0H\n         CLC   0(2,R8),0(R1)           COMPARE TABLE ENTRY TO INPUT\n         BE    IDSORG10                    IF EQUAL, PROCESS\n         LA    R8,DSORGLNG(,R8)        BUMP TO NEXT ENTRY\n         BCT   R9,IDSORG00                 AND GO CHECK THAT ONE\n         LA    R15,DSORGER1            A(DSORG ERROR MESSAGE)\n         B     FLDERROR\nIDSORG10 DS    0H\n         XC    FWORD,FWORD             CLEAR WORK AREA\n         CH    R0,=H'3'                WAS UNMOVABLE SPECIFIED?\n         BNE   IDSORG20                    NO, BYPASS IT THEN\n         CLI   2(R1),64                IS THIS A BLANK\n         BE    IDSORG20                    YES, NOT UNMOVEABLE\n         CLI   2(R1),C'U'              IS IT UNMOVEABLE?\n         LA    R15,DSORGER1                NO, INDICATE BAD DSORG\n         BNE   FLDERROR                      AND REDISPLAY SCREEN\n         OI    FWORD,DS1DSGU           INDICATE UNMOVEABLE\nIDSORG20 DS    0H\n         XC    DS1DSORG,DS1DSORG       CLEAR DSORG FIELD\n         OC    DS1DSORG,2(R8)          MOVE IN NEW DSORG\n         OC    DS1DSORG,FWORD              AND ADD 'U', IF SUPPLIED\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14\nIDSOMVC1 MVC   PDSORG(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RECORDING FORMAT.       *\n***********************************************************************\nIRECFM   DS    0H\n         MVC   PRECFM,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IRECMVC1             MOVE TO PANEL\n         LR    R10,R0                  A(COUNT OF CHARS IN INPUT)\n         XC    FWORD,FWORD             CLEAR WORK FIELD\nIRECFM00 DS    0H\n         LA    R8,RECFMTAB             A(RECFM TABLE)\n         LA    R9,RECFMCNT             A(ENTRY COUNT OF SAME)\nIRECFM05 DS    0H\n         CLI   0(R1),64                IS THIS A BLANK?\n         BE    IRECFM25                    YES, BYPASS IT THEN\n         SPACE\nIRECFM10 DS    0H\n         CLC   0(1,R8),0(R1)           MATCHING ENTRY?\n         BE    IRECFM20                    YES, PROCESS\n         LA    R8,RECFMLNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,IRECFM10                 AND GO PROCESS IT\n         LA    R15,RECFMER1            A(INVALID RECFM INPUT)\n         B     FLDERROR                    AND GO PROCESS ERROR\nIRECFM20 DS    0H\n         OC    FWORD(1),1(R8)          SAVE THIS BIT\nIRECFM25 DS    0H\n         LA    R1,1(,R1)               BUMP TO NEXT BYTE\n         BCT   R10,IRECFM00            PROCESS NEXT BYTE OF INPUT\n         SPACE\n         LA    R15,RECFMER1            PRELOAD INVALID RECFM INPUT MSG\n         TM    FWORD,DS1RECFU          WAS UNDEFINED SPECIFID?\n         BNO   IRECFM30                NO, BYPASS NEXT TEST\n         TM    FWORD,255-DS1RECFU-DS1RECFA-DS1RECMC     ANY OTHERS?\n         BNZ   FLDERROR                    YES, ERRONOUS INPUT\nIRECFM30 DS    0H\n         OC    FWORD(1),FWORD          TEST FOR ANY INPUT\n         BZ    FLDERROR                    IF ZERO, INDICATE ERROR\n         SPACE\n         XC    DS1RECFM,DS1RECFM       RESET RECORDING FORMAT\n         OC    DS1RECFM,FWORD              AND SET NEW VALUE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRECMVC1 MVC   PRECFM(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LOGICAL RECORD LENGTH.  *\n***********************************************************************\nILRECL   DS    0H\n         MVC   PLRECL,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ILREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK LRECL\n         UNPK  PLRECL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1LRECL        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILREMVC1 MVC   PLRECL(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED BLOCK SIZE.             *\n***********************************************************************\nIBLKL    DS    0H\n         MVC   PBLKL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IBLKMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK BLKL\n         UNPK  PBLKL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1BLKL         AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIBLKMVC1 MVC   PBLKL(0),0(R1)          EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED KEY LENGTH.             *\n***********************************************************************\nIKEYL    DS    0H\n         MVC   PKEYL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IKEYMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK KEYL\n         UNPK  PKEYL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STC   R15,DS1KEYL                 AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIKEYMVC1 MVC   PKEYL(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RELATIVE KEY POSITION.  *\n***********************************************************************\nIRKP     DS    0H\n         MVC   PRKP,ALLZEROS           CLEAR TARGET FIELD\n         EX    R2,IRKPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PRKP,DWORD                  AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1RKP          AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRKPMVC1 MVC   PRKP(0),0(R1)           EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LSTAR.                  *\n***********************************************************************\nILSTAR   DS    0H\n         MVC   PLSTAR,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ILSTMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STCM  R3,B'0111',DS1LSTAR     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILSTMVC1 MVC   PLSTAR(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED TRACK BALANCE.          *\n***********************************************************************\nITRBAL   DS    0H\n         MVC   PTRBAL,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ITRBMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PTRBAL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R3,B'0011',DS1TRBAL     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nITRBMVC1 MVC   PTRBAL(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED SMSIND                  *\n***********************************************************************\nSMSIND   DS    0H\n         MVC   PSMSIND,ALLZEROS        CLERA TARGET FIELD\n         EX    R2,SMSIMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1SMSFG                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nSMSIMVC1 MVC   PSMSIND(0),0(R1)        EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DSIND.                  *\n***********************************************************************\nIDSIND   DS    0H\n         MVC   PDSIND,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,IDSIMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1DSIND                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIDSIMVC1 MVC   PDSIND(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED OPTCD                   *\n***********************************************************************\nIOPTCD   DS    0H\n         MVC   OPTCDE,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,IOPTMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1OPTCD                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIOPTMVC1 MVC   OPTCDE(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC TYPE.            *\n***********************************************************************\nISCALL1  DS    0H\n         MVC   PSCAL1,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC1             MOVE TO PANEL\n         LA    R8,SCAL1TAB             A(TABLE OC ACCEPTABLE VALUES)\n         LA    R9,SCAL1CNT             A(COUNT OF SAME)\nISCALL00 DS    0H\n         CLC   0(1,R8),0(R1)           ENTRIES EQUAL??\n         BE    ISCALL10                    IF EQUAL, PROCESS\n         LA    R8,SCAL1LNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,ISCALL00             PROCESS THIS ENTRY\n         LA    R15,SCALLER             A(ADDRESS ERROR MESSABE)\n         B     FLDERROR\nISCALL10 DS    0H\n         XC    DS1SCAL1,DS1SCAL1       CLEAR ALLOCATION TYPE\n         OC    DS1SCAL1,1(R8)              AND MOVE IN NEW TYPE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC1 MVC   PSCAL1(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC AMOUNT.          *\n***********************************************************************\nISCALL3  DS    0H\n         MVC   PSCAL3,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC2             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK SCALL3\n         UNPK  PSCAL3,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0111',DS1SCAL3        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC2 MVC   PSCAL3(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        CHAR TO HEX CONVERSION ROUTINE                               *\n***********************************************************************\nCONV2HEX DS    0H\n         LR    R8,R1                   LOAD ADDRESS OF SOURCE VALUE\n         LR    R9,R0                   LOAD LOOP COUNTER\n         SLR   R3,R3                   CLEAR TARGET REGISTER\nLOOP2BIN DS    0H\n         SLL   R3,4                    MAKE ROOM FOR NEXT NIBBLE\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,0(0,R8)             INSERT A BYTE\n         N     R15,=F'15'              TURN OFF ALL BUT LAST NIBBLE\n         TM    0(R8),240               IS IT NUMERIC\n         BO    HEX010                      YES, BYPASS ADD HALFWORD\n         AH    R15,=H'9'               ADD 9 IF NOT A NUMBER\nHEX010   DS    0H\n         OR    R3,R15                  STORE IN RESULT\n         LA    R8,1(0,R8)              NEXT TARGET BYTE\n         BCT   R9,LOOP2BIN             PROCEED THROUGH FULLWORD\n         BR    R10                     RETURN TO CALLER\n         SPACE\n***********************************************************************\n*        FIELD ERROR PROCESSING ROUTINE                               *\n*   ON INPUT: R15 = A(ERROR MESSAGE AREA)                             *\n*             ALL OTHER REGISTERS ARE THE SAME AS UPON INPUT TO A     *\n*             FIELD DE-PROCESSING ROUTINE.                            *\n***********************************************************************\nFLDERROR DS    0H\n         TM    MISCFLAG,IPTERROR       MORE THAN ONE ERROR?\n         BO    FLDERR10                    YES, BYPASS MESSAGE MOVE\n         OI    MISCFLAG,IPTERROR           NO, SET ERROR FLAG\n         MVC   DSCBPCSR,0(R6)          ALTER THE IC BUFF ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R10,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R8,L'PERRMSG                LENGTH OF SAME\n         LH    R9,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R9,R8                   GREATER THAN MAXIMUM?\n         BNH   FLD010                      NO, CONTINUE\n         LR    R9,R8                       YES, LOAD MAXIMUM LENGTH\nFLD010   DS    0H\n         SR    R8,R9                   COMPUTE REMAINDER\n         BNP   FLD020                  BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R8,1                    DIVIDE BY TWO\nFLD020   DS    0H\n         LA    R10,0(R8,R10)           CENTER ERROR MESSAGE\n         BCTR  R9,00                   DECREMENT FOR EXECUTE\n         EX    R9,FLDMVC1              MOVE ERROR MESSAGE\n         SPACE\nFLDERR10 DS    0H\n         LH    R8,02(,R6)              LOAD OFFSET TO FIELD\n         LA    R8,DSCBPANL(R8)             AND ADDRESS ACTUAL FIELD\n         BCTR  R8,00                       BACK UP TO ATTRIBUTE BYTE\n         OI    0(R8),X'89'             TURN ON HIGH-INTENS + MDT\n         BR    R14                     RETURN TO MAINLINE\n         TITLE '     TABLE000 -- PROCESS TGET INPUT BUFFER'\n         PUSH  USING\n         DROP  R11                     DROP PREVIOUS BASE REGISTER\n***********************************************************************\n*                                                                     *\n*       THIS ROUTINE WILL PROCESS THE INPUT FROM AN 'ASIS' TGET       *\n*   AGAINST A TABLE OF SBA'S. THE OUTPUT IS THE ADDRESS AND LENGTH    *\n*   OF THE INPUT FIELD AND THE ADDRESS OF THE ENTRY IN THE SBA        *\n*   TABLE WITH THE MATCHING SBA.                                      *\n*       NOTE: IF, BY CHANCE, A FIELD IS FOUND IN THE INPUT STREAM     *\n*   THAT DOES NOT HAVE A MATCHING TABLE ENTRY, REG 06 IS RETURNED     *\n*   EMPTY, BUT THE FIELD ADDRESS AND LENGTHS ARE RETURNED TO THE USER.*\n*                                                                     *\n*   INPUT REGISTERS                                                   *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  BUFFTAB LIST (FROM $FLD GENERATION)                  *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n*   OUTPUT REGISTERS                                                  *\n*        R0   -  ACTUAL LENGTH OF INPUT/ZERO IF 'ERASE EOF' OF FIELD  *\n*        R1   -  ADDRESS OF FIELD IN INPUT                            *\n*        R2   -  LENGTH - 1 OF FIELD IN INPUT                         *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  MATCHING BUFFTAB ENTRY OR ZERO                       *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nTABLE000 DS    0H                      HERE TO PROCESS TGET INPUT\n         USING TABLE000,R15\n         LTR   R5,R5                   ANY THING LEFT TO CHECK?\n         BZ    TABLE050                NO, RETURN TO CALLER\n         SPACE\nTABLE025 DS    0H                      CHECK FOR SBA IN INPUT\n         CLI   0(R4),X'11'             A START FIELD CHARACTER?\n         BE    TABLE100                    YES, GO PROCESS INPUT FIELD\n         LA    R4,1(,R4)                   NO, BUMP AROUND\n         BCT   R5,TABLE025                 GO TEST NEXT BYTE\nTABLE050 DS    0H                      RETURN TO USER WITH NOTHING\n         SLR   R6,R6                   INDICATE NO DATA TO PROCESS\n         BR    R14                     RETURN TO CALLER\n         SPACE\nTABLE100 DS    0H\n         LA    R4,1(,R4)               BUMP AROUND SBA\n         BCT   R5,TABLE120                 DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\nTABLE120 DS    0H\n         LH    R2,0(R6)                LOAD NUMBER OF ENTRIES IN TABLE\n         LA    R6,2(,R6)               BUMP TO START OF TABLE\n         EJECT\nTABLE200 DS    0H\n         CLC   0(2,R4),0(R6)           COMPARE SBA TO TABLE ENTRY\n         BE    TABLE300                    BRANCH OUT IF FOUND\n         LA    R6,0(R7,R6)             BUMP TO NEXT TABLE ENTRY\n         BCT   R2,TABLE200             GO CHECK NEXT ENTRY\n         SLR   R6,R6                   INDICATE NO MATCH\n         SPACE\nTABLE300 DS    0H                      A MATCHING TABLE ENTRY (MAYBE)\n         LA    R4,2(R4)                BUMP TO DATA ADDRESS\n         BCTR  R5,00                       AND DECREMENT SAME\n         BCT   R5,TABLE320                 DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\nTABLE320 DS    0H\n         LR    R1,R4                   SAVE STARTING ADDRESS\n         SPACE\nTABLE400 DS    0H                      FIND END OF FIELD\n         CLI   0(R4),X'11'             LOOK FOR NEXT FIELD START\n         BE    TABLE500                    AND BRENCH OUT IF FOUND\n         LA    R4,1(,R4)               BUMP ANOTHER BYTE\n         BCT   R5,TABLE400                 AND GO CHECK THIS ONE\n         SPACE\nTABLE500 DS    0H                      HERE AT END OF DATA OR NEXT SBA\n         LR    R2,R4                   PREPARE FOR LENGTH COMPUTATION\n         SR    R2,R1                      AND COMPUTE ACTUAL LENGTH\n         LR    R0,R2                        LOAD IT INTO RETURN REG\n         BCTR  R2,00                          DECREMENT FOR EXECUTE(S)\n         B     4(,R14)                 RETURN TO CALLER\n         POP   USING\n         SPACE\nFLDMVC1  MVC   0(0,R10),2(R15)         EXECUTED MOVE\nNUMBRTRT TRT   0(0,R1),NUMTAB          EXECUTED TRT\nNUMHXTRT TRT   0(0,R1),NUMHEXTB        EXECUTED TRANSLATE AND TEST\nNUMBPACK PACK  DWORD,0(0,R1)           EXECUTED PACK INSTRUCTION\n         TITLE '     CVAFPROC -- GENERATE CVAF ERROR MESSAGE'\n***********************************************************************\n*        ROUTINE TO PROCESS ERROR RETURN FROM CVAF                    *\n***********************************************************************\nCVAFPROC DS    0H\n         USING CVAFMAP,R3\n         LA    R3,CVAFREQ\n*        CLI   CVSTAT,00               ERROR GENERATED?\n*        BE    R14                         NO, BYPASS MSG\nCVAFP010 DS    0H\n         SLL   R15,16                  SHIFT RC TO HIGH ORDER 2 BYTES\n         LA    R1,4                        AND LOAD COUNT OF ENTRIES\n         LA    R2,CVAFRC               A(TARGET AREA)\n         SPACE\nCVAFP020 DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT HALF A BYTE INTO REG\n         STC   R14,0(,R2)              SAVE THIS HALF BYTE\n         LA    R2,1(,R2)                   BUMP TO NEXT TARGET ADDRESS\n         BCT   R1,CVAFP020                 AND PROCESS THAT ONE\n         TR    CVAFRC,TRTAB            TRANSLATE TO PRINTABLE CHARS\n         SPACE\n         LA    R1,CVAFREQ\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,CVSTAT                  AND LOAD STATUS BYTE\n         CVD   R15,DWORD                   CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  CVAFST,DWORD            MOVE TO OUTPUT LINE\n         SPACE\n         MVC   CVAFTYPE,=CL5'READ '    DEFAULT TO READ\n         CLI   CVFCTN,CVDIRD           WAS IT A READ?\n         BE    CVAFP030                    YES, BYPASS WRITE\n         MVC   CVAFTYPE,=CL5'WRITE'        NO, INDICATE IT WAS A WRITE\n         SPACE\nCVAFP030 DS    0H\n         LA    R15,CVAFERR             GET ADDRESS OF MESSAGE\n         B     PROCEMSG                RETURN TO CALLER\n         TITLE '     RSETATTR -- RESET ALL MODIFIABLE FIELD ATTRIBUTES'\n***********************************************************************\n*        ROUTINE TO RESET ALL MODIFIABLE FIELD ATTRIBUTES             *\n***********************************************************************\nRSETATTR DS    0H\n         LA    R1,PDSCBL-2             A(H'ENTRIES IN TABLE')\n         LH    R2,0(R1)                H'ENTRIES IN TABLE'\n         LA    R3,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R1,2(,R1)               A(TABLE PROPER)\n         LA    R4,DSCBPANL             A(PANEL)\nRSET0000 DS    0H                      LOOP THROUGH TABLE\n         LH    R5,2(,R1)               LOAD FIELD OFFSET\n         BCTR  R5,00                   DECREMENT BACK TO ATTRIBUTE\n         AR    R5,R4                   ADD PANEL BASE\n         NI    0(R5),64                RESET TO MODIFIABLE, NORM INTENS\n         LA    R1,0(R3,R1)             BUMP TO NEXT ENTRY\n         BCT   R2,RSET0000                 AND GO PROCESS SAME\n         BR    R10                     RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\nCVAFRLSE DS    0H\n         CVAFDIR ACCESS=RLSE,BUFLIST=0,IXRCDS=NOKEEP,BRANCH=(YES,PGM), $\n               IOAREA=NOKEEP,MF=(E,CVAFREQ)\n         OC    UCBTOKEN,UCBTOKEN                                30OCT95\n         BZ    CVAFR010                                         30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X\n               MF=(E,XUCBPIN)                                   30OCT95\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         MODESET MODE=PROB                                      30OCT95\nCVAFR010 DS    0H                                               30OCT95\n         BR    R10                     RETURN TO CALLER\n         BR    R10                     RETURN TO CALLER\n         SPACE\n         PRINT DATA\n         DC    64S(*)\n         PRINT NODATA\n         TITLE 'WORKING STORAGE AND CONSTANTS'\n         DROP  ,\nSAVEAREA DS    18F\nDWORD    DS    D\nFWORD    DS    F\nALLBLANK DC    256C' '\nALLZEROS DC    256X'00'\nDSNLOC   CAMLST NAME,DS1DSNAM,,LOCWORK\n         DS    0D\nLOCWORK  DS    XL512                   LOCATE WORK AREA\nINPUT    EQU   LOCWORK,512\nLDSNAME  DS    H                       LENGTH OF DS1DSNAM\nDEFCSRAD DS    XL2                     DEFAULT CURSOR BUFF ADDR\n         SPACE\nUCBADDR  DS    A(0)                                             30OCT95\nUCBTOKEN DC    XL8'00'                                          30OCT95\n         UCBLOOK MF=(L,XUCBLOOK,0D)                             30OCT95\n         UCBPIN  MF=(L,XUCBPIN,0D)                              30OCT95\n         SPACE\nSYSDSN   DC    CL8'SYSDSN'             QNAME FOR ENQ\n         SPACE\nMODELENQ ENQ   (SYSDSN,,E,,SYSTEM),RET=TEST,MF=L\n         SPACE\nMODESENQ ENQ   (SYSDSN,,E,,SYSTEMS),RET=TEST,MF=L\n         SPACE\nUSERID   DS    0CL9\nUSERIDL  DS    X\nUSERIDI  DS    CL8\n         EJECT\n         LTORG\n         SPACE\n         PRINT NOGEN\nDSNLOCER MSSG  'DATA SET NAME NOT CATALOGED - RESPECIFY'\nENQERMSG MSSG  'DATA SET IS IN USE BY OTHER(S) - MODIFY THIS DSCB WITH $\n               CAUTION'\nDSNAMEER MSSG  'DATA SET NAME NOT SPECIFIED AT CP INVOCATION - RESPECIF$\n               Y'\nDSNLNGER MSSG  'LENGTH OF DSNAME AND USERID GREATER THAN FIELD LENGTH -$\n                RESPECIFY'\nUCBERMSG MSSG  'VOLUME SERIAL REQUESTED NOT ONLINE - RESPECIFY DSN OR V$\n               OL'\nDSORGER1 MSSG  'INVALID DATASET ORGINIZATION - RESPECIFY - PO/PS/DA/IS/$\n               AM (U) ALLOWED'\nRECFMER1 MSSG  'INVALID RECORDING FORMAT - RESPECIFY - F/V/U/B/S/A/M'\nNUMBERER MSSG  'INVALID DATA, FIELD MUST BE ALL NUMERIC'\nHEXER    MSSG  'INVALID DATA, FIELD MUST BE ALL HEXIDECIMAL CHARACTERS'\nLNGTHER1 MSSG  'INVALID DATA, DATA LENGTH MUST MATCH INPUT FIELD LENGTH$\n               '\nSCALLER  MSSG  'SECONDARY ALLOCATION TYPE INVALID - RESPECIFY - C/T/B/R$\n               /U'\nWHATTODO MSSG  'TO TERMINATE, ONE MUST DEPRESS EITHER PFK3 OR PFK15'\nDSCBMSG1 MSSG  'DSCB HAS BEEN SUCCESSFULLY REWRITTEN'\n         SPACE\nCVAFERR  DC    AL2(CVAFERRE-*-2)       LENGTH OF ERROR MESSAGE\n         DC    C'ERROR RETURN FORM CVAF DURING '\nCVAFTYPE DC    CL5' '\n         DC    C', RETURN CODE='\nCVAFRC   DC    XL4'00'\n         DC    C', STATUS='\nCVAFST   DC    CL3' '\nCVAFERRE EQU   *                       END OF ERROR MESSAGE\n         PRINT GEN\n         EJECT\nMISCFLAG DC    B'00000000'\nNSHARED  EQU   B'10000000'             INDICATES UCB NOT SHARED\nIPTDSNAM EQU   B'01000000'             DATA SET NAME HAS CHANGED\nIPTVOL   EQU   B'00100000'             VOLSER PROVIDED BY TERMINAL OPR\nIPTERROR EQU   B'00010000'             INPUT ERROR HAS BEEN ENCOUNTERED\nDSCBMOD  EQU   B'00001000'             DSCB HAS BEEN MODIFIED\nENQUEUE  EQU   B'00000100'             DATA SET IS IN USE\n*        EQU   B'00000010'             UNUSED AT PRESENT\n*        EQU   B'00000001'             UNUSED AT PRESENT\n         SPACE\nTRTAB    DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE\n         SPACE\nNUMTAB   DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMTAB+C'0'             ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nNUMHEXTB DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMHEXTB+C'0'           ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   NUMHEXTB+C'A'           ORG BACK TO HEX CHARS\n         DC    X'000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nDSORGTAB DS    0CL20                   DATASET ORGINAZATION TABLE\n         DC    CL2'IS',AL1(DS1DSGIS,00000000)\nDSORGLNG EQU   *-DSORGTAB              LENGTH OF ONE ENTRY\n         DC    CL2'PS',AL1(DS1DSGPS,00000000)\n         DC    CL2'DA',AL1(DS1DSGDA,00000000)\n         DC    CL2'PO',AL1(DS1DSGPO,00000000)\n         DC    CL2'AM',AL1(00000000,DS1ORGAM)\nDSORGCNT EQU   (*-DSORGTAB)/DSORGLNG   COUNT OF ENTRIES\n         SPACE\nRECFMTAB DS    0CL14                   DATASET RECFM TABLE\n         DC    CL1'F',AL1(DS1RECFF)\nRECFMLNG EQU   *-RECFMTAB              LENGTH OF ONE ENTRY\n         DC    CL1'V',AL1(DS1RECFV)\n         DC    CL1'U',AL1(DS1RECFU)\n         DC    CL1'B',AL1(DS1RECFB)\n         DC    CL1'S',AL1(DS1RECFS)\n         DC    CL1'A',AL1(DS1RECFA)\n         DC    CL1'M',AL1(DS1RECMC)\nRECFMCNT EQU   (*-RECFMTAB)/RECFMLNG   COUNT OF ENTRIES\n         SPACE\nSCAL1TAB DS    0CL14                   SECONDARY ALLOCATION TYPE TABLE\n         DC    CL1'C',AL1(DS1CYL)      CYLINDER BOUNDARY\nSCAL1LNG EQU   *-SCAL1TAB              LENGTH OF ONE ENTRY\n         DC    CL1'T',AL1(DS1TRK)      TRACK BOUNDARY\n         DC    CL1'B',AL1(DS1AVR)      AVR BLOCK\n         DC    CL1'R',AL1(DS1AVRND)    AVG BLOCK AND ROUND\n         DC    CL1'A',AL1(DS1DSABS)    ABSOLUTE TRACK\nSCAL1CNT EQU   (*-SCAL1TAB)/SCAL1LNG   COUNT OF ENTRIES\n         EJECT\nTABTABLE DS    0F                  VALUE=(Y(00)) IN $FLD\n         DC    A(IDSNAME)           0\n         DC    A(IVOLSER)           1\n         DC    A(ICREDT)            2\n         DC    A(IREFD)             3\n         DC    A(IEXPDT)            4\n         DC    A(IDSORG)            5\n         DC    A(IRECFM)            6\n         DC    A(ILRECL)            7\n         DC    A(IBLKL)             8\n         DC    A(IKEYL)             9\n         DC    A(IRKP)             10\n         DC    A(ILSTAR)           11\n         DC    A(ITRBAL)           12\n         DC    A(SMSIND)           13\n         DC    A(IDSIND)           14\n         DC    A(IOPTCD)           15\n         DC    A(ISCALL1)          16\n         DC    A(X'80000000'+ISCALL3) 17\n         SPACE 2\nCVAFREQ  CVAFDIR DSN=DS1DSNAM,BUFLIST=CVAFBUF,IOAREA=KEEP,             $\n               IXRCDS=KEEP,MF=L\n         EJECT\nCVAFBUF  ICVAFBFL DSECT=NO\n         EJECT\nDSCB     DS    0F\n         IECSDSL1 (1)                  MAP OUT DSCB FORMAT 1\nLDSCB    EQU   *-DSCB\n         TITLE '              -- DSCB FIELD(S) MAP FOR A MODEL 2'\nDSCBPANL $FLD  TYPE=INIT,MODEL='3278-2',BUFFTAB=YES,OPERATN=WRITERAS,  $\n               FILL=00\n         $FLD  POS=(01,20),ATR=SKIP,                                   $\n               INITIAL='DATA SET CONTROL BLOCK MODIFICATION PANEL'\n         $FLD  POS=(03,18),ATR=SKIP,                                   $\n               INITIAL='DATA SET NAME'\nPDSNAME  $FLD  POS=(03,32),ATR=(IC,UNPR),                              $\n               VALUES=(Y(00)),LENGTH=46\n         EJECT\n         $FLD  POS=(05,18),ATR=SKIP,                                   $\n               INITIAL='VOLUME SERIAL'\nPVOLSER  $FLD  POS=(05,32),ATR=UNPR,                                   $\n               VALUES=(Y(01)),LENGTH=6\n         $FLD  POS=(07,18),ATR=SKIP,                                   $\n               INITIAL='CREATION DATE'\nPCREDT   $FLD  POS=(07,32),ATR=UNPR,                                   $\n               VALUES=(Y(02)),LENGTH=5\n         EJECT\n         $FLD  POS=(08,17),ATR=SKIP,                                   $\n               INITIAL='REFERENCE DATE'\nPREFD    $FLD  POS=(08,32),ATR=UNPR,                                   $\n               VALUES=(Y(03)),LENGTH=5\n         $FLD  POS=(09,16),ATR=SKIP,                                   $\n               INITIAL='EXPIRATION DATA'\nPEXPDT   $FLD  POS=(09,32),ATR=UNPR,                                   $\n               VALUES=(Y(04)),LENGTH=5\n         EJECT\n         $FLD  POS=(11,10),ATR=SKIP,                                   $\n               INITIAL='DATA SET ORGINIZATION'\nPDSORG   $FLD  POS=(11,32),ATR=UNPR,                                   $\n               VALUES=(Y(05)),LENGTH=3\n         $FLD  POS=(12,18),ATR=SKIP,                                   $\n               INITIAL='RECORD FORMAT'\nPRECFM   $FLD  POS=(12,32),ATR=UNPR,                                   $\n               VALUES=(Y(06)),LENGTH=4\n         EJECT\n         $FLD  POS=(13,10),ATR=SKIP,                                   $\n               INITIAL='LOGICAL RECORD LENGTH'\nPLRECL   $FLD  POS=(13,32),ATR=UNPR,                                   $\n               VALUES=(Y(07)),LENGTH=5\n         $FLD  POS=(14,12),ATR=SKIP,                                   $\n               INITIAL='PHYSICAL BLOCK SIZE'\nPBLKL    $FLD  POS=(14,32),ATR=UNPR,                                   $\n               VALUES=(Y(08)),LENGTH=5\n         EJECT\n         $FLD  POS=(15,21),ATR=SKIP,                                   $\n               INITIAL='KEY LENGTH'\nPKEYL    $FLD  POS=(15,32),ATR=UNPR,                                   $\n               VALUES=(Y(09)),LENGTH=3\n         $FLD  POS=(16,10),ATR=SKIP,                                   $\n               INITIAL='RELATIVE KEY POSITION'\nPRKP     $FLD  POS=(16,32),ATR=UNPR,                                   $\n               VALUES=(Y(10)),LENGTH=3\n         EJECT\n         $FLD  POS=(18,06),ATR=SKIP,                                   $\n               INITIAL='LAST USED TRACK AND BLOCK'\nPLSTAR   $FLD  POS=(18,32),ATR=UNPR,                                   $\n               VALUES=(Y(11)),LENGTH=6\n         $FLD  POS=(18,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         $FLD  POS=(19,01),ATR=SKIP,                                   $\n               INITIAL='BYTES REMAINING ON LAST TRACK'\nPTRBAL   $FLD  POS=(19,32),ATR=UNPR,                                   $\n               VALUES=(Y(12)),LENGTH=4\n         EJECT\n         $FLD  POS=(20,17),ATR=SKIP,                                   $\n               INITIAL='SMS INDICATORS'\nPSMSIND  $FLD  POS=(20,32),ATR=UNPR,                                   $\n               VALUES=(Y(13)),LENGTH=2\n         $FLD  POS=(20,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(21,12),ATR=SKIP,                                   $\n               INITIAL='DATA SET INDICATORS'\nPDSIND   $FLD  POS=(21,32),ATR=UNPR,                                   $\n               VALUES=(Y(14)),LENGTH=2\n         $FLD  POS=(21,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(22,22),ATR=SKIP,                                   $\n               INITIAL='OPT CODES'\nOPTCDE   $FLD  POS=(22,32),ATR=UNPR,                                   $\n               VALUES=(Y(15)),LENGTH=2\n         $FLD  POS=(22,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(23,11),ATR=SKIP,                                   $\n               INITIAL='SECONDARY ALLOCATION'\nPSCAL1   $FLD  POS=(23,32),ATR=UNPR,                                   $\n               VALUES=(Y(16)),LENGTH=1\n         EJECT\nPSCAL3   $FLD  POS=(23,34),ATR=UNPR,                                   $\n               VALUES=(Y(17)),LENGTH=5\nPERRMSG  $FLD  POS=(24,02),ATR=(SKIP,BRT),                             $\n               INITIAL='                                               $\n                                          '\n         PRINT GEN\nPDSCBL   $FLD  TYPE=FINAL,BUFFTAB=PDSCBL,EQU=LPDSCBL\nLPDSCB   EQU   (((*-DSCBPANL+7)/8)*8)   LENGTH OF DCT PANEL\n         EJECT\nCVAFMAP  ICVAFPL DSECT=YES,LABELS=YES\n         EJECT\n         IKJCPPL                       CPPL PARAMETER LIST\n         PRINT NOGEN\n         CVT   LIST=YES,DSECT=YES\n         IEFUCBOB LIST=YES\n         IHAPSA\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         PRINT GEN\n         EJECT\n         YREGS  ,\n         EJECT\n        $KEYS\n         END\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZAPDSCB$": {"ttr": 14595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00@\\x01\\x07\"\\x7f\\x01\\x17\\x18_\\x00R\\x00\\x1d\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2007-08-15T00:00:00", "modifydate": "2017-07-04T00:52:40", "lines": 29, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE566(ZAPDSCB)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   ZAPDSCB\n SETCODE AC(1)\n SETSSI  CB495566\n NAME    ZAPDSCB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZAPDSCB#": {"ttr": 14597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00X\\x01\\x174/\\x01\\x174/\\x04I\\x00;\\x008\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2017-12-08T00:00:00", "modifydate": "2017-12-08T04:49:58", "lines": 59, "newlines": 56, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n\n     To change DSCB attributes for a dataset in fullscreen mode.\n\n)X SYNTAX  -\n\n     ZAPDSCB \u00dddataset.name\u00a8\n\n\n)O OPERANDS -\n))dataset.name\n\n    The dataset name should either be in quotes, to get it\n    exactly as is, or it will be prefixed.\n\n    >>>>  THE PREFIX WILL NOT BE WHAT YOU THINK.  <<<<\n\n    The prefix comes (in this program) from the ACEE userid,\n    and NOT from the TSO prefix, as indicated by the PROFILE\n    TSO command.\n\n    In other words, if the dataset.name is unquoted, the\n    resulting dataset which is operated upon, will be:\n\n         ACEEUSRI.dataset.name\n\n    So to accurately specify the dataset name and be sure of\n    it, please enclose it in quotes.\n\n  Illustration of the Full Screen:  (fields can be typed over)\n\n                     DATA SET CONTROL BLOCK MODIFICATION PANEL\n\n                   DATA SET NAME 'SBGOLOB.B.ASM'\n\n                   VOLUME SERIAL DATA05\n\n                   CREATION DATE 08137\n                  REFERENCE DATE 17342\n                 EXPIRATION DATA 00000\n\n           DATA SET ORGINIZATION PO\n                   RECORD FORMAT FB\n           LOGICAL RECORD LENGTH 00080\n             PHYSICAL BLOCK SIZE 27920\n                      KEY LENGTH 000\n           RELATIVE KEY POSITION 000\n\n       LAST USED TRACK AND BLOCK 248405  <=== HEXADECIMAL\n  BYTES REMAINING ON LAST TRACK  06E8\n                  SMS INDICATORS 00      <=== HEXADECIMAL\n             DATA SET INDICATORS 82      <=== HEXADECIMAL\n                       OPT CODES 20      <=== HEXADECIMAL\n            SECONDARY ALLOCATION C 00065\n\n    Where a secondary allocation of C is cylinders,\n    T is tracks, and B is blocks.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZAPDSCBA": {"ttr": 14599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x04\\x01\\x01\\x18_\\x01\\x06\\x15?\\x134\\tF\\x05\\xdc\\x03\\x8f\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2001-07-04T00:00:00", "modifydate": "2006-06-02T13:34:04", "lines": 2374, "newlines": 1500, "modlines": 911, "user": "KBASS"}, "text": "*--------------------------------------------------------------------*\n*        DON'T KNOW WHO WROTE THIS ORIGINALLY                        *\n*        FULL  SCREEN VTOC ZAPPER.                                   *\n*--------------------------------------------------------------------*\n***********************************************************************\n* MODIFIED BY K.M. (SAM) BASS (SBASS,SJB,KBASS,KMB)                   *\n***********************************************************************\n$ATH$    EQU   245                 AUTHORIZATION SVC\n*--------------------------------------------------------------------*\n*        MSSG    MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n&MSGNAME MSSG  &DATA,&REPLN,&PREFIX=YES\n         LCLC  &FN\n         LCLA  &FL\n         AIF   (T'&DATA NE 'O').IN0100\n         MNOTE 8,'DATA NOT SUPPLIED IN ''MSSG'' GENERATION, EXPANSION T$\n               ERMINATED'\n         MEXIT\n.IN0100  ANOP\n         AIF   (T'&MSGNAME EQ 'O').IN0200\n&FN      SETC  '&MSGNAME'\n         AGO   .IN0300\n.IN0200  MNOTE 4,'MAP NAME NOT SPECIFIED, DEFAULT NAME GENERATED'\n&FN      SETC  'MSSG&SYSNDX'            GENERATE DEFAULT NAME\n.IN0300  ANOP\n         AIF   ('&DATA'(1,1) EQ '''').IN0400     FIRST CHAR A (')?\n         MNOTE 8,'CHARACTER STRING MUST BEGIN AND END WITH A QUOTE - EX$\n               PANSION TERMINATED'\n         MEXIT\n.IN0400  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0500  IS REPLY LENGTH SUPPLIED?\n         AIF   (T'&REPLN EQ 'N').IN0500  IS REPLY LENGTH NUMERIC?\n         MNOTE 8,'''REPLY LENGTH'' VALUE IS NOT NUMERIC - EXPANSION TER$\n               MINATED'\n         MEXIT\n.IN0500  ANOP\n&FN      DS    0H                      ALIGN ON HALFWORD\n&FL      SETA  K'&DATA-2               DEFAULT TO LENGTH OF LITERAL\n&FL      SETA  (((&FL+1)/2)*2)         ROUND TO HALF WORD LENGTH\n         AIF   ('&PREFIX' NE 'YES').IN0550   BYPASS AL2 IF NOT DESIRED\n         DC    AL2(&FL)                LENGTH OF TEXT - ROUNDED TO 2\n.IN0550  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0600  IS REPLY LENGTH SUPPLIED?\n         DC    AL2(&REPLN)             LENGTH OF REPLY EXPECTED\n.IN0600  ANOP\n         DC    CL&FL&DATA\n         MEND\n*--------------------------------------------------------------------*\n*        $KEYS   MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n         $KEYS\n         GBLB  &KEYDEF\n         AIF   (&KEYDEF).MEX2\n&KEYDEF  SETB  1\nPFKEY01  EQU   X'F1'                   EQUATE FOR PFKEY01\nPFKEY02  EQU   X'F2'                   EQUATE FOR PFKEY02\nPFKEY03  EQU   X'F3'                   EQUATE FOR PFKEY03\nPFKEY04  EQU   X'F4'                   EQUATE FOR PFKEY04\nPFKEY05  EQU   X'F5'                   EQUATE FOR PFKEY05\nPFKEY06  EQU   X'F6'                   EQUATE FOR PFKEY06\nPFKEY07  EQU   X'F7'                   EQUATE FOR PFKEY07\nPFKEY08  EQU   X'F8'                   EQUATE FOR PFKEY08\nPFKEY09  EQU   X'F9'                   EQUATE FOR PFKEY09\nPFKEY10  EQU   X'7A'                   EQUATE FOR PFKEY10\nPFKEY11  EQU   X'7B'                   EQUATE FOR PFKEY11\nPFKEY12  EQU   X'7C'                   EQUATE FOR PFKEY12\n         SPACE\nPFKEY13  EQU   X'C1'                   EQUATE FOR PFKEY13\nPFKEY14  EQU   X'C2'                   EQUATE FOR PFKEY14\nPFKEY15  EQU   X'C3'                   EQUATE FOR PFKEY15\nPFKEY16  EQU   X'C4'                   EQUATE FOR PFKEY16\nPFKEY17  EQU   X'C5'                   EQUATE FOR PFKEY17\nPFKEY18  EQU   X'C6'                   EQUATE FOR PFKEY18\nPFKEY19  EQU   X'C7'                   EQUATE FOR PFKEY19\nPFKEY20  EQU   X'C8'                   EQUATE FOR PFKEY20\nPFKEY21  EQU   X'C9'                   EQUATE FOR PFKEY21\nPFKEY22  EQU   X'4A'                   EQUATE FOR PFKEY22\nPFKEY23  EQU   X'4B'                   EQUATE FOR PFKEY23\nPFKEY24  EQU   X'4C'                   EQUATE FOR PFKEY24\n         SPACE\nPA1KEY   EQU   X'6C'                   EQUATE FOR PA1KEY\nPA2KEY   EQU   X'6E'                   EQUATE FOR PA2KEY\nPA3KEY   EQU   X'6B'                   EQUATE FOR PA3KEY\nCLEAR    EQU   X'6D'                   EQUATE FOR CLEAR\nENTER    EQU   X'7D'                   EQUATE FOR ENTER\n.MEX2    ANOP\n         MEND\n*--------------------------------------------------------------------*\n*        $FLD    MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n.*\n.*       KMB   CHANGED &ENTS AND &CURSOR AIFS TO NOT USE TRUE/FALSE\n.*\n&FLDNAME $FLD  &OPTN=2,&LENGTH=,&POS=,&LOC=,&FILL=,                    $\n               &ATR=(SKIP),&INITIAL=,&TYPE=,&EQU=,&VALUES=,            $\n               &MODEL='3276-2',&OPERATN=,&BUFFTAB=NO\n         GBLA  &TLEN               ALGREBRAIC WORK FIELD              *\n         GBLA  &ARG                3270 ATTRIBUTE CHAR RESOLUTION     *\n         GBLA  &MTYPE              TYPE REQUEST                       *\n         GBLA  &CURSOR             CURSOR POSITION                    *\n         GBLA  &OPT                PROCESS OPTION INDICATOR           *\n         GBLA  &PREVPOS            PREVIOUS POSITION                  *\n         GBLA  &LINES              NUMBER OF LINES PER PAGE           *\n         GBLA  &COLS               NUMBER OF COLUMNS PER LINE         *\n         GBLC  &MOD1               TYPE OF CRT BEING USED   32XX      *\n         GBLC  &MOD2               MODEL OF CRT BEING USED      -N    *\n         GBLA  &SCRSIZE            TOTAL AREA OF SCREEN               *\n         GBLA  &GLENGTH            FIELD LENGTH                       *\n         GBLA  &EPOS               FIELD ENDING POSITION              *\n         GBLA  &NLOC               CURRENT FIELD LOCATION             *\n         GBLA  &PLOC               PREVIOUS (NEXT) LOCATION           *\n         GBLB  &MAP                FIRST TIME CONDITION SWITCH        *\n         GBLB  &DEFAULT            INITIAL = USER DEFAULT DATA        *\n         GBLB  &DATAIND            DATA FIELD INDICATOR               *\n         GBLB  &PEN                ATR = DET                          *\n         GBLB  &KEYED              ATR = UNPROT                       *\n         GBLB  &IC                 ATR = IC                           *\n         GBLB  &NUMERIC            NUMERIC FIELD INDICATOR\n         GBLB  &SEQ                FIELDS OUT OF SEQUENCE IND         *\n         GBLB  &SKIP               1 IF ATR = SKIP, 0 ALL OTHERS      *\n         GBLB  &PROT               1 IF ATR = PROT, 0 ALL OTHERS      *\n.*       GBLC  &DEVICE             DIVICE TYPE INDICATOR              *\n         GBLC  &FN                 FIELD NAME                         *\n         GBLC  &ATRC               3270 ATTRIBUTE CHARACTER           *\n         LCLA  &REQ                REPLY REQUIRED INDICATOR           *\n         LCLA  &FPOS               FIELD POSITION                     *\n         LCLA  &FLAG               FIELD DESCRIPTOR FLAG              *\n         LCLC  &FILLCHR            FILLER USED INSTEAD OF INITIAL     *\n         GBLC  &GFILL              TYPE=INIT SPECIFICATION OF FILL    *\n         LCLC  &OPER               TYPE OF READ/WRITE OPERATION       *\n         LCLB  &ABORT              ABORT INDICATOR                    *\n         LCLB  &X(10),&XON\n         LCLA  &COUNT,&INDEX,&HIGH,&A,&B,&C\n         LCLA  &Y(10)\n         LCLA  &XAXIS                  X AXIS BUFFER ADDRESS          *\n         LCLA  &YAXIS                  Y AXIS BUFFER ADDRESS          *\n         LCLC  &XCHAR                  X AXIS CHARACTER               *\n         LCLC  &YCHAR                  Y AXIS CHARACTER               *\n         GBLC  &ADDRCHR                ADDRESS CHARACTER STRING       *\n         GBLB  &DOCSW                  DOCUMENTATION PRINT SWITCH     *\n         GBLC  &MAPNAME                NAME OF THIS $FLD MAP          *\n.************************ BUFFER TABLE ENTRIES ************************\n         GBLB  &BUFFTB                 BUFFER ADDRESS TABLE REQUESTED *\n.*       TO CHANGE NUMBER OF ENTRIES, CHANGE THE SUBSCRIPT VALUE      *\n.*             HERE AND THE SETA VALUE FOR &ENTS                      *\n         GBLA  &ENTLEN(256)            BUFFER ENTRY LENGTH - 1        *\n         GBLA  &ENTVCN(256)            NUMBER OF VALUES PER ENTRY     *\n         GBLC  &ENTOFF(256)            BUFFER ENTRY OFFSET            *\n         GBLC  &ENTRBA(256)            BUFFER ENTRY RBA               *\n         GBLC  &ENTVAL(768)            BUFFER ENTRY VALUES 3/ENTRY    *\n         GBLA  &ENTMAX                 MAXIMUM BUFFER ENTRIES         *\n         GBLA  &ENTS                   NUMBER OF BUFFER ENTRIES       *\n         GBLA  &VALCNT                 NUMBER OF TOTAL 'VALUES' ENTRIES\n         LCLA  &LSTCNT                 NUMBER OF ENTRIES PROCESSED    *\n         LCLA  &TCNT1                  WORK COUNTER                   *\n         LCLC  &FNM                    NAME TO BE USED ON DS          *\n.**********************************************************************\n.* *     ANALYZE OPERANDS                                           * *\n.**********************************************************************\n         AIF   (&MAP).IN0100                FIRST TIME THRU ???       @\n         AIF   (T'&TYPE EQ 'O').ERR140      MUST SUPPLY TYPE          *\n         AIF   ('&TYPE' EQ 'INIT').IN0005   MUST SUPPLY INIT FIRST    *\n.ERR140  MNOTE 4,'''INIT'' MUST BE SPECIFIED FOR FIRST INVOCATION OF TH$\n               IS MACRO'                     ERROR IF NOT             *\n.IN0005  ANOP                          HERE AFTER MNOTE               *\n&MAP     SETB  1                        SET ON FIRST TIME THRU        @\n.*       CHANGE THIS SETA IF CHANGING MAXIMUM SUBSCRIPT VALUE         *\n&ENTMAX  SETA  256                      MAXIMUM BUFFER ENTRIES        @\n&VALCNT  SETA  0                        RESET VALUE COUNTER           @\n&MTYPE   SETA  0                        RESET MAY INDICATOR           *\n&PREVPOS SETA  0                        RESET PREVIOUS POS INDICATOR  *\n&SKIP    SETB  1                        INITIALIZE SKIP INDICATOR     *\n&PLOC    SETA  1                        INITIALIZE LOCATION COUNTER   *\n&ADDRCHR SETC  'Z40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F50D1D2D3D4D5D6D7D8D95A$\n               5B5C5D5E5F6061E2E3E4E5E6E7E8E96A6B6C6D6E6FF0F1F2F3F4F5F6$\n               F7F8F97A7B7C7D7E7F'\n.*             THE Z AT THE BEGINNING OF THE TABLE IS TO OFFSET THE   *\n.*       MULTIPLICATION BY 2. THE OFFSET INTO THE TABLE IS BASED ON   *\n.*       AN INITIAL VALUE OF ONE (1) NOT ZERO (0).                    *\n.**********************************************************************\n.MOD000  ANOP                          HERE TO VERIFY CTR             *\n         AIF   (T'&MODEL EQ 'O').ERR160      WAS MODEL SUPPLIED       *\n         AIF   (K'&MODEL LT 6).ERR160       IS ALL OF IT THERE        *\n         AIF   ('&MODEL'(1,1) EQ '''').MOD010 IS IT WITHIN QUOTES     *\n&MOD1    SETC  '&MODEL'(1,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(6,1)             SET UP CRT MODEL             *\n         AGO   .MOD020                      BYPASS FOLLOWING          *\n.MOD010  ANOP                          HERE TO PROCESS QUOTES         *\n&MOD1    SETC  '&MODEL'(2,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(7,1)             SET UP CRT MODEL             *\n.MOD020  AIF   (&MOD1 EQ 3275 OR &MOD1 EQ 3277).MOD030                *\n         AIF   (&MOD1 EQ 3276 OR &MOD1 EQ 3278).MOD040                *\n.ERR180  MNOTE 8,'MODEL=&MODEL NOT ACCEPTABLE TO THIS MACRO'          *\n         MEXIT\n.MOD030  ANOP                          HERE FOR 3275'S                *\n         AIF   (&MOD2 EQ 2).MOD050     LARGE SCREEN                   *\n         AIF   (&MOD2 NE 1).ERR180     NOT SMALL SCREEN               *\n&LINES   SETA  12                      SET ROWS                       *\n&COLS    SETA  40                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD050  ANOP                          HERE FOR 3277'S                *\n&LINES   SETA  24                      SET ROWS                       *\n&COLS    SETA  80                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD040  ANOP                          HERE FOR NEW DEVICES           *\n&COLS    SETA  80                      ALL HAVE 80 COLUMNS            *\n         AIF   (&MOD2 EQ 1).MOD060     SMALL SCREEN CRT               *\n         AIF   (&MOD2 EQ 2).MOD070     LARGE SCREEN CRT               *\n         AIF   (&MOD2 EQ 3).MOD080     BIG SCREEN CRT                 *\n         AIF   (&MOD2 NE 4).ERR180     BIGGIE SCREEN CRT              *\n&LINES   SETA  43                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD060  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  12                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD070  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  24                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD080  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  32                      SET ROWS                       *\n.MOD090  ANOP                          HERE WHEN ROWS & COLS DEFINED  *\n&SCRSIZE SETA  &COLS*&LINES            DEFINE MAXIMUM SCREENSIZE      *\n         AIF   (T'&OPTN EQ 'O').IN0010  IS OPTION GIVEN ???           *\n&OPT     SETA  &OPTN                    YES, SAVE VALUE               *\n.**********************************************************************\n         AGO   .IN0020                  CONTINUE                      *\n.IN0010  ANOP                           SUBSTITUTE OPTION VALUE       *\n&OPT     SETA  2                           DOCUMENTATION ONLY         *\n.**********************************************************************\n.IN0020  ANOP                           TEST IF DOCUMENTATION REQ.    *\n         AIF   (T'&FILL EQ 'O').IN0030  IS OPTION GIVEN ???           *\n&GFILL   SETC  '&FILL'                  SET FILL CHARACTER\n.IN0030  ANOP\n***********************************************************************\n MNOTE *,'        OPTIONS IN EFFECT-----------    '\n MNOTE *,'                                        '\n MNOTE *,'                 ROWS........ &LINES    '\n MNOTE *,'                 COLUMNS..... &COLS     '\n MNOTE *,'                 CHARACTERS.. &SCRSIZE  '\n***********************************************************************\n         SPACE\n         AIF   (&DOCSW).IN0050     HAS DOCUMENTATION PRINTED ONCE?    *\n&DOCSW   SETB  1                   SET DOCUMEMTATION PRINTED FLAG     *\n***********************************************************************\n*     MAP GENERATION PARAMETERS, THEIR USE AND DEFAULTS               *\n*                                                                     *\n*     INITIAL ENTRY (MUST BE GIVEN TO SET VARIOUS OPTIONS)            *\n*                                                                     *\n*        MAP   OPTN=1,MODEL='32XX-N',TYPE=INIT,BUFFTAB=XXX            *\n*                                                                     *\n*           MODEL  TO SPECIFY THE TERMINAL TYPE (AND SCREEN SIZE),    *\n*                  THE DEFAULT IS SET TO 24 ROWS, AND 80 COLUMNS PER  *\n*                  ROW. MAXIMUM IS 43 BY 80. THE ACCEPTABLE VALUES    *\n*                  AND THEIR GENERATED SCREEN SIZES ARE AS FOLLOWS:   *\n*                                                                     *\n*      MODEL ROWS COLS CHARS         MODEL ROWS COLS CHARS            *\n*                                   3276-1  12   80    960            *\n*     3275-1  12   40    480        3276-2  24   80   1920            *\n*     3275-2  24   80   1920        3276-3  32   80   2560            *\n*                                   3276-4  43   80   3440            *\n*                                                                     *\n*                                   3278-1  12   80    960            *\n*     3277-1  12   40    480        3278-2  24   80   1920            *\n*     3277-2  24   80   1920        3278-3  32   80   2560            *\n*                                   3278-4  43   80   3440            *\n*                                                                     *\n*           OPTN   THIS PARAMETER IS USED TO SET ONE OF THE           *\n*                  FOLLOWING OPTIONS.......                           *\n*                                                                     *\n*                        OPTN=1  - DOCUMENTATION GENERATION.          *\n*                        OPTN=2  - DOCUMENTATION & DATA DECLARATION.  *\n*                                                                     *\n*              NOTE: (TYPE=INIT AND MODEL=32NN-N MUST BE SPECIFIED TO *\n*                      PREVENT MNOTE ERRORS FOR DOCUMENTATION ONLY.)  *\n*                                                                     *\n*           OPERATN THIS PRAMETER IS USED TO SPECIFY THE TYPE OF      *\n*                   OPERATION TO BE USED. THE ACCEPTABLE VALUES ARE:  *\n*                                                                     *\n*               READ     -  FULL BUFFER READ                          *\n*               READMOD  -  READ MODIFIED FIELDS ONLY                 *\n*                                                                     *\n*               WRITE    -  WRITE / WITHOUT ERASE OPERATION           *\n*               WRITERAS -  WRITE / ERASE ALL FIELDS                  *\n*               WRITERUP -  WRITE / ERASE UNPROTECTED FIELDS ONLY     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        BUFFTAB=XXX      THIS ENTRY MAY BE USED TO GENERATE A TABLE  *\n*               OF ALL USER MODIFIABLE ENTRIES IN THIS MAP. THIS TABLE*\n*               CONTAINS AN ENTRY FOR EACH OF THE FOLLOWING:          *\n*                                                                     *\n*        BUFFER ADDRESS - THE BUFFER ADDRESS OF AS GENERATED BY THIS  *\n*                         MAP. NOTE: ONLY MODIFIABLE FIELDS ARE       *\n*                         PROCESSED.                                  *\n*        OFFSET         - THE OFFSET OF THIS FIELD FROM THE BEGINNING *\n*                         OF THIS FIELD MAP.                          *\n*        LENGTH         - THE LENGTH OF THIS FIELD, LESS ONE BYTE.    *\n*                                                                     *\n*        THE VALID OPTIONS AND WHEN THE ARE USED ARE AS FOLLOWS:      *\n*                                                                     *\n*        NO    -  USED WITH 'TYPE=INIT' TO BYPASS TABLE GENERATION.   *\n*                 THIS IS THE DEFAULT VALUE.                          *\n*        YES   -  USED WITH 'TYPE=INIT' TO REQUEST TABLE GENERATION.  *\n*                                                                     *\n*              ADDITIONALLY, YOU MAY SPECIFY PARAMETERS TO BE         *\n*        INCLUDED IN THE GENERATION OF THIS TABLE. THEY MAY BE PASSED *\n*        VIA THE PARAMETER 'VALUES'. AN EXAMPLE OF HOW THIS PARAMETER *\n*        IS USED IS DISPLAYED BELOW. NOTE: TWO RESTRICTIONS EXIST.    *\n*        THEY ARE: 1) A MAXIMUM OF THREE ENTRIES ARE ALLOWED PER $FLD *\n*        SPECIFICATION, AND 2) THIS VALUE IS ALLOWABLE ONLY ON FIELDS *\n*        THAT ARE FLAGGED AS MODIFIABLE BY THE USER. ALSO, YOU ARE    *\n*        RESPONSIBLE FOR MAINTAINING ALIGNMENT. THE BASIC TABLE IS SIX*\n*        (6) BYTES LONG AND IS INITIATED ON A FULLWORD BOUNDARY.      *\n*                                                                     *\n*      FSTART  $FLD   TYPE=INIT,BUFFTAB=YES                           *\n*      FIELD1  $FLD   POS=(10,30),INITIAL='.....',ATR=IC,             *\n*                     VALUES=(X'01',X'4E',A(PARAM))                   *\n*      FTABLE  $FLD   TYPE=FINAL                                      *\n*                                                                     *\n*        THIS WOULD GENERATE A BUFFER ADDRESS TABLE AS FOLLOWS:       *\n*                                                                     *\n*FTABLE  DS    0F                                                     *\n*        DC    XL2'4B6E'               BUFF ADDR OF CURRENT ENTRY     *\n*        DC    AL2(FIELD1-FSTART)      OFFSET TO CURRENT ENTRY        *\n*        DC    AL2(4)                  LENGTH OF CURRENT ENTRY - 1    *\n*        DC    X'01'                   VALUES PARAMETER               *\n*        DC    X'4E'                   VALUES PARAMETER               *\n*        DC    A(PARAM)                VALUES PARAMETER               *\n*                                                                     *\n*        NOTE: THIS TABLE IS A MULTIPLE OF 4 BYTES. (USER CONTROLLED) *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*     FIELD LAYOUT ENTRIES (ONE PER FIELD)                            *\n*                                                                     *\n*        $FLD  POS=(10,1),ATR=(SKIP),INITIAL='A',LOC=NNN,TYPE=REQ     *\n*                                    LENGTH=1                         *\n*                                                                     *\n*           POS    TO SPECIFY ROW AND COLUMN NUMBERS. TRY NOT TO      *\n*                  USE ROW 24, IT IS USED BY THE SYSTEM.              *\n*                                                                     *\n*           ATR    THIS PARAMETER IS USED TO DEFINE THE DATA FIELD    *\n*                  ATTRIBUTE CHARACTERISTICS.                         *\n*                                                                     *\n* ATR=(SKIP)  PROTECTED FIELD       *  ATR=(BRT)  HIGH INTENSITY FIELD*\n* ATR=(PROT)  PROTECTED FIELD       *  ATR=(DRK)  NON-DISPLAY FIELD   *\n* ATR=(UNPR)  MODIFIABLE FIELD      *  ATR=(MDT)  MODIFIED DATA TAG ON*\n* ATR=(NUM)   NUMERIC DATA ONLY     *  ATR=(IC)   INSERT CURSOR       *\n* ATR=(DET)   LIGHT PEN DETECTALBE  *  ATR=(NORM) NORMAL INTENSITY    *\n*                                                                     *\n*             DO NOT USE THE FOLLOWING COMBINATIONS.......            *\n*           ATR=(SKIP,UNPR)                 ATR=(DRK,NORM)            *\n*           ATR=(PROT,UNPR)                 ATR=(SKIP,IC)             *\n*           ATR=(DET,DRK)                   ATR=(PROT,IC)             *\n*           ATR=(BRT,DRK)                   ATR=(PROT,NUM)            *\n*           ATR=(BRT,NORM)                                            *\n*                                                                     *\n*           LENGTH TO SPECIFY LENGTH OF FIELD WHEN 'INITIAL' IS       *\n*                  NOT GIVEN. DO NOT USE WHEN INITIAL VALUE IS        *\n*                  GIVEN.                                             *\n*           INITIAL USED TO DECLARE CONSTANT SCREEN DATA. THIS        *\n*                  SHOULD ALWAYS BE USED TO SHOW THE TYPE OF DATA     *\n*                  TO BE DISPLAYED.                                   *\n*           LOC    THIS PARAMETER IS USED TO DEFINE THE RELATIVE      *\n*                  LOCATION OF THE DATA FIELD WITHIN THE USER AREA.   *\n*                  DO NOT SPECIFY ON ANY OTHER THAN INPUT DATA.       *\n*           TYPE   TYPE=INIT IS REQUIRED FIRST TIME THRU TO SET UP    *\n*                  INITIAL VALUES AND DOCUMENTATION PRINT.            *\n*                  TYPE=FINAL IS NEEDED TO TERMINATE THE CURRENT      *\n*                  MAP AND TO INSERT ANY CURSOR SPECIFIED.            *\n*                                                                     *\n*      FTABLE  $FLD   TYPE=FINAL,EQU=XXXXXX                           *\n*                                                                     *\n*        TYPE=FINAL  CAUSES THE INSERT CURSOR STRING TO BE PLACED     *\n*                    AT THE END OF THE FIELD DEFINITION. THIS POSITION*\n*                    IS REQUIRED FOR TCAM.                            *\n*        EQU=XXXXX   WILL GENERATE AN EQU, WITH XXXXX AS THE NAME,    *\n*                    WITH THE LENGTH OF THIS DISPLAY AS THE VALUE.    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n.IN0050  ANOP\n         AIF   (&OPT EQ 1).MAPXIT          EXIT IF DOCUMENTATION ONLY *\n         AIF   (&OPT EQ 2).IN0055          CONTINUE IF VALID OPTION   *\n         MNOTE 4,'INVALID OPTION SPECIFIED, OPTION=2 ASSUMED'\n.IN0055  ANOP\n         AIF   ('&BUFFTAB'(1,1) EQ 'N').IN0057    BUFFER TABLE REQ?\n         AIF   ('&BUFFTAB'(1,1) NE 'Y').ERR200    IF NOT, ERROR\n&BUFFTB  SETB  1                       YES, INDICATE SO\n&ENTS    SETA  0                       RESET ENTRY COUNT\n.IN0057  ANOP\n.*  &FLDNAME CSECT                                                    *\n         AIF   (T'&FLDNAME EQ 'O').IN0060\n&FN      SETC  '&FLDNAME'              GENERATE DEFAULT NAME\n         AGO   .IN0065\n.IN0060  ANOP\n         AIF   (NOT &BUFFTB).IN0065     BYPASS IF BUFFTAB NOT REQUESTED\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.IN0065  ANOP\n&FN      DS    0F                                                     *\n&FPOS    SETA  4\n&MAPNAME SETC  '&FN'                   SAVE MAP NAME\n         AIF   (T'&OPERATN EQ 'O').MAPXIT    IF OMITTED, BYPASS REST  *\n         AIF   ('&OPERATN'(1,4) EQ 'READ').IN0080  GO TO READ         *\n         AIF   ('&OPERATN'(1,5) EQ 'WRITE').IN0070  CHECK TYPE        *\n         MNOTE 8,'TYPE OF OPERATION SPECIFIED IS UNACCEPTABLE'\n         MEXIT\n.IN0070  ANOP\n         AIF   ('&OPERATN'(5,4) EQ 'ERAS').IN0072  ERASE WRITE        *\n         AIF   ('&OPERATN'(5,4) EQ 'ERUN').IN0074  ERASE UNPROT       *\n&OPER    SETC  'F1'                    DEFAULT TO NORMAL WRITE        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0072  ANOP\n&OPER    SETC  'F5'                    DEFAULT TO WRITE ERASE         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0074  ANOP\n&OPER    SETC  '6F'                    DEFAULT TO ERASE UNPROT        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0080  ANOP                          HERE FOR READ OPERATIONS       *\n         AIF   ('&OPERATN'(5,3) EQ 'MOD').IN0082  READ MODIFY         *\n&OPER    SETC  'F2'                    DEFAULT TO NORMAL READ         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0082  ANOP                          HERE FOR READ MODIFIED         *\n&OPER    SETC  'F6'                    DEFAULT TO READ MODIFIED       *\n.IN0090  ANOP\n         DC    XL3'27&OPER.C1'                                        *\n         AGO   .MAPXIT                  EXIT ON FIRST TIME THRU       *\n.**********************************************************************\n.IN0100  ANOP                           BYPASS AFTER FIRST TIME THRU  *\n         AIF   (&MTYPE EQ 2).ERR010     ERROR IF PREV. ENTRY FINAL    @\n         AIF   (T'&TYPE EQ 'O').IN0110  IS THIS FINAL ENTRY ???       @\n         AIF   ('&TYPE' NE 'FINAL').ERR150   REPLY REQUIRED ???       *\n&MTYPE   SETA  2                        YES, SET INDICATOR            @\n         AGO   .FI0000                  GO PROCESS FINAL ENTRY        @\n.IN0110  ANOP                           SET UP FIELD NAME             @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF LENGTH/INITIAL OPERAND              *\n.**********************************************************************\n         AIF   (T'&LENGTH EQ 'O').LG0010 LENGTH NOT GIVEN             5\n&GLENGTH SETA  &LENGTH                 SET FIELD LENGTH               @\n         AGO   .LG0030                 BYPASS LENGTH SUBSTITUTION     @\n.LG0010  ANOP                          USE LENGTH OF DEFAULT VALUE    @\n         AIF   (T'&INITIAL EQ 'O').LG0020 IF NOT GIVEN DEFAULT TO ONE 5\n         AIF   ('&INITIAL'(1,1) NE '''').ERR070 YES, FIRST CHAR A (') ?\n&GLENGTH SETA  K'&INITIAL-2            DEFAULT TO LENGTH OF LITERAL   @\n&DEFAULT SETB  1                        YES, SET DEFAULT GLOBAL       @\n         AGO   .LG0030                 END OF LENGTH GENERATION       5\n.LG0020  ANOP                          LENGTH DEFAULT SETUP           5\n&GLENGTH SETA  1                       DEFAULT TO LENGTH OF ONE       @\n.LG0030  ANOP                          VALIDATE LENGTH VALUE ASSIGNED 5\n.*       AIF   (&GLENGTH GT 256).ERR020 TOO LONG   DELETED BY LGN 7906*\n         AIF   (&GLENGTH LT 1).ERR020  NOT LONG ENOUGH                @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF FILL OPERAND                        *\n.**********************************************************************\n         AIF   (T'&FILL NE 'O').FILL10  IS OPTION GIVEN ???           *\n&FILLCHR SETC  '&GFILL'                 SET FILL CHARACTER\n         AGO   .FILL20\n.FILL10  ANOP\n&FILLCHR SETC  '&FILL'                  SET FILL CHARACTER\n.FILL20  ANOP\n.PO0000  ANOP                          END OF FIELD LENGTH PARAMETER  @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF POS OPERAND                         *\n.**********************************************************************\n         AIF   (T'&POS EQ 'O').ERR030  IS POS = NULL ?                @\n&FPOS    SETA  &POS(1)                                                @\n         AIF   (N'&POS LT 2).PO0020    ACTUAL POSITIONS SPECIFIED ??? @\n         AIF   (&POS(1) LT 1 OR &POS(1) GT &LINES).ERR030 LINE VALID ?\n         AIF   (&POS(2) LT 1 OR &POS(2) GT &COLS).ERR030  YES, COL   ?\n&FPOS    SETA  (((&POS(1)-1)*(&COLS))+(&POS(2)-1)) YES, CONVERT IT    @\n         AGO   .PO0030                                                @\n.PO0020  ANOP                                                         @\n         AIF   (&FPOS-&EPOS GT 0).PO0030    WILL FIELD OVERLAP?       *\n         MNOTE 4,'POSITION ADJUSTED TO PREVENT FIELD OVERLAY'         *\n&FPOS    SETA  &EPOS+1                 PREVIOUS ENDING POS + ONE      *\n         AGO   .PO0040                 BYPASS FOLLOWING CODE          *\n.PO0030  ANOP\n         AIF   (&SKIP).PO0040          WAS PREV FIELD ATR = SKIP  ???\n         AIF   (&FPOS-&EPOS EQ 1).PO0040 IF ONLY ONE BYTE --          *\n         DC    X'1D7C'                 CAUSE SKIP FROM LAST FIELD     *\n.PO0040  ANOP                          GAP FIELD GENERATION RETURN PT\n&EPOS    SETA  (&FPOS+&GLENGTH)             CALCULATE ENDING POSITION *\n         AIF   (&SCRSIZE LT &EPOS).ERR080 OUTSIDE OF PAGE ?           *\n.PO0060  ANOP                         NO, END OF POSITION OPERAND     @\n         AIF   (&FPOS GE &PREVPOS).PO0070  ARE FIELDS IN SEQUENCE ?   @\n&SEQ     SETB  1                      NO, SET OUT OF SEQUENCE IND     @\n         AGO   .ERR170                THEN TERMINATE THIS EXPANSION   @\n.PO0070  ANOP                         YES, BYPASS OUT OF SEQ IND      @\n&PREVPOS SETA  &FPOS                  SET NEW PREVIOUS POSITION       @\n.AT0000  ANOP                      END OF POSITION AND SEQUENCE CHECK @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF  ATR  OPERAND                       *\n.**********************************************************************\n&ATRC    SETC  '40'                INITIALIZE 3270 ATTRIBUTE CHAR     @\n&SKIP    SETB  0                   RESET SKIP OPTION                  @\n&PROT    SETB  0                   RESET PROT OPTION                  @\n&INDEX   SETA  1\n&HIGH    SETA  10\n&IC      SETB  0\n&ARG     SETA  0\n         AIF   (T'&ATR EQ 'O').AT0040\n.AT0010  ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT &HIGH).ERR100\n         AIF   ('&ATR(&INDEX)'(1,2) EQ '**SKIPROUNPNUMDETBRTDRKMDTIC NO*\n               R'(3*&COUNT,2)).AT0030\n         AGO   .AT0010\n.AT0020  ANOP\n         AIF   (&INDEX EQ N'&ATR).AT0050\n&INDEX   SETA  &INDEX+1\n&COUNT   SETA  0\n         AGO   .AT0010\n.*\n.*  SET X MATRIX FOR CHARACTER DISPLACEMENT.\n.*\n.AT0030  ANOP\n&XON     SETB  1\n&X(&COUNT) SETB 1\n&Y(&COUNT) SETA &INDEX\n         AGO   .AT0020\n.AT0040  ANOP\n&X(1)    SETB  1\n&XON     SETB  1\n.*\n.*  ANALYZE THE MATRIX\n.*\n.AT0050  ANOP\n         AIF   (&XON).AT0060\n&X(1)    SETB  1\n.AT0060  ANOP\n.*\n.*  OUTPUT ANALYSIS.\n.*\n&A       SETA  1                       SKIP\n&B       SETA  3                       UNPROTECTED\n         AIF   (&X(1) AND &X(3)).ERR110  SKIP/UNPROTECTED ???\n&A       SETA  2                       PROTECT\n         AIF   (&X(2) AND &X(3)).ERR110  PROTECTED/UNPROTECTED\n&A       SETA  5                       SELECTER PEN DETECTABLE\n&B       SETA  7                       DARK (NON-DETECTABLE)\n         AIF   (&X(5) AND &X(7)).ERR110  DETECTABLE/DARK ???\n&A       SETA  6                       BRIGHT\n         AIF   (&X(6) AND &X(7)).ERR110  BRIGHT/DARK ???\n&B       SETA  10                      NORMAL\n         AIF   (&X(6) AND &X(10)).ERR110  BRIGHT/NORMAL ???\n&A       SETA  7                       DARK\n         AIF   (&X(7) AND &X(10)).ERR110    DARK/NORMAL ???\n         AIF   (&X(1) AND &X(9)).ERR120     SKIP/IC ???\n         AIF   (&X(2) AND &X(9)).ERR120     PROT/IC ???\n         AIF   (&X(2) AND &X(4)).ERR130     PROT/NUM ???\n.*\n.*  SET ATTRIBUTE BITS\n.*\n.AT0070  ANOP\n&NUMERIC SETB  (&X(4))             SET NUMERIC FIELD INDICATOR\n&X(2)    SETB  (&X(1) OR &X(2))    PROT IF SKIP.\n&X(4)    SETB  (&X(1) OR &X(4))    NUM IF SKIP\n&X(5)    SETB  (&X(7) OR (&X(5) AND NOT &X(6))) SET IF DARK OR LGHT PEN\n&X(6)    SETB  (&X(7) OR &X(6))    BRT IF DARK.\n&IC      SETB  (&X(9))             IC IF REQUESTED\n&ARG     SETA  (32*&X(2)+16*&X(4)+4*&X(5)+8*&X(6)+&X(8))\n&KEYED   SETB  (&X(3))             FLAG AS KEYABLE IF UNPROTECTED.\n&PROT    SETB  (&X(2) OR &X(1))    SET TO ONE IF ATR = PROT OR SKIP\n&SKIP    SETB  (&X(1))             SET TO ONE IF ATR = SKIP\n         AGO   .AT0100\n.AT0090  ANOP\n&X(&C)   SETB  0                   CLEAR\n&C       SETA  &C+1                DOWN\n         AIF   (&C LT 11).AT0090   X TABLE.\n         AGO   .AT0070\n.AT0100  ANOP                          END OF ATR ANALYSIS\n         AIF   (T'&FLDNAME EQ 'O').AT0110 FIELD NAME OMITTED          @\n&FN      SETC  '&FLDNAME'(1,8)          USE FIRST 8 CHAR FOR NAME     @\n&DATAIND SETB  ('&FN' NE '')       INDICATE DATA ITEM (LABEL)         @\n         AGO   .AT0120                  BYPASS NEXT TEST              @\n.AT0110  ANOP                           FIELD NAME BYPASS             @\n         AIF   ((NOT &BUFFTB) OR (&SKIP) OR (&PROT)).AT0120\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n         AIF   (NOT &SKIP).AT0110\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.AT0120  ANOP\n.**********************************************************************\n.*       CONVERT THE BINARY  ATR  TO A VALID 3270 TRANSMITTABLE CHAR  *\n.**********************************************************************\n&ATRC    SETC  '&ADDRCHR'((&ARG+1)*2,2) SELECT ATTRIBUTE CHARACTER    *\n.DE0000  ANOP                           END OF ATTRIBUTE CONVERSION   @\n.**********************************************************************\n.*       DATA DECLARATION GENERATION                                  *\n.**********************************************************************\n.LO0000  ANOP                           END OF JUSTIFY PARAMETER      @\n.**********************************************************************\n.*       SET CURRENT OUTPUT FIELD LOCATION COUNTER                    *\n.**********************************************************************\n         AIF   (NOT &DATAIND).LO0020    BYPASS FOR NON DATA FIELDS    *\n         AIF   (T'&LOC EQ 'O').LO0010   LOCATION NOT GIVEN, USE DEFAULT\n&NLOC    SETA  &LOC                     SET CURRENT LOCATION COUNTER  *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n         AGO   .LO0020                  CONTINUE                      *\n.LO0010  ANOP                           DEFAULT TO CURRENT COUNT      *\n&NLOC    SETA  &PLOC                    USE PREVIOUS COUNT            *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n.LO0020  ANOP                           END OF LOCATION COUNT SETUP   *\n         AGO   .GN0010                  GO TO FIELD GENERATION        @\n.GN0000  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE SKIP (END OF LINE) FIELD ENTRY                      *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    CL1'0'              FIELD ATTRIBUTE                    @\n*---------------------------------------------------------------------*\n         AGO   .PO0030\n.GN0010  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE FIELD ENTRY                                         *\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD CHARACTER              *\n         DC    XL1'&ATRC'          FIELD ATTRIBUTE                    *\n         AIF   (NOT &DEFAULT).GN0050  IS INITIAL = DEFAULT DATA ?     @\n&FN      DC    CL&GLENGTH.&INITIAL\n         AGO   .GN0060             GO TO NEXT OPTION                  *\n.GN0050  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n&FN      DS    0CL&GLENGTH\n         DC    &GLENGTH.XL1'&FILLCHR.'\n.GN0060  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n***********************************************************************\n         AIF   (((NOT &KEYED) AND (&CURSOR NE 0)) OR (NOT &IC)).GN0070\n&CURSOR  SETA  &FPOS+1             UPDATE CURSOR POSITION             @\n.GN0070  ANOP                      END OF FIELD GENERATION            @\n         AIF   (((NOT &BUFFTB) AND (NOT &KEYED)) OR (&PROT)).MAPXIT\n&FPOS    SETA  &FPOS+1                 BUMP TO ACTUAL FIELD\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&ENTS    SETA  &ENTS+1                 BUMP ENTRY COUNT\n&ENTRBA(&ENTS)  SETC  '&XCHAR&YCHAR'   SET RBA\n&ENTLEN(&ENTS)  SETA  &GLENGTH-1       SET LENGTH-1\n&ENTOFF(&ENTS)  SETC  '&FN-&MAPNAME'   DEFINE OFFSET FOR ADCON\n&ENTVCN(&ENTS)  SETA  0                INSURE UNUSED IS ZERO\n         AIF    (T'&VALUES EQ 'O').MAPXIT\n.GN0080  ANOP\n         AIF   (&ENTVCN(&ENTS) EQ 3).MAPXIT\n&ENTVCN(&ENTS)  SETA &ENTVCN(&ENTS)+1  BUMP COUNTER\n&VALCNT         SETA &VALCNT+1         BUMP COUNTER\n&ENTVAL(&VALCNT) SETC '&VALUES(&ENTVCN(&ENTS))' MOVE PARAMETER\n         AIF   (&ENTVCN(&ENTS) LT N'&VALUES).GN0080\n.MAPXIT  ANOP                      END OF FIELD GENERATION            @\n&FN      SETC  ''                  INITIALIZE FLDNAME GLOBAL          @\n&DEFAULT SETB  0                   INITIALIZE DEFAULT DATA GLOBAL     @\n&DATAIND SETB  0                   INITIALIZE DATA (FIELD) INDICATOR  @\n&PEN     SETB  0                   INITIALIZE PEN DETECTABLE GLOBL    @\n&IC      SETB  0                   INITIALIZE INSERT CURSOR GLOBAL    @\n&KEYED   SETB  0                   INIT UNPROTECTED FIELD GLOBAL      @\n&NUMERIC SETB  0                   INITIALIZE NUMERIC FIELD GLOBAL    @\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.***     GENERATE FINAL DSECT AND ADDRESS TABLES                    ***\n.**********************************************************************\n.FI0000  ANOP                      FINAL ENTRIES                      @\n         AIF   ((&SKIP) OR (&PROT)).FI0010  WAS PREV FIELD ATR = SKIP *\n&EPOS    SETA  &EPOS+1                 BUMP BY ONE TO MISS PREV FIELD *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD INDICATOR              *\n         DC    XL1'F0'             FIELD ATTRIBUTE\n***********************************************************************\n.FI0010  ANOP                                                         *\n&MAP     SETB  0                        SET OFF AFTER FINAL           @\n.**********************************************************************\n         AIF   (&CURSOR EQ 0).FI0020    NO CURSOR!                KMB\n*              SET CURSOR POSITION                                    *\n&XAXIS   SETA  (&CURSOR/64+1)\n&YAXIS   SETA  (&CURSOR-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&FN      SETC  ''\n         AIF   (T'&FLDNAME EQ 'O').CR0000      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,5)          SET DEFAULT VALUE\n&FNM     SETC  'CSR'                    SET DEFAULT VALUE\n&FN      SETC  '&FN&FNM'                SET DEFAULT VALUE\n.CR0000 ANOP\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n&FN      DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'13'             INSERT CURSOR INDICATOR            *\n&CURSOR  SETA  0                       RESET CURSOR POSITION          *\n***********************************************************************\n.FI0020  ANOP\n         AIF   (T'&EQU EQ 'O').FI0040\n&FN      SETC  '&EQU'\n&FN      EQU   *-&MAPNAME\n.FI0040  ANOP\n         AIF   ((NOT &BUFFTB) OR (&ENTS EQ 0)).MEXIT              KMB\n.**********************************************************************\n         AIF   (T'&FLDNAME NE 'O').FI0100      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,4)          SET DEFAULT VALUE\n&FN      SETC  '&FN&SYSNDX'             SET DEFAULT VALUE\n         AGO   .FI0110                 GO PROCESS NEXT ONE\n.FI0100 ANOP\n&FN      SETC  '&FLDNAME'              USE NAME SPECIFIED INSTEAD\n.FI0110 ANOP\n         EJECT\n***********************************************************************\n*              THIS TABLE IS GENERATED FOR THE USER WHEN A MAP OF ALL *\n*        MODIFIABLE ENTRIES IN A '$FLD' LIST IS REQUIRED. THIS MAP    *\n*        CONTAINS THE FOLLOWING ENTRIES:                              *\n*                                                                     *\n*    XL2(....)       THE BUFFER ADDRESS OF THIS FIELD                 *\n*    AL2(..)         THE OFFSET INTO THE MAP, OF THIS FIELD           *\n*    AL2(..)         THE LENGTH-1 OF THIS FIELD                       *\n*                                                                     *\n***********************************************************************\n         CNOP  2,4                     ALIGN ON HALFWORD BOUND\n         DC    H'&ENTS'                TOTAL NUMBER OF ENTRIES\n&FN      DS    0F                      LISTING OF BUFFER ADDRESS TABLE\n.FI0120 ANOP\n&LSTCNT  SETA  &LSTCNT+1               BUMP ENTRY LSTCNT\n         AIF   ((&LSTCNT GT &ENTS) OR (&LSTCNT GT &ENTMAX)).FIEXIT\n         DC    XL2'&ENTRBA(&LSTCNT)'   BUFF ADDR OF CURRENT ENTRY\n         DC    AL2(&ENTOFF(&LSTCNT))   OFFSET OF CURRENT ENTRY\n         DC    H'&ENTLEN(&LSTCNT)'     LENGTH OF CURRENT ENTRY - 1\n         AIF   (&ENTVCN(&LSTCNT) EQ 0).FI0120\n.FI0130 ANOP\n&TCNT1   SETA  &TCNT1+1\n         DC    &ENTVAL(&TCNT1)         VALUES PARAMETER\n         AIF   (&TCNT1 LT &ENTVCN(&LSTCNT)).FI0130\n         AGO   .FI0120                 GO PROCESS NEXT ONE\n.FIEXIT ANOP\n         MNOTE *,'BEG-FIEXIT'\n&TCNT1   SETA  (K'&FLDNAME)\n         AIF   (&TCNT1 LE 6).FIEX01\n&TCNT1   SETA  6\n.FIEX01  ANOP\n&FILLCHR SETC  '&FN'\n&FN      SETC  '&FILLCHR'(1,&TCNT1)\n&FNM     SETC  'EL'\n&FN      SETC   '&FN&FNM'\n&FN      EQU   ((*-&FILLCHR)/&ENTS)    LENGTH OF EACH ENTRY\n         DC    X'FFFF'                 END OF TABLE\n         SPACE\n&ENTS    SETA  0                       RESET ENTRY COUNT\n***********************************************************************\n.MEXIT   ANOP                          HERE TO EXIT MACRO             *\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.* *     MNOTE STATEMENTS                                           * *\n.**********************************************************************\n.ERR010  ANOP                           TYPE IN ERROR                 @\n         MNOTE 12,'TYPE = FINAL IS PREVIOUSLY SPECIFIED,'             @\n         AGO   .MAPXIT                  TERMINATE                     @\n         MEXIT                     MACRO EXIT                         @\n.ERR020  ANOP                      LENGTH OPERAND ERROR ENTRY         @\n         MNOTE 12,'INVALID LENGTH OPERAND IS SPECIFIED,'              @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID LENGTH OPERAND IS REQUIRED.'\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .MAPXIT                 TERMINATE GENERATION           @\n.ERR030  ANOP                      POS OPERAND ERROR ENTRY            @\n         MNOTE 12,'INVALID POS OPERAND IS SPECIFIED,'                 @\n.ERR055  ANOP                      POS OPERAND MNOTE ENTRY            @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID POS OPERAND IS REQUIRED WITH MAP MACRO.'      @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .AT0000             GO TO POS OPERAND COMPLETION       @\n.ERR070  ANOP                      INITIAL OPERAND ERROR ENTRY        @\n         MNOTE 8,'INVALID INITIAL OPERAND IS SPECIFIED,'              @\n         MNOTE *,'DEFAULT DATA MUST BE ENCLOSED IN QUOTES,'           @\n         MNOTE *,'INITIAL OPERAND IS IGNORED.'                        @\n         AGO   .LG0020             GO TO INITIAL OPERAND BYPASS       @\n.ERR080  ANOP                      FIELD SPECIFICATION ERROR ENTRY    @\n         MNOTE 8,'FIELD IS DEFINED OUTSIDE OF THE SIZE OPERAND'       @\n         MNOTE *,'MACRO REQUEST IS IGNORED.'                          @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .PO0020             GO TO PAGE SIZE BYPASS             @\n.ERR100  ANOP                      ATR PARAMETER ERROR ENTRY\n         MNOTE 4,'INVALID ATTRIBUTE PARAMETER IS SPECIFIED,'\n         MNOTE *,'ATR = &ATR(&INDEX) IS IGNORED.'\n         AGO   .AT0020             GO TO CHECK INDEX\n.ERR110  ANOP                      INCOMPATIBLE ATR OP ERROR\n&A       SETA  &Y(&A)              SET PARAMETER INDEX VALUE\n&B       SETA  &Y(&B)              SET PARAMETER INDEX VALUE\n         MNOTE 4,'&ATR(&A) AND &ATR(&B) ARE INCOMPATIBLE PARAMETERS,'\n         MNOTE *,'ATR = &ATR(&A) IS IGNORED,'\n         MNOTE *,'ATR = &ATR(&B) IS IGNORED,'\n         MNOTE *,'ATR = SKIP IS ASSUMED BY DEFAULT.'\n&X(1)    SETB  1                   SKIP DEFAULT.\n&C       SETA  2                   SET C FOR CLEARING X TABLE.\n         AGO   .AT0090\n.ERR120  ANOP                      ATR = IC ERROR ENTRY\n         MNOTE *,'ATR = IC IS REQUESTED FOR PROTECTED FIELD'\n         AGO   .AT0070\n.ERR130  ANOP                      ATR = PROT AND NUM ERROR\n         MNOTE *,'ATR = PROT AND NUM ALSO IMPLIES THE SKIP PARAMETER'\n         AGO   .AT0070\n.ERR150  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALID TYPE SPECIFIED'                             *\n.ERR160  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MODEL OPERAND IS REQUIRED && MINIMUM LENGTH IS 6'   *\n         MEXIT\n.ERR170  ANOP                          HERE FOR ERROR                 *\n         MNOTE 16,'SEQUENCE ERROR ENCOUNTERED, EXPANSION TERMINATED'  *\n         MEXIT\n.ERR200  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALIB ''BUFFTAB'' SPECIFICATION'                  *\n         MEXIT\n.ERR190  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION'          *\n         MEXIT\n         MEND\n*--------------------------------------------------------------------*\n*        $AUTHON MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n&L       $AUTHON\n&L       LA    R1,=C'AUTH'\n         SVC   $ATH$\n         MEND\n*--------------------------------------------------------------------*\n*        $AUTHOFF MACRO                                              *\n*--------------------------------------------------------------------*\n         MACRO\n&L       $AUTHOFF\n&L       LA    R1,=C'NONE'\n         SVC   $ATH$\n         MEND\nZAPDSCB  TITLE 'THIS PROGRAM WILL ALLOW THE USER THE ABILITY TO MODIFY A\n                DSCB'\n*--------------------------------------------------------------------*\n*        DON'T KNOW WHO WROTE THIS ORIGINALLY                        *\n*        FULL  SCREEN VTOC ZAPPER.                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\n* CHANGE LOG:                                                        *\n* SAM BASS   (KBASS)                                                 *\n* BMC SOFTWARE INC                                                   *\n* MCLANE CO. INC.                                                    *\n*                                                                    *\n*         KBASS ONLY ALLOW GROUP OF SYS1 TO DO THIS                  *\n* 21DEC94 KBASS ADD OPTCD DISPLAY                                    *\n* 30OCT95 KBASS USE UCBLOOK MACRO TO SUPPORT DYNAMIC DASD            *\n*--------------------------------------------------------------------*\nZAPDSCB  AMODE 31\nZAPDSCB  RMODE 24\nZAPDSCB  CSECT\n         SAVE  (14,12),,ZAPDSCB.&SYSDATE..&SYSTIME.\n         LR    R11,R15                 LOAD PGM'S BASE REG\n         USING ZAPDSCB,R11\n         LA    R14,SAVEAREA            A(MY SAVEAREA)\n         ST    R14,8(,R13)             UPDATE FORWARD POINTER\n         ST    R13,4(,R14)             UPDATE BACKWARD POINTER\n         LR    R13,R14                 AND LOAD MY SAVEAREA BASE\n         USING SAVEAREA,R13,R12            AND DEFINE SAME TO ASSEMBLER\n         LA    R12,2048(,R13)          COMPUTE SECOND\n         LA    R12,2048(,R12)                  BASE REG ADDRESS\n         LR    R2,R1                   SAVE CPPL ADDRESS\n         $AUTHON\n***********************************************************************\n*        INITIALIZE                                                   *\n***********************************************************************\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         SPACE\n***********************************************************************\n*        LOCATE THE USER'S ASCB AND SAVE THE USERID                   *\n***********************************************************************\n         L     R15,PSAAOLD-PSA(00)     A(PSA ASCB)              KBASS\n         L     R15,ASCBASXB-ASCB(R15)  A(ASXB)                  KBASS\n         L     R15,ASXBSENV-ASXB(R15)  A(ASCB)                  KBASS\n         CLC   =C'SYS1',ACEEGRPN-ACEE(R15)    COPY THE USERID   KBASS\n         BNE   BADBOY                                           KBASS\n         MVC   USERID,ACEEUSER-ACEE(R15)    COPY THE USERID     KBASS\n         MVC   DEFCSRAD,DSCBPCSR       SAVE INITIAL CURSOR BUFF ADDR\n         SPACE\n***********************************************************************\n*        INITIATE FULL SCREEN PROCESSING                              *\n***********************************************************************\n         STFSMODE ON,INITIAL=YES       INITIATE FULL SCREEN PROCESSING\n         EJECT\n***********************************************************************\n*        SETUP THE CVAF HEADER AND BUFFER LISTS                       *\n***********************************************************************\n         XC    CVAFBUF(BFLHLN+BFLELN),CVAFBUF       RESET BUFFER HEADER\n         OI    BFLHFL,BFLHDSCB         INDICATE READ DSCB'S\n         MVI   BFLHNOE,1               NUMBER OF BUFFER LIST ENTRIES\n         LA    R15,DS1FMTID            A(DSCB DATA AREA)\n         ST    R15,BFLEBUF                 AND UPDATE BUFFER LIST\n         MVI   BFLELTH,LDSCB-44        LENGTH OF DATA AREA (DSCB-44)\n         SPACE\n***********************************************************************\n*        COPY THE DATA SET NAME FROM THE COMMAND BUFFER TO THE DATA   *\n* SET NAME FIELD ON THE PANEL ADDING THE USER ID, IF NECESSARY        *\n***********************************************************************\n         L     R2,CPPLCBUF-CPPL(R2)    LOAD COMMAND BUFFER ADDRESS\n         SLR   R3,R3                   CLEAR WORK REGISTER\n         SLR   R4,R4                   CLEAR WORK REGISTER\n         ICM   R3,B'0011',0(R2)        LENGTH OF COMMAND BUFFER\n         ICM   R4,B'0011',2(R2)        OFFSET TO FIRST OPERAND\n         SR    R3,R4                   COMPUTE LENGTH OF OPERAND\n         SPACE\n         SH    R3,=H'04'                   AND DECREMENT FOR LENGTH FLD\n         BP    CPPL010                 DATA SET NAME SUPPLIED?\n         LA    R15,DSNAMEER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                    GO PROCESS ERROR MESSAGE\n         SPACE\nCPPL010  DS    0H\n         CH    R3,=H'46'               LENGTH GREATER THAN MAX?\n         BNH   CPPL020                     NO, BYPASS DEFAULT\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         B     PROCEMSG                    YES, GENERATE ERROR MESSAGE\n         SPACE\nCPPL020  DS    0H\n         STH   R3,LDSNAME                  SAVE LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR EXECUTE\n         LA    R4,4(R2,R4)             ADDRESS DATA SET NAME\n         EX    R3,EXOCINPT             CONVERT TO UPPER CASE\n         EJECT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R15,PDSNAME             A(PANEL DSNAME)\n         LA    R14,DS1DSNAM            A(DSCB DSNAME)\n         CLI   0(R4),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   NOQUOTES                    NO, DO NOT PROCESS QUOTES\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         LA    R4,1(,R4)                   YES, BYPASS FIRST QUOTE\n         BCTR  R3,00                       DECREMENT FOR FIRST QUOTE\n         STH   R3,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR LAST QUOTE\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         B     DSNMOVED\n         SPACE\nEXMVCPDS OC    0(0,R15),0(R4)          MOVE IN DATA SET NAME\nEXMVCDS1 OC    0(0,R14),0(R4)          MOVE IN DATA SET NAME\nPDSUSERI MVC   0(0,R15),USERIDI        MOVE IN USERID\nDS1USERI MVC   0(0,R14),USERIDI        MOVE IN USERID\nEXOCINPT OC    0(0,R4),ALLBLANK        EXECUTED OC\n         SPACE\nNOQUOTES DS    0H\n         SLR   R1,R1                   CLEAR WORK REG\n         IC    R1,USERIDL              AL2(LENGTH OF USERID)\n         SPACE\n         LA    R5,2(,R1)               USERID + DELIMITER + BCTR OFFSET\n         AR    R5,R3                       + LENGTH OF DSNAME\n         STH   R5,LDSNAME              SAVE COMPUTED LENGTH OF DSNAME\n         CH    R5,=H'46'               IS DSNAME GT FIELD LENGTH?\n         BNH   DSN010                      NO, CONTINUE PROCESSING\n         LA    R15,DSNLNGER                YES, PROVIDE FOR ERROR MSG\n         B     PROCEMSG                      AND DISPLAY SAME\n         SPACE\nDSN010   DS    0H\n         BCTR  R1,0                        DECREMENT FOR EXECUTE\n         MVI   0(R15),C''''            MOVE IN A QUOTE\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R1,DS1USERI             MOVE USERID TO DSNAME\n         EX    R1,PDSUSERI             MOVE USERID TO DSNAME\n         LA    R14,1(R1,R14)               AND ADJUST FOR SAME\n         LA    R15,1(R1,R15)               AND ADJUST FOR SAME\n         MVI   0(R14),C'.'             MOVE IN A DELIMITER\n         MVI   0(R15),C'.'             MOVE IN A DELIMITER\n         LA    R14,1(,R14)                 AND ADJUST FOR SAME\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         LA    R15,1(R3,R15)               AND ADJUST FOR SAME\n         MVI   0(R15),C''''            MOVE IN A QUOTE\nDSNMOVED DS    0H\n         EJECT\n***********************************************************************\n*        LOCATE THE DATA SET CATALOG ENTRY                            *\n***********************************************************************\nLOCATELP DS    0H                      LOCATE LOOP\n         MVC   LOCWORK(256),ALLZEROS         CLEAR FIRST HALF OF WORK\n         XC    LOCWORK+256(256),ALLZEROS     CLEAR LAST HALF OF WORK\n         MVC   PVOLSER,ALLZEROS        CLEAR VOLSER FIELD\n         LOCATE DSNLOC                 LOCATE DATA SET\n         LTR   R15,R15                 WAS DATA SET FOUND?\n         BZ    LOC010                      YES, BYPASS ERROR MESAGE\n         LA    R15,DSNLOCER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\nLOC010   DS    0H\n         MVC   PVOLSER,LOCWORK+6       SAVE VOL SER\n         SPACE\n***********************************************************************\n*        USING THE UCB LOOKUP PROCESS, LOCATE THE UCB ASSOCIATED WITH *\n*  THE VOLUME SERIAL NUMBER RETRIEVED FORM THE LOCATE PROCESS.        *\n***********************************************************************\nUCBLKPLP DS    0H                      UCB LOOKUP LOOP\n         OC    UCBTOKEN,UCBTOKEN                                30OCT95\n         BZ    UCBPIN10                                         30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X\n               MF=(E,XUCBPIN)                                   30OCT95\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         MODESET MODE=PROB                                      30OCT95\nUCBPIN10 DS    0H                                               30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBLOOK VOLSER=PVOLSER,UCBPTR=UCBADDR,                 30OCT95X\n               PIN,                                             30OCT95X\n               PTOKEN=UCBTOKEN,                                 30OCT95X\n               TEXT==CL58'ZAPDSCB IN PROGESS',                  30OCT95X\n               DYNAMIC=YES,RANGE=ALL,LOC=ANY,                   30OCT95X\n               MF=(E,XUCBLOOK)                                  30OCT95\n         LR    R5,R15                  UCB ADDR RETURNED?       30OCT95\n         MODESET MODE=PROB                                      30OCT95\n         LTR   R15,R5                  UCB ADDR RETURNED?       30OCT95\n         BZ    CHECKUCB                 NO, ERROR               30OCT95\n         SPACE 1                                                30OCT95\nUCBMSG   DS    0H                                               30OCT95\n         LA    R15,UCBERMSG            A(VOL SER MISSING ERROR MESSAGE)\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\n         SPACE\n         USING UCBOB,15\nCHECKUCB DS    0H                      CHECK FOR MATCHING VOLSER\n         L     R15,UCBADDR             A(UCB ADDRESS)           30OCT95\n         CLC   PVOLSER,UCBVOLI         MATCHING VOLSER?\n         BNE   UCBMSG                   NO, ERROR               30OCT95\n         SPACE\n         OI    MISCFLAG,NSHARED        DEFAULT TO NON-SHARED DASD\n         TM    UCBTBYT2,UCBRR          IS IT ACTUALLY SHARED?\n         BZ    UCB010                      NO, BYPASS RESET\n         NI    MISCFLAG,255-NSHARED        YES, RESET NON-SHARED FLAG\nUCB010   DS    0H\n         DROP  15\n         EJECT\n***********************************************************************\n*        DETERMINE WHAT TYPE OF ENQ TO USE.  SYSTEM OR SYSTEMS        *\n***********************************************************************\n         LA    R1,MODELENQ             A('SYSTEM' ENQ LIST)\n         TM    MISCFLAG,NSHARED        IS DASD DEVICE SHARED?\n         BO    ENQ010                      NO, USED DEFAULT ADDRESS\n         LA    R1,MODESENQ             A('SYSTEMS' ENQ LIST)\nENQ010   DS    0H\n         LA    R2,DS1DSNAM             A(RNAME FOR ENQ)\n         LH    R3,LDSNAME              LOAD LENGTH OF DSNAME\n         SPACE\n***********************************************************************\n*        DETERMINE IF THE DATA SET IS AVAILABLE.                      *\n***********************************************************************\n         NI    MISCFLAG,255-ENQUEUE    RESET ENQUEUE BIT\n         ENQ   (,(R2),,(R3),),MF=(E,(1))\n         SPACE\n         LTR   R15,R15                 IS RESOURCE AVAILABLE?\n         BZ    ENQ020                      YES, PROCESS DATA SET\n         OI    MISCFLAG,ENQUEUE            NO, INDICATE SAME\nENQ020   DS    0H\n***********************************************************************\n*        READ THE DSCB INTO STORAGE                                   *\n***********************************************************************\n         L     R2,UCBADDR              LOAD UCB ADDRESS\n         CVAFDIR ACCESS=READ,UCB=(R2),MF=(E,CVAFREQ),BRANCH=(YES,PGM), $\n               BUFLIST=CVAFBUF\n         LTR   R15,R15                 WAS READ SUCCESSFUL?\n         BZ    CREATDTE                    YES, PROCESS DSCB\n         B     CVAFPROC                    NO, PROCESSER ERROR RETURN\n         EJECT\n***********************************************************************\n*        COPY DATE FIELDS INTO THE PANEL                              *\n***********************************************************************\nCREATDTE SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1CREDT            INSERT YEAR\n         CVD   R15,DWORD                AND CONVERT TO DECIMAL\n         LTR   R15,R15             Y2K HAS IT BEEN INITIALIZED  MCLANE\n         BNP   CREDT01             Y2K  NOPE\n         AP    DWORD,=P'1900'      Y2K                          MCLANE\nCREDT01  DS    0H                  Y2K                          MCLANE\n         OI    DWORD+7,15               INSURE PRINTABLE SIGN\n         UNPK  PCREDT(4),DWORD+5(3) Y2K AND MOVE TO TARGET FIELDMCLANE\n         ICM   R15,B'0011',DS1CREDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PCREDT+4(3),DWORD   Y2K     AND MOVE TO TARGET   MCLANE\n         SPACE\nREFDATE  SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1REFD             INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         LTR   R15,R15             Y2K HAS IT BEEN INITIALIZED  MCLANE\n         BNP   REFDT01             Y2K  NOPE\n         AP    DWORD,=P'1900'      Y2K                          MCLANE\nREFDT01  DS    0H                  Y2K                          MCLANE\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD(4),DWORD+5(3) Y2K     AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1REFD+1   INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD+4(3),DWORD    Y2K     AND MOVE TO TARGET   MCLANE\n         SPACE\nEXPIRDAT SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1EXPDT            INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         LTR   R15,R15             Y2K HAS IT BEEN INITIALIZED  MCLANE\n         BNP   EXPIR01             Y2K  NOPE\n         AP    DWORD,=P'1900'      Y2K                          MCLANE\nEXPIR01  DS    0H                  Y2K                          MCLANE\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT(4),DWORD+5(3) 72K    AND MOVE TO TARGET   MCLANE\n         ICM   R15,B'0011',DS1EXPDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT+4(3),DWORD   Y2K     AND MOVE TO TARGET   MCLANE\n         EJECT\n***********************************************************************\n*        COPY DSORG INTO PANEL                                        *\n***********************************************************************\n         MVC   PDSORG,ALLZEROS         CLEAR FIELD\n         TM    DS1DSORG,DS1DSGIS       INDEXED SEQUENTIAL?\n         BZ    DSORG010                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'IS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG010 TM    DS1DSORG,DS1DSGPS       PHYSICAL SEQUENTIAL?\n         BZ    DSORG020                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG020 TM    DS1DSORG,DS1DSGDA       DIRECT ORGANIZATION?\n         BZ    DSORG030                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'DA'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG030 TM    DS1DSORG,DS1DSGPO       PARTITIONED ORGANIZATION?\n         BZ    DSORG040                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PO'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG040 TM    DS1DSORG+1,DS1ORGAM     VSAM?\n         BZ    TESTUNMV                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'AM'            YES, INDICATE SAME\nTESTUNMV DS    0H\n         TM    DS1DSORG,DS1DSGU        UNMOVEABLE DATA SET?\n         BZ    DSORG060                    NO, BYPASS MOVE\n         MVI   PDSORG+2,C'U'               YES, INDICATE SAME\nDSORG060 DS    0H\n         EJECT\n***********************************************************************\n*        COPY RECFM TO PANEL                                          *\n***********************************************************************\n         MVC   PRECFM,ALLZEROS         CLEAR FIELD\n         TM    DS1RECFM,DS1RECFU       UNDEFINED LENGTH RECORDS?\n         BNO   RECFM010                    NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'U'                 YES,INDICATE SAME\n         B     PROCLREC                    GO PROCESS LRECL\nRECFM010 TM    DS1RECFM,DS1RECFF       FIXED LENGTH RECORDS?\n         BZ    RECFM020                    NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'F'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\nRECFM020 TM    DS1RECFM,DS1RECFV       VARIABLE LENGTH RECORDS?\n         BZ    CHCKBLCK                    NO\n         MVI   PRECFM,C'V'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\nCHCKBLCK DS    0H\n         LA    R14,PRECFM+1            LOAD TARGET ADDRESS\n         TM    DS1RECFM,DS1RECFB       BLOCKED RECORDS?\n         BZ    RECFM030                    NO, CHECK SPANNED/STANDARD\n         MVI   0(R14),C'B'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\nRECFM030 TM    DS1RECFM,DS1RECFS       SPANNED/STANDARD?\n         BZ    RECFM040                    NO, PROCESS PRINT CC\n         MVI   0(R14),C'S'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\nRECFM040 TM    DS1RECFM,DS1RECFA       ANSI CONTROL CHARS?\n         BZ    RECFM050                    NO, PROCESS PRINT CC\n         MVI   0(R14),C'A'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\n         B     PROCLREC\nRECFM050 TM    DS1RECFM,DS1RECMC       MACHINE CONTROL CHARS?\n         BZ    RECFM060                    NO, PROCESS LRECL\n         MVI   0(R14),C'M'                 YES, INDICATE SAME\nRECFM060 DS    0H\n         EJECT\n***********************************************************************\n*        COPY LRECL, BLOCKSIZE, KEY LENGTH AND RKP TO PANEL           *\n***********************************************************************\nPROCLREC DS    0H\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         ICM   R15,B'0011',DS1LRECL    LOAD THE LRECL\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PLRECL,DWORD                AND MOVE TO TARGET\n         SPACE\n         ICM   R15,B'0011',DS1BLKL     LOAD THE BLOCK SIZE\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15              INSURE PROPER SIGN\n         UNPK  PBLKL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         IC    R15,DS1KEYL             LOAD THE KEY LENGTH\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PKEYL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         ICM   R15,B'0011',DS1RKP      LOAD THE RELATIVE KEY POSITION\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PRKP,DWORD                  AND MOVE TO TARGET FIELD\n         SPACE\n***********************************************************************\n*        COPY LAST USED TRACK AND BLOCK INTO PANEL                    *\n***********************************************************************\n         ICM   R15,B'1110',DS1LSTAR    LOAD LSTAR INTO REG\n         LA    R1,6                    BYTES TO PROCESS\n         LA    R2,PLSTAR               A(TARGET FIELD)\nLSTARLP  DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LSTARLP              LOOP FOR NEXT FOUR BITS\n         TR    PLSTAR,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY TRACK BALANCE INTO PANEL                                *\n***********************************************************************\n         ICM   R15,B'1100',DS1TRBAL    LOAD LSTAR INTO REG\n         LA    R1,4                    BYTES TO PROCESS\n         LA    R2,PTRBAL               A(TARGET FIELD)\nLTRBAL   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LTRBAL               LOOP FOR NEXT FOUR BITS\n         TR    PTRBAL,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY SMS INDICATORS INTO PANEL                               *\n***********************************************************************\n         ICM   R15,B'1000',DS1SMSFG    LOAD SMS INDICATORS\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,PSMSIND              A(TARGET FIELD)\nLSMSIND  DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LSMSIND              LOOP FOR NEXT FOUR BITS\n         TR    PSMSIND,TRTAB           TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY DATA SET INDICATORS INTO PANEL                          *\n***********************************************************************\n         ICM   R15,B'1000',DS1DSIND    LOAD DS INDICATORS\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,PDSIND               A(TARGET FIELD)\nLDSIND   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LDSIND               LOOP FOR NEXT FOUR BITS\n         TR    PDSIND,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY OPTCD    INDICATORS INTO PANEL                          *\n***********************************************************************\n         ICM   R15,B'1000',DS1OPTCD    LOAD OPTCD\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,OPTCDE               A(TARGET FIELD)\nLOPTCD   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LOPTCD               LOOP FOR NEXT FOUR BITS\n         TR    OPTCDE,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY SECONDARY ALLOCATION INFO INTO PANEL                    *\n***********************************************************************\n         TM    DS1SCAL1,DS1CYL         IS IT CYLINDER ALLOCATION?\n         BNO   SEC0010                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'C'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0010  TM    DS1SCAL1,DS1TRK         IS IT TRACK ALLOCATION?\n         BNO   SEC0020                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'T'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0020  TM    DS1SCAL1,DS1AVR         IS IT BLOCK ALLOCATION?\n         BNO   SEC0030                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'B'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0030  TM    DS1SCAL1,DS1AVRND       IS IT BLOCK ROUND ALLOC?\n         BNO   SEC0040                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'R'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0040  TM    DS1SCAL1,255            IS IT ABSOLUTE ALLOCATION?\n         BNZ   SCALLAMT                    NO, PROCESS SECONDARY AMOUNT\n         MVI   PSCAL1,C'A'                 YES, INDICATE SAME\n         SPACE\nSCALLAMT DS    0H\n         SLR   R15,R15                 CLEAR WORK REG\n         ICM   R15,B'0111',DS1SCAL3    INSERT SECONDARY AMOUNT\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PSCAL3,DWORD                AND COPY INTO TARGET AREA\n         TM    MISCFLAG,ENQUEUE        IS DATA SET AVAILABLE?\n         BZ    TPUTPANL                    YES, PROCESS IT\n         LA    R15,ENQERMSG                NO, INFORM TERMINAL OPER\n         SPACE\n***********************************************************************\n*        COPY ERROR MESSAGE ONTO PANEL - R15 ADDRESSES THE ERROR MSG  *\n***********************************************************************\nPROCEMSG DS    0H                      POS, MOVE MESSAGE TO PANEL\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R14,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R2,L'PERRMSG                LENGTH OF SAME\n         LH    R1,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R1,R2                   GREATER THAN MAXIMUM?\n         BNH   MSG010                      NO, CONTINUE\n         LR    R1,R2                       YES, LOAD MAXIMUM LENGTH\nMSG010   DS    0H\n         SR    R2,R1                   COMPUTE REMAINDER\n         BNP   MSG020                  BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R2,1                    DIVIDE BY TWO\n         LA    R14,0(R2,R14)           CENTER ERROR MESSAGE\nMSG020   DS    0H\n         BCTR  R1,00                   DECREMENT FOR EXECUTE\n         EX    R1,MVCERMSG             MOVE ERROR MESSAGE\n         EJECT\n***********************************************************************\n*        DISPLAY PANEL                                                *\n***********************************************************************\nTPUTPANL DS    0H\n         LA    R0,LPDSCBL              A(LENGTH OF PANEL)\n         LA    R1,DSCBPANL             A(DSCB PANEL)\n         TPUT  (1),(0),FULLSCR         WRITE PANEL TO TERMINAL\n         SPACE\n***********************************************************************\n*        RETRIEVE USER'S INPUT                                        *\n***********************************************************************\n         XC    INPUT(256),INPUT              CLEAR FIRST HALF OF WORK\n         XC    INPUT+256(256),INPUT+256      CLEAR LAST HALF OF WORK\n         LA    R0,L'INPUT              A(LENGTH OF INPUT AREA)\n         LA    R1,INPUT                A(INPUT AREA)\n         TGET  (1),(0),ASIS            GET INPUT FROM TERMINAL\n         SPACE\n         CLI   INPUT,PA2KEY            REDISPLAY REQUESTED?\n         BE    TPUTPANL                    YES, REDISPLAY\n         SPACE\n         CLI   INPUT,PFKEY03           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         CLI   INPUT,PFKEY15           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         SPACE\n         MVC   DSCBPCSR,DEFCSRAD       RESET IC TO DEFAULT CUSOR ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR ERROR MESSAGE\n         LR    R5,R1                   SAVE LENGTH OF TGET DATA\n         LA    R4,INPUT                PRELOAD DATA ADDRESS\n         NI    MISCFLAG,NSHARED+ENQUEUE    RESET ALL BUT REQ'D BITS\n         EJECT\n***********************************************************************\n*        PROCESS INPUT KEYED IN BY USER                               *\n*        INPUT REGS:                                                  *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*        OUTPUT REGS:                                                 *\n*              REG 00 CONTAINS THE ACTUAL LENGTH OF KEYED INPUT DATA  *\n*              REG 01 CONTAINS THE ADDRESS OF KEYED INPUT DATA        *\n*              REG 02 CONTAINS THE LENGTH -1 OF KEYED INPUT DATA      *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*              REG 06 CONTAINS THE ADDR OF THE MATCHING BUFFTAB ENTRY *\n*              REG 07 CONTAINS THE LENGTH OF A BUFFTAB ENTRY          *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*        LOCATE NEXT INPUT FIELD, LENGTH AND MATCHING TABLE ENTRY     *\n***********************************************************************\nINPUT000 DS    0H                      HERE TO PROCESS INPUT DATA\n         LA    R6,PDSCBL-2             A(HALFWORD COUNT OF ENTRIES)\n         LA    R7,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R15,TABLE000            A(INPUT DEPROCESSOR)\n         BASR  R14,R15                 PROCESS INPUT DATA\n         B     INPUT200                ALL DATA PROCESSED\n         SPACE\n         LTR   R6,R6                   MATCHING ENTRY?\n         BNZ   INPUT100                YES, PROCESS IT\n*  POSSIBLE ERROR AT THIS POINT  WHAT TO DO, WHAT TO DO?\n         B     INPUT000                NO BUFFTAB ENTRY, PROCESS NEXT\n         SPACE\n***********************************************************************\n*        RESET ATTRIBUTE BYTE TO NORMAL INTENSITY, UNPROTECTED        *\n***********************************************************************\nINPUT100 DS    0H                      HERE TO PROCESS INPUT DATA\n         LH    R15,2(,R6)              LOAD FIELD OFFSET\n         LA    R15,DSCBPANL(R15)           AND ADDRESS FIELD\n         BCTR  R15,00                  BACK UP TO THE ATTRIBUTE\n         NI    0(R15),64               AND OFF HIGHLIGHT ATTRIBUTE\n         SPACE\n***********************************************************************\n*     LOAD A(ROUTINE) TO PROCESS DATA AND BASR. (IF NOT ERASE INPUT)  *\n***********************************************************************\n         LTR   R0,R0                   ERASE EOF INPUT FIELD?\n         BNP   INPUT000                YES, GET NEXT FIELD\n         EX    R2,INPUTOC              INSURE UPPER CASE\n         LH    R15,6(,R6)              Y(OFFSET INTO ROUTINE TBL)\n         SLL   R15,2                       MULTIPLY BY 4\n         L     R15,TABTABLE(R15)       A(ROUTINE TO DEPROCESS INPUT)\n         BASR  R14,R15                     AND CALL SAME\n         B     INPUT000\n         SPACE 2\nINPUTOC  OC    0(0,R1),ALLBLANK        CONVERT TO UPPER CASE\n         EJECT\n***********************************************************************\n*        TEST FOR MODIFIED FILED(S) AND PROCESS ACCORDINGLY           *\n***********************************************************************\nINPUT200 DS    0H                      HERE AFTER END-OF-INPUT\n         TM    MISCFLAG,IPTDSNAM+IPTVOL  EITHER FIELDS MODIFIED?\n         BZ    INPUT300                    NO, CHECK FOR MODIFIED DSCB\n         BAS   R10,RSETATTR                YES, RESET ALL ATTRIBUTES\n         BAS   R10,CVAFRLSE                YES, RELEASE CVAF BUFFERS\n         TM    MISCFLAG,IPTVOL         VOLUME SERIAL MODIFIED?\n         BO    UCBLKPLP                    YES, GO LOOKUP UCB\n         TM    MISCFLAG,IPTDSNAM       DSNAME MODIFIED?\n         BO    LOCATELP                    YES, GO LOCATED DATA SET\nINPUT300 DS    0H\n         TM    MISCFLAG,IPTERROR       WAS THERE AN ERROR?\n         BO    TPUTPANL                    GO DISPLAY A MESSAGE\n         TM    MISCFLAG,DSCBMOD        WAS THE DSCB MODIFIED?\n         LA    R15,WHATTODO                NO, PROMPT TERM OP FOR INPUT\n         BZ    PROCEMSG                    GO DISPLAY A MESSAGE\n***********************************************************************\n*        REWEITE THE DSCB INTO THE VTOC                               *\n***********************************************************************\n         L     R2,UCBADDR              LOAD UCB ADDRESS\n         CVAFDIR ACCESS=WRITE,UCB=(R2),MF=(E,CVAFREQ),BRANCH=(YES,PGM)\n         LTR   R15,R15                 WAS WRITE SUCCESSFUL?\n         BNZ   CVAFPROC                    NO, GO LOAD IN ERROR MESSAGE\n         LA    R15,DSCBMSG1                YES, ADDRESS SUCCESSFUL MSG\n         B     PROCEMSG                REDISPLAY PANEL\n         EJECT\nENDDSNS  DS    0H\n***********************************************************************\n*        TERMINATE FULL SCREEN PROCESSING                             *\n***********************************************************************\n         STLINENO LINE=1               SET NEXT LINE TO 1\n         SPACE\n         STFSMODE OFF                  RESET FROM FULL SCREEN PROCESS\n         SPACE\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\n         BAS   R10,CVAFRLSE            RELEASE CVAF BUFFERS\n         SPACE\n***********************************************************************\n*        TERMINATE PROGRAM                                            *\n***********************************************************************\nRETURN   DS    0H\n         $AUTHOFF\n         L     R13,4(,R13)             RESTORE BACKWARD POINTER\n         RETURN (14,12),T,RC=0\n         SPACE\nBADBOY   DS    0H                                               KBASS\n         TPUT  =CL50'YOU ARE NOT ALLOWED TO USE THIS',50        KBASS\n         B     RETURN                                           KBASS\nMVCERMSG MVC   0(0,R14),2(R15)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET NAME.          *\n*   NOTE: IF A DATA SET NAME IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR VOLSER, WILL BE IGNORED.                  *\n***********************************************************************\nIDSNAME  DS    0H\n         OI    MISCFLAG,IPTDSNAM       INDICATE DSN HAS BEEN INPUT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R10,PDSNAME             A(PANEL DSNAME)\n         LA    R9,DS1DSNAM             A(DSCB DSNAME)\n         CLI   0(R1),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   IDSN100                     NO, DO NOT PROCESS QUOTES\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         LA    R1,1(,R1)                   YES, BYPASS FIRST QUOTE\n         BCTR  R2,00                       DECREMENT FOR FIRST QUOTE\n         STH   R2,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R2,00                       DECREMENT FOR LAST QUOTE\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         BR    R14\nIDSNMVC2 MVC   0(0,R10),0(R1)          MOVE IN DATA SET NAME\nIDSNMVC3 MVC   0(0,R9),0(R1)           MOVE IN DATA SET NAME\nIDSNMVC4 MVC   0(0,R10),USERIDI        MOVE IN USERID\nIDSNMVC5 MVC   0(0,R9),USERIDI         MOVE IN USERID\n         SPACE\nIDSN100  DS    0H\n         SLR   R8,R8                   CLEAR WORK REG\n         IC    R8,USERIDL              AL1(LENGTH OF USERID)\n         SPACE\n         LA    R15,1(,R8)              USERID + DELIMITER\n         AR    R15,R0                      + LENGTH OF DSNAME\n         STH   R15,LDSNAME             SAVE COMPUTED LENGTH OF DSNAME\n         CH    R15,=H'46'              IS DSNAME GT FIELD LENGTH?\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         BH    FLDERROR                    YES, GENERATE ERROR MESSAGE\n         SPACE\n         BCTR  R8,0                        DECREMENT FOR EXECUTE\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R8,IDSNMVC5             MOVE USERID TO DSNAME\n         EX    R8,IDSNMVC4             MOVE USERID TO DSNAME\n         LA    R9,1(R8,R9)                 AND ADJUST FOR SAME\n         LA    R10,1(R8,R10)               AND ADJUST FOR SAME\n         MVI   0(R9),C'.'              MOVE IN A DELIMITER\n         MVI   0(R10),C'.'             MOVE IN A DELIMITER\n         LA    R9,1(,R9)                   AND ADJUST FOR SAME\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         LA    R10,1(R2,R10)               AND ADJUST FOR SAME\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         BR    R14\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A VOLUME SERIAL NUMBER.            *\n*   NOTE: IF A VOLUME SERIAL IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR DATA SET NAME, WILL BE IGNORED.           *\n***********************************************************************\nIVOLSER  DS    0H\n         OI    MISCFLAG,IPTVOL         INDICATE VOLSER ENTERED\n         MVC   PVOLSER,ALLZEROS        CLEAR TARGET FIELD\n         EX    R2,IVOLMVC                  AND MOVE IN VOLSER\n         BR    R14\nIVOLMVC  MVC   PVOLSER(0),0(R1)        EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED CREATION DATE.          *\n***********************************************************************\nICREDT   DS    0H\n         MVC   PCREDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ICREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'7'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(4,R1)       Y2K PACK YEAR                MCLANE\n         CP    DWORD,=P'0000'      Y2K                          MCLANE\n         BE    ICREX1              Y2K                          MCLANE\n         CP    DWORD,=P'1900'      Y2K                          MCLANE\n         BL    ICREX2              Y2K                          MCLANE\n         SP    DWORD,=P'1900'      Y2K                          MCLANE\nICREX1   DS    0H                  Y2K                          MCLANE\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1CREDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,4(3,R1)       Y2K PACK DATE                MCLANE\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1CREDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK CREATION DATE\n         UNPK  PCREDT,DWORD                AND UNPACK INTO FIELD\nICREX2   DS    0H                  Y2K                          MCLANE\n         BR    R14                     RETURN TO CALLER\nICREMVC1 MVC   PCREDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED REFERENCE DATE.         *\n***********************************************************************\nIREFD    DS    0H\n         MVC   PREFD,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IREFMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'7'            Y2K CORRECT LENGTH?          MCLANE\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(4,R1)       Y2K PACK YEAR                MCLANE\n         CP    DWORD,=P'0000'      Y2K                          MCLANE\n         BE    IREFX1              Y2K                          MCLANE\n         CP    DWORD,=P'1900'      Y2K                          MCLANE\n         BL    IREFX2              Y2K                          MCLANE\n         SP    DWORD,=P'1900'      Y2K                          MCLANE\nIREFX1   DS    0H                  Y2K                          MCLANE\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1REFD                 AND SAVE IN TARGET FIELD\n         PACK  DWORD,4(3,R1)       Y2K PACK DATE                MCLANE\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1REFD+1       AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK REFERENCE DATE\n         UNPK  PREFD,DWORD                 AND UNPACK INTO FIELD\nIREFX2   DS    0H                  Y2K                          MCLANE\n         BR    R14                     RETURN TO CALLER\nIREFMVC1 MVC   PREFD(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED EXPIRATION DATE.        *\n***********************************************************************\nIEXPDT   DS    0H\n         MVC   PEXPDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IEXPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'7'            Y2K CORRECT LENGTH?          MCLANE\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(4,R1)       Y2K PACK YEAR                MCLANE\n         CP    DWORD,=P'0000'      Y2K                          MCLANE\n         BE    IEXPX1              Y2K                          MCLANE\n         CP    DWORD,=P'1900'      Y2K                          MCLANE\n         BL    IEXPX2              Y2K                          MCLANE\n         SP    DWORD,=P'1900'      Y2K                          MCLANE\nIEXPX1   DS    0H                  Y2K                          MCLANE\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1EXPDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,4(3,R1)       Y2K PACK DATE                MCLANE\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1EXPDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK EXPIRATION DATE\n         UNPK  PEXPDT,DWORD                AND UNPACK INTO FIELD\nIEXPX2   DS    0H                  Y2K                          MCLANE\n         BR    R14                     RETURN TO CALLER\nIEXPMVC1 MVC   PEXPDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET ORGINAZATION.  *\n***********************************************************************\nIDSORG   DS    0H\n         MVC   PDSORG,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IDSOMVC1             MOVE INTO PANEL\n         CH    R0,=H'2'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BL    FLDERROR                    NO, REDISPLAY SCREEN\n         LA    R8,DSORGTAB             A(DSORG TABLE)\n         LA    R9,DSORGCNT             A(ENTRY COUNT OF SAME)\nIDSORG00 DS    0H\n         CLC   0(2,R8),0(R1)           COMPARE TABLE ENTRY TO INPUT\n         BE    IDSORG10                    IF EQUAL, PROCESS\n         LA    R8,DSORGLNG(,R8)        BUMP TO NEXT ENTRY\n         BCT   R9,IDSORG00                 AND GO CHECK THAT ONE\n         LA    R15,DSORGER1            A(DSORG ERROR MESSAGE)\n         B     FLDERROR\nIDSORG10 DS    0H\n         XC    FWORD,FWORD             CLEAR WORK AREA\n         CH    R0,=H'3'                WAS UNMOVABLE SPECIFIED?\n         BNE   IDSORG20                    NO, BYPASS IT THEN\n         CLI   2(R1),64                IS THIS A BLANK\n         BE    IDSORG20                    YES, NOT UNMOVEABLE\n         CLI   2(R1),C'U'              IS IT UNMOVEABLE?\n         LA    R15,DSORGER1                NO, INDICATE BAD DSORG\n         BNE   FLDERROR                      AND REDISPLAY SCREEN\n         OI    FWORD,DS1DSGU           INDICATE UNMOVEABLE\nIDSORG20 DS    0H\n         XC    DS1DSORG,DS1DSORG       CLEAR DSORG FIELD\n         OC    DS1DSORG,2(R8)          MOVE IN NEW DSORG\n         OC    DS1DSORG,FWORD              AND ADD 'U', IF SUPPLIED\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14\nIDSOMVC1 MVC   PDSORG(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RECORDING FORMAT.       *\n***********************************************************************\nIRECFM   DS    0H\n         MVC   PRECFM,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IRECMVC1             MOVE TO PANEL\n         LR    R10,R0                  A(COUNT OF CHARS IN INPUT)\n         XC    FWORD,FWORD             CLEAR WORK FIELD\nIRECFM00 DS    0H\n         LA    R8,RECFMTAB             A(RECFM TABLE)\n         LA    R9,RECFMCNT             A(ENTRY COUNT OF SAME)\nIRECFM05 DS    0H\n         CLI   0(R1),64                IS THIS A BLANK?\n         BE    IRECFM25                    YES, BYPASS IT THEN\n         SPACE\nIRECFM10 DS    0H\n         CLC   0(1,R8),0(R1)           MATCHING ENTRY?\n         BE    IRECFM20                    YES, PROCESS\n         LA    R8,RECFMLNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,IRECFM10                 AND GO PROCESS IT\n         LA    R15,RECFMER1            A(INVALID RECFM INPUT)\n         B     FLDERROR                    AND GO PROCESS ERROR\nIRECFM20 DS    0H\n         OC    FWORD(1),1(R8)          SAVE THIS BIT\nIRECFM25 DS    0H\n         LA    R1,1(,R1)               BUMP TO NEXT BYTE\n         BCT   R10,IRECFM00            PROCESS NEXT BYTE OF INPUT\n         SPACE\n         LA    R15,RECFMER1            PRELOAD INVALID RECFM INPUT MSG\n         TM    FWORD,DS1RECFU          WAS UNDEFINED SPECIFID?\n         BNO   IRECFM30                NO, BYPASS NEXT TEST\n         TM    FWORD,255-DS1RECFU-DS1RECFA-DS1RECMC     ANY OTHERS?\n         BNZ   FLDERROR                    YES, ERRONOUS INPUT\nIRECFM30 DS    0H\n         OC    FWORD(1),FWORD          TEST FOR ANY INPUT\n         BZ    FLDERROR                    IF ZERO, INDICATE ERROR\n         SPACE\n         XC    DS1RECFM,DS1RECFM       RESET RECORDING FORMAT\n         OC    DS1RECFM,FWORD              AND SET NEW VALUE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRECMVC1 MVC   PRECFM(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LOGICAL RECORD LENGTH.  *\n***********************************************************************\nILRECL   DS    0H\n         MVC   PLRECL,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ILREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK LRECL\n         UNPK  PLRECL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1LRECL        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILREMVC1 MVC   PLRECL(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED BLOCK SIZE.             *\n***********************************************************************\nIBLKL    DS    0H\n         MVC   PBLKL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IBLKMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK BLKL\n         UNPK  PBLKL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1BLKL         AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIBLKMVC1 MVC   PBLKL(0),0(R1)          EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED KEY LENGTH.             *\n***********************************************************************\nIKEYL    DS    0H\n         MVC   PKEYL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IKEYMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK KEYL\n         UNPK  PKEYL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STC   R15,DS1KEYL                 AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIKEYMVC1 MVC   PKEYL(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RELATIVE KEY POSITION.  *\n***********************************************************************\nIRKP     DS    0H\n         MVC   PRKP,ALLZEROS           CLEAR TARGET FIELD\n         EX    R2,IRKPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PRKP,DWORD                  AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1RKP          AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRKPMVC1 MVC   PRKP(0),0(R1)           EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LSTAR.                  *\n***********************************************************************\nILSTAR   DS    0H\n         MVC   PLSTAR,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ILSTMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STCM  R3,B'0111',DS1LSTAR     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILSTMVC1 MVC   PLSTAR(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED TRACK BALANCE.          *\n***********************************************************************\nITRBAL   DS    0H\n         MVC   PTRBAL,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ITRBMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PTRBAL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R3,B'0011',DS1TRBAL     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nITRBMVC1 MVC   PTRBAL(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED SMSIND                  *\n***********************************************************************\nSMSIND   DS    0H\n         MVC   PSMSIND,ALLZEROS        CLERA TARGET FIELD\n         EX    R2,SMSIMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1SMSFG                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nSMSIMVC1 MVC   PSMSIND(0),0(R1)        EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DSIND.                  *\n***********************************************************************\nIDSIND   DS    0H\n         MVC   PDSIND,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,IDSIMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1DSIND                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIDSIMVC1 MVC   PDSIND(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED OPTCD                   *\n***********************************************************************\nIOPTCD   DS    0H\n         MVC   OPTCDE,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,IOPTMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1OPTCD                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIOPTMVC1 MVC   OPTCDE(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC TYPE.            *\n***********************************************************************\nISCALL1  DS    0H\n         MVC   PSCAL1,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC1             MOVE TO PANEL\n         LA    R8,SCAL1TAB             A(TABLE OC ACCEPTABLE VALUES)\n         LA    R9,SCAL1CNT             A(COUNT OF SAME)\nISCALL00 DS    0H\n         CLC   0(1,R8),0(R1)           ENTRIES EQUAL??\n         BE    ISCALL10                    IF EQUAL, PROCESS\n         LA    R8,SCAL1LNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,ISCALL00             PROCESS THIS ENTRY\n         LA    R15,SCALLER             A(ADDRESS ERROR MESSABE)\n         B     FLDERROR\nISCALL10 DS    0H\n         XC    DS1SCAL1,DS1SCAL1       CLEAR ALLOCATION TYPE\n         OC    DS1SCAL1,1(R8)              AND MOVE IN NEW TYPE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC1 MVC   PSCAL1(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC AMOUNT.          *\n***********************************************************************\nISCALL3  DS    0H\n         MVC   PSCAL3,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC2             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK SCALL3\n         UNPK  PSCAL3,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0111',DS1SCAL3        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC2 MVC   PSCAL3(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        CHAR TO HEX CONVERSION ROUTINE                               *\n***********************************************************************\nCONV2HEX DS    0H\n         LR    R8,R1                   LOAD ADDRESS OF SOURCE VALUE\n         LR    R9,R0                   LOAD LOOP COUNTER\n         SLR   R3,R3                   CLEAR TARGET REGISTER\nLOOP2BIN DS    0H\n         SLL   R3,4                    MAKE ROOM FOR NEXT NIBBLE\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,0(0,R8)             INSERT A BYTE\n         N     R15,=F'15'              TURN OFF ALL BUT LAST NIBBLE\n         TM    0(R8),240               IS IT NUMERIC\n         BO    HEX010                      YES, BYPASS ADD HALFWORD\n         AH    R15,=H'9'               ADD 9 IF NOT A NUMBER\nHEX010   DS    0H\n         OR    R3,R15                  STORE IN RESULT\n         LA    R8,1(0,R8)              NEXT TARGET BYTE\n         BCT   R9,LOOP2BIN             PROCEED THROUGH FULLWORD\n         BR    R10                     RETURN TO CALLER\n         SPACE\n***********************************************************************\n*        FIELD ERROR PROCESSING ROUTINE                               *\n*   ON INPUT: R15 = A(ERROR MESSAGE AREA)                             *\n*             ALL OTHER REGISTERS ARE THE SAME AS UPON INPUT TO A     *\n*             FIELD DE-PROCESSING ROUTINE.                            *\n***********************************************************************\nFLDERROR DS    0H\n         TM    MISCFLAG,IPTERROR       MORE THAN ONE ERROR?\n         BO    FLDERR10                    YES, BYPASS MESSAGE MOVE\n         OI    MISCFLAG,IPTERROR           NO, SET ERROR FLAG\n         MVC   DSCBPCSR,0(R6)          ALTER THE IC BUFF ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R10,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R8,L'PERRMSG                LENGTH OF SAME\n         LH    R9,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R9,R8                   GREATER THAN MAXIMUM?\n         BNH   FLD010                      NO, CONTINUE\n         LR    R9,R8                       YES, LOAD MAXIMUM LENGTH\nFLD010   DS    0H\n         SR    R8,R9                   COMPUTE REMAINDER\n         BNP   FLD020                  BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R8,1                    DIVIDE BY TWO\nFLD020   DS    0H\n         LA    R10,0(R8,R10)           CENTER ERROR MESSAGE\n         BCTR  R9,00                   DECREMENT FOR EXECUTE\n         EX    R9,FLDMVC1              MOVE ERROR MESSAGE\n         SPACE\nFLDERR10 DS    0H\n         LH    R8,02(,R6)              LOAD OFFSET TO FIELD\n         LA    R8,DSCBPANL(R8)             AND ADDRESS ACTUAL FIELD\n         BCTR  R8,00                       BACK UP TO ATTRIBUTE BYTE\n         OI    0(R8),X'89'             TURN ON HIGH-INTENS + MDT\n         BR    R14                     RETURN TO MAINLINE\n         TITLE '     TABLE000 -- PROCESS TGET INPUT BUFFER'\n         PUSH  USING\n         DROP  R11                     DROP PREVIOUS BASE REGISTER\n***********************************************************************\n*                                                                     *\n*       THIS ROUTINE WILL PROCESS THE INPUT FROM AN 'ASIS' TGET       *\n*   AGAINST A TABLE OF SBA'S. THE OUTPUT IS THE ADDRESS AND LENGTH    *\n*   OF THE INPUT FIELD AND THE ADDRESS OF THE ENTRY IN THE SBA        *\n*   TABLE WITH THE MATCHING SBA.                                      *\n*       NOTE: IF, BY CHANCE, A FIELD IS FOUND IN THE INPUT STREAM     *\n*   THAT DOES NOT HAVE A MATCHING TABLE ENTRY, REG 06 IS RETURNED     *\n*   EMPTY, BUT THE FIELD ADDRESS AND LENGTHS ARE RETURNED TO THE USER.*\n*                                                                     *\n*   INPUT REGISTERS                                                   *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  BUFFTAB LIST (FROM $FLD GENERATION)                  *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n*   OUTPUT REGISTERS                                                  *\n*        R0   -  ACTUAL LENGTH OF INPUT/ZERO IF 'ERASE EOF' OF FIELD  *\n*        R1   -  ADDRESS OF FIELD IN INPUT                            *\n*        R2   -  LENGTH - 1 OF FIELD IN INPUT                         *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  MATCHING BUFFTAB ENTRY OR ZERO                       *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nTABLE000 DS    0H                      HERE TO PROCESS TGET INPUT\n         USING TABLE000,R15\n         LTR   R5,R5                   ANY THING LEFT TO CHECK?\n         BZ    TABLE050                NO, RETURN TO CALLER\n         SPACE\nTABLE025 DS    0H                      CHECK FOR SBA IN INPUT\n         CLI   0(R4),X'11'             A START FIELD CHARACTER?\n         BE    TABLE100                    YES, GO PROCESS INPUT FIELD\n         LA    R4,1(,R4)                   NO, BUMP AROUND\n         BCT   R5,TABLE025                 GO TEST NEXT BYTE\nTABLE050 DS    0H                      RETURN TO USER WITH NOTHING\n         SLR   R6,R6                   INDICATE NO DATA TO PROCESS\n         BR    R14                     RETURN TO CALLER\n         SPACE\nTABLE100 DS    0H\n         LA    R4,1(,R4)               BUMP AROUND SBA\n         BCT   R5,TABLE120                 DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\nTABLE120 DS    0H\n         LH    R2,0(R6)                LOAD NUMBER OF ENTRIES IN TABLE\n         LA    R6,2(,R6)               BUMP TO START OF TABLE\n         EJECT\nTABLE200 DS    0H\n         CLC   0(2,R4),0(R6)           COMPARE SBA TO TABLE ENTRY\n         BE    TABLE300                    BRANCH OUT IF FOUND\n         LA    R6,0(R7,R6)             BUMP TO NEXT TABLE ENTRY\n         BCT   R2,TABLE200             GO CHECK NEXT ENTRY\n         SLR   R6,R6                   INDICATE NO MATCH\n         SPACE\nTABLE300 DS    0H                      A MATCHING TABLE ENTRY (MAYBE)\n         LA    R4,2(R4)                BUMP TO DATA ADDRESS\n         BCTR  R5,00                       AND DECREMENT SAME\n         BCT   R5,TABLE320                 DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\nTABLE320 DS    0H\n         LR    R1,R4                   SAVE STARTING ADDRESS\n         SPACE\nTABLE400 DS    0H                      FIND END OF FIELD\n         CLI   0(R4),X'11'             LOOK FOR NEXT FIELD START\n         BE    TABLE500                    AND BRENCH OUT IF FOUND\n         LA    R4,1(,R4)               BUMP ANOTHER BYTE\n         BCT   R5,TABLE400                 AND GO CHECK THIS ONE\n         SPACE\nTABLE500 DS    0H                      HERE AT END OF DATA OR NEXT SBA\n         LR    R2,R4                   PREPARE FOR LENGTH COMPUTATION\n         SR    R2,R1                      AND COMPUTE ACTUAL LENGTH\n         LR    R0,R2                        LOAD IT INTO RETURN REG\n         BCTR  R2,00                          DECREMENT FOR EXECUTE(S)\n         B     4(,R14)                 RETURN TO CALLER\n         POP   USING\n         SPACE\nFLDMVC1  MVC   0(0,R10),2(R15)         EXECUTED MOVE\nNUMBRTRT TRT   0(0,R1),NUMTAB          EXECUTED TRT\nNUMHXTRT TRT   0(0,R1),NUMHEXTB        EXECUTED TRANSLATE AND TEST\nNUMBPACK PACK  DWORD,0(0,R1)           EXECUTED PACK INSTRUCTION\n         TITLE '     CVAFPROC -- GENERATE CVAF ERROR MESSAGE'\n***********************************************************************\n*        ROUTINE TO PROCESS ERROR RETURN FROM CVAF                    *\n***********************************************************************\nCVAFPROC DS    0H\n         USING CVAFMAP,R3\n         LA    R3,CVAFREQ\n*        CLI   CVSTAT,00               ERROR GENERATED?\n*        BE    R14                         NO, BYPASS MSG\nCVAFP010 DS    0H\n         SLL   R15,16                  SHIFT RC TO HIGH ORDER 2 BYTES\n         LA    R1,4                        AND LOAD COUNT OF ENTRIES\n         LA    R2,CVAFRC               A(TARGET AREA)\n         SPACE\nCVAFP020 DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT HALF A BYTE INTO REG\n         STC   R14,0(,R2)              SAVE THIS HALF BYTE\n         LA    R2,1(,R2)                   BUMP TO NEXT TARGET ADDRESS\n         BCT   R1,CVAFP020                 AND PROCESS THAT ONE\n         TR    CVAFRC,TRTAB            TRANSLATE TO PRINTABLE CHARS\n         SPACE\n         LA    R1,CVAFREQ\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,CVSTAT                  AND LOAD STATUS BYTE\n         CVD   R15,DWORD                   CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  CVAFST,DWORD            MOVE TO OUTPUT LINE\n         SPACE\n         MVC   CVAFTYPE,=CL5'READ '    DEFAULT TO READ\n         CLI   CVFCTN,CVDIRD           WAS IT A READ?\n         BE    CVAFP030                    YES, BYPASS WRITE\n         MVC   CVAFTYPE,=CL5'WRITE'        NO, INDICATE IT WAS A WRITE\n         SPACE\nCVAFP030 DS    0H\n         LA    R15,CVAFERR             GET ADDRESS OF MESSAGE\n         B     PROCEMSG                RETURN TO CALLER\n         TITLE '     RSETATTR -- RESET ALL MODIFIABLE FIELD ATTRIBUTES'\n***********************************************************************\n*        ROUTINE TO RESET ALL MODIFIABLE FIELD ATTRIBUTES             *\n***********************************************************************\nRSETATTR DS    0H\n         LA    R1,PDSCBL-2             A(H'ENTRIES IN TABLE')\n         LH    R2,0(R1)                H'ENTRIES IN TABLE'\n         LA    R3,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R1,2(,R1)               A(TABLE PROPER)\n         LA    R4,DSCBPANL             A(PANEL)\nRSET0000 DS    0H                      LOOP THROUGH TABLE\n         LH    R5,2(,R1)               LOAD FIELD OFFSET\n         BCTR  R5,00                   DECREMENT BACK TO ATTRIBUTE\n         AR    R5,R4                   ADD PANEL BASE\n         NI    0(R5),64                RESET TO MODIFIABLE, NORM INTENS\n         LA    R1,0(R3,R1)             BUMP TO NEXT ENTRY\n         BCT   R2,RSET0000                 AND GO PROCESS SAME\n         BR    R10                     RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\nCVAFRLSE DS    0H\n         CVAFDIR ACCESS=RLSE,BUFLIST=0,IXRCDS=NOKEEP,BRANCH=(YES,PGM), $\n               IOAREA=NOKEEP,MF=(E,CVAFREQ)\n         OC    UCBTOKEN,UCBTOKEN                                30OCT95\n         BZ    CVAFR010                                         30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X\n               MF=(E,XUCBPIN)                                   30OCT95\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         MODESET MODE=PROB                                      30OCT95\nCVAFR010 DS    0H                                               30OCT95\n         BR    R10                     RETURN TO CALLER\n         BR    R10                     RETURN TO CALLER\n         SPACE\n         PRINT DATA\n         DC    64S(*)\n         PRINT NODATA\n         TITLE 'WORKING STORAGE AND CONSTANTS'\n         DROP  ,\nSAVEAREA DS    18F\nDWORD    DS    D\nFWORD    DS    F\nALLBLANK DC    256C' '\nALLZEROS DC    256X'00'\nDSNLOC   CAMLST NAME,DS1DSNAM,,LOCWORK\n         DS    0D\nLOCWORK  DS    XL512                   LOCATE WORK AREA\nINPUT    EQU   LOCWORK,512\nLDSNAME  DS    H                       LENGTH OF DS1DSNAM\nDEFCSRAD DS    XL2                     DEFAULT CURSOR BUFF ADDR\n         SPACE\nUCBADDR  DS    A(0)                                             30OCT95\nUCBTOKEN DC    XL8'00'                                          30OCT95\n         UCBLOOK MF=(L,XUCBLOOK,0D)                             30OCT95\n         UCBPIN  MF=(L,XUCBPIN,0D)                              30OCT95\n         SPACE\nSYSDSN   DC    CL8'SYSDSN'             QNAME FOR ENQ\n         SPACE\nMODELENQ ENQ   (SYSDSN,,E,,SYSTEM),RET=TEST,MF=L\n         SPACE\nMODESENQ ENQ   (SYSDSN,,E,,SYSTEMS),RET=TEST,MF=L\n         SPACE\nUSERID   DS    0CL9\nUSERIDL  DS    X\nUSERIDI  DS    CL8\n         EJECT\n         LTORG\n         SPACE\n         PRINT NOGEN\nDSNLOCER MSSG  'DATA SET NAME NOT CATALOGED - RESPECIFY'\nENQERMSG MSSG  'DATA SET IS IN USE BY OTHER(S) - MODIFY THIS DSCB WITH $\n               CAUTION'\nDSNAMEER MSSG  'DATA SET NAME NOT SPECIFIED AT CP INVOCATION - RESPECIF$\n               Y'\nDSNLNGER MSSG  'LENGTH OF DSNAME AND USERID GREATER THAN FIELD LENGTH -$\n                RESPECIFY'\nUCBERMSG MSSG  'VOLUME SERIAL REQUESTED NOT ONLINE - RESPECIFY DSN OR V$\n               OL'\nDSORGER1 MSSG  'INVALID DATASET ORGINIZATION - RESPECIFY - PO/PS/DA/IS/$\n               AM (U) ALLOWED'\nRECFMER1 MSSG  'INVALID RECORDING FORMAT - RESPECIFY - F/V/U/B/S/A/M'\nNUMBERER MSSG  'INVALID DATA, FIELD MUST BE ALL NUMERIC'\nHEXER    MSSG  'INVALID DATA, FIELD MUST BE ALL HEXIDECIMAL CHARACTERS'\nLNGTHER1 MSSG  'INVALID DATA, DATA LENGTH MUST MATCH INPUT FIELD LENGTH$\n               '\nSCALLER  MSSG  'SECONDARY ALLOCATION TYPE INVALID - RESPECIFY - C/T/B/R$\n               /U'\nWHATTODO MSSG  'TO TERMINATE, ONE MUST DEPRESS EITHER PFK3 OR PFK15'\nDSCBMSG1 MSSG  'DSCB HAS BEEN SUCCESSFULLY REWRITTEN'\n         SPACE\nCVAFERR  DC    AL2(CVAFERRE-*-2)       LENGTH OF ERROR MESSAGE\n         DC    C'ERROR RETURN FORM CVAF DURING '\nCVAFTYPE DC    CL5' '\n         DC    C', RETURN CODE='\nCVAFRC   DC    XL4'00'\n         DC    C', STATUS='\nCVAFST   DC    CL3' '\nCVAFERRE EQU   *                       END OF ERROR MESSAGE\n         PRINT GEN\n         EJECT\nMISCFLAG DC    B'00000000'\nNSHARED  EQU   B'10000000'             INDICATES UCB NOT SHARED\nIPTDSNAM EQU   B'01000000'             DATA SET NAME HAS CHANGED\nIPTVOL   EQU   B'00100000'             VOLSER PROVIDED BY TERMINAL OPR\nIPTERROR EQU   B'00010000'             INPUT ERROR HAS BEEN ENCOUNTERED\nDSCBMOD  EQU   B'00001000'             DSCB HAS BEEN MODIFIED\nENQUEUE  EQU   B'00000100'             DATA SET IS IN USE\n*        EQU   B'00000010'             UNUSED AT PRESENT\n*        EQU   B'00000001'             UNUSED AT PRESENT\n         SPACE\nTRTAB    DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE\n         SPACE\nNUMTAB   DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMTAB+C'0'             ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nNUMHEXTB DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMHEXTB+C'0'           ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   NUMHEXTB+C'A'           ORG BACK TO HEX CHARS\n         DC    X'000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nDSORGTAB DS    0CL20                   DATASET ORGINAZATION TABLE\n         DC    CL2'IS',AL1(DS1DSGIS,00000000)\nDSORGLNG EQU   *-DSORGTAB              LENGTH OF ONE ENTRY\n         DC    CL2'PS',AL1(DS1DSGPS,00000000)\n         DC    CL2'DA',AL1(DS1DSGDA,00000000)\n         DC    CL2'PO',AL1(DS1DSGPO,00000000)\n         DC    CL2'AM',AL1(00000000,DS1ORGAM)\nDSORGCNT EQU   (*-DSORGTAB)/DSORGLNG   COUNT OF ENTRIES\n         SPACE\nRECFMTAB DS    0CL14                   DATASET RECFM TABLE\n         DC    CL1'F',AL1(DS1RECFF)\nRECFMLNG EQU   *-RECFMTAB              LENGTH OF ONE ENTRY\n         DC    CL1'V',AL1(DS1RECFV)\n         DC    CL1'U',AL1(DS1RECFU)\n         DC    CL1'B',AL1(DS1RECFB)\n         DC    CL1'S',AL1(DS1RECFS)\n         DC    CL1'A',AL1(DS1RECFA)\n         DC    CL1'M',AL1(DS1RECMC)\nRECFMCNT EQU   (*-RECFMTAB)/RECFMLNG   COUNT OF ENTRIES\n         SPACE\nSCAL1TAB DS    0CL14                   SECONDARY ALLOCATION TYPE TABLE\n         DC    CL1'C',AL1(DS1CYL)      CYLINDER BOUNDARY\nSCAL1LNG EQU   *-SCAL1TAB              LENGTH OF ONE ENTRY\n         DC    CL1'T',AL1(DS1TRK)      TRACK BOUNDARY\n         DC    CL1'B',AL1(DS1AVR)      AVR BLOCK\n         DC    CL1'R',AL1(DS1AVRND)    AVG BLOCK AND ROUND\n         DC    CL1'A',AL1(DS1DSABS)    ABSOLUTE TRACK\nSCAL1CNT EQU   (*-SCAL1TAB)/SCAL1LNG   COUNT OF ENTRIES\n         EJECT\nTABTABLE DS    0F                  VALUE=(Y(00)) IN $FLD\n         DC    A(IDSNAME)           0\n         DC    A(IVOLSER)           1\n         DC    A(ICREDT)            2\n         DC    A(IREFD)             3\n         DC    A(IEXPDT)            4\n         DC    A(IDSORG)            5\n         DC    A(IRECFM)            6\n         DC    A(ILRECL)            7\n         DC    A(IBLKL)             8\n         DC    A(IKEYL)             9\n         DC    A(IRKP)             10\n         DC    A(ILSTAR)           11\n         DC    A(ITRBAL)           12\n         DC    A(SMSIND)           13\n         DC    A(IDSIND)           14\n         DC    A(IOPTCD)           15\n         DC    A(ISCALL1)          16\n         DC    A(X'80000000'+ISCALL3) 17\n         SPACE 2\nCVAFREQ  CVAFDIR DSN=DS1DSNAM,BUFLIST=CVAFBUF,IOAREA=KEEP,             $\n               IXRCDS=KEEP,MF=L\n         EJECT\nCVAFBUF  ICVAFBFL DSECT=NO\n         EJECT\nDSCB     DS    0F\n         IECSDSL1 (1)                  MAP OUT DSCB FORMAT 1\nLDSCB    EQU   *-DSCB\n         TITLE '              -- DSCB FIELD(S) MAP FOR A MODEL 2'\nDSCBPANL $FLD  TYPE=INIT,MODEL='3278-2',BUFFTAB=YES,OPERATN=WRITERAS,  $\n               FILL=00\n         $FLD  POS=(01,20),ATR=SKIP,                                   $\n               INITIAL='DATA SET CONTROL BLOCK MODIFICATION PANEL'\n         $FLD  POS=(03,18),ATR=SKIP,                                   $\n               INITIAL='DATA SET NAME'\nPDSNAME  $FLD  POS=(03,32),ATR=(IC,UNPR),                              $\n               VALUES=(Y(00)),LENGTH=46\n         EJECT\n         $FLD  POS=(05,18),ATR=SKIP,                                   $\n               INITIAL='VOLUME SERIAL'\nPVOLSER  $FLD  POS=(05,32),ATR=UNPR,                                   $\n               VALUES=(Y(01)),LENGTH=6\n         $FLD  POS=(07,18),ATR=SKIP,                                   $\n               INITIAL='CREATION DATE'\nPCREDT   $FLD  POS=(07,32),ATR=UNPR,                                   $\n               VALUES=(Y(02)),LENGTH=7\n         EJECT\n         $FLD  POS=(08,17),ATR=SKIP,                                   $\n               INITIAL='REFERENCE DATE'\nPREFD    $FLD  POS=(08,32),ATR=UNPR,                                   $\n               VALUES=(Y(03)),LENGTH=7\n         $FLD  POS=(09,16),ATR=SKIP,                                   $\n               INITIAL='EXPIRATION DATA'\nPEXPDT   $FLD  POS=(09,32),ATR=UNPR,                                   $\n               VALUES=(Y(04)),LENGTH=7\n         EJECT\n         $FLD  POS=(11,10),ATR=SKIP,                                   $\n               INITIAL='DATA SET ORGINIZATION'\nPDSORG   $FLD  POS=(11,32),ATR=UNPR,                                   $\n               VALUES=(Y(05)),LENGTH=3\n         $FLD  POS=(12,18),ATR=SKIP,                                   $\n               INITIAL='RECORD FORMAT'\nPRECFM   $FLD  POS=(12,32),ATR=UNPR,                                   $\n               VALUES=(Y(06)),LENGTH=4\n         EJECT\n         $FLD  POS=(13,10),ATR=SKIP,                                   $\n               INITIAL='LOGICAL RECORD LENGTH'\nPLRECL   $FLD  POS=(13,32),ATR=UNPR,                                   $\n               VALUES=(Y(07)),LENGTH=5\n         $FLD  POS=(14,12),ATR=SKIP,                                   $\n               INITIAL='PHYSICAL BLOCK SIZE'\nPBLKL    $FLD  POS=(14,32),ATR=UNPR,                                   $\n               VALUES=(Y(08)),LENGTH=5\n         EJECT\n         $FLD  POS=(15,21),ATR=SKIP,                                   $\n               INITIAL='KEY LENGTH'\nPKEYL    $FLD  POS=(15,32),ATR=UNPR,                                   $\n               VALUES=(Y(09)),LENGTH=3\n         $FLD  POS=(16,10),ATR=SKIP,                                   $\n               INITIAL='RELATIVE KEY POSITION'\nPRKP     $FLD  POS=(16,32),ATR=UNPR,                                   $\n               VALUES=(Y(10)),LENGTH=3\n         EJECT\n         $FLD  POS=(18,06),ATR=SKIP,                                   $\n               INITIAL='LAST USED TRACK AND BLOCK'\nPLSTAR   $FLD  POS=(18,32),ATR=UNPR,                                   $\n               VALUES=(Y(11)),LENGTH=6\n         $FLD  POS=(18,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         $FLD  POS=(19,01),ATR=SKIP,                                   $\n               INITIAL='BYTES REMAINING ON LAST TRACK'\nPTRBAL   $FLD  POS=(19,32),ATR=UNPR,                                   $\n               VALUES=(Y(12)),LENGTH=4\n         EJECT\n         $FLD  POS=(20,17),ATR=SKIP,                                   $\n               INITIAL='SMS INDICATORS'\nPSMSIND  $FLD  POS=(20,32),ATR=UNPR,                                   $\n               VALUES=(Y(13)),LENGTH=2\n         $FLD  POS=(20,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(21,12),ATR=SKIP,                                   $\n               INITIAL='DATA SET INDICATORS'\nPDSIND   $FLD  POS=(21,32),ATR=UNPR,                                   $\n               VALUES=(Y(14)),LENGTH=2\n         $FLD  POS=(21,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(22,22),ATR=SKIP,                                   $\n               INITIAL='OPT CODES'\nOPTCDE   $FLD  POS=(22,32),ATR=UNPR,                                   $\n               VALUES=(Y(15)),LENGTH=2\n         $FLD  POS=(22,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(23,11),ATR=SKIP,                                   $\n               INITIAL='SECONDARY ALLOCATION'\nPSCAL1   $FLD  POS=(23,32),ATR=UNPR,                                   $\n               VALUES=(Y(16)),LENGTH=1\n         EJECT\nPSCAL3   $FLD  POS=(23,34),ATR=UNPR,                                   $\n               VALUES=(Y(17)),LENGTH=5\nPERRMSG  $FLD  POS=(24,02),ATR=(SKIP,BRT),                             $\n               INITIAL='                                               $\n                                          '\n         PRINT GEN\nPDSCBL   $FLD  TYPE=FINAL,BUFFTAB=PDSCBL,EQU=LPDSCBL\nLPDSCB   EQU   (((*-DSCBPANL+7)/8)*8)   LENGTH OF DCT PANEL\n         EJECT\nCVAFMAP  ICVAFPL DSECT=YES,LABELS=YES\n         EJECT\n         IKJCPPL                       CPPL PARAMETER LIST\n         PRINT NOGEN\n         CVT   LIST=YES,DSECT=YES\n         IEFUCBOB LIST=YES\n         IHAPSA\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         PRINT GEN\n         EJECT\n         YREGS  ,\n         EJECT\n        $KEYS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZAPDSCB2": {"ttr": 15619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x07\\x01\\x01\\x19/\\x01\\x01\\x19/\\x13H\\x08u\\x05E\\x04D\\xd2\\xc2\\xc1\\xe2\\xe2@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-07-11T00:00:00", "modifydate": "2001-07-11T13:48:07", "lines": 2165, "newlines": 1349, "modlines": 1092, "user": "KBASS"}, "text": ".*-------------------------------------------------------------------*\n.*       ZAPDSCB2                                                    *\n.*       THIS ONE USES UCBLOOKUP.  FOR MVS/ESA 4.3 AND BELOW         *\n.*-------------------------------------------------------------------*\n         MACRO\n&MSGNAME MSSG  &DATA,&REPLN,&PREFIX=YES\n         LCLC  &FN\n         LCLA  &FL\n         AIF   (T'&DATA NE 'O').IN0100\n         MNOTE 8,'DATA NOT SUPPLIED IN ''MSSG'' GENERATION, EXPANSION T$\n               ERMINATED'\n         MEXIT\n.IN0100  ANOP\n         AIF   (T'&MSGNAME EQ 'O').IN0200\n&FN      SETC  '&MSGNAME'\n         AGO   .IN0300\n.IN0200  MNOTE 4,'MAP NAME NOT SPECIFIED, DEFAULT NAME GENERATED'\n&FN      SETC  'MSSG&SYSNDX'            GENERATE DEFAULT NAME\n.IN0300  ANOP\n         AIF   ('&DATA'(1,1) EQ '''').IN0400     FIRST CHAR A (')?\n         MNOTE 8,'CHARACTER STRING MUST BEGIN AND END WITH A QUOTE - EX$\n               PANSION TERMINATED'\n         MEXIT\n.IN0400  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0500  IS REPLY LENGTH SUPPLIED?\n         AIF   (T'&REPLN EQ 'N').IN0500  IS REPLY LENGTH NUMERIC?\n         MNOTE 8,'''REPLY LENGTH'' VALUE IS NOT NUMERIC - EXPANSION TER$\n               MINATED'\n         MEXIT\n.IN0500  ANOP\n&FN      DS    0H                      ALIGN ON HALFWORD\n&FL      SETA  K'&DATA-2               DEFAULT TO LENGTH OF LITERAL\n&FL      SETA  (((&FL+1)/2)*2)         ROUND TO HALF WORD LENGTH\n         AIF   ('&PREFIX' NE 'YES').IN0550   BYPASS AL2 IF NOT DESIRED\n         DC    AL2(&FL)                LENGTH OF TEXT - ROUNDED TO 2\n.IN0550  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0600  IS REPLY LENGTH SUPPLIED?\n         DC    AL2(&REPLN)             LENGTH OF REPLY EXPECTED\n.IN0600  ANOP\n         DC    CL&FL&DATA\n         MEND\n         MACRO\n         $KEYS\n         GBLB  &KEYDEF\n         AIF   (&KEYDEF).MEX2\n&KEYDEF  SETB  1\nPFKEY01  EQU   X'F1'                   EQUATE FOR PFKEY01\nPFKEY02  EQU   X'F2'                   EQUATE FOR PFKEY02\nPFKEY03  EQU   X'F3'                   EQUATE FOR PFKEY03\nPFKEY04  EQU   X'F4'                   EQUATE FOR PFKEY04\nPFKEY05  EQU   X'F5'                   EQUATE FOR PFKEY05\nPFKEY06  EQU   X'F6'                   EQUATE FOR PFKEY06\nPFKEY07  EQU   X'F7'                   EQUATE FOR PFKEY07\nPFKEY08  EQU   X'F8'                   EQUATE FOR PFKEY08\nPFKEY09  EQU   X'F9'                   EQUATE FOR PFKEY09\nPFKEY10  EQU   X'7A'                   EQUATE FOR PFKEY10\nPFKEY11  EQU   X'7B'                   EQUATE FOR PFKEY11\nPFKEY12  EQU   X'7C'                   EQUATE FOR PFKEY12\n         SPACE\nPFKEY13  EQU   X'C1'                   EQUATE FOR PFKEY13\nPFKEY14  EQU   X'C2'                   EQUATE FOR PFKEY14\nPFKEY15  EQU   X'C3'                   EQUATE FOR PFKEY15\nPFKEY16  EQU   X'C4'                   EQUATE FOR PFKEY16\nPFKEY17  EQU   X'C5'                   EQUATE FOR PFKEY17\nPFKEY18  EQU   X'C6'                   EQUATE FOR PFKEY18\nPFKEY19  EQU   X'C7'                   EQUATE FOR PFKEY19\nPFKEY20  EQU   X'C8'                   EQUATE FOR PFKEY20\nPFKEY21  EQU   X'C9'                   EQUATE FOR PFKEY21\nPFKEY22  EQU   X'4A'                   EQUATE FOR PFKEY22\nPFKEY23  EQU   X'4B'                   EQUATE FOR PFKEY23\nPFKEY24  EQU   X'4C'                   EQUATE FOR PFKEY24\n         SPACE\nPA1KEY   EQU   X'6C'                   EQUATE FOR PA1KEY\nPA2KEY   EQU   X'6E'                   EQUATE FOR PA2KEY\nPA3KEY   EQU   X'6B'                   EQUATE FOR PA3KEY\nCLEAR    EQU   X'6D'                   EQUATE FOR CLEAR\nENTER    EQU   X'7D'                   EQUATE FOR ENTER\n.MEX2    ANOP\n         MEND\n         MACRO\n&FLDNAME $FLD  &OPTN=2,&LENGTH=,&POS=,&LOC=,&FILL=,                    $\n               &ATR=(SKIP),&INITIAL=,&TYPE=,&EQU=,&VALUES=,            $\n               &MODEL='3276-2',&OPERATN=,&BUFFTAB=NO\n         GBLA  &TLEN               ALGREBRAIC WORK FIELD              *\n         GBLA  &ARG                3270 ATTRIBUTE CHAR RESOLUTION     *\n         GBLA  &MTYPE              TYPE REQUEST                       *\n         GBLA  &CURSOR             CURSOR POSITION                    *\n         GBLA  &OPT                PROCESS OPTION INDICATOR           *\n         GBLA  &PREVPOS            PREVIOUS POSITION                  *\n         GBLA  &LINES              NUMBER OF LINES PER PAGE           *\n         GBLA  &COLS               NUMBER OF COLUMNS PER LINE         *\n         GBLC  &MOD1               TYPE OF CRT BEING USED   32XX      *\n         GBLC  &MOD2               MODEL OF CRT BEING USED      -N    *\n         GBLA  &SCRSIZE            TOTAL AREA OF SCREEN               *\n         GBLA  &GLENGTH            FIELD LENGTH                       *\n         GBLA  &EPOS               FIELD ENDING POSITION              *\n         GBLA  &NLOC               CURRENT FIELD LOCATION             *\n         GBLA  &PLOC               PREVIOUS (NEXT) LOCATION           *\n         GBLB  &MAP                FIRST TIME CONDITION SWITCH        *\n         GBLB  &DEFAULT            INITIAL = USER DEFAULT DATA        *\n         GBLB  &DATAIND            DATA FIELD INDICATOR               *\n         GBLB  &PEN                ATR = DET                          *\n         GBLB  &KEYED              ATR = UNPROT                       *\n         GBLB  &IC                 ATR = IC                           *\n         GBLB  &NUMERIC            NUMERIC FIELD INDICATOR\n         GBLB  &SEQ                FIELDS OUT OF SEQUENCE IND         *\n         GBLB  &SKIP               1 IF ATR = SKIP, 0 ALL OTHERS      *\n         GBLB  &PROT               1 IF ATR = PROT, 0 ALL OTHERS      *\n.*       GBLC  &DEVICE             DIVICE TYPE INDICATOR              *\n         GBLC  &FN                 FIELD NAME                         *\n         GBLC  &ATRC               3270 ATTRIBUTE CHARACTER           *\n         LCLA  &REQ                REPLY REQUIRED INDICATOR           *\n         LCLA  &FPOS               FIELD POSITION                     *\n         LCLA  &FLAG               FIELD DESCRIPTOR FLAG              *\n         LCLC  &FILLCHR            FILLER USED INSTEAD OF INITIAL     *\n         GBLC  &GFILL              TYPE=INIT SPECIFICATION OF FILL    *\n         LCLC  &OPER               TYPE OF READ/WRITE OPERATION       *\n         LCLB  &ABORT              ABORT INDICATOR                    *\n         LCLB  &X(10),&XON\n         LCLA  &COUNT,&INDEX,&HIGH,&A,&B,&C\n         LCLA  &Y(10)\n         LCLA  &XAXIS                  X AXIS BUFFER ADDRESS          *\n         LCLA  &YAXIS                  Y AXIS BUFFER ADDRESS          *\n         LCLC  &XCHAR                  X AXIS CHARACTER               *\n         LCLC  &YCHAR                  Y AXIS CHARACTER               *\n         GBLC  &ADDRCHR                ADDRESS CHARACTER STRING       *\n         GBLB  &DOCSW                  DOCUMENTATION PRINT SWITCH     *\n         GBLC  &MAPNAME                NAME OF THIS $FLD MAP          *\n.************************ BUFFER TABLE ENTRIES ************************\n         GBLB  &BUFFTB                 BUFFER ADDRESS TABLE REQUESTED *\n.*       TO CHANGE NUMBER OF ENTRIES, CHANGE THE SUBSCRIPT VALUE      *\n.*             HERE AND THE SETA VALUE FOR &ENTS                      *\n         GBLA  &ENTLEN(256)            BUFFER ENTRY LENGTH - 1        *\n         GBLA  &ENTVCN(256)            NUMBER OF VALUES PER ENTRY     *\n         GBLC  &ENTOFF(256)            BUFFER ENTRY OFFSET            *\n         GBLC  &ENTRBA(256)            BUFFER ENTRY RBA               *\n         GBLC  &ENTVAL(768)            BUFFER ENTRY VALUES 3/ENTRY    *\n         GBLA  &ENTMAX                 MAXIMUM BUFFER ENTRIES         *\n         GBLA  &ENTS                   NUMBER OF BUFFER ENTRIES       *\n         GBLA  &VALCNT                 NUMBER OF TOTAL 'VALUES' ENTRIES\n         LCLA  &LSTCNT                 NUMBER OF ENTRIES PROCESSED    *\n         LCLA  &TCNT1                  WORK COUNTER                   *\n         LCLC  &FNM                    NAME TO BE USED ON DS          *\n.**********************************************************************\n.* *     ANALYZE OPERANDS                                           * *\n.**********************************************************************\n         AIF   (&MAP).IN0100                FIRST TIME THRU ???       @\n         AIF   (T'&TYPE EQ 'O').ERR140      MUST SUPPLY TYPE          *\n         AIF   ('&TYPE' EQ 'INIT').IN0005   MUST SUPPLY INIT FIRST    *\n.ERR140  MNOTE 4,'''INIT'' MUST BE SPECIFIED FOR FIRST INVOCATION OF TH$\n               IS MACRO'                     ERROR IF NOT             *\n.IN0005  ANOP                          HERE AFTER MNOTE               *\n&MAP     SETB  1                        SET ON FIRST TIME THRU        @\n.*       CHANGE THIS SETA IF CHANGING MAXIMUM SUBSCRIPT VALUE         *\n&ENTMAX  SETA  256                      MAXIMUM BUFFER ENTRIES        @\n&VALCNT  SETA  0                        RESET VALUE COUNTER           @\n&MTYPE   SETA  0                        RESET MAY INDICATOR           *\n&PREVPOS SETA  0                        RESET PREVIOUS POS INDICATOR  *\n&SKIP    SETB  1                        INITIALIZE SKIP INDICATOR     *\n&PLOC    SETA  1                        INITIALIZE LOCATION COUNTER   *\n&ADDRCHR SETC  'Z40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F50D1D2D3D4D5D6D7D8D95A$\n               5B5C5D5E5F6061E2E3E4E5E6E7E8E96A6B6C6D6E6FF0F1F2F3F4F5F6$\n               F7F8F97A7B7C7D7E7F'\n.*             THE Z AT THE BEGINNING OF THE TABLE IS TO OFFSET THE   *\n.*       MULTIPLICATION BY 2. THE OFFSET INTO THE TABLE IS BASED ON   *\n.*       AN INITIAL VALUE OF ONE (1) NOT ZERO (0).                    *\n.**********************************************************************\n.MOD000  ANOP                          HERE TO VERIFY CTR             *\n         AIF   (T'&MODEL EQ 'O').ERR160      WAS MODEL SUPPLIED       *\n         AIF   (K'&MODEL LT 6).ERR160       IS ALL OF IT THERE        *\n         AIF   ('&MODEL'(1,1) EQ '''').MOD010 IS IT WITHIN QUOTES     *\n&MOD1    SETC  '&MODEL'(1,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(6,1)             SET UP CRT MODEL             *\n         AGO   .MOD020                      BYPASS FOLLOWING          *\n.MOD010  ANOP                          HERE TO PROCESS QUOTES         *\n&MOD1    SETC  '&MODEL'(2,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(7,1)             SET UP CRT MODEL             *\n.MOD020  AIF   (&MOD1 EQ 3275 OR &MOD1 EQ 3277).MOD030                *\n         AIF   (&MOD1 EQ 3276 OR &MOD1 EQ 3278).MOD040                *\n.ERR180  MNOTE 8,'MODEL=&MODEL NOT ACCEPTABLE TO THIS MACRO'          *\n         MEXIT\n.MOD030  ANOP                          HERE FOR 3275'S                *\n         AIF   (&MOD2 EQ 2).MOD050     LARGE SCREEN                   *\n         AIF   (&MOD2 NE 1).ERR180     NOT SMALL SCREEN               *\n&LINES   SETA  12                      SET ROWS                       *\n&COLS    SETA  40                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD050  ANOP                          HERE FOR 3277'S                *\n&LINES   SETA  24                      SET ROWS                       *\n&COLS    SETA  80                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD040  ANOP                          HERE FOR NEW DEVICES           *\n&COLS    SETA  80                      ALL HAVE 80 COLUMNS            *\n         AIF   (&MOD2 EQ 1).MOD060     SMALL SCREEN CRT               *\n         AIF   (&MOD2 EQ 2).MOD070     LARGE SCREEN CRT               *\n         AIF   (&MOD2 EQ 3).MOD080     BIG SCREEN CRT                 *\n         AIF   (&MOD2 NE 4).ERR180     BIGGIE SCREEN CRT              *\n&LINES   SETA  43                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD060  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  12                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD070  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  24                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD080  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  32                      SET ROWS                       *\n.MOD090  ANOP                          HERE WHEN ROWS & COLS DEFINED  *\n&SCRSIZE SETA  &COLS*&LINES            DEFINE MAXIMUM SCREENSIZE      *\n         AIF   (T'&OPTN EQ 'O').IN0010  IS OPTION GIVEN ???           *\n&OPT     SETA  &OPTN                    YES, SAVE VALUE               *\n.**********************************************************************\n         AGO   .IN0020                  CONTINUE                      *\n.IN0010  ANOP                           SUBSTITUTE OPTION VALUE       *\n&OPT     SETA  2                           DOCUMENTATION ONLY         *\n.**********************************************************************\n.IN0020  ANOP                           TEST IF DOCUMENTATION REQ.    *\n         AIF   (T'&FILL EQ 'O').IN0030  IS OPTION GIVEN ???           *\n&GFILL   SETC  '&FILL'                  SET FILL CHARACTER\n.IN0030  ANOP\n***********************************************************************\n MNOTE *,'        OPTIONS IN EFFECT-----------    '\n MNOTE *,'                                        '\n MNOTE *,'                 ROWS........ &LINES    '\n MNOTE *,'                 COLUMNS..... &COLS     '\n MNOTE *,'                 CHARACTERS.. &SCRSIZE  '\n***********************************************************************\n         SPACE\n         AIF   (&DOCSW).IN0050     HAS DOCUMENTATION PRINTED ONCE?    *\n&DOCSW   SETB  1                   SET DOCUMEMTATION PRINTED FLAG     *\n***********************************************************************\n*     MAP GENERATION PARAMETERS, THEIR USE AND DEFAULTS               *\n*                                                                     *\n*     INITIAL ENTRY (MUST BE GIVEN TO SET VARIOUS OPTIONS)            *\n*                                                                     *\n*        MAP   OPTN=1,MODEL='32XX-N',TYPE=INIT,BUFFTAB=XXX            *\n*                                                                     *\n*           MODEL  TO SPECIFY THE TERMINAL TYPE (AND SCREEN SIZE),    *\n*                  THE DEFAULT IS SET TO 24 ROWS, AND 80 COLUMNS PER  *\n*                  ROW. MAXIMUM IS 43 BY 80. THE ACCEPTABLE VALUES    *\n*                  AND THEIR GENERATED SCREEN SIZES ARE AS FOLLOWS:   *\n*                                                                     *\n*      MODEL ROWS COLS CHARS         MODEL ROWS COLS CHARS            *\n*                                   3276-1  12   80    960            *\n*     3275-1  12   40    480        3276-2  24   80   1920            *\n*     3275-2  24   80   1920        3276-3  32   80   2560            *\n*                                   3276-4  43   80   3440            *\n*                                                                     *\n*                                   3278-1  12   80    960            *\n*     3277-1  12   40    480        3278-2  24   80   1920            *\n*     3277-2  24   80   1920        3278-3  32   80   2560            *\n*                                   3278-4  43   80   3440            *\n*                                                                     *\n*           OPTN   THIS PARAMETER IS USED TO SET ONE OF THE           *\n*                  FOLLOWING OPTIONS.......                           *\n*                                                                     *\n*                        OPTN=1  - DOCUMENTATION GENERATION.          *\n*                        OPTN=2  - DOCUMENTATION & DATA DECLARATION.  *\n*                                                                     *\n*              NOTE: (TYPE=INIT AND MODEL=32NN-N MUST BE SPECIFIED TO *\n*                      PREVENT MNOTE ERRORS FOR DOCUMENTATION ONLY.)  *\n*                                                                     *\n*           OPERATN THIS PRAMETER IS USED TO SPECIFY THE TYPE OF      *\n*                   OPERATION TO BE USED. THE ACCEPTABLE VALUES ARE:  *\n*                                                                     *\n*               READ     -  FULL BUFFER READ                          *\n*               READMOD  -  READ MODIFIED FIELDS ONLY                 *\n*                                                                     *\n*               WRITE    -  WRITE / WITHOUT ERASE OPERATION           *\n*               WRITERAS -  WRITE / ERASE ALL FIELDS                  *\n*               WRITERUP -  WRITE / ERASE UNPROTECTED FIELDS ONLY     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        BUFFTAB=XXX      THIS ENTRY MAY BE USED TO GENERATE A TABLE  *\n*               OF ALL USER MODIFIABLE ENTRIES IN THIS MAP. THIS TABLE*\n*               CONTAINS AN ENTRY FOR EACH OF THE FOLLOWING:          *\n*                                                                     *\n*        BUFFER ADDRESS - THE BUFFER ADDRESS OF AS GENERATED BY THIS  *\n*                         MAP. NOTE: ONLY MODIFIABLE FIELDS ARE       *\n*                         PROCESSED.                                  *\n*        OFFSET         - THE OFFSET OF THIS FIELD FROM THE BEGINNING *\n*                         OF THIS FIELD MAP.                          *\n*        LENGTH         - THE LENGTH OF THIS FIELD, LESS ONE BYTE.    *\n*                                                                     *\n*        THE VALID OPTIONS AND WHEN THE ARE USED ARE AS FOLLOWS:      *\n*                                                                     *\n*        NO    -  USED WITH 'TYPE=INIT' TO BYPASS TABLE GENERATION.   *\n*                 THIS IS THE DEFAULT VALUE.                          *\n*        YES   -  USED WITH 'TYPE=INIT' TO REQUEST TABLE GENERATION.  *\n*                                                                     *\n*              ADDITIONALLY, YOU MAY SPECIFY PARAMETERS TO BE         *\n*        INCLUDED IN THE GENERATION OF THIS TABLE. THEY MAY BE PASSED *\n*        VIA THE PARAMETER 'VALUES'. AN EXAMPLE OF HOW THIS PARAMETER *\n*        IS USED IS DISPLAYED BELOW. NOTE: TWO RESTRICTIONS EXIST.    *\n*        THEY ARE: 1) A MAXIMUM OF THREE ENTRIES ARE ALLOWED PER $FLD *\n*        SPECIFICATION, AND 2) THIS VALUE IS ALLOWABLE ONLY ON FIELDS *\n*        THAT ARE FLAGGED AS MODIFIABLE BY THE USER. ALSO, YOU ARE    *\n*        RESPONSIBLE FOR MAINTAINING ALIGNMENT. THE BASIC TABLE IS SIX*\n*        (6) BYTES LONG AND IS INITIATED ON A FULLWORD BOUNDARY.      *\n*                                                                     *\n*      FSTART  $FLD   TYPE=INIT,BUFFTAB=YES                           *\n*      FIELD1  $FLD   POS=(10,30),INITIAL='.....',ATR=IC,             *\n*                     VALUES=(X'01',X'4E',A(PARAM))                   *\n*      FTABLE  $FLD   TYPE=FINAL                                      *\n*                                                                     *\n*        THIS WOULD GENERATE A BUFFER ADDRESS TABLE AS FOLLOWS:       *\n*                                                                     *\n*FTABLE  DS    0F                                                     *\n*        DC    XL2'4B6E'               BUFF ADDR OF CURRENT ENTRY     *\n*        DC    AL2(FIELD1-FSTART)      OFFSET TO CURRENT ENTRY        *\n*        DC    AL2(4)                  LENGTH OF CURRENT ENTRY - 1    *\n*        DC    X'01'                   VALUES PARAMETER               *\n*        DC    X'4E'                   VALUES PARAMETER               *\n*        DC    A(PARAM)                VALUES PARAMETER               *\n*                                                                     *\n*        NOTE: THIS TABLE IS A MULTIPLE OF 4 BYTES. (USER CONTROLLED) *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*     FIELD LAYOUT ENTRIES (ONE PER FIELD)                            *\n*                                                                     *\n*        $FLD  POS=(10,1),ATR=(SKIP),INITIAL='A',LOC=NNN,TYPE=REQ     *\n*                                    LENGTH=1                         *\n*                                                                     *\n*           POS    TO SPECIFY ROW AND COLUMN NUMBERS. TRY NOT TO      *\n*                  USE ROW 24, IT IS USED BY THE SYSTEM.              *\n*                                                                     *\n*           ATR    THIS PARAMETER IS USED TO DEFINE THE DATA FIELD    *\n*                  ATTRIBUTE CHARACTERISTICS.                         *\n*                                                                     *\n* ATR=(SKIP)  PROTECTED FIELD       *  ATR=(BRT)  HIGH INTENSITY FIELD*\n* ATR=(PROT)  PROTECTED FIELD       *  ATR=(DRK)  NON-DISPLAY FIELD   *\n* ATR=(UNPR)  MODIFIABLE FIELD      *  ATR=(MDT)  MODIFIED DATA TAG ON*\n* ATR=(NUM)   NUMERIC DATA ONLY     *  ATR=(IC)   INSERT CURSOR       *\n* ATR=(DET)   LIGHT PEN DETECTALBE  *  ATR=(NORM) NORMAL INTENSITY    *\n*                                                                     *\n*             DO NOT USE THE FOLLOWING COMBINATIONS.......            *\n*           ATR=(SKIP,UNPR)                 ATR=(DRK,NORM)            *\n*           ATR=(PROT,UNPR)                 ATR=(SKIP,IC)             *\n*           ATR=(DET,DRK)                   ATR=(PROT,IC)             *\n*           ATR=(BRT,DRK)                   ATR=(PROT,NUM)            *\n*           ATR=(BRT,NORM)                                            *\n*                                                                     *\n*           LENGTH TO SPECIFY LENGTH OF FIELD WHEN 'INITIAL' IS       *\n*                  NOT GIVEN. DO NOT USE WHEN INITIAL VALUE IS        *\n*                  GIVEN.                                             *\n*           INITIAL USED TO DECLARE CONSTANT SCREEN DATA. THIS        *\n*                  SHOULD ALWAYS BE USED TO SHOW THE TYPE OF DATA     *\n*                  TO BE DISPLAYED.                                   *\n*           LOC    THIS PARAMETER IS USED TO DEFINE THE RELATIVE      *\n*                  LOCATION OF THE DATA FIELD WITHIN THE USER AREA.   *\n*                  DO NOT SPECIFY ON ANY OTHER THAN INPUT DATA.       *\n*           TYPE   TYPE=INIT IS REQUIRED FIRST TIME THRU TO SET UP    *\n*                  INITIAL VALUES AND DOCUMENTATION PRINT.            *\n*                  TYPE=FINAL IS NEEDED TO TERMINATE THE CURRENT      *\n*                  MAP AND TO INSERT ANY CURSOR SPECIFIED.            *\n*                                                                     *\n*      FTABLE  $FLD   TYPE=FINAL,EQU=XXXXXX                           *\n*                                                                     *\n*        TYPE=FINAL  CAUSES THE INSERT CURSOR STRING TO BE PLACED     *\n*                    AT THE END OF THE FIELD DEFINITION. THIS POSITION*\n*                    IS REQUIRED FOR TCAM.                            *\n*        EQU=XXXXX   WILL GENERATE AN EQU, WITH XXXXX AS THE NAME,    *\n*                    WITH THE LENGTH OF THIS DISPLAY AS THE VALUE.    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n.IN0050  ANOP\n         AIF   (&OPT EQ 1).MAPXIT          EXIT IF DOCUMENTATION ONLY *\n         AIF   (&OPT EQ 2).IN0055          CONTINUE IF VALID OPTION   *\n         MNOTE 4,'INVALID OPTION SPECIFIED, OPTION=2 ASSUMED'\n.IN0055  ANOP\n         AIF   ('&BUFFTAB'(1,1) EQ 'N').IN0057    BUFFER TABLE REQ?\n         AIF   ('&BUFFTAB'(1,1) NE 'Y').ERR200    IF NOT, ERROR\n&BUFFTB  SETB  1                       YES, INDICATE SO\n&ENTS    SETA  0                       RESET ENTRY COUNT\n.IN0057  ANOP\n.*  &FLDNAME CSECT                                                    *\n         AIF   (T'&FLDNAME EQ 'O').IN0060\n&FN      SETC  '&FLDNAME'              GENERATE DEFAULT NAME\n         AGO   .IN0065\n.IN0060  ANOP\n         AIF   (NOT &BUFFTB).IN0065     BYPASS IF BUFFTAB NOT REQUESTED\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.IN0065  ANOP\n&FN      DS    0F                                                     *\n&FPOS    SETA  4\n&MAPNAME SETC  '&FN'                   SAVE MAP NAME\n         AIF   (T'&OPERATN EQ 'O').MAPXIT    IF OMITTED, BYPASS REST  *\n         AIF   ('&OPERATN'(1,4) EQ 'READ').IN0080  GO TO READ         *\n         AIF   ('&OPERATN'(1,5) EQ 'WRITE').IN0070  CHECK TYPE        *\n         MNOTE 8,'TYPE OF OPERATION SPECIFIED IS UNACCEPTABLE'\n         MEXIT\n.IN0070  ANOP\n         AIF   ('&OPERATN'(5,4) EQ 'ERAS').IN0072  ERASE WRITE        *\n         AIF   ('&OPERATN'(5,4) EQ 'ERUN').IN0074  ERASE UNPROT       *\n&OPER    SETC  'F1'                    DEFAULT TO NORMAL WRITE        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0072  ANOP\n&OPER    SETC  'F5'                    DEFAULT TO WRITE ERASE         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0074  ANOP\n&OPER    SETC  '6F'                    DEFAULT TO ERASE UNPROT        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0080  ANOP                          HERE FOR READ OPERATIONS       *\n         AIF   ('&OPERATN'(5,3) EQ 'MOD').IN0082  READ MODIFY         *\n&OPER    SETC  'F2'                    DEFAULT TO NORMAL READ         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0082  ANOP                          HERE FOR READ MODIFIED         *\n&OPER    SETC  'F6'                    DEFAULT TO READ MODIFIED       *\n.IN0090  ANOP\n         DC    XL3'27&OPER.C1'                                        *\n         AGO   .MAPXIT                  EXIT ON FIRST TIME THRU       *\n.**********************************************************************\n.IN0100  ANOP                           BYPASS AFTER FIRST TIME THRU  *\n         AIF   (&MTYPE EQ 2).ERR010     ERROR IF PREV. ENTRY FINAL    @\n         AIF   (T'&TYPE EQ 'O').IN0110  IS THIS FINAL ENTRY ???       @\n         AIF   ('&TYPE' NE 'FINAL').ERR150   REPLY REQUIRED ???       *\n&MTYPE   SETA  2                        YES, SET INDICATOR            @\n         AGO   .FI0000                  GO PROCESS FINAL ENTRY        @\n.IN0110  ANOP                           SET UP FIELD NAME             @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF LENGTH/INITIAL OPERAND              *\n.**********************************************************************\n         AIF   (T'&LENGTH EQ 'O').LG0010 LENGTH NOT GIVEN             5\n&GLENGTH SETA  &LENGTH                 SET FIELD LENGTH               @\n         AGO   .LG0030                 BYPASS LENGTH SUBSTITUTION     @\n.LG0010  ANOP                          USE LENGTH OF DEFAULT VALUE    @\n         AIF   (T'&INITIAL EQ 'O').LG0020 IF NOT GIVEN DEFAULT TO ONE 5\n         AIF   ('&INITIAL'(1,1) NE '''').ERR070 YES, FIRST CHAR A (') ?\n&GLENGTH SETA  K'&INITIAL-2            DEFAULT TO LENGTH OF LITERAL   @\n&DEFAULT SETB  1                        YES, SET DEFAULT GLOBAL       @\n         AGO   .LG0030                 END OF LENGTH GENERATION       5\n.LG0020  ANOP                          LENGTH DEFAULT SETUP           5\n&GLENGTH SETA  1                       DEFAULT TO LENGTH OF ONE       @\n.LG0030  ANOP                          VALIDATE LENGTH VALUE ASSIGNED 5\n.*       AIF   (&GLENGTH GT 256).ERR020 TOO LONG   DELETED BY LGN 7906*\n         AIF   (&GLENGTH LT 1).ERR020  NOT LONG ENOUGH                @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF FILL OPERAND                        *\n.**********************************************************************\n         AIF   (T'&FILL NE 'O').FILL10  IS OPTION GIVEN ???           *\n&FILLCHR SETC  '&GFILL'                 SET FILL CHARACTER\n         AGO   .FILL20\n.FILL10  ANOP\n&FILLCHR SETC  '&FILL'                  SET FILL CHARACTER\n.FILL20  ANOP\n.PO0000  ANOP                          END OF FIELD LENGTH PARAMETER  @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF POS OPERAND                         *\n.**********************************************************************\n         AIF   (T'&POS EQ 'O').ERR030  IS POS = NULL ?                @\n&FPOS    SETA  &POS(1)                                                @\n         AIF   (N'&POS LT 2).PO0020    ACTUAL POSITIONS SPECIFIED ??? @\n         AIF   (&POS(1) LT 1 OR &POS(1) GT &LINES).ERR030 LINE VALID ?\n         AIF   (&POS(2) LT 1 OR &POS(2) GT &COLS).ERR030  YES, COL   ?\n&FPOS    SETA  (((&POS(1)-1)*(&COLS))+(&POS(2)-1)) YES, CONVERT IT    @\n         AGO   .PO0030                                                @\n.PO0020  ANOP                                                         @\n         AIF   (&FPOS-&EPOS GT 0).PO0030    WILL FIELD OVERLAP?       *\n         MNOTE 4,'POSITION ADJUSTED TO PREVENT FIELD OVERLAY'         *\n&FPOS    SETA  &EPOS+1                 PREVIOUS ENDING POS + ONE      *\n         AGO   .PO0040                 BYPASS FOLLOWING CODE          *\n.PO0030  ANOP\n         AIF   (&SKIP).PO0040          WAS PREV FIELD ATR = SKIP  ???\n         AIF   (&FPOS-&EPOS EQ 1).PO0040 IF ONLY ONE BYTE --          *\n         DC    X'1D7C'                 CAUSE SKIP FROM LAST FIELD     *\n.PO0040  ANOP                          GAP FIELD GENERATION RETURN PT\n&EPOS    SETA  (&FPOS+&GLENGTH)             CALCULATE ENDING POSITION *\n         AIF   (&SCRSIZE LT &EPOS).ERR080 OUTSIDE OF PAGE ?           *\n.PO0060  ANOP                         NO, END OF POSITION OPERAND     @\n         AIF   (&FPOS GE &PREVPOS).PO0070  ARE FIELDS IN SEQUENCE ?   @\n&SEQ     SETB  1                      NO, SET OUT OF SEQUENCE IND     @\n         AGO   .ERR170                THEN TERMINATE THIS EXPANSION   @\n.PO0070  ANOP                         YES, BYPASS OUT OF SEQ IND      @\n&PREVPOS SETA  &FPOS                  SET NEW PREVIOUS POSITION       @\n.AT0000  ANOP                      END OF POSITION AND SEQUENCE CHECK @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF  ATR  OPERAND                       *\n.**********************************************************************\n&ATRC    SETC  '40'                INITIALIZE 3270 ATTRIBUTE CHAR     @\n&SKIP    SETB  0                   RESET SKIP OPTION                  @\n&PROT    SETB  0                   RESET PROT OPTION                  @\n&INDEX   SETA  1\n&HIGH    SETA  10\n&IC      SETB  0\n&ARG     SETA  0\n         AIF   (T'&ATR EQ 'O').AT0040\n.AT0010  ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT &HIGH).ERR100\n         AIF   ('&ATR(&INDEX)'(1,2) EQ '**SKIPROUNPNUMDETBRTDRKMDTIC NO*\n               R'(3*&COUNT,2)).AT0030\n         AGO   .AT0010\n.AT0020  ANOP\n         AIF   (&INDEX EQ N'&ATR).AT0050\n&INDEX   SETA  &INDEX+1\n&COUNT   SETA  0\n         AGO   .AT0010\n.*\n.*  SET X MATRIX FOR CHARACTER DISPLACEMENT.\n.*\n.AT0030  ANOP\n&XON     SETB  1\n&X(&COUNT) SETB 1\n&Y(&COUNT) SETA &INDEX\n         AGO   .AT0020\n.AT0040  ANOP\n&X(1)    SETB  1\n&XON     SETB  1\n.*\n.*  ANALYZE THE MATRIX\n.*\n.AT0050  ANOP\n         AIF   (&XON).AT0060\n&X(1)    SETB  1\n.AT0060  ANOP\n.*\n.*  OUTPUT ANALYSIS.\n.*\n&A       SETA  1                       SKIP\n&B       SETA  3                       UNPROTECTED\n         AIF   (&X(1) AND &X(3)).ERR110  SKIP/UNPROTECTED ???\n&A       SETA  2                       PROTECT\n         AIF   (&X(2) AND &X(3)).ERR110  PROTECTED/UNPROTECTED\n&A       SETA  5                       SELECTER PEN DETECTABLE\n&B       SETA  7                       DARK (NON-DETECTABLE)\n         AIF   (&X(5) AND &X(7)).ERR110  DETECTABLE/DARK ???\n&A       SETA  6                       BRIGHT\n         AIF   (&X(6) AND &X(7)).ERR110  BRIGHT/DARK ???\n&B       SETA  10                      NORMAL\n         AIF   (&X(6) AND &X(10)).ERR110  BRIGHT/NORMAL ???\n&A       SETA  7                       DARK\n         AIF   (&X(7) AND &X(10)).ERR110    DARK/NORMAL ???\n         AIF   (&X(1) AND &X(9)).ERR120     SKIP/IC ???\n         AIF   (&X(2) AND &X(9)).ERR120     PROT/IC ???\n         AIF   (&X(2) AND &X(4)).ERR130     PROT/NUM ???\n.*\n.*  SET ATTRIBUTE BITS\n.*\n.AT0070  ANOP\n&NUMERIC SETB  (&X(4))             SET NUMERIC FIELD INDICATOR\n&X(2)    SETB  (&X(1) OR &X(2))    PROT IF SKIP.\n&X(4)    SETB  (&X(1) OR &X(4))    NUM IF SKIP\n&X(5)    SETB  (&X(7) OR (&X(5) AND NOT &X(6))) SET IF DARK OR LGHT PEN\n&X(6)    SETB  (&X(7) OR &X(6))    BRT IF DARK.\n&IC      SETB  (&X(9))             IC IF REQUESTED\n&ARG     SETA  (32*&X(2)+16*&X(4)+4*&X(5)+8*&X(6)+&X(8))\n&KEYED   SETB  (&X(3))             FLAG AS KEYABLE IF UNPROTECTED.\n&PROT    SETB  (&X(2) OR &X(1))    SET TO ONE IF ATR = PROT OR SKIP\n&SKIP    SETB  (&X(1))             SET TO ONE IF ATR = SKIP\n         AGO   .AT0100\n.AT0090  ANOP\n&X(&C)   SETB  0                   CLEAR\n&C       SETA  &C+1                DOWN\n         AIF   (&C LT 11).AT0090   X TABLE.\n         AGO   .AT0070\n.AT0100  ANOP                          END OF ATR ANALYSIS\n         AIF   (T'&FLDNAME EQ 'O').AT0110 FIELD NAME OMITTED          @\n&FN      SETC  '&FLDNAME'(1,8)          USE FIRST 8 CHAR FOR NAME     @\n&DATAIND SETB  ('&FN' NE '')       INDICATE DATA ITEM (LABEL)         @\n         AGO   .AT0120                  BYPASS NEXT TEST              @\n.AT0110  ANOP                           FIELD NAME BYPASS             @\n         AIF   ((NOT &BUFFTB) OR (&SKIP) OR (&PROT)).AT0120\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n         AIF   (NOT &SKIP).AT0110\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.AT0120  ANOP\n.**********************************************************************\n.*       CONVERT THE BINARY  ATR  TO A VALID 3270 TRANSMITTABLE CHAR  *\n.**********************************************************************\n&ATRC    SETC  '&ADDRCHR'((&ARG+1)*2,2) SELECT ATTRIBUTE CHARACTER    *\n.DE0000  ANOP                           END OF ATTRIBUTE CONVERSION   @\n.**********************************************************************\n.*       DATA DECLARATION GENERATION                                  *\n.**********************************************************************\n.LO0000  ANOP                           END OF JUSTIFY PARAMETER      @\n.**********************************************************************\n.*       SET CURRENT OUTPUT FIELD LOCATION COUNTER                    *\n.**********************************************************************\n         AIF   (NOT &DATAIND).LO0020    BYPASS FOR NON DATA FIELDS    *\n         AIF   (T'&LOC EQ 'O').LO0010   LOCATION NOT GIVEN, USE DEFAULT\n&NLOC    SETA  &LOC                     SET CURRENT LOCATION COUNTER  *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n         AGO   .LO0020                  CONTINUE                      *\n.LO0010  ANOP                           DEFAULT TO CURRENT COUNT      *\n&NLOC    SETA  &PLOC                    USE PREVIOUS COUNT            *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n.LO0020  ANOP                           END OF LOCATION COUNT SETUP   *\n         AGO   .GN0010                  GO TO FIELD GENERATION        @\n.GN0000  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE SKIP (END OF LINE) FIELD ENTRY                      *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    CL1'0'              FIELD ATTRIBUTE                    @\n*---------------------------------------------------------------------*\n         AGO   .PO0030\n.GN0010  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE FIELD ENTRY                                         *\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD CHARACTER              *\n         DC    XL1'&ATRC'          FIELD ATTRIBUTE                    *\n         AIF   (NOT &DEFAULT).GN0050  IS INITIAL = DEFAULT DATA ?     @\n&FN      DC    CL&GLENGTH.&INITIAL\n         AGO   .GN0060             GO TO NEXT OPTION                  *\n.GN0050  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n&FN      DS    0CL&GLENGTH\n         DC    &GLENGTH.XL1'&FILLCHR.'\n.GN0060  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n***********************************************************************\n         AIF   (((NOT &KEYED) AND (&CURSOR NE 0)) OR (NOT &IC)).GN0070\n&CURSOR  SETA  &FPOS+1             UPDATE CURSOR POSITION             @\n.GN0070  ANOP                      END OF FIELD GENERATION            @\n         AIF   (((NOT &BUFFTB) AND (NOT &KEYED)) OR (&PROT)).MAPXIT\n&FPOS    SETA  &FPOS+1                 BUMP TO ACTUAL FIELD\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&ENTS    SETA  &ENTS+1                 BUMP ENTRY COUNT\n&ENTRBA(&ENTS)  SETC  '&XCHAR&YCHAR'   SET RBA\n&ENTLEN(&ENTS)  SETA  &GLENGTH-1       SET LENGTH-1\n&ENTOFF(&ENTS)  SETC  '&FN-&MAPNAME'   DEFINE OFFSET FOR ADCON\n&ENTVCN(&ENTS)  SETA  0                INSURE UNUSED IS ZERO\n         AIF    (T'&VALUES EQ 'O').MAPXIT\n.GN0080  ANOP\n         AIF   (&ENTVCN(&ENTS) EQ 3).MAPXIT\n&ENTVCN(&ENTS)  SETA &ENTVCN(&ENTS)+1  BUMP COUNTER\n&VALCNT         SETA &VALCNT+1         BUMP COUNTER\n&ENTVAL(&VALCNT) SETC '&VALUES(&ENTVCN(&ENTS))' MOVE PARAMETER\n         AIF   (&ENTVCN(&ENTS) LT N'&VALUES).GN0080\n.MAPXIT  ANOP                      END OF FIELD GENERATION            @\n&FN      SETC  ''                  INITIALIZE FLDNAME GLOBAL          @\n&DEFAULT SETB  0                   INITIALIZE DEFAULT DATA GLOBAL     @\n&DATAIND SETB  0                   INITIALIZE DATA (FIELD) INDICATOR  @\n&PEN     SETB  0                   INITIALIZE PEN DETECTABLE GLOBL    @\n&IC      SETB  0                   INITIALIZE INSERT CURSOR GLOBAL    @\n&KEYED   SETB  0                   INIT UNPROTECTED FIELD GLOBAL      @\n&NUMERIC SETB  0                   INITIALIZE NUMERIC FIELD GLOBAL    @\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.***     GENERATE FINAL DSECT AND ADDRESS TABLES                    ***\n.**********************************************************************\n.FI0000  ANOP                      FINAL ENTRIES                      @\n         AIF   ((&SKIP) OR (&PROT)).FI0010  WAS PREV FIELD ATR = SKIP *\n&EPOS    SETA  &EPOS+1                 BUMP BY ONE TO MISS PREV FIELD *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD INDICATOR              *\n         DC    XL1'F0'             FIELD ATTRIBUTE\n***********************************************************************\n.FI0010  ANOP                                                         *\n&MAP     SETB  0                        SET OFF AFTER FINAL           @\n.**********************************************************************\n         AIF   (NOT &CURSOR).FI0020    NO CURSOR!\n*              SET CURSOR POSITION                                    *\n&XAXIS   SETA  (&CURSOR/64+1)\n&YAXIS   SETA  (&CURSOR-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&FN      SETC  ''\n         AIF   (T'&FLDNAME EQ 'O').CR0000      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,5)          SET DEFAULT VALUE\n&FNM     SETC  'CSR'                    SET DEFAULT VALUE\n&FN      SETC  '&FN&FNM'                SET DEFAULT VALUE\n.CR0000 ANOP\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n&FN      DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'13'             INSERT CURSOR INDICATOR            *\n&CURSOR  SETA  0                       RESET CURSOR POSITION          *\n***********************************************************************\n.FI0020  ANOP\n         AIF   (T'&EQU EQ 'O').FI0040\n&FN      SETC  '&EQU'\n&FN      EQU   *-&MAPNAME\n.FI0040  ANOP\n         AIF   ((NOT &BUFFTB) OR (NOT &ENTS)).MEXIT\n.**********************************************************************\n         AIF   (T'&FLDNAME NE 'O').FI0100      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,4)          SET DEFAULT VALUE\n&FN      SETC  '&FN&SYSNDX'             SET DEFAULT VALUE\n         AGO   .FI0110                 GO PROCESS NEXT ONE\n.FI0100 ANOP\n&FN      SETC  '&FLDNAME'              USE NAME SPECIFIED INSTEAD\n.FI0110 ANOP\n         EJECT\n***********************************************************************\n*              THIS TABLE IS GENERATED FOR THE USER WHEN A MAP OF ALL *\n*        MODIFIABLE ENTRIES IN A '$FLD' LIST IS REQUIRED. THIS MAP    *\n*        CONTAINS THE FOLLOWING ENTRIES:                              *\n*                                                                     *\n*    XL2(....)       THE BUFFER ADDRESS OF THIS FIELD                 *\n*    AL2(..)         THE OFFSET INTO THE MAP, OF THIS FIELD           *\n*    AL2(..)         THE LENGTH-1 OF THIS FIELD                       *\n*                                                                     *\n***********************************************************************\n         CNOP  2,4                     ALIGN ON HALFWORD BOUND\n         DC    H'&ENTS'                TOTAL NUMBER OF ENTRIES\n&FN      DS    0F                      LISTING OF BUFFER ADDRESS TABLE\n.FI0120 ANOP\n&LSTCNT  SETA  &LSTCNT+1               BUMP ENTRY LSTCNT\n         AIF   ((&LSTCNT GT &ENTS) OR (&LSTCNT GT &ENTMAX)).FIEXIT\n         DC    XL2'&ENTRBA(&LSTCNT)'   BUFF ADDR OF CURRENT ENTRY\n         DC    AL2(&ENTOFF(&LSTCNT))   OFFSET OF CURRENT ENTRY\n         DC    H'&ENTLEN(&LSTCNT)'     LENGTH OF CURRENT ENTRY - 1\n         AIF   (&ENTVCN(&LSTCNT) EQ 0).FI0120\n.FI0130 ANOP\n&TCNT1   SETA  &TCNT1+1\n         DC    &ENTVAL(&TCNT1)         VALUES PARAMETER\n         AIF   (&TCNT1 LT &ENTVCN(&LSTCNT)).FI0130\n         AGO   .FI0120                 GO PROCESS NEXT ONE\n.FIEXIT ANOP\n&TCNT1   SETA  (K'&FLDNAME)\n         AIF   (&TCNT1 LE 6).FIEX01\n&TCNT1   SETA  6\n.FIEX01  ANOP\n&FILLCHR SETC  '&FN'\n&FN      SETC  '&FILLCHR'(1,&TCNT1)\n&FNM     SETC  'EL'\n&FN      SETC   '&FN&FNM'\n&FN      EQU   ((*-&FILLCHR)/&ENTS)    LENGTH OF EACH ENTRY\n         DC    X'FFFF'                 END OF TABLE\n         SPACE\n&ENTS    SETA  0                       RESET ENTRY COUNT\n***********************************************************************\n.MEXIT   ANOP                          HERE TO EXIT MACRO             *\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.* *     MNOTE STATEMENTS                                           * *\n.**********************************************************************\n.ERR010  ANOP                           TYPE IN ERROR                 @\n         MNOTE 12,'TYPE = FINAL IS PREVIOUSLY SPECIFIED,'             @\n         AGO   .MAPXIT                  TERMINATE                     @\n         MEXIT                     MACRO EXIT                         @\n.ERR020  ANOP                      LENGTH OPERAND ERROR ENTRY         @\n         MNOTE 12,'INVALID LENGTH OPERAND IS SPECIFIED,'              @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID LENGTH OPERAND IS REQUIRED.'\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .MAPXIT                 TERMINATE GENERATION           @\n.ERR030  ANOP                      POS OPERAND ERROR ENTRY            @\n         MNOTE 12,'INVALID POS OPERAND IS SPECIFIED,'                 @\n.ERR055  ANOP                      POS OPERAND MNOTE ENTRY            @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID POS OPERAND IS REQUIRED WITH MAP MACRO.'      @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .AT0000             GO TO POS OPERAND COMPLETION       @\n.ERR070  ANOP                      INITIAL OPERAND ERROR ENTRY        @\n         MNOTE 8,'INVALID INITIAL OPERAND IS SPECIFIED,'              @\n         MNOTE *,'DEFAULT DATA MUST BE ENCLOSED IN QUOTES,'           @\n         MNOTE *,'INITIAL OPERAND IS IGNORED.'                        @\n         AGO   .LG0020             GO TO INITIAL OPERAND BYPASS       @\n.ERR080  ANOP                      FIELD SPECIFICATION ERROR ENTRY    @\n         MNOTE 8,'FIELD IS DEFINED OUTSIDE OF THE SIZE OPERAND'       @\n         MNOTE *,'MACRO REQUEST IS IGNORED.'                          @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .PO0020             GO TO PAGE SIZE BYPASS             @\n.ERR100  ANOP                      ATR PARAMETER ERROR ENTRY\n         MNOTE 4,'INVALID ATTRIBUTE PARAMETER IS SPECIFIED,'\n         MNOTE *,'ATR = &ATR(&INDEX) IS IGNORED.'\n         AGO   .AT0020             GO TO CHECK INDEX\n.ERR110  ANOP                      INCOMPATIBLE ATR OP ERROR\n&A       SETA  &Y(&A)              SET PARAMETER INDEX VALUE\n&B       SETA  &Y(&B)              SET PARAMETER INDEX VALUE\n         MNOTE 4,'&ATR(&A) AND &ATR(&B) ARE INCOMPATIBLE PARAMETERS,'\n         MNOTE *,'ATR = &ATR(&A) IS IGNORED,'\n         MNOTE *,'ATR = &ATR(&B) IS IGNORED,'\n         MNOTE *,'ATR = SKIP IS ASSUMED BY DEFAULT.'\n&X(1)    SETB  1                   SKIP DEFAULT.\n&C       SETA  2                   SET C FOR CLEARING X TABLE.\n         AGO   .AT0090\n.ERR120  ANOP                      ATR = IC ERROR ENTRY\n         MNOTE *,'ATR = IC IS REQUESTED FOR PROTECTED FIELD'\n         AGO   .AT0070\n.ERR130  ANOP                      ATR = PROT AND NUM ERROR\n         MNOTE *,'ATR = PROT AND NUM ALSO IMPLIES THE SKIP PARAMETER'\n         AGO   .AT0070\n.ERR150  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALID TYPE SPECIFIED'                             *\n.ERR160  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MODEL OPERAND IS REQUIRED && MINIMUM LENGTH IS 6'   *\n         MEXIT\n.ERR170  ANOP                          HERE FOR ERROR                 *\n         MNOTE 16,'SEQUENCE ERROR ENCOUNTERED, EXPANSION TERMINATED'  *\n         MEXIT\n.ERR200  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALIB ''BUFFTAB'' SPECIFICATION'                  *\n         MEXIT\n.ERR190  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION'          *\n         MEXIT\n         MEND\nDSCBZAP  TITLE 'THIS PROGRAM WILL ALLOW THE USER THE ABILITY TO MODIFY A\n                DSCB'\nDSCBZAP  CSECT\n         SAVE  (14,12),,DSCBZAP.&SYSDATE..&SYSTIME.\n         LR    R11,R15                 LOAD PGM'S BASE REG\n         USING DSCBZAP,R11\n         LA    R14,SAVEAREA            A(MY SAVEAREA)\n         ST    R14,8(,R13)             UPDATE FORWARD POINTER\n         ST    R13,4(,R14)             UPDATE BACKWARD POINTER\n         LR    R13,R14                 AND LOAD MY SAVEAREA BASE\n         USING SAVEAREA,R13,R12            AND DEFINE SAME TO ASSEMBLER\n         LA    R12,2048(,R13)          COMPUTE SECOND\n         LA    R12,2048(,R12)                  BASE REG ADDRESS\n         LR    R2,R1                   SAVE CPPL ADDRESS\n         LA    R1,=C'AUTH'\n         SVC   245\n         SPACE\n***********************************************************************\n*        LOCATE THE USER'S ASCB AND SAVE THE USERID                   *\n***********************************************************************\n         L     R15,PSAAOLD-PSA(00)     A(PSA ASCB)\n         L     R15,ASCBASXB-ASCB(R15)  A(ASXB)\n         L     R15,ASXBSENV-ASXB(R15)  A(ASCB)\n         MVC   USERID,ACEEUSER-ACEE(R15)    COPY THE USERID\n         MVC   DEFCSRAD,DSCBPCSR       SAVE INITIAL CURSOR BUFF ADDR\n         SPACE\n***********************************************************************\n*        INITIATE FULL SCREEN PROCESSING                              *\n***********************************************************************\n         STFSMODE ON,INITIAL=YES       INITIATE FULL SCREEN PROCESSING\n         EJECT\n***********************************************************************\n*        SETUP THE CVAF HEADER AND BUFFER LISTS                       *\n***********************************************************************\n         XC    CVAFBUF(BFLHLN+BFLELN),CVAFBUF       RESET BUFFER HEADER\n         OI    BFLHFL,BFLHDSCB         INDICATE READ DSCB'S\n         MVI   BFLHNOE,1               NUMBER OF BUFFER LIST ENTRIES\n         LA    R15,DS1FMTID            A(DSCB DATA AREA)\n         ST    R15,BFLEBUF                 AND UPDATE BUFFER LIST\n         MVI   BFLELTH,LDSCB-44        LENGTH OF DATA AREA (DSCB-44)\n         SPACE\n***********************************************************************\n*        COPY THE DATA SET NAME FROM THE COMMAND BUFFER TO THE DATA   *\n* SET NAME FIELD ON THE PANEL ADDING THE USER ID, IF NECESSARY        *\n***********************************************************************\n         L     R2,CPPLCBUF-CPPL(R2)    LOAD COMMAND BUFFER ADDRESS\n         SLR   R3,R3                   CLEAR WORK REGISTER\n         SLR   R4,R4                   CLEAR WORK REGISTER\n         ICM   R3,B'0011',0(R2)        LENGTH OF COMMAND BUFFER\n         ICM   R4,B'0011',2(R2)        OFFSET TO FIRST OPERAND\n         SR    R3,R4                   COMPUTE LENGTH OF OPERAND\n         SPACE\n         SH    R3,=H'04'                   AND DECREMENT FOR LENGTH FLD\n         BP    *+4+4+4                 DATA SET NAME SUPPLIED?\n         LA    R15,DSNAMEER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                    GO PROCESS ERROR MESSAGE\n         SPACE\n         CH    R3,=H'46'               LENGTH GREATER THAN MAX?\n         BNH   *+4+4+4                     NO, BYPASS DEFAULT\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         B     PROCEMSG                    YES, GENERATE ERROR MESSAGE\n         SPACE\n         STH   R3,LDSNAME                  SAVE LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR EXECUTE\n         LA    R4,4(R2,R4)             ADDRESS DATA SET NAME\n         EX    R3,EXOCINPT             CONVERT TO UPPER CASE\n         EJECT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R15,PDSNAME             A(PANEL DSNAME)\n         LA    R14,DS1DSNAM            A(DSCB DSNAME)\n         CLI   0(R4),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   NOQUOTES                    NO, DO NOT PROCESS QUOTES\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         LA    R4,1(,R4)                   YES, BYPASS FIRST QUOTE\n         BCTR  R3,00                       DECREMENT FOR FIRST QUOTE\n         STH   R3,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR LAST QUOTE\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         B     DSNMOVED\n         SPACE\nEXMVCPDS OC    0(0,R15),0(R4)          MOVE IN DATA SET NAME\nEXMVCDS1 OC    0(0,R14),0(R4)          MOVE IN DATA SET NAME\nPDSUSERI MVC   0(0,R15),USERIDI        MOVE IN USERID\nDS1USERI MVC   0(0,R14),USERIDI        MOVE IN USERID\nEXOCINPT OC    0(0,R4),ALLBLANK        EXECUTED OC\n         SPACE\nNOQUOTES DS    0H\n         SLR   R1,R1                   CLEAR WORK REG\n         IC    R1,USERIDL              AL2(LENGTH OF USERID)\n         SPACE\n         LA    R5,2(,R1)               USERID + DELIMITER + BCTR OFFSET\n         AR    R5,R3                       + LENGTH OF DSNAME\n         STH   R5,LDSNAME              SAVE COMPUTED LENGTH OF DSNAME\n         CH    R5,=H'46'               IS DSNAME GT FIELD LENGTH?\n         BNH   *+4+4+4                     NO, CONTINUE PROCESSING\n         LA    R15,DSNLNGER                YES, PROVIDE FOR ERROR MSG\n         B     PROCEMSG                      AND DISPLAY SAME\n         SPACE\n         BCTR  R1,0                        DECREMENT FOR EXECUTE\n         MVI   0(R15),C''''            MOVE IN A QUOTE\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R1,DS1USERI             MOVE USERID TO DSNAME\n         EX    R1,PDSUSERI             MOVE USERID TO DSNAME\n         LA    R14,1(R1,R14)               AND ADJUST FOR SAME\n         LA    R15,1(R1,R15)               AND ADJUST FOR SAME\n         MVI   0(R14),C'.'             MOVE IN A DELIMITER\n         MVI   0(R15),C'.'             MOVE IN A DELIMITER\n         LA    R14,1(,R14)                 AND ADJUST FOR SAME\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         LA    R15,1(R3,R15)               AND ADJUST FOR SAME\n         MVI   0(R15),C''''            MOVE IN A QUOTE\nDSNMOVED DS    0H\n         EJECT\n***********************************************************************\n*        LOCATE THE DATA SET CATALOG ENTRY                            *\n***********************************************************************\nLOCATELP DS    0H                      LOCATE LOOP\n         XC    LOCWORK(256),LOCWORK          CLEAR FIRST HALF OF WORK\n         XC    LOCWORK+256(256),LOCWORK+256  CLEAR LAST HALF OF WORK\n         MVC   PVOLSER,ALLZEROS        CLEAR VOLSER FIELD\n         LOCATE DSNLOC                 LOCATE DATA SET\n         LTR   R15,R15                 WAS DATA SET FOUND?\n         BZ    *+4+4+4                     YES, BYPASS ERROR MESAGE\n         LA    R15,DSNLOCER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\n         MVC   PVOLSER,LOCWORK+6       SAVE VOL SER\n         SPACE\n***********************************************************************\n*        USING THE UCB LOOKUP PROCESS, LOCATE THE UCB ASSOCIATED WITH *\n*  THE VOLUME SERIAL NUMBER RETRIEVED FORM THE LOCATE PROCESS.        *\n***********************************************************************\nUCBLKPLP DS    0H                      UCB LOOKUP LOOP\n         XC    UCBWORKA,UCBWORKA       CLEAR FOR FIRST TIME THRU\nUCBLOOP  DS    0H                      REQUEST UCB FROM SCAN ROUTINE\n         L     R15,CVTPTR              A(CVT)\n         L     R15,CVTUCBSC-CVT(,R15)  A(UCB SCAN ROUTINE)\n         LA    R1,UCBPARM              A(UCB SCAN ROUTINE PARAMS)\n         BASR  R14,R15                     CALL UCB SCAN ROUTINE\n         LTR   R15,R15                 UCB ADDR RETURNED?\n         BZ    CHECKUCB                    YES, PROCESS THIS ONE\n         SPACE\n         LA    R15,UCBERMSG            A(VOL SER MISSING ERROR MESSAGE)\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\n         SPACE\n         USING UCBOB,15\nCHECKUCB DS    0H                      CHECK FOR MATCHING VOLSER\n         L     R15,UCBADDR             A(UCB ADDRESS)\n         CLC   PVOLSER,UCBVOLI         MATCHING VOLSER?\n         BNE   UCBLOOP                         NO, BUMP TO NEXT UCB\n         SPACE\n         OI    MISCFLAG,NSHARED        DEFAULT TO NON-SHARED DASD\n         TM    UCBTBYT2,UCBRR          IS IT ACTUALLY SHARED?\n         BZ    *+4+4                       NO, BYPASS RESET\n         NI    MISCFLAG,255-NSHARED        YES, RESET NON-SHARED FLAG\n         DROP  15\n         EJECT\n***********************************************************************\n*        DETERMINE WHAT TYPE OF ENQ TO USE.  SYSTEM OR SYSTEMS        *\n***********************************************************************\n         LA    R1,MODELENQ             A('SYSTEM' ENQ LIST)\n         TM    MISCFLAG,NSHARED        IS DASD DEVICE SHARED?\n         BO    *+4+4                       NO, USED DEFAULT ADDRESS\n         LA    R1,MODESENQ             A('SYSTEMS' ENQ LIST)\n         LA    R2,DS1DSNAM             A(RNAME FOR ENQ)\n         LH    R3,LDSNAME              LOAD LENGTH OF DSNAME\n         SPACE\n***********************************************************************\n*        DETERMINE IF THE DATA SET IS AVAILABLE.                      *\n***********************************************************************\n         NI    MISCFLAG,255-ENQUEUE    RESET ENQUEUE BIT\n         ENQ   (,(R2),,(R3),),MF=(E,(1))\n         SPACE\n         LTR   R15,R15                 IS RESOURCE AVAILABLE?\n         BZ    *+4+4                       YES, PROCESS DATA SET\n         OI    MISCFLAG,ENQUEUE            NO, INDICATE SAME\n***********************************************************************\n*        READ THE DSCB INTO STORAGE                                   *\n***********************************************************************\n         L     R2,UCBADDR              LOAD UCB ADDRESS\n         CVAFDIR ACCESS=READ,UCB=(R2),MF=(E,CVAFREQ),BRANCH=(YES,PGM), $\n               BUFLIST=CVAFBUF\n         LTR   R15,R15                 WAS READ SUCCESSFUL?\n         BZ    CREATDTE                    YES, PROCESS DSCB\n         B     CVAFPROC                    NO, PROCESSER ERROR RETURN\n         EJECT\n***********************************************************************\n*        COPY DATE FIELDS INTO THE PANEL                              *\n***********************************************************************\nCREATDTE SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1CREDT            INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PCREDT(2),DWORD             AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1CREDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PCREDT+2(3),DWORD           AND MOVE TO TARGET FIELD\n         SPACE\nREFDATE  SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1REFD             INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD(2),DWORD              AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1REFD+1   INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD+2(3),DWORD            AND MOVE TO TARGET FIELD\n         SPACE\nEXPIRDAT SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1EXPDT            INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT(2),DWORD             AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1EXPDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT+2(3),DWORD           AND MOVE TO TARGET FIELD\n         EJECT\n***********************************************************************\n*        COPY DSORG INTO PANEL                                        *\n***********************************************************************\n         MVC   PDSORG,ALLZEROS         CLEAR FIELD\n         TM    DS1DSORG,DS1DSGIS       INDEXED SEQUENTIAL?\n         BZ    *+4+6+4                     NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'IS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\n         TM    DS1DSORG,DS1DSGPS       PHYSICAL SEQUENTIAL?\n         BZ    *+4+6+4                     NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\n         TM    DS1DSORG,DS1DSGDA       DIRECT ORGANIZATION?\n         BZ    *+4+6+4                     NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'DA'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\n         TM    DS1DSORG,DS1DSGPO       PARTITIONED ORGANIZATION?\n         BZ    *+4+6+4                     NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PO'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\n         TM    DS1DSORG+1,DS1ORGAM     VSAM?\n         BZ    TESTUNMV                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'AM'            YES, INDICATE SAME\nTESTUNMV DS    0H\n         TM    DS1DSORG,DS1DSGU        UNMOVEABLE DATA SET?\n         BZ    *+4+4                       NO, BYPASS MOVE\n         MVI   PDSORG+2,C'U'               YES, INDICATE SAME\n         EJECT\n***********************************************************************\n*        COPY RECFM TO PANEL                                          *\n***********************************************************************\n         MVC   PRECFM,ALLZEROS         CLEAR FIELD\n         TM    DS1RECFM,DS1RECFU       UNDEFINED LENGTH RECORDS?\n         BNO   *+4+4+4                     NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'U'                 YES,INDICATE SAME\n         B     PROCLREC                    GO PROCESS LRECL\n         TM    DS1RECFM,DS1RECFF       FIXED LENGTH RECORDS?\n         BZ    *+4+4+4                     NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'F'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\n         TM    DS1RECFM,DS1RECFV       VARIABLE LENGTH RECORDS?\n         BZ    CHCKBLCK                    NO\n         MVI   PRECFM,C'V'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\nCHCKBLCK DS    0H\n         LA    R14,PRECFM+1            LOAD TARGET ADDRESS\n         TM    DS1RECFM,DS1RECFB       BLOCKED RECORDS?\n         BZ    *+4+4+4                     NO, CHECK SPANNED/STANDARD\n         MVI   0(R14),C'B'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\n         TM    DS1RECFM,DS1RECFS       SPANNED/STANDARD?\n         BZ    *+4+4+4                     NO, PROCESS PRINT CC\n         MVI   0(R14),C'S'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\n         TM    DS1RECFM,DS1RECFA       ANSI CONTROL CHARS?\n         BZ    *+4+4+4+4                   NO, PROCESS PRINT CC\n         MVI   0(R14),C'A'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\n         B     PROCLREC\n         TM    DS1RECFM,DS1RECMC       MACHINE CONTROL CHARS?\n         BZ    *+4+4                       NO, PROCESS LRECL\n         MVI   0(R14),C'M'                 YES, INDICATE SAME\n         EJECT\n***********************************************************************\n*        COPY LRECL, BLOCKSIZE, KEY LENGTH AND RKP TO PANEL           *\n***********************************************************************\nPROCLREC DS    0H\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         ICM   R15,B'0011',DS1LRECL    LOAD THE LRECL\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PLRECL,DWORD                AND MOVE TO TARGET\n         SPACE\n         ICM   R15,B'0011',DS1BLKL     LOAD THE BLOCK SIZE\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15              INSURE PROPER SIGN\n         UNPK  PBLKL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         IC    R15,DS1KEYL             LOAD THE KEY LENGTH\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PKEYL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         ICM   R15,B'0011',DS1RKP      LOAD THE RELATIVE KEY POSITION\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PRKP,DWORD                  AND MOVE TO TARGET FIELD\n         SPACE\n***********************************************************************\n*        COPY LAST USED TRACK AND BLOCK INTO PANEL                    *\n***********************************************************************\n         ICM   R15,B'1110',DS1LSTAR    LOAD LSTAR INTO REG\n         LA    R1,6                    BYTES TO PROCESS\n         LA    R2,PLSTAR               A(TARGET FIELD)\nLSTARLP  DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LSTARLP              LOOP FOR NEXT FOUR BITS\n         TR    PLSTAR,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY TRACK BALANCE INTO PANEL                                *\n***********************************************************************\n         ICM   R15,B'1100',DS1TRBAL    LOAD LSTAR INTO REG\n         LA    R1,4                    BYTES TO PROCESS\n         LA    R2,PTRBAL               A(TARGET FIELD)\nLTRBAL   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LTRBAL               LOOP FOR NEXT FOUR BITS\n         TR    PTRBAL,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY DATA SET INDICATORS INTO PANEL                          *\n***********************************************************************\n         ICM   R15,B'1000',DS1DSIND    LOAD DS INDICATORS\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,PDSIND               A(TARGET FIELD)\nLDSIND   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LDSIND               LOOP FOR NEXT FOUR BITS\n         TR    PDSIND,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY SECONDARY ALLOCATION INFO INTO PANEL                    *\n***********************************************************************\n         TM    DS1SCAL1,DS1CYL         IS IT CYLINDER ALLOCATION?\n         BNO   *+4+4+4                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'C'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\n         TM    DS1SCAL1,DS1TRK         IS IT TRACK ALLOCATION?\n         BNO   *+4+4+4                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'T'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\n         TM    DS1SCAL1,DS1AVR         IS IT BLOCK ALLOCATION?\n         BNO   *+4+4+4                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'B'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\n         TM    DS1SCAL1,DS1AVRND       IS IT BLOCK ROUND ALLOC?\n         BNO   *+4+4+4                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'R'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\n         TM    DS1SCAL1,255            IS IT ABSOLUTE ALLOCATION?\n         BNZ   SCALLAMT                    NO, PROCESS SECONDARY AMOUNT\n         MVI   PSCAL1,C'A'                 YES, INDICATE SAME\n         SPACE\nSCALLAMT DS    0H\n         SLR   R15,R15                 CLEAR WORK REG\n         ICM   R15,B'0111',DS1SCAL3    INSERT SECONDARY AMOUNT\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PSCAL3,DWORD                AND COPY INTO TARGET AREA\n         TM    MISCFLAG,ENQUEUE        IS DATA SET AVAILABLE?\n         BZ    TPUTPANL                    YES, PROCESS IT\n         LA    R15,ENQERMSG                NO, INFORM TERMINAL OPER\n         SPACE\n***********************************************************************\n*        COPY ERROR MESSAGE ONTO PANEL - R15 ADDRESSES THE ERROR MSG  *\n***********************************************************************\nPROCEMSG DS    0H                      POS, MOVE MESSAGE TO PANEL\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R14,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R2,L'PERRMSG                LENGTH OF SAME\n         LH    R1,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R1,R2                   GREATER THAN MAXIMUM?\n         BNH   *+4+2                       NO, CONTINUE\n         LR    R1,R2                       YES, LOAD MAXIMUM LENGTH\n         SR    R2,R1                   COMPUTE REMAINDER\n         BNP   *+4+4                   BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R2,1                    DIVIDE BY TWO\n         LA    R14,0(R2,R14)           CENTER ERROR MESSAGE\n         BCTR  R1,00                   DECREMENT FOR EXECUTE\n         EX    R1,MVCERMSG             MOVE ERROR MESSAGE\n         EJECT\n***********************************************************************\n*        DISPLAY PANEL                                                *\n***********************************************************************\nTPUTPANL DS    0H\n         LA    R0,LPDSCBL              A(LENGTH OF PANEL)\n         LA    R1,DSCBPANL             A(DSCB PANEL)\n         TPUT  (1),(0),FULLSCR         WRITE PANEL TO TERMINAL\n         SPACE\n***********************************************************************\n*        RETRIEVE USER'S INPUT                                        *\n***********************************************************************\n         XC    INPUT(256),INPUT              CLEAR FIRST HALF OF WORK\n         XC    INPUT+256(256),INPUT+256      CLEAR LAST HALF OF WORK\n         LA    R0,L'INPUT              A(LENGTH OF INPUT AREA)\n         LA    R1,INPUT                A(INPUT AREA)\n         TGET  (1),(0),ASIS            GET INPUT FROM TERMINAL\n         SPACE\n         CLI   INPUT,PA2KEY            REDISPLAY REQUESTED?\n         BE    TPUTPANL                    YES, REDISPLAY\n         SPACE\n         CLI   INPUT,PFKEY03           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         CLI   INPUT,PFKEY15           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         SPACE\n         MVC   DSCBPCSR,DEFCSRAD       RESET IC TO DEFAULT CUSOR ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR ERROR MESSAGE\n         LR    R5,R1                   SAVE LENGTH OF TGET DATA\n         LA    R4,INPUT                PRELOAD DATA ADDRESS\n         NI    MISCFLAG,NSHARED+ENQUEUE    RESET ALL BUT REQ'D BITS\n         EJECT\n***********************************************************************\n*        PROCESS INPUT KEYED IN BY USER                               *\n*        INPUT REGS:                                                  *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*        OUTPUT REGS:                                                 *\n*              REG 00 CONTAINS THE ACTUAL LENGTH OF KEYED INPUT DATA  *\n*              REG 01 CONTAINS THE ADDRESS OF KEYED INPUT DATA        *\n*              REG 02 CONTAINS THE LENGTH -1 OF KEYED INPUT DATA      *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*              REG 06 CONTAINS THE ADDR OF THE MATCHING BUFFTAB ENTRY *\n*              REG 07 CONTAINS THE LENGTH OF A BUFFTAB ENTRY          *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*        LOCATE NEXT INPUT FIELD, LENGTH AND MATCHING TABLE ENTRY     *\n***********************************************************************\nINPUT000 DS    0H                      HERE TO PROCESS INPUT DATA\n         LA    R6,PDSCBL-2             A(HALFWORD COUNT OF ENTRIES)\n         LA    R7,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R15,TABLE000            A(INPUT DEPROCESSOR)\n         BASR  R14,R15                 PROCESS INPUT DATA\n         B     INPUT200                ALL DATA PROCESSED\n         SPACE\n         LTR   R6,R6                   MATCHING ENTRY?\n         BNZ   INPUT100                YES, PROCESS IT\n*  POSSIBLE ERROR AT THIS POINT  WHAT TO DO, WHAT TO DO?\n         B     INPUT000                NO BUFFTAB ENTRY, PROCESS NEXT\n         SPACE\n***********************************************************************\n*        RESET ATTRIBUTE BYTE TO NORMAL INTENSITY, UNPROTECTED        *\n***********************************************************************\nINPUT100 DS    0H                      HERE TO PROCESS INPUT DATA\n         LH    R15,2(,R6)              LOAD FIELD OFFSET\n         LA    R15,DSCBPANL(R15)           AND ADDRESS FIELD\n         BCTR  R15,00                  BACK UP TO THE ATTRIBUTE\n         NI    0(R15),64               AND OFF HIGHLIGHT ATTRIBUTE\n         SPACE\n***********************************************************************\n*     LOAD A(ROUTINE) TO PROCESS DATA AND BASR. (IF NOT ERASE INPUT)  *\n***********************************************************************\n         LTR   R0,R0                   ERASE EOF INPUT FIELD?\n         BNP   INPUT000                YES, GET NEXT FIELD\n         EX    R2,INPUTOC              INSURE UPPER CASE\n         LH    R15,6(,R6)              Y(OFFSET INTO ROUTINE TBL)\n         SLL   R15,2                       MULTIPLY BY 4\n         L     R15,TABTABLE(R15)       A(ROUTINE TO DEPROCESS INPUT)\n         BASR  R14,R15                     AND CALL SAME\n         B     INPUT000\n         SPACE 2\nINPUTOC  OC    0(0,R1),ALLBLANK        CONVERT TO UPPER CASE\n         EJECT\n***********************************************************************\n*        TEST FOR MODIFIED FILED(S) AND PROCESS ACCORDINGLY           *\n***********************************************************************\nINPUT200 DS    0H                      HERE AFTER END-OF-INPUT\n         TM    MISCFLAG,IPTDSNAM+IPTVOL  EITHER FIELDS MODIFIED?\n         BZ    INPUT300                    NO, CHECK FOR MODIFIED DSCB\n         BAS   R10,RSETATTR                YES, RESET ALL ATTRIBUTES\n         BAS   R10,CVAFRLSE                YES, RELEASE CVAF BUFFERS\n         TM    MISCFLAG,IPTVOL         VOLUME SERIAL MODIFIED?\n         BO    UCBLKPLP                    YES, GO LOOKUP UCB\n         TM    MISCFLAG,IPTDSNAM       DSNAME MODIFIED?\n         BO    LOCATELP                    YES, GO LOCATED DATA SET\nINPUT300 DS    0H\n         TM    MISCFLAG,IPTERROR       WAS THERE AN ERROR?\n         BO    TPUTPANL                    GO DISPLAY A MESSAGE\n         TM    MISCFLAG,DSCBMOD        WAS THE DSCB MODIFIED?\n         LA    R15,WHATTODO                NO, PROMPT TERM OP FOR INPUT\n         BZ    PROCEMSG                    GO DISPLAY A MESSAGE\n***********************************************************************\n*        REWEITE THE DSCB INTO THE VTOC                               *\n***********************************************************************\n         CVAFDIR ACCESS=WRITE,MF=(E,CVAFREQ),BRANCH=(YES,PGM)\n         LTR   R15,R15                 WAS WRITE SUCCESSFUL?\n         BNZ   CVAFPROC                    NO, GO LOAD IN ERROR MESSAGE\n         LA    R15,DSCBMSG1                YES, ADDRESS SUCCESSFUL MSG\n         B     PROCEMSG                REDISPLAY PANEL\n         EJECT\nENDDSNS  DS    0H\n***********************************************************************\n*        TERMINATE FULL SCREEN PROCESSING                             *\n***********************************************************************\n         STLINENO LINE=1               SET NEXT LINE TO 1\n         SPACE\n         STFSMODE OFF                  RESET FROM FULL SCREEN PROCESS\n         SPACE\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\n         BAS   R10,CVAFRLSE            RELEASE CVAF BUFFERS\n         SPACE\n***********************************************************************\n*        TERMINATE PROGRAM                                            *\n***********************************************************************\n         L     R13,4(,R13)             RESTORE BACKWARD POINTER\n         RETURN (14,12),T,RC=0\n         SPACE\nMVCERMSG MVC   0(0,R14),2(R15)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET NAME.          *\n*   NOTE: IF A DATA SET NAME IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR VOLSER, WILL BE IGNORED.                  *\n***********************************************************************\nIDSNAME  DS    0H\n         OI    MISCFLAG,IPTDSNAM       INDICATE DSN HAS BEEN INPUT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R10,PDSNAME             A(PANEL DSNAME)\n         LA    R9,DS1DSNAM             A(DSCB DSNAME)\n         CLI   0(R1),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   IDSN100                     NO, DO NOT PROCESS QUOTES\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         LA    R1,1(,R1)                   YES, BYPASS FIRST QUOTE\n         BCTR  R2,00                       DECREMENT FOR FIRST QUOTE\n         STH   R2,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R2,00                       DECREMENT FOR LAST QUOTE\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         BR    R14\nIDSNMVC2 MVC   0(0,R10),0(R1)          MOVE IN DATA SET NAME\nIDSNMVC3 MVC   0(0,R9),0(R1)           MOVE IN DATA SET NAME\nIDSNMVC4 MVC   0(0,R10),USERIDI        MOVE IN USERID\nIDSNMVC5 MVC   0(0,R9),USERIDI         MOVE IN USERID\n         SPACE\nIDSN100  DS    0H\n         SLR   R8,R8                   CLEAR WORK REG\n         IC    R8,USERIDL              AL1(LENGTH OF USERID)\n         SPACE\n         LA    R15,1(,R8)              USERID + DELIMITER\n         AR    R15,R0                      + LENGTH OF DSNAME\n         STH   R15,LDSNAME             SAVE COMPUTED LENGTH OF DSNAME\n         CH    R15,=H'46'              IS DSNAME GT FIELD LENGTH?\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         BH    FLDERROR                    YES, GENERATE ERROR MESSAGE\n         SPACE\n         BCTR  R8,0                        DECREMENT FOR EXECUTE\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R8,IDSNMVC5             MOVE USERID TO DSNAME\n         EX    R8,IDSNMVC4             MOVE USERID TO DSNAME\n         LA    R9,1(R8,R9)                 AND ADJUST FOR SAME\n         LA    R10,1(R8,R10)               AND ADJUST FOR SAME\n         MVI   0(R9),C'.'              MOVE IN A DELIMITER\n         MVI   0(R10),C'.'             MOVE IN A DELIMITER\n         LA    R9,1(,R9)                   AND ADJUST FOR SAME\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         LA    R10,1(R2,R10)               AND ADJUST FOR SAME\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         BR    R14\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A VOLUME SERIAL NUMBER.            *\n*   NOTE: IF A VOLUME SERIAL IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR DATA SET NAME, WILL BE IGNORED.           *\n***********************************************************************\nIVOLSER  DS    0H\n         OI    MISCFLAG,IPTVOL         INDICATE VOLSER ENTERED\n         MVC   PVOLSER,ALLZEROS        CLEAR TARGET FIELD\n         EX    R2,IVOLMVC                  AND MOVE IN VOLSER\n         BR    R14\nIVOLMVC  MVC   PVOLSER(0),0(R1)        EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED CREATION DATE.          *\n***********************************************************************\nICREDT   DS    0H\n         MVC   PCREDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ICREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1CREDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1CREDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK CREATION DATE\n         UNPK  PCREDT,DWORD                AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nICREMVC1 MVC   PCREDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED REFERENCE DATE.         *\n***********************************************************************\nIREFD    DS    0H\n         MVC   PREFD,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IREFMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1REFD                 AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1REFD+1       AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK REFERENCE DATE\n         UNPK  PREFD,DWORD                 AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nIREFMVC1 MVC   PREFD(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED EXPIRATION DATE.        *\n***********************************************************************\nIEXPDT   DS    0H\n         MVC   PEXPDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IEXPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1EXPDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1EXPDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK EXPIRATION DATE\n         UNPK  PEXPDT,DWORD                AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nIEXPMVC1 MVC   PEXPDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET ORGINAZATION.  *\n***********************************************************************\nIDSORG   DS    0H\n         MVC   PDSORG,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IDSOMVC1             MOVE INTO PANEL\n         CH    R0,=H'2'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BL    FLDERROR                    NO, REDISPLAY SCREEN\n         LA    R8,DSORGTAB             A(DSORG TABLE)\n         LA    R9,DSORGCNT             A(ENTRY COUNT OF SAME)\nIDSORG00 DS    0H\n         CLC   0(2,R8),0(R1)           COMPARE TABLE ENTRY TO INPUT\n         BE    IDSORG10                    IF EQUAL, PROCESS\n         LA    R8,DSORGLNG(,R8)        BUMP TO NEXT ENTRY\n         BCT   R9,IDSORG00                 AND GO CHECK THAT ONE\n         LA    R15,DSORGER1            A(DSORG ERROR MESSAGE)\n         B     FLDERROR\nIDSORG10 DS    0H\n         XC    FWORD,FWORD             CLEAR WORK AREA\n         CH    R0,=H'3'                WAS UNMOVABLE SPECIFIED?\n         BNE   IDSORG20                    NO, BYPASS IT THEN\n         CLI   2(R1),64                IS THIS A BLANK\n         BE    IDSORG20                    YES, NOT UNMOVEABLE\n         CLI   2(R1),C'U'              IS IT UNMOVEABLE?\n         LA    R15,DSORGER1                NO, INDICATE BAD DSORG\n         BNE   FLDERROR                      AND REDISPLAY SCREEN\n         OI    FWORD,DS1DSGU           INDICATE UNMOVEABLE\nIDSORG20 DS    0H\n         XC    DS1DSORG,DS1DSORG       CLEAR DSORG FIELD\n         OC    DS1DSORG,2(R8)          MOVE IN NEW DSORG\n         OC    DS1DSORG,FWORD              AND ADD 'U', IF SUPPLIED\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14\nIDSOMVC1 MVC   PDSORG(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RECORDING FORMAT.       *\n***********************************************************************\nIRECFM   DS    0H\n         MVC   PRECFM,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IRECMVC1             MOVE TO PANEL\n         LR    R10,R0                  A(COUNT OF CHARS IN INPUT)\n         XC    FWORD,FWORD             CLEAR WORK FIELD\nIRECFM00 DS    0H\n         LA    R8,RECFMTAB             A(RECFM TABLE)\n         LA    R9,RECFMCNT             A(ENTRY COUNT OF SAME)\nIRECFM05 DS    0H\n         CLI   0(R1),64                IS THIS A BLANK?\n         BE    IRECFM25                    YES, BYPASS IT THEN\n         SPACE\nIRECFM10 DS    0H\n         CLC   0(1,R8),0(R1)           MATCHING ENTRY?\n         BE    IRECFM20                    YES, PROCESS\n         LA    R8,RECFMLNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,IRECFM10                 AND GO PROCESS IT\n         LA    R15,RECFMER1            A(INVALID RECFM INPUT)\n         B     FLDERROR                    AND GO PROCESS ERROR\nIRECFM20 DS    0H\n         OC    FWORD(1),1(R8)          SAVE THIS BIT\nIRECFM25 DS    0H\n         LA    R1,1(,R1)               BUMP TO NEXT BYTE\n         BCT   R10,IRECFM00            PROCESS NEXT BYTE OF INPUT\n         SPACE\n         LA    R15,RECFMER1            PRELOAD INVALID RECFM INPUT MSG\n         TM    FWORD,DS1RECFU          WAS UNDEFINED SPECIFID?\n         BNO   IRECFM30                NO, BYPASS NEXT TEST\n         TM    FWORD,255-DS1RECFU-DS1RECFA-DS1RECMC     ANY OTHERS?\n         BNZ   FLDERROR                    YES, ERRONOUS INPUT\nIRECFM30 DS    0H\n         OC    FWORD(1),FWORD          TEST FOR ANY INPUT\n         BZ    FLDERROR                    IF ZERO, INDICATE ERROR\n         SPACE\n         XC    DS1RECFM,DS1RECFM       RESET RECORDING FORMAT\n         OC    DS1RECFM,FWORD              AND SET NEW VALUE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRECMVC1 MVC   PRECFM(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LOGICAL RECORD LENGTH.  *\n***********************************************************************\nILRECL   DS    0H\n         MVC   PLRECL,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ILREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK LRECL\n         UNPK  PLRECL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1LRECL        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILREMVC1 MVC   PLRECL(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED BLOCK SIZE.             *\n***********************************************************************\nIBLKL    DS    0H\n         MVC   PBLKL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IBLKMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK BLKL\n         UNPK  PBLKL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1BLKL         AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIBLKMVC1 MVC   PBLKL(0),0(R1)          EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED KEY LENGTH.             *\n***********************************************************************\nIKEYL    DS    0H\n         MVC   PKEYL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IKEYMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK KEYL\n         UNPK  PKEYL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STC   R15,DS1KEYL                 AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIKEYMVC1 MVC   PKEYL(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RELATIVE KEY POSITION.  *\n***********************************************************************\nIRKP     DS    0H\n         MVC   PRKP,ALLZEROS           CLEAR TARGET FIELD\n         EX    R2,IRKPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PRKP,DWORD                  AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1RKP          AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRKPMVC1 MVC   PRKP(0),0(R1)           EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LSTAR.                  *\n***********************************************************************\nILSTAR   DS    0H\n         MVC   PLSTAR,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ILSTMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STCM  R3,B'0111',DS1LSTAR     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILSTMVC1 MVC   PLSTAR(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED TRACK BALANCE.          *\n***********************************************************************\nITRBAL   DS    0H\n         MVC   PTRBAL,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ITRBMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PTRBAL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R3,B'0011',DS1TRBAL     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nITRBMVC1 MVC   PTRBAL(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DSIND.                  *\n***********************************************************************\nIDSIND   DS    0H\n         MVC   PDSIND,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,IDSIMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1DSIND                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIDSIMVC1 MVC   PDSIND(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC TYPE.            *\n***********************************************************************\nISCALL1  DS    0H\n         MVC   PSCAL1,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC1             MOVE TO PANEL\n         LA    R8,SCAL1TAB             A(TABLE OC ACCEPTABLE VALUES)\n         LA    R9,SCAL1CNT             A(COUNT OF SAME)\nISCALL00 DS    0H\n         CLC   0(1,R8),0(R1)           ENTRIES EQUAL??\n         BE    ISCALL10                    IF EQUAL, PROCESS\n         LA    R8,SCAL1LNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,ISCALL00             PROCESS THIS ENTRY\n         LA    R15,SCALLER             A(ADDRESS ERROR MESSABE)\n         B     FLDERROR\nISCALL10 DS    0H\n         XC    DS1SCAL1,DS1SCAL1       CLEAR ALLOCATION TYPE\n         OC    DS1SCAL1,1(R8)              AND MOVE IN NEW TYPE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC1 MVC   PSCAL1(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC AMOUNT.          *\n***********************************************************************\nISCALL3  DS    0H\n         MVC   PSCAL3,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC2             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK SCALL3\n         UNPK  PSCAL3,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0111',DS1SCAL3        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC2 MVC   PSCAL3(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        CHAR TO HEX CONVERSION ROUTINE                               *\n***********************************************************************\nCONV2HEX DS    0H\n         LR    R8,R1                   LOAD ADDRESS OF SOURCE VALUE\n         LR    R9,R0                   LOAD LOOP COUNTER\n         SLR   R3,R3                   CLEAR TARGET REGISTER\nLOOP2BIN DS    0H\n         SLL   R3,4                    MAKE ROOM FOR NEXT NIBBLE\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,0(0,R8)             INSERT A BYTE\n         N     R15,=F'15'              TURN OFF ALL BUT LAST NIBBLE\n         TM    0(R8),240               IS IT NUMERIC\n         BO    *+4+4                       YES, BYPASS ADD HALFWORD\n         AH    R15,=H'9'               ADD 9 IF NOT A NUMBER\n         OR    R3,R15                  STORE IN RESULT\n         LA    R8,1(0,R8)              NEXT TARGET BYTE\n         BCT   R9,LOOP2BIN             PROCEED THROUGH FULLWORD\n         BR    R10                     RETURN TO CALLER\n         SPACE\n***********************************************************************\n*        FIELD ERROR PROCESSING ROUTINE                               *\n*   ON INPUT: R15 = A(ERROR MESSAGE AREA)                             *\n*             ALL OTHER REGISTERS ARE THE SAME AS UPON INPUT TO A     *\n*             FIELD DE-PROCESSING ROUTINE.                            *\n***********************************************************************\nFLDERROR DS    0H\n         TM    MISCFLAG,IPTERROR       MORE THAN ONE ERROR?\n         BO    FLDERR10                    YES, BYPASS MESSAGE MOVE\n         OI    MISCFLAG,IPTERROR           NO, SET ERROR FLAG\n         MVC   DSCBPCSR,0(R6)          ALTER THE IC BUFF ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R10,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R8,L'PERRMSG                LENGTH OF SAME\n         LH    R9,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R9,R8                   GREATER THAN MAXIMUM?\n         BNH   *+4+2                       NO, CONTINUE\n         LR    R9,R8                       YES, LOAD MAXIMUM LENGTH\n         SR    R8,R9                   COMPUTE REMAINDER\n         BNP   *+4+4                   BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R8,1                    DIVIDE BY TWO\n         LA    R10,0(R8,R10)           CENTER ERROR MESSAGE\n         BCTR  R9,00                   DECREMENT FOR EXECUTE\n         EX    R9,FLDMVC1              MOVE ERROR MESSAGE\n         SPACE\nFLDERR10 DS    0H\n         LH    R8,02(,R6)              LOAD OFFSET TO FIELD\n         LA    R8,DSCBPANL(R8)             AND ADDRESS ACTUAL FIELD\n         BCTR  R8,00                       BACK UP TO ATTRIBUTE BYTE\n         OI    0(R8),X'89'             TURN ON HIGH-INTENS + MDT\n         BR    R14                     RETURN TO MAINLINE\n         TITLE '     TABLE000 -- PROCESS TGET INPUT BUFFER'\n         PUSH  USING\n         DROP  R11                     DROP PREVIOUS BASE REGISTER\n***********************************************************************\n*                                                                     *\n*       THIS ROUTINE WILL PROCESS THE INPUT FROM AN 'ASIS' TGET       *\n*   AGAINST A TABLE OF SBA'S. THE OUTPUT IS THE ADDRESS AND LENGTH    *\n*   OF THE INPUT FIELD AND THE ADDRESS OF THE ENTRY IN THE SBA        *\n*   TABLE WITH THE MATCHING SBA.                                      *\n*       NOTE: IF, BY CHANCE, A FIELD IS FOUND IN THE INPUT STREAM     *\n*   THAT DOES NOT HAVE A MATCHING TABLE ENTRY, REG 06 IS RETURNED     *\n*   EMPTY, BUT THE FIELD ADDRESS AND LENGTHS ARE RETURNED TO THE USER.*\n*                                                                     *\n*   INPUT REGISTERS                                                   *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  BUFFTAB LIST (FROM $FLD GENERATION)                  *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n*   OUTPUT REGISTERS                                                  *\n*        R0   -  ACTUAL LENGTH OF INPUT/ZERO IF 'ERASE EOF' OF FIELD  *\n*        R1   -  ADDRESS OF FIELD IN INPUT                            *\n*        R2   -  LENGTH - 1 OF FIELD IN INPUT                         *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  MATCHING BUFFTAB ENTRY OR ZERO                       *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nTABLE000 DS    0H                      HERE TO PROCESS TGET INPUT\n         USING TABLE000,R15\n         LTR   R5,R5                   ANY THING LEFT TO CHECK?\n         BZ    TABLE050                NO, RETURN TO CALLER\n         SPACE\nTABLE025 DS    0H                      CHECK FOR SBA IN INPUT\n         CLI   0(R4),X'11'             A START FIELD CHARACTER?\n         BE    TABLE100                    YES, GO PROCESS INPUT FIELD\n         LA    R4,1(,R4)                   NO, BUMP AROUND\n         BCT   R5,TABLE025                 GO TEST NEXT BYTE\nTABLE050 DS    0H                      RETURN TO USER WITH NOTHING\n         SLR   R6,R6                   INDICATE NO DATA TO PROCESS\n         BR    R14                     RETURN TO CALLER\n         SPACE\nTABLE100 DS    0H\n         LA    R4,1(,R4)               BUMP AROUND SBA\n         BCT   R5,*+4+4                    DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\n         LH    R2,0(R6)                LOAD NUMBER OF ENTRIES IN TABLE\n         LA    R6,2(,R6)               BUMP TO START OF TABLE\n         EJECT\nTABLE200 DS    0H\n         CLC   0(2,R4),0(R6)           COMPARE SBA TO TABLE ENTRY\n         BE    TABLE300                    BRANCH OUT IF FOUND\n         LA    R6,0(R7,R6)             BUMP TO NEXT TABLE ENTRY\n         BCT   R2,TABLE200             GO CHECK NEXT ENTRY\n         SLR   R6,R6                   INDICATE NO MATCH\n         SPACE\nTABLE300 DS    0H                      A MATCHING TABLE ENTRY (MAYBE)\n         LA    R4,2(R4)                BUMP TO DATA ADDRESS\n         BCTR  R5,00                       AND DECREMENT SAME\n         BCT   R5,*+4+4                    DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\n         LR    R1,R4                   SAVE STARTING ADDRESS\n         SPACE\nTABLE400 DS    0H                      FIND END OF FIELD\n         CLI   0(R4),X'11'             LOOK FOR NEXT FIELD START\n         BE    TABLE500                    AND BRENCH OUT IF FOUND\n         LA    R4,1(,R4)               BUMP ANOTHER BYTE\n         BCT   R5,TABLE400                 AND GO CHECK THIS ONE\n         SPACE\nTABLE500 DS    0H                      HERE AT END OF DATA OR NEXT SBA\n         LR    R2,R4                   PREPARE FOR LENGTH COMPUTATION\n         SR    R2,R1                      AND COMPUTE ACTUAL LENGTH\n         LR    R0,R2                        LOAD IT INTO RETURN REG\n         BCTR  R2,00                          DECREMENT FOR EXECUTE(S)\n         B     4(,R14)                 RETURN TO CALLER\n         POP   USING\n         SPACE\nFLDMVC1  MVC   0(0,R10),2(R15)         EXECUTED MOVE\nNUMBRTRT TRT   0(0,R1),NUMTAB          EXECUTED TRT\nNUMHXTRT TRT   0(0,R1),NUMHEXTB        EXECUTED TRANSLATE AND TEST\nNUMBPACK PACK  DWORD,0(0,R1)           EXECUTED PACK INSTRUCTION\n         TITLE '     CVAFPROC -- GENERATE CVAF ERROR MESSAGE'\n***********************************************************************\n*        ROUTINE TO PROCESS ERROR RETURN FROM CVAF                    *\n***********************************************************************\nCVAFPROC DS    0H\n         USING CVAFMAP,R3\n         LA    R3,CVAFREQ\n*        CLI   CVSTAT,00               ERROR GENERATED?\n*        BE    R14                         NO, BYPASS MSG\nCVAFP010 DS    0H\n         SLL   R15,16                  SHIFT RC TO HIGH ORDER 2 BYTES\n         LA    R1,4                        AND LOAD COUNT OF ENTRIES\n         LA    R2,CVAFRC               A(TARGET AREA)\n         SPACE\nCVAFP020 DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT HALF A BYTE INTO REG\n         STC   R14,0(,R2)              SAVE THIS HALF BYTE\n         LA    R2,1(,R2)                   BUMP TO NEXT TARGET ADDRESS\n         BCT   R1,CVAFP020                 AND PROCESS THAT ONE\n         TR    CVAFRC,TRTAB            TRANSLATE TO PRINTABLE CHARS\n         SPACE\n         LA    R1,CVAFREQ\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,CVSTAT                  AND LOAD STATUS BYTE\n         CVD   R15,DWORD                   CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  CVAFST,DWORD            MOVE TO OUTPUT LINE\n         SPACE\n         MVC   CVAFTYPE,=CL5'READ '    DEFAULT TO READ\n         CLI   CVFCTN,CVDIRD           WAS IT A READ?\n         BE    CVAFP030                    YES, BYPASS WRITE\n         MVC   CVAFTYPE,=CL5'WRITE'        NO, INDICATE IT WAS A WRITE\n         SPACE\nCVAFP030 DS    0H\n         LA    R15,CVAFERR             GET ADDRESS OF MESSAGE\n         B     PROCEMSG                RETURN TO CALLER\n         TITLE '     RSETATTR -- RESET ALL MODIFIABLE FIELD ATTRIBUTES'\n***********************************************************************\n*        ROUTINE TO RESET ALL MODIFIABLE FIELD ATTRIBUTES             *\n***********************************************************************\nRSETATTR DS    0H\n         LA    R1,PDSCBL-2             A(H'ENTRIES IN TABLE')\n         LH    R2,0(R1)                H'ENTRIES IN TABLE'\n         LA    R3,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R1,2(,R1)               A(TABLE PROPER)\n         LA    R4,DSCBPANL             A(PANEL)\nRSET0000 DS    0H                      LOOP THROUGH TABLE\n         LH    R5,2(,R1)               LOAD FIELD OFFSET\n         BCTR  R5,00                   DECREMENT BACK TO ATTRIBUTE\n         AR    R5,R4                   ADD PANEL BASE\n         NI    0(R5),64                RESET TO MODIFIABLE, NORM INTENS\n         LA    R1,0(R3,R1)             BUMP TO NEXT ENTRY\n         BCT   R2,RSET0000                 AND GO PROCESS SAME\n         BR    R10                     RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\nCVAFRLSE DS    0H\n         CVAFDIR ACCESS=RLSE,BUFLIST=0,IXRCDS=NOKEEP,BRANCH=(YES,PGM), $\n               IOAREA=NOKEEP,MF=(E,CVAFREQ)\n         BR    R10                     RETURN TO CALLER\n         SPACE\n         PRINT DATA\n         DC    64S(*)\n         PRINT NODATA\n         TITLE 'WORKING STORAGE AND CONSTANTS'\nSAVEAREA DS    18F\nDWORD    DS    D\nFWORD    DS    F\nALLBLANK DC    256C' '\nALLZEROS DC    256X'00'\nDSNLOC   CAMLST NAME,DS1DSNAM,,LOCWORK\n         DS    0D\nLOCWORK  DS    XL512                   LOCATE WORK AREA\nUCBWORKA EQU   LOCWORK,100\nINPUT    EQU   LOCWORK,512\nLDSNAME  DS    H                       LENGTH OF DS1DSNAM\nDEFCSRAD DS    XL2                     DEFAULT CURSOR BUFF ADDR\n         SPACE\nUCBPARM  DC    A(UCBWORKA)\n         DC    A(UCBDEVCL)\n         DC    A(X'80000000'+UCBADDR)\nUCBADDR  DC    A(0)\nUCBDEVCL DC    X'20'                   DASD DEVICE CLASS\nSYSDSN   DC    CL8'SYSDSN'             QNAME FOR ENQ\n         SPACE\nMODELENQ ENQ   (SYSDSN,,E,,SYSTEM),RET=TEST,MF=L\n         SPACE\nMODESENQ ENQ   (SYSDSN,,E,,SYSTEMS),RET=TEST,MF=L\n         SPACE\nUSERID   DS    0CL9\nUSERIDL  DS    X\nUSERIDI  DS    CL8\n         EJECT\n         LTORG\n         SPACE\n         PRINT NOGEN\nDSNLOCER MSSG  'DATA SET NAME NOT CATALOGED - RESPECIFY'\nENQERMSG MSSG  'DATA SET IS IN USE BY OTHER(S) - MODIFY THIS DSCB WITH $\n               CAUTION'\nDSNAMEER MSSG  'DATA SET NAME NOT SPECIFIED AT CP INVOCATION - RESPECIF$\n               Y'\nDSNLNGER MSSG  'LENGTH OF DSNAME AND USERID GREATER THAN FIELD LENGTH -$\n                RESPECIFY'\nUCBERMSG MSSG  'VOLUME SERIAL REQUESTED NOT ONLINE - RESPECIFY DSN OR V$\n               OL'\nDSORGER1 MSSG  'INVALID DATASET ORGINIZATION - RESPECIFY - PO/PS/DA/IS/$\n               AM (U) ALLOWED'\nRECFMER1 MSSG  'INVALID RECORDING FORMAT - RESPECIFY - F/V/U/B/S/A/M'\nNUMBERER MSSG  'INVALID DATA, FIELD MUST BE ALL NUMERIC'\nHEXER    MSSG  'INVALID DATA, FIELD MUST BE ALL HEXIDECIMAL CHARACTERS'\nLNGTHER1 MSSG  'INVALID DATA, DATA LENGTH MUST MATCH INPUT FIELD LENGTH$\n               '\nSCALLER  MSSG  'SECONDARY ALLOCATION TYPE INVALID - RESPECIFY - C/T/B/R$\n               /U'\nWHATTODO MSSG  'TO TERMINATE, ONE MUST DEPRESS EITHER PFK3 OR PFK15'\nDSCBMSG1 MSSG  'DSCB HAS BEEN SUCCESSFULLY REWRITTEN'\n         SPACE\nCVAFERR  DC    AL2(CVAFERRE-*-2)       LENGTH OF ERROR MESSAGE\n         DC    C'ERROR RETURN FORM CVAF DURING '\nCVAFTYPE DC    CL5' '\n         DC    C', RETURN CODE='\nCVAFRC   DC    XL4'00'\n         DC    C', STATUS='\nCVAFST   DC    CL3' '\nCVAFERRE EQU   *                       END OF ERROR MESSAGE\n         PRINT GEN\n         EJECT\nMISCFLAG DC    B'00000000'\nNSHARED  EQU   B'10000000'             INDICATES UCB NOT SHARED\nIPTDSNAM EQU   B'01000000'             DATA SET NAME HAS CHANGED\nIPTVOL   EQU   B'00100000'             VOLSER PROVIDED BY TERMINAL OPR\nIPTERROR EQU   B'00010000'             INPUT ERROR HAS BEEN ENCOUNTERED\nDSCBMOD  EQU   B'00001000'             DSCB HAS BEEN MODIFIED\nENQUEUE  EQU   B'00000100'             DATA SET IS IN USE\n*        EQU   B'00000010'             UNUSED AT PRESENT\n*        EQU   B'00000001'             UNUSED AT PRESENT\n         SPACE\nTRTAB    DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE\n         SPACE\nNUMTAB   DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMTAB+C'0'             ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nNUMHEXTB DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMHEXTB+C'0'           ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   NUMHEXTB+C'A'           ORG BACK TO HEX CHARS\n         DC    X'000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nDSORGTAB DS    0CL20                   DATASET ORGINAZATION TABLE\n         DC    CL2'IS',AL1(DS1DSGIS,00000000)\nDSORGLNG EQU   *-DSORGTAB              LENGTH OF ONE ENTRY\n         DC    CL2'PS',AL1(DS1DSGPS,00000000)\n         DC    CL2'DA',AL1(DS1DSGDA,00000000)\n         DC    CL2'PO',AL1(DS1DSGPO,00000000)\n         DC    CL2'AM',AL1(00000000,DS1ORGAM)\nDSORGCNT EQU   (*-DSORGTAB)/DSORGLNG   COUNT OF ENTRIES\n         SPACE\nRECFMTAB DS    0CL14                   DATASET RECFM TABLE\n         DC    CL1'F',AL1(DS1RECFF)\nRECFMLNG EQU   *-RECFMTAB              LENGTH OF ONE ENTRY\n         DC    CL1'V',AL1(DS1RECFV)\n         DC    CL1'U',AL1(DS1RECFU)\n         DC    CL1'B',AL1(DS1RECFB)\n         DC    CL1'S',AL1(DS1RECFS)\n         DC    CL1'A',AL1(DS1RECFA)\n         DC    CL1'M',AL1(DS1RECMC)\nRECFMCNT EQU   (*-RECFMTAB)/RECFMLNG   COUNT OF ENTRIES\n         SPACE\nSCAL1TAB DS    0CL14                   SECONDARY ALLOCATION TYPE TABLE\n         DC    CL1'C',AL1(DS1CYL)      CYLINDER BOUNDARY\nSCAL1LNG EQU   *-SCAL1TAB              LENGTH OF ONE ENTRY\n         DC    CL1'T',AL1(DS1TRK)      TRACK BOUNDARY\n         DC    CL1'B',AL1(DS1AVR)      AVR BLOCK\n         DC    CL1'R',AL1(DS1AVRND)    AVG BLOCK AND ROUND\n         DC    CL1'A',AL1(DS1DSABS)    ABSOLUTE TRACK\nSCAL1CNT EQU   (*-SCAL1TAB)/SCAL1LNG   COUNT OF ENTRIES\n         EJECT\nTABTABLE DS    0F\n         DC    A(IDSNAME)\n         DC    A(IVOLSER)\n         DC    A(ICREDT)\n         DC    A(IREFD)\n         DC    A(IEXPDT)\n         DC    A(IDSORG)\n         DC    A(IRECFM)\n         DC    A(ILRECL)\n         DC    A(IBLKL)\n         DC    A(IKEYL)\n         DC    A(IRKP)\n         DC    A(ILSTAR)\n         DC    A(ITRBAL)\n         DC    A(IDSIND)\n         DC    A(ISCALL1)\n         DC    A(X'80000000'+ISCALL3)\n         SPACE 2\nCVAFREQ  CVAFDIR DSN=DS1DSNAM,BUFLIST=CVAFBUF,IOAREA=KEEP,             $\n               IXRCDS=KEEP,MF=L\n         EJECT\nCVAFBUF  ICVAFBFL DSECT=NO\n         EJECT\nDSCB     DS    0F\n         IECSDSL1 (1)                  MAP OUT DSCB FORMAT 1\nLDSCB    EQU   *-DSCB\n         TITLE '              -- DSCB FIELD(S) MAP FOR A MODEL 2'\nDSCBPANL $FLD  TYPE=INIT,MODEL='3278-2',BUFFTAB=YES,OPERATN=WRITERAS,  $\n               FILL=00\n         $FLD  POS=(01,20),ATR=SKIP,                                   $\n               INITIAL='DATA SET CONTROL BLOCK MODIFICATION PANEL'\n         $FLD  POS=(04,18),ATR=SKIP,                                   $\n               INITIAL='DATA SET NAME'\nPDSNAME  $FLD  POS=(04,32),ATR=(IC,UNPR),                              $\n               VALUES=(Y(00)),LENGTH=46\n         EJECT\n         $FLD  POS=(06,18),ATR=SKIP,                                   $\n               INITIAL='VOLUME SERIAL'\nPVOLSER  $FLD  POS=(06,32),ATR=UNPR,                                   $\n               VALUES=(Y(01)),LENGTH=6\n         $FLD  POS=(08,18),ATR=SKIP,                                   $\n               INITIAL='CREATION DATE'\nPCREDT   $FLD  POS=(08,32),ATR=UNPR,                                   $\n               VALUES=(Y(02)),LENGTH=5\n         EJECT\n         $FLD  POS=(09,17),ATR=SKIP,                                   $\n               INITIAL='REFERANCE DATE'\nPREFD    $FLD  POS=(09,32),ATR=UNPR,                                   $\n               VALUES=(Y(03)),LENGTH=5\n         $FLD  POS=(10,16),ATR=SKIP,                                   $\n               INITIAL='EXPIRATION DATA'\nPEXPDT   $FLD  POS=(10,32),ATR=UNPR,                                   $\n               VALUES=(Y(04)),LENGTH=5\n         EJECT\n         $FLD  POS=(12,10),ATR=SKIP,                                   $\n               INITIAL='DATA SET ORGINIZATION'\nPDSORG   $FLD  POS=(12,32),ATR=UNPR,                                   $\n               VALUES=(Y(05)),LENGTH=3\n         $FLD  POS=(13,18),ATR=SKIP,                                   $\n               INITIAL='RECORD FORMAT'\nPRECFM   $FLD  POS=(13,32),ATR=UNPR,                                   $\n               VALUES=(Y(06)),LENGTH=4\n         EJECT\n         $FLD  POS=(14,10),ATR=SKIP,                                   $\n               INITIAL='LOGICAL RECORD LENGTH'\nPLRECL   $FLD  POS=(14,32),ATR=UNPR,                                   $\n               VALUES=(Y(07)),LENGTH=5\n         $FLD  POS=(15,12),ATR=SKIP,                                   $\n               INITIAL='PHYSICAL BLOCK SIZE'\nPBLKL    $FLD  POS=(15,32),ATR=UNPR,                                   $\n               VALUES=(Y(08)),LENGTH=5\n         EJECT\n         $FLD  POS=(16,21),ATR=SKIP,                                   $\n               INITIAL='KEY LENGTH'\nPKEYL    $FLD  POS=(16,32),ATR=UNPR,                                   $\n               VALUES=(Y(09)),LENGTH=3\n         $FLD  POS=(17,10),ATR=SKIP,                                   $\n               INITIAL='RELATIVE KEY POSITION'\nPRKP     $FLD  POS=(17,32),ATR=UNPR,                                   $\n               VALUES=(Y(10)),LENGTH=3\n         EJECT\n         $FLD  POS=(19,06),ATR=SKIP,                                   $\n               INITIAL='LAST USED TRACK AND BLOCK'\nPLSTAR   $FLD  POS=(19,32),ATR=UNPR,                                   $\n               VALUES=(Y(11)),LENGTH=6\n         $FLD  POS=(19,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         $FLD  POS=(20,01),ATR=SKIP,                                   $\n               INITIAL='BYTES REMAINING ON LAST TRACK'\nPTRBAL   $FLD  POS=(20,32),ATR=UNPR,                                   $\n               VALUES=(Y(12)),LENGTH=4\n         EJECT\n         $FLD  POS=(22,12),ATR=SKIP,                                   $\n               INITIAL='DATA SET INDICATORS'\nPDSIND   $FLD  POS=(22,32),ATR=UNPR,                                   $\n               VALUES=(Y(13)),LENGTH=2\n         $FLD  POS=(22,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         $FLD  POS=(23,11),ATR=SKIP,                                   $\n               INITIAL='SECONDARY ALLOCATION'\nPSCAL1   $FLD  POS=(23,32),ATR=UNPR,                                   $\n               VALUES=(Y(14)),LENGTH=1\n         EJECT\nPSCAL3   $FLD  POS=(23,34),ATR=UNPR,                                   $\n               VALUES=(Y(15)),LENGTH=5\nPERRMSG  $FLD  POS=(24,02),ATR=(SKIP,BRT),                             $\n               INITIAL='                                               $\n                                          '\nPDSCBL   $FLD  TYPE=FINAL,BUFFTAB=PDSCBL,EQU=LPDSCBL\nLPDSCB   EQU   (((*-DSCBPANL+7)/8)*8)   LENGTH OF DCT PANEL\n         EJECT\nCVAFMAP  ICVAFPL DSECT=YES,LABELS=YES\n         EJECT\n         IKJCPPL                       CPPL PARAMETER LIST\n         PRINT NOGEN\n         CVT   LIST=YES,DSECT=YES\n         IEFUCBOB LIST=YES\n         IHAPSA\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         PRINT GEN\n         EJECT\n         YREGS ,\n         EJECT\n        $KEYS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZAPDSCB3": {"ttr": 16391, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x15\\x01\\x02\\x10_\\x01\\x17\\x01\\x1f\\x14Q\\t2\\t$\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-04-15T00:00:00", "modifydate": "2017-01-11T14:51:15", "lines": 2354, "newlines": 2340, "modlines": 0, "user": "SBGOLOB"}, "text": "*--------------------------------------------------------------------*\n*        DON'T KNOW WHO WROTE THIS ORIGINALLY                        *\n*        FULL  SCREEN VTOC ZAPPER.                                   *\n*--------------------------------------------------------------------*\n***********************************************************************\n* MODIFIED BY K.M. (SAM) BASS (SBASS,SJB,KBASS,KMB)                   *\n***********************************************************************\n* This version does not need the authorization SVC, but it needs to   *\n* be entered in the IKJTSOxx PARMLIB AUTHCMD list.  If you want an    *\n* easier way to do TSO authorizations, see CBT Files 185 and 797.     *\n* You'll be surprised at what is available to the sysprog..... (SBG)  *\n***********************************************************************\n$ATH$    EQU   242                 AUTHORIZATION SVC\n*--------------------------------------------------------------------*\n*        MSSG    MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n&MSGNAME MSSG  &DATA,&REPLN,&PREFIX=YES\n         LCLC  &FN\n         LCLA  &FL\n         AIF   (T'&DATA NE 'O').IN0100\n         MNOTE 8,'DATA NOT SUPPLIED IN ''MSSG'' GENERATION, EXPANSION T$\n               ERMINATED'\n         MEXIT\n.IN0100  ANOP\n         AIF   (T'&MSGNAME EQ 'O').IN0200\n&FN      SETC  '&MSGNAME'\n         AGO   .IN0300\n.IN0200  MNOTE 4,'MAP NAME NOT SPECIFIED, DEFAULT NAME GENERATED'\n&FN      SETC  'MSSG&SYSNDX'            GENERATE DEFAULT NAME\n.IN0300  ANOP\n         AIF   ('&DATA'(1,1) EQ '''').IN0400     FIRST CHAR A (')?\n         MNOTE 8,'CHARACTER STRING MUST BEGIN AND END WITH A QUOTE - EX$\n               PANSION TERMINATED'\n         MEXIT\n.IN0400  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0500  IS REPLY LENGTH SUPPLIED?\n         AIF   (T'&REPLN EQ 'N').IN0500  IS REPLY LENGTH NUMERIC?\n         MNOTE 8,'''REPLY LENGTH'' VALUE IS NOT NUMERIC - EXPANSION TER$\n               MINATED'\n         MEXIT\n.IN0500  ANOP\n&FN      DS    0H                      ALIGN ON HALFWORD\n&FL      SETA  K'&DATA-2               DEFAULT TO LENGTH OF LITERAL\n&FL      SETA  (((&FL+1)/2)*2)         ROUND TO HALF WORD LENGTH\n         AIF   ('&PREFIX' NE 'YES').IN0550   BYPASS AL2 IF NOT DESIRED\n         DC    AL2(&FL)                LENGTH OF TEXT - ROUNDED TO 2\n.IN0550  ANOP\n         AIF   (T'&REPLN EQ 'O').IN0600  IS REPLY LENGTH SUPPLIED?\n         DC    AL2(&REPLN)             LENGTH OF REPLY EXPECTED\n.IN0600  ANOP\n         DC    CL&FL&DATA\n         MEND\n*--------------------------------------------------------------------*\n*        $KEYS   MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n         $KEYS\n         GBLB  &KEYDEF\n         AIF   (&KEYDEF).MEX2\n&KEYDEF  SETB  1\nPFKEY01  EQU   X'F1'                   EQUATE FOR PFKEY01\nPFKEY02  EQU   X'F2'                   EQUATE FOR PFKEY02\nPFKEY03  EQU   X'F3'                   EQUATE FOR PFKEY03\nPFKEY04  EQU   X'F4'                   EQUATE FOR PFKEY04\nPFKEY05  EQU   X'F5'                   EQUATE FOR PFKEY05\nPFKEY06  EQU   X'F6'                   EQUATE FOR PFKEY06\nPFKEY07  EQU   X'F7'                   EQUATE FOR PFKEY07\nPFKEY08  EQU   X'F8'                   EQUATE FOR PFKEY08\nPFKEY09  EQU   X'F9'                   EQUATE FOR PFKEY09\nPFKEY10  EQU   X'7A'                   EQUATE FOR PFKEY10\nPFKEY11  EQU   X'7B'                   EQUATE FOR PFKEY11\nPFKEY12  EQU   X'7C'                   EQUATE FOR PFKEY12\n         SPACE\nPFKEY13  EQU   X'C1'                   EQUATE FOR PFKEY13\nPFKEY14  EQU   X'C2'                   EQUATE FOR PFKEY14\nPFKEY15  EQU   X'C3'                   EQUATE FOR PFKEY15\nPFKEY16  EQU   X'C4'                   EQUATE FOR PFKEY16\nPFKEY17  EQU   X'C5'                   EQUATE FOR PFKEY17\nPFKEY18  EQU   X'C6'                   EQUATE FOR PFKEY18\nPFKEY19  EQU   X'C7'                   EQUATE FOR PFKEY19\nPFKEY20  EQU   X'C8'                   EQUATE FOR PFKEY20\nPFKEY21  EQU   X'C9'                   EQUATE FOR PFKEY21\nPFKEY22  EQU   X'4A'                   EQUATE FOR PFKEY22\nPFKEY23  EQU   X'4B'                   EQUATE FOR PFKEY23\nPFKEY24  EQU   X'4C'                   EQUATE FOR PFKEY24\n         SPACE\nPA1KEY   EQU   X'6C'                   EQUATE FOR PA1KEY\nPA2KEY   EQU   X'6E'                   EQUATE FOR PA2KEY\nPA3KEY   EQU   X'6B'                   EQUATE FOR PA3KEY\nCLEAR    EQU   X'6D'                   EQUATE FOR CLEAR\nENTER    EQU   X'7D'                   EQUATE FOR ENTER\n.MEX2    ANOP\n         MEND\n*--------------------------------------------------------------------*\n*        $FLD    MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n.*\n.*       KMB   CHANGED &ENTS AND &CURSOR AIFS TO NOT USE TRUE/FALSE\n.*\n&FLDNAME $FLD  &OPTN=2,&LENGTH=,&POS=,&LOC=,&FILL=,                    $\n               &ATR=(SKIP),&INITIAL=,&TYPE=,&EQU=,&VALUES=,            $\n               &MODEL='3276-2',&OPERATN=,&BUFFTAB=NO\n         GBLA  &TLEN               ALGREBRAIC WORK FIELD              *\n         GBLA  &ARG                3270 ATTRIBUTE CHAR RESOLUTION     *\n         GBLA  &MTYPE              TYPE REQUEST                       *\n         GBLA  &CURSOR             CURSOR POSITION                    *\n         GBLA  &OPT                PROCESS OPTION INDICATOR           *\n         GBLA  &PREVPOS            PREVIOUS POSITION                  *\n         GBLA  &LINES              NUMBER OF LINES PER PAGE           *\n         GBLA  &COLS               NUMBER OF COLUMNS PER LINE         *\n         GBLC  &MOD1               TYPE OF CRT BEING USED   32XX      *\n         GBLC  &MOD2               MODEL OF CRT BEING USED      -N    *\n         GBLA  &SCRSIZE            TOTAL AREA OF SCREEN               *\n         GBLA  &GLENGTH            FIELD LENGTH                       *\n         GBLA  &EPOS               FIELD ENDING POSITION              *\n         GBLA  &NLOC               CURRENT FIELD LOCATION             *\n         GBLA  &PLOC               PREVIOUS (NEXT) LOCATION           *\n         GBLB  &MAP                FIRST TIME CONDITION SWITCH        *\n         GBLB  &DEFAULT            INITIAL = USER DEFAULT DATA        *\n         GBLB  &DATAIND            DATA FIELD INDICATOR               *\n         GBLB  &PEN                ATR = DET                          *\n         GBLB  &KEYED              ATR = UNPROT                       *\n         GBLB  &IC                 ATR = IC                           *\n         GBLB  &NUMERIC            NUMERIC FIELD INDICATOR\n         GBLB  &SEQ                FIELDS OUT OF SEQUENCE IND         *\n         GBLB  &SKIP               1 IF ATR = SKIP, 0 ALL OTHERS      *\n         GBLB  &PROT               1 IF ATR = PROT, 0 ALL OTHERS      *\n.*       GBLC  &DEVICE             DIVICE TYPE INDICATOR              *\n         GBLC  &FN                 FIELD NAME                         *\n         GBLC  &ATRC               3270 ATTRIBUTE CHARACTER           *\n         LCLA  &REQ                REPLY REQUIRED INDICATOR           *\n         LCLA  &FPOS               FIELD POSITION                     *\n         LCLA  &FLAG               FIELD DESCRIPTOR FLAG              *\n         LCLC  &FILLCHR            FILLER USED INSTEAD OF INITIAL     *\n         GBLC  &GFILL              TYPE=INIT SPECIFICATION OF FILL    *\n         LCLC  &OPER               TYPE OF READ/WRITE OPERATION       *\n         LCLB  &ABORT              ABORT INDICATOR                    *\n         LCLB  &X(10),&XON\n         LCLA  &COUNT,&INDEX,&HIGH,&A,&B,&C\n         LCLA  &Y(10)\n         LCLA  &XAXIS                  X AXIS BUFFER ADDRESS          *\n         LCLA  &YAXIS                  Y AXIS BUFFER ADDRESS          *\n         LCLC  &XCHAR                  X AXIS CHARACTER               *\n         LCLC  &YCHAR                  Y AXIS CHARACTER               *\n         GBLC  &ADDRCHR                ADDRESS CHARACTER STRING       *\n         GBLB  &DOCSW                  DOCUMENTATION PRINT SWITCH     *\n         GBLC  &MAPNAME                NAME OF THIS $FLD MAP          *\n.************************ BUFFER TABLE ENTRIES ************************\n         GBLB  &BUFFTB                 BUFFER ADDRESS TABLE REQUESTED *\n.*       TO CHANGE NUMBER OF ENTRIES, CHANGE THE SUBSCRIPT VALUE      *\n.*             HERE AND THE SETA VALUE FOR &ENTS                      *\n         GBLA  &ENTLEN(256)            BUFFER ENTRY LENGTH - 1        *\n         GBLA  &ENTVCN(256)            NUMBER OF VALUES PER ENTRY     *\n         GBLC  &ENTOFF(256)            BUFFER ENTRY OFFSET            *\n         GBLC  &ENTRBA(256)            BUFFER ENTRY RBA               *\n         GBLC  &ENTVAL(768)            BUFFER ENTRY VALUES 3/ENTRY    *\n         GBLA  &ENTMAX                 MAXIMUM BUFFER ENTRIES         *\n         GBLA  &ENTS                   NUMBER OF BUFFER ENTRIES       *\n         GBLA  &VALCNT                 NUMBER OF TOTAL 'VALUES' ENTRIES\n         LCLA  &LSTCNT                 NUMBER OF ENTRIES PROCESSED    *\n         LCLA  &TCNT1                  WORK COUNTER                   *\n         LCLC  &FNM                    NAME TO BE USED ON DS          *\n.**********************************************************************\n.* *     ANALYZE OPERANDS                                           * *\n.**********************************************************************\n         AIF   (&MAP).IN0100                FIRST TIME THRU ???       @\n         AIF   (T'&TYPE EQ 'O').ERR140      MUST SUPPLY TYPE          *\n         AIF   ('&TYPE' EQ 'INIT').IN0005   MUST SUPPLY INIT FIRST    *\n.ERR140  MNOTE 4,'''INIT'' MUST BE SPECIFIED FOR FIRST INVOCATION OF TH$\n               IS MACRO'                     ERROR IF NOT             *\n.IN0005  ANOP                          HERE AFTER MNOTE               *\n&MAP     SETB  1                        SET ON FIRST TIME THRU        @\n.*       CHANGE THIS SETA IF CHANGING MAXIMUM SUBSCRIPT VALUE         *\n&ENTMAX  SETA  256                      MAXIMUM BUFFER ENTRIES        @\n&VALCNT  SETA  0                        RESET VALUE COUNTER           @\n&MTYPE   SETA  0                        RESET MAY INDICATOR           *\n&PREVPOS SETA  0                        RESET PREVIOUS POS INDICATOR  *\n&SKIP    SETB  1                        INITIALIZE SKIP INDICATOR     *\n&PLOC    SETA  1                        INITIALIZE LOCATION COUNTER   *\n&ADDRCHR SETC  'Z40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F50D1D2D3D4D5D6D7D8D95A$\n               5B5C5D5E5F6061E2E3E4E5E6E7E8E96A6B6C6D6E6FF0F1F2F3F4F5F6$\n               F7F8F97A7B7C7D7E7F'\n.*             THE Z AT THE BEGINNING OF THE TABLE IS TO OFFSET THE   *\n.*       MULTIPLICATION BY 2. THE OFFSET INTO THE TABLE IS BASED ON   *\n.*       AN INITIAL VALUE OF ONE (1) NOT ZERO (0).                    *\n.**********************************************************************\n.MOD000  ANOP                          HERE TO VERIFY CTR             *\n         AIF   (T'&MODEL EQ 'O').ERR160      WAS MODEL SUPPLIED       *\n         AIF   (K'&MODEL LT 6).ERR160       IS ALL OF IT THERE        *\n         AIF   ('&MODEL'(1,1) EQ '''').MOD010 IS IT WITHIN QUOTES     *\n&MOD1    SETC  '&MODEL'(1,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(6,1)             SET UP CRT MODEL             *\n         AGO   .MOD020                      BYPASS FOLLOWING          *\n.MOD010  ANOP                          HERE TO PROCESS QUOTES         *\n&MOD1    SETC  '&MODEL'(2,4)             SET UP CRT TYPE              *\n&MOD2    SETC  '&MODEL'(7,1)             SET UP CRT MODEL             *\n.MOD020  AIF   (&MOD1 EQ 3275 OR &MOD1 EQ 3277).MOD030                *\n         AIF   (&MOD1 EQ 3276 OR &MOD1 EQ 3278).MOD040                *\n.ERR180  MNOTE 8,'MODEL=&MODEL NOT ACCEPTABLE TO THIS MACRO'          *\n         MEXIT\n.MOD030  ANOP                          HERE FOR 3275'S                *\n         AIF   (&MOD2 EQ 2).MOD050     LARGE SCREEN                   *\n         AIF   (&MOD2 NE 1).ERR180     NOT SMALL SCREEN               *\n&LINES   SETA  12                      SET ROWS                       *\n&COLS    SETA  40                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD050  ANOP                          HERE FOR 3277'S                *\n&LINES   SETA  24                      SET ROWS                       *\n&COLS    SETA  80                      SET COLUMNS                    *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD040  ANOP                          HERE FOR NEW DEVICES           *\n&COLS    SETA  80                      ALL HAVE 80 COLUMNS            *\n         AIF   (&MOD2 EQ 1).MOD060     SMALL SCREEN CRT               *\n         AIF   (&MOD2 EQ 2).MOD070     LARGE SCREEN CRT               *\n         AIF   (&MOD2 EQ 3).MOD080     BIG SCREEN CRT                 *\n         AIF   (&MOD2 NE 4).ERR180     BIGGIE SCREEN CRT              *\n&LINES   SETA  43                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD060  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  12                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD070  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  24                      SET ROWS                       *\n         AGO   .MOD090                 BYPASS FOLLOWING CODE          *\n.MOD080  ANOP                          HERE FOR ROWS                  *\n&LINES   SETA  32                      SET ROWS                       *\n.MOD090  ANOP                          HERE WHEN ROWS & COLS DEFINED  *\n&SCRSIZE SETA  &COLS*&LINES            DEFINE MAXIMUM SCREENSIZE      *\n         AIF   (T'&OPTN EQ 'O').IN0010  IS OPTION GIVEN ???           *\n&OPT     SETA  &OPTN                    YES, SAVE VALUE               *\n.**********************************************************************\n         AGO   .IN0020                  CONTINUE                      *\n.IN0010  ANOP                           SUBSTITUTE OPTION VALUE       *\n&OPT     SETA  2                           DOCUMENTATION ONLY         *\n.**********************************************************************\n.IN0020  ANOP                           TEST IF DOCUMENTATION REQ.    *\n         AIF   (T'&FILL EQ 'O').IN0030  IS OPTION GIVEN ???           *\n&GFILL   SETC  '&FILL'                  SET FILL CHARACTER\n.IN0030  ANOP\n***********************************************************************\n MNOTE *,'        OPTIONS IN EFFECT-----------    '\n MNOTE *,'                                        '\n MNOTE *,'                 ROWS........ &LINES    '\n MNOTE *,'                 COLUMNS..... &COLS     '\n MNOTE *,'                 CHARACTERS.. &SCRSIZE  '\n***********************************************************************\n         SPACE\n         AIF   (&DOCSW).IN0050     HAS DOCUMENTATION PRINTED ONCE?    *\n&DOCSW   SETB  1                   SET DOCUMEMTATION PRINTED FLAG     *\n***********************************************************************\n*     MAP GENERATION PARAMETERS, THEIR USE AND DEFAULTS               *\n*                                                                     *\n*     INITIAL ENTRY (MUST BE GIVEN TO SET VARIOUS OPTIONS)            *\n*                                                                     *\n*        MAP   OPTN=1,MODEL='32XX-N',TYPE=INIT,BUFFTAB=XXX            *\n*                                                                     *\n*           MODEL  TO SPECIFY THE TERMINAL TYPE (AND SCREEN SIZE),    *\n*                  THE DEFAULT IS SET TO 24 ROWS, AND 80 COLUMNS PER  *\n*                  ROW. MAXIMUM IS 43 BY 80. THE ACCEPTABLE VALUES    *\n*                  AND THEIR GENERATED SCREEN SIZES ARE AS FOLLOWS:   *\n*                                                                     *\n*      MODEL ROWS COLS CHARS         MODEL ROWS COLS CHARS            *\n*                                   3276-1  12   80    960            *\n*     3275-1  12   40    480        3276-2  24   80   1920            *\n*     3275-2  24   80   1920        3276-3  32   80   2560            *\n*                                   3276-4  43   80   3440            *\n*                                                                     *\n*                                   3278-1  12   80    960            *\n*     3277-1  12   40    480        3278-2  24   80   1920            *\n*     3277-2  24   80   1920        3278-3  32   80   2560            *\n*                                   3278-4  43   80   3440            *\n*                                                                     *\n*           OPTN   THIS PARAMETER IS USED TO SET ONE OF THE           *\n*                  FOLLOWING OPTIONS.......                           *\n*                                                                     *\n*                        OPTN=1  - DOCUMENTATION GENERATION.          *\n*                        OPTN=2  - DOCUMENTATION & DATA DECLARATION.  *\n*                                                                     *\n*              NOTE: (TYPE=INIT AND MODEL=32NN-N MUST BE SPECIFIED TO *\n*                      PREVENT MNOTE ERRORS FOR DOCUMENTATION ONLY.)  *\n*                                                                     *\n*           OPERATN THIS PRAMETER IS USED TO SPECIFY THE TYPE OF      *\n*                   OPERATION TO BE USED. THE ACCEPTABLE VALUES ARE:  *\n*                                                                     *\n*               READ     -  FULL BUFFER READ                          *\n*               READMOD  -  READ MODIFIED FIELDS ONLY                 *\n*                                                                     *\n*               WRITE    -  WRITE / WITHOUT ERASE OPERATION           *\n*               WRITERAS -  WRITE / ERASE ALL FIELDS                  *\n*               WRITERUP -  WRITE / ERASE UNPROTECTED FIELDS ONLY     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        BUFFTAB=XXX      THIS ENTRY MAY BE USED TO GENERATE A TABLE  *\n*               OF ALL USER MODIFIABLE ENTRIES IN THIS MAP. THIS TABLE*\n*               CONTAINS AN ENTRY FOR EACH OF THE FOLLOWING:          *\n*                                                                     *\n*        BUFFER ADDRESS - THE BUFFER ADDRESS OF AS GENERATED BY THIS  *\n*                         MAP. NOTE: ONLY MODIFIABLE FIELDS ARE       *\n*                         PROCESSED.                                  *\n*        OFFSET         - THE OFFSET OF THIS FIELD FROM THE BEGINNING *\n*                         OF THIS FIELD MAP.                          *\n*        LENGTH         - THE LENGTH OF THIS FIELD, LESS ONE BYTE.    *\n*                                                                     *\n*        THE VALID OPTIONS AND WHEN THE ARE USED ARE AS FOLLOWS:      *\n*                                                                     *\n*        NO    -  USED WITH 'TYPE=INIT' TO BYPASS TABLE GENERATION.   *\n*                 THIS IS THE DEFAULT VALUE.                          *\n*        YES   -  USED WITH 'TYPE=INIT' TO REQUEST TABLE GENERATION.  *\n*                                                                     *\n*              ADDITIONALLY, YOU MAY SPECIFY PARAMETERS TO BE         *\n*        INCLUDED IN THE GENERATION OF THIS TABLE. THEY MAY BE PASSED *\n*        VIA THE PARAMETER 'VALUES'. AN EXAMPLE OF HOW THIS PARAMETER *\n*        IS USED IS DISPLAYED BELOW. NOTE: TWO RESTRICTIONS EXIST.    *\n*        THEY ARE: 1) A MAXIMUM OF THREE ENTRIES ARE ALLOWED PER $FLD *\n*        SPECIFICATION, AND 2) THIS VALUE IS ALLOWABLE ONLY ON FIELDS *\n*        THAT ARE FLAGGED AS MODIFIABLE BY THE USER. ALSO, YOU ARE    *\n*        RESPONSIBLE FOR MAINTAINING ALIGNMENT. THE BASIC TABLE IS SIX*\n*        (6) BYTES LONG AND IS INITIATED ON A FULLWORD BOUNDARY.      *\n*                                                                     *\n*      FSTART  $FLD   TYPE=INIT,BUFFTAB=YES                           *\n*      FIELD1  $FLD   POS=(10,30),INITIAL='.....',ATR=IC,             *\n*                     VALUES=(X'01',X'4E',A(PARAM))                   *\n*      FTABLE  $FLD   TYPE=FINAL                                      *\n*                                                                     *\n*        THIS WOULD GENERATE A BUFFER ADDRESS TABLE AS FOLLOWS:       *\n*                                                                     *\n*FTABLE  DS    0F                                                     *\n*        DC    XL2'4B6E'               BUFF ADDR OF CURRENT ENTRY     *\n*        DC    AL2(FIELD1-FSTART)      OFFSET TO CURRENT ENTRY        *\n*        DC    AL2(4)                  LENGTH OF CURRENT ENTRY - 1    *\n*        DC    X'01'                   VALUES PARAMETER               *\n*        DC    X'4E'                   VALUES PARAMETER               *\n*        DC    A(PARAM)                VALUES PARAMETER               *\n*                                                                     *\n*        NOTE: THIS TABLE IS A MULTIPLE OF 4 BYTES. (USER CONTROLLED) *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*     FIELD LAYOUT ENTRIES (ONE PER FIELD)                            *\n*                                                                     *\n*        $FLD  POS=(10,1),ATR=(SKIP),INITIAL='A',LOC=NNN,TYPE=REQ     *\n*                                    LENGTH=1                         *\n*                                                                     *\n*           POS    TO SPECIFY ROW AND COLUMN NUMBERS. TRY NOT TO      *\n*                  USE ROW 24, IT IS USED BY THE SYSTEM.              *\n*                                                                     *\n*           ATR    THIS PARAMETER IS USED TO DEFINE THE DATA FIELD    *\n*                  ATTRIBUTE CHARACTERISTICS.                         *\n*                                                                     *\n* ATR=(SKIP)  PROTECTED FIELD       *  ATR=(BRT)  HIGH INTENSITY FIELD*\n* ATR=(PROT)  PROTECTED FIELD       *  ATR=(DRK)  NON-DISPLAY FIELD   *\n* ATR=(UNPR)  MODIFIABLE FIELD      *  ATR=(MDT)  MODIFIED DATA TAG ON*\n* ATR=(NUM)   NUMERIC DATA ONLY     *  ATR=(IC)   INSERT CURSOR       *\n* ATR=(DET)   LIGHT PEN DETECTALBE  *  ATR=(NORM) NORMAL INTENSITY    *\n*                                                                     *\n*             DO NOT USE THE FOLLOWING COMBINATIONS.......            *\n*           ATR=(SKIP,UNPR)                 ATR=(DRK,NORM)            *\n*           ATR=(PROT,UNPR)                 ATR=(SKIP,IC)             *\n*           ATR=(DET,DRK)                   ATR=(PROT,IC)             *\n*           ATR=(BRT,DRK)                   ATR=(PROT,NUM)            *\n*           ATR=(BRT,NORM)                                            *\n*                                                                     *\n*           LENGTH TO SPECIFY LENGTH OF FIELD WHEN 'INITIAL' IS       *\n*                  NOT GIVEN. DO NOT USE WHEN INITIAL VALUE IS        *\n*                  GIVEN.                                             *\n*           INITIAL USED TO DECLARE CONSTANT SCREEN DATA. THIS        *\n*                  SHOULD ALWAYS BE USED TO SHOW THE TYPE OF DATA     *\n*                  TO BE DISPLAYED.                                   *\n*           LOC    THIS PARAMETER IS USED TO DEFINE THE RELATIVE      *\n*                  LOCATION OF THE DATA FIELD WITHIN THE USER AREA.   *\n*                  DO NOT SPECIFY ON ANY OTHER THAN INPUT DATA.       *\n*           TYPE   TYPE=INIT IS REQUIRED FIRST TIME THRU TO SET UP    *\n*                  INITIAL VALUES AND DOCUMENTATION PRINT.            *\n*                  TYPE=FINAL IS NEEDED TO TERMINATE THE CURRENT      *\n*                  MAP AND TO INSERT ANY CURSOR SPECIFIED.            *\n*                                                                     *\n*      FTABLE  $FLD   TYPE=FINAL,EQU=XXXXXX                           *\n*                                                                     *\n*        TYPE=FINAL  CAUSES THE INSERT CURSOR STRING TO BE PLACED     *\n*                    AT THE END OF THE FIELD DEFINITION. THIS POSITION*\n*                    IS REQUIRED FOR TCAM.                            *\n*        EQU=XXXXX   WILL GENERATE AN EQU, WITH XXXXX AS THE NAME,    *\n*                    WITH THE LENGTH OF THIS DISPLAY AS THE VALUE.    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n.IN0050  ANOP\n         AIF   (&OPT EQ 1).MAPXIT          EXIT IF DOCUMENTATION ONLY *\n         AIF   (&OPT EQ 2).IN0055          CONTINUE IF VALID OPTION   *\n         MNOTE 4,'INVALID OPTION SPECIFIED, OPTION=2 ASSUMED'\n.IN0055  ANOP\n         AIF   ('&BUFFTAB'(1,1) EQ 'N').IN0057    BUFFER TABLE REQ?\n         AIF   ('&BUFFTAB'(1,1) NE 'Y').ERR200    IF NOT, ERROR\n&BUFFTB  SETB  1                       YES, INDICATE SO\n&ENTS    SETA  0                       RESET ENTRY COUNT\n.IN0057  ANOP\n.*  &FLDNAME CSECT                                                    *\n         AIF   (T'&FLDNAME EQ 'O').IN0060\n&FN      SETC  '&FLDNAME'              GENERATE DEFAULT NAME\n         AGO   .IN0065\n.IN0060  ANOP\n         AIF   (NOT &BUFFTB).IN0065     BYPASS IF BUFFTAB NOT REQUESTED\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.IN0065  ANOP\n&FN      DS    0F                                                     *\n&FPOS    SETA  4\n&MAPNAME SETC  '&FN'                   SAVE MAP NAME\n         AIF   (T'&OPERATN EQ 'O').MAPXIT    IF OMITTED, BYPASS REST  *\n         AIF   ('&OPERATN'(1,4) EQ 'READ').IN0080  GO TO READ         *\n         AIF   ('&OPERATN'(1,5) EQ 'WRITE').IN0070  CHECK TYPE        *\n         MNOTE 8,'TYPE OF OPERATION SPECIFIED IS UNACCEPTABLE'\n         MEXIT\n.IN0070  ANOP\n         AIF   ('&OPERATN'(5,4) EQ 'ERAS').IN0072  ERASE WRITE        *\n         AIF   ('&OPERATN'(5,4) EQ 'ERUN').IN0074  ERASE UNPROT       *\n&OPER    SETC  'F1'                    DEFAULT TO NORMAL WRITE        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0072  ANOP\n&OPER    SETC  'F5'                    DEFAULT TO WRITE ERASE         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0074  ANOP\n&OPER    SETC  '6F'                    DEFAULT TO ERASE UNPROT        *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0080  ANOP                          HERE FOR READ OPERATIONS       *\n         AIF   ('&OPERATN'(5,3) EQ 'MOD').IN0082  READ MODIFY         *\n&OPER    SETC  'F2'                    DEFAULT TO NORMAL READ         *\n         AGO   .IN0090                 GO GEN CHAR STRING             *\n.IN0082  ANOP                          HERE FOR READ MODIFIED         *\n&OPER    SETC  'F6'                    DEFAULT TO READ MODIFIED       *\n.IN0090  ANOP\n         DC    XL3'27&OPER.C1'                                        *\n         AGO   .MAPXIT                  EXIT ON FIRST TIME THRU       *\n.**********************************************************************\n.IN0100  ANOP                           BYPASS AFTER FIRST TIME THRU  *\n         AIF   (&MTYPE EQ 2).ERR010     ERROR IF PREV. ENTRY FINAL    @\n         AIF   (T'&TYPE EQ 'O').IN0110  IS THIS FINAL ENTRY ???       @\n         AIF   ('&TYPE' NE 'FINAL').ERR150   REPLY REQUIRED ???       *\n&MTYPE   SETA  2                        YES, SET INDICATOR            @\n         AGO   .FI0000                  GO PROCESS FINAL ENTRY        @\n.IN0110  ANOP                           SET UP FIELD NAME             @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF LENGTH/INITIAL OPERAND              *\n.**********************************************************************\n         AIF   (T'&LENGTH EQ 'O').LG0010 LENGTH NOT GIVEN             5\n&GLENGTH SETA  &LENGTH                 SET FIELD LENGTH               @\n         AGO   .LG0030                 BYPASS LENGTH SUBSTITUTION     @\n.LG0010  ANOP                          USE LENGTH OF DEFAULT VALUE    @\n         AIF   (T'&INITIAL EQ 'O').LG0020 IF NOT GIVEN DEFAULT TO ONE 5\n         AIF   ('&INITIAL'(1,1) NE '''').ERR070 YES, FIRST CHAR A (') ?\n&GLENGTH SETA  K'&INITIAL-2            DEFAULT TO LENGTH OF LITERAL   @\n&DEFAULT SETB  1                        YES, SET DEFAULT GLOBAL       @\n         AGO   .LG0030                 END OF LENGTH GENERATION       5\n.LG0020  ANOP                          LENGTH DEFAULT SETUP           5\n&GLENGTH SETA  1                       DEFAULT TO LENGTH OF ONE       @\n.LG0030  ANOP                          VALIDATE LENGTH VALUE ASSIGNED 5\n.*       AIF   (&GLENGTH GT 256).ERR020 TOO LONG   DELETED BY LGN 7906*\n         AIF   (&GLENGTH LT 1).ERR020  NOT LONG ENOUGH                @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF FILL OPERAND                        *\n.**********************************************************************\n         AIF   (T'&FILL NE 'O').FILL10  IS OPTION GIVEN ???           *\n&FILLCHR SETC  '&GFILL'                 SET FILL CHARACTER\n         AGO   .FILL20\n.FILL10  ANOP\n&FILLCHR SETC  '&FILL'                  SET FILL CHARACTER\n.FILL20  ANOP\n.PO0000  ANOP                          END OF FIELD LENGTH PARAMETER  @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF POS OPERAND                         *\n.**********************************************************************\n         AIF   (T'&POS EQ 'O').ERR030  IS POS = NULL ?                @\n&FPOS    SETA  &POS(1)                                                @\n         AIF   (N'&POS LT 2).PO0020    ACTUAL POSITIONS SPECIFIED ??? @\n         AIF   (&POS(1) LT 1 OR &POS(1) GT &LINES).ERR030 LINE VALID ?\n         AIF   (&POS(2) LT 1 OR &POS(2) GT &COLS).ERR030  YES, COL   ?\n&FPOS    SETA  (((&POS(1)-1)*(&COLS))+(&POS(2)-1)) YES, CONVERT IT    @\n         AGO   .PO0030                                                @\n.PO0020  ANOP                                                         @\n         AIF   (&FPOS-&EPOS GT 0).PO0030    WILL FIELD OVERLAP?       *\n         MNOTE 4,'POSITION ADJUSTED TO PREVENT FIELD OVERLAY'         *\n&FPOS    SETA  &EPOS+1                 PREVIOUS ENDING POS + ONE      *\n         AGO   .PO0040                 BYPASS FOLLOWING CODE          *\n.PO0030  ANOP\n         AIF   (&SKIP).PO0040          WAS PREV FIELD ATR = SKIP  ???\n         AIF   (&FPOS-&EPOS EQ 1).PO0040 IF ONLY ONE BYTE --          *\n         DC    X'1D7C'                 CAUSE SKIP FROM LAST FIELD     *\n.PO0040  ANOP                          GAP FIELD GENERATION RETURN PT\n&EPOS    SETA  (&FPOS+&GLENGTH)             CALCULATE ENDING POSITION *\n         AIF   (&SCRSIZE LT &EPOS).ERR080 OUTSIDE OF PAGE ?           *\n.PO0060  ANOP                         NO, END OF POSITION OPERAND     @\n         AIF   (&FPOS GE &PREVPOS).PO0070  ARE FIELDS IN SEQUENCE ?   @\n&SEQ     SETB  1                      NO, SET OUT OF SEQUENCE IND     @\n         AGO   .ERR170                THEN TERMINATE THIS EXPANSION   @\n.PO0070  ANOP                         YES, BYPASS OUT OF SEQ IND      @\n&PREVPOS SETA  &FPOS                  SET NEW PREVIOUS POSITION       @\n.AT0000  ANOP                      END OF POSITION AND SEQUENCE CHECK @\n.**********************************************************************\n.*       ANALYZE SPECIFICATION OF  ATR  OPERAND                       *\n.**********************************************************************\n&ATRC    SETC  '40'                INITIALIZE 3270 ATTRIBUTE CHAR     @\n&SKIP    SETB  0                   RESET SKIP OPTION                  @\n&PROT    SETB  0                   RESET PROT OPTION                  @\n&INDEX   SETA  1\n&HIGH    SETA  10\n&IC      SETB  0\n&ARG     SETA  0\n         AIF   (T'&ATR EQ 'O').AT0040\n.AT0010  ANOP\n&COUNT   SETA  &COUNT+1\n         AIF   (&COUNT GT &HIGH).ERR100\n         AIF   ('&ATR(&INDEX)'(1,2) EQ '**SKIPROUNPNUMDETBRTDRKMDTIC NO*\n               R'(3*&COUNT,2)).AT0030\n         AGO   .AT0010\n.AT0020  ANOP\n         AIF   (&INDEX EQ N'&ATR).AT0050\n&INDEX   SETA  &INDEX+1\n&COUNT   SETA  0\n         AGO   .AT0010\n.*\n.*  SET X MATRIX FOR CHARACTER DISPLACEMENT.\n.*\n.AT0030  ANOP\n&XON     SETB  1\n&X(&COUNT) SETB 1\n&Y(&COUNT) SETA &INDEX\n         AGO   .AT0020\n.AT0040  ANOP\n&X(1)    SETB  1\n&XON     SETB  1\n.*\n.*  ANALYZE THE MATRIX\n.*\n.AT0050  ANOP\n         AIF   (&XON).AT0060\n&X(1)    SETB  1\n.AT0060  ANOP\n.*\n.*  OUTPUT ANALYSIS.\n.*\n&A       SETA  1                       SKIP\n&B       SETA  3                       UNPROTECTED\n         AIF   (&X(1) AND &X(3)).ERR110  SKIP/UNPROTECTED ???\n&A       SETA  2                       PROTECT\n         AIF   (&X(2) AND &X(3)).ERR110  PROTECTED/UNPROTECTED\n&A       SETA  5                       SELECTER PEN DETECTABLE\n&B       SETA  7                       DARK (NON-DETECTABLE)\n         AIF   (&X(5) AND &X(7)).ERR110  DETECTABLE/DARK ???\n&A       SETA  6                       BRIGHT\n         AIF   (&X(6) AND &X(7)).ERR110  BRIGHT/DARK ???\n&B       SETA  10                      NORMAL\n         AIF   (&X(6) AND &X(10)).ERR110  BRIGHT/NORMAL ???\n&A       SETA  7                       DARK\n         AIF   (&X(7) AND &X(10)).ERR110    DARK/NORMAL ???\n         AIF   (&X(1) AND &X(9)).ERR120     SKIP/IC ???\n         AIF   (&X(2) AND &X(9)).ERR120     PROT/IC ???\n         AIF   (&X(2) AND &X(4)).ERR130     PROT/NUM ???\n.*\n.*  SET ATTRIBUTE BITS\n.*\n.AT0070  ANOP\n&NUMERIC SETB  (&X(4))             SET NUMERIC FIELD INDICATOR\n&X(2)    SETB  (&X(1) OR &X(2))    PROT IF SKIP.\n&X(4)    SETB  (&X(1) OR &X(4))    NUM IF SKIP\n&X(5)    SETB  (&X(7) OR (&X(5) AND NOT &X(6))) SET IF DARK OR LGHT PEN\n&X(6)    SETB  (&X(7) OR &X(6))    BRT IF DARK.\n&IC      SETB  (&X(9))             IC IF REQUESTED\n&ARG     SETA  (32*&X(2)+16*&X(4)+4*&X(5)+8*&X(6)+&X(8))\n&KEYED   SETB  (&X(3))             FLAG AS KEYABLE IF UNPROTECTED.\n&PROT    SETB  (&X(2) OR &X(1))    SET TO ONE IF ATR = PROT OR SKIP\n&SKIP    SETB  (&X(1))             SET TO ONE IF ATR = SKIP\n         AGO   .AT0100\n.AT0090  ANOP\n&X(&C)   SETB  0                   CLEAR\n&C       SETA  &C+1                DOWN\n         AIF   (&C LT 11).AT0090   X TABLE.\n         AGO   .AT0070\n.AT0100  ANOP                          END OF ATR ANALYSIS\n         AIF   (T'&FLDNAME EQ 'O').AT0110 FIELD NAME OMITTED          @\n&FN      SETC  '&FLDNAME'(1,8)          USE FIRST 8 CHAR FOR NAME     @\n&DATAIND SETB  ('&FN' NE '')       INDICATE DATA ITEM (LABEL)         @\n         AGO   .AT0120                  BYPASS NEXT TEST              @\n.AT0110  ANOP                           FIELD NAME BYPASS             @\n         AIF   ((NOT &BUFFTB) OR (&SKIP) OR (&PROT)).AT0120\n         MNOTE 4,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION, DEFAULT NA$\n               ME GENERATED'\n         AIF   (NOT &SKIP).AT0110\n&FN      SETC  'FLD&SYSNDX'            GENERATE DEFAULT NAME\n.AT0120  ANOP\n.**********************************************************************\n.*       CONVERT THE BINARY  ATR  TO A VALID 3270 TRANSMITTABLE CHAR  *\n.**********************************************************************\n&ATRC    SETC  '&ADDRCHR'((&ARG+1)*2,2) SELECT ATTRIBUTE CHARACTER    *\n.DE0000  ANOP                           END OF ATTRIBUTE CONVERSION   @\n.**********************************************************************\n.*       DATA DECLARATION GENERATION                                  *\n.**********************************************************************\n.LO0000  ANOP                           END OF JUSTIFY PARAMETER      @\n.**********************************************************************\n.*       SET CURRENT OUTPUT FIELD LOCATION COUNTER                    *\n.**********************************************************************\n         AIF   (NOT &DATAIND).LO0020    BYPASS FOR NON DATA FIELDS    *\n         AIF   (T'&LOC EQ 'O').LO0010   LOCATION NOT GIVEN, USE DEFAULT\n&NLOC    SETA  &LOC                     SET CURRENT LOCATION COUNTER  *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n         AGO   .LO0020                  CONTINUE                      *\n.LO0010  ANOP                           DEFAULT TO CURRENT COUNT      *\n&NLOC    SETA  &PLOC                    USE PREVIOUS COUNT            *\n&PLOC    SETA  (&NLOC+(&GLENGTH))       SET NEXT TO CUR PLUS LENGTH   *\n.LO0020  ANOP                           END OF LOCATION COUNT SETUP   *\n         AGO   .GN0010                  GO TO FIELD GENERATION        @\n.GN0000  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE SKIP (END OF LINE) FIELD ENTRY                      *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    CL1'0'              FIELD ATTRIBUTE                    @\n*---------------------------------------------------------------------*\n         AGO   .PO0030\n.GN0010  ANOP                           FIELD GENERATION              @\n.**********************************************************************\n.*       GENERATE FIELD ENTRY                                         *\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n.**********************************************************************\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD CHARACTER              *\n         DC    XL1'&ATRC'          FIELD ATTRIBUTE                    *\n         AIF   (NOT &DEFAULT).GN0050  IS INITIAL = DEFAULT DATA ?     @\n&FN      DC    CL&GLENGTH.&INITIAL\n         AGO   .GN0060             GO TO NEXT OPTION                  *\n.GN0050  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n&FN      DS    0CL&GLENGTH\n         DC    &GLENGTH.XL1'&FILLCHR.'\n.GN0060  ANOP                      INITIAL = DEFAULT DATA BYPASS      @\n***********************************************************************\n         AIF   (((NOT &KEYED) AND (&CURSOR NE 0)) OR (NOT &IC)).GN0070\n&CURSOR  SETA  &FPOS+1             UPDATE CURSOR POSITION             @\n.GN0070  ANOP                      END OF FIELD GENERATION            @\n         AIF   (((NOT &BUFFTB) AND (NOT &KEYED)) OR (&PROT)).MAPXIT\n&FPOS    SETA  &FPOS+1                 BUMP TO ACTUAL FIELD\n&XAXIS   SETA  (&FPOS/64+1)\n&YAXIS   SETA  (&FPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&ENTS    SETA  &ENTS+1                 BUMP ENTRY COUNT\n&ENTRBA(&ENTS)  SETC  '&XCHAR&YCHAR'   SET RBA\n&ENTLEN(&ENTS)  SETA  &GLENGTH-1       SET LENGTH-1\n&ENTOFF(&ENTS)  SETC  '&FN-&MAPNAME'   DEFINE OFFSET FOR ADCON\n&ENTVCN(&ENTS)  SETA  0                INSURE UNUSED IS ZERO\n         AIF    (T'&VALUES EQ 'O').MAPXIT\n.GN0080  ANOP\n         AIF   (&ENTVCN(&ENTS) EQ 3).MAPXIT\n&ENTVCN(&ENTS)  SETA &ENTVCN(&ENTS)+1  BUMP COUNTER\n&VALCNT         SETA &VALCNT+1         BUMP COUNTER\n&ENTVAL(&VALCNT) SETC '&VALUES(&ENTVCN(&ENTS))' MOVE PARAMETER\n         AIF   (&ENTVCN(&ENTS) LT N'&VALUES).GN0080\n.MAPXIT  ANOP                      END OF FIELD GENERATION            @\n&FN      SETC  ''                  INITIALIZE FLDNAME GLOBAL          @\n&DEFAULT SETB  0                   INITIALIZE DEFAULT DATA GLOBAL     @\n&DATAIND SETB  0                   INITIALIZE DATA (FIELD) INDICATOR  @\n&PEN     SETB  0                   INITIALIZE PEN DETECTABLE GLOBL    @\n&IC      SETB  0                   INITIALIZE INSERT CURSOR GLOBAL    @\n&KEYED   SETB  0                   INIT UNPROTECTED FIELD GLOBAL      @\n&NUMERIC SETB  0                   INITIALIZE NUMERIC FIELD GLOBAL    @\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.***     GENERATE FINAL DSECT AND ADDRESS TABLES                    ***\n.**********************************************************************\n.FI0000  ANOP                      FINAL ENTRIES                      @\n         AIF   ((&SKIP) OR (&PROT)).FI0010  WAS PREV FIELD ATR = SKIP *\n&EPOS    SETA  &EPOS+1                 BUMP BY ONE TO MISS PREV FIELD *\n&XAXIS   SETA  (&EPOS/64+1)\n&YAXIS   SETA  (&EPOS-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n         DC    XL1'11'             FIELD DESCRIPTOR FLAG BYTE         @\n         DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'1D'             START FIELD INDICATOR              *\n         DC    XL1'F0'             FIELD ATTRIBUTE\n***********************************************************************\n.FI0010  ANOP                                                         *\n&MAP     SETB  0                        SET OFF AFTER FINAL           @\n.**********************************************************************\n         AIF   (&CURSOR EQ 0).FI0020    NO CURSOR!                KMB\n*              SET CURSOR POSITION                                    *\n&XAXIS   SETA  (&CURSOR/64+1)\n&YAXIS   SETA  (&CURSOR-(&XAXIS-1)*64+1)\n&XCHAR   SETC  '&ADDRCHR'(&XAXIS*2,2)\n&YCHAR   SETC  '&ADDRCHR'(&YAXIS*2,2)\n&FN      SETC  ''\n         AIF   (T'&FLDNAME EQ 'O').CR0000      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,5)          SET DEFAULT VALUE\n&FNM     SETC  'CSR'                    SET DEFAULT VALUE\n&FN      SETC  '&FN&FNM'                SET DEFAULT VALUE\n.CR0000 ANOP\n         DC    XL1'11'             START BUFFER ADDRESS CHARACTER     *\n&FN      DC    X'&XCHAR&YCHAR'     FIELD POSITION                     *\n         DC    XL1'13'             INSERT CURSOR INDICATOR            *\n&CURSOR  SETA  0                       RESET CURSOR POSITION          *\n***********************************************************************\n.FI0020  ANOP\n         AIF   (T'&EQU EQ 'O').FI0040\n&FN      SETC  '&EQU'\n&FN      EQU   *-&MAPNAME\n.FI0040  ANOP\n         AIF   ((NOT &BUFFTB) OR (&ENTS EQ 0)).MEXIT              KMB\n.**********************************************************************\n         AIF   (T'&FLDNAME NE 'O').FI0100      WAS NAME SPECIFIED?\n&FN      SETC  '&MAPNAME'(1,4)          SET DEFAULT VALUE\n&FN      SETC  '&FN&SYSNDX'             SET DEFAULT VALUE\n         AGO   .FI0110                 GO PROCESS NEXT ONE\n.FI0100 ANOP\n&FN      SETC  '&FLDNAME'              USE NAME SPECIFIED INSTEAD\n.FI0110 ANOP\n         EJECT\n***********************************************************************\n*              THIS TABLE IS GENERATED FOR THE USER WHEN A MAP OF ALL *\n*        MODIFIABLE ENTRIES IN A '$FLD' LIST IS REQUIRED. THIS MAP    *\n*        CONTAINS THE FOLLOWING ENTRIES:                              *\n*                                                                     *\n*    XL2(....)       THE BUFFER ADDRESS OF THIS FIELD                 *\n*    AL2(..)         THE OFFSET INTO THE MAP, OF THIS FIELD           *\n*    AL2(..)         THE LENGTH-1 OF THIS FIELD                       *\n*                                                                     *\n***********************************************************************\n         CNOP  2,4                     ALIGN ON HALFWORD BOUND\n         DC    H'&ENTS'                TOTAL NUMBER OF ENTRIES\n&FN      DS    0F                      LISTING OF BUFFER ADDRESS TABLE\n.FI0120 ANOP\n&LSTCNT  SETA  &LSTCNT+1               BUMP ENTRY LSTCNT\n         AIF   ((&LSTCNT GT &ENTS) OR (&LSTCNT GT &ENTMAX)).FIEXIT\n         DC    XL2'&ENTRBA(&LSTCNT)'   BUFF ADDR OF CURRENT ENTRY\n         DC    AL2(&ENTOFF(&LSTCNT))   OFFSET OF CURRENT ENTRY\n         DC    H'&ENTLEN(&LSTCNT)'     LENGTH OF CURRENT ENTRY - 1\n         AIF   (&ENTVCN(&LSTCNT) EQ 0).FI0120\n.FI0130 ANOP\n&TCNT1   SETA  &TCNT1+1\n         DC    &ENTVAL(&TCNT1)         VALUES PARAMETER\n         AIF   (&TCNT1 LT &ENTVCN(&LSTCNT)).FI0130\n         AGO   .FI0120                 GO PROCESS NEXT ONE\n.FIEXIT ANOP\n         MNOTE *,'BEG-FIEXIT'\n&TCNT1   SETA  (K'&FLDNAME)\n         AIF   (&TCNT1 LE 6).FIEX01\n&TCNT1   SETA  6\n.FIEX01  ANOP\n&FILLCHR SETC  '&FN'\n&FN      SETC  '&FILLCHR'(1,&TCNT1)\n&FNM     SETC  'EL'\n&FN      SETC   '&FN&FNM'\n&FN      EQU   ((*-&FILLCHR)/&ENTS)    LENGTH OF EACH ENTRY\n         DC    X'FFFF'                 END OF TABLE\n         SPACE\n&ENTS    SETA  0                       RESET ENTRY COUNT\n***********************************************************************\n.MEXIT   ANOP                          HERE TO EXIT MACRO             *\n         MEXIT                     EXIT MACRO                         @\n.**********************************************************************\n.* *     MNOTE STATEMENTS                                           * *\n.**********************************************************************\n.ERR010  ANOP                           TYPE IN ERROR                 @\n         MNOTE 12,'TYPE = FINAL IS PREVIOUSLY SPECIFIED,'             @\n         AGO   .MAPXIT                  TERMINATE                     @\n         MEXIT                     MACRO EXIT                         @\n.ERR020  ANOP                      LENGTH OPERAND ERROR ENTRY         @\n         MNOTE 12,'INVALID LENGTH OPERAND IS SPECIFIED,'              @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID LENGTH OPERAND IS REQUIRED.'\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .MAPXIT                 TERMINATE GENERATION           @\n.ERR030  ANOP                      POS OPERAND ERROR ENTRY            @\n         MNOTE 12,'INVALID POS OPERAND IS SPECIFIED,'                 @\n.ERR055  ANOP                      POS OPERAND MNOTE ENTRY            @\n         MNOTE *,'MACRO REQUEST IS IGNORED,'                          @\n         MNOTE *,'VALID POS OPERAND IS REQUIRED WITH MAP MACRO.'      @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .AT0000             GO TO POS OPERAND COMPLETION       @\n.ERR070  ANOP                      INITIAL OPERAND ERROR ENTRY        @\n         MNOTE 8,'INVALID INITIAL OPERAND IS SPECIFIED,'              @\n         MNOTE *,'DEFAULT DATA MUST BE ENCLOSED IN QUOTES,'           @\n         MNOTE *,'INITIAL OPERAND IS IGNORED.'                        @\n         AGO   .LG0020             GO TO INITIAL OPERAND BYPASS       @\n.ERR080  ANOP                      FIELD SPECIFICATION ERROR ENTRY    @\n         MNOTE 8,'FIELD IS DEFINED OUTSIDE OF THE SIZE OPERAND'       @\n         MNOTE *,'MACRO REQUEST IS IGNORED.'                          @\n&ABORT   SETB  1                   TURN ON ABORT INDICATOR            @\n         AGO   .PO0020             GO TO PAGE SIZE BYPASS             @\n.ERR100  ANOP                      ATR PARAMETER ERROR ENTRY\n         MNOTE 4,'INVALID ATTRIBUTE PARAMETER IS SPECIFIED,'\n         MNOTE *,'ATR = &ATR(&INDEX) IS IGNORED.'\n         AGO   .AT0020             GO TO CHECK INDEX\n.ERR110  ANOP                      INCOMPATIBLE ATR OP ERROR\n&A       SETA  &Y(&A)              SET PARAMETER INDEX VALUE\n&B       SETA  &Y(&B)              SET PARAMETER INDEX VALUE\n         MNOTE 4,'&ATR(&A) AND &ATR(&B) ARE INCOMPATIBLE PARAMETERS,'\n         MNOTE *,'ATR = &ATR(&A) IS IGNORED,'\n         MNOTE *,'ATR = &ATR(&B) IS IGNORED,'\n         MNOTE *,'ATR = SKIP IS ASSUMED BY DEFAULT.'\n&X(1)    SETB  1                   SKIP DEFAULT.\n&C       SETA  2                   SET C FOR CLEARING X TABLE.\n         AGO   .AT0090\n.ERR120  ANOP                      ATR = IC ERROR ENTRY\n         MNOTE *,'ATR = IC IS REQUESTED FOR PROTECTED FIELD'\n         AGO   .AT0070\n.ERR130  ANOP                      ATR = PROT AND NUM ERROR\n         MNOTE *,'ATR = PROT AND NUM ALSO IMPLIES THE SKIP PARAMETER'\n         AGO   .AT0070\n.ERR150  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALID TYPE SPECIFIED'                             *\n.ERR160  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MODEL OPERAND IS REQUIRED && MINIMUM LENGTH IS 6'   *\n         MEXIT\n.ERR170  ANOP                          HERE FOR ERROR                 *\n         MNOTE 16,'SEQUENCE ERROR ENCOUNTERED, EXPANSION TERMINATED'  *\n         MEXIT\n.ERR200  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'INVALIB ''BUFFTAB'' SPECIFICATION'                  *\n         MEXIT\n.ERR190  ANOP                          HERE FOR ERROR                 *\n         MNOTE 8,'MAP NAME REQUIRED WITH ''BUFFTAB'' OPTION'          *\n         MEXIT\n         MEND\n*--------------------------------------------------------------------*\n*        $AUTHON MACRO                                               *\n*--------------------------------------------------------------------*\n         MACRO\n&L       $AUTHON\n&L       XR    R1,R1\n         SVC   $ATH$\n         MEND\n*--------------------------------------------------------------------*\n*        $AUTHOFF MACRO                                              *\n*--------------------------------------------------------------------*\n         MACRO\n&L       $AUTHOFF\n&L       LA    R1,4\n         SVC   $ATH$\n         MEND\nZAPDSCB  TITLE 'THIS PROGRAM WILL ALLOW THE USER THE ABILITY TO MODIFY A\n                DSCB'\n*--------------------------------------------------------------------*\n*        DON'T KNOW WHO WROTE THIS ORIGINALLY                        *\n*        FULL  SCREEN VTOC ZAPPER.                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\n* CHANGE LOG:                                                        *\n* SAM BASS   (KBASS)                                                 *\n* BMC SOFTWARE INC                                                   *\n* MCLANE CO. INC.                                                    *\n*                                                                    *\n*         KBASS ONLY ALLOW GROUP OF SYS1 TO DO THIS                  *\n* 21DEC94 KBASS ADD OPTCD DISPLAY                                    *\n* 30OCT95 KBASS USE UCBLOOK MACRO TO SUPPORT DYNAMIC DASD            *\n*--------------------------------------------------------------------*\nZAPDSCB  AMODE 31\nZAPDSCB  RMODE 24\nZAPDSCB  CSECT\n         SAVE  (14,12),,ZAPDSCB.&SYSDATE..&SYSTIME.\n         LR    R11,R15                 LOAD PGM'S BASE REG\n         USING ZAPDSCB,R11\n         LA    R14,SAVEAREA            A(MY SAVEAREA)\n         ST    R14,8(,R13)             UPDATE FORWARD POINTER\n         ST    R13,4(,R14)             UPDATE BACKWARD POINTER\n         LR    R13,R14                 AND LOAD MY SAVEAREA BASE\n         USING SAVEAREA,R13,R12            AND DEFINE SAME TO ASSEMBLER\n         LA    R12,2048(,R13)          COMPUTE SECOND\n         LA    R12,2048(,R12)                  BASE REG ADDRESS\n         LR    R2,R1                   SAVE CPPL ADDRESS\n*        $AUTHON\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   BADBOY              NOT ZERO, TELL NOT AUTHORIZED.\nKZ       MODESET KEY=ZERO\n***********************************************************************\n*        INITIALIZE                                                   *\n***********************************************************************\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         SPACE\n***********************************************************************\n*        LOCATE THE USER'S ASCB AND SAVE THE USERID                   *\n***********************************************************************\n         L     R15,PSAAOLD-PSA(00)     A(PSA ASCB)\n         L     R15,ASCBASXB-ASCB(R15)  A(ASXB)\n         L     R15,ASXBSENV-ASXB(R15)  A(ASCB)\n         CLC   =C'SYS1',ACEEGRPN-ACEE(R15)    COPY THE USERID\n         BNE   BADBOY\n         MVC   USERID,ACEEUSER-ACEE(R15)    COPY THE USERID\n         MVC   DEFCSRAD,DSCBPCSR       SAVE INITIAL CURSOR BUFF ADDR\n         SPACE\n***********************************************************************\n*        INITIATE FULL SCREEN PROCESSING                              *\n***********************************************************************\n         STFSMODE ON,INITIAL=YES       INITIATE FULL SCREEN PROCESSING\n         EJECT\n***********************************************************************\n*        SETUP THE CVAF HEADER AND BUFFER LISTS                       *\n***********************************************************************\n         XC    CVAFBUF(BFLHLN+BFLELN),CVAFBUF       RESET BUFFER HEADER\n         OI    BFLHFL,BFLHDSCB         INDICATE READ DSCB'S\n         MVI   BFLHNOE,1               NUMBER OF BUFFER LIST ENTRIES\n         LA    R15,DS1FMTID            A(DSCB DATA AREA)\n         ST    R15,BFLEBUF                 AND UPDATE BUFFER LIST\n         MVI   BFLELTH,LDSCB-44        LENGTH OF DATA AREA (DSCB-44)\n         SPACE\n***********************************************************************\n*        COPY THE DATA SET NAME FROM THE COMMAND BUFFER TO THE DATA   *\n* SET NAME FIELD ON THE PANEL ADDING THE USER ID, IF NECESSARY        *\n***********************************************************************\n         L     R2,CPPLCBUF-CPPL(R2)    LOAD COMMAND BUFFER ADDRESS\n         SLR   R3,R3                   CLEAR WORK REGISTER\n         SLR   R4,R4                   CLEAR WORK REGISTER\n         ICM   R3,B'0011',0(R2)        LENGTH OF COMMAND BUFFER\n         ICM   R4,B'0011',2(R2)        OFFSET TO FIRST OPERAND\n         SR    R3,R4                   COMPUTE LENGTH OF OPERAND\n         SPACE\n         SH    R3,=H'04'                   AND DECREMENT FOR LENGTH FLD\n         BP    CPPL010                 DATA SET NAME SUPPLIED?\n         LA    R15,DSNAMEER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                    GO PROCESS ERROR MESSAGE\n         SPACE\nCPPL010  DS    0H\n         CH    R3,=H'46'               LENGTH GREATER THAN MAX?\n         BNH   CPPL020                     NO, BYPASS DEFAULT\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         B     PROCEMSG                    YES, GENERATE ERROR MESSAGE\n         SPACE\nCPPL020  DS    0H\n         STH   R3,LDSNAME                  SAVE LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR EXECUTE\n         LA    R4,4(R2,R4)             ADDRESS DATA SET NAME\n         EX    R3,EXOCINPT             CONVERT TO UPPER CASE\n         EJECT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R15,PDSNAME             A(PANEL DSNAME)\n         LA    R14,DS1DSNAM            A(DSCB DSNAME)\n         CLI   0(R4),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   NOQUOTES                    NO, DO NOT PROCESS QUOTES\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         LA    R4,1(,R4)                   YES, BYPASS FIRST QUOTE\n         BCTR  R3,00                       DECREMENT FOR FIRST QUOTE\n         STH   R3,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R3,00                       DECREMENT FOR LAST QUOTE\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         B     DSNMOVED\n         SPACE\nEXMVCPDS OC    0(0,R15),0(R4)          MOVE IN DATA SET NAME\nEXMVCDS1 OC    0(0,R14),0(R4)          MOVE IN DATA SET NAME\nPDSUSERI MVC   0(0,R15),USERIDI        MOVE IN USERID\nDS1USERI MVC   0(0,R14),USERIDI        MOVE IN USERID\nEXOCINPT OC    0(0,R4),ALLBLANK        EXECUTED OC\n         SPACE\nNOQUOTES DS    0H\n         SLR   R1,R1                   CLEAR WORK REG\n         IC    R1,USERIDL              AL2(LENGTH OF USERID)\n         SPACE\n         LA    R5,2(,R1)               USERID + DELIMITER + BCTR OFFSET\n         AR    R5,R3                       + LENGTH OF DSNAME\n         STH   R5,LDSNAME              SAVE COMPUTED LENGTH OF DSNAME\n         CH    R5,=H'46'               IS DSNAME GT FIELD LENGTH?\n         BNH   DSN010                      NO, CONTINUE PROCESSING\n         LA    R15,DSNLNGER                YES, PROVIDE FOR ERROR MSG\n         B     PROCEMSG                      AND DISPLAY SAME\n         SPACE\nDSN010   DS    0H\n         BCTR  R1,0                        DECREMENT FOR EXECUTE\n         MVI   0(R15),C''''            MOVE IN A QUOTE\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R1,DS1USERI             MOVE USERID TO DSNAME\n         EX    R1,PDSUSERI             MOVE USERID TO DSNAME\n         LA    R14,1(R1,R14)               AND ADJUST FOR SAME\n         LA    R15,1(R1,R15)               AND ADJUST FOR SAME\n         MVI   0(R14),C'.'             MOVE IN A DELIMITER\n         MVI   0(R15),C'.'             MOVE IN A DELIMITER\n         LA    R14,1(,R14)                 AND ADJUST FOR SAME\n         LA    R15,1(,R15)                 AND ADJUST FOR SAME\n         EX    R3,EXMVCPDS             MOVE DSN INTO PANEL\n         EX    R3,EXMVCDS1             MOVE DSN INTO DSCB\n         LA    R15,1(R3,R15)               AND ADJUST FOR SAME\n         MVI   0(R15),C''''            MOVE IN A QUOTE\nDSNMOVED DS    0H\n         EJECT\n***********************************************************************\n*        LOCATE THE DATA SET CATALOG ENTRY                            *\n***********************************************************************\nLOCATELP DS    0H                      LOCATE LOOP\n         MVC   LOCWORK(256),ALLZEROS         CLEAR FIRST HALF OF WORK\n         XC    LOCWORK+256(256),ALLZEROS     CLEAR LAST HALF OF WORK\n         MVC   PVOLSER,ALLZEROS        CLEAR VOLSER FIELD\n         LOCATE DSNLOC                 LOCATE DATA SET\n         LTR   R15,R15                 WAS DATA SET FOUND?\n         BZ    LOC010                      YES, BYPASS ERROR MESAGE\n         LA    R15,DSNLOCER                NO, ADDRESS ERROR MESSAGE\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\nLOC010   DS    0H\n         MVC   PVOLSER,LOCWORK+6       SAVE VOL SER\n         SPACE\n***********************************************************************\n*        USING THE UCB LOOKUP PROCESS, LOCATE THE UCB ASSOCIATED WITH *\n*  THE VOLUME SERIAL NUMBER RETRIEVED FORM THE LOCATE PROCESS.        *\n***********************************************************************\nUCBLKPLP DS    0H                      UCB LOOKUP LOOP\n         OC    UCBTOKEN,UCBTOKEN                                30OCT95\n         BZ    UCBPIN10                                         30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X\n               MF=(E,XUCBPIN)                                   30OCT95\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         MODESET MODE=PROB                                      30OCT95\nUCBPIN10 DS    0H                                               30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBLOOK VOLSER=PVOLSER,UCBPTR=UCBADDR,                 30OCT95X\n               PIN,                                             30OCT95X\n               PTOKEN=UCBTOKEN,                                 30OCT95X\n               TEXT==CL58'ZAPDSCB IN PROGESS',                  30OCT95X\n               DYNAMIC=YES,RANGE=ALL,LOC=ANY,                   30OCT95X\n               MF=(E,XUCBLOOK)                                  30OCT95\n         LR    R5,R15                  UCB ADDR RETURNED?       30OCT95\n         MODESET MODE=PROB                                      30OCT95\n         LTR   R15,R5                  UCB ADDR RETURNED?       30OCT95\n         BZ    CHECKUCB                 NO, ERROR               30OCT95\n         SPACE 1                                                30OCT95\nUCBMSG   DS    0H                                               30OCT95\n         LA    R15,UCBERMSG            A(VOL SER MISSING ERROR MESSAGE)\n         B     PROCEMSG                GO PROCESS ERROR MESSAGE\n         SPACE\n         USING UCBOB,15\nCHECKUCB DS    0H                      CHECK FOR MATCHING VOLSER\n         L     R15,UCBADDR             A(UCB ADDRESS)           30OCT95\n         CLC   PVOLSER,UCBVOLI         MATCHING VOLSER?\n         BNE   UCBMSG                   NO, ERROR               30OCT95\n         SPACE\n         OI    MISCFLAG,NSHARED        DEFAULT TO NON-SHARED DASD\n         TM    UCBTBYT2,UCBRR          IS IT ACTUALLY SHARED?\n         BZ    UCB010                      NO, BYPASS RESET\n         NI    MISCFLAG,255-NSHARED        YES, RESET NON-SHARED FLAG\nUCB010   DS    0H\n         DROP  15\n         EJECT\n***********************************************************************\n*        DETERMINE WHAT TYPE OF ENQ TO USE.  SYSTEM OR SYSTEMS        *\n***********************************************************************\n         LA    R1,MODELENQ             A('SYSTEM' ENQ LIST)\n         TM    MISCFLAG,NSHARED        IS DASD DEVICE SHARED?\n         BO    ENQ010                      NO, USED DEFAULT ADDRESS\n         LA    R1,MODESENQ             A('SYSTEMS' ENQ LIST)\nENQ010   DS    0H\n         LA    R2,DS1DSNAM             A(RNAME FOR ENQ)\n         LH    R3,LDSNAME              LOAD LENGTH OF DSNAME\n         SPACE\n***********************************************************************\n*        DETERMINE IF THE DATA SET IS AVAILABLE.                      *\n***********************************************************************\n         NI    MISCFLAG,255-ENQUEUE    RESET ENQUEUE BIT\n         ENQ   (,(R2),,(R3),),MF=(E,(1))\n         SPACE\n         LTR   R15,R15                 IS RESOURCE AVAILABLE?\n         BZ    ENQ020                      YES, PROCESS DATA SET\n         OI    MISCFLAG,ENQUEUE            NO, INDICATE SAME\nENQ020   DS    0H\n***********************************************************************\n*        READ THE DSCB INTO STORAGE                                   *\n***********************************************************************\n         L     R2,UCBADDR              LOAD UCB ADDRESS\n         CVAFDIR ACCESS=READ,UCB=(R2),MF=(E,CVAFREQ),BRANCH=(YES,PGM), $\n               BUFLIST=CVAFBUF\n         LTR   R15,R15                 WAS READ SUCCESSFUL?\n         BZ    CREATDTE                    YES, PROCESS DSCB\n         B     CVAFPROC                    NO, PROCESSER ERROR RETURN\n         EJECT\n***********************************************************************\n*        COPY DATE FIELDS INTO THE PANEL                              *\n***********************************************************************\nCREATDTE SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1CREDT            INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PCREDT(2),DWORD             AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1CREDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PCREDT+2(3),DWORD           AND MOVE TO TARGET FIELD\n         SPACE\nREFDATE  SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1REFD             INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD(2),DWORD              AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1REFD+1   INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PREFD+2(3),DWORD            AND MOVE TO TARGET FIELD\n         SPACE\nEXPIRDAT SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,DS1EXPDT            INSERT YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT(2),DWORD             AND MOVE TO TARGET FIELD\n         ICM   R15,B'0011',DS1EXPDT+1  INSERT DAY OF YEAR\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  PEXPDT+2(3),DWORD           AND MOVE TO TARGET FIELD\n         EJECT\n***********************************************************************\n*        COPY DSORG INTO PANEL                                        *\n***********************************************************************\n         MVC   PDSORG,ALLZEROS         CLEAR FIELD\n         TM    DS1DSORG,DS1DSGIS       INDEXED SEQUENTIAL?\n         BZ    DSORG010                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'IS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG010 TM    DS1DSORG,DS1DSGPS       PHYSICAL SEQUENTIAL?\n         BZ    DSORG020                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PS'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG020 TM    DS1DSORG,DS1DSGDA       DIRECT ORGANIZATION?\n         BZ    DSORG030                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'DA'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG030 TM    DS1DSORG,DS1DSGPO       PARTITIONED ORGANIZATION?\n         BZ    DSORG040                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'PO'            YES, INDICATE SAME\n         B     TESTUNMV                    AND GO TEST UNMOVEABLE BIT\nDSORG040 TM    DS1DSORG+1,DS1ORGAM     VSAM?\n         BZ    TESTUNMV                    NO, TEST NEXT TYPE\n         MVC   PDSORG(2),=C'AM'            YES, INDICATE SAME\nTESTUNMV DS    0H\n         TM    DS1DSORG,DS1DSGU        UNMOVEABLE DATA SET?\n         BZ    DSORG060                    NO, BYPASS MOVE\n         MVI   PDSORG+2,C'U'               YES, INDICATE SAME\nDSORG060 DS    0H\n         EJECT\n***********************************************************************\n*        COPY RECFM TO PANEL                                          *\n***********************************************************************\n         MVC   PRECFM,ALLZEROS         CLEAR FIELD\n         TM    DS1RECFM,DS1RECFU       UNDEFINED LENGTH RECORDS?\n         BNO   RECFM010                    NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'U'                 YES,INDICATE SAME\n         B     PROCLREC                    GO PROCESS LRECL\nRECFM010 TM    DS1RECFM,DS1RECFF       FIXED LENGTH RECORDS?\n         BZ    RECFM020                    NO, CHECK NEXT TYPE\n         MVI   PRECFM,C'F'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\nRECFM020 TM    DS1RECFM,DS1RECFV       VARIABLE LENGTH RECORDS?\n         BZ    CHCKBLCK                    NO\n         MVI   PRECFM,C'V'                 YES,INDICATE SAME\n         B     CHCKBLCK                    GO CHECK FOR BLOCKED\nCHCKBLCK DS    0H\n         LA    R14,PRECFM+1            LOAD TARGET ADDRESS\n         TM    DS1RECFM,DS1RECFB       BLOCKED RECORDS?\n         BZ    RECFM030                    NO, CHECK SPANNED/STANDARD\n         MVI   0(R14),C'B'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\nRECFM030 TM    DS1RECFM,DS1RECFS       SPANNED/STANDARD?\n         BZ    RECFM040                    NO, PROCESS PRINT CC\n         MVI   0(R14),C'S'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\nRECFM040 TM    DS1RECFM,DS1RECFA       ANSI CONTROL CHARS?\n         BZ    RECFM050                    NO, PROCESS PRINT CC\n         MVI   0(R14),C'A'                 YES, INDICATE SAME\n         LA    R14,1(,R14)                 AND BUMP TARGET ADDRESS\n         B     PROCLREC\nRECFM050 TM    DS1RECFM,DS1RECMC       MACHINE CONTROL CHARS?\n         BZ    RECFM060                    NO, PROCESS LRECL\n         MVI   0(R14),C'M'                 YES, INDICATE SAME\nRECFM060 DS    0H\n         EJECT\n***********************************************************************\n*        COPY LRECL, BLOCKSIZE, KEY LENGTH AND RKP TO PANEL           *\n***********************************************************************\nPROCLREC DS    0H\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         ICM   R15,B'0011',DS1LRECL    LOAD THE LRECL\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PLRECL,DWORD                AND MOVE TO TARGET\n         SPACE\n         ICM   R15,B'0011',DS1BLKL     LOAD THE BLOCK SIZE\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15              INSURE PROPER SIGN\n         UNPK  PBLKL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         SLR   R15,R15                 CLEAR WORK REGISTER\n         IC    R15,DS1KEYL             LOAD THE KEY LENGTH\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PKEYL,DWORD                 AND MOVE TO TARGET FIELD\n         SPACE\n         ICM   R15,B'0011',DS1RKP      LOAD THE RELATIVE KEY POSITION\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PRKP,DWORD                  AND MOVE TO TARGET FIELD\n         SPACE\n***********************************************************************\n*        COPY LAST USED TRACK AND BLOCK INTO PANEL                    *\n***********************************************************************\n         ICM   R15,B'1110',DS1LSTAR    LOAD LSTAR INTO REG\n         LA    R1,6                    BYTES TO PROCESS\n         LA    R2,PLSTAR               A(TARGET FIELD)\nLSTARLP  DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LSTARLP              LOOP FOR NEXT FOUR BITS\n         TR    PLSTAR,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY TRACK BALANCE INTO PANEL                                *\n***********************************************************************\n         ICM   R15,B'1100',DS1TRBAL    LOAD LSTAR INTO REG\n         LA    R1,4                    BYTES TO PROCESS\n         LA    R2,PTRBAL               A(TARGET FIELD)\nLTRBAL   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LTRBAL               LOOP FOR NEXT FOUR BITS\n         TR    PTRBAL,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY SMS INDICATORS INTO PANEL                               *\n***********************************************************************\n         ICM   R15,B'1000',DS1SMSFG    LOAD SMS INDICATORS\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,PSMSIND              A(TARGET FIELD)\nLSMSIND  DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LSMSIND              LOOP FOR NEXT FOUR BITS\n         TR    PSMSIND,TRTAB           TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY DATA SET INDICATORS INTO PANEL                          *\n***********************************************************************\n         ICM   R15,B'1000',DS1DSIND    LOAD DS INDICATORS\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,PDSIND               A(TARGET FIELD)\nLDSIND   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LDSIND               LOOP FOR NEXT FOUR BITS\n         TR    PDSIND,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         SPACE\n***********************************************************************\n*        COPY OPTCD    INDICATORS INTO PANEL                          *\n***********************************************************************\n         ICM   R15,B'1000',DS1OPTCD    LOAD OPTCD\n         LA    R1,2                    BYTES TO PROCESS\n         LA    R2,OPTCDE               A(TARGET FIELD)\nLOPTCD   DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT 4 BITS INTO REG14\n         STC   R14,0(R2)                   AND SAVE INTO TARGET\n         LA    R2,1(,R2)               BUMP TARGET ADDRESS\n         BCT   R1,LOPTCD               LOOP FOR NEXT FOUR BITS\n         TR    OPTCDE,TRTAB            TRANSLATE INTO PRINTABLE CHARS\n         EJECT\n***********************************************************************\n*        COPY SECONDARY ALLOCATION INFO INTO PANEL                    *\n***********************************************************************\n         TM    DS1SCAL1,DS1CYL         IS IT CYLINDER ALLOCATION?\n         BNO   SEC0010                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'C'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0010  TM    DS1SCAL1,DS1TRK         IS IT TRACK ALLOCATION?\n         BNO   SEC0020                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'T'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0020  TM    DS1SCAL1,DS1AVR         IS IT BLOCK ALLOCATION?\n         BNO   SEC0030                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'B'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0030  TM    DS1SCAL1,DS1AVRND       IS IT BLOCK ROUND ALLOC?\n         BNO   SEC0040                     NO, CHECK NEXT TYPE\n         MVI   PSCAL1,C'R'                 YES, INDICATE SAME\n         B     SCALLAMT                PROCESS SECONDARY AMOUNT\nSEC0040  TM    DS1SCAL1,255            IS IT ABSOLUTE ALLOCATION?\n         BNZ   SCALLAMT                    NO, PROCESS SECONDARY AMOUNT\n         MVI   PSCAL1,C'A'                 YES, INDICATE SAME\n         SPACE\nSCALLAMT DS    0H\n         SLR   R15,R15                 CLEAR WORK REG\n         ICM   R15,B'0111',DS1SCAL3    INSERT SECONDARY AMOUNT\n         CVD   R15,DWORD                   AND CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PROPER SIGN\n         UNPK  PSCAL3,DWORD                AND COPY INTO TARGET AREA\n         TM    MISCFLAG,ENQUEUE        IS DATA SET AVAILABLE?\n         BZ    TPUTPANL                    YES, PROCESS IT\n         LA    R15,ENQERMSG                NO, INFORM TERMINAL OPER\n         SPACE\n***********************************************************************\n*        COPY ERROR MESSAGE ONTO PANEL - R15 ADDRESSES THE ERROR MSG  *\n***********************************************************************\nPROCEMSG DS    0H                      POS, MOVE MESSAGE TO PANEL\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R14,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R2,L'PERRMSG                LENGTH OF SAME\n         LH    R1,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R1,R2                   GREATER THAN MAXIMUM?\n         BNH   MSG010                      NO, CONTINUE\n         LR    R1,R2                       YES, LOAD MAXIMUM LENGTH\nMSG010   DS    0H\n         SR    R2,R1                   COMPUTE REMAINDER\n         BNP   MSG020                  BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R2,1                    DIVIDE BY TWO\n         LA    R14,0(R2,R14)           CENTER ERROR MESSAGE\nMSG020   DS    0H\n         BCTR  R1,00                   DECREMENT FOR EXECUTE\n         EX    R1,MVCERMSG             MOVE ERROR MESSAGE\n         EJECT\n***********************************************************************\n*        DISPLAY PANEL                                                *\n***********************************************************************\nTPUTPANL DS    0H\n         LA    R0,LPDSCBL              A(LENGTH OF PANEL)\n         LA    R1,DSCBPANL             A(DSCB PANEL)\n         TPUT  (1),(0),FULLSCR         WRITE PANEL TO TERMINAL\n         SPACE\n***********************************************************************\n*        RETRIEVE USER'S INPUT                                        *\n***********************************************************************\n         XC    INPUT(256),INPUT              CLEAR FIRST HALF OF WORK\n         XC    INPUT+256(256),INPUT+256      CLEAR LAST HALF OF WORK\n         LA    R0,L'INPUT              A(LENGTH OF INPUT AREA)\n         LA    R1,INPUT                A(INPUT AREA)\n         TGET  (1),(0),ASIS            GET INPUT FROM TERMINAL\n         SPACE\n         CLI   INPUT,PA2KEY            REDISPLAY REQUESTED?\n         BE    TPUTPANL                    YES, REDISPLAY\n         SPACE\n         CLI   INPUT,PFKEY03           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         CLI   INPUT,PFKEY15           TERMINATION REQUESTED?\n         BE    ENDDSNS                     YES, TERMINATE EXECUTION\n         SPACE\n         MVC   DSCBPCSR,DEFCSRAD       RESET IC TO DEFAULT CUSOR ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR ERROR MESSAGE\n         LR    R5,R1                   SAVE LENGTH OF TGET DATA\n         LA    R4,INPUT                PRELOAD DATA ADDRESS\n         NI    MISCFLAG,NSHARED+ENQUEUE    RESET ALL BUT REQ'D BITS\n         EJECT\n***********************************************************************\n*        PROCESS INPUT KEYED IN BY USER                               *\n*        INPUT REGS:                                                  *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*        OUTPUT REGS:                                                 *\n*              REG 00 CONTAINS THE ACTUAL LENGTH OF KEYED INPUT DATA  *\n*              REG 01 CONTAINS THE ADDRESS OF KEYED INPUT DATA        *\n*              REG 02 CONTAINS THE LENGTH -1 OF KEYED INPUT DATA      *\n*              REG 04 CONTAINS THE CURRENT ADDR OF BUFFER INPUT       *\n*              REG 05 CONTAINS THE REMAINING LENGTH OF BUFFER INPUT   *\n*              REG 06 CONTAINS THE ADDR OF THE MATCHING BUFFTAB ENTRY *\n*              REG 07 CONTAINS THE LENGTH OF A BUFFTAB ENTRY          *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*        LOCATE NEXT INPUT FIELD, LENGTH AND MATCHING TABLE ENTRY     *\n***********************************************************************\nINPUT000 DS    0H                      HERE TO PROCESS INPUT DATA\n         LA    R6,PDSCBL-2             A(HALFWORD COUNT OF ENTRIES)\n         LA    R7,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R15,TABLE000            A(INPUT DEPROCESSOR)\n         BASR  R14,R15                 PROCESS INPUT DATA\n         B     INPUT200                ALL DATA PROCESSED\n         SPACE\n         LTR   R6,R6                   MATCHING ENTRY?\n         BNZ   INPUT100                YES, PROCESS IT\n*  POSSIBLE ERROR AT THIS POINT  WHAT TO DO, WHAT TO DO?\n         B     INPUT000                NO BUFFTAB ENTRY, PROCESS NEXT\n         SPACE\n***********************************************************************\n*        RESET ATTRIBUTE BYTE TO NORMAL INTENSITY, UNPROTECTED        *\n***********************************************************************\nINPUT100 DS    0H                      HERE TO PROCESS INPUT DATA\n         LH    R15,2(,R6)              LOAD FIELD OFFSET\n         LA    R15,DSCBPANL(R15)           AND ADDRESS FIELD\n         BCTR  R15,00                  BACK UP TO THE ATTRIBUTE\n         NI    0(R15),64               AND OFF HIGHLIGHT ATTRIBUTE\n         SPACE\n***********************************************************************\n*     LOAD A(ROUTINE) TO PROCESS DATA AND BASR. (IF NOT ERASE INPUT)  *\n***********************************************************************\n         LTR   R0,R0                   ERASE EOF INPUT FIELD?\n         BNP   INPUT000                YES, GET NEXT FIELD\n         EX    R2,INPUTOC              INSURE UPPER CASE\n         LH    R15,6(,R6)              Y(OFFSET INTO ROUTINE TBL)\n         SLL   R15,2                       MULTIPLY BY 4\n         L     R15,TABTABLE(R15)       A(ROUTINE TO DEPROCESS INPUT)\n         BASR  R14,R15                     AND CALL SAME\n         B     INPUT000\n         SPACE 2\nINPUTOC  OC    0(0,R1),ALLBLANK        CONVERT TO UPPER CASE\n         EJECT\n***********************************************************************\n*        TEST FOR MODIFIED FILED(S) AND PROCESS ACCORDINGLY           *\n***********************************************************************\nINPUT200 DS    0H                      HERE AFTER END-OF-INPUT\n         TM    MISCFLAG,IPTDSNAM+IPTVOL  EITHER FIELDS MODIFIED?\n         BZ    INPUT300                    NO, CHECK FOR MODIFIED DSCB\n         BAS   R10,RSETATTR                YES, RESET ALL ATTRIBUTES\n         BAS   R10,CVAFRLSE                YES, RELEASE CVAF BUFFERS\n         TM    MISCFLAG,IPTVOL         VOLUME SERIAL MODIFIED?\n         BO    UCBLKPLP                    YES, GO LOOKUP UCB\n         TM    MISCFLAG,IPTDSNAM       DSNAME MODIFIED?\n         BO    LOCATELP                    YES, GO LOCATED DATA SET\nINPUT300 DS    0H\n         TM    MISCFLAG,IPTERROR       WAS THERE AN ERROR?\n         BO    TPUTPANL                    GO DISPLAY A MESSAGE\n         TM    MISCFLAG,DSCBMOD        WAS THE DSCB MODIFIED?\n         LA    R15,WHATTODO                NO, PROMPT TERM OP FOR INPUT\n         BZ    PROCEMSG                    GO DISPLAY A MESSAGE\n***********************************************************************\n*        REWEITE THE DSCB INTO THE VTOC                               *\n***********************************************************************\n         CVAFDIR ACCESS=WRITE,MF=(E,CVAFREQ),BRANCH=(YES,PGM)\n         LTR   R15,R15                 WAS WRITE SUCCESSFUL?\n         BNZ   CVAFPROC                    NO, GO LOAD IN ERROR MESSAGE\n         LA    R15,DSCBMSG1                YES, ADDRESS SUCCESSFUL MSG\n         B     PROCEMSG                REDISPLAY PANEL\n         EJECT\nENDDSNS  DS    0H\n***********************************************************************\n*        TERMINATE FULL SCREEN PROCESSING                             *\n***********************************************************************\n         STLINENO LINE=1               SET NEXT LINE TO 1\n         SPACE\n         STFSMODE OFF                  RESET FROM FULL SCREEN PROCESS\n         SPACE\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\n         BAS   R10,CVAFRLSE            RELEASE CVAF BUFFERS\n         SPACE\n***********************************************************************\n*        TERMINATE PROGRAM                                            *\n***********************************************************************\nRETURN   DS    0H\n*        $AUTHOFF\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   RETNAUTH            NOT ZERO, TELL NOT AUTHORIZED.\nNZ       MODESET KEY=NZERO\nRETNAUTH DS    0H\n         L     R13,4(,R13)             RESTORE BACKWARD POINTER\n         RETURN (14,12),T,RC=0\n         SPACE\nBADBOY   DS    0H\n         TPUT  =CL50'YOU ARE NOT ALLOWED TO USE THIS',50\n         B     RETURN\nMVCERMSG MVC   0(0,R14),2(R15)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET NAME.          *\n*   NOTE: IF A DATA SET NAME IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR VOLSER, WILL BE IGNORED.                  *\n***********************************************************************\nIDSNAME  DS    0H\n         OI    MISCFLAG,IPTDSNAM       INDICATE DSN HAS BEEN INPUT\n         MVC   PDSNAME,ALLZEROS        MOVE IN ALL BLANKS\n         MVC   DS1DSNAM,ALLBLANK       MOVE IN ALL BLANKS\n         LA    R10,PDSNAME             A(PANEL DSNAME)\n         LA    R9,DS1DSNAM             A(DSCB DSNAME)\n         CLI   0(R1),C''''             DOES DSN BEGIN WITH A QUOTE\n         BNE   IDSN100                     NO, DO NOT PROCESS QUOTES\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         LA    R1,1(,R1)                   YES, BYPASS FIRST QUOTE\n         BCTR  R2,00                       DECREMENT FOR FIRST QUOTE\n         STH   R2,LDSNAME                    SAVE NEW LENGTH OF DSNAME\n         BCTR  R2,00                       DECREMENT FOR LAST QUOTE\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         BR    R14\nIDSNMVC2 MVC   0(0,R10),0(R1)          MOVE IN DATA SET NAME\nIDSNMVC3 MVC   0(0,R9),0(R1)           MOVE IN DATA SET NAME\nIDSNMVC4 MVC   0(0,R10),USERIDI        MOVE IN USERID\nIDSNMVC5 MVC   0(0,R9),USERIDI         MOVE IN USERID\n         SPACE\nIDSN100  DS    0H\n         SLR   R8,R8                   CLEAR WORK REG\n         IC    R8,USERIDL              AL1(LENGTH OF USERID)\n         SPACE\n         LA    R15,1(,R8)              USERID + DELIMITER\n         AR    R15,R0                      + LENGTH OF DSNAME\n         STH   R15,LDSNAME             SAVE COMPUTED LENGTH OF DSNAME\n         CH    R15,=H'46'              IS DSNAME GT FIELD LENGTH?\n         LA    R15,DSNLNGER                PROVIDE FOR ERROR MSG\n         BH    FLDERROR                    YES, GENERATE ERROR MESSAGE\n         SPACE\n         BCTR  R8,0                        DECREMENT FOR EXECUTE\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R8,IDSNMVC5             MOVE USERID TO DSNAME\n         EX    R8,IDSNMVC4             MOVE USERID TO DSNAME\n         LA    R9,1(R8,R9)                 AND ADJUST FOR SAME\n         LA    R10,1(R8,R10)               AND ADJUST FOR SAME\n         MVI   0(R9),C'.'              MOVE IN A DELIMITER\n         MVI   0(R10),C'.'             MOVE IN A DELIMITER\n         LA    R9,1(,R9)                   AND ADJUST FOR SAME\n         LA    R10,1(,R10)                 AND ADJUST FOR SAME\n         EX    R2,IDSNMVC2             MOVE DSN INTO PANEL\n         EX    R2,IDSNMVC3             MOVE DSN INTO DSCB\n         LA    R10,1(R2,R10)               AND ADJUST FOR SAME\n         MVI   0(R10),C''''            MOVE IN A QUOTE\n         BR    R14\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A VOLUME SERIAL NUMBER.            *\n*   NOTE: IF A VOLUME SERIAL IS ENTERED BY THE USER, ALL REMAINING    *\n*         INPUT, EXCEPT FOR DATA SET NAME, WILL BE IGNORED.           *\n***********************************************************************\nIVOLSER  DS    0H\n         OI    MISCFLAG,IPTVOL         INDICATE VOLSER ENTERED\n         MVC   PVOLSER,ALLZEROS        CLEAR TARGET FIELD\n         EX    R2,IVOLMVC                  AND MOVE IN VOLSER\n         BR    R14\nIVOLMVC  MVC   PVOLSER(0),0(R1)        EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED CREATION DATE.          *\n***********************************************************************\nICREDT   DS    0H\n         MVC   PCREDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ICREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1CREDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1CREDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK CREATION DATE\n         UNPK  PCREDT,DWORD                AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nICREMVC1 MVC   PCREDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED REFERENCE DATE.         *\n***********************************************************************\nIREFD    DS    0H\n         MVC   PREFD,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IREFMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1REFD                 AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1REFD+1       AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK REFERENCE DATE\n         UNPK  PREFD,DWORD                 AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nIREFMVC1 MVC   PREFD(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED EXPIRATION DATE.        *\n***********************************************************************\nIEXPDT   DS    0H\n         MVC   PEXPDT,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IEXPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         CH    R0,=H'5'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BNE   FLDERROR                    NO, REDISPLAY SCREEN\n         PACK  DWORD,0(2,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STC   R15,DS1EXPDT                AND SAVE IN TARGET FIELD\n         PACK  DWORD,2(3,R1)           PACK YEAR\n         CVB   R15,DWORD                   CONVERT TO BINARY\n         STCM  R15,B'0011',DS1EXPDT+1      AND SAVE IN TARGET FIELD\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         EX    R2,NUMBPACK             PACK EXPIRATION DATE\n         UNPK  PEXPDT,DWORD                AND UNPACK INTO FIELD\n         BR    R14                     RETURN TO CALLER\nIEXPMVC1 MVC   PEXPDT(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DATA SET ORGINAZATION.  *\n***********************************************************************\nIDSORG   DS    0H\n         MVC   PDSORG,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IDSOMVC1             MOVE INTO PANEL\n         CH    R0,=H'2'                CORRECT LENGTH?\n         LA    R15,LNGTHER1                A(FIELD LENGTH ERROR)\n         BL    FLDERROR                    NO, REDISPLAY SCREEN\n         LA    R8,DSORGTAB             A(DSORG TABLE)\n         LA    R9,DSORGCNT             A(ENTRY COUNT OF SAME)\nIDSORG00 DS    0H\n         CLC   0(2,R8),0(R1)           COMPARE TABLE ENTRY TO INPUT\n         BE    IDSORG10                    IF EQUAL, PROCESS\n         LA    R8,DSORGLNG(,R8)        BUMP TO NEXT ENTRY\n         BCT   R9,IDSORG00                 AND GO CHECK THAT ONE\n         LA    R15,DSORGER1            A(DSORG ERROR MESSAGE)\n         B     FLDERROR\nIDSORG10 DS    0H\n         XC    FWORD,FWORD             CLEAR WORK AREA\n         CH    R0,=H'3'                WAS UNMOVABLE SPECIFIED?\n         BNE   IDSORG20                    NO, BYPASS IT THEN\n         CLI   2(R1),64                IS THIS A BLANK\n         BE    IDSORG20                    YES, NOT UNMOVEABLE\n         CLI   2(R1),C'U'              IS IT UNMOVEABLE?\n         LA    R15,DSORGER1                NO, INDICATE BAD DSORG\n         BNE   FLDERROR                      AND REDISPLAY SCREEN\n         OI    FWORD,DS1DSGU           INDICATE UNMOVEABLE\nIDSORG20 DS    0H\n         XC    DS1DSORG,DS1DSORG       CLEAR DSORG FIELD\n         OC    DS1DSORG,2(R8)          MOVE IN NEW DSORG\n         OC    DS1DSORG,FWORD              AND ADD 'U', IF SUPPLIED\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14\nIDSOMVC1 MVC   PDSORG(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RECORDING FORMAT.       *\n***********************************************************************\nIRECFM   DS    0H\n         MVC   PRECFM,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,IRECMVC1             MOVE TO PANEL\n         LR    R10,R0                  A(COUNT OF CHARS IN INPUT)\n         XC    FWORD,FWORD             CLEAR WORK FIELD\nIRECFM00 DS    0H\n         LA    R8,RECFMTAB             A(RECFM TABLE)\n         LA    R9,RECFMCNT             A(ENTRY COUNT OF SAME)\nIRECFM05 DS    0H\n         CLI   0(R1),64                IS THIS A BLANK?\n         BE    IRECFM25                    YES, BYPASS IT THEN\n         SPACE\nIRECFM10 DS    0H\n         CLC   0(1,R8),0(R1)           MATCHING ENTRY?\n         BE    IRECFM20                    YES, PROCESS\n         LA    R8,RECFMLNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,IRECFM10                 AND GO PROCESS IT\n         LA    R15,RECFMER1            A(INVALID RECFM INPUT)\n         B     FLDERROR                    AND GO PROCESS ERROR\nIRECFM20 DS    0H\n         OC    FWORD(1),1(R8)          SAVE THIS BIT\nIRECFM25 DS    0H\n         LA    R1,1(,R1)               BUMP TO NEXT BYTE\n         BCT   R10,IRECFM00            PROCESS NEXT BYTE OF INPUT\n         SPACE\n         LA    R15,RECFMER1            PRELOAD INVALID RECFM INPUT MSG\n         TM    FWORD,DS1RECFU          WAS UNDEFINED SPECIFID?\n         BNO   IRECFM30                NO, BYPASS NEXT TEST\n         TM    FWORD,255-DS1RECFU-DS1RECFA-DS1RECMC     ANY OTHERS?\n         BNZ   FLDERROR                    YES, ERRONOUS INPUT\nIRECFM30 DS    0H\n         OC    FWORD(1),FWORD          TEST FOR ANY INPUT\n         BZ    FLDERROR                    IF ZERO, INDICATE ERROR\n         SPACE\n         XC    DS1RECFM,DS1RECFM       RESET RECORDING FORMAT\n         OC    DS1RECFM,FWORD              AND SET NEW VALUE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRECMVC1 MVC   PRECFM(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LOGICAL RECORD LENGTH.  *\n***********************************************************************\nILRECL   DS    0H\n         MVC   PLRECL,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ILREMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK LRECL\n         UNPK  PLRECL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1LRECL        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILREMVC1 MVC   PLRECL(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED BLOCK SIZE.             *\n***********************************************************************\nIBLKL    DS    0H\n         MVC   PBLKL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IBLKMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK BLKL\n         UNPK  PBLKL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1BLKL         AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIBLKMVC1 MVC   PBLKL(0),0(R1)          EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED KEY LENGTH.             *\n***********************************************************************\nIKEYL    DS    0H\n         MVC   PKEYL,ALLZEROS          CLEAR TARGET FIELD\n         EX    R2,IKEYMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK KEYL\n         UNPK  PKEYL,DWORD                 AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STC   R15,DS1KEYL                 AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIKEYMVC1 MVC   PKEYL(0),0(R1)          EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED RELATIVE KEY POSITION.  *\n***********************************************************************\nIRKP     DS    0H\n         MVC   PRKP,ALLZEROS           CLEAR TARGET FIELD\n         EX    R2,IRKPMVC1             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PRKP,DWORD                  AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0011',DS1RKP          AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIRKPMVC1 MVC   PRKP(0),0(R1)           EXECUTED MVC\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED LSTAR.                  *\n***********************************************************************\nILSTAR   DS    0H\n         MVC   PLSTAR,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ILSTMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STCM  R3,B'0111',DS1LSTAR     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nILSTMVC1 MVC   PLSTAR(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED TRACK BALANCE.          *\n***********************************************************************\nITRBAL   DS    0H\n         MVC   PTRBAL,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,ITRBMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         EX    R2,NUMBPACK             PACK RKP\n         UNPK  PTRBAL,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R3,B'0011',DS1TRBAL     UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nITRBMVC1 MVC   PTRBAL(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED SMSIND                  *\n***********************************************************************\nSMSIND   DS    0H\n         MVC   PSMSIND,ALLZEROS        CLERA TARGET FIELD\n         EX    R2,SMSIMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1SMSFG                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nSMSIMVC1 MVC   PSMSIND(0),0(R1)        EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED DSIND.                  *\n***********************************************************************\nIDSIND   DS    0H\n         MVC   PDSIND,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,IDSIMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1DSIND                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIDSIMVC1 MVC   PDSIND(0),0(R1)         EXECUTED MOVE\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A MODIFIED OPTCD                   *\n***********************************************************************\nIOPTCD   DS    0H\n         MVC   OPTCDE,ALLZEROS         CLERA TARGET FIELD\n         EX    R2,IOPTMVC1             MOVE SAME TO PANEL\n         EX    R2,NUMHXTRT             TEST FOR VALID HEX DIGITS\n         LA    R15,HEXER                   IF INVALID, LOAD ERROR MSG\n         BNZ   FLDERROR                    AND INFORM USER\n         BAS   R10,CONV2HEX            CONVERT TO HEXIDECIMAL\n         STC   R3,DS1OPTCD                 UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nIOPTMVC1 MVC   OPTCDE(0),0(R1)         EXECUTED MOVE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC TYPE.            *\n***********************************************************************\nISCALL1  DS    0H\n         MVC   PSCAL1,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC1             MOVE TO PANEL\n         LA    R8,SCAL1TAB             A(TABLE OC ACCEPTABLE VALUES)\n         LA    R9,SCAL1CNT             A(COUNT OF SAME)\nISCALL00 DS    0H\n         CLC   0(1,R8),0(R1)           ENTRIES EQUAL??\n         BE    ISCALL10                    IF EQUAL, PROCESS\n         LA    R8,SCAL1LNG(,R8)            NO, BUMP TO NEXT ENTRY\n         BCT   R9,ISCALL00             PROCESS THIS ENTRY\n         LA    R15,SCALLER             A(ADDRESS ERROR MESSABE)\n         B     FLDERROR\nISCALL10 DS    0H\n         XC    DS1SCAL1,DS1SCAL1       CLEAR ALLOCATION TYPE\n         OC    DS1SCAL1,1(R8)              AND MOVE IN NEW TYPE\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC1 MVC   PSCAL1(0),0(R1)         EXECUTED MVC\n         SPACE\n***********************************************************************\n*        THIS ROUTINE WILL PROCESS A SECONDARY ALLOC AMOUNT.          *\n***********************************************************************\nISCALL3  DS    0H\n         MVC   PSCAL3,ALLZEROS         CLEAR TARGET FIELD\n         EX    R2,ISCAMVC2             MOVE DATA TO PANEL\n         EX    R2,NUMBRTRT             TEST FOR VALID NUMERICS\n         LA    R15,NUMBERER                A(NUMERIC TEST ERROR)\n         BNZ   FLDERROR                    IF NOT, REDISPLAY SCREEN\n         EX    R2,NUMBPACK             PACK SCALL3\n         UNPK  PSCAL3,DWORD                AND UNPACK INTO FIELD\n         CVB   R15,DWORD               CONVERT TO BINARY\n         STCM  R15,B'0111',DS1SCAL3        AND UPDATE DSCB\n         OI    MISCFLAG,DSCBMOD        INDICATE DSCB MODIFIED\n         BR    R14                     RETURN TO CALLER\nISCAMVC2 MVC   PSCAL3(0),0(R1)         EXECUTED MVC\n         EJECT\n***********************************************************************\n*        CHAR TO HEX CONVERSION ROUTINE                               *\n***********************************************************************\nCONV2HEX DS    0H\n         LR    R8,R1                   LOAD ADDRESS OF SOURCE VALUE\n         LR    R9,R0                   LOAD LOOP COUNTER\n         SLR   R3,R3                   CLEAR TARGET REGISTER\nLOOP2BIN DS    0H\n         SLL   R3,4                    MAKE ROOM FOR NEXT NIBBLE\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,0(0,R8)             INSERT A BYTE\n         N     R15,=F'15'              TURN OFF ALL BUT LAST NIBBLE\n         TM    0(R8),240               IS IT NUMERIC\n         BO    HEX010                      YES, BYPASS ADD HALFWORD\n         AH    R15,=H'9'               ADD 9 IF NOT A NUMBER\nHEX010   DS    0H\n         OR    R3,R15                  STORE IN RESULT\n         LA    R8,1(0,R8)              NEXT TARGET BYTE\n         BCT   R9,LOOP2BIN             PROCEED THROUGH FULLWORD\n         BR    R10                     RETURN TO CALLER\n         SPACE\n***********************************************************************\n*        FIELD ERROR PROCESSING ROUTINE                               *\n*   ON INPUT: R15 = A(ERROR MESSAGE AREA)                             *\n*             ALL OTHER REGISTERS ARE THE SAME AS UPON INPUT TO A     *\n*             FIELD DE-PROCESSING ROUTINE.                            *\n***********************************************************************\nFLDERROR DS    0H\n         TM    MISCFLAG,IPTERROR       MORE THAN ONE ERROR?\n         BO    FLDERR10                    YES, BYPASS MESSAGE MOVE\n         OI    MISCFLAG,IPTERROR           NO, SET ERROR FLAG\n         MVC   DSCBPCSR,0(R6)          ALTER THE IC BUFF ADDR\n         MVC   PERRMSG,ALLBLANK        CLEAR TARGET FIELD\n         LA    R10,PERRMSG             A(TARGET FOR ERROR MESSAGE)\n         LA    R8,L'PERRMSG                LENGTH OF SAME\n         LH    R9,0(R15)               LOAD LENGTH OF MESSAGE TO DISPLY\n         CR    R9,R8                   GREATER THAN MAXIMUM?\n         BNH   FLD010                      NO, CONTINUE\n         LR    R9,R8                       YES, LOAD MAXIMUM LENGTH\nFLD010   DS    0H\n         SR    R8,R9                   COMPUTE REMAINDER\n         BNP   FLD020                  BYPASS NEXT TWO INSTRS IF NEG\n         SRL   R8,1                    DIVIDE BY TWO\nFLD020   DS    0H\n         LA    R10,0(R8,R10)           CENTER ERROR MESSAGE\n         BCTR  R9,00                   DECREMENT FOR EXECUTE\n         EX    R9,FLDMVC1              MOVE ERROR MESSAGE\n         SPACE\nFLDERR10 DS    0H\n         LH    R8,02(,R6)              LOAD OFFSET TO FIELD\n         LA    R8,DSCBPANL(R8)             AND ADDRESS ACTUAL FIELD\n         BCTR  R8,00                       BACK UP TO ATTRIBUTE BYTE\n         OI    0(R8),X'89'             TURN ON HIGH-INTENS + MDT\n         BR    R14                     RETURN TO MAINLINE\n         TITLE '     TABLE000 -- PROCESS TGET INPUT BUFFER'\n         PUSH  USING\n         DROP  R11                     DROP PREVIOUS BASE REGISTER\n***********************************************************************\n*                                                                     *\n*       THIS ROUTINE WILL PROCESS THE INPUT FROM AN 'ASIS' TGET       *\n*   AGAINST A TABLE OF SBA'S. THE OUTPUT IS THE ADDRESS AND LENGTH    *\n*   OF THE INPUT FIELD AND THE ADDRESS OF THE ENTRY IN THE SBA        *\n*   TABLE WITH THE MATCHING SBA.                                      *\n*       NOTE: IF, BY CHANCE, A FIELD IS FOUND IN THE INPUT STREAM     *\n*   THAT DOES NOT HAVE A MATCHING TABLE ENTRY, REG 06 IS RETURNED     *\n*   EMPTY, BUT THE FIELD ADDRESS AND LENGTHS ARE RETURNED TO THE USER.*\n*                                                                     *\n*   INPUT REGISTERS                                                   *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  BUFFTAB LIST (FROM $FLD GENERATION)                  *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n*   OUTPUT REGISTERS                                                  *\n*        R0   -  ACTUAL LENGTH OF INPUT/ZERO IF 'ERASE EOF' OF FIELD  *\n*        R1   -  ADDRESS OF FIELD IN INPUT                            *\n*        R2   -  LENGTH - 1 OF FIELD IN INPUT                         *\n*        R4   -  NEXT BYTE TO PROCESS                                 *\n*        R5   -  REMAINING LENGTH OF DATA                             *\n*        R6   -  MATCHING BUFFTAB ENTRY OR ZERO                       *\n*        R7   -  LENGTH OF EACH BUFFER TABLE ENTRY                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nTABLE000 DS    0H                      HERE TO PROCESS TGET INPUT\n         USING TABLE000,R15\n         LTR   R5,R5                   ANY THING LEFT TO CHECK?\n         BZ    TABLE050                NO, RETURN TO CALLER\n         SPACE\nTABLE025 DS    0H                      CHECK FOR SBA IN INPUT\n         CLI   0(R4),X'11'             A START FIELD CHARACTER?\n         BE    TABLE100                    YES, GO PROCESS INPUT FIELD\n         LA    R4,1(,R4)                   NO, BUMP AROUND\n         BCT   R5,TABLE025                 GO TEST NEXT BYTE\nTABLE050 DS    0H                      RETURN TO USER WITH NOTHING\n         SLR   R6,R6                   INDICATE NO DATA TO PROCESS\n         BR    R14                     RETURN TO CALLER\n         SPACE\nTABLE100 DS    0H\n         LA    R4,1(,R4)               BUMP AROUND SBA\n         BCT   R5,TABLE120                 DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\nTABLE120 DS    0H\n         LH    R2,0(R6)                LOAD NUMBER OF ENTRIES IN TABLE\n         LA    R6,2(,R6)               BUMP TO START OF TABLE\n         EJECT\nTABLE200 DS    0H\n         CLC   0(2,R4),0(R6)           COMPARE SBA TO TABLE ENTRY\n         BE    TABLE300                    BRANCH OUT IF FOUND\n         LA    R6,0(R7,R6)             BUMP TO NEXT TABLE ENTRY\n         BCT   R2,TABLE200             GO CHECK NEXT ENTRY\n         SLR   R6,R6                   INDICATE NO MATCH\n         SPACE\nTABLE300 DS    0H                      A MATCHING TABLE ENTRY (MAYBE)\n         LA    R4,2(R4)                BUMP TO DATA ADDRESS\n         BCTR  R5,00                       AND DECREMENT SAME\n         BCT   R5,TABLE320                 DECREMENT AND BRANCH AROUND\n         B     TABLE050                       THIS INSTR IF NOT ZERO\nTABLE320 DS    0H\n         LR    R1,R4                   SAVE STARTING ADDRESS\n         SPACE\nTABLE400 DS    0H                      FIND END OF FIELD\n         CLI   0(R4),X'11'             LOOK FOR NEXT FIELD START\n         BE    TABLE500                    AND BRENCH OUT IF FOUND\n         LA    R4,1(,R4)               BUMP ANOTHER BYTE\n         BCT   R5,TABLE400                 AND GO CHECK THIS ONE\n         SPACE\nTABLE500 DS    0H                      HERE AT END OF DATA OR NEXT SBA\n         LR    R2,R4                   PREPARE FOR LENGTH COMPUTATION\n         SR    R2,R1                      AND COMPUTE ACTUAL LENGTH\n         LR    R0,R2                        LOAD IT INTO RETURN REG\n         BCTR  R2,00                          DECREMENT FOR EXECUTE(S)\n         B     4(,R14)                 RETURN TO CALLER\n         POP   USING\n         SPACE\nFLDMVC1  MVC   0(0,R10),2(R15)         EXECUTED MOVE\nNUMBRTRT TRT   0(0,R1),NUMTAB          EXECUTED TRT\nNUMHXTRT TRT   0(0,R1),NUMHEXTB        EXECUTED TRANSLATE AND TEST\nNUMBPACK PACK  DWORD,0(0,R1)           EXECUTED PACK INSTRUCTION\n         TITLE '     CVAFPROC -- GENERATE CVAF ERROR MESSAGE'\n***********************************************************************\n*        ROUTINE TO PROCESS ERROR RETURN FROM CVAF                    *\n***********************************************************************\nCVAFPROC DS    0H\n         USING CVAFMAP,R3\n         LA    R3,CVAFREQ\n*        CLI   CVSTAT,00               ERROR GENERATED?\n*        BE    R14                         NO, BYPASS MSG\nCVAFP010 DS    0H\n         SLL   R15,16                  SHIFT RC TO HIGH ORDER 2 BYTES\n         LA    R1,4                        AND LOAD COUNT OF ENTRIES\n         LA    R2,CVAFRC               A(TARGET AREA)\n         SPACE\nCVAFP020 DS    0H\n         SLR   R14,R14                 CLEAR WORK REG\n         SLDL  R14,4                   SHIFT HALF A BYTE INTO REG\n         STC   R14,0(,R2)              SAVE THIS HALF BYTE\n         LA    R2,1(,R2)                   BUMP TO NEXT TARGET ADDRESS\n         BCT   R1,CVAFP020                 AND PROCESS THAT ONE\n         TR    CVAFRC,TRTAB            TRANSLATE TO PRINTABLE CHARS\n         SPACE\n         LA    R1,CVAFREQ\n         SLR   R15,R15                 CLEAR WORK REG\n         IC    R15,CVSTAT                  AND LOAD STATUS BYTE\n         CVD   R15,DWORD                   CONVERT TO DECIMAL\n         OI    DWORD+7,15                  INSURE PRINTABLE SIGN\n         UNPK  CVAFST,DWORD            MOVE TO OUTPUT LINE\n         SPACE\n         MVC   CVAFTYPE,=CL5'READ '    DEFAULT TO READ\n         CLI   CVFCTN,CVDIRD           WAS IT A READ?\n         BE    CVAFP030                    YES, BYPASS WRITE\n         MVC   CVAFTYPE,=CL5'WRITE'        NO, INDICATE IT WAS A WRITE\n         SPACE\nCVAFP030 DS    0H\n         LA    R15,CVAFERR             GET ADDRESS OF MESSAGE\n         B     PROCEMSG                RETURN TO CALLER\n         TITLE '     RSETATTR -- RESET ALL MODIFIABLE FIELD ATTRIBUTES'\n***********************************************************************\n*        ROUTINE TO RESET ALL MODIFIABLE FIELD ATTRIBUTES             *\n***********************************************************************\nRSETATTR DS    0H\n         LA    R1,PDSCBL-2             A(H'ENTRIES IN TABLE')\n         LH    R2,0(R1)                H'ENTRIES IN TABLE'\n         LA    R3,PDSCBLEL             A(ENTRY LENGTH)\n         LA    R1,2(,R1)               A(TABLE PROPER)\n         LA    R4,DSCBPANL             A(PANEL)\nRSET0000 DS    0H                      LOOP THROUGH TABLE\n         LH    R5,2(,R1)               LOAD FIELD OFFSET\n         BCTR  R5,00                   DECREMENT BACK TO ATTRIBUTE\n         AR    R5,R4                   ADD PANEL BASE\n         NI    0(R5),64                RESET TO MODIFIABLE, NORM INTENS\n         LA    R1,0(R3,R1)             BUMP TO NEXT ENTRY\n         BCT   R2,RSET0000                 AND GO PROCESS SAME\n         BR    R10                     RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*        RELEASE CVAF BUFFERS                                         *\n***********************************************************************\nCVAFRLSE DS    0H\n         CVAFDIR ACCESS=RLSE,BUFLIST=0,IXRCDS=NOKEEP,BRANCH=(YES,PGM), $\n               IOAREA=NOKEEP,MF=(E,CVAFREQ)\n         OC    UCBTOKEN,UCBTOKEN                                30OCT95\n         BZ    CVAFR010                                         30OCT95\n         MODESET MODE=SUP                                       30OCT95\n         UCBPIN UNPIN,PTOKEN=UCBTOKEN,                          30OCT95X\n               MF=(E,XUCBPIN)                                   30OCT95\n         MVC   UCBTOKEN,ALLZEROS                                30OCT95\n         MVC   UCBADDR,ALLZEROS                                 30OCT95\n         MODESET MODE=PROB                                      30OCT95\nCVAFR010 DS    0H                                               30OCT95\n         BR    R10                     RETURN TO CALLER\n         BR    R10                     RETURN TO CALLER\n         SPACE\n         PRINT DATA\n         DC    64S(*)\n         PRINT NODATA\n         TITLE 'WORKING STORAGE AND CONSTANTS'\n         DROP  ,\nSAVEAREA DS    18F\nDWORD    DS    D\nFWORD    DS    F\nALLBLANK DC    256C' '\nALLZEROS DC    256X'00'\nDSNLOC   CAMLST NAME,DS1DSNAM,,LOCWORK\n         DS    0D\nLOCWORK  DS    XL512                   LOCATE WORK AREA\nINPUT    EQU   LOCWORK,512\nLDSNAME  DS    H                       LENGTH OF DS1DSNAM\nDEFCSRAD DS    XL2                     DEFAULT CURSOR BUFF ADDR\n         SPACE\nUCBADDR  DS    A(0)                                             30OCT95\nUCBTOKEN DC    XL8'00'                                          30OCT95\n         UCBLOOK MF=(L,XUCBLOOK,0D)                             30OCT95\n         UCBPIN  MF=(L,XUCBPIN,0D)                              30OCT95\n         SPACE\nSYSDSN   DC    CL8'SYSDSN'             QNAME FOR ENQ\n         SPACE\nMODELENQ ENQ   (SYSDSN,,E,,SYSTEM),RET=TEST,MF=L\n         SPACE\nMODESENQ ENQ   (SYSDSN,,E,,SYSTEMS),RET=TEST,MF=L\n         SPACE\nUSERID   DS    0CL9\nUSERIDL  DS    X\nUSERIDI  DS    CL8\n         EJECT\n         LTORG\n         SPACE\n         PRINT NOGEN\nDSNLOCER MSSG  'DATA SET NAME NOT CATALOGED - RESPECIFY'\nENQERMSG MSSG  'DATA SET IS IN USE BY OTHER(S) - MODIFY THIS DSCB WITH $\n               CAUTION'\nDSNAMEER MSSG  'DATA SET NAME NOT SPECIFIED AT CP INVOCATION - RESPECIF$\n               Y'\nDSNLNGER MSSG  'LENGTH OF DSNAME AND USERID GREATER THAN FIELD LENGTH -$\n                RESPECIFY'\nUCBERMSG MSSG  'VOLUME SERIAL REQUESTED NOT ONLINE - RESPECIFY DSN OR V$\n               OL'\nDSORGER1 MSSG  'INVALID DATASET ORGINIZATION - RESPECIFY - PO/PS/DA/IS/$\n               AM (U) ALLOWED'\nRECFMER1 MSSG  'INVALID RECORDING FORMAT - RESPECIFY - F/V/U/B/S/A/M'\nNUMBERER MSSG  'INVALID DATA, FIELD MUST BE ALL NUMERIC'\nHEXER    MSSG  'INVALID DATA, FIELD MUST BE ALL HEXIDECIMAL CHARACTERS'\nLNGTHER1 MSSG  'INVALID DATA, DATA LENGTH MUST MATCH INPUT FIELD LENGTH$\n               '\nSCALLER  MSSG  'SECONDARY ALLOCATION TYPE INVALID - RESPECIFY - C/T/B/R$\n               /U'\nWHATTODO MSSG  'TO TERMINATE, ONE MUST DEPRESS EITHER PFK3 OR PFK15'\nDSCBMSG1 MSSG  'DSCB HAS BEEN SUCCESSFULLY REWRITTEN'\n         SPACE\nCVAFERR  DC    AL2(CVAFERRE-*-2)       LENGTH OF ERROR MESSAGE\n         DC    C'ERROR RETURN FORM CVAF DURING '\nCVAFTYPE DC    CL5' '\n         DC    C', RETURN CODE='\nCVAFRC   DC    XL4'00'\n         DC    C', STATUS='\nCVAFST   DC    CL3' '\nCVAFERRE EQU   *                       END OF ERROR MESSAGE\n         PRINT GEN\n         EJECT\nMISCFLAG DC    B'00000000'\nNSHARED  EQU   B'10000000'             INDICATES UCB NOT SHARED\nIPTDSNAM EQU   B'01000000'             DATA SET NAME HAS CHANGED\nIPTVOL   EQU   B'00100000'             VOLSER PROVIDED BY TERMINAL OPR\nIPTERROR EQU   B'00010000'             INPUT ERROR HAS BEEN ENCOUNTERED\nDSCBMOD  EQU   B'00001000'             DSCB HAS BEEN MODIFIED\nENQUEUE  EQU   B'00000100'             DATA SET IS IN USE\n*        EQU   B'00000010'             UNUSED AT PRESENT\n*        EQU   B'00000001'             UNUSED AT PRESENT\n         SPACE\nTRTAB    DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE\n         SPACE\nNUMTAB   DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMTAB+C'0'             ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nNUMHEXTB DC    256X'FF'                VALID NUMERIC TABLE\n         ORG   NUMHEXTB+C'0'           ORG BACK TO NUMERALS\n         DC    X'00000000000000000000'\n         ORG   NUMHEXTB+C'A'           ORG BACK TO HEX CHARS\n         DC    X'000000000000'\n         ORG   ,                       RESET LOCATION COUNTER\n         SPACE\nDSORGTAB DS    0CL20                   DATASET ORGINAZATION TABLE\n         DC    CL2'IS',AL1(DS1DSGIS,00000000)\nDSORGLNG EQU   *-DSORGTAB              LENGTH OF ONE ENTRY\n         DC    CL2'PS',AL1(DS1DSGPS,00000000)\n         DC    CL2'DA',AL1(DS1DSGDA,00000000)\n         DC    CL2'PO',AL1(DS1DSGPO,00000000)\n         DC    CL2'AM',AL1(00000000,DS1ORGAM)\nDSORGCNT EQU   (*-DSORGTAB)/DSORGLNG   COUNT OF ENTRIES\n         SPACE\nRECFMTAB DS    0CL14                   DATASET RECFM TABLE\n         DC    CL1'F',AL1(DS1RECFF)\nRECFMLNG EQU   *-RECFMTAB              LENGTH OF ONE ENTRY\n         DC    CL1'V',AL1(DS1RECFV)\n         DC    CL1'U',AL1(DS1RECFU)\n         DC    CL1'B',AL1(DS1RECFB)\n         DC    CL1'S',AL1(DS1RECFS)\n         DC    CL1'A',AL1(DS1RECFA)\n         DC    CL1'M',AL1(DS1RECMC)\nRECFMCNT EQU   (*-RECFMTAB)/RECFMLNG   COUNT OF ENTRIES\n         SPACE\nSCAL1TAB DS    0CL14                   SECONDARY ALLOCATION TYPE TABLE\n         DC    CL1'C',AL1(DS1CYL)      CYLINDER BOUNDARY\nSCAL1LNG EQU   *-SCAL1TAB              LENGTH OF ONE ENTRY\n         DC    CL1'T',AL1(DS1TRK)      TRACK BOUNDARY\n         DC    CL1'B',AL1(DS1AVR)      AVR BLOCK\n         DC    CL1'R',AL1(DS1AVRND)    AVG BLOCK AND ROUND\n         DC    CL1'A',AL1(DS1DSABS)    ABSOLUTE TRACK\nSCAL1CNT EQU   (*-SCAL1TAB)/SCAL1LNG   COUNT OF ENTRIES\n         EJECT\nTABTABLE DS    0F                  VALUE=(Y(00)) IN $FLD\n         DC    A(IDSNAME)           0\n         DC    A(IVOLSER)           1\n         DC    A(ICREDT)            2\n         DC    A(IREFD)             3\n         DC    A(IEXPDT)            4\n         DC    A(IDSORG)            5\n         DC    A(IRECFM)            6\n         DC    A(ILRECL)            7\n         DC    A(IBLKL)             8\n         DC    A(IKEYL)             9\n         DC    A(IRKP)             10\n         DC    A(ILSTAR)           11\n         DC    A(ITRBAL)           12\n         DC    A(SMSIND)           13\n         DC    A(IDSIND)           14\n         DC    A(IOPTCD)           15\n         DC    A(ISCALL1)          16\n         DC    A(X'80000000'+ISCALL3) 17\n         SPACE 2\nCVAFREQ  CVAFDIR DSN=DS1DSNAM,BUFLIST=CVAFBUF,IOAREA=KEEP,             $\n               IXRCDS=KEEP,MF=L\n         EJECT\nCVAFBUF  ICVAFBFL DSECT=NO\n         EJECT\nDSCB     DS    0F\n         IECSDSL1 (1)                  MAP OUT DSCB FORMAT 1\nLDSCB    EQU   *-DSCB\n         TITLE '              -- DSCB FIELD(S) MAP FOR A MODEL 2'\nDSCBPANL $FLD  TYPE=INIT,MODEL='3278-2',BUFFTAB=YES,OPERATN=WRITERAS,  $\n               FILL=00\n         $FLD  POS=(01,20),ATR=SKIP,                                   $\n               INITIAL='DATA SET CONTROL BLOCK MODIFICATION PANEL'\n         $FLD  POS=(03,18),ATR=SKIP,                                   $\n               INITIAL='DATA SET NAME'\nPDSNAME  $FLD  POS=(03,32),ATR=(IC,UNPR),                              $\n               VALUES=(Y(00)),LENGTH=46\n         EJECT\n         $FLD  POS=(05,18),ATR=SKIP,                                   $\n               INITIAL='VOLUME SERIAL'\nPVOLSER  $FLD  POS=(05,32),ATR=UNPR,                                   $\n               VALUES=(Y(01)),LENGTH=6\n         $FLD  POS=(07,18),ATR=SKIP,                                   $\n               INITIAL='CREATION DATE'\nPCREDT   $FLD  POS=(07,32),ATR=UNPR,                                   $\n               VALUES=(Y(02)),LENGTH=5\n         EJECT\n         $FLD  POS=(08,17),ATR=SKIP,                                   $\n               INITIAL='REFERENCE DATE'\nPREFD    $FLD  POS=(08,32),ATR=UNPR,                                   $\n               VALUES=(Y(03)),LENGTH=5\n         $FLD  POS=(09,16),ATR=SKIP,                                   $\n               INITIAL='EXPIRATION DATA'\nPEXPDT   $FLD  POS=(09,32),ATR=UNPR,                                   $\n               VALUES=(Y(04)),LENGTH=5\n         EJECT\n         $FLD  POS=(11,10),ATR=SKIP,                                   $\n               INITIAL='DATA SET ORGINIZATION'\nPDSORG   $FLD  POS=(11,32),ATR=UNPR,                                   $\n               VALUES=(Y(05)),LENGTH=3\n         $FLD  POS=(12,18),ATR=SKIP,                                   $\n               INITIAL='RECORD FORMAT'\nPRECFM   $FLD  POS=(12,32),ATR=UNPR,                                   $\n               VALUES=(Y(06)),LENGTH=4\n         EJECT\n         $FLD  POS=(13,10),ATR=SKIP,                                   $\n               INITIAL='LOGICAL RECORD LENGTH'\nPLRECL   $FLD  POS=(13,32),ATR=UNPR,                                   $\n               VALUES=(Y(07)),LENGTH=5\n         $FLD  POS=(14,12),ATR=SKIP,                                   $\n               INITIAL='PHYSICAL BLOCK SIZE'\nPBLKL    $FLD  POS=(14,32),ATR=UNPR,                                   $\n               VALUES=(Y(08)),LENGTH=5\n         EJECT\n         $FLD  POS=(15,21),ATR=SKIP,                                   $\n               INITIAL='KEY LENGTH'\nPKEYL    $FLD  POS=(15,32),ATR=UNPR,                                   $\n               VALUES=(Y(09)),LENGTH=3\n         $FLD  POS=(16,10),ATR=SKIP,                                   $\n               INITIAL='RELATIVE KEY POSITION'\nPRKP     $FLD  POS=(16,32),ATR=UNPR,                                   $\n               VALUES=(Y(10)),LENGTH=3\n         EJECT\n         $FLD  POS=(18,06),ATR=SKIP,                                   $\n               INITIAL='LAST USED TRACK AND BLOCK'\nPLSTAR   $FLD  POS=(18,32),ATR=UNPR,                                   $\n               VALUES=(Y(11)),LENGTH=6\n         $FLD  POS=(18,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         $FLD  POS=(19,01),ATR=SKIP,                                   $\n               INITIAL='BYTES REMAINING ON LAST TRACK'\nPTRBAL   $FLD  POS=(19,32),ATR=UNPR,                                   $\n               VALUES=(Y(12)),LENGTH=4\n         EJECT\n         $FLD  POS=(20,17),ATR=SKIP,                                   $\n               INITIAL='SMS INDICATORS'\nPSMSIND  $FLD  POS=(20,32),ATR=UNPR,                                   $\n               VALUES=(Y(13)),LENGTH=2\n         $FLD  POS=(20,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(21,12),ATR=SKIP,                                   $\n               INITIAL='DATA SET INDICATORS'\nPDSIND   $FLD  POS=(21,32),ATR=UNPR,                                   $\n               VALUES=(Y(14)),LENGTH=2\n         $FLD  POS=(21,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(22,22),ATR=SKIP,                                   $\n               INITIAL='OPT CODES'\nOPTCDE   $FLD  POS=(22,32),ATR=UNPR,                                   $\n               VALUES=(Y(15)),LENGTH=2\n         $FLD  POS=(22,40),ATR=(SKIP,BRT),                             $\n               INITIAL='<=== HEXADECIMAL'\n         SPACE\n         $FLD  POS=(23,11),ATR=SKIP,                                   $\n               INITIAL='SECONDARY ALLOCATION'\nPSCAL1   $FLD  POS=(23,32),ATR=UNPR,                                   $\n               VALUES=(Y(16)),LENGTH=1\n         EJECT\nPSCAL3   $FLD  POS=(23,34),ATR=UNPR,                                   $\n               VALUES=(Y(17)),LENGTH=5\nPERRMSG  $FLD  POS=(24,02),ATR=(SKIP,BRT),                             $\n               INITIAL='                                               $\n                                          '\n         PRINT GEN\nPDSCBL   $FLD  TYPE=FINAL,BUFFTAB=PDSCBL,EQU=LPDSCBL\nLPDSCB   EQU   (((*-DSCBPANL+7)/8)*8)   LENGTH OF DCT PANEL\n         EJECT\nCVAFMAP  ICVAFPL DSECT=YES,LABELS=YES\n         EJECT\n         IKJCPPL                       CPPL PARAMETER LIST\n         PRINT NOGEN\n         CVT   LIST=YES,DSECT=YES\n         IEFUCBOB LIST=YES\n         IHAPSA\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         PRINT GEN\n         EJECT\n         YREGS  ,\n         EJECT\n        $KEYS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT566/FILE566.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT566", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}