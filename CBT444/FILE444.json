{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012039000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE444.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE444.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\t'", "DS1TRBAL": "b'?\\x16'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x031\\x00\\x02\\x031\\x00\\x05\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x02_\\x01\\x00\\x02_\\t\\x12\\x00d\\x00d\\x00\\x00\\xd9\\xe3\\xc1\\xe3\\xe4\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-25T00:00:00", "modifydate": "2000-01-25T09:12:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "RTATUM"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "$$$DOC1": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x02_\\x01\\x00\\x02_\\t\\x12\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd9\\xe3\\xc1\\xe3\\xe4\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-25T00:00:00", "modifydate": "2000-01-25T09:12:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "RTATUM"}, "text": "Subj:   EXCP tape routines\nDate:   01/24/2000 5:42:58 PM Eastern Standard Time\nFrom:   rhtatum@door.net (Ronald Tatum)\nTo:     sbgolob@ibm.net\nCC:     sbgolob@aol.com\n\nFile:  EXCPtape.mim (33826 bytes)\nDL Time (TCP/IP): < 1 minute\n\n\u00ddThis e-mail contains a MIME (Multipurpose Internet Mail Extensions)\nfile.  The file was specially formatted to be sent over the\nInternet.  For more information on opening the attached file, go to\nKeyword: MIME.\u00a8 --------------------\n\nDear Mr. Golob:\n\n      Here are the read and write EXCP-level tape routines we\ndiscussed (I hope you get them, anyway). They were placed on 5 1/4\ninch floppies years ago; hope there aren't any typos or such that\ncause you to have to figure out what's intended. If there are,\ne-mail me and I'll go back to the original assembly listings\n(assuming I can still find them) .\n\nGood luck, and regards.\nRon Tatum\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE444": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x08?\\x01\\x00\\x05/\\x17\\x05\\x00\\x19\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "2000-02-21T17:05:00", "lines": 25, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 444 is from Ron Tatum of Lubbock, Texas, and contains     *   FILE 444\n//*           some routines he wrote in the early days of OS/360    *   FILE 444\n//*           computing.  These are VERY noteworthy.                *   FILE 444\n//*                                                                 *   FILE 444\n//*                 Ronald H. Tatum                                 *   FILE 444\n//*                 3408 56th St.                                   *   FILE 444\n//*                 Lubbock, TX 79413-4747                          *   FILE 444\n//*                 (806)799-4485.                                  *   FILE 444\n//*                 \"Ronald Tatum\" <rhtatum@door.net>               *   FILE 444\n//*                                                                 *   FILE 444\n//*    CPWTA    - Routine to write tapes with big blocks.           *   FILE 444\n//*               Callable subroutine from higher level languages.  *   FILE 444\n//*               This routine can write blocks of up to 512K       *   FILE 444\n//*               on a tape, by chaining 9 64K CCWs.                *   FILE 444\n//*               Actually, this routine can be modified to         *   FILE 444\n//*               write even bigger blocks.                         *   FILE 444\n//*                                                                 *   FILE 444\n//*    CPRDTAPE - Routine to read tapes written by CPWTA.           *   FILE 444\n//*               Callable subroutine from higher level languages.  *   FILE 444\n//*               This routine has many entry points, depending on  *   FILE 444\n//*               function.  This routine can read tapes with       *   FILE 444\n//*               blocks of up to 512K.                             *   FILE 444\n//*               Actually, this routine can be modified to         *   FILE 444\n//*               read even bigger blocks.                          *   FILE 444\n//*                                                                 *   FILE 444\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPRDTAPE": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x02_\\x01\\x00\\x02_\\x13 \\x02\\x10\\x02\\x10\\x00\\x00\\xd9\\xe3\\xc1\\xe3\\xe4\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-25T00:00:00", "modifydate": "2000-01-25T13:20:00", "lines": 528, "newlines": 528, "modlines": 0, "user": "RTATUM"}, "text": "CPRDTAPE        CSECT\n* EXCP-LEVEL MAGNETIC TAPE READ/WRITE/CONTROL ROUTINES\n        PRINT   ON,NOGEN\n* SUBROUTINE ENTRY POINTS AND INPUT/OUTPUT PARAMETERS\n*\n*       CPRDOPEN - TO OPEN THE TAPE DATA SET\n*       CPROPN IS AN ALTERNATE ENTRY POINT NAME FOR THIS OPERATION\n*        ANSWER (,DDNAME) INPUT TO ROUTINE. DDNAME DEFAULTS TO 'READIN'\n*         IF (,DDNAME) IS OMITTED.  IF SUPPLIED, IT MUST BE A\n*         CHARACTR STRING OF EIGHT BYTES, THE FIRST OF WHICH IS\n*         ALPHABETIC (JUST LIKE THE DDNAME OF\n*        THE JCL STATEMENT FOR THE INPUT TAPE).\n*       CPRDCLS - TO CLOSE THE INPUT TAPE DATA SET.\n*       CPRCLS IS AN ALTERNATE ENTRY NAME. NO PARAMETRS REQUIRED.\n*       CPRD - READ ONE PHYSICAL BLOCK. ANSWER, DATA, COUNT\n*       CPRDB - READ BACKWARDS. ANSWER, DATA, COUNT\n*       CPSKRD - READ A BLOCK, SKIPPING SOME BYTES AT FIRST\n*            ANSWER, DATA, COUNTS\n*       CPFSF - FORWARD  SPACE  FILE.  ANSWER\n*       CPBSF - BACKSPACE  ONE  FILE.  ANSWER\n*       CPFSB - FORWARD SPACE ONE BLOCK.  ANSWER\n*       CPBSB - BACKWARD SPACE ONE BLOCK. ANSWER\n*       CPREW - REWIND TAPE.  ANSWER\n*\n* THE PARAMETER \"ANSWER\" IS FIVE WORDS, \"COUNT(S)\" ONE TO THREE\n* WORDS. FIRST \"COUNT\" IS THE NUMBER OF BYTES READ, SECOND (IF MORE\n* THAN ONE WORD IN ARRAY) IS NUMBER OF BYTES TO SKIP BEFORE READING,\n* THIRD IS NUMBER TO READ AFTER SKIPPING.  \"DATA\" IS THE ADDRESS OF\n* THE AREA TO HOLD THE DATA TO BE READ.  SINCE THE BACKWARDS READS\n* PLACE THE DATA IN STORAGE IN DESCENDING ORDER OF ADDRESSES, THE\n* ADDRESS USED FOR THOSE CALLS SHOULD BE THE END, NOT THE BEGINNING\n* OF THE BUFFER IN MEMORY.  THE LIMIT FOR \"COUNT\" FOR DATA TRANSFER\n* IS NINE (9) CCW'S OF 65K EACH, OR A TOTAL OF 589815 BYTES FOR ANY\n* COMBINATION OF READS AND SKIPS (SKIP PLUS READ CAN'T BE MORE THAN\n* 9*65K).\n*\n* THE FIRST WORD IN THE ANSWER ARRAY IS A PARTIAL COMPLETION\n* INDICATOR WITH THE FOLLOWING MEANINGS:\n*       0 = REQUEST WAS APPARENTLY SUCCESSFUL\n*      -1 = EOF ENCOUNTERED ON READ  (EOT ON A WRITE, LOOK THERE)\n*      -2 = DATA CHECK. JUST WHAT THE HARDWARE RETURNED AS STATUS\n*      -3 = HARDWARE FAILURE.  SOMETHING REALLY SCREWED UP\n* THE THIRD WORD IS A COUNT OF THE BYTES ACTUALLY READ FROM THE TAPE.\n* THE FOURTH AND FIFTH WORDS CONTAIN THE UNIT STATUS BYTES AND SENSE\n* BYTES RETURNED BY THE CHANNEL AND IOS IN CASE OF ERRORS.\n* A 1 IN THE FIRST WORD OF ANSWER MEANS THE DCB COULD NOT BE OPENED\n* FOR WHATEVER DDNAME WAS USED TO REQUEST THE TAPE AT HAND.\n*\n* ABEND CODES POSSIBLE:\n*       44 = UNDECIPHERABLE ERROR STATUS ON READ\n*       46 = MORE THAT 9 CCW'S REQUIRED FOR READ\n*       56 = MORE THAT 9 CCW'S REQUIRED FOR READ BACKWARD\n*       66 = MORE THAN 9 CCW'S REQUIRED FOR SKIP/READ COMBINATIONS\n*\n* NOTA BENE:\n*       THIS ROUTINE CONSTRUCTS FORMAT 0 CCW'S ONLY, AND USES A\n*       STANDARD O/S IOB; IT WILL NOT WORK UNDER ESA AS DEFINED BY\n*       THE PRINCIPLES OF OPERATION MANUAL FOR MACHINES RUNNING IN\n*       THAT MODE. IF IT IS TO BE USED UNDER ESA, THE APPROPRIATE\n*       CONTROL BLOCKS MUST BE BUILT/USED AND POSSIBLE FORMAT 1\n*       CCW'S CONSTRUCTED.\n*\n        ENTRY   CPRDOPEN,CPRDCLS,CPFSF,CPBSF,CPRD,CPRDB,CPREW\n        ENTRY   CPROPN,CPRCLS\n        ENTRY   CPFSB,CPBSB,CPSKRD,CPSKBR\n*\nCPRD    STM     14,12,12(13) READ ONE PHYSICAL BLOCK FORWARD DIRECTION\n        LR      12,15        DO CHAIN OF SA'S, SET GPR12 AS BASE ALWAYS\n        USING   CPRD,12\n        USING   ANSWER,11    USER'S INFO/ERROR STORE AREA\n        USING   IHADCB,9     FUNKY PLACES IN THE DCB FROM IOS\n        BAL     15,COMENTRY  PERFORM ALL COMMON SETUP/ENTRY STUFF\n        LM      2,3,4(1)     2=@DATA, 3=@COUNT\n        LA      2,0(,2)      ZERO HIGH ORDER BYTE FOR FORMAT 0 CCW ADDR\n        L       4,ACCWD\n        ST      4,ACCW2      MONSTER ADDRESS (24-BIT)\n        LA      4,1(,0)      SET TO INCREMENT BLOCK COUNT IN IOB 4 O/S\n        STH     4,IOBRDBCI   CHUNK TO IOB FIELD\n        LA      4,9(,0)      COUNT FOR MAX CCW'S TO BE BUILT\n        MVI     IOBRD,X'02'  NOT CD OR CC - NO RELATED CCW'S ASSUMED\n        L       3,0(,3)      3=VAL(COUNT) - BYTES TO READ FROM TAPE\nCPRDLOOP CR     3,5          MORE THAN 65K TO READ FROM TAPE?\n        BC      12,CPRDLAST    LAST CCW TO BE CONSTRUCTED\n        OI      IOBRD,X'80'  TURN ON DATA CHAINING IN IOB\n        L       8,RDN        1ST HALF OF A CCW TO READ 65K\n        OR      8,2          CHAIN ADDRESS PORTION OF CCW\n        ST      8,0(,6)        INTO CCW ARRAY\n        L       8,RDN+4      BUILD 2ND HALF OF CCW\n        ST      8,4(,6)        & IT, TOOM TO THE CCW ARRAY\n        SR      3,5          DECREMENT REQUESTED BYTE COUNT\n        LA      6,8(,6)      INCREMENT CHANPROG ARRAY POINTER\n        AR      2,5          INCREMENT DATA POINTER BY 65K\n        BCT     4,CPRDLOOP   BUILD ANOTHER IF POSSIBLE\n        ABEND   46,DUMP,STEP  TRIED TO BUILD TOO MANY CCW'S\n*\nCPRDLAST L      8,RDF        LAST CCW TO BUILD FOR READ\n        OR      8,2\n        ST      8,0(,6)      @DATA INTO THAT CCW\n        L       8,RDF+4      SET TO BUILD ND HALF OF CCW\n        OR      8,3          VAL(COUNT) INTO LAST CCW (OR ONLY)\n        ST      8,4(,6)\n        LA      8,10(,0)     CALC HOW MANY CCW'S\n        SR      8,4\n        ST      8,NUMCCW\n        BAL     10,EXCPR     GO EXECUTE THE CP(S) BUILT\n*\nCPRDLST1 C      1,FM2        IF HW FAILURE, CLEAR TRANSFERRED COUNT\n        BC      4,CLEAR\n        L       2,IOBRDCSW   PICK UP PART OF CHANNEL STATUS WORD\n        LA      2,0(,2)      ZERO (CLEAR) HIGH-ORDER BYTE\n        S       2,F8         POINT TO LAST CCW USED\nCPRDLST LR      3,2\n        L       1,IOBRDCSW+4  GET CSW FROM LAST CCW USED\n        N       1,MASK       ZERO ALL BUT BYTE COUNT BITS\n        LA      6,CP         POINT TO BEGINNING OF CCW CHAIN\n        SR      3,6\n        SRA     3,3(0)       EXECUTED CCS'S - 1\n        MR      4,3          R5 = BYTES EXCEPT LAST CCW USED\n        L       4,4(,2)      BYTE COUNT FROM PARTIALLY USED CCW\n        N       4,MASK       BYTES POSSIBLE IN LAST CCW\n        SR      4,1\n        AR      4,5\n        ST      4,APARTIAL   FINAL COUNT OF BYTES READ TO USER AREA\n        LA      4,1(,0)\n        ST      4,APART\n*\nRETURN  L       13,SAVERD+4  COMMON EXIT FOR ALL FUNCTIONS\n        LM      14,12,12(13) STANDARD O/S CONVENTION\n        MVI     12(13),X'FF'  MAY BE A LIE, BUT SAY BEEN HERE\n        BCR     15,14        N.B: NOT!!! ESA CONVENTION\n        SPACE   3\nCPSKRD  STM     14,12,12(13)  FORWARD READ AFTER SKIP ROUTINE\n        USING   CPSKRD,15\n        L       12,ACPRD     GRAB REAL BASE ADDRESS\n        DROP    15\n        BAL     15,COMENTRY  PERFORM SA CHAIN, ETC.\n        LM      2,3,4(1)       @DATA, @3-WORD COUNT ARRAY\n        LA      2,0(,2)      MAKE 24-BIT ADDR. VALUE\n        LA      4,1\n        STH     4,IOBRDBCI   BLOCK COUNT INCREMENT\n        LA      4,10         MAX # CCW'S (9 IF NOT SKIPPING)\n        MVI     IOBRD,X'82'  ALWAYS HAVE DATA CHAIN IF SKIPPING\n        L       7,4(,3)      VAL(SKIP COUNT)\n*\nCPSKLP1 CR      7,5          MORE THAT 65K?\n        BC      12,CPSKLAST  NO, BUILD LAST CCW\n        L       8,RDN        START WITH SKELETON ORDINARY READ\n        OR      8,2          R8:=@DATA SAME CELL\n        ST      8,0(,6)\n        L       8,RDN+4      MAKE R8:=FLAGS, 65K COUNT\n        ST      8,4(,6)\n        MVI     4(6),X'B0'   SET CD, SLI AND SKIP FLAGS IN CCW\n        SR      7,5          SKIP CT := SKIP CT - 65K\n        LA      6,8(,6)      CP PTR := CP PTR + 8 (WALK THE ARRAY)\n        BCT     4,CPSKLP1    TRY TO BUILD ANOTHER CCW\nCPSKBABE ABEND  66,DUMP,STEP    TOO MANY CCW'S NEEDED\n*\nCPSKLAST L      8,RDF        LAST FRAGMENT TO SKIP\n        OR      8,2          R8 := @DATA (SAME CELL)\n        ST      8,0(,6)\n        L       8,RDF+4\n        OR      8,7          R8 := FLAGS, FRAG COUNT\n        ST      8,4(,6)\n        MVI     4(6),X'B0'   SET ALL THOSE FLAGS ALSO\n        L       3,8(,3)      VAL(COUNT TO READ) AFTER SKIP\n        LA      6,8(,6)      NEXT PLACE IN CCW LIST\n        B       CPRDLOOP     AND GO TREAT AS STRAIGHT READ FROM HERE ON\n*\n        SPACE   3\nCPRDB   STM     14,12,12(13) READ BACKWARDS FUNCTION\n        USING   CPRDB,15\n        L       12,ACPRD\n        DROP    15\n        BAL     L5,COMENTRY  PERFORM STANDARD SA CHAIN, ETC.\n        LM      2,3,4(1)       @DATA, @COUNT\n        LA      2,0(,2)      FORM 24-BIT ADDRESS VALUE\n        L       4,ACCWD\n        ST      4,ACCW2\n        LA      4,1(,0)\n        STH     4,IOBRDBCI   SET TO INCREMENT BLOCK COUNT\n        LA      4,9(,0)      MAX # CCW'S TO BUILD\n        MVI     IOBRD,X'02'  NOT CD OR CC - NO RELATED CP'S\n        L       3,0(,3)      VALUE (COUNT) BYTES TO READ\n*\nBRDLOOP CR      3,5          ARE WE FIXED TO READ ENOUGH?\n        BC      12,BRDLAST   BIF CAN GO CONSTRUCT LAST CCW\n        OI      IOBRD,X'80'  TURN ON CHAINING BIT IN IOB\n        L       8,RDB        GET BACKWARD, CHAINING READ CCW\n        OR      8,2          MAKE DATA ADDRESS\n        ST      8,0(,6)        AND INTO THE CCW CHAIN\n        L       8,RDB+4\n        ST      8,4(,6)\n        SR      3,5          DECREMENT AMOUNT TO READ BY 65K\n        LA      6,8(,6)      INCREMENT PTR TO CCW CHAIN AREA\n        SR      2,5          DECREMENT ADDRESS TO WHERE TO READ INFO\n        BCT     4,BRDLOOP      & GO BUILD SOME MORE CCW'S\n        ABEND   56,DUMP,STEP   TOO MANY CCW'S REQUIRED\n*\nBRDLAST L       8,RDBF       LAST CCW TO BUILD INTO CHAIN OF THEM\n        OR      8,2          FIX UP FINAL CCW DATA ADDRESS\n        ST      8,0(,6)\n        L       8,RDBF+4     FIX FINAL BYTE COUNT IN THAT CCW\n        OR      8,3          R8 := FLAGS, FRAGMENT COUNT\n        ST      8,4(,6)       TO CP ARRAY\n        LA      8,10(,0)     MAX + 1 #CCW'S\n        SR      8,4          CALCULATE MAX USED\n        ST      8,NUMCCW     SAVE FOR POSS. LATER USE\n        LA      10,CPRDLST1  POINT TO STANDARD RETURN PROCESSOR\n        B       EXCPR          & GO EXECUTE THE CP(S)\n        SPACE   3\nCPSKBR  STM     14,12,12(13) BACKWARD SKIP AND READ FUNCTION\n        USING   CPSKBR,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY  PERFORM STANDARD CHAIN SA'S ETC.\n        LM      2,3,4(1)       @DATA, @3-WORD COUNT ARRAY\n        LA      2,0(,2)      24-BIT ADDRESS FOR CCW ADDRESS FIELDS\n        LA      4,1\n        STH     4,IOBRDBCI   BLOCK COUNT INCREMENT\n        LA      4,10         MAX # CCW'S IF SKIPPING\n        MVI     IOBRD,X'82'  ALWAYS CHAINING IF SKIPPING\n        L       7,4(,3)      SKIP COUNT VALUE\nSPSKBL1 CR      7,5          MORE THAT 65K?\n        BC      12,CPSKBLST  NO, JUST GO BUILD LAST IN SKIP CHAIN\n        L       8,RDB        SKELETON READ BACKWARD CCW\n        OR      8,2\n        ST      8,0(,6)      FIRST HALF OF A CCW BUILT\n        L       8,RDB+4\n        ST      8,4(,6)      SKIP 65K WITH EACH CCW\n        MVI     4(6),X'B0'   CD, SLI, SKIP FLAGS GET TURNED ON\n        SR      7,5          DECREMENT SKIP VALUE COUNT\n        LA      6,8(,6)      NEXT IN ARRAY OF CCW'S TO BUILD\n        BCT     4,CPSKBL1      (IF WE CAN)\nCPSKBRAB ABEND  66,DUMP,STEP  TOO MANY CCW'S REQUIRED\n*\nCPSKBLST L      8,RDBF       LAST FRAGMENT OF 65K TO SKIP\n        OR      8,2\n        ST      8,0(,6)\n        L       8,RDBF+4\n        OR      8,7          COUNT VALUE\n        ST      8,4(,6)\n        MVI     4(6),X'B0'   SET CD, SLI, SKIP FLAGS FOR IT TOO\n        L       3,8(,3)      VALUE OF READ DATA AFTER SKIP COUNT\n        LA      6,8(,6)      NEXT SPOT IN CP ARRAY\n        B       BRDLOOP      AND PROCESS AS ORDINARY BACKWARD READ\n*\n***** END OF READ FUNCTIONS OF EXCP ROUTINES *****\n*\nCPFSF   STM     14,12,12(13) FORWARD SPPPACE FILE CONTROL FUNCTION\n        USING   CPFSF,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY  PERFORM STNDARD CHAIN SA'S, ETC.\n        LD      0,FSF        MOVE PROPER FORWARD SP. FILE CCW\n        STD     0,CP         TO EXECUTED ARRAY OF CHAN.CMDS\n        LA      9,DCBRD      @IHADCB DSECT\n        SR      4,4          MUST CLEAR BLOCK COUNT IN DCB\n        ST      4,DCBBLKCT\n        STH     4,IOBRDBCI   & NO INCREMENT IN IOB\n        MVI     IOBRD,X'02'\n        BAL     10,EXCPR     GO DO THE DIRTY WORK\n        SPACE   3\nCLEAR   SR      2,2          COMMON EXIT FOR SPACING, H/W ERRORS\n        ST      2,APARTIAL\n        LA      2,1(,2)\n        ST      2,APART      SET PARTIAL. COMP. IND. TO CALLER\n        B       RETURN       REST IS ALL THE SAME\n        SPACE   3\nCOMENTRY LR     2,13         COMMON ENTRY PROC; CHAIN SA'S ETC.\n        LA      L3,SAVERD\n        ST      13,8(,2)\n        ST      2,SAVERD+4\n        L       11,0(,1)     SET BASE FOR USER'S ANSWER ARRAY\n        L       5,MAX        COMPARAND REG FOR LIMIT ON CCW COUNTS\n        LA      6,CP         ALWAYS BASE OF CP ARRAY (ACTIVE CCW'S)\n        BR      15           BACK TO WHATEVER MAINLINE CODE\n        SPACE   3\nCPBSF   STM     14,12,12(13) BACKSPACE ONE FILE FUNCTION\n        USING   CPBSF,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY\n        LD      0,BSF        USE FPR TO MOVE CCWS\n        STD     0,CP\n        LA      9,DCBRD      @IHADCB TO KEEP IOS HAPPY\n        SR      4,4\n        ST      4,DCBBLKCT   CLEAR FIELD IN DCB\n        STH     4,IOBRDBCI     AND IN INCR. FIELD IN IOB\n        MVI     IOBRD,X'02'  NOT CD OR CC - NO RELATED CHANNEL PROGS\n        LA      10,CLEAR     SET RETURN TO THERE, NOT HERE\n        B       EXCPR        GO DO IT TO THE TAPE\n        SPACE   3\nCPFSB   STM     14,12,12(13) FORWARD SPACE BLOCK FUNCTION\n        USING   CPFSB,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY  PERFORM STANDARD CHAINS, ETC.\n        LA      4,1(,0)      SET BLK.INCR. IN IOB\n        STH     4,IOBRDBCI\n        MVI     IOBRD,X'02'  NO RELATED CP'S TO IOB\n        LD      0,FSB\n        STD     0,CP         PLUG IN THE RIGHT CCW TO THE ARRAY\n        LA      10,CLEAR     SAY COME BACK THERE\n        B       EXCPR        GO PERFORM FUNCTION\n        SPACE   3\nCPBSB   STM     14,12,12(13) BACKSPACE ONE BLOCK FUNCTION\n        USING   CPBSB,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY  PERFORM STANDARD HOUSEKEEPING\n        L       4,FM1        GET A NEGATIVE ONE\n        STH     4,IOBRDBCI   FOR BLOCK INCREMENT (DECREMENT)\n        MVI     IOBRD,X'02'  SAY NO RELATED CP\n        LD      0,BSB        CCW TO BACKSPACE A RECORD\n        STD     0,CP\n        LA      10,CLEAR     COME BACK THERE TO FINISH\n        B       EXCPR        GO DO THE I/O STUFF\n*\n        SPACE   3\nCPREW   STM     14,12,12(13) REWIND TO BOT MARKER ON PHYSICAL TAPE\n        USING   CPREW,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY  PERFORM STANDARD HOUSEKEEPING\n        LA      9,DCBRD      @IHADB\n        SR      4,4          SET TO CLEAR ALL BLOCK COUNTS\n        ST      4,DCBBLKCT   IN DCB FIELD\n        STH     4,IOBRDBCI   AND SAY NO INCREMENT IN IOB\n        MVI     IOBRD,X'02'  SAY NO RELATED CHAN PROGS\n        LD      0,REW\n        STD     0,CP         MAKE REWIND TAPE CHAN. CMD.\n        LA      10,CLEAR     COMMON END PROCESSING\n        B       EXCPR\n*\n        SPACE   3\nCPRDOPEN STM    14,12,12(13) OPEN THE INPUT TAPE DCB\nCPROPN  EQU     CPRDOPEN     FORTRAN WON'T ALLOW 8 CHARACTER NAMES\n        USING   CPRDOPEN,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY  STANDARD HOUSEKEEPING\n        LA      9,DCBRD      @IHADCB\n        OI      DCBIFLG,X'0C' SET SO DON'T DO ERROR RCVRY IN IOS WE DO!\n        SR      5,5          TO CLEAR DCBBLKCT, AIER\n        LTR     11,11        ONLY ONE ITEM IN CALL PARMLIST?\n        BC      4,DEFAULT    ONLY ONE ARG, USE DEFAULT DDNAME\n        L       2,4(,1)      GET @NAME SUPPLIED FOR DDNAME\nOPN2    MVC     DCBDDNAM(8),0(2)  MOVE WHATEVER TO DCB DDNAME FLD\n        OPEN    (DCBRD,(INPUT))\n        TM      DCBOFLGS,X'10'  DID OPEN SUCCEED?\n        BC      8,OPNE          BIF IT FAILED FOR SOME REASON\n        ST      5,DCBBLKCT      BLOCK COUNT TO ZERO\n        OI      DCBIFLGS,X'0C'  AGAIN SET NO IOS ERROR RECOVERY TRIES\nOPN3    ST      5,AIER          RETURN WHATEVER STATUS OF OPEN\n        B       RETURN\nOPNE    LA      5,1(,0)         TELL USER OPEN FAILED\n        B       OPN3            NOT MUCH ELSE CAN SAY OR DO\nDEFAULT LA      2,DFLTDDNM   POINT TO 'READIN  ' FOR DCB INPUT DDNAME\n        B       OPN2\n*\n        SPACE   3\nCPRDCLS STM     14,12,12(13) CLOSE INPUT TAPE DCB\nCPRCLS  EQU     CPRDCLS      AND ALTERNATE FORTRAN-USABLE NAME\n        USING   CPRDCLS,15\n        L       12,ACPRD\n        DROP    15\n        BAL     15,COMENTRY  PERFORM STANDARD HOUSEKEPING\n        CLOSE   DCBRD\n        B       RETURN       AND THAT'S ALL THERE IS TO THAT!\n*\n        SPACE   3\nEXCPR   SR      1,1          ACTUALLY USE SOME CCW'S TO DO WORK!\n        ST      1,ECBRD      MAKE ECB SAY \"NOT BUSY\"\n        LA      9,DCBRD      @IHADCB FOR SURE\n        EXCP    IOBRD        REQUEST EXECUTION OF CP(S)\n*\n        WAIT    ECB=ECBRD    HANG AROUND FOR COMPLETION OF REQUEST\n        CLI     ECBRD,X'7F'  EQUAL SAYS REQUEST DONE AOK\n        BC      8,EXCPR6     - NORMAL EXIT, NO PROBLEMS\n        TM      IOBRDCSW+4,X'0C'  CHANNEL AND DEVICE END?\n        BC      1,EXCPR2          YES, BOTH HAPPENED\nEXCPR1  L       1,FM3        NO, SET TOSHOW HARDWARE FAILURE\n        B       EXCPR7       GO POST WHATEVER\nEXCPR2  TM      IOBRDCSW+4,X'04'  UNIT CHECK?\n        BC      8,EXCPR4          NONE DETECTED\n*  OK, SO WHAT MAY HAVE HAPPENED?\n        TM      IOBRD+2,X'F7'     EQUIPMENT MALFUNCTION?\n        BC      5,EXCPR1          AFRAID SO\n*\n        TM      IOBRD+2,X'08'     DATA CHECK?\n        BC      8,EXCPR3     NO, LOOKS OK\n        L       1,FM2        SET TO SHOW DATA CHECK\n        ST      1,AIER       & POST RETURN CODE IN ANSWER ARRAY\n*\n***** A SENSE TO OBTAIN 5 SENSE BYTES FOR ANALYSIS OF A DATA ERROR\n*\n        SR      1,1\n        ST      1,ECBRD      RESET ECB TO NON-BUSY STATUS\n        ST      1,ASTATUS    CLEAR USER'S ANSWER AREA\n        ST      1,ASTATUS+4      *\n        MVC     ASTATUS(1),IOBRDCSW+4  STATUS BYTE\n        MVC     OLDCSW(8),IOBRDCSW     SAVE READ CSW\n        LD      0,SENSE           BUILD NEW CP FOR SENSE COMMAND\n        STD     0,CP\n        LA      1,ASTATUS+1-ANSWER(11) ADDR FOR 5 STATUS BYTES\n        O       1,CP\n        ST      1,CP         SET ADDRESS IN CP\n        MVI     IOBRD,X'02'  SAY NO RELATED CHAN PROGS\n        NI      DCBIFLGS,X'3F'  TURN OFF ERROR BITS, LEAVE REST ALONE\n*\n        EXCP    IOBRD        ISSUE THE SENSE CHANNEL CMD. WORD\n        WAIT    ECB=ECBRD\n        NI      DCBIFLGS,X'3F'  TURN OFF ERROR BITS AGAIN\n        MVC     ASTATUS+6(1),IOBRDCSW+4  SENSE STATUS BYTE\n        MVC     SENSECSW(8),IOBRDCSW     STORE SENSE CSW\n        MVC     IOBRDCSW(8),OLDCSW       RESET READ CSW\n        CLI     ECBRD,X'7F'              TEST FOR ADDITIONAL ERRORS\n        BCR     8,10                     BRANCH IF NONE\n        MVI     ASTATUS+7,X'03'   SAY NOT PERFECT COMPLETION OF SENSE\n        BR      10                BACK TO WHOEVER CALLED THIS ROUTINE\n*\nEXCPR3  TM      IOBRD+3,X'08'   TEST FOR LOAD POINT IN CASE OF BSF, BSB\n        BC      1,EXCPR5        OR A READ BACKWARDS.\n*       NEVER SEE EOT REFLECTIVE MARKER ON READ FORWARD    *\n        ABEND   44,DUMP,STEP    KILL IF IS UNDECIPHERABLE STUFF\n*\nEXCPR4  TM      IOBRDCSW+4,X'01'         UNIT EXCEPTION?\n        BC      1,EXCPR5                 BRANCH IF SO\n*\n        B       EXCPR6     NOT PERFECT COMPLETION, BUT NO ERRS NOW\nEXCPR5  L       1,FM1        SET TO SHOW EOF (TM) ENCOUNTERED\n        B       EXCPR7\nEXCPR6  SR      1,1\nEXCPR7  ST      1,AIER       WHATEVER BACK TO USER'S ANSWER ARRAY\n        NI      DCBIFLGS,X'3F'           CLEAR EXCEPTION BITS IN DCB\n        MVC     ASTATUS(1),IOBRDCSW+4    SENSE BITS IF UNIT CHECK\n        MVC     ASTATUS+1(2),IOBRD+2\n        BR      10\n*\n        EJECT\nACPRD   DC      A(CPRD)    BASE ADDRESS FOR ALL INTERNAL ROUTINES\nSAVERD  DS      9D         STANDARD OS SAVE AREA FOR GPRS\nCP      DC      10D'0'     STRING FOR ALL THE CCWS WE MAY BUILD\nFM1     DC      F'-1'      CONSTANTS FOR VARIOUS USES\nFM2     DC      F'-2'\nFM3     DC      F'-3'\nF8      DC      F'8'\nMASK    DC      XL4'0000FFFF'    A HALF-WORD FILTER\nMAX     DC      F'65535'         MOST BYTES CCW CAN HAVE IN COUNT FLD\nNUMCCW  DC      F'0'             HOW MANY CCWS IN CHAIN\nDFLTDDNM DC     CL8'READIN  '    DEFAULT DDNAME FOR INPUT TAPE IN JCL\nACCW2   DC      A(0)\nACCW3   DC      A(0)\nACCWD   DC      A(16777215)\n*\n***** CONTROL BLOCKS FOR READ OPERATIONS *****\n*\nECBRD   DC      F'0'             EVENT CONTROL BLOCK\nIOBRD   DC      F'0'             IOB FOR READS\n        DC      A(ECBRD)         @ECB FOR THIS IOB\nIOBRDCSW DC     2F'0'            SLOTS FOR CHANNEL STATUS WORDS\nIOBRDACP DC     A(CP)            ADDR. OF CHANNEL PROGRAM ARRAY\nIOBRDDCB DC     A(DCBRD)         ADDRESS OF THE DCB WE USE\n        DC      F'0'             IOBRESTR (PURGE CHAIN/CCHH/COMMAND,\n*                                  CHANPROG)\nIOBRDBCI DC     H'1'             BLOCK COUNT INCREMENT\nIOBRDECT DC     H'0'             ERROR COUNTS\nSENSECSW DS     2F           CSW FOR THE SENSE CMD WE MAY HAVE USED\n*\nOLDCSW  DS      2F           CSW FOR READ WHILE DOING SENSE (HOLDER)\n*\n***** SKELETON CHANNEL COMMAND WORDS *****\n*\nRDN     DC      X'02'        READ CMD FOR TAPE UNIT (MAX COUNT)\n        DC      AL3(0)       SKELETON READ ADDRSS FOR DATA\n        DC      X'A0'        CD, SLI FLAG BITS\n        DC      AL3(65535)   MAX CCW DATA COUNT FIELD\n*  NOTE THAT THE MAXIMUM TRANSFER COUNT IS X'FFFF',  -NOT - 7FFF !!!\nRDF     DC      X'02'        MT READ, SKEL. ADDR, BYTE COUNT\n        DC      AL3(0)       DATA ADDRESS\n        DC      X'20'        SLI BIT ONLY\n        DC      AL3(0)       VALID COUNT WILL BE BUILT FOR THIS\nRDB     DC      X'0C'        READ BACKWARDS COMMAND\n        DC      AL3(0)       @DATA\n        DC      X'A0'        CD, SLI FLAG BITS\n        DC      AL3(65535)   MAX DATA COUNT\nRDBF    DC      X'0C'        TAPE READ BACKWARDS, SKEL. CNT.\n        DC      AL3(0)       DATA ADDRESS SKELETON\n        DC      X'20'        SLI BIT\n        DC      AL3(0)       SKEL BYTE COUNT\nFSF     DC      X'3F'        CONTROL- FORWARD SPACE FILE MARK\n        DC      AL3(CP)      DUMMY, BUT CCW MUST HAVE ADDR VALUE\n        DC      X'20'        SLI BIT ONLY\n        DC      AL3(1)       CHAN REQUIRES MIN 1 BYTE COUNT\nBSF     DC      X'2F'        CONTROL - BACKSPACE ONE FILE MARK\n        DC      AL3(CP)      AGAIN, JUST A REQUIRED NONSENSE\n        DC      X'20'        SLI BIT ONLY\n        DC      AL3(L)       CHANNEL REQUIREMENT\nFSB     DC      X'37'        CONTROL - FORWARD SPACE ONE BLOCK\n        DC      AL3(CP)      DUMMY\n        DC      X'20'        SLI\n        DC      AL3(1)       CHAN. REQUIREMENT\nBSB     DC      X'27'        CONTROL - BACKSPACE ONE PHYSICAL BLOCK\n        DC      AL3(CP)      DUMMY\n        DC      X'20'        SLI\n        DC      AL3(1)       CHAN REQUIREMENT\nSENSE   DC      X'04'        CONTROL/QUERY - SENSE COMMAND\n        DC      AL3(0)\n        DC      X'20'        SLI\n        DC      AL3(5)       REQUEST 5 SENSE BYTES FROM CHAN/DEVICE\nREW     DC      X'07'        CONTROL - REWIND TAPE TO BOT\n        DC      AL3(CP)      DUMMY\n        DC      X'20'        SLI\n        DC      AL3(1)       CHANNEL REQUIREMENT\n*\n***** INTERFACES TO O/S AND USER *****\n*\nDCBRD   DCB     MACRF=(E),DEVD=TA,DSORG=PS,IOBAD=IOBRD,DDNAME=NONE,\n                                                    OPTCD=Z\n* OPTCD=Z REQUESTS REDUCED ERROR RECOVERY\n*\nANSWER  DSECT\nAIER    DS      F            ERROR CODE FOR CALLER OF PACKAGE\nAPART   DS      F            PARTIAL COMPLETION INDICATOR\nAPARTIAL  DS    F            BYTES ACTUALLY READ FROM TAPE\nASTATUS DS      2F          UNIT STATUS AND SENSE BYTES\n        DCBD    DSORG=PS,DEVD=TA\n        END     CPRDTAPE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPWTA": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x02_\\x01\\x00\\x02_\\t\\x12\\x01\\x0b\\x01\\x0b\\x00\\x00\\xd9\\xe3\\xc1\\xe3\\xe4\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-25T00:00:00", "modifydate": "2000-01-25T09:12:00", "lines": 267, "newlines": 267, "modlines": 0, "user": "RTATUM"}, "text": ".# CREATE CPWT,ASM,'CHANNEL PROGRAM TAPE WRITE','RON TATUM'\nCPWT      CSECT                                                CPW01010\n*                                                              CPW01020\n          ENTRY CPWTOPEN,CPWOPEN,CPWTCLS,CPWCLS,CPWTM,CPWERG\n*\n*  SUBROUTINE ENTRY POINTS AND PARAMETERS REQUIRED:\n*\n*   CPWTOPEN (CPWOPEN ALTERNATE NAME) - OPEN THE DATA SET -\n*         ANSWER, (DDNAME) - ANSWER MUST BE A 5 WORD ARRAY;\n*         DDNAME, IF FURNISHED, MUST BE AN 8 CHARACTER LITERAL\n*         MATCHING THE DDNAME ON THE DD CARD DESCRIBING THE TAPE.\n*         IF NOT FURNISHED, THE DDNAME DEFAULTS TO  'WRITEOUT'.\n*\n*   CPWTCLS (ALIAS CPWCLS) - CLOSE THE DATA SET.  NO PARAMETERS.\n*\n*   CPWT - WRITE ONE PHYSICAL RECORD.\n*         ANSWER, DATA COUNT - ANSWER FOR STATUS, ETC., DATA TO\n*         BE WRITTEN, COUNT OF BYTES TO WRITE (MAX 512K).\n*\n*  CPWTM - WRITE A TAPE MARK.\n*          ANSWER - STATUS AFTER OPERATION.\n*\n*  CPWERG - ERASE GAP (NOMINALLY 3-1/2 INCHES).\n*           ANSWER - STATUS.\n*\n*  THE LIMIT FOR CPWT COUNT IS 512K BYTES BECAUSE WE FELT WHEN\n*  WE WROTE THE PROGRAM INITIALLY THAT 9 CCW'S OF 65K WAS SUFFICIENT\n*  EVEN FOR WELL LOGS.\n*\n          STM   14,12,12(13)\n          LR    12,15\n          USING CPWT,12\n          LR    2,13\n          LA    13,SAVEWT\n          ST    13,8(,2)\n          ST    2,SAVEWT+4\n          L     11,0(,1)      11 ALWAYS POINTS TO USER'S ANSWER\n          USING ANSWER,11     ARRAY.\n          LM    2,3,4(,1)\n          LA    2,0(,2)       DATA ADDRESS\n          L     3,0(,3)       VALUE OF COUNT\n          LA    4,1\n          STH   4,1\n          STH   4,IOBWTBCI   SET TO INCREMENT BLOCK COUNT\n          L     5,MAX\n          LA    4,9\n          LA    6,CP\n          MVI   IOBWT,X'02'   MAY NOT NEED RELATED CP'S\nCPWTLP    CR    3,5\n          BC    12,CPWTLAST   LAST CCW TO BUILD?\n          OI    IOBWT,X'80'   TURN ON CD BIT IN CCW\n          L     7,WTN\n          OR    7,2\n          ST    7,0(,6)\n          L     7,WTN+4\n          ST    7,4(,6)\n          SR    3,5           DECREMENT BYTES TO WRITE\n          AR    2,5           INCR CCW PTR & DATA ADDRESS\n          LA    6,8(,6)\n          BCT   4,CPWTLP      BUILD ANOTHER CCW IF NEEDED\n*  IF MORE THAT 9 REQUIRED, ABORT THE WHOLE THING\n          ABEND 146,DUMP,STEP\nCPWTLAST  L     7,WTF         CONSTRUCE LAST CCW (#9 OR LESS)\n          OR    7,2           SAY NO MORE IN CHAIN, ETC.\n          ST    7,0(,6)\n          L     7,WTF+4\n          OR    7,3\n          ST    7,4(,6)\n          LA    7,10\n          SR    7,4\n          ST    7,NUMCCW\n          BAL   10,EXCP       FINALLY GO TRY TO WRITE SOMETHING\n*\nRETURN    L     13,SAVEWT+4\n          LM    14,12,12(13)\n          MVI   12(13),X'FF'\n          BR    14\n*\nCPWERG    STM   14,12,12(13)\n          USING CPWERG,15\n          L     12,ACPWT\n          DROP  15\n          LR    2,13\n          LA    13,SAVEWT\n          ST    13,8(,2)\n          ST    2,SAVEWT+4\n          L     11,0(,11)     DSECT PTR\n          SR    4,4\n          STH   4,IOBWTBCI    DON'T INCREMENT BLOCK COUNT\n          LD    0,ERG         MOVE CCW(S)\n          STD   0,CP\n          MVI   IOBWT,X'02'   NO RELATED CCW'S\n          LA    10,RETURN\n          B     EXCP          FILE MARK THE TAPE, BACKSPACE OVER\n*\nCPWTM     STM   14,12,12(13)  HERE, JUST WRITE AN  EOF\n          USING CPWTM,15\n          L     12,ACPWT\n          DROP  15\n          LR    2,13\n          LA    13,SAVEWT\n          ST    13,8(,2)\n          ST    2,SAVEWT+4)\n          L     11,0(,1)\n          LA    1,DCBWT\n          USING IHADCB,1      MUST DEAL WITH THINGS IN DCB\n          SR    4,4\n          ST    4,DCBBLKCT\n          DROP  1\n          STH   4,IOBWTBCI\n          LD    0,WTM\n          STD   0,CP\n          MVI   IOBWT,X'02'   NO CHAINING\n          LA    10,RETURN\n*\nEXCP      SR    1,1\n          ST    1,ECBWT       DO IT AND WAIT AROUND\n          EXCP  IOBWT\n          WAIT  ECB=ECBWT\n*\n          CLI   ECBWT,X'7F'   TEST FOR ERRORS\n          BC    8,EXCPW6       - BIF NONE\n*\n          TM    IOBWTCSW+4,X'0C'  DEVICE & CHANNEL END?\n          BC    1,EXCPW2           - YES, BOTH\n*\nEXCPW1    L     1,FM3         SET ANSWER TO -3\n          B     EXCPW7\n*\nEXCPW2    TM    IOBWTCSW+4,X'02'   UNIT CHECK?\n          BC    8,EXCPW4      NO, MUST BE SOMETHING ELSE\n*\n          TM    IOBWT+2,X'F7'   EQUIPMENT MALFUNCTION?\n          BC    5,EXCPW1      YES, JUST REPORT IT TO CALLER\n*\n          TM    IOBWT+2,X'08'    DATA CHECK? (HOW ON EARTH?)\n          BC    8,EXCPW3      MAYBE WE HIT EOT MARKER\n          L     1,FM2\n          B     EXCPW7\n*\nEXCPW3    TM    IOBWT+3,X'08' LOAD POINT? (ON A WRITE???)\n          BC    1,EXCPW5\n* AH, UNIT CHECK, NOT LOAD POINT, NO PROBLEM.\n*\n*  BUT IF THE BC 1 DOESN'T HAPPEN, WE MUST GIVE IT UP\n*\n          ABEND 144,DUMP,STEP\n*\nEXCPW4    TM    IOBWTCSW+4,X'01'   UNIT EXCEPTION?\n          BC    1,EXCPW5           BIF SO\n          B     EXCPW6             PROBABLY A SYSTEM RETRY\n*\nEXCPW5    L     1,FM1         SAY HARDWARE UNIT EXCEPTION\n          B     EXCPW7\n*\nEXCPW6    SR    1,1\nEXCPW7    ST    1,AIER        MAJOR RETURN STATUS FOR CALLER\n          MVC   ASTATUS(1),IOBWTCSW+4  HDW STATUS BYTE\n          MVC   ASTATUS+1(2),IOBWT+2  BYTES 1&2 FOR UNIT CHECK\n          BR    10            STANDARD EXIT IF NO ABENDS\n*\n*\nCPWTOPEN  STM   14,12,12(13)   ATTACH DCB TO DDNAME\nCPWOPEN   EQU   *-4\n          USING CPWTOPEN,15\n          L     12,ACPWT\n          DROP  15\n          LR    2,13\n          LA    13,SAVEWT\n          ST    13,8(,2)\n          S     2,SAVEWT+4\n          L     11,0(,1)\n          LA    9,DCBWT\n          USING IHADCB,9\n          LTR   11,11         NEG SAYS ONLY ONE PARM, USE DFLT\n          BC    4,DFLTOPEN\n          L     2,4(,1)\nOPEN2     MVC   DCBDDNAM(8),0(2)   FAKE OR REAL NAME TO DCB\n          OPEN  (DCBWT,(OUTPUT))\n*\n          TM    DCBOFLGS,X'10'   SUCCESSFUL OPEN?\n          BC    8,OPENFAIL       NO\n          SR    5,5\n          ST    5,DCBBLKCT      SAY NO BLOCKS WRITTEN\nOPEN3     ST    5,AIER\n          B     RETURN\n*\nOPENFAIL  LA    5,1\n          B     OPEN3     COMPLAIN ABOUT DCB NO OPEN\n*\nDFLTOPEN  LA    2,DFLTDDWT    USE DEFAULT NAME, GOOD AS ANY\n          B     OPEN2\n*\nCPWCLS    EQU   *\nCPWTCLS   STM   14,12,12(13)  THIS IS NONSENSE UNLESS ...\n          USING CPWTCLS,15\n          L     12,ACPWT\n          DROP  15\n          LR    2,13\n          LA    13,SAVEWT\n          ST    13,8(,2)\n          ST    2,SAVEWT+4\n          CLOSE DCBWT\n          B     RETURN\n*\n*\n*\nSAVEWT    DS    9D\nCP        DC    9D'0'\n*\n*HERE ARE THE VARIOUS CCW'S WE MAY NEED\n*\nWTN       DC    X'01'         COMMAND FOR WRITE\n          DC    AL3(0)\n          DC    X'A0'         CD,SLI\n          DC    AL3(65535)    MAX COUNT; ANYBODY SAYS 32K IS MAX FOR\n*                             CCW IS JUST PLAIN WRONG!!!!\nWTF       DC    X'01'\n          DC    AL3(0)\n          DC    X'20'         SLI\n          DC    AL3(1)\n*\nWTM       DC    X'1F'         CONTROL - WRITE FILE MARK\n          DC    AL3(CP)\n          DC    X'20'         SLI\n          DC    AL3(1)\n*\nERG       DC    X'17'         CONTROL - ERASE GAP\n          DC    AL3(CP)\n          DC    X'20'         SLI\n          DC    AL3(1)\n*\nACPWT     DC    A(CPWT)\nFM1       DC    F'-1'\nFM2       DC    F'-2'\nFM3       DC    F'-3'\nMAX       DC    F'65535'      MAX BYTES PER CCW\nNUMCCW    DC    F'0'\nDFLTDDWT  DC    CL8'WRITEOUT'     FAKE DDNAME\n*\nECBWT     DC    F'0'          EVENT CONTROL BLOCK\nIOBWT     DC    F'0'          INPUT/OUTPUT BLOCK\n          DC    A(ECBWT)\n*\nIOBWTCSW  DC    2F'0'\nIOBWTACP  DC    A(CP)         ADDR OF CHANNEL PROG\nIOBWTDCB  DC    A(DCBWT)       & DCB IT USES\n          DC    F'0'\nIOBWTBCI  DC    H'1'          BLOCK COUNT INCREMENT\nIOBWTECT  DC    H'0'          ERROR COUNTS\n*\nDCBWT     DCB   MACRF=(E),DEVD=TA,DSORG=PS,IOBAD=IOBWT,DDNAME=NONE\n*\nANSWER    DSECT\nAIER      DS    F             1=OPEN FAILED, 0=OK, -1=EOT,\n*                             -2=DATA CHECK, -3=HARDWARE FAILURE\nAPART     DS    F             PARTIAL COMPLETION, 0=O.K.\nAPARTIAL  DS    F             MAINTAIN COMPAT WITH CPRD\nASTATUS   DS    2F            UNIT STATUS & SENSE BYTES\n*\n          DCBD  DSORG=PS,DEVD=TA\n*\n          END\n.# STORE CPWT\n\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT444/FILE444.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT444", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}