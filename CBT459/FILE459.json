{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012112000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1939938, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 17, "INMDSNAM": "CBT.V500.FILE459.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1939938, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1939938, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE459.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00 \\n'", "DS1TRBAL": "b'jb'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03e\\x00\\x00\\x03g\\x00\\x02\\x00!'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x14D\\x00.\\x00.\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T14:44:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "SYSPAJA"}, "text": "1   07.12.94                                            DOC - Page 1/2.\n\n          ***************************************************\n          ***     P R E L I M I N A R Y     N O T E S     ***\n          ***************************************************\n\n Files author : MOINIL P.A.\n -------------- Computing Centre (TP361)\n                J.R.C. - Ispra establishment\n                21020 ISPRA (VA), Italy\n\n Products installation requirement :\n -----------------------------------\n     Data-set \"->.SOURCE.FILE0\" is a pre-requisite.\n\n Data-set members structure :\n ----------------------------\n     The members names ending by a dollar sign ($) are the JCL to\n     install (assembly + link-edit) the modules, and the members\n     names ending by a paragraph sign (@) are the corresponding\n     modules documentation.\n\n                   *********************************\n                   ***     INFORMATION NOTES     ***\n                   *********************************\n\n     Assuming the LISTNO program in \"->.SOURCE.FILE0\" installed, you may\n SUBMIT the job below to obtain a copy of this document :\n         //...      JOB ...\n         //DOC     EXEC PGM=LISTNO,PARM='M=DOC'\n         //SYSPDS    DD DSN=->.SOURCE.FILE5,DISP=SHR\n         //SYSPRINT  DD SYSOUT=A\n     A complete information notes list (about 1500 lines) may be also\n obtained by this job if you specify M=INFO as parameter.\n1   16.12.94                                            DOC - Page 2/2.\n\n  *******************************************************************\n  ***     D A T A - S E T ->.SOURCE.FILE5     C O N T E N T S     ***\n  *******************************************************************\n\n DYLO       DYLON/DYLOFF TSO command (Session libraries Dynamic\n            allocation).\n SHADOW     SHADOW/SHADUP ISPF application (Encrypt/Decrypt data-sets\n            facility).\n SHORT      System Sector Short Communication (ISPF).\n TOPSEC     Display Top Secret short-write-up TSO command.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#DOC#": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x11\\x7f\\x00\\x90\\x11\\x7f\\x13W\\x00&\\x00&\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-04-27T00:00:00", "modifydate": "1990-04-27T13:57:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "SYSPAJA"}, "text": "1   27/04/90\n\n\n\n\n\n\n\n\n\n\n\n\n\n                DDDDDDD          OOOOOOO         CCCCCCCC\n                DDDDDDDD        OOOOOOOOO       CCCCCCCCC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DD     DD       OO     OO       CC\n                DDDDDDDD        OOOOOOOOO       CCCCCCCCC\n                DDDDDDD          OOOOOOO         CCCCCCCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n=/MB     $$$DOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#INFO#": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x14D\\x00&\\x00&\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T14:44:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "SYSPAJA"}, "text": "1   27/04/90\n\n\n\n\n\n\n\n\n\n\n\n\n\n          IIII       NN     NN       FFFFFFFFF        OOOOOOO\n           II        NNN    NN       FFFFFFFFF       OOOOOOOOO\n           II        NNNN   NN       FF              OO     OO\n           II        NN NN  NN       FF              OO     OO\n           II        NN  NN NN       FFFFFF          OO     OO\n           II        NN   NNNN       FFFFFF          OO     OO\n           II        NN    NNN       FF              OO     OO\n           II        NN     NN       FF              OO     OO\n           II        NN     NN       FF              OOOOOOOOO\n          IIII       NN     NN       FF               OOOOOOO\n\n\n\n\n1   16/12/94\n                                                      INDEX     1/1.\n\n=/MB     DYLO#     DYLON/DYLOFF installation preliminary.\n=/MB     DYLO@     DYLON/DYLOFF TSO command.\n=/MB     SHADOW#   SHADOW/SHADUP installation preliminary.\n=/MB     SHADOW@   SHADOW/SHADUP ISPF application.\n=/MB     SHORT@    System Sector Short Communication (ISPF).\n=/MB     TOPSEC#   TOPSEC installation preliminary.\n=/MB     TOPSEC@   TOPSEC TSO command.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACS": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92&\\x7f\\x00\\x92&\\x7f\\x172\\x00\\\\\\x00\\\\\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-09-23T00:00:00", "modifydate": "1992-09-23T17:32:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "SYSPAJA"}, "text": "*-------------------------------------------------------------------*\n*               A U T O M A T I C     C O M M A N D S               *\n*         S E L E C T I O N     P R O C E S S     T A B L E         *\n*-------------------------------------------------------------------*\n*\n*                      STATEMENTS DESCRIPTION :\n*                      ========================\n*\n* PURPOSE : AUTOMATIC COMMAND(S) SELECTION TO BE EXECUTED WHEN THE\n* --------- \"DYLON\" OR \"DYLOFF\" PROCESS IS SUCCESSFULLY COMPLETE.\n*           BY USE OF STATEMENTS, IT ALLOWS CONDITIONAL SELECTION.\n*\n* CARD COLUMNS RANGE : COLUMNS 1-72. NEVER A KEYWORD OR AN OPERAND\n* -------------------- CAN BE SPLIT BETWEEN TWO SUCCESSIVE CARDS.\n*          KEYWORDS AND OPERANDS MUST BE SEPARATED EACH FROM THE\n*          OTHERS BY AT LEAST A BLANK CHARACTER. WHEN THE FIRST\n*          CHARACTER ENCOUNTERED IN A CARD, UNLESS BLANKS, IS AN\n*          ASTERISK (*), THEN THIS CARD IS HANDLED AS A COMMENT CARD.\n*\n* SYNTAX : ALWAYS, A STATEMENT MUST START WITH A KEYWORD \"IF-ON\" OR\n* -------- \"IF-OFF\" AND END BY A KEYWORD \"C=\" (THIS IS MANDATORY).\n*          BE CAREFUL IN STATEMENTS SEQUENCE ORDER SO THEY WARRANT A\n*          HIGH COMPLEX CONDITION IS MET BEFORE A LESS ONE.\n*\n* KEYWORD  OPERAND(S)  MEANING\n* -------  ----------  --------------------------------------------\n* IF-ON    NONE        START A CONDITIONAL SENTENCE FOR \"DYLON\".\n* IF-OFF   NONE        START A CONDITIONAL SENTENCE FOR \"DYLOFF\".\n* T=       S/L/B       TERMINAL TYPE : \"S\" FOR SCREEN OR \"L\" FOR LINE\n*                      OR \"B\" FOR TSO BACKGROUND RUN.\n* U=       USER-ID     LIST OF USER-ID'S NAMES MATCHING CONDITIONS.\n* G=       GROUP       LIST OF GROUP'S NAMES MATCHING CONDITIONS.\n* P=       PROCEDURE   LIST OF PROCEDURE'S NAMES MATCHING CONDITIONS.\n* S=       TYPE        LIST OF TYPE'S NAMES MATCHING CONDITIONS (VALID\n*                      ONLY IN \"IF-ON\" SENTENCE).\n* C=       COMMAND(S)  THE DESIRED COMMAND(S). THE STRING MUST BE\n*                      QUOTED IF IT INCLUDES ONE OR MORE BLANKS AND/OR\n*                      QUOTES (A QUOTE IN THE STRING MUST BE DOUBLED),\n*                      AND MULTIPLE COMMANDS MUST BE SEPARATED EACH\n*                      FROM THE OTHER BY THE SEMI-COLON DELIMITER.\n*\n*          KEYWORDS    ALIASES\n*          ----------  -----------------------------------------\n*          T=          TERM=, TERMINAL=\n*          U=          USER=, USERS=\n*          G=          GROUP=, GROUPS=\n*          P=          PROC=, PROCEDURE=, PROCS=, PROCEDURES=\n*          S=          SEL=, SELECT=\n*          C=          CMD=, CMDS=, COMMAND=, COMMANDS=\n*          S           SCREEN, D, DISPLAY\n*          L           LINE, LINES\n*          B           BACK, BACKGROUND (EQUIVALENT TO \"L\")\n*\n* HOW TO CODE KEYWORDS AND OPERANDS :\n* -----------------------------------\n*      1. WHEN CODING U=, G= AND P= OPERAND(S), THE FOLLOWING RULES\n*         MUST BE APPLIED :\n*           1. A SINGLE NAME MAY BE CODED P= ... AS WELL AS P= ( ... )\n*           2. A LIST OF NAMES IS ALWAYS CODED G= ( ... ... ... )\n*         YOU MAY ALSO SPECIFY A SHORTER CHARACTERS STRING WHICH WILL\n*         BE USED AS MATCH TEST ON THE INITIAL CHARACTERS OF THE\n*         CURRENT USER-ID, GROUP OR PROCEDURE NAME. TO DO IT, JUST\n*         PREFIX THE CHARACTERS STRING BY A PERIOD.\n*           I.E. : U= .SYS WHICH MEANS ALL USER-ID'S NAMES STARTING\n*           WITH THE \"SYS\" CHARACTERS (I.E. : SYSTSO1, SYSTSO2,\n*           SYSIBM1 AND SYSIBM2 ARE ALL MATCHING THE ABOVE CONDITION).\n*      2. THE SAME RULES APPLY TO S= OPERAND(S) CODING UNLESS YOU MAY\n*         NOT DEFINE A MATCH TEST (CHARACTERS STRING PREFIXED BY A\n*         PERIOD). THE TYPE'S NAMES ARE THE DATA-SET PRODUCT(S) OR\n*         SPECIAL USES, AND ALL THOSE IN THE LIST ARE TESTED TO GET\n*         THE CONDITION MET. VALID VALUES :\n*                  SPF : PDF-ISPF\n*                  IFS : INFO-SYSTEM\n*                  SMP : SMP/E\n*                  ADA : ADABAS\n*                  MFT : MFTS\n*                  SYS : SYSTEM PROGRAMMER'S USE\n*                  IFM : INFO-SYSTEM MANAGER\n*                  DMS : DMS MANAGER\n*      3. KEYWORDS AND OPERANDS AS WELL AS MULTIPLE COMMANDS MAY BE\n*         CODED IN SEPARATE CARDS, AS I.E. :\n*           IF-ON\n*                  TERMINAL= S\n*                            USERS= ( .SYS\n*                                     MASTER )\n*                                      SELECT= ( SPF\n*                                                ADA )\n*                                                COMMANDS= ' TIME ;\n*                                                            ISPF '\n*\n    IF-ON     C= TIME\n    IF-OFF    C= TIME\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALT": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x0f\\x00\\x944\\x0f\\x11\\x00\\x00/\\x00/\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-06T00:00:00", "modifydate": "1994-12-06T11:00:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "SYSPAJA"}, "text": "*-------------------------------------------------------------------*\n*         A L I A S ( E S )     P R O C E S S     T A B L E         *\n*-------------------------------------------------------------------*\n*\n*                      STATEMENTS DESCRIPTION :\n*                      ========================\n*\n* ALIAS : DEFINE AN ALIAS NAME TO USE AS REPLACEMENT FOR USER <U> OR\n* ------- GROUP <G> DATA-SETS NAMES WHEN TRYING TO ALLOCATE THEM TO\n*         SPECIFIC DD-NAMES (I.E., IF A DATA-SET <U>... OR <G>... IS\n*         NOT FOUND WHEN DOING ALLOCATION, THEN A SEARCH IS DONE TO\n*         FIND THE ALIAS... DATA-SET ONLY WHEN THE DD-NAME MATCHES\n*         IN THE CORRESPONDING ALIAS TABLE ENTRY).\n*         THE UNLESS OPERAND ALLOWS TO PREVENT THIS PROCESS WHEN\n*              1. A USER (USER-ID TABLE) IS CONNECTED TO ANY RACF\n*                 GROUP(S) WHICH MUST NOT ACCESS THE ALIAS NAME, OR\n*              2. A GROUP (GROUP TABLE) CONTAINS ANY RACF USER(S)\n*                 WHO MUST NOT ACCESS THE ALIAS NAME.\n*    SYNTAX :  USER= OR GROUP=  NAME  ALIAS\n*    --------           DDN=  ...  ...  ...\n*                       UNLESS=  ...  ...  ...\n*    CARD COLUMNS RANGE : COLUMNS 1-72.\n*                         AN ASTERISK IN COLUMN 1 MEANS A COMMENT.\n*    OPERAND  MEANING                                       MAX.L.\n*    -------  --------------------------------------------  ------\n*    NAME     THE USER-ID (USER=) OR GROUP (GROUP=) NAME.   CL8\n*    ALIAS    THE ALIAS NAME.                               CL8\n*    DDN=     THE DD-NAME(S) TO WHICH THE PROCESS MUST      CL8\n*             BE APPLIED.\n*             THE LIST MAY CONTINUE ON MORE CARDS.\n*    UNLESS=  THE GROUP NAME(S), WHEN USER-ID TABLE,        CL8\n*             OR USER-ID NAME(S), WHEN GROUP TABLE, FOR\n*             WHICH THE PROCESS MUST NOT BE APPLIED.\n*             IF SPECIFIED, THIS OPERAND MUST FOLLOWS\n*             THE DDN= OPERAND.\n*             THE LIST MAY CONTINUE ON MORE CARDS.\n*\n*------- USER-ID(S) TABLE ------------------------------------------*\n*\nUSER= SYSTSO2 SYSTSO1\n         DDN= SYSPROC SYSHELP ISPPLIB ISPMLIB ISPSLIB ISPTLIB\n*\n*------- GROUP(S) TABLE --------------------------------------------*\n*\nGROUP= OPER SYS\n         DDN= SYSPROC ISPPLIB ISPMLIB ISPSLIB ISPTLIB\n         UNLESS= SYSTSOX XALERT1 XALERT2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AOS": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92&\\x8f\\x00\\x92&\\x8f\\x11#\\x00I\\x00I\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-09-24T00:00:00", "modifydate": "1992-09-24T11:23:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "SYSPAJA"}, "text": "*-------------------------------------------------------------------*\n*               A U T O M A T I C     O P E R A N D S               *\n*         S E L E C T I O N     P R O C E S S     T A B L E         *\n*-------------------------------------------------------------------*\n*\n*                      STATEMENTS DESCRIPTION :\n*                      ========================\n*\n* PURPOSE : AUTOMATIC OPERAND(S) SELECTION TO BE SUPPLIED WITH THE\n* --------- \"DYLON\" OR \"DYLOFF\" COMMAND.\n*           BY USE OF STATEMENTS, IT ALLOWS CONDITIONAL SELECTION.\n* CARD COLUMNS RANGE : COLUMNS 1-72. NEVER A KEYWORD OR AN OPERAND\n* -------------------- CAN BE SPLIT BETWEEN TWO SUCCESSIVE CARDS.\n*          KEYWORDS AND OPERANDS MUST BE SEPARATED EACH FROM THE\n*          OTHERS BY AT LEAST A BLANK CHARACTER. WHEN THE FIRST\n*          CHARACTER ENCOUNTERED IN A CARD, UNLESS BLANKS, IS AN\n*          ASTERISK (*), THEN THIS CARD IS HANDLED AS A COMMENT CARD.\n*\n* SYNTAX : ALWAYS, A STATEMENT MUST START WITH A KEYWORD \"IF-ON\" OR\n* -------- \"IF-OFF\" AND END BY A KEYWORD \"O=\" (THIS IS MANDATORY).\n*          BE CAREFUL IN STATEMENTS SEQUENCE ORDER SO THEY WARRANT A\n*          HIGH COMPLEX CONDITION IS MET BEFORE A LESS ONE.\n*\n* KEYWORD  OPERAND(S)  MEANING\n* -------  ----------  --------------------------------------------\n* IF-ON    NONE        START A CONDITIONAL SENTENCE FOR \"DYLON\".\n* IF-OFF   NONE        START A CONDITIONAL SENTENCE FOR \"DYLOFF\".\n* T=       S/L/B       TERMINAL TYPE : \"S\" FOR SCREEN OR \"L\" FOR LINE\n*                      OR \"B\" FOR TSO BACKGROUND RUN.\n* U=       USER-ID     LIST OF USER-ID'S NAMES MATCHING CONDITIONS.\n* G=       GROUP       LIST OF GROUP'S NAMES MATCHING CONDITIONS.\n* P=       PROCEDURE   LIST OF PROCEDURE'S NAMES MATCHING CONDITIONS.\n* O=       OPERAND(S)  THE DESIRED OPERAND(S) TO BE SUPPLIED. THIS\n*                      IS THE COPY OF THE COMMAND OPERANDS YOU WANT,\n*                      EXACTLY AS THEY WOULD BE KEYBOARD TYPED IN\n*                      (UNLESS FOR THE C= OPERAND AS SHOWN LATER).\n*\n*          KEYWORDS    ALIASES\n*          ----------  -----------------------------------------------\n*          T=          TERM=, TERMINAL=\n*          U=          USER=, USERS=\n*          G=          GROUP=, GROUPS=\n*          P=          PROC=, PROCEDURE=, PROCS=, PROCEDURES=\n*          O=          OP=, OPS=, OPND=, OPNDS=, OPERAND=, OPERANDS=\n*          S           SCREEN, D, DISPLAY\n*          L           LINE, LINES\n*          B           BACK, BACKGROUND (EQUIVALENT TO \"L\")\n*\n* HOW TO CODE KEYWORDS AND OPERANDS :\n* -----------------------------------\n*      1. WHEN CODING U=, G= AND P= OPERAND(S), THE FOLLOWING RULES\n*         MUST BE APPLIED :\n*           1. A SINGLE NAME MAY BE CODED P= ... AS WELL AS P= ( ... )\n*           2. A LIST OF NAMES IS ALWAYS CODED G= ( ... ... ... )\n*         YOU MAY ALSO SPECIFY A SHORTER CHARACTERS STRING WHICH WILL\n*         BE USED AS MATCH TEST ON THE INITIAL CHARACTERS OF THE\n*         CURRENT USER-ID, GROUP OR PROCEDURE NAME. TO DO IT, JUST\n*         PREFIX THE CHARACTERS STRING BY A PERIOD.\n*           I.E. : U= .SYS WHICH MEANS ALL USER-ID'S NAMES STARTING\n*           WITH THE \"SYS\" CHARACTERS (I.E. : SYSTSO1, SYSTSO2,\n*           SYSIBM1 AND SYSIBM2 ARE ALL MATCHING THE ABOVE CONDITION).\n*      2. KEYWORDS AND OPERANDS AS WELL AS MULTIPLE COMMANDS MAY BE\n*         CODED IN SEPARATE CARDS, AS I.E. :\n*           IF-ON\n*                  TERMINAL= S\n*                            USERS= ( .SYS MASTER )\n*                                      OPERANDS= NOLIST\n*                                                ISPF\n*                                                COMMANDS= ' TIME ;\n*                                                            ISPF '\n*\n    IF-ON     O=   ACS  C=*\n    IF-OFF    O=   ACS  C=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DDT": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x923/\\x00\\x923/\\x14C\\x00\\x8e\\x00\\x8e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-11-27T00:00:00", "modifydate": "1992-11-27T14:43:00", "lines": 142, "newlines": 142, "modlines": 0, "user": "SYSPAJA"}, "text": "*-------------------------------------------------------------------*\n*               D D N A M E ' S     L I B R A R I E S               *\n*     C O N C A T E N A T I O N S     I N F O ' S     T A B L E     *\n*-------------------------------------------------------------------*\n*\n*                      STATEMENTS DESCRIPTION :\n*                      ========================\n*\n* CARD COLUMNS RANGE : COLUMNS 1-72.\n* -------------------- AN OPERAND MUST RESIDE ENTIRELY IN A CARD.\n*                      AN ASTERISK IN COLUMN 1 MEANS A COMMENT.\n*\n* 1. DD : DEFINE A DD-NAME TO WHICH ONE, AT LEAST, OR MORE LIBRARIES\n* ------- MUST BE DYNAMICALLY AND PERMANENTLY ALLOCATED.\n*    SYNTAX :  DD=...  ID=...  DSORG=...  RECFM=...  LRECL=...  SP=...\n*    OPERAND  MEANING                                       MAX.L.\n*    -------  --------------------------------------------  ------\n*    DD=      DD-NAME (JOBCAT, STEPCAT, JOBLIB AND          CL8\n*             STEPLIB ARE OBVIOUSLY NOT SUPPORTED).\n*    ID=      DD PURPOSE SHORT DESCRIPTION (MUST BE         CL20\n*             ENCLOSED BETWEEN DOUBLE-QUOTES (\") IF\n*             IT CONTAINS ONE OR MORE BLANKS).\n*    DSORG=   DATA-SET(S) ORGANIZATION : PS, PO OR DA.\n*             WHEN DA, RECFM AND LRECL ARE NOT USED.\n*    RECFM=   DATA-SET(S) RECORD FORMAT : F, V OR U.\n*    LRECL=   DATA-SET(S) RECORD LENGTH (USED ONLY\n*             WITH RECFM=F OR V).\n*    SP=      DD-NAME SPECIAL PROCESSING REQUEST.           CL1\n*             VALID VALUE : C = CONTROL\n*                           D = DUMMY\n*                           E = EDIT\n*                           T = TERMINAL\n*                           W = WORK\n*\n* 2. DS : DEFINE A DATA-SET LIBRARY TO BE ALLOCATED UNDER THE DD-NAME\n* ------- PREVIOUSLY DECLARED BY A DD STATEMENT.\n*    SYNTAX :  DS=...  TYPE=...  OPT=...  SP=...\n*    OPERAND  MEANING                                       MAX.L.\n*    -------  --------------------------------------------  ------\n*    DS=      DATA-SET NAME, INTO WHICH YOU MAY USE         CL44\n*             THE FOLLOWING SPECIAL CODING :\n*             <P> : CURRENT DSNAME'S PREFIX REPLACEMENT\n*             <U> : CURRENT RACF USER-ID REPLACEMENT\n*             <G> : CURRENT RACF GROUP-NAME REPLACEMENT\n*             IF OMITED : TEMPORARY DATA-SET ASSUMED\n*             (CODE DS= WHEN ANOTHER OPERAND SPECIFIED).\n*    TYPE=    DATA-SET PRODUCT(S) OR SPECIAL USES.\n*             VALID VALUES :\n*                  SPF : PDF-ISPF\n*                  IFS : INFO-SYSTEM\n*                  SMP : SMP/E\n*                  ADA : ADABAS\n*                  MFT : MFTS\n*                  SYS : SYSTEM PROGRAMMER'S USE\n*                  IFM : INFO-SYSTEM MANAGER\n*                  DMS : DMS MANAGER\n*    OPT=     DATA-SET PROCESSING REQUIREMENT.\n*             VALID VALUE :\n*                  M : MANDATORY FOR THE PRODUCT\n*                  X : EXCLUSIVE FOR THE PRODUCT\n*    SP=      DATA-SET SPECIAL PROCESSING REQUEST.          CL1\n*             VALID VALUE : P = PROFILE\n*\nDD=SYSPROC    ID=\"TSO PROCEDURES\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<P>.CLIST\n              DS=<U>.CLIST\n              DS=<P>.PROCS.DATA  TYPE=SPF\n              DS=<U>.PROCS.DATA  TYPE=SPF\n              DS=SYSDMS.EUR.CMDPROC  TYPE=DMS\n              DS=<G>.CLIST\n              DS=<G>.PROCS.DATA  TYPE=SPF\n              DS=EUR1.PROCS.DATA  OPT=M\n              DS=ADA.CMDPROC  OPT=M  TYPE=ADA\nDD=SYSHELP    ID=\"TSO HELP\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<P>.HELP.DATA\n              DS=<U>.HELP.DATA\n              DS=<G>.HELP.DATA\n              DS=SYS1.HELP  OPT=M\n              DS=EUR1.HELP  OPT=M\nDD=SYSUADS    ID=\"USER ATTRIBUTE\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=SYS1.UADS  TYPE=SYS\nDD=SYSLBC     ID=\"FILE TRANSFERT\"  DSORG=PS  RECFM=F  LRECL=129\n              DS=SYS1.BRODCAST\nDD=ISPPROF    ID=\"ISPF PROFILE\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<U>.SPF.PROF  TYPE=SPF  SP=P\nDD=ISPLLIB    ID=\"ISPF LINK\"  DSORG=PO  RECFM=U\n              DS=<P>.LINK.DATA  TYPE=SPF\n              DS=<U>.LINK.DATA  TYPE=SPF\n              DS=SYSDMS.EUR.CMDLIB  TYPE=DMS\n              DS=<G>.LINK.DATA  TYPE=SPF\n              DS=EUR1.LINK.DATA  OPT=M  TYPE=SPF\n              DS=SYSPROD.MFTS.V51L04.LOADLIB  OPT=M  TYPE=MFT\n              DS=SYSNEW.INFOV3R1.BLMMOD1  OPT=M  TYPE=IFS\n              DS=SYSNEW.INFOV3R1.BLGMOD1  OPT=M  TYPE=IFM\nDD=ISPPLIB    ID=\"ISPF PANELS\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<P>.PANELS.DATA  TYPE=SPF\n              DS=<U>.PANELS.DATA  TYPE=SPF\n              DS=SYSDMS.EUR.ISPPLIB  TYPE=DMS\n              DS=<G>.PANELS.DATA  TYPE=SPF\n              DS=EUR1.PANELS.DATA  OPT=M  TYPE=SPF\n              DS=SYSPROD.MFTS.V51L04.ISPPLIB  OPT=M  TYPE=MFT\nDD=ISPMLIB    ID=\"ISPF MESSAGES\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<P>.MESS.DATA  TYPE=SPF\n              DS=<U>.MESS.DATA  TYPE=SPF\n              DS=SYSDMS.EUR.ISPMLIB  TYPE=DMS\n              DS=<G>.MESS.DATA  TYPE=SPF\n              DS=EUR1.MESS.DATA  OPT=M  TYPE=SPF\n              DS=SYSPROD.MFTS.V51L04.ISPMLIB  OPT=M  TYPE=MFT\nDD=ISPSLIB    ID=\"ISPF SKELETONS\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<P>.SKELS.DATA  TYPE=SPF\n              DS=<U>.SKELS.DATA  TYPE=SPF\n              DS=<G>.SKELS.DATA  TYPE=SPF\n              DS=EUR1.SKELS.DATA  OPT=M  TYPE=SPF\nDD=ISPTLIB    ID=\"ISPF TABLES INPUT\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<P>.TABLES.DATA  TYPE=SPF\n              DS=<U>.TABLES.DATA  TYPE=SPF\n              DS=<G>.TABLES.DATA  TYPE=SPF\n              DS=EUR1.TABLES.DATA  OPT=M  TYPE=SPF\nDD=ISPTABL    ID=\"ISPF TABLES OUTPUT\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<P>.TABLES.DATA  OPT=X  TYPE=SPF\n              DS=<U>.TABLES.DATA  OPT=X  TYPE=SPF\n              DS=<U>.SPF.PROF  TYPE=SPF\nDD=ISPWORK    ID=\"ISPF WORK FILE\"  DSORG=PO  RECFM=F  LRECL=80  SP=W\n              DS=  TYPE=SPF\nDD=ISPCTL1    ID=\"ISPF CONTROL 1\"  DSORG=PS  RECFM=F  LRECL=80  SP=C\n              DS= TYPE=SPF\nDD=ISPCTL2    ID=\"ISPF CONTROL 2\"  DSORG=PS  RECFM=F  LRECL=80  SP=C\n              DS= TYPE=SPF\nDD=SMPTABL    ID=\"SMP TABLES\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=EUR1.TABLES.DATA  OPT=M  TYPE=SMP\nDD=PARMLIB    ID=\"DMS PARAMETERS\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=SYSDMS.PARMLIB  OPT=M  TYPE=DMS\nDD=MFTTLIB    ID=\"MFTS TABLES\"  DSORG=PO  RECFM=F  LRECL=80\n              DS=<U>.MFTS.TABLES  TYPE=MFT  SP=P\nDD=FILES      ID=\"DMS CATALOG\"  DSORG=DA\n              DS=SYSDMS.FILES  OPT=M  TYPE=DMS\nDD=SYSEDIT    ID=\"TSO EDIT WORK\"  SP=E\nDD=PLIDUMP    ID=\"PL1 DUMP\"  SP=D\nDD=MSGPRINT   ID=\"DMS MESSAGES\"  SP=T\nDD=SYSPRINT   ID=\"NORMAL OUTPUT\"  SP=T\nDD=SYSTERM    ID=\"ERRORS MESSAGES\"  SP=T\nDD=SYSIN      ID=\"NORMAL INPUT\"  SP=T\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLO": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x0f\\x00\\x944\\x0f\\x15B\\x1c\\xfc\\x1c\\xfc\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-06T00:00:00", "modifydate": "1994-12-06T15:42:00", "lines": 7420, "newlines": 7420, "modlines": 0, "user": "SYSPAJA"}, "text": "DYLO     TITLE 'DYLON/DYLOFF -- DYNAMIC LOGON/LOGOFF.'\nDYLON    START 0\n        PRINT  OFF\n        COPY   DYLOM               <=== ASSEMBLY MACROS ==============\n         GBLA  &TSON\n         GBLC  &TSOP(100)\n         GBLC  &PRS,&PRF,&PUN\n&TSON    SETA  100\n&TSOP(1) SETC  'A'                 ALIAS OF AUTO (NOT USING MACRO)\n&PUN     SETC  'NO'\n         AIF   ('&SYSPARM' EQ '').SN\n         AIF   ('&SYSPARM'(1,1) EQ 'F').SF\n         AIF   ('&SYSPARM'(1,1) EQ 'S').SS\n.SN      ANOP\n&PRS     SETC  'NOGEN'\n&PRF     SETC  'NOGEN'\n         AGO   .ST\n.SS      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'NOGEN'\n         AGO   .SP\n.SF      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'GEN'\n.SP      AIF   (K'&SYSPARM LT 2).ST\n         AIF   ('&SYSPARM'(2,1) NE 'Y').ST\n&PUN     SETC  'YES'\n.ST     PRINT  ON\n         SPACE 1\n*--------------------------------------------------------------------*\n*        D Y L O N / D Y L O F F     T S O     C O M M A N D         *\n*--------------------------------------------------------------------*\n*\n*  DESCRIPTION : SEE MODULE \"DYLOCOM\" FOR DOCUMENTATION.\n*  -------------\n*\n*  COMPLETION CODES : THIS COMMAND RETURNS A VALUE IN REGISTER 15\n*  ------------------ (RETURN CODE) REPRESENTING THE SUCCESS OR\n*                     NONSUCCESS COMPLETION :\n*\n*        -----------------------------------------------------------\n*        | &LASTCC | MEANING                                       |\n*        |---------|-----------------------------------------------|\n*        |    0    | SUCCESSFUL COMPLETION                         |\n*        |---------|-----------------------------------------------|\n*        |    8    | COMPLETION WITH ERROR(S)                      |\n*        -----------------------------------------------------------\n*\n*  ATTRIBUTES : MODULE IS RE-ENTERABLE.\n*  ------------ TSO FOREGROUND AND BACKGROUND RUNNING ALLOWED.\n*\n*  AUTHOR :     MOINIL P.A.\n*  --------     COMPUTING CENTRE (TP 361)\n*               J.R.C. - ISPRA ESTABLISHMENT\n*               21020 ISPRA (VA), ITALY\n*               TEL. 0-332-789442\n         EJECT\n*-------------------------------------------------------------------*\n*                    P R E - R E Q U I S I T E S                    *\n*-------------------------------------------------------------------*\n         SPACE 1\n*  SYS1.PARMLIB MEMBERS :\n*  ----------------------\n*            1. IKJTSO00 : \"DYLON\" AND \"DYLOFF\" COMMANDS\n*                          AUTHORIZATION NEEDED.\n*            2. IEAAPF00 : LINK \"DYLON\" AND \"DYLOFF\" COMMANDS IN\n*                          AN APF-LIBRARY.\n*            3. LNKLST00 : SET LINK-LIBRARY IN LNKLST LOOKASIDE (LLA).\n         SPACE 1\n*-------------------------------------------------------------------*\n*               S P E C I A L     O P E R A N D ( S )               *\n*-------------------------------------------------------------------*\n         SPACE 1\n*  SPECIAL OPERANDS : RESTRICTED TO DEBUG USE (TEST PURPOSE), SO\n*  ------------------ ALLOWED ONLY TO THE \"WIZARD\" INSTALLATION\n*        SENIOR SYSTEM PROGRAMMER(S) AND DEFINED WITH @WIZ MACRO\n*        IN \"DYLOCOM\" MODULE.\n*\n*        OPERAND  MEANING\n*        -------  ---------------------------------------------------\n*        DSAB     TRACE OF DSAB'S FLAGS (BYTE \"DSABRS01\").\n*\n*  NOTES : 1. THESE OPERANDS ARE ACCEPTED ONLY AS TRUE COMMAND\n*  ======     OPERANDS, THEY CANNOT BE USED IN ANY \"AOS\" MEMBER(S).\n*         2.  SEE ALSO COMMENT AT LABEL \"ASKTEST\".\n         SPACE 1\n*===================================================================*\n*              F U R T H E R     P A R T I C U L A R S              *\n*-------------------------------------------------------------------*\n*                                                                   *\n*        THE \"OWNDYLO\", \"TSODYLO\" AND \"SYSDYLO\" FLAGS (USED TO      *\n*        REMEMBER AND INDICATE WHICH AND HOW DATA-SETS HAVE BEEN    *\n*        ALLOCATED BY THIS COMMAND) ARE DEFINED IN THE RESERVED     *\n*        BYTE \"DSABRS01\" OF THE DATA-SET ASSOCIATION BLOCK (DSAB).  *\n*                                                                   *\n*===================================================================*\n         EJECT\n*-------------------------------------------------------------------*\n*            D A T A - S E T S     D E F I N I T I O N S            *\n*-------------------------------------------------------------------*\n         SPACE 1\n        PRINT  &PRS\n* OPT=   HERE FOLLOWS THE BITS FLAGS DEFINITIONS (FLAG BYTE UNDER THE\n*        CONTROL OF \"DYLO\") FOR THE DATA-SETS PROCESSING :\n         SPACE 1\n        @DEFF  M,                       MANDATORY                      X\n               X                        EXCLUSIVE\n         SPACE 1\n*-------------------------------------------------------------------*\n*             A S S E M B L Y     D E F I N I T I O N S             *\n*-------------------------------------------------------------------*\n         SPACE 1\n        PRINT  GEN\nMXSTN    EQU   10                  MAXIMUM NUMBER OF SAVE-AREAS USE\n*                                    TO BE GENERATED IN THE TANK\nMXTBN    EQU   16                  EXPECTED MAXIMUM NUMBER OF DATA-SETS\n*                                    TO BE CONCATENATED TO A DDNAME\nMXRBTP   EQU   20                  EXPECTED MAXIMUM NUMBER OF POINTERS\n*                                    TO SVC99 TEXT UNITS\nMXRBTU   EQU   516                 EXPECTED MAXIMUM AREA LENGTH TO BE\n*                                    USED FOR SVC99 TEXT UNITS\n         EJECT\n        $DEFREG\n* GENERAL USE OF REGISTERS :\n* --------------------------\n*        R8  = ROUTINES LOCAL WORK AREA POINTER\n*        R9  = ROUTINES BASE REGISTER\n*        R10 = GENERAL WORK-AREA POINTER\n*        R11 = MAIN 1ST BASE REGISTER\n*        R12 = MAIN 2ND BASE REGISTER\n*        R13 = SAVE AREA POINTER\n*        R14 = LINK REGISTER\n*        R15 = ENTRY ADDRESS / RETURN CODE\n         SPACE 1\n        PRINT  &PRF\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - -          I N I T I A L I Z A T I O N            - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        ENTRY  DYLOFF\n         SPACE 1\nDYLOFF  $XENT  BASE=(R11,R12),ID=<ON/OFF>,LV=WKLEN,TYPE=RENT\n         LR    R10,R13\n         USING WKAREA,R10\n         LA    R2,18*4(R10)\n         L     R3,=A(WKLEN-(18*4))\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         MVC   EXTR(EXTRLEN),EXTRP\n         LR    R2,R1               GET ENTRY REGISTER\n         USING CPPL,R2             SET CPPL ADDRESSABILITY\n         XC    ATIOT(L'ATIOT+L'ATSO+L'APSCB),ATIOT\n        EXTRACT ATIOT,'S',FIELDS=(TIOT,TSO,PSB),MF=(E,EXTR)\n         ICM   R1,B'1111',APSCB    PSCB ADDRESS\n         BZ    NOTTSO              WE ARE NOT IN TSO\n         USING PSCB,R1\n         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS ?\n         BNE   *+L'*+10            NO\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS ?\n         BE    CMDOK               YES, TSO COMMAND\n         LR    R1,R2\n         USING IKJEBECA,R1\n         L     R2,CAPTTMP          CPPL ADDRESS\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS ?\n         BNE   NOTCMD              NO, NOT TSO SUB-COMMAND\nCMDOK    ST    R2,CPPLADDR\n         DROP  R2\n         LA    R1,MXSTN            TANKS INITIALIZATION\n         CVD   R1,WORKD\n         MVC   TANKMX(L'TANKMX),WORKD+L'WORKD-L'TANKMX\n         ZAP   TANKNO,=PL1'+0'\n         STM   R11,R12,OLDPICA+4   ABEND INITIALIZATION\n         MVC   ESPLST(ESPLSTL),ESPLSTP\n        ESPIE  SET,,,PARAM=(R10),MF=(E,ESPLST)\n         ST    R1,OLDPICA\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - -            M A I N     P R O C E S S            - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         LR    R1,R10\n         AL    R1,=A(DRBTP)\n         ST    R1,ALRBTP\n         L     R0,=A(LRBTP)\n         ST    R0,ALRBTP+4\n         ALR   R1,R0\n         ST    R1,ALRBTP+8\n         LR    R1,R10\n         AL    R1,=A(DRBTU)\n         ST    R1,ALRBTU\n         L     R0,=A(LRBTU)\n         ST    R0,ALRBTU+4\n         ALR   R1,R0\n         ST    R1,ALRBTU+8\n         LR    R1,R10\n         AL    R1,=A(DTBDS)\n         ST    R1,ATBDS\n         MVC   AOSNME,=CL8' '\n         MVC   IDVNME,=CL8' '\n         MVC   DDTNME,=CL8' '\n         MVC   ALTNME,=CL8' '\n         MVC   ACSNME,=CL8' '\n         MVC   ESM(ESML),ESMP\n         MVC   RPM(RPML),RPMP\n         L     R2,CVTPTR           CVT ADDRESS\n         USING CVTMAP,R2\n         L     R2,CVTTCBP          TCB-TCB ADDRESSES (TCBHEAD)\n         DROP  R2\n         MVC   ATCB(L'ATCB),4(R2)  SET CURRENT TCB ADDRESS\n         SPACE 1\n*------- GET CURRENT USER-ID, GROUP, USER AND TERMINAL-ID\n         SPACE 1\n         MVC   USID,=CL8' '\n         MVI   USIDL,0\n         MVC   GRNM,=CL8' '\n         MVC   GRNML,0\n         MVI   UNME,C' '\n         MVC   UNME+1(L'UNME-1),UNME\n         MVI   UNMEL,0\n         MVI   TRSN,C' '\n         MVC   TRSN+1(L'TRSN-1),TRSN\n         MVI   TRSNL,0\n        RACSTAT ,\n         LTR   R15,R15\n         BZ    RCFACT\n         L     R2,APSCB            PSCB POINTER\n         USING PSCB,R2\n         MVC   USID(L'PSCBUSER),PSCBUSER\n         MVC   USIDL,PSCBUSRL\n         DROP  R2\n         USING PSA,R0\n         L     R1,PSAAOLD\n         DROP  R0\n         USING ASCB,R1\n         L     R2,ASCBTSB          TSB POINTER\n         DROP  R1\n         LTR   R2,R2\n         BP    *+L'*+10\n         MVC   TRSN,=CL8'B-GROUND'\n         B     FLLNMS\n        MODESET MF=(E,ESM)         ENTER SUPERVISOR MODE\n         USING TSB,R2\n         MVC   GRNM(L'TSBSF1),TSBSF1\n         MVC   TRSN,TSBTRMID\n         DROP  R2\n        MODESET MF=(E,RPM)         RE-ENTER PROBLEM MODE\n         LA    R0,L'GRNM\n         LA    R2,GRNM+L'GRNM-1\n         CLI   0(R2),C' '\n         BNE   *+L'*+6\n         BCTR  R2,0\n         BCT   R0,*-10\n         STC   R0,GRNML\n         B     FLLNMS\n         USING PSA,R0\nRCFACT   L     R1,PSAAOLD\n         DROP  R0\n         USING ASCB,R1\n         L     R2,ASCBASXB\n         DROP  R1\n         USING ASXB,R2\n         L     R1,ASXBSENV\n         DROP  R2\n         USING ACEE,R1\n         MVC   USID,ACEEUSRI       GET USER ID\n         MVC   USIDL,ACEEUSRL      GET USER ID LENGTH\n         MVC   GRNM,ACEEGRPN       GET GROUP NAME\n         MVC   GRNML,ACEEGRPL      GET GROUP NAME LENGTH\n         ICM   R2,B'1111',ACEEUNAM POINTER TO USER NAME\n         BZ    GTTRID\n         XR    R3,R3\n         IC    R3,0(R2)\n         LTR   R3,R3\n         BNP   GTTRID\n         BCT   R3,*+L'*+4\n         B     GTTRID\n         BCT   R3,*+L'*+6\n         MVC   UNME(*-*),1(R2)\n         EX    R3,*-6\nGTTRID   MVC   TRSN,ACEETRID       GET TERMINAL-ID NAME\nFLLNMS   LA    R0,L'UNME\n         LA    R2,UNME+L'UNME-1\n         CLI   0(R2),C' '\n         BNE   *+L'*+6\n         BCTR  R2,0\n         BCT   R0,*-10\n         STC   R0,UNMEL\n         LA    R0,L'TRSN\n         LA    R2,TRSN+L'TRSN-1\n         CLI   0(R2),C' '\n         BNE   *+L'*+6\n         BCTR  R2,0\n         BCT   R0,*-10\n         STC   R0,TRSNL\n         DROP  R1\n         SPACE 1\n*------- GET PROCEDURE/FOREGROUND OR STEP/BACKGROUND NAME (TIOT)\n         SPACE 1\n         L     R1,ATIOT            TIOT POINTER\n         USING TIODSECT,R1\n         MVC   PNME,TIOCSTEP\n         DROP  R1\n         LA    R0,L'PNME\n         LA    R1,PNME+L'PNME-1\n         CLI   0(R1),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R0,*-10\n         STC   R0,PNMEL\n         SPACE 1\n*------- GET CURRENT PREFIX IF ANY (UPT)\n         SPACE 1\n         L     R2,CPPLADDR\n         USING CPPL,R2             SET CPPL ADDRESSABILITY\n         L     R3,CPPLUPT          UPT ADDRESS\n         DROP  R2\n         MVI   PRFXL,0\n         MVI   PRFX,C' '\n         MVC   PRFX+1(L'PRFX-1),PRFX\n         USING UPT,R3\n         XR    R1,R1\n         IC    R1,UPTPREFL\n         LTR   R1,R1\n         BNP   GINFT1\n         STC   R1,PRFXL            GET PREFIX LENGTH\n         BCT   R1,*+L'*+6\n         MVC   PRFX(*-*),UPTPREFX  <<EXECUTED>>\n         EX    R1,*-6              GET PREFIX\n         DROP  R3\n         CLC   PRFX,USID           IS PREFIX IDENTICAL TO USER-ID ?\n         BE    *+L'*+10            YES\n         CLC   PRFX,GRNM           NO, IS PREFIX IDENTICAL TO GROUP ?\n         BNE   GINFT1              NO, OK\n         MVI   PRFXL,0             YES, RESET IT\n         MVI   PRFX,C' '\n         MVC   PRFX+1(L'PRFX-1),PRFX\n         SPACE 1\n*------- GET INFO'S ABOUT THE TERMINAL\n         SPACE 1\n         USING PSA,R0\nGINFT1   L     R3,PSAAOLD\n         DROP  R0\n         USING ASCB,R3\n         L     R2,ASCBTSB\n         LTR   R2,R2\n         BP    *+L'*+8\n         OI    SWPRCS,BCKGR        SET BACKGROUND RUNNING\n         B     PCREQ\n         LA    R4,PCREQ            SET WHERE TO GO\n        MODESET MF=(E,ESM)         ENTER SUPERVISOR MODE\n         USING TSB,R2\n         CLM   R3,B'0111',TSBASCB\n         BE    *+L'*+8\n         LA    R4,GINFT3           SOMETHING IS WRONG\n         B     GINFT2\n         TM    TSBSTAT,TSBDSPLY\n         BO    *+L'*+8             IT IS A SCREEN TERMINAL\n         DROP  R2,R3\n         LA    R4,PCREQ            NOT SCREEN TREMINAL\n         B     GINFT2\n         OI    SWSTTS,TDSPLY       IT IS A SCREEN TERMINAL\nGINFT2  MODESET MF=(E,RPM)         RE-ENTER PROBLEM MODE\n         BR    R4\nGINFT3   OI    SWPRCS,TABPERR      TSB -> ASCB BACK POINTER ERROR\n         SPACE 1\n*------- PROCESS COMMAND REQUESTS\n         SPACE 1\nPCREQ   @CALL  PCOPN               GO PROCESS COMMAND OPERANDS\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   QUIT                ERROR(S) DETECTED\n         SPACE 1\n*------- SET GENERAL REQUESTS\n         SPACE 1\n        @IFKW  LIST,S,ELSE=TTRC\n         OI    SWSTTS,MSGLST       SAY MESSAGES LIST\n         TM    SWPRCS,BCKGR        BACKGROUND RUNNING ?\n         BZ    STGRQ1              NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(28),=CL28'BACKGROUND EXECUTION RUNNING'\n         LA    R1,WKLINE\n         LA    R0,38\n        @CALL  PUTLNE\n         B     TTRC\nSTGRQ1   TM    SWPRCS,TABPERR      TSB POINTER ERROR ?\n         BZ    STGRQ2              NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(30),=CL30'TSB -> ASCB BACK POINTER ERROR'\n         LA    R1,WKLINE\n         LA    R0,40\n        @CALL  PUTLNE\n         B     TTRC\nSTGRQ2   TM    SWSTTS,TDSPLY       IS IT A SCREEN TERMINAL ?\n         BO    TTRC                YES\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(28),=CL28'THE TERMINAL IS NOT A SCREEN'\n         LA    R1,WKLINE\n         LA    R0,38\n        @CALL  PUTLNE\nTTRC     TM    SWSTTS,WIZARD\n         BZ    GODORP\n        @IFKW  DSAB,N,ELSE=STFRC\n         OI    SWSTTS,TRDSAB       SAY TRACE DSABRS01/DSABOPCT\nSTFRC   @IFKW  TYPE,U,GOTO=GODORP\n        @IFKW  TYPE,N,GOTO=STFRCL\n         TM    SWSTTS,TDSPLY       IS IT A SCREEN TERMINAL ?\n         BO    GODORP              YES\n         OI    SWSTTS,TDSPLY       SET SCREEN TERMINAL\n         TM    SWSTTS,MSGLST       MESSAGES SUPPRESSED ?\n         BZ    GODORP              YES\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(24),=CL24'TERMINAL = SCREEN FORCED'\n         LA    R1,WKLINE\n         LA    R0,34\n        @CALL  PUTLNE\n         B     GODORP\nSTFRCL   TM    SWSTTS,TDSPLY       IS IT A SCREEN TERMINAL ?\n         BZ    GODORP              NO\n         NI    SWSTTS,255-TDSPLY   SET LINE TERMINAL\n         TM    SWSTTS,MSGLST       MESSAGES SUPPRESSED ?\n         BZ    GODORP              YES\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(22),=CL22'TERMINAL = LINE FORCED'\n         LA    R1,WKLINE\n         LA    R0,32\n        @CALL  PUTLNE\n         SPACE 1\n*------- GO DO REQUESTED PROCESS\n         SPACE 1\nGODORP   TM    SWPRCS,PROFF        OFF PROCESS ?\n         BO    XQOFF               YES\n         EJECT\n*-------------------------------------------------------------------*\n*                                                                   *\n*                   OOOOOOOOOO      NN        NN                    *\n*                  OOOOOOOOOOOO     NNN       NN                    *\n*                  OO        OO     NNNN      NN                    *\n*                  OO        OO     NN NN     NN                    *\n*                  OO        OO     NN  NN    NN                    *\n*                  OO        OO     NN   NN   NN                    *\n*                  OO        OO     NN    NN  NN                    *\n*                  OO        OO     NN     NN NN                    *\n*                  OO        OO     NN      NNNN                    *\n*                  OO        OO     NN       NNN                    *\n*                  OOOOOOOOOOOO     NN        NN                    *\n*                   OOOOOOOOOO      NN        NN                    *\n*                                                                   *\n*-------------------------------------------------------------------*\n         SPACE 1\n*------- DO SPECIFIC PROCESS INITIALIZATION\n         SPACE 1\n        @CALL  INITT               GO DO IT\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   QUIT                FAILED\n*------- GO DO USER'S SELECTION(S) AND/OR DEFAULTS\n         SPACE 1\n        @CALL  USRDS               GO DO IT\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   TERR                ERROR\n         SPACE 1\n*------- DO DD-NAME'S LIBRARIES PROCESS\n         SPACE 1\n         L     R5,ALIBCIT\n         USING LIBCITD,R5\nSCPRL    LA    R2,LIBNDS\n         LR    R3,R2\n         USING LIB#DS,R3\nSCPRN    CLC   LIB#DSSA,=AL4(LIB#DSF$) END OF LIST ?\n         BE    SCPRS               YES\n         XC    WDSI,WDSI           ELSE CHECK IF NEEDED\n         OC    WDSI,LIB#DSI\n         BZ    SCPRX               IF ZERO, ALWAYS\n         NC    WDSI,XDSI\n         BNZ   SCPRX               IF NON-ZERO, MATCH SPECIFIED\n         LA    R3,LIB#LDS(R3)\n         B     SCPRN\nSCPRX    LA    R3,LIB#LDS(R3)\n         CLC   LIB#DSSA,=AL4(LIB#DSF$) POSITION TO END OF LIST\n         BNE   *-10\n         DROP  R3\n         MVC   WDDN,LIBDDN         SET DD-NAME INFORMATION\n         MVC   WLID,LIBLID\n         MVC   WORG,LIBORG\n         MVC   WRFM,LIBRFM\n         MVC   WLRL,LIBLRL\n         DROP  R5\n         LA    R1,L'WDDN\n         LA    R15,WDDN+L'WDDN-1\n         CLI   0(R15),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R15,*-10\n         STH   R1,WLDD\n        @CALL  DDNDS               CONCATENATE DATA-SETS\n         CH    R15,=H'4'           COMPLETION ?\n         BNH   SCPRS               OK OR NONE\n         OI    SWPRCS,ERREXR       ERROR\n         TM    SWPRCS,ABTEXR       ABORT REQUESTED ?\n         BO    XRTRN               YES\nSCPRS    LA    R3,L'LIB#DSF$(R3)\n         CL    R3,ALIBCITE\n         BNL   XRTRN\n         LR    R5,R3\n         B     SCPRL\n         EJECT\n*-------------------------------------------------------------------*\n*                                                                   *\n*           OOOOOOOOOO      FFFFFFFFFFFF     FFFFFFFFFFFF           *\n*          OOOOOOOOOOOO     FFFFFFFFFFFF     FFFFFFFFFFFF           *\n*          OO        OO     FF               FF                     *\n*          OO        OO     FF               FF                     *\n*          OO        OO     FF               FF                     *\n*          OO        OO     FFFFFFFF         FFFFFFFF               *\n*          OO        OO     FFFFFFFF         FFFFFFFF               *\n*          OO        OO     FF               FF                     *\n*          OO        OO     FF               FF                     *\n*          OO        OO     FF               FF                     *\n*          OOOOOOOOOOOO     FF               FF                     *\n*           OOOOOOOOOO      FF               FF                     *\n*                                                                   *\n*-------------------------------------------------------------------*\n         SPACE 1\n*------- OFF : DD-NAME'S LIBRARIES PROCESS\n         SPACE 1\nXQOFF   @CALL  DDOPEN              CHECK IF ANY DATA-SET IS OPENED\n         CH    R15,=H'4'           COMPLETION ?\n         BH    QUIT                8 = STOP\n         BE    XRTRN               4 = NONE\nANPRL    L     R2,ATCB             0 = OK, GET TCB ADDRESS\n         USING TCB,R2\n         L     R2,TCBJSCB          JOB STEP CONTROL BLOCK ADDRESS\n         DROP  R2\n         USING IEZJSCB,R2\n         L     R2,JSCDSABQ         GET ADDRESS OF QDB FOR DSAB CHAIN\n         DROP  R2\n         USING QDB,R2\n         CLC   QDBNELMS,=XL4'0'    NO DATA-SETS ?\n         BE    XRTRN               YES, LET'S GO (NOTHING TO DO)\n         L     R2,QDBFELMP         GET ADDRESS OF FIRST DSAB\n         DROP  R2\n         USING DSAB,R2\nANPRI    TM    DSABFLG1,DSABDALC   DATA-SET DYNAMICALLY ALLOCATED ?\n         BO    ANPRT               YES\n         TM    DSABRS01,OWNDYLO    NO, IS IT MY ALLOCATION ?\n         BZ    ANPRT               NO\n         TM    DSABRS01,TSODYLO    IS IT A TSO BASIC ?\n         BO    ANPRT               YES\n         OC    TDSI,TDSI           NO, SYSTEM PRESERVE ?\n         BNZ   ANPRA               NO\n         TM    DSABRS01,SYSDYLO    YES, IS IT SYSTEM ?\n         BZ    ANPRA               NO\nANPRT    ICM   R2,B'1111',DSABFCHN GET NEXT DSAB ENTRY\n         BZ    XRTRN               END OF CHAIN\n         B     ANPRI               OTHERWISE KEEP LOOKING\nANPRA    L     R3,DSABTIOT         POINT TO TIOT\n         USING TIOELNGH,R3\n         MVC   WDDN,TIOEDDNM       SET DD-NAME INFORMATION\n         DROP  R2,R3\n         LA    R1,L'WDDN\n         LA    R15,WDDN+L'WDDN-1\n         CLI   0(R15),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R15,*-10\n         STH   R1,WLDD\n        @CALL  DDFREE              FREE DATA-SET(S) AND DD\n         CH    R15,=H'4'           COMPLETION ?\n         BL    ANPRL               0 = OK\n         BH    QUIT                8 = STOP\n         OI    SWPRCS,ERREXR       4 = ERROR\n         B     ANPRL\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - -              T E R M I N A T I O N              - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- DO COMMAND(S) STACK\n         SPACE 1\nXRTRN    TM    SWPRCS,ERREXR       ERROR(S) DETECTED ?\n         BO    QUIT                YES\n         XR    R2,R2               NO, OK, SET RC=0\n         CLI   STCMDL,1            SUCCESSFUL, ANY COMMAND(S) ?\n         BL    LEAVE               NO\n         BH    STCKI               YES\n         CLI   STCMDT,C'*'         IS IT AN AUTOMATIC REQUEST ?\n         BE    *+L'*+8             YES\n         CLI   STCMDT,C'?'         IS IT ON TERMINAL REQUEST ?\n         BNE   STCKI               NO\n        @CALL  GCMDS               YES\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   QUIT                ERROR DETECTED\n         CLI   STCMDL,0            ANY COMMAND(S) ?\n         BE    LEAVE               NO\nSTCKI    MVC   GTMN(GTMNLEN),GTMNP STACK COMMAND(S)\n         LA    R3,LSDLEN\n         ST    R3,REQSP78          LSD SPACE\n         XR    R1,R1\n         IC    R1,STCMDL\n         LA    R5,4(R1)\n         LA    R3,STCMDT\nSTCKL    CLI   0(R3),C';'          COMMAND(S) SEPARATOR ?\n         BE    STCKN               YES\nSTCKX    BCT   R1,*+L'*+4          NO, CONTINUE\n         B     STCKE\n         LA    R3,1(R3)\n         B     STCKL\nSTCKN    BCT   R1,*+L'*+8\n         MVI   0(R3),C' '          CANCEL IT IF LAST CHARACTER\n         B     STCKE\n         LR    R4,R3\n         LA    R3,1(R3)\n         CLI   0(R3),C';'          ANOTHER COMMAND(S) SEPARATOR ?\n         BNE   *+L'*+8             NO\n         MVI   0(R4),C' '          YES, CANCEL THE PREVIOUS\n         B     STCKN\n         LA    R5,3(R5)            ADD A DESC. WORD LENGTH\n         B     STCKX\nSTCKE    LA    R3,7(R5)\n         SRL   R3,3\n         SLL   R3,3\n         ST    R3,REQSP78+4\n         OI    REQSP78+4,X'80'     IN-STORAGE LIST SPACE\n         XC    WORKD,WORKD\n        GETMAIN LU,LA=REQSP78,A=WORKD,SP=78,LOC=BELOW,MF=(E,GTMN)\n         LM    R3,R4,WORKD\n         XC    0(LSDLEN,R3),0(R3)  CLEAR LSD TO ZEROS\n         USING LSD,R3\n         ST    R4,LSDADATA         ADDRESS OF IN-STORAGE LIST\n         STH   R5,LSDTOTLN         LENGTH OF IN-STORAGE LIST\n         ST    R4,LSDANEXT         POINTER TO NEXT RECORD\n         DROP  R3\n         XR    R0,R0\n         IC    R0,STCMDL\n         LA    R3,STCMDT\nSTCKC    LR    R5,R3\n         LA    R1,4                DESCRIPTOR WORD LENGTH\nSTCKS    CLI   0(R3),C';'          COMMAND(S) SEPARATOR ?\n         BE    STCKM               YES\n         LA    R1,1(R1)            NO, CONTINUE SCAN\n         LA    R3,1(R3)\n         BCT   R0,STCKS\n         LA    R0,1\nSTCKM    SLL   R1,16\n         STCM  R1,B'1111',0(R4)    IN-STORAGE DESCRIPTOR WORD\n         SRL   R1,16\n         SH    R1,=H'4'\n         BCT   R1,*+L'*+6\n         MVC   4(*-*,R4),0(R5)     <<EXECUTED>>\n         EX    R1,*-6\n         LA    R4,5(R4,R1)\n         LA    R3,1(R3)\n         BCT   R0,STCKC\n         L     R5,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R5\n         L     R3,CPPLUPT          UPT ADDRESS\n         L     R4,CPPLECT          ECT ADDRESS\n         DROP  R5\n         L     R5,WORKD            LSD ADDRESS\n         XC    ECBX,ECBX           CLEAR ECB TO ZEROS\n         XC    STPBX(STPBLEN),STPBX CLEAR SLIST TO ZEROS\n         XC    IOPLX(IOPLLEN),IOPLX CLEAR PARM LIST TO ZEROS\n         LA    R1,IOPLX            ADDRESS OF LIST\n        STACK  PARM=STPBX,UPT=(R3),ECT=(R4),ECB=ECBX,                  X\n               STORAGE=((R5),PROCN),MF=(E,(1))\n         LTR   R15,R15             HOW STACK COMPLETED ?\n         BZ    LEAVE               OK\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(29),=CL29'STACK COMMAND(S) FAILED (R15='\n         ST    R15,WORKD\n         UNPK  WKLINE+39(9),WORKD(5)\n         NC    WKLINE+39(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+39(8),HXTB\n         MVI   WKLINE+47,C')'\n         LA    R1,WKLINE\n         LA    R0,48\n        @CALL  PUTLNE              TELL USER OF ERROR\nLEAVE   ESPIE  RESET,OLDPICA\nXBACK    ICM   R1,B'1111',AWK\n         BNP   SOLONG\n         L     R15,ASRVC\n        @CALL  ,\nSOLONG   MVI   INOPR,INOPRE        FINAL\n        @CALL  PTLDS\n         L     R0,MXLCIT\n         A     R0,MXALUS\n         A     R0,MXALGR\n         BNP   TLSRC\n         L     R1,ALIBCIT\n        FREEMAIN R,LV=(0),A=(1)\nTLSRC    TM    SWSTTS,RCLSTX       RC DISPLAY ?\n         BZ    BYE                 NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(20),=CL20'COMPLETION CODE =   '\n         STC   R2,WKLINE+28\n         OI    WKLINE+28,C'0'\n         LA    R1,WKLINE\n         LA    R0,30\n        @CALL  PUTLNE\nBYE     $XRET  CC=(R2),LV=WKLEN,TYPE=RENT\n         SPACE 1\n*------- ERROR(S) DETECTED\n         SPACE 1\nNOTCMD   L     R1,ATSO             TSO-FLAG ADDRESS\n         TM    0(R1),X'80'\n         BZ    *+L'*+8\n         LA    R2,TPTMSG           TSO FOREGROUND, USE TPUT\n         B     *+L'*+4\n         LA    R2,WTOMSG           TSO BACKGROUND, USE WTO\n         LA    R1,MSGERR\n         B     SNDMSG\nNOTTSO   LA    R1,MSGTSO\n         LA    R2,WTOMSG           USE WTO\nSNDMSG   MVC   MSGWORK(PWTOL),PWTO\n         MVC   MSGWORK+4(L'MSID),MSID\n         MVC   MSGWORK+14(31),0(R1)\n         BR    R2\nWTOMSG  WTO    MF=(E,MSGWORK)\n         B     XCERR\nTPTMSG   LH    R0,MSGWORK          TSO FOREGROUND\n         SH    R0,=H'4'\n         LA    R1,MSGWORK+4\n        TPUT   (1),(0)\nXCERR    LA    R2,8                SET RC=8\n         B     BYE\nSTOVER   XR    R2,R2\n         B     STUNDER+L'STUNDER\nSTUNDER  BASR  R2,0\n         LR    R13,R10             BACK TO FIRST S.A.\n         ZAP   TANKNO,=PL1'+0'\n         LH    R6,NTBDS\n         LTR   R6,R6               ANY DATA-SETS ALLOCATED\n         BNP   SKIPF               NO\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n        @CALL  FREEDS              YES\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\nSKIPF    MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(17),=CL17'SAVE AREA''S TANK '\n         LTR   R2,R2\n         BNZ   *+L'*+10\n         MVC   WKLINE+27(33),=CL33'OVERFLOW (CHECK VALUE OF \"MXSTN\")'\n         B     *+L'*+6\n         MVC   WKLINE+27(33),=CL33'UNDERFLOW *** S C R A M B L E ***'\n         LA    R1,WKLINE\n         LA    R0,60\n        @CALL  PUTLNE\n         B     QUIT\nTERR     MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(17),=CL17'OPERANDS CONFLICT'\n         MVC   WKLINE+27(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,58\n        @CALL  PUTLNE\nQUIT    ESPIE  RESET,OLDPICA\nXSTDL    LA    R2,8                YES, SET RC=8\n         L     R5,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R5\n         L     R3,CPPLUPT          UPT ADDRESS\n         L     R4,CPPLECT          ECT ADDRESS\n         DROP  R5\n         XC    ECBX,ECBX           CLEAR ECB TO ZEROS\n         XC    STPBX(STPBLEN),STPBX CLEAR SLIST TO ZEROS\n         XC    IOPLX(IOPLLEN),IOPLX CLEAR PARM LIST TO ZEROS\n         LA    R1,IOPLX            ADDRESS OF LIST\n        STACK  PARM=STPBX,UPT=(R3),ECT=(R4),ECB=ECBX,                  X\n               DELETE=ALL,MF=(E,(1))\n        TCLEARQ INPUT\n         MVC   WKLINE(L'MSID),MSID\n         TM    SWPRCS,ABTEXR       ABORT REQUESTED ?\n         BO    *+L'*+10            YES\n         MVC   WKLINE+10(17),=CL17'ERROR(S) DETECTED'\n         B     *+L'*+6\n         MVC   WKLINE+10(17),=CL17'OFF NOW REQUESTED'\n         MVC   WKLINE+27(32),=CL32' - IF ANY COMMAND(S), FLUSH DONE'\n         LA    R1,WKLINE\n         LA    R0,59\n        @CALL  PUTLNE              TELL USER OF ERROR\n         B     XBACK\n         SPACE 1\n*------- FAILURE DETECTED\n         SPACE 1\n         CNOP  0,4\nINTEX   ESPIE  RESET,OLDPICA\n         TM    SWSTTS,DSPPIE       DISPLAY PIE ?\n         BZ    NOPIE               NO\n        @CALL  XPPIE\nNOPIE    MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(30),=CL30'INTERRUPT ||| CALL BIG WIZARD '\n         LA    R1,WKLINE\n         LA    R0,40\n        @CALL  PUTLNE              TELL USER OF ERROR\n         B     XSTDL\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - -              S U B R O U T I N E S              - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- CHKDD - CHECK DD-NAME SUBROUTINE\n*              AT ENTRY : DD-NAME TO BE CHECKED IN FIELD 'WDDN'\n*              R0  : WORK REGISTER\n*              R1  : TIOT POINTER\n*              R14 : LINK REGISTER - RETURN +0 = NOT FOUND\n*                                           +4 = FOUND\n*              AT EXIT : IF DD-NAME FOUND, R1 POINTS TO TIOT DD-ENTRY\n         SPACE 1\nCHKDD    XR    R0,R0\n         L     R1,ATIOT            START TIOT POINTER\n         USING TIODSECT,R1\nCHKDDL   CLC   TIOELNGH(4),=XL4'0' END OF TIOT ?\n         BER   R14                 YES, RETURN+0 (NOT FOUND)\n         CLC   TIOEDDNM(L'TIOEDDNM),WDDN DDNAME MATCH ?\n         BE    4(R14)              YES, RETURN+4 (FOUND)\n         IC    R0,TIOELNGH         LENGTH OF CURRENT DD-ENTRY\n         ALR   R1,R0               NEXT DD-ENTRY IN TIOT\n         B     CHKDDL\n         DROP  R1\n         SPACE 1\n*------- BDDSN - BUILD A DS-NAME SUBROUTINE\n*              R0  : WORK REGISTER\n*              R1  : WORK REGISTER\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R14 : LINK REGISTER / RETURN +0 = ERROR\n*                                           +4 = NONE\n*                                           +8 = OK\n*              R15 : WORK REGISTER\n*              AT EXIT : IF ALL OK, FIELD 'WDSN' = DS-NAME AND\n*                                   FIELD 'WLDS' = LENGTH OF DS-NAME\n*                        IF ERROR, A MESSAGE IS SENDED IF REQUESTED\n         SPACE 1\n         USING LIB#DS,R2\nBDDSN    CLC   LIB#DSSA,=AL4(LIB#DSF$) END OF LIST ?\n         BNE   BDDSNX              NO, OK\n         TM    SWSTTS,MSGLST       YES, MESSAGES SUPPRESSED ?\n         BZR   R14                 YES\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R15,WKLINE+L'WDDN+9\n         CLI   0(R15),C' '\n         BNE   *+L'*+4\n         BCT   R15,*-8\n         MVC   1(19,R15),=CL19' HAS NO DATA-SET(S)'\n         LA    R15,20(R15)\n         LA    R1,WKLINE\n         SLR   R15,R1\n         LR    R0,R15\n        @CALL  PUTLNE,GO=YES       TELL USER OF ERROR\nBDDSNX   CLC   LIB#DSN(3),=CL3'<P>'\n         BE    BDDSNP\n         CLC   LIB#DSN(3),=CL3'<U>'\n         BE    BDDSNU\n         CLC   LIB#DSN(3),=CL3'<G>'\n         BE    BDDSNG\n         CLC   LIB#DSN(3),=CL3'<T>'\n         BE    *+L'*+10\n         MVC   WDSN,LIB#DSN\n         B     BDDSNS\n         MVI   WDSN,C' '           BUILD TEMPORARY DS-NAME\n         MVC   WDSN+1(L'WDSN-1),WDSN\n         MVI   WDSN,C'&&'\n         MVC   WDSN+1(L'WDDN),WDDN\n         B     BDDSNS\nBDDSNP   CLI   PRFXL,0             NO PREFIX ?\n         BE    4(R14)              YES, NONE\n         MVC   WDSN(L'PRFX),PRFX   SET PREFIX LEVEL\n         XR    R1,R1\n         IC    R1,PRFXL\n         B     BDDSNM\nBDDSNU   MVC   WDSN(L'USID),USID   SET USER-ID LEVEL\n         XR    R1,R1\n         IC    R1,USIDL\n         B     BDDSNM\nBDDSNG   CLI   GRNML,0             NO GROUP-NAME ?\n         BE    4(R14)              YES, NONE\n         MVC   WDSN(L'GRNM),GRNM   SET GROUP-NAME LEVEL\n         XR    R1,R1\n         IC    R1,GRNML\nBDDSNM   LR    R0,R1\n         LA    R1,WDSN(R1)\n         LA    R15,L'LIB#DSN\n         SR    R15,R0\n         BCT   R15,*+L'*+6\n         MVC   0(*-*,R1),LIB#DSN+3 <<EXECUTED>>\n         EX    R15,*-6\nBDDSNS   LA    R1,L'WDSN\n         LA    R15,WDSN+L'WDSN-1\n         CLI   0(R15),C' '\n         BNE   *+L'*+6\n         BCTR  R1,0\n         BCT   R15,*-10\n         STH   R1,WLDS\n         B     8(R14)\n         DROP  R2\n         SPACE 1\n*------- XDAIR - EXECUTE IKJDAIR-IKJEFF18 SUBROUTINE\n*              R0  : WORK REGISTER\n*              R1  : WORK REGISTER\n*              R14 : LINK REGISTER - RETURN +0 = OK\n*                                           +4 = ERROR\n*              R15 : WORK REGISTER\n         SPACE 1\nXDAIR    ST    R14,SVLINK\n         XC    DAPLECBS,DAPLECBS\n        CALLTSSR EP=IKJDAIR,MF=(E,XDAPL)\n         L     R14,SVLINK\n         LTR   R15,R15             TEST DAIR COMPLETION\n         BZR   R14                 OK\n         TM    SWSTTS,MSGLST       ERROR, MESSAGES SUPPRESSED ?\n         BZ    4(R14)              YES\n         ST    R15,RETC            NO, STORE RETURN CODE\n         LA    R1,XDFDA            PARM. ADDRESS\n         USING DFDSECTD,R1\n         XC    0(DFLEN,R1),0(R1)\n         LA    R15,XDAPL\n         ST    R15,DFDAPLP\n         LA    R15,RETC\n         ST    R15,DFRCP\n         LA    R15,ZERO\n         ST    R15,DFJEFF02\n         LA    R15,DASW\n         ST    R15,DFIDP\n         DROP  R1\n         B     XDFAIL              GO SEND ERROR MESSAGE\n         SPACE 1\n*------- XDYNALL - EXECUTE DYNALLOC-IKJEFF18 SUBROUTINE\n*              R0  : WORK REGISTER\n*              R1  : WORK REGISTER\n*              R14 : LINK REGISTER - RETURN +0 = OK\n*                                           +4 = ERROR\n*              R15 : WORK REGISTER\n         SPACE 1\nXDYNALL  ST    R14,SVLINK\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         LA    R1,RBPS99           LOAD PARAMETER POINTER FOR SVC99\n        DYNALLOC ,                 EXECUTE SVC99\n         ST    R15,RETC            SAVE SVC99 RETURN CODE\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         L     R15,RETC            GET SVC99 RETURN CODE\n         L     R14,SVLINK\n         LTR   R15,R15             CHECK SVC99 RETURN CODE\n         BZR   R14                 OK\n         TM    SWSTTS,MSGLST       ERROR, MESSAGES SUPPRESSED ?\n         BZ    4(R14)              YES\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(12),=CL12'DYNALLOC RC='\n         UNPK  WKLINE+22(9),RETC(5) SET RETURN CODE\n         NC    WKLINE+22(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+22(8),HXTB\n         MVC   WKLINE+30(5),=CL5', EC='\n         LA    R1,RBS99            RB POINTER\n         USING S99RB,R1\n         UNPK  WKLINE+35(5),S99ERROR(3) SET ERROR CODE\n         NC    WKLINE+35(4),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+35(4),HXTB\n         MVC   WKLINE+39(5),=CL5', IC='\n         UNPK  WKLINE+44(5),S99INFO(3) SET INFO CODE\n         NC    WKLINE+44(4),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+44(4),HXTB\n         DROP  R1\n         LA    R1,WKLINE\n         LA    R0,48\n        @CALL  PUTLNE              TELL USER OF ERROR\n         LA    R1,XDFDA            PARM. ADDRESS\n         USING DFDSECTD,R1\n         XC    0(DFLEN,R1),0(R1)\n         LA    R15,RBPS99\n         ST    R15,DFS99RBP\n         LA    R15,RETC\n         ST    R15,DFRCP\n         LA    R15,ZERO\n         ST    R15,DFJEFF02\n         LA    R15,DYSW\n         ST    R15,DFIDP\n         MVC   DFCPPLP,CPPLADDR\n         DROP  R1\nXDFAIL  LINK   EP=IKJEFF18         SEND ERROR MESSAGE\n         LTR   R15,R15             HOW COMPLETED ?\n         BZ    XEXIT               OK\n         ST    R15,WORKD           STORE DAIRFAIL RETURN CODE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(12),=CL12'DAIRFAIL RC='\n         UNPK  WKLINE+22(9),WORKD(5) SET RETURN CODE\n         NC    WKLINE+22(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+22(8),HXTB\n         MVC   WKLINE+30(11),=CL11' (IKJEFF18)'\n         LA    R1,WKLINE\n         LA    R0,41\n        @CALL  PUTLNE              TELL USER OF ERROR\nXEXIT    L     R14,SVLINK\n         B     4(R14)\n         SPACE 1\n*------- MESSAGES SUBROUTINES\n*              R0  : SET TO ADDRESS OF MESSAGE\n*              R1  : SET TO LENGTH OF MESSAGE\n*              R14 : LINK REGISTER - RETURN\n         SPACE 1\nMSGTBN   MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(25),=CL25'DATA-SETS TABLE OVERFLOW '\n         MVC   WKLINE+35(24),=CL24'(CHECK VALUE OF \"MXTBN\")'\n         LA    R1,WKLINE\n         LA    R0,59\n         BR    R14\nMSGRBTP  MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(34),=CL34'TEXT UNITS POINTERS AREA OVERFLOW '\n         MVC   WKLINE+44(25),=CL25'(CHECK VALUE OF \"MXRBTP\")'\n         LA    R1,WKLINE\n         LA    R0,69\n         BR    R14\nMSGRBTU  MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(25),=CL25'TEXT UNITS AREA OVERFLOW '\n         MVC   WKLINE+35(25),=CL25'(CHECK VALUE OF \"MXRBTU\")'\n         LA    R1,WKLINE\n         LA    R0,60\n         BR    R14\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                    D A T A     C O N S T A N T S                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nEXTRP   EXTRACT *-*,'S',MF=L\nEXTRLEN  EQU   *-EXTRP\nESPLSTP ESPIE  SET,ESPEXIT,((1,15)),MF=L\nESPLSTL  EQU   *-ESPLSTP\nESMP    MODESET KEY=ZERO,MODE=SUP,MF=L ENTER SUPERVISOR MODE\nESML     EQU   *-ESMP\nRPMP    MODESET KEY=NZERO,MODE=PROB,MF=L RE-ENTER PROBLEM MODE\nRPML     EQU   *-RPMP\nGTMNP   GETMAIN LU,MF=L\nGTMNLEN  EQU   *-GTMNP\nCAML1   CAMLST NAME,*-*,,*-*\nLCAML1   EQU   *-CAML1\nZERO     DC    F'0'\nDASW     DC    AL2(DFDAIR)\nDYSW     DC    AL2(DFSVC99)\n         SPACE 1\nLSTSCL   DC    CL60'----+----1----+----2----+----3----+----4----+----5-X\n               ---+----6'\n         SPACE 1\n* SKELETON FOR '----+----1----+----2----+----3----+----4-'\n*              '=> DYLO : CAN'T BE INVOKED THROUGH A CALL',\n*              '=> DYLO : WRONG ENVIRONMENT (TSO COMMAND)'\nPWTO    WTO    '                                         ',            X\n               ROUTCDE=11,DESC=7,MF=L\nPWTOL    EQU   *-PWTO\n         SPACE 1\nA$PL     DC    A(PUTLNE)\nA$DD     DC    A(DIAGDD)\nA$FD     DC    A(FREEDS)\nA$PA     DC    A(PERMAL)\nHXTB     DC    CL16'0123456789ABCDEF'\nMSGERR   DC    CL31'CAN''T BE INVOKED THROUGH A CALL'\nMSGTSO   DC    CL31'WRONG ENVIRONMENT (TSO COMMAND)'\nTANKUP   DC    PL1'+1'\nMSID     DC    CL10'=> DYLO : '\n         SPACE 1\n        LTORG\n         SPACE 1\n*********************************************************************\n*--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ---*\n*---                                                             ---*\n*---        END OF R11-R12 BASE REGISTERS ADDRESSABILITY         ---*\n*---                                                             ---*\n*--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ---*\n*********************************************************************\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - -        G E N E R A L     R O U T I N E S        - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- PUTLNE - PUTLINE ROUTINE\n*              R0  : MESSAGE TEXT LENGTH\n*              R1  : POINTS TO THE MESSAGE TEXT\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE = 0 (ALWAYS)\n         SPACE 1\nPUTLNE  @ENTER ,\n         LTR   R0,R0\n         BNP   PUTLNEX\n         LA    R2,L'MSGOUT\n         CLR   R0,R2\n         BNL   *+L'*+2\n         LR    R2,R0\n         MVI   MSGOUT,C' '         CLEAR BUFFER TO SPACES\n         MVC   MSGOUT+1(L'MSGOUT-1),MSGOUT\n         BCT   R2,*+L'*+6\n         MVC   MSGOUT(*-*),0(R1)   <<EXECUTED>>\n         EX    R2,*-6\n         XC    MSGCNTL,MSGCNTL     SET IN PUTLINE LINE LENGTH\n         LA    R2,L'MSGCNTL+1(R2)\n         STH   R2,MSGCNTL\n         LA    R5,MSGWORK          ADDRESS OF MSG BUFFER\n         L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         L     R3,CPPLUPT          UPT ADDRESS\n         L     R4,CPPLECT          ECT ADDRESS\n         DROP  R2\n         XC    ECBX,ECBX           CLEAR ECB TO ZEROS\n         XC    PTPBX(PTPBLEN),PTPBX CLEAR PLIST TO ZEROS\n         XC    IOPLX(IOPLLEN),IOPLX CLEAR PARM LIST TO ZEROS\n         LA    R1,IOPLX            ADDRESS OF LIST\n        PUTLINE PARM=PTPBX,UPT=(R3),ECT=(R4),ECB=ECBX,                 X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               OUTPUT=((R5),TERM,SINGLE,DATA),                         X\n               MF=(E,(1))\nPUTLNEX  XR    R15,R15             SET RC=0\n        @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- GETLNE - GETLINE ROUTINE\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE :\n*                    0 = NORMAL, THE INPUT TEXT INFORMATION (\"GTLITI\")\n*                        IS SET AS BELOW (2-WORDS) :\n*                        +0 = START ADDRESS OF TEXT\n*                        +4 = LENGTH OF TEXT\n*                    4 = NONE, \"GTLITI\" : +0 = GETLINE RC (4)\n*                                       : +4 = ALL X'0'S\n*                    8 = GET ... ERROR, \"GTLITI\" : +0 = GETLINE RC\n*                                                : +4 = ALL X'0'S\n         SPACE 1\nGETLNE  @ENTER ,\n         L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         L     R3,CPPLUPT          UPT ADDRESS\n         L     R4,CPPLECT          ECT ADDRESS\n         DROP  R2\n         XC    GTLITI(2*L'GTLITI),GTLITI ZERO'S TEXT INFORMATION\n         XC    ECBX,ECBX           CLEAR ECB TO ZEROS\n         XC    GTPBX(GTPBLEN),GTPBX CLEAR GET PARMLIST TO ZEROS\n         XC    IOPLX(IOPLLEN),IOPLX CLEAR PARM LIST TO ZEROS\n         LA    R1,IOPLX            ADDRESS OF LIST\n        GETLINE PARM=GTPBX,UPT=(R3),ECT=(R4),ECB=ECBX,                 X\n               TERMGET=(EDIT,WAIT),                                    X\n               INPUT=(TERM,LOGICAL),                                   X\n               MF=(E,(1))\n         ST    R15,GTLITI          SET GETLINE RC\n         CH    R15,=H'4'           HOW COMPLETE ?\n         BNH   *+L'*+8             SUCCESSFULLY ...\n         LA    R15,8               SET RC=8 (GET...ERROR)\n         B     GETLNEX\n         LA    R2,GTPBX            ADDRESSABILITY FOR THE GTPB\n         USING GTPB,R2\n         L     R1,GTPBIBUF         GET ADDRESS OF INPUT BUFFER\n         DROP  R2\n         LH    R4,0(R1)            BUFFER LENGTH\n         SH    R4,=H'4'            PREFIX LENGTH\n         LH    R2,2(R1)            OFFSET TO FIRST OPERAND\n         SR    R4,R2               OPERANDS LENGTH\n         BP    *+L'*+8\n         LA    R15,4               SET RC=4 (NONE)\n         B     GETLNEX\n         LA    R3,4(R1,R2)         START ADDRESS OF OPERANDS\n         STM   R3,R4,GTLITI        SET INPUT TEXT INFORMATION\n         XR    R15,R15             SET RC=0\nGETLNEX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- DDNDS - CONCATENATE DATA-SETS TO DD-NAME ROUTINE\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R5  : 'LIBCIT' TABLE ENTRY POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = NONE\n*                                                  8 = ERROR\n*              AT EXIT : IF ALL OK, CONCATENATION IS DONE\n*                        IF ERROR, NONE DONE RESULTS\n         SPACE 1\nDDNDS   @ENTER ,\n         LR    R1,R2\n         MVI   STFLGS,OWNDYLO      PREPARE DSAB-FLAGS TO BE SET\n         XC    WDSI,WDSI\n         USING LIB#DS,R1\n         OC    WDSI,LIB#DSI\n         LA    R1,LIB#LDS(R1)\n         CLC   LIB#DSSA,=AL4(LIB#DSF$) END OF LIST ?\n         BNE   *-16                NO\n         DROP  R1\n         OC    WDSI,WDSI\n         BNZ   *+L'*+8\n         OI    STFLGS,TSODYLO\n         B     *+L'*+14\n         NC    WDSI,TDSI\n         BZ    *+L'*+4\n         OI    STFLGS,SYSDYLO\n         USING LIBCITD,R5\n         ICM   R15,B'1111',LIBSPA  SPECIAL PRE-ALL. ROUTINE ?\n         BZ    DDNDSV              NO\n         DROP  R5\n         L     R14,=A(SPRTDD)\n         CLI   0(R14),0\n         BE    DDNDSD\n         CLM   R15,B'1000',0(R14)\n         BE    *+L'*+8\n         LA    R14,L'SPRTDD(R14)\n         B     *-20\n         ICM   R15,B'1111',1(R14)\n        @CALL  ,                   GET IT CONTROL\n         CH    R15,=H'4'           HOW COMPLETED ?\n         BL    DDNDSP              0 = OK, ALREADY ALLOCATED\n         BE    DDNDSN              4 = GO TO ALLOCATE IT\n         B     DDNDS8              8 = ERROR\nDDNDSV   BAS   R14,CHKDD           DD ALREADY ALLOCATED ?\n         B     DDNDSN              +0 = NO\n        @CALL  DIAGDD              +4 = YES, GO DIAGNOSE\n         LTR   R15,R15             HOW COMPLETED ?\n         BNZ   DDNDS8              ERROR\n        @CALL  PERMAL              OK\n         B     DDNDS0\nDDNDSN   XC    NTBDS,NTBDS\n         XC    WBLK,WBLK\n         USING LIB#DS,R2\nDDNDSL   XC    WDSI,WDSI           CHECK IF NEEDED\n         OC    WDSI,LIB#DSI\n         BZ    *+L'*+10            IF ZERO, ALWAYS\n         NC    WDSI,XDSI\n         BZ    DDNDST              IF ZERO, NOT SPECIFIED\n         BAS   R14,BDDSN           BUILD DS-NAME\n         B     DDNDSF              0 = ERROR\n         B     DDNDST              4 = NONE\n        @CALL  CHKDS               8 = OK, CHECK DATA-SET\n         CH    R15,=H'4'           COMPLETION ?\n         BL    DDNDSE              0 = OK\n         BH    DDNDSF              8 = ERROR\n         ICM   R15,B'1111',LIB#DSSA 4 = NOT CATALOGED (NONE)\n         BZ    DDNDSC              NOT SPECIAL ROUTINE\n         L     R14,=A(SPRTDS)\n         CLI   0(R14),0\n         BE    DDNDSD\n         CLM   R15,B'1000',0(R14)\n         BE    *+L'*+8\n         LA    R14,L'SPRTDS(R14)\n         B     *-20\n         ICM   R15,B'1111',1(R14)\n        @CALL  ,                   GET IT CONTROL\n         LTR   R15,R15             HOW COMPLETED ?\n         BZ    DDNDSE              0 = OK, ALLOCATED\n         B     DDNDSF              4 = ERROR\nDDNDSD   MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(17),=CL17'INVALID SP=  (DD='\n         STCM  R15,B'1000',WKLINE+21\n         MVC   WKLINE+27(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+26\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(25,R14),=CL25') : UNEXPECTED ERROR HERE'\n         LA    R14,26(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     DDNDSF\nDDNDSC  @CALL  ALPRC               TRY ALIAS(ES) PROCESS\n         CH    R15,=H'4'           HOW COMPLETED ?\n         BL    DDNDSE              0 = OK\n         BH    DDNDSF              8 = ERROR\n         XR    R15,R15             4 = NONE\n         IC    R15,XTSTFM\n         EX    R15,DDNXTM          IS IT MANDATORY ?\n         BZ    DDNDST              NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(25,R14),=CL25' NOT FOUND, BUT MANDATORY'\n         LA    R14,26(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDDNDSF   OC    NTBDS,NTBDS\n         BZ    DDNDSM\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         LH    R6,NTBDS\n        @CALL  FREEDS              DE-ALLOCATE DATA-SETS IF NEEDED\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         B     DDNDSM\nDDNXTM   TM    LIB#DSF,*-*         <<EXECUTED>>\nDDNDSE   XR    R15,R15\n         IC    R15,XTSTFX\n         EX    R15,DDNXTM          IS IT EXCLUSIVE ?\n         BO    DDNDSB              YES\nDDNDST   LA    R2,LIB#LDS(R2)      ELSE CONTINUE\n         CLC   LIB#DSSA,=AL4(LIB#DSF$) END OF LIST ?\n         BNE   DDNDSL              NO, PROCESS NEXT\n         DROP  R2\n         OC    NTBDS,NTBDS         SOME DATA-SET PRESENT ?\n         BZ    DDNDSW              NO, NONE\nDDNDSB  @CALL  ALLDS               YES, ALLOCATE DATA-SETS\n         LTR   R15,R15             COMPLETION ?\n         BZ    DDNDSA              0 = OK\nDDNDSM   MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(28,R14),=CL28' DATA-SETS ALLOCATION FAILED'\n         LA    R14,29(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     DDNDS8\nDDNDSW   TM    SWSTTS,MSGLST\n         BZ    DDNDS4\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(19,R14),=CL19' NO DATA-SETS FOUND'\n         LA    R14,20(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDDNDS4   LA    R15,4               SET RC=4\n         B     DDNDSX\nDDNDSA  @CALL  COPDS               CONCATENATE PERMANENTLY DATA-SETS\n         LTR   R15,R15             COMPLETION ?\n         BZ    DDNDSP              0 = OK, 4 = ERROR\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(31,R14),=CL31' DATA-SETS CONCATENATION FAILED'\n         LA    R14,32(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDDNDS8   LA    R15,8               SET RC=8\n         B     DDNDSX\nDDNDSP   TM    SWSTTS,MSGLST       OK, LIST SPECIFIED ?\n         BZ    DDNDS0              NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(2,R14),=CL2' ('\n         MVC   3(L'WLID,R14),WLID\n         LA    R14,2+L'WLID(R14)\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(17,R14),=CL17') ALLOCATION DONE'\n         LA    R14,18(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDDNDS0   XR    R15,R15             SET RC=0\nDDNDSX  @EXIT\n         SPACE 1\nSPRTDD   DC    0XL5'0'\n         DC    CL1'C',AL4(PCTRL)\n         DC    CL1'D',AL4(PDMMY)\n         DC    CL1'E',AL4(PEDIT)\n         DC    CL1'T',AL4(PTERM)\n         DC    CL1'W',AL4(PWORK)\n         DC    XL1'0'\nSPRTDS   DC    0XL5'0'\n         DC    CL1'P',AL4(SPROF)\n         DC    XL1'0'\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- CHKDS - CHECK DATA-SET ROUTINE\n*              AT ENTRY : DS-NAME TO BE CHECKED IN FIELD 'WDSN'\n*                         ALL OTHER FIELDS : FROM 'LIBCIT' TABLE\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = NOT CATALOGED\n*                                                  8 = ERROR\n*              AT EXIT : IF ALL OK, ACTIONS BELOW ARE DONE\n*                                   'NTBDS' = 'NTBDS' + 1\n*                                   AND 'TBDS' TABLE ENTRY FILLED\n         SPACE 1\nCHKDS   @ENTER ,\n         OC    NTBDS,NTBDS         ANY PREVIOUS ?\n         BZ    CHKDSS              NO\n         LH    R0,NTBDS            YES, CHECK IF DUPLICATE\n         L     R1,ATBDS\n         USING TBDSECT,R1\nCHKDSD   CLC   TBDSN,WDSN\n         BE    CHKDS0              GO BACK AS OK\n         LA    R1,TBDSLEN(R1)\n         BCT   R0,CHKDSD\n         DROP  R1\nCHKDSS   MVC   CAMLST1(LCAML1),CAML1 LOCATE DATA-SET\n         LA    R1,WDSN\n         ST    R1,CAMLST1+4\n         LA    R1,LOCAREA\n         ST    R1,CAMLST1+12\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(L'LOCAREA-256),LOCAREA+256\n         XR    R4,R4               SWITCH IF DMS RESTORE INVOLVED\n        LOCATE CAMLST1\n         LTR   R15,R15             LOCATED ?\n         BZ    CHKDSL              YES\n         TM    SWSTTS,MSGLST       NO, NOT CATALOGED\n         BZ    CHKDS4\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(14,R14),=CL14' NOT CATALOGED'\n         LA    R14,15(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nCHKDS4   LA    R15,4               SET RC=4\n         B     CHKDSX\nCHKDSL   CLC   LOCAV01,DMSVN       IS IT DMS ARCHIVE VOLUME ?\n         BNE   CHKDSE              NO\n         LH    R1,NTBDS            YES\n         CH    R1,=Y(MXTBN)        DSNAME'S TABLE OVERFLOW ?\n         BL    CHKDSC              NO\nCHKDSB   MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(14,R14),=CL14' ... BREAKDOWN'\n         LA    R14,15(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         BAS   R14,MSGTBN          DATA-SETS TABLE OVERFLOW\n        @CALL  PUTLNE\nCHKDS8   LA    R15,8               SET RC=8\n         B     CHKDSX\nCHKDSC  @CALL  DMSRF               NO, GO TELL DMS TO RESTORE IT\n         LTR   R15,R15             COMPLETION ?\n         BZ    CHKDSO              0 = OK, ALLOCATED, GO DO ALL CHECKS\n         B     CHKDS8              4 = ERROR\nCHKDSE   CLI   LOCAU01+2,X'20'     IS DATA-SET ON DA DEVICE ?\n         BE    CHKDSO              YES, OK\n         TM    SWSTTS,MSGLST       NO\n         BZ    CHKDS8\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(16,R14),=CL16' NOT DA DEVICE ('\n         MVC   17(L'LOCAV01,R14),LOCAV01 LIST VOLSER OF DEVICE\n         MVI   17+L'LOCAV01(R14),C')'\n         LA    R14,19+L'LOCAV01(R14)\nCHKDSP   LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     CHKDS8\nCHKDSO   MVC   CAMLST2(LCAML2),CAML2 OBTAIN FMT-1 DSCB\n         LA    R1,WDSN\n         ST    R1,CAMLST2+4\n         LA    R2,OBTAREA\n         ST    R2,CAMLST2+12\n         LA    R1,OBTVOL\n         ST    R1,CAMLST2+8\n         XC    OBTAREA,OBTAREA\n         MVC   OBTVOL(L'OBTVOL),LOCAV01 MOVE VOLSER FOR OBTAIN\n        OBTAIN CAMLST2\n         LTR   R15,R15             OBTAIN CORRECTLY COMPLETED ?\n         BZ    CHKDSY              YES\n         TM    SWSTTS,MSGLST       NO\n         BZ    CHKDS8\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         CH    R15,=H'4'\n         BE    CHKDSM              BRANCH IF REG 15=4\n         CH    R15,=H'8'\n         BE    CHKDSZ              BRANCH IF REG 15=8\n         MVC   1(19,R14),=CL19' OBTAIN RC=12/16/20'\n         LA    R14,20(R14)\n         B     CHKDSP\nCHKDSM   MVI   1(R14),255\n         MVC   2(21,R14),1(R14)\n         MVC   1(22,R14),=CL22' VOLUME NOT MOUNTED : '\n         LA    R14,22(R14)\n         B     CHKDSV\nCHKDSZ   MVI   1(R14),255\n         MVC   2(22,R14),1(R14)\n         MVC   1(23,R14),=CL23' NOT FOUND ON VOLUME : '\n         LA    R14,23(R14)\nCHKDSV   MVC   1(L'OBTVOL,R14),OBTVOL  MOVE VOLSER TO MSG\n         LA    R14,L'OBTVOL+1(R14)\n         B     CHKDSP\n         USING DS1FMTID,R2\nCHKTORG  TM    DS1DSORG,*-*        <<EXECUTED>>\nCHKDSY   XR    R1,R1\n         IC    R1,WORG\n         EX    R1,CHKTORG          IS IT GOOD DSORG ?\n         BO    CHKDSY1             YES\n         TM    SWSTTS,MSGLST       NO\n         BZ    CHKDS8\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(15,R14),=CL15' MUST BE DSORG='\n         LA    R1,16(R14)\n         LA    R14,18(R14)\n         TM    WORG,DS1DSGPO\n         BZ    *+L'*+10\n         MVC   0(2,R1),=CL2'PO'\n         B     CHKDSP\n         TM    WORG,DS1DSGPS\n         BZ    *+L'*+10\n         MVC   0(2,R1),=CL2'PS'\n         B     CHKDSP\n         TM    WORG,DS1DSGDA\n         BZ    *+L'*+10\n         MVC   0(2,R1),=CL2'DA'\n         B     CHKDSP\n         MVC   0(2,R1),=CL2'??'\n         B     CHKDSP\nCHKTRFM  CLI   WRFM,*-*            <<EXECUTED>>\nCHKDSY1  TM    WORG,DS1DSGDA\n         BO    CHKDSY3\n         XR    R1,R1\n         IC    R1,DS1RECFM\n         LA    R0,DS1RECFU\n         NR    R1,R0\n         EX    R1,CHKTRFM          IS IT GOOD RECFM ?\n         BE    CHKDSY2             YES\n         TM    SWSTTS,MSGLST       NO\n         BZ    CHKDS8\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(15,R14),=CL15' MUST BE RECFM='\n         LA    R1,16(R14)\n         LA    R14,17(R14)\n         CLI   WRFM,DS1RECFV\n         BNE   *+L'*+8\n         MVI   0(R1),C'V'\n         B     CHKDSP\n         CLI   WRFM,DS1RECFF\n         BNE   *+L'*+8\n         MVI   0(R1),C'F'\n         B     CHKDSP\n         CLI   WRFM,DS1RECFU\n         BNE   *+L'*+8\n         MVI   0(R1),C'U'\n         B     CHKDSP\n         MVI   0(R1),C'?'\n         B     CHKDSP\nCHKDSY2  TM    WRFM,DS1RECFU       FIXED OR VARIABLE RECORDS ?\n         BNM   CHKDSY3             NO\n         CLC   DS1LRECL,WLRL       YES, IS IT GOOD LRECL ?\n         BE    CHKDSY3             YES\n         TM    SWSTTS,MSGLST       NO\n         BZ    CHKDS8\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(15,R14),=CL15' MUST BE LRECL='\n         LA    R14,16(R14)\n         LH    R1,WLRL\n         CVD   R1,WORKD\n         MVC   0(6,R14),=XL6'402020202120'\n         ED    0(6,R14),WORKD+5\n         LR    R1,R14\n         LA    R14,6(R14)\n         CLI   0(R1),C' '\n         BNE   CHKDSP\n         MVC   0(5,R1),1(R1)\n         MVI   5(R1),C' '\n         BCTR  R14,0\n         B     *-20\nCHKDSY3  OC    WBLK,WBLK           FIRST TIME BLKSIZE TESTED ?\n         BNZ   *+L'*+10            NO\n         MVC   WBLK,DS1BLKL        MOVE BLKSIZE\n         B     CHKDSY4\n         CLC   DS1BLKL,WBLK        IS IT GOOD BLKSIZE ?\n         BNH   CHKDSY4             YES\n         MVC   WBLK,DS1BLKL        NO, RETAIN THIS BLKSIZE\n         L     R1,ATBDS\n         USING TBDSECT,R1\n         OI    TBIND2,TBSTBLK      SAY SET BLKSIZE\n         DROP  R1\n         TM    SWSTTS,MSGLST\n         BZ    CHKDSY4\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(18,R14),=CL18' BLKSIZE IS LARGER'\n         LA    R14,19(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nCHKDSY4  CLC   WBLK,WLRL           IS BLKSIZE LESS THAN LRECL ?\n         BL    CHKDSY5             YES\n         CLI   WRFM,DS1RECFF       NO, FIXED RECORDS ?\n         BNE   CHKDSY6             NO\n         XR    R0,R0               YES, CHECK MULTIPLE\n         LH    R1,WBLK\n         LH    R14,WLRL\n         DR    R0,R14\n         LTR   R0,R0\n         BZ    CHKDSY6\nCHKDSY5  TM    SWSTTS,MSGLST\n         BZ    CHKDS8\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(16,R14),=CL16' INVALID BLKSIZE'\n         LA    R14,17(R14)\n         B     CHKDSP\nCHKDSY6  LTR   R4,R4\n         BNZ   CHKDS0\n         LH    R1,NTBDS\n         CH    R1,=Y(MXTBN)        DSNAME'S TABLE OVERFLOW ?\n         BNL   CHKDSB              YES\n         LA    R14,1(R1)\n         STH   R14,NTBDS\n         LTR   R1,R1\n         BNP   *+L'*+4\n         MH    R1,=Y(TBDSLEN)\n         AL    R1,ATBDS\n         USING TBDSECT,R1\n         CH    R14,=H'1'\n         BNE   *+L'*+10\n         MVC   TBDDN,WDDN\n         B     *+L'*+6\n         MVC   TBDDN,=CL8' '\n         MVC   TBLDS,WLDS\n         MVC   TBDSN,WDSN\n         XC    TBIND,TBIND\n         DROP  R1,R2\nCHKDS0   XR    R15,R15             SET RC=0\nCHKDSX  @EXIT\n         SPACE 1\nCAML2   CAMLST SEARCH,*-*,*-*,*-*\nLCAML2   EQU   *-CAML2\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- DMSRF - DMS RESTORE FORCE ROUTINE\n*              (IT IS DONE TRYING TO ALLOCATE IT DIRECTLY)\n*              AT ENTRY : DS-NAME IN FIELD 'WDSN' AND\n*                         LENGTH OF DS-NAME IN FIELD 'WLDS'\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = ERROR\n         SPACE 1\nDMSRF   @ENTER ,\n         L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         LA    R4,XDA08\n         USING DAPB08,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA08,R4),0(R4)\n         LA    R1,WLDS\n         ST    R1,DA08PDSN\n         OC    NTBDS,NTBDS\n         BNZ   *+L'*+10\n         MVC   DA08DDN,WDDN\n         B     *+L'*+6\n         MVC   DA08DDN,=CL8' '\n         MVC   DA08CD,=XL2'0008'\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVI   DA08CTL,DA08PERM\n         MVC   DA08ALN,=CL8' '\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         BAS   R14,XDAIR           EXECUTE ALLOCATION\n         B     DMSRFN              +0 = OK\n         TM    SWSTTS,MSGLST       +4 = ERROR\n         BZ    DMSRFF\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(19,R14),=CL19' DMS RESTORE FAILED'\n         LA    R14,20(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDMSRFF   LH    R6,NTBDS\n         LTR   R6,R6\n         BNP   DMSRFY\n        @CALL  FREEDS              DE-ALLOCATE DATA-SETS IF ANY\nDMSRFY   LA    R2,4                SET RC=4\n         B     DMSRFX\nDMSRFN   MVC   CAMLST1(LCAML1),CAML1 LOCATE AGAIN DATA-SET TO GET\n         LA    R1,WDSN               THE VOLUME FOR CHECKS (OBTAIN)\n         ST    R1,CAMLST1+4\n         LA    R1,LOCAREA\n         ST    R1,CAMLST1+12\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(L'LOCAREA-256),LOCAREA+256\n        LOCATE CAMLST1\n         LTR   R15,R15             LOCATED ?\n         BZ    DMSRFO              YES\n         TM    SWSTTS,MSGLST       NO, ERROR\n         BZ    DMSRFF\n         ST    R15,WORKD\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(11,R14),=CL11' LOCATE RC='\n         UNPK  12(9,R14),WORKD(5)\n         NC    12(8,R14),=XL8'0F0F0F0F0F0F0F0F'\n         TR    12(8,R14),HXTB\n         MVI   20(R14),C' '\n         LA    R14,21(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     DMSRFF\nDMSRFO   LH    R1,NTBDS\n         LA    R14,1(R1)\n         STH   R14,NTBDS\n         LTR   R1,R1\n         BNP   *+L'*+4\n         MH    R1,=Y(TBDSLEN)\n         AL    R1,ATBDS\n         USING TBDSECT,R1\n         MVC   TBDDN,DA08DDN\n         MVC   TBLDS,WLDS\n         MVC   TBDSN,WDSN\n         XC    TBIND,TBIND\n         OI    TBIND1,TBALLDS      SAY ALLOCATED\n         DROP  R1,R3,R4\n        @PASS  R4                  BACK REGISTER 4\n         XR    R2,R2               SET RC=0\nDMSRFX  STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         LR    R15,R2              SET RETURN CODE\n        @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- ALPRC - ALIAS(ES) PROCESS ROUTINE\n*              R2  : CURRENT DATA-SET POINTER IN 'LIBCIT' TABLE\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = NONE\n*                                                  8 = ERROR\n*              AT EXIT : IF ALL OK, 'CHKDS' ACTIONS ARE DONE\n         SPACE 1\nALPRC   @ENTER ,\n         USING LIB#DS,R2\n         CLC   LIB#DSN(3),=CL3'<U>' USER-ID DATA-SET ?\n         BE    ALPRCU              YES\n         CLC   LIB#DSN(3),=CL3'<G>' NO, GROUP DATA-SET ?\n         BE    ALPRCG              YES\nALPRC4   LA    R15,4               NO, SET RC=4\n         B     ALPRCX\n         USING ALDSECT,R3\nALPRCU   L     R3,ALPTBUA          USER-ID ALIAS(ES) TABLE\n         BASR  R6,0                SET NEXT ENTRY LOOP ADDRESS\n         CLI   ALNME,0             END OF TABLE ?\n         BE    ALPRC4              YES, NONE\n         CLC   ALNME,USID          NO, THIS USER ?\n         BNE   ALPRCC              NO\n         BAS   R14,ALPRCA          YES, NOW CHECK DD-NAME(S)\n         B     ALPRCC              +0 = NOT FOUND\n         CLI   ALNUN,0             +4 = FOUND, ANY UNLESS NAME(S) ?\n         BE    ALPRCD              NO, PROCESS\n         XR    R0,R0               CHECK UNLESS NAME(S)\n         IC    R0,ALNUN            NUMBER OF UNLESS NAME(S)\n         XR    R14,R14\n         IC    R14,ALNDD           NUMBER OF DD-NAME(S)\n         MH    R14,=Y(L'ALDDN)\n         LA    R1,ALDDN(R14)\nALPRCF   CLC   GRNM,0(R1)\n         BE    ALPRCC              FOUND, NO PROCESS\n         BCT   R0,*+L'*+4\n         B     ALPRCD              NOT FOUND, PROCESS\n         LA    R1,L'ALUNN(R1)\n         B     ALPRCF\nALPRCG   L     R3,ALPTBGA          GROUP ALIAS(ES) TABLE\n         BASR  R6,0                SET NEXT ENTRY LOOP ADDRESS\n         CLI   ALNME,0             END OF TABLE ?\n         BE    ALPRC4              YES, NONE\n         CLC   ALNME,GRNM          NO, THIS GROUP ?\n         BNE   ALPRCC              NO\n         BAS   R14,ALPRCA          YES, NOW CHECK DD-NAME(S)\n         B     ALPRCC              +0 = NOT FOUND\n         CLI   ALNUN,0             +4 = FOUND, ANY UNLESS NAME(S) ?\n         BE    ALPRCD              NO, PROCESS\n         XR    R0,R0               CHECK UNLESS NAME(S)\n         IC    R0,ALNUN            NUMBER OF UNLESS NAME(S)\n         XR    R14,R14\n         IC    R14,ALNDD           NUMBER OF DD-NAME(S)\n         MH    R14,=Y(L'ALDDN)\n         LA    R1,ALDDN(R14)\nALPRCH   CLC   USID,0(R1)\n         BE    ALPRCC              FOUND, NO PROCESS\n         BCT   R0,*+L'*+4\n         B     ALPRCD              NOT FOUND, PROCESS\n         LA    R1,L'ALUNN(R1)\n         B     ALPRCH\nALPRCA   XR    R0,R0               CHECK DD-NAME(S)\n         IC    R0,ALNDD            NUMBER OF DD-NAME(S)\n         LA    R1,ALDDN\nALPRCB   CLC   WDDN,0(R1)\n         BE    4(R14)              FOUND, RETURN = +4\n         BCT   R0,*+L'*+2\n         BR    R14                 NOT FOUND, RETURN = +0\n         LA    R1,L'ALDDN(R1)\n         B     ALPRCB\nALPRCC   XR    R14,R14             STEP TO NEXT TABLE ENTRY\n         LR    R15,R14\n         IC    R14,ALNDD           NUMBER OF DD-NAME(S)\n         MH    R14,=Y(L'ALDDN)\n         IC    R15,ALNUN           NUMBER OF UNLESS NAME(S)\n         LTR   R15,R15\n         BNP   *+L'*+6\n         MH    R15,=Y(L'ALUNN)\n         ALR   R14,R15\n         LA    R3,ALDDN(R14)\n         BR    R6\nALPRCD   MVI   WDSN,C' '           BUILD THE ALTERNATE DS-NAME\n         MVC   WDSN+1(L'WDSN-1),WDSN\n         MVC   WDSN(L'ALANM),ALANM\n         LA    R15,WDSN\n         LR    R0,R15\n         LA    R1,L'WDSN\n         CLI   0(R15),C' '\n         BE    *+L'*+8\n         LA    R15,1(R15)\n         BCT   R1,*-12\n         LA    R14,LIB#DSN+3\nALPRCE   MVC   0(1,R15),0(R14)\n         LA    R14,1(R14)\n         LA    R15,1(R15)\n         CLI   0(R14),C' '\n         BE    *+L'*+4\n         BCT   R1,ALPRCE\n         SLR   R15,R0\n         STH   R15,WLDS\n        @CALL  CHKDS               CHECK DATA-SET\n         CH    R15,=H'4'           HOW COMPLETE ?\n         BL    ALPRC0              0 = OK\n         BE    ALPRCC              4 = NOT CATALOGED, LOOK FURTHER\nALPRC8   LA    R15,8               8 = ERROR, SET RC=8\n         DROP  R2,R3\nALPRC0   XR    R15,R15             SET RC=0\nALPRCX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- ALLDS - ALLOCATION DATA-SETS ROUTINE\n*              AT ENTRY : ALL INFO'S IN 'TBDS' TABLE\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = ERROR\n*              AT EXIT : IF ALL OK, ALL DATA-SETS ARE ALLOCATED AND\n*                                   ALL DD-NAMES STORED IN 'TBDS' TABLE\n*                        IF ERROR, ALL DATA-SETS ARE DE-ALLOCATED\n         SPACE 1\nALLDS   @ENTER ,\n         L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         L     R5,ATBDS\n         USING TBDSECT,R5\n         LH    R6,NTBDS\n         LA    R4,XDA08            ALLOCATE DATA-SETS\n         USING DAPB08,R4\n         ST    R4,DAPLDAPB\nALLDSL   TM    TBIND1,TBALLDS      ALREADY ALLOCATED ?\n         BO    ALLDSB\n         XC    0(LDA08,R4),0(R4)\n         LA    R1,TBLDS\n         ST    R1,DA08PDSN\n         MVC   DA08DDN,TBDDN\n         MVC   DA08CD,=XL2'0008'\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVI   DA08CTL,DA08PERM\n         MVC   DA08ALN,=CL8' '\n         BAS   R14,XDAIR           EXECUTE ALLOCATION\n         B     ALLDSN              +0 = OK\n         TM    SWSTTS,MSGLST       +4 = ERROR\n         BZ    ALLDSF\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'TBDSN),TBDSN\n         LA    R14,WKLINE+L'TBDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(18,R14),=CL18' ALLOCATION FAILED'\n         LA    R14,19(R14)\nALLDSM   LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nALLDSF   LR    R0,R6\n         LH    R6,NTBDS\n         SR    R6,R0\n         BNP   ALLDSY\n        @CALL  FREEDS              DE-ALLOCATE DATA-SETS\nALLDSY   LA    R2,4                SET RC=4\n         B     ALLDSX\nALLDSN   MVC   TBDDN,DA08DDN\n         OI    TBIND1,TBALLDS      SAY ALLOCATED\nALLDSB   TM    TBIND2,TBSTBLK      IS BLKSIZE TO BE SET ?\n         BZ    ALLDST              NO\n         XR    R0,R0               YES\n         L     R1,ATIOT            START TIOT POINTER\n         USING TIODSECT,R1\nALLDSS   CLC   TIOELNGH(4),=XL4'0' END OF TIOT ?\n         BE    ALLDSE              YES, NOT FOUND\n         CLC   TIOEDDNM(L'TIOEDDNM),TBDDN DDNAME MATCH ?\n         BE    ALLDSI              YES, FOUND\n         IC    R0,TIOELNGH         LENGTH OF CURRENT DD-ENTRY\n         ALR   R1,R0               NEXT DD-ENTRY IN TIOT\n         B     ALLDSS\nALLDSE   TM    SWSTTS,MSGLST\n         BZ    ALLDSF\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'TBDDN),TBDDN\n         LA    R14,WKLINE+L'TBDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(19,R14),=CL19' CANNOT SET BLKSIZE'\n         LA    R14,20(R14)\n         B     ALLDSM\nALLDSI   XR    R2,R2\n         ICM   R2,B'0111',TIOEJFCB\n         DROP  R1\n        MODESET MF=(E,ESM)         ENTER SUPERVISOR MODE\n         USING ZB502,R2\n         MVC   JFCBLKSI,WBLK       SET BLKSIZE\n         DROP  R2\n        MODESET MF=(E,RPM)         RE-ENTER PROBLEM MODE\nALLDST   BCT   R6,*+L'*+4\n         B     ALLDSZ\n         LA    R5,TBDSLEN(R5)\n         B     ALLDSL\n         DROP  R3,R4,R5\nALLDSZ   XR    R2,R2               SET RC=0\nALLDSX  STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         LR    R15,R2              SET RETURN CODE\n        @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- COPDS - CONCATENATE PERMANENTLY DATA-SETS ROUTINE\n*              AT ENTRY : ALL INFO'S IN 'TBDS' TABLE\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = ERROR\n*              AT EXIT : IF ALL OK, THE CONCATENATION IS DONE\n*                        IF ERROR, ALL DATA-SETS ARE DE-ALLOCATED\n         SPACE 1\nCOPDS   @ENTER ,\n         LH    R1,NTBDS\n         CH    R1,=H'1'            ONLY ONE DATA-SET ?\n         BE    COPDSP              YES\n         LR    R6,R1\n         L     R5,ATBDS\n         LA    R2,DA0CDDN\n         USING TBDSECT,R5\nCOPDSL   MVC   0(L'TBDDN,R2),TBDDN\n         BCT   R1,*+L'*+4\n         B     COPDSC\n         LA    R2,L'DA0CDDN(R2)\n         LA    R5,TBDSLEN(R5)\n         B     COPDSL\n         DROP  R5\nCOPDSC   L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n         LA    R4,XDA0C            CONCATENATE DATA-SETS\n         USING DAPB0C,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA0C,R4),0(R4)\n         MVC   DA0CCD,=XL2'000C'\n         STH   R6,DA0CNUMB\n         DROP  R3,R4\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         BAS   R14,XDAIR           EXECUTE CONCATENATION\n         B     COPDSN              +0 = OK\n         TM    SWSTTS,MSGLST       +4 = ERROR\n         BZ    COPDSF\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(16,R14),=CL16' CONCATENATION ERROR'\n         LA    R14,21(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nCOPDSF  @CALL  FREEDS              DE-ALLOCATE DATA-SETS\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         LA    R15,4               SET RC=4\n         B     COPDSX\nCOPDSN  STAX   DEFER=NO            RESTORE ALL ATTENTIONS\nCOPDSP  @CALL  PERMAL              SET PERMANENTLY ALLOCATED\n         LTR   R15,R15             HOW COMPLETION ?\n         BNZ   COPDSF              ERROR\n         XR    R15,R15             SET RC=0\nCOPDSX  @EXIT  ,                   OK\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- PERMAL - PERMANENT ALLOCATION ROUTINE\n*              AT ENTRY : DD-NAME TO BE CHECKED IN FIELD 'WDDN'\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE = 0 - OK\n*                                                  4 - ERROR\n         SPACE 1\nPERMAL  @ENTER ,\n         L     R2,ATCB             GET TCB ADDRESS\n         USING TCB,R2\n         L     R2,TCBJSCB          JOB STEP CONTROL BLOCK ADDRESS\n         DROP  R2\n         USING IEZJSCB,R2\n         L     R2,JSCDSABQ         GET ADDRESS OF QDB FOR DSAB CHAIN\n         DROP  R2\n         USING QDB,R2\n         CLC   QDBNELMS,=XL4'0'    NO DATA-SETS ?\n         BE    PERMALR             YES, ERROR\n         L     R2,QDBFELMP         GET ADDRESS OF FIRST DSAB\n         DROP  R2\n         USING DSAB,R2\nPERMALI  TM    DSABFLG1,DSABDALC   DATA-SET DYNAMICALLY ALLOCATED ?\n         BO    PERMALE             YES\nPERMALS  ICM   R2,B'1111',DSABFCHN NO, GET NEXT DSAB ENTRY\n         BZ    PERMALH             END OF CHAIN\n         B     PERMALI             OTHERWISE KEEP LOOKING\nPERMALE  L     R3,DSABTIOT         POINT TO TIOT\n         USING TIOELNGH,R3\n         CLC   TIOEDDNM,WDDN       IS THIS DDNAME ?\n         BNE   PERMALS             NO\n         DROP  R3\n         TM    SWSTTS,TRDSAB       DSAB TRACE ?\n         BZ    PERMALZ             NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(18,R14),=CL18' --- DSAB TRACE = '\n         LA    R14,19(R14)\n         IC    R15,DSABRS01\n         STC   R15,1(R14)\n         SRL   R15,4\n         STC   R15,0(R14)\n         NC    0(2,R14),=XL4'0F0F0F0F'\n         TR    0(2,R14),HXTB\n         LA    R14,2(R14)\n         MVI   0(R14),C'/'\n         ICM   R15,B'0011',DSABOPCT\n         STC   R15,4(R14)\n         SRL   R15,4\n         STC   R15,3(R14)\n         SRL   R15,4\n         STC   R15,2(R14)\n         SRL   R15,4\n         STC   R15,1(R14)\n         NC    1(4,R14),=XL4'0F0F0F0F'\n         TR    1(4,R14),HXTB\n         LA    R14,5(R14)\n         MVI   0(R14),C' '\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nPERMALZ STAX   DEFER=YES           DEFER ALL ATTENTIONS\n        MODESET MF=(E,ESM)         ENTER SUPERVISOR MODE\n         OC    DSABRS01,STFLGS     INDICATE IT AS MY ALLOCATION\nPERMALB  NI    DSABFLG1,255-DSABDALC SET NOT DYNAMICALLY ALLOCATED\n         ICM   R2,B'1111',DSABFCHN NO, GET NEXT DSAB ENTRY\n         BZ    PERMALG             END OF CHAIN\n         TM    DSABFLG1,DSABDALC   DATA-SET DYNAMICALLY ALLOCATED ?\n         BZ    PERMALG             NO\n         L     R3,DSABTIOT         YES, POINT TO TIOT\n         USING TIOELNGH,R3\n         CLI   TIOEDDNM,C' '       PART OF A CONCATENATION GROUP ?\n         BE    PERMALB             YES\n         DROP  R2,R3\nPERMALG MODESET MF=(E,RPM)         RE-ENTER PROBLEM MODE\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         XR    R15,R15             SET RC=0\n         B     PERMALX\nPERMALR  TM    SWSTTS,MSGLST\n         BZ    PERMALF\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(28,R14),=CL28' NO DATA-SET(S) STATUS FOUND'\n         LA    R14,29(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     PERMALF\nPERMALH  TM    SWSTTS,MSGLST\n         BZ    PERMALF\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(37,R14),=CL37' NO DATA-SET(S) DYNAMICALLY ALLOCATED'\n         LA    R14,38(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nPERMALF  LA    R15,4               SET RC=4\nPERMALX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- DIAGDD - DIAGNOSE DD-ALLOCATION ROUTINE\n*              R1  : DD-ENTRY IN TIOT POINTER\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = ERROR\n         SPACE 1\nDIAGDD  @ENTER ,\n         LR    R6,R1               R1 -> R6 = DD-ENTRY\n         TM    SWSTTS,MSGLST\n         BZ    DIAGDDS\n         LR    R3,R6               R3 = DD-ENTRY\n         USING TIODSECT,R3\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(2,R14),=CL2' ('\n         MVC   3(L'WLID,R14),WLID\n         LA    R14,2+L'WLID(R14)\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(19,R14),=CL19') ALREADY ALLOCATED'\n         LA    R14,20(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         LA    R5,1(R14)\nDIAGDDW  MVC   WKLINE(L'MSID),MSID\n         MVC   0(4,R5),=CL4' DD '\n         XR    R4,R4\n         ICM   R4,B'0111',TIOEJFCB R4 -> JFCB\n         USING ZB502,R4\n         MVC   4(L'JFCBDSNM,R5),JFCBDSNM LIST DS-NAME\n         LA    R14,L'JFCBDSNM+4(R5)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         XR    R0,R0               SET NEXT DD-ENTRY IN THE TIOT\n         IC    R0,TIOELNGH         R0 = LENGTH OF CURRENT DD-ENTRY\n         ALR   R3,R0               R3 -> NEXT DD-ENTRY IN TIOT\n         CLC   TIOELNGH(4),=XL4'0' END OF TIOT ?\n         BE    DIAGDDS             YES\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8' ' BLANK DD-NAME ?\n         BNE   DIAGDDS             NO, NO MORE\n         MVI   WKLINE,C' '         YES, CONCATENATION\n         MVC   WKLINE+1(L'WDDN+11),WKLINE\n         B     DIAGDDW\n         USING LIB#DS,R2\nDIAGDDS  BAS   R14,BDDSN           BUILD DS-NAME\n         B     DIAGDD4             0 = ERROR\n         B     DIAGDDN             4 = NONE (SKIP)\n         CLI   WDSN,C'&&'          8 = OK, IS IT A TEMPORARY ?\n         BE    DIAGDDN             YES\n         LR    R3,R6               NO, R3 = DD-ENTRY\nDIAGDDL  XR    R4,R4\n         ICM   R4,B'0111',TIOEJFCB R4 -> JFCB\n         CLC   WDSN,JFCBDSNM       THIS DS-NAME ?\n         BE    DIAGDDN             YES\n         XR    R0,R0               NO, GET NEXT DD-ENTRY IN THE TIOT\n         IC    R0,TIOELNGH         R0 = LENGTH OF CURRENT DD-ENTRY\n         ALR   R3,R0               R3 -> NEXT DD-ENTRY IN TIOT\n         CLC   TIOELNGH(4),=XL4'0' END OF TIOT ?\n         BE    DIAGDDC             YES, NOT FOUND\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8' ' BLANK DD-NAME ?\n         BE    DIAGDDL             YES, LOOP TO CHECK WITH IT\n         DROP  R3,R4\nDIAGDDC  XC    WDSI,WDSI           CHECK IF DATA-SET IS NEEDED\n         OC    WDSI,LIB#DSI\n         BZ    DIAGDDT             ZERO\n         NC    WDSI(1),XDSI\n         BZ    DIAGDDN             ZERO, NOT SPECIFIED\n         MVC   CAMLST1(LCAML1),CAML1 LOCATE DATA-SET\n         LA    R1,WDSN\n         ST    R1,CAMLST1+4\n         LA    R1,LOCAREA\n         ST    R1,CAMLST1+12\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(L'LOCAREA-256),LOCAREA+256\n        LOCATE CAMLST1\n         LTR   R15,R15             LOCATED ?\n         BZ    DIAGDDP             YES\nDIAGDDT  XR    R15,R15\n         IC    R15,XTSTFM\n         EX    R15,DIAGXTM         IS IT MANDATORY ?\n         BZ    DIAGDDN             NO\nDIAGDDP  OI    SWPRCS,ABTEXR       YES, SET ABORT\nDIAGDD4  LA    R15,4               SET RC=4\n         B     DIAGDDX\nDIAGXTM  TM    LIB#DSF,*-*         <<EXECUTED>>\nDIAGDDN  LA    R2,LIB#LDS(R2)      NEXT DATA-SET\n         CLC   LIB#DSSA,=AL4(LIB#DSF$) END OF LIST ?\n         BNE   DIAGDDS             NO, GO CHECK NEXT DS-NAME\n         DROP  R2\n         XR    R15,R15             SET RC=0\nDIAGDDX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- DDOPEN - CHECK IF ANY DD OPENED ROUTINE\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = NONE\n*                                                  8 = STOP\n         SPACE 1\nDDOPEN  @ENTER ,\n         L     R2,ATCB             GET TCB ADDRESS\n         USING TCB,R2\n         L     R2,TCBJSCB          JOB STEP CONTROL BLOCK ADDRESS\n         DROP  R2\n         USING IEZJSCB,R2\n         L     R2,JSCDSABQ         GET ADDRESS OF QDB FOR DSAB CHAIN\n         DROP  R2\n         USING QDB,R2\n         CLC   QDBNELMS,=XL4'0'    NO DATA-SETS ?\n         BE    DDOPEN4             YES, LET'S GO (NOTHING TO DO)\n         L     R2,QDBFELMP         GET ADDRESS OF FIRST DSAB\n         DROP  R2\n         USING DSAB,R2\n         XR    R4,R4               RESET COUNT\nDDOPENI  TM    DSABFLG1,DSABDALC   DATA-SET DYNAMICALLY ALLOCATED ?\n         BO    DDOPENT             YES\n         TM    DSABRS01,OWNDYLO    NO, IS IT MY ALLOCATION ?\n         BZ    DDOPENT             NO, LET'S GO\n         L     R3,DSABTIOT         POINT TO TIOT\n         USING TIOELNGH,R3\n         TM    SWSTTS,TRDSAB       DSAB TRACE ?\n         BZ    DDOPENP             NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'TIOEDDNM),TIOEDDNM\n         LA    R14,WKLINE+L'TIOEDDNM+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(18,R14),=CL18' --- DSAB TRACE = '\n         LA    R14,19(R14)\n         IC    R15,DSABRS01\n         STC   R15,1(R14)\n         SRL   R15,4\n         STC   R15,0(R14)\n         NC    0(2,R14),=XL4'0F0F0F0F'\n         TR    0(2,R14),HXTB\n         LA    R14,2(R14)\n         MVI   0(R14),C'/'\n         ICM   R15,B'0011',DSABOPCT\n         STC   R15,4(R14)\n         SRL   R15,4\n         STC   R15,3(R14)\n         SRL   R15,4\n         STC   R15,2(R14)\n         SRL   R15,4\n         STC   R15,1(R14)\n         NC    1(4,R14),=XL4'0F0F0F0F'\n         TR    1(4,R14),HXTB\n         LA    R14,5(R14)\n         MVI   0(R14),C' '\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDDOPENP  TM    DSABRS01,TSODYLO    IS IT A TSO BASIC ?\n         BO    DDOPENT             YES, LET IT STAY\n         OC    TDSI,TDSI           NO, SYSTEM PRESERVE ?\n         BNZ   *+L'*+8             NO\n         TM    DSABRS01,SYSDYLO    YES, IS IT SYSTEM ?\n         BO    DDOPENT             YES, LET IT STAY\n         CLC   DSABOPCT,=XL2'0'    NO, IS IT STILL OPENED ?\n         BNE   DDOPENA             YES, REJECT ALL\n         LA    R4,1(R4)            NO, OK\nDDOPENT  ICM   R2,B'1111',DSABFCHN GET NEXT DSAB ENTRY\n         BZ    DDOPENH             END OF CHAIN\n         B     DDOPENI             OTHERWISE KEEP LOOKING\nDDOPENA  MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'TIOEDDNM),TIOEDDNM\n         LA    R14,WKLINE+L'TIOEDDNM+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(31,R14),=CL31' IS STILL OPENED - ALL REJECTED'\n         LA    R14,32(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         LA    R15,8               SET RC=8\n         B     DDOPENX\n         DROP  R2,R3\nDDOPENH  LTR   R4,R4               SOMETHING ?\n         BNZ   DDOPEN0             YES\nDDOPEN4  LA    R15,4               SET RC=4\n         B     DDOPENX\nDDOPEN0  XR    R15,R15             SET RC=0\nDDOPENX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- DDFREE - FREE DATA-SET(S) AND DD ROUTINE\n*              R2  : DSAB POINTER\n*              R3  : TIOT ENTRY POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK\n*                                                  4 = ERROR\n*                                                  8 = STOP\n         SPACE 1\nDDFREE  @ENTER ,\n         USING DSAB,R2\n         CLC   DSABOPCT,=XL2'0'    NO, CHECK AGAIN, STILL OPENED ?\n         BE    DDFREEA             NO, OK\n         TM    SWSTTS,TRDSAB       YES, DSAB TRACE ?\n         BZ    DDFREEP             NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(18,R14),=CL18' --- DSAB TRACE = '\n         LA    R14,19(R14)\n         IC    R15,DSABRS01\n         STC   R15,1(R14)\n         SRL   R15,4\n         STC   R15,0(R14)\n         NC    0(2,R14),=XL4'0F0F0F0F'\n         TR    0(2,R14),HXTB\n         LA    R14,2(R14)\n         MVI   0(R14),C'/'\n         ICM   R15,B'0011',DSABOPCT\n         STC   R15,4(R14)\n         SRL   R15,4\n         STC   R15,3(R14)\n         SRL   R15,4\n         STC   R15,2(R14)\n         SRL   R15,4\n         STC   R15,1(R14)\n         NC    1(4,R14),=XL4'0F0F0F0F'\n         TR    1(4,R14),HXTB\n         LA    R14,5(R14)\n         MVI   0(R14),C' '\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDDFREEP  MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(32,R14),=CL32' IS STILL OPENED - REST REJECTED'\n         LA    R14,33(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         LA    R15,8               SET RC=8\n         B     DDFREEX\nDDFREEA STAX   DEFER=YES           DEFER ALL ATTENTIONS\n        MODESET MF=(E,ESM)         ENTER SUPERVISOR MODE\n         MVI   DSABRS01,0          RESET MY ALLOCATION FLAGS\n        MODESET MF=(E,RPM)         RE-ENTER PROBLEM MODE\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         DROP  R2\n         USING TIOELNGH,R3\n         LR    R6,R3               RETAIN TIOT START DD-ENTRY\n         LA    R4,1\n         L     R5,ATBDS            SET DD INFO'S\n         USING TBDSECT,R5\nDDFREEN  MVC   TBDDN,TIOEDDNM      DD-NAME\n         XR    R1,R1\n         ICM   R1,B'0111',TIOEJFCB\n         USING ZB502,R1\n         MVC   TBDSN,JFCBDSNM      DS-NAME\n         DROP  R1\n         LA    R0,L'TBDSN\n         XR    R1,R1\n         LA    R2,TBDSN\nDDFREEL  CLI   0(R2),C' '\n         BE    *+L'*+12\n         LA    R1,1(,R1)\n         LA    R2,1(,R2)\n         BCT   R0,DDFREEL\n         STH   R2,TBLDS            DS-NAME LENGTH\n         XC    TBIND,TBIND\n         OI    TBIND1,TBALLDS      SAY ALLOCATED\n         XR    R0,R0\n         IC    R0,TIOELNGH\n         ALR   R3,R0               NEXT DD-ENTRY\n         CLC   TIOELNGH(4),=XL4'0' END OF TIOT ?\n         BE    DDFREEE             YES\n         CLC   TIOEDDNM(L'TIOEDDNM),=CL8' ' BLANK DD-NAME ?\n         BNE   DDFREEE             NO\n         LA    R4,1(,R4)           YES, CONCATENATED\n         LA    R5,TBDSLEN(R5)\n         B     DDFREEN\n         DROP  R3\nDDFREEE  STH   R4,NTBDS\n         L     R5,ATBDS\n         CH    R4,=H'1'            ONLY ONE DATA-SET ?\n         BE    DDFREEF             YES\n         LA    R3,XDAPL            NO, MORE, DECONCATENATION REQUESTED\n         USING DAPL,R3\n         L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n         LA    R4,XDA10            DECONCATENATE DATA-SETS\n         USING DAPB10,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA10,R4),0(R4)\n         MVC   DA10CD,=XL2'0010'\n         MVC   DA10DDN,TBDDN\n         DROP  R3,R4\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         BAS   R14,XDAIR           EXECUTE DECONCATENATION\n         B     DDFREES             +0 = OK\n        STAX   DEFER=NO            +4 = ERROR, RESTORE ALL ATTENTIONS\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(23,R14),=CL23' DECONCATENATION FAILED'\n         LA    R14,24(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         LA    R15,4               SET RC=4\n         B     DDFREEX\nDDFREES STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         LH    R2,NTBDS\n         USING TIOELNGH,R6\nDDFREEC  CLC   TBDDN,TIOEDDNM\n         BE    *+L'*+6\n         MVC   TBDDN,TIOEDDNM      FILL DD-NAME'S\n         BCT   R2,*+L'*+4\n         B     DDFREEF\n         XR    R0,R0\n         IC    R0,TIOELNGH\n         ALR   R6,R0               NEXT DD-ENTRY\n         LA    R5,TBDSLEN(R5)\n         B     DDFREEC\n        DROP   R5,R6\nDDFREEF LH     R6,NTBDS            DE-ALLOCATE DATA-SETS\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n        @CALL  FREEDS              YES\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         TM    SWSTTS,MSGLST\n         BZ    DDFREE0\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(19,R14),=CL19' DE-ALLOCATION DONE'\n         LA    R14,20(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nDDFREE0  XR    R15,R15             SET RC=0\nDDFREEX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- FREEDS - DE-ALLOCATE DATA-SETS ROUTINE\n*              R6  : NUMBER OF ENTRIES IN 'TBDS' TO BE SCANNED\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE = 0 - ALWAYS\n         SPACE 1\nFREEDS  @ENTER ,\n         L     R2,CPPLADDR         DE-ALLOCATE DATA-SETS\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n         LA    R4,XDA18\n         USING DAPB18,R4\n         ST    R4,DAPLDAPB\n         L     R5,ATBDS\n         USING TBDSECT,R5\nFREEDSL  TM    TBIND1,TBALLDS      ALLOCATED ?\n         BZ    FREEDST             NO\n         XC    0(LDA18,R4),0(R4)\n         MVC   DA18CD,=XL2'0018'\n         MVC   DA18DDN,TBDDN\n         MVC   DA18MNM,=CL8' '\n         MVC   DA18SCLS(L'DA18SCLS),=CL8' '\n         MVI   DA18CTL,DA18PERM\n         DROP  R4\n         BAS   R14,XDAIR           EXECUTE DE-ALLOCATION\n         B     FREEDST             +0 = OK, +4 = ERROR\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'TBDSN),TBDSN\n         LA    R14,WKLINE+L'TBDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(21,R14),=CL21' DE-ALLOCATION FAILED'\n         LA    R14,22(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nFREEDST  BCT   R6,*+L'*+4\n         B     *+L'*+8\n         LA    R5,TBDSLEN(R5)\n         B     FREEDSL\n         DROP  R5\n         XR    R15,R15             SET RC=0\n        @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*=== - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ===*\n*===           E S P I E     E X I T     R O U T I N E           ===*\n*=== - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ===*\n         SPACE 1\nASKTEST  EQU   11,1                DYLON+11 = 0 - FORCE PIE TRACE\n*                                  (MAY BE DONE BY ZAP)\n         SPACE 1\n         CNOP  0,8\n         USING *,R15\n         USING EPIE,R1\nESPEXIT  L     R10,EPIEPARM\n         LR    R7,R10\n         LM    R8,R9,OLDPICA+4\n         MVC   PIEAR(L'PIEAR),EPIEGPR SAVE PIE CONTENTS\n         OI    SWSTTS,DSPPIE       SAY DISPLAY\n         L     R6,=A(INTEX-DYLOFF)\n         CLI   ASKTEST(R8),0\n         BE    ESPEXITX\n         XC    PIEAR(L'PIEAR),PIEAR\n         NI    SWSTTS,255-DSPPIE\nESPEXITX STM   R7,R10,EPIEGPR+R10*4\n         ALR   R6,R8\n         ST    R6,EPIEPSW+4\n         NI    EPIEPSW+4,X'7F'\n         BR    R14\n         SPACE 1\n        LTORG\n         SPACE 1\n         DROP  R1,R15              END OF LOCAL ADDRESSABILITIES\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - -        S P E C I A L     R O U T I N E S        - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- SPROF - ALLOCATION OF NEW ISPF PROFILE ROUTINE\n*                (ALSO USED TO ALLOCATE MFTTLIB DD OF MFTS)\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, ALLOCATED\n*                                                  4 = ERROR\n         SPACE 1\nSPROF   @ENTER ,\n         LH    R1,NTBDS\n         CH    R1,=Y(MXTBN)        DSNAME'S TABLE OVERFLOW ?\n         BL    SPROFA              NO\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDSN),WDSN\n         LA    R14,WKLINE+L'WDSN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(14,R14),=CL14' ... BREAKDOWN'\n         LA    R14,15(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         BAS   R14,MSGTBN          DATA-SETS TABLE OVERFLOW\n        @CALL  PUTLNE\nSPROF4   LA    R15,4               SET RC=4\n         B     SPROFX\nSPROFA  @S99I  TUPAOV=SPROFY,TUAOV=SPROFZ START LIST\n         OC    NTBDS,NTBDS         IS IT THE FIRST DATA-SET ?\n         BNZ   SPROFN              NO, SKIP\n        @TU01  ,                   BUILD TU 01 - DDNAME\nSPROFN  @TU02  ,                   BUILD TU 02 - DSNAME\n        @TU04  NEW                 BUILD TU 04 - STATUS\n        @TU05  CAT                 BUILD TU 05 - DISPOSITION\n        @TUTC  YYPA                BUILD TU 07/08 - TRK/CYL ALLOC.\n        @TU0A  YYPP                BUILD TU 0A - PRIMARY SPACE\n        @TU0B  YYPS                BUILD TU 0B - SECONDARY SPACE\n        @TU0C  YYPD                BUILD TU 0C - DIRECTORY BLOCKS\n        @TU10  YYPV                BUILD TU 10 - VOLSER\n        @TU15  YYPU                BUILD TU 15 - UNIT\n        @TU30  YYPB,WBLK           BUILD TU 30 - BLKSIZE\n        @TU3C  WORG                BUILD TU 3C - DSORG\n        @TU42  WLRL                BUILD TU 42 - LRECL\n        @TU49  WRFM,WBLK,WLRL      BUILD TU 49 - RECFM\n        @TU52  LAST=YES            BUILD TU 52 - PERM. ALL. ATTR.\n         OC    NTBDS,NTBDS         IS IT THE FIRST DATA-SET ?\n         BZ    SPROFD              YES, SKIP\n        @S99N  ,                   PROVIDE NEXT\n        @TU55  LAST=YES            BUILD TU 55 - RETURN DDNAME\n         LR    R5,R4               RETAIN ADDRESS OF RETURN DDNAME\nSPROFD  @S99T  ,                   TERMINATE LIST\n         BAS   R14,XDYNALL         EXECUTE DYNALLOC\n         B     SPROFS              0 = OK, ALLOCATED\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(28,R14),=CL28' DATA-SETS ALLOCATION FAILED'\n         LA    R14,29(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     SPROF4\nSPROFY   BAS   R14,MSGRBTP         TEXT UNITS POINTERS AREA OVERFLOW\n        @CALL  PUTLNE\n         B     SPROF4\nSPROFZ   BAS   R14,MSGRBTU         TEXT UNITS AREA OVERFLOW\n        @CALL  PUTLNE\n         B     SPROF4\nSPROFS   LH    R2,NTBDS\n         LA    R14,1(R2)\n         STH   R14,NTBDS\n         LTR   R2,R2\n         BNP   *+L'*+4\n         MH    R2,=Y(TBDSLEN)\n         AL    R2,ATBDS\n         USING TBDSECT,R2\n         CH    R14,=H'1'\n         BNE   *+L'*+10\n         MVC   TBDDN,WDDN\n         B     SPROFC\n         MVC   TBDDN,=CL8' '\n         USING S99TUNIT,R5\n         XR    R1,R1\n         ICM   R1,B'0011',S99TULNG\n         BCT   R1,*+L'*+6\n         MVC   TBDDN(*-*),S99TUPAR <<EXECUTED>>\n         EX    R1,*-6              SET RETURNED DDNAME\n         DROP  R5\nSPROFC   MVC   TBLDS,WLDS\n         MVC   TBDSN,WDSN\n         OI    TBIND1,TBALLDS      SAY ALLOCATED\n         DROP  R2\n         XR    R15,R15             SET RC=0\nSPROFX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- PWORK - PRE-ALLOCATED ISPF WORK FILE ROUTINE\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R5  : 'LIBCIT' TABLE ENTRY POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, ALLOCATED\n*                                                  4 = GO ALLOCATE IT\n*                                                  8 = ERROR\n         SPACE 1\nPWORK   @ENTER ,\n         BAS   R14,CHKDD           DD ALREADY ALLOCATED ?\n         B     PWORKA              +0 = NO, GO ALLOCATE IT\n        @CALL  DIAGDD              +4 = YES, GO DIAGNOSE\n         LTR   R15,R15             HOW COMPLETED ?\n         BZ    PWORKS              OK\n         B     PWORK8              ERROR\nPWORKA   BAS   R14,BDDSN           BUILD DS-NAME\n         B     PWORK8              0 = ERROR\n         B     PWORK8              4 = NONE (UNACCEPTABLE)\n        @S99I  TUPAOV=PWORKY,TUAOV=PWORKZ 8 = OK, START LIST\n        @TU01  ,                   BUILD TU 01 - DDNAME\n        @TU02  ,                   BUILD TU 02 - DSNAME\n        @TU04  NEW                 BUILD TU 04 - STATUS\n        @TU05  DEL                 BUILD TU 05 - DISPOSITION\n        @TU06  DELE                BUILD TU 06 - DISPOSITION\n        @TUTC  YYWA                BUILD TU 07/08 - TRK/CYL ALLOC.\n        @TU0A  YYWP                BUILD TU 0A - PRIMARY SPACE\n        @TU0B  YYWS                BUILD TU 0B - SECONDARY SPACE\n        @TU0C  YYWD                BUILD TU 0C - DIRECTORY BLOCKS\n        @TU15  YYWU                BUILD TU 15 - UNIT\n        @TU2C  YYWR                BUILD TU 2C - DCB REFERENCE\n        @TU52  LAST=YES            BUILD TU 52 - PERM. ALL. ATTR.\n        @S99T  ,                   TERMINATE LIST\n         BAS   R14,XDYNALL         EXECUTE DYNALLOC\n         B     PWORKS              0 = OK, ALLOCATED\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(27,R14),=CL27' DATA-SET ALLOCATION FAILED'\n         LA    R14,28(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     PWORK8\nPWORKY   BAS   R14,MSGRBTP         TEXT UNITS POINTERS AREA OVERFLOW\n        @CALL  PUTLNE\n         B     PWORK8\nPWORKZ   BAS   R14,MSGRBTU         TEXT UNITS AREA OVERFLOW\n        @CALL  PUTLNE\nPWORK8   LA    R15,8               SET RC=8\n         B     PWORKX\nPWORKS  @CALL  PERMAL              SET PERMANENTLY ALLOCATED\n         XR    R15,R15             SET RC=0\nPWORKX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- PCTRL - PRE-ALLOCATED ISPF CONTROL FILE ROUTINE\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R5  : 'LIBCIT' TABLE ENTRY POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, ALLOCATED\n*                                                  4 = GO ALLOCATE IT\n*                                                  8 = ERROR\n         SPACE 1\nPCTRL   @ENTER ,\n         BAS   R14,CHKDD           DD ALREADY ALLOCATED ?\n         B     PCTRLA              +0 = NO, GO ALLOCATE IT\n        @CALL  DIAGDD              +4 = YES, GO DIAGNOSE\n         LTR   R15,R15             HOW COMPLETED ?\n         BZ    PCTRLS              OK\n         B     PCTRL8              ERROR\nPCTRLA   BAS   R14,BDDSN           BUILD DS-NAME\n         B     PCTRL8              0 = ERROR\n         B     PCTRL8              4 = NONE (UNACCEPTABLE)\n        @S99I  TUPAOV=PCTRLY,TUAOV=PCTRLZ 8 = OK, START LIST\n        @TU01  ,                   BUILD TU 01 - DDNAME\n        @TU02  ,                   BUILD TU 02 - DSNAME\n        @TU04  NEW                 BUILD TU 04 - STATUS\n        @TU05  DEL                 BUILD TU 05 - DISPOSITION\n        @TU06  DELE                BUILD TU 06 - DISPOSITION\n        @TUTC  YYCA                BUILD TU 07/08 - TRK/CYL ALLOC.\n        @TU0A  YYCP                BUILD TU 0A - PRIMARY SPACE\n        @TU0B  YYCS                BUILD TU 0B - SECONDARY SPACE\n        @TU15  YYCU                BUILD TU 15 - UNIT\n        @TU30  YYCB                BUILD TU 30 - BLKSIZE\n        @TU3C  WORG                BUILD TU 3C - DSORG\n        @TU42  WLRL                BUILD TU 42 - LRECL\n        @TU49  WRFM,YYCB,WLRL      BUILD TU 49 - RECFM\n        @TU52  LAST=YES            BUILD TU 52 - PERM. ALL. ATTR.\n        @S99T  ,                   TERMINATE LIST\n         BAS   R14,XDYNALL         EXECUTE DYNALLOC\n         B     PCTRLS              0 = OK, ALLOCATED\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(27,R14),=CL27' DATA-SET ALLOCATION FAILED'\n         LA    R14,28(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     PCTRL8\nPCTRLY   BAS   R14,MSGRBTP         TEXT UNITS POINTERS AREA OVERFLOW\n        @CALL  PUTLNE\n         B     PCTRL8\nPCTRLZ   BAS   R14,MSGRBTU         TEXT UNITS AREA OVERFLOW\n        @CALL  PUTLNE\nPCTRL8   LA    R15,8               SET RC=8\n         B     PCTRLX\nPCTRLS  @CALL  PERMAL              SET PERMANENTLY ALLOCATED\n         XR    R15,R15             SET RC=0\nPCTRLX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- PEDIT - PRE-ALLOCATED TSO EDIT WORK ROUTINE\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R5  : 'LIBCIT' TABLE ENTRY POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, ALLOCATED\n*                                                  4 = GO ALLOCATE IT\n*                                                  8 = ERROR\n         SPACE 1\nPEDIT   @ENTER ,\n         BAS   R14,CHKDD           DD ALREADY ALLOCATED ?\n         B     PEDITA              +0 = NO, GO ALLOCATE IT\n        @CALL  DIAGDD              +4 = YES, GO DIAGNOSE\n         LTR   R15,R15             HOW COMPLETED ?\n         BZ    PEDITS              OK\n         B     PEDIT8              ERROR\nPEDITA   BAS   R14,BDDSN           BUILD DS-NAME\n         B     PEDIT8              0 = ERROR\n         B     PEDIT8              4 = NONE (UNACCEPTABLE)\n        @S99I  TUPAOV=PEDITY,TUAOV=PEDITZ 8 = OK, START LIST\n        @TU01  ,                   BUILD TU 01 - DDNAME\n        @TU02  ,                   BUILD TU 02 - DSNAME\n        @TU04  NEW                 BUILD TU 04 - STATUS\n        @TU05  DEL                 BUILD TU 05 - DISPOSITION\n        @TU06  DELE                BUILD TU 06 - DISPOSITION\n        @TU09  YYEA                BUILD TU 09 - BLK. ALLOCATION\n        @TU0A  YYEP                BUILD TU 0A - PRIMARY SPACE\n        @TU0B  YYES                BUILD TU 0B - SECONDARY SPACE\n        @TU15  YYEU                BUILD TU 15 - UNIT\n        @TU52  LAST=YES            BUILD TU 52 - PERM. ALL. ATTR.\n        @S99T  ,                   TERMINATE LIST\n         BAS   R14,XDYNALL         EXECUTE DYNALLOC\n         B     PEDITS              0 = OK, ALLOCATED\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(27,R14),=CL27' DATA-SET ALLOCATION FAILED'\n         LA    R14,28(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         B     PEDIT8\nPEDITY   BAS   R14,MSGRBTP         TEXT UNITS POINTERS AREA OVERFLOW\n        @CALL  PUTLNE\n         B     PEDIT8\nPEDITZ   BAS   R14,MSGRBTU         TEXT UNITS AREA OVERFLOW\n        @CALL  PUTLNE\nPEDIT8   LA    R15,8               SET RC=8\n         B     PEDITX\nPEDITS  @CALL  PERMAL              SET PERMANENTLY ALLOCATED\n         XR    R15,R15             SET RC=0\nPEDITX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- PTERM - PRE-ALLOCATED TO TERMINAL ROUTINE\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R5  : 'LIBCIT' TABLE ENTRY POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, ALLOCATED\n*                                                  4 = GO ALLOCATE IT\n*                                                  8 = ERROR\n         SPACE 1\nPTERM   @ENTER ,\n         BAS   R14,CHKDD           DD ALREADY ALLOCATED ?\n         B     PTERMA              +0 = NO, GO ALLOCATE IT\n        @CALL  DIAGDD              +4 = YES, GO DIAGNOSE\n         LTR   R15,R15             HOW COMPLETED ?\n         BZ    PTERMS              OK\n         B     PTERM8              ERROR\n         SPACE 1\n*        EQUIVALENT JCL ALLOCATION :\n*              //...      DD TERM=TS\n         SPACE 1\nPTERMA   L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n         LA    R4,XDA1C            ALLOCATE TERM=TS\n         USING DAPB1C,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA1C,R4),0(R4)\n         MVC   DA1CDDN,WDDN\n         MVC   DA1CCD,=XL2'001C'\n         MVI   DA1CCTL,DA1CPERM\n         MVC   DA1CALN,=CL8' '\n         DROP  R3,R4\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         BAS   R14,XDAIR           EXECUTE ALLOCATION\n         B     PTERMP              +0 = OK, ALLOCATED\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(27,R14),=CL27' DATA-SET ALLOCATION FAILED'\n         LA    R14,28(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nPTERM8   LA    R15,8               SET RC=8\n         B     PTERMX\nPTERMP  STAX   DEFER=NO            RESTORE ALL ATTENTIONS\nPTERMS  @CALL  PERMAL              SET PERMANENTLY ALLOCATED\n         XR    R15,R15             SET RC=0\nPTERMX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*------- PDMMY - PRE-ALLOCATED TO DUMMY ROUTINE\n*              R2  : DATA-SET(S) NAME(S) LIST POINTER\n*              R5  : 'LIBCIT' TABLE ENTRY POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, ALLOCATED\n*                                                  4 = GO ALLOCATE IT\n*                                                  8 = ERROR\n         SPACE 1\nPDMMY   @ENTER ,\n         BAS   R14,CHKDD           DD ALREADY ALLOCATED ?\n         B     PDMMYA              +0 = NO, GO ALLOCATE IT\n        @CALL  DIAGDD              +4 = YES, GO DIAGNOSE\n         LTR   R15,R15             HOW COMPLETED ?\n         BZ    PDMMYS              OK\n         B     PDMMY8              ERROR\n         SPACE 1\n*        EQUIVALENT JCL ALLOCATION :\n*              //...      DD DUMMY\n         SPACE 1\nPDMMYA   L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         LA    R4,XDA08            ALLOCATE DUMMY\n         USING DAPB08,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA08,R4),0(R4)\n         MVC   DA08DDN,WDDN\n         MVC   DA08CD,=XL2'0008'\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08CTL,DA08PERM+DA08DMMY\n         MVC   DA08ALN,=CL8' '\n         DROP  R3,R4\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         BAS   R14,XDAIR           EXECUTE ALLOCATION\n         B     PDMMYP              +0 = OK, ALLOCATED\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'WDDN),WDDN\n         LA    R14,WKLINE+L'WDDN+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(27,R14),=CL27' DATA-SET ALLOCATION FAILED'\n         LA    R14,28(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\nPDMMY8   LA    R15,8               SET RC=8\n         B     PDMMYX\nPDMMYP  STAX   DEFER=NO            RESTORE ALL ATTENTIONS\nPDMMYS  @CALL  PERMAL              SET PERMANENTLY ALLOCATED\n         XR    R15,R15             SET RC=0\nPDMMYX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        P R O C E S S     C O M M A N D     O P E R A N D S        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- PCOPN - PROCESS COMMAND OPERANDS\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n         SPACE 1\nPCOPN   @ENTER ,\n         SPACE 1\n*------- VERIFY AND SET SENIOR SYSTEM PROGRAMMER(S)\n         SPACE 1\n         L     R4,=V(DYLOCOM)\n         L     R5,=A(VCOML)\n         LA    R2,0(R4,R5)\n         CL    R5,0(R2)\n         BE    SETVC\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(32),=CL32'\"DYLOCOM\" VECTOR COMMUNICATIONS '\n         MVC   WKLINE+42(12),=CL12'DISCREPANCY '\n         LA    R1,WKLINE\n         LA    R0,54\n        @CALL  PUTLNE\n         LA    R15,4               SET RC=4\n         B     PCOPNZ\nSETVC    LA    R2,VCOMS\n         LR    R3,R5\n         MVCL  R2,R4\n         L     R15,ASRVC\n         XR    R1,R1\n        @CALL  ,\n         ST    R1,AWK\n         L     R1,AWIZ\n         XR    R2,R2\n         IC    R2,0(R1)\n         LA    R3,1(R1)\n         LTR   R2,R2\n         BNP   *+L'*+18\n         CLC   0(8,R3),USID\n         BE    STWZRD\n         LA    R3,8(R3)\n         BCT   R2,*-14\n         LR    R1,R3\n         XR    R2,R2\n         IC    R2,0(R1)\n         LA    R3,1(R1)\n         LTR   R2,R2\n         BNP   PCBFOP\n         CLC   0(8,R3),GRNM\n         BE    STWZRD\n         LA    R3,8(R3)\n         BCT   R2,*-14\n         B     PCBFOP\nSTWZRD   OI    SWSTTS,WIZARD\n         SPACE 1\n*------- PROCESS COMMAND BUFFER OPERANDS\n         SPACE 1\nPCBFOP   L     R2,CPPLADDR\n         USING CPPL,R2             SET CPPL ADDRESSABILITY\n         L     R6,CPPLCBUF         COMMAND BUFFER ADDRESS\n         DROP  R2\n         MVC   CMNME,=CL8' '\n         LH    R1,2(R6)            LENGTH OF COMMAND (=OFFSET)\n         LA    R0,8\n         CLR   R1,R0\n         BNH   *+L'*+2\n         LR    R1,R0\n         BCT   R1,*+L'*+6\n         OC    CMNME,4(R6)         <<EXECUTED>>\n         EX    R1,*-6              UPPERCASE COMMAND NAME\n         CLI   CMNME+4,C'N'        ON PROCESS ?\n         BE    *+L'*+4             YES\n         OI    SWPRCS,PROFF        NO, SAY OFF PROCESS\n         LH    R1,0(R6)            GET LENGTH\n         SH    R1,=H'4'            -4 (PREFIX)\n         CH    R1,2(R6)            ANY OPERAND ?\n         BH    NMOPSP1             YES\n         XR    R15,R15             NO, NONE, SET RC=0\n         B     PCOPNZ\nNMOPSP1  SH    R1,2(R6)            LENGTH OF OPERANDS (-OFFSET)\n         LA    R1,31(R1)           BUMP SO SCAN COMPARE DON'T ABEND\n         SRL   R1,3\n         SLL   R1,3\n         ST    R1,OPLGTH           SAVE LENGTH OF OPERANDS AREA\n         LR    R3,R1\n        GETMAIN R,LV=(1)\n         ST    R1,OPADDR           SAVE ADDRESS OF OPERANDS AREA\n         LR    R2,R1\n         LR    R4,R1\n         LA    R5,C' '\n         SLL   R5,24\n         MVCL  R2,R4               SET AREA TO BLANKS\n         LH    R1,0(R6)            GET LENGTH\n         SH    R1,=H'4'            -4 (PREFIX)\n         LH    R2,2(R6)            OFFSET TO OPERANDS\n         LA    R3,4(R6,R2)         START OF OPERANDS\n         SR    R1,R2               LENGTH OF OPERANDS\n         BCTR  R1,0\n         XR    R0,R0\n         SLDL  R0,24\n         SRL   R1,24\n         L     R2,OPADDR\n         LTR   R0,R0               COPY AND UPPER CASE OPERANDS\n         BZ    NMOPSP3\nNMOPSP2  OC    0(256,R2),0(R3)\n         LA    R2,256(R2)\n         LA    R3,256(R3)\n         BCT   R0,NMOPSP2\n         B     NMOPSP3\n         OC    0(*-*,R2),0(R3)     <<EXECUTED>>\nNMOPSP3  EX    R1,*-6\n         L     R3,OPADDR\n         LA    R4,1\n         L     R5,OPLGTH\n         ALR   R5,R3\n         SLR   R5,R4\n        @CALL  OPSCN               GO SCAN OPERANDS\n         LR    R6,R15              RETAIN RC\n         LM    R0,R1,OPLGTH\n        FREEMAIN R,LV=(0),A=(1)\n         LTR   R15,R6              TEST AND SET BACK RC\n         BNZ   PCOPNZ\n         SPACE 1\n*------- PROCESS AUTOMATIC OPERANDS\n         SPACE 1\n         XR    R8,R8\n        @IFKW  AUTO,S,ELSE=AUCMDT\n         L     R3,=A(AUWKL)\n        GETMAIN R,LV=(R3)\n         LR    R8,R1\n         LR    R2,R1\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         USING AUWKA,R8\n         MVI   INOPR,INOPRI        INITIAL\n        @CALL  PTLDS\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   AUEX                ERROR\n         LA    R1,AOSNME\n         MVI   INOPR,INOPRP        POSITION TO MEMBER\n        @CALL  PTLDS\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   AUEX                ERROR\n         TM    INSWS,INSWSM        MEMBER NOT FOUND ?\n         BO    AUEX                YES, NO OPERANDS\nAUOPSP1  MVI   INOPR,INOPRR        READ MEMBER\n        @CALL  PTLDS\n         LTR   R15,R15             HOW COMPLETE ?\n         BNZ   AUEX                ERROR\n         ICM   R1,B'1111',INCBP    MEMBER EOF ?\n         BZ    AUOPSP2             YES, SKIP\n         CLI   0(R1),C'*'          NO, COMMENT ?\n         BNE   AUOPSP2             NO\n         LA    R0,1                YES, COUNT ALSO THIS CARD\n         A     R0,AUCDS\n         ST    R0,AUCDS\n         B     AUOPSP1\nAUOPSP2 @CALL  PRAOS               NO, PROCESS AUTOMATIC OP. SEL.\n         LTR   R6,R15              HOW COMPLETE ?\n         BZ    AUOPSP1             CONTINUE\n         BP    AUEX                ERROR, SOMETHING WRONG IN MEMBER\n         OC    AUPOP,AUPOP\n         BZ    AUCMDT\n         TM    SWSTTS,RCLSTX\n         BZ    AUOPSP3\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(18),=CL18'AUTOMATIC OPERANDS'\n         MVC   WKLINE+28(19),=CL19' SUPPLIED (L=   ) :'\n         L     R4,AUPOP\n         CVD   R4,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+41(3),WORKD+1\n         LA    R1,WKLINE\n         LA    R0,47\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'LSTSCL),LSTSCL\n         LA    R1,WKLINE\n         LA    R0,10+L'LSTSCL\n        @CALL  PUTLNE\n         LA    R3,AUSOP\n         LA    R5,60\n         BAS   R6,AUOPSL\n         CLI   STCMDL,0\n         BE    AUOPSP3\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(29),=CL29'COMMAND(S) SUPPLIED (L=   ) :'\n         XR    R4,R4\n         IC    R4,STCMDL\n         CVD   R4,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+33(3),WORKD+1\n         LA    R1,WKLINE\n         LA    R0,39\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'LSTSCL),LSTSCL\n         LA    R1,WKLINE\n         LA    R0,10+L'LSTSCL\n        @CALL  PUTLNE\n         LA    R3,STCMDT\n         LA    R6,AUOPSP3\nAUOPSL   MVC   WKLINE(L'MSID),MSID\n         MVI   WKLINE+10,C' '\n         MVC   WKLINE+11(59),WKLINE+10\n         CLR   R4,R5\n         BNH   *+L'*+6\n         LR    R2,R5\n         B     *+L'*+2\n         LR    R2,R4\n         SR    R4,R2\n         BCT   R2,*+L'*+6\n         MVC   WKLINE+10(*-*),0(R3) <<EXECUTED>>\n         EX    R2,*-6\n         LA    R3,1(R3,R2)\n         LA    R1,WKLINE\n         LA    R0,70\n        @CALL  PUTLNE\n         LTR   R4,R4\n         BP    AUOPSL\n         BR    R6\nAUOPSP3  LA    R3,AUSOP\n         LA    R4,1\n         L     R5,AUPOP\n         ALR   R5,R3\n         SLR   R5,R4\n         OI    AUFLGS,AUKWRJ\n         NI    AUFLGS,255-ALLORJ\n        @CALL  OPSCN               GO SCAN OPERANDS\n         LTR   R6,R15              TEST AND SET BACK RC\n         BNZ   PCOPNX\nAUCMDT  @IFKW  ACS,S,ELSE=AUCMDX\n        @IFKW  CMD,U,GOTO=AUSACS1\n         CLI   STCMDL,1            ANY COMMAND(S) ?\n         BL    AUSACS2             NO\n         BH    AUACST              YES\n         CLI   STCMDT,C'?'         IS IT ON TERMINAL REQUEST ?\n         BE    AUACST              YES\n         CLI   STCMDT,C'*'         NO, IS IT AN AUTOMATIC REQUEST ?\n         BE    AUCMDX              YES\nAUACST  @SETKW ACS,U               IGNORE ACS REQUEST\n         MVC   ACSNME,=CL8' '\n         B     AUCMDX\nAUSACS1 @SETKW CMD,N               SET AUTOMATIC REQUEST\nAUSACS2  MVI   STCMDL,1\n         MVI   STCMDT,C'*'\nAUCMDX   XR    R6,R6               SET RC=0 (OK)\n         B     PCOPNX\nAUEX     MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(18),=CL18'AUTOMATIC OPERANDS'\n         MVC   WKLINE+28(30),=CL30' SELECTION FAILURE (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,58\n        @CALL  PUTLNE\n         LA    R6,4                SET RC=4 (ERROR)\nPCOPNX   LTR   R1,R8\n         BZ    PCOPNY\n         L     R0,=A(AUWKL)\n        FREEMAIN R,A=(1),LV=(0)\n         DROP  R8\nPCOPNY   LR    R15,R6              SET RC=0/4\nPCOPNZ  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                    S C A N     O P E R A N D S                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- OPSCN - SCAN OPERANDS\n*              R3  : SCAN START POINTER\n*              R4  : SCAN INCREMENT VALUE\n*              R5  : SCAN END POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n         SPACE 1\nOPSCN   @ENTER ,\n         SPACE 1\n*------- ANALYZE COMMAND OPERANDS\n         SPACE 1\nOPSCAN   CLI   0(R3),C' '\n         BNE   OPFND\nOPLOOP   BXLE  R3,R4,OPSCAN\n         B     OPSCNX\nOPNEXT   LA    R3,0(R3,R7)\n         BXLE  R3,R4,*+L'*+4\n         B     OPSCNX\n         CLI   0(R3),C' '\n         BE    OPLOOP\n         MVC   WKLINE+23(19),=CL19'<-SEPARATOR MISSING'\n         B     OPTERX\nOPFND   @CHKO  NOLIST,NOMSG,NOLST,WHERE=OPCHKW,MATCH=OPLST1\n        @CHKO  LIST,MSG,LST,WHERE=OPCHKW,MATCH=OPLST2\n        @CHKO  ?,WHERE=OPCHKW,MATCH=OPINF1\n         TM    AUFLGS,AUKWRJ\n         BO    OPNAUT\n        @CHKO  AUTO,AOS,AO,WHERE=OPCHKW,MATCH=OPAOS1\n         XR    R7,R7               CHECK IF ONLY A OR A=\n         CLI   0(R3),C'A'\n         BNE   OPNAUT\n         CLR   R3,R5\n         BNL   OPAOS1              OK, GO PROCESS AUTO\n         CLI   1(R3),C' '\n         BE    OPAOS1              OK, GO PROCESS AUTO\n         CLI   1(R3),C'='\n         BE    OPAOS1              OK, GO PROCESS AUTO\nOPNAUT   TM    AUFLGS,ALLORJ\n         BO    OPTRC0\n         L     R1,AWK              PREPARE WORK-AREA\n         USING WACOM,R1\n         LA    R15,OPCHKW\n         ST    R15,AOCKR\n         MVC   ZGRNM,GRNM\n         MVC   ZUSID,USID\n         MVC   ZTDSI,TDSI\n         MVC   ZXDSI,XDSI\n         MVC   ZSWSTTS,SWSTTS\n         NI    ZSWSTTS,TDSPLY\n         LR    R0,R4\n         TM    SWPRCS,PROFF\n         BZ    *+L'*+2\n         XR    R0,R0\n         L     R15,ASOK\n        @CALL  ,                   GO SCAN OPERANDS\n         MVC   TDSI,ZTDSI          BACK FROM WORK-AREA\n         MVC   XDSI,ZXDSI\n         DROP  R1\n         CH    R15,=H'4'\n         BL    OPNEXT\n         BE    OPDUPL\n         LTR   R0,R0\n         BZ    OPYEND\n        @CHKO  IDV,I,WHERE=OPCHKW,MATCH=OPIDV1\n        @CHKO  DDT,DD,WHERE=OPCHKW,MATCH=OPDDT1\n        @CHKO  ALT,AL,WHERE=OPCHKW,MATCH=OPALT1\nOPYEND  @CHKO  ACS,AC,WHERE=OPCHKW,MATCH=OPACS1\n        @CHKO  'C=','CMD=','CMDS=','COMMAND=','COMMANDS=',             X\n               WHERE=OPCHKW,MATCH=OPCMD1\n         TM    AUFLGS,AUKWRJ\n         BZ    OPTRC0\nOPTERR   MVC   WKLINE+23(19),=CL19'... UNKNOWN OPERAND'\nOPTERX   MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(3),=CL3'-> '\n         MVC   WKLINE+13(10),0(R3)\n         MVC   WKLINE+42(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,73\n         B     OPERRM\nOPLST1  @IFKW  LIST,U,ELSE=OPNEXT\n        @SETKW LIST,N,GOTO=OPNEXT\nOPLST2  @IFKW  LIST,S,GOTO=OPNEXT\n        @SETKW LIST,S,GOTO=OPNEXT\n         SPACE 1\n*------- GET MEMBERS NAMES\n         SPACE 1\nOPAOS1  @IFKW  AUTO,U,ELSE=OPDUPL\n         XR    R14,R14\n         IC    R14,LGNKW\n         LTR   R14,R14\n         BNP   OPAONK\n         L     R15,AWK\n         USING WACOM,R15\n         BCT   R14,*+L'*+6\n         OC    ZGNKW(*-*),ZGNKW    <<EXECUTED>>\n         EX    R14,*-6\n         BNZ   *+L'*+10\n         DROP  R15\nOPAONK   OC    KWAUTO(AUKCHK),KWAUTO\n         BZ    *+L'*+8\n         LA    R14,OPAOS6-12\n         B     OPEXNRM\n         LA    R15,AOSNME\n         BAS   R14,OPEXNR\n         B     OPAOS3              RETURN +0\n         B     OPAOS2                     +4\n         B     OPAOS4                     +8\n         B     OPAOS6                     +12\nOPAOS2  @SETKW AUTO,N,GOTO=OPAOS5\nOPAOS3   MVC   AOSNME,=CL8'AOS'\nOPAOS4  @SETKW AUTO,S\nOPAOS5   OI    AUFLGS,ALLORJ\n         B     OPLOOP\nOPAOS6   MVC   WKLINE+10(3),=CL8'AOS'\n         B     OPERRM\nOPIDV1  @IFKW  IDV,U,ELSE=OPDUPL\n         LA    R15,IDVNME\n         BAS   R14,OPEXNR\n         B     OPIDV3              RETURN +0\n         B     OPIDV2                     +4\n         B     OPIDV4                     +8\n         B     OPIDV5                     +12\nOPIDV2  @SETKW IDV,N,GOTO=OPLOOP\nOPIDV3   MVC   IDVNME,=CL8'IDV'\nOPIDV4  @SETKW IDV,S,GOTO=OPLOOP\nOPIDV5   MVC   WKLINE+10(3),=CL3'IDV'\n         B     OPERRM\nOPDDT1  @IFKW  DDT,U,ELSE=OPDUPL\n         LA    R15,DDTNME\n         BAS   R14,OPEXNR\n         B     OPDDT3              RETURN +0\n         B     OPDDT2                     +4\n         B     OPDDT4                     +8\n         B     OPDDT5                     +12\nOPDDT2  @SETKW DDT,N,GOTO=OPLOOP\nOPDDT3   MVC   DDTNME,=CL8'DDT'\nOPDDT4  @SETKW DDT,S,GOTO=OPLOOP\nOPDDT5   MVC   WKLINE+10(3),=CL3'DDT'\n         B     OPERRM\nOPALT1  @IFKW  ALT,U,ELSE=OPDUPL\n         LA    R15,ALTNME\n         BAS   R14,OPEXNR\n         B     OPALT3              RETURN +0\n         B     OPALT2                     +4\n         B     OPALT4                     +8\n         B     OPALT5                     +12\nOPALT2  @SETKW ALT,N,GOTO=OPLOOP\nOPALT3   MVC   ALTNME,=CL8'ALT'\nOPALT4  @SETKW ALT,S,GOTO=OPLOOP\nOPALT5   MVC   WKLINE+10(3),=CL3'ALT'\n         B     OPERRM\nOPACS1  @IFKW  ACS,U,ELSE=OPDUPL\n         LA    R15,ACSNME\n         BAS   R14,OPEXNR\n         B     OPACS3              RETURN +0\n         B     OPACS2                     +4\n         B     OPACS4                     +8\n         B     OPACS5                     +12\nOPACS2  @SETKW ACS,N,GOTO=OPLOOP\nOPACS3   MVC   ACSNME,=CL8'ACS'\nOPACS4  @SETKW ACS,S,GOTO=OPLOOP\nOPACS5   MVC   WKLINE+10(3),=CL3'ACS'\n         B     OPERRM\nOPEXNR   LA    R3,0(R3,R7)         EXTRACT NAME ROUTINE\n         BXLE  R3,R4,*+L'*+2\n         BR    R14                 RETURN +0 (DEFAULT)\n         CLI   0(R3),C' '\n         BER   R14                 RETURN +0 (DEFAULT)\n         CLI   0(R3),C'='\n         BNE   OPEXNRM\n         BXLE  R3,R4,*+L'*+4\n         B     4(R14)              RETURN +4 (NONE)\n         CLI   0(R3),C' '\n         BE    4(R14)              RETURN +4 (NONE)\n         LR    R2,R3               NAMES STRING\nOPEXNRC  CLI   0(R3),C'A'          ALPHA\n         BL    OPEXNRM\n         CLI   0(R3),C'Z'\n         BH    OPEXNRM\nOPEXNRN  BXLE  R3,R4,*+L'*+4\n         B     OPEXNRT\n         CLI   0(R3),C' '\n         BE    OPEXNRT\n         CLI   0(R3),C'$'          DOLLAR\n         BE    OPEXNRN\n         CLI   0(R3),C'#'          NUMBER SIGN\n         BE    OPEXNRN\n         CLI   0(R3),C'@'          AT SIGN\n         BE    OPEXNRN\n         CLI   0(R3),C'0'          NUMERIC\n         BL    OPEXNRC\n         CLI   0(R3),C'9'\n         BNH   OPEXNRN\n         B     OPEXNRM\nOPEXNRT  LR    R1,R3\n         SR    R1,R2\n         LA    R0,L'AOSNME         OR L'IDVNME/DDTNME/ALTNME/ACSNME\n         CLR   R1,R0\n         BNH   OPEXNRD\nOPEXNRM  MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+13(14),=CL14'= SYNTAX ERROR'\n         MVC   WKLINE+27(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,58\n         B     12(R14)             RETURN+12 (ERROR)\nOPEXNRD  BCT   R1,*+L'*+6\n         MVC   0(*-*,R15),0(R2)    <<EXECUTED>>\n         EX    R1,*-6\n         B     8(R14)              RETURN+8 (NAME SET)\n         SPACE 1\n*------- DISPLAY INFORMATIONAL MESSAGES\n         SPACE 1\nOPINF1   TM    SWSTTS,RCLSTX       ALREADY DONE ?\n         BO    OPNEXT              YES, DON'T TWICE THESE MESSAGES\n        @IFKW  LIST,S,GOTO=OPINF2\n        @SETKW LIST,S              SET LIST OPTION\nOPINF2   OI    SWSTTS,RCLSTX       SET DISPLAY RC, ... ALSO\n         CLI   UNMEL,0\n         BNE   *+L'*+8\n         CLI   TRSNL,0\n         BE    OPINF5\n         MVC   WKLINE(L'MSID),MSID\n         LA    R2,WKLINE+10\n         CLI   UNMEL,0\n         BE    OPINF3\n         MVC   0(7,R2),=CL7'NAME = '\n         XR    R1,R1\n         IC    R1,UNMEL\n         BCT   R1,*+L'*+6\n         MVC   7(*-*,R2),UNME\n         EX    R1,*-6\n         LA    R2,8(R2,R1)\n         CLI   TRSNL,0\n         BE    OPINF4\n         MVC   0(3,R2),=CL3' / '\n         LA    R2,3(R2)\nOPINF3   MVC   0(14,R2),=CL14'TERMINAL-ID = '\n         XR    R1,R1\n         IC    R1,TRSNL\n         BCT   R1,*+L'*+6\n         MVC   14(*-*,R2),TRSN\n         EX    R1,*-6\n         LA    R2,15(R2,R1)\nOPINF4   LA    R1,WKLINE\n         LR    R0,R2\n         SLR   R0,R1\n        @CALL  PUTLNE\nOPINF5   CLI   USIDL,0\n         BNE   *+L'*+16\n         CLI   GRNML,0\n         BNE   *+L'*+8\n         CLI   PNMEL,0\n         BE    OPNEXT\n         MVC   WKLINE(L'MSID),MSID\n         LA    R2,WKLINE+10\n         CLI   USIDL,0\n         BE    OPINF6\n         MVC   0(7,R2),=CL7'USER = '\n         XR    R1,R1\n         IC    R1,USIDL\n         BCT   R1,*+L'*+6\n         MVC   7(*-*,R2),USID\n         EX    R1,*-6\n         LA    R2,8(R2,R1)\n         CLI   GRNML,0\n         BNE   *+L'*+8\n         CLI   PNMEL,0\n         BE    OPINF8\n         MVC   0(3,R2),=CL3' / '\n         LA    R2,3(R2)\nOPINF6   CLI   GRNML,0\n         BE    OPINF7\n         MVC   0(8,R2),=CL8'GROUP = '\n         XR    R1,R1\n         IC    R1,GRNML\n         BCT   R1,*+L'*+6\n         MVC   8(*-*,R2),GRNM\n         EX    R1,*-6\n         LA    R2,9(R2,R1)\n         CLI   GRNML,0\n         BE    OPINF7\n         CLI   PNMEL,0\n         BE    OPINF8\n         MVC   0(3,R2),=CL3' / '\n         LA    R2,3(R2)\nOPINF7   CLI   PNMEL,0\n         BE    OPINF8\n         MVC   0(12,R2),=CL12'PROCEDURE = '\n         XR    R1,R1\n         IC    R1,PNMEL\n         BCT   R1,*+L'*+6\n         MVC   12(*-*,R2),PNME\n         EX    R1,*-6\n         LA    R2,13(R2,R1)\nOPINF8   LA    R1,WKLINE\n         LR    R0,R2\n         SLR   R0,R1\n        @CALL  PUTLNE\n         B     OPNEXT\n         SPACE 1\n*------- GET ANY SPECIAL REQUEST (TEST PURPOSE)\n         SPACE 1\nOPTRC0   TM    SWSTTS,WIZARD\n         BZ    OPTRCX\n         L     R1,AWK              PREPARE WORK-AREA\n         USING WACOM,R1\n         LA    R15,OPCHKW\n         ST    R15,AOCKR\n         MVC   ZGRNM,GRNM\n         MVC   ZUSID,USID\n         MVC   ZTDSI,TDSI\n         MVC   ZXDSI,XDSI\n         MVC   ZSWSTTS,SWSTTS\n         NI    ZSWSTTS,TDSPLY\n         LNR   R0,R4\n         L     R15,ASOK\n        @CALL  ,                   GO SCAN OPERANDS\n         MVC   TDSI,ZTDSI          BACK FROM WORK-AREA\n         MVC   XDSI,ZXDSI\n         DROP  R1\n         CH    R15,=H'4'\n         BL    OPNEXT\n         BE    OPDUPL\n        @CHKO  DSAB,WHERE=OPCHKW,MATCH=OPTRC1\n        @CHKO  LINE,WHERE=OPCHKW,MATCH=OPTLNE\n        @CHKO  SCREEN,WHERE=OPCHKW,MATCH=OPTSCR\nOPTRCX   TM    AUFLGS,ALLORJ\n         BZ    OPTERR\n         LA    R14,OPAOS6-12\n         B     OPEXNRM\n         SPACE 1\nOPTRC1  @IFKW  DSAB,U,ELSE=OPDUPL\n        @SETKW DSAB,N,GOTO=OPNEXT\nOPTLNE  @IFKW  TYPE,U,ELSE=OPDUPL\n        @SETKW TYPE,N,GOTO=OPNEXT\nOPTSCR  @IFKW  TYPE,U,ELSE=OPDUPL\n        @SETKW TYPE,S,GOTO=OPNEXT\n         SPACE 1\n*------- GET ANY COMMAND(S) TO BE STACKED AT END\n         SPACE 1\nOPCMD1  @IFKW  CMD,U,GOTO=OPCMDPR\nOPDUPL   MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(10),0(R3)\n         MVC   WKLINE+20(22),=CL22'... DUPLICATED OPERAND'\n         MVC   WKLINE+42(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,73\n         B     OPERRM\nOPCMDPR @SETKW CMD,N\n         LA    R3,0(R3,R7)\n         BXLE  R3,R4,*+L'*+4\n         B     OPSCNX\n         CLI   0(R3),C''''\n         BE    OPCMDQT\n         LR    R2,R3               STRING COMMAND\n         BXLE  R3,R4,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R3),C' '\n         BNE   *-12\n         LR    R1,R3\n         SR    R1,R2\n         CH    R1,=Y(L'STCMDT)\n         BNH   OPCMDST\nOPCMDTL  MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(16),=CL16'COMMAND TOO LONG'\n         MVC   WKLINE+26(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,57\n         B     OPERRM\nOPCMDST  STC   R1,STCMDL\n         BCT   R1,*+L'*+6\n         MVC   STCMDT(*-*),0(R2)   <<EXECUTED>>\n         EX    R1,*-6\n         B     OPLOOP\nOPCMDQT  BXLE  R3,R4,OPCMDLQ       QUOTED STRING COMMAND(S)\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(22),=CL22'QUOTED COMMAND MISSING'\n         MVC   WKLINE+32(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,63\n         B     OPERRM\nOPCMDLQ  XR    R1,R1\n         LA    R2,STCMDT\n         CLI   0(R3),C' '          SKIP INITIAL BLANKS AND SEPARATORS\n         BE    *+L'*+8\n         CLI   0(R3),C';'\n         BNE   OPCMDQS\n         BXLE  R3,R4,*-16\nOPCMDQM  MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(28),=CL28'COMMAND(S) END QUOTE MISSING'\n         MVC   WKLINE+38(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,69\n         B     OPERRM\nOPCMDQS  CLI   0(R3),C''''\n         BE    OPCMDCQ\nOPCMDMV  LA    R1,1(R1)\n         CH    R1,=Y(L'STCMDT)\n         BH    OPCMDTL\n         MVC   0(1,R2),0(R3)\n         CLI   0(R2),C';'          SEPARATOR JUST MOVED ?\n         BE    *+L'*+12            YES\n         LA    R2,1(R2)            NO\n         BXLE  R3,R4,OPCMDQS\n         B     OPCMDQM\n         MVI   0(R2),C' '          SUPPRESS PREVIOUS BLANKS IF ANY\n         BCTR  R1,0\n         BCTR  R2,0\n         CLI   0(R2),C' '\n         BE    *-8\n         MVI   1(R2),C';'\n         LA    R1,1(R1)\n         LA    R2,2(R2)\nOPCMDEL  BXLE  R3,R4,*+L'*+4\n         B     OPCMDQM\n         CLI   0(R3),C' '          SKIP UNNEEDED BLANKS AND SEPARATORS\n         BE    OPCMDEL\n         CLI   0(R3),C';'\n         BE    OPCMDEL\n         B     OPCMDQS\nOPCMDCQ  BXLE  R3,R4,*+L'*+4\n         B     OPCMDEX\n         CLI   0(R3),C''''\n         BE    OPCMDMV\n         CLI   0(R3),C' '\n         BE    OPCMDEX\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(22),=CL22'COMMAND(S) QUOTE ERROR'\n         MVC   WKLINE+32(31),=CL31' - REQUEST REJECTED (NONE DONE)'\n         LA    R1,WKLINE\n         LA    R0,63\nOPERRM  @CALL  PUTLNE\n         LA    R15,4               SET RC=4\n         B     OPSCNZ\nOPCMDEX  STC   R1,STCMDL\n         LTR   R1,R1\n         BNP   OPLOOP\n         LA    R2,STCMDT-1(R1)\nOPCMDE1  CLI   0(R2),C' '          ELIMINATION OF LAST BLANK(S)\n         BE    *+L'*+8\n         CLI   0(R2),C';'          ELIMINATION OF LAST SEPARATOR(S)\n         BNE   OPCMDE2\n         BCTR  R2,0\n         BCT   R1,OPCMDE1\n         MVI   STCMDL,0\n         B     OPLOOP\nOPCMDE2  STC   R1,STCMDL\n         B     OPLOOP\n         SPACE 1\n*------- OPCHKW - OPERANDS CHECK KEYWORD ROUTINE\n*               R0  : WORK REGISTER\n*               R3  : CURRENT TEXT POINTER\n*               R4  : TEXT POINTER INCREMENT (DON'T MODIFY IT)\n*               R5  : END OF TEXT POINTER\n*               R6  : LINK REGISTER - RETURN +0 = NO MATCH\n*                                            +4 = OK, MATCH\n*                                            +8 = KEYWORDS LIST\n*               R7  : WORK REGISTER - AT RETURN +4 (OK) = LENGTH OF\n*                                                         KEYWORD-1\n*               R15 : WORK REGISTER\n*        KEYWORDS LIST :       DC   AL1(L'KW1-1)\n*                        KW1   DC   C'...KEYWORD...'\n*                        ...   ...  ...\n*                              DC   AL1(255) <--- END OF LIST\n*        NOTE : YOU MAY USE MACRO @CHKO TO GENERATE THE CALL, THE\n*               RETURNS AND THE KEYWORDS LIST.\n*               SYNTAX : @CHKO  ...,...,...,   <- ONE OR MORE KEYWORDS\n*                               WHERE=OPCHKW,NOMATCH=...,MATCH=...\n*                 NOTE : IF NOMATCH= AND/OR MATCH= ARE NOT SPECIFIED,\n*                        THEN THE CORRESPONDING BRANCH IS GENERATED TO\n*                        CONTINUE IN SEQUENCE.\n         SPACE 1\nOPCHKW  @GCHKR R3,R5\n         SPACE 1\nOPSCNX   XR    R15,R15             SET RC=0\nOPSCNZ  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        PROCESS AUTOMATIC OPERANDS SELECTION                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- PRAOS - AUTOMATIC OPERANDS SELECTION\n*              AT ENTRY : \"INCBP\" = LOGICAL RECORD POINTER OR 0 IF EOF\n*              R8  : AUTOMATIC OPERANDS WORK-AREA POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n*                                                  - = EOF PROCESSED\n         SPACE 1\nPRAOS   @ENTER ,\n         USING AUWKA,R8\n         ICM   R1,B'1111',INCBP    GET CARD POINTER\n         BZ    AOTEOF              MEMBER EOF\n         LA    R3,71(R1)\n         LA    R2,1\n         LR    R0,R2               ADD ONE TO CARDS COUNT\n         A     R0,AUCDS\n         ST    R0,AUCDS\n         NI    AUSWS,255-AUSWSN    SET START OF A CARD\n         CLI   0(R1),C' '\n         BNE   PRAOS2\nPRAOS1   BXLE  R1,R2,*-8\n         B     PRONXT\n         CLI   0(R1),C' '\n         BE    PRAOS1\nPRONOT   BXLE  R1,R2,*-8\n         B     PRONXT              NO, NEXT CARD\nPRAOS2   TM    AUSWS,AUSWSN        START OF A CARD ?\n         BO    AOWTG               NO\n         OI    AUSWS,AUSWSN        YES, SET START OF CARD DONE\n         CLI   0(R1),C'*'          COMMENT FOLLOWS ?\n         BNE   AOWTG               NO\n         B     PRONXT              YES, SKIP CARD\nPROSKP   MVI   AUSCW,0             RESTART SCAN TO NEXT IF-\n         MVI   AUSCV,0\n         NI    AUKSW,255-AUKWRZ    RESET ALL KEYWORDS DONE\nPROCNT   CLR   R1,R3\n         BNH   PRAOS1\n         B     PRONXT\nAOWTG    XR    R15,R15             WHERE TO GO\n         IC    R15,AUSCW\n         CL    R15,AOCWTG\n         BH    AOERR5\n         SLL   R15,2\n         B     AOBWTG(R15)         GO TO\n         CNOP  0,4\nAOBWTG   B     AOSCO1              = 0\n         B     AOSCN1                1\n         B     AOTRM0                2\n         B     AOCHK0                3\n         B     AOPND0                4\nAOCWTG   DC    AL4(((*-AOBWTG)/L'AOBWTG)-1)\n         SPACE 1\nAOSCO1   TM    SWPRCS,PROFF        SEARCH FOR IF-ON OR IF-OFF\n         BO    AOSCO2\n        @CHKW  IF-ON,WHERE=AOCHKW,NOMATCH=PRONOT,MATCH=AOSCO3\nAOSCO2  @CHKW  IF-OFF,WHERE=AOCHKW,NOMATCH=PRONOT,MATCH=AOSCO3\nAOSCO3   MVI   AUSCW,1\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     PRONXT\n         CLI   0(R1),C' '\n         BE    PROCNT\n         B     AOERR1              SYNTAX ERROR ...\n         SPACE 1\nAOSCN1  @CHKW  'T=','TERM=','TERMINAL=',                               X\n               WHERE=AOCHKW,MATCH=AOTRM1\n        @CHKW  'U=','USER=','USERS=',                                  X\n               WHERE=AOCHKW,MATCH=AOUSR1\n        @CHKW  'G=','GROUP=','GROUPS=',                                X\n               WHERE=AOCHKW,MATCH=AOGRP1\n        @CHKW  'P=','PROC=','PROCS=','PROCEDURE=','PROCEDURES=',       X\n               WHERE=AOCHKW,MATCH=AOPRC1\n        @CHKW  'O=','OP=','OPS=','OPND=','OPNDS=','OPERAND=',          X\n               'OPERANDS=',WHERE=AOCHKW,NOMATCH=AOERR1,MATCH=AOPND1\n         SPACE 1\nAOTRM0   XR    R15,R15             WHERE TO GO\n         IC    R15,AUSCV\n         CL    R15,AOCTRM\n         BH    AOERR6\n         SLL   R15,2\n         B     AOBTRM(R15)         GO TO\n         CNOP  0,4\nAOBTRM   B     AOTRM2              = 0\nAOCTRM   DC    AL4(((*-AOBTRM)/L'AOBTRM)-1)\nAOTRM1   TM    AUKSW,AUKWT         PROCESS TERMINAL\n         BO    AOERR1              SYNTAX ERROR ...\n         OI    AUKSW,AUKWT\n         MVI   AUSCW,2\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     AOTRM2\n         MVI   AUSCV,0\n         B     PRONXT\nAOTRM2   BAS   R14,AOVERK\n        @CHKW  S,SCREEN,D,DISPLAY,WHERE=AOCHKW,MATCH=AOTRM3\n        @CHKW  L,B,LINE,BACK,LINES,BACKGROUND,                         X\n               WHERE=AOCHKW,NOMATCH=AOERR1\n         TM    SWSTTS,TDSPLY       TERMINAL IS A SCREEN ?\n         BO    PROSKP              YES, SKIP\n         B     AOTRM4              NO, OK\nAOTRM3   TM    SWSTTS,TDSPLY       TERMINAL IS A SCREEN ?\n         BZ    PROSKP              NO, SKIP\nAOTRM4   MVI   AUSCW,1             YES, OK\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     PRONXT\n         CLI   0(R1),C' '\n         BE    PROCNT\n         B     AOERR1              SYNTAX ERROR ...\n         SPACE 1\nAOUSR1   TM    AUKSW,AUKWU         PROCESS USER=\n         BO    AOERR1              SYNTAX ERROR ...\n         MVC   AUNMEL,USIDL\n         MVC   AUNME,USID\n         OI    AUKSW,AUKWU\n         B     AOCHK1\nAOGRP1   TM    AUKSW,AUKWG         PROCESS GROUP=\n         BO    AOERR1              SYNTAX ERROR ...\n         MVC   AUNMEL,GRNML\n         MVC   AUNME,GRNM\n         OI    AUKSW,AUKWG\n         B     AOCHK1\nAOPRC1   TM    AUKSW,AUKWP         PROCESS PROCEDURE=\n         BO    AOERR1              SYNTAX ERROR ...\n         MVC   AUNMEL,PNMEL\n         MVC   AUNME,PNME\n         OI    AUKSW,AUKWP\n         B     AOCHK1\nAOCHK0   XR    R15,R15             WHERE TO GO\n         IC    R15,AUSCV\n         CL    R15,AOCCHK\n         BH    AOERR7\n         SLL   R15,2\n         B     AOBCHK(R15)         GO TO\n         CNOP  0,4\nAOBCHK   B     AOCHK2              = 0\n         B     AOCHK4                1\n         B     AOCHK11               2\n         B     AOCHK22               3\nAOCCHK   DC    AL4(((*-AOBCHK)/L'AOBCHK)-1)\nAOCHK1   MVI   AUSCW,3\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     AOCHK2\n         MVI   AUSCV,0\n         B     PRONXT\nAOCHK2   BAS   R14,AOVERK\n         CLI   0(R1),C'('          MULTIPLE TEST ?\n         BE    AOCHK3              YES\n         LR    R4,R1               NO, SINGLE\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         BAS   R14,AOCHKR\n         B     PROSKP              +0 - CANNOT OR NO MATCH\n         MVI   AUSCW,1             +4 - OK, MATCH\n         B     PROCNT\nAOCHK3   BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     AOCHK4\n         MVI   AUSCV,1\n         B     PRONXT\nAOCHK4   BAS   R14,AOVERK\n         LR    R4,R1\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+16\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         CLI   0(R1),C')'\n         BNE   *-20\n         BAS   R14,AOCHKR\n         B     AOCHK10             +0 - CANNOT OR NO MATCH\n         B     AOCHK20             +4 - OK, MATCH\nAOCHK10  CLR   R1,R3\n         BH    *+L'*+20\n         CLI   0(R1),C')'          IS IT THE END ?\n         BE    AOCHK12             YES\n         CLI   0(R1),C' '\n         BNE   AOCHK4              CHECK THE NEXT\n         BXLE  R1,R2,*-16\n         MVI   AUSCV,2\n         B     PRONXT\nAOCHK11  CLI   0(R1),C')'          IS IT THE END ?\n         BNE   AOCHK4              NO, CHECK THE NEXT\nAOCHK12  BXLE  R1,R2,*+L'*+4\n         B     PROSKP\n         CLI   0(R1),C' '\n         BE    PROSKP\n         B     AOERR1              SYNTAX ERROR ...\nAOCHK20  CLR   R1,R3\n         BNH   AOCHK22\nAOCHK21  MVI   AUSCV,3\n         B     PRONXT\nAOCHK22  BAS   R14,AOVERK\n         CLI   0(R1),C')'          IS IT THE END ?\n         BE    *+L'*+8             YES\n         BXLE  R1,R2,AOCHK22\n         B     AOCHK21\n         MVI   AUSCW,1\n         BXLE  R1,R2,*+L'*+4\n         B     PRONXT\n         CLI   0(R1),C' '\n         BE    PROCNT\n         B     AOERR1              SYNTAX ERROR ...\nAOCHKR   LR    R5,R1               CHECK ROUTINE\n         SLR   R5,R4               R14 = LINK REGISTER\n         CLI   0(R4),C'.'                RETURN +0 = NO MATCH\n         BE    AOCHKR1                          +4 = OK, MATCH\n         CH    R5,=H'8'\n         BH    AOERR2              NAME TOO LONG ...\n         MVI   WORKD,C' '\n         MVC   WORKD+1(L'WORKD-1),WORKD\n         BCT   R5,*+L'*+6\n         MVC   WORKD(*-*),0(R4)    <<EXECUTED>>\n         EX    R5,*-6\n         CLC   AUNME,WORKD\n         BNER  R14                 +0, NO MATCH\n         B     4(R14)              +4, OK, MATCH\nAOCHKR1  BCT   R5,*+L'*+4\n         B     AOERR1              SYNTAX ERROR ...\n         CH    R5,=H'8'\n         BH    AOERR2              NAME TOO LONG ...\n         CLM   R5,B'0001',AUNMEL\n         BHR   R14                 +0, CANNOT MATCH\n         BCT   R5,*+L'*+6\n         CLC   AUNME(*-*),1(R4)    <<EXECUTED>>\n         EX    R5,*-6\n         BNER  R14                 +0, NO MATCH\n         B     4(R14)              +4, OK, MATCH\n         SPACE 1\nAOPND0   XR    R15,R15             WHERE TO GO\n         IC    R15,AUSCV\n         CL    R15,AOCOPN\n         BH    AOERR8\n         SLL   R15,2\n         B     AOBOPN(R15)         GO TO\n         CNOP  0,4\nAOBOPN   B     AOPND4              = 0\n         B     AOPND7                1\n         B     AOPND10               2\n         B     AOPND12               3\n         B     AOPND15               4\n         B     AOPND17               5\nAOCOPN   DC    AL4(((*-AOBOPN)/L'AOBOPN)-1)\nAOPND1   MVI   AUSCW,4             PROCESS OPERAND(S)\n         XR    R4,R4\n         LA    R5,AUSOP\n         STM   R4,R5,AUPOP\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     AOPND3\nAOPND2   CLI   0(R1),C' '\n         BE    *-12\n         B     AOPND4\nAOPND3   MVI   AUSCV,0\n         B     PRONXT\nAOPND4   BAS   R14,AOVERS\n         B     *+L'*+4             +0 - NO MATCH\n         B     PRAOSEOF            +4 - MATCH, END\n        @CHKW  'C=','CMD=','CMDS=','COMMAND=','COMMANDS=',             X\n               WHERE=AOCHKW,MATCH=AOPND6\n         LR    R14,R1\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         LR    R15,R1\n         SLR   R15,R14\n         LM    R4,R5,AUPOP\n         ALR   R4,R15\n         CH    R4,=Y(L'STCMDT)\n         BH    AOERR3              OPERAND TOO LONG ...\n         BCT   R15,*+L'*+6\n         MVC   0(*-*,R5),0(R14)    <<EXECUTED>>\n         EX    R15,*-6\n         LA    R5,1(R5,R15)\n         LA    R0,1(R4)\n         CH    R0,=Y(L'STCMDT)\n         BH    *+L'*+10\n         LR    R4,R0\n         MVI   0(R5),C' '\n         LA    R5,1(R5)\n         STM   R4,R5,AUPOP\nAOPND5   CLR   R1,R3\n         BNH   AOPND2\n         B     AOPND3\nAOPND6   CLI   STCMDL,0\n         BNE   AOERR1\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     AOPND7\n         MVI   AUSCV,1\n         B     PRONXT\nAOPND7   BAS   R14,AOVERK\n        @CHKW  'C=','CMD=','CMDS=','COMMAND=','COMMANDS=',             X\n               WHERE=AOCHKW,MATCH=AOERR1\n         CLI   0(R1),C''''         QUOTED OPERANDS ?\n         BE    AOPND8              YES\n         LR    R4,R1               NO, STRING OPERAND\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         LR    R5,R1\n         SLR   R5,R4\n         CH    R5,=Y(L'STCMDT)\n         BH    AOERR3              OPERAND TOO LONG ...\n         STC   R5,STCMDL\n         BCT   R5,*+L'*+6\n         MVC   STCMDT(*-*),0(R4)   <<EXECUTED>>\n         EX    R5,*-6\n         B     AOPND5\nAOPND8   XR    R4,R4\n         LA    R5,AUCMD\nAOPND9   BXLE  R1,R2,AOPND10+L'AOPND10\n         STM   R4,R5,AUQTC\n         MVI   AUSCV,2\n         B     PRONXT\nAOPND10  LM    R4,R5,AUQTC\n         CLI   0(R1),C' '          SKIP INITIAL BLANKS AND SEPARATORS\n         BE    *+L'*+8\n         CLI   0(R1),C';'\n         BNE   AOPND12+L'AOPND12\n         BXLE  R1,R2,*-16\n         B     AOPND9+L'AOPND9     OPERAND QUOTES ERROR\nAOPND11  LA    R5,1(R5)\n         BXLE  R1,R2,AOPND12+L'AOPND12\n         STM   R4,R5,AUQTC\n         MVI   AUSCV,3\n         B     PRONXT\nAOPND12  LM    R4,R5,AUQTC\n         CLI   0(R1),C''''\n         BE    AOPND16\nAOPND13  LA    R4,1(R4)\n         CH    R4,=Y(L'STCMDT)\n         BH    AOERR3\n         MVC   0(1,R5),0(R1)\n         CLI   0(R5),C';'          SEPARATOR JUST MOVED ?\n         BNE   AOPND11             NO\n         MVI   0(R5),C' '          SUPPRESS PREVIOUS BLANKS IF ANY\n         BCTR  R4,0\n         BCTR  R5,0\n         CLI   0(R5),C' '\n         BE    *-8\n         MVI   1(R5),C';'\n         LA    R4,1(R4)\n         LA    R5,2(R5)\nAOPND14  BXLE  R1,R2,AOPND15+L'AOPND15\n         STM   R4,R5,AUQTC\n         MVI   AUSCV,4\n         B     PRONXT\nAOPND15  LM    R4,R5,AUQTC\n         CLI   0(R1),C' '          SKIP UNNEEDED BLANKS AND SEPARATORS\n         BE    AOPND14\n         CLI   0(R1),C';'\n         BE    AOPND14\n         B     AOPND12+L'AOPND12\nAOPND16  BXLE  R1,R2,AOPND17+L'AOPND17\n         STM   R4,R5,AUQTC\n         MVI   AUSCV,5\n         B     PRONXT\nAOPND17  LM    R4,R5,AUQTC\n         CLI   0(R1),C''''\n         BE    AOPND13\n         CLI   0(R1),C' '\n         BNE   AOERR4              OPERAND QUOTES ERROR ...\n         STC   R4,STCMDL\n         LTR   R4,R4\n         BNP   AOPND5\n         LA    R5,AUCMD-1(R4)\nAOPND18  CLI   0(R5),C' '          ELIMINATION OF LAST BLANK(S)\n         BE    *+L'*+8\n         CLI   0(R5),C';'          ELIMINATION OF LAST SEPARATOR(S)\n         BNE   AOPND19\n         BCTR  R5,0\n         BCT   R4,AOPND18\n         MVI   STCMDL,0\n         B     AOPND5\nAOPND19  STC   R4,STCMDL\n         BCT   R4,*+L'*+6\n         MVC   STCMDT(*-*),AUCMD   <<EXECUTED>>\n         EX    R4,*-6\n         B     AOPND5\n         SPACE 1\n*------- AOCHKW - CHECK KEYWORD ROUTINE\n*               R0  : WORK REGISTER\n*               R1  : CURRENT TEXT POINTER\n*               R2  : TEXT POINTER INCREMENT (DON'T MODIFY IT)\n*               R3  : END OF TEXT POINTER\n*               R6  : LINK REGISTER - RETURN +0 = NO MATCH\n*                                            +4 = OK, MATCH\n*                                            +8 = KEYWORDS LIST\n*               R7  : WORK REGISTER - AT RETURN +4 (OK) = LENGTH OF\n*                                                         KEYWORD-1\n*               R15 : WORK REGISTER\n*        KEYWORDS LIST :       DC   AL1(L'KW1-1)\n*                        KW1   DC   C'...KEYWORD...'\n*                        ...   ...  ...\n*                              DC   AL1(255) <--- END OF LIST\n*        NOTE : YOU MAY USE MACRO @CHKW TO GENERATE THE CALL, THE\n*               RETURNS AND THE KEYWORDS LIST.\n*               SYNTAX : @CHKW  ...,...,...,   <- ONE OR MORE KEYWORDS\n*                               WHERE=AOCHKW,NOMATCH=...,MATCH=...\n*                 NOTE : IF NOMATCH= AND/OR MATCH= ARE NOT SPECIFIED,\n*                        THEN THE CORRESPONDING BRANCH IS GENERATED TO\n*                        CONTINUE IN SEQUENCE.\n         SPACE 1\nAOCHKW  @GCHKR R1,R3\n         SPACE 1\n*------- AOVERS - VERIFY KEYWORD ROUTINE\n*               R1  : CURRENT TEXT POINTER\n*               R14 : LINK REGISTER - RETURN +0 = NO MATCH\n*                                            +4 = OK, MATCH\n         SPACE 1\nAOVERS  @CHKW  IF-ON,WHERE=AOCHKW,MATCH=4(R14)\n        @CHKW  IF-OFF,WHERE=AOCHKW,MATCH=4(R14),NOMATCH=AOVERK1\n         SPACE 1\n*------- AOVERK - VERIFY KEYWORD ROUTINE\n*               R1  : CURRENT TEXT POINTER\n*               R14 : LINK REGISTER\n         SPACE 1\nAOVERK  @CHKW  IF-ON,WHERE=AOCHKW,MATCH=AOERR1\n        @CHKW  IF-OFF,WHERE=AOCHKW,MATCH=AOERR1\nAOVERK1 @CHKW  'T=','TERM=','TERMINAL=',                               X\n               WHERE=AOCHKW,MATCH=AOERR1\n        @CHKW  'U=','USER=','USERS=',                                  X\n               WHERE=AOCHKW,MATCH=AOERR1\n        @CHKW  'G=','GROUP=','GROUPS=',                                X\n               WHERE=AOCHKW,MATCH=AOERR1\n        @CHKW  'P=','PROC=','PROCS=','PROCEDURE=','PROCEDURES=',       X\n               WHERE=AOCHKW,MATCH=AOERR1\n        @CHKW  'O=','OP=','OPS=','OPND=','OPNDS=','OPERAND=',          X\n               'OPERANDS=',WHERE=AOCHKW,NOMATCH=0(R14),MATCH=AOERR1\n         SPACE 1\nAOERR1   LA    R2,=CL21'SYNTAX ERROR DETECTED'\n         B     AOERRB\nAOERR2   LA    R2,=CL21'NAME ERROR : TOO LONG'\n         B     AOERRB\nAOERR3   LA    R2,=CL21'OPERAND TEXT TOO LONG'\n         B     AOERRB\nAOERR4   LA    R2,=CL21'QUOTES ERROR DETECTED'\n         B     AOERRB\nAOERR5   ICM   R2,B'0111',=CL3'W-0'\n         B     AOERRA\nAOERR6   ICM   R2,B'0111',=CL3'V-1'\n         B     AOERRA\nAOERR7   ICM   R2,B'0111',=CL3'V-2'\n         B     AOERRA\nAOERR8   ICM   R2,B'0111',=CL3'V-3'\nAOERRA   MVC   WKLINE+10(13),=CL13'VALUE (   ) ='\n         STCM  R2,B'0111',WKLINE+17\n         CVD   R15,WORKD\n         MVC   WKLINE+23(8),=XL9'402020202020212040'\n         ED    WKLINE+23(8),WORKD+L'WORKD-4\n         B     AOERRC\nAOERRB   MVC   WKLINE+10(21),0(R2)\nAOERRC   LR    R2,R1               SAVE CURRENT POINTER\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+31(28),=CL28' - AUTOMATIC OPERAND FLUSHED'\n         LA    R1,WKLINE\n         LA    R0,59\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(8),=CL8'SCAN AT '\n         LA    R15,WKLINE+18\n         ICM   R0,B'1111',AUCDS\n         BZ    AOERRD\n         MVC   0(4,R15),=CL4'CARD'\n         CVD   R0,WORKD\n         MVC   4(9,R15),=XL9'402020202020212040'\n         ED    4(8,R15),WORKD+L'WORKD-4\n         CLI   5(R15),C' '\n         BNE   *+L'*+10\n         MVC   4(8,R15),5(R15)\n         B     *-14\n         LA    R15,6(R15)\n         CLI   0(R15),C' '\n         BE    *+L'*+8\n         LA    R15,1(R15)\n         B     *-12\n         LA    R15,1(R15)\nAOERRD   MVC   0(4,R15),=CL4'COL.'\n         ICM   R3,B'1111',INCBP    GET CARD POINTER\n         SLR   R2,R3\n         LA    R2,1(R2)\n         CVD   R2,WORKD\n         MVC   4(9,R15),=XL9'402020202020212040'\n         ED    4(8,R15),WORKD+L'WORKD-4\n         CLI   5(R15),C' '\n         BNE   *+L'*+10\n         MVC   4(8,R15),5(R15)\n         B     *-14\n         LA    R15,6(R15)\n         CLI   0(R15),C' '\n         BE    *+L'*+8\n         LA    R15,1(R15)\n         B     *-12\n         LA    R1,WKLINE\n         LR    R0,R15\n         SLR   R0,R1\n        @CALL  PUTLNE\n         B     PRAOSQ\n         SPACE 1\nAOTEOF   CLI   AUSCW,0\n         BE    PRAOSEOF            OK\n         CLI   AUSCW,4\n         BE    PRAOSEOF            OK\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(19),=CL19'SYNTAX ERROR AT END'\n         MVC   WKLINE+39(18),=CL18' - OPERAND FLUSHED'\n         LA    R1,WKLINE\n         LA    R0,47\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(34),=CL34'... SOMETHING MISSING PROBABLY ...'\n         LA    R1,WKLINE\n         LA    R0,44\n        @CALL  PUTLNE\nPRAOSQ   LA    R15,4               SET RC=4\n         B     PRAOSX\nPRAOSEOF LH    R15,=H'-1'          SET RC=-\n         B     PRAOSX\nPRONXT   XR    R15,R15             SET RC=0\nPRAOSX  @EXIT\n         DROP  R8\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*            T A B L E S     I N I T I A L I Z A T I O N            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- INITT - GET INTERNAL DEFINITIONS VALUES, AND BUILD\n*                DD-NAMES TABLE AND EVENTUAL ALIASES TABLE\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n         SPACE 1\nINITT   @ENTER ,\n         L     R3,=A(INWKL)\n        GETMAIN R,LV=(R3)\n         LR    R8,R1\n         LR    R2,R1\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         USING INWKA,R8\n        @IFKW  IDV,S,GOTO=INITXR\n        @IFKW  DDT,S,GOTO=INITXR\n        @IFKW  ALT,S,ELSE=INITRI0\nINITXR   MVI   INOPR,INOPRI        INITIAL\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   INEX                ERROR\n         SPACE 1\n*------- GET INTERNAL DEFINITIONS VALUES\n         SPACE 1\nINITRI0  XC    INCBP,INCBP\n        @IFKW  IDV,S,ELSE=INITRI2\n         LA    R1,IDVNME\n         MVI   INOPR,INOPRP        POSITION TO MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   INEX                ERROR\n         TM    INSWS,INSWSM        MEMBER NOT FOUND ?\n         BO    INITRI2             YES, LIKE EOF\nINITRI1  MVI   INOPR,INOPRR        READ MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   INEX                ERROR\n         ICM   R1,B'1111',INCBP    MEMBER EOF ?\n         BZ    INITRI2             YES, SKIP\n         CLI   0(R1),C'*'          NO, COMMENT ?\n         BE    INITRI1             YES\nINITRI2 @CALL  BLDIDV              NO, PROCESS INTERNAL DEFINITIONS\n         LTR   R6,R15              HOW COMPLETE ?\n         BZ    INITRI1             OK, CONTINUE\n         BM    INITRI3             OK, END\n         XC    MXLCIT,MXLCIT       ERROR, SOMETHING WRONG IN MEMBER\n         XC    MXALUS,MXALUS\n         XC    MXALGR,MXALGR\n         B     INEX\nINITRI3  L     R14,DDSTART\n         L     R15,DDEND\n         SLR   R15,R14\n         LA    R15,4095(R15)\n         SRL   R15,12\n         SLL   R15,12\n         CL    R15,MXLCIT\n         BNH   *+L'*+4\n         ST    R15,MXLCIT\n         L     R0,MXLCIT\n         L     R14,USERSS\n         L     R15,USERSE\n         SLR   R15,R14\n         LA    R15,8(R15)\n         SRL   R15,3\n         SLL   R15,3\n         CL    R15,MXALUS\n         BNH   *+L'*+4\n         ST    R15,MXALUS\n         A     R0,MXALUS\n         L     R14,GROUPSS\n         L     R15,GROUPSE\n         SLR   R15,R14\n         LA    R15,8(R15)\n         SRL   R15,3\n         SLL   R15,3\n         CL    R15,MXALGR\n         BNH   *+L'*+4\n         ST    R15,MXALGR\n         A     R0,MXALGR\n        GETMAIN R,LV=(0)\n         ST    R1,ALIBCIT\n         AL    R1,MXLCIT\n         ST    R1,ALPTBUA\n         AL    R1,MXALUS\n         ST    R1,ALPTBGA\n         SPACE 1\n*------- BUILD DD-NAMES TABLE\n         SPACE 1\n        @IFKW  DDT,S,GOTO=INITRD1\n         L     R14,DDSTART\n         L     R15,DDEND\n         SLR   R15,R14\n         L     R0,ALIBCIT\n         LR    R1,R0\n         ALR   R1,R15\n         ST    R1,ALIBCITE\n         LR    R1,R15\n         MVCL  R0,R14\n         B     INITRA0\nINITRD1  LA    R1,DDTNME\n         MVI   INOPR,INOPRP        POSITION TO MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   INEX                ERROR\n         TM    INSWS,INSWSM        MEMBER NOT FOUND ?\n         BO    INITRD3             YES, LIKE EOF\nINITRD2  MVI   INOPR,INOPRR        READ MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   INEX                ERROR\n         ICM   R1,B'1111',INCBP    MEMBER EOF ?\n         BZ    INITRD3             YES, SKIP\n         CLI   0(R1),C'*'          NO, COMMENT ?\n         BE    INITRD2             YES\nINITRD3 @CALL  BLDDDT              NO, PROCESS LIBRARIES TABLE\n         LTR   R6,R15              HOW COMPLETE ?\n         BZ    INITRD2             CONTINUE\n         BP    INEX                ERROR, SOMETHING WRONG IN MEMBER\n         SPACE 1\n*------- BUILD EVENTUAL ALIASES TABLE\n         SPACE 1\nINITRA0 @IFKW  ALT,U,ELSE=INITRA1\n         L     R14,USERSS\n         L     R15,USERSE\n         SLR   R15,R14\n         LA    R15,1(R15)\n         L     R0,ALPTBUA\n         LR    R1,R15\n         MVCL  R0,R14\n         L     R14,GROUPSS\n         L     R15,GROUPSE\n         SLR   R15,R14\n         LA    R15,1(R15)\n         L     R0,ALPTBGA\n         LR    R1,R15\n         MVCL  R0,R14\n         B     INXOK\nINITRA1 @IFKW  ALT,N,GOTO=INITRA3\n         LA    R1,ALTNME\n         MVI   INOPR,INOPRP        POSITION TO MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   INEX                ERROR\n         TM    INSWS,INSWSM        MEMBER NOT FOUND ?\n         BO    INITRA3             YES, LIKE EOF\nINITRA2  MVI   INOPR,INOPRR        READ MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   INEX                ERROR\n         ICM   R1,B'1111',INCBP    MEMBER EOF ?\n         BZ    INITRA3             YES, SKIP\n         CLI   0(R1),C'*'          NO, COMMENT ?\n         BE    INITRA2             YES\nINITRA3 @CALL  BLDALT              NO, PROCESS ALIASES TABLE\n         LTR   R6,R15              HOW COMPLETE ?\n         BZ    INITRA2             CONTINUE\n         BP    INEX                ERROR, SOMETHING WRONG IN MEMBER\nINXOK    XR    R6,R6               SET RC=0\n         TM    SWSTTS,MSGLST\n         BZ    INEX\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(19),=CL19'INITIALIZATION DONE'\n         LA    R1,WKLINE\n         LA    R0,29\n        @CALL  PUTLNE\nINEX     LR    R1,R8\n         L     R0,=A(INWKL)\n        FREEMAIN R,A=(1),LV=(0)\n         LTR   R15,R6              TEST AND SET RC TO RETURN\n         BZ    INITTZ              OK\n         OI    SWPRCS,ERREXR       ERROR\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(22),=CL22'INITIALIZATION FAILURE'\n         LA    R1,WKLINE\n         LA    R0,32\n        @CALL  PUTLNE\n         LR    R15,R6              SET RC TO RETURN\n         DROP  R8\nINITTZ  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        GET INTERNAL DEFINITIONS VALUES                            *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- BLDIDV - INTERNAL DEFINITIONS VALUES\n*              AT ENTRY : \"INCBP\" = LOGICAL RECORD POINTER OR 0 IF EOF\n*              R8  : INITIALIZATION WORK-AREA POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n*                                                  - = EOF PROCESSED\n         SPACE 1\nBLDIDV  @ENTER ,\n         USING INWKA,R8\n         ICM   R1,B'1111',INCBP\n         BZ    BLDIEOF             MEMBER EOF\n         LA    R3,71(R1)\n         LA    R2,1\n         CLI   0(R1),C' '\n         BNE   *+L'*+8\nBLDIDV1  BXLE  R1,R2,*-8\n         B     BLDIDVE\n         CLI   0(R1),C'*'          COMMENT FOLLOWS\n         BE    BLDIDVE\n         L     R14,=A(IDVTB)\n         XR    R15,R15\nIDVSCAN1 CLC   0(2,R14),=AL1(255,255)\n         BE    IDVERR1             NOT FOUND, UNKNOWN\n         IC    R15,0(R14)\n         EX    R15,IDVSCANT\n         BE    IDVSCAN2\n         LA    R14,6(R14,R15)\n         B     IDVSCAN1\nIDVSCANT CLC   0(*-*,R1),5(R14)    <<EXECUTED>>\nIDVSCAN2 MVC   IDVOPK(L'IDVOPK),1(R14)\n         LA    R1,0(R1,R15)\n         BXLE  R1,R2,*+L'*+4\n         B     IDVERR1             OPERAND NOT ENTIRELY IN CARD\n         CLI   0(R1),C' '\n         BE    IDVERR1\n         MVI   IDVOPL,0\n         MVI   IDVOPT,C' '\n         MVC   IDVOPT+1(L'IDVOPT-1),IDVOPT\n         LR    R14,R1\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         LR    R15,R1\n         SLR   R15,R14\n         CH    R15,=Y(L'IDVOPT)\n         BH    IDVERR1             OPERAND TOO LONG\n         STC   R15,IDVOPL\n         BCT   R15,*+L'*+6\n         MVC   IDVOPT(*-*),0(R14)  <<EXECUTED>>\n         EX    R15,*-6\n         ICM   R14,B'1111',IDVOPK\n         BR    R14\n         SPACE 1\nIDVDMSV  CLI   DMSVN,0\n         BNE   IDVERR1             TWICE ENCOUNTERED\n         CLI   IDVOPL,L'DMSVN\n         BNE   IDVERR1             WRONG VOL.SER.NUMBER\n         MVC   DMSVN(L'DMSVN),IDVOPT\n         B     BLDIDV1\n         SPACE 1\nIDVLCIT  LA    R15,MXLCIT\n         B     IDVSZ1\nIDVALUS  LA    R15,MXALUS\n         B     IDVSZ1\nIDVALGR  LA    R15,MXALGR\nIDVSZ1   OC    0(L'MXALGR,R15),0(R15) OR L'MXALUS, OR L'MXLCIT\n         BNZ   IDVERR1             TWICE ENCOUNTERED\n         XR    R4,R4\n         IC    R4,IDVOPL\n         LA    R5,IDVOPT-1(R4)\n         CLI   0(R5),C'K'\n         BNE   *+L'*+2\n         BCTR  R4,0\n         CH    R4,=H'5'\n         BH    IDVERR1             VALUE TEXT TOO LONG\n         BCTR  R4,0\n         EX    R4,IDVVLM\n         OC    WORKD,=CL8'00000000'\n         EX    R4,IDVVLC\n         BNE   IDVERR1             NOT NUMERIC VALUE\n         EX    R4,IDVVLP\n         CVB   R4,WORKD\n         LTR   R4,R4\n         BNP   IDVERR1             ZERO VALUE\n         CLI   0(R5),C'K'\n         BNE   *+L'*+8\n         SLL   R4,10\n         B     *+L'*+12\n         LA    R4,7(R4)\n         SRL   R4,3\n         SLL   R4,3\n         ST    R4,0(R15)\n         B     BLDIDV1\n         SPACE 1\nIDVPU    LA    R15,YYPU\n         B     IDVUN1\nIDVWU    LA    R15,YYWU\n         B     IDVUN1\nIDVCU    LA    R15,YYCU\n         B     IDVUN1\nIDVEU    LA    R15,YYEU\nIDVUN1   CLI   1(R15),0\n         BNE   IDVERR1             TWICE ENCOUNTERED\n         CLI   IDVOPL,8\n         BH    IDVERR1             WRONG UNIT\n         XR    R4,R4\n         IC    R4,IDVOPL\n         STC   R4,0(R15)\n         BCT   R4,*+L'*+6\n         MVC   1(*-*,R15),IDVOPT   <<EXECUTED>>\n         EX    R4,*-6\n         B     BLDIDV1\nIDVPV    CLI   YYPV,0\n         BNE   IDVERR1             TWICE ENCOUNTERED\n         CLI   IDVOPL,L'YYPV\n         BNE   IDVERR1             WRONG VOL.SER.NUMBER\n         MVC   YYPV(L'YYPV),IDVOPT\n         B     BLDIDV1\nIDVPA    LA    R15,YYPA\n         B     IDVAL1\nIDVWA    LA    R15,YYWA\n         B     IDVAL1\nIDVCA    LA    R15,YYCA\nIDVAL1   OC    0(2,R15),0(R15)\n         BNZ   IDVERR1             TWICE ENCOUNTERED\n         CLI   IDVOPL,3\n         BNE   IDVERR1             WRONG ALLOCATION\n         CLC   IDVOPT(3),=CL3'CYL'\n         BNE   *+L'*+10\n         MVC   0(2,R15),=AL2(DALCYL)\n         B     BLDIDV1\n         CLC   IDVOPT(3),=CL3'TRK'\n         BNE   IDVERR1\n         MVC   0(2,R15),=AL2(DALTRK)\n         B     BLDIDV1\nIDVPP    LA    R15,YYPP\n         B     IDVVP1\nIDVPS    LA    R15,YYPS\n         B     IDVVP1\nIDVPD    LA    R15,YYPD\n         B     IDVVP1\nIDVWP    LA    R15,YYWP\n         B     IDVVP1\nIDVWS    LA    R15,YYWS\n         B     IDVVP1\nIDVWD    LA    R15,YYWD\n         B     IDVVP1\nIDVCP    LA    R15,YYCP\n         B     IDVVP1\nIDVCS    LA    R15,YYCS\n         B     IDVVP1\nIDVEP    LA    R15,YYEP\n         B     IDVVP1\nIDVES    LA    R15,YYES\nIDVVP1   OC    0(L'YYPP,R15),0(R15) OR L'...\n         BNZ   IDVERR1             TWICE ENCOUNTERED\n         BAS   R14,IDVCKN\n         STCM  R4,B'0111',0(R15)\n         B     BLDIDV1\nIDVPB    LA    R15,YYPB\n         B     IDVBL1\nIDVCB    LA    R15,YYCB\nIDVBL1   OC    0(L'YYPB,R15),0(R15) OR L'...\n         BNZ   IDVERR1             TWICE ENCOUNTERED\n         BAS   R14,IDVCKN\n         CH    R4,=H'32767'\n         BH    IDVERR1\n         STCM  R4,B'0011',0(R15)\n         B     BLDIDV1\nIDVWR    CLI   YYWR+1,0\n         BNE   IDVERR1             TWICE ENCOUNTERED\n         XR    R4,R4\n         IC    R4,IDVOPL\n         STC   R4,YYWR\n         BCT   R4,*+L'*+6\n         MVC   YYWR+1(*-*),IDVOPT  <<EXECUTED>>\n         EX    R4,*-6\n         B     BLDIDV1\nIDVEA    OC    YYEA,YYEA\n         BNZ   IDVERR1             TWICE ENCOUNTERED\n         BAS   R14,IDVCKN\n         CH    R4,=H'32767'\n         BH    IDVERR1\n         STCM  R4,B'0111',YYEA\n         B     BLDIDV1\n         SPACE 1\nBLDIEOF  L     R1,AINDV\n         OC    MXLCIT,MXLCIT\n         BNZ   *+L'*+6\n         MVC   MXLCIT(L'MXLCIT),0(R1)\n         LA    R1,L'MXLCIT(R1)\n         OC    MXALUS,MXALUS\n         BNZ   *+L'*+6\n         MVC   MXALUS(L'MXALUS),0(R1)\n         LA    R1,L'MXALUS(R1)\n         OC    MXALGR,MXALGR\n         BNZ   *+L'*+6\n         MVC   MXALGR(L'MXALGR),0(R1)\n         LA    R1,L'MXALGR(R1)\n         XR    R14,R14\n         IC    R14,0(R1)\n         CLI   YYPU+1,0\n         BNE   *+L'*+10\n         MVC   YYPU(*-*),0(R1)\n         EX    R14,*-6\n         LA    R1,1(R1,R14)\n         CLI   YYPV,0\n         BNE   *+L'*+6\n         MVC   YYPV(L'YYPV),0(R1)\n         LA    R1,L'YYPV(R1)\n         OC    YYPA,YYPA\n         BNZ   *+L'*+6\n         MVC   YYPA(L'YYPA),0(R1)\n         LA    R1,L'YYPA(R1)\n         OC    YYPP,YYPP\n         BNZ   *+L'*+6\n         MVC   YYPP(L'YYPP),0(R1)\n         LA    R1,L'YYPP(R1)\n         OC    YYPS,YYPS\n         BNZ   *+L'*+6\n         MVC   YYPS(L'YYPS),0(R1)\n         LA    R1,L'YYPS(R1)\n         OC    YYPD,YYPD\n         BNZ   *+L'*+6\n         MVC   YYPD(L'YYPD),0(R1)\n         LA    R1,L'YYPD(R1)\n         OC    YYPB,YYPB\n         BNZ   *+L'*+6\n         MVC   YYPB(L'YYPB),0(R1)\n         LA    R1,L'YYPB(R1)\n         XR    R14,R14\n         IC    R14,0(R1)\n         CLI   YYWU+1,0\n         BNE   *+L'*+10\n         MVC   YYWU(*-*),0(R1)\n         EX    R14,*-6\n         LA    R1,1(R1,R14)\n         OC    YYWA,YYWA\n         BNZ   *+L'*+6\n         MVC   YYWA(L'YYWA),0(R1)\n         LA    R1,L'YYWA(R1)\n         OC    YYWP,YYWP\n         BNZ   *+L'*+6\n         MVC   YYWP(L'YYWP),0(R1)\n         LA    R1,L'YYWP(R1)\n         OC    YYWS,YYWS\n         BNZ   *+L'*+6\n         MVC   YYWS(L'YYWS),0(R1)\n         LA    R1,L'YYWS(R1)\n         OC    YYWD,YYWD\n         BNZ   *+L'*+6\n         MVC   YYWD(L'YYWD),0(R1)\n         LA    R1,L'YYWD(R1)\n         XR    R14,R14\n         IC    R14,0(R1)\n         CLI   YYWR+1,0\n         BNE   *+L'*+10\n         MVC   YYWR(*-*),0(R1)\n         EX    R14,*-6\n         LA    R1,1(R1,R14)\n         XR    R14,R14\n         IC    R14,0(R1)\n         CLI   YYCU+1,0\n         BNE   *+L'*+10\n         MVC   YYCU(*-*),0(R1)\n         EX    R14,*-6\n         LA    R1,1(R1,R14)\n         OC    YYCA,YYCA\n         BNZ   *+L'*+6\n         MVC   YYCA(L'YYCA),0(R1)\n         LA    R1,L'YYCA(R1)\n         OC    YYCP,YYCP\n         BNZ   *+L'*+6\n         MVC   YYCP(L'YYCP),0(R1)\n         LA    R1,L'YYCP(R1)\n         OC    YYCS,YYCS\n         BNZ   *+L'*+6\n         MVC   YYCS(L'YYCS),0(R1)\n         LA    R1,L'YYCS(R1)\n         OC    YYCB,YYCB\n         BNZ   *+L'*+6\n         MVC   YYCB(L'YYCB),0(R1)\n         LA    R1,L'YYCB(R1)\n         XR    R14,R14\n         IC    R14,0(R1)\n         CLI   YYEU+1,0\n         BNE   *+L'*+10\n         MVC   YYEU(*-*),0(R1)\n         EX    R14,*-6\n         LA    R1,1(R1,R14)\n         OC    YYEA,YYEA\n         BNZ   *+L'*+6\n         MVC   YYEA(L'YYEA),0(R1)\n         LA    R1,L'YYEA(R1)\n         OC    YYEP,YYEP\n         BNZ   *+L'*+6\n         MVC   YYEP(L'YYEP),0(R1)\n         LA    R1,L'YYEP(R1)\n         OC    YYES,YYES\n         BNZ   *+L'*+6\n         MVC   YYES(L'YYES),0(R1)\n         LA    R1,L'YYES(R1)\n         CLI   DMSVN,0\n         BNE   *+L'*+6\n         MVC   DMSVN(L'DMSVN),0(R1)\n         MVI   BLDSW,0             RESET ALL\n         LH    R15,=H'-1'          SET RC=-\n         B     BLDIDVX\n         SPACE 1\nIDVERR1  TM    SWSTTS,MSGLST\n         BZ    IDVERRB\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(9),=CL9'T. IDV= \"'\n         CLI   IDVNME,C' '\n         BE    *+L'*+10\n         MVC   WKLINE+19(8),IDVNME\n         B     *+L'*+6\n         MVC   WKLINE+19(8),=CL8'========'\n         MVC   WKLINE+27(25),=CL25'\" / SCAN ERROR AT COLUMN '\n         SL    R1,INCBP\n         CVD   R1,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+52(2),WORKD+2\n         LA    R0,54\n         LA    R1,WKLINE\n         CLC   1(8,R3),=CL8' '\n         BE    IDVERRA\n         LR    R14,R0\n         LA    R15,0(R1,R14)\n         MVC   0(4,R15),=CL4' -> '\n         MVC   4(8,R15),1(R3)\n         LA    R0,12(R14)\nIDVERRA @CALL  PUTLNE\nIDVERRB  LA    R15,4               SET RC=4\n         B     BLDIDVX\n         SPACE 1\n*------- IDVCKN - CHECK NUMERIC VALUE\n*              R14 : LINK REGISTER\n         SPACE 1\nIDVCKN   CLI   IDVOPL,5\n         BH    IDVERR1             VALUE TEXT TOO LONG\n         XR    R4,R4\n         IC    R4,IDVOPL\n         BCTR  R4,0\n         EX    R4,IDVVLM\n         OC    WORKD,=CL8'00000000'\n         EX    R4,IDVVLC\n         BNE   IDVERR1             NOT NUMERIC VALUE\n         EX    R4,IDVVLP\n         CVB   R4,WORKD\n         LTR   R4,R4\n         BPR   R14\n         B     IDVERR1             ZERO VALUE\n         SPACE 1\nIDVVLM   MVC   WORKD(*-*),IDVOPT   <<EXECUTED>>\nIDVVLC   CLC   WORKD(*-*),IDVOPT   <<EXECUTED>>\nIDVVLP   PACK  WORKD,IDVOPT(*-*)   <<EXECUTED>>\n         SPACE 1\n         DROP  R8\nBLDIDVE  XR    R15,R15             SET RC=0\nBLDIDVX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         SPACE 1\nIDVTB   @OKAT  DMSVOL,IDVDMSV      OPERANDS TABLE\n        @OKAT  MXLCIT,IDVLCIT\n        @OKAT  MXALUS,IDVALUS\n        @OKAT  MXALGR,IDVALGR\n        @OKAT  PU,IDVPU\n        @OKAT  PV,IDVPV\n        @OKAT  PA,IDVPA\n        @OKAT  PP,IDVPP\n        @OKAT  PS,IDVPS\n        @OKAT  PD,IDVPD\n        @OKAT  PB,IDVPB\n        @OKAT  WU,IDVWU\n        @OKAT  WA,IDVWA\n        @OKAT  WP,IDVWP\n        @OKAT  WS,IDVWS\n        @OKAT  WD,IDVWD\n        @OKAT  WR,IDVWR\n        @OKAT  CU,IDVCU\n        @OKAT  CA,IDVCA\n        @OKAT  CP,IDVCP\n        @OKAT  CS,IDVCS\n        @OKAT  CB,IDVCB\n        @OKAT  EU,IDVEU\n        @OKAT  EA,IDVEA\n        @OKAT  EP,IDVEP\n        @OKAT  ES,IDVES\n        @TEM   ,                   END OF TABLE\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        BUILD DDNAME'S LIBRARIES CONCATENATIONS INFO'S TABLE       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- BLDDDT - BUILD DD-NAMES TABLE\n*              AT ENTRY : \"INCBP\" = LOGICAL RECORD POINTER OR 0 IF EOF\n*              R8  : INITIALIZATION WORK-AREA POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n*                                                  - = EOF PROCESSED\n         SPACE 1\nBLDDDT  @ENTER ,\n         USING INWKA,R8\n         TM    BLDSW,BLDSWI        INITIALIZATION DONE ?\n         BO    BLDDDT1             YES\n         L     R5,ALIBCIT\n         USING LIBCITD,R5\n         USING LIB#DS,R6\n         BAS   R14,BLDDSI          INITIALIZE DD-ENTRY\n         OI    BLDSW,BLDSWI        SET IT DONE\nBLDDDT1  ICM   R1,B'1111',INCBP\n         BZ    BLDDEOF             MEMBER EOF\n         LA    R3,71(R1)\n         LA    R2,1\n         CLI   0(R1),C' '\n         BNE   *+L'*+8\nBLDDDT2  BXLE  R1,R2,*-8\n         B     BLDDDTE\n         L     R14,=A(DDTTB)\n         XR    R15,R15\nDDTSCAN1 CLC   0(2,R14),=AL1(255,255)\n         BE    DDTERR1             NOT FOUND, UNKNOWN\n         IC    R15,0(R14)\n         EX    R15,DDTSCANT\n         BE    DDTSCAN2\n         LA    R14,6(R14,R15)\n         B     DDTSCAN1\nDDTSCANT CLC   0(*-*,R1),5(R14)    <<EXECUTED>>\nDDTSCAN2 MVC   DDTOPK(L'DDTOPK),1(R14)\n         LA    R1,0(R1,R15)\n         BXLE  R1,R2,*+L'*+4\n         B     DDTERR1             OPERAND NOT ENTIRELY IN CARD\n         MVI   DDTOPL,0\n         MVI   DDTOPT,C' '\n         MVC   DDTOPT+1(L'DDTOPT-1),DDTOPT\n         CLI   0(R1),C' '\n         BE    DDTSCANE\n         CLI   0(R1),C'\"'\n         BNE   DDTSCAN3\n         BXLE  R1,R2,*+L'*+4\n         B     DDTERR1             OPERAND NOT ENTIRELY IN CARD\n         LR    R14,R1\n         BXLE  R1,R2,*+L'*+4\n         B     DDTERR1             OPERAND NOT ENTIRELY IN CARD\n         CLI   0(R1),C'\"'\n         BNE   *-12\n         LR    R15,R1\n         BXLE  R1,R2,*+L'*+4\n         B     DDTSCAN4\n         CLI   0(R1),C' '\n         BNE   DDTERR1             NOT FOLLOWED BY A BLANK\n         B     DDTSCAN4\nDDTSCAN3 LR    R14,R1\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         LR    R15,R1\nDDTSCAN4 SLR   R15,R14\n         CH    R15,=Y(L'DDTOPT)\n         BH    DDTERR1             OPERAND TOO LONG\n         STC   R15,DDTOPL\n         BCT   R15,*+L'*+6\n         MVC   DDTOPT(*-*),0(R14)  <<EXECUTED>>\n         EX    R15,*-6\nDDTSCANE LM    R5,R6,PTRTB\n         ICM   R14,B'1111',DDTOPK\n         BR    R14\n         SPACE 1\nDDTPDD   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTPDD1             NO\n         BAS   R14,BLDDST          YES, TERMINATE IT\n         BAS   R14,BLDDSI          INITIALIZE A NEW DD-ENTRY\n         NI    BLDSW,255-BLDSWS    RESET\nDDTPDD1  CLI   DDTOPL,0\n         BE    DDTERR1             NO DD-NAME\n         CLI   DDTOPL,8\n         BH    DDTERR1             DD-NAME TOO LONG\n         MVC   LIBDDN(L'LIBDDN),DDTOPT\n         OI    BLDSW,BLDSWA        SET ACTIVE\n         B     BLDDDT2\n         SPACE 1\nDDTPID   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO, ERROR\n         TM    BLDSW,BLDSWS        YES, LIST MUST TERMINATE ?\n         BO    DDTERR1             YES, INVALID OPERAND\n         CLI   DDTOPL,0\n         BE    DDTERR1             NO IDENTIFICATION\n         CLI   DDTOPL,20\n         BH    DDTERR1             IDENTIFICATION TOO LONG\n         CLI   LIBLID,C' '\n         BNE   DDTERR1             ID TWICE ENCOUNTERED\n         MVC   LIBLID(L'LIBLID),DDTOPT\n         B     BLDDDT2\n         SPACE 1\nDDTPOR   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO, ERROR\n         TM    BLDSW,BLDSWS        YES, LIST MUST TERMINATE ?\n         BO    DDTERR1             YES, INVALID OPERAND\n         CLI   DDTOPL,2\n         BNE   DDTERR1             NO OR WRONG DSORG\n         CLI   LIBORG,0\n         BNE   DDTERR1             DSORG TWICE ENCOUNTERED\n         CLC   DDTOPT(2),=CL2'PS'\n         BNE   *+L'*+8\n         MVI   LIBORG,DS1DSGPS\n         B     BLDDDT2\n         CLC   DDTOPT(2),=CL2'PO'\n         BNE   *+L'*+8\n         MVI   LIBORG,DS1DSGPO\n         B     BLDDDT2\n         CLC   DDTOPT(2),=CL2'DA'\n         BNE   DDTERR1             UNSUPPORTED DSORG\n         MVI   LIBORG,DS1DSGDA\n         B     BLDDDT2\n         SPACE 1\nDDTPRF   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO, ERROR\n         TM    BLDSW,BLDSWS        YES, LIST MUST TERMINATE ?\n         BO    DDTERR1             YES, INVALID OPERAND\n         CLI   DDTOPL,1\n         BNE   DDTERR1             NO OR WRONG RECFM\n         CLI   LIBRFM,0\n         BNE   DDTERR1             RECFM TWICE ENCOUNTERED\n         CLI   DDTOPT,C'F'\n         BNE   *+L'*+8\n         MVI   LIBRFM,DS1RECFF\n         B     BLDDDT2\n         CLI   DDTOPT,C'V'\n         BNE   *+L'*+8\n         MVI   LIBRFM,DS1RECFV\n         B     BLDDDT2\n         CLI   DDTOPT,C'U'\n         BNE   DDTERR1             UNSUPPORTED DSORG\n         MVI   LIBRFM,DS1RECFU\n         B     BLDDDT2\n         SPACE 1\nDDTPLR   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO, ERROR\n         TM    BLDSW,BLDSWS        YES, LIST MUST TERMINATE ?\n         BO    DDTERR1             YES, INVALID OPERAND\n         OC    LIBLRL,LIBLRL\n         BNZ   DDTERR1             LRECL TWICE ENCOUNTERED\n         CLI   DDTOPL,0\n         BE    DDTERR1             NO LRECL SPECIFIED\n         CLI   DDTOPL,15\n         BH    DDTERR1             TOO LONG LRECL SPECIFICATION\n         XR    R14,R14\n         IC    R14,DDTOPL\n         LA    R15,DDTOPT-1(R14)\nDDTPLR1  CLI   0(R15),C'0'\n         BL    DDTERR1             NOT NUMERIC\n         CLI   0(R15),C'9'\n         BH    DDTERR1             NOT NUMERIC\n         BCTR  R15,0\n         BCT   R14,DDTPLR1\n         IC    R14,DDTOPL\n         BCT   R14,*+L'*+6\n         PACK  WORKD,DDTOPT(*-*)   <<EXECUTED>>\n         EX    R14,*-6\n         CVB   R14,WORKD\n         CL    R14,=F'16384'\n         BNL   DDTERR1             LRECL VALUE TOO HIGH\n         STH   R14,LIBLRL\n         B     BLDDDT2\n         SPACE 1\nDDTPDS   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO\n         TM    BLDSW,BLDSWS        LIST MUST TERMINATE ?\n         BZ    DDTPDS1             NO, CAN FILL IN\n         LA    R6,LIB#LDS(R6)      YES, TERMINATE THIS LIST\n         BAS   R14,BLDDSS          INITIALIZE A NEW LIST\nDDTPDS1  OI    BLDSW,BLDSWS        SET MUST TERMINATE\n         CLI   DDTOPL,0\n         BE    BLDDDT2             NULL (TEMPORARY)\n         MVC   LIB#DSN,DDTOPT\n         B     BLDDDT2\n         SPACE 1\nDDTPTY   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO\n         TM    BLDSW,BLDSWS        LIST MUST TERMINATE ?\n         BZ    DDTERR1             NO, OPERAND INVALID\n         CLI   DDTOPL,0\n         BE    DDTERR1             NO TYPE\n         CLI   DDTOPL,4\n         BH    DDTERR1             WRONG TYPE\n         L     R15,INDTB\nDDTPTY1  CLI   0(R15),0\n         BE    DDTERR1             UNSUPPORTED TYPE\n         CLC   0(INDTB$,R15),DDTOPT\n         BE    *+L'*+8\n         LA    R15,INDTB#(R15)\n         B     DDTPTY1\n         OC    LIB#DSI(L'LIB#DSI),INDTB$(R15)\n         B     BLDDDT2\n         SPACE 1\nDDTPOP   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO\n         TM    BLDSW,BLDSWS        LIST MUST TERMINATE ?\n         BZ    DDTERR1             NO, OPERAND INVALID\n         CLI   DDTOPL,1\n         BNE   DDTERR1             NO OR WRONG OPT\n         L     R15,LFLTB\nDDTPOP1  CLI   0(R15),0\n         BE    DDTERR1             UNSUPPORTED OPT\n         CLC   0(LFLTB$,R15),DDTOPT\n         BE    *+L'*+8\n         LA    R15,LFLTB#(R15)\n         B     DDTPOP1\n         OC    LIB#DSF(L'LIB#DSF),LFLTB$(R15)\n         B     BLDDDT2\n         SPACE 1\nDDTPSP   TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR1             NO, ERROR\n         CLI   DDTOPL,1\n         BNE   DDTERR1             NO OR WRONG SP\n         TM    BLDSW,BLDSWS        LIST MUST TERMINATE ?\n         BO    DDTPSP2             YES\n         OC    LIBSPA,LIBSPA\n         BNZ   DDTERR1             SP TWICE ENCOUNTERED\n         CLI   DDTOPT,C'C'\n         BE    DDTPSP1\n         CLI   DDTOPT,C'D'\n         BE    DDTPSP1\n         CLI   DDTOPT,C'E'\n         BE    DDTPSP1\n         CLI   DDTOPT,C'T'\n         BE    DDTPSP1\n         CLI   DDTOPT,C'W'\n         BNE   DDTERR1             UNSUPPORTED SP\nDDTPSP1  MVC   LIBSPA(L'LIBSPA),=CL8' '\n         MVC   LIBSPA(1),DDTOPT\n         B     BLDDDT2\nDDTPSP2  OC    LIB#DSSA,LIB#DSSA\n         BNZ   DDTERR1             SP TWICE ENCOUNTERED\n         CLI   DDTOPT,C'P'\n         BNE   DDTERR1             UNSUPPORTED SP\n         MVC   LIB#DSSA(L'LIB#DSSA),=CL8' '\n         MVC   LIB#DSSA(1),DDTOPT\n         B     BLDDDT2\n         SPACE 1\nBLDDEOF  TM    BLDSW,BLDSWA        ENTRY ACTIVE ?\n         BZ    DDTERR2             NO\n         LM    R5,R6,PTRTB         YES, TERMINATE IT\n         BAS   R14,BLDDST\n         ST    R5,ALIBCITE         SET FINAL ADDRESS\n         MVI   BLDSW,0             RESET ALL\n         LH    R15,=H'-1'          SET RC=-\n         B     BLDDDTX\n         SPACE 1\nDDTERR1  TM    SWSTTS,MSGLST\n         BZ    DDTERRC\n         MVC   WKLINE+27(25),=CL25'\" / SCAN ERROR AT COLUMN '\n         SL    R1,INCBP\n         CVD   R1,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+52(2),WORKD+2\n         LA    R0,54\n         B     DDTERRA\nDDTERR2  TM    SWSTTS,MSGLST\n         BZ    DDTERRC\n         MVC   WKLINE+27(25),=CL25'\" / LIBRARIES TABLE EMPTY'\n         LA    R0,52\nDDTERRA  MVC   WKLINE+10(9),=CL9'T. DDT= \"'\n         CLI   DDTNME,C' '\n         BE    *+L'*+10\n         MVC   WKLINE+19(8),DDTNME\n         B     DDTERRB\n         MVC   WKLINE+19(8),=CL8'========'\n         B     DDTERRB\nDDTERR3  TM    SWSTTS,MSGLST\n         BZ    DDTERRC\n         MVC   WKLINE+10(25),=CL25'LIBRARIES TABLE OVERFLOW '\n         MVC   WKLINE+35(25),=CL25'(CHECK VALUE OF \"MXLCIT\")'\n         LA    R0,60\nDDTERRB  MVC   WKLINE(L'MSID),MSID\n         LA    R1,WKLINE\n         CLC   1(8,R3),=CL8' '\n         BE    *+L'*+22\n         LR    R14,R0\n         LA    R15,0(R1,R14)\n         MVC   0(4,R15),=CL4' -> '\n         MVC   4(8,R15),1(R3)\n         LA    R0,12(R14)\n        @CALL  PUTLNE\nDDTERRC  LA    R15,4               SET RC=4\n         B     BLDDDTX\n         SPACE 1\n*------- BLDDSI - INITIALIZE DD-ENTRY + 1 DS-ENTRY\n*        BLDDSS - INITIALIZE NEXT DS-ENTRY\n*              R5  : DD-NAME ENTRY\n*              R6  : DS-NAME LIST ELEMENT\n*              R14 : LINK REGISTER\n         SPACE 1\nBLDDSI   LA    R0,LIBNDS\n         CL    R0,ALPTBUA\n         BNL   DDTERR3             TABLE OVERFLOW\n         XC    LIBSPA,LIBSPA\n         MVI   LIBDDN,C' '\n         MVC   LIBDDN+1(L'LIBDDN+L'LIBLID-1),LIBDDN\n         XC    LIBORG(L'LIBORG+L'LIBRFM+L'LIBLRL),LIBORG\n         LA    R6,LIBNDS\nBLDDSS   LA    R0,LIB#LDS+L'LIB#DSF$(R6)\n         CL    R0,ALPTBUA\n         BNL   DDTERR3             TABLE OVERFLOW\n         XC    LIB#DSSA(L'LIB#DSSA+L'LIB#DSF+L'LIB#DSI),LIB#DSSA\n         MVI   LIB#DSN,C' '\n         MVC   LIB#DSN+1(L'LIB#DSN-1),LIB#DSN\n         MVC   LIB#DSN(3),=CL3'<T>'\n         STM   R5,R6,PTRTB\n         BR    R14\n         SPACE 1\n*------- BLDDST - TERMINATE DD-ENTRY\n*              R5  : DD-NAME ENTRY\n*              R6  : LAST DS-NAME LIST ELEMENT\n*              R14 : LINK REGISTER\n         SPACE 1\nBLDDST   CLC   LIBLID,=CL20' '     TERMINATE CURRENT DD-ENTRY\n         BNE   *+L'*+6\n         MVC   LIBLID(3),=CL3'???'\n         CLI   LIBORG,DS1DSGDA\n         BNE   *+L'*+8\n         MVI   LIBRFM,0\n         B     *+L'*+8\n         CLI   LIBRFM,DS1RECFU\n         BNE   *+L'*+6\n         XC    LIBLRL,LIBLRL\n         LA    R6,LIB#LDS(R6)\n         MVC   LIB#DSSA,=AL4(LIB#DSF$)\n         LA    R5,L'LIB#DSF$(R6)\n         BR    R14\n         SPACE 1\n         DROP  R5,R6,R8\nBLDDDTE  XR    R15,R15             SET RC=0\nBLDDDTX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         SPACE 1\nDDTTB   @OKAT  DD,DDTPDD           OPERANDS TABLE\n        @OKAT  ID,DDTPID\n        @OKAT  DSORG,DDTPOR\n        @OKAT  RECFM,DDTPRF\n        @OKAT  LRECL,DDTPLR\n        @OKAT  DS,DDTPDS\n        @OKAT  TYPE,DDTPTY\n        @OKAT  OPT,DDTPOP\n        @OKAT  SP,DDTPSP\n        @TEM   ,                   END OF TABLE\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        BUILD USER-ID'S AND GROUPS ALIASES TABLE                   *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- BLDALT - BUILD USER-ID'S/GROUPS TABLE\n*              AT ENTRY : \"INCBP\" = LOGICAL RECORD POINTER OR 0 IF EOF\n*              R8  : INITIALIZATION WORK-AREA POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n*                                                  - = EOF PROCESSED\n         SPACE 1\nBLDALT  @ENTER ,\n         USING INWKA,R8\n         TM    BLDSW,BLDSWI        INITIALIZATION DONE ?\n         BO    BLDALT1             YES\n         USING ALDSECT,R5\n         L     R5,ALPTBUA          INITIALIZE USERS TABLE\n         ST    R5,UTBPT\n         MVI   ALNME,0\n         L     R5,ALPTBGA          INITIALIZE GROUPS TABLE\n         ST    R5,PTRTB\n         ST    R5,GTBPT\n         MVI   ALNME,0\n         AL    R5,MXALGR\n         ST    R5,PTRTB+4\n         OI    BLDSW,BLDSWI        SET IT DONE\nBLDALT1  TM    BLDSW,BLDSWU\n         BZ    *+L'*+8\n         LM    R5,R6,UTBPT\n         B     *+L'*+18\n         TM    BLDSW,BLDSWG\n         BZ    *+L'*+8\n         LM    R5,R6,GTBPT\n         B     *+L'*+2\n         XR    R5,R5\n         ICM   R1,B'1111',INCBP\n         BZ    BLDALEOF            MEMBER EOF\n         LA    R3,71(R1)\n         LA    R2,1\nBLDALT2  CLI   0(R1),C' '\n         BNE   *+L'*+8\nBLDALT3  BXLE  R1,R2,*-8\n         B     BLDALTE\n         L     R14,=A(ALTTB)\n         XR    R15,R15\nALTSCAN1 CLC   0(2,R14),=AL1(255,255)\n         BNE   *+L'*+10\n         LTR   R5,R5\n         BNZ   ALTSCAN4\n         B     ALTERR1             NOT FOUND, UNKNOWN\n         IC    R15,0(R14)\n         EX    R15,ALTSCANT\n         BE    ALTSCAN2\n         LA    R14,3(R14,R15)\n         B     ALTSCAN1\nALTSCANT CLC   0(*-*,R1),2(R14)    <<EXECUTED>>\nALTSCAN2 MVC   ALTOPK(L'ALTOPK),1(R14)\n         LA    R1,0(R1,R15)\n         XR    R14,R14\n         IC    R14,ALTOPK\n         SLL   R14,2\n         B     *+L'*(R14)\n         B     ALTPUS              USER=\n         B     ALTPGR              GROUP=\n         B     ALTPDD              DDN=\n         B     ALTPUN              UNLESS=\nALTSCAN3 MVC   ALTOPS,ALTOPK\n         BXLE  R1,R2,BLDALT2\n         B     BLDALTE\nALTSCAN4 MVI   ALTOPT,C' '\n         MVC   ALTOPT+1(L'ALTOPT-1),ALTOPT\n         LR    R14,R1\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         LR    R15,R1\n         SLR   R15,R14\n         CH    R15,=Y(L'ALNME)\n         BH    ALTERR1             OPERAND TOO LONG\n         BCT   R15,*+L'*+6\n         MVC   ALTOPT(*-*),0(R14)  <<EXECUTED>>\n         EX    R15,*-6\n         XR    R14,R14\n         IC    R14,ALTOPS\n         SLL   R14,2\n         B     *+L'*(R14)\n         B     ALTPNA              USER=\n         B     ALTPNA              GROUP=\n         B     ALTPDN              DDN=\n         B     ALTPAL              UNLESS=\n         SPACE 1\nALTPUS   LTR   R5,R5\n         BZ    ALTPUS1             PREVIOUS ENTRY NOT SET\n         CLI   ALNME,0\n         BE    ALTERR1             NO NAME\n         CLI   ALANM,0\n         BE    ALTERR1             NO ALIAS NAME\n         CLI   ALNDD,0\n         BE    ALTERR1             NO DD-NAME(S)\n         TM    BLDSW,BLDSWU\n         BZ    *+L'*+10\n         LR    R5,R6\n         ST    R5,UTBPT\n         B     *+L'*+8\n         ST    R6,GTBPT\nALTPUS1  L     R5,UTBPT\n         NI    BLDSW,255-BLDSWU-BLDSWG\n         LA    R6,ALBSL(R5)\n         CL    R6,PTRTB\n         BNL   ALTERR2\n         ST    R6,UTBPT+4\n         XC    ALNME(ALBSL),ALNME\n         OI    BLDSW,BLDSWU\n         B     ALTSCAN3\n         SPACE 1\nALTPGR   LTR   R5,R5\n         BZ    ALTPGR1             PREVIOUS ENTRY NOT SET\n         CLI   ALNME,0\n         BE    ALTERR1             NO NAME\n         CLI   ALANM,0\n         BE    ALTERR1             NO ALIAS NAME\n         CLI   ALNDD,0\n         BE    ALTERR1             NO DD-NAME(S)\n         TM    BLDSW,BLDSWG\n         BZ    *+L'*+10\n         LR    R5,R6\n         ST    R5,GTBPT\n         B     *+L'*+8\n         ST    R6,UTBPT\nALTPGR1  L     R5,GTBPT\n         NI    BLDSW,255-BLDSWU-BLDSWG\n         LA    R6,ALBSL(R5)\n         CL    R6,PTRTB+4\n         BNL   ALTERR3\n         ST    R6,GTBPT+4\n         XC    ALNME(ALBSL),ALNME\n         OI    BLDSW,BLDSWG\n         B     ALTSCAN3\n         SPACE 1\nALTPDD   LTR   R5,R5\n         BZ    ALTERR1             PREVIOUS ENTRY NOT SET\n         CLI   ALNME,0\n         BE    ALTERR1             NO NAME\n         CLI   ALANM,0\n         BE    ALTERR1             NO ALIAS NAME\n         CLI   ALNDD,0\n         BNE   ALTERR1             AGAIN DD-NAME(S)\n         B     ALTSCAN3\n         SPACE 1\nALTPUN   LTR   R5,R5\n         BZ    ALTERR1             PREVIOUS ENTRY NOT SET\n         CLI   ALNME,0\n         BE    ALTERR1             NO NAME\n         CLI   ALANM,0\n         BE    ALTERR1             NO ALIAS NAME\n         CLI   ALNDD,0\n         BE    ALTERR1             NO DD-NAME(S)\n         CLI   ALNUN,0\n         BNE   ALTERR1             AGAIN UNLESS\n         B     ALTSCAN3\n         SPACE 1\nALTPNA   CLI   ALNME,0\n         BNE   *+L'*+10\n         MVC   ALNME(L'ALNME),ALTOPT\n         B     BLDALT3\n         CLI   ALANM,0\n         BNE   ALTERR1             NAME AND ALIAS NAME ALREADY IN\n         MVC   ALANM(L'ALANM),ALTOPT\n         B     BLDALT3\n         SPACE 1\nALTPDN   LA    R0,L'ALDDN(R6)\n         TM    BLDSW,BLDSWU\n         BZ    *+L'*+12\n         CL    R0,PTRTB\n         BNL   ALTERR2\n         B     *+L'*+8\n         CL    R0,PTRTB+4\n         BNL   ALTERR3\n         XR    R14,R14\n         IC    R14,ALNDD\n         LA    R14,1(R14)\n         CLM   R14,B'0010',=XL1'00'\n         BNZ   ALTERR4\n         MVC   0(L'ALDDN,R6),ALTOPT\n         STC   R14,ALNDD\n         LR    R6,R0\n         TM    BLDSW,BLDSWU\n         BZ    *+L'*+8\n         ST    R6,UTBPT+4\n         B     BLDALT3\n         ST    R6,GTBPT+4\n         B     BLDALT3\n         SPACE 1\nALTPAL   LA    R0,L'ALUNN(R6)\n         TM    BLDSW,BLDSWG\n         BO    *+L'*+12\n         CL    R0,PTRTB\n         BNL   ALTERR2\n         B     *+L'*+8\n         CL    R0,PTRTB+4\n         BNL   ALTERR3\n         XR    R14,R14\n         IC    R14,ALNUN\n         LA    R14,1(R14)\n         CLM   R14,B'0010',=XL1'00'\n         BNZ   ALTERR5\n         MVC   0(L'ALUNN,R6),ALTOPT\n         STC   R14,ALNUN\n         LR    R6,R0\n         TM    BLDSW,BLDSWG\n         BO    *+L'*+8\n         ST    R6,UTBPT+4\n         B     BLDALT3\n         ST    R6,GTBPT+4\n         B     BLDALT3\n         SPACE 1\nBLDALEOF LTR   R5,R5               ANY ENTRY ACTIVE ?\n         BZ    BLDALX              NO\n         CLI   ALNME,0\n         BE    ALTERR1             NO NAME\n         CLI   ALANM,0\n         BE    ALTERR1             NO ALIAS NAME\n         CLI   ALNDD,0\n         BE    ALTERR1             NO DD-NAME(S)\nBLDALX   MVI   BLDSW,0             RESET ALL\n         LH    R15,=H'-1'          SET RC=-\n         B     BLDALTX\n         SPACE 1\nALTERR1  TM    SWSTTS,MSGLST\n         BZ    ALTERRB\n         MVC   WKLINE+10(9),=CL9'T. ALT= \"'\n         CLI   ALTNME,C' '\n         BE    *+L'*+10\n         MVC   WKLINE+19(8),ALTNME\n         B     *+L'*+6\n         MVC   WKLINE+19(8),=CL8'========'\n         MVC   WKLINE+27(25),=CL25'\" / SCAN ERROR AT COLUMN '\n         SL    R1,INCBP\n         CVD   R1,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+52(2),WORKD+2\n         LA    R0,54\n         B     ALTERRA\nALTERR2  TM    SWSTTS,MSGLST\n         BZ    ALTERRB\n         MVC   WKLINE+10(25),=CL25'USER-ID''S TABLE OVERFLOW '\n         MVC   WKLINE+35(25),=CL25'(CHECK VALUE OF \"MXALUS\")'\n         LA    R0,60\n         B     ALTERRA\nALTERR3  TM    SWSTTS,MSGLST\n         BZ    ALTERRB\n         MVC   WKLINE+10(21),=CL21'GROUPS TABLE OVERFLOW '\n         MVC   WKLINE+31(25),=CL25'(CHECK VALUE OF \"MXALGR\")'\n         LA    R0,57\n         B     ALTERRA\nALTERR4  TM    SWSTTS,MSGLST\n         BZ    ALTERRB\n         MVC   WKLINE+10(23),=CL23'DDN= ... LIST OVERFLOW '\n         MVC   WKLINE+33(15),=CL15'(MAXIMUM = 255)'\n         LA    R0,48\n         B     ALTERRA\nALTERR5  TM    SWSTTS,MSGLST\n         BZ    ALTERRB\n         MVC   WKLINE+10(26),=CL26'UNLESS= ... LIST OVERFLOW '\n         MVC   WKLINE+36(15),=CL15'(MAXIMUM = 255)'\n         LA    R0,51\nALTERRA  MVC   WKLINE(L'MSID),MSID\n         LA    R1,WKLINE\n         CLC   1(8,R3),=CL8' '\n         BE    *+L'*+22\n         LR    R14,R0\n         LA    R15,0(R1,R14)\n         MVC   0(4,R15),=CL4' -> '\n         MVC   4(8,R15),1(R3)\n         LA    R0,12(R14)\n        @CALL  PUTLNE\nALTERRB  LA    R15,4               SET RC=4\n         B     BLDALTX\n         SPACE 1\n         DROP  R5,R8\nBLDALTE  XR    R15,R15             SET RC=0\nBLDALTX @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         SPACE 1\nALTTB   @OKIT  USER,TOPUS          OPERANDS TABLE\n        @OKIT  GROUP,TOPGR\n        @OKIT  DDN,TOPDN\n        @OKIT  UNLESS,TOPUN\n        @TEM   ,                   END OF TABLE\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*       U S E R ' S     S E L E C T I O N S - D E F A U L T S       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- USRDS - USER'S SELECTION(S) AND/OR DEFAULTS\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n         SPACE 1\nUSRDS   @ENTER ,\n         L     R1,AWK              PREPARE WORK-AREA\n         USING WACOM,R1\n         MVC   ZGRNM,GRNM\n         MVC   ZUSID,USID\n         MVC   ZTDSI,TDSI\n         MVC   ZXDSI,XDSI\n         MVC   ZSWSTTS,SWSTTS\n         NI    ZSWSTTS,TDSPLY\n         L     R15,AUSD\n        @CALL  ,                   GO DO SELECTIONS/DEFAULTS\n         MVC   TDSI,ZTDSI          BACK FROM WORK-AREA\n         MVC   XDSI,ZXDSI\n         DROP  R1\n        @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                   G E T     C O M M A N D ( S )                   *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- GCMDS - GET COMMAND(S)\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n         SPACE 1\nGCMDS   @ENTER ,\n         CLI   STCMDT,C'*'         IS IT AN AUTOMATIC REQUEST ?\n         BNE   GCMDT               NO\n         SPACE 1\n*------- GET COMMAND(S) FROM AUTOMATIC SELECTION\n         SPACE 1\n         MVI   STCMDL,0\n         MVI   STCMDT,C' '\n         MVC   STCMDT+1(L'STCMDT-1),STCMDT\n        @IFKW  ACS,N,GOTO=GCMDSX\n         L     R3,=A(CMWKL)\n        GETMAIN R,LV=(R3)\n         LR    R8,R1\n         LR    R2,R1\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         USING CMWKA,R8\n        @IFKW  ACS,S,GOTO=GCMDAR1\n         OI    PASWS,PASWSI        SET INTERNAL TABLE USE\n         B     GCMDAR3\nGCMDAR1  MVI   INOPR,INOPRI        INITIAL\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   CMEX                ERROR\n         LA    R1,ACSNME\n         MVI   INOPR,INOPRP        POSITION TO MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   CMEX                ERROR\n         TM    INSWS,INSWSM        MEMBER NOT FOUND ?\n         BZ    GCMDAR2             NO, OK\n         BAS   R6,CMEX             YES, NO COMMAND\nGCMDAR2  MVI   INOPR,INOPRR        READ MEMBER\n        @CALL  PTLDS\n         LTR   R6,R15              HOW COMPLETE ?\n         BNZ   CMEX                ERROR\n         ICM   R1,B'1111',INCBP    MEMBER EOF ?\n         BZ    GCMDAR3             YES, SKIP\n         CLI   0(R1),C'*'          NO, COMMENT ?\n         BNE   GCMDAR3             NO\n         LA    R0,1                YES, COUNT ALSO THIS CARD\n         A     R0,PACDS\n         ST    R0,PACDS\n         B     GCMDAR2\nGCMDAR3 @CALL  PRACS               NO, PROCESS AUTOMATIC CMD SEL.\n         LTR   R6,R15              HOW COMPLETE ?\n         BZ    GCMDAR2             CONTINUE\n         BP    CMEX                ERROR, SOMETHING WRONG IN MEMBER\n         XR    R6,R6               SET RC=0\nCMEX     LR    R1,R8\n         L     R0,=A(CMWKL)\n        FREEMAIN R,A=(1),LV=(0)\n         DROP  R8\n         LTR   R6,R6               TEST RC\n         BZ    GCMDLS              OK\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(18),=CL18'AUTOMATIC COMMANDS'\n         MVC   WKLINE+38(18),=CL18' SELECTION FAILURE'\n         LA    R1,WKLINE\n         LA    R0,46\n        @CALL  PUTLNE\n         B     GCMDSE\nGCMDLS   TM    SWSTTS,RCLSTX\n         BZ    GCMDT\n         CLI   STCMDL,0\n         BE    GCMDT\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(21),=CL21'AUTOMATIC COMMAND(S) '\n         MVC   WKLINE+31(18),=CL18'SUPPLIED (L=   ) :'\n         XR    R4,R4\n         IC    R4,STCMDL\n         CVD   R4,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+43(3),WORKD+1\n         LA    R1,WKLINE\n         LA    R0,49\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'LSTSCL),LSTSCL\n         LA    R1,WKLINE\n         LA    R0,10+L'LSTSCL\n        @CALL  PUTLNE\n         LA    R3,STCMDT\n         LA    R5,60\nGCMDLL   MVC   WKLINE(L'MSID),MSID\n         MVI   WKLINE+10,C' '\n         MVC   WKLINE+11(59),WKLINE+10\n         CLR   R4,R5\n         BNH   *+L'*+6\n         LR    R2,R5\n         B     *+L'*+2\n         LR    R2,R4\n         SR    R4,R2\n         BCT   R2,*+L'*+6\n         MVC   WKLINE+10(*-*),0(R3) <<EXECUTED>>\n         EX    R2,*-6\n         LA    R3,1(R3,R2)\n         LA    R1,WKLINE\n         LA    R0,70\n        @CALL  PUTLNE\n         LTR   R4,R4\n         BP    GCMDLL\n         SPACE 1\n*------- GET COMMAND(S) FROM TERMINAL\n         SPACE 1\nGCMDT    CLI   STCMDT,C'?'         IS IT ON TERMINAL REQUEST ?\n         BNE   GCMDSX              NO\n         MVI   STCMDL,0\n         MVI   STCMDT,C' '\n         MVC   STCMDT+1(L'STCMDT-1),STCMDT\n         TM    SWPRCS,BCKGR        IS IT A BACKGROUND RUN ?\n         BO    GCMDSX              YES, NO PROMPTING\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(18),=CL18'ENTER COMMAND(S) :'\n         LA    R0,28\nGCMDTR   LA    R1,WKLINE\n        @CALL  PUTLNE\n        @CALL  GETLNE\n         CH    R15,=H'4'           HOW COMPLETE ?\n         BE    GCMDTX              NONE\n         BH    GCMDTE              GET ERROR\n         LM    R2,R3,GTLITI        OK, HANDLE COMMAND(S)\n         CH    R3,=Y(L'STCMDT)     TOO LONG ?\n         BNH   GCMDTA              NO\n         BAS   R7,GRIBAP           YES, RELEASE INPUT BUFFER\n         B     GCMDSE              +0 - ERROR\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(22),=CL22'COMMAND(S) TOO LONG - '\n         MVC   WKLINE+32(21),=CL21'RE-ENTER COMMAND(S) :'\n         LA    R0,53\n         B     GCMDTR\nGCMDTA   STC   R3,STCMDL\n         BCT   R3,*+L'*+6\n         MVC   STCMDT(*-*),0(R2)   <<EXECUTED>>\n         EX    R3,*-6\nGCMDTX   BAS   R7,GRIBAP           RELEASE INPUT BUFFER\n         B     GCMDSE              +0 - ERROR\n         CLI   STCMDL,1\n         BNE   GCMDSX\n         CLI   STCMDT,C'*'         IS IT AN AUTOMATIC REQUEST ?\n         BE    *+L'*+8             YES\n         CLI   STCMDT,C'?'         IS IT ON TERMINAL REQUEST ?\n         BNE   GCMDSX              NO\n         MVI   STCMDL,0\n         MVI   STCMDT,C' '\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(18),=CL18'INVALID COMMAND - '\n         MVC   WKLINE+28(21),=CL21'RE-ENTER COMMAND(S) :'\n         LA    R0,49\n         B     GCMDTR\nGCMDTE   BAS   R7,GRIBAP           RELEASE INPUT BUFFER\n         B     GCMDSE              +0 - ERROR\n         B     GCMDSE\n         SPACE 1\n*------- GRIBAP - GETLINE RELEASE INPUT BUFFER AFTER PROCESS ROUTINE\n*              R7  : LINK REGISTER - RETURN +0 = ERROR\n*                                           +4 = OK\n         SPACE 1\nGRIBAP   LA    R2,GTPBX            ADDRESSABILITY FOR THE GTPB\n         USING GTPB,R2\n         ICM   R1,B'1111',GTPBIBUF GET ADDRESS OF INPUT BUFFER\n         DROP  R2\n         BZ    4(R7)               NONE ...\n         XR    R0,R0\n         ICM   R0,B'0011',0(R1)    INPUT BUFFER LENGTH\n         BZ    4(R7)               NONE ...\n         AH    R0,=H'7'            ROUND UP TO 8\n         SRL   R0,3\n         SLL   R0,3\n        FREEMAIN RC,LV=(0),A=(1),SP=1\n         LTR   R15,R15             HOW COMPLETE ?\n         BZ    4(R7)               SUCCESSFULLY ...\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(22),=CL22'GETLINE RELEASE INPUT '\n         MVC   WKLINE+32(18),=CL18'BUFFER ERROR - RC='\n         CVD   R15,WORKD\n         MVC   WORKD(4),=CL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+50(2),WORKD+2\n         CLI   WKLINE+50,C' '\n         BNE   *+L'*+10\n         MVC   WKLINE+50(1),WKLINE+51\n         MVI   WKLINE+51,C' '\n         LA    R1,WKLINE\n         LA    R0,52\n        @CALL  PUTLNE\n         BR    R7\n         SPACE 1\nGCMDSE   MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(33),=CL33'COMMAND(S) ABORT - DO IT YOURSELF'\n         LA    R1,WKLINE\n         LA    R0,43\n        @CALL  PUTLNE\n         LA    R15,4               SET RC=4 (ERROR)\n         B     GCMDSZ\nGCMDSX   XR    R15,R15             SET RC=0\nGCMDSZ  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        PROCESS AUTOMATIC COMMANDS SELECTION                       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- PRACS - AUTOMATIC COMMANDS SELECTION\n*              AT ENTRY : \"INCBP\" = LOGICAL RECORD POINTER OR 0 IF EOF\n*              R8  : INITIALIZATION WORK-AREA POINTER\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n*                                                  - = EOF PROCESSED\n         SPACE 1\nPRACS   @ENTER ,\n         USING CMWKA,R8\n         TM    PASWS,PASWSI        INTERNAL TABLE USE ?\n         BZ    PRACS1              NO\n         L     R15,AUTOS           YES, GET SCAN POINTERS\n         LM    R1,R3,0(R15)\n         OI    PASWS,PASWSN        NEVER START OF A CARD (NO COMMENTS)\n         B     PRACS2\nPRACS1   ICM   R1,B'1111',INCBP    GET CARD POINTER\n         BZ    PATEOF              MEMBER EOF\n         LA    R3,71(R1)\n         LA    R2,1\n         LR    R0,R2               ADD ONE TO CARDS COUNT\n         A     R0,PACDS\n         ST    R0,PACDS\n         NI    PASWS,255-PASWSN    SET START OF A CARD\nPRACS2   CLI   0(R1),C' '\n         BNE   PRACS4\nPRACS3   BXLE  R1,R2,PRACS2\n         B     PRANXT\n         CLI   0(R1),C' '\n         BE    PRACS3\nPRANOT   BXLE  R1,R2,*-8\nPRANXT   TM    PASWS,PASWSI        INTERNAL TABLE USE ?\n         BO    PATEOF              YES\n         B     PRACSC              NO, NEXT CARD\nPRACS4   TM    PASWS,PASWSN        START OF A CARD ?\n         BO    PRWTG               NO\n         OI    PASWS,PASWSN        YES, SET START OF CARD DONE\n         CLI   0(R1),C'*'          COMMENT FOLLOWS ?\n         BNE   PRWTG               NO\n         B     PRACSC              YES, SKIP CARD\nPRASKP   MVI   PASCW,0             RESTART SCAN TO NEXT IF-\n         MVI   PASCV,0\n         NI    PAKSW,255-PAKWRZ    RESET ALL KEYWORDS DONE\nPRACNT   CLR   R1,R3\n         BNH   PRACS3\n         B     PRANXT\nPRWTG    XR    R15,R15             WHERE TO GO\n         IC    R15,PASCW\n         CL    R15,PRCWTG\n         BH    PAERR5\n         SLL   R15,2\n         B     PRBWTG(R15)         GO TO\n         CNOP  0,4\nPRBWTG   B     PRSCO1              = 0\n         B     PRSCN1                1\n         B     PRTRM0                2\n         B     PRCHK0                3\n         B     PRSEL0                4\n         B     PRCOM0                5\nPRCWTG   DC    AL4(((*-PRBWTG)/L'PRBWTG)-1)\n         SPACE 1\nPRSCO1   TM    SWPRCS,PROFF        SEARCH FOR IF-ON OR IF-OFF\n         BO    PRSCO2\n        @CHKW  IF-ON,WHERE=PRCHKW,NOMATCH=PRANOT,MATCH=PRSCO3\nPRSCO2  @CHKW  IF-OFF,WHERE=PRCHKW,NOMATCH=PRANOT,MATCH=PRSCO3\nPRSCO3   MVI   PASCW,1\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     PRANXT\n         CLI   0(R1),C' '\n         BE    PRACNT\n         B     PAERR1              SYNTAX ERROR ...\n         SPACE 1\nPRSCN1  @CHKW  'T=','TERM=','TERMINAL=',                               X\n               WHERE=PRCHKW,MATCH=PRTRM1\n        @CHKW  'U=','USER=','USERS=',                                  X\n               WHERE=PRCHKW,MATCH=PRUSR1\n        @CHKW  'G=','GROUP=','GROUPS=',                                X\n               WHERE=PRCHKW,MATCH=PRGRP1\n        @CHKW  'P=','PROC=','PROCS=','PROCEDURE=','PROCEDURES=',       X\n               WHERE=PRCHKW,MATCH=PRPRC1\n         TM    SWPRCS,PROFF\n         BO    PRSCN2\n        @CHKW  'S=','SEL=','SELECT=',                                  X\n               WHERE=PRCHKW,MATCH=PRSEL1\nPRSCN2  @CHKW  'C=','CMD=','CMDS=','COMMAND=','COMMANDS=',             X\n               WHERE=PRCHKW,MATCH=PRCOM1,NOMATCH=PAERR1\n         SPACE 1\nPRTRM0   XR    R15,R15             WHERE TO GO\n         IC    R15,PASCV\n         CL    R15,PRCTRM\n         BH    PAERR6\n         SLL   R15,2\n         B     PRBTRM(R15)         GO TO\n         CNOP  0,4\nPRBTRM   B     PRTRM2              = 0\nPRCTRM   DC    AL4(((*-PRBTRM)/L'PRBTRM)-1)\nPRTRM1   TM    PAKSW,PAKWT         PROCESS TERMINAL\n         BO    PAERR1              SYNTAX ERROR ...\n         OI    PAKSW,PAKWT\n         MVI   PASCW,2\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     PRTRM2\n         MVI   PASCV,0\n         B     PRANXT\nPRTRM2   BAS   R14,PRVERK\n        @CHKW  S,SCREEN,D,DISPLAY,WHERE=PRCHKW,MATCH=PRTRM3\n        @CHKW  L,B,LINE,BACK,LINES,BACKGROUND,                         X\n               WHERE=PRCHKW,NOMATCH=PAERR1\n         TM    SWSTTS,TDSPLY       TERMINAL IS A SCREEN ?\n         BO    PRASKP              YES, SKIP\n         B     PRTRM4              NO, OK\nPRTRM3   TM    SWSTTS,TDSPLY       TERMINAL IS A SCREEN ?\n         BZ    PRASKP              NO, SKIP\nPRTRM4   MVI   PASCW,1             YES, OK\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     PRANXT\n         CLI   0(R1),C' '\n         BE    PRACNT\n         B     PAERR1              SYNTAX ERROR ...\n         SPACE 1\nPRUSR1   TM    PAKSW,PAKWU         PROCESS USER=\n         BO    PAERR1              SYNTAX ERROR ...\n         MVC   PANMEL,USIDL\n         MVC   PANME,USID\n         OI    PAKSW,PAKWU\n         B     PRCHK1\nPRGRP1   TM    PAKSW,PAKWG         PROCESS GROUP=\n         BO    PAERR1              SYNTAX ERROR ...\n         MVC   PANMEL,GRNML\n         MVC   PANME,GRNM\n         OI    PAKSW,PAKWG\n         B     PRCHK1\nPRPRC1   TM    PAKSW,PAKWP         PROCESS PROCEDURE=\n         BO    PAERR1              SYNTAX ERROR ...\n         MVC   PANMEL,PNMEL\n         MVC   PANME,PNME\n         OI    PAKSW,PAKWP\n         B     PRCHK1\nPRCHK0   XR    R15,R15             WHERE TO GO\n         IC    R15,PASCV\n         CL    R15,PRCCHK\n         BH    PAERR7\n         SLL   R15,2\n         B     PRBCHK(R15)         GO TO\n         CNOP  0,4\nPRBCHK   B     PRCHK2              = 0\n         B     PRCHK4                1\n         B     PRCHK11               2\n         B     PRCHK22               3\nPRCCHK   DC    AL4(((*-PRBCHK)/L'PRBCHK)-1)\nPRCHK1   MVI   PASCW,3\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     PRCHK2\n         MVI   PASCV,0\n         B     PRANXT\nPRCHK2   BAS   R14,PRVERK\n         CLI   0(R1),C'('          MULTIPLE TEST ?\n         BE    PRCHK3              YES\n         LR    R4,R1               NO, SINGLE\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         BAS   R14,PRCHKR\n         B     PRASKP              +0 - CANNOT OR NO MATCH\n         MVI   PASCW,1             +4 - OK, MATCH\n         B     PRACNT\nPRCHK3   BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     PRCHK4\n         MVI   PASCV,1\n         B     PRANXT\nPRCHK4   BAS   R14,PRVERK\n         LR    R4,R1\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+16\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         CLI   0(R1),C')'\n         BNE   *-20\n         BAS   R14,PRCHKR\n         B     PRCHK10             +0 - CANNOT OR NO MATCH\n         B     PRCHK20             +4 - OK, MATCH\nPRCHK10  CLR   R1,R3\n         BH    *+L'*+20\n         CLI   0(R1),C')'          IS IT THE END ?\n         BE    PRCHK12             YES\n         CLI   0(R1),C' '\n         BNE   PRCHK4              CHECK THE NEXT\n         BXLE  R1,R2,*-16\n         MVI   PASCV,2\n         B     PRANXT\nPRCHK11  CLI   0(R1),C')'          IS IT THE END ?\n         BNE   PRCHK4              NO, CHECK THE NEXT\nPRCHK12  BXLE  R1,R2,*+L'*+4\n         B     PRASKP\n         CLI   0(R1),C' '\n         BE    PRASKP\n         B     PAERR1              SYNTAX ERROR ...\nPRCHK20  CLR   R1,R3\n         BNH   PRCHK22\nPRCHK21  MVI   PASCV,3\n         B     PRANXT\nPRCHK22  BAS   R14,PRVERK\n         CLI   0(R1),C')'          IS IT THE END ?\n         BE    *+L'*+8             YES\n         BXLE  R1,R2,PRCHK22\n         B     PRCHK21\n         MVI   PASCW,1\n         BXLE  R1,R2,*+L'*+4\n         B     PRANXT\n         CLI   0(R1),C' '\n         BE    PRACNT\n         B     PAERR1              SYNTAX ERROR ...\nPRCHKR   LR    R5,R1               CHECK ROUTINE\n         SLR   R5,R4               R14 = LINK REGISTER\n         CLI   0(R4),C'.'                RETURN +0 = NO MATCH\n         BE    PRCHKR1                          +4 = OK, MATCH\n         CH    R5,=H'8'\n         BH    PAERR2              NAME TOO LONG ...\n         MVI   WORKD,C' '\n         MVC   WORKD+1(L'WORKD-1),WORKD\n         BCT   R5,*+L'*+6\n         MVC   WORKD(*-*),0(R4)    <<EXECUTED>>\n         EX    R5,*-6\n         CLC   PANME,WORKD\n         BNER  R14                 +0, NO MATCH\n         B     4(R14)              +4, OK, MATCH\nPRCHKR1  BCT   R5,*+L'*+4\n         B     PAERR1              SYNTAX ERROR ...\n         CH    R5,=H'8'\n         BH    PAERR2              NAME TOO LONG ...\n         CLM   R5,B'0001',PANMEL\n         BHR   R14                 +0, CANNOT MATCH\n         BCT   R5,*+L'*+6\n         CLC   PANME(*-*),1(R4)    <<EXECUTED>>\n         EX    R5,*-6\n         BNER  R14                 +0, NO MATCH\n         B     4(R14)              +4, OK, MATCH\n         SPACE 1\nPRSEL0   XR    R15,R15             WHERE TO GO\n         IC    R15,PASCV\n         CL    R15,PRCSEL\n         BH    PAERR8\n         SLL   R15,2\n         B     PRBSEL(R15)         GO TO\n         CNOP  0,4\nPRBSEL   B     PRSEL2              = 0\n         B     PRSEL4                1\n         B     PRSEL6                2\nPRCSEL   DC    AL4(((*-PRBSEL)/L'PRBSEL)-1)\nPRSEL1   TM    PAKSW,PAKWS         PROCESS TERMINAL\n         BO    PAERR1              SYNTAX ERROR ...\n         OI    PAKSW,PAKWS\n         MVI   PASCW,4\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     PRSEL2\n         MVI   PASCV,0\n         B     PRANXT\nPRSEL2   BAS   R14,PRVERK\n         CLI   0(R1),C'('          MULTIPLE TEST ?\n         BE    PRSEL3              YES\n         LR    R4,R1               NO, SINGLE\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         BAS   R6,PRSELR\n         B     PRASKP              +0 - NOT SELECTED, SKIP\n         MVI   PASCW,1             +4 - OK, MATCH\n         B     PRACNT\nPRSEL3   BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     PRSEL4\n         MVI   PASCV,1\n         B     PRANXT\nPRSEL4   BAS   R14,PRVERK\n         LR    R4,R1\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+16\n         CLI   0(R1),C' '\n         BE    *+L'*+8\n         CLI   0(R1),C')'\n         BNE   *-20\n         BAS   R6,PRSELR\n         B     PRASKP              +0 - NOT SELECTED, SKIP\n         CLR   R1,R3               +4 - OK, MATCH\n         BNH   PRSEL6\nPRSEL5   MVI   PASCV,2\n         B     PRANXT\nPRSEL6   CLI   0(R1),C')'          IS IT THE END ?\n         BE    PRSEL7              YES\n         CLI   0(R1),C' '          NO, SEARCH THE NEXT\n         BNE   PRSEL4\n         BXLE  R1,R2,PRSEL6\n         B     PRSEL5\nPRSEL7   MVI   PASCW,1\n         BXLE  R1,R2,*+L'*+4\n         B     PRANXT\n         CLI   0(R1),C' '\n         BE    PRACNT\n         B     PAERR1              SYNTAX ERROR ...\nPRSELR   LR    R5,R1               CHECK ROUTINE\n         SLR   R5,R4               R6 = LINK REGISTER\n         CH    R5,=H'4'                 RETURN +0 = NOT SELECTED\n         BH    PAERR2                          +4 = OK\n         BCTR  R5,0\n         XR    R14,R14\n         L     R15,SELTB\nPRSELR1  CLI   0(R15),255\n         BE    PAERR1              SYNTAX ERROR ...\n         IC    R14,0(R15)\n         CLM   R5,B'0001',0(R15)\n         BNE   *+L'*+8\n         EX    R5,*+L'*+12\n         BE    PRSELR2\n         LA    R15,L'LIB#DSI+2(R15,R14)\n         B     PRSELR1\n         CLC   0(*-*,R4),1(R15)    <<EXECUTED>>\nPRSELR2  MVC   TDSI,XDSI\n         LA    R15,2(R15,R14)\n         NC    TDSI(L'LIB#DSI),0(R15)\n         BZR   R6                  +0, NOT SELECTED, SKIP\n         B     4(R6)               +4, OK, MATCH\n         SPACE 1\nPRCOM0   XR    R15,R15             WHERE TO GO\n         IC    R15,PASCV\n         CL    R15,PRCCOM\n         BH    PAERR9\n         SLL   R15,2\n         B     PRBCOM(R15)         GO TO\n         CNOP  0,4\nPRBCOM   B     PRCOM2              = 0\n         B     PRCOM5                1\n         B     PRCOM7                2\n         B     PRCOM10               3\n         B     PRCOM12               4\nPRCCOM   DC    AL4(((*-PRBCOM)/L'PRBCOM)-1)\nPRCOM1   MVI   PASCW,5             PROCESS COMMAND\n         LA    R1,0(R1,R7)\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+12\n         CLI   0(R1),C' '\n         BE    *-12\n         B     PRCOM2\n         MVI   PASCV,0\n         B     PRANXT\nPRCOM2   BAS   R14,PRVERK\n         CLI   0(R1),C''''         QUOTED COMMAND ?\n         BE    PRCOM3              YES\n         LR    R4,R1               NO, STRING COMMAND\n         BXLE  R1,R2,*+L'*+4\n         B     *+L'*+8\n         CLI   0(R1),C' '\n         BNE   *-12\n         LR    R5,R1\n         SLR   R5,R4\n         CH    R5,=Y(L'STCMDT)\n         BH    PAERR3              COMMAND TOO LONG ...\n         STC   R5,STCMDL\n         BCT   R5,*+L'*+6\n         MVC   STCMDT(*-*),0(R4)   <<EXECUTED>>\n         EX    R5,*-6\n         B     PATCMD\nPRCOM3   XR    R4,R4\n         LA    R5,PACMD\nPRCOM4   BXLE  R1,R2,PRCOM5+L'PRCOM5\n         STM   R4,R5,PAQTC\n         MVI   PASCV,1\n         B     PRANXT\nPRCOM5   LM    R4,R5,PAQTC\n         CLI   0(R1),C' '          SKIP INITIAL BLANKS AND SEPARATORS\n         BE    *+L'*+8\n         CLI   0(R1),C';'\n         BNE   PRCOM7+L'PRCOM7\n         BXLE  R1,R2,*-16\n         B     PRCOM4+L'PRCOM4     COMMAND QUOTES ERROR\nPRCOM6   LA    R5,1(R5)\n         BXLE  R1,R2,PRCOM7+L'PRCOM7\n         STM   R4,R5,PAQTC\n         MVI   PASCV,2\n         B     PRANXT\nPRCOM7   LM    R4,R5,PAQTC\n         CLI   0(R1),C''''\n         BE    PRCOM11\nPRCOM8   LA    R4,1(R4)\n         CH    R4,=Y(L'STCMDT)\n         BH    PAERR3\n         MVC   0(1,R5),0(R1)\n         CLI   0(R5),C';'          SEPARATOR JUST MOVED ?\n         BNE   PRCOM6              NO\n         MVI   0(R5),C' '          SUPPRESS PREVIOUS BLANKS IF ANY\n         BCTR  R4,0\n         BCTR  R5,0\n         CLI   0(R5),C' '\n         BE    *-8\n         MVI   1(R5),C';'\n         LA    R4,1(R4)\n         LA    R5,2(R5)\nPRCOM9   BXLE  R1,R2,PRCOM10+L'PRCOM10\n         STM   R4,R5,PAQTC\n         MVI   PASCV,3\n         B     PRANXT\nPRCOM10  LM    R4,R5,PAQTC\n         CLI   0(R1),C' '          SKIP UNNEEDED BLANKS AND SEPARATORS\n         BE    PRCOM9\n         CLI   0(R1),C';'\n         BE    PRCOM9\n         B     PRCOM7+L'PRCOM7\nPRCOM11  BXLE  R1,R2,PRCOM12+L'PRCOM12\n         STM   R4,R5,PAQTC\n         MVI   PASCV,4\n         B     PRANXT\nPRCOM12  LM    R4,R5,PAQTC\n         CLI   0(R1),C''''\n         BE    PRCOM8\n         CLI   0(R1),C' '\n         BNE   PAERR4              COMMAND QUOTES ERROR ...\n         STC   R4,STCMDL\n         LTR   R4,R4\n         BNP   PATCMD\n         BCT   R4,*+L'*+6\n         MVC   STCMDT(*-*),PACMD   <<EXECUTED>>\n         EX    R4,*-6\n         B     PATCMD\n         SPACE 1\n*------- PRCHKW - CHECK KEYWORD ROUTINE\n*               R0  : WORK REGISTER\n*               R1  : CURRENT TEXT POINTER\n*               R2  : TEXT POINTER INCREMENT (DON'T MODIFY IT)\n*               R3  : END OF TEXT POINTER\n*               R6  : LINK REGISTER - RETURN +0 = NO MATCH\n*                                            +4 = OK, MATCH\n*                                            +8 = KEYWORDS LIST\n*               R7  : WORK REGISTER - AT RETURN +4 (OK) = LENGTH OF\n*                                                         KEYWORD-1\n*               R15 : WORK REGISTER\n*        KEYWORDS LIST :       DC   AL1(L'KW1-1)\n*                        KW1   DC   C'...KEYWORD...'\n*                        ...   ...  ...\n*                              DC   AL1(255) <--- END OF LIST\n*        NOTE : YOU MAY USE MACRO @CHKW TO GENERATE THE CALL, THE\n*               RETURNS AND THE KEYWORDS LIST.\n*               SYNTAX : @CHKW  ...,...,...,   <- ONE OR MORE KEYWORDS\n*                               WHERE=PRCHKW,NOMATCH=...,MATCH=...\n*                 NOTE : IF NOMATCH= AND/OR MATCH= ARE NOT SPECIFIED,\n*                        THEN THE CORRESPONDING BRANCH IS GENERATED TO\n*                        CONTINUE IN SEQUENCE.\n         SPACE 1\nPRCHKW  @GCHKR R1,R3\n         SPACE 1\n*------- PRVERK - VERIFY KEYWORD ROUTINE\n*               R1  : CURRENT TEXT POINTER\n*               R14 : LINK REGISTER\n         SPACE 1\nPRVERK  @CHKW  IF-ON,WHERE=PRCHKW,MATCH=PAERR1\n        @CHKW  IF-OFF,WHERE=PRCHKW,MATCH=PAERR1\n        @CHKW  'T=','TERM=','TERMINAL=',                               X\n               WHERE=PRCHKW,MATCH=PAERR1\n        @CHKW  'U=','USER=','USERS=',                                  X\n               WHERE=PRCHKW,MATCH=PAERR1\n        @CHKW  'G=','GROUP=','GROUPS=',                                X\n               WHERE=PRCHKW,MATCH=PAERR1\n        @CHKW  'P=','PROC=','PROCS=','PROCEDURE=','PROCEDURES=',       X\n               WHERE=PRCHKW,MATCH=PAERR1\n        @CHKW  'S=','SEL=','SELECT=',                                  X\n               WHERE=PRCHKW,MATCH=PAERR1\n        @CHKW  'C=','CMD=','CMDS=','COMMAND=','COMMANDS=',             X\n               WHERE=PRCHKW,NOMATCH=0(R14),MATCH=PAERR1\n         SPACE 1\nPAERR1   LA    R2,=CL21'SYNTAX ERROR DETECTED'\n         B     PAERRB\nPAERR2   LA    R2,=CL21'NAME ERROR : TOO LONG'\n         LR    R1,R4\n         B     PAERRB\nPAERR3   LA    R2,=CL21'COMMAND TEXT TOO LONG'\n         B     PAERRB\nPAERR4   LA    R2,=CL21'QUOTES ERROR DETECTED'\n         B     PAERRB\nPAERR5   ICM   R2,B'0111',=CL3'W-0'\n         B     PAERRA\nPAERR6   ICM   R2,B'0111',=CL3'V-1'\n         B     PAERRA\nPAERR7   ICM   R2,B'0111',=CL3'V-2'\n         B     PAERRA\nPAERR8   ICM   R2,B'0111',=CL3'V-3'\n         B     PAERRA\nPAERR9   ICM   R2,B'0111',=CL3'V-4'\nPAERRA   MVC   WKLINE+10(13),=CL13'VALUE (   ) ='\n         STCM  R2,B'0111',WKLINE+17\n         CVD   R15,WORKD\n         MVC   WKLINE+23(8),=XL9'402020202020212040'\n         ED    WKLINE+23(8),WORKD+L'WORKD-4\n         B     PAERRC\nPAERRB   MVC   WKLINE+10(21),0(R2)\nPAERRC   LR    R2,R1               SAVE CURRENT POINTER\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+31(28),=CL28' - AUTOMATIC COMMAND FLUSHED'\n         LA    R1,WKLINE\n         LA    R0,59\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(8),=CL8'SCAN AT '\n         LA    R15,WKLINE+18\n         ICM   R0,B'1111',PACDS\n         BZ    PAERRD\n         MVC   0(4,R15),=CL4'CARD'\n         CVD   R0,WORKD\n         MVC   4(9,R15),=XL9'402020202020212040'\n         ED    4(8,R15),WORKD+L'WORKD-4\n         CLI   5(R15),C' '\n         BNE   *+L'*+10\n         MVC   4(8,R15),5(R15)\n         B     *-14\n         LA    R15,6(R15)\n         CLI   0(R15),C' '\n         BE    *+L'*+8\n         LA    R15,1(R15)\n         B     *-12\n         LA    R15,1(R15)\nPAERRD   MVC   0(4,R15),=CL4'COL.'\n         TM    PASWS,PASWSI        INTERNAL TABLE USE ?\n         BZ    *+L'*+12            NO\n         L     R3,AUTOS            YES, GET SCAN POINTERS\n         L     R3,0(R3)\n         B     *+L'*+4\n         ICM   R3,B'1111',INCBP    GET CARD POINTER\n         SLR   R2,R3\n         LA    R2,1(R2)\n         CVD   R2,WORKD\n         MVC   4(9,R15),=XL9'402020202020212040'\n         ED    4(8,R15),WORKD+L'WORKD-4\n         CLI   5(R15),C' '\n         BNE   *+L'*+10\n         MVC   4(8,R15),5(R15)\n         B     *-14\n         LA    R15,6(R15)\n         CLI   0(R15),C' '\n         BE    *+L'*+8\n         LA    R15,1(R15)\n         B     *-12\n         LA    R1,WKLINE\n         LR    R0,R15\n         SLR   R0,R1\n        @CALL  PUTLNE\n         B     PRACSQ\n         SPACE 1\nPATCMD   CLI   STCMDL,1\n         BNE   PRACSEOF\n         CLI   STCMDT,C'*'         IS IT AN AUTOMATIC REQUEST ?\n         BNE   PRACSEOF            NO\n         MVI   STCMDL,0            YES, AGAIN, CANCEL IT\n         MVI   STCMDT,C' '\n         B     PRACSEOF\nPATEOF   CLI   PASCW,0\n         BE    PRACSEOF            OK\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(19),=CL19'SYNTAX ERROR AT END'\n         MVC   WKLINE+29(18),=CL18' - COMMAND FLUSHED'\n         LA    R1,WKLINE\n         LA    R0,47\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(34),=CL34'... SOMETHING MISSING PROBABLY ...'\n         LA    R1,WKLINE\n         LA    R0,44\n        @CALL  PUTLNE\nPRACSQ   LA    R15,4               SET RC=4\n         B     PRACSX\nPRACSEOF LH    R15,=H'-1'          SET RC=-\n         B     PRACSX\nPRACSC   XR    R15,R15             SET RC=0\nPRACSX  @EXIT\n         DROP  R8\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        PROCESS TABLES LIBRARY DATA-SET (MEMBERS)                  *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- PTLDS - PROCESS TABLES LIBRARY DATA-SET\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS / RETURN CODE : 0 = OK, DONE\n*                                                  4 = ERROR\n         SPACE 1\nPTLDS   @ENTER ,\n         TM    INSWS,INSWSF        FLUSH ?\n         BO    PTLDSY              YES\n         LA    R7,INDCB\n         USING IHADCB,R7\n         SPACE 1\n*------- INITIAL PROCESS\n         SPACE 1\n         CLI   INOPR,INOPRI        INITIAL ?\n         BNE   PTCHKP              NO\n         TM    DCBOFLGS,DCBOFOPN\n         BO    PTLDSZ              SKIP, ALREADY OPENED\n         LM    R1,R4,=A(TLSOPN,TLSCLS,TLSDCB,TLSDECB) SET SKELETONS\n         MVC   INOPN(TLLOPN*4),0(R1)\n         MVC   INCLS(TLLCLS*4),0(R2)\n         MVC   INDCB(TLLDCB*4),0(R3)\n         MVC   INDECB(TLLDECB*4),0(R4)\n         MVC   INRXL,=A(INDCBX+X'85000000')\n         LA    R1,INRXL\n         LA    R2,INRDE\n         LA    R3,INRDX\n         STCM  R1,B'0111',DCBEXLSA\n         STCM  R2,B'0111',DCBSYNA\n         STCM  R3,B'0111',DCBEODA\n         MVI   DCBDDNAM,255\n         MVC   DCBDDNAM+1(L'DCBDDNAM-1),DCBDDNAM\n         MVC   DCBDDNAM(L'DCBDDNAM),=CL8'DYLO$IT '\n         MVC   WDDN,DCBDDNAM\n         BAS   R14,CHKDD           DD ALREADY ALLOCATED ?\n         B     *+L'*+8             +0 = NO, ALLOCATE IT\n         OI    INSWS,INSWTL        +4 = YES, PRE-ALLOCATED\n         B     ININI2\n         L     R3,ATLDSN\n         LA    R2,USIDL\n         BAS   R6,INLOC\n         B     ININI1              +0 = OK\n         LA    R2,GRNML\n         BAS   R6,INLOC\n         B     ININI1              +0 = OK\n         L     R2,ATLPFX\n         BAS   R6,INLOC\n         B     ININI1              +0 = OK\n         B     PTLDSY\nININI1   L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n        STAX   DEFER=YES           DEFER ALL ATTENTIONS\n         LA    R4,XDA08            ALLOCATE DATA-SET\n         USING DAPB08,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA08,R4),0(R4)\n         LA    R1,INDSNL\n         ST    R1,DA08PDSN\n         MVC   DA08DDN,DCBDDNAM\n         MVC   DA08CD,=XL2'0008'\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '\n         DROP  R3,R4\n         BAS   R14,XDAIR           EXECUTE ALLOCATION\n         B     *+L'*+4             +0 = OK\n         B     INERR1              +4 = ERROR\n        STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         OI    INSWS,INSWSA        SET FILE ALLOCATED\nININI2  OPEN   ((R7),(INPUT)),MF=(E,INOPN)\n         TM    DCBOFLGS,DCBOFOPN\n         BZ    INERR2              ERROR, OPEN FAILED\n         TM    INSWS,INSWSO\n         BO    INERR3              ERROR, WRONG LRECL\n         LH    R1,DCBBLKSI\n         LTR   R1,R1\n         BP    *+L'*+4\n         L     R1,INLRL\n         ST    R1,INBLK\n         LA    R0,7(R1)\n         SRL   R0,3\n         SLL   R0,3\n        GETMAIN R,LV=(0)\n         ST    R1,INSBP            SAVE ADDRESS OF I/O AREA\n         B     PTLDSZ\n         SPACE 1\n*------- FIND MEMBER PROCESS\n*        AT ENTRY : R1 = ADDRESS OF MEMBER NAME\n         SPACE 1\nPTCHKP   CLI   INOPR,INOPRP        POSITION TO MEMBER ?\n         BNE   PTCHKR              NO\n         NI    INSWS,255-INSWSM    RESET\n         XC    INCBP,INCBP\n         XC    INEBP,INEBP\n         XC    INBLDL(INRZB),INBLDL\n         MVC   INBLDL(L'INBLDL),=AL2(1,INRZB)\n         MVC   INBNME(L'INBNME),0(R1)   SET MEMBER NAME\n        BLDL   (R7),INBLDL\n         LTR   R15,R15             TEST COMPLETION CODE\n         BZ    INFND1              OK\n         LA    R0,4\n         CLR   R15,R0\n         BNE   INERR4              ERROR, BLDL FAILED\n         OI    INSWS,INSWSM        SET MEMBER NOT FOUND\n         TM    SWSTTS,MSGLST\n         BZ    PTLDSZ\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(8),=CL8'MEMBER \"'\n         MVC   WKLINE+18(L'INBNME),INBNME\n         LA    R14,WKLINE+L'INBNME+17\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(11,R14),=CL11'\" NOT FOUND'\n         LA    R14,12(R14)\n         LA    R0,WKLINE\n         SLR   R14,R0\n         LR    R0,R14\n         LA    R1,WKLINE\n        @CALL  PUTLNE\n         B     PTLDSZ\nINFND1  FIND   (R7),INBTTR,C\n         B     PTLDSZ\n         SPACE 1\n*------- READ MEMBER PROCESS\n*        AT EXIT : \"INCBP\" = LOGICAL RECORD POINTER OR 0 IF EOF\n         SPACE 1\nPTCHKR   CLI   INOPR,INOPRR        READ MEMBER ?\n         BNE   PTCHKE              NO\n         ICM   R5,B'1111',INCBP    GET CURRENT POINTER\n         BZ    INRDM1              INITIAL\n         AL    R5,INLRL            POINTS AT NEXT LOGICAL RECORD\n         CL    R5,INEBP            IS BLOCK EXHAUSTED ?\n         BL    INRDM2              NO\nINRDM1   L     R5,INSBP            YES, AREA ADDRESS\n         LA    R4,INDECB           DECB ADDRESS\n         USING DECB,R4\n        READ   (R4),SF,(R7),(R5),'S',MF=E\n        CHECK  (R4)\n         TM    INSWS,INSWSR\n         BO    INERR5              ERROR, READ FAILED\n         L     R0,INBLK            COMPUTE REAL BLOCK LENGTH\n         L     R1,DECIOBPT         (IOB ADDRESS)\n         DROP  R4\n         USING IOBSTDRD,R1\n         SH    R0,IOBCSW+5         RESIDUAL COUNT\n         DROP  R1\n         ALR   R0,R5\n         ST    R0,INEBP            SET LAST + 1 POINTER\nINRDM2   ST    R5,INCBP            SET CURRENT POINTER\n         B     PTLDSZ\n         CNOP  0,4\nINRDX    XC    INCBP,INCBP         SAY EOF\n         B     PTLDSZ\n         SPACE 1\n*------- FINAL PROCESS\n         SPACE 1\nPTCHKE   LA    R6,PTLDSZ\n         CLI   INOPR,INOPRE        FINAL ?\n         BE    INFNL2              YES\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(33),=CL33'INVALID INPUT OPERATION REQUEST ='\n         XR    R15,R15\n         IC    R15,INOPR\n         CVD   R15,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   WKLINE+43(4),WORKD\n         LA    R1,WKLINE\n         LA    R0,47\n        @CALL  PUTLNE\nINFNL1   LA    R6,PTLDSY\nINFNL2   TM    DCBOFLGS,DCBOFOPN   OPENED ?\n         BZ    INFNL3              NO\n        CLOSE  ((R7)),MF=(E,INCLS)\nINFNL3   TM    INSWS,INSWTL        PRE-ALLOCATED ?\n         BO    INFNL4              YES\n         TM    INSWS,INSWSA        NO, ALLOCATED ?\n         BZ    INFNL4              NO\n         NI    INSWS,255-INSWSA    YES, DE-ALLOCATE DATA-SET\n         L     R2,CPPLADDR\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n         LA    R4,XDA18\n         USING DAPB18,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA18,R4),0(R4)\n         MVC   DA18CD,=XL2'0018'\n         MVC   DA18DDN,DCBDDNAM\n         MVC   DA18MNM,=CL8' '\n         MVC   DA18SCLS(L'DA18SCLS),=CL8' '\n         DROP  R3,R4\n         BAS   R14,XDAIR           EXECUTE DE-ALLOCATION\n         B     INFNL4              +0 = OK, +4 = ERROR\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(L'DCBDDNAM),DCBDDNAM\n         LA    R14,WKLINE+L'DCBDDNAM+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(21,R14),=CL21' DE-ALLOCATION FAILED'\n         LA    R14,22(R14)\n         LA    R1,WKLINE\n         SLR   R14,R1\n         LR    R0,R14\n        @CALL  PUTLNE\n         LA    R6,PTLDSY\nINFNL4   OI    INSWS,INSWSF\n         L     R1,INBLK\n         LA    R0,7(R1)\n         SRL   R0,3\n         SLL   R0,3\n         ICM   R1,B'1111',INSBP\n         BZR   R6\n        FREEMAIN R,A=(1),LV=(0)\n         BR    R6\n         SPACE 1\nINERR1  STAX   DEFER=NO            RESTORE ALL ATTENTIONS\n         TM    SWSTTS,MSGLST\n         BZ    INFNL1\n         MVC   WKLINE+10(L'DCBDDNAM),DCBDDNAM\n         LA    R14,WKLINE+L'DCBDDNAM+9\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(18,R14),=CL18' ALLOCATION FAILED'\n         LA    R14,19(R14)\n         B     INERRB\nINERR2   TM    SWSTTS,MSGLST\n         BZ    INFNL1\n         MVC   WKLINE+28(11),=CL11'OPEN FAILED'\n         LA    R0,39\n         B     INERRA\nINERR3   TM    SWSTTS,MSGLST\n         BZ    INFNL1\n         MVC   WKLINE+28(12),=CL12'LRECL NOT 80'\n         LA    R0,40\nINERRA   MVC   WKLINE+10(18),=CL18'TABLES DATA-SET - '\n         B     INERRC\nINERR4   TM    SWSTTS,MSGLST\n         BZ    INFNL1\n         MVC   WKLINE+10(6),=CL6'BLDL \"'\n         MVC   WKLINE+16(L'INBNME),INBNME\n         LA    R14,WKLINE++L'INBNME+15\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(12,R14),=CL12'\" FAILED RC='\n         ST    R15,WORKD\n         UNPK  13(5,R14),WORKD+2(3)\n         LA    R14,17(R14)\n         B     INERRB\nINERR5   TM    SWSTTS,MSGLST\n         BZ    INFNL1\n         MVC   WKLINE+10(8),=CL8'MEMBER \"'\n         MVC   WKLINE+18(L'INBNME),INBNME\n         LA    R14,WKLINE+L'INBNME+17\n         CLI   0(R14),C' '\n         BNE   *+L'*+4\n         BCT   R14,*-8\n         MVC   1(12,R14),=CL12'\" READ ERROR'\n         LA    R14,13(R14)\nINERRB   LA    R0,WKLINE\n         SLR   R14,R0\n         LR    R0,R14\nINERRC   MVC   WKLINE(L'MSID),MSID\n         LA    R1,WKLINE\n        @CALL  PUTLNE\n         B     INFNL1\n         SPACE 1\n*------- READ ERROR ROUTINE (READ PROCESSING)\n         SPACE 1\nINRDE    OI    INSWS,INSWSR        SET READ ERROR SWITCH\n         BR    R14\n         SPACE 1\n         DROP  R7\n         SPACE 1\n*------- DCB EXIT ROUTINE (OPEN PROCESSING)\n         SPACE 1\n         CNOP  0,4\n         USING IHADCB,R1\nINDCBX   TM    DCBRECFM,DCBRECF    TEST IF RECORD FORMAT FIXED\n         BZ    INDCBE\n         TM    DCBRECFM,DCBRECV\n         BO    INDCBE\n         LA    R3,80               LOGICAL RECORD LENGTH MUST BE 80\n         LH    R2,DCBLRECL\n         LTR   R2,R2\n         BP    *+L'*+10\n         LH    R2,DCBBLKSI\n         LTR   R2,R2\n         BNP   INDCBE\n         CLR   R2,R3\n         BNE   INDCBE\n         ST    R2,INLRL\n         BR    R14\nINDCBE   OI    INSWS,INSWSO        SET OPEN ERROR SWITCH\n         BR    R14\n         DROP  R1\n         SPACE 1\n*------- INLOC - LOCATE DATA-SET ROUTINE\n*              R0  : WORK REGISTER\n*              R1  : WORK REGISTER\n*              R2  : PREFIX POINTER\n*              R3  : REST OF NAME POINTER\n*              R6  : LINK REGISTER / RETURN : +0 = OK, LOCATED\n*                                             +4 = NOT LOCATED\n*              R14 : WORK REGISTER\n*              R15 : WORK REGISTER\n*        AT RETURN +0 : \"INDSNL\" AND \"INDSN\" BUILDED\n         SPACE 1\nINLOC    LA    R15,INDSN\n         MVI   0(R15),C' '\n         MVC   1(L'INDSN-1,R15),0(R15)\n         XR    R1,R1\n         IC    R1,0(R2)\n         LTR   R0,R1\n         BNP   4(R6)\n         BCT   R1,*+L'*+6\n         MVC   0(*-*,R15),1(R2)    <<EXECUTED>>\n         EX    R1,*-6\n         ALR   R15,R0\n         IC    R1,0(R3)\n         AR    R0,R1\n         STH   R0,INDSNL\n         BCT   R1,*+L'*+6\n         MVC   0(*-*,R15),1(R3)    <<EXECUTED>>\n         EX    R1,*-6\n         MVC   CAMLST1(LCAML1),CAML1\n         LA    R1,INDSN\n         ST    R1,CAMLST1+4\n         LA    R1,LOCAREA\n         ST    R1,CAMLST1+12\n         XC    LOCAREA(256),LOCAREA\n         XC    LOCAREA+256(L'LOCAREA-256),LOCAREA+256\n        LOCATE CAMLST1\n         LTR   R15,R15\n         BZR   R6                  GO BACK\n         TM    SWSTTS,MSGLST\n         BZ    4(R6)\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(12),=CL12'NO DATA-SET '\n         LA    R14,WKLINE+22\n         XR    R1,R1\n         ICM   R1,B'0011',INDSNL\n         BCT   R1,*+L'*+6\n         MVC   0(*-*,R14),INDSN    <<EXECUTED>>\n         EX    R1,*-6\n         LA    R14,1(R14,R1)\n         MVC   0(12,R14),=CL12' / LOC.RC=  '\n         CVD   R15,WORKD\n         MVC   WORKD(4),=XL4'40212020'\n         ED    WORKD(4),WORKD+L'WORKD-2\n         MVC   10(2,R14),WORKD+2\n         LA    R0,12(R14)\n         LA    R1,WKLINE\n         SLR   R0,R1\n        @CALL  PUTLNE\n         B     4(R6)\n         SPACE 1\nPTLDSY   LA    R15,4               SET RC=4\n         B     PTLDSX\nPTLDSZ   XR    R15,R15             SET RC=0\nPTLDSX  @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        TABLES LIBRARY DATA-SET SKELETONS                          *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\nTLSOPN  OPEN   (*-*),MF=L\nTLLOPN   EQU   ((*-TLSOPN)+3)/4\nTLSCLS  CLOSE  (*-*),MF=L\nTLLCLS   EQU   ((*-TLSCLS)+3)/4\nTLSDCB  DCB    DSORG=PO,DEVD=DA,MACRF=(R),BFALN=D,                     X\n               EXLST=*-*,SYNAD=*-*,EODAD=*-*,DDNAME=........\nTLLDCB   EQU   ((*-TLSDCB)+3)/4\n         SPACE 1\n        READ   TLSDECB,SF,,,'S',MF=L\nTLLDECB  EQU   ((*-TLSDECB)+3)/4\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        DISPLAY PROGRAM'S INTERRPUTS                               *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- XPPIE - DISPLAY PIE INFORMATION\n*              R14 : LINK REGISTER\n*              R15 : ENTRY ADDRESS\n         SPACE 1\nXPPIE   @ENTER ,\n         NI    SWSTTS,255-DSPPIE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(6),=CL6'PSW = '\n         UNPK  WKLINE+16(9),PIEPSW(5)\n         NC    WKLINE+16(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+16(8),HXTB\n         UNPK  WKLINE+24(9),PIEPSW+4(5)\n         NC    WKLINE+24(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+24(8),HXTB\n         MVC   WKLINE+32(7),=CL7' ILC = '\n         UNPK  WKLINE+39(5),PIEILC(L'PIEILC+1)\n         NC    WKLINE+39(4),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+39(4),HXTB\n         MVC   WKLINE+43(7),=CL7' INC = '\n         UNPK  WKLINE+50(5),PIEINC(L'PIEINC+1)\n         NC    WKLINE+50(4),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+50(4),HXTB\n         MVC   WKLINE+54(7),=CL7' P/F = '\n         UNPK  WKLINE+61(9),PIEPGF(L'PIEPGF+1)\n         NC    WKLINE+61(8),=XL8'0F0F0F0F0F0F0F0F'\n         TR    WKLINE+61(8),HXTB\n         MVI   WKLINE+69,C' '\n         LA    R0,70\n         LA    R1,WKLINE\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(9),=CL9'R0 -R3 = '\n         LA    R3,PIEGRP\n         LA    R2,4\n         LA    R1,WKLINE+19\n         BAS   R14,XPPREGS\n         LA    R0,61\n         LA    R1,WKLINE\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(9),=CL9'R4 -R7 = '\n         LA    R2,4\n         LA    R1,WKLINE+19\n         BAS   R14,XPPREGS\n         LA    R0,61\n         LA    R1,WKLINE\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(9),=CL9'R8 -R11= '\n         LA    R2,4\n         LA    R1,WKLINE+19\n         BAS   R14,XPPREGS\n         LA    R0,61\n         LA    R1,WKLINE\n        @CALL  PUTLNE\n         MVC   WKLINE(L'MSID),MSID\n         MVC   WKLINE+10(9),=CL9'R12-R15= '\n         LA    R2,4\n         LA    R1,WKLINE+19\n         BAS   R14,XPPREGS\n         LA    R0,61\n         LA    R1,WKLINE\n        @CALL  PUTLNE\n         B     XPPIEX\n         SPACE 1\nXPPREGS  UNPK  0(9,R1),0(5,R3)     LINK = R14\n         NC    0(8,R1),=XL8'0F0F0F0F0F0F0F0F'\n         TR    0(8,R1),HXTB\n         LA    R1,8(R1)\n         LA    R3,4(R3)\n         BCT   R2,XPPREGS1\n         MVI   0(R1),C' '\n         BR    R14\nXPPREGS1 MVC   0(3,R1),=CL3' - '\n         LA    R1,3(R1)\n         B     XPPREGS\n         SPACE 1\nXPPIEX   XR    R15,R15             SET RC=0\n        @EXIT\n         SPACE 1\n        LTORG\n         SPACE 1\n*------- END OF R9 LOCAL BASE REGISTER ADDRESSABILITY --------------*\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*              D Y N A M I C     W O R K  -  A R E A S              *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- WORK-AREA DESCRIPTION\n         SPACE 1\n        PRINT  &PRS\nWKAREA   DSECT\n         DS    (MXSTN*18)F         SAVE AREAS TANK\n         SPACE 1\nWORKD    DS    5D\nSVLINK   DS    F\nOLDPICA  DS    3F\n         SPACE 1\nTANKMX   DS    PL2\nTANKNO   DS    PL2\n         SPACE 1\n         DS    0F\nEXTR     DS    (EXTRLEN)X\nATIOT    DS    A - - - - - - - - - +\nATSO     DS    A                   +\nAPSCB    DS    A                   + - EXTRACT PARM LIST\nATCB     DS    A\n         DS    0F\nESPLST   DS    (ESPLSTL)X\n         DS    0F\nESM      DS    (ESML)X\n         DS    0F\nRPM      DS    (RPML)X\nAWK      DS    A\nVCOMS   @VCOM  ,\nALIBCIT  DS    A\nALIBCITE DS    A\nATBDS    DS    A\nALPTBUA  DS    A\nALPTBGA  DS    A\nCPPLADDR DS    A\nOPLGTH   DS    F - - - - - - - - - +\nOPADDR   DS    A                   + - OPERANDS AREA\nREQSP78  DS    2F\n         SPACE 1\nGTMN     DS    0F,(GTMNLEN)X\nSTPBX    DS    0F,(STPBLEN)X       STACK PARM BLOCK\nPTPBX    DS    0F,(PTPBLEN)X       PUTLINE PARM BLOCK\nGTPBX    DS    0F,(GTPBLEN)X       GETLINE PARM BLOCK\nIOPLX    DS    0F,(IOPLLEN)X       PUTLINE/GETLINE/STACK I-O PARM LIST\nECBX     DS    F                   ECB FOR PUTLINE/GETLINE/STACK\nGTLITI   DS    2F                  GETLINE INPUT TEXT INFORMATION\nMSGWORK  DS    0CL84          PUTLINE WORK USE\nMSGCNTL  DS    F                   CONTROL WORD FOR PUTLINE\nMSGOUT   DS    CL80                PUTLINE TEXT\n         SPACE 1\n         DS    0F\nCAMLST1  DS    (LCAML1)X\n         DS    0D\nLOCAREA  DS    0XL272\n         DS    XL2            VOLUMES COUNT\nLOCAU01  DS    XL4            1ST VOLUME - DEVICE TYPE\nLOCAV01  DS    CL6                       - SERIAL NUMBER\n         DS    24XL10         FROM 2ND TO 25TH VOLUMES\n         DS    XL4,XL16\n         DS    0F\nCAMLST2  DS    (LCAML2)X\n         DS    0D\nOBTAREA  DS    XL144\n         SPACE 1\nXDAPL    DS    0F             DAIR PARM LIST (DAPL)\n         DS    (LDAPL)X\nDAPLECBS DS    F\nXDA08    DS    0F             DAIR ALLOCATE PARM LIST (DAPB08)\n         DS    (LDA08)X\nXDA0C    DS    0F             DAIR CONCATENATE PARM LIST (DAPB0C)\n         DS    (LDA0C)X\nDA0CDDN  DS    (MXTBN)CL8\nXDA10    DS    0F             DAIR DECONCATENATE PARM LIST (DAPB10)\n         DS    (LDA10)X\nXDA18    DS    0F             DAIR DE-ALLOCATE BY DSNAME BLOCK (DAPB18)\n         DS    (LDA18)X\nXDA1C    DS    0F             DAIR ALLOCATE TO TERMINAL (DAPB1C)\n         DS    (LDA1C)X\nXDFDA    DS    0F             DAIR FAILURE PARM LIST\n         DS    (DFLEN)X\nRETC     DS    F\n         SPACE 1\nWKLINE   DS    CL80\n         SPACE 1\nWLDS     DS    H - - - - - - - - - +\nWDSN     DS    CL44                + - DSNAME ARGUMENT\nWLID     DS    CL20\nWLDD     DS    H\nWDDN     DS    CL8\nWLRL     DS    H\nWBLK     DS    H\nWORG     DS    XL1\nWRFM     DS    XL1\n         SPACE 1\nNTBDS    DS    H\nCMNME    DS    CL8\nUSIDL    DS    XL1 - - - - - - - - +\nUSID     DS    CL8                 + - USER-ID\nGRNML    DS    XL1 - - - - - - - - +\nGRNM     DS    CL8                 + - GROUP\nUNMEL    DS    XL1   - - - - - - - +\nUNME     DS    CL20                + - USER NAME\nPNMEL    DS    XL1 - - - - - - - - +\nPNME     DS    CL8                 + - PROCEDURE\nTRSNL    DS    XL1 - - - - - - - - +\nTRSN     DS    CL8                 + - TERMINAL-ID\nPRFXL    DS    XL1 - - - - - - - - +\nPRFX     DS    CL8                 + - PREFIX\nAOSNME   DS    CL8\nIDVNME   DS    CL8\nDDTNME   DS    CL8\nALTNME   DS    CL8\nACSNME   DS    CL8\nOBTVOL   DS    CL6\nSWPRCS   DS    XL1\nPROFF    EQU   X'80'               OFF PROCESS\nBCKGR    EQU   X'40'               TSO BACKGROUND RUNNING\nERREXR   EQU   X'04'               ERROR(S) EXIT REQUEST\nABTEXR   EQU   X'02'               ABORT EXIT REQUEST\nTABPERR  EQU   X'01'               TSB -> ASCB BACK POINTER ERROR\nSWSTTS   DS    XL1\nMSGLST   EQU   X'80'               MESSAGES LIST\nRCLSTX   EQU   X'40'               LIST RETURN CODE BEFORE EXIT\nWIZARD   EQU   X'08'               SENIOR SYSTEM PROGRAMMER\nDSPPIE   EQU   X'04'               DISPLAY PIE\nTRDSAB   EQU   X'02'               TRACE DSABRS01/DSABOPCT\nTDSPLY   EQU   X'01'               TERMINAL IS A SCREEN\nAUFLGS   DS    XL1\nAUKWRJ   EQU   X'80'               AUTO KEYWORD REJECT\nALLORJ   EQU   X'40'               ALL OPERANDS REJECT\n         SPACE 1\nSTFLGS   DS    XL1                 DSAB-FLAGS WORK-BYTE\nTDSI     DS    XL(L'LIB#DSI)\nWDSI     DS    XL(L'LIB#DSI)\nXDSI     DS    XL(L'LIB#DSI)\n         SPACE 1\nKWLIST   DS    XL1 - - - - - - - - +\nKWAUTO   DS    XL1                 +\nKWIDV    DS    XL1                 +\nKWDDT    DS    XL1                 +\nKWALT    DS    XL1                 +\nKWACS    DS    XL1                 +\nKWCMD    DS    XL1                 +\nAUKCHK   EQU   *-KWAUTO            + - AUTO OPERANDS CHECK\nKWTYPE   DS    XL1                 +\nKWDSAB   DS    XL1                 +\nSTCMDL   DS    XL1                 +\nSTCMDT   DS    XL255               + - COMMAND OPERANDS / KEYWORDS\n         SPACE 1\nMXLCIT   DS    F - - - - - - - - - +\nMXALUS   DS    F                   +\nMXALGR   DS    F                   +\nYYPU     DS    XL1,CL8             +\nYYPV     DS    CL6                 +\nYYPA     DS    XL2                 +\nYYPP     DS    XL3                 +\nYYPS     DS    XL3                 +\nYYPD     DS    XL3                 +\nYYPB     DS    XL2                 +\nYYWU     DS    XL1,CL8             +\nYYWA     DS    XL2                 +\nYYWP     DS    XL3                 +\nYYWS     DS    XL3                 +\nYYWD     DS    XL3                 +\nYYWR     DS    XL1,CL44            +\nYYCU     DS    XL1,CL8             +\nYYCA     DS    XL2                 +\nYYCP     DS    XL3                 +\nYYCS     DS    XL3                 +\nYYCB     DS    XL2                 +\nYYEU     DS    XL1,CL8             +\nYYEA     DS    XL3                 +\nYYEP     DS    XL3                 +\nYYES     DS    XL3                 +\nDMSVN    DS    CL6                 + - INTERNAL DEFINITIONS VALUES\n         SPACE 1\nINLRL    DS    F                   MAX. LOGICAL RECORD LENGTH\nINBLK    DS    F                   BLOCK SIZE LENGTH\nINSBP    DS    A                   ADDRESS OF AREA TO HOLD ONE BLOCK\nINEBP    DS    F                   END OF BLOCK POSITION\nINCBP    DS    F                   CURRENT BLOCK POSITION\nINOPR    DS    XL1                 OPERATION REQUEST\nINOPRI   EQU   0                        INITIAL\nINOPRP   EQU   1                        POSITION TO MEMBER\nINOPRR   EQU   2                        READ MEMBER\nINOPRE   EQU   255                      FINAL\nINSWS    DS    XL1                 FLAGS BYTE\nINSWTL   EQU   X'80'                    TABLES LIBRARY PRE-ALLOCATED\nINSWSF   EQU   X'40'                    FLUSH ALL REQUESTS\nINSWSA   EQU   X'10'                    FILE ALLOCATED\nINSWSO   EQU   X'08'                    OPEN ERROR\nINSWSR   EQU   X'04'                    READ ERROR\nINSWSM   EQU   X'02'                    MEMBER NOT FOUND\n         SPACE 1\nINDSNL   DS    H\nINDSN    DS    XL44\n         SPACE 1\nINBLDL   DS    F\nINBNME   DS    CL8\nINBTTR   DS    XL6,XL40\nINRZB    EQU   *-INBLDL\n         SPACE 1\nINRXL    DS    F\nINOPN    DS    (TLLOPN)F\nINCLS    DS    (TLLCLS)F\nINDCB    DS    (TLLDCB)F\nINDECB   DS    (TLLDECB)F\n         SPACE 1\nPIEAR    DS    0XL80               (SEE EPIE DSECT / IHAEPIE)\nPIEGRP   DS    16XL4\nPIEPSW   DS    XL8\nPIEILC   DS    XL2\nPIEINC   DS    XL2\nPIEPGF   DS    XL4\n         SPACE 1\n        @S99L  ,                   SVC 99 RB\n         SPACE 1\n*-+-+-+- END OF WORK-AREA DIRECT ADDRESSABILITY  -+-+-+-+-+-+-+-+-+-*\n         SPACE 1\nRBTP     DS    (MXRBTP)F           POINTERS TO SVC99 TEXT UNITS\nDRBTP    EQU   RBTP-WKAREA\nLRBTP    EQU   *-RBTP\n         SPACE 1\nRBTU     DS    (MXRBTU)X           SVC99 TEXT UNITS\nDRBTU    EQU   RBTU-WKAREA\nLRBTU    EQU   (((*-RBTU)+7)/8)*8\n         SPACE 1\nTBDS     DS    0F\n         DS    (MXTBN)CL(TBDSLEN)\nDTBDS    EQU   TBDS-WKAREA\n         SPACE 1\nWKLEN    EQU   (((*-WKAREA)+7)/8)*8\n         EJECT\n*------- AUTOMATIC OPERANDS SELECTION WORK-AREA DESCRIPTION\n         SPACE 1\nAUWKA    DSECT\nAUPOP    DS    2F\nAUQTC    DS    2F\nAUCDS    DS    F                   CARDS COUNT\nAUNME    DS    CL8                 CHECK NAME\nAUNMEL   DS    XL1                 CHECK NAME LENGTH\nAUSCW    DS    XL1                 1ST SCAN WHERE TO GO BACK\nAUSCV    DS    XL1                 2ND SCAN WHERE TO GO BACK\nAUSWS    DS    XL1                 FLAGS BYTE\nAUSWSN   EQU   X'80'                    NOT START OF CARD\nAUKSW    DS    XL1                 FLAGS BYTE\nAUKWU    EQU   X'80'                    KEYWORD U=... DONE\nAUKWG    EQU   X'40'                       \"    G=... DONE\nAUKWP    EQU   X'20'                       \"    P=... DONE\nAUKWT    EQU   X'10'                       \"    T=... DONE\nAUKWRZ   EQU   AUKWU+AUKWG+AUKWP+AUKWT\n         SPACE 1\nAUSOP    DS    CL(L'STCMDT)\nAUCMD    DS    CL(L'STCMDT)\n         SPACE 1\nAUWKL    EQU   (((*-AUWKA)+7)/8)*8\n         EJECT\n*------- INITIALIZATION WORK-AREA DESCRIPTION\n         SPACE 1\nINWKA    DSECT\nPTRTB    DS    2A\nUTBPT    DS    2A\nGTBPT    DS    2A\nBLDSW    DS    XL1                 FLAGS BYTE\nBLDSWI   EQU   X'80'                    INITIALIZATION DONE\nBLDSWA   EQU   X'40'                    ENTRY ACTIVE\nBLDSWS   EQU   X'20'                    LIST MUST TERMINATE\nBLDSWU   EQU   X'40'                    USER ENTRY ACTIVE\nBLDSWG   EQU   X'20'                    GROUP ENTRY ACTIVE\nIDVOPK   DS    0XL4                OPERAND KEYWORD (ADDRESS)\nDDTOPK   DS    XL4\nALTOPK   DS    XL1                 OPERAND KEYWORD (INDEX)\nTOPUS    EQU   0                   USER=\nTOPGR    EQU   1                   GROUP=\nTOPDN    EQU   2                        DDN=\nTOPUN    EQU   3                        UNLESS=\nIDVOPL   DS    0XL1                OPERAND LENGTH\nDDTOPL   DS    0XL1\nALTOPS   DS    XL1                 ACTIVE OPERAND KEYWORD (INDEX)\nIDVOPT   DS    0XL44               OPERAND TEXT\nDDTOPT   DS    0XL44\nALTOPT   DS    XL44\n         SPACE 1\nINWKL    EQU   (((*-INWKA)+7)/8)*8\n         EJECT\n*------- AUTOMATIC COMMANDS SELECTION WORK-AREA DESCRIPTION\n         SPACE 1\nCMWKA    DSECT\nPAQTC    DS    2F\nPACDS    DS    F                   CARDS COUNT\nPANME    DS    CL8                 CHECK NAME\nPANMEL   DS    XL1                 CHECK NAME LENGTH\nPASCW    DS    XL1                 1ST SCAN WHERE TO GO BACK\nPASCV    DS    XL1                 2ND SCAN WHERE TO GO BACK\nPASWS    DS    XL1                 FLAGS BYTE\nPASWSI   EQU   X'80'                    USE INTERNAL TABLE\nPASWSN   EQU   X'40'                    NOT START OF CARD\nPAKSW    DS    XL1                 FLAGS BYTE\nPAKWU    EQU   X'80'                    KEYWORD U=... DONE\nPAKWG    EQU   X'40'                       \"    G=... DONE\nPAKWP    EQU   X'20'                       \"    P=... DONE\nPAKWT    EQU   X'10'                       \"    T=... DONE\nPAKWS    EQU   X'08'                       \"    S=... DONE\nPAKWRZ   EQU   PAKWU+PAKWG+PAKWP+PAKWT+PAKWS\n         SPACE 1\nPACMD    DS    CL(L'STCMDT)\n         SPACE 1\nCMWKL    EQU   (((*-CMWKA)+7)/8)*8\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*       D A T A     S E C T I O N S     D E S C R I P T I O N       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        PRINT  GEN\n        @DD    ,\n        @AL    ,\n         EJECT\n*------- WORK-AREAS COMMUNICATIONS\n         SPACE 1\n        @WAC   ,\n         SPACE 1\n*------- DATA-SETS TABLE DSECT\n         SPACE 1\nTBDSECT  DSECT\nTBDDN    DS    CL8                 DD-NAME\nTBIND    DS    0XL2                INDICATORS\nTBIND1   DS    XL1                 INDICATORS BYTE 1\nTBALLDS  EQU   X'80'               DATA-SET IS ALLOCATED\nTBIND2   DS    XL1                 INDICATORS BYTE 2\nTBSTBLK  EQU   X'80'               SET BLKSIZE (FOR BUFFER)\nTBLDS    DS    H - - - - - - - - - + LENGTH OF DS-NAME\nTBDSN    DS    CL44                + - - - - - DS-NAME\nTBDSLEN  EQU   (((*-TBDSECT)+1)/2)*2 LENGTH OF A TABLE ELEMENT\n         EJECT\n*------- SYSTEM DSECT'S\n         SPACE 1\n        PRINT  NOGEN\n        CVT    DSECT=YES,LIST=YES\n        IKJCPPL\n        IKJPSCB\n        IKJEBECA\n        IKJUPT\n        IKJIOPL\nIOPLLEN  EQU   *-IOPL\n        IKJPTPB\nPTPBLEN  EQU   *-PTPB\n        IKJGTPB\nGTPBLEN  EQU   *-GTPB\n        IKJSTPB\nSTPBLEN  EQU   *-STPB\n        IKJLSD\nLSDLEN   EQU   *-LSD\n        IHAPSA\n        IHAPCCA DSECT=YES\n        IHAASCB\n        IHAASXB\n        IHAACEE\nTIODSECT DSECT\n        IEFTIOT1\n        IEFZB502 , - - - - - - - -+\n        IEFJFCBN ,                +- SWA CONTROL BLOCK\nDSCDSECT DSECT\n        IECSDSL1 (1)\n        IKJTSB LIST=YES,EXT=YES\n        IKJTCB\n        IEZJSCB\n        IHAQDB\nDSAB    IHADSAB\n*   ---> DSABRS01 (RESERVED BYTE) <---   ---   ---   ---   ---   ---\nOWNDYLO  EQU   X'10'               MY ALLOCATION INDICATOR\nTSODYLO  EQU   X'02'               TSO BASIC USE INDICATOR\nSYSDYLO  EQU   X'01'               SYSTEM ALLOCATION INDICATOR\n        IKJDAPL\nLDAPL    EQU   *-DAPL\n        IKJDAP08\nLDA08    EQU   *-DAPB08\n        IKJDAP0C\nLDA0C    EQU   *-DAPB0C\n        IKJDAP10\nLDA10    EQU   *-DAPB10\n        IKJDAP18\nLDA18    EQU   *-DAPB18\n        IKJDAP1C\nLDA1C    EQU   *-DAPB1C\n        IKJEFFDF DFDSECT=YES\n        IEFZB4D0\n        IEFZB4D2\n        DCBD   DSORG=PO,DEVD=DA\n        IHADECB\n        IEZIOB\n        IHAEPIE\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                O P E R A N D S     K E Y W O R D S                *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        @LSTO  ,\n         SPACE 1\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLO$": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x129\\x00>\\x00>\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T12:39:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "SYSPAJA"}, "text": "//DYLON    JOB (........),'INSTALL DYLON/DYLOFF',\n//             MSGLEVEL=(1,1),MSGCLASS=X,REGION=1M,TIME=1\n/*JOBPARM L=20\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*       D Y L O N - D Y L O F F     T S O     C O M M A N D         *\n//* PRE-REQUISITES (SYS1.PARMLIB MEMBERS) :                           *\n//*   1. IKJTSO00 : \"DYLON\" AND \"DYLOFF\" COMMAND NAMES AUTHORIZATION  *\n//*                 NEEDED.                                           *\n//*   2. IEAAPF00 : LINK \"DYLON\" AND \"DYLOFF\" COMMANDS IN AN          *\n//*                 APF-LIBRARY.                                      *\n//*   3. LNKLST00 : SET LINK-LIBRARY IN LNKLST LOOKASIDE (LLA).       *\n//*   4. ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN       *\n//*      ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES).          *\n//*      NOTE - IN THE STEPS BELOW THE FOLLOWING UNIT NAMES ARE       *\n//*             ASSUMED : \"SYSDA\" FOR DISK UNIT                       *\n//*                       \"VIO\" FOR VIRTUAL UNIT                      *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* AT ASSEMBLY STEP \"ASM\" BELOW, YOU MAY USE THE SYSPARM TO SELECT   *\n//* TWO OPTIONS AS SHOWN :  SYSPARM(LP)                               *\n//*      WHERE L MAY BE : F = PRINT ALL MACROS GENERATION             *\n//*                       S = PRINT ONLY DEFINITIONS AND TABLES       *\n//*                           MACROS GENERATION                       *\n//*                       N = SUPPRESS ALL MACROS GENERATION          *\n//*      AND P MAY BE :   Y = TO INSERT GLOBAL CARDS IN THE OBJECT    *\n//*                           (EASIER TO UPDATE \"DYLOCOM\" SOURCE)     *\n//*                       N = SUPPRESS GLOBAL CARDS                   *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASM     EXEC PGM=IEV90,\n//             PARM='SYSPARM(NN),XREF(SHORT),NODECK,OBJECT,RENT'\n//SYSLIB    DD DSN=->.SOURCE.FILE5,DISP=SHR\n//          DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(DYLO),DISP=SHR\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* AT ASSEMBLY STEP \"ASS\" BELOW, YOU MAY USE THE SYSPARM TO SELECT   *\n//* A PRINT OPTION AS FOLLOWS :                                       *\n//*      FULL  = PRINT ALL MACROS GENERATION                          *\n//*      SHORT = PRINT ONLY DEFINITIONS AND TABLES MACROS GENERATION  *\n//*      NONE  = SUPPRESS ALL MACROS GENERATION                       *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASS     EXEC PGM=IEV90,\n//             PARM='SYSPARM(NONE),XREF(SHORT),NODECK,OBJECT,RENT'\n//SYSLIB    DD DSN=->.SOURCE.FILE5,DISP=SHR\n//          DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD DSN=&LOADSET,DISP=MOD\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(DYLOCOM),DISP=SHR\n//LNK     EXEC PAJILKC,OPT=',MAP,RENT,AMODE=24,RMODE=24,AC=1'\n//SYSIN     DD *\n  ENTRY   DYLON\n  ALIAS   DYLOFF\n  NAME    DYLON(R)\n/*\n//HLP     EXEC PAJHELP,MBR=DYLOH,DSS='->.SOURCE.FILE5'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLO$DOC": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x129\\x00\\x19\\x00\\x19\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T12:39:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "SYSPAJA"}, "text": "//DYLODOC  JOB (........),'DYLON/DYLOFF DOC.',\n//             MSGLEVEL=(1,1),MSGCLASS=X,REGION=1M,TIME=1\n/*JOBPARM L=4\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*      LIST DYLON-DYLOFF TSO COMMAND INSTALL MEMBER                 *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//LISTI   EXEC PGM=IEBGENER\n//SYSUT1    DD DSN=->.SOURCE.FILE5(DYLO#),DISP=SHR\n//SYSUT2    DD SYSOUT=*,DCB=(RECFM=FA,BLKSIZE=80,LRECL=80)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n  GENERATE  MAXFLDS=99\n  RECORD    FIELD=(1,1,,1),FIELD=(71,2,,10)\n/*\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*      LIST DYLON-DYLOFF TSO COMMAND DOCUMENT MEMBER                *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//LISTD   EXEC PGM=IEBGENER\n//SYSUT1    DD DSN=->.SOURCE.FILE5(DYLO@),DISP=SHR\n//SYSUT2    DD SYSOUT=*,DCB=(RECFM=FA,BLKSIZE=80,LRECL=80)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n  GENERATE  MAXFLDS=99\n  RECORD    FIELD=(1,1,,1),FIELD=(71,2,,10)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYLO$XEQ": {"ttr": 3597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x129\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T12:39:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "SYSPAJA"}, "text": "//DYLOX    JOB (........),'T S O BACKGROUND RUN',\n//             MSGLEVEL=(1,1),MSGCLASS=X,REGION=2M,TIME=1\n/*JOBPARM L=5\n//IKJ     EXEC PGM=IKJEFT01,DYNAMNBR=100\n//SYSTSPRT  DD SYSOUT=*\n//SYSUDUMP  DD SYSOUT=*\n//SYSTSIN   DD *\nDYLON LIST AUTO\nDYLOFF LIST AUTO\nEND\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYLO#": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x0f\\x00\\x944\\x0f\\x116\\x00\\xbc\\x00\\xbc\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-06T00:00:00", "modifydate": "1994-12-06T11:36:00", "lines": 188, "newlines": 188, "modlines": 0, "user": "SYSPAJA"}, "text": "1   05/12/94\n                                 DYLON / DYLOFF INSTALLATION    1/4\n\n  *-----------------------------------------------------------------*\n  *             DYLON / DYLOFF installation preliminary             *\n  *-----------------------------------------------------------------*\n\n    Author : MOINIL P.A.                    (Tel. 0-332-789442)\n    -------- Computing Centre (TP 361)\n             J.R.C. - Ispra Establishment\n             21020 ISPRA (VA), ITALY\n\n    Attributes : the DYLON/DYLOFF TSO command (Assembler H source,\n    ------------ MVS/XA 2.2.3) is a re-enterable module and may run\n                 TSO foreground/background.\n\n    Members index summary :\n    =======================\n         Name      Contents\n         --------  -------------------------------------------\n         ACS       Sample \"ACS\" table member\n         ALT       Sample \"ALT\" table member\n         AOS       Sample \"AOS\" table member\n         DDT       Sample \"DDT\" table member\n         DYLO      DYLON/DYLOFF Source Symbolic (Assembler H)\n         DYLO$     JCL to install DYLON/DYLOFF TSO command\n         DYLO$DOC  JCL to list members DYLO# and DYLO@\n         DYLO$XEQ  Sample JCL TSO background run\n         DYLO#     DYLON/DYLOFF installation preliminary\n         DYLO@     DYLON/DYLOFF user documentation\n         DYLOCMD   Internal Commands table (Assembler)\n         DYLOCOM   DYLON/DYLOFF Source Symbolic (Assembler H)\n         DYLODDT   Internal DD's table (Assembler)\n         DYLOGAL   Internal Groups Aliases table (Assembler)\n         DYLOH     DYLON/DYLOFF TSO help\n         DYLOM     Assembler macros used by DYLO source\n         DYLOMAC   Assembler macros used by DYLOCOM source\n         DYLOSCO   Operands scan (Assembler)\n         DYLOUAL   Internal Users Aliases table (Assembler)\n         DYLOUSD   User's selections - defaults (Assembler)\n         IDV       Sample \"IDV\" table member\n1   05/12/94\n                                 DYLON / DYLOFF INSTALLATION    2/4\n\n         Before you install definitively DYLON/DYLOFF TSO command, it\n    is necessary to tailor \"DYLO\" modules at your installation needs.\n    To do it, I suggest you to follows the listed steps below :\n\n    1. Execute only the steps ASM and ASS of job in member DYLO$ to\n       obtain the DYLO assembly listings.\n\n    2. Check the comments at the beginning of DYLO assembly listing\n       (normally nothing has to be changed).\n       Then reading the comments from the beginning of DYLOCOM assembly\n       listing, you must adjust the following parameters values :\n       a) the debug user(s), who as first is you, as indicated under\n          special operands explanations (macro @WIZ adjustments).\n       b) the tables library data-set name (macro @TLDSN). This is\n          the general use data-set in the system (to contain members\n          \"ACS\", \"ALT\", \"AOS\", \"DDT\" and \"IDV\").\n       c) the default internal definitions table. Many values are\n          probably acceptable, certainly not &DMSVOL and &PV, and\n          verify all others, in particular &WU.\n       d) the data-sets definitions (macro @DEFI, see also further\n          at DYLON/DYLOFF Special Topics). Here you have to define\n          the Products you want use and thus for which some allocations\n          are to be done. Definitions changes involve other parts of\n          the command (as indicated in \"Remarks\") which are coded in\n          the following two members :\n          1) DYLOSCO : operands scan. this is the logic to recognize\n             and process the operands keywords.\n             The SYS (special data-set's status) indicator defines a\n             system data-set which is normally not de-allocated at\n             DYLOFF time (i.e., at our installation, the data-set\n             SYS1.UADS to DD-name SYSUADS, because it is considered\n             always needed to users who have OPER and/or ACCOUNT TSO\n             command allowed).\n          2) DYLOUSD : the User's selection(s) and/or default(s). This\n             logic is described in user documentation (member DYLO@),\n             unless for the first instruction, which sets the SYS\n             indicator and so forces the DYLON command to mark the\n             corresponding data-sets allocations as not de-allocatable\n             at DYLOFF time (see SYS/NOSYS command operand).\n          Note : macros @IF, @CHKO, @SETKW and @SETI have been created\n                 to help you in coding your needs.\n1   05/12/94\n                                 DYLON / DYLOFF INSTALLATION    3/4\n\n    3. Also reading the comments in DYLOCOM assembly listing for macros\n       to be used, you have to define the following three internal\n       tables :\n       a) the DDname's libraries concatenations info's table in member\n          DYLODDT (use macros @DD, @DS and @DSE). This table is your\n          standard and most used table which intents to solve the\n          allocations for a great number of users in your system.\n          But, if you decide to not use it, you may define an empty\n          table by setting an asterisk (*) in the column 1 of the\n          statement COPY DYLODDT in the DYLOCOM source symbolic.\n          In this case, you must always select a \"DDT\" member because\n          no allocations will take place with a similar table.\n       b) the Alias(es) process table in members DYLOUAL and DYLOGAL\n          (use macro @AL). This table may be your default table which\n          defines the most often aliases for users in your system.\n          Also here you may define an empty table by setting asterisks\n          (*) in the column 1 of the statements COPY DYLOUAL and COPY\n          DYLOGAL in DYLOCOM source symbolic. In this case, who wants\n          aliases must select an \"ALT\" member.\n       c) the Automatic Commands selection process table in member\n          DYLOCMD (use macro @AC). This table may be your default table\n          with the most frequently commands requested by users in your\n          system. In the same way, you may define an empty table by\n          setting an asterisk (*) in the column 1 of the statement\n          COPY DYLOCMD in DYLOCOM source symbolic. In this case, who\n          wants commands must select an \"ACS\" member.\n\n    4. At this point, last work to do, you must update the members\n       DYLO@ (users documentation) and DYLOH (TSO help) to reflect\n       your installation changes.\n\n    5. Now, you may install definitively DYLON/DYLOFF TSO command\n       (execute job in member DYLO$). Remember the following needed\n       pre-requisites (SYS1.PARMLIB members) :\n        1. IKJTSO00 : DYLON and DYLOFF commands authorization needed.\n        2. IEAAPF00 : link DYLON and DYLOFF commands in an APF library.\n        3. LNKLST00 : set the link-library in LNKLST lookaside (LLA).\n       Then you have just to enter at system console the operator\n       command F LLA,REFRESH to have DYLON/DYLOFF ready to run.\n\n  *-----------------------------------------------------------------*\n  *          | | | A T T E N T I O N     P L E A S E | | |          *\n  *-----------------------------------------------------------------*\n\n    If you modify anything outside what indicated in DYLOCOM above,\n    verify the DYLO coding use of DYLOCOM, unless you get a good\n    chance that DYLON/DYLOFF command goes in ABEND.\n    Note : RACF (User-id/Group) is needed, but if inactive or not in\n           your System, then only the TSO User-id is guaranted and\n           no Group probably will be handled (I didn't test it).\n1   05/12/94\n                                 DYLON / DYLOFF INSTALLATION    4/4\n\n *-----------------------------------------------------------------*\n *        DYLON - DYLOFF     S P E C I A L     T O P I C S         *\n *-----------------------------------------------------------------*\n\n    If in a \"DDT\" member you code a DD-name information as i.e.\n    below :\n\n      =>DD=MYLIB      ID=\"MY LIBRARY\"                            <=\n      =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n      =>              DS=<U>.MYLIB.DATA  OPT=M                   <=\n\n    Then :\n      1. at DYLON command, this allocation is considered a TSO basic\n         use allocation (no TYPE=... declared for any data-set in the\n         DD list), and so,\n      2. at DYLOFF command, the corresponding de-allocation is skipped,\n         which means the DD-MYLIB remains allocated to the session.\n\n    If you want force the de-allocation, you may :\n       1. enter commands  DYLOFF\n                          FREE F(MYLIB)\n              or command  DYLOFF C=' FREE F(MYLIB) '\n       2. or use the automatic facilities of DYLOFF command to schedule\n          the FREE command, as i.e. in an \"AOS\" member you may code\n                          IF-OFF  C= ' FREE F(MYLIB) '\n\n    Or, another way to force the de-allocation is by defining i.e. a\n    TYPE=PRIV at the installation time, as below :\n\n       1. add PRIV in special data-set's status (indicators- byte 2)\n          of macro @DEFI, and\n       2. add @SETI TDSI,PRIV instruction at the beginning of member\n          DYLOUSD (User's selections-defaults).\n\n    Then, it's enough to code :\n\n      =>DD=MYLIB      ID=\"MY LIBRARY\"                            <=\n      =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n      =>              DS=<U>.MYLIB.DATA  OPT=M  TYPE=PRIV        <=\n\n  *-----------------------------------------------------------------*\n  *                | | | R E S T R I C T I O N | | |                *\n  *-----------------------------------------------------------------*\n\n    The DYLON command can't be used to allocate any JOBLIB/STEPLIB\n    or JOBCAT/STEPCAT libraries (if you want to do it, the only way\n    is through a LOGON procedure).\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLO@": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x12\\x00\\x03\\xd7\\x03\\xd7\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T12:00:00", "lines": 983, "newlines": 983, "modlines": 0, "user": "SYSPAJA"}, "text": "1   03/09/92\n                                             DYLON / DYLOFF     1/22\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *     DYLON / DYLOFF TSO command.     * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n   Purpose :   Session libraries dynamic allocation.\n   ---------   Allocate (DYLON) or de-allocate (DYLOFF) all the needed\n               libraries to run successfully a specific user session.\n\n    This command intents to :\n      1. bypass TSO LOGOFF/LOGON \"another procedure\", needed when a\n         change environment/application is necessary, and thus,\n      2. highly limits the number of standard or private TSO LOGON\n         procedures (so less ACCOUNT commands to do),\n      3. restore automatically those data-sets which have been archived\n         by \"DMS\" (equivalent of IBM \"HSM\"),\n      4. easier diagnose of any malfunction when allocating the\n         environment/application libraries data-sets.\n\n    I.e., at our installation, we use the following two couple of\n    standard TSO LOGON procedures with this command :\n      1. LOGON manual mode :\n         A. Under TSO only :\n            //JRCTSO  EXEC PGM=IKJEFT01,DYNAMNBR=100,\n            //             TIME=0015,PARM='TIME'\n            //ROTATE OUTPUT PAGEDEF=R90L08\n            //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n         B. Under Session Manager :\n            //JRCSM   EXEC PGM=ADFMDF03,DYNAMNBR=100,\n            //             TIME=0015,PARM='SM(,Y)'\n            //ROTATE OUTPUT PAGEDEF=R90L08\n            //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n      2. LOGON automatic mode :\n         A. Under TSO only :\n            //JRCTSOX EXEC PGM=IKJEFT01,DYNAMNBR=100,\n            //             TIME=0015,PARM='DYLON AUTO'\n            //ROTATE OUTPUT PAGEDEF=R90L08\n            //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n         B. Under Session Manager :\n            //JRCSMX  EXEC PGM=ADFMDF03,DYNAMNBR=100,\n            //             TIME=0015,PARM='SM(,Y),DYLON AUTO'\n            //ROTATE OUTPUT PAGEDEF=R90L08\n            //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n\n    So, after a LOGON manual mode (JRCTSO or JRCSM procedure), the\n    user may select various session environments/applications using\n    \"DYLON\" and \"DYLOFF\" commands sequence. However, after an initial\n    LOGON automatic mode (JRCTSOX or JRCSMX procedure), the user enter\n    directly in a session environment/application without any action.\n    Then, if wanted, he may change environments/applications using the\n    \"DYLOFF\" and \"DYLON\" commands sequence again.\n1   03/09/92\n                                             DYLON / DYLOFF     2/22\n\n *------------------------------------------------------------------*\n *                  C O M M A N D     S Y N T A X                   *\n *------------------------------------------------------------------*\n\n  DYLON  : Allocate session libraries.\n  --------\n           Operands (optional) --- or -> Operands (optional)\n           --------------------------    --------------------------\n           NOLIST/LIST/?                 NOLIST/LIST/?\n           AUTO                          NOISPF/ISPF\n                                         NOINFOSYS/INFOSYS\n                                         NOSMP/SMP\n                                         NOADABAS/ADABAS\n                                         NOMFTS/MFTS\n                                         IDV\n                                         DDT\n                                         ALT\n                                         ACS\n                                         COMMAND=...\n\n  DYLOFF : De-allocate session libraries (unless those considered as\n  -------- TSO basic use).\n           Operands (optional) --- or -> Operands (optional)\n           --------------------------    --------------------------\n           NOLIST/LIST/?                 NOLIST/LIST/?\n           AUTO                          NOSYS/SYS\n                                         ACS\n                                         COMMAND=...\n\n  Operands required : none (all optional, if given, they can be in\n  ------------------- any order)\n\n  Return codes :  0 - successfull completion\n  --------------  8 - completion with erorr(s)\n1   03/09/92\n                                             DYLON / DYLOFF     3/22\n\n *------------------------------------------------------------------*\n *                C O M M A N D     O P E R A N D S                 *\n *------------------------------------------------------------------*\n\n    1. NOLIST = only severe error messages (default)\n         LIST = all messages\n            ? = all messages + some informational messages\n\n    2. AUTO = all the remaining operands (unless NOLIST, LIST or ?)\n              are supplied in a member of the TABLES library data-set\n              (default is \"AOS\" member).\n              Note : to know more (explanation/use) about \"AOS\" see\n                     further at \"TABLES LIBRARY DATA-SET\".\n\n    3. Products libraries allocation selection (these keywords are\n              used with DYLON command only) :\n                   ISPF = do ISPF allocations.\n                   NOISPF = don't need ISPF allocations.\n                   INFOSYS = do INFOSYS allocations (require ISPF).\n                   NOINFOSYS =  don't need INFOSYS allocations.\n                   SMP = do SMP allocations (require ISPF).\n                   NOSMP = don't need SMP allocations.\n                   ADABAS = do ADABAS allocations.\n                   NOADABAS = don't need ADABAS allocations.\n                   MFTS = do MFTS allocations.\n                   NOMFTS = don't need MFTS allocations.\n              If none is specified, then the defaults are those\n              pre-defined at installation time.\n              I.e., defaults for Systems and Operators are :\n                   NOLIST ISPF INFOSYS SMP NOADABAS MFTS\n              This is the selection when typing DYLON only.\n              If any one option is specified, automatically all the\n              others are assumed the \"NO...\" option, so take care to\n              specify all those wanted.\n              I.e. : DYLON ADA ISPF\n                     means ADABAS ISPF NOINFOSYS NOSMP NOMFTS\n              Note : to know more about defaults see further at\n              ====== \"USER'S SELECTIONS-DEFAULTS\".\n\n    4. NOSYS = don't de-allocate the system data-sets libraries (this\n              is the default option).\n                   SYS = de-allocate also these libraries.\n              (this keyword is used with DYLOFF command only).\n1   03/09/92\n                                             DYLON / DYLOFF     4/22\n\n    5. IDV (Internal Definitions Values), DDT (DD-names), ALT (Aliases)\n              and ACS (Automatic Commands Selection) to eventually\n              specify names (1-8 characters) which allow members\n              selection in the TABLES library data-set (unless ACS,\n              these keywords are used with DYLON command only).\n              Note : to know more (explanation/use) about \"IDV\",\n                     \"DDT\", \"ALT\" and \"ACS\" look further at\n                     \"TABLES LIBRARY DATA-SET\".\n\n    6. COMMAND=... any command(s) to be executed when the DYLON or\n              DYLOFF process is successfully complete.\n              The syntax of this operand may be as below :\n                   COMMAND=LISTA\n                   COMMAND=' LISTA STATUS '\n                   COMMAND=' FREE ALL ; LISTA STATUS '\n              The string must be quoted if it includes one or more\n              blanks and/or quotes (a quote in the string must be\n              doubled), and multiple commands must be separated each\n              from the other by the semi-colon delimiter.\n              Or : COMMAND=* (Automatic Commands Selection)\n                   COMMAND=? (Terminal prompting for Commands)\n\n    Operands   Aliases\n    ---------  -----------------------------------------------------\n    NOLIST     NOMSG, NOLST\n    LIST       MSG, LST\n    AUTO       AOS, AO, A\n    NOISPF     NOSPF\n    ISPF       SPF\n    NOINFOSYS  NOIFS, NOIS\n    INFOSYS    IFS, IS\n    NOADABAS   NOADA\n    ADABAS     ADA\n    NOMFTS     NOMFT, NOMF\n    MFTS       MFT, MF\n    NOSYS      NS\n    SYS        S\n    IDV        I\n    DDT        DD\n    ALT        AL\n    ACS        AC\n    COMMAND=   CMD=, C=, COMMANDS=, CMDS=\n1   03/09/92\n                                             DYLON / DYLOFF     5/22\n\n *-----------------------------------------------------------------*\n *           T S O - B A T C H     E N V I R O N M E N T           *\n *-----------------------------------------------------------------*\n\n   Batch execution : it's not the normal way of use, but ... this\n   ----------------- command may also run in TSO-BATCH environment\n         with the following assumptions :\n\n         1. BACKGROUND run as a \"LINE\" terminal (i.e. IBM 2741), and\n         2. operand COMMAND=? (terminal prompting) is bypassed.\n\n         The job to submit may be i.e. as shown below :\n\n         //.....    JOB ...(your JOB card)...\n         //             MSGLEVEL=(1,1),MSGCLASS=X,\n         //             REGION=1M,TIME=(,20),NOTIFY=...,USER=...\n         /*JOBPARM L=5\n         //IKJ     EXEC PGM=IKJEFT01,DYNAMNBR=100\n         //SYSTSPRT  DD SYSOUT=*\n         //SYSUDUMP  DD SYSOUT=*\n         //SYSTSIN   DD *\n           DYLON LIST\n           ...\n           DYLOFF LIST\n           END\n         /*\n\n *-----------------------------------------------------------------*\n *        T A B L E S     L I B R A R Y     D A T A - S E T        *\n *-----------------------------------------------------------------*\n\n         The data-set EUR1.DYLO.DATA is the default one allocated and\n    accessed using the DD-name DYLO$IT. It will contain all the \"AOS\",\n    \"IDV\", \"DDT\", \"ALT\" and \"ACS\" members which are of general use for\n    DYLON and DYLOFF commands (it is the system data-set).\n\n         However, you may choose to use another data-set (i.e., for\n    private, test or alternate purposes) in two ways :\n\n         1. creating a data-set with a name equal to the default one,\n            but with the initial prefix replaced by your User-id or\n            your group (obviously this last will be accessed by all\n            the users in the group), or\n\n         2. pre-allocating it with the DD-name DYLO$IT.\n\n    = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n    NOTE : ALL the needed members are retrieved ONLY in that library.\n    = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n1   03/09/92\n                                             DYLON / DYLOFF     6/22\n\n *-----------------------------------------------------------------*\n *             M E M B E R ( S )     S E L E C T I O N             *\n *-----------------------------------------------------------------*\n\n    1. \"AOS\" member selection :\n         Specify AUTO=... to select the member named \"...\",\n              AUTO to select the default member named AOS (this is\n                   like AUTO=AOS),\n              AUTO= is like NOT SPECIFIED, and\n              NOT SPECIFIED means no operands supply process.\n\n    2. \"IDV\" member selection :\n         Specify IDV=... to select the member named \"...\",\n              IDV to select the default member named IDV (this is like\n                   IDV=IDV),\n              IDV= is like NOT SPECIFIED, and\n              NOT SPECIFIED means use of the internal pre-defined IDV\n                   values set at assembly time.\n\n    3. \"DDT\" member selection :\n         Specify DDT=... to select the member named \"...\",\n              DDT to select the default member named DDT (this is like\n                   DDT=DDT),\n              DDT= is like NOT SPECIFIED, and\n              NOT SPECIFIED means use of the internal pre-defined DDT\n                   table created at assembly time.\n\n    4. \"ALT\" member selection :\n         Specify ALT=... to select the member named \"...\",\n              ALT to select the default member named ALT (this is like\n                   ALT=ALT),\n              ALT= will bypass selection (no member nor internal\n                   pre-defined table use), and\n              NOT SPECIFIED means use of the internal pre-defined ALT\n                   table created at assembly time.\n\n    5. \"ACS\" member selection (active only with COMMAND=*) :\n         Specify ACS=... to select the member named \"...\",\n              ACS to select the default member named ACS (this is like\n                   ACS=ACS),\n              ACS= will bypass any automatic commands selection even\n                   if COMMAND=* is specified, and\n              NOT SPECIFIED means use of the internal pre-defined ACS\n                   table created at assembly time.\n1   03/09/92\n                                             DYLON / DYLOFF     7/22\n\n *-----------------------------------------------------------------*\n *              A U T O M A T I C     O P E R A N D S              *\n *        S E L E C T I O N     P R O C E S S     T A B L E        *\n *-----------------------------------------------------------------*\n\n  Member(s) AOS statements description :\n  ======================================\n\n  Purpose : Automatic Operand(s) Selection to be supplied with the\n  --------- DYLON or DYLOFF command.\n            By use of statements, it allows conditional selection.\n\n  Card columns range : columns 1-72. Never a keyword or an operand\n  -------------------- can be split between two successive cards.\n           Keywords and operands must be separated each from the\n           others by at least a blank character. When the first\n           character encountered in a card, unless blanks, is an\n           asterisk (*), then this card is handled as a comment card.\n\n  Syntax : always, a statement must start with a keyword IF-ON or\n  -------- IF-OFF and end by a keyword O= (this is mandatory).\n           Be careful in statements sequence order so they warrant a\n           high complex condition is met before a less one.\n\n  Keyword  Operand(s)  Meaning\n  -------  ----------  --------------------------------------------\n  IF-ON    none        start a conditional sentence for DYLON.\n  IF-OFF   none        start a conditional sentence for DYLOFF.\n  T=       S/L/B       terminal type : S for screen or L for line\n                       or B for TSO background run.\n  U=       User-id     list of User-id's names matching conditions.\n  G=       Group       list of group's names matching conditions.\n  P=       Procedure   list of procedure's names matching conditions.\n  O=       Operand(s)  the desired operand(s) to be supplied. This\n                       is the copy of the command operands you want,\n                       exactly as they would be keyboard typed in\n                       (unless for the C= operand as shown later).\n\n  Keywords    Aliases\n  ----------  -----------------------------------------------------\n  T=          TERM=, TERMINAL=\n  U=          USER=, USERS=\n  G=          GROUP=, GROUPS=\n  P=          PROC=, PROCEDURE=, PROCS=, PROCEDURES=\n  O=          OP=, OPS=, OPND=, OPNDS=, OPERAND=, OPERANDS=\n  Operands    Aliases\n  ----------  -----------------------------------------------------\n  S           SCREEN, D, DISPLAY\n  L           LINE, LINES\n  B           BACK, BACKGROUND (equivalent to L)\n1   03/09/92\n                                             DYLON / DYLOFF     8/22\n\n  How to code keywords and operands :\n  -----------------------------------\n\n    1. When coding U=, G= and P= operand(s), the following rules must\n         be applied :\n\n         1. a single name may be coded P= ... as well as P= ( ... )\n         2. a list of names is always coded G= ( ... ... ... )\n\n       You may also specify a shorter characters string which will be\n         used as match test on the initial characters of the current\n         User-id, group or procedure name. To do it, just prefix the\n         characters string by a period.\n\n         I.e. : U= .SYS which means all User-id's names starting with\n                the SYS characters (i.e. : SYSTSO1, SYSTSO2, SYSIBM1\n                and SYSIBM2 are all matching the above condition).\n\n    2. Keywords and operands as well as multiple commands may be coded\n         in separate cards, as i.e. :\n\n         =>   IF-ON                                                 <=\n         =>        TERMINAL= S                                      <=\n         =>             USERS= ( .SYS                               <=\n         =>                      MASTER )                           <=\n         =>                  OPERANDS= NOLIST                       <=\n         =>                            ISPF                         <=\n         =>                            COMMANDS= ' TIME             <=\n         =>                                      ; ISPF '           <=\n1   03/09/92\n                                             DYLON / DYLOFF     9/22\n\n *-----------------------------------------------------------------*\n *                D E F A U L T     I N T E R N A L                *\n *               D E F I N I T I O N S     T A B L E               *\n *-----------------------------------------------------------------*\n\n  Member(s) IDV keywords description :\n  ====================================\n\n  Card columns range : columns 1-72.\n  -------------------- KEYWORD=VALUE must reside entirely in a card.\n         As soon as an asterisk (*) is encountered, it means a comment\n         in the rest of the card.\n\n  Remark : all KEYWORD=VALUE's (marked by => at the left side) are\n  -------- the default values already assigned at the assembly time,\n           so, you may omit those you need not change.\n\n  1. Local definitions :\n     The volume serial number used by DMS to archive data-sets, and\n     thus, used to force their restore :\n              => DMSVOL=SHADOW\n     The DD-name's libraries concatenations info's table area work\n     space length :\n              => MXLCIT=10K\n     The User-id's aliases process table area work space length :\n              => MXALUS=512\n     The groups aliases process table area work space length :\n              => MXALGR=512\n\n  2. Special processings definitions :\n      SP=P : allocation of new ISPF profile (also used to allocate\n             MFTTLIB DD of MFTS).\n             Equivalent JCL allocation :\n               //ISPPROF  DD UNIT=&PU,VOL=SER=&PV,\n               //            DSN=...,SPACE=(&PA,(&PP,&PS,&PD)),\n               //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=&PB),\n               //            DISP=(NEW,CATLG)\n             Note : DSN=... (DS=), RECFM=F and LRECL=80 must be defined\n                    in member DDT... (BLKSIZE is defined below).\n              => PU=DISK      -> Unit\n              => PV=USER00    -> Volume serial number\n              => PA=TRK       -> Space allocation (CYL or TRK)\n              => PP=1         -> Primary space\n              => PS=1         -> Secondary space\n              => PD=3         -> Directory blocks\n              => PB=3120      -> Block-size\n1   03/09/92\n                                             DYLON / DYLOFF    10/22\n\n      SP=W : allocation of ISPF work file.\n             Equivalent JCL allocation :\n               //ISPWORK  DD UNIT=&WU,SPACE=(&WA,(&WP,&WS,&WD)),\n               //            DCB=&WR\n              => WU=VIO       -> Unit\n              => WA=CYL       -> Space allocation (CYL or TRK)\n              => WP=1         -> Primary space\n              => WS=2         -> Secondary space\n              => WD=5         -> Directory blocks\n              => WR=EUR1.TABLES.DATA -> DCB reference data-set name\n      SP=C : allocation of ISPF control file.\n             Equivalent JCL allocation :\n               //ISPCTL.. DD UNIT=&CU,SPACE=(&CA,(&CP,&CS)),\n               //            DCB=(RECFM=FB,BLKSIZE=&CB,LRECL=80)\n             Note : RECFM=F and LRECL=80 must be defined in member\n                    DDT... (BLKSIZE is defined below).\n              => CU=SYSDA     -> Unit\n              => CA=CYL       -> Space allocation (CYL or TRK)\n              => CP=1         -> Primary space\n              => CS=1         -> Secomdary space\n              => CB=6080      -> Block-size\n      SP=E : allocation of TSO Edit work file.\n             Equivalent JCL allocation :\n               //SYSEDIT  DD UNIT=&EU,DSN=&EDIT,\n               //            SPACE=(&EA,(&EP,&ES))\n              => EU=SYSDA     -> Unit\n              => EA=6121      -> Blocks allocation\n              => EP=20        -> Primary space\n              => ES=10        -> Secondary space\n\n  How to code an alternate \"IDV\" member :\n  ---------------------------------------\n\n         If you want to change only\n           a) the DMS archive volume serial number,\n           b) the DD-name's work area space to be used, and\n           c) the data-set name reference for ISPWORK,\n         you have just to code, as i.e., the following three cards :\n\n         =>   DMSVOL=CASPER                                         <=\n         =>   MXLCIT=20K                                            <=\n         =>   WR=MYSELF.TABLES.DATA                                 <=\n1   03/09/92\n                                             DYLON / DYLOFF    11/22\n\n *-----------------------------------------------------------------*\n *              D D N A M E ' S     L I B R A R I E S              *\n *    C O N C A T E N A T I O N S     I N F O ' S     T A B L E    *\n *-----------------------------------------------------------------*\n\n  Member(s) DDT statements description :\n  ======================================\n\n  Card columns range : columns 1-72.\n  -------------------- An operand must reside entirely in a card.\n                       An asterisk (*) in column 1 means a comment.\n\n  1. DD : define a DD-name to which one, at least, or more\n  ------- libraries must be dynamically and permanently allocated.\n\n     Syntax :  DD=...  ID=...  DSORG=...  RECFM=...  LRECL=...  SP=...\n\n     Operand  Meaning                                       Max.L.\n     -------  --------------------------------------------  ------\n     DD=      DD-name (JOBCAT, STEPCAT, JOBLIB and          CL8\n              STEPLIB are obviously not supported).\n\n     ID=      DD purpose short description (must be         CL20\n              enclosed between double-quotes (\") if\n              it contains one or more blanks).\n\n     DSORG=   Data-set(s) organization : PS, PO or DA.\n              When DA, RECFM and LRECL are not used.\n\n     RECFM=   Data-set(s) record format : F, V or U.\n\n     LRECL=   Data-set(s) record length (used only\n              with RECFM=F or V).\n\n     SP=      DD-name special processing request.           CL1\n              Valid value : C = CONTROL\n                            D = DUMMY\n                            E = EDIT\n                            T = TERMINAL\n                            W = WORK\n1   03/09/92\n                                             DYLON / DYLOFF    12/22\n\n  2. DS : define a data-set library to be allocated under the\n  ------- DD-name previously declared by a DD statement.\n\n     Syntax :  DS=...  TYPE=...  OPT=...  SP=...\n\n     Operand  Meaning                                       Max.L.\n     -------  --------------------------------------------  ------\n     DS=      Data-set name, into which you may use         CL44\n              the following special coding :\n              <P> : current DSNAME's PREFIX replacement\n              <U> : current RACF USER-ID replacement\n              <G> : current RACF GROUP-NAME replacement\n              If omitted : temporary data-set assumed\n              (code DS= when another operand specified).\n\n     TYPE=    Data-set product(s) or special uses.\n              Valid values : SPF = PDF-ISPF\n                             IFS = INFO-System\n                             SMP = SMP/E\n                             ADA = ADABAS\n                             MFT = MFTS\n                             SYS = System user\n                             IFM = INFO-System manager\n                             DMS = DMS manager\n\n     OPT=     Data-set processing requirement.              CL1\n              Valid value : M = mandatory for the product\n                            X = exclusive for the product\n\n     SP=      Data-set special processing request.          CL1\n              Valid value : P = profile\n1   03/09/92\n                                             DYLON / DYLOFF    13/22\n\n  How to code an alternate \"DDT\" member :\n  ---------------------------------------\n\n         The member \"DDT\" coded below, as e.g, is the equivalent of\n    the internal pre-defined DDT table created at assembly time :\n\n         =>DD=SYSPROC    ID=\"TSO PROCEDURES\"                        <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<P>.CLIST                               <=\n         =>              DS=<U>.CLIST                               <=\n         =>              DS=<P>.PROCS.DATA  TYPE=SPF                <=\n         =>              DS=<U>.PROCS.DATA  TYPE=SPF                <=\n         =>              DS=SYSDMS.EUR.CMDPROC  TYPE=DMS            <=\n         =>              DS=<G>.CLIST                               <=\n         =>              DS=<G>.PROCS.DATA  TYPE=SPF                <=\n         =>              DS=EUR1.PROCS.DATA  OPT=M                  <=\n         =>              DS=ADA.CMDPROC  OPT=M  TYPE=ADA            <=\n         =>DD=SYSHELP    ID=\"TSO HELP\"                              <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<P>.HELP.DATA                           <=\n         =>              DS=<U>.HELP.DATA                           <=\n         =>              DS=<G>.HELP.DATA                           <=\n         =>              DS=SYS1.HELP  OPT=M                        <=\n         =>              DS=EUR1.HELP  OPT=M                        <=\n         =>DD=SYSUADS    ID=\"USER ATTRIBUTE\"                        <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=SYS1.UADS  TYPE=SYS                     <=\n         =>DD=SYSLBC     ID=\"FILE TRANSFERT\"                        <=\n         =>                   DSORG=PS  RECFM=F  LRECL=129          <=\n         =>              DS=SYS1.BRODCAST                           <=\n         =>DD=ISPPROF    ID=\"ISPF PROFILE\"                          <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<U>.SPF.PROF  TYPE=SPF  SP=P            <=\n         =>DD=ISPLLIB    ID=\"ISPF LINK\"                             <=\n         =>                   DSORG=PO  RECFM=U                     <=\n         =>              DS=<P>.LINK.DATA  TYPE=SPF                 <=\n         =>              DS=<U>.LINK.DATA  TYPE=SPF                 <=\n         =>              DS=SYSDMS.EUR.CMDLIB  TYPE=DMS             <=\n         =>              DS=<G>.LINK.DATA  TYPE=SPF                 <=\n         =>              DS=EUR1.LINK.DATA  OPT=M  TYPE=SPF         <=\n         =>              DS=SYSPROD.MFTS.V51L04.LOADLIB             <=\n         =>                   OPT=M  TYPE=MFT                       <=\n         =>              DS=SYSNEW.INFOV3R1.BLMMOD1                 <=\n         =>                   OPT=M  TYPE=IFS                       <=\n         =>              DS=SYSNEW.INFOV3R1.BLGMOD1                 <=\n         =>                   OPT=M  TYPE=IFM                       <=\n1   03/09/92\n                                             DYLON / DYLOFF    14/22\n\n    ... continue ...\n\n         =>DD=ISPPLIB    ID=\"ISPF PANELS\"                           <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<P>.PANELS.DATA  TYPE=SPF               <=\n         =>              DS=<U>.PANELS.DATA  TYPE=SPF               <=\n         =>              DS=SYSDMS.EUR.ISPPLIB  TYPE=DMS            <=\n         =>              DS=<G>.PANELS.DATA  TYPE=SPF               <=\n         =>              DS=EUR1.PANELS.DATA  OPT=M  TYPE=SPF       <=\n         =>              DS=SYSPROD.MFTS.V51L04.ISPPLIB             <=\n         =>                   OPT=M  TYPE=MFT                       <=\n         =>DD=ISPMLIB    ID=\"ISPF MESSAGES\"                         <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<P>.MESS.DATA  TYPE=SPF                 <=\n         =>              DS=<U>.MESS.DATA  TYPE=SPF                 <=\n         =>              DS=SYSDMS.EUR.ISPMLIB  TYPE=DMS            <=\n         =>              DS=<G>.MESS.DATA  TYPE=SPF                 <=\n         =>              DS=EUR1.MESS.DATA  OPT=M  TYPE=SPF         <=\n         =>              DS=SYSPROD.MFTS.V51L04.ISPMLIB             <=\n         =>                   OPT=M  TYPE=MFT                       <=\n         =>DD=ISPSLIB    ID=\"ISPF SKELETONS\"                        <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<P>.SKELS.DATA  TYPE=SPF                <=\n         =>              DS=<U>.SKELS.DATA  TYPE=SPF                <=\n         =>              DS=<G>.SKELS.DATA  TYPE=SPF                <=\n         =>              DS=EUR1.SKELS.DATA  OPT=M  TYPE=SPF        <=\n         =>DD=ISPTLIB    ID=\"ISPF TABLES INPUT\"                     <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<P>.TABLES.DATA  TYPE=SPF               <=\n         =>              DS=<U>.TABLES.DATA  TYPE=SPF               <=\n         =>              DS=<G>.TABLES.DATA  TYPE=SPF               <=\n         =>              DS=EUR1.TABLES.DATA  OPT=M  TYPE=SPF       <=\n         =>DD=ISPTABL    ID=\"ISPF TABLES OUTPUT\"                    <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<P>.TABLES.DATA  OPT=X  TYPE=SPF        <=\n         =>              DS=<U>.TABLES.DATA  OPT=X  TYPE=SPF        <=\n         =>              DS=<U>.SPF.PROF  TYPE=SPF                  <=\n         =>DD=ISPWORK    ID=\"ISPF WORK FILE\"  DSORG=PO              <=\n         =>                   RECFM=F  LRECL=80  SP=W               <=\n         =>              DS=  TYPE=SPF                              <=\n         =>DD=ISPCTL1    ID=\"ISPF CONTROL 1\"  DSORG=PS              <=\n         =>                   RECFM=F  LRECL=80  SP=C               <=\n         =>              DS= TYPE=SPF                               <=\n         =>DD=ISPCTL2    ID=\"ISPF CONTROL 2\"  DSORG=PS              <=\n         =>                   RECFM=F  LRECL=80  SP=C               <=\n         =>              DS= TYPE=SPF                               <=\n1   03/09/92\n                                             DYLON / DYLOFF    15/22\n\n    ... continue ...\n\n         =>DD=SMPTABL    ID=\"SMP TABLES\"                            <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=EUR1.TABLES.DATA  OPT=M  TYPE=SMP       <=\n         =>DD=PARMLIB    ID=\"DMS PARAMETERS\"                        <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=SYSDMS.PARMLIB  OPT=M  TYPE=DMS         <=\n         =>DD=MFTTLIB    ID=\"MFTS TABLES\"                           <=\n         =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n         =>              DS=<U>.MFTS.TABLES  TYPE=MFT  SP=P         <=\n         =>DD=FILES      ID=\"DMS CATALOG\"  DSORG=DA                 <=\n         =>              DS=SYSDMS.FILES  OPT=M  TYPE=DMS           <=\n         =>DD=SYSEDIT    ID=\"TSO EDIT WORK\"  SP=E                   <=\n         =>DD=PLIDUMP    ID=\"PL1 DUMP\"  SP=D                        <=\n         =>DD=MSGPRINT   ID=\"DMS MESSAGES\"  SP=T                    <=\n         =>DD=SYSPRINT   ID=\"NORMAL OUTPUT\"  SP=T                   <=\n         =>DD=SYSTERM    ID=\"ERRORS MESSAGES\"  SP=T                 <=\n         =>DD=SYSIN      ID=\"NORMAL INPUT\"  SP=T                    <=\n1   03/09/92\n                                             DYLON / DYLOFF    16/22\n\n *-----------------------------------------------------------------*\n *        A L I A S ( E S )     P R O C E S S     T A B L E        *\n *-----------------------------------------------------------------*\n\n  Member(s) ALT statements description :\n  ======================================\n\n  Alias : define an alias name to use as replacement for user <U> or\n  ------- group <G> data-sets names when trying to allocate them to\n          specific DD-names (i.e., if a data-set <U>... or <G>... is\n          not found when doing allocation, then a search is done to\n          find the alias... data-set only when the DD-name matches in\n          the corresponding alias table entry).\n          The UNLESS operand allows to prevent this process when\n               1. a user (User-id table) is connected to any RACF\n                  group(s) which must not access the alias name, or\n               2. a group (group table) contains any RACF user(s)\n                  who must not access the alias name.\n\n  Syntax :  USER= or GROUP=  NAME ALIAS\n  --------           DDN=  ...  ...  ...\n                        UNLESS=  ...  ...  ...\n\n  Card columns range : columns 1-72.\n  -------------------- An asterisk (*) in column 1 means a comment.\n\n  Operand  Meaning                                          Max.L.\n  -------  -----------------------------------------------  ------\n  NAME     The User-id (USER=) or group (GROUP=) name.      CL8\n  ALIAS    The alias name.                                  CL8\n  DDN=     The DD-name(s) to which the process must be      CL8\n           applied. The list may continue on more cards.\n  UNLESS=  The group name(s), when User-id table, or        CL8\n           User-id name(s), when group table, for which\n           the process must not be applied. If specified,\n           this operand must follows the DDN= operand.\n           The list may continue on more cards.\n\n  How to code an alternate \"ALT\" member :\n  ---------------------------------------\n\n         The member \"ALT\" coded below, as e.g., is the equivalent of\n    the internal pre-defined ALT table created at assembly time :\n\n         =>USER= SYSTSO2 SYSTSO1                                    <=\n         =>         DDN= SYSPROC SYSHELP ISPPLIB                    <=\n         =>              ISPMLIB ISPSLIB ISPTLIB                    <=\n         =>GROUP= OPER SYS                                          <=\n         =>         DDN= SYSPROC ISPPLIB ISPMLIB                    <=\n         =>              ISPSLIB ISPTLIB                            <=\n         =>         UNLESS= SYSTSOX XALERT1 XALERT2                 <=\n1   03/09/92\n                                             DYLON / DYLOFF    17/22\n\n *-----------------------------------------------------------------*\n *              A U T O M A T I C     C O M M A N D S              *\n *        S E L E C T I O N     P R O C E S S     T A B L E        *\n *-----------------------------------------------------------------*\n\n  Member(s) ACS statements description :\n  ======================================\n\n  Purpose : Automatic Command(s) Selection to be executed when the\n  --------- DYLON or DYLOFF process is successfully complete.\n            By use of statements, it allows conditional selection.\n\n  Card columns range : columns 1-72. Never a keyword or an operand\n  -------------------- can be split between two successive cards.\n            Keywords and operands must be separated each from the\n            others by at least a blank character. When the first\n            character encountered in a card, unless blanks, is an\n            asterisk (*), then this card is handled as a comment card.\n\n  Syntax : always, a statement must start with a keyword IF-ON or\n  -------- IF-OFF and end by a keyword C= (this is mandatory).\n           Be careful in statements sequence order so they warrant a\n           high complex condition is met before a less one.\n\n  Keyword  Operand(s)  Meaning\n  -------  ----------  --------------------------------------------\n  IF-ON    None        Start a conditional sentence for DYLON.\n  IF-OFF   None        Start a conditional sentence for DYLOFF.\n  T=       S/L/B       Terminal type : S for screen or L for line\n                       or B for TSO background run.\n  U=       User-id     List of User-id's names matching conditions.\n  G=       Group       List of group's names matching conditions.\n  P=       Procedure   List of procedure's names matching conditions.\n  S=       Type        List of type's names matching conditions (valid\n                       only in IF-ON sentence). Valid values are :\n                             SPF = PDF-ISPF\n                             IFS = INFO-System\n                             SMP = SMP/E\n                             ADA = ADABAS\n                             MFT = MFTS\n                             SYS = System user\n                             IFM = INFO-System manager\n                             DMS = DMS manager\n  C=       Command(s)  The desired command(s). The string must be\n                       quoted if it includes one or more blanks and/or\n                       quotes (a quote in the string must be doubled),\n                       and multiple commands must be separated each\n                       from the other by the semi-colon (;) delimiter.\n1   03/09/92\n                                             DYLON / DYLOFF    18/22\n\n  Keywords    Aliases\n  ----------  -----------------------------------------------------\n  T=          TERM=, TERMINAL=\n  U=          USER=, USERS=\n  G=          GROUP=, GROUPS=\n  P=          PROC=, PROCEDURE=, PROCS=, PROCEDURES=\n  S=          SEL=, SELECT=\n  C=          CMD=, CMDS=, COMMAND=, COMMANDS=\n  Operands    Aliases\n  ----------  -----------------------------------------------------\n  S           SCREEN, D, DISPLAY\n  L           LINE, LINES\n  B           BACK, BACKGROUND (equivalent to L)\n\n  How to code keywords and operands :\n  -----------------------------------\n\n    1. When coding U=, G= and P= operand(s), the following rules must\n         be applied :\n\n         1. a single name may be coded P= ... as well as P= ( ... )\n         2. a list of names is always coded G= ( ... ... ... )\n\n       You may also specify a shorter characters string to use as match\n         test on the initial characters of the current User-id, group\n         or procedure name, by just prefixing it with a period.\n\n         I.e. : U= .SYS which means all User-id's names starting with\n                the SYS characters (i.e. : SYSTSO1, SYSTSO2, SYSIBM1\n                and SYSIBM2 are all matching the above condition).\n\n    2. The same rules apply to S= operand(s) coding unless you can't\n         define a match test (characters string prefixed by a period).\n         The type's names (data-set product(s) or special uses) in the\n         list are all tested to get the condition met.\n\n    3. Keywords and operands as well as multiple commands may be coded\n         in separate cards, as i.e. :\n\n         =>   IF-ON                                                 <=\n         =>        TERMINAL= S                                      <=\n         =>             USERS= ( .SYS                               <=\n         =>                      MASTER )                           <=\n         =>                  SELECT= ( SPF                          <=\n         =>                            ADA )                        <=\n         =>                            COMMANDS= ' TIME             <=\n         =>                                      ; ISPF '           <=\n\n       Internal pre-defined ACS table created at assembly time is :\n\n         =>   IF-ON C=TIME                                          <=\n         =>   IF-OFF C=TIME                                         <=\n1   03/09/92\n                                             DYLON / DYLOFF    19/22\n\n *-----------------------------------------------------------------*\n *                       P R O C E S S I N G                       *\n *-----------------------------------------------------------------*\n\n         The following explanations are based on the \"DDT\" internal\n    pre-defined table created at assembly time and listed previously.\n\n         When allocating, DYLON automatically searches and concatenates\n    to DD's all those useful and possible existing data-sets (assuming\n    they are conventionally named) as shown for some DD's below :\n\n    to DD-name :  any data-set(s) named :\n    ------------  ----------------------------------------------------\n\n    SYSPROC       Prefix.CLIST\n                  Userid.CLIST\n                  Prefix.PROCS.DATA  TYPE=SPF -> if ISPF selected\n                  Userid.PROCS.DATA  TYPE=SPF -> if ISPF selected\n                  SYSDMS.EUR.CMDPROC  TYPE=DMS -> if DMS manager\n                  Group.CLIST\n                  Group.PROCS.DATA  TYPE=SPF -> if ISPF selected\n                  EUR1.PROCS.DATA  OPT=M -> mandatory : TSO basic\n                  ADA.CMDPROC  OPT=M  TYPE=ADA -> mandatory if ADABAS\n                                                             selected\n\n    SYSHELP       Prefix.HELP.DATA\n                  Userid.HELP.DATA\n                  Group.HELP.DATA\n                  SYS1.HELP  OPT=M -> mandatory : IBM TSO basic\n                  EUR1.HELP  OPT=M -> mandatory : local TSO basic\n\n    ISPPROF       Userid.SPF.PROF  TYPE=SPF  SP=P -> if ISPF selected\n                                                   (special processing)\n\n    ISPLLIB       Prefix.LINK.DATA  TYPE=SPF -> if ISPF selected\n                  Userid.LINK.DATA  TYPE=SPF -> if ISPF selected\n                  SYSDMS.EUR.CMDLIB  TYPE=DMS -> if DMS manager\n                  Group.LINK.DATA  TYPE=SPF -> if ISPF selected\n                  EUR1.LINK.DATA  OPT=M  TYPE=SPF -> mandatory if ISPF\n                                                              selected\n                  SYSPROD.MFTS.V51L04.LOADLIB  OPT=M  TYPE=MFT ->\n                                            mandatory if MFTS selected\n                  SYSNEW.INFOV3R1.BLMMOD1  OPT=M  TYPE=IFS -> mandatory\n                                                if INFO-System selected\n                  SYSNEW.INFOV3R1.BLGMOD1  OPT=M  TYPE=IFM -> mandatory\n                                                 if INFO-System manager\n\n    ISPTABL       Prefix.TABLES.DATA  OPT=X  TYPE=SPF -> if ISPF\n                                                   selected (exclusive)\n                  Userid.TABLES.DATA  OPT=X  TYPE=SPF -> if ISPF\n                                                   selected (exclusive)\n                  Userid.SPF.PROF  TYPE=SPF -> if ISPF selected\n1   03/09/92\n                                             DYLON / DYLOFF    20/22\n\n    Remarks on above list :\n    ------------------------------------------------------------------\n\n    1. In the list given above :\n         \"Prefix\" means the current dsname prefix which may be set by\n              the PROFILE PREFIX(...) command,\n         \"Userid\" means the current RACF user-id name, and\n         \"Group\" means the current RACF group.\n\n    2. The ISPTABL allocation differs from the others because it is an\n         exception. In fact, being an output data-set, concatenation\n         is unacceptable. So, only the first existing data-set will be\n         allocated to it (exclusive).\n\n    3. The concatenation of data-sets with different block sizes is\n         automatically handled by setting the value equal to the\n         largest block size (DCB=BLKSIZE=value) on the first data-set\n         allocated to the DD-name.\n\n    4. The PDF profile data-set (ISPPROF) is indicated as having a\n         special processing. In fact, it is allocated as OLD, but if\n         the command is unable to do it, then it tries to allocate and\n         catalog a NEW data-set.\n         Note : a) All users who previously were issuing the PDFINIT\n                   command can delete it (in any case, no problems if\n                   they don't).\n                b) All users who previously were issuing the FIRE\n                   command can now replace it by DYLON/DYLOFF.\n\n    5. All the data-sets detected to be in the DMS archive will be\n         automatically restored (equivalent of IBM \"HSM\").\n\n    6. All the DD allocated by DYLON command are marked as permanent,\n         and thus are not freed by the FREE ALL command.\n\n    7. You may always verify your environment using the LISTA STATUS\n         command, or the LISTAX (CBT distributed command) which is\n         much nicer.\n1   03/09/92\n                                             DYLON / DYLOFF    21/22\n\n *-----------------------------------------------------------------*\n *      U S E R ' S     S E L E C T I O N S - D E F A U L T S      *\n *-----------------------------------------------------------------*\n\n    The validity and compatibility control logic of user's requests\n    and the defaults logic for Products libraries allocation to be\n    applied to users who don't specify any Products selection (no\n    Products operands) are pre-defined at DYLON command installation\n    time. The implemented logic (only DYLON command) is as follows :\n\n      1. If the user's group is SYS1, SYS or OPER, then he is marked\n         as System data-sets user.\n\n      2. If the terminal type is a \"LINE\" terminal type (i.e. IBM 2741\n         or background run), then only the ADABAS option is accepted\n         (if none specified, no defaults supplied).\n\n      3. If the terminal type is a \"SCREEN\" terminal type (i.e. IBM\n         3270), and none specified (no options), then\n              a) if the user's group is SYS1 or SYS defaults are\n                        ISPF  INFOSYS  SMP  NOADABAS  MFTS\n                 and additionally,\n                    if the user is SYSTSO1 or SYSTSO2 he is marked as\n                        INFO-System manager\n                    or if the user is SYSRACF or SYSDMS he is marked as\n                        DMS manager\n              b) if the user's group is OPER defaults are\n                        ISPF  NOADABAS  MFTS\n              c) all the other users defaults are\n                        ISPF  NOADABAS\n         or some option(s) specified, then, knowing that the ISPF\n         option is needed for all other options unless ADABAS, the\n         following rules are applied\n              a) System users can ask all options\n              b) All other users can ask ISPF, ADABAS and MFTS options\n\n    At DYLOFF command, no logic is implemented because the SYS/NOSYS\n    option has no effect on users who are not System data-sets users.\n1   26/11/92\n                                             DYLON / DYLOFF    22/22\n\n *-----------------------------------------------------------------*\n *        DYLON - DYLOFF     S P E C I A L     T O P I C S         *\n *-----------------------------------------------------------------*\n\n    If in a \"DDT\" member you code a DD-name information as i.e.\n    below :\n\n      =>DD=MYLIB      ID=\"MY LIBRARY\"                            <=\n      =>                   DSORG=PO  RECFM=F  LRECL=80           <=\n      =>              DS=<U>.MYLIB.DATA  OPT=M                   <=\n\n    Then :\n      1. at DYLON command, this allocation is considered a TSO basic\n         use allocation (no TYPE=... declared for any data-set in the\n         DD list), and so,\n      2. at DYLOFF command, the corresponding de-allocation is skipped,\n         which means the DD-MYLIB remains allocated to the session.\n\n    If you want force the de-allocation, you may :\n       1. enter commands  DYLOFF\n                          FREE F(MYLIB)\n              or command  DYLOFF C=' FREE F(MYLIB) '\n       2. or use the automatic facilities of DYLOFF command to schedule\n          the FREE command, as i.e. in an \"AOS\" member you may code\n                          IF-OFF  C= ' FREE F(MYLIB) '\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLOCMD": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92&o\\x00\\x92&o\\x167\\x00\\x02\\x00\\x02\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-09-22T00:00:00", "modifydate": "1992-09-22T16:37:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "SYSPAJA"}, "text": "         @AC   ' IF-ON C=TIME '\n         @AC   ' IF-OFF C=TIME '\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYLOCOM": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\"/\\x00\\x93\"/\\x12\\x04\\x04c\\x04c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-10T00:00:00", "modifydate": "1993-08-10T12:04:00", "lines": 1123, "newlines": 1123, "modlines": 0, "user": "SYSPAJA"}, "text": "DYLO     TITLE 'DYLON/DYLOFF -- DYNAMIC LOGON/LOGOFF.'\nDYLOCOM  START 0\n        PRINT  OFF\n        COPY   DYLOMAC             <=== ASSEMBLY MACROS ==============\n         GBLA  &TSON\n         GBLB  &ITSWT\n         GBLB  &ACSWS,&ACSWE\n         GBLB  &ALSWSU,&ALSWEU,&ALSWSG,&ALSWEG\n         GBLB  &DDSWS,&DDSWE\n         GBLC  &TSOP(100)\n         GBLC  &PRS,&PRF\n         GBLC  &ITPFX,&ITDSN\n         GBLC  &DMSVOL,&MXLCIT,&MXALUS,&MXALGR\n         GBLC  &PU,&PV,&PA,&PP,&PS,&PD,&PB\n         GBLC  &WU,&WA,&WP,&WS,&WD,&WR\n         GBLC  &CU,&CA,&CP,&CS,&CB\n         GBLC  &EU,&EA,&EP,&ES\n         GBLC  &ACLBL,&ALUNM,&ALGNM\n&TSON    SETA  100\n&ACSWS   SETB  0\n&ACSWE   SETB  0\n&DDSWS   SETB  0\n&DDSWE   SETB  0\n&ALSWSU  SETB  0\n&ALSWEU  SETB  0\n&ALSWSG  SETB  0\n&ALSWEG  SETB  0\n&TSOP(1)   SETC 'NOLIST'\n&TSOP(2)   SETC 'NOMSG'\n&TSOP(3)   SETC 'NOLST'\n&TSOP(4)   SETC 'LIST'\n&TSOP(5)   SETC 'MSG'\n&TSOP(6)   SETC 'LST'\n&TSOP(7)   SETC '?'\n&TSOP(8)   SETC 'AUTO'\n&TSOP(9)   SETC 'AOS'\n&TSOP(10)  SETC 'AO'\n&TSOP(11)  SETC 'A'\n&TSOP(12)  SETC 'IDV'\n&TSOP(13)  SETC 'I'\n&TSOP(14)  SETC 'DDT'\n&TSOP(15)  SETC 'DD'\n&TSOP(16)  SETC 'ALT'\n&TSOP(17)  SETC 'AL'\n&TSOP(18)  SETC 'ACS'\n&TSOP(19)  SETC 'AC'\n&TSOP(20)  SETC 'C='\n&TSOP(21)  SETC 'CMD='\n&TSOP(22)  SETC 'CMDS='\n&TSOP(23)  SETC 'COMMAND='\n&TSOP(24)  SETC 'COMMANDS='\n&TSOP(25)  SETC 'DSAB'\n&TSOP(26)  SETC 'LINE'\n&TSOP(27)  SETC 'SCREEN'\n         AIF   ('&SYSPARM' EQ '').SN\n         AIF   ('&SYSPARM' EQ 'FULL').SF\n         AIF   ('&SYSPARM' EQ 'SHORT').SS\n.SN      ANOP\n&PRS     SETC  'NOGEN'\n&PRF     SETC  'NOGEN'\n         AGO   .ST\n.SS      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'NOGEN'\n         AGO   .ST\n.SF      ANOP\n&PRS     SETC  'GEN'\n&PRF     SETC  'GEN'\n.ST     PRINT  ON\n         SPACE 1\n*--------------------------------------------------------------------*\n*        D Y L O N / D Y L O F F     T S O     C O M M A N D         *\n*--------------------------------------------------------------------*\n*\n*  PURPOSE :   SESSION LIBRARIES DYNAMIC ALLOCATION.\n*  ---------   ALLOCATE (DYLON) OR DE-ALLOCATE (DYLOFF) ALL THE NEEDED\n*              LIBRARIES TO RUN SUCCESSFULLY A SPECIFIC USER SESSION.\n*   THIS COMMAND INTENTS TO :\n*     1. BYPASS TSO LOGOFF/LOGON \"ANOTHER PROCEDURE\", NEEDED WHEN A\n*        CHANGE ENVIRONMENT/APPLICATION IS NECESSARY, AND THUS,\n*     2. HIGHLY LIMITS THE NUMBER OF STANDARD OR PRIVATE TSO LOGON\n*        PROCEDURES (SO LESS \"ACCOUNT\" COMMAND TO DO),\n*     3. RESTORE AUTOMATICALLY THOSE DATA-SETS WHICH HAVE BEEN ARCHIVED\n*        BY \"DMS\" (EQUIVALENT OF IBM \"HSM\"),\n*     4. EASIER DIAGNOSE OF ANY MALFUNCTION WHEN ALLOCATING THE\n*        ENVIRONMENT/APPLICATION LIBRARIES DATA-SETS.\n*   I.E., AT OUR INSTALLATION, WE USE THE FOLLOWING TWO COUPLE OF\n*   STANDARD TSO LOGON PROCEDURES WITH THIS COMMAND :\n*     1. LOGON MANUAL MODE :\n*        A. UNDER TSO ONLY :\n*           //JRCTSO  EXEC PGM=IKJEFT01,DYNAMNBR=100,\n*           //             TIME=0015,PARM='TIME'\n*           //ROTATE OUTPUT PAGEDEF=R90L08\n*           //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n*        B. UNDER SESSION MANAGER :\n*           //JRCSM   EXEC PGM=ADFMDF03,DYNAMNBR=100,\n*           //             TIME=0015,PARM='SM(,Y)'\n*           //ROTATE OUTPUT PAGEDEF=R90L08\n*           //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n*     2. LOGON AUTOMATIC MODE :\n*        A. UNDER TSO ONLY :\n*           //JRCTSOX EXEC PGM=IKJEFT01,DYNAMNBR=100,\n*           //             TIME=0015,PARM='DYLON AUTO'\n*           //ROTATE OUTPUT PAGEDEF=R90L08\n*           //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n*        B. UNDER SESSION MANAGER :\n*           //JRCSMX  EXEC PGM=ADFMDF03,DYNAMNBR=100,\n*           //             TIME=0015,PARM='SM(,Y),DYLON AUTO'\n*           //ROTATE OUTPUT PAGEDEF=R90L08\n*           //ROTSMALL OUTPUT PAGEDEF=R90L10,CHARS=GSCC,FCB=LN10\n*   SO, AFTER A LOGON MANUAL MODE (JRCTSO OR JRCSM PROCEDURE), THE\n*   USER MAY SELECT VARIOUS SESSION ENVIRONMENTS/APPLICATIONS USING\n*   \"DYLON\" AND \"DYLOFF\" COMMANDS SEQUENCE. HOWEVER, AFTER AN INITIAL\n*   LOGON AUTOMATIC MODE (JRCTSOX OR JRCSMX PROCEDURE), THE USER ENTER\n*   DIRECTLY IN A SESSION ENVIRONMENT/APPLICATION WITHOUT ANY ACTION.\n*   THEN, IF WANTED, HE MAY CHANGE ENVIRONMENTS/APPLICATIONS USING THE\n*   \"DYLOFF\" AND \"DYLON\" COMMANDS SEQUENCE AGAIN.\n         EJECT\n*--------------------------------------------------------------------*\n*                   C O M M A N D     S Y N T A X                    *\n*--------------------------------------------------------------------*\n*\n* DYLON  : ALLOCATE SESSION LIBRARIES.\n* ------ OPERANDS (OPTIONAL) --- OR -> OPERANDS (OPTIONAL)\n*        --------------------------    --------------------------\n*        NOLIST/LIST/?                 NOLIST/LIST/?\n*        AUTO                          NOISPF/ISPF\n*                                      NOINFOSYS/INFOSYS\n*                                      NOSMP/SMP\n*                                      NOADABAS/ADABAS\n*                                      NOMFTS/MFTS\n*                                      IDV\n*                                      DDT\n*                                      ALT\n*                                      ACS\n*                                      COMMAND=...\n*                                      SETIFM\n*                                      SETDMS\n*                                      LINE/SCREEN\n*\n* DYLOFF : DE-ALLOCATE SESSION LIBRARIES (UNLESS THOSE CONSIDERED AS\n* ------   TSO BASIC USE).\n*        OPERANDS (OPTIONAL) --- OR -> OPERANDS (OPTIONAL)\n*        --------------------------    --------------------------\n*        NOLIST/LIST/?                 NOLIST/LIST/?\n*        AUTO                          NOSYS/SYS\n*                                      ACS\n*                                      COMMAND=...\n*                                      SETIFM\n*                                      SETDMS\n*                                      LINE/SCREEN\n         EJECT\n*--------------------------------------------------------------------*\n*                 C O M M A N D     O P E R A N D S                  *\n*--------------------------------------------------------------------*\n*\n* OPERANDS :  1. NOLIST = ONLY SEVERE ERROR MESSAGES (DEFAULT)\n* ----------       LIST = ALL MESSAGES\n*                     ? = ALL MESSAGES + SOME INFORMATIONAL MESSAGES\n*\n*             2. AUTO = ALL THE REMAINING OPERANDS (UNLESS NOLIST, LIST\n*                OR ?) ARE SUPPLIED IN A MEMBER OF THE TABLES LIBRARY\n*                DATA-SET (DEFAULT IS \"AOS\" MEMBER).\n*                NOTE : TO KNOW MORE (EXPLANATION/USE) ABOUT \"AOS\" SEE\n*                       FURTHER AT \"TABLES LIBRARY DATA-SET\".\n*\n*             3. PRODUCTS LIBRARIES ALLOCATION SELECTION (THESE\n*                KEYWORDS ARE USED WITH \"DYLON\" COMMAND ONLY).\n*                IF ANY ONE IS SPECIFIED, AUTOMATICALLY THE ALL\n*                DEFAULTS ARE THE \"NO...\" OPTION.\n*                IF NONE IS SPECIFIED, THEN THE DEFAULTS ARE SET BY\n*                THE LOGIC CODED IN THE MEMBER \"DYLOUSD\" (USER'S\n*                SELECTIONS - DEFAULTS).\n*\n*             4. NOSYS = DON'T DE-ALLOCATE THE SYSTEM DATA-SETS\n*                        LIBRARIES (DEFAULT OPTION).\n*                  SYS = DE-ALLOCATE IT ALSO.\n*                (THIS KEYWORD IS USED WITH \"DYLOFF\" COMMAND ONLY).\n*\n*             5. IDV (INTERNAL DEFINITIONS VALUES), DDT (DD-NAMES),\n*                ALT (ALIASES) AND ACS (AUTOMATIC COMMANDS SELECTION)\n*                TO EVENTUALLY SPECIFY NAMES (1-8 CHARACTERS) WHICH\n*                ALLOW MEMBERS SELECTION FROM THE TABLES LIBRARY\n*                DATA-SET (UNLESS ACS, THESE KEYWORDS ARE USED WITH\n*                \"DYLON\" COMMAND ONLY).\n*                NOTE : TO KNOW MORE (EXPLANATION/USE) ABOUT \"IDV\",\n*                       \"DDT\", \"ALT\" AND \"ACS\" LOOK FURTHER AT\n*                       \"TABLES LIBRARY DATA-SET\".\n*\n*             6. COMMAND=... ANY COMMAND(S) TO BE EXECUTED WHEN THE\n*                \"DYLON\" OR \"DYLOFF\" PROCESS IS SUCCESSFULLY COMPLETE.\n*                THE SYNTAX OF THIS OPERAND MAY BE AS BELOW :\n*                     COMMAND=LISTA\n*                     COMMAND='LISTA STATUS'\n*                     COMMAND='FREE ALL;LISTA STATUS'\n*                THE STRING MUST BE QUOTED IF IT INCLUDES ONE OR MORE\n*                BLANKS AND/OR QUOTES (A QUOTE IN THE STRING MUST BE\n*                DOUBLED), AND MULTIPLE COMMANDS MUST BE SEPARATED\n*                EACH FROM THE OTHER BY THE SEMI-COLON DELIMITER.\n*                OR : COMMAND=* (AUTOMATIC COMMANDS SELECTION)\n*                     COMMAND=? (TERMINAL PROMPTING FOR COMMANDS)\n         EJECT\n*  OPERANDS   ALIASES\n*  ---------  -----------------------------------------\n*  NOLIST     NOMSG, NOLST\n*  LIST       MSG, LST\n*  AUTO       AOS, AO, A\n*  NOISPF     NOSPF\n*  ISPF       SPF\n*  NOINFOSYS  NOIFS, NOIS\n*  INFOSYS    IFS, IS\n*  NOADABAS   NOADA\n*  ADABAS     ADA\n*  NOMFTS     NOMFT, NOMF\n*  MFTS       MFT, MF\n*  NOSYS      NS\n*  SYS        S\n*  IDV        I\n*  DDT        DD\n*  ALT        AL\n*  ACS        AC\n*  COMMAND=   CMD=, C=, COMMANDS=, CMDS=\n*\n*  COMPLETION CODES : THIS COMMAND RETURNS A VALUE IN REGISTER 15\n*  ------------------ (RETURN CODE) REPRESENTING THE SUCCESS OR\n*                     NONSUCCESS COMPLETION :\n*\n*        -----------------------------------------------------------\n*        | &LASTCC | MEANING                                       |\n*        |---------|-----------------------------------------------|\n*        |    0    | SUCCESSFUL COMPLETION                         |\n*        |---------|-----------------------------------------------|\n*        |    8    | COMPLETION WITH ERROR(S)                      |\n*        -----------------------------------------------------------\n*\n*  ATTRIBUTES : MODULE IS RE-ENTERABLE.\n*  ------------ TSO FOREGROUND AND BACKGROUND RUNNING ALLOWED.\n*\n*  AUTHOR :     MOINIL P.A.\n*  --------     COMPUTING CENTRE (TP 361)\n*               J.R.C. - ISPRA ESTABLISHMENT\n*               21020 ISPRA (VA), ITALY\n*               TEL. 0-332-789442\n         EJECT\n*-------------------------------------------------------------------*\n*               S P E C I A L     O P E R A N D ( S )               *\n*-------------------------------------------------------------------*\n         SPACE 1\n*  SPECIAL OPERANDS : RESTRICTED TO DEBUG USE (TEST PURPOSE), SO\n*  ------------------ ALLOWED ONLY TO THE \"WIZARD\" INSTALLATION\n*        SENIOR SYSTEM PROGRAMMER(S) AND DEFINED WITH @WIZ MACRO.\n*\n*        OPERAND  MEANING\n*        -------  ---------------------------------------------------\n*        SETIFM   FORCE INFO MANAGER ALLOCATIONS.\n*        SETDMS   FORCE DMS MANAGER ALLOCATIONS.\n*        LINE     FORCE LINE TERMINAL (AS I.E. AN IBM 2741).\n*        SCREEN   FORCE SCREEN TERMINAL (AS I.E. AN IBM 3270) .\n*\n*  NOTE : THESE OPERANDS ARE ACCEPTED ONLY AS TRUE COMMAND OPERANDS,\n*  ====== THEY CANNOT BE USED IN ANY \"AOS\" MEMBER(S).\n         SPACE 1\n*-------------------------------------------------------------------*\n*            T S O - B A T C H     E N V I R O N M E N T            *\n*-------------------------------------------------------------------*\n         SPACE 1\n*  BATCH EXECUTION : THIS COMMAND MAY RUN IN TSO-BATCH ENVIRONMENT,\n*  ----------------- WITH THE FOLLOWING ASSUMPTIONS :\n*        1. BACKGROUND RUN AS A \"LINE\" TERMINAL (I.E. IBM 2741), AND\n*        2. OPERAND COMMAND=? (TERMINAL PROMPTING) IS BYPASSED.\n*\n*  DEBUG FACILITY : YOU MAY TEST I.E. NEW TABLES DEFINITIONS BY\n*  ---------------- SUBMITTING A JOB AS SHOWN BELOW :\n*        //.....    JOB ...(YOUR JOB CARD)...\n*        //             MSGLEVEL=(1,1),MSGCLASS=X,\n*        //             REGION=2M,TIME=(,30),NOTIFY=...,USER=...\n*        /*JOBPARM L=5\n*        //IKJ     EXEC PGM=IKJEFT01,DYNAMNBR=100\n*        //DYLO$IT   DD DSN=...(TABLES DS-NAME)...,DISP=SHR\n*        //SYSTSPRT  DD SYSOUT=*\n*        //SYSUDUMP  DD SYSOUT=*\n*        //SYSTSIN   DD *\n*          DYLON LIST IDV=INT1 DDT=SKEL1 ALT=ALIAS1 SCREEN\n*          DYLOFF LIST\n*          DYLON LIST IDV=INT2 DDT=SKEL2 ALT=ALIAS2 SCREEN\n*          DYLOFF LIST\n*          END\n*        /*\n         EJECT\n*-------------------------------------------------------------------*\n*                    P R E - R E Q U I S I T E S                    *\n*-------------------------------------------------------------------*\n         SPACE 1\n*  SYS1.PARMLIB MEMBERS :\n*  ----------------------\n*            1. IKJTSO00 : \"DYLON\" AND \"DYLOFF\" COMMANDS\n*                          AUTHORIZATION NEEDED.\n*            2. IEAAPF00 : LINK \"DYLON\" AND \"DYLOFF\" COMMANDS IN\n*                          AN APF-LIBRARY.\n*            3. LNKLST00 : SET LINK-LIBRARY IN LNKLST LOOKASIDE (LLA).\n         SPACE 1\n*-------------------------------------------------------------------*\n*              F U R T H E R     P A R T I C U L A R S              *\n*-------------------------------------------------------------------*\n         SPACE 1\n*        INFORMATION BELOW IS FOR THE INSTALLATION WIZARD ONLY :\n*        THE \"OWNDYLO\", \"TSODYLO\" AND \"SYSDYLO\" FLAGS (USED TO\n*        REMEMBER AND INDICATE WHICH AND HOW DATA-SETS HAVE BEEN\n*        ALLOCATED BY THIS COMMAND) ARE DEFINED IN THE RESERVED\n*        BYTE \"DSABRS01\" OF THE DATA-SET ASSOCIATION BLOCK (DSAB).\n         SPACE 1\n*-------------------------------------------------------------------*\n*         T A B L E S     L I B R A R Y     D A T A - S E T         *\n*-------------------------------------------------------------------*\n         SPACE 1\n*        USING THE MACRO @TLDSN (WHERE IP= MEANS INITIAL PREFIX AND\n*        RN= THE REST OF THE NAME) DEFINE BELOW THE DEFAULT TABLES\n*        LIBRARY DATA-SET NAME :\n         SPACE 1\n        @TLDSN IP=EUR1,RN=DYLO.DATA\n         SPACE 1\n* REMARKS : THE ABOVE DATA-SET IS THE DEFAULT ONE ALLOCATED AND\n* ---------    ACCESSED USING THE DD-NAME \"DYLO$IT\". IT WILL CONTAIN\n*              ALL THE \"AOS\", \"IDV\", \"DDT\", \"ALT\" AND \"ACS\" MEMBERS\n*              WHICH ARE OF GENERAL USE IN THE SYSTEM.\n*           ALSO, YOU MAY CHOOSE TO USE ANOTHER DATA-SET (I.E., FOR\n*              TEST OR ALTERNATE PURPOSES) IN TWO WAYS :\n*              1. CREATING A DATA-SET WITH A NAME EQUAL TO THE DEFAULT\n*                 ONE BUT WITH THE INITIAL PREFIX REPLACED BY YOUR\n*                 USER-ID OR YOUR GROUP (OBVIOUSLY THIS LAST WILL BE\n*                 ACCESSED BY ALL THE USERS IN THE GROUP), OR\n*              2. PRE-ALLOCATING IT WITH THE DD-NAME \"DYLO$IT\".\n*           = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n*           NOTE : ALL THE NEEDED MEMBERS ARE RETRIEVED ONLY IN THAT\n*           ------ LIBRARY.\n*           = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n         EJECT\n*-------------------------------------------------------------------*\n*              M E M B E R ( S )     S E L E C T I O N              *\n*-------------------------------------------------------------------*\n         SPACE 1\n* 1. \"AOS\" MEMBER SELECTION :\n*        SPECIFY : AUTO=... TO SELECT THE MEMBER NAMED \"...\",\n*                  AUTO TO SELECT THE DEFAULT MEMBER NAMED \"AOS\"\n*                       (THIS IS LIKE AUTO=AOS),\n*                  AUTO= IS LIKE NOT SPECIFIED, AND\n*                  NOT SPECIFIED MEANS NO OPERANDS SUPPLY PROCESS.\n* 2. \"IDV\" MEMBER SELECTION :\n*        SPECIFY : IDV=... TO SELECT THE MEMBER NAMED \"...\",\n*                  IDV TO SELECT THE DEFAULT MEMBER NAMED \"IDV\"\n*                       (THIS IS LIKE IDV=IDV),\n*                  IDV= IS LIKE NOT SPECIFIED, AND\n*                  NOT SPECIFIED MEANS USE OF INTERNAL PRE-DEFINED\n*                       IDV VALUES (SET BY ASSEMBLY VALUES BELOW).\n* 3. \"DDT\" MEMBER SELECTION :\n*        SPECIFY : DDT=... TO SELECT THE MEMBER NAMED \"...\",\n*                  DDT TO SELECT THE DEFAULT MEMBER NAMED \"DDT\"\n*                       (THIS IS LIKE DDT=DDT),\n*                  DDT= IS LIKE NOT SPECIFIED, AND\n*                  NOT SPECIFIED MEANS USE OF INTERNAL PRE-DEFINED\n*                       DDT TABLE (CREATED WITH ASSEMBLY MACROS @DD,\n*                       @DS AND @DSE).\n* 4. \"ALT\" MEMBER SELECTION :\n*        SPECIFY : ALT=... TO SELECT THE MEMBER NAMED \"...\",\n*                  ALT TO SELECT THE DEFAULT MEMBER NAMED \"ALT\"\n*                       (THIS IS LIKE ALT=ALT),\n*                  ALT= WILL BYPASS SELECTION (NO MEMBER NOR INTERNAL\n*                       PRE-DEFINED TABLE USE), AND\n*                  NOT SPECIFIED MEANS USE OF INTERNAL PRE-DEFINED\n*                       ALT TABLE (CREATED WITH ASSEMBLY MACRO @AL).\n* 5. \"ACS\" MEMBER SELECTION (ACTIVE ONLY WITH COMMAND=*) :\n*        SPECIFY : ACS=... TO SELECT THE MEMBER NAMED \"...\",\n*                  ACS TO SELECT THE DEFAULT MEMBER NAMED \"ACS\" (THIS\n*                       IS LIKE ACS=ACS),\n*                  ACS= WILL BYPASS ANY AUTOMATIC COMMANDS SELECTION\n*                       EVEN IF COMMAND=* IS SPECIFIED, AND\n*                  NOT SPECIFIED MEANS USE OF INTERNAL PRE-DEFINED\n*                       ACS TABLE (CREATED WITH ASSEMBLY MACRO @AC).\n         EJECT\n*-------------------------------------------------------------------*\n*               A U T O M A T I C     O P E R A N D S               *\n*         S E L E C T I O N     P R O C E S S     T A B L E         *\n*-------------------------------------------------------------------*\n         SPACE 1\n* MEMBER(S) AOS STATEMENTS DESCRIPTION :\n* ======================================\n* PURPOSE : AUTOMATIC OPERAND(S) SELECTION TO BE SUPPLIED WITH THE\n* --------- \"DYLON\" OR \"DYLOFF\" COMMAND.\n*           BY USE OF STATEMENTS, IT ALLOWS CONDITIONAL SELECTION.\n* CARD COLUMNS RANGE : COLUMNS 1-72. NEVER A KEYWORD OR AN OPERAND\n* -------------------- CAN BE SPLIT BETWEEN TWO SUCCESSIVE CARDS.\n*          KEYWORDS AND OPERANDS MUST BE SEPARATED EACH FROM THE\n*          OTHERS BY AT LEAST A BLANK CHARACTER. WHEN THE FIRST\n*          CHARACTER ENCOUNTERED IN A CARD, UNLESS BLANKS, IS AN\n*          ASTERISK (*), THEN THIS CARD IS HANDLED AS A COMMENT CARD.\n* SYNTAX : ALWAYS, A STATEMENT MUST START WITH A KEYWORD \"IF-ON\" OR\n* -------- \"IF-OFF\" AND END BY A KEYWORD \"O=\" (THIS IS MANDATORY).\n*          BE CAREFUL IN STATEMENTS SEQUENCE ORDER SO THEY WARRANT A\n*          HIGH COMPLEX CONDITION IS MET BEFORE A LESS ONE.\n* KEYWORD  OPERAND(S)  MEANING\n* -------  ----------  --------------------------------------------\n* IF-ON    NONE        START A CONDITIONAL SENTENCE FOR \"DYLON\".\n* IF-OFF   NONE        START A CONDITIONAL SENTENCE FOR \"DYLOFF\".\n* T=       S/L/B       TERMINAL TYPE : \"S\" FOR SCREEN OR \"L\" FOR LINE\n*                      OR \"B\" FOR TSO BACKGROUND RUN.\n* U=       USER-ID     LIST OF USER-ID'S NAMES MATCHING CONDITIONS.\n* G=       GROUP       LIST OF GROUP'S NAMES MATCHING CONDITIONS.\n* P=       PROCEDURE   LIST OF PROCEDURE'S NAMES MATCHING CONDITIONS.\n* O=       OPERAND(S)  THE DESIRED OPERAND(S) TO BE SUPPLIED. THIS\n*                      IS THE COPY OF THE COMMAND OPERANDS YOU WANT,\n*                      EXACTLY AS THEY WOULD BE KEYBOARD TYPED IN\n*                      (UNLESS FOR THE C= OPERAND AS SHOWN LATER).\n*          KEYWORDS    ALIASES\n*          ----------  -----------------------------------------------\n*          T=          TERM=, TERMINAL=\n*          U=          USER=, USERS=\n*          G=          GROUP=, GROUPS=\n*          P=          PROC=, PROCEDURE=, PROCS=, PROCEDURES=\n*          O=          OP=, OPS=, OPND=, OPNDS=, OPERAND=, OPERANDS=\n*          OPERANDS    ALIASES\n*          ----------  -----------------------------------------------\n*          S           SCREEN, D, DISPLAY\n*          L           LINE, LINES\n*          B           BACK, BACKGROUND (EQUIVALENT TO \"L\")\n         EJECT\n* HOW TO CODE KEYWORDS AND OPERANDS :\n* -----------------------------------\n*      1. WHEN CODING U=, G= AND P= OPERAND(S), THE FOLLOWING RULES\n*         MUST BE APPLIED :\n*           1. A SINGLE NAME MAY BE CODED P= ... AS WELL AS P= ( ... )\n*           2. A LIST OF NAMES IS ALWAYS CODED G= ( ... ... ... )\n*         YOU MAY ALSO SPECIFY A SHORTER CHARACTERS STRING WHICH WILL\n*         BE USED AS MATCH TEST ON THE INITIAL CHARACTERS OF THE\n*         CURRENT USER-ID, GROUP OR PROCEDURE NAME. TO DO IT, JUST\n*         PREFIX THE CHARACTERS STRING BY A PERIOD.\n*           I.E. : U= .SYS WHICH MEANS ALL USER-ID'S NAMES STARTING\n*           WITH THE \"SYS\" CHARACTERS (I.E. : SYSTSO1, SYSTSO2,\n*           SYSIBM1 AND SYSIBM2 ARE ALL MATCHING THE ABOVE CONDITION).\n*      2. KEYWORDS AND OPERANDS AS WELL AS MULTIPLE COMMANDS MAY BE\n*         CODED IN SEPARATE CARDS, AS I.E. :\n*           IF-ON\n*                  TERMINAL= S\n*                            USERS= ( .SYS MASTER )\n*                                      OPERANDS= NOLIST\n*                                                ISPF\n*                                                COMMANDS= ' TIME ;\n*                                                            ISPF '\n         EJECT\n*-------------------------------------------------------------------*\n*                 D E F A U L T     I N T E R N A L                 *\n*                D E F I N I T I O N S     T A B L E                *\n*-------------------------------------------------------------------*\n         SPACE 1\n* MEMBER(S) IDV KEYWORDS DESCRIPTION :\n* ====================================\n*    CARD COLUMNS RANGE : COLUMNS 1-72.\n*    -------------------- KEYWORD=VALUE MUST RESIDE ENTIRELY IN A CARD.\n*                         AS SOON AS AN ASTERISK IS ENCOUNTERED, IT\n*                         MEANS A COMMENT IN THE REST OF THE CARD.\n*    REMARK : BY ASSEMBLY, ALL KEYWORD=VALUE'S ARE ASSIGNED A DEFAULT\n*   -------   VALUE BELOW, SO YOU MAY OMIT THOSE YOU NEED NOT CHANGE\n*             IN THE IDV MEMBER(S).\n         SPACE 1\n*------- LOCAL DEFINITIONS -----------------------------------------*\n         SPACE 1\n*        VOLUME SERIAL NUMBER USED BY DMS TO ARCHIVE DATA-SETS,\n*        AND THUS, USED TO FORCE THEIR RESTORE :\n&DMSVOL  SETC  'SHADOW'       DMSVOL=SHADOW\n         SPACE 1\n*        DD-NAME'S LIBRARIES CONCATENATIONS INFO'S TABLE AREA\n*        SPACE LENGTH :\n&MXLCIT  SETC  '10K'          MXLCIT=10K\n         SPACE 1\n*        USER-ID'S ALIASES PROCESS TABLE AREA SPACE LENGTH :\n&MXALUS  SETC  '512'          MXALUS=512\n         SPACE 1\n*        GROUPS ALIASES PROCESS TABLE AREA SPACE LENGTH :\n&MXALGR  SETC  '512'          MXALGR=512\n         SPACE 1\n*------- SPECIAL PROCESSINGS DEFINITIONS ---------------------------*\n         SPACE 1\n* DS/SP=P : ALLOCATION OF NEW ISPF PROFILE\n*              (ALSO USED TO ALLOCATE MFTTLIB DD OF MFTS)\n*              EQUIVALENT JCL ALLOCATION :\n*              //ISPPROF  DD UNIT=&PU,VOL=SER=&PV,\n*              //            DSN=...,SPACE=(&PA,(&PP,&PS,&PD)),\n*              //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=&PB),\n*              //            DISP=(NEW,CATLG)\n*        NOTE : DSN=... (DS=), RECFM=F AND LRECL=80 MUST BE DEFINED IN\n*               MEMBERS DDT OR @DD MACROS (BLKSIZE IS DEFINED BELOW).\n&PU      SETC  'DISK'         PU=DISK   * UNIT\n&PV      SETC  'USER00'       PV=USER00 * VOLUME SERIAL NUMBER\n&PA      SETC   'TRK'         PA=TRK    * SPACE ALLOCATION (CYL OR TRK)\n&PP      SETC   '1'           PP=1      * PRIMARY SPACE\n&PS      SETC   '1'           PS=1      * SECONDARY SPACE\n&PD      SETC   '3'           PD=3      * DIRECTORY BLOCKS\n&PB      SETC   '3120'        PB=3120   * BLOCK-SIZE\n         EJECT\n* DD/SP=W : ALLOCATION OF ISPF WORK FILE\n*              EQUIVALENT JCL ALLOCATION :\n*              //ISPWORK  DD UNIT=&WU,SPACE=(&WA,(&WP,&WS,&WD)),\n*              //            DCB=&WR\n&WU      SETC  'VIO'          WU=VIO    * UNIT\n&WA      SETC  'CYL'          WA=CYL    * SPACE ALLOCATION (CYL OR TRK)\n&WP      SETC  '1'            WP=1      * PRIMARY SPACE\n&WS      SETC  '2'            WS=2      * SECONDARY SPACE\n&WD      SETC  '5'            WD=5      * DIRECTORY BLOCKS\n&WR      SETC  'EUR1.TABLES.DATA'\n         SPACE 1\n*                             WR=EUR1.TABLES.DATA\n*                                       * DCB REFERENCE DATA-SET NAME\n* DD/SP=C - ALLOCATION OF ISPF CONTROL FILE\n*              EQUIVALENT JCL ALLOCATION :\n*              //ISPCTL.. DD UNIT=&CU,SPACE=(&CA,(&CP,&CS)),\n*              //            DCB=(RECFM=FB,BLKSIZE=&CB,LRECL=80)\n*        NOTE : RECFM=F AND LRECL=80 MUST BE DEFINED IN MEMBERS\n*               DDT OR @DD MACROS (BLKSIZE IS DEFINED BELOW).\n&CU      SETC  'SYSDA'        CU=SYSDA  * UNIT\n&CA      SETC  'CYL'          CA=CYL    * SPACE ALLOCATION (CYL OR TRK)\n&CP      SETC  '1'            CP=1      * PRIMARY SPACE\n&CS      SETC  '1'            CS=1      * SECONDARY SPACE\n&CB      SETC  '6080'         CB=6080   * BLOCK-SIZE\n         SPACE 1\n* DD/SP=E : ALLOCATION OF TSO EDIT WORK FILE\n*              EQUIVALENT JCL ALLOCATION :\n*              //SYSEDIT  DD UNIT=&EU,DSN=&EDIT,\n*              //            SPACE=(&EA,(&EP,&ES))\n&EU      SETC  'SYSDA'        EU=SYSDA  * UNIT\n&EA      SETC  '6121'         EA=6121   * BLOCKS ALLOCATION\n&EP      SETC  '20'           EP=20     * PRIMARY SPACE\n&ES      SETC  '10'           ES=10     * SECONDARY SPACE\n         EJECT\n*-------------------------------------------------------------------*\n*               D D N A M E ' S     L I B R A R I E S               *\n*     C O N C A T E N A T I O N S     I N F O ' S     T A B L E     *\n*-------------------------------------------------------------------*\n         SPACE 1\n* MEMBER(S) DDT STATEMENTS DESCRIPTION :\n* ======================================\n*    CARD COLUMNS RANGE : COLUMNS 1-72.\n*    -------------------- AN OPERAND MUST RESIDE ENTIRELY IN A CARD.\n*                         AN ASTERISK IN COLUMN 1 MEANS A COMMENT.\n* 1. DD : DEFINE A DD-NAME TO WHICH ONE, AT LEAST, OR MORE LIBRARIES\n* ------- MUST BE DYNAMICALLY AND PERMANENTLY ALLOCATED.\n*    SYNTAX :  DD=...  ID=...  DSORG=...  RECFM=...  LRECL=...  SP=...\n*    OPERAND  MEANING                                       MAX.L.\n*    -------  --------------------------------------------  ------\n*    DD=      DD-NAME (JOBCAT, STEPCAT, JOBLIB AND          CL8\n*             STEPLIB ARE OBVIOUSLY NOT SUPPORTED).\n*    ID=      DD PURPOSE SHORT DESCRIPTION (MUST BE         CL20\n*             ENCLOSED BETWEEN DOUBLE-QUOTES (\") IF\n*             IT CONTAINS ONE OR MORE BLANKS).\n*    DSORG=   DATA-SET(S) ORGANIZATION : PS, PO OR DA.\n*             WHEN DA, RECFM AND LRECL ARE NOT USED.\n*    RECFM=   DATA-SET(S) RECORD FORMAT : F, V OR U.\n*    LRECL=   DATA-SET(S) RECORD LENGTH (USED ONLY\n*             WITH RECFM=F OR V).\n*    SP=      DD-NAME SPECIAL PROCESSING REQUEST.\n*             VALID VALUE : C = CONTROL\n*                           D = DUMMY\n*                           E = EDIT\n*                           T = TERMINAL\n*                           W = WORK\n* 2. DS : DEFINE A DATA-SET LIBRARY TO BE ALLOCATED UNDER THE DD-NAME\n* ------- PREVIOUSLY DECLARED BY A DD STATEMENT.\n*    SYNTAX :  DS=...  TYPE=...  OPT=...  SP=...\n*    OPERAND  MEANING                                       MAX.L.\n*    -------  --------------------------------------------  ------\n*    DS=      DATA-SET NAME, INTO WHICH YOU MAY USE         CL44\n*             THE FOLLOWING SPECIAL CODING :\n*             <P> : CURRENT DSNAME'S PREFIX REPLACEMENT\n*             <U> : CURRENT RACF USER-ID REPLACEMENT\n*             <G> : CURRENT RACF GROUP-NAME REPLACEMENT\n*             IF OMITTED : TEMPORARY DATA-SET ASSUMED\n*             (CODE DS= WHEN ANOTHER OPERAND SPECIFIED).\n*    TYPE=    DATA-SET PRODUCT(S) OR SPECIAL USES.\n*             SEE \"DATA-SETS DEFINITIONS\" (INDICATORS\n*             BYTES UNDER THE CONTROL OF \"DYLO\").\n*    OPT=     DATA-SET PROCESSING REQUIREMENT. SEE\n*             \"DATA-SETS DEFINITIONS\" (FLAG BYTE UNDER\n*             THE CONTROL OF \"DYLO\").\n*    SP=      DATA-SET SPECIAL PROCESSING REQUEST.\n*             VALID VALUE : P = PROFILE\n         EJECT\n*-------------------------------------------------------------------*\n*         A L I A S ( E S )     P R O C E S S     T A B L E         *\n*-------------------------------------------------------------------*\n         SPACE 1\n* MEMBER(S) ALT STATEMENTS DESCRIPTION :\n* ======================================\n* ALIAS : DEFINE AN ALIAS NAME TO USE AS REPLACEMENT FOR USER <U> OR\n* ------- GROUP <G> DATA-SETS NAMES WHEN TRYING TO ALLOCATE THEM TO\n*         SPECIFIC DD-NAMES (I.E., IF A DATA-SET <U>... OR <G>... IS\n*         NOT FOUND WHEN DOING ALLOCATION, THEN A SEARCH IS DONE TO\n*         FIND THE ALIAS... DATA-SET ONLY WHEN THE DD-NAME MATCHES\n*         IN THE CORRESPONDING ALIAS TABLE ENTRY).\n*         THE UNLESS OPERAND ALLOWS TO PREVENT THIS PROCESS WHEN\n*              1. A USER (USER-ID TABLE) IS CONNECTED TO ANY RACF\n*                 GROUP(S) WHICH MUST NOT ACCESS THE ALIAS NAME, OR\n*              2. A GROUP (GROUP TABLE) CONTAINS ANY RACF USER(S)\n*                 WHO MUST NOT ACCESS THE ALIAS NAME.\n*    SYNTAX :  USER= OR GROUP=  NAME ALIAS\n*    --------           DDN=  ...  ...  ...\n*                       UNLESS=  ...  ...  ...\n*    CARD COLUMNS RANGE : COLUMNS 1-72.\n*                         AN ASTERISK IN COLUMN 1 MEANS A COMMENT.\n*    OPERAND  MEANING                                       MAX.L.\n*    -------  --------------------------------------------  ------\n*    NAME     THE USER-ID (USER=) OR GROUP (GROUP=) NAME.   CL8\n*    ALIAS    THE ALIAS NAME.                               CL8\n*    DDN=     THE DD-NAME(S) TO WHICH THE PROCESS MUST      CL8\n*             BE APPLIED.\n*             THE LIST MAY CONTINUE ON MORE CARDS.\n*    UNLESS=  THE GROUP NAME(S), WHEN USER-ID TABLE,        CL8\n*             OR USER-ID NAME(S), WHEN GROUP TABLE, FOR\n*             WHICH THE PROCESS MUST NOT BE APPLIED.\n*             IF SPECIFIED, THIS OPERAND MUST FOLLOWS\n*             THE DDN= OPERAND.\n*             THE LIST MAY CONTINUE ON MORE CARDS.\n         EJECT\n*-------------------------------------------------------------------*\n*               A U T O M A T I C     C O M M A N D S               *\n*         S E L E C T I O N     P R O C E S S     T A B L E         *\n*-------------------------------------------------------------------*\n         SPACE 1\n* MEMBER(S) ACS STATEMENTS DESCRIPTION :\n* ======================================\n* PURPOSE : AUTOMATIC COMMAND(S) SELECTION TO BE EXECUTED WHEN THE\n* --------- \"DYLON\" OR \"DYLOFF\" PROCESS IS SUCCESSFULLY COMPLETE.\n*           BY USE OF STATEMENTS, IT ALLOWS CONDITIONAL SELECTION.\n* CARD COLUMNS RANGE : COLUMNS 1-72. NEVER A KEYWORD OR AN OPERAND\n* -------------------- CAN BE SPLIT BETWEEN TWO SUCCESSIVE CARDS.\n*          KEYWORDS AND OPERANDS MUST BE SEPARATED EACH FROM THE\n*          OTHERS BY AT LEAST A BLANK CHARACTER. WHEN THE FIRST\n*          CHARACTER ENCOUNTERED IN A CARD, UNLESS BLANKS, IS AN\n*          ASTERISK (*), THEN THIS CARD IS HANDLED AS A COMMENT CARD.\n* SYNTAX : ALWAYS, A STATEMENT MUST START WITH A KEYWORD \"IF-ON\" OR\n* -------- \"IF-OFF\" AND END BY A KEYWORD \"C=\" (THIS IS MANDATORY).\n*          BE CAREFUL IN STATEMENTS SEQUENCE ORDER SO THEY WARRANT A\n*          HIGH COMPLEX CONDITION IS MET BEFORE A LESS ONE.\n* KEYWORD  OPERAND(S)  MEANING\n* -------  ----------  --------------------------------------------\n* IF-ON    NONE        START A CONDITIONAL SENTENCE FOR \"DYLON\".\n* IF-OFF   NONE        START A CONDITIONAL SENTENCE FOR \"DYLOFF\".\n* T=       S/L/B       TERMINAL TYPE : \"S\" FOR SCREEN OR \"L\" FOR LINE\n*                      OR \"B\" FOR TSO BACKGROUND RUN.\n* U=       USER-ID     LIST OF USER-ID'S NAMES MATCHING CONDITIONS.\n* G=       GROUP       LIST OF GROUP'S NAMES MATCHING CONDITIONS.\n* P=       PROCEDURE   LIST OF PROCEDURE'S NAMES MATCHING CONDITIONS.\n* S=       TYPE        LIST OF TYPE'S NAMES MATCHING CONDITIONS (VALID\n*                      ONLY IN \"IF-ON\" SENTENCE).\n* C=       COMMAND(S)  THE DESIRED COMMAND(S). THE STRING MUST BE\n*                      QUOTED IF IT INCLUDES ONE OR MORE BLANKS AND/OR\n*                      QUOTES (A QUOTE IN THE STRING MUST BE DOUBLED),\n*                      AND MULTIPLE COMMANDS MUST BE SEPARATED EACH\n*                      FROM THE OTHER BY THE SEMI-COLON DELIMITER.\n*          KEYWORDS    ALIASES\n*          ----------  -----------------------------------------\n*          T=          TERM=, TERMINAL=\n*          U=          USER=, USERS=\n*          G=          GROUP=, GROUPS=\n*          P=          PROC=, PROCEDURE=, PROCS=, PROCEDURES=\n*          S=          SEL=, SELECT=\n*          C=          CMD=, CMDS=, COMMAND=, COMMANDS=\n*          OPERANDS    ALIASES\n*          ----------  -----------------------------------------\n*          S           SCREEN, D, DISPLAY\n*          L           LINE, LINES\n*          B           BACK, BACKGROUND (EQUIVALENT TO \"L\")\n         EJECT\n* HOW TO CODE KEYWORDS AND OPERANDS :\n* -----------------------------------\n*      1. WHEN CODING U=, G= AND P= OPERAND(S), THE FOLLOWING\n*         RULES MUST BE APPLIED :\n*           1. A SINGLE NAME MAY BE CODED P= ... AS WELL AS P= ( ... )\n*           2. A LIST OF NAMES IS ALWAYS CODED G= ( ... ... ... )\n*         YOU MAY ALSO SPECIFY A SHORTER CHARACTERS STRING WHICH WILL\n*         BE USED AS MATCH TEST ON THE INITIAL CHARACTERS OF THE\n*         CURRENT USER-ID, GROUP OR PROCEDURE NAME. TO DO IT, JUST\n*         PREFIX THE CHARACTERS STRING BY A PERIOD.\n*           I.E. : U= .SYS WHICH MEANS ALL USER-ID'S NAMES STARTING\n*           WITH THE \"SYS\" CHARACTERS (I.E. : SYSTSO1, SYSTSO2,\n*           SYSIBM1 AND SYSIBM2 ARE ALL MATCHING THE ABOVE CONDITION).\n*      2. THE SAME RULES APPLY TO S= OPERAND(S) CODING UNLESS YOU MAY\n*         NOT DEFINE A MATCH TEST (CHARACTERS STRING PREFIXED BY A\n*         PERIOD). THE TYPE'S NAMES ARE THE DATA-SET PRODUCT(S)\n*         OR SPECIAL USES, AND ALL THOSE IN THE LIST ARE TESTED\n*         TO GET THE CONDITION MET. SEE \"DATA-SETS DEFINITIONS\"\n*         (INDICATORS BYTES UNDER THE CONTROL OF \"DYLO\").\n*      3. KEYWORDS AND OPERANDS AS WELL AS MULTIPLE COMMANDS MAY BE\n*         CODED IN SEPARATE CARDS, AS I.E. :\n*           IF-ON\n*                  TERMINAL= S\n*                            USERS= ( .SYS\n*                                     MASTER )\n*                                      SELECT= ( SPF\n*                                                ADA )\n*                                                COMMANDS= ' TIME ;\n*                                                            ISPF '\n         EJECT\n*-------------------------------------------------------------------*\n*            D A T A - S E T S     D E F I N I T I O N S            *\n*-------------------------------------------------------------------*\n         SPACE 1\n        PRINT  &PRS\n* MACRO USE :  @DEFI  N,I1,I2,I3,I4,I5,I6,I7,I8\n* -----------  N = THE BYTE NUMBER (1 ,2 OR 3)\n*              I1-I8 = A LIST OF 1 UP TO 8 INDICATORS NAMES (ONLY 1\n*                      UP TO 4 CHARACTERS LONG ACCEPTED).\n         SPACE 1\n* TYPE=  HERE FOLLOWS THE BITS FLAGS DEFINITIONS (INDICATORS BYTES\n*        UNDER THE CONTROL OF \"DYLO\") FOR :\n         SPACE 1\n*        1. PRODUCTS :\n        @DEFI  1,                  INDICATORS - BYTE 1                 X\n               SPF,                     ISPF                           X\n               IFS,                     INFO SYSTEM                    X\n               SMP,                     SMP                            X\n               ADA,                     ADABAS                         X\n               MFT                      MFTS\n         SPACE 1\n*        2. SPECIAL DATA-SET'S STATUS :\n        @DEFI  2,                  INDICATORS - BYTE 2                 X\n               SYS                      SYSTEM USER\n         SPACE 1\n*        3. SPECIAL USER'S STATUS :\n        @DEFI  3,                  INDICATORS - BYTE 3                 X\n               IFM,                     INFO-SYSTEM MANAGER            X\n               DMS                      DMS MANAGER\n         SPACE 1\n***********************************************************************\n*--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ---*\n*---           I F     Y O U     D O     C H A N G E S             ---*\n*---                  O R     A D D I T I O N S                    ---*\n*--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ---*\n* REMARKS : -- ANY CHANGES IN ABOVE DEFINITIONS MAY INVOLVE ALSO :    *\n* =========    1. THE LOGIC CODED IN THE MEMBER \"DYLOUSD\" (USER'S     *\n*                 SELECTIONS - DEFAULTS), AND                         *\n*              2. THE OPERANDS SCAN IN THE MEMBER \"DYLOSCO\", THEN     *\n*              EVENTUAL ASSEMBLY ERRORS ALLOW YOU TO ADJUST CODE.     *\n*--- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ---*\n***********************************************************************\n         EJECT\n*-------------------------------------------------------------------*\n*             A S S E M B L Y     D E F I N I T I O N S             *\n*-------------------------------------------------------------------*\n         SPACE 1\n        $DEFREG\n         SPACE 1\n        PRINT  OFF\n        @CHK   ,                   CHECK DEFAULTS VALUES\n        @DEFF  M,                       MANDATORY                      X\n               X                        EXCLUSIVE\n        @VCOM  ,\n        PRINT  ON\n        PRINT  &PRF\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - -          C O M M U N I C A T I O N S            - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n*------- VERIFY AND SET SENIOR SYSTEM PROGRAMMER(S).\n*        A SINGLE OR A LIST OF USER-ID(S) AND/OR GROUP(S) NAME(S)\n*        MAY BE GIVEN USING THE @WIZ MACRO AS SHOWN BELOW :\n*              @WIZ  UUU <= A SINGLE USER\n*              @WIZ  ,GGG <= A SINGLE GROUP\n*              @WIZ  UUU,GGG <= A SINGLE USER AND A SINGLE GROUP\n*              @WIZ  (UUU,UUU,UUU) <= A USERS LIST\n*              @WIZ  ,(GGG,GGG,GGG) <= A GROUPS LIST\n*              @WIZ  (UUU,UUU,UUU),GGG <= A USERS LIST AND A SINGLE\n*                                                            GROUP\n*              @WIZ  UUU,(GGG,GGG,GGG) <= A SINGLE USER AND A GROUPS\n*                                                             LIST\n*              @WIZ  (UUU,UUU,UUU),(GGG,GGG,GGG) <= A USERS LIST AND\n*                                                   A GROUPS LIST\n         SPACE 1\n        @WIZ   SYSPAJA\n         EJECT\n        PRINT  OFF\n         CNOP  0,4\n         USING *,R8\n         USING WKAREA,R10\nAUSD     STM   R14,R12,12(R13)\n         LR    R8,R15\n         LR    R10,R1\n        PRINT  ON\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*       U S E R ' S     S E L E C T I O N S - D E F A U L T S       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n* YOU MAY PROGRAM YOUR NEEDS USING THE FOLLOWING TWO MACROS :\n* ===========================================================\n* 1. @IF MACRO, SYNTAX IS :\n*             ...  @IF  KEYWORD=(... <- KEYWORD NAME\n*                                U), <- UNSPECIFIED OPTION\n*                                N   <- NO OPTION\n*                                S   <- OPTION\n*                  OR : USER=...,\n*                       USER=(...,...,...),\n*                  OR : GROUP=...,\n*                       GROUP=(...,...,...),\n*                  OR : TERMINAL=S, <- SCREEN\n*                                L  <- LINE\n*                                B  <- BACKGROUND\n*                       GOTO=..., <- BRANCH IF EQUAL\n*                       ELSE=...  <- BRANCH IF NOT EQUAL\n* 2. @SETI MACRO, SYNTAX IS :\n*             ...  @SETI  ..., <- TARGET FIELD\n*                         ..., <- INDICATOR NAME\n*                         GOTO=... <- UNCONDITIONAL BRANCH\n* REMARK : TO END CORRECTLY PROCESSING, BRANCH TO LABEL \"USDOK\", AND,\n*          TO SIGNAL AN ERROR, BRANCH TO LABEL \"USDERR\".\n* MANDATORY LABELS USE :\n* ======================\n*        \"USDOK\"  : BRANCH WHEN PROCESS TERMINATES CORRECTLY\n*        \"USDERR\" : BRANCH WHEN AN ERROR IS DETECTED\n*        THEN USE LABELS FROM \"TUSD0\" UP TO \"TUSD999\" FOR YOUR NEEDS\n         SPACE 1\n        PRINT  &PRF\n        COPY   DYLOUSD             <=== SELECTIONS/DEFAULTS ==========\n        PRINT  OFF\n         SPACE 1\nUSDERR   LA    R15,4               SET RC=4 (ERROR)\n         B     USDX\nUSDOK    XR    R15,R15             SET RC=0 (OK)\nUSDX     L     R14,12(R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         DROP  R8\n        LTORG\n         CNOP  0,4\n         USING *,R8\nASOK     STM   R14,R12,12(R13)\n         LR    R8,R15\n         LR    R10,R1\n         LTR   R0,R0\n         BP    OPX0\n         BZ    OPY0\n         B     OPZ0\n        PRINT  ON\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                    S C A N     O P E R A N D S                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n* YOU MAY PROGRAM YOUR NEEDS USING THE FOLLOWING FOUR MACROS :\n* ============================================================\n* 1. @IF MACRO, SYNTAX IS :\n*             ...  @IF  KEYWORD=(... <- KEYWORD NAME\n*                                U), <- UNSPECIFIED OPTION\n*                                N   <- NO OPTION\n*                                S   <- OPTION\n*                -----------------------------------------\n*                ( OR : USER=...,                        )\n*                (      USER=(...,...,...),              )\n*                ( OR : GROUP=...,                       )-> NOT\n*                (      GROUP=(...,...,...),             )   USED\n*                ( OR : TERMINAL=S, <- SCREEN            )   HERE\n*                (               L  <- LINE              )\n*                (               B  <- BACKGROUND        )\n*                -----------------------------------------\n*                       GOTO=..., <- BRANCH IF EQUAL\n*                       ELSE=...  <- BRANCH IF NOT EQUAL\n* 2. @CHKO MACRO, SYNTAX IS :\n*             ...  @CHKO  ...,...,..., <- KEYWORDS NAMES LIST\n*                         MATCH=...,   <- BRANCH IF EQUAL\n*                         NOMATCH=...  <- BRANCH IF NOT EQUAL\n* 3. @SETKW MACRO, SYNTAX IS :\n*             ...  @SETKW  ..., <- KEYWORD NAME\n*                          ..., <- U = UNSPECIFIED OPTION\n*                                  N = NO OPTION\n*                                  S = OPTION\n*                          GOTO=... <- UNCONDITIONAL BRANCH\n* 4. @SETI MACRO, SYNTAX IS :\n*             ...  @SETI  ..., <- TARGET FIELD\n*                         ..., <- INDICATOR NAME\n*                         GOTO=... <- UNCONDITIONAL BRANCH\n* MANDATORY LABELS USE :\n* ======================\n*        \"OPDUPL\" : BRANCH WHEN A KEYWORD OPERAND IS TWICE DETECTED\n*        \"OPNEXT\" : BRANCH WHEN A KEYWORD OPERAND IS PROCESSED\n*        \"OPEND\"  : BRANCH WHEN IT IS NONE OF THE POSSIBLE KEYWORDS\n         SPACE 1\n        PRINT  &PRF\n        COPY   DYLOSCO             <=== SCAN OPERANDS ================\n        PRINT  OFF\n         SPACE 1\nOPEND    LA    R15,8               SET RC=8 (END/CONTINUE)\n         B     OPSX\nOPDUPL   LA    R15,4               SET RC=4 (ERROR/DUPLICATED)\n         B     OPSX\nOPNEXT   XR    R15,R15             SET RC=0 (NEXT/CONTINUE)\nOPSX     L     R14,12(R13)\n         LM    R0,R2,20(R13)\n         LM    R8,R12,52(R13)\n         BR    R14\n         DROP  R8,R10\n        LTORG\n        PRINT  ON\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*     I N T E R N A L     D D N A M E ' S     L I B R A R I E S     *\n*     C O N C A T E N A T I O N S     I N F O ' S     T A B L E     *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n* MACROS USE DESCRIPTION :\n* ========================\n*\n* 1. @DD :     DEFINES A DD-NAME TO WHICH ONE, AT LEAST, OR MORE\n* --------     LIBRARIES MUST BE DYNAMICALLY AND PERMANENTLY ALLOCATED.\n*              SYNTAX : DDN  @DD  ID=,DSORG=,RECFM=,LRECL=,SP=\n*              --------\n*              OPERAND  MEANING                                 MAX.L.\n*              -------  --------------------------------------  ------\n*              DDN      DD-NAME.                                CL8\n*              ID       DD PURPOSE SHORT DESCRIPTION            CL20\n*              DSORG    DATA-SET(S) ORGANIZATION : PS, PO OR\n*                       DA. WHEN DA, RECFM AND LRECL ARE NOT\n*                       USED.\n*              RECFM    DATA-SET(S) RECORD FORMAT : F, V OR U.\n*              LRECL    DATA-SET(S) RECORD LENGTH (USED ONLY\n*                       WITH RECFM=F OR V).\n*              SP       DD-NAME SPECIAL PROCESSING REQUEST.     CL1\n*                       VALID VALUE : C = CONTROL\n*                                     D = DUMMY\n*                                     E = EDIT\n*                                     T = TERMINAL\n*                                     W = WORK\n*\n* 2. @DS :     DEFINES A DATA-SET LIBRARY TO BE ALLOCATED UNDER THE\n* --------     DD-NAME PREVIOUSLY DECLARED USING A @DD MACRO.\n*              SYNTAX : ...  @DS  DSN,TYPE=,OPT=,SP=\n*              -------- (WHERE, IF YOU NEED IT, ... MAY BE A LABEL)\n*              OPERAND  MEANING                                 MAX.L.\n*              -------  --------------------------------------  ------\n*              DSN      DATA-SET NAME, INTO WHICH YOU MAY USE   CL44\n*                       THE FOLLOWING SPECIAL CODING :\n*                       <P> = CURRENT DSNAME'S PREFIX.\n*                       <U> = CURRENT RACF USER-ID.\n*                       <G> = CURRENT RACF GROUP-NAME.\n*                       IF OMITTED = TEMPORARY DATA-SET.\n*              TYPE     DATA-SET PRODUCT(S) OR SPECIAL USES.\n*                       SEE \"DATA-SETS DEFINITIONS\"(INDICATORS\n*                       BYTES UNDER THE CONTROL OF \"DYLO\").\n*              OPT      DATA-SET PROCESSING REQUIREMENT. SEE\n*                       \"DATA-SETS DEFINITIONS\"(FLAG BYTE UNDER\n*                       THE CONTROL OF \"DYLO\").\n*              SP       DATA-SET SPECIAL PROCESSING REQUEST.    CL1\n*                       VALID VALUE : P = PROFILE\n*\n* 3. @DSE :    MARKS THE END OF DATA-SET(S) LIST.\n* ---------    MACRO HAS NO OPERANDS.\n*              SYNTAX : ...  @DSE\n*              -------- (WHERE, IF YOU NEED IT, ... MAY BE A LABEL)\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*        I N T E R N A L     L I B R A R I E S     T A B L E        *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        PRINT  OFF\n         @DDTS ,                   START OF TABLE\n        PRINT  ON\n        PRINT  &PRS\n        COPY   DYLODDT             <=== LIBRARIES TABLE ==============\n        PRINT  OFF\n         @DDTE ,                   END OF TABLE ADDRESS\n        PRINT  ON\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*               I N T E R N A L     A L I A S ( E S )               *\n*                    P R O C E S S     T A B L E                    *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n* MACRO USE DESCRIPTION :\n* =======================\n*\n* @AL :        DEFINES AN ALIAS NAME TO USE AS REPLACEMENT FOR USER\n* -----        <U> OR GROUP <G> DATA-SETS NAMES WHEN TRYING TO ALLOCATE\n*              THEM TO SPECIFIC DD-NAMES (I.E., IF A DATA-SET <U>... OR\n*              <G>... IS NOT FOUND WHEN DOING ALLOCATION, THEN A SEARCH\n*              IS DONE TO FIND THE ALIAS... DATA-SET ONLY WHEN THE\n*              DD-NAME MATCHES IN THE CORRESPONDING ALIAS TABLE ENTRY).\n*              THE UNLESS OPERAND ALLOWS TO PREVENT THIS PROCESS WHEN\n*              1. A USER (USER-ID TABLE) IS CONNECTED TO ANY RACF\n*                 GROUP(S) WHICH MUST NOT ACCESS THE ALIAS NAME, OR\n*              2. A GROUP (GROUP TABLE) CONTAINS ANY RACF USER(S)\n*                 WHO MUST NOT ACCESS THE ALIAS NAME.\n*              SYNTAX : NAME @AL  ALIAS,DDN=\n*              --------                 DDN=(...,...,...)\n*                                       UNLESS=\n*                                       UNLESS=(...,...,...)\n*              OPERAND  MEANING                                 MAX.L.\n*              -------  --------------------------------------  ------\n*              NAME     THE NAME                                CL8\n*              ALIAS    THE ALIAS NAME                          CL8\n*              DDN      THE DD-NAME(S) TO WHICH THE PROCESS     CL8\n*                       MUST BE APPLIED\n*              UNLESS   THE GROUP NAME(S), WHEN USER-ID TABLE,  CL8\n*                       OR USER-ID NAME(S), WHEN GROUP TABLE,\n*                       FOR WHICH THE PROCESS MUST NOT BE\n*                       APPLIED.\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*       I N T E R N A L     U S E R - I D ( S )     T A B L E       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        PRINT  OFF\nUSERS    @ALS  ,                   USER-ID TABLE\n        PRINT  ON\n        PRINT  &PRS\n        COPY   DYLOUAL             <=== USERS TABLE ==================\n        PRINT  OFF\n         @ALE  ,                   END OF TABLE\n        PRINT  ON\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*         I N T E R N A L     G R O U P ( S )     T A B L E         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        PRINT  OFF\nGROUPS   @ALS  ,                   GROUP TABLE\n        PRINT  ON\n        PRINT  &PRS\n        COPY   DYLOGAL             <=== GROUPS TABLE =================\n        PRINT  OFF\n         @ALE  ,                   END OF TABLE\n        PRINT  ON\n         EJECT\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*     I N T E R N A L     A U T O M A T I C     C O M M A N D S     *\n*         S E L E C T I O N     P R O C E S S     T A B L E         *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n* MACRO USE DESCRIPTION :\n* =======================\n*\n* @AC :        DEFINES AUTOMATIC COMMAND(S) SELECTION TO BE EXECUTED\n* -----        WHEN THE \"DYLON\" OR \"DYLOFF\" PROCESS IS SUCCESSFULLY\n*              COMPLETE. THIS MACRO IS USED TO WRITE A SINGLE AND\n*              CONTINUOUS STRING WITH ALL THE DESIRED STATEMENTS.\n*              SYNTAX : @AC  '... STATEMENTS TEXT ...'\n*              -------- KEYWORDS AND OPERANDS MUST BE SEPARATED EACH\n*              EACH FROM THE OTHERS BY AT LEAST A BLANK CHARACTER.\n*              ALWAYS, A STATEMENT MUST START WITH A KEYWORD \"IF-ON\" OR\n*              \"IF-OFF\" AND END BY A KEYWORD \"C=\" (THIS IS MANDATORY).\n*              BE CAREFUL IN STATEMENTS SEQUENCE ORDER SO THEY WARRANT\n*              A HIGH COMPLEX CONDITION IS MET BEFORE A LESS ONE.\n* KEYWORD  OPERAND(S)  MEANING\n* -------  ----------  --------------------------------------------\n* IF-ON    NONE        START A CONDITIONAL SENTENCE FOR \"DYLON\"\n* IF-OFF   NONE        START A CONDITIONAL SENTENCE FOR \"DYLOFF\"\n* T=       S/L/B       TERMINAL TYPE : \"S\" FOR SCREEN OR \"L\" FOR LINE\n*                      OR \"B\" FOR TSO BACKGROUND RUN.\n* U=       USER-ID     LIST OF USER-ID'S NAMES MATCHING CONDITIONS\n* G=       GROUP       LIST OF GROUP'S NAMES MATCHING CONDITIONS\n* P=       PROCEDURE   LIST OF PROCEDURE'S NAMES MATCHING CONDITIONS\n* S=       TYPE        LIST OF TYPE'S NAMES MATCHING CONDITIONS (VALID\n*                      ONLY IN \"IF-ON\" SENTENCE).\n* C=       COMMAND(S)  THE DESIRED COMMAND(S). THE STRING MUST BE\n*                      QUOTED (2 QUOTES IN @AC TEXT) IF IT INCLUDES\n*                      ONE OR MORE BLANKS AND/OR QUOTES (A QUOTE IN\n*                      THE STRING MUST BE DOUBLED, SO 4 QUOTES IN @AC\n*                      TEXT), AND MULTIPLE COMMANDS MUST BE SEPARATED\n*                      EACH FROM THE OTHER BY THE SEMI-COLON DELIMITER.\n*          KEYWORDS    ALIASES\n*          ----------  -----------------------------------------\n*          T=          TERM=, TERMINAL=\n*          U=          USER=, USERS=\n*          G=          GROUP=, GROUPS=\n*          P=          PROC=, PROCEDURE=, PROCS=, PROCEDURES=\n*          S=          SEL=, SELECT=\n*          C=          CMD=, CMDS=, COMMAND=, COMMANDS=\n*          OPERANDS    ALIASES\n*          ----------  -----------------------------------------\n*          S           SCREEN, D, DISPLAY\n*          L           LINE, LINES\n*          B           BACK, BACKGROUND\n         EJECT\n* NOTES : WHEN CODING U= AND G= OPERAND(S) YOU MUST FOLLOW THE RULES\n* ------- GIVEN BELOW :\n*           1. A SINGLE NAME MAY BE CODED P= ... AS WELL AS P= ( ... )\n*           2. A LIST OF NAMES IS ALWAYS CODED G= ( ... ... ... )\n*         YOU MAY ALSO SPECIFY A SHORTER CHARACTERS STRING WHICH WILL\n*         BE USED AS MATCH TEST ON THE INITIAL CHARACTERS OF THE\n*         CURRENT USER-ID, GROUP OR PROCEDURE NAME. TO DO IT, JUST\n*         PREFIX THE CHARACTERS STRING BY A PERIOD.\n*           I.E. : U= .SYS WHICH MEANS ALL USER-ID'S NAMES STARTING\n*           WITH THE \"SYS\" CHARACTERS (I.E. : SYSTSO1, SYSTSO2,\n*           SYSIBM1 AND SYSIBM2 ARE ALL MATCHING THE ABOVE CONDITION).\n*         THE SAME RULES APPLY TO S= OPERAND(S) CODING UNLESS YOU MAY\n*         NOT DEFINE A MATCH TEST (CHARACTERS STRING PREFIXED BY A\n*         PERIOD). THE TYPE'S NAMES ARE THE DATA-SET PRODUCT(S)\n*         OR SPECIAL USES, AND ALL THOSE IN THE LIST ARE TESTED\n*         TO GET THE CONDITION MET. SEE \"DATA-SETS DEFINITIONS\"\n*         (INDICATORS BYTES UNDER THE CONTROL OF \"DYLO\").\n         SPACE 1\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*       I N T E R N A L     C O M M A N D ( S )     T A B L E       *\n*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n        PRINT  OFF\n         @ACS  ,                   START OF TABLE\n        PRINT  ON\n        PRINT  &PRS\n        COPY   DYLOCMD             <=== COMMANDS TABLE ===============\n        PRINT  OFF\n         @ACE  ,                   END OF TABLE\n        @DEFDV ,                   DEFINE DEFAULTS VALUES\n        @TABF  ,                   FLAGS NAMES TABLE\n        @TABS  ,                   SELECT (INDICATORS) NAMES TABLE\n        @TABI  ,                   INDICATORS NAMES TABLE\nWKAREA  @WAC   ,                   WORK-AREAS COMMUNICATIONS\n        @GNKW  ,                   PRODUCTS, ... CHECK\nWKLEN    EQU   (((*-WKAREA)+7)/8)*8\nDSCDSECT DSECT ,                   SYSTEM DSECT'S.\n        IECSDSL1 (1)\n        IEFZB4D2\n        PRINT  ON\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLODDT": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92(/\\x00\\x92(/\\x146\\x00m\\x00m\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-08T00:00:00", "modifydate": "1992-10-08T14:36:00", "lines": 109, "newlines": 109, "modlines": 0, "user": "SYSPAJA"}, "text": "SYSPROC  @DD   ID='TSO PROCEDURES',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<P>.CLIST'\n         @DS   '<U>.CLIST'\n         @DS   '<P>.PROCS.DATA',TYPE=SPF\n         @DS   '<U>.PROCS.DATA',TYPE=SPF\n         @DS   'SYSDMS.EUR.CMDPROC',TYPE=DMS\n         @DS   '<G>.CLIST'\n         @DS   '<G>.PROCS.DATA',TYPE=SPF\n         @DS   'EUR1.PROCS.DATA',OPT=M\n         @DS   'ADA.CMDPROC',OPT=M,TYPE=ADA\n         @DSE\nSYSHELP  @DD   ID='TSO HELP',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<P>.HELP.DATA'\n         @DS   '<U>.HELP.DATA'\n         @DS   '<G>.HELP.DATA'\n         @DS   'SYS1.HELP',OPT=M\n         @DS   'EUR1.HELP',OPT=M\n         @DSE\nSYSUADS  @DD   ID='USER ATTRIBUTE',DSORG=PO,RECFM=F,LRECL=80\n         @DS   'SYS1.UADS',TYPE=SYS\n         @DSE\nSYSLBC   @DD   ID='FILE TRANSFERT',DSORG=PS,RECFM=F,LRECL=129\n         @DS   'SYS1.BRODCAST'\n         @DSE\nISPPROF  @DD   ID='ISPF PROFILE',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<U>.SPF.PROF',TYPE=SPF,SP=P\n         @DSE\nISPLLIB  @DD   ID='ISPF LINK',DSORG=PO,RECFM=U\n         @DS   '<P>.LINK.DATA',TYPE=SPF\n         @DS   '<U>.LINK.DATA',TYPE=SPF\n         @DS   'SYSDMS.EUR.CMDLIB',TYPE=DMS\n         @DS   '<G>.LINK.DATA',TYPE=SPF\n         @DS   'EUR1.LINK.DATA',OPT=M,TYPE=SPF\n         @DS   'SYSPROD.MFTS.V51L04.LOADLIB',OPT=M,TYPE=MFT\n         @DS   'SYSNEW.INFOV3R1.BLMMOD1',OPT=M,TYPE=IFS\n         @DS   'SYSNEW.INFOV3R1.BLGMOD1',OPT=M,TYPE=IFM\n         @DSE\nISPPLIB  @DD   ID='ISPF PANELS',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<P>.PANELS.DATA',TYPE=SPF\n         @DS   '<U>.PANELS.DATA',TYPE=SPF\n         @DS   'SYSDMS.EUR.ISPPLIB',TYPE=DMS\n         @DS   '<G>.PANELS.DATA',TYPE=SPF\n         @DS   'EUR1.PANELS.DATA',OPT=M,TYPE=SPF\n         @DS   'SYSPROD.MFTS.V51L04.ISPPLIB',OPT=M,TYPE=MFT\n         @DSE\nISPMLIB  @DD   ID='ISPF MESSAGES',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<P>.MESS.DATA',TYPE=SPF\n         @DS   '<U>.MESS.DATA',TYPE=SPF\n         @DS   'SYSDMS.EUR.ISPMLIB',TYPE=DMS\n         @DS   '<G>.MESS.DATA',TYPE=SPF\n         @DS   'EUR1.MESS.DATA',OPT=M,TYPE=SPF\n         @DS   'SYSPROD.MFTS.V51L04.ISPMLIB',OPT=M,TYPE=MFT\n         @DSE\nISPSLIB  @DD   ID='ISPF SKELETONS',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<P>.SKELS.DATA',TYPE=SPF\n         @DS   '<U>.SKELS.DATA',TYPE=SPF\n         @DS   '<G>.SKELS.DATA',TYPE=SPF\n         @DS   'EUR1.SKELS.DATA',OPT=M,TYPE=SPF\n         @DSE\nISPTLIB  @DD   ID='ISPF TABLES INPUT',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<P>.TABLES.DATA',TYPE=SPF\n         @DS   '<U>.TABLES.DATA',TYPE=SPF\n         @DS   '<G>.TABLES.DATA',TYPE=SPF\n         @DS   'EUR1.TABLES.DATA',OPT=M,TYPE=SPF\n         @DSE\nISPTABL  @DD   ID='ISPF TABLES OUTPUT',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<P>.TABLES.DATA',OPT=X,TYPE=SPF\n         @DS   '<U>.TABLES.DATA',OPT=X,TYPE=SPF\n         @DS   '<U>.SPF.PROF',TYPE=SPF\n         @DSE\nISPWORK  @DD   ID='ISPF WORK FILE',DSORG=PO,RECFM=F,LRECL=80,SP=W\n         @DS   ,TYPE=SPF\n         @DSE\nISPCTL1  @DD   ID='ISPF CONTROL 1',DSORG=PS,RECFM=F,LRECL=80,SP=C\n         @DS   ,TYPE=SPF\n         @DSE\nISPCTL2  @DD   ID='ISPF CONTROL 2',DSORG=PS,RECFM=F,LRECL=80,SP=C\n         @DS   ,TYPE=SPF\n         @DSE\nSMPTABL  @DD   ID='SMP TABLES',DSORG=PO,RECFM=F,LRECL=80\n         @DS   'EUR1.TABLES.DATA',OPT=M,TYPE=SMP\n         @DSE\nPARMLIB  @DD   ID='DMS PARAMETERS',DSORG=PO,RECFM=F,LRECL=80\n         @DS   'SYSDMS.PARMLIB',OPT=M,TYPE=DMS\n         @DSE\nMFTTLIB  @DD   ID='MFTS TABLES',DSORG=PO,RECFM=F,LRECL=80\n         @DS   '<U>.MFTS.TABLES',TYPE=MFT,SP=P\n         @DSE\nFILES    @DD   ID='DMS CATALOG',DSORG=DA,RECFM=,LRECL=\n         @DS   'SYSDMS.FILES',OPT=M,TYPE=DMS\n         @DSE\nSYSEDIT  @DD   ID='TSO EDIT WORK',DSORG=,RECFM=,LRECL=,SP=E\n         @DS   ,\n         @DSE\nPLIDUMP  @DD   ID='PL1 DUMP',DSORG=,RECFM=,LRECL=,SP=D\n         @DS   ,\n         @DSE\nMSGPRINT @DD   ID='DMS MESSAGES',DSORG=,RECFM=,LRECL=,SP=T\n         @DS   ,\n         @DSE\nSYSPRINT @DD   ID='NORMAL OUTPUT',DSORG=,RECFM=,LRECL=,SP=T\n         @DS   ,\n         @DSE\nSYSTERM  @DD   ID='ERRORS MESSAGES',DSORG=,RECFM=,LRECL=,SP=T\n         @DS   ,\n         @DSE\nSYSIN    @DD   ID='NORMAL INPUT',DSORG=,RECFM=,LRECL=,SP=T\n         @DS   ,\n         @DSE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYLOGAL": {"ttr": 4621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943\\x9f\\x00\\x943\\x9f\\x16\"\\x00\\x02\\x00\\x02\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-05T00:00:00", "modifydate": "1994-12-05T16:22:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "SYSPAJA"}, "text": "OPER     @AL   SYS,DDN=(SYSPROC,ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB),      X\n               UNLESS=(SYSTSOX,XALERT1,XALERT2)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYLOH": {"ttr": 4866, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943o\\x00\\x943o\\x10V\\x00J\\x00J\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-02T00:00:00", "modifydate": "1994-12-02T10:56:00", "lines": 74, "newlines": 74, "modlines": 0, "user": "SYSPAJA"}, "text": "./     ADD     NAME=DYLON\n./     NUMBER  NEW1=100,INCR=100\n)F FUNCTION :  D Y L O N / D Y L O F F     T S O     C O M M A N D S\n               --------------------------------------------------------\n               Allocate (DYLON) all the users libraries needed for a\n               TSO session, or de-allocate (DYLOFF) all (unless those\n               considered as TSO basic use).\n)X SYNTAX :    Here follows only a summary of all possible operands,\n               but some are restricted use :\n               Command      Operands (optional)\n               --------     -------------------------------------------\n               DYLON        NOLIST / LIST / ?\n                            AUTO\n            or DYLON        NOLIST / LIST / ?\n                            NOISPF / ISPF\n                            NOINFOSYS / INFOSYS\n                            NOSMP / SMP\n                            NOADABAS / ADABAS\n                            NOMFTS / MFTS\n                            IDV / DDT / ALT / ACS\n                            COMMAND=...\n               DYLOFF       NOLIST / LIST / ?\n                            AUTO\n            or DYLOFF       NOLIST / LIST / ?\n                            NOSYS / SYS\n                            ACS\n                            COMMAND=...\n               Return codes:  0 - successfull completion\n                              8 - completion with erorr(s)\n)O OPERANDS :  Required - none (all optional, if given they can be in\n                          any order)\n               Defaults - installation depending.\n               Meanings - for use and explanation see (or request) the\n                          installation depending manual.\n               Operands - Aliases\n               ---------  ---------------------------------------------\n               NOLIST     NOLST, NOMSG\n               LIST       LST, MSG\n               AUTO       AOS, AO, A, OPERANDS, OPNDS, OPND, OP, O\n               NOISPF     NOSPF\n               ISPF       SPF\n               NOINFOSYS  NOIFS, NOIS\n               INFOSYS    IFS, IS\n               NOADABAS   NOADA\n               ADABAS     ADA\n               NOMFTS     NOMFT, NOMF\n               MFTS       MFT, MF\n               NOSYS      NS\n               SYS        S\n               IDV        I\n               DDT        DD\n               ALT        AL\n               ACS        AC\n               COMMAND=   CMD=, C=, COMMANDS=, CMDS=\n))NOLIST :     only severe error messages (default)\n))LIST :       all messages (say all about allocations)\n))? :          all messages + some informational messages\n))AUTO :       automatic operands supply.\n))NOISPF :     don't need ISPF allocations.\n))ISPF :       do ISPF allocations.\n))NOINFOSYS :  don't need INFOSYS allocations.\n))INFOSYS :    do INFOSYS allocations (require ISPF).\n))NOSMP :      don't need SMP allocations.\n))SMP :        do SMP allocations (require ISPF).\n))NOADABAS :   don't need ADABAS allocations.\n))ADABAS :     do ADABAS allocations.\n))NOMFTS :     don't need MFTS allocations.\n))MFTS :       do MFTS allocations.\n))NOSYS/SYS :  see installation depending manual.\n))IDV/DDT/ALT/ACS : see installation depending manual.\n))COMMAND=... : any command(s) to be executed when the DYLON or DYLOFF\n               process is successfully complete.\n./     ALIAS   NAME=DYLOFF\n./     ENDUP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DYLOM": {"ttr": 4869, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\t0\\x05>\\x05>\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T09:30:00", "lines": 1342, "newlines": 1342, "modlines": 0, "user": "SYSPAJA"}, "text": "         MACRO           ALIAS(ES) PROCESS DSECT\n        @AL    &DUMMY\n.* SYNTAX :    @AL  ,\n         SPACE 1\n*------- ALIAS(ES) TABLE DSECT\n         SPACE 1\nALDSECT  DSECT\nALNME    DS    CL8                 NAME\nALANM    DS    CL8                 ALIAS NAME\nALNDD    DS    XL1                 NUMBER OF DD-NAME(S)\nALNUN    DS    XL1                 NUMBER OF UNLESS NAME(S)\nALBSL    EQU   *-ALDSECT           BASE LENGTH\nALDDN    DS    0CL8                DD-NAME(S) ...\nALUNN    DS    0CL8                UNLESS NAME(S) ...\n         SPACE 1\n         MEND\n         MACRO           CALL ROUTINE\n&NAME   @CALL  &WHERE,&GO=NO\n         LCLC  &NM\n.* SYNTAX :    ...  @CALL  ...,GO=YES\n.*                         ,\n.*             WHERE : ... IS THE LABEL OF WHERE TO GO (RECOGNIZE\n.*                     LABELS : PUTLNE, DIAGDD, FREEDS AND PERMAL)\n.*                     GO=NO TO USE \"BASR\"\n.*                     GO=YES TO USE \"BR\"\n&NM      SETC  '&NAME'\n         AIF   ('&WHERE' EQ '').A11\n         AIF   ('&WHERE' EQ 'PUTLNE').A1\n         AIF   ('&WHERE' EQ 'DIAGDD').A2\n         AIF   ('&WHERE' EQ 'FREEDS').A3\n         AIF   ('&WHERE' EQ 'PERMAL').A4\n&NM      L     R15,=A(&WHERE)      GET ENTRY POINT\n         AGO   .A10\n.A1      ANOP\n&NM      L     R15,A$PL            GET ENTRY POINT\n         AGO   .A10\n.A2      ANOP\n&NM      L     R15,A$DD            GET ENTRY POINT\n         AGO   .A10\n.A3      ANOP\n&NM      L     R15,A$FD            GET ENTRY POINT\n         AGO   .A10\n.A4      ANOP\n&NM      L     R15,A$PA            GET ENTRY POINT\n.A10     ANOP\n&NM      SETC  ''\n.A11     AIF   ('&GO' EQ 'YES').A12\n&NM      BASR  R14,R15             GO TO ROUTINE\n         MEXIT\n.A12     ANOP\n&NM      BR    R15                 GO TO ROUTINE\n         MEND\n         MACRO           CHECK OPERANDS KEYWORDS NAMES LIST\n&NAME   @CHKO  &WHERE=,&NOMATCH=,&MATCH=\n         GBLA  &TSON\n         GBLC  &TSOP(100)\n         LCLA  &L,&N,&T,&X\n         LCLB  &IW\n         LCLC  &KW,&BW\n.* SYNTAX :    ...  @CHKO  ...,...,..., <- KEYWORDS NAMES LIST\n.*                         WHERE=...,NOMATCH=...,MATCH=...\n&NAME    BAS   R6,&WHERE\n         AIF   ('&NOMATCH' NE '').A1\n&IW      SETB  1\n&BW      SETC  'IHB'.'&SYSNDX'\n         B     &BW                 +0 = NO MATCH\n         AGO   .A2\n.A1      ANOP\n         B     &NOMATCH            +0 = NO MATCH\n.A2      AIF   ('&MATCH' NE '').B2\n         AIF   (&IW).B1\n&IW      SETB  1\n&BW      SETC  'IHB'.'&SYSNDX'\n.B1      B     &BW                 +4 = OK, MATCH\n         AGO   .B3\n.B2      ANOP\n         B     &MATCH              +4 = OK, MATCH\n.B3      ANOP\n&N       SETA  N'&SYSLIST\n         AIF   (&N EQ 0).D1\n&L       SETA  1\n.C1      ANOP\n         AIF   ('&SYSLIST(&L)' EQ '').C9\n         AIF   ('&SYSLIST(&L)'(1,1) NE '''').C3\n&T       SETA  K'&SYSLIST(&L)\n         AIF   ('&SYSLIST(&L)'(&T,1) EQ '''').C2\n         MNOTE 8,' KEYWORD NAME &L : FINAL QUOTE MISSING ************ '\n         AGO   .END\n.C2      ANOP\n&T       SETA  &T-2\n&KW      SETC  '&SYSLIST(&L)'(2,&T)\n         AGO   .C4\n.C3      ANOP\n&KW      SETC  '&SYSLIST(&L)'\n.C4      ANOP\n&T       SETA  K'&KW-1\n         AIF   (&T LT 50).C5\n         MNOTE 8,' KEYWORD NAME &L : TOO LONG (MAX. = 50 CHAR.) ***** '\n         AGO   .END\n.C5      ANOP\n&X       SETA  1\n.C6      AIF   ('&TSOP(&X)' EQ '').C7\n         AIF   ('&TSOP(&X)' EQ '&KW').C8\n&X       SETA  &X+1\n         AIF   (&X LE &TSON).C6\n         MNOTE 8,' INTERNAL MACRO GLOBAL CHECK TABLE OVERFLOW ******* '\n         MNOTE 8,' = INCREMENT DIMENSION OF GLOBAL VARIABLE TSOP    = '\n         MNOTE 8,' = AND SET THE GLOBAL VARIABLE TSON EQUAL TO IT.  = '\n         AGO   .END\n.C7      ANOP\n&TSOP(&X) SETC '&KW'\n.C8      DC    AL1(&T),C'&KW'\n.C9      ANOP\n&L       SETA  &L+1\n         AIF   (&L LE &N).C1\n.D1      DC    AL1(255)            END OF LIST\n         AIF   (&IW).D2\n         DS    0H                  FORCE HALWORD ALIGNMENT\n         AGO   .END\n.D2      ANOP\n&BW      DS    0H                  FORCE HALWORD ALIGNMENT\n.END     MEND\n         MACRO           CHECK KEYWORDS LIST\n&NAME   @CHKW  &WHERE=,&NOMATCH=,&MATCH=\n         LCLA  &L,&N,&T\n         LCLB  &IW\n         LCLC  &KW,&BW\n.* SYNTAX :    ...  @CHKW  ...,...,..., <- KEYWORDS LIST\n.*                         WHERE=...,NOMATCH=...,MATCH=...\n&NAME    BAS   R6,&WHERE\n         AIF   ('&NOMATCH' NE '').A1\n&IW      SETB  1\n&BW      SETC  'IHB'.'&SYSNDX'\n         B     &BW                 +0 = NO MATCH\n         AGO   .A2\n.A1      ANOP\n         B     &NOMATCH            +0 = NO MATCH\n.A2      AIF   ('&MATCH' NE '').B2\n         AIF   (&IW).B1\n&IW      SETB  1\n&BW      SETC  'IHB'.'&SYSNDX'\n.B1      B     &BW                 +4 = OK, MATCH\n         AGO   .B3\n.B2      ANOP\n         B     &MATCH              +4 = OK, MATCH\n.B3      ANOP\n&N       SETA  N'&SYSLIST\n         AIF   (&N EQ 0).D1\n&L       SETA  1\n.C1      ANOP\n         AIF   ('&SYSLIST(&L)' EQ '').C6\n         AIF   ('&SYSLIST(&L)'(1,1) NE '''').C3\n&T       SETA  K'&SYSLIST(&L)\n         AIF   ('&SYSLIST(&L)'(&T,1) EQ '''').C2\n         MNOTE 8,' KEYWORD &L : FINAL QUOTE MISSING ***************** '\n         AGO   .END\n.C2      ANOP\n&T       SETA  &T-2\n&KW      SETC  '&SYSLIST(&L)'(2,&T)\n         AGO   .C4\n.C3      ANOP\n&KW      SETC  '&SYSLIST(&L)'\n.C4      ANOP\n&T       SETA  K'&KW-1\n         AIF   (&T LT 50).C5\n         MNOTE 8,' KEYWORD &L : TOO LONG (MAX. = 50 CHAR.) ********** '\n         AGO   .END\n.C5      DC    AL1(&T),C'&KW'\n.C6      ANOP\n&L       SETA  &L+1\n         AIF   (&L LE &N).C1\n.D1      DC    AL1(255)            END OF LIST\n         AIF   (&IW).D2\n         DS    0H                  FORCE HALWORD ALIGNMENT\n         AGO   .END\n.D2      ANOP\n&BW      DS    0H                  FORCE HALWORD ALIGNMENT\n.END     MEND\n         MACRO           DD-NAME LIBRARIES DSECT\n        @DD\n.* SYNTAX :    @DD  ,\n         SPACE 1\n*------- DD-NAME LIBRARIES INFORMATION TABLE DSECT\n         SPACE 1\nLIBCITD  DSECT\nLIBSPA   DS    A                   DD-NAME PRE-ALL. ROUTINE ADDRESS\nLIBDDN   DS    CL8                 DD-NAME\nLIBLID   DS    CL20                IDENTIFICATION\nLIBORG   DS    XL1                 DSORG\nLIBRFM   DS    XL1                 RECFM\nLIBLRL   DS    H                   LRECL\n         DS    0F                  FORCE ALIGNMENT\nLIBNDS   DS    0XL(LIB#LDS)        DATA-SET(S) NAME(S) LIST\n         SPACE 1\nLIB#DS   DSECT ,                   DATA-SET NAME LIST ELEMENT\nLIB#DSSA DS    A                   SPECIAL PROCESSING ROUTINE ADDRESS\nLIB#DSF$ EQU   X'FFFFFFFF',4       END OF LIST\nLIB#DSF  DS    XL1                 FLAGS BYTE\nLIB#DSI  DS    XL3                 INDICATORS BYTES\nLIB#DSN  DS    CL44                DS-NAME\n         DS    0F                  FORCE ALIGNMENT\nLIB#LDS  EQU   *-LIB#DS            LENGTH OF ELEMENT\n         SPACE 1\n         MEND\n         MACRO           DEFINE FLAGS\n        @DEFF\n         GBLC  &FIN1(8)\n         LCLA  &L,&N,&T\n         LCLC  &FB(8),&IN\n.* SYNTAX :    @DEFF  ...,...,... <- LIST OF FLAGS NAME (MAX. = 8,\n.*                                        LENGTH OF NAME = 1 CHAR.)\n&FB(1)   SETC  '80'\n&FB(2)   SETC  '40'\n&FB(3)   SETC  '20'\n&FB(4)   SETC  '10'\n&FB(5)   SETC  '08'\n&FB(6)   SETC  '04'\n&FB(7)   SETC  '02'\n&FB(8)   SETC  '01'\n&N       SETA  N'&SYSLIST\n         AIF   (&N NE 0).A\n         MNOTE 8,' OPERANDS MISSING ********************************* '\n         AGO   .END\n.A       AIF   (&N LE 8).B\n         MNOTE 4,' TOO MANY OPERANDS (8 CHAR. ASSUMED) ************** '\n&N       SETA  8\n.B       ANOP\n&L       SETA  1\n         SPACE 1\n.C       AIF   ('&SYSLIST(&L)' EQ '').E\n&IN      SETC  '&SYSLIST(&L)'\n         AIF   (K'&IN EQ 1).C1\n         MNOTE 8,' &IN : INVALID (ONLY 1 CHAR. ALLOWED) ************* '\n         AGO   .E\n.C1      AIF   ('&IN' NE '$').D\n         MNOTE 8,' &IN : INVALID (RESERVED : END OF LIST) *********** '\n         AGO   .E\n.D       ANOP\n&T       SETA  1\n.D1      AIF   ('&FIN1(&T)' NE '&IN').D2\n         MNOTE 8,' &IN : DUPLICATE CHAR. DEFINITION ***************** '\n         AGO   .E\n.D2      AIF   (&T EQ 8).D3\n&T       SETA  &T+1\n         AGO   .D1\n.D3      ANOP\n&T       SETA  &L\n         AIF   ('&FIN1(&T)' EQ '').DS1S\n         MNOTE 8,' FLAG &IN OVERLAPS &FIN1(&T) ********************** '\n         AGO   .E\n.DS1S    ANOP\n&FIN1(&T) SETC '&IN'\nLIB#DSF&IN EQU   X'&FB(&T)'\n.E       ANOP\n&L       SETA  &L+1\n         AIF   (&L LE &N).C\n.END     MEND\n         MACRO           SAVE AREA'S TANK MANAGEMENT\n&NAME   @ENTER &DUMMY\n.* SYNTAX :    ... @ENTER  ,   ENTER SUBPROGRAM\n        CNOP   0,4\n         USING &NAME,R9            SET LOCAL ADDRESSABILITY\n&NAME    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R9,R15              SET LOCAL BASE REGISTER\n         CP    TANKNO,TANKMX       CONTROL TANK AVAILABILITY\n         BNL   STOVER              OVERFLOW\n         AP    TANKNO,TANKUP       UP TANKS NUMBER\n         LA    R15,18*4(R13)       NEXT SAVE AREA\n         XC    0(18*4,R15),0(R15)  CLEAR IT\n         ST    R15,8(R13)          LINK SAVE AREAS\n         ST    R13,4(R15)\n         LR    R13,R15             ACTIVATE NEW SAVE AREA\n         MEND\n         MACRO           SAVE AREA'S TANK MANAGEMENT\n&NAME   @EXIT  &DUMMY\n.* SYNTAX :    ... @EXIT  ,   EXIT SUBPROGRAM\n&NAME    CP    TANKNO,TANKUP       CONTROL TANK AVAILABILITY\n         BL    STUNDER             UNDERFLOW\n         SP    TANKNO,TANKUP       DOWN TANKS NUMBER\n         L     R13,4(R13)          PREVIOUS SAVE AREA\n         ST    R15,16(R13)         SET REGISTER 15 (RC)\n         LM    R14,R12,12(R13)     RESTORE CALLER'S REGISTERS\n         MVI   12(R13),X'FF'       INDICATE RETURN EXECUTED\n         BR    R14                 RETURN\n         DROP  R9                  KILL LOCAL ADDRESSABILITY\n         MEND\n         MACRO           GENERATE CHECK KEYWORD ROUTINE\n&NAME   @GCHKR  &RP,&RE\n.* SYNTAX :    ...  @GCHKR  ..., <- CURRENT TEXT POINTER REGISTER\n.*                          ... <- END OF TEXT POINTER REGISTER\n&NAME    LA    R15,8(R6)           POINT TO LIST\n         XR    R7,R7\n&NAME.1  CLI   0(R15),255          END OF LIST ?\n         BER   R6                  YES, NO MATCH\n         IC    R7,0(R15)           GET KEYWORD COMPARE LENGTH\n         LA    R0,0(&RP,R7)\n         CLR   R0,&RE              OVER END OF TEXT ?\n         BH    *+L'*+8             YES, NO MATCH, SKIP TO NEXT\n         EX    R7,*+L'*+12         KEYWORD IN TEXT ?\n         BE    4(R6)               YES, OK, MATCH\n         LA    R15,2(R15,R7)       POINT TO NEXT\n         B     &NAME.1\n         CLC   0(*-*,&RP),1(R15)   <<EXECUTED>>\n         MEND\n         MACRO           TEST KEYWORD\n&NAME   @IFKW  &KW,&VK,&GOTO=,&ELSE=\n.* SYNTAX :    ...  @IFKW  ..., <- KEYWORD NAME\n.*                         ..., <- U = UNSPECIFIED OPTION\n.*                                 N = NO OPTION\n.*                                 S = OPTION\n.*                         GOTO=..., <- BRANCH IF EQUAL\n.*                         ELSE=...  <- BRANCH IF NOT EQUAL\n         AIF   ('&KW' NE '').A\n         MNOTE 8,' KEYWORD NAME MISSING ***************************** '\n         AGO   .END\n.A       AIF   (K'&KW LE 6).B\n         MNOTE 8,' KEYWORD NAME TOO LONG (MAX. CHAR. 6) ************* '\n         AGO   .END\n.B       AIF   ('&VK' NE '').C\n         MNOTE 8,' KEYWORD VALUE MISSING **************************** '\n         AGO   .END\n.C       AIF   ('&VK' EQ 'U').D\n         AIF   ('&VK' EQ 'N').E\n         AIF   ('&VK' EQ 'S').F\n         MNOTE 8,' KEYWORD VALUE INVALID (NOT U, N OR S) ************ '\n         AGO   .END\n.D       ANOP\n&NAME    CLI   KW&KW,0             UNSPECIFIED OPERAND\n         AGO   .G\n.E       ANOP\n&NAME    CLI   KW&KW,1             NULLIFIED OPERAND\n         AGO   .G\n.F       ANOP\n&NAME    CLI   KW&KW,2             SPECIFIED OPERAND\n.G       AIF   ('&GOTO' NE '').H\n         AIF   ('&ELSE' NE '').I\n         MNOTE 8,' GOTO= OR ELSE= MISSING *************************** '\n         AGO   .END\n.H       BE    &GOTO\n         AIF   ('&ELSE' EQ '').END\n         B     &ELSE\n         AGO   .END\n.I       BNE   &ELSE\n.END     MEND\n         MACRO           LIST ALL OPERANDS KEYWORDS NAMES\n        @LSTO  &DUMMY\n         GBLA  &TSON\n         GBLC  &PUN,&TSOP(100)\n         LCLA  &X\n         LCLB  &S\n.* SYNTAX :    @LSTO  ,\n&S       SETB  0\n&X       SETA  1\n.A       AIF   ('&TSOP(&X)' EQ '').C\n         AIF   (&S).B\n&S       SETB  1\n         AIF   ('&PUN' EQ 'YES').A1\n         MNOTE *,' --- LIST OF GLOBAL DEFINITIONS AS IN \"DYLOCOM\" MODULX\n               E :'\n         AGO   .B\n.A1      MNOTE *,' --- UPDATE GLOBAL DEFINITIONS IN \"DYLOCOM\" MODULE ASX\n                BELOW :'\n.B       AIF   (&X GE 10).B1\n         MNOTE *,'     ===> &&TSOP(&X)   SETC  ''&TSOP(&X)'' '\n         AIF   ('&PUN' NE 'YES').C\n         PUNCH '&&TSOP(&X)   SETC  ''&TSOP(&X)'' '\n         AGO   .C\n.B1      AIF   (&X GE 100).B2\n         MNOTE *,'     ===> &&TSOP(&X)  SETC  ''&TSOP(&X)'' '\n         AIF   ('&PUN' NE 'YES').C\n         PUNCH '&&TSOP(&X)  SETC  ''&TSOP(&X)'' '\n         AGO   .C\n.B2      MNOTE *,'     ===> &&TSOP(&X)  SETC ''&TSOP(&X)'' '\n         AIF   ('&PUN' NE 'YES').C\n         PUNCH '&&TSOP(&X)  SETC ''&TSOP(&X)'' '\n.C       ANOP\n&X       SETA  &X+1\n         AIF   (&X LE &TSON).A\n         AIF   (&S).D\n         MNOTE 8,'     NO KEYWORDS FOUND ... ************************ '\n         AGO   .END\n.D       MNOTE *,' --- END OF OPERANDS KEYWORDS LIST ---'\n         AIF   ('&PUN' NE 'YES').END\n         MNOTE *,' === GBLC CARDS ARE INSERTED IN MEMBER \"DYLOOBJ\" ==='\n         MNOTE 0,' === (AFTER EVENTUAL USE, DELETE FROM \"DYLOOBJ\") ==='\n.END     MEND\n         MACRO           OPERANDS KEYWORD-ADDRESS TABLE\n&NAME   @OKAT  &KW,&AD\n         LCLA  &N\n.* SYNTAX :    ...  @OKAT  ..., <- KEYWORD\n.*                         ...  <- ADDRESS OF PROCESS\n         AIF   ('&NAME' EQ '').A\n&NAME    DS    0XL2\n.A       ANOP\n&N       SETA  K'&KW\n         DC    AL1(&N),AL4(&AD),C'&KW='\n         MEND\n         MACRO           OPERANDS KEYWORD-INDEX TABLE\n&NAME   @OKIT  &KW,&IX\n         LCLA  &N\n.* SYNTAX :    ...  @OKIT  ..., <- KEYWORD\n.*                         ...  <- KEYWORD INDEX NAME\n         AIF   ('&NAME' EQ '').A\n&NAME    DS    0XL2\n.A       ANOP\n&N       SETA  K'&KW\n         DC    AL1(&N,&IX),C'&KW='\n         MEND\n         MACRO           PASS REGISTER MANAGEMENT\n&NAME   @PASS  &REG\n.* SYNTAX :    ...  @PASS  ... <- REGISTER\n         AIF   ('&REG' EQ '13').A\n         AIF   ('&REG' EQ 'R13').A\n         AIF   ('&REG' EQ '14').A\n         AIF   ('&REG' EQ 'R14').A\n         AIF   ('&REG' EQ '15').A\n         AIF   ('&REG' NE 'R15').B\n.A       MNOTE 8,' &REG : INVALID REGISTER ************************** '\n         AGO   .END\n.B       ANOP\n&NAME    L     R14,4(R13)          GET PREVIOUS SAVE AREA\n         ST    &REG,20+(&REG*4)(R14) PASS REGISTER CONTENTS\n.END     MEND\n         MACRO           SET KEYWORD\n&NAME   @SETKW &KW,&VK,&GOTO=\n.* SYNTAX :    ...  @SETKW  ..., <- KEYWORD NAME\n.*                          ..., <- U = UNSPECIFIED OPTION\n.*                                  N = NO OPTION\n.*                                  S = OPTION\n.*                          GOTO=... <- UNCONDITIONAL BRANCH\n         AIF   ('&KW' NE '').A\n         MNOTE 8,' KEYWORD MISSING ********************************** '\n         AGO   .END\n.A       AIF   (K'&KW LE 6).B\n         MNOTE 8,' &KW : NAME TOO LONG (MAX.CHAR. 6) **************** '\n         AGO   .END\n.B       AIF   ('&VK' NE '').C\n         MNOTE 8,' KEYWORD VALUE MISSING **************************** '\n         AGO   .END\n.C       AIF   ('&VK' EQ 'U').D\n         AIF   ('&VK' EQ 'N').E\n         AIF   ('&VK' EQ 'S').F\n         MNOTE 8,' &VK : INVALID KEYWORD VALUE (U, N OR S ONLY) ***** '\n         AGO   .END\n.D       ANOP\n&NAME    MVI   KW&KW,0             SET AS UNSPECIFIED OPERAND\n         AGO   .G\n.E       ANOP\n&NAME    MVI   KW&KW,1             SET AS NULLIFIED OPERAND\n         AGO   .G\n.F       ANOP\n&NAME    MVI   KW&KW,2             SET AS SPECIFIED OPERAND\n.G       AIF   ('&GOTO' EQ '').END\n         B     &GOTO\n.END     MEND\n         MACRO           BUILD S99 RB - INITIALIZATION\n&NAME   @S99I  &TUPAOV=,&TUAOV=\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @S99I  TUPAOV=...,TUAOV=...\n.*             WHERE : TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW TO BE USED AS DEFAULT\n.*                             IN ALL FOLLOWING @TU.. MACROS\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                             TO BE USED AS DEFAULT IN ALL FOLLOWING\n.*                             @TU.. MACROS\n&PAOVE   SETC  ''\n&AOVE    SETC  ''\n         AIF   ('&TUPAOV' EQ '').A\n&PAOVE   SETC  '&TUPAOV'\n.A       AIF   ('&TUAOV' EQ '').B\n&AOVE    SETC  '&TUAOV'\n.B       ANOP\n&NAME    XC    RBS99(S99RBEND-S99RB),RBS99\n         LM    R0,R1,ALRBTP\n         LR    R14,R0\n         XR    R15,R15\n         MVCL  R0,R14\n         LM    R0,R1,ALRBTU\n         LR    R14,R0\n         XR    R15,R15\n         MVCL  R0,R14\n         LA    R2,RBS99            BUILD S99 RB PTR\n         ST    R2,RBPS99\n         OI    RBPS99,S99RBPND     SET LAST POINTER INDICATOR\n         USING S99RB,R2\n         MVI   S99RBLN,S99RBEND-S99RB BUILD S99 RB\n         MVI   S99VERB,S99VRBAL\n         OI    S99FLG11,S99NOCNV+S99NOMNT\n         L     R3,ALRBTP\n         ST    R3,S99TXTPP\n         USING S99TUPL,R3\n         L     R4,ALRBTU\n         USING S99TUNIT,R4\n         MEND\n         MACRO           BUILD S99 RB - SVC 99 LIST\n&NAME   @S99L  &DUMMY\n.* SYNTAX :    ...  @S99L  ,\n         AIF   ('&NAME' EQ '').NN\n&NAME    DS    0F\n.NN      ANOP\nALRBTP   DS    3F                  SVC99 POINTERS AREA CONTROL\nALRBTU   DS    3F                  SVC99 TEXT UNITS AREA CONTROL\nRBPS99   DS    F                   POINTER TO SVC99 REQUEST BLOCK\nRBS99    DS    0F                  SVC 99 REQUEST BLOCK\n         DS    XL(S99RBEND-S99RB)\n         MEND\n         MACRO           BUILD S99 RB - NEXT\n&NAME   @S99N  &DUMMY\n.* SYNTAX :    ...  @S99N  ,\n&NAME    LR    R4,R0\n         LA    R3,L'S99TUPTR(R3)\n         MEND\n         MACRO           BUILD S99 RB - TERMINATION\n&NAME   @S99T  &DUMMY\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @S99T  ,\n&PAOVE   SETC  ''\n&AOVE    SETC  ''\n&NAME    OI    S99TUPTR,S99TUPLN   SET LAST TU POINTER IN LIST\n         DROP  R2,R3,R4\n         MEND\n         MACRO           TABLE END MARKER\n        @TEM\n.* SYNTAX :    @TEM  ,\n         DC    AL1(255,255)\n         MEND\n         MACRO           BUILD S99 RB - TRK/CYL (TU 07/08)\n&NAME   @TUTC  &TC,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TUTC  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"TC\" = LABEL OF DISPOSITION\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&TC' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY(L'&TC),&TC BUILD TU 07/08 - TRK/CYL ALLOC.\n         MVC   S99TUNUM(L'S99TUNUM),=XL2'0'\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - PRIMARY SPACE\n&NAME   @TU0A  &PS,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU0A  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"PS\" = LABEL OF PRIMARY SPACE\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&PS' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+3(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALPRIME) BUILD TU 0A - PRIMARY SPACE\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(L'&PS)\n         MVC   S99TUPAR(L'&PS),&PS SET FOR NUMBER\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - SECONDARY SPACE\n&NAME   @TU0B  &SS,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU0B  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"SS\" = LABEL OF SECONDARY SPACE\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&SS' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+3(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALSECND) BUILD TU 0B - SECONDARY SPACE\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(L'&SS)\n         MVC   S99TUPAR(L'&SS),&SS SET FOR NUMBER\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - DIRECTORY BLOCKS\n&NAME   @TU0C  &DB,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU0C  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"DB\" = LABEL OF DIRECTORY BLOCKS\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&DB' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+3(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALDIR) BUILD TU 0C - DIRECTORY BLOCKS\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(L'&DB)\n         MVC   S99TUPAR(L'&DB),&DB SET FOR # DIR.BLK.\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - DDNAME\n&NAME   @TU01  &TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU01  TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LH    R1,WLDD\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG(R1,R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALDDNAM) BUILD TU 01 - DDNAME\n         MVC   S99TUNUM,=XL2'1'\n         STCM  R1,B'0011',S99TULNG\n         BCT   R1,*+L'*+6\n         MVC   S99TUPAR(*-*),WDDN  <<EXECUTED>>\n         EX    R1,*-6              MOVE IN DDNAME\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - DSNAME\n&NAME   @TU02  &TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU02  TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LH    R1,WLDS\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG(R1,R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALDSNAM) BUILD TU 02 - DSNAME\n         MVC   S99TUNUM,=XL2'1'\n         STCM  R1,B'0011',S99TULNG\n         BCT   R1,*+L'*+6\n         MVC   S99TUPAR(*-*),WDSN  <<EXECUTED>>\n         EX    R1,*-6              MOVE IN DSNAME\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - STATUS\n&NAME   @TU04  &ST,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU04  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"ST\" IS THE STATUS\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&ST' EQ 'SHR').OK\n         AIF   ('&ST' EQ 'NEW').OK\n         AIF   ('&ST' EQ 'MOD').OK\n         AIF   ('&ST' EQ 'OLD').OK\n         MNOTE 8,' STATUS (SHR/NEW/MOD/OLD) MISSING ***************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+L'S99TUPAR(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALSTATS) BUILD TU 04 - STATUS\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(1)\n         MVI   S99TUPAR,DA08&ST    SET FOR &ST\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - DISPOSITION\n&NAME   @TU05  &DS,&TUPAOV=,&TUAOV=,&LAST=END\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU05  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"DS\" IS THE DISPOSITION\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&DS' EQ 'KEEP').OK\n         AIF   ('&DS' EQ 'DEL').OK\n         AIF   ('&DS' EQ 'CAT').OK\n         AIF   ('&DS' EQ 'UCAT').OK\n         MNOTE 8,' DISPOSITION (KEEP/DEL/CAT/UCAT) MISSING ********** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+L'S99TUPAR(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALNDISP) BUILD TU 05 - DISPOSITION\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(1)\n         MVI   S99TUPAR,DA08&DS    SET FOR &DS\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - DISPOSITION\n&NAME   @TU06  &DS,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU06  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"DS\" IS THE DISPOSITION\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&DS' EQ 'KEP').OK\n         AIF   ('&DS' EQ 'DELE').OK\n         AIF   ('&DS' EQ 'CATL').OK\n         AIF   ('&DS' EQ 'UNCT').OK\n         MNOTE 8,' DISPOSITION (KEP/DELE/CATL/UNCT) MISSING ********* '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+L'S99TUPAR(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALCDISP) BUILD TU 06 - DISPOSITION\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(1)\n         MVI   S99TUPAR,DA08&DS    SET FOR &DS\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - BLOCKS\n&NAME   @TU09  &BA,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU09  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"BA\" = LABEL OF BLOCKS\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&BA' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+3(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALBLKLN) BUILD TU 09 - BLK. ALLOCATION\n         MVC   S99TUNUM(L'S99TUNUM),=XL2'1'\n         MVC   S99TULNG,=AL2(L'&BA)\n         MVC   S99TUPAR(L'&BA),&BA SET BLKSIZE\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - VOLSER\n&NAME   @TU10  &VS,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU10  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"VS\" = LABEL OF VOLSER\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&VS' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+6(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALVLSER) BUILD TU 10 - VOLSER\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(L'&VS)\n         MVC   S99TUPAR(L'&VS),&VS MOVE IN VOL.SER.NUMBER\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - UNIT\n&NAME   @TU15  &UN,&TUPAOV=,&TUAOV=,&LAST=END\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU15  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"UN\" = LABEL OF UNIT\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&UN' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         XR    R14,R14\n         IC    R14,&UN\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG(R14,R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALUNIT) BUILD TU 15 - UNIT\n         MVC   S99TUNUM,=XL2'1'\n         STCM  R14,B'0011',S99TULNG\n         BCT   R14,*+L'*+6\n         MVC   S99TUPAR(*-*),&UN+1 <<EXECUTED>>\n         EX    R14,*-6             MOVE IN UNIT NAME\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - DCB REFERENCE\n&NAME   @TU2C  &DR,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU2C  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"DR\" = LABEL OF DCB REFERENCE\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&DR' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         XR    R14,R14\n         IC    R14,&DR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG(R4,R14)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALDCBDS) BUILD TU 2C - DCB REFERENCE\n         MVC   S99TUNUM,=XL2'1'\n         STCM  R14,B'0011',S99TULNG\n         BCT   R14,*+L'*+6\n         MVC   S99TUPAR(*-*),&DR+1 <<EXECUTED>>\n         EX    R14,*-6             MOVE IN DSNAME\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n         LA    R3,L'S99TUPTR(R3)\n.END     MEND\n         MACRO           BUILD S99 RB - DSORG\n&NAME   @TU3C  &DO,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU3C  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"DO\" = LABEL OF DSORG\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&DO' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+2(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALDSORG) BUILD TU 3C - DSORG\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(2)\n         MVC   S99TUPAR(1),&DO     MOVE IN DSORG\n         MVI   S99TUPAR+1,0\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - BLKSIZE\n&NAME   @TU30  &SZ,&DFLT,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU30  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"SZ\" = LABEL OF BLKSIZE\n.*                     DFLT= LABEL OF DEFAULT BLKSIZE (OPTIONAL)\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&SZ' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+2(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALBLKSZ) BUILD TU 30 - BLKSIZE\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(2)\n         AIF   ('&DFLT' NE '').G\n         MVC   S99TUPAR(L'&SZ),&SZ MOVE IN BLKSIZE\n         AGO   .H\n.G       OC    &DFLT,&DFLT\n         BZ    *+L'*+6\n         MVC   &DFLT,&SZ           MOVE IN DEFAULT BLKSIZE\n         MVC   S99TUPAR(L'&DFLT),&DFLT MOVE IN BLKSIZE\n.H       AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - LRECL\n&NAME   @TU42  &LL,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU42  ...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"LL\" = LABEL OF LRECL\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&LL' NE '').OK\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+2(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALLRECL) BUILD TU 42 - LRECL\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(2)\n         MVC   S99TUPAR(2),&LL     MOVE IN LRECL\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - RECFM\n&NAME   @TU49  &RF,&SZ,&LL,&TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU49  ...,...,...,TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : \"RF\" = LABEL OF RECFM\n.*                     \"SZ\" = LABEL OF BLKSIZE\n.*                     \"LL\" = LABEL OF LRECL\n.*                     TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n         AIF   ('&RF' NE '').CN\n         MNOTE 8,' 1ST OPERAND MISSING ****************************** '\n         AGO   .END\n.CN      AIF   ('&SZ' NE '').CL\n         MNOTE 8,' 2ND OPERAND MISSING ****************************** '\n         AGO   .END\n.CL      AIF   ('&LL' NE '').OK\n         MNOTE 8,' 3RD OPERAND MISSING ****************************** '\n         AGO   .END\n.OK      ANOP\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+L'S99TUPAR(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALRECFM) BUILD TU 49 - RECFM\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(1)\n         MVC   S99TUPAR(1),&RF     MOVE IN RECFM\n         CLC   &SZ,&LL\n         BNE   *+L'*+8\n         NI    S99TUPAR,255-DS1RECFB SET IT AS RECFM=F\n         B     *+L'*+4\n         OI    S99TUPAR,DS1RECFB   SET IT AS RECFM=FB\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - PERM. ALL. ATTR.\n&NAME   @TU52  &TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU52  TUPAOV=...,TUAOV=....LAST=NO\n.*             WHERE : TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALPERMA) BUILD TU 52 - PERM. ALL. ATTR.\n         MVC   S99TUNUM(L'S99TUNUM),=XL2'0'\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           BUILD S99 RB - RETURN DDNAME\n&NAME   @TU55  &TUPAOV=,&TUAOV=,&LAST=NO\n         GBLC  &PAOVE,&AOVE\n.* SYNTAX :    ...  @TU55  TUPAOV=...,TUAOV=...,LAST=NO\n.*             WHERE : TUPAOV= BRANCH LABEL FOR TEXT UNITS POINTERS\n.*                             AREA OVERFLOW\n.*                     TUAOV= BRANCH LABEL FOR UNITS AREA OVERFLOW\n.*                     LAST=YES TO SKIP @S99N GENERATION (NEXT)\n&NAME    CL    R3,ALRBTP+8\n         AIF   ('&TUPAOV' NE '').B\n         AIF   ('&PAOVE' NE '').A\n         MNOTE 8,' TUPAOV= MISSING ********************************** '\n         AGO   .END\n.A       BNL   &PAOVE\n         AGO   .C\n.B       BNL   &TUPAOV\n.C       ST    R4,S99TUPTR\n         LA    R0,L'S99TUKEY+L'S99TUNUM+L'S99TULNG+8(R4)\n         CL    R0,ALRBTU+8\n         AIF   ('&TUAOV' NE '').E\n         AIF   ('&AOVE' NE '').D\n         MNOTE 8,' TUAOV= MISSING *********************************** '\n         AGO   .END\n.D       BNL   &AOVE\n         AGO   .F\n.E       BNL   &TUAOV\n.F       MVC   S99TUKEY,=AL2(DALRTDDN) BUILD TU 55 - RETURN DDNAME\n         MVC   S99TUNUM,=XL2'1'\n         MVC   S99TULNG,=AL2(8)\n         MVC   S99TUPAR(8),=CL8' ' RESET DDNAME RETURN FIELD\n         AIF   ('&LAST' EQ 'YES').END\n        @S99N  ,\n.END     MEND\n         MACRO           VECTOR COMMUNICATIONS.\n&NAME   @VCOM  &DUMMY\n.* SYNTAX :    ...  @VCOM  ,\n&NAME    DS    0F\nASRVC    DS    A\nAUSD     DS    A\nASOK     DS    A\nAWIZ     DS    A\nATLPFX   DS    A\nATLDSN   DS    A\nAINDV    DS    A\nDDSTART  DS    A\nDDEND    DS    A\nUSERSS   DS    A\nUSERSE   DS    A\nGROUPSS  DS    A\nGROUPSE  DS    A\nAUTOS    DS    A\nLFLTB    DS    A\nLFLTB#   EQU   2                   TABLE ELEMENT'S LENGTH\nLFLTB$   EQU   1                   NAME'S LENGTH (COMPARE)\nSELTB    DS    A\nINDTB    DS    A\nINDTB#   EQU   7                   TABLE ELEMENT'S LENGTH\nINDTB$   EQU   4                   NAME'S LENGTH (COMPARE)\nXTSTFM   DS    XL1\nXTSTFX   DS    XL1\n         DS    AL1\nLGNKW    DS    AL1\n         DS    0F                  SET FULLWORD ALIGNMENT\nVCOML    EQU   *-&NAME             VECTOR COMMUNICATIONS CHECK LENGTH\n         MEND\n         MACRO           WORK-AREAS COMMUNICATIONS\n&NAME   @WAC   &DUMMY\n.* SYNTAX :    ...  @WAC  ,\nWACOM    DSECT ,\nAOCKR    DS    A\nZGRNM    DS    CL8\nZUSID    DS    CL8\nZTDSI    DS    XL3\nZXDSI    DS    XL3\nZSWSTTS  DS    XL1\nZGNKW    DS    XL1 ...\n         MEND\n         MACRO           QUEUE DESCRIPTOR BLOCK.\n&NAME    IHAQDB     &DUMMY\n.*\n.* PURPOSE :   SUPPLY IBM MACRO IHAQDB I DID'NT FOUND IN SYS1.MACLIB\n.* ---------   NOR SYS1.MODGEN.\n.*\n.* AUTHOR :    P.A. MOINIL\n.* --------    COMPUTING CENTRE\n.*             J.R.C. - ISPRA ESTABLISHMENT\n.*             21020 ISPRA (VA), ITALY\n.*\n         AIF   ('&NAME' EQ '').A\n&NAME    DSECT ,                   QUEUE DESCRIPTOR BLOCK\n         AGO   .B\n.A       ANOP\nQDB      DSECT ,                   QUEUE DESCRIPTOR BLOCK\n.B       ANOP\nQDBQDB   DS    CL4                 ACRONYM IN EBCDIC 'QDB '\nQDBATTR  DS    XL2                 QUEUE ATTRIBUTES\nQDBRV001 DS    H                   RESERVED\nQDBNELMS DS    F                   NUMBER OF ELEMENTS ON QUEUE\nQDBFELMP DS    A                   POINTER TO FIRST ELEMENT\nQDBLELMP DS    A                   POINTER TO LAST ELEMENT\nQDBFPTDS DS    H                   FORWARD POINTER DISPLACEMENT\nQDBBPTDS DS    H                   BACKWARD POINTER DISPLACEMENT\nQDBPRSZ  DS    H                   PRIORITY FIELD SIZE\nQDBPRDS  DS    H                   PRIORITY FIELD DISPLACEMENT\nQDBRV002 DS    A                   RESERVED\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLOMAC": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943o\\x00\\x943o\\x10\\x13\\x05O\\x05O\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-02T00:00:00", "modifydate": "1994-12-02T10:13:00", "lines": 1359, "newlines": 1359, "modlines": 0, "user": "SYSPAJA"}, "text": "         MACRO           AUTOMATIC COMMANDS SELECTION\n        @AC    &TX\n         GBLB  &ACSWS,&ACSWE\n         LCLA  &Z\n.* SYNTAX :    @AC  '... STATEMENTS TEXT ...'\n         AIF   (NOT &ACSWS).CGN\n         AIF   (&ACSWE).CGN\n         AIF   ('&TX'(1,1) NE '''').ERR1\n&Z       SETA  K'&TX\n         AIF   ('&TX'(&Z,1) NE '''').ERR2\n         DC    C&TX\n         AGO   .END\n.CGN     MNOTE 8,' CANNOT GENERATE THE DATA HERE ******************** '\n         AGO   .END\n.ERR1    MNOTE 8,' INITIAL QUOTE MISSING **************************** '\n         AGO   .END\n.ERR2    MNOTE 8,' FINAL QUOTE MISSING ****************************** '\n.END     MEND\n         MACRO           AUTOMATIC COMMANDS SELECTION\n        @ACS   &DUMMY\n         GBLB  &ACSWS\n         GBLC  &ACLBL\n         LCLC  &Z\n.* SYNTAX :    @ACS  ,   START OF TABLE\n         AIF   (NOT &ACSWS).A\n         MNOTE 8,' REPEATED START OF TABLE (ONLY ONCE ALLOWED) ****** '\n         AGO   .END\n.A       ANOP\n&ACSWS   SETB  1\n&Z       SETC  'IHB'.'&SYSNDX'.'S'\n&ACLBL   SETC  'IHB'.'&SYSNDX'.'E'\nAUTOS    DC    A(&Z,1,&ACLBL)      TABLE SCAN POINTERS\n&Z       DC    CL1' '              START OF TABLE\n.END     MEND\n         MACRO           AUTOMATIC COMMANDS SELECTION\n        @ACE   &DUMMY\n         GBLB  &ACSWS,&ACSWE\n         GBLC  &ACLBL\n.* SYNTAX :    @ACE  ,   END OF TABLE\n         AIF   (&ACSWS).A\n         MNOTE 8,' START OF TABLE HAS NOT BEEN DEFINED ************** '\n         AGO   .END\n.A       AIF   (&ACSWE).B\n&ACSWE   SETB  1\n&ACLBL   DC    CL1' '              END OF TABLE\n         AGO   .END\n.B       MNOTE 8,' REPEATED END OF TABLE (ONLY ONCE ALLOWED) ******** '\n.END     MEND\n         MACRO           ALIAS(ES) PROCESS INFORMATION\n&NAME   @AL    &ALIAS,&DDN=,&UNLESS=\n         GBLB  &ALSWSU,&ALSWEU,&ALSWSG,&ALSWEG\n         LCLA  &M,&N,&Z\n.* SYNTAX :    ...  @AL  ALIAS,DDN=...          ,UNLESS=...\n.*                             DDN=(...,...,...),UNLESS=(...,...,...)\n         AIF   (NOT &ALSWSU).CHK\n         AIF   (NOT &ALSWEU).GCD\n.CHK     AIF   (NOT &ALSWSG).CGN\n         AIF   (&ALSWEG).CGN\n.GCD     ANOP\n&M       SETA  1\n&N       SETA  1\n         AIF   ('&NAME' NE '').A\n         MNOTE 8,' NAME MISSING (IT IS MANDATORY) ******************* '\n         AGO   .END\n.A       AIF   ('&ALIAS' NE '').B\n         MNOTE 8,' ALIAS NAME MISSING (IT IS MANDATORY) ************* '\n         AGO   .END\n.B       AIF   ('&DDN(&M)' NE '').C\n         MNOTE 8,' DD-NAME(S) MISSING ( AT LEAST ONE IS MANDATORY) ** '\n         AGO   .END\n.C       ANOP\n&M       SETA  &M+1\n         AIF   ('&DDN(&M)' NE '').C\n&M       SETA  &M-1\n.D       AIF   ('&UNLESS(&N)' EQ '').E\n&N       SETA  &N+1\n         AGO   .D\n.E       ANOP\n&N       SETA  &N-1\n         DC    CL8'&NAME',CL8'&ALIAS',AL1(&M,&N)\n&Z       SETA  1\n.F       DC    CL8'&DDN(&Z)'\n&Z       SETA  &Z+1\n         AIF   (&Z LE &M).F\n&Z       SETA  0\n.G       AIF   (&Z EQ &N).END\n&Z       SETA  &Z+1\n         DC    CL8'&UNLESS(&Z)'\n         AGO   .G\n.CGN     MNOTE 8,' CANNOT GENERATE THE DATA HERE ******************** '\n.END     MEND\n         MACRO           ALIAS(ES) PROCESS INFORMATION\n        @ALE   &DUMMY\n         GBLB  &ALSWSU,&ALSWEU,&ALSWSG,&ALSWEG\n         GBLC  &ALUNM,&ALGNM\n.* SYNTAX :    @ALE  ,   END OF TABLE\n         AIF   (&ALSWSU).A\n         AIF   (&ALSWSG).B\n         MNOTE 8,' NO TABLE STARTED ********************************* '\n         AGO   .END\n.A       ANOP\n&ALSWSU  SETB  0\n&ALSWEU  SETB  1\n&ALUNM.E DC    XL1'0'              END OF TABLE MARKER\n         AGO   .END\n.B       ANOP\n&ALSWSG  SETB  0\n&ALSWEG  SETB  1\n&ALGNM.E DC    XL1'0'              END OF TABLE MARKER\n.END     SPACE 1\n         MEND\n         MACRO           ALIAS(ES) PROCESS INFORMATION\n&NAME   @ALS   &DUMMY\n         GBLB  &ALSWSU,&ALSWEU,&ALSWSG,&ALSWEG\n         GBLC  &ALUNM,&ALGNM\n.* SYNTAX :    ...  @ALS  ,   START OF TABLE\n         AIF   ('&NAME' NE '').A\n         MNOTE 8,' NAME MISSING (IT IS MANDATORY) ******************* '\n         AGO   .END\n.A       AIF   ('&NAME' EQ 'USERS').B\n         AIF   ('&NAME' EQ 'GROUPS').D\n         MNOTE 8,' INVALID NAME (\"USERS\" OR \"GROUPS\" ONLY ALLOWED) ** '\n         AGO   .END\n.B       AIF   (&ALSWSU).C\n         AIF   (&ALSWEU).C\n         AIF   (&ALSWSG).F\n&ALSWSU  SETB  1\n&ALUNM   SETC  '&NAME'\n&ALUNM.S DS    0F                  START OF USER-ID TABLE\n         AGO   .END\n.C       MNOTE 8,' REPEATED NAME (\"USERS\" IS ALLOWED ONCE ONLY) ***** '\n         AGO   .END\n.D       AIF   (&ALSWSG).E\n         AIF   (&ALSWEG).E\n         AIF   (&ALSWSU).G\n&ALSWSG  SETB  1\n&ALGNM   SETC  '&NAME'\n&ALGNM.S DS    0F                  START OF GROUP TABLE\n         AGO   .END\n.E       MNOTE 8,' REPEATED NAME (\"GROUPS\" IS ALLOWED ONCE ONLY) **** '\n         AGO   .END\n.F       MNOTE 8,' PREVIOUS \"GROUPS\" TABLE IS NOT ENDED ************* '\n         AGO   .END\n.G       MNOTE 8,' PREVIOUS \"USERS\" TABLE IS NOT ENDED ************** '\n.END     MEND\n         MACRO           CHECK INTERNAL KEYWORD=VALUE DEFAULTS\n        @CHK   &DUMMY\n         GBLC  &DMSVOL,&MXLCIT,&MXALUS,&MXALGR\n         GBLC  &PU,&PV,&PA,&PP,&PS,&PD,&PB\n         GBLC  &WU,&WA,&WP,&WS,&WD,&WR\n         GBLC  &CU,&CA,&CP,&CS,&CB\n         GBLC  &EU,&EA,&EP,&ES\n         GBLC  &STV\n.* SYNTAX :    ...  @CHK  ,\n        @CHKV  &DMSVOL,DMSVOL\n        @CHKS  &MXLCIT,MXLCIT\n&MXLCIT  SETC  '&STV'\n        @CHKS  &MXALUS,MXALUS\n&MXALUS  SETC  '&STV'\n        @CHKS  &MXALGR,MXALGR\n&MXALGR  SETC  '&STV'\n        @CHKC  &PU,PU,8\n        @CHKV  &PV,PV\n        @CHKA  &PA,PA\n        @CHKN  &PP,PP\n        @CHKN  &PS,PS\n        @CHKN  &PD,PD\n        @CHKN  &PB,PB\n        @CHKC  &WU,WU,8\n        @CHKA  &WA,WA\n        @CHKN  &WP,WP\n        @CHKN  &WS,WS\n        @CHKN  &WD,WD\n        @CHKC  &WR,WR,44\n        @CHKC  &CU,CU,8\n        @CHKA  &CA,CA\n        @CHKN  &CP,CP\n        @CHKN  &CS,CS\n        @CHKN  &CB,CB\n        @CHKC  &EU,EU,8\n        @CHKN  &EA,EA\n        @CHKN  &EP,EP\n        @CHKN  &ES,ES\n         MEND\n         MACRO           CHECK ALLOC. (USED BY @CHK MACRO ONLY)\n        @CHKA  &VV,&VN\n         AIF   ('&VV' EQ 'CYL').END\n         AIF   ('&VV' EQ 'TRK').END\n         PRINT ON\n         MNOTE 8,' &VN : NOT CYL OR TRK ***************************** '\n         PRINT OFF\n.END     MEND\n         MACRO           CHECK CHAR. (USED BY @CHK MACRO ONLY)\n        @CHKC  &VV,&VN,&VL\n         LCLA  &J\n&J       SETA  K'&VV\n         AIF   (&J LE &VL).END\n         PRINT ON\n         MNOTE 8,' &VN : MORE THAN &VL CHAR. LONG ******************* '\n         PRINT OFF\n.END     MEND\n         MACRO           CHECK NUMERIC (USED BY @CHK MACRO ONLY)\n        @CHKN  &VV,&VN,&S=N\n         GBLC  &STV\n         LCLA  &J,&M,&L\n&J       SETA  K'&VV\n         AIF   (&J NE 0).B\n         PRINT ON\n         MNOTE 8,' &VN : NULL VALUE ********************************* '\n         AGO   .SCC\n.B       AIF   (&J LE 5).C\n         PRINT ON\n         MNOTE 8,' &VN : MORE THAN 5 CHAR. LONG ********************* '\n         AGO   .SCC\n.C       ANOP\n&M       SETA  0\n&L       SETA  1\n.D       AIF   ('&VV'(&L,1) LT '0').ERR\n         AIF   ('&VV'(&L,1) GT '9').ERR\n         AIF   ('&VV'(&L,1) EQ '0').E\n&M       SETA  &M+1\n.E       AIF   (&L EQ &J).F\n&L       SETA  &L+1\n         AGO   .D\n.F       AIF   (&M NE 0).END\n         PRINT ON\n         MNOTE 8,' &VN : ZERO VALUE ********************************* '\n         AGO   .SCC\n.ERR     PRINT ON\n         MNOTE 8,' &VN : NOT NUMERIC ******************************** '\n.SCC     PRINT OFF\n         AIF   ('&S'  NE 'Y').END\n&STV     SETC  '=ERROR='\n.END     MEND\n         MACRO           CHECK SPACE (USED BY @CHK MACRO ONLY)\n        @CHKS  &VV,&VN\n         GBLC  &STV\n         LCLA  &II\n         LCLC  &TT\n&II      SETA  K'&VV\n         AIF   ('&VV'(&II,1) EQ 'K').A\n&STV     SETC  '&VV'\n        @CHKN  &VV,&VN,S=Y\n         AGO   .END\n.A       ANOP\n&TT      SETC  '&VV'(1,&II-1)\n&STV     SETC  '&TT'.'*1024'\n        @CHKN  &TT,&VN,S=Y\n.END     MEND\n         MACRO           CHECK VOLUME (USED BY @CHK MACRO ONLY)\n        @CHKV  &VV,&VN\n         LCLA  &J\n&J       SETA  K'&VV\n         AIF   (&J EQ 6).END\n         PRINT ON\n         MNOTE 8,' &VN : NOT 6 CHAR. LONG *************************** '\n         PRINT OFF\n.END     MEND\n         MACRO           CHECK OPERANDS KEYWORDS NAMES LIST\n&NAME   @CHKO  &NOMATCH=,&MATCH=\n         GBLA  &TSON\n         GBLC  &TSOP(100)\n         LCLA  &L,&N,&T,&X\n         LCLB  &IW\n         LCLC  &KW,&BW\n.* SYNTAX :    ...  @CHKO  ...,...,..., <- KEYWORDS NAMES LIST\n.*                         NOMATCH=...,MATCH=...\n&NAME    L     R15,AOCKR\n         BASR  R6,R15\n         AIF   ('&NOMATCH' NE '').A1\n&IW      SETB  1\n&BW      SETC  'IHB'.'&SYSNDX'\n         B     &BW                 +0 = NO MATCH\n         AGO   .A2\n.A1      ANOP\n         B     &NOMATCH            +0 = NO MATCH\n.A2      AIF   ('&MATCH' NE '').B2\n         AIF   (&IW).B1\n&IW      SETB  1\n&BW      SETC  'IHB'.'&SYSNDX'\n.B1      B     &BW                 +4 = OK, MATCH\n         AGO   .B3\n.B2      ANOP\n         B     &MATCH              +4 = OK, MATCH\n.B3      ANOP\n&N       SETA  N'&SYSLIST\n         AIF   (&N EQ 0).D1\n&L       SETA  1\n.C1      ANOP\n         AIF   ('&SYSLIST(&L)' EQ '').C9\n         AIF   ('&SYSLIST(&L)'(1,1) NE '''').C3\n&T       SETA  K'&SYSLIST(&L)\n         AIF   ('&SYSLIST(&L)'(&T,1) EQ '''').C2\n         MNOTE 8,' KEYWORD NAME &L : FINAL QUOTE MISSING ************ '\n         AGO   .END\n.C2      ANOP\n&T       SETA  &T-2\n&KW      SETC  '&SYSLIST(&L)'(2,&T)\n         AGO   .C4\n.C3      ANOP\n&KW      SETC  '&SYSLIST(&L)'\n.C4      ANOP\n&T       SETA  K'&KW-1\n         AIF   (&T LT 50).C5\n         MNOTE 8,' KEYWORD NAME &L : TOO LONG (MAX. = 50 CHAR.) ***** '\n         AGO   .END\n.C5      ANOP\n&X       SETA  1\n.C6      AIF   ('&TSOP(&X)' EQ '').C8\n         AIF   ('&TSOP(&X)' NE '&KW').C7\n         MNOTE 8,' OPERAND &KW IS A DUPLICATE KEYWORD NAME ********** '\n         AGO   .END\n.C7      ANOP\n&X       SETA  &X+1\n         AIF   (&X LE &TSON).C6\n         MNOTE 8,' INTERNAL MACRO GLOBAL CHECK TABLE OVERFLOW ******* '\n         MNOTE 8,' = INCREMENT DIMENSION OF GLOBAL VARIABLE TSOP    = '\n         MNOTE 8,' = AND SET THE GLOBAL VARIABLE TSON EQUAL TO IT.  = '\n         AGO   .END\n.C8      ANOP\n&TSOP(&X) SETC '&KW'\n         DC    AL1(&T),C'&KW'\n.C9      ANOP\n&L       SETA  &L+1\n         AIF   (&L LE &N).C1\n.D1      DC    AL1(255)            END OF LIST\n         AIF   (&IW).D2\n         DS    0H                  FORCE HALWORD ALIGNMENT\n         AGO   .END\n.D2      ANOP\n&BW      DS    0H                  FORCE HALWORD ALIGNMENT\n.END     MEND\n         MACRO           DD-NAME LIBRARIES INFORMATION\n&DDN    @DD    &ID=,&DSORG=,&RECFM=,&LRECL=,&SP=\n         GBLB  &DDSWS,&DDSWE\n         LCLA  &Z\n         LCLB  &SW\n         LCLC  &UID,&UORG,&URFM,&ULRL,&USPA\n.* SYNTAX :    DDN  @DD  ID=...,DSORG=...,RECFM=...,LRECL=...,SP=...\n         AIF   (NOT &DDSWS).DGN\n         AIF   (NOT &DDSWE).A\n.DGN     MNOTE 8,' CANNOT GENERATE THE DATA HERE ******************** '\n         AGO   .END\n.A       ANOP\n&SW      SETB  0\n&Z       SETA  K'&DDN\n         AIF   (&Z LE 8).B\n         MNOTE 8,' DDN : DD-NAME TOO LONG (MAX.CHAR. 8) ************* '\n&SW      SETB  1\n.B       ANOP\n&Z       SETA  K'&ID\n         AIF   ('&ID'(1,1) NE '''').B2\n         AIF   ('&ID'(&Z,1) NE '''').B1\n         AIF   (&Z GT 22).B3\n&Z       SETA  &Z-2\n&UID     SETC  '&ID'(2,&Z)\n         AGO   .C\n.B1      MNOTE 8,' ID : LIBRARY-ID INCORRECTLY QUOTED *************** '\n&SW      SETB  1\n         AGO   .C\n.B2      AIF   (&Z GT 20).B3\n&UID     SETC  '&ID'\n         AGO   .C\n.B3      MNOTE 8,' ID : LIBRARY-ID TOO LONG (MAX.CHAR. 20) ********** '\n&SW      SETB  1\n.C       AIF   ('&DSORG' NE '').C1\n&UORG    SETC  '0'\n         AGO   .D\n.C1      AIF   ('&DSORG' NE 'PO').C2\n&UORG    SETC  'DS1DSGPO'\n         AGO   .D\n.C2      AIF   ('&DSORG' NE 'PS').C3\n&UORG    SETC  'DS1DSGPS'\n         AGO   .D\n.C3      AIF   ('&DSORG' NE 'DA').C4\n&UORG    SETC  'DS1DSGDA'\n         AGO   .D\n.C4      MNOTE 8,' INVALID DSORG SPECIFIED (PO, PS OR DA) *********** '\n&SW      SETB  1\n.D       AIF   ('&DSORG' EQ 'DA').D1\n         AIF   ('&DSORG' NE '').D2\n.D1      ANOP\n&URFM    SETC  '0'\n&ULRL    SETC  '0'\n         AIF   ('&RECFM' EQ '').D1A\n         MNOTE 0,' RECFM SPECIFIED, BUT WILL BE IGNORED ************* '\n.D1A     AIF   ('&LRECL' EQ '').E\n         AIF   ('&LRECL' EQ '0').E\n         MNOTE 0,' LRECL SPECIFIED, BUT WILL BE IGNORED ************* '\n         AGO   .E\n.D2      AIF   ('&RECFM' NE '').D2A\n         MNOTE 0,' RECFM MISSING (DEFAULT F USED) ******************* '\n         AGO   .D2B\n.D2A     AIF   ('&RECFM' NE 'F').D3\n.D2B     ANOP\n&URFM    SETC  'DS1RECFF'\n         AIF   ('&LRECL' NE '').D2C\n         MNOTE 0,' LRECL MISSING (DEFAULT OF 80 USED) *************** '\n&ULRL    SETC  '80'\n         AGO   .E\n.D2C     AIF   (&LRECL GT 32767).D2D\n&ULRL    SETC  '&LRECL'\n         AGO   .E\n.D2D     MNOTE 8,' INVALID LRECL SPECIFIED (MAX. VALUE 32767) ******* '\n&SW      SETB  1\n         AGO   .E\n.D3      AIF   ('&RECFM' NE 'V').D4\n&URFM    SETC  'DS1RECFV'\n         AIF   ('&LRECL' NE '').D3A\n         MNOTE 0,' LRECL MISSING (DEFAULT OF 255 USED) ************** '\n&ULRL    SETC  '255'\n         AGO   .E\n.D3A     AIF   (&LRECL GT 32767).D3B\n&ULRL    SETC  '&LRECL'\n         AGO   .E\n.D3B     MNOTE 8,' INVALID LRECL SPECIFIED (MAX. VALUE 32767) ******* '\n&SW      SETB  1\n         AGO   .E\n.D4      AIF   ('&RECFM' NE 'U').D5\n&URFM    SETC  'DS1RECFU'\n         AIF   ('&LRECL' EQ '').D4A\n         MNOTE 0,' LRECL SPECIFIED, BUT WILL BE IGNORED ************* '\n.D4A     ANOP\n&ULRL    SETC  '0'\n         AGO   .E\n.D5      MNOTE 8,' INVALID RECFM SPECIFIED (F, V OR U) ************** '\n&SW      SETB  1\n.E       AIF   ('&SP' EQ '').E2\n         AIF   ('&SP' EQ 'C').E1\n         AIF   ('&SP' EQ 'D').E1\n         AIF   ('&SP' EQ 'E').E1\n         AIF   ('&SP' EQ 'T').E1\n         AIF   ('&SP' EQ 'W').E1\n         MNOTE 8,' INVALID SP= SPECIFIED (ONLY C/D/E/T/W) *********** '\n         AGO   .END\n.E1      ANOP\n&USPA    SETC  '&SP'\n         AGO   .F\n.E2      ANOP\n&USPA    SETC  ''\n.F       AIF   (&SW).END\n         AIF   ('&USPA' NE '').F1\n         DC    A(0)\n         AGO   .F2\n.F1      DC    0F'0',CL4'&USPA'\n.F2      DC    CL8'&DDN'\n         DC    CL20'&UID'\n         DC    AL1(&UORG)\n         DC    AL1(&URFM)\n         DC    H'&ULRL'\n.END     MEND\n         MACRO           DD-NAME LIBRARIES INFORMATION\n        @DDTE  &DUMMY\n         GBLB  &DDSWS,&DDSWE\n.* SYNTAX :    @DDTE  ,   END OF TABLE\n         AIF   (&DDSWS).A\n         MNOTE 8,' START OF TABLE HAS NOT BEEN DEFINED ************** '\n         AGO   .END\n.A       AIF   (NOT &DDSWE).B\n         MNOTE 8,' REPEATED END OF TABLE (ONLY ONCE ALLOWED) ******** '\n         AGO   .END\n.B       ANOP\n&DDSWE   SETB  1\nDDEND    EQU   *                   END OF TABLE ADDRESS\n.END     MEND\n         MACRO           DD-NAME LIBRARIES INFORMATION\n        @DDTS  &DUMMY\n         GBLB  &DDSWS\n.* SYNTAX :    @DDTS  ,   START OF TABLE\n         AIF   (NOT &DDSWS).A\n         MNOTE 8,' REPEATED START OF TABLE (ONLY ONCE ALLOWED) ****** '\n         AGO   .END\n.A       ANOP\n&DDSWS   SETB  1\nDDSTART  DS    0F                  START OF TABLE\nLIB#DSF$ EQU   X'FFFFFFFF',4       END OF LIST INDICATOR\n.END     MEND\n         MACRO           INTERNAL DEFAULTS VALUES.\n        @DEFDV &DUMMY\n         GBLB  &ITSWT\n         GBLC  &ITPFX,&ITDSN\n         GBLC  &DMSVOL,&MXLCIT,&MXALUS,&MXALGR\n         GBLC  &PU,&PV,&PA,&PP,&PS,&PD,&PB\n         GBLC  &WU,&WA,&WP,&WS,&WD,&WR\n         GBLC  &CU,&CA,&CP,&CS,&CB\n         GBLC  &EU,&EA,&EP,&ES\n.* SYNTAX :    @DEFDV  ,\n         AIF   (&ITSWT).A\n         MNOTE 8,' TABLES LIBRARY DATA-SET NAME MISSING ************* '\n         AGO   .END\n.A       ANOP\nATLPFX   DC    AL1(L'TLPFX)\nTLPFX    DC    C'&ITPFX'\nATLDSN   DC    AL1(L'TLDSN)\nTLDSN    DC    C'&ITDSN'\n         CNOP  0,4\nAINDV    DC    A(&MXLCIT)  - - - - +\n         DC    A(&MXALUS)          +\n         DC    A(&MXALGR)          +\n         DC    AL1(L'IYPUN)        +\nIYPUN    DC    C'&PU'              +\n         DC    CL6'&PV'            +\n         DC    AL2(DAL&PA)         +\n         DC    AL3(&PP)            +\n         DC    AL3(&PS)            +\n         DC    AL3(&PD)            +\n         DC    AL2(&PB)            +\n         DC    AL1(L'IYWUN)        +\nIYWUN    DC    C'&WU'              +\n         DC    AL2(DAL&WA)         +\n         DC    AL3(&WP)            +\n         DC    AL3(&WS)            +\n         DC    AL3(&WD)            +\n         DC    AL1(L'IYWRN)        +\nIYWRN    DC    C'&WR'              +\n         DC    AL1(L'IYCUN)        +\nIYCUN    DC    C'&CU'              +\n         DC    AL2(DAL&CA)         +\n         DC    AL3(&CP)            +\n         DC    AL3(&CS)            +\n         DC    AL2(&CB)            +\n         DC    AL1(L'IYEUN)        +\nIYEUN    DC    C'&EU'              +\n         DC    AL3(&EA)            +\n         DC    AL3(&EP)            +\n         DC    AL3(&ES)            +\n         DC    CL6'&DMSVOL'        + - DEFAULT VALUES\n.END     MEND\n         MACRO           DEFINE FLAGS\n        @DEFF\n         GBLC  &FIN1(8)\n         LCLA  &L,&N,&T\n         LCLC  &FB(8),&IN\n.* SYNTAX :    @DEFF  ...,...,... <- LIST OF FLAGS NAME (MAX. = 8,\n.*                                        LENGTH OF NAME = 1 CHAR.)\n&FB(1)   SETC  '80'\n&FB(2)   SETC  '40'\n&FB(3)   SETC  '20'\n&FB(4)   SETC  '10'\n&FB(5)   SETC  '08'\n&FB(6)   SETC  '04'\n&FB(7)   SETC  '02'\n&FB(8)   SETC  '01'\n&N       SETA  N'&SYSLIST\n         AIF   (&N NE 0).A\n         MNOTE 8,' OPERANDS MISSING ********************************* '\n         AGO   .END\n.A       AIF   (&N LE 8).B\n         MNOTE 4,' TOO MANY OPERANDS (8 CHAR. ASSUMED) ************** '\n&N       SETA  8\n.B       ANOP\n&L       SETA  1\n         SPACE 1\n.C       AIF   ('&SYSLIST(&L)' EQ '').E\n&IN      SETC  '&SYSLIST(&L)'\n         AIF   (K'&IN EQ 1).C1\n         MNOTE 8,' &IN : INVALID (ONLY 1 CHAR. ALLOWED) ************* '\n         AGO   .E\n.C1      AIF   ('&IN' NE '$').D\n         MNOTE 8,' &IN : INVALID (RESERVED : END OF LIST) *********** '\n         AGO   .E\n.D       ANOP\n&T       SETA  1\n.D1      AIF   ('&FIN1(&T)' NE '&IN').D2\n         MNOTE 8,' &IN : DUPLICATE CHAR. DEFINITION ***************** '\n         AGO   .E\n.D2      AIF   (&T EQ 8).D3\n&T       SETA  &T+1\n         AGO   .D1\n.D3      ANOP\n&T       SETA  &L\n         AIF   ('&FIN1(&T)' EQ '').DS1S\n         MNOTE 8,' FLAG &IN OVERLAPS &FIN1(&T) ********************** '\n         AGO   .E\n.DS1S    ANOP\n&FIN1(&T) SETC '&IN'\nLIB#DSF&IN EQU   X'&FB(&T)'\n.E       ANOP\n&L       SETA  &L+1\n         AIF   (&L LE &N).C\n.END     MEND\n         MACRO           DEFINE INDICATORS\n        @DEFI\n         GBLC  &TIN1(8),&TIN2(8),&TIN3(8)\n         LCLA  &L,&N,&S,&T\n         LCLB  &SW\n         LCLC  &FB(8),&IN\n.* SYNTAX :    @DEFI  ..., <- INDICATOR BYTE NUMBER (1, 2 OR 3)\n.*                    ...,...,... <- LIST OF INDICATORS NAME (MAX. = 8,\n.*                                   LENGTH OF NAME = MAX. 4 CHAR.)\n&FB(1)   SETC  '80'\n&FB(2)   SETC  '40'\n&FB(3)   SETC  '20'\n&FB(4)   SETC  '10'\n&FB(5)   SETC  '08'\n&FB(6)   SETC  '04'\n&FB(7)   SETC  '02'\n&FB(8)   SETC  '01'\n&N       SETA  N'&SYSLIST\n         AIF   (&N NE 0).A\n         MNOTE 8,' OPERANDS MISSING ********************************* '\n         AGO   .END\n.A       AIF   (&N LE 9).A0\n         MNOTE 4,' TOO MANY OPERANDS (IND.NO. + 8 NAMES ASSUMED) **** '\n&N       SETA  9\n.A0      AIF   ('&SYSLIST(1)' NE '').A1\n         MNOTE 8,' INDICATOR BYTE NUMBER MISSING ******************** '\n         AGO   .END\n.A1      AIF   ('&SYSLIST(1)' EQ '1').A2\n         AIF   ('&SYSLIST(1)' EQ '2').A3\n         AIF   ('&SYSLIST(1)' EQ '3').A4\n         MNOTE 8,' INVALID INDICATOR BYTE NUMBER ******************** '\n         AGO   .END\n.A2      ANOP\n&S       SETA  1\n         AGO   .B\n.A3      ANOP\n&S       SETA  2\n         AGO   .B\n.A4      ANOP\n&S       SETA  3\n.B       AIF   (&N EQ 1).ERR\n&L       SETA  2\n         SPACE 1\n.C       AIF   ('&SYSLIST(&L)' EQ '').E\n&SW      SETB  1\n&IN      SETC  '&SYSLIST(&L)'\n         AIF   (K'&IN LE 4).D\n         MNOTE 8,' &IN : NAME TOO LONG (MAX.CHAR. 4) **************** '\n         AGO   .E\n.D       ANOP\n&T       SETA  1\n.D1      AIF   ('&TIN1(&T)' EQ '&IN').DUP\n         AIF   ('&TIN2(&T)' EQ '&IN').DUP\n         AIF   ('&TIN3(&T)' NE '&IN').D2\n.DUP     MNOTE 8,' &IN : DUPLICATE NAME DEFINITION ****************** '\n         AGO   .E\n.D2      AIF   (&T EQ 8).D3\n&T       SETA  &T+1\n         AGO   .D1\n.D3      ANOP\n&T       SETA  &L-1\n         AIF   (&S EQ 3).DS3\n         AIF   (&S EQ 2).DS2\n         AIF   ('&TIN1(&T)' EQ '').DS1S\n         MNOTE 8,' INDICATOR &IN OVERLAPS &TIN1(&T) ***************** '\n         AGO   .E\n.DS1S    ANOP\n&TIN1(&T) SETC '&IN'\n         AGO   .DX\n.DS2     ANOP\n         AIF   ('&TIN2(&T)' EQ '').DS2S\n         MNOTE 8,' INDICATOR &IN OVERLAPS &TIN2(&T) ***************** '\n         AGO   .E\n.DS2S    ANOP\n&TIN2(&T) SETC '&IN'\n         AGO   .DX\n.DS3     ANOP\n         AIF   ('&TIN3(&T)' EQ '').DS3S\n         MNOTE 8,' INDICATOR &IN OVERLAPS &TIN3(&T) ***************** '\n         AGO   .E\n.DS3S    ANOP\n&TIN3(&T) SETC '&IN'\n.DX      ANOP\nIND#&IN  EQU   X'&FB(&T)'\n.E       ANOP\n&L       SETA  &L+1\n         AIF   (&L LE &N).C\n         AIF   (&SW).END\n.ERR     MNOTE 8,' NO DEFINITION NAME(S) SPECIFIED ****************** '\n.END     MEND\n         MACRO           DD-NAME LIBRARIES INFORMATION\n&NAME   @DS    &DSN,&TYPE=,&OPT=,&SP=\n         GBLB  &DDSWS,&DDSWE\n         GBLC  &TIN1(8),&TIN2(8),&TIN3(8)\n         GBLC  &FIN1(8)\n         LCLA  &T,&Z\n         LCLB  &SW\n         LCLC  &UDSN,&UFLG,&UFLW,&UTY1,&UTY2,&UTY3,&USPA\n.* SYNTAX :    ...  @DS  DSN=...,TYPE=...,OPT=...,SP=...\n         AIF   (NOT &DDSWS).DGN\n         AIF   (NOT &DDSWE).GCD\n.DGN     MNOTE 8,' CANNOT GENERATE THE DATA HERE ******************** '\n         AGO   .END\n.GCD     AIF   ('&DSN' NE '').A\n&UDSN    SETC  '<T>'\n         AGO   .B\n.A       ANOP\n&Z       SETA  K'&DSN\n         AIF   ('&DSN'(1,1) NE '''').A2\n         AIF   ('&DSN'(&Z,1) NE '''').A1\n         AIF   (&Z GT 46).A3\n&Z       SETA  &Z-2\n&UDSN    SETC  '&DSN'(2,&Z)\n         AGO   .B\n.A1      MNOTE 8,' DSN : DSNAME INCORRECTLY QUOTED ****************** '\n&SW      SETB  1\n         AGO   .B\n.A2      AIF   (&Z GT 44).A3\n&UDSN    SETC  '&DSN'\n         AGO   .B\n.A3      MNOTE 8,' DSN : DSNAME TOO LONG (MAX.CHAR. 44) ************* '\n&SW      SETB  1\n.B       ANOP\n&Z       SETA  1\n&UFLG    SETC  '0'\n.BL      AIF   ('&OPT(&Z)' EQ '').C\n         AIF   (K'&OPT(&Z) EQ 1).B1\n         MNOTE 8,' OPT : INVALID OPTION (ONLY 1 CHAR. ALLOWED) ****** '\n         AGO   .B4\n.B1      ANOP\n&T       SETA  1\n.B2      AIF   ('&OPT(&Z)' EQ '&FIN1(&T)').B5\n         AIF   (&T EQ 8).B3\n&T       SETA  &T+1\n         AGO   .B2\n.B3      MNOTE 8,' OPT : UNDEFINED OPTION SPECIFIED ***************** '\n.B4      ANOP\n&SW      SETB  1\n         AGO   .C\n.B5      ANOP\n&UFLW    SETC  'LIB#DSF'.'&OPT(&Z)'\n         ANOP\n&Z       SETA  &Z+1\n         AIF   ('&UFLG' NE '0').BN\n&UFLG    SETC  '&UFLW'\n         AGO   .BL\n.BN      ANOP\n&UFLG    SETC  '&UFLG+&UFLW'\n         AGO   .BL\n.C       ANOP\n&Z       SETA  1\n&UTY1    SETC  '0'\n&UTY2    SETC  '0'\n&UTY3    SETC  '0'\n.CL      AIF   ('&TYPE(&Z)' EQ '').D\n&T       SETA  1\n.C1      AIF   ('&TYPE(&Z)' EQ '&TIN1(&T)').C1S\n         AIF   (&T EQ 8).C1N\n&T       SETA  &T+1\n         AGO   .C1\n.C1S     ANOP\n&T       SETA  1\n         AGO   .C4\n.C1N     ANOP\n&T       SETA  1\n.C2      AIF   ('&TYPE(&Z)' EQ '&TIN2(&T)').C2S\n         AIF   (&T EQ 8).C2N\n&T       SETA  &T+1\n         AGO   .C2\n.C2S     ANOP\n&T       SETA  2\n         AGO   .C4\n.C2N     ANOP\n&T       SETA  1\n.C3      AIF   ('&TYPE(&Z)' EQ '&TIN3(&T)').C3S\n         AIF   (&T EQ 8).CERR\n&T       SETA  &T+1\n         AGO   .C3\n.C3S     ANOP\n&T       SETA  3\n         AGO   .C4\n.CERR    MNOTE 8,' TYPE : &TYPE(&Z) INVALID ************************* '\n&SW      SETB  1\n         AGO   .CT\n.C4      AIF   (&T NE 1).C5\n         AIF   ('&UTY1' NE '0').C4N\n&UTY1    SETC  'IND#&TYPE(&Z)'\n         AGO   .CT\n.C4N     ANOP\n&UTY1    SETC  '&UTY1+IND#&TYPE(&Z)'\n         AGO   .CT\n.C5      AIF   (&T NE 2).C6\n         AIF   ('&UTY2' NE '0').C5N\n&UTY2    SETC  'IND#&TYPE(&Z)'\n         AGO   .CT\n.C5N     ANOP\n&UTY2    SETC  '&UTY2+IND#&TYPE(&Z)'\n         AGO   .CT\n.C6      AIF   ('&UTY3' NE '0').C6N\n&UTY3    SETC  'IND#&TYPE(&Z)'\n         AGO   .CT\n.C6N     ANOP\n&UTY3    SETC  '&UTY3+IND#&TYPE(&Z)'\n.CT      ANOP\n&Z       SETA  &Z+1\n         AGO   .CL\n.D       AIF   ('&SP' EQ '').D2\n         AIF   ('&SP' EQ 'P').D1\n         MNOTE 8,' INVALID SP= SPECIFIED (ONLY P) ******************* '\n         AGO   .END\n.D1      ANOP\n&USPA    SETC  '&SP'\n         AGO   .E\n.D2      ANOP\n&USPA    SETC  ''\n.E       AIF   (&SW).END\n         AIF   ('&USPA' EQ '').E1\n&NAME    DC    0F'0',CL4'&USPA'\n         AGO   .E2\n.E1      ANOP\n&NAME    DC    A(0)\n.E2      DC    AL1(&UFLG)\n         DC    AL1(&UTY1,&UTY2,&UTY3)\n         DC    CL44'&UDSN'\n.END     MEND\n         MACRO           DD-NAME LIBRARIES INFORMATION\n&NAME   @DSE   &DUMMY\n.* SYNTAX :    ... @DSE  ,   END OF TABLE\n&NAME    DC    AL4(LIB#DSF$)       END OF LIST MARKER\n         SPACE 1\n         MEND\n         MACRO           GENERATE PRODUCTS, ... FIELDS FOR CHECK\n        @GNKW\n         GBLC  &TIN1(8),&TIN2(8)\n         LCLA  &Z,&L\n         LCLC  &S\n.* SYNTAX :    @GNKW  ,\n&Z       SETA  1\nSGNKW    EQU   *\n.A       AIF   ('&TIN1(&Z)' EQ '').B\n&S       SETC  '&TIN1(&Z)'\nKW&S     DS    XL1                 +\n.B       AIF   (&Z EQ 8).C\n&Z       SETA  &Z+1\n         AGO   .A\n.C       ANOP\n&Z       SETA  1\n.D       AIF   ('&TIN2(&Z)' EQ '').E\n&S       SETC  '&TIN2(&Z)'\nKW&S     DS    XL1                 +\n.E       AIF   (&Z EQ 8).END\n&Z       SETA  &Z+1\n         AGO   .D\n.END     ANOP\nLGNKW    EQU   (*-SGNKW)-1\n         MEND\n         MACRO           TEST KEYWORD/USER/GROUP/TERMINAL\n&NAME   @IF    &KEYWORD=,&USER=,&GROUP=,&TERMINAL=,&GOTO=,&ELSE=\n         LCLA  &X,&Z\n         LCLC  &NM\n.* SYNTAX :    ...  @IF  KEYWORD=(... <- KEYWORD NAME\n.*                                U), <- UNSPECIFIED OPTION\n.*                                N   <- NO OPTION\n.*                                S   <- OPTION\n.*                  OR : USER=...,\n.*                       USER=(...,...,...),\n.*                  OR : GROUP=...,\n.*                       GROUP=(...,...,...),\n.*                  OR : TERMINAL=S, <- SCREEN\n.*                                L  <- LINE\n.*                                B  <- BACKGROUND\n.*                       GOTO=..., <- BRANCH IF EQUAL\n.*                       ELSE=...  <- BRANCH IF NOT EQUAL\n         AIF   ('&KEYWORD' EQ '').B1\n         AIF   ('&USER' EQ '').A1\n         MNOTE 8,' USER= CANNOT BE SPECIFED WITH KEYWORD= *********** '\n         AGO   .END\n.A1      AIF   ('&GROUP' EQ '').A2\n         MNOTE 8,' GROUP= CANNOT BE SPECIFED WITH KEYWORD= ********** '\n         AGO   .END\n.A2      AIF   ('&TERMINAL' EQ '').A3\n         MNOTE 8,' TERMINAL= CANNOT BE SPECIFED WITH KEYWORD= ******* '\n         AGO   .END\n.A3      AIF   (N'&KEYWORD EQ 2).A4\n         MNOTE 8,' KEYWORD= INVALID ********************************* '\n         AGO   .END\n.A4      AIF   ('&KEYWORD(1)' NE '').A5\n         MNOTE 8,' KEYWORD NAME MISSING ***************************** '\n         AGO   .END\n.A5      AIF   (K'&KEYWORD(1) LE 6).A6\n         MNOTE 8,' KEYWORD NAME TOO LONG (MAX. CHAR. 6) ************* '\n         AGO   .END\n.A6      AIF   ('&KEYWORD(2)' NE '').A7\n         MNOTE 8,' KEYWORD VALUE MISSING **************************** '\n         AGO   .END\n.A7      ANOP\n&NM      SETC  'KW'.'&KEYWORD(1)'\n         AIF   ('&KEYWORD(2)' EQ 'U').A8\n         AIF   ('&KEYWORD(2)' EQ 'N').A9\n         AIF   ('&KEYWORD(2)' EQ 'S').A10\n         MNOTE 8,' KEYWORD VALUE INVALID (NOT U, N OR S) ************ '\n         AGO   .END\n.A8      ANOP\n&NAME    CLI   &NM,0               UNSPECIFIED OPERAND\n         AGO   .A11\n.A9      ANOP\n&NAME    CLI   &NM,1               NULLIFIED OPERAND\n         AGO   .A11\n.A10     ANOP\n&NAME    CLI   &NM,2               SPECIFIED OPERAND\n.A11     AIF   ('&GOTO' NE '').A12\n         AIF   ('&ELSE' NE '').A13\n         MNOTE 8,' GOTO= OR ELSE= MISSING *************************** '\n         AGO   .END\n.A12     BE    &GOTO\n         AIF   ('&ELSE' EQ '').END\n         B     &ELSE\n         AGO   .END\n.A13     BNE   &ELSE\n         AGO   .END\n.B1      AIF   ('&USER' EQ '').C1\n         AIF   ('&GROUP' EQ '').B2\n         MNOTE 8,' GROUP= CANNOT BE SPECIFED WITH USER= ************* '\n         AGO   .END\n.B2      AIF   ('&TERMINAL' EQ '').B3\n         MNOTE 8,' TERMINAL= CANNOT BE SPECIFED WITH USER= ********** '\n         AGO   .END\n.B3      AIF   ('&GOTO' NE '').B4\n         AIF   ('&ELSE' NE '').B4\n         MNOTE 8,' GOTO= OR ELSE= MISSING *************************** '\n         AGO   .END\n.B4      AIF   ('&USER'(1,1) EQ '(').B6\n&NAME    CLC   USID,=CL8'&USER'\n         AIF   ('&GOTO' EQ '').B5\n         BE    &GOTO\n         AIF   ('&ELSE' EQ '').END\n         B     &ELSE\n         AGO   .END\n.B5      BNE   &ELSE\n         AGO   .END\n.B6      ANOP\n&X       SETA  N'&USER\n&Z       SETA  1\n&NM      SETC  '&NAME'\n.B7      AIF   ('&USER(&Z)' NE '').B8\n         MNOTE 8,' USER= (&Z) MISSING ******************************* '\n         AGO   .END\n.B8      ANOP\n&NM      CLC   USID,=CL8'&USER(&Z)'\n&NM      SETC  ''\n         AIF   (&Z EQ &X).B11\n         AIF   ('&GOTO' NE '').B9\n         BE    *+L'*+(10*(&X-&Z))\n         AGO   .B10\n.B9      BE    &GOTO\n.B10     ANOP\n&Z       SETA  &Z+1\n         AGO   .B7\n.B11     AIF   ('&GOTO' NE '').B12\n         BNE   &ELSE\n         AGO   .END\n.B12     BE    &GOTO\n         AIF   ('&ELSE' EQ '').END\n         B     &ELSE\n         AGO   .END\n.C1      AIF   ('&GROUP' EQ '').D1\n         AIF   ('&TERMINAL' EQ '').C2\n         MNOTE 8,' TERMINAL= CANNOT BE SPECIFED WITH GROUP= ********* '\n         AGO   .END\n.C2      AIF   ('&GOTO' NE '').C3\n         AIF   ('&ELSE' NE '').C3\n         MNOTE 8,' GOTO= OR ELSE= MISSING *************************** '\n         AGO   .END\n.C3      AIF   ('&GROUP'(1,1) EQ '(').C5\n&NAME    CLC   GRNM,=CL8'&GROUP'\n         AIF   ('&GOTO' EQ '').C4\n         BE    &GOTO\n         AIF   ('&ELSE' EQ '').END\n         B     &ELSE\n         AGO   .END\n.C4      BNE   &ELSE\n         AGO   .END\n.C5      ANOP\n&X       SETA  N'&GROUP\n&Z       SETA  1\n&NM      SETC  '&NAME'\n.C6      AIF   ('&GROUP(&Z)' NE '').C7\n         MNOTE 8,' GROUP= (&Z) MISSING ****************************** '\n         AGO   .END\n.C7      ANOP\n&NM      CLC   GRNM,=CL8'&GROUP(&Z)'\n&NM      SETC  ''\n         AIF   (&Z EQ &X).C10\n         AIF   ('&GOTO' NE '').C8\n         BE    *+L'*+(10*(&X-&Z))\n         AGO   .C9\n.C8      BE    &GOTO\n.C9      ANOP\n&Z       SETA  &Z+1\n         AGO   .C6\n.C10     AIF   ('&GOTO' NE '').C11\n         BNE   &ELSE\n         AGO   .END\n.C11     BE    &GOTO\n         AIF   ('&ELSE' EQ '').END\n         B     &ELSE\n         AGO   .END\n.D1      AIF   ('&TERMINAL' NE '').D2\n         MNOTE 8,' KEYWORD= , USER= , GROUP= OR TERMINAL= MISSING *** '\n         AGO   .END\n.D2      ANOP\n&NAME    TM    SWSTTS,TDSPLY       TERMINAL TYPE ?\n         AIF   ('&GOTO' NE '').D3\n         AIF   ('&ELSE' NE '').D7\n         MNOTE 8,' GOTO= OR ELSE= MISSING *************************** '\n         AGO   .END\n.D3      AIF   ('&TERMINAL' NE 'S').D4\n         BO    &GOTO               IT IS A SCREEN TERMINAL\n         AGO   .D6\n.D4      AIF   ('&TERMINAL' EQ 'L').D5\n         AIF   ('&TERMINAL' NE 'B').D9\n.D5      BZ    &GOTO               IT IS A LINE TERMINAL OR BACKGROUND\n.D6      AIF   ('&ELSE' EQ '').END\n         B     &ELSE\n         AGO   .END\n.D7      AIF   ('&TERMINAL' NE 'S').D8\n         BZ    &ELSE               IT IS A LINE TERMINAL OR BACKGROUND\n         AGO   .END\n.D8      AIF   ('&TERMINAL' EQ 'L').D10\n         AIF   ('&TERMINAL' EQ 'B').D10\n.D9      MNOTE 8,' TERMINAL= INVALID (NOT S, L OR B) **************** '\n         AGO   .END\n.D10     BO    &ELSE               IT IS A SCREEN TERMINAL\n.END     MEND\n         MACRO           PASS REGISTER MANAGEMENT\n&NAME   @PASS  &REG\n.* SYNTAX :    ...  @PASS  ... <- REGISTER\n         AIF   ('&REG' EQ '13').A\n         AIF   ('&REG' EQ 'R13').A\n         AIF   ('&REG' EQ '14').A\n         AIF   ('&REG' EQ 'R14').A\n         AIF   ('&REG' EQ '15').A\n         AIF   ('&REG' NE 'R15').B\n.A       MNOTE 8,' &REG : INVALID REGISTER ************************** '\n         AGO   .END\n.B       ANOP\n&NAME    L     R14,4(R13)          GET PREVIOUS SAVE AREA\n         ST    &REG,20+(&REG*4)(R14) PASS REGISTER CONTENTS\n.END     MEND\n         MACRO           SET INDICATORS\n&NAME   @SETI  &A,&F,&GOTO=\n         GBLC  &TIN1(8),&TIN2(8),&TIN3(8)\n         LCLA  &Z\n         LCLC  &S\n.* SYNTAX :    ...  @SETI  ..., <- TARGET FIELD\n.*                         ..., <- INDICATOR NAME\n.*                         GOTO=... <- UNCONDITIONAL BRANCH\n         AIF   ('&A' NE '').A\n         MNOTE 8,' ADDRESS OPERAND MISSING ************************** '\n         AGO   .END\n.A       AIF   ('&F' NE '').A0\n         MNOTE 8,' DEFINITION NAME MISSING ************************** '\n         AGO   .END\n.A0      ANOP\n&Z       SETA  1\n&S       SETC  '0'\n.A1      AIF   ('&TIN1(&Z)' EQ '&F').D\n         AIF   (&Z EQ 8).B\n&Z       SETA  &Z+1\n         AGO   .A1\n.B       ANOP\n&Z       SETA  1\n&S       SETC  '1'\n.B1      AIF   ('&TIN2(&Z)' EQ '&F').D\n         AIF   (&Z EQ 8).C\n&Z       SETA  &Z+1\n         AGO   .B1\n.C       ANOP\n&Z       SETA  1\n&S       SETC  '2'\n.C1      AIF   ('&TIN3(&Z)' EQ '&F').D\n         AIF   (&Z EQ 8).ERR\n&Z       SETA  &Z+1\n         AGO   .C1\n.ERR     MNOTE 8,' &F : UNDEFINED NAME ****************************** '\n         AGO   .END\n.D       ANOP\n&NAME    OI    &A+&S,IND#&F\n         AIF   ('&GOTO' EQ '').END\n         B     &GOTO\n.END     MEND\n         MACRO           SET KEYWORD\n&NAME   @SETKW &KW,&VK,&GOTO=\n.* SYNTAX :    ...  @SETKW  ..., <- KEYWORD NAME\n.*                          ..., <- U = UNSPECIFIED OPTION\n.*                                  N = NO OPTION\n.*                                  S = OPTION\n.*                          GOTO=... <- UNCONDITIONAL BRANCH\n         AIF   ('&KW' NE '').A\n         MNOTE 8,' KEYWORD MISSING ********************************** '\n         AGO   .END\n.A       AIF   (K'&KW LE 6).B\n         MNOTE 8,' &KW : NAME TOO LONG (MAX.CHAR. 6) **************** '\n         AGO   .END\n.B       AIF   ('&VK' NE '').C\n         MNOTE 8,' KEYWORD VALUE MISSING **************************** '\n         AGO   .END\n.C       AIF   ('&VK' EQ 'U').D\n         AIF   ('&VK' EQ 'N').E\n         AIF   ('&VK' EQ 'S').F\n         MNOTE 8,' &VK : INVALID KEYWORD VALUE (U, N OR S ONLY) ***** '\n         AGO   .END\n.D       ANOP\n&NAME    MVI   KW&KW,0             SET AS UNSPECIFIED OPERAND\n         AGO   .G\n.E       ANOP\n&NAME    MVI   KW&KW,1             SET AS NULLIFIED OPERAND\n         AGO   .G\n.F       ANOP\n&NAME    MVI   KW&KW,2             SET AS SPECIFIED OPERAND\n.G       AIF   ('&GOTO' EQ '').END\n         B     &GOTO\n.END     MEND\n         MACRO           GENERATE FLAGS TABLE\n        @TABF  &DUMMY\n         GBLC  &FIN1(8)\n         LCLA  &Z\n         LCLC  &S\n.* SYNTAX :    @TABF  ,\nLFLTB    DS    0XL2                START OF TABLE\n&Z       SETA  1\n.A       AIF   ('&FIN1(&Z)' EQ '').B\n&S       SETC  '&FIN1(&Z)'\n         DC    CL1'&S',AL1(LIB#DSF&S)\n.B       AIF   (&Z EQ 8).END\n&Z       SETA  &Z+1\n         AGO   .A\n.END     DC    XL1'0'              END OF TABLE\n         MEND\n         MACRO           GENERATE INDICATORS TABLE\n        @TABI  &DUMMY\n         GBLC  &TIN1(8),&TIN2(8),&TIN3(8)\n         LCLA  &Z\n         LCLC  &S\n.* SYNTAX :    @TABI  ,\nINDTB    DS    0XL7                START OF TABLE\n&Z       SETA  1\n.A1      AIF   ('&TIN1(&Z)' EQ '').A2\n&S       SETC  '&TIN1(&Z)'\n         DC    CL4'&S',AL1(IND#&S,0,0)\n.A2      AIF   (&Z EQ 8).B\n&Z       SETA  &Z+1\n         AGO   .A1\n.B       ANOP\n&Z       SETA  1\n.B1      AIF   ('&TIN2(&Z)' EQ '').B2\n&S       SETC  '&TIN2(&Z)'\n         DC    CL4'&S',AL1(0,IND#&S,0)\n.B2      AIF   (&Z EQ 8).C\n&Z       SETA  &Z+1\n         AGO   .B1\n.C       ANOP\n&Z       SETA  1\n.C1      AIF   ('&TIN3(&Z)' EQ '').C2\n&S       SETC  '&TIN3(&Z)'\n         DC    CL4'&S',AL1(0,0,IND#&S)\n.C2      AIF   (&Z EQ 8).END\n&Z       SETA  &Z+1\n         AGO   .C1\n.END     DC    XL1'0'              END OF TABLE\n         MEND\n         MACRO           GENERATE SELECT= TABLE\n        @TABS  &DUMMY\n         GBLC  &TIN1(8),&TIN2(8),&TIN3(8)\n         LCLA  &Z,&L\n         LCLC  &S\n.* SYNTAX :    @TABS  ,\nSELTB    DS    0XL1                START OF TABLE\n&Z       SETA  1\n.A1      AIF   ('&TIN1(&Z)' EQ '').A2\n&S       SETC  '&TIN1(&Z)'\n&L       SETA  K'&S-1\n         DC    AL1(&L),C'&S',AL1(IND#&S,0,0)\n.A2      AIF   (&Z EQ 8).B\n&Z       SETA  &Z+1\n         AGO   .A1\n.B       ANOP\n&Z       SETA  1\n.B1      AIF   ('&TIN2(&Z)' EQ '').B2\n&S       SETC  '&TIN2(&Z)'\n&L       SETA  K'&S-1\n         DC    AL1(&L),C'&S',AL1(0,IND#&S,0)\n.B2      AIF   (&Z EQ 8).C\n&Z       SETA  &Z+1\n         AGO   .B1\n.C       ANOP\n&Z       SETA  1\n.C1      AIF   ('&TIN3(&Z)' EQ '').C2\n&S       SETC  '&TIN3(&Z)'\n&L       SETA  K'&S-1\n         DC    AL1(&L),C'&S',AL1(0,0,IND#&S)\n.C2      AIF   (&Z EQ 8).END\n&Z       SETA  &Z+1\n         AGO   .C1\n.END     DC    AL1(255)            END OF TABLE\n         MEND\n         MACRO           TEST A FLAG\n        @TESTF &F\n         GBLC  &FIN1(8)\n         LCLA  &Z\n         LCLC  &S\n.* SYNTAX :    @TESTF  ... <- FLAG NAME\n         AIF   ('&F' NE '').A\n         MNOTE 8,' OPERAND MISSING ********************************** '\n         AGO   .END\n.A       AIF   (K'&F EQ 1).B\n         MNOTE 8,' OPERAND INVALID (ONLY 1 CHAR. ALLOWED) *********** '\n         AGO   .END\n.B       ANOP\n&Z       SETA  1\n.C       AIF   ('&FIN1(&Z)' EQ '&F').E\n         AIF   (&Z EQ 8).D\n&Z       SETA  &Z+1\n         AGO   .C\n.D       MNOTE 8,' &F : OPERAND UNDEFINED *************************** '\n         AGO   .END\n.E       ANOP\n&S       SETC  '&FIN1(&Z)'\n         DC    AL1(LIB#DSF&S)\n.END     MEND\n         MACRO           DEFINE DEFAULT LIBRARY DATA-SET NAME.\n        @TLDSN &IP=,&RN=\n         GBLB  &ITSWT\n         GBLC  &ITPFX,&ITDSN\n         LCLA  &Z\n         LCLC  &P,&R\n.* SYNTAX :    @TLDSN  IP=...,RN=...\n         AIF   (NOT &ITSWT).A\n         MNOTE 8,' DUPLICATE DEFINITION ***************************** '\n         AGO   .END\n.A       ANOP\n&ITSWT   SETB  1\n         AIF   ('&IP' NE '').B\n         MNOTE 8,' INITIAL PREFIX : IP= MISSING ********************* '\n         AGO   .END\n.B       AIF   ('&RN' NE '').C\n         MNOTE 8,' REST OF NAME : RN= MISSING *********************** '\n         AGO   .END\n.C       ANOP\n&Z       SETA  K'&IP\n         AIF   ('&IP'(1,1) NE '''').D\n         AIF   ('&IP'(&Z,1) EQ '''').E\n         MNOTE 8,' IP= : FINAL QUOTE MISSING ************************ '\n         AGO   .END\n.D       AIF   ('&IP'(&Z,1) NE '''').F\n         MNOTE 8,' IP= : INITIAL QUOTE MISSING ********************** '\n         AGO   .END\n.E       ANOP\n&P       SETC  '&IP'(2,&Z-2)\n         AGO   .G\n.F       ANOP\n&P       SETC  '&IP'\n.G       ANOP\n&Z       SETA  K'&RN\n         AIF   ('&RN'(1,1) NE '''').H\n         AIF   ('&RN'(&Z,1) EQ '''').I\n         MNOTE 8,' RN= : FINAL QUOTE MISSING ************************ '\n         AGO   .END\n.H       AIF   ('&RN'(&Z,1) NE '''').J\n         MNOTE 8,' RN= : INITIAL QUOTE MISSING ********************** '\n         AGO   .END\n.I       ANOP\n&R       SETC  '&RN'(2,&Z-2)\n         AGO   .K\n.J       ANOP\n&R       SETC  '&RN'\n.K       ANOP\n&ITPFX   SETC  '&P'                INITIAL PREFIX\n&ITDSN   SETC  '.'.'&R'            REST OF THE NAME\n.END     MEND\n         MACRO           VECTOR COMMUNICATIONS.\n        @VCOM  &DUMMY\n         LCLC  &Z\n.* SYNTAX :    @VCOM  ,\n&Z       SETC  'IHB'.'&SYSNDX'\n         CNOP  0,8\n&Z       DC    A(ASRVC)\n         DC    A(AUSD)\n         DC    A(ASOK)\n         DC    A(AWIZ)\n         DC    A(ATLPFX,ATLDSN)\n         DC    A(AINDV)\n         DC    A(DDSTART,DDEND)\n         DC    A(USERSS,USERSE)\n         DC    A(GROUPSS,GROUPSE)\n         DC    A(AUTOS)\n         DC    A(LFLTB)\n         DC    A(SELTB)\n         DC    A(INDTB)\n        @TESTF M\n        @TESTF X\n         DC    AL1(0)\n         DC    AL1(LGNKW)\n         DC    A(*-&Z)\nASRVC   $XENT  BASE=R9,ID=DYLOCOM,TYPE=RENT\n         L     R3,=A(WKLEN)\n         LTR   R1,R1\n         BNZ   ASRVCF\n        GETMAIN R,LV=(R3)\n         LR    R2,R1\n         LR    R4,R1\n         XR    R5,R5\n         MVCL  R2,R4\n         B     ASRVCX\nASRVCF  FREEMAIN R,A=(1),LV=(R3)\n         XR    R1,R1\nASRVCX  @PASS  R1\n        $XRET  TYPE=RENT\n         DROP  R9\n        LTORG\n         MEND\n         MACRO           WORK-AREAS COMMUNICATIONS\n&NAME   @WAC   &DUMMY\n.* SYNTAX :    ...  @WAC  ,\n&NAME    DSECT ,\nAOCKR    DS    A\nGRNM     DS    CL8\nUSID     DS    CL8\nTDSI     DS    XL3\nXDSI     DS    XL3\nSWSTTS   DS    XL1\nTDSPLY   EQU   X'01'               TERMINAL IS A SCREEN\n         MEND\n         MACRO           DEFINE WIZARD(S).\n        @WIZ   &WZUSR,&WZGRP\n         LCLA  &I,&N\n.* SYNTAX :    ...  @WIZ  ..., <- SINGLE USER OR USERS LIST\n.*                        ... <- SINGLE GROUP OR GROUPS LIST\n         AIF   ('&WZUSR' NE '').A\n         AIF   ('&WZGRP' NE '').F\n         MNOTE 8,' USER(S) / GROUP(S) MISSING *********************** '\n         AGO   .END\n.A       AIF   ('&WZUSR'(1,1) EQ '(').B\nAWIZ     DC    AL1(1)\n         DC    CL8'&WZUSR'\n         AGO   .E\n.B       ANOP\n&N       SETA  1\n.C       ANOP\n&N       SETA  &N+1\n         AIF   ('&WZUSR(&N)' NE '').C\n&N       SETA  &N-1\n&I       SETA  1\nAWIZ     DC    AL1(&N)\n.D       DC    CL8'&WZUSR(&I)'\n&I       SETA  &I+1\n         AIF   (&I LE &N).D\n.E       AIF   ('&WZGRP' NE '').G\n         DC    AL1(0)\n         AGO   .END\n.F       ANOP\nAWIZ     DC    AL1(0)\n.G       AIF   ('&WZGRP'(1,1) EQ '(').H\n         DC    AL1(1)\n         DC    CL8'&WZGRP'\n         AGO   .END\n.H       ANOP\n&N       SETA  1\n.I       ANOP\n&N       SETA  &N+1\n         AIF   ('&WZGRP(&N)' NE '').I\n&N       SETA  &N-1\n&I       SETA  1\n         DC    AL1(&N)\n.J       DC    CL8'&WZGRP(&I)'\n&I       SETA  &I+1\n         AIF   (&I LE &N).J\n.END     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLOSCO": {"ttr": 5896, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92(/\\x00\\x92(/\\x15\\x00\\x007\\x007\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-08T00:00:00", "modifydate": "1992-10-08T15:00:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "SYSPAJA"}, "text": "*------- DYLON : PRODUCTS SELECTION OPERANDS\n*                MANDATORY : MUST START WITH LABEL \"OPX0\" AND THEN USE\n*                =========== LABELS FROM \"OPX1\" UP TO \"OPX9999\"\n         SPACE 1\nOPX0    @CHKO  NOISPF,NOSPF,NOMATCH=OPX1\n        @IF    KEYWORD=(SPF,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW SPF,N,GOTO=OPNEXT                  SET NO OPTION\nOPX1    @CHKO  ISPF,SPF,NOMATCH=OPX2\n        @IF    KEYWORD=(SPF,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW SPF,S,GOTO=OPNEXT                  SET OPTION\nOPX2    @CHKO  NOINFOSYS,NOIFS,NOIS,NOMATCH=OPX3\n        @IF    KEYWORD=(IFS,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW IFS,N,GOTO=OPNEXT                  SET NO OPTION\nOPX3    @CHKO  INFOSYS,IFS,IS,NOMATCH=OPX4\n        @IF    KEYWORD=(IFS,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW IFS,S,GOTO=OPNEXT                  SET OPTION\nOPX4    @CHKO  NOSMP,NOMATCH=OPX5\n        @IF    KEYWORD=(SMP,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW SMP,N,GOTO=OPNEXT                  SET NO OPTION\nOPX5    @CHKO  SMP,NOMATCH=OPX6\n        @IF    KEYWORD=(SMP,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW SMP,S,GOTO=OPNEXT                  SET OPTION\nOPX6    @CHKO  NOADABAS,NOADA,NOMATCH=OPX7\n        @IF    KEYWORD=(ADA,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW ADA,N,GOTO=OPNEXT                  SET NO OPTION\nOPX7    @CHKO  ADABAS,ADA,NOMATCH=OPX8\n        @IF    KEYWORD=(ADA,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW ADA,S,GOTO=OPNEXT                  SET OPTION\nOPX8    @CHKO  NOMFTS,NOMFT,NOMF,NOMATCH=OPX9\n        @IF    KEYWORD=(MFT,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW MFT,N,GOTO=OPNEXT                  SET NO OPTION\nOPX9    @CHKO  MFTS,MFT,MF,NOMATCH=OPEND\n        @IF    KEYWORD=(MFT,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW MFT,S,GOTO=OPNEXT                  SET OPTION\n         SPACE 1\n*------- DYLOFF : SPECIAL DATA-SET'S STATUS OPERAND\n*                MANDATORY : MUST START WITH LABEL \"OPY0\" AND THEN USE\n*                =========== LABELS FROM \"OPY1\" UP TO \"OPY9999\"\n         SPACE 1\nOPY0    @CHKO  NOSYS,NS,NOMATCH=OPY1\n        @IF    KEYWORD=(SYS,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW SYS,N,GOTO=OPNEXT                  SET NO OPTION\nOPY1    @CHKO  SYS,S,NOMATCH=OPEND\n        @IF    KEYWORD=(SYS,U),ELSE=OPDUPL        CHECK UNSPECIFIED\n        @SETKW SYS,S                              SET OPTION\n        @SETI  TDSI,SYS,GOTO=OPNEXT     SET TO BE DE-ALLOCATED\n         SPACE 1\n*------- DYLON/DYLOFF : SPECIAL OPERANDS (WIZARD)\n*                MANDATORY : MUST START WITH LABEL \"OPZ0\" AND THEN USE\n*                =========== LABELS FROM \"OPZ1\" UP TO \"OPZ9999\"\n         SPACE 1\nOPZ0    @CHKO  SETIFM,NOMATCH=OPZ1\n        @SETI  XDSI,IFM,GOTO=OPNEXT     SAY INFO MANAGER\nOPZ1    @CHKO  SETDMS,NOMATCH=OPEND\n        @SETI  XDSI,DMS,GOTO=OPNEXT     SAY DMS MANAGER\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DYLOUAL": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x0f\\x00\\x944\\x0f\\x11\\x01\\x00\\x02\\x00\\x02\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-06T00:00:00", "modifydate": "1994-12-06T11:01:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "SYSPAJA"}, "text": "SYSTSO2  @AL   SYSTSO1,DDN=(SYSPROC,SYSHELP,                           X\n               ISPPLIB,ISPMLIB,ISPSLIB,ISPTLIB)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYLOUSD": {"ttr": 5900, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x943\\x9f\\x00\\x943\\x9f\\x16\"\\x00?\\x00?\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-05T00:00:00", "modifydate": "1994-12-05T16:22:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "SYSPAJA"}, "text": "*------- SET USER'S SELECTION(S) AND/OR DEFAULTS\n         SPACE 1\n        @SETI  TDSI,SYS            SET TO BE NOT DE-ALLOCATED\n         SPACE 1\n*=== 1. CHECK AND SET SYSTEM USER\n         SPACE 1\n        @IF    GROUP=(SYS1,SYS,OPER),ELSE=TUSD0\n        @SETI  XDSI,SYS            SET SYSTEM\n         SPACE 1\n*=== 2. CHECK TERMINAL TYPE\n         SPACE 1\nTUSD0   @IF    TERMINAL=L,GOTO=TUSD40\n         SPACE 1\n*=== 3. IT IS A SCREEN TERMINAL\n         SPACE 1\n*------ A. CHECK IF ANY OPERAND(S) SPECIFIED\n        @IF    KEYWORD=(ADA,U),ELSE=TUSD20\n        @IF    KEYWORD=(SPF,U),ELSE=TUSD20\n        @IF    KEYWORD=(MFT,U),ELSE=TUSD20\n        @IF    KEYWORD=(IFS,U),ELSE=TUSD20\n        @IF    KEYWORD=(SMP,U),ELSE=TUSD20\n         SPACE 1\n*------ B. NONE SPECIFIED, SET DEFAULTS\n        @SETI  XDSI,SPF            SAY ISPF\n        @IF    GROUP=(SYS1,SYS,OPER),ELSE=USDOK\n        @SETI  XDSI,MFT            SAY MFTS\n        @IF    GROUP=(SYS1,SYS),ELSE=USDOK\n        @SETI  XDSI,IFS            SAY INFO SYSTEM\n        @SETI  XDSI,SMP            SAY SMP\n        @IF    USER=(SYSRACF,SYSDMS),ELSE=TUSD10\n        @SETI  XDSI,DMS,GOTO=USDOK SAY DMS MANAGER\nTUSD10  @IF    USER=(SYSTSO1,SYSTSO2),ELSE=USDOK\n        @SETI  XDSI,IFM,GOTO=USDOK SAY INFO MANAGER\n         SPACE 1\n*------ C. SET ONLY WHAT SPECIFIED AND VALID\nTUSD20  @IF    KEYWORD=(ADA,S),ELSE=TUSD21\n        @SETI  XDSI,ADA            SAY ADABAS\nTUSD21  @IF    KEYWORD=(SPF,S),ELSE=TUSD22\n        @SETI  XDSI,SPF            SAY ISPF\nTUSD22  @IF    KEYWORD=(MFT,S),ELSE=TUSD23\n        @SETI  XDSI,MFT            SAY MFTS\nTUSD23  @IF    GROUP=(SYS1,SYS),ELSE=TUSD30\n        @IF    KEYWORD=(SPF,S),ELSE=USDERR\n        @IF    KEYWORD=(IFS,S),ELSE=TUSD24\n        @SETI  XDSI,IFS            SAY INFO SYSTEM\n        @IF    USER=(SYSTSO1,SYSTSO2),ELSE=TUSD24\n        @SETI  XDSI,IFM            SAY INFO MANAGER\nTUSD24  @IF    KEYWORD=(SMP,S),ELSE=TUSD25\n        @SETI  XDSI,SMP            SAY SMP\nTUSD25  @IF    USER=(SYSRACF,SYSDMS),ELSE=USDOK\n        @SETI  XDSI,DMS,GOTO=USDOK SAY DMS MANAGER\n         SPACE 1\n*------ D. SEE IF ANY INVALID SPECIFICATION\nTUSD30  @IF    KEYWORD=(IFS,U),ELSE=USDERR\n        @IF    KEYWORD=(SMP,U),ELSE=USDERR\n        @IF    KEYWORD=(MFT,S),ELSE=USDOK\n        @IF    KEYWORD=(SPF,S),GOTO=USDOK,ELSE=USDERR\n         SPACE 1\n*=== 4. IT IS NOT A SCREEN TERMINAL (LINE/BACKGROUND)\n         SPACE 1\n*------- IGNORE ALL UNLESS ADABAS REQUEST\nTUSD40  @IF    KEYWORD=(ADA,S),ELSE=USDOK\n        @SETI  XDSI,ADA,GOTO=USDOK SAY ADABAS AND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDV": {"ttr": 5902, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\"/\\x00\\x93\"/\\x12\\x04\\x00R\\x00R\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-10T00:00:00", "modifydate": "1993-08-10T12:04:00", "lines": 82, "newlines": 82, "modlines": 0, "user": "SYSPAJA"}, "text": "*-------------------------------------------------------------------*\n*             I N T E R N A L     D E F I N I T I O N S             *\n*                    V A L U E S     C H A N G E                    *\n*-------------------------------------------------------------------*\n*\n*                        KEYWORDS DESCRIPTION :\n*                        ======================\n*\n* CARD COLUMNS RANGE : COLUMNS 1-72.\n* -------------------- KEYWORD=VALUE MUST RESIDE ENTIRELY IN A CARD.\n*                      AS SOON AS AN ASTERISK IS ENCOUNTERED, IT\n*                      MEANS A COMMENT IN THE REST OF THE CARD.\n* REMARK : ALL KEYWORD=VALUE'S DEFINED BELOW HAVE ALREADY A DEFAULT\n* -------  VALUE ASSIGNED AT THE ASSEMBLY TIME OF \"DYLOCOM\" MODULE,\n*          SO, YOU MAY OMIT THOSE YOU NEED NOT CHANGE.\n*\n*------- LOCAL DEFINITIONS -----------------------------------------*\n*\n*        VOLUME SERIAL NUMBER USED BY DMS TO ARCHIVE DATA-SETS,\n*        AND THUS, USED TO FORCE THEIR RESTORE :\n  DMSVOL=SHADOW\n*\n*        DD-NAME'S LIBRARIES CONCATENATIONS INFO'S TABLE AREA\n*        SPACE LENGTH :\n  MXLCIT=10K\n*\n*        USER-ID'S ALIASES PROCESS TABLE AREA SPACE LENGTH :\n  MXALUS=512\n*\n*        GROUPS ALIASES PROCESS TABLE AREA SPACE LENGTH :\n  MXALGR=512\n*\n*------- SPECIAL PROCESSINGS DEFINITIONS ---------------------------*\n*\n* DS/SP=P : ALLOCATION OF NEW ISPF PROFILE\n*              (ALSO USED TO ALLOCATE MFTTLIB DD OF MFTS)\n*        EQUIVALENT JCL ALLOCATION :\n*              //ISPPROF  DD UNIT=&PU,VOL=SER=&PV,\n*              //            DSN=...,SPACE=(&PA,(&PP,&PS,&PD)),\n*              //            DCB=(RECFM=FB,LRECL=80,BLKSIZE=&PB),\n*              //            DISP=(NEW,CATLG)\n*        NOTE : DSN=... (DS=), RECFM=F AND LRECL=80 MUST BE DEFINED\n*               IN MEMBER DDT... (BLKSIZE IS DEFINED BELOW).\n  PU=DISK      *    UNIT\n  PV=USER00    *    VOLUME SERIAL NUMBER\n  PA=TRK       *    SPACE ALLOCATION (CYL OR TRK)\n  PP=1         *    PRIMARY SPACE\n  PS=1         *    SECONDARY SPACE\n  PD=3         *    DIRECTORY BLOCKS\n  PB=3120      *    BLOCK-SIZE\n*\n* DD/SP=W : ALLOCATION OF ISPF WORK FILE\n*        EQUIVALENT JCL ALLOCATION :\n*              //ISPWORK  DD UNIT=&WU,SPACE=(&WA,(&WP,&WS,&WD)),\n*              //            DCB=&WR\n  WU=VIO       *    UNIT\n  WA=CYL       *    SPACE ALLOCATION (CYL OR TRK)\n  WP=1         *    PRIMARY SPACE\n  WS=2         *    SECONDARY SPACE\n  WD=5         *    DIRECTORY BLOCKS\n  WR=EUR1.TABLES.DATA    *    DCB REFERENCE DATA-SET NAME\n*\n* DD/SP=C - ALLOCATION OF ISPF CONTROL FILE\n*        EQUIVALENT JCL ALLOCATION :\n*              //ISPCTL.. DD UNIT=&CU,SPACE=(&CA,(&CP,&CS)),\n*              //            DCB=(RECFM=FB,BLKSIZE=&CB,LRECL=80)\n*        NOTE : RECFM=F AND LRECL=80 MUST BE DEFINED IN MEMBER\n*               DDT... (BLKSIZE IS DEFINED BELOW).\n  CU=SYSDA     *    UNIT\n  CA=CYL       *    SPACE ALLOCATION (CYL OR TRK)\n  CP=1         *    PRIMARY SPACE\n  CS=1         *    SECONDARY SPACE\n  CB=6080      *    BLOCK-SIZE\n*\n* DD/SP=E : ALLOCATION OF TSO EDIT WORK FILE\n*        EQUIVALENT JCL ALLOCATION :\n*              //SYSEDIT  DD UNIT=&EU,DSN=&EDIT,\n*              //            SPACE=(&EA,(&EP,&ES))\n  EU=SYSDA     *    UNIT\n  EA=6121      *    BLOCKS ALLOCATION\n  EP=20        *    PRIMARY SPACE\n  ES=10        *    SECONDARY SPACE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KMX": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x17\\x00\\x01/\\x01/\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T17:00:00", "lines": 303, "newlines": 303, "modlines": 0, "user": "SYSPAJA"}, "text": "KMX      TITLE 'KEYWORDS MASK FUNCTION.'\nKMX      START 0\n         SPACE 1\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                    *\n* PURPOSE :    PRIVATE USE ONLY.                                     *\n* ---------                                                          *\n*                                                                    *\n* AUTHOR :     P.A. MOINIL                                           *\n* --------     COMPUTING CENTRE                                      *\n*              J.R.C. - ISPRA ESTABLISHMENT                          *\n*              21020 ISPRA (VA), ITALY                               *\n*                                                                    *\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R11,R12)\n         PRINT GEN\n         EJECT\n        CALL   ISPLINK,(VDEF,LL,BUFFER,TYPEC,LENBUF),VL\n         LTR   R15,R15\n         BNZ   ERR1\n        CALL   ISPLINK,(VDEF,DL,LINENO,TYPEF,LEN4),VL\n         LTR   R15,R15\n         BNZ   ERR2\n        CALL   ISPLINK,(EDIT,LEN0,EDMAC),VL\n         LTR   R15,R15\n         BNZ   ERR3\n        CALL   ISPLINK,(EDIT,LEN0,EDDST),VL\n         LTR   R15,R15\n         BNZ   ERR4\n        CALL   ISPLINK,(EDIT,LEN0,EDBDS),VL\n         LTR   R15,R15\n         BNZ   ERR5\n         OC    LINENO,LINENO\n         BZ    ERR6\n         OC    COLNO,COLNO\n         BZ    ERR6\n         L     R3,RIGHTB\n         CL    R3,LENBUF\n         BH    ERR7\n        CALL   ISPLINK,(EDIT,LEN0,EDGLN),VL\n         LTR   R15,R15\n         BNZ   ERR8\n        CALL   ISPLINK,(EDIT,LEN0,EDMSK),VL\n         LTR   R15,R15\n         BNZ   ERR9\n         MVC   WKAREA,BUFFER\n         LA    R2,1\n         LA    R4,WKAREA-1\n         ALR   R3,R4\n         AL    R4,LEFTB\n         CLI   0(R4),C'*'\n         BE    *+L'*+8\n         CLI   0(R4),C' '\n         BNE   *+L'*+8\n         BXLE  R4,R2,*-8\n         B     ERR10\n         LR    R14,R4\n         BXLE  R4,R2,*+L'*+4\n         B     ERR11\n         CLI   0(R4),C' '\n         BNE   *-12\n         LR    R15,R4\n         SLR   R15,R14\n         CH    R15,=Y(L'KEYW)\n         BH    ERR11\n         BCT   R15,*+L'*+6\n         MVC   KEYW(*-*),0(R14)\n         EX    R15,*-6\n         BXLE  R4,R2,*+L'*+4\n         B     ERR10\n         CLI   0(R4),C' '\n         BE    *-12\n         LR    R14,R4\n         BXLE  R4,R2,*+L'*+4\n         B     ERR11\n         CLI   0(R4),C' '\n         BNE   *-12\n         LR    R15,R4\n         SLR   R15,R14\n         CH    R15,=Y(L'KEYW)\n         BH    ERR11\n         BCT   R15,*+L'*+6\n         MVC   KEYW+L'KEYW(*-*),0(R14)\n         EX    R15,*-6\n         MVI   SWDE1,2\n         MVI   SWDE2,2\n         MVI   SWDE3,2\n         XC    TSWRD(8),=XL8'A4C4CD2F1D9C7664'\n         OI    SWDE1,1\n         XI    SWDE2,3\n         OI    SWDE3,1\nAGAIN    L     R2,TSWRD\n         XR    R3,R3\n         LA    R8,15\n         LR    R6,R8\n         SLL   R6,28\n         XR    R7,R7\n         LR    R4,R2\n         SRL   R4,*-*\nSWDE1    EQU   *-1\n         XR    R2,R4\n         NR    R2,R6\n         STM   R2,R3,DBLWRD\n         BASR  R1,0\n         LM    R4,R5,TSWRD\n         NR    R2,R6\n         NR    R3,R7\n         SRDL  R6,4\n         NR    R4,R6\n         NR    R5,R7\n         SRDL  R2,4\n         XR    R4,R2\n         XR    R5,R3\n         SLDL  R2,*-*\nSWDE2    EQU   *-1\n         XR    R4,R2\n         XR    R5,R3\n         NR    R4,R6\n         NR    R5,R7\n         LR    R2,R4\n         LR    R3,R5\n         SRDL  R2,*-*\nSWDE3    EQU   *-1\n         XR    R4,R2\n         XR    R5,R3\n         NR    R4,R6\n         NR    R5,R7\n         LM    R2,R3,DBLWRD\n         OR    R2,R4\n         OR    R3,R5\n         STM   R2,R3,DBLWRD\n         BCTR  R8,R1\n         CLI   SWDE1,2\n         BE    *+L'*+22\n         NI    SWDE1,2\n         XI    SWDE2,3\n         NI    SWDE3,2\n         MVC   TSWRD,DBLWRD\n         B     AGAIN\n         MVI   SWDE1,*-*\n         MVI   SWDE2,*-*\n         MVI   SWDE3,*-*\n         CLI   DBLWRD,C' '\n         BNE   *+L'*+14\n         MVC   DBLWRD(L'DBLWRD-1),DBLWRD+1\n         MVI   DBLWRD+L'DBLWRD-1,C' '\n         B     *-18\n         LA    R1,PLST1\n         L     R15,=V(SETKEY)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR12\n         LA    R1,PLST3\n         L     R15,=V(ENCIPH)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR13\n         LA    R1,PLST2\n         L     R15,=V(SETKEY)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR12\n         LA    R1,PLST3\n         L     R15,=V(ENCIPH)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR13\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER\n         MVC   BUFFER+9(2),=CL2'DC'\n         MVC   BUFFER+15(4),=CL4'XL8'''\n         LA    R1,BUFFER+19\n         LA    R2,DBLWRD\n         LA    R3,L'DBLWRD\nLOOP     XR    R0,R0\n         IC    R0,0(R2)\n         STC   R0,1(R1)\n         SRL   R0,4\n         STC   R0,0(R1)\n         NC    0(2,R1),=XL2'0F0F'\n         TR    0(2,R1),=CL16'0123456789ABCDEF'\n         LA    R1,2(R1)\n         LA    R2,1(R2)\n         BCT   R3,LOOP\n         MVI   0(R1),C''''\n        CALL   ISPLINK,(EDIT,LEN0,EDPLN),VL\n         LTR   R15,R15\n         BNZ   ERR14\n         SPACE 1\n         XR    R10,R10             SET RETURN CODE\n         PRINT NOGEN\nLEAVE   $XRET  CC=(R10)            RETURN\n         PRINT GEN\n         EJECT\nERR1     MVC   MLOP,=CL8'BUFFER  '\n         B     ERRA\nERR2     MVC   MLOP,=CL8'... ... '\nERRA     MVC   MLFU,VDEF\n         B     ERRXR\nERR3     MVC   MLOP,=CL8'MACRO   '\n         B     ERRE\nERR4     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRE\nERR5     MVC   MLOP,=CL8'BOUNDS  '\n         B     ERRE\nERR6     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRB\nERR7     MVC   MLOP,=CL8'BUFFER  '\nERRB     MVC   MLFU,=CL8'CHECK   '\n         B     ERRC\nERR8     MVC   MLOP,=CL8'GET LINE'\n         B     ERRE\nERR9     MVC   MLOP,=CL8'MASKLINE'\n         B     ERRE\nERR10    MVC   MLOP,=CL8'BUFFER  '\n         MVC   MLFU,=CL8'EMPTY   '\n         B     ERRC\nERR11    MVC   MLOP,=CL8'ARGUMENT'\n         MVC   MLFU,=CL8'INVALID '\nERRC     XR    R15,R15\n         B     ERRXR\nERR12    MVC   MLOP,=CL8'SETKEY  '\n         B     ERRD\nERR13    MVC   MLOP,=CL8'ENCIPH  '\nERRD     MVC   MLFU,=CL8'ERROR   '\n         B     ERRXR\nERR14    MVC   MLOP,=CL8'PUT LINE'\nERRE     MVC   MLFU,EDIT\nERRXR    CVD   R15,DBLWRD          EDIT RETURN CODE RECEIVED\n         MVC   MSRC,=XL4'40202120'\n         ED    MSRC,DBLWRD+6\n        CALL   ISPLINK,(VREP,MS,MSL,MSV),VL\n         LR    R10,R15\n        CALL   ISPLINK,(VREP,ML,MLL,MLV),VL\n         SLL   R10,8\n         OR    R10,R15\n        CALL   ISPLINK,(SETM,MSGID),VL\n         SLL   R10,8\n         OR    R10,R15\n         LTR   R10,R10\n         BNZ   LEAVE\n         LA    R10,100             SET RETURN CODE\n         B     LEAVE\n         EJECT\n* ------ CONSTANTS AND WORK-AREAS.\n         SPACE 1\nDBLWRD   DC    D'0'\n         SPACE 1\nVDEF     DC    CL8'VDEFINE '\nEDIT     DC    CL8'ISREDIT '\nVREP     DC    CL8'VREPLACE'\nSETM     DC    CL8'SETMSG  '\nMSGID    DC    CL8'ISRZ001 '\nTYPEC    DC    CL8'CHAR    '\nTYPEF    DC    CL8'FIXED   '\nLEN0     DC    F'0'\nLEN4     DC    F'4'\nLENBUF   DC    A(BUFLEN)\nMSL      DC    A(MSVL)\nMLL      DC    A(MLVL)\n         SPACE 1\nPLST1    DC    A(KEYW)\nPLST2    DC    A(KEYW+L'KEYW)\nPLST3    DC    A(DBLWRD,*+4,L'DBLWRD)\nKEYW     DC    2CL8' '\nTSWRD    DC    0XL8'0',F'-1',F'-1'\n         SPACE 1\nLINENO   DC    F'0'\nCOLNO    DC    F'0'\nLEFTB    DC    F'0'\nRIGHTB   DC    F'0'\nBUFFER   DC    CL80' '\nBUFLEN   EQU   *-BUFFER\nWKAREA   DC    CL(BUFLEN)' '\n         SPACE 1\nLL       DC    C'(BUFFER)'\nDL       DC    C'(LINENO,COLNO,LEFTB,RIGHTB)'\nMS       DC    C'(ZEDSMSG)'\nML       DC    C'(ZEDLMSG)'\n         SPACE 1\nEDMAC    DC    C'\u00a2MACRO NOPROCESS\u00a2'\nEDDST    DC    C'\u00a2(LINENO,COLNO) = CURSOR\u00a2'\nEDBDS    DC    C'\u00a2(LEFTB,RIGHTB) = BOUNDS\u00a2'\nEDGLN    DC    C'\u00a2(BUFFER) = LINE &&LINENO\u00a2'\nEDMSK    DC    C'\u00a2MASKLINE = \" \"\u00a2'\nEDPLN    DC    C'\u00a2LINE_AFTER &&LINENO = MASKLINE + (BUFFER)\u00a2'\n         SPACE 1\nMSV      DC    C'RC ='\nMSRC     DC    CL4' '\nMSVL     EQU   *-MSV\nMLV      DC    C'-- ERROR AT FUNCTION : '\nMLFU     DC    CL8' ',C' / OPERATION : '\nMLOP     DC    CL8' ',C' --'\nMLVL     EQU   *-MLV\n         EJECT\n         LTORG\n         SPACE 1\n         DROP  R11,R12 - - - - - - END OF BASE REGISTER ADDRESSABILITY\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KSXD": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944?\\x00\\x944?\\x128\\x01\\x0e\\x01\\x0e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-09T00:00:00", "modifydate": "1994-12-09T12:38:00", "lines": 270, "newlines": 270, "modlines": 0, "user": "SYSPAJA"}, "text": "KSXD     TITLE 'KSXD - DOUBLE KEYWORDS SET FUNCTION (TOPSEC).'\nKSXD     START 0\n         SPACE 1\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                    *\n* PURPOSE :    PRIVATE USE ONLY.                                     *\n* ---------                                                          *\n*                                                                    *\n* AUTHOR :     P.A. MOINIL                                           *\n* --------     COMPUTING CENTRE                                      *\n*              J.R.C. - ISPRA ESTABLISHMENT                          *\n*              21020 ISPRA (VA), ITALY                               *\n*                                                                    *\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R11,R12)\n         PRINT GEN\n         EJECT\n        CALL   ISPLINK,(VDEF,LL,BUFFER,TYPEC,LENBUF),VL\n         LTR   R15,R15\n         BNZ   ERR1\n        CALL   ISPLINK,(VDEF,DL,LINENO,TYPEF,LEN4),VL\n         LTR   R15,R15\n         BNZ   ERR2\n        CALL   ISPLINK,(EDIT,LEN0,EDMAC),VL\n         LTR   R15,R15\n         BNZ   ERR3\n        CALL   ISPLINK,(EDIT,LEN0,EDDST),VL\n         LTR   R15,R15\n         BNZ   ERR4\n        CALL   ISPLINK,(EDIT,LEN0,EDBDS),VL\n         LTR   R15,R15\n         BNZ   ERR5\n         OC    LINENO,LINENO\n         BZ    ERR6\n         OC    COLNO,COLNO\n         BZ    ERR6\n         L     R3,RIGHTB\n         CL    R3,LENBUF\n         BH    ERR7\n        CALL   ISPLINK,(EDIT,LEN0,EDGLN),VL\n         LTR   R15,R15\n         BNZ   ERR8\n        CALL   ISPLINK,(EDIT,LEN0,EDMSK),VL\n         LTR   R15,R15\n         BNZ   ERR9\n         MVC   WKAREA,BUFFER\n         LA    R2,1\n         LA    R4,WKAREA-1\n         ALR   R3,R4\n         AL    R4,LEFTB\n         CLI   0(R4),C'*'\n         BE    *+L'*+8\n         CLI   0(R4),C' '\n         BNE   *+L'*+8\n         BXLE  R4,R2,*-8\n         B     ERR10\n         LR    R14,R4\n         BXLE  R4,R2,*+L'*+4\n         B     ERR11\n         CLI   0(R4),C' '\n         BNE   *-12\n         LR    R15,R4\n         SLR   R15,R14\n         CH    R15,=Y(L'KEYW)\n         BH    ERR11\n         BCT   R15,*+L'*+6\n         MVC   KEYW(*-*),0(R14)\n         EX    R15,*-6\n         BXLE  R4,R2,*+L'*+4\n         B     ERR10\n         CLI   0(R4),C' '\n         BE    *-12\n         LR    R14,R4\n         BXLE  R4,R2,*+L'*+4\n         B     ERR11\n         CLI   0(R4),C' '\n         BNE   *-12\n         LR    R15,R4\n         SLR   R15,R14\n         CH    R15,=Y(L'KEYW)\n         BH    ERR11\n         BCT   R15,*+L'*+6\n         MVC   KEYW+L'KEYW(*-*),0(R14)\n         EX    R15,*-6\n         MVI   SWEN1,2\n         MVI   SWEN2,2\nAGAIN1   LM    R2,R3,KEYW\n         STM   R2,R3,DBLWRD\n         SRDL  R2,*-*\nSWEN1    EQU   *-1\n         STM   R2,R3,DBLWRD\n         XC    DBLWRD,KEYW\n         LM    R2,R3,DBLWRD\n         SRDL  R2,*-*\nSWEN2    EQU   *-1\n         STM   R2,R3,DBLWRD\n         XC    DBLWRD,KEYW\n         CLI   SWEN1,2\n         BNE   *+L'*+18\n         XI    SWEN1,3\n         OI    SWEN2,1\n         MVC   KEYW,DBLWRD\n         B     AGAIN1\n         XC    DBLWRD,=XL8'FFFFFFFFFFFFFFFF'\n         MVI   SWEN1,*-*\n         MVI   SWEN2,*-*\n         MVI   SWEN3,2\n         MVI   SWEN4,2\nAGAIN2   LM    R2,R3,KEYW+L'KEYW\n         STM   R2,R3,WRDDBL\n         SRDL  R2,*-*\nSWEN3    EQU   *-1\n         STM   R2,R3,WRDDBL\n         XC    WRDDBL(L'WRDDBL),KEYW+L'KEYW\n         LM    R2,R3,WRDDBL\n         SRDL  R2,*-*\nSWEN4    EQU   *-1\n         STM   R2,R3,WRDDBL\n         XC    WRDDBL(L'WRDDBL),KEYW+L'KEYW\n         CLI   SWEN3,2\n         BNE   *+L'*+18\n         XI    SWEN3,3\n         OI    SWEN4,1\n         MVC   KEYW+L'KEYW(L'KEYW),WRDDBL\n         B     AGAIN2\n         XC    WRDDBL,=XL8'FFFFFFFFFFFFFFFF'\n         MVI   SWEN3,*-*\n         MVI   SWEN4,*-*\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER\n         MVC   BUFFER+9(2),=CL2'DC'\n         MVC   BUFFER+15(4),=CL4'XL8'''\n         LA    R1,BUFFER+19\n         LA    R2,DBLWRD\n         LA    R3,L'DBLWRD\nLOOP     XR    R0,R0\n         IC    R0,0(R2)\n         STC   R0,1(R1)\n         SRL   R0,4\n         STC   R0,0(R1)\n         NC    0(2,R1),=XL2'0F0F'\n         TR    0(2,R1),=CL16'0123456789ABCDEF'\n         LA    R1,2(R1)\n         LA    R2,1(R2)\n         BCT   R3,LOOP\n         MVC   0(6,R1),=CL6''',XL8'''\n         LA    R1,6(R1)\n         LA    R2,WRDDBL\n         LA    R3,L'WRDDBL\nFILL     XR    R0,R0\n         IC    R0,0(R2)\n         STC   R0,1(R1)\n         SRL   R0,4\n         STC   R0,0(R1)\n         NC    0(2,R1),=XL2'0F0F'\n         TR    0(2,R1),=CL16'0123456789ABCDEF'\n         LA    R1,2(R1)\n         LA    R2,1(R2)\n         BCT   R3,FILL\n         MVI   0(R1),C''''\n        CALL   ISPLINK,(EDIT,LEN0,EDPLN),VL\n         LTR   R15,R15\n         BNZ   ERR12\n         SPACE 1\n         XR    R10,R10             SET RETURN CODE\n         PRINT NOGEN\nLEAVE   $XRET  CC=(R10)            RETURN\n         PRINT GEN\n         EJECT\nERR1     MVC   MLOP,=CL8'BUFFER  '\n         B     ERRA\nERR2     MVC   MLOP,=CL8'... ... '\nERRA     MVC   MLFU,VDEF\n         B     ERRXR\nERR3     MVC   MLOP,=CL8'MACRO   '\n         B     ERRE\nERR4     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRE\nERR5     MVC   MLOP,=CL8'BOUNDS  '\n         B     ERRE\nERR6     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRB\nERR7     MVC   MLOP,=CL8'BUFFER  '\nERRB     MVC   MLFU,=CL8'CHECK   '\n         B     ERRC\nERR8     MVC   MLOP,=CL8'GET LINE'\n         B     ERRE\nERR9     MVC   MLOP,=CL8'MASKLINE'\n         B     ERRE\nERR10    MVC   MLOP,=CL8'BUFFER  '\n         MVC   MLFU,=CL8'EMPTY   '\n         B     ERRC\nERR11    MVC   MLOP,=CL8'ARGUMENT'\n         MVC   MLFU,=CL8'INVALID '\nERRC     XR    R15,R15\n         B     ERRXR\nERR12    MVC   MLOP,=CL8'PUT LINE'\nERRE     MVC   MLFU,EDIT\nERRXR    CVD   R15,DBLWRD          EDIT RETURN CODE RECEIVED\n         MVC   MSRC,=XL4'40202120'\n         ED    MSRC,DBLWRD+6\n        CALL   ISPLINK,(VREP,MS,MSL,MSV),VL\n         LR    R10,R15\n        CALL   ISPLINK,(VREP,ML,MLL,MLV),VL\n         SLL   R10,8\n         OR    R10,R15\n        CALL   ISPLINK,(SETM,MSGID),VL\n         SLL   R10,8\n         OR    R10,R15\n         LTR   R10,R10\n         BNZ   LEAVE\n         LA    R10,100             SET RETURN CODE\n         B     LEAVE\n         EJECT\n* ------ CONSTANTS AND WORK-AREAS.\n         SPACE 1\nDBLWRD   DC    D'0'\nWRDDBL   DC    D'0'\n         SPACE 1\nVDEF     DC    CL8'VDEFINE '\nEDIT     DC    CL8'ISREDIT '\nVREP     DC    CL8'VREPLACE'\nSETM     DC    CL8'SETMSG  '\nMSGID    DC    CL8'ISRZ001 '\nTYPEC    DC    CL8'CHAR    '\nTYPEF    DC    CL8'FIXED   '\nLEN0     DC    F'0'\nLEN4     DC    F'4'\nLENBUF   DC    A(BUFLEN)\nMSL      DC    A(MSVL)\nMLL      DC    A(MLVL)\n         SPACE 1\nKEYW     DC    2CL8' '\n         SPACE 1\nLINENO   DC    F'0'\nCOLNO    DC    F'0'\nLEFTB    DC    F'0'\nRIGHTB   DC    F'0'\nBUFFER   DC    CL80' '\nBUFLEN   EQU   *-BUFFER\nWKAREA   DC    CL(BUFLEN)' '\n         SPACE 1\nLL       DC    C'(BUFFER)'\nDL       DC    C'(LINENO,COLNO,LEFTB,RIGHTB)'\nMS       DC    C'(ZEDSMSG)'\nML       DC    C'(ZEDLMSG)'\n         SPACE 1\nEDMAC    DC    C'\u00a2MACRO NOPROCESS\u00a2'\nEDDST    DC    C'\u00a2(LINENO,COLNO) = CURSOR\u00a2'\nEDBDS    DC    C'\u00a2(LEFTB,RIGHTB) = BOUNDS\u00a2'\nEDGLN    DC    C'\u00a2(BUFFER) = LINE &&LINENO\u00a2'\nEDMSK    DC    C'\u00a2MASKLINE = \" \"\u00a2'\nEDPLN    DC    C'\u00a2LINE_AFTER &&LINENO = MASKLINE + (BUFFER)\u00a2'\n         SPACE 1\nMSV      DC    C'RC ='\nMSRC     DC    CL4' '\nMSVL     EQU   *-MSV\nMLV      DC    C'-- ERROR AT FUNCTION : '\nMLFU     DC    CL8' ',C' / OPERATION : '\nMLOP     DC    CL8' ',C' --'\nMLVL     EQU   *-MLV\n         EJECT\n         LTORG\n         SPACE 1\n         DROP  R11,R12 - - - - - - END OF BASE REGISTER ADDRESSABILITY\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KSXI": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944?\\x00\\x944?\\x128\\x00\\xdc\\x00\\xdc\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-09T00:00:00", "modifydate": "1994-12-09T12:38:00", "lines": 220, "newlines": 220, "modlines": 0, "user": "SYSPAJA"}, "text": "KSXI     TITLE 'KSXI - INVERT HEXADECIMAL FUNCTION (TOPSECT).'\nKSXI     START 0\n         SPACE 1\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                    *\n* PURPOSE :    PRIVATE USE ONLY.                                     *\n* ---------                                                          *\n*                                                                    *\n* AUTHOR :     P.A. MOINIL                                           *\n* --------     COMPUTING CENTRE                                      *\n*              J.R.C. - ISPRA ESTABLISHMENT                          *\n*              21020 ISPRA (VA), ITALY                               *\n*                                                                    *\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R11,R12)\n         PRINT GEN\n         EJECT\n        CALL   ISPLINK,(VDEF,LL,BUFFER,TYPEC,LENBUF),VL\n         LTR   R15,R15\n         BNZ   ERR1\n        CALL   ISPLINK,(VDEF,DL,LINENO,TYPEF,LEN4),VL\n         LTR   R15,R15\n         BNZ   ERR2\n        CALL   ISPLINK,(EDIT,LEN0,EDMAC),VL\n         LTR   R15,R15\n         BNZ   ERR3\n        CALL   ISPLINK,(EDIT,LEN0,EDDST),VL\n         LTR   R15,R15\n         BNZ   ERR4\n        CALL   ISPLINK,(EDIT,LEN0,EDBDS),VL\n         LTR   R15,R15\n         BNZ   ERR5\n         OC    LINENO,LINENO\n         BZ    ERR6\n         OC    COLNO,COLNO\n         BZ    ERR6\n         L     R3,RIGHTB\n         CL    R3,LENBUF\n         BH    ERR7\n        CALL   ISPLINK,(EDIT,LEN0,EDGLN),VL\n         LTR   R15,R15\n         BNZ   ERR8\n        CALL   ISPLINK,(EDIT,LEN0,EDMSK),VL\n         LTR   R15,R15\n         BNZ   ERR9\n         MVC   WKAREA,BUFFER\n         LA    R2,1\n         LA    R4,WKAREA-1\n         ALR   R3,R4\n         AL    R4,LEFTB\n         CLI   0(R4),C'*'\n         BE    *+L'*+8\n         CLI   0(R4),C' '\n         BNE   *+L'*+8\n         BXLE  R4,R2,*-8\n         B     ERR10\n         CLI   0(R4),C''''\n         BNE   *+L'*+8\n         BXLE  R4,R2,*+L'*+4\n         B     ERR10\n         CLI   0(R3),C' '\n         BNE   *+L'*+12\n         SLR   R3,R2\n         CLR   R3,R4\n         BNL   *-12\n         B     ERR10\n         CLI   0(R3),C''''\n         BNE   *+L'*+12\n         SLR   R3,R2\n         CLR   R3,R4\n         BNL   *+L'*+4\n         B     ERR10\n         SLR   R3,R4\n         LA    R3,1(R3)\n         LA    R2,16\nNEXT     CLR   R3,R2\n         BNH   *+L'*+6\n         LR    R1,R2\n         B     *+L'*+2\n         LR    R1,R3\n         SR    R3,R1\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER\n         MVC   BUFFER+9(2),=CL2'DC'\n         CVD   R1,WORKD\n         MVC   WORKD(4),=XL4'40202120'\n         ED    WORKD(4),WORKD+6\n         CLI   WORKD+2,C' '\n         BNE   *+L'*+20\n         MVC   BUFFER+15(2),=CL2'XL'\n         MVC   BUFFER+17(1),WORKD+3\n         LA    R5,BUFFER+18\n         B     *+L'*+16\n         MVC   BUFFER+15(2),=CL2'XL'\n         MVC   BUFFER+17(2),WORKD+2\n         LA    R5,BUFFER+19\n         MVI   0(R5),C''''\n         LA    R5,1(R5)\nLOOP     XR    R0,R0\n         XI    0(R4),X'FF'\n         IC    R0,0(R4)\n         STC   R0,1(R5)\n         SRL   R0,4\n         STC   R0,0(R5)\n         NC    0(2,R5),=XL2'0F0F'\n         TR    0(2,R5),=CL16'0123456789ABCDEF'\n         LA    R5,2(R5)\n         LA    R4,1(R4)\n         BCT   R1,LOOP\n         MVI   0(R5),C''''\n        CALL   ISPLINK,(EDIT,LEN0,EDPLN),VL\n         LTR   R15,R15\n         BNZ   ERR11\n         LTR   R3,R3\n         BNP   EXIT\n         L     R0,LINENO\n         AL    R0,=F'1'\n         ST    R0,LINENO\n         B     NEXT\n         SPACE 1\nEXIT     XR    R10,R10             SET RETURN CODE\n         PRINT NOGEN\nLEAVE   $XRET  CC=(R10)            RETURN\n         PRINT GEN\n         EJECT\nERR1     MVC   MLOP,=CL8'BUFFER  '\n         B     ERRA\nERR2     MVC   MLOP,=CL8'... ... '\nERRA     MVC   MLFU,VDEF\n         B     ERRET\nERR3     MVC   MLOP,=CL8'MACRO   '\n         B     ERRD\nERR4     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRD\nERR5     MVC   MLOP,=CL8'BOUNDS  '\n         B     ERRD\nERR6     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRB\nERR7     MVC   MLOP,=CL8'BUFFER  '\nERRB     MVC   MLFU,=CL8'CHECK   '\n         B     ERRC\nERR8     MVC   MLOP,=CL8'GET LINE'\n         B     ERRD\nERR9     MVC   MLOP,=CL8'MASKLINE'\n         B     ERRD\nERR10    MVC   MLOP,=CL8'BUFFER  '\n         MVC   MLFU,=CL8'EMPTY   '\nERRC     XR    R15,R15\n         B     ERRET\nERR11    MVC   MLOP,=CL8'PUT LINE'\nERRD     MVC   MLFU,EDIT\nERRET    CVD   R15,WORKD\n         MVC   MSRC,=XL4'40202120'\n         ED    MSRC,WORKD+6\n        CALL   ISPLINK,(VREP,MS,MSL,MSV),VL\n         LR    R10,R15\n        CALL   ISPLINK,(VREP,ML,MLL,MLV),VL\n         SLL   R10,8\n         OR    R10,R15\n        CALL   ISPLINK,(SETM,MSGID),VL\n         SLL   R10,8\n         OR    R10,R15\n         LTR   R10,R10\n         BNZ   LEAVE\n         LA    R10,100             SET RETURN CODE\n         B     LEAVE\n         EJECT\n* ------ CONSTANTS AND WORK-AREAS.\n         SPACE 1\nWORKD    DC    D'0'\n         SPACE 1\nVDEF     DC    CL8'VDEFINE '\nEDIT     DC    CL8'ISREDIT '\nVREP     DC    CL8'VREPLACE'\nSETM     DC    CL8'SETMSG  '\nMSGID    DC    CL8'ISRZ001 '\nTYPEC    DC    CL8'CHAR    '\nTYPEF    DC    CL8'FIXED   '\nLEN0     DC    F'0'\nLEN4     DC    F'4'\nLENBUF   DC    A(BUFLEN)\nMSL      DC    A(MSVL)\nMLL      DC    A(MLVL)\n         SPACE 1\nLINENO   DC    F'0'\nCOLNO    DC    F'0'\nLEFTB    DC    F'0'\nRIGHTB   DC    F'0'\nBUFFER   DC    CL80' '\nBUFLEN   EQU   *-BUFFER\nWKAREA   DC    CL(BUFLEN)' '\n         SPACE 1\nLL       DC    C'(BUFFER)'\nDL       DC    C'(LINENO,COLNO,LEFTB,RIGHTB)'\nMS       DC    C'(ZEDSMSG)'\nML       DC    C'(ZEDLMSG)'\n         SPACE 1\nEDMAC    DC    C'\u00a2MACRO NOPROCESS\u00a2'\nEDDST    DC    C'\u00a2(LINENO,COLNO) = CURSOR\u00a2'\nEDBDS    DC    C'\u00a2(LEFTB,RIGHTB) = BOUNDS\u00a2'\nEDGLN    DC    C'\u00a2(BUFFER) = LINE &&LINENO\u00a2'\nEDMSK    DC    C'\u00a2MASKLINE = \" \"\u00a2'\nEDPLN    DC    C'\u00a2LINE_AFTER &&LINENO = MASKLINE + (BUFFER)\u00a2'\n         SPACE 1\nMSV      DC    C'RC ='\nMSRC     DC    CL4' '\nMSVL     EQU   *-MSV\nMLV      DC    C'-- ERROR AT FUNCTION : '\nMLFU     DC    CL8' ',C' / OPERATION : '\nMLOP     DC    CL8' ',C' --'\nMLVL     EQU   *-MLV\n         EJECT\n         LTORG\n         SPACE 1\n         DROP  R11,R12 - - - - - - END OF BASE REGISTER ADDRESSABILITY\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KSXS": {"ttr": 6406, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944?\\x00\\x944?\\x128\\x00\\xd9\\x00\\xd9\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-09T00:00:00", "modifydate": "1994-12-09T12:38:00", "lines": 217, "newlines": 217, "modlines": 0, "user": "SYSPAJA"}, "text": "KSXS     TITLE 'KSXS - SINGLE KEYWORD SET FUNCTION (TOPSEC).'\nKSXS     START 0\n         SPACE 1\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                    *\n* PURPOSE :    PRIVATE USE ONLY.                                     *\n* ---------                                                          *\n*                                                                    *\n* AUTHOR :     P.A. MOINIL                                           *\n* --------     COMPUTING CENTRE                                      *\n*              J.R.C. - ISPRA ESTABLISHMENT                          *\n*              21020 ISPRA (VA), ITALY                               *\n*                                                                    *\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R11,R12)\n         PRINT GEN\n         EJECT\n        CALL   ISPLINK,(VDEF,LL,BUFFER,TYPEC,LENBUF),VL\n         LTR   R15,R15\n         BNZ   ERR1\n        CALL   ISPLINK,(VDEF,DL,LINENO,TYPEF,LEN4),VL\n         LTR   R15,R15\n         BNZ   ERR2\n        CALL   ISPLINK,(EDIT,LEN0,EDMAC),VL\n         LTR   R15,R15\n         BNZ   ERR3\n        CALL   ISPLINK,(EDIT,LEN0,EDDST),VL\n         LTR   R15,R15\n         BNZ   ERR4\n        CALL   ISPLINK,(EDIT,LEN0,EDBDS),VL\n         LTR   R15,R15\n         BNZ   ERR5\n         OC    LINENO,LINENO\n         BZ    ERR6\n         OC    COLNO,COLNO\n         BZ    ERR6\n         L     R3,RIGHTB\n         CL    R3,LENBUF\n         BH    ERR7\n        CALL   ISPLINK,(EDIT,LEN0,EDGLN),VL\n         LTR   R15,R15\n         BNZ   ERR8\n        CALL   ISPLINK,(EDIT,LEN0,EDMSK),VL\n         LTR   R15,R15\n         BNZ   ERR9\n         MVC   WKAREA,BUFFER\n         LA    R2,1\n         LA    R4,WKAREA-1\n         ALR   R3,R4\n         AL    R4,LEFTB\n         CLI   0(R4),C'*'\n         BE    *+L'*+8\n         CLI   0(R4),C' '\n         BNE   *+L'*+8\n         BXLE  R4,R2,*-8\n         B     ERR10\n         LR    R14,R4\n         BXLE  R4,R2,*+L'*+4\n         B     ERR11\n         CLI   0(R4),C' '\n         BNE   *-12\n         LR    R15,R4\n         SLR   R15,R14\n         CH    R15,=Y(L'KEYW)\n         BH    ERR11\n         BCT   R15,*+L'*+6\n         MVC   KEYW(*-*),0(R14)\n         EX    R15,*-6\n         MVI   SWEN1,2\n         MVI   SWEN2,2\nAGAIN    LM    R2,R3,KEYW\n         STM   R2,R3,DBLWRD\n         SRDL  R2,*-*\nSWEN1    EQU   *-1\n         STM   R2,R3,DBLWRD\n         XC    DBLWRD,KEYW\n         LM    R2,R3,DBLWRD\n         SRDL  R2,*-*\nSWEN2    EQU   *-1\n         STM   R2,R3,DBLWRD\n         XC    DBLWRD,KEYW\n         CLI   SWEN1,2\n         BNE   *+L'*+18\n         XI    SWEN1,3\n         OI    SWEN2,1\n         MVC   KEYW,DBLWRD\n         B     AGAIN\n         XC    DBLWRD,=XL8'FFFFFFFFFFFFFFFF'\n         MVI   SWEN1,*-*\n         MVI   SWEN2,*-*\n         MVI   BUFFER,C' '\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER\n         MVC   BUFFER+9(2),=CL2'DC'\n         MVC   BUFFER+15(4),=CL4'XL8'''\n         LA    R1,BUFFER+19\n         LA    R2,DBLWRD\n         LA    R3,L'DBLWRD\nLOOP     XR    R0,R0\n         IC    R0,0(R2)\n         STC   R0,1(R1)\n         SRL   R0,4\n         STC   R0,0(R1)\n         NC    0(2,R1),=XL2'0F0F'\n         TR    0(2,R1),=CL16'0123456789ABCDEF'\n         LA    R1,2(R1)\n         LA    R2,1(R2)\n         BCT   R3,LOOP\n         MVI   0(R1),C''''\n        CALL   ISPLINK,(EDIT,LEN0,EDPLN),VL\n         LTR   R15,R15\n         BNZ   ERR12\n         SPACE 1\n         XR    R10,R10             SET RETURN CODE\n         PRINT NOGEN\nLEAVE   $XRET  CC=(R10)            RETURN\n         PRINT GEN\n         EJECT\nERR1     MVC   MLOP,=CL8'BUFFER  '\n         B     ERRA\nERR2     MVC   MLOP,=CL8'... ... '\nERRA     MVC   MLFU,VDEF\n         B     ERRXR\nERR3     MVC   MLOP,=CL8'MACRO   '\n         B     ERRE\nERR4     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRE\nERR5     MVC   MLOP,=CL8'BOUNDS  '\n         B     ERRE\nERR6     MVC   MLOP,=CL8'CURSOR  '\n         B     ERRB\nERR7     MVC   MLOP,=CL8'BUFFER  '\nERRB     MVC   MLFU,=CL8'CHECK   '\n         B     ERRC\nERR8     MVC   MLOP,=CL8'GET LINE'\n         B     ERRE\nERR9     MVC   MLOP,=CL8'MASKLINE'\n         B     ERRE\nERR10    MVC   MLOP,=CL8'BUFFER  '\n         MVC   MLFU,=CL8'EMPTY   '\n         B     ERRC\nERR11    MVC   MLOP,=CL8'ARGUMENT'\n         MVC   MLFU,=CL8'INVALID '\nERRC     XR    R15,R15\n         B     ERRXR\nERR12    MVC   MLOP,=CL8'PUT LINE'\nERRE     MVC   MLFU,EDIT\nERRXR    CVD   R15,DBLWRD          EDIT RETURN CODE RECEIVED\n         MVC   MSRC,=XL4'40202120'\n         ED    MSRC,DBLWRD+6\n        CALL   ISPLINK,(VREP,MS,MSL,MSV),VL\n         LR    R10,R15\n        CALL   ISPLINK,(VREP,ML,MLL,MLV),VL\n         SLL   R10,8\n         OR    R10,R15\n        CALL   ISPLINK,(SETM,MSGID),VL\n         SLL   R10,8\n         OR    R10,R15\n         LTR   R10,R10\n         BNZ   LEAVE\n         LA    R10,100             SET RETURN CODE\n         B     LEAVE\n         EJECT\n* ------ CONSTANTS AND WORK-AREAS.\n         SPACE 1\nDBLWRD   DC    D'0'\n         SPACE 1\nVDEF     DC    CL8'VDEFINE '\nEDIT     DC    CL8'ISREDIT '\nVREP     DC    CL8'VREPLACE'\nSETM     DC    CL8'SETMSG  '\nMSGID    DC    CL8'ISRZ001 '\nTYPEC    DC    CL8'CHAR    '\nTYPEF    DC    CL8'FIXED   '\nLEN0     DC    F'0'\nLEN4     DC    F'4'\nLENBUF   DC    A(BUFLEN)\nMSL      DC    A(MSVL)\nMLL      DC    A(MLVL)\n         SPACE 1\nKEYW     DC    CL8' '\n         SPACE 1\nLINENO   DC    F'0'\nCOLNO    DC    F'0'\nLEFTB    DC    F'0'\nRIGHTB   DC    F'0'\nBUFFER   DC    CL80' '\nBUFLEN   EQU   *-BUFFER\nWKAREA   DC    CL(BUFLEN)' '\n         SPACE 1\nLL       DC    C'(BUFFER)'\nDL       DC    C'(LINENO,COLNO,LEFTB,RIGHTB)'\nMS       DC    C'(ZEDSMSG)'\nML       DC    C'(ZEDLMSG)'\n         SPACE 1\nEDMAC    DC    C'\u00a2MACRO NOPROCESS\u00a2'\nEDDST    DC    C'\u00a2(LINENO,COLNO) = CURSOR\u00a2'\nEDBDS    DC    C'\u00a2(LEFTB,RIGHTB) = BOUNDS\u00a2'\nEDGLN    DC    C'\u00a2(BUFFER) = LINE &&LINENO\u00a2'\nEDMSK    DC    C'\u00a2MASKLINE = \" \"\u00a2'\nEDPLN    DC    C'\u00a2LINE_AFTER &&LINENO = MASKLINE + (BUFFER)\u00a2'\n         SPACE 1\nMSV      DC    C'RC ='\nMSRC     DC    CL4' '\nMSVL     EQU   *-MSV\nMLV      DC    C'-- ERROR AT FUNCTION : '\nMLFU     DC    CL8' ',C' / OPERATION : '\nMLOP     DC    CL8' ',C' --'\nMLVL     EQU   *-MLV\n         EJECT\n         LTORG\n         SPACE 1\n         DROP  R11,R12 - - - - - - END OF BASE REGISTER ADDRESSABILITY\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJCKMX": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x923o\\x00\\x923o\\x14\\x11\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T14:11:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SYSPAJA"}, "text": "ISREDIT  MACRO (APARM) NOPROCESS\n/*  MACRO NAME : KMX                                                */\n/*    FUNCTION : PRIVATE USE ONLY                                   */\n/*      AUTHOR : MOINIL P.A                                         */\n  IF &STR(&APARM.) \u00ac= &STR() THEN DO\n    IF &STR(&APARM.) = &STR(HELP) OR +\n      &STR(&APARM.) = &STR(H) THEN DO\n        ISPEXEC CONTROL DISPLAY SAVE\n        ISPEXEC SELECT PGM(ISPTUTOR) PARM(PAJSHDWH)\n        SET &RCX = &LASTCC\n        ISPEXEC CONTROL DISPLAY RESTORE\n        EXIT CODE(&RCX)\n        END\n    ELSE DO\n      SET ZEDSMSG = INVALID OPERAND\n      SET ZEDLMSG = VALID OPERAND ARE HELP OR NULL\n      ISPEXEC SETMSG MSG(ISRZ000)\n      EXIT CODE(0)\n      END\n    END\n  ISREDIT !KMX\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCKSXD": {"ttr": 6413, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x7f\\x00\\x944\\x7f\\x11 \\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-13T00:00:00", "modifydate": "1994-12-13T11:20:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SYSPAJA"}, "text": "ISREDIT  MACRO (APARM) NOPROCESS\n/*  MACRO NAME : KSXD                                               */\n/*    FUNCTION : PRIVATE USE ONLY                                   */\n/*      AUTHOR : MOINIL P.A                                         */\n  IF &STR(&APARM.) \u00ac= &STR() THEN DO\n    IF &STR(&APARM.) = &STR(HELP) OR +\n      &STR(&APARM.) = &STR(H) THEN DO\n        ISPEXEC CONTROL DISPLAY SAVE\n        ISPEXEC SELECT PGM(ISPTUTOR) PARM(PAJTOPSH)\n        SET &RCX = &LASTCC\n        ISPEXEC CONTROL DISPLAY RESTORE\n        EXIT CODE(&RCX)\n        END\n    ELSE DO\n      SET ZEDSMSG = INVALID OPERAND\n      SET ZEDLMSG = VALID OPERAND ARE HELP OR NULL\n      ISPEXEC SETMSG MSG(ISRZ000)\n      EXIT CODE(0)\n      END\n    END\n  ISREDIT !KSXD\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCKSXI": {"ttr": 6415, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x7f\\x00\\x944\\x7f\\x11 \\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-13T00:00:00", "modifydate": "1994-12-13T11:20:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SYSPAJA"}, "text": "ISREDIT  MACRO (APARM) NOPROCESS\n/*  MACRO NAME : KSXI                                               */\n/*    FUNCTION : PRIVATE USE ONLY                                   */\n/*      AUTHOR : MOINIL P.A                                         */\n  IF &STR(&APARM.) \u00ac= &STR() THEN DO\n    IF &STR(&APARM.) = &STR(HELP) OR +\n      &STR(&APARM.) = &STR(H) THEN DO\n        ISPEXEC CONTROL DISPLAY SAVE\n        ISPEXEC SELECT PGM(ISPTUTOR) PARM(PAJTOPSH)\n        SET &RCX = &LASTCC\n        ISPEXEC CONTROL DISPLAY RESTORE\n        EXIT CODE(&RCX)\n        END\n    ELSE DO\n      SET ZEDSMSG = INVALID OPERAND\n      SET ZEDLMSG = VALID OPERAND ARE HELP OR NULL\n      ISPEXEC SETMSG MSG(ISRZ000)\n      EXIT CODE(0)\n      END\n    END\n  ISREDIT !KSXI\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCKSXS": {"ttr": 6417, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x7f\\x00\\x944\\x7f\\x11 \\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-13T00:00:00", "modifydate": "1994-12-13T11:20:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SYSPAJA"}, "text": "ISREDIT  MACRO (APARM) NOPROCESS\n/*  MACRO NAME : KSXS                                               */\n/*    FUNCTION : PRIVATE USE ONLY                                   */\n/*      AUTHOR : MOINIL P.A                                         */\n  IF &STR(&APARM.) \u00ac= &STR() THEN DO\n    IF &STR(&APARM.) = &STR(HELP) OR +\n      &STR(&APARM.) = &STR(H) THEN DO\n        ISPEXEC CONTROL DISPLAY SAVE\n        ISPEXEC SELECT PGM(ISPTUTOR) PARM(PAJTOPSH)\n        SET &RCX = &LASTCC\n        ISPEXEC CONTROL DISPLAY RESTORE\n        EXIT CODE(&RCX)\n        END\n    ELSE DO\n      SET ZEDSMSG = INVALID OPERAND\n      SET ZEDLMSG = VALID OPERAND ARE HELP OR NULL\n      ISPEXEC SETMSG MSG(ISRZ000)\n      EXIT CODE(0)\n      END\n    END\n  ISREDIT !KSXS\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCSC": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x148\\x01\\xe4\\x01\\xe4\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T14:38:00", "lines": 484, "newlines": 484, "modlines": 0, "user": "SYSPAJA"}, "text": "PROC     0\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n/*       SHORT : System Sector Short Communication.                  */\n/*       Pre-requisite : TSO command EUSID.                          */\n/*       Note : Short Communication is stored in member SC$PROF of   */\n/*              user ISPF profile data-set (user.SPF.PROF).      (PM)*/\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n         CONTROL MAIN NOMSG\n         IF &SYSISPF EQ &STR(NOT ACTIVE) THEN DO\n           WRITE *** NOT AVAILABLE OUTSIDE ISPF ***\n           EXIT CODE(0)\n           END\n         EUSID\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           ISPEXEC SETMSG MSG(PAJC000Z)\n           EXIT CODE(0)\n           END\n         IF &EURGRNM NE SYS AND THEN DO\n           ISPEXEC SETMSG MSG(PAJC000X)\n           EXIT CODE(0)\n           END\n         SET &SCID = &Z\n         SET &SCDSS = &STR(SPF)\n         SET &SCDST = &STR(PROF)\n         SET &SCMEM = &STR(SC$PROF)\n         SET &SCTEST = &Z\n         ISPEXEC VGET (SCLANG) PROFILE\n         ISPEXEC CONTROL ERRORS RETURN\nAGAIN:   IF &SYSUID EQ WIZARD THEN ISPEXEC DISPLAY PANEL(PAJSC00)\n         ELSE ISPEXEC DISPLAY PANEL(PAJSC0)\n         SET &RC = &LASTCC\n         IF &RC LE 4 THEN GOTO AGAIN\n         ISPEXEC CONTROL ERRORS CANCEL\n         IF &RC GT 8 THEN DO\n           ISPEXEC SETMSG MSG(PAJC000W)\n           EXIT CODE(0)\n           END\n         IF &SCTEST EQ TEST THEN CONTROL LIST CONLIST SYMLIST MSG\n         IF &SCID EQ THEN DO\n           SET &SCSWU = YES\n           SET &SCSWC = NO\n           SET &SCID = &SYSUID\n           END\n         ELSE SET &SCSWU = NO\n         SET &SCSWT = NO\n         SET &SCSWM = NO\n         ISPEXEC CONTROL ERRORS RETURN\n         IF &SCSWU EQ YES THEN -\n         ISPEXEC LMINIT DATAID(SCFIN) -\n           DATASET('&SCID..&SCDSG..&SCDST') ENQ(EXCLU)\n         ELSE ISPEXEC LMINIT DATAID(SCFIN) -\n           DATASET('&SCID..&SCDSG..&SCDST')\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC001A)\n           ELSE ISPEXEC SETMSG MSG(PAJC002A)\n           SET &SCSWM = YES\n           GOTO ERIFI\n           END\n         ISPEXEC LMOPEN DATAID(&SCFIN)\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC001B)\n           ELSE ISPEXEC SETMSG MSG(PAJC002B)\n           SET &SCSWM = YES\n           GOTO EROFI\n           END\n         ISPEXEC LMMFIND DATAID(&SCFIN) MEMBER(&SCMEM)\n         SET &RC = &LASTCC\n         IF &SCSWU EQ YES THEN DO\n           IF &RC EQ 8 THEN DO\n             SET &SCSWC = YES\n             GOTO ERFFI\n             END\n           ELSE IF &RC EQ 4 THEN DO\n             ISPEXEC SETMSG MSG(PAJC002C)\n             SET &SCSWM = YES\n             GOTO ERFFI\n             END\n           END\n         IF &RC NE 0 THEN DO\n           IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC001D)\n           ELSE ISPEXEC SETMSG MSG(PAJC002D)\n           SET &SCSWM = YES\n           GOTO ERFFI\n           END\n         ISPEXEC TBCREATE SCTABLE REPLACE NOWRITE NAMES(SCAROU)\n         CONTROL ASIS\nGETFI:   ISPEXEC LMGET DATAID(&SCFIN) MODE(INVAR) +\n           DATALOC(SCARIN) DATALEN(SCALIN) MAXLEN(80)\n         SET &RC = &LASTCC\n         IF &RC EQ 8 THEN GOTO EOFFI\n         IF &RC NE 0 THEN DO\n           IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC001E)\n           ELSE ISPEXEC SETMSG MSG(PAJC002E)\n           SET &SCSWM = YES\n           SET &SCSWT = NO\n           GOTO EOFFI\n           END\n         SET &SCARLIN = &LENGTH(&STR(&SCARIN))\n         IF &SCARLIN GE 11 THEN DO\n           SET &SCTT = &SUBSTR(1:11,&SCARIN)\n           IF &SCSWU EQ NO THEN DO\n             IF &STR(&SCTT) EQ &STR(STOP       ) THEN GOTO EOFFI\n             END\n           IF &SCSWU EQ YES THEN DO\n             IF &STR(&SCTT) EQ &STR(Aggiornato ) THEN GOTO GETFI\n             IF &STR(&SCTT) EQ &STR(Ajourn! au ) THEN GOTO GETFI\n             IF &STR(&SCTT) EQ &STR(Updated on ) THEN GOTO GETFI\n             END\n           END\n         IF &SCARLIN GT 72 THEN SET &SCARLIN = 72\n         SET &SCAROU = &STR(&SUBSTR(1:&SCARLIN,&SCARIN))\n         ISPEXEC TBADD SCTABLE\n         SET &SCSWT = YES\n         GOTO GETFI\nEOFFI:   CONTROL CAPS\nERFFI:   ISPEXEC LMCLOSE DATAID(&SCFIN)\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           IF &SCSWM EQ NO THEN DO\n             IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC001F)\n             ELSE ISPEXEC SETMSG MSG(PAJC002F)\n             SET &SCSWM = YES\n             END\n           END\n         IF &SCSWU EQ NO THEN GOTO EROFI\n         IF &SCSWC EQ YES THEN GOTO UPDFI\n         IF &SCSWT EQ YES THEN GOTO UPDFI\nEROFI:   ISPEXEC LMFREE DATAID(&SCFIN)\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           IF &SCSWM EQ NO THEN DO\n             IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC001G)\n             ELSE ISPEXEC SETMSG MSG(PAJC002G)\n             SET &SCSWM = YES\n             END\n           END\n         IF &SCSWT EQ NO THEN GOTO ENDTB\n         ISPEXEC TBTOP SCTABLE\nDSTSC:   ISPEXEC TBDISPL SCTABLE PANEL(PAJSC1) POSITION(CRP)\n         SET &RC = &LASTCC\n         IF &RC LE 4 THEN GOTO DSTSC\n         IF &RC NE 8 THEN DO\n           IF &SCSWM EQ NO THEN DO\n             IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC001H)\n             END\n           END\nENDTB:   ISPEXEC TBEND SCTABLE\nERIFI:   ISPEXEC CONTROL ERRORS CANCEL\n         IF &SCSWM EQ NO THEN ISPEXEC SETMSG MSG(PAJC009A)\n         EXIT CODE(0)\nUPDFI:   CONTROL ASIS\n         IF &SCSWC EQ YES THEN DO\n           SET &SCTIT = &STR(Create)\n           ISPEXEC TBCREATE SCTABLE REPLACE NOWRITE NAMES(SCAROU)\n           SET &SCAROU = &STR( )\n           ISPEXEC TBADD SCTABLE\n           END\n         ELSE SET &SCTIT = &STR(Update)\n         ISPEXEC VPUT (SCTIT SCID)\n         ISPEXEC VGET (SCLANG) PROFILE\n         SET &RC = 0\n         SET &ZTDTOP = 0\nULOOP:   IF &RC EQ 4 THEN ISPEXEC TBDISPL SCTABLE POSITION(CRP)\n         ELSE DO\n           ISPEXEC TBTOP SCTABLE\n           ISPEXEC TBSKIP SCTABLE NUMBER(&ZTDTOP)\n           ISPEXEC VGET (ZVERB ZSCROLLN)\n           IF &ZVERB EQ UP THEN -\n             ISPEXEC TBSKIP SCTABLE NUMBER(-&ZSCROLLN)\n           ELSE IF &ZVERB EQ DOWN THEN -\n             ISPEXEC TBSKIP SCTABLE NUMBER(&ZSCROLLN)\n           ISPEXEC TBDISPL SCTABLE PANEL(PAJSC2) POSITION(CRP)\n           END\n         SET &RC = &LASTCC\n         IF &RC GT 8 THEN DO\n           ISPEXEC SETMSG MSG(PAJC009B)\n           SET &SCSWM = YES\n           GOTO XLOOP\n           END\n         ELSE IF &RC EQ 8 OR &CMD EQ SAVE THEN GOTO TSAVE\n         ELSE IF &CMD EQ CANCEL THEN DO\n           ISPEXEC SETMSG MSG(PAJC009C)\n           SET &SCSWM = YES\n           GOTO XLOOP\n           END\n         ELSE IF &ZTDSELS GE 1 THEN DO\n           IF &SCA EQ A OR &SCA EQ B THEN DO\n             SET &HIGH = &MM*9\n             SET &LOW = &HIGH-8\n             IF &SCLANG EQ I THEN DO\n               SET &GN = &STR(Gennaio  Febbraio Marzo    Aprile   )\n               SET &GN = &GN&STR(Maggio   Giugno   Luglio   Agosto   )\n               SET &GN = &GN&STR(SettembreOttobre  Novembre Dicembre )\n               END\n             ELSE IF &SCLANG EQ F THEN DO\n               SET &GN = &STR(Janvier  Fevrier  Mars     Avril    )\n               SET &GN = &GN&STR(Mai      Juin     Juillet  Aout     )\n               SET &GN = &GN&STR(SeptembreOctobre  Novembre D!cembre )\n               END\n             ELSE DO\n               SET &GN = &STR(January  February March    April    )\n               SET &GN = &GN&STR(May      June     July     August   )\n               SET &GN = &GN&STR(SeptemberOctober  November December )\n               END\n             SET &MONTH = &SUBSTR(&LOW:&HIGH,&GN)\n             SET &MONTH = &MONTH          /* TO LOSE TRAILING BLANKS */\n             SET &ISEC = 1900\n             IF &AA = 0 THEN SET &ISEC = 2000\n             SET &AA1 = &AA+&ISEC\n             SET &N0 = ((&AA1/4)*4)\n             SET &N2 = &MM*2\n             SET &N1 = &N2-1\n             IF &AA1 EQ &N0 THEN -\n               SET &GGT = &SUBSTR(&N1:&N2,312931303130313130313031)\n             ELSE SET &GGT = &SUBSTR(&N1:&N2,312831303130313130313031)\n             IF &GG GT &GGT THEN DO\n               ISPEXEC SETMSG MSG(PAJC000Y)\n               GOTO ULOOP\n               END\n             SET &MM1 = &SUBSTR(&MM,032503514624)\n             SET &GGX = &GG+&MM1\n             SET &AA2 = ((&AA1*100)+&MM-3)/100\n             SET &N0 = &AA2/100\n             SET &N01 = &AA2//100\n             SET &N1 = &N0//4\n             SET &N2 = &N01//4\n             SET &N4 = &N01/4 +&N1\n             SET &N7 = &GGX+&N2+&N4*5\n             SET &N8 = &N7//7        /* DAY NUMBER, WHERE SUNDAY = 0 */\n             SET &LOW = &N8*10+1\n             SET &HIGH = &LOW+9\n             IF &SCLANG EQ I THEN DO\n               SET &GN = &STR(Domenica  Lunedi'   Martedi'  Mercoledi')\n               SET &GN = &GN&STR(Giovedi'  Venerdi'  Sabato    )\n               END\n             ELSE IF &SCLANG EQ F THEN DO\n               SET &GN = &STR(Dimanche  Lundi     Mardi     Mercredi  )\n               SET &GN = &GN&STR(Jeudi     Vendredi  Samedi    )\n               END\n             ELSE DO\n               SET &GN = &STR(Sunday    Monday    Tuesday   Wenesday  )\n               SET &GN = &GN&STR(Thursday  Friday    Saterday  )\n               END\n             SET &SCD = &SUBSTR(&LOW:&HIGH,&GN)\n             SET &SCD = &SCD              /* TO LOSE TRAILING BLANKS */\n             IF &SUBSTR(1,&GG) \u00ac= 0 THEN DO\n               IF &LENGTH(&GG) = 1 THEN SET &GG = &STR(0&GG)\n               END\n             IF &SUBSTR(1,&MM) \u00ac= 0 THEN DO\n               IF &LENGTH(&MM) = 1 THEN SET &MM = &STR(0&MM)\n               END\n             IF &SUBSTR(1,&AA) \u00ac= 0 THEN DO\n               IF &LENGTH(&AA) = 1 THEN SET &AA = &STR(0&AA)\n               END\n             SET &SCAROU = &STR(--- &SCD &GG &MONTH &AA1 :)\n             IF &SCA EQ B THEN ISPEXEC TBSKIP SCTABLE NUMBER(-1)\n             ISPEXEC TBADD SCTABLE\n             END\n           ELSE IF &SCA EQ D THEN DO\n             DO WHILE &SCN GE 1\n               ISPEXEC TBDELETE SCTABLE\n               ISPEXEC TBSKIP SCTABLE\n               IF &LASTCC NE 0 THEN SET &SCN = 0\n               ELSE SET &SCN = &SCN - 1\n               END\n             END\n           ELSE IF &SCA EQ I THEN DO\n             DO WHILE &SCN GE 1\n               SET &SCAROU = &STR( )\n               ISPEXEC TBADD SCTABLE\n               SET &SCN = &SCN - 1\n               END\n             END\n           ELSE IF &SCA EQ R THEN DO\n             DO WHILE &SCN GE 1\n               ISPEXEC TBADD SCTABLE\n               SET &SCN = &SCN - 1\n               END\n             END\n           ELSE IF &SCA EQ S THEN DO\n             SET &SCAROU = &STR(STOP       )\n             ISPEXEC TBADD SCTABLE\n             END\n           ELSE IF &SCA EQ &STR( ) THEN ISPEXEC TBPUT SCTABLE\n           END\n         GOTO ULOOP\nTSAVE:   SET &GG = &SUBSTR(4:5,&SYSDATE)\n         SET &MM = &SUBSTR(1:2,&SYSDATE)\n         SET &AA = &SUBSTR(7:8,&SYSDATE)\n         SET &ISEC = 1900\n         IF &AA = 0 THEN SET &ISEC = 2000\n         SET &MM1 = &SUBSTR(&MM,032503514624)\n         SET &GGX = &GG+&MM1\n         SET &AA1 = &AA+&ISEC\n         SET &AA2 = ((&AA1*100)+&MM-3)/100\n         SET &N0 = &AA2/100\n         SET &N01 = &AA2//100\n         SET &N1 = &N0//4\n         SET &N2 = &N01//4\n         SET &N4 = &N01/4 +&N1\n         SET &N7 = &GGX+&N2+&N4*5\n         SET &N8 = &N7//7            /* DAY NUMBER, WHERE SUNDAY = 0 */\n         SET &LOW = &N8*10+1\n         SET &HIGH = &LOW+9\n         IF &SCLANG EQ I THEN DO\n           SET &GN = &STR(Domenica  Lunedi'   Martedi'  Mercoledi')\n           SET &GN = &GN&STR(Giovedi'  Venerdi'  Sabato    )\n           END\n         ELSE IF &SCLANG EQ F THEN DO\n           SET &GN = &STR(Dimanche  Lundi     Mardi     Mercredi  )\n           SET &GN = &GN&STR(Jeudi     Vendredi  Samedi    )\n           END\n         ELSE DO\n           SET &GN = &STR(Sunday    Monday    Tuesday   Wenesday  )\n           SET &GN = &GN&STR(Thursday  Friday    Saterday  )\n           END\n         SET &SCD = &SUBSTR(&LOW:&HIGH,&GN)\n         SET &SCD = &SCD                  /* TO LOSE TRAILING BLANKS */\n         SET &HIGH = &MM*9\n         SET &LOW = &HIGH-8\n         IF &SCLANG EQ I THEN DO\n           SET &GN = &STR(Gennaio  Febbraio Marzo    Aprile   )\n           SET &GN = &GN&STR(Maggio   Giugno   Luglio   Agosto   )\n           SET &GN = &GN&STR(SettembreOttobre  Novembre Dicembre )\n           END\n         ELSE IF &SCLANG EQ F THEN DO\n           SET &GN = &STR(Janvier  Fevrier  Mars     Avril    )\n           SET &GN = &GN&STR(Mai      Juin     Juillet  Aout     )\n           SET &GN = &GN&STR(SeptembreOctobre  Novembre D!cembre )\n           END\n         ELSE DO\n           SET &GN = &STR(January  February March    April    )\n           SET &GN = &GN&STR(May      June     July     August   )\n           SET &GN = &GN&STR(SeptemberOctober  November December )\n           END\n         SET &MONTH = &SUBSTR(&LOW:&HIGH,&GN)\n         SET &MONTH = &MONTH              /* TO LOSE TRAILING BLANKS */\n         IF &SUBSTR(1,&GG) \u00ac= 0 THEN DO\n           IF &LENGTH(&GG) = 1 THEN SET &GG = &STR(0&GG)\n           END\n         IF &SUBSTR(1,&MM) \u00ac= 0 THEN DO\n           IF &LENGTH(&MM) = 1 THEN SET &MM = &STR(0&MM)\n           END\n         IF &SUBSTR(1,&AA) \u00ac= 0 THEN DO\n           IF &LENGTH(&AA) = 1 THEN SET &AA = &STR(0&AA)\n           END\n         SET &SCO = &SUBSTR(1:5,&SYSTIME)\n         IF &SCLANG EQ I THEN DO\n         SET &SCUPDT = &STR(Aggiornato &SCD &GG &MONTH &AA1 ore &SCO..)\n           END\n         ELSE IF &SCLANG EQ F THEN DO\n         SET &SCUPDT = &STR(Ajourn! au &SCD &GG &MONTH &AA1 { &SCO..)\n           END\n         ELSE DO\n         SET &SCUPDT = &STR(Updated on &SCD &GG &MONTH &AA1 at &SCO..)\n           END\n         SET &SCSWI = NO\n         ISPEXEC LMOPEN DATAID(&SCFIN) OPTION(OUTPUT)\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           IF &SCTEST EQ TEST THEN DO\n             WRITE *** OPEN ERROR - RC=&RC ***\n             WRITE &ZERRLM\n             END\n           ELSE WRITE \"&SCID\" communication cannot be saved\n           GOTO XLOOP\n           END\n         SET &SCSWW = NO\n         ISPEXEC TBTOP SCTABLE\nWLOOP:   ISPEXEC TBSKIP SCTABLE NUMBER(+1)\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN GOTO WLEND\n         ISPEXEC TBGET SCTABLE\n         SET &RC = &LASTCC\n         IF &RC GT 4 THEN DO\n           IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003A)\n           ELSE ISPEXEC SETMSG MSG(PAJC004A)\n           SET &SCSWM = YES\n           GOTO WRCLS\n           END\n         SET &SCSWW = YES\n         IF &SCSWI EQ NO THEN DO\n           SET &SCARLOU = &LENGTH(&STR(&SCAROU))\n           IF &SCARLOU GE 11 THEN DO\n             SET &SCTT = &SUBSTR(1:11,&SCAROU)\n             IF &STR(&SCTT) EQ &STR(STOP       ) THEN DO\n               SET &SCARIN = &STR(&SCUPDT)\n               ISPEXEC LMPUT DATAID(&SCFIN) MODE(INVAR) +\n                 DATALOC(SCARIN) DATALEN(80) NOBSCAN\n               SET &RC = &LASTCC\n               IF &RC NE 0 THEN DO\n                 IF &SCSWM EQ NO THEN DO\n                   IF &SCTEST EQ TEST THEN -\n                     ISPEXEC SETMSG MSG(PAJC003B)\n                   ELSE ISPEXEC SETMSG MSG(PAJC004B)\n                   SET &SCSWM = YES\n                   END\n                 GOTO WRCLS\n                 END\n               SET &SCSWI = YES\n               END\n             END\n           END\n         SET &SCARIN = &STR(&SCAROU)\n         ISPEXEC LMPUT DATAID(&SCFIN) MODE(INVAR) +\n           DATALOC(SCARIN) DATALEN(80) NOBSCAN\n         SET &RC = &LASTCC\n         IF &RC EQ 0 THEN GOTO WLOOP\n         IF &SCSWM EQ NO THEN DO\n           IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003B)\n           ELSE ISPEXEC SETMSG MSG(PAJC004B)\n           SET &SCSWM = YES\n           END\n         GOTO WRCLS\nWLEND:   IF &RC GT 8 THEN DO\n           IF &SCSWM EQ NO THEN DO\n             IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003C)\n             ELSE ISPEXEC SETMSG MSG(PAJC004C)\n             SET &SCSWM = YES\n             END\n           GOTO WRCLS\n           END\n         IF &SCSWW EQ NO THEN DO\n           IF &SCSWC EQ NO THEN DO\n             ISPEXEC LMMDEL DATAID(&SCFIN) MEMBER(&SCMEM)\n             SET &RC = &LASTCC\n             IF &RC EQ 0 THEN ISPEXEC SETMSG MSG(PAJC009D)\n             ELSE IF &SCSWM EQ NO THEN DO\n               IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003D)\n               ELSE ISPEXEC SETMSG MSG(PAJC004D)\n               END\n             END\n           ELSE ISPEXEC SETMSG MSG(PAJC009E)\n           SET &SCSWM = YES\n           GOTO WRCLS\n           END\n         IF &SCSWI EQ NO THEN DO\n           SET &SCARIN = &STR(&SCUPDT)\n           ISPEXEC LMPUT DATAID(&SCFIN) MODE(INVAR) +\n             DATALOC(SCARIN) DATALEN(80) NOBSCAN\n           SET &RC = &LASTCC\n           IF &RC NE 0 THEN DO\n             IF &SCSWM EQ NO THEN DO\n               IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003B)\n               ELSE ISPEXEC SETMSG MSG(PAJC004B)\n               SET &SCSWM = YES\n               END\n             GOTO WRCLS\n             END\n           END\n         IF &SCSWC EQ YES THEN -\n           ISPEXEC LMMADD DATAID(&SCFIN) MEMBER(&SCMEM)\n         ELSE ISPEXEC LMMREP DATAID(&SCFIN) MEMBER(&SCMEM)\n         SET &RC = &LASTCC\n         IF &RC EQ 0 THEN GOTO WRCLS\n         ELSE IF &SCSWM EQ NO THEN DO\n           IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003E)\n           ELSE ISPEXEC SETMSG MSG(PAJC004E)\n           SET &SCSWM = YES\n           END\nWRCLS:   ISPEXEC LMCLOSE DATAID(&SCFIN)\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           IF &SCSWM EQ NO THEN DO\n             IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003F)\n             SET &SCSWM = YES\n             END\n           END\nXLOOP:   CONTROL CAPS\n         ISPEXEC LMFREE DATAID(&SCFIN)\n         SET &RC = &LASTCC\n         IF &RC NE 0 THEN DO\n           IF &SCSWM EQ NO THEN DO\n             IF &SCTEST EQ TEST THEN ISPEXEC SETMSG MSG(PAJC003G)\n             SET &SCSWM = YES\n             END\n           END\n         ISPEXEC TBEND SCTABLE\n         ISPEXEC CONTROL ERRORS CANCEL\n         IF &SCSWM EQ NO THEN ISPEXEC SETMSG MSG(PAJC009F)\n         EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJCSHDE": {"ttr": 6665, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x14B\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T14:42:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "SYSPAJA"}, "text": "         ISREDIT MACRO\n         ISPEXEC VGET (UUNB1 UUNB2) SHARED\n         ISREDIT (CHKLL) = DATA_WIDTH\n         SET CHKTT = (&CHKLL / 8) * 8\n         IF &CHKTT NE &CHKLL THEN ISREDIT CANCEL\n         ISREDIT !CRY D,&UUNB2\n         IF &LASTCC NE 0 THEN ISREDIT CANCEL\n         ISREDIT !CRY D,&UUNB1\n         IF &LASTCC NE 0 THEN ISREDIT CANCEL\n         ISREDIT RESET\n         ISREDIT EDMODE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCSHDU": {"ttr": 6667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x17\\x08\\x00\\xc0\\x00\\xc0\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T17:08:00", "lines": 192, "newlines": 192, "modlines": 0, "user": "SYSPAJA"}, "text": "PROC     0\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n/*       SHADUP : UPDATE/LINK-EDIT SHADOW PROGRAM TABLE.         (PM)*/\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n         CONTROL MAIN NOMSG\n         IF &SYSISPF EQ &STR(NOT ACTIVE) THEN GOTO QUIT\n         ISPEXEC VGET (ZUSER)\n         SET UUTLL = &STR(&ZUSER..LINK.DATA)\n         ISPEXEC VPUT (UUTLL) SHARED\n         SET UU1 =\n         SET UU2 =\n         SET UU3 =\n         SET UU4 =\n         SET UUDSN =\n         SET UUDSE =\nRSTR:    SET UUCP = &STR(UUDSN)\n         SET UUMSG = &Z\n         SET UUERR = &Z\n         GOTO INIT\nINVS:    ISPEXEC SETMSG MSG(PAJU990H)\nINIT:    ISPEXEC VPUT (UU1 UU2 UU3 UU4 UUDSN UUDSE) SHARED\n         ISPEXEC DISPLAY PANEL(PAJSHDWU) CURSOR(&UUCP)\n         SET UUCC = &LASTCC\n         IF &UUCC EQ 8 THEN GOTO QUIT\n         IF &UUCC NE 0 THEN DO\n           SET UU1 = &Z\n           SET UU2 = &Z\n           SET UU3 = &Z\n           SET UU4 = &Z\n           SET UUDSN = &Z\n           ISPEXEC VPUT (UU1 UU2 UU3 UU4 UUDSN) SHARED\n           SET UUOP = 0\n           GOTO XERR\n           END\n         ISPEXEC VGET (UU1 UU2 UU3 UU4 UUDSN) SHARED\n         SET UUDSE =\n         IF &UUDSN EQ &Z THEN DO\n           SET UUDSE = &STR(<= COMPLETE)\n           SET UUCP = &STR(UUDSN)\n           GOTO INIT\n           END\n         IF ((&UU1 EQ NO) AND (&UU2 EQ NO) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ NO)) THEN GOTO INVS\n         IF ((&UU1 EQ NO) AND (&UU2 EQ NO) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ NO) AND (&UU2 EQ NO) AND (&UU3 EQ YES) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ NO) AND (&UU2 EQ YES) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ YES) AND (&UU2 EQ NO) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ NO)) THEN GOTO INVS\n         IF ((&UU1 EQ YES) AND (&UU2 EQ NO) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ YES) AND (&UU2 EQ YES) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF &UU1 EQ NO THEN DO\n           ERROR DO\n             ERROR OFF\n             SET UUCC = &LASTCC\n             GOTO XERR\n             END\n           SET UUOP = 1\n           ALLOC F(UUDATA) DSN('&UUDSN') OLD\n           SET UUOP = 100\n           ALLOC F(UUFROM) DSN('->.SHADOW.DATA') SHR\n           ERROR OFF\n           ISPEXEC CONTROL ERRORS RETURN\n           ISPEXEC LMINIT DATAID(UUINDT) DDNAME(UUDATA)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 2\n             GOTO XERR\n             END\n           ISPEXEC LMINIT DATAID(UUFRDT) DDNAME(UUFROM)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 3\n             GOTO XERR\n             END\n           ISPEXEC LMCOPY FROMID(&UUFRDT) FROMMEM(PAJSHDU) +\n             TODATAID(&UUINDT) TOMEM(PAJSHDT) REPLACE\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 4\n             GOTO XERR\n             END\n           ISPEXEC LMFREE DATAID(&UUFRDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 5\n             GOTO XERR\n             END\n           ISPEXEC LMFREE DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 6\n             GOTO XERR\n             END\n           ISPEXEC CONTROL ERRORS CANCEL\n           CONTROL NOMSG\n           FREE FILE(UUDATA)\n           FREE FILE(UUFROM)\n           CONTROL MSG\n           END\n         IF &UU2 EQ YES THEN DO\n           ISPEXEC CONTROL ERRORS RETURN\n           ISPEXEC EDIT DATASET('&UUDSN(PAJSHDT)')\n           SET UUCC = &LASTCC\n           IF &UUCC GT 4 THEN DO\n             SET UUOP = 7\n             GOTO XERR\n             END\n           IF &UUCC EQ 4 THEN DO\n             ISPEXEC SETMSG(PAJU990R)\n             GOTO RSTR\n             END\n           ISPEXEC LMINIT DATAID(UUINDT) DATASET('&UUDSN') ENQ(EXCLU)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 8\n             GOTO XERR\n             END\n           ISPEXEC LMCOMP DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 9\n             GOTO XERR\n             END\n           ISPEXEC LMFREE DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 10\n             GOTO XERR\n             END\n           END\n         IF ((&UU3 EQ YES) OR (&UU4 EQ YES)) THEN DO\n           EUSID\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 11\n             GOTO XERR\n             END\n           CONTROL NOMSG\n           FREE F(SYSPO SYSSU)\n           CONTROL MSG\n           ISPEXEC CONTROL ERRORS CANCEL\n           ISPEXEC FTOPEN TEMP\n           ISPEXEC FTINCL PAJSSHDU\n           ISPEXEC FTCLOSE\n           ISPEXEC VGET ZTEMPF\n           ALLOC F(SYSPO) DA('&ZTEMPF')\n           INTRDR SYSSU\n           EUSUB\n           CONTROL NOMSG\n           FREE F(SYSPO SYSSU)\n           CONTROL MSG\n           ISPEXEC CONTROL ERRORS RETURN\n           SET &IOPARM = &STR(I.&EURUSID.T)\n           ISPEXEC SELECT PGM(IOFSPF) PARM(&IOPARM) NEWAPPL(IOF)\n           END\n         IF &UU4 EQ YES THEN ISPEXEC SETMSG MSG(PAJU990Y)\n         ELSE ISPEXEC SETMSG MSG(PAJU990T)\n         IF &UU4 EQ YES THEN GOTO QUIT\n         ELSE GOTO INIT\nXERR:    IF &UUOP EQ 0 THEN SET UUMSG = &STR(PANEL DISPLAY ERROR)\n         ELSE IF &UUOP EQ 1 THEN +\n           SET UUMSG = &STR(FILE ALLOCATION FAILED)\n         ELSE IF &UUOP EQ 100 THEN +\n           SET UUMSG = &STR(MASTER FILE ALLOCATION FAILED)\n         ELSE IF &UUOP EQ 7 THEN +\n           SET UUMSG = &STR(EDIT \"PAJSHDT\" MEMBER FAILED)\n         ELSE IF &UUOP EQ 11 THEN +\n           SET UUMSG = &STR(\"EUSID\" COMMAND FAILED)\n         ELSE SET UUERR = &STR(&ZERRLM)\n         IF &UUOP LE 1 THEN ISPEXEC CONTROL ERRORS RETURN\n         IF &UUERR NE &Z THEN DO\n           ISPEXEC VPUT (UUOP UUERR) SHARED\n           ISPEXEC SETMSG MSG(PAJU990C)\n           END\n         ELSE DO\n           ISPEXEC VPUT (UUOP UUCC UUMSG) SHARED\n           ISPEXEC SETMSG MSG(PAJU990B)\n           END\n         IF &UUOP EQ 4 THEN ISPEXEC LMFREE DATAID(&UUFRDT)\n         IF (((&UUOP GE 3) AND (&UUOP LE 5)) OR +\n           (&UUOP EQ 9)) THEN ISPEXEC LMFREE DATAID(&UUINDT)\n         IF ((&UUOP GE 2) AND (&UUOP LE 6)) THEN DO\n           FREE FILE(UUDATA)\n           FREE FILE(UUFROM)\n           END\n         ISPEXEC CONTROL ERRORS CANCEL\nQUIT:    EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJCSHDW": {"ttr": 6916, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944?\\x00\\x944?\\x11P\\x01]\\x01]\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-09T00:00:00", "modifydate": "1994-12-09T11:50:00", "lines": 349, "newlines": 349, "modlines": 0, "user": "SYSPAJA"}, "text": "PROC     0\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n/*       SHADOW : ENCRYPT-DECRYPT DATA-SET (PO/PS).              (PM)*/\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n         CONTROL MAIN NOMSG\n         IF &SYSISPF EQ &STR(NOT ACTIVE) THEN GOTO QUIT\n         SET UUDSN =\n         SET UUDSE =\n         SET UUNB1 =\n         SET UUNB2 =\n         SET UUNBE =\nRSTR:    SET UUCP = &STR(UUDSN)\n         SET UUWHT = &Z\n         SET UUMSG = &Z\n         SET UUERR = &Z\nINIT:    ISPEXEC VPUT (UUDSN UUDSE UUNB1 UUNB2 UUNBE) SHARED\n         ISPEXEC DISPLAY PANEL(PAJSHDWI) CURSOR(&UUCP)\n         SET UUCC = &LASTCC\n         IF &UUCC EQ 8 THEN GOTO QUIT\n         IF &UUCC NE 0 THEN DO\n           SET UUDSN = &Z\n           SET UUNB1 = &Z\n           SET UUNB2 = &Z\n           ISPEXEC VPUT (UUDSN UUNB1 UUNB2) SHARED\n           SET UUOP = 0\n           GOTO XERR\n           END\n         ISPEXEC VGET (UUDSN UUNB1 UUNB2) SHARED\n         SET UUDSE =\n         SET UUNBE =\n         IF &UUDSN EQ &Z THEN DO\n           SET UUDSE = &STR(<= COMPLETE)\n           SET UUCP = &STR(UUDSN)\n           GOTO INIT\n           END\n         IF ((&UUNB1 EQ &Z) OR (&UUNB2 EQ &Z)) THEN DO\n           SET UUNBE = &STR(<= COMPLETE)\n           IF &UUNB1 EQ &Z THEN SET UUCP = &STR(UUNB1)\n             ELSE SET UUCP = &STR(UUNB2)\n           GOTO INIT\n           END\n         ISPEXEC SELECT PGM(PAJSHDW) PARM(&UUNB1,&UUNB2)\n         SET UUCC = &LASTCC\n         IF &UUCC NE 0 THEN DO\n           SET UUNB1 =\n           SET UUNB2 =\n           SET UUNBE = &STR(<= BAD DATA)\n           SET UUCP = &STR(UUNB1)\n           IF &UUCC EQ 101 THEN +\n             SET UUMSG = &STR(NO KEYWORDS TABLE)\n           ELSE IF &UUCC EQ 102 THEN +\n             SET UUMSG = &STR(KEYWORDS TABLE ERROR)\n           ELSE IF &UUCC EQ 103 THEN +\n             SET UUMSG = &STR(MISSING PARM. FIELD)\n           ELSE IF &UUCC EQ 104 THEN +\n             SET UUMSG = &STR(ERROR PARM. FIELD)\n           ELSE IF &UUCC EQ 105 THEN +\n             SET UUMSG = &STR(1ST KEYWORD MISSING)\n           ELSE IF &UUCC EQ 106 THEN +\n             SET UUMSG = &STR(1ST KEYWORD TOO LONG)\n           ELSE IF &UUCC EQ 107 THEN +\n             SET UUMSG = &STR(2ND KEYWORD MISSING)\n           ELSE IF &UUCC EQ 108 THEN +\n             SET UUMSG = &STR(2ND KEYWORD TOO LONG)\n           ELSE IF &UUCC EQ 109 THEN +\n             SET UUMSG = &STR(1ST CALL SETKEY ERROR)\n           ELSE IF &UUCC EQ 110 THEN +\n             SET UUMSG = &STR(1ST CALL DECIPH ERROR)\n           ELSE IF &UUCC EQ 111 THEN +\n             SET UUMSG = &STR(2ND CALL SETKEY ERROR)\n           ELSE IF &UUCC EQ 112 THEN +\n             SET UUMSG = &STR(2ND CALL DECIPH ERROR)\n           ELSE IF &UUCC EQ 113 THEN +\n             SET UUMSG = &STR(3RD CALL SETKEY ERROR)\n           ELSE IF &UUCC EQ 114 THEN +\n             SET UUMSG = &STR(CALL ENCIPH ERROR)\n           ELSE IF &UUCC EQ 115 THEN +\n             SET UUMSG = &STR(CONTROL CHECK FAILED)\n           ELSE SET UUMSG = &STR(\"PAJSHDW\" INVOCATION ERROR)\n           ISPEXEC SETMSG MSG(PAJU990D)\n           GOTO INIT\n           END\n         LISTDSI '&UUDSN'\n         SET UUCC = &LASTCC\n         IF &UUCC GT 4 THEN DO\n           SET UUNB1 =\n           SET UUNB2 =\n           SET UUDSE = &STR(<= PO/PS ? )\n           SET UUCP = &STR(UUDSN)\n           SET UUMSG = &STR(DATA-SET INFORMATION ERROR)\n           ISPEXEC SETMSG MSG(PAJU990D)\n           GOTO INIT\n           END\n         IF &SYSDSORG EQ PS THEN GOTO PSEQ\n         IF &SYSDSORG NE PO THEN DO\n           SET UUNB1 =\n           SET UUNB2 =\n           SET UUDSE = &STR(<= PO/PS ? )\n           SET UUCP = &STR(UUDSN)\n           GOTO INIT\n           END\n         SET UURSV = 0\nRFSH:    ERROR DO\n           ERROR OFF\n           SET UUCC = &LASTCC\n           SET UUOP = 1\n           GOTO XERR\n           END\n         ALLOC F(UUDATA) DSN('&UUDSN') SHR\n         ERROR OFF\n         ISPEXEC CONTROL ERRORS RETURN\n         ISPEXEC LMINIT DATAID(UUINDT) DDNAME(UUDATA)\n         SET UUCC = &LASTCC\n         IF &UUCC NE 0 THEN DO\n           SET UUOP = 2\n           GOTO XERR\n           END\n         ISPEXEC LMOPEN DATAID(&UUINDT)\n         SET UUCC = &LASTCC\n         IF &UUCC NE 0 THEN DO\n           SET UUOP = 3\n           GOTO XERR\n           END\n         ISPEXEC TBCREATE UUTABLE NOWRITE KEYS(UUMEM) +\n           NAMES(UUSTS)\n         SET UUMBN =\n         SET UUSW = 0\n         SET UUCC = 0\n         DO WHILE &UUCC = 0\n           ISPEXEC LMMLIST DATAID(&UUINDT) MEMBER(UUMBN) +\n             OPTION(LIST) STATS(YES)\n           SET UUCC = &LASTCC\n           IF &UUCC EQ 0 THEN DO\n             SET UUSW = 1\n             SET UUMEM = &STR(&UUMBN)\n             SET UUSTS = &STR(&ZLVERS..&ZLMOD  &ZLCDATE +\n                              &ZLMDATE &ZLMTIME &ZLCNORC +\n                              &ZLINORC &ZLMNORC &ZLUSER)\n             ISPEXEC TBADD UUTABLE\n             END\n           ELSE IF &UUCC NE 8 THEN DO\n             SET UUOP = 4\n             GOTO XERR\n             END\n           END\n         ISPEXEC LMMLIST DATAID(&UUINDT) OPTION(FREE)\n         SET UUCC = &LASTCC\n         IF &UUCC NE 0 THEN DO\n           SET UUOP = 5\n           GOTO XERR\n           END\n         ISPEXEC LMCLOSE DATAID(&UUINDT)\n         SET UUCC = &LASTCC\n         IF &UUCC NE 0 THEN DO\n           SET UUOP = 6\n           GOTO XERR\n           END\n         ISPEXEC LMFREE DATAID(&UUINDT)\n         SET UUCC = &LASTCC\n         IF &UUCC NE 0 THEN DO\n           SET UUOP = 7\n           GOTO XERR\n           END\n         ISPEXEC CONTROL ERRORS CANCEL\n         CONTROL NOMSG\n         FREE FILE(UUDATA)\n         CONTROL MSG\n         IF &UUSW EQ 0 THEN DO\n           SET UUOP = 8\n           GOTO XERR\n           END\n         ISPEXEC CONTROL ERRORS RETURN\n         ISPEXEC TBTOP UUTABLE\n         SET UUSEL = &STR((B/D/E))\n         ISPEXEC VPUT (UUSEL) SHARED\n         SET ROW = 0\n         SET UUROW = &UURSV\nLOOP:    SET UUCMD = &Z\n         SET UUWHT = &Z\n         SET UUMSG = &Z\n         SET UUERR = &Z\n         ISPEXEC VPUT (UUCMD) SHARED\n         SET DONE = NONE\n         DO WHILE &DONE = NONE\n           IF &ROW NE &UUROW THEN DO\n             ISPEXEC TBTOP UUTABLE\n             ISPEXEC TBSKIP UUTABLE NOREAD NUMBER(&UUROW) +\n               POSITION(ROW)\n             END\n           ISPEXEC TBDISPL UUTABLE PANEL(PAJSHDWS) POSITION(ROW)\n           SET UUCC = &LASTCC\n           IF &UUROW NE &ZTDTOP THEN SET UUROW = &ZTDTOP\n           IF &UUCC EQ 8 THEN SET DONE = BACK\n           ELSE IF &UUCC GT 8 THEN SET DONE = ERROR\n           ELSE IF &UUCMD NE &Z THEN DO\n             IF &UUCMD EQ L THEN DO\n               SET UUMEM = &UUWHT\n               ISPEXEC TBTOP UUTABLE\n               ISPEXEC TBSCAN UUTABLE ARGLIST(UUMEM) NOREAD +\n                 POSITION(UUROW) CONDLIST(GE)\n               IF &LASTCC EQ 8 THEN +\n                 ISPEXEC TBBOTTOM UUTABLE NOREAD POSITION(UUROW)\n               ELSE IF &UUROW NE 0 THEN +\n                 ISPEXEC TBSKIP UUTABLE NUMBER(-1) NOREAD +\n                 POSITION(UUROW)\n               SET ROW = &UUROW\n               END\n             ELSE IF &UUCMD EQ E THEN SET DONE = BACK\n             ELSE SET DONE = CANCEL\n             END\n           ELSE IF &ZTDSELS GE 1 THEN DO\n             IF &S EQ B THEN SET DONE = BROWSE\n             ELSE IF &S EQ S THEN SET DONE = BROWSE\n             ELSE IF &S EQ D THEN SET DONE = DECRYPT\n             ELSE IF &S EQ E THEN SET DONE = ENCRYPT\n             ELSE ISPEXEC SETMSG MSG(PAJU990E)\n             SET UUROW = &ROW\n             END\n           END\n         IF &DONE EQ ERROR THEN DO\n           SET UUOP = 9\n           GOTO XERR\n           END\n         IF ((&DONE EQ CANCEL) OR (&DONE EQ BACK)) THEN GOTO XRSM\n         SET UUMBR = &UUMEM\n         SET UUSWM = YES\n         IF &DONE EQ BROWSE THEN +\n           ISPEXEC BROWSE DATASET('&UUDSN(&UUMBR)')\n         ELSE IF &DONE EQ ENCRYPT THEN +\n           ISPEXEC EDIT DATASET('&UUDSN(&UUMBR)') MACRO(PAJCSHEN)\n         ELSE ISPEXEC EDIT DATASET('&UUDSN(&UUMBR)') MACRO(PAJCSHDE)\n         SET UUCC = &LASTCC\n         IF &UUCC GT 4 THEN DO\n           SET UUOP = 10\n           GOTO XERR\n           END\n         IF ((&DONE NE BROWSE) AND (&UUCC EQ 4)) THEN SET UUSWM = NO\n         IF ((&DONE NE BROWSE) AND (&UUCC EQ 0)) THEN DO\n           ISPEXEC LMINIT DATAID(UUINDT) DATASET('&UUDSN') ENQ(EXCLU)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 11\n             GOTO XERR\n             END\n           ISPEXEC LMCOMP DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 12\n             GOTO XERR\n             END\n           ISPEXEC LMFREE DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 13\n             GOTO XERR\n             END\n           END\n         ISPEXEC VPUT (UUMEM) SHARED\n         IF &UUSWM = YES THEN ISPEXEC SETMSG MSG(PAJU990Z)\n           ELSE ISPEXEC SETMSG MSG(PAJU990S)\n         IF &DONE EQ BROWSE THEN GOTO LOOP\n         SET UURSV = &UUROW\nXRSM:    ISPEXEC TBEND UUTABLE\n         SET UUCC = &LASTCC\n         IF &UUCC NE 0 THEN DO\n           SET UUOP = 14\n           GOTO XERR\n           END\n         IF ((&DONE EQ ENCRYPT) OR (&DONE EQ DECRYPT)) THEN GOTO RFSH\n         IF &DONE EQ BACK THEN GOTO DJST\n         ISPEXEC SETMSG MSG(PAJU990X)\n         ISPEXEC CONTROL ERRORS CANCEL\n         EXIT CODE(0)\nPSEQ:    ISPEXEC CONTROL ERRORS RETURN\n         SET UUANS = &Z\nQASK:    ISPEXEC VPUT (UUANS) SHARED\n         ISPEXEC DISPLAY PANEL(PAJSHDWQ) CURSOR(UUANS)\n         SET UUCC = &LASTCC\n         IF &UUCC EQ 8 THEN GOTO DJST\n         IF &UUCC NE 0 THEN DO\n           SET UUOP = 15\n           GOTO XERR\n           END\n         ISPEXEC VGET (UUANS) SHARED\n         SET UUSWM = YES\n         IF &UUANS EQ BROWSE THEN +\n           ISPEXEC BROWSE DATASET('&UUDSN')\n         ELSE IF &UUANS EQ ENCRYPT THEN +\n           ISPEXEC EDIT DATASET('&UUDSN') MACRO(PAJCSHEN)\n         ELSE ISPEXEC EDIT DATASET('&UUDSN') MACRO(PAJCSHDE)\n         SET UUCC = &LASTCC\n         IF &UUCC GT 4 THEN DO\n           SET UUOP = 16\n           GOTO XERR\n           END\n         IF ((&UUANS NE BROWSE) AND (&UUCC EQ 4)) THEN SET UUSWM = NO\n         IF &UUSWM = YES THEN ISPEXEC SETMSG MSG(PAJU990F)\n           ELSE ISPEXEC SETMSG MSG(PAJU990G)\n         IF &UUANS NE BROWSE THEN SET UUANS = &Z\n         GOTO QASK\nDJST:    SET UUNBE = &STR(<= STILL IN)\n         GOTO RSTR\nXERR:    IF ((&UUOP EQ 0) OR (&UUOP EQ 15)) THEN +\n           SET UUMSG = &STR(PANEL DISPLAY ERROR)\n         ELSE IF &UUOP EQ 1 THEN +\n           SET UUMSG = &STR(FILE ALLOCATION FAILED)\n         ELSE IF &UUOP EQ 8 THEN +\n           SET UUMSG = &STR(TABLE EMPTY ERROR)\n         ELSE IF &UUOP EQ 9 THEN +\n           SET UUMSG = &STR(TABLE DISPLAY ERROR)\n         ELSE IF &UUOP EQ 10 THEN DO\n           IF &DONE EQ BROWSE THEN +\n             SET UUMSG = &STR(BROWSE MEMBER FAILED)\n           ELSE IF &DONE EQ ENCRYPT THEN +\n             SET UUMSG = &STR(ENCRYPT MEMBER FAILED)\n           ELSE SET UUMSG = &STR(DECRYPT MEMBER FAILED)\n           END\n         ELSE IF &UUOP EQ 16 THEN DO\n           IF &UUANS EQ BROWSE THEN +\n             SET UUMSG = &STR(BROWSE DATA-SET FAILED)\n           ELSE IF &UUANS EQ ENCRYPT THEN +\n             SET UUMSG = &STR(ENCRYPT DATA-SET FAILED)\n           ELSE SET UUMSG = &STR(DECRYPT DATA-SET FAILED)\n           END\n         ELSE SET UUERR = &STR(&ZERRLM)\n         IF ((&UUOP LE 1) OR (&UUOP EQ 8)) THEN +\n           ISPEXEC CONTROL ERRORS RETURN\n         IF &UUERR NE &Z THEN DO\n           ISPEXEC VPUT (UUOP UUERR) SHARED\n           ISPEXEC SETMSG MSG(PAJU990C)\n           END\n         ELSE IF &UUMSG NE &Z THEN DO\n           ISPEXEC VPUT (UUOP UUCC UUMSG) SHARED\n           ISPEXEC SETMSG MSG(PAJU990B)\n           END\n         ELSE DO\n           ISPEXEC VPUT (UUOP UUCC UUWHT) SHARED\n           ISPEXEC SETMSG MSG(PAJU990A)\n           END\n         IF &UUOP EQ 4 THEN +\n           ISPEXEC LMMLIST DATAID(&UUINDT) OPTION(FREE)\n         IF ((&UUOP EQ 4) OR (&UUOP EQ 5)) THEN +\n           ISPEXEC LMCLOSE DATAID(&UUINDT)\n         IF (((&UUOP GE 3) AND (&UUOP LE 6)) OR (&UUOP EQ 13)) THEN +\n           ISPEXEC LMFREE DATAID(&UUINDT)\n         IF ((&UUOP GE 2) AND (&UUOP LE 7)) THEN FREE FILE(UUDATA)\n         IF ((&UUOP GE 4) AND (&UUOP LE 13)) THEN ISPEXEC TBEND UUTABLE\n         ISPEXEC CONTROL ERRORS CANCEL\nQUIT:    EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJCSHEN": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x14B\\x00\\n\\x00\\n\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T14:42:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "SYSPAJA"}, "text": "         ISREDIT MACRO\n         ISPEXEC VGET (UUNB1 UUNB2) SHARED\n         ISREDIT (CHKLL) = DATA_WIDTH\n         SET CHKTT = (&CHKLL / 8) * 8\n         IF &CHKTT NE &CHKLL THEN ISREDIT CANCEL\n         ISREDIT !CRY E,&UUNB1\n         IF &LASTCC NE 0 THEN ISREDIT CANCEL\n         ISREDIT !CRY E,&UUNB2\n         IF &LASTCC NE 0 THEN ISREDIT CANCEL\n         ISREDIT END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJCTOPS": {"ttr": 6924, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x944\\x7f\\x00\\x944\\x7f\\x17'\\x01P\\x01P\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-13T00:00:00", "modifydate": "1994-12-13T17:27:00", "lines": 336, "newlines": 336, "modlines": 0, "user": "SYSPAJA"}, "text": "PROC     0\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n/*       TOPSUP : UPDATE/LINK-EDIT TOPSEC PROGRAM TABLES.        (PM)*/\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n         CONTROL MAIN NOMSG\n         IF &SYSISPF EQ &STR(NOT ACTIVE) THEN GOTO QUIT\n         SET IU = &STR(&&)\n         SET TPSMNM =\n         SET UU1 =\n         SET UU2 =\n         SET UU3 =\n         SET UU4 =\nRSTR:    SET UUMSG = &Z\n         SET UUERR = &Z\n         GOTO INIT\nINVS:    ISPEXEC SETMSG MSG(PAJT900A)\nINIT:    ISPEXEC VPUT (TPSMNM UU1 UU2 UU3 UU4) SHARED\n         ISPEXEC DISPLAY PANEL(PAJTOPSM)\n         SET UUCC = &LASTCC\n         IF &UUCC EQ 8 THEN DO\n           ISPEXEC SETMSG MSG(PAJT900X)\n           GOTO QUIT\n           END\n         IF &UUCC NE 0 THEN DO\n           SET UU1 = &Z\n           SET UU2 = &Z\n           SET UU3 = &Z\n           SET UU4 = &Z\n           ISPEXEC VPUT (UU1 UU2 UU3 UU4) SHARED\n           SET UUOP = 0\n           GOTO XERR\n           END\n         ISPEXEC VGET (UUCMD TPSMNM UU1 UU2 UU3 UU4) SHARED\n         IF &UUCMD EQ E THEN DO\n           ISPEXEC SETMSG MSG(PAJT900X)\n           GOTO QUIT\n           END\n         IF ((&UU1 EQ NO) AND (&UU2 EQ NO) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ NO)) THEN GOTO INVS\n         IF ((&UU1 EQ NO) AND (&UU2 EQ NO) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ NO) AND (&UU2 EQ YES) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ YES) AND (&UU2 EQ NO) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ YES) AND (&UU2 EQ NO) AND (&UU3 EQ YES) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF ((&UU1 EQ YES) AND (&UU2 EQ YES) AND (&UU3 EQ NO) AND +\n           (&UU4 EQ YES)) THEN GOTO INVS\n         IF &UU1 EQ YES THEN DO\n           ERROR DO\n             ERROR OFF\n             SET UUCC = &LASTCC\n             GOTO XERR\n             END\n           SET UUOP = 1\n           ALLOC F(UUDATA) DSN('->.TOPSEC.DATA') OLD\n           SET UUOP = 100\n           ALLOC F(UUFROM) DSN('->.SHADOW.DATA') SHR\n           ERROR OFF\n           ISPEXEC CONTROL ERRORS RETURN\n           ISPEXEC LMINIT DATAID(UUINDT) DDNAME(UUDATA)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 2\n             GOTO XERR\n             END\n           ISPEXEC LMINIT DATAID(UUFRDT) DDNAME(UUFROM)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 3\n             GOTO XERR\n             END\n           ISPEXEC LMCOPY FROMID(&UUFRDT) FROMMEM(TOPSECU) +\n             TODATAID(&UUINDT) TOMEM(&TPSMNM) REPLACE\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 4\n             GOTO XERR\n             END\n           ISPEXEC LMFREE DATAID(&UUFRDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 5\n             GOTO XERR\n             END\n           ISPEXEC LMFREE DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 6\n             GOTO XERR\n             END\n           ISPEXEC CONTROL ERRORS CANCEL\n           CONTROL NOMSG\n           FREE FILE(UUDATA)\n           FREE FILE(UUFROM)\n           CONTROL MSG\n           END\n         IF &UU2 EQ YES THEN DO\n           ISPEXEC CONTROL ERRORS RETURN\n           ISPEXEC EDIT DATASET('->.TOPSEC.DATA(&TPSMNM)')\n           SET UUCC = &LASTCC\n           IF &UUCC GT 4 THEN DO\n             SET UUOP = 7\n             GOTO XERR\n             END\n           IF &UUCC EQ 4 THEN DO\n             ISPEXEC SETMSG MSG(PAJT900R)\n             GOTO RSTR\n             END\n           ISPEXEC LMINIT DATAID(UUINDT) +\n             DATASET('->.TOPSEC.DATA') ENQ(EXCLU)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 8\n             GOTO XERR\n             END\n           ISPEXEC LMCOMP DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 9\n             GOTO XERR\n             END\n           ISPEXEC LMFREE DATAID(&UUINDT)\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 10\n             GOTO XERR\n             END\n           END\n         IF ((&UU3 EQ YES) OR (&UU4 EQ YES)) THEN DO\n           IF &UU4 EQ YES THEN DO\n             SET UUTLL = &STR(->.TARGET.CMDLIB)\n             SET UUCN =\n             SET IX = 1\n             DO WHILE &IX LE 10\n               SET UUAN&IX = &Z\n               SET &IX = &IX +1\n               END\n             SET UUCP = &STR(UUCN)\n             SET UUMSG =\n             SET UUERR =\n             SET UULC = 0\n             SET UULL = 0\n             SET UUDSN = &STR(&UUTLL)\n             DO WHILE &UULL EQ 0\n               SET IX = 1\n               DO WHILE &IX LE 10\n                 SET UUVB&IX = &STR(&IU.UUAN&IX)\n                 SET &IX = &IX +1\n                 END\n               ISPEXEC VPUT (UUTLL UUCN UUVB1 UUVB2) SHARED\n               ISPEXEC VPUT (UUVB3 UUVB4 UUVB5 UUVB6) SHARED\n               ISPEXEC VPUT (UUVB7 UUVB8 UUVB9 UUVB10) SHARED\n               ISPEXEC DISPLAY PANEL(PAJTOPSL) CURSOR(&UUCP)\n               SET UULC = &LASTCC\n               SET UUCP = &Z\n               IF ((&UULC NE 0) AND (&UULC NE 8)) THEN DO\n                 SET UUCC = UULC\n                 SET UUOP = 11\n                 GOTO XERR\n                 END\n               ISPEXEC VGET (UUCMD UUTLL UUCN UUAN1 UUAN2) SHARED\n               ISPEXEC VGET (UUAN3 UUAN4 UUAN5 UUAN6) SHARED\n               ISPEXEC VGET (UUAN7 UUAN8 UUAN9 UUAN10) SHARED\n               IF &UUCMD EQ C THEN DO\n                 ISPEXEC SETMSG MSG(PAJT900U)\n                 GOTO RSTR\n                 END\n               IF ((&UUCMD EQ E) OR (&UUCMD EQ T)) THEN SET UULC = 8\n               SET IX = 1\n               DO WHILE &IX LE 10\n                 IF &STR(&IU.UUAN&IX) EQ &STR(&UUCN) THEN +\n                   SET UUAN&IX = &Z\n                 SET IX = &IX + 1\n                 END\n               SET IX = 1\n               DO WHILE &IX LE 9\n                 IF &STR(&IU.UUAN&IX) NE &Z THEN DO\n                   SET OX = &IX + 1\n                   DO WHILE &OX LE 10\n                     IF &STR(&IU.UUAN&OX) NE &Z THEN DO\n                       IF &STR(&IU.UUAN&IX) EQ &STR(&IU.UUAN&OX) THEN +\n                         SET UUAN&OX = &Z\n                       END\n                     SET OX = &OX + 1\n                     END\n                   END\n                 SET IX = &IX + 1\n                 END\n               SET IX = 1\n               SET OX = 1\n               DO WHILE &IX LE 10\n                 IF &STR(&IU.UUAN&IX) NE &Z THEN DO\n                   IF &IX NE &OX THEN DO\n                     SET UUAN&OX = &STR(&IU.UUAN&IX)\n                     SET UUAN&IX = &Z\n                     END\n                   SET OX = &OX + 1\n                   END\n                 SET IX = &IX + 1\n                 END\n               SET IX = 1\n               DO WHILE &IX LE 9\n                 IF &STR(&IU.UUAN&IX) NE &Z THEN DO\n                   SET OX = &IX + 1\n                   DO WHILE &OX LE 10\n                     IF &STR(&IU.UUAN&OX) NE &Z THEN DO\n                       IF &STR(&IU.UUAN&OX) LT &STR(&IU.UUAN&IX) THEN +\n                         DO\n                         SET UUANXC = &STR(&IU.UUAN&IX)\n                         SET UUAN&IX = &STR(&IU.UUAN&OX)\n                         SET UUAN&OX = &STR(&UUANXC)\n                         END\n                       END\n                     SET OX = &OX + 1\n                     END\n                   END\n                 SET IX = &IX + 1\n                 END\n               SET IX = 1\n               DO WHILE &IX LE 10\n                 IF &STR(&IU.UUAN&IX) EQ &Z THEN DO\n                   IF &UUCP EQ &Z THEN SET UUCP = &STR(UUAN&IX)\n                   END\n                 SET IX = &IX + 1\n                 END\n               IF &UUCP EQ &Z THEN SET UUCP = &STR(UUCN)\n               IF &STR(&UUTTL) NE &STR(&UUDSN) THEN DO\n                 LISTDSI '&UUTLL'\n                 SET UUCC = &LASTCC\n                 IF &UUCC NE 0 THEN DO\n                   SET UUDSI = &STR(&SYSMSGLVL2)\n                   ISPEXEC SETMSG MSG(PAJT900D)\n                   END\n                 ELSE DO\n                   IF &SYSDSORG NE PO THEN DO\n                     SET UUCP = &STR(UUTLL)\n                     ISPEXEC SETMSG MSG(PAJT900E)\n                     END\n                   ELSE IF &SYSRECFM NE U THEN DO\n                     SET UUCP = &STR(UUTLL)\n                     ISPEXEC SETMSG MSG(PAJT900F)\n                     END\n                   ELSE DO\n                     IF &UULC EQ 8 THEN DO\n                       IF &UUAN1 NE &Z THEN SET UULL = 4\n                       END\n                     ELSE SET UUDSN = &STR(&UUTLL)\n                     END\n                   END\n                 END\n               ELSE IF &UULC EQ 8 THEN DO\n                 IF &UUAN1 NE &Z THEN SET UULL = 4\n                 END\n               END\n             SET UUNME = &STR(&UUCN)\n             SET UUAL1 = &STR(&UUAN1)\n             SET UUAL2 = &Z\n             IF &STR(&UUAN2) NE &Z THEN +\n               SET UUAL1 = &STR(&UUAL1,&UUAN2)\n             IF &STR(&UUAN3) NE &Z THEN +\n               SET UUAL1 = &STR(&UUAL1,&UUAN3)\n             IF &STR(&UUAN4) NE &Z THEN +\n               SET UUAL1 = &STR(&UUAL1,&UUAN4)\n             IF &STR(&UUAN5) NE &Z THEN +\n               SET UUAL1 = &STR(&UUAL1,&UUAN5)\n             IF &STR(&UUAN6) NE &Z THEN SET UUAL2 = &STR(&UUAN6)\n             IF &STR(&UUAN7) NE &Z THEN +\n               SET UUAL2 = &STR(&UUAL2,&UUAN7)\n             IF &STR(&UUAN8) NE &Z THEN +\n               SET UUAL2 = &STR(&UUAL2,&UUAN8)\n             IF &STR(&UUAN9) NE &Z THEN +\n               SET UUAL2 = &STR(&UUAL2,&UUAN9)\n             IF &STR(&UUAN10) NE &Z THEN +\n               SET UUAL2 = &STR(&UUAL2,&UUAN10)\n             ISPEXEC VPUT (UUNME UUAL1 UUAL2) SHARED\n             END\n           EUSID\n           SET UUCC = &LASTCC\n           IF &UUCC NE 0 THEN DO\n             SET UUOP = 12\n             GOTO XERR\n             END\n           CONTROL NOMSG\n           FREE F(SYSPO SYSSU)\n           CONTROL MSG\n           ISPEXEC CONTROL ERRORS CANCEL\n           ISPEXEC FTOPEN TEMP\n           ISPEXEC FTINCL PAJSTOPS\n           ISPEXEC FTCLOSE\n           ISPEXEC VGET ZTEMPF\n           ALLOC F(SYSPO) DA('&ZTEMPF')\n           INTRDR SYSSU\n           EUSUB\n           CONTROL NOMSG\n           FREE F(SYSPO SYSSU)\n           CONTROL MSG\n           ISPEXEC CONTROL ERRORS RETURN\n           SET &IOPARM = &STR(I.&EURUSID.U)\n           ISPEXEC SELECT PGM(IOFSPF) PARM(&IOPARM) NEWAPPL(IOF)\n           END\n         IF &UU4 EQ YES THEN ISPEXEC SETMSG MSG(PAJT900Y)\n         ELSE IF &UUCMD EQ T THEN ISPEXEC SETMSG MSG(PAJT900Z)\n         ELSE ISPEXEC SETMSG MSG(PAJT900T)\n         IF &UU4 EQ YES THEN GOTO QUIT\n         ELSE GOTO INIT\nXERR:    IF ((&UUOP EQ 0) OR (&UUOP EQ 11)) THEN +\n           SET UUMSG = &STR(PANEL DISPLAY ERROR)\n         ELSE IF &UUOP EQ 1 THEN +\n           SET UUMSG = &STR(FILE ALLOCATION FAILED)\n         ELSE IF &UUOP EQ 100 THEN +\n           SET UUMSG = &STR(MASTER FILE ALLOCATION FAILED)\n         ELSE IF &UUOP EQ 7 THEN +\n           SET UUMSG = &STR(EDIT \"&TPSMNM\" MEMBER FAILED)\n         ELSE IF &UUOP EQ 12 THEN +\n           SET UUMSG = &STR(\"EUSID\" COMMAND FAILED)\n         ELSE SET UUERR = &STR(&ZERRLM)\n         IF &UUOP LE 1 THEN ISPEXEC CONTROL ERRORS RETURN\n         IF &UUERR NE &Z THEN DO\n           ISPEXEC VPUT (UUOP UUERR) SHARED\n           ISPEXEC SETMSG MSG(PAJT900C)\n           END\n         ELSE DO\n           ISPEXEC VPUT (UUOP UUCC UUMSG) SHARED\n           ISPEXEC SETMSG MSG(PAJT900B)\n           END\n         IF &UUOP EQ 4 THEN ISPEXEC LMFREE DATAID(&UUFRDT)\n         IF (((&UUOP GE 3) AND (&UUOP LE 5)) OR +\n           (&UUOP EQ 9)) THEN ISPEXEC LMFREE DATAID(&UUINDT)\n         IF ((&UUOP GE 2) AND (&UUOP LE 6)) THEN DO\n           FREE FILE(UUDATA)\n           FREE FILE(UUFROM)\n           END\n         ISPEXEC CONTROL ERRORS CANCEL\nQUIT:    EXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJC00": {"ttr": 7174, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x11X\\x00~\\x00~\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T11:58:00", "lines": 126, "newlines": 126, "modlines": 0, "user": "SYSPAJA"}, "text": "PAJC000A 'Invalid command' .ALARM=YES\n'Valid commands : CANCEL, END, HELP or SAVE.'\n\nPAJC000B 'Invalid command' .ALARM=YES\n'Enter a valid line-command : A, B, D, I, R or S.'\n\nPAJC000C 'Number error' .ALARM=YES\n'Line-commands can be followed by a number from 1 to 99.'\n\nPAJC000D 'DAY error' .ALARM=YES\n'DAY must range from 1 to 31.'\n\nPAJC000E 'MONTH error' .ALARM=YES\n'MONTH must range from 1 to 12.'\n\nPAJC000F 'YEAR error' .ALARM=YES\n'YEAR must range from 0 to 99.'\n\nPAJC000W 'DISPLAY error' .ALARM=YES\n'Error processing panel \"PAJSC0\" / RC=&RC..'\n\nPAJC000X 'Unauthorized access' .ALARM=YES\n'You are not authorized to use this option, sorry.'\n\nPAJC000Y 'DAY error' .ALARM=YES\n'DAY must range from 1 to &GGT for &MONTH of &AA1..'\n\nPAJC000Z 'EUSID error' .ALARM=YES\n'TSO command EUSID error / RC=&RC'\n\nPAJC001A 'INIT-I/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC001B 'OPEN-I/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC001D 'FIND-I/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC001E 'READ-I/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC001F 'CLSE-I/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC001G 'FREE-I/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC001H 'DISPLAY error' .ALARM=YES\n'Error displaying \"&SCID\" communication / RC=&RC..'\n\nPAJC002A 'UNAV./RC=&RC' .ALARM=YES\n'\"&SCID\" communication unavailable.'\n\nPAJC002B 'UNACC./RC=&RC' .ALARM=YES\n'\"&SCID\" communication unaccessible.'\n\nPAJC002C 'COMM. in use' .ALARM=YES\n'\"&SCID\" communication in use by another user.'\n\nPAJC002D 'No communication' .ALARM=YES\n'There are no communication from \"&SCID\".'\n\nPAJC002E 'READ error' .ALARM=YES\n'\"&SCID\" communication gives trouble in read, sorry.'\n\nPAJC002F 'CLOSE error' .ALARM=YES\n'\"&SCID\" communication has given trouble at close, warning.'\n\nPAJC002G 'FREE error' .ALARM=YES\n'\"&SCID\" communication has given trouble at deallocation, warning.'\n\nPAJC003A 'TBGET/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC003B 'WRTE-O/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC003C 'TBSKIP/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC003D 'DELETE/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC003E 'STORE/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC003F 'CLSE-O/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC003G 'FREE-O/RC=&RC' .ALARM=YES\n'&ZERRLM'\n\nPAJC004A 'READ error' .ALARM=YES\n'Error reading \"&SCID\" communication / RC=&RC..'\n\nPAJC004B 'WRITE error' .ALARM=YES\n'Error preparing \"&SCID\" communication / RC=&RC..'\n\nPAJC004C 'SCAN error' .ALARM=YES\n'Error scanning \"&SCID\" communication / RC=&RC..'\n\nPAJC004D 'SCAN error' .ALARM=YES\n'Error deleting \"&SCID\" communication / RC=&RC..'\n\nPAJC004E 'STORE error' .ALARM=YES\n'Error saving \"&SCID\" communication / RC=&RC..'\n\nPAJC009A 'Display done' .ALARM=YES\n'Display of \"&SCID\" communication ended normally.'\n\nPAJC009B '&SCTIT failed' .ALARM=YES\n'&SCTIT of \"&SCID\" communication fails, none saved.'\n\nPAJC009C '&SCTIT canceled' .ALARM=YES\n'&SCTIT of \"&SCID\" communication canceled, none saved.'\n\nPAJC009D 'Delete done' .ALARM=YES\n'\"&SCID\" communication is now empty, so none to save.'\n\nPAJC009E 'None stored' .ALARM=YES\n'\"&SCID\" communication create ended empty, so none to save.'\n\nPAJC009F '&SCTIT done' .ALARM=YES\n'&SCTIT of \"&SCID\" communication ended normally, info's saved.'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJSC0": {"ttr": 7177, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x12\\x05\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T12:05:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "SYSPAJA"}, "text": "%SHORT --------------  System Sector Short Communication  ----------------------\n%Command ===>_ZCMD                                                             +\n+\n+\n%Short Communication+(Information/messages)\n+\n+             From :_SSUSID +(Enter User-id or leave blank)\n+\n+             Language :_SCLANG  +(Enter Italiano or I, Fran\\ais or F,\n+                                  English, E or leave blank)\n+\n+\n)INIT\n  .HELP = PAJTSC1\n  .CURSOR = ZCMD\n  &SSUSID = &Z\n)PROC\n  IF (&SSUSID = &Z)\n    &SCID = &Z\n  IF (&SSUSID \u00ac= &Z)\n    VER (&SSUSID,NAME)\n    &SCID = '&SSUSID'\n  IF (&SCLANG \u00ac= &Z)\n    &SSTL = TRANS (&SCLANG Italiano,I Fran\\ais,F English,E *,*)\n    VER (&SSTL,LIST,I,F,E)\n    &SCLANG = &SSTL\n  VPUT (SCLANG) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSC00": {"ttr": 7179, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x12\\x05\\x00-\\x00-\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T12:05:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "SYSPAJA"}, "text": "%SHORT --------------  System Sector Short Communication  ----------------------\n%Command ===>_ZCMD                                                             +\n+\n+\n%Short Communication+(Information/messages)\n+\n+             From :_SSUSID +(Enter User-id or leave blank)\n+\n+             Language :_SCLANG  +(Enter Italiano or I, Fran\\ais or F,\n+                                  English, E or leave blank)\n+\n+             Test member name :_SSMBNM  +(Enter name, the default is SC$PROF)\n+\n+             TEST option :_SSUT+(NO/YES : debug purposes)\n+\n)INIT\n  .HELP = PAJTSC1\n  .CURSOR = ZCMD\n  &SSUSID = &Z\n  &SSMBNM = &Z\n  &SSUT = TRANS (&SSUT ' ',NO YES,NO *,*)\n)PROC\n  IF (&SSUSID = &Z)\n    &SCID = &Z\n  IF (&SSUSID \u00ac= &Z)\n    VER (&SSUSID,NAME)\n    &SCID = '&SSUSID'\n  IF (&SCLANG \u00ac= &Z)\n    &SSTL = TRANS (&SCLANG Italiano,I Fran\\ais,F English,E *,*)\n    VER (&SSTL,LIST,I,F,E)\n    &SCLANG = &SSTL\n  VPUT (SCLANG) PROFILE\n  IF (&SSMBNM = &Z)\n    &SCMEM = &Z\n  IF (&SSMBNM \u00ac= &Z)\n    VER (&SSMBNM,NAME)\n    &SCMEM = '&SSMBNM'\n  &SSUT = TRUNC (&SSUT,1)\n  &SSUT = TRANS (&SSUT N,NO Y,YES *,*)\n  VER (&SSUT,NONBLANK)  VER (&SSUT,LIST,NO,YES)\n  IF (&SSUT = NO)\n    &SCTEST = &Z\n  IF (&SSUT = YES)\n    &SCTEST = 'TEST'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSC1": {"ttr": 7181, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88)\\x9f\\x00\\x88)\\x9f\\x15\\x11\\x00\\x11\\x00\\x11\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-25T00:00:00", "modifydate": "1988-10-25T15:11:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n @ TYPE(OUTPUT) INTENS(LOW) SKIP(ON)\n)BODY WIDTH(80)\n%------------ Communication from &SSUSID ---------------------------------------\n%Command ===>_ZCMD                                            %Scroll ===>_AMT +\n+\n+===============================================================================\n)MODEL\n   @SCAROU\n)INIT\n .HELP = PAJTSC1\n &ZCMD = ' '\n &ZTDMARK = '=========================== Bottom of communication +\n             ==========================='\n IF (&AMT = &Z)\n   &AMT = PAGE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSC2": {"ttr": 7183, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x880/\\x00\\x880/\\t9\\x00.\\x00.\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-28T00:00:00", "modifydate": "1988-10-28T09:39:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n# TYPE(INPUT) INTENS(LOW) CAPS(ON)\n@ TYPE(INPUT) INTENS(LOW) CAPS(OFF) PAD(NULLS)\n+ TYPE(TEXT) INTENS(LOW) SKIP(ON)\n)BODY WIDTH(80)\n%------------ &SCTIT &SCID communication ---------------------------------------\n%Command ===>_ZCMD                                            %Scroll ===>_AMT +\n+\n+     Enter date for%A+and%B+line-commands :_GG+(Day)_MM+(Month)_AA+(Year)\n+\n%Act  Communication text\n%--- <---------------------------------------------------------------------->\n)MODEL CLEAR(A)\n#A  @SCAROU                                                                  +\n)INIT\n  .HELP = PAJTSC2\n  IF (&AMT = &Z)\n    &AMT = PAGE\n  &ZTDMARK = '=========================== Bottom of communication +\n              ==========================='\n  IF (&GG = &Z)\n    &GG = &ZDAY\n  IF (&MM = &Z)\n    &MM = &ZMONTH\n  IF (&AA = &Z)\n    &AA = &ZYEAR\n)REINIT\n  IF (.MSG \u00ac= &Z)\n    .ATTR(.CURSOR) = 'COLOR(RED)'\n    .AUTOSEL = YES\n    .CSRROW = &CRP\n)PROC\n  &CMD = TRANS(TRUNC(&ZCMD,' ') C,CANCEL CAN,CANCEL S,SAVE *,*)\n  VER (&CMD,LIST,CANCEL,SAVE,MSG=PAJC000A)\n  IF (&ZTDSELS \u00ac= 0000)\n    &SCA = TRUNC(&A,1)\n    VER (&SCA,LIST,A,B,D,I,R,S,MSG=PAJC000B)\n    &SCN = .TRAIL\n    IF (&SCN = &Z)\n      &SCN = 1\n    VER (&SCN,NB,NUM,MSG=PAJC000C)  VER (&SCN,RANGE,1,99,MSG=PAJC000C)\n    IF (&SCA = A,B)\n      VER (&GG,NB,NUM,MSG=PAJC000D)  VER (&GG,RANGE,1,31,MSG=PAJC000D)\n      VER (&MM,NB,NUM,MSG=PAJC000E)  VER (&MM,RANGE,1,12,MSG=PAJC000E)\n      VER (&AA,NB,NUM,MSG=PAJC000F)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSHDU": {"ttr": 7185, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x17\\x08\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T17:08:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYSPAJA"}, "text": "SHWT     TITLE '* * *   P A J S H D T   * * *'\nPAJSHDT  START 0\n         SPACE 1\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                    *\n* PURPOSE :    PRIVATE USE ONLY.                                     *\n* ---------    EACH USER MUST DEFINE HIS KEYWORDS TABLE \"PAJSHDT\"    *\n*              TO BE THEN INCLUDED AT THE LINK-EDIT STEP.            *\n*                                                                    *\n* HOW TO DEFINE YOUR KEYWORDS MASKS :                                *\n* -----------------------------------                                *\n*              1. ANYWHERE YOU DESIRE, BETWEEN THE LINES LABELED     *\n*                 \"TOPS\" AND \"TOPSEND\", SO IN THE KEYWORDS TABLE,    *\n*                 INSERT A LINE STARTING WITH AN ASTERISK (COMMENT   *\n*                 LINE) IN COLUMN 1 FOLLOWED BY THE TWO SECRET KEYS  *\n*                 YOU WANT DEFINE (EACH SEPARATED FROM THE OTHER BY  *\n*                 AT LEAST A BLANK).                                 *\n*                 I.E. : *    ALPHA  BETA                            *\n*              2. THEN TYPE KMX (THIS IS AN ISPF EDIT MACRO NAME)    *\n*                 IN THE COMMAND LINE, PLACE THE CURSOR SOMEWHERE    *\n*                 ON THE PREVIOUS INSERTED LINE, AND PUSH ENTER.     *\n*                 THIS FUNCTION INSERT JUST AFTER THE LINE YOU HAVE  *\n*                 POINTED THE NEEDED MASKED CONSTANT.                *\n*              3. FINALLY, DELETE THE INSERTED LINE WITH YOUR TWO    *\n*                 SECRET KEYS.                                       *\n*              REPEAT THESE STEPS FOR ALL COUPLE OF KEYS YOU HAVE    *\n*              TO DEFINE.                                            *\n*                                                                    *\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n         DC    A(TOPS,L'TOPS,TOPSEND)\n         SPACE 1\nTOPS     EQU   *,8                 KEYWORDS TABLE\n*------> INSERT HERE AFTER YOUR COUPLE OF SECRET KEYS <--------------*\nTOPSEND  EQU   *-L'TOPS\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJSHDW": {"ttr": 7425, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x1f\\x00\\x944\\x1f\\x17\\x08\\x00\\x82\\x00\\x82\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-07T00:00:00", "modifydate": "1994-12-07T17:08:00", "lines": 130, "newlines": 130, "modlines": 0, "user": "SYSPAJA"}, "text": "SHDW     TITLE '* * *   P A J S H D W   * * *'\nPAJSHDW  START 0\n         SPACE 1\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                    *\n* PURPOSE :    PRIVATE USE ONLY.                                     *\n* ---------    (EACH USER MUST DEFINE HIS KEYWORD'S TABLE IN MODULE  *\n*              \"PAJSHDT\" WHICH IS INCLUDED AT LINK-EDIT)             *\n*                                                                    *\n* AUTHOR :     P.A. MOINIL                                           *\n* --------     COMPUTING CENTRE                                      *\n*              J.R.C. - ISPRA ESTABLISHMENT                          *\n*              21020 ISPRA (VA), ITALY                               *\n*                                                                    *\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=R12\n         LA    R10,MAXERR\n         L     R2,=V(PAJSHDT)\n         LTR   R2,R2\n         BNP   ERR1\n         LM    R7,R9,0(R2)\n         CL    R8,=A(L'KEYW)\n         BNE   ERR2\n         CLR   R7,R9\n         BH    ERR2\n         L     R2,0(R1)\n         LH    R3,0(R2)\n         LTR   R3,R3\n         BNP   ERR3\n         LA    R1,2(R2)\n         LA    R3,1(R2,R3)\n         LA    R2,1\n         LR    R4,R1\n         CLI   0(R1),C','\n         BE    *+L'*+8\n         BXLE  R1,R2,*-8\n         B     ERR4\n         LR    R5,R1\n         SLR   R5,R4\n         LTR   R5,R5\n         BNP   ERR5\n         BCT   R5,*+L'*+6\n         OC    KEYW1(*-*),0(R4)\n         CH    R5,=H'7'\n         BH    ERR6\n         EX    R5,*-14\n         BXLE  R1,R2,*+L'*+10\n         B     ERR7\n         OC    KEYW2(*-*),0(R1)\n         SLR   R3,R1\n         CH    R3,=H'7'\n         BH    ERR8\n         EX    R3,*-16\nLOOP     MVC   KEYW(L'KEYW),0(R7)\n         LA    R1,PLST1\n         L     R15,=V(SETKEY)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR9\n         LA    R1,PLST3\n         L     R15,=V(DECIPH)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR10\n         LA    R1,PLST2\n         L     R15,=V(SETKEY)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR11\n         LA    R1,PLST3\n         L     R15,=V(DECIPH)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR12\n         LA    R1,PLST4\n         L     R15,=V(SETKEY)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR13\n         MVC   KEYW3(L'KEYW3),PAJSHDW+10\n         LA    R1,PLST5\n         L     R15,=V(ENCIPH)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERR14\n         CLC   CONTROL,KEYW3\n         BE    LEAVE\n         BXLE  R7,R8,LOOP\n         B     ERR15\nLEAVE    XR    R10,R10\nQUIT    $XRET  CC=(R10)\n         SPACE 1\nERR1     BCTR  R10,0               NO KEYWORDS TABLE\nERR2     BCTR  R10,0               KEYWORDS TABLE ERROR\nERR3     BCTR  R10,0               MISSING PARM. FIELD\nERR4     BCTR  R10,0               ERROR PARM. FIELD\nERR5     BCTR  R10,0               1ST KEYWORD MISSING\nERR6     BCTR  R10,0               1ST KEYWORD TOO LONG\nERR7     BCTR  R10,0               2ND KEYWORD MISSING\nERR8     BCTR  R10,0               2ND KEYWORD TOO LONG\nERR9     BCTR  R10,0               1ST CALL SETKEY ERROR\nERR10    BCTR  R10,0               1ST CALL DECIPH ERROR\nERR11    BCTR  R10,0               2ND CALL SETKEY ERROR\nERR12    BCTR  R10,0               2ND CALL DECIPH ERROR\nERR13    BCTR  R10,0               3RD CALL SETKEY ERROR\nERR14    BCTR  R10,0               CALL ENCIPH ERROR\nERR15    BCTR  R10,0               CONTROL CHECK FAILED\n         SPACE 1\nMAXERR   EQU   ((*-ERR1)/2)+1\n         SPACE 1\n         LA    R10,100(R10)\n         B     QUIT\n         EJECT\nPLST1    DC    A(KEYW2)\nPLST2    DC    A(KEYW1)\nPLST3    DC    A(KEYW,*+4,L'KEYW)\nPLST4    DC    A(KEYW)\nPLST5    DC    A(KEYW3,*+4,L'KEYW3)\nCONTROL  DC    XL8'EB9C69532FD217DC'\nKEYW     DC    XL8'0'\nKEYW1    DC    CL8' '\nKEYW2    DC    CL8' '\nKEYW3    DC    CL8' '\n         SPACE 1\n        LTORG\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJSHDWH": {"ttr": 7428, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x923o\\x00\\x923o\\x14\\x08\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T14:08:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n` TYPE(TEXT) COLOR(YELLOW)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE)\n{ TYPE(TEXT) COLOR(GREEN)\n~ TYPE(TEXT) COLOR(BLUE)\n} TYPE(TEXT) COLOR(RED)\n\\ TYPE(TEXT) COLOR(RED) HILITE(BLINK)\n! TYPE(TEXT) COLOR(PINK)\n\u00a6 TYPE(TEXT) COLOR(TURQ)\n# TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n)BODY\n#---------------------------$   S  H  A  D  O  W   #----------------------------\n+\n+\n+\n\u00a6Do you know how I run ?+\n+\n+             }... no |!it's your problem,\\sorry |+\n+\n+             {... yes |~OK,+\n+                       `then,+\n+                       \u00a6do you know what I want ?+\n+\n+                                 }... no |!it's also your problem,\\sorry |+\n+\n+                                 {... yes |~OK,+\n+                                           `so long and good luck |+\n+\n)PROC\n  &ZCONT = PAJSHDWH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSHDWI": {"ttr": 7430, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x921\\x0f\\x00\\x921\\x0f\\x10\\x12\\x00+\\x00+\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-11-05T00:00:00", "modifydate": "1992-11-05T10:12:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n~ TYPE(TEXT) COLOR(WHITE) SKIP(ON)\n! TYPE(TEXT) COLOR(PINK) SKIP(ON)\n} TYPE(TEXT) COLOR(BLUE) SKIP(ON)\n\u00a6 TYPE(TEXT) COLOR(TURQ) SKIP(ON)\n| TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n\u00a2 TYPE(TEXT) INTENS(LOW) SKIP(ON)\n{ TYPE(TEXT) COLOR(YELLOW) HILITE(BLINK) SKIP(ON)\n\u00ac TYPE(TEXT) COLOR(GREEN) HILITE(REVERSE) SKIP(ON)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE) SKIP(ON)\n\\ TYPE(TEXT) COLOR(RED) HILITE(REVERSE) SKIP(ON)\n# TYPE(INPUT) CAPS(OFF) INTENS(NON)\n` TYPE(OUTPUT) COLOR(PINK) HILITE(BLINK) JUST(ASIS) SKIP(ON)\n)BODY\n|---------------------------$   S  H  A  D  O  W   |----------------------------\n~Command!===>_ZCMD\n\u00a2\n\n\u00ac                                                                              \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6Enter below :\u00a2                                                       \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a61!the fully qualified data-set name}(unquoted)\u00a2                      \u00ac  \u00a2\n\u00ac  \u00a2  \\                                                    \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  \\  \u00a2                                              \\  \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  {===>_UUDSN                                       \\  \u00a2 `UUDSE      \u00a2  \u00ac  \u00a2\n\u00ac  \u00a2  \\  \u00a2                                              \\  \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  \\                                                    \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a62!the two\u00a2      \\                              \u00a2                     \u00ac  \u00a2\n\u00ac  \u00a2       !top-secret\u00a2\\  \u00a2          \\  \u00a2          \\  \u00a2                     \u00ac  \u00a2\n\u00ac  \u00a2          !keywords{===>#UUNB1   {===>#UUNB2   \\  \u00a2 `UUNBE      \u00a2       \u00ac  \u00a2\n\u00ac  \u00a2                   \\  \u00a2          \\  \u00a2          \\  \u00a2                     \u00ac  \u00a2\n\u00ac  \u00a2                   \\                              \u00a2                     \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac                                                                              \u00a2\n\n)INIT\n  .HELP = PAJSHDWT\n  &ZCMD = ' '\n)PROC\n  VPUT (UUDSN UUNB1 UUNB2) SHARED\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSHDWQ": {"ttr": 7432, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944?\\x00\\x944?\\x11P\\x00)\\x00)\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-09T00:00:00", "modifydate": "1994-12-09T11:50:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n~ TYPE(TEXT) COLOR(WHITE) SKIP(ON)\n! TYPE(TEXT) COLOR(PINK) SKIP(ON)\n\u00a6 TYPE(TEXT) COLOR(TURQ) SKIP(ON)\n| TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n\u00a2 TYPE(TEXT) INTENS(LOW) SKIP(ON)\n{ TYPE(TEXT) COLOR(YELLOW) HILITE(BLINK) SKIP(ON)\n\u00ac TYPE(TEXT) COLOR(GREEN) HILITE(REVERSE) SKIP(ON)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE) SKIP(ON)\n\\ TYPE(TEXT) COLOR(RED) HILITE(REVERSE) SKIP(ON)\n# TYPE(OUTPUT) COLOR(YELLOW) JUST(ASIS) SKIP(ON)\n)BODY\n|---------------------------$   S  H  A  D  O  W   |----------------------------\n~Command!===>_ZCMD\n\u00a2\n\n\u00ac                                                                              \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6Enter below :\u00a2                                                       \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2                \\               \u00a2                                       \u00ac  \u00a2\n\u00ac  \u00a2                \\  \u00a2         \\  \u00a2                                       \u00ac  \u00a2\n\u00ac  \u00a2  !select action{===>_UUANS  \\  \u00a2(Browse/Decrypt/Encrypt)               \u00ac  \u00a2\n\u00ac  \u00a2                \\  \u00a2         \\  \u00a2                                       \u00ac  \u00a2\n\u00ac  \u00a2                \\               \u00a2                                       \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  ~The current sequential data-set is :\u00a2                                \u00ac  \u00a2\n\u00ac  \u00a2  #UUDSN                                       \u00a2                        \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac                                                                              \u00a2\n\n)INIT\n  .HELP = PAJSHDWH\n  &ZCMD = ' '\n  &UUANS = TRANS (&UUANS ' ',BROWSE *,*)\n)PROC\n  &UUANS = TRUNC (&UUANS,1)\n  &UUANS = TRANS (&UUANS B,BROWSE D,DECRYPT E,ENCRYPT S,BROWSE *,*)\n  VER (&UUANS,NB,LIST,BROWSE,DECRYPT,ENCRYPT)\n  VPUT (UUANS) SHARED\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSHDWS": {"ttr": 7434, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x923o\\x00\\x923o\\x14\\x10\\x00,\\x00,\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T14:10:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n\u00a6 TYPE(TEXT) COLOR(PINK) INTENS(HIGH) SKIP(ON)\n{ TYPE(TEXT) COLOR(TURQ) INTENS(LOW) SKIP(ON)\n` TYPE(TEXT) COLOR(PINK) INTENS(LOW) SKIP(ON)\n| TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n\u00a2 TYPE(TEXT) INTENS(LOW) SKIP(ON)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE) SKIP(ON)\n@ TYPE(OUTPUT) COLOR(GREEN) INTENS(LOW) SKIP(ON)\n# TYPE(OUTPUT) COLOR(YELLOW) INTENS(LOW) SKIP(ON)\n\\ TYPE(INPUT) COLOR(WHITE) INTENS(LOW) CAPS(ON)\n)BODY WIDTH(80)\n|---------------------------$   S  H  A  D  O  W   |----------------------------\n\u00a6Command ===>_ZCMD                                            \u00a6Scroll ===>_Z   \u00a2\n\n`     Name &UUSEL {VV.MM   Created  Last modified  Size  Init   Mod   ID\n\u00a2   =========================================================================\n)MODEL\n   \\S#UUMEM       @UUSTS\n)INIT\n  .HELP = PAJSHDWH\n  .ZVARS = 'ZSCML'\n  .AUTOSEL = NO\n  &ZCMD = ' '\n  &ZTDMARK = '   ============================ Bottom of list +\n              =============================   '\n  IF (&S \u00ac= &Z)\n    &S = &Z\n    .CSRROW = &ROW\n)PROC\n  IF (&ZCMD \u00ac= &Z)\n    &UUWHT = ' '\n    &UUCMD = TRANS(TRUNC(&ZCMD,' ')\n             C,C CAN,C CANCEL,C E,E END,E\n             L,L LOC,L LOCATE,L F,L FIND,L *,*)\n    &ZTRAIL = .TRAIL\n    VER (&UUCMD,LIST,C,E,L,MSG=PAJU991A)\n    IF (&UUCMD = L)\n      &UUWHT = TRUNC(&ZTRAIL,' ')\n      VER (&UUWHT,NB,MSG=PAJU991B)\n  IF (&ZCMD = &Z)\n    &UUCMD = ' '\n    &UUWHT = ' '\n  VPUT (ZSCML) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSHDWT": {"ttr": 7436, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x921_\\x00\\x921_\\x173\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-11-10T00:00:00", "modifydate": "1992-11-10T17:33:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n` TYPE(TEXT) COLOR(YELLOW)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE)\n{ TYPE(TEXT) COLOR(GREEN)\n~ TYPE(TEXT) COLOR(BLUE)\n} TYPE(TEXT) COLOR(RED)\n\\ TYPE(TEXT) COLOR(RED) HILITE(BLINK)\n! TYPE(TEXT) COLOR(PINK)\n\u00a6 TYPE(TEXT) COLOR(TURQ)\n# TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n)BODY\n#---------------------------$   S  H  A  D  O  W   #----------------------------\n+\n+\n+\n\u00a6Do you know the 2 keywords ?+\n+\n+             }... no |!it's your problem,\\sorry |+\n+\n+             {... yes |~OK,+\n+                       `then,+\n+                       \u00a6do you know how I run ?+\n+\n+                                 }... no |!it's also your problem,\\sorry |+\n+\n+                                 {... yes |~OK,+\n+                                           `so long and good luck |+\n+\n)PROC\n  &ZCONT = PAJSHDWT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSHDWU": {"ttr": 7438, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x07\\x0f\\x00\\x93\\x07\\x0f\\x10\\x19\\x00;\\x00;\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-11T00:00:00", "modifydate": "1993-03-11T10:19:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n~ TYPE(TEXT) COLOR(WHITE) SKIP(ON)\n! TYPE(TEXT) COLOR(PINK) SKIP(ON)\n} TYPE(TEXT) COLOR(BLUE) SKIP(ON)\n\u00a6 TYPE(TEXT) COLOR(GREEN) SKIP(ON)\n| TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n\u00a2 TYPE(TEXT) INTENS(LOW) SKIP(ON)\n{ TYPE(TEXT) COLOR(YELLOW) HILITE(BLINK) SKIP(ON)\n\u00ac TYPE(TEXT) COLOR(TURQ) HILITE(REVERSE) SKIP(ON)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE) SKIP(ON)\n\\ TYPE(TEXT) COLOR(RED) HILITE(REVERSE) SKIP(ON)\n` TYPE(OUTPUT) COLOR(PINK) HILITE(BLINK) JUST(ASIS) SKIP(ON)\n# TYPE(OUTPUT) COLOR(YELLOW) JUST(ASIS) SKIP(ON)\n)BODY\n|---------------------------$   S  H  A  D  O  W   |----------------------------\n~Command!===>_ZCMD\n\u00a2\n\n\u00ac                                                                              \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6Indicate below your target data-set name for/of the symbolic module\u00a2 \u00ac  \u00a2\n\u00ac  \u00a2  }(it must be partitioned with logical record length 80).\u00a2             \u00ac  \u00a2\n\u00ac  \u00a2  !Enter the fully qualified data-set name}(unquoted)!:\u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  \\                                                    \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  \\  \u00a2                                              \\  \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  {===>_UUDSN                                       \\  \u00a2 `UUDSE      \u00a2  \u00ac  \u00a2\n\u00ac  \u00a2  \\  \u00a2                                              \\  \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  \\                                                    \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6 Do you have already the keys-table symbolic module :_UU1\u00a2(YES/NO)   \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6    Do you want edit the keys-table symbolic module :_UU2\u00a2(YES/NO)   \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6Do you want assembly the keys-table symbolic module :_UU3\u00a2(YES/NO)   \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6    Do you want link-edit in the target library too :_UU4\u00a2(YES/NO)   \u00ac  \u00a2\n\u00ac  \u00a2  ~The target link library is always :\u00a2                                 \u00ac  \u00a2\n\u00ac  \u00a2  #UUTLL                                       \u00a2                        \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac                                                                              \u00a2\n\n)INIT\n  .HELP = PAJSHDWH\n  &ZCMD = ' '\n  &UU1 = TRANS (&UU1 ' ',YES *,*)\n  &UU2 = TRANS (&UU2 ' ',YES *,*)\n  &UU3 = TRANS (&UU3 ' ',YES *,*)\n  &UU4 = TRANS (&UU4 ' ',NO YES,NO *,*)\n)PROC\n  &UU1 = TRUNC (&UU1,1)\n  &UU1 = TRANS (&UU1 N,NO Y,YES *,*)\n  VER (&UU1,NB,LIST,NO,YES)\n  &UU2 = TRUNC (&UU2,1)\n  &UU2 = TRANS (&UU2 N,NO Y,YES *,*)\n  VER (&UU2,NB,LIST,NO,YES)\n  &UU3 = TRUNC (&UU3,1)\n  &UU3 = TRANS (&UU3 N,NO Y,YES *,*)\n  VER (&UU3,NB,LIST,NO,YES)\n  &UU4 = TRUNC (&UU4,1)\n  &UU4 = TRANS (&UU4 N,NO Y,YES *,*)\n  VER (&UU4,NB,LIST,NO,YES)\n  VPUT (UU1 UU2 UU3 UU4 UUDSN) SHARED\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJSSHDU": {"ttr": 7440, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x16\\x01\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T16:01:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "SYSPAJA"}, "text": "//&EURUSID.T JOB (&EUACCNO),'-- S H A D O W --',\n//             MSGLEVEL=(1,1),MSGCLASS=X,REGION=1M,TIME=(,20),\n//             NOTIFY=&EURUSID,USER=&EURUSID\n/*JOBPARM L=4\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=&UUDSN.(PAJSHDT),DISP=SHR\n)SEL &UU4 = YES\n//LNK     EXEC PGM=HEWL,PARM='XREF,LIST',COND=(4,LT)\n//SYSLMOD   DD DSN=&UUTLL,DISP=SHR\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=->.SHADOW.DATA(PAJSHDW),DISP=SHR\n//          DD DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)\n//          DD DSN=->.SHADOW.DATA(R050A90),DISP=SHR\n//          DD *\n  ENTRY   PAJSHDW\n  NAME    PAJSHDW(R)\n/*\n)ENDSEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJSTOPS": {"ttr": 7442, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x16\\x01\\x00#\\x00#\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T16:01:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "SYSPAJA"}, "text": "//&EURUSID.U JOB (&EUACCNO),'-- T O P S E C --',\n//             MSGLEVEL=(1,1),MSGCLASS=X,REGION=1M,TIME=(,20),\n)SEL &UUCMD \u00ac= T\n//             NOTIFY=&EURUSID,USER=&EURUSID\n)ENDSEL\n)SEL &UUCMD = T\n//             NOTIFY=&EURUSID,USER=&EURUSID,TYPRUN=COPY\n)ENDSEL\n/*JOBPARM L=4\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.TOPSEC.DATA(&TPSMNM),DISP=SHR\n)SEL &UU4 = YES\n//LNK     EXEC PGM=HEWL,PARM='XREF,LIST',COND=(4,LT)\n//SYSLMOD   DD DSN=&UUTLL,DISP=SHR\n//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT  DD SYSOUT=*\n//SYSLIN    DD DSN=->.SHADOW.DATA(TOPSEC),DISP=SHR\n//          DD DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)\n//          DD DSN=->.SHADOW.DATA(R050A90),DISP=SHR\n//          DD *\n  ENTRY   TOPSEC\n)SEL &UUAL1 \u00ac= &Z\n  ALIAS   &UUAL1\n)ENDSEL\n)SEL &UUAL2 \u00ac= &Z\n  ALIAS   &UUAL2\n)ENDSEL\n  NAME    &UUNME(R)\n/*\n)ENDSEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAJTOPSH": {"ttr": 7444, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x07\\x0f\\x00\\x93\\x07\\x0f\\x17D\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-11T00:00:00", "modifydate": "1993-03-11T17:44:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n` TYPE(TEXT) COLOR(YELLOW)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE)\n{ TYPE(TEXT) COLOR(GREEN)\n~ TYPE(TEXT) COLOR(BLUE)\n} TYPE(TEXT) COLOR(RED)\n\\ TYPE(TEXT) COLOR(RED) HILITE(BLINK)\n! TYPE(TEXT) COLOR(PINK)\n\u00a6 TYPE(TEXT) COLOR(TURQ)\n# TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n)BODY\n#---------------------------$   T  O  P  S  E  C   #----------------------------\n+\n+\n+\n\u00a6Do you know how I run ?+\n+\n+             }... no |!it's your problem,\\sorry |+\n+\n+             {... yes |~OK,+\n+                       `then,+\n+                       \u00a6do you know what I want ?+\n+\n+                                 }... no |!it's also your problem,\\sorry |+\n+\n+                                 {... yes |~OK,+\n+                                           `so long and good luck |+\n+\n)PROC\n  &ZCONT = PAJTOPSH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJTOPSL": {"ttr": 7681, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x07O\\x00\\x93\\x07O\\x13P\\x00S\\x00S\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-15T00:00:00", "modifydate": "1993-03-15T13:50:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n~ TYPE(TEXT) COLOR(WHITE) SKIP(ON)\n! TYPE(TEXT) COLOR(PINK) SKIP(ON)\n} TYPE(TEXT) COLOR(BLUE) SKIP(ON)\n\u00a6 TYPE(TEXT) COLOR(GREEN) SKIP(ON)\n` TYPE(TEXT) COLOR(YELLOW) SKIP(ON)\n| TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n\u00a2 TYPE(TEXT) INTENS(LOW) SKIP(ON)\n{ TYPE(TEXT) COLOR(YELLOW) HILITE(BLINK) SKIP(ON)\n\u00ac TYPE(TEXT) COLOR(TURQ) HILITE(REVERSE) SKIP(ON)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE) SKIP(ON)\n\\ TYPE(TEXT) COLOR(RED) HILITE(REVERSE) SKIP(ON)\n)BODY\n|---------------------------$   T  O  P  S  E  C   |----------------------------\n~Command!===>_ZCMD\n\u00a2\n\n\u00ac                                                                              \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6Data-set name of target`link-edit\u00a6library :\u00a2                         \u00ac  \u00a2\n\u00ac  \u00a2  \\                                                    \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2  \\  \u00a2                                              \\  !(fully qualified\u00ac  \u00a2\n\u00ac  \u00a2  {===>_UUTLL                                       \\  ! and~unquoted   \u00ac  \u00a2\n\u00ac  \u00a2  \\  \u00a2                                              \\  ! data-set name  \u00ac  \u00a2\n\u00ac  \u00a2  \\                                                    \u00a2                \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6Enter Command name :_UUCN    }(mandatory)                            \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6Enter Alias(es) name(s) :}(at least one is mandatory)\u00a2               \u00ac  \u00a2\n\u00ac  \u00a2             ` 1->_UUAN1   `<-\u00a2           ` 2->_UUAN2   `<-\u00a2            \u00ac  \u00a2\n\u00ac  \u00a2             ` 3->_UUAN3   `<-\u00a2           ` 4->_UUAN4   `<-\u00a2            \u00ac  \u00a2\n\u00ac  \u00a2             ` 5->_UUAN5   `<-\u00a2           ` 6->_UUAN6   `<-\u00a2            \u00ac  \u00a2\n\u00ac  \u00a2             ` 7->_UUAN7   `<-\u00a2           ` 8->_UUAN8   `<-\u00a2            \u00ac  \u00a2\n\u00ac  \u00a2             ` 9->_UUAN9   `<-\u00a2           `10->_UUAN10  `<-\u00a2            \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac                                                                              \u00a2\n\n)INIT\n  .HELP = PAJTOPSH\n  &ZCMD = &Z\n  &UUAN1 = &UUVB1\n  &UUAN2 = &UUVB2\n  &UUAN3 = &UUVB3\n  &UUAN4 = &UUVB4\n  &UUAN5 = &UUVB5\n  &UUAN6 = &UUVB6\n  &UUAN7 = &UUVB7\n  &UUAN8 = &UUVB8\n  &UUAN9 = &UUVB9\n  &UUAN10 = &UUVB10\n)PROC\n  IF (&ZCMD \u00ac= &Z)\n    &UUCMD = TRANS(TRUNC(&ZCMD,' ')\n             C,C CAN,C CANCEL,C\n             E,E END,E\n             T,T TEST,T *,*)\n    VER (&UUCMD,LIST,C,E,T,MSG=PAJT900S)\n  IF (&ZCMD = &Z)\n    &UUCMD = &Z\n    VER (&UUTLL,NB)\n    VER (&UUCN,NB,NAME)\n    IF (&UUAN1 \u00ac= &Z)\n      VER (&UUAN1,NAME)\n    IF (&UUAN2 \u00ac= &Z)\n      VER (&UUAN2,NAME)\n    IF (&UUAN3 \u00ac= &Z)\n      VER (&UUAN3,NAME)\n    IF (&UUAN4 \u00ac= &Z)\n      VER (&UUAN4,NAME)\n    IF (&UUAN5 \u00ac= &Z)\n      VER (&UUAN5,NAME)\n    IF (&UUAN6 \u00ac= &Z)\n      VER (&UUAN6,NAME)\n    IF (&UUAN7 \u00ac= &Z)\n      VER (&UUAN7,NAME)\n    IF (&UUAN8 \u00ac= &Z)\n      VER (&UUAN8,NAME)\n    IF (&UUAN9 \u00ac= &Z)\n      VER (&UUAN9,NAME)\n    IF (&UUAN10 \u00ac= &Z)\n      VER (&UUAN10,NAME)\n  VPUT (UUCMD UUTLL UUCN UUAN1 UUAN2 UUAN3 UUAN4) SHARED\n  VPUT (UUAN5 UUAN6 UUAN7 UUAN8 UUAN9 UUAN10) SHARED\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJTOPSM": {"ttr": 7684, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x07O\\x00\\x93\\x07O\\x13P\\x00A\\x00A\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-15T00:00:00", "modifydate": "1993-03-15T13:50:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "SYSPAJA"}, "text": ")ATTR\n~ TYPE(TEXT) COLOR(WHITE) SKIP(ON)\n! TYPE(TEXT) COLOR(PINK) SKIP(ON)\n} TYPE(TEXT) COLOR(BLUE) SKIP(ON)\n\u00a6 TYPE(TEXT) COLOR(GREEN) SKIP(ON)\n| TYPE(TEXT) INTENS(HIGH) SKIP(ON)\n\u00a2 TYPE(TEXT) INTENS(LOW) SKIP(ON)\n{ TYPE(TEXT) COLOR(YELLOW) HILITE(BLINK) SKIP(ON)\n\u00ac TYPE(TEXT) COLOR(TURQ) HILITE(REVERSE) SKIP(ON)\n$ TYPE(TEXT) COLOR(YELLOW) HILITE(REVERSE) SKIP(ON)\n\\ TYPE(TEXT) COLOR(RED) HILITE(REVERSE) SKIP(ON)\n)BODY\n|---------------------------$   T  O  P  S  E  C   |----------------------------\n~Command!===>_ZCMD\n\u00a2\n\n\u00ac                                                                              \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2                                            \\               \u00a2           \u00ac  \u00a2\n\u00ac  \u00a2                                            \\  \u00a2         \\  \u00a2(maximum   \u00ac  \u00a2\n\u00ac  \u00a2  !Enter member name}(new or old or replace){===>_TPSMNM \\  \u00a2 seven     \u00ac  \u00a2\n\u00ac  \u00a2                                            \\  \u00a2         \\  \u00a2 char.)    \u00ac  \u00a2\n\u00ac  \u00a2                                            \\               \u00a2           \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6       Create or Replace the symbolic module :_UU1\u00a2(YES/NO)          \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6                    Edit the symbolic module :_UU2\u00a2(YES/NO)          \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6             Assembly of the symbolic module :_UU3\u00a2(YES/NO)          \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac  \u00a2  \u00a6             Link-edit in the target library :_UU4\u00a2(YES/NO)          \u00ac  \u00a2\n\u00ac  \u00a2                                                                        \u00ac  \u00a2\n\u00ac                                                                              \u00a2\n\n)INIT\n  .HELP = PAJTOPSH\n  &ZCMD = &Z\n  &TPSMNM = &Z\n  &UU1 = TRANS (&UU1 ' ',NO *,*)\n  &UU2 = TRANS (&UU2 ' ',YES *,*)\n  &UU3 = TRANS (&UU3 ' ',YES *,*)\n  &UU4 = TRANS (&UU4 ' ',NO YES,NO *,*)\n)PROC\n  IF (&ZCMD \u00ac= &Z)\n    &UUCMD = TRANS(TRUNC(&ZCMD,' ')\n             C,E CAN,E CANCEL,E\n             E,E END,E *,*)\n    VER (&UUCMD,LIST,E,MSG=PAJT900V)\n  IF (&ZCMD = &Z)\n    &UUCMD = &Z\n    VER (&TPSMNM,NB,NAME)\n    &UU1 = TRUNC (&UU1,1)\n    &UU1 = TRANS (&UU1 N,NO Y,YES *,*)\n    VER (&UU1,NB,LIST,NO,YES)\n    &UU2 = TRUNC (&UU2,1)\n    &UU2 = TRANS (&UU2 N,NO Y,YES *,*)\n    VER (&UU2,NB,LIST,NO,YES)\n    &UU3 = TRUNC (&UU3,1)\n    &UU3 = TRANS (&UU3 N,NO Y,YES *,*)\n    VER (&UU3,NB,LIST,NO,YES)\n    &UU4 = TRUNC (&UU4,1)\n    &UU4 = TRANS (&UU4 N,NO Y,YES *,*)\n    VER (&UU4,NB,LIST,NO,YES)\n  VPUT (UUCMD UU1 UU2 UU3 UU4 TPSMNM) SHARED\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJTSC1": {"ttr": 7686, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88)\\x9f\\x00\\x88)\\x9f\\x15\\x11\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-25T00:00:00", "modifydate": "1988-10-25T15:11:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "SYSPAJA"}, "text": ")BODY EXPAND(//)\n%TUTORIAL-/-/- System sector short communication -/-/-TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+The%System sector short communication+feature allows you to maintain an online\n list of short messages which inform the other group members on your scheduled\n work-time.\n\n By selecting, in the calling main panel, a USER-id of a group member, you will\n be browsed to his communication, if any (You may browse yourself also).\n\n By leaving blank, in the calling main panel, the USER-id field, you are entered\n in a special edit mode on your own communication, so you may create or update\n all pertaining information you want notice the other group members.\n\n+Enter%&EPF+to exit the tutorial and return to the SHORT communication\n+Hit%ENTER+to go on to the next tutorial panel\n)INIT\n  &EPF = PFK(END)\n  IF (&EPF = &Z)\n    &EPF = 'END'\n  &D = TRUNC(&EPF,2)\n  &DT = .TRAIL\n  &D = TRUNC(&DT,1)\n  IF (&D = '0')\n    &DT = .TRAIL\n    &EPF = 'PF&DT'\n)PROC\n  &ZUP = PAJTSC1\n  &ZCONT = PAJTSC2\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PAJTSC2": {"ttr": 7688, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x88)\\x9f\\x00\\x88)\\x9f\\x15\\x11\\x00'\\x00'\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-25T00:00:00", "modifydate": "1988-10-25T15:11:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "SYSPAJA"}, "text": ")BODY EXPAND(//)\n%TUTORIAL-/-/- System sector short communication -/-/-TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n%Special Edit mode.+\n\n%Primary+commands : (Entered in Command ===> area at the top of the display)\n  %CANCEL  +- Exit SHORT communication, don't save any changes - Alias :%CAN+\n  %END     +- &EPFN Exit SHORT communication, save any changes\n  %SAVE    +- Exit SHORT communication, save any changes - Alias :%S+\n  %Note :+the%END+and%SAVE+commands are equivalent, and automatically insert a\n          final line, with the update date, at the end of the communication or\n          just before the STOP line, if any.\n\n%Line+commands : (Entered in \"action\" area at the left of the desired line)\n %A+- Add DATE-line after   %B+- Add DATE-line before  %D+- Delete line(s)\n %I+- Insert blank line(s)  %R+- Repeat line(s)        %S+- Add STOP-line after\n\n%Scroll+commands : (Entered in Command ===> area at the top of the display)\n You may scroll through the communication via the%UP+and%DOWN+commands.\n\n+Enter%&EPF+to exit the tutorial and return to the SHORT communication\n+Hit%ENTER+to go on to the next tutorial panel\n)INIT\n  &EPF = PFK(END)\n  IF (&EPF = &Z)\n    &EPF = 'END'\n  &D = TRUNC(&EPF,2)\n  &DT = .TRAIL\n  &D = TRUNC(&DT,1)\n  IF (&D = '0')\n    &DT = .TRAIL\n    &EPF = 'PF&DT'\n  IF (&EPF \u00ac= 'END')\n    &EPFN = '(Or hit &EPF.)'\n)PROC\n  &ZUP = PAJTSC1\n  &ZCONT = PAJTSC3\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJTSC3": {"ttr": 7690, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88)\\x9f\\x00\\x88)\\x9f\\x158\\x00%\\x00%\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-10-25T00:00:00", "modifydate": "1988-10-25T15:38:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "SYSPAJA"}, "text": ")BODY EXPAND(//)\n%TUTORIAL-/-/- System sector short communication -/-/-TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n%Line+commands : (Entered in \"action\" area at the left of the desired line)\n\n %A+- Add a nice DATE-line after the line pointed by this command.\n %B+- Add a nice DATE-line before the line pointed by this command.\n      The DATE is that you have set in the line below the Command ===> line.\n %D+- Delete the line pointed by this command. Enter%Dn+to delete%n+lines\n      starting from that pointed by the command.\n %I+- Insert a blank line after the line pointed by this command. Enter%In+to\n      insert%n+blank lines after that pointed by the command.\n %R+- Repeat immediately after the line pointed by this command. Enter%Rn+to\n      repeat%n+times the line pointed by the command.\n %S+- Add the STOP-line after the line pointed by this command. This line may\n      be used to limit the communication display, and thus allows you to\n      prepare some other planned communication in advance.\n\nThe contents of any line may be text edited as you want, then hit ENTER.\n\n+Enter%&EPF+to exit the tutorial and return to the SHORT communication\n+Hit%ENTER+to go on to the first tutorial panel\n)INIT\n  &EPF = PFK(END)\n  IF (&EPF = &Z)\n    &EPF = 'END'\n  &D = TRUNC(&EPF,2)\n  &DT = .TRAIL\n  &D = TRUNC(&DT,1)\n  IF (&D = '0')\n    &DT = .TRAIL\n    &EPF = 'PF&DT'\n)PROC\n  &ZUP = PAJTSC2\n  &ZCONT = PAJTSC1\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJT90": {"ttr": 7692, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x07O\\x00\\x93\\x07O\\x15#\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-15T00:00:00", "modifydate": "1993-03-15T15:23:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "SYSPAJA"}, "text": "PAJT900A 'Select |' .ALARM=YES\n'Invalid (YES/NO) combinations selected (select or end |)'\nPAJT900B 'Err=&UUOP' .ALARM=YES\n'&UUMSG / CC = &UUCC (check why |)'\nPAJT900C 'Err=&UUOP' .ALARM=YES\n'&UUERR'\nPAJT900D 'LISTDSI|' .ALARM=YES\n'&UUDSI'\nPAJT900E 'DSORG ?' .ALARM=YES\n'Link-edit data-set is not DSORG=PO (correct it |)'\nPAJT900F 'RECFM ?' .ALARM=YES\n'Link-edit data-set is not RECFM=U (correct it |)'\nPAJT900R 'Restart|' .ALARM=YES\n'Update not saved, so processing resumes (retry or exit |)'\nPAJT900S 'What |||' .ALARM=YES\n'Only C(ancel), E(nd) or T(est) are accepted (re-specify |)'\nPAJT900T 'OK, done' .ALARM=YES\n'Processing of requested selection(s) done (select next or end |)'\nPAJT900U 'CANCEL |' .ALARM=YES\n'Processing canceled, back to selection (re-select or exit |)'\nPAJT900V 'What |||' .ALARM=YES\n'Only C(ancel) or E(nd) are accepted (re-specify |)'\nPAJT900X 'EXIT |' .ALARM=YES\n'Processing termination requested (So long old chap |)'\nPAJT900Y 'OK, well' .ALARM=YES\n'\"TOPSEC\" processing is now available (ready it |)'\nPAJT900Z 'OK, test' .ALARM=YES\n'Test run of requested selection(s) done (select next or end |)'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PAJU99": {"ttr": 7694, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x07\\x0f\\x00\\x93\\x07\\x0f\\x10\\x04\\x00!\\x00!\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-11T00:00:00", "modifydate": "1993-03-11T10:04:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "SYSPAJA"}, "text": "PAJU990A 'Err=&UUOP' .ALARM=YES\n'\"&UUWHT\" member processing failed / CC = &UUCC (look why |)'\nPAJU990B 'Err=&UUOP' .ALARM=YES\n'&UUMSG / CC = &UUCC (check why |)'\nPAJU990C 'Err=&UUOP' .ALARM=YES\n'&UUERR'\nPAJU990D 'Failed |' .ALARM=YES\n'&UUMSG / CC = &UUCC (see why |)'\nPAJU990E 'What |||' .ALARM=YES\n'Only &UUSEL are accepted as selection action (use it |)'\nPAJU990F 'OK, done' .ALARM=YES\n'Data-set processing ended (another action or end |)'\nPAJU990G 'No save|' .ALARM=YES\n'Data-set processing abort (do action again or end |)'\nPAJU990H 'Select |' .ALARM=YES\n'Invalid (YES/NO) combinations selected (select or end |)'\nPAJU990R 'Restart|' .ALARM=YES\n'Update not saved, so processing resumes (retry or exit |)'\nPAJU990S 'No save|' .ALARM=YES\n'\"&UUMEM\" member processing abort (do it again or end |)'\nPAJU990T 'OK, done' .ALARM=YES\n'Processing of requested selection(s) done (select next or end |)'\nPAJU990X 'Scramble' .ALARM=YES\n'Immediate stop processing has been requested (bye bye |)'\nPAJU990Y 'OK, well' .ALARM=YES\n'\"SHADOW\" processing is now available to you (try it |)'\nPAJU990Z 'OK, done' .ALARM=YES\n'\"&UUMEM\" member processing ended (select next or end |)'\n\nPAJU991A 'Command|' .ALARM=YES\n'Only END, CANCEL, LOCATE and FIND commands allowed (say what |)'\nPAJU991B 'Operand|' .ALARM=YES\n'LOCATE or FIND commands needs an operand argument (give it |)'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHADOW$": {"ttr": 7696, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x14!\\x00X\\x00X\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T14:21:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "SYSPAJA"}, "text": "//SHADOW   JOB (........),'INSTALL - SHADOW -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*            INSTALL \"SHADOW/SHADUP\" ISPF APPLICATION               *\n//* PRE-REQUISITE PRODUCTS : IOFSPF                                   *\n//* PRE-REQUISITE MODULES INSTALLATION :                              *\n//*                CRY       EDMODE    EUSID      EUSUB    INTRDR     *\n//*                R050A90                                            *\n//* NOTES : 1. ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN *\n//*            ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES).    *\n//*         2. VERIFY \"SHDATA\" DD-CARD DEFINITIONS (STEP \"ALL\").      *\n//*         3. IN THE STEPS BELOW THE FOLLOWING UNIT NAMES ARE        *\n//*            ASSUMED : \"SYSDA\" FOR DISK UNIT                        *\n//*                      \"VIO\" FOR VIRTUAL UNIT                       *\n//*         4. CHECK MEMBERS \"PAJCSHDU\" AND \"PAJSSHDU\".               *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ALL     EXEC PGM=IEFBR14\n//SHDATA    DD UNIT=DISK,VOLUME=SER=......,SPACE=(TRK,(5,2,2)),\n//             DSN=->.SHADOW.DATA,DISP=(NEW,CATLG,DELETE),\n//             DCB=(RECFM=FB,BLKSIZE=3120,LRECL=80)\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD DSN=->.SHADOW.DATA(PAJSHDW),DISP=OLD\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(PAJSHDW),DISP=SHR\n//ASR     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD DSN=->.SHADOW.DATA(R050A90),DISP=OLD\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE0(R050A90),DISP=SHR\n//ASM     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(KMX),DISP=SHR\n//LNK     EXEC PAJILKI\n//SYSIN     DD *\n  INCLUDE SYSISP(ISPLINK)\n  INCLUDE SYSADD(R050A90)\n  ENTRY   KMX\n  NAME    KMX(R)\n/*\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJISPF\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=FB AND LRECL=80, ELSE     *\n//*       \"PAJISPV\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=VB AND LRECL=255.         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//CPYC    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.CLISTS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=((PAJCKMX,KMX))\n  SELECT MEMBER=(PAJCSHDE,PAJCSHDU,PAJCSHDW,PAJCSHEN)\n/*\n//CPYP    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.PANELS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJSHDWH,PAJSHDWI,PAJSHDWQ,PAJSHDWS,PAJSHDWT,PAJSHDWU)\n/*\n//CPYS    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.SKELETONS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJSSHDU)\n/*\n//CPYM    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.MESSAGES'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJU99)\n/*\n//CPYD    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.SHADOW.DATA'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJSHDU)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHADOW#": {"ttr": 7699, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x14!\\x00$\\x00$\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T14:21:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "SYSPAJA"}, "text": "1   13/12/94                    SHADOW / SHADUP installation    1/1\n\n                     -----------------------------\n                       S H A D O W - S H A D U P\n                     -----------------------------\n\n ISPF application : Encrypt-Decrypt data-sets facility.\n ------------------\n Restriction : These are \"wizard man only\" information and actions.\n -------------\n Installation steps (job in member SHADOW$) :\n --------------------------------------------\n 1. Pre-requisites : CRY, EDMODE, EUSID, EUSUB, INTRDR, IOF and R050A90.\n 2. Create a ->.SHADOW.DATA library (i.e., 5 tracks, 2 directory,\n    record length 80 and block-size 3120, with RACF universal access\n    READ only, thus protected against write by the world unless for the\n    wizard man, obviously using a PERMIT for him) to copy in :\n    a) the members object of program PAJSHDW and routine R050A90, and\n    b) the member PAJSHDWU (Assembler symbolic).\n    Update procedure PAJCSHDU and skeleton PAJSSHDU with the name of\n    above data-set.\n 3. Needed members in libraries (RACF universal access READ) :\n    a) ISPF procedures : PAJCSHDE, PAJCSHDU, PAJCSHDW, PAJCSHEN and\n                         KMX (PAJCKMX).\n    b) ISPF link : KMX.\n    c) ISPF panels : PAJSHDWH, PAJSHDWI, PAJSHDWQ, PAJSHDWS, PAJSHDWT\n                     and PAJSHDWU.\n    d) ISPF Messages : PAJU99.\n    e) ISPF skeletons : PAJSSHDU.\n 4. In the standard ISR@PRIM panel or in the private ISPF primary\n    panel modify as indicated below :\n         -> in the section : )PROC\n         -> somewhere after the line : &ZSEL = TRANS ( ...\n         -> insert the two lines : SHADOW,'CMD(%PAJCSHDW)'\n                                   SHADUP,'CMD(%PAJCSHDU)'\n    This allows the ISPF application connection.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHADOW@": {"ttr": 7701, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x105\\x00*\\x00*\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T10:35:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "SYSPAJA"}, "text": "1   13/12/94                                 SHADOW / SHADUP    1/1\n\n                     -----------------------------\n                       S H A D O W - S H A D U P\n                     -----------------------------\n\n New ISPF application : Encrypt-Decrypt data-sets facility.\n ----------------------\n Note :   the Encryption/Decryption process uses a couple of keys to\n ------   warrant the data against any piratical actions.\n SHADUP : this is the action you must do to define, add or modify your\n -------- secret keys (as soon as it starts a panel prompts you).\n          The first time you want use the SHADOW facility (or if by\n          accident you have destroy it) you must enter\n          YES to get a copy of the keys-table symbolic module, and\n          YES to edit it with your couples of keys (explanations about\n          how to do it are given at the beginning of the symbolic).\n          Otherwise, when you want just add or modify some couples of\n          keys, enter respectively NO and YES.\n          If you just need to re-link it as it is, enter twice NO.\n SHADOW : as soon as the first SHADUP run complete, you may enter this\n -------- process to encrypt and/or decrypt data-set's members or\n          sequential data-sets using any one couple of keys predefined\n          by SHADUP process.\n          This mechanism assures you to never encrypt a data-set member\n          or a sequential data-set giving a wrong unviewable typed key\n          which means a good bye your data when done.\n          Obviously, at the time you decrypt, you must remember the\n          couple of keys you have used to encrypt a data-set member or\n          a sequential data-set. But, hopefully the decrypt is not\n          dangerous, because if you give it a wrong couple of keys,\n          you are always placed in edit on the resulting data-set\n          member or sequential data-set, so if bad, you have only to\n          enter CANCEL in the command line, and the data are not stored\n          back (retry with another couple of keys until the good one is\n          found, and good luck if there are a good many|).\n          If erroneously you enter END in the command line, so the data\n          are stored back, immediately encrypt with that same couple of\n          keys which restore the data as they were.\n          In the same way, when a processing error occurs during the\n          encrypt or decrypt operation, a CANCEL is done to not destroy\n          the original data.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SHORT$": {"ttr": 7703, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x12\\x00\\x00 \\x00 \\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T12:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "SYSPAJA"}, "text": "//SHORT    JOB (........),'INSTALL - SHORT -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=2\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*              INSTALL \"S H O R T\" ISPF APPLICATION                 *\n//* PRE-REQUISITE : EUSID TSO-COMMAND.                                *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJISPF\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=FB AND LRECL=80, ELSE     *\n//*       \"PAJISPV\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=VB AND LRECL=255.         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//CPYC    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.CLISTS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJCSC)\n/*\n//CPYP    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.PANELS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJSC00,PAJSC0,PAJSC1,PAJSC2)\n  SELECT MEMBER=(PAJTSC1,PAJTSC2,PAJTSC3)\n/*\n//CPYM    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.MESSAGES'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJC00)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHORT@": {"ttr": 7937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x945\\x0f\\x00\\x945\\x0f\\x10P\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-16T00:00:00", "modifydate": "1994-12-16T10:50:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "SYSPAJA"}, "text": "1   16/12/94                                           SHORT    1/1\n\n           -------------------------------------------------\n             S H O R T : System Sector Short Communication\n           -------------------------------------------------\n\n Purpose : The System sector short communication feature allows you to\n --------- maintain an online list of short messages which inform the\n           other group members on your scheduled work-time.\n How to connect it : if you use the standard ISR@PRIM panel, you\n ------------------- are already connected, otherwise, if you use\n    a private ISPF primary panel, you have just to add in the )PROC\n    section after the &ZSEL = TRANS ( ... the following line\n         SHORT,'CMD(%PAJCSC)'\n    which allows the connection.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TOPSEC": {"ttr": 7939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944o\\x00\\x944o\\x15Y\\x02N\\x02N\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-12T00:00:00", "modifydate": "1994-12-12T15:59:00", "lines": 590, "newlines": 590, "modlines": 0, "user": "SYSPAJA"}, "text": "TOPS     TITLE '---  DISPLAY PRIVATE TOP SECRETS TSO COMMAND  ---'\nTOPSEC   START 0\n         SPACE 1\n* PURPOSE :    A TSO COMMAND TO DISPLAY PRIVATE TOP SECRETS.\n* ---------    IT DISPLAYS A MEMBER NAMED \"USER-ID\" FROM A DATA-SET\n*              \"SHORT-WRITE-UP\" (MAY BE PREPARED WITH THE ISPF EDIT\n*              AND THEN CRYPTED WITH \"SHADOW\" UTILITY).\n*              SEE AT LABELS \"SWUDSN\", \"KEYW1\", \"KEYW2\" AND \"TBNME\"\n*              IN MODULE \"TOPSECT\" FOR ALL DEFINITIONS.\n*\n* SYNTAX :     THE TSO-COMMAND NAME IS ANY ONE OF THOSE DEFINED IN\n* --------     THE USER-ID'S TABLE NAMES (\"TBNME\"), IT ALLOWS TO VIEW\n*              THE CORRESPONDING USER-ID SHORT-WRITE-UP.\n*              AT THE LINK-EDIT STEP, ALL THIS NAMES MUST BE ALIASES\n*              OF THIS MODULE.\n*\n* WRITTEN BY : MOINIL P.A. - COMPUTING CENTRE\n* ------------               J.R.C. - ISPRA ESTABLISHMENT\n*                            21020 ISPRA (VA), ITALY\n         SPACE 1\n         PRINT NOGEN\n        $DEFREG\n        $XENT  BASE=(R11,R12)\n         SPACE 1\n*------- INITIALIZATION\n         SPACE 1\n         LR    R3,R1               SAVE FOR FURTHER USE\n         XR    R10,R10             C.C. = 0\n         SPACE 1\n*------- RECOGNIZE ENVIRONMENT\n         SPACE 1\n        EXTRACT ATSO,'S',FIELDS=(TSO,PSB)\n         L     R1,ATSO\n         TM    0(R1),X'80'\n         BZ    NOTTSO              NOT TSO ADDRESS SPACE\n         L     R2,APSCB            PSCB ADDRESS\n         LTR   R2,R2\n         BZ    NOTTSO              WE ARE'NT IN TSO\n         USING CPPL,R3             SET CPPL ADDRESSABILITY\n         USING PSCB,R2\n         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?\n         BNE   *+L'*+10            NO\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?\n         BE    OK                  YES, TSO COMMAND\n         LR    R1,R3\n         USING IKJEBECA,R1\n         L     R3,CAPTTMP          CPPL ADDRESS\n         DROP  R1\n         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?\n         BNE   NOTCMD              NO, NOT TSO SUB-COMMAND\nOK       ST    R3,CPPLADDR\n         L     R9,=V(TOPSECT)\n         L     R1,0(R9)\n         CLC   0(2,R1),ZERO\n         BE    ERRTM\n         CLC   0(2,R1),=Y(L'NDSN)\n         BH    ERRTM\n         LM    R0,R1,4(R9)\n         CLR   R0,R1\n         BNL   ERRTM\n         SLR   R1,R0\n         CH    R1,=H'16'\n         BNE   ERRTM\n         SPACE 1\n*------- CHECK CALLER\n         SPACE 1\n         L     R4,CPPLCBUF         COMMAND BUFFER ADDRESS\n         DROP  R3\n         MVC   CMDNME,=CL8' '\n         LH    R1,2(R4)            LENGTH OF COMMAND (=OFFSET)\n         CH    R1,=H'8'\n         BH    ERRAN\n         BCT   R1,*+L'*+6\n         OC    CMDNME(*-*),4(R4)   <<EXECUTED>>\n         EX    R1,*-6              UPPERCASE COMMAND NAME\n         LM    R3,R5,8(R9)\n         CH    R4,=H'16'\n         BNE   ERRTM\n         CLR   R3,R5\n         BH    ERRTM\n         XR    R15,R15\nCHKAUT   CLC   0(L'ZERO,R3),ZERO\n         BE    CHKNXT\n         LR    R1,R3\n         BAS   R14,DECRPT\n         MVC   SVEWD,DBLWD\n         LA    R1,8(R3)\n         BAS   R14,DECRPT\n         CLC   CMDNME,DBLWD\n         BNE   *+L'*+10\n         LA    R15,4(R15)\n         MVC   MSNME,SVEWD\n         CLC   PSCBUSER(L'PSCBUSER),SVEWD\n         BNE   *+L'*+4\n         LA    R15,8(R15)\nCHKNXT   BXLE  R3,R4,CHKAUT\n         DROP  R2\n         XC    DBLWD,DBLWD\n         XC    SVEWD,SVEWD\n         B     *+L'*(R15)\n         B     UNEXPT\n         B     UNAUTH\n         B     UNEXPT\n         SPACE 1\n*------- ALLOCATE DATA-SET MEMBER\n         SPACE 1\n         L     R2,CPPLADDR\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n         LA    R4,XDA08\n         USING DAPB08,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA08,R4),0(R4)\n         MVC   DA08CD,=XL2'0008'\n         L     R2,0(R9)\n         LH    R1,0(R2)\n         STH   R1,LDSN\n         MVI   NDSN,255\n         MVC   NDSN+1(L'NDSN-1),NDSN\n         BCT   R1,*+L'*+6\n         XC    NDSN(*-*),2(R2)     <<EXECUTED>>\n         EX    R1,*-6\n         LA    R1,LDSN\n         ST    R1,DA08PDSN\n         MVC   DA08DDN(L'DA08DDN),=CL8'TOPSECM '\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,MSNME\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         MVC   DA08ALN,=CL8' '\n         BAS   R14,XDAIR\n         B     ALLOK               +0 = OK, +4 = ERROR\n         MVC   WKLNE(16),=CL36' === DATA-SET ALLOCATION FAILED === '\n         LA    R0,36\n         B     ERRET\n         DROP  R3,R4\n         SPACE 1\n*------- PROCESS DATA-SET MEMBER\n         SPACE 1\nALLOK    LA    R2,DCBRQ\n         USING IHADCB,R2\n         MVC   DCBDDNAM(L'DCBDDNAM),=CL8'TOPSECM '\n        OPEN   (DCBRQ,(INPUT))\n         TM    FFLGS,IOABN\n         BO    ERRAB\n         TM    FFLGS,OPERR\n         BO    ERROP\n         TM    DCBOFLGS,DCBOFOPN\n         BZ    ERROP\n         DROP  R2\n         LA    R2,ERRIN\n        ESPIE  SET,ESPEXIT,((1,15)),PARAM=(R2)\n         ST    R1,OLDPICA\n         L     R1,4(R9)\n         BAS   R14,DECRPT\n         MVC   KEYW1,DBLWD\n         L     R1,4(R9)\n         LA    R1,8(R1)\n         BAS   R14,DECRPT\n         MVC   KEYW2,DBLWD\n         XC    DBLWD,DBLWD\nRDNXT    NI    FFLGS,255-IOERR\n        GET    DCBRQ,WKLNE+4\n         TM    FFLGS,IOERR\n         BO    ERRRD\n         MVC   WKLNE(4),=CL8' '\n         MVC   WKLNE+76(8),=CL8' '\n         LA    R1,PLST1\n         L     R15,=V(SETKEY)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERRSD\n         LA    R1,PLST3\n         L     R15,=V(DECIPH)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERRSD\n         LA    R1,PLST2\n         L     R15,=V(SETKEY)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERRSD\n         LA    R1,PLST3\n         L     R15,=V(DECIPH)\n         BASR  R14,R15\n         LTR   R15,R15\n         BNZ   ERRSD\n         LA    R0,72\n         LA    R1,WKLNE+75\n         CLI   0(R1),C' '\n         BL    ERRDX\n         BCTR  R1,0\n         BCT   R0,*-10\n         LA    R0,76\n         LA    R1,WKLNE+4\n         BAS   R14,PUTLNE\n         TM    FFLGS,PTERR         PUTLINE IN ERROR ...\n         BZ    RDNXT               NO\n         BO    RDEND               YES\n         SPACE 1\nRDERR    OI    FFLGS,IOERR\n         BR    R14\n         SPACE 1\nSPINT   ESPIE  RESET,OLDPICA\n         BR    R8\n         SPACE 1\nRDEND    BAS   R8,SPINT\nRDCLS   CLOSE  (DCBRQ)\n         SPACE 1\n*------- DE-ALLOCATE DATA-SET\n         SPACE 1\nDEALL    L     R2,CPPLADDR\n         USING CPPL,R2\n         LA    R3,XDAPL\n         USING DAPL,R3\n         MVC   DAPLUPT,CPPLUPT\n         MVC   DAPLECT,CPPLECT\n         LA    R1,DAPLECBS\n         ST    R1,DAPLECB\n         MVC   DAPLPSCB,CPPLPSCB\n         DROP  R2\n         LA    R4,XDA18\n         USING DAPB18,R4\n         ST    R4,DAPLDAPB\n         XC    0(LDA18,R4),0(R4)\n         MVC   DA18CD,=XL2'0018'\n         MVC   DA18DDN(L'DA18DDN),=CL8'TOPSECM '\n         MVC   DA18MNM,=CL8' '\n         MVC   DA18SCLS(L'DA18SCLS),=CL8' '\n         DROP  R3,R4\n         BAS   R14,XDAIR\n         B     LEAVE               +0 = OK, +4 = ERROR\n         MVC   WKLNE(39),=CL39' === DATA-SET DE-ALLOCATION FAILED === '\n         LA    R0,39\nERRET    LA    R1,WKLNE\n         BAS   R14,PUTLNE\n         SPACE 1\n*------- TERMINATION\n         SPACE 1\n         LA    R10,8               C.C. = 8\nLEAVE   $XRET  CC=(R10)\n         EJECT\n*------- DIAGNOSTIC'S MESSAGES\n         SPACE 1\nNOTCMD   MVC   MSGOUT(26),=CL16' === CALL NOT ALLOWED === '\n         LA    R0,26\n         LA    R1,MSGOUT\n        TPUT   (1),(0)\nERREX    LA    R10,8               C.C. = 8\n         B     LEAVE\nNOTTSO   MVC   WTOMSG+4(33),=CL33' === NOT ALLOWED OUTSIDE TSO === '\n        WTO    MF=(E,WTOMSG)\n         B     ERREX\nERRTM    MVC   WKLNE(28),=CL28' === TABLE MODULE ERROR === '\n         LA    R0,28\n         B     ERRET\nERRAN    MVC   WKLNE(25),=CL25' === INVALID COMMAND === '\n         LA    R0,25\n         B     ERRET\nUNAUTH   MVC   WKLNE(30),=CL30' === UNAUTHORIZED COMMAND === '\n         LA    R0,30\n         B     ERRET\nUNEXPT   MVC   WKLNE(22),=CL22' === UNKNOWN USER === '\n         LA    R0,22\n         B     ERRET\nERRAB    MVC   WKLNE(32),=CL32' === NONE (NO \"DOC\" MEMBER) === '\n         LA    R0,32\nERRXO    LA    R1,WKLNE\n         BAS   R14,PUTLNE\n         LA    R10,8               C.C. = 8\n         B     DEALL\nERROP    MVC   WKLNE(35),=CL35' === OPEN ERROR OR DD CONFLICT === '\n         LA    R0,35\n         B     ERRXO\nERRRD    BAS   R8,SPINT\n         MVC   WKLNE(30),=CL30' === I/O READ ERROR (GET) === '\n         LA    R0,30\nERRXD    LA    R1,WKLNE\n         BAS   R14,PUTLNE\n         LA    R10,8               C.C. = 8\n         B     RDCLS\nERRIN    BAS   R8,SPINT\n         MVC   WKLNE(30),=CL30' === INTERRUPT (REJECTED) === '\n         LA    R0,30\n         B     ERRXD\nERRSD    BAS   R8,SPINT\n         MVC   WKLNE(32),=CL32' === CRYPT FAILURE DETECTED === '\n         LA    R0,32\n         B     ERRXD\nERRDX    BAS   R8,SPINT\n         MVC   WKLNE(30),=CL30' === WRONG CRYPT DETECTED === '\n         LA    R0,30\n         B     ERRXD\n         EJECT\n*------- DECRPT - DECRYPT ROUTINE\n*              R1 : DECRYPT POINTER (CL8)\n*              R13 : SAVE AREA POINTER\n*              R14 : LINK REGISTER\n* ON EXIT ---- \"DBLWD\" : DECRYPT RESULT (DOUBLE-WORD)\n         SPACE 1\nDECRPT   STM   R2,R8,28(R13)\n         MVI   SWDE1,2\n         MVI   SWDE2,2\n         MVI   SWDE3,2\n         MVC   ARGWD(L'ARGWD),0(R1)\n         XC    ARGWD,=XL8'FFFFFFFFFFFFFFFF'\n         OI    SWDE1,1\n         XI    SWDE2,3\n         OI    SWDE3,1\nDECRPTL  L     R2,ARGWD\n         XR    R3,R3\n         LA    R8,15\n         LR    R6,R8\n         SLL   R6,28\n         XR    R7,R7\n         LR    R4,R2\n         SRL   R4,*-*\nSWDE1    EQU   *-1\n         XR    R2,R4\n         NR    R2,R6\n         STM   R2,R3,DBLWD\n         BASR  R1,0\n         LM    R4,R5,ARGWD\n         NR    R2,R6\n         NR    R3,R7\n         SRDL  R6,4\n         NR    R4,R6\n         NR    R5,R7\n         SRDL  R2,4\n         XR    R4,R2\n         XR    R5,R3\n         SLDL  R2,*-*\nSWDE2    EQU   *-1\n         XR    R4,R2\n         XR    R5,R3\n         NR    R4,R6\n         NR    R5,R7\n         LR    R2,R4\n         LR    R3,R5\n         SRDL  R2,*-*\nSWDE3    EQU   *-1\n         XR    R4,R2\n         XR    R5,R3\n         NR    R4,R6\n         NR    R5,R7\n         LM    R2,R3,DBLWD\n         OR    R2,R4\n         OR    R3,R5\n         STM   R2,R3,DBLWD\n         BCTR  R8,R1\n         CLI   SWDE1,2\n         BE    *+L'*+22\n         NI    SWDE1,2\n         XI    SWDE2,3\n         NI    SWDE3,2\n         MVC   ARGWD,DBLWD\n         B     DECRPTL\n         MVI   SWDE1,*-*\n         MVI   SWDE2,*-*\n         MVI   SWDE3,*-*\n         LM    R2,R8,28(R13)\n         BR    R14\n         EJECT\n*------- XDAIR - EXECUTE IKJDAIR-IKJEFF18 SUBROUTINE\n*              R0  : WORK REGISTER\n*              R1  : WORK REGISTER\n*              R14 : LINK REGISTER - RETURN +0 = OK\n*                                           +4 = ERROR\n*              R15 : WORK REGISTER\n         SPACE 1\nXDAIR    ST    R14,SVLINK\n         XC    DAPLECBS,DAPLECBS\n        CALLTSSR EP=IKJDAIR,MF=(E,XDAPL)\n         L     R14,SVLINK\n         LTR   R15,R15\n         BZR   R14                 OK\n         ST    R15,RETC            DIAGNOSE ERROR\n         LA    R1,XDFDA\n         USING DFDSECTD,R1\n         XC    0(DFLEN,R1),0(R1)\n         LA    R15,XDAPL\n         ST    R15,DFDAPLP\n         LA    R15,RETC\n         ST    R15,DFRCP\n         LA    R15,ZERO\n         ST    R15,DFJEFF02\n         LA    R15,DASW\n         ST    R15,DFIDP\n         DROP  R1\n        LINK   EP=IKJEFF18         SEND ERROR MESSAGE\n         LTR   R15,R15\n         BZ    XDAIRX\n         MVC   WKLNE(37),=CL37' === DAIRFAIL RC = .. (IKJEFF18) === '\n         STC   R15,MSGOUT+20\n         SRL   R15,4\n         STC   R15,MSGOUT+19\n         NC    MSGOUT+19(2),=XL2'0F0F'\n         TR    MSGOUT+19(2),=CL16'0123456789ABCDEF'\n         LA    R0,37\n         LA    R1,WKLNE\n         BAS   R14,PUTLNE\nXDAIRX   L     R14,SVLINK\n         B     4(R14)\n         EJECT\n*------- PUTLNE - PUTLINE ROUTINE\n*        (REGISTERS R2-R10 AND R14 ARE SAVED/RESTORED BY ROUTINE)\n*              R14 : LINK REGISTER\n* ON ENTRY --- R0 : MESSAGE TEXT LENGTH\n*              R1 : POINTS TO THE MESSAGE TEXT\n         SPACE 1\nPUTLNE   LTR   R0,R0\n         BNPR  R14\n         STM   R2,R10,SAVEREGS     SAVE CALLER'S REGS\n         ST    R14,SAVEREGR\n         LA    R2,L'MSGOUT\n         CLR   R0,R2\n         BNL   *+L'*+2\n         LR    R2,R0\n         MVI   MSGOUT,C' '         CLEAR BUFFER TO SPACES\n         MVC   MSGOUT+1(L'MSGOUT-1),MSGOUT\n         BCT   R2,*+L'*+6\n         MVC   MSGOUT(*-*),0(R1)   <<EXECUTED>>\n         EX    R2,*-6\n         XC    MSGCNTL,MSGCNTL     SET IN PUTLINE LINE LENGTH\n         LA    R2,L'MSGCNTL+1(R2)\n         TM    FFLGS,PTERR         PUTLINE IN ERROR ...\n         BO    PUTERR              YES\n         STH   R2,MSGCNTL\n         LA    R5,MSGWORK          ADDRESS OF MSG BUFFER\n         L     R2,CPPLADDR         ADDRESS OF CPPL\n         USING CPPL,R2\n         L     R3,CPPLUPT          UPT ADDRESS\n         L     R4,CPPLECT          ECT ADDRESS\n         DROP  R2\n         XC    ECBX,ECBX           CLEAR ECB\n         XC    PTPBX(PTPBLEN),PTPBX CLEAR PUT PARMLIST\n         XC    IOPLX(IOPLLEN),IOPLX CLEAR PARM LIST\n         LA    R1,IOPLX            ADDRESS OF LIST\n        PUTLINE PARM=PTPBX,UPT=(R3),ECT=(R4),ECB=ECBX,                 X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X\n               OUTPUT=((R5),TERM,SINGLE,DATA),                         X\n               MF=(E,(1))\n         LTR   R15,R15             HOW COMPLETE ?\n         BZ    PUTRET              SUCCESSFULL\n         OI    FFLGS,PTERR\n         MVC   WTOMSG+4(33),=CL33' === PUTLINE ERROR - RC = .. === '\n         STC   R15,WTOMSG+31\n         SRL   R15,4\n         STC   R15,WTOMSG+30\n         NC    WTOMSG+30(2),=XL2'0F0F'\n         TR    WTOMSG+30(2),=CL16'0123456789ABCDEF'\n        WTO    MF=(E,WTOMSG)\nPUTERR   MVC   MSGCNTL+2(2),WTOMSG+2\n         LA    R3,MSGOUT(R2)\n         MVC   0(L'WTOMSGF,R3),WTOMSGF\n         LA    R2,L'WTOMSGF(R2)\n         STH   R2,MSGCNTL\n        WTO    MF=(E,MSGWORK)\nPUTRET   LM    R2,R10,SAVEREGS     RESTORE CALLER'S REGS\n         L     R14,SAVEREGR\n         BR    R14                 RETURN TO CALLER\n         EJECT\n*------- DCBEXIT\n         SPACE 1\n         CNOP  0,4\n         USING IHADCB,R1\nDCBEXIT  TM    DCBRECFM,DCBRECF    MUST BE FIXED RECORDS\n         BZ    *+L'*+6\n         TM    DCBRECFM,DCBRECV\n         BZR   R14\n         DROP  R1\n         OI    FFLGS,OPERR\n         BR    R14\n         SPACE 1\n*------- DCBABND\n         SPACE 1\n         CNOP  0,4\nDCBABND  TM    3(R1),X'04'         TEST OK TO IGNORE\n         BZ    *+L'*+10            NO\n         CLC   0(L'S013RC18,R1),S013RC18 YES, TEST ABEND S013-18\n         BE    *+L'*+6             YES\n         MVI   3(R1),0             NO, ABEND TASK IMMEDIATELY\n         BR    R14\n         MVI   3(R1),4             SET IGNORE ABEND CONDITION\n         OI    FFLGS,IOABN\n         BR    R14\n         SPACE 1\nS013RC18 DC    XL3'013018'\n         SPACE 1\n*------- ESPIE EXIT ROUTINE\n         SPACE 1\n         CNOP  0,8\n         USING *,R15\n         USING EPIE,R1\nESPEXIT  XC    KEYW1,KEYW1\n         XC    KEYW2,KEYW2\n         L     R2,EPIEPARM\n         ST    R2,EPIEPSW+4\n         NI    EPIEPSW+4,X'7F'\n         BR    R14\n         DROP  R1,R15\n         EJECT\n*------- LOCAL WORK-AREAS AND CONSTANTS\n         SPACE 1\nDBLWD    DC    D'0'\nARGWD    DC    D'0'\nSVEWD    DC    D'0'\n         SPACE 1\nWTOMSG  WTO    '                                 ',                    X\n               ROUTCDE=11,DESC=7,MF=L\nWTOMSGF  EQU   *-4,4\nDCBRQ   DCB    DSORG=PS,DEVD=DA,MACRF=GM,BFALN=D,                      X\n               EXLST=REXLIST,SYNAD=RDERR,EODAD=RDEND,DDNAME=........\n         PRINT GEN\nREXLIST  DC    0F'0',XL1'05',AL3(DCBEXIT),XL1'91',AL3(DCBABND)\n         SPACE 1\nATSO     DS    A\nAPSCB    DS    A\nSVLINK   DS    F\nOLDPICA  DS    F\nPLST1    DC    A(KEYW2)\nPLST2    DC    A(KEYW1)\nPLST3    DC    A(WKLNE+4,*+4,72)\n         SPACE 1\nXDAPL    DC    0F'0',(LDAPL)X'0'   DAIR PARM LIST (DAPL)\nDAPLECBS DC    F'0'\nXDA08    DC    0F'0',(LDA08)X'0'   DAIR ALLOCATE PARM LIST (DAPB08)\nXDA18    DC    0F'0',(LDA18)X'0'   DAIR DE-ALLOCATE PARM LIST (DAPB18)\nXDFDA    DC    0F'0',(DFLEN)X'0'   DAIR FAILURE PARM LIST\nRETC     DC    F'0'\n         SPACE 1\nCPPLADDR DC    A(*-*)         PUTLINE USE\nSAVEREGS DC    9F'0'          SAVE REGS R2-R10 FOR PUTLINE\nSAVEREGR DC    F'0'           SAVE REG R14 FOR PUTLINE\nIOPLX    DC    (IOPLLEN)X'0'  I-O PARM LIST FOR PUTLINE/GETLINE\nECBX     DC    F'0'           ECB FOR PUTLINE/GETLINE\nPTPBX    DC    (PTPBLEN)X'0'  PUTLINE PARM BLOCK\nMSGWORK  EQU   MSGCNTL,84     PUTLINE WORK USE\nMSGCNTL  DC    F'0'                CONTROL WORD FOR PUTLINE\nMSGOUT   DC    CL80' '             PUTLINE TEXT\n         SPACE 1\nWKLNE    DC    CL88' '\nZERO     DC    F'0'\nDASW     DC    0H'0',AL2(DFDAIR)\nLDSN     DC    H'0'\nNDSN     DC    XL44'0'\nCMDNME   DC    XL8'0'\nMSNME    DC    XL8'0'\nKEYW1    DC    XL8'0'\nKEYW2    DC    XL8'0'\nFFLGS    DC    XL1'0'\nIOABN    EQU   X'80'\nOPERR    EQU   X'40'\nIOERR    EQU   X'08'\nPTERR    EQU   X'01'\n         SPACE 1\n*------- LITERAL POOL\n         SPACE 1\n         LTORG\n         SPACE 1\n        PRINT  NOGEN\n        CVT    DSECT=YES,LIST=YES\n        IKJCPPL\n        IKJPSCB\n        IKJEBECA\n        IKJIOPL\nIOPLLEN  EQU   *-IOPL\n        IKJPTPB\nPTPBLEN  EQU   *-PTPB\n        IKJDAPL\nLDAPL    EQU   *-DAPL\n        IKJDAP08\nLDA08    EQU   *-DAPB08\n        IKJDAP18\nLDA18    EQU   *-DAPB18\n        IKJEFFDF DFDSECT=YES\n        DCBD   DSORG=PS,DEVD=DA\n        IHAEPIE\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TOPSEC$": {"ttr": 8193, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x7f\\x00\\x944\\x7f\\x12\\x13\\x00e\\x00e\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-13T00:00:00", "modifydate": "1994-12-13T12:13:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "SYSPAJA"}, "text": "//TOPSEC   JOB (........),'INSTALL - TOPSEC -',\n//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=1\n/*JOBPARM L=5\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//*            INSTALL \"T O P S E C\" ISPF APPLICATION                 *\n//* PRE-REQUISITE PRODUCTS : IOFSPF     SHADOW/SHADUP                 *\n//* NOTES : 1. ADJUSTMENTS MUST BE DONE BEFORE YOU RUN THIS JOB (SCAN *\n//*            ALL \"->\" OCCURENCES AND SET RIGHT DATA-SETS NAMES).    *\n//*         2. IN THE STEPS BELOW THE FOLLOWING UNIT NAMES ARE        *\n//*            ASSUMED : \"SYSDA\" FOR DISK UNIT                        *\n//*                      \"VIO\" FOR VIRTUAL UNIT                       *\n//*         3. CHECK MEMBERS \"PAJCTOPS\" AND \"PAJSTOPS\".               *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//ASM     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD DSN=->.SHADOW.DATA(TOPSEC),DISP=OLD\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(TOPSEC),DISP=SHR\n//ASD     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(KSXD),DISP=SHR\n//LKD     EXEC PAJILKI\n//SYSIN     DD *\n  INCLUDE SYSISP(ISPLINK)\n  ENTRY   KSXD\n  NAME    KSXD(R)\n/*\n//ASI     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(KSXI),DISP=SHR\n//LKI     EXEC PAJILKI\n//SYSIN     DD *\n  INCLUDE SYSISP(ISPLINK)\n  ENTRY   KSXI\n  NAME    KSXI(R)\n/*\n//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'\n//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))\n//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,\n//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD DSN=->.SOURCE.FILE5(KSXS),DISP=SHR\n//LKS     EXEC PAJILKI\n//SYSIN     DD *\n  INCLUDE SYSISP(ISPLINK)\n  ENTRY   KSXS\n  NAME    KSXS(R)\n/*\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//* EXECUTE THE STEP BELOW WITH PROCEDURE :                           *\n//*       \"PAJISPF\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=FB AND LRECL=80, ELSE     *\n//*       \"PAJISPV\" IF YOUR TARGET ->.ISPF.CLISTS DATA-SET            *\n//*                                IS RECFM=VB AND LRECL=255.         *\n//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n//CPYC    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.CLISTS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJCTOPS)\n  SELECT MEMBER=((PAJCKSXD,KSXD),(PAJCKSXI,KSXI),(PAJCKSXS,KSXS))\n/*\n//CPYP    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.PANELS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJTOPSH,PAJTOPSL,PAJTOPSM)\n/*\n//CPYS    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.SKELETONS'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJSTOPS)\n/*\n//CPYM    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.ISPF.MESSAGES'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(PAJT90)\n/*\n//CPYD    EXEC PAJISPF,DSS='->.SOURCE.FILE5',\n//             DST='->.SHADOW.DATA'\n//CM.SYSIN  DD *\n  COPY   OUTDD=TARGET,INDD=SOURCE\n  SELECT MEMBER=(TOPSECU)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TOPSEC#": {"ttr": 8196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x9f\\x00\\x944\\x9f\\x130\\x00}\\x00}\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-15T00:00:00", "modifydate": "1994-12-15T13:30:00", "lines": 125, "newlines": 125, "modlines": 0, "user": "SYSPAJA"}, "text": "1   13/12/94                             TOPSEC installation    1/3\n\n                            ---------------\n                              T O P S E C\n                            ---------------\n\n TSO command : Display Top Secret short-write-up.\n -------------\n Restriction : These are \"wizard man only\" information and actions.\n -------------\n Installation steps (Job in member TOPSEC$) :\n --------------------------------------------\n 1. Pre-requisite : SHADOW/SHADUP.\n    The created ->.SHADOW.DATA library is used to copy in :\n    a) the member object of program TOPSEC, and\n    b) the member TOPSECU (Assembler symbolic).\n    Update procedure PAJCTOPS and skeleton PAJSTOPS with the name of\n    above data-set.\n 2. Needed members in libraries (wizard private) :\n    a) ISPF procedures : PAJCTOPS, KSXD (PAJCKSXD), KSXI (PAJCKSXI)\n                         and KSXS (PAJCKSXS).\n    b) ISPF link : KSXD, KSXI and KSXS.\n    c) ISPF panels : PAJTOPSH, PAJTOPSL and PAJTOPSM.\n    d) ISPF Messages : PAJT90.\n    e) ISPF skeletons : PAJSTOPS.\n 3. Create a ->.TOPSEC.DATA library (i.e., 1 cylinder, 20 directories,\n    record length 80 and block-size 3120, with RACF universal access\n    NONE, thus fully protected against the world unless for the wizard\n    man, use also a PERMIT to reject the access by the group-ID).\n    This data-set is used to memorize the various users TOPSEC tables.\n    Update procedure PAJCTOPS with the name of above data-set.\n 4. In the standard ISR@PRIM panel or in the private ISPF primary\n    panel modify as indicated below :\n         -> in the section : )PROC\n         -> somewhere after the line : &ZSEL = TRANS ( ...\n         -> insert the line : TOPSUP,'CMD(%PAJCTOPS)'\n    This allows the ISPF application connection (only for the wizard).\n 5. How wizard prepares users TSO-command :\n    a) ask the users to create a common top-secret short-write-up's\n       data-set ,i.e., <group-ID>.DOC.DATA, 5 tracks, 2 directories,\n       record length 80 and block-size 3120, with RACF universal access\n       NONE, thus fully protected against the world, and use PERMIT to\n       - reject the access by the group-ID, and\n       - allow access to the authorized user-IDs.\n    b) enter TOPSUP command to generate the users specific program (at\n       edit time of the users table information, supply as indicated\n       the above data-set name, the two secret keywords and all the\n       authorized user-IDs with their corresponding command name).\n    c) after the commands are link-edited, DELETE or CRYPT the users\n       table member created in the ->.TOPSEC.DATA library.\n1   15/12/94                             TOPSEC installation    2/3\n\n Short example of TOPSEC creation and use :\n ------------------------------------------\n Assumes the following :\n a) the TSO/RACF User-id of Mr. Wizard is SYSWIZ and the RACF group to\n    which it belongs is SYS.\n b) the SHADOW/SHADUP application has been installed by him using the\n    job SHADOW$, and so, i.e., the data-set SYS.SHADOW.DATA is already\n    prepared (RACF UACC(READ) with ID(SYS) having the ACCESS(READ), and\n    thus ID(SYSWIZ) being the creator has ACCESS(ALTER) obviously).\n    Then, Mr. Wizard has also executed SHADUP to create his private\n    SHADOW table of secret keys (link-edited in his SYSWIZ.LINK.DATA\n    data-set and used as first concatenation of the ISPLLIB DD card).\n c) the job TOPSEC$ has been executed by Mr. Wizard who has created\n    i.e. the data-set SYSWIZ.TOPSEC.DATA (RACF UACC(NONE) with ID(SYS)\n    having the ACCESS(NONE), and also in this case, ID(SYSWIZ) has\n    the ACCESS(ALTER) of the creator) to keep generated users requests.\n Now, suppose the TSO/RACF USER001, USER007 and USER011 of the RACF\n group ZULU ask Mr. Wizard to give them the TOPSEC facility to store\n sensitive information, which will be accessible only to any one of\n them and crypted with the two secret keys ALPHA and BETA, in the\n data-set named i.e. ZULU.DOC.DATA (RACF UACC(NONE) with ID(ZULU)\n ACCESS(NONE), but ID(USER001), ID(USER007) and ID(USER011) having\n ACCESS(ALTER) to give them the full control over it). Consequently,\n in this data-set ZULU.DOC.DATA, each user may store his sensitive\n information in a member called respectively USER001, USER007 and\n USER011, and crypt his member with the two secret keys ALPHA and BETA\n using SHADOW (pre-requisite SHADUP may be done by each user to define\n ALPHA and BETA keys). Also each user have to decide about the command\n name they want have, i.e., USER001 choices PLUTO, USER007 takes ZORRO\n and USER011 selects CASPER.\n Mr. Wizard at this point may execute TOPSUP supplying :\n a) at initial panel prompting :\n    - a member name under which he wants store the users requests, i.e.\n      RQZULU (member is builded in the data-set SYSWIZ.TOPSEC.DATA),\n    - and the options YES to Create, YES to Edit, YES to Assembly and\n      YES to Link-edit,\n    - then press END PF-key (or enter END command).\n b) at edit of member RQZULU :\n    - the users data-set name inserting card\n      col.1 => *      'ZULU.DOC.DATA'\n      at the right place, then type KSXI command, place cursor on the\n      inserted card and press ENTER,\n    - the users keys inserting cards\n      col.1 => *      ALPHA\n      col.1 => *      BETA\n      at the right place, then type KSXS command, place cursor on the\n      first inserted card and press ENTER, type KSXS command again,\n      place cursor on the second inserted card and press ENTER,\n1   15/12/94                             TOPSEC installation    3/3\n\n    - the users User-id and command name inserting cards\n      col.1 => *      USER001      PLUTO\n      col.1 => *      USER007      ZORRO\n      col.1 => *      USER011      CASPER\n      at the right place, then type KSXD command, place cursor on the\n      first inserted card and press ENTER, type KSXD command, place\n      cursor on the second inserted card and press ENTER, type KSXD\n      command, place cursor on the third inserted card and press ENTER,\n    - then press END PF-key (or enter END command).\n At end of submitted job SYSWIZU (all RC=0), Mr. Wizard executes SHADOW\n on the data-set SYSWIZ.TOPSEC.DATA to crypt the member RQZULU with one\n of his private couple of secret keys.\n Now, each user (USER001, USER007 and USER011) can create his member\n (corresponding User-id name) with his sensitive information in the\n data-set ZULU.DOC.DATA and crypt it with SHADOW using the keys ALPHA\n and BETA. Finally, as soon as this is done, when i.e. USER001 enter\n the TSO command PLUTO, he views his Short-Write-Up, if he types the\n TSO command ZORRO, he views the Short-Write-Up of USER007, and if he\n types the TSO command CASPER, he views the Short-Write-Up of USER011.\n The same actions are available to users USER007 and USER011, and the\n rest of the world can't view these Short-Write-Up's, unless obviously\n Mr. Wizard who is the big responsible for installation system security\n access by any people.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TOPSEC@": {"ttr": 8199, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x7f\\x00\\x944\\x7f\\x11P\\x00\\x10\\x00\\x10\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-13T00:00:00", "modifydate": "1994-12-13T11:50:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "SYSPAJA"}, "text": "1   13/12/94                                          TOPSEC    1/1\n\n                            ---------------\n                              T O P S E C\n                            ---------------\n\n TSO command : Display private Top Secret short-write-up.\n -------------\n Command Purpose : A TSO command to display private Top Secret.\n ----------------- It displays a member named \"User-id\" from a data-set\n         \"Short-Write-Up\" (may be prepared with the ISPF EDIT and then\n         crypted with \"SHADOW\" Utility).\n Command syntax : The TSO-command name is any one of those pre-defined\n ---------------- in a User-id's table names (in a module prepared by\n         the installation wizard). It allows (only who is authorized)\n         to view the corresponding User-id Short-Write-Up.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TOPSECU": {"ttr": 8201, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x944\\x7f\\x00\\x944\\x7f\\x10F\\x00<\\x00<\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xc1\\xd1\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-12-13T00:00:00", "modifydate": "1994-12-13T10:46:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "SYSPAJA"}, "text": "TOPT     TITLE '* * *   T O P S E C T   * * *'\nTOPSECT  START 0\n         SPACE 1\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n*                                                                    *\n* PURPOSE :    \"TOPSEC\" TABLE, PRIVATE USE ONLY. THIS MODULE IS TO   *\n* ---------    BE THEN INCLUDED AT THE LINK-EDIT STEP.               *\n*                                                                    *\n* HOW TO DEFINE INFORMATION :                                        *\n* ---------------------------\n*              EVERYWHERE INDICATED YOU MUST FILL IN THE REQUESTED   *\n*              INFORMATION AS FOLLOWS :                              *\n*              1. INSERT A LINE STARTING WITH AN ASTERISK (COMMENT   *\n*                 LINE) IN COLUMN 1 FOLLOWED BY THE INFORMATION YOU  *\n*                 WANT DEFINE (IF TWO FIELDS ARE NEEDED, EACH MUST   *\n*                 BE SEPARATED FROM THE OTHER BY AT LEAST A BLANK).  *\n*                 I.E. : *    ALPHA  BETA                            *\n*              2. THEN TYPE THE ISPF EDIT MACRO NAME (KSXI, KSXS OR  *\n*                 KSXD AS INDICATED) IN THE COMMAND LINE, PLACE THE  *\n*                 CURSOR SOMEWHERE ON THE PREVIOUS INSERTED LINE,    *\n*                 AND PUSH ENTER.                                    *\n*                 THIS FUNCTION INSERT JUST AFTER THE LINE YOU HAVE  *\n*                 POINTED THE NEEDED MASKED CONSTANT.                *\n*              3. FINALLY, DELETE THE INSERTED LINE WHICH CONTAINS   *\n*                 THE SECRET INFORMATION.                            *\n*              REPEAT THESE STEPS FOR ALL THE INFORMATION YOU HAVE   *\n*              TO DEFINE.                                            *\n*                                                                    *\n*- - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\n         EJECT\n         DC    A(SWUDSNL)     VECTOR :  +0\n         DC    A(KEYWS)                 +4\n         DC    A(TBNME,L'TBNME,TBLAST)  +8\n         SPACE 1\n         CNOP  2,4\nSWUDSNL  DC    AL2(LSWUDSN)\nSWUDSN   EQU   *\n* =====> USE \"KSXI\" TO SET BELOW THE \"SHORT-WRITE-UP\" DATA-SET\n*        NAME (ENCLOSED IN QUOTES).\n*        DS-NAME :  <==========================================>\n*                  '............................................'\nLSWUDSN  EQU   *-SWUDSN\n         SPACE 1\n         CNOP  0,4\nKEYWS    DS    0XL8\n* =====> USE \"KSXS\" TO SET BELOW THE SECRET KEYWORDS (TWO KEYWORDS\n*        ON TWO SEPARATE LINES).\n*        KEYS :    <======>\n*                  ..1ST...\n*                  ..2ND...\n         EJECT\n         CNOP  0,4\nTBNME    DS    0XL16\n* =====> USE \"KSXD\" TO SET BELOW THE AUTHORIZED USER-ID'S AND THEIR\n*        CORRESPONDING COMMAND NAMES.\n*        USER-ID/CMD-NAME PAIR :  <=====>        <======>\n*                                 .......        ........\nTBLAST   EQU   *-L'TBNME\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT459/FILE459.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT459", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}