//A68C3039 JOB MSGCLASS=A,MSGLEVEL=(1,1),CLASS=A
//*
//* ###################################################################
//* # NB Bash scripting users beware the use of $ below               #
//* ###################################################################
//*
//*********************************************************************
//*                                                                   *
//* (C) 2012 Copyright C.J. Cheney, S.R. Bourne and others            *
//*                                                                   *
//* Copyright is asserted for the software comprising and installed   *
//* from this tape. Permission is granted for this software to be     *
//* downloaded, installed and used, subject to the conditions that:   *
//* 1) all use of this software is at the user's own risk;            *
//* 2) that no person or organisation involved in the development or  *
//*    distribution of this software has any liability whatsoever     *
//*    arising from its supply or use.                                *
//*                                                                   *
//*********************************************************************
//*
//* ###################################################################
//* # Output dasd volume serial: A68C01                               #
//* # Input tape volume serial: 01A68C with standard labels (SL)      #
//* # All datasets on the AWS tape are RECFM=FB,LRECL=80,BLKSIZE=3200 #
//* #                                                                 #
//* #     tape   -------DASD------                                    #
//* #Seq DSNAME  DSORG RECFM LRECL Description                        #
//* #  1 INSTJOB   PS   FB     80  JCL for the job to install the     #
//* #                              contents of this tape              #
//* #  2 DISTOBJ   PS   FB     80  Object modules for utility         #
//* #                              programs only used for unpacking   #
//* #                              the distribution                   #
//* #  3 MISCDOC   PO   FB     80  miscellaneous documents including  #
//* #                              copyright notice, installation     #
//* #                              instructions, character set        #
//* #                              information, change log, bug list, #
//* #                              etc.                               #
//* #  4 ZLIBOBJ   PO   FB     80  Algol68C runtime system object     #
//* #                              modules                            #
//* #  5 USEROBJ   PO   FB     80  Algol68C standard prelude object   #
//* #                              modules                            #
//* #  6 Z370OBJ   PO   FB     80  ZCODE translator object modules    #
//* #  7 A68COBJ   PO   FB     80  Algol68C compiler object modules   #
//* #  8 SYS       PO   VB    136  Algol68C initialisation and        #
//* #                              environment files                  #
//* #  9 ZLIBSRC   PO   FB     80  Algol68C runtime system source     #
//* #                              code (assembler)                   #
//* # 10 USERSRC   PO   VB    136  Algol68C standard prelude source   #
//* #                              code (Algol68C)                    #
//* # 11 TESTSRC   PO   VB    136  Algol68C test suite code           #
//* # 12 TESTOUT   PS   VBA   137  Output from the Algol68C the test  #
//* #                              suite                              #
//* # 13 MISCSRC   PO   VB    136  Miscellaneous Algol68C programs    #
//* #                              (including the Algol68C            #
//* #                              crossreference program)            #
//* # 14 MISCJCL   PO   FB     80  Miscellaneous JCL:                 #
//* #                               - catalogued procedures           #
//* #                               - job to run the test suite       #
//* #                               - job to rebuild the Algol68C     #
//* #                                 runtime system from source code #
//* #                                 (assembler)                     #
//* #                               - job to rebuild the Algol68C     #
//* #                                 standard  prelude from source   #
//* #                                 code (Algol68C)                 #
//* #                               - job showing use of the          #
//* #                                 crossreference program.         #
//* # 15 LANGREF   PO   FB     80  Algol68C Language Reference Manual #
//* #                              (XHTML and CSS)                    #
//* #                                                                 #
//* # Note that certain text files are RECFM=VB(A) with a LRECL that  #
//* # exceeds 80.                                                     #
//* ###################################################################
//*
//* ===================================================================
//ALLOC    PROC PFX=A68CLIB,VER=3039,
//             DISCVOL=A68C01,U=SYSDA,
//             SCRATCH='NEW,PASS',CATALOG='NEW,PASS',INIT='OLD,PASS',
//             VB='RECFM=VB,LRECL=136,BLKSIZE=2498',   good for 3330
//             VBX='RECFM=VB,LRECL=137,BLKSIZE=2498',  good for 3330
//             VBA='RECFM=VB,LRECL=137,BLKSIZE=2498',  good for 3330
//             FB='RECFM=FB,LRECL=80,BLKSIZE=2480',    good for 3330
//             UNDF='RECFM=U,BLKSIZE=4096',             ok for 3330
//             SMALL='TRK,(15,5,5)',                    ok for 3330
//             MEDIUM='TRK,(30,5,15)',                  ok for 3330
//             LARGE='TRK,(120,10,30)',                 ok for 3330
//             TESTOUT='TRK,(30,5)', n.b. SEQ not PDS - ok for 3330
//             UMEDIUM='TRK,50' for LKED SYSUT1  35 was ok for 3330
//* -------------------------------------------------------------------
//ALLOC    EXEC PGM=IEFBR14
//* the 3 following are only to allow for DCB referback
//VB       DD  UNIT=SYSDA,DISP=(&SCRATCH),SPACE=(TRK,0),DCB=(&VB)
//VBX      DD  UNIT=SYSDA,DISP=(&SCRATCH),SPACE=(TRK,0),DCB=(&VBX)
//VBA      DD  UNIT=SYSDA,DISP=(&SCRATCH),SPACE=(TRK,0),DCB=(&VBA)
//FB       DD  UNIT=SYSDA,DISP=(&SCRATCH),SPACE=(TRK,0),DCB=(&FB)
//UNDF     DD  UNIT=SYSDA,DISP=(&SCRATCH),SPACE=(TRK,0),DCB=(&UNDF)
//* the next 3 are used in the install process but are not KEPT
//DISTOBJ  DD  DISP=(&SCRATCH),UNIT=&U,VOL=SER=&DISCVOL,
//             SPACE=(&MEDIUM),DCB=(&FB)
//DISTMOD  DD  DISP=(&SCRATCH),UNIT=&U,VOL=SER=&DISCVOL,
//             SPACE=(&MEDIUM),DCB=(&UNDF)
//LKEDUT1  DD  DISP=(&SCRATCH),UNIT=&U,VOL=SER=&DISCVOL,
//             SPACE=(&UMEDIUM),DCB=(&UNDF)
//* the remainder are distribution target datasets
//MISCDOC  DD  DSN=&PFX..MISC.DOC,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&MEDIUM),DCB=(&FB)
//SYS      DD  DSN=&PFX..SYS,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&SMALL),DCB=(&VB)
//INIT     DD  DSN=&PFX..SYS(INIT),
//             DISP=(&INIT),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&SMALL),DCB=(&VB)
//MOD      DD  DSN=&PFX..MOD,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&LARGE),DCB=(&UNDF)
//ZLIBOBJ  DD  DSN=&PFX..ZLIB.OBJ&VER,
//             DISP=(&SCRATCH),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&SMALL),DCB=(&FB)
//USEROBJ  DD  DSN=&PFX..USER.OBJ&VER,
//             DISP=(&SCRATCH),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&SMALL),DCB=(&FB)
//Z370OBJ  DD  DSN=&PFX..Z370.OBJ&VER,
//             DISP=(&SCRATCH),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&MEDIUM),DCB=(&FB)
//A68COBJ  DD  DSN=&PFX..A68C.OBJ&VER,
//             DISP=(&SCRATCH),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&LARGE),DCB=(&FB)
//ZLIBSRC  DD  DSN=&PFX..ZLIB.TXT3039,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&LARGE),DCB=(&FB)
//USERSRC  DD  DSN=&PFX..USER.TXT3039,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&MEDIUM),DCB=(&VB)
//TESTSRC  DD  DSN=&PFX..TEST.TXT&VER,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&LARGE),DCB=(&VB)
//TESTOUT  DD  DSN=&PFX..TEST.OUT&VER,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&TESTOUT),  n.b. not a PDS
//             DCB=(&VBX)         VBA is forced later
//MISCSRC  DD  DSN=&PFX..MISC.SRC,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&SMALL),DCB=(&VB)
//MISCJCL  DD  DSN=&PFX..MISC.JCL,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&SMALL),DCB=(&FB)
//LANGREF  DD  DSN=&PFX..ALGOL68C.LANGREF,
//             DISP=(&CATALOG),VOL=SER=&DISCVOL,UNIT=&U,
//             SPACE=(&LARGE),DCB=(&FB)
//* -------------------------------------------------------------------
//         PEND
//* ===================================================================
//EPILOG   PROC REF='*.ALLOC.ALLOC',
//             CATALOG='OLD,CATLG',INIT='OLD,KEEP',SCRATCH='OLD,DELETE'
//* -------------------------------------------------------------------
//EPILOG   EXEC PGM=IEFBR14
//VB       DD  DISP=(&SCRATCH),DSN=&REF..VB
//VBX      DD  DISP=(&SCRATCH),DSN=&REF..VBX
//VBA      DD  DISP=(&SCRATCH),DSN=&REF..VBA
//FB       DD  DISP=(&SCRATCH),DSN=&REF..FB
//UNDF     DD  DISP=(&SCRATCH),DSN=&REF..UNDF
//*
//DISTOBJ  DD  DISP=(&SCRATCH),DSN=&REF..DISTOBJ
//DISTMOD  DD  DISP=(&SCRATCH),DSN=&REF..DISTMOD
//*
//MISCDOC  DD  DISP=(&CATALOG),DSN=&REF..MISCDOC
//SYS      DD  DISP=(&CATALOG),DSN=&REF..SYS
//INIT     DD  DISP=(&INIT),DSN=&REF..INIT
//MOD      DD  DISP=(&CATALOG),DSN=&REF..MOD
//ZLIBOBJ  DD  DISP=(&SCRATCH),DSN=&REF..ZLIBOBJ
//USEROBJ  DD  DISP=(&SCRATCH),DSN=&REF..USEROBJ
//Z370OBJ  DD  DISP=(&SCRATCH),DSN=&REF..Z370OBJ
//A68COBJ  DD  DISP=(&SCRATCH),DSN=&REF..A68COBJ
//ZLIBSRC  DD  DISP=(&CATALOG),DSN=&REF..ZLIBSRC
//USERSRC  DD  DISP=(&CATALOG),DSN=&REF..USERSRC
//TESTSRC  DD  DISP=(&CATALOG),DSN=&REF..TESTSRC
//TESTOUT  DD  DISP=(&CATALOG),DSN=&REF..TESTOUT
//MISCSRC  DD  DISP=(&CATALOG),DSN=&REF..MISCSRC
//MISCJCL  DD  DISP=(&CATALOG),DSN=&REF..MISCJCL
//LANGREF  DD  DISP=(&CATALOG),DSN=&REF..LANGREF
//* -------------------------------------------------------------------
//         PEND
//* ===================================================================
//BUILD    PROC CONDP='0,LT',NAME='xxxx',L=1,LAB=SL,TAPEVOL=01A68C,
//             MOD=MOD,REF='*.ALLOC.ALLOC',
//             REGP=150K,MODE=PDS,USPACE='TRK,(150,10,20)',
//             PGML=IEWL,CONDL='0,LT,IEBUPDTE',
//             REGL=350K,SIZEL='999K,18K',
//             LISTL=LIST,MAPL=NOMAP,CAL=CALL,ATTL='RENT,REUS'
//* -------------------------------------------------------------------
//PDSUNPK  EXEC PGM=PDSUNPK,REGION=&REGP,COND=(&CONDP),PARM='/&MODE'
//STEPLIB  DD  DSN=&REF..DISTMOD,DISP=(OLD,PASS)
//SYSPRINT DD  SYSOUT=A
//SYSUT2   DD  UNIT=SYSDA,SPACE=(&USPACE),DCB=(&REF..FB),
//            DISP=(NEW,PASS)         n.b. NEW ensures the PDS is empty
//SYSUT1   DD  DSN=&NAME,LABEL=(&L,&LAB),
//             DISP=(OLD,KEEP),UNIT=TAPE,VOL=(,RETAIN,SER=&TAPEVOL)
//*
//LKED     EXEC PGM=&PGML,REGION=&REGL,COND=(&CONDL),
//             PARM='&LISTL,&MAPL,NOXREF,&CAL,DCBS,&ATTL,SIZE=(&SIZEL)'
//SYSPRINT DD  SYSOUT=A
//SYSLIN   DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=&REF..&MOD,DISP=(OLD,PASS)
//SYSUT1   DD  DSN=&REF..LKEDUT1,DISP=(OLD,PASS)
//OBJ      DD  DSN=*.PDSUNPK.SYSUT2,DISP=(OLD,DELETE,DELETE)
//* -------------------------------------------------------------------
//         PEND
//* ===================================================================
//*
//PDSUNPK  PROC CONDP='0,LT',NAME='xxxx',L=1,LAB=SL,TAPEVOL=01A68C,
//             REGP=150K,MODE=PDS,REF='*.ALLOC.ALLOC'
//* -------------------------------------------------------------------
//PDSUNPK  EXEC PGM=PDSUNPK,REGION=&REGP,COND=(&CONDP),PARM='/&MODE'
//STEPLIB  DD  DSN=&REF..DISTMOD,DISP=(OLD,PASS)
//SYSPRINT DD  SYSOUT=A
//SYSUT2   DD  DSN=&REF..&NAME,DISP=(OLD,PASS)
//SYSUT1   DD  DSN=&NAME,LABEL=(&L,&LAB),
//             DISP=(OLD,KEEP),UNIT=TAPE,VOL=(,RETAIN,SER=&TAPEVOL)
//* -------------------------------------------------------------------
//         PEND
//* ===================================================================
//*
//IEBGENER PROC CONDI='0,LT',NAME='xxxx',L=1,LAB=SL,TAPEVOL=01A68C,
//             REF='*.ALLOC.ALLOC'
//* -------------------------------------------------------------------
//IEBGENER EXEC PGM=IEBGENER,REGION=100K,COND=(&CONDI)
//SYSPRINT DD   SYSOUT=A
//SYSIN    DD   DUMMY
//SYSUT1   DD   DSN=&NAME,LABEL=(&L,&LAB),
//             DISP=(OLD,KEEP),UNIT=TAPE,VOL=(,RETAIN,SER=&TAPEVOL)
//SYSUT2   DD  DSN=&REF..&NAME,DISP=(OLD,PASS)
//* -------------------------------------------------------------------
//         PEND
//* ===================================================================
//*
//LKED     PROC CONDL='0,LT',NAME='xxxx',L=1,LAB=SL,TAPEVOL=01A68C,
//             REF='*.ALLOC.ALLOC',
//             PGML=IEWL,REGL=350K,SIZEL='999K,18K',
//             LISTL=LIST,MAPL=NOMAP,CAL=CALL,ATTL='RENT,REUS'
//* -------------------------------------------------------------------
//LKED     EXEC PGM=&PGML,REGION=&REGL,COND=(&CONDL),
//             PARM='&LISTL,&MAPL,NOXREF,&CAL,DCBS,&ATTL,SIZE=(&SIZEL)'
//SYSPRINT DD  SYSOUT=A
//SYSLMOD  DD  DSN=&REF..&MOD,DISP=(OLD,PASS)
//SYSUT1   DD  DSN=&REF..LKEDUT1,DISP=(OLD,PASS)
//SYSLIN   DD  DSNAME=&NAME,LABEL=(&L,&LAB),
//             DISP=(OLD,KEEP),UNIT=TAPE,VOL=(,RETAIN,SER=&TAPEVOL)
//         DD  DDNAME=SYSIN
//* -------------------------------------------------------------------
//         PEND
//* ===================================================================
//*
//MISCCL   PROC NAME=XXXX,REF='*.ALLOC.ALLOC',MOD=MOD,
//             A68C=,REGC=250K,PRINTC='SYSOUT=A',OPTC=,
//             Z370=,REGT=250K,PRINTT='SYSOUT=A',CONDT='4,LT,A68C',
//             PGML=IEWL,REGL=350K,PRINTL='SYSOUT=A',
//             CONDL='(4,LT,A68C),(4,LE,Z370)',SIZEL='999K,18K',
//             LISTL=LIST,MAPL=NOMAP,CAL=CALL,ATTL='RENT,REUS'
//* -------------------------------------------------------------------
//A68C     EXEC PGM=A68C&A68C,REGION=&REGC,
//             PARM='F40K/SOURCE "P(&NAME)" CASESTROP &OPTC'
//STEPLIB  DD   DSN=&REF..&MOD,DISP=(SHR,PASS)
//SYSPRINT DD   &PRINTC
//INIT     DD   DSN=&REF..INIT,DISP=(SHR,PASS)
//SYSENV   DD   DSN=&REF..SYS,DISP=(SHR,PASS)
//P        DD   DSN=&REF..MISCSRC,DISP=(SHR,PASS)
//CODE     DD   UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(NEW,PASS)
//* -------------------------------------------------------------------
//Z370     EXEC PGM=Z370&Z370,REGION=&REGT,COND=(&CONDT)
//STEPLIB  DD   DSN=&REF..&MOD,DISP=(SHR,PASS)
//SYSPRINT DD   &PRINTT
//ZCODE    DD   DSN=*.A68C.CODE,DISP=(OLD,DELETE,DELETE)
//SYSGO    DD   UNIT=SYSDA,SPACE=(TRK,(5,5)),DISP=(NEW,PASS),
//             DCB=(&REF..FB)
//* -------------------------------------------------------------------
//LKED     EXEC PGM=&PGML,REGION=&REGL,COND=(&CONDL),
//             PARM='&LISTL,&MAPL,NOXREF,&CAL,DCBS,&ATTL,SIZE=(&SIZEL)'
//SYSPRINT DD  &PRINTL
//SYSLMOD  DD  DSN=&REF..&MOD,DISP=(OLD,PASS)
//*SYSLIB  DD  DSN=&REF..&MOD,DISP=(SHR,PASS) as can't receive DS twice
//SYSUT1   DD  DSN=&REF..LKEDUT1,DISP=(OLD,PASS)
//SYSLIN   DD  DSN=*.Z370.SYSGO,DISP=(OLD,DELETE,DELETE)
//         DD  DDNAME=SYSIN
//* -------------------------------------------------------------------
//         PEND
//* ===================================================================
//*
//* ###################################################################
//* # Delete datasets if any exist, then allocate permanent and       #
//* # temporary datasets                                              #
//* ###################################################################
//*
//DELETE   EXEC ALLOC,
//             SCRATCH='MOD,DELETE,DELETE', so may pre-exist or not
//             CATALOG='MOD,DELETE,DELETE', so may pre-exist or not
//             INIT='MOD,DELETE,DELETE',    so may pre-exist or not
//           SMALL='TRK,(1,,1)',MEDIUM='TRK,(1,,1)',LARGE='TRK,(1,,1)'
//*
//ALLOC    EXEC ALLOC,COND=(0,LT)
//*
//* ###################################################################
//* # Link-edit distribution utilities:                               #
//* #   PDSUNPK    to unpack PDS members where RECFM=VB(A)            #
//* ###################################################################
//*
//INSTDIST EXEC LKED,COND=(0,LT),
//             NAME=DISTOBJ,L=2,MOD=DISTMOD,ATTL='NORENT,NOREUS'
//*
//* ###################################################################
//* # Copy miscellaneous documentation into MISC.DOC dataset          #
//* ###################################################################
//*
//INSTDOC  EXEC PDSUNPK,COND=(0,LT),
//             NAME=MISCDOC,L=3
//*
//* ###################################################################
//* # Linkedit the run-time system (ZLIB, not to be confused with the #
//* # compression program of that name)                               #
//* ###################################################################
//*
//INSTZLIB EXEC BUILD,COND=(0,LT),
//             NAME='ZLIBOBJ',L=4,
//             CAL=NCAL
//LKED.SYSIN DD *
  INCLUDE OBJ(ZLIB)
    ALIAS ZLIB
    NAME $LIB3039(R)
  INCLUDE OBJ(RAND)
    ALIAS $$$$0073,$$$$0074,$$$$0075,$$$$0076
    ALIAS RAND
    NAME $RAN3039(R)
  INCLUDE OBJ(XPLG)
    ALIAS $$$$0042,$$$$0043,$$$$0044
    ALIAS XPLG
    NAME $XPL3039(R)
  INCLUDE OBJ(CNVT)
    ALIAS $$$$0041
    ALIAS CNVT
    NAME $CON3039(R)
  INCLUDE OBJ(NIOP)
    ALIAS $NIOP
    ALIAS NIOP
    NAME $NIO3039(R)
//*
//* ###################################################################
//* # Linkedit the standard prelude (a.k.a. user library), making     #
//* # merged load modules (to speed up subsequent link-editing)       #
//* ###################################################################
//*
//INSTUSER EXEC BUILD,COND=(4,LT),
//             NAME='USEROBJ',L=5,
//             CAL=NCAL
//LKED.SYSIN DD *
  INCLUDE SYSLMOD(ZLIB,NIOP)
  INCLUDE OBJ(MACH)
    ALIAS MACH
    NAME $MCH3039(R)
  INCLUDE SYSLMOD(MACH)
  INCLUDE OBJ(BASE)
    ALIAS BASE
    NAME $BAS3039(R)
  INCLUDE SYSLMOD(BASE,CNVT,RAND)
  INCLUDE OBJ(ROUT)
    ALIAS ROUT
    NAME $ROU3039(R)
  INCLUDE SYSLMOD(ROUT,XPLG)
  INCLUDE OBJ(MATH)
    ALIAS MATH
    NAME $MAT3039(R)
  INCLUDE SYSLMOD(MATH)
  INCLUDE OBJ(REAL)
    ALIAS REAL
    NAME $REA3039(R)
  INCLUDE SYSLMOD(REAL)
  INCLUDE OBJ(CMPX)
    ALIAS CMPX
    ALIAS USER3039
    ALIAS USER
    NAME $CPX3039(R)
//*
//* ###################################################################
//* # Linkedit the ZCODE translator                                   #
//* ###################################################################
//*
//INSTZ370 EXEC BUILD,COND=(4,LT),
//             NAME='Z370OBJ',L=6,
//             ATTL=OVLY
//LKED.SYSIN DD *
  INCLUDE SYSLMOD(MACH,ZLIB,NIOP)
  INCLUDE OBJ(L,A)
    OVERLAY ONE
  INCLUDE OBJ(B,F,G,Q,R)
    OVERLAY ONE
  INCLUDE OBJ(C,P)
    ENTRY $A68INIT
    ALIAS Z370
    NAME Z3703039(R)
//*
//* ###################################################################
//* # Linkedit the Algol68C compiler                                  #
//* ###################################################################
//*
//INSTA68C EXEC BUILD,COND=(4,LT),
//             NAME=A68COBJ,L=7,
//             ATTL=OVLY
//LKED.SYSIN DD *
  INCLUDE SYSLMOD(MACH,ZLIB,NIOP)
  INCLUDE OBJ(SYS,SYSR,M1,V1,S1)
    OVERLAY ONE
  INCLUDE OBJ(Y1,HERCULES,N1,T1,Z1,R1,I1,L1,K1,P1,Q1)
    OVERLAY ONE
  INCLUDE OBJ(D2)
    OVERLAY TWO
  INCLUDE OBJ(R2,M2,P2,T2,E2,I2,S2,X2,B2)
    OVERLAY TWO
  INCLUDE OBJ(A3,Z3,P3)
    OVERLAY THREE
  INCLUDE OBJ(M3,V3,Q3,Y3,O3,R3,E3,C3,B3,N3,F3,D3)
    OVERLAY THREE
  INCLUDE OBJ(D4)
    ENTRY $A68INIT
    ALIAS A68C
    NAME A68C3039(R)
//*
//* ###################################################################
//* # Copy initialisation and environment file(s) into SYS dataset    #
//* ###################################################################
//*
//INSTSYS  EXEC PDSUNPK,COND=(4,LT),
//             NAME=SYS,L=8
//*
//* ###################################################################
//* # Copy the runtime system source code (assembler)                 #
//* ###################################################################
//*
//ZLIBSRC  EXEC PDSUNPK,COND=(4,LT),
//             NAME=ZLIBSRC,L=9
//*
//* ###################################################################
//* # Copy the Algol68C Standard Prelude source code (Algol68C)       #
//* ###################################################################
//*
//USERSRC  EXEC PDSUNPK,COND=(4,LT),
//             NAME=USERSRC,L=10
//*
//* ###################################################################
//* # Copy the Algol68C test suite source code (Algol68C)             #
//* ###################################################################
//*
//TESTSRC  EXEC PDSUNPK,COND=(4,LT),
//             NAME=TESTSRC,L=11
//*
//* ###################################################################
//* # Copy the output from the Algol68C test suite                    #
//* ###################################################################
//*
//TESTOUT  EXEC PDSUNPK,MODE=SEQ,COND=(4,LT),
//             NAME=TESTOUT,L=12
//*
//TESTOUTA EXEC PGM=IEBGENER to force RECFM to VBA
//SYSPRINT DD   SYSOUT=A
//SYSIN    DD   DUMMY
//SYSUT1   DD   UNIT=SYSDA,SPACE=(TRK,0),DISP=(NEW,DELETE,DELETE),
//             DCB=(*.ALLOC.ALLOC.VBA)
//SYSUT2   DD   DSN=*.TESTOUT.PDSUNPK.SYSUT2,DISP=(MOD,PASS),
//             DCB=RECFM=VBA
//*
//* ###################################################################
//* # Miscellaneous programs source code (Algol68C)                   #
//* ###################################################################
//*
//MISCSRC  EXEC PDSUNPK,COND=(4,LT),
//             NAME=MISCSRC,L=13
//*
//* ###################################################################
//* # Miscellaneous JCL                                               #
//* ###################################################################
//*
//MISCJCL  EXEC PDSUNPK,COND=(4,LT),
//             NAME=MISCJCL,L=14
//*
//* ###################################################################
//* # Algol68C Language Reference Manual                              #
//* ###################################################################
//*
//LANGREF  EXEC PDSUNPK,COND=(4,LT),
//             NAME=LANGREF,L=15
//*
//* ###################################################################
//* # Compile and link various programs in .MISC.SRC                  #
//* ###################################################################
//*
//XREF     EXEC MISCCL,COND=(4,LT),
//             NAME=XREF,OPTC='NAME "XREF"'        single module xref
//LKED.SYSIN DD *
  INCLUDE SYSLMOD(USER) explicit because of JCL refer-back issues
  NAME XREF(R)
//*
//BIGXREF  EXEC MISCCL,COND=(4,LT),
//             NAME=BIGXREF,OPTC='NAME "BIGXREF"'  multi-module xref
//LKED.SYSIN DD *
  INCLUDE SYSLMOD(BASE) explicit because of JCL refer-back issues
  NAME BIGXREF(R)
//*
//ENVMGE   EXEC MISCCL,COND=(4,LT),
//             NAME=ENVMGE,OPTC='NAME "ENVMGE"'  environment merging
//LKED.SYSIN DD *
  INCLUDE SYSLMOD(USER) explicit because of JCL refer-back issues
  NAME ENVMGE(R)
//*
//* ###################################################################
//* # Wrap up: catalog permanent datasets, delete temporary datasets  #
//* ###################################################################
//*
//EPILOG   EXEC EPILOG,COND=(4,LT)
//
