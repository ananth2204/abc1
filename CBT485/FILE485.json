{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012144000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE485.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE485.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x07'", "DS1TRBAL": "b'XR'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\x85\\x00\\x08\\x03\\x86\\x00\\x02\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04T\\x00\\x02\\x01\\x12\\x18?\\x01\\x12\\x18?\\x15\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf4@@@'", "ispf": {"version": "04.84", "flags": 0, "createdate": "2012-07-01T00:00:00", "modifydate": "2012-07-01T15:00:02", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-484"}, "text": "REGULAR CBT TAPE - VERSION 484    FILE:  485\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT484.FILE485\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,613 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/01/12    15:00:02    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INSTR": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x01\\x02\\x03\\x0f\\x01\\x02\\x03\\x0f!\\x11\\x00/\\x00/\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-01-30T00:00:00", "modifydate": "2002-01-30T21:11:39", "lines": 47, "newlines": 47, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Binyamin Dissen's VTAM APPL lacks setup info\nDate: Wed, 30 Jan 2002 11:39:07 -0800\nFrom: \"Judah Jacobs\" <candojj@hotmail.com>\nTo: sbgolob@attglobal.net\n\nFWIW,\n\nFile 485 comes with no instructions. So here are some:\n\nAdd a member to your VTAMLST called X:\n\nX VBUILD TYPE=APPL\nZ APPL AUTH=VPACE,EAS=1,PARSESS=NO,SESSLIM=YES,ACBNAME=Y\n\nMake the VTAM control blocks active\nV NET,ACT,ID=X\n\nDOC 2:\n\nAssembly instructions. You may need the SYSLIB for input to point\nat SYS1.MODGEN and SYS1.MACLIB depending on where your VTAM\nmacros are.  There are no special link edit (bind) parameters. If\nyou want to use TSO TEST, then make sure you code parameter TEST\nin the parm of both the ASM and Linkedit.\n\nDOC 3:\nBuild a USER.PROCLIB member. Here's mine:\n//TESTVTM2 PROC\n//STEP1 EXEC PGM=TESTVTM2,TIME=1440,REGION=0M,PARM='Y       '\n//STEPLIB DD DISP=SHR,DSN=MY.SYSLMOD.LIB\n\nAt the console enter S TESTVTM2\n\nIf you get an abend code, the abendcode matches a CHKERR spot in\nthe code.  Set a breakpoint in the TSO TEST (from Ready prompt)\nat the offending macro.  Usually you will get an abend U006\nbecause the ACBNAME is the main issue. If you get a message that\nsays  @TESTVTM2 - Application Y is up, go to a 3270 session and\nenter l y. This will send a message to the console TERMINAL\nxxxxxx  SIGNON ACCEPTED, and you'll get a message at the terminal\nlike Welcome to the TESTVTM2 application Y. If you clear the\nscreen you'll get a message YOU CANT CLEAR THIS SCREEN. If you\ntype LOGOFF at the 3270, the application will log you off and a\nconsole message will be sent. You can then CANCEL TESTVTM2.\n\ninfo candojj@hotmail.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE01": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x12\\x18?\\x01\\x12\\x18?\\x14R\\x00)\\x00)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-07-01T00:00:00", "modifydate": "2012-07-01T14:52:27", "lines": 41, "newlines": 41, "modlines": 0, "user": "SBGOLOB"}, "text": "TESTVTM2 -- A Sample Complex Exit Driven VTAM Application\n=========================================================\n\nThis is a special version of TESTVTM2 adapted to the non ACF\nVTAM Level 2 that's available with MVS 3.8j. It supports most\nterminal types that can occur on MVS 3.8j when running under\nHercules:\n\n - local non SNA 3270\n - local SNA 3270 attached through 3791L\n - remote SNA 3270 attached through 3705 NCP\n - local SNA TTY emulated as 3767 attached through 3791L\n - remote SNA TTY emulated as 3767 attached through 3705 NCP\n\nThis version is a rework of the original TESTVTM2 port to MVS 3.8J\ndone by Greg Price in 2003. Device support relies on the specific\nbehavior of VTAM level 2 and may be incompatible with later ACF/VTAM\nversions. It should be noted that 3270 terminals get queried\nunconditionally. So please use tn3270 emulations supporting\nWSF QUERY only (don't know if others do exist at all) and also\nuse real 3270 tubes supporting WSF QUERY only.\n\nJuergen Winkelmann (JW), ETH Zuerich, June 2012\nwinkelmann@id.ethz.ch\n\nCredits: Binyamin Dissen - original version\n         Greg Price      - first non ACF (MVS 3.8j) port (GP@P6)\n         Greg Price      - I've stolen all of the 3270 query\n                           structured field analysis and\n                           3270 buffer address conversion\n                           logic from the brilliant 3270\n                           datastream article and sample\n                           program on his website\n\nInstallation\n============\n\n1. Upload and receive TESTVTM2.XMI to a PDS of your choice (LRECL 80).\n\n2. Follow the instructions in member $$README.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$README": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x18\\x1f\\x01\\x12\\x18\\x1f\\x18\\x00\\x00\\xc5\\x00\\xc5\\x00\\x00\\xd1\\xe4\\xc5\\xd9\\xc7\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-06-29T00:00:00", "modifydate": "2012-06-29T18:00:00", "lines": 197, "newlines": 197, "modlines": 0, "user": "JUERGEN"}, "text": "TESTVTM2 -- A Sample Complex Exit Driven VTAM Application\n=========================================================\n\nThis is a special version of TESTVTM2 adapted to the non ACF\nVTAM Level 2 that's available with MVS 3.8j. It supports most\nterminal types that can occur on MVS 3.8j when running under\nHercules:\n\n - local non SNA 3270\n - local SNA 3270 attached through 3791L\n - remote SNA 3270 attached through 3705 NCP\n - local SNA TTY emulated as 3767 attached through 3791L\n - remote SNA TTY emulated as 3767 attached through 3705 NCP\n\nThis version is a rework of the original TESTVTM2 port to MVS 3.8J\ndone by Greg Price in 2003. Device support relies on the specific\nbehavior of VTAM level 2 and may be incompatible with later ACF/VTAM\nversions. It should be noted that 3270 terminals get queried\nunconditionally. So please use tn3270 emulations supporting\nWSF QUERY only (don't know if others do exist at all) and also\nuse real 3270 tubes supporting WSF QUERY only.\n\nJuergen Winkelmann (JW), ETH Zuerich, June 2012\nwinkelmann@id.ethz.ch\n\nCredits: Binyamin Dissen - original version\n         Greg Price      - first non ACF (MVS 3.8j) port (GP@P6)\n         Greg Price      - I've stolen all of the 3270 query\n                           structured field analysis and\n                           3270 buffer address conversion\n                           logic from the brilliant 3270\n                           datastream article and sample\n                           program on his website\n\nInstallation\n============\n\n1. Upload and receive TESTVTM2.XMI to a PDS of your choice (LRECL 80).\n\n2. If necessary change dataset names (marked with <--) in job TESTVTM$.\n\n3. Submit job TESTVTM$. RC=0 is expected for both steps.\n\n4. If you placed the TESTVTM2 module in linklist and are using DYNABLDL,\n   refresh it (run DBSTOP, then DBSTART).\n\n5. Create an application major node member X in your VTAMLST library\n   containing one line:\n\n   Y        APPL AUTH=NVPACE,BUFFACT=10\n\n   (replace X with a valid member name and Y with the desired VTAM\n   application name).\n\n6. Create member TESTVTM2 in a system proclib as follows:\n\n   //TESTVTM2 PROC\n   //STEP1   EXEC PGM=TESTVTM2,REGION=4096K,TIME=1440,PARM='Y       '\n   //SNAPFILE DD  SYSOUT=X,HOLD=YES\n   //SYSUDUMP DD  SYSOUT=X,HOLD=YES\n\n   (replace Y with the application name chosen in step 5).\n\n7. Enter\n\n   V NET,ACT,ID=X\n\n   at the MVS console (replace X with the membername chosen in step 5).\n   This command must be issued after each startup of VTAM unless the\n   membername X is added to the ATCCONxx list.\n\n8. Enter\n\n   S TESTVTM2\n\n   at the MVS console. Message\n\n   +TESTVTM2 - APPLICATION TESTVTM2 IS UP\n\n   will be issued to indicate successful startup.\n\nUsage\n=====\n\nTESTVTM2 is a program to demonstrate asynchronous terminal handling\nusing VTAM exits. It implements a terminal dialog providing a few sample\ncommands. These can easily be changed to create real applications.\nAs is, a maximum number of 3 terminals can connect to TESTVTM2 at the\nsame time. This number can be changed by setting the NUMCIDS EQUate in\nline 2325 to the desired value and rerunning job TESTVTM$.\n\nThere are several ways to connect a terminal to TESTVTM2:\n\na) Enter V NET,INACT,ID=luname at the MVS console (luname is the LU name\n   of the terminal). Once the terminal is inactive, enter\n\n   V NET,ACT,ID=LUNAME,LOGON=Y\n\n   (replace Y with the application name chosen in step 5).\n\nb) Depending on the setup of your logon interpret table (LOGTAB), USS\n   table, network solicitor and the terminal type it may be possible to\n   self initiate the connection from the terminal by entering a BAL or\n   or PL/1 type logon message at the terminal, like for example:\n\n   LOGON APPLID=Y or\n   LOGON APPLID(Y)\n\n   On SNA connections (3705, 3791L) \"Stickman\" mode must be supported by\n   the terminal emulation and the message must be sent on the SSCP-LU\n   session using the SYSRQ key. Sadly, most tn3270 applications don't\n   support this. If your tn3270 application doesn't support this, you\n   can use option a) only, except you use a network solicitor to pass\n   the terminal to the application.\n\nOnce the connection is established the terminal will display\n\n- a logo and a one line input field into which a command can be entered,\n  if it is a 3270 device.\n\n- a command prompt if it is a linemode (tty) type device.\n\nThe \"command interpreter\" is very basic: Just CLC instructions ;-)\nSo, commands need to be entered _EXACTLY_ as described here (case isn't\nrelevant, i.e. any combination of upper/lower case characters is\nrecognized). The following commands are implemented:\n\n------------------------------------------------------------------------\n\nLOGOFF\n\ndisconnect the terminal from the TESTVTM2 application.\n\n------------------------------------------------------------------------\n\nSHUTDOWN\n\nterminate the TESTVTM2 application.\n\n------------------------------------------------------------------------\n\nSHOWTERM or SHOW TERM\n\ndisplay your terminals LU name and screen size (note: linemode terminals\nwill always display as a 000 x 080 \"screen\").\n\n------------------------------------------------------------------------\n\nSHOWALL or SHOW ALL\n\ndisplay the LU names of all terminals logged on currently.\n\n------------------------------------------------------------------------\n\nSHOW APP\n\ndisplay the TESTVTM2 application name (i.e. the value Y in the above\nAPPL statement).\n\n------------------------------------------------------------------------\n\nSTATS\n\ndisplay RPL usage statistics.\n\n------------------------------------------------------------------------\n\nSTATUS applname\n\ndisplay the status of VTAM application applname (enter for example\nSTATUS TSO).\n\n------------------------------------------------------------------------\n\nSEND luname text\n\nsend text to terminal luname\n\n------------------------------------------------------------------------\n\nPROMPT2\n\njust shows a prompt message\n\n------------------------------------------------------------------------\n\nSENDF2\n\nrequest a snap dump of the terminal buffer (works with\nlocal non SNA 3270 terminals only)\n\n------------------------------------------------------------------------\n\nOn 3270 terminals CLEAR and PA1 can be pressed to produce messages\nindicating that these keys were pressed.\n\n------------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CHANGE": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x18\\x1f\\x01\\x12\\x18\\x1f\\x18\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xd1\\xe4\\xc5\\xd9\\xc7\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-06-29T00:00:00", "modifydate": "2012-06-29T18:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "JUERGEN"}, "text": "Change Log\n==========\n\n2000/11/01 - Original version for ACF/VTAM systems    Binyamin Dissen\n             published on CBT file 485\n\n2003/02/11 - Minimal port to non ACF VTAM level 2     Greg Price\n             published on www.prycroft6.com.au\n\n2012/06/29 - Completion of VTAM level 2 port          Juergen Winkelmann\n             and additional terminal support:\n             o remove CLSDST calls from timer loop\n               (this obviously isn't supported by\n               VTAM level 2) and create a seperate\n               loop in mainline to handle these.\n             o fix LOGON exit plist incompatibility.\n             o reintroduce INQUIRE at logon to\n               distinguish terminal types.\n             o issue WSF QUERY to 3270 terminals.\n             o change message handling to support\n               3270 and tty datastreams.\n             o special appearance of Volker's cat\n               on all 3270 screens.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE485": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04T\\x00V\\x01\\x12\\x18?\\x01\\x12\\x18?\\x14Y\\x00\\x15\\x00\\x15\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf4@@@'", "ispf": {"version": "04.84", "flags": 0, "createdate": "2012-07-01T00:00:00", "modifydate": "2012-07-01T14:59:56", "lines": 21, "newlines": 21, "modlines": 0, "user": "CBT-484"}, "text": "//***FILE 485 is from Binyamin Dissen and contains a VTAM           *   FILE 485\n//*           application that he wrote some years ago, but         *   FILE 485\n//*           which may be useful to the public, both as a          *   FILE 485\n//*           coding example, and to actually run.                  *   FILE 485\n//*                                                                 *   FILE 485\n//*           email:  bdissen@netvision.net.il                      *   FILE 485\n//*                   bdissen@dissensoftware.com                    *   FILE 485\n//*                                                                 *   FILE 485\n//*           Some setup instructions have been added to this       *   FILE 485\n//*           file from Judah Jacobs.                               *   FILE 485\n//*                                                                 *   FILE 485\n//*           email:  Judah Jacobs <evalues@pacbell.net>            *   FILE 485\n//*                   candojj@hotmail.com                           *   FILE 485\n//*                                                                 *   FILE 485\n//*       Added to this file is a version (member name TESTVT38)    *   FILE 485\n//*       of TESTVTM2 from Juergen Winkelmann that is fixed to      *   FILE 485\n//*       work on MVS 3.8.  All members with ISPF userid JUERGEN    *   FILE 485\n//*       refer to this implementation of the TESTVTM2 program.     *   FILE 485\n//*                                                                 *   FILE 485\n//*           email:  winkelmann@id.ethz.ch                         *   FILE 485\n//*                                                                 *   FILE 485\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTVTM$": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x18\\x1f\\x01\\x12\\x18\\x1f\\x18\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd1\\xe4\\xc5\\xd9\\xc7\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-06-29T00:00:00", "modifydate": "2012-06-29T18:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "JUERGEN"}, "text": "//HERC01T  JOB ,HERC01,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//             NOTIFY=HERC01,REGION=3072K,COND=(0,NE)\n//********************************************************************\n//*                                                                  *\n//*  Name: SYS2.CNTL(TESTVTM$)                                       *\n//*                                                                  *\n//*  Type: Assembly of TESTVTM2 Module                               *\n//*                                                                  *\n//*  Desc: Sample Complex Exit Driven VTAM Application               *\n//*                                                                  *\n//********************************************************************\n//ASM1    EXEC PGM=IFOX00,\n//   PARM='TERM,NODECK,OBJECT,XREF(SHORT),RENT'\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.SMPMTS,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(10,2))\n//SYSGO    DD  DSN=&&OBJSET,DISP=(NEW,PASS),UNIT=VIO,\n//             SPACE=(CYL,(1,1)),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=800)\n//SYSIN    DD  DSN=SYS2.ASM(TESTVTM2),DISP=SHR          <----+\n//LKED    EXEC PGM=IEWL,PARM='LIST,MAP,NCAL,LET'             |\n//SYSPRINT DD  SYSOUT=*                                      +-- Change\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)                |\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))                    |\n//SYSLMOD  DD  DSN=SYS2.LINKLIB(TESTVTM2),DISP=SHR      <----+\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTVTM2": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x000o\\x01\\x000o\\x14P\\x07$\\x07$\\x00\\x00\\xc2\\xc4\\xc9\\xe2\\xe2\\xc5\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-11-01T00:00:00", "modifydate": "2000-11-01T14:50:00", "lines": 1828, "newlines": 1828, "modlines": 0, "user": "BDISSEN"}, "text": "TESTVTM2 TITLE '-  C O M P L E X   V T A M   A P P L I C A T I O N'\n         MACRO\n&LABEL   CHKERR &TYPE=CHECK,&SAVE=YES\n.*\n         GBLA  &DIECTR\n         LCLC   &C,&C2\n.*\n&DIECTR  SETA  &DIECTR+1\n&C       SETC   'ABN'.'&SYSNDX'\n&C2      SETC   'ABNDU'.'&DIECTR'\n.*\n         AIF   (T'&LABEL EQ 'O').SKIPLAB\n&LABEL   DS    0H\n.SKIPLAB ANOP  ,\n.*\n         AIF   ('&TYPE' EQ 'ABORT').ABORT\n.*\n         LTR   R15,R15             DID OPERATION WORK\n         BZ    &C                    YES, SKIP THE ABEND\n         SPACE 1\n.ABORT   ANOP  ,\n         AIF   ('&SAVE' EQ 'NO').NOSAVE\n         STM   R15,R1,REGSAVE\n         SPACE 1\n.NOSAVE  ANOP  ,\n&C2      L     R1,=A(IABNDWTO)\n         MVC   WORKAREA(LABNDWTO),0(R1)\n         MVC   WORKAREA+LABNDWTO-4-2,=CL2'&DIECTR'\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         ABEND &DIECTR,DUMP\n         SPACE 1\n&C       DS    0H\n.*\n         MEND\n         EJECT ,\n         MACRO\n&LABEL   SETINSRT &TYPE=WTO,&ERROR=\n.*\n         LCLC  &C\n.*\n&C       SETC  '4'\n         AIF   ('&TYPE' EQ 'WTO').START\n&C       SETC  'LSBASTUF'\n.*\n.START   ANOP\n&LABEL   L     R1,=A(QUESTTAB)        -> TRT TABLE\n         TRT   WORKAREA+&C.(WORKLEN-&C),0(1)\n.*\n         AIF   (T'&ERROR EQ 'O').NOERROR\n.*\n         BZ    &ERROR\n         AGO   .MEND\n.*\n.NOERROR ANOP  ,\n         BNZ   *+4+4                  ? FOUND\n         LA    R1,0                   ? NOT FOUND\n.*\n.MEND    MEND\n         EJECT ,\n         MACRO\n&LABEL   GETRPL &REG\n.*\n&LABEL   LA    R1,#WORK               -> #WORK\n         L     R15,=A(GETRPL)         LOAD GETRPL ROUTINE ADDRESS\n         BALR  R14,R15                GET RPL (IN REG1)\n.*\n         AIF   (T'&REG EQ 'O').MEND\n.*\n         LR    &REG(1),R1             COPY RPL ADDRESS\n.*\n.MEND    MEND\n         SPACE 3\n         MACRO\n&LABEL   FREERPL &RPL=\n.*\n&LABEL   LA    R0,4                   OFFSET TO PREFIX\n         SR    &RPL(1),R0             -> PREFIX\n         L     R15,RPLQUEUE           -> TOP OF QUEUE\n         ST    R15,0(,&RPL(1))        MAKE IT NEXT\n         CS    R15,&RPL(1),RPLQUEUE   ADD TO FREE QUEUE\n         BNE   *-4-4                    TRY AGAIN\n         SR    &RPL(1),&RPL(1)        RPL NO LONGER AVAILABLE\n.*\n         MEND\n         EJECT ,\n         MACRO\n&LABEL   SCHEDCLS &ARG=\n.*\n         LCLC  &C\n&C       SETC  'SCH'.'&SYSNDX'\n.*\n&LABEL   LA    R14,PENDCLOS\n         LA    R15,NUMCLOSE\n         SPACE 1\n&C       LA    R0,0\n         CS    R0,&ARG(1),CLOSECID-CLOSENTY(R14)\n         BE    &C.B\n         SPACE 1\n         LA    R14,CLOSLNTH(,R14)\n         BCT   R15,&C\n         SPACE 1\n         CHKERR TYPE=ABORT\n         SPACE 1\n&C.B     DS    0H\n.*\n         MEND\n         EJECT ,\nTESTVTM2 CSECT\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         SAVE  (14,12),,*\n         SPACE 1\n         LR    R12,R15\n         USING TESTVTM2,R12\n         SPACE 1\n         L     R11,0(,R1)\n         LA    R11,1(,R11)         -> APPLID\n         SPACE 1\n         GETMAIN RU,LV=#AMT,SP=8\n         SPACE 1\n         LA    R2,0(,R1)\n         LA    R3,#AMT\n         XR    R14,R14\n         XR    R15,R15\n         MVCL  R2,R14\n         SPACE 1\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING #WORK,R13\n         SPACE 1\n         LA    R3,ACBLENTH\n         SHOWCB AM=VTAM,FIELDS=(ACBLEN,RPLLEN,NIBLEN),AREA=(R3),       X\n               LENGTH=12,MF=(G,WORKAREA)\n         CHKERR ,\n         SPACE 1\n         GENCB BLK=EXLST,AM=VTAM,LOGON=LOGEXIT,RELREQ=REQEXIT,         X\n               LOSTERM=LOSTEXIT,                                       X\n               MF=(G,WORKAREA)     BUILD AN EXLST\n         CHKERR ,\n         LR    R3,R1               SAVE ADDRESS\n         SPACE 1\n         L     R9,ACBLENTH         FETCH ACB LENGTH\n         LA    R9,4(,R9)           PLUS ANCHOR WORD\n         GETMAIN RU,LV=(R9),SP=9   GET ACB IMAGE\n         ST    R13,0(,R1)          SAVE SAVE AREA ADDRESS IN ANCHOR\n         STM   R0,R1,ACBADDR       SAVE ACB REGS\n         SPACE 1\n         LA    R8,4(,R1)\n         USING IFGACB,R8\n         SPACE 1\n         GENCB BLK=ACB,AM=VTAM,WAREA=(R8),LENGTH=(R9),APPLID=(R11),    X\n               MACRF=LOGON,EXLST=(R3),MF=(G,WORKAREA)                  X\n                                   COMPLETE THE ACB\n         CHKERR ,\n         SPACE 1\n         GENCB BLK=NIB,AM=VTAM,MODE=RECORD,MF=(G,WORKAREA),            X\n               COPIES=NUMCIDS+1    GENERATE NESCESSARY NIBS\n         CHKERR ,\n         ST    R1,NIBADDR\n         SPACE 1\n         GENCB BLK=RPL,AM=VTAM,ACB=(R8),COPIES=3,MF=(G,WORKAREA)       X\n                                        GENERATE MODEL + RECEIVE RPLS\n         CHKERR ,\n         SPACE 1\n         ST    R1,MODELRPL\n         A     R1,RPLLENTH\n         ST    R1,RECVRPL1\n         A     R1,RPLLENTH\n         ST    R1,RECVRPL2\n         SPACE 1\n         MVI   OPENLIST,X'80'\n         OPEN  ((R8)),MF=(E,OPENLIST)  ATTEMPT TO OPEN ACB\n         CHKERR ,\n         SPACE 1\n         XR    R1,R1                   CLEAR\n         IC    R1,0(,R11)              APPLID LENGTH\n         BCTR  R1,0                    DECREMENT FOR EX\n         MVC   APPLID,=8C' '           BLANK\n         MVC   APPLID(*-*),1(R11)      MOVE MODEL\n         EX    R1,*-6                  COPY APPLID\n         SPACE 1\n         MVC   WORKAREA(LSTRTWTO),ISTRTWTO\n         SETINSRT ,\n         MVC   0(8,R1),APPLID          INSERT APPLID\n         WTO   MF=(E,WORKAREA)         APPLICATION ACTIVE\n         SPACE 1\n         GETRPL ,                      AQUIRE AN RPL\n         L     R0,=A(FREPLXIT)\n         SETLOGON RPL=(1),OPTCD=(ASY,START),EXIT=(R0)\n         CHKERR ,\n         SPACE 1\nALLQUAL  DS    0H\n         L     R2,=A(RECVEXIT)\n         L     R1,RECVRPL1\n         RECEIVE RPL=(1),RTYPE=(DFSYN,NDFASY,NRESP),                   X\n               OPTCD=(ASY,ANY,TRUNC,CA,Q),AREA=CARD1,AREALEN=80,       X\n               BRACKET=(NBB,NEB),EXIT=(R2)\n         CHKERR ,\n         SPACE 1\n         L     R1,RECVRPL2\n         RECEIVE RPL=(1),RTYPE=(DFSYN,NDFASY,NRESP),                   X\n               OPTCD=(ASY,ANY,TRUNC,CA,Q),AREA=CARD2,AREALEN=80,       X\n               BRACKET=(NBB,NEB),EXIT=(R2)\n         CHKERR ,\n         SPACE 1\n         MVC   OTIMRCOD(LTIMRCOD),ITIMRCOD\n         STIMER REAL,OTIMRCOD,BINTVL==F'300'\n         SPACE 1\n         WAIT  ECB=STOPECB\n         SPACE 1\n         WTO   'TESTVTM2 - APPLICATION IS SHUTING DOWN',               X\n               ROUTCDE=11,DESC=7\n         SPACE 1\n         GETRPL R6\n         SETLOGON RPL=(R6),OPTCD=(SYN,QUIESCE)\n         CHKERR ,\n         SPACE 1\n         STIMER WAIT,BINTVL==F'300'   WAIT 3 SECONDS\n         SPACE 1\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R5,NUMCIDS\nCLSDST   DS    0H\n         ICM   R2,B'1111',CIDCID      FETCH CID\n         BZ    ECLSDST                  NOT ACTIVE\n         SPACE 1\n         CLSDST RPL=(R6),OPTCD=(SYN,RELEASE),ARG=(R2)                  X\n                                      RELEASE THE REMINAL\n         CHKERR ,\n         SPACE 1\n         MVC   WORKAREA(LCLOSWTO),ICLOSWTO\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL ID\n         WTO   MF=(E,WORKAREA)        REPORT ON LOGOFF\n         SPACE 1\nECLSDST  DS    0H\n         LA    R4,CIDENTRY+CIDLENTH   -> NEXT CID\n         BCT   R5,CLSDST              AND CLOSE IT\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         CLOSE ((R8)),MF=(E,OPENLIST)\n         CHKERR ,\n         SPACE 1\n         MVC   WORKAREA(LDONEWTO),IDONEWTO\n         SPACE 1\n         SETINSRT ,\n         L     R15,RPLTOTAL\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         SETINSRT ,\n         L     R15,RPLREQST\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         WTO   MF=(E,WORKAREA)        REPORT ON LOGOFF\n         SPACE 1\n         LM    R0,R1,ACBADDR\n         FREEMAIN RU,LV=(0),A=(1),SP=9  FREE THE ACB\n         SPACE 1\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=#AMT,A=(1),SP=8\n         SPACE 1\n         RETURN (14,12),RC=0\n         SPACE 2\n         LTORG ,\n         SPACE 2\nICLOSWTO WTO   'TESTVTM2 - LOGGED OFF ???????? FOR SHUTDOWN',          X\n               ROUTCDE=11,DESC=7,MF=L\nLCLOSWTO EQU   *-ICLOSWTO\n         SPACE 2\nIDONEWTO WTO   'TESTVTM2 - APPLICATION COMPLETE - RPL STATS: COUNT=???,*\n                REQUESTS=???',ROUTCDE=11,DESC=7,MF=L\nLDONEWTO EQU   *-IDONEWTO\n         SPACE 2\nISTRTWTO WTO   'TESTVTM2 - APPLICATION ???????? IS UP',                X\n               ROUTCDE=11,DESC=7,MF=L\nLSTRTWTO EQU   *-ISTRTWTO\n         SPACE 2\n         DROP  ,\n         EJECT ,\nITIMRCOD DS    0H\n         STM   R14,R12,12(R13)\n         SPACE 1\n         LR    R1,R15                 CURRENT ADDRESS\n         LA    R0,OTIMRCOD-#WORK      OFFSET TO #WORK\n         SR    R1,R0                  R1 -> #WORK\n         L     R15,ITIMRCD2-ITIMRCOD(,R15)  -> READ ONLY SECTION\n         BR    R15                    GO DO THE TIMER\n         SPACE 1\nITIMRCD2 DC    A(TIMRCODE)            READ ONLY SECTION ADDRESS\n         SPACE 1\nLTIMRCOD EQU   *-ITIMRCOD             LENGTH OF PREFIX\n         SPACE 3\nTIMRCODE DS    0H\n         LR    R12,R15\n         USING TIMRCODE,R12\n         SPACE 1\n         LR    R11,R1\n         USING #WORK,R11\n         SPACE 1\n         LA    R1,SAVE3               GET A SAVE AREA\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         SPACE 1\n         LA    R10,PENDCLOS           -> PENDING CLSDST TABLE\n         USING CLOSENTY,R10\n         LA    R9,NUMCLOSE\n         SPACE 1\nTIMRLOOP DS    0H\n         ICM   R7,B'1111',CLOSECID    ENTRY ACTIVE?\n         BZ    ETIMRLOP                 NO, IGNORE IT\n         SPACE 1\n         TS    CLOSFLAG               ALREADY SEEN\n         BZ    ETIMRLOP                 NOPE, ALLOW FULL TIME\n         SPACE 1\n         XC    CLOSENTY(CLOSLNTH),CLOSENTY\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE REMINAL\n         CHKERR ,\n         SPACE 1\nETIMRLOP DS    0H\n         LA    R10,CLOSENTY+CLOSLNTH  -> NEXT CLSDST ENTRY\n         BCT   R9,TIMRLOOP            AND CHECK IT\n         SPACE 1\n         STIMER REAL,OTIMRCOD,BINTVL==F'300'  RESET INTERVAL\n         SPACE 1\n         L     R13,4(,R13)            -> PREV SAVE\n         RETURN (14,12),RC=0          AND GO AWAY\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nLOGEXIT  DS    0H\n         LR    R12,R15\n         USING LOGEXIT,R12\n         SPACE 1\n         LR    R11,R1                 SAVE PARM ADDRESS\n         SPACE 1\n         L     R8,0(,R11)             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS\n         BO    IGNORE                   YES, IGNORE THE LOGON\n         SPACE 1\n         L     R3,4(,R11)             -> TERMINAL NAME\n         SPACE 1\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R0,NUMCIDS\nCHKDUP   DS    0H\n         CLC   CIDNAME,0(R3)          DUPLICATE TERMINAL?\n         BE    ABND$DUP                 YES, ERROR\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> NEXT SLOT\n         BCT   R0,CHKDUP              AND CHECK IT\n         SPACE 1\n         LA    R4,CIDLIST\n         L     R7,NIBADDR\n         LA    R0,NUMCIDS\nFINDSLOT DS    0H\n         OC    CIDCID,CIDCID          FREE CID?\n         BZ    GOTSLOT                  YES, GOT THE SPOT\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> SLOT\n         A     R7,NIBLENTH            -> NEXT NIB\n         BCT   R0,FINDSLOT            AND CHECK IT\n         SPACE 1\n         B     FAILIT                 LOGON NOT ACCEPTED\n         SPACE 1\nABND$DUP DS    0H\n         CHKERR TYPE=ABORT,SAVE=NO\n         SPACE 1\nGOTSLOT  DS    0H\n         MVC   CIDCID,20(R11)         INSERT CID IN TABLE\n         MVC   CIDNAME,0(R3)                 NODE NAME\n         SPACE 1\n         MODCB NIB=(R7),NAME=(*,CIDNAME),USERFLD=(R4),AM=VTAM,         X\n               MF=(G,WORKAREA)        COMPLETE THE NIB\n         CHKERR ,\n         SPACE 1\n         LA    R3,RECVAREA\n         L     R5,16(,R11)            -> READ-ONLY RPL\n         SHOWCB AM=VTAM,RPL=(R5),FIELDS=(AREA),                        X\n               AREA=(R3),LENGTH=L'RECVAREA,MF=(G,WORKAREA)\n         CHKERR ,\n         SPACE 1\n         L     R3,RECVAREA\n         CLC   =X'810601',0(R3)       IS IT A CINIT RU?\n         BNE   NOTCINIT                 NO, DO INQUIRE\n         SPACE 1\n         USING ISTDBIND-12,R3\n         SPACE 1\n         MVC   CIDBIND(24),ISTDBIND   COPY BIND DATA\n         SPACE 1\n         LA    R1,BINSPRIR            -> DEFAULTS\n         SPACE 1\n         CLI   BINPRESZ,BINPSZRC      ALTERNATES?\n         BNE   *+4+4                    NOPE\n         LA    R1,BINSALTR              YES, USE THEM\n         SPACE 1\n         XR    R0,R0                  CLEAR\n         IC    R0,0(,R1)              FETCH ROWS\n         STH   R0,CIDROWS             SAVE VALUE\n         IC    R0,1(,R1)              FETCH COLUMNS\n         STH   R0,CIDCOLS             SAVE VALUE\n         SPACE 1\n         DROP  R3\n         SPACE 1\n         B     OPENDEST\n         SPACE 1\nNOTCINIT DS    0H\n         WTO   'TESTVTM2 - NOTCINIT CODE SECTION ENTERED',             X\n               ROUTCDE=(2,11),DESC=(2,7)\n         SPACE 1\n         GETRPL ,\n         L     R0,CIDCID              FETCH CID VALUE\n         INQUIRE RPL=(1),ARG=(R0),AREA=CIDBIND,AREALEN=6*8,            X\n               OPTCD=(ASY,SESSPARM),EXIT=BINDEXIT\n         CHKERR ,\n         SPACE 1\nOPENDEST DS    0H\n         GETRPL ,\n         OPNDST RPL=(1),ACB=(R8),NIB=(R7),EXIT=GOODMXIT,               X\n               OPTCD=(ASY,ACCEPT,SPEC,NQ)   COMPLETE THE SESSION\n         CHKERR ,\n         SPACE 1\n         MVC   WORKAREA(LSIGNWTO),ISIGNWTO\n         SPACE 1\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL NAME\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         B     LOGNEND\n         SPACE 2\nFAILIT   DS    0H\n         GETRPL ,\n         OPNDST RPL=(1),ACB=(R8),NIB=(R7),EXIT=FAILEXIT,               X\n               OPTCD=(ASY,ACCEPT,SPEC,NQ)   GO TO TERMINAL\n         CHKERR ,\n         SPACE 1\n         B     LOGNEND\n         SPACE 2\nIGNORE   DS    0H\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),EXIT=(R0)\n         CHKERR ,\n         SPACE 2\nLOGNEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nISIGNWTO WTO   'TESTVTM2 - TERMINAL ???????? SIGNON ACCEPTED',         X\n               ROUTCDE=11,DESC=7,MF=L\nLSIGNWTO EQU   *-ISIGNWTO\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nGOODMXIT DS    0H\n         LR    R12,R15\n         USING GOODMXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    GOODMEND                 YES, ALL DONE\n         SPACE 1\n         CHKERR ,                     FAIL ON OPNDST ERROR\n         SPACE 1\n         MVC   WORKAREA(LFIRSTMS),FIRSTMSG\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),APPLID         INSERT APPLID\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               AREA=WORKAREA,RECLEN=LFIRSTMS,RESPOND=(NEX,FME,NRRN),   X\n               BRACKET=(BB,NEB),POST=SCHED,EXIT=(R0),CHNGDIR=(CMD)     X\n                                      SEND GOOD MORNING MESSAGE\n         CHKERR ,\n         SPACE 1\nGOODMEND DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\nFIRSTMSG DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'WELCOME TO THE TESTVTM2 APPLICATION ????????'\nLFIRSTMS EQU   *-FIRSTMSG\n         SPACE 2\n         DROP  ,\n         EJECT ,\nSTATEXIT DS    0H\n         LR    R12,R15\n         USING STATEXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    STATEND                  YES, ALL DONE\n         SPACE 1\n         STM   R15,R1,REGSAVE         SAVE STATUS\n         SPACE 1\n         LA    R15,4                  RPL PREFIX LENGTH\n         LCR   R15,R15\n         L     R4,0(R15,R6)           FETCH PREFIX VALUE\n         USING CIDENTRY,R4\n         SPACE 1\n         LA    R3,DWORD\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(FDBK),LENGTH=4,               X\n               AREA=(R3),MF=(G,WORKAREA)   GET RPL FEEDBACK\n         CHKERR ,\n         L     R3,DWORD               FETCH FEEDBACK VALUE\n         SPACE 1\n         ICM   R15,B'1111',REGSAVE    RPL GO OK?\n         BZ    GIVESTAT                 YES, GIVE STATUS\n         SPACE 1\n         LA    R3,DWORD\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(RTNCD,FDBK2),                 X\n               AREA=(R3),LENGTH=12,MF=(G,WORKAREA)\n         CHKERR ,\n         SPACE 1\n         CLI   DWORD+3,X'14'          RTCND=14\n         BNE   FAILSTAT                 NO, NOT EXPECTED ERROR\n         CLI   DWORD+7,X'4C'          FDBK2=4C?\n         BE    GIVSTAT0                 UNKNOWN/INACTIVE LU\n         CLI   DWORD+7,X'53'          FDBK2=53?\n         BE    GIVSTAT0                 UNKNOWN/INACTIVE LU\n         SPACE 1\nFAILSTAT DS    0H\n         CHKERR TYPE=ABORT,SAVE=NO    FAIL ON INQUIRE ERROR\n         SPACE 1\nGIVSTAT0 DS    0H\n         LA    R3,36                  INVALID RETURN CODE\n         SPACE 1\nGIVESTAT DS    0H\n         SLL   R3,1                   *2\n         LA    R3,STATUSMS(R3)        -> TABLE ENTRY\n         LM    R2,R3,0(R3)            FETCH SKELETON ADDR, LENGTH\n         MVC   WORKAREA(*-*),0(R2)    MOVE MODEL\n         EX    R3,*-6                 COPY SKELETON\n         SPACE 1\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),CIDAPPLN       INSERT APPLID\n         XC    CIDAPPLN,CIDAPPLN      CLEAR IT\n         SPACE 1\n         L     R0,=A(FREPLXIT)\n         L     R2,CIDCID\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),ARG=(R2),   X\n               AREA=WORKAREA,RECLEN=(R3),RESPOND=(NEX,FME,NRRN),       X\n               BRACKET=(NBB,NEB),POST=SCHED,EXIT=(R0),CHNGDIR=(CMD)    X\n                                      GIVE APPLICATION STATUS\n         CHKERR ,\n         SPACE 1\nSTATEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\nSTATUSMS DC    0F'0'\n         DC    A(STATUSM1,LSTATSM1)   RC = 0\n         DC    A(STATUSM2,LSTATSM2)        4\n         DC    A(STATUSM3,LSTATSM3)        8\n         DC    A(STATUSM4,LSTATSM4)        12\n         DC    A(STATUSM5,LSTATSM5)        16\n         DC    2X'00666666'                20\n         DC    2X'00666666'                24\n         DC    2X'00666666'                28\n         DC    2X'00666666'                32\n         DC    A(STATUSM6,LSTATSM6)        36\n         SPACE 1\nSTATUSM1 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'APPLICATION ???????? IS ACTIVE'\nLSTATSM1 EQU   *-STATUSM1\n         SPACE 2\nSTATUSM2 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'APPLICATION ???????? IS NOT ACTIVE'\nLSTATSM2 EQU   *-STATUSM2\n         SPACE 2\nSTATUSM3 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'APPLICATION ???????? ACTIVE, MACRF=NLOGON'\nLSTATSM3 EQU   *-STATUSM3\n         SPACE 2\nSTATUSM4 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'APPLICATION ???????? ACTIVE, LOGONS ARE STOPPED'\nLSTATSM4 EQU   *-STATUSM4\n         SPACE 2\nSTATUSM5 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'APPLICATION ???????? ACTIVE, LOGONS QUIESCED'\nLSTATSM5 EQU   *-STATUSM5\n         SPACE 2\nSTATUSM6 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'APPLICATION ???????? NOT DEFINED TO VTAM'\nLSTATSM6 EQU   *-STATUSM6\n         SPACE 2\n         DROP  ,\n         EJECT ,\nBINDEXIT DS    0H\n         LR    R12,R15\n         USING BINDEXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         CHKERR ,                     FAIL ON INQUIRE ERROR\n         SPACE 1\n         LA    R3,RECVAREA\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA),                        X\n               AREA=(R3),LENGTH=L'RECVAREA,MF=(G,WORKAREA)\n         CHKERR ,\n         SPACE 1\n         L     R7,RECVAREA\n         USING ISTDBIND,R7\n         SPACE 1\n         L     R4,=A(CIDENTRY-CIDBIND)  OFFSET TO BUFFER\n         LA    R4,0(R4,R7)            -> CIDENTRY\n         USING CIDENTRY,R4\n         SPACE 1\n         LA    R1,BINSPRIR            -> DEFAULTS\n         SPACE 1\n         CLI   BINPRESZ,BINPSZRC      ALTERNATES?\n         BNE   *+4+4                    NOPE\n         LA    R1,BINSALTR              YES, USE THEM\n         SPACE 1\n         XR    R0,R0                  CLEAR\n         IC    R0,0(,R1)              FETCH ROWS\n         STH   R0,CIDROWS             SAVE VALUE\n         IC    R0,1(,R1)              FETCH COLUMNS\n         STH   R0,CIDCOLS             SAVE VALUE\n         SPACE 1\n         FREERPL RPL=(R6)\n         SPACE 1\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nFAILEXIT DS    0H\n         LR    R12,R15\n         USING FAILEXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    FAILEND                  YES, ALL DONE\n         SPACE 1\n         CHKERR ,                     FAIL ON OPNDST ERROR\n         SPACE 1\n         L     R7,RPLARG              FETCH ARG FIELD\n         SCHEDCLS ARG=(R7)            SCHEDULE CLSDST\n         SPACE 1\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               AREA=FAILMSG,RECLEN=LFAILMSG,RESPOND=(NEX,FME,NRRN),    X\n               BRACKET=(BB,NEB),POST=SCHED,EXIT=(R0)                   X\n                                      SEND FAILURE MESSAGE\n         CHKERR ,\n         SPACE 1\nFAILEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\nFAILMSG  DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'LOGON NOT ACCEPTED - TOO MANY SESSIONS'\nLFAILMSG EQU   *-FAILMSG\n         SPACE 2\n         DROP  ,\n         EJECT ,\nREQEXIT  DS    0H\n         LR    R12,R15\n         USING REQEXIT,R12\n         SPACE 1\n         LR    R11,R1                 SAVE PARM ADDRESS\n         SPACE 1\n         L     R8,0(,R11)             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         L     R3,4(,R11)             -> SYMBOLIC NAME\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R0,NUMCIDS\nFINDTERM DS    0H\n         CLC   CIDNAME,0(R3)          FOR THIS TERMINAL\n         BE    GOTTERM                  YES, GOT THE TERMINAL\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> SLOT\n         BCT   R0,FINDTERM            AND CHECK IT\n         SPACE 1\n         CHKERR TYPE=ABORT            SOMETHING IS WRONG\n         SPACE 1\nGOTTERM  DS    0H\n         MVC   WORKAREA(LDROPWTO),IDROPWTO\n         SETINSRT ,\n         MVC   0(8,R1),0(R3)          INSERT TERMINAL ID\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         L     R7,CIDCID              FETCH CID\n         XC    CIDENTRY(CIDLENTH),CIDENTRY  ENTRY NO LONGER IN USE\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE TERMINAL\n         CHKERR ,\n         SPACE 1\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nIDROPWTO WTO   'TESTVTM2 - RELREQ ENTERED FOR ???????? - DROPPING',    X\n               ROUTCDE=11,DESC=7,MF=L\nLDROPWTO EQU   *-IDROPWTO\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nLOSTEXIT DS    0H\n         LR    R12,R15\n         USING LOSTEXIT,R12\n         SPACE 1\n         LR    R11,R1                 SAVE PARM ADDRESS\n         SPACE 1\n         L     R8,0(,R11)             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         L     R4,8(,R11)             -> TABLE ENTRY\n         USING CIDENTRY,R4\n         SPACE 1\n         MVC   WORKAREA(LLOSTWTO),ILOSTWTO\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL ID\n         SPACE 1\n         OC    CIDCID,CIDCID          ALREADY CLEARED?\n         BNZ   *+4+6                    NO\n         MVC   0(8,R1),=CL8'*UNKNOWN'   YES, WHATS UP?\n         SPACE 1\n         L     R0,12(,11)\n         CVD   R0,DWORD\n         SETINSRT ,\n         UNPK  0(2,R1),DWORD+6(2)\n         OI    1(R1),X'F0'\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         OC    CIDCID,CIDCID          ALREADY CLEARED?\n         BZ    LOSTEND                  YES, SKIP THE CLSDST\n         SPACE 1\n         XC    CIDENTRY(CIDLENTH),CIDENTRY  CLEAR TABLE ENTRY\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         L     R7,4(,R11)             FETCH CID\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE TERMINAL\n         CHKERR ,\n         SPACE 1\nLOSTEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nILOSTWTO WTO   'TESTVTM2 - LOSTERM ENTERED ON ????????, CODE = ??',    X\n               ROUTCDE=11,DESC=7,MF=L\nLLOSTWTO EQU   *-ILOSTWTO\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nRECVEXIT DS    0H\n         LR    R12,R15\n         USING RECVEXIT,R12\n         LA    R11,RECVEXIT+X'FFF'\n         USING RECVEXIT+X'FFF',R11\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    RECVEND                  YES, ALL DONE\n         SPACE 1\n         LR    R4,R15                 SAVE RETURN CODE\n         LR    R5,R0                   AND REASON CODE\n         SPACE 1\n         LA    R3,RECVBUFF\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA,USER,ARG),               X\n               AREA=(R3),LENGTH=LRECVBUF,MF=(G,WORKAREA)\n         CHKERR ,\n         L     R7,RECVARG\n         SPACE 1\n         ICM   R1,B'1111',RECVUSER    -> TABLE ENTRY\n         BZ    REDRIVE                  UNKNOWN TERMINAL\n         CLI   0(R1),0                UNSOLICITED?\n         BE    REDRIVE                  YES, IGNORE THE READ\n         SPACE 1\n         LR    R0,R5                  RESTORE REASON CODE\n         LTR   R15,R4                 WAS RECEIVE OK?\n         BZ    TESTFME                  YEP, CHECK OUT FME\n         SPACE 1\n         LA    R3,WORKAREA\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(RTNCD,FDBK2,USENSEI),         X\n               AREA=(R3),LENGTH=12,MF=(G,WORKAREA+12)\n         CHKERR ,\n         SPACE 1\n         CLI   WORKAREA+3,4           RTCND=4?\n         BNE   BAD$RECV                 NO, NOT HARDWARE ERROR\n         SPACE 1\n         CLI   WORKAREA+7,3           FDBK2=3?\n         BNE   BAD$RECV                 NO, NOT HARDWARE ERROR\n         SPACE 1\n         RECEIVE RPL=(R6)             REDRIVE THE RECEIVE\n         CHKERR ,\n         SPACE 1\n         UNPK  DWORD(5),WORKAREA+10(3)  GET SENSE INFO\n         TR    DWORD(4),HEXTABLE-C'0' MAKE PRINTABLE HEX\n         SPACE 1\n         MVC   WORKAREA(LFORCWTO),IFORCWTO\n         SETINSRT ,\n         L     R4,RECVUSER            -> TABLE ENTRY\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R4)  INSERT TERMINAL ID\n         SPACE 1\n         SETINSRT ,\n         MVC   0(4,R1),DWORD          INSERT SENSE INFO\n         SPACE 1\n         WTO   MF=(E,WORKAREA)        REPORT THE STUFF\n         SPACE 1\n         XC    0(CIDLENTH,R4),0(R4)   CLEAR TERMINAL INFO\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE REMINAL\n         CHKERR ,\n         SPACE 2\n         B     RECVEND\n         SPACE 2\nBAD$RECV DS    0H\n         LR    R0,R5                  RESTORE REASON CODE\n         LR    R15,R4                         ERROR CODE\n         CHKERR TYPE=ABORT\n         SPACE 1\nTESTFME  DS    0H\n         TESTCB AM=VTAM,RPL=(R6),RESPOND=NFME,ERET=ABEND$CB,           X\n               MF=(G,WORKAREA)\n         BE    CHKRESP\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=RESP,RESPOND=(NEX,FME,NRRN),OPTCD=ASY,    X\n               ARG=(R7),EXIT=(R0)\n         CHKERR ,\n         SPACE 1\nCHKRESP  DS    0H\n         L     R5,RECVAREA\n         MVC   CARD,=80C' '\n         XC    CARD(3),CARD           FIRST AID ALONE\n         OC    CARD,0(R5)\n         CLI   3(R5),X'11'            LEADING SBA\n         BNE   *+4+6\n         MVC   CARD+3(L'CARD-6),CARD+6  COMPRESS THE CARD\n         MVC   0(80,R5),=80C' '       CLEAR INPUT BUFFER\n         SPACE 1\n         CLC   =C'SENDF2 ',CARD+3\n         BE    DOSENDF2\n         SPACE 1\n         RECEIVE RPL=(R6)             REDRIVE IT\n         CHKERR ,\n         SPACE 1\n         LA    R4,CANTCLER\n         CLI   CARD,X'6D'             CLEAR KEY?\n         BE    RESEND                   TOO BAD\n         SPACE 1\n         LA    R4,WHYINTRP\n         CLI   CARD,X'6C'             PA1 KEY?\n         BE    RESEND                   TOO BAD\n         SPACE 1\n         OC    CARD(3),CARD           ALL ZEROES INPUT?\n         BZ    SENDELAY                 SIGNAL COMPLETED\n         SPACE 1\n         CLC   =C'LOGOFF',CARD+3\n         BE    DOLOGOFF\n         SPACE 1\n         CLC   =C'SHUTDOWN',CARD+3\n         BE    DOSHUTD\n         SPACE 1\n         CLC   =C'SHOWTERM',CARD+3\n         BE    DOSHOWT\n         SPACE 1\n         CLC   =C'STATS',CARD+3\n         BE    DOSHOWS\n         SPACE 1\n         CLC   =C'SHOWALL',CARD+3\n         BE    DOSHOWA\n         SPACE 1\n         CLC   =C'SHOW TERM',CARD+3\n         BE    DOSHOWT\n         SPACE 1\n         CLC   =C'SHOW ALL',CARD+3\n         BE    DOSHOWA\n         SPACE 1\n         CLC   =C'STATUS ',CARD+3\n         BE    DOSTATUS\n         SPACE 1\n         CLC   =C'SHOW APP',CARD+3\n         BE    DOSHOWP\n         SPACE 1\n         CLC   =C'SEND ',CARD+3\n         BE    DOSEND\n         SPACE 1\n         LA    R4,PROMPT2\n         CLC   =C'PROMPT2',CARD+3\n         BE    RESEND\n         SPACE 1\n         LA    R4,PROMPT1\n         B     RESEND\n         SPACE 1\nDOLOGOFF DS    0H\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=LOGMSG,RECLEN=LLOGMSG,RESPOND=(NEX,FME,NRRN),      X\n               POST=SCHED,BRACKET=(NBB,EB),ARG=(R7),EXIT=(R0)\n         CHKERR ,\n         SPACE 1\n         MVC   WORKAREA(LLOFFWTO),ILOFFWTO\n         SETINSRT ,\n         L     R4,RECVUSER            -> TABLE ENTRY\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R4)  INSERT TERMINAL ID\n         SPACE 1\n         WTO   MF=(E,WORKAREA)        REPORT THE STUFF\n         SPACE 1\n         XC    0(CIDLENTH,R4),0(R4)   CLEAR THE ENTRY\n         SPACE 1\n         SCHEDCLS ARG=(R7)            SCHEDULE CLSDST\n         SPACE 2\n         B     RECVEND\n         SPACE 2\nDOSHOWT  DS    0H\n         L     R4,RECVUSER            -> TABLE ENTRY\n         USING CIDENTRY,R4\n         SPACE 1\n         MVC   WORKAREA(LTERMMSG),TERMMSG  PRIME MESSAGE\n         SPACE 1\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL NAME\n         SPACE 1\n         LH    R0,CIDROWS\n         CVD   R0,DWORD\n         SETINSRT TYPE=SEND\n         UNPK  0(2,R1),DWORD+6(2)     INSERT ROWS\n         OI    1(R1),X'F0'\n         SPACE 1\n         LH    R0,CIDCOLS\n         CVD   R0,DWORD\n         SETINSRT TYPE=SEND\n         UNPK  0(2,R1),DWORD+6(2)     INSERT COLUMNS\n         OI    1(R1),X'F0'\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=WORKAREA,RECLEN=LTERMMSG,RESPOND=(NEX,FME,NRRN),   X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSHOWP  DS    0H\n         MVC   WORKAREA(LAPPLMSG),IAPPLMSG  PRIME MESSAGE\n         SPACE 1\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),APPLID         INSERT APPLID\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=WORKAREA,RECLEN=LAPPLMSG,RESPOND=(NEX,FME,NRRN),   X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSENDF2 DS    0H\n         GETRPL ,\n         L     R0,=A(F2EXIT1)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY,CS),          X\n               AREA==X'F2',RECLEN=1,RESPOND=(NEX,FME,NRRN),            X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         B     REDRIVE\n         SPACE 2\nDOSHOWS  DS    0H\n         MVC   WORKAREA(LSTATMSG),STATMSG\n         SETINSRT TYPE=SEND\n         L     R15,RPLTOTAL\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         SETINSRT TYPE=SEND\n         L     R15,RPLREQST\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=WORKAREA,RECLEN=LSTATMSG,RESPOND=(NEX,FME,NRRN),   X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSHOWA  DS    0H\n         MVC   WORKAREA(LSHALMSG),SHALMSG\n         SPACE 1\n         LA    R5,CIDLIST\n         USING CIDENTRY,R5\n         LA    R0,NUMCIDS\nDOSHOWA1 DS    0H\n         OC    CIDCID,CIDCID          ENTRY ACTIVE?\n         BZ    DOSHOWA2                 NO, SKIP IT\n         SPACE 1\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        COPY ID\n         SPACE 1\nDOSHOWA2 DS    0H\n         LA    R5,CIDENTRY+CIDLENTH   -> NEXT ENTRY\n         BCT   R0,DOSHOWA1            AND CHECK IT\n         SPACE 1\n         DROP  R5\n         SPACE 1\n         LA    R0,WORKAREA-8\n         SR    R1,R0                  LENGTH OF MESSAGE\n         LR    R5,R1                  SAFE REGISTER\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=WORKAREA,RECLEN=(R5),RESPOND=(NEX,FME,NRRN),       X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSHUTD  DS    0H\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=SHUTDMSG,RECLEN=LSHUTDMS,RESPOND=(NEX,FME,NRRN),   X\n               POST=SCHED,BRACKET=(NBB,EB),ARG=(R7),EXIT=(R0)\n         CHKERR ,\n         SPACE 1\n         MVC   WORKAREA(LSHUTWTO),ISHUTWTO\n         SETINSRT ,\n         L     R4,RECVUSER\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R4)\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         POST  STOPECB\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSTATUS DS    0H\n         L     R4,RECVUSER\n         MVC   CIDAPPLN-CIDENTRY(,R4),CARD+10  SAVE APPLID\n         SPACE 1\n         TRT   CIDAPPLN-CIDENTRY(,R4),TABLE51\n         BZ    STATUS2\n         SPACE 1\n         LA    R2,CIDAPPLN+L'CIDAPPLN-1-CIDENTRY(,R4)\n         SR    R2,R1                  LENGTH TO BLANK\n         MVC   0(*-*,R1),=8C' '       BLANK MODEL\n         EX    R2,*-6                 BLANK THE END\n         SPACE 1\nSTATUS2  DS    0H\n         LA    R2,CIDAPPLN-CIDENTRY(,R4)  -> APPLICATION NAME\n         SPACE 1\n         L     R4,NIBLENTH\n         MH    R4,=AL2(NUMCIDS)\n         A     R4,NIBADDR\n         MODCB NIB=(R4),NAME=(*,0(R2)),AM=VTAM,MF=(G,WORKAREA)         X\n                                      INSERT SPECIFIED APPLID IN NIB\n         CHKERR ,\n         SPACE 1\n         GETRPL ,                     GET AN RPL\n         SPACE 1\n         LA    R15,4                  PREFIX LENGTH\n         LCR   R15,R15\n         AR    R15,R1                 -> PREFIX\n         MVC   0(4,R15),RECVUSER      SAVE CID POINTER IN RPL PREFIX\n         SPACE 1\n         L     R0,=A(STATEXIT)\n         L     R2,RECVUSER\n         LA    R2,CIDBIND+24-CIDENTRY(R2)\n         INQUIRE RPL=(1),EXIT=(R0),NIB=(R4),OPTCD=(ASY,APPSTAT),       X\n               AREA=(R2),AREALEN=4    IS OTHER APPLICATION ACTIVE?\n         SPACE 1\n         B     RECVEND                ALL SCHEDULED\n         SPACE 2\nDOSEND   DS    0H\n         LA    R1,CARD+8+8\n         TRT   CARD+8(8),BLANKTAB     FIND TERMINAL ID\n         ST    R1,TEXTSTRT\n         LA    R0,CARD+8\n         SR    R1,R0                  EX LENGTH OF ID\n         MVC   DWORD,=8C' '\n         MVC   DWORD(*-*),CARD+8\n         EX    R1,*-6                 COPY TARGET TERMINAL\n         SPACE 1\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R0,NUMCIDS\nSENDFIND DS    0H\n         CLC   CIDNAME,DWORD          TERMINAL LOGGED ON?\n         BE    DOTHESND                 YES, DO THE SEND\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> NEXT SLOT\n         BCT   R0,SENDFIND            AND CHECK IT\n         SPACE 1\n         MVC   WORKAREA(LSENDMS1),ISENDMS1  PRIME FAILURE\n         LA    R4,LSENDMS1\n         B     SENDDONE\n         SPACE 1\nDOTHESND DS    0H\n         MVC   WORKAREA(LSENDMS9),ISENDMS9\n         SPACE 1\n         SETINSRT TYPE=SEND\n         L     R15,RECVUSER\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R15)\n         SPACE 1\n         LA    R1,CARD+79\n         TRT   CARD+3(L'CARD-3),TABLE51\n         SPACE 1\n         L     R14,TEXTSTRT\n         SR    R1,R14                  LENGTH OF MESSAGE\n         ST    R1,24(,R13)             SAVE IT\n         SPACE 1\n         SETINSRT TYPE=SEND\n         L     R15,24(,R13)            LOAD LENGTH\n         L     R14,TEXTSTRT                 ADDRESS\n         MVC   0(*-*,R1),0(R14)        MOVE MODEL\n         EX    R15,*-6                 COMPLETE THE MESSAGE\n         SPACE 1\n         TM    BINCMNP2+CIDBIND-ISTDBIND,BINHDXFF  TARGET 1/2 DUPLEX?\n         BZ    SENDNOW                               NO, SEND NOW\n         SPACE 1\n         GETMAIN RU,LV=WORKLEN,SP=12   GET A MESSAGE BUFFER\n         MVC   0(LSENDMS9,R1),WORKAREA  COPY MESSAGE BUFFER\n         ST    R1,CIDPENDM             SAVE PENDING MESSAGE\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         L     R2,CIDCID\n         SEND  RPL=(1),STYPE=REQ,CONTROL=SIGNAL,OPTCD=(ASY),           X\n               SIGDATA=X'00010000',RESPOND=(NEX,FME,NRRN),             X\n               POST=SCHED,ARG=(R2),EXIT=(R0),BRACKET=(NBB,NEB)\n         CHKERR ,\n         SPACE 1\n         B     SENDREPT\n         SPACE 1\nSENDNOW  DS    0H\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         L     R2,CIDCID\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),ARG=(R2),    X\n               AREA=WORKAREA,RECLEN=LSENDMS9,RESPOND=(NEX,FME,NRRN),   X\n               BRACKET=(NBB,NEB),POST=SCHED,EXIT=(R0)                  X\n                                      SEND THE MESSAGE\n         CHKERR ,\n         SPACE 1\nSENDREPT DS    0H\n         MVC   WORKAREA(LSENDMS2),ISENDMS2\n         LA    R4,LSENDMS2\n         SPACE 1\nSENDDONE DS    0H\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),DWORD\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=WORKAREA,RECLEN=(R4),RESPOND=(NEX,FME,NRRN),       X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nSENDELAY DS    0H\n         L     R4,RECVUSER\n         USING CIDENTRY,R4\n         SPACE 1\n         GETRPL ,\n         L     R5,CIDPENDM\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),ARG=(R7),    X\n               AREA=(R5),RECLEN=LSENDMS9,RESPOND=(NEX,FME,NRRN),       X\n               BRACKET=(NBB,NEB),POST=SCHED,EXIT=(R0),CHNGDIR=(CMD)    X\n                                      SEND THE DELAYED MESSAGE\n         CHKERR ,\n         SPACE 1\n         XC    CIDPENDM,CIDPENDM\n         FREEMAIN RU,LV=WORKLEN,SP=12,A=(R5)  FREE THE BUFFER\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nRESEND   DS    0H\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),             X\n               AREA=(R4),RECLEN=70,RESPOND=(NEX,FME,NRRN),             X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         B     RECVEND\n         SPACE 1\nREDRIVE  DS    0H\n         RECEIVE RPL=(R6)\n         CHKERR ,\n         SPACE 1\n         B     RECVEND\n         SPACE 1\nRECVEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nABEND$CB DS    0H\n         CHKERR TYPE=ABORT\n         SPACE 2\n         LTORG ,\n         SPACE 2\nHEXTABLE DC    C'0123456789ABCDEF'\n         SPACE 2\nILOFFWTO WTO   'TESTVTM2 - TERMINAL ???????? HAS LOGGED OFF',          X\n               ROUTCDE=11,DESC=7,MF=L\nLLOFFWTO EQU   *-ILOFFWTO\n         SPACE 2\nIFORCWTO WTO   'TESTVTM2 - HARDWARE ERROR ON ???????? - SENSE = ????', X\n               ROUTCDE=11,DESC=7,MF=L\nLFORCWTO EQU   *-IFORCWTO\n         SPACE 2\nISHUTWTO WTO   'TESTVTM2 - SHUTDOWN COMMAND ACCEPTED FROM ????????',   X\n               ROUTCDE=11,DESC=7,MF=L\nLSHUTWTO EQU   *-ISHUTWTO\n         SPACE 2\nPROMPT1  DC    X'F5431140403C5D7F001D401311C1501DF8'\nLSBASTUF EQU   *-PROMPT1\n         DC    CL70'YOU GET STANDARD PROMPT # 1'\n         SPACE 1\nPROMPT2  DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    CL70'YOU HAVE REQUESTED PROMPT # 2'\n         SPACE 1\nLOGMSG   DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'LOGOFF COMMAND ACCEPTED - RETURNING TO VTAM'\nLLOGMSG  EQU   *-LOGMSG\n         SPACE 1\nSHUTDMSG DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'SHUTDOWN NOW IN PROGRESS'\nLSHUTDMS EQU   *-SHUTDMSG\n         SPACE 1\nCANTCLER DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    CL70'YOU CANT CLEAR THIS SCREEN'\n         SPACE 1\nWHYINTRP DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    CL70'WHY DO YOU WANT TO INTERRUPT ME??'\n         SPACE 1\nTERMMSG  DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'YOUR TERMINAL ID IS ????????, SIZE IS ??X??'\nLTERMMSG EQU   *-TERMMSG\n         SPACE 1\nIAPPLMSG DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'TESTVTM2 APPLICATION ID IS ????????'\nLAPPLMSG EQU   *-IAPPLMSG\n         SPACE 1\nSTATMSG  DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'RPL STATISTICS: COUNT=???, USED=???'\nLSTATMSG EQU   *-STATMSG\n         SPACE 1\nISENDMS1 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'MESSAGE NOT SEND - TERMINAL ???????? NOT LOGGED ON'\nLSENDMS1 EQU   *-ISENDMS1\n         SPACE 1\nISENDMS2 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'MESSAGE SENT TO TERMINAL ????????'\nLSENDMS2 EQU   *-ISENDMS2\n         SPACE 1\nISENDMS9 DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'MESSAGE FROM ????????: ?'\n         DC    75C' '\nLSENDMS9 EQU   *-ISENDMS9\n         SPACE 1\nSHALMSG  DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'ACTIVE TERMINALS: '\n         DC    7C'???????? '\nLSHALMSG EQU   *-SHALMSG\n         SPACE 2\nBLANKTAB DC    256X'00'\n         ORG   BLANKTAB+C' '\n         DC    X'04'\n         ORG   ,\n         SPACE 2\nTABLE51  DC    256X'00'\n         ORG   TABLE51+X'51'\n         DC    X'04'\n         ORG   ,\n         SPACE 2\nIABNDWTO WTO   'TESTVTM2 - GENERATING USER ABEND CODE ??',             X\n               ROUTCDE=(2,11),DESC=7,MF=L\nLABNDWTO EQU   *-IABNDWTO\n         SPACE 2\nQUESTTAB DC    256X'00'\n         ORG   QUESTTAB+C'?'\n         DC    X'04'\n         ORG   ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nGETRPL   DS    0H\n         SAVE  (14,12),,GETRPL-SUBROUTINE\n         SPACE 1\n         LR    R12,R15\n         USING GETRPL,R12\n         SPACE 1\n         LR    R10,R1\n         USING #WORK,R10\n         SPACE 1\nGETRPL1  DS    0H\n         ICM   R5,B'1111',RPLQUEUE    ANY FREE RPL'S?\n         BZ    GETRPL3                  NO, GET A NEW ONE\n         SPACE 1\n         L     R1,0(,R5)              FETCH CHAIN POINTER\n         CS    R5,R1,RPLQUEUE         ACQUIRE THIS RPL\n         BNE   GETRPL1                  IN USE\n         SPACE 1\n         B     GETRPL9                GOT THE RPL\n         SPACE 1\nGETRPL3  DS    0H\n         L     R5,RPLLENTH\n         LA    R0,4(,R5)\n         GETMAIN RU,LV=(0),SP=10      GET A NEW RPL\n         LR    R5,R1                  AND POINT R5 TO IT\n         SPACE 1\n         L     R15,RPLTOTAL\n         LA    R0,1(,R15)\n         CS    R15,R0,RPLTOTAL\n         BNE   *-4-4\n         SPACE 1\nGETRPL9  DS    0H\n         L     R1,RPLLENTH            RPL LENGTH\n         BCTR  R1,0                   DECREMENT FOR EX\n         L     R15,MODELRPL           -> MODEL RPL\n         MVC   4(*-*,R5),0(R15)       MOVE MODEL\n         EX    R1,*-6                 COMPLETE THE RPL\n         XC    0(4,R5),0(R5)          CLEAR THE POINTER\n         SPACE 1\n         L     R15,RPLREQST\n         LA    R0,1(,R15)\n         CS    R15,R0,RPLREQST\n         BNE   *-4-4\n         SPACE 1\n         LA    R1,4(,R5)              -> THE RPL\n         L     R14,12(,R13)\n         RETURN (2,12),RC=0           AND RETURN\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nFREPLXIT DS    0H\n         LR    R12,R15\n         USING FREPLXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    FREPLEND                 YES, ALL DONE\n         SPACE 1\n         CHKERR ,                     FAIL ON ANY ERROR\n         SPACE 1\n         FREERPL RPL=(R6)             GIVE UP RPL\n         SPACE 1\nFREPLEND DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nF2EXIT1  DS    0H\n         LR    R12,R15\n         USING F2EXIT1,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    F2EX1END                 YES, ALL DONE\n         SPACE 1\n         CHKERR ,                     FAIL ON ANY ERROR\n         SPACE 1\n         LA    R3,RECVBUFF\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA,USER,ARG,RECLEN),        X\n               AREA=(R3),LENGTH=LRECVBUF,MF=(G,WORKAREA)\n         CHKERR ,\n         SPACE 1\n         L     R4,RECVUSER\n         USING CIDENTRY,R4\n         LH    R3,CIDROWS\n         MH    R3,CIDCOLS\n         DROP  R4\n         SPACE 1\n         LA    R0,4(R3,R3)\n         GETMAIN RU,LV=(0),SP=34,BNDRY=PAGE\n         ST    R0,0(,R1)\n         LA    R4,4(,R1)\n         SLL   R3,1\n         SPACE 1\n         L     R2,=A(F2EXIT2)\n         RECEIVE RPL=(R6),RTYPE=(DFSYN,NDFASY,NRESP),                  X\n               OPTCD=(ASY,SPEC,TRUNC,CS,Q),AREA=(R4),AREALEN=(R3),     X\n               BRACKET=(NBB,NEB),EXIT=(R2)\n         CHKERR ,\n         SPACE 1\nF2EX1END DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nF2EXIT2  DS    0H\n         LR    R12,R15\n         USING F2EXIT2,R12\n         SPACE 1\n         L     R11,=A(HEXTABLE)\n         USING HEXTABLE,R11\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    F2EX2END                 YES, ALL DONE\n         SPACE 1\n         LR    R4,R15                 SAVE RETURN CODE\n         LR    R5,R0                   AND REASON CODE\n         SPACE 1\n         LA    R3,RECVBUFF\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA,USER,ARG,RECLEN),        X\n               AREA=(R3),LENGTH=LRECVBUF,MF=(G,WORKAREA)\n         CHKERR ,\n         L     R7,RECVARG\n         SPACE 1\n         ICM   R1,B'1111',RECVUSER    -> TABLE ENTRY\n         DC    X'4780',S(*+1)           UNKNOWN TERMINAL\n         SPACE 1\n         LR    R0,R5                  RESTORE REASON CODE\n         LTR   R15,R4                 WAS RECEIVE OK?\n         DC    X'4770',S(*+1)           NO, FAIL S0C6\n         SPACE 1\n         TESTCB AM=VTAM,RPL=(R6),RESPOND=NFME,ERET=F2EXABND,           X\n               MF=(G,WORKAREA)\n         BE    F2EXCHKR\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=RESP,RESPOND=(NEX,FME,NRRN),OPTCD=ASY,    X\n               ARG=(R7),EXIT=(R0)\n         CHKERR ,\n         SPACE 1\nF2EXCHKR DS    0H\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY,CA),         X\n               AREA=F2DONE,RECLEN=LF2DONE,RESPOND=(NEX,FME,NRRN),      X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR ,\n         SPACE 1\n         MVC   OSNAPDCB(LSNAPDCB),ISNAPDCB\n         MVI   OPENSNAP,X'80'\n         OPEN  (OSNAPDCB,OUTPUT),MF=(E,OPENLIST)\n         SPACE 1\n         TM    OSNAPDCB+DCBOFLGS-IHADCB,DCBOFOPN\n         BZ    F2EXFBUF\n         SPACE 1\n         L     R2,SNAPCNT\n         LA    R2,1(,R2)\n         ST    R2,SNAPCNT\n         SPACE 1\n         L     R3,RECVAREA\n         L     R4,RECVARLN\n         AR    R4,R3\n         BCTR  R4,0\n         SPACE 1\n         MVC   OSNAP(LSNAP),ISNAP\n         SNAP  DCB=OSNAPDCB,ID=(R2),STORAGE=((R3),(R4)),MF=(E,OSNAP)\n         SPACE 1\n         CLOSE (OSNAPDCB),MF=(E,OPENSNAP)\n         SPACE 1\nF2EXFBUF DS    0H\n         LA    R1,4\n         LCR   R1,R1\n         AR    R1,R3\n         L     R0,0(,R1)\n         FREEMAIN RU,LV=(0),A=(1),SP=34\n         SPACE 1\nF2EX2END DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nF2EXABND DS    0H\n         DC    X'47F0',S(*+1)\n         SPACE 2\nISNAPDCB DCB   DSORG=PS,MACRF=(W),RECFM=VBA,BLKSIZE=882,LRECL=125,     X\n               DDNAME=SNAPFILE\nLSNAPDCB EQU   *-ISNAPDCB\n         SPACE 2\nISNAP    SNAP  DCB=1-1,STORAGE=(2-2,3-3),MF=L\nLSNAP    EQU   *-ISNAP\n         SPACE 2\n         LTORG ,\n         SPACE 2\nF2DONE   DC    X'F5431140403C5D7F001D401311C1501DF8'\n         DC    C'X''F2'' PROCESSING COMPLETE'\nLF2DONE  EQU   *-F2DONE\n         EJECT ,\nCIDENTRY DSECT ,\n         SPACE 1\nCIDCID   DS    F                   CID VALUE\n         SPACE 1\nCIDNAME  DS    CL8                 NAME OF LTERM\n         SPACE 1\nCIDROWS  DS    H                   NUMBER OF ROWS\nCIDCOLS  DS    H                   NUMBER OF COLUMNS\n         SPACE 1\nCIDAPPLN DS    CL8                 APPLID INQUIRED ABOUT\n         SPACE 1\nCIDPENDM DS    A                   -> PENDING MESSAGE\n         SPACE 1\nCIDBIND  DS    6D                  BIND INFO AREA\n         SPACE 1\n         DS    0D                  ALIGNMENT\n         SPACE 1\nCIDLENTH EQU   *-CIDENTRY          ENTRY LENGTH\n         SPACE 3\nCLOSENTY DSECT ,\n         SPACE 1\nCLOSFLAG DS    X                   SEEN FLAG\n         DS    CL3                 ..RESERVED\n         SPACE 1\nCLOSECID DS    F                   CID OF TERMINAL TO CLSDST\n         SPACE 1\nCLOSLNTH EQU   *-CLOSENTY          LENGTH OF ENTRY\n         EJECT ,\n#WORK    DSECT ,\n         SPACE 1\n         DS    18F\n         SPACE 1\nSAVE2    DS    18F\n         SPACE 1\nSAVE3    DS    18F\n         SPACE 1\nAPPLID   DS    CL8\n         SPACE 1\nREGSAVE  DS    3F\n         SPACE 1\nNIBADDR  DS    A\n         SPACE 1\nACBADDR  DS    2F\n         SPACE 1\nACBLENTH DS    F\nRPLLENTH DS    F\nNIBLENTH DS    F\n         SPACE 1\nSTOPECB  DS    F\n         SPACE 1\nOPENLIST DS    F\n         SPACE 2\nOTIMRCOD DS    ((LTIMRCOD+3)/4)F\n         SPACE 1\nRECVBUFF DS    0F\nRECVAREA DS    A\nRECVUSER DS    A\nRECVARG  DS    A\nRECVARLN DS    F\nLRECVBUF EQU   *-RECVBUFF\n         SPACE 2\nCARD     DS    CL80\nCARD1    DS    CL80\nCARD2    DS    CL80\n         SPACE 2\nRECVRPL1 DS    A\nRECVRPL2 DS    A\nMODELRPL DS    A\n         SPACE 1\nTEXTSTRT DS    F\n         SPACE 1\nRPLQUEUE DS    A\nRPLREQST DS    F\nRPLTOTAL DS    F\n         SPACE 2\nNUMCIDS  EQU   3\nCIDLIST  DS    ((CIDLENTH*NUMCIDS)/8)D   CID TABLE AREA\n         SPACE 1\nDWORD    DS    D\n         SPACE 1\nNUMCLOSE EQU   2*NUMCIDS\nPENDCLOS DS    ((CLOSLNTH*NUMCLOSE)/4)F  PENDING CLSDST TABLE\n         SPACE 1\nWORKAREA DS    20D\nWORKLEN  EQU   *-WORKAREA\n         SPACE 2\nOSNAPDCB DCB   DSORG=PS,MACRF=(W),RECFM=VBA,BLKSIZE=882,LRECL=125,     X\n               DDNAME=SNAPFILE\n         SPACE 2\nOSNAP    SNAP  DCB=OSNAPDCB,STORAGE=(2-2,3-3),MF=L\n         SPACE 1\nOPENSNAP OPEN  (OSNAPDCB,OUTPUT),MF=L\n         SPACE 1\nSNAPCNT  DS    F\n         SPACE 3\n#AMT     EQU   *-#WORK\n         EJECT ,\n         PRINT NOGEN\n         SPACE 2\n         IFGACB AM=VTAM\n         SPACE 2\n         IFGRPL AM=VTAM\n         SPACE 2\n         ISTDNIB ,\n         SPACE 2\n         ISTDBIND ,\n         SPACE 2\n         DCBD  DSORG=BS\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTVT38": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x08\\x00\\x00\\x01\\x000o\\x01\\x12\\x18\\x1f\\x18\\x00\\tm\\x07$\\x00\\x00\\xd1\\xe4\\xc5\\xd9\\xc7\\xc5\\xd5@@@'", "ispf": {"version": "03.08", "flags": 0, "createdate": "2000-11-01T00:00:00", "modifydate": "2012-06-29T18:00:00", "lines": 2413, "newlines": 1828, "modlines": 0, "user": "JUERGEN"}, "text": "TESTVTM2 TITLE '-  C O M P L E X   V T A M   A P P L I C A T I O N'\n         MACRO\n&LABEL   CHKERR &VTAMMAC,&TYPE=CHECK,&SAVE=YES\n.*\n         GBLA  &DIECTR\n         LCLC   &C,&C2\n.*\n&DIECTR  SETA  &DIECTR+1\n&C       SETC   'ABN'.'&SYSNDX'\n&C2      SETC   'ABNDU'.'&DIECTR'\n.*\n         AIF   (T'&LABEL EQ 'O').SKIPLAB\n&LABEL   DS    0H\n.SKIPLAB ANOP  ,\n.*\n         AIF   ('&TYPE' EQ 'ABORT').ABORT\n.*\n         LTR   R15,R15             DID OPERATION WORK\n         BZ    &C                    YES, SKIP THE ABEND\n         SPACE 1\n.ABORT   ANOP  ,\n         AIF   ('&SAVE' EQ 'NO').NOSAVE\n         STM   R15,R1,REGSAVE\n         SPACE 1\n.NOSAVE  ANOP  ,\n&C2      L     R1,=A(IABNDWTO)\n         MVC   WORKAREA(LABNDWTO),0(R1)\n         MVC   WORKAREA+42(2),=CL2'&DIECTR'   ADD TARGET LENGTH - GP@P6\n         MVC   WORKAREA+47(8),=CL8'&VTAMMAC'                      GP@P6\n         STC   R15,WORKAREA+63                                    GP@P6\n         SRL   R15,4                                              GP@P6\n         STC   R15,WORKAREA+62                                    GP@P6\n         NI    WORKAREA+62,X'0F'                                  GP@P6\n         NI    WORKAREA+63,X'0F'                                  GP@P6\n         STC   R0,WORKAREA+69                                     GP@P6\n         SRL   R0,4                                               GP@P6\n         STC   R0,WORKAREA+68                                     GP@P6\n         NI    WORKAREA+68,X'0F'                                  GP@P6\n         NI    WORKAREA+69,X'0F'                                  GP@P6\n         L     R1,=A(HEXTABLE)                                    GP@P6\n         TR    WORKAREA+62(2),0(R1)                               GP@P6\n         TR    WORKAREA+68(2),0(R1)                               GP@P6\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         ABEND &DIECTR,DUMP\n         SPACE 1\n&C       DS    0H\n.*\n         MEND\n         EJECT ,\n         MACRO\n&LABEL   SETINSRT &TYPE=WTO,&ERROR=\n.*\n         LCLC  &C\n.*\n&C       SETC  '4'\n         AIF   ('&TYPE' EQ 'WTO').START\n&C       SETC  '0'                                                   JW\n.*\n.START   ANOP\n&LABEL   L     R1,=A(QUESTTAB)        -> TRT TABLE\n         TRT   WORKAREA+&C.(WORKLEN-&C),0(1)\n.*\n         AIF   (T'&ERROR EQ 'O').NOERROR\n.*\n         BZ    &ERROR\n         AGO   .MEND\n.*\n.NOERROR ANOP  ,\n         BNZ   *+4+4                  ? FOUND\n         LA    R1,0                   ? NOT FOUND\n.*\n.MEND    MEND\n         EJECT ,\n         MACRO\n&LABEL   GETRPL &REG\n.*\n&LABEL   LA    R1,#WORK               -> #WORK\n         L     R15,=A(GETRPL)         LOAD GETRPL ROUTINE ADDRESS\n         BALR  R14,R15                GET RPL (IN REG1)\n.*\n         AIF   (T'&REG EQ 'O').MEND\n.*\n         LR    &REG(1),R1             COPY RPL ADDRESS\n.*\n.MEND    MEND\n         SPACE 3\n         MACRO\n&LABEL   FREERPL &RPL=\n.*\n&LABEL   LA    R0,4                   OFFSET TO PREFIX\n         SR    &RPL(1),R0             -> PREFIX\n         L     R15,RPLQUEUE           -> TOP OF QUEUE\n         ST    R15,0(,&RPL(1))        MAKE IT NEXT\n         CS    R15,&RPL(1),RPLQUEUE   ADD TO FREE QUEUE\n         BNE   *-4-4                    TRY AGAIN\n         SR    &RPL(1),&RPL(1)        RPL NO LONGER AVAILABLE\n.*\n         MEND\n         EJECT ,\n         MACRO\n&LABEL   SCHEDCLS &ARG=\n.*\n         LCLC  &C\n&C       SETC  'SCH'.'&SYSNDX'\n.*\n&LABEL   LA    R14,PENDCLOS\n         LA    R15,NUMCLOSE\n         SPACE 1\n&C       LA    R0,0\n         CS    R0,&ARG(1),CLOSECID-CLOSENTY(R14)\n         BE    &C.B\n         SPACE 1\n         LA    R14,CLOSLNTH(,R14)\n         BCT   R15,&C\n         SPACE 1\n         CHKERR *UNCOND*,TYPE=ABORT\n         SPACE 1\n&C.B     DS    0H\n.*\n         MEND\n         MACRO                                                       JW\n&LABEL   MAKEMSG ,                                                   JW\n&LABEL   STM   R14,R0,MSGSAVE         remember linkage regs          JW\n         LA    R0,#WORK               -> #WORK                       JW\n         L     R15,=A(MAKEMSG)        load MAKEMSG routine address   JW\n         BALR  R14,R15                complete the message           JW\n         LM    R14,R0,MSGSAVE         restore linkage regs           JW\n         MEND                                                        JW\n         EJECT ,\n*                                                                    JW\n* This is a special version of TESTVTM2 adapted to the non ACF       JW\n* VTAM Level 2 that's available with MVS 3.8j. It supports most      JW\n* terminal types that can occur on MVS 3.8j when running under       JW\n* Hercules:                                                          JW\n*                                                                    JW\n*  - local non SNA 3270                                              JW\n*  - local SNA 3270 attached through 3791L                           JW\n*  - remote SNA 3270 attached through 3705 NCP                       JW\n*  - local SNA TTY emulated as 3767 attached through 3791L           JW\n*  - remote SNA TTY emulated as 3767 attached through 3705 NCP       JW\n*                                                                    JW\n* This version is a rework of the original TESTVTM2 port to MVS 3.8J JW\n* done by Greg Price in 2003. Device support relies on the specific  JW\n* behavior of VTAM level 2 and is incompatible with later ACF/VTAM   JW\n* versions. It should be noted that 3270 terminals get queried       JW\n* unconditionally. So please use tn3270 emulations supporting        JW\n* WSF QUERY only (don't know if others do exist at all) and also     JW\n* use real 3270 tubes supporting WSF QUERY only.                     JW\n*                                                                    JW\n* Juergen Winkelmann (JW), ETH Zuerich, June 2012                    JW\n* winkelmann@id.ethz.ch                                              JW\n*                                                                    JW\n* Credits: Binyamin Dissen - original version                        JW\n*          Greg Price      - first non ACF (MVS 3.8j) port (GP@P6)   JW\n*          Greg Price      - I've stolen all of the 3270 query       JW\n*                            structured field analysis and           JW\n*                            3270 buffer address conversion          JW\n*                            logic from the brilliant 3270           JW\n*                            datastream article and sample           JW\n*                            program on his website                  JW\n*\n* JCL FOR THE TESTVTM2 STARTED TASK GOES SOMETHING LIKE THIS:\n*\n* //TESTVTM2 PROC\n* //STEP1   EXEC PGM=TESTVTM2,REGION=4096K,TIME=1440,PARM='Y       ' JW\n* //SNAPFILE DD  SYSOUT=X,HOLD=YES\n* //SYSUDUMP DD  SYSOUT=X,HOLD=YES\n*\n* ADD A STEPLIB DD IF TESTVTM2 IS NOT IN THE LINK LIST.\n*\n*\n* VTAMLST(X) MAJOR NODE DEFINITION GOES SOMETHING LIKE THIS:\n*\n* Y        APPL AUTH=NVPACE,BUFFACT=10                               JW\n*\n* ISSUE 'V NET,ACT,ID=X' BEFORE RUNNING TESTVTM2 FOR THE FIRST TIME.\n*\n*\n* You can choose other names for X and Y.                            JW\n*                                                                 GP@P6\n         EJECT ,\nTESTVTM2 CSECT\n         SPACE 1\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         SAVE  (14,12),,*\n         SPACE 1\n         LR    R12,R15\n         USING TESTVTM2,R12\n         SPACE 1\n         L     R11,0(,R1)\n         LA    R11,1(,R11)         -> APPLID\n         SPACE 1\n         GETMAIN RU,LV=#AMT,SP=8\n         SPACE 1\n         LA    R2,0(,R1)\n         LA    R3,#AMT\n         XR    R14,R14\n         XR    R15,R15\n         MVCL  R2,R14\n         SPACE 1\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING #WORK,R13\n         SPACE 1                       initialize 3270 msg prefix    JW\n         MVC   PRFX3270(P3270),THECAT  have the cat sit on the tube  JW\n         MVC   NLONLY(STTY+2),PROMPT-2 linemode command prompt       JW\n         SPACE 1\n         LA    R3,ACBLENTH\n         SHOWCB AM=VTAM,FIELDS=(ACBLEN,RPLLEN,NIBLEN),AREA=(R3),       X\n               LENGTH=12,MF=(G,WORKAREA)\n         CHKERR SHOW-LEN\n         SPACE 1\n         GENCB BLK=EXLST,AM=VTAM,LOGON=LOGEXIT,RELREQ=REQEXIT,         X\n               LOSTERM=LOSTEXIT,                                       X\n               MF=(G,WORKAREA)     BUILD AN EXLST\n         CHKERR GENEXLST\n         LR    R3,R1               SAVE ADDRESS\n         SPACE 1\n         L     R9,ACBLENTH         FETCH ACB LENGTH\n         LA    R9,4(,R9)           PLUS ANCHOR WORD\n         GETMAIN RU,LV=(R9),SP=9   GET ACB IMAGE\n         ST    R13,0(,R1)          SAVE SAVE AREA ADDRESS IN ANCHOR\n         STM   R0,R1,ACBADDR       SAVE ACB REGS\n         SPACE 1\n         LA    R8,4(,R1)\n         USING IFGACB,R8\n         SPACE 1\n         GENCB BLK=ACB,AM=VTAM,WAREA=(R8),LENGTH=(R9),APPLID=(R11),    X\n               MACRF=LOGON,EXLST=(R3),MF=(G,WORKAREA)                  X\n                                   COMPLETE THE ACB\n         CHKERR GENACB\n         SPACE 1\n         GENCB BLK=NIB,AM=VTAM,MODE=RECORD,MF=(G,WORKAREA),            X\n               COPIES=NUMCIDS+1    GENERATE NESCESSARY NIBS\n         CHKERR GENNIB\n         ST    R1,NIBADDR\n         SPACE 1\n         GENCB BLK=RPL,AM=VTAM,ACB=(R8),COPIES=3,MF=(G,WORKAREA)       X\n                                        GENERATE MODEL + RECEIVE RPLS\n         CHKERR GENRPL\n         SPACE 1\n         ST    R1,MODELRPL\n         A     R1,RPLLENTH\n         ST    R1,RECVRPL1\n         A     R1,RPLLENTH\n         ST    R1,RECVRPL2\n         SPACE 1\n         MVI   OPENLIST,X'80'\n         OPEN  ((R8)),MF=(E,OPENLIST)  ATTEMPT TO OPEN ACB\n         CHKERR OPEN\n         SPACE 1\n         XR    R1,R1                   CLEAR\n         IC    R1,0(,R11)              APPLID LENGTH\n         BCTR  R1,0                    DECREMENT FOR EX\n         MVC   APPLID,=8C' '           BLANK\n         MVC   APPLID(*-*),1(R11)      MOVE MODEL\n         EX    R1,*-6                  COPY APPLID\n         SPACE 1\n         MVC   WORKAREA(LSTRTWTO),ISTRTWTO\n         SETINSRT ,\n         MVC   0(8,R1),APPLID          INSERT APPLID\n         WTO   MF=(E,WORKAREA)         APPLICATION ACTIVE\n         SPACE 1\n         GETRPL ,                      AQUIRE AN RPL\n         L     R0,=A(FREPLXIT)\n         SETLOGON RPL=(1),OPTCD=(ASY,START),EXIT=(R0)\n         CHKERR SETLOGON\n         SPACE 1\nALLQUAL  DS    0H\n         L     R2,=A(RECVEXIT)\n         L     R1,RECVRPL1\n         RECEIVE RPL=(1),RTYPE=(DFSYN,NDFASY,NRESP),                   X\n               OPTCD=(ASY,ANY,TRUNC,CA,Q),AREA=CARD1,AREALEN=256,      X\n               BRACKET=(NBB,NEB),EXIT=(R2)\n         CHKERR RECEIVE1\n         SPACE 1\n         L     R1,RECVRPL2\n         RECEIVE RPL=(1),RTYPE=(DFSYN,NDFASY,NRESP),                   X\n               OPTCD=(ASY,ANY,TRUNC,CA,Q),AREA=CARD2,AREALEN=256,      X\n               BRACKET=(NBB,NEB),EXIT=(R2)\n         CHKERR RECEIVE2\n         SPACE 1\n         MVC   OTIMRCOD(LTIMRCOD),ITIMRCOD\n         STIMER REAL,OTIMRCOD,BINTVL==F'300'\n         SPACE 1\n         LA    R6,STOPECB             build ..                       JW\n         ST    R6,MAINECBS                   ..                      JW\n         LA    R6,CLOSECB                     .. ECB ..              JW\n         ST    R6,MAINECBS+4                          ..             JW\n         OI    MAINECBS+4,X'80'                        .. list       JW\n         XC    STOPECB,STOPECB        clear ..                       JW\n         XC    CLOSECB,CLOSECB               ..                      JW\nMAINLOOP WAIT  1,ECBLIST=MAINECBS     wait for SHUTDOWN or LOGOFFs   JW\n         SPACE 1\n         L     R10,X40                \\                              JW\n         O     R10,CLOSECB             \\                             JW\n         L     R6,X3F                   \\ if CLOSECB had been posted JW\n         NR    R6,R10                   / reset it and go to DOCLOSE JW\n         CS    R10,R6,CLOSECB          /                             JW\n         BE    DOCLOSE                /                              JW\n         SPACE 1                                                     JW\n         B     DOSHUT                 no other ECB posted, shutdown  JW\n         SPACE 1                                                     JW\nDOCLOSE  LA    R10,PENDCLOS           -> PENDING CLSDST TABLE        JW\n         USING CLOSENTY,R10                                          JW\n         LA    R9,NUMCLOSE                                           JW\n         SPACE 1                                                     JW\nCLSDLOOP DS    0H                                                    JW\n         ICM   R7,B'1111',CLOSECID    ENTRY ACTIVE?                  JW\n         BZ    ECLSDLOP                 NO, IGNORE IT                JW\n         SPACE 1                                                     JW\n         TS    CLOSFLAG               ALREADY SEEN                   JW\n         BZ    ECLSDLOP                 NOPE, ALLOW FULL TIME        JW\n         SPACE 1                                                     JW\n         XC    CLOSENTY(CLOSLNTH),CLOSENTY                           JW\n         SPACE 1                                                     JW\n         GETRPL ,                                                    JW\n         L     R0,=A(FREPLXIT)                                       JW\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE TERMINAL           JW\n         CHKERR CLSDST                                               JW\n         SPACE 1                                                     JW\nECLSDLOP DS    0H                                                    JW\n         LA    R10,CLOSENTY+CLOSLNTH  -> NEXT CLSDST ENTRY           JW\n         BCT   R9,CLSDLOOP            AND CHECK IT                   JW\n         SPACE 1                                                     JW\n         B     MAINLOOP               start over                     JW\n         SPACE 1                                                     JW\nDOSHUT   WTO   'TESTVTM2 - APPLICATION IS SHUTTING DOWN',              X\n               ROUTCDE=11,DESC=7\n         SPACE 1\n         GETRPL R6\n         SETLOGON RPL=(R6),OPTCD=(SYN,QUIESCE)\n         CHKERR SETLOGON\n         SPACE 1\n         STIMER WAIT,BINTVL==F'300'   WAIT 3 SECONDS\n         SPACE 1\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R5,NUMCIDS\nCLSDST   DS    0H\n         ICM   R2,B'1111',CIDCID      FETCH CID\n         BZ    ECLSDST                  NOT ACTIVE\n         SPACE 1\n         CLSDST RPL=(R6),OPTCD=(SYN,RELEASE),ARG=(R2)                  X\n                                      RELEASE THE TERMINAL\n         CHKERR CLSDST\n         SPACE 1\n         MVC   WORKAREA(LCLOSWTO),ICLOSWTO\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL ID\n         WTO   MF=(E,WORKAREA)        REPORT ON LOGOFF\n         SPACE 1\nECLSDST  DS    0H\n         LA    R4,CIDENTRY+CIDLENTH   -> NEXT CID\n         BCT   R5,CLSDST              AND CLOSE IT\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         CLOSE ((R8)),MF=(E,OPENLIST)\n         CHKERR CLOSE\n         SPACE 1\n         MVC   WORKAREA(LDONEWTO),IDONEWTO\n         SPACE 1\n         SETINSRT ,\n         L     R15,RPLTOTAL\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         SETINSRT ,\n         L     R15,RPLREQST\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         WTO   MF=(E,WORKAREA)        REPORT ON LOGOFF\n         SPACE 1\n         LM    R0,R1,ACBADDR\n         FREEMAIN RU,LV=(0),A=(1),SP=9  FREE THE ACB\n         SPACE 1\n         STIMER WAIT,BINTVL==F'300'   wait 3 seconds                 JW\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN RU,LV=#AMT,A=(1),SP=8\n         SPACE 1\n         RETURN (14,12),RC=0\n         SPACE 2\n         DS    0F                                                    JW\nX40      DC    X'40000000'            ECB posted                     JW\nX3F      DC    X'3F000000'            ECB not posted                 JW\n         DC    AL2(STTY-1)            length of cmd prompt w/o NL    JW\nPROMPT   DC    AL1(NL),C'Enter command> ' linemode command prompt    JW\nSTTY     EQU   *-PROMPT               length of command prompt       JW\nNL       EQU   37                     EBCDIC newline for TTYs        JW\nTHECAT   DC    X'7EC3'                special appearance of the cat  JW\n         DC    X'11'                                                 JW\nTHECATR1 EQU   *-THECAT               first cat row                  JW\n         DC    X'0000'                                               JW\n         DC    C'       |l      _,,,---,,_'                          JW\n         DC    X'11'                                                 JW\nTHECATR2 EQU   *-THECAT               second cat row                 JW\n         DC    X'0000'                                               JW\n         DC    C'ZZZzz /,''.-''`''    -.  ;-;;,'                     JW\n         DC    X'11'                                                 JW\nTHECATR3 EQU   *-THECAT               third cat row                  JW\n         DC    X'0000'                                               JW\n         DC    C'     |,4-  ) )-,_. ,( (  ''''-'''                   JW\n         DC    X'11'                                                 JW\nTHECATR4 EQU   *-THECAT               fourth cat row                 JW\n         DC    X'0000'                                               JW\n         DC    C'    ''---''''(_/--''  `-'')_)'                      JW\n         DC    X'1140401D401311'                                     JW\nSCREENR2 EQU   *-THECAT               second row on screen           JW\n         DC    X'C150'                                               JW\n         DC    X'1DF8'                                               JW\nP3270    EQU   *-THECAT         length of 3270 prefix including cat  JW\n         LTORG ,\n         SPACE 2\nICLOSWTO WTO   'TESTVTM2 - LOGGED OFF ???????? FOR SHUTDOWN',          X\n               ROUTCDE=11,DESC=7,MF=L\nLCLOSWTO EQU   *-ICLOSWTO\n         SPACE 2\nIDONEWTO WTO   'TESTVTM2 - APPLICATION COMPLETE - RPL STATS: COUNT=???,*\n                REQUESTS=???',ROUTCDE=11,DESC=7,MF=L\nLDONEWTO EQU   *-IDONEWTO\n         SPACE 2\nISTRTWTO WTO   'TESTVTM2 - APPLICATION ???????? IS UP',                X\n               ROUTCDE=11,DESC=7,MF=L\nLSTRTWTO EQU   *-ISTRTWTO\n         SPACE 2\n         DROP  ,\n         EJECT ,\nITIMRCOD DS    0H\n         STM   R14,R12,12(R13)\n         SPACE 1\n         LR    R1,R15                 CURRENT ADDRESS\n         LA    R0,OTIMRCOD-#WORK      OFFSET TO #WORK\n         SR    R1,R0                  R1 -> #WORK\n         L     R15,ITIMRCD2-ITIMRCOD(,R15)  -> READ ONLY SECTION\n         BR    R15                    GO DO THE TIMER\n         SPACE 1\nITIMRCD2 DC    A(TIMRCODE)            READ ONLY SECTION ADDRESS\n         SPACE 1\nLTIMRCOD EQU   *-ITIMRCOD             LENGTH OF PREFIX\n         SPACE 3\nTIMRCODE DS    0H\n         LR    R12,R15\n         USING TIMRCODE,R12\n         SPACE 1\n         LR    R11,R1\n         USING #WORK,R11\n         SPACE 1\n         LA    R1,SAVE3               GET A SAVE AREA\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         SPACE 1\n         STIMER REAL,OTIMRCOD,BINTVL==F'300'  RESET INTERVAL\n         POST  CLOSECB                release terminals logged off   JW\n         SPACE 1\n         L     R13,4(,R13)            -> PREV SAVE\n         RETURN (14,12),RC=0          AND GO AWAY\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nLOGEXIT  DS    0H\n         LR    R12,R15\n         USING LOGEXIT,R12\n         SPACE 1\n         LR    R11,R1                 SAVE PARM ADDRESS\n         SPACE 1\n         L     R8,0(,R11)             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS\n         BO    IGNORE                   YES, IGNORE THE LOGON\n         SPACE 1\n         L     R3,4(,R11)             -> TERMINAL NAME\n         SPACE 1\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R0,NUMCIDS\nCHKDUP   DS    0H\n         CLC   CIDNAME,0(R3)          DUPLICATE TERMINAL?\n         BE    ABND$DUP                 YES, ERROR\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> NEXT SLOT\n         BCT   R0,CHKDUP              AND CHECK IT\n         SPACE 1\n         LA    R4,CIDLIST\n         L     R7,NIBADDR\n         LA    R0,NUMCIDS\nFINDSLOT DS    0H\n         OC    CIDCID,CIDCID          FREE CID?\n         BZ    GOTSLOT                  YES, GOT THE SPOT\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> SLOT\n         A     R7,NIBLENTH            -> NEXT NIB\n         BCT   R0,FINDSLOT            AND CHECK IT\n         SPACE 1\n         B     GOTSLOT          accept this logon only to ..         JW\n         SPACE 1                 .. tell user it's not accepted      JW\nABND$DUP DS    0H\n         CHKERR *UNCOND*,TYPE=ABORT,SAVE=NO\n         SPACE 1\nGOTSLOT  DS    0H\n         MVC   CIDNAME,0(R3)                 NODE NAME\n         SPACE 1\n         MODCB NIB=(R7),NAME=(*,CIDNAME),USERFLD=(R4),AM=VTAM,         X\n               MF=(G,WORKAREA)        COMPLETE THE NIB\n         CHKERR MOD-NIB\n         SPACE 1\n         ICM   R0,B'0011',=X'C150'    3270 address ..                JW\n         STH   R0,CIDROW2              .. of 2nd row on screen       JW\n         LA    R3,RECVAREA\n         L     R5,16(,R11)            -> READ-ONLY RPL\n         SHOWCB AM=VTAM,RPL=(R5),FIELDS=(AREA),                        X\n               AREA=(R3),LENGTH=L'RECVAREA,MF=(G,WORKAREA)\n         L     R14,16                 -> CVT                      GP@P6\n         CLI   116(R14),X'13'         MVS 3.8?                    GP@P6\n         BNE   MUSTHAVE               NO, NEW PLIST SHOULD BE OK  GP@P6\n         LTR   R15,R15                YES, LOGON EXIT HAS SHORTER GP@P6\n         BNZ   OPENINQ                  PLIST - expect bad RPL GP@P6 JW\nMUSTHAVE EQU   *                      SHOULD GET IT WITH ACF/VTAM GP@P6\n         CHKERR SHOW-RPL\n         SPACE 1\n         L     R3,RECVAREA\n         CLC   =X'810601',0(R3)       IS IT A CINIT RU?\n         BNE   NOTCINIT                 NO, DO INQUIRE\n         SPACE 1\n         USING ISTDBIND-12,R3\n         SPACE 1\n         MVC   CIDBIND(24),ISTDBIND   COPY BIND DATA\n         SPACE 1\n         LA    R1,BINSPRIR            -> DEFAULTS\n         SPACE 1\n         CLI   BINPRESZ,BINPSZRC      ALTERNATES?\n         BNE   *+4+4                    NOPE\n         LA    R1,BINSALTR              YES, USE THEM\n         SPACE 1\n         XR    R0,R0                  CLEAR\n         IC    R0,0(,R1)              FETCH ROWS\n         STH   R0,CIDROWS             SAVE VALUE\n         IC    R0,1(,R1)              FETCH COLUMNS\n         STH   R0,CIDCOLS             SAVE VALUE\n         SPACE 1\n         DROP  R3\n         SPACE 1\n         B     OPENDEST\n         SPACE 1\nNOTCINIT DS    0H\n         WTO   'TESTVTM2 - NOTCINIT CODE SECTION ENTERED',             X\n               ROUTCDE=(2,11),DESC=(2,7)\n         SPACE 1\nOPENINQ  GETRPL ,                                                    JW\n         L     R0,=A(BINDEXIT)                                       JW\n         INQUIRE RPL=(1),NIB=(R7),AREA=CIDBIND,AREALEN=6*8,            X\n               OPTCD=(ASY,SESSPARM),EXIT=(R0)                        JW\n         CHKERR INQUIRE\n         SPACE 1\nOPENDEST DS    0H\n         GETRPL ,\n         OPNDST RPL=(1),ACB=(R8),NIB=(R7),EXIT=GOODMXIT,               X\n               OPTCD=(ASY,ACCEPT,SPEC,NQ)   COMPLETE THE SESSION\n         CHKERR OPNDST\n         SPACE 1\n         LA    R5,FAILOGON         \\  no signon message              JW\n         CR    R4,R5                > if reserve CIDENTRY            JW\n         BE    LOGNEND             /  is in use                      JW\n         SPACE 1                                                     JW\n         MVC   WORKAREA(LSIGNWTO),ISIGNWTO\n         SPACE 1\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL NAME\n         WTO   MF=(E,WORKAREA)\n         SPACE 2\n         B     LOGNEND\n         SPACE 2\nIGNORE   DS    0H\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),EXIT=(R0)\n         CHKERR CLSDST\n         SPACE 2\nLOGNEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nISIGNWTO WTO   'TESTVTM2 - TERMINAL ???????? SIGNON ACCEPTED',         X\n               ROUTCDE=11,DESC=7,MF=L\nLSIGNWTO EQU   *-ISIGNWTO\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nGOODMXIT DS    0H\n         LR    R12,R15\n         USING GOODMXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    GOODMEND                 YES, ALL DONE\n         SPACE 1\n         CHKERR CHECK                 FAIL ON OPNDST ERROR\n         SPACE 1\n         LA    R7,DWORD               find NIB                       JW\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA),                        X\n               AREA=(R7),LENGTH=4,MF=(G,WORKAREA)                    JW\n         L     R7,DWORD               NIB address                    JW\n         LA    R4,DWORD               NIB USERFLD has CIDENTRY addr  JW\n         SHOWCB AM=VTAM,NIB=(R7),FIELDS=(USERFLD),                     X\n               AREA=(R4),LENGTH=4,MF=(G,WORKAREA)                    JW\n         L     R4,DWORD               CIDENTRY address               JW\n         SHOWCB AM=VTAM,NIB=(R7),FIELDS=(CID),                         X\n               AREA=(R4),LENGTH=4,MF=(G,WORKAREA) store CID in table JW\n         SPACE 1\n         USING CIDENTRY,R4                                           JW\n         CLC   CIDROW2,=XL2'0000'     3270 terminal?                 JW\n         BE    GOGOODM                 no,  send good morning msg    JW\n         SPACE 1                       yes, issue WSF query          JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               AREA=QUERY,RECLEN=LQUERY,RESPOND=(EX,FME,NRRN),         X\n               BRACKET=(BB,NEB),POST=SCHED,EXIT=(R0),CHNGDIR=(CMD)     X\n                                      query terminal                 JW\n         CHKERR SEND\n         SPACE 1\nGOODMEND DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nGOGOODM  L     R12,=A(RECVEXIT)      \\                               JW\n         USING RECVEXIT,R12           \\                              JW\n         LA    R11,X'FFF'(,R12)        \\                             JW\n         USING RECVEXIT+X'FFF',R11      > addressability of RECVEXIT JW\n         LA    R9,X'FFF'(,R11)         /                             JW\n         LA    R9,1(,R9)              /                              JW\n         USING RECVEXIT+X'1FFF',R9   /                               JW\n         B     DOGOODM                say good morning or good night JW\n         SPACE 2                                                     JW\n         LTORG ,\n         SPACE 2\n*                          3C5D7F00 CUT FROM ALL DATA STREAMS BY  GP@P6\nQUERY    DC    X'F3000501FF02'      write structured field, query    JW\nLQUERY   EQU   *-QUERY              length of WSF QUERY              JW\n         SPACE 2\n         DROP  ,\n         EJECT ,\nSTATEXIT DS    0H\n         LR    R12,R15\n         USING STATEXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    STATEND                  YES, ALL DONE\n         SPACE 1\n         STM   R15,R1,REGSAVE         SAVE STATUS\n         SPACE 1\n         LA    R15,4                  RPL PREFIX LENGTH\n         LCR   R15,R15\n         L     R4,0(R15,R6)           FETCH PREFIX VALUE\n         USING CIDENTRY,R4\n         SPACE 1\n         LA    R3,DWORD\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(FDBK),LENGTH=4,               X\n               AREA=(R3),MF=(G,WORKAREA)   GET RPL FEEDBACK\n         CHKERR SHOW-RPL\n         L     R3,DWORD               FETCH FEEDBACK VALUE\n         SPACE 1\n         ICM   R15,B'1111',REGSAVE    RPL GO OK?\n         BZ    GIVESTAT                 YES, GIVE STATUS\n         SPACE 1\n         LA    R3,DWORD\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(RTNCD,FDBK2),                 X\n               AREA=(R3),LENGTH=12,MF=(G,WORKAREA)\n         CHKERR SHOW-RPL\n         SPACE 1\n         CLI   DWORD+3,X'14'          RTCND=14\n         BNE   FAILSTAT                 NO, NOT EXPECTED ERROR\n         CLI   DWORD+7,X'4C'          FDBK2=4C?\n         BE    GIVSTAT0                 UNKNOWN/INACTIVE LU\n         CLI   DWORD+7,X'53'          FDBK2=53?\n         BE    GIVSTAT0                 UNKNOWN/INACTIVE LU\n         SPACE 1\nFAILSTAT DS    0H\n         CHKERR *UNCOND*,TYPE=ABORT,SAVE=NO    FAIL ON INQUIRE ERROR\n         SPACE 1\nGIVSTAT0 DS    0H\n         LA    R3,36                  INVALID RETURN CODE\n         SPACE 1\nGIVESTAT DS    0H\n         SLL   R3,1                   *2\n         LA    R3,STATUSMS(R3)        -> TABLE ENTRY\n         LM    R2,R3,0(R3)            FETCH SKELETON ADDR, LENGTH\n         MVC   WORKAREA(*-*),0(R2)    MOVE MODEL\n         EX    R3,*-6                 COPY SKELETON\n         SPACE 1\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),CIDAPPLN       INSERT APPLID\n         XC    CIDAPPLN,CIDAPPLN      CLEAR IT\n         SPACE 1\n         ST    R4,MSGTERM             remember terminal table addr   JW\n         STH   R3,MSGTXTLN            store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         L     R2,CIDCID\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),ARG=(R2),   X\n               RESPOND=(EX,FME,NRRN),                                  X\n               BRACKET=(NBB,NEB),POST=SCHED,EXIT=(R0),CHNGDIR=(CMD)    X\n                                      GIVE APPLICATION STATUS\n         CHKERR SEND\n         SPACE 1\nSTATEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\nSTATUSMS DC    0F'0'\n         DC    A(STATUSM1,LSTATSM1)   RC = 0\n         DC    A(STATUSM2,LSTATSM2)        4\n         DC    A(STATUSM3,LSTATSM3)        8\n         DC    A(STATUSM4,LSTATSM4)        12\n         DC    A(STATUSM5,LSTATSM5)        16\n         DC    2X'00666666'                20\n         DC    2X'00666666'                24\n         DC    2X'00666666'                28\n         DC    2X'00666666'                32\n         DC    A(STATUSM6,LSTATSM6)        36\n         SPACE 1\nSTATUSM1 DC    C'Application ???????? is active'                     JW\nLSTATSM1 EQU   *-STATUSM1\n         SPACE 2\nSTATUSM2 DC    C'Application ???????? is not active'                 JW\nLSTATSM2 EQU   *-STATUSM2\n         SPACE 2\nSTATUSM3 DC    C'Application ???????? active, MACRF=NLOGON'          JW\nLSTATSM3 EQU   *-STATUSM3\n         SPACE 2\nSTATUSM4 DC    C'Application ???????? active, logons are stopped'    JW\nLSTATSM4 EQU   *-STATUSM4\n         SPACE 2\nSTATUSM5 DC    C'Application ???????? ACTIVE, logons quiesced'       JW\nLSTATSM5 EQU   *-STATUSM5\n         SPACE 2\nSTATUSM6 DC    C'Application ???????? not defined to VTAM'           JW\nLSTATSM6 EQU   *-STATUSM6\n         SPACE 2\n         DROP  ,\n         EJECT ,\nBINDEXIT DS    0H\n         LR    R12,R15\n         USING BINDEXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         CHKERR CHECK                 FAIL ON INQUIRE ERROR\n         SPACE 1\n         LA    R3,RECVAREA\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA),                        X\n               AREA=(R3),LENGTH=L'RECVAREA,MF=(G,WORKAREA)\n         CHKERR SHOW-RPL\n         SPACE 1\n         L     R7,RECVAREA\n         USING ISTDBIND,R7\n         SPACE 1\n         L     R4,=A(CIDENTRY-CIDBIND)  OFFSET TO BUFFER\n         LA    R4,0(R4,R7)            -> CIDENTRY\n         USING CIDENTRY,R4\n         SPACE 1\n         LA    R1,BINSPRIR            -> DEFAULTS\n         SPACE 1\n         CLI   BINPRESZ,BINPSZRC      ALTERNATES?\n         BNE   *+4+4                    NOPE\n         LA    R1,BINSALTR              YES, USE THEM\n         SPACE 1\n         XR    R0,R0                  CLEAR\n         IC    R0,0(,R1)              FETCH ROWS\n         STH   R0,CIDROWS             SAVE VALUE\n         IC    R0,1(,R1)              FETCH COLUMNS\n         STH   R0,CIDCOLS             SAVE VALUE\n         SPACE 1\n         FREERPL RPL=(R6)\n         SPACE 1\n         CLI   BINFM,3                SNA terminal?                  JW\n         BNE   BINDDONE               no, must be local, we're done  JW\n         CLC   CIDROWS(4),=F'0'       screen size found in bind?     JW\n         BNE   BINDDONE               yes, it's SNA 3270, we're done JW\n         XR    R0,R0                  \\                              JW\n         STH   R0,CIDROWS              \\                             JW\n         STH   R0,CIDROW2               > indicate linemode          JW\n         LA    R0,80                   /                             JW\n         STH   R0,CIDCOLS             /                              JW\n         SPACE 1                                                     JW\nBINDDONE L     R14,SAVE2                                             JW\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         DROP  ,\n         EJECT ,\nREQEXIT  DS    0H\n         LR    R12,R15\n         USING REQEXIT,R12\n         SPACE 1\n         LR    R11,R1                 SAVE PARM ADDRESS\n         SPACE 1\n         L     R8,0(,R11)             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         L     R3,4(,R11)             -> SYMBOLIC NAME\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R0,NUMCIDS\nFINDTERM DS    0H\n         CLC   CIDNAME,0(R3)          FOR THIS TERMINAL\n         BE    GOTTERM                  YES, GOT THE TERMINAL\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> SLOT\n         BCT   R0,FINDTERM            AND CHECK IT\n         SPACE 1\n         CHKERR *UNCOND*,TYPE=ABORT SOMETHING IS WRONG\n         SPACE 1\nGOTTERM  DS    0H\n         MVC   WORKAREA(LDROPWTO),IDROPWTO\n         SETINSRT ,\n         MVC   0(8,R1),0(R3)          INSERT TERMINAL ID\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         L     R7,CIDCID              FETCH CID\n         XC    CIDENTRY(CIDLENTH),CIDENTRY  ENTRY NO LONGER IN USE\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE TERMINAL\n         CHKERR CLSDST\n         SPACE 1\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nIDROPWTO WTO   'TESTVTM2 - RELREQ ENTERED FOR ???????? - DROPPING',    X\n               ROUTCDE=11,DESC=7,MF=L\nLDROPWTO EQU   *-IDROPWTO\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nLOSTEXIT DS    0H\n         LR    R12,R15\n         USING LOSTEXIT,R12\n         SPACE 1\n         LR    R11,R1                 SAVE PARM ADDRESS\n         SPACE 1\n         L     R8,0(,R11)             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         L     R4,8(,R11)             -> TABLE ENTRY\n         USING CIDENTRY,R4\n         SPACE 1\n         MVC   WORKAREA(LLOSTWTO),ILOSTWTO\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL ID\n         SPACE 1\n         OC    CIDCID,CIDCID          ALREADY CLEARED?\n         BNZ   *+4+6                    NO\n         MVC   0(8,R1),=CL8'*UNKNOWN'   YES, WHATS UP?\n         SPACE 1\n         L     R0,12(,11)\n         CVD   R0,DWORD\n         SETINSRT ,\n         UNPK  0(2,R1),DWORD+6(2)\n         OI    1(R1),X'F0'\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         OC    CIDCID,CIDCID          ALREADY CLEARED?\n         BZ    LOSTEND                  YES, SKIP THE CLSDST\n         SPACE 1\n         XC    CIDENTRY(CIDLENTH),CIDENTRY  CLEAR TABLE ENTRY\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         L     R7,4(,R11)             FETCH CID\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE TERMINAL\n         CHKERR CLSDST\n         SPACE 1\nLOSTEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nILOSTWTO WTO   'TESTVTM2 - LOSTERM ENTERED ON ????????, CODE = ??',    X\n               ROUTCDE=11,DESC=7,MF=L\nLLOSTWTO EQU   *-ILOSTWTO\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nRECVEXIT DS    0H\n         LR    R12,R15\n         USING RECVEXIT,R12\n         LA    R11,RECVEXIT+X'FFF'\n         USING RECVEXIT+X'FFF',R11\n         LA    R9,X'FFF'(,R11)        third base ..                  JW\n         LA    R9,1(,R9)                        .. for ..            JW\n         USING RECVEXIT+X'1FFF',R9                    .. RECVEXIT    JW\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    RECVEND                  YES, ALL DONE\n         SPACE 1\n         LR    R4,R15                 SAVE RETURN CODE\n         LR    R5,R0                   AND REASON CODE\n         SPACE 1\n         LA    R3,RECVBUFF\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA,USER,ARG),               X\n               AREA=(R3),LENGTH=LRECVBUF,MF=(G,WORKAREA)\n         CHKERR SHOW-RPL\n         L     R7,RECVARG\n         SPACE 1\n         ICM   R1,B'1111',RECVUSER    -> TABLE ENTRY\n         BZ    REDRIVE                  UNKNOWN TERMINAL\n         CLI   0(R1),0                UNSOLICITED?\n         BE    REDRIVE                  YES, IGNORE THE READ\n         SPACE 1\n         LR    R0,R5                  RESTORE REASON CODE\n         LTR   R15,R4                 WAS RECEIVE OK?\n         BZ    TESTFME                  YEP, CHECK OUT FME\n         SPACE 1\n         LA    R3,WORKAREA\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(RTNCD,FDBK2,USENSEI),         X\n               AREA=(R3),LENGTH=12,MF=(G,WORKAREA+12)\n         CHKERR SHOW-RPL\n         SPACE 1\n         CLI   WORKAREA+3,4           RTCND=4?\n         BNE   BAD$RECV                 NO, NOT HARDWARE ERROR\n         SPACE 1\n         CLI   WORKAREA+7,3           FDBK2=3?\n         BNE   BAD$RECV                 NO, NOT HARDWARE ERROR\n         SPACE 1\n         RECEIVE RPL=(R6)             REDRIVE THE RECEIVE\n         CHKERR RECEIVE\n         SPACE 1\n         UNPK  DWORD(5),WORKAREA+10(3)  GET SENSE INFO\n         TR    DWORD(4),HEXTABLE-C'0' MAKE PRINTABLE HEX\n         SPACE 1\n         MVC   WORKAREA(LFORCWTO),IFORCWTO\n         SETINSRT ,\n         L     R4,RECVUSER            -> TABLE ENTRY\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R4)  INSERT TERMINAL ID\n         SPACE 1\n         SETINSRT ,\n         MVC   0(4,R1),DWORD          INSERT SENSE INFO\n         SPACE 1\n         WTO   MF=(E,WORKAREA)        REPORT THE STUFF\n         SPACE 1\n         XC    0(CIDLENTH,R4),0(R4)   CLEAR TERMINAL INFO\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         CLSDST RPL=(1),OPTCD=(ASY,RELEASE),ARG=(R7),EXIT=(R0)         X\n                                      RELEASE THE REMINAL\n         CHKERR CLSDST\n         SPACE 2\n         B     RECVEND\n         SPACE 2\nBAD$RECV DS    0H\n         LR    R0,R5                  RESTORE REASON CODE\n         LR    R15,R4                         ERROR CODE\n         CHKERR *UNCOND*,TYPE=ABORT\n         SPACE 1\nTESTFME  DS    0H\n         TESTCB AM=VTAM,RPL=(R6),RESPOND=NFME,ERET=ABEND$CB,           X\n               MF=(G,WORKAREA)\n         BE    CHKRESP\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=RESP,RESPOND=(EX,FME,NRRN),OPTCD=ASY,     X\n               ARG=(R7),EXIT=(R0)\n         CHKERR SEND\n         SPACE 1\nCHKRESP  DS    0H\n         L     R5,RECVAREA\n         MVC   CARD,=256C' '          all blanks                     JW\n         L     R4,RECVUSER            get terminal table entry add   JW\n         USING CIDENTRY,R4            tell assembler                 JW\n         CLC   CIDROW2,=XL2'0000'     linemode terminal?             JW\n         BE    CHKTTYRS                yes, edit linemode response   JW\n         DROP  R4                     don't need terminal any more   JW\n         XC    CARD(3),CARD           FIRST AID ALONE\n         CLI   0(R5),X'88'            query reply?                   JW\n         BNE   *+4+6+4                  no, translate input          JW\n         MVC   CARD,0(R5)               yes, copy input              JW\n         B     *+4+6                  skip translate                 JW\n         OC    CARD,0(R5)\n         CLI   3(R5),X'11'            LEADING SBA\n         BNE   *+4+6+6                 no, skip compress             JW\n         MVC   CARD+3(L'CARD-6),CARD+6 yes, compress the card ..     JW\n         MVC   3(L'CARD-6,R5),6(R5)     .. and the original input    JW\n         B     *+16                   skip linemode edit             JW\nCHKTTYRS TR    0(256,R5),REMCRLF      linemode: blank CRLF and ..    JW\n         OC    CARD+3(253),0(R5)       .. translate to uppercase     JW\n         SPACE 1                                                     JW\n         CLC   =C'SEND ',CARD+3       SEND command?                  JW\n         BE    *+10                   yes, keep input for mixed case JW\n         MVC   0(256,R5),=256C' '     CLEAR INPUT BUFFER             JW\n         SPACE 1\n         CLC   =C'SENDF2 ',CARD+3\n         BE    DOSENDF2\n         SPACE 1\n         RECEIVE RPL=(R6)             REDRIVE IT\n         CHKERR RECEIVE\n         SPACE 1\n         LA    R4,CANTCLER\n         CLI   CARD,X'6D'             CLEAR KEY?\n         BE    RESEND                   TOO BAD\n         SPACE 1\n         LA    R4,WHYINTRP\n         CLI   CARD,X'6C'             PA1 KEY?\n         BE    RESEND                   TOO BAD\n         SPACE 1\n         OC    CARD(3),CARD           ALL ZEROES INPUT?\n         BZ    SENDELAY                 SIGNAL COMPLETED\n         SPACE 1                                                     JW\n         CLI   CARD,X'88'             query reply?                   JW\n         BE    QRYREPLY                 analyze                      JW\n         SPACE 1\n         CLC   =C'LOGOFF',CARD+3\n         BE    DOLOGOFF\n         SPACE 1\n         CLC   =C'SHUTDOWN',CARD+3\n         BE    DOSHUTD\n         SPACE 1\n         CLC   =C'SHOWTERM',CARD+3\n         BE    DOSHOWT\n         SPACE 1\n         CLC   =C'STATS',CARD+3\n         BE    DOSHOWS\n         SPACE 1\n         CLC   =C'SHOWALL',CARD+3\n         BE    DOSHOWA\n         SPACE 1\n         CLC   =C'SHOW TERM',CARD+3\n         BE    DOSHOWT\n         SPACE 1\n         CLC   =C'SHOW ALL',CARD+3\n         BE    DOSHOWA\n         SPACE 1\n         CLC   =C'STATUS ',CARD+3\n         BE    DOSTATUS\n         SPACE 1\n         CLC   =C'SHOW APP',CARD+3\n         BE    DOSHOWP\n         SPACE 1\n         CLC   =C'SEND ',CARD+3\n         BE    DOSEND\n         SPACE 1\n         LA    R4,PROMPT2\n         CLC   =C'PROMPT2',CARD+3\n         BE    RESEND\n         SPACE 1\n         LA    R4,PROMPT1\n         B     RESEND\n         SPACE 1\nDOLOGOFF DS    0H\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         MVC   WORKAREA(LLOGMSG),LOGMSG get message                  JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LLOGMSG     store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         L     R4,RECVUSER            -> TABLE ENTRY                 JW\n         CLC   CIDROW2-CIDENTRY(,R4),=XL2'0000' linemode terminal?   JW\n         BNE   *+16                    no, leave msg alone           JW\n         L     R5,MSGLEN               yes, remove ..                JW\n         SH    R5,NLONLY                .. command ..                JW\n         ST    R5,MSGLEN                 .. prompt                   JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,EB),ARG=(R7),EXIT=(R0)\n         CHKERR SEND\n         SPACE 1\n         MVC   WORKAREA(LLOFFWTO),ILOFFWTO\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R4)  INSERT TERMINAL ID\n         SPACE 1\n         WTO   MF=(E,WORKAREA)        REPORT THE STUFF\n         SPACE 1\nCLEARCID XC    0(CIDLENTH,R4),0(R4)   CLEAR THE ENTRY                JW\n         SPACE 1\n         SCHEDCLS ARG=(R7)            SCHEDULE CLSDST\n         SPACE 2\n         B     RECVEND\n         SPACE 2\nDOSHOWT  DS    0H\n         L     R4,RECVUSER            -> TABLE ENTRY\n         USING CIDENTRY,R4\n         SPACE 1\n         MVC   WORKAREA(LTERMMSG),TERMMSG  PRIME MESSAGE\n         SPACE 1\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),CIDNAME        INSERT TERMINAL NAME\n         SPACE 1\n         LH    R0,CIDROWS\n         CVD   R0,DWORD\n         SETINSRT TYPE=SEND\n         UNPK  0(3,R1),DWORD+5(3)     INSERT ROWS                    JW\n         OI    2(R1),X'F0'                                           JW\n         SPACE 1\n         LH    R0,CIDCOLS\n         CVD   R0,DWORD\n         SETINSRT TYPE=SEND\n         UNPK  0(3,R1),DWORD+5(3)     INSERT COLUMNS                 JW\n         OI    2(R1),X'F0'                                           JW\n         SPACE 1\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         ST    R4,MSGTERM             remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LTERMMSG    store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         DROP  R4\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSHOWP  DS    0H\n         MVC   WORKAREA(LAPPLMSG),IAPPLMSG  PRIME MESSAGE\n         SPACE 1\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),APPLID         INSERT APPLID\n         SPACE 1\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LAPPLMSG    store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSENDF2 DS    0H\n         L     R4,RECVUSER            -> TABLE ENTRY                 JW\n         USING CIDENTRY,R4                                           JW\n         LA    R5,CIDBIND             bind data                      JW\n         USING ISTDBIND,R5                                           JW\n         CLI   BINFM,3                SNA terminal?                  JW\n         BNE   DOTHEF2                no, must be local, go for it   JW\n         SPACE 1                                                     JW\n         DROP  R4                                                    JW\n         DROP  R5                                                    JW\n         GETRPL R5                                                   JW\n         SPACE 1                                                     JW\n         MVC   WORKAREA(LF2LOCAL),F2LOCAL get message                JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LF2LOCAL    store length of message text   JW\n         MAKEMSG                      add terminal specific          JW\n         MODCB RPL=(R5),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)                                       JW\n         SEND  RPL=(R5),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,EB),ARG=(R7),EXIT=(R0)        JW\n         CHKERR SEND                                                 JW\n         SPACE 1                                                     JW\n         B     REDRIVE                                               JW\n         SPACE 1                                                     JW\nDOTHEF2  GETRPL ,                                                    JW\n         L     R0,=A(F2EXIT1)\n         SEND  RPL=(1),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY,CS),          X\n               AREA==X'F2',RECLEN=1,RESPOND=(EX,FME,NRRN),             X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         B     REDRIVE\n         SPACE 2\nDOSHOWS  DS    0H\n         MVC   WORKAREA(LSTATMSG),STATMSG\n         SETINSRT TYPE=SEND\n         L     R15,RPLTOTAL\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         SETINSRT TYPE=SEND\n         L     R15,RPLREQST\n         CVD   R15,DWORD\n         UNPK  0(3,R1),DWORD+6(2)     INSERT COUNT\n         OI    2(R1),X'F0'\n         SPACE 1\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LSTATMSG    store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSHOWA  DS    0H\n         MVC   WORKAREA(LSHALMSG),SHALMSG\n         SPACE 1\n         LA    R5,CIDLIST\n         USING CIDENTRY,R5\n         LA    R0,NUMCIDS\nDOSHOWA1 DS    0H\n         OC    CIDCID,CIDCID          ENTRY ACTIVE?\n         BZ    DOSHOWA2                 NO, SKIP IT\n         SPACE 1\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME        COPY ID\n         SPACE 1\nDOSHOWA2 DS    0H\n         LA    R5,CIDENTRY+CIDLENTH   -> NEXT ENTRY\n         BCT   R0,DOSHOWA1            AND CHECK IT\n         SPACE 1\n         DROP  R5\n         SPACE 1\n         LA    R0,WORKAREA-8\n         SR    R1,R0                  LENGTH OF MESSAGE\n         LR    R5,R1                  SAFE REGISTER\n         SPACE 1\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table addr   JW\n         STH   R5,MSGTXTLN            store length of message text   JW\n         MAKEMSG                      add terminal specific datas    JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSHUTD  DS    0H\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         MVC   WORKAREA(LSHUTDMS),SHUTDMSG get message               JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table add    JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LSHUTDMS    store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         L     R4,RECVUSER            -> TABLE ENTRY                 JW\n         CLC   CIDROW2-CIDENTRY(,R4),=XL2'0000' linemode terminal?   JW\n         BNE   *+16                    no, leave msg alone           JW\n         L     R5,MSGLEN               yes, remove ..                JW\n         SH    R5,NLONLY                .. command ..                JW\n         ST    R5,MSGLEN                 .. prompt                   JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,EB),ARG=(R7),EXIT=(R0)\n         CHKERR SEND\n         SPACE 1\n         MVC   WORKAREA(LSHUTWTO),ISHUTWTO\n         SETINSRT ,\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R4)\n         WTO   MF=(E,WORKAREA)\n         SPACE 1\n         POST  STOPECB\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nDOSTATUS DS    0H\n         L     R4,RECVUSER\n         MVC   CIDAPPLN-CIDENTRY(,R4),CARD+10  SAVE APPLID\n         SPACE 1\n         TRT   CIDAPPLN-CIDENTRY(,R4),TABLE51\n         BZ    STATUS2\n         SPACE 1\n         LA    R2,CIDAPPLN+L'CIDAPPLN-1-CIDENTRY(,R4)\n         SR    R2,R1                  LENGTH TO BLANK\n         MVC   0(*-*,R1),=8C' '       BLANK MODEL\n         EX    R2,*-6                 BLANK THE END\n         SPACE 1\nSTATUS2  DS    0H\n         LA    R2,CIDAPPLN-CIDENTRY(,R4)  -> APPLICATION NAME\n         SPACE 1\n         L     R4,NIBLENTH\n         MH    R4,=AL2(NUMCIDS)\n         A     R4,NIBADDR\n         MODCB NIB=(R4),NAME=(*,0(R2)),AM=VTAM,MF=(G,WORKAREA)         X\n                                      INSERT SPECIFIED APPLID IN NIB\n         CHKERR MOD-NIB\n         SPACE 1\n         GETRPL ,                     GET AN RPL\n         SPACE 1\n         LA    R15,4                  PREFIX LENGTH\n         LCR   R15,R15\n         AR    R15,R1                 -> PREFIX\n         MVC   0(4,R15),RECVUSER      SAVE CID POINTER IN RPL PREFIX\n         SPACE 1\n         L     R0,=A(STATEXIT)\n         L     R2,RECVUSER\n         LA    R2,CIDBIND+24-CIDENTRY(R2)\n         INQUIRE RPL=(1),EXIT=(R0),NIB=(R4),OPTCD=(ASY,APPSTAT),       X\n               AREA=(R2),AREALEN=4    IS OTHER APPLICATION ACTIVE?\n         SPACE 1\n         B     RECVEND                ALL SCHEDULED\n         SPACE 2\nDOSEND   DS    0H\n         LA    R1,CARD+8+8\n         TRT   CARD+8(8),BLANKTAB     FIND TERMINAL ID\n         ST    R1,TEXTSTRT\n         LA    R0,CARD+8\n         SR    R1,R0                  EX LENGTH OF ID\n         MVC   DWORD,=8C' '\n         MVC   DWORD(*-*),CARD+8\n         EX    R1,*-6                 COPY TARGET TERMINAL\n         SPACE 1\n         L     R4,RECVUSER                                           JW\n         CLC   CIDROW2-CIDENTRY(,R4),=XL2'0000' linemode terminal?   JW\n         BNE   *+14                    no, go 3270 restore           JW\n         MVC   CARD+3(253),0(R5)      restore input (linemode)       JW\n         B     *+10                   skip 3270 restore              JW\n         MVC   CARD,0(R5)             restore input (3270)           JW\n         MVC   0(256,R5),=256C' '     clear input buffer             JW\n         SPACE 1                                                     JW\n         LA    R4,CIDLIST\n         USING CIDENTRY,R4\n         LA    R0,NUMCIDS\nSENDFIND DS    0H\n         CLC   CIDNAME,DWORD          TERMINAL LOGGED ON?\n         BE    DOTHESND                 YES, DO THE SEND\n         SPACE 1\n         LA    R4,CIDENTRY+CIDLENTH   -> NEXT SLOT\n         BCT   R0,SENDFIND            AND CHECK IT\n         SPACE 1\n         MVC   WORKAREA(LSENDMS1),ISENDMS1  PRIME FAILURE\n         LA    R4,LSENDMS1\n         B     SENDDONE\n         SPACE 1\nDOTHESND DS    0H\n         LA    R14,WORKAREA                                          JW\n         CLC   CIDROW2,=XL2'0000'     3270 terminal?                 JW\n         BNE   *+12                    yes, go insert message        JW\n         MVI   0(R14),NL               no, insert newline ..         JW\n         LA    R14,1(,R14)                 .. and indent             JW\n         MVC   0(LSENDMS9,R14),ISENDMS9 copy skeleton                JW\n         SPACE 1\n         SETINSRT TYPE=SEND\n         L     R15,RECVUSER\n         MVC   0(8,R1),CIDNAME-CIDENTRY(R15)\n         SPACE 1\n         LA    R1,CARD+255                                           JW\n         TRT   CARD+3(L'CARD-3),TABLE51\n         SPACE 1\n         L     R14,TEXTSTRT\n         SR    R1,R14                  LENGTH OF MESSAGE\n         ST    R1,24(,R13)             SAVE IT\n         SPACE 1\n         SETINSRT TYPE=SEND\n         L     R15,24(,R13)            LOAD LENGTH\n         L     R14,TEXTSTRT                 ADDRESS\n         MVC   0(*-*,R1),1(R14)        MOVE MODEL                    JW\n         EX    R15,*-6                 COMPLETE THE MESSAGE\n         SPACE 1\n         TM    BINCMNP2+CIDBIND-ISTDBIND,BINHDXFF  TARGET 1/2 DUPLEX?\n***                                                                  JW\n*** For yet to be analyzed reasons the below SEND OPTCD=SIGNAL       JW\n*** macro doesn't trigger a reply. The only LUs on MVS 3.8j that     JW\n*** formally would require half duplex communication are 3767/3270   JW\n*** attached through 3705/NCP or 3791L. But these in fact work       JW\n*** full duplex flawlessly. For that reason we don't issue signal    JW\n*** here but unconditionally send the message. This might need to    JW\n*** be reviewed in more complex scenarios.                           JW\n***                                                                  JW\n***      BZ    SENDNOW                               NO, SEND NOW    JW\n         B     SENDNOW                send unconditionally...        JW\n         SPACE 1\n         GETMAIN RU,LV=WORKLEN,SP=12   GET A MESSAGE BUFFER\n         MVC   0(LSENDMS9,R1),WORKAREA  COPY MESSAGE BUFFER\n         ST    R1,CIDPENDM             SAVE PENDING MESSAGE\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         L     R2,CIDCID\n***                                                                  JW\n*** SEND macro with CONTROL=SIGNAL give alignment error,             JW\n*** thus we expand it manually here                                  JW\n***                                                                  JW\n*        SEND  RPL=(1),STYPE=REQ,CONTROL=SIGNAL,OPTCD=(ASY),          X\n*              SIGDATA=X'00010000',RESPOND=(EX,FME,NRRN),             X\n*              POST=SCHED,ARG=(R2),EXIT=(R0),BRACKET=(NBB,NEB)       JW\n         CNOP  0,4                                                   JW\n         TM    69(1),X'FF'       IS THE RPL ACTIVE?                  JW\n         BO    MAN0850           YES BR AROUND MODIFY CODE           JW\n         ST    R2,36(1)          PUT NEW ARGUMENT IN THE RPL         JW\n         NI    68(1),X'FB'       SET NIB POINTER OFF                 JW\n         ST    R0,8(1)           PUT EXIT ROUTINE ADDRESS IN THE RPL JW\n         NI    40(1),X'FE'       SET ECB FLAG OFF                    JW\n         NI    68(1),X'BF'       SET NOEXIT BIT OFF                  JW\n         OI    68(1),X'20'       SET EXIT BIT ON                     JW\n         OI    40(1),X'08'       TURN ON THE ASY BIT                 JW\n         OI    20(1),X'04'       SET RPLEX ON (RESPOND=EX)           JW\n         NI    20(1),X'FD'       SET RPLNFME OFF (RESPOND=FME)       JW\n         NI    20(1),X'FE'       SET RPLRRN OFF (RESPOND=NRRN)       JW\n         OI    20(1),X'80'       SET RPLSCHED FLAG ON (POST=SCHED)   JW\n         XC    21(3,1),21(1)     SET CONTROL CODES OFF               JW\n         OI    22(1),X'10'       SET RPLSIGNL ON (CONTROL=SIGNAL)    JW\n         NI    16(1),X'7F'       SET RPLBB OFF (BRACKET=NBB)         JW\n         NI    16(1),X'BF'       SET RPLEB OFF (BRACKET=NEB)         JW\n         CNOP  0,4               align signal data                   JW\n         B     *+8               branch around signal data           JW\n         DC    XL4'00010000'     SIGNAL DATA FIELD                   JW\n         L     15,*-4            GET SIGNAL DATA                     JW\n         ST    15,108(1)         PUT SIGNAL DATA IN THE RPL          JW\n         NI    17(1),X'7F'       SET RPLSRESP OFF (STYPE=REQ)        JW\nMAN0850     EQU   *                                                  JW\n         LA    0,X'22'           LOAD REQUEST CODE                   JW\n         L     15,24(1)          GET ADDRESS OF ACB                  JW\n         L     15,8(15)          GET ADDRESS OF INTERFACE RTN        JW\n         BALR  14,15             GO TO THE INTERFACE ROUTINE         JW\n         CHKERR SEND\n         SPACE 1\n         B     SENDREPT\n         SPACE 1\nSENDNOW  DS    0H\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         ST    R4,MSGTERM             remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LSENDMS9    store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         L     R2,CIDCID\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),ARG=(R2),   X\n               RESPOND=(EX,FME,NRRN),                                  X\n               BRACKET=(NBB,NEB),POST=SCHED,EXIT=(R0)                  X\n                                      SEND THE MESSAGE\n         CHKERR SEND\n         SPACE 1\nSENDREPT DS    0H\n         MVC   WORKAREA(LSENDMS2),ISENDMS2\n         LA    R4,LSENDMS2\n         SPACE 1\nSENDDONE DS    0H\n         SETINSRT TYPE=SEND\n         MVC   0(8,R1),DWORD\n         SPACE 1\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table add    JW\n         STH   R4,MSGTXTLN            store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nSENDELAY DS    0H\n         SPACE 1\n         GETRPL R6                                                   JW\n         L     R4,RECVUSER            terminal table address         JW\n         L     R5,CIDPENDM\n         MVC   WORKAREA(LSENDMS9),0(R5) restore message buffer       JW\n         ST    R4,MSGTERM             remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LSENDMS9    store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),ARG=(R7),   X\n               RESPOND=(EX,FME,NRRN),                                  X\n               BRACKET=(NBB,NEB),POST=SCHED,EXIT=(R0),CHNGDIR=(CMD)    X\n                                      SEND THE DELAYED MESSAGE\n         CHKERR SEND\n         SPACE 1\n         XC    CIDPENDM,CIDPENDM\n         FREEMAIN RU,LV=WORKLEN,SP=12,A=(R5)  FREE THE BUFFER\n         SPACE 1\n         B     RECVEND\n         SPACE 2\nQRYREPLY DS    0H                analyze query reply                 JW\n         LA    R5,CARD+1         point past the AID                  JW\n         LA    R3,DWORD          target for RECLEN                   JW\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(RECLEN),                      X\n               AREA=(R3),LENGTH=4,MF=(G,WORKAREA) get data length    JW\n         CHKERR SHOW-RPL         terminate in case of any error      JW\n         L     R3,DWORD          copy data length                    JW\n         SLR   R4,R4             clear for inserts                   JW\n         BCT   R3,QUERYPRS       decrement for AID                   JW\n         B     QERYDONE          just in case the AID was it         JW\nQUERYPRS CLI   2(R5),X'81'       query reply ID?                     JW\n         BNE   NXTSBFLD          no, ignore this structured field    JW\n         CLI   3(R5),X'A6'       query reply implicit partition ID?  JW\n         BE    QUERYIMP          yes, process it                     JW\nNXTSBFLD ICM   R4,3,0(R5)        load structured field length        JW\n         SR    R3,R4             subtract it from TGET data length   JW\n         BNP   QERYDONE          end of Query structured fields      JW\n         AR    R5,R4             point to next sub-field             JW\n         B     QUERYPRS          examine it                          JW\nQUERYIMP CLI   1(R5),17          length less than seventeen?         JW\n         BL    QERYDONE          yes, ignore                         JW\n         CLI   6(R5),11          parameter length less than eleven?  JW\n         BL    QERYDONE          yes, ignore                         JW\n         CLI   7(R5),1           implicit partition sizes?           JW\n         BNE   QERYDONE          no, ignore                          JW\n         L     R4,RECVUSER       get CIDENTRY address ..             JW\n         USING CIDENTRY,R4        .. and tell assembler              JW\n         CLI   16(R5),0          alternate lines defined?            JW\n         BE    QUERYPRM          no, use primary screen              JW\n         MVC   CIDROWS+1(1),16(R5) copy alternate lines              JW\n         MVC   CIDCOLS+1(1),14(R5) copy alternate columns            JW\n         B     CALCROW2          done                                JW\nQUERYPRM MVC   CIDROWS+1(1),12(R5) copy primary lines                JW\n         MVC   CIDCOLS+1(1),10(R5) copy primary columns              JW\nCALCROW2 LH    R0,CIDCOLS        get line length                     JW\n         BAL   R14,BUFFCALC      compute address of 2nd row on scrn  JW\n         STH   R0,CIDROW2        remember in terminal table entry    JW\n         LH    R1,CIDROWS        \\                                   JW\n         SRL   R1,1               \\                                  JW\n         SLL   R1,1                \\                                 JW\n         SH    R1,=H'1'             \\ compute upper left             JW\n         MH    R1,CIDCOLS           / corner of cat on screen        JW\n         LA    R0,30               /                                 JW\n         SR    R1,R0              /                                  JW\n         SRL   R1,1              /                                   JW\n         LR    R0,R1             \\                                   JW\n         BAL   R14,BUFFCALC       >  1st row of cat -> term table\n         STH   R0,CIDCAT1        /                                   JW\n         LH    R0,CIDCOLS        \\                                   JW\n         AR    R1,R0              \\                                  JW\n         LR    R0,R1               > 2nd row of cat -> term table\n         BAL   R14,BUFFCALC       /                                  JW\n         STH   R0,CIDCAT2        /                                   JW\n         LH    R0,CIDCOLS        \\                                   JW\n         AR    R1,R0              \\                                  JW\n         LR    R0,R1               > 3rd row of cat -> term table\n         BAL   R14,BUFFCALC       /                                  JW\n         STH   R0,CIDCAT3        /                                   JW\n         LH    R0,CIDCOLS        \\                                   JW\n         AR    R1,R0              \\                                  JW\n         LR    R0,R1               > 4th row of cat -> term table\n         BAL   R14,BUFFCALC       /                                  JW\n         STH   R0,CIDCAT4        /                                   JW\n         SPACE 1                                                     JW\nQERYDONE GETRPL R6               get new RPL                         JW\n         MODCB RPL=(R6),ARG=(R7),MF=(G,WORKAREA) insert CID          JW\n*                                                                    JW\n*                                none 3270 terminals enter directly  JW\n*                                from GOODMXIT here, no query        JW\n*                                                                    JW\nDOGOODM  ST    R4,MSGTERM             remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         LA    R5,FAILOGON         \\  good night message             JW\n         CR    R4,R5                > if reserve CIDENTRY            JW\n         BE    DOGOODN             /  is in use                      JW\n         MVC   WORKAREA(LFIRSTMS),FIRSTMSG get good morning message  JW\n         SETINSRT TYPE=SEND                                          JW\n         MVC   0(8,R1),APPLID         INSERT APPLID                  JW\n         MVI   MSGTXTLN+1,LFIRSTMS    store length of message text   JW\n         B     DOGOOD                 send good morning message      JW\nDOGOODN  MVC   WORKAREA(LFAILMSG),FAILMSG get good night message     JW\n         MVI   MSGTXTLN+1,LFAILMSG    store length of message text   JW\nDOGOOD   MAKEMSG                      add terminal specific data     JW\n         CR    R4,R5                  reserve CIDENTRY?              JW\n         BNE   *+26                    no, leave msg alone           JW\n         CLC   CIDROW2,=XL2'0000'     linemode terminal?             JW\n         BNE   *+16                    no, leave msg alone           JW\n         L     R5,MSGLEN               yes, remove ..                JW\n         SH    R5,NLONLY                .. command ..                JW\n         ST    R5,MSGLEN                 .. prompt                   JW\n         L     R0,=A(FREPLXIT)\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),EXIT=(R0),                 X\n               CHNGDIR=(CMD)          send good morning message      JW\n         CHKERR SEND                                                 JW\n         SPACE 1                                                     JW\n         L     R7,CIDCID-CIDENTRY(,R4) get CID                       JW\n         LA    R5,FAILOGON         \\  sign off silently              JW\n         CR    R4,R5                > if reserve CIDENTRY            JW\n         BE    CLEARCID            /  is in use                      JW\n         SPACE 1                                                     JW\n         DROP  R4                                                    JW\n         SPACE 1                                                     JW\n         B     RECVEND                                               JW\n         SPACE 2                                                     JW\nRESEND   DS    0H                                                    JW\n         GETRPL R6                                                   JW\n         SPACE 1                                                     JW\n         MVC   WORKAREA(70),0(R4)     get message                    JW\n         MVC   MSGTERM(4),RECVUSER    remember terminal table addr   JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,70          store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)                                       JW\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY),            X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         B     RECVEND\n         SPACE 1\nREDRIVE  DS    0H\n         RECEIVE RPL=(R6)\n         CHKERR RECEIVE\n         SPACE 1\n         B     RECVEND\n         SPACE 1\nRECVEND  DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nABEND$CB DS    0H\n         CHKERR *UNCOND*,TYPE=ABORT\n         SPACE 2\n*                                                                    JW\n*        ON ENTRY R0 HAS BINARY BUFFER ADDRESS.                      JW\n*        ON EXIT R0 HAS DATA STREAM BUFFER ADDRESS.                  JW\n*                                                                    JW\n*        IF THE BUFFER ADDRESS IS 4K OR MORE THEN 14-BIT ADDRESSING  JW\n*        IS OBVIOUSLY SUPPORTED.  12-BIT ADDRESSING IS ALWAYS SUP-   JW\n*        PORTED SO IT IS USED IF THE BUFFER ADDRESS IS LESS THAN 4K. JW\n*                                                                    JW\nBUFFCALC DS    0H                 GET CODE FOR 3270 BUFFER ADDRESS.  JW\n         CH    R0,=H'4095'        LOCATION GREATER THAN 4K (12 BITS) JW\n         BHR   R14                YES, NO CONVERSION TO BE DONE.     JW\n         STC   R0,DWORD+1         NO, DO ORIGINAL 3270 ADDRESSING.   JW\n         NI    DWORD+1,B'00111111' GET LOW-ORDER SIX-BIT NUMBER.     JW\n         SRL   R0,6                                                  JW\n         STC   R0,DWORD           GET HIGH-ORDER SIX-BIT NUMBER.     JW\n         TR    DWORD(2),BUFFTBL   CONVERT TO 3270 DATA STREAM CHARS. JW\n         ICM   R0,X'3',DWORD      SAVE IN BOTTOM TWO BYTES OF R0.    JW\n         BR    R14                RETURN TO MAINLINE.                JW\n         SPACE ,                                                     JW\nBUFFTBL  DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'   ABCDEFGHI\u00a2.<(+| JW\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'  &JKLMNOPQR!$*);\u00ac JW\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'  -/STUVWXYZ\u00a6,%_>? JW\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'  0123456789:#@'=\" JW\n         SPACE 2                                                     JW\n         LTORG ,\n         SPACE 2\nHEXTABLE DC    C'0123456789ABCDEF'\n         SPACE 2\nILOFFWTO WTO   'TESTVTM2 - TERMINAL ???????? HAS LOGGED OFF',          X\n               ROUTCDE=11,DESC=7,MF=L\nLLOFFWTO EQU   *-ILOFFWTO\n         SPACE 2\nIFORCWTO WTO   'TESTVTM2 - HARDWARE ERROR ON ???????? - SENSE = ????', X\n               ROUTCDE=11,DESC=7,MF=L\nLFORCWTO EQU   *-IFORCWTO\n         SPACE 2\nISHUTWTO WTO   'TESTVTM2 - SHUTDOWN COMMAND ACCEPTED FROM ????????',   X\n               ROUTCDE=11,DESC=7,MF=L\nLSHUTWTO EQU   *-ISHUTWTO\n         SPACE 2\nPROMPT1  DC    CL70'You get standard prompt # 1'                     JW\n         SPACE 1\nPROMPT2  DC    CL70'You have requested prompt # 2'                   JW\n         SPACE 1\nLOGMSG   DC    C'LOGOFF command accepted - returning to VTAM'        JW\nLLOGMSG  EQU   *-LOGMSG\n         SPACE 1\nSHUTDMSG DC    C'Shutdown now in progress'                           JW\nLSHUTDMS EQU   *-SHUTDMSG\n         SPACE 1\nCANTCLER DC    CL70'You can''t clear this screen'                    JW\n         SPACE 1\nWHYINTRP DC    CL70'Why do you want to interrupt me??'               JW\n         SPACE 1\nTERMMSG  DC    C'Your terminal id is ????????, size is ??? x ???'    JW\nLTERMMSG EQU   *-TERMMSG\n         SPACE 1\nIAPPLMSG DC    C'TESTVTM2 application id is ????????'                JW\nLAPPLMSG EQU   *-IAPPLMSG\n         SPACE 1\nSTATMSG  DC    C'RPL statistics: count=???, used=???'                JW\nLSTATMSG EQU   *-STATMSG\n         SPACE 1\nISENDMS1 DC    C'Message not sent - terminal ???????? not logged on' JW\nLSENDMS1 EQU   *-ISENDMS1\n         SPACE 1\nISENDMS2 DC    C'Message sent to terminal ????????'                  JW\nLSENDMS2 EQU   *-ISENDMS2\n         SPACE 1\nISENDMS9 DC    C'Message from ????????: ?'                           JW\n         DC    75C' '\nLSENDMS9 EQU   *-ISENDMS9\n         DC    C' '                                                  JW\n         SPACE 1\nSHALMSG  DC    C'Active terminals: '                                 JW\n         DC    7C'???????? '\nLSHALMSG EQU   *-SHALMSG\n         SPACE 1                                                     JW\nFIRSTMSG DC    C'Welcome to the TESTVTM2 application ????????'       JW\nLFIRSTMS EQU   *-FIRSTMSG                                            JW\n         SPACE 1                                                     JW\nFAILMSG  DC    C'Logon not accepted - too many sessions'             JW\nLFAILMSG EQU   *-FAILMSG                                             JW\n         SPACE 1                                                     JW\nF2LOCAL  DC    C'Invalid terminal type for x''F2'' '                 JW\n         DC    C'(local 3270 support only)'                          JW\nLF2LOCAL EQU   *-F2LOCAL                                             JW\n         SPACE 2\nIABNDWTO WTO   'TESTVTM2 - GENERATING USER ABEND CODE ?? - VTAMACRO - RX\n               15=XX R0=XX',ROUTCDE=(2,11),DESC=7,MF=L\nLABNDWTO EQU   *-IABNDWTO\n         SPACE 2\nQUESTTAB DC    256X'00'\n         ORG   QUESTTAB+C'?'\n         DC    X'04'\n         ORG   ,\n         SPACE 2\n         DROP  ,\n         EJECT ,                                                     JW\nMAKEMSG  DS    0H          add terminal specific datastream to msg   JW\n         SAVE  (14,12),,MAKEMSG-SUBROUTINE                           JW\n         LR    R12,R15                                               JW\n         USING MAKEMSG,R12                                           JW\n         SPACE 1                                                     JW\n         LR    R10,R0                                                JW\n         USING #WORK,R10                                             JW\n         L     R11,MSGTERM            get terminal table entry       JW\n         USING CIDENTRY,R11                                          JW\n         CLC   CIDROW2,=XL2'0000'     3270 terminal?                 JW\n         BNE   MSG3270                 yes, send 3270 message        JW\n         LA    R15,WORKAREA           linemode message address       JW\n         LR    R1,R15                 copy for string scan           JW\n         LH    R8,MSGTXTLN            message length                 JW\n         BCTR  R8,0                   decrement for EXecute          JW\nNEXTOKEN EX    R8,FINDNBLK            find nonblank char             JW\n         BZ    ENDFOUND               no nonblank chars found        JW\n         BM    STRTOKEN               nonblank char not at end       JW\nNOBLANK  LH    R1,MSGTXTLN            last char nonblank, so use ..  JW\n         B     HAVELNG                .. full message length         JW\nSTRTOKEN LR    R8,R15                 linemode message address       JW\n         SR    R8,R1                  negative offset to nonblank    JW\n         AH    R8,MSGTXTLN            residual count                 JW\n         BCTR  R8,0                   decrement for EXecute          JW\n         EX    R8,FINDBLNK            find blank                     JW\n         BZ    NOBLANK                no blank found                 JW\n         LR    R8,R15                 linemode message address       JW\n         SR    R8,R1                  negative offset to blank       JW\n         AH    R8,MSGTXTLN            residual count                 JW\n         BCTR  R8,0                   decrement for EXecute          JW\n         B     NEXTOKEN               start over                     JW\nFINDBLNK TRT   0(1,R1),BLANKTAB       find blank (EXecuted)          JW\nFINDNBLK TRT   0(1,R1),NBLNKTAB       find nonblank (EXecuted)       JW\nENDFOUND SR    R1,R15                 length without trailing blanks JW\nHAVELNG  LA    R5,STTY                   linemode command prompt lng JW\n         AR    R5,R1                     add text length -> total ln JW\n         LR    R6,R15                    linemode message address    JW\n         AR    R6,R1                     point behind text           JW\n         MVC   0(STTY,R6),SUFFTTY        append command prompt EX'ed JW\n         B     MSGSTORE                send message                  JW\nMSG3270  LA    R15,PRFX3270            3270 message address          JW\n         LA    R5,P3270                  3270 message prefix length  JW\n         AH    R5,MSGTXTLN               add text length -> total ln JW\n         MVC   ROW2(2),CIDROW2           prime address of screen r2  JW\n         MVC   CAT1(2),CIDCAT1           prime address of cat row 1  JW\n         MVC   CAT2(2),CIDCAT2           prime address of cat row 2  JW\n         MVC   CAT3(2),CIDCAT3           prime address of cat row 3  JW\n         MVC   CAT4(2),CIDCAT4           prime address of cat row 4  JW\nMSGSTORE ST    R15,MSGADD             store message address          JW\n         ST    R5,MSGLEN              store message length           JW\n         RETURN (14,12)                                              JW\n         LTORG ,                                                     JW\n         DROP  ,                                                     JW\n         SPACE 2                                                     JW\nBLANKTAB DC    256X'00'\n         ORG   BLANKTAB+C' '\n         DC    X'04'\n         ORG   ,\n         SPACE 2                                                     JW\nNBLNKTAB DC    256X'01'                                              JW\n         ORG   NBLNKTAB+C' '                                         JW\n         DC    X'00'                                                 JW\n         ORG   ,                                                     JW\n         SPACE 2\nTABLE51  DC    256X'00'\n         ORG   TABLE51+X'51'\n         DC    X'04'\n         ORG   ,\n         SPACE 2                                                     JW\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F                    JW\nREMCRLF  DC    X'000102030405060708090A0B0C400E0F' 0                 JW\n         DC    X'101112131415161718191A1B1C1D1E1F' 1                 JW\n         DC    X'202122232440262728292A2B2C2D2E2F' 2                 JW\n         DC    X'303132333435363738393A3B3C3D3E3F' 3                 JW\n         DC    X'404142434445464748494A4B4C4D4E4F' 4                 JW\n         DC    X'505152535455565758595A5B5C5D5E5F' 5                 JW\n         DC    X'606162636465666768696A6B6C6D6E6F' 6                 JW\n         DC    X'707172737475767778797A7B7C7D7E7F' 7                 JW\n         DC    X'808182838485868788898A8B8C8D8E8F' 8                 JW\n         DC    X'909192939495969798999A9B9C9D9E9F' 9                 JW\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF' A                 JW\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' B                 JW\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' C                 JW\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' D                 JW\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' E                 JW\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF' F                 JW\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F                    JW\n         EJECT ,\nGETRPL   DS    0H\n         SAVE  (14,12),,GETRPL-SUBROUTINE\n         SPACE 1\n         LR    R12,R15\n         USING GETRPL,R12\n         SPACE 1\n         LR    R10,R1\n         USING #WORK,R10\n         SPACE 1\nGETRPL1  DS    0H\n         ICM   R5,B'1111',RPLQUEUE    ANY FREE RPL'S?\n         BZ    GETRPL3                  NO, GET A NEW ONE\n         SPACE 1\n         L     R1,0(,R5)              FETCH CHAIN POINTER\n         CS    R5,R1,RPLQUEUE         ACQUIRE THIS RPL\n         BNE   GETRPL1                  IN USE\n         SPACE 1\n         B     GETRPL9                GOT THE RPL\n         SPACE 1\nGETRPL3  DS    0H\n         L     R5,RPLLENTH\n         LA    R0,4(,R5)\n         GETMAIN RU,LV=(0),SP=10      GET A NEW RPL\n         LR    R5,R1                  AND POINT R5 TO IT\n         SPACE 1\n         L     R15,RPLTOTAL\n         LA    R0,1(,R15)\n         CS    R15,R0,RPLTOTAL\n         BNE   *-4-4\n         SPACE 1\nGETRPL9  DS    0H\n         L     R1,RPLLENTH            RPL LENGTH\n         BCTR  R1,0                   DECREMENT FOR EX\n         L     R15,MODELRPL           -> MODEL RPL\n         MVC   4(*-*,R5),0(R15)       MOVE MODEL\n         EX    R1,*-6                 COMPLETE THE RPL\n         XC    0(4,R5),0(R5)          CLEAR THE POINTER\n         SPACE 1\n         L     R15,RPLREQST\n         LA    R0,1(,R15)\n         CS    R15,R0,RPLREQST\n         BNE   *-4-4\n         SPACE 1\n         LA    R1,4(,R5)              -> THE RPL\n         L     R14,12(,R13)\n         RETURN (2,12),RC=0           AND RETURN\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nFREPLXIT DS    0H\n         LR    R12,R15\n         USING FREPLXIT,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    FREPLEND                 YES, ALL DONE\n         SPACE 1\n         CHKERR CHECK                 FAIL ON ANY ERROR\n         SPACE 1\n         FREERPL RPL=(R6)             GIVE UP RPL\n         SPACE 1\nFREPLEND DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nF2EXIT1  DS    0H\n         LR    R12,R15\n         USING F2EXIT1,R12\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    F2EX1END                 YES, ALL DONE\n         SPACE 1\n         CHKERR CHECK                 FAIL ON ANY ERROR\n         SPACE 1\n         LA    R3,RECVBUFF\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA,USER,ARG,RECLEN),        X\n               AREA=(R3),LENGTH=LRECVBUF,MF=(G,WORKAREA)\n         CHKERR SHOW-RPL\n         SPACE 1\n         L     R4,RECVUSER\n         USING CIDENTRY,R4\n         LH    R3,CIDROWS\n         MH    R3,CIDCOLS\n         DROP  R4\n         SPACE 1\n         LA    R4,4(R3,R3)                                        GP@P6\n         LA    R4,4095(,R4)           ROUND UP TO 4K MULTIPLE     GP@P6\n         SRL   R4,12                                              GP@P6\n         SLL   R4,12                                              GP@P6\n         LR    R0,R4                  WHO SAYS R0 IS PRESERVED?   GP@P6\n         GETMAIN RU,LV=(0),SP=34,BNDRY=PAGE\n         ST    R4,0(,R1)              R4 IS PRESERVED             GP@P6\n         LA    R4,4(,R1)\n         SLL   R3,1                   DOUBLE SCREEN SIZE\n         SPACE 1\n         L     R2,=A(F2EXIT2)\n         RECEIVE RPL=(R6),RTYPE=(DFSYN,NDFASY,NRESP),                  X\n               OPTCD=(ASY,SPEC,TRUNC,CS,Q),AREA=(R4),AREALEN=(R3),     X\n               BRACKET=(NBB,NEB),EXIT=(R2)\n         CHKERR RECEIVE\n         SPACE 1\nF2EX1END DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\n         LTORG ,\n         SPACE 2\n         DROP  ,\n         EJECT ,\nF2EXIT2  DS    0H\n         LR    R12,R15\n         USING F2EXIT2,R12\n         SPACE 1\n         L     R11,=A(HEXTABLE)\n         USING HEXTABLE,R11\n         SPACE 1\n         LR    R6,R1                  SAVE RPL ADDRESS\n         USING IFGRPL,R6\n         SPACE 1\n         L     R8,RPLDACB             -> ACB\n         USING IFGACB,R8\n         SPACE 1\n         LA    R10,4\n         LCR   R10,R10\n         L     R10,0(R10,R8)          FETCH ACB PREFIX\n         USING #WORK,R10\n         SPACE 1\n         LA    R13,SAVE2              SET UP NEW SAVE AREA\n         ST    R14,SAVE2              AND SAVE RETURN ADDRESS\n         SPACE 1\n         CHECK RPL=(R6)\n         SPACE 1\n         TM    STOPECB,X'40'          SHUTDOWN IN PROGRESS?\n         BO    F2EX2END                 YES, ALL DONE\n         SPACE 1\n         LR    R4,R15                 SAVE RETURN CODE\n         LR    R5,R0                   AND REASON CODE\n         SPACE 1\n         LA    R3,RECVBUFF\n         SHOWCB AM=VTAM,RPL=(R6),FIELDS=(AREA,USER,ARG,RECLEN),        X\n               AREA=(R3),LENGTH=LRECVBUF,MF=(G,WORKAREA)\n         CHKERR SHOW-RPL\n         L     R7,RECVARG\n         SPACE 1\n         ICM   R1,B'1111',RECVUSER    -> TABLE ENTRY\n         DC    X'4780',S(*+1)           UNKNOWN TERMINAL\n         ST    R1,MSGTERM             remember terminal table addr   JW\n         SPACE 1\n         LR    R0,R5                  RESTORE REASON CODE\n         LTR   R15,R4                 WAS RECEIVE OK?\n         DC    X'4770',S(*+1)           NO, FAIL S0C6\n         SPACE 1\n         TESTCB AM=VTAM,RPL=(R6),RESPOND=NFME,ERET=F2EXABND,           X\n               MF=(G,WORKAREA)\n         BE    F2EXCHKR\n         SPACE 1\n         GETRPL ,\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(1),STYPE=RESP,RESPOND=(EX,FME,NRRN),OPTCD=ASY,     X\n               ARG=(R7),EXIT=(R0)\n         CHKERR SEND\n         SPACE 1\nF2EXCHKR DS    0H\n         SPACE 1                                                     JW\n         MVC   WORKAREA(LF2DONE),F2DONE get message                  JW\n         XC    MSGTXTLN,MSGTXTLN      clear length of message text   JW\n         MVI   MSGTXTLN+1,LF2DONE     store length of message text   JW\n         MAKEMSG                      add terminal specific data     JW\n         MODCB RPL=(R6),RECLEN=(*,MSGLEN),AREA=(*,MSGADD),             X\n               MF=(G,MODCBWRK)        complete the RPL               JW\n         SPACE 1                                                     JW\n         L     R0,=A(FREPLXIT)\n         SEND  RPL=(R6),STYPE=REQ,CONTROL=DATA,OPTCD=(ASY,CA),         X\n               RESPOND=(EX,FME,NRRN),                                  X\n               POST=SCHED,BRACKET=(NBB,NEB),ARG=(R7),EXIT=(R0),        X\n               CHNGDIR=(CMD)\n         CHKERR SEND\n         SPACE 1\n         MVC   OSNAPDCB(LSNAPDCB),ISNAPDCB\n         MVI   OPENSNAP,X'80'\n         OPEN  (OSNAPDCB,OUTPUT),MF=(E,OPENLIST)\n         SPACE 1\n         TM    OSNAPDCB+DCBOFLGS-IHADCB,DCBOFOPN\n         BZ    F2EXFBUF\n         SPACE 1\n         L     R2,SNAPCNT\n         LA    R2,1(,R2)\n         ST    R2,SNAPCNT\n         SPACE 1\n         L     R3,RECVAREA\n         L     R4,RECVARLN\n         AR    R4,R3\n         BCTR  R4,0\n         SPACE 1\n         MVC   OSNAP(LSNAP),ISNAP\n         SNAP  DCB=OSNAPDCB,ID=(R2),STORAGE=((R3),(R4)),MF=(E,OSNAP)\n         SPACE 1\n         CLOSE (OSNAPDCB),MF=(E,OPENSNAP)\n         SPACE 1\nF2EXFBUF DS    0H\n         LA    R1,4\n         LCR   R1,R1\n         AR    R1,R3\n         L     R0,0(,R1)\n         FREEMAIN RU,LV=(0),A=(1),SP=34\n         SPACE 1\nF2EX2END DS    0H\n         L     R14,SAVE2\n         XR    R15,R15\n         BR    R14\n         SPACE 2\nF2EXABND DS    0H\n         DC    X'47F0',S(*+1)\n         SPACE 2\nISNAPDCB DCB   DSORG=PS,MACRF=(W),RECFM=VBA,BLKSIZE=882,LRECL=125,     X\n               DDNAME=SNAPFILE\nLSNAPDCB EQU   *-ISNAPDCB\n         SPACE 2\nISNAP    SNAP  DCB=1-1,STORAGE=(2-2,3-3),MF=L\nLSNAP    EQU   *-ISNAP\n         SPACE 2\n         LTORG ,\n         SPACE 2\nF2DONE   DC    C'x''F2'' processing complete'                        JW\nLF2DONE  EQU   *-F2DONE\n         EJECT ,\nCIDENTRY DSECT ,\n         SPACE 1\nCIDCID   DS    F                   CID VALUE\n         SPACE 1\nCIDNAME  DS    CL8                 NAME OF LTERM\n         SPACE 1\nCIDROWS  DS    H                   NUMBER OF ROWS\nCIDCOLS  DS    H                   NUMBER OF COLUMNS\n         SPACE 1                                                     JW\nCIDROW2  DS    H                   3270 address of 2nd row on screen JW\nCIDCAT1  DS    H                   3270 address of 1st cat row       JW\nCIDCAT2  DS    H                   3270 address of 2nd cat row       JW\nCIDCAT3  DS    H                   3270 address of 3rd cat row       JW\nCIDCAT4  DS    H                   3270 address of 4th cat row       JW\n         SPACE 1\nCIDAPPLN DS    CL8                 APPLID INQUIRED ABOUT\n         SPACE 1\nCIDPENDM DS    A                   -> PENDING MESSAGE\n         SPACE 1\nCIDBIND  DS    6D                  BIND INFO AREA\n         SPACE 1\n         DS    0D                  ALIGNMENT\n         SPACE 1\nCIDLENTH EQU   *-CIDENTRY          ENTRY LENGTH\n         SPACE 3\nCLOSENTY DSECT ,\n         SPACE 1\nCLOSFLAG DS    X                   SEEN FLAG\n         DS    CL3                 ..RESERVED\n         SPACE 1\nCLOSECID DS    F                   CID OF TERMINAL TO CLSDST\n         SPACE 1\nCLOSLNTH EQU   *-CLOSENTY          LENGTH OF ENTRY\n         EJECT ,\n#WORK    DSECT ,\n         SPACE 1\n         DS    18F\n         SPACE 1\nSAVE2    DS    18F\n         SPACE 1\nSAVE3    DS    18F\n         SPACE 1\nAPPLID   DS    CL8\n         SPACE 1\nREGSAVE  DS    3F\n         SPACE 1\nNIBADDR  DS    A\n         SPACE 1\nACBADDR  DS    2F\n         SPACE 1\nACBLENTH DS    F\nRPLLENTH DS    F\nNIBLENTH DS    F\n         SPACE 1\nMAINECBS DS    2F                                                    JW\nSTOPECB  DS    F\nCLOSECB  DS    F                                                     JW\n         SPACE 1\nOPENLIST DS    F\n         SPACE 2\nOTIMRCOD DS    ((LTIMRCOD+3)/4)F\n         SPACE 1\nRECVBUFF DS    0F\nRECVAREA DS    A\nRECVUSER DS    A\nRECVARG  DS    A\nRECVARLN DS    F\nLRECVBUF EQU   *-RECVBUFF\n         SPACE 2\nCARD     DS    CL256                                                 JW\nCARD1    DS    CL256                                                 JW\nCARD2    DS    CL256                                                 JW\n         SPACE 2\nRECVRPL1 DS    A\nRECVRPL2 DS    A\nMODELRPL DS    A\n         SPACE 1\nTEXTSTRT DS    F\n         SPACE 1\nRPLQUEUE DS    A\nRPLREQST DS    F\nRPLTOTAL DS    F\n         SPACE 2\nNUMCIDS  EQU   3\nCIDLIST  DS    ((CIDLENTH*NUMCIDS)/8)D   CID TABLE AREA\nFAILOGON DS    0D                  CIDENTRY for failed logon         JW\n         ORG   *+CIDLENTH                                            JW\n         SPACE 1\nDWORD    DS    D\n         SPACE 1\nNUMCLOSE EQU   2*NUMCIDS\nPENDCLOS DS    ((CLOSLNTH*NUMCLOSE)/4)F  PENDING CLSDST TABLE\n         SPACE 1\nMSGSAVE  DS    3F                  mini save area to call MAKEMSG    JW\nMSGADD   DS    F                   address and length of message ..  JW\nMSGLEN   DS    F                    .. to be sent to terminal        JW\nMSGTERM  DS    F                   address of terminal table entry   JW\nMSGTXTLN DS    H                   length of message text            JW\nNLONLY   DS    H                   lng of TTY suffix w/o leading NL  JW\nSUFFTTY  DS    0C                  TTY suffix for messages (prompt)  JW\n         ORG   *+STTY              length of TTY suffix datastream   JW\n         DS    0D                  align                             JW\n         DS    XL6                 filler                            JW\nPRFX3270 DS    0X                  3270 prefix datastream            JW\n         ORG   PRFX3270+THECATR1   skip                              JW\nCAT1     DS    XL2                 buffer address of 1st cat row     JW\n         ORG   PRFX3270+THECATR2   skip                              JW\nCAT2     DS    XL2                 buffer address of 2nd cat row     JW\n         ORG   PRFX3270+THECATR3   skip                              JW\nCAT3     DS    XL2                 buffer address of 3rd cat row     JW\n         ORG   PRFX3270+THECATR4   skip                              JW\nCAT4     DS    XL2                 buffer address of 4th cat row     JW\n         ORG   PRFX3270+SCREENR2   skip                              JW\nROW2     DS    XL2                 buffer address of 2nd row on scrn JW\n         ORG   PRFX3270+P3270      skip to end of prefix datastream  JW\n         DS    0D                                                    JW\n         ORG   ,                                                     JW\nWORKAREA DS    32D                                                   JW\nWORKLEN  EQU   *-WORKAREA\nMODCBWRK DS    20D                                                   JW\n         SPACE 2\nOSNAPDCB DCB   DSORG=PS,MACRF=(W),RECFM=VBA,BLKSIZE=882,LRECL=125,     X\n               DDNAME=SNAPFILE\n         SPACE 2\nOSNAP    SNAP  DCB=OSNAPDCB,STORAGE=(2-2,3-3),MF=L\n         SPACE 1\nOPENSNAP OPEN  (OSNAPDCB,OUTPUT),MF=L\n         SPACE 1\nSNAPCNT  DS    F\n         SPACE 3\n#AMT     EQU   *-#WORK\n         EJECT ,\n         PRINT NOGEN\n         SPACE 2\n         IFGACB AM=VTAM\n         SPACE 2\n         IFGRPL AM=VTAM\n         SPACE 2\n         ISTDNIB ,\n         SPACE 2\n         ISTDBIND ,\n*  EXTRA DEFINITIONS FOR THE FREE VTAM OF MVS 3.8 FOLLOW TO GIVE A\n*  CORRECT ASSEMBLE.  DELETE THESE IF USING A \"MODERN\" ISTDBIND MACRO.\n         ORG   BINPSCHR\nBINDFLAG DS    XL1                 DEVICE FLAG               @D14AKMC\nBINSEDS  EQU   X'80'               EXTENDED 3270 DATA STREAM @D14AKMC\n         DS    XL4                 RESERVED                  @D14AKMC\nBINSCRSZ DS    0XL5                PRESENTATION SPACE SIZE   @ZA45868\nBINSPRIR DS    FL1                 PRIMARY (DEFAULT) NUMBER\n*                                  OF ROWS\nBINSPRIC DS    FL1                 PRIMARY (DEFAULT) NUMBER\n*                                  OF COLUMNS\nBINSALTR DS    FL1                 ALTERNATE NUMBER OF ROWS\nBINSALTC DS    FL1                 ALTERNATE NUMBER OF COLUMNS\n*  VALUES FOR BINPRESZ (PRESENTATION SPACE SIZE)\nBINPSZRC EQU   X'7F'               PRESENTATION SPACE HAS\n*                                  DEFAULT AND ALTERNATE\n*                                  SIZES AS DEFINED IN\n*                                  DEFAULT, ALTERNATE\n*                                  ROW/COL FIELDS\nBINPSFX  EQU   X'7E'               PRESENTATION SPACE IS\n*                                  FIXED SIZE AS DEFINED BY\n*                                  ROW/COL VALUES IN\n*                                  DEFAULT ROW/COL FIELDS\nBINPSZ3  EQU   X'03'               24X80 DEFAULT UNDEFINED ALTERNATE\n*                                  DO WRITE STRUCTURED FIELD QUERY\n*                                  TO IDENTIFY ALTERNATE     @R505701\n*  END OF MVS 3.8 ISTDBIND ADDITIONS.\n         SPACE 2\n         DCBD  DSORG=BS\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT485/FILE485.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT485", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}