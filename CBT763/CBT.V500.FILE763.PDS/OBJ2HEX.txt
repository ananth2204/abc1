rexx_OBJ2HEX:  /* We still need rexx in comment if read from SYSPROC */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  Dataset:  KET2812.REXX(OBJ2HEX)
  Author:   KTomiak
  Contact:  "Kenneth Tomiak"<cbt_ken@KTomiak.biz>
  Syntax:   OBJ2HEX (input_ddname output_ddname)
  Overview: Reads any 80 byte record and wraps it in rexx code to
            reconstruct it back later.

=======================================================================

 History of Modifications
 ------------------------
  When     Who      What you did
  -------- -------- ---------------------------------------------------
  20070528 KTOMIAK  Original code.

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_OBJ2HEX:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
      return_code = rexx_Termination()
    End
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    rexx_version,
    rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name,
    "executing under" source_host_env,
    "as a" source_call_type,53) "="
  say left("=  on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""
  return_code = 0

  If (source_host_env >< "TSO") Then,
    Do
      Say "Wrong host environment" source_host_env
      return_code = 16
    End

  Parse var all_my_arguments dd_in dd_ot .
  if (datatype(dd_in) = "NUM") then,
    do
      say "Setting default input and output DDnames."
      dd_in = "OBJIN"
      dd_ot = "HEXOT"
    end
  if (datatype(dd_ot) = "NUM") then,
    do
      say "Setting default output DDname."
      dd_ot = "HEXOT"
    end
  if (dd_in = "") then,
    do
      say "Setting default input and output DDnames."
      dd_in = "OBJIN"
      dd_ot = "HEXOT"
    end
  if (dd_ot = "") then,
    do
      say "Setting default output DDname."
      dd_ot = "HEXOT"
    end

  say "//DDIN:"dd_in"."
  say "//DDOT:"dd_ot"."
  text_out.0 = 0
  call add_rexx_code

  text_in.0 = 0
  "EXECIO * DISKR" dd_in "(FINIS STEM TEXT_IN.)"
  read_rc = RC
  if (read_rc >< 0) then,
    Do
      say "Encountered problems reading //DD:"dd_in"."
      say "RC("read_rc") >< 0"
      return_code = read_rc
    end
  say "Read" text_in.0 "records."

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  if (text_in.0 = 0) then,
    do
      say "//DD:"dd_in "appears to be a null file."
      return_code = 4
      return 4
    end
  hex_text = 0
  do text_ix = 1 to text_in.0
    line_1 = ""
    line_2 = ""
    text_hex = c2x(text_in.text_ix)
    do while text_hex >< ""
      parse var text_hex hex_odd +1 hex_even +1 text_hex
      line_1 = line_1""hex_odd
      line_2 = line_2""hex_even
    end
    text_out.0 = out_text(line_1)
    text_out.0 = out_text(line_2)
    hex_text = hex_text + 2
  end
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  text_out.0 = out_text("ENDDATA*/")
  text_out.0 = out_text("  ")
  "EXECIO * DISKW" dd_ot "(FINIS STEM TEXT_OUT.)"
  write_rc = RC
  if (write_rc >< 0) then,
    Do
      say "Encountered problems writing //DD:"dd_ot"."
      say "RC("write_rc") >< 0"
      return_code = write_rc
    end
  say "Wrote" hex_text   "records."
  say "Wrote" text_out.0 "records, including HEX2OBJ extractor."
  say "E-O-R"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Adds text to a stem variable
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
out_text:
  parse arg text_line
  text_next = text_out.0 + 1
  text_out.text_next = text_line
  return text_next

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Adds the rexx code to convert the member back.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
add_rexx_code:
  sigl_record = sigl + 25
  rexx_code = "YES"
  process_data = "NO"
  DO WHILE rexx_code = "YES"
    SIGL_RECORD=SIGL_RECORD+1
    MY_DATA=SOURCELINE(SIGL_RECORD)
    IF (MY_DATA="ENDREXX*/") THEN,
      DO
        rexx_code="NO"
        LEAVE
      END
    IF (MY_DATA="/*BEGINREXX") THEN,
      DO
        SIGL_RECORD=SIGL_RECORD+1
        PROCESS_DATA="YES"
        ITERATE
      END
    IF (PROCESS_DATA="YES") THEN,
      DO
        text_out.0 = out_text(my_data)
      END
  END
  return

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/*BEGINREXX
*/
rexx_HEX2OBJ:  /* We still need rexx in comment if read from SYSPROC */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  Dataset:  KET2812.REXX(HEX2OBJ)
  Author:   KTomiak
  Contact:  "Kenneth Tomiak"<cbt_ken@KTomiak.biz>
  Syntax:   HEX2OBJ (output_ddname)
  Overview: Reconstructs a member that was saved in hexadecimal
            format.

=======================================================================

 History of Modifications
 ------------------------
  When     Who      What you did
  -------- -------- ---------------------------------------------------
  20070528 KTOMIAK  Original code.

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_HEX2OBJ:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
      return_code = rexx_Termination()
    End
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    rexx_version,
    rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name,
    "executing under" source_host_env,
    "as a" source_call_type,53) "="
  say left("=  on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""
  return_code = 0

  If (source_host_env >< "TSO") Then,
    Do
      Say "Wrong host environment" source_host_env
      return_code = 16
    End

  Parse var all_my_arguments dd_ot .
  if (datatype(dd_ot) = "NUM") then,
    do
      say "Setting default output DDname."
      dd_ot = "OBJOT"
    end
  if (dd_ot = "") then,
    do
      say "Setting default output DDname."
      dd_ot = "OBJOT"
    end

  text_out.0 = 0

  text_in.0 = 0
  call add_rexx_code
  say "Read" text_in.0 "records."

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  if (text_in.0 = 0) then,
    do
      say source_uc_exec_name "is missing the data."
      return_code = 4
      return 4
    end
  do text_ix = 1 to text_in.0 by 2
    line_1 = ""
    text_1 = text_in.text_ix
    next_ix = text_ix + 1
    text_2 = text_in.next_ix
    do char_ix = 1 to length(text_1)
      char_1 = substr(text_1,char_ix,1)
      char_2 = substr(text_2,char_ix,1)
      line_1 = line_1""char_1""char_2
    end
    text_out.0 = out_text(x2c(line_1))
  end
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  "EXECIO * DISKW" dd_ot "(FINIS STEM TEXT_OUT.)"
  write_rc = RC
  if (write_rc >< 0) then,
    Do
      say "Encountered problems writing //DD:"dd_ot"."
      say "RC("write_rc") >< 0"
      return_code = write_rc
    end
  say "Wrote" text_out.0 "records."
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Adds text to a stem variable
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
in_text:
  parse arg text_line
  text_next = text_in.0 + 1
  text_in.text_next = text_line
  return text_next

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Adds text to a stem variable
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
out_text:
  parse arg text_line
  text_next = text_out.0 + 1
  text_out.text_next = text_line
  return text_next

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Adds the rexx code to convert the member back.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
add_rexx_code:
  sigl_record = sigl + 25
  rexx_code = "YES"
  process_data = "NO"
  DO WHILE rexx_code = "YES"
    SIGL_RECORD=SIGL_RECORD+1
    MY_DATA=SOURCELINE(SIGL_RECORD)
    IF (MY_DATA="ENDDATA*/") THEN,
      DO
        rexx_code="NO"
        LEAVE
      END
    IF (MY_DATA="/*BEGINDATA") THEN,
      DO
        PROCESS_DATA="YES"
        ITERATE
      END
    IF (PROCESS_DATA="YES") THEN,
      DO
        text_in.0 = in_text(my_data)
      END
  END
  return

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/*BEGINDATA
ENDREXX*/

