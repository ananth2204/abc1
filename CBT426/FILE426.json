{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012009000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE426.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE426.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\x08'", "DS1TRBAL": "b'U\\x00'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\x10\\x00\\r\\x03\\x11\\x00\\x04\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "            FOR JSTATUS COMMAND\n#INSTALL.....DOC FOR JSTATUS COMMAND\n\n#JSASM.......JCL TO ASSEMBLE THE JSTATUS COMMAND\n\n#JSHELP......HELP MEMBER FOR THE JSTATUS COMMAND\n\nFINDASCB.....SOURCE TO FIND AN ASCB BY ADDRESS SPACE NAME\n\nHACSAW.......HAC CSA WORK AREA DSECT\n\nIGC0020H.....CONTROL CROSS MEMORY COMMUNICATION\n\nJSTATUS......DISPLAY STATUS OF JES2 JOBS, LOGONS AND STARTED TASKS\n\nRECEVSRB.....SVC 208 TARGET CODE UNDER SRB ENVIRONMENT\n\nREGS.........REGISTER EQUATE MACRO\n\nSTATJES2.....OBTAIN JOB, STC, TSU JOE STATUS FROM JES2\n\n            FOR THE JOBNAME COMMAND PROCESSOR\n\nDOCJOBNM.....DOCUMENTATION FOR THE JOBNAME COMMAND PROCESSOR\n\nJOBNAME......SOURCE FOR THE JOBNAME COMMAND PROCESSOR\n\nUSERMOD......MOD TO ADD JCL TO STARTED TASKS\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#INSTALL": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "INSTALLATION INSTRUCTIONS FOR \"JSTATUS\" COMMAND:\n\nThe JSTATUS command will search the JES2 queues and present a short\njob status display. This command can be used in place of the present\nSTATUS command, on TSO, or can be seperately installed. I have chosen\nto call this command JSTATUS to avoid conflict with the command\nsupplied by IBM.\n\nTo REPLACE the STATUS command:\n\n  (1) DELETE  ST,STATUS,IKJEFFCA from 'SYS1.CMDLIB'\n\n  (2) EDIT 'node.JS.PDS(#JSASM)' DA O\n      VERIFY ON\n      FIND /JSTATUS(R)/\n      CHANGE * /JSTATUS/STATUS/\n      TOP\n      FIND /ALIAS JS/\n      CHANGE * /JS/ST/\n      END SAVE\n\nTo install this command with the \"JSTATUS\" name (alias JS) perform\nthe following tasks:\n\n  (1) RENAME this file to \"node\".JS.PDS\n      \"node\" is a valid high-level name at your installation\n\n  (2) CHOOSE a valid SVC number for the JSTATUS user SVC.  This\n      may be any empty TYPE 3 or TYPE 4 SVC slot in your SVC\n      table. Please note that this SVC will be an ALIAS of the\n      JSTATUS command. The SVC simply provides for the\n      scheduling of an SRB in the JES2 address space.\n      The supplied SVC number is \"208\". If that number is\n      valid for your installation, then proceed to step 4.\n\n  (3) IF you have chosen a number other than SVC 208 for the JS\n      SVC, perform the following tasks:\n\n       ====>     standard TSO edit:\n\n        (a) EDIT 'node.JS.PDS(#JSASM)' DA O\n            VERIFY ON\n            CHANGE 0 99999999 /IGC0020H/IGC00xxx/ALL\n            (xxx is the signed SVC number you have chosen)\n            END SAVE\n\n        (b) EDIT 'node.JS.PDS(IGC0020H)' DA O\n            VERIFY ON\n            CHANGE 0 99999999 /SVC 208/SVC xxx/ALL\n            (xxx is the SVC number you have chosen)\n            END SAVE\n\n        (c) EDIT 'node.JS.PDS(JSTATUS)' DA O\n            VERIFY ON\n            CHANGE 0 99999999 /SVC 208/SVC xxx/ALL\n            END SAVE\n\n        (d) EDIT 'node.JS.PDS(RECEVSRB)' DA O\n            VERIFY ON\n            CHANGE 0 99999999 /SVC 208/SVC xxx/ALL\n            END SAVE\n\n        ======>         ISPF edit:\n\n        Under ISPF simply EDIT and CHANGE the modules\n        IGC0020H, JSTATUS, and RECEVSRB as mentioned above\n        for standard TSO edit, but using the ISPF/PDF facility.\n\n        (e) Under TSO \"READY\" mode:\n            RENAME 'node.JS.PDS(IGC0020H)' 'node.JS.PDS(IGC00xxx)'\n            (xxx is the signed SVC number you have chosen)\n\n\n  (4) EDIT the \"#JSASM\" member and modify the JOB information to\n      reflect your ACCOUNTING and PRINT QUEUE standards. All system\n      output is directed to the MESSAGE CLASS, so you will have\n      to change the JSASM proc and the LKED step if you want the\n      output to go somewhere else.\n\n  (5) MODIFY the \"SYSLMOD\" statment int the LKED step if you do\n      not want JSTATUS to be installed in SYS1.LPALIB. It will\n      have to be copied there eventually though.\n\n      NOTE: JSTATUS MUST RUN FROM SYS1.LPALIB\n            (the LOAD MODULE uses only 6K of storage)\n\n  (6) SUBMIT the '#JSASM' member of 'node.JS.PDS'\n\n  (7) COPY JS, JSTATUS, IGC0020H, FINDASCB to 'SYS1.LPALIB'\n      if you did not LINK into that library.\n\n  (8) IPL the system with a CLPA to complete the installation process\n\n  (9) JSTATUS is now installed.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#JSASM": {"ttr": 521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HMD$STAT JOB (U4757,U4757,000000),'THE SILICON SAILOR',CLASS=A,\n//  MSGCLASS=2,NOTIFY=$UHMD\n/*ROUTE  PRINT FETCH\n/*JOBPARM  L=999,ROOM=A539,F=J002\n//*\n//JSASM    PROC  NODE=$UHMD,MOD=DUMMY\n//*********************************************************************\n//***     A S S E M B L E    J S T A T U S   C O M M A N D          ***\n//***                                                               ***\n//*** LAST UPDATED 05/15/85 - HOWARD M. DEAN                        ***\n//*********************************************************************\n//ASM      EXEC PGM=IFOX00,PARM='RENT,OBJ,BUF(MAX)',REGION=2048K\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=19040\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,DCB=BLKSIZE=19040\n//         DD  DSN=SYS1.SMPMTS,DISP=SHR,UNIT=SYSDA,VOL=SER=MVS999\n//         DD  DSN=SYS1.HASPSRC,DISP=SHR,UNIT=SYSDA,VOL=SER=MVS999\n//         DD  DSN=&NODE..JS.PDS,DISP=SHR   << THIS PDS =========\n//SYSPUNCH DD  DUMMY\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(10,1)),DSN=&SYS-UT1\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(10,1)),DSN=&SYS-UT2\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(5,1)),DSN=&SYS-UT3\n//SYSGO    DD   DSN=&NODE..JS.OBJ(&MOD),DISP=(MOD,CATLG),\n//   DCB=(BLKSIZE=3200,LRECL=80,RECFM=FB),UNIT=SYSDA,\n//   SPACE=(3200,(500,100,10))\n//*\n//SYSIN    DD  DSN=&NODE..JS.PDS(&MOD),DISP=SHR  << THIS PDS =========\n//     PEND\n//*\n//JSTATUS  EXEC JSASM,MOD=JSTATUS                   JSTATUS\n//STATJES2 EXEC JSASM,MOD=STATJES2                  COMMAND PROCESSOR\n//IGC0020H EXEC JSASM,MOD=IGC0020H                  XMEM SVC\n//FINDASCB EXEC JSASM,MOD=FINDASCB                  LOCATE ASID\n//RECEVSRB EXEC JSASM,MOD=RECEVSRB                  RECEIVE SRB\n//*\n//LKED     EXEC PGM=IEWL,COND=(0,NE),\n//  PARM='MAP,LIST,XREF,NCAL,LET,RENT',\n//  REGION=2048K\n//SYSPRINT    DD SYSOUT=*\n//SYSUT1      DD UNIT=SYSDA,SPACE=(2048,(100,500)),DSN=&&UT-1\n//SYSLMOD     DD DSN=SYS1.LPALIB,DISP=SHR <<<  MUST GO IN LPALIB\n//OBJECT      DD DSN=*.JSTATUS.ASM.SYSGO,DISP=SHR\n//SYSLIN      DD *\n  INCLUDE OBJECT(JSTATUS)\n  INCLUDE OBJECT(STATJES2)\n  INCLUDE OBJECT(RECEVSRB)\n  INCLUDE OBJECT(IGC0020H)\n  INCLUDE OBJECT(FINDASCB)\n  ENTRY  STATUS\n  ORDER  STATUS(P)\n  ORDER  STATJES2\n  ORDER  IGC0020H\n  ORDER  FINDASCB\n  ORDER  RECEVSRB\n  ALIAS  FINDASCB\n  ALIAS  IGC0020H   ** JES2 STATUS INTERFACE SVC **\n  ALIAS  JS         ** REDUCE TYPING EFFORT      **\n  NAME   JSTATUS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#JSHELP": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F  FUNCTION -\n\n  The JSTATUS command is used to find the status of JOB(S)\n  previously submitted to the background either through TSO,\n  a card reader, or an MVS internal reader. The status of\n  started tasks and TSO users may also be listed.\n\n  JSTATUS will search the JOB queue by using the characters\n  supplied in a 'JOBLIST'. For example, if you only asked for\n  2he status of JOB 'A', then JSTATUS would return to your\n  terminal the status of all the JOB(S) whose JOBNAME(S) begin\n  with the character 'A'.\n\n  JSTATUS may also be run under the TSO tmp in batch mode,\n  however the 'JOBLIST' operand must be entered in this mode,\n  because when running TSO tmp in batch, no user id is\n  associated with the JOB.\n\n  JSTATUS may be used with an alternate JES2 subsystem. in\n  that case, the 'JOBLIST' operand must be entered rather\n  that letting your user id be supplied by default.\n\n)X SYNTAX  -\n\n        JSTATUS   (JOBLIST) 'SUBSYSTEM NAME'\n\n  REQUIRED - NONE\n\n  DEFAULTS - If no (JOBLIST) is given, JSTATUS will\n             search the queues for JOB(S) beginning with\n             your user id. Otherwise, for each (JOBLIST)\n             entry, JSTATUS will return status for JOB(S)\n             beginning with the characters entered. If\n             a SUBSYSTEM NAME is supplied, then a JOBLIST\n             must be supplied. It will not default to your\n             user id in that case.\n\n             if no 'SUBSYSTEM NAME' is given the JSTATUS will\n             search the queues of the subsystem named 'JES2'.\n             otherwise the queues of the alternate JES2 will\n             be searched.\n\n  ALIAS    - JS\n\n)O OPERANDS -\n\n))(JOBLIST)- List of JOBS, or search arguments\n             seperated by blanks or commas.\n\n           - The parentheses aren't needed when one\n             JOB or search argument is specified.\n\n))SUBSYSTEM NAME\n           The name of a JES2 subsystem whose queues are to be\n           searched for the list of JOBNAME(S) supplied.  The\n           default is 'JES2'. You may specify any subsytem\n           name that is a valid alternate 'JES2' subsystem.\n\n           If this operand is supplied, then the JOBLIST must\n           be supplied. It will not default to your user id.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCJOBNM": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "    This file contains the source for the JOBNAME processor and\n    a local mod to update IEEVJCL and MSTRJCL00 so that\n    accounting information can be placed in started tasks. If\n    a member in the 'SYS1.JOBNAME' pds exists, the JCL from that\n    member is inserted after the JOBCARD generated by Started\n    Task Control.\n\n    Accounting information can be placed on started tasks simply\n    by continuing the system generated JOBCARD as follows:\n\n    line 1 -  //    (XXXXX,XXXXX),MSGCLASS=A\n    line 2 -  /*JOBPARM L=999,ROOM=A539\n    line 3 -  /*ROUTE PRINT RMT99\n    line 4 -  /*NOTIFY  $UHMD\n\n    note that the accounting info must appear on the first\n    JOBCARD and the space after the two slashes indicates a\n    continuation.\n\n    Each separate started task can have its own member in\n    'SYS1.JOBNAME'. If the member does not exist, the STC\n    behaves exactly as without the mod. End-of-file indicates\n    the JCL generation should be ceased and the STC started.\n\n    For more information contact:\n\n    Howard M. Dean\n    SYNTEX USA, INC.\n    3401 Hillview Ave.\n    Mail Stop A5-5\n    Palo Alto, CA 94303\n    (415) 852-1792\n    SHARE code SYN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FINDASCB": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "FIND     TITLE 'FIND AN ASCB BY ADDRESS SPACE NAME'         *HMD 10/80*\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                              FINDASCB                               *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: FIND AN ASCB BY ADDRESS SPACE NAME.                       *\n*                                                                     *\n*                                                                     *\n* FUNCTION: FINDASCB INDEXES THROUGH THE ADDRESS SPACE VECTOR TABLE   *\n*           (ASVT) LOOKING FOR AN ASCB WHOSE INITIATED JOB NAME       *\n*           (ASCBJBNI) OR STARTED JOB NAME (ASCBJBNS) EQUALS THE      *\n*           INPUT ADDRESS SPACE NAME.                                 *\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> A(CL8'ADDRESS SPACE NAME')                             *\n*              A(F'TO RECEIVE THE ADDRESS OF THE ASCB IF FOUND')      *\n*                                                                     *\n*                                                                     *\n* OUTPUT: 2ND INPUT PARM -> REQUESTED ASCB                            *\n*                                                                     *\n*                                                                     *\n* RETURN CODES: R15 = 0 => ASCB FOUND.                                *\n*                     4 => ASCB NOT FOUND.                            *\n*                                                                     *\n*                                                                     *\n* DATA AREAS REFERENCED: CVT                                          *\n*                        ASVT                                         *\n*                        ASCB                                         *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              RETURN                                                 *\n*              REGS (USER)                                            *\n*              CVT                                                    *\n*              IHAASVT                                                *\n*              IHAASCB                                                *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTE: RENT                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nFINDASCB CSECT                FIND AN ASCB BY NAME\n         SAVE  (1,7),,FINDASCB_&SYSDATE_&SYSTIME SAVE CALLER'S REGS\n         USING FINDASCB,R15   CSECT ADDRESSABILITY\n         LM    RJOBNM,RETAD,0(R1) A(INPUT JOB NAME),A(RETURN ADDR)\n         L     R1,16          A(CVT)\n         USING CVT,R1         ADDRESSABILITY\n         L     R1,CVTASVT     A(ASVT)\n         USING ASVT,R1        ADDRESSABILITY\n         L     RMAXU,ASVTMAXU MAXIMUM NUMBER OF ASCB'S\n         LA    RENTRY,ASVTENTY A(A(1ST ASCB))\nGETASCB  L     R1,0(RENTRY) A(ASCB OR < 0 => NO ASCB)\n         LTR   R1,R1          ASCB SLOT IN USE?\n         BM    NEXTASCB       NO => GET ANOTHER ASCB\n         USING ASCB,R1        ADDRESSABILITY\n         LM    RJOBI,RJOBS,ASCBJBNI A(INIT JOB NAME),A(START JOB NAME)\n         CLC   0(8,RJOBI),0(RJOBNM) FOUND THE ASCB?\n         BE    GOTASCB        YES => GIVE IT TO OUR CALLER\n         CLC   0(8,RJOBS),0(RJOBNM) FOUND THE ASCB?\n         BE    GOTASCB        YES => RETURN IT TO OUR CALLER\nNEXTASCB LA    RENTRY,4(RENTRY) A(A(NEXT ASCB))\n         BCT   RMAXU,GETASCB  CHECKED ALL ASCB'S?\n         XC    0(4,RETAD),0(RETAD) YES => TELL THE CALLER\n         RETURN (1,7),RC=4    WE COULDN'T FIND AN ASCB\nGOTASCB  ST    R1,0(RETAD)    RETURN THE CALLER THE\n         RETURN (1,7),RC=0    ADDRESS OF THE ASCB\n         EJECT\n         REGS  ,\nRJOBNM   EQU   R2             A(INPUT JOB NAME)\nRETAD    EQU   R3             A(WORD TO RECEIVE A(ASCB))\nRMAXU    EQU   R4             MAXIMUM NUMBER OF ASCB'S\nRENTRY   EQU   R5             A(A(ASCB))\nRJOBI    EQU   R6             A(INITIATED JOB NAME)\nRJOBS    EQU   R7             A(STARTED JOB NAME)\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT                                              *HMD 12/79*\n         IHAASVT\n         EJECT                                              *HMD 12/79*\n         IHAASCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HACSAW": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         HACSAW\nCSAWORK  DSECT                HAC CSA WORK AREA\nCSAIDP   DC    CL8'HACSAW'    HAC CSA AREA IDENTIFIER       *HMD 01/85*\nCSAECB   DS    F              COMMUNICATION ECB\nCSASCB   DS    A              A(OUR ASCB)\nCSASAVE  DS    18F            SAVE AREA FOR SRB TARGET CODE\nCSARECPL DS    3A             PARAMETER LIST FOR RECEVSRB'S USE\nCSAEP    DS    A              A(SRB TARGET CODE)\nCSAREGSV DS    6F             REGISTER SAVE AREA FOR RECEVSRB\nCSAFRRPL DS    A              A(WORD TO RECEIVE FRR PARM LIST)\nCSAWORKL EQU   *-CSAWORK      LENGTH OF THE CSA WORK AREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGC0020H": {"ttr": 532, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "IGC      TITLE 'CONTROL CROSS MEMORY COMMUNICATION'         *HMD 10/80*\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                              IGC0020H                               *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: CONTROL CROSS MEMORY (ADDRESS SPACE) COMMUNICATION.       *\n*                                                                     *\n*                                                                     *\n* FUNCTION: IGC0020H (SVC 208) EXECUTES CALLER SPECIFIED CODE UNDER   *\n*           A CALLER SPECIFIED ADDRESS SPACE. IGC0020H PASSES THE     *\n*           CODE A COPY OF CALLER SPECIFIED DATA (IN CSA), A WORK     *\n*           AREA (IN CSA) OF CALLER SPECIFIED LENGTH, AND A RETURN    *\n*           AREA (IN CSA) OF CALLER SPECIFIED LENGTH. UPON RETURN     *\n*           FROM THE CALLER SPECIFIED CODE, IGC0020H COPIES THE       *\n*           INFORMATION IN THE CSA RETURN AREA TO A CALLER SPECIFIED  *\n*           RETURN AREA.                                              *\n*                                                                     *\n*           THE CALLER SPECIFIED CODE MUST RESIDE IN A COMMON AREA    *\n*           (EITHER LPA OR CSA), AND IGC0020H ATTEMPTS A VALIDITY     *\n*           CHECK OF THIS BY COMPARING THE ADDRESS OF THE CALLER      *\n*           SPECIFIED CODE TO THE BEGINNING OF THE COMMON SERVICE     *\n*           AREA (CSA). IF THE ADDRESS OF THE CODE IS LOWER THAN THE  *\n*           BEGINNING OF CSA, IGC0020H RETURNS CONTROL TO ITS CALLER  *\n*           WITH A RETURN CODE OF 12.                                 *\n*                                                                     *\n*           IGC0020H GETS A WORK AREA FOR ITSELF AND RECEVSRB IN CSA. *\n*                                                                     *\n*           IGC0020H CALLS FINDASCB TO LOCATE THE ADDRESS OF THE ASCB *\n*           OF THE ADDRESS SPACE NAMED BY THE CALLER. IF FINDASCB IS  *\n*           UNABLE TO LOCATE AN ASCB CORRESPONDING TO THE CALLER      *\n*           SPECIFIED ADDRESS SPACE NAME, IGC0020H RETURNS CONTROL TO *\n*           ITS CALLER WITH A RETURN CODE OF 4.                       *\n*                                                                     *\n*           IGC0020H BUILDS A SERVICE REQUEST BLOCK (SRB) IN SUBPOOL  *\n*           245 SPECIFYING THE ADDRESS OF RECEVSRB AS THE SERVICE     *\n*           REQUEST ENTRY POINT. IGC0020H PASSES RECEVSRB THE CURRENT *\n*           ASCB (SO RECEVSRB CAN POST US BACK), THE ADDRESS OF THE   *\n*           CALLER SPECIFIED CODE (SO RECEVSRB CAN CALL THE CODE),    *\n*           AND AN ECB (WHICH RECEVSRB WILL POST TO WAKE US UP) IN    *\n*           THE CSA WORK AREA PREVIOUSLY GOTTEN.                      *\n*                                                                     *\n*           IGC0020H COPIES CALLER SPECFIED DATA INTO CSA. THE COPIED *\n*           DATA, A ZEROED WORK AREA IN CSA, AND A ZEROED RETURN AREA *\n*           IN CSA ARE ALL PASSED TO RECEVSRB SO THAT RECEVSRB CAN    *\n*           PASS THEM TO THE CALLER SPECIFIED CODE.                   *\n*                                                                     *\n*           IGC0020H SCHEDULES RECEVSRB'S EXECUTION VIA THE SCHEDULE  *\n*           MACRO AND WAITS ON THE ECB TO BE POSTED BY RECEVSRB AFTER *\n*           THE CALLER SPECIFIED CODE HAS BEEN EXECUTED.              *\n*                                                                     *\n*           UPON WAKE UP BY RECEVSRB, IGC0020H COPIES THE INFORMATION *\n*           IN THE CSA RETURN AREA TO A CALLER SPECIFIED RETURN AREA. *\n*           THE RETURN AREA, WORK AREA, AND COPIED DATA AREA ARE ALL  *\n*           FREED FROM CSA. THE SRB STORAGE IS FREED FROM SUBPOOL     *\n*           245 AND THE WORK AREA IS FREED FROM CSA.                  *\n*                                                                     *\n*           IF THE RETURN CODE FROM THE CALLER SPECIFIED CODE IS 0,   *\n*           IGC0020H RETURNS CONTROL TO ITS CALLER WITH A RETURN CODE *\n*           OF 0. OTHERWISE, IGC0020H RETURNS CONTROL TO ITS CALLER   *\n*           WITH A RETURN CODE OF 8, AND THE CALLER SPECIFIED CODE'S  *\n*           RETURN CODE IN R0.                                        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> A(CL8'TARGET ADDRESS SPACE NAME')                      *\n*              A(CODE TO BE EXECUTED UNDER THE TARGET ADDRESS SPACE)  *\n*              A(F'LENGTH OF DATA TO BE PASSED',DATA TO BE PASSED)    *\n*              A(H'LENGTH OF WORK AREA TO BE PROVIDED')               *\n*              A(F'LENGTH OF THE RETURN AREA',RETURN AREA)            *\n*                                                                     *\n*                                                                     *\n* OUTPUT: RETURN AREA <- INFORMATION SET BY CALLER SPECIFIED CODE     *\n*                                                                     *\n*                                                                     *\n* RETURN CODES: R15 = 0 => THE CALLER SPECIFIED CODE WAS EXECUTED.    *\n*                     4 => THE CALLER SPECIFIED ADDRESS SPACE COULD   *\n*                          NOT BE FOUND.                              *\n*                     8 => THE CALLER SPECIFIED CODE RETURNED A NON-  *\n*                          ZERO RETURN CODE (R0 = THE CODE'S RETURN   *\n*                          CODE).                                     *\n*                    12 => THE CALLER SPECIFIED CODE IS NOT IN CSA    *\n*                          OR LPA.                                    *\n*                    16 => THE CALLER SPECIFIED CODE ABENDED.         *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCES: FINDASCB                                       *\n*                      RECEVSRB                                       *\n*                                                                     *\n*                                                                     *\n* DATA AREAS: CVT (READ)                                              *\n*             SRB (CREATED)                                           *\n*                                                                     *\n*                                                                     *\n* MACROS USED: GETMAIN                                                *\n*              SCHEDULE                                               *\n*              WAIT                                                   *\n*              FREEMAIN                                               *\n*              REGS (USER)                                            *\n*              CVT                                                    *\n*              IHASRB                                                 *\n*              HACSAW (USER)                                          *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES: REENTRANT, SVC, RESIDENT                                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nIGC0020H CSECT                SVC 208 - HAC SRB CROSS MEMORY INTERFACE\n         BALR  RBASE,R0       A(*+2)\n         USING *,RBASE        ADDRESSABILITY\n         B     STARTER        BRANCH AROUND THE HEADER\n         DC    C'IGC0020H_&SYSDATE_&SYSTIME' HEADER\n         USING CVT,RCVT       ON INPUT R3 -> CVT\nSTARTER  LR    RETAD,R14      SAVE THE RETURN ADDRESS\n         SR    RCODE0,RCODE0  ZERO THE RETURN CODE REGISTER\n         LR    RPARMS,R1      A(INPUT PARAMETER LIST)\n         USING PARMS,RPARMS   ADDRESSABILITY\n         CLC   CVTSHRVM+1(3),TARGETEP+1 TARGET CODE AT LEAST IN CSA?\n         BNH   OKEP           YES => GIVE IT A TRY\n         LA    R15,12         TELL OUR CALLER WE'VE BEEN\n*                             PASSED BAD CODE\n         BR    RETAD          RETURN TO OUR CALLER\nOKEP     GETMAIN R,LV=CSAWORKL,SP=SPCSA GET THE CSA COMM AREA\n         LR    RCSA,R1        A(OUR CSA WORK AREA)\n         USING CSAWORK,RCSA   ADDRESSABILITY\n         MVC   CSAIDP,=C'HACSAW  '                          *HMD 04/85*\n*                             IDENTIFY THE WORK AREA        *HMD 04/85*\n         MVC   FNDASBPL(4),ASCBNAME PASS FINDASCB THE A(ASCB NAME)\n         LA    R1,TRGTASCB    A(WORD TO RECEIVE A(TARGET ASCB))\n         ST    R1,FNDASBPL+4  PASS IT TO FINDASCB\n         LA    R1,FNDASBPL    A(FINDASCB'S PARAMETER LIST)\n         LA    R13,FNDASBSV   A(SAVE AREA FOR FINDASCB)\n         L     R15,FNDASBAD   V(FINDASCB)\n         BALR  R14,R15        FIND THE ASCB FOR THE SPECIFIED NAME\n         LTR   R15,R15        ASCB FOR THE SPECIFIED NAME FOUND?\n         BNZ   RETURN         NO => TELL OUR CALLER\n         GETMAIN R,LV=SRBSIZE,SP=245 GET SPACE FOR OUR SRB\n         LR    RSRB,R1        A(THE SRB)\n         USING SRBSECT,RSRB   ADDRESSABILITY\n         XC    SRB(SRBSIZE),SRB ZERO THE WHOLE SRB\n         MVC   SRBID,SRBLANK  PUT IN 'SRB '\n         MVC   SRBASCB,TRGTASCB PUT IN THE TARGET ASCB\n         ST    RASCB,CSASCB   PASS RECEVSRB OUR ASCB\n         L     R1,RECEVAD     V(RECEVSRB)\n         ST    R1,SRBEP       ENTRY POINT FOR SRB\n         ST    RCSA,SRBPARM   PASS IT TO RECEVSRB\n         MVC   CSAEP,TARGETEP PASS RECEVSRB THE TARGET CODE'S EP\n         XC    CSAECB,CSAECB  ZERO THE ECB\n         EJECT\n         L     RWORK,TRGTDATA A(DATA AREA TO BE PASSED TO THE TARGET)\n         L     R0,0(RWORK)    LENGTH OF THE DATA TO BE PASSED\n         AL    R0,CSASP       REQUEST CSA\n         GETMAIN R,LV=(0)     GET CSA SPACE FOR THE DATA COPY\n         ST    R1,CSARECPL    PASS THE A(DATA) TO THE SRB TARGET\n         LR    R14,RWORK      A(DATA TO BE PASSED)\n         L     R15,0(R14)     LENGTH OF THE DATA\n         LR    R0,R1          A(CSA STORE WHERE THE DATA'S GOING)\n         LR    R1,R15         AMOUNT TO COPY\n         MVCL  R0,R14         COPY THE DATA INTO CSA\n         L     RWORK,WORKLNTH A(H'WORK AREA LENGTH')\n         LH    R0,0(RWORK)    LENGTH OF WORK AREA FOR SRB TARGET\n         AL    R0,CSASP       PUT IT IN CSA\n         GETMAIN R,LV=(0)     GET THE SRB TARGET A WORK AREA\n         ST    R1,CSARECPL+4  PASS IT TO THE SRB TARGET\n         LR    R0,R1          A(WORK AREA IN CSA)\n         LH    R1,0(RWORK)    H'LENGTH OF THE WORK AREA'\n         SR    R14,R15        ZERO\n         SR    R15,R15        OUT\n         MVCL  R0,R14         THE WORK AREA\n         L     RWORK,INFORETA A(RETURN INFO AREA)\n         L     R14,0(RWORK)   LENGTH OF THE RETURN INFO AREA\n         LR    R0,R14         DITTO\n         AL    R0,CSASP       COPY OF IT WILL BE IN CSA\n         GETMAIN R,LV=(0)     GET A RET AREA FOR THE SRB TARGET\n         ST    R14,0(R1)      SAVE ITS LENGTH IN THE 1ST WORD\n         ST    R1,CSARECPL+8  PASS THE SRB TARGET THE RET AREA\n         LA    R0,4(R1)       A(4 BYTES INTO THE RETURN INFO AREA)\n         LA    R1,4           LENGTH OF LENGTH FIELD IN 1ST WORD\n         LCR   R1,R1          R1 <- LENGTH OF THE RETURN\n         AR    R1,R14         INFO AREA - 4\n         SR    R14,R15        ZERO\n         SR    R15,R15        OUT THE\n         MVCL  R0,R14         RETURN INFO AREA\n         EJECT\n         SCHEDULE SRB=(RSRB),SCOPE=LOCAL ATTACH THE SRB\n         WAIT  ECB=CSAECB     WAIT FOR THE SRB TO COMPLETE\n         EJECT\n         L     R14,INFORETA   A(WHERE CALLER WANTS RET INFO)\n         L     R15,0(R14)     LENGTH OF THIS AREA\n         L     R0,CSARECPL+8  A(WHERE SRB TARGET RETURNED INFO)\n         LR    R1,R15         AMOUNT TO BE COPIED\n         MVCL  R14,R0         COPY THE SRB TARGET'S RETURN INFO\n*                             INTO THE CALLER'S RETURN AREA\n         L     R1,CSARECPL+8  A(SRB TARGET'S RETURN AREA)\n         L     R0,0(R1)       LENGTH OF THE RETURN AREA\n         AL    R0,CSASP       IT'S IN CSA\n         FREEMAIN R,LV=(0),A=(1) FREE THE SRB TARGET'S RET AREA\n         L     R1,CSARECPL+4  A(SRB TARGET'S WORK AREA)\n         L     RWORK,WORKLNTH A(H'SRB TARGET'S WORK AREA LENGTH')\n         LH    R0,0(RWORK)    LENGTH OF THIS WORK AREA\n         AL    R0,CSASP       ITS IN CSA AS WELL\n         FREEMAIN R,LV=(0),A=(1) FREE THE SRB TARGET'S WORK AREA\n         L     R1,CSARECPL    A(SRB TARGET'S INPUT DATA)\n         L     R0,0(R1)       LENGTH OF THE INPUT DATA\n         AL    R0,CSASP       IT WAS COPIED INTO CSA\n         FREEMAIN R,LV=(0),A=(1) FREE THE SRB TARGET'S INPUT DATA\n         FREEMAIN R,LV=SRBSIZE,SP=245,A=(RSRB) FREE OUR SRB\n         L     RCODE0,CSAECB   SRB RETURN CODE\n         LA    RCODE0,0(RCODE0) CLEAR THE HIGH-ORDER BYTE\n         CH    RCODE0,TWO56   RECEVSRB SAY THE CALLER'S CODE ABENDED?\n         BNE   CHKRC0         NO => SEE IF IT'S A 0 RETURN CODE\n         LA    R15,16         INDICATE CALLER SPECIFIED CODE ABEND\n         B     RETURN         RETURN TO OUR CALLER\nCHKRC0   LTR   R15,RCODE0     SRB COMPLETE NORMALLY?\n         BZ    RETURN         YES => RETURN TO OUR CALLER\n         LA    R15,8          INDICATE SRB NON-ZERO RETURN CODE\nRETURN   LR    RCODE,R15      SAVE THE RETURN CODE\n         FREEMAIN R,LV=CSAWORKL,SP=SPCSA,A=(RCSA) FREE THE CSA COMM\n         LR    R15,RCODE      OUR RETURN CODE\n         LR    R0,RCODE0      PASS THE TARGET'S RC IN R0\n         BR    RETAD          RETURN TO OUR CALLER\n         EJECT\nTWO56    DC    H'256'         RECEVSRB RC => CALLER CODE ABEND\nSRBLANK  DC    CL4'SRB '      SRB ID\nFNDASBAD DC    V(FINDASCB)    FIND'S AN ASCB BY NAME\nRECEVAD  DC    V(RECEVSRB)    INTERFACES THE SRB CODE\nSPCSA    EQU   241            SUBPOOL NUMBER FOR CSA\nCSASP    DC    AL1(SPCSA),AL3(0) DITTO\n         EJECT\n         REGS  ,\nRBASE    EQU   R2             A(IGC0020H+2)\nRCVT     EQU   R3             A(CVT) - ESTABLISHED BY CALLER\nRPARMS   EQU   R4             A(INPUT PARAMETER LIST)\nRSRB     EQU   R5             A(SRB)\nRCSA     EQU   R6             A(OUR CSA WORK AREA)\nRASCB    EQU   R7             A(OUR ASCB) - ESTABLISHED BY CALLER\nRCODE    EQU   R8             RETURN CODE\nRCODE0   EQU   R9             TARGET CODE'S RETURN CODE\nRETAD    EQU   R10            RETURN ADDRESS\nRWORK    EQU   R11            WORK REGISTER\n         EJECT\n         IHASRB\n         EJECT                                              *HMD 12/79*\n         CVT   DSECT=YES,LIST=YES\n         EJECT\nPARMS    DSECT                INPUT PARAMETER LIST\nASCBNAME DS    A              A(TARGET ASCB NAME)\nTARGETEP DS    A              A(CODE TO BE EXECUTED UNDER THE ASCB)\nTRGTDATA DS    A              A(DATA AREA TO BE PASSED TO TARGET)\nWORKLNTH DS    A              A(H'LENGTH OF WORK AREA TO BE PROVIDED')\nINFORETA DS    A              A(RETURN INFO AREA FROM TARGET)\n         EJECT\n         HACSAW\nFNDASBPL EQU   CSARECPL       FINDASCB'S PARAMETER LIST\nTRGTASCB EQU   CSARECPL+8     A(TARGET ASCB)\nFNDASBSV EQU   CSASAVE        SAVE AREA FOR FINDASCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOBNAME": {"ttr": 772, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "JOBNAME TITLE 'SYNTEX STC INTRECEPT FOR ADDING JOB INFO       H. DEAN'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11                   PREVIOUS SAVE AREA ADDRESS\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nBASEREG  EQU   R12\n         EJECT\nJSEL     DSECT                     LOGON SCHEDULING ENTERANACE LIST\n         DS    F                   FILLER\nJSELJSOL DS    F\nJSELCSCB DS    F                   CSCB POINTER\nJSELJCLS DS    F                   JCL POINTER\nJSELJZXL DS    F\nJSELASCB DS    F                   ASCB POINTER\n         ORG   JSELASCB\nJSELEOL  DS    XL1                 END OF LIST INDICATOR\n         SPACE 3\nJCLS     DSECT                     JOB CONTROL LANGUAGE SET\nJCLSHDR  DS    0F\nJCLSJCLS DS    F                   NEXT JCL POINTER OR ZERO\n         DS    F                   FILLER\nJCLSCARD DS    0CL80\nJCLSLASH DS    CL2                 // JCL INDICATOR\nJCLSLABL DS    CL8                 JOB NAME\n         DS    CL1                 FILLER\nJCLSJOB  DS    CL3                 JOB\n         DS    CL1                 FILLER\nJCLSBODY DS    CL56                BODY OF JCL STATEMENT\nJCLSCNTN DS    CL1                 CONTINUATION INDICATOR\nJCLSSEQ  DS    CL8                 SEQUENCE NUMBER\n         ORG   JCLSJOB\nJCLSEXEC DS    CL5                 EXECUTE CARD\n         ORG\nJCLSACCT EQU   JCLSCARD+16\n         EJECT\nR13DSECT DSECT\nR13SAVE  DS    18F                 SAVE AREA\nR13DCB   DS    CL96                DCB FOR JOBNAME\nR13DECB  DS    0F                  DECB FOR READ\nR13ECB   DS    F                   ECB FOR READ\nR13TYP1  DS    X\nR13TYP2  DS    X\nR13LNTH  DS    AL2(0)              LENGTH OF READ\nR13DCBP  DS    A                   POINTER TO THE DCB\nR13AREA  DS    A                   POINTER TO THE IOAREA\nR13RPW   DS    A                   RECORD POINTER WORD\nR13IO    DS    CL80                IOAREA\nR13OPEN  OPEN  (R13DCB,INPUT),MF=L\nR13ERROR DS    C                   ERROR INDICATOR FROM EXIT ROUTINES\nR13TYPE  DS    C                   TYPE OF CARD READ\nR13CARD  DS    C                   TYPE OF CURRENT CARD\nR13FLAG  DS    C                                            *HMD 04/81*\nR13LEN   EQU   *-R13DSECT\n         EJECT\nJFCBDSCT DSECT\n         IEFJFCBN   LIST=YES                                *HMD 04/81*\n         EJECT\n         DCBD DSORG=PS\n         EJECT\nTIOTDSCT DSECT\n         IEFTIOT1\n         EJECT\n         CVT  DSECT=YES,LIST=YES\n         EJECT\n         IKJTCB     LIST=YES                                *HMD 04/81*\n         EJECT\n         IRAOUCB\n         EJECT\n         IHAASCB\n         EJECT\nJOBNAME CSECT\n         USING *,R15\n         B     BEGIN\n         DC    CL8'JOBNAME'        NAME OF MODULE\n         DC    C'&SYSTIME &SYSDATE' DATE/TIME OF ASSEMBLY\nBEGIN    DS    0H\n         LR    R10,R1              SAVE PARM POINTER\n         DROP  R15\n         USING JOBNAME,BASEREG\n         LR    BASEREG,R15\n         LR    R11,R13             SAVE ORIGINAL R13\n         GETMAIN R,LV=R13LEN       NEW SAVE AREA\n         USING R13DSECT,R13\n         LR    R13,R1              SAVE OLD SAVE AREA ADDRESS\n         LR    R4,R10              JSEL ADDRESS\n         L     R1,16               POINT TO CVT\n         USING CVT,R1\n         L     R1,CVTTCBP          TCB POINTER\n         L     R1,4(R1)            ADDRESS OF CURRENT TCB\n         USING TCB,R1\n         L     R1,TCBTIO           POINT TO TIOT\n         USING TIOT1,R1\n         LA    R7,TIOELNGH         FIRST TIOT ENTRY\n         USING TIOELNGH,R7\n         SH    R1,=H'24'           POINT TO LAST ENTRY USED\n         L     R2,0(R1)            SAVE LAST CURRENTLY USED ENTRY\nTIOTENT  DS    0H\n         CLI   TIOEDDNM,C' '       CONCATENATED DATASET\n         BE    TIOTNEXT\n         CLC   TIOEDDNM,=CL8'JOBNAME' LOOK FOR JOBNAME DD CARD\n         BE    FINDJOB\nTIOTNEXT DS    0H\n         SR    R1,R1               CLEAR\n         IC    R1,TIOELNGH         LENGTH OF THIS ENTRY\n         LA    R7,0(R1,R7)         POINT TO NEXT ENTRY\n         CLI   TIOELNGH,X'00'      IS THIS THE LAST ENTRY\n         BE    RETURN\n         CR    R7,R2               LAST ENTRY\n         BE    RETURN\n         B     TIOTENT\n         EJECT\nFINDJOB  DS    0H\n         MVC   R13DCB,JOBDCB       INSURE REENTRENCY\n         MVI   R13CARD,0           CLEAR FLAG BYTE          *HMD 04/81*\n         MVI   R13FLAG,C' '        CLEAR FLAG BYTE          *HMD 04/81*\n         MVI   R13OPEN,X'80'       END OF LIST\n         OPEN  (R13DCB,INPUT),MF=(E,R13OPEN)\n         TM    R13DCB+DCBOFLGS-IHADCB,DCBOFOPN IS DATASET OPEN\n         BNO   RETURN              ..NO BYPASS\n         USING JSEL,R4\n         ICM   R4,7,JSELJCLS+1     JCL FOR LOGON\n         USING JCLS,R4\n         BZ    RETURN              WAS JCL BUILT\n         FIND  R13DCB,JCLSLABL,D   USE JOB NAME IN FIND\n         LTR   R15,R15             HAS NAME BEEN FOUND\n         BNZ   RETURN\n         SPACE 3\nFINDJOB1 DS    0H\n         TRT   JCLSBODY,CONTINUE   IS THERE A COMMA OR SPACE ON CARD\n         CLM   R2,1,COMMA          IS IT A COMMA\n         LR    R2,R1               SAVE ADDRESS OF FIRST SPACE\n         BNE   READJOB\n         ICM   R4,7,1(R4)          NEXT CARD\n         BZ    RETURN\n         CLC   JCLSEXEC,EXEC       IS THIS AN EXEC CARD\n         BE    RETURN              ..YES. THIS IS A ERROR\n         B     FINDJOB1\n         SPACE 3\nREADJOB  DS    0H\n         MVI   R13ERROR,X'40'\n         READ  R13DECB,SF,R13DCB,R13IO,80,MF=E\n         CHECK R13DECB\n         CLI   R13ERROR,X'40'      WAS THERE AN ERROR ON READ\n         BNE   RETURN\n*                                                           *HMD 04/81*\n         CLI   R13FLAG,C'X'        DO WE NEED ACCT SCAN?    *HMD 04/81*\n         BE    RJCLB               NO, FORGET ROUTINE       *HMD 04/81*\nLOOPINIT LA    R5,R13IO+3          SCAN FOR ACCT CARD       *HMD 04/81*\n         LA    R6,1                INCREMENT                *HMD 04/81*\n         LA    R7,R13IO+71         END OF SCAN              *HMD 04/81*\nBXLEOP   CLI   0(R5),C' '          FIND BEGINNING OF OPERAND*HMD 04/81*\n         BNE   GOTIT               WE GOT AN OPERAND        *HMD 04/81*\n         BXLE  R5,R6,BXLEOP        CONTINUE SCAN            *HMD 04/81*\n         B     RETURN              NOTHING ON CARD          *HMD 04/81*\nGOTIT    CLI   0(R5),C'('          BEGINNING OF ACCT FIELD  *HMD 04/81*\n         MVI   R13FLAG,C'X'        SAY WE'VE BEEN HERE      *HMD 04/81*\n         BNE   RJCLB               ASSUME IT'S A KEYWORD    *HMD 04/81*\n         SR    R7,R5               LENGTH OF TRT            *HMD 04/81*\n         BNP   RETURN              MUST BE ERROR            *HMD 04/81*\n         SR    R7,R6               DOWN 1 FOR EXECUTE       *HMD 04/81*\n         BNP   RETURN              AVOID ERRORS             *HMD 04/81*\n         SR    R2,R2               CLEAR FUNCTION REGISTER  *HMD 04/81*\n         SR    R1,R1               CLEAR ADDRESS REGISTER   *HMD 04/81*\n         EX    R7,ACCTTRT          LOOK FOR FIRST BLANK     *HMD 04/81*\n         BZ    RETURN              ERROR; NO SPACES         *HMD 04/81*\n         SR    R1,R5               R1 = LENGTH OF ACCT DATA *HMD 04/81*\n         BNP   RETURN              ERROR OF SOME KIND       *HMD 04/81*\n         CH    R1,MAXLEN           LENGTH GT MAX?           *HMD 04/81*\n         BH    RETURN              ERROR; RETURN TO CALLER  *HMD 04/81*\n         SR    R1,R6               DOWN 1 FOR MVC           *HMD 04/81*\n         BNP   RETURN              NOPE, MUST BE AN ERROR   *HMD 04/81*\n         EX    R1,ACCTMOVE         MOVE ACCT DATA           *HMD 04/81*\n         LA    R1,JCLSBODY+1(R1)   FIND END OF FIELD        *HMD 04/81*\n         LA    R2,L'RESTCARD(R1)   REPOSITION FOR COMMA     *HMD 04/81*\n         MVC   0(L'RESTCARD,R1),RESTCARD                    *HMD 04/81*\n*                                  MOVE IN MSGLEVEL=1 CARD  *HMD 04/81*\n         B     READJOB             GET NEXT CARD            *HMD 04/81*\n*                                                           *HMD 04/81*\nRJCLB    BAL   R14,JCLBUILD        GET ADDITIONAL STORAGE\n         CLC   JCLC,R13IO          IS THIS AN ACCOUNT CARD\n         MVI   R13TYPE,C'A'        NON CONTINUATION TYPE JCL\n         BNE   JCLINSRT\n         MVI   R13TYPE,C'J'        CONTINUATION TYPE JCL\n         CLI   R13CARD,X'00'       IS COMMA IN PLACE\n         BNE   JCLINSRT\n         MVI   R13CARD,C'J'\n         MVI   0(R2),C','          MOVE A COMMA\n         B     JCLINSRT\n         EJECT\nJCLINSRT DS    0H\n         CLI   R13TYPE,C'J'        IS THIS A JCL CONTINUATION\n         BNE   JCLINST1\n         CLC   R13TYPE,R13CARD     ARE WE STILL PROCESSING JCL CONT\n         BE    JCLINST2\n         B     READJOB\nJCLINST1 DS    0H\n         MVI   R13TYPE,C'A'        INDICATE END OF CONTINUATION\nJCLINST2 DS    0H\n         MVC   JCLSCARD,R13IO      MOVE JCL STATEMENT\n** REMOVED RESTRICTION THAT '//*ACCT' CARD SIGNIFIES THE    *HMD 04/81*\n** LAST CARD                                                *HMD 04/81*\n** 04/10/81 - HOWARD M. DEAN                                *HMD 04/81*\n         B     READJOB\n         SPACE 3\nJCLBUILD DS    0H      R4 CONTAINS THE ADDR OF JCLSJCLS\n         GETMAIN R,LV=88,SP=253\n         MVC   JCLSJCLS-JCLS(4,R1),JCLSJCLS  EXEC CARD TO //*ACCT CARD\n         ST    R1,JCLSJCLS         CHAIN //*ACCT CARD TO JOB CARD\n         LR    R4,R1               ESTABLISH NEW JCL CARD ADDRESS\n         BR    R14                 RETURN TO CALLING ROUTINE\n         SPACE 3\n         EJECT\nRETURN   DS    0H\n         TM    R13DCB+DCBOFLGS-IHADCB,DCBOFOPN IS DATA SET OPEN\n         BNO   RETURN1\n         CLOSE R13DCB,MF=(E,R13OPEN)\nRETURN1  DS    0H\n         LR    R1,R13               SET ADDRESS FOR FREEMAIN\n         FREEMAIN R,LV=R13LEN,A=(1) FREE ACQUIRED SAVE AREA\n         LR    R1,R10               PARM PASSED FROM IEEVJCL\n         LR    R13,R11              RESTORE R13\n         XCTL  EP=IEESB605          RESTORE REGISTERS\n         EJECT\nABNDEXIT DS    0H\n         MVI   3(R1),4              SET IGNORE ABEND\n         MVI   R13ERROR,C'A'        INDICATE ABEND EXIT TAKEN\n         BR    R14                  RETURN TO SYSTEM\n         SPACE 3\nSYNAD    DS    0H\n         MVI   R13ERROR,C'S'        INDICATE SYNAD EXIT TAKEN\n         BR    R14                  RETURN TO SYSTEM\n         EJECT\n***********************************************************************\n* * * *        CONSTANTS                                        * * * *\n***********************************************************************\nMAXLEN   DC    H'45'               MAXIMUM LENGTH OF ACCTG  *HMD 04/81*\nH5       DC    H'5'                BUILD JCL REQUEST\nH1       DC    H'1'                MIN LENGTH OF ACCT FIELD AFTER SCAN\nJCLC     DC    CL3'// '            ADD THIS CONTIUATION CARD\nACCT     DC    CL7'//*ACCT'        ACCOUNT CARD\nJOB      DC    CL3'JOB'            JOBCARD\nEXEC     DC    CL4'EXEC'           EXECUTE CARD\nRESTCARD DC    C',MSGLEVEL=1'      REST OF CARD             *HMD 04/81*\nACCTMOVE MVC   JCLSBODY(0),0(R5)   MOVE IN ACCT DATA        *HMD 04/81*\nACCTTRT  TRT   0(0,R5),CHKCARD     LOOK FOR SPACE           *HMD 04/81*\n         EJECT\nJOBDCB   DCB   DDNAME=JOBNAME,RECFM=F,BLKSIZE=80,MACRF=R,SYNAD=SYNAD,  *\n               DSORG=PO,EXLST=EXLST,EODAD=RETURN\n         EJECT\nEXLST    DC    XL1'91',AL3(ABNDEXIT) ABEND EXIT ROUTINE\nCONTINUE DC    256XL1'00'          TRANSLATE AND TEST TABLE\n         ORG   CONTINUE+X'40'\n         DC    XL1'40'\n         ORG   CONTINUE+C','\nCOMMA    DC    CL1','\n         ORG   ,                                            *HMD 04/81*\nCHKCARD  DC    256XL1'00'          TRT TABLE                *HMD 04/81*\n         ORG   CHKCARD+X'40'       CHECK FOR SPACES         *HMD 04/81*\n         DC    X'01'               NON-ZERO VALUE           *HMD 04/81*\n         ORG   ,                                            *HMD 04/81*\n         EJECT\n***********************************************************************\n* * * *        LITERALS                                         * * * *\n***********************************************************************\n         SPACE 3\n         LTORG\n         SPACE 3\n         END  JOBNAME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JSTATUS": {"ttr": 777, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "STAT  TITLE 'DISPLAY STATUS OF JES2 JOBS, LOGONS, AND STARTED TASKS'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                               STATUS                                *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY STATUS OF JES2 JOBS, LOGONS, & STARTED TASKS.     *\n*                                                                     *\n*                                                                     *\n* FUNCTION: STATUS IS A COMMAND PROCESSOR.                            *\n*                                                                     *\n*           STATUS BUILDS A PARAMETER LIST TO BE PASSED TO            *\n*           STATJES2, EXECUTES STATJES2 UNDER A JES2 ADDRESS SPACE  | *\n*           VIA SVC 208, AND OUTPUTS THE INFORMATION RETURNED BY      *\n*           STATJES2.                                                 *\n*                                                                     *\n*           THE FIRST OPERAND ON THE COMMAND EXECUTION IS A LIST OF | *\n*           JOBNAMES TO BE SELECTED FROM THE JES2 JOB QUEUE.  THE   | *\n*           SECOND OPERAND IS THE NAME OF THE JES2 SUBSYSTEM TO BE  | *\n*           QUERIED. IF OMITTED, THE SECOND PARAMETER DEFAULTS TO   | *\n*           'JES2'.                                                 | *\n*                                                                     *\n*           IF THE FIRST OPERAND WAS NOT SPECIFIED ON THE COMMAND   | *\n*           INVOCATION OF STATUS, THE USER'S ID IS PASSED TO        | *\n*           STATJES2. OTHERWISE, STATUS PASSES THE LIST OF JOB      | *\n*           NAMES SPECIFIED BY THE USER TO STATJES2.                  *\n*                                                                     *\n*           ALONG WITH A JOB NAME LIST, STATUS PASSES STATJES2 A    | *\n*           WORK AREA OF 2048 BYTES AND A RETURN AREA OF 60K.       | *\n*           STATUS GETS STATJES2 EXECUTED UNDER A JES2 ADDRESS      | *\n*           SPACE VIA THE HELP OF SVC 208.                            *\n*                                                                     *\n*           BEFORE CALLING STATJES2 VIA SVC 208, STATUS DEFERS ATTEN- *\n*           TION INTERRUPTIONS AND SINGLE STREAMS EXECUTION OF        *\n*           STATJES2 VIA AN EXCLUSIVE ENQ.                            *\n*                                                                     *\n*           DEPENDING UPON THE RETURN CODE FROM SVC 208 AND STATJES2, *\n*           STATUS EITHER ABENDS (STATUS ERRORS), DISPLAYS A MESSAGE  *\n*           SAYING JES2 IS NOT UP, DISPLAYS A MESSAGE SAYING NO JOBS  *\n*           WERE FOUND, OR DISPLAYS THE JOBS RETURNED BY STATJES2.    *\n*                                                                     *\n*           THE JES2 JOB QUEUE ELEMENTS (JQES) RETURNED BY STATJES2   *\n*           ARE USED TO DISPLAY INFORMATION ON JOBS ON INPUT, WAIT-   *\n*           ING FOR EXECUTION, OR EXECUTING.                          *\n*                                                                     *\n*           THE JES2 JOB OUTPUT ELEMENTS (JOES) ARE USED TO DISPLAY   *\n*           JOBS WAITING FOR OR ON OUTPUT.                            *\n*                                                                     *\n*           MOST OF THE CODE INVOLVED IN THE OUTPUTTING OF THE INFOR- *\n*           MATION FROM THE JQES AND JOES IS COPIED FROM JES2'S CMD   *\n*           HANDLING ROUTINE - HASPCOMM.                              *\n*                                                                     *\n* RELEASE                                                           | *\n*    INFO:  THIS COMMAND ONLY SUPPORTS MVS/SP JES2 1.3.3            | *\n*           OR 1.3.4. IT HAS JUST BEEN TOO DIFICULT AND TIME        | *\n*           CONSUMING TO MAINTAIN DOWNWARD COMPATIBILITY.           | *\n*           YOU GOVERMENT WORKERS ARE JUST OUT OF LUCK, I GUESS.    | *\n*           TIME PERMITTING, UPDATES FOR SUBSEQUENT RELEASES        | *\n*           OF MVS/SP JES2 WILL BE ATTEMPTED. HOWEVER, THERE        | *\n*           ARE NO GUARANTEES. LET THE BUYER BEWARE (I HATE LATIN). | *\n*                                                                   | *\n*           IF YOU HAVE ANY SUGGESTIONS (OR FREE CODE) PLEASE       | *\n*           CONTACT ME. THIS COMMAND IS \"PUBLIC DOMAIN\" BUT I       | *\n*           WOULD LIKE TO INTEGRATE ANY IMPROVEMENT YOU HAVE MADE.  | *\n*                                                                   | *\n*           CONTACT:                                                | *\n*                                                                   | *\n*           HOWARD M. DEAN                                          | *\n*           SYNTEX U.S.A                                            | *\n*           MAIL STOP A5-CIS-5                                      | *\n*           3401 HILLVIEW AVENUE                                    | *\n*           PALO ALTO, CA, CA 90403                                 | *\n*           (415) - 852-1792                                        | *\n*                                                                   | *\n*           CHANGES TO THIS DOCUMENTATION ARE INDICATED             | *\n*           VIA A VERTICAL BAR TO THE RIGHT OF THE                  | *\n*           COMMENTS.                                               | *\n*                                                                   | *\n* LAST MODIFIED ON 03/29/85 - HOWARD M. DEAN                        | *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> COMMAND PROCESSOR PARAMETER LIST (CPPL)                *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: STATJES2                                        *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              ABEND                                                  *\n*              RETURN                                                 *\n*              GETMAIN                                                *\n*              CALL                                         *HMD 10/80*\n*              LINK                                         *HMD 03/85*\n*              STAX                                                   *\n*              ENQ                                                    *\n*              DEQ                                                    *\n*              PUTLINE                                      *HMD 12/79*\n*              IKJRLSA                                                *\n*              FREEMAIN                                               *\n*              IKJPARM                                                *\n*              IKJIDENT                                               *\n*              IKJENDP                                                *\n*              $JQE                                                   *\n*              $JOE                                                   *\n*              IKJCPPL                                                *\n*              IKJECT                                                 *\n*              IKJPSCB                                                *\n*              CVT                                                    *\n*                                                                     *\n* ATTRIBUTES: REENTRANT,RESIDENT                                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nSTATUS   CSECT                DISPLAY STATUS OF JES2 JOBS\n         SAVE  (14,12),,STATUS_COPYRIGHT_(C)_1985_HOWARD_M_DEAN\n         LR    RBASE,R15      A(STATUS)\n         USING STATUS,RBASE   ADDRESSABILITY\n         B     IDEND          BRANCH AROUND ID              *HMD 01/83*\n*                                                           *HMD 01/83*\nID       DC    CL32' ASSEMBLED ON &SYSDATE AT &SYSTIME'     *HMD 01/83*\n         DC    CL32' VER 1 REL 5 MOD 0'                     *HMD 01/83*\n*                                                           *HMD 01/83*\nIDEND    DS   0H              POINT TO BRANCH AROUND        *HMD 01/83*\n         LR    RCPPL,R1       A(CPPL)\n         USING CPPL,RCPPL     ADDRESSABILITY\n         BAL   RLINK,STINIT   STATUS INITIALIZATION\n         BAL   RLINK,JOBUILD  BUILD THE JOB NAME PARAMETER LIST\n         BAL   RLINK,CALLJES2 CALL STATJES2 THRU SVC 208\n         BAL   RLINK,CHKRCODE TRANSFER CNTL BASED ON RET CODES\n         B     OUTINFO        OUTPUT THE INFO ON RETURNED JOBS\n         B     NOJOBS         NO JOBS FOUND\n         B     NOJES2         SELECTED JES2 NOT UP\n         ABEND 12             STATJES2 ABENDED\nNOJES2   BAL   RLINK,OUTNOJES OUTPUT SELECTED JES2 NOT UP\n         LA    R6,12          RETURN CODE                   *HMD 01/83*\n         B     DONE           RETURN\nNOJOBS   BAL   RLINK,OUTNOJOB OUTPUT NO JOBS FOUND\n         LA    R6,8           RETURN CODE                   *HMD 01/83*\n         B     DONE           RETURN\nOUTINFO  BAL   RLINK,OUTJQES  OUTPUT JOBS ON INPUT, AWAITING\n*                             EXECUTION, OR EXECUTING\n         BAL   RLINK,OUTJOES  OUTPUT JOBS AWAITING OR ON OUTPUT\n         BAL   RLINK,OUTFILL  OUTPUT FILLED RETURN AREA MSG IF NEEDED\n         BAL   RLINK,SETRC    SET RETURN CODE HERE          *HMD 01/83*\nDONE     BAL   RLINK,STDONE   CLOSE UP SHOP\n         LR    R15,R6         FETCH RETURN CODE             *HMD 01/83*\n         RETURN (14,12),RC=(15)                             *HMD 01/83*\n*                             RETURN TO CALLER              *HMD 01/83*\n         EJECT\nSTINIT   LA    R0,LWRKAREA    LENGTH OF OUR WORK SPACE\n         GETMAIN R,LV=(0)     GET THE WORK AREA\n         ST    R1,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R1)      SAVE THE CALLER'S R13\n         LR    R13,R1         A(OUR WORK SPACE)\n         USING WORKAREA,R13   ADDRESSABILITY\n         SPACE 1                                            *HMD 04/85*\n         L     R1,CPPLPSCB    POINT TO PSCB USER FIELD      *HMD 04/85*\n         MVC   USERID(7),PSCBUSER-PSCB(R1)                  *HMD 04/85*\n         MVI   USERID+7,C' '  BLANK OUT LAST CHARACTER      *HMD 04/85*\n         SPACE 1                                            *HMD 04/85*\n         MVI   STATS,KZERO    INITIALIZE THE STATUS BITS    *HMD 02/83*\n         L     R14,RETLEN     LENGTH OF THE RETURN INFO AREA*HMD 01/83*\n         GETMAIN R,LV=(R14)   GET SPACE FOR THE RETURN AREA *HMD 01/83*\n         ST    R14,0(R1)      SAVE ITS LENGTH IN THE 1ST WORD\n         ST    R1,ATACHPL+16  PASS THE RETURN INFO AREA TO ATACHSRB\n         MVC   JES2,JESNAME    INIT SUBSYSTEM NAME          *HMD 01/83*\n         MVC   IOPLUPT,CPPLUPT A(UPT) TO IOPL               *HMD 12/79*\n         MVC   IOPLECT,CPPLECT A(ECT) TO IOPL               *HMD 12/79*\n         LA    RWORK,ANECB1    A(ECB) TO IOPL               *HMD 12/79*\n         ST    RWORK,IOPLECB   SAVE IN IOPL                 *HMD 12/79*\n         MVC   MLISTH,=C'SYN005I '  MOVE IN SYNTEX ERROR ID *HMD 04/85*\n         LA    RWORK,MLISTA   GET OUTPUT LINE ADDR          *HMD 12/79*\n         ST    RWORK,OLDIE+4  SAVE IN O.L.D                 *HMD 12/79*\n         LA    RWORK,83       GET OUTPUT LINE LENGTH        *HMD 12/79*\n         SLL   RWORK,16       MOVE TO HIGH ORDER            *HMD 12/79*\n         ST    RWORK,MLISTA   SAVE IN OUTPUT DESCRIPTOR     *HMD 12/79*\n         ST    RWORK,MLISTB   SAVE IN OUTPUT DESCRIPTOR     *HMD 12/79*\n         LA    RWORK,1        ONLY ONE SEGMENT              *HMD 12/79*\n         ST    RWORK,OLDIE    SAVE IN O.L.D                 *HMD 12/79*\n         L     RECT,CPPLECT   A(ECT)\n         USING ECT,RECT       ADDRESSABILITY\n         BR    RLINK          RETURN TO OUR CALLER\n         EJECT\nJOBUILD  TM    ECTSWS,ECTNOPD OPERANDS PRESENT?\n         BZ    PARSE          YES => PARSE THEM\n         SPACE 1\nJOBUSER  L     R1,CPPLPSCB    A(PSCB)                       *HMD 01/83*\n         USING PSCB,R1        ADDRESSABILITY\n         MVC   ONEJOBNM(7),PSCBUSER PUT IN THE USER'S ID\n         MVI   ONEJOBNM+7,C' ' BLANK OUT THE LAST CHAR\n         SR    R15,R15        FOR THE INSERT CHARACTER\n         IC    R15,PSCBUSRL   AL1(LENGTH OF THE USER'S ID)\n         DROP  R1             PSCB NO LONGER NEEDED\n         STH   R15,ONEJBNML   SET THE USER'S ID LENGTH\n         LA    R1,14          LENGTH OF THE ENTIRE PARM     *HMD 03/85*\n         ST    R1,ONEJOBLN    ENTIRE PARM COMPLETE\n         LA    R1,ONEJOBLN    PASS THE 1 JOB NAME PARM\n         ST    R1,ATACHPL+8   TO STATJES2\n         BR    RLINK          RETURN TO OUR CALLER\nPARSE    MVC   PPLCBUF,CPPLCBUF PASS IKJPARS THE CBUF,\n         MVC   PPLUPT,CPPLUPT UPT,\n         MVC   PPLECT,CPPLECT AND ECT\n         MVI   ANECB,KZERO    ZERO OUR ECB                  *HMD 02/83*\n         LA    R1,ANECB       A(OUR ECB)\n         ST    R1,PPLECB      PASS IT TO IKJPARS\n         L     R1,STPCLAD     V(OUR PCL)\n         ST    R1,PPLPCL      PASS IT TO IKJPARS\n         LA    R1,PPLRANS     A(WORD TO RECEIVE PDL ADDR)\n         ST    R1,PPLANS      PASS IT AS WELL\n         LA    R1,PPL         A(IKJPAR'S PARAMETER LIST)\n         CALLTSSR EP=IKJPARS  CALL TSO PARSE ROUTINE        *HMD 12/80*\n         LTR   R15,R15        PARSED OK?\n         BZ    GETJES         YES => CHECK FOR JES2 NAME    *HMD 01/83*\n         ABEND 4              LET OUR CALLER KNOW WE SCREWED UP\n         EJECT\nGETJES   DS    0H             CHECK THE SECOND PARM         *HMD 01/83*\n         L     R1,PPLRANS     A(PDL)                        *HMD 01/83*\n         USING IKJPARMD,R1    ADDRESSIBILITY                *HMD 01/83*\n         LA    R1,SUBSYS      ADDRESS OF THE ADDRESS        *HMD 01/83*\n         DROP  R1             TEMPORARY                     *HMD 01/83*\n         TM    6(R1),X'80'    PARM PRESENT?                 *HMD 01/83*\n         BZ    GETJOBS        NO - GET USERID               *HMD 01/83*\n         MVI   JES2,C' '      CLEAR THE FIELD               *HMD 01/83*\n         MVC   JES2+1(L'JES2-1),JES2                        *HMD 01/83*\n         LH    R15,4(R1)      LENGTH OF PARM                *HMD 01/83*\n         LA    R14,JES2       TARGET FIELD                  *HMD 01/83*\n         L     R1,0(,R1)      A(SUBSYS NAME)                *HMD 01/83*\n         BCTR  R15,0          MINUS ONE FOR EXECUTE         *HMD 01/83*\n         EX    R15,MOVEJES    MOVE THE NAME                 *HMD 01/83*\n         SPACE 2                                            *HMD 01/83*\nGETJOBS  L     R1,PPLRANS     A(PDL)\n         USING IKJPARMD,R1    ADDRESSABILITY\n         LA    R1,JOBNAME     A(1ST JOB NAME)\n         DROP  R1             TEMPORARY\n         TM    6(R1),X'80'    PARM PRESENT?                 *HMD 01/83*\n         BZ    JOBUSER        NO - GET USERID               *HMD 01/83*\n         LA    R14,1          AT LEAST 1 JOB NAME IS THERE\nJOBLOOK  CLI   8(R1),X'FF'    END OF OPERAND JOB LIST?\n         BE    GETSPACE       YES => GET SPACE FOR THE PARM LIST\n         LA    R14,1(R14)     ONE MORE JOB SPECIFIED\n         L     R1,8(R1)       A(NEXT JOB PDE)\n         B     JOBLOOK        CHECK THIS JOB\nGETSPACE MH    R14,TEN        10 BYTES FOR EACH JOBNAME\n         LA    R14,4(R14)     ACCOUNT FOR THE DESCRIPTOR WORD\n         GETMAIN R,LV=(R14)   GET THE SPACE\n         ST    R1,ATACHPL+8   PASS IT TO STATJES2\n         ST    R14,0(R1)      SAVE THE FIELD'S LENGTH IN THE 1ST WORD\n         LA    R14,4(R1)      A(SPOT FOR THE 1ST JOBNAME)\n         L     RWORK,PPLRANS  A(PDL)\n         USING IKJPARMD,RWORK ADDRESSABILITY\n         LA    RWORK,JOBNAME  A(1ST JOBNAME PDE)\n         DROP  RWORK          TEMPORARY\nJOBCHK   L     R15,0(RWORK)   A(JOBNAME)\n         LH    R1,4(RWORK)    H'JOBNAME LENGTH'\n         STH   R1,0(R14)      PASS THE JOB NAME LENGTH\n         BCTR  R1,R0          FOR THE MOVE\n         EX    R1,MOVEJOB     PUT THE JOB NAME IN THE PARM LIST\n         CLI   8(RWORK),X'FF' END OF JOB NAME OPERANDS?\n         BER   RLINK          YES => RETURN TO OUR CALLER\n         LA    R14,10(R14)    A(NEXT SPOT FOR A JOB NAME)\n         L     RWORK,8(RWORK) A(NEXT JOB NAME PDE)\n         B     JOBCHK         PUT THIS JOB NAME IN THE LIST\n         SPACE 5\nMOVEJOB  MVC   2(0,R14),0(R15) TO BE EXECUTED\nMOVEJES  MVC   0(0,R14),0(R1)  MOVE JES2 NAME TO AREA       *HMD 01/83*\nTEN      DC    H'10'          NUMBER OF BYTES/JOBNAME IN PARM\nSTPCLAD  DC    V(STPCL)       PARSING SPECIFICATIONS\nJESNAME  DC    CL8'JES2'      DEFAULT JES SUBSYSTEM NAME    *HMD 01/83*\n         EJECT\nCALLJES2 LA    R15,JES2       A(CL8'JES2')\n         L     R0,STATJSAD    V(STATJES2)\n         STM   R15,R0,ATACHPL SOME OF ATACHSRB'S PARMS\n         LA    R0,WORKLEN     A(H'WORK AREA LENGTH')\n         ST    R0,ATACHPL+12  COMPLETE THE ATACHSRB PARM LIST\n         STAX  DEFER=YES      DEFER ATTENTION INTERRUPTS\n         MVC   ENQLIST(ENQSETL),ENQSETUP SET UP THE ENQ PARM LIST\n         ENQ   MF=(E,ENQLIST) ONE USER AT A TIME THRU HERE\n         LA    R1,ATACHPL     A(ATACHSRB'S PARAMETER LIST)\n         SVC   208            INVOKE THE CROSS MEMORY INTERFACE\n         STM   R15,R0,ATACHPL SAVE ATACHSRB'S RETURN CODES\n         MVC   DEQLIST(DEQSETL),DEQSETUP SET UP THE DEQ PARM LIST\n         DEQ   MF=(E,DEQLIST) DROP THE SINGLE STREAM OF USERS\n         STAX  DEFER=NO       ALLOW ATTENTION INTERRUPTS\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nSTATJSAD DC    V(STATJES2)    GETS JOB STATUS FROM JES2\nWORKLEN  DC    H'2048'        LENGTH OF STATJES2 WORK AREA  *HMD 04/85*\nENQSETUP ENQ   (HACSTATS,ONEATIME,E,,SYSTEM),MF=L ENQ SKELETON\nENQSETL  EQU   *-ENQSETUP      LENGTH OF THE ENQ PARM LIST\nDEQSETUP DEQ   (HACSTATS,ONEATIME,,SYSTEM),MF=L DEQ SKELETON\nDEQSETL  EQU   *-DEQSETUP     LENGTH OF THE DEQ PARM LIST\nHACSTATS DC    C'HACSTATS'    ENQ MAJOR NAME\nONEATIME DC    C'ONEATATIME'  ENQ MINOR NAME\n         EJECT\nCHKRCODE L     RET,ATACHPL+16 A(RETURN AREA)\n         L     R15,ATACHPL    SVC 208'S RETURN CODE\n         B     CHKRCS(R15)    TRANSFER CNTL BASED ON THE RETURN CODE\nCHKRCS   B     CHKCOUNT       SEE IF ANY JQES OR JOES WERE RET\n         B     8(RLINK)       JES2 ADDRESS SPACE NOT FOUND\n         B     JES2RC         STATJES2 RETURNED A RC > 0\n         B     ABEND8         SVC 208 DIDN'T LIKE THE CODE PASSED\n         B     12(RLINK)      STATJES2 ABENDED\nABEND8   ABEND 8              WE'VE SCREWED UP SOMEHOW\nJES2RC   L     R0,ATACHPL+4   STATJES2'S RETURN CODE\n         CH    R0,FOUR        STATJES2 UNABLE TO FIND JES2'S HCT?\n         BE    8(RLINK)       YES => TELL OUR CALLER\n         OI    STATS,FILLEDRT NO => THE RETURN AREA IS FULL\nCHKCOUNT L     R1,4(RET)      H'# OF JQES',H'# OF JOES'\n         LTR   R1,R1          ANYTHING RETURNED?\n         BNZR  RLINK          YES => TELL OUR CALLER\n         B     4(RLINK)       NO => TELL OUR CALLER\n         SPACE 5\nFOUR     DC    H'4'           RC FROM CALLRSB => JES2 NOT UP\n         EJECT\nOUTNOJES ST    RLINK,SAVLINK  SAVE LINK REGISTER            *HMD 12/79*\n         LA    R1,JESNOTMS    A(C'JES2 NOT UP')             *HMD 12/79*\n         LA    R0,L'JESNOTMS  LENGTH OF THE MESSAGE\n         BAL   RLINK,PUTLINEI TELL OUR CALLER               *HMD 12/79*\n         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nJESNOTMS DC    C'MVS/SP JES2 IS NOT UP'                     *HMD 01/83*\n         EJECT\nOUTNOJOB ST    RLINK,SAVLINK  SAVE LINK REGISTER            *HMD 12/79*\n         LA    R1,NOJOBMSG    A(C'NO JOBS FOUND')           *HMD 12/79*\n         LA    R0,L'NOJOBMSG LENGTH OF THE MESSAGE\n         BAL   RLINK,PUTLINEI TELL OUR CALLER               *HMD 12/79*\n         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nNOJOBMSG DC    C'NO JOB(S) FOUND'\n         EJECT\nOUTJQES  DS    0H                                           *HMD 01/83*\n         ST    RLINK,JQESHOLD SAVE THE RETURN ADDRESS\n         LH    R#JQES,4(RET)  H'# OF RETURNED JQES'\n         LA    RJQE,8(RET)    A(1ST RETURNED JQE)\n         USING JQE,RJQE       ADDRESSABILITY\nCHECKJQE CLI   JQETYPE,$OUTPUT    JOB AWAITING OUTPUT?      *HMD 01/82*\n         BE    AWOUTPUT       YES - PROCESS WAIT QUEUE      *HMD 01/82*\n         CLI   JQETYPE,$INPUT JOB POSSIBLE ACTIVE ON INPUT? *HMD 01/82*\n         BE    CHECKDEV       YES, GO PROCESS DEVICE        *HMD 04/82*\n         CLI   JQETYPE,$XMIT  TRANSMIT QUEUE?               *HMD 01/83*\n         BNE   CHKRECV        NO, CHECK RECEIVER QUEUE      *HMD 01/83*\n         TM    JQEFLAGS,QUEBUSY   THIS JQE BUSY?            *HMD 02/83*\n         BNZ   CHECKDEV       YES, MUST BE ON XMITTER       *HMD 02/83*\n         BAL   RLINK,INITMSG  INITIALIZE MESSAGE            *HMD 01/83*\n         BAL   RLINK,SETWXMT  INDICATE AWAITING XMITTER     *HMD 01/83*\n         BAL   RLINK,OUTMSG   PUT OUT THE MESSAGE           *HMD 01/83*\n         B     NEXTJQE        GET THE NEXT JOB QUEUE ELEM.  *HMD 01/83*\nCHKRECV  DS    0H             CHECK FOR SYSOUT RECEIVER     *HMD 02/83*\n         CLI   JQETYPE,$RECEIVE    ON RECEIVE QUEUE         *HMD 02/83*\n         BNE   CHKREND                                      *HMD 02/83*\n         TM    JQEFLAGS,QUEBUSY   THIS JQE BUSY?            *HMD 02/83*\n         BNZ   CHECKDEV       YES, MUST BE ON RECEIVER      *HMD 02/83*\n         BAL   RLINK,INITMSG       INITIALIZE THE MESSAGE   *HMD 02/83*\n         MVC   MSGSTYPE(L'AWAITRCV),AWAITRCV                *HMD 02/83*\n*                                  AWAITING SYSOUT RECEIVER *HMD 02/83*\n         BAL   RLINK,OUTMSG        PUT OUT THE MESSAGE      *HMD 02/83*\n         B     NEXTJQE             GET THE NEXT QUEUE ELEM. *HMD 02/83*\nCHKREND  DS    0H                                           *HMD 02/83*\n         B     CHKDMPR             NO => SEE IF ON DUMPQ    *HMD 01/83*\nCHECKDEV BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE *HMD 04/82*\n         LA    RDEVID,JQEDEVID A(INPUT DEVICE DESCRIPTOR)\n         BAL   RLINK,SETDEVIC SET UP THE INPUT DEVICE\n         B     MSGNEXT        OUTPUT THE MSG & DO THE NEXT JQE\nCHKDMPR  CLI   JQETYPE,$DUMPQ JOB ON THE DUMPER QUEUE       *HMD 01/83*\n         BNE   CHKEXEC        NO, CHECK EXECUTION QUEUE     *HMD 01/83*\n         TM    JQEFLAGS,QUEBUSY   THIS JQE BUSY?            *HMD 02/83*\n         BNZ   CHECKDEV       YES, MUST BE ON DUMPER/LOADER *HMD 02/83*\n         BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE *HMD 01/83*\n         MVC   MSGSTYPE(L'AWAITDMP),AWAITDMP                *HMD 01/83*\n         BAL   RLINK,OUTMSG   PUT OUT MESSAGE               *HMD 01/83*\n         B     NEXTJQE        CONTINUE WITH NEXT JQE        *HMD 01/83*\nCHKEXEC  TM    JQETYPE,$XEQ   JOB ON AN EXECUTION Q?        *HMD 01/83*\n         BO    ITISEXEC       YES => OUTPUT THE INFO        *HMD 01/83*\n         BAL   RLINK,JQEHOLDS PROCESS ANY HELD DATA SETS\n         B     NEXTJQE        GET ANOTHER JQE\nITISEXEC BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE\n         CLI   JQETYPE,$XEQ   JOB ON THE CONVERSION Q?\n         BE    WAITEXEC       YES => IT'S AWAITING EXECUTION\n         TM    JQEFLAGS,QUEBUSY JOB EXECUTING?\n         BZ    WAITEXEC       NO => AWAITING EXECUTION\n         BAL   RLINK,SETEXEC  SET UP THE EXECUTING MESSAGE\n         B     MSGNEXT        OUTPUT THE MSG & DO THE NEXT JQE\nWAITEXEC BAL   RLINK,SETWXEQ  SET UP THE AWAITING EXEC MSG\nMSGNEXT  BAL   RLINK,OUTMSG   OUTPUT THE MESSAGE\nNEXTJQE  LA    RJQE,JQELNGTH(RJQE) A(NEXT JQE)\n         BCT   R#JQES,CHECKJQE CHECKED ALL RETURNED JQES?\n         L     RLINK,JQESHOLD YES => RETURN\n         BR    RLINK          TO OUR CALLER\nAWAITJOT DC    C'AWAITING OUTPUT PROCESSOR'                 *HMD 01/82*\nAWAITDMP DC    C'AWAITING SPOOL DUMPER'                     *HMD 01/83*\nAWAITRCV DC    C'AWAITING NETWORK RECEIVER'                 *HMD 02/83*\n         SPACE 2\nAWOUTPUT DS    0H                AWAITING OUTPUT            *HMD 01/83*\n         BAL   RLINK,INITMSG     INITIALIZE MESSAGE AREA    *HMD 01/83*\n         BAL   RLINK,GETSYSID    GET SYSTEM AFFINITY        *HMD 02/83*\n         MVC   MSGSTYPE(L'AWAITJOT),AWAITJOT                *HMD 01/83*\n         BAL   RLINK,OUTMSG   PUT OUT MESSAGE               *HMD 01/82*\n         B     NEXTJQE        CONTINUE WITH NEXT JQE        *HMD 01/82*\n         SPACE 2                                            *HMD 01/83*\nSETWXEQ  DS    0H                                           *HMD 02/83*\n         ST    RLINK,WXEQHOLD SAVE THE RETURN ADDRESS\n         BAL   RLINK,GETSYSID       GET THE SYSTEM AFFINITY *HMD 02/83*\n         MVC   MSGSTYPE(L'AWAITXEQ),AWAITXEQ AWAITING EXECUTION\n         MVC   MSGWXCLS,JQEJCLAS  SET THE JOB CLASS         *HMD 02/83*\n         LA    R15,MSGSTYPE+L'AWAITXEQ+1 A(SPOT FOR JOB'S POSITION)\n         LH    R1,JQEPOSTN    H'JOB'S POSITION'\n         BAL   RLINK,FITINUM  PUT THE POS IN THE MSG\n         MVC   0(L'OF,R15),OF PUT IN ' OF '\n         LA    R15,L'OF(R15)  A(SPOT FOR JOB Q TOTAL)\n         LH    R1,JQETOTAL    H'JOB Q'S TOTAL'\n         BAL   RLINK,FITINUM  PUT THE Q TOTAL IN THE MSG\n         L     RLINK,WXEQHOLD RESTORE THE RETURN ADDRESS\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 2\nAWAITXEQ DC    C'AWAITING EXECUTION CLASS ?,'\n         EJECT\nSETWXMT  ST    RLINK,WXMTHOLD    SAVE THE RETURN ADDRESS    *HMD 01/83*\n         MVC   MSGSTYPE(L'AWAITXMT),AWAITXMT                *HMD 01/83*\n*                                AWAITING TRANSMISSION      *HMD 01/83*\n         MVC   WXMTNODE(L'JQEXEQND),JQEXEQND                *HMD 01/83*\n*                                MOVE TRANSMISSION NODE     *HMD 01/83*\n         LA    R15,MSGSTYPE+L'AWAITXMT                      *HMD 01/83*\n*                                A(SPOT FOR NODE)           *HMD 01/83*\n         LH    R1,WXMTNODE       H'NODE NUMBER'             *HMD 01/83*\n         BAL   RLINK,FITINUM     FIT THE NUMBER             *HMD 01/83*\n         MVI   0(R15),C','       INSERT COMMA               *HMD 01/83*\n         LA    R15,2(,R15)       A(SPOT FOR POSITION)       *HMD 01/83*\n         LH    R1,JQEPOSTN    H'JOB'S POSITION'             *HMD 01/83*\n         BAL   RLINK,FITINUM  PUT THE POS IN THE MSG        *HMD 01/83*\n         MVC   0(L'OF,R15),OF PUT IN ' OF '                 *HMD 01/83*\n         LA    R15,L'OF(R15)  A(SPOT FOR JOB Q TOTAL)       *HMD 01/83*\n         LH    R1,JQETOTAL    H'JOB Q'S TOTAL'              *HMD 01/83*\n         BAL   RLINK,FITINUM  PUT THE Q TOTAL IN THE MSG    *HMD 01/83*\n         L     RLINK,WXMTHOLD RESTORE THE RETURN ADDRESS    *HMD 01/83*\n         BR    RLINK          RETURN TO OUR CALLER          *HMD 01/83*\n         SPACE 5                                            *HMD 01/83*\nAWAITXMT DC    C'AWAITING TRANSMITTER N'                    *HMD 01/83*\n         EJECT                                              *HMD 01/83*\nOUTJOES  DS    0H                                           *HMD 01/83*\n         LH    R#JOES,6(RET)  H'# OF RETURNED JOES'\n         LTR   R#JOES,R#JOES  ANY JOES RETURNED?\n         BZR   RLINK          NO => NOTHING TO DO\n         ST    RLINK,JOESHOLD SAVE THE RETURN ADDRESS\n         LH    R1,4(RET)      H'# OF RETURNED JQES'\n         MH    R1,JQELEN      LENGTH OF THE RETURNED JQES\n         LA    RJOE,8(RET,R1) A(1ST RETURNED JOE)\n         USING JOEDSECT,RJOE  ADDRESSABILITY\nCHECKJOE SLR   RJQE,RJQE      CLEAR FOR INSERT CHAR         *HMD 01/83*\n         ICM   RJQE,B'0111',JOEJQEB                         *HMD 01/83*\n*                             GET OFFSET TO ASSOC JQE       *HMD 01/83*\n         ALR   RJQE,RET       A(ASSOCIATED JQE)\n         BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MSG\n         TM    JOEFLAG,$JOEBUSY ACTIVE OUTPUT?\n         BZ    WAITOUT        NO => AWAITING OUTPUT\n**                                                          *HMD 02/83*\n** ELEMENT IS ON A DEVICE                                   *HMD 02/83*\n**                                                          *HMD 02/83*\nONDEVICE DS    0H             OUTPUT IS ACTIVE ON DEVICE    *HMD 02/83*\n         LA    RDEVID,JOEDEVID    A(OUTPUT DEVICE DESCRIPTOR)\n         BAL   RLINK,SETDEVIC SET THE OUTPUT DEVICE\n         B     MSGNXTJO       OUTPUT THE MSG & DO THE NEXT JOE\nWAITOUT  TM    JOEFLAG2,$JOEDUMP   Q. AWAITING DUMPER?      *HMD 01/83*\n         BZ    WAITXMTR            A. NO - PROCESS JOE      *HMD 01/83*\n         MVC   MSGSTYPE(L'AWAITDMP),AWAITDMP                *HMD 01/83*\n*                                  MOVE DUMPER MESSAGE      *HMD 01/83*\n         B     MSGNXTJO            OUTPUT AND DO NEXT JOE   *HMD 01/83*\n         SPACE 1                                            *HMD 04/85*\nWAITXMTR DS    0H                                           *HMD 04/85*\n         SLR   R1,R1               CLEAR REGISTER           *HMD 04/85*\n         ICM   R1,B'0111',JOENETCB ON XMITTER QUEUE?        *HMD 04/85*\n         BZ    WAITOUT1            NO, CONTINUE PROCESSING  *HMD 04/85*\n         MVC   MSGSTYPE(L'AWAITXMT),AWAITXMT                *HMD 04/85*\n*                                  SYSOUT TRANSMISSION      *HMD 04/85*\n         MVC   WXMTNODE(L'JOEPDBND),JOEPDBND                *HMD 04/85*\n*                                  MOVE DESTINATION NODE    *HMD 04/85*\n         LA    R15,MSGSTYPE+L'AWAITXMT                      *HMD 04/85*\n*                                A(SPOT FOR NODE)           *HMD 04/85*\n         LH    R1,WXMTNODE       H'NODE NUMBER'             *HMD 04/85*\n         BAL   RLINK,FITINUM     FIT THE NUMBER             *HMD 04/85*\n         MVI   0(R15),C','       INSERT COMMA               *HMD 04/85*\n         LA    R15,2(,R15)       A(SPOT FOR POSITION)       *HMD 04/85*\n         B     SETJOPOS          GET JOE'S POSITION         *HMD 04/85*\n         SPACE 1                                            *HMD 04/85*\nWAITOUT1 MVC   MSGSTYPE(L'AWAITOUT),AWAITOUT                *HMD 01/83*\n*                                  AWAITING OUTPUT          *HMD 01/83*\n         MVC   MSGWOUTC,JOECURCL OUTPUT CLASS\n         SR    R15,R15        GET JOE ROUTE CODE            *HMD 04/80*\n         CLC   JOERNODE(2),=H'0'                            *HMD 01/83*\n*                             TEST FOR NODE NUMBER          *HMD 01/83*\n         BE    TESTLOC        NO, TEST FOR LOCAL PRINTER    *HMD 01/83*\n         ICM   R15,B'0011',JOEREMOT    GET LOCAL REMOTE #   *HMD 01/83*\n         BZ    LOCALRTE       ZERO MEANS LOCAL              *HMD 01/83*\n         STH   R15,SAVEAREA   SAVE ROUTE CODE               *HMD 01/83*\n         B     MOVEMSG        NOW MOVE MESSAGE              *HMD 01/83*\nTESTLOC  DS    0H             TEST FOR PRINTER ID           *HMD 08/80*\n         ICM   R15,B'0011',JOEREMOT                         *HMD 01/83*\n*                             GET LOCAL PRINTER ID          *HMD 01/83*\n         BZ    LOCALRTE                                     *HMD 01/83*\n         B     SPECLOC        SPECIAL LOCAL ROUTING         *HMD 01/83*\nMOVEMSG  DS    0H             REMOTE JOE PROCESSING         *HMD 08/80*\n         MVC   MSGOUTLC(L'RMT),RMT OUTPUT GOING TO A REMOTE\n         LA    R15,MSGOUTLC+L'RMT A(WHERE RMT # GOES)\n         SR    R1,R1          FOR THE INSERT CHARACTER\n         LH    R1,SAVEAREA    REMOTE NUMBER                 *HMD 01/83*\n         BAL   RLINK,FITINUM  PUT THE REMOTE # IN THE MSG\n         MVI   0(R15),C','    PUT IN A COMMA\n         LA    R15,2(R15)     A(SPOT FOR THE OUTPUT'S POSITION)\n         B     SETJOPOS       SET THE OUTPUT'S POSITION\nSPECLOC  DS    0H             SPECIAL LOCAL ROUTING         *HMD 04/80*\n         STH   R15,SAVEAREA   SAVE ROUTE CODE               *HMD 04/80*\n         MVC   MSGOUTLC(L'PRT),PRT OUTPUT GOING TO SPECIAL  *HMD 04/80*\n         LA    R15,MSGOUTLC+L'PRT  A(WHERE PRT # GOES)      *HMD 04/80*\n         SR    R1,R1          FOR THE INSERT CHARACTER      *HMD 04/80*\n         LH    R1,SAVEAREA    GET THE LOCAL PRINTER NO.     *HMD 01/83*\n         BAL   RLINK,FITINUM  PUT THE LOCAL PRT # IN MSG    *HMD 04/80*\n         MVI   0(R15),C','    PUT COMMA IN MESSAGE          *HMD 04/80*\n         LA    R15,2(R15)     A(SPOT FOR OUTPUT'S POSITION) *HMD 04/80*\n         B     SETJOPOS       SET THE OUTPUT'S POSITION     *HMD 04/80*\nLOCALRTE MVC   MSGOUTLC(L'LOCAL),LOCAL PUT IN THE LOCAL\n         LA    R15,MSGOUTLC+L'LOCAL+1 A(SPOT FOR THE OUTPUT'S POSITON)\nSETJOPOS LH    R1,JOEPOSTN    H'OUTPUT'S POSITION'\n         BAL   RLINK,FITINUM  PUT IT IN THE MSG\n         MVC   0(L'OF,R15),OF PUT IN ' OF '\n         LA    R15,L'OF(R15)  A(SPOT FOR THE OUTPUT Q TOTAL)\n         LH    R1,JOETOTAL    H'OUTPUT Q TOTAL'\n         BAL   RLINK,FITINUM  PUT IT IN THE MSG\n         SPACE 1                                            *HMD 04/85*\nSETMAIL  CLC   USERID(L'JOEWTRID),JOEWRECN                  *HMD 04/85*\n         BNE   MSGNXTJO       DO WE HAVE SOME TSO/E MAIL?   *HMD 04/85*\n         MVC   MSGSYSID,=C'MAIL'    YES, INDICATE SO        *HMD 04/85*\n         SPACE 1                                            *HMD 04/85*\nMSGNXTJO BAL   RLINK,OUTMSG   OUTPUT THE MESSAGE\n         LA    RJOE,JOESIZE(RJOE) A(NEXT JOE)\n         BCT   R#JOES,CHECKJOE OUTPUT ALL RETURNED JOES?    *HMD 04/85*\n         L     RLINK,JOESHOLD YES => RETURN\n         BR    RLINK          TO OUR CALLER\n         SPACE 5\nJQELEN   DC    AL2(JQELNGTH)  LENGTH OF A JQE\nOF       DC    C' OF '\nAWAITOUT DC    C'AWAITING OUTPUT CLASS ?,'\nRMT      DC    C'RMT'\nPRT      DC    C'PRT'                                       *HMD 04/80*\nLOCAL    DC    C'LOCAL,'\n         EJECT\nOUTFILL  ST    RLINK,SAVLINK  SAVE RETURN REGISTER          *HMD 12/79*\n         NI    SWITCHES,FF-NOSTOR                           *HMD 01/83*\n*                             CLEAR STORAGE SWITCH          *HMD 01/83*\n         TM    STATS,FILLEDRT RETURN AREA FULL?             *HMD 12/79*\n         BZR   RLINK          NO => NO NEED FOR THIS MSG\n         OI    SWITCHES,NOSTOR INDICATE NO STORAGE LEFT     *HMD 01/83*\n         LA    R1,FILLDMSG    A(C'INSUFFICIENT SP TO COMPLETE ST REQ')\n         LA    R0,L'FILLDMSG  LENGTH OF THE MESSAGE\n         BAL   RLINK,PUTLINEI TELL OUR CALLER               *HMD 12/79*\n         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nFILLDMSG DC    C'INSUFFICIENT STORAGE TO COMPLETE YOUR REQUEST'\n         EJECT\nSETRC    DS    0H                                           *HMD 01/83*\n         SLR   R6,R6          CLEAR WORK REGISTER           *HMD 01/83*\n         TM    SWITCHES,NOSTOR      SHORT ON STORAGE?       *HMD 01/83*\n         BZR   RLINK          NO - CONTINUE                 *HMD 01/83*\n         LA    R6,4           SET RETURN CODE               *HMD 01/83*\n         BR    RLINK          RETURN TO CALLER              *HMD 01/83*\n         EJECT                                              *HMD 01/83*\nSTDONE   TM    ECTSWS,ECTNOPD OPERANDS ON THE COMMAND?\n         BO    FREEWORK       NO => JUST FREE OUR WORK AREA\n         IKJRLSA PPLRANS      FREE THE PDL\n         L     R1,ATACHPL+8   A(JOB NAME LIST)\n         L     R0,0(R1)       LENGTH OF THE JOB NAME LIST\n         FREEMAIN R,LV=(0),A=(1) FREE THE JOB NAME LIST\nFREEWORK L     R0,RETLEN      LENGTH OF THE RETURN INFO AREA*HMD 01/83*\n         FREEMAIN R,LV=(0),A=(RET) FREE THE RETURN INFO AREA\n         LR    R1,R13         A(OUR WORK AREA)\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LA    R0,LWRKAREA    LENGTH OF OUR WORK AREA\n         FREEMAIN R,LV=(0),A=(1) FREE OUR WORK AREA\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nRETLEN   DC    A(15*4096)     LENGTH OF THE RETURN AREA     *HMD 01/83*\n         EJECT\nINITMSG  MVI   MESSAGE,C' '   BLANK OUT THE\n         MVC   MESSAGE+1(LMESSAGE-1),MESSAGE MESSAGE BUFFER\n         MVI   JES2TYPE,C'J'  INITIALIZE JOB MESSAGE        *HMD 10/80*\n         MVC   MSGJBHDG(3),JOB  INSERT HEADING              *HMD 10/80*\n         MVC   MSGJNME,JQEJNAME PUT IN THE JOB NAME\n         LA    R1,MSGJNME+8  LOAD ADDRESS OF END OF JOBNAME *HMD 10/80*\n         LA    RWORK,9       COUNT REGISTER                 *HMD 10/80*\nINITMLP  CLI   0(R1),C' '    SPACE?                         *HMD 10/80*\n         BNE   INITMLO       OUT OF LOOP                    *HMD 10/80*\n         BCTR  R1,0          DECREMENT REGISTER             *HMD 10/80*\n         BCT   RWORK,INITMLP FIND END OF JOBNAME            *HMD 10/80*\nINITMLO  LR    RWORK,R1      END  OF JOBNAME                *HMD 10/80*\n         MVI   1(RWORK),C'(' RIGHT PAREN                    *HMD 10/80*\n         LH    R1,JQEJOBNO   JOB'S NUMBER\n         TM    JQEFLAG3,QUEJOB      Q. BATCH JOB?           *HMD 01/83*\n         BNZ   STCORTSU             A. NO, TRY STC OR TSU   *HMD 01/83*\n         MVC   2(3,RWORK),JOB       INDICATE IT'S A JOB     *HMD 01/83*\n         B     CONVERT#             PUT IN THE JOB NUMBER   *HMD 01/83*\nSTCORTSU TM    JQEFLAG3,QUETSU  Q. TSU JOB?                 *HMD 01/83*\n         BZ    ITSTC            A. NO, MUST BE STC          *HMD 01/83*\n         MVC   2(3,RWORK),TSU   INDICATE TSU                *HMD 01/83*\n         MVI   JES2TYPE,C'T'    INDICATE TSU                *HMD 01/83*\n         B     CONVERT#         PUT IN THE TSU NUMBER       *HMD 01/83*\nITSTC    MVC   2(3,RWORK),STC   INDICATE STC                *HMD 01/83*\n         MVI   JES2TYPE,C'S'    INDICATE STC                *HMD 01/83*\nCONVERT# CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL\n         UNPK  5(5,RWORK),DOUBLEWD+5(3) CONVERT TO ZONED DECIMAL\n*                                                           *HMD 10/80*\n         OI    9(RWORK),C'0'           CONVERT TO EBCDIC    *HMD 10/80*\n         MVI   10(RWORK),C')'  MOVE IN RIGHT PAREN          *HMD 10/80*\n         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1+QUEHOLD2+QUEPURGE+QUEOPCAN\n         BZR   RLINK          NO SPECIAL FLAGS\n         MVC   MSGSPCST(L'HOLD),HOLD ASSUME THE JOB'S ON HOLD\n         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1 JOB ON HOLD?\n         BNZR  RLINK          YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'PURGE),PURGE ASSUME THE JOB'S TO BE PURGED\n         TM    JQEFLAGS,QUEPURGE JOB TO BE PURGED?\n         BOR   RLINK          YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'CANCEL),CANCEL ASSUME JOB CANCELLED\n         TM    JQEFLAGS,QUEOPCAN JOB CANCELLED?\n         BOR   RLINK          YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'DUPLICAT),DUPLICAT MUST BE DUPLICATE JOB\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nJOB      DC    C'JOB'\nTSU      DC    C'TSU'\nSTC      DC    C'STC'\nHOLD     DC    C'HOLD'                                      *HMD 01/81*\nPURGE    DC    C'PURG'                                      *HMD 01/81*\nCANCEL   DC    C'CANC'                                      *HMD 01/81*\nDUPLICAT DC    C'DUPL'                                      *HMD 01/81*\n         EJECT\nGETSYSID DS    0H                SUBROUTINE TO GET SYSID    *HMD 02/83*\n         SLR   R15,R15           CLEAR FOR SYSAFF TEST      *HMD 02/83*\n         LA    R1,AWAITTBL       GET TABLE ADDR             *HMD 02/83*\n         NI    JQEFLAG2,QUESYSAF CLEAR UNWANTED BITS        *HMD 02/83*\n         IC    R15,JQEFLAG2      GET SYSTEM AFFINITY FLAGS  *HMD 02/83*\n         CH    R15,SAF+2         ANY CPU OK?                *HMD 02/83*\n         BNE   GETSLOOP          YES, TELL USER             *HMD 02/83*\nGETSANY  MVC   MSGSYSID,JSYSANY  MOVE IN 'ANY' SYSTEM       *HMD 02/83*\n         B     GETSEND           FORGET TABLE LOOKUP        *HMD 02/83*\nGETSLOOP CLI   0(R1),X'FF'       END OF TABLE?              *HMD 02/83*\n         BE    GETSANY           BAD ENTRY, SET ANY         *HMD 02/83*\n         IC    R15,0(R1)         GET SYSTEM AFFINITY FLAGS  *HMD 02/83*\n         EX    R15,CLIJQE        LOOK AT SYSAFF FLAGS       *HMD 02/83*\n         BE    GETSGOT           WE'VE GOT A SPECIAL SYSTEM *HMD 02/83*\n         LA    R1,2(R1)          BUMP TO NEXT ENTRY         *HMD 02/83*\n         B     GETSLOOP          LOOP TILL FOUND            *HMD 02/83*\nGETSGOT  IC    R15,1(R1)         GET TRUE SYSTEM ID INDEX   *HMD 02/83*\n         SLL   R15,2             MULTIPLY BY 4              *HMD 02/83*\n         LA    R15,JSYSID(R15)   GET SYSTEM AFFINITY        *HMD 02/83*\n         MVC   MSGSYSID,0(R15)   MOVE INTO PRINT AREA       *HMD 02/83*\nGETSEND  BR    RLINK             RETURN TO CALLER           *HMD 02/83*\n         SPACE 2                                            *HMD 02/83*\nCLIJQE   CLI   JQEFLAG2,X'00'    COMPARE SYSTEM AFFINITY    *HMD 12/80*\n         SPACE 2                                            *HMD 02/83*\nAWAITTBL DC    X'01',X'01'  SYSTEM 1                        *HMD 12/80*\n         DC    X'02',X'02'  SYSTEM 2                        *HMD 12/80*\n         DC    X'04',X'03'  SYSTEM 3                        *HMD 12/80*\n         DC    X'08',X'04'  SYSTEM 4                        *HMD 12/80*\n         DC    X'10',X'05'  SYSTEM 5                        *HMD 12/80*\n         DC    X'20',X'06'  SYSTEM 6                        *HMD 12/80*\n         DC    X'40',X'07'  SYSTEM 7                        *HMD 12/80*\nAWAITBLE DC    X'FF',X'FF'  END OF TABLE                    *HMD 12/80*\n         SPACE 2\n         DS    0F             ALIGN TO FULLWORD BOUNDARY    *HMD 02/83*\nHIGHBIT  EQU   X'80'          HIGH BIT IS SET               *HMD 02/83*\nMIDBIT   EQU   X'40'          NEXT TO THE HIGH BIT IS SET   *HMD 02/82*\nLOBITS   EQU   X'0F'          ALL LOW ORDER BITS SET        *HMD 01/83*\nSAF      DC    F'127'         SYSAFF FLAG VALUE             *HMD 10/80*\nJSYSANY  DC    CL4'ANY'       SYSTEM ID OF 'ANY'            *HMD 10/80*\n         EJECT                                              *HMD 02/83*\nSETDEVIC DS    0H                                           *HMD 02/83*\n         MVC   MSGSTYPE(L'ON),ON PUT IN THE 'ON'            *HMD 02/82*\n         TM    0(RDEVID),HIGHBIT+MIDBIT    REMOTE DEVICE?   *HMD 02/82*\n         BNZ   CHKXFRDV       CHECK FOR SPOOL XFER DEVICE   *HMD 01/83*\n         CLI   0(RDEVID),LOBITS TEST FOR PSO JOE            *HMD 01/83*\n         BE    DEVPSO           INDICATE PROCESS SYSOUT     *HMD 01/83*\n         SR    R1,R1          FOR THE INSERT CHARACTER\n         IC    R1,0(RDEVID)     DEVICE TYPE\n         SRL   R1,4           RIGHT JUSTIFIED\n         MH    R1,DEVTYPEL    TYPE * LENGTH OF A DEVICE ENTRY\n         LA    R1,DEVTABLE(R1) A(DEVICE TYPE)\n         MVC   MSGDEV,1(R1)   PUT IN THE DEVICE TYPE\n         CLI   0(RDEVID),0      INTERNAL READER?\n         BER   RLINK          YES => GIVE THE USER THE INFO\n         SR    R15,R15        FOR THE INSERT CHARACTER\n         ICM   R15,B'0011',1(RDEVID)                        *HMD 02/83*\n*                               DEVICE NUMBER               *HMD 02/83*\n         CVD   R15,DOUBLEWD   IN PACKED DECIMAL\n         IC    R15,0(R1)      OFFSET TO WHERE THE DEV # GOES\n         LA    R15,MSGDEV(R15) A(WHERE THE DEV # GOES)\n         MVC   1(L'DIGITS3,R15),DIGITS3 SET UP THE EDIT OF 3 DIGITS\n         EDMK  0(L'DIGITS3+1,R15),DIGITS     DEV # IN EBCDIC\n         MVC   0(L'DIGITS3+1,R15),0(R1) ADJUST FOR BLANKS\n         BR    RLINK          GIVE THE INFO TO THE USER\nDEVPSO   DS    0H             PROCESS SYSOUT DEVICE         *HMD 01/83*\n         MVC   MSGDEV,=C'PRSYSOUT'                          *HMD 01/83*\n*                             FILL IN DEVICE NAME           *HMD 01/83*\n         BR    RLINK          RETURN TO CALLER              *HMD 01/83*\n         SPACE 2                                            *HMD 01/83*\nCHKXFRDV DS    0H             CHECK FOR SPOOL DMP/LOD       *HMD 01/83*\n         TM    0(RDEVID),MIDBIT+LOBITS                      *HMD 01/83*\n         BNO   RMTDEV         NO - MUST BE REMOTE DEVICE    *HMD 01/83*\n         SLR   R15,R15        CLEAR FOR INSERT              *HMD 01/83*\n         IC    R15,0(RDEVID)  GET DEVICE TYPE               *HMD 01/83*\n         SRL   R15,4          ISOLATE DEVICE TYPE           *HMD 01/83*\n         ALR   R15,R15        ADJUST FOR DEVICE LOCATE      *HMD 01/83*\n         LA    R15,RMTDEVS-MIDBIT/8(R15)                    *HMD 01/83*\n*                             LOAD TABLE ENTRY ADDRESS      *HMD 01/83*\n         MVC   MSGDEV+6(2),0(R15)   MOVE DEVICE NAME        *HMD 01/83*\n         MVC   MSGDEV(6),=C'DMP1 .' ASSUME DUMPER           *HMD 01/83*\n         MVC   MSGDEV+3(1),2(RDEVID)                        *HMD 01/83*\n         CLI   MSGDEV+7,C'T'  Q. TRANSMITTER?               *HMD 01/83*\n         BER   RLINK          A. YES, ALL DONE              *HMD 01/83*\n         MVC   MSGDEV(3),=C'LOD'                            *HMD 01/83*\n*                             INDICATE LOADER FUNCTION      *HMD 01/83*\n         BR    RLINK                                        *HMD 01/83*\nRMTDEV   DS    0H                                           *HMD 01/83*\n         SR    R0,R0          FOR THE INSERT CHARACTER\n         ICM   R0,B'0011',1(RDEVID)                         *HMD 02/83*\n*                               REMOTE NUMBER               *HMD 02/83*\n         CVD   R0,DOUBLEWD    IN PACKED DECIMAL\n         MVI   MSGDEV,C'L'    ASSUME NJE LINE XMIT/RECV     *HMD 02/82*\n         TM    0(RDEVID),MIDBIT      IS THIS AN NJE DEVICE? *HMD 02/82*\n         BO    NJEDEV         YES, WE WERE CORRECT          *HMD 02/82*\n         MVI   MSGDEV,C'R'    INDICATE A REMOTE DEVICE\nNJEDEV   DS    0H             LABEL ONLY USED IF NJE        *HMD 02/82*\n         MVC   MSGDEV+2(L'THREEPT),THREEPT SET UP THE EDIT MASK\n         EDMK  MSGDEV+1(L'THREEPT),DIGITS     CONVERT TO EBCDIC\n         MVC   MSGDEV+1(L'THREEPT),0(R1) ADJUST FOR BLANKS\n         LA    R1,MSGDEV+1    A(SPOT JUST BEFORE POSSIBLE SEP)\nFINDPT   LA    R1,1(R1)       A(NEXT BYTE)\n         CLI   0(R1),C'.'     FOUND THE SEPARATOR?\n         BNE   FINDPT         NO => KEEP LOOKING\n         SR    R15,R15        FOR THE INSERT CHARACTER\n         IC    R15,0(RDEVID)    DEVICE TYPE INDICATOR\n         SRL   R15,3          RIGHT JUSTIFIED               *HMD 02/82*\n         LA    R15,RMTDEVS-MIDBIT/8(R15) A(DEVICE TYPE)     *HMD 02/82*\n         MVC   1(2,R1),0(R15) PUT IN THE DEVICE TYPE\n         MVC   3(1,R1),0(RDEVID) PUT IN THE DEVICE NUMBER\n         MVC   4(4,R1),BLANKS CLEAR TRAILING DOTS (IF ANY)  *HMD 02/83*\n         OI    3(R1),C'0'     MAKE THE DEVICE NUMBER PRINTABLE\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nON       DC    C'ON'\nDIGITS3  DC    X'2020202020'  REALLY SHOULD BE DIGITS5      *HMD 02/83*\nTHREEPT  DC    X'20202020204B'       SHOULD BE FIVEPT       *HMD 02/83*\n         DS    0H\nDEVTABLE DC    AL1(0),CL8'INTRDR',AL1(6),CL8'READER'\n         DC    AL1(7),CL8'PRINTER',AL1(5),CL8'PUNCH'\nDEVTYPEL DC    AL2((*-DEVTABLE)/4)\nRMTDEVS  DC    C'JT',C'JR',C'ST',C'SR'      NJE STUFF       *HMD 02/82*\n         DC    C'**',C'RD',C'PR',C'PU'                      *HMD 02/82*\n         EJECT\nJQEHOLDS CLI   JQETYPE,$HARDCPY JOB ON THE OUTPUT QUEUE?\n         BNER  RLINK          NO => RETURN TO CALLER\n         LH    R1,JQEHLDCT    BL12'HELD DS COUNT',BL4'HELD DS LOCK'\n         SRL   R1,4           HELD DS COUNT\n         LTR   R1,R1          ANY DS HELD BY THIS JOB?\n         BZR   RLINK          NO => RETURN TO OUR CALLER\n         ST    RLINK,HOLDSLNK SAVE OUR RETURN ADDRESS\n         BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE\n         MVC   MSGSTYPE(L'WATOUTOF),WATOUTOF C'AWAITING OUTPUT OF'\n         LA    R15,MSGSTYPE+L'WATOUTOF+1 A(SPOT FOR THE HELD DS COUNT)\n         LH    R1,JQEHLDCT    BL12'HELD DS COUNT',BL4'HELD DS LOCK'\n         SRL   R1,4           HELD DS COUNT\n         BAL   RLINK,FITINUM  PUT THE HELD DS COUNT IN THE MSG\n         MVC   1(L'HLDSMSG,R15),HLDSMSG C'HELD SYSOUT(S)'\n         BAL   RLINK,OUTMSG   OUTPUT THE MESSAGE\n         L     RLINK,HOLDSLNK RESTORE OUR RETURN ADDRESS\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nWATOUTOF DC    C'AWAITING OUTPUT OF'\nHLDSMSG  DC    C'HELD SYSOUT(S)'\n         EJECT\nSETEXEC  DS    0H             EXECUTING JOB                 *HMD 08/80*\n         IC    R15,JQEFLAGS   GET SYSTEM ID                 *HMD 08/80*\n         N     R15,=A(QUEBUSY)                              *HMD 01/83*\n*                             ZERO OUT UNWANTED BITS        *HMD 01/83*\n         SLL   R15,2          MULTIPLY BY 4                 *HMD 08/80*\n         LA    R15,JSYSID(R15)   GET SYSTEM ID              *HMD 08/80*\n         MVC   MSGSYSID,0(R15)   MOVE IN SYSTEM ID          *HMD 08/80*\n         CLI   JES2TYPE,C'J'  JOB?\n         BE    EXECJOB        YES => SET THE MSG\n         CLI   JES2TYPE,C'T'  TSUSER?\n         BE    LOGDUSER       YES => SET THE MSG\n         MVC   MSGSTYPE(L'ACTIVE),ACTIVE MUST BE A STARTED TASK\n         BR    RLINK          RETURN TO OUR CALLER\nLOGDUSER MVC   MSGSTYPE(L'LOGGEDON),LOGGEDON TSUSER\n         BR    RLINK          RETURN TO OUR CALLER\nEXECJOB  MVC   MSGSTYPE(L'EXECUTNG),EXECUTNG EXECUTING JOB\n         MVC   MSGQTYPE,JQEJCLAS     SET THE JOB CLASS      *HMD 02/83*\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nACTIVE   DC    C'ACTIVE'      STARTED TASK\nLOGGEDON DC    C'LOGGED ON'   TSO USER\nEXECUTNG DC    C'EXECUTING CLASS'  JOB\nJSYSID   DC    CL4'    '                                    *HMD 08/80*\n         DC    CL4'1MVS'     SYSTEM #1  NOTE:               *HMD 04/85*\n         DC    CL4'****'     SYSTEM #2    CHANGE            *HMD 09/82*\n         DC    CL4'****'     SYSTEM #3        FOR           *HMD 09/82*\n         DC    CL4'****'     SYSTEM #4            YOUR      *HMD 09/82*\n         DC    CL4'****'     SYSTEM #5    INSTALLATION      *HMD 08/80*\n         DC    CL4'****'     SYSTEM #6                      *HMD 08/80*\n         DC    CL4'****'     SYSTEM #7                      *HMD 08/80*\n         EJECT\nOUTMSG   ST    RLINK,SAVLINK  SAVE LINK REGISTER            *HMD 12/79*\n         LA    R1,MESSAGE     A(MESSAGE)                    *HMD 12/79*\n         LA    R0,LMESSAGE    LENGTH OF THE MESSAGE\n         BAL   RLINK,PUTLINED GIVE IT TO OUR CALLER (DATA)  *HMD 12/79*\n         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*\n         BR    RLINK          RETURN TO OUR CALLER\n         EJECT\nFITINUM  CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL\n         MVC   NUMBER(L'NORMAL),NORMAL INITIALIZE THE EDIT FORMAT\n         LA    R1,NUMBER+SIGNORM IN CASE OF ZEROES\n         EDMK  NUMBER(L'NORMAL),DOUBLEWD+2 CONVERT TO EBCDIC\n         LA    R14,NUMBER+L'NORMAL-1 A(END OF CONVERTED NUMBER)\n         SLR   R14,R1         LENGTH OF THE CONVERTED NUMBER - 1\n         EX    R14,MVNUMBER   PUT THE NUMBER IN THE MSG\n         LA    R15,1(R14,R15) A(NEXT SPOT IN MSG)\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nMVNUMBER MVC   0(0,R15),0(R1) TO BE EXECUTED\n         SPACE 5\nNORMAL   DC    X'402020202020202020202120' EDIT MASK\nSIGNORM  EQU   11             OFFSET TO LAST DIGIT\n         EJECT\n*************************************************************HMD 12/79*\n**  TSO PUTLINE SUBROUTINES, SO STATUS CAN BE RUN IN BATCH  *HMD 12/79*\n*************************************************************HMD 12/79*\nPUTLINEI DS    0H             PUTLINE SUBROUTINE (INFO)     *HMD 12/79*\n         MVC   MLISTT,BLANKS  BLANK MESSAGE AREA            *HMD 12/79*\n         LR    RWORK,R0       GET MESSAGE LENGTH            *HMD 12/79*\n         BCTR  RWORK,0        DECREMENT FOR EX              *HMD 12/79*\n         EX    RWORK,MVCMSGI  MOVE INFO MESSAGE TO AREA     *HMD 12/79*\n         PUTLINE PARM=PTPB,                                 *HMD 05/80*X\n               OUTPUT=(OLDIE,TERM,SINGLE,INFOR),            *HMD 05/80*X\n               MF=(E,IOPL)                                  *HMD 01/81*\n         BR    RLINK          RETURN TO CALLER              *HMD 12/79*\n         SPACE 1                                            *HMD 12/79*\nPUTLINED DS    0H             PUTLINE SUBROUTINE (DATA)     *HMD 12/79*\n         MVC   MLISTC,BLANKS  BLANK OUTPUT AREA             *HMD 12/79*\n         LR    RWORK,R0       GET MESSAGE LENGTH            *HMD 12/79*\n         BCTR  RWORK,0        DECREMENT FOR EX              *HMD 12/79*\n         EX    RWORK,MVCMSGD  MOVE DATA MESSAGE TO AREA     *HMD 12/79*\n         PUTLINE PARM=PTPB,                                 *HMD 05/80*X\n               OUTPUT=(MLISTB,TERM,SINGLE,DATA),            *HMD 05/80*X\n               MF=(E,IOPL)                                  *HMD 01/81*\n         BR    RLINK          RETURN TO CALLER              *HMD 12/79*\n         SPACE 1                                            *HMD 12/79*\nMVCMSGI  MVC   MLISTT(0),0(R1) MOVE MESSAGE TO INFO AREA    *HMD 12/79*\nMVCMSGD  MVC   MLISTC(0),0(R1) MOVE MESSAGE TO DATA AREA    *HMD 12/79*\nBLANKS   DC    CL80' '         BLANKS FOR CLEARING          *HMD 12/79*\n         EJECT                                              *HMD 12/79*\nSTPCL    IKJPARM\nJOBNAME  IKJIDENT 'JOB NAME',LIST,MAXLNTH=8,FIRST=ALPHA,               X\n               OTHER=ALPHANUM,PROMPT='JOB NAME'\n         SPACE  2\nSUBSYS   IKJIDENT 'SUBSYSTEM NAME',MAXLNTH=4,FIRST=ALPHA,   *HMD 01/83*X\n               OTHER=ALPHANUM,CHAR,DEFAULT='JES2'           *HMD 01/83*\n         IKJENDP\n         $JQE\nJQEPOSTN EQU   JQETRAK,2      JQE POSITION\nJQETOTAL EQU   JQETRAK+2,2    QUEUE TOTAL\n         $JOE\nJOEPOSTN EQU   JOEIOTTR,2     JOE POSITION                  *HMD 01/83*\nJOETOTAL EQU   JOEIOTTR+2,2   QUEUE TOTAL                   *HMD 01/83*\n   TITLE 'DISPLAY STATUS OF JES2 JOBS, LOGONS, AND STARTED TASKS'\n         IKJCPPL\n         EJECT                                              *HMD 12/79*\n         IKJECT\n         EJECT                                              *HMD 12/79*\n         IKJPSCB\n         EJECT                                              *HMD 12/79*\n         CVT   DSECT=YES,LIST=YES\n         EJECT\nKZERO    EQU   0             CONSTANT OF ZERO               *HMD 02/83*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2                                            *HMD 12/79*\nRBASE    EQU   R2             A(STATUS)\nRCPPL    EQU   R3             A(CPPL)\nRECT     EQU   R4             A(ECT)\nRWORK    EQU   R5             TEMPORARY WORK REGISTER\nRJQE     EQU   R6             A(JOB QUEUE ELEMENT)\nRLINK    EQU   R7             INTERNAL LINK REGISTER\nRET      EQU   R8             A(RETURN AREA)\nR#JQES   EQU   R9             # OF RETURNED JQES\nR#JOES   EQU   R10            # OF RETURNED JOES\nRJOE     EQU   R11            A(JOB OUTPUT ELEMENT)\nRDEVID   EQU   R12            A(DEVICE DESCRIPTOR)\n         EJECT\nWORKAREA DSECT                OUR WORK AREA\nSAVEAREA DS    18F            OUR SAVE AREA\nDOUBLEWD EQU   SAVEAREA+16    PACKED DECIMAL WORK AREA\nNUMBER   EQU   DOUBLEWD+8     FINAL PRODUCT OF CONVERT\nDIGITS   EQU   DOUBLEWD+5     FOR EDMK START DIGIT          *HMD 02/83*\nONEJOBLN DS    F              LENGTH OF THE PARM FIELD FOR 1 JOB NAME\nONEJBNML DS    H              LENGTH OF THE 1 JOB NAME\nONEJOBNM DS    CL8            THE 1 JOB NAME\nIOPL     DS    0A                                           *HMD 05/78*\n***********************************************************************\n*    THE I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LIST OF       *\n*    FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE      *\n*    ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.     *\n***********************************************************************\n         SPACE\nIOPLUPT  DS    A        PTR TO UPT\nIOPLECT  DS    A        PTR TO ECT\nIOPLECB  DS    A        PTR TO USER'S ECB\nIOPLIOPB DS    A        PTR TO THE I/O SERVICE RTN PARM BLOCK\nOLDIE    DS    2F             O.L.D FOR PUTLINE             *HMD 12/79*\nPTPB     PUTLINE MF=L         PUTLINE PARM BLOCK            *HMD 12/79*\nMLISTA   DS    A              INFO MSG AREA                 *HMD 12/79*\nMLISTH   DS    CL8            SYNTEX HEADER INFO            *HMD 05/85*\nMLISTT   DS    CL71           71 CHARS OF DATA TO PUT       *HMD 12/79*\nMLISTB   DS    A              MESSAGE HEADER                *HMD 12/79*\nMLISTC   DS    CL79           MESSAGE TEXT                  *HMD 12/79*\n         DS    0F             ALIGNMENT                     *HMD 12/79*\n         EJECT\nPPL      DS    0F\n***********************************************************************\n*    THE PARSE PARAMETER LIST (PPL) IS A LIST OF ADDRESSES PASSED     *\n*    FROM THE INVOKER TO PARSE VIA REGISTER 1                         *\n***********************************************************************\n         SPACE\nPPLUPT   DS    A        PTR TO UPT\nPPLECT   DS    A        PTR TO ECT\nPPLECB   DS    A        PTR TO CP'S ECB\nPPLPCL   DS    A        PTR TO PCL\nPPLANS   DS    A        PTR TO ANS PLACE\nPPLCBUF  DS    A        PTR TO CMD BUFFER\nPPLUWA   DS    A        PTR TO USER WORK AREA (FOR VALIDITY CK RTNS)\nPPLRANS  DS    A        ANSWER PLACE\n         SPACE\nANECB    DS    F              COMMUNICATION ECB FOR IKJPARS\nANECB1   DS    F              ECB FOR PUTLINE ROUTINE       *HMD 12/79*\nATACHPL  DS    5A             ATACHSRB'S PARAMETER LIST\nINFORET  DS    A              A(WORD TO RECEIVE A(RET AREA))\nENQLIST  ENQ   (0,0,E,0,SYSTEMS),MF=L ENQ PARAMETER LIST\nDEQLIST  EQU   ENQLIST        DEQ PARAMETER LIST\n         DS    0D             ALIGNMENT                     *HMD 01/83*\nJES2     DS    CL8            WHERE OUR JOB QUEUES ARE\nUSERID   DS    CL8            CURRENT TSO USERID            *HMD 04/85*\nSAVLINK  DS    A              SAVE AREA FOR RETURN LINKAGE  *HMD 12/79*\nJQESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJQES\nWXEQHOLD DS    A              RETURN ADDRESS HOLD FOR SETWXEQ\nWXMTHOLD DS    A              RETURN ADDRESS HOLD FOR SETWXMT\nWXMTNODE DS    H              NODE NUMBER FOR XMITTER       *HMD 01/83*\nJOESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJOES\nHOLDSLNK DS    A              RETURN ADDRESS HOLD FOR JQEHOLDS\n         SPACE 1                                            *HMD 01/83*\nSWITCHES DS    X              VARIOUS STATUS SWITCHES       *HMD 01/83*\nFF       EQU   X'FF' 1111 1111 TO TURN OF SOME OTHER        *HMD 01/83*\n*                              SWITCHES                     *HMD 01/83*\nNOSTOR   EQU   X'80' 1... .... NOT ENOUGH STORAGE TO        *HMD 01/83*\n*                              COMPLETE REQUEST             *HMD 01/83*\nNEWJES   EQU   X'40' .1.. .... ANOTHER JES2 SUBSYSTEM WAS   *HMD 01/83*\n*                              SPECIFIED VIA THE SECOND     *HMD 01/83*\n*                              PARAMETER TO STATUS          *HMD 01/83*\n         SPACE 1                                            *HMD 01/83*\nALIGN    DS    0F             ALIGNMENT OF MESSAGE AREA     *HMD 01/83*\nMESSAGE  EQU   *              OUTPUT MESSAGE BUFFER\nMSGJBHDG DS    CL4            CL4'JOB '                     *HMD 10/80*\nMSGJNME  DS    CL8            JOB NAME\nMSGJPARR DS    C              CL1'('                        *HMD 10/80*\n         DS    CL3            JOB OR TSU OR STC             *HMD 10/80*\nMSGJOB#  DS    CL5            JOB NUMBER\nMSGJPARL DS    C              CL1')'                        *HMD 10/80*\n         DS    C\nMSGSTYPE DS    CL42           JOB STATUS\nMSGWXCLS EQU   MSGSTYPE+L'AWAITXEQ-2,1\nMSGWOUTC EQU   MSGSTYPE+L'AWAITOUT-2,1\nMSGOUTLC EQU   MSGSTYPE+L'AWAITOUT+1\nMSGQTYPE EQU   MSGSTYPE+L'EXECUTNG+1,1\nMSGDEV   EQU   MSGSTYPE+L'ON+1,8\n         DS    C\nMSGSPCST DS    CL4            SPECIAL STATUS\n         DS    C                                            *HMD 08/80*\nMSGSYSID DS    CL4            SYSTEM ID AFFINITY            *HMD 08/80*\nLMESSAGE EQU   *-MESSAGE      LENGTH OF THE MESSAGE BUFFER\nJES2TYPE DS    X              (JOB OR STC OR TSU)           *HMD 10/80*\nSTATS    DS    X              STATUS BITS\nFILLEDRT EQU   X'80'          RETURN AREA FULL\nLWRKAREA EQU   *-WORKAREA     WORK AREA LENGTH\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RECEVSRB": {"ttr": 1285, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RECV     TITLE 'CALL SVC 208 TARGET CODE UNDER SRB'         *HMD 10/80*\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                              RECEVSRB                               *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: CALL SVC 208 TARGET CODE UNDER AN SRB ENVIRONMENT.        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: RECEVSRB RECEIVES CONTROL DUE TO IGC0020H (SVC 208)       *\n*           SCHEDULING A SERVICE REQUEST BLOCK (SRB) WITH RECEVSRB AS *\n*           THE ENTRY POINT. IGC0020H PASSES RECEVSRB A COMMUNICATION *\n*           AREA IN CSA (R1 -> AT IT UPON ENTRY), AND IN THIS COM-    *\n*           MUNICATION AREA IS THE TRUE TARGET CODE'S ENTRY POINT AND *\n*           THE TARGET CODE'S PARAMETERS.                             *\n*                                                                     *\n*           BEFORE CALLING THE TARGET CODE, RECEVSRB ESTABLISHES A    *\n*           FUNCTIONAL RECOVERY ROUTINE (FRR) VIA THE SETFRR MACRO.   *\n*                                                                     *\n*           IF THE TARGET CODE ABENDS, RECEVSRB GETS CONTROL AND      *\n*           REQUESTS A RETRY IN ORDER THAT NORMAL RETURN CAN BE MADE. *\n*                                                                     *\n*           IN EITHER CASE, CONTROL IS RETURNED TO IGC0020H BY        *\n*           TRANSFERING CONTROL VIA A BRANCH ENTRY INTO POST, AFTER   *\n*           DELETING THE RECOVERY ENVIRONMENT VIA THE SETFRR MACRO.   *\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> WORK AREA (SEE HACSAW EXPANSION IN IGC0020H)           *\n*                                                                     *\n*                                                                     *\n* RETURN CODES: R10 = 256 => TARGET CODE ABEND                        *\n*                     XXX => TARGET CODE RETURN CODE                  *\n*                                                                     *\n*                                                                     *\n* DATA AREAS REFERENCED: CVT                                          *\n*                        SDWA                                         *\n*                        PSA                                          *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SETFRR                                                 *\n*              SETRP                                                  *\n*              REGS (USER)                                            *\n*              CVT                                                    *\n*              HACSAW (USER)                                          *\n*              IHASDWA                                                *\n*              IHAPSA                                                 *\n*              IHAFRRS                                                *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES: REENTRANT, SUPERVISOR, KEY 0, ENABLED, RESIDENT         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nRECEVSRB CSECT                CALL SRB TARGET CODE\n         USING RECEVSRB,R15   TEMPORARY CSECT ADDRESSABILITY\n         B     STARTUP        BRANCH AROUND THE HEADER\n         DROP  R15            PURELY TEMPORARY\n         DC    AL1(L'HEADER)  LENGTH OF THE HEADER\nHEADER   DC    C'RECEVSRB_&SYSDATE_&SYSTIME' HEADER\n         USING CSAWORK,R1     TEMPORARY ADDRESSABILITY\nSTARTUP  STM   R14,R3,CSAREGSV SAVE THE CALLER'S REGS\n         DROP  R1             TEMPORARY\n         LR    RBASE,R15      A(RECEVSRB)\n         USING RECEVSRB,RBASE ADDRESSABILITY\n         LR    RCSA,R1        A(CSA WORK AREA FROM ATACHSRB)\n         USING CSAWORK,RCSA   ADDRESSABILITY\n         SETFRR A,FRRAD=RECEVFAD,WRKREGS=(R1,R15),PARMAD=CSAFRRPL\n         L     R1,CSAFRRPL    A(COMMUNICATION PARM LIST)\n         ST    RCSA,0(R1)     PASS A(CSA WORK AREA) TO THE RECOVERY RTN\n         LA    R1,CSARECPL    A(TARGET CODE'S PARAMETER LIST)\n         LA    R13,CSASAVE    A(A SAVE AREA FOR THE CODE)\n         L     R15,CSAEP      A(TARGET CODE)\n         BALR  R14,R15        CALL THE SRB TARGET CODE\n         LR    R10,R15        SAVE THE TARGET CODE'S RETURN CODE\n         B     RETURN         RETURN TO OUR CALLER\n         EJECT\n         USING SDWA,R1        SDWA ADDRESSABILITY\nRECEVFRR LR    RBASE,R15      A(RECEVFRR)\n         USING RECEVFRR,RBASE ADDRESSABILITY\n         L     R15,SDWAPARM   A(FRR PARM LIST)\n         L     RCSA,0(R15)    A(CSA WORK AREA)\n         ST    RCSA,SDWASR03  SET THE RETRY ROUTINE'S R3\n         SETRP RC=4,RETADDR=RECEVRTY,RECORD=YES,RECPARM=ABNDPARM,      *\n               RETREGS=YES    REQUEST A RETRY\n         BR    R14            RETURN TO OUR CALLER\nRECEVRTY LA    R10,256        INDICATE ABEND\n         EJECT\nRETURN   BALR  RBASE,R0       A(*+2)\n         USING *,RBASE        ADDRESSABILITY\n         SETFRR D,WRKREGS=(R1,R15) CANCEL OUR FRR\n         LA    R1,X'80'       TURN ON THE HIGH\n         SLL   R1,24          ORDER BIT\n         LA    R11,CSAECB     AND PASS POST\n         ALR   R11,R1         THE COMMUNICATION ECB\n         SR    R12,R12        ERRET <- 0\n         L     R13,CSASCB     A(ASCB TO BE POSTED)\n         LM    R14,R3,CSAREGSV RESTORE THE CALLER'S REGS\n         L     R15,16         A(CVT)\n         USING CVT,R15        ADDRESSABILITY\n         L     R15,CVT0PT01   A(BRANCH ENTRY TO POST)\n         DROP  R15            TEMPORARY\n         BR    R15            POST AND RETURN TO SRB ATTACHER\n         SPACE 2\nRECEVFAD DC    A(RECEVFRR)    A(RECOVERY ROUTINE)\nABNDPARM DC    CL8'IGC0020H',CL8'RECEVSRB',CL8'HACXMFRR'\n         EJECT\n         REGS  ,\nRBASE    EQU   R2             A(RECEVSRB)\nRCSA     EQU   R3             A(CSA WORK AREA)\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         HACSAW\n         EJECT                                              *HMD 12/79*\n         IHASDWA\n         EJECT                                              *HMD 12/79*\n         IHAPSA\n         EJECT                                              *HMD 12/79*\n         IHAFRRS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 1288, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         REGS\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STATJES2": {"ttr": 1290, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "STAT2    TITLE 'OBTAIN JOB, STC, TSU, JOE STATUS FROM JES2'\nSTATJES2 CSECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                              STATJES2                               *\n*                      MVS/SP 1.3.3 - 1.3.4 VERSION                   *\n*                                                                     *\n* ABSTRACT: RETURN JES2 JOB QUEUE AND JOB OUTPUT ELEMENTS FOR         *\n*           INPUT JOB NAMES. KEEP A RECORD OF JQE'S AND JOE'S      |  *\n*           BY ROUTE CODE FOR LATER QUEUE POSITION INQUIRY.        |  *\n*                                                                     *\n*                                                                     *\n* FUNCTION: STATJES2 RECEIVES A JOB NAME LIST, A WORK AREA, AND A     *\n*           RETURN AREA AS INPUT. STATJES2 ASSUMES IT'S RUNNING    |  *\n*           UNDER A JES2 ADDRESS SPACE.  STATJES2 SEARCHES THE     |  *\n*           JES2'S JOB QUEUES AND OUTPUT TABLE FOR JOB QUEUE          *\n*           ELEMENTS (JQES) AND JOB OUTPUT ELEMENTS (JOES) THAT       *\n*           MATCH THE INPUT JOB NAMES.  THOSE JQES AND JOES THAT      *\n*           MATCH THE INPUT JOB NAMES ARE RETURNED TO THE CALLER      *\n*           IN THE RETURN AREA.                                       *\n*                                                                     *\n*           STATJES2 VERIFIES THAT IT IS RUNNING UNDER JES2 OR AN  |  *\n*           ALTERNATE JES BY LOCATING THE HASP COMMUNICATION       |  *\n*           TABLE (HCT). IF STATJES2 IS UNABLE TO LOCATE THE HCT,  |  *\n*           STATJES2 RETURNS CONTROL TO HER CALLER WITH A RETURN   |  *\n*           CODE OF 4. STATJES2 CHECKS ALL OF JES2'S JOB QUEUES       *\n*           FOR JQES THAT HAVE JOB NAMES WHICH MATCH 1 OF THE         *\n*           INPUT JOB NAMES. THOSE JQES THAT MATCH ARE RETURNED.      *\n*           IF NO JQES MATCH, STATJES2 RETURNS CONTROL TO HER         *\n*           CALLER. AFTER ALL JOB QUEUES HAVE BEEN SEARCHED,          *\n*           STATJES2 SEARCHES THE JOB OUTPUT TABLE FOR JOES WHOSE     *\n*           ASSOCIATED JQES HAVE JOB NAMES THAT MATCH 1 OF THE        *\n*           INPUT JOB NAMES. MATCHING JOES ARE RETURNED. IF AT        *\n*           ANY TIME, STATJES2 FILLS THE RETURN AREA, STATJES2        *\n*           RETURNS CONTROL TO HER CALLER WITH A RETURN CODE OF 8. |  *\n*                                                                     *\n*           STATJES2 SEARCHES FOR THE JES2 HCT BY TRYING TO FIND   |  *\n*           A TCB WHOSE FIRST RB IS EXECUTING A LOAD MODULE IN     |  *\n*           WHICH THE FIRST EIGHT BYTES AFTER THE JES2 MIT IS AN   |  *\n*           EIGHT BYTE CONSTANT OF C'$VERSION'. IF STATJES2 IS     |  *\n*           UNABLE TO LOCATE SUCH A TCB, CONTROL IS RETURNED TO    |  *\n*           THE CALLER WITH A RETURN CODE OF 4.                    |  *\n*                                                                     *\n*           MOST ALL OF THE FOLLOWING CODE COMES FROM JES2'S COMMAND  *\n*           HANDLING ROUTINE - HASPCOMM.                              *\n*                                                                     *\n*           TO LET STATUS (OUR TRUE CALLER) DISPLAY A QUEUED JOB'S    *\n*           POSITION ON ITS QUEUE, STATJES2 PROCESSES AS FOLLOWS:     *\n*                                                                     *\n*           THERE IS A SEPARATE JOB QUEUE FOR EACH ALLOWABLE JOB      *\n*           CLASS. EACH TIME STATJES2 BEGINS SCANNING A NEW JOB       *\n*           QUEUE, SHE ZEROES OUT A QUEUE COUNT. THIS COUNT IS INCRE- *\n*           MENTED EACH TIME A NON-ACTIVE JQE (CORRESPONDING TO A     *\n*           NON-EXECUTING JOB) IS FOUND ON THE QUEUE. WHEN A MATCHING *\n*           JQE IS RETURNED, THIS COUNT IS RETURNED WITH THE JQE. THE *\n*           COUNT AT THAT TIME IS THE JQE'S POSITION ON THE QUEUE.    *\n*           WHEN THE END OF A JOB QUEUE IS REACHED, THE QUEUE COUNT   *\n*           AT THAT TIME IS RETURNED IN ALL RETURNING JQES FOR THAT   *\n*           QUEUE. THE COUNT AT THAT TIME IS THE TOTAL NUMBER OF JQES *\n*           IN THE QUEUE.                                             *\n*                                                                     *\n*           SIMILAR, THOUGH SLIGHTLY MORE COMPLICATED, PROCESSING IS  *\n*           DONE FOR THE JOB OUTPUT TABLE. THERE IS A SEPARATE JOB    *\n*           OUTPUT QUEUE FOR EACH ALLOWABLE OUTPUT CLASS. SINCE OUT-  *\n*           PUT CAN BE ROUTED TO NUMEROUS LOCATIONS, A JOB'S OUTPUT   *\n*           QUEUE POSITION REALLY DEPENDS ON ITS OUTPUT ROUTE AS WELL *\n*           AS ITS CLASS.                                             *\n*                                                                     *\n*           FOR THIS REASON, STATJES2 RE-INITIALIZES A ROUTE COUNT    *\n*           TABLE EACH TIME IT BEGINS PROCESSING A DIFFERENT OUTPUT   *\n*           CLASS QUEUE. THIS TABLE CONTAINS THE DIFFERENT ROUTES     *\n*           AND THE NUMBER OF HITS TO THESE ROUTES. THIS TABLE IS     *\n*           USED SIMILARLY TO THE QUEUE COUNT ABOVE TO GIVE A JOB'S   *\n*           OUTPUT QUEUE POSITION AND QUEUE TOTAL.                    *\n*                                                                     *\n*                                                                     *\n* RELEASE                                                          |  *\n*    INFO   THIS COMMAND HAS BEEN REWRITTEN TO SUPPORT MVS/SP      |  *\n*           JES2 RELEASE 1.3.3 OR 1.3.4. NO OTHER SUPPORT IS       |  *\n*           INCLUDED. IT WAS JUST GETTING TOO COMPLICATED TO       |  *\n*           KEEP ON SUPPORTING ALL THOSE OTHER VERSIONS. SO GET    |  *\n*           YOUR SHOP ON STATE-OF-THE-ART SOFTWARE. IF YOU WORK    |  *\n*           FOR THE UNITED STATES GOVERNMENT, ESPECIALLY THE       |  *\n*           MILITARY I GUESS YOU'RE OUT OF LUCK.                   |  *\n*                                                                  |  *\n*           CHANGES TO THE DOCUMENTATION FOR THIS RELEASE ARE      |  *\n*           NOTED VIA A BAR TO THE RIGHT OF EACH CHANGED LINE      |  *\n*           THIS DOCUMENTATION BLOCK.                              |  *\n*                                                                  |  *\n* MODS      THIS RELEASE WAS REWRITTEN BY:                         |  *\n*                                                                  |  *\n*                 HOWARD M. DEAN                                   |  *\n*                 SYNTEX U.S.A                                     |  *\n*                 3401 HILLVIEW AVENUE                             |  *\n*                 PALO ALTO, CA 94303                              |  *\n*                 (415) 852-1792                                   |  *\n*                                                                  |  *\n*            PLEASE FEEL FREE TO CONTACT ME FOR SUGGESTIONS AND    |  *\n*            IMPROVEMENTS AND ALSO FOR INFO ON FUTURE RELEASEES.   |  *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> A(JOB NAME LIST)                                       *\n*              A(WORK AREA)                                           *\n*              A(RETURN AREA)                                         *\n*                                                                     *\n*                                                                     *\n* OUTPUT: RETURN AREA <- MATCHED JQES AND JOES                        *\n*                                                                     *\n*                                                                     *\n* RETURN CODES: R15 = 0 => NO ERRORS, SEE RETURN AREA + 4 FOR         *\n*                          H'# OF RETURNED JQES' FOLLOWED BY A        *\n*                          H'# OF RETURNED JOES'                      *\n*                     4 => UNABLE TO LOCATE JES2'S HCT                *\n*                     8 => FILLED RETURN AREA                         *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              RETURN                                                 *\n*              $HCT                                                   *\n*              $JQE                                                   *\n*              $JOE                                                   *\n*              $JOT                                                   *\n*              IHAPSA                                                 *\n*              IHAASCB                                                *\n*              IHAASXB                                                *\n*              IKJTCB                                                 *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES: REENTRANT, RESIDENT                                     *\n*                                                                     *\n*                                                                     *\n* DEPENDENCY: SINCE STATJES2 IS EXECUTED UNDER AN SRB, IT CANNOT      *\n*             EXECUTE ANY SVC'S.                                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY $HASPGBL        JES2 GLOBAL SYMBOLS           *HMD 03/85*\n         $HASPEQU             JES2 EQUATES                  *HMD 03/85*\nSTATJES2 CSECT                GET JOB INFO FROM JES2\n         SAVE  (14,12),,STATJES2_COPYRIGHT_(C)_1985_HOWARD_M_DEAN\n         LR    RBASE,R15      A(STATJES2)\n         USING STATJES2,RBASE ADDRESSABILITY\n         USING PARMS,R1       INPUT PARAMETER ADDRESSABILITY\n         B     BEGIN          BRANCH AROUND MODULE ID       *HMD 01/83*\n*                                                           *HMD 01/83*\nID       DC    CL32' ASSEMBLED ON &SYSDATE AT &SYSTIME'     *HMD 01/83*\n         DC    CL32' VER 1 REL 5 MOD 1'                     *HMD 04/85*\n*                                                           *HMD 01/83*\nBEGIN    LM    RWORK,RET,WORKAD A(WORK AREA),A(RETURN AREA)\n         USING WORKAREA,RWORK ADDRESSABILITY\n         DROP  R1             UNNECESSARY\n         BAL   RLINK,FINDHCT  HASP COMMUNICATION TABLE AVAILABLE?\n         B     GOTHCT         YES => SEARCH THE HASP QUEUES\n         LA    R15,4          NO => LET OUR CALLER KNOW\n         B     RETURN         RETURN TO OUR CALLER\nGOTHCT   BAL   RLINK,SETUPJQE INITIALIZE OUR VARIABLES\nANOTHER  BAL   RLINK,GETAJQE  LOOKED AT ALL JOB Q ELEMENTS?\n         B     CHECKJOB       NO => LOOK AT THE CURRENT 1\n         B     GOTJQES        YES => CHECK OUT ACTIVE DEVICES\nCHECKJOB BAL   RLINK,JQECHECK CURRENT JQE MATCH AN INPUT JOBNAME?\n         B     MATCHED        YES => RETURN THE JQE TO OUR CALLER\n         B     ANOTHER        NO => GET ANOTHER JQE\nMATCHED  BAL   RLINK,JQEMATCH RETURN THE MATCHED JQE\n         B     ANOTHER        GET ANOTHER JQE\n         BAL   RLINK,SETUPJOE RETURN THE JQE MATCH COUNT\n         B     FILLRET        TELL OUR CALLER WE FILLED THE RET AREA\nGOTJQES  BAL   RLINK,SETUPJOE SET UP JOE VARIABLES\n         LH    R1,4(RET)      # OF MATCHED JQES\n         LTR   R1,R1          ANY MATCHES?\n         BZ    DONE           NO => TELL OUR CALLER\nGETJOES  BAL   RLINK,GETAJOE  CHECKED ALL ACTIVE DEVICES?\n         B     CHECKIT        NO => CHECK THE CURRENT 1\n         B     DONE           YES => RETURN TO OUR CALLER\nCHECKIT  BAL   RLINK,JOECHECK CURRENT JOE MATCH AN INPUT JOBNAME?\n         B     MATCHES        YES => RETURN THE JOE TO OUR CALLER\n         B     GETJOES        NO => GET ANOTHER JOE\nMATCHES  BAL   RLINK,JOEMATCH RETURN THE MATCHED JOE\n         B     GETJOES        GET ANOTHER JOE\n         BAL   RLINK,SETDOWN  RETURN THE JOE MATCH COUNT\nFILLRET  LA    R15,8          INDICATE A FILLED RETURN AREA\n         B     RETURN         RETURN TO OUR CALLER\nDONE     BAL   RLINK,SETDOWN  RETURN ALL INFO TO OUR CALLER\nRETURN   RETURN (14,12),RC=(15) RETURN TO OUR CALLER\n         EJECT\n         USING PSA,R0         PSA ADDRESSABILITY\nFINDHCT  L     R1,PSAAOLD     A(JES2 ASCB)\n         USING ASCB,R1        ADDRESSABILITY\n         L     R1,ASCBASXB    A(ASXB)\n         USING ASXB,R1        ADDRESSABILITY\n         L     R15,ASXBFTCB   A(JES2'S 1ST TCB)\n         USING TCB,R15        ADDRESSABILITY\n         L     R15,TCBJSTCB   A(JES2'S JOB STEP TCB)\n         N     R15,ZEROFFF    PURIFY THE REGISTER           *HMD 01/83*\nLOOKHCT  L     R1,TCBRBP      A(RB)\n         USING RBBASIC,R1     ADDRESSABILITY\nFINDRB   L     R14,RBLINK     A(NEXT RB OR TCB)\n         N     R14,ZEROFFF    PURIFY THE REGISTER           *HMD 01/83*\n         CR    R14,R15        FOUND THE TCB'S 1ST PRB?\n         BE    GOTRB          YES => GET THE HCT\n         LR    R1,R14         A(NEXT RB)\n         B     FINDRB         SEARCH ON FOR THE 1ST PRB\nGOTRB    L     R1,RBCDE       A(CDE)\n         USING CDENTRY,R1     ADDRESSABILITY\n         L     R14,CDXLMJP    A(EXTENT LIST) OR A(MAJOR)    *HMD 04/85*\n         TM    CDATTR,CDMIN   IS THIS A MINOR CDE?          *HMD 04/85*\n         BZ    GOTMAJ         I GOT THE MAJOR ON THE LINE   *HMD 04/85*\n         LR    R1,R14         ADDRESS THE MAJOR             *HMD 04/85*\n         L     R14,CDXLMJP    NOW WE'VE GOT THE EXTENT LIST *HMD 04/85*\nGOTMAJ   DS    0H             MAJOR CDE LOADED              *HMD 04/85*\n         USING XTLST,R14      ADDRESS THE EXTENT LIST       *HMD 04/85*\n         L     RHCT,XTLMSBAA  A(MAIN STORAGE BLOCK)         *HMD 04/85*\n         USING HCTDSECT,RHCT  ADDRESSABILITY\n         CLC   $VERSION,JES2  FOUND THE JES2 HCT?\n         BER   RLINK          YES => TELL OUR CALLER\n         L     R15,TCBLTC     A(THIS TCB'S DAUGHTER)\n         N     R15,ZEROFFF    PURIFY THE REGISTER           *HMD 01/83*\n         LTR   R15,R15        TCB HAVE A DAUGHTER?\n         BNZ   LOOKHCT        YES => SEE IF ITS THE 1 WE WANT\n         B     4(RLINK)       LET OUR CALLER KNOW IT'S NOT AROUND\n         DROP  R0,R1,R14,R15  UNNECESSARY\n         SPACE 5\nJES2     DC    CL8'&VERSION'  MVS/SP JES2 RELEASE INDICATOR *HMD 01/83*\n         EJECT\nSETUPJQE LR    R1,RET         A(RETURN AREA)\n         A     R1,0(R1)       A(END OF RETURN AREA)\n         ST    R1,RETEND      SAVE IT FOR LATER CHECKING\n         LA    RRJQE,8(RET)   A(SPOT FOR THE 1ST RETURNED JQE)\n         SR    R#JQES,R#JQES  NO JQES MATCHED AS YET\n         LA    R#JQS,($JQTYPES+1)*$JQHEADL SO GETAJQE       *HMD 01/83*\n         LA    RJQE,ZERO-(JQENEXT-JQE)     WILL START       *HMD 01/83*\n         LR    RJQE1,RRJQE    OFF RIGHT\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 5\nSETUPJOE STH   R#JQES,4(RET)  PASS THE # OF JQE MATCHES BACK\n         SR    R#JOES,R#JOES  NO JOES MATCHED AS YET\n         LR    RJOE1,RRJOE    DITTO\n         LA    RJOE,ZERO-(JOENEXT-JOEDSECT) SO GETAJOE WILL\n         LH    RCOFF,MINUS2   START OFF RIGHT\n         BR    RLINK          RETURN TO OUR CALLER\n         SPACE 2\nMINUS2   DC    AL2(KZERO-JOTHEADL)  RCOFF INITIAL VALUE     *HMD 01/83*\n         SPACE 5\nSETDOWN  STH   R#JOES,6(RET)  RETURN THE COUNT OF MATCHED JOES\n         SR    R15,R15        RETURN CODE\n         BR    RLINK          RETURN TO OUR CALLER\n         EJECT\n         USING JQE,RJQE       JQE ADDRESSABILITY\nGETAJQE  L     RJQE,JQENEXT   OFFSET TO NEXT JQE            *HMD 01/83*\n         N     RJQE,ZEROFFF   INSURE OFFSET POSITIVE        *HMD 01/83*\n         BZ    ENDOFJQ        NO JQES ON CHAIN => NEXT JQ\n         AL    RJQE,$JOBQPTR  A(JQE)\n         TM    JQEFLAGS,QUEBUSY JQE OF AN EXECUTING JOB?\n         BNZR  RLINK          YES => DON'T INCREMENT THE Q COUNT\n         LH    R1,JQECOUNT    INCREMENT\n         LA    R1,1(R1)       THE JQE\n         STH   R1,JQECOUNT    COUNT\n         BR    RLINK          RETURN TO OUR CALLER\nENDOFJQ  CLR   RJQE1,RRJQE    ANY MATCHED JQES?\n         BNL   GETNXTJQ       NO => GET THE NEXT JOB Q\n         MVC   JQETOTAL-JQE(L'JQETOTAL,RJQE1),JQECOUNT PUT IN TOTAL\n         LA    RJQE1,JQELNGTH(RJQE1) A(NEXT RETURNED JQE)\n         B     ENDOFJQ        TOTAL ALL MATCHED JQES\nGETNXTJQ SH    R#JQS,=AL2($JQHEADL)                         *HMD 01/83*\n         BNP   4(RLINK)       ALL JOB QUEUES CHECKED?       *HMD 01/83*\nNEXTJQ   LA    RJQE,$JQHEADS-$JQHEADL-QUENEXT(R#JQS)        *HMD 01/83*\n*                             A(NEXT JOB QUEUE HEAD)        *HMD 01/83*\n         XC    JQECOUNT,JQECOUNT NO JQES AS YET\n         LR    RJQE1,RRJQE    A(1ST RETURN JQE IN THIS Q)\n         B     GETAJQE        GET A JQE FROM THE JOB Q\n         DROP  RJQE           UNNECESSARY\n         EJECT\n         USING JOEDSECT,RJOE    JOE ADDRESSABILITY\nGETAJOE  L     RJOE,JOENEXT     OFFSET TO NEXT JOE          *HMD 01/83*\n         N     RJOE,ZEROFFF     PURIFY HIGH BYTE            *HMD 01/83*\n         BZ    NXTCLASS       YES => CHECK THE NEXT CLASS\n         AL    RJOE,$JOTABLE    A(NEXT JOE)\n         L     RJQE,JOEJQE     ASSOCIATE JQE OFFSET         *HMD 01/83*\n         N     RJQE,ZEROFFF    PURIFY HIGH BYTE             *HMD 01/83*\n         AL    RJQE,$JOBQPTR   A(ASSOCIATED JQE)\n         TM    JOEFLAG,$JOEBUSY ACTIVE JOE?\n         BNZR  RLINK          YES => DON'T INCREMENT THE Q COUNT\n         LA    R15,MAX#DEST   MAX # OF COUNTABLE DESTINATIONS\n         LA    R1,DESTCNTS    A(DESTINATION COUNTERS)\n         MVC   JOEROUTH,JOEROUT      MOVE THE ROUTE CODE    *HMD 01/83*\n         SPACE 2                                            *HMD 03/85*\nCHKDESTA CLC   JOERNODE,ZERO     Q. LOCAL DEVICE?           *HMD 01/83*\n         BNE   CHKDESTB          A. NO, CHECK REMOTE        *HMD 01/83*\nCHKDESTC MVI   JOEROUTH,C'L'     INDICATE LOCAL DEVICE      *HMD 01/83*\n         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*\n         B     CHKDEST           END THIS MESS              *HMD 01/83*\nCHKDESTB CLC   JOERNODE,$OWNNODE Q. IS THIS OUR NODE?       *HMD 01/83*\n         BNE   CHKDEST           A. NO, ANOTHER REMOTE      *HMD 01/83*\n         CLC   JOEREMOT,ZERO     Q. REMOTE ZERO?            *HMD 01/83*\n         BE    CHKDESTC          A. YES, INDICATE LOCAL     *HMD 01/83*\n         MVI   JOEROUTH,C'R'     INDICATE REMOTE DEVICE     *HMD 01/83*\n         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*\n         SPACE 2                                            *HMD 03/85*\nCHKDEST  CLI   0(R1),X'FF'    END OF DESTINATION COUNTERS?\n         BE    FIRSTDST       YES => THIS IS THE 1ST TO THIS DEST\n         CLC   0(L'JOEROUT,R1),JOEROUTH      MATCH?         *HMD 01/83*\n         BE    GOTDEST        YES => INCREMENT ITS COUNT\n         LA    R1,DESTSIZE(,R1)\n*                             A(NEXT DESTINATION COUNT)\n         BCT   R15,CHKDEST    CHECKED ALL COUNTED DESTINATIONS?\n         BR    RLINK          YES => CAN'T HANDLE THIS 1\nFIRSTDST MVC   0(L'JOEROUT,R1),JOEROUTH                     *HMD 01/83*\n         MVC   DESTSIZE-2(2,R1),=H'1'                       *HMD 01/83*\n*                             1ST HIT ON THAT DESTINATION   *HMD 12/80*\n         BR    RLINK          RETURN TO OUR CALLER          *HMD 12/80*\nGOTDEST  LH    R15,DESTSIZE-2(,R1)                          *HMD 12/80*\n*                             GET DESTINATION COUNTER       *HMD 01/83*\n         N     R15,XFFFF      MAKE SURE ITS POSITIVE        *HMD 12/80*\n         AH    R15,=H'1'      INCREMENT THEM                *HMD 12/80*\n         STH   R15,DESTSIZE-2(,R1)                          *HMD 12/80*\n*                             RESET THE COUNT               *HMD 01/83*\n         BR    RLINK          LET OUR CALLER SEE THIS JOE'S JQE\n         SPACE 2                                            *HMD 01/83*\nNXTCLASS CLR   RJOE1,RRJOE    ANY RETURNED JOES?\n         BNL   GETNXTCL       NO => GET THE NEXT CLASS\n         ST    RLINK,JOEHOLD  SAVE OUR RETURN ADDRESS\n         SPACE 2                                            *HMD 03/85*\nSETOTAL  MVC   JOEROUTH(L'JOEROUT),JOEROUT-JOEDSECT(RJOE1)  *HMD 01/83*\n         LA    R1,JOEROUTH    A(DESTINATION)                *HMD 01/83*\nSETOTALA CLC   JOERNODE-JOEDSECT(L'JOERNODE,RJOE1),ZERO     *HMD 01/83*\n*                                Q. LOCAL DEVICE?           *HMD 01/83*\n         BNE   SETOTALB          A. NO, CHECK REMOTE        *HMD 01/83*\nSETOTALC MVI   JOEROUTH,C'L'     INDICATE LOCAL             *HMD 01/83*\n         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*\n         B     CALLFIND          END THIS MESS              *HMD 01/83*\nSETOTALB CLC   JOERNODE-JOEDSECT(L'$OWNNODE,RJOE1),$OWNNODE *HMD 01/83*\n*                                Q. IS THIS OUR NODE?       *HMD 01/83*\n         BNE   CALLFIND          A. NO, ANOTHER REMOTE      *HMD 01/83*\n         CLC   JOEREMOT-JOEDSECT(L'JOEREMOT,RJOE1),ZERO     *HMD 01/83*\n*                                Q. REMOTE ZERO?            *HMD 01/83*\n         BE    SETOTALC          A. YES, MUST BE LOCAL      *HMD 01/83*\n         MVI   JOEROUTH,C'R'     INDICATE REMOTE DEVICE     *HMD 01/83*\n         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*\n         SPACE 2                                            *HMD 03/85*\nCALLFIND BAL   RLINK,FINDEST  FIND THE DESTINATION COUNT\n         STH   R1,JOETOTAL-JOEDSECT(RJOE1) RETURN THE DEST TOTAL\n         LA    RJOE1,JOESIZE(RJOE1) A(NEXT RETURNED JOE)\n         CLR   RJOE1,RRJOE    TOTALED ALL RETURNED JOES?\n         BL    SETOTAL        NO => KEEP IT UP\n         L     RLINK,JOEHOLD  RESTORE THE RETURN ADDRESS\nGETNXTCL LA    RCOFF,JOTHEADL(RCOFF)  NEXT CLASS OFFSET     *HMD 01/83*\n         CH    RCOFF,ENDCLASS         CHECKED ALL CLASSES?  *HMD 01/83*\n         BH    4(RLINK)       YES => TELL OUR CALLER\n         L     R1,$JOTABLE    A(JOT)\n         USING JOTDSECT,R1    ADDRESSABILITY\n         LA    RJOE,JOTRDYWQ-(JOENEXT-JOEDSECT)(RCOFF) INITIALIZE\n         DROP  R1             UNNECESSARY\n         SPACE 1\n         LA    R14,DESTCNTS              SINK FIELD         *HMD 01/83*\n         LA    R15,DESTEND-DESTCNTS      LENGTH OF FIELD    *HMD 01/83*\n         SLR   R0,R0                     SOURCE FIELD       *HMD 04/85*\n         LA    R1,255                    PAD BYTE           *HMD 04/85*\n         SLL   R1,24                     MOVE TO HI ORDER   *HMD 04/85*\n         MVCL  R14,R0                    M O V E L O N G    *HMD 01/83*\n         SPACE 1\n         LR    RJOE1,RRJOE    NO JOES RETURNED AS YET\n         B     GETAJOE        GET THE 1ST JOE IN THE CLASS\n         DROP  RJOE           UNNECESSARY\n         SPACE 5\nENDCLASS DC    AL2(L'JOTRDYWQ-JOTHEADL) * OF CLASS OFFSETS  *HMD 01/83*\n         DS    0F\nZEROFFF  DC    F'16777215'    CLEAR HI BYTE                 *HMD 01/83*\nXFFFF    DC    X'0000FFFF'    POSITIVE OFFSET INSURER\nFULLZERO DC    F'0'           QUEUE OFFSET INSURER          *HMD 01/83*\nZERO     EQU   FULLZERO,4     CONSTANT OF ZERO\n         EJECT\nJQECHECK L     R1,24(R13)     A(INPUT PARAMETERS)\n         USING PARMS,R1       ADDRESSABILITY\n         L     R14,JOBNAMES   A(INPUT JOB NAMES)\n         DROP  R1             UNNECESSARY\n         L     R1,0(R14)    LENGTH OF THE JOB PARM DATA\n         SH    R1,FOUR        (# OF JOBS) * 10\n         SR    R0,R0          FOR THE DIVIDE\n         D     R0,TEN         # OF JOBS\n         LA    R15,4(R14)   A(1ST JOB NAME ENTRY)\nCHKJOBNM LH    R14,0(R15)     H'JOB NAME LENGTH'\n         BCTR  R14,R0         FOR THE COMPARE\n         EX    R14,CMPJOBS    JOB NAME MATCH?\n         BER   RLINK          YES => LET OUR CALLER SEE IT\n         LA    R15,10(R15)    A(NEXT JOB NAME ENTRY)\n         BCT   R1,CHKJOBNM    CHECKED ALL JOB NAMES?\n         B     4(RLINK)       YES => TELL OUR CALLER NO MATCH\n         SPACE 5\nCMPJOBS  CLC   QUEJNAME(0,RJQE),2(R15) TO BE EXECUTED\nFOUR     DC    H'4'           HELPS GET # OF INPUT JOB NAMES\nTEN      DC    F'10'          LENGTH OF AN INPUT JOB NAME ENTRY\n         EJECT\nJOECHECK LH    R1,4(RET)      # OF MATCHED JQES\n         LA    R15,8(RET)     A(1ST RETURNED JQE)\nCHKJOEMT CLC   QUEJOBNO(L'JQEJOBNO,R15),QUEJOBNO(RJQE) MATCH?\n         BE    JOEMAT         YES => RETURN IT\n         LA    R15,JQELNGTH(R15) A(NEXT RETURNED JQE)\n         BCT   R1,CHKJOEMT    CHECKED ALL RETURNED JQES?\n         B     4(RLINK)       YES => TELL CALLER NO MATCH\nJOEMAT   SLR   R15,RET        OFFSET TO RETURNED JQE\n         ST    R15,JOEJQEOF   PASS IT TO JOEMATCH           *HMD 01/83*\n         BR    RLINK          RETURN TO OUR CALLER\n         EJECT\n         USING JQE,RJQE       JQE ADDRESSABILITY\nJQEMATCH MVC   0(JQELNGTH,RRJQE),JQE RETURN THIS MATCHED JQE\n         MVC   JQEPOSTN-JQE(L'JQEPOSTN,RRJQE),JQECOUNT RET THE POS\n         LA    R#JQES,1(R#JQES) INCREMENT THE JQE MATCHED COUNT\n         LA    RRJQE,JQELNGTH(RRJQE) A(SPOT FOR NEXT RETURN JQE)\n         B     CHECKRET       SEE IF WE'VE FILLED THE RET AREA\n         DROP  RJQE           UNNECESSARY\n         EJECT\n         USING JOEDSECT,RJOE  JOE ADDRESSABILITY\nJOEMATCH ST    RLINK,JOEMHOLD SAVE THE RETURN ADDRESS\n         MVC   0(JOESIZE,RRJOE),JOEDSECT RETURN THE JOE\n         MVC   JOEJQEB-JOEDSECT(L'JOEJQEB,RRJOE),JOEJQEOF+1 *HMD 01/83*\n*                             RET THE JQE OFFSET            *HMD 01/83*\n         ST    RJOE,JOEJQEOF  SAVE THE JOE POINTER          *HMD 04/85*\n         ICM   RJOE,B'0111',JOECHARB                        *HMD 04/85*\n         BZ    JOEMREST       POINT TO CHAR JOE, IF ANY     *HMD 04/85*\n         AL    RJOE,$JOTABLE  POINT TO CHAR JOE             *HMD 04/85*\n         MVC   JOEWRECN-JOEDSECT(L'JOEWTRID,RRJOE),JOEWTRID *HMD 04/85*\n*                             MOVE IN WRITER ID (FOR MAIL)  *HMD 04/85*\nJOEMREST L     RJOE,JOEJQEOF  RESTORE JOE POINTER           *HMD 04/85*\n         SPACE 1                                            *HMD 04/85*\nJOEMROUT MVC   JOEROUTH(L'JOEROUT),JOEROUT   MOVE ROUTING   *HMD 04/85*\n         LA    R1,JOEROUTH    A(JOE DESTINATION)            *HMD 12/80*\n         SPACE 2                                            *HMD 03/85*\nCHKROUTA CLC   JOERNODE,ZERO    Q. LOCAL DEVICE?            *HMD 01/83*\n         BNE   CHKROUTB         A. NO, CHECK REMOTE         *HMD 01/83*\nCHKROUTC MVI   JOEROUTH,C'L'    INDICATE LOCAL DEVICE       *HMD 01/83*\n         MVI   JOEROUTH+1,KZERO CLEAR NEXT BYTE             *HMD 01/83*\n         B     CALLFDST         END THIS MESS               *HMD 01/83*\nCHKROUTB CLC   JOERNODE,$OWNNODE Q. IS THIS OUR NODE?       *HMD 01/83*\n         BNE   CALLFDST          A. NO, ANOTHER REMOTE      *HMD 01/83*\n         CLC   JOEREMOT,ZERO     Q. REMOTE ZERO?            *HMD 01/83*\n         BE    CHKROUTC          A. YES, INDICATE LOCAL     *HMD 01/83*\n         MVI   JOEROUTH,C'R'     INDICATE REMOTE            *HMD 01/83*\n         MVI   JOEROUTH+1,KZERO  CLEAR NEXT BYTE            *HMD 01/83*\n         SPACE 2                                            *HMD 03/85*\nCALLFDST BAL   RLINK,FINDEST  FIND THE DESTINATION COUNT\n         STH   R1,JOEPOSTN-JOEDSECT(RRJOE) RET THE JOE POSITION\n         L     RLINK,JOEMHOLD RESTORE THE RETURN ADDRESS\n         LA    R#JOES,1(R#JOES) INCREMENT THE JOE COUNT\n         LA    RRJOE,JOESIZE(RRJOE) A(SPOT FOR NEXT RET JOE)\nCHECKRET LA    R1,JOESIZE(RRJOE) A(END OF NEXT RET JOE)\n         C     R1,RETEND      FILLED THE RETURN AREA?\n         BLR   RLINK          NO => RETURN TO OUR CALLER\n         B     4(RLINK)       YES => LET OUR CALLER KNOW\n         DROP  RJOE           UNNECESSARY\n         EJECT\nFINDEST  LA    R15,MAX#DEST   MAX # OF COUNTABLE DESTINATIONS\n         LA    R14,DESTCNTS   A(1ST COUNTED DESTINATION)\nDESTCHK  CLI   0(R14),X'FF'   END OF COUNTED DESTINATIONS?\n         BE    NODEST         YES => NO DESTINATION COUNT\n         CLC   0(DESTSIZE-2,R14),0(R1)                      *HMD 01/83*\n*                             DESTINATION MATCH?            *HMD 01/83*\n         BE    DESTFND        YES => FOUND THE CALLER'S DESTINATION\n         LA    R14,DESTSIZE(,R14)                           *HMD 01/83*\n*                             A(NEXT DESTINATION)           *HMD 01/83*\n         BCT   R15,DESTCHK    CHECKED ALL DESTINATIONS?\nNODEST   SR    R1,R1          INDICATE DESTINATION\n         BR    RLINK          NOT FOUND\nDESTFND  LH    R1,DESTSIZE-2(,R14)                          *HMD 12/80*\n         N     R1,XFFFF       MAKE SURE ITS POSITIVE        *HMD 12/80*\n         BR    RLINK          RETURN TO OUR CALLER          *HMD 12/80*\nIRVING   LTORG ,                                            *HMD 01/81*\n         EJECT\n         SPACE 2                                            *HMD 01/83*\nKZERO    EQU   0              CONSTANT OF ZERO              *HMD 01/83*\nRLINK    EQU   R2             INTERNAL LINK REGISTER\nRBASE    EQU   R3             A(STATJES2)\nRHCT     EQU   R4             A(HASP COMMUNICATION TABLE)\nRJQE     EQU   R5             A(JOB QUEUE ELEMENT)\nRWORK    EQU   R6             A(WORK AREA)\nRET      EQU   R7             A(RETURN AREA)\nRJOE     EQU   R8             A(JOB OUTPUT ELEMENT)\nR#JQES   EQU   R9             # OF JOB QUEUE ELEMENTS MATCHED\nR#JOES   EQU   R9             # OF JOB OUTPUT ELEMENTS MATCHED\nRRJQE    EQU   R10            A(RETURNED JOB QUEUE ELEMENT)\nRRJOE    EQU   R10            A(RETURNED JOB OUTPUT ELEMENT)\nR#JQS    EQU   R11            JOB QUEUE COUNT\nRCOFF    EQU   R11            CLASS OFFSET COUNT\nRJQE1    EQU   R12            A(1ST RETURNED JOB Q ELEMENT / Q)\nRJOE1    EQU   R12            A(1ST RETURNED JOE / CLASS)\n         EJECT\nBUFSTART EQU   0                                            *HMD 01/83*\nBUFDSECT EQU   0                                            *HMD 01/83*\nBASE1    EQU   0\nSAVE     EQU   0                                            *HMD 01/83*\nJCT      EQU   0                                            *HMD 01/83*\n$DUPVOLT EQU   X'04'\n         $PCE                 PROCESSOR CONTROL ENTRY       *HMD 03/85*\n         $JCT                 JOB CONTROL TABLE             *HMD 01/83*\n         $CAT                 CLASS ATTRIBUTE TABLE         *HMD 01/83*\n         $DCT                 JES2 DEVICE CONTROL TABLE     *HMD 03/85*\n         $MIT                 JES2 MODULE INFORMATION TABLE *HMD 03/85*\n         $JQE\n         $HCT                 JES2 CONTROL TABLE            *HMD 03/85*\nJQEPOSTN EQU   JQETRAK,2      JQE POSITION\nJQETOTAL EQU   JQETRAK+2,2    QUEUE TOTAL\n         $JOE\nJOEPOSTN EQU   JOEIOTTR,2     JOE POSITION                  *HMD 01/83*\nJOETOTAL EQU   JOEIOTTR+2,2   QUEUE TOTAL                   *HMD 01/83*\n         $JOT\n         TITLE 'OBTAIN JOB, STC, TSU STATUS FROM JES2'      *HMD 10/80*\n         IHAPSA\n         EJECT                                              *HMD 12/79*\n         IHAASCB\n         EJECT                                              *HMD 12/79*\n         IHAASXB\n         EJECT                                              *HMD 12/79*\n         IKJTCB  LIST=YES\n         EJECT                                              *HMD 12/79*\n         IHARB                OS/VS2 REQUEST BLOCK          *HMD 01/83*\n         EJECT                                              *HMD 12/79*\n         IHACDE               CONTENTS DIRECTORY ENTRY      *HMD 01/83*\n         EJECT                                              *HMD 04/85*\n         IHAXTLST             EXTENT LIST                   *HMD 04/85*\n         EJECT\nPARMS    DSECT                INPUT PARAMETERS\nJOBNAMES DS    A              A(INPUT JOB NAMES)\nWORKAD   DS    A              A(WORK AREA)\nRETAREA  DS    A              A(RETURN AREA)\n         EJECT\nWORKAREA DSECT                WORK AREA\nDESTCNTS DS    XL1024         DESTINATION COUNT TABLE       *HMD 01/83*\nDESTEND  EQU   *              END OF DEST COUNT TABLE       *HMD 01/83*\nDESTSIZE EQU   6              SIZE OF TABLE                 *HMD 01/83*\nMAX#DEST EQU   (DESTEND-DESTCNTS)/DESTSIZE                  *HMD 01/83*\n*                             # OF COUNTABLE DESTINATIONS   *HMD 01/83*\nRETEND   DS    A              A(END OF RETURN AREA)\nJOEHOLD  DS    A              RETURN ADDRESS HOLD FOR GETAJOE\nJOEJQEOF DS    F              JQE OFFSET FOR JOE            *HMD 01/83*\nJQECOUNT DS    H              COUNT OF JQES                 *HMD 01/81*\nJOEMHOLD DS    A              RETURN ADDRESS HOLD FOR JOEMATCH\nJOEROUTH DS    F              HOLD AREA FOR JOE ROUTE CODE  *HMD 01/83*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USERMOD": {"ttr": 1543, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT426/FILE426.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT426", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}